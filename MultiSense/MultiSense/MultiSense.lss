
MultiSense.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00011a34  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000002b0  20000000  00011a34  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  000302b0  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  000302b0  2**0
                  CONTENTS
  4 .bss          00008e28  200002c0  00011d00  000302c0  2**5
                  ALLOC
  5 .stack        0000c000  200090e8  0001ab28  000302c0  2**0
                  ALLOC
  6 .ARM.attributes 0000002a  00000000  00000000  000302b0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000302da  2**0
                  CONTENTS, READONLY
  8 .debug_info   00090fbc  00000000  00000000  00030333  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00009d8b  00000000  00000000  000c12ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0003e708  00000000  00000000  000cb07a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001cd0  00000000  00000000  00109782  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003170  00000000  00000000  0010b452  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000422e5  00000000  00000000  0010e5c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00036f6b  00000000  00000000  001508a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0011a50b  00000000  00000000  00187812  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000057a4  00000000  00000000  002a1d20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	e8 50 01 20 09 0b 00 00 05 0b 00 00 05 0b 00 00     .P. ............
      10:	05 0b 00 00 05 0b 00 00 05 0b 00 00 00 00 00 00     ................
	...
      2c:	05 0b 00 00 05 0b 00 00 00 00 00 00 05 0b 00 00     ................
      3c:	05 0b 00 00 05 0b 00 00 05 0b 00 00 05 0b 00 00     ................
      4c:	05 0b 00 00 05 0b 00 00 05 0b 00 00 05 0b 00 00     ................
      5c:	05 0b 00 00 05 0b 00 00 05 0b 00 00 05 0b 00 00     ................
      6c:	05 0b 00 00 05 0b 00 00 05 0b 00 00 05 0b 00 00     ................
      7c:	05 0b 00 00 05 0b 00 00 05 0b 00 00 05 0b 00 00     ................
      8c:	05 0b 00 00 05 0b 00 00 05 0b 00 00 05 0b 00 00     ................
      9c:	05 0b 00 00 05 0b 00 00 05 0b 00 00 05 0b 00 00     ................
      ac:	05 0b 00 00 05 0b 00 00 b9 35 00 00 cd 35 00 00     .........5...5..
      bc:	0d 2d 00 00 19 2d 00 00 25 2d 00 00 31 2d 00 00     .-...-..%-..1-..
      cc:	3d 2d 00 00 05 0b 00 00 05 0b 00 00 05 0b 00 00     =-..............
      dc:	05 0b 00 00 05 0b 00 00 05 0b 00 00 05 0b 00 00     ................
      ec:	05 0b 00 00 00 00 00 00 c1 36 00 00 99 3a 00 00     .........6...:..
      fc:	ad 3a 00 00 c1 3a 00 00 d5 3a 00 00 05 0b 00 00     .:...:...:......
     10c:	05 0b 00 00 05 0b 00 00 05 0b 00 00 05 0b 00 00     ................
     11c:	05 0b 00 00 05 0b 00 00 05 0b 00 00 05 0b 00 00     ................
     12c:	05 0b 00 00 05 0b 00 00 05 0b 00 00 05 0b 00 00     ................
     13c:	05 0b 00 00 05 0b 00 00 05 0b 00 00 e9 3a 00 00     .............:..
     14c:	fd 3a 00 00 11 3b 00 00 25 3b 00 00 05 0b 00 00     .:...;..%;......
     15c:	05 0b 00 00 05 0b 00 00 05 0b 00 00 05 0b 00 00     ................
     16c:	05 0b 00 00 05 0b 00 00 05 0b 00 00 00 00 00 00     ................
     17c:	00 00 00 00 c1 52 00 00 cd 52 00 00 d9 52 00 00     .....R...R...R..
     18c:	e5 52 00 00 79 2d 00 00 05 0b 00 00 05 0b 00 00     .R..y-..........
     19c:	05 0b 00 00 05 0b 00 00 05 0b 00 00 05 0b 00 00     ................
     1ac:	05 0b 00 00 05 0b 00 00 05 0b 00 00 05 0b 00 00     ................
     1bc:	05 0b 00 00 05 0b 00 00 05 0b 00 00 05 0b 00 00     ................
     1cc:	05 0b 00 00 05 0b 00 00 05 0b 00 00 05 0b 00 00     ................
     1dc:	05 0b 00 00 05 0b 00 00 05 0b 00 00 05 0b 00 00     ................
     1ec:	79 40 00 00 05 0b 00 00 05 0b 00 00 05 0b 00 00     y@..............
     1fc:	05 0b 00 00 05 0b 00 00 05 0b 00 00 05 0b 00 00     ................
     20c:	05 0b 00 00 05 0b 00 00 05 0b 00 00 05 0b 00 00     ................
     21c:	05 0b 00 00 05 0b 00 00 05 0b 00 00 05 0b 00 00     ................
     22c:	05 0b 00 00 05 0b 00 00 05 0b 00 00 05 0b 00 00     ................
     23c:	05 0b 00 00 05 0b 00 00 05 0b 00 00 05 0b 00 00     ................
     24c:	05 0b 00 00 05 0b 00 00 05 0b 00 00 05 0b 00 00     ................
     25c:	05 0b 00 00 05 0b 00 00                             ........

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	200002c0 	.word	0x200002c0
     280:	00000000 	.word	0x00000000
     284:	00011a34 	.word	0x00011a34

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00011a34 	.word	0x00011a34
     2c4:	200002c4 	.word	0x200002c4
     2c8:	00011a34 	.word	0x00011a34
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b03      	ldr	r3, [pc, #12]	; (2e0 <atmel_start_init+0x10>)
     2d4:	4798      	blx	r3
	usb_init();
     2d6:	4b03      	ldr	r3, [pc, #12]	; (2e4 <atmel_start_init+0x14>)
     2d8:	4798      	blx	r3
	persistent_storage_init();
     2da:	4b03      	ldr	r3, [pc, #12]	; (2e8 <atmel_start_init+0x18>)
     2dc:	4798      	blx	r3
     2de:	bd08      	pop	{r3, pc}
     2e0:	0000131d 	.word	0x0000131d
     2e4:	0000daf1 	.word	0x0000daf1
     2e8:	0000b6cd 	.word	0x0000b6cd

000002ec <convert>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: Function to format [vargs]
// Returns:     formatted string ptr
// *****************************************************************************************************************************************************************
static char *convert(unsigned int num, int base)
{
     2ec:	b410      	push	{r4}
     2ee:	4603      	mov	r3, r0
	static char		Representation[]= "0123456789ABCDEF";
	static char		buffer[50];
	char		   *ptr;
	
	ptr = &buffer[49];
	*ptr = '\0';
     2f0:	4808      	ldr	r0, [pc, #32]	; (314 <convert+0x28>)
     2f2:	2200      	movs	r2, #0
     2f4:	f800 2f31 	strb.w	r2, [r0, #49]!
	
	do {
		*--ptr = Representation[num%base];
     2f8:	4c07      	ldr	r4, [pc, #28]	; (318 <convert+0x2c>)
     2fa:	fbb3 f2f1 	udiv	r2, r3, r1
     2fe:	fb01 3312 	mls	r3, r1, r2, r3
     302:	5ce3      	ldrb	r3, [r4, r3]
     304:	f800 3d01 	strb.w	r3, [r0, #-1]!
		num /= base;
     308:	4613      	mov	r3, r2
	} while(num != 0);
     30a:	2a00      	cmp	r2, #0
     30c:	d1f5      	bne.n	2fa <convert+0xe>
	
	return ptr;
}
     30e:	bc10      	pop	{r4}
     310:	4770      	bx	lr
     312:	bf00      	nop
     314:	200002dc 	.word	0x200002dc
     318:	0000e998 	.word	0x0000e998

0000031c <xprintf>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: Function to format and write the debug/info to the standard stream IO
// Returns:     Nothing
// *****************************************************************************************************************************************************************
void xprintf(char* format, ...) 
{ 
     31c:	b40f      	push	{r0, r1, r2, r3}
     31e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     322:	b082      	sub	sp, #8
     324:	ab08      	add	r3, sp, #32
     326:	f853 6b04 	ldr.w	r6, [r3], #4
	unsigned int     i;
	char			 temp;
	char            *s; 
	
	va_list arg; 
	va_start(arg, format); 
     32a:	9300      	str	r3, [sp, #0]
	
	for (traverse = format; *traverse; traverse++) 
     32c:	7833      	ldrb	r3, [r6, #0]
     32e:	2b00      	cmp	r3, #0
     330:	f000 80a6 	beq.w	480 <xprintf+0x164>
	{ 
	    if (*traverse != '%') {
			while (!usart_async_is_tx_empty(&USART_1)) {}
     334:	4d55      	ldr	r5, [pc, #340]	; (48c <xprintf+0x170>)
     336:	4c56      	ldr	r4, [pc, #344]	; (490 <xprintf+0x174>)
			io_write((struct io_descriptor *const)io, (const uint8_t *const)traverse, 1);
     338:	f8df 8164 	ldr.w	r8, [pc, #356]	; 4a0 <xprintf+0x184>
     33c:	e02a      	b.n	394 <xprintf+0x78>
			while (!usart_async_is_tx_empty(&USART_1)) {}
		} else {
			traverse++; 
     33e:	1c77      	adds	r7, r6, #1
			switch (*traverse)  { 
     340:	7873      	ldrb	r3, [r6, #1]
     342:	3b63      	subs	r3, #99	; 0x63
     344:	2b15      	cmp	r3, #21
     346:	d821      	bhi.n	38c <xprintf+0x70>
     348:	e8df f003 	tbb	[pc, r3]
     34c:	2020360b 	.word	0x2020360b
     350:	20202020 	.word	0x20202020
     354:	20202020 	.word	0x20202020
     358:	20202050 	.word	0x20202050
     35c:	2020206a 	.word	0x2020206a
     360:	8020      	.short	0x8020
				case 'c' : i = va_arg(arg, int);
     362:	9b00      	ldr	r3, [sp, #0]
     364:	1d1a      	adds	r2, r3, #4
     366:	9200      	str	r2, [sp, #0]
						temp = (char)i;
     368:	681b      	ldr	r3, [r3, #0]
     36a:	f88d 3007 	strb.w	r3, [sp, #7]
						while (!usart_async_is_tx_empty(&USART_1)) {}
     36e:	4628      	mov	r0, r5
     370:	47a0      	blx	r4
     372:	2800      	cmp	r0, #0
     374:	d0fb      	beq.n	36e <xprintf+0x52>
						io_write((struct io_descriptor *const)io, (const uint8_t *const)&temp, 1);
     376:	2201      	movs	r2, #1
     378:	f10d 0107 	add.w	r1, sp, #7
     37c:	f8d8 0000 	ldr.w	r0, [r8]
     380:	4b44      	ldr	r3, [pc, #272]	; (494 <xprintf+0x178>)
     382:	4798      	blx	r3
						while (!usart_async_is_tx_empty(&USART_1)) {}
     384:	4628      	mov	r0, r5
     386:	47a0      	blx	r4
     388:	2800      	cmp	r0, #0
     38a:	d0fb      	beq.n	384 <xprintf+0x68>
	for (traverse = format; *traverse; traverse++) 
     38c:	1c7e      	adds	r6, r7, #1
     38e:	787b      	ldrb	r3, [r7, #1]
     390:	2b00      	cmp	r3, #0
     392:	d075      	beq.n	480 <xprintf+0x164>
	    if (*traverse != '%') {
     394:	2b25      	cmp	r3, #37	; 0x25
     396:	d0d2      	beq.n	33e <xprintf+0x22>
			while (!usart_async_is_tx_empty(&USART_1)) {}
     398:	4628      	mov	r0, r5
     39a:	47a0      	blx	r4
     39c:	2800      	cmp	r0, #0
     39e:	d0fb      	beq.n	398 <xprintf+0x7c>
			io_write((struct io_descriptor *const)io, (const uint8_t *const)traverse, 1);
     3a0:	2201      	movs	r2, #1
     3a2:	4631      	mov	r1, r6
     3a4:	f8d8 0000 	ldr.w	r0, [r8]
     3a8:	4b3a      	ldr	r3, [pc, #232]	; (494 <xprintf+0x178>)
     3aa:	4798      	blx	r3
			while (!usart_async_is_tx_empty(&USART_1)) {}
     3ac:	4628      	mov	r0, r5
     3ae:	47a0      	blx	r4
     3b0:	2800      	cmp	r0, #0
     3b2:	d0fb      	beq.n	3ac <xprintf+0x90>
     3b4:	4637      	mov	r7, r6
     3b6:	e7e9      	b.n	38c <xprintf+0x70>
				break; 
						
				case 'd' : i = va_arg(arg,int);
     3b8:	9b00      	ldr	r3, [sp, #0]
     3ba:	1d1a      	adds	r2, r3, #4
     3bc:	9200      	str	r2, [sp, #0]
							while (!usart_async_is_tx_empty(&USART_1)) {}
							io_write((struct io_descriptor *const)io, (const uint8_t *const)'-', 1);
							while (!usart_async_is_tx_empty(&USART_1)) {}
						} 
						
						s = convert(i, 10);
     3be:	210a      	movs	r1, #10
     3c0:	6818      	ldr	r0, [r3, #0]
     3c2:	4b35      	ldr	r3, [pc, #212]	; (498 <xprintf+0x17c>)
     3c4:	4798      	blx	r3
     3c6:	4606      	mov	r6, r0
						
						while (!usart_async_is_tx_empty(&USART_1)) {}
     3c8:	4628      	mov	r0, r5
     3ca:	47a0      	blx	r4
     3cc:	2800      	cmp	r0, #0
     3ce:	d0fb      	beq.n	3c8 <xprintf+0xac>
						io_write((struct io_descriptor *const)io, (const uint8_t *const)s, strlen(s));
     3d0:	4630      	mov	r0, r6
     3d2:	4b32      	ldr	r3, [pc, #200]	; (49c <xprintf+0x180>)
     3d4:	4798      	blx	r3
     3d6:	b282      	uxth	r2, r0
     3d8:	4631      	mov	r1, r6
     3da:	f8d8 0000 	ldr.w	r0, [r8]
     3de:	4b2d      	ldr	r3, [pc, #180]	; (494 <xprintf+0x178>)
     3e0:	4798      	blx	r3
						while (!usart_async_is_tx_empty(&USART_1)) {}
     3e2:	4628      	mov	r0, r5
     3e4:	47a0      	blx	r4
     3e6:	2800      	cmp	r0, #0
     3e8:	d0fb      	beq.n	3e2 <xprintf+0xc6>
     3ea:	e7cf      	b.n	38c <xprintf+0x70>
				break; 
						
				case 'o': i = va_arg(arg,unsigned int);
     3ec:	9b00      	ldr	r3, [sp, #0]
     3ee:	1d1a      	adds	r2, r3, #4
     3f0:	9200      	str	r2, [sp, #0]
						s = convert(i, 8);
     3f2:	2108      	movs	r1, #8
     3f4:	6818      	ldr	r0, [r3, #0]
     3f6:	4b28      	ldr	r3, [pc, #160]	; (498 <xprintf+0x17c>)
     3f8:	4798      	blx	r3
     3fa:	4606      	mov	r6, r0
						
						while (!usart_async_is_tx_empty(&USART_1)) {}
     3fc:	4628      	mov	r0, r5
     3fe:	47a0      	blx	r4
     400:	2800      	cmp	r0, #0
     402:	d0fb      	beq.n	3fc <xprintf+0xe0>
						io_write((struct io_descriptor *const)io, (const uint8_t *const)s, strlen(s));
     404:	4630      	mov	r0, r6
     406:	4b25      	ldr	r3, [pc, #148]	; (49c <xprintf+0x180>)
     408:	4798      	blx	r3
     40a:	b282      	uxth	r2, r0
     40c:	4631      	mov	r1, r6
     40e:	f8d8 0000 	ldr.w	r0, [r8]
     412:	4b20      	ldr	r3, [pc, #128]	; (494 <xprintf+0x178>)
     414:	4798      	blx	r3
						while (!usart_async_is_tx_empty(&USART_1)) {}
     416:	4628      	mov	r0, r5
     418:	47a0      	blx	r4
     41a:	2800      	cmp	r0, #0
     41c:	d0fb      	beq.n	416 <xprintf+0xfa>
     41e:	e7b5      	b.n	38c <xprintf+0x70>
				break; 
						
				case 's': s = va_arg(arg,char *);
     420:	9b00      	ldr	r3, [sp, #0]
     422:	1d1a      	adds	r2, r3, #4
     424:	9200      	str	r2, [sp, #0]
     426:	681e      	ldr	r6, [r3, #0]
						while (!usart_async_is_tx_empty(&USART_1)) {}
     428:	4628      	mov	r0, r5
     42a:	47a0      	blx	r4
     42c:	2800      	cmp	r0, #0
     42e:	d0fb      	beq.n	428 <xprintf+0x10c>
						io_write((struct io_descriptor *const)io, (const uint8_t *const)s, strlen(s));
     430:	4630      	mov	r0, r6
     432:	4b1a      	ldr	r3, [pc, #104]	; (49c <xprintf+0x180>)
     434:	4798      	blx	r3
     436:	b282      	uxth	r2, r0
     438:	4631      	mov	r1, r6
     43a:	f8d8 0000 	ldr.w	r0, [r8]
     43e:	4b15      	ldr	r3, [pc, #84]	; (494 <xprintf+0x178>)
     440:	4798      	blx	r3
						while (!usart_async_is_tx_empty(&USART_1)) {}
     442:	4628      	mov	r0, r5
     444:	47a0      	blx	r4
     446:	2800      	cmp	r0, #0
     448:	d0fb      	beq.n	442 <xprintf+0x126>
     44a:	e79f      	b.n	38c <xprintf+0x70>
				break; 
						
				case 'x': i = va_arg(arg,unsigned int);
     44c:	9b00      	ldr	r3, [sp, #0]
     44e:	1d1a      	adds	r2, r3, #4
     450:	9200      	str	r2, [sp, #0]
						s = convert(i, 16);
     452:	2110      	movs	r1, #16
     454:	6818      	ldr	r0, [r3, #0]
     456:	4b10      	ldr	r3, [pc, #64]	; (498 <xprintf+0x17c>)
     458:	4798      	blx	r3
     45a:	4606      	mov	r6, r0
						
						while (!usart_async_is_tx_empty(&USART_1)) {}
     45c:	4628      	mov	r0, r5
     45e:	47a0      	blx	r4
     460:	2800      	cmp	r0, #0
     462:	d0fb      	beq.n	45c <xprintf+0x140>
						io_write((struct io_descriptor *const)io, (const uint8_t *const)s, strlen(s));
     464:	4630      	mov	r0, r6
     466:	4b0d      	ldr	r3, [pc, #52]	; (49c <xprintf+0x180>)
     468:	4798      	blx	r3
     46a:	b282      	uxth	r2, r0
     46c:	4631      	mov	r1, r6
     46e:	f8d8 0000 	ldr.w	r0, [r8]
     472:	4b08      	ldr	r3, [pc, #32]	; (494 <xprintf+0x178>)
     474:	4798      	blx	r3
						while (!usart_async_is_tx_empty(&USART_1)) {}
     476:	4628      	mov	r0, r5
     478:	47a0      	blx	r4
     47a:	2800      	cmp	r0, #0
     47c:	d0fb      	beq.n	476 <xprintf+0x15a>
     47e:	e785      	b.n	38c <xprintf+0x70>
			}	
		}
	} 
	
	va_end(arg); 
} 
     480:	b002      	add	sp, #8
     482:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
     486:	b004      	add	sp, #16
     488:	4770      	bx	lr
     48a:	bf00      	nop
     48c:	200074dc 	.word	0x200074dc
     490:	00002165 	.word	0x00002165
     494:	000018ad 	.word	0x000018ad
     498:	000002ed 	.word	0x000002ed
     49c:	0000dd51 	.word	0x0000dd51
     4a0:	20007f20 	.word	0x20007f20

000004a4 <read_boardvalues>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: read and access all main board hardware such as I2C and GPIO to collate a live snapshot of plugged-in cards and sensors
// Returns:     Nothing
// *****************************************************************************************************************************************************************
void read_boardvalues(void)
{
     4a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     4a8:	b086      	sub	sp, #24
	int		err;
	
	if (read_hardware_index == 0) {
     4aa:	4ba3      	ldr	r3, [pc, #652]	; (738 <read_boardvalues+0x294>)
     4ac:	781b      	ldrb	r3, [r3, #0]
     4ae:	2b00      	cmp	r3, #0
     4b0:	f000 80ce 	beq.w	650 <read_boardvalues+0x1ac>
	
			readdata_water1 = 0;
		}
		
		read_hardware_index = 1;
	} else if (read_hardware_index == 1) {
     4b4:	2b01      	cmp	r3, #1
     4b6:	f000 80e9 	beq.w	68c <read_boardvalues+0x1e8>
			
			readdata_water2 = 0;
		}
		
		read_hardware_index = 2;
	} else if (read_hardware_index == 2) {
     4ba:	2b02      	cmp	r3, #2
     4bc:	f000 8104 	beq.w	6c8 <read_boardvalues+0x224>
		}
		
		read_hardware_index = 3;
	} else {
		/* Read the I2C for the dual temp & moisture IC. If bad result(s) write error debug and set variables to 0xFF */
		if ((err = I2C_getTEMPandMOISTURE(PB24_CARDB_I2C_SDA,  PB25_CARDB_I2C_CLK, &readdata_tempmoisture[0], &readdata_tempmoisture[1], &readdata_tempmoisture[2], &readdata_tempmoisture[3]) < 0)) {
     4c0:	4b9e      	ldr	r3, [pc, #632]	; (73c <read_boardvalues+0x298>)
     4c2:	1e5a      	subs	r2, r3, #1
     4c4:	1cd1      	adds	r1, r2, #3
     4c6:	9101      	str	r1, [sp, #4]
     4c8:	1c91      	adds	r1, r2, #2
     4ca:	9100      	str	r1, [sp, #0]
     4cc:	2139      	movs	r1, #57	; 0x39
     4ce:	2038      	movs	r0, #56	; 0x38
     4d0:	4c9b      	ldr	r4, [pc, #620]	; (740 <read_boardvalues+0x29c>)
     4d2:	47a0      	blx	r4
     4d4:	2800      	cmp	r0, #0
     4d6:	f2c0 8115 	blt.w	704 <read_boardvalues+0x260>
			xprintf("Could NOT read from the moisture & temp sensor on CARDB:I2C [%i]\r\n", err);
		
			memset(&readdata_tempmoisture, 0xFF, 4);
		}
		
		read_hardware_index = 0;
     4da:	2200      	movs	r2, #0
     4dc:	4b96      	ldr	r3, [pc, #600]	; (738 <read_boardvalues+0x294>)
     4de:	701a      	strb	r2, [r3, #0]
	}

 xprintf("0 = %x\r\n", readdata_tempmoisture[0]);
     4e0:	4d98      	ldr	r5, [pc, #608]	; (744 <read_boardvalues+0x2a0>)
     4e2:	7829      	ldrb	r1, [r5, #0]
     4e4:	4898      	ldr	r0, [pc, #608]	; (748 <read_boardvalues+0x2a4>)
     4e6:	4c99      	ldr	r4, [pc, #612]	; (74c <read_boardvalues+0x2a8>)
     4e8:	47a0      	blx	r4
 xprintf("1 = %x\r\n", readdata_tempmoisture[1]);
     4ea:	7869      	ldrb	r1, [r5, #1]
     4ec:	4898      	ldr	r0, [pc, #608]	; (750 <read_boardvalues+0x2ac>)
     4ee:	47a0      	blx	r4
 xprintf("2 = %x\r\n", readdata_tempmoisture[2]);
     4f0:	78a9      	ldrb	r1, [r5, #2]
     4f2:	4898      	ldr	r0, [pc, #608]	; (754 <read_boardvalues+0x2b0>)
     4f4:	47a0      	blx	r4
 xprintf("3 = %x\r\n", readdata_tempmoisture[3]);
     4f6:	78e9      	ldrb	r1, [r5, #3]
     4f8:	4897      	ldr	r0, [pc, #604]	; (758 <read_boardvalues+0x2b4>)
     4fa:	47a0      	blx	r4
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
     4fc:	a805      	add	r0, sp, #20
     4fe:	f8df 82f8 	ldr.w	r8, [pc, #760]	; 7f8 <read_boardvalues+0x354>
     502:	47c0      	blx	r8
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
     504:	4f95      	ldr	r7, [pc, #596]	; (75c <read_boardvalues+0x2b8>)
     506:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Port *)hw)->Group[submodule_index].IN.reg;
     50a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
     50e:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
     512:	405c      	eors	r4, r3
     514:	4014      	ands	r4, r2
     516:	405c      	eors	r4, r3

	CRITICAL_SECTION_LEAVE();
     518:	a805      	add	r0, sp, #20
     51a:	4e91      	ldr	r6, [pc, #580]	; (760 <read_boardvalues+0x2bc>)
     51c:	47b0      	blx	r6

	/* Read the main simple GPIO inputs for determining the status of tamper, daughter cards */ 
	tamper = (gpio_get_pin_level(PB02_TAMP_OP)) ? 1 : 0;
     51e:	4d91      	ldr	r5, [pc, #580]	; (764 <read_boardvalues+0x2c0>)
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
     520:	f3c4 0480 	ubfx	r4, r4, #2, #1
     524:	702c      	strb	r4, [r5, #0]
	CRITICAL_SECTION_ENTER();
     526:	a804      	add	r0, sp, #16
     528:	47c0      	blx	r8
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
     52a:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
	return ((Port *)hw)->Group[submodule_index].IN.reg;
     52e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
     532:	f8d7 4110 	ldr.w	r4, [r7, #272]	; 0x110
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
     536:	405c      	eors	r4, r3
     538:	4014      	ands	r4, r2
     53a:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
     53c:	a804      	add	r0, sp, #16
     53e:	47b0      	blx	r6
	cardA_present = (gpio_get_pin_level(PC00_CARDA_PRESENT)) ? 0 : 1;
     540:	f084 0401 	eor.w	r4, r4, #1
     544:	f004 0401 	and.w	r4, r4, #1
     548:	4b87      	ldr	r3, [pc, #540]	; (768 <read_boardvalues+0x2c4>)
     54a:	701c      	strb	r4, [r3, #0]
	CRITICAL_SECTION_ENTER();
     54c:	a803      	add	r0, sp, #12
     54e:	47c0      	blx	r8
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
     550:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
	return ((Port *)hw)->Group[submodule_index].IN.reg;
     554:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
     558:	f8d7 4110 	ldr.w	r4, [r7, #272]	; 0x110
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
     55c:	405c      	eors	r4, r3
     55e:	4014      	ands	r4, r2
     560:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
     562:	a803      	add	r0, sp, #12
     564:	47b0      	blx	r6
	cardB_present = (gpio_get_pin_level(PC01_CARDB_PRESENT)) ? 0 : 1;
     566:	f084 0402 	eor.w	r4, r4, #2
     56a:	f3c4 0440 	ubfx	r4, r4, #1, #1
     56e:	4b7f      	ldr	r3, [pc, #508]	; (76c <read_boardvalues+0x2c8>)
     570:	701c      	strb	r4, [r3, #0]

	/* If tamper switch is closed and the enclosure lid is correct, then the LEDs do not illuminate. Else show the ETH and PWR LEDs according to the system state */
	if (tamper) {
     572:	782b      	ldrb	r3, [r5, #0]
     574:	2b00      	cmp	r3, #0
     576:	f000 80d7 	beq.w	728 <read_boardvalues+0x284>
		if (ring_broken == RING_BROKEN) {
     57a:	4b7d      	ldr	r3, [pc, #500]	; (770 <read_boardvalues+0x2cc>)
     57c:	781b      	ldrb	r3, [r3, #0]
     57e:	2b01      	cmp	r3, #1
     580:	f000 80c9 	beq.w	716 <read_boardvalues+0x272>
			gpio_toggle_pin_level(PB03_LED_ETH);
			} else {
			gpio_set_pin_level(PB03_LED_ETH, (good_ethernet) ? 1 : 0);
     584:	4b7b      	ldr	r3, [pc, #492]	; (774 <read_boardvalues+0x2d0>)
	if (level) {
     586:	781b      	ldrb	r3, [r3, #0]
     588:	2b00      	cmp	r3, #0
     58a:	f000 80c8 	beq.w	71e <read_boardvalues+0x27a>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     58e:	2208      	movs	r2, #8
     590:	4b72      	ldr	r3, [pc, #456]	; (75c <read_boardvalues+0x2b8>)
     592:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
     596:	2210      	movs	r2, #16
     598:	4b70      	ldr	r3, [pc, #448]	; (75c <read_boardvalues+0x2b8>)
     59a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		gpio_set_pin_level(PB03_LED_ETH, 0);
		gpio_set_pin_level(PB04_LED_PWR, 0);
	}

	/* Read the status of the two LEFT and RIGHT main Ethernet ports, along with the T-junction Power & Ethernet adapter channel */
	link_port1 = (readKSZreg(SPI_KSZ8794_PORT1STATUS2) & 0x20) ? 1 : 0;
     59e:	201e      	movs	r0, #30
     5a0:	4c75      	ldr	r4, [pc, #468]	; (778 <read_boardvalues+0x2d4>)
     5a2:	47a0      	blx	r4
     5a4:	f3c0 1040 	ubfx	r0, r0, #5, #1
     5a8:	4b74      	ldr	r3, [pc, #464]	; (77c <read_boardvalues+0x2d8>)
     5aa:	7018      	strb	r0, [r3, #0]
	link_port2 = (readKSZreg(SPI_KSZ8794_PORT2STATUS2) & 0x20) ? 1 : 0;
     5ac:	202e      	movs	r0, #46	; 0x2e
     5ae:	47a0      	blx	r4
     5b0:	f3c0 1040 	ubfx	r0, r0, #5, #1
     5b4:	4b72      	ldr	r3, [pc, #456]	; (780 <read_boardvalues+0x2dc>)
     5b6:	7018      	strb	r0, [r3, #0]
	link_port3 = (readKSZreg(SPI_KSZ8794_PORT3STATUS2) & 0x20) ? 1 : 0;
     5b8:	203e      	movs	r0, #62	; 0x3e
     5ba:	47a0      	blx	r4
     5bc:	f3c0 1040 	ubfx	r0, r0, #5, #1
     5c0:	4b70      	ldr	r3, [pc, #448]	; (784 <read_boardvalues+0x2e0>)
     5c2:	7018      	strb	r0, [r3, #0]

	/* Detect change of status for debug */
	if (tamper != old_tamper) {
     5c4:	4b67      	ldr	r3, [pc, #412]	; (764 <read_boardvalues+0x2c0>)
     5c6:	781b      	ldrb	r3, [r3, #0]
     5c8:	4a6f      	ldr	r2, [pc, #444]	; (788 <read_boardvalues+0x2e4>)
     5ca:	7812      	ldrb	r2, [r2, #0]
     5cc:	429a      	cmp	r2, r3
     5ce:	d007      	beq.n	5e0 <read_boardvalues+0x13c>
		xprintf("Lid TAMPER [%s]\r\n", (!tamper) ? "GOOD" : "ACTIVE");
     5d0:	4a6e      	ldr	r2, [pc, #440]	; (78c <read_boardvalues+0x2e8>)
     5d2:	496f      	ldr	r1, [pc, #444]	; (790 <read_boardvalues+0x2ec>)
     5d4:	2b00      	cmp	r3, #0
     5d6:	bf18      	it	ne
     5d8:	4611      	movne	r1, r2
     5da:	486e      	ldr	r0, [pc, #440]	; (794 <read_boardvalues+0x2f0>)
     5dc:	4b5b      	ldr	r3, [pc, #364]	; (74c <read_boardvalues+0x2a8>)
     5de:	4798      	blx	r3
	}

	/* Detect change of status for debug */
	if (link_port1 != old_link_port1) {
     5e0:	4b66      	ldr	r3, [pc, #408]	; (77c <read_boardvalues+0x2d8>)
     5e2:	781b      	ldrb	r3, [r3, #0]
     5e4:	4a6c      	ldr	r2, [pc, #432]	; (798 <read_boardvalues+0x2f4>)
     5e6:	7812      	ldrb	r2, [r2, #0]
     5e8:	429a      	cmp	r2, r3
     5ea:	d007      	beq.n	5fc <read_boardvalues+0x158>
		xprintf("Left Ethernet [%s]\r\n", (link_port1) ? "GOOD" : "LINKDOWN");
     5ec:	4a6b      	ldr	r2, [pc, #428]	; (79c <read_boardvalues+0x2f8>)
     5ee:	4968      	ldr	r1, [pc, #416]	; (790 <read_boardvalues+0x2ec>)
     5f0:	2b00      	cmp	r3, #0
     5f2:	bf08      	it	eq
     5f4:	4611      	moveq	r1, r2
     5f6:	486a      	ldr	r0, [pc, #424]	; (7a0 <read_boardvalues+0x2fc>)
     5f8:	4b54      	ldr	r3, [pc, #336]	; (74c <read_boardvalues+0x2a8>)
     5fa:	4798      	blx	r3
	}

	/* Detect change of status for debug */
	if (link_port2 != old_link_port2) {
     5fc:	4b60      	ldr	r3, [pc, #384]	; (780 <read_boardvalues+0x2dc>)
     5fe:	781b      	ldrb	r3, [r3, #0]
     600:	4a68      	ldr	r2, [pc, #416]	; (7a4 <read_boardvalues+0x300>)
     602:	7812      	ldrb	r2, [r2, #0]
     604:	429a      	cmp	r2, r3
     606:	d007      	beq.n	618 <read_boardvalues+0x174>
		xprintf("Right Ethernet [%s]\r\n", (link_port2) ? "GOOD" : "LINKDOWN");
     608:	4a64      	ldr	r2, [pc, #400]	; (79c <read_boardvalues+0x2f8>)
     60a:	4961      	ldr	r1, [pc, #388]	; (790 <read_boardvalues+0x2ec>)
     60c:	2b00      	cmp	r3, #0
     60e:	bf08      	it	eq
     610:	4611      	moveq	r1, r2
     612:	4865      	ldr	r0, [pc, #404]	; (7a8 <read_boardvalues+0x304>)
     614:	4b4d      	ldr	r3, [pc, #308]	; (74c <read_boardvalues+0x2a8>)
     616:	4798      	blx	r3
	}

	/* Detect change of status for debug */
	if (link_port3 != old_link_port3) {
     618:	4b5a      	ldr	r3, [pc, #360]	; (784 <read_boardvalues+0x2e0>)
     61a:	781b      	ldrb	r3, [r3, #0]
     61c:	4a63      	ldr	r2, [pc, #396]	; (7ac <read_boardvalues+0x308>)
     61e:	7812      	ldrb	r2, [r2, #0]
     620:	429a      	cmp	r2, r3
     622:	d007      	beq.n	634 <read_boardvalues+0x190>
		xprintf("Power & Ethernet <Comms Link> [%s]\r\n", (link_port3) ? "GOOD" : "DOWN");
     624:	4a62      	ldr	r2, [pc, #392]	; (7b0 <read_boardvalues+0x30c>)
     626:	495a      	ldr	r1, [pc, #360]	; (790 <read_boardvalues+0x2ec>)
     628:	2b00      	cmp	r3, #0
     62a:	bf08      	it	eq
     62c:	4611      	moveq	r1, r2
     62e:	4861      	ldr	r0, [pc, #388]	; (7b4 <read_boardvalues+0x310>)
     630:	4b46      	ldr	r3, [pc, #280]	; (74c <read_boardvalues+0x2a8>)
     632:	4798      	blx	r3
	}

	/* Detect change of status of Slot [A] daughter-card */
	if ((!cardA_old) && (cardA_present)) {
     634:	4b60      	ldr	r3, [pc, #384]	; (7b8 <read_boardvalues+0x314>)
     636:	781b      	ldrb	r3, [r3, #0]
     638:	2b00      	cmp	r3, #0
     63a:	f040 81f7 	bne.w	a2c <read_boardvalues+0x588>
     63e:	4b4a      	ldr	r3, [pc, #296]	; (768 <read_boardvalues+0x2c4>)
     640:	781b      	ldrb	r3, [r3, #0]
     642:	2b00      	cmp	r3, #0
     644:	f040 80da 	bne.w	7fc <read_boardvalues+0x358>
				
			xprintf("CARDA is a Power & Ethernet Daughter-Card\r\n");
			break;
		}
	} else if (!cardA_present) {
		cardA_type = CARD_NOTFITTED;
     648:	2200      	movs	r2, #0
     64a:	4b5c      	ldr	r3, [pc, #368]	; (7bc <read_boardvalues+0x318>)
     64c:	701a      	strb	r2, [r3, #0]
     64e:	e1f1      	b.n	a34 <read_boardvalues+0x590>
}

static inline void hri_adc_write_INPUTCTRL_reg(const void *const hw, hri_adc_inputctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->INPUTCTRL.reg = data;
     650:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
     654:	4b5a      	ldr	r3, [pc, #360]	; (7c0 <read_boardvalues+0x31c>)
     656:	809a      	strh	r2, [r3, #4]
		delay_ms(2);
     658:	2002      	movs	r0, #2
     65a:	4b5a      	ldr	r3, [pc, #360]	; (7c4 <read_boardvalues+0x320>)
     65c:	4798      	blx	r3
		err = adc_sync_read_channel(&ADC_0, 0, (uint8_t *const)&readdata_water1, 1);
     65e:	2301      	movs	r3, #1
     660:	4a59      	ldr	r2, [pc, #356]	; (7c8 <read_boardvalues+0x324>)
     662:	2100      	movs	r1, #0
     664:	4859      	ldr	r0, [pc, #356]	; (7cc <read_boardvalues+0x328>)
     666:	4c5a      	ldr	r4, [pc, #360]	; (7d0 <read_boardvalues+0x32c>)
     668:	47a0      	blx	r4
     66a:	4604      	mov	r4, r0
		xprintf("err water 1 = %d\r\n", err);
     66c:	4601      	mov	r1, r0
     66e:	4859      	ldr	r0, [pc, #356]	; (7d4 <read_boardvalues+0x330>)
     670:	4b36      	ldr	r3, [pc, #216]	; (74c <read_boardvalues+0x2a8>)
     672:	4798      	blx	r3
		if (err != 1) {
     674:	2c01      	cmp	r4, #1
     676:	d005      	beq.n	684 <read_boardvalues+0x1e0>
			xprintf("Could NOT read from the water detector 1\r\n");
     678:	4857      	ldr	r0, [pc, #348]	; (7d8 <read_boardvalues+0x334>)
     67a:	4b34      	ldr	r3, [pc, #208]	; (74c <read_boardvalues+0x2a8>)
     67c:	4798      	blx	r3
			readdata_water1 = 0;
     67e:	2200      	movs	r2, #0
     680:	4b51      	ldr	r3, [pc, #324]	; (7c8 <read_boardvalues+0x324>)
     682:	701a      	strb	r2, [r3, #0]
		read_hardware_index = 1;
     684:	2201      	movs	r2, #1
     686:	4b2c      	ldr	r3, [pc, #176]	; (738 <read_boardvalues+0x294>)
     688:	701a      	strb	r2, [r3, #0]
     68a:	e729      	b.n	4e0 <read_boardvalues+0x3c>
     68c:	f641 0202 	movw	r2, #6146	; 0x1802
     690:	4b4b      	ldr	r3, [pc, #300]	; (7c0 <read_boardvalues+0x31c>)
     692:	809a      	strh	r2, [r3, #4]
		delay_ms(2);
     694:	2002      	movs	r0, #2
     696:	4b4b      	ldr	r3, [pc, #300]	; (7c4 <read_boardvalues+0x320>)
     698:	4798      	blx	r3
		err = adc_sync_read_channel(&ADC_0, 0, (uint8_t *const)&readdata_water2, 1);
     69a:	2301      	movs	r3, #1
     69c:	4a4f      	ldr	r2, [pc, #316]	; (7dc <read_boardvalues+0x338>)
     69e:	2100      	movs	r1, #0
     6a0:	484a      	ldr	r0, [pc, #296]	; (7cc <read_boardvalues+0x328>)
     6a2:	4c4b      	ldr	r4, [pc, #300]	; (7d0 <read_boardvalues+0x32c>)
     6a4:	47a0      	blx	r4
     6a6:	4604      	mov	r4, r0
		xprintf("err water 2 = %d\r\n", err);
     6a8:	4601      	mov	r1, r0
     6aa:	484d      	ldr	r0, [pc, #308]	; (7e0 <read_boardvalues+0x33c>)
     6ac:	4b27      	ldr	r3, [pc, #156]	; (74c <read_boardvalues+0x2a8>)
     6ae:	4798      	blx	r3
		if (err != 1) {
     6b0:	2c01      	cmp	r4, #1
     6b2:	d005      	beq.n	6c0 <read_boardvalues+0x21c>
			xprintf("Could NOT read from the water detector 2\r\n");
     6b4:	484b      	ldr	r0, [pc, #300]	; (7e4 <read_boardvalues+0x340>)
     6b6:	4b25      	ldr	r3, [pc, #148]	; (74c <read_boardvalues+0x2a8>)
     6b8:	4798      	blx	r3
			readdata_water2 = 0;
     6ba:	2200      	movs	r2, #0
     6bc:	4b47      	ldr	r3, [pc, #284]	; (7dc <read_boardvalues+0x338>)
     6be:	701a      	strb	r2, [r3, #0]
		read_hardware_index = 2;
     6c0:	2202      	movs	r2, #2
     6c2:	4b1d      	ldr	r3, [pc, #116]	; (738 <read_boardvalues+0x294>)
     6c4:	701a      	strb	r2, [r3, #0]
     6c6:	e70b      	b.n	4e0 <read_boardvalues+0x3c>
     6c8:	f641 0201 	movw	r2, #6145	; 0x1801
     6cc:	4b3c      	ldr	r3, [pc, #240]	; (7c0 <read_boardvalues+0x31c>)
     6ce:	809a      	strh	r2, [r3, #4]
		delay_ms(2);
     6d0:	2002      	movs	r0, #2
     6d2:	4b3c      	ldr	r3, [pc, #240]	; (7c4 <read_boardvalues+0x320>)
     6d4:	4798      	blx	r3
		err = adc_sync_read_channel(&ADC_0, 0, (uint8_t *const)&highvoltage, 1);
     6d6:	2301      	movs	r3, #1
     6d8:	4a43      	ldr	r2, [pc, #268]	; (7e8 <read_boardvalues+0x344>)
     6da:	2100      	movs	r1, #0
     6dc:	483b      	ldr	r0, [pc, #236]	; (7cc <read_boardvalues+0x328>)
     6de:	4c3c      	ldr	r4, [pc, #240]	; (7d0 <read_boardvalues+0x32c>)
     6e0:	47a0      	blx	r4
     6e2:	4604      	mov	r4, r0
		xprintf("err HV = %d\r\n", err);
     6e4:	4601      	mov	r1, r0
     6e6:	4841      	ldr	r0, [pc, #260]	; (7ec <read_boardvalues+0x348>)
     6e8:	4b18      	ldr	r3, [pc, #96]	; (74c <read_boardvalues+0x2a8>)
     6ea:	4798      	blx	r3
		if (err != 1) {
     6ec:	2c01      	cmp	r4, #1
     6ee:	d005      	beq.n	6fc <read_boardvalues+0x258>
			xprintf("Could NOT read from the HV divider\r\n");
     6f0:	483f      	ldr	r0, [pc, #252]	; (7f0 <read_boardvalues+0x34c>)
     6f2:	4b16      	ldr	r3, [pc, #88]	; (74c <read_boardvalues+0x2a8>)
     6f4:	4798      	blx	r3
			highvoltage = 0;
     6f6:	2200      	movs	r2, #0
     6f8:	4b3b      	ldr	r3, [pc, #236]	; (7e8 <read_boardvalues+0x344>)
     6fa:	701a      	strb	r2, [r3, #0]
		read_hardware_index = 3;
     6fc:	2203      	movs	r2, #3
     6fe:	4b0e      	ldr	r3, [pc, #56]	; (738 <read_boardvalues+0x294>)
     700:	701a      	strb	r2, [r3, #0]
     702:	e6ed      	b.n	4e0 <read_boardvalues+0x3c>
			xprintf("Could NOT read from the moisture & temp sensor on CARDB:I2C [%i]\r\n", err);
     704:	2101      	movs	r1, #1
     706:	483b      	ldr	r0, [pc, #236]	; (7f4 <read_boardvalues+0x350>)
     708:	4b10      	ldr	r3, [pc, #64]	; (74c <read_boardvalues+0x2a8>)
     70a:	4798      	blx	r3
			memset(&readdata_tempmoisture, 0xFF, 4);
     70c:	f04f 32ff 	mov.w	r2, #4294967295
     710:	4b0c      	ldr	r3, [pc, #48]	; (744 <read_boardvalues+0x2a0>)
     712:	601a      	str	r2, [r3, #0]
     714:	e6e1      	b.n	4da <read_boardvalues+0x36>
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
     716:	2208      	movs	r2, #8
     718:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
     71c:	e73b      	b.n	596 <read_boardvalues+0xf2>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     71e:	2208      	movs	r2, #8
     720:	4b0e      	ldr	r3, [pc, #56]	; (75c <read_boardvalues+0x2b8>)
     722:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
     726:	e736      	b.n	596 <read_boardvalues+0xf2>
     728:	4b0c      	ldr	r3, [pc, #48]	; (75c <read_boardvalues+0x2b8>)
     72a:	2208      	movs	r2, #8
     72c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
     730:	2210      	movs	r2, #16
     732:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
     736:	e732      	b.n	59e <read_boardvalues+0xfa>
     738:	2000757e 	.word	0x2000757e
     73c:	20007fb9 	.word	0x20007fb9
     740:	00006f61 	.word	0x00006f61
     744:	20007fb8 	.word	0x20007fb8
     748:	0000eac4 	.word	0x0000eac4
     74c:	0000031d 	.word	0x0000031d
     750:	0000ead0 	.word	0x0000ead0
     754:	0000eadc 	.word	0x0000eadc
     758:	0000eae8 	.word	0x0000eae8
     75c:	41008000 	.word	0x41008000
     760:	00001557 	.word	0x00001557
     764:	20007fb3 	.word	0x20007fb3
     768:	2000857c 	.word	0x2000857c
     76c:	2000757f 	.word	0x2000757f
     770:	2000826d 	.word	0x2000826d
     774:	2000757d 	.word	0x2000757d
     778:	0000db7d 	.word	0x0000db7d
     77c:	20007575 	.word	0x20007575
     780:	20008294 	.word	0x20008294
     784:	20007579 	.word	0x20007579
     788:	2000854c 	.word	0x2000854c
     78c:	0000e9b4 	.word	0x0000e9b4
     790:	0000e9ac 	.word	0x0000e9ac
     794:	0000eaf4 	.word	0x0000eaf4
     798:	20007589 	.word	0x20007589
     79c:	0000e9bc 	.word	0x0000e9bc
     7a0:	0000eb08 	.word	0x0000eb08
     7a4:	20007574 	.word	0x20007574
     7a8:	0000eb20 	.word	0x0000eb20
     7ac:	20008278 	.word	0x20008278
     7b0:	0000e9c0 	.word	0x0000e9c0
     7b4:	0000eb38 	.word	0x0000eb38
     7b8:	20007577 	.word	0x20007577
     7bc:	20007c6e 	.word	0x20007c6e
     7c0:	43001c00 	.word	0x43001c00
     7c4:	000015c9 	.word	0x000015c9
     7c8:	20008562 	.word	0x20008562
     7cc:	20007470 	.word	0x20007470
     7d0:	0000141d 	.word	0x0000141d
     7d4:	0000e9c8 	.word	0x0000e9c8
     7d8:	0000e9dc 	.word	0x0000e9dc
     7dc:	2000854d 	.word	0x2000854d
     7e0:	0000ea08 	.word	0x0000ea08
     7e4:	0000ea1c 	.word	0x0000ea1c
     7e8:	20008557 	.word	0x20008557
     7ec:	0000ea48 	.word	0x0000ea48
     7f0:	0000ea58 	.word	0x0000ea58
     7f4:	0000ea80 	.word	0x0000ea80
     7f8:	00001549 	.word	0x00001549
		if (!(err = I2C_check_deviceID(PC27_CARDA_I2C_SDA, PC28_CARDA_I2C_CLK, 0x60))) {
     7fc:	2260      	movs	r2, #96	; 0x60
     7fe:	215c      	movs	r1, #92	; 0x5c
     800:	205b      	movs	r0, #91	; 0x5b
     802:	4b96      	ldr	r3, [pc, #600]	; (a5c <read_boardvalues+0x5b8>)
     804:	4798      	blx	r3
     806:	b978      	cbnz	r0, 828 <read_boardvalues+0x384>
			cardA_type = CARD_VIBRATEK;
     808:	2201      	movs	r2, #1
     80a:	4b95      	ldr	r3, [pc, #596]	; (a60 <read_boardvalues+0x5bc>)
     80c:	701a      	strb	r2, [r3, #0]
			if ((err = I2C_setGAIN(PC27_CARDA_I2C_SDA,  PC28_CARDA_I2C_CLK, ((CONFIG *)&settings_buffer)->gain_cardA) < 0)) {
     80e:	4b95      	ldr	r3, [pc, #596]	; (a64 <read_boardvalues+0x5c0>)
     810:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
     814:	215c      	movs	r1, #92	; 0x5c
     816:	205b      	movs	r0, #91	; 0x5b
     818:	4b93      	ldr	r3, [pc, #588]	; (a68 <read_boardvalues+0x5c4>)
     81a:	4798      	blx	r3
     81c:	2800      	cmp	r0, #0
     81e:	db65      	blt.n	8ec <read_boardvalues+0x448>
			xprintf("CARDA is a VIBRATEK\r\n");
     820:	4892      	ldr	r0, [pc, #584]	; (a6c <read_boardvalues+0x5c8>)
     822:	4b93      	ldr	r3, [pc, #588]	; (a70 <read_boardvalues+0x5cc>)
     824:	4798      	blx	r3
			break;
     826:	e105      	b.n	a34 <read_boardvalues+0x590>
		} else if (!(err = I2C_check_deviceID(PC27_CARDA_I2C_SDA, PC28_CARDA_I2C_CLK, 0x50))) {
     828:	2250      	movs	r2, #80	; 0x50
     82a:	215c      	movs	r1, #92	; 0x5c
     82c:	205b      	movs	r0, #91	; 0x5b
     82e:	4b8b      	ldr	r3, [pc, #556]	; (a5c <read_boardvalues+0x5b8>)
     830:	4798      	blx	r3
     832:	b998      	cbnz	r0, 85c <read_boardvalues+0x3b8>
			cardA_type = CARD_PE;
     834:	2205      	movs	r2, #5
     836:	4b8a      	ldr	r3, [pc, #552]	; (a60 <read_boardvalues+0x5bc>)
     838:	701a      	strb	r2, [r3, #0]
			writeKSZreg(SPI_KSZ8794_PORT3CONTROL2, 0x06);
     83a:	2106      	movs	r1, #6
     83c:	2032      	movs	r0, #50	; 0x32
     83e:	4b8d      	ldr	r3, [pc, #564]	; (a74 <read_boardvalues+0x5d0>)
     840:	4798      	blx	r3
			delay_us(50);
     842:	2032      	movs	r0, #50	; 0x32
     844:	4b8c      	ldr	r3, [pc, #560]	; (a78 <read_boardvalues+0x5d4>)
     846:	4798      	blx	r3
			if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL2, 0x06))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL2] not correct\r\n"); }
     848:	2106      	movs	r1, #6
     84a:	2032      	movs	r0, #50	; 0x32
     84c:	4b8b      	ldr	r3, [pc, #556]	; (a7c <read_boardvalues+0x5d8>)
     84e:	4798      	blx	r3
     850:	2800      	cmp	r0, #0
     852:	d050      	beq.n	8f6 <read_boardvalues+0x452>
			xprintf("CARDA is a Power & Ethernet Daughter-Card\r\n");
     854:	488a      	ldr	r0, [pc, #552]	; (a80 <read_boardvalues+0x5dc>)
     856:	4b86      	ldr	r3, [pc, #536]	; (a70 <read_boardvalues+0x5cc>)
     858:	4798      	blx	r3
			break;
     85a:	e0eb      	b.n	a34 <read_boardvalues+0x590>
		} else if ((!(err = I2C_check_deviceID(PC27_CARDA_I2C_SDA, PC28_CARDA_I2C_CLK, 0x41))) && (!(err = I2C_check_deviceID(PC27_CARDA_I2C_SDA, PC28_CARDA_I2C_CLK, 0x68)))) {
     85c:	2241      	movs	r2, #65	; 0x41
     85e:	215c      	movs	r1, #92	; 0x5c
     860:	205b      	movs	r0, #91	; 0x5b
     862:	4b7e      	ldr	r3, [pc, #504]	; (a5c <read_boardvalues+0x5b8>)
     864:	4798      	blx	r3
     866:	4601      	mov	r1, r0
     868:	b1d0      	cbz	r0, 8a0 <read_boardvalues+0x3fc>
			cardA_type = CARD_NOTFITTED;
     86a:	2200      	movs	r2, #0
     86c:	4b7c      	ldr	r3, [pc, #496]	; (a60 <read_boardvalues+0x5bc>)
     86e:	701a      	strb	r2, [r3, #0]
		if (err < 0) {
     870:	4291      	cmp	r1, r2
     872:	da2a      	bge.n	8ca <read_boardvalues+0x426>
			xprintf("Could not read I2C bus on CARDA for I2C_check_deviceID() [%i]\r\n", err);
     874:	4883      	ldr	r0, [pc, #524]	; (a84 <read_boardvalues+0x5e0>)
     876:	4b7e      	ldr	r3, [pc, #504]	; (a70 <read_boardvalues+0x5cc>)
     878:	4798      	blx	r3
		switch (cardA_type) {
     87a:	4b79      	ldr	r3, [pc, #484]	; (a60 <read_boardvalues+0x5bc>)
     87c:	781b      	ldrb	r3, [r3, #0]
     87e:	3b01      	subs	r3, #1
     880:	2b04      	cmp	r3, #4
     882:	d822      	bhi.n	8ca <read_boardvalues+0x426>
     884:	a201      	add	r2, pc, #4	; (adr r2, 88c <read_boardvalues+0x3e8>)
     886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     88a:	bf00      	nop
     88c:	0000080f 	.word	0x0000080f
     890:	000008b7 	.word	0x000008b7
     894:	000008d3 	.word	0x000008d3
     898:	000008e5 	.word	0x000008e5
     89c:	0000083b 	.word	0x0000083b
		} else if ((!(err = I2C_check_deviceID(PC27_CARDA_I2C_SDA, PC28_CARDA_I2C_CLK, 0x41))) && (!(err = I2C_check_deviceID(PC27_CARDA_I2C_SDA, PC28_CARDA_I2C_CLK, 0x68)))) {
     8a0:	2268      	movs	r2, #104	; 0x68
     8a2:	215c      	movs	r1, #92	; 0x5c
     8a4:	205b      	movs	r0, #91	; 0x5b
     8a6:	4b6d      	ldr	r3, [pc, #436]	; (a5c <read_boardvalues+0x5b8>)
     8a8:	4798      	blx	r3
     8aa:	4601      	mov	r1, r0
     8ac:	2800      	cmp	r0, #0
     8ae:	d1dc      	bne.n	86a <read_boardvalues+0x3c6>
			cardA_type = CARD_MINI_IO;
     8b0:	2202      	movs	r2, #2
     8b2:	4b6b      	ldr	r3, [pc, #428]	; (a60 <read_boardvalues+0x5bc>)
     8b4:	701a      	strb	r2, [r3, #0]
			if ((err = I2C_configEXPANDER(PC27_CARDA_I2C_SDA,  PC28_CARDA_I2C_CLK) < 0)) {
     8b6:	215c      	movs	r1, #92	; 0x5c
     8b8:	205b      	movs	r0, #91	; 0x5b
     8ba:	4b73      	ldr	r3, [pc, #460]	; (a88 <read_boardvalues+0x5e4>)
     8bc:	4798      	blx	r3
     8be:	2800      	cmp	r0, #0
     8c0:	db0b      	blt.n	8da <read_boardvalues+0x436>
			xprintf("CARDA is a MINI IO\r\n");
     8c2:	4872      	ldr	r0, [pc, #456]	; (a8c <read_boardvalues+0x5e8>)
     8c4:	4b6a      	ldr	r3, [pc, #424]	; (a70 <read_boardvalues+0x5cc>)
     8c6:	4798      	blx	r3
			break;
     8c8:	e0b4      	b.n	a34 <read_boardvalues+0x590>
			xprintf("CARDA inserted but not identified\r\n");
     8ca:	4871      	ldr	r0, [pc, #452]	; (a90 <read_boardvalues+0x5ec>)
     8cc:	4b68      	ldr	r3, [pc, #416]	; (a70 <read_boardvalues+0x5cc>)
     8ce:	4798      	blx	r3
			break;
     8d0:	e0b0      	b.n	a34 <read_boardvalues+0x590>
			xprintf("CARDA is a MAXI IO\r\n");
     8d2:	4870      	ldr	r0, [pc, #448]	; (a94 <read_boardvalues+0x5f0>)
     8d4:	4b66      	ldr	r3, [pc, #408]	; (a70 <read_boardvalues+0x5cc>)
     8d6:	4798      	blx	r3
			break;
     8d8:	e0ac      	b.n	a34 <read_boardvalues+0x590>
				xprintf("Could NOT write to the Mini-IO Expander on CARDA:I2C [%i]\r\n", err);
     8da:	2101      	movs	r1, #1
     8dc:	486e      	ldr	r0, [pc, #440]	; (a98 <read_boardvalues+0x5f4>)
     8de:	4b64      	ldr	r3, [pc, #400]	; (a70 <read_boardvalues+0x5cc>)
     8e0:	4798      	blx	r3
     8e2:	e7ee      	b.n	8c2 <read_boardvalues+0x41e>
			xprintf("CARDA is a VIBRAPOINT\r\n");
     8e4:	486d      	ldr	r0, [pc, #436]	; (a9c <read_boardvalues+0x5f8>)
     8e6:	4b62      	ldr	r3, [pc, #392]	; (a70 <read_boardvalues+0x5cc>)
     8e8:	4798      	blx	r3
			break;
     8ea:	e0a3      	b.n	a34 <read_boardvalues+0x590>
				xprintf("Could NOT write to the DAC Gain controller on CARDA:I2C [%i]\r\n", err);
     8ec:	2101      	movs	r1, #1
     8ee:	486c      	ldr	r0, [pc, #432]	; (aa0 <read_boardvalues+0x5fc>)
     8f0:	4b5f      	ldr	r3, [pc, #380]	; (a70 <read_boardvalues+0x5cc>)
     8f2:	4798      	blx	r3
     8f4:	e794      	b.n	820 <read_boardvalues+0x37c>
			if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL2, 0x06))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL2] not correct\r\n"); }
     8f6:	486b      	ldr	r0, [pc, #428]	; (aa4 <read_boardvalues+0x600>)
     8f8:	4b5d      	ldr	r3, [pc, #372]	; (a70 <read_boardvalues+0x5cc>)
     8fa:	4798      	blx	r3
     8fc:	e7aa      	b.n	854 <read_boardvalues+0x3b0>
		if (cardA_old) {
			/* Turn off the T-junction port 3 to the Power & Ethernet board attachment */
			writeKSZreg(SPI_KSZ8794_PORT3CONTROL2, 0x00);
			delay_us(50);
			
			if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL2, 0x00))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL2] not correct\r\n"); }
     8fe:	4869      	ldr	r0, [pc, #420]	; (aa4 <read_boardvalues+0x600>)
     900:	4b5b      	ldr	r3, [pc, #364]	; (a70 <read_boardvalues+0x5cc>)
     902:	4798      	blx	r3
     904:	e08e      	b.n	a24 <read_boardvalues+0x580>

	/* Detect change of status of Slot [B] daughter-card */
	if ((!cardB_old) && (cardB_present)) {
		/* Read the I2C device address on the card to establish type of card */
		
		if (!(err = I2C_check_deviceID(PB24_CARDB_I2C_SDA, PB25_CARDB_I2C_CLK, 0x60))) {
     906:	2260      	movs	r2, #96	; 0x60
     908:	2139      	movs	r1, #57	; 0x39
     90a:	2038      	movs	r0, #56	; 0x38
     90c:	4b53      	ldr	r3, [pc, #332]	; (a5c <read_boardvalues+0x5b8>)
     90e:	4798      	blx	r3
     910:	b978      	cbnz	r0, 932 <read_boardvalues+0x48e>
			cardB_type = CARD_VIBRATEK;
     912:	2201      	movs	r2, #1
     914:	4b64      	ldr	r3, [pc, #400]	; (aa8 <read_boardvalues+0x604>)
     916:	701a      	strb	r2, [r3, #0]
			xprintf("CARDB is a VIBRAPOINT\r\n");
			break;
			
			case CARD_VIBRATEK:
			/* Set the gain for the VibraTek card on the ADC reference voltage */
			if ((err = I2C_setGAIN(PB24_CARDB_I2C_SDA,  PB25_CARDB_I2C_CLK, ((CONFIG *)&settings_buffer)->gain_cardB)) < 0) {
     918:	4b52      	ldr	r3, [pc, #328]	; (a64 <read_boardvalues+0x5c0>)
     91a:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
     91e:	2139      	movs	r1, #57	; 0x39
     920:	2038      	movs	r0, #56	; 0x38
     922:	4b51      	ldr	r3, [pc, #324]	; (a68 <read_boardvalues+0x5c4>)
     924:	4798      	blx	r3
     926:	1e01      	subs	r1, r0, #0
     928:	db48      	blt.n	9bc <read_boardvalues+0x518>
				xprintf("Could NOT write to the DAC Gain controller on CARDB:I2C [%i]\r\n", err);
			}
			
			xprintf("CARDB is a VIBRATEK\r\n");
     92a:	4860      	ldr	r0, [pc, #384]	; (aac <read_boardvalues+0x608>)
     92c:	4b50      	ldr	r3, [pc, #320]	; (a70 <read_boardvalues+0x5cc>)
     92e:	4798      	blx	r3
			break;
     930:	e04c      	b.n	9cc <read_boardvalues+0x528>
		} else if ((!(err = I2C_check_deviceID(PB24_CARDB_I2C_SDA, PB25_CARDB_I2C_CLK, 0x41))) && (!(err = I2C_check_deviceID(PB24_CARDB_I2C_SDA, PB25_CARDB_I2C_CLK, 0x68)))) {
     932:	2241      	movs	r2, #65	; 0x41
     934:	2139      	movs	r1, #57	; 0x39
     936:	2038      	movs	r0, #56	; 0x38
     938:	4b48      	ldr	r3, [pc, #288]	; (a5c <read_boardvalues+0x5b8>)
     93a:	4798      	blx	r3
     93c:	4601      	mov	r1, r0
     93e:	b1b8      	cbz	r0, 970 <read_boardvalues+0x4cc>
			cardB_type = CARD_NOTFITTED;
     940:	2200      	movs	r2, #0
     942:	4b59      	ldr	r3, [pc, #356]	; (aa8 <read_boardvalues+0x604>)
     944:	701a      	strb	r2, [r3, #0]
		if (err < 0) {
     946:	4291      	cmp	r1, r2
     948:	da27      	bge.n	99a <read_boardvalues+0x4f6>
			xprintf("Could not read I2C bus on CARDB for I2C_check_deviceID() [%i]\r\n", err);
     94a:	4859      	ldr	r0, [pc, #356]	; (ab0 <read_boardvalues+0x60c>)
     94c:	4b48      	ldr	r3, [pc, #288]	; (a70 <read_boardvalues+0x5cc>)
     94e:	4798      	blx	r3
		switch (cardB_type) {
     950:	4b55      	ldr	r3, [pc, #340]	; (aa8 <read_boardvalues+0x604>)
     952:	781b      	ldrb	r3, [r3, #0]
     954:	3b01      	subs	r3, #1
     956:	2b03      	cmp	r3, #3
     958:	d81f      	bhi.n	99a <read_boardvalues+0x4f6>
     95a:	a201      	add	r2, pc, #4	; (adr r2, 960 <read_boardvalues+0x4bc>)
     95c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     960:	00000919 	.word	0x00000919
     964:	00000987 	.word	0x00000987
     968:	000009a3 	.word	0x000009a3
     96c:	000009b5 	.word	0x000009b5
		} else if ((!(err = I2C_check_deviceID(PB24_CARDB_I2C_SDA, PB25_CARDB_I2C_CLK, 0x41))) && (!(err = I2C_check_deviceID(PB24_CARDB_I2C_SDA, PB25_CARDB_I2C_CLK, 0x68)))) {
     970:	2268      	movs	r2, #104	; 0x68
     972:	2139      	movs	r1, #57	; 0x39
     974:	2038      	movs	r0, #56	; 0x38
     976:	4b39      	ldr	r3, [pc, #228]	; (a5c <read_boardvalues+0x5b8>)
     978:	4798      	blx	r3
     97a:	4601      	mov	r1, r0
     97c:	2800      	cmp	r0, #0
     97e:	d1df      	bne.n	940 <read_boardvalues+0x49c>
			cardB_type = CARD_MINI_IO;		
     980:	2202      	movs	r2, #2
     982:	4b49      	ldr	r3, [pc, #292]	; (aa8 <read_boardvalues+0x604>)
     984:	701a      	strb	r2, [r3, #0]
			if ((err = I2C_configEXPANDER(PB24_CARDB_I2C_SDA,  PB25_CARDB_I2C_CLK) < 0)) {
     986:	2139      	movs	r1, #57	; 0x39
     988:	2038      	movs	r0, #56	; 0x38
     98a:	4b3f      	ldr	r3, [pc, #252]	; (a88 <read_boardvalues+0x5e4>)
     98c:	4798      	blx	r3
     98e:	2800      	cmp	r0, #0
     990:	db0b      	blt.n	9aa <read_boardvalues+0x506>
			xprintf("CARDB is a MINI IO\r\n");
     992:	4848      	ldr	r0, [pc, #288]	; (ab4 <read_boardvalues+0x610>)
     994:	4b36      	ldr	r3, [pc, #216]	; (a70 <read_boardvalues+0x5cc>)
     996:	4798      	blx	r3
			break;
     998:	e018      	b.n	9cc <read_boardvalues+0x528>
			xprintf("CARDB inserted but not identified\r\n");
     99a:	4847      	ldr	r0, [pc, #284]	; (ab8 <read_boardvalues+0x614>)
     99c:	4b34      	ldr	r3, [pc, #208]	; (a70 <read_boardvalues+0x5cc>)
     99e:	4798      	blx	r3
			break;
     9a0:	e014      	b.n	9cc <read_boardvalues+0x528>
			xprintf("CARDB is a MAXI IO\r\n");
     9a2:	4846      	ldr	r0, [pc, #280]	; (abc <read_boardvalues+0x618>)
     9a4:	4b32      	ldr	r3, [pc, #200]	; (a70 <read_boardvalues+0x5cc>)
     9a6:	4798      	blx	r3
			break;
     9a8:	e010      	b.n	9cc <read_boardvalues+0x528>
				xprintf("Could NOT write to the Mini-IO Expander on CARDB:I2C [%i]\r\n", err);
     9aa:	2101      	movs	r1, #1
     9ac:	4844      	ldr	r0, [pc, #272]	; (ac0 <read_boardvalues+0x61c>)
     9ae:	4b30      	ldr	r3, [pc, #192]	; (a70 <read_boardvalues+0x5cc>)
     9b0:	4798      	blx	r3
     9b2:	e7ee      	b.n	992 <read_boardvalues+0x4ee>
			xprintf("CARDB is a VIBRAPOINT\r\n");
     9b4:	4843      	ldr	r0, [pc, #268]	; (ac4 <read_boardvalues+0x620>)
     9b6:	4b2e      	ldr	r3, [pc, #184]	; (a70 <read_boardvalues+0x5cc>)
     9b8:	4798      	blx	r3
			break;
     9ba:	e007      	b.n	9cc <read_boardvalues+0x528>
				xprintf("Could NOT write to the DAC Gain controller on CARDB:I2C [%i]\r\n", err);
     9bc:	4842      	ldr	r0, [pc, #264]	; (ac8 <read_boardvalues+0x624>)
     9be:	4b2c      	ldr	r3, [pc, #176]	; (a70 <read_boardvalues+0x5cc>)
     9c0:	4798      	blx	r3
     9c2:	e7b2      	b.n	92a <read_boardvalues+0x486>
		}
	} else if (!cardB_present) {
     9c4:	4b41      	ldr	r3, [pc, #260]	; (acc <read_boardvalues+0x628>)
     9c6:	781b      	ldrb	r3, [r3, #0]
     9c8:	2b00      	cmp	r3, #0
     9ca:	d03c      	beq.n	a46 <read_boardvalues+0x5a2>
			xprintf("CARDB has been REMOVED\r\n");
		}
	}

	/* Update the old live states so that next time round, we can detect any changes since this time */
	cardA_old = cardA_present;
     9cc:	4b40      	ldr	r3, [pc, #256]	; (ad0 <read_boardvalues+0x62c>)
     9ce:	781a      	ldrb	r2, [r3, #0]
     9d0:	4b40      	ldr	r3, [pc, #256]	; (ad4 <read_boardvalues+0x630>)
     9d2:	701a      	strb	r2, [r3, #0]
	cardB_old = cardB_present;
     9d4:	4b3d      	ldr	r3, [pc, #244]	; (acc <read_boardvalues+0x628>)
     9d6:	781a      	ldrb	r2, [r3, #0]
     9d8:	4b3f      	ldr	r3, [pc, #252]	; (ad8 <read_boardvalues+0x634>)
     9da:	701a      	strb	r2, [r3, #0]
	old_tamper = tamper;
     9dc:	4b3f      	ldr	r3, [pc, #252]	; (adc <read_boardvalues+0x638>)
     9de:	781a      	ldrb	r2, [r3, #0]
     9e0:	4b3f      	ldr	r3, [pc, #252]	; (ae0 <read_boardvalues+0x63c>)
     9e2:	701a      	strb	r2, [r3, #0]
	old_link_port1 = link_port1;
     9e4:	4b3f      	ldr	r3, [pc, #252]	; (ae4 <read_boardvalues+0x640>)
     9e6:	781a      	ldrb	r2, [r3, #0]
     9e8:	4b3f      	ldr	r3, [pc, #252]	; (ae8 <read_boardvalues+0x644>)
     9ea:	701a      	strb	r2, [r3, #0]
	old_link_port2 = link_port2;
     9ec:	4b3f      	ldr	r3, [pc, #252]	; (aec <read_boardvalues+0x648>)
     9ee:	781a      	ldrb	r2, [r3, #0]
     9f0:	4b3f      	ldr	r3, [pc, #252]	; (af0 <read_boardvalues+0x64c>)
     9f2:	701a      	strb	r2, [r3, #0]
	old_link_port3 = link_port3;
     9f4:	4b3f      	ldr	r3, [pc, #252]	; (af4 <read_boardvalues+0x650>)
     9f6:	781a      	ldrb	r2, [r3, #0]
     9f8:	4b3f      	ldr	r3, [pc, #252]	; (af8 <read_boardvalues+0x654>)
     9fa:	701a      	strb	r2, [r3, #0]
     9fc:	b006      	add	sp, #24
     9fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cardA_type = CARD_NOTFITTED;
     a02:	2400      	movs	r4, #0
     a04:	4b16      	ldr	r3, [pc, #88]	; (a60 <read_boardvalues+0x5bc>)
     a06:	701c      	strb	r4, [r3, #0]
			writeKSZreg(SPI_KSZ8794_PORT3CONTROL2, 0x00);
     a08:	4621      	mov	r1, r4
     a0a:	2032      	movs	r0, #50	; 0x32
     a0c:	4b19      	ldr	r3, [pc, #100]	; (a74 <read_boardvalues+0x5d0>)
     a0e:	4798      	blx	r3
			delay_us(50);
     a10:	2032      	movs	r0, #50	; 0x32
     a12:	4b19      	ldr	r3, [pc, #100]	; (a78 <read_boardvalues+0x5d4>)
     a14:	4798      	blx	r3
			if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL2, 0x00))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL2] not correct\r\n"); }
     a16:	4621      	mov	r1, r4
     a18:	2032      	movs	r0, #50	; 0x32
     a1a:	4b18      	ldr	r3, [pc, #96]	; (a7c <read_boardvalues+0x5d8>)
     a1c:	4798      	blx	r3
     a1e:	2800      	cmp	r0, #0
     a20:	f43f af6d 	beq.w	8fe <read_boardvalues+0x45a>
			xprintf("CARDA has been REMOVED\r\n");
     a24:	4835      	ldr	r0, [pc, #212]	; (afc <read_boardvalues+0x658>)
     a26:	4b12      	ldr	r3, [pc, #72]	; (a70 <read_boardvalues+0x5cc>)
     a28:	4798      	blx	r3
     a2a:	e003      	b.n	a34 <read_boardvalues+0x590>
	} else if (!cardA_present) {
     a2c:	4b28      	ldr	r3, [pc, #160]	; (ad0 <read_boardvalues+0x62c>)
     a2e:	781b      	ldrb	r3, [r3, #0]
     a30:	2b00      	cmp	r3, #0
     a32:	d0e6      	beq.n	a02 <read_boardvalues+0x55e>
	if ((!cardB_old) && (cardB_present)) {
     a34:	4b28      	ldr	r3, [pc, #160]	; (ad8 <read_boardvalues+0x634>)
     a36:	781b      	ldrb	r3, [r3, #0]
     a38:	2b00      	cmp	r3, #0
     a3a:	d1c3      	bne.n	9c4 <read_boardvalues+0x520>
     a3c:	4b23      	ldr	r3, [pc, #140]	; (acc <read_boardvalues+0x628>)
     a3e:	781b      	ldrb	r3, [r3, #0]
     a40:	2b00      	cmp	r3, #0
     a42:	f47f af60 	bne.w	906 <read_boardvalues+0x462>
		cardB_type = CARD_NOTFITTED;
     a46:	2200      	movs	r2, #0
     a48:	4b17      	ldr	r3, [pc, #92]	; (aa8 <read_boardvalues+0x604>)
     a4a:	701a      	strb	r2, [r3, #0]
		if (cardA_old) {
     a4c:	4b21      	ldr	r3, [pc, #132]	; (ad4 <read_boardvalues+0x630>)
     a4e:	781b      	ldrb	r3, [r3, #0]
     a50:	2b00      	cmp	r3, #0
     a52:	d0bb      	beq.n	9cc <read_boardvalues+0x528>
			xprintf("CARDB has been REMOVED\r\n");
     a54:	482a      	ldr	r0, [pc, #168]	; (b00 <read_boardvalues+0x65c>)
     a56:	4b06      	ldr	r3, [pc, #24]	; (a70 <read_boardvalues+0x5cc>)
     a58:	4798      	blx	r3
     a5a:	e7b7      	b.n	9cc <read_boardvalues+0x528>
     a5c:	00007f31 	.word	0x00007f31
     a60:	20007c6e 	.word	0x20007c6e
     a64:	20007f2c 	.word	0x20007f2c
     a68:	00006c11 	.word	0x00006c11
     a6c:	0000ec88 	.word	0x0000ec88
     a70:	0000031d 	.word	0x0000031d
     a74:	0000dbc9 	.word	0x0000dbc9
     a78:	000015a9 	.word	0x000015a9
     a7c:	0000db25 	.word	0x0000db25
     a80:	0000eccc 	.word	0x0000eccc
     a84:	0000eb60 	.word	0x0000eb60
     a88:	00005ad9 	.word	0x00005ad9
     a8c:	0000ec18 	.word	0x0000ec18
     a90:	0000eba0 	.word	0x0000eba0
     a94:	0000ebc4 	.word	0x0000ebc4
     a98:	0000ebdc 	.word	0x0000ebdc
     a9c:	0000ec30 	.word	0x0000ec30
     aa0:	0000ec48 	.word	0x0000ec48
     aa4:	0000eca0 	.word	0x0000eca0
     aa8:	20008564 	.word	0x20008564
     aac:	0000ee3c 	.word	0x0000ee3c
     ab0:	0000ed14 	.word	0x0000ed14
     ab4:	0000edcc 	.word	0x0000edcc
     ab8:	0000ed54 	.word	0x0000ed54
     abc:	0000ed78 	.word	0x0000ed78
     ac0:	0000ed90 	.word	0x0000ed90
     ac4:	0000ede4 	.word	0x0000ede4
     ac8:	0000edfc 	.word	0x0000edfc
     acc:	2000757f 	.word	0x2000757f
     ad0:	2000857c 	.word	0x2000857c
     ad4:	20007577 	.word	0x20007577
     ad8:	2000784d 	.word	0x2000784d
     adc:	20007fb3 	.word	0x20007fb3
     ae0:	2000854c 	.word	0x2000854c
     ae4:	20007575 	.word	0x20007575
     ae8:	20007589 	.word	0x20007589
     aec:	20008294 	.word	0x20008294
     af0:	20007574 	.word	0x20007574
     af4:	20007579 	.word	0x20007579
     af8:	20008278 	.word	0x20008278
     afc:	0000ecf8 	.word	0x0000ecf8
     b00:	0000ee54 	.word	0x0000ee54

00000b04 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     b04:	e7fe      	b.n	b04 <Dummy_Handler>
	...

00000b08 <Reset_Handler>:
{
     b08:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     b0a:	4b17      	ldr	r3, [pc, #92]	; (b68 <Reset_Handler+0x60>)
     b0c:	4a17      	ldr	r2, [pc, #92]	; (b6c <Reset_Handler+0x64>)
     b0e:	429a      	cmp	r2, r3
     b10:	d010      	beq.n	b34 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     b12:	4b17      	ldr	r3, [pc, #92]	; (b70 <Reset_Handler+0x68>)
     b14:	4a14      	ldr	r2, [pc, #80]	; (b68 <Reset_Handler+0x60>)
     b16:	429a      	cmp	r2, r3
     b18:	d20c      	bcs.n	b34 <Reset_Handler+0x2c>
     b1a:	3b01      	subs	r3, #1
     b1c:	1a9b      	subs	r3, r3, r2
     b1e:	f023 0303 	bic.w	r3, r3, #3
     b22:	3304      	adds	r3, #4
     b24:	4413      	add	r3, r2
     b26:	4911      	ldr	r1, [pc, #68]	; (b6c <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
     b28:	f851 0b04 	ldr.w	r0, [r1], #4
     b2c:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     b30:	429a      	cmp	r2, r3
     b32:	d1f9      	bne.n	b28 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     b34:	4b0f      	ldr	r3, [pc, #60]	; (b74 <Reset_Handler+0x6c>)
     b36:	4a10      	ldr	r2, [pc, #64]	; (b78 <Reset_Handler+0x70>)
     b38:	429a      	cmp	r2, r3
     b3a:	d20a      	bcs.n	b52 <Reset_Handler+0x4a>
     b3c:	3b01      	subs	r3, #1
     b3e:	1a9b      	subs	r3, r3, r2
     b40:	f023 0303 	bic.w	r3, r3, #3
     b44:	3304      	adds	r3, #4
     b46:	4413      	add	r3, r2
                *pDest++ = 0;
     b48:	2100      	movs	r1, #0
     b4a:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     b4e:	4293      	cmp	r3, r2
     b50:	d1fb      	bne.n	b4a <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     b52:	4a0a      	ldr	r2, [pc, #40]	; (b7c <Reset_Handler+0x74>)
     b54:	4b0a      	ldr	r3, [pc, #40]	; (b80 <Reset_Handler+0x78>)
     b56:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     b5a:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     b5c:	4b09      	ldr	r3, [pc, #36]	; (b84 <Reset_Handler+0x7c>)
     b5e:	4798      	blx	r3
        main();
     b60:	4b09      	ldr	r3, [pc, #36]	; (b88 <Reset_Handler+0x80>)
     b62:	4798      	blx	r3
     b64:	e7fe      	b.n	b64 <Reset_Handler+0x5c>
     b66:	bf00      	nop
     b68:	20000000 	.word	0x20000000
     b6c:	00011a34 	.word	0x00011a34
     b70:	200002b0 	.word	0x200002b0
     b74:	200090e8 	.word	0x200090e8
     b78:	200002c0 	.word	0x200002c0
     b7c:	e000ed00 	.word	0xe000ed00
     b80:	00000000 	.word	0x00000000
     b84:	0000dc39 	.word	0x0000dc39
     b88:	0000a8f1 	.word	0x0000a8f1

00000b8c <ADC_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     b8c:	4b24      	ldr	r3, [pc, #144]	; (c20 <ADC_0_PORT_init+0x94>)
     b8e:	2204      	movs	r2, #4
     b90:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b92:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     b96:	629a      	str	r2, [r3, #40]	; 0x28
     b98:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     b9c:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b9e:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
	tmp &= ~PORT_PINCFG_PMUXEN;
     ba2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     ba6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     baa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     bae:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     bb2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     bb6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     bba:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     bbe:	2208      	movs	r2, #8
     bc0:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     bc2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     bc6:	629a      	str	r2, [r3, #40]	; 0x28
     bc8:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     bca:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
	tmp &= ~PORT_PINCFG_PMUXEN;
     bce:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     bd2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     bd6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     bda:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     bde:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     be2:	f042 0210 	orr.w	r2, r2, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     be6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     bea:	f44f 7280 	mov.w	r2, #256	; 0x100
     bee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     bf2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     bf6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     bfa:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     bfe:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
     c02:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c06:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c0a:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c0e:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     c12:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     c16:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c1a:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
     c1e:	4770      	bx	lr
     c20:	41008000 	.word	0x41008000

00000c24 <ADC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
     c24:	4a04      	ldr	r2, [pc, #16]	; (c38 <ADC_0_CLOCK_init+0x14>)
     c26:	6a13      	ldr	r3, [r2, #32]
     c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     c2c:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     c2e:	2240      	movs	r2, #64	; 0x40
     c30:	4b02      	ldr	r3, [pc, #8]	; (c3c <ADC_0_CLOCK_init+0x18>)
     c32:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
     c36:	4770      	bx	lr
     c38:	40000800 	.word	0x40000800
     c3c:	40001c00 	.word	0x40001c00

00000c40 <ADC_0_init>:
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void ADC_0_init(void)
{
     c40:	b508      	push	{r3, lr}
	ADC_0_CLOCK_init();
     c42:	4b05      	ldr	r3, [pc, #20]	; (c58 <ADC_0_init+0x18>)
     c44:	4798      	blx	r3
	ADC_0_PORT_init();
     c46:	4b05      	ldr	r3, [pc, #20]	; (c5c <ADC_0_init+0x1c>)
     c48:	4798      	blx	r3
	adc_sync_init(&ADC_0, ADC0, (void *)NULL);
     c4a:	2200      	movs	r2, #0
     c4c:	4904      	ldr	r1, [pc, #16]	; (c60 <ADC_0_init+0x20>)
     c4e:	4805      	ldr	r0, [pc, #20]	; (c64 <ADC_0_init+0x24>)
     c50:	4b05      	ldr	r3, [pc, #20]	; (c68 <ADC_0_init+0x28>)
     c52:	4798      	blx	r3
     c54:	bd08      	pop	{r3, pc}
     c56:	bf00      	nop
     c58:	00000c25 	.word	0x00000c25
     c5c:	00000b8d 	.word	0x00000b8d
     c60:	43001c00 	.word	0x43001c00
     c64:	20007470 	.word	0x20007470
     c68:	000013c1 	.word	0x000013c1

00000c6c <CRYPTOGRAPHY_0_init>:
 * \brief AES initialization function
 *
 * Enables AES peripheral, clocks and initializes AES driver
 */
void CRYPTOGRAPHY_0_init(void)
{
     c6c:	b508      	push	{r3, lr}
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_AES;
     c6e:	4a05      	ldr	r2, [pc, #20]	; (c84 <CRYPTOGRAPHY_0_init+0x18>)
     c70:	69d3      	ldr	r3, [r2, #28]
     c72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     c76:	61d3      	str	r3, [r2, #28]
	hri_mclk_set_APBCMASK_AES_bit(MCLK);
	aes_sync_init(&CRYPTOGRAPHY_0, AES);
     c78:	4903      	ldr	r1, [pc, #12]	; (c88 <CRYPTOGRAPHY_0_init+0x1c>)
     c7a:	4804      	ldr	r0, [pc, #16]	; (c8c <CRYPTOGRAPHY_0_init+0x20>)
     c7c:	4b04      	ldr	r3, [pc, #16]	; (c90 <CRYPTOGRAPHY_0_init+0x24>)
     c7e:	4798      	blx	r3
     c80:	bd08      	pop	{r3, pc}
     c82:	bf00      	nop
     c84:	40000800 	.word	0x40000800
     c88:	42002400 	.word	0x42002400
     c8c:	20007428 	.word	0x20007428
     c90:	000014bd 	.word	0x000014bd

00000c94 <CRC_0_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_0_init(void)
{
     c94:	b508      	push	{r3, lr}
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     c96:	4a05      	ldr	r2, [pc, #20]	; (cac <CRC_0_init+0x18>)
     c98:	6993      	ldr	r3, [r2, #24]
     c9a:	f043 0302 	orr.w	r3, r3, #2
     c9e:	6193      	str	r3, [r2, #24]
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
	crc_sync_init(&CRC_0, DSU);
     ca0:	4903      	ldr	r1, [pc, #12]	; (cb0 <CRC_0_init+0x1c>)
     ca2:	4804      	ldr	r0, [pc, #16]	; (cb4 <CRC_0_init+0x20>)
     ca4:	4b04      	ldr	r3, [pc, #16]	; (cb8 <CRC_0_init+0x24>)
     ca6:	4798      	blx	r3
     ca8:	bd08      	pop	{r3, pc}
     caa:	bf00      	nop
     cac:	40000800 	.word	0x40000800
     cb0:	41002000 	.word	0x41002000
     cb4:	20007464 	.word	0x20007464
     cb8:	00001565 	.word	0x00001565

00000cbc <HASH_ALGORITHM_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_ICM;
     cbc:	4b04      	ldr	r3, [pc, #16]	; (cd0 <HASH_ALGORITHM_0_CLOCK_init+0x14>)
     cbe:	691a      	ldr	r2, [r3, #16]
     cc0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
     cc4:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_ICM;
     cc6:	69da      	ldr	r2, [r3, #28]
     cc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
     ccc:	61da      	str	r2, [r3, #28]
     cce:	4770      	bx	lr
     cd0:	40000800 	.word	0x40000800

00000cd4 <HASH_ALGORITHM_0_init>:
 * \brief SHA initialization function
 *
 * Enables SHA peripheral, clocks and initializes SHA driver
 */
void HASH_ALGORITHM_0_init(void)
{
     cd4:	b508      	push	{r3, lr}
	HASH_ALGORITHM_0_CLOCK_init();
     cd6:	4b03      	ldr	r3, [pc, #12]	; (ce4 <HASH_ALGORITHM_0_init+0x10>)
     cd8:	4798      	blx	r3
	sha_sync_init(&HASH_ALGORITHM_0, ICM);
     cda:	4903      	ldr	r1, [pc, #12]	; (ce8 <HASH_ALGORITHM_0_init+0x14>)
     cdc:	4803      	ldr	r0, [pc, #12]	; (cec <HASH_ALGORITHM_0_init+0x18>)
     cde:	4b04      	ldr	r3, [pc, #16]	; (cf0 <HASH_ALGORITHM_0_init+0x1c>)
     ce0:	4798      	blx	r3
     ce2:	bd08      	pop	{r3, pc}
     ce4:	00000cbd 	.word	0x00000cbd
     ce8:	42002c00 	.word	0x42002c00
     cec:	20007468 	.word	0x20007468
     cf0:	00001a29 	.word	0x00001a29

00000cf4 <FLASH_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
     cf4:	4a02      	ldr	r2, [pc, #8]	; (d00 <FLASH_0_CLOCK_init+0xc>)
     cf6:	6913      	ldr	r3, [r2, #16]
     cf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     cfc:	6113      	str	r3, [r2, #16]
     cfe:	4770      	bx	lr
     d00:	40000800 	.word	0x40000800

00000d04 <FLASH_0_init>:

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}

void FLASH_0_init(void)
{
     d04:	b508      	push	{r3, lr}
	FLASH_0_CLOCK_init();
     d06:	4b03      	ldr	r3, [pc, #12]	; (d14 <FLASH_0_init+0x10>)
     d08:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
     d0a:	4903      	ldr	r1, [pc, #12]	; (d18 <FLASH_0_init+0x14>)
     d0c:	4803      	ldr	r0, [pc, #12]	; (d1c <FLASH_0_init+0x18>)
     d0e:	4b04      	ldr	r3, [pc, #16]	; (d20 <FLASH_0_init+0x1c>)
     d10:	4798      	blx	r3
     d12:	bd08      	pop	{r3, pc}
     d14:	00000cf5 	.word	0x00000cf5
     d18:	41004000 	.word	0x41004000
     d1c:	2000740c 	.word	0x2000740c
     d20:	00001635 	.word	0x00001635

00000d24 <USART_0_CLOCK_init>:
     d24:	4b05      	ldr	r3, [pc, #20]	; (d3c <USART_0_CLOCK_init+0x18>)
     d26:	2240      	movs	r2, #64	; 0x40
     d28:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     d2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     d30:	4a03      	ldr	r2, [pc, #12]	; (d40 <USART_0_CLOCK_init+0x1c>)
     d32:	6953      	ldr	r3, [r2, #20]
     d34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     d38:	6153      	str	r3, [r2, #20]
     d3a:	4770      	bx	lr
     d3c:	40001c00 	.word	0x40001c00
     d40:	40000800 	.word	0x40000800

00000d44 <USART_0_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d44:	4b10      	ldr	r3, [pc, #64]	; (d88 <USART_0_PORT_init+0x44>)
     d46:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
	tmp &= ~PORT_PINCFG_PMUXEN;
     d4a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     d4e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d52:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     d56:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     d5a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     d5e:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d66:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
	tmp &= ~PORT_PINCFG_PMUXEN;
     d6a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     d6e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d72:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     d76:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     d7a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     d7e:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
     d86:	4770      	bx	lr
     d88:	41008000 	.word	0x41008000

00000d8c <USART_0_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_0_init(void)
{
     d8c:	b510      	push	{r4, lr}
     d8e:	b082      	sub	sp, #8
	USART_0_CLOCK_init();
     d90:	4b06      	ldr	r3, [pc, #24]	; (dac <USART_0_init+0x20>)
     d92:	4798      	blx	r3
	usart_async_init(&USART_0, SERCOM0, USART_0_buffer, USART_0_BUFFER_SIZE, (void *)NULL);
     d94:	2300      	movs	r3, #0
     d96:	9300      	str	r3, [sp, #0]
     d98:	2310      	movs	r3, #16
     d9a:	4a05      	ldr	r2, [pc, #20]	; (db0 <USART_0_init+0x24>)
     d9c:	4905      	ldr	r1, [pc, #20]	; (db4 <USART_0_init+0x28>)
     d9e:	4806      	ldr	r0, [pc, #24]	; (db8 <USART_0_init+0x2c>)
     da0:	4c06      	ldr	r4, [pc, #24]	; (dbc <USART_0_init+0x30>)
     da2:	47a0      	blx	r4
	USART_0_PORT_init();
     da4:	4b06      	ldr	r3, [pc, #24]	; (dc0 <USART_0_init+0x34>)
     da6:	4798      	blx	r3
}
     da8:	b002      	add	sp, #8
     daa:	bd10      	pop	{r4, pc}
     dac:	00000d25 	.word	0x00000d25
     db0:	20000310 	.word	0x20000310
     db4:	40003000 	.word	0x40003000
     db8:	2000748c 	.word	0x2000748c
     dbc:	0000200d 	.word	0x0000200d
     dc0:	00000d45 	.word	0x00000d45

00000dc4 <SPI_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     dc4:	4b2c      	ldr	r3, [pc, #176]	; (e78 <SPI_0_PORT_init+0xb4>)
     dc6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     dca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     dce:	492b      	ldr	r1, [pc, #172]	; (e7c <SPI_0_PORT_init+0xb8>)
     dd0:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     dd4:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     dd8:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ddc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     de0:	f893 20cc 	ldrb.w	r2, [r3, #204]	; 0xcc
	tmp &= ~PORT_PINCFG_PMUXEN;
     de4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     de8:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     dec:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     df0:	f893 20b6 	ldrb.w	r2, [r3, #182]	; 0xb6
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     df4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     df8:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     dfc:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     e00:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     e04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e08:	4a1d      	ldr	r2, [pc, #116]	; (e80 <SPI_0_PORT_init+0xbc>)
     e0a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     e0e:	4a1d      	ldr	r2, [pc, #116]	; (e84 <SPI_0_PORT_init+0xc0>)
     e10:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     e14:	f893 20cd 	ldrb.w	r2, [r3, #205]	; 0xcd
     e18:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     e1c:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e20:	f893 20cd 	ldrb.w	r2, [r3, #205]	; 0xcd
	tmp &= ~PORT_PINCFG_PMUXEN;
     e24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     e28:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e2c:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     e30:	f893 20b6 	ldrb.w	r2, [r3, #182]	; 0xb6
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     e34:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     e38:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     e3c:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     e40:	f44f 4200 	mov.w	r2, #32768	; 0x8000
     e44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e48:	480f      	ldr	r0, [pc, #60]	; (e88 <SPI_0_PORT_init+0xc4>)
     e4a:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     e4e:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e52:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e56:	f893 20cf 	ldrb.w	r2, [r3, #207]	; 0xcf
	tmp &= ~PORT_PINCFG_PMUXEN;
     e5a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     e5e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e62:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     e66:	f893 20b7 	ldrb.w	r2, [r3, #183]	; 0xb7
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     e6a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     e6e:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     e72:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
     e76:	4770      	bx	lr
     e78:	41008000 	.word	0x41008000
     e7c:	40001000 	.word	0x40001000
     e80:	40022000 	.word	0x40022000
     e84:	c0020000 	.word	0xc0020000
     e88:	40008000 	.word	0x40008000

00000e8c <SPI_0_CLOCK_init>:
     e8c:	4b05      	ldr	r3, [pc, #20]	; (ea4 <SPI_0_CLOCK_init+0x18>)
     e8e:	2240      	movs	r2, #64	; 0x40
     e90:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
     e94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     e98:	4a03      	ldr	r2, [pc, #12]	; (ea8 <SPI_0_CLOCK_init+0x1c>)
     e9a:	6a13      	ldr	r3, [r2, #32]
     e9c:	f043 0301 	orr.w	r3, r3, #1
     ea0:	6213      	str	r3, [r2, #32]
     ea2:	4770      	bx	lr
     ea4:	40001c00 	.word	0x40001c00
     ea8:	40000800 	.word	0x40000800

00000eac <SPI_0_init>:

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
}

void SPI_0_init(void)
{
     eac:	b508      	push	{r3, lr}
	SPI_0_CLOCK_init();
     eae:	4b05      	ldr	r3, [pc, #20]	; (ec4 <SPI_0_init+0x18>)
     eb0:	4798      	blx	r3
	spi_m_sync_init(&SPI_0, SERCOM4);
     eb2:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
     eb6:	4804      	ldr	r0, [pc, #16]	; (ec8 <SPI_0_init+0x1c>)
     eb8:	4b04      	ldr	r3, [pc, #16]	; (ecc <SPI_0_init+0x20>)
     eba:	4798      	blx	r3
	SPI_0_PORT_init();
     ebc:	4b04      	ldr	r3, [pc, #16]	; (ed0 <SPI_0_init+0x24>)
     ebe:	4798      	blx	r3
     ec0:	bd08      	pop	{r3, pc}
     ec2:	bf00      	nop
     ec4:	00000e8d 	.word	0x00000e8d
     ec8:	20007478 	.word	0x20007478
     ecc:	00001a59 	.word	0x00001a59
     ed0:	00000dc5 	.word	0x00000dc5

00000ed4 <USART_1_CLOCK_init>:
     ed4:	4b05      	ldr	r3, [pc, #20]	; (eec <USART_1_CLOCK_init+0x18>)
     ed6:	2240      	movs	r2, #64	; 0x40
     ed8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     edc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     ee0:	4a03      	ldr	r2, [pc, #12]	; (ef0 <USART_1_CLOCK_init+0x1c>)
     ee2:	6a13      	ldr	r3, [r2, #32]
     ee4:	f043 0302 	orr.w	r3, r3, #2
     ee8:	6213      	str	r3, [r2, #32]
     eea:	4770      	bx	lr
     eec:	40001c00 	.word	0x40001c00
     ef0:	40000800 	.word	0x40000800

00000ef4 <USART_1_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ef4:	4b10      	ldr	r3, [pc, #64]	; (f38 <USART_1_PORT_init+0x44>)
     ef6:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
	tmp &= ~PORT_PINCFG_PMUXEN;
     efa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     efe:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f02:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     f06:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     f0a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     f0e:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     f12:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f16:	f893 20d1 	ldrb.w	r2, [r3, #209]	; 0xd1
	tmp &= ~PORT_PINCFG_PMUXEN;
     f1a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     f1e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f22:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     f26:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     f2a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     f2e:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     f32:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
     f36:	4770      	bx	lr
     f38:	41008000 	.word	0x41008000

00000f3c <USART_1_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_1_init(void)
{
     f3c:	b510      	push	{r4, lr}
     f3e:	b082      	sub	sp, #8
	USART_1_CLOCK_init();
     f40:	4b06      	ldr	r3, [pc, #24]	; (f5c <USART_1_init+0x20>)
     f42:	4798      	blx	r3
	usart_async_init(&USART_1, SERCOM5, USART_1_buffer, USART_1_BUFFER_SIZE, (void *)NULL);
     f44:	2300      	movs	r3, #0
     f46:	9300      	str	r3, [sp, #0]
     f48:	2310      	movs	r3, #16
     f4a:	4a05      	ldr	r2, [pc, #20]	; (f60 <USART_1_init+0x24>)
     f4c:	4905      	ldr	r1, [pc, #20]	; (f64 <USART_1_init+0x28>)
     f4e:	4806      	ldr	r0, [pc, #24]	; (f68 <USART_1_init+0x2c>)
     f50:	4c06      	ldr	r4, [pc, #24]	; (f6c <USART_1_init+0x30>)
     f52:	47a0      	blx	r4
	USART_1_PORT_init();
     f54:	4b06      	ldr	r3, [pc, #24]	; (f70 <USART_1_init+0x34>)
     f56:	4798      	blx	r3
}
     f58:	b002      	add	sp, #8
     f5a:	bd10      	pop	{r4, pc}
     f5c:	00000ed5 	.word	0x00000ed5
     f60:	20000320 	.word	0x20000320
     f64:	43000400 	.word	0x43000400
     f68:	200074dc 	.word	0x200074dc
     f6c:	0000200d 	.word	0x0000200d
     f70:	00000ef5 	.word	0x00000ef5

00000f74 <delay_driver_init>:

void delay_driver_init(void)
{
     f74:	b508      	push	{r3, lr}
	delay_init(SysTick);
     f76:	4802      	ldr	r0, [pc, #8]	; (f80 <delay_driver_init+0xc>)
     f78:	4b02      	ldr	r3, [pc, #8]	; (f84 <delay_driver_init+0x10>)
     f7a:	4798      	blx	r3
     f7c:	bd08      	pop	{r3, pc}
     f7e:	bf00      	nop
     f80:	e000e010 	.word	0xe000e010
     f84:	00001595 	.word	0x00001595

00000f88 <USB_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     f88:	4b1e      	ldr	r3, [pc, #120]	; (1004 <USB_0_PORT_init+0x7c>)
     f8a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     f8e:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f90:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     f94:	6299      	str	r1, [r3, #40]	; 0x28
     f96:	481c      	ldr	r0, [pc, #112]	; (1008 <USB_0_PORT_init+0x80>)
     f98:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     f9a:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     f9c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
     fa0:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     fa4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     fa8:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
     fac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     fb0:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     fb4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     fb8:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     fbc:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     fc0:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     fc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     fcc:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     fce:	6299      	str	r1, [r3, #40]	; 0x28
     fd0:	490e      	ldr	r1, [pc, #56]	; (100c <USB_0_PORT_init+0x84>)
     fd2:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     fd4:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     fd6:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
     fda:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     fde:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     fe2:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
     fe6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     fea:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     fee:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     ff2:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     ff6:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     ffa:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    1002:	4770      	bx	lr
    1004:	41008000 	.word	0x41008000
    1008:	c0000100 	.word	0xc0000100
    100c:	c0000200 	.word	0xc0000200

00001010 <USB_0_CLOCK_init>:
    1010:	2240      	movs	r2, #64	; 0x40
    1012:	4b07      	ldr	r3, [pc, #28]	; (1030 <USB_0_CLOCK_init+0x20>)
    1014:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
    1018:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
    101c:	691a      	ldr	r2, [r3, #16]
    101e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    1022:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
    1024:	699a      	ldr	r2, [r3, #24]
    1026:	f042 0201 	orr.w	r2, r2, #1
    102a:	619a      	str	r2, [r3, #24]
    102c:	4770      	bx	lr
    102e:	bf00      	nop
    1030:	40001c00 	.word	0x40001c00

00001034 <USB_0_init>:
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}

void USB_0_init(void)
{
    1034:	b508      	push	{r3, lr}
	USB_0_CLOCK_init();
    1036:	4b03      	ldr	r3, [pc, #12]	; (1044 <USB_0_init+0x10>)
    1038:	4798      	blx	r3
	usb_d_init();
    103a:	4b03      	ldr	r3, [pc, #12]	; (1048 <USB_0_init+0x14>)
    103c:	4798      	blx	r3
	USB_0_PORT_init();
    103e:	4b03      	ldr	r3, [pc, #12]	; (104c <USB_0_init+0x18>)
    1040:	4798      	blx	r3
    1042:	bd08      	pop	{r3, pc}
    1044:	00001011 	.word	0x00001011
    1048:	000023e1 	.word	0x000023e1
    104c:	00000f89 	.word	0x00000f89

00001050 <WDT_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
    1050:	4a02      	ldr	r2, [pc, #8]	; (105c <WDT_0_CLOCK_init+0xc>)
    1052:	6953      	ldr	r3, [r2, #20]
    1054:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    1058:	6153      	str	r3, [r2, #20]
    105a:	4770      	bx	lr
    105c:	40000800 	.word	0x40000800

00001060 <WDT_0_init>:
{
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
}

void WDT_0_init(void)
{
    1060:	b508      	push	{r3, lr}
	WDT_0_CLOCK_init();
    1062:	4b06      	ldr	r3, [pc, #24]	; (107c <WDT_0_init+0x1c>)
    1064:	4798      	blx	r3
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
	ASSERT(wdt && hw);
    1066:	2248      	movs	r2, #72	; 0x48
    1068:	4905      	ldr	r1, [pc, #20]	; (1080 <WDT_0_init+0x20>)
    106a:	2001      	movs	r0, #1
    106c:	4b05      	ldr	r3, [pc, #20]	; (1084 <WDT_0_init+0x24>)
    106e:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    1070:	4805      	ldr	r0, [pc, #20]	; (1088 <WDT_0_init+0x28>)
    1072:	4b06      	ldr	r3, [pc, #24]	; (108c <WDT_0_init+0x2c>)
    1074:	6003      	str	r3, [r0, #0]

	return _wdt_init(&wdt->dev);
    1076:	4b06      	ldr	r3, [pc, #24]	; (1090 <WDT_0_init+0x30>)
    1078:	4798      	blx	r3
    107a:	bd08      	pop	{r3, pc}
    107c:	00001051 	.word	0x00001051
    1080:	0000ee70 	.word	0x0000ee70
    1084:	0000272d 	.word	0x0000272d
    1088:	20007474 	.word	0x20007474
    108c:	40002000 	.word	0x40002000
    1090:	000052f1 	.word	0x000052f1

00001094 <ETHERNET_MAC_0_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1094:	4b90      	ldr	r3, [pc, #576]	; (12d8 <ETHERNET_MAC_0_PORT_init+0x244>)
    1096:	f893 2155 	ldrb.w	r2, [r3, #341]	; 0x155
	tmp &= ~PORT_PINCFG_PMUXEN;
    109a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    109e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    10a2:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    10a6:	f893 213a 	ldrb.w	r2, [r3, #314]	; 0x13a
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    10aa:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    10ae:	f042 02b0 	orr.w	r2, r2, #176	; 0xb0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    10b2:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    10b6:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
	tmp &= ~PORT_PINCFG_PMUXEN;
    10ba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    10be:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    10c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    10c6:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    10ca:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    10ce:	f042 020b 	orr.w	r2, r2, #11
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    10d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    10d6:	f893 214b 	ldrb.w	r2, [r3, #331]	; 0x14b
	tmp &= ~PORT_PINCFG_PMUXEN;
    10da:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    10de:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    10e2:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    10e6:	f893 2135 	ldrb.w	r2, [r3, #309]	; 0x135
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    10ea:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    10ee:	f042 02b0 	orr.w	r2, r2, #176	; 0xb0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    10f2:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    10f6:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
	tmp &= ~PORT_PINCFG_PMUXEN;
    10fa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    10fe:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1102:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1106:	f893 2136 	ldrb.w	r2, [r3, #310]	; 0x136
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    110a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    110e:	f042 020b 	orr.w	r2, r2, #11
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1112:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1116:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
	tmp &= ~PORT_PINCFG_PMUXEN;
    111a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    111e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1122:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1126:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    112a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    112e:	f042 02b0 	orr.w	r2, r2, #176	; 0xb0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1132:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1136:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
	tmp &= ~PORT_PINCFG_PMUXEN;
    113a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    113e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1142:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1146:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    114a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    114e:	f042 020b 	orr.w	r2, r2, #11
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1152:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1156:	f893 214f 	ldrb.w	r2, [r3, #335]	; 0x14f
	tmp &= ~PORT_PINCFG_PMUXEN;
    115a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    115e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1162:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1166:	f893 2137 	ldrb.w	r2, [r3, #311]	; 0x137
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    116a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    116e:	f042 02b0 	orr.w	r2, r2, #176	; 0xb0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1172:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1176:	f893 214e 	ldrb.w	r2, [r3, #334]	; 0x14e
	tmp &= ~PORT_PINCFG_PMUXEN;
    117a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    117e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1182:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1186:	f893 2137 	ldrb.w	r2, [r3, #311]	; 0x137
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    118a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    118e:	f042 020b 	orr.w	r2, r2, #11
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1192:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1196:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
    119a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    119e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    11a2:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    11a6:	f893 2139 	ldrb.w	r2, [r3, #313]	; 0x139
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    11aa:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    11ae:	f042 020b 	orr.w	r2, r2, #11
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    11b2:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    11b6:	f893 2154 	ldrb.w	r2, [r3, #340]	; 0x154
	tmp &= ~PORT_PINCFG_PMUXEN;
    11ba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    11be:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    11c2:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    11c6:	f893 213a 	ldrb.w	r2, [r3, #314]	; 0x13a
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    11ca:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    11ce:	f042 020b 	orr.w	r2, r2, #11
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    11d2:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    11d6:	f893 204f 	ldrb.w	r2, [r3, #79]	; 0x4f
	tmp &= ~PORT_PINCFG_PMUXEN;
    11da:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    11de:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    11e2:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    11e6:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    11ea:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    11ee:	f042 02b0 	orr.w	r2, r2, #176	; 0xb0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    11f2:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    11f6:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
	tmp &= ~PORT_PINCFG_PMUXEN;
    11fa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    11fe:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1202:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1206:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    120a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    120e:	f042 020b 	orr.w	r2, r2, #11
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1212:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1216:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
    121a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    121e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1222:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1226:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    122a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    122e:	f042 02b0 	orr.w	r2, r2, #176	; 0xb0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1232:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1236:	f893 2150 	ldrb.w	r2, [r3, #336]	; 0x150
	tmp &= ~PORT_PINCFG_PMUXEN;
    123a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    123e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1242:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1246:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    124a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    124e:	f042 020b 	orr.w	r2, r2, #11
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1252:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1256:	f893 2151 	ldrb.w	r2, [r3, #337]	; 0x151
	tmp &= ~PORT_PINCFG_PMUXEN;
    125a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    125e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1262:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1266:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    126a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    126e:	f042 02b0 	orr.w	r2, r2, #176	; 0xb0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1272:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1276:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
	tmp &= ~PORT_PINCFG_PMUXEN;
    127a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    127e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1282:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1286:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    128a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    128e:	f042 020b 	orr.w	r2, r2, #11
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1292:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1296:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
	tmp &= ~PORT_PINCFG_PMUXEN;
    129a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    129e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    12a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    12a6:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    12aa:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    12ae:	f042 02b0 	orr.w	r2, r2, #176	; 0xb0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    12b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    12b6:	f893 2153 	ldrb.w	r2, [r3, #339]	; 0x153
	tmp &= ~PORT_PINCFG_PMUXEN;
    12ba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    12be:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    12c2:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    12c6:	f893 2139 	ldrb.w	r2, [r3, #313]	; 0x139
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    12ca:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    12ce:	f042 02b0 	orr.w	r2, r2, #176	; 0xb0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    12d2:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
    12d6:	4770      	bx	lr
    12d8:	41008000 	.word	0x41008000

000012dc <ETHERNET_MAC_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_GMAC;
    12dc:	4b04      	ldr	r3, [pc, #16]	; (12f0 <ETHERNET_MAC_0_CLOCK_init+0x14>)
    12de:	691a      	ldr	r2, [r3, #16]
    12e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    12e4:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_GMAC;
    12e6:	69da      	ldr	r2, [r3, #28]
    12e8:	f042 0204 	orr.w	r2, r2, #4
    12ec:	61da      	str	r2, [r3, #28]
    12ee:	4770      	bx	lr
    12f0:	40000800 	.word	0x40000800

000012f4 <ETHERNET_MAC_0_init>:
	hri_mclk_set_AHBMASK_GMAC_bit(MCLK);
	hri_mclk_set_APBCMASK_GMAC_bit(MCLK);
}

void ETHERNET_MAC_0_init(void)
{
    12f4:	b508      	push	{r3, lr}
	ETHERNET_MAC_0_CLOCK_init();
    12f6:	4b04      	ldr	r3, [pc, #16]	; (1308 <ETHERNET_MAC_0_init+0x14>)
    12f8:	4798      	blx	r3
	mac_async_init(&ETHERNET_MAC_0, GMAC);
    12fa:	4904      	ldr	r1, [pc, #16]	; (130c <ETHERNET_MAC_0_init+0x18>)
    12fc:	4804      	ldr	r0, [pc, #16]	; (1310 <ETHERNET_MAC_0_init+0x1c>)
    12fe:	4b05      	ldr	r3, [pc, #20]	; (1314 <ETHERNET_MAC_0_init+0x20>)
    1300:	4798      	blx	r3
	ETHERNET_MAC_0_PORT_init();
    1302:	4b05      	ldr	r3, [pc, #20]	; (1318 <ETHERNET_MAC_0_init+0x24>)
    1304:	4798      	blx	r3
    1306:	bd08      	pop	{r3, pc}
    1308:	000012dd 	.word	0x000012dd
    130c:	42000800 	.word	0x42000800
    1310:	2000752c 	.word	0x2000752c
    1314:	0000190d 	.word	0x0000190d
    1318:	00001095 	.word	0x00001095

0000131c <system_init>:
	mac_async_enable(&ETHERNET_MAC_0);
	mac_async_write(&ETHERNET_MAC_0, (uint8_t *)"Hello World!", 12);
}

void system_init(void)
{
    131c:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
    131e:	4b15      	ldr	r3, [pc, #84]	; (1374 <system_init+0x58>)
    1320:	4798      	blx	r3
	init_mcu();
	ADC_0_init();
    1322:	4b15      	ldr	r3, [pc, #84]	; (1378 <system_init+0x5c>)
    1324:	4798      	blx	r3
	CRYPTOGRAPHY_0_init();
    1326:	4b15      	ldr	r3, [pc, #84]	; (137c <system_init+0x60>)
    1328:	4798      	blx	r3
	CRC_0_init();
    132a:	4b15      	ldr	r3, [pc, #84]	; (1380 <system_init+0x64>)
    132c:	4798      	blx	r3
	HASH_ALGORITHM_0_init();
    132e:	4b15      	ldr	r3, [pc, #84]	; (1384 <system_init+0x68>)
    1330:	4798      	blx	r3
	FLASH_0_init();
    1332:	4b15      	ldr	r3, [pc, #84]	; (1388 <system_init+0x6c>)
    1334:	4798      	blx	r3
	USART_0_init();
    1336:	4b15      	ldr	r3, [pc, #84]	; (138c <system_init+0x70>)
    1338:	4798      	blx	r3
	SPI_0_init();
    133a:	4b15      	ldr	r3, [pc, #84]	; (1390 <system_init+0x74>)
    133c:	4798      	blx	r3
	USART_1_init();
    133e:	4b15      	ldr	r3, [pc, #84]	; (1394 <system_init+0x78>)
    1340:	4798      	blx	r3
	delay_driver_init();
    1342:	4b15      	ldr	r3, [pc, #84]	; (1398 <system_init+0x7c>)
    1344:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    1346:	4a15      	ldr	r2, [pc, #84]	; (139c <system_init+0x80>)
    1348:	6953      	ldr	r3, [r2, #20]
    134a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    134e:	6153      	str	r3, [r2, #20]
    1350:	2240      	movs	r2, #64	; 0x40
    1352:	4b13      	ldr	r3, [pc, #76]	; (13a0 <system_init+0x84>)
    1354:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	timer_init(&TIMER_0, TC0, _tc_get_timer());
    1358:	4b12      	ldr	r3, [pc, #72]	; (13a4 <system_init+0x88>)
    135a:	4798      	blx	r3
    135c:	4602      	mov	r2, r0
    135e:	4912      	ldr	r1, [pc, #72]	; (13a8 <system_init+0x8c>)
    1360:	4812      	ldr	r0, [pc, #72]	; (13ac <system_init+0x90>)
    1362:	4b13      	ldr	r3, [pc, #76]	; (13b0 <system_init+0x94>)
    1364:	4798      	blx	r3
	TIMER_0_init();
	USB_0_init();
    1366:	4b13      	ldr	r3, [pc, #76]	; (13b4 <system_init+0x98>)
    1368:	4798      	blx	r3
	WDT_0_init();
    136a:	4b13      	ldr	r3, [pc, #76]	; (13b8 <system_init+0x9c>)
    136c:	4798      	blx	r3
	ETHERNET_MAC_0_init();
    136e:	4b13      	ldr	r3, [pc, #76]	; (13bc <system_init+0xa0>)
    1370:	4798      	blx	r3
    1372:	bd08      	pop	{r3, pc}
    1374:	00002a8d 	.word	0x00002a8d
    1378:	00000c41 	.word	0x00000c41
    137c:	00000c6d 	.word	0x00000c6d
    1380:	00000c95 	.word	0x00000c95
    1384:	00000cd5 	.word	0x00000cd5
    1388:	00000d05 	.word	0x00000d05
    138c:	00000d8d 	.word	0x00000d8d
    1390:	00000ead 	.word	0x00000ead
    1394:	00000f3d 	.word	0x00000f3d
    1398:	00000f75 	.word	0x00000f75
    139c:	40000800 	.word	0x40000800
    13a0:	40001c00 	.word	0x40001c00
    13a4:	00004033 	.word	0x00004033
    13a8:	40003800 	.word	0x40003800
    13ac:	20007548 	.word	0x20007548
    13b0:	00001d3d 	.word	0x00001d3d
    13b4:	00001035 	.word	0x00001035
    13b8:	00001061 	.word	0x00001061
    13bc:	000012f5 	.word	0x000012f5

000013c0 <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
    13c0:	b538      	push	{r3, r4, r5, lr}
    13c2:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    13c4:	4605      	mov	r5, r0
    13c6:	b158      	cbz	r0, 13e0 <adc_sync_init+0x20>
    13c8:	1c08      	adds	r0, r1, #0
    13ca:	bf18      	it	ne
    13cc:	2001      	movne	r0, #1
    13ce:	2239      	movs	r2, #57	; 0x39
    13d0:	4904      	ldr	r1, [pc, #16]	; (13e4 <adc_sync_init+0x24>)
    13d2:	4b05      	ldr	r3, [pc, #20]	; (13e8 <adc_sync_init+0x28>)
    13d4:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
    13d6:	4621      	mov	r1, r4
    13d8:	4628      	mov	r0, r5
    13da:	4b04      	ldr	r3, [pc, #16]	; (13ec <adc_sync_init+0x2c>)
    13dc:	4798      	blx	r3
}
    13de:	bd38      	pop	{r3, r4, r5, pc}
    13e0:	2000      	movs	r0, #0
    13e2:	e7f4      	b.n	13ce <adc_sync_init+0xe>
    13e4:	0000ee9c 	.word	0x0000ee9c
    13e8:	0000272d 	.word	0x0000272d
    13ec:	00002995 	.word	0x00002995

000013f0 <adc_sync_enable_channel>:

/**
 * \brief Enable ADC
 */
int32_t adc_sync_enable_channel(struct adc_sync_descriptor *const descr, const uint8_t channel)
{
    13f0:	b538      	push	{r3, r4, r5, lr}
    13f2:	460d      	mov	r5, r1
	ASSERT(descr);
    13f4:	4604      	mov	r4, r0
    13f6:	224e      	movs	r2, #78	; 0x4e
    13f8:	4905      	ldr	r1, [pc, #20]	; (1410 <adc_sync_enable_channel+0x20>)
    13fa:	3000      	adds	r0, #0
    13fc:	bf18      	it	ne
    13fe:	2001      	movne	r0, #1
    1400:	4b04      	ldr	r3, [pc, #16]	; (1414 <adc_sync_enable_channel+0x24>)
    1402:	4798      	blx	r3
	_adc_sync_enable_channel(&descr->device, channel);
    1404:	4629      	mov	r1, r5
    1406:	4620      	mov	r0, r4
    1408:	4b03      	ldr	r3, [pc, #12]	; (1418 <adc_sync_enable_channel+0x28>)
    140a:	4798      	blx	r3

	return ERR_NONE;
}
    140c:	2000      	movs	r0, #0
    140e:	bd38      	pop	{r3, r4, r5, pc}
    1410:	0000ee9c 	.word	0x0000ee9c
    1414:	0000272d 	.word	0x0000272d
    1418:	000029cd 	.word	0x000029cd

0000141c <adc_sync_read_channel>:
/*
 * \brief Read data from ADC
 */
int32_t adc_sync_read_channel(struct adc_sync_descriptor *const descr, const uint8_t channel, uint8_t *const buffer,
                              const uint16_t length)
{
    141c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1420:	460d      	mov	r5, r1
    1422:	4691      	mov	r9, r2
    1424:	469a      	mov	sl, r3
	uint8_t  data_size;
	uint16_t offset = 0;

	ASSERT(descr && buffer && length);
    1426:	4680      	mov	r8, r0
    1428:	b1e0      	cbz	r0, 1464 <adc_sync_read_channel+0x48>
    142a:	b1ea      	cbz	r2, 1468 <adc_sync_read_channel+0x4c>
    142c:	1c18      	adds	r0, r3, #0
    142e:	bf18      	it	ne
    1430:	2001      	movne	r0, #1
    1432:	4f1c      	ldr	r7, [pc, #112]	; (14a4 <adc_sync_read_channel+0x88>)
    1434:	2267      	movs	r2, #103	; 0x67
    1436:	4639      	mov	r1, r7
    1438:	4e1b      	ldr	r6, [pc, #108]	; (14a8 <adc_sync_read_channel+0x8c>)
    143a:	47b0      	blx	r6
	data_size = _adc_sync_get_data_size(&descr->device);
    143c:	4644      	mov	r4, r8
    143e:	4640      	mov	r0, r8
    1440:	4b1a      	ldr	r3, [pc, #104]	; (14ac <adc_sync_read_channel+0x90>)
    1442:	4798      	blx	r3
    1444:	4680      	mov	r8, r0
	ASSERT(!(length % data_size));
    1446:	fb9a f0f0 	sdiv	r0, sl, r0
    144a:	fb08 a010 	mls	r0, r8, r0, sl
    144e:	2269      	movs	r2, #105	; 0x69
    1450:	4639      	mov	r1, r7
    1452:	fab0 f080 	clz	r0, r0
    1456:	0940      	lsrs	r0, r0, #5
    1458:	47b0      	blx	r6
	uint16_t offset = 0;
    145a:	2700      	movs	r7, #0

	do {
		uint16_t result;
		_adc_sync_convert(&descr->device);
    145c:	f8df b058 	ldr.w	fp, [pc, #88]	; 14b8 <adc_sync_read_channel+0x9c>

		while (!_adc_sync_is_channel_conversion_done(&descr->device, channel))
    1460:	4e13      	ldr	r6, [pc, #76]	; (14b0 <adc_sync_read_channel+0x94>)
    1462:	e007      	b.n	1474 <adc_sync_read_channel+0x58>
	ASSERT(descr && buffer && length);
    1464:	2000      	movs	r0, #0
    1466:	e7e4      	b.n	1432 <adc_sync_read_channel+0x16>
    1468:	2000      	movs	r0, #0
    146a:	e7e2      	b.n	1432 <adc_sync_read_channel+0x16>
    146c:	4447      	add	r7, r8
    146e:	b2bf      	uxth	r7, r7
		buffer[offset] = result;
		if (1 < data_size) {
			buffer[offset + 1] = result >> 8;
		}
		offset += data_size;
	} while (offset < length);
    1470:	45ba      	cmp	sl, r7
    1472:	d914      	bls.n	149e <adc_sync_read_channel+0x82>
		_adc_sync_convert(&descr->device);
    1474:	4620      	mov	r0, r4
    1476:	47d8      	blx	fp
		while (!_adc_sync_is_channel_conversion_done(&descr->device, channel))
    1478:	4629      	mov	r1, r5
    147a:	4620      	mov	r0, r4
    147c:	47b0      	blx	r6
    147e:	2800      	cmp	r0, #0
    1480:	d0fa      	beq.n	1478 <adc_sync_read_channel+0x5c>
		result         = _adc_sync_read_channel_data(&descr->device, channel);
    1482:	4629      	mov	r1, r5
    1484:	4620      	mov	r0, r4
    1486:	4b0b      	ldr	r3, [pc, #44]	; (14b4 <adc_sync_read_channel+0x98>)
    1488:	4798      	blx	r3
		buffer[offset] = result;
    148a:	f809 0007 	strb.w	r0, [r9, r7]
		if (1 < data_size) {
    148e:	f1b8 0f01 	cmp.w	r8, #1
    1492:	d9eb      	bls.n	146c <adc_sync_read_channel+0x50>
			buffer[offset + 1] = result >> 8;
    1494:	eb09 0307 	add.w	r3, r9, r7
    1498:	0a00      	lsrs	r0, r0, #8
    149a:	7058      	strb	r0, [r3, #1]
    149c:	e7e6      	b.n	146c <adc_sync_read_channel+0x50>

	return offset;
}
    149e:	4638      	mov	r0, r7
    14a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    14a4:	0000ee9c 	.word	0x0000ee9c
    14a8:	0000272d 	.word	0x0000272d
    14ac:	000029e3 	.word	0x000029e3
    14b0:	000029f5 	.word	0x000029f5
    14b4:	00002a17 	.word	0x00002a17
    14b8:	00002a01 	.word	0x00002a01

000014bc <aes_sync_init>:
                                                          uint8_t *iv, uint32_t *iv_ofst);
/**
 * \brief Initialize AES.
 */
int32_t aes_sync_init(struct aes_sync_descriptor *descr, void *const hw)
{
    14bc:	b538      	push	{r3, r4, r5, lr}
    14be:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    14c0:	4605      	mov	r5, r0
    14c2:	b158      	cbz	r0, 14dc <aes_sync_init+0x20>
    14c4:	1c08      	adds	r0, r1, #0
    14c6:	bf18      	it	ne
    14c8:	2001      	movne	r0, #1
    14ca:	2232      	movs	r2, #50	; 0x32
    14cc:	4904      	ldr	r1, [pc, #16]	; (14e0 <aes_sync_init+0x24>)
    14ce:	4b05      	ldr	r3, [pc, #20]	; (14e4 <aes_sync_init+0x28>)
    14d0:	4798      	blx	r3

	return _aes_sync_init(&descr->dev, hw);
    14d2:	4621      	mov	r1, r4
    14d4:	4628      	mov	r0, r5
    14d6:	4b04      	ldr	r3, [pc, #16]	; (14e8 <aes_sync_init+0x2c>)
    14d8:	4798      	blx	r3
}
    14da:	bd38      	pop	{r3, r4, r5, pc}
    14dc:	2000      	movs	r0, #0
    14de:	e7f4      	b.n	14ca <aes_sync_init+0xe>
    14e0:	0000eeb8 	.word	0x0000eeb8
    14e4:	0000272d 	.word	0x0000272d
    14e8:	00002a21 	.word	0x00002a21

000014ec <aes_sync_enable>:

/**
 * \brief Enable AES
 */
int32_t aes_sync_enable(struct aes_sync_descriptor *descr)
{
    14ec:	b510      	push	{r4, lr}
	ASSERT(descr);
    14ee:	4604      	mov	r4, r0
    14f0:	2246      	movs	r2, #70	; 0x46
    14f2:	4905      	ldr	r1, [pc, #20]	; (1508 <aes_sync_enable+0x1c>)
    14f4:	3000      	adds	r0, #0
    14f6:	bf18      	it	ne
    14f8:	2001      	movne	r0, #1
    14fa:	4b04      	ldr	r3, [pc, #16]	; (150c <aes_sync_enable+0x20>)
    14fc:	4798      	blx	r3

	return _aes_sync_enable(&descr->dev);
    14fe:	4620      	mov	r0, r4
    1500:	4b03      	ldr	r3, [pc, #12]	; (1510 <aes_sync_enable+0x24>)
    1502:	4798      	blx	r3
}
    1504:	bd10      	pop	{r4, pc}
    1506:	bf00      	nop
    1508:	0000eeb8 	.word	0x0000eeb8
    150c:	0000272d 	.word	0x0000272d
    1510:	00002a31 	.word	0x00002a31

00001514 <aes_sync_set_encrypt_key>:

/**
 * \brief              Set AES Key (encryption)
 */
int32_t aes_sync_set_encrypt_key(struct aes_sync_descriptor *descr, const uint8_t *key, const enum aes_keysize size)
{
    1514:	b570      	push	{r4, r5, r6, lr}
    1516:	460c      	mov	r4, r1
    1518:	4616      	mov	r6, r2
	ASSERT(descr && key);
    151a:	4605      	mov	r5, r0
    151c:	b160      	cbz	r0, 1538 <aes_sync_set_encrypt_key+0x24>
    151e:	1c08      	adds	r0, r1, #0
    1520:	bf18      	it	ne
    1522:	2001      	movne	r0, #1
    1524:	225a      	movs	r2, #90	; 0x5a
    1526:	4905      	ldr	r1, [pc, #20]	; (153c <aes_sync_set_encrypt_key+0x28>)
    1528:	4b05      	ldr	r3, [pc, #20]	; (1540 <aes_sync_set_encrypt_key+0x2c>)
    152a:	4798      	blx	r3
	return _aes_sync_set_key(&descr->dev, key, size);
    152c:	4632      	mov	r2, r6
    152e:	4621      	mov	r1, r4
    1530:	4628      	mov	r0, r5
    1532:	4b04      	ldr	r3, [pc, #16]	; (1544 <aes_sync_set_encrypt_key+0x30>)
    1534:	4798      	blx	r3
}
    1536:	bd70      	pop	{r4, r5, r6, pc}
    1538:	2000      	movs	r0, #0
    153a:	e7f3      	b.n	1524 <aes_sync_set_encrypt_key+0x10>
    153c:	0000eeb8 	.word	0x0000eeb8
    1540:	0000272d 	.word	0x0000272d
    1544:	00002a35 	.word	0x00002a35

00001548 <atomic_enter_critical>:
 */
__attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1548:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    154c:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    154e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1550:	f3bf 8f5f 	dmb	sy
    1554:	4770      	bx	lr

00001556 <atomic_leave_critical>:
    1556:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    155a:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    155c:	f383 8810 	msr	PRIMASK, r3
    1560:	4770      	bx	lr
	...

00001564 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    1564:	b538      	push	{r3, r4, r5, lr}
    1566:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    1568:	4605      	mov	r5, r0
    156a:	b158      	cbz	r0, 1584 <crc_sync_init+0x20>
    156c:	1c08      	adds	r0, r1, #0
    156e:	bf18      	it	ne
    1570:	2001      	movne	r0, #1
    1572:	222b      	movs	r2, #43	; 0x2b
    1574:	4904      	ldr	r1, [pc, #16]	; (1588 <crc_sync_init+0x24>)
    1576:	4b05      	ldr	r3, [pc, #20]	; (158c <crc_sync_init+0x28>)
    1578:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    157a:	4621      	mov	r1, r4
    157c:	4628      	mov	r0, r5
    157e:	4b04      	ldr	r3, [pc, #16]	; (1590 <crc_sync_init+0x2c>)
    1580:	4798      	blx	r3
}
    1582:	bd38      	pop	{r3, r4, r5, pc}
    1584:	2000      	movs	r0, #0
    1586:	e7f4      	b.n	1572 <crc_sync_init+0xe>
    1588:	0000eed4 	.word	0x0000eed4
    158c:	0000272d 	.word	0x0000272d
    1590:	00002d49 	.word	0x00002d49

00001594 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    1594:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
    1596:	4b02      	ldr	r3, [pc, #8]	; (15a0 <delay_init+0xc>)
    1598:	6018      	str	r0, [r3, #0]
    159a:	4b02      	ldr	r3, [pc, #8]	; (15a4 <delay_init+0x10>)
    159c:	4798      	blx	r3
    159e:	bd08      	pop	{r3, pc}
    15a0:	20000330 	.word	0x20000330
    15a4:	00003df9 	.word	0x00003df9

000015a8 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    15a8:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
    15aa:	4b04      	ldr	r3, [pc, #16]	; (15bc <delay_us+0x14>)
    15ac:	681c      	ldr	r4, [r3, #0]
    15ae:	4b04      	ldr	r3, [pc, #16]	; (15c0 <delay_us+0x18>)
    15b0:	4798      	blx	r3
    15b2:	4601      	mov	r1, r0
    15b4:	4620      	mov	r0, r4
    15b6:	4b03      	ldr	r3, [pc, #12]	; (15c4 <delay_us+0x1c>)
    15b8:	4798      	blx	r3
    15ba:	bd10      	pop	{r4, pc}
    15bc:	20000330 	.word	0x20000330
    15c0:	00002a69 	.word	0x00002a69
    15c4:	00003e0d 	.word	0x00003e0d

000015c8 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    15c8:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    15ca:	4b04      	ldr	r3, [pc, #16]	; (15dc <delay_ms+0x14>)
    15cc:	681c      	ldr	r4, [r3, #0]
    15ce:	4b04      	ldr	r3, [pc, #16]	; (15e0 <delay_ms+0x18>)
    15d0:	4798      	blx	r3
    15d2:	4601      	mov	r1, r0
    15d4:	4620      	mov	r0, r4
    15d6:	4b03      	ldr	r3, [pc, #12]	; (15e4 <delay_ms+0x1c>)
    15d8:	4798      	blx	r3
    15da:	bd10      	pop	{r4, pc}
    15dc:	20000330 	.word	0x20000330
    15e0:	00002a81 	.word	0x00002a81
    15e4:	00003e0d 	.word	0x00003e0d

000015e8 <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
    15e8:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
    15ea:	6943      	ldr	r3, [r0, #20]
    15ec:	b103      	cbz	r3, 15f0 <flash_ready+0x8>
		descr->callbacks.cb_ready(descr);
    15ee:	4798      	blx	r3
    15f0:	bd08      	pop	{r3, pc}

000015f2 <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
    15f2:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
    15f4:	6983      	ldr	r3, [r0, #24]
    15f6:	b103      	cbz	r3, 15fa <flash_error+0x8>
		descr->callbacks.cb_error(descr);
    15f8:	4798      	blx	r3
    15fa:	bd08      	pop	{r3, pc}

000015fc <flash_is_address_aligned>:
{
    15fc:	b538      	push	{r3, r4, r5, lr}
    15fe:	460c      	mov	r4, r1
	ASSERT(flash);
    1600:	4605      	mov	r5, r0
    1602:	f240 1217 	movw	r2, #279	; 0x117
    1606:	4908      	ldr	r1, [pc, #32]	; (1628 <flash_is_address_aligned+0x2c>)
    1608:	3000      	adds	r0, #0
    160a:	bf18      	it	ne
    160c:	2001      	movne	r0, #1
    160e:	4b07      	ldr	r3, [pc, #28]	; (162c <flash_is_address_aligned+0x30>)
    1610:	4798      	blx	r3
	uint32_t page_size = _flash_get_page_size(&flash->dev);
    1612:	4628      	mov	r0, r5
    1614:	4b06      	ldr	r3, [pc, #24]	; (1630 <flash_is_address_aligned+0x34>)
    1616:	4798      	blx	r3
	if (flash_addr & (page_size - 1)) {
    1618:	3801      	subs	r0, #1
    161a:	4020      	ands	r0, r4
	return ERR_NONE;
    161c:	2800      	cmp	r0, #0
}
    161e:	bf14      	ite	ne
    1620:	f06f 000d 	mvnne.w	r0, #13
    1624:	2000      	moveq	r0, #0
    1626:	bd38      	pop	{r3, r4, r5, pc}
    1628:	0000eef0 	.word	0x0000eef0
    162c:	0000272d 	.word	0x0000272d
    1630:	00003351 	.word	0x00003351

00001634 <flash_init>:
{
    1634:	b538      	push	{r3, r4, r5, lr}
    1636:	460d      	mov	r5, r1
	ASSERT(flash && hw);
    1638:	4604      	mov	r4, r0
    163a:	b190      	cbz	r0, 1662 <flash_init+0x2e>
    163c:	1c08      	adds	r0, r1, #0
    163e:	bf18      	it	ne
    1640:	2001      	movne	r0, #1
    1642:	2238      	movs	r2, #56	; 0x38
    1644:	4908      	ldr	r1, [pc, #32]	; (1668 <flash_init+0x34>)
    1646:	4b09      	ldr	r3, [pc, #36]	; (166c <flash_init+0x38>)
    1648:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
    164a:	4629      	mov	r1, r5
    164c:	4620      	mov	r0, r4
    164e:	4b08      	ldr	r3, [pc, #32]	; (1670 <flash_init+0x3c>)
    1650:	4798      	blx	r3
	if (rc) {
    1652:	4603      	mov	r3, r0
    1654:	b918      	cbnz	r0, 165e <flash_init+0x2a>
	flash->dev.flash_cb.ready_cb = flash_ready;
    1656:	4a07      	ldr	r2, [pc, #28]	; (1674 <flash_init+0x40>)
    1658:	6022      	str	r2, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
    165a:	4a07      	ldr	r2, [pc, #28]	; (1678 <flash_init+0x44>)
    165c:	6062      	str	r2, [r4, #4]
}
    165e:	4618      	mov	r0, r3
    1660:	bd38      	pop	{r3, r4, r5, pc}
    1662:	2000      	movs	r0, #0
    1664:	e7ed      	b.n	1642 <flash_init+0xe>
    1666:	bf00      	nop
    1668:	0000eef0 	.word	0x0000eef0
    166c:	0000272d 	.word	0x0000272d
    1670:	000032d5 	.word	0x000032d5
    1674:	000015e9 	.word	0x000015e9
    1678:	000015f3 	.word	0x000015f3

0000167c <flash_read>:
{
    167c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1680:	460d      	mov	r5, r1
    1682:	4690      	mov	r8, r2
    1684:	461e      	mov	r6, r3
	ASSERT(flash && buffer && length);
    1686:	4604      	mov	r4, r0
    1688:	b1f0      	cbz	r0, 16c8 <flash_read+0x4c>
    168a:	b1fa      	cbz	r2, 16cc <flash_read+0x50>
    168c:	b343      	cbz	r3, 16e0 <flash_read+0x64>
    168e:	2001      	movs	r0, #1
    1690:	2256      	movs	r2, #86	; 0x56
    1692:	491e      	ldr	r1, [pc, #120]	; (170c <flash_read+0x90>)
    1694:	4b1e      	ldr	r3, [pc, #120]	; (1710 <flash_read+0x94>)
    1696:	4798      	blx	r3
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    1698:	46a1      	mov	r9, r4
    169a:	4620      	mov	r0, r4
    169c:	4b1d      	ldr	r3, [pc, #116]	; (1714 <flash_read+0x98>)
    169e:	4798      	blx	r3
    16a0:	4607      	mov	r7, r0
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    16a2:	4620      	mov	r0, r4
    16a4:	4b1c      	ldr	r3, [pc, #112]	; (1718 <flash_read+0x9c>)
    16a6:	4798      	blx	r3
	if ((src_addr > page_size * total_pages) || (src_addr + length > page_size * total_pages)) {
    16a8:	fb00 f007 	mul.w	r0, r0, r7
    16ac:	42a8      	cmp	r0, r5
    16ae:	d30f      	bcc.n	16d0 <flash_read+0x54>
    16b0:	1973      	adds	r3, r6, r5
    16b2:	4298      	cmp	r0, r3
    16b4:	d310      	bcc.n	16d8 <flash_read+0x5c>
	_flash_read(&flash->dev, src_addr, buffer, length);
    16b6:	4633      	mov	r3, r6
    16b8:	4642      	mov	r2, r8
    16ba:	4629      	mov	r1, r5
    16bc:	4648      	mov	r0, r9
    16be:	4c17      	ldr	r4, [pc, #92]	; (171c <flash_read+0xa0>)
    16c0:	47a0      	blx	r4
	return ERR_NONE;
    16c2:	2000      	movs	r0, #0
    16c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(flash && buffer && length);
    16c8:	2000      	movs	r0, #0
    16ca:	e7e1      	b.n	1690 <flash_read+0x14>
    16cc:	2000      	movs	r0, #0
    16ce:	e7df      	b.n	1690 <flash_read+0x14>
		return ERR_BAD_ADDRESS;
    16d0:	f06f 000d 	mvn.w	r0, #13
    16d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    16d8:	f06f 000d 	mvn.w	r0, #13
    16dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(flash && buffer && length);
    16e0:	2256      	movs	r2, #86	; 0x56
    16e2:	490a      	ldr	r1, [pc, #40]	; (170c <flash_read+0x90>)
    16e4:	2000      	movs	r0, #0
    16e6:	4b0a      	ldr	r3, [pc, #40]	; (1710 <flash_read+0x94>)
    16e8:	4798      	blx	r3
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    16ea:	46a1      	mov	r9, r4
    16ec:	4620      	mov	r0, r4
    16ee:	4b09      	ldr	r3, [pc, #36]	; (1714 <flash_read+0x98>)
    16f0:	4798      	blx	r3
    16f2:	4607      	mov	r7, r0
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    16f4:	4620      	mov	r0, r4
    16f6:	4b08      	ldr	r3, [pc, #32]	; (1718 <flash_read+0x9c>)
    16f8:	4798      	blx	r3
	if ((src_addr > page_size * total_pages) || (src_addr + length > page_size * total_pages)) {
    16fa:	fb00 f007 	mul.w	r0, r0, r7
    16fe:	4285      	cmp	r5, r0
    1700:	d9d9      	bls.n	16b6 <flash_read+0x3a>
		return ERR_BAD_ADDRESS;
    1702:	f06f 000d 	mvn.w	r0, #13
    1706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    170a:	bf00      	nop
    170c:	0000eef0 	.word	0x0000eef0
    1710:	0000272d 	.word	0x0000272d
    1714:	00003351 	.word	0x00003351
    1718:	00003357 	.word	0x00003357
    171c:	0000335f 	.word	0x0000335f

00001720 <flash_append>:
{
    1720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1724:	460c      	mov	r4, r1
    1726:	4691      	mov	r9, r2
    1728:	461f      	mov	r7, r3
	ASSERT(flash && buffer && length);
    172a:	4605      	mov	r5, r0
    172c:	b318      	cbz	r0, 1776 <flash_append+0x56>
    172e:	b322      	cbz	r2, 177a <flash_append+0x5a>
    1730:	b38b      	cbz	r3, 1796 <flash_append+0x76>
    1732:	2001      	movs	r0, #1
    1734:	2282      	movs	r2, #130	; 0x82
    1736:	4922      	ldr	r1, [pc, #136]	; (17c0 <flash_append+0xa0>)
    1738:	4b22      	ldr	r3, [pc, #136]	; (17c4 <flash_append+0xa4>)
    173a:	4798      	blx	r3
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    173c:	46a8      	mov	r8, r5
    173e:	4628      	mov	r0, r5
    1740:	4b21      	ldr	r3, [pc, #132]	; (17c8 <flash_append+0xa8>)
    1742:	4798      	blx	r3
    1744:	4606      	mov	r6, r0
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    1746:	4628      	mov	r0, r5
    1748:	4b20      	ldr	r3, [pc, #128]	; (17cc <flash_append+0xac>)
    174a:	4798      	blx	r3
	if ((dst_addr > page_size * total_pages) || (dst_addr + length > page_size * total_pages)) {
    174c:	fb00 f006 	mul.w	r0, r0, r6
    1750:	42a0      	cmp	r0, r4
    1752:	d314      	bcc.n	177e <flash_append+0x5e>
    1754:	193b      	adds	r3, r7, r4
    1756:	4298      	cmp	r0, r3
    1758:	d315      	bcc.n	1786 <flash_append+0x66>
	if (_flash_is_locked(&flash->dev, dst_addr)) {
    175a:	4621      	mov	r1, r4
    175c:	4640      	mov	r0, r8
    175e:	4b1c      	ldr	r3, [pc, #112]	; (17d0 <flash_append+0xb0>)
    1760:	4798      	blx	r3
    1762:	b9a0      	cbnz	r0, 178e <flash_append+0x6e>
	_flash_append(&flash->dev, dst_addr, buffer, length);
    1764:	463b      	mov	r3, r7
    1766:	464a      	mov	r2, r9
    1768:	4621      	mov	r1, r4
    176a:	4640      	mov	r0, r8
    176c:	4c19      	ldr	r4, [pc, #100]	; (17d4 <flash_append+0xb4>)
    176e:	47a0      	blx	r4
	return ERR_NONE;
    1770:	2000      	movs	r0, #0
    1772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(flash && buffer && length);
    1776:	2000      	movs	r0, #0
    1778:	e7dc      	b.n	1734 <flash_append+0x14>
    177a:	2000      	movs	r0, #0
    177c:	e7da      	b.n	1734 <flash_append+0x14>
		return ERR_BAD_ADDRESS;
    177e:	f06f 000d 	mvn.w	r0, #13
    1782:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1786:	f06f 000d 	mvn.w	r0, #13
    178a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ERR_DENIED;
    178e:	f06f 0010 	mvn.w	r0, #16
    1792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(flash && buffer && length);
    1796:	2282      	movs	r2, #130	; 0x82
    1798:	4909      	ldr	r1, [pc, #36]	; (17c0 <flash_append+0xa0>)
    179a:	2000      	movs	r0, #0
    179c:	4b09      	ldr	r3, [pc, #36]	; (17c4 <flash_append+0xa4>)
    179e:	4798      	blx	r3
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    17a0:	46a8      	mov	r8, r5
    17a2:	4628      	mov	r0, r5
    17a4:	4b08      	ldr	r3, [pc, #32]	; (17c8 <flash_append+0xa8>)
    17a6:	4798      	blx	r3
    17a8:	4606      	mov	r6, r0
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    17aa:	4628      	mov	r0, r5
    17ac:	4b07      	ldr	r3, [pc, #28]	; (17cc <flash_append+0xac>)
    17ae:	4798      	blx	r3
	if ((dst_addr > page_size * total_pages) || (dst_addr + length > page_size * total_pages)) {
    17b0:	fb00 f006 	mul.w	r0, r0, r6
    17b4:	4284      	cmp	r4, r0
    17b6:	d9d0      	bls.n	175a <flash_append+0x3a>
		return ERR_BAD_ADDRESS;
    17b8:	f06f 000d 	mvn.w	r0, #13
    17bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    17c0:	0000eef0 	.word	0x0000eef0
    17c4:	0000272d 	.word	0x0000272d
    17c8:	00003351 	.word	0x00003351
    17cc:	00003357 	.word	0x00003357
    17d0:	000035a1 	.word	0x000035a1
    17d4:	00003475 	.word	0x00003475

000017d8 <flash_erase>:
{
    17d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    17dc:	460f      	mov	r7, r1
    17de:	4616      	mov	r6, r2
	ASSERT(flash && page_nums);
    17e0:	4604      	mov	r4, r0
    17e2:	b320      	cbz	r0, 182e <flash_erase+0x56>
    17e4:	b35a      	cbz	r2, 183e <flash_erase+0x66>
    17e6:	2001      	movs	r0, #1
    17e8:	229a      	movs	r2, #154	; 0x9a
    17ea:	4920      	ldr	r1, [pc, #128]	; (186c <flash_erase+0x94>)
    17ec:	4b20      	ldr	r3, [pc, #128]	; (1870 <flash_erase+0x98>)
    17ee:	4798      	blx	r3
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    17f0:	46a1      	mov	r9, r4
    17f2:	4620      	mov	r0, r4
    17f4:	4b1f      	ldr	r3, [pc, #124]	; (1874 <flash_erase+0x9c>)
    17f6:	4798      	blx	r3
    17f8:	4605      	mov	r5, r0
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    17fa:	4620      	mov	r0, r4
    17fc:	4b1e      	ldr	r3, [pc, #120]	; (1878 <flash_erase+0xa0>)
    17fe:	4798      	blx	r3
    1800:	4680      	mov	r8, r0
	rc = flash_is_address_aligned(flash, dst_addr);
    1802:	4639      	mov	r1, r7
    1804:	4620      	mov	r0, r4
    1806:	4b1d      	ldr	r3, [pc, #116]	; (187c <flash_erase+0xa4>)
    1808:	4798      	blx	r3
	if (rc) {
    180a:	4603      	mov	r3, r0
    180c:	b960      	cbnz	r0, 1828 <flash_erase+0x50>
	if ((page_nums > total_pages) || (dst_addr / page_size + page_nums > total_pages)) {
    180e:	4546      	cmp	r6, r8
    1810:	d80f      	bhi.n	1832 <flash_erase+0x5a>
    1812:	fbb7 f5f5 	udiv	r5, r7, r5
    1816:	4435      	add	r5, r6
    1818:	4545      	cmp	r5, r8
    181a:	d80d      	bhi.n	1838 <flash_erase+0x60>
	_flash_erase(&flash->dev, dst_addr, page_nums);
    181c:	4632      	mov	r2, r6
    181e:	4639      	mov	r1, r7
    1820:	4648      	mov	r0, r9
    1822:	4b17      	ldr	r3, [pc, #92]	; (1880 <flash_erase+0xa8>)
    1824:	4798      	blx	r3
	return ERR_NONE;
    1826:	2300      	movs	r3, #0
}
    1828:	4618      	mov	r0, r3
    182a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(flash && page_nums);
    182e:	2000      	movs	r0, #0
    1830:	e7da      	b.n	17e8 <flash_erase+0x10>
		return ERR_INVALID_ARG;
    1832:	f06f 030c 	mvn.w	r3, #12
    1836:	e7f7      	b.n	1828 <flash_erase+0x50>
    1838:	f06f 030c 	mvn.w	r3, #12
    183c:	e7f4      	b.n	1828 <flash_erase+0x50>
	ASSERT(flash && page_nums);
    183e:	229a      	movs	r2, #154	; 0x9a
    1840:	490a      	ldr	r1, [pc, #40]	; (186c <flash_erase+0x94>)
    1842:	2000      	movs	r0, #0
    1844:	4b0a      	ldr	r3, [pc, #40]	; (1870 <flash_erase+0x98>)
    1846:	4798      	blx	r3
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    1848:	46a1      	mov	r9, r4
    184a:	4620      	mov	r0, r4
    184c:	4b09      	ldr	r3, [pc, #36]	; (1874 <flash_erase+0x9c>)
    184e:	4798      	blx	r3
    1850:	4605      	mov	r5, r0
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    1852:	4620      	mov	r0, r4
    1854:	4b08      	ldr	r3, [pc, #32]	; (1878 <flash_erase+0xa0>)
    1856:	4798      	blx	r3
    1858:	4680      	mov	r8, r0
	rc = flash_is_address_aligned(flash, dst_addr);
    185a:	4639      	mov	r1, r7
    185c:	4620      	mov	r0, r4
    185e:	4b07      	ldr	r3, [pc, #28]	; (187c <flash_erase+0xa4>)
    1860:	4798      	blx	r3
	if (rc) {
    1862:	4603      	mov	r3, r0
    1864:	2800      	cmp	r0, #0
    1866:	d0d4      	beq.n	1812 <flash_erase+0x3a>
    1868:	e7de      	b.n	1828 <flash_erase+0x50>
    186a:	bf00      	nop
    186c:	0000eef0 	.word	0x0000eef0
    1870:	0000272d 	.word	0x0000272d
    1874:	00003351 	.word	0x00003351
    1878:	00003357 	.word	0x00003357
    187c:	000015fd 	.word	0x000015fd
    1880:	000034dd 	.word	0x000034dd

00001884 <flash_get_page_size>:
{
    1884:	b510      	push	{r4, lr}
	ASSERT(flash);
    1886:	4604      	mov	r4, r0
    1888:	22f7      	movs	r2, #247	; 0xf7
    188a:	4905      	ldr	r1, [pc, #20]	; (18a0 <flash_get_page_size+0x1c>)
    188c:	3000      	adds	r0, #0
    188e:	bf18      	it	ne
    1890:	2001      	movne	r0, #1
    1892:	4b04      	ldr	r3, [pc, #16]	; (18a4 <flash_get_page_size+0x20>)
    1894:	4798      	blx	r3
	return _flash_get_page_size(&flash->dev);
    1896:	4620      	mov	r0, r4
    1898:	4b03      	ldr	r3, [pc, #12]	; (18a8 <flash_get_page_size+0x24>)
    189a:	4798      	blx	r3
}
    189c:	bd10      	pop	{r4, pc}
    189e:	bf00      	nop
    18a0:	0000eef0 	.word	0x0000eef0
    18a4:	0000272d 	.word	0x0000272d
    18a8:	00003351 	.word	0x00003351

000018ac <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    18ac:	b570      	push	{r4, r5, r6, lr}
    18ae:	460d      	mov	r5, r1
    18b0:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    18b2:	4604      	mov	r4, r0
    18b4:	b160      	cbz	r0, 18d0 <io_write+0x24>
    18b6:	1c08      	adds	r0, r1, #0
    18b8:	bf18      	it	ne
    18ba:	2001      	movne	r0, #1
    18bc:	2234      	movs	r2, #52	; 0x34
    18be:	4905      	ldr	r1, [pc, #20]	; (18d4 <io_write+0x28>)
    18c0:	4b05      	ldr	r3, [pc, #20]	; (18d8 <io_write+0x2c>)
    18c2:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    18c4:	6823      	ldr	r3, [r4, #0]
    18c6:	4632      	mov	r2, r6
    18c8:	4629      	mov	r1, r5
    18ca:	4620      	mov	r0, r4
    18cc:	4798      	blx	r3
}
    18ce:	bd70      	pop	{r4, r5, r6, pc}
    18d0:	2000      	movs	r0, #0
    18d2:	e7f3      	b.n	18bc <io_write+0x10>
    18d4:	0000ef08 	.word	0x0000ef08
    18d8:	0000272d 	.word	0x0000272d

000018dc <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    18dc:	b570      	push	{r4, r5, r6, lr}
    18de:	460d      	mov	r5, r1
    18e0:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    18e2:	4604      	mov	r4, r0
    18e4:	b160      	cbz	r0, 1900 <io_read+0x24>
    18e6:	1c08      	adds	r0, r1, #0
    18e8:	bf18      	it	ne
    18ea:	2001      	movne	r0, #1
    18ec:	223d      	movs	r2, #61	; 0x3d
    18ee:	4905      	ldr	r1, [pc, #20]	; (1904 <io_read+0x28>)
    18f0:	4b05      	ldr	r3, [pc, #20]	; (1908 <io_read+0x2c>)
    18f2:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    18f4:	6863      	ldr	r3, [r4, #4]
    18f6:	4632      	mov	r2, r6
    18f8:	4629      	mov	r1, r5
    18fa:	4620      	mov	r0, r4
    18fc:	4798      	blx	r3
}
    18fe:	bd70      	pop	{r4, r5, r6, pc}
    1900:	2000      	movs	r0, #0
    1902:	e7f3      	b.n	18ec <io_read+0x10>
    1904:	0000ef08 	.word	0x0000ef08
    1908:	0000272d 	.word	0x0000272d

0000190c <mac_async_init>:

/**
 * \brief Initialize the MAC driver
 */
int32_t mac_async_init(struct mac_async_descriptor *const descr, void *const hw)
{
    190c:	b538      	push	{r3, r4, r5, lr}
    190e:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    1910:	4605      	mov	r5, r0
    1912:	b158      	cbz	r0, 192c <mac_async_init+0x20>
    1914:	1c08      	adds	r0, r1, #0
    1916:	bf18      	it	ne
    1918:	2001      	movne	r0, #1
    191a:	2231      	movs	r2, #49	; 0x31
    191c:	4904      	ldr	r1, [pc, #16]	; (1930 <mac_async_init+0x24>)
    191e:	4b05      	ldr	r3, [pc, #20]	; (1934 <mac_async_init+0x28>)
    1920:	4798      	blx	r3

	return _mac_async_init(&descr->dev, hw);
    1922:	4621      	mov	r1, r4
    1924:	4628      	mov	r0, r5
    1926:	4b04      	ldr	r3, [pc, #16]	; (1938 <mac_async_init+0x2c>)
    1928:	4798      	blx	r3
}
    192a:	bd38      	pop	{r3, r4, r5, pc}
    192c:	2000      	movs	r0, #0
    192e:	e7f4      	b.n	191a <mac_async_init+0xe>
    1930:	0000ef1c 	.word	0x0000ef1c
    1934:	0000272d 	.word	0x0000272d
    1938:	00002dd5 	.word	0x00002dd5

0000193c <mac_async_enable>:

/**
 * \brief Enable the MAC
 */
int32_t mac_async_enable(struct mac_async_descriptor *const descr)
{
    193c:	b510      	push	{r4, lr}
	ASSERT(descr);
    193e:	4604      	mov	r4, r0
    1940:	2245      	movs	r2, #69	; 0x45
    1942:	4905      	ldr	r1, [pc, #20]	; (1958 <mac_async_enable+0x1c>)
    1944:	3000      	adds	r0, #0
    1946:	bf18      	it	ne
    1948:	2001      	movne	r0, #1
    194a:	4b04      	ldr	r3, [pc, #16]	; (195c <mac_async_enable+0x20>)
    194c:	4798      	blx	r3

	return _mac_async_enable(&descr->dev);
    194e:	4620      	mov	r0, r4
    1950:	4b03      	ldr	r3, [pc, #12]	; (1960 <mac_async_enable+0x24>)
    1952:	4798      	blx	r3
}
    1954:	bd10      	pop	{r4, pc}
    1956:	bf00      	nop
    1958:	0000ef1c 	.word	0x0000ef1c
    195c:	0000272d 	.word	0x0000272d
    1960:	00002ec5 	.word	0x00002ec5

00001964 <mac_async_write>:
}
/**
 * \brief Write raw data to MAC
 */
int32_t mac_async_write(struct mac_async_descriptor *const descr, uint8_t *buf, uint32_t len)
{
    1964:	b570      	push	{r4, r5, r6, lr}
    1966:	460c      	mov	r4, r1
    1968:	4615      	mov	r5, r2
	ASSERT(descr && buf && len);
    196a:	4606      	mov	r6, r0
    196c:	b168      	cbz	r0, 198a <mac_async_write+0x26>
    196e:	b171      	cbz	r1, 198e <mac_async_write+0x2a>
    1970:	1c10      	adds	r0, r2, #0
    1972:	bf18      	it	ne
    1974:	2001      	movne	r0, #1
    1976:	2257      	movs	r2, #87	; 0x57
    1978:	4906      	ldr	r1, [pc, #24]	; (1994 <mac_async_write+0x30>)
    197a:	4b07      	ldr	r3, [pc, #28]	; (1998 <mac_async_write+0x34>)
    197c:	4798      	blx	r3

	return _mac_async_write(&descr->dev, buf, len);
    197e:	462a      	mov	r2, r5
    1980:	4621      	mov	r1, r4
    1982:	4630      	mov	r0, r6
    1984:	4b05      	ldr	r3, [pc, #20]	; (199c <mac_async_write+0x38>)
    1986:	4798      	blx	r3
}
    1988:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && len);
    198a:	2000      	movs	r0, #0
    198c:	e7f3      	b.n	1976 <mac_async_write+0x12>
    198e:	2000      	movs	r0, #0
    1990:	e7f1      	b.n	1976 <mac_async_write+0x12>
    1992:	bf00      	nop
    1994:	0000ef1c 	.word	0x0000ef1c
    1998:	0000272d 	.word	0x0000272d
    199c:	00002ed5 	.word	0x00002ed5

000019a0 <mac_async_read>:

/**
 * \brief Read raw data from MAC
 */
uint32_t mac_async_read(struct mac_async_descriptor *const descr, uint8_t *buf, uint32_t len)
{
    19a0:	b570      	push	{r4, r5, r6, lr}
    19a2:	460d      	mov	r5, r1
    19a4:	4616      	mov	r6, r2
	ASSERT(descr);
    19a6:	4604      	mov	r4, r0
    19a8:	2261      	movs	r2, #97	; 0x61
    19aa:	4906      	ldr	r1, [pc, #24]	; (19c4 <mac_async_read+0x24>)
    19ac:	3000      	adds	r0, #0
    19ae:	bf18      	it	ne
    19b0:	2001      	movne	r0, #1
    19b2:	4b05      	ldr	r3, [pc, #20]	; (19c8 <mac_async_read+0x28>)
    19b4:	4798      	blx	r3

	return _mac_async_read(&descr->dev, buf, len);
    19b6:	4632      	mov	r2, r6
    19b8:	4629      	mov	r1, r5
    19ba:	4620      	mov	r0, r4
    19bc:	4b03      	ldr	r3, [pc, #12]	; (19cc <mac_async_read+0x2c>)
    19be:	4798      	blx	r3
}
    19c0:	bd70      	pop	{r4, r5, r6, pc}
    19c2:	bf00      	nop
    19c4:	0000ef1c 	.word	0x0000ef1c
    19c8:	0000272d 	.word	0x0000272d
    19cc:	0000304d 	.word	0x0000304d

000019d0 <mac_async_read_len>:

/**
 * \brief Get next valid package length
 */
uint32_t mac_async_read_len(struct mac_async_descriptor *const descr)
{
    19d0:	b510      	push	{r4, lr}
	ASSERT(descr);
    19d2:	4604      	mov	r4, r0
    19d4:	226b      	movs	r2, #107	; 0x6b
    19d6:	4905      	ldr	r1, [pc, #20]	; (19ec <mac_async_read_len+0x1c>)
    19d8:	3000      	adds	r0, #0
    19da:	bf18      	it	ne
    19dc:	2001      	movne	r0, #1
    19de:	4b04      	ldr	r3, [pc, #16]	; (19f0 <mac_async_read_len+0x20>)
    19e0:	4798      	blx	r3

	return _mac_async_read_len(&descr->dev);
    19e2:	4620      	mov	r0, r4
    19e4:	4b03      	ldr	r3, [pc, #12]	; (19f4 <mac_async_read_len+0x24>)
    19e6:	4798      	blx	r3
}
    19e8:	bd10      	pop	{r4, pc}
    19ea:	bf00      	nop
    19ec:	0000ef1c 	.word	0x0000ef1c
    19f0:	0000272d 	.word	0x0000272d
    19f4:	00003181 	.word	0x00003181

000019f8 <mac_async_set_filter_ex>:

/**
 * \brief Set MAC filter (expaneded)
 */
int32_t mac_async_set_filter_ex(struct mac_async_descriptor *const descr, uint8_t mac[6])
{
    19f8:	b538      	push	{r3, r4, r5, lr}
    19fa:	460c      	mov	r4, r1
	ASSERT(descr && mac);
    19fc:	4605      	mov	r5, r0
    19fe:	b158      	cbz	r0, 1a18 <mac_async_set_filter_ex+0x20>
    1a00:	1c08      	adds	r0, r1, #0
    1a02:	bf18      	it	ne
    1a04:	2001      	movne	r0, #1
    1a06:	22a5      	movs	r2, #165	; 0xa5
    1a08:	4904      	ldr	r1, [pc, #16]	; (1a1c <mac_async_set_filter_ex+0x24>)
    1a0a:	4b05      	ldr	r3, [pc, #20]	; (1a20 <mac_async_set_filter_ex+0x28>)
    1a0c:	4798      	blx	r3

	return _mac_async_set_filter_ex(&descr->dev, mac);
    1a0e:	4621      	mov	r1, r4
    1a10:	4628      	mov	r0, r5
    1a12:	4b04      	ldr	r3, [pc, #16]	; (1a24 <mac_async_set_filter_ex+0x2c>)
    1a14:	4798      	blx	r3
}
    1a16:	bd38      	pop	{r3, r4, r5, pc}
    1a18:	2000      	movs	r0, #0
    1a1a:	e7f4      	b.n	1a06 <mac_async_set_filter_ex+0xe>
    1a1c:	0000ef1c 	.word	0x0000ef1c
    1a20:	0000272d 	.word	0x0000272d
    1a24:	000031e9 	.word	0x000031e9

00001a28 <sha_sync_init>:

/**
 * \brief              Initialize SHA.
 */
int32_t sha_sync_init(struct sha_sync_descriptor *descr, void *const hw)
{
    1a28:	b538      	push	{r3, r4, r5, lr}
    1a2a:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    1a2c:	4605      	mov	r5, r0
    1a2e:	b158      	cbz	r0, 1a48 <sha_sync_init+0x20>
    1a30:	1c08      	adds	r0, r1, #0
    1a32:	bf18      	it	ne
    1a34:	2001      	movne	r0, #1
    1a36:	222c      	movs	r2, #44	; 0x2c
    1a38:	4904      	ldr	r1, [pc, #16]	; (1a4c <sha_sync_init+0x24>)
    1a3a:	4b05      	ldr	r3, [pc, #20]	; (1a50 <sha_sync_init+0x28>)
    1a3c:	4798      	blx	r3

	return _sha_sync_init(&descr->dev, hw);
    1a3e:	4621      	mov	r1, r4
    1a40:	4628      	mov	r0, r5
    1a42:	4b04      	ldr	r3, [pc, #16]	; (1a54 <sha_sync_init+0x2c>)
    1a44:	4798      	blx	r3
}
    1a46:	bd38      	pop	{r3, r4, r5, pc}
    1a48:	2000      	movs	r0, #0
    1a4a:	e7f4      	b.n	1a36 <sha_sync_init+0xe>
    1a4c:	0000ef38 	.word	0x0000ef38
    1a50:	0000272d 	.word	0x0000272d
    1a54:	00003253 	.word	0x00003253

00001a58 <spi_m_sync_init>:

static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length);
static int32_t _spi_m_sync_io_read(struct io_descriptor *const io, uint8_t *const buf, const uint16_t length);

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    1a58:	b538      	push	{r3, r4, r5, lr}
    1a5a:	460d      	mov	r5, r1
	int32_t rc = 0;

	ASSERT(spi && hw);
    1a5c:	4604      	mov	r4, r0
    1a5e:	b1b0      	cbz	r0, 1a8e <spi_m_sync_init+0x36>
    1a60:	1c08      	adds	r0, r1, #0
    1a62:	bf18      	it	ne
    1a64:	2001      	movne	r0, #1
    1a66:	2238      	movs	r2, #56	; 0x38
    1a68:	490a      	ldr	r1, [pc, #40]	; (1a94 <spi_m_sync_init+0x3c>)
    1a6a:	4b0b      	ldr	r3, [pc, #44]	; (1a98 <spi_m_sync_init+0x40>)
    1a6c:	4798      	blx	r3

	spi->dev.prvt = (void *)hw;
    1a6e:	6025      	str	r5, [r4, #0]

	rc = _spi_m_sync_init(&spi->dev, hw);
    1a70:	4629      	mov	r1, r5
    1a72:	4620      	mov	r0, r4
    1a74:	4b09      	ldr	r3, [pc, #36]	; (1a9c <spi_m_sync_init+0x44>)
    1a76:	4798      	blx	r3
	if (rc < 0) {
    1a78:	2800      	cmp	r0, #0
    1a7a:	db07      	blt.n	1a8c <spi_m_sync_init+0x34>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    1a7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    1a80:	8223      	strh	r3, [r4, #16]
	spi->io.read  = _spi_m_sync_io_read;
    1a82:	4b07      	ldr	r3, [pc, #28]	; (1aa0 <spi_m_sync_init+0x48>)
    1a84:	60e3      	str	r3, [r4, #12]
	spi->io.write = _spi_m_sync_io_write;
    1a86:	4b07      	ldr	r3, [pc, #28]	; (1aa4 <spi_m_sync_init+0x4c>)
    1a88:	60a3      	str	r3, [r4, #8]

	return ERR_NONE;
    1a8a:	2000      	movs	r0, #0
}
    1a8c:	bd38      	pop	{r3, r4, r5, pc}
    1a8e:	2000      	movs	r0, #0
    1a90:	e7e9      	b.n	1a66 <spi_m_sync_init+0xe>
    1a92:	bf00      	nop
    1a94:	0000ef54 	.word	0x0000ef54
    1a98:	0000272d 	.word	0x0000272d
    1a9c:	00003b39 	.word	0x00003b39
    1aa0:	00001bfd 	.word	0x00001bfd
    1aa4:	00001bc1 	.word	0x00001bc1

00001aa8 <spi_m_sync_enable>:

	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
    1aa8:	b510      	push	{r4, lr}
	ASSERT(spi);
    1aaa:	4604      	mov	r4, r0
    1aac:	2251      	movs	r2, #81	; 0x51
    1aae:	4905      	ldr	r1, [pc, #20]	; (1ac4 <spi_m_sync_enable+0x1c>)
    1ab0:	3000      	adds	r0, #0
    1ab2:	bf18      	it	ne
    1ab4:	2001      	movne	r0, #1
    1ab6:	4b04      	ldr	r3, [pc, #16]	; (1ac8 <spi_m_sync_enable+0x20>)
    1ab8:	4798      	blx	r3

	_spi_m_sync_enable(&spi->dev);
    1aba:	4620      	mov	r0, r4
    1abc:	4b03      	ldr	r3, [pc, #12]	; (1acc <spi_m_sync_enable+0x24>)
    1abe:	4798      	blx	r3
    1ac0:	bd10      	pop	{r4, pc}
    1ac2:	bf00      	nop
    1ac4:	0000ef54 	.word	0x0000ef54
    1ac8:	0000272d 	.word	0x0000272d
    1acc:	00003c0d 	.word	0x00003c0d

00001ad0 <spi_m_sync_set_baudrate>:

	_spi_m_sync_disable(&spi->dev);
}

int32_t spi_m_sync_set_baudrate(struct spi_m_sync_descriptor *spi, const uint32_t baud_val)
{
    1ad0:	b538      	push	{r3, r4, r5, lr}
    1ad2:	460d      	mov	r5, r1
	ASSERT(spi);
    1ad4:	4604      	mov	r4, r0
    1ad6:	225f      	movs	r2, #95	; 0x5f
    1ad8:	4905      	ldr	r1, [pc, #20]	; (1af0 <spi_m_sync_set_baudrate+0x20>)
    1ada:	3000      	adds	r0, #0
    1adc:	bf18      	it	ne
    1ade:	2001      	movne	r0, #1
    1ae0:	4b04      	ldr	r3, [pc, #16]	; (1af4 <spi_m_sync_set_baudrate+0x24>)
    1ae2:	4798      	blx	r3

	return _spi_m_sync_set_baudrate(&spi->dev, baud_val);
    1ae4:	4629      	mov	r1, r5
    1ae6:	4620      	mov	r0, r4
    1ae8:	4b03      	ldr	r3, [pc, #12]	; (1af8 <spi_m_sync_set_baudrate+0x28>)
    1aea:	4798      	blx	r3
}
    1aec:	bd38      	pop	{r3, r4, r5, pc}
    1aee:	bf00      	nop
    1af0:	0000ef54 	.word	0x0000ef54
    1af4:	0000272d 	.word	0x0000272d
    1af8:	00003c71 	.word	0x00003c71

00001afc <spi_m_sync_set_mode>:

int32_t spi_m_sync_set_mode(struct spi_m_sync_descriptor *spi, const enum spi_transfer_mode mode)
{
    1afc:	b538      	push	{r3, r4, r5, lr}
    1afe:	460d      	mov	r5, r1
	ASSERT(spi);
    1b00:	4604      	mov	r4, r0
    1b02:	2266      	movs	r2, #102	; 0x66
    1b04:	4905      	ldr	r1, [pc, #20]	; (1b1c <spi_m_sync_set_mode+0x20>)
    1b06:	3000      	adds	r0, #0
    1b08:	bf18      	it	ne
    1b0a:	2001      	movne	r0, #1
    1b0c:	4b04      	ldr	r3, [pc, #16]	; (1b20 <spi_m_sync_set_mode+0x24>)
    1b0e:	4798      	blx	r3

	return _spi_m_sync_set_mode(&spi->dev, mode);
    1b10:	4629      	mov	r1, r5
    1b12:	4620      	mov	r0, r4
    1b14:	4b03      	ldr	r3, [pc, #12]	; (1b24 <spi_m_sync_set_mode+0x28>)
    1b16:	4798      	blx	r3
}
    1b18:	bd38      	pop	{r3, r4, r5, pc}
    1b1a:	bf00      	nop
    1b1c:	0000ef54 	.word	0x0000ef54
    1b20:	0000272d 	.word	0x0000272d
    1b24:	00003c3d 	.word	0x00003c3d

00001b28 <spi_m_sync_set_char_size>:

int32_t spi_m_sync_set_char_size(struct spi_m_sync_descriptor *spi, const enum spi_char_size char_size)
{
    1b28:	b538      	push	{r3, r4, r5, lr}
    1b2a:	460d      	mov	r5, r1
	ASSERT(spi);
    1b2c:	4604      	mov	r4, r0
    1b2e:	226d      	movs	r2, #109	; 0x6d
    1b30:	4905      	ldr	r1, [pc, #20]	; (1b48 <spi_m_sync_set_char_size+0x20>)
    1b32:	3000      	adds	r0, #0
    1b34:	bf18      	it	ne
    1b36:	2001      	movne	r0, #1
    1b38:	4b04      	ldr	r3, [pc, #16]	; (1b4c <spi_m_sync_set_char_size+0x24>)
    1b3a:	4798      	blx	r3

	return _spi_m_sync_set_char_size(&spi->dev, char_size);
    1b3c:	4629      	mov	r1, r5
    1b3e:	4620      	mov	r0, r4
    1b40:	4b03      	ldr	r3, [pc, #12]	; (1b50 <spi_m_sync_set_char_size+0x28>)
    1b42:	4798      	blx	r3
}
    1b44:	bd38      	pop	{r3, r4, r5, pc}
    1b46:	bf00      	nop
    1b48:	0000ef54 	.word	0x0000ef54
    1b4c:	0000272d 	.word	0x0000272d
    1b50:	00003cad 	.word	0x00003cad

00001b54 <spi_m_sync_set_data_order>:

int32_t spi_m_sync_set_data_order(struct spi_m_sync_descriptor *spi, const enum spi_data_order dord)
{
    1b54:	b538      	push	{r3, r4, r5, lr}
    1b56:	460d      	mov	r5, r1
	ASSERT(spi);
    1b58:	4604      	mov	r4, r0
    1b5a:	2274      	movs	r2, #116	; 0x74
    1b5c:	4905      	ldr	r1, [pc, #20]	; (1b74 <spi_m_sync_set_data_order+0x20>)
    1b5e:	3000      	adds	r0, #0
    1b60:	bf18      	it	ne
    1b62:	2001      	movne	r0, #1
    1b64:	4b04      	ldr	r3, [pc, #16]	; (1b78 <spi_m_sync_set_data_order+0x24>)
    1b66:	4798      	blx	r3

	return _spi_m_sync_set_data_order(&spi->dev, dord);
    1b68:	4629      	mov	r1, r5
    1b6a:	4620      	mov	r0, r4
    1b6c:	4b03      	ldr	r3, [pc, #12]	; (1b7c <spi_m_sync_set_data_order+0x28>)
    1b6e:	4798      	blx	r3
}
    1b70:	bd38      	pop	{r3, r4, r5, pc}
    1b72:	bf00      	nop
    1b74:	0000ef54 	.word	0x0000ef54
    1b78:	0000272d 	.word	0x0000272d
    1b7c:	00003ce5 	.word	0x00003ce5

00001b80 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    1b80:	b530      	push	{r4, r5, lr}
    1b82:	b085      	sub	sp, #20
    1b84:	460c      	mov	r4, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    1b86:	4605      	mov	r5, r0
    1b88:	b190      	cbz	r0, 1bb0 <spi_m_sync_transfer+0x30>
    1b8a:	1c08      	adds	r0, r1, #0
    1b8c:	bf18      	it	ne
    1b8e:	2001      	movne	r0, #1
    1b90:	22b3      	movs	r2, #179	; 0xb3
    1b92:	4908      	ldr	r1, [pc, #32]	; (1bb4 <spi_m_sync_transfer+0x34>)
    1b94:	4b08      	ldr	r3, [pc, #32]	; (1bb8 <spi_m_sync_transfer+0x38>)
    1b96:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    1b98:	6823      	ldr	r3, [r4, #0]
    1b9a:	9301      	str	r3, [sp, #4]
	msg.rxbuf = p_xfer->rxbuf;
    1b9c:	6863      	ldr	r3, [r4, #4]
    1b9e:	9302      	str	r3, [sp, #8]
	msg.size  = p_xfer->size;
    1ba0:	68a3      	ldr	r3, [r4, #8]
    1ba2:	9303      	str	r3, [sp, #12]

	return _spi_m_sync_trans(&spi->dev, &msg);
    1ba4:	a901      	add	r1, sp, #4
    1ba6:	4628      	mov	r0, r5
    1ba8:	4b04      	ldr	r3, [pc, #16]	; (1bbc <spi_m_sync_transfer+0x3c>)
    1baa:	4798      	blx	r3
}
    1bac:	b005      	add	sp, #20
    1bae:	bd30      	pop	{r4, r5, pc}
    1bb0:	2000      	movs	r0, #0
    1bb2:	e7ed      	b.n	1b90 <spi_m_sync_transfer+0x10>
    1bb4:	0000ef54 	.word	0x0000ef54
    1bb8:	0000272d 	.word	0x0000272d
    1bbc:	00003d19 	.word	0x00003d19

00001bc0 <_spi_m_sync_io_write>:
{
    1bc0:	b570      	push	{r4, r5, r6, lr}
    1bc2:	b084      	sub	sp, #16
    1bc4:	460e      	mov	r6, r1
    1bc6:	4615      	mov	r5, r2
	ASSERT(io);
    1bc8:	4604      	mov	r4, r0
    1bca:	22a3      	movs	r2, #163	; 0xa3
    1bcc:	4908      	ldr	r1, [pc, #32]	; (1bf0 <_spi_m_sync_io_write+0x30>)
    1bce:	3000      	adds	r0, #0
    1bd0:	bf18      	it	ne
    1bd2:	2001      	movne	r0, #1
    1bd4:	4b07      	ldr	r3, [pc, #28]	; (1bf4 <_spi_m_sync_io_write+0x34>)
    1bd6:	4798      	blx	r3
	xfer.rxbuf = 0;
    1bd8:	2300      	movs	r3, #0
    1bda:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
    1bdc:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
    1bde:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    1be0:	a901      	add	r1, sp, #4
    1be2:	f1a4 0008 	sub.w	r0, r4, #8
    1be6:	4b04      	ldr	r3, [pc, #16]	; (1bf8 <_spi_m_sync_io_write+0x38>)
    1be8:	4798      	blx	r3
}
    1bea:	b004      	add	sp, #16
    1bec:	bd70      	pop	{r4, r5, r6, pc}
    1bee:	bf00      	nop
    1bf0:	0000ef54 	.word	0x0000ef54
    1bf4:	0000272d 	.word	0x0000272d
    1bf8:	00001b81 	.word	0x00001b81

00001bfc <_spi_m_sync_io_read>:
{
    1bfc:	b570      	push	{r4, r5, r6, lr}
    1bfe:	b084      	sub	sp, #16
    1c00:	460e      	mov	r6, r1
    1c02:	4615      	mov	r5, r2
	ASSERT(io);
    1c04:	4604      	mov	r4, r0
    1c06:	2287      	movs	r2, #135	; 0x87
    1c08:	4908      	ldr	r1, [pc, #32]	; (1c2c <_spi_m_sync_io_read+0x30>)
    1c0a:	3000      	adds	r0, #0
    1c0c:	bf18      	it	ne
    1c0e:	2001      	movne	r0, #1
    1c10:	4b07      	ldr	r3, [pc, #28]	; (1c30 <_spi_m_sync_io_read+0x34>)
    1c12:	4798      	blx	r3
	xfer.rxbuf = buf;
    1c14:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
    1c16:	2300      	movs	r3, #0
    1c18:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
    1c1a:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    1c1c:	a901      	add	r1, sp, #4
    1c1e:	f1a4 0008 	sub.w	r0, r4, #8
    1c22:	4b04      	ldr	r3, [pc, #16]	; (1c34 <_spi_m_sync_io_read+0x38>)
    1c24:	4798      	blx	r3
}
    1c26:	b004      	add	sp, #16
    1c28:	bd70      	pop	{r4, r5, r6, pc}
    1c2a:	bf00      	nop
    1c2c:	0000ef54 	.word	0x0000ef54
    1c30:	0000272d 	.word	0x0000272d
    1c34:	00001b81 	.word	0x00001b81

00001c38 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
    1c38:	b538      	push	{r3, r4, r5, lr}
    1c3a:	460d      	mov	r5, r1
	ASSERT(spi && io);
    1c3c:	4604      	mov	r4, r0
    1c3e:	b150      	cbz	r0, 1c56 <spi_m_sync_get_io_descriptor+0x1e>
    1c40:	1c08      	adds	r0, r1, #0
    1c42:	bf18      	it	ne
    1c44:	2001      	movne	r0, #1
    1c46:	22be      	movs	r2, #190	; 0xbe
    1c48:	4904      	ldr	r1, [pc, #16]	; (1c5c <spi_m_sync_get_io_descriptor+0x24>)
    1c4a:	4b05      	ldr	r3, [pc, #20]	; (1c60 <spi_m_sync_get_io_descriptor+0x28>)
    1c4c:	4798      	blx	r3
	*io = &spi->io;
    1c4e:	3408      	adds	r4, #8
    1c50:	602c      	str	r4, [r5, #0]
	return 0;
}
    1c52:	2000      	movs	r0, #0
    1c54:	bd38      	pop	{r3, r4, r5, pc}
    1c56:	2000      	movs	r0, #0
    1c58:	e7f5      	b.n	1c46 <spi_m_sync_get_io_descriptor+0xe>
    1c5a:	bf00      	nop
    1c5c:	0000ef54 	.word	0x0000ef54
    1c60:	0000272d 	.word	0x0000272d

00001c64 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    1c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c66:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    1c68:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    1c6a:	b12f      	cbz	r7, 1c78 <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    1c6c:	688d      	ldr	r5, [r1, #8]
    1c6e:	463c      	mov	r4, r7
    1c70:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    1c72:	f1c2 0e01 	rsb	lr, r2, #1
    1c76:	e00b      	b.n	1c90 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
    1c78:	4b0e      	ldr	r3, [pc, #56]	; (1cb4 <timer_add_timer_task+0x50>)
    1c7a:	4798      	blx	r3
		return;
    1c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    1c7e:	4473      	add	r3, lr
    1c80:	68a0      	ldr	r0, [r4, #8]
    1c82:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
    1c84:	42ab      	cmp	r3, r5
    1c86:	d20a      	bcs.n	1c9e <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    1c88:	6823      	ldr	r3, [r4, #0]
    1c8a:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    1c8c:	b153      	cbz	r3, 1ca4 <timer_add_timer_task+0x40>
    1c8e:	461c      	mov	r4, r3
		if (it->time_label <= time) {
    1c90:	6863      	ldr	r3, [r4, #4]
    1c92:	4293      	cmp	r3, r2
    1c94:	d8f3      	bhi.n	1c7e <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
    1c96:	68a0      	ldr	r0, [r4, #8]
    1c98:	4403      	add	r3, r0
    1c9a:	1a9b      	subs	r3, r3, r2
    1c9c:	e7f2      	b.n	1c84 <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
    1c9e:	42a7      	cmp	r7, r4
    1ca0:	d004      	beq.n	1cac <timer_add_timer_task+0x48>
    1ca2:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    1ca4:	4620      	mov	r0, r4
    1ca6:	4b04      	ldr	r3, [pc, #16]	; (1cb8 <timer_add_timer_task+0x54>)
    1ca8:	4798      	blx	r3
    1caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    1cac:	4660      	mov	r0, ip
    1cae:	4b01      	ldr	r3, [pc, #4]	; (1cb4 <timer_add_timer_task+0x50>)
    1cb0:	4798      	blx	r3
    1cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1cb4:	00002755 	.word	0x00002755
    1cb8:	00002781 	.word	0x00002781

00001cbc <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    1cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
    1cc0:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    1cc2:	6907      	ldr	r7, [r0, #16]
    1cc4:	3701      	adds	r7, #1
    1cc6:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    1cc8:	7e03      	ldrb	r3, [r0, #24]
    1cca:	f013 0f01 	tst.w	r3, #1
    1cce:	d113      	bne.n	1cf8 <timer_process_counted+0x3c>
    1cd0:	7e03      	ldrb	r3, [r0, #24]
    1cd2:	f013 0f02 	tst.w	r3, #2
    1cd6:	d10f      	bne.n	1cf8 <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    1cd8:	b354      	cbz	r4, 1d30 <timer_process_counted+0x74>
    1cda:	6863      	ldr	r3, [r4, #4]
    1cdc:	1afb      	subs	r3, r7, r3
    1cde:	68a2      	ldr	r2, [r4, #8]
    1ce0:	4293      	cmp	r3, r2
    1ce2:	d307      	bcc.n	1cf4 <timer_process_counted+0x38>
    1ce4:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    1ce6:	f100 0814 	add.w	r8, r0, #20
    1cea:	f8df 9048 	ldr.w	r9, [pc, #72]	; 1d34 <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    1cee:	f8df a048 	ldr.w	sl, [pc, #72]	; 1d38 <timer_process_counted+0x7c>
    1cf2:	e012      	b.n	1d1a <timer_process_counted+0x5e>
    1cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    1cf8:	7e03      	ldrb	r3, [r0, #24]
    1cfa:	f043 0302 	orr.w	r3, r3, #2
    1cfe:	7603      	strb	r3, [r0, #24]
		return;
    1d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1d04:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    1d06:	68e3      	ldr	r3, [r4, #12]
    1d08:	4620      	mov	r0, r4
    1d0a:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    1d0c:	b185      	cbz	r5, 1d30 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    1d0e:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    1d10:	686b      	ldr	r3, [r5, #4]
    1d12:	1afb      	subs	r3, r7, r3
    1d14:	68aa      	ldr	r2, [r5, #8]
    1d16:	4293      	cmp	r3, r2
    1d18:	d30a      	bcc.n	1d30 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
    1d1a:	4640      	mov	r0, r8
    1d1c:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
    1d1e:	7c23      	ldrb	r3, [r4, #16]
    1d20:	2b01      	cmp	r3, #1
    1d22:	d1ef      	bne.n	1d04 <timer_process_counted+0x48>
			tmp->time_label = time;
    1d24:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    1d26:	463a      	mov	r2, r7
    1d28:	4621      	mov	r1, r4
    1d2a:	4640      	mov	r0, r8
    1d2c:	47d0      	blx	sl
    1d2e:	e7e9      	b.n	1d04 <timer_process_counted+0x48>
    1d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1d34:	000027c9 	.word	0x000027c9
    1d38:	00001c65 	.word	0x00001c65

00001d3c <timer_init>:
{
    1d3c:	b538      	push	{r3, r4, r5, lr}
    1d3e:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    1d40:	4604      	mov	r4, r0
    1d42:	b178      	cbz	r0, 1d64 <timer_init+0x28>
    1d44:	1c08      	adds	r0, r1, #0
    1d46:	bf18      	it	ne
    1d48:	2001      	movne	r0, #1
    1d4a:	223b      	movs	r2, #59	; 0x3b
    1d4c:	4906      	ldr	r1, [pc, #24]	; (1d68 <timer_init+0x2c>)
    1d4e:	4b07      	ldr	r3, [pc, #28]	; (1d6c <timer_init+0x30>)
    1d50:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    1d52:	4629      	mov	r1, r5
    1d54:	4620      	mov	r0, r4
    1d56:	4b06      	ldr	r3, [pc, #24]	; (1d70 <timer_init+0x34>)
    1d58:	4798      	blx	r3
	descr->time                           = 0;
    1d5a:	2000      	movs	r0, #0
    1d5c:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    1d5e:	4b05      	ldr	r3, [pc, #20]	; (1d74 <timer_init+0x38>)
    1d60:	6023      	str	r3, [r4, #0]
}
    1d62:	bd38      	pop	{r3, r4, r5, pc}
    1d64:	2000      	movs	r0, #0
    1d66:	e7f0      	b.n	1d4a <timer_init+0xe>
    1d68:	0000ef70 	.word	0x0000ef70
    1d6c:	0000272d 	.word	0x0000272d
    1d70:	00003ec9 	.word	0x00003ec9
    1d74:	00001cbd 	.word	0x00001cbd

00001d78 <timer_start>:
{
    1d78:	b510      	push	{r4, lr}
	ASSERT(descr);
    1d7a:	4604      	mov	r4, r0
    1d7c:	2253      	movs	r2, #83	; 0x53
    1d7e:	4909      	ldr	r1, [pc, #36]	; (1da4 <timer_start+0x2c>)
    1d80:	3000      	adds	r0, #0
    1d82:	bf18      	it	ne
    1d84:	2001      	movne	r0, #1
    1d86:	4b08      	ldr	r3, [pc, #32]	; (1da8 <timer_start+0x30>)
    1d88:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
    1d8a:	4620      	mov	r0, r4
    1d8c:	4b07      	ldr	r3, [pc, #28]	; (1dac <timer_start+0x34>)
    1d8e:	4798      	blx	r3
    1d90:	b920      	cbnz	r0, 1d9c <timer_start+0x24>
	_timer_start(&descr->device);
    1d92:	4620      	mov	r0, r4
    1d94:	4b06      	ldr	r3, [pc, #24]	; (1db0 <timer_start+0x38>)
    1d96:	4798      	blx	r3
	return ERR_NONE;
    1d98:	2000      	movs	r0, #0
    1d9a:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    1d9c:	f06f 0010 	mvn.w	r0, #16
}
    1da0:	bd10      	pop	{r4, pc}
    1da2:	bf00      	nop
    1da4:	0000ef70 	.word	0x0000ef70
    1da8:	0000272d 	.word	0x0000272d
    1dac:	00004021 	.word	0x00004021
    1db0:	0000400d 	.word	0x0000400d

00001db4 <timer_add_task>:
{
    1db4:	b570      	push	{r4, r5, r6, lr}
    1db6:	b082      	sub	sp, #8
    1db8:	460d      	mov	r5, r1
	ASSERT(descr && task);
    1dba:	4604      	mov	r4, r0
    1dbc:	b318      	cbz	r0, 1e06 <timer_add_task+0x52>
    1dbe:	1c08      	adds	r0, r1, #0
    1dc0:	bf18      	it	ne
    1dc2:	2001      	movne	r0, #1
    1dc4:	227a      	movs	r2, #122	; 0x7a
    1dc6:	491e      	ldr	r1, [pc, #120]	; (1e40 <timer_add_task+0x8c>)
    1dc8:	4b1e      	ldr	r3, [pc, #120]	; (1e44 <timer_add_task+0x90>)
    1dca:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    1dcc:	7e23      	ldrb	r3, [r4, #24]
    1dce:	f043 0301 	orr.w	r3, r3, #1
    1dd2:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
    1dd4:	f104 0614 	add.w	r6, r4, #20
    1dd8:	4629      	mov	r1, r5
    1dda:	4630      	mov	r0, r6
    1ddc:	4b1a      	ldr	r3, [pc, #104]	; (1e48 <timer_add_task+0x94>)
    1dde:	4798      	blx	r3
    1de0:	b998      	cbnz	r0, 1e0a <timer_add_task+0x56>
	task->time_label = descr->time;
    1de2:	6923      	ldr	r3, [r4, #16]
    1de4:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    1de6:	6922      	ldr	r2, [r4, #16]
    1de8:	4629      	mov	r1, r5
    1dea:	4630      	mov	r0, r6
    1dec:	4b17      	ldr	r3, [pc, #92]	; (1e4c <timer_add_task+0x98>)
    1dee:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    1df0:	7e23      	ldrb	r3, [r4, #24]
    1df2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    1df6:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    1df8:	7e23      	ldrb	r3, [r4, #24]
    1dfa:	f013 0f02 	tst.w	r3, #2
    1dfe:	d110      	bne.n	1e22 <timer_add_task+0x6e>
	return ERR_NONE;
    1e00:	2000      	movs	r0, #0
}
    1e02:	b002      	add	sp, #8
    1e04:	bd70      	pop	{r4, r5, r6, pc}
    1e06:	2000      	movs	r0, #0
    1e08:	e7dc      	b.n	1dc4 <timer_add_task+0x10>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    1e0a:	7e23      	ldrb	r3, [r4, #24]
    1e0c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    1e10:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
    1e12:	227f      	movs	r2, #127	; 0x7f
    1e14:	490a      	ldr	r1, [pc, #40]	; (1e40 <timer_add_task+0x8c>)
    1e16:	2000      	movs	r0, #0
    1e18:	4b0a      	ldr	r3, [pc, #40]	; (1e44 <timer_add_task+0x90>)
    1e1a:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    1e1c:	f06f 0011 	mvn.w	r0, #17
    1e20:	e7ef      	b.n	1e02 <timer_add_task+0x4e>
		CRITICAL_SECTION_ENTER()
    1e22:	a801      	add	r0, sp, #4
    1e24:	4b0a      	ldr	r3, [pc, #40]	; (1e50 <timer_add_task+0x9c>)
    1e26:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    1e28:	7e23      	ldrb	r3, [r4, #24]
    1e2a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    1e2e:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
    1e30:	4620      	mov	r0, r4
    1e32:	4b08      	ldr	r3, [pc, #32]	; (1e54 <timer_add_task+0xa0>)
    1e34:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    1e36:	a801      	add	r0, sp, #4
    1e38:	4b07      	ldr	r3, [pc, #28]	; (1e58 <timer_add_task+0xa4>)
    1e3a:	4798      	blx	r3
	return ERR_NONE;
    1e3c:	2000      	movs	r0, #0
    1e3e:	e7e0      	b.n	1e02 <timer_add_task+0x4e>
    1e40:	0000ef70 	.word	0x0000ef70
    1e44:	0000272d 	.word	0x0000272d
    1e48:	00002733 	.word	0x00002733
    1e4c:	00001c65 	.word	0x00001c65
    1e50:	00001549 	.word	0x00001549
    1e54:	00004039 	.word	0x00004039
    1e58:	00001557 	.word	0x00001557

00001e5c <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
    1e5c:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    1e5e:	2300      	movs	r3, #0
    1e60:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.tx_done) {
    1e62:	69c3      	ldr	r3, [r0, #28]
    1e64:	b11b      	cbz	r3, 1e6e <usart_transmission_complete+0x12>
    1e66:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.tx_done(descr);
    1e6a:	4610      	mov	r0, r2
    1e6c:	4798      	blx	r3
    1e6e:	bd08      	pop	{r3, pc}

00001e70 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
    1e70:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    1e72:	2300      	movs	r3, #0
    1e74:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.error) {
    1e76:	6a43      	ldr	r3, [r0, #36]	; 0x24
    1e78:	b11b      	cbz	r3, 1e82 <usart_error+0x12>
    1e7a:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.error(descr);
    1e7e:	4610      	mov	r0, r2
    1e80:	4798      	blx	r3
    1e82:	bd08      	pop	{r3, pc}

00001e84 <usart_fill_rx_buffer>:
{
    1e84:	b538      	push	{r3, r4, r5, lr}
    1e86:	4604      	mov	r4, r0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    1e88:	f1a0 0508 	sub.w	r5, r0, #8
	ringbuffer_put(&descr->rx, data);
    1e8c:	302c      	adds	r0, #44	; 0x2c
    1e8e:	4b03      	ldr	r3, [pc, #12]	; (1e9c <usart_fill_rx_buffer+0x18>)
    1e90:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
    1e92:	6a23      	ldr	r3, [r4, #32]
    1e94:	b10b      	cbz	r3, 1e9a <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
    1e96:	4628      	mov	r0, r5
    1e98:	4798      	blx	r3
    1e9a:	bd38      	pop	{r3, r4, r5, pc}
    1e9c:	00002869 	.word	0x00002869

00001ea0 <usart_async_write>:
{
    1ea0:	b570      	push	{r4, r5, r6, lr}
    1ea2:	460e      	mov	r6, r1
    1ea4:	4615      	mov	r5, r2
	ASSERT(descr && buf && length);
    1ea6:	4604      	mov	r4, r0
    1ea8:	b1e0      	cbz	r0, 1ee4 <usart_async_write+0x44>
    1eaa:	b1e9      	cbz	r1, 1ee8 <usart_async_write+0x48>
    1eac:	1c10      	adds	r0, r2, #0
    1eae:	bf18      	it	ne
    1eb0:	2001      	movne	r0, #1
    1eb2:	f240 123b 	movw	r2, #315	; 0x13b
    1eb6:	490f      	ldr	r1, [pc, #60]	; (1ef4 <usart_async_write+0x54>)
    1eb8:	4b0f      	ldr	r3, [pc, #60]	; (1ef8 <usart_async_write+0x58>)
    1eba:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
    1ebc:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
    1ec0:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
    1ec4:	429a      	cmp	r2, r3
    1ec6:	d111      	bne.n	1eec <usart_async_write+0x4c>
	descr->tx_buffer        = (uint8_t *)buf;
    1ec8:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
    1eca:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
	descr->tx_por           = 0;
    1ece:	2300      	movs	r3, #0
    1ed0:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    1ed4:	2301      	movs	r3, #1
    1ed6:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    1ed8:	f104 0008 	add.w	r0, r4, #8
    1edc:	4b07      	ldr	r3, [pc, #28]	; (1efc <usart_async_write+0x5c>)
    1ede:	4798      	blx	r3
	return (int32_t)length;
    1ee0:	4628      	mov	r0, r5
    1ee2:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
    1ee4:	2000      	movs	r0, #0
    1ee6:	e7e4      	b.n	1eb2 <usart_async_write+0x12>
    1ee8:	2000      	movs	r0, #0
    1eea:	e7e2      	b.n	1eb2 <usart_async_write+0x12>
		return ERR_NO_RESOURCE;
    1eec:	f06f 001b 	mvn.w	r0, #27
}
    1ef0:	bd70      	pop	{r4, r5, r6, pc}
    1ef2:	bf00      	nop
    1ef4:	0000ef88 	.word	0x0000ef88
    1ef8:	0000272d 	.word	0x0000272d
    1efc:	00003a1d 	.word	0x00003a1d

00001f00 <usart_process_byte_sent>:
{
    1f00:	b510      	push	{r4, lr}
    1f02:	4604      	mov	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
    1f04:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    1f06:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
    1f0a:	429a      	cmp	r2, r3
    1f0c:	d009      	beq.n	1f22 <usart_process_byte_sent+0x22>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    1f0e:	6c02      	ldr	r2, [r0, #64]	; 0x40
    1f10:	1c59      	adds	r1, r3, #1
    1f12:	8781      	strh	r1, [r0, #60]	; 0x3c
    1f14:	5cd1      	ldrb	r1, [r2, r3]
    1f16:	4b04      	ldr	r3, [pc, #16]	; (1f28 <usart_process_byte_sent+0x28>)
    1f18:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    1f1a:	4620      	mov	r0, r4
    1f1c:	4b03      	ldr	r3, [pc, #12]	; (1f2c <usart_process_byte_sent+0x2c>)
    1f1e:	4798      	blx	r3
    1f20:	bd10      	pop	{r4, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
    1f22:	4b03      	ldr	r3, [pc, #12]	; (1f30 <usart_process_byte_sent+0x30>)
    1f24:	4798      	blx	r3
    1f26:	bd10      	pop	{r4, pc}
    1f28:	00003a0d 	.word	0x00003a0d
    1f2c:	00003a1d 	.word	0x00003a1d
    1f30:	00003a25 	.word	0x00003a25

00001f34 <usart_async_read>:
{
    1f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1f38:	b082      	sub	sp, #8
    1f3a:	460f      	mov	r7, r1
    1f3c:	4690      	mov	r8, r2
	ASSERT(descr && buf && length);
    1f3e:	4606      	mov	r6, r0
    1f40:	b1a0      	cbz	r0, 1f6c <usart_async_read+0x38>
    1f42:	b199      	cbz	r1, 1f6c <usart_async_read+0x38>
    1f44:	2a00      	cmp	r2, #0
    1f46:	d12d      	bne.n	1fa4 <usart_async_read+0x70>
    1f48:	f44f 72ac 	mov.w	r2, #344	; 0x158
    1f4c:	4929      	ldr	r1, [pc, #164]	; (1ff4 <usart_async_read+0xc0>)
    1f4e:	2000      	movs	r0, #0
    1f50:	4b29      	ldr	r3, [pc, #164]	; (1ff8 <usart_async_read+0xc4>)
    1f52:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    1f54:	a801      	add	r0, sp, #4
    1f56:	4b29      	ldr	r3, [pc, #164]	; (1ffc <usart_async_read+0xc8>)
    1f58:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    1f5a:	f106 0034 	add.w	r0, r6, #52	; 0x34
    1f5e:	4b28      	ldr	r3, [pc, #160]	; (2000 <usart_async_read+0xcc>)
    1f60:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
    1f62:	a801      	add	r0, sp, #4
    1f64:	4b27      	ldr	r3, [pc, #156]	; (2004 <usart_async_read+0xd0>)
    1f66:	4798      	blx	r3
	uint16_t                       was_read = 0;
    1f68:	2500      	movs	r5, #0
	return (int32_t)was_read;
    1f6a:	e03e      	b.n	1fea <usart_async_read+0xb6>
	ASSERT(descr && buf && length);
    1f6c:	f44f 72ac 	mov.w	r2, #344	; 0x158
    1f70:	4920      	ldr	r1, [pc, #128]	; (1ff4 <usart_async_read+0xc0>)
    1f72:	2000      	movs	r0, #0
    1f74:	4b20      	ldr	r3, [pc, #128]	; (1ff8 <usart_async_read+0xc4>)
    1f76:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    1f78:	a801      	add	r0, sp, #4
    1f7a:	4b20      	ldr	r3, [pc, #128]	; (1ffc <usart_async_read+0xc8>)
    1f7c:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    1f7e:	f106 0a34 	add.w	sl, r6, #52	; 0x34
    1f82:	4650      	mov	r0, sl
    1f84:	4b1e      	ldr	r3, [pc, #120]	; (2000 <usart_async_read+0xcc>)
    1f86:	4798      	blx	r3
    1f88:	4681      	mov	r9, r0
	CRITICAL_SECTION_LEAVE()
    1f8a:	a801      	add	r0, sp, #4
    1f8c:	4b1d      	ldr	r3, [pc, #116]	; (2004 <usart_async_read+0xd0>)
    1f8e:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    1f90:	f1b9 0f00 	cmp.w	r9, #0
    1f94:	d004      	beq.n	1fa0 <usart_async_read+0x6c>
    1f96:	f1b8 0f00 	cmp.w	r8, #0
    1f9a:	d119      	bne.n	1fd0 <usart_async_read+0x9c>
	uint16_t                       was_read = 0;
    1f9c:	2500      	movs	r5, #0
    1f9e:	e024      	b.n	1fea <usart_async_read+0xb6>
    1fa0:	2500      	movs	r5, #0
    1fa2:	e022      	b.n	1fea <usart_async_read+0xb6>
	ASSERT(descr && buf && length);
    1fa4:	f44f 72ac 	mov.w	r2, #344	; 0x158
    1fa8:	4912      	ldr	r1, [pc, #72]	; (1ff4 <usart_async_read+0xc0>)
    1faa:	2001      	movs	r0, #1
    1fac:	4b12      	ldr	r3, [pc, #72]	; (1ff8 <usart_async_read+0xc4>)
    1fae:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    1fb0:	a801      	add	r0, sp, #4
    1fb2:	4b12      	ldr	r3, [pc, #72]	; (1ffc <usart_async_read+0xc8>)
    1fb4:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    1fb6:	f106 0a34 	add.w	sl, r6, #52	; 0x34
    1fba:	4650      	mov	r0, sl
    1fbc:	4b10      	ldr	r3, [pc, #64]	; (2000 <usart_async_read+0xcc>)
    1fbe:	4798      	blx	r3
    1fc0:	4681      	mov	r9, r0
	CRITICAL_SECTION_LEAVE()
    1fc2:	a801      	add	r0, sp, #4
    1fc4:	4b0f      	ldr	r3, [pc, #60]	; (2004 <usart_async_read+0xd0>)
    1fc6:	4798      	blx	r3
	uint16_t                       was_read = 0;
    1fc8:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
    1fca:	f1b9 0f00 	cmp.w	r9, #0
    1fce:	d00c      	beq.n	1fea <usart_async_read+0xb6>
{
    1fd0:	2400      	movs	r4, #0
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    1fd2:	4e0d      	ldr	r6, [pc, #52]	; (2008 <usart_async_read+0xd4>)
    1fd4:	1c60      	adds	r0, r4, #1
    1fd6:	b285      	uxth	r5, r0
    1fd8:	1939      	adds	r1, r7, r4
    1fda:	4650      	mov	r0, sl
    1fdc:	47b0      	blx	r6
    1fde:	3401      	adds	r4, #1
	while ((was_read < num) && (was_read < length)) {
    1fe0:	454c      	cmp	r4, r9
    1fe2:	d202      	bcs.n	1fea <usart_async_read+0xb6>
    1fe4:	b2a3      	uxth	r3, r4
    1fe6:	4598      	cmp	r8, r3
    1fe8:	d8f4      	bhi.n	1fd4 <usart_async_read+0xa0>
}
    1fea:	4628      	mov	r0, r5
    1fec:	b002      	add	sp, #8
    1fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1ff2:	bf00      	nop
    1ff4:	0000ef88 	.word	0x0000ef88
    1ff8:	0000272d 	.word	0x0000272d
    1ffc:	00001549 	.word	0x00001549
    2000:	000028a9 	.word	0x000028a9
    2004:	00001557 	.word	0x00001557
    2008:	00002825 	.word	0x00002825

0000200c <usart_async_init>:
{
    200c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    200e:	460d      	mov	r5, r1
    2010:	4616      	mov	r6, r2
    2012:	461f      	mov	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    2014:	4604      	mov	r4, r0
    2016:	b320      	cbz	r0, 2062 <usart_async_init+0x56>
    2018:	b329      	cbz	r1, 2066 <usart_async_init+0x5a>
    201a:	b332      	cbz	r2, 206a <usart_async_init+0x5e>
    201c:	1c18      	adds	r0, r3, #0
    201e:	bf18      	it	ne
    2020:	2001      	movne	r0, #1
    2022:	223a      	movs	r2, #58	; 0x3a
    2024:	4913      	ldr	r1, [pc, #76]	; (2074 <usart_async_init+0x68>)
    2026:	4b14      	ldr	r3, [pc, #80]	; (2078 <usart_async_init+0x6c>)
    2028:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    202a:	463a      	mov	r2, r7
    202c:	4631      	mov	r1, r6
    202e:	f104 0034 	add.w	r0, r4, #52	; 0x34
    2032:	4b12      	ldr	r3, [pc, #72]	; (207c <usart_async_init+0x70>)
    2034:	4798      	blx	r3
    2036:	b9d0      	cbnz	r0, 206e <usart_async_init+0x62>
	init_status = _usart_async_init(&descr->device, hw);
    2038:	4629      	mov	r1, r5
    203a:	f104 0008 	add.w	r0, r4, #8
    203e:	4b10      	ldr	r3, [pc, #64]	; (2080 <usart_async_init+0x74>)
    2040:	4798      	blx	r3
	if (init_status) {
    2042:	4603      	mov	r3, r0
    2044:	b958      	cbnz	r0, 205e <usart_async_init+0x52>
	descr->io.read  = usart_async_read;
    2046:	4a0f      	ldr	r2, [pc, #60]	; (2084 <usart_async_init+0x78>)
    2048:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_async_write;
    204a:	4a0f      	ldr	r2, [pc, #60]	; (2088 <usart_async_init+0x7c>)
    204c:	6022      	str	r2, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    204e:	4a0f      	ldr	r2, [pc, #60]	; (208c <usart_async_init+0x80>)
    2050:	60a2      	str	r2, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    2052:	4a0f      	ldr	r2, [pc, #60]	; (2090 <usart_async_init+0x84>)
    2054:	60e2      	str	r2, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    2056:	4a0f      	ldr	r2, [pc, #60]	; (2094 <usart_async_init+0x88>)
    2058:	6122      	str	r2, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    205a:	4a0f      	ldr	r2, [pc, #60]	; (2098 <usart_async_init+0x8c>)
    205c:	6162      	str	r2, [r4, #20]
}
    205e:	4618      	mov	r0, r3
    2060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    2062:	2000      	movs	r0, #0
    2064:	e7dd      	b.n	2022 <usart_async_init+0x16>
    2066:	2000      	movs	r0, #0
    2068:	e7db      	b.n	2022 <usart_async_init+0x16>
    206a:	2000      	movs	r0, #0
    206c:	e7d9      	b.n	2022 <usart_async_init+0x16>
		return ERR_INVALID_ARG;
    206e:	f06f 030c 	mvn.w	r3, #12
    2072:	e7f4      	b.n	205e <usart_async_init+0x52>
    2074:	0000ef88 	.word	0x0000ef88
    2078:	0000272d 	.word	0x0000272d
    207c:	000027d5 	.word	0x000027d5
    2080:	0000397d 	.word	0x0000397d
    2084:	00001f35 	.word	0x00001f35
    2088:	00001ea1 	.word	0x00001ea1
    208c:	00001f01 	.word	0x00001f01
    2090:	00001e85 	.word	0x00001e85
    2094:	00001e5d 	.word	0x00001e5d
    2098:	00001e71 	.word	0x00001e71

0000209c <usart_async_enable>:
{
    209c:	b510      	push	{r4, lr}
	ASSERT(descr);
    209e:	4604      	mov	r4, r0
    20a0:	2261      	movs	r2, #97	; 0x61
    20a2:	4906      	ldr	r1, [pc, #24]	; (20bc <usart_async_enable+0x20>)
    20a4:	3000      	adds	r0, #0
    20a6:	bf18      	it	ne
    20a8:	2001      	movne	r0, #1
    20aa:	4b05      	ldr	r3, [pc, #20]	; (20c0 <usart_async_enable+0x24>)
    20ac:	4798      	blx	r3
	_usart_async_enable(&descr->device);
    20ae:	f104 0008 	add.w	r0, r4, #8
    20b2:	4b04      	ldr	r3, [pc, #16]	; (20c4 <usart_async_enable+0x28>)
    20b4:	4798      	blx	r3
}
    20b6:	2000      	movs	r0, #0
    20b8:	bd10      	pop	{r4, pc}
    20ba:	bf00      	nop
    20bc:	0000ef88 	.word	0x0000ef88
    20c0:	0000272d 	.word	0x0000272d
    20c4:	000039f9 	.word	0x000039f9

000020c8 <usart_async_get_io_descriptor>:
{
    20c8:	b538      	push	{r3, r4, r5, lr}
    20ca:	460c      	mov	r4, r1
	ASSERT(descr && io);
    20cc:	4605      	mov	r5, r0
    20ce:	b148      	cbz	r0, 20e4 <usart_async_get_io_descriptor+0x1c>
    20d0:	1c08      	adds	r0, r1, #0
    20d2:	bf18      	it	ne
    20d4:	2001      	movne	r0, #1
    20d6:	2277      	movs	r2, #119	; 0x77
    20d8:	4903      	ldr	r1, [pc, #12]	; (20e8 <usart_async_get_io_descriptor+0x20>)
    20da:	4b04      	ldr	r3, [pc, #16]	; (20ec <usart_async_get_io_descriptor+0x24>)
    20dc:	4798      	blx	r3
	*io = &descr->io;
    20de:	6025      	str	r5, [r4, #0]
}
    20e0:	2000      	movs	r0, #0
    20e2:	bd38      	pop	{r3, r4, r5, pc}
    20e4:	2000      	movs	r0, #0
    20e6:	e7f6      	b.n	20d6 <usart_async_get_io_descriptor+0xe>
    20e8:	0000ef88 	.word	0x0000ef88
    20ec:	0000272d 	.word	0x0000272d

000020f0 <usart_async_register_callback>:
{
    20f0:	b570      	push	{r4, r5, r6, lr}
    20f2:	460c      	mov	r4, r1
    20f4:	4616      	mov	r6, r2
	ASSERT(descr);
    20f6:	4605      	mov	r5, r0
    20f8:	2283      	movs	r2, #131	; 0x83
    20fa:	4917      	ldr	r1, [pc, #92]	; (2158 <usart_async_register_callback+0x68>)
    20fc:	3000      	adds	r0, #0
    20fe:	bf18      	it	ne
    2100:	2001      	movne	r0, #1
    2102:	4b16      	ldr	r3, [pc, #88]	; (215c <usart_async_register_callback+0x6c>)
    2104:	4798      	blx	r3
	switch (type) {
    2106:	2c01      	cmp	r4, #1
    2108:	d010      	beq.n	212c <usart_async_register_callback+0x3c>
    210a:	b124      	cbz	r4, 2116 <usart_async_register_callback+0x26>
    210c:	2c02      	cmp	r4, #2
    210e:	d018      	beq.n	2142 <usart_async_register_callback+0x52>
		return ERR_INVALID_ARG;
    2110:	f06f 000c 	mvn.w	r0, #12
}
    2114:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.rx_done = cb;
    2116:	62ae      	str	r6, [r5, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
    2118:	1c32      	adds	r2, r6, #0
    211a:	bf18      	it	ne
    211c:	2201      	movne	r2, #1
    211e:	2101      	movs	r1, #1
    2120:	f105 0008 	add.w	r0, r5, #8
    2124:	4b0e      	ldr	r3, [pc, #56]	; (2160 <usart_async_register_callback+0x70>)
    2126:	4798      	blx	r3
	return ERR_NONE;
    2128:	2000      	movs	r0, #0
		break;
    212a:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.tx_done = cb;
    212c:	626e      	str	r6, [r5, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
    212e:	1c32      	adds	r2, r6, #0
    2130:	bf18      	it	ne
    2132:	2201      	movne	r2, #1
    2134:	2102      	movs	r1, #2
    2136:	f105 0008 	add.w	r0, r5, #8
    213a:	4b09      	ldr	r3, [pc, #36]	; (2160 <usart_async_register_callback+0x70>)
    213c:	4798      	blx	r3
	return ERR_NONE;
    213e:	2000      	movs	r0, #0
		break;
    2140:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.error = cb;
    2142:	62ee      	str	r6, [r5, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
    2144:	1c32      	adds	r2, r6, #0
    2146:	bf18      	it	ne
    2148:	2201      	movne	r2, #1
    214a:	2103      	movs	r1, #3
    214c:	f105 0008 	add.w	r0, r5, #8
    2150:	4b03      	ldr	r3, [pc, #12]	; (2160 <usart_async_register_callback+0x70>)
    2152:	4798      	blx	r3
	return ERR_NONE;
    2154:	2000      	movs	r0, #0
		break;
    2156:	bd70      	pop	{r4, r5, r6, pc}
    2158:	0000ef88 	.word	0x0000ef88
    215c:	0000272d 	.word	0x0000272d
    2160:	00003a2d 	.word	0x00003a2d

00002164 <usart_async_is_tx_empty>:
{
    2164:	b510      	push	{r4, lr}
	ASSERT(descr);
    2166:	4604      	mov	r4, r0
    2168:	22f8      	movs	r2, #248	; 0xf8
    216a:	4905      	ldr	r1, [pc, #20]	; (2180 <usart_async_is_tx_empty+0x1c>)
    216c:	3000      	adds	r0, #0
    216e:	bf18      	it	ne
    2170:	2001      	movne	r0, #1
    2172:	4b04      	ldr	r3, [pc, #16]	; (2184 <usart_async_is_tx_empty+0x20>)
    2174:	4798      	blx	r3
	return _usart_async_is_byte_sent(&descr->device);
    2176:	f104 0008 	add.w	r0, r4, #8
    217a:	4b03      	ldr	r3, [pc, #12]	; (2188 <usart_async_is_tx_empty+0x24>)
    217c:	4798      	blx	r3
}
    217e:	bd10      	pop	{r4, pc}
    2180:	0000ef88 	.word	0x0000ef88
    2184:	0000272d 	.word	0x0000272d
    2188:	00003a13 	.word	0x00003a13

0000218c <_usb_d_find_ep>:
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    218c:	4b0f      	ldr	r3, [pc, #60]	; (21cc <_usb_d_find_ep+0x40>)
    218e:	7859      	ldrb	r1, [r3, #1]
    2190:	4288      	cmp	r0, r1
    2192:	d018      	beq.n	21c6 <_usb_d_find_ep+0x3a>
{
    2194:	b430      	push	{r4, r5}
    2196:	461a      	mov	r2, r3
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    2198:	2300      	movs	r3, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    219a:	f000 050f 	and.w	r5, r0, #15
    219e:	e007      	b.n	21b0 <_usb_d_find_ep+0x24>
    21a0:	3301      	adds	r3, #1
    21a2:	b25b      	sxtb	r3, r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    21a4:	2b04      	cmp	r3, #4
    21a6:	d009      	beq.n	21bc <_usb_d_find_ep+0x30>
    21a8:	3220      	adds	r2, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    21aa:	7851      	ldrb	r1, [r2, #1]
    21ac:	4281      	cmp	r1, r0
    21ae:	d007      	beq.n	21c0 <_usb_d_find_ep+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    21b0:	7814      	ldrb	r4, [r2, #0]
    21b2:	2c00      	cmp	r4, #0
    21b4:	d1f4      	bne.n	21a0 <_usb_d_find_ep+0x14>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    21b6:	428d      	cmp	r5, r1
    21b8:	d1f2      	bne.n	21a0 <_usb_d_find_ep+0x14>
    21ba:	e001      	b.n	21c0 <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
    21bc:	f04f 33ff 	mov.w	r3, #4294967295
}
    21c0:	4618      	mov	r0, r3
    21c2:	bc30      	pop	{r4, r5}
    21c4:	4770      	bx	lr
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    21c6:	2300      	movs	r3, #0
}
    21c8:	4618      	mov	r0, r3
    21ca:	4770      	bx	lr
    21cc:	20000334 	.word	0x20000334

000021d0 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    21d0:	2000      	movs	r0, #0
    21d2:	4770      	bx	lr

000021d4 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    21d4:	b538      	push	{r3, r4, r5, lr}
    21d6:	4604      	mov	r4, r0
    21d8:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    21da:	4b09      	ldr	r3, [pc, #36]	; (2200 <usb_d_cb_trans_more+0x2c>)
    21dc:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    21de:	4b09      	ldr	r3, [pc, #36]	; (2204 <usb_d_cb_trans_more+0x30>)
    21e0:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    21e4:	789b      	ldrb	r3, [r3, #2]
    21e6:	2b03      	cmp	r3, #3
    21e8:	d001      	beq.n	21ee <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
    21ea:	2000      	movs	r0, #0
}
    21ec:	bd38      	pop	{r3, r4, r5, pc}
		return ept->callbacks.more(ep, transfered);
    21ee:	4b05      	ldr	r3, [pc, #20]	; (2204 <usb_d_cb_trans_more+0x30>)
    21f0:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    21f4:	6983      	ldr	r3, [r0, #24]
    21f6:	4629      	mov	r1, r5
    21f8:	4620      	mov	r0, r4
    21fa:	4798      	blx	r3
    21fc:	bd38      	pop	{r3, r4, r5, pc}
    21fe:	bf00      	nop
    2200:	0000218d 	.word	0x0000218d
    2204:	20000334 	.word	0x20000334

00002208 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    2208:	b5f0      	push	{r4, r5, r6, r7, lr}
    220a:	b085      	sub	sp, #20
    220c:	4606      	mov	r6, r0
    220e:	460d      	mov	r5, r1
    2210:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    2212:	4b4d      	ldr	r3, [pc, #308]	; (2348 <_usb_d_cb_trans_done+0x140>)
    2214:	4798      	blx	r3
    2216:	4604      	mov	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
    2218:	2d00      	cmp	r5, #0
    221a:	d15b      	bne.n	22d4 <_usb_d_cb_trans_done+0xcc>
		ept->xfer.hdr.status = USB_XFER_DONE;
    221c:	4a4b      	ldr	r2, [pc, #300]	; (234c <_usb_d_cb_trans_done+0x144>)
    221e:	0143      	lsls	r3, r0, #5
    2220:	18d1      	adds	r1, r2, r3
    2222:	2000      	movs	r0, #0
    2224:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2226:	5cd3      	ldrb	r3, [r2, r3]
    2228:	b173      	cbz	r3, 2248 <_usb_d_cb_trans_done+0x40>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    222a:	4b48      	ldr	r3, [pc, #288]	; (234c <_usb_d_cb_trans_done+0x144>)
    222c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    2230:	2201      	movs	r2, #1
    2232:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    2234:	4845      	ldr	r0, [pc, #276]	; (234c <_usb_d_cb_trans_done+0x144>)
    2236:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    223a:	69c3      	ldr	r3, [r0, #28]
    223c:	463a      	mov	r2, r7
    223e:	78c1      	ldrb	r1, [r0, #3]
    2240:	4630      	mov	r0, r6
    2242:	4798      	blx	r3
}
    2244:	b005      	add	sp, #20
    2246:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
    2248:	788b      	ldrb	r3, [r1, #2]
    224a:	2b03      	cmp	r3, #3
    224c:	d00b      	beq.n	2266 <_usb_d_cb_trans_done+0x5e>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    224e:	483f      	ldr	r0, [pc, #252]	; (234c <_usb_d_cb_trans_done+0x144>)
    2250:	eb00 1244 	add.w	r2, r0, r4, lsl #5
    2254:	4614      	mov	r4, r2
    2256:	69d3      	ldr	r3, [r2, #28]
    2258:	320c      	adds	r2, #12
    225a:	2100      	movs	r1, #0
    225c:	7860      	ldrb	r0, [r4, #1]
    225e:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2260:	2302      	movs	r3, #2
    2262:	70a3      	strb	r3, [r4, #2]
    2264:	e7ee      	b.n	2244 <_usb_d_cb_trans_done+0x3c>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    2266:	460b      	mov	r3, r1
    2268:	f991 500c 	ldrsb.w	r5, [r1, #12]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    226c:	460a      	mov	r2, r1
    226e:	69ce      	ldr	r6, [r1, #28]
    2270:	320c      	adds	r2, #12
    2272:	2101      	movs	r1, #1
    2274:	7858      	ldrb	r0, [r3, #1]
    2276:	47b0      	blx	r6
		if (err) {
    2278:	b1a0      	cbz	r0, 22a4 <_usb_d_cb_trans_done+0x9c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    227a:	4b34      	ldr	r3, [pc, #208]	; (234c <_usb_d_cb_trans_done+0x144>)
    227c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    2280:	2205      	movs	r2, #5
    2282:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    2284:	2202      	movs	r2, #2
    2286:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    2288:	2d00      	cmp	r5, #0
    228a:	db09      	blt.n	22a0 <_usb_d_cb_trans_done+0x98>
    228c:	482f      	ldr	r0, [pc, #188]	; (234c <_usb_d_cb_trans_done+0x144>)
    228e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    2292:	7840      	ldrb	r0, [r0, #1]
    2294:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    2298:	2101      	movs	r1, #1
    229a:	4b2d      	ldr	r3, [pc, #180]	; (2350 <_usb_d_cb_trans_done+0x148>)
    229c:	4798      	blx	r3
    229e:	e7d1      	b.n	2244 <_usb_d_cb_trans_done+0x3c>
    22a0:	7858      	ldrb	r0, [r3, #1]
    22a2:	e7f9      	b.n	2298 <_usb_d_cb_trans_done+0x90>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    22a4:	4829      	ldr	r0, [pc, #164]	; (234c <_usb_d_cb_trans_done+0x144>)
    22a6:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    22aa:	2304      	movs	r3, #4
    22ac:	7083      	strb	r3, [r0, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    22ae:	7843      	ldrb	r3, [r0, #1]
	struct usb_d_transfer trans
    22b0:	2200      	movs	r2, #0
    22b2:	9201      	str	r2, [sp, #4]
    22b4:	9202      	str	r2, [sp, #8]
    22b6:	4295      	cmp	r5, r2
    22b8:	bfac      	ite	ge
    22ba:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
    22be:	f003 030f 	andlt.w	r3, r3, #15
    22c2:	f88d 300c 	strb.w	r3, [sp, #12]
    22c6:	2301      	movs	r3, #1
    22c8:	f88d 300d 	strb.w	r3, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    22cc:	a801      	add	r0, sp, #4
    22ce:	4b21      	ldr	r3, [pc, #132]	; (2354 <_usb_d_cb_trans_done+0x14c>)
    22d0:	4798      	blx	r3
    22d2:	e7b7      	b.n	2244 <_usb_d_cb_trans_done+0x3c>
	} else if (code == USB_TRANS_STALL) {
    22d4:	2d01      	cmp	r5, #1
    22d6:	d00a      	beq.n	22ee <_usb_d_cb_trans_done+0xe6>
	} else if (code == USB_TRANS_ABORT) {
    22d8:	2d02      	cmp	r5, #2
    22da:	d01c      	beq.n	2316 <_usb_d_cb_trans_done+0x10e>
	} else if (code == USB_TRANS_RESET) {
    22dc:	2d03      	cmp	r5, #3
    22de:	d02a      	beq.n	2336 <_usb_d_cb_trans_done+0x12e>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    22e0:	4b1a      	ldr	r3, [pc, #104]	; (234c <_usb_d_cb_trans_done+0x144>)
    22e2:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    22e6:	2206      	movs	r2, #6
    22e8:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    22ea:	70da      	strb	r2, [r3, #3]
    22ec:	e7a2      	b.n	2234 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_HALT;
    22ee:	4a17      	ldr	r2, [pc, #92]	; (234c <_usb_d_cb_trans_done+0x144>)
    22f0:	0143      	lsls	r3, r0, #5
    22f2:	18d1      	adds	r1, r2, r3
    22f4:	2002      	movs	r0, #2
    22f6:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    22f8:	5cd3      	ldrb	r3, [r2, r3]
    22fa:	b12b      	cbz	r3, 2308 <_usb_d_cb_trans_done+0x100>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    22fc:	4b13      	ldr	r3, [pc, #76]	; (234c <_usb_d_cb_trans_done+0x144>)
    22fe:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    2302:	2205      	movs	r2, #5
    2304:	709a      	strb	r2, [r3, #2]
    2306:	e795      	b.n	2234 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2308:	460b      	mov	r3, r1
    230a:	7098      	strb	r0, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    230c:	2100      	movs	r1, #0
    230e:	4630      	mov	r0, r6
    2310:	4b0f      	ldr	r3, [pc, #60]	; (2350 <_usb_d_cb_trans_done+0x148>)
    2312:	4798      	blx	r3
    2314:	e78e      	b.n	2234 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    2316:	4a0d      	ldr	r2, [pc, #52]	; (234c <_usb_d_cb_trans_done+0x144>)
    2318:	0143      	lsls	r3, r0, #5
    231a:	18d1      	adds	r1, r2, r3
    231c:	2004      	movs	r0, #4
    231e:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2320:	5cd3      	ldrb	r3, [r2, r3]
    2322:	b12b      	cbz	r3, 2330 <_usb_d_cb_trans_done+0x128>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    2324:	4b09      	ldr	r3, [pc, #36]	; (234c <_usb_d_cb_trans_done+0x144>)
    2326:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    232a:	2201      	movs	r2, #1
    232c:	709a      	strb	r2, [r3, #2]
    232e:	e781      	b.n	2234 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2330:	2302      	movs	r3, #2
    2332:	708b      	strb	r3, [r1, #2]
			return;
    2334:	e786      	b.n	2244 <_usb_d_cb_trans_done+0x3c>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    2336:	4b05      	ldr	r3, [pc, #20]	; (234c <_usb_d_cb_trans_done+0x144>)
    2338:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    233c:	2200      	movs	r2, #0
    233e:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    2340:	2205      	movs	r2, #5
    2342:	70da      	strb	r2, [r3, #3]
    2344:	e776      	b.n	2234 <_usb_d_cb_trans_done+0x2c>
    2346:	bf00      	nop
    2348:	0000218d 	.word	0x0000218d
    234c:	20000334 	.word	0x20000334
    2350:	00004ee5 	.word	0x00004ee5
    2354:	0000508d 	.word	0x0000508d

00002358 <usb_d_cb_trans_setup>:
{
    2358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    235c:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    235e:	4b1c      	ldr	r3, [pc, #112]	; (23d0 <usb_d_cb_trans_setup+0x78>)
    2360:	4798      	blx	r3
    2362:	4606      	mov	r6, r0
	uint8_t *        req      = ept->xfer.req;
    2364:	4c1b      	ldr	r4, [pc, #108]	; (23d4 <usb_d_cb_trans_setup+0x7c>)
    2366:	eb04 1440 	add.w	r4, r4, r0, lsl #5
    236a:	340c      	adds	r4, #12
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    236c:	4621      	mov	r1, r4
    236e:	4628      	mov	r0, r5
    2370:	4b19      	ldr	r3, [pc, #100]	; (23d8 <usb_d_cb_trans_setup+0x80>)
    2372:	4798      	blx	r3
	if (n != 8) {
    2374:	b2c0      	uxtb	r0, r0
    2376:	2808      	cmp	r0, #8
    2378:	d009      	beq.n	238e <usb_d_cb_trans_setup+0x36>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    237a:	2101      	movs	r1, #1
    237c:	4628      	mov	r0, r5
    237e:	4c17      	ldr	r4, [pc, #92]	; (23dc <usb_d_cb_trans_setup+0x84>)
    2380:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    2382:	2101      	movs	r1, #1
    2384:	f045 0080 	orr.w	r0, r5, #128	; 0x80
    2388:	47a0      	blx	r4
		return;
    238a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    238e:	2100      	movs	r1, #0
    2390:	4628      	mov	r0, r5
    2392:	4f12      	ldr	r7, [pc, #72]	; (23dc <usb_d_cb_trans_setup+0x84>)
    2394:	47b8      	blx	r7
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    2396:	f045 0880 	orr.w	r8, r5, #128	; 0x80
    239a:	2100      	movs	r1, #0
    239c:	4640      	mov	r0, r8
    239e:	47b8      	blx	r7
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    23a0:	4b0c      	ldr	r3, [pc, #48]	; (23d4 <usb_d_cb_trans_setup+0x7c>)
    23a2:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    23a6:	2201      	movs	r2, #1
    23a8:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    23aa:	695b      	ldr	r3, [r3, #20]
    23ac:	4621      	mov	r1, r4
    23ae:	4628      	mov	r0, r5
    23b0:	4798      	blx	r3
    23b2:	b108      	cbz	r0, 23b8 <usb_d_cb_trans_setup+0x60>
    23b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    23b8:	4b06      	ldr	r3, [pc, #24]	; (23d4 <usb_d_cb_trans_setup+0x7c>)
    23ba:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    23be:	2305      	movs	r3, #5
    23c0:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    23c2:	2101      	movs	r1, #1
    23c4:	4628      	mov	r0, r5
    23c6:	47b8      	blx	r7
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    23c8:	2101      	movs	r1, #1
    23ca:	4640      	mov	r0, r8
    23cc:	47b8      	blx	r7
    23ce:	e7f1      	b.n	23b4 <usb_d_cb_trans_setup+0x5c>
    23d0:	0000218d 	.word	0x0000218d
    23d4:	20000334 	.word	0x20000334
    23d8:	0000502d 	.word	0x0000502d
    23dc:	00004ee5 	.word	0x00004ee5

000023e0 <usb_d_init>:

int32_t usb_d_init(void)
{
    23e0:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    23e2:	4b11      	ldr	r3, [pc, #68]	; (2428 <usb_d_init+0x48>)
    23e4:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    23e6:	2800      	cmp	r0, #0
    23e8:	db1c      	blt.n	2424 <usb_d_init+0x44>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    23ea:	4c10      	ldr	r4, [pc, #64]	; (242c <usb_d_init+0x4c>)
    23ec:	2280      	movs	r2, #128	; 0x80
    23ee:	2100      	movs	r1, #0
    23f0:	4620      	mov	r0, r4
    23f2:	4b0f      	ldr	r3, [pc, #60]	; (2430 <usb_d_init+0x50>)
    23f4:	4798      	blx	r3
    23f6:	4623      	mov	r3, r4
    23f8:	f104 0080 	add.w	r0, r4, #128	; 0x80
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    23fc:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    23fe:	4a0d      	ldr	r2, [pc, #52]	; (2434 <usb_d_init+0x54>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    2400:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    2402:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    2404:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    2406:	61da      	str	r2, [r3, #28]
    2408:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    240a:	4283      	cmp	r3, r0
    240c:	d1f8      	bne.n	2400 <usb_d_init+0x20>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    240e:	490a      	ldr	r1, [pc, #40]	; (2438 <usb_d_init+0x58>)
    2410:	2000      	movs	r0, #0
    2412:	4c0a      	ldr	r4, [pc, #40]	; (243c <usb_d_init+0x5c>)
    2414:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    2416:	490a      	ldr	r1, [pc, #40]	; (2440 <usb_d_init+0x60>)
    2418:	2001      	movs	r0, #1
    241a:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    241c:	4909      	ldr	r1, [pc, #36]	; (2444 <usb_d_init+0x64>)
    241e:	2002      	movs	r0, #2
    2420:	47a0      	blx	r4
	return ERR_NONE;
    2422:	2000      	movs	r0, #0
}
    2424:	bd10      	pop	{r4, pc}
    2426:	bf00      	nop
    2428:	0000490d 	.word	0x0000490d
    242c:	20000334 	.word	0x20000334
    2430:	0000dce9 	.word	0x0000dce9
    2434:	000021d1 	.word	0x000021d1
    2438:	00002359 	.word	0x00002359
    243c:	00005291 	.word	0x00005291
    2440:	000021d5 	.word	0x000021d5
    2444:	00002209 	.word	0x00002209

00002448 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    2448:	b508      	push	{r3, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    244a:	4b01      	ldr	r3, [pc, #4]	; (2450 <usb_d_register_callback+0x8>)
    244c:	4798      	blx	r3
    244e:	bd08      	pop	{r3, pc}
    2450:	0000526d 	.word	0x0000526d

00002454 <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
    2454:	b508      	push	{r3, lr}
	return _usb_d_dev_enable();
    2456:	4b01      	ldr	r3, [pc, #4]	; (245c <usb_d_enable+0x8>)
    2458:	4798      	blx	r3
}
    245a:	bd08      	pop	{r3, pc}
    245c:	000049e9 	.word	0x000049e9

00002460 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    2460:	b508      	push	{r3, lr}
	_usb_d_dev_attach();
    2462:	4b01      	ldr	r3, [pc, #4]	; (2468 <usb_d_attach+0x8>)
    2464:	4798      	blx	r3
    2466:	bd08      	pop	{r3, pc}
    2468:	00004a41 	.word	0x00004a41

0000246c <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    246c:	b508      	push	{r3, lr}
	_usb_d_dev_set_address(addr);
    246e:	4b01      	ldr	r3, [pc, #4]	; (2474 <usb_d_set_address+0x8>)
    2470:	4798      	blx	r3
    2472:	bd08      	pop	{r3, pc}
    2474:	00004a53 	.word	0x00004a53

00002478 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    2478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    247a:	4606      	mov	r6, r0
    247c:	460c      	mov	r4, r1
    247e:	4617      	mov	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    2480:	4b0f      	ldr	r3, [pc, #60]	; (24c0 <usb_d_ep_init+0x48>)
    2482:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    2484:	2800      	cmp	r0, #0
    2486:	da14      	bge.n	24b2 <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    2488:	20ff      	movs	r0, #255	; 0xff
    248a:	4b0d      	ldr	r3, [pc, #52]	; (24c0 <usb_d_ep_init+0x48>)
    248c:	4798      	blx	r3
		if (ep_index < 0) {
    248e:	1e05      	subs	r5, r0, #0
    2490:	db12      	blt.n	24b8 <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    2492:	463a      	mov	r2, r7
    2494:	4621      	mov	r1, r4
    2496:	4630      	mov	r0, r6
    2498:	4b0a      	ldr	r3, [pc, #40]	; (24c4 <usb_d_ep_init+0x4c>)
    249a:	4798      	blx	r3
	if (rc < 0) {
    249c:	2800      	cmp	r0, #0
    249e:	db0d      	blt.n	24bc <usb_d_ep_init+0x44>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    24a0:	4b09      	ldr	r3, [pc, #36]	; (24c8 <usb_d_ep_init+0x50>)
    24a2:	0168      	lsls	r0, r5, #5
    24a4:	181a      	adds	r2, r3, r0
    24a6:	7056      	strb	r6, [r2, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    24a8:	f004 0403 	and.w	r4, r4, #3
    24ac:	541c      	strb	r4, [r3, r0]
	return ERR_NONE;
    24ae:	2000      	movs	r0, #0
    24b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    24b2:	f06f 0013 	mvn.w	r0, #19
    24b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -USB_ERR_ALLOC_FAIL;
    24b8:	f06f 0014 	mvn.w	r0, #20
}
    24bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    24be:	bf00      	nop
    24c0:	0000218d 	.word	0x0000218d
    24c4:	00004a61 	.word	0x00004a61
    24c8:	20000334 	.word	0x20000334

000024cc <usb_d_ep0_init>:
{
    24cc:	b508      	push	{r3, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    24ce:	4602      	mov	r2, r0
    24d0:	2100      	movs	r1, #0
    24d2:	4608      	mov	r0, r1
    24d4:	4b01      	ldr	r3, [pc, #4]	; (24dc <usb_d_ep0_init+0x10>)
    24d6:	4798      	blx	r3
}
    24d8:	bd08      	pop	{r3, pc}
    24da:	bf00      	nop
    24dc:	00002479 	.word	0x00002479

000024e0 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    24e0:	b538      	push	{r3, r4, r5, lr}
    24e2:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    24e4:	4b06      	ldr	r3, [pc, #24]	; (2500 <usb_d_ep_deinit+0x20>)
    24e6:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    24e8:	1e04      	subs	r4, r0, #0
    24ea:	db07      	blt.n	24fc <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    24ec:	4628      	mov	r0, r5
    24ee:	4b05      	ldr	r3, [pc, #20]	; (2504 <usb_d_ep_deinit+0x24>)
    24f0:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    24f2:	4805      	ldr	r0, [pc, #20]	; (2508 <usb_d_ep_deinit+0x28>)
    24f4:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    24f8:	23ff      	movs	r3, #255	; 0xff
    24fa:	7043      	strb	r3, [r0, #1]
    24fc:	bd38      	pop	{r3, r4, r5, pc}
    24fe:	bf00      	nop
    2500:	0000218d 	.word	0x0000218d
    2504:	00004b79 	.word	0x00004b79
    2508:	20000334 	.word	0x20000334

0000250c <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
    250c:	b538      	push	{r3, r4, r5, lr}
    250e:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    2510:	4b0e      	ldr	r3, [pc, #56]	; (254c <usb_d_ep_enable+0x40>)
    2512:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    2514:	1e04      	subs	r4, r0, #0
    2516:	db16      	blt.n	2546 <usb_d_ep_enable+0x3a>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    2518:	0163      	lsls	r3, r4, #5
    251a:	4a0d      	ldr	r2, [pc, #52]	; (2550 <usb_d_ep_enable+0x44>)
    251c:	5cd3      	ldrb	r3, [r2, r3]
    251e:	2b00      	cmp	r3, #0
    2520:	bf0c      	ite	eq
    2522:	2202      	moveq	r2, #2
    2524:	2201      	movne	r2, #1
    2526:	4b0a      	ldr	r3, [pc, #40]	; (2550 <usb_d_ep_enable+0x44>)
    2528:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    252c:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    252e:	4628      	mov	r0, r5
    2530:	4b08      	ldr	r3, [pc, #32]	; (2554 <usb_d_ep_enable+0x48>)
    2532:	4798      	blx	r3
	if (rc < 0) {
    2534:	2800      	cmp	r0, #0
    2536:	db00      	blt.n	253a <usb_d_ep_enable+0x2e>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    2538:	bd38      	pop	{r3, r4, r5, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    253a:	4b05      	ldr	r3, [pc, #20]	; (2550 <usb_d_ep_enable+0x44>)
    253c:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    2540:	2300      	movs	r3, #0
    2542:	70a3      	strb	r3, [r4, #2]
    2544:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
    2546:	f06f 0011 	mvn.w	r0, #17
    254a:	e7f5      	b.n	2538 <usb_d_ep_enable+0x2c>
    254c:	0000218d 	.word	0x0000218d
    2550:	20000334 	.word	0x20000334
    2554:	00004c3d 	.word	0x00004c3d

00002558 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    2558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    255c:	b086      	sub	sp, #24
    255e:	4604      	mov	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    2560:	7a07      	ldrb	r7, [r0, #8]
    2562:	4638      	mov	r0, r7
    2564:	4b3f      	ldr	r3, [pc, #252]	; (2664 <usb_d_ep_transfer+0x10c>)
    2566:	4798      	blx	r3
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    2568:	7a65      	ldrb	r5, [r4, #9]
	uint32_t              len = xfer->size;
    256a:	f8d4 8004 	ldr.w	r8, [r4, #4]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    256e:	1e06      	subs	r6, r0, #0
    2570:	db72      	blt.n	2658 <usb_d_ep_transfer+0x100>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    2572:	a804      	add	r0, sp, #16
    2574:	4b3c      	ldr	r3, [pc, #240]	; (2668 <usb_d_ep_transfer+0x110>)
    2576:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    2578:	4b3c      	ldr	r3, [pc, #240]	; (266c <usb_d_ep_transfer+0x114>)
    257a:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    257e:	789b      	ldrb	r3, [r3, #2]
    2580:	f88d 3017 	strb.w	r3, [sp, #23]
	if (state == USB_EP_S_IDLE) {
    2584:	f89d 3017 	ldrb.w	r3, [sp, #23]
    2588:	b2db      	uxtb	r3, r3
    258a:	2b01      	cmp	r3, #1
    258c:	d011      	beq.n	25b2 <usb_d_ep_transfer+0x5a>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    258e:	a804      	add	r0, sp, #16
    2590:	4b37      	ldr	r3, [pc, #220]	; (2670 <usb_d_ep_transfer+0x118>)
    2592:	4798      	blx	r3
		switch (state) {
    2594:	f89d 3017 	ldrb.w	r3, [sp, #23]
    2598:	b2db      	uxtb	r3, r3
    259a:	2b05      	cmp	r3, #5
    259c:	d05f      	beq.n	265e <usb_d_ep_transfer+0x106>
    259e:	2b06      	cmp	r3, #6
    25a0:	d023      	beq.n	25ea <usb_d_ep_transfer+0x92>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    25a2:	2b00      	cmp	r3, #0
    25a4:	bf0c      	ite	eq
    25a6:	f06f 0012 	mvneq.w	r0, #18
    25aa:	2001      	movne	r0, #1
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
    25ac:	b006      	add	sp, #24
    25ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    25b2:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 266c <usb_d_ep_transfer+0x114>
    25b6:	ea4f 1946 	mov.w	r9, r6, lsl #5
    25ba:	eb0a 0309 	add.w	r3, sl, r9
    25be:	2203      	movs	r2, #3
    25c0:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    25c2:	a804      	add	r0, sp, #16
    25c4:	4b2a      	ldr	r3, [pc, #168]	; (2670 <usb_d_ep_transfer+0x118>)
    25c6:	4798      	blx	r3
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    25c8:	f81a 3009 	ldrb.w	r3, [sl, r9]
    25cc:	b183      	cbz	r3, 25f0 <usb_d_ep_transfer+0x98>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    25ce:	7a22      	ldrb	r2, [r4, #8]
    25d0:	3500      	adds	r5, #0
    25d2:	bf18      	it	ne
    25d4:	2501      	movne	r5, #1
	struct usb_d_transfer trans
    25d6:	6823      	ldr	r3, [r4, #0]
    25d8:	9301      	str	r3, [sp, #4]
    25da:	f8cd 8008 	str.w	r8, [sp, #8]
    25de:	f017 0f80 	tst.w	r7, #128	; 0x80
    25e2:	d119      	bne.n	2618 <usb_d_ep_transfer+0xc0>
    25e4:	f002 030f 	and.w	r3, r2, #15
    25e8:	e018      	b.n	261c <usb_d_ep_transfer+0xc4>
			return -USB_ERROR;
    25ea:	f06f 000f 	mvn.w	r0, #15
    25ee:	e7dd      	b.n	25ac <usb_d_ep_transfer+0x54>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    25f0:	4b1e      	ldr	r3, [pc, #120]	; (266c <usb_d_ep_transfer+0x114>)
    25f2:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    25f6:	7cda      	ldrb	r2, [r3, #19]
    25f8:	7c9d      	ldrb	r5, [r3, #18]
    25fa:	eb05 2502 	add.w	r5, r5, r2, lsl #8
    25fe:	b2ad      	uxth	r5, r5
		if (req_len == 0) {
    2600:	b9a5      	cbnz	r5, 262c <usb_d_ep_transfer+0xd4>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    2602:	4b1a      	ldr	r3, [pc, #104]	; (266c <usb_d_ep_transfer+0x114>)
    2604:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    2608:	2304      	movs	r3, #4
    260a:	70b3      	strb	r3, [r6, #2]
			len                 = 0;
    260c:	2300      	movs	r3, #0
			zlp                 = true;
    260e:	2501      	movs	r5, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    2610:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    2612:	6821      	ldr	r1, [r4, #0]
    2614:	9101      	str	r1, [sp, #4]
    2616:	9302      	str	r3, [sp, #8]
    2618:	f042 0380 	orr.w	r3, r2, #128	; 0x80
    261c:	f88d 300c 	strb.w	r3, [sp, #12]
    2620:	f88d 500d 	strb.w	r5, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    2624:	a801      	add	r0, sp, #4
    2626:	4b13      	ldr	r3, [pc, #76]	; (2674 <usb_d_ep_transfer+0x11c>)
    2628:	4798      	blx	r3
	return rc;
    262a:	e7bf      	b.n	25ac <usb_d_ep_transfer+0x54>
    262c:	4643      	mov	r3, r8
    262e:	45a8      	cmp	r8, r5
    2630:	bf28      	it	cs
    2632:	462b      	movcs	r3, r5
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    2634:	4a0d      	ldr	r2, [pc, #52]	; (266c <usb_d_ep_transfer+0x114>)
    2636:	eb02 1646 	add.w	r6, r2, r6, lsl #5
			if (dir) {
    263a:	f996 200c 	ldrsb.w	r2, [r6, #12]
    263e:	2a00      	cmp	r2, #0
    2640:	db05      	blt.n	264e <usb_d_ep_transfer+0xf6>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    2642:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    2644:	6821      	ldr	r1, [r4, #0]
    2646:	9101      	str	r1, [sp, #4]
    2648:	9302      	str	r3, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    264a:	2500      	movs	r5, #0
    264c:	e7ca      	b.n	25e4 <usb_d_ep_transfer+0x8c>
				zlp = (req_len > len);
    264e:	429d      	cmp	r5, r3
    2650:	bf94      	ite	ls
    2652:	2500      	movls	r5, #0
    2654:	2501      	movhi	r5, #1
    2656:	e7db      	b.n	2610 <usb_d_ep_transfer+0xb8>
		return -USB_ERR_PARAM;
    2658:	f06f 0011 	mvn.w	r0, #17
    265c:	e7a6      	b.n	25ac <usb_d_ep_transfer+0x54>
			return USB_HALTED;
    265e:	2002      	movs	r0, #2
    2660:	e7a4      	b.n	25ac <usb_d_ep_transfer+0x54>
    2662:	bf00      	nop
    2664:	0000218d 	.word	0x0000218d
    2668:	00001549 	.word	0x00001549
    266c:	20000334 	.word	0x20000334
    2670:	00001557 	.word	0x00001557
    2674:	0000508d 	.word	0x0000508d

00002678 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    2678:	b538      	push	{r3, r4, r5, lr}
    267a:	4604      	mov	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    267c:	b141      	cbz	r1, 2690 <usb_d_ep_halt+0x18>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    267e:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2680:	bf0c      	ite	eq
    2682:	2101      	moveq	r1, #1
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    2684:	2102      	movne	r1, #2
    2686:	4b13      	ldr	r3, [pc, #76]	; (26d4 <usb_d_ep_halt+0x5c>)
    2688:	4798      	blx	r3
    268a:	4603      	mov	r3, r0
	}
}
    268c:	4618      	mov	r0, r3
    268e:	bd38      	pop	{r3, r4, r5, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    2690:	4b11      	ldr	r3, [pc, #68]	; (26d8 <usb_d_ep_halt+0x60>)
    2692:	4798      	blx	r3
	if (ep_index < 0) {
    2694:	1e05      	subs	r5, r0, #0
    2696:	db19      	blt.n	26cc <usb_d_ep_halt+0x54>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    2698:	2102      	movs	r1, #2
    269a:	4620      	mov	r0, r4
    269c:	4b0d      	ldr	r3, [pc, #52]	; (26d4 <usb_d_ep_halt+0x5c>)
    269e:	4798      	blx	r3
    26a0:	4603      	mov	r3, r0
    26a2:	2800      	cmp	r0, #0
    26a4:	d0f2      	beq.n	268c <usb_d_ep_halt+0x14>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    26a6:	2100      	movs	r1, #0
    26a8:	4620      	mov	r0, r4
    26aa:	4b0a      	ldr	r3, [pc, #40]	; (26d4 <usb_d_ep_halt+0x5c>)
    26ac:	4798      	blx	r3
		if (rc < 0) {
    26ae:	1e03      	subs	r3, r0, #0
    26b0:	dbec      	blt.n	268c <usb_d_ep_halt+0x14>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    26b2:	4b0a      	ldr	r3, [pc, #40]	; (26dc <usb_d_ep_halt+0x64>)
    26b4:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    26b8:	2201      	movs	r2, #1
    26ba:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    26bc:	2103      	movs	r1, #3
    26be:	70d9      	strb	r1, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    26c0:	69db      	ldr	r3, [r3, #28]
    26c2:	2200      	movs	r2, #0
    26c4:	4620      	mov	r0, r4
    26c6:	4798      	blx	r3
	return ERR_NONE;
    26c8:	2300      	movs	r3, #0
    26ca:	e7df      	b.n	268c <usb_d_ep_halt+0x14>
		return -USB_ERR_PARAM;
    26cc:	f06f 0311 	mvn.w	r3, #17
    26d0:	e7dc      	b.n	268c <usb_d_ep_halt+0x14>
    26d2:	bf00      	nop
    26d4:	00004ee5 	.word	0x00004ee5
    26d8:	0000218d 	.word	0x0000218d
    26dc:	20000334 	.word	0x20000334

000026e0 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    26e0:	b538      	push	{r3, r4, r5, lr}
    26e2:	460d      	mov	r5, r1
    26e4:	4614      	mov	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    26e6:	4b0e      	ldr	r3, [pc, #56]	; (2720 <usb_d_ep_register_callback+0x40>)
    26e8:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    26ea:	4b0e      	ldr	r3, [pc, #56]	; (2724 <usb_d_ep_register_callback+0x44>)
    26ec:	2c00      	cmp	r4, #0
    26ee:	bf08      	it	eq
    26f0:	461c      	moveq	r4, r3
	if (ep_index < 0) {
    26f2:	2800      	cmp	r0, #0
    26f4:	db13      	blt.n	271e <usb_d_ep_register_callback+0x3e>
		return;
	}
	switch (type) {
    26f6:	2d01      	cmp	r5, #1
    26f8:	d008      	beq.n	270c <usb_d_ep_register_callback+0x2c>
    26fa:	b115      	cbz	r5, 2702 <usb_d_ep_register_callback+0x22>
    26fc:	2d02      	cmp	r5, #2
    26fe:	d00a      	beq.n	2716 <usb_d_ep_register_callback+0x36>
    2700:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    2702:	4b09      	ldr	r3, [pc, #36]	; (2728 <usb_d_ep_register_callback+0x48>)
    2704:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    2708:	6144      	str	r4, [r0, #20]
		break;
    270a:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    270c:	4b06      	ldr	r3, [pc, #24]	; (2728 <usb_d_ep_register_callback+0x48>)
    270e:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    2712:	6184      	str	r4, [r0, #24]
		break;
    2714:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    2716:	4b04      	ldr	r3, [pc, #16]	; (2728 <usb_d_ep_register_callback+0x48>)
    2718:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    271c:	61c4      	str	r4, [r0, #28]
    271e:	bd38      	pop	{r3, r4, r5, pc}
    2720:	0000218d 	.word	0x0000218d
    2724:	000021d1 	.word	0x000021d1
    2728:	20000334 	.word	0x20000334

0000272c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    272c:	b900      	cbnz	r0, 2730 <assert+0x4>
		__asm("BKPT #0");
    272e:	be00      	bkpt	0x0000
    2730:	4770      	bx	lr

00002732 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    2732:	6803      	ldr	r3, [r0, #0]
    2734:	b14b      	cbz	r3, 274a <is_list_element+0x18>
		if (it == element) {
    2736:	428b      	cmp	r3, r1
    2738:	d009      	beq.n	274e <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    273a:	681b      	ldr	r3, [r3, #0]
    273c:	b11b      	cbz	r3, 2746 <is_list_element+0x14>
		if (it == element) {
    273e:	4299      	cmp	r1, r3
    2740:	d1fb      	bne.n	273a <is_list_element+0x8>
			return true;
    2742:	2001      	movs	r0, #1
		}
	}

	return false;
}
    2744:	4770      	bx	lr
	return false;
    2746:	2000      	movs	r0, #0
    2748:	4770      	bx	lr
    274a:	2000      	movs	r0, #0
    274c:	4770      	bx	lr
			return true;
    274e:	2001      	movs	r0, #1
    2750:	4770      	bx	lr
	...

00002754 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    2754:	b538      	push	{r3, r4, r5, lr}
    2756:	4604      	mov	r4, r0
    2758:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    275a:	4b06      	ldr	r3, [pc, #24]	; (2774 <list_insert_as_head+0x20>)
    275c:	4798      	blx	r3
    275e:	f080 0001 	eor.w	r0, r0, #1
    2762:	2239      	movs	r2, #57	; 0x39
    2764:	4904      	ldr	r1, [pc, #16]	; (2778 <list_insert_as_head+0x24>)
    2766:	b2c0      	uxtb	r0, r0
    2768:	4b04      	ldr	r3, [pc, #16]	; (277c <list_insert_as_head+0x28>)
    276a:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    276c:	6823      	ldr	r3, [r4, #0]
    276e:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    2770:	6025      	str	r5, [r4, #0]
    2772:	bd38      	pop	{r3, r4, r5, pc}
    2774:	00002733 	.word	0x00002733
    2778:	0000efa8 	.word	0x0000efa8
    277c:	0000272d 	.word	0x0000272d

00002780 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    2780:	6803      	ldr	r3, [r0, #0]
    2782:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    2784:	6001      	str	r1, [r0, #0]
    2786:	4770      	bx	lr

00002788 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    2788:	b570      	push	{r4, r5, r6, lr}
    278a:	4605      	mov	r5, r0
    278c:	460e      	mov	r6, r1
	struct list_element *it = list->head;
    278e:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    2790:	4b0a      	ldr	r3, [pc, #40]	; (27bc <list_insert_at_end+0x34>)
    2792:	4798      	blx	r3
    2794:	f080 0001 	eor.w	r0, r0, #1
    2798:	224f      	movs	r2, #79	; 0x4f
    279a:	4909      	ldr	r1, [pc, #36]	; (27c0 <list_insert_at_end+0x38>)
    279c:	b2c0      	uxtb	r0, r0
    279e:	4b09      	ldr	r3, [pc, #36]	; (27c4 <list_insert_at_end+0x3c>)
    27a0:	4798      	blx	r3

	if (!list->head) {
    27a2:	682b      	ldr	r3, [r5, #0]
    27a4:	b91b      	cbnz	r3, 27ae <list_insert_at_end+0x26>
		list->head                             = (struct list_element *)element;
    27a6:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    27a8:	6033      	str	r3, [r6, #0]
		return;
    27aa:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (it->next) {
		it = it->next;
    27ac:	461c      	mov	r4, r3
	while (it->next) {
    27ae:	6823      	ldr	r3, [r4, #0]
    27b0:	2b00      	cmp	r3, #0
    27b2:	d1fb      	bne.n	27ac <list_insert_at_end+0x24>
	}
	it->next                               = (struct list_element *)element;
    27b4:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    27b6:	6033      	str	r3, [r6, #0]
    27b8:	bd70      	pop	{r4, r5, r6, pc}
    27ba:	bf00      	nop
    27bc:	00002733 	.word	0x00002733
    27c0:	0000efa8 	.word	0x0000efa8
    27c4:	0000272d 	.word	0x0000272d

000027c8 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    27c8:	6803      	ldr	r3, [r0, #0]
    27ca:	b10b      	cbz	r3, 27d0 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    27cc:	681a      	ldr	r2, [r3, #0]
    27ce:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    27d0:	4618      	mov	r0, r3
    27d2:	4770      	bx	lr

000027d4 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    27d4:	b570      	push	{r4, r5, r6, lr}
    27d6:	460e      	mov	r6, r1
    27d8:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
    27da:	4604      	mov	r4, r0
    27dc:	b178      	cbz	r0, 27fe <ringbuffer_init+0x2a>
    27de:	b181      	cbz	r1, 2802 <ringbuffer_init+0x2e>
    27e0:	b1a2      	cbz	r2, 280c <ringbuffer_init+0x38>
    27e2:	2001      	movs	r0, #1
    27e4:	2228      	movs	r2, #40	; 0x28
    27e6:	490d      	ldr	r1, [pc, #52]	; (281c <ringbuffer_init+0x48>)
    27e8:	4b0d      	ldr	r3, [pc, #52]	; (2820 <ringbuffer_init+0x4c>)
    27ea:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    27ec:	1e6b      	subs	r3, r5, #1
    27ee:	421d      	tst	r5, r3
    27f0:	d109      	bne.n	2806 <ringbuffer_init+0x32>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    27f2:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    27f4:	2000      	movs	r0, #0
    27f6:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
    27f8:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    27fa:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    27fc:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    27fe:	2000      	movs	r0, #0
    2800:	e7f0      	b.n	27e4 <ringbuffer_init+0x10>
    2802:	2000      	movs	r0, #0
    2804:	e7ee      	b.n	27e4 <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
    2806:	f06f 000c 	mvn.w	r0, #12
    280a:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    280c:	2228      	movs	r2, #40	; 0x28
    280e:	4903      	ldr	r1, [pc, #12]	; (281c <ringbuffer_init+0x48>)
    2810:	2000      	movs	r0, #0
    2812:	4b03      	ldr	r3, [pc, #12]	; (2820 <ringbuffer_init+0x4c>)
    2814:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
    2816:	1e6b      	subs	r3, r5, #1
    2818:	e7eb      	b.n	27f2 <ringbuffer_init+0x1e>
    281a:	bf00      	nop
    281c:	0000efc8 	.word	0x0000efc8
    2820:	0000272d 	.word	0x0000272d

00002824 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    2824:	b538      	push	{r3, r4, r5, lr}
    2826:	460d      	mov	r5, r1
	ASSERT(rb && data);
    2828:	4604      	mov	r4, r0
    282a:	b1a0      	cbz	r0, 2856 <ringbuffer_get+0x32>
    282c:	1c08      	adds	r0, r1, #0
    282e:	bf18      	it	ne
    2830:	2001      	movne	r0, #1
    2832:	2240      	movs	r2, #64	; 0x40
    2834:	490a      	ldr	r1, [pc, #40]	; (2860 <ringbuffer_get+0x3c>)
    2836:	4b0b      	ldr	r3, [pc, #44]	; (2864 <ringbuffer_get+0x40>)
    2838:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    283a:	68a3      	ldr	r3, [r4, #8]
    283c:	68e2      	ldr	r2, [r4, #12]
    283e:	429a      	cmp	r2, r3
    2840:	d00b      	beq.n	285a <ringbuffer_get+0x36>
		*data = rb->buf[rb->read_index & rb->size];
    2842:	6862      	ldr	r2, [r4, #4]
    2844:	4013      	ands	r3, r2
    2846:	6822      	ldr	r2, [r4, #0]
    2848:	5cd3      	ldrb	r3, [r2, r3]
    284a:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    284c:	68a3      	ldr	r3, [r4, #8]
    284e:	3301      	adds	r3, #1
    2850:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    2852:	2000      	movs	r0, #0
    2854:	bd38      	pop	{r3, r4, r5, pc}
    2856:	2000      	movs	r0, #0
    2858:	e7eb      	b.n	2832 <ringbuffer_get+0xe>
	}

	return ERR_NOT_FOUND;
    285a:	f06f 0009 	mvn.w	r0, #9
}
    285e:	bd38      	pop	{r3, r4, r5, pc}
    2860:	0000efc8 	.word	0x0000efc8
    2864:	0000272d 	.word	0x0000272d

00002868 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    2868:	b538      	push	{r3, r4, r5, lr}
    286a:	460d      	mov	r5, r1
	ASSERT(rb);
    286c:	4604      	mov	r4, r0
    286e:	2251      	movs	r2, #81	; 0x51
    2870:	490b      	ldr	r1, [pc, #44]	; (28a0 <ringbuffer_put+0x38>)
    2872:	3000      	adds	r0, #0
    2874:	bf18      	it	ne
    2876:	2001      	movne	r0, #1
    2878:	4b0a      	ldr	r3, [pc, #40]	; (28a4 <ringbuffer_put+0x3c>)
    287a:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    287c:	68e3      	ldr	r3, [r4, #12]
    287e:	6862      	ldr	r2, [r4, #4]
    2880:	4013      	ands	r3, r2
    2882:	6822      	ldr	r2, [r4, #0]
    2884:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    2886:	68e3      	ldr	r3, [r4, #12]
    2888:	6861      	ldr	r1, [r4, #4]
    288a:	68a2      	ldr	r2, [r4, #8]
    288c:	1a9a      	subs	r2, r3, r2
    288e:	428a      	cmp	r2, r1
		rb->read_index = rb->write_index - rb->size;
    2890:	bf84      	itt	hi
    2892:	1a59      	subhi	r1, r3, r1
    2894:	60a1      	strhi	r1, [r4, #8]
	}

	rb->write_index++;
    2896:	3301      	adds	r3, #1
    2898:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    289a:	2000      	movs	r0, #0
    289c:	bd38      	pop	{r3, r4, r5, pc}
    289e:	bf00      	nop
    28a0:	0000efc8 	.word	0x0000efc8
    28a4:	0000272d 	.word	0x0000272d

000028a8 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    28a8:	b510      	push	{r4, lr}
	ASSERT(rb);
    28aa:	4604      	mov	r4, r0
    28ac:	2267      	movs	r2, #103	; 0x67
    28ae:	4905      	ldr	r1, [pc, #20]	; (28c4 <ringbuffer_num+0x1c>)
    28b0:	3000      	adds	r0, #0
    28b2:	bf18      	it	ne
    28b4:	2001      	movne	r0, #1
    28b6:	4b04      	ldr	r3, [pc, #16]	; (28c8 <ringbuffer_num+0x20>)
    28b8:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    28ba:	68e0      	ldr	r0, [r4, #12]
    28bc:	68a3      	ldr	r3, [r4, #8]
}
    28be:	1ac0      	subs	r0, r0, r3
    28c0:	bd10      	pop	{r4, pc}
    28c2:	bf00      	nop
    28c4:	0000efc8 	.word	0x0000efc8
    28c8:	0000272d 	.word	0x0000272d

000028cc <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    28cc:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    28ce:	4a06      	ldr	r2, [pc, #24]	; (28e8 <_sbrk+0x1c>)
    28d0:	6812      	ldr	r2, [r2, #0]
    28d2:	b122      	cbz	r2, 28de <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    28d4:	4a04      	ldr	r2, [pc, #16]	; (28e8 <_sbrk+0x1c>)
    28d6:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    28d8:	4403      	add	r3, r0
    28da:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    28dc:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    28de:	4903      	ldr	r1, [pc, #12]	; (28ec <_sbrk+0x20>)
    28e0:	4a01      	ldr	r2, [pc, #4]	; (28e8 <_sbrk+0x1c>)
    28e2:	6011      	str	r1, [r2, #0]
    28e4:	e7f6      	b.n	28d4 <_sbrk+0x8>
    28e6:	bf00      	nop
    28e8:	200003b4 	.word	0x200003b4
    28ec:	200150e8 	.word	0x200150e8

000028f0 <_adc_init>:
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
    28f0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
    28f2:	f013 0f01 	tst.w	r3, #1
    28f6:	d113      	bne.n	2920 <_adc_init+0x30>
	tmp = ((Adc *)hw)->CTRLA.reg;
    28f8:	8803      	ldrh	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    28fa:	f013 0f02 	tst.w	r3, #2
    28fe:	d00d      	beq.n	291c <_adc_init+0x2c>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    2900:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2902:	f013 0f03 	tst.w	r3, #3
    2906:	d1fb      	bne.n	2900 <_adc_init+0x10>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    2908:	8803      	ldrh	r3, [r0, #0]
    290a:	f023 0302 	bic.w	r3, r3, #2
    290e:	041b      	lsls	r3, r3, #16
    2910:	0c1b      	lsrs	r3, r3, #16
    2912:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    2914:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2916:	f013 0f02 	tst.w	r3, #2
    291a:	d1fb      	bne.n	2914 <_adc_init+0x24>
	((Adc *)hw)->CTRLA.reg = data;
    291c:	2301      	movs	r3, #1
    291e:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    2920:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2922:	f013 0f01 	tst.w	r3, #1
    2926:	d1fb      	bne.n	2920 <_adc_init+0x30>
		}
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    2928:	2216      	movs	r2, #22
    292a:	4b0e      	ldr	r3, [pc, #56]	; (2964 <_adc_init+0x74>)
    292c:	fb02 3101 	mla	r1, r2, r1, r3
    2930:	888b      	ldrh	r3, [r1, #4]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    2932:	80c3      	strh	r3, [r0, #6]
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    2934:	798b      	ldrb	r3, [r1, #6]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    2936:	7203      	strb	r3, [r0, #8]
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    2938:	79cb      	ldrb	r3, [r1, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    293a:	7083      	strb	r3, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    293c:	890b      	ldrh	r3, [r1, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    293e:	8083      	strh	r3, [r0, #4]
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    2940:	7a8b      	ldrb	r3, [r1, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    2942:	7283      	strb	r3, [r0, #10]
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    2944:	7acb      	ldrb	r3, [r1, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    2946:	72c3      	strb	r3, [r0, #11]
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    2948:	898b      	ldrh	r3, [r1, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    294a:	8183      	strh	r3, [r0, #12]
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    294c:	89cb      	ldrh	r3, [r1, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    294e:	81c3      	strh	r3, [r0, #14]
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    2950:	8a0b      	ldrh	r3, [r1, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    2952:	8203      	strh	r3, [r0, #16]
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    2954:	8a4b      	ldrh	r3, [r1, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    2956:	8243      	strh	r3, [r0, #18]
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    2958:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    295a:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    295c:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    295e:	8003      	strh	r3, [r0, #0]

	return ERR_NONE;
}
    2960:	2000      	movs	r0, #0
    2962:	4770      	bx	lr
    2964:	0000efec 	.word	0x0000efec

00002968 <_adc_get_regs>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    2968:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    296c:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
		if (_adcs[i].number == n) {
    2970:	f3c0 2087 	ubfx	r0, r0, #10, #8
    2974:	b138      	cbz	r0, 2986 <_adc_get_regs+0x1e>
{
    2976:	b508      	push	{r3, lr}
	ASSERT(false);
    2978:	2288      	movs	r2, #136	; 0x88
    297a:	4904      	ldr	r1, [pc, #16]	; (298c <_adc_get_regs+0x24>)
    297c:	2000      	movs	r0, #0
    297e:	4b04      	ldr	r3, [pc, #16]	; (2990 <_adc_get_regs+0x28>)
    2980:	4798      	blx	r3
}
    2982:	2000      	movs	r0, #0
    2984:	bd08      	pop	{r3, pc}
    2986:	2000      	movs	r0, #0
    2988:	4770      	bx	lr
    298a:	bf00      	nop
    298c:	0000f004 	.word	0x0000f004
    2990:	0000272d 	.word	0x0000272d

00002994 <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
    2994:	b538      	push	{r3, r4, r5, lr}
    2996:	460c      	mov	r4, r1
	ASSERT(device);
    2998:	4605      	mov	r5, r0
    299a:	22ce      	movs	r2, #206	; 0xce
    299c:	4907      	ldr	r1, [pc, #28]	; (29bc <_adc_sync_init+0x28>)
    299e:	3000      	adds	r0, #0
    29a0:	bf18      	it	ne
    29a2:	2001      	movne	r0, #1
    29a4:	4b06      	ldr	r3, [pc, #24]	; (29c0 <_adc_sync_init+0x2c>)
    29a6:	4798      	blx	r3

	device->hw = hw;
    29a8:	602c      	str	r4, [r5, #0]

	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
    29aa:	4620      	mov	r0, r4
    29ac:	4b05      	ldr	r3, [pc, #20]	; (29c4 <_adc_sync_init+0x30>)
    29ae:	4798      	blx	r3
    29b0:	4601      	mov	r1, r0
    29b2:	4620      	mov	r0, r4
    29b4:	4b04      	ldr	r3, [pc, #16]	; (29c8 <_adc_sync_init+0x34>)
    29b6:	4798      	blx	r3
}
    29b8:	bd38      	pop	{r3, r4, r5, pc}
    29ba:	bf00      	nop
    29bc:	0000f004 	.word	0x0000f004
    29c0:	0000272d 	.word	0x0000272d
    29c4:	00002969 	.word	0x00002969
    29c8:	000028f1 	.word	0x000028f1

000029cc <_adc_sync_enable_channel>:
 */
void _adc_sync_enable_channel(struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
    29cc:	6802      	ldr	r2, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    29ce:	6b13      	ldr	r3, [r2, #48]	; 0x30
    29d0:	f013 0f03 	tst.w	r3, #3
    29d4:	d1fb      	bne.n	29ce <_adc_sync_enable_channel+0x2>
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
    29d6:	8813      	ldrh	r3, [r2, #0]
    29d8:	b29b      	uxth	r3, r3
    29da:	f043 0302 	orr.w	r3, r3, #2
    29de:	8013      	strh	r3, [r2, #0]
    29e0:	4770      	bx	lr

000029e2 <_adc_sync_get_data_size>:
/**
 * \brief Retrieve ADC conversion data size
 */
uint8_t _adc_sync_get_data_size(const struct _adc_sync_device *const device)
{
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    29e2:	6803      	ldr	r3, [r0, #0]
	tmp = ((Adc *)hw)->CTRLB.reg;
    29e4:	88db      	ldrh	r3, [r3, #6]
    29e6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    29ea:	2b03      	cmp	r3, #3
}
    29ec:	bf0c      	ite	eq
    29ee:	2001      	moveq	r0, #1
    29f0:	2002      	movne	r0, #2
    29f2:	4770      	bx	lr

000029f4 <_adc_sync_is_channel_conversion_done>:
 */
bool _adc_sync_is_channel_conversion_done(const struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	return hri_adc_get_interrupt_RESRDY_bit(device->hw);
    29f4:	6803      	ldr	r3, [r0, #0]
	return (((Adc *)hw)->INTFLAG.reg & ADC_INTFLAG_RESRDY) >> ADC_INTFLAG_RESRDY_Pos;
    29f6:	f893 002e 	ldrb.w	r0, [r3, #46]	; 0x2e
}
    29fa:	f000 0001 	and.w	r0, r0, #1
    29fe:	4770      	bx	lr

00002a00 <_adc_sync_convert>:
/**
 * \brief Make conversion
 */
void _adc_sync_convert(struct _adc_sync_device *const device)
{
	hri_adc_set_SWTRIG_START_bit(device->hw);
    2a00:	6802      	ldr	r2, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    2a02:	6b13      	ldr	r3, [r2, #48]	; 0x30
    2a04:	f3c3 030b 	ubfx	r3, r3, #0, #12
    2a08:	2b00      	cmp	r3, #0
    2a0a:	d1fa      	bne.n	2a02 <_adc_sync_convert+0x2>

static inline void hri_adc_set_SWTRIG_START_bit(const void *const hw)
{
	ADC_CRITICAL_SECTION_ENTER();
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_MASK);
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START;
    2a0c:	7d13      	ldrb	r3, [r2, #20]
    2a0e:	f043 0302 	orr.w	r3, r3, #2
    2a12:	7513      	strb	r3, [r2, #20]
    2a14:	4770      	bx	lr

00002a16 <_adc_sync_read_channel_data>:
 */
uint16_t _adc_sync_read_channel_data(const struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	return hri_adc_read_RESULT_reg(device->hw);
    2a16:	6803      	ldr	r3, [r0, #0]
	return tmp;
}

static inline hri_adc_result_reg_t hri_adc_read_RESULT_reg(const void *const hw)
{
	return ((Adc *)hw)->RESULT.reg;
    2a18:	f8b3 0040 	ldrh.w	r0, [r3, #64]	; 0x40
}
    2a1c:	b280      	uxth	r0, r0
    2a1e:	4770      	bx	lr

00002a20 <_aes_sync_init>:
}

static inline void hri_aes_write_CTRLA_reg(const void *const hw, hri_aes_ctrla_reg_t data)
{
	AES_CRITICAL_SECTION_ENTER();
	((Aes *)hw)->CTRLA.reg = data;
    2a20:	2300      	movs	r3, #0
    2a22:	600b      	str	r3, [r1, #0]
    2a24:	2201      	movs	r2, #1
    2a26:	600a      	str	r2, [r1, #0]
int32_t _aes_sync_init(struct _aes_sync_device *const dev, void *const hw)
{
	hri_aes_write_CTRLA_reg(hw, 0);
	hri_aes_write_CTRLA_reg(hw, AES_CTRLA_SWRST);

	dev->hw = hw;
    2a28:	6001      	str	r1, [r0, #0]
}

static inline void hri_aes_write_DBGCTRL_reg(const void *const hw, hri_aes_dbgctrl_reg_t data)
{
	AES_CRITICAL_SECTION_ENTER();
	((Aes *)hw)->DBGCTRL.reg = data;
    2a2a:	724a      	strb	r2, [r1, #9]

	hri_aes_write_DBGCTRL_reg(dev->hw, _aes.dbgctrl);

	return ERR_NONE;
}
    2a2c:	4618      	mov	r0, r3
    2a2e:	4770      	bx	lr

00002a30 <_aes_sync_enable>:
 */
int32_t _aes_sync_enable(struct _aes_sync_device *const dev)
{
	(void)dev;
	return ERR_NONE;
}
    2a30:	2000      	movs	r0, #0
    2a32:	4770      	bx	lr

00002a34 <_aes_sync_set_key>:

/**
 * \brief              Set AES Key (encryption/decryption)
 */
int32_t _aes_sync_set_key(struct _aes_sync_device *const dev, const uint8_t *key, const enum aes_keysize size)
{
    2a34:	b508      	push	{r3, lr}

	dev->keysize = size;
    2a36:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
	memcpy(dev->key, key, (size + 2) << 3);
    2a3a:	3202      	adds	r2, #2
    2a3c:	00d2      	lsls	r2, r2, #3
    2a3e:	3004      	adds	r0, #4
    2a40:	4b01      	ldr	r3, [pc, #4]	; (2a48 <_aes_sync_set_key+0x14>)
    2a42:	4798      	blx	r3
	return ERR_NONE;
}
    2a44:	2000      	movs	r0, #0
    2a46:	bd08      	pop	{r3, pc}
    2a48:	0000dc9f 	.word	0x0000dc9f

00002a4c <_irq_set>:
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2a4c:	0943      	lsrs	r3, r0, #5
    2a4e:	f000 001f 	and.w	r0, r0, #31
    2a52:	2201      	movs	r2, #1
    2a54:	fa02 f000 	lsl.w	r0, r2, r0
    2a58:	3340      	adds	r3, #64	; 0x40
    2a5a:	4a02      	ldr	r2, [pc, #8]	; (2a64 <_irq_set+0x18>)
    2a5c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    2a60:	4770      	bx	lr
    2a62:	bf00      	nop
    2a64:	e000e100 	.word	0xe000e100

00002a68 <_get_cycles_for_us>:
{
	switch (power) {
	case 9:
		return (us * (freq / 1000000) - 1) + 1;
	case 8:
		return (us * (freq / 100000) - 1) / 10 + 1;
    2a68:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    2a6c:	0140      	lsls	r0, r0, #5
    2a6e:	3801      	subs	r0, #1
    2a70:	4b02      	ldr	r3, [pc, #8]	; (2a7c <_get_cycles_for_us+0x14>)
    2a72:	fba3 3000 	umull	r3, r0, r3, r0
    2a76:	08c0      	lsrs	r0, r0, #3
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    2a78:	3001      	adds	r0, #1
    2a7a:	4770      	bx	lr
    2a7c:	cccccccd 	.word	0xcccccccd

00002a80 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    2a80:	f64b 3380 	movw	r3, #48000	; 0xbb80
    2a84:	fb03 f000 	mul.w	r0, r3, r0
    2a88:	4770      	bx	lr
	...

00002a8c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    2a8c:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    2a8e:	4a0d      	ldr	r2, [pc, #52]	; (2ac4 <_init_chip+0x38>)
    2a90:	8813      	ldrh	r3, [r2, #0]
    2a92:	b29b      	uxth	r3, r3
    2a94:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    2a96:	4b0c      	ldr	r3, [pc, #48]	; (2ac8 <_init_chip+0x3c>)
    2a98:	4798      	blx	r3
	_oscctrl_init_sources();
    2a9a:	4b0c      	ldr	r3, [pc, #48]	; (2acc <_init_chip+0x40>)
    2a9c:	4798      	blx	r3
	_mclk_init();
    2a9e:	4b0c      	ldr	r3, [pc, #48]	; (2ad0 <_init_chip+0x44>)
    2aa0:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    2aa2:	2005      	movs	r0, #5
    2aa4:	4c0b      	ldr	r4, [pc, #44]	; (2ad4 <_init_chip+0x48>)
    2aa6:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    2aa8:	4b0b      	ldr	r3, [pc, #44]	; (2ad8 <_init_chip+0x4c>)
    2aaa:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    2aac:	f640 70fa 	movw	r0, #4090	; 0xffa
    2ab0:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    2ab2:	4a0a      	ldr	r2, [pc, #40]	; (2adc <_init_chip+0x50>)
    2ab4:	6913      	ldr	r3, [r2, #16]
    2ab6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    2aba:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    2abc:	4b08      	ldr	r3, [pc, #32]	; (2ae0 <_init_chip+0x54>)
    2abe:	4798      	blx	r3
    2ac0:	bd10      	pop	{r4, pc}
    2ac2:	bf00      	nop
    2ac4:	41004000 	.word	0x41004000
    2ac8:	000035e1 	.word	0x000035e1
    2acc:	000035f5 	.word	0x000035f5
    2ad0:	00003259 	.word	0x00003259
    2ad4:	00002d51 	.word	0x00002d51
    2ad8:	000035f9 	.word	0x000035f9
    2adc:	40000800 	.word	0x40000800
    2ae0:	00002b59 	.word	0x00002b59

00002ae4 <_dmac_handler>:

/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    2ae4:	b508      	push	{r3, lr}
}

static inline hri_dmac_intpend_reg_t hri_dmac_get_INTPEND_reg(const void *const hw, hri_dmac_intpend_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Dmac *)hw)->INTPEND.reg;
    2ae6:	4a1a      	ldr	r2, [pc, #104]	; (2b50 <_dmac_handler+0x6c>)
    2ae8:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    2aea:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    2aee:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    2af2:	4818      	ldr	r0, [pc, #96]	; (2b54 <_dmac_handler+0x70>)
    2af4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = mask;
}

static inline bool hri_dmac_get_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
    2af8:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    2afc:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e

	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC, channel)) {
    2b00:	f012 0f01 	tst.w	r2, #1
    2b04:	d10a      	bne.n	2b1c <_dmac_handler+0x38>
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
}

static inline bool hri_dmac_get_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
    2b06:	011a      	lsls	r2, r3, #4
    2b08:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2b0c:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    2b10:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
    2b14:	f012 0f02 	tst.w	r2, #2
    2b18:	d10b      	bne.n	2b32 <_dmac_handler+0x4e>
    2b1a:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    2b1c:	011a      	lsls	r2, r3, #4
    2b1e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2b22:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    2b26:	2101      	movs	r1, #1
    2b28:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    2b2c:	6843      	ldr	r3, [r0, #4]
    2b2e:	4798      	blx	r3
    2b30:	bd08      	pop	{r3, pc}
}

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    2b32:	011a      	lsls	r2, r3, #4
    2b34:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2b38:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    2b3c:	2102      	movs	r1, #2
    2b3e:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    2b42:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2b46:	4a03      	ldr	r2, [pc, #12]	; (2b54 <_dmac_handler+0x70>)
    2b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2b4c:	4798      	blx	r3
	}
}
    2b4e:	e7e4      	b.n	2b1a <_dmac_handler+0x36>
    2b50:	4100a000 	.word	0x4100a000
    2b54:	200003c0 	.word	0x200003c0

00002b58 <_dma_init>:
{
    2b58:	b430      	push	{r4, r5}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    2b5a:	4a33      	ldr	r2, [pc, #204]	; (2c28 <_dma_init+0xd0>)
    2b5c:	8813      	ldrh	r3, [r2, #0]
    2b5e:	f023 0302 	bic.w	r3, r3, #2
    2b62:	041b      	lsls	r3, r3, #16
    2b64:	0c1b      	lsrs	r3, r3, #16
    2b66:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    2b68:	8853      	ldrh	r3, [r2, #2]
    2b6a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    2b6e:	041b      	lsls	r3, r3, #16
    2b70:	0c1b      	lsrs	r3, r3, #16
    2b72:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    2b74:	8813      	ldrh	r3, [r2, #0]
    2b76:	b29b      	uxth	r3, r3
    2b78:	f043 0301 	orr.w	r3, r3, #1
    2b7c:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    2b7e:	8813      	ldrh	r3, [r2, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    2b80:	f013 0f01 	tst.w	r3, #1
    2b84:	d1fb      	bne.n	2b7e <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    2b86:	4b28      	ldr	r3, [pc, #160]	; (2c28 <_dma_init+0xd0>)
    2b88:	f44f 6270 	mov.w	r2, #3840	; 0xf00
    2b8c:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    2b8e:	7b5a      	ldrb	r2, [r3, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    2b90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    2b94:	735a      	strb	r2, [r3, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    2b96:	2000      	movs	r0, #0
    2b98:	6158      	str	r0, [r3, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    2b9a:	4a24      	ldr	r2, [pc, #144]	; (2c2c <_dma_init+0xd4>)
    2b9c:	f502 71c0 	add.w	r1, r2, #384	; 0x180
	((Dmac *)hw)->BASEADDR.reg = data;
    2ba0:	6359      	str	r1, [r3, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    2ba2:	f502 7260 	add.w	r2, r2, #896	; 0x380
	((Dmac *)hw)->WRBADDR.reg = data;
    2ba6:	639a      	str	r2, [r3, #56]	; 0x38
    2ba8:	4b21      	ldr	r3, [pc, #132]	; (2c30 <_dma_init+0xd8>)
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    2baa:	f5a1 75c0 	sub.w	r5, r1, #384	; 0x180
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    2bae:	681c      	ldr	r4, [r3, #0]
    2bb0:	0101      	lsls	r1, r0, #4
    2bb2:	f101 4282 	add.w	r2, r1, #1090519040	; 0x41000000
    2bb6:	f502 4220 	add.w	r2, r2, #40960	; 0xa000

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    2bba:	6414      	str	r4, [r2, #64]	; 0x40
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    2bbc:	791c      	ldrb	r4, [r3, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    2bbe:	f882 4045 	strb.w	r4, [r2, #69]	; 0x45
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    2bc2:	795c      	ldrb	r4, [r3, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    2bc4:	f882 4046 	strb.w	r4, [r2, #70]	; 0x46
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    2bc8:	88da      	ldrh	r2, [r3, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    2bca:	4429      	add	r1, r5
    2bcc:	f8a1 2180 	strh.w	r2, [r1, #384]	; 0x180
    2bd0:	3001      	adds	r0, #1
    2bd2:	3308      	adds	r3, #8
	for (i = 0; i < DMAC_CH_NUM; i++) {
    2bd4:	2820      	cmp	r0, #32
    2bd6:	d1ea      	bne.n	2bae <_dma_init+0x56>
    2bd8:	231f      	movs	r3, #31
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2bda:	2001      	movs	r0, #1
    2bdc:	4915      	ldr	r1, [pc, #84]	; (2c34 <_dma_init+0xdc>)
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    2bde:	b29a      	uxth	r2, r3
  if ((int32_t)(IRQn) >= 0)
    2be0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    2be4:	d00b      	beq.n	2bfe <_dma_init+0xa6>
    2be6:	3301      	adds	r3, #1
	for (i = 0; i < 5; i++) {
    2be8:	2b24      	cmp	r3, #36	; 0x24
    2bea:	d1f8      	bne.n	2bde <_dma_init+0x86>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    2bec:	4a0e      	ldr	r2, [pc, #56]	; (2c28 <_dma_init+0xd0>)
    2bee:	8813      	ldrh	r3, [r2, #0]
    2bf0:	b29b      	uxth	r3, r3
    2bf2:	f043 0302 	orr.w	r3, r3, #2
    2bf6:	8013      	strh	r3, [r2, #0]
}
    2bf8:	2000      	movs	r0, #0
    2bfa:	bc30      	pop	{r4, r5}
    2bfc:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2bfe:	095c      	lsrs	r4, r3, #5
    2c00:	f002 021f 	and.w	r2, r2, #31
    2c04:	fa00 f202 	lsl.w	r2, r0, r2
    2c08:	f104 0520 	add.w	r5, r4, #32
    2c0c:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2c10:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2c14:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2c18:	f104 0560 	add.w	r5, r4, #96	; 0x60
    2c1c:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2c20:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
    2c24:	e7df      	b.n	2be6 <_dma_init+0x8e>
    2c26:	bf00      	nop
    2c28:	4100a000 	.word	0x4100a000
    2c2c:	200003c0 	.word	0x200003c0
    2c30:	0000f01c 	.word	0x0000f01c
    2c34:	e000e100 	.word	0xe000e100

00002c38 <_dma_set_destination_address>:
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    2c38:	4b03      	ldr	r3, [pc, #12]	; (2c48 <_dma_set_destination_address+0x10>)
    2c3a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    2c3e:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
}
    2c42:	2000      	movs	r0, #0
    2c44:	4770      	bx	lr
    2c46:	bf00      	nop
    2c48:	200003c0 	.word	0x200003c0

00002c4c <_dma_set_source_address>:
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    2c4c:	4b03      	ldr	r3, [pc, #12]	; (2c5c <_dma_set_source_address+0x10>)
    2c4e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    2c52:	f8c0 1184 	str.w	r1, [r0, #388]	; 0x184
}
    2c56:	2000      	movs	r0, #0
    2c58:	4770      	bx	lr
    2c5a:	bf00      	nop
    2c5c:	200003c0 	.word	0x200003c0

00002c60 <_dma_set_data_amount>:
{
    2c60:	b430      	push	{r4, r5}
	return ((DmacDescriptor *)hw)->DSTADDR.reg;
    2c62:	4a18      	ldr	r2, [pc, #96]	; (2cc4 <_dma_set_data_amount+0x64>)
    2c64:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    2c68:	f8d2 5188 	ldr.w	r5, [r2, #392]	; 0x188
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    2c6c:	f8b2 3180 	ldrh.w	r3, [r2, #384]	; 0x180
	uint8_t  beat_size = hri_dmacdescriptor_read_BTCTRL_BEATSIZE_bf(&_descriptor_section[channel]);
    2c70:	f3c3 2301 	ubfx	r3, r3, #8, #2
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    2c74:	f8b2 2180 	ldrh.w	r2, [r2, #384]	; 0x180
	if (hri_dmacdescriptor_get_BTCTRL_DSTINC_bit(&_descriptor_section[channel])) {
    2c78:	f412 6f00 	tst.w	r2, #2048	; 0x800
    2c7c:	d007      	beq.n	2c8e <_dma_set_data_amount+0x2e>
		hri_dmacdescriptor_write_DSTADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    2c7e:	fa01 f403 	lsl.w	r4, r1, r3
    2c82:	442c      	add	r4, r5
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    2c84:	4a0f      	ldr	r2, [pc, #60]	; (2cc4 <_dma_set_data_amount+0x64>)
    2c86:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    2c8a:	f8c2 4188 	str.w	r4, [r2, #392]	; 0x188
	return ((DmacDescriptor *)hw)->SRCADDR.reg;
    2c8e:	4a0d      	ldr	r2, [pc, #52]	; (2cc4 <_dma_set_data_amount+0x64>)
    2c90:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    2c94:	f8d2 4184 	ldr.w	r4, [r2, #388]	; 0x184
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    2c98:	f8b2 2180 	ldrh.w	r2, [r2, #384]	; 0x180
	if (hri_dmacdescriptor_get_BTCTRL_SRCINC_bit(&_descriptor_section[channel])) {
    2c9c:	f412 6f80 	tst.w	r2, #1024	; 0x400
    2ca0:	d007      	beq.n	2cb2 <_dma_set_data_amount+0x52>
		hri_dmacdescriptor_write_SRCADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    2ca2:	fa01 f303 	lsl.w	r3, r1, r3
    2ca6:	4423      	add	r3, r4
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    2ca8:	4a06      	ldr	r2, [pc, #24]	; (2cc4 <_dma_set_data_amount+0x64>)
    2caa:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    2cae:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
	hri_dmacdescriptor_write_BTCNT_reg(&_descriptor_section[channel], amount);
    2cb2:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCNT.reg = data;
    2cb4:	4b03      	ldr	r3, [pc, #12]	; (2cc4 <_dma_set_data_amount+0x64>)
    2cb6:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    2cba:	f8a0 1182 	strh.w	r1, [r0, #386]	; 0x182
}
    2cbe:	2000      	movs	r0, #0
    2cc0:	bc30      	pop	{r4, r5}
    2cc2:	4770      	bx	lr
    2cc4:	200003c0 	.word	0x200003c0

00002cc8 <_dma_enable_transaction>:
{
    2cc8:	b410      	push	{r4}
	((DmacDescriptor *)hw)->BTCTRL.reg |= DMAC_BTCTRL_VALID;
    2cca:	0103      	lsls	r3, r0, #4
    2ccc:	4c0d      	ldr	r4, [pc, #52]	; (2d04 <_dma_enable_transaction+0x3c>)
    2cce:	441c      	add	r4, r3
    2cd0:	f8b4 2180 	ldrh.w	r2, [r4, #384]	; 0x180
    2cd4:	b292      	uxth	r2, r2
    2cd6:	f042 0201 	orr.w	r2, r2, #1
    2cda:	f8a4 2180 	strh.w	r2, [r4, #384]	; 0x180
    2cde:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2ce2:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    2ce6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    2ce8:	f042 0202 	orr.w	r2, r2, #2
    2cec:	641a      	str	r2, [r3, #64]	; 0x40
	if (software_trigger) {
    2cee:	b131      	cbz	r1, 2cfe <_dma_enable_transaction+0x36>
	((Dmac *)hw)->SWTRIGCTRL.reg |= mask;
    2cf0:	4a05      	ldr	r2, [pc, #20]	; (2d08 <_dma_enable_transaction+0x40>)
    2cf2:	6911      	ldr	r1, [r2, #16]
		hri_dmac_set_SWTRIGCTRL_reg(DMAC, 1 << channel);
    2cf4:	2301      	movs	r3, #1
    2cf6:	fa03 f000 	lsl.w	r0, r3, r0
    2cfa:	4308      	orrs	r0, r1
    2cfc:	6110      	str	r0, [r2, #16]
}
    2cfe:	2000      	movs	r0, #0
    2d00:	bc10      	pop	{r4}
    2d02:	4770      	bx	lr
    2d04:	200003c0 	.word	0x200003c0
    2d08:	4100a000 	.word	0x4100a000

00002d0c <DMAC_0_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_0_Handler(void)
{
    2d0c:	b508      	push	{r3, lr}
	_dmac_handler();
    2d0e:	4b01      	ldr	r3, [pc, #4]	; (2d14 <DMAC_0_Handler+0x8>)
    2d10:	4798      	blx	r3
    2d12:	bd08      	pop	{r3, pc}
    2d14:	00002ae5 	.word	0x00002ae5

00002d18 <DMAC_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_1_Handler(void)
{
    2d18:	b508      	push	{r3, lr}
	_dmac_handler();
    2d1a:	4b01      	ldr	r3, [pc, #4]	; (2d20 <DMAC_1_Handler+0x8>)
    2d1c:	4798      	blx	r3
    2d1e:	bd08      	pop	{r3, pc}
    2d20:	00002ae5 	.word	0x00002ae5

00002d24 <DMAC_2_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_2_Handler(void)
{
    2d24:	b508      	push	{r3, lr}
	_dmac_handler();
    2d26:	4b01      	ldr	r3, [pc, #4]	; (2d2c <DMAC_2_Handler+0x8>)
    2d28:	4798      	blx	r3
    2d2a:	bd08      	pop	{r3, pc}
    2d2c:	00002ae5 	.word	0x00002ae5

00002d30 <DMAC_3_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_3_Handler(void)
{
    2d30:	b508      	push	{r3, lr}
	_dmac_handler();
    2d32:	4b01      	ldr	r3, [pc, #4]	; (2d38 <DMAC_3_Handler+0x8>)
    2d34:	4798      	blx	r3
    2d36:	bd08      	pop	{r3, pc}
    2d38:	00002ae5 	.word	0x00002ae5

00002d3c <DMAC_4_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_4_Handler(void)
{
    2d3c:	b508      	push	{r3, lr}
	_dmac_handler();
    2d3e:	4b01      	ldr	r3, [pc, #4]	; (2d44 <DMAC_4_Handler+0x8>)
    2d40:	4798      	blx	r3
    2d42:	bd08      	pop	{r3, pc}
    2d44:	00002ae5 	.word	0x00002ae5

00002d48 <_crc_sync_init>:
/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
	device->hw = hw;
    2d48:	6001      	str	r1, [r0, #0]

	return ERR_NONE;
}
    2d4a:	2000      	movs	r0, #0
    2d4c:	4770      	bx	lr
	...

00002d50 <_gclk_init_generators_by_fref>:
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
#if CONF_GCLK_GEN_0_GENEN == 1
	if (bm & (1ul << 0)) {
    2d50:	f010 0f01 	tst.w	r0, #1
    2d54:	d002      	beq.n	2d5c <_gclk_init_generators_by_fref+0xc>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    2d56:	4a05      	ldr	r2, [pc, #20]	; (2d6c <_gclk_init_generators_by_fref+0x1c>)
    2d58:	4b05      	ldr	r3, [pc, #20]	; (2d70 <_gclk_init_generators_by_fref+0x20>)
    2d5a:	621a      	str	r2, [r3, #32]
		        | (CONF_GCLK_GEN_0_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_0_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GEN_0_GENEN << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_1_GENEN == 1
	if (bm & (1ul << 1)) {
    2d5c:	f010 0f02 	tst.w	r0, #2
    2d60:	d002      	beq.n	2d68 <_gclk_init_generators_by_fref+0x18>
    2d62:	4a04      	ldr	r2, [pc, #16]	; (2d74 <_gclk_init_generators_by_fref+0x24>)
    2d64:	4b02      	ldr	r3, [pc, #8]	; (2d70 <_gclk_init_generators_by_fref+0x20>)
    2d66:	625a      	str	r2, [r3, #36]	; 0x24
    2d68:	4770      	bx	lr
    2d6a:	bf00      	nop
    2d6c:	00012f06 	.word	0x00012f06
    2d70:	40001c00 	.word	0x40001c00
    2d74:	00012f04 	.word	0x00012f04

00002d78 <GMAC_Handler>:

/*
 * \internal GMAC interrupt handler
 */
void GMAC_Handler(void)
{
    2d78:	b500      	push	{lr}
    2d7a:	b083      	sub	sp, #12
	volatile uint32_t tsr;
	volatile uint32_t rsr;

	tsr = hri_gmac_read_TSR_reg(_gmac_dev->hw);
    2d7c:	4b14      	ldr	r3, [pc, #80]	; (2dd0 <GMAC_Handler+0x58>)
    2d7e:	6818      	ldr	r0, [r3, #0]
    2d80:	6803      	ldr	r3, [r0, #0]
	GMAC_CRITICAL_SECTION_LEAVE();
}

static inline hri_gmac_tsr_reg_t hri_gmac_read_TSR_reg(const void *const hw)
{
	return ((Gmac *)hw)->TSR.reg;
    2d82:	695a      	ldr	r2, [r3, #20]
    2d84:	9201      	str	r2, [sp, #4]
	GMAC_CRITICAL_SECTION_LEAVE();
}

static inline hri_gmac_rsr_reg_t hri_gmac_read_RSR_reg(const void *const hw)
{
	return ((Gmac *)hw)->RSR.reg;
    2d86:	6a1a      	ldr	r2, [r3, #32]
	rsr = hri_gmac_read_RSR_reg(_gmac_dev->hw);
    2d88:	9200      	str	r2, [sp, #0]
	GMAC_CRITICAL_SECTION_LEAVE();
}

static inline hri_gmac_isr_reg_t hri_gmac_read_ISR_reg(const void *const hw)
{
	return ((Gmac *)hw)->ISR.reg;
    2d8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	/* Must be Clear ISR (Clear on read) */
	hri_gmac_read_ISR_reg(_gmac_dev->hw);

	/* Frame transmited */
	if (tsr & GMAC_TSR_TXCOMP) {
    2d8c:	9a01      	ldr	r2, [sp, #4]
    2d8e:	f012 0f20 	tst.w	r2, #32
    2d92:	d00b      	beq.n	2dac <GMAC_Handler+0x34>
		hri_gmac_write_TSR_reg(_gmac_dev->hw, tsr);
    2d94:	9a01      	ldr	r2, [sp, #4]
	((Gmac *)hw)->TSR.reg = data;
    2d96:	615a      	str	r2, [r3, #20]
		if ((_txbuf_descrs[_txbuf_index].status.bm.used) && (_gmac_dev->cb.transmited != NULL)) {
    2d98:	4b0d      	ldr	r3, [pc, #52]	; (2dd0 <GMAC_Handler+0x58>)
    2d9a:	685a      	ldr	r2, [r3, #4]
    2d9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    2da0:	7bdb      	ldrb	r3, [r3, #15]
    2da2:	09db      	lsrs	r3, r3, #7
    2da4:	d002      	beq.n	2dac <GMAC_Handler+0x34>
    2da6:	6843      	ldr	r3, [r0, #4]
    2da8:	b103      	cbz	r3, 2dac <GMAC_Handler+0x34>
			_gmac_dev->cb.transmited(_gmac_dev);
    2daa:	4798      	blx	r3
		}
	}

	/* Frame received */
	if (rsr & GMAC_RSR_REC) {
    2dac:	9b00      	ldr	r3, [sp, #0]
    2dae:	f013 0f02 	tst.w	r3, #2
    2db2:	d004      	beq.n	2dbe <GMAC_Handler+0x46>
		if (_gmac_dev->cb.received != NULL) {
    2db4:	4b06      	ldr	r3, [pc, #24]	; (2dd0 <GMAC_Handler+0x58>)
    2db6:	6818      	ldr	r0, [r3, #0]
    2db8:	6883      	ldr	r3, [r0, #8]
    2dba:	b103      	cbz	r3, 2dbe <GMAC_Handler+0x46>
			_gmac_dev->cb.received(_gmac_dev);
    2dbc:	4798      	blx	r3
		}
	}
	hri_gmac_write_RSR_reg(_gmac_dev->hw, rsr);
    2dbe:	4b04      	ldr	r3, [pc, #16]	; (2dd0 <GMAC_Handler+0x58>)
    2dc0:	681b      	ldr	r3, [r3, #0]
    2dc2:	681b      	ldr	r3, [r3, #0]
    2dc4:	9a00      	ldr	r2, [sp, #0]
	((Gmac *)hw)->RSR.reg = data;
    2dc6:	621a      	str	r2, [r3, #32]
}
    2dc8:	b003      	add	sp, #12
    2dca:	f85d fb04 	ldr.w	pc, [sp], #4
    2dce:	bf00      	nop
    2dd0:	20000940 	.word	0x20000940

00002dd4 <_mac_async_init>:

int32_t _mac_async_init(struct _mac_async_device *const dev, void *const hw)
{
    2dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
	dev->hw = hw;
    2dd6:	6001      	str	r1, [r0, #0]
	((Gmac *)hw)->NCR.reg = data;
    2dd8:	4b32      	ldr	r3, [pc, #200]	; (2ea4 <_mac_async_init+0xd0>)
    2dda:	600b      	str	r3, [r1, #0]
	                       (CONF_GMAC_NCR_LBL ? GMAC_NCR_LBL : 0) | (CONF_GMAC_NCR_MPE ? GMAC_NCR_MPE : 0)
	                           | (CONF_GMAC_NCR_WESTAT ? GMAC_NCR_WESTAT : 0) | (CONF_GMAC_NCR_BP ? GMAC_NCR_BP : 0)
	                           | (CONF_GMAC_NCR_ENPBPR ? GMAC_NCR_ENPBPR : 0)
	                           | (CONF_GMAC_NCR_TXPBPF ? GMAC_NCR_TXPBPF : 0));
	hri_gmac_write_NCFGR_reg(
	    dev->hw,
    2ddc:	6803      	ldr	r3, [r0, #0]
	((Gmac *)hw)->NCFGR.reg = data;
    2dde:	4a32      	ldr	r2, [pc, #200]	; (2ea8 <_mac_async_init+0xd4>)
    2de0:	605a      	str	r2, [r3, #4]
	        | (CONF_GMAC_NCFGR_LFERD ? GMAC_NCFGR_LFERD : 0) | (CONF_GMAC_NCFGR_RFCS ? GMAC_NCFGR_RFCS : 0)
	        | GMAC_NCFGR_CLK(CONF_GMAC_NCFGR_CLK) | (CONF_GMAC_NCFGR_DCPF ? GMAC_NCFGR_DCPF : 0)
	        | (CONF_GMAC_NCFGR_RXCOEN ? GMAC_NCFGR_RXCOEN : 0) | (CONF_GMAC_NCFGR_EFRHD ? GMAC_NCFGR_EFRHD : 0)
	        | (CONF_GMAC_NCFGR_IRXFCS ? GMAC_NCFGR_IRXFCS : 0) | (CONF_GMAC_NCFGR_IPGSEN ? GMAC_NCFGR_IPGSEN : 0)
	        | (CONF_GMAC_NCFGR_RXBP ? GMAC_NCFGR_RXBP : 0) | (CONF_GMAC_NCFGR_IRXER ? GMAC_NCFGR_IRXER : 0));
	hri_gmac_write_UR_reg(dev->hw, (CONF_GMAC_UR_MII ? GMAC_UR_MII : 0));
    2de2:	6803      	ldr	r3, [r0, #0]
	((Gmac *)hw)->UR.reg = data;
    2de4:	2201      	movs	r2, #1
    2de6:	60da      	str	r2, [r3, #12]
	hri_gmac_write_DCFGR_reg(
	    dev->hw,
    2de8:	6803      	ldr	r3, [r0, #0]
	((Gmac *)hw)->DCFGR.reg = data;
    2dea:	4a30      	ldr	r2, [pc, #192]	; (2eac <_mac_async_init+0xd8>)
    2dec:	611a      	str	r2, [r3, #16]
	    GMAC_DCFGR_FBLDO(CONF_GMAC_DCFGR_FBLDO) | (CONF_GMAC_DCFGR_ESMA ? GMAC_DCFGR_ESMA : 0)
	        | (CONF_GMAC_DCFGR_ESPA ? GMAC_DCFGR_ESPA : 0) | GMAC_DCFGR_RXBMS(CONF_GMAC_DCFGR_RXBMS)
	        | (CONF_GMAC_DCFGR_TXPBMS ? GMAC_DCFGR_TXPBMS : 0) | (CONF_GMAC_DCFGR_TXCOEN ? GMAC_DCFGR_TXCOEN : 0)
	        | GMAC_DCFGR_DRBS(CONF_GMAC_DCFGR_DRBS) | (CONF_GMAC_DCFGR_DDRP ? GMAC_DCFGR_DDRP : 0));
	hri_gmac_write_WOL_reg(dev->hw, 0);
    2dee:	6802      	ldr	r2, [r0, #0]
}

static inline void hri_gmac_write_WOL_reg(const void *const hw, hri_gmac_wol_reg_t data)
{
	GMAC_CRITICAL_SECTION_ENTER();
	((Gmac *)hw)->WOL.reg = data;
    2df0:	2300      	movs	r3, #0
    2df2:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
	hri_gmac_write_IPGS_reg(dev->hw, GMAC_IPGS_FL((CONF_GMAC_IPGS_FL_MUL << 8) | CONF_GMAC_IPGS_FL_DIV));
    2df6:	6802      	ldr	r2, [r0, #0]
}

static inline void hri_gmac_write_IPGS_reg(const void *const hw, hri_gmac_ipgs_reg_t data)
{
	GMAC_CRITICAL_SECTION_ENTER();
	((Gmac *)hw)->IPGS.reg = data;
    2df8:	f240 1101 	movw	r1, #257	; 0x101
    2dfc:	f8c2 10bc 	str.w	r1, [r2, #188]	; 0xbc
    2e00:	4f2b      	ldr	r7, [pc, #172]	; (2eb0 <_mac_async_init+0xdc>)
    2e02:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
    2e06:	f107 0e08 	add.w	lr, r7, #8
    2e0a:	4671      	mov	r1, lr
		_txbuf_descrs[i].address        = (uint32_t)_txbuf[i];
    2e0c:	463e      	mov	r6, r7
    2e0e:	46f4      	mov	ip, lr
		_txbuf_descrs[i].status.val     = 0;
    2e10:	461f      	mov	r7, r3
		_txbuf_descrs[i].address        = (uint32_t)_txbuf[i];
    2e12:	f84c 4033 	str.w	r4, [ip, r3, lsl #3]
		_txbuf_descrs[i].status.val     = 0;
    2e16:	604f      	str	r7, [r1, #4]
		_txbuf_descrs[i].status.bm.used = 1;
    2e18:	eb06 05c3 	add.w	r5, r6, r3, lsl #3
    2e1c:	7bea      	ldrb	r2, [r5, #15]
    2e1e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    2e22:	73ea      	strb	r2, [r5, #15]
	for (i = 0; i < CONF_GMAC_TXDESCR_NUM; i++) {
    2e24:	3301      	adds	r3, #1
    2e26:	f204 54dc 	addw	r4, r4, #1500	; 0x5dc
    2e2a:	3108      	adds	r1, #8
    2e2c:	2b10      	cmp	r3, #16
    2e2e:	d1f0      	bne.n	2e12 <_mac_async_init+0x3e>
	_txbuf_descrs[CONF_GMAC_TXDESCR_NUM - 1].status.bm.wrap = 1;
    2e30:	4b1f      	ldr	r3, [pc, #124]	; (2eb0 <_mac_async_init+0xdc>)
    2e32:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    2e36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    2e3a:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
	_txbuf_index                                            = 0;
    2e3e:	2200      	movs	r2, #0
    2e40:	605a      	str	r2, [r3, #4]
	_last_txbuf_index                                       = 0;
    2e42:	4b1c      	ldr	r3, [pc, #112]	; (2eb4 <_mac_async_init+0xe0>)
    2e44:	f8c3 2988 	str.w	r2, [r3, #2440]	; 0x988
    2e48:	f603 13a8 	addw	r3, r3, #2472	; 0x9a8
    2e4c:	4a1a      	ldr	r2, [pc, #104]	; (2eb8 <_mac_async_init+0xe4>)
    2e4e:	f503 6400 	add.w	r4, r3, #2048	; 0x800
		_rxbuf_descrs[i].status.val  = 0;
    2e52:	2100      	movs	r1, #0
		_rxbuf_descrs[i].address.val = (uint32_t)_rxbuf[i];
    2e54:	f842 3c04 	str.w	r3, [r2, #-4]
		_rxbuf_descrs[i].status.val  = 0;
    2e58:	f842 1b08 	str.w	r1, [r2], #8
    2e5c:	3380      	adds	r3, #128	; 0x80
	for (i = 0; i < CONF_GMAC_RXDESCR_NUM; i++) {
    2e5e:	42a3      	cmp	r3, r4
    2e60:	d1f8      	bne.n	2e54 <_mac_async_init+0x80>
	_rxbuf_descrs[CONF_GMAC_RXDESCR_NUM - 1].address.bm.wrap = 1;
    2e62:	4b16      	ldr	r3, [pc, #88]	; (2ebc <_mac_async_init+0xe8>)
    2e64:	f893 2128 	ldrb.w	r2, [r3, #296]	; 0x128
    2e68:	f042 0202 	orr.w	r2, r2, #2
    2e6c:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
	_rxbuf_index                                             = 0;
    2e70:	2100      	movs	r1, #0
    2e72:	f8c3 1130 	str.w	r1, [r3, #304]	; 0x130
	hri_gmac_write_TBQB_reg(dev->hw, (uint32_t)_txbuf_descrs);
    2e76:	6802      	ldr	r2, [r0, #0]
	((Gmac *)hw)->TBQB.reg = data;
    2e78:	f8c2 e01c 	str.w	lr, [r2, #28]
	hri_gmac_write_RBQB_reg(dev->hw, (uint32_t)_rxbuf_descrs);
    2e7c:	6802      	ldr	r2, [r0, #0]
    2e7e:	33b0      	adds	r3, #176	; 0xb0
	((Gmac *)hw)->RBQB.reg = data;
    2e80:	6193      	str	r3, [r2, #24]
	_mac_init_bufdescr(dev);

	_gmac_dev = dev;
    2e82:	4b0b      	ldr	r3, [pc, #44]	; (2eb0 <_mac_async_init+0xdc>)
    2e84:	6018      	str	r0, [r3, #0]
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2e86:	4b0e      	ldr	r3, [pc, #56]	; (2ec0 <_mac_async_init+0xec>)
    2e88:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    2e8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
    2e90:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2e94:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2e98:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2e9c:	609a      	str	r2, [r3, #8]
	NVIC_DisableIRQ(GMAC_IRQn);
	NVIC_ClearPendingIRQ(GMAC_IRQn);
	NVIC_EnableIRQ(GMAC_IRQn);

	return ERR_NONE;
}
    2e9e:	4608      	mov	r0, r1
    2ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ea2:	bf00      	nop
    2ea4:	00030192 	.word	0x00030192
    2ea8:	4091211b 	.word	0x4091211b
    2eac:	00020704 	.word	0x00020704
    2eb0:	20000940 	.word	0x20000940
    2eb4:	20005e18 	.word	0x20005e18
    2eb8:	20006fc4 	.word	0x20006fc4
    2ebc:	20006f10 	.word	0x20006f10
    2ec0:	e000e100 	.word	0xe000e100

00002ec4 <_mac_async_enable>:
	return ERR_NONE;
}

int32_t _mac_async_enable(struct _mac_async_device *const dev)
{
	hri_gmac_set_NCR_reg(dev->hw, GMAC_NCR_RXEN | GMAC_NCR_TXEN);
    2ec4:	6802      	ldr	r2, [r0, #0]
	((Gmac *)hw)->NCR.reg |= mask;
    2ec6:	6813      	ldr	r3, [r2, #0]
    2ec8:	f043 030c 	orr.w	r3, r3, #12
    2ecc:	6013      	str	r3, [r2, #0]
	return ERR_NONE;
}
    2ece:	2000      	movs	r0, #0
    2ed0:	4770      	bx	lr
	...

00002ed4 <_mac_async_write>:
	hri_gmac_clear_NCR_reg(dev->hw, GMAC_NCR_RXEN | GMAC_NCR_TXEN);
	return ERR_NONE;
}

int32_t _mac_async_write(struct _mac_async_device *const dev, uint8_t *buf, uint32_t len)
{
    2ed4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2ed8:	4682      	mov	sl, r0
    2eda:	4615      	mov	r5, r2
	uint32_t pos;
	uint32_t blen;
	uint32_t i;

	if (_txbuf_descrs[_last_txbuf_index].status.bm.used && !_txbuf_descrs[_last_txbuf_index].status.bm.last_buf) {
    2edc:	4b58      	ldr	r3, [pc, #352]	; (3040 <_mac_async_write+0x16c>)
    2ede:	f8d3 2988 	ldr.w	r2, [r3, #2440]	; 0x988
    2ee2:	4b58      	ldr	r3, [pc, #352]	; (3044 <_mac_async_write+0x170>)
    2ee4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    2ee8:	7bdb      	ldrb	r3, [r3, #15]
    2eea:	09db      	lsrs	r3, r3, #7
    2eec:	d01d      	beq.n	2f2a <_mac_async_write+0x56>
    2eee:	4b54      	ldr	r3, [pc, #336]	; (3040 <_mac_async_write+0x16c>)
    2ef0:	f8d3 2988 	ldr.w	r2, [r3, #2440]	; 0x988
    2ef4:	4b53      	ldr	r3, [pc, #332]	; (3044 <_mac_async_write+0x170>)
    2ef6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    2efa:	7b5b      	ldrb	r3, [r3, #13]
    2efc:	09db      	lsrs	r3, r3, #7
    2efe:	d114      	bne.n	2f2a <_mac_async_write+0x56>
    2f00:	2001      	movs	r0, #1
		/* Set used flag from first descriptor to last descriptor,
		 * as DMA olny set the first used flag */
		for (i = 1; i < CONF_GMAC_TXDESCR_NUM; i++) {
			pos = _last_txbuf_index + i;
    2f02:	4e4f      	ldr	r6, [pc, #316]	; (3040 <_mac_async_write+0x16c>)
			if (pos >= CONF_GMAC_TXDESCR_NUM) {
				pos -= CONF_GMAC_TXDESCR_NUM;
			}
			_txbuf_descrs[pos].status.bm.used = 1;
    2f04:	4c4f      	ldr	r4, [pc, #316]	; (3044 <_mac_async_write+0x170>)
			pos = _last_txbuf_index + i;
    2f06:	f8d6 3988 	ldr.w	r3, [r6, #2440]	; 0x988
    2f0a:	4403      	add	r3, r0
			if (pos >= CONF_GMAC_TXDESCR_NUM) {
    2f0c:	2b0f      	cmp	r3, #15
				pos -= CONF_GMAC_TXDESCR_NUM;
    2f0e:	bf88      	it	hi
    2f10:	3b10      	subhi	r3, #16
			_txbuf_descrs[pos].status.bm.used = 1;
    2f12:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    2f16:	7bda      	ldrb	r2, [r3, #15]
    2f18:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    2f1c:	73da      	strb	r2, [r3, #15]

			if (_txbuf_descrs[pos].status.bm.last_buf) {
    2f1e:	7b5b      	ldrb	r3, [r3, #13]
    2f20:	09db      	lsrs	r3, r3, #7
    2f22:	d102      	bne.n	2f2a <_mac_async_write+0x56>
		for (i = 1; i < CONF_GMAC_TXDESCR_NUM; i++) {
    2f24:	3001      	adds	r0, #1
    2f26:	2810      	cmp	r0, #16
    2f28:	d1ed      	bne.n	2f06 <_mac_async_write+0x32>
				break;
			}
		}
	}

	if (!_txbuf_descrs[_txbuf_index].status.bm.used) {
    2f2a:	4b46      	ldr	r3, [pc, #280]	; (3044 <_mac_async_write+0x170>)
    2f2c:	685a      	ldr	r2, [r3, #4]
    2f2e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    2f32:	7bdb      	ldrb	r3, [r3, #15]
    2f34:	09db      	lsrs	r3, r3, #7
    2f36:	d07b      	beq.n	3030 <_mac_async_write+0x15c>
		return ERR_NO_RESOURCE;
	}

	/* Check if have enough buffers, the first buffer already checked */
	if (len > CONF_GMAC_TXBUF_SIZE) {
    2f38:	f240 53dc 	movw	r3, #1500	; 0x5dc
    2f3c:	429d      	cmp	r5, r3
    2f3e:	d916      	bls.n	2f6e <_mac_async_write+0x9a>
    2f40:	f2a5 50dc 	subw	r0, r5, #1500	; 0x5dc
    2f44:	2201      	movs	r2, #1
		for (i = 1; i < CONF_GMAC_TXDESCR_NUM; i++) {
			pos = _txbuf_index + i;
    2f46:	4c3f      	ldr	r4, [pc, #252]	; (3044 <_mac_async_write+0x170>)

			if (!_txbuf_descrs[pos].status.bm.used) {
				return ERR_NO_RESOURCE;
			}

			if ((len - (CONF_GMAC_TXBUF_SIZE * i)) < CONF_GMAC_TXBUF_SIZE) {
    2f48:	f240 56db 	movw	r6, #1499	; 0x5db
			pos = _txbuf_index + i;
    2f4c:	6863      	ldr	r3, [r4, #4]
    2f4e:	4413      	add	r3, r2
			if (pos >= CONF_GMAC_TXDESCR_NUM) {
    2f50:	2b0f      	cmp	r3, #15
				pos -= CONF_GMAC_TXDESCR_NUM;
    2f52:	bf88      	it	hi
    2f54:	3b10      	subhi	r3, #16
			if (!_txbuf_descrs[pos].status.bm.used) {
    2f56:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    2f5a:	7bdb      	ldrb	r3, [r3, #15]
    2f5c:	09db      	lsrs	r3, r3, #7
    2f5e:	d06b      	beq.n	3038 <_mac_async_write+0x164>
			if ((len - (CONF_GMAC_TXBUF_SIZE * i)) < CONF_GMAC_TXBUF_SIZE) {
    2f60:	42b0      	cmp	r0, r6
    2f62:	d904      	bls.n	2f6e <_mac_async_write+0x9a>
		for (i = 1; i < CONF_GMAC_TXDESCR_NUM; i++) {
    2f64:	3201      	adds	r2, #1
    2f66:	f2a0 50dc 	subw	r0, r0, #1500	; 0x5dc
    2f6a:	2a10      	cmp	r2, #16
    2f6c:	d1ee      	bne.n	2f4c <_mac_async_write+0x78>
				break;
			}
		}
	}
	_last_txbuf_index = _txbuf_index;
    2f6e:	4b35      	ldr	r3, [pc, #212]	; (3044 <_mac_async_write+0x170>)
    2f70:	685a      	ldr	r2, [r3, #4]
    2f72:	4b33      	ldr	r3, [pc, #204]	; (3040 <_mac_async_write+0x16c>)
    2f74:	f8c3 2988 	str.w	r2, [r3, #2440]	; 0x988
    2f78:	460e      	mov	r6, r1
    2f7a:	f501 49bb 	add.w	r9, r1, #23936	; 0x5d80
    2f7e:	f109 0940 	add.w	r9, r9, #64	; 0x40

	/* Write data to transmit buffer */
	for (i = 0; i < CONF_GMAC_TXDESCR_NUM; i++) {
		blen = min(len, CONF_GMAC_TXBUF_SIZE);
		memcpy(_txbuf[_txbuf_index], buf + (i * CONF_GMAC_TXBUF_SIZE), blen);
    2f82:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 3044 <_mac_async_write+0x170>
    2f86:	f108 0ba0 	add.w	fp, r8, #160	; 0xa0
    2f8a:	4f2f      	ldr	r7, [pc, #188]	; (3048 <_mac_async_write+0x174>)
    2f8c:	e029      	b.n	2fe2 <_mac_async_write+0x10e>

		if (len > 0) {
			/* Here the Used flag be set to zero */
			_txbuf_descrs[_txbuf_index].status.val = blen;
		} else {
			_txbuf_descrs[_txbuf_index].status.val         = blen;
    2f8e:	4b2d      	ldr	r3, [pc, #180]	; (3044 <_mac_async_write+0x170>)
    2f90:	685a      	ldr	r2, [r3, #4]
    2f92:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    2f96:	60d4      	str	r4, [r2, #12]
			_txbuf_descrs[_txbuf_index].status.bm.last_buf = 1;
    2f98:	685a      	ldr	r2, [r3, #4]
    2f9a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    2f9e:	7b51      	ldrb	r1, [r2, #13]
    2fa0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
    2fa4:	7351      	strb	r1, [r2, #13]
		}
		_txbuf_index++;
    2fa6:	685a      	ldr	r2, [r3, #4]
    2fa8:	3201      	adds	r2, #1
    2faa:	605a      	str	r2, [r3, #4]
		if (_txbuf_index == CONF_GMAC_TXDESCR_NUM) {
    2fac:	685b      	ldr	r3, [r3, #4]
    2fae:	2b10      	cmp	r3, #16
    2fb0:	d108      	bne.n	2fc4 <_mac_async_write+0xf0>
			_txbuf_index                                            = 0;
    2fb2:	4b24      	ldr	r3, [pc, #144]	; (3044 <_mac_async_write+0x170>)
    2fb4:	2200      	movs	r2, #0
    2fb6:	605a      	str	r2, [r3, #4]
			_txbuf_descrs[CONF_GMAC_TXDESCR_NUM - 1].status.bm.wrap = 1;
    2fb8:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    2fbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    2fc0:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
  __ASM volatile ("dsb 0xF":::"memory");
    2fc4:	f3bf 8f4f 	dsb	sy

	/* Data synchronization barrier */
	__DSB();

	/* Active Transmit */
	hri_gmac_set_NCR_reg(dev->hw, GMAC_NCR_TSTART);
    2fc8:	f8da 2000 	ldr.w	r2, [sl]
    2fcc:	6813      	ldr	r3, [r2, #0]
    2fce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    2fd2:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    2fd4:	2000      	movs	r0, #0
    2fd6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2fda:	f206 56dc 	addw	r6, r6, #1500	; 0x5dc
	for (i = 0; i < CONF_GMAC_TXDESCR_NUM; i++) {
    2fde:	45b1      	cmp	r9, r6
    2fe0:	d0f0      	beq.n	2fc4 <_mac_async_write+0xf0>
		blen = min(len, CONF_GMAC_TXBUF_SIZE);
    2fe2:	f240 53dc 	movw	r3, #1500	; 0x5dc
    2fe6:	462c      	mov	r4, r5
    2fe8:	429d      	cmp	r5, r3
    2fea:	bf28      	it	cs
    2fec:	461c      	movcs	r4, r3
		memcpy(_txbuf[_txbuf_index], buf + (i * CONF_GMAC_TXBUF_SIZE), blen);
    2fee:	f8d8 0004 	ldr.w	r0, [r8, #4]
    2ff2:	4622      	mov	r2, r4
    2ff4:	4631      	mov	r1, r6
    2ff6:	fb03 b000 	mla	r0, r3, r0, fp
    2ffa:	47b8      	blx	r7
		if (len > 0) {
    2ffc:	1b2d      	subs	r5, r5, r4
    2ffe:	d0c6      	beq.n	2f8e <_mac_async_write+0xba>
			_txbuf_descrs[_txbuf_index].status.val = blen;
    3000:	f8d8 3004 	ldr.w	r3, [r8, #4]
    3004:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
    3008:	60dc      	str	r4, [r3, #12]
		_txbuf_index++;
    300a:	f8d8 3004 	ldr.w	r3, [r8, #4]
    300e:	3301      	adds	r3, #1
    3010:	f8c8 3004 	str.w	r3, [r8, #4]
		if (_txbuf_index == CONF_GMAC_TXDESCR_NUM) {
    3014:	f8d8 3004 	ldr.w	r3, [r8, #4]
    3018:	2b10      	cmp	r3, #16
    301a:	d1de      	bne.n	2fda <_mac_async_write+0x106>
			_txbuf_index                                            = 0;
    301c:	2300      	movs	r3, #0
    301e:	f8c8 3004 	str.w	r3, [r8, #4]
			_txbuf_descrs[CONF_GMAC_TXDESCR_NUM - 1].status.bm.wrap = 1;
    3022:	f898 3087 	ldrb.w	r3, [r8, #135]	; 0x87
    3026:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    302a:	f888 3087 	strb.w	r3, [r8, #135]	; 0x87
    302e:	e7d4      	b.n	2fda <_mac_async_write+0x106>
		return ERR_NO_RESOURCE;
    3030:	f06f 001b 	mvn.w	r0, #27
    3034:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				return ERR_NO_RESOURCE;
    3038:	f06f 001b 	mvn.w	r0, #27
    303c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3040:	20005e18 	.word	0x20005e18
    3044:	20000940 	.word	0x20000940
    3048:	0000dc9f 	.word	0x0000dc9f

0000304c <_mac_async_read>:
}

uint32_t _mac_async_read(struct _mac_async_device *const dev, uint8_t *buf, uint32_t len)
{
    304c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3050:	b083      	sub	sp, #12
    3052:	9101      	str	r1, [sp, #4]
    3054:	4691      	mov	r9, r2
	uint32_t i;
	uint32_t j;
	uint32_t pos;
	uint32_t n;
	uint32_t sof       = 0xFFFFFFFF; /* Start of Frame index */
    3056:	f04f 37ff 	mov.w	r7, #4294967295
	uint32_t eof       = 0xFFFFFFFF; /* End of Frame index */
	uint32_t total_len = 0;          /* Total length of received package */

	(void)dev;
	for (i = 0; i < CONF_GMAC_RXDESCR_NUM; i++) {
    305a:	2400      	movs	r4, #0
		pos = _rxbuf_index + i;
    305c:	4a45      	ldr	r2, [pc, #276]	; (3174 <_mac_async_read+0x128>)
    305e:	e002      	b.n	3066 <_mac_async_read+0x1a>
	for (i = 0; i < CONF_GMAC_RXDESCR_NUM; i++) {
    3060:	3401      	adds	r4, #1
    3062:	2c10      	cmp	r4, #16
    3064:	d074      	beq.n	3150 <_mac_async_read+0x104>
		pos = _rxbuf_index + i;
    3066:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
    306a:	4423      	add	r3, r4

		if (pos >= CONF_GMAC_RXDESCR_NUM) {
    306c:	2b0f      	cmp	r3, #15
			pos -= CONF_GMAC_RXDESCR_NUM;
    306e:	bf88      	it	hi
    3070:	3b10      	subhi	r3, #16
		}

		/* No more data for Ethernet package */
		if (!_rxbuf_descrs[pos].address.bm.ownership) {
    3072:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    3076:	f891 10b0 	ldrb.w	r1, [r1, #176]	; 0xb0
    307a:	f011 0f01 	tst.w	r1, #1
    307e:	d061      	beq.n	3144 <_mac_async_read+0xf8>
			break;
		}

		if (_rxbuf_descrs[pos].status.bm.sof) {
    3080:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    3084:	f891 10b5 	ldrb.w	r1, [r1, #181]	; 0xb5
    3088:	f3c1 1180 	ubfx	r1, r1, #6, #1
    308c:	2900      	cmp	r1, #0
    308e:	bf18      	it	ne
    3090:	4627      	movne	r7, r4
			sof = i;
		}

		if ((_rxbuf_descrs[pos].status.bm.eof) && (sof != 0xFFFFFFFF)) {
    3092:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    3096:	f891 10b5 	ldrb.w	r1, [r1, #181]	; 0xb5
    309a:	09c9      	lsrs	r1, r1, #7
    309c:	d0e0      	beq.n	3060 <_mac_async_read+0x14>
    309e:	f1b7 3fff 	cmp.w	r7, #4294967295
    30a2:	d0dd      	beq.n	3060 <_mac_async_read+0x14>
			/* eof now indicate the number of bufs the frame used */
			eof = i;
			n   = _rxbuf_descrs[pos].status.bm.len;
    30a4:	4a33      	ldr	r2, [pc, #204]	; (3174 <_mac_async_read+0x128>)
    30a6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    30aa:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
    30ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
			len = min(n, len);
    30b2:	4599      	cmp	r9, r3
    30b4:	bf28      	it	cs
    30b6:	4699      	movcs	r9, r3
			/* Break process since the last data has been found */
			break;
		}
	}

	if (eof != 0xFFFFFFFF) {
    30b8:	f1b4 3fff 	cmp.w	r4, #4294967295
		j = eof + 1;
    30bc:	bf18      	it	ne
    30be:	f104 0801 	addne.w	r8, r4, #1
	if (eof != 0xFFFFFFFF) {
    30c2:	d14b      	bne.n	315c <_mac_async_read+0x110>
    30c4:	46b8      	mov	r8, r7
    30c6:	e049      	b.n	315c <_mac_async_read+0x110>
			buf += n;
			total_len += n;
			len -= n;
		}

		_rxbuf_descrs[_rxbuf_index].address.bm.ownership = 0;
    30c8:	f8d5 3130 	ldr.w	r3, [r5, #304]	; 0x130
    30cc:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    30d0:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
    30d4:	f36f 0200 	bfc	r2, #0, #1
    30d8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		_rxbuf_index++;
    30dc:	f8d5 3130 	ldr.w	r3, [r5, #304]	; 0x130
    30e0:	3301      	adds	r3, #1
    30e2:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130

		if (_rxbuf_index == CONF_GMAC_RXDESCR_NUM) {
    30e6:	f8d5 3130 	ldr.w	r3, [r5, #304]	; 0x130
    30ea:	2b10      	cmp	r3, #16
			_rxbuf_index = 0;
    30ec:	bf04      	itt	eq
    30ee:	2300      	moveq	r3, #0
    30f0:	f8c5 3130 	streq.w	r3, [r5, #304]	; 0x130
	for (i = 0; i < j; i++) {
    30f4:	3601      	adds	r6, #1
    30f6:	4546      	cmp	r6, r8
    30f8:	d020      	beq.n	313c <_mac_async_read+0xf0>
		if (eof != 0xFFFFFFFF && i >= sof && i <= eof && len > 0) {
    30fa:	f1b4 3fff 	cmp.w	r4, #4294967295
    30fe:	d0e3      	beq.n	30c8 <_mac_async_read+0x7c>
    3100:	42be      	cmp	r6, r7
    3102:	d3e1      	bcc.n	30c8 <_mac_async_read+0x7c>
    3104:	42a6      	cmp	r6, r4
    3106:	d8df      	bhi.n	30c8 <_mac_async_read+0x7c>
    3108:	f1b9 0f00 	cmp.w	r9, #0
    310c:	d0dc      	beq.n	30c8 <_mac_async_read+0x7c>
			n = min(len, CONF_GMAC_RXBUF_SIZE);
    310e:	46cb      	mov	fp, r9
    3110:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
    3114:	bf28      	it	cs
    3116:	f04f 0b80 	movcs.w	fp, #128	; 0x80
			memcpy(buf, _rxbuf[_rxbuf_index], n);
    311a:	f8d5 1130 	ldr.w	r1, [r5, #304]	; 0x130
    311e:	465a      	mov	r2, fp
    3120:	4b15      	ldr	r3, [pc, #84]	; (3178 <_mac_async_read+0x12c>)
    3122:	eb03 11c1 	add.w	r1, r3, r1, lsl #7
    3126:	9801      	ldr	r0, [sp, #4]
    3128:	4b14      	ldr	r3, [pc, #80]	; (317c <_mac_async_read+0x130>)
    312a:	4798      	blx	r3
			buf += n;
    312c:	9b01      	ldr	r3, [sp, #4]
    312e:	445b      	add	r3, fp
    3130:	9301      	str	r3, [sp, #4]
			total_len += n;
    3132:	44da      	add	sl, fp
			len -= n;
    3134:	eba9 090b 	sub.w	r9, r9, fp
    3138:	e7c6      	b.n	30c8 <_mac_async_read+0x7c>
	uint32_t total_len = 0;          /* Total length of received package */
    313a:	46c2      	mov	sl, r8
		}
	}

	return total_len;
}
    313c:	4650      	mov	r0, sl
    313e:	b003      	add	sp, #12
    3140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (sof != 0xFFFFFFFF) {
    3144:	f1b7 3fff 	cmp.w	r7, #4294967295
    3148:	d105      	bne.n	3156 <_mac_async_read+0x10a>
    314a:	46a0      	mov	r8, r4
    314c:	463c      	mov	r4, r7
    314e:	e005      	b.n	315c <_mac_async_read+0x110>
    3150:	f1b7 3fff 	cmp.w	r7, #4294967295
    3154:	d00a      	beq.n	316c <_mac_async_read+0x120>
		if (_rxbuf_descrs[pos].status.bm.sof) {
    3156:	46b8      	mov	r8, r7
    3158:	f04f 34ff 	mov.w	r4, #4294967295
	for (i = 0; i < j; i++) {
    315c:	f1b8 0f00 	cmp.w	r8, #0
    3160:	d0eb      	beq.n	313a <_mac_async_read+0xee>
	} else if (sof != 0xFFFFFFFF) {
    3162:	f04f 0a00 	mov.w	sl, #0
    3166:	4656      	mov	r6, sl
			memcpy(buf, _rxbuf[_rxbuf_index], n);
    3168:	4d02      	ldr	r5, [pc, #8]	; (3174 <_mac_async_read+0x128>)
    316a:	e7c6      	b.n	30fa <_mac_async_read+0xae>
	for (i = 0; i < CONF_GMAC_RXDESCR_NUM; i++) {
    316c:	46a0      	mov	r8, r4
	} else if (sof != 0xFFFFFFFF) {
    316e:	463c      	mov	r4, r7
    3170:	e7f7      	b.n	3162 <_mac_async_read+0x116>
    3172:	bf00      	nop
    3174:	20006f10 	.word	0x20006f10
    3178:	200067c0 	.word	0x200067c0
    317c:	0000dc9f 	.word	0x0000dc9f

00003180 <_mac_async_read_len>:

uint32_t _mac_async_read_len(struct _mac_async_device *const dev)
{
    3180:	b470      	push	{r4, r5, r6}
	uint32_t i;
	uint32_t pos;
	bool     sof       = false; /* Start of Frame */
	uint32_t total_len = 0;     /* Total length of received package */
    3182:	2000      	movs	r0, #0
	bool     sof       = false; /* Start of Frame */
    3184:	4606      	mov	r6, r0

	(void)dev;

	for (i = 0; i < CONF_GMAC_RXDESCR_NUM; i++) {
    3186:	4601      	mov	r1, r0
		pos = _rxbuf_index + i;
    3188:	4a16      	ldr	r2, [pc, #88]	; (31e4 <_mac_async_read_len+0x64>)

		if (_rxbuf_descrs[pos].status.bm.sof) {
			sof = true;
		}
		if (sof == true) {
			total_len += _rxbuf_descrs[pos].status.bm.len;
    318a:	2501      	movs	r5, #1
    318c:	e010      	b.n	31b0 <_mac_async_read_len+0x30>
    318e:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
    3192:	f8b4 40b4 	ldrh.w	r4, [r4, #180]	; 0xb4
    3196:	f3c4 040c 	ubfx	r4, r4, #0, #13
    319a:	4420      	add	r0, r4
    319c:	462e      	mov	r6, r5
		}

		if (_rxbuf_descrs[pos].status.bm.eof) {
    319e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    31a2:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
    31a6:	09db      	lsrs	r3, r3, #7
    31a8:	d119      	bne.n	31de <_mac_async_read_len+0x5e>
	for (i = 0; i < CONF_GMAC_RXDESCR_NUM; i++) {
    31aa:	3101      	adds	r1, #1
    31ac:	2910      	cmp	r1, #16
    31ae:	d016      	beq.n	31de <_mac_async_read_len+0x5e>
		pos = _rxbuf_index + i;
    31b0:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
    31b4:	440b      	add	r3, r1
		if (pos >= CONF_GMAC_RXDESCR_NUM) {
    31b6:	2b0f      	cmp	r3, #15
			pos -= CONF_GMAC_RXDESCR_NUM;
    31b8:	bf88      	it	hi
    31ba:	3b10      	subhi	r3, #16
		if (!(_rxbuf_descrs[pos].address.bm.ownership)) {
    31bc:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
    31c0:	f894 40b0 	ldrb.w	r4, [r4, #176]	; 0xb0
    31c4:	f014 0f01 	tst.w	r4, #1
    31c8:	d009      	beq.n	31de <_mac_async_read_len+0x5e>
		if (_rxbuf_descrs[pos].status.bm.sof) {
    31ca:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
    31ce:	f894 40b5 	ldrb.w	r4, [r4, #181]	; 0xb5
    31d2:	f014 0f40 	tst.w	r4, #64	; 0x40
    31d6:	d1da      	bne.n	318e <_mac_async_read_len+0xe>
		if (sof == true) {
    31d8:	2e00      	cmp	r6, #0
    31da:	d0e0      	beq.n	319e <_mac_async_read_len+0x1e>
    31dc:	e7d7      	b.n	318e <_mac_async_read_len+0xe>
			break;
		}
	}

	return total_len;
}
    31de:	bc70      	pop	{r4, r5, r6}
    31e0:	4770      	bx	lr
    31e2:	bf00      	nop
    31e4:	20006f10 	.word	0x20006f10

000031e8 <_mac_async_set_filter_ex>:
	hri_gmac_write_TIDM_reg(dev->hw, index, GMAC_TIDM_TID(*((uint16_t *)(filter->tid)) | filter->tid_enable << 31));
	return ERR_NONE;
}

int32_t _mac_async_set_filter_ex(struct _mac_async_device *const dev, uint8_t mac[6])
{
    31e8:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t j;
	uint8_t m;
	uint8_t n;
	uint8_t k = 0;
    31ea:	2400      	movs	r4, #0

	/* Apply the hash function */
	for (j = 0; j < 48; j += 6) {
    31ec:	4623      	mov	r3, r4
    31ee:	e00d      	b.n	320c <_mac_async_set_filter_ex+0x24>

		/* Update hash value */
		if (!m) {
			k ^= mac[n];
		} else {
			k ^= (mac[n] >> m) | (mac[n + 1] << (8 - m));
    31f0:	194a      	adds	r2, r1, r5
    31f2:	7852      	ldrb	r2, [r2, #1]
    31f4:	f1c6 0708 	rsb	r7, r6, #8
    31f8:	40ba      	lsls	r2, r7
    31fa:	5d4d      	ldrb	r5, [r1, r5]
    31fc:	4135      	asrs	r5, r6
    31fe:	432a      	orrs	r2, r5
    3200:	4062      	eors	r2, r4
    3202:	b2d4      	uxtb	r4, r2
	for (j = 0; j < 48; j += 6) {
    3204:	3306      	adds	r3, #6
    3206:	b2db      	uxtb	r3, r3
    3208:	2b30      	cmp	r3, #48	; 0x30
    320a:	d006      	beq.n	321a <_mac_async_set_filter_ex+0x32>
		n = j / 8;
    320c:	08dd      	lsrs	r5, r3, #3
		if (!m) {
    320e:	f013 0607 	ands.w	r6, r3, #7
    3212:	d1ed      	bne.n	31f0 <_mac_async_set_filter_ex+0x8>
			k ^= mac[n];
    3214:	5d4a      	ldrb	r2, [r1, r5]
    3216:	4054      	eors	r4, r2
    3218:	e7f4      	b.n	3204 <_mac_async_set_filter_ex+0x1c>
		}
	}

	/* The hash value is reduced to a 6-bit index */
	k &= 0x3F;
    321a:	f004 033f 	and.w	r3, r4, #63	; 0x3f

	if (k < 32) {
    321e:	2b1f      	cmp	r3, #31
    3220:	d90d      	bls.n	323e <_mac_async_set_filter_ex+0x56>
		hri_gmac_set_HRB_reg(dev->hw, 1 << k);
	} else {
		hri_gmac_set_HRT_reg(dev->hw, 1 << (k % 32));
    3222:	6803      	ldr	r3, [r0, #0]
	((Gmac *)hw)->HRT.reg |= mask;
    3224:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
    3228:	f004 021f 	and.w	r2, r4, #31
    322c:	2401      	movs	r4, #1
    322e:	fa04 f202 	lsl.w	r2, r4, r2
    3232:	430a      	orrs	r2, r1
    3234:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	}

	return ERR_NONE;
}
    3238:	2000      	movs	r0, #0
    323a:	bcf0      	pop	{r4, r5, r6, r7}
    323c:	4770      	bx	lr
		hri_gmac_set_HRB_reg(dev->hw, 1 << k);
    323e:	6801      	ldr	r1, [r0, #0]
	((Gmac *)hw)->HRB.reg |= mask;
    3240:	f8d1 0080 	ldr.w	r0, [r1, #128]	; 0x80
    3244:	2201      	movs	r2, #1
    3246:	fa02 f303 	lsl.w	r3, r2, r3
    324a:	4303      	orrs	r3, r0
    324c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
    3250:	e7f2      	b.n	3238 <_mac_async_set_filter_ex+0x50>

00003252 <_sha_sync_init>:
struct icm_descriptor icm_descriptor;
COMPILER_PACK_RESET()

int32_t _sha_sync_init(struct _sha_sync_device *const dev, void *const hw)
{
	dev->hw = hw;
    3252:	6001      	str	r1, [r0, #0]

	return ERR_NONE;
}
    3254:	2000      	movs	r0, #0
    3256:	4770      	bx	lr

00003258 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    3258:	2201      	movs	r2, #1
    325a:	4b01      	ldr	r3, [pc, #4]	; (3260 <_mclk_init+0x8>)
    325c:	715a      	strb	r2, [r3, #5]
    325e:	4770      	bx	lr
    3260:	40000800 	.word	0x40000800

00003264 <_flash_program>:
 * \param[in]  buffer        Pointer to buffer where the data to
 *                           write is stored
 * \param[in] size           The size of data to write to a page
 */
static void _flash_program(void *const hw, const uint32_t dst_addr, const uint8_t *buffer, const uint16_t size)
{
    3264:	b470      	push	{r4, r5, r6}
	return ((Nvmctrl *)hw)->PARAM.reg;
}

static inline bool hri_nvmctrl_get_STATUS_READY_bit(const void *const hw)
{
	return (((Nvmctrl *)hw)->STATUS.reg & NVMCTRL_STATUS_READY) >> NVMCTRL_STATUS_READY_Pos;
    3266:	8a44      	ldrh	r4, [r0, #18]
	uint32_t *ptr_read    = (uint32_t *)buffer;
	uint32_t  nvm_address = dst_addr / 4;
	uint16_t  i;

	while (!hri_nvmctrl_get_STATUS_READY_bit(hw)) {
    3268:	f014 0f01 	tst.w	r4, #1
    326c:	d0fb      	beq.n	3266 <_flash_program+0x2>
	((Nvmctrl *)hw)->CTRLB.reg = data;
    326e:	f24a 5415 	movw	r4, #42261	; 0xa515
    3272:	8084      	strh	r4, [r0, #4]
	return (((Nvmctrl *)hw)->STATUS.reg & NVMCTRL_STATUS_READY) >> NVMCTRL_STATUS_READY_Pos;
    3274:	8a44      	ldrh	r4, [r0, #18]
		/* Wait until this module isn't busy */
	}

	hri_nvmctrl_write_CTRLB_reg(hw, NVMCTRL_CTRLB_CMD_PBC | NVMCTRL_CTRLB_CMDEX_KEY);

	while (!hri_nvmctrl_get_STATUS_READY_bit(hw)) {
    3276:	f014 0f01 	tst.w	r4, #1
    327a:	d0fb      	beq.n	3274 <_flash_program+0x10>
		/* Wait until this module isn't busy */
	}

	/* Writes to the page buffer must be 32 bits, perform manual copy
	 * to ensure alignment */
	for (i = 0; i < size; i += 4) {
    327c:	b153      	cbz	r3, 3294 <_flash_program+0x30>
    327e:	f021 0603 	bic.w	r6, r1, #3
    3282:	1ab6      	subs	r6, r6, r2
    3284:	4614      	mov	r4, r2
		NVM_MEMORY[nvm_address++] = *ptr_read;
    3286:	6825      	ldr	r5, [r4, #0]
    3288:	51a5      	str	r5, [r4, r6]
		ptr_read++;
    328a:	3404      	adds	r4, #4
	for (i = 0; i < size; i += 4) {
    328c:	1aa5      	subs	r5, r4, r2
    328e:	b2ad      	uxth	r5, r5
    3290:	42ab      	cmp	r3, r5
    3292:	d8f8      	bhi.n	3286 <_flash_program+0x22>
    3294:	8a43      	ldrh	r3, [r0, #18]
	}

	while (!hri_nvmctrl_get_STATUS_READY_bit(hw)) {
    3296:	f013 0f01 	tst.w	r3, #1
    329a:	d0fb      	beq.n	3294 <_flash_program+0x30>
	((Nvmctrl *)hw)->ADDR.reg = data;
    329c:	6141      	str	r1, [r0, #20]
	((Nvmctrl *)hw)->CTRLB.reg = data;
    329e:	f24a 5303 	movw	r3, #42243	; 0xa503
    32a2:	8083      	strh	r3, [r0, #4]
		/* Wait until this module isn't busy */
	}

	hri_nvmctrl_write_ADDR_reg(hw, dst_addr);
	hri_nvmctrl_write_CTRLB_reg(hw, NVMCTRL_CTRLB_CMD_WP | NVMCTRL_CTRLB_CMDEX_KEY);
}
    32a4:	bc70      	pop	{r4, r5, r6}
    32a6:	4770      	bx	lr

000032a8 <_nvm_interrupt_handler>:
 * \internal NVM interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _nvm_interrupt_handler(struct _flash_device *device)
{
    32a8:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    32aa:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
    32ac:	8a1a      	ldrh	r2, [r3, #16]

	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
    32ae:	f012 0f01 	tst.w	r2, #1
    32b2:	d005      	beq.n	32c0 <_nvm_interrupt_handler+0x18>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
    32b4:	2201      	movs	r2, #1
    32b6:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_DONE_bit(hw);

		if (NULL != device->flash_cb.ready_cb) {
    32b8:	6803      	ldr	r3, [r0, #0]
    32ba:	b153      	cbz	r3, 32d2 <_nvm_interrupt_handler+0x2a>
			device->flash_cb.ready_cb(device);
    32bc:	4798      	blx	r3
    32be:	bd08      	pop	{r3, pc}
	return ((Nvmctrl *)hw)->INTFLAG.reg;
    32c0:	8a1a      	ldrh	r2, [r3, #16]
    32c2:	b292      	uxth	r2, r2
		}
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
    32c4:	b12a      	cbz	r2, 32d2 <_nvm_interrupt_handler+0x2a>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    32c6:	f240 225e 	movw	r2, #606	; 0x25e
    32ca:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_reg(hw, NVMCTRL_INTFLAG_ERR);

		if (NULL != device->flash_cb.error_cb) {
    32cc:	6843      	ldr	r3, [r0, #4]
    32ce:	b103      	cbz	r3, 32d2 <_nvm_interrupt_handler+0x2a>
			device->flash_cb.error_cb(device);
    32d0:	4798      	blx	r3
    32d2:	bd08      	pop	{r3, pc}

000032d4 <_flash_init>:
{
    32d4:	b538      	push	{r3, r4, r5, lr}
    32d6:	460c      	mov	r4, r1
	ASSERT(device && (hw == NVMCTRL));
    32d8:	4605      	mov	r5, r0
    32da:	b360      	cbz	r0, 3336 <_flash_init+0x62>
    32dc:	4817      	ldr	r0, [pc, #92]	; (333c <_flash_init+0x68>)
    32de:	4281      	cmp	r1, r0
    32e0:	bf14      	ite	ne
    32e2:	2000      	movne	r0, #0
    32e4:	2001      	moveq	r0, #1
    32e6:	224b      	movs	r2, #75	; 0x4b
    32e8:	4915      	ldr	r1, [pc, #84]	; (3340 <_flash_init+0x6c>)
    32ea:	4b16      	ldr	r3, [pc, #88]	; (3344 <_flash_init+0x70>)
    32ec:	4798      	blx	r3
	device->hw = hw;
    32ee:	612c      	str	r4, [r5, #16]
	return ((Nvmctrl *)hw)->CTRLA.reg;
    32f0:	8823      	ldrh	r3, [r4, #0]
	ctrla &= ~(NVMCTRL_CTRLA_CACHEDIS0 | NVMCTRL_CTRLA_CACHEDIS1 | NVMCTRL_CTRLA_PRM_Msk);
    32f2:	f3c3 030d 	ubfx	r3, r3, #0, #14
	hri_nvmctrl_write_CTRLA_reg(hw, ctrla);
    32f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
    32fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
	((Nvmctrl *)hw)->CTRLA.reg = data;
    32fe:	8023      	strh	r3, [r4, #0]
	_nvm_dev = device;
    3300:	4b11      	ldr	r3, [pc, #68]	; (3348 <_flash_init+0x74>)
    3302:	601d      	str	r5, [r3, #0]
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3304:	4b11      	ldr	r3, [pc, #68]	; (334c <_flash_init+0x78>)
    3306:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    330a:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
    330e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3312:	f3bf 8f6f 	isb	sy
    3316:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    331a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    331e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3322:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3326:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    332a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    332e:	6019      	str	r1, [r3, #0]
    3330:	601a      	str	r2, [r3, #0]
}
    3332:	2000      	movs	r0, #0
    3334:	bd38      	pop	{r3, r4, r5, pc}
    3336:	2000      	movs	r0, #0
    3338:	e7d5      	b.n	32e6 <_flash_init+0x12>
    333a:	bf00      	nop
    333c:	41004000 	.word	0x41004000
    3340:	0000f11c 	.word	0x0000f11c
    3344:	0000272d 	.word	0x0000272d
    3348:	20007044 	.word	0x20007044
    334c:	e000e100 	.word	0xe000e100

00003350 <_flash_get_page_size>:
}
    3350:	f44f 7000 	mov.w	r0, #512	; 0x200
    3354:	4770      	bx	lr

00003356 <_flash_get_total_pages>:
	return (uint32_t)hri_nvmctrl_read_PARAM_NVMP_bf(device->hw);
    3356:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->PARAM.reg & NVMCTRL_PARAM_NVMP_Msk) >> NVMCTRL_PARAM_NVMP_Pos;
    3358:	6898      	ldr	r0, [r3, #8]
}
    335a:	b280      	uxth	r0, r0
    335c:	4770      	bx	lr

0000335e <_flash_read>:
{
    335e:	b410      	push	{r4}
	while (!hri_nvmctrl_get_STATUS_READY_bit(device->hw)) {
    3360:	6904      	ldr	r4, [r0, #16]
	return (((Nvmctrl *)hw)->STATUS.reg & NVMCTRL_STATUS_READY) >> NVMCTRL_STATUS_READY_Pos;
    3362:	8a60      	ldrh	r0, [r4, #18]
    3364:	f010 0f01 	tst.w	r0, #1
    3368:	d0fb      	beq.n	3362 <_flash_read+0x4>
	for (i = 0; i < length; i++) {
    336a:	b143      	cbz	r3, 337e <_flash_read+0x20>
    336c:	3901      	subs	r1, #1
    336e:	4610      	mov	r0, r2
    3370:	4413      	add	r3, r2
		buffer[i] = nvm_addr[src_addr + i];
    3372:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    3376:	f800 4b01 	strb.w	r4, [r0], #1
	for (i = 0; i < length; i++) {
    337a:	4298      	cmp	r0, r3
    337c:	d1f9      	bne.n	3372 <_flash_read+0x14>
}
    337e:	bc10      	pop	{r4}
    3380:	4770      	bx	lr
	...

00003384 <_flash_write>:
{
    3384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3388:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
    338c:	b085      	sub	sp, #20
    338e:	4682      	mov	sl, r0
    3390:	9203      	str	r2, [sp, #12]
    3392:	4698      	mov	r8, r3
	uint32_t wr_start_addr = dst_addr;
    3394:	460e      	mov	r6, r1
			_flash_program(device->hw, block_start_addr + i * NVMCTRL_PAGE_SIZE, tmp_buffer[i], NVMCTRL_PAGE_SIZE);
    3396:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 3470 <_flash_write+0xec>
    339a:	e034      	b.n	3406 <_flash_write+0x82>
			wr_start_addr++;
    339c:	3601      	adds	r6, #1
			length--;
    339e:	3801      	subs	r0, #1
		while ((wr_start_addr <= block_end_addr) && (length > 0)) {
    33a0:	45b0      	cmp	r8, r6
    33a2:	d312      	bcc.n	33ca <_flash_write+0x46>
    33a4:	b170      	cbz	r0, 33c4 <_flash_write+0x40>
			tmp_buffer[j][k] = *buffer;
    33a6:	f812 cb01 	ldrb.w	ip, [r2], #1
    33aa:	f10d 0e10 	add.w	lr, sp, #16
    33ae:	eb0e 2e41 	add.w	lr, lr, r1, lsl #9
    33b2:	f80e c003 	strb.w	ip, [lr, r3]
			k                = (k + 1) % NVMCTRL_PAGE_SIZE;
    33b6:	3301      	adds	r3, #1
    33b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
			if (0 == k) {
    33bc:	2b00      	cmp	r3, #0
    33be:	d1ed      	bne.n	339c <_flash_write+0x18>
				j++;
    33c0:	3101      	adds	r1, #1
    33c2:	e7eb      	b.n	339c <_flash_write+0x18>
    33c4:	9203      	str	r2, [sp, #12]
    33c6:	4680      	mov	r8, r0
    33c8:	e001      	b.n	33ce <_flash_write+0x4a>
    33ca:	9203      	str	r2, [sp, #12]
    33cc:	4680      	mov	r8, r0
		_flash_erase_block(device->hw, block_start_addr);
    33ce:	f8da 2010 	ldr.w	r2, [sl, #16]
    33d2:	8a53      	ldrh	r3, [r2, #18]
	while (!hri_nvmctrl_get_STATUS_READY_bit(hw)) {
    33d4:	f013 0f01 	tst.w	r3, #1
    33d8:	d0fb      	beq.n	33d2 <_flash_write+0x4e>
	((Nvmctrl *)hw)->ADDR.reg = data;
    33da:	9b01      	ldr	r3, [sp, #4]
    33dc:	6153      	str	r3, [r2, #20]
	((Nvmctrl *)hw)->CTRLB.reg = data;
    33de:	f24a 5301 	movw	r3, #42241	; 0xa501
    33e2:	8093      	strh	r3, [r2, #4]
			_flash_program(device->hw, block_start_addr + i * NVMCTRL_PAGE_SIZE, tmp_buffer[i], NVMCTRL_PAGE_SIZE);
    33e4:	f44f 7300 	mov.w	r3, #512	; 0x200
    33e8:	462a      	mov	r2, r5
    33ea:	19e9      	adds	r1, r5, r7
    33ec:	f8da 0010 	ldr.w	r0, [sl, #16]
    33f0:	47d8      	blx	fp
    33f2:	f505 7500 	add.w	r5, r5, #512	; 0x200
		for (i = 0; i < NVMCTRL_BLOCK_PAGES; i++) {
    33f6:	42a5      	cmp	r5, r4
    33f8:	d1f4      	bne.n	33e4 <_flash_write+0x60>
	} while (block_end_addr < (wr_start_addr + length - 1));
    33fa:	eb08 0306 	add.w	r3, r8, r6
    33fe:	3b01      	subs	r3, #1
    3400:	9a00      	ldr	r2, [sp, #0]
    3402:	429a      	cmp	r2, r3
    3404:	d22c      	bcs.n	3460 <_flash_write+0xdc>
		block_start_addr = wr_start_addr & ~(NVMCTRL_BLOCK_SIZE - 1);
    3406:	f426 53ff 	bic.w	r3, r6, #8160	; 0x1fe0
    340a:	f023 031f 	bic.w	r3, r3, #31
    340e:	9301      	str	r3, [sp, #4]
		block_end_addr   = block_start_addr + NVMCTRL_BLOCK_SIZE - 1;
    3410:	f503 52ff 	add.w	r2, r3, #8160	; 0x1fe0
    3414:	321f      	adds	r2, #31
    3416:	9200      	str	r2, [sp, #0]
    3418:	ad04      	add	r5, sp, #16
    341a:	f50d 5900 	add.w	r9, sp, #8192	; 0x2000
    341e:	f109 0910 	add.w	r9, r9, #16
    3422:	462c      	mov	r4, r5
    3424:	1b5f      	subs	r7, r3, r5
    3426:	9502      	str	r5, [sp, #8]
			_flash_read(device, block_start_addr + i * NVMCTRL_PAGE_SIZE, tmp_buffer[i], NVMCTRL_PAGE_SIZE);
    3428:	f44f 7300 	mov.w	r3, #512	; 0x200
    342c:	4622      	mov	r2, r4
    342e:	19e1      	adds	r1, r4, r7
    3430:	4650      	mov	r0, sl
    3432:	4d0e      	ldr	r5, [pc, #56]	; (346c <_flash_write+0xe8>)
    3434:	47a8      	blx	r5
    3436:	f504 7400 	add.w	r4, r4, #512	; 0x200
		for (i = 0; i < NVMCTRL_BLOCK_PAGES; i++) {
    343a:	454c      	cmp	r4, r9
    343c:	d1f4      	bne.n	3428 <_flash_write+0xa4>
    343e:	9d02      	ldr	r5, [sp, #8]
		j = (wr_start_addr - block_start_addr) / NVMCTRL_PAGE_SIZE;
    3440:	9b01      	ldr	r3, [sp, #4]
    3442:	1af3      	subs	r3, r6, r3
    3444:	0a59      	lsrs	r1, r3, #9
    3446:	f3c3 0308 	ubfx	r3, r3, #0, #9
		while ((wr_start_addr <= block_end_addr) && (length > 0)) {
    344a:	9a00      	ldr	r2, [sp, #0]
    344c:	4296      	cmp	r6, r2
    344e:	d8be      	bhi.n	33ce <_flash_write+0x4a>
    3450:	f1b8 0f00 	cmp.w	r8, #0
    3454:	d0bb      	beq.n	33ce <_flash_write+0x4a>
    3456:	9a03      	ldr	r2, [sp, #12]
			tmp_buffer[j][k] = *buffer;
    3458:	4640      	mov	r0, r8
    345a:	f8dd 8000 	ldr.w	r8, [sp]
    345e:	e7a2      	b.n	33a6 <_flash_write+0x22>
}
    3460:	f50d 5d00 	add.w	sp, sp, #8192	; 0x2000
    3464:	b005      	add	sp, #20
    3466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    346a:	bf00      	nop
    346c:	0000335f 	.word	0x0000335f
    3470:	00003265 	.word	0x00003265

00003474 <_flash_append>:
{
    3474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3478:	4680      	mov	r8, r0
    347a:	4691      	mov	r9, r2
    347c:	461f      	mov	r7, r3
	uint32_t page_start_addr = dst_addr & ~(NVMCTRL_PAGE_SIZE - 1);
    347e:	f421 76ff 	bic.w	r6, r1, #510	; 0x1fe
    3482:	f026 0601 	bic.w	r6, r6, #1
	if (dst_addr != page_start_addr) {
    3486:	42b1      	cmp	r1, r6
    3488:	d023      	beq.n	34d2 <_flash_append+0x5e>
		size = min(length, NVMCTRL_PAGE_SIZE - (dst_addr - page_start_addr));
    348a:	1a74      	subs	r4, r6, r1
    348c:	f504 7400 	add.w	r4, r4, #512	; 0x200
    3490:	429c      	cmp	r4, r3
    3492:	bf28      	it	cs
    3494:	461c      	movcs	r4, r3
		_flash_program(device->hw, dst_addr, buffer, size);
    3496:	b2a3      	uxth	r3, r4
    3498:	6900      	ldr	r0, [r0, #16]
    349a:	4d0f      	ldr	r5, [pc, #60]	; (34d8 <_flash_append+0x64>)
    349c:	47a8      	blx	r5
		page_start_addr += NVMCTRL_PAGE_SIZE;
    349e:	f506 7600 	add.w	r6, r6, #512	; 0x200
	while (offset < length) {
    34a2:	42a7      	cmp	r7, r4
    34a4:	d913      	bls.n	34ce <_flash_append+0x5a>
		_flash_program(device->hw, page_start_addr, buffer + offset, size);
    34a6:	f8df a030 	ldr.w	sl, [pc, #48]	; 34d8 <_flash_append+0x64>
		size = min(length - offset, NVMCTRL_PAGE_SIZE);
    34aa:	1b3d      	subs	r5, r7, r4
    34ac:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
    34b0:	bf28      	it	cs
    34b2:	f44f 7500 	movcs.w	r5, #512	; 0x200
		_flash_program(device->hw, page_start_addr, buffer + offset, size);
    34b6:	b2ab      	uxth	r3, r5
    34b8:	eb09 0204 	add.w	r2, r9, r4
    34bc:	4631      	mov	r1, r6
    34be:	f8d8 0010 	ldr.w	r0, [r8, #16]
    34c2:	47d0      	blx	sl
		page_start_addr += NVMCTRL_PAGE_SIZE;
    34c4:	f506 7600 	add.w	r6, r6, #512	; 0x200
		offset += size;
    34c8:	442c      	add	r4, r5
	while (offset < length) {
    34ca:	42a7      	cmp	r7, r4
    34cc:	d8ed      	bhi.n	34aa <_flash_append+0x36>
    34ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32_t offset = 0;
    34d2:	2400      	movs	r4, #0
    34d4:	e7e5      	b.n	34a2 <_flash_append+0x2e>
    34d6:	bf00      	nop
    34d8:	00003265 	.word	0x00003265

000034dc <_flash_erase>:
{
    34dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    34e0:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
    34e4:	4607      	mov	r7, r0
    34e6:	460c      	mov	r4, r1
    34e8:	4616      	mov	r6, r2
	block_start_addr = dst_addr & ~(NVMCTRL_BLOCK_SIZE - 1);
    34ea:	f421 55ff 	bic.w	r5, r1, #8160	; 0x1fe0
    34ee:	f025 051f 	bic.w	r5, r5, #31
	memset(tmp_buffer, 0xFF, NVMCTRL_PAGE_SIZE);
    34f2:	f44f 7200 	mov.w	r2, #512	; 0x200
    34f6:	21ff      	movs	r1, #255	; 0xff
    34f8:	4668      	mov	r0, sp
    34fa:	4b27      	ldr	r3, [pc, #156]	; (3598 <_flash_erase+0xbc>)
    34fc:	4798      	blx	r3
	if (dst_addr != block_start_addr) {
    34fe:	42ac      	cmp	r4, r5
    3500:	d043      	beq.n	358a <_flash_erase+0xae>
		block_start_addr += NVMCTRL_BLOCK_SIZE;
    3502:	f505 5500 	add.w	r5, r5, #8192	; 0x2000
    3506:	f504 5af0 	add.w	sl, r4, #7680	; 0x1e00
			_flash_write(device, dst_addr, tmp_buffer, NVMCTRL_PAGE_SIZE);
    350a:	f44f 7900 	mov.w	r9, #512	; 0x200
    350e:	f8df 808c 	ldr.w	r8, [pc, #140]	; 359c <_flash_erase+0xc0>
    3512:	464b      	mov	r3, r9
    3514:	466a      	mov	r2, sp
    3516:	4621      	mov	r1, r4
    3518:	4638      	mov	r0, r7
    351a:	47c0      	blx	r8
			if (--page_nums == 0) {
    351c:	3e01      	subs	r6, #1
    351e:	d030      	beq.n	3582 <_flash_erase+0xa6>
			dst_addr += NVMCTRL_PAGE_SIZE;
    3520:	f504 7400 	add.w	r4, r4, #512	; 0x200
			if (dst_addr == block_start_addr) {
    3524:	42a5      	cmp	r5, r4
    3526:	d001      	beq.n	352c <_flash_erase+0x50>
		for (i = 0; i < NVMCTRL_BLOCK_PAGES - 1; i++) {
    3528:	4554      	cmp	r4, sl
    352a:	d1f2      	bne.n	3512 <_flash_erase+0x36>
	while (page_nums >= NVMCTRL_BLOCK_PAGES) {
    352c:	2e0f      	cmp	r6, #15
    352e:	d919      	bls.n	3564 <_flash_erase+0x88>
	block_start_addr = dst_addr & ~(NVMCTRL_BLOCK_SIZE - 1);
    3530:	4628      	mov	r0, r5
    3532:	4631      	mov	r1, r6
    3534:	f24a 5401 	movw	r4, #42241	; 0xa501
		_flash_erase_block(device->hw, block_start_addr);
    3538:	693a      	ldr	r2, [r7, #16]
	return (((Nvmctrl *)hw)->STATUS.reg & NVMCTRL_STATUS_READY) >> NVMCTRL_STATUS_READY_Pos;
    353a:	8a53      	ldrh	r3, [r2, #18]
	while (!hri_nvmctrl_get_STATUS_READY_bit(hw)) {
    353c:	f013 0f01 	tst.w	r3, #1
    3540:	d0fb      	beq.n	353a <_flash_erase+0x5e>
	((Nvmctrl *)hw)->ADDR.reg = data;
    3542:	6150      	str	r0, [r2, #20]
	((Nvmctrl *)hw)->CTRLB.reg = data;
    3544:	8094      	strh	r4, [r2, #4]
		block_start_addr += NVMCTRL_PAGE_SIZE;
    3546:	f500 7000 	add.w	r0, r0, #512	; 0x200
		page_nums -= NVMCTRL_BLOCK_PAGES;
    354a:	3910      	subs	r1, #16
	while (page_nums >= NVMCTRL_BLOCK_PAGES) {
    354c:	290f      	cmp	r1, #15
    354e:	d8f3      	bhi.n	3538 <_flash_erase+0x5c>
    3550:	f505 7500 	add.w	r5, r5, #512	; 0x200
    3554:	f1a6 0310 	sub.w	r3, r6, #16
    3558:	091b      	lsrs	r3, r3, #4
    355a:	eb05 2543 	add.w	r5, r5, r3, lsl #9
    355e:	f006 060f 	and.w	r6, r6, #15
	if (page_nums != 0) {
    3562:	b176      	cbz	r6, 3582 <_flash_erase+0xa6>
	block_start_addr = dst_addr & ~(NVMCTRL_BLOCK_SIZE - 1);
    3564:	2400      	movs	r4, #0
			_flash_write(device, block_start_addr, tmp_buffer, NVMCTRL_PAGE_SIZE);
    3566:	f44f 7900 	mov.w	r9, #512	; 0x200
    356a:	f8df 8030 	ldr.w	r8, [pc, #48]	; 359c <_flash_erase+0xc0>
    356e:	464b      	mov	r3, r9
    3570:	466a      	mov	r2, sp
    3572:	4629      	mov	r1, r5
    3574:	4638      	mov	r0, r7
    3576:	47c0      	blx	r8
			block_start_addr += NVMCTRL_PAGE_SIZE;
    3578:	f505 7500 	add.w	r5, r5, #512	; 0x200
		for (i = 0; i < page_nums; i++) {
    357c:	3401      	adds	r4, #1
    357e:	42a6      	cmp	r6, r4
    3580:	d8f5      	bhi.n	356e <_flash_erase+0x92>
}
    3582:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    3586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	while (page_nums >= NVMCTRL_BLOCK_PAGES) {
    358a:	2e0f      	cmp	r6, #15
	block_start_addr = dst_addr & ~(NVMCTRL_BLOCK_SIZE - 1);
    358c:	bf98      	it	ls
    358e:	4625      	movls	r5, r4
	while (page_nums >= NVMCTRL_BLOCK_PAGES) {
    3590:	d9e7      	bls.n	3562 <_flash_erase+0x86>
	block_start_addr = dst_addr & ~(NVMCTRL_BLOCK_SIZE - 1);
    3592:	4625      	mov	r5, r4
    3594:	e7cc      	b.n	3530 <_flash_erase+0x54>
    3596:	bf00      	nop
    3598:	0000dce9 	.word	0x0000dce9
    359c:	00003385 	.word	0x00003385

000035a0 <_flash_is_locked>:
	return !(hri_nvmctrl_get_RUNLOCK_reg(device->hw, 1 << region_id));
    35a0:	6903      	ldr	r3, [r0, #16]

static inline hri_nvmctrl_runlock_reg_t hri_nvmctrl_get_RUNLOCK_reg(const void *const         hw,
                                                                    hri_nvmctrl_runlock_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Nvmctrl *)hw)->RUNLOCK.reg;
    35a2:	699a      	ldr	r2, [r3, #24]
    35a4:	f3c1 318f 	ubfx	r1, r1, #14, #16
    35a8:	2301      	movs	r3, #1
    35aa:	fa03 f101 	lsl.w	r1, r3, r1
    35ae:	4211      	tst	r1, r2
}
    35b0:	bf0c      	ite	eq
    35b2:	4618      	moveq	r0, r3
    35b4:	2000      	movne	r0, #0
    35b6:	4770      	bx	lr

000035b8 <NVMCTRL_0_Handler>:

/**
 * \internal NVM 0 interrupt handler
 */
void NVMCTRL_0_Handler(void)
{
    35b8:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    35ba:	4b02      	ldr	r3, [pc, #8]	; (35c4 <NVMCTRL_0_Handler+0xc>)
    35bc:	6818      	ldr	r0, [r3, #0]
    35be:	4b02      	ldr	r3, [pc, #8]	; (35c8 <NVMCTRL_0_Handler+0x10>)
    35c0:	4798      	blx	r3
    35c2:	bd08      	pop	{r3, pc}
    35c4:	20007044 	.word	0x20007044
    35c8:	000032a9 	.word	0x000032a9

000035cc <NVMCTRL_1_Handler>:

/**
 * \internal NVM 1 interrupt handler
 */
void NVMCTRL_1_Handler(void)
{
    35cc:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    35ce:	4b02      	ldr	r3, [pc, #8]	; (35d8 <NVMCTRL_1_Handler+0xc>)
    35d0:	6818      	ldr	r0, [r3, #0]
    35d2:	4b02      	ldr	r3, [pc, #8]	; (35dc <NVMCTRL_1_Handler+0x10>)
    35d4:	4798      	blx	r3
    35d6:	bd08      	pop	{r3, pc}
    35d8:	20007044 	.word	0x20007044
    35dc:	000032a9 	.word	0x000032a9

000035e0 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    35e0:	4b03      	ldr	r3, [pc, #12]	; (35f0 <_osc32kctrl_init_sources+0x10>)
    35e2:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    35e4:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    35e8:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    35ea:	2201      	movs	r2, #1
    35ec:	741a      	strb	r2, [r3, #16]
    35ee:	4770      	bx	lr
    35f0:	40001400 	.word	0x40001400

000035f4 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    35f4:	4770      	bx	lr
	...

000035f8 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    35f8:	4a2e      	ldr	r2, [pc, #184]	; (36b4 <_oscctrl_init_referenced_generators+0xbc>)
    35fa:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    35fc:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    3600:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    3604:	6213      	str	r3, [r2, #32]
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    3606:	4b2c      	ldr	r3, [pc, #176]	; (36b8 <_oscctrl_init_referenced_generators+0xc0>)
    3608:	2200      	movs	r2, #0
    360a:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    360c:	4a2b      	ldr	r2, [pc, #172]	; (36bc <_oscctrl_init_referenced_generators+0xc4>)
    360e:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    3610:	461a      	mov	r2, r3
    3612:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    3616:	f013 0f10 	tst.w	r3, #16
    361a:	d1fa      	bne.n	3612 <_oscctrl_init_referenced_generators+0x1a>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    361c:	2200      	movs	r2, #0
    361e:	4b26      	ldr	r3, [pc, #152]	; (36b8 <_oscctrl_init_referenced_generators+0xc0>)
    3620:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    3624:	461a      	mov	r2, r3
    3626:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    362a:	f013 0f04 	tst.w	r3, #4
    362e:	d1fa      	bne.n	3626 <_oscctrl_init_referenced_generators+0x2e>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    3630:	2242      	movs	r2, #66	; 0x42
    3632:	4b21      	ldr	r3, [pc, #132]	; (36b8 <_oscctrl_init_referenced_generators+0xc0>)
    3634:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    3636:	461a      	mov	r2, r3
    3638:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    363c:	f013 0f02 	tst.w	r3, #2
    3640:	d1fa      	bne.n	3638 <_oscctrl_init_referenced_generators+0x40>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    3642:	4b1d      	ldr	r3, [pc, #116]	; (36b8 <_oscctrl_init_referenced_generators+0xc0>)
    3644:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    3646:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    3648:	461a      	mov	r2, r3
    364a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    364e:	f013 0f08 	tst.w	r3, #8
    3652:	d1fa      	bne.n	364a <_oscctrl_init_referenced_generators+0x52>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    3654:	22aa      	movs	r2, #170	; 0xaa
    3656:	4b18      	ldr	r3, [pc, #96]	; (36b8 <_oscctrl_init_referenced_generators+0xc0>)
    3658:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    365c:	461a      	mov	r2, r3
    365e:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    3662:	f013 0f04 	tst.w	r3, #4
    3666:	d1fa      	bne.n	365e <_oscctrl_init_referenced_generators+0x66>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    3668:	4b13      	ldr	r3, [pc, #76]	; (36b8 <_oscctrl_init_referenced_generators+0xc0>)
    366a:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    366e:	f013 0f01 	tst.w	r3, #1
    3672:	d018      	beq.n	36a6 <_oscctrl_init_referenced_generators+0xae>
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    3674:	4a10      	ldr	r2, [pc, #64]	; (36b8 <_oscctrl_init_referenced_generators+0xc0>)
    3676:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    3678:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    367c:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    3680:	d1f9      	bne.n	3676 <_oscctrl_init_referenced_generators+0x7e>
	((Oscctrl *)hw)->DFLLCTRLA.reg |= OSCCTRL_DFLLCTRLA_ONDEMAND;
    3682:	4a0d      	ldr	r2, [pc, #52]	; (36b8 <_oscctrl_init_referenced_generators+0xc0>)
    3684:	7f13      	ldrb	r3, [r2, #28]
    3686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    368a:	7713      	strb	r3, [r2, #28]
	return tmp;
}

static inline hri_gclk_syncbusy_reg_t hri_gclk_read_SYNCBUSY_reg(const void *const hw)
{
	return ((Gclk *)hw)->SYNCBUSY.reg;
    368c:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
    3690:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    3692:	2b00      	cmp	r3, #0
    3694:	d1fc      	bne.n	3690 <_oscctrl_init_referenced_generators+0x98>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    3696:	4a07      	ldr	r2, [pc, #28]	; (36b4 <_oscctrl_init_referenced_generators+0xbc>)
    3698:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    369a:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    369e:	f043 0306 	orr.w	r3, r3, #6
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    36a2:	6213      	str	r3, [r2, #32]
    36a4:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    36a6:	4a04      	ldr	r2, [pc, #16]	; (36b8 <_oscctrl_init_referenced_generators+0xc0>)
    36a8:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    36aa:	f413 7f80 	tst.w	r3, #256	; 0x100
    36ae:	d0fb      	beq.n	36a8 <_oscctrl_init_referenced_generators+0xb0>
    36b0:	e7e7      	b.n	3682 <_oscctrl_init_referenced_generators+0x8a>
    36b2:	bf00      	nop
    36b4:	40001c00 	.word	0x40001c00
    36b8:	40001000 	.word	0x40001000
    36bc:	7c80bb80 	.word	0x7c80bb80

000036c0 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    36c0:	b500      	push	{lr}
    36c2:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    36c4:	4b0d      	ldr	r3, [pc, #52]	; (36fc <RAMECC_Handler+0x3c>)
    36c6:	789b      	ldrb	r3, [r3, #2]
    36c8:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    36ca:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    36cc:	9b01      	ldr	r3, [sp, #4]
    36ce:	f013 0f02 	tst.w	r3, #2
    36d2:	d006      	beq.n	36e2 <RAMECC_Handler+0x22>
    36d4:	4b0a      	ldr	r3, [pc, #40]	; (3700 <RAMECC_Handler+0x40>)
    36d6:	681b      	ldr	r3, [r3, #0]
    36d8:	b11b      	cbz	r3, 36e2 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    36da:	4a08      	ldr	r2, [pc, #32]	; (36fc <RAMECC_Handler+0x3c>)
    36dc:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    36de:	4798      	blx	r3
    36e0:	e009      	b.n	36f6 <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    36e2:	9b01      	ldr	r3, [sp, #4]
    36e4:	f013 0f01 	tst.w	r3, #1
    36e8:	d005      	beq.n	36f6 <RAMECC_Handler+0x36>
    36ea:	4b05      	ldr	r3, [pc, #20]	; (3700 <RAMECC_Handler+0x40>)
    36ec:	685b      	ldr	r3, [r3, #4]
    36ee:	b113      	cbz	r3, 36f6 <RAMECC_Handler+0x36>
    36f0:	4a02      	ldr	r2, [pc, #8]	; (36fc <RAMECC_Handler+0x3c>)
    36f2:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    36f4:	4798      	blx	r3
	} else {
		return;
	}
}
    36f6:	b003      	add	sp, #12
    36f8:	f85d fb04 	ldr.w	pc, [sp], #4
    36fc:	41020000 	.word	0x41020000
    3700:	20007564 	.word	0x20007564

00003704 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    3704:	b470      	push	{r4, r5, r6}
    3706:	b089      	sub	sp, #36	; 0x24
    3708:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    370a:	466c      	mov	r4, sp
    370c:	4d0d      	ldr	r5, [pc, #52]	; (3744 <_sercom_get_hardware_index+0x40>)
    370e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    3710:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    3712:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    3716:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    371a:	9b00      	ldr	r3, [sp, #0]
    371c:	42b3      	cmp	r3, r6
    371e:	d00d      	beq.n	373c <_sercom_get_hardware_index+0x38>
    3720:	4631      	mov	r1, r6
    3722:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3724:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    3726:	f853 2b04 	ldr.w	r2, [r3], #4
    372a:	428a      	cmp	r2, r1
    372c:	d007      	beq.n	373e <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    372e:	3001      	adds	r0, #1
    3730:	2808      	cmp	r0, #8
    3732:	d1f8      	bne.n	3726 <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    3734:	2000      	movs	r0, #0
}
    3736:	b009      	add	sp, #36	; 0x24
    3738:	bc70      	pop	{r4, r5, r6}
    373a:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    373c:	2000      	movs	r0, #0
			return i;
    373e:	b2c0      	uxtb	r0, r0
    3740:	e7f9      	b.n	3736 <_sercom_get_hardware_index+0x32>
    3742:	bf00      	nop
    3744:	0000f13c 	.word	0x0000f13c

00003748 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    3748:	b510      	push	{r4, lr}
	void *hw = device->hw;
    374a:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    374c:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    374e:	f013 0f01 	tst.w	r3, #1
    3752:	d003      	beq.n	375c <_sercom_usart_interrupt_handler+0x14>
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    3754:	7da3      	ldrb	r3, [r4, #22]
    3756:	f013 0f01 	tst.w	r3, #1
    375a:	d112      	bne.n	3782 <_sercom_usart_interrupt_handler+0x3a>
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
}

static inline bool hri_sercomusart_get_interrupt_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    375c:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    375e:	f013 0f02 	tst.w	r3, #2
    3762:	d003      	beq.n	376c <_sercom_usart_interrupt_handler+0x24>
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    3764:	7da3      	ldrb	r3, [r4, #22]
    3766:	f013 0f02 	tst.w	r3, #2
    376a:	d10f      	bne.n	378c <_sercom_usart_interrupt_handler+0x44>
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
}

static inline bool hri_sercomusart_get_interrupt_RXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    376c:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    376e:	f013 0f04 	tst.w	r3, #4
    3772:	d015      	beq.n	37a0 <_sercom_usart_interrupt_handler+0x58>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    3774:	8b63      	ldrh	r3, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    3776:	f003 0337 	and.w	r3, r3, #55	; 0x37
    377a:	b163      	cbz	r3, 3796 <_sercom_usart_interrupt_handler+0x4e>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    377c:	23ff      	movs	r3, #255	; 0xff
    377e:	8363      	strh	r3, [r4, #26]
    3780:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    3782:	2301      	movs	r3, #1
    3784:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    3786:	6803      	ldr	r3, [r0, #0]
    3788:	4798      	blx	r3
    378a:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    378c:	2302      	movs	r3, #2
    378e:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    3790:	6883      	ldr	r3, [r0, #8]
    3792:	4798      	blx	r3
    3794:	bd10      	pop	{r4, pc}
	return ((Sercom *)hw)->USART.DATA.reg;
    3796:	6aa1      	ldr	r1, [r4, #40]	; 0x28
		       | SERCOM_USART_STATUS_ISF | SERCOM_USART_STATUS_COLL)) {
			hri_sercomusart_clear_STATUS_reg(hw, SERCOM_USART_STATUS_MASK);
			return;
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    3798:	6843      	ldr	r3, [r0, #4]
    379a:	b2c9      	uxtb	r1, r1
    379c:	4798      	blx	r3
    379e:	bd10      	pop	{r4, pc}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    37a0:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    37a2:	09db      	lsrs	r3, r3, #7
    37a4:	d100      	bne.n	37a8 <_sercom_usart_interrupt_handler+0x60>
    37a6:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    37a8:	2380      	movs	r3, #128	; 0x80
    37aa:	7623      	strb	r3, [r4, #24]
		uint32_t status;

		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
    37ac:	68c3      	ldr	r3, [r0, #12]
    37ae:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    37b0:	8b63      	ldrh	r3, [r4, #26]
    37b2:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    37b4:	8363      	strh	r3, [r4, #26]
    37b6:	e7f6      	b.n	37a6 <_sercom_usart_interrupt_handler+0x5e>

000037b8 <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM0) {
    37b8:	4b05      	ldr	r3, [pc, #20]	; (37d0 <_sercom_init_irq_param+0x18>)
    37ba:	4298      	cmp	r0, r3
    37bc:	d005      	beq.n	37ca <_sercom_init_irq_param+0x12>
		_sercom0_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM5) {
    37be:	4b05      	ldr	r3, [pc, #20]	; (37d4 <_sercom_init_irq_param+0x1c>)
    37c0:	4298      	cmp	r0, r3
		_sercom5_dev = (struct _usart_async_device *)dev;
    37c2:	bf04      	itt	eq
    37c4:	4b04      	ldreq	r3, [pc, #16]	; (37d8 <_sercom_init_irq_param+0x20>)
    37c6:	6059      	streq	r1, [r3, #4]
    37c8:	4770      	bx	lr
		_sercom0_dev = (struct _usart_async_device *)dev;
    37ca:	4b03      	ldr	r3, [pc, #12]	; (37d8 <_sercom_init_irq_param+0x20>)
    37cc:	6019      	str	r1, [r3, #0]
    37ce:	4770      	bx	lr
    37d0:	40003000 	.word	0x40003000
    37d4:	43000400 	.word	0x43000400
    37d8:	20007048 	.word	0x20007048

000037dc <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    37dc:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    37de:	4b03      	ldr	r3, [pc, #12]	; (37ec <_sercom_get_irq_num+0x10>)
    37e0:	4798      	blx	r3
    37e2:	0080      	lsls	r0, r0, #2
    37e4:	302e      	adds	r0, #46	; 0x2e
}
    37e6:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    37ea:	bd08      	pop	{r3, pc}
    37ec:	00003705 	.word	0x00003705

000037f0 <_spi_sync_enable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    37f0:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    37f2:	f013 0f01 	tst.w	r3, #1
    37f6:	d109      	bne.n	380c <_spi_sync_enable+0x1c>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    37f8:	69c3      	ldr	r3, [r0, #28]
    37fa:	f013 0f03 	tst.w	r3, #3
    37fe:	d1fb      	bne.n	37f8 <_spi_sync_enable+0x8>
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    3800:	6803      	ldr	r3, [r0, #0]
    3802:	f043 0302 	orr.w	r3, r3, #2
    3806:	6003      	str	r3, [r0, #0]
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    3808:	2000      	movs	r0, #0
    380a:	4770      	bx	lr
		return ERR_BUSY;
    380c:	f06f 0003 	mvn.w	r0, #3
}
    3810:	4770      	bx	lr

00003812 <_spi_set_mode>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    3812:	69c3      	ldr	r3, [r0, #28]
 */
static int32_t _spi_set_mode(void *const hw, const enum spi_transfer_mode mode)
{
	uint32_t ctrla;

	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE)) {
    3814:	f013 0f03 	tst.w	r3, #3
    3818:	d109      	bne.n	382e <_spi_set_mode+0x1c>
	return ((Sercom *)hw)->SPI.CTRLA.reg;
    381a:	6803      	ldr	r3, [r0, #0]
		return ERR_BUSY;
	}

	ctrla = hri_sercomspi_read_CTRLA_reg(hw);
	ctrla &= ~(SERCOM_SPI_CTRLA_CPOL | SERCOM_SPI_CTRLA_CPHA);
    381c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
	ctrla |= (mode & 0x3u) << SERCOM_SPI_CTRLA_CPHA_Pos;
    3820:	0709      	lsls	r1, r1, #28
    3822:	f001 5140 	and.w	r1, r1, #805306368	; 0x30000000
    3826:	4319      	orrs	r1, r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    3828:	6001      	str	r1, [r0, #0]
	hri_sercomspi_write_CTRLA_reg(hw, ctrla);

	return ERR_NONE;
    382a:	2000      	movs	r0, #0
    382c:	4770      	bx	lr
		return ERR_BUSY;
    382e:	f06f 0003 	mvn.w	r0, #3
}
    3832:	4770      	bx	lr

00003834 <_spi_set_char_size>:
 * \return Setting char size status
 */
static int32_t _spi_set_char_size(void *const hw, const enum spi_char_size char_size, uint8_t *const size)
{
	/* Only 8-bit or 9-bit accepted */
	if (!(char_size == SPI_CHAR_SIZE_8 || char_size == SPI_CHAR_SIZE_9)) {
    3834:	2901      	cmp	r1, #1
    3836:	d813      	bhi.n	3860 <_spi_set_char_size+0x2c>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    3838:	69c3      	ldr	r3, [r0, #28]
		return ERR_INVALID_ARG;
	}

	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_CTRLB)) {
    383a:	f013 0f05 	tst.w	r3, #5
    383e:	d112      	bne.n	3866 <_spi_set_char_size+0x32>
{
    3840:	b410      	push	{r4}
	tmp = ((Sercom *)hw)->SPI.CTRLB.reg;
    3842:	6844      	ldr	r4, [r0, #4]
	tmp &= ~SERCOM_SPI_CTRLB_CHSIZE_Msk;
    3844:	f024 0407 	bic.w	r4, r4, #7
	tmp |= SERCOM_SPI_CTRLB_CHSIZE(data);
    3848:	f001 0307 	and.w	r3, r1, #7
    384c:	4323      	orrs	r3, r4
	((Sercom *)hw)->SPI.CTRLB.reg = tmp;
    384e:	6043      	str	r3, [r0, #4]
		return ERR_BUSY;
	}

	hri_sercomspi_write_CTRLB_CHSIZE_bf(hw, char_size);
	*size = (char_size == SPI_CHAR_SIZE_8) ? 1 : 2;
    3850:	2900      	cmp	r1, #0
    3852:	bf0c      	ite	eq
    3854:	2301      	moveq	r3, #1
    3856:	2302      	movne	r3, #2
    3858:	7013      	strb	r3, [r2, #0]

	return ERR_NONE;
    385a:	2000      	movs	r0, #0
}
    385c:	bc10      	pop	{r4}
    385e:	4770      	bx	lr
		return ERR_INVALID_ARG;
    3860:	f06f 000c 	mvn.w	r0, #12
    3864:	4770      	bx	lr
		return ERR_BUSY;
    3866:	f06f 0003 	mvn.w	r0, #3
    386a:	4770      	bx	lr

0000386c <_spi_set_data_order>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    386c:	69c3      	ldr	r3, [r0, #28]
 */
static int32_t _spi_set_data_order(void *const hw, const enum spi_data_order dord)
{
	uint32_t ctrla;

	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    386e:	f013 0f01 	tst.w	r3, #1
    3872:	d109      	bne.n	3888 <_spi_set_data_order+0x1c>
	return ((Sercom *)hw)->SPI.CTRLA.reg;
    3874:	6803      	ldr	r3, [r0, #0]
		return ERR_BUSY;
	}

	ctrla = hri_sercomspi_read_CTRLA_reg(hw);

	if (dord == SPI_DATA_ORDER_LSB_1ST) {
    3876:	2901      	cmp	r1, #1
		ctrla |= SERCOM_SPI_CTRLA_DORD;
    3878:	bf0c      	ite	eq
    387a:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
	} else {
		ctrla &= ~SERCOM_SPI_CTRLA_DORD;
    387e:	f023 4380 	bicne.w	r3, r3, #1073741824	; 0x40000000
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    3882:	6003      	str	r3, [r0, #0]
	}
	hri_sercomspi_write_CTRLA_reg(hw, ctrla);

	return ERR_NONE;
    3884:	2000      	movs	r0, #0
    3886:	4770      	bx	lr
		return ERR_BUSY;
    3888:	f06f 0003 	mvn.w	r0, #3
}
    388c:	4770      	bx	lr
	...

00003890 <_usart_init>:
{
    3890:	b538      	push	{r3, r4, r5, lr}
    3892:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    3894:	4b35      	ldr	r3, [pc, #212]	; (396c <_usart_init+0xdc>)
    3896:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    3898:	2800      	cmp	r0, #0
    389a:	d042      	beq.n	3922 <_usart_init+0x92>
    389c:	2805      	cmp	r0, #5
    389e:	d042      	beq.n	3926 <_usart_init+0x96>
	ASSERT(false);
    38a0:	f240 226d 	movw	r2, #621	; 0x26d
    38a4:	4932      	ldr	r1, [pc, #200]	; (3970 <_usart_init+0xe0>)
    38a6:	2000      	movs	r0, #0
    38a8:	4b32      	ldr	r3, [pc, #200]	; (3974 <_usart_init+0xe4>)
    38aa:	4798      	blx	r3
	return 0;
    38ac:	2200      	movs	r2, #0
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    38ae:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    38b0:	f013 0f01 	tst.w	r3, #1
    38b4:	d11a      	bne.n	38ec <_usart_init+0x5c>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    38b6:	0053      	lsls	r3, r2, #1
    38b8:	1899      	adds	r1, r3, r2
    38ba:	4b2f      	ldr	r3, [pc, #188]	; (3978 <_usart_init+0xe8>)
    38bc:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    38c0:	6a59      	ldr	r1, [r3, #36]	; 0x24
    38c2:	f001 011c 	and.w	r1, r1, #28
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    38c6:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    38c8:	f013 0f02 	tst.w	r3, #2
    38cc:	d00b      	beq.n	38e6 <_usart_init+0x56>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    38ce:	69e3      	ldr	r3, [r4, #28]
    38d0:	f013 0f03 	tst.w	r3, #3
    38d4:	d1fb      	bne.n	38ce <_usart_init+0x3e>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    38d6:	6823      	ldr	r3, [r4, #0]
    38d8:	f023 0302 	bic.w	r3, r3, #2
    38dc:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    38de:	69e3      	ldr	r3, [r4, #28]
    38e0:	f013 0f02 	tst.w	r3, #2
    38e4:	d1fb      	bne.n	38de <_usart_init+0x4e>
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    38e6:	f041 0101 	orr.w	r1, r1, #1
	((Sercom *)hw)->USART.CTRLA.reg = data;
    38ea:	6021      	str	r1, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    38ec:	69e3      	ldr	r3, [r4, #28]
    38ee:	f013 0f01 	tst.w	r3, #1
    38f2:	d1fb      	bne.n	38ec <_usart_init+0x5c>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    38f4:	4611      	mov	r1, r2
    38f6:	0053      	lsls	r3, r2, #1
    38f8:	1898      	adds	r0, r3, r2
    38fa:	4b1f      	ldr	r3, [pc, #124]	; (3978 <_usart_init+0xe8>)
    38fc:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    3900:	6a58      	ldr	r0, [r3, #36]	; 0x24
	((Sercom *)hw)->USART.CTRLA.reg = data;
    3902:	6020      	str	r0, [r4, #0]
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    3904:	6a9d      	ldr	r5, [r3, #40]	; 0x28
	((Sercom *)hw)->USART.CTRLB.reg = data;
    3906:	6065      	str	r5, [r4, #4]
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    3908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Sercom *)hw)->USART.CTRLC.reg = data;
    390a:	60a3      	str	r3, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    390c:	f410 4fc0 	tst.w	r0, #24576	; 0x6000
    3910:	d10b      	bne.n	392a <_usart_init+0x9a>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    3912:	0053      	lsls	r3, r2, #1
    3914:	4413      	add	r3, r2
    3916:	4a18      	ldr	r2, [pc, #96]	; (3978 <_usart_init+0xe8>)
    3918:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    391c:	8e13      	ldrh	r3, [r2, #48]	; 0x30
	((Sercom *)hw)->USART.BAUD.reg = data;
    391e:	81a3      	strh	r3, [r4, #12]
    3920:	e013      	b.n	394a <_usart_init+0xba>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    3922:	2200      	movs	r2, #0
    3924:	e7c3      	b.n	38ae <_usart_init+0x1e>
		if (_usarts[i].number == sercom_offset) {
    3926:	2201      	movs	r2, #1
    3928:	e7c1      	b.n	38ae <_usart_init+0x1e>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    392a:	0053      	lsls	r3, r2, #1
    392c:	4413      	add	r3, r2
    392e:	4a12      	ldr	r2, [pc, #72]	; (3978 <_usart_init+0xe8>)
    3930:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    3934:	8e10      	ldrh	r0, [r2, #48]	; 0x30
    3936:	89a3      	ldrh	r3, [r4, #12]
    3938:	f360 030c 	bfi	r3, r0, #0, #13
    393c:	81a3      	strh	r3, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    393e:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
    3942:	89a3      	ldrh	r3, [r4, #12]
    3944:	f362 334f 	bfi	r3, r2, #13, #3
    3948:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    394a:	4b0b      	ldr	r3, [pc, #44]	; (3978 <_usart_init+0xe8>)
    394c:	004a      	lsls	r2, r1, #1
    394e:	1850      	adds	r0, r2, r1
    3950:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    3954:	f890 0033 	ldrb.w	r0, [r0, #51]	; 0x33
	((Sercom *)hw)->USART.RXPL.reg = data;
    3958:	73a0      	strb	r0, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    395a:	440a      	add	r2, r1
    395c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    3960:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    3964:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
    3968:	2000      	movs	r0, #0
    396a:	bd38      	pop	{r3, r4, r5, pc}
    396c:	00003705 	.word	0x00003705
    3970:	0000f1a4 	.word	0x0000f1a4
    3974:	0000272d 	.word	0x0000272d
    3978:	0000f13c 	.word	0x0000f13c

0000397c <_usart_async_init>:
{
    397c:	b570      	push	{r4, r5, r6, lr}
    397e:	460d      	mov	r5, r1
	ASSERT(device);
    3980:	4606      	mov	r6, r0
    3982:	22cd      	movs	r2, #205	; 0xcd
    3984:	4917      	ldr	r1, [pc, #92]	; (39e4 <_usart_async_init+0x68>)
    3986:	3000      	adds	r0, #0
    3988:	bf18      	it	ne
    398a:	2001      	movne	r0, #1
    398c:	4b16      	ldr	r3, [pc, #88]	; (39e8 <_usart_async_init+0x6c>)
    398e:	4798      	blx	r3
	init_status = _usart_init(hw);
    3990:	4628      	mov	r0, r5
    3992:	4b16      	ldr	r3, [pc, #88]	; (39ec <_usart_async_init+0x70>)
    3994:	4798      	blx	r3
	if (init_status) {
    3996:	4604      	mov	r4, r0
    3998:	b108      	cbz	r0, 399e <_usart_async_init+0x22>
}
    399a:	4620      	mov	r0, r4
    399c:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    399e:	61b5      	str	r5, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
    39a0:	4631      	mov	r1, r6
    39a2:	4628      	mov	r0, r5
    39a4:	4b12      	ldr	r3, [pc, #72]	; (39f0 <_usart_async_init+0x74>)
    39a6:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    39a8:	4628      	mov	r0, r5
    39aa:	4b12      	ldr	r3, [pc, #72]	; (39f4 <_usart_async_init+0x78>)
    39ac:	4798      	blx	r3
    39ae:	1d01      	adds	r1, r0, #4
    39b0:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    39b2:	2501      	movs	r5, #1
    39b4:	f000 021f 	and.w	r2, r0, #31
    39b8:	fa05 f202 	lsl.w	r2, r5, r2
    39bc:	0943      	lsrs	r3, r0, #5
    39be:	009b      	lsls	r3, r3, #2
    39c0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    39c4:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    39c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    39cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    39d0:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    39d4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    39d8:	601a      	str	r2, [r3, #0]
		irq++;
    39da:	3001      	adds	r0, #1
    39dc:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    39de:	4281      	cmp	r1, r0
    39e0:	d1e8      	bne.n	39b4 <_usart_async_init+0x38>
    39e2:	e7da      	b.n	399a <_usart_async_init+0x1e>
    39e4:	0000f1a4 	.word	0x0000f1a4
    39e8:	0000272d 	.word	0x0000272d
    39ec:	00003891 	.word	0x00003891
    39f0:	000037b9 	.word	0x000037b9
    39f4:	000037dd 	.word	0x000037dd

000039f8 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    39f8:	6982      	ldr	r2, [r0, #24]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    39fa:	69d3      	ldr	r3, [r2, #28]
    39fc:	f013 0f03 	tst.w	r3, #3
    3a00:	d1fb      	bne.n	39fa <_usart_async_enable+0x2>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    3a02:	6813      	ldr	r3, [r2, #0]
    3a04:	f043 0302 	orr.w	r3, r3, #2
    3a08:	6013      	str	r3, [r2, #0]
    3a0a:	4770      	bx	lr

00003a0c <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    3a0c:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.DATA.reg = data;
    3a0e:	6299      	str	r1, [r3, #40]	; 0x28
    3a10:	4770      	bx	lr

00003a12 <_usart_async_is_byte_sent>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    3a12:	6983      	ldr	r3, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    3a14:	7e18      	ldrb	r0, [r3, #24]
}
    3a16:	f000 0001 	and.w	r0, r0, #1
    3a1a:	4770      	bx	lr

00003a1c <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    3a1c:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    3a1e:	2201      	movs	r2, #1
    3a20:	759a      	strb	r2, [r3, #22]
    3a22:	4770      	bx	lr

00003a24 <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    3a24:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    3a26:	2202      	movs	r2, #2
    3a28:	759a      	strb	r2, [r3, #22]
    3a2a:	4770      	bx	lr

00003a2c <_usart_async_set_irq_state>:
{
    3a2c:	b570      	push	{r4, r5, r6, lr}
    3a2e:	460c      	mov	r4, r1
    3a30:	4616      	mov	r6, r2
	ASSERT(device);
    3a32:	4605      	mov	r5, r0
    3a34:	f240 222d 	movw	r2, #557	; 0x22d
    3a38:	4915      	ldr	r1, [pc, #84]	; (3a90 <_usart_async_set_irq_state+0x64>)
    3a3a:	3000      	adds	r0, #0
    3a3c:	bf18      	it	ne
    3a3e:	2001      	movne	r0, #1
    3a40:	4b14      	ldr	r3, [pc, #80]	; (3a94 <_usart_async_set_irq_state+0x68>)
    3a42:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    3a44:	f014 0ffd 	tst.w	r4, #253	; 0xfd
    3a48:	d10d      	bne.n	3a66 <_usart_async_set_irq_state+0x3a>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    3a4a:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    3a4c:	b92e      	cbnz	r6, 3a5a <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    3a4e:	2201      	movs	r2, #1
    3a50:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    3a52:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    3a54:	2202      	movs	r2, #2
    3a56:	751a      	strb	r2, [r3, #20]
    3a58:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    3a5a:	2201      	movs	r2, #1
    3a5c:	759a      	strb	r2, [r3, #22]
    3a5e:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    3a60:	2202      	movs	r2, #2
    3a62:	759a      	strb	r2, [r3, #22]
    3a64:	bd70      	pop	{r4, r5, r6, pc}
	} else if (USART_ASYNC_RX_DONE == type) {
    3a66:	2c01      	cmp	r4, #1
    3a68:	d002      	beq.n	3a70 <_usart_async_set_irq_state+0x44>
	} else if (USART_ASYNC_ERROR == type) {
    3a6a:	2c03      	cmp	r4, #3
    3a6c:	d008      	beq.n	3a80 <_usart_async_set_irq_state+0x54>
    3a6e:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    3a70:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    3a72:	b916      	cbnz	r6, 3a7a <_usart_async_set_irq_state+0x4e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    3a74:	2204      	movs	r2, #4
    3a76:	751a      	strb	r2, [r3, #20]
    3a78:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    3a7a:	2204      	movs	r2, #4
    3a7c:	759a      	strb	r2, [r3, #22]
    3a7e:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    3a80:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    3a82:	b116      	cbz	r6, 3a8a <_usart_async_set_irq_state+0x5e>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    3a84:	2280      	movs	r2, #128	; 0x80
    3a86:	759a      	strb	r2, [r3, #22]
}
    3a88:	e7f1      	b.n	3a6e <_usart_async_set_irq_state+0x42>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    3a8a:	2280      	movs	r2, #128	; 0x80
    3a8c:	751a      	strb	r2, [r3, #20]
    3a8e:	bd70      	pop	{r4, r5, r6, pc}
    3a90:	0000f1a4 	.word	0x0000f1a4
    3a94:	0000272d 	.word	0x0000272d

00003a98 <SERCOM0_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM0_0_Handler(void)
{
    3a98:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    3a9a:	4b02      	ldr	r3, [pc, #8]	; (3aa4 <SERCOM0_0_Handler+0xc>)
    3a9c:	6818      	ldr	r0, [r3, #0]
    3a9e:	4b02      	ldr	r3, [pc, #8]	; (3aa8 <SERCOM0_0_Handler+0x10>)
    3aa0:	4798      	blx	r3
    3aa2:	bd08      	pop	{r3, pc}
    3aa4:	20007048 	.word	0x20007048
    3aa8:	00003749 	.word	0x00003749

00003aac <SERCOM0_1_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM0_1_Handler(void)
{
    3aac:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    3aae:	4b02      	ldr	r3, [pc, #8]	; (3ab8 <SERCOM0_1_Handler+0xc>)
    3ab0:	6818      	ldr	r0, [r3, #0]
    3ab2:	4b02      	ldr	r3, [pc, #8]	; (3abc <SERCOM0_1_Handler+0x10>)
    3ab4:	4798      	blx	r3
    3ab6:	bd08      	pop	{r3, pc}
    3ab8:	20007048 	.word	0x20007048
    3abc:	00003749 	.word	0x00003749

00003ac0 <SERCOM0_2_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM0_2_Handler(void)
{
    3ac0:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    3ac2:	4b02      	ldr	r3, [pc, #8]	; (3acc <SERCOM0_2_Handler+0xc>)
    3ac4:	6818      	ldr	r0, [r3, #0]
    3ac6:	4b02      	ldr	r3, [pc, #8]	; (3ad0 <SERCOM0_2_Handler+0x10>)
    3ac8:	4798      	blx	r3
    3aca:	bd08      	pop	{r3, pc}
    3acc:	20007048 	.word	0x20007048
    3ad0:	00003749 	.word	0x00003749

00003ad4 <SERCOM0_3_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM0_3_Handler(void)
{
    3ad4:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    3ad6:	4b02      	ldr	r3, [pc, #8]	; (3ae0 <SERCOM0_3_Handler+0xc>)
    3ad8:	6818      	ldr	r0, [r3, #0]
    3ada:	4b02      	ldr	r3, [pc, #8]	; (3ae4 <SERCOM0_3_Handler+0x10>)
    3adc:	4798      	blx	r3
    3ade:	bd08      	pop	{r3, pc}
    3ae0:	20007048 	.word	0x20007048
    3ae4:	00003749 	.word	0x00003749

00003ae8 <SERCOM5_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_0_Handler(void)
{
    3ae8:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom5_dev);
    3aea:	4b02      	ldr	r3, [pc, #8]	; (3af4 <SERCOM5_0_Handler+0xc>)
    3aec:	6858      	ldr	r0, [r3, #4]
    3aee:	4b02      	ldr	r3, [pc, #8]	; (3af8 <SERCOM5_0_Handler+0x10>)
    3af0:	4798      	blx	r3
    3af2:	bd08      	pop	{r3, pc}
    3af4:	20007048 	.word	0x20007048
    3af8:	00003749 	.word	0x00003749

00003afc <SERCOM5_1_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_1_Handler(void)
{
    3afc:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom5_dev);
    3afe:	4b02      	ldr	r3, [pc, #8]	; (3b08 <SERCOM5_1_Handler+0xc>)
    3b00:	6858      	ldr	r0, [r3, #4]
    3b02:	4b02      	ldr	r3, [pc, #8]	; (3b0c <SERCOM5_1_Handler+0x10>)
    3b04:	4798      	blx	r3
    3b06:	bd08      	pop	{r3, pc}
    3b08:	20007048 	.word	0x20007048
    3b0c:	00003749 	.word	0x00003749

00003b10 <SERCOM5_2_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_2_Handler(void)
{
    3b10:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom5_dev);
    3b12:	4b02      	ldr	r3, [pc, #8]	; (3b1c <SERCOM5_2_Handler+0xc>)
    3b14:	6858      	ldr	r0, [r3, #4]
    3b16:	4b02      	ldr	r3, [pc, #8]	; (3b20 <SERCOM5_2_Handler+0x10>)
    3b18:	4798      	blx	r3
    3b1a:	bd08      	pop	{r3, pc}
    3b1c:	20007048 	.word	0x20007048
    3b20:	00003749 	.word	0x00003749

00003b24 <SERCOM5_3_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_3_Handler(void)
{
    3b24:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom5_dev);
    3b26:	4b02      	ldr	r3, [pc, #8]	; (3b30 <SERCOM5_3_Handler+0xc>)
    3b28:	6858      	ldr	r0, [r3, #4]
    3b2a:	4b02      	ldr	r3, [pc, #8]	; (3b34 <SERCOM5_3_Handler+0x10>)
    3b2c:	4798      	blx	r3
    3b2e:	bd08      	pop	{r3, pc}
    3b30:	20007048 	.word	0x20007048
    3b34:	00003749 	.word	0x00003749

00003b38 <_spi_m_sync_init>:
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    3b38:	b538      	push	{r3, r4, r5, lr}
    3b3a:	4605      	mov	r5, r0
    3b3c:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    3b3e:	4608      	mov	r0, r1
    3b40:	4b2e      	ldr	r3, [pc, #184]	; (3bfc <_spi_m_sync_init+0xc4>)
    3b42:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    3b44:	2804      	cmp	r0, #4
    3b46:	d00c      	beq.n	3b62 <_spi_m_sync_init+0x2a>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    3b48:	2d00      	cmp	r5, #0
    3b4a:	d045      	beq.n	3bd8 <_spi_m_sync_init+0xa0>
    3b4c:	f640 128e 	movw	r2, #2446	; 0x98e
    3b50:	492b      	ldr	r1, [pc, #172]	; (3c00 <_spi_m_sync_init+0xc8>)
    3b52:	1c20      	adds	r0, r4, #0
    3b54:	bf18      	it	ne
    3b56:	2001      	movne	r0, #1
    3b58:	4b2a      	ldr	r3, [pc, #168]	; (3c04 <_spi_m_sync_init+0xcc>)
    3b5a:	4798      	blx	r3

	if (regs == NULL) {
		return ERR_INVALID_ARG;
    3b5c:	f06f 000c 	mvn.w	r0, #12
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;

	dev->dummy_byte = regs->dummy_byte;

	return ERR_NONE;
}
    3b60:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    3b62:	2d00      	cmp	r5, #0
    3b64:	d141      	bne.n	3bea <_spi_m_sync_init+0xb2>
    3b66:	f640 128e 	movw	r2, #2446	; 0x98e
    3b6a:	4925      	ldr	r1, [pc, #148]	; (3c00 <_spi_m_sync_init+0xc8>)
    3b6c:	2000      	movs	r0, #0
    3b6e:	4b25      	ldr	r3, [pc, #148]	; (3c04 <_spi_m_sync_init+0xcc>)
    3b70:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    3b72:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    3b74:	f013 0f01 	tst.w	r3, #1
    3b78:	d111      	bne.n	3b9e <_spi_m_sync_init+0x66>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    3b7a:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    3b7c:	f013 0f02 	tst.w	r3, #2
    3b80:	d00b      	beq.n	3b9a <_spi_m_sync_init+0x62>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3b82:	69e3      	ldr	r3, [r4, #28]
    3b84:	f013 0f03 	tst.w	r3, #3
    3b88:	d1fb      	bne.n	3b82 <_spi_m_sync_init+0x4a>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    3b8a:	6823      	ldr	r3, [r4, #0]
    3b8c:	f023 0302 	bic.w	r3, r3, #2
    3b90:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3b92:	69e3      	ldr	r3, [r4, #28]
    3b94:	f013 0f02 	tst.w	r3, #2
    3b98:	d1fb      	bne.n	3b92 <_spi_m_sync_init+0x5a>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    3b9a:	230d      	movs	r3, #13
    3b9c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3b9e:	69e3      	ldr	r3, [r4, #28]
    3ba0:	f013 0f01 	tst.w	r3, #1
    3ba4:	d1fb      	bne.n	3b9e <_spi_m_sync_init+0x66>
	dev->prvt = hw;
    3ba6:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    3ba8:	f640 121e 	movw	r2, #2334	; 0x91e
    3bac:	4914      	ldr	r1, [pc, #80]	; (3c00 <_spi_m_sync_init+0xc8>)
    3bae:	1c20      	adds	r0, r4, #0
    3bb0:	bf18      	it	ne
    3bb2:	2001      	movne	r0, #1
    3bb4:	4b13      	ldr	r3, [pc, #76]	; (3c04 <_spi_m_sync_init+0xcc>)
    3bb6:	4798      	blx	r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    3bb8:	4b13      	ldr	r3, [pc, #76]	; (3c08 <_spi_m_sync_init+0xd0>)
    3bba:	6023      	str	r3, [r4, #0]
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    3bbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    3bc0:	6063      	str	r3, [r4, #4]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    3bc2:	231d      	movs	r3, #29
    3bc4:	7323      	strb	r3, [r4, #12]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    3bc6:	2000      	movs	r0, #0
    3bc8:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    3bcc:	2301      	movs	r3, #1
    3bce:	712b      	strb	r3, [r5, #4]
	dev->dummy_byte = regs->dummy_byte;
    3bd0:	f240 13ff 	movw	r3, #511	; 0x1ff
    3bd4:	80eb      	strh	r3, [r5, #6]
	return ERR_NONE;
    3bd6:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    3bd8:	f640 128e 	movw	r2, #2446	; 0x98e
    3bdc:	4908      	ldr	r1, [pc, #32]	; (3c00 <_spi_m_sync_init+0xc8>)
    3bde:	2000      	movs	r0, #0
    3be0:	4b08      	ldr	r3, [pc, #32]	; (3c04 <_spi_m_sync_init+0xcc>)
    3be2:	4798      	blx	r3
		return ERR_INVALID_ARG;
    3be4:	f06f 000c 	mvn.w	r0, #12
    3be8:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    3bea:	f640 128e 	movw	r2, #2446	; 0x98e
    3bee:	4904      	ldr	r1, [pc, #16]	; (3c00 <_spi_m_sync_init+0xc8>)
    3bf0:	1c20      	adds	r0, r4, #0
    3bf2:	bf18      	it	ne
    3bf4:	2001      	movne	r0, #1
    3bf6:	4b03      	ldr	r3, [pc, #12]	; (3c04 <_spi_m_sync_init+0xcc>)
    3bf8:	4798      	blx	r3
    3bfa:	e7ba      	b.n	3b72 <_spi_m_sync_init+0x3a>
    3bfc:	00003705 	.word	0x00003705
    3c00:	0000f1a4 	.word	0x0000f1a4
    3c04:	0000272d 	.word	0x0000272d
    3c08:	0013008c 	.word	0x0013008c

00003c0c <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    3c0c:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    3c0e:	4604      	mov	r4, r0
    3c10:	b160      	cbz	r0, 3c2c <_spi_m_sync_enable+0x20>
    3c12:	6800      	ldr	r0, [r0, #0]
    3c14:	3000      	adds	r0, #0
    3c16:	bf18      	it	ne
    3c18:	2001      	movne	r0, #1
    3c1a:	f640 12ed 	movw	r2, #2541	; 0x9ed
    3c1e:	4904      	ldr	r1, [pc, #16]	; (3c30 <_spi_m_sync_enable+0x24>)
    3c20:	4b04      	ldr	r3, [pc, #16]	; (3c34 <_spi_m_sync_enable+0x28>)
    3c22:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    3c24:	6820      	ldr	r0, [r4, #0]
    3c26:	4b04      	ldr	r3, [pc, #16]	; (3c38 <_spi_m_sync_enable+0x2c>)
    3c28:	4798      	blx	r3
}
    3c2a:	bd10      	pop	{r4, pc}
    3c2c:	2000      	movs	r0, #0
    3c2e:	e7f4      	b.n	3c1a <_spi_m_sync_enable+0xe>
    3c30:	0000f1a4 	.word	0x0000f1a4
    3c34:	0000272d 	.word	0x0000272d
    3c38:	000037f1 	.word	0x000037f1

00003c3c <_spi_m_sync_set_mode>:

	return _spi_async_disable(dev->prvt);
}

int32_t _spi_m_sync_set_mode(struct _spi_m_sync_dev *dev, const enum spi_transfer_mode mode)
{
    3c3c:	b538      	push	{r3, r4, r5, lr}
    3c3e:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    3c40:	4604      	mov	r4, r0
    3c42:	b168      	cbz	r0, 3c60 <_spi_m_sync_set_mode+0x24>
    3c44:	6800      	ldr	r0, [r0, #0]
    3c46:	3000      	adds	r0, #0
    3c48:	bf18      	it	ne
    3c4a:	2001      	movne	r0, #1
    3c4c:	f640 2225 	movw	r2, #2597	; 0xa25
    3c50:	4904      	ldr	r1, [pc, #16]	; (3c64 <_spi_m_sync_set_mode+0x28>)
    3c52:	4b05      	ldr	r3, [pc, #20]	; (3c68 <_spi_m_sync_set_mode+0x2c>)
    3c54:	4798      	blx	r3

	return _spi_set_mode(dev->prvt, mode);
    3c56:	4629      	mov	r1, r5
    3c58:	6820      	ldr	r0, [r4, #0]
    3c5a:	4b04      	ldr	r3, [pc, #16]	; (3c6c <_spi_m_sync_set_mode+0x30>)
    3c5c:	4798      	blx	r3
}
    3c5e:	bd38      	pop	{r3, r4, r5, pc}
    3c60:	2000      	movs	r0, #0
    3c62:	e7f3      	b.n	3c4c <_spi_m_sync_set_mode+0x10>
    3c64:	0000f1a4 	.word	0x0000f1a4
    3c68:	0000272d 	.word	0x0000272d
    3c6c:	00003813 	.word	0x00003813

00003c70 <_spi_m_sync_set_baudrate>:
	rc = ((clk >> 1) / baud) - 1;
	return rc;
}

int32_t _spi_m_sync_set_baudrate(struct _spi_m_sync_dev *dev, const uint32_t baud_val)
{
    3c70:	b538      	push	{r3, r4, r5, lr}
    3c72:	460c      	mov	r4, r1
	ASSERT(dev && dev->prvt);
    3c74:	4605      	mov	r5, r0
    3c76:	b198      	cbz	r0, 3ca0 <_spi_m_sync_set_baudrate+0x30>
    3c78:	6800      	ldr	r0, [r0, #0]
    3c7a:	3000      	adds	r0, #0
    3c7c:	bf18      	it	ne
    3c7e:	2001      	movne	r0, #1
    3c80:	f640 2254 	movw	r2, #2644	; 0xa54
    3c84:	4907      	ldr	r1, [pc, #28]	; (3ca4 <_spi_m_sync_set_baudrate+0x34>)
    3c86:	4b08      	ldr	r3, [pc, #32]	; (3ca8 <_spi_m_sync_set_baudrate+0x38>)
    3c88:	4798      	blx	r3

	return _spi_set_baudrate(dev->prvt, baud_val);
    3c8a:	682b      	ldr	r3, [r5, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    3c8c:	69da      	ldr	r2, [r3, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    3c8e:	f012 0f01 	tst.w	r2, #1
	hri_sercomspi_write_BAUD_reg(hw, baud_val);
    3c92:	bf03      	ittte	eq
    3c94:	b2e4      	uxtbeq	r4, r4
	((Sercom *)hw)->SPI.BAUD.reg = data;
    3c96:	731c      	strbeq	r4, [r3, #12]
	return ERR_NONE;
    3c98:	2000      	moveq	r0, #0
		return ERR_BUSY;
    3c9a:	f06f 0003 	mvnne.w	r0, #3
}
    3c9e:	bd38      	pop	{r3, r4, r5, pc}
    3ca0:	2000      	movs	r0, #0
    3ca2:	e7ed      	b.n	3c80 <_spi_m_sync_set_baudrate+0x10>
    3ca4:	0000f1a4 	.word	0x0000f1a4
    3ca8:	0000272d 	.word	0x0000272d

00003cac <_spi_m_sync_set_char_size>:

	return _spi_set_baudrate(dev->prvt, baud_val);
}

int32_t _spi_m_sync_set_char_size(struct _spi_m_sync_dev *dev, const enum spi_char_size char_size)
{
    3cac:	b538      	push	{r3, r4, r5, lr}
    3cae:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    3cb0:	4604      	mov	r4, r0
    3cb2:	b170      	cbz	r0, 3cd2 <_spi_m_sync_set_char_size+0x26>
    3cb4:	6800      	ldr	r0, [r0, #0]
    3cb6:	3000      	adds	r0, #0
    3cb8:	bf18      	it	ne
    3cba:	2001      	movne	r0, #1
    3cbc:	f640 2262 	movw	r2, #2658	; 0xa62
    3cc0:	4905      	ldr	r1, [pc, #20]	; (3cd8 <_spi_m_sync_set_char_size+0x2c>)
    3cc2:	4b06      	ldr	r3, [pc, #24]	; (3cdc <_spi_m_sync_set_char_size+0x30>)
    3cc4:	4798      	blx	r3

	return _spi_set_char_size(dev->prvt, char_size, &dev->char_size);
    3cc6:	1d22      	adds	r2, r4, #4
    3cc8:	4629      	mov	r1, r5
    3cca:	6820      	ldr	r0, [r4, #0]
    3ccc:	4b04      	ldr	r3, [pc, #16]	; (3ce0 <_spi_m_sync_set_char_size+0x34>)
    3cce:	4798      	blx	r3
}
    3cd0:	bd38      	pop	{r3, r4, r5, pc}
    3cd2:	2000      	movs	r0, #0
    3cd4:	e7f2      	b.n	3cbc <_spi_m_sync_set_char_size+0x10>
    3cd6:	bf00      	nop
    3cd8:	0000f1a4 	.word	0x0000f1a4
    3cdc:	0000272d 	.word	0x0000272d
    3ce0:	00003835 	.word	0x00003835

00003ce4 <_spi_m_sync_set_data_order>:

	return _spi_set_char_size(dev->prvt, char_size, &dev->char_size);
}

int32_t _spi_m_sync_set_data_order(struct _spi_m_sync_dev *dev, const enum spi_data_order dord)
{
    3ce4:	b538      	push	{r3, r4, r5, lr}
    3ce6:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    3ce8:	4604      	mov	r4, r0
    3cea:	b168      	cbz	r0, 3d08 <_spi_m_sync_set_data_order+0x24>
    3cec:	6800      	ldr	r0, [r0, #0]
    3cee:	3000      	adds	r0, #0
    3cf0:	bf18      	it	ne
    3cf2:	2001      	movne	r0, #1
    3cf4:	f640 227e 	movw	r2, #2686	; 0xa7e
    3cf8:	4904      	ldr	r1, [pc, #16]	; (3d0c <_spi_m_sync_set_data_order+0x28>)
    3cfa:	4b05      	ldr	r3, [pc, #20]	; (3d10 <_spi_m_sync_set_data_order+0x2c>)
    3cfc:	4798      	blx	r3

	return _spi_set_data_order(dev->prvt, dord);
    3cfe:	4629      	mov	r1, r5
    3d00:	6820      	ldr	r0, [r4, #0]
    3d02:	4b04      	ldr	r3, [pc, #16]	; (3d14 <_spi_m_sync_set_data_order+0x30>)
    3d04:	4798      	blx	r3
}
    3d06:	bd38      	pop	{r3, r4, r5, pc}
    3d08:	2000      	movs	r0, #0
    3d0a:	e7f3      	b.n	3cf4 <_spi_m_sync_set_data_order+0x10>
    3d0c:	0000f1a4 	.word	0x0000f1a4
    3d10:	0000272d 	.word	0x0000272d
    3d14:	0000386d 	.word	0x0000386d

00003d18 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    3d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3d1c:	4681      	mov	r9, r0
    3d1e:	460e      	mov	r6, r1
	void *                 hw   = dev->prvt;
    3d20:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    3d22:	f8d1 8000 	ldr.w	r8, [r1]
    3d26:	684d      	ldr	r5, [r1, #4]
    3d28:	7907      	ldrb	r7, [r0, #4]

	ASSERT(dev && hw);
    3d2a:	b1a8      	cbz	r0, 3d58 <_spi_m_sync_trans+0x40>
    3d2c:	1c20      	adds	r0, r4, #0
    3d2e:	bf18      	it	ne
    3d30:	2001      	movne	r0, #1
    3d32:	f640 22f2 	movw	r2, #2802	; 0xaf2
    3d36:	492e      	ldr	r1, [pc, #184]	; (3df0 <_spi_m_sync_trans+0xd8>)
    3d38:	4b2e      	ldr	r3, [pc, #184]	; (3df4 <_spi_m_sync_trans+0xdc>)
    3d3a:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    3d3c:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    3d3e:	f013 0f07 	tst.w	r3, #7
    3d42:	d134      	bne.n	3dae <_spi_m_sync_trans+0x96>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3d44:	69e0      	ldr	r0, [r4, #28]
    3d46:	f010 0003 	ands.w	r0, r0, #3
    3d4a:	d1fb      	bne.n	3d44 <_spi_m_sync_trans+0x2c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    3d4c:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    3d4e:	f013 0f02 	tst.w	r3, #2
    3d52:	d030      	beq.n	3db6 <_spi_m_sync_trans+0x9e>
    3d54:	4602      	mov	r2, r0
    3d56:	e008      	b.n	3d6a <_spi_m_sync_trans+0x52>
    3d58:	2000      	movs	r0, #0
    3d5a:	e7ea      	b.n	3d32 <_spi_m_sync_trans+0x1a>
	ctrl->rxcnt++;
    3d5c:	3201      	adds	r2, #1
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    3d5e:	f013 0f80 	tst.w	r3, #128	; 0x80
    3d62:	d112      	bne.n	3d8a <_spi_m_sync_trans+0x72>
		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    3d64:	68b3      	ldr	r3, [r6, #8]
    3d66:	4283      	cmp	r3, r0
    3d68:	d91e      	bls.n	3da8 <_spi_m_sync_trans+0x90>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    3d6a:	7e23      	ldrb	r3, [r4, #24]
    3d6c:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    3d6e:	f013 0f04 	tst.w	r3, #4
    3d72:	d024      	beq.n	3dbe <_spi_m_sync_trans+0xa6>
	return ((Sercom *)hw)->SPI.DATA.reg;
    3d74:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    3d76:	2d00      	cmp	r5, #0
    3d78:	d0f0      	beq.n	3d5c <_spi_m_sync_trans+0x44>
		*ctrl->rxbuf++ = (uint8_t)data;
    3d7a:	7029      	strb	r1, [r5, #0]
		if (ctrl->char_size > 1) {
    3d7c:	2f01      	cmp	r7, #1
		*ctrl->rxbuf++ = (uint8_t)data;
    3d7e:	bf91      	iteee	ls
    3d80:	3501      	addls	r5, #1
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    3d82:	0a09      	lsrhi	r1, r1, #8
    3d84:	7069      	strbhi	r1, [r5, #1]
    3d86:	3502      	addhi	r5, #2
    3d88:	e7e8      	b.n	3d5c <_spi_m_sync_trans+0x44>
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    3d8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    3d8e:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    3d90:	2380      	movs	r3, #128	; 0x80
    3d92:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    3d94:	f06f 0012 	mvn.w	r0, #18
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    3d98:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    3d9a:	f013 0f03 	tst.w	r3, #3
    3d9e:	d0fb      	beq.n	3d98 <_spi_m_sync_trans+0x80>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    3da0:	2303      	movs	r3, #3
    3da2:	7623      	strb	r3, [r4, #24]
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
    3da4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    3da8:	4293      	cmp	r3, r2
    3daa:	d8de      	bhi.n	3d6a <_spi_m_sync_trans+0x52>
    3dac:	e7f4      	b.n	3d98 <_spi_m_sync_trans+0x80>
		return ERR_BUSY;
    3dae:	f06f 0003 	mvn.w	r0, #3
    3db2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ERR_NOT_INITIALIZED;
    3db6:	f06f 0013 	mvn.w	r0, #19
    3dba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ctrl.rxcnt >= ctrl.txcnt) {
    3dbe:	4290      	cmp	r0, r2
    3dc0:	d8cd      	bhi.n	3d5e <_spi_m_sync_trans+0x46>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    3dc2:	f013 0f01 	tst.w	r3, #1
    3dc6:	d0ca      	beq.n	3d5e <_spi_m_sync_trans+0x46>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    3dc8:	f8b9 1006 	ldrh.w	r1, [r9, #6]
	if (ctrl->txbuf) {
    3dcc:	f1b8 0f00 	cmp.w	r8, #0
    3dd0:	d00b      	beq.n	3dea <_spi_m_sync_trans+0xd2>
		data = *ctrl->txbuf++;
    3dd2:	f898 1000 	ldrb.w	r1, [r8]
		if (ctrl->char_size > 1) {
    3dd6:	2f01      	cmp	r7, #1
		data = *ctrl->txbuf++;
    3dd8:	bf91      	iteee	ls
    3dda:	f108 0801 	addls.w	r8, r8, #1
			data |= (*ctrl->txbuf) << 8;
    3dde:	f898 e001 	ldrbhi.w	lr, [r8, #1]
    3de2:	ea41 210e 	orrhi.w	r1, r1, lr, lsl #8
			ctrl->txbuf++;
    3de6:	f108 0802 	addhi.w	r8, r8, #2
	ctrl->txcnt++;
    3dea:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
    3dec:	62a1      	str	r1, [r4, #40]	; 0x28
    3dee:	e7b6      	b.n	3d5e <_spi_m_sync_trans+0x46>
    3df0:	0000f1a4 	.word	0x0000f1a4
    3df4:	0000272d 	.word	0x0000272d

00003df8 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    3df8:	4b03      	ldr	r3, [pc, #12]	; (3e08 <_delay_init+0x10>)
    3dfa:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    3dfe:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    3e00:	2205      	movs	r2, #5
    3e02:	601a      	str	r2, [r3, #0]
    3e04:	4770      	bx	lr
    3e06:	bf00      	nop
    3e08:	e000e010 	.word	0xe000e010

00003e0c <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    3e0c:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    3e0e:	b303      	cbz	r3, 3e52 <_delay_cycles+0x46>
{
    3e10:	b430      	push	{r4, r5}
    3e12:	1e5d      	subs	r5, r3, #1
    3e14:	b2ed      	uxtb	r5, r5
	while (n--) {
    3e16:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    3e18:	4a12      	ldr	r2, [pc, #72]	; (3e64 <_delay_cycles+0x58>)
    3e1a:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    3e1e:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    3e20:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    3e22:	6813      	ldr	r3, [r2, #0]
    3e24:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    3e28:	d0fb      	beq.n	3e22 <_delay_cycles+0x16>
	while (n--) {
    3e2a:	3801      	subs	r0, #1
    3e2c:	b2c0      	uxtb	r0, r0
    3e2e:	28ff      	cmp	r0, #255	; 0xff
    3e30:	d1f5      	bne.n	3e1e <_delay_cycles+0x12>
    3e32:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    3e36:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    3e3a:	3101      	adds	r1, #1
    3e3c:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    3e3e:	4b09      	ldr	r3, [pc, #36]	; (3e64 <_delay_cycles+0x58>)
    3e40:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    3e42:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    3e44:	461a      	mov	r2, r3
    3e46:	6813      	ldr	r3, [r2, #0]
    3e48:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    3e4c:	d0fb      	beq.n	3e46 <_delay_cycles+0x3a>
		;
}
    3e4e:	bc30      	pop	{r4, r5}
    3e50:	4770      	bx	lr
	SysTick->LOAD = buf;
    3e52:	4b04      	ldr	r3, [pc, #16]	; (3e64 <_delay_cycles+0x58>)
    3e54:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    3e56:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    3e58:	461a      	mov	r2, r3
    3e5a:	6813      	ldr	r3, [r2, #0]
    3e5c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    3e60:	d0fb      	beq.n	3e5a <_delay_cycles+0x4e>
    3e62:	4770      	bx	lr
    3e64:	e000e010 	.word	0xe000e010

00003e68 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    3e68:	b570      	push	{r4, r5, r6, lr}
    3e6a:	b088      	sub	sp, #32
    3e6c:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    3e6e:	466c      	mov	r4, sp
    3e70:	4d12      	ldr	r5, [pc, #72]	; (3ebc <get_tc_index+0x54>)
    3e72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    3e74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    3e76:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    3e7a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    3e7e:	9b00      	ldr	r3, [sp, #0]
    3e80:	42b3      	cmp	r3, r6
    3e82:	d00b      	beq.n	3e9c <get_tc_index+0x34>
    3e84:	4630      	mov	r0, r6
    3e86:	aa01      	add	r2, sp, #4
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    3e88:	2301      	movs	r3, #1
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    3e8a:	f852 1b04 	ldr.w	r1, [r2], #4
    3e8e:	4281      	cmp	r1, r0
    3e90:	d005      	beq.n	3e9e <get_tc_index+0x36>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    3e92:	3301      	adds	r3, #1
    3e94:	2b08      	cmp	r3, #8
    3e96:	d1f8      	bne.n	3e8a <get_tc_index+0x22>
			return i;
    3e98:	2000      	movs	r0, #0
    3e9a:	e00b      	b.n	3eb4 <get_tc_index+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    3e9c:	2300      	movs	r3, #0
		if (_tcs[i].number == index) {
    3e9e:	f013 0fff 	tst.w	r3, #255	; 0xff
    3ea2:	d009      	beq.n	3eb8 <get_tc_index+0x50>
	ASSERT(false);
    3ea4:	f44f 72a0 	mov.w	r2, #320	; 0x140
    3ea8:	4905      	ldr	r1, [pc, #20]	; (3ec0 <get_tc_index+0x58>)
    3eaa:	2000      	movs	r0, #0
    3eac:	4b05      	ldr	r3, [pc, #20]	; (3ec4 <get_tc_index+0x5c>)
    3eae:	4798      	blx	r3
	return -1;
    3eb0:	f04f 30ff 	mov.w	r0, #4294967295
}
    3eb4:	b008      	add	sp, #32
    3eb6:	bd70      	pop	{r4, r5, r6, pc}
			return i;
    3eb8:	2000      	movs	r0, #0
    3eba:	e7fb      	b.n	3eb4 <get_tc_index+0x4c>
    3ebc:	0000f1c0 	.word	0x0000f1c0
    3ec0:	0000f1f4 	.word	0x0000f1f4
    3ec4:	0000272d 	.word	0x0000272d

00003ec8 <_timer_init>:
{
    3ec8:	b570      	push	{r4, r5, r6, lr}
    3eca:	4606      	mov	r6, r0
    3ecc:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    3ece:	4608      	mov	r0, r1
    3ed0:	4b47      	ldr	r3, [pc, #284]	; (3ff0 <_timer_init+0x128>)
    3ed2:	4798      	blx	r3
    3ed4:	4605      	mov	r5, r0
	device->hw = hw;
    3ed6:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    3ed8:	228e      	movs	r2, #142	; 0x8e
    3eda:	4946      	ldr	r1, [pc, #280]	; (3ff4 <_timer_init+0x12c>)
    3edc:	2001      	movs	r0, #1
    3ede:	4b46      	ldr	r3, [pc, #280]	; (3ff8 <_timer_init+0x130>)
    3ee0:	4798      	blx	r3
	};
}

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    3ee2:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    3ee4:	f013 0f01 	tst.w	r3, #1
    3ee8:	d111      	bne.n	3f0e <_timer_init+0x46>
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    3eea:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    3eec:	f013 0f02 	tst.w	r3, #2
    3ef0:	d00b      	beq.n	3f0a <_timer_init+0x42>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3ef2:	6923      	ldr	r3, [r4, #16]
    3ef4:	f013 0f03 	tst.w	r3, #3
    3ef8:	d1fb      	bne.n	3ef2 <_timer_init+0x2a>
	((Tc *)hw)->COUNT8.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    3efa:	6823      	ldr	r3, [r4, #0]
    3efc:	f023 0302 	bic.w	r3, r3, #2
    3f00:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3f02:	6923      	ldr	r3, [r4, #16]
    3f04:	f013 0f02 	tst.w	r3, #2
    3f08:	d1fb      	bne.n	3f02 <_timer_init+0x3a>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CTRLA.reg = data;
    3f0a:	2301      	movs	r3, #1
    3f0c:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3f0e:	6923      	ldr	r3, [r4, #16]
    3f10:	f013 0f01 	tst.w	r3, #1
    3f14:	d1fb      	bne.n	3f0e <_timer_init+0x46>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    3f16:	eb05 0285 	add.w	r2, r5, r5, lsl #2
    3f1a:	4b38      	ldr	r3, [pc, #224]	; (3ffc <_timer_init+0x134>)
    3f1c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    3f20:	6a53      	ldr	r3, [r2, #36]	; 0x24
	((Tc *)hw)->COUNT8.CTRLA.reg = data;
    3f22:	6023      	str	r3, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    3f24:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.DBGCTRL.reg = data;
    3f28:	73e1      	strb	r1, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    3f2a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
	((Tc *)hw)->COUNT8.EVCTRL.reg = data;
    3f2c:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT8.WAVE.reg = data;
    3f2e:	2201      	movs	r2, #1
    3f30:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    3f32:	f003 030c 	and.w	r3, r3, #12
    3f36:	2b08      	cmp	r3, #8
    3f38:	d040      	beq.n	3fbc <_timer_init+0xf4>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    3f3a:	2b00      	cmp	r3, #0
    3f3c:	d148      	bne.n	3fd0 <_timer_init+0x108>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    3f3e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    3f42:	4a2e      	ldr	r2, [pc, #184]	; (3ffc <_timer_init+0x134>)
    3f44:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3f48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    3f4a:	83a3      	strh	r3, [r4, #28]
    3f4c:	2300      	movs	r3, #0
    3f4e:	83e3      	strh	r3, [r4, #30]
	((Tc *)hw)->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    3f50:	2301      	movs	r3, #1
    3f52:	7263      	strb	r3, [r4, #9]
	if (hw == TC0) {
    3f54:	4b2a      	ldr	r3, [pc, #168]	; (4000 <_timer_init+0x138>)
    3f56:	429c      	cmp	r4, r3
		_tc0_dev = (struct _timer_device *)dev;
    3f58:	bf04      	itt	eq
    3f5a:	4b2a      	ldreq	r3, [pc, #168]	; (4004 <_timer_init+0x13c>)
    3f5c:	601e      	streq	r6, [r3, #0]
	NVIC_DisableIRQ(_tcs[i].irq);
    3f5e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    3f62:	4a26      	ldr	r2, [pc, #152]	; (3ffc <_timer_init+0x134>)
    3f64:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3f68:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    3f6c:	2b00      	cmp	r3, #0
    3f6e:	db23      	blt.n	3fb8 <_timer_init+0xf0>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3f70:	095a      	lsrs	r2, r3, #5
    3f72:	f003 031f 	and.w	r3, r3, #31
    3f76:	2101      	movs	r1, #1
    3f78:	fa01 f303 	lsl.w	r3, r1, r3
    3f7c:	3220      	adds	r2, #32
    3f7e:	4922      	ldr	r1, [pc, #136]	; (4008 <_timer_init+0x140>)
    3f80:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    3f84:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3f88:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    3f8c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    3f90:	4b1a      	ldr	r3, [pc, #104]	; (3ffc <_timer_init+0x134>)
    3f92:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    3f96:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    3f9a:	2b00      	cmp	r3, #0
    3f9c:	db0c      	blt.n	3fb8 <_timer_init+0xf0>
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3f9e:	0959      	lsrs	r1, r3, #5
    3fa0:	f003 031f 	and.w	r3, r3, #31
    3fa4:	2201      	movs	r2, #1
    3fa6:	fa02 f303 	lsl.w	r3, r2, r3
    3faa:	4a17      	ldr	r2, [pc, #92]	; (4008 <_timer_init+0x140>)
    3fac:	f101 0060 	add.w	r0, r1, #96	; 0x60
    3fb0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3fb4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    3fb8:	2000      	movs	r0, #0
    3fba:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    3fbc:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    3fc0:	4a0e      	ldr	r2, [pc, #56]	; (3ffc <_timer_init+0x134>)
    3fc2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    3fc8:	61e3      	str	r3, [r4, #28]
    3fca:	2300      	movs	r3, #0
    3fcc:	6223      	str	r3, [r4, #32]
    3fce:	e7bf      	b.n	3f50 <_timer_init+0x88>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    3fd0:	2b04      	cmp	r3, #4
    3fd2:	d1bd      	bne.n	3f50 <_timer_init+0x88>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    3fd4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    3fd8:	4a08      	ldr	r2, [pc, #32]	; (3ffc <_timer_init+0x134>)
    3fda:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3fde:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tc_cc8_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    3fe2:	7722      	strb	r2, [r4, #28]
    3fe4:	2200      	movs	r2, #0
    3fe6:	7762      	strb	r2, [r4, #29]
		hri_tc_write_PER_reg(hw, _tcs[i].per);
    3fe8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	((Tc *)hw)->COUNT8.PER.reg = data;
    3fec:	76e3      	strb	r3, [r4, #27]
    3fee:	e7af      	b.n	3f50 <_timer_init+0x88>
    3ff0:	00003e69 	.word	0x00003e69
    3ff4:	0000f1f4 	.word	0x0000f1f4
    3ff8:	0000272d 	.word	0x0000272d
    3ffc:	0000f1c0 	.word	0x0000f1c0
    4000:	40003800 	.word	0x40003800
    4004:	20007050 	.word	0x20007050
    4008:	e000e100 	.word	0xe000e100

0000400c <_timer_start>:
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    400c:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    400e:	6913      	ldr	r3, [r2, #16]
    4010:	f013 0f03 	tst.w	r3, #3
    4014:	d1fb      	bne.n	400e <_timer_start+0x2>
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    4016:	6813      	ldr	r3, [r2, #0]
    4018:	f043 0302 	orr.w	r3, r3, #2
    401c:	6013      	str	r3, [r2, #0]
    401e:	4770      	bx	lr

00004020 <_timer_is_started>:
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    4020:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4022:	6913      	ldr	r3, [r2, #16]
    4024:	f013 0f03 	tst.w	r3, #3
    4028:	d1fb      	bne.n	4022 <_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    402a:	6810      	ldr	r0, [r2, #0]
}
    402c:	f3c0 0040 	ubfx	r0, r0, #1, #1
    4030:	4770      	bx	lr

00004032 <_tc_get_timer>:
}
    4032:	2000      	movs	r0, #0
    4034:	4770      	bx	lr
	...

00004038 <_timer_set_irq>:
{
    4038:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    403a:	68c0      	ldr	r0, [r0, #12]
    403c:	4b09      	ldr	r3, [pc, #36]	; (4064 <_timer_set_irq+0x2c>)
    403e:	4798      	blx	r3
    4040:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    4042:	f240 1213 	movw	r2, #275	; 0x113
    4046:	4908      	ldr	r1, [pc, #32]	; (4068 <_timer_set_irq+0x30>)
    4048:	2001      	movs	r0, #1
    404a:	4b08      	ldr	r3, [pc, #32]	; (406c <_timer_set_irq+0x34>)
    404c:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    404e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    4052:	4b07      	ldr	r3, [pc, #28]	; (4070 <_timer_set_irq+0x38>)
    4054:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    4058:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
    405c:	4b05      	ldr	r3, [pc, #20]	; (4074 <_timer_set_irq+0x3c>)
    405e:	4798      	blx	r3
    4060:	bd10      	pop	{r4, pc}
    4062:	bf00      	nop
    4064:	00003e69 	.word	0x00003e69
    4068:	0000f1f4 	.word	0x0000f1f4
    406c:	0000272d 	.word	0x0000272d
    4070:	0000f1c0 	.word	0x0000f1c0
    4074:	00002a4d 	.word	0x00002a4d

00004078 <TC0_Handler>:
{
    4078:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
    407a:	4b06      	ldr	r3, [pc, #24]	; (4094 <TC0_Handler+0x1c>)
    407c:	6818      	ldr	r0, [r3, #0]
	void *const hw = device->hw;
    407e:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT8.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    4080:	7a9a      	ldrb	r2, [r3, #10]
	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    4082:	f012 0f01 	tst.w	r2, #1
    4086:	d100      	bne.n	408a <TC0_Handler+0x12>
    4088:	bd08      	pop	{r3, pc}
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    408a:	2201      	movs	r2, #1
    408c:	729a      	strb	r2, [r3, #10]
		device->timer_cb.period_expired(device);
    408e:	6803      	ldr	r3, [r0, #0]
    4090:	4798      	blx	r3
}
    4092:	e7f9      	b.n	4088 <TC0_Handler+0x10>
    4094:	20007050 	.word	0x20007050

00004098 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    4098:	2000      	movs	r0, #0
    409a:	4770      	bx	lr

0000409c <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    409c:	b538      	push	{r3, r4, r5, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    409e:	7c83      	ldrb	r3, [r0, #18]
    40a0:	f003 030f 	and.w	r3, r3, #15
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    40a4:	7cc2      	ldrb	r2, [r0, #19]

	if (!is_ctrl) {
    40a6:	f002 0107 	and.w	r1, r2, #7
    40aa:	2901      	cmp	r1, #1
    40ac:	d00b      	beq.n	40c6 <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    40ae:	015a      	lsls	r2, r3, #5
    40b0:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    40b4:	2110      	movs	r1, #16
    40b6:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    40ba:	015b      	lsls	r3, r3, #5
    40bc:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    40c0:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
    40c4:	bd38      	pop	{r3, r4, r5, pc}
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    40c6:	f012 0f40 	tst.w	r2, #64	; 0x40
    40ca:	d00c      	beq.n	40e6 <_usb_d_dev_handle_setup+0x4a>
		ept->flags.bits.is_busy = 0;
    40cc:	7cc2      	ldrb	r2, [r0, #19]
    40ce:	f36f 1286 	bfc	r2, #6, #1
    40d2:	74c2      	strb	r2, [r0, #19]
    40d4:	015a      	lsls	r2, r3, #5
    40d6:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    40da:	2180      	movs	r1, #128	; 0x80
    40dc:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    40e0:	2140      	movs	r1, #64	; 0x40
    40e2:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	ept->flags.bits.is_stalled = 0;
    40e6:	7cc2      	ldrb	r2, [r0, #19]
    40e8:	f36f 02c3 	bfc	r2, #3, #1
    40ec:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    40ee:	4909      	ldr	r1, [pc, #36]	; (4114 <_usb_d_dev_handle_setup+0x78>)
    40f0:	015a      	lsls	r2, r3, #5
    40f2:	188c      	adds	r4, r1, r2
    40f4:	2500      	movs	r5, #0
    40f6:	72a5      	strb	r5, [r4, #10]
    40f8:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    40fa:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    40fe:	246f      	movs	r4, #111	; 0x6f
    4100:	f883 4107 	strb.w	r4, [r3, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    4104:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    4108:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
	_usbd_ep_clear_bank_status(epn, 0);
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    410c:	6e8b      	ldr	r3, [r1, #104]	; 0x68
    410e:	7c80      	ldrb	r0, [r0, #18]
    4110:	4798      	blx	r3
    4112:	bd38      	pop	{r3, r4, r5, pc}
    4114:	20007054 	.word	0x20007054

00004118 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    4118:	b508      	push	{r3, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    411a:	2320      	movs	r3, #32
    411c:	fa03 f101 	lsl.w	r1, r3, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    4120:	b2c9      	uxtb	r1, r1
	uint8_t epn = USB_EP_GET_N(ept->ep);
    4122:	7c83      	ldrb	r3, [r0, #18]
    4124:	f003 030f 	and.w	r3, r3, #15
    4128:	015b      	lsls	r3, r3, #5
    412a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    412e:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    4132:	4b03      	ldr	r3, [pc, #12]	; (4140 <_usb_d_dev_handle_stall+0x28>)
    4134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    4136:	6882      	ldr	r2, [r0, #8]
    4138:	2101      	movs	r1, #1
    413a:	7c80      	ldrb	r0, [r0, #18]
    413c:	4798      	blx	r3
    413e:	bd08      	pop	{r3, pc}
    4140:	20007054 	.word	0x20007054

00004144 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    4144:	b538      	push	{r3, r4, r5, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    4146:	7c84      	ldrb	r4, [r0, #18]
    4148:	2cff      	cmp	r4, #255	; 0xff
    414a:	d003      	beq.n	4154 <_usb_d_dev_trans_done+0x10>
    414c:	7cc3      	ldrb	r3, [r0, #19]
    414e:	f013 0f40 	tst.w	r3, #64	; 0x40
    4152:	d100      	bne.n	4156 <_usb_d_dev_trans_done+0x12>
    4154:	bd38      	pop	{r3, r4, r5, pc}
		return;
	}
	ept->flags.bits.is_busy = 0;
    4156:	7cc2      	ldrb	r2, [r0, #19]
    4158:	f36f 1286 	bfc	r2, #6, #1
    415c:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    415e:	4a03      	ldr	r2, [pc, #12]	; (416c <_usb_d_dev_trans_done+0x28>)
    4160:	6f15      	ldr	r5, [r2, #112]	; 0x70
    4162:	6882      	ldr	r2, [r0, #8]
    4164:	4620      	mov	r0, r4
    4166:	47a8      	blx	r5
    4168:	e7f4      	b.n	4154 <_usb_d_dev_trans_done+0x10>
    416a:	bf00      	nop
    416c:	20007054 	.word	0x20007054

00004170 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    4170:	b530      	push	{r4, r5, lr}
    4172:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    4174:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    4176:	2425      	movs	r4, #37	; 0x25
    4178:	f88d 4004 	strb.w	r4, [sp, #4]
    417c:	244a      	movs	r4, #74	; 0x4a
    417e:	f88d 4005 	strb.w	r4, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    4182:	2bff      	cmp	r3, #255	; 0xff
    4184:	d01e      	beq.n	41c4 <_usb_d_dev_trans_stop+0x54>
    4186:	7cc4      	ldrb	r4, [r0, #19]
    4188:	f014 0f40 	tst.w	r4, #64	; 0x40
    418c:	d01a      	beq.n	41c4 <_usb_d_dev_trans_stop+0x54>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    418e:	f003 040f 	and.w	r4, r3, #15
		return;
	}
	/* Stop transfer */
	if (dir) {
    4192:	b1c9      	cbz	r1, 41c8 <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    4194:	0163      	lsls	r3, r4, #5
    4196:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    419a:	2580      	movs	r5, #128	; 0x80
    419c:	f883 5104 	strb.w	r5, [r3, #260]	; 0x104
    41a0:	460b      	mov	r3, r1
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    41a2:	a902      	add	r1, sp, #8
    41a4:	440b      	add	r3, r1
    41a6:	f813 1c04 	ldrb.w	r1, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    41aa:	0163      	lsls	r3, r4, #5
    41ac:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    41b0:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    41b4:	0163      	lsls	r3, r4, #5
    41b6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    41ba:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    41be:	4611      	mov	r1, r2
    41c0:	4b05      	ldr	r3, [pc, #20]	; (41d8 <_usb_d_dev_trans_stop+0x68>)
    41c2:	4798      	blx	r3
}
    41c4:	b003      	add	sp, #12
    41c6:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    41c8:	0163      	lsls	r3, r4, #5
    41ca:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    41ce:	2540      	movs	r5, #64	; 0x40
    41d0:	f883 5105 	strb.w	r5, [r3, #261]	; 0x105
    41d4:	e7e4      	b.n	41a0 <_usb_d_dev_trans_stop+0x30>
    41d6:	bf00      	nop
    41d8:	00004145 	.word	0x00004145

000041dc <_usb_d_dev_handle_trfail>:
{
    41dc:	b530      	push	{r4, r5, lr}
    41de:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    41e0:	7c83      	ldrb	r3, [r0, #18]
    41e2:	f003 030f 	and.w	r3, r3, #15
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    41e6:	2204      	movs	r2, #4
    41e8:	f88d 2004 	strb.w	r2, [sp, #4]
    41ec:	2208      	movs	r2, #8
    41ee:	f88d 2005 	strb.w	r2, [sp, #5]
    41f2:	015a      	lsls	r2, r3, #5
	uint8_t            eptype
    41f4:	460c      	mov	r4, r1
    41f6:	b391      	cbz	r1, 425e <_usb_d_dev_handle_trfail+0x82>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    41f8:	f102 4182 	add.w	r1, r2, #1090519040	; 0x41000000
    41fc:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    4200:	f3c5 1502 	ubfx	r5, r5, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
    4204:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    4208:	4a32      	ldr	r2, [pc, #200]	; (42d4 <_usb_d_dev_handle_trfail+0xf8>)
    420a:	440a      	add	r2, r1
    420c:	7a91      	ldrb	r1, [r2, #10]
    420e:	b2c9      	uxtb	r1, r1
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    4210:	2d02      	cmp	r5, #2
    4212:	d02c      	beq.n	426e <_usb_d_dev_handle_trfail+0x92>
	} else if (st.bit.ERRORFLOW) {
    4214:	f011 0f02 	tst.w	r1, #2
    4218:	d045      	beq.n	42a6 <_usb_d_dev_handle_trfail+0xca>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    421a:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    421c:	7a91      	ldrb	r1, [r2, #10]
    421e:	f36f 0141 	bfc	r1, #1, #1
    4222:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    4224:	aa02      	add	r2, sp, #8
    4226:	4422      	add	r2, r4
    4228:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    422c:	015a      	lsls	r2, r3, #5
    422e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    4232:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    4236:	015b      	lsls	r3, r3, #5
    4238:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    423c:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    4240:	f005 0307 	and.w	r3, r5, #7
    4244:	2b01      	cmp	r3, #1
    4246:	d143      	bne.n	42d0 <_usb_d_dev_handle_trfail+0xf4>
    4248:	7cc3      	ldrb	r3, [r0, #19]
    424a:	f013 0f40 	tst.w	r3, #64	; 0x40
    424e:	d03f      	beq.n	42d0 <_usb_d_dev_handle_trfail+0xf4>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    4250:	09d9      	lsrs	r1, r3, #7
    4252:	428c      	cmp	r4, r1
    4254:	d03c      	beq.n	42d0 <_usb_d_dev_handle_trfail+0xf4>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    4256:	2200      	movs	r2, #0
    4258:	4b1f      	ldr	r3, [pc, #124]	; (42d8 <_usb_d_dev_handle_trfail+0xfc>)
    425a:	4798      	blx	r3
    425c:	e038      	b.n	42d0 <_usb_d_dev_handle_trfail+0xf4>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    425e:	0159      	lsls	r1, r3, #5
    4260:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    4264:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    4268:	f005 0507 	and.w	r5, r5, #7
    426c:	e7ca      	b.n	4204 <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    426e:	f011 0f01 	tst.w	r1, #1
    4272:	d0cf      	beq.n	4214 <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    4274:	7a91      	ldrb	r1, [r2, #10]
    4276:	f36f 0100 	bfc	r1, #0, #1
    427a:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    427c:	aa02      	add	r2, sp, #8
    427e:	4422      	add	r2, r4
    4280:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    4284:	015a      	lsls	r2, r3, #5
    4286:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    428a:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    428e:	015b      	lsls	r3, r3, #5
    4290:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4294:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    4298:	2204      	movs	r2, #4
    429a:	1c21      	adds	r1, r4, #0
    429c:	bf18      	it	ne
    429e:	2101      	movne	r1, #1
    42a0:	4b0d      	ldr	r3, [pc, #52]	; (42d8 <_usb_d_dev_handle_trfail+0xfc>)
    42a2:	4798      	blx	r3
    42a4:	e014      	b.n	42d0 <_usb_d_dev_handle_trfail+0xf4>
	bank->STATUS_BK.reg     = 0;
    42a6:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    42aa:	4a0a      	ldr	r2, [pc, #40]	; (42d4 <_usb_d_dev_handle_trfail+0xf8>)
    42ac:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    42b0:	2100      	movs	r1, #0
    42b2:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    42b4:	aa02      	add	r2, sp, #8
    42b6:	4414      	add	r4, r2
    42b8:	f814 1c04 	ldrb.w	r1, [r4, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    42bc:	015a      	lsls	r2, r3, #5
    42be:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    42c2:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    42c6:	015b      	lsls	r3, r3, #5
    42c8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    42cc:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
}
    42d0:	b003      	add	sp, #12
    42d2:	bd30      	pop	{r4, r5, pc}
    42d4:	20007054 	.word	0x20007054
    42d8:	00004171 	.word	0x00004171

000042dc <_usb_d_dev_reset_epts>:
{
    42dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    42e0:	4d0c      	ldr	r5, [pc, #48]	; (4314 <_usb_d_dev_reset_epts+0x38>)
    42e2:	f105 0474 	add.w	r4, r5, #116	; 0x74
    42e6:	f505 7594 	add.w	r5, r5, #296	; 0x128
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    42ea:	f04f 0803 	mov.w	r8, #3
    42ee:	4f0a      	ldr	r7, [pc, #40]	; (4318 <_usb_d_dev_reset_epts+0x3c>)
		dev_inst.ep[i].ep       = 0xFF;
    42f0:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    42f2:	4641      	mov	r1, r8
    42f4:	4620      	mov	r0, r4
    42f6:	47b8      	blx	r7
		dev_inst.ep[i].ep       = 0xFF;
    42f8:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    42fa:	2300      	movs	r3, #0
    42fc:	74e3      	strb	r3, [r4, #19]
    42fe:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    4300:	42ac      	cmp	r4, r5
    4302:	d1f6      	bne.n	42f2 <_usb_d_dev_reset_epts+0x16>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    4304:	2260      	movs	r2, #96	; 0x60
    4306:	4619      	mov	r1, r3
    4308:	4802      	ldr	r0, [pc, #8]	; (4314 <_usb_d_dev_reset_epts+0x38>)
    430a:	4b04      	ldr	r3, [pc, #16]	; (431c <_usb_d_dev_reset_epts+0x40>)
    430c:	4798      	blx	r3
    430e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4312:	bf00      	nop
    4314:	20007054 	.word	0x20007054
    4318:	00004145 	.word	0x00004145
    431c:	0000dce9 	.word	0x0000dce9

00004320 <_usb_d_dev_in_next>:
{
    4320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4324:	4605      	mov	r5, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    4326:	7c84      	ldrb	r4, [r0, #18]
    4328:	f004 040f 	and.w	r4, r4, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    432c:	4688      	mov	r8, r1
    432e:	2900      	cmp	r1, #0
    4330:	f000 809f 	beq.w	4472 <_usb_d_dev_in_next+0x152>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    4334:	4b58      	ldr	r3, [pc, #352]	; (4498 <_usb_d_dev_in_next+0x178>)
    4336:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    433a:	6958      	ldr	r0, [r3, #20]
    433c:	f3c0 0e0d 	ubfx	lr, r0, #0, #14
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    4340:	8a2b      	ldrh	r3, [r5, #16]
    4342:	f240 32ff 	movw	r2, #1023	; 0x3ff
    4346:	4293      	cmp	r3, r2
    4348:	f000 808d 	beq.w	4466 <_usb_d_dev_in_next+0x146>
    434c:	3b01      	subs	r3, #1
    434e:	b298      	uxth	r0, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    4350:	7cef      	ldrb	r7, [r5, #19]
    4352:	f007 0707 	and.w	r7, r7, #7
	if (isr) {
    4356:	f1b8 0f00 	cmp.w	r8, #0
    435a:	d005      	beq.n	4368 <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    435c:	0162      	lsls	r2, r4, #5
    435e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    4362:	2302      	movs	r3, #2
    4364:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
	ept->trans_count += trans_count;
    4368:	68a9      	ldr	r1, [r5, #8]
    436a:	eb0e 0301 	add.w	r3, lr, r1
    436e:	60ab      	str	r3, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    4370:	686e      	ldr	r6, [r5, #4]
    4372:	42b3      	cmp	r3, r6
    4374:	d23f      	bcs.n	43f6 <_usb_d_dev_in_next+0xd6>
		trans_next = ept->trans_size - ept->trans_count;
    4376:	1af6      	subs	r6, r6, r3
    4378:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
    437a:	7cea      	ldrb	r2, [r5, #19]
    437c:	f012 0f20 	tst.w	r2, #32
    4380:	d02d      	beq.n	43de <_usb_d_dev_in_next+0xbe>
    4382:	8a2a      	ldrh	r2, [r5, #16]
    4384:	4296      	cmp	r6, r2
    4386:	bf28      	it	cs
    4388:	4616      	movcs	r6, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    438a:	6829      	ldr	r1, [r5, #0]
    438c:	4632      	mov	r2, r6
    438e:	4419      	add	r1, r3
    4390:	68e8      	ldr	r0, [r5, #12]
    4392:	4b42      	ldr	r3, [pc, #264]	; (449c <_usb_d_dev_in_next+0x17c>)
    4394:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    4396:	68ea      	ldr	r2, [r5, #12]
	bank->ADDR.reg          = addr;
    4398:	4b3f      	ldr	r3, [pc, #252]	; (4498 <_usb_d_dev_in_next+0x178>)
    439a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    439e:	611a      	str	r2, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    43a0:	4b3d      	ldr	r3, [pc, #244]	; (4498 <_usb_d_dev_in_next+0x178>)
    43a2:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    43a6:	695a      	ldr	r2, [r3, #20]
    43a8:	f366 020d 	bfi	r2, r6, #0, #14
    43ac:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    43ae:	695a      	ldr	r2, [r3, #20]
    43b0:	f36f 329b 	bfc	r2, #14, #14
    43b4:	615a      	str	r2, [r3, #20]
	if (!isr) {
    43b6:	f1b8 0f00 	cmp.w	r8, #0
    43ba:	d108      	bne.n	43ce <_usb_d_dev_in_next+0xae>
			inten = USB_D_BANK1_INT_FLAGS;
    43bc:	2f01      	cmp	r7, #1
    43be:	bf0c      	ite	eq
    43c0:	224e      	moveq	r2, #78	; 0x4e
    43c2:	224a      	movne	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    43c4:	0163      	lsls	r3, r4, #5
    43c6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    43ca:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    43ce:	0164      	lsls	r4, r4, #5
    43d0:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    43d4:	2380      	movs	r3, #128	; 0x80
    43d6:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
    43da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    43de:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    43e2:	bf28      	it	cs
    43e4:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    43e8:	6829      	ldr	r1, [r5, #0]
    43ea:	440b      	add	r3, r1
	bank->ADDR.reg          = addr;
    43ec:	4a2a      	ldr	r2, [pc, #168]	; (4498 <_usb_d_dev_in_next+0x178>)
    43ee:	eb02 1244 	add.w	r2, r2, r4, lsl #5
    43f2:	6113      	str	r3, [r2, #16]
    43f4:	e7d4      	b.n	43a0 <_usb_d_dev_in_next+0x80>
	} else if (ept->flags.bits.need_zlp) {
    43f6:	7ceb      	ldrb	r3, [r5, #19]
    43f8:	f013 0f10 	tst.w	r3, #16
    43fc:	d00f      	beq.n	441e <_usb_d_dev_in_next+0xfe>
		ept->flags.bits.need_zlp = 0;
    43fe:	7ceb      	ldrb	r3, [r5, #19]
    4400:	f36f 1304 	bfc	r3, #4, #1
    4404:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    4406:	4b24      	ldr	r3, [pc, #144]	; (4498 <_usb_d_dev_in_next+0x178>)
    4408:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    440c:	695a      	ldr	r2, [r3, #20]
    440e:	f36f 020d 	bfc	r2, #0, #14
    4412:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    4414:	695a      	ldr	r2, [r3, #20]
    4416:	f36f 329b 	bfc	r2, #14, #14
    441a:	615a      	str	r2, [r3, #20]
    441c:	e7cb      	b.n	43b6 <_usb_d_dev_in_next+0x96>
	if (is_ctrl) {
    441e:	2f01      	cmp	r7, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    4420:	ea4f 1444 	mov.w	r4, r4, lsl #5
    4424:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    4428:	bf0c      	ite	eq
    442a:	234b      	moveq	r3, #75	; 0x4b
    442c:	234a      	movne	r3, #74	; 0x4a
    442e:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
	if (last_pkt == ept->size) {
    4432:	8a2a      	ldrh	r2, [r5, #16]
    4434:	ea00 030e 	and.w	r3, r0, lr
    4438:	429a      	cmp	r2, r3
    443a:	d005      	beq.n	4448 <_usb_d_dev_in_next+0x128>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    443c:	2100      	movs	r1, #0
    443e:	4628      	mov	r0, r5
    4440:	4b17      	ldr	r3, [pc, #92]	; (44a0 <_usb_d_dev_in_next+0x180>)
    4442:	4798      	blx	r3
	return;
    4444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
    4448:	7ceb      	ldrb	r3, [r5, #19]
    444a:	f36f 1386 	bfc	r3, #6, #1
    444e:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    4450:	4b11      	ldr	r3, [pc, #68]	; (4498 <_usb_d_dev_in_next+0x178>)
    4452:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    4454:	68a9      	ldr	r1, [r5, #8]
    4456:	7ca8      	ldrb	r0, [r5, #18]
    4458:	4798      	blx	r3
    445a:	b9d0      	cbnz	r0, 4492 <_usb_d_dev_in_next+0x172>
		ept->flags.bits.is_busy = 1;
    445c:	7ceb      	ldrb	r3, [r5, #19]
    445e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4462:	74eb      	strb	r3, [r5, #19]
    4464:	e7ea      	b.n	443c <_usb_d_dev_in_next+0x11c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    4466:	7cef      	ldrb	r7, [r5, #19]
    4468:	f007 0707 	and.w	r7, r7, #7
    446c:	f240 30ff 	movw	r0, #1023	; 0x3ff
    4470:	e774      	b.n	435c <_usb_d_dev_in_next+0x3c>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    4472:	8a03      	ldrh	r3, [r0, #16]
    4474:	f240 32ff 	movw	r2, #1023	; 0x3ff
    4478:	4293      	cmp	r3, r2
    447a:	d107      	bne.n	448c <_usb_d_dev_in_next+0x16c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    447c:	7cef      	ldrb	r7, [r5, #19]
    447e:	f007 0707 	and.w	r7, r7, #7
    4482:	f04f 0e00 	mov.w	lr, #0
    4486:	f240 30ff 	movw	r0, #1023	; 0x3ff
    448a:	e76d      	b.n	4368 <_usb_d_dev_in_next+0x48>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    448c:	f04f 0e00 	mov.w	lr, #0
    4490:	e75c      	b.n	434c <_usb_d_dev_in_next+0x2c>
    4492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4496:	bf00      	nop
    4498:	20007054 	.word	0x20007054
    449c:	0000dc9f 	.word	0x0000dc9f
    44a0:	00004145 	.word	0x00004145

000044a4 <_usb_d_dev_out_next>:
{
    44a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    44a8:	4604      	mov	r4, r0
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    44aa:	7c85      	ldrb	r5, [r0, #18]
    44ac:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    44b0:	4689      	mov	r9, r1
    44b2:	2900      	cmp	r1, #0
    44b4:	d056      	beq.n	4564 <_usb_d_dev_out_next+0xc0>
    44b6:	4b74      	ldr	r3, [pc, #464]	; (4688 <_usb_d_dev_out_next+0x1e4>)
    44b8:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    44bc:	685a      	ldr	r2, [r3, #4]
    44be:	f3c2 3a8d 	ubfx	sl, r2, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    44c2:	685f      	ldr	r7, [r3, #4]
    44c4:	f3c7 070d 	ubfx	r7, r7, #0, #14
    44c8:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    44ca:	8a06      	ldrh	r6, [r0, #16]
    44cc:	f240 33ff 	movw	r3, #1023	; 0x3ff
    44d0:	429e      	cmp	r6, r3
    44d2:	f000 80ba 	beq.w	464a <_usb_d_dev_out_next+0x1a6>
    44d6:	3e01      	subs	r6, #1
    44d8:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    44da:	ea06 070b 	and.w	r7, r6, fp
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    44de:	f894 8013 	ldrb.w	r8, [r4, #19]
    44e2:	f008 0807 	and.w	r8, r8, #7
	if (isr) {
    44e6:	f1b9 0f00 	cmp.w	r9, #0
    44ea:	d005      	beq.n	44f8 <_usb_d_dev_out_next+0x54>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    44ec:	016b      	lsls	r3, r5, #5
    44ee:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    44f2:	2201      	movs	r2, #1
    44f4:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
    44f8:	7ce3      	ldrb	r3, [r4, #19]
    44fa:	f013 0f20 	tst.w	r3, #32
    44fe:	d00d      	beq.n	451c <_usb_d_dev_out_next+0x78>
    4500:	6862      	ldr	r2, [r4, #4]
    4502:	2a00      	cmp	r2, #0
    4504:	d037      	beq.n	4576 <_usb_d_dev_out_next+0xd2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    4506:	68a0      	ldr	r0, [r4, #8]
    4508:	1a12      	subs	r2, r2, r0
    450a:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    450c:	6823      	ldr	r3, [r4, #0]
    450e:	42ba      	cmp	r2, r7
    4510:	bf28      	it	cs
    4512:	463a      	movcs	r2, r7
    4514:	68e1      	ldr	r1, [r4, #12]
    4516:	4418      	add	r0, r3
    4518:	4b5c      	ldr	r3, [pc, #368]	; (468c <_usb_d_dev_out_next+0x1e8>)
    451a:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    451c:	6863      	ldr	r3, [r4, #4]
    451e:	b353      	cbz	r3, 4576 <_usb_d_dev_out_next+0xd2>
	} else if (isr && last_pkt < ept->size) {
    4520:	f1b9 0f00 	cmp.w	r9, #0
    4524:	d040      	beq.n	45a8 <_usb_d_dev_out_next+0x104>
    4526:	8a22      	ldrh	r2, [r4, #16]
    4528:	42ba      	cmp	r2, r7
    452a:	d93d      	bls.n	45a8 <_usb_d_dev_out_next+0x104>
		ept->flags.bits.need_zlp = 0;
    452c:	7ce3      	ldrb	r3, [r4, #19]
    452e:	f36f 1304 	bfc	r3, #4, #1
    4532:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    4534:	68a3      	ldr	r3, [r4, #8]
    4536:	445b      	add	r3, fp
    4538:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    453a:	f1b8 0f01 	cmp.w	r8, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    453e:	ea4f 1345 	mov.w	r3, r5, lsl #5
    4542:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4546:	bf0c      	ite	eq
    4548:	222d      	moveq	r2, #45	; 0x2d
    454a:	2225      	movne	r2, #37	; 0x25
    454c:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (0 == epn) {
    4550:	b915      	cbnz	r5, 4558 <_usb_d_dev_out_next+0xb4>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    4552:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    4554:	4b4c      	ldr	r3, [pc, #304]	; (4688 <_usb_d_dev_out_next+0x1e4>)
    4556:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    4558:	2100      	movs	r1, #0
    455a:	4620      	mov	r0, r4
    455c:	4b4c      	ldr	r3, [pc, #304]	; (4690 <_usb_d_dev_out_next+0x1ec>)
    455e:	4798      	blx	r3
	return;
    4560:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    4564:	8a06      	ldrh	r6, [r0, #16]
    4566:	f240 33ff 	movw	r3, #1023	; 0x3ff
    456a:	429e      	cmp	r6, r3
    456c:	d07b      	beq.n	4666 <_usb_d_dev_out_next+0x1c2>
    456e:	f04f 0b00 	mov.w	fp, #0
    4572:	46da      	mov	sl, fp
    4574:	e7af      	b.n	44d6 <_usb_d_dev_out_next+0x32>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    4576:	7ce3      	ldrb	r3, [r4, #19]
    4578:	f013 0f10 	tst.w	r3, #16
    457c:	d06c      	beq.n	4658 <_usb_d_dev_out_next+0x1b4>
		ept->flags.bits.need_zlp  = 0;
    457e:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    4580:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    4584:	f043 0320 	orr.w	r3, r3, #32
    4588:	74e3      	strb	r3, [r4, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    458a:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    458c:	493e      	ldr	r1, [pc, #248]	; (4688 <_usb_d_dev_out_next+0x1e4>)
    458e:	016a      	lsls	r2, r5, #5
    4590:	188b      	adds	r3, r1, r2
    4592:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    4594:	8a21      	ldrh	r1, [r4, #16]
    4596:	685a      	ldr	r2, [r3, #4]
    4598:	f361 329b 	bfi	r2, r1, #14, #14
    459c:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    459e:	685a      	ldr	r2, [r3, #4]
    45a0:	f36f 020d 	bfc	r2, #0, #14
    45a4:	605a      	str	r2, [r3, #4]
    45a6:	e01d      	b.n	45e4 <_usb_d_dev_out_next+0x140>
		ept->trans_count += trans_size;
    45a8:	68a2      	ldr	r2, [r4, #8]
    45aa:	4452      	add	r2, sl
    45ac:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    45ae:	4293      	cmp	r3, r2
    45b0:	d9c3      	bls.n	453a <_usb_d_dev_out_next+0x96>
			trans_next = ept->trans_size - ept->trans_count;
    45b2:	1a9b      	subs	r3, r3, r2
    45b4:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    45b6:	7ce1      	ldrb	r1, [r4, #19]
    45b8:	f011 0f20 	tst.w	r1, #32
    45bc:	d026      	beq.n	460c <_usb_d_dev_out_next+0x168>
    45be:	8a22      	ldrh	r2, [r4, #16]
    45c0:	4293      	cmp	r3, r2
    45c2:	bf28      	it	cs
    45c4:	4613      	movcs	r3, r2
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    45c6:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    45c8:	016a      	lsls	r2, r5, #5
    45ca:	492f      	ldr	r1, [pc, #188]	; (4688 <_usb_d_dev_out_next+0x1e4>)
    45cc:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    45ce:	4a2e      	ldr	r2, [pc, #184]	; (4688 <_usb_d_dev_out_next+0x1e4>)
    45d0:	eb02 1245 	add.w	r2, r2, r5, lsl #5
    45d4:	6851      	ldr	r1, [r2, #4]
    45d6:	f363 319b 	bfi	r1, r3, #14, #14
    45da:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    45dc:	6853      	ldr	r3, [r2, #4]
    45de:	f36f 030d 	bfc	r3, #0, #14
    45e2:	6053      	str	r3, [r2, #4]
	if (!isr) {
    45e4:	f1b9 0f00 	cmp.w	r9, #0
    45e8:	d108      	bne.n	45fc <_usb_d_dev_out_next+0x158>
		if (is_ctrl) {
    45ea:	f1b8 0f01 	cmp.w	r8, #1
    45ee:	d025      	beq.n	463c <_usb_d_dev_out_next+0x198>
			inten = USB_D_BANK0_INT_FLAGS;
    45f0:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    45f2:	016b      	lsls	r3, r5, #5
    45f4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    45f8:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    45fc:	016d      	lsls	r5, r5, #5
    45fe:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    4602:	2340      	movs	r3, #64	; 0x40
    4604:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
    4608:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (trans_next > ept->size) {
    460c:	8a21      	ldrh	r1, [r4, #16]
    460e:	428b      	cmp	r3, r1
    4610:	d90a      	bls.n	4628 <_usb_d_dev_out_next+0x184>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    4612:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    4616:	d80e      	bhi.n	4636 <_usb_d_dev_out_next+0x192>
    4618:	ea23 0306 	bic.w	r3, r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    461c:	6821      	ldr	r1, [r4, #0]
    461e:	440a      	add	r2, r1
	bank->ADDR.reg          = addr;
    4620:	0169      	lsls	r1, r5, #5
    4622:	4819      	ldr	r0, [pc, #100]	; (4688 <_usb_d_dev_out_next+0x1e4>)
    4624:	5042      	str	r2, [r0, r1]
    4626:	e7d2      	b.n	45ce <_usb_d_dev_out_next+0x12a>
				} else if (trans_next < ept->size) {
    4628:	428b      	cmp	r3, r1
    462a:	d2f7      	bcs.n	461c <_usb_d_dev_out_next+0x178>
					ept->flags.bits.use_cache = 1;
    462c:	7ce1      	ldrb	r1, [r4, #19]
    462e:	f041 0120 	orr.w	r1, r1, #32
    4632:	74e1      	strb	r1, [r4, #19]
    4634:	e7f2      	b.n	461c <_usb_d_dev_out_next+0x178>
						trans_next = USB_D_DEV_TRANS_MAX;
    4636:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    463a:	e7ef      	b.n	461c <_usb_d_dev_out_next+0x178>
	bank->STATUS_BK.reg     = 0;
    463c:	4b12      	ldr	r3, [pc, #72]	; (4688 <_usb_d_dev_out_next+0x1e4>)
    463e:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    4642:	2200      	movs	r2, #0
    4644:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    4646:	222d      	movs	r2, #45	; 0x2d
    4648:	e7d3      	b.n	45f2 <_usb_d_dev_out_next+0x14e>
	uint16_t           last_pkt   = last_trans & size_mask;
    464a:	f3c7 0709 	ubfx	r7, r7, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    464e:	f890 8013 	ldrb.w	r8, [r0, #19]
    4652:	f008 0807 	and.w	r8, r8, #7
    4656:	e749      	b.n	44ec <_usb_d_dev_out_next+0x48>
	} else if (isr && last_pkt < ept->size) {
    4658:	f1b9 0f00 	cmp.w	r9, #0
    465c:	d10b      	bne.n	4676 <_usb_d_dev_out_next+0x1d2>
		ept->trans_count += trans_size;
    465e:	68a3      	ldr	r3, [r4, #8]
    4660:	4453      	add	r3, sl
    4662:	60a3      	str	r3, [r4, #8]
    4664:	e769      	b.n	453a <_usb_d_dev_out_next+0x96>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    4666:	f890 8013 	ldrb.w	r8, [r0, #19]
    466a:	f008 0807 	and.w	r8, r8, #7
	uint16_t           last_pkt   = last_trans & size_mask;
    466e:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    4670:	46bb      	mov	fp, r7
    4672:	46ba      	mov	sl, r7
    4674:	e740      	b.n	44f8 <_usb_d_dev_out_next+0x54>
	} else if (isr && last_pkt < ept->size) {
    4676:	8a23      	ldrh	r3, [r4, #16]
    4678:	42bb      	cmp	r3, r7
    467a:	f63f af57 	bhi.w	452c <_usb_d_dev_out_next+0x88>
		ept->trans_count += trans_size;
    467e:	68a3      	ldr	r3, [r4, #8]
    4680:	4453      	add	r3, sl
    4682:	60a3      	str	r3, [r4, #8]
    4684:	e759      	b.n	453a <_usb_d_dev_out_next+0x96>
    4686:	bf00      	nop
    4688:	20007054 	.word	0x20007054
    468c:	0000dc9f 	.word	0x0000dc9f
    4690:	00004145 	.word	0x00004145

00004694 <_usb_d_dev_handler>:
{
    4694:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    4698:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    469c:	8c1e      	ldrh	r6, [r3, #32]
    469e:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    46a0:	b146      	cbz	r6, 46b4 <_usb_d_dev_handler+0x20>
    46a2:	4d91      	ldr	r5, [pc, #580]	; (48e8 <_usb_d_dev_handler+0x254>)
	uint32_t lpm_variable = 0;
    46a4:	2400      	movs	r4, #0
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    46a6:	f1a5 0774 	sub.w	r7, r5, #116	; 0x74
			_usb_d_dev_handle_setup(ept);
    46aa:	f8df 9258 	ldr.w	r9, [pc, #600]	; 4904 <_usb_d_dev_handler+0x270>
			_usb_d_dev_handle_trfail(ept, 1);
    46ae:	f8df 8258 	ldr.w	r8, [pc, #600]	; 4908 <_usb_d_dev_handler+0x274>
    46b2:	e0d3      	b.n	485c <_usb_d_dev_handler+0x1c8>
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    46b4:	8b99      	ldrh	r1, [r3, #28]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    46b6:	8b1b      	ldrh	r3, [r3, #24]
    46b8:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    46ba:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    46bc:	f013 0f04 	tst.w	r3, #4
    46c0:	d11d      	bne.n	46fe <_usb_d_dev_handler+0x6a>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    46c2:	f413 7f00 	tst.w	r3, #512	; 0x200
    46c6:	d123      	bne.n	4710 <_usb_d_dev_handler+0x7c>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    46c8:	f013 0f80 	tst.w	r3, #128	; 0x80
    46cc:	d147      	bne.n	475e <_usb_d_dev_handler+0xca>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    46ce:	f013 0f70 	tst.w	r3, #112	; 0x70
    46d2:	d14f      	bne.n	4774 <_usb_d_dev_handler+0xe0>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    46d4:	f013 0f08 	tst.w	r3, #8
    46d8:	d16e      	bne.n	47b8 <_usb_d_dev_handler+0x124>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    46da:	f013 0f01 	tst.w	r3, #1
    46de:	d0e0      	beq.n	46a2 <_usb_d_dev_handler+0xe>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    46e0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    46e4:	f240 2201 	movw	r2, #513	; 0x201
    46e8:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    46ea:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    46ec:	2270      	movs	r2, #112	; 0x70
    46ee:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    46f0:	4b7e      	ldr	r3, [pc, #504]	; (48ec <_usb_d_dev_handler+0x258>)
    46f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    46f4:	2100      	movs	r1, #0
    46f6:	2004      	movs	r0, #4
    46f8:	4798      	blx	r3
    46fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    46fe:	2204      	movs	r2, #4
    4700:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4704:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    4706:	4b79      	ldr	r3, [pc, #484]	; (48ec <_usb_d_dev_handler+0x258>)
    4708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    470a:	4798      	blx	r3
    470c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4710:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4714:	f240 2201 	movw	r2, #513	; 0x201
    4718:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    471a:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    471c:	2270      	movs	r2, #112	; 0x70
    471e:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    4720:	4b72      	ldr	r3, [pc, #456]	; (48ec <_usb_d_dev_handler+0x258>)
    4722:	891b      	ldrh	r3, [r3, #8]
    4724:	f003 030f 	and.w	r3, r3, #15
    4728:	2b03      	cmp	r3, #3
    472a:	d00e      	beq.n	474a <_usb_d_dev_handler+0xb6>
    472c:	4b6f      	ldr	r3, [pc, #444]	; (48ec <_usb_d_dev_handler+0x258>)
    472e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4730:	f003 030f 	and.w	r3, r3, #15
    4734:	2b03      	cmp	r3, #3
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    4736:	bf08      	it	eq
    4738:	2201      	moveq	r2, #1
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    473a:	d007      	beq.n	474c <_usb_d_dev_handler+0xb8>
	uint32_t lpm_variable = 0;
    473c:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    473e:	4b6b      	ldr	r3, [pc, #428]	; (48ec <_usb_d_dev_handler+0x258>)
    4740:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    4742:	2003      	movs	r0, #3
    4744:	4798      	blx	r3
    4746:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    474a:	2200      	movs	r2, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    474c:	4b67      	ldr	r3, [pc, #412]	; (48ec <_usb_d_dev_handler+0x258>)
    474e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    4752:	8919      	ldrh	r1, [r3, #8]
    4754:	f3c1 110a 	ubfx	r1, r1, #4, #11
			bank->EXTREG.reg = 0;
    4758:	2200      	movs	r2, #0
    475a:	811a      	strh	r2, [r3, #8]
    475c:	e7ef      	b.n	473e <_usb_d_dev_handler+0xaa>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    475e:	2280      	movs	r2, #128	; 0x80
    4760:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4764:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    4766:	4b61      	ldr	r3, [pc, #388]	; (48ec <_usb_d_dev_handler+0x258>)
    4768:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    476a:	2100      	movs	r1, #0
    476c:	2005      	movs	r0, #5
    476e:	4798      	blx	r3
    4770:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4774:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4778:	2270      	movs	r2, #112	; 0x70
    477a:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    477c:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    477e:	f240 2201 	movw	r2, #513	; 0x201
    4782:	831a      	strh	r2, [r3, #24]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    4784:	4b5a      	ldr	r3, [pc, #360]	; (48f0 <_usb_d_dev_handler+0x25c>)
    4786:	f893 3020 	ldrb.w	r3, [r3, #32]
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    478a:	f013 0f01 	tst.w	r3, #1
    478e:	d00d      	beq.n	47ac <_usb_d_dev_handler+0x118>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    4790:	4a57      	ldr	r2, [pc, #348]	; (48f0 <_usb_d_dev_handler+0x25c>)
    4792:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    4794:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    4798:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    479c:	d1f9      	bne.n	4792 <_usb_d_dev_handler+0xfe>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    479e:	4b53      	ldr	r3, [pc, #332]	; (48ec <_usb_d_dev_handler+0x258>)
    47a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    47a2:	2100      	movs	r1, #0
    47a4:	2002      	movs	r0, #2
    47a6:	4798      	blx	r3
    47a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    47ac:	4a50      	ldr	r2, [pc, #320]	; (48f0 <_usb_d_dev_handler+0x25c>)
    47ae:	6913      	ldr	r3, [r2, #16]
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    47b0:	f413 7f80 	tst.w	r3, #256	; 0x100
    47b4:	d0fb      	beq.n	47ae <_usb_d_dev_handler+0x11a>
    47b6:	e7f2      	b.n	479e <_usb_d_dev_handler+0x10a>

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    47b8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    47bc:	2400      	movs	r4, #0
    47be:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    47c2:	2208      	movs	r2, #8
    47c4:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    47c6:	2270      	movs	r2, #112	; 0x70
    47c8:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    47ca:	f240 2201 	movw	r2, #513	; 0x201
    47ce:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    47d0:	4b48      	ldr	r3, [pc, #288]	; (48f4 <_usb_d_dev_handler+0x260>)
    47d2:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    47d4:	4b45      	ldr	r3, [pc, #276]	; (48ec <_usb_d_dev_handler+0x258>)
    47d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    47d8:	4621      	mov	r1, r4
    47da:	2001      	movs	r0, #1
    47dc:	4798      	blx	r3
    47de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    47e2:	f011 0f10 	tst.w	r1, #16
    47e6:	d109      	bne.n	47fc <_usb_d_dev_handler+0x168>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    47e8:	f011 0f40 	tst.w	r1, #64	; 0x40
    47ec:	d108      	bne.n	4800 <_usb_d_dev_handler+0x16c>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    47ee:	f011 0f20 	tst.w	r1, #32
    47f2:	d02f      	beq.n	4854 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 0);
    47f4:	2100      	movs	r1, #0
    47f6:	4b40      	ldr	r3, [pc, #256]	; (48f8 <_usb_d_dev_handler+0x264>)
    47f8:	4798      	blx	r3
    47fa:	e02b      	b.n	4854 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_setup(ept);
    47fc:	47c8      	blx	r9
    47fe:	e029      	b.n	4854 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 1);
    4800:	2101      	movs	r1, #1
    4802:	4b3d      	ldr	r3, [pc, #244]	; (48f8 <_usb_d_dev_handler+0x264>)
    4804:	4798      	blx	r3
    4806:	e025      	b.n	4854 <_usb_d_dev_handler+0x1c0>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    4808:	f011 0f40 	tst.w	r1, #64	; 0x40
    480c:	d111      	bne.n	4832 <_usb_d_dev_handler+0x19e>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    480e:	f011 0f08 	tst.w	r1, #8
    4812:	d112      	bne.n	483a <_usb_d_dev_handler+0x1a6>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    4814:	f011 0f02 	tst.w	r1, #2
    4818:	d112      	bne.n	4840 <_usb_d_dev_handler+0x1ac>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    481a:	f003 0307 	and.w	r3, r3, #7
    481e:	2b01      	cmp	r3, #1
    4820:	d118      	bne.n	4854 <_usb_d_dev_handler+0x1c0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    4822:	f011 0f04 	tst.w	r1, #4
    4826:	d10f      	bne.n	4848 <_usb_d_dev_handler+0x1b4>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    4828:	f011 0f10 	tst.w	r1, #16
    482c:	d012      	beq.n	4854 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_setup(ept);
    482e:	47c8      	blx	r9
    4830:	e010      	b.n	4854 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 1);
    4832:	2101      	movs	r1, #1
    4834:	4b30      	ldr	r3, [pc, #192]	; (48f8 <_usb_d_dev_handler+0x264>)
    4836:	4798      	blx	r3
    4838:	e00c      	b.n	4854 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_trfail(ept, 1);
    483a:	2101      	movs	r1, #1
    483c:	47c0      	blx	r8
    483e:	e009      	b.n	4854 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_in_next(ept, true);
    4840:	2101      	movs	r1, #1
    4842:	4b2e      	ldr	r3, [pc, #184]	; (48fc <_usb_d_dev_handler+0x268>)
    4844:	4798      	blx	r3
    4846:	e005      	b.n	4854 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_trfail(ept, 0);
    4848:	2100      	movs	r1, #0
    484a:	47c0      	blx	r8
    484c:	e002      	b.n	4854 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 0);
    484e:	2100      	movs	r1, #0
    4850:	4b29      	ldr	r3, [pc, #164]	; (48f8 <_usb_d_dev_handler+0x264>)
    4852:	4798      	blx	r3
    4854:	3401      	adds	r4, #1
    4856:	3514      	adds	r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    4858:	2c09      	cmp	r4, #9
    485a:	d042      	beq.n	48e2 <_usb_d_dev_handler+0x24e>
    485c:	4628      	mov	r0, r5
		if (ept->ep == 0xFF) {
    485e:	7cab      	ldrb	r3, [r5, #18]
    4860:	2bff      	cmp	r3, #255	; 0xff
    4862:	d0f7      	beq.n	4854 <_usb_d_dev_handler+0x1c0>
	if (!(epint & (1u << epn))) {
    4864:	f003 030f 	and.w	r3, r3, #15
    4868:	2101      	movs	r1, #1
    486a:	4099      	lsls	r1, r3
    486c:	4231      	tst	r1, r6
    486e:	d0f1      	beq.n	4854 <_usb_d_dev_handler+0x1c0>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    4870:	0159      	lsls	r1, r3, #5
    4872:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    4876:	f501 7180 	add.w	r1, r1, #256	; 0x100
    487a:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    487c:	015b      	lsls	r3, r3, #5
    487e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4882:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
	if (flags) {
    4886:	4019      	ands	r1, r3
    4888:	d0e4      	beq.n	4854 <_usb_d_dev_handler+0x1c0>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    488a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    488e:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    4892:	f892 3087 	ldrb.w	r3, [r2, #135]	; 0x87
    4896:	f003 0247 	and.w	r2, r3, #71	; 0x47
    489a:	2a01      	cmp	r2, #1
    489c:	d0a1      	beq.n	47e2 <_usb_d_dev_handler+0x14e>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    489e:	f013 0f80 	tst.w	r3, #128	; 0x80
    48a2:	d1b1      	bne.n	4808 <_usb_d_dev_handler+0x174>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    48a4:	f011 0f20 	tst.w	r1, #32
    48a8:	d1d1      	bne.n	484e <_usb_d_dev_handler+0x1ba>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    48aa:	f011 0f04 	tst.w	r1, #4
    48ae:	d10e      	bne.n	48ce <_usb_d_dev_handler+0x23a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    48b0:	f011 0f01 	tst.w	r1, #1
    48b4:	d10e      	bne.n	48d4 <_usb_d_dev_handler+0x240>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    48b6:	f003 0307 	and.w	r3, r3, #7
    48ba:	2b01      	cmp	r3, #1
    48bc:	d1ca      	bne.n	4854 <_usb_d_dev_handler+0x1c0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    48be:	f011 0f08 	tst.w	r1, #8
    48c2:	d10b      	bne.n	48dc <_usb_d_dev_handler+0x248>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    48c4:	f011 0f10 	tst.w	r1, #16
    48c8:	d0c4      	beq.n	4854 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_setup(ept);
    48ca:	47c8      	blx	r9
    48cc:	e7c2      	b.n	4854 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_trfail(ept, 0);
    48ce:	2100      	movs	r1, #0
    48d0:	47c0      	blx	r8
    48d2:	e7bf      	b.n	4854 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_out_next(ept, true);
    48d4:	2101      	movs	r1, #1
    48d6:	4b0a      	ldr	r3, [pc, #40]	; (4900 <_usb_d_dev_handler+0x26c>)
    48d8:	4798      	blx	r3
    48da:	e7bb      	b.n	4854 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_trfail(ept, 1);
    48dc:	2101      	movs	r1, #1
    48de:	47c0      	blx	r8
    48e0:	e7b8      	b.n	4854 <_usb_d_dev_handler+0x1c0>
    48e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    48e6:	bf00      	nop
    48e8:	200070c8 	.word	0x200070c8
    48ec:	20007054 	.word	0x20007054
    48f0:	40001000 	.word	0x40001000
    48f4:	000042dd 	.word	0x000042dd
    48f8:	00004119 	.word	0x00004119
    48fc:	00004321 	.word	0x00004321
    4900:	000044a5 	.word	0x000044a5
    4904:	0000409d 	.word	0x0000409d
    4908:	000041dd 	.word	0x000041dd

0000490c <_usb_d_dev_init>:
{
    490c:	b508      	push	{r3, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    490e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4912:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    4914:	f013 0f01 	tst.w	r3, #1
    4918:	d119      	bne.n	494e <_usb_d_dev_init+0x42>
	tmp = ((Usb *)hw)->DEVICE.CTRLA.reg;
    491a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    491e:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    4920:	f013 0f02 	tst.w	r3, #2
    4924:	d00f      	beq.n	4946 <_usb_d_dev_init+0x3a>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    4926:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    492a:	7893      	ldrb	r3, [r2, #2]
    492c:	f013 0f03 	tst.w	r3, #3
    4930:	d1fb      	bne.n	492a <_usb_d_dev_init+0x1e>
	((Usb *)hw)->DEVICE.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    4932:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    4936:	7813      	ldrb	r3, [r2, #0]
    4938:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    493c:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    493e:	7893      	ldrb	r3, [r2, #2]
    4940:	f013 0f02 	tst.w	r3, #2
    4944:	d1fb      	bne.n	493e <_usb_d_dev_init+0x32>
	((Usb *)hw)->DEVICE.CTRLA.reg = data;
    4946:	2201      	movs	r2, #1
    4948:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    494c:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    494e:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    4952:	7893      	ldrb	r3, [r2, #2]
    4954:	f013 0f01 	tst.w	r3, #1
    4958:	d1fb      	bne.n	4952 <_usb_d_dev_init+0x46>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    495a:	4b1f      	ldr	r3, [pc, #124]	; (49d8 <_usb_d_dev_init+0xcc>)
    495c:	4a1f      	ldr	r2, [pc, #124]	; (49dc <_usb_d_dev_init+0xd0>)
    495e:	661a      	str	r2, [r3, #96]	; 0x60
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    4960:	665a      	str	r2, [r3, #100]	; 0x64
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    4962:	669a      	str	r2, [r3, #104]	; 0x68
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    4964:	66da      	str	r2, [r3, #108]	; 0x6c
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    4966:	671a      	str	r2, [r3, #112]	; 0x70
	_usb_d_dev_reset_epts();
    4968:	4b1d      	ldr	r3, [pc, #116]	; (49e0 <_usb_d_dev_init+0xd4>)
    496a:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    496c:	4b1d      	ldr	r3, [pc, #116]	; (49e4 <_usb_d_dev_init+0xd8>)
    496e:	6819      	ldr	r1, [r3, #0]
	uint32_t pad_transp
    4970:	f3c1 1344 	ubfx	r3, r1, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    4974:	f3c1 2282 	ubfx	r2, r1, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
    4978:	f011 011f 	ands.w	r1, r1, #31
    497c:	d025      	beq.n	49ca <_usb_d_dev_init+0xbe>
		pad_transn = 9;
    497e:	291f      	cmp	r1, #31
    4980:	bf08      	it	eq
    4982:	2109      	moveq	r1, #9
	if (pad_transp == 0 || pad_transp == 0x1F) {
    4984:	b31b      	cbz	r3, 49ce <_usb_d_dev_init+0xc2>
		pad_transp = 25;
    4986:	2b1f      	cmp	r3, #31
    4988:	bf08      	it	eq
    498a:	2319      	moveq	r3, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
    498c:	b30a      	cbz	r2, 49d2 <_usb_d_dev_init+0xc6>
		pad_trim = 6;
    498e:	2a07      	cmp	r2, #7
    4990:	bf08      	it	eq
    4992:	2206      	moveq	r2, #6
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    4994:	f003 031f 	and.w	r3, r3, #31
    4998:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    499c:	0312      	lsls	r2, r2, #12
    499e:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    49a2:	4313      	orrs	r3, r2
    49a4:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    49a8:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    49aa:	78d3      	ldrb	r3, [r2, #3]
    49ac:	f043 0303 	orr.w	r3, r3, #3
    49b0:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    49b2:	78d3      	ldrb	r3, [r2, #3]
    49b4:	f043 030c 	orr.w	r3, r3, #12
    49b8:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->DEVICE.CTRLA.reg = data;
    49ba:	2304      	movs	r3, #4
    49bc:	7013      	strb	r3, [r2, #0]
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    49be:	4b06      	ldr	r3, [pc, #24]	; (49d8 <_usb_d_dev_init+0xcc>)
	((Usb *)hw)->DEVICE.DESCADD.reg = data;
    49c0:	6253      	str	r3, [r2, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    49c2:	2301      	movs	r3, #1
    49c4:	8113      	strh	r3, [r2, #8]
}
    49c6:	2000      	movs	r0, #0
    49c8:	bd08      	pop	{r3, pc}
		pad_transn = 9;
    49ca:	2109      	movs	r1, #9
    49cc:	e7da      	b.n	4984 <_usb_d_dev_init+0x78>
		pad_transp = 25;
    49ce:	2319      	movs	r3, #25
    49d0:	e7dc      	b.n	498c <_usb_d_dev_init+0x80>
		pad_trim = 6;
    49d2:	2206      	movs	r2, #6
    49d4:	e7de      	b.n	4994 <_usb_d_dev_init+0x88>
    49d6:	bf00      	nop
    49d8:	20007054 	.word	0x20007054
    49dc:	00004099 	.word	0x00004099
    49e0:	000042dd 	.word	0x000042dd
    49e4:	00800084 	.word	0x00800084

000049e8 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->DEVICE.SYNCBUSY.reg;
    49e8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    49ec:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    49ee:	f013 0f03 	tst.w	r3, #3
    49f2:	d11f      	bne.n	4a34 <_usb_d_dev_enable+0x4c>
	return ((Usb *)hw)->DEVICE.CTRLA.reg;
    49f4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    49f8:	781b      	ldrb	r3, [r3, #0]
    49fa:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    49fc:	f013 0f02 	tst.w	r3, #2
    4a00:	d104      	bne.n	4a0c <_usb_d_dev_enable+0x24>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    4a02:	f043 0302 	orr.w	r3, r3, #2
	((Usb *)hw)->DEVICE.CTRLA.reg = data;
    4a06:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    4a0a:	7013      	strb	r3, [r2, #0]
    4a0c:	4b0b      	ldr	r3, [pc, #44]	; (4a3c <_usb_d_dev_enable+0x54>)
    4a0e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    4a12:	609a      	str	r2, [r3, #8]
    4a14:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    4a18:	609a      	str	r2, [r3, #8]
    4a1a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    4a1e:	609a      	str	r2, [r3, #8]
    4a20:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    4a24:	609a      	str	r2, [r3, #8]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    4a26:	f240 228d 	movw	r2, #653	; 0x28d
    4a2a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4a2e:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    4a30:	2000      	movs	r0, #0
    4a32:	4770      	bx	lr
		return -USB_ERR_DENIED;
    4a34:	f06f 0010 	mvn.w	r0, #16
}
    4a38:	4770      	bx	lr
    4a3a:	bf00      	nop
    4a3c:	e000e100 	.word	0xe000e100

00004a40 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    4a40:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    4a44:	8913      	ldrh	r3, [r2, #8]
    4a46:	f023 0301 	bic.w	r3, r3, #1
    4a4a:	041b      	lsls	r3, r3, #16
    4a4c:	0c1b      	lsrs	r3, r3, #16
    4a4e:	8113      	strh	r3, [r2, #8]
    4a50:	4770      	bx	lr

00004a52 <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    4a52:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	((Usb *)hw)->DEVICE.DADD.reg = data;
    4a56:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4a5a:	7298      	strb	r0, [r3, #10]
    4a5c:	4770      	bx	lr
	...

00004a60 <_usb_d_dev_ep_init>:
{
    4a60:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a62:	fa4f fe80 	sxtb.w	lr, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    4a66:	f010 050f 	ands.w	r5, r0, #15
    4a6a:	d04d      	beq.n	4b08 <_usb_d_dev_ep_init+0xa8>
    4a6c:	f1be 0f00 	cmp.w	lr, #0
    4a70:	bfb4      	ite	lt
    4a72:	1cac      	addlt	r4, r5, #2
    4a74:	462c      	movge	r4, r5
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    4a76:	f001 0103 	and.w	r1, r1, #3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    4a7a:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
    4a7c:	2d02      	cmp	r5, #2
    4a7e:	d947      	bls.n	4b10 <_usb_d_dev_ep_init+0xb0>
		return -USB_ERR_PARAM;
    4a80:	f06f 0011 	mvn.w	r0, #17
    4a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    4a86:	f1be 0f00 	cmp.w	lr, #0
    4a8a:	db1b      	blt.n	4ac4 <_usb_d_dev_ep_init+0x64>
    4a8c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    4a90:	4e37      	ldr	r6, [pc, #220]	; (4b70 <_usb_d_dev_ep_init+0x110>)
    4a92:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    4a96:	2d00      	cmp	r5, #0
    4a98:	d15e      	bne.n	4b58 <_usb_d_dev_ep_init+0xf8>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    4a9a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4a9e:	4d34      	ldr	r5, [pc, #208]	; (4b70 <_usb_d_dev_ep_init+0x110>)
    4aa0:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
    4aa4:	4d33      	ldr	r5, [pc, #204]	; (4b74 <_usb_d_dev_ep_init+0x114>)
    4aa6:	00a6      	lsls	r6, r4, #2
    4aa8:	1933      	adds	r3, r6, r4
    4aaa:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    4aae:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
	ept->size     = max_pkt_siz;
    4ab2:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	ept->flags.u8 = (ep_type + 1);
    4ab6:	3101      	adds	r1, #1
    4ab8:	f883 1087 	strb.w	r1, [r3, #135]	; 0x87
	ept->ep       = ep;
    4abc:	f883 0086 	strb.w	r0, [r3, #134]	; 0x86
	return USB_OK;
    4ac0:	2000      	movs	r0, #0
    4ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    4ac4:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    4ac8:	4e29      	ldr	r6, [pc, #164]	; (4b70 <_usb_d_dev_ep_init+0x110>)
    4aca:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    4ace:	686d      	ldr	r5, [r5, #4]
    4ad0:	b935      	cbnz	r5, 4ae0 <_usb_d_dev_ep_init+0x80>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    4ad2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4ad6:	4d26      	ldr	r5, [pc, #152]	; (4b70 <_usb_d_dev_ep_init+0x110>)
    4ad8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    4adc:	685f      	ldr	r7, [r3, #4]
    4ade:	e7e1      	b.n	4aa4 <_usb_d_dev_ep_init+0x44>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    4ae0:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    4ae4:	4e22      	ldr	r6, [pc, #136]	; (4b70 <_usb_d_dev_ep_init+0x110>)
    4ae6:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    4aea:	896d      	ldrh	r5, [r5, #10]
    4aec:	4295      	cmp	r5, r2
    4aee:	daf0      	bge.n	4ad2 <_usb_d_dev_ep_init+0x72>
		return -USB_ERR_FUNC;
    4af0:	f06f 0012 	mvn.w	r0, #18
    4af4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    4af6:	f06f 0013 	mvn.w	r0, #19
    4afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    4afc:	f06f 0013 	mvn.w	r0, #19
    4b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_FUNC;
    4b02:	f06f 0012 	mvn.w	r0, #18
    4b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    4b08:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
    4b0c:	2400      	movs	r4, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    4b0e:	4623      	mov	r3, r4
	if (ept->ep != 0xFF) {
    4b10:	eb04 0684 	add.w	r6, r4, r4, lsl #2
    4b14:	4f17      	ldr	r7, [pc, #92]	; (4b74 <_usb_d_dev_ep_init+0x114>)
    4b16:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    4b1a:	f896 6086 	ldrb.w	r6, [r6, #134]	; 0x86
    4b1e:	2eff      	cmp	r6, #255	; 0xff
    4b20:	d1e9      	bne.n	4af6 <_usb_d_dev_ep_init+0x96>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    4b22:	2900      	cmp	r1, #0
    4b24:	d1af      	bne.n	4a86 <_usb_d_dev_ep_init+0x26>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    4b26:	b125      	cbz	r5, 4b32 <_usb_d_dev_ep_init+0xd2>
    4b28:	f1be 0f00 	cmp.w	lr, #0
    4b2c:	bfa4      	itt	ge
    4b2e:	3502      	addge	r5, #2
    4b30:	b2ed      	uxtbge	r5, r5
		if (ept_in->ep != 0xFF) {
    4b32:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    4b36:	4e0f      	ldr	r6, [pc, #60]	; (4b74 <_usb_d_dev_ep_init+0x114>)
    4b38:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    4b3c:	f895 5086 	ldrb.w	r5, [r5, #134]	; 0x86
    4b40:	2dff      	cmp	r5, #255	; 0xff
    4b42:	d1db      	bne.n	4afc <_usb_d_dev_ep_init+0x9c>
		if (pcfg->cache == NULL) {
    4b44:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    4b48:	4e09      	ldr	r6, [pc, #36]	; (4b70 <_usb_d_dev_ep_init+0x110>)
    4b4a:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    4b4e:	2d00      	cmp	r5, #0
    4b50:	d0d7      	beq.n	4b02 <_usb_d_dev_ep_init+0xa2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    4b52:	f1be 0f00 	cmp.w	lr, #0
    4b56:	dbb5      	blt.n	4ac4 <_usb_d_dev_ep_init+0x64>
    4b58:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    4b5c:	4e04      	ldr	r6, [pc, #16]	; (4b70 <_usb_d_dev_ep_init+0x110>)
    4b5e:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    4b62:	892d      	ldrh	r5, [r5, #8]
    4b64:	4295      	cmp	r5, r2
    4b66:	da98      	bge.n	4a9a <_usb_d_dev_ep_init+0x3a>
		return -USB_ERR_FUNC;
    4b68:	f06f 0012 	mvn.w	r0, #18
    4b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4b6e:	bf00      	nop
    4b70:	0000f208 	.word	0x0000f208
    4b74:	20007054 	.word	0x20007054

00004b78 <_usb_d_dev_ep_deinit>:
{
    4b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4b7a:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    4b7c:	f010 060f 	ands.w	r6, r0, #15
    4b80:	d00e      	beq.n	4ba0 <_usb_d_dev_ep_deinit+0x28>
    4b82:	2f00      	cmp	r7, #0
    4b84:	bfb4      	ite	lt
    4b86:	1cb3      	addlt	r3, r6, #2
    4b88:	4633      	movge	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    4b8a:	2e02      	cmp	r6, #2
    4b8c:	d900      	bls.n	4b90 <_usb_d_dev_ep_deinit+0x18>
    4b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return &dev_inst.ep[ep_index];
    4b90:	461d      	mov	r5, r3
    4b92:	3301      	adds	r3, #1
    4b94:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    4b98:	4a24      	ldr	r2, [pc, #144]	; (4c2c <_usb_d_dev_ep_deinit+0xb4>)
    4b9a:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    4b9e:	e002      	b.n	4ba6 <_usb_d_dev_ep_deinit+0x2e>
    4ba0:	f8df e094 	ldr.w	lr, [pc, #148]	; 4c38 <_usb_d_dev_ep_deinit+0xc0>
    4ba4:	2500      	movs	r5, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    4ba6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    4baa:	4a21      	ldr	r2, [pc, #132]	; (4c30 <_usb_d_dev_ep_deinit+0xb8>)
    4bac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4bb0:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
    4bb4:	2aff      	cmp	r2, #255	; 0xff
    4bb6:	d0ea      	beq.n	4b8e <_usb_d_dev_ep_deinit+0x16>
    4bb8:	4604      	mov	r4, r0
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    4bba:	2203      	movs	r2, #3
    4bbc:	0ff9      	lsrs	r1, r7, #31
    4bbe:	4670      	mov	r0, lr
    4bc0:	4b1c      	ldr	r3, [pc, #112]	; (4c34 <_usb_d_dev_ep_deinit+0xbc>)
    4bc2:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    4bc4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    4bc8:	4a19      	ldr	r2, [pc, #100]	; (4c30 <_usb_d_dev_ep_deinit+0xb8>)
    4bca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4bce:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    4bd2:	f003 0307 	and.w	r3, r3, #7
    4bd6:	2b01      	cmp	r3, #1
    4bd8:	d016      	beq.n	4c08 <_usb_d_dev_ep_deinit+0x90>
	} else if (USB_EP_GET_DIR(ep)) {
    4bda:	2f00      	cmp	r7, #0
    4bdc:	db1b      	blt.n	4c16 <_usb_d_dev_ep_deinit+0x9e>
    4bde:	0160      	lsls	r0, r4, #5
    4be0:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    4be4:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
    4be8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    4bec:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
    4bf0:	4b0f      	ldr	r3, [pc, #60]	; (4c30 <_usb_d_dev_ep_deinit+0xb8>)
    4bf2:	00aa      	lsls	r2, r5, #2
    4bf4:	1951      	adds	r1, r2, r5
    4bf6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    4bfa:	2000      	movs	r0, #0
    4bfc:	f881 0087 	strb.w	r0, [r1, #135]	; 0x87
	ept->ep       = 0xFF;
    4c00:	22ff      	movs	r2, #255	; 0xff
    4c02:	f881 2086 	strb.w	r2, [r1, #134]	; 0x86
    4c06:	e7c2      	b.n	4b8e <_usb_d_dev_ep_deinit+0x16>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    4c08:	0160      	lsls	r0, r4, #5
    4c0a:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    4c0e:	2300      	movs	r3, #0
    4c10:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
    4c14:	e7ec      	b.n	4bf0 <_usb_d_dev_ep_deinit+0x78>
    4c16:	0176      	lsls	r6, r6, #5
    4c18:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    4c1c:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
    4c20:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    4c24:	f886 3100 	strb.w	r3, [r6, #256]	; 0x100
    4c28:	e7e2      	b.n	4bf0 <_usb_d_dev_ep_deinit+0x78>
    4c2a:	bf00      	nop
    4c2c:	200070b4 	.word	0x200070b4
    4c30:	20007054 	.word	0x20007054
    4c34:	00004171 	.word	0x00004171
    4c38:	200070c8 	.word	0x200070c8

00004c3c <_usb_d_dev_ep_enable>:
{
    4c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c3e:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    4c40:	f010 000f 	ands.w	r0, r0, #15
    4c44:	f000 80a6 	beq.w	4d94 <_usb_d_dev_ep_enable+0x158>
    4c48:	2f00      	cmp	r7, #0
    4c4a:	bfb4      	ite	lt
    4c4c:	1c83      	addlt	r3, r0, #2
    4c4e:	4603      	movge	r3, r0
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    4c50:	4606      	mov	r6, r0
    4c52:	0142      	lsls	r2, r0, #5
    4c54:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    4c58:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
    4c5c:	b2e4      	uxtb	r4, r4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    4c5e:	2802      	cmp	r0, #2
    4c60:	f240 809f 	bls.w	4da2 <_usb_d_dev_ep_enable+0x166>
		return -USB_ERR_PARAM;
    4c64:	f06f 0011 	mvn.w	r0, #17
    4c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    4c6a:	f014 0f77 	tst.w	r4, #119	; 0x77
    4c6e:	f040 8088 	bne.w	4d82 <_usb_d_dev_ep_enable+0x146>
    4c72:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    4c76:	2111      	movs	r1, #17
    4c78:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    4c7c:	4c97      	ldr	r4, [pc, #604]	; (4edc <_usb_d_dev_ep_enable+0x2a0>)
    4c7e:	eb04 018e 	add.w	r1, r4, lr, lsl #2
    4c82:	f8b1 4084 	ldrh.w	r4, [r1, #132]	; 0x84
    4c86:	4996      	ldr	r1, [pc, #600]	; (4ee0 <_usb_d_dev_ep_enable+0x2a4>)
    4c88:	ea01 3184 	and.w	r1, r1, r4, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    4c8c:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    4c90:	f200 80cc 	bhi.w	4e2c <_usb_d_dev_ep_enable+0x1f0>
    4c94:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    4c98:	f200 810a 	bhi.w	4eb0 <_usb_d_dev_ep_enable+0x274>
    4c9c:	2c80      	cmp	r4, #128	; 0x80
    4c9e:	f200 80f9 	bhi.w	4e94 <_usb_d_dev_ep_enable+0x258>
    4ca2:	2c40      	cmp	r4, #64	; 0x40
    4ca4:	f200 810b 	bhi.w	4ebe <_usb_d_dev_ep_enable+0x282>
    4ca8:	2c20      	cmp	r4, #32
    4caa:	f200 80fa 	bhi.w	4ea2 <_usb_d_dev_ep_enable+0x266>
    4cae:	2c10      	cmp	r4, #16
    4cb0:	f200 810c 	bhi.w	4ecc <_usb_d_dev_ep_enable+0x290>
    4cb4:	2c08      	cmp	r4, #8
    4cb6:	bf94      	ite	ls
    4cb8:	2700      	movls	r7, #0
    4cba:	2701      	movhi	r7, #1
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4cbc:	ea41 7107 	orr.w	r1, r1, r7, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    4cc0:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4cc2:	f3c4 010d 	ubfx	r1, r4, #0, #14
    4cc6:	e0b7      	b.n	4e38 <_usb_d_dev_ep_enable+0x1fc>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    4cc8:	f014 0f70 	tst.w	r4, #112	; 0x70
    4ccc:	d15c      	bne.n	4d88 <_usb_d_dev_ep_enable+0x14c>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    4cce:	4d83      	ldr	r5, [pc, #524]	; (4edc <_usb_d_dev_ep_enable+0x2a0>)
    4cd0:	009f      	lsls	r7, r3, #2
    4cd2:	18f9      	adds	r1, r7, r3
    4cd4:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    4cd8:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    4cdc:	0109      	lsls	r1, r1, #4
    4cde:	f001 0170 	and.w	r1, r1, #112	; 0x70
    4ce2:	430c      	orrs	r4, r1
    4ce4:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    4ce8:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4cec:	443b      	add	r3, r7
    4cee:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    4cf2:	f8b5 3084 	ldrh.w	r3, [r5, #132]	; 0x84
    4cf6:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    4cfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    4cfe:	d80f      	bhi.n	4d20 <_usb_d_dev_ep_enable+0xe4>
    4d00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    4d04:	d819      	bhi.n	4d3a <_usb_d_dev_ep_enable+0xfe>
    4d06:	2b80      	cmp	r3, #128	; 0x80
    4d08:	d819      	bhi.n	4d3e <_usb_d_dev_ep_enable+0x102>
    4d0a:	2b40      	cmp	r3, #64	; 0x40
    4d0c:	d819      	bhi.n	4d42 <_usb_d_dev_ep_enable+0x106>
    4d0e:	2b20      	cmp	r3, #32
    4d10:	d819      	bhi.n	4d46 <_usb_d_dev_ep_enable+0x10a>
    4d12:	2b10      	cmp	r3, #16
    4d14:	d819      	bhi.n	4d4a <_usb_d_dev_ep_enable+0x10e>
    4d16:	2b08      	cmp	r3, #8
    4d18:	bf94      	ite	ls
    4d1a:	2300      	movls	r3, #0
    4d1c:	2301      	movhi	r3, #1
    4d1e:	e000      	b.n	4d22 <_usb_d_dev_ep_enable+0xe6>
    4d20:	2307      	movs	r3, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4d22:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
    4d26:	6143      	str	r3, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    4d28:	2380      	movs	r3, #128	; 0x80
    4d2a:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    4d2e:	4b6b      	ldr	r3, [pc, #428]	; (4edc <_usb_d_dev_ep_enable+0x2a0>)
    4d30:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    4d34:	2000      	movs	r0, #0
    4d36:	76b0      	strb	r0, [r6, #26]
    4d38:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    4d3a:	2306      	movs	r3, #6
    4d3c:	e7f1      	b.n	4d22 <_usb_d_dev_ep_enable+0xe6>
    4d3e:	2305      	movs	r3, #5
    4d40:	e7ef      	b.n	4d22 <_usb_d_dev_ep_enable+0xe6>
    4d42:	2304      	movs	r3, #4
    4d44:	e7ed      	b.n	4d22 <_usb_d_dev_ep_enable+0xe6>
    4d46:	2303      	movs	r3, #3
    4d48:	e7eb      	b.n	4d22 <_usb_d_dev_ep_enable+0xe6>
    4d4a:	2302      	movs	r3, #2
    4d4c:	e7e9      	b.n	4d22 <_usb_d_dev_ep_enable+0xe6>
    4d4e:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4d50:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    4d54:	6043      	str	r3, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    4d56:	2340      	movs	r3, #64	; 0x40
    4d58:	f882 3105 	strb.w	r3, [r2, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
    4d5c:	4b5f      	ldr	r3, [pc, #380]	; (4edc <_usb_d_dev_ep_enable+0x2a0>)
    4d5e:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    4d62:	2000      	movs	r0, #0
    4d64:	72b0      	strb	r0, [r6, #10]
    4d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    4d68:	2106      	movs	r1, #6
    4d6a:	e7f1      	b.n	4d50 <_usb_d_dev_ep_enable+0x114>
    4d6c:	2105      	movs	r1, #5
    4d6e:	e7ef      	b.n	4d50 <_usb_d_dev_ep_enable+0x114>
    4d70:	2104      	movs	r1, #4
    4d72:	e7ed      	b.n	4d50 <_usb_d_dev_ep_enable+0x114>
    4d74:	2103      	movs	r1, #3
    4d76:	e7eb      	b.n	4d50 <_usb_d_dev_ep_enable+0x114>
    4d78:	2102      	movs	r1, #2
    4d7a:	e7e9      	b.n	4d50 <_usb_d_dev_ep_enable+0x114>
		return -USB_ERR_PARAM;
    4d7c:	f06f 0011 	mvn.w	r0, #17
    4d80:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    4d82:	f06f 0013 	mvn.w	r0, #19
    4d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    4d88:	f06f 0013 	mvn.w	r0, #19
    4d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    4d8e:	f06f 0013 	mvn.w	r0, #19
    4d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    4d94:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4d98:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
    4d9c:	b2e4      	uxtb	r4, r4
    4d9e:	2600      	movs	r6, #0
	return &dev_inst.ep[ep_index];
    4da0:	4633      	mov	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    4da2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    4da6:	494d      	ldr	r1, [pc, #308]	; (4edc <_usb_d_dev_ep_enable+0x2a0>)
    4da8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    4dac:	f892 5086 	ldrb.w	r5, [r2, #134]	; 0x86
    4db0:	2dff      	cmp	r5, #255	; 0xff
    4db2:	d0e3      	beq.n	4d7c <_usb_d_dev_ep_enable+0x140>
    4db4:	0172      	lsls	r2, r6, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    4db6:	1888      	adds	r0, r1, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    4db8:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
    4dbc:	eb01 018e 	add.w	r1, r1, lr, lsl #2
    4dc0:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    4dc4:	f001 0107 	and.w	r1, r1, #7
    4dc8:	2901      	cmp	r1, #1
    4dca:	f43f af4e 	beq.w	4c6a <_usb_d_dev_ep_enable+0x2e>
	} else if (dir) {
    4dce:	2f00      	cmp	r7, #0
    4dd0:	f6ff af7a 	blt.w	4cc8 <_usb_d_dev_ep_enable+0x8c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    4dd4:	f014 0f07 	tst.w	r4, #7
    4dd8:	d1d9      	bne.n	4d8e <_usb_d_dev_ep_enable+0x152>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    4dda:	4d40      	ldr	r5, [pc, #256]	; (4edc <_usb_d_dev_ep_enable+0x2a0>)
    4ddc:	009f      	lsls	r7, r3, #2
    4dde:	18f9      	adds	r1, r7, r3
    4de0:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    4de4:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    4de8:	f001 0107 	and.w	r1, r1, #7
    4dec:	430c      	orrs	r4, r1
    4dee:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    4df2:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    4df6:	443b      	add	r3, r7
    4df8:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    4dfc:	f8b5 1084 	ldrh.w	r1, [r5, #132]	; 0x84
    4e00:	4b37      	ldr	r3, [pc, #220]	; (4ee0 <_usb_d_dev_ep_enable+0x2a4>)
    4e02:	ea03 3381 	and.w	r3, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    4e06:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    4e0a:	d8a0      	bhi.n	4d4e <_usb_d_dev_ep_enable+0x112>
    4e0c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    4e10:	d8aa      	bhi.n	4d68 <_usb_d_dev_ep_enable+0x12c>
    4e12:	2980      	cmp	r1, #128	; 0x80
    4e14:	d8aa      	bhi.n	4d6c <_usb_d_dev_ep_enable+0x130>
    4e16:	2940      	cmp	r1, #64	; 0x40
    4e18:	d8aa      	bhi.n	4d70 <_usb_d_dev_ep_enable+0x134>
    4e1a:	2920      	cmp	r1, #32
    4e1c:	d8aa      	bhi.n	4d74 <_usb_d_dev_ep_enable+0x138>
    4e1e:	2910      	cmp	r1, #16
    4e20:	d8aa      	bhi.n	4d78 <_usb_d_dev_ep_enable+0x13c>
    4e22:	2908      	cmp	r1, #8
    4e24:	bf94      	ite	ls
    4e26:	2100      	movls	r1, #0
    4e28:	2101      	movhi	r1, #1
    4e2a:	e791      	b.n	4d50 <_usb_d_dev_ep_enable+0x114>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4e2c:	f041 41e0 	orr.w	r1, r1, #1879048192	; 0x70000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    4e30:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4e32:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    4e36:	2707      	movs	r7, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4e38:	ea41 7107 	orr.w	r1, r1, r7, lsl #28
    4e3c:	6141      	str	r1, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    4e3e:	2140      	movs	r1, #64	; 0x40
    4e40:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    4e44:	2080      	movs	r0, #128	; 0x80
    4e46:	f882 0104 	strb.w	r0, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    4e4a:	4a24      	ldr	r2, [pc, #144]	; (4edc <_usb_d_dev_ep_enable+0x2a0>)
    4e4c:	eb02 1646 	add.w	r6, r2, r6, lsl #5
    4e50:	2000      	movs	r0, #0
    4e52:	72b0      	strb	r0, [r6, #10]
    4e54:	76b0      	strb	r0, [r6, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    4e56:	f005 050f 	and.w	r5, r5, #15
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    4e5a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    4e5e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4e62:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
	bank->ADDR.reg          = addr;
    4e66:	016d      	lsls	r5, r5, #5
    4e68:	1953      	adds	r3, r2, r5
    4e6a:	5156      	str	r6, [r2, r5]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    4e6c:	685a      	ldr	r2, [r3, #4]
    4e6e:	f364 329b 	bfi	r2, r4, #14, #14
    4e72:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    4e74:	685a      	ldr	r2, [r3, #4]
    4e76:	f360 020d 	bfi	r2, r0, #0, #14
    4e7a:	605a      	str	r2, [r3, #4]
    4e7c:	f105 4382 	add.w	r3, r5, #1090519040	; 0x41000000
    4e80:	22b0      	movs	r2, #176	; 0xb0
    4e82:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    4e86:	f883 1105 	strb.w	r1, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    4e8a:	461d      	mov	r5, r3
    4e8c:	2310      	movs	r3, #16
    4e8e:	f885 3109 	strb.w	r3, [r5, #265]	; 0x109
    4e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4e94:	f041 41a0 	orr.w	r1, r1, #1342177280	; 0x50000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    4e98:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4e9a:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    4e9e:	2705      	movs	r7, #5
    4ea0:	e7ca      	b.n	4e38 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4ea2:	f041 5140 	orr.w	r1, r1, #805306368	; 0x30000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    4ea6:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4ea8:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    4eac:	2703      	movs	r7, #3
    4eae:	e7c3      	b.n	4e38 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4eb0:	f041 41c0 	orr.w	r1, r1, #1610612736	; 0x60000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    4eb4:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4eb6:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    4eba:	2706      	movs	r7, #6
    4ebc:	e7bc      	b.n	4e38 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4ebe:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    4ec2:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4ec4:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    4ec8:	2704      	movs	r7, #4
    4eca:	e7b5      	b.n	4e38 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4ecc:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    4ed0:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4ed2:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    4ed6:	2702      	movs	r7, #2
    4ed8:	e7ae      	b.n	4e38 <_usb_d_dev_ep_enable+0x1fc>
    4eda:	bf00      	nop
    4edc:	20007054 	.word	0x20007054
    4ee0:	0fffc000 	.word	0x0fffc000

00004ee4 <_usb_d_dev_ep_stall>:
{
    4ee4:	b470      	push	{r4, r5, r6}
    4ee6:	b243      	sxtb	r3, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    4ee8:	0fdc      	lsrs	r4, r3, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    4eea:	f010 000f 	ands.w	r0, r0, #15
    4eee:	d008      	beq.n	4f02 <_usb_d_dev_ep_stall+0x1e>
    4ef0:	2b00      	cmp	r3, #0
    4ef2:	bfb4      	ite	lt
    4ef4:	1c83      	addlt	r3, r0, #2
    4ef6:	4603      	movge	r3, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
    4ef8:	2802      	cmp	r0, #2
    4efa:	d903      	bls.n	4f04 <_usb_d_dev_ep_stall+0x20>
		return -USB_ERR_PARAM;
    4efc:	f06f 0011 	mvn.w	r0, #17
    4f00:	e018      	b.n	4f34 <_usb_d_dev_ep_stall+0x50>
	return &dev_inst.ep[ep_index];
    4f02:	2300      	movs	r3, #0
	if (USB_EP_STALL_SET == ctrl) {
    4f04:	2901      	cmp	r1, #1
    4f06:	d017      	beq.n	4f38 <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    4f08:	2900      	cmp	r1, #0
    4f0a:	d03a      	beq.n	4f82 <_usb_d_dev_ep_stall+0x9e>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    4f0c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    4f10:	4a45      	ldr	r2, [pc, #276]	; (5028 <_usb_d_dev_ep_stall+0x144>)
    4f12:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4f16:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    4f1a:	f003 030f 	and.w	r3, r3, #15
    4f1e:	015b      	lsls	r3, r3, #5
    4f20:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4f24:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    4f28:	2310      	movs	r3, #16
    4f2a:	40a3      	lsls	r3, r4
    4f2c:	421a      	tst	r2, r3
    4f2e:	bf14      	ite	ne
    4f30:	2001      	movne	r0, #1
    4f32:	2000      	moveq	r0, #0
}
    4f34:	bc70      	pop	{r4, r5, r6}
    4f36:	4770      	bx	lr
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    4f38:	2510      	movs	r5, #16
    4f3a:	40a5      	lsls	r5, r4
    4f3c:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    4f3e:	493a      	ldr	r1, [pc, #232]	; (5028 <_usb_d_dev_ep_stall+0x144>)
    4f40:	009e      	lsls	r6, r3, #2
    4f42:	18f2      	adds	r2, r6, r3
    4f44:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    4f48:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    4f4c:	f002 020f 	and.w	r2, r2, #15
    4f50:	0150      	lsls	r0, r2, #5
    4f52:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    4f56:	f880 5105 	strb.w	r5, [r0, #261]	; 0x105
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    4f5a:	2020      	movs	r0, #32
    4f5c:	fa00 f404 	lsl.w	r4, r0, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    4f60:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    4f62:	0152      	lsls	r2, r2, #5
    4f64:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    4f68:	f882 4109 	strb.w	r4, [r2, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    4f6c:	4433      	add	r3, r6
    4f6e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    4f72:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    4f76:	f042 0208 	orr.w	r2, r2, #8
    4f7a:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    4f7e:	2000      	movs	r0, #0
    4f80:	e7d8      	b.n	4f34 <_usb_d_dev_ep_stall+0x50>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    4f82:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    4f86:	4928      	ldr	r1, [pc, #160]	; (5028 <_usb_d_dev_ep_stall+0x144>)
    4f88:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    4f8c:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
    4f90:	f002 020f 	and.w	r2, r2, #15
    4f94:	0151      	lsls	r1, r2, #5
    4f96:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    4f9a:	f891 5106 	ldrb.w	r5, [r1, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    4f9e:	2010      	movs	r0, #16
    4fa0:	40a0      	lsls	r0, r4
	if (!is_stalled) {
    4fa2:	4205      	tst	r5, r0
    4fa4:	d03c      	beq.n	5020 <_usb_d_dev_ep_stall+0x13c>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    4fa6:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    4fa8:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    4fac:	2020      	movs	r0, #32
    4fae:	40a0      	lsls	r0, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    4fb0:	b2c5      	uxtb	r5, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    4fb2:	f881 5108 	strb.w	r5, [r1, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    4fb6:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    4fba:	4202      	tst	r2, r0
    4fbc:	d007      	beq.n	4fce <_usb_d_dev_ep_stall+0xea>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    4fbe:	f881 5107 	strb.w	r5, [r1, #263]	; 0x107
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    4fc2:	2201      	movs	r2, #1
    4fc4:	fa02 f404 	lsl.w	r4, r2, r4
    4fc8:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    4fca:	f881 4104 	strb.w	r4, [r1, #260]	; 0x104
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    4fce:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    4fd2:	4815      	ldr	r0, [pc, #84]	; (5028 <_usb_d_dev_ep_stall+0x144>)
    4fd4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    4fd8:	f892 2087 	ldrb.w	r2, [r2, #135]	; 0x87
    4fdc:	f002 0207 	and.w	r2, r2, #7
    4fe0:	2a01      	cmp	r2, #1
    4fe2:	d00c      	beq.n	4ffe <_usb_d_dev_ep_stall+0x11a>
		ept->flags.bits.is_stalled = 0;
    4fe4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    4fe8:	4a0f      	ldr	r2, [pc, #60]	; (5028 <_usb_d_dev_ep_stall+0x144>)
    4fea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4fee:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    4ff2:	f36f 02c3 	bfc	r2, #3, #1
    4ff6:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    4ffa:	2000      	movs	r0, #0
    4ffc:	e79a      	b.n	4f34 <_usb_d_dev_ep_stall+0x50>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    4ffe:	f891 2106 	ldrb.w	r2, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    5002:	f012 0f30 	tst.w	r2, #48	; 0x30
    5006:	d10d      	bne.n	5024 <_usb_d_dev_ep_stall+0x140>
			ept->flags.bits.is_stalled = 0;
    5008:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    500c:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    5010:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    5014:	f36f 02c3 	bfc	r2, #3, #1
    5018:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    501c:	2000      	movs	r0, #0
    501e:	e789      	b.n	4f34 <_usb_d_dev_ep_stall+0x50>
    5020:	2000      	movs	r0, #0
    5022:	e787      	b.n	4f34 <_usb_d_dev_ep_stall+0x50>
    5024:	2000      	movs	r0, #0
    5026:	e785      	b.n	4f34 <_usb_d_dev_ep_stall+0x50>
    5028:	20007054 	.word	0x20007054

0000502c <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    502c:	b430      	push	{r4, r5}
	uint8_t            epn   = USB_EP_GET_N(ep);
    502e:	f000 040f 	and.w	r4, r0, #15
    5032:	0163      	lsls	r3, r4, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    5034:	4a14      	ldr	r2, [pc, #80]	; (5088 <_usb_d_dev_ep_read_req+0x5c>)
    5036:	18d0      	adds	r0, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
    5038:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    503a:	6840      	ldr	r0, [r0, #4]
    503c:	f3c0 000d 	ubfx	r0, r0, #0, #14

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    5040:	2c02      	cmp	r4, #2
    5042:	d817      	bhi.n	5074 <_usb_d_dev_ep_read_req+0x48>
    5044:	b1c9      	cbz	r1, 507a <_usb_d_dev_ep_read_req+0x4e>
    5046:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    504a:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
    504e:	b2d2      	uxtb	r2, r2
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    5050:	2a11      	cmp	r2, #17
    5052:	d115      	bne.n	5080 <_usb_d_dev_ep_read_req+0x54>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    5054:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    5058:	f012 0f10 	tst.w	r2, #16
    505c:	d102      	bne.n	5064 <_usb_d_dev_ep_read_req+0x38>
		return ERR_NONE;
    505e:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    5060:	bc30      	pop	{r4, r5}
    5062:	4770      	bx	lr
	memcpy(req_buf, (void *)addr, 8);
    5064:	682c      	ldr	r4, [r5, #0]
    5066:	686a      	ldr	r2, [r5, #4]
    5068:	600c      	str	r4, [r1, #0]
    506a:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    506c:	2210      	movs	r2, #16
    506e:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	return bytes;
    5072:	e7f5      	b.n	5060 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_PARAM;
    5074:	f06f 0011 	mvn.w	r0, #17
    5078:	e7f2      	b.n	5060 <_usb_d_dev_ep_read_req+0x34>
    507a:	f06f 0011 	mvn.w	r0, #17
    507e:	e7ef      	b.n	5060 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_FUNC;
    5080:	f06f 0012 	mvn.w	r0, #18
    5084:	e7ec      	b.n	5060 <_usb_d_dev_ep_read_req+0x34>
    5086:	bf00      	nop
    5088:	20007054 	.word	0x20007054

0000508c <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    508c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5090:	b083      	sub	sp, #12
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    5092:	7a03      	ldrb	r3, [r0, #8]
    5094:	b25e      	sxtb	r6, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    5096:	f013 030f 	ands.w	r3, r3, #15
    509a:	f000 80c2 	beq.w	5222 <_usb_d_dev_ep_trans+0x196>
    509e:	2e00      	cmp	r6, #0
    50a0:	bfb4      	ite	lt
    50a2:	1c9a      	addlt	r2, r3, #2
    50a4:	461a      	movge	r2, r3
	return &dev_inst.ep[ep_index];
    50a6:	4614      	mov	r4, r2
    50a8:	4969      	ldr	r1, [pc, #420]	; (5250 <_usb_d_dev_ep_trans+0x1c4>)
    50aa:	f101 0760 	add.w	r7, r1, #96	; 0x60
    50ae:	1c55      	adds	r5, r2, #1
    50b0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    50b4:	eb07 0785 	add.w	r7, r7, r5, lsl #2
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    50b8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    50bc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    50c0:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
    50c4:	f240 31ff 	movw	r1, #1023	; 0x3ff
    50c8:	428a      	cmp	r2, r1
    50ca:	d025      	beq.n	5118 <_usb_d_dev_ep_trans+0x8c>
    50cc:	1e55      	subs	r5, r2, #1
    50ce:	b2ad      	uxth	r5, r5
	bool     size_n_aligned = (trans->size & size_mask);
    50d0:	6841      	ldr	r1, [r0, #4]
    50d2:	400d      	ands	r5, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    50d4:	2b02      	cmp	r3, #2
    50d6:	f200 8092 	bhi.w	51fe <_usb_d_dev_ep_trans+0x172>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    50da:	6803      	ldr	r3, [r0, #0]
    50dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    50e0:	d31c      	bcc.n	511c <_usb_d_dev_ep_trans+0x90>
    50e2:	eb03 0c01 	add.w	ip, r3, r1
    50e6:	f8df e180 	ldr.w	lr, [pc, #384]	; 5268 <_usb_d_dev_ep_trans+0x1dc>
    50ea:	45f4      	cmp	ip, lr
    50ec:	d816      	bhi.n	511c <_usb_d_dev_ep_trans+0x90>
    50ee:	f013 0f03 	tst.w	r3, #3
    50f2:	d113      	bne.n	511c <_usb_d_dev_ep_trans+0x90>
	    || (!dir && (trans->size < ept->size))) {
    50f4:	2e00      	cmp	r6, #0
    50f6:	db2a      	blt.n	514e <_usb_d_dev_ep_trans+0xc2>
    50f8:	428a      	cmp	r2, r1
    50fa:	f200 809c 	bhi.w	5236 <_usb_d_dev_ep_trans+0x1aa>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    50fe:	b34d      	cbz	r5, 5154 <_usb_d_dev_ep_trans+0xc8>
		if (!ept->cache) {
    5100:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    5104:	4a52      	ldr	r2, [pc, #328]	; (5250 <_usb_d_dev_ep_trans+0x1c4>)
    5106:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    510a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    510e:	2b00      	cmp	r3, #0
    5110:	d07b      	beq.n	520a <_usb_d_dev_ep_trans+0x17e>
	bool use_cache = false;
    5112:	f04f 0800 	mov.w	r8, #0
    5116:	e00c      	b.n	5132 <_usb_d_dev_ep_trans+0xa6>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    5118:	4615      	mov	r5, r2
    511a:	e7d9      	b.n	50d0 <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    511c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    5120:	4a4b      	ldr	r2, [pc, #300]	; (5250 <_usb_d_dev_ep_trans+0x1c4>)
    5122:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    5126:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    512a:	2b00      	cmp	r3, #0
    512c:	d06a      	beq.n	5204 <_usb_d_dev_ep_trans+0x178>
		use_cache = true;
    512e:	f04f 0801 	mov.w	r8, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    5132:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    5136:	4a46      	ldr	r2, [pc, #280]	; (5250 <_usb_d_dev_ep_trans+0x1c4>)
    5138:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    513c:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    5140:	f013 0f08 	tst.w	r3, #8
    5144:	d009      	beq.n	515a <_usb_d_dev_ep_trans+0xce>
		return USB_HALTED;
    5146:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    5148:	b003      	add	sp, #12
    514a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool use_cache = false;
    514e:	f04f 0800 	mov.w	r8, #0
    5152:	e7ee      	b.n	5132 <_usb_d_dev_ep_trans+0xa6>
    5154:	f04f 0800 	mov.w	r8, #0
    5158:	e7eb      	b.n	5132 <_usb_d_dev_ep_trans+0xa6>
    515a:	4682      	mov	sl, r0
	atomic_enter_critical(&flags);
    515c:	a801      	add	r0, sp, #4
    515e:	4b3d      	ldr	r3, [pc, #244]	; (5254 <_usb_d_dev_ep_trans+0x1c8>)
    5160:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    5162:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    5166:	4a3a      	ldr	r2, [pc, #232]	; (5250 <_usb_d_dev_ep_trans+0x1c4>)
    5168:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    516c:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    5170:	f013 0f40 	tst.w	r3, #64	; 0x40
    5174:	d13c      	bne.n	51f0 <_usb_d_dev_ep_trans+0x164>
	ept->flags.bits.is_busy = 1;
    5176:	eb04 0984 	add.w	r9, r4, r4, lsl #2
    517a:	4b35      	ldr	r3, [pc, #212]	; (5250 <_usb_d_dev_ep_trans+0x1c4>)
    517c:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    5180:	f899 3087 	ldrb.w	r3, [r9, #135]	; 0x87
    5184:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5188:	f889 3087 	strb.w	r3, [r9, #135]	; 0x87
	atomic_leave_critical(&flags);
    518c:	a801      	add	r0, sp, #4
    518e:	4b32      	ldr	r3, [pc, #200]	; (5258 <_usb_d_dev_ep_trans+0x1cc>)
    5190:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    5192:	f8da 3000 	ldr.w	r3, [sl]
    5196:	f8c9 3074 	str.w	r3, [r9, #116]	; 0x74
	ept->trans_size  = trans->size;
    519a:	f8da 3004 	ldr.w	r3, [sl, #4]
    519e:	f8c9 3078 	str.w	r3, [r9, #120]	; 0x78
	ept->trans_count = 0;
    51a2:	2300      	movs	r3, #0
    51a4:	f8c9 307c 	str.w	r3, [r9, #124]	; 0x7c
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    51a8:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    51aa:	f899 3087 	ldrb.w	r3, [r9, #135]	; 0x87
    51ae:	f362 13c7 	bfi	r3, r2, #7, #1
	ept->flags.bits.use_cache = use_cache;
    51b2:	f368 1345 	bfi	r3, r8, #5, #1
    51b6:	f889 3087 	strb.w	r3, [r9, #135]	; 0x87
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    51ba:	f89a 3009 	ldrb.w	r3, [sl, #9]
    51be:	b1e3      	cbz	r3, 51fa <_usb_d_dev_ep_trans+0x16e>
    51c0:	fab5 f585 	clz	r5, r5
    51c4:	096d      	lsrs	r5, r5, #5
    51c6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    51ca:	4b21      	ldr	r3, [pc, #132]	; (5250 <_usb_d_dev_ep_trans+0x1c4>)
    51cc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    51d0:	f894 3087 	ldrb.w	r3, [r4, #135]	; 0x87
    51d4:	f365 1304 	bfi	r3, r5, #4, #1
    51d8:	f884 3087 	strb.w	r3, [r4, #135]	; 0x87
	if (dir) {
    51dc:	2e00      	cmp	r6, #0
		_usb_d_dev_in_next(ept, false);
    51de:	f04f 0100 	mov.w	r1, #0
    51e2:	4638      	mov	r0, r7
    51e4:	bfb4      	ite	lt
    51e6:	4b1d      	ldrlt	r3, [pc, #116]	; (525c <_usb_d_dev_ep_trans+0x1d0>)
		_usb_d_dev_out_next(ept, false);
    51e8:	4b1d      	ldrge	r3, [pc, #116]	; (5260 <_usb_d_dev_ep_trans+0x1d4>)
    51ea:	4798      	blx	r3
	return ERR_NONE;
    51ec:	2000      	movs	r0, #0
    51ee:	e7ab      	b.n	5148 <_usb_d_dev_ep_trans+0xbc>
		atomic_leave_critical(&flags);
    51f0:	a801      	add	r0, sp, #4
    51f2:	4b19      	ldr	r3, [pc, #100]	; (5258 <_usb_d_dev_ep_trans+0x1cc>)
    51f4:	4798      	blx	r3
		return USB_BUSY;
    51f6:	2001      	movs	r0, #1
    51f8:	e7a6      	b.n	5148 <_usb_d_dev_ep_trans+0xbc>
    51fa:	2500      	movs	r5, #0
    51fc:	e7e3      	b.n	51c6 <_usb_d_dev_ep_trans+0x13a>
		return -USB_ERR_PARAM;
    51fe:	f06f 0011 	mvn.w	r0, #17
    5202:	e7a1      	b.n	5148 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    5204:	f06f 0012 	mvn.w	r0, #18
    5208:	e79e      	b.n	5148 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_PARAM;
    520a:	f06f 0011 	mvn.w	r0, #17
    520e:	e79b      	b.n	5148 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    5210:	f06f 0012 	mvn.w	r0, #18
    5214:	e798      	b.n	5148 <_usb_d_dev_ep_trans+0xbc>
	bool     size_n_aligned = (trans->size & size_mask);
    5216:	6841      	ldr	r1, [r0, #4]
    5218:	f3c1 0509 	ubfx	r5, r1, #0, #10
	return &dev_inst.ep[ep_index];
    521c:	4f11      	ldr	r7, [pc, #68]	; (5264 <_usb_d_dev_ep_trans+0x1d8>)
    521e:	2400      	movs	r4, #0
    5220:	e75b      	b.n	50da <_usb_d_dev_ep_trans+0x4e>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    5222:	4a0b      	ldr	r2, [pc, #44]	; (5250 <_usb_d_dev_ep_trans+0x1c4>)
    5224:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
    5228:	f240 31ff 	movw	r1, #1023	; 0x3ff
    522c:	428a      	cmp	r2, r1
    522e:	d0f2      	beq.n	5216 <_usb_d_dev_ep_trans+0x18a>
	return &dev_inst.ep[ep_index];
    5230:	4f0c      	ldr	r7, [pc, #48]	; (5264 <_usb_d_dev_ep_trans+0x1d8>)
    5232:	2400      	movs	r4, #0
    5234:	e74a      	b.n	50cc <_usb_d_dev_ep_trans+0x40>
		if (!ept->cache) {
    5236:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    523a:	4a05      	ldr	r2, [pc, #20]	; (5250 <_usb_d_dev_ep_trans+0x1c4>)
    523c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    5240:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    5244:	2b00      	cmp	r3, #0
    5246:	d0e3      	beq.n	5210 <_usb_d_dev_ep_trans+0x184>
    5248:	f04f 0801 	mov.w	r8, #1
    524c:	e771      	b.n	5132 <_usb_d_dev_ep_trans+0xa6>
    524e:	bf00      	nop
    5250:	20007054 	.word	0x20007054
    5254:	00001549 	.word	0x00001549
    5258:	00001557 	.word	0x00001557
    525c:	00004321 	.word	0x00004321
    5260:	000044a5 	.word	0x000044a5
    5264:	200070c8 	.word	0x200070c8
    5268:	20031fff 	.word	0x20031fff

0000526c <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    526c:	4b06      	ldr	r3, [pc, #24]	; (5288 <_usb_d_dev_register_callback+0x1c>)
    526e:	2900      	cmp	r1, #0
    5270:	bf08      	it	eq
    5272:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
    5274:	2801      	cmp	r0, #1
    5276:	d003      	beq.n	5280 <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    5278:	b908      	cbnz	r0, 527e <_usb_d_dev_register_callback+0x12>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    527a:	4b04      	ldr	r3, [pc, #16]	; (528c <_usb_d_dev_register_callback+0x20>)
    527c:	6619      	str	r1, [r3, #96]	; 0x60
    527e:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    5280:	4b02      	ldr	r3, [pc, #8]	; (528c <_usb_d_dev_register_callback+0x20>)
    5282:	6659      	str	r1, [r3, #100]	; 0x64
    5284:	4770      	bx	lr
    5286:	bf00      	nop
    5288:	00004099 	.word	0x00004099
    528c:	20007054 	.word	0x20007054

00005290 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    5290:	4b09      	ldr	r3, [pc, #36]	; (52b8 <_usb_d_dev_register_ep_callback+0x28>)
    5292:	2900      	cmp	r1, #0
    5294:	bf08      	it	eq
    5296:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
    5298:	4603      	mov	r3, r0
    529a:	b130      	cbz	r0, 52aa <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    529c:	2801      	cmp	r0, #1
    529e:	d007      	beq.n	52b0 <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    52a0:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    52a2:	bf04      	itt	eq
    52a4:	4b05      	ldreq	r3, [pc, #20]	; (52bc <_usb_d_dev_register_ep_callback+0x2c>)
    52a6:	6719      	streq	r1, [r3, #112]	; 0x70
    52a8:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    52aa:	4b04      	ldr	r3, [pc, #16]	; (52bc <_usb_d_dev_register_ep_callback+0x2c>)
    52ac:	6699      	str	r1, [r3, #104]	; 0x68
    52ae:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    52b0:	4b02      	ldr	r3, [pc, #8]	; (52bc <_usb_d_dev_register_ep_callback+0x2c>)
    52b2:	66d9      	str	r1, [r3, #108]	; 0x6c
    52b4:	4770      	bx	lr
    52b6:	bf00      	nop
    52b8:	00004099 	.word	0x00004099
    52bc:	20007054 	.word	0x20007054

000052c0 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    52c0:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    52c2:	4b01      	ldr	r3, [pc, #4]	; (52c8 <USB_0_Handler+0x8>)
    52c4:	4798      	blx	r3
    52c6:	bd08      	pop	{r3, pc}
    52c8:	00004695 	.word	0x00004695

000052cc <USB_1_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    52cc:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    52ce:	4b01      	ldr	r3, [pc, #4]	; (52d4 <USB_1_Handler+0x8>)
    52d0:	4798      	blx	r3
    52d2:	bd08      	pop	{r3, pc}
    52d4:	00004695 	.word	0x00004695

000052d8 <USB_2_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    52d8:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    52da:	4b01      	ldr	r3, [pc, #4]	; (52e0 <USB_2_Handler+0x8>)
    52dc:	4798      	blx	r3
    52de:	bd08      	pop	{r3, pc}
    52e0:	00004695 	.word	0x00004695

000052e4 <USB_3_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    52e4:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    52e6:	4b01      	ldr	r3, [pc, #4]	; (52ec <USB_3_Handler+0x8>)
    52e8:	4798      	blx	r3
    52ea:	bd08      	pop	{r3, pc}
    52ec:	00004695 	.word	0x00004695

000052f0 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    52f0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    52f2:	4604      	mov	r4, r0
    52f4:	b330      	cbz	r0, 5344 <_wdt_init+0x54>
    52f6:	6800      	ldr	r0, [r0, #0]
    52f8:	3000      	adds	r0, #0
    52fa:	bf18      	it	ne
    52fc:	2001      	movne	r0, #1
    52fe:	2250      	movs	r2, #80	; 0x50
    5300:	4914      	ldr	r1, [pc, #80]	; (5354 <_wdt_init+0x64>)
    5302:	4b15      	ldr	r3, [pc, #84]	; (5358 <_wdt_init+0x68>)
    5304:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    5306:	6823      	ldr	r3, [r4, #0]
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    5308:	689a      	ldr	r2, [r3, #8]
    530a:	f012 0f0e 	tst.w	r2, #14
    530e:	d1fb      	bne.n	5308 <_wdt_init+0x18>

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	tmp = ((Wdt *)hw)->CTRLA.reg;
    5310:	781a      	ldrb	r2, [r3, #0]
    5312:	09d2      	lsrs	r2, r2, #7
    5314:	d118      	bne.n	5348 <_wdt_init+0x58>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    5316:	689a      	ldr	r2, [r3, #8]
    5318:	f012 0f0e 	tst.w	r2, #14
    531c:	d1fb      	bne.n	5316 <_wdt_init+0x26>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    531e:	781a      	ldrb	r2, [r3, #0]
    5320:	f012 0f02 	tst.w	r2, #2
    5324:	d113      	bne.n	534e <_wdt_init+0x5e>

static inline void hri_wdt_write_CONFIG_WINDOW_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    5326:	785a      	ldrb	r2, [r3, #1]
	tmp &= ~WDT_CONFIG_WINDOW_Msk;
    5328:	f002 020f 	and.w	r2, r2, #15
	tmp |= WDT_CONFIG_WINDOW(data);
    532c:	f042 02b0 	orr.w	r2, r2, #176	; 0xb0
	((Wdt *)hw)->CONFIG.reg = tmp;
    5330:	705a      	strb	r2, [r3, #1]
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    5332:	6822      	ldr	r2, [r4, #0]
	tmp = ((Wdt *)hw)->CONFIG.reg;
    5334:	7853      	ldrb	r3, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    5336:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
    533a:	f043 030b 	orr.w	r3, r3, #11
	((Wdt *)hw)->CONFIG.reg = tmp;
    533e:	7053      	strb	r3, [r2, #1]
	}

	return ERR_NONE;
    5340:	2000      	movs	r0, #0
    5342:	bd10      	pop	{r4, pc}
    5344:	2000      	movs	r0, #0
    5346:	e7da      	b.n	52fe <_wdt_init+0xe>
		return ERR_DENIED;
    5348:	f06f 0010 	mvn.w	r0, #16
    534c:	bd10      	pop	{r4, pc}
    534e:	f06f 0010 	mvn.w	r0, #16
}
    5352:	bd10      	pop	{r4, pc}
    5354:	0000f22c 	.word	0x0000f22c
    5358:	0000272d 	.word	0x0000272d

0000535c <_wdt_set_timeout_period>:

/**
 * \brief set timeout period for WDT instance
 */
int32_t _wdt_set_timeout_period(struct wdt_dev *const dev, const uint32_t clk_rate, const uint16_t timeout_period)
{
    535c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    535e:	460e      	mov	r6, r1
    5360:	4614      	mov	r4, r2
	uint64_t            tmp;
	uint32_t            period_cycles;
	enum wdt_period_reg timeout_period_reg;
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    5362:	4605      	mov	r5, r0
    5364:	b390      	cbz	r0, 53cc <_wdt_set_timeout_period+0x70>
    5366:	6800      	ldr	r0, [r0, #0]
    5368:	3000      	adds	r0, #0
    536a:	bf18      	it	ne
    536c:	2001      	movne	r0, #1
    536e:	227a      	movs	r2, #122	; 0x7a
    5370:	4936      	ldr	r1, [pc, #216]	; (544c <_wdt_set_timeout_period+0xf0>)
    5372:	4b37      	ldr	r3, [pc, #220]	; (5450 <_wdt_set_timeout_period+0xf4>)
    5374:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    5376:	682b      	ldr	r3, [r5, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    5378:	6899      	ldr	r1, [r3, #8]
    537a:	f011 0f0e 	tst.w	r1, #14
    537e:	d1fb      	bne.n	5378 <_wdt_set_timeout_period+0x1c>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    5380:	781a      	ldrb	r2, [r3, #0]
    5382:	09d2      	lsrs	r2, r2, #7
    5384:	d158      	bne.n	5438 <_wdt_set_timeout_period+0xdc>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    5386:	6899      	ldr	r1, [r3, #8]
    5388:	f011 0f0e 	tst.w	r1, #14
    538c:	d1fb      	bne.n	5386 <_wdt_set_timeout_period+0x2a>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    538e:	781a      	ldrb	r2, [r3, #0]
    5390:	f012 0f02 	tst.w	r2, #2
    5394:	d153      	bne.n	543e <_wdt_set_timeout_period+0xe2>
		return ERR_DENIED;
	} else {
		/* calc the period cycles corresponding to timeout period */
		tmp = (uint64_t)timeout_period * clk_rate;
    5396:	fba4 6706 	umull	r6, r7, r4, r6

		/* check whether overflow*/
		if (tmp >> 32) {
    539a:	463c      	mov	r4, r7
    539c:	2500      	movs	r5, #0
    539e:	ea54 0205 	orrs.w	r2, r4, r5
    53a2:	d14f      	bne.n	5444 <_wdt_set_timeout_period+0xe8>
			return ERR_INVALID_ARG;
		}

		period_cycles = (uint32_t)tmp;
		/* calc the register value corresponding to period cysles */
		switch (period_cycles) {
    53a4:	f5b6 3f7a 	cmp.w	r6, #256000	; 0x3e800
    53a8:	d038      	beq.n	541c <_wdt_set_timeout_period+0xc0>
    53aa:	d911      	bls.n	53d0 <_wdt_set_timeout_period+0x74>
    53ac:	f5b6 1ffa 	cmp.w	r6, #2048000	; 0x1f4000
    53b0:	d038      	beq.n	5424 <_wdt_set_timeout_period+0xc8>
    53b2:	d927      	bls.n	5404 <_wdt_set_timeout_period+0xa8>
    53b4:	f5b6 0ffa 	cmp.w	r6, #8192000	; 0x7d0000
    53b8:	d038      	beq.n	542c <_wdt_set_timeout_period+0xd0>
    53ba:	f5b6 0f7a 	cmp.w	r6, #16384000	; 0xfa0000
    53be:	d037      	beq.n	5430 <_wdt_set_timeout_period+0xd4>
    53c0:	f5b6 1f7a 	cmp.w	r6, #4096000	; 0x3e8000
    53c4:	d030      	beq.n	5428 <_wdt_set_timeout_period+0xcc>
			break;
		case WDT_CLK_16384CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_16384CYCLE;
			break;
		default:
			return ERR_INVALID_ARG;
    53c6:	f06f 000c 	mvn.w	r0, #12
	}

	hri_wdt_write_CONFIG_PER_bf(dev->hw, (uint8_t)timeout_period_reg);

	return ERR_NONE;
}
    53ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    53cc:	2000      	movs	r0, #0
    53ce:	e7ce      	b.n	536e <_wdt_set_timeout_period+0x12>
		switch (period_cycles) {
    53d0:	f5b6 4ffa 	cmp.w	r6, #32000	; 0x7d00
    53d4:	d01e      	beq.n	5414 <_wdt_set_timeout_period+0xb8>
    53d6:	d80d      	bhi.n	53f4 <_wdt_set_timeout_period+0x98>
    53d8:	f5b6 5ffa 	cmp.w	r6, #8000	; 0x1f40
    53dc:	d02a      	beq.n	5434 <_wdt_set_timeout_period+0xd8>
    53de:	f5b6 5f7a 	cmp.w	r6, #16000	; 0x3e80
    53e2:	d1f0      	bne.n	53c6 <_wdt_set_timeout_period+0x6a>
			timeout_period_reg = WDT_PERIOD_16CYCLE;
    53e4:	2101      	movs	r1, #1
	tmp = ((Wdt *)hw)->CONFIG.reg;
    53e6:	785a      	ldrb	r2, [r3, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    53e8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
    53ec:	430a      	orrs	r2, r1
	((Wdt *)hw)->CONFIG.reg = tmp;
    53ee:	705a      	strb	r2, [r3, #1]
	return ERR_NONE;
    53f0:	2000      	movs	r0, #0
    53f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		switch (period_cycles) {
    53f4:	f5b6 4f7a 	cmp.w	r6, #64000	; 0xfa00
    53f8:	d00e      	beq.n	5418 <_wdt_set_timeout_period+0xbc>
    53fa:	f5b6 3ffa 	cmp.w	r6, #128000	; 0x1f400
    53fe:	d1e2      	bne.n	53c6 <_wdt_set_timeout_period+0x6a>
			timeout_period_reg = WDT_PERIOD_128CYCLE;
    5400:	2104      	movs	r1, #4
			break;
    5402:	e7f0      	b.n	53e6 <_wdt_set_timeout_period+0x8a>
		switch (period_cycles) {
    5404:	f5b6 2ffa 	cmp.w	r6, #512000	; 0x7d000
    5408:	d00a      	beq.n	5420 <_wdt_set_timeout_period+0xc4>
    540a:	f5b6 2f7a 	cmp.w	r6, #1024000	; 0xfa000
    540e:	d1da      	bne.n	53c6 <_wdt_set_timeout_period+0x6a>
			timeout_period_reg = WDT_PERIOD_1024CYCLE;
    5410:	2107      	movs	r1, #7
			break;
    5412:	e7e8      	b.n	53e6 <_wdt_set_timeout_period+0x8a>
			timeout_period_reg = WDT_PERIOD_32CYCLE;
    5414:	2102      	movs	r1, #2
			break;
    5416:	e7e6      	b.n	53e6 <_wdt_set_timeout_period+0x8a>
			timeout_period_reg = WDT_PERIOD_64CYCLE;
    5418:	2103      	movs	r1, #3
			break;
    541a:	e7e4      	b.n	53e6 <_wdt_set_timeout_period+0x8a>
			timeout_period_reg = WDT_PERIOD_256CYCLE;
    541c:	2105      	movs	r1, #5
			break;
    541e:	e7e2      	b.n	53e6 <_wdt_set_timeout_period+0x8a>
			timeout_period_reg = WDT_PERIOD_512CYCLE;
    5420:	2106      	movs	r1, #6
			break;
    5422:	e7e0      	b.n	53e6 <_wdt_set_timeout_period+0x8a>
			timeout_period_reg = WDT_PERIOD_2048CYCLE;
    5424:	2108      	movs	r1, #8
			break;
    5426:	e7de      	b.n	53e6 <_wdt_set_timeout_period+0x8a>
			timeout_period_reg = WDT_PERIOD_4096CYCLE;
    5428:	2109      	movs	r1, #9
			break;
    542a:	e7dc      	b.n	53e6 <_wdt_set_timeout_period+0x8a>
			timeout_period_reg = WDT_PERIOD_8192CYCLE;
    542c:	210a      	movs	r1, #10
			break;
    542e:	e7da      	b.n	53e6 <_wdt_set_timeout_period+0x8a>
			timeout_period_reg = WDT_PERIOD_16384CYCLE;
    5430:	210b      	movs	r1, #11
			break;
    5432:	e7d8      	b.n	53e6 <_wdt_set_timeout_period+0x8a>
			timeout_period_reg = WDT_PERIOD_8CYCLE;
    5434:	2100      	movs	r1, #0
    5436:	e7d6      	b.n	53e6 <_wdt_set_timeout_period+0x8a>
		return ERR_DENIED;
    5438:	f06f 0010 	mvn.w	r0, #16
    543c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    543e:	f06f 0010 	mvn.w	r0, #16
    5442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return ERR_INVALID_ARG;
    5444:	f06f 000c 	mvn.w	r0, #12
    5448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    544a:	bf00      	nop
    544c:	0000f22c 	.word	0x0000f22c
    5450:	0000272d 	.word	0x0000272d

00005454 <_wdt_enable>:

/**
 * \brief enbale watchdog timer
 */
int32_t _wdt_enable(struct wdt_dev *const dev)
{
    5454:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    5456:	4604      	mov	r4, r0
    5458:	b190      	cbz	r0, 5480 <_wdt_enable+0x2c>
    545a:	6800      	ldr	r0, [r0, #0]
    545c:	3000      	adds	r0, #0
    545e:	bf18      	it	ne
    5460:	2001      	movne	r0, #1
    5462:	22fb      	movs	r2, #251	; 0xfb
    5464:	4907      	ldr	r1, [pc, #28]	; (5484 <_wdt_enable+0x30>)
    5466:	4b08      	ldr	r3, [pc, #32]	; (5488 <_wdt_enable+0x34>)
    5468:	4798      	blx	r3

	hri_wdt_set_CTRLA_ENABLE_bit(dev->hw);
    546a:	6822      	ldr	r2, [r4, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    546c:	6893      	ldr	r3, [r2, #8]
    546e:	f013 0f0e 	tst.w	r3, #14
    5472:	d1fb      	bne.n	546c <_wdt_enable+0x18>
	((Wdt *)hw)->CTRLA.reg |= WDT_CTRLA_ENABLE;
    5474:	7813      	ldrb	r3, [r2, #0]
    5476:	f043 0302 	orr.w	r3, r3, #2
    547a:	7013      	strb	r3, [r2, #0]

	return ERR_NONE;
}
    547c:	2000      	movs	r0, #0
    547e:	bd10      	pop	{r4, pc}
    5480:	2000      	movs	r0, #0
    5482:	e7ee      	b.n	5462 <_wdt_enable+0xe>
    5484:	0000f22c 	.word	0x0000f22c
    5488:	0000272d 	.word	0x0000272d

0000548c <_wdt_disable>:

/**
 * \brief disable watchdog timer
 */
int32_t _wdt_disable(struct wdt_dev *const dev)
{
    548c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    548e:	4604      	mov	r4, r0
    5490:	b1d0      	cbz	r0, 54c8 <_wdt_disable+0x3c>
    5492:	6800      	ldr	r0, [r0, #0]
    5494:	3000      	adds	r0, #0
    5496:	bf18      	it	ne
    5498:	2001      	movne	r0, #1
    549a:	f44f 7284 	mov.w	r2, #264	; 0x108
    549e:	490d      	ldr	r1, [pc, #52]	; (54d4 <_wdt_disable+0x48>)
    54a0:	4b0d      	ldr	r3, [pc, #52]	; (54d8 <_wdt_disable+0x4c>)
    54a2:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw)) {
    54a4:	6823      	ldr	r3, [r4, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    54a6:	689a      	ldr	r2, [r3, #8]
    54a8:	f012 0f0e 	tst.w	r2, #14
    54ac:	d1fb      	bne.n	54a6 <_wdt_disable+0x1a>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    54ae:	781a      	ldrb	r2, [r3, #0]
    54b0:	09d2      	lsrs	r2, r2, #7
    54b2:	d10b      	bne.n	54cc <_wdt_disable+0x40>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    54b4:	689a      	ldr	r2, [r3, #8]
    54b6:	f012 0f0e 	tst.w	r2, #14
    54ba:	d1fb      	bne.n	54b4 <_wdt_disable+0x28>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_ENABLE;
    54bc:	781a      	ldrb	r2, [r3, #0]
    54be:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
    54c2:	701a      	strb	r2, [r3, #0]
		return ERR_DENIED;
	} else {
		hri_wdt_clear_CTRLA_ENABLE_bit(dev->hw);
	}

	return ERR_NONE;
    54c4:	2000      	movs	r0, #0
    54c6:	bd10      	pop	{r4, pc}
    54c8:	2000      	movs	r0, #0
    54ca:	e7e6      	b.n	549a <_wdt_disable+0xe>
		return ERR_DENIED;
    54cc:	f06f 0010 	mvn.w	r0, #16
}
    54d0:	bd10      	pop	{r4, pc}
    54d2:	bf00      	nop
    54d4:	0000f22c 	.word	0x0000f22c
    54d8:	0000272d 	.word	0x0000272d

000054dc <_wdt_feed>:

/**
 * \brief reset watchdog timer to make wdt work from start
 */
int32_t _wdt_feed(struct wdt_dev *const dev)
{
    54dc:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    54de:	4604      	mov	r4, r0
    54e0:	b168      	cbz	r0, 54fe <_wdt_feed+0x22>
    54e2:	6800      	ldr	r0, [r0, #0]
    54e4:	3000      	adds	r0, #0
    54e6:	bf18      	it	ne
    54e8:	2001      	movne	r0, #1
    54ea:	f240 1219 	movw	r2, #281	; 0x119
    54ee:	4905      	ldr	r1, [pc, #20]	; (5504 <_wdt_feed+0x28>)
    54f0:	4b05      	ldr	r3, [pc, #20]	; (5508 <_wdt_feed+0x2c>)
    54f2:	4798      	blx	r3

	hri_wdt_write_CLEAR_reg(dev->hw, WDT_CLEAR_CLEAR_KEY);
    54f4:	6823      	ldr	r3, [r4, #0]
	((Wdt *)hw)->CLEAR.reg = data;
    54f6:	22a5      	movs	r2, #165	; 0xa5
    54f8:	731a      	strb	r2, [r3, #12]

	return ERR_NONE;
}
    54fa:	2000      	movs	r0, #0
    54fc:	bd10      	pop	{r4, pc}
    54fe:	2000      	movs	r0, #0
    5500:	e7f3      	b.n	54ea <_wdt_feed+0xe>
    5502:	bf00      	nop
    5504:	0000f22c 	.word	0x0000f22c
    5508:	0000272d 	.word	0x0000272d

0000550c <I2C_configMONITOREDINPUTS>:
// * CALLED BY:			  main()                                                                                                       *
// * CALLS:		          No function. ALL macros defined in this function file.                                                       *
// * --------------------------------------------------------------------------------------------------------------------------------- *
int I2C_configMONITOREDINPUTS(uint8_t sda,  uint8_t clk, unsigned char channel)

{
    550c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5510:	b08d      	sub	sp, #52	; 0x34
	uint8_t     		i2csda, i2cclk;
	unsigned char		forloop;

	/* Clip channel for correct assignment */
    channel &= 0x03;
    5512:	f002 0303 	and.w	r3, r2, #3
    5516:	9309      	str	r3, [sp, #36]	; 0x24
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    5518:	f001 041f 	and.w	r4, r1, #31
    551c:	2301      	movs	r3, #1
    551e:	fa03 f404 	lsl.w	r4, r3, r4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5522:	094a      	lsrs	r2, r1, #5
    5524:	4da3      	ldr	r5, [pc, #652]	; (57b4 <I2C_configMONITOREDINPUTS+0x2a8>)
    5526:	9202      	str	r2, [sp, #8]
    5528:	eb05 17c2 	add.w	r7, r5, r2, lsl #7
    552c:	61bc      	str	r4, [r7, #24]
    552e:	0942      	lsrs	r2, r0, #5
    5530:	9203      	str	r2, [sp, #12]
    5532:	f000 001f 	and.w	r0, r0, #31
    5536:	fa03 fa00 	lsl.w	sl, r3, r0
    553a:	9201      	str	r2, [sp, #4]
    553c:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    5540:	f8c5 a018 	str.w	sl, [r5, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    5544:	f8c5 a008 	str.w	sl, [r5, #8]
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    5548:	fa1f f38a 	uxth.w	r3, sl
    554c:	9307      	str	r3, [sp, #28]
    554e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    5552:	9305      	str	r3, [sp, #20]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    5554:	62ab      	str	r3, [r5, #40]	; 0x28
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    5556:	ea4f 431a 	mov.w	r3, sl, lsr #16
    555a:	9308      	str	r3, [sp, #32]
		hri_port_write_WRCONFIG_reg(
    555c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    5560:	9306      	str	r3, [sp, #24]
    5562:	62ab      	str	r3, [r5, #40]	; 0x28

	/* Open an I2C channel, send address 0x68, then send the configuration values for setting up a conversion result */
	I2C_OPEN(sda, clk);
	I2C_START(-1);
    5564:	2005      	movs	r0, #5
    5566:	4e94      	ldr	r6, [pc, #592]	; (57b8 <I2C_configMONITOREDINPUTS+0x2ac>)
    5568:	47b0      	blx	r6
    556a:	2005      	movs	r0, #5
    556c:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    556e:	f8c5 a014 	str.w	sl, [r5, #20]
    5572:	2005      	movs	r0, #5
    5574:	47b0      	blx	r6
    5576:	617c      	str	r4, [r7, #20]
    5578:	2005      	movs	r0, #5
    557a:	47b0      	blx	r6
    557c:	2707      	movs	r7, #7
	I2C_SENDADDR(0x68, forloop);
    557e:	2640      	movs	r6, #64	; 0x40
    5580:	f8df 9230 	ldr.w	r9, [pc, #560]	; 57b4 <I2C_configMONITOREDINPUTS+0x2a8>
    5584:	9a01      	ldr	r2, [sp, #4]
    5586:	eb09 1bc2 	add.w	fp, r9, r2, lsl #7
    558a:	4d8b      	ldr	r5, [pc, #556]	; (57b8 <I2C_configMONITOREDINPUTS+0x2ac>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    558c:	9902      	ldr	r1, [sp, #8]
    558e:	fa01 f307 	lsl.w	r3, r1, r7
    5592:	9300      	str	r3, [sp, #0]
    5594:	f016 0f68 	tst.w	r6, #104	; 0x68
    5598:	bf14      	ite	ne
    559a:	f8cb a018 	strne.w	sl, [fp, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    559e:	f8cb a014 	streq.w	sl, [fp, #20]
    55a2:	2005      	movs	r0, #5
    55a4:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    55a6:	9b00      	ldr	r3, [sp, #0]
    55a8:	eb09 0803 	add.w	r8, r9, r3
    55ac:	f8c8 4018 	str.w	r4, [r8, #24]
    55b0:	2005      	movs	r0, #5
    55b2:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    55b4:	f8c8 4014 	str.w	r4, [r8, #20]
    55b8:	2005      	movs	r0, #5
    55ba:	47a8      	blx	r5
    55bc:	0876      	lsrs	r6, r6, #1
    55be:	3f01      	subs	r7, #1
    55c0:	d1e8      	bne.n	5594 <I2C_configMONITOREDINPUTS+0x88>
    55c2:	4d7c      	ldr	r5, [pc, #496]	; (57b4 <I2C_configMONITOREDINPUTS+0x2a8>)
    55c4:	9b03      	ldr	r3, [sp, #12]
    55c6:	eb05 16c3 	add.w	r6, r5, r3, lsl #7
    55ca:	f8c6 a014 	str.w	sl, [r6, #20]
	I2C_WRITE();
    55ce:	2005      	movs	r0, #5
    55d0:	4f79      	ldr	r7, [pc, #484]	; (57b8 <I2C_configMONITOREDINPUTS+0x2ac>)
    55d2:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    55d4:	9a02      	ldr	r2, [sp, #8]
    55d6:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    55da:	61ac      	str	r4, [r5, #24]
    55dc:	2005      	movs	r0, #5
    55de:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    55e0:	616c      	str	r4, [r5, #20]
    55e2:	2005      	movs	r0, #5
    55e4:	47b8      	blx	r7
    55e6:	9b03      	ldr	r3, [sp, #12]
    55e8:	01db      	lsls	r3, r3, #7
    55ea:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    55ee:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    55f2:	9304      	str	r3, [sp, #16]
    55f4:	f8c3 a004 	str.w	sl, [r3, #4]
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    55f8:	9907      	ldr	r1, [sp, #28]
    55fa:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    55fe:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
    5602:	9107      	str	r1, [sp, #28]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    5604:	62b1      	str	r1, [r6, #40]	; 0x28
		hri_port_write_WRCONFIG_reg(PORT,
    5606:	9908      	ldr	r1, [sp, #32]
    5608:	f041 4140 	orr.w	r1, r1, #3221225472	; 0xc0000000
    560c:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
    5610:	9108      	str	r1, [sp, #32]
    5612:	62b1      	str	r1, [r6, #40]	; 0x28
	I2C_WAITACKOP(-2);
    5614:	2005      	movs	r0, #5
    5616:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5618:	61ac      	str	r4, [r5, #24]
    561a:	2005      	movs	r0, #5
    561c:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    561e:	a80a      	add	r0, sp, #40	; 0x28
    5620:	4b66      	ldr	r3, [pc, #408]	; (57bc <I2C_configMONITOREDINPUTS+0x2b0>)
    5622:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    5624:	9a04      	ldr	r2, [sp, #16]
    5626:	6812      	ldr	r2, [r2, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    5628:	6a33      	ldr	r3, [r6, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    562a:	6935      	ldr	r5, [r6, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    562c:	405d      	eors	r5, r3
    562e:	4015      	ands	r5, r2
    5630:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    5632:	a80a      	add	r0, sp, #40	; 0x28
    5634:	4b62      	ldr	r3, [pc, #392]	; (57c0 <I2C_configMONITOREDINPUTS+0x2b4>)
    5636:	4798      	blx	r3
    5638:	ea1a 0f05 	tst.w	sl, r5
    563c:	f040 8087 	bne.w	574e <I2C_configMONITOREDINPUTS+0x242>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5640:	4d5c      	ldr	r5, [pc, #368]	; (57b4 <I2C_configMONITOREDINPUTS+0x2a8>)
    5642:	9b02      	ldr	r3, [sp, #8]
    5644:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    5648:	615c      	str	r4, [r3, #20]
    564a:	2005      	movs	r0, #5
    564c:	4e5a      	ldr	r6, [pc, #360]	; (57b8 <I2C_configMONITOREDINPUTS+0x2ac>)
    564e:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    5650:	9a03      	ldr	r2, [sp, #12]
    5652:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    5656:	f8c5 a008 	str.w	sl, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    565a:	9a05      	ldr	r2, [sp, #20]
    565c:	62aa      	str	r2, [r5, #40]	; 0x28
    565e:	9a06      	ldr	r2, [sp, #24]
    5660:	62aa      	str	r2, [r5, #40]	; 0x28
    5662:	2005      	movs	r0, #5
    5664:	47b0      	blx	r6
	I2C_SENDDATA(((channel << 5) + 0x80), forloop);
    5666:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5668:	0153      	lsls	r3, r2, #5
    566a:	f103 0280 	add.w	r2, r3, #128	; 0x80
    566e:	9200      	str	r2, [sp, #0]
    5670:	2508      	movs	r5, #8
    5672:	2780      	movs	r7, #128	; 0x80
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5674:	f8df b13c 	ldr.w	fp, [pc, #316]	; 57b4 <I2C_configMONITOREDINPUTS+0x2a8>
    5678:	9a01      	ldr	r2, [sp, #4]
    567a:	eb0b 12c2 	add.w	r2, fp, r2, lsl #7
    567e:	9201      	str	r2, [sp, #4]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5680:	9b02      	ldr	r3, [sp, #8]
    5682:	ea4f 19c3 	mov.w	r9, r3, lsl #7
    5686:	46d0      	mov	r8, sl
    5688:	46a2      	mov	sl, r4
    568a:	9b00      	ldr	r3, [sp, #0]
    568c:	421f      	tst	r7, r3
    568e:	9b01      	ldr	r3, [sp, #4]
    5690:	bf14      	ite	ne
    5692:	f8c3 8018 	strne.w	r8, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5696:	f8c3 8014 	streq.w	r8, [r3, #20]
    569a:	2005      	movs	r0, #5
    569c:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    569e:	eb0b 0409 	add.w	r4, fp, r9
    56a2:	f8c4 a018 	str.w	sl, [r4, #24]
    56a6:	2005      	movs	r0, #5
    56a8:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    56aa:	f8c4 a014 	str.w	sl, [r4, #20]
    56ae:	2005      	movs	r0, #5
    56b0:	47b0      	blx	r6
    56b2:	087f      	lsrs	r7, r7, #1
    56b4:	3d01      	subs	r5, #1
    56b6:	d1e8      	bne.n	568a <I2C_configMONITOREDINPUTS+0x17e>
    56b8:	4654      	mov	r4, sl
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    56ba:	9b04      	ldr	r3, [sp, #16]
    56bc:	f8c3 8004 	str.w	r8, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    56c0:	4e3c      	ldr	r6, [pc, #240]	; (57b4 <I2C_configMONITOREDINPUTS+0x2a8>)
    56c2:	9a03      	ldr	r2, [sp, #12]
    56c4:	eb06 15c2 	add.w	r5, r6, r2, lsl #7
    56c8:	9a07      	ldr	r2, [sp, #28]
    56ca:	62aa      	str	r2, [r5, #40]	; 0x28
    56cc:	9a08      	ldr	r2, [sp, #32]
    56ce:	62aa      	str	r2, [r5, #40]	; 0x28
	I2C_WAITACKOP(-3);
    56d0:	2005      	movs	r0, #5
    56d2:	4f39      	ldr	r7, [pc, #228]	; (57b8 <I2C_configMONITOREDINPUTS+0x2ac>)
    56d4:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    56d6:	9a02      	ldr	r2, [sp, #8]
    56d8:	eb06 16c2 	add.w	r6, r6, r2, lsl #7
    56dc:	61b4      	str	r4, [r6, #24]
    56de:	2005      	movs	r0, #5
    56e0:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    56e2:	a80b      	add	r0, sp, #44	; 0x2c
    56e4:	4b35      	ldr	r3, [pc, #212]	; (57bc <I2C_configMONITOREDINPUTS+0x2b0>)
    56e6:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    56e8:	9b04      	ldr	r3, [sp, #16]
    56ea:	681a      	ldr	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    56ec:	6a2b      	ldr	r3, [r5, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    56ee:	692d      	ldr	r5, [r5, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    56f0:	405d      	eors	r5, r3
    56f2:	4015      	ands	r5, r2
    56f4:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    56f6:	a80b      	add	r0, sp, #44	; 0x2c
    56f8:	4b31      	ldr	r3, [pc, #196]	; (57c0 <I2C_configMONITOREDINPUTS+0x2b4>)
    56fa:	4798      	blx	r3
    56fc:	ea18 0f05 	tst.w	r8, r5
    5700:	d13e      	bne.n	5780 <I2C_configMONITOREDINPUTS+0x274>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5702:	4d2c      	ldr	r5, [pc, #176]	; (57b4 <I2C_configMONITOREDINPUTS+0x2a8>)
    5704:	9b02      	ldr	r3, [sp, #8]
    5706:	eb05 17c3 	add.w	r7, r5, r3, lsl #7
    570a:	617c      	str	r4, [r7, #20]
    570c:	2005      	movs	r0, #5
    570e:	4e2a      	ldr	r6, [pc, #168]	; (57b8 <I2C_configMONITOREDINPUTS+0x2ac>)
    5710:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    5712:	9b03      	ldr	r3, [sp, #12]
    5714:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    5718:	f8c5 8008 	str.w	r8, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    571c:	9b05      	ldr	r3, [sp, #20]
    571e:	62ab      	str	r3, [r5, #40]	; 0x28
    5720:	9a06      	ldr	r2, [sp, #24]
    5722:	62aa      	str	r2, [r5, #40]	; 0x28
    5724:	2005      	movs	r0, #5
    5726:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5728:	61bc      	str	r4, [r7, #24]
	
	/* If successful, and code execution got here, the close the I2C channel */
	I2C_STOP();
    572a:	2005      	movs	r0, #5
    572c:	47b0      	blx	r6
    572e:	f8c5 8018 	str.w	r8, [r5, #24]
    5732:	2005      	movs	r0, #5
    5734:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    5736:	f8c5 8008 	str.w	r8, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    573a:	9b05      	ldr	r3, [sp, #20]
    573c:	62ab      	str	r3, [r5, #40]	; 0x28
    573e:	9a06      	ldr	r2, [sp, #24]
    5740:	62aa      	str	r2, [r5, #40]	; 0x28
    5742:	2005      	movs	r0, #5
    5744:	47b0      	blx	r6
	I2C_CLOSE();
	
	return 0;
    5746:	2000      	movs	r0, #0
}
    5748:	b00d      	add	sp, #52	; 0x34
    574a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    574e:	4d19      	ldr	r5, [pc, #100]	; (57b4 <I2C_configMONITOREDINPUTS+0x2a8>)
    5750:	9b02      	ldr	r3, [sp, #8]
    5752:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    5756:	619c      	str	r4, [r3, #24]
	I2C_WAITACKOP(-2);
    5758:	2005      	movs	r0, #5
    575a:	47b8      	blx	r7
    575c:	9b03      	ldr	r3, [sp, #12]
    575e:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    5762:	f8c5 a018 	str.w	sl, [r5, #24]
    5766:	2005      	movs	r0, #5
    5768:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    576a:	f8c5 a008 	str.w	sl, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    576e:	9b05      	ldr	r3, [sp, #20]
    5770:	62ab      	str	r3, [r5, #40]	; 0x28
    5772:	9b06      	ldr	r3, [sp, #24]
    5774:	62ab      	str	r3, [r5, #40]	; 0x28
    5776:	2005      	movs	r0, #5
    5778:	47b8      	blx	r7
    577a:	f06f 0001 	mvn.w	r0, #1
    577e:	e7e3      	b.n	5748 <I2C_configMONITOREDINPUTS+0x23c>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5780:	4d0c      	ldr	r5, [pc, #48]	; (57b4 <I2C_configMONITOREDINPUTS+0x2a8>)
    5782:	9b02      	ldr	r3, [sp, #8]
    5784:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    5788:	619c      	str	r4, [r3, #24]
	I2C_WAITACKOP(-3);
    578a:	2005      	movs	r0, #5
    578c:	47b8      	blx	r7
    578e:	9b03      	ldr	r3, [sp, #12]
    5790:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    5794:	f8c5 8018 	str.w	r8, [r5, #24]
    5798:	2005      	movs	r0, #5
    579a:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    579c:	f8c5 8008 	str.w	r8, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    57a0:	9b05      	ldr	r3, [sp, #20]
    57a2:	62ab      	str	r3, [r5, #40]	; 0x28
    57a4:	9b06      	ldr	r3, [sp, #24]
    57a6:	62ab      	str	r3, [r5, #40]	; 0x28
    57a8:	2005      	movs	r0, #5
    57aa:	47b8      	blx	r7
    57ac:	f06f 0002 	mvn.w	r0, #2
    57b0:	e7ca      	b.n	5748 <I2C_configMONITOREDINPUTS+0x23c>
    57b2:	bf00      	nop
    57b4:	41008000 	.word	0x41008000
    57b8:	000015a9 	.word	0x000015a9
    57bc:	00001549 	.word	0x00001549
    57c0:	00001557 	.word	0x00001557

000057c4 <I2C_readMONITOREDINPUT>:

{
	uint8_t     		i2csda, i2cclk;
	unsigned char		forloop;

	if ((!inputL) || (!inputH)) {
    57c4:	2b00      	cmp	r3, #0
    57c6:	f000 817c 	beq.w	5ac2 <I2C_readMONITOREDINPUT+0x2fe>
{
    57ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    57ce:	b08f      	sub	sp, #60	; 0x3c
	if ((!inputL) || (!inputH)) {
    57d0:	2a00      	cmp	r2, #0
    57d2:	f000 8179 	beq.w	5ac8 <I2C_readMONITOREDINPUT+0x304>
    57d6:	9304      	str	r3, [sp, #16]
    57d8:	9203      	str	r2, [sp, #12]
    57da:	f001 041f 	and.w	r4, r1, #31
    57de:	2301      	movs	r3, #1
    57e0:	fa03 f404 	lsl.w	r4, r3, r4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    57e4:	094a      	lsrs	r2, r1, #5
    57e6:	4d98      	ldr	r5, [pc, #608]	; (5a48 <I2C_readMONITOREDINPUT+0x284>)
    57e8:	9202      	str	r2, [sp, #8]
    57ea:	eb05 17c2 	add.w	r7, r5, r2, lsl #7
    57ee:	61bc      	str	r4, [r7, #24]
    57f0:	0942      	lsrs	r2, r0, #5
    57f2:	9205      	str	r2, [sp, #20]
    57f4:	f000 001f 	and.w	r0, r0, #31
    57f8:	fa03 fa00 	lsl.w	sl, r3, r0
    57fc:	9200      	str	r2, [sp, #0]
    57fe:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    5802:	f8c5 a018 	str.w	sl, [r5, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    5806:	f8c5 a008 	str.w	sl, [r5, #8]
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    580a:	fa1f f38a 	uxth.w	r3, sl
    580e:	9308      	str	r3, [sp, #32]
    5810:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    5814:	9306      	str	r3, [sp, #24]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    5816:	62ab      	str	r3, [r5, #40]	; 0x28
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    5818:	ea4f 431a 	mov.w	r3, sl, lsr #16
    581c:	9309      	str	r3, [sp, #36]	; 0x24
		hri_port_write_WRCONFIG_reg(
    581e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    5822:	9307      	str	r3, [sp, #28]
    5824:	62ab      	str	r3, [r5, #40]	; 0x28
		return -1;
	}

	/* Open an I2C channel, send address 0x68, then read the input value */
	I2C_OPEN(sda, clk);
	I2C_START(-2);
    5826:	2005      	movs	r0, #5
    5828:	4e88      	ldr	r6, [pc, #544]	; (5a4c <I2C_readMONITOREDINPUT+0x288>)
    582a:	47b0      	blx	r6
    582c:	2005      	movs	r0, #5
    582e:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5830:	f8c5 a014 	str.w	sl, [r5, #20]
    5834:	2005      	movs	r0, #5
    5836:	47b0      	blx	r6
    5838:	617c      	str	r4, [r7, #20]
    583a:	2005      	movs	r0, #5
    583c:	47b0      	blx	r6
    583e:	2707      	movs	r7, #7
	I2C_SENDADDR(0x68, forloop);
    5840:	2640      	movs	r6, #64	; 0x40
    5842:	f8df 9204 	ldr.w	r9, [pc, #516]	; 5a48 <I2C_readMONITOREDINPUT+0x284>
    5846:	9a00      	ldr	r2, [sp, #0]
    5848:	eb09 1bc2 	add.w	fp, r9, r2, lsl #7
    584c:	4d7f      	ldr	r5, [pc, #508]	; (5a4c <I2C_readMONITOREDINPUT+0x288>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    584e:	9902      	ldr	r1, [sp, #8]
    5850:	fa01 f307 	lsl.w	r3, r1, r7
    5854:	9301      	str	r3, [sp, #4]
    5856:	f016 0f68 	tst.w	r6, #104	; 0x68
    585a:	bf14      	ite	ne
    585c:	f8cb a018 	strne.w	sl, [fp, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5860:	f8cb a014 	streq.w	sl, [fp, #20]
    5864:	2005      	movs	r0, #5
    5866:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5868:	9b01      	ldr	r3, [sp, #4]
    586a:	eb09 0803 	add.w	r8, r9, r3
    586e:	f8c8 4018 	str.w	r4, [r8, #24]
    5872:	2005      	movs	r0, #5
    5874:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5876:	f8c8 4014 	str.w	r4, [r8, #20]
    587a:	2005      	movs	r0, #5
    587c:	47a8      	blx	r5
    587e:	0876      	lsrs	r6, r6, #1
    5880:	3f01      	subs	r7, #1
    5882:	d1e8      	bne.n	5856 <I2C_readMONITOREDINPUT+0x92>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5884:	4d70      	ldr	r5, [pc, #448]	; (5a48 <I2C_readMONITOREDINPUT+0x284>)
    5886:	9b05      	ldr	r3, [sp, #20]
    5888:	eb05 16c3 	add.w	r6, r5, r3, lsl #7
    588c:	f8c6 a018 	str.w	sl, [r6, #24]
	I2C_READ();
    5890:	2005      	movs	r0, #5
    5892:	4f6e      	ldr	r7, [pc, #440]	; (5a4c <I2C_readMONITOREDINPUT+0x288>)
    5894:	47b8      	blx	r7
    5896:	9a02      	ldr	r2, [sp, #8]
    5898:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    589c:	61ac      	str	r4, [r5, #24]
    589e:	2005      	movs	r0, #5
    58a0:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    58a2:	616c      	str	r4, [r5, #20]
    58a4:	2005      	movs	r0, #5
    58a6:	47b8      	blx	r7
    58a8:	9b05      	ldr	r3, [sp, #20]
    58aa:	01db      	lsls	r3, r3, #7
    58ac:	f103 4b82 	add.w	fp, r3, #1090519040	; 0x41000000
    58b0:	f50b 4b00 	add.w	fp, fp, #32768	; 0x8000
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    58b4:	f8cb a004 	str.w	sl, [fp, #4]
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    58b8:	9b08      	ldr	r3, [sp, #32]
    58ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    58be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    58c2:	9301      	str	r3, [sp, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    58c4:	62b3      	str	r3, [r6, #40]	; 0x28
		hri_port_write_WRCONFIG_reg(PORT,
    58c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    58c8:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    58cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    58d0:	9308      	str	r3, [sp, #32]
    58d2:	62b3      	str	r3, [r6, #40]	; 0x28
	I2C_WAITACKIP(-3);
    58d4:	2005      	movs	r0, #5
    58d6:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    58d8:	61ac      	str	r4, [r5, #24]
    58da:	2005      	movs	r0, #5
    58dc:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    58de:	a80b      	add	r0, sp, #44	; 0x2c
    58e0:	4b5b      	ldr	r3, [pc, #364]	; (5a50 <I2C_readMONITOREDINPUT+0x28c>)
    58e2:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    58e4:	f8db 2000 	ldr.w	r2, [fp]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    58e8:	6a33      	ldr	r3, [r6, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    58ea:	6935      	ldr	r5, [r6, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    58ec:	405d      	eors	r5, r3
    58ee:	4015      	ands	r5, r2
    58f0:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    58f2:	a80b      	add	r0, sp, #44	; 0x2c
    58f4:	4b57      	ldr	r3, [pc, #348]	; (5a54 <I2C_readMONITOREDINPUT+0x290>)
    58f6:	4798      	blx	r3
    58f8:	ea1a 0f05 	tst.w	sl, r5
    58fc:	d114      	bne.n	5928 <I2C_readMONITOREDINPUT+0x164>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    58fe:	9d02      	ldr	r5, [sp, #8]
    5900:	01eb      	lsls	r3, r5, #7
    5902:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    5906:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    590a:	615c      	str	r4, [r3, #20]
    590c:	2005      	movs	r0, #5
    590e:	4b4f      	ldr	r3, [pc, #316]	; (5a4c <I2C_readMONITOREDINPUT+0x288>)
    5910:	4798      	blx	r3

	*inputH = 0;
    5912:	2300      	movs	r3, #0
    5914:	9a03      	ldr	r2, [sp, #12]
    5916:	7013      	strb	r3, [r2, #0]
    5918:	2608      	movs	r6, #8

	/* Beginning of the for-loops that captures data and read the upper 8-bits of the input value */
	for (forloop = 0x80; forloop > 0;) {
    591a:	2780      	movs	r7, #128	; 0x80
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    591c:	4a4a      	ldr	r2, [pc, #296]	; (5a48 <I2C_readMONITOREDINPUT+0x284>)
    591e:	eb02 19c5 	add.w	r9, r2, r5, lsl #7
		I2C_clockhi();
    5922:	f8df 8128 	ldr.w	r8, [pc, #296]	; 5a4c <I2C_readMONITOREDINPUT+0x288>
    5926:	e01f      	b.n	5968 <I2C_readMONITOREDINPUT+0x1a4>
    5928:	4d47      	ldr	r5, [pc, #284]	; (5a48 <I2C_readMONITOREDINPUT+0x284>)
    592a:	9b02      	ldr	r3, [sp, #8]
    592c:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    5930:	619c      	str	r4, [r3, #24]
	I2C_WAITACKIP(-3);
    5932:	2005      	movs	r0, #5
    5934:	47b8      	blx	r7
    5936:	9b05      	ldr	r3, [sp, #20]
    5938:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    593c:	f8c5 a018 	str.w	sl, [r5, #24]
    5940:	2005      	movs	r0, #5
    5942:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    5944:	f8c5 a008 	str.w	sl, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    5948:	9b06      	ldr	r3, [sp, #24]
    594a:	62ab      	str	r3, [r5, #40]	; 0x28
    594c:	9b07      	ldr	r3, [sp, #28]
    594e:	62ab      	str	r3, [r5, #40]	; 0x28
    5950:	2005      	movs	r0, #5
    5952:	47b8      	blx	r7
    5954:	f06f 0002 	mvn.w	r0, #2
    5958:	e0b0      	b.n	5abc <I2C_readMONITOREDINPUT+0x2f8>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    595a:	f8c9 4014 	str.w	r4, [r9, #20]
		if (gpio_get_pin_level(i2csda)) {
			(*inputH) |= forloop;
		}

		I2C_clocklo();
    595e:	2005      	movs	r0, #5
    5960:	47c0      	blx	r8
		forloop = forloop / 2;
    5962:	087f      	lsrs	r7, r7, #1
	for (forloop = 0x80; forloop > 0;) {
    5964:	3e01      	subs	r6, #1
    5966:	d01c      	beq.n	59a2 <I2C_readMONITOREDINPUT+0x1de>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5968:	f8c9 4018 	str.w	r4, [r9, #24]
		I2C_clockhi();
    596c:	2005      	movs	r0, #5
    596e:	47c0      	blx	r8
	CRITICAL_SECTION_ENTER();
    5970:	a80c      	add	r0, sp, #48	; 0x30
    5972:	4b37      	ldr	r3, [pc, #220]	; (5a50 <I2C_readMONITOREDINPUT+0x28c>)
    5974:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    5976:	f8db 1000 	ldr.w	r1, [fp]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    597a:	4b33      	ldr	r3, [pc, #204]	; (5a48 <I2C_readMONITOREDINPUT+0x284>)
    597c:	9a00      	ldr	r2, [sp, #0]
    597e:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
    5982:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    5984:	6915      	ldr	r5, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    5986:	405d      	eors	r5, r3
    5988:	400d      	ands	r5, r1
    598a:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    598c:	a80c      	add	r0, sp, #48	; 0x30
    598e:	4b31      	ldr	r3, [pc, #196]	; (5a54 <I2C_readMONITOREDINPUT+0x290>)
    5990:	4798      	blx	r3
		if (gpio_get_pin_level(i2csda)) {
    5992:	ea1a 0f05 	tst.w	sl, r5
    5996:	d0e0      	beq.n	595a <I2C_readMONITOREDINPUT+0x196>
			(*inputH) |= forloop;
    5998:	9a03      	ldr	r2, [sp, #12]
    599a:	7813      	ldrb	r3, [r2, #0]
    599c:	433b      	orrs	r3, r7
    599e:	7013      	strb	r3, [r2, #0]
    59a0:	e7db      	b.n	595a <I2C_readMONITOREDINPUT+0x196>
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    59a2:	4f29      	ldr	r7, [pc, #164]	; (5a48 <I2C_readMONITOREDINPUT+0x284>)
    59a4:	9b05      	ldr	r3, [sp, #20]
    59a6:	eb07 15c3 	add.w	r5, r7, r3, lsl #7
    59aa:	f8c5 a008 	str.w	sl, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    59ae:	9b06      	ldr	r3, [sp, #24]
    59b0:	62ab      	str	r3, [r5, #40]	; 0x28
    59b2:	9b07      	ldr	r3, [sp, #28]
    59b4:	62ab      	str	r3, [r5, #40]	; 0x28
	}
	
	I2C_SENDACK();
    59b6:	2005      	movs	r0, #5
    59b8:	4e24      	ldr	r6, [pc, #144]	; (5a4c <I2C_readMONITOREDINPUT+0x288>)
    59ba:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    59bc:	f8c5 a014 	str.w	sl, [r5, #20]
    59c0:	2005      	movs	r0, #5
    59c2:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    59c4:	9b02      	ldr	r3, [sp, #8]
    59c6:	eb07 17c3 	add.w	r7, r7, r3, lsl #7
    59ca:	61bc      	str	r4, [r7, #24]
    59cc:	2005      	movs	r0, #5
    59ce:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    59d0:	617c      	str	r4, [r7, #20]
    59d2:	2005      	movs	r0, #5
    59d4:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    59d6:	f8cb a004 	str.w	sl, [fp, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    59da:	9a01      	ldr	r2, [sp, #4]
    59dc:	62aa      	str	r2, [r5, #40]	; 0x28
    59de:	9a08      	ldr	r2, [sp, #32]
    59e0:	62aa      	str	r2, [r5, #40]	; 0x28
    59e2:	2005      	movs	r0, #5
    59e4:	47b0      	blx	r6
	*inputL = 0;
    59e6:	2300      	movs	r3, #0
    59e8:	9a04      	ldr	r2, [sp, #16]
    59ea:	7013      	strb	r3, [r2, #0]
    59ec:	2608      	movs	r6, #8

	/* Beginning of the for-loops that captures data and read the lower 8-bits of the input value */
	for (forloop = 0x80; forloop > 0;) {
    59ee:	2780      	movs	r7, #128	; 0x80
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    59f0:	4a15      	ldr	r2, [pc, #84]	; (5a48 <I2C_readMONITOREDINPUT+0x284>)
    59f2:	9b02      	ldr	r3, [sp, #8]
    59f4:	eb02 19c3 	add.w	r9, r2, r3, lsl #7
		I2C_clockhi();
    59f8:	f8df 8050 	ldr.w	r8, [pc, #80]	; 5a4c <I2C_readMONITOREDINPUT+0x288>
    59fc:	e006      	b.n	5a0c <I2C_readMONITOREDINPUT+0x248>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    59fe:	f8c9 4014 	str.w	r4, [r9, #20]
		if (gpio_get_pin_level(i2csda)) {
			(*inputL) |= forloop;
		}

		I2C_clocklo();
    5a02:	2005      	movs	r0, #5
    5a04:	47c0      	blx	r8
		forloop = forloop / 2;
    5a06:	087f      	lsrs	r7, r7, #1
	for (forloop = 0x80; forloop > 0;) {
    5a08:	3e01      	subs	r6, #1
    5a0a:	d025      	beq.n	5a58 <I2C_readMONITOREDINPUT+0x294>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5a0c:	f8c9 4018 	str.w	r4, [r9, #24]
		I2C_clockhi();
    5a10:	2005      	movs	r0, #5
    5a12:	47c0      	blx	r8
	CRITICAL_SECTION_ENTER();
    5a14:	a80d      	add	r0, sp, #52	; 0x34
    5a16:	4b0e      	ldr	r3, [pc, #56]	; (5a50 <I2C_readMONITOREDINPUT+0x28c>)
    5a18:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    5a1a:	f8db 1000 	ldr.w	r1, [fp]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    5a1e:	4b0a      	ldr	r3, [pc, #40]	; (5a48 <I2C_readMONITOREDINPUT+0x284>)
    5a20:	9a00      	ldr	r2, [sp, #0]
    5a22:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
    5a26:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    5a28:	6915      	ldr	r5, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    5a2a:	405d      	eors	r5, r3
    5a2c:	400d      	ands	r5, r1
    5a2e:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    5a30:	a80d      	add	r0, sp, #52	; 0x34
    5a32:	4b08      	ldr	r3, [pc, #32]	; (5a54 <I2C_readMONITOREDINPUT+0x290>)
    5a34:	4798      	blx	r3
		if (gpio_get_pin_level(i2csda)) {
    5a36:	ea1a 0f05 	tst.w	sl, r5
    5a3a:	d0e0      	beq.n	59fe <I2C_readMONITOREDINPUT+0x23a>
			(*inputL) |= forloop;
    5a3c:	9a04      	ldr	r2, [sp, #16]
    5a3e:	7813      	ldrb	r3, [r2, #0]
    5a40:	433b      	orrs	r3, r7
    5a42:	7013      	strb	r3, [r2, #0]
    5a44:	e7db      	b.n	59fe <I2C_readMONITOREDINPUT+0x23a>
    5a46:	bf00      	nop
    5a48:	41008000 	.word	0x41008000
    5a4c:	000015a9 	.word	0x000015a9
    5a50:	00001549 	.word	0x00001549
    5a54:	00001557 	.word	0x00001557
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    5a58:	4f1d      	ldr	r7, [pc, #116]	; (5ad0 <I2C_readMONITOREDINPUT+0x30c>)
    5a5a:	9b05      	ldr	r3, [sp, #20]
    5a5c:	eb07 15c3 	add.w	r5, r7, r3, lsl #7
    5a60:	f8c5 a008 	str.w	sl, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    5a64:	9b06      	ldr	r3, [sp, #24]
    5a66:	62ab      	str	r3, [r5, #40]	; 0x28
    5a68:	9a07      	ldr	r2, [sp, #28]
    5a6a:	62aa      	str	r2, [r5, #40]	; 0x28
	}
	
	I2C_SENDNACK();	
    5a6c:	2005      	movs	r0, #5
    5a6e:	4e19      	ldr	r6, [pc, #100]	; (5ad4 <I2C_readMONITOREDINPUT+0x310>)
    5a70:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5a72:	f8c5 a018 	str.w	sl, [r5, #24]
    5a76:	2005      	movs	r0, #5
    5a78:	47b0      	blx	r6
    5a7a:	9902      	ldr	r1, [sp, #8]
    5a7c:	eb07 17c1 	add.w	r7, r7, r1, lsl #7
    5a80:	61bc      	str	r4, [r7, #24]
    5a82:	2005      	movs	r0, #5
    5a84:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5a86:	617c      	str	r4, [r7, #20]
    5a88:	2005      	movs	r0, #5
    5a8a:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    5a8c:	f8cb a004 	str.w	sl, [fp, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    5a90:	9901      	ldr	r1, [sp, #4]
    5a92:	62a9      	str	r1, [r5, #40]	; 0x28
    5a94:	9908      	ldr	r1, [sp, #32]
    5a96:	62a9      	str	r1, [r5, #40]	; 0x28
    5a98:	2005      	movs	r0, #5
    5a9a:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5a9c:	61bc      	str	r4, [r7, #24]
	I2C_STOP();
    5a9e:	2005      	movs	r0, #5
    5aa0:	47b0      	blx	r6
    5aa2:	f8c5 a018 	str.w	sl, [r5, #24]
    5aa6:	2005      	movs	r0, #5
    5aa8:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    5aaa:	f8c5 a008 	str.w	sl, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    5aae:	9b06      	ldr	r3, [sp, #24]
    5ab0:	62ab      	str	r3, [r5, #40]	; 0x28
    5ab2:	9a07      	ldr	r2, [sp, #28]
    5ab4:	62aa      	str	r2, [r5, #40]	; 0x28
    5ab6:	2005      	movs	r0, #5
    5ab8:	47b0      	blx	r6
	I2C_CLOSE();
	/* If successful, and code execution got here, the close the I2C channel */
	
	return 0;
    5aba:	2000      	movs	r0, #0
}
    5abc:	b00f      	add	sp, #60	; 0x3c
    5abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -1;
    5ac2:	f04f 30ff 	mov.w	r0, #4294967295
    5ac6:	4770      	bx	lr
    5ac8:	f04f 30ff 	mov.w	r0, #4294967295
    5acc:	e7f6      	b.n	5abc <I2C_readMONITOREDINPUT+0x2f8>
    5ace:	bf00      	nop
    5ad0:	41008000 	.word	0x41008000
    5ad4:	000015a9 	.word	0x000015a9

00005ad8 <I2C_configEXPANDER>:
// * CALLED BY:			  main()                                                                                                       *
// * CALLS:		          No function. ALL macros defined in this function file.                                                       *
// * --------------------------------------------------------------------------------------------------------------------------------- *
int I2C_configEXPANDER(uint8_t sda,  uint8_t clk)

{
    5ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5adc:	b095      	sub	sp, #84	; 0x54
    5ade:	f001 041f 	and.w	r4, r1, #31
    5ae2:	2301      	movs	r3, #1
    5ae4:	fa03 f404 	lsl.w	r4, r3, r4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5ae8:	094a      	lsrs	r2, r1, #5
    5aea:	4dae      	ldr	r5, [pc, #696]	; (5da4 <I2C_configEXPANDER+0x2cc>)
    5aec:	9201      	str	r2, [sp, #4]
    5aee:	eb05 17c2 	add.w	r7, r5, r2, lsl #7
    5af2:	61bc      	str	r4, [r7, #24]
    5af4:	0942      	lsrs	r2, r0, #5
    5af6:	9202      	str	r2, [sp, #8]
    5af8:	f000 001f 	and.w	r0, r0, #31
    5afc:	fa03 fb00 	lsl.w	fp, r3, r0
    5b00:	9206      	str	r2, [sp, #24]
    5b02:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    5b06:	f8c5 b018 	str.w	fp, [r5, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    5b0a:	f8c5 b008 	str.w	fp, [r5, #8]
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    5b0e:	fa1f f38b 	uxth.w	r3, fp
    5b12:	9307      	str	r3, [sp, #28]
    5b14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    5b18:	9304      	str	r3, [sp, #16]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    5b1a:	62ab      	str	r3, [r5, #40]	; 0x28
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    5b1c:	ea4f 431b 	mov.w	r3, fp, lsr #16
    5b20:	9309      	str	r3, [sp, #36]	; 0x24
		hri_port_write_WRCONFIG_reg(
    5b22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    5b26:	9305      	str	r3, [sp, #20]
    5b28:	62ab      	str	r3, [r5, #40]	; 0x28
	uint8_t     		i2csda, i2cclk;
	unsigned char		forloop;

	/* Open an I2C channel, send address 0x41, index register 0x01 then send the 3 configuration values for inversion, output default and the direction register */
	I2C_OPEN(sda, clk);
	I2C_START(-1);
    5b2a:	2005      	movs	r0, #5
    5b2c:	4e9e      	ldr	r6, [pc, #632]	; (5da8 <I2C_configEXPANDER+0x2d0>)
    5b2e:	47b0      	blx	r6
    5b30:	2005      	movs	r0, #5
    5b32:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5b34:	f8c5 b014 	str.w	fp, [r5, #20]
    5b38:	2005      	movs	r0, #5
    5b3a:	47b0      	blx	r6
    5b3c:	617c      	str	r4, [r7, #20]
    5b3e:	2005      	movs	r0, #5
    5b40:	47b0      	blx	r6
    5b42:	2707      	movs	r7, #7
	I2C_SENDADDR(0x41, forloop);
    5b44:	2640      	movs	r6, #64	; 0x40
    5b46:	f8df 925c 	ldr.w	r9, [pc, #604]	; 5da4 <I2C_configEXPANDER+0x2cc>
    5b4a:	9a06      	ldr	r2, [sp, #24]
    5b4c:	eb09 13c2 	add.w	r3, r9, r2, lsl #7
    5b50:	9303      	str	r3, [sp, #12]
    5b52:	4d95      	ldr	r5, [pc, #596]	; (5da8 <I2C_configEXPANDER+0x2d0>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5b54:	9901      	ldr	r1, [sp, #4]
    5b56:	fa01 fa07 	lsl.w	sl, r1, r7
    5b5a:	f016 0f41 	tst.w	r6, #65	; 0x41
    5b5e:	9b03      	ldr	r3, [sp, #12]
    5b60:	bf14      	ite	ne
    5b62:	f8c3 b018 	strne.w	fp, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5b66:	f8c3 b014 	streq.w	fp, [r3, #20]
    5b6a:	2005      	movs	r0, #5
    5b6c:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5b6e:	eb09 080a 	add.w	r8, r9, sl
    5b72:	f8c8 4018 	str.w	r4, [r8, #24]
    5b76:	2005      	movs	r0, #5
    5b78:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5b7a:	f8c8 4014 	str.w	r4, [r8, #20]
    5b7e:	2005      	movs	r0, #5
    5b80:	47a8      	blx	r5
    5b82:	0876      	lsrs	r6, r6, #1
    5b84:	3f01      	subs	r7, #1
    5b86:	d1e8      	bne.n	5b5a <I2C_configEXPANDER+0x82>
    5b88:	4d86      	ldr	r5, [pc, #536]	; (5da4 <I2C_configEXPANDER+0x2cc>)
    5b8a:	9b02      	ldr	r3, [sp, #8]
    5b8c:	eb05 16c3 	add.w	r6, r5, r3, lsl #7
    5b90:	f8c6 b014 	str.w	fp, [r6, #20]
	I2C_WRITE();
    5b94:	2005      	movs	r0, #5
    5b96:	4f84      	ldr	r7, [pc, #528]	; (5da8 <I2C_configEXPANDER+0x2d0>)
    5b98:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5b9a:	9a01      	ldr	r2, [sp, #4]
    5b9c:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    5ba0:	61ac      	str	r4, [r5, #24]
    5ba2:	2005      	movs	r0, #5
    5ba4:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5ba6:	616c      	str	r4, [r5, #20]
    5ba8:	2005      	movs	r0, #5
    5baa:	47b8      	blx	r7
    5bac:	9b02      	ldr	r3, [sp, #8]
    5bae:	01db      	lsls	r3, r3, #7
    5bb0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    5bb4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    5bb8:	9303      	str	r3, [sp, #12]
    5bba:	f8c3 b004 	str.w	fp, [r3, #4]
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    5bbe:	9907      	ldr	r1, [sp, #28]
    5bc0:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    5bc4:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
    5bc8:	9108      	str	r1, [sp, #32]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    5bca:	62b1      	str	r1, [r6, #40]	; 0x28
		hri_port_write_WRCONFIG_reg(PORT,
    5bcc:	9909      	ldr	r1, [sp, #36]	; 0x24
    5bce:	f041 4140 	orr.w	r1, r1, #3221225472	; 0xc0000000
    5bd2:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
    5bd6:	9109      	str	r1, [sp, #36]	; 0x24
    5bd8:	62b1      	str	r1, [r6, #40]	; 0x28
	I2C_WAITACKOP(-2);
    5bda:	2005      	movs	r0, #5
    5bdc:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5bde:	61ac      	str	r4, [r5, #24]
    5be0:	2005      	movs	r0, #5
    5be2:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    5be4:	a80b      	add	r0, sp, #44	; 0x2c
    5be6:	4b71      	ldr	r3, [pc, #452]	; (5dac <I2C_configEXPANDER+0x2d4>)
    5be8:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    5bea:	9a03      	ldr	r2, [sp, #12]
    5bec:	6812      	ldr	r2, [r2, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    5bee:	6a33      	ldr	r3, [r6, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    5bf0:	6935      	ldr	r5, [r6, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    5bf2:	405d      	eors	r5, r3
    5bf4:	4015      	ands	r5, r2
    5bf6:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    5bf8:	a80b      	add	r0, sp, #44	; 0x2c
    5bfa:	4b6d      	ldr	r3, [pc, #436]	; (5db0 <I2C_configEXPANDER+0x2d8>)
    5bfc:	4798      	blx	r3
    5bfe:	ea1b 0f05 	tst.w	fp, r5
    5c02:	f040 8334 	bne.w	626e <I2C_configEXPANDER+0x796>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5c06:	4d67      	ldr	r5, [pc, #412]	; (5da4 <I2C_configEXPANDER+0x2cc>)
    5c08:	9b01      	ldr	r3, [sp, #4]
    5c0a:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    5c0e:	615c      	str	r4, [r3, #20]
    5c10:	2005      	movs	r0, #5
    5c12:	4e65      	ldr	r6, [pc, #404]	; (5da8 <I2C_configEXPANDER+0x2d0>)
    5c14:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    5c16:	9a02      	ldr	r2, [sp, #8]
    5c18:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    5c1c:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    5c20:	9a04      	ldr	r2, [sp, #16]
    5c22:	62aa      	str	r2, [r5, #40]	; 0x28
    5c24:	9a05      	ldr	r2, [sp, #20]
    5c26:	62aa      	str	r2, [r5, #40]	; 0x28
    5c28:	2005      	movs	r0, #5
    5c2a:	47b0      	blx	r6
    5c2c:	2508      	movs	r5, #8
	I2C_SENDDATA(0x01, forloop);
    5c2e:	2780      	movs	r7, #128	; 0x80
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5c30:	f8df 9170 	ldr.w	r9, [pc, #368]	; 5da4 <I2C_configEXPANDER+0x2cc>
    5c34:	9a06      	ldr	r2, [sp, #24]
    5c36:	eb09 12c2 	add.w	r2, r9, r2, lsl #7
    5c3a:	9207      	str	r2, [sp, #28]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5c3c:	9b01      	ldr	r3, [sp, #4]
    5c3e:	ea4f 1ac3 	mov.w	sl, r3, lsl #7
    5c42:	f017 0f01 	tst.w	r7, #1
    5c46:	9b07      	ldr	r3, [sp, #28]
    5c48:	bf14      	ite	ne
    5c4a:	f8c3 b018 	strne.w	fp, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5c4e:	f8c3 b014 	streq.w	fp, [r3, #20]
    5c52:	2005      	movs	r0, #5
    5c54:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5c56:	eb09 080a 	add.w	r8, r9, sl
    5c5a:	f8c8 4018 	str.w	r4, [r8, #24]
    5c5e:	2005      	movs	r0, #5
    5c60:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5c62:	f8c8 4014 	str.w	r4, [r8, #20]
    5c66:	2005      	movs	r0, #5
    5c68:	47b0      	blx	r6
    5c6a:	087f      	lsrs	r7, r7, #1
    5c6c:	3d01      	subs	r5, #1
    5c6e:	d1e8      	bne.n	5c42 <I2C_configEXPANDER+0x16a>
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    5c70:	9b03      	ldr	r3, [sp, #12]
    5c72:	f8c3 b004 	str.w	fp, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    5c76:	4e4b      	ldr	r6, [pc, #300]	; (5da4 <I2C_configEXPANDER+0x2cc>)
    5c78:	9a02      	ldr	r2, [sp, #8]
    5c7a:	eb06 15c2 	add.w	r5, r6, r2, lsl #7
    5c7e:	9a08      	ldr	r2, [sp, #32]
    5c80:	62aa      	str	r2, [r5, #40]	; 0x28
    5c82:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5c84:	62aa      	str	r2, [r5, #40]	; 0x28
	I2C_WAITACKOP(-3);
    5c86:	2005      	movs	r0, #5
    5c88:	4f47      	ldr	r7, [pc, #284]	; (5da8 <I2C_configEXPANDER+0x2d0>)
    5c8a:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5c8c:	9a01      	ldr	r2, [sp, #4]
    5c8e:	eb06 16c2 	add.w	r6, r6, r2, lsl #7
    5c92:	61b4      	str	r4, [r6, #24]
    5c94:	2005      	movs	r0, #5
    5c96:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    5c98:	a80c      	add	r0, sp, #48	; 0x30
    5c9a:	4b44      	ldr	r3, [pc, #272]	; (5dac <I2C_configEXPANDER+0x2d4>)
    5c9c:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    5c9e:	9b03      	ldr	r3, [sp, #12]
    5ca0:	681a      	ldr	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    5ca2:	6a2b      	ldr	r3, [r5, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    5ca4:	692d      	ldr	r5, [r5, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    5ca6:	405d      	eors	r5, r3
    5ca8:	4015      	ands	r5, r2
    5caa:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    5cac:	a80c      	add	r0, sp, #48	; 0x30
    5cae:	4b40      	ldr	r3, [pc, #256]	; (5db0 <I2C_configEXPANDER+0x2d8>)
    5cb0:	4798      	blx	r3
    5cb2:	ea1b 0f05 	tst.w	fp, r5
    5cb6:	f040 82f3 	bne.w	62a0 <I2C_configEXPANDER+0x7c8>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5cba:	4d3a      	ldr	r5, [pc, #232]	; (5da4 <I2C_configEXPANDER+0x2cc>)
    5cbc:	9f01      	ldr	r7, [sp, #4]
    5cbe:	eb05 13c7 	add.w	r3, r5, r7, lsl #7
    5cc2:	615c      	str	r4, [r3, #20]
    5cc4:	2005      	movs	r0, #5
    5cc6:	4e38      	ldr	r6, [pc, #224]	; (5da8 <I2C_configEXPANDER+0x2d0>)
    5cc8:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    5cca:	9b02      	ldr	r3, [sp, #8]
    5ccc:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    5cd0:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    5cd4:	9b04      	ldr	r3, [sp, #16]
    5cd6:	62ab      	str	r3, [r5, #40]	; 0x28
    5cd8:	9b05      	ldr	r3, [sp, #20]
    5cda:	62ab      	str	r3, [r5, #40]	; 0x28
    5cdc:	2005      	movs	r0, #5
    5cde:	47b0      	blx	r6
    5ce0:	2608      	movs	r6, #8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5ce2:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 5da4 <I2C_configEXPANDER+0x2cc>
    5ce6:	9b06      	ldr	r3, [sp, #24]
    5ce8:	eb08 1ac3 	add.w	sl, r8, r3, lsl #7
	I2C_SENDDATA(0x00, forloop);
    5cec:	4d2e      	ldr	r5, [pc, #184]	; (5da8 <I2C_configEXPANDER+0x2d0>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5cee:	ea4f 19c7 	mov.w	r9, r7, lsl #7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5cf2:	f8ca b014 	str.w	fp, [sl, #20]
    5cf6:	2005      	movs	r0, #5
    5cf8:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5cfa:	eb08 0709 	add.w	r7, r8, r9
    5cfe:	61bc      	str	r4, [r7, #24]
    5d00:	2005      	movs	r0, #5
    5d02:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5d04:	617c      	str	r4, [r7, #20]
    5d06:	2005      	movs	r0, #5
    5d08:	47a8      	blx	r5
    5d0a:	3e01      	subs	r6, #1
    5d0c:	d1f1      	bne.n	5cf2 <I2C_configEXPANDER+0x21a>
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    5d0e:	9b03      	ldr	r3, [sp, #12]
    5d10:	f8c3 b004 	str.w	fp, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    5d14:	4e23      	ldr	r6, [pc, #140]	; (5da4 <I2C_configEXPANDER+0x2cc>)
    5d16:	9a02      	ldr	r2, [sp, #8]
    5d18:	eb06 15c2 	add.w	r5, r6, r2, lsl #7
    5d1c:	9a08      	ldr	r2, [sp, #32]
    5d1e:	62aa      	str	r2, [r5, #40]	; 0x28
    5d20:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5d22:	62aa      	str	r2, [r5, #40]	; 0x28
	I2C_WAITACKOP(-4);
    5d24:	2005      	movs	r0, #5
    5d26:	4f20      	ldr	r7, [pc, #128]	; (5da8 <I2C_configEXPANDER+0x2d0>)
    5d28:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5d2a:	9a01      	ldr	r2, [sp, #4]
    5d2c:	eb06 16c2 	add.w	r6, r6, r2, lsl #7
    5d30:	61b4      	str	r4, [r6, #24]
    5d32:	2005      	movs	r0, #5
    5d34:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    5d36:	a80d      	add	r0, sp, #52	; 0x34
    5d38:	4b1c      	ldr	r3, [pc, #112]	; (5dac <I2C_configEXPANDER+0x2d4>)
    5d3a:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    5d3c:	9b03      	ldr	r3, [sp, #12]
    5d3e:	681a      	ldr	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    5d40:	6a2b      	ldr	r3, [r5, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    5d42:	692d      	ldr	r5, [r5, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    5d44:	405d      	eors	r5, r3
    5d46:	4015      	ands	r5, r2
    5d48:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    5d4a:	a80d      	add	r0, sp, #52	; 0x34
    5d4c:	4b18      	ldr	r3, [pc, #96]	; (5db0 <I2C_configEXPANDER+0x2d8>)
    5d4e:	4798      	blx	r3
    5d50:	ea1b 0f05 	tst.w	fp, r5
    5d54:	f040 82bd 	bne.w	62d2 <I2C_configEXPANDER+0x7fa>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5d58:	4d12      	ldr	r5, [pc, #72]	; (5da4 <I2C_configEXPANDER+0x2cc>)
    5d5a:	9b01      	ldr	r3, [sp, #4]
    5d5c:	eb05 17c3 	add.w	r7, r5, r3, lsl #7
    5d60:	617c      	str	r4, [r7, #20]
    5d62:	2005      	movs	r0, #5
    5d64:	4e10      	ldr	r6, [pc, #64]	; (5da8 <I2C_configEXPANDER+0x2d0>)
    5d66:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    5d68:	9a02      	ldr	r2, [sp, #8]
    5d6a:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    5d6e:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    5d72:	9a04      	ldr	r2, [sp, #16]
    5d74:	62aa      	str	r2, [r5, #40]	; 0x28
    5d76:	9905      	ldr	r1, [sp, #20]
    5d78:	62a9      	str	r1, [r5, #40]	; 0x28
    5d7a:	2005      	movs	r0, #5
    5d7c:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5d7e:	61bc      	str	r4, [r7, #24]
    5d80:	f8c5 b018 	str.w	fp, [r5, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    5d84:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    5d88:	9a04      	ldr	r2, [sp, #16]
    5d8a:	62aa      	str	r2, [r5, #40]	; 0x28
    5d8c:	9905      	ldr	r1, [sp, #20]
    5d8e:	62a9      	str	r1, [r5, #40]	; 0x28

	I2C_START(-1);
    5d90:	2005      	movs	r0, #5
    5d92:	47b0      	blx	r6
    5d94:	2005      	movs	r0, #5
    5d96:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5d98:	f8c5 b014 	str.w	fp, [r5, #20]
    5d9c:	2005      	movs	r0, #5
    5d9e:	47b0      	blx	r6
    5da0:	617c      	str	r4, [r7, #20]
    5da2:	e007      	b.n	5db4 <I2C_configEXPANDER+0x2dc>
    5da4:	41008000 	.word	0x41008000
    5da8:	000015a9 	.word	0x000015a9
    5dac:	00001549 	.word	0x00001549
    5db0:	00001557 	.word	0x00001557
    5db4:	2005      	movs	r0, #5
    5db6:	47b0      	blx	r6
    5db8:	2707      	movs	r7, #7
	I2C_SENDADDR(0x41, forloop);
    5dba:	2640      	movs	r6, #64	; 0x40
    5dbc:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 6080 <I2C_configEXPANDER+0x5a8>
    5dc0:	9a06      	ldr	r2, [sp, #24]
    5dc2:	eb09 12c2 	add.w	r2, r9, r2, lsl #7
    5dc6:	9207      	str	r2, [sp, #28]
    5dc8:	4dac      	ldr	r5, [pc, #688]	; (607c <I2C_configEXPANDER+0x5a4>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5dca:	9b01      	ldr	r3, [sp, #4]
    5dcc:	fa03 fa07 	lsl.w	sl, r3, r7
    5dd0:	f016 0f41 	tst.w	r6, #65	; 0x41
    5dd4:	9b07      	ldr	r3, [sp, #28]
    5dd6:	bf14      	ite	ne
    5dd8:	f8c3 b018 	strne.w	fp, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5ddc:	f8c3 b014 	streq.w	fp, [r3, #20]
    5de0:	2005      	movs	r0, #5
    5de2:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5de4:	eb09 080a 	add.w	r8, r9, sl
    5de8:	f8c8 4018 	str.w	r4, [r8, #24]
    5dec:	2005      	movs	r0, #5
    5dee:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5df0:	f8c8 4014 	str.w	r4, [r8, #20]
    5df4:	2005      	movs	r0, #5
    5df6:	47a8      	blx	r5
    5df8:	0876      	lsrs	r6, r6, #1
    5dfa:	3f01      	subs	r7, #1
    5dfc:	d1e8      	bne.n	5dd0 <I2C_configEXPANDER+0x2f8>
    5dfe:	4da0      	ldr	r5, [pc, #640]	; (6080 <I2C_configEXPANDER+0x5a8>)
    5e00:	9b02      	ldr	r3, [sp, #8]
    5e02:	eb05 16c3 	add.w	r6, r5, r3, lsl #7
    5e06:	f8c6 b014 	str.w	fp, [r6, #20]
	I2C_WRITE();
    5e0a:	2005      	movs	r0, #5
    5e0c:	4f9b      	ldr	r7, [pc, #620]	; (607c <I2C_configEXPANDER+0x5a4>)
    5e0e:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5e10:	9b01      	ldr	r3, [sp, #4]
    5e12:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    5e16:	61ac      	str	r4, [r5, #24]
    5e18:	2005      	movs	r0, #5
    5e1a:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5e1c:	616c      	str	r4, [r5, #20]
    5e1e:	2005      	movs	r0, #5
    5e20:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    5e22:	9b03      	ldr	r3, [sp, #12]
    5e24:	f8c3 b004 	str.w	fp, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    5e28:	9a08      	ldr	r2, [sp, #32]
    5e2a:	62b2      	str	r2, [r6, #40]	; 0x28
    5e2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5e2e:	62b2      	str	r2, [r6, #40]	; 0x28
	I2C_WAITACKOP(-2);
    5e30:	2005      	movs	r0, #5
    5e32:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5e34:	61ac      	str	r4, [r5, #24]
    5e36:	2005      	movs	r0, #5
    5e38:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    5e3a:	a80e      	add	r0, sp, #56	; 0x38
    5e3c:	4b91      	ldr	r3, [pc, #580]	; (6084 <I2C_configEXPANDER+0x5ac>)
    5e3e:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    5e40:	9b03      	ldr	r3, [sp, #12]
    5e42:	681a      	ldr	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    5e44:	6a33      	ldr	r3, [r6, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    5e46:	6935      	ldr	r5, [r6, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    5e48:	405d      	eors	r5, r3
    5e4a:	4015      	ands	r5, r2
    5e4c:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    5e4e:	a80e      	add	r0, sp, #56	; 0x38
    5e50:	4b8d      	ldr	r3, [pc, #564]	; (6088 <I2C_configEXPANDER+0x5b0>)
    5e52:	4798      	blx	r3
    5e54:	ea1b 0f05 	tst.w	fp, r5
    5e58:	f040 8254 	bne.w	6304 <I2C_configEXPANDER+0x82c>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5e5c:	4d88      	ldr	r5, [pc, #544]	; (6080 <I2C_configEXPANDER+0x5a8>)
    5e5e:	9b01      	ldr	r3, [sp, #4]
    5e60:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    5e64:	615c      	str	r4, [r3, #20]
    5e66:	2005      	movs	r0, #5
    5e68:	4e84      	ldr	r6, [pc, #528]	; (607c <I2C_configEXPANDER+0x5a4>)
    5e6a:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    5e6c:	9a02      	ldr	r2, [sp, #8]
    5e6e:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    5e72:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    5e76:	9a04      	ldr	r2, [sp, #16]
    5e78:	62aa      	str	r2, [r5, #40]	; 0x28
    5e7a:	9a05      	ldr	r2, [sp, #20]
    5e7c:	62aa      	str	r2, [r5, #40]	; 0x28
    5e7e:	2005      	movs	r0, #5
    5e80:	47b0      	blx	r6
    5e82:	2708      	movs	r7, #8
	I2C_SENDDATA(0x02, forloop);
    5e84:	2680      	movs	r6, #128	; 0x80
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5e86:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 6080 <I2C_configEXPANDER+0x5a8>
    5e8a:	9a06      	ldr	r2, [sp, #24]
    5e8c:	eb09 12c2 	add.w	r2, r9, r2, lsl #7
    5e90:	9207      	str	r2, [sp, #28]
    5e92:	4d7a      	ldr	r5, [pc, #488]	; (607c <I2C_configEXPANDER+0x5a4>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5e94:	9b01      	ldr	r3, [sp, #4]
    5e96:	ea4f 1ac3 	mov.w	sl, r3, lsl #7
    5e9a:	f016 0f02 	tst.w	r6, #2
    5e9e:	9b07      	ldr	r3, [sp, #28]
    5ea0:	bf14      	ite	ne
    5ea2:	f8c3 b018 	strne.w	fp, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5ea6:	f8c3 b014 	streq.w	fp, [r3, #20]
    5eaa:	2005      	movs	r0, #5
    5eac:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5eae:	eb09 080a 	add.w	r8, r9, sl
    5eb2:	f8c8 4018 	str.w	r4, [r8, #24]
    5eb6:	2005      	movs	r0, #5
    5eb8:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5eba:	f8c8 4014 	str.w	r4, [r8, #20]
    5ebe:	2005      	movs	r0, #5
    5ec0:	47a8      	blx	r5
    5ec2:	0876      	lsrs	r6, r6, #1
    5ec4:	3f01      	subs	r7, #1
    5ec6:	d1e8      	bne.n	5e9a <I2C_configEXPANDER+0x3c2>
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    5ec8:	9b03      	ldr	r3, [sp, #12]
    5eca:	f8c3 b004 	str.w	fp, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    5ece:	4e6c      	ldr	r6, [pc, #432]	; (6080 <I2C_configEXPANDER+0x5a8>)
    5ed0:	9a02      	ldr	r2, [sp, #8]
    5ed2:	eb06 15c2 	add.w	r5, r6, r2, lsl #7
    5ed6:	9a08      	ldr	r2, [sp, #32]
    5ed8:	62aa      	str	r2, [r5, #40]	; 0x28
    5eda:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5edc:	62aa      	str	r2, [r5, #40]	; 0x28
	I2C_WAITACKOP(-3);
    5ede:	2005      	movs	r0, #5
    5ee0:	4f66      	ldr	r7, [pc, #408]	; (607c <I2C_configEXPANDER+0x5a4>)
    5ee2:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5ee4:	9a01      	ldr	r2, [sp, #4]
    5ee6:	eb06 16c2 	add.w	r6, r6, r2, lsl #7
    5eea:	61b4      	str	r4, [r6, #24]
    5eec:	2005      	movs	r0, #5
    5eee:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    5ef0:	a80f      	add	r0, sp, #60	; 0x3c
    5ef2:	4b64      	ldr	r3, [pc, #400]	; (6084 <I2C_configEXPANDER+0x5ac>)
    5ef4:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    5ef6:	9b03      	ldr	r3, [sp, #12]
    5ef8:	681a      	ldr	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    5efa:	6a2b      	ldr	r3, [r5, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    5efc:	692d      	ldr	r5, [r5, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    5efe:	405d      	eors	r5, r3
    5f00:	4015      	ands	r5, r2
    5f02:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    5f04:	a80f      	add	r0, sp, #60	; 0x3c
    5f06:	4b60      	ldr	r3, [pc, #384]	; (6088 <I2C_configEXPANDER+0x5b0>)
    5f08:	4798      	blx	r3
    5f0a:	ea1b 0f05 	tst.w	fp, r5
    5f0e:	f040 821b 	bne.w	6348 <I2C_configEXPANDER+0x870>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5f12:	4d5b      	ldr	r5, [pc, #364]	; (6080 <I2C_configEXPANDER+0x5a8>)
    5f14:	9f01      	ldr	r7, [sp, #4]
    5f16:	eb05 13c7 	add.w	r3, r5, r7, lsl #7
    5f1a:	615c      	str	r4, [r3, #20]
    5f1c:	2005      	movs	r0, #5
    5f1e:	4e57      	ldr	r6, [pc, #348]	; (607c <I2C_configEXPANDER+0x5a4>)
    5f20:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    5f22:	9b02      	ldr	r3, [sp, #8]
    5f24:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    5f28:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    5f2c:	9b04      	ldr	r3, [sp, #16]
    5f2e:	62ab      	str	r3, [r5, #40]	; 0x28
    5f30:	9b05      	ldr	r3, [sp, #20]
    5f32:	62ab      	str	r3, [r5, #40]	; 0x28
    5f34:	2005      	movs	r0, #5
    5f36:	47b0      	blx	r6
    5f38:	2608      	movs	r6, #8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5f3a:	f8df 8144 	ldr.w	r8, [pc, #324]	; 6080 <I2C_configEXPANDER+0x5a8>
    5f3e:	9b06      	ldr	r3, [sp, #24]
    5f40:	eb08 1ac3 	add.w	sl, r8, r3, lsl #7
	I2C_SENDDATA(0x00, forloop);
    5f44:	4d4d      	ldr	r5, [pc, #308]	; (607c <I2C_configEXPANDER+0x5a4>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5f46:	ea4f 19c7 	mov.w	r9, r7, lsl #7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5f4a:	f8ca b014 	str.w	fp, [sl, #20]
    5f4e:	2005      	movs	r0, #5
    5f50:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5f52:	eb08 0709 	add.w	r7, r8, r9
    5f56:	61bc      	str	r4, [r7, #24]
    5f58:	2005      	movs	r0, #5
    5f5a:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5f5c:	617c      	str	r4, [r7, #20]
    5f5e:	2005      	movs	r0, #5
    5f60:	47a8      	blx	r5
    5f62:	3e01      	subs	r6, #1
    5f64:	d1f1      	bne.n	5f4a <I2C_configEXPANDER+0x472>
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    5f66:	9b03      	ldr	r3, [sp, #12]
    5f68:	f8c3 b004 	str.w	fp, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    5f6c:	4e44      	ldr	r6, [pc, #272]	; (6080 <I2C_configEXPANDER+0x5a8>)
    5f6e:	9a02      	ldr	r2, [sp, #8]
    5f70:	eb06 15c2 	add.w	r5, r6, r2, lsl #7
    5f74:	9a08      	ldr	r2, [sp, #32]
    5f76:	62aa      	str	r2, [r5, #40]	; 0x28
    5f78:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5f7a:	62aa      	str	r2, [r5, #40]	; 0x28
	I2C_WAITACKOP(-4);
    5f7c:	2005      	movs	r0, #5
    5f7e:	4f3f      	ldr	r7, [pc, #252]	; (607c <I2C_configEXPANDER+0x5a4>)
    5f80:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5f82:	9a01      	ldr	r2, [sp, #4]
    5f84:	eb06 16c2 	add.w	r6, r6, r2, lsl #7
    5f88:	61b4      	str	r4, [r6, #24]
    5f8a:	2005      	movs	r0, #5
    5f8c:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    5f8e:	a810      	add	r0, sp, #64	; 0x40
    5f90:	4b3c      	ldr	r3, [pc, #240]	; (6084 <I2C_configEXPANDER+0x5ac>)
    5f92:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    5f94:	9b03      	ldr	r3, [sp, #12]
    5f96:	681a      	ldr	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    5f98:	6a2b      	ldr	r3, [r5, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    5f9a:	692d      	ldr	r5, [r5, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    5f9c:	405d      	eors	r5, r3
    5f9e:	4015      	ands	r5, r2
    5fa0:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    5fa2:	a810      	add	r0, sp, #64	; 0x40
    5fa4:	4b38      	ldr	r3, [pc, #224]	; (6088 <I2C_configEXPANDER+0x5b0>)
    5fa6:	4798      	blx	r3
    5fa8:	ea1b 0f05 	tst.w	fp, r5
    5fac:	f040 81e5 	bne.w	637a <I2C_configEXPANDER+0x8a2>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5fb0:	4d33      	ldr	r5, [pc, #204]	; (6080 <I2C_configEXPANDER+0x5a8>)
    5fb2:	9b01      	ldr	r3, [sp, #4]
    5fb4:	eb05 17c3 	add.w	r7, r5, r3, lsl #7
    5fb8:	617c      	str	r4, [r7, #20]
    5fba:	2005      	movs	r0, #5
    5fbc:	4e2f      	ldr	r6, [pc, #188]	; (607c <I2C_configEXPANDER+0x5a4>)
    5fbe:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    5fc0:	9a02      	ldr	r2, [sp, #8]
    5fc2:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    5fc6:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    5fca:	9a04      	ldr	r2, [sp, #16]
    5fcc:	62aa      	str	r2, [r5, #40]	; 0x28
    5fce:	9905      	ldr	r1, [sp, #20]
    5fd0:	62a9      	str	r1, [r5, #40]	; 0x28
    5fd2:	2005      	movs	r0, #5
    5fd4:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5fd6:	61bc      	str	r4, [r7, #24]
    5fd8:	f8c5 b018 	str.w	fp, [r5, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    5fdc:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    5fe0:	9a04      	ldr	r2, [sp, #16]
    5fe2:	62aa      	str	r2, [r5, #40]	; 0x28
    5fe4:	9905      	ldr	r1, [sp, #20]
    5fe6:	62a9      	str	r1, [r5, #40]	; 0x28
	
	I2C_START(-1);
    5fe8:	2005      	movs	r0, #5
    5fea:	47b0      	blx	r6
    5fec:	2005      	movs	r0, #5
    5fee:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5ff0:	f8c5 b014 	str.w	fp, [r5, #20]
    5ff4:	2005      	movs	r0, #5
    5ff6:	47b0      	blx	r6
    5ff8:	617c      	str	r4, [r7, #20]
    5ffa:	2005      	movs	r0, #5
    5ffc:	47b0      	blx	r6
    5ffe:	2707      	movs	r7, #7
	I2C_SENDADDR(0x41, forloop);
    6000:	2640      	movs	r6, #64	; 0x40
    6002:	f8df 907c 	ldr.w	r9, [pc, #124]	; 6080 <I2C_configEXPANDER+0x5a8>
    6006:	9a06      	ldr	r2, [sp, #24]
    6008:	eb09 12c2 	add.w	r2, r9, r2, lsl #7
    600c:	9207      	str	r2, [sp, #28]
    600e:	4d1b      	ldr	r5, [pc, #108]	; (607c <I2C_configEXPANDER+0x5a4>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6010:	9b01      	ldr	r3, [sp, #4]
    6012:	fa03 fa07 	lsl.w	sl, r3, r7
    6016:	f016 0f41 	tst.w	r6, #65	; 0x41
    601a:	9b07      	ldr	r3, [sp, #28]
    601c:	bf14      	ite	ne
    601e:	f8c3 b018 	strne.w	fp, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6022:	f8c3 b014 	streq.w	fp, [r3, #20]
    6026:	2005      	movs	r0, #5
    6028:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    602a:	eb09 080a 	add.w	r8, r9, sl
    602e:	f8c8 4018 	str.w	r4, [r8, #24]
    6032:	2005      	movs	r0, #5
    6034:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6036:	f8c8 4014 	str.w	r4, [r8, #20]
    603a:	2005      	movs	r0, #5
    603c:	47a8      	blx	r5
    603e:	0876      	lsrs	r6, r6, #1
    6040:	3f01      	subs	r7, #1
    6042:	d1e8      	bne.n	6016 <I2C_configEXPANDER+0x53e>
    6044:	4d0e      	ldr	r5, [pc, #56]	; (6080 <I2C_configEXPANDER+0x5a8>)
    6046:	9b02      	ldr	r3, [sp, #8]
    6048:	eb05 16c3 	add.w	r6, r5, r3, lsl #7
    604c:	f8c6 b014 	str.w	fp, [r6, #20]
	I2C_WRITE();
    6050:	2005      	movs	r0, #5
    6052:	4f0a      	ldr	r7, [pc, #40]	; (607c <I2C_configEXPANDER+0x5a4>)
    6054:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6056:	9b01      	ldr	r3, [sp, #4]
    6058:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    605c:	61ac      	str	r4, [r5, #24]
    605e:	2005      	movs	r0, #5
    6060:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6062:	616c      	str	r4, [r5, #20]
    6064:	2005      	movs	r0, #5
    6066:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    6068:	9b03      	ldr	r3, [sp, #12]
    606a:	f8c3 b004 	str.w	fp, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    606e:	9a08      	ldr	r2, [sp, #32]
    6070:	62b2      	str	r2, [r6, #40]	; 0x28
    6072:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6074:	62b2      	str	r2, [r6, #40]	; 0x28
	I2C_WAITACKOP(-2);
    6076:	2005      	movs	r0, #5
    6078:	e008      	b.n	608c <I2C_configEXPANDER+0x5b4>
    607a:	bf00      	nop
    607c:	000015a9 	.word	0x000015a9
    6080:	41008000 	.word	0x41008000
    6084:	00001549 	.word	0x00001549
    6088:	00001557 	.word	0x00001557
    608c:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    608e:	61ac      	str	r4, [r5, #24]
    6090:	2005      	movs	r0, #5
    6092:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    6094:	a811      	add	r0, sp, #68	; 0x44
    6096:	4ba8      	ldr	r3, [pc, #672]	; (6338 <I2C_configEXPANDER+0x860>)
    6098:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    609a:	9b03      	ldr	r3, [sp, #12]
    609c:	681a      	ldr	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    609e:	6a33      	ldr	r3, [r6, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    60a0:	6935      	ldr	r5, [r6, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    60a2:	405d      	eors	r5, r3
    60a4:	4015      	ands	r5, r2
    60a6:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    60a8:	a811      	add	r0, sp, #68	; 0x44
    60aa:	4ba4      	ldr	r3, [pc, #656]	; (633c <I2C_configEXPANDER+0x864>)
    60ac:	4798      	blx	r3
    60ae:	ea1b 0f05 	tst.w	fp, r5
    60b2:	f040 817b 	bne.w	63ac <I2C_configEXPANDER+0x8d4>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    60b6:	4da2      	ldr	r5, [pc, #648]	; (6340 <I2C_configEXPANDER+0x868>)
    60b8:	9b01      	ldr	r3, [sp, #4]
    60ba:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    60be:	615c      	str	r4, [r3, #20]
    60c0:	2005      	movs	r0, #5
    60c2:	4ea0      	ldr	r6, [pc, #640]	; (6344 <I2C_configEXPANDER+0x86c>)
    60c4:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    60c6:	9a02      	ldr	r2, [sp, #8]
    60c8:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    60cc:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    60d0:	9a04      	ldr	r2, [sp, #16]
    60d2:	62aa      	str	r2, [r5, #40]	; 0x28
    60d4:	9a05      	ldr	r2, [sp, #20]
    60d6:	62aa      	str	r2, [r5, #40]	; 0x28
    60d8:	2005      	movs	r0, #5
    60da:	47b0      	blx	r6
    60dc:	2608      	movs	r6, #8
	I2C_SENDDATA(0x03, forloop);
    60de:	2580      	movs	r5, #128	; 0x80
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    60e0:	f8df 925c 	ldr.w	r9, [pc, #604]	; 6340 <I2C_configEXPANDER+0x868>
    60e4:	9a06      	ldr	r2, [sp, #24]
    60e6:	eb09 12c2 	add.w	r2, r9, r2, lsl #7
    60ea:	9207      	str	r2, [sp, #28]
    60ec:	4f95      	ldr	r7, [pc, #596]	; (6344 <I2C_configEXPANDER+0x86c>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    60ee:	9b01      	ldr	r3, [sp, #4]
    60f0:	ea4f 1ac3 	mov.w	sl, r3, lsl #7
    60f4:	f015 0f03 	tst.w	r5, #3
    60f8:	9b07      	ldr	r3, [sp, #28]
    60fa:	bf14      	ite	ne
    60fc:	f8c3 b018 	strne.w	fp, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6100:	f8c3 b014 	streq.w	fp, [r3, #20]
    6104:	2005      	movs	r0, #5
    6106:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6108:	eb09 080a 	add.w	r8, r9, sl
    610c:	f8c8 4018 	str.w	r4, [r8, #24]
    6110:	2005      	movs	r0, #5
    6112:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6114:	f8c8 4014 	str.w	r4, [r8, #20]
    6118:	2005      	movs	r0, #5
    611a:	47b8      	blx	r7
    611c:	086d      	lsrs	r5, r5, #1
    611e:	3e01      	subs	r6, #1
    6120:	d1e8      	bne.n	60f4 <I2C_configEXPANDER+0x61c>
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    6122:	9b03      	ldr	r3, [sp, #12]
    6124:	f8c3 b004 	str.w	fp, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6128:	4e85      	ldr	r6, [pc, #532]	; (6340 <I2C_configEXPANDER+0x868>)
    612a:	9a02      	ldr	r2, [sp, #8]
    612c:	eb06 15c2 	add.w	r5, r6, r2, lsl #7
    6130:	9a08      	ldr	r2, [sp, #32]
    6132:	62aa      	str	r2, [r5, #40]	; 0x28
    6134:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6136:	62aa      	str	r2, [r5, #40]	; 0x28
	I2C_WAITACKOP(-3);
    6138:	2005      	movs	r0, #5
    613a:	4f82      	ldr	r7, [pc, #520]	; (6344 <I2C_configEXPANDER+0x86c>)
    613c:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    613e:	9a01      	ldr	r2, [sp, #4]
    6140:	eb06 16c2 	add.w	r6, r6, r2, lsl #7
    6144:	61b4      	str	r4, [r6, #24]
    6146:	2005      	movs	r0, #5
    6148:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    614a:	a812      	add	r0, sp, #72	; 0x48
    614c:	4b7a      	ldr	r3, [pc, #488]	; (6338 <I2C_configEXPANDER+0x860>)
    614e:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    6150:	9b03      	ldr	r3, [sp, #12]
    6152:	681a      	ldr	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    6154:	6a2b      	ldr	r3, [r5, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    6156:	692d      	ldr	r5, [r5, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    6158:	405d      	eors	r5, r3
    615a:	4015      	ands	r5, r2
    615c:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    615e:	a812      	add	r0, sp, #72	; 0x48
    6160:	4b76      	ldr	r3, [pc, #472]	; (633c <I2C_configEXPANDER+0x864>)
    6162:	4798      	blx	r3
    6164:	ea1b 0f05 	tst.w	fp, r5
    6168:	f040 8139 	bne.w	63de <I2C_configEXPANDER+0x906>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    616c:	4d74      	ldr	r5, [pc, #464]	; (6340 <I2C_configEXPANDER+0x868>)
    616e:	9b01      	ldr	r3, [sp, #4]
    6170:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    6174:	615c      	str	r4, [r3, #20]
    6176:	2005      	movs	r0, #5
    6178:	4e72      	ldr	r6, [pc, #456]	; (6344 <I2C_configEXPANDER+0x86c>)
    617a:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    617c:	9a02      	ldr	r2, [sp, #8]
    617e:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    6182:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6186:	9a04      	ldr	r2, [sp, #16]
    6188:	62aa      	str	r2, [r5, #40]	; 0x28
    618a:	9a05      	ldr	r2, [sp, #20]
    618c:	62aa      	str	r2, [r5, #40]	; 0x28
    618e:	2005      	movs	r0, #5
    6190:	47b0      	blx	r6
    6192:	2708      	movs	r7, #8
	I2C_SENDDATA(0xC0, forloop);
    6194:	2680      	movs	r6, #128	; 0x80
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6196:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 6340 <I2C_configEXPANDER+0x868>
    619a:	9a06      	ldr	r2, [sp, #24]
    619c:	eb09 12c2 	add.w	r2, r9, r2, lsl #7
    61a0:	9206      	str	r2, [sp, #24]
    61a2:	4d68      	ldr	r5, [pc, #416]	; (6344 <I2C_configEXPANDER+0x86c>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    61a4:	9b01      	ldr	r3, [sp, #4]
    61a6:	ea4f 1ac3 	mov.w	sl, r3, lsl #7
    61aa:	f016 0fc0 	tst.w	r6, #192	; 0xc0
    61ae:	9b06      	ldr	r3, [sp, #24]
    61b0:	bf14      	ite	ne
    61b2:	f8c3 b018 	strne.w	fp, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    61b6:	f8c3 b014 	streq.w	fp, [r3, #20]
    61ba:	2005      	movs	r0, #5
    61bc:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    61be:	eb09 080a 	add.w	r8, r9, sl
    61c2:	f8c8 4018 	str.w	r4, [r8, #24]
    61c6:	2005      	movs	r0, #5
    61c8:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    61ca:	f8c8 4014 	str.w	r4, [r8, #20]
    61ce:	2005      	movs	r0, #5
    61d0:	47a8      	blx	r5
    61d2:	0876      	lsrs	r6, r6, #1
    61d4:	3f01      	subs	r7, #1
    61d6:	d1e8      	bne.n	61aa <I2C_configEXPANDER+0x6d2>
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    61d8:	9b03      	ldr	r3, [sp, #12]
    61da:	f8c3 b004 	str.w	fp, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    61de:	4e58      	ldr	r6, [pc, #352]	; (6340 <I2C_configEXPANDER+0x868>)
    61e0:	9a02      	ldr	r2, [sp, #8]
    61e2:	eb06 15c2 	add.w	r5, r6, r2, lsl #7
    61e6:	9a08      	ldr	r2, [sp, #32]
    61e8:	62aa      	str	r2, [r5, #40]	; 0x28
    61ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
    61ec:	62aa      	str	r2, [r5, #40]	; 0x28
	I2C_WAITACKOP(-4);		
    61ee:	2005      	movs	r0, #5
    61f0:	4f54      	ldr	r7, [pc, #336]	; (6344 <I2C_configEXPANDER+0x86c>)
    61f2:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    61f4:	9a01      	ldr	r2, [sp, #4]
    61f6:	eb06 16c2 	add.w	r6, r6, r2, lsl #7
    61fa:	61b4      	str	r4, [r6, #24]
    61fc:	2005      	movs	r0, #5
    61fe:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    6200:	a813      	add	r0, sp, #76	; 0x4c
    6202:	4b4d      	ldr	r3, [pc, #308]	; (6338 <I2C_configEXPANDER+0x860>)
    6204:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    6206:	9b03      	ldr	r3, [sp, #12]
    6208:	681a      	ldr	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    620a:	6a2b      	ldr	r3, [r5, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    620c:	692d      	ldr	r5, [r5, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    620e:	405d      	eors	r5, r3
    6210:	4015      	ands	r5, r2
    6212:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    6214:	a813      	add	r0, sp, #76	; 0x4c
    6216:	4b49      	ldr	r3, [pc, #292]	; (633c <I2C_configEXPANDER+0x864>)
    6218:	4798      	blx	r3
    621a:	ea1b 0f05 	tst.w	fp, r5
    621e:	f040 80f7 	bne.w	6410 <I2C_configEXPANDER+0x938>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6222:	4d47      	ldr	r5, [pc, #284]	; (6340 <I2C_configEXPANDER+0x868>)
    6224:	9b01      	ldr	r3, [sp, #4]
    6226:	eb05 17c3 	add.w	r7, r5, r3, lsl #7
    622a:	617c      	str	r4, [r7, #20]
    622c:	2005      	movs	r0, #5
    622e:	4e45      	ldr	r6, [pc, #276]	; (6344 <I2C_configEXPANDER+0x86c>)
    6230:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6232:	9b02      	ldr	r3, [sp, #8]
    6234:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    6238:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    623c:	9b04      	ldr	r3, [sp, #16]
    623e:	62ab      	str	r3, [r5, #40]	; 0x28
    6240:	9a05      	ldr	r2, [sp, #20]
    6242:	62aa      	str	r2, [r5, #40]	; 0x28
    6244:	2005      	movs	r0, #5
    6246:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6248:	61bc      	str	r4, [r7, #24]
	
	/* If successful, and code execution got here, the close the I2C channel */
	I2C_STOP();
    624a:	2005      	movs	r0, #5
    624c:	47b0      	blx	r6
    624e:	f8c5 b018 	str.w	fp, [r5, #24]
    6252:	2005      	movs	r0, #5
    6254:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6256:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    625a:	9b04      	ldr	r3, [sp, #16]
    625c:	62ab      	str	r3, [r5, #40]	; 0x28
    625e:	9a05      	ldr	r2, [sp, #20]
    6260:	62aa      	str	r2, [r5, #40]	; 0x28
    6262:	2005      	movs	r0, #5
    6264:	47b0      	blx	r6
	I2C_CLOSE();
	
	return 0;
    6266:	2000      	movs	r0, #0
}
    6268:	b015      	add	sp, #84	; 0x54
    626a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    626e:	4d34      	ldr	r5, [pc, #208]	; (6340 <I2C_configEXPANDER+0x868>)
    6270:	9b01      	ldr	r3, [sp, #4]
    6272:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    6276:	619c      	str	r4, [r3, #24]
	I2C_WAITACKOP(-2);
    6278:	2005      	movs	r0, #5
    627a:	47b8      	blx	r7
    627c:	9b02      	ldr	r3, [sp, #8]
    627e:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    6282:	f8c5 b018 	str.w	fp, [r5, #24]
    6286:	2005      	movs	r0, #5
    6288:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    628a:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    628e:	9b04      	ldr	r3, [sp, #16]
    6290:	62ab      	str	r3, [r5, #40]	; 0x28
    6292:	9b05      	ldr	r3, [sp, #20]
    6294:	62ab      	str	r3, [r5, #40]	; 0x28
    6296:	2005      	movs	r0, #5
    6298:	47b8      	blx	r7
    629a:	f06f 0001 	mvn.w	r0, #1
    629e:	e7e3      	b.n	6268 <I2C_configEXPANDER+0x790>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    62a0:	4d27      	ldr	r5, [pc, #156]	; (6340 <I2C_configEXPANDER+0x868>)
    62a2:	9b01      	ldr	r3, [sp, #4]
    62a4:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    62a8:	619c      	str	r4, [r3, #24]
	I2C_WAITACKOP(-3);
    62aa:	2005      	movs	r0, #5
    62ac:	47b8      	blx	r7
    62ae:	9b02      	ldr	r3, [sp, #8]
    62b0:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    62b4:	f8c5 b018 	str.w	fp, [r5, #24]
    62b8:	2005      	movs	r0, #5
    62ba:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    62bc:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    62c0:	9b04      	ldr	r3, [sp, #16]
    62c2:	62ab      	str	r3, [r5, #40]	; 0x28
    62c4:	9b05      	ldr	r3, [sp, #20]
    62c6:	62ab      	str	r3, [r5, #40]	; 0x28
    62c8:	2005      	movs	r0, #5
    62ca:	47b8      	blx	r7
    62cc:	f06f 0002 	mvn.w	r0, #2
    62d0:	e7ca      	b.n	6268 <I2C_configEXPANDER+0x790>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    62d2:	4d1b      	ldr	r5, [pc, #108]	; (6340 <I2C_configEXPANDER+0x868>)
    62d4:	9b01      	ldr	r3, [sp, #4]
    62d6:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    62da:	619c      	str	r4, [r3, #24]
	I2C_WAITACKOP(-4);
    62dc:	2005      	movs	r0, #5
    62de:	47b8      	blx	r7
    62e0:	9b02      	ldr	r3, [sp, #8]
    62e2:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    62e6:	f8c5 b018 	str.w	fp, [r5, #24]
    62ea:	2005      	movs	r0, #5
    62ec:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    62ee:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    62f2:	9b04      	ldr	r3, [sp, #16]
    62f4:	62ab      	str	r3, [r5, #40]	; 0x28
    62f6:	9b05      	ldr	r3, [sp, #20]
    62f8:	62ab      	str	r3, [r5, #40]	; 0x28
    62fa:	2005      	movs	r0, #5
    62fc:	47b8      	blx	r7
    62fe:	f06f 0003 	mvn.w	r0, #3
    6302:	e7b1      	b.n	6268 <I2C_configEXPANDER+0x790>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6304:	4d0e      	ldr	r5, [pc, #56]	; (6340 <I2C_configEXPANDER+0x868>)
    6306:	9b01      	ldr	r3, [sp, #4]
    6308:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    630c:	619c      	str	r4, [r3, #24]
	I2C_WAITACKOP(-2);
    630e:	2005      	movs	r0, #5
    6310:	47b8      	blx	r7
    6312:	9b02      	ldr	r3, [sp, #8]
    6314:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    6318:	f8c5 b018 	str.w	fp, [r5, #24]
    631c:	2005      	movs	r0, #5
    631e:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6320:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6324:	9b04      	ldr	r3, [sp, #16]
    6326:	62ab      	str	r3, [r5, #40]	; 0x28
    6328:	9b05      	ldr	r3, [sp, #20]
    632a:	62ab      	str	r3, [r5, #40]	; 0x28
    632c:	2005      	movs	r0, #5
    632e:	47b8      	blx	r7
    6330:	f06f 0001 	mvn.w	r0, #1
    6334:	e798      	b.n	6268 <I2C_configEXPANDER+0x790>
    6336:	bf00      	nop
    6338:	00001549 	.word	0x00001549
    633c:	00001557 	.word	0x00001557
    6340:	41008000 	.word	0x41008000
    6344:	000015a9 	.word	0x000015a9
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6348:	4d3e      	ldr	r5, [pc, #248]	; (6444 <I2C_configEXPANDER+0x96c>)
    634a:	9b01      	ldr	r3, [sp, #4]
    634c:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    6350:	619c      	str	r4, [r3, #24]
	I2C_WAITACKOP(-3);
    6352:	2005      	movs	r0, #5
    6354:	47b8      	blx	r7
    6356:	9b02      	ldr	r3, [sp, #8]
    6358:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    635c:	f8c5 b018 	str.w	fp, [r5, #24]
    6360:	2005      	movs	r0, #5
    6362:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6364:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6368:	9b04      	ldr	r3, [sp, #16]
    636a:	62ab      	str	r3, [r5, #40]	; 0x28
    636c:	9b05      	ldr	r3, [sp, #20]
    636e:	62ab      	str	r3, [r5, #40]	; 0x28
    6370:	2005      	movs	r0, #5
    6372:	47b8      	blx	r7
    6374:	f06f 0002 	mvn.w	r0, #2
    6378:	e776      	b.n	6268 <I2C_configEXPANDER+0x790>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    637a:	4d32      	ldr	r5, [pc, #200]	; (6444 <I2C_configEXPANDER+0x96c>)
    637c:	9b01      	ldr	r3, [sp, #4]
    637e:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    6382:	619c      	str	r4, [r3, #24]
	I2C_WAITACKOP(-4);
    6384:	2005      	movs	r0, #5
    6386:	47b8      	blx	r7
    6388:	9b02      	ldr	r3, [sp, #8]
    638a:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    638e:	f8c5 b018 	str.w	fp, [r5, #24]
    6392:	2005      	movs	r0, #5
    6394:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6396:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    639a:	9b04      	ldr	r3, [sp, #16]
    639c:	62ab      	str	r3, [r5, #40]	; 0x28
    639e:	9b05      	ldr	r3, [sp, #20]
    63a0:	62ab      	str	r3, [r5, #40]	; 0x28
    63a2:	2005      	movs	r0, #5
    63a4:	47b8      	blx	r7
    63a6:	f06f 0003 	mvn.w	r0, #3
    63aa:	e75d      	b.n	6268 <I2C_configEXPANDER+0x790>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    63ac:	4d25      	ldr	r5, [pc, #148]	; (6444 <I2C_configEXPANDER+0x96c>)
    63ae:	9b01      	ldr	r3, [sp, #4]
    63b0:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    63b4:	619c      	str	r4, [r3, #24]
	I2C_WAITACKOP(-2);
    63b6:	2005      	movs	r0, #5
    63b8:	47b8      	blx	r7
    63ba:	9b02      	ldr	r3, [sp, #8]
    63bc:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    63c0:	f8c5 b018 	str.w	fp, [r5, #24]
    63c4:	2005      	movs	r0, #5
    63c6:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    63c8:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    63cc:	9b04      	ldr	r3, [sp, #16]
    63ce:	62ab      	str	r3, [r5, #40]	; 0x28
    63d0:	9b05      	ldr	r3, [sp, #20]
    63d2:	62ab      	str	r3, [r5, #40]	; 0x28
    63d4:	2005      	movs	r0, #5
    63d6:	47b8      	blx	r7
    63d8:	f06f 0001 	mvn.w	r0, #1
    63dc:	e744      	b.n	6268 <I2C_configEXPANDER+0x790>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    63de:	4d19      	ldr	r5, [pc, #100]	; (6444 <I2C_configEXPANDER+0x96c>)
    63e0:	9b01      	ldr	r3, [sp, #4]
    63e2:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    63e6:	619c      	str	r4, [r3, #24]
	I2C_WAITACKOP(-3);
    63e8:	2005      	movs	r0, #5
    63ea:	47b8      	blx	r7
    63ec:	9b02      	ldr	r3, [sp, #8]
    63ee:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    63f2:	f8c5 b018 	str.w	fp, [r5, #24]
    63f6:	2005      	movs	r0, #5
    63f8:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    63fa:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    63fe:	9b04      	ldr	r3, [sp, #16]
    6400:	62ab      	str	r3, [r5, #40]	; 0x28
    6402:	9b05      	ldr	r3, [sp, #20]
    6404:	62ab      	str	r3, [r5, #40]	; 0x28
    6406:	2005      	movs	r0, #5
    6408:	47b8      	blx	r7
    640a:	f06f 0002 	mvn.w	r0, #2
    640e:	e72b      	b.n	6268 <I2C_configEXPANDER+0x790>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6410:	4d0c      	ldr	r5, [pc, #48]	; (6444 <I2C_configEXPANDER+0x96c>)
    6412:	9b01      	ldr	r3, [sp, #4]
    6414:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    6418:	619c      	str	r4, [r3, #24]
	I2C_WAITACKOP(-4);		
    641a:	2005      	movs	r0, #5
    641c:	47b8      	blx	r7
    641e:	9b02      	ldr	r3, [sp, #8]
    6420:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    6424:	f8c5 b018 	str.w	fp, [r5, #24]
    6428:	2005      	movs	r0, #5
    642a:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    642c:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6430:	9b04      	ldr	r3, [sp, #16]
    6432:	62ab      	str	r3, [r5, #40]	; 0x28
    6434:	9b05      	ldr	r3, [sp, #20]
    6436:	62ab      	str	r3, [r5, #40]	; 0x28
    6438:	2005      	movs	r0, #5
    643a:	47b8      	blx	r7
    643c:	f06f 0003 	mvn.w	r0, #3
    6440:	e712      	b.n	6268 <I2C_configEXPANDER+0x790>
    6442:	bf00      	nop
    6444:	41008000 	.word	0x41008000

00006448 <I2C_setEXPANDER>:
// * CALLED BY:			  main()                                                                                                       *
// * CALLS:		          No function. ALL macros defined in this function file.                                                       *
// * --------------------------------------------------------------------------------------------------------------------------------- *
int I2C_setEXPANDER(uint8_t sda,  uint8_t clk, unsigned char relay)

{
    6448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    644c:	b08f      	sub	sp, #60	; 0x3c
    644e:	9202      	str	r2, [sp, #8]
    6450:	f001 041f 	and.w	r4, r1, #31
    6454:	2301      	movs	r3, #1
    6456:	fa03 f404 	lsl.w	r4, r3, r4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    645a:	094a      	lsrs	r2, r1, #5
    645c:	4db0      	ldr	r5, [pc, #704]	; (6720 <I2C_setEXPANDER+0x2d8>)
    645e:	9200      	str	r2, [sp, #0]
    6460:	eb05 17c2 	add.w	r7, r5, r2, lsl #7
    6464:	61bc      	str	r4, [r7, #24]
    6466:	0942      	lsrs	r2, r0, #5
    6468:	9203      	str	r2, [sp, #12]
    646a:	f000 001f 	and.w	r0, r0, #31
    646e:	fa03 fa00 	lsl.w	sl, r3, r0
    6472:	9207      	str	r2, [sp, #28]
    6474:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    6478:	f8c5 a018 	str.w	sl, [r5, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    647c:	f8c5 a008 	str.w	sl, [r5, #8]
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    6480:	fa1f f38a 	uxth.w	r3, sl
    6484:	9308      	str	r3, [sp, #32]
    6486:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    648a:	9305      	str	r3, [sp, #20]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    648c:	62ab      	str	r3, [r5, #40]	; 0x28
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    648e:	ea4f 431a 	mov.w	r3, sl, lsr #16
    6492:	9309      	str	r3, [sp, #36]	; 0x24
		hri_port_write_WRCONFIG_reg(
    6494:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    6498:	9306      	str	r3, [sp, #24]
    649a:	62ab      	str	r3, [r5, #40]	; 0x28
	uint8_t     		i2csda, i2cclk;
	unsigned char		forloop;

	/* Open an I2C channel, send address 0x41, index register 0x01 then send the relay output value */
	I2C_OPEN(sda, clk);
	I2C_START(-1);
    649c:	2005      	movs	r0, #5
    649e:	4ea1      	ldr	r6, [pc, #644]	; (6724 <I2C_setEXPANDER+0x2dc>)
    64a0:	47b0      	blx	r6
    64a2:	2005      	movs	r0, #5
    64a4:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    64a6:	f8c5 a014 	str.w	sl, [r5, #20]
    64aa:	2005      	movs	r0, #5
    64ac:	47b0      	blx	r6
    64ae:	617c      	str	r4, [r7, #20]
    64b0:	2005      	movs	r0, #5
    64b2:	47b0      	blx	r6
    64b4:	2707      	movs	r7, #7
	I2C_SENDADDR(0x41, forloop);
    64b6:	2640      	movs	r6, #64	; 0x40
    64b8:	f8df 9264 	ldr.w	r9, [pc, #612]	; 6720 <I2C_setEXPANDER+0x2d8>
    64bc:	9a07      	ldr	r2, [sp, #28]
    64be:	eb09 1bc2 	add.w	fp, r9, r2, lsl #7
    64c2:	4d98      	ldr	r5, [pc, #608]	; (6724 <I2C_setEXPANDER+0x2dc>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    64c4:	9900      	ldr	r1, [sp, #0]
    64c6:	fa01 f307 	lsl.w	r3, r1, r7
    64ca:	9301      	str	r3, [sp, #4]
    64cc:	f016 0f41 	tst.w	r6, #65	; 0x41
    64d0:	bf14      	ite	ne
    64d2:	f8cb a018 	strne.w	sl, [fp, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    64d6:	f8cb a014 	streq.w	sl, [fp, #20]
    64da:	2005      	movs	r0, #5
    64dc:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    64de:	9b01      	ldr	r3, [sp, #4]
    64e0:	eb09 0803 	add.w	r8, r9, r3
    64e4:	f8c8 4018 	str.w	r4, [r8, #24]
    64e8:	2005      	movs	r0, #5
    64ea:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    64ec:	f8c8 4014 	str.w	r4, [r8, #20]
    64f0:	2005      	movs	r0, #5
    64f2:	47a8      	blx	r5
    64f4:	0876      	lsrs	r6, r6, #1
    64f6:	3f01      	subs	r7, #1
    64f8:	d1e8      	bne.n	64cc <I2C_setEXPANDER+0x84>
    64fa:	4d89      	ldr	r5, [pc, #548]	; (6720 <I2C_setEXPANDER+0x2d8>)
    64fc:	9b03      	ldr	r3, [sp, #12]
    64fe:	eb05 16c3 	add.w	r6, r5, r3, lsl #7
    6502:	f8c6 a014 	str.w	sl, [r6, #20]
	I2C_WRITE();
    6506:	2005      	movs	r0, #5
    6508:	4f86      	ldr	r7, [pc, #536]	; (6724 <I2C_setEXPANDER+0x2dc>)
    650a:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    650c:	9a00      	ldr	r2, [sp, #0]
    650e:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    6512:	61ac      	str	r4, [r5, #24]
    6514:	2005      	movs	r0, #5
    6516:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6518:	616c      	str	r4, [r5, #20]
    651a:	2005      	movs	r0, #5
    651c:	47b8      	blx	r7
    651e:	9b03      	ldr	r3, [sp, #12]
    6520:	01db      	lsls	r3, r3, #7
    6522:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    6526:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    652a:	9304      	str	r3, [sp, #16]
    652c:	f8c3 a004 	str.w	sl, [r3, #4]
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    6530:	9908      	ldr	r1, [sp, #32]
    6532:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    6536:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
    653a:	9108      	str	r1, [sp, #32]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    653c:	62b1      	str	r1, [r6, #40]	; 0x28
		hri_port_write_WRCONFIG_reg(PORT,
    653e:	9909      	ldr	r1, [sp, #36]	; 0x24
    6540:	f041 4140 	orr.w	r1, r1, #3221225472	; 0xc0000000
    6544:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
    6548:	9109      	str	r1, [sp, #36]	; 0x24
    654a:	62b1      	str	r1, [r6, #40]	; 0x28
	I2C_WAITACKOP(-2);
    654c:	2005      	movs	r0, #5
    654e:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6550:	61ac      	str	r4, [r5, #24]
    6552:	2005      	movs	r0, #5
    6554:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    6556:	a80b      	add	r0, sp, #44	; 0x2c
    6558:	4b73      	ldr	r3, [pc, #460]	; (6728 <I2C_setEXPANDER+0x2e0>)
    655a:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    655c:	9a04      	ldr	r2, [sp, #16]
    655e:	6812      	ldr	r2, [r2, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    6560:	6a33      	ldr	r3, [r6, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    6562:	6935      	ldr	r5, [r6, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    6564:	405d      	eors	r5, r3
    6566:	4015      	ands	r5, r2
    6568:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    656a:	a80b      	add	r0, sp, #44	; 0x2c
    656c:	4b6f      	ldr	r3, [pc, #444]	; (672c <I2C_setEXPANDER+0x2e4>)
    656e:	4798      	blx	r3
    6570:	ea1a 0f05 	tst.w	sl, r5
    6574:	f040 80e8 	bne.w	6748 <I2C_setEXPANDER+0x300>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6578:	4d69      	ldr	r5, [pc, #420]	; (6720 <I2C_setEXPANDER+0x2d8>)
    657a:	9b00      	ldr	r3, [sp, #0]
    657c:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    6580:	615c      	str	r4, [r3, #20]
    6582:	2005      	movs	r0, #5
    6584:	4e67      	ldr	r6, [pc, #412]	; (6724 <I2C_setEXPANDER+0x2dc>)
    6586:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6588:	9a03      	ldr	r2, [sp, #12]
    658a:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    658e:	f8c5 a008 	str.w	sl, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6592:	9a05      	ldr	r2, [sp, #20]
    6594:	62aa      	str	r2, [r5, #40]	; 0x28
    6596:	9a06      	ldr	r2, [sp, #24]
    6598:	62aa      	str	r2, [r5, #40]	; 0x28
    659a:	2005      	movs	r0, #5
    659c:	47b0      	blx	r6
    659e:	2508      	movs	r5, #8
	I2C_SENDDATA(0x01, forloop);
    65a0:	2780      	movs	r7, #128	; 0x80
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    65a2:	f8df 917c 	ldr.w	r9, [pc, #380]	; 6720 <I2C_setEXPANDER+0x2d8>
    65a6:	9a07      	ldr	r2, [sp, #28]
    65a8:	eb09 12c2 	add.w	r2, r9, r2, lsl #7
    65ac:	9201      	str	r2, [sp, #4]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    65ae:	9b00      	ldr	r3, [sp, #0]
    65b0:	ea4f 1bc3 	mov.w	fp, r3, lsl #7
    65b4:	f017 0f01 	tst.w	r7, #1
    65b8:	9b01      	ldr	r3, [sp, #4]
    65ba:	bf14      	ite	ne
    65bc:	f8c3 a018 	strne.w	sl, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    65c0:	f8c3 a014 	streq.w	sl, [r3, #20]
    65c4:	2005      	movs	r0, #5
    65c6:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    65c8:	eb09 080b 	add.w	r8, r9, fp
    65cc:	f8c8 4018 	str.w	r4, [r8, #24]
    65d0:	2005      	movs	r0, #5
    65d2:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    65d4:	f8c8 4014 	str.w	r4, [r8, #20]
    65d8:	2005      	movs	r0, #5
    65da:	47b0      	blx	r6
    65dc:	087f      	lsrs	r7, r7, #1
    65de:	3d01      	subs	r5, #1
    65e0:	d1e8      	bne.n	65b4 <I2C_setEXPANDER+0x16c>
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    65e2:	9b04      	ldr	r3, [sp, #16]
    65e4:	f8c3 a004 	str.w	sl, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    65e8:	4e4d      	ldr	r6, [pc, #308]	; (6720 <I2C_setEXPANDER+0x2d8>)
    65ea:	9a03      	ldr	r2, [sp, #12]
    65ec:	eb06 15c2 	add.w	r5, r6, r2, lsl #7
    65f0:	9a08      	ldr	r2, [sp, #32]
    65f2:	62aa      	str	r2, [r5, #40]	; 0x28
    65f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    65f6:	62aa      	str	r2, [r5, #40]	; 0x28
	I2C_WAITACKOP(-3);
    65f8:	2005      	movs	r0, #5
    65fa:	4f4a      	ldr	r7, [pc, #296]	; (6724 <I2C_setEXPANDER+0x2dc>)
    65fc:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    65fe:	9a00      	ldr	r2, [sp, #0]
    6600:	eb06 16c2 	add.w	r6, r6, r2, lsl #7
    6604:	61b4      	str	r4, [r6, #24]
    6606:	2005      	movs	r0, #5
    6608:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    660a:	a80c      	add	r0, sp, #48	; 0x30
    660c:	4b46      	ldr	r3, [pc, #280]	; (6728 <I2C_setEXPANDER+0x2e0>)
    660e:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    6610:	9b04      	ldr	r3, [sp, #16]
    6612:	681a      	ldr	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    6614:	6a2b      	ldr	r3, [r5, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    6616:	692d      	ldr	r5, [r5, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    6618:	405d      	eors	r5, r3
    661a:	4015      	ands	r5, r2
    661c:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    661e:	a80c      	add	r0, sp, #48	; 0x30
    6620:	4b42      	ldr	r3, [pc, #264]	; (672c <I2C_setEXPANDER+0x2e4>)
    6622:	4798      	blx	r3
    6624:	ea1a 0f05 	tst.w	sl, r5
    6628:	f040 80a7 	bne.w	677a <I2C_setEXPANDER+0x332>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    662c:	4d3c      	ldr	r5, [pc, #240]	; (6720 <I2C_setEXPANDER+0x2d8>)
    662e:	9b00      	ldr	r3, [sp, #0]
    6630:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    6634:	615c      	str	r4, [r3, #20]
    6636:	2005      	movs	r0, #5
    6638:	4e3a      	ldr	r6, [pc, #232]	; (6724 <I2C_setEXPANDER+0x2dc>)
    663a:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    663c:	9a03      	ldr	r2, [sp, #12]
    663e:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    6642:	f8c5 a008 	str.w	sl, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6646:	9a05      	ldr	r2, [sp, #20]
    6648:	62aa      	str	r2, [r5, #40]	; 0x28
    664a:	9a06      	ldr	r2, [sp, #24]
    664c:	62aa      	str	r2, [r5, #40]	; 0x28
    664e:	2005      	movs	r0, #5
    6650:	47b0      	blx	r6
    6652:	2608      	movs	r6, #8
	I2C_SENDDATA(relay, forloop);
    6654:	2580      	movs	r5, #128	; 0x80
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6656:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 6720 <I2C_setEXPANDER+0x2d8>
    665a:	9a07      	ldr	r2, [sp, #28]
    665c:	eb0b 12c2 	add.w	r2, fp, r2, lsl #7
    6660:	9201      	str	r2, [sp, #4]
    6662:	4f30      	ldr	r7, [pc, #192]	; (6724 <I2C_setEXPANDER+0x2dc>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6664:	9b00      	ldr	r3, [sp, #0]
    6666:	ea4f 19c3 	mov.w	r9, r3, lsl #7
    666a:	46a0      	mov	r8, r4
    666c:	9b02      	ldr	r3, [sp, #8]
    666e:	422b      	tst	r3, r5
    6670:	9b01      	ldr	r3, [sp, #4]
    6672:	bf14      	ite	ne
    6674:	f8c3 a018 	strne.w	sl, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6678:	f8c3 a014 	streq.w	sl, [r3, #20]
    667c:	2005      	movs	r0, #5
    667e:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6680:	eb0b 0409 	add.w	r4, fp, r9
    6684:	f8c4 8018 	str.w	r8, [r4, #24]
    6688:	2005      	movs	r0, #5
    668a:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    668c:	f8c4 8014 	str.w	r8, [r4, #20]
    6690:	2005      	movs	r0, #5
    6692:	47b8      	blx	r7
    6694:	086d      	lsrs	r5, r5, #1
    6696:	3e01      	subs	r6, #1
    6698:	d1e8      	bne.n	666c <I2C_setEXPANDER+0x224>
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    669a:	9b04      	ldr	r3, [sp, #16]
    669c:	f8c3 a004 	str.w	sl, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    66a0:	4e1f      	ldr	r6, [pc, #124]	; (6720 <I2C_setEXPANDER+0x2d8>)
    66a2:	9a03      	ldr	r2, [sp, #12]
    66a4:	eb06 15c2 	add.w	r5, r6, r2, lsl #7
    66a8:	9a08      	ldr	r2, [sp, #32]
    66aa:	62aa      	str	r2, [r5, #40]	; 0x28
    66ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
    66ae:	62aa      	str	r2, [r5, #40]	; 0x28
	I2C_WAITACKOP(-4);
    66b0:	2005      	movs	r0, #5
    66b2:	4f1c      	ldr	r7, [pc, #112]	; (6724 <I2C_setEXPANDER+0x2dc>)
    66b4:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    66b6:	9a00      	ldr	r2, [sp, #0]
    66b8:	eb06 16c2 	add.w	r6, r6, r2, lsl #7
    66bc:	f8c6 8018 	str.w	r8, [r6, #24]
    66c0:	2005      	movs	r0, #5
    66c2:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    66c4:	a80d      	add	r0, sp, #52	; 0x34
    66c6:	4b18      	ldr	r3, [pc, #96]	; (6728 <I2C_setEXPANDER+0x2e0>)
    66c8:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    66ca:	9b04      	ldr	r3, [sp, #16]
    66cc:	681a      	ldr	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    66ce:	6a2b      	ldr	r3, [r5, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    66d0:	692d      	ldr	r5, [r5, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    66d2:	405d      	eors	r5, r3
    66d4:	4015      	ands	r5, r2
    66d6:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    66d8:	a80d      	add	r0, sp, #52	; 0x34
    66da:	4b14      	ldr	r3, [pc, #80]	; (672c <I2C_setEXPANDER+0x2e4>)
    66dc:	4798      	blx	r3
    66de:	ea1a 0f05 	tst.w	sl, r5
    66e2:	d163      	bne.n	67ac <I2C_setEXPANDER+0x364>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    66e4:	4d0e      	ldr	r5, [pc, #56]	; (6720 <I2C_setEXPANDER+0x2d8>)
    66e6:	9b00      	ldr	r3, [sp, #0]
    66e8:	eb05 17c3 	add.w	r7, r5, r3, lsl #7
    66ec:	f8c7 8014 	str.w	r8, [r7, #20]
    66f0:	2005      	movs	r0, #5
    66f2:	4e0c      	ldr	r6, [pc, #48]	; (6724 <I2C_setEXPANDER+0x2dc>)
    66f4:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    66f6:	9b03      	ldr	r3, [sp, #12]
    66f8:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    66fc:	f8c5 a008 	str.w	sl, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6700:	9b05      	ldr	r3, [sp, #20]
    6702:	62ab      	str	r3, [r5, #40]	; 0x28
    6704:	9a06      	ldr	r2, [sp, #24]
    6706:	62aa      	str	r2, [r5, #40]	; 0x28
    6708:	2005      	movs	r0, #5
    670a:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    670c:	f8c7 8018 	str.w	r8, [r7, #24]
	
	/* If successful, and code execution got here, the close the I2C channel */
	I2C_STOP();
    6710:	2005      	movs	r0, #5
    6712:	47b0      	blx	r6
    6714:	f8c5 a018 	str.w	sl, [r5, #24]
    6718:	2005      	movs	r0, #5
    671a:	47b0      	blx	r6
    671c:	e008      	b.n	6730 <I2C_setEXPANDER+0x2e8>
    671e:	bf00      	nop
    6720:	41008000 	.word	0x41008000
    6724:	000015a9 	.word	0x000015a9
    6728:	00001549 	.word	0x00001549
    672c:	00001557 	.word	0x00001557
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6730:	f8c5 a008 	str.w	sl, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6734:	9b05      	ldr	r3, [sp, #20]
    6736:	62ab      	str	r3, [r5, #40]	; 0x28
    6738:	9a06      	ldr	r2, [sp, #24]
    673a:	62aa      	str	r2, [r5, #40]	; 0x28
    673c:	2005      	movs	r0, #5
    673e:	47b0      	blx	r6
	I2C_CLOSE();
	
	return 0;
    6740:	2000      	movs	r0, #0
}
    6742:	b00f      	add	sp, #60	; 0x3c
    6744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6748:	4d25      	ldr	r5, [pc, #148]	; (67e0 <I2C_setEXPANDER+0x398>)
    674a:	9b00      	ldr	r3, [sp, #0]
    674c:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    6750:	619c      	str	r4, [r3, #24]
	I2C_WAITACKOP(-2);
    6752:	2005      	movs	r0, #5
    6754:	47b8      	blx	r7
    6756:	9b03      	ldr	r3, [sp, #12]
    6758:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    675c:	f8c5 a018 	str.w	sl, [r5, #24]
    6760:	2005      	movs	r0, #5
    6762:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6764:	f8c5 a008 	str.w	sl, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6768:	9b05      	ldr	r3, [sp, #20]
    676a:	62ab      	str	r3, [r5, #40]	; 0x28
    676c:	9b06      	ldr	r3, [sp, #24]
    676e:	62ab      	str	r3, [r5, #40]	; 0x28
    6770:	2005      	movs	r0, #5
    6772:	47b8      	blx	r7
    6774:	f06f 0001 	mvn.w	r0, #1
    6778:	e7e3      	b.n	6742 <I2C_setEXPANDER+0x2fa>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    677a:	4d19      	ldr	r5, [pc, #100]	; (67e0 <I2C_setEXPANDER+0x398>)
    677c:	9b00      	ldr	r3, [sp, #0]
    677e:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    6782:	619c      	str	r4, [r3, #24]
	I2C_WAITACKOP(-3);
    6784:	2005      	movs	r0, #5
    6786:	47b8      	blx	r7
    6788:	9b03      	ldr	r3, [sp, #12]
    678a:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    678e:	f8c5 a018 	str.w	sl, [r5, #24]
    6792:	2005      	movs	r0, #5
    6794:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6796:	f8c5 a008 	str.w	sl, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    679a:	9b05      	ldr	r3, [sp, #20]
    679c:	62ab      	str	r3, [r5, #40]	; 0x28
    679e:	9b06      	ldr	r3, [sp, #24]
    67a0:	62ab      	str	r3, [r5, #40]	; 0x28
    67a2:	2005      	movs	r0, #5
    67a4:	47b8      	blx	r7
    67a6:	f06f 0002 	mvn.w	r0, #2
    67aa:	e7ca      	b.n	6742 <I2C_setEXPANDER+0x2fa>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    67ac:	4d0c      	ldr	r5, [pc, #48]	; (67e0 <I2C_setEXPANDER+0x398>)
    67ae:	9b00      	ldr	r3, [sp, #0]
    67b0:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    67b4:	f8c3 8018 	str.w	r8, [r3, #24]
	I2C_WAITACKOP(-4);
    67b8:	2005      	movs	r0, #5
    67ba:	47b8      	blx	r7
    67bc:	9b03      	ldr	r3, [sp, #12]
    67be:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    67c2:	f8c5 a018 	str.w	sl, [r5, #24]
    67c6:	2005      	movs	r0, #5
    67c8:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    67ca:	f8c5 a008 	str.w	sl, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    67ce:	9b05      	ldr	r3, [sp, #20]
    67d0:	62ab      	str	r3, [r5, #40]	; 0x28
    67d2:	9b06      	ldr	r3, [sp, #24]
    67d4:	62ab      	str	r3, [r5, #40]	; 0x28
    67d6:	2005      	movs	r0, #5
    67d8:	47b8      	blx	r7
    67da:	f06f 0003 	mvn.w	r0, #3
    67de:	e7b0      	b.n	6742 <I2C_setEXPANDER+0x2fa>
    67e0:	41008000 	.word	0x41008000

000067e4 <I2C_readEXPANDER>:

{
	uint8_t     		i2csda, i2cclk;
	unsigned char		forloop;

    if (!inputs) {
    67e4:	2a00      	cmp	r2, #0
    67e6:	f000 8208 	beq.w	6bfa <I2C_readEXPANDER+0x416>
{
    67ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    67ee:	b08f      	sub	sp, #60	; 0x3c
    67f0:	9205      	str	r2, [sp, #20]
    67f2:	f001 041f 	and.w	r4, r1, #31
    67f6:	2301      	movs	r3, #1
    67f8:	fa03 f404 	lsl.w	r4, r3, r4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    67fc:	094a      	lsrs	r2, r1, #5
    67fe:	4dab      	ldr	r5, [pc, #684]	; (6aac <I2C_readEXPANDER+0x2c8>)
    6800:	9202      	str	r2, [sp, #8]
    6802:	eb05 17c2 	add.w	r7, r5, r2, lsl #7
    6806:	61bc      	str	r4, [r7, #24]
    6808:	0942      	lsrs	r2, r0, #5
    680a:	9203      	str	r2, [sp, #12]
    680c:	f000 001f 	and.w	r0, r0, #31
    6810:	fa03 fb00 	lsl.w	fp, r3, r0
    6814:	9201      	str	r2, [sp, #4]
    6816:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    681a:	f8c5 b018 	str.w	fp, [r5, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    681e:	f8c5 b008 	str.w	fp, [r5, #8]
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    6822:	fa1f f38b 	uxth.w	r3, fp
    6826:	9304      	str	r3, [sp, #16]
    6828:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    682c:	9306      	str	r3, [sp, #24]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    682e:	62ab      	str	r3, [r5, #40]	; 0x28
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    6830:	ea4f 431b 	mov.w	r3, fp, lsr #16
    6834:	9309      	str	r3, [sp, #36]	; 0x24
		hri_port_write_WRCONFIG_reg(
    6836:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    683a:	9307      	str	r3, [sp, #28]
    683c:	62ab      	str	r3, [r5, #40]	; 0x28
		return -1;	
	}

	/* Open an I2C channel, send address 0x41, index register 0x00 then read the input value */
	I2C_OPEN(sda, clk);
	I2C_START(-2);
    683e:	2005      	movs	r0, #5
    6840:	4e9b      	ldr	r6, [pc, #620]	; (6ab0 <I2C_readEXPANDER+0x2cc>)
    6842:	47b0      	blx	r6
    6844:	2005      	movs	r0, #5
    6846:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6848:	f8c5 b014 	str.w	fp, [r5, #20]
    684c:	2005      	movs	r0, #5
    684e:	47b0      	blx	r6
    6850:	617c      	str	r4, [r7, #20]
    6852:	2005      	movs	r0, #5
    6854:	47b0      	blx	r6
    6856:	2707      	movs	r7, #7
	I2C_SENDADDR(0x41, forloop);
    6858:	2640      	movs	r6, #64	; 0x40
    685a:	f8df 9250 	ldr.w	r9, [pc, #592]	; 6aac <I2C_readEXPANDER+0x2c8>
    685e:	9a01      	ldr	r2, [sp, #4]
    6860:	eb09 13c2 	add.w	r3, r9, r2, lsl #7
    6864:	9300      	str	r3, [sp, #0]
    6866:	4d92      	ldr	r5, [pc, #584]	; (6ab0 <I2C_readEXPANDER+0x2cc>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6868:	9902      	ldr	r1, [sp, #8]
    686a:	fa01 fa07 	lsl.w	sl, r1, r7
    686e:	f016 0f41 	tst.w	r6, #65	; 0x41
    6872:	9b00      	ldr	r3, [sp, #0]
    6874:	bf14      	ite	ne
    6876:	f8c3 b018 	strne.w	fp, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    687a:	f8c3 b014 	streq.w	fp, [r3, #20]
    687e:	2005      	movs	r0, #5
    6880:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6882:	eb09 080a 	add.w	r8, r9, sl
    6886:	f8c8 4018 	str.w	r4, [r8, #24]
    688a:	2005      	movs	r0, #5
    688c:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    688e:	f8c8 4014 	str.w	r4, [r8, #20]
    6892:	2005      	movs	r0, #5
    6894:	47a8      	blx	r5
    6896:	0876      	lsrs	r6, r6, #1
    6898:	3f01      	subs	r7, #1
    689a:	d1e8      	bne.n	686e <I2C_readEXPANDER+0x8a>
    689c:	4d83      	ldr	r5, [pc, #524]	; (6aac <I2C_readEXPANDER+0x2c8>)
    689e:	9b03      	ldr	r3, [sp, #12]
    68a0:	eb05 16c3 	add.w	r6, r5, r3, lsl #7
    68a4:	f8c6 b014 	str.w	fp, [r6, #20]
	I2C_WRITE();
    68a8:	2005      	movs	r0, #5
    68aa:	4f81      	ldr	r7, [pc, #516]	; (6ab0 <I2C_readEXPANDER+0x2cc>)
    68ac:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    68ae:	9a02      	ldr	r2, [sp, #8]
    68b0:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    68b4:	61ac      	str	r4, [r5, #24]
    68b6:	2005      	movs	r0, #5
    68b8:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    68ba:	616c      	str	r4, [r5, #20]
    68bc:	2005      	movs	r0, #5
    68be:	47b8      	blx	r7
    68c0:	9b03      	ldr	r3, [sp, #12]
    68c2:	01db      	lsls	r3, r3, #7
    68c4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    68c8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    68cc:	9300      	str	r3, [sp, #0]
    68ce:	f8c3 b004 	str.w	fp, [r3, #4]
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    68d2:	9904      	ldr	r1, [sp, #16]
    68d4:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    68d8:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
    68dc:	9108      	str	r1, [sp, #32]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    68de:	62b1      	str	r1, [r6, #40]	; 0x28
		hri_port_write_WRCONFIG_reg(PORT,
    68e0:	9909      	ldr	r1, [sp, #36]	; 0x24
    68e2:	f041 4140 	orr.w	r1, r1, #3221225472	; 0xc0000000
    68e6:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
    68ea:	9109      	str	r1, [sp, #36]	; 0x24
    68ec:	62b1      	str	r1, [r6, #40]	; 0x28
	I2C_WAITACKOP(-3);
    68ee:	2005      	movs	r0, #5
    68f0:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    68f2:	61ac      	str	r4, [r5, #24]
    68f4:	2005      	movs	r0, #5
    68f6:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    68f8:	a80a      	add	r0, sp, #40	; 0x28
    68fa:	4b6e      	ldr	r3, [pc, #440]	; (6ab4 <I2C_readEXPANDER+0x2d0>)
    68fc:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    68fe:	9a00      	ldr	r2, [sp, #0]
    6900:	6812      	ldr	r2, [r2, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    6902:	6a33      	ldr	r3, [r6, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    6904:	6935      	ldr	r5, [r6, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    6906:	405d      	eors	r5, r3
    6908:	4015      	ands	r5, r2
    690a:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    690c:	a80a      	add	r0, sp, #40	; 0x28
    690e:	4b6a      	ldr	r3, [pc, #424]	; (6ab8 <I2C_readEXPANDER+0x2d4>)
    6910:	4798      	blx	r3
    6912:	ea1b 0f05 	tst.w	fp, r5
    6916:	f040 80e7 	bne.w	6ae8 <I2C_readEXPANDER+0x304>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    691a:	4d64      	ldr	r5, [pc, #400]	; (6aac <I2C_readEXPANDER+0x2c8>)
    691c:	9f02      	ldr	r7, [sp, #8]
    691e:	eb05 13c7 	add.w	r3, r5, r7, lsl #7
    6922:	615c      	str	r4, [r3, #20]
    6924:	2005      	movs	r0, #5
    6926:	4e62      	ldr	r6, [pc, #392]	; (6ab0 <I2C_readEXPANDER+0x2cc>)
    6928:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    692a:	9b03      	ldr	r3, [sp, #12]
    692c:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    6930:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6934:	9b06      	ldr	r3, [sp, #24]
    6936:	62ab      	str	r3, [r5, #40]	; 0x28
    6938:	9b07      	ldr	r3, [sp, #28]
    693a:	62ab      	str	r3, [r5, #40]	; 0x28
    693c:	2005      	movs	r0, #5
    693e:	47b0      	blx	r6
    6940:	2608      	movs	r6, #8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6942:	f8df 8168 	ldr.w	r8, [pc, #360]	; 6aac <I2C_readEXPANDER+0x2c8>
    6946:	9b01      	ldr	r3, [sp, #4]
    6948:	eb08 1ac3 	add.w	sl, r8, r3, lsl #7
	I2C_SENDDATA(0x00, forloop);
    694c:	4d58      	ldr	r5, [pc, #352]	; (6ab0 <I2C_readEXPANDER+0x2cc>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    694e:	ea4f 19c7 	mov.w	r9, r7, lsl #7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6952:	f8ca b014 	str.w	fp, [sl, #20]
    6956:	2005      	movs	r0, #5
    6958:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    695a:	eb08 0709 	add.w	r7, r8, r9
    695e:	61bc      	str	r4, [r7, #24]
    6960:	2005      	movs	r0, #5
    6962:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6964:	617c      	str	r4, [r7, #20]
    6966:	2005      	movs	r0, #5
    6968:	47a8      	blx	r5
    696a:	3e01      	subs	r6, #1
    696c:	d1f1      	bne.n	6952 <I2C_readEXPANDER+0x16e>
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    696e:	9b00      	ldr	r3, [sp, #0]
    6970:	f8c3 b004 	str.w	fp, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6974:	4e4d      	ldr	r6, [pc, #308]	; (6aac <I2C_readEXPANDER+0x2c8>)
    6976:	9a03      	ldr	r2, [sp, #12]
    6978:	eb06 15c2 	add.w	r5, r6, r2, lsl #7
    697c:	9a08      	ldr	r2, [sp, #32]
    697e:	62aa      	str	r2, [r5, #40]	; 0x28
    6980:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6982:	62aa      	str	r2, [r5, #40]	; 0x28
	I2C_WAITACKOP(-4);
    6984:	2005      	movs	r0, #5
    6986:	4f4a      	ldr	r7, [pc, #296]	; (6ab0 <I2C_readEXPANDER+0x2cc>)
    6988:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    698a:	9a02      	ldr	r2, [sp, #8]
    698c:	eb06 16c2 	add.w	r6, r6, r2, lsl #7
    6990:	61b4      	str	r4, [r6, #24]
    6992:	2005      	movs	r0, #5
    6994:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    6996:	a80b      	add	r0, sp, #44	; 0x2c
    6998:	4b46      	ldr	r3, [pc, #280]	; (6ab4 <I2C_readEXPANDER+0x2d0>)
    699a:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    699c:	9b00      	ldr	r3, [sp, #0]
    699e:	681a      	ldr	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    69a0:	6a2b      	ldr	r3, [r5, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    69a2:	692d      	ldr	r5, [r5, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    69a4:	405d      	eors	r5, r3
    69a6:	4015      	ands	r5, r2
    69a8:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    69aa:	a80b      	add	r0, sp, #44	; 0x2c
    69ac:	4b42      	ldr	r3, [pc, #264]	; (6ab8 <I2C_readEXPANDER+0x2d4>)
    69ae:	4798      	blx	r3
    69b0:	ea1b 0f05 	tst.w	fp, r5
    69b4:	f040 80b1 	bne.w	6b1a <I2C_readEXPANDER+0x336>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    69b8:	4d3c      	ldr	r5, [pc, #240]	; (6aac <I2C_readEXPANDER+0x2c8>)
    69ba:	9b02      	ldr	r3, [sp, #8]
    69bc:	eb05 17c3 	add.w	r7, r5, r3, lsl #7
    69c0:	617c      	str	r4, [r7, #20]
    69c2:	2005      	movs	r0, #5
    69c4:	4e3a      	ldr	r6, [pc, #232]	; (6ab0 <I2C_readEXPANDER+0x2cc>)
    69c6:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    69c8:	9a03      	ldr	r2, [sp, #12]
    69ca:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    69ce:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    69d2:	9a06      	ldr	r2, [sp, #24]
    69d4:	62aa      	str	r2, [r5, #40]	; 0x28
    69d6:	9907      	ldr	r1, [sp, #28]
    69d8:	62a9      	str	r1, [r5, #40]	; 0x28
    69da:	2005      	movs	r0, #5
    69dc:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    69de:	61bc      	str	r4, [r7, #24]
    69e0:	f8c5 b018 	str.w	fp, [r5, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    69e4:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    69e8:	9a06      	ldr	r2, [sp, #24]
    69ea:	62aa      	str	r2, [r5, #40]	; 0x28
    69ec:	9907      	ldr	r1, [sp, #28]
    69ee:	62a9      	str	r1, [r5, #40]	; 0x28
	
	/* Then restart comms and send address 0x40 */
	I2C_START(-5);
    69f0:	2005      	movs	r0, #5
    69f2:	47b0      	blx	r6
    69f4:	2005      	movs	r0, #5
    69f6:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    69f8:	f8c5 b014 	str.w	fp, [r5, #20]
    69fc:	2005      	movs	r0, #5
    69fe:	47b0      	blx	r6
    6a00:	617c      	str	r4, [r7, #20]
    6a02:	2005      	movs	r0, #5
    6a04:	47b0      	blx	r6
    6a06:	2707      	movs	r7, #7
	I2C_SENDADDR(0x41, forloop);
    6a08:	2640      	movs	r6, #64	; 0x40
    6a0a:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 6aac <I2C_readEXPANDER+0x2c8>
    6a0e:	9a01      	ldr	r2, [sp, #4]
    6a10:	eb09 12c2 	add.w	r2, r9, r2, lsl #7
    6a14:	9204      	str	r2, [sp, #16]
    6a16:	4d26      	ldr	r5, [pc, #152]	; (6ab0 <I2C_readEXPANDER+0x2cc>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6a18:	9b02      	ldr	r3, [sp, #8]
    6a1a:	fa03 fa07 	lsl.w	sl, r3, r7
    6a1e:	f016 0f41 	tst.w	r6, #65	; 0x41
    6a22:	9b04      	ldr	r3, [sp, #16]
    6a24:	bf14      	ite	ne
    6a26:	f8c3 b018 	strne.w	fp, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6a2a:	f8c3 b014 	streq.w	fp, [r3, #20]
    6a2e:	2005      	movs	r0, #5
    6a30:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6a32:	eb09 080a 	add.w	r8, r9, sl
    6a36:	f8c8 4018 	str.w	r4, [r8, #24]
    6a3a:	2005      	movs	r0, #5
    6a3c:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6a3e:	f8c8 4014 	str.w	r4, [r8, #20]
    6a42:	2005      	movs	r0, #5
    6a44:	47a8      	blx	r5
    6a46:	0876      	lsrs	r6, r6, #1
    6a48:	3f01      	subs	r7, #1
    6a4a:	d1e8      	bne.n	6a1e <I2C_readEXPANDER+0x23a>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6a4c:	4d17      	ldr	r5, [pc, #92]	; (6aac <I2C_readEXPANDER+0x2c8>)
    6a4e:	9b03      	ldr	r3, [sp, #12]
    6a50:	eb05 16c3 	add.w	r6, r5, r3, lsl #7
    6a54:	f8c6 b018 	str.w	fp, [r6, #24]
	I2C_READ();
    6a58:	2005      	movs	r0, #5
    6a5a:	4f15      	ldr	r7, [pc, #84]	; (6ab0 <I2C_readEXPANDER+0x2cc>)
    6a5c:	47b8      	blx	r7
    6a5e:	9b02      	ldr	r3, [sp, #8]
    6a60:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    6a64:	61ac      	str	r4, [r5, #24]
    6a66:	2005      	movs	r0, #5
    6a68:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6a6a:	616c      	str	r4, [r5, #20]
    6a6c:	2005      	movs	r0, #5
    6a6e:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    6a70:	9b00      	ldr	r3, [sp, #0]
    6a72:	f8c3 b004 	str.w	fp, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6a76:	9a08      	ldr	r2, [sp, #32]
    6a78:	62b2      	str	r2, [r6, #40]	; 0x28
    6a7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6a7c:	62b2      	str	r2, [r6, #40]	; 0x28
	I2C_WAITACKIP(-6);
    6a7e:	2005      	movs	r0, #5
    6a80:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6a82:	61ac      	str	r4, [r5, #24]
    6a84:	2005      	movs	r0, #5
    6a86:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    6a88:	a80c      	add	r0, sp, #48	; 0x30
    6a8a:	4b0a      	ldr	r3, [pc, #40]	; (6ab4 <I2C_readEXPANDER+0x2d0>)
    6a8c:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    6a8e:	9b00      	ldr	r3, [sp, #0]
    6a90:	681a      	ldr	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    6a92:	6a33      	ldr	r3, [r6, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    6a94:	6935      	ldr	r5, [r6, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    6a96:	405d      	eors	r5, r3
    6a98:	4015      	ands	r5, r2
    6a9a:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    6a9c:	a80c      	add	r0, sp, #48	; 0x30
    6a9e:	4b06      	ldr	r3, [pc, #24]	; (6ab8 <I2C_readEXPANDER+0x2d4>)
    6aa0:	4798      	blx	r3
    6aa2:	ea1b 0f05 	tst.w	fp, r5
    6aa6:	d151      	bne.n	6b4c <I2C_readEXPANDER+0x368>
    6aa8:	e008      	b.n	6abc <I2C_readEXPANDER+0x2d8>
    6aaa:	bf00      	nop
    6aac:	41008000 	.word	0x41008000
    6ab0:	000015a9 	.word	0x000015a9
    6ab4:	00001549 	.word	0x00001549
    6ab8:	00001557 	.word	0x00001557
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6abc:	9d02      	ldr	r5, [sp, #8]
    6abe:	01eb      	lsls	r3, r5, #7
    6ac0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    6ac4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    6ac8:	615c      	str	r4, [r3, #20]
    6aca:	2005      	movs	r0, #5
    6acc:	4b4c      	ldr	r3, [pc, #304]	; (6c00 <I2C_readEXPANDER+0x41c>)
    6ace:	4798      	blx	r3

	*inputs = 0;
    6ad0:	2300      	movs	r3, #0
    6ad2:	9a05      	ldr	r2, [sp, #20]
    6ad4:	7013      	strb	r3, [r2, #0]
    6ad6:	2608      	movs	r6, #8

	/* Beginning of the for-loops that captures data and read the lower 8-bits of the input values */
	for (forloop = 0x80; forloop > 0;) {
    6ad8:	2780      	movs	r7, #128	; 0x80
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6ada:	f8df a128 	ldr.w	sl, [pc, #296]	; 6c04 <I2C_readEXPANDER+0x420>
    6ade:	eb0a 19c5 	add.w	r9, sl, r5, lsl #7
		I2C_clockhi();
    6ae2:	f8df 811c 	ldr.w	r8, [pc, #284]	; 6c00 <I2C_readEXPANDER+0x41c>
    6ae6:	e051      	b.n	6b8c <I2C_readEXPANDER+0x3a8>
    6ae8:	4d46      	ldr	r5, [pc, #280]	; (6c04 <I2C_readEXPANDER+0x420>)
    6aea:	9b02      	ldr	r3, [sp, #8]
    6aec:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    6af0:	619c      	str	r4, [r3, #24]
	I2C_WAITACKOP(-3);
    6af2:	2005      	movs	r0, #5
    6af4:	47b8      	blx	r7
    6af6:	9b03      	ldr	r3, [sp, #12]
    6af8:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    6afc:	f8c5 b018 	str.w	fp, [r5, #24]
    6b00:	2005      	movs	r0, #5
    6b02:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6b04:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6b08:	9b06      	ldr	r3, [sp, #24]
    6b0a:	62ab      	str	r3, [r5, #40]	; 0x28
    6b0c:	9b07      	ldr	r3, [sp, #28]
    6b0e:	62ab      	str	r3, [r5, #40]	; 0x28
    6b10:	2005      	movs	r0, #5
    6b12:	47b8      	blx	r7
    6b14:	f06f 0002 	mvn.w	r0, #2
    6b18:	e06c      	b.n	6bf4 <I2C_readEXPANDER+0x410>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6b1a:	4d3a      	ldr	r5, [pc, #232]	; (6c04 <I2C_readEXPANDER+0x420>)
    6b1c:	9b02      	ldr	r3, [sp, #8]
    6b1e:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    6b22:	619c      	str	r4, [r3, #24]
	I2C_WAITACKOP(-4);
    6b24:	2005      	movs	r0, #5
    6b26:	47b8      	blx	r7
    6b28:	9b03      	ldr	r3, [sp, #12]
    6b2a:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    6b2e:	f8c5 b018 	str.w	fp, [r5, #24]
    6b32:	2005      	movs	r0, #5
    6b34:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6b36:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6b3a:	9b06      	ldr	r3, [sp, #24]
    6b3c:	62ab      	str	r3, [r5, #40]	; 0x28
    6b3e:	9b07      	ldr	r3, [sp, #28]
    6b40:	62ab      	str	r3, [r5, #40]	; 0x28
    6b42:	2005      	movs	r0, #5
    6b44:	47b8      	blx	r7
    6b46:	f06f 0003 	mvn.w	r0, #3
    6b4a:	e053      	b.n	6bf4 <I2C_readEXPANDER+0x410>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6b4c:	4d2d      	ldr	r5, [pc, #180]	; (6c04 <I2C_readEXPANDER+0x420>)
    6b4e:	9b02      	ldr	r3, [sp, #8]
    6b50:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    6b54:	619c      	str	r4, [r3, #24]
	I2C_WAITACKIP(-6);
    6b56:	2005      	movs	r0, #5
    6b58:	47b8      	blx	r7
    6b5a:	9b03      	ldr	r3, [sp, #12]
    6b5c:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    6b60:	f8c5 b018 	str.w	fp, [r5, #24]
    6b64:	2005      	movs	r0, #5
    6b66:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6b68:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6b6c:	9b06      	ldr	r3, [sp, #24]
    6b6e:	62ab      	str	r3, [r5, #40]	; 0x28
    6b70:	9b07      	ldr	r3, [sp, #28]
    6b72:	62ab      	str	r3, [r5, #40]	; 0x28
    6b74:	2005      	movs	r0, #5
    6b76:	47b8      	blx	r7
    6b78:	f06f 0005 	mvn.w	r0, #5
    6b7c:	e03a      	b.n	6bf4 <I2C_readEXPANDER+0x410>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6b7e:	f8c9 4014 	str.w	r4, [r9, #20]
		if (gpio_get_pin_level(i2csda)) {
			(*inputs) |= forloop;
		}

		I2C_clocklo();
    6b82:	2005      	movs	r0, #5
    6b84:	47c0      	blx	r8
		forloop = forloop / 2;
    6b86:	087f      	lsrs	r7, r7, #1
	for (forloop = 0x80; forloop > 0;) {
    6b88:	3e01      	subs	r6, #1
    6b8a:	d01b      	beq.n	6bc4 <I2C_readEXPANDER+0x3e0>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6b8c:	f8c9 4018 	str.w	r4, [r9, #24]
		I2C_clockhi();
    6b90:	2005      	movs	r0, #5
    6b92:	47c0      	blx	r8
	CRITICAL_SECTION_ENTER();
    6b94:	a80d      	add	r0, sp, #52	; 0x34
    6b96:	4b1c      	ldr	r3, [pc, #112]	; (6c08 <I2C_readEXPANDER+0x424>)
    6b98:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    6b9a:	9b00      	ldr	r3, [sp, #0]
    6b9c:	6819      	ldr	r1, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    6b9e:	9b01      	ldr	r3, [sp, #4]
    6ba0:	eb0a 12c3 	add.w	r2, sl, r3, lsl #7
    6ba4:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    6ba6:	6915      	ldr	r5, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    6ba8:	405d      	eors	r5, r3
    6baa:	400d      	ands	r5, r1
    6bac:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    6bae:	a80d      	add	r0, sp, #52	; 0x34
    6bb0:	4b16      	ldr	r3, [pc, #88]	; (6c0c <I2C_readEXPANDER+0x428>)
    6bb2:	4798      	blx	r3
		if (gpio_get_pin_level(i2csda)) {
    6bb4:	ea1b 0f05 	tst.w	fp, r5
    6bb8:	d0e1      	beq.n	6b7e <I2C_readEXPANDER+0x39a>
			(*inputs) |= forloop;
    6bba:	9a05      	ldr	r2, [sp, #20]
    6bbc:	7813      	ldrb	r3, [r2, #0]
    6bbe:	433b      	orrs	r3, r7
    6bc0:	7013      	strb	r3, [r2, #0]
    6bc2:	e7dc      	b.n	6b7e <I2C_readEXPANDER+0x39a>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6bc4:	4d0f      	ldr	r5, [pc, #60]	; (6c04 <I2C_readEXPANDER+0x420>)
    6bc6:	9b02      	ldr	r3, [sp, #8]
    6bc8:	eb05 11c3 	add.w	r1, r5, r3, lsl #7
    6bcc:	618c      	str	r4, [r1, #24]
	}

	I2C_STOP();
    6bce:	2005      	movs	r0, #5
    6bd0:	4e0b      	ldr	r6, [pc, #44]	; (6c00 <I2C_readEXPANDER+0x41c>)
    6bd2:	47b0      	blx	r6
    6bd4:	9b03      	ldr	r3, [sp, #12]
    6bd6:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    6bda:	f8c5 b018 	str.w	fp, [r5, #24]
    6bde:	2005      	movs	r0, #5
    6be0:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6be2:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6be6:	9b06      	ldr	r3, [sp, #24]
    6be8:	62ab      	str	r3, [r5, #40]	; 0x28
    6bea:	9b07      	ldr	r3, [sp, #28]
    6bec:	62ab      	str	r3, [r5, #40]	; 0x28
    6bee:	2005      	movs	r0, #5
    6bf0:	47b0      	blx	r6
	I2C_CLOSE();
	/* If successful, and code execution got here, the close the I2C channel */
	
	return 0;
    6bf2:	2000      	movs	r0, #0
}
    6bf4:	b00f      	add	sp, #60	; 0x3c
    6bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -1;	
    6bfa:	f04f 30ff 	mov.w	r0, #4294967295
    6bfe:	4770      	bx	lr
    6c00:	000015a9 	.word	0x000015a9
    6c04:	41008000 	.word	0x41008000
    6c08:	00001549 	.word	0x00001549
    6c0c:	00001557 	.word	0x00001557

00006c10 <I2C_setGAIN>:
// * CALLED BY:			  main()                                                                                                       *
// * CALLS:		          No function. ALL macros defined in this function file.                                                       *
// * --------------------------------------------------------------------------------------------------------------------------------- *
int I2C_setGAIN(uint8_t sda,  uint8_t clk, unsigned char dac)

{
    6c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6c14:	b08d      	sub	sp, #52	; 0x34
    6c16:	f001 041f 	and.w	r4, r1, #31
    6c1a:	2501      	movs	r5, #1
    6c1c:	fa05 f404 	lsl.w	r4, r5, r4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6c20:	094b      	lsrs	r3, r1, #5
    6c22:	4ea7      	ldr	r6, [pc, #668]	; (6ec0 <I2C_setGAIN+0x2b0>)
    6c24:	9300      	str	r3, [sp, #0]
    6c26:	eb06 18c3 	add.w	r8, r6, r3, lsl #7
    6c2a:	f8c8 4018 	str.w	r4, [r8, #24]
    6c2e:	0943      	lsrs	r3, r0, #5
    6c30:	9302      	str	r3, [sp, #8]
    6c32:	f000 001f 	and.w	r0, r0, #31
    6c36:	4085      	lsls	r5, r0
    6c38:	9305      	str	r3, [sp, #20]
    6c3a:	eb06 16c3 	add.w	r6, r6, r3, lsl #7
    6c3e:	61b5      	str	r5, [r6, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6c40:	60b5      	str	r5, [r6, #8]
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    6c42:	b2a9      	uxth	r1, r5
    6c44:	9106      	str	r1, [sp, #24]
    6c46:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    6c4a:	9103      	str	r1, [sp, #12]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6c4c:	62b1      	str	r1, [r6, #40]	; 0x28
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    6c4e:	0c29      	lsrs	r1, r5, #16
    6c50:	9107      	str	r1, [sp, #28]
		hri_port_write_WRCONFIG_reg(
    6c52:	f041 4140 	orr.w	r1, r1, #3221225472	; 0xc0000000
    6c56:	9104      	str	r1, [sp, #16]
    6c58:	62b1      	str	r1, [r6, #40]	; 0x28
  	uint8_t     		i2csda, i2cclk;
    unsigned char		forloop;

	/* Open an I2C channel, send address 0x60, index register 0x00 then send the 8-bit "dac" value */
	I2C_OPEN(sda, clk);
    I2C_START(-1);
    6c5a:	2005      	movs	r0, #5
    6c5c:	4f99      	ldr	r7, [pc, #612]	; (6ec4 <I2C_setGAIN+0x2b4>)
    6c5e:	47b8      	blx	r7
    6c60:	2005      	movs	r0, #5
    6c62:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6c64:	6175      	str	r5, [r6, #20]
    6c66:	2005      	movs	r0, #5
    6c68:	47b8      	blx	r7
    6c6a:	f8c8 4014 	str.w	r4, [r8, #20]
    6c6e:	2005      	movs	r0, #5
    6c70:	47b8      	blx	r7
    6c72:	f04f 0a07 	mov.w	sl, #7
    I2C_SENDADDR(0x60, forloop);
    6c76:	2740      	movs	r7, #64	; 0x40
    6c78:	f8df 9244 	ldr.w	r9, [pc, #580]	; 6ec0 <I2C_setGAIN+0x2b0>
    6c7c:	9b05      	ldr	r3, [sp, #20]
    6c7e:	eb09 1bc3 	add.w	fp, r9, r3, lsl #7
    6c82:	4e90      	ldr	r6, [pc, #576]	; (6ec4 <I2C_setGAIN+0x2b4>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6c84:	9a00      	ldr	r2, [sp, #0]
    6c86:	fa02 f30a 	lsl.w	r3, r2, sl
    6c8a:	9301      	str	r3, [sp, #4]
    6c8c:	46a8      	mov	r8, r5
    6c8e:	f017 0f60 	tst.w	r7, #96	; 0x60
    6c92:	bf14      	ite	ne
    6c94:	f8cb 8018 	strne.w	r8, [fp, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6c98:	f8cb 8014 	streq.w	r8, [fp, #20]
    6c9c:	2005      	movs	r0, #5
    6c9e:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6ca0:	9b01      	ldr	r3, [sp, #4]
    6ca2:	eb09 0503 	add.w	r5, r9, r3
    6ca6:	61ac      	str	r4, [r5, #24]
    6ca8:	2005      	movs	r0, #5
    6caa:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6cac:	616c      	str	r4, [r5, #20]
    6cae:	2005      	movs	r0, #5
    6cb0:	47b0      	blx	r6
    6cb2:	087f      	lsrs	r7, r7, #1
    6cb4:	f1ba 0a01 	subs.w	sl, sl, #1
    6cb8:	d1e9      	bne.n	6c8e <I2C_setGAIN+0x7e>
    6cba:	4645      	mov	r5, r8
    6cbc:	4e80      	ldr	r6, [pc, #512]	; (6ec0 <I2C_setGAIN+0x2b0>)
    6cbe:	9b02      	ldr	r3, [sp, #8]
    6cc0:	eb06 17c3 	add.w	r7, r6, r3, lsl #7
    6cc4:	f8c7 8014 	str.w	r8, [r7, #20]
    I2C_WRITE();
    6cc8:	2005      	movs	r0, #5
    6cca:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 6ec4 <I2C_setGAIN+0x2b4>
    6cce:	47c0      	blx	r8
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6cd0:	9a00      	ldr	r2, [sp, #0]
    6cd2:	eb06 16c2 	add.w	r6, r6, r2, lsl #7
    6cd6:	61b4      	str	r4, [r6, #24]
    6cd8:	2005      	movs	r0, #5
    6cda:	47c0      	blx	r8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6cdc:	6174      	str	r4, [r6, #20]
    6cde:	2005      	movs	r0, #5
    6ce0:	47c0      	blx	r8
    6ce2:	9b02      	ldr	r3, [sp, #8]
    6ce4:	01db      	lsls	r3, r3, #7
    6ce6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    6cea:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    6cee:	9301      	str	r3, [sp, #4]
    6cf0:	605d      	str	r5, [r3, #4]
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    6cf2:	9906      	ldr	r1, [sp, #24]
    6cf4:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    6cf8:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
    6cfc:	9106      	str	r1, [sp, #24]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6cfe:	62b9      	str	r1, [r7, #40]	; 0x28
		hri_port_write_WRCONFIG_reg(PORT,
    6d00:	9907      	ldr	r1, [sp, #28]
    6d02:	f041 4140 	orr.w	r1, r1, #3221225472	; 0xc0000000
    6d06:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
    6d0a:	9107      	str	r1, [sp, #28]
    6d0c:	62b9      	str	r1, [r7, #40]	; 0x28
    I2C_WAITACKOP(-2);
    6d0e:	2005      	movs	r0, #5
    6d10:	47c0      	blx	r8
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6d12:	61b4      	str	r4, [r6, #24]
    6d14:	2005      	movs	r0, #5
    6d16:	47c0      	blx	r8
	CRITICAL_SECTION_ENTER();
    6d18:	a809      	add	r0, sp, #36	; 0x24
    6d1a:	4b6b      	ldr	r3, [pc, #428]	; (6ec8 <I2C_setGAIN+0x2b8>)
    6d1c:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    6d1e:	9a01      	ldr	r2, [sp, #4]
    6d20:	6812      	ldr	r2, [r2, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    6d22:	6a3b      	ldr	r3, [r7, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    6d24:	693e      	ldr	r6, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    6d26:	405e      	eors	r6, r3
    6d28:	4016      	ands	r6, r2
    6d2a:	405e      	eors	r6, r3
	CRITICAL_SECTION_LEAVE();
    6d2c:	a809      	add	r0, sp, #36	; 0x24
    6d2e:	4b67      	ldr	r3, [pc, #412]	; (6ecc <I2C_setGAIN+0x2bc>)
    6d30:	4798      	blx	r3
    6d32:	4235      	tst	r5, r6
    6d34:	f040 80cc 	bne.w	6ed0 <I2C_setGAIN+0x2c0>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6d38:	4e61      	ldr	r6, [pc, #388]	; (6ec0 <I2C_setGAIN+0x2b0>)
    6d3a:	9b00      	ldr	r3, [sp, #0]
    6d3c:	eb06 13c3 	add.w	r3, r6, r3, lsl #7
    6d40:	615c      	str	r4, [r3, #20]
    6d42:	2005      	movs	r0, #5
    6d44:	4f5f      	ldr	r7, [pc, #380]	; (6ec4 <I2C_setGAIN+0x2b4>)
    6d46:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6d48:	9a02      	ldr	r2, [sp, #8]
    6d4a:	eb06 16c2 	add.w	r6, r6, r2, lsl #7
    6d4e:	60b5      	str	r5, [r6, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6d50:	9a03      	ldr	r2, [sp, #12]
    6d52:	62b2      	str	r2, [r6, #40]	; 0x28
    6d54:	9a04      	ldr	r2, [sp, #16]
    6d56:	62b2      	str	r2, [r6, #40]	; 0x28
    6d58:	2005      	movs	r0, #5
    6d5a:	47b8      	blx	r7
    6d5c:	2708      	movs	r7, #8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6d5e:	f8df 9160 	ldr.w	r9, [pc, #352]	; 6ec0 <I2C_setGAIN+0x2b0>
    6d62:	9a05      	ldr	r2, [sp, #20]
    6d64:	eb09 1bc2 	add.w	fp, r9, r2, lsl #7
    I2C_SENDDATA(0x00, forloop);
    6d68:	4e56      	ldr	r6, [pc, #344]	; (6ec4 <I2C_setGAIN+0x2b4>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6d6a:	9b00      	ldr	r3, [sp, #0]
    6d6c:	ea4f 1ac3 	mov.w	sl, r3, lsl #7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6d70:	f8cb 5014 	str.w	r5, [fp, #20]
    6d74:	2005      	movs	r0, #5
    6d76:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6d78:	eb09 080a 	add.w	r8, r9, sl
    6d7c:	f8c8 4018 	str.w	r4, [r8, #24]
    6d80:	2005      	movs	r0, #5
    6d82:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6d84:	f8c8 4014 	str.w	r4, [r8, #20]
    6d88:	2005      	movs	r0, #5
    6d8a:	47b0      	blx	r6
    6d8c:	3f01      	subs	r7, #1
    6d8e:	d1ef      	bne.n	6d70 <I2C_setGAIN+0x160>
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    6d90:	9b01      	ldr	r3, [sp, #4]
    6d92:	605d      	str	r5, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6d94:	4f4a      	ldr	r7, [pc, #296]	; (6ec0 <I2C_setGAIN+0x2b0>)
    6d96:	9a02      	ldr	r2, [sp, #8]
    6d98:	eb07 16c2 	add.w	r6, r7, r2, lsl #7
    6d9c:	9a06      	ldr	r2, [sp, #24]
    6d9e:	62b2      	str	r2, [r6, #40]	; 0x28
    6da0:	9a07      	ldr	r2, [sp, #28]
    6da2:	62b2      	str	r2, [r6, #40]	; 0x28
    I2C_WAITACKOP(-3);
    6da4:	2005      	movs	r0, #5
    6da6:	f8df 811c 	ldr.w	r8, [pc, #284]	; 6ec4 <I2C_setGAIN+0x2b4>
    6daa:	47c0      	blx	r8
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6dac:	9a00      	ldr	r2, [sp, #0]
    6dae:	eb07 17c2 	add.w	r7, r7, r2, lsl #7
    6db2:	61bc      	str	r4, [r7, #24]
    6db4:	2005      	movs	r0, #5
    6db6:	47c0      	blx	r8
	CRITICAL_SECTION_ENTER();
    6db8:	a80a      	add	r0, sp, #40	; 0x28
    6dba:	4b43      	ldr	r3, [pc, #268]	; (6ec8 <I2C_setGAIN+0x2b8>)
    6dbc:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    6dbe:	9b01      	ldr	r3, [sp, #4]
    6dc0:	681a      	ldr	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    6dc2:	6a33      	ldr	r3, [r6, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    6dc4:	6936      	ldr	r6, [r6, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    6dc6:	405e      	eors	r6, r3
    6dc8:	4016      	ands	r6, r2
    6dca:	405e      	eors	r6, r3
	CRITICAL_SECTION_LEAVE();
    6dcc:	a80a      	add	r0, sp, #40	; 0x28
    6dce:	4b3f      	ldr	r3, [pc, #252]	; (6ecc <I2C_setGAIN+0x2bc>)
    6dd0:	4798      	blx	r3
    6dd2:	4235      	tst	r5, r6
    6dd4:	f040 8093 	bne.w	6efe <I2C_setGAIN+0x2ee>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6dd8:	4e39      	ldr	r6, [pc, #228]	; (6ec0 <I2C_setGAIN+0x2b0>)
    6dda:	9b00      	ldr	r3, [sp, #0]
    6ddc:	eb06 13c3 	add.w	r3, r6, r3, lsl #7
    6de0:	615c      	str	r4, [r3, #20]
    6de2:	2005      	movs	r0, #5
    6de4:	4f37      	ldr	r7, [pc, #220]	; (6ec4 <I2C_setGAIN+0x2b4>)
    6de6:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6de8:	9a02      	ldr	r2, [sp, #8]
    6dea:	eb06 16c2 	add.w	r6, r6, r2, lsl #7
    6dee:	60b5      	str	r5, [r6, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6df0:	9a03      	ldr	r2, [sp, #12]
    6df2:	62b2      	str	r2, [r6, #40]	; 0x28
    6df4:	9a04      	ldr	r2, [sp, #16]
    6df6:	62b2      	str	r2, [r6, #40]	; 0x28
    6df8:	2005      	movs	r0, #5
    6dfa:	47b8      	blx	r7
    6dfc:	2708      	movs	r7, #8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6dfe:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 6ec0 <I2C_setGAIN+0x2b0>
    6e02:	9a05      	ldr	r2, [sp, #20]
    6e04:	eb0a 19c2 	add.w	r9, sl, r2, lsl #7
	I2C_SENDDATA(0x00, forloop);
    6e08:	4e2e      	ldr	r6, [pc, #184]	; (6ec4 <I2C_setGAIN+0x2b4>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6e0a:	9b00      	ldr	r3, [sp, #0]
    6e0c:	ea4f 1bc3 	mov.w	fp, r3, lsl #7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6e10:	f8c9 5014 	str.w	r5, [r9, #20]
    6e14:	2005      	movs	r0, #5
    6e16:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6e18:	eb0a 080b 	add.w	r8, sl, fp
    6e1c:	f8c8 4018 	str.w	r4, [r8, #24]
    6e20:	2005      	movs	r0, #5
    6e22:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6e24:	f8c8 4014 	str.w	r4, [r8, #20]
    6e28:	2005      	movs	r0, #5
    6e2a:	47b0      	blx	r6
    6e2c:	3f01      	subs	r7, #1
    6e2e:	d1ef      	bne.n	6e10 <I2C_setGAIN+0x200>
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    6e30:	9b01      	ldr	r3, [sp, #4]
    6e32:	605d      	str	r5, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6e34:	4f22      	ldr	r7, [pc, #136]	; (6ec0 <I2C_setGAIN+0x2b0>)
    6e36:	9a02      	ldr	r2, [sp, #8]
    6e38:	eb07 16c2 	add.w	r6, r7, r2, lsl #7
    6e3c:	9a06      	ldr	r2, [sp, #24]
    6e3e:	62b2      	str	r2, [r6, #40]	; 0x28
    6e40:	9a07      	ldr	r2, [sp, #28]
    6e42:	62b2      	str	r2, [r6, #40]	; 0x28
	I2C_WAITACKOP(-3);
    6e44:	2005      	movs	r0, #5
    6e46:	f8df 807c 	ldr.w	r8, [pc, #124]	; 6ec4 <I2C_setGAIN+0x2b4>
    6e4a:	47c0      	blx	r8
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6e4c:	9a00      	ldr	r2, [sp, #0]
    6e4e:	eb07 17c2 	add.w	r7, r7, r2, lsl #7
    6e52:	61bc      	str	r4, [r7, #24]
    6e54:	2005      	movs	r0, #5
    6e56:	47c0      	blx	r8
	CRITICAL_SECTION_ENTER();
    6e58:	a80b      	add	r0, sp, #44	; 0x2c
    6e5a:	4b1b      	ldr	r3, [pc, #108]	; (6ec8 <I2C_setGAIN+0x2b8>)
    6e5c:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    6e5e:	9b01      	ldr	r3, [sp, #4]
    6e60:	681a      	ldr	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    6e62:	6a33      	ldr	r3, [r6, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    6e64:	6936      	ldr	r6, [r6, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    6e66:	405e      	eors	r6, r3
    6e68:	4016      	ands	r6, r2
    6e6a:	405e      	eors	r6, r3
	CRITICAL_SECTION_LEAVE();
    6e6c:	a80b      	add	r0, sp, #44	; 0x2c
    6e6e:	4b17      	ldr	r3, [pc, #92]	; (6ecc <I2C_setGAIN+0x2bc>)
    6e70:	4798      	blx	r3
    6e72:	4235      	tst	r5, r6
    6e74:	d15a      	bne.n	6f2c <I2C_setGAIN+0x31c>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6e76:	4e12      	ldr	r6, [pc, #72]	; (6ec0 <I2C_setGAIN+0x2b0>)
    6e78:	9b00      	ldr	r3, [sp, #0]
    6e7a:	eb06 18c3 	add.w	r8, r6, r3, lsl #7
    6e7e:	f8c8 4014 	str.w	r4, [r8, #20]
    6e82:	2005      	movs	r0, #5
    6e84:	4f0f      	ldr	r7, [pc, #60]	; (6ec4 <I2C_setGAIN+0x2b4>)
    6e86:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6e88:	9b02      	ldr	r3, [sp, #8]
    6e8a:	eb06 16c3 	add.w	r6, r6, r3, lsl #7
    6e8e:	60b5      	str	r5, [r6, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6e90:	9b03      	ldr	r3, [sp, #12]
    6e92:	62b3      	str	r3, [r6, #40]	; 0x28
    6e94:	9a04      	ldr	r2, [sp, #16]
    6e96:	62b2      	str	r2, [r6, #40]	; 0x28
    6e98:	2005      	movs	r0, #5
    6e9a:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6e9c:	f8c8 4018 	str.w	r4, [r8, #24]
	
	/* If successful, and code execution got here, the close the I2C channel */
    I2C_STOP();
    6ea0:	2005      	movs	r0, #5
    6ea2:	47b8      	blx	r7
    6ea4:	61b5      	str	r5, [r6, #24]
    6ea6:	2005      	movs	r0, #5
    6ea8:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6eaa:	60b5      	str	r5, [r6, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6eac:	9b03      	ldr	r3, [sp, #12]
    6eae:	62b3      	str	r3, [r6, #40]	; 0x28
    6eb0:	9a04      	ldr	r2, [sp, #16]
    6eb2:	62b2      	str	r2, [r6, #40]	; 0x28
    6eb4:	2005      	movs	r0, #5
    6eb6:	47b8      	blx	r7
	I2C_CLOSE();
	
	return 0;
    6eb8:	2000      	movs	r0, #0
}
    6eba:	b00d      	add	sp, #52	; 0x34
    6ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6ec0:	41008000 	.word	0x41008000
    6ec4:	000015a9 	.word	0x000015a9
    6ec8:	00001549 	.word	0x00001549
    6ecc:	00001557 	.word	0x00001557
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6ed0:	4e22      	ldr	r6, [pc, #136]	; (6f5c <I2C_setGAIN+0x34c>)
    6ed2:	9b00      	ldr	r3, [sp, #0]
    6ed4:	eb06 13c3 	add.w	r3, r6, r3, lsl #7
    6ed8:	619c      	str	r4, [r3, #24]
    I2C_WAITACKOP(-2);
    6eda:	2005      	movs	r0, #5
    6edc:	47c0      	blx	r8
    6ede:	9b02      	ldr	r3, [sp, #8]
    6ee0:	eb06 16c3 	add.w	r6, r6, r3, lsl #7
    6ee4:	61b5      	str	r5, [r6, #24]
    6ee6:	2005      	movs	r0, #5
    6ee8:	47c0      	blx	r8
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6eea:	60b5      	str	r5, [r6, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6eec:	9b03      	ldr	r3, [sp, #12]
    6eee:	62b3      	str	r3, [r6, #40]	; 0x28
    6ef0:	9b04      	ldr	r3, [sp, #16]
    6ef2:	62b3      	str	r3, [r6, #40]	; 0x28
    6ef4:	2005      	movs	r0, #5
    6ef6:	47c0      	blx	r8
    6ef8:	f06f 0001 	mvn.w	r0, #1
    6efc:	e7dd      	b.n	6eba <I2C_setGAIN+0x2aa>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6efe:	4e17      	ldr	r6, [pc, #92]	; (6f5c <I2C_setGAIN+0x34c>)
    6f00:	9b00      	ldr	r3, [sp, #0]
    6f02:	eb06 13c3 	add.w	r3, r6, r3, lsl #7
    6f06:	619c      	str	r4, [r3, #24]
    I2C_WAITACKOP(-3);
    6f08:	2005      	movs	r0, #5
    6f0a:	47c0      	blx	r8
    6f0c:	9b02      	ldr	r3, [sp, #8]
    6f0e:	eb06 16c3 	add.w	r6, r6, r3, lsl #7
    6f12:	61b5      	str	r5, [r6, #24]
    6f14:	2005      	movs	r0, #5
    6f16:	47c0      	blx	r8
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6f18:	60b5      	str	r5, [r6, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6f1a:	9b03      	ldr	r3, [sp, #12]
    6f1c:	62b3      	str	r3, [r6, #40]	; 0x28
    6f1e:	9b04      	ldr	r3, [sp, #16]
    6f20:	62b3      	str	r3, [r6, #40]	; 0x28
    6f22:	2005      	movs	r0, #5
    6f24:	47c0      	blx	r8
    6f26:	f06f 0002 	mvn.w	r0, #2
    6f2a:	e7c6      	b.n	6eba <I2C_setGAIN+0x2aa>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6f2c:	4e0b      	ldr	r6, [pc, #44]	; (6f5c <I2C_setGAIN+0x34c>)
    6f2e:	9b00      	ldr	r3, [sp, #0]
    6f30:	eb06 13c3 	add.w	r3, r6, r3, lsl #7
    6f34:	619c      	str	r4, [r3, #24]
	I2C_WAITACKOP(-3);
    6f36:	2005      	movs	r0, #5
    6f38:	47c0      	blx	r8
    6f3a:	9b02      	ldr	r3, [sp, #8]
    6f3c:	eb06 16c3 	add.w	r6, r6, r3, lsl #7
    6f40:	61b5      	str	r5, [r6, #24]
    6f42:	2005      	movs	r0, #5
    6f44:	47c0      	blx	r8
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6f46:	60b5      	str	r5, [r6, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6f48:	9b03      	ldr	r3, [sp, #12]
    6f4a:	62b3      	str	r3, [r6, #40]	; 0x28
    6f4c:	9b04      	ldr	r3, [sp, #16]
    6f4e:	62b3      	str	r3, [r6, #40]	; 0x28
    6f50:	2005      	movs	r0, #5
    6f52:	47c0      	blx	r8
    6f54:	f06f 0002 	mvn.w	r0, #2
    6f58:	e7af      	b.n	6eba <I2C_setGAIN+0x2aa>
    6f5a:	bf00      	nop
    6f5c:	41008000 	.word	0x41008000

00006f60 <I2C_getTEMPandMOISTURE>:
{
	uint8_t     		i2csda, i2cclk;
	unsigned char		forloop;
	
	/* Assert and bounds check the return parameter variables */
	if ((!th) || (!tl) || (!hh) || (!hl)) {
    6f60:	2a00      	cmp	r2, #0
    6f62:	f000 87d1 	beq.w	7f08 <I2C_getTEMPandMOISTURE+0xfa8>
{
    6f66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6f6a:	b09d      	sub	sp, #116	; 0x74
    6f6c:	4614      	mov	r4, r2
	if ((!th) || (!tl) || (!hh) || (!hl)) {
    6f6e:	2b00      	cmp	r3, #0
    6f70:	f000 87cd 	beq.w	7f0e <I2C_getTEMPandMOISTURE+0xfae>
    6f74:	9a26      	ldr	r2, [sp, #152]	; 0x98
    6f76:	2a00      	cmp	r2, #0
    6f78:	f000 87cc 	beq.w	7f14 <I2C_getTEMPandMOISTURE+0xfb4>
    6f7c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
    6f7e:	2a00      	cmp	r2, #0
    6f80:	f000 87cb 	beq.w	7f1a <I2C_getTEMPandMOISTURE+0xfba>
    6f84:	940b      	str	r4, [sp, #44]	; 0x2c
    6f86:	930a      	str	r3, [sp, #40]	; 0x28
    6f88:	f001 041f 	and.w	r4, r1, #31
    6f8c:	2301      	movs	r3, #1
    6f8e:	fa03 f404 	lsl.w	r4, r3, r4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6f92:	094a      	lsrs	r2, r1, #5
    6f94:	4daa      	ldr	r5, [pc, #680]	; (7240 <I2C_getTEMPandMOISTURE+0x2e0>)
    6f96:	9203      	str	r2, [sp, #12]
    6f98:	eb05 17c2 	add.w	r7, r5, r2, lsl #7
    6f9c:	61bc      	str	r4, [r7, #24]
    6f9e:	0942      	lsrs	r2, r0, #5
    6fa0:	9204      	str	r2, [sp, #16]
    6fa2:	f000 001f 	and.w	r0, r0, #31
    6fa6:	fa03 fb00 	lsl.w	fp, r3, r0
    6faa:	9202      	str	r2, [sp, #8]
    6fac:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    6fb0:	f8c5 b018 	str.w	fp, [r5, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6fb4:	f8c5 b008 	str.w	fp, [r5, #8]
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    6fb8:	fa1f f38b 	uxth.w	r3, fp
    6fbc:	9307      	str	r3, [sp, #28]
    6fbe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    6fc2:	9305      	str	r3, [sp, #20]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6fc4:	62ab      	str	r3, [r5, #40]	; 0x28
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    6fc6:	ea4f 431b 	mov.w	r3, fp, lsr #16
    6fca:	9308      	str	r3, [sp, #32]
		hri_port_write_WRCONFIG_reg(
    6fcc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    6fd0:	9306      	str	r3, [sp, #24]
    6fd2:	62ab      	str	r3, [r5, #40]	; 0x28
		return -1;
	}

	/* Open an I2C channel, send address 0x40, index register 0x00 */
	I2C_OPEN(sda, clk);
	I2C_START(-2);
    6fd4:	2005      	movs	r0, #5
    6fd6:	4e9b      	ldr	r6, [pc, #620]	; (7244 <I2C_getTEMPandMOISTURE+0x2e4>)
    6fd8:	47b0      	blx	r6
    6fda:	2005      	movs	r0, #5
    6fdc:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6fde:	f8c5 b014 	str.w	fp, [r5, #20]
    6fe2:	2005      	movs	r0, #5
    6fe4:	47b0      	blx	r6
    6fe6:	617c      	str	r4, [r7, #20]
    6fe8:	2005      	movs	r0, #5
    6fea:	47b0      	blx	r6
    6fec:	2707      	movs	r7, #7
	I2C_SENDADDR(0x40, forloop);
    6fee:	2640      	movs	r6, #64	; 0x40
    6ff0:	f8df 924c 	ldr.w	r9, [pc, #588]	; 7240 <I2C_getTEMPandMOISTURE+0x2e0>
    6ff4:	9a02      	ldr	r2, [sp, #8]
    6ff6:	eb09 13c2 	add.w	r3, r9, r2, lsl #7
    6ffa:	9301      	str	r3, [sp, #4]
    6ffc:	4d91      	ldr	r5, [pc, #580]	; (7244 <I2C_getTEMPandMOISTURE+0x2e4>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6ffe:	9903      	ldr	r1, [sp, #12]
    7000:	fa01 fa07 	lsl.w	sl, r1, r7
    7004:	f016 0f40 	tst.w	r6, #64	; 0x40
    7008:	9b01      	ldr	r3, [sp, #4]
    700a:	bf14      	ite	ne
    700c:	f8c3 b018 	strne.w	fp, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7010:	f8c3 b014 	streq.w	fp, [r3, #20]
    7014:	2005      	movs	r0, #5
    7016:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7018:	eb09 080a 	add.w	r8, r9, sl
    701c:	f8c8 4018 	str.w	r4, [r8, #24]
    7020:	2005      	movs	r0, #5
    7022:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7024:	f8c8 4014 	str.w	r4, [r8, #20]
    7028:	2005      	movs	r0, #5
    702a:	47a8      	blx	r5
    702c:	0876      	lsrs	r6, r6, #1
    702e:	3f01      	subs	r7, #1
    7030:	d1e8      	bne.n	7004 <I2C_getTEMPandMOISTURE+0xa4>
    7032:	4d83      	ldr	r5, [pc, #524]	; (7240 <I2C_getTEMPandMOISTURE+0x2e0>)
    7034:	9b04      	ldr	r3, [sp, #16]
    7036:	eb05 16c3 	add.w	r6, r5, r3, lsl #7
    703a:	f8c6 b014 	str.w	fp, [r6, #20]
	I2C_WRITE();
    703e:	2005      	movs	r0, #5
    7040:	4f80      	ldr	r7, [pc, #512]	; (7244 <I2C_getTEMPandMOISTURE+0x2e4>)
    7042:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7044:	9a03      	ldr	r2, [sp, #12]
    7046:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    704a:	61ac      	str	r4, [r5, #24]
    704c:	2005      	movs	r0, #5
    704e:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7050:	616c      	str	r4, [r5, #20]
    7052:	2005      	movs	r0, #5
    7054:	47b8      	blx	r7
    7056:	9b04      	ldr	r3, [sp, #16]
    7058:	01db      	lsls	r3, r3, #7
    705a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    705e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    7062:	9301      	str	r3, [sp, #4]
    7064:	f8c3 b004 	str.w	fp, [r3, #4]
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    7068:	9907      	ldr	r1, [sp, #28]
    706a:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    706e:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
    7072:	9107      	str	r1, [sp, #28]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7074:	62b1      	str	r1, [r6, #40]	; 0x28
		hri_port_write_WRCONFIG_reg(PORT,
    7076:	9908      	ldr	r1, [sp, #32]
    7078:	f041 4140 	orr.w	r1, r1, #3221225472	; 0xc0000000
    707c:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
    7080:	9108      	str	r1, [sp, #32]
    7082:	62b1      	str	r1, [r6, #40]	; 0x28
	I2C_WAITACKOP(-3);
    7084:	2005      	movs	r0, #5
    7086:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7088:	61ac      	str	r4, [r5, #24]
    708a:	2005      	movs	r0, #5
    708c:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    708e:	a80c      	add	r0, sp, #48	; 0x30
    7090:	4b6d      	ldr	r3, [pc, #436]	; (7248 <I2C_getTEMPandMOISTURE+0x2e8>)
    7092:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    7094:	9a01      	ldr	r2, [sp, #4]
    7096:	6812      	ldr	r2, [r2, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    7098:	6a33      	ldr	r3, [r6, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    709a:	6935      	ldr	r5, [r6, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    709c:	405d      	eors	r5, r3
    709e:	4015      	ands	r5, r2
    70a0:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    70a2:	a80c      	add	r0, sp, #48	; 0x30
    70a4:	4b69      	ldr	r3, [pc, #420]	; (724c <I2C_getTEMPandMOISTURE+0x2ec>)
    70a6:	4798      	blx	r3
    70a8:	ea1b 0f05 	tst.w	fp, r5
    70ac:	f040 80e6 	bne.w	727c <I2C_getTEMPandMOISTURE+0x31c>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    70b0:	4d63      	ldr	r5, [pc, #396]	; (7240 <I2C_getTEMPandMOISTURE+0x2e0>)
    70b2:	9f03      	ldr	r7, [sp, #12]
    70b4:	eb05 13c7 	add.w	r3, r5, r7, lsl #7
    70b8:	615c      	str	r4, [r3, #20]
    70ba:	2005      	movs	r0, #5
    70bc:	4e61      	ldr	r6, [pc, #388]	; (7244 <I2C_getTEMPandMOISTURE+0x2e4>)
    70be:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    70c0:	9b04      	ldr	r3, [sp, #16]
    70c2:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    70c6:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    70ca:	9b05      	ldr	r3, [sp, #20]
    70cc:	62ab      	str	r3, [r5, #40]	; 0x28
    70ce:	9b06      	ldr	r3, [sp, #24]
    70d0:	62ab      	str	r3, [r5, #40]	; 0x28
    70d2:	2005      	movs	r0, #5
    70d4:	47b0      	blx	r6
    70d6:	2608      	movs	r6, #8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    70d8:	f8df 8164 	ldr.w	r8, [pc, #356]	; 7240 <I2C_getTEMPandMOISTURE+0x2e0>
    70dc:	9b02      	ldr	r3, [sp, #8]
    70de:	eb08 1ac3 	add.w	sl, r8, r3, lsl #7
	I2C_SENDDATA(0x00, forloop);
    70e2:	4d58      	ldr	r5, [pc, #352]	; (7244 <I2C_getTEMPandMOISTURE+0x2e4>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    70e4:	ea4f 19c7 	mov.w	r9, r7, lsl #7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    70e8:	f8ca b014 	str.w	fp, [sl, #20]
    70ec:	2005      	movs	r0, #5
    70ee:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    70f0:	eb08 0709 	add.w	r7, r8, r9
    70f4:	61bc      	str	r4, [r7, #24]
    70f6:	2005      	movs	r0, #5
    70f8:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    70fa:	617c      	str	r4, [r7, #20]
    70fc:	2005      	movs	r0, #5
    70fe:	47a8      	blx	r5
    7100:	3e01      	subs	r6, #1
    7102:	d1f1      	bne.n	70e8 <I2C_getTEMPandMOISTURE+0x188>
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    7104:	9b01      	ldr	r3, [sp, #4]
    7106:	f8c3 b004 	str.w	fp, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    710a:	4e4d      	ldr	r6, [pc, #308]	; (7240 <I2C_getTEMPandMOISTURE+0x2e0>)
    710c:	9a04      	ldr	r2, [sp, #16]
    710e:	eb06 15c2 	add.w	r5, r6, r2, lsl #7
    7112:	9a07      	ldr	r2, [sp, #28]
    7114:	62aa      	str	r2, [r5, #40]	; 0x28
    7116:	9a08      	ldr	r2, [sp, #32]
    7118:	62aa      	str	r2, [r5, #40]	; 0x28
	I2C_WAITACKOP(-4);
    711a:	2005      	movs	r0, #5
    711c:	4f49      	ldr	r7, [pc, #292]	; (7244 <I2C_getTEMPandMOISTURE+0x2e4>)
    711e:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7120:	9a03      	ldr	r2, [sp, #12]
    7122:	eb06 16c2 	add.w	r6, r6, r2, lsl #7
    7126:	61b4      	str	r4, [r6, #24]
    7128:	2005      	movs	r0, #5
    712a:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    712c:	a80d      	add	r0, sp, #52	; 0x34
    712e:	4b46      	ldr	r3, [pc, #280]	; (7248 <I2C_getTEMPandMOISTURE+0x2e8>)
    7130:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    7132:	9b01      	ldr	r3, [sp, #4]
    7134:	681a      	ldr	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    7136:	6a2b      	ldr	r3, [r5, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    7138:	692d      	ldr	r5, [r5, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    713a:	405d      	eors	r5, r3
    713c:	4015      	ands	r5, r2
    713e:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    7140:	a80d      	add	r0, sp, #52	; 0x34
    7142:	4b42      	ldr	r3, [pc, #264]	; (724c <I2C_getTEMPandMOISTURE+0x2ec>)
    7144:	4798      	blx	r3
    7146:	ea1b 0f05 	tst.w	fp, r5
    714a:	f040 80b1 	bne.w	72b0 <I2C_getTEMPandMOISTURE+0x350>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    714e:	4d3c      	ldr	r5, [pc, #240]	; (7240 <I2C_getTEMPandMOISTURE+0x2e0>)
    7150:	9b03      	ldr	r3, [sp, #12]
    7152:	eb05 17c3 	add.w	r7, r5, r3, lsl #7
    7156:	617c      	str	r4, [r7, #20]
    7158:	2005      	movs	r0, #5
    715a:	4e3a      	ldr	r6, [pc, #232]	; (7244 <I2C_getTEMPandMOISTURE+0x2e4>)
    715c:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    715e:	9a04      	ldr	r2, [sp, #16]
    7160:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    7164:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7168:	9a05      	ldr	r2, [sp, #20]
    716a:	62aa      	str	r2, [r5, #40]	; 0x28
    716c:	9906      	ldr	r1, [sp, #24]
    716e:	62a9      	str	r1, [r5, #40]	; 0x28
    7170:	2005      	movs	r0, #5
    7172:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7174:	61bc      	str	r4, [r7, #24]
    7176:	f8c5 b018 	str.w	fp, [r5, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    717a:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    717e:	9a05      	ldr	r2, [sp, #20]
    7180:	62aa      	str	r2, [r5, #40]	; 0x28
    7182:	9906      	ldr	r1, [sp, #24]
    7184:	62a9      	str	r1, [r5, #40]	; 0x28
	
	/* Then restart comms and send address 0x40 */
	I2C_START(-5);
    7186:	2005      	movs	r0, #5
    7188:	47b0      	blx	r6
    718a:	2005      	movs	r0, #5
    718c:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    718e:	f8c5 b014 	str.w	fp, [r5, #20]
    7192:	2005      	movs	r0, #5
    7194:	47b0      	blx	r6
    7196:	617c      	str	r4, [r7, #20]
    7198:	2005      	movs	r0, #5
    719a:	47b0      	blx	r6
    719c:	2707      	movs	r7, #7
	I2C_SENDADDR(0x40, forloop);
    719e:	2640      	movs	r6, #64	; 0x40
    71a0:	f8df 909c 	ldr.w	r9, [pc, #156]	; 7240 <I2C_getTEMPandMOISTURE+0x2e0>
    71a4:	9a02      	ldr	r2, [sp, #8]
    71a6:	eb09 12c2 	add.w	r2, r9, r2, lsl #7
    71aa:	9209      	str	r2, [sp, #36]	; 0x24
    71ac:	4d25      	ldr	r5, [pc, #148]	; (7244 <I2C_getTEMPandMOISTURE+0x2e4>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    71ae:	9b03      	ldr	r3, [sp, #12]
    71b0:	fa03 fa07 	lsl.w	sl, r3, r7
    71b4:	f016 0f40 	tst.w	r6, #64	; 0x40
    71b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    71ba:	bf14      	ite	ne
    71bc:	f8c3 b018 	strne.w	fp, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    71c0:	f8c3 b014 	streq.w	fp, [r3, #20]
    71c4:	2005      	movs	r0, #5
    71c6:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    71c8:	eb09 080a 	add.w	r8, r9, sl
    71cc:	f8c8 4018 	str.w	r4, [r8, #24]
    71d0:	2005      	movs	r0, #5
    71d2:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    71d4:	f8c8 4014 	str.w	r4, [r8, #20]
    71d8:	2005      	movs	r0, #5
    71da:	47a8      	blx	r5
    71dc:	0876      	lsrs	r6, r6, #1
    71de:	3f01      	subs	r7, #1
    71e0:	d1e8      	bne.n	71b4 <I2C_getTEMPandMOISTURE+0x254>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    71e2:	4d17      	ldr	r5, [pc, #92]	; (7240 <I2C_getTEMPandMOISTURE+0x2e0>)
    71e4:	9b04      	ldr	r3, [sp, #16]
    71e6:	eb05 16c3 	add.w	r6, r5, r3, lsl #7
    71ea:	f8c6 b018 	str.w	fp, [r6, #24]
	I2C_READ();
    71ee:	2005      	movs	r0, #5
    71f0:	4f14      	ldr	r7, [pc, #80]	; (7244 <I2C_getTEMPandMOISTURE+0x2e4>)
    71f2:	47b8      	blx	r7
    71f4:	9b03      	ldr	r3, [sp, #12]
    71f6:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    71fa:	61ac      	str	r4, [r5, #24]
    71fc:	2005      	movs	r0, #5
    71fe:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7200:	616c      	str	r4, [r5, #20]
    7202:	2005      	movs	r0, #5
    7204:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    7206:	9b01      	ldr	r3, [sp, #4]
    7208:	f8c3 b004 	str.w	fp, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    720c:	9a07      	ldr	r2, [sp, #28]
    720e:	62b2      	str	r2, [r6, #40]	; 0x28
    7210:	9a08      	ldr	r2, [sp, #32]
    7212:	62b2      	str	r2, [r6, #40]	; 0x28
	I2C_WAITACKIP(-6);
    7214:	2005      	movs	r0, #5
    7216:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7218:	61ac      	str	r4, [r5, #24]
    721a:	2005      	movs	r0, #5
    721c:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    721e:	a80e      	add	r0, sp, #56	; 0x38
    7220:	4b09      	ldr	r3, [pc, #36]	; (7248 <I2C_getTEMPandMOISTURE+0x2e8>)
    7222:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    7224:	9b01      	ldr	r3, [sp, #4]
    7226:	681a      	ldr	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    7228:	6a33      	ldr	r3, [r6, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    722a:	6935      	ldr	r5, [r6, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    722c:	405d      	eors	r5, r3
    722e:	4015      	ands	r5, r2
    7230:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    7232:	a80e      	add	r0, sp, #56	; 0x38
    7234:	4b05      	ldr	r3, [pc, #20]	; (724c <I2C_getTEMPandMOISTURE+0x2ec>)
    7236:	4798      	blx	r3
    7238:	ea1b 0f05 	tst.w	fp, r5
    723c:	d152      	bne.n	72e4 <I2C_getTEMPandMOISTURE+0x384>
    723e:	e007      	b.n	7250 <I2C_getTEMPandMOISTURE+0x2f0>
    7240:	41008000 	.word	0x41008000
    7244:	000015a9 	.word	0x000015a9
    7248:	00001549 	.word	0x00001549
    724c:	00001557 	.word	0x00001557
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7250:	9d03      	ldr	r5, [sp, #12]
    7252:	01eb      	lsls	r3, r5, #7
    7254:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    7258:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    725c:	615c      	str	r4, [r3, #20]
    725e:	2005      	movs	r0, #5
    7260:	4b3f      	ldr	r3, [pc, #252]	; (7360 <I2C_getTEMPandMOISTURE+0x400>)
    7262:	4798      	blx	r3

	*tl = 0;
    7264:	2300      	movs	r3, #0
    7266:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    7268:	7013      	strb	r3, [r2, #0]
    726a:	2608      	movs	r6, #8

	/* Beginning of the for-loops that captures data and read the lower 8-bits of the temperature */
	for (forloop = 0x80; forloop > 0;) {
    726c:	2780      	movs	r7, #128	; 0x80
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    726e:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 7364 <I2C_getTEMPandMOISTURE+0x404>
    7272:	eb0a 19c5 	add.w	r9, sl, r5, lsl #7
		I2C_clockhi();
    7276:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 7360 <I2C_getTEMPandMOISTURE+0x400>
    727a:	e054      	b.n	7326 <I2C_getTEMPandMOISTURE+0x3c6>
    727c:	4d39      	ldr	r5, [pc, #228]	; (7364 <I2C_getTEMPandMOISTURE+0x404>)
    727e:	9b03      	ldr	r3, [sp, #12]
    7280:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    7284:	619c      	str	r4, [r3, #24]
	I2C_WAITACKOP(-3);
    7286:	2005      	movs	r0, #5
    7288:	47b8      	blx	r7
    728a:	9b04      	ldr	r3, [sp, #16]
    728c:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    7290:	f8c5 b018 	str.w	fp, [r5, #24]
    7294:	2005      	movs	r0, #5
    7296:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    7298:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    729c:	9b05      	ldr	r3, [sp, #20]
    729e:	62ab      	str	r3, [r5, #40]	; 0x28
    72a0:	9b06      	ldr	r3, [sp, #24]
    72a2:	62ab      	str	r3, [r5, #40]	; 0x28
    72a4:	2005      	movs	r0, #5
    72a6:	47b8      	blx	r7
    72a8:	f06f 0002 	mvn.w	r0, #2
    72ac:	f000 be29 	b.w	7f02 <I2C_getTEMPandMOISTURE+0xfa2>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    72b0:	4d2c      	ldr	r5, [pc, #176]	; (7364 <I2C_getTEMPandMOISTURE+0x404>)
    72b2:	9b03      	ldr	r3, [sp, #12]
    72b4:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    72b8:	619c      	str	r4, [r3, #24]
	I2C_WAITACKOP(-4);
    72ba:	2005      	movs	r0, #5
    72bc:	47b8      	blx	r7
    72be:	9b04      	ldr	r3, [sp, #16]
    72c0:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    72c4:	f8c5 b018 	str.w	fp, [r5, #24]
    72c8:	2005      	movs	r0, #5
    72ca:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    72cc:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    72d0:	9b05      	ldr	r3, [sp, #20]
    72d2:	62ab      	str	r3, [r5, #40]	; 0x28
    72d4:	9b06      	ldr	r3, [sp, #24]
    72d6:	62ab      	str	r3, [r5, #40]	; 0x28
    72d8:	2005      	movs	r0, #5
    72da:	47b8      	blx	r7
    72dc:	f06f 0003 	mvn.w	r0, #3
    72e0:	f000 be0f 	b.w	7f02 <I2C_getTEMPandMOISTURE+0xfa2>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    72e4:	4d1f      	ldr	r5, [pc, #124]	; (7364 <I2C_getTEMPandMOISTURE+0x404>)
    72e6:	9b03      	ldr	r3, [sp, #12]
    72e8:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    72ec:	619c      	str	r4, [r3, #24]
	I2C_WAITACKIP(-6);
    72ee:	2005      	movs	r0, #5
    72f0:	47b8      	blx	r7
    72f2:	9b04      	ldr	r3, [sp, #16]
    72f4:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    72f8:	f8c5 b018 	str.w	fp, [r5, #24]
    72fc:	2005      	movs	r0, #5
    72fe:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    7300:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7304:	9b05      	ldr	r3, [sp, #20]
    7306:	62ab      	str	r3, [r5, #40]	; 0x28
    7308:	9b06      	ldr	r3, [sp, #24]
    730a:	62ab      	str	r3, [r5, #40]	; 0x28
    730c:	2005      	movs	r0, #5
    730e:	47b8      	blx	r7
    7310:	f06f 0005 	mvn.w	r0, #5
    7314:	f000 bdf5 	b.w	7f02 <I2C_getTEMPandMOISTURE+0xfa2>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7318:	f8c9 4014 	str.w	r4, [r9, #20]
	    if (gpio_get_pin_level(i2csda)) {
			(*tl) |= forloop;
		}

		I2C_clocklo();
    731c:	2005      	movs	r0, #5
    731e:	47c0      	blx	r8
		forloop = forloop / 2;
    7320:	087f      	lsrs	r7, r7, #1
	for (forloop = 0x80; forloop > 0;) {
    7322:	3e01      	subs	r6, #1
    7324:	d024      	beq.n	7370 <I2C_getTEMPandMOISTURE+0x410>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7326:	f8c9 4018 	str.w	r4, [r9, #24]
		I2C_clockhi();
    732a:	2005      	movs	r0, #5
    732c:	47c0      	blx	r8
	CRITICAL_SECTION_ENTER();
    732e:	a80f      	add	r0, sp, #60	; 0x3c
    7330:	4b0d      	ldr	r3, [pc, #52]	; (7368 <I2C_getTEMPandMOISTURE+0x408>)
    7332:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    7334:	9b01      	ldr	r3, [sp, #4]
    7336:	6819      	ldr	r1, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    7338:	9b02      	ldr	r3, [sp, #8]
    733a:	eb0a 12c3 	add.w	r2, sl, r3, lsl #7
    733e:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    7340:	6915      	ldr	r5, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    7342:	405d      	eors	r5, r3
    7344:	400d      	ands	r5, r1
    7346:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    7348:	a80f      	add	r0, sp, #60	; 0x3c
    734a:	4b08      	ldr	r3, [pc, #32]	; (736c <I2C_getTEMPandMOISTURE+0x40c>)
    734c:	4798      	blx	r3
	    if (gpio_get_pin_level(i2csda)) {
    734e:	ea1b 0f05 	tst.w	fp, r5
    7352:	d0e1      	beq.n	7318 <I2C_getTEMPandMOISTURE+0x3b8>
			(*tl) |= forloop;
    7354:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    7356:	7813      	ldrb	r3, [r2, #0]
    7358:	433b      	orrs	r3, r7
    735a:	7013      	strb	r3, [r2, #0]
    735c:	e7dc      	b.n	7318 <I2C_getTEMPandMOISTURE+0x3b8>
    735e:	bf00      	nop
    7360:	000015a9 	.word	0x000015a9
    7364:	41008000 	.word	0x41008000
    7368:	00001549 	.word	0x00001549
    736c:	00001557 	.word	0x00001557
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7370:	4da8      	ldr	r5, [pc, #672]	; (7614 <I2C_getTEMPandMOISTURE+0x6b4>)
    7372:	9b03      	ldr	r3, [sp, #12]
    7374:	eb05 17c3 	add.w	r7, r5, r3, lsl #7
    7378:	61bc      	str	r4, [r7, #24]
	}

	I2C_STOP();
    737a:	2005      	movs	r0, #5
    737c:	4ea6      	ldr	r6, [pc, #664]	; (7618 <I2C_getTEMPandMOISTURE+0x6b8>)
    737e:	47b0      	blx	r6
    7380:	9a04      	ldr	r2, [sp, #16]
    7382:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    7386:	f8c5 b018 	str.w	fp, [r5, #24]
    738a:	2005      	movs	r0, #5
    738c:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    738e:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7392:	9a05      	ldr	r2, [sp, #20]
    7394:	62aa      	str	r2, [r5, #40]	; 0x28
    7396:	9906      	ldr	r1, [sp, #24]
    7398:	62a9      	str	r1, [r5, #40]	; 0x28
    739a:	2005      	movs	r0, #5
    739c:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    739e:	61bc      	str	r4, [r7, #24]
    73a0:	f8c5 b018 	str.w	fp, [r5, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    73a4:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    73a8:	9a05      	ldr	r2, [sp, #20]
    73aa:	62aa      	str	r2, [r5, #40]	; 0x28
    73ac:	9906      	ldr	r1, [sp, #24]
    73ae:	62a9      	str	r1, [r5, #40]	; 0x28
	I2C_CLOSE();
	/* If successful, and code execution got here, the close the I2C channel */
	
	/* Open an I2C channel, send address 0x40, index register 0x01 */
	I2C_OPEN(sda, clk);
	I2C_START(-2);
    73b0:	2005      	movs	r0, #5
    73b2:	47b0      	blx	r6
    73b4:	2005      	movs	r0, #5
    73b6:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    73b8:	f8c5 b014 	str.w	fp, [r5, #20]
    73bc:	2005      	movs	r0, #5
    73be:	47b0      	blx	r6
    73c0:	617c      	str	r4, [r7, #20]
    73c2:	2005      	movs	r0, #5
    73c4:	47b0      	blx	r6
    73c6:	2707      	movs	r7, #7
	I2C_SENDADDR(0x40, forloop);
    73c8:	2640      	movs	r6, #64	; 0x40
    73ca:	f8df 9248 	ldr.w	r9, [pc, #584]	; 7614 <I2C_getTEMPandMOISTURE+0x6b4>
    73ce:	9a02      	ldr	r2, [sp, #8]
    73d0:	eb09 12c2 	add.w	r2, r9, r2, lsl #7
    73d4:	9209      	str	r2, [sp, #36]	; 0x24
    73d6:	4d90      	ldr	r5, [pc, #576]	; (7618 <I2C_getTEMPandMOISTURE+0x6b8>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    73d8:	9b03      	ldr	r3, [sp, #12]
    73da:	fa03 fa07 	lsl.w	sl, r3, r7
    73de:	f016 0f40 	tst.w	r6, #64	; 0x40
    73e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    73e4:	bf14      	ite	ne
    73e6:	f8c3 b018 	strne.w	fp, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    73ea:	f8c3 b014 	streq.w	fp, [r3, #20]
    73ee:	2005      	movs	r0, #5
    73f0:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    73f2:	eb09 080a 	add.w	r8, r9, sl
    73f6:	f8c8 4018 	str.w	r4, [r8, #24]
    73fa:	2005      	movs	r0, #5
    73fc:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    73fe:	f8c8 4014 	str.w	r4, [r8, #20]
    7402:	2005      	movs	r0, #5
    7404:	47a8      	blx	r5
    7406:	0876      	lsrs	r6, r6, #1
    7408:	3f01      	subs	r7, #1
    740a:	d1e8      	bne.n	73de <I2C_getTEMPandMOISTURE+0x47e>
    740c:	4d81      	ldr	r5, [pc, #516]	; (7614 <I2C_getTEMPandMOISTURE+0x6b4>)
    740e:	9b04      	ldr	r3, [sp, #16]
    7410:	eb05 16c3 	add.w	r6, r5, r3, lsl #7
    7414:	f8c6 b014 	str.w	fp, [r6, #20]
	I2C_WRITE();
    7418:	2005      	movs	r0, #5
    741a:	4f7f      	ldr	r7, [pc, #508]	; (7618 <I2C_getTEMPandMOISTURE+0x6b8>)
    741c:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    741e:	9b03      	ldr	r3, [sp, #12]
    7420:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    7424:	61ac      	str	r4, [r5, #24]
    7426:	2005      	movs	r0, #5
    7428:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    742a:	616c      	str	r4, [r5, #20]
    742c:	2005      	movs	r0, #5
    742e:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    7430:	9b01      	ldr	r3, [sp, #4]
    7432:	f8c3 b004 	str.w	fp, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7436:	9a07      	ldr	r2, [sp, #28]
    7438:	62b2      	str	r2, [r6, #40]	; 0x28
    743a:	9a08      	ldr	r2, [sp, #32]
    743c:	62b2      	str	r2, [r6, #40]	; 0x28
	I2C_WAITACKOP(-3);
    743e:	2005      	movs	r0, #5
    7440:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7442:	61ac      	str	r4, [r5, #24]
    7444:	2005      	movs	r0, #5
    7446:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    7448:	a810      	add	r0, sp, #64	; 0x40
    744a:	4b74      	ldr	r3, [pc, #464]	; (761c <I2C_getTEMPandMOISTURE+0x6bc>)
    744c:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    744e:	9b01      	ldr	r3, [sp, #4]
    7450:	681a      	ldr	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    7452:	6a33      	ldr	r3, [r6, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    7454:	6935      	ldr	r5, [r6, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    7456:	405d      	eors	r5, r3
    7458:	4015      	ands	r5, r2
    745a:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    745c:	a810      	add	r0, sp, #64	; 0x40
    745e:	4b70      	ldr	r3, [pc, #448]	; (7620 <I2C_getTEMPandMOISTURE+0x6c0>)
    7460:	4798      	blx	r3
    7462:	ea1b 0f05 	tst.w	fp, r5
    7466:	f040 80f3 	bne.w	7650 <I2C_getTEMPandMOISTURE+0x6f0>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    746a:	4d6a      	ldr	r5, [pc, #424]	; (7614 <I2C_getTEMPandMOISTURE+0x6b4>)
    746c:	9b03      	ldr	r3, [sp, #12]
    746e:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    7472:	615c      	str	r4, [r3, #20]
    7474:	2005      	movs	r0, #5
    7476:	4e68      	ldr	r6, [pc, #416]	; (7618 <I2C_getTEMPandMOISTURE+0x6b8>)
    7478:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    747a:	9a04      	ldr	r2, [sp, #16]
    747c:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    7480:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7484:	9a05      	ldr	r2, [sp, #20]
    7486:	62aa      	str	r2, [r5, #40]	; 0x28
    7488:	9a06      	ldr	r2, [sp, #24]
    748a:	62aa      	str	r2, [r5, #40]	; 0x28
    748c:	2005      	movs	r0, #5
    748e:	47b0      	blx	r6
    7490:	2708      	movs	r7, #8
	I2C_SENDDATA(0x01, forloop);
    7492:	2680      	movs	r6, #128	; 0x80
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7494:	f8df 917c 	ldr.w	r9, [pc, #380]	; 7614 <I2C_getTEMPandMOISTURE+0x6b4>
    7498:	9a02      	ldr	r2, [sp, #8]
    749a:	eb09 12c2 	add.w	r2, r9, r2, lsl #7
    749e:	9209      	str	r2, [sp, #36]	; 0x24
    74a0:	4d5d      	ldr	r5, [pc, #372]	; (7618 <I2C_getTEMPandMOISTURE+0x6b8>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    74a2:	9b03      	ldr	r3, [sp, #12]
    74a4:	ea4f 1ac3 	mov.w	sl, r3, lsl #7
    74a8:	f016 0f01 	tst.w	r6, #1
    74ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
    74ae:	bf14      	ite	ne
    74b0:	f8c3 b018 	strne.w	fp, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    74b4:	f8c3 b014 	streq.w	fp, [r3, #20]
    74b8:	2005      	movs	r0, #5
    74ba:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    74bc:	eb09 080a 	add.w	r8, r9, sl
    74c0:	f8c8 4018 	str.w	r4, [r8, #24]
    74c4:	2005      	movs	r0, #5
    74c6:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    74c8:	f8c8 4014 	str.w	r4, [r8, #20]
    74cc:	2005      	movs	r0, #5
    74ce:	47a8      	blx	r5
    74d0:	0876      	lsrs	r6, r6, #1
    74d2:	3f01      	subs	r7, #1
    74d4:	d1e8      	bne.n	74a8 <I2C_getTEMPandMOISTURE+0x548>
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    74d6:	9b01      	ldr	r3, [sp, #4]
    74d8:	f8c3 b004 	str.w	fp, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    74dc:	4e4d      	ldr	r6, [pc, #308]	; (7614 <I2C_getTEMPandMOISTURE+0x6b4>)
    74de:	9a04      	ldr	r2, [sp, #16]
    74e0:	eb06 15c2 	add.w	r5, r6, r2, lsl #7
    74e4:	9a07      	ldr	r2, [sp, #28]
    74e6:	62aa      	str	r2, [r5, #40]	; 0x28
    74e8:	9a08      	ldr	r2, [sp, #32]
    74ea:	62aa      	str	r2, [r5, #40]	; 0x28
	I2C_WAITACKOP(-4);
    74ec:	2005      	movs	r0, #5
    74ee:	4f4a      	ldr	r7, [pc, #296]	; (7618 <I2C_getTEMPandMOISTURE+0x6b8>)
    74f0:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    74f2:	9a03      	ldr	r2, [sp, #12]
    74f4:	eb06 16c2 	add.w	r6, r6, r2, lsl #7
    74f8:	61b4      	str	r4, [r6, #24]
    74fa:	2005      	movs	r0, #5
    74fc:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    74fe:	a811      	add	r0, sp, #68	; 0x44
    7500:	4b46      	ldr	r3, [pc, #280]	; (761c <I2C_getTEMPandMOISTURE+0x6bc>)
    7502:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    7504:	9b01      	ldr	r3, [sp, #4]
    7506:	681a      	ldr	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    7508:	6a2b      	ldr	r3, [r5, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    750a:	692d      	ldr	r5, [r5, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    750c:	405d      	eors	r5, r3
    750e:	4015      	ands	r5, r2
    7510:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    7512:	a811      	add	r0, sp, #68	; 0x44
    7514:	4b42      	ldr	r3, [pc, #264]	; (7620 <I2C_getTEMPandMOISTURE+0x6c0>)
    7516:	4798      	blx	r3
    7518:	ea1b 0f05 	tst.w	fp, r5
    751c:	f040 80b2 	bne.w	7684 <I2C_getTEMPandMOISTURE+0x724>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7520:	4d3c      	ldr	r5, [pc, #240]	; (7614 <I2C_getTEMPandMOISTURE+0x6b4>)
    7522:	9b03      	ldr	r3, [sp, #12]
    7524:	eb05 17c3 	add.w	r7, r5, r3, lsl #7
    7528:	617c      	str	r4, [r7, #20]
    752a:	2005      	movs	r0, #5
    752c:	4e3a      	ldr	r6, [pc, #232]	; (7618 <I2C_getTEMPandMOISTURE+0x6b8>)
    752e:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    7530:	9a04      	ldr	r2, [sp, #16]
    7532:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    7536:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    753a:	9a05      	ldr	r2, [sp, #20]
    753c:	62aa      	str	r2, [r5, #40]	; 0x28
    753e:	9906      	ldr	r1, [sp, #24]
    7540:	62a9      	str	r1, [r5, #40]	; 0x28
    7542:	2005      	movs	r0, #5
    7544:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7546:	61bc      	str	r4, [r7, #24]
    7548:	f8c5 b018 	str.w	fp, [r5, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    754c:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7550:	9a05      	ldr	r2, [sp, #20]
    7552:	62aa      	str	r2, [r5, #40]	; 0x28
    7554:	9906      	ldr	r1, [sp, #24]
    7556:	62a9      	str	r1, [r5, #40]	; 0x28
	
	/* Then restart comms and send address 0x40 */
	I2C_START(-5);
    7558:	2005      	movs	r0, #5
    755a:	47b0      	blx	r6
    755c:	2005      	movs	r0, #5
    755e:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7560:	f8c5 b014 	str.w	fp, [r5, #20]
    7564:	2005      	movs	r0, #5
    7566:	47b0      	blx	r6
    7568:	617c      	str	r4, [r7, #20]
    756a:	2005      	movs	r0, #5
    756c:	47b0      	blx	r6
    756e:	2707      	movs	r7, #7
	I2C_SENDADDR(0x40, forloop);
    7570:	2640      	movs	r6, #64	; 0x40
    7572:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 7614 <I2C_getTEMPandMOISTURE+0x6b4>
    7576:	9a02      	ldr	r2, [sp, #8]
    7578:	eb09 12c2 	add.w	r2, r9, r2, lsl #7
    757c:	9209      	str	r2, [sp, #36]	; 0x24
    757e:	4d26      	ldr	r5, [pc, #152]	; (7618 <I2C_getTEMPandMOISTURE+0x6b8>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7580:	9b03      	ldr	r3, [sp, #12]
    7582:	fa03 fa07 	lsl.w	sl, r3, r7
    7586:	f016 0f40 	tst.w	r6, #64	; 0x40
    758a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    758c:	bf14      	ite	ne
    758e:	f8c3 b018 	strne.w	fp, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7592:	f8c3 b014 	streq.w	fp, [r3, #20]
    7596:	2005      	movs	r0, #5
    7598:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    759a:	eb09 080a 	add.w	r8, r9, sl
    759e:	f8c8 4018 	str.w	r4, [r8, #24]
    75a2:	2005      	movs	r0, #5
    75a4:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    75a6:	f8c8 4014 	str.w	r4, [r8, #20]
    75aa:	2005      	movs	r0, #5
    75ac:	47a8      	blx	r5
    75ae:	0876      	lsrs	r6, r6, #1
    75b0:	3f01      	subs	r7, #1
    75b2:	d1e8      	bne.n	7586 <I2C_getTEMPandMOISTURE+0x626>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    75b4:	4d17      	ldr	r5, [pc, #92]	; (7614 <I2C_getTEMPandMOISTURE+0x6b4>)
    75b6:	9b04      	ldr	r3, [sp, #16]
    75b8:	eb05 16c3 	add.w	r6, r5, r3, lsl #7
    75bc:	f8c6 b018 	str.w	fp, [r6, #24]
	I2C_READ();
    75c0:	2005      	movs	r0, #5
    75c2:	4f15      	ldr	r7, [pc, #84]	; (7618 <I2C_getTEMPandMOISTURE+0x6b8>)
    75c4:	47b8      	blx	r7
    75c6:	9b03      	ldr	r3, [sp, #12]
    75c8:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    75cc:	61ac      	str	r4, [r5, #24]
    75ce:	2005      	movs	r0, #5
    75d0:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    75d2:	616c      	str	r4, [r5, #20]
    75d4:	2005      	movs	r0, #5
    75d6:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    75d8:	9b01      	ldr	r3, [sp, #4]
    75da:	f8c3 b004 	str.w	fp, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    75de:	9a07      	ldr	r2, [sp, #28]
    75e0:	62b2      	str	r2, [r6, #40]	; 0x28
    75e2:	9a08      	ldr	r2, [sp, #32]
    75e4:	62b2      	str	r2, [r6, #40]	; 0x28
	I2C_WAITACKIP(-6);
    75e6:	2005      	movs	r0, #5
    75e8:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    75ea:	61ac      	str	r4, [r5, #24]
    75ec:	2005      	movs	r0, #5
    75ee:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    75f0:	a812      	add	r0, sp, #72	; 0x48
    75f2:	4b0a      	ldr	r3, [pc, #40]	; (761c <I2C_getTEMPandMOISTURE+0x6bc>)
    75f4:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    75f6:	9b01      	ldr	r3, [sp, #4]
    75f8:	681a      	ldr	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    75fa:	6a33      	ldr	r3, [r6, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    75fc:	6935      	ldr	r5, [r6, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    75fe:	405d      	eors	r5, r3
    7600:	4015      	ands	r5, r2
    7602:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    7604:	a812      	add	r0, sp, #72	; 0x48
    7606:	4b06      	ldr	r3, [pc, #24]	; (7620 <I2C_getTEMPandMOISTURE+0x6c0>)
    7608:	4798      	blx	r3
    760a:	ea1b 0f05 	tst.w	fp, r5
    760e:	d153      	bne.n	76b8 <I2C_getTEMPandMOISTURE+0x758>
    7610:	e008      	b.n	7624 <I2C_getTEMPandMOISTURE+0x6c4>
    7612:	bf00      	nop
    7614:	41008000 	.word	0x41008000
    7618:	000015a9 	.word	0x000015a9
    761c:	00001549 	.word	0x00001549
    7620:	00001557 	.word	0x00001557
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7624:	9d03      	ldr	r5, [sp, #12]
    7626:	01eb      	lsls	r3, r5, #7
    7628:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    762c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    7630:	615c      	str	r4, [r3, #20]
    7632:	2005      	movs	r0, #5
    7634:	4b3f      	ldr	r3, [pc, #252]	; (7734 <I2C_getTEMPandMOISTURE+0x7d4>)
    7636:	4798      	blx	r3

	*th = 0;
    7638:	2300      	movs	r3, #0
    763a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    763c:	7013      	strb	r3, [r2, #0]
    763e:	2608      	movs	r6, #8
	
	/* Beginning of the for-loops that captures data and read the upper 8-bits of the temperature */
	for (forloop = 0x80; forloop > 0;) {
    7640:	2780      	movs	r7, #128	; 0x80
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7642:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 7738 <I2C_getTEMPandMOISTURE+0x7d8>
    7646:	eb0a 19c5 	add.w	r9, sl, r5, lsl #7
		I2C_clockhi();
    764a:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 7734 <I2C_getTEMPandMOISTURE+0x7d4>
    764e:	e054      	b.n	76fa <I2C_getTEMPandMOISTURE+0x79a>
    7650:	4d39      	ldr	r5, [pc, #228]	; (7738 <I2C_getTEMPandMOISTURE+0x7d8>)
    7652:	9b03      	ldr	r3, [sp, #12]
    7654:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    7658:	619c      	str	r4, [r3, #24]
	I2C_WAITACKOP(-3);
    765a:	2005      	movs	r0, #5
    765c:	47b8      	blx	r7
    765e:	9b04      	ldr	r3, [sp, #16]
    7660:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    7664:	f8c5 b018 	str.w	fp, [r5, #24]
    7668:	2005      	movs	r0, #5
    766a:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    766c:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7670:	9b05      	ldr	r3, [sp, #20]
    7672:	62ab      	str	r3, [r5, #40]	; 0x28
    7674:	9b06      	ldr	r3, [sp, #24]
    7676:	62ab      	str	r3, [r5, #40]	; 0x28
    7678:	2005      	movs	r0, #5
    767a:	47b8      	blx	r7
    767c:	f06f 0002 	mvn.w	r0, #2
    7680:	f000 bc3f 	b.w	7f02 <I2C_getTEMPandMOISTURE+0xfa2>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7684:	4d2c      	ldr	r5, [pc, #176]	; (7738 <I2C_getTEMPandMOISTURE+0x7d8>)
    7686:	9b03      	ldr	r3, [sp, #12]
    7688:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    768c:	619c      	str	r4, [r3, #24]
	I2C_WAITACKOP(-4);
    768e:	2005      	movs	r0, #5
    7690:	47b8      	blx	r7
    7692:	9b04      	ldr	r3, [sp, #16]
    7694:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    7698:	f8c5 b018 	str.w	fp, [r5, #24]
    769c:	2005      	movs	r0, #5
    769e:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    76a0:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    76a4:	9b05      	ldr	r3, [sp, #20]
    76a6:	62ab      	str	r3, [r5, #40]	; 0x28
    76a8:	9b06      	ldr	r3, [sp, #24]
    76aa:	62ab      	str	r3, [r5, #40]	; 0x28
    76ac:	2005      	movs	r0, #5
    76ae:	47b8      	blx	r7
    76b0:	f06f 0003 	mvn.w	r0, #3
    76b4:	f000 bc25 	b.w	7f02 <I2C_getTEMPandMOISTURE+0xfa2>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    76b8:	4d1f      	ldr	r5, [pc, #124]	; (7738 <I2C_getTEMPandMOISTURE+0x7d8>)
    76ba:	9b03      	ldr	r3, [sp, #12]
    76bc:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    76c0:	619c      	str	r4, [r3, #24]
	I2C_WAITACKIP(-6);
    76c2:	2005      	movs	r0, #5
    76c4:	47b8      	blx	r7
    76c6:	9b04      	ldr	r3, [sp, #16]
    76c8:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    76cc:	f8c5 b018 	str.w	fp, [r5, #24]
    76d0:	2005      	movs	r0, #5
    76d2:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    76d4:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    76d8:	9b05      	ldr	r3, [sp, #20]
    76da:	62ab      	str	r3, [r5, #40]	; 0x28
    76dc:	9b06      	ldr	r3, [sp, #24]
    76de:	62ab      	str	r3, [r5, #40]	; 0x28
    76e0:	2005      	movs	r0, #5
    76e2:	47b8      	blx	r7
    76e4:	f06f 0005 	mvn.w	r0, #5
    76e8:	f000 bc0b 	b.w	7f02 <I2C_getTEMPandMOISTURE+0xfa2>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    76ec:	f8c9 4014 	str.w	r4, [r9, #20]
		if (gpio_get_pin_level(i2csda)) {
			(*th) |= forloop;
		}

		I2C_clocklo();
    76f0:	2005      	movs	r0, #5
    76f2:	47c0      	blx	r8
		forloop = forloop / 2;
    76f4:	087f      	lsrs	r7, r7, #1
	for (forloop = 0x80; forloop > 0;) {
    76f6:	3e01      	subs	r6, #1
    76f8:	d024      	beq.n	7744 <I2C_getTEMPandMOISTURE+0x7e4>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    76fa:	f8c9 4018 	str.w	r4, [r9, #24]
		I2C_clockhi();
    76fe:	2005      	movs	r0, #5
    7700:	47c0      	blx	r8
	CRITICAL_SECTION_ENTER();
    7702:	a813      	add	r0, sp, #76	; 0x4c
    7704:	4b0d      	ldr	r3, [pc, #52]	; (773c <I2C_getTEMPandMOISTURE+0x7dc>)
    7706:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    7708:	9b01      	ldr	r3, [sp, #4]
    770a:	6819      	ldr	r1, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    770c:	9b02      	ldr	r3, [sp, #8]
    770e:	eb0a 12c3 	add.w	r2, sl, r3, lsl #7
    7712:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    7714:	6915      	ldr	r5, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    7716:	405d      	eors	r5, r3
    7718:	400d      	ands	r5, r1
    771a:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    771c:	a813      	add	r0, sp, #76	; 0x4c
    771e:	4b08      	ldr	r3, [pc, #32]	; (7740 <I2C_getTEMPandMOISTURE+0x7e0>)
    7720:	4798      	blx	r3
		if (gpio_get_pin_level(i2csda)) {
    7722:	ea1b 0f05 	tst.w	fp, r5
    7726:	d0e1      	beq.n	76ec <I2C_getTEMPandMOISTURE+0x78c>
			(*th) |= forloop;
    7728:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    772a:	7813      	ldrb	r3, [r2, #0]
    772c:	433b      	orrs	r3, r7
    772e:	7013      	strb	r3, [r2, #0]
    7730:	e7dc      	b.n	76ec <I2C_getTEMPandMOISTURE+0x78c>
    7732:	bf00      	nop
    7734:	000015a9 	.word	0x000015a9
    7738:	41008000 	.word	0x41008000
    773c:	00001549 	.word	0x00001549
    7740:	00001557 	.word	0x00001557
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7744:	4da8      	ldr	r5, [pc, #672]	; (79e8 <I2C_getTEMPandMOISTURE+0xa88>)
    7746:	9b03      	ldr	r3, [sp, #12]
    7748:	eb05 17c3 	add.w	r7, r5, r3, lsl #7
    774c:	61bc      	str	r4, [r7, #24]
	}

	I2C_STOP();
    774e:	2005      	movs	r0, #5
    7750:	4ea6      	ldr	r6, [pc, #664]	; (79ec <I2C_getTEMPandMOISTURE+0xa8c>)
    7752:	47b0      	blx	r6
    7754:	9a04      	ldr	r2, [sp, #16]
    7756:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    775a:	f8c5 b018 	str.w	fp, [r5, #24]
    775e:	2005      	movs	r0, #5
    7760:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    7762:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7766:	9a05      	ldr	r2, [sp, #20]
    7768:	62aa      	str	r2, [r5, #40]	; 0x28
    776a:	9906      	ldr	r1, [sp, #24]
    776c:	62a9      	str	r1, [r5, #40]	; 0x28
    776e:	2005      	movs	r0, #5
    7770:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7772:	61bc      	str	r4, [r7, #24]
    7774:	f8c5 b018 	str.w	fp, [r5, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    7778:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    777c:	9a05      	ldr	r2, [sp, #20]
    777e:	62aa      	str	r2, [r5, #40]	; 0x28
    7780:	9906      	ldr	r1, [sp, #24]
    7782:	62a9      	str	r1, [r5, #40]	; 0x28
	I2C_CLOSE();
	/* If successful, and code execution got here, the close the I2C channel */
	
	/* Open an I2C channel, send address 0x40, index register 0x02 */
	I2C_OPEN(sda, clk);
	I2C_START(-2);
    7784:	2005      	movs	r0, #5
    7786:	47b0      	blx	r6
    7788:	2005      	movs	r0, #5
    778a:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    778c:	f8c5 b014 	str.w	fp, [r5, #20]
    7790:	2005      	movs	r0, #5
    7792:	47b0      	blx	r6
    7794:	617c      	str	r4, [r7, #20]
    7796:	2005      	movs	r0, #5
    7798:	47b0      	blx	r6
    779a:	2707      	movs	r7, #7
	I2C_SENDADDR(0x40, forloop);
    779c:	2640      	movs	r6, #64	; 0x40
    779e:	f8df 9248 	ldr.w	r9, [pc, #584]	; 79e8 <I2C_getTEMPandMOISTURE+0xa88>
    77a2:	9a02      	ldr	r2, [sp, #8]
    77a4:	eb09 12c2 	add.w	r2, r9, r2, lsl #7
    77a8:	9209      	str	r2, [sp, #36]	; 0x24
    77aa:	4d90      	ldr	r5, [pc, #576]	; (79ec <I2C_getTEMPandMOISTURE+0xa8c>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    77ac:	9b03      	ldr	r3, [sp, #12]
    77ae:	fa03 fa07 	lsl.w	sl, r3, r7
    77b2:	f016 0f40 	tst.w	r6, #64	; 0x40
    77b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    77b8:	bf14      	ite	ne
    77ba:	f8c3 b018 	strne.w	fp, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    77be:	f8c3 b014 	streq.w	fp, [r3, #20]
    77c2:	2005      	movs	r0, #5
    77c4:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    77c6:	eb09 080a 	add.w	r8, r9, sl
    77ca:	f8c8 4018 	str.w	r4, [r8, #24]
    77ce:	2005      	movs	r0, #5
    77d0:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    77d2:	f8c8 4014 	str.w	r4, [r8, #20]
    77d6:	2005      	movs	r0, #5
    77d8:	47a8      	blx	r5
    77da:	0876      	lsrs	r6, r6, #1
    77dc:	3f01      	subs	r7, #1
    77de:	d1e8      	bne.n	77b2 <I2C_getTEMPandMOISTURE+0x852>
    77e0:	4d81      	ldr	r5, [pc, #516]	; (79e8 <I2C_getTEMPandMOISTURE+0xa88>)
    77e2:	9b04      	ldr	r3, [sp, #16]
    77e4:	eb05 16c3 	add.w	r6, r5, r3, lsl #7
    77e8:	f8c6 b014 	str.w	fp, [r6, #20]
	I2C_WRITE();
    77ec:	2005      	movs	r0, #5
    77ee:	4f7f      	ldr	r7, [pc, #508]	; (79ec <I2C_getTEMPandMOISTURE+0xa8c>)
    77f0:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    77f2:	9b03      	ldr	r3, [sp, #12]
    77f4:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    77f8:	61ac      	str	r4, [r5, #24]
    77fa:	2005      	movs	r0, #5
    77fc:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    77fe:	616c      	str	r4, [r5, #20]
    7800:	2005      	movs	r0, #5
    7802:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    7804:	9b01      	ldr	r3, [sp, #4]
    7806:	f8c3 b004 	str.w	fp, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    780a:	9a07      	ldr	r2, [sp, #28]
    780c:	62b2      	str	r2, [r6, #40]	; 0x28
    780e:	9a08      	ldr	r2, [sp, #32]
    7810:	62b2      	str	r2, [r6, #40]	; 0x28
	I2C_WAITACKOP(-3);
    7812:	2005      	movs	r0, #5
    7814:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7816:	61ac      	str	r4, [r5, #24]
    7818:	2005      	movs	r0, #5
    781a:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    781c:	a814      	add	r0, sp, #80	; 0x50
    781e:	4b74      	ldr	r3, [pc, #464]	; (79f0 <I2C_getTEMPandMOISTURE+0xa90>)
    7820:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    7822:	9b01      	ldr	r3, [sp, #4]
    7824:	681a      	ldr	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    7826:	6a33      	ldr	r3, [r6, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    7828:	6935      	ldr	r5, [r6, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    782a:	405d      	eors	r5, r3
    782c:	4015      	ands	r5, r2
    782e:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    7830:	a814      	add	r0, sp, #80	; 0x50
    7832:	4b70      	ldr	r3, [pc, #448]	; (79f4 <I2C_getTEMPandMOISTURE+0xa94>)
    7834:	4798      	blx	r3
    7836:	ea1b 0f05 	tst.w	fp, r5
    783a:	f040 80f3 	bne.w	7a24 <I2C_getTEMPandMOISTURE+0xac4>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    783e:	4d6a      	ldr	r5, [pc, #424]	; (79e8 <I2C_getTEMPandMOISTURE+0xa88>)
    7840:	9b03      	ldr	r3, [sp, #12]
    7842:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    7846:	615c      	str	r4, [r3, #20]
    7848:	2005      	movs	r0, #5
    784a:	4e68      	ldr	r6, [pc, #416]	; (79ec <I2C_getTEMPandMOISTURE+0xa8c>)
    784c:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    784e:	9a04      	ldr	r2, [sp, #16]
    7850:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    7854:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7858:	9a05      	ldr	r2, [sp, #20]
    785a:	62aa      	str	r2, [r5, #40]	; 0x28
    785c:	9a06      	ldr	r2, [sp, #24]
    785e:	62aa      	str	r2, [r5, #40]	; 0x28
    7860:	2005      	movs	r0, #5
    7862:	47b0      	blx	r6
    7864:	2608      	movs	r6, #8
	I2C_SENDDATA(0x02, forloop);
    7866:	2580      	movs	r5, #128	; 0x80
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7868:	f8df 917c 	ldr.w	r9, [pc, #380]	; 79e8 <I2C_getTEMPandMOISTURE+0xa88>
    786c:	9a02      	ldr	r2, [sp, #8]
    786e:	eb09 12c2 	add.w	r2, r9, r2, lsl #7
    7872:	9209      	str	r2, [sp, #36]	; 0x24
    7874:	4f5d      	ldr	r7, [pc, #372]	; (79ec <I2C_getTEMPandMOISTURE+0xa8c>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7876:	9b03      	ldr	r3, [sp, #12]
    7878:	ea4f 1ac3 	mov.w	sl, r3, lsl #7
    787c:	f015 0f02 	tst.w	r5, #2
    7880:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7882:	bf14      	ite	ne
    7884:	f8c3 b018 	strne.w	fp, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7888:	f8c3 b014 	streq.w	fp, [r3, #20]
    788c:	2005      	movs	r0, #5
    788e:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7890:	eb09 080a 	add.w	r8, r9, sl
    7894:	f8c8 4018 	str.w	r4, [r8, #24]
    7898:	2005      	movs	r0, #5
    789a:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    789c:	f8c8 4014 	str.w	r4, [r8, #20]
    78a0:	2005      	movs	r0, #5
    78a2:	47b8      	blx	r7
    78a4:	086d      	lsrs	r5, r5, #1
    78a6:	3e01      	subs	r6, #1
    78a8:	d1e8      	bne.n	787c <I2C_getTEMPandMOISTURE+0x91c>
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    78aa:	9b01      	ldr	r3, [sp, #4]
    78ac:	f8c3 b004 	str.w	fp, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    78b0:	4e4d      	ldr	r6, [pc, #308]	; (79e8 <I2C_getTEMPandMOISTURE+0xa88>)
    78b2:	9a04      	ldr	r2, [sp, #16]
    78b4:	eb06 15c2 	add.w	r5, r6, r2, lsl #7
    78b8:	9a07      	ldr	r2, [sp, #28]
    78ba:	62aa      	str	r2, [r5, #40]	; 0x28
    78bc:	9a08      	ldr	r2, [sp, #32]
    78be:	62aa      	str	r2, [r5, #40]	; 0x28
	I2C_WAITACKOP(-4);
    78c0:	2005      	movs	r0, #5
    78c2:	4f4a      	ldr	r7, [pc, #296]	; (79ec <I2C_getTEMPandMOISTURE+0xa8c>)
    78c4:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    78c6:	9a03      	ldr	r2, [sp, #12]
    78c8:	eb06 16c2 	add.w	r6, r6, r2, lsl #7
    78cc:	61b4      	str	r4, [r6, #24]
    78ce:	2005      	movs	r0, #5
    78d0:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    78d2:	a815      	add	r0, sp, #84	; 0x54
    78d4:	4b46      	ldr	r3, [pc, #280]	; (79f0 <I2C_getTEMPandMOISTURE+0xa90>)
    78d6:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    78d8:	9b01      	ldr	r3, [sp, #4]
    78da:	681a      	ldr	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    78dc:	6a2b      	ldr	r3, [r5, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    78de:	692d      	ldr	r5, [r5, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    78e0:	405d      	eors	r5, r3
    78e2:	4015      	ands	r5, r2
    78e4:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    78e6:	a815      	add	r0, sp, #84	; 0x54
    78e8:	4b42      	ldr	r3, [pc, #264]	; (79f4 <I2C_getTEMPandMOISTURE+0xa94>)
    78ea:	4798      	blx	r3
    78ec:	ea1b 0f05 	tst.w	fp, r5
    78f0:	f040 80b1 	bne.w	7a56 <I2C_getTEMPandMOISTURE+0xaf6>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    78f4:	4d3c      	ldr	r5, [pc, #240]	; (79e8 <I2C_getTEMPandMOISTURE+0xa88>)
    78f6:	9b03      	ldr	r3, [sp, #12]
    78f8:	eb05 17c3 	add.w	r7, r5, r3, lsl #7
    78fc:	617c      	str	r4, [r7, #20]
    78fe:	2005      	movs	r0, #5
    7900:	4e3a      	ldr	r6, [pc, #232]	; (79ec <I2C_getTEMPandMOISTURE+0xa8c>)
    7902:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    7904:	9a04      	ldr	r2, [sp, #16]
    7906:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    790a:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    790e:	9a05      	ldr	r2, [sp, #20]
    7910:	62aa      	str	r2, [r5, #40]	; 0x28
    7912:	9906      	ldr	r1, [sp, #24]
    7914:	62a9      	str	r1, [r5, #40]	; 0x28
    7916:	2005      	movs	r0, #5
    7918:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    791a:	61bc      	str	r4, [r7, #24]
    791c:	f8c5 b018 	str.w	fp, [r5, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    7920:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7924:	9a05      	ldr	r2, [sp, #20]
    7926:	62aa      	str	r2, [r5, #40]	; 0x28
    7928:	9906      	ldr	r1, [sp, #24]
    792a:	62a9      	str	r1, [r5, #40]	; 0x28
	
	/* Then restart comms and send address 0x40 */
	I2C_START(-5);
    792c:	2005      	movs	r0, #5
    792e:	47b0      	blx	r6
    7930:	2005      	movs	r0, #5
    7932:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7934:	f8c5 b014 	str.w	fp, [r5, #20]
    7938:	2005      	movs	r0, #5
    793a:	47b0      	blx	r6
    793c:	617c      	str	r4, [r7, #20]
    793e:	2005      	movs	r0, #5
    7940:	47b0      	blx	r6
    7942:	2707      	movs	r7, #7
	I2C_SENDADDR(0x40, forloop);
    7944:	2640      	movs	r6, #64	; 0x40
    7946:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 79e8 <I2C_getTEMPandMOISTURE+0xa88>
    794a:	9a02      	ldr	r2, [sp, #8]
    794c:	eb09 12c2 	add.w	r2, r9, r2, lsl #7
    7950:	9209      	str	r2, [sp, #36]	; 0x24
    7952:	4d26      	ldr	r5, [pc, #152]	; (79ec <I2C_getTEMPandMOISTURE+0xa8c>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7954:	9b03      	ldr	r3, [sp, #12]
    7956:	fa03 fa07 	lsl.w	sl, r3, r7
    795a:	f016 0f40 	tst.w	r6, #64	; 0x40
    795e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7960:	bf14      	ite	ne
    7962:	f8c3 b018 	strne.w	fp, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7966:	f8c3 b014 	streq.w	fp, [r3, #20]
    796a:	2005      	movs	r0, #5
    796c:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    796e:	eb09 080a 	add.w	r8, r9, sl
    7972:	f8c8 4018 	str.w	r4, [r8, #24]
    7976:	2005      	movs	r0, #5
    7978:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    797a:	f8c8 4014 	str.w	r4, [r8, #20]
    797e:	2005      	movs	r0, #5
    7980:	47a8      	blx	r5
    7982:	0876      	lsrs	r6, r6, #1
    7984:	3f01      	subs	r7, #1
    7986:	d1e8      	bne.n	795a <I2C_getTEMPandMOISTURE+0x9fa>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7988:	4d17      	ldr	r5, [pc, #92]	; (79e8 <I2C_getTEMPandMOISTURE+0xa88>)
    798a:	9b04      	ldr	r3, [sp, #16]
    798c:	eb05 16c3 	add.w	r6, r5, r3, lsl #7
    7990:	f8c6 b018 	str.w	fp, [r6, #24]
	I2C_READ();
    7994:	2005      	movs	r0, #5
    7996:	4f15      	ldr	r7, [pc, #84]	; (79ec <I2C_getTEMPandMOISTURE+0xa8c>)
    7998:	47b8      	blx	r7
    799a:	9b03      	ldr	r3, [sp, #12]
    799c:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    79a0:	61ac      	str	r4, [r5, #24]
    79a2:	2005      	movs	r0, #5
    79a4:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    79a6:	616c      	str	r4, [r5, #20]
    79a8:	2005      	movs	r0, #5
    79aa:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    79ac:	9b01      	ldr	r3, [sp, #4]
    79ae:	f8c3 b004 	str.w	fp, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    79b2:	9a07      	ldr	r2, [sp, #28]
    79b4:	62b2      	str	r2, [r6, #40]	; 0x28
    79b6:	9a08      	ldr	r2, [sp, #32]
    79b8:	62b2      	str	r2, [r6, #40]	; 0x28
	I2C_WAITACKIP(-6);
    79ba:	2005      	movs	r0, #5
    79bc:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    79be:	61ac      	str	r4, [r5, #24]
    79c0:	2005      	movs	r0, #5
    79c2:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    79c4:	a816      	add	r0, sp, #88	; 0x58
    79c6:	4b0a      	ldr	r3, [pc, #40]	; (79f0 <I2C_getTEMPandMOISTURE+0xa90>)
    79c8:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    79ca:	9b01      	ldr	r3, [sp, #4]
    79cc:	681a      	ldr	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    79ce:	6a33      	ldr	r3, [r6, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    79d0:	6935      	ldr	r5, [r6, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    79d2:	405d      	eors	r5, r3
    79d4:	4015      	ands	r5, r2
    79d6:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    79d8:	a816      	add	r0, sp, #88	; 0x58
    79da:	4b06      	ldr	r3, [pc, #24]	; (79f4 <I2C_getTEMPandMOISTURE+0xa94>)
    79dc:	4798      	blx	r3
    79de:	ea1b 0f05 	tst.w	fp, r5
    79e2:	d151      	bne.n	7a88 <I2C_getTEMPandMOISTURE+0xb28>
    79e4:	e008      	b.n	79f8 <I2C_getTEMPandMOISTURE+0xa98>
    79e6:	bf00      	nop
    79e8:	41008000 	.word	0x41008000
    79ec:	000015a9 	.word	0x000015a9
    79f0:	00001549 	.word	0x00001549
    79f4:	00001557 	.word	0x00001557
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    79f8:	9d03      	ldr	r5, [sp, #12]
    79fa:	01eb      	lsls	r3, r5, #7
    79fc:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    7a00:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    7a04:	615c      	str	r4, [r3, #20]
    7a06:	2005      	movs	r0, #5
    7a08:	4b3e      	ldr	r3, [pc, #248]	; (7b04 <I2C_getTEMPandMOISTURE+0xba4>)
    7a0a:	4798      	blx	r3

	*hl = 0;
    7a0c:	2300      	movs	r3, #0
    7a0e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
    7a10:	7013      	strb	r3, [r2, #0]
    7a12:	2608      	movs	r6, #8
	
	/* Beginning of the for-loops that captures data and read the lower 8-bits of the humidity */
	for (forloop = 0x80; forloop > 0;) {
    7a14:	2780      	movs	r7, #128	; 0x80
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7a16:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 7b08 <I2C_getTEMPandMOISTURE+0xba8>
    7a1a:	eb0a 19c5 	add.w	r9, sl, r5, lsl #7
		I2C_clockhi();
    7a1e:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 7b04 <I2C_getTEMPandMOISTURE+0xba4>
    7a22:	e051      	b.n	7ac8 <I2C_getTEMPandMOISTURE+0xb68>
    7a24:	4d38      	ldr	r5, [pc, #224]	; (7b08 <I2C_getTEMPandMOISTURE+0xba8>)
    7a26:	9b03      	ldr	r3, [sp, #12]
    7a28:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    7a2c:	619c      	str	r4, [r3, #24]
	I2C_WAITACKOP(-3);
    7a2e:	2005      	movs	r0, #5
    7a30:	47b8      	blx	r7
    7a32:	9b04      	ldr	r3, [sp, #16]
    7a34:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    7a38:	f8c5 b018 	str.w	fp, [r5, #24]
    7a3c:	2005      	movs	r0, #5
    7a3e:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    7a40:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7a44:	9b05      	ldr	r3, [sp, #20]
    7a46:	62ab      	str	r3, [r5, #40]	; 0x28
    7a48:	9b06      	ldr	r3, [sp, #24]
    7a4a:	62ab      	str	r3, [r5, #40]	; 0x28
    7a4c:	2005      	movs	r0, #5
    7a4e:	47b8      	blx	r7
    7a50:	f06f 0002 	mvn.w	r0, #2
    7a54:	e255      	b.n	7f02 <I2C_getTEMPandMOISTURE+0xfa2>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7a56:	4d2c      	ldr	r5, [pc, #176]	; (7b08 <I2C_getTEMPandMOISTURE+0xba8>)
    7a58:	9b03      	ldr	r3, [sp, #12]
    7a5a:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    7a5e:	619c      	str	r4, [r3, #24]
	I2C_WAITACKOP(-4);
    7a60:	2005      	movs	r0, #5
    7a62:	47b8      	blx	r7
    7a64:	9b04      	ldr	r3, [sp, #16]
    7a66:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    7a6a:	f8c5 b018 	str.w	fp, [r5, #24]
    7a6e:	2005      	movs	r0, #5
    7a70:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    7a72:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7a76:	9b05      	ldr	r3, [sp, #20]
    7a78:	62ab      	str	r3, [r5, #40]	; 0x28
    7a7a:	9b06      	ldr	r3, [sp, #24]
    7a7c:	62ab      	str	r3, [r5, #40]	; 0x28
    7a7e:	2005      	movs	r0, #5
    7a80:	47b8      	blx	r7
    7a82:	f06f 0003 	mvn.w	r0, #3
    7a86:	e23c      	b.n	7f02 <I2C_getTEMPandMOISTURE+0xfa2>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7a88:	4d1f      	ldr	r5, [pc, #124]	; (7b08 <I2C_getTEMPandMOISTURE+0xba8>)
    7a8a:	9b03      	ldr	r3, [sp, #12]
    7a8c:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    7a90:	619c      	str	r4, [r3, #24]
	I2C_WAITACKIP(-6);
    7a92:	2005      	movs	r0, #5
    7a94:	47b8      	blx	r7
    7a96:	9b04      	ldr	r3, [sp, #16]
    7a98:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    7a9c:	f8c5 b018 	str.w	fp, [r5, #24]
    7aa0:	2005      	movs	r0, #5
    7aa2:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    7aa4:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7aa8:	9b05      	ldr	r3, [sp, #20]
    7aaa:	62ab      	str	r3, [r5, #40]	; 0x28
    7aac:	9b06      	ldr	r3, [sp, #24]
    7aae:	62ab      	str	r3, [r5, #40]	; 0x28
    7ab0:	2005      	movs	r0, #5
    7ab2:	47b8      	blx	r7
    7ab4:	f06f 0005 	mvn.w	r0, #5
    7ab8:	e223      	b.n	7f02 <I2C_getTEMPandMOISTURE+0xfa2>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7aba:	f8c9 4014 	str.w	r4, [r9, #20]
		if (gpio_get_pin_level(i2csda)) {
			(*hl) |= forloop;
		}

		I2C_clocklo();
    7abe:	2005      	movs	r0, #5
    7ac0:	47c0      	blx	r8
		forloop = forloop / 2;
    7ac2:	087f      	lsrs	r7, r7, #1
	for (forloop = 0x80; forloop > 0;) {
    7ac4:	3e01      	subs	r6, #1
    7ac6:	d025      	beq.n	7b14 <I2C_getTEMPandMOISTURE+0xbb4>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7ac8:	f8c9 4018 	str.w	r4, [r9, #24]
		I2C_clockhi();
    7acc:	2005      	movs	r0, #5
    7ace:	47c0      	blx	r8
	CRITICAL_SECTION_ENTER();
    7ad0:	a817      	add	r0, sp, #92	; 0x5c
    7ad2:	4b0e      	ldr	r3, [pc, #56]	; (7b0c <I2C_getTEMPandMOISTURE+0xbac>)
    7ad4:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    7ad6:	9b01      	ldr	r3, [sp, #4]
    7ad8:	6819      	ldr	r1, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    7ada:	9b02      	ldr	r3, [sp, #8]
    7adc:	eb0a 12c3 	add.w	r2, sl, r3, lsl #7
    7ae0:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    7ae2:	6915      	ldr	r5, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    7ae4:	405d      	eors	r5, r3
    7ae6:	400d      	ands	r5, r1
    7ae8:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    7aea:	a817      	add	r0, sp, #92	; 0x5c
    7aec:	4b08      	ldr	r3, [pc, #32]	; (7b10 <I2C_getTEMPandMOISTURE+0xbb0>)
    7aee:	4798      	blx	r3
		if (gpio_get_pin_level(i2csda)) {
    7af0:	ea1b 0f05 	tst.w	fp, r5
    7af4:	d0e1      	beq.n	7aba <I2C_getTEMPandMOISTURE+0xb5a>
			(*hl) |= forloop;
    7af6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    7af8:	781b      	ldrb	r3, [r3, #0]
    7afa:	433b      	orrs	r3, r7
    7afc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
    7afe:	7013      	strb	r3, [r2, #0]
    7b00:	e7db      	b.n	7aba <I2C_getTEMPandMOISTURE+0xb5a>
    7b02:	bf00      	nop
    7b04:	000015a9 	.word	0x000015a9
    7b08:	41008000 	.word	0x41008000
    7b0c:	00001549 	.word	0x00001549
    7b10:	00001557 	.word	0x00001557
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7b14:	4da8      	ldr	r5, [pc, #672]	; (7db8 <I2C_getTEMPandMOISTURE+0xe58>)
    7b16:	9b03      	ldr	r3, [sp, #12]
    7b18:	eb05 17c3 	add.w	r7, r5, r3, lsl #7
    7b1c:	61bc      	str	r4, [r7, #24]
	}

	I2C_STOP();
    7b1e:	2005      	movs	r0, #5
    7b20:	4ea6      	ldr	r6, [pc, #664]	; (7dbc <I2C_getTEMPandMOISTURE+0xe5c>)
    7b22:	47b0      	blx	r6
    7b24:	9a04      	ldr	r2, [sp, #16]
    7b26:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    7b2a:	f8c5 b018 	str.w	fp, [r5, #24]
    7b2e:	2005      	movs	r0, #5
    7b30:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    7b32:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7b36:	9a05      	ldr	r2, [sp, #20]
    7b38:	62aa      	str	r2, [r5, #40]	; 0x28
    7b3a:	9906      	ldr	r1, [sp, #24]
    7b3c:	62a9      	str	r1, [r5, #40]	; 0x28
    7b3e:	2005      	movs	r0, #5
    7b40:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7b42:	61bc      	str	r4, [r7, #24]
    7b44:	f8c5 b018 	str.w	fp, [r5, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    7b48:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7b4c:	9a05      	ldr	r2, [sp, #20]
    7b4e:	62aa      	str	r2, [r5, #40]	; 0x28
    7b50:	9906      	ldr	r1, [sp, #24]
    7b52:	62a9      	str	r1, [r5, #40]	; 0x28
	I2C_CLOSE();
	/* If successful, and code execution got here, the close the I2C channel */
	
	/* Open an I2C channel, send address 0x40, index register 0x03 */
	I2C_OPEN(sda, clk);
	I2C_START(-2);
    7b54:	2005      	movs	r0, #5
    7b56:	47b0      	blx	r6
    7b58:	2005      	movs	r0, #5
    7b5a:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7b5c:	f8c5 b014 	str.w	fp, [r5, #20]
    7b60:	2005      	movs	r0, #5
    7b62:	47b0      	blx	r6
    7b64:	617c      	str	r4, [r7, #20]
    7b66:	2005      	movs	r0, #5
    7b68:	47b0      	blx	r6
    7b6a:	2607      	movs	r6, #7
	I2C_SENDADDR(0x40, forloop);
    7b6c:	2540      	movs	r5, #64	; 0x40
    7b6e:	f8df 9248 	ldr.w	r9, [pc, #584]	; 7db8 <I2C_getTEMPandMOISTURE+0xe58>
    7b72:	9a02      	ldr	r2, [sp, #8]
    7b74:	eb09 12c2 	add.w	r2, r9, r2, lsl #7
    7b78:	9209      	str	r2, [sp, #36]	; 0x24
    7b7a:	4f90      	ldr	r7, [pc, #576]	; (7dbc <I2C_getTEMPandMOISTURE+0xe5c>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7b7c:	9b03      	ldr	r3, [sp, #12]
    7b7e:	fa03 fa06 	lsl.w	sl, r3, r6
    7b82:	f015 0f40 	tst.w	r5, #64	; 0x40
    7b86:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7b88:	bf14      	ite	ne
    7b8a:	f8c3 b018 	strne.w	fp, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7b8e:	f8c3 b014 	streq.w	fp, [r3, #20]
    7b92:	2005      	movs	r0, #5
    7b94:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7b96:	eb09 080a 	add.w	r8, r9, sl
    7b9a:	f8c8 4018 	str.w	r4, [r8, #24]
    7b9e:	2005      	movs	r0, #5
    7ba0:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7ba2:	f8c8 4014 	str.w	r4, [r8, #20]
    7ba6:	2005      	movs	r0, #5
    7ba8:	47b8      	blx	r7
    7baa:	086d      	lsrs	r5, r5, #1
    7bac:	3e01      	subs	r6, #1
    7bae:	d1e8      	bne.n	7b82 <I2C_getTEMPandMOISTURE+0xc22>
    7bb0:	4d81      	ldr	r5, [pc, #516]	; (7db8 <I2C_getTEMPandMOISTURE+0xe58>)
    7bb2:	9b04      	ldr	r3, [sp, #16]
    7bb4:	eb05 16c3 	add.w	r6, r5, r3, lsl #7
    7bb8:	f8c6 b014 	str.w	fp, [r6, #20]
	I2C_WRITE();
    7bbc:	2005      	movs	r0, #5
    7bbe:	4f7f      	ldr	r7, [pc, #508]	; (7dbc <I2C_getTEMPandMOISTURE+0xe5c>)
    7bc0:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7bc2:	9b03      	ldr	r3, [sp, #12]
    7bc4:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    7bc8:	61ac      	str	r4, [r5, #24]
    7bca:	2005      	movs	r0, #5
    7bcc:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7bce:	616c      	str	r4, [r5, #20]
    7bd0:	2005      	movs	r0, #5
    7bd2:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    7bd4:	9b01      	ldr	r3, [sp, #4]
    7bd6:	f8c3 b004 	str.w	fp, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7bda:	9a07      	ldr	r2, [sp, #28]
    7bdc:	62b2      	str	r2, [r6, #40]	; 0x28
    7bde:	9a08      	ldr	r2, [sp, #32]
    7be0:	62b2      	str	r2, [r6, #40]	; 0x28
	I2C_WAITACKOP(-3);
    7be2:	2005      	movs	r0, #5
    7be4:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7be6:	61ac      	str	r4, [r5, #24]
    7be8:	2005      	movs	r0, #5
    7bea:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    7bec:	a818      	add	r0, sp, #96	; 0x60
    7bee:	4b74      	ldr	r3, [pc, #464]	; (7dc0 <I2C_getTEMPandMOISTURE+0xe60>)
    7bf0:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    7bf2:	9b01      	ldr	r3, [sp, #4]
    7bf4:	681a      	ldr	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    7bf6:	6a33      	ldr	r3, [r6, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    7bf8:	6935      	ldr	r5, [r6, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    7bfa:	405d      	eors	r5, r3
    7bfc:	4015      	ands	r5, r2
    7bfe:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    7c00:	a818      	add	r0, sp, #96	; 0x60
    7c02:	4b70      	ldr	r3, [pc, #448]	; (7dc4 <I2C_getTEMPandMOISTURE+0xe64>)
    7c04:	4798      	blx	r3
    7c06:	ea1b 0f05 	tst.w	fp, r5
    7c0a:	f040 80f3 	bne.w	7df4 <I2C_getTEMPandMOISTURE+0xe94>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7c0e:	4d6a      	ldr	r5, [pc, #424]	; (7db8 <I2C_getTEMPandMOISTURE+0xe58>)
    7c10:	9b03      	ldr	r3, [sp, #12]
    7c12:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    7c16:	615c      	str	r4, [r3, #20]
    7c18:	2005      	movs	r0, #5
    7c1a:	4e68      	ldr	r6, [pc, #416]	; (7dbc <I2C_getTEMPandMOISTURE+0xe5c>)
    7c1c:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    7c1e:	9a04      	ldr	r2, [sp, #16]
    7c20:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    7c24:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7c28:	9a05      	ldr	r2, [sp, #20]
    7c2a:	62aa      	str	r2, [r5, #40]	; 0x28
    7c2c:	9a06      	ldr	r2, [sp, #24]
    7c2e:	62aa      	str	r2, [r5, #40]	; 0x28
    7c30:	2005      	movs	r0, #5
    7c32:	47b0      	blx	r6
    7c34:	2608      	movs	r6, #8
	I2C_SENDDATA(0x03, forloop);
    7c36:	2580      	movs	r5, #128	; 0x80
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7c38:	f8df 917c 	ldr.w	r9, [pc, #380]	; 7db8 <I2C_getTEMPandMOISTURE+0xe58>
    7c3c:	9a02      	ldr	r2, [sp, #8]
    7c3e:	eb09 12c2 	add.w	r2, r9, r2, lsl #7
    7c42:	9209      	str	r2, [sp, #36]	; 0x24
    7c44:	4f5d      	ldr	r7, [pc, #372]	; (7dbc <I2C_getTEMPandMOISTURE+0xe5c>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7c46:	9b03      	ldr	r3, [sp, #12]
    7c48:	ea4f 1ac3 	mov.w	sl, r3, lsl #7
    7c4c:	f015 0f03 	tst.w	r5, #3
    7c50:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7c52:	bf14      	ite	ne
    7c54:	f8c3 b018 	strne.w	fp, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7c58:	f8c3 b014 	streq.w	fp, [r3, #20]
    7c5c:	2005      	movs	r0, #5
    7c5e:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7c60:	eb09 080a 	add.w	r8, r9, sl
    7c64:	f8c8 4018 	str.w	r4, [r8, #24]
    7c68:	2005      	movs	r0, #5
    7c6a:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7c6c:	f8c8 4014 	str.w	r4, [r8, #20]
    7c70:	2005      	movs	r0, #5
    7c72:	47b8      	blx	r7
    7c74:	086d      	lsrs	r5, r5, #1
    7c76:	3e01      	subs	r6, #1
    7c78:	d1e8      	bne.n	7c4c <I2C_getTEMPandMOISTURE+0xcec>
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    7c7a:	9b01      	ldr	r3, [sp, #4]
    7c7c:	f8c3 b004 	str.w	fp, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7c80:	4e4d      	ldr	r6, [pc, #308]	; (7db8 <I2C_getTEMPandMOISTURE+0xe58>)
    7c82:	9a04      	ldr	r2, [sp, #16]
    7c84:	eb06 15c2 	add.w	r5, r6, r2, lsl #7
    7c88:	9a07      	ldr	r2, [sp, #28]
    7c8a:	62aa      	str	r2, [r5, #40]	; 0x28
    7c8c:	9a08      	ldr	r2, [sp, #32]
    7c8e:	62aa      	str	r2, [r5, #40]	; 0x28
	I2C_WAITACKOP(-4);
    7c90:	2005      	movs	r0, #5
    7c92:	4f4a      	ldr	r7, [pc, #296]	; (7dbc <I2C_getTEMPandMOISTURE+0xe5c>)
    7c94:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7c96:	9a03      	ldr	r2, [sp, #12]
    7c98:	eb06 16c2 	add.w	r6, r6, r2, lsl #7
    7c9c:	61b4      	str	r4, [r6, #24]
    7c9e:	2005      	movs	r0, #5
    7ca0:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    7ca2:	a819      	add	r0, sp, #100	; 0x64
    7ca4:	4b46      	ldr	r3, [pc, #280]	; (7dc0 <I2C_getTEMPandMOISTURE+0xe60>)
    7ca6:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    7ca8:	9b01      	ldr	r3, [sp, #4]
    7caa:	681a      	ldr	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    7cac:	6a2b      	ldr	r3, [r5, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    7cae:	692d      	ldr	r5, [r5, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    7cb0:	405d      	eors	r5, r3
    7cb2:	4015      	ands	r5, r2
    7cb4:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    7cb6:	a819      	add	r0, sp, #100	; 0x64
    7cb8:	4b42      	ldr	r3, [pc, #264]	; (7dc4 <I2C_getTEMPandMOISTURE+0xe64>)
    7cba:	4798      	blx	r3
    7cbc:	ea1b 0f05 	tst.w	fp, r5
    7cc0:	f040 80b1 	bne.w	7e26 <I2C_getTEMPandMOISTURE+0xec6>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7cc4:	4d3c      	ldr	r5, [pc, #240]	; (7db8 <I2C_getTEMPandMOISTURE+0xe58>)
    7cc6:	9b03      	ldr	r3, [sp, #12]
    7cc8:	eb05 17c3 	add.w	r7, r5, r3, lsl #7
    7ccc:	617c      	str	r4, [r7, #20]
    7cce:	2005      	movs	r0, #5
    7cd0:	4e3a      	ldr	r6, [pc, #232]	; (7dbc <I2C_getTEMPandMOISTURE+0xe5c>)
    7cd2:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    7cd4:	9a04      	ldr	r2, [sp, #16]
    7cd6:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    7cda:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7cde:	9a05      	ldr	r2, [sp, #20]
    7ce0:	62aa      	str	r2, [r5, #40]	; 0x28
    7ce2:	9906      	ldr	r1, [sp, #24]
    7ce4:	62a9      	str	r1, [r5, #40]	; 0x28
    7ce6:	2005      	movs	r0, #5
    7ce8:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7cea:	61bc      	str	r4, [r7, #24]
    7cec:	f8c5 b018 	str.w	fp, [r5, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    7cf0:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7cf4:	9a05      	ldr	r2, [sp, #20]
    7cf6:	62aa      	str	r2, [r5, #40]	; 0x28
    7cf8:	9906      	ldr	r1, [sp, #24]
    7cfa:	62a9      	str	r1, [r5, #40]	; 0x28
	
	/* Then restart comms and send address 0x40 */
	I2C_START(-5);
    7cfc:	2005      	movs	r0, #5
    7cfe:	47b0      	blx	r6
    7d00:	2005      	movs	r0, #5
    7d02:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7d04:	f8c5 b014 	str.w	fp, [r5, #20]
    7d08:	2005      	movs	r0, #5
    7d0a:	47b0      	blx	r6
    7d0c:	617c      	str	r4, [r7, #20]
    7d0e:	2005      	movs	r0, #5
    7d10:	47b0      	blx	r6
    7d12:	2607      	movs	r6, #7
	I2C_SENDADDR(0x40, forloop);
    7d14:	2540      	movs	r5, #64	; 0x40
    7d16:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 7db8 <I2C_getTEMPandMOISTURE+0xe58>
    7d1a:	9a02      	ldr	r2, [sp, #8]
    7d1c:	eb09 12c2 	add.w	r2, r9, r2, lsl #7
    7d20:	9209      	str	r2, [sp, #36]	; 0x24
    7d22:	4f26      	ldr	r7, [pc, #152]	; (7dbc <I2C_getTEMPandMOISTURE+0xe5c>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7d24:	9b03      	ldr	r3, [sp, #12]
    7d26:	fa03 fa06 	lsl.w	sl, r3, r6
    7d2a:	f015 0f40 	tst.w	r5, #64	; 0x40
    7d2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7d30:	bf14      	ite	ne
    7d32:	f8c3 b018 	strne.w	fp, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7d36:	f8c3 b014 	streq.w	fp, [r3, #20]
    7d3a:	2005      	movs	r0, #5
    7d3c:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7d3e:	eb09 080a 	add.w	r8, r9, sl
    7d42:	f8c8 4018 	str.w	r4, [r8, #24]
    7d46:	2005      	movs	r0, #5
    7d48:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7d4a:	f8c8 4014 	str.w	r4, [r8, #20]
    7d4e:	2005      	movs	r0, #5
    7d50:	47b8      	blx	r7
    7d52:	086d      	lsrs	r5, r5, #1
    7d54:	3e01      	subs	r6, #1
    7d56:	d1e8      	bne.n	7d2a <I2C_getTEMPandMOISTURE+0xdca>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7d58:	4d17      	ldr	r5, [pc, #92]	; (7db8 <I2C_getTEMPandMOISTURE+0xe58>)
    7d5a:	9b04      	ldr	r3, [sp, #16]
    7d5c:	eb05 16c3 	add.w	r6, r5, r3, lsl #7
    7d60:	f8c6 b018 	str.w	fp, [r6, #24]
	I2C_READ();
    7d64:	2005      	movs	r0, #5
    7d66:	4f15      	ldr	r7, [pc, #84]	; (7dbc <I2C_getTEMPandMOISTURE+0xe5c>)
    7d68:	47b8      	blx	r7
    7d6a:	9b03      	ldr	r3, [sp, #12]
    7d6c:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    7d70:	61ac      	str	r4, [r5, #24]
    7d72:	2005      	movs	r0, #5
    7d74:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7d76:	616c      	str	r4, [r5, #20]
    7d78:	2005      	movs	r0, #5
    7d7a:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    7d7c:	9b01      	ldr	r3, [sp, #4]
    7d7e:	f8c3 b004 	str.w	fp, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7d82:	9a07      	ldr	r2, [sp, #28]
    7d84:	62b2      	str	r2, [r6, #40]	; 0x28
    7d86:	9a08      	ldr	r2, [sp, #32]
    7d88:	62b2      	str	r2, [r6, #40]	; 0x28
	I2C_WAITACKIP(-6);
    7d8a:	2005      	movs	r0, #5
    7d8c:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7d8e:	61ac      	str	r4, [r5, #24]
    7d90:	2005      	movs	r0, #5
    7d92:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    7d94:	a81a      	add	r0, sp, #104	; 0x68
    7d96:	4b0a      	ldr	r3, [pc, #40]	; (7dc0 <I2C_getTEMPandMOISTURE+0xe60>)
    7d98:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    7d9a:	9b01      	ldr	r3, [sp, #4]
    7d9c:	681a      	ldr	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    7d9e:	6a33      	ldr	r3, [r6, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    7da0:	6935      	ldr	r5, [r6, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    7da2:	405d      	eors	r5, r3
    7da4:	4015      	ands	r5, r2
    7da6:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    7da8:	a81a      	add	r0, sp, #104	; 0x68
    7daa:	4b06      	ldr	r3, [pc, #24]	; (7dc4 <I2C_getTEMPandMOISTURE+0xe64>)
    7dac:	4798      	blx	r3
    7dae:	ea1b 0f05 	tst.w	fp, r5
    7db2:	d151      	bne.n	7e58 <I2C_getTEMPandMOISTURE+0xef8>
    7db4:	e008      	b.n	7dc8 <I2C_getTEMPandMOISTURE+0xe68>
    7db6:	bf00      	nop
    7db8:	41008000 	.word	0x41008000
    7dbc:	000015a9 	.word	0x000015a9
    7dc0:	00001549 	.word	0x00001549
    7dc4:	00001557 	.word	0x00001557
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7dc8:	9d03      	ldr	r5, [sp, #12]
    7dca:	01eb      	lsls	r3, r5, #7
    7dcc:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    7dd0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    7dd4:	615c      	str	r4, [r3, #20]
    7dd6:	2005      	movs	r0, #5
    7dd8:	4b51      	ldr	r3, [pc, #324]	; (7f20 <I2C_getTEMPandMOISTURE+0xfc0>)
    7dda:	4798      	blx	r3

	*hh = 0;
    7ddc:	2300      	movs	r3, #0
    7dde:	9a26      	ldr	r2, [sp, #152]	; 0x98
    7de0:	7013      	strb	r3, [r2, #0]
    7de2:	2608      	movs	r6, #8
	
	/* Beginning of the for-loops that captures data and read the upper 8-bits of the humidity */
	for (forloop = 0x80; forloop > 0;) {
    7de4:	2780      	movs	r7, #128	; 0x80
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7de6:	f8df a13c 	ldr.w	sl, [pc, #316]	; 7f24 <I2C_getTEMPandMOISTURE+0xfc4>
    7dea:	eb0a 19c5 	add.w	r9, sl, r5, lsl #7
		I2C_clockhi();
    7dee:	f8df 8130 	ldr.w	r8, [pc, #304]	; 7f20 <I2C_getTEMPandMOISTURE+0xfc0>
    7df2:	e051      	b.n	7e98 <I2C_getTEMPandMOISTURE+0xf38>
    7df4:	4d4b      	ldr	r5, [pc, #300]	; (7f24 <I2C_getTEMPandMOISTURE+0xfc4>)
    7df6:	9b03      	ldr	r3, [sp, #12]
    7df8:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    7dfc:	619c      	str	r4, [r3, #24]
	I2C_WAITACKOP(-3);
    7dfe:	2005      	movs	r0, #5
    7e00:	47b8      	blx	r7
    7e02:	9b04      	ldr	r3, [sp, #16]
    7e04:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    7e08:	f8c5 b018 	str.w	fp, [r5, #24]
    7e0c:	2005      	movs	r0, #5
    7e0e:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    7e10:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7e14:	9b05      	ldr	r3, [sp, #20]
    7e16:	62ab      	str	r3, [r5, #40]	; 0x28
    7e18:	9b06      	ldr	r3, [sp, #24]
    7e1a:	62ab      	str	r3, [r5, #40]	; 0x28
    7e1c:	2005      	movs	r0, #5
    7e1e:	47b8      	blx	r7
    7e20:	f06f 0002 	mvn.w	r0, #2
    7e24:	e06d      	b.n	7f02 <I2C_getTEMPandMOISTURE+0xfa2>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7e26:	4d3f      	ldr	r5, [pc, #252]	; (7f24 <I2C_getTEMPandMOISTURE+0xfc4>)
    7e28:	9b03      	ldr	r3, [sp, #12]
    7e2a:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    7e2e:	619c      	str	r4, [r3, #24]
	I2C_WAITACKOP(-4);
    7e30:	2005      	movs	r0, #5
    7e32:	47b8      	blx	r7
    7e34:	9b04      	ldr	r3, [sp, #16]
    7e36:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    7e3a:	f8c5 b018 	str.w	fp, [r5, #24]
    7e3e:	2005      	movs	r0, #5
    7e40:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    7e42:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7e46:	9b05      	ldr	r3, [sp, #20]
    7e48:	62ab      	str	r3, [r5, #40]	; 0x28
    7e4a:	9b06      	ldr	r3, [sp, #24]
    7e4c:	62ab      	str	r3, [r5, #40]	; 0x28
    7e4e:	2005      	movs	r0, #5
    7e50:	47b8      	blx	r7
    7e52:	f06f 0003 	mvn.w	r0, #3
    7e56:	e054      	b.n	7f02 <I2C_getTEMPandMOISTURE+0xfa2>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7e58:	4d32      	ldr	r5, [pc, #200]	; (7f24 <I2C_getTEMPandMOISTURE+0xfc4>)
    7e5a:	9b03      	ldr	r3, [sp, #12]
    7e5c:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    7e60:	619c      	str	r4, [r3, #24]
	I2C_WAITACKIP(-6);
    7e62:	2005      	movs	r0, #5
    7e64:	47b8      	blx	r7
    7e66:	9b04      	ldr	r3, [sp, #16]
    7e68:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    7e6c:	f8c5 b018 	str.w	fp, [r5, #24]
    7e70:	2005      	movs	r0, #5
    7e72:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    7e74:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7e78:	9b05      	ldr	r3, [sp, #20]
    7e7a:	62ab      	str	r3, [r5, #40]	; 0x28
    7e7c:	9b06      	ldr	r3, [sp, #24]
    7e7e:	62ab      	str	r3, [r5, #40]	; 0x28
    7e80:	2005      	movs	r0, #5
    7e82:	47b8      	blx	r7
    7e84:	f06f 0005 	mvn.w	r0, #5
    7e88:	e03b      	b.n	7f02 <I2C_getTEMPandMOISTURE+0xfa2>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7e8a:	f8c9 4014 	str.w	r4, [r9, #20]
		if (gpio_get_pin_level(i2csda)) {
			(*hh) |= forloop;
		}

		I2C_clocklo();
    7e8e:	2005      	movs	r0, #5
    7e90:	47c0      	blx	r8
		forloop = forloop / 2;
    7e92:	087f      	lsrs	r7, r7, #1
	for (forloop = 0x80; forloop > 0;) {
    7e94:	3e01      	subs	r6, #1
    7e96:	d01c      	beq.n	7ed2 <I2C_getTEMPandMOISTURE+0xf72>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7e98:	f8c9 4018 	str.w	r4, [r9, #24]
		I2C_clockhi();
    7e9c:	2005      	movs	r0, #5
    7e9e:	47c0      	blx	r8
	CRITICAL_SECTION_ENTER();
    7ea0:	a81b      	add	r0, sp, #108	; 0x6c
    7ea2:	4b21      	ldr	r3, [pc, #132]	; (7f28 <I2C_getTEMPandMOISTURE+0xfc8>)
    7ea4:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    7ea6:	9b01      	ldr	r3, [sp, #4]
    7ea8:	6819      	ldr	r1, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    7eaa:	9b02      	ldr	r3, [sp, #8]
    7eac:	eb0a 12c3 	add.w	r2, sl, r3, lsl #7
    7eb0:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    7eb2:	6915      	ldr	r5, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    7eb4:	405d      	eors	r5, r3
    7eb6:	400d      	ands	r5, r1
    7eb8:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    7eba:	a81b      	add	r0, sp, #108	; 0x6c
    7ebc:	4b1b      	ldr	r3, [pc, #108]	; (7f2c <I2C_getTEMPandMOISTURE+0xfcc>)
    7ebe:	4798      	blx	r3
		if (gpio_get_pin_level(i2csda)) {
    7ec0:	ea1b 0f05 	tst.w	fp, r5
    7ec4:	d0e1      	beq.n	7e8a <I2C_getTEMPandMOISTURE+0xf2a>
			(*hh) |= forloop;
    7ec6:	9b26      	ldr	r3, [sp, #152]	; 0x98
    7ec8:	781b      	ldrb	r3, [r3, #0]
    7eca:	433b      	orrs	r3, r7
    7ecc:	9a26      	ldr	r2, [sp, #152]	; 0x98
    7ece:	7013      	strb	r3, [r2, #0]
    7ed0:	e7db      	b.n	7e8a <I2C_getTEMPandMOISTURE+0xf2a>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7ed2:	4d14      	ldr	r5, [pc, #80]	; (7f24 <I2C_getTEMPandMOISTURE+0xfc4>)
    7ed4:	9b03      	ldr	r3, [sp, #12]
    7ed6:	eb05 11c3 	add.w	r1, r5, r3, lsl #7
    7eda:	618c      	str	r4, [r1, #24]
	}

	I2C_STOP();
    7edc:	2005      	movs	r0, #5
    7ede:	4e10      	ldr	r6, [pc, #64]	; (7f20 <I2C_getTEMPandMOISTURE+0xfc0>)
    7ee0:	47b0      	blx	r6
    7ee2:	9b04      	ldr	r3, [sp, #16]
    7ee4:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    7ee8:	f8c5 b018 	str.w	fp, [r5, #24]
    7eec:	2005      	movs	r0, #5
    7eee:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    7ef0:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7ef4:	9b05      	ldr	r3, [sp, #20]
    7ef6:	62ab      	str	r3, [r5, #40]	; 0x28
    7ef8:	9b06      	ldr	r3, [sp, #24]
    7efa:	62ab      	str	r3, [r5, #40]	; 0x28
    7efc:	2005      	movs	r0, #5
    7efe:	47b0      	blx	r6
	I2C_CLOSE();
	/* If successful, and code execution got here, the close the I2C channel */
	
	return 0;
    7f00:	2000      	movs	r0, #0
}
    7f02:	b01d      	add	sp, #116	; 0x74
    7f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -1;
    7f08:	f04f 30ff 	mov.w	r0, #4294967295
    7f0c:	4770      	bx	lr
    7f0e:	f04f 30ff 	mov.w	r0, #4294967295
    7f12:	e7f6      	b.n	7f02 <I2C_getTEMPandMOISTURE+0xfa2>
    7f14:	f04f 30ff 	mov.w	r0, #4294967295
    7f18:	e7f3      	b.n	7f02 <I2C_getTEMPandMOISTURE+0xfa2>
    7f1a:	f04f 30ff 	mov.w	r0, #4294967295
    7f1e:	e7f0      	b.n	7f02 <I2C_getTEMPandMOISTURE+0xfa2>
    7f20:	000015a9 	.word	0x000015a9
    7f24:	41008000 	.word	0x41008000
    7f28:	00001549 	.word	0x00001549
    7f2c:	00001557 	.word	0x00001557

00007f30 <I2C_check_deviceID>:
// * CALLED BY:			  main()                                                                                                       *
// * CALLS:		          No function. ALL macros defined in this function file.                                                       *
// * --------------------------------------------------------------------------------------------------------------------------------- *
int I2C_check_deviceID(uint8_t sda,  uint8_t clk, unsigned char deviceID)

{
    7f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7f34:	b08b      	sub	sp, #44	; 0x2c
    7f36:	9200      	str	r2, [sp, #0]
    7f38:	f001 041f 	and.w	r4, r1, #31
    7f3c:	f04f 0801 	mov.w	r8, #1
    7f40:	fa08 f404 	lsl.w	r4, r8, r4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7f44:	094b      	lsrs	r3, r1, #5
    7f46:	4d64      	ldr	r5, [pc, #400]	; (80d8 <I2C_check_deviceID+0x1a8>)
    7f48:	9302      	str	r3, [sp, #8]
    7f4a:	eb05 17c3 	add.w	r7, r5, r3, lsl #7
    7f4e:	61bc      	str	r4, [r7, #24]
    7f50:	0941      	lsrs	r1, r0, #5
    7f52:	9103      	str	r1, [sp, #12]
    7f54:	f000 001f 	and.w	r0, r0, #31
    7f58:	fa08 f800 	lsl.w	r8, r8, r0
    7f5c:	468a      	mov	sl, r1
    7f5e:	eb05 15c1 	add.w	r5, r5, r1, lsl #7
    7f62:	f8c5 8018 	str.w	r8, [r5, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    7f66:	f8c5 8008 	str.w	r8, [r5, #8]
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    7f6a:	fa1f f188 	uxth.w	r1, r8
    7f6e:	9106      	str	r1, [sp, #24]
    7f70:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    7f74:	9104      	str	r1, [sp, #16]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7f76:	62a9      	str	r1, [r5, #40]	; 0x28
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    7f78:	ea4f 4118 	mov.w	r1, r8, lsr #16
    7f7c:	9107      	str	r1, [sp, #28]
		hri_port_write_WRCONFIG_reg(
    7f7e:	f041 4140 	orr.w	r1, r1, #3221225472	; 0xc0000000
    7f82:	9105      	str	r1, [sp, #20]
    7f84:	62a9      	str	r1, [r5, #40]	; 0x28
	uint8_t     		i2csda, i2cclk;
    unsigned char		forloop;

    /* Open an I2C channel, send address held in parameter variable "deviceID" */
	I2C_OPEN(sda, clk);
	I2C_START(-1);
    7f86:	2005      	movs	r0, #5
    7f88:	4e54      	ldr	r6, [pc, #336]	; (80dc <I2C_check_deviceID+0x1ac>)
    7f8a:	47b0      	blx	r6
    7f8c:	2005      	movs	r0, #5
    7f8e:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7f90:	f8c5 8014 	str.w	r8, [r5, #20]
    7f94:	2005      	movs	r0, #5
    7f96:	47b0      	blx	r6
    7f98:	617c      	str	r4, [r7, #20]
    7f9a:	2005      	movs	r0, #5
    7f9c:	47b0      	blx	r6
    7f9e:	2607      	movs	r6, #7
	I2C_SENDADDR(deviceID, forloop);
    7fa0:	2540      	movs	r5, #64	; 0x40
    7fa2:	f8df b134 	ldr.w	fp, [pc, #308]	; 80d8 <I2C_check_deviceID+0x1a8>
    7fa6:	eb0b 1aca 	add.w	sl, fp, sl, lsl #7
    7faa:	4f4c      	ldr	r7, [pc, #304]	; (80dc <I2C_check_deviceID+0x1ac>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7fac:	9a02      	ldr	r2, [sp, #8]
    7fae:	fa02 f306 	lsl.w	r3, r2, r6
    7fb2:	9301      	str	r3, [sp, #4]
    7fb4:	46a1      	mov	r9, r4
    7fb6:	9b00      	ldr	r3, [sp, #0]
    7fb8:	422b      	tst	r3, r5
    7fba:	bf14      	ite	ne
    7fbc:	f8ca 8018 	strne.w	r8, [sl, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7fc0:	f8ca 8014 	streq.w	r8, [sl, #20]
    7fc4:	2005      	movs	r0, #5
    7fc6:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7fc8:	9b01      	ldr	r3, [sp, #4]
    7fca:	eb0b 0403 	add.w	r4, fp, r3
    7fce:	f8c4 9018 	str.w	r9, [r4, #24]
    7fd2:	2005      	movs	r0, #5
    7fd4:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7fd6:	f8c4 9014 	str.w	r9, [r4, #20]
    7fda:	2005      	movs	r0, #5
    7fdc:	47b8      	blx	r7
    7fde:	086d      	lsrs	r5, r5, #1
    7fe0:	3e01      	subs	r6, #1
    7fe2:	d1e8      	bne.n	7fb6 <I2C_check_deviceID+0x86>
    7fe4:	464c      	mov	r4, r9
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7fe6:	4e3c      	ldr	r6, [pc, #240]	; (80d8 <I2C_check_deviceID+0x1a8>)
    7fe8:	9d03      	ldr	r5, [sp, #12]
    7fea:	eb06 17c5 	add.w	r7, r6, r5, lsl #7
    7fee:	f8c7 8018 	str.w	r8, [r7, #24]
	I2C_READ();
    7ff2:	2005      	movs	r0, #5
    7ff4:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 80dc <I2C_check_deviceID+0x1ac>
    7ff8:	47c8      	blx	r9
    7ffa:	9b02      	ldr	r3, [sp, #8]
    7ffc:	eb06 16c3 	add.w	r6, r6, r3, lsl #7
    8000:	61b4      	str	r4, [r6, #24]
    8002:	2005      	movs	r0, #5
    8004:	47c8      	blx	r9
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    8006:	6174      	str	r4, [r6, #20]
    8008:	2005      	movs	r0, #5
    800a:	47c8      	blx	r9
    800c:	01ed      	lsls	r5, r5, #7
    800e:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    8012:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    8016:	f8c5 8004 	str.w	r8, [r5, #4]
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    801a:	9b06      	ldr	r3, [sp, #24]
    801c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    8020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    8024:	62bb      	str	r3, [r7, #40]	; 0x28
		hri_port_write_WRCONFIG_reg(PORT,
    8026:	9b07      	ldr	r3, [sp, #28]
    8028:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    802c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    8030:	62bb      	str	r3, [r7, #40]	; 0x28
	I2C_WAITACKOP(-2);
    8032:	2005      	movs	r0, #5
    8034:	47c8      	blx	r9
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    8036:	61b4      	str	r4, [r6, #24]
    8038:	2005      	movs	r0, #5
    803a:	47c8      	blx	r9
	CRITICAL_SECTION_ENTER();
    803c:	a809      	add	r0, sp, #36	; 0x24
    803e:	4b28      	ldr	r3, [pc, #160]	; (80e0 <I2C_check_deviceID+0x1b0>)
    8040:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    8042:	682a      	ldr	r2, [r5, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    8044:	6a3b      	ldr	r3, [r7, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    8046:	693d      	ldr	r5, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    8048:	405d      	eors	r5, r3
    804a:	4015      	ands	r5, r2
    804c:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    804e:	a809      	add	r0, sp, #36	; 0x24
    8050:	4b24      	ldr	r3, [pc, #144]	; (80e4 <I2C_check_deviceID+0x1b4>)
    8052:	4798      	blx	r3
    8054:	ea18 0f05 	tst.w	r8, r5
    8058:	d125      	bne.n	80a6 <I2C_check_deviceID+0x176>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    805a:	4d1f      	ldr	r5, [pc, #124]	; (80d8 <I2C_check_deviceID+0x1a8>)
    805c:	9b02      	ldr	r3, [sp, #8]
    805e:	eb05 17c3 	add.w	r7, r5, r3, lsl #7
    8062:	617c      	str	r4, [r7, #20]
    8064:	2005      	movs	r0, #5
    8066:	4e1d      	ldr	r6, [pc, #116]	; (80dc <I2C_check_deviceID+0x1ac>)
    8068:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    806a:	9b03      	ldr	r3, [sp, #12]
    806c:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    8070:	f8c5 8008 	str.w	r8, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    8074:	9b04      	ldr	r3, [sp, #16]
    8076:	62ab      	str	r3, [r5, #40]	; 0x28
    8078:	9a05      	ldr	r2, [sp, #20]
    807a:	62aa      	str	r2, [r5, #40]	; 0x28
    807c:	2005      	movs	r0, #5
    807e:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    8080:	61bc      	str	r4, [r7, #24]
	/* If not successful, then function will return with < 0 value if adddress not found */
	
	I2C_STOP();
    8082:	2005      	movs	r0, #5
    8084:	47b0      	blx	r6
    8086:	f8c5 8018 	str.w	r8, [r5, #24]
    808a:	2005      	movs	r0, #5
    808c:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    808e:	f8c5 8008 	str.w	r8, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    8092:	9b04      	ldr	r3, [sp, #16]
    8094:	62ab      	str	r3, [r5, #40]	; 0x28
    8096:	9a05      	ldr	r2, [sp, #20]
    8098:	62aa      	str	r2, [r5, #40]	; 0x28
    809a:	2005      	movs	r0, #5
    809c:	47b0      	blx	r6
	I2C_CLOSE();
	
	/* If successful, and code execution got here, the close the I2C channel and return with ZERO value if address found */
	return 0;
    809e:	2000      	movs	r0, #0
    80a0:	b00b      	add	sp, #44	; 0x2c
    80a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    80a6:	4d0c      	ldr	r5, [pc, #48]	; (80d8 <I2C_check_deviceID+0x1a8>)
    80a8:	9b02      	ldr	r3, [sp, #8]
    80aa:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    80ae:	619c      	str	r4, [r3, #24]
	I2C_WAITACKOP(-2);
    80b0:	2005      	movs	r0, #5
    80b2:	47c8      	blx	r9
    80b4:	9b03      	ldr	r3, [sp, #12]
    80b6:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    80ba:	f8c5 8018 	str.w	r8, [r5, #24]
    80be:	2005      	movs	r0, #5
    80c0:	47c8      	blx	r9
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    80c2:	f8c5 8008 	str.w	r8, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    80c6:	9b04      	ldr	r3, [sp, #16]
    80c8:	62ab      	str	r3, [r5, #40]	; 0x28
    80ca:	9b05      	ldr	r3, [sp, #20]
    80cc:	62ab      	str	r3, [r5, #40]	; 0x28
    80ce:	2005      	movs	r0, #5
    80d0:	47c8      	blx	r9
    80d2:	f06f 0001 	mvn.w	r0, #1
    80d6:	e7e3      	b.n	80a0 <I2C_check_deviceID+0x170>
    80d8:	41008000 	.word	0x41008000
    80dc:	000015a9 	.word	0x000015a9
    80e0:	00001549 	.word	0x00001549
    80e4:	00001557 	.word	0x00001557

000080e8 <timer_setup>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: initializes and starts the main 10 times per second global timer
// Returns:     Nothing
// *****************************************************************************************************************************************************************
void timer_setup(void)
{
    80e8:	b510      	push	{r4, lr}
	/* Setup and start the main 1/10th of a second timer expiration callback routine */
	TIMER_0_task1.interval = 100;
    80ea:	4907      	ldr	r1, [pc, #28]	; (8108 <timer_setup+0x20>)
    80ec:	2364      	movs	r3, #100	; 0x64
    80ee:	608b      	str	r3, [r1, #8]
	TIMER_0_task1.cb       = TIMER_0_task1_cb;
    80f0:	4b06      	ldr	r3, [pc, #24]	; (810c <timer_setup+0x24>)
    80f2:	60cb      	str	r3, [r1, #12]
	TIMER_0_task1.mode     = TIMER_TASK_REPEAT;
    80f4:	2301      	movs	r3, #1
    80f6:	740b      	strb	r3, [r1, #16]

	/* Start the repeatable timer feature */
	timer_add_task(&TIMER_0, &TIMER_0_task1);
    80f8:	4c05      	ldr	r4, [pc, #20]	; (8110 <timer_setup+0x28>)
    80fa:	4620      	mov	r0, r4
    80fc:	4b05      	ldr	r3, [pc, #20]	; (8114 <timer_setup+0x2c>)
    80fe:	4798      	blx	r3
	timer_start(&TIMER_0);
    8100:	4620      	mov	r0, r4
    8102:	4b05      	ldr	r3, [pc, #20]	; (8118 <timer_setup+0x30>)
    8104:	4798      	blx	r3
    8106:	bd10      	pop	{r4, pc}
    8108:	2000827c 	.word	0x2000827c
    810c:	00009339 	.word	0x00009339
    8110:	20007548 	.word	0x20007548
    8114:	00001db5 	.word	0x00001db5
    8118:	00001d79 	.word	0x00001d79

0000811c <ADC_init>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: initializes and starts the two internal ADC features for reading the water detection mechanism
// Returns:     Nothing
// *****************************************************************************************************************************************************************
void ADC_init(void)
{
    811c:	b508      	push	{r3, lr}
	/* Setup the two internal water detection analogue inputs BOTH on "ADC_0" channels and also the HIGH-VOLTAGE ADC [0|1|2]*/
	adc_sync_enable_channel(&ADC_0, 0);
    811e:	2100      	movs	r1, #0
    8120:	4801      	ldr	r0, [pc, #4]	; (8128 <ADC_init+0xc>)
    8122:	4b02      	ldr	r3, [pc, #8]	; (812c <ADC_init+0x10>)
    8124:	4798      	blx	r3
    8126:	bd08      	pop	{r3, pc}
    8128:	20007470 	.word	0x20007470
    812c:	000013f1 	.word	0x000013f1

00008130 <comms_init>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: setup the SPI and the USB
// Returns:     Nothing
// *****************************************************************************************************************************************************************
void comms_init(void)
{
    8130:	b510      	push	{r4, lr}
	/* Global initialization of main USB mechanism */
	if (usb_d_enable() < 0) {
    8132:	4b18      	ldr	r3, [pc, #96]	; (8194 <comms_init+0x64>)
    8134:	4798      	blx	r3
    8136:	2800      	cmp	r0, #0
    8138:	db27      	blt.n	818a <comms_init+0x5a>
		xprintf("USB init/enable ERROR!!!!!!!\r\n");
	} else {
		usb_init();
    813a:	4b17      	ldr	r3, [pc, #92]	; (8198 <comms_init+0x68>)
    813c:	4798      	blx	r3
		xprintf("usb_init()\r\n");
    813e:	4817      	ldr	r0, [pc, #92]	; (819c <comms_init+0x6c>)
    8140:	4c17      	ldr	r4, [pc, #92]	; (81a0 <comms_init+0x70>)
    8142:	47a0      	blx	r4
		
		cdc_device_acm_init();
    8144:	4b17      	ldr	r3, [pc, #92]	; (81a4 <comms_init+0x74>)
    8146:	4798      	blx	r3
		xprintf("cdc_device_acm_init()\r\n");
    8148:	4817      	ldr	r0, [pc, #92]	; (81a8 <comms_init+0x78>)
    814a:	47a0      	blx	r4
		
		/* Register the read callback function */
		cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)usb_device_cb_state_c);
    814c:	4917      	ldr	r1, [pc, #92]	; (81ac <comms_init+0x7c>)
    814e:	2003      	movs	r0, #3
    8150:	4b17      	ldr	r3, [pc, #92]	; (81b0 <comms_init+0x80>)
    8152:	4798      	blx	r3
		xprintf("cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)usb_device_cb_state_c)\r\n");
    8154:	4817      	ldr	r0, [pc, #92]	; (81b4 <comms_init+0x84>)
    8156:	47a0      	blx	r4
	}

	/* Setup the main SPI bus, 100 kHz, negative-edge triggered, 8-bit, MSB first */
	spi_m_sync_set_baudrate(&SPI_0, 800000);
    8158:	4c17      	ldr	r4, [pc, #92]	; (81b8 <comms_init+0x88>)
    815a:	4918      	ldr	r1, [pc, #96]	; (81bc <comms_init+0x8c>)
    815c:	4620      	mov	r0, r4
    815e:	4b18      	ldr	r3, [pc, #96]	; (81c0 <comms_init+0x90>)
    8160:	4798      	blx	r3
	spi_m_sync_set_mode(&SPI_0, SPI_MODE_3);
    8162:	2103      	movs	r1, #3
    8164:	4620      	mov	r0, r4
    8166:	4b17      	ldr	r3, [pc, #92]	; (81c4 <comms_init+0x94>)
    8168:	4798      	blx	r3
	spi_m_sync_set_char_size(&SPI_0, SPI_CHAR_SIZE_8);
    816a:	2100      	movs	r1, #0
    816c:	4620      	mov	r0, r4
    816e:	4b16      	ldr	r3, [pc, #88]	; (81c8 <comms_init+0x98>)
    8170:	4798      	blx	r3
	spi_m_sync_set_data_order(&SPI_0, SPI_DATA_ORDER_MSB_1ST);
    8172:	2100      	movs	r1, #0
    8174:	4620      	mov	r0, r4
    8176:	4b15      	ldr	r3, [pc, #84]	; (81cc <comms_init+0x9c>)
    8178:	4798      	blx	r3
	spi_m_sync_get_io_descriptor(&SPI_0, &spio);
    817a:	4915      	ldr	r1, [pc, #84]	; (81d0 <comms_init+0xa0>)
    817c:	4620      	mov	r0, r4
    817e:	4b15      	ldr	r3, [pc, #84]	; (81d4 <comms_init+0xa4>)
    8180:	4798      	blx	r3
	
	/* Start the SPI bus running */
	spi_m_sync_enable(&SPI_0);
    8182:	4620      	mov	r0, r4
    8184:	4b14      	ldr	r3, [pc, #80]	; (81d8 <comms_init+0xa8>)
    8186:	4798      	blx	r3
    8188:	bd10      	pop	{r4, pc}
		xprintf("USB init/enable ERROR!!!!!!!\r\n");
    818a:	4814      	ldr	r0, [pc, #80]	; (81dc <comms_init+0xac>)
    818c:	4b04      	ldr	r3, [pc, #16]	; (81a0 <comms_init+0x70>)
    818e:	4798      	blx	r3
    8190:	e7e2      	b.n	8158 <comms_init+0x28>
    8192:	bf00      	nop
    8194:	00002455 	.word	0x00002455
    8198:	0000daf1 	.word	0x0000daf1
    819c:	0000f264 	.word	0x0000f264
    81a0:	0000031d 	.word	0x0000031d
    81a4:	0000dac1 	.word	0x0000dac1
    81a8:	0000f274 	.word	0x0000f274
    81ac:	0000da51 	.word	0x0000da51
    81b0:	0000d1f9 	.word	0x0000d1f9
    81b4:	0000f28c 	.word	0x0000f28c
    81b8:	20007478 	.word	0x20007478
    81bc:	000c3500 	.word	0x000c3500
    81c0:	00001ad1 	.word	0x00001ad1
    81c4:	00001afd 	.word	0x00001afd
    81c8:	00001b29 	.word	0x00001b29
    81cc:	00001b55 	.word	0x00001b55
    81d0:	20008290 	.word	0x20008290
    81d4:	00001c39 	.word	0x00001c39
    81d8:	00001aa9 	.word	0x00001aa9
    81dc:	0000f244 	.word	0x0000f244

000081e0 <crypto_init>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: initialize the AES encryption-engine in the CPU core
// Returns:     Nothing
// *****************************************************************************************************************************************************************
void crypto_init(void)
{
    81e0:	b510      	push	{r4, lr}
	/* Initialize and start the crypt hardware block. Insert and program the private AES key for this device-node also */
	aes_sync_enable(&CRYPTOGRAPHY_0);
    81e2:	4c05      	ldr	r4, [pc, #20]	; (81f8 <crypto_init+0x18>)
    81e4:	4620      	mov	r0, r4
    81e6:	4b05      	ldr	r3, [pc, #20]	; (81fc <crypto_init+0x1c>)
    81e8:	4798      	blx	r3
	aes_sync_set_encrypt_key(&CRYPTOGRAPHY_0, aes_key, AES_KEY_128);
    81ea:	2200      	movs	r2, #0
    81ec:	4904      	ldr	r1, [pc, #16]	; (8200 <crypto_init+0x20>)
    81ee:	4620      	mov	r0, r4
    81f0:	4b04      	ldr	r3, [pc, #16]	; (8204 <crypto_init+0x24>)
    81f2:	4798      	blx	r3
    81f4:	bd10      	pop	{r4, pc}
    81f6:	bf00      	nop
    81f8:	20007428 	.word	0x20007428
    81fc:	000014ed 	.word	0x000014ed
    8200:	20000004 	.word	0x20000004
    8204:	00001515 	.word	0x00001515

00008208 <switch_init>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: reset and start the Ethernet SWITCH IC
// Returns:     Nothing
// *****************************************************************************************************************************************************************
void switch_init(void)
{
    8208:	b570      	push	{r4, r5, r6, lr}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    820a:	4d07      	ldr	r5, [pc, #28]	; (8228 <switch_init+0x20>)
    820c:	2401      	movs	r4, #1
    820e:	f8c5 4098 	str.w	r4, [r5, #152]	; 0x98
	/* Go through the reset sequence of the GPIO for the Micrel Ethernet SWITCH */
	gpio_set_pin_level(PB00_KSZ_RESET, 1);
	delay_ms(1);
    8212:	4620      	mov	r0, r4
    8214:	4e05      	ldr	r6, [pc, #20]	; (822c <switch_init+0x24>)
    8216:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    8218:	f8c5 4094 	str.w	r4, [r5, #148]	; 0x94
	gpio_set_pin_level(PB00_KSZ_RESET, 0);
	delay_ms(1);
    821c:	4620      	mov	r0, r4
    821e:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    8220:	f8c5 4098 	str.w	r4, [r5, #152]	; 0x98
    8224:	bd70      	pop	{r4, r5, r6, pc}
    8226:	bf00      	nop
    8228:	41008000 	.word	0x41008000
    822c:	000015c9 	.word	0x000015c9

00008230 <switch_configure>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: check all default register settings in the Ethernet SWITCH and also change relevant settings to suit the MultiSense operation
// Returns:     Nothing
// *****************************************************************************************************************************************************************
void switch_configure(void)
{
    8230:	b508      	push	{r3, lr}
	xprintf("Configuring and checking the SPI KSZ8794 Ethernet SWITCH registers...\r\n");
    8232:	48ad      	ldr	r0, [pc, #692]	; (84e8 <switch_configure+0x2b8>)
    8234:	4bad      	ldr	r3, [pc, #692]	; (84ec <switch_configure+0x2bc>)
    8236:	4798      	blx	r3
	/* Write set-up commands to the KSZ Ethernet SWITCH via SPI bus */
	if (!checkKSZreg(SPI_KSZ8794_FAMILY_ID, 0x87))		{ xprintf("[SPI_KSZ8794_FAMILY_ID] not correct\r\n"); }
    8238:	2187      	movs	r1, #135	; 0x87
    823a:	2000      	movs	r0, #0
    823c:	4bac      	ldr	r3, [pc, #688]	; (84f0 <switch_configure+0x2c0>)
    823e:	4798      	blx	r3
    8240:	2800      	cmp	r0, #0
    8242:	f000 8274 	beq.w	872e <switch_configure+0x4fe>
		
	/* Stop the Ethernet SWITCH operation */
	writeKSZreg(SPI_KSZ8794_START, 0x00);
    8246:	2100      	movs	r1, #0
    8248:	2001      	movs	r0, #1
    824a:	4baa      	ldr	r3, [pc, #680]	; (84f4 <switch_configure+0x2c4>)
    824c:	4798      	blx	r3
	delay_us(50);
    824e:	2032      	movs	r0, #50	; 0x32
    8250:	4ba9      	ldr	r3, [pc, #676]	; (84f8 <switch_configure+0x2c8>)
    8252:	4798      	blx	r3
	
	if (!checkKSZreg(SPI_KSZ8794_START, 0x60))			{ xprintf("[SPI_KSZ8794_START first] not correct\r\n"); }
    8254:	2160      	movs	r1, #96	; 0x60
    8256:	2001      	movs	r0, #1
    8258:	4ba5      	ldr	r3, [pc, #660]	; (84f0 <switch_configure+0x2c0>)
    825a:	4798      	blx	r3
    825c:	2800      	cmp	r0, #0
    825e:	f000 826a 	beq.w	8736 <switch_configure+0x506>
	
	writeKSZreg(SPI_KSZ8794_GLOBAL0, 0x0D);
    8262:	210d      	movs	r1, #13
    8264:	2002      	movs	r0, #2
    8266:	4ba3      	ldr	r3, [pc, #652]	; (84f4 <switch_configure+0x2c4>)
    8268:	4798      	blx	r3
	delay_us(50);
    826a:	2032      	movs	r0, #50	; 0x32
    826c:	4ba2      	ldr	r3, [pc, #648]	; (84f8 <switch_configure+0x2c8>)
    826e:	4798      	blx	r3
	
	if (!checkKSZreg(SPI_KSZ8794_GLOBAL0, 0x0D))		{ xprintf("[SPI_KSZ8794_GLOBAL0] not correct\r\n"); }
    8270:	210d      	movs	r1, #13
    8272:	2002      	movs	r0, #2
    8274:	4b9e      	ldr	r3, [pc, #632]	; (84f0 <switch_configure+0x2c0>)
    8276:	4798      	blx	r3
    8278:	2800      	cmp	r0, #0
    827a:	f000 8260 	beq.w	873e <switch_configure+0x50e>
	
	writeKSZreg(SPI_KSZ8794_GLOBAL1, 0x0C);
    827e:	210c      	movs	r1, #12
    8280:	2003      	movs	r0, #3
    8282:	4b9c      	ldr	r3, [pc, #624]	; (84f4 <switch_configure+0x2c4>)
    8284:	4798      	blx	r3
	delay_us(50);
    8286:	2032      	movs	r0, #50	; 0x32
    8288:	4b9b      	ldr	r3, [pc, #620]	; (84f8 <switch_configure+0x2c8>)
    828a:	4798      	blx	r3
	
	if (!checkKSZreg(SPI_KSZ8794_GLOBAL1, 0x0C))		{ xprintf("[SPI_KSZ8794_GLOBAL1] not correct\r\n"); }
    828c:	210c      	movs	r1, #12
    828e:	2003      	movs	r0, #3
    8290:	4b97      	ldr	r3, [pc, #604]	; (84f0 <switch_configure+0x2c0>)
    8292:	4798      	blx	r3
    8294:	2800      	cmp	r0, #0
    8296:	f000 8256 	beq.w	8746 <switch_configure+0x516>
	
	writeKSZreg(SPI_KSZ8794_GLOBAL2, 0xB2);
    829a:	21b2      	movs	r1, #178	; 0xb2
    829c:	2004      	movs	r0, #4
    829e:	4b95      	ldr	r3, [pc, #596]	; (84f4 <switch_configure+0x2c4>)
    82a0:	4798      	blx	r3
	delay_us(50);
    82a2:	2032      	movs	r0, #50	; 0x32
    82a4:	4b94      	ldr	r3, [pc, #592]	; (84f8 <switch_configure+0x2c8>)
    82a6:	4798      	blx	r3
	
	if (!checkKSZreg(SPI_KSZ8794_GLOBAL2, 0xB2))		{ xprintf("[SPI_KSZ8794_GLOBAL2] not correct\r\n"); }
    82a8:	21b2      	movs	r1, #178	; 0xb2
    82aa:	2004      	movs	r0, #4
    82ac:	4b90      	ldr	r3, [pc, #576]	; (84f0 <switch_configure+0x2c0>)
    82ae:	4798      	blx	r3
    82b0:	2800      	cmp	r0, #0
    82b2:	f000 824c 	beq.w	874e <switch_configure+0x51e>
	if (!checkKSZreg(SPI_KSZ8794_GLOBAL3, 0x00))		{ xprintf("[SPI_KSZ8794_GLOBAL3] not correct\r\n"); }
    82b6:	2100      	movs	r1, #0
    82b8:	2005      	movs	r0, #5
    82ba:	4b8d      	ldr	r3, [pc, #564]	; (84f0 <switch_configure+0x2c0>)
    82bc:	4798      	blx	r3
    82be:	2800      	cmp	r0, #0
    82c0:	f000 8249 	beq.w	8756 <switch_configure+0x526>
	if (!checkKSZreg(SPI_KSZ8794_GLOBAL4, 0x00))		{ xprintf("[SPI_KSZ8794_GLOBAL4] not correct\r\n"); }
    82c4:	2100      	movs	r1, #0
    82c6:	2006      	movs	r0, #6
    82c8:	4b89      	ldr	r3, [pc, #548]	; (84f0 <switch_configure+0x2c0>)
    82ca:	4798      	blx	r3
    82cc:	2800      	cmp	r0, #0
    82ce:	f000 8246 	beq.w	875e <switch_configure+0x52e>
	if (!checkKSZreg(SPI_KSZ8794_GLOBAL5, 0x4A))		{ xprintf("[SPI_KSZ8794_GLOBAL5] not correct\r\n"); }
    82d2:	214a      	movs	r1, #74	; 0x4a
    82d4:	2007      	movs	r0, #7
    82d6:	4b86      	ldr	r3, [pc, #536]	; (84f0 <switch_configure+0x2c0>)
    82d8:	4798      	blx	r3
    82da:	2800      	cmp	r0, #0
    82dc:	f000 8243 	beq.w	8766 <switch_configure+0x536>
	if (!checkKSZreg(SPI_KSZ8794_GLOBAL6, 0x00))		{ xprintf("[SPI_KSZ8794_GLOBAL6] not correct\r\n"); }
    82e0:	2100      	movs	r1, #0
    82e2:	2008      	movs	r0, #8
    82e4:	4b82      	ldr	r3, [pc, #520]	; (84f0 <switch_configure+0x2c0>)
    82e6:	4798      	blx	r3
    82e8:	2800      	cmp	r0, #0
    82ea:	f000 8240 	beq.w	876e <switch_configure+0x53e>
	if (!checkKSZreg(SPI_KSZ8794_GLOBAL9, 0x00))		{ xprintf("[SPI_KSZ8794_GLOBAL9] not correct\r\n"); }
    82ee:	2100      	movs	r1, #0
    82f0:	200b      	movs	r0, #11
    82f2:	4b7f      	ldr	r3, [pc, #508]	; (84f0 <switch_configure+0x2c0>)
    82f4:	4798      	blx	r3
    82f6:	2800      	cmp	r0, #0
    82f8:	f000 823d 	beq.w	8776 <switch_configure+0x546>
	if (!checkKSZreg(SPI_KSZ8794_GLOBAL10, 0x44))		{ xprintf("[SPI_KSZ8794_GLOBAL10] not correct\r\n"); }
    82fc:	2144      	movs	r1, #68	; 0x44
    82fe:	200c      	movs	r0, #12
    8300:	4b7b      	ldr	r3, [pc, #492]	; (84f0 <switch_configure+0x2c0>)
    8302:	4798      	blx	r3
    8304:	2800      	cmp	r0, #0
    8306:	f000 823a 	beq.w	877e <switch_configure+0x54e>
	if (!checkKSZreg(SPI_KSZ8794_PDMC1, 0x00))			{ xprintf("[SPI_KSZ8794_PDMC1] not correct\r\n"); }
    830a:	2100      	movs	r1, #0
    830c:	200e      	movs	r0, #14
    830e:	4b78      	ldr	r3, [pc, #480]	; (84f0 <switch_configure+0x2c0>)
    8310:	4798      	blx	r3
    8312:	2800      	cmp	r0, #0
    8314:	f000 8237 	beq.w	8786 <switch_configure+0x556>
	if (!checkKSZreg(SPI_KSZ8794_PDMC2, 0x50))			{ xprintf("[SPI_KSZ8794_PDMC2] not correct\r\n"); }
    8318:	2150      	movs	r1, #80	; 0x50
    831a:	200f      	movs	r0, #15
    831c:	4b74      	ldr	r3, [pc, #464]	; (84f0 <switch_configure+0x2c0>)
    831e:	4798      	blx	r3
    8320:	2800      	cmp	r0, #0
    8322:	f000 8234 	beq.w	878e <switch_configure+0x55e>
	
	writeKSZreg(SPI_KSZ8794_PORT1CONTROL0, 0x80);
    8326:	2180      	movs	r1, #128	; 0x80
    8328:	2010      	movs	r0, #16
    832a:	4b72      	ldr	r3, [pc, #456]	; (84f4 <switch_configure+0x2c4>)
    832c:	4798      	blx	r3
	delay_us(50);
    832e:	2032      	movs	r0, #50	; 0x32
    8330:	4b71      	ldr	r3, [pc, #452]	; (84f8 <switch_configure+0x2c8>)
    8332:	4798      	blx	r3
	
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL0, 0x80))	{ xprintf("[SPI_KSZ8794_PORT1CONTROL0] not correct\r\n"); }
    8334:	2180      	movs	r1, #128	; 0x80
    8336:	2010      	movs	r0, #16
    8338:	4b6d      	ldr	r3, [pc, #436]	; (84f0 <switch_configure+0x2c0>)
    833a:	4798      	blx	r3
    833c:	2800      	cmp	r0, #0
    833e:	f000 824d 	beq.w	87dc <switch_configure+0x5ac>
	
	writeKSZreg(SPI_KSZ8794_PORT2CONTROL0, 0x80);
    8342:	2180      	movs	r1, #128	; 0x80
    8344:	2020      	movs	r0, #32
    8346:	4b6b      	ldr	r3, [pc, #428]	; (84f4 <switch_configure+0x2c4>)
    8348:	4798      	blx	r3
	delay_us(50);
    834a:	2032      	movs	r0, #50	; 0x32
    834c:	4b6a      	ldr	r3, [pc, #424]	; (84f8 <switch_configure+0x2c8>)
    834e:	4798      	blx	r3
	
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL0, 0x80))	{ xprintf("[SPI_KSZ8794_PORT2CONTROL0] not correct\r\n"); }
    8350:	2180      	movs	r1, #128	; 0x80
    8352:	2020      	movs	r0, #32
    8354:	4b66      	ldr	r3, [pc, #408]	; (84f0 <switch_configure+0x2c0>)
    8356:	4798      	blx	r3
    8358:	2800      	cmp	r0, #0
    835a:	f000 8243 	beq.w	87e4 <switch_configure+0x5b4>
	
	writeKSZreg(SPI_KSZ8794_PORT3CONTROL0, 0x80);
    835e:	2180      	movs	r1, #128	; 0x80
    8360:	2030      	movs	r0, #48	; 0x30
    8362:	4b64      	ldr	r3, [pc, #400]	; (84f4 <switch_configure+0x2c4>)
    8364:	4798      	blx	r3
	delay_us(50);
    8366:	2032      	movs	r0, #50	; 0x32
    8368:	4b63      	ldr	r3, [pc, #396]	; (84f8 <switch_configure+0x2c8>)
    836a:	4798      	blx	r3
	
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL0, 0x80))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL0] not correct\r\n"); }
    836c:	2180      	movs	r1, #128	; 0x80
    836e:	2030      	movs	r0, #48	; 0x30
    8370:	4b5f      	ldr	r3, [pc, #380]	; (84f0 <switch_configure+0x2c0>)
    8372:	4798      	blx	r3
    8374:	2800      	cmp	r0, #0
    8376:	f000 8239 	beq.w	87ec <switch_configure+0x5bc>
	
	writeKSZreg(SPI_KSZ8794_PORT4CONTROL0, 0x80);
    837a:	2180      	movs	r1, #128	; 0x80
    837c:	2050      	movs	r0, #80	; 0x50
    837e:	4b5d      	ldr	r3, [pc, #372]	; (84f4 <switch_configure+0x2c4>)
    8380:	4798      	blx	r3
	delay_us(50);
    8382:	2032      	movs	r0, #50	; 0x32
    8384:	4b5c      	ldr	r3, [pc, #368]	; (84f8 <switch_configure+0x2c8>)
    8386:	4798      	blx	r3
	
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL0, 0x80))	{ xprintf("[SPI_KSZ8794_PORT4CONTROL0] not correct\r\n"); }
    8388:	2180      	movs	r1, #128	; 0x80
    838a:	2050      	movs	r0, #80	; 0x50
    838c:	4b58      	ldr	r3, [pc, #352]	; (84f0 <switch_configure+0x2c0>)
    838e:	4798      	blx	r3
    8390:	2800      	cmp	r0, #0
    8392:	f000 822f 	beq.w	87f4 <switch_configure+0x5c4>
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL1, 0x1F))	{ xprintf("[SPI_KSZ8794_PORT1CONTROL1] not correct\r\n"); }
    8396:	211f      	movs	r1, #31
    8398:	2011      	movs	r0, #17
    839a:	4b55      	ldr	r3, [pc, #340]	; (84f0 <switch_configure+0x2c0>)
    839c:	4798      	blx	r3
    839e:	2800      	cmp	r0, #0
    83a0:	f000 822c 	beq.w	87fc <switch_configure+0x5cc>
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL1, 0x1F))	{ xprintf("[SPI_KSZ8794_PORT2CONTROL1] not correct\r\n"); }
    83a4:	211f      	movs	r1, #31
    83a6:	2021      	movs	r0, #33	; 0x21
    83a8:	4b51      	ldr	r3, [pc, #324]	; (84f0 <switch_configure+0x2c0>)
    83aa:	4798      	blx	r3
    83ac:	2800      	cmp	r0, #0
    83ae:	f000 8229 	beq.w	8804 <switch_configure+0x5d4>
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL1, 0x1F))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL1] not correct\r\n"); }
    83b2:	211f      	movs	r1, #31
    83b4:	2031      	movs	r0, #49	; 0x31
    83b6:	4b4e      	ldr	r3, [pc, #312]	; (84f0 <switch_configure+0x2c0>)
    83b8:	4798      	blx	r3
    83ba:	2800      	cmp	r0, #0
    83bc:	f000 8226 	beq.w	880c <switch_configure+0x5dc>
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL1, 0x1F))	{ xprintf("[SPI_KSZ8794_PORT4CONTROL1] not correct\r\n"); }
    83c0:	211f      	movs	r1, #31
    83c2:	2051      	movs	r0, #81	; 0x51
    83c4:	4b4a      	ldr	r3, [pc, #296]	; (84f0 <switch_configure+0x2c0>)
    83c6:	4798      	blx	r3
    83c8:	2800      	cmp	r0, #0
    83ca:	f000 8223 	beq.w	8814 <switch_configure+0x5e4>
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL2, 0x06))	{ xprintf("[SPI_KSZ8794_PORT1CONTROL2] not correct\r\n"); }
    83ce:	2106      	movs	r1, #6
    83d0:	2012      	movs	r0, #18
    83d2:	4b47      	ldr	r3, [pc, #284]	; (84f0 <switch_configure+0x2c0>)
    83d4:	4798      	blx	r3
    83d6:	2800      	cmp	r0, #0
    83d8:	f000 8220 	beq.w	881c <switch_configure+0x5ec>
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL2, 0x06))	{ xprintf("[SPI_KSZ8794_PORT2CONTROL2] not correct\r\n"); }
    83dc:	2106      	movs	r1, #6
    83de:	2022      	movs	r0, #34	; 0x22
    83e0:	4b43      	ldr	r3, [pc, #268]	; (84f0 <switch_configure+0x2c0>)
    83e2:	4798      	blx	r3
    83e4:	2800      	cmp	r0, #0
    83e6:	f000 821d 	beq.w	8824 <switch_configure+0x5f4>
	
	/* For now, turn off the T-junction port 3 to the Power & Ethernet board attachment */
	writeKSZreg(SPI_KSZ8794_PORT3CONTROL2, 0x00);
    83ea:	2100      	movs	r1, #0
    83ec:	2032      	movs	r0, #50	; 0x32
    83ee:	4b41      	ldr	r3, [pc, #260]	; (84f4 <switch_configure+0x2c4>)
    83f0:	4798      	blx	r3
	delay_us(50);
    83f2:	2032      	movs	r0, #50	; 0x32
    83f4:	4b40      	ldr	r3, [pc, #256]	; (84f8 <switch_configure+0x2c8>)
    83f6:	4798      	blx	r3
	
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL2, 0x00))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL2] not correct\r\n"); }
    83f8:	2100      	movs	r1, #0
    83fa:	2032      	movs	r0, #50	; 0x32
    83fc:	4b3c      	ldr	r3, [pc, #240]	; (84f0 <switch_configure+0x2c0>)
    83fe:	4798      	blx	r3
    8400:	2800      	cmp	r0, #0
    8402:	f000 8213 	beq.w	882c <switch_configure+0x5fc>
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL2, 0x06))	{ xprintf("[SPI_KSZ8794_PORT4CONTROL2] not correct\r\n"); }
    8406:	2106      	movs	r1, #6
    8408:	2052      	movs	r0, #82	; 0x52
    840a:	4b39      	ldr	r3, [pc, #228]	; (84f0 <switch_configure+0x2c0>)
    840c:	4798      	blx	r3
    840e:	2800      	cmp	r0, #0
    8410:	f000 8210 	beq.w	8834 <switch_configure+0x604>
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL3, 0x00))	{ xprintf("[SPI_KSZ8794_PORT1CONTROL3] not correct\r\n"); }
    8414:	2100      	movs	r1, #0
    8416:	2013      	movs	r0, #19
    8418:	4b35      	ldr	r3, [pc, #212]	; (84f0 <switch_configure+0x2c0>)
    841a:	4798      	blx	r3
    841c:	2800      	cmp	r0, #0
    841e:	f000 820d 	beq.w	883c <switch_configure+0x60c>
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL3, 0x00))	{ xprintf("[SPI_KSZ8794_PORT2CONTROL3] not correct\r\n"); }
    8422:	2100      	movs	r1, #0
    8424:	2023      	movs	r0, #35	; 0x23
    8426:	4b32      	ldr	r3, [pc, #200]	; (84f0 <switch_configure+0x2c0>)
    8428:	4798      	blx	r3
    842a:	2800      	cmp	r0, #0
    842c:	f000 820a 	beq.w	8844 <switch_configure+0x614>
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL3, 0x00))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL3] not correct\r\n"); }
    8430:	2100      	movs	r1, #0
    8432:	2033      	movs	r0, #51	; 0x33
    8434:	4b2e      	ldr	r3, [pc, #184]	; (84f0 <switch_configure+0x2c0>)
    8436:	4798      	blx	r3
    8438:	2800      	cmp	r0, #0
    843a:	f000 8207 	beq.w	884c <switch_configure+0x61c>
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL3, 0x00))	{ xprintf("[SPI_KSZ8794_PORT4CONTROL3] not correct\r\n"); }
    843e:	2100      	movs	r1, #0
    8440:	2053      	movs	r0, #83	; 0x53
    8442:	4b2b      	ldr	r3, [pc, #172]	; (84f0 <switch_configure+0x2c0>)
    8444:	4798      	blx	r3
    8446:	2800      	cmp	r0, #0
    8448:	f000 8204 	beq.w	8854 <switch_configure+0x624>
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL4, 0x01))	{ xprintf("[SPI_KSZ8794_PORT1CONTROL4] not correct\r\n"); }
    844c:	2101      	movs	r1, #1
    844e:	2014      	movs	r0, #20
    8450:	4b27      	ldr	r3, [pc, #156]	; (84f0 <switch_configure+0x2c0>)
    8452:	4798      	blx	r3
    8454:	2800      	cmp	r0, #0
    8456:	f000 8201 	beq.w	885c <switch_configure+0x62c>
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL4, 0x01))	{ xprintf("[SPI_KSZ8794_PORT2CONTROL4] not correct\r\n"); }
    845a:	2101      	movs	r1, #1
    845c:	2024      	movs	r0, #36	; 0x24
    845e:	4b24      	ldr	r3, [pc, #144]	; (84f0 <switch_configure+0x2c0>)
    8460:	4798      	blx	r3
    8462:	2800      	cmp	r0, #0
    8464:	f000 81fe 	beq.w	8864 <switch_configure+0x634>
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL4, 0x01))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL4] not correct\r\n"); }
    8468:	2101      	movs	r1, #1
    846a:	2034      	movs	r0, #52	; 0x34
    846c:	4b20      	ldr	r3, [pc, #128]	; (84f0 <switch_configure+0x2c0>)
    846e:	4798      	blx	r3
    8470:	2800      	cmp	r0, #0
    8472:	f000 81fb 	beq.w	886c <switch_configure+0x63c>
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL4, 0x01))	{ xprintf("[SPI_KSZ8794_PORT4CONTROL4] not correct\r\n"); }
    8476:	2101      	movs	r1, #1
    8478:	2054      	movs	r0, #84	; 0x54
    847a:	4b1d      	ldr	r3, [pc, #116]	; (84f0 <switch_configure+0x2c0>)
    847c:	4798      	blx	r3
    847e:	2800      	cmp	r0, #0
    8480:	f000 81f8 	beq.w	8874 <switch_configure+0x644>
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL5, 0x00))	{ xprintf("[SPI_KSZ8794_PORT1CONTROL5] not correct\r\n"); }
    8484:	2100      	movs	r1, #0
    8486:	2015      	movs	r0, #21
    8488:	4b19      	ldr	r3, [pc, #100]	; (84f0 <switch_configure+0x2c0>)
    848a:	4798      	blx	r3
    848c:	2800      	cmp	r0, #0
    848e:	f000 81f5 	beq.w	887c <switch_configure+0x64c>
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL5, 0x00))	{ xprintf("[SPI_KSZ8794_PORT2CONTROL5] not correct\r\n"); }
    8492:	2100      	movs	r1, #0
    8494:	2025      	movs	r0, #37	; 0x25
    8496:	4b16      	ldr	r3, [pc, #88]	; (84f0 <switch_configure+0x2c0>)
    8498:	4798      	blx	r3
    849a:	2800      	cmp	r0, #0
    849c:	f000 81f2 	beq.w	8884 <switch_configure+0x654>
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL5, 0x00))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL5] not correct\r\n"); }
    84a0:	2100      	movs	r1, #0
    84a2:	2035      	movs	r0, #53	; 0x35
    84a4:	4b12      	ldr	r3, [pc, #72]	; (84f0 <switch_configure+0x2c0>)
    84a6:	4798      	blx	r3
    84a8:	2800      	cmp	r0, #0
    84aa:	f000 81ef 	beq.w	888c <switch_configure+0x65c>
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL5, 0x00))	{ xprintf("[SPI_KSZ8794_PORT4CONTROL5] not correct\r\n"); }
    84ae:	2100      	movs	r1, #0
    84b0:	2055      	movs	r0, #85	; 0x55
    84b2:	4b0f      	ldr	r3, [pc, #60]	; (84f0 <switch_configure+0x2c0>)
    84b4:	4798      	blx	r3
    84b6:	2800      	cmp	r0, #0
    84b8:	f000 81ec 	beq.w	8894 <switch_configure+0x664>
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL6, 0x28))	{ xprintf("[SPI_KSZ8794_PORT4CONTROL6] not correct\r\n"); }
    84bc:	2128      	movs	r1, #40	; 0x28
    84be:	2056      	movs	r0, #86	; 0x56
    84c0:	4b0b      	ldr	r3, [pc, #44]	; (84f0 <switch_configure+0x2c0>)
    84c2:	4798      	blx	r3
    84c4:	2800      	cmp	r0, #0
    84c6:	f000 81e9 	beq.w	889c <switch_configure+0x66c>
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL7, 0x3F))	{ xprintf("[SPI_KSZ8794_PORT1CONTROL7] not correct\r\n"); }
    84ca:	213f      	movs	r1, #63	; 0x3f
    84cc:	2017      	movs	r0, #23
    84ce:	4b08      	ldr	r3, [pc, #32]	; (84f0 <switch_configure+0x2c0>)
    84d0:	4798      	blx	r3
    84d2:	2800      	cmp	r0, #0
    84d4:	f000 81e6 	beq.w	88a4 <switch_configure+0x674>
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL7, 0x3F))	{ xprintf("[SPI_KSZ8794_PORT2CONTROL7] not correct\r\n"); }
    84d8:	213f      	movs	r1, #63	; 0x3f
    84da:	2027      	movs	r0, #39	; 0x27
    84dc:	4b04      	ldr	r3, [pc, #16]	; (84f0 <switch_configure+0x2c0>)
    84de:	4798      	blx	r3
    84e0:	2800      	cmp	r0, #0
    84e2:	f000 81e3 	beq.w	88ac <switch_configure+0x67c>
    84e6:	e009      	b.n	84fc <switch_configure+0x2cc>
    84e8:	0000f2e4 	.word	0x0000f2e4
    84ec:	0000031d 	.word	0x0000031d
    84f0:	0000db25 	.word	0x0000db25
    84f4:	0000dbc9 	.word	0x0000dbc9
    84f8:	000015a9 	.word	0x000015a9
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL7, 0x3F))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL7] not correct\r\n"); }
    84fc:	213f      	movs	r1, #63	; 0x3f
    84fe:	2037      	movs	r0, #55	; 0x37
    8500:	4ba5      	ldr	r3, [pc, #660]	; (8798 <switch_configure+0x568>)
    8502:	4798      	blx	r3
    8504:	2800      	cmp	r0, #0
    8506:	f000 81d5 	beq.w	88b4 <switch_configure+0x684>
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL8, 0x00))	{ xprintf("[SPI_KSZ8794_PORT1CONTROL8] not correct\r\n"); }
    850a:	2100      	movs	r1, #0
    850c:	201a      	movs	r0, #26
    850e:	4ba2      	ldr	r3, [pc, #648]	; (8798 <switch_configure+0x568>)
    8510:	4798      	blx	r3
    8512:	2800      	cmp	r0, #0
    8514:	f000 81d2 	beq.w	88bc <switch_configure+0x68c>
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL8, 0x00))	{ xprintf("[SPI_KSZ8794_PORT2CONTROL8] not correct\r\n"); }
    8518:	2100      	movs	r1, #0
    851a:	202a      	movs	r0, #42	; 0x2a
    851c:	4b9e      	ldr	r3, [pc, #632]	; (8798 <switch_configure+0x568>)
    851e:	4798      	blx	r3
    8520:	2800      	cmp	r0, #0
    8522:	f000 81cf 	beq.w	88c4 <switch_configure+0x694>
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL8, 0x00))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL8] not correct\r\n"); }
    8526:	2100      	movs	r1, #0
    8528:	203a      	movs	r0, #58	; 0x3a
    852a:	4b9b      	ldr	r3, [pc, #620]	; (8798 <switch_configure+0x568>)
    852c:	4798      	blx	r3
    852e:	2800      	cmp	r0, #0
    8530:	f000 81cc 	beq.w	88cc <switch_configure+0x69c>
	if (!checkKSZreg(SPI_KSZ8794_PORT1LINKMD, 0x00))	{ xprintf("[SPI_KSZ8794_PORT1LINKMD] not correct\r\n"); }
    8534:	2100      	movs	r1, #0
    8536:	201b      	movs	r0, #27
    8538:	4b97      	ldr	r3, [pc, #604]	; (8798 <switch_configure+0x568>)
    853a:	4798      	blx	r3
    853c:	2800      	cmp	r0, #0
    853e:	f000 81c9 	beq.w	88d4 <switch_configure+0x6a4>
	if (!checkKSZreg(SPI_KSZ8794_PORT2LINKMD, 0x00))	{ xprintf("[SPI_KSZ8794_PORT2LINKMD] not correct\r\n"); }
    8542:	2100      	movs	r1, #0
    8544:	202b      	movs	r0, #43	; 0x2b
    8546:	4b94      	ldr	r3, [pc, #592]	; (8798 <switch_configure+0x568>)
    8548:	4798      	blx	r3
    854a:	2800      	cmp	r0, #0
    854c:	f000 81c6 	beq.w	88dc <switch_configure+0x6ac>
	if (!checkKSZreg(SPI_KSZ8794_PORT3LINKMD, 0x00))	{ xprintf("[SPI_KSZ8794_PORT3LINKMD] not correct\r\n"); }
    8550:	2100      	movs	r1, #0
    8552:	203b      	movs	r0, #59	; 0x3b
    8554:	4b90      	ldr	r3, [pc, #576]	; (8798 <switch_configure+0x568>)
    8556:	4798      	blx	r3
    8558:	2800      	cmp	r0, #0
    855a:	f000 81c3 	beq.w	88e4 <switch_configure+0x6b4>
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL9, 0x5F))	{ xprintf("[SPI_KSZ8794_PORT1CONTROL9] not correct\r\n"); }
    855e:	215f      	movs	r1, #95	; 0x5f
    8560:	201c      	movs	r0, #28
    8562:	4b8d      	ldr	r3, [pc, #564]	; (8798 <switch_configure+0x568>)
    8564:	4798      	blx	r3
    8566:	2800      	cmp	r0, #0
    8568:	f000 81c0 	beq.w	88ec <switch_configure+0x6bc>
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL9, 0x5F))	{ xprintf("[SPI_KSZ8794_PORT2CONTROL9] not correct\r\n"); }
    856c:	215f      	movs	r1, #95	; 0x5f
    856e:	202c      	movs	r0, #44	; 0x2c
    8570:	4b89      	ldr	r3, [pc, #548]	; (8798 <switch_configure+0x568>)
    8572:	4798      	blx	r3
    8574:	2800      	cmp	r0, #0
    8576:	f000 81bd 	beq.w	88f4 <switch_configure+0x6c4>
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL9, 0x5F))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL9] not correct\r\n"); }
    857a:	215f      	movs	r1, #95	; 0x5f
    857c:	203c      	movs	r0, #60	; 0x3c
    857e:	4b86      	ldr	r3, [pc, #536]	; (8798 <switch_configure+0x568>)
    8580:	4798      	blx	r3
    8582:	2800      	cmp	r0, #0
    8584:	f000 81ba 	beq.w	88fc <switch_configure+0x6cc>
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL10, 0x00)) { xprintf("[SPI_KSZ8794_PORT1CONTROL10] not correct\r\n"); }
    8588:	2100      	movs	r1, #0
    858a:	201d      	movs	r0, #29
    858c:	4b82      	ldr	r3, [pc, #520]	; (8798 <switch_configure+0x568>)
    858e:	4798      	blx	r3
    8590:	2800      	cmp	r0, #0
    8592:	f000 81b7 	beq.w	8904 <switch_configure+0x6d4>
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL10, 0x00)) { xprintf("[SPI_KSZ8794_PORT2CONTROL10] not correct\r\n"); }
    8596:	2100      	movs	r1, #0
    8598:	202d      	movs	r0, #45	; 0x2d
    859a:	4b7f      	ldr	r3, [pc, #508]	; (8798 <switch_configure+0x568>)
    859c:	4798      	blx	r3
    859e:	2800      	cmp	r0, #0
    85a0:	f000 81b4 	beq.w	890c <switch_configure+0x6dc>
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL10, 0x00)) { xprintf("[SPI_KSZ8794_PORT3CONTROL10] not correct\r\n"); }
    85a4:	2100      	movs	r1, #0
    85a6:	203d      	movs	r0, #61	; 0x3d
    85a8:	4b7b      	ldr	r3, [pc, #492]	; (8798 <switch_configure+0x568>)
    85aa:	4798      	blx	r3
    85ac:	2800      	cmp	r0, #0
    85ae:	f000 81b1 	beq.w	8914 <switch_configure+0x6e4>
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL20, 0x62)) { xprintf("[SPI_KSZ8794_PORT2CONTROL20] not correct\r\n"); }
    85b2:	2162      	movs	r1, #98	; 0x62
    85b4:	20a3      	movs	r0, #163	; 0xa3
    85b6:	4b78      	ldr	r3, [pc, #480]	; (8798 <switch_configure+0x568>)
    85b8:	4798      	blx	r3
    85ba:	2800      	cmp	r0, #0
    85bc:	f000 81ae 	beq.w	891c <switch_configure+0x6ec>
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL12, 0x80)) { xprintf("[SPI_KSZ8794_PORT1CONTROL12] not correct\r\n"); }
    85c0:	2180      	movs	r1, #128	; 0x80
    85c2:	20b0      	movs	r0, #176	; 0xb0
    85c4:	4b74      	ldr	r3, [pc, #464]	; (8798 <switch_configure+0x568>)
    85c6:	4798      	blx	r3
    85c8:	2800      	cmp	r0, #0
    85ca:	f000 81ab 	beq.w	8924 <switch_configure+0x6f4>
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL12, 0x80)) { xprintf("[SPI_KSZ8794_PORT2CONTROL12] not correct\r\n"); }
    85ce:	2180      	movs	r1, #128	; 0x80
    85d0:	20c0      	movs	r0, #192	; 0xc0
    85d2:	4b71      	ldr	r3, [pc, #452]	; (8798 <switch_configure+0x568>)
    85d4:	4798      	blx	r3
    85d6:	2800      	cmp	r0, #0
    85d8:	f000 81a8 	beq.w	892c <switch_configure+0x6fc>
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL12, 0x80)) { xprintf("[SPI_KSZ8794_PORT3CONTROL12] not correct\r\n"); }
    85dc:	2180      	movs	r1, #128	; 0x80
    85de:	20d0      	movs	r0, #208	; 0xd0
    85e0:	4b6d      	ldr	r3, [pc, #436]	; (8798 <switch_configure+0x568>)
    85e2:	4798      	blx	r3
    85e4:	2800      	cmp	r0, #0
    85e6:	f000 81a5 	beq.w	8934 <switch_configure+0x704>
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL12, 0x80)) { xprintf("[SPI_KSZ8794_PORT4CONTROL12] not correct\r\n"); }
    85ea:	2180      	movs	r1, #128	; 0x80
    85ec:	20f0      	movs	r0, #240	; 0xf0
    85ee:	4b6a      	ldr	r3, [pc, #424]	; (8798 <switch_configure+0x568>)
    85f0:	4798      	blx	r3
    85f2:	2800      	cmp	r0, #0
    85f4:	f000 81a2 	beq.w	893c <switch_configure+0x70c>
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL13, 0x00)) { xprintf("[SPI_KSZ8794_PORT1CONTROL13] not correct\r\n"); }
    85f8:	2100      	movs	r1, #0
    85fa:	20b1      	movs	r0, #177	; 0xb1
    85fc:	4b66      	ldr	r3, [pc, #408]	; (8798 <switch_configure+0x568>)
    85fe:	4798      	blx	r3
    8600:	2800      	cmp	r0, #0
    8602:	f000 819f 	beq.w	8944 <switch_configure+0x714>
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL13, 0x00)) { xprintf("[SPI_KSZ8794_PORT2CONTROL13] not correct\r\n"); }
    8606:	2100      	movs	r1, #0
    8608:	20c1      	movs	r0, #193	; 0xc1
    860a:	4b63      	ldr	r3, [pc, #396]	; (8798 <switch_configure+0x568>)
    860c:	4798      	blx	r3
    860e:	2800      	cmp	r0, #0
    8610:	f000 819c 	beq.w	894c <switch_configure+0x71c>
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL13, 0x00)) { xprintf("[SPI_KSZ8794_PORT3CONTROL13] not correct\r\n"); }
    8614:	2100      	movs	r1, #0
    8616:	20d1      	movs	r0, #209	; 0xd1
    8618:	4b5f      	ldr	r3, [pc, #380]	; (8798 <switch_configure+0x568>)
    861a:	4798      	blx	r3
    861c:	2800      	cmp	r0, #0
    861e:	f000 8199 	beq.w	8954 <switch_configure+0x724>
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL13, 0x00)) { xprintf("[SPI_KSZ8794_PORT4CONTROL13] not correct\r\n"); }
    8622:	2100      	movs	r1, #0
    8624:	20f1      	movs	r0, #241	; 0xf1
    8626:	4b5c      	ldr	r3, [pc, #368]	; (8798 <switch_configure+0x568>)
    8628:	4798      	blx	r3
    862a:	2800      	cmp	r0, #0
    862c:	f000 8196 	beq.w	895c <switch_configure+0x72c>
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL14, 0x88)) { xprintf("[SPI_KSZ8794_PORT1CONTROL14] not correct\r\n"); }
    8630:	2188      	movs	r1, #136	; 0x88
    8632:	20b2      	movs	r0, #178	; 0xb2
    8634:	4b58      	ldr	r3, [pc, #352]	; (8798 <switch_configure+0x568>)
    8636:	4798      	blx	r3
    8638:	2800      	cmp	r0, #0
    863a:	f000 8193 	beq.w	8964 <switch_configure+0x734>
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL14, 0x88)) { xprintf("[SPI_KSZ8794_PORT2CONTROL14] not correct\r\n"); }
    863e:	2188      	movs	r1, #136	; 0x88
    8640:	20c2      	movs	r0, #194	; 0xc2
    8642:	4b55      	ldr	r3, [pc, #340]	; (8798 <switch_configure+0x568>)
    8644:	4798      	blx	r3
    8646:	2800      	cmp	r0, #0
    8648:	f000 8190 	beq.w	896c <switch_configure+0x73c>
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL14, 0x88)) { xprintf("[SPI_KSZ8794_PORT3CONTROL14] not correct\r\n"); }
    864c:	2188      	movs	r1, #136	; 0x88
    864e:	20d2      	movs	r0, #210	; 0xd2
    8650:	4b51      	ldr	r3, [pc, #324]	; (8798 <switch_configure+0x568>)
    8652:	4798      	blx	r3
    8654:	2800      	cmp	r0, #0
    8656:	f000 818d 	beq.w	8974 <switch_configure+0x744>
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL14, 0x88)) { xprintf("[SPI_KSZ8794_PORT4CONTROL14] not correct\r\n"); }
    865a:	2188      	movs	r1, #136	; 0x88
    865c:	20f2      	movs	r0, #242	; 0xf2
    865e:	4b4e      	ldr	r3, [pc, #312]	; (8798 <switch_configure+0x568>)
    8660:	4798      	blx	r3
    8662:	2800      	cmp	r0, #0
    8664:	f000 818a 	beq.w	897c <switch_configure+0x74c>
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL15, 0x84)) { xprintf("[SPI_KSZ8794_PORT1CONTROL15] not correct\r\n"); }
    8668:	2184      	movs	r1, #132	; 0x84
    866a:	20b3      	movs	r0, #179	; 0xb3
    866c:	4b4a      	ldr	r3, [pc, #296]	; (8798 <switch_configure+0x568>)
    866e:	4798      	blx	r3
    8670:	2800      	cmp	r0, #0
    8672:	f000 8187 	beq.w	8984 <switch_configure+0x754>
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL15, 0x84)) { xprintf("[SPI_KSZ8794_PORT2CONTROL15] not correct\r\n"); }
    8676:	2184      	movs	r1, #132	; 0x84
    8678:	20c3      	movs	r0, #195	; 0xc3
    867a:	4b47      	ldr	r3, [pc, #284]	; (8798 <switch_configure+0x568>)
    867c:	4798      	blx	r3
    867e:	2800      	cmp	r0, #0
    8680:	f000 8184 	beq.w	898c <switch_configure+0x75c>
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL15, 0x84)) { xprintf("[SPI_KSZ8794_PORT3CONTROL15] not correct\r\n"); }
    8684:	2184      	movs	r1, #132	; 0x84
    8686:	20d3      	movs	r0, #211	; 0xd3
    8688:	4b43      	ldr	r3, [pc, #268]	; (8798 <switch_configure+0x568>)
    868a:	4798      	blx	r3
    868c:	2800      	cmp	r0, #0
    868e:	f000 8181 	beq.w	8994 <switch_configure+0x764>
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL15, 0x84)) { xprintf("[SPI_KSZ8794_PORT4CONTROL15] not correct\r\n"); }
    8692:	2184      	movs	r1, #132	; 0x84
    8694:	20f3      	movs	r0, #243	; 0xf3
    8696:	4b40      	ldr	r3, [pc, #256]	; (8798 <switch_configure+0x568>)
    8698:	4798      	blx	r3
    869a:	2800      	cmp	r0, #0
    869c:	f000 817e 	beq.w	899c <switch_configure+0x76c>
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL16, 0x82)) { xprintf("[SPI_KSZ8794_PORT1CONTROL16] not correct\r\n"); }
    86a0:	2182      	movs	r1, #130	; 0x82
    86a2:	20b4      	movs	r0, #180	; 0xb4
    86a4:	4b3c      	ldr	r3, [pc, #240]	; (8798 <switch_configure+0x568>)
    86a6:	4798      	blx	r3
    86a8:	2800      	cmp	r0, #0
    86aa:	f000 817b 	beq.w	89a4 <switch_configure+0x774>
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL16, 0x82)) { xprintf("[SPI_KSZ8794_PORT2CONTROL16] not correct\r\n"); }
    86ae:	2182      	movs	r1, #130	; 0x82
    86b0:	20c4      	movs	r0, #196	; 0xc4
    86b2:	4b39      	ldr	r3, [pc, #228]	; (8798 <switch_configure+0x568>)
    86b4:	4798      	blx	r3
    86b6:	2800      	cmp	r0, #0
    86b8:	f000 8178 	beq.w	89ac <switch_configure+0x77c>
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL16, 0x82)) { xprintf("[SPI_KSZ8794_PORT3CONTROL16] not correct\r\n"); }
    86bc:	2182      	movs	r1, #130	; 0x82
    86be:	20d4      	movs	r0, #212	; 0xd4
    86c0:	4b35      	ldr	r3, [pc, #212]	; (8798 <switch_configure+0x568>)
    86c2:	4798      	blx	r3
    86c4:	2800      	cmp	r0, #0
    86c6:	f000 8175 	beq.w	89b4 <switch_configure+0x784>
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL16, 0x82)) { xprintf("[SPI_KSZ8794_PORT4CONTROL16] not correct\r\n"); }
    86ca:	2182      	movs	r1, #130	; 0x82
    86cc:	20f4      	movs	r0, #244	; 0xf4
    86ce:	4b32      	ldr	r3, [pc, #200]	; (8798 <switch_configure+0x568>)
    86d0:	4798      	blx	r3
    86d2:	2800      	cmp	r0, #0
    86d4:	f000 8172 	beq.w	89bc <switch_configure+0x78c>
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL17, 0x81)) { xprintf("[SPI_KSZ8794_PORT1CONTROL17] not correct\r\n"); }
    86d8:	2181      	movs	r1, #129	; 0x81
    86da:	20b5      	movs	r0, #181	; 0xb5
    86dc:	4b2e      	ldr	r3, [pc, #184]	; (8798 <switch_configure+0x568>)
    86de:	4798      	blx	r3
    86e0:	2800      	cmp	r0, #0
    86e2:	f000 816f 	beq.w	89c4 <switch_configure+0x794>
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL17, 0x81)) { xprintf("[SPI_KSZ8794_PORT2CONTROL17] not correct\r\n"); }
    86e6:	2181      	movs	r1, #129	; 0x81
    86e8:	20c5      	movs	r0, #197	; 0xc5
    86ea:	4b2b      	ldr	r3, [pc, #172]	; (8798 <switch_configure+0x568>)
    86ec:	4798      	blx	r3
    86ee:	2800      	cmp	r0, #0
    86f0:	f000 816c 	beq.w	89cc <switch_configure+0x79c>
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL17, 0x81)) { xprintf("[SPI_KSZ8794_PORT3CONTROL17] not correct\r\n"); }
    86f4:	2181      	movs	r1, #129	; 0x81
    86f6:	20d5      	movs	r0, #213	; 0xd5
    86f8:	4b27      	ldr	r3, [pc, #156]	; (8798 <switch_configure+0x568>)
    86fa:	4798      	blx	r3
    86fc:	2800      	cmp	r0, #0
    86fe:	f000 81e9 	beq.w	8ad4 <switch_configure+0x8a4>
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL17, 0x81)) { xprintf("[SPI_KSZ8794_PORT4CONTROL17] not correct\r\n"); }
    8702:	2181      	movs	r1, #129	; 0x81
    8704:	20f5      	movs	r0, #245	; 0xf5
    8706:	4b24      	ldr	r3, [pc, #144]	; (8798 <switch_configure+0x568>)
    8708:	4798      	blx	r3
    870a:	2800      	cmp	r0, #0
    870c:	f000 81e6 	beq.w	8adc <switch_configure+0x8ac>
		
	/* Start the Ethernet SWITCH operation */
	writeKSZreg(SPI_KSZ8794_START, 0x01);
    8710:	2101      	movs	r1, #1
    8712:	4608      	mov	r0, r1
    8714:	4b21      	ldr	r3, [pc, #132]	; (879c <switch_configure+0x56c>)
    8716:	4798      	blx	r3
	delay_us(50);
    8718:	2032      	movs	r0, #50	; 0x32
    871a:	4b21      	ldr	r3, [pc, #132]	; (87a0 <switch_configure+0x570>)
    871c:	4798      	blx	r3
	
	/* Check it has re-started and running */
	if (!checkKSZreg(SPI_KSZ8794_START, 0x61))			{ xprintf("[SPI_KSZ8794_START final] not correct\r\n"); }
    871e:	2161      	movs	r1, #97	; 0x61
    8720:	2001      	movs	r0, #1
    8722:	4b1d      	ldr	r3, [pc, #116]	; (8798 <switch_configure+0x568>)
    8724:	4798      	blx	r3
    8726:	2800      	cmp	r0, #0
    8728:	f000 81dc 	beq.w	8ae4 <switch_configure+0x8b4>
    872c:	bd08      	pop	{r3, pc}
	if (!checkKSZreg(SPI_KSZ8794_FAMILY_ID, 0x87))		{ xprintf("[SPI_KSZ8794_FAMILY_ID] not correct\r\n"); }
    872e:	481d      	ldr	r0, [pc, #116]	; (87a4 <switch_configure+0x574>)
    8730:	4b1d      	ldr	r3, [pc, #116]	; (87a8 <switch_configure+0x578>)
    8732:	4798      	blx	r3
    8734:	e587      	b.n	8246 <switch_configure+0x16>
	if (!checkKSZreg(SPI_KSZ8794_START, 0x60))			{ xprintf("[SPI_KSZ8794_START first] not correct\r\n"); }
    8736:	481d      	ldr	r0, [pc, #116]	; (87ac <switch_configure+0x57c>)
    8738:	4b1b      	ldr	r3, [pc, #108]	; (87a8 <switch_configure+0x578>)
    873a:	4798      	blx	r3
    873c:	e591      	b.n	8262 <switch_configure+0x32>
	if (!checkKSZreg(SPI_KSZ8794_GLOBAL0, 0x0D))		{ xprintf("[SPI_KSZ8794_GLOBAL0] not correct\r\n"); }
    873e:	481c      	ldr	r0, [pc, #112]	; (87b0 <switch_configure+0x580>)
    8740:	4b19      	ldr	r3, [pc, #100]	; (87a8 <switch_configure+0x578>)
    8742:	4798      	blx	r3
    8744:	e59b      	b.n	827e <switch_configure+0x4e>
	if (!checkKSZreg(SPI_KSZ8794_GLOBAL1, 0x0C))		{ xprintf("[SPI_KSZ8794_GLOBAL1] not correct\r\n"); }
    8746:	481b      	ldr	r0, [pc, #108]	; (87b4 <switch_configure+0x584>)
    8748:	4b17      	ldr	r3, [pc, #92]	; (87a8 <switch_configure+0x578>)
    874a:	4798      	blx	r3
    874c:	e5a5      	b.n	829a <switch_configure+0x6a>
	if (!checkKSZreg(SPI_KSZ8794_GLOBAL2, 0xB2))		{ xprintf("[SPI_KSZ8794_GLOBAL2] not correct\r\n"); }
    874e:	481a      	ldr	r0, [pc, #104]	; (87b8 <switch_configure+0x588>)
    8750:	4b15      	ldr	r3, [pc, #84]	; (87a8 <switch_configure+0x578>)
    8752:	4798      	blx	r3
    8754:	e5af      	b.n	82b6 <switch_configure+0x86>
	if (!checkKSZreg(SPI_KSZ8794_GLOBAL3, 0x00))		{ xprintf("[SPI_KSZ8794_GLOBAL3] not correct\r\n"); }
    8756:	4819      	ldr	r0, [pc, #100]	; (87bc <switch_configure+0x58c>)
    8758:	4b13      	ldr	r3, [pc, #76]	; (87a8 <switch_configure+0x578>)
    875a:	4798      	blx	r3
    875c:	e5b2      	b.n	82c4 <switch_configure+0x94>
	if (!checkKSZreg(SPI_KSZ8794_GLOBAL4, 0x00))		{ xprintf("[SPI_KSZ8794_GLOBAL4] not correct\r\n"); }
    875e:	4818      	ldr	r0, [pc, #96]	; (87c0 <switch_configure+0x590>)
    8760:	4b11      	ldr	r3, [pc, #68]	; (87a8 <switch_configure+0x578>)
    8762:	4798      	blx	r3
    8764:	e5b5      	b.n	82d2 <switch_configure+0xa2>
	if (!checkKSZreg(SPI_KSZ8794_GLOBAL5, 0x4A))		{ xprintf("[SPI_KSZ8794_GLOBAL5] not correct\r\n"); }
    8766:	4817      	ldr	r0, [pc, #92]	; (87c4 <switch_configure+0x594>)
    8768:	4b0f      	ldr	r3, [pc, #60]	; (87a8 <switch_configure+0x578>)
    876a:	4798      	blx	r3
    876c:	e5b8      	b.n	82e0 <switch_configure+0xb0>
	if (!checkKSZreg(SPI_KSZ8794_GLOBAL6, 0x00))		{ xprintf("[SPI_KSZ8794_GLOBAL6] not correct\r\n"); }
    876e:	4816      	ldr	r0, [pc, #88]	; (87c8 <switch_configure+0x598>)
    8770:	4b0d      	ldr	r3, [pc, #52]	; (87a8 <switch_configure+0x578>)
    8772:	4798      	blx	r3
    8774:	e5bb      	b.n	82ee <switch_configure+0xbe>
	if (!checkKSZreg(SPI_KSZ8794_GLOBAL9, 0x00))		{ xprintf("[SPI_KSZ8794_GLOBAL9] not correct\r\n"); }
    8776:	4815      	ldr	r0, [pc, #84]	; (87cc <switch_configure+0x59c>)
    8778:	4b0b      	ldr	r3, [pc, #44]	; (87a8 <switch_configure+0x578>)
    877a:	4798      	blx	r3
    877c:	e5be      	b.n	82fc <switch_configure+0xcc>
	if (!checkKSZreg(SPI_KSZ8794_GLOBAL10, 0x44))		{ xprintf("[SPI_KSZ8794_GLOBAL10] not correct\r\n"); }
    877e:	4814      	ldr	r0, [pc, #80]	; (87d0 <switch_configure+0x5a0>)
    8780:	4b09      	ldr	r3, [pc, #36]	; (87a8 <switch_configure+0x578>)
    8782:	4798      	blx	r3
    8784:	e5c1      	b.n	830a <switch_configure+0xda>
	if (!checkKSZreg(SPI_KSZ8794_PDMC1, 0x00))			{ xprintf("[SPI_KSZ8794_PDMC1] not correct\r\n"); }
    8786:	4813      	ldr	r0, [pc, #76]	; (87d4 <switch_configure+0x5a4>)
    8788:	4b07      	ldr	r3, [pc, #28]	; (87a8 <switch_configure+0x578>)
    878a:	4798      	blx	r3
    878c:	e5c4      	b.n	8318 <switch_configure+0xe8>
	if (!checkKSZreg(SPI_KSZ8794_PDMC2, 0x50))			{ xprintf("[SPI_KSZ8794_PDMC2] not correct\r\n"); }
    878e:	4812      	ldr	r0, [pc, #72]	; (87d8 <switch_configure+0x5a8>)
    8790:	4b05      	ldr	r3, [pc, #20]	; (87a8 <switch_configure+0x578>)
    8792:	4798      	blx	r3
    8794:	e5c7      	b.n	8326 <switch_configure+0xf6>
    8796:	bf00      	nop
    8798:	0000db25 	.word	0x0000db25
    879c:	0000dbc9 	.word	0x0000dbc9
    87a0:	000015a9 	.word	0x000015a9
    87a4:	0000f32c 	.word	0x0000f32c
    87a8:	0000031d 	.word	0x0000031d
    87ac:	0000f354 	.word	0x0000f354
    87b0:	0000f37c 	.word	0x0000f37c
    87b4:	0000f3a0 	.word	0x0000f3a0
    87b8:	0000f3c4 	.word	0x0000f3c4
    87bc:	0000f3e8 	.word	0x0000f3e8
    87c0:	0000f40c 	.word	0x0000f40c
    87c4:	0000f430 	.word	0x0000f430
    87c8:	0000f454 	.word	0x0000f454
    87cc:	0000f478 	.word	0x0000f478
    87d0:	0000f49c 	.word	0x0000f49c
    87d4:	0000f4c4 	.word	0x0000f4c4
    87d8:	0000f4e8 	.word	0x0000f4e8
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL0, 0x80))	{ xprintf("[SPI_KSZ8794_PORT1CONTROL0] not correct\r\n"); }
    87dc:	487d      	ldr	r0, [pc, #500]	; (89d4 <switch_configure+0x7a4>)
    87de:	4b7e      	ldr	r3, [pc, #504]	; (89d8 <switch_configure+0x7a8>)
    87e0:	4798      	blx	r3
    87e2:	e5ae      	b.n	8342 <switch_configure+0x112>
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL0, 0x80))	{ xprintf("[SPI_KSZ8794_PORT2CONTROL0] not correct\r\n"); }
    87e4:	487d      	ldr	r0, [pc, #500]	; (89dc <switch_configure+0x7ac>)
    87e6:	4b7c      	ldr	r3, [pc, #496]	; (89d8 <switch_configure+0x7a8>)
    87e8:	4798      	blx	r3
    87ea:	e5b8      	b.n	835e <switch_configure+0x12e>
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL0, 0x80))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL0] not correct\r\n"); }
    87ec:	487c      	ldr	r0, [pc, #496]	; (89e0 <switch_configure+0x7b0>)
    87ee:	4b7a      	ldr	r3, [pc, #488]	; (89d8 <switch_configure+0x7a8>)
    87f0:	4798      	blx	r3
    87f2:	e5c2      	b.n	837a <switch_configure+0x14a>
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL0, 0x80))	{ xprintf("[SPI_KSZ8794_PORT4CONTROL0] not correct\r\n"); }
    87f4:	487b      	ldr	r0, [pc, #492]	; (89e4 <switch_configure+0x7b4>)
    87f6:	4b78      	ldr	r3, [pc, #480]	; (89d8 <switch_configure+0x7a8>)
    87f8:	4798      	blx	r3
    87fa:	e5cc      	b.n	8396 <switch_configure+0x166>
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL1, 0x1F))	{ xprintf("[SPI_KSZ8794_PORT1CONTROL1] not correct\r\n"); }
    87fc:	487a      	ldr	r0, [pc, #488]	; (89e8 <switch_configure+0x7b8>)
    87fe:	4b76      	ldr	r3, [pc, #472]	; (89d8 <switch_configure+0x7a8>)
    8800:	4798      	blx	r3
    8802:	e5cf      	b.n	83a4 <switch_configure+0x174>
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL1, 0x1F))	{ xprintf("[SPI_KSZ8794_PORT2CONTROL1] not correct\r\n"); }
    8804:	4879      	ldr	r0, [pc, #484]	; (89ec <switch_configure+0x7bc>)
    8806:	4b74      	ldr	r3, [pc, #464]	; (89d8 <switch_configure+0x7a8>)
    8808:	4798      	blx	r3
    880a:	e5d2      	b.n	83b2 <switch_configure+0x182>
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL1, 0x1F))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL1] not correct\r\n"); }
    880c:	4878      	ldr	r0, [pc, #480]	; (89f0 <switch_configure+0x7c0>)
    880e:	4b72      	ldr	r3, [pc, #456]	; (89d8 <switch_configure+0x7a8>)
    8810:	4798      	blx	r3
    8812:	e5d5      	b.n	83c0 <switch_configure+0x190>
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL1, 0x1F))	{ xprintf("[SPI_KSZ8794_PORT4CONTROL1] not correct\r\n"); }
    8814:	4877      	ldr	r0, [pc, #476]	; (89f4 <switch_configure+0x7c4>)
    8816:	4b70      	ldr	r3, [pc, #448]	; (89d8 <switch_configure+0x7a8>)
    8818:	4798      	blx	r3
    881a:	e5d8      	b.n	83ce <switch_configure+0x19e>
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL2, 0x06))	{ xprintf("[SPI_KSZ8794_PORT1CONTROL2] not correct\r\n"); }
    881c:	4876      	ldr	r0, [pc, #472]	; (89f8 <switch_configure+0x7c8>)
    881e:	4b6e      	ldr	r3, [pc, #440]	; (89d8 <switch_configure+0x7a8>)
    8820:	4798      	blx	r3
    8822:	e5db      	b.n	83dc <switch_configure+0x1ac>
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL2, 0x06))	{ xprintf("[SPI_KSZ8794_PORT2CONTROL2] not correct\r\n"); }
    8824:	4875      	ldr	r0, [pc, #468]	; (89fc <switch_configure+0x7cc>)
    8826:	4b6c      	ldr	r3, [pc, #432]	; (89d8 <switch_configure+0x7a8>)
    8828:	4798      	blx	r3
    882a:	e5de      	b.n	83ea <switch_configure+0x1ba>
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL2, 0x00))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL2] not correct\r\n"); }
    882c:	4874      	ldr	r0, [pc, #464]	; (8a00 <switch_configure+0x7d0>)
    882e:	4b6a      	ldr	r3, [pc, #424]	; (89d8 <switch_configure+0x7a8>)
    8830:	4798      	blx	r3
    8832:	e5e8      	b.n	8406 <switch_configure+0x1d6>
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL2, 0x06))	{ xprintf("[SPI_KSZ8794_PORT4CONTROL2] not correct\r\n"); }
    8834:	4873      	ldr	r0, [pc, #460]	; (8a04 <switch_configure+0x7d4>)
    8836:	4b68      	ldr	r3, [pc, #416]	; (89d8 <switch_configure+0x7a8>)
    8838:	4798      	blx	r3
    883a:	e5eb      	b.n	8414 <switch_configure+0x1e4>
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL3, 0x00))	{ xprintf("[SPI_KSZ8794_PORT1CONTROL3] not correct\r\n"); }
    883c:	4872      	ldr	r0, [pc, #456]	; (8a08 <switch_configure+0x7d8>)
    883e:	4b66      	ldr	r3, [pc, #408]	; (89d8 <switch_configure+0x7a8>)
    8840:	4798      	blx	r3
    8842:	e5ee      	b.n	8422 <switch_configure+0x1f2>
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL3, 0x00))	{ xprintf("[SPI_KSZ8794_PORT2CONTROL3] not correct\r\n"); }
    8844:	4871      	ldr	r0, [pc, #452]	; (8a0c <switch_configure+0x7dc>)
    8846:	4b64      	ldr	r3, [pc, #400]	; (89d8 <switch_configure+0x7a8>)
    8848:	4798      	blx	r3
    884a:	e5f1      	b.n	8430 <switch_configure+0x200>
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL3, 0x00))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL3] not correct\r\n"); }
    884c:	4870      	ldr	r0, [pc, #448]	; (8a10 <switch_configure+0x7e0>)
    884e:	4b62      	ldr	r3, [pc, #392]	; (89d8 <switch_configure+0x7a8>)
    8850:	4798      	blx	r3
    8852:	e5f4      	b.n	843e <switch_configure+0x20e>
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL3, 0x00))	{ xprintf("[SPI_KSZ8794_PORT4CONTROL3] not correct\r\n"); }
    8854:	486f      	ldr	r0, [pc, #444]	; (8a14 <switch_configure+0x7e4>)
    8856:	4b60      	ldr	r3, [pc, #384]	; (89d8 <switch_configure+0x7a8>)
    8858:	4798      	blx	r3
    885a:	e5f7      	b.n	844c <switch_configure+0x21c>
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL4, 0x01))	{ xprintf("[SPI_KSZ8794_PORT1CONTROL4] not correct\r\n"); }
    885c:	486e      	ldr	r0, [pc, #440]	; (8a18 <switch_configure+0x7e8>)
    885e:	4b5e      	ldr	r3, [pc, #376]	; (89d8 <switch_configure+0x7a8>)
    8860:	4798      	blx	r3
    8862:	e5fa      	b.n	845a <switch_configure+0x22a>
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL4, 0x01))	{ xprintf("[SPI_KSZ8794_PORT2CONTROL4] not correct\r\n"); }
    8864:	486d      	ldr	r0, [pc, #436]	; (8a1c <switch_configure+0x7ec>)
    8866:	4b5c      	ldr	r3, [pc, #368]	; (89d8 <switch_configure+0x7a8>)
    8868:	4798      	blx	r3
    886a:	e5fd      	b.n	8468 <switch_configure+0x238>
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL4, 0x01))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL4] not correct\r\n"); }
    886c:	486c      	ldr	r0, [pc, #432]	; (8a20 <switch_configure+0x7f0>)
    886e:	4b5a      	ldr	r3, [pc, #360]	; (89d8 <switch_configure+0x7a8>)
    8870:	4798      	blx	r3
    8872:	e600      	b.n	8476 <switch_configure+0x246>
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL4, 0x01))	{ xprintf("[SPI_KSZ8794_PORT4CONTROL4] not correct\r\n"); }
    8874:	486b      	ldr	r0, [pc, #428]	; (8a24 <switch_configure+0x7f4>)
    8876:	4b58      	ldr	r3, [pc, #352]	; (89d8 <switch_configure+0x7a8>)
    8878:	4798      	blx	r3
    887a:	e603      	b.n	8484 <switch_configure+0x254>
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL5, 0x00))	{ xprintf("[SPI_KSZ8794_PORT1CONTROL5] not correct\r\n"); }
    887c:	486a      	ldr	r0, [pc, #424]	; (8a28 <switch_configure+0x7f8>)
    887e:	4b56      	ldr	r3, [pc, #344]	; (89d8 <switch_configure+0x7a8>)
    8880:	4798      	blx	r3
    8882:	e606      	b.n	8492 <switch_configure+0x262>
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL5, 0x00))	{ xprintf("[SPI_KSZ8794_PORT2CONTROL5] not correct\r\n"); }
    8884:	4869      	ldr	r0, [pc, #420]	; (8a2c <switch_configure+0x7fc>)
    8886:	4b54      	ldr	r3, [pc, #336]	; (89d8 <switch_configure+0x7a8>)
    8888:	4798      	blx	r3
    888a:	e609      	b.n	84a0 <switch_configure+0x270>
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL5, 0x00))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL5] not correct\r\n"); }
    888c:	4868      	ldr	r0, [pc, #416]	; (8a30 <switch_configure+0x800>)
    888e:	4b52      	ldr	r3, [pc, #328]	; (89d8 <switch_configure+0x7a8>)
    8890:	4798      	blx	r3
    8892:	e60c      	b.n	84ae <switch_configure+0x27e>
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL5, 0x00))	{ xprintf("[SPI_KSZ8794_PORT4CONTROL5] not correct\r\n"); }
    8894:	4867      	ldr	r0, [pc, #412]	; (8a34 <switch_configure+0x804>)
    8896:	4b50      	ldr	r3, [pc, #320]	; (89d8 <switch_configure+0x7a8>)
    8898:	4798      	blx	r3
    889a:	e60f      	b.n	84bc <switch_configure+0x28c>
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL6, 0x28))	{ xprintf("[SPI_KSZ8794_PORT4CONTROL6] not correct\r\n"); }
    889c:	4866      	ldr	r0, [pc, #408]	; (8a38 <switch_configure+0x808>)
    889e:	4b4e      	ldr	r3, [pc, #312]	; (89d8 <switch_configure+0x7a8>)
    88a0:	4798      	blx	r3
    88a2:	e612      	b.n	84ca <switch_configure+0x29a>
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL7, 0x3F))	{ xprintf("[SPI_KSZ8794_PORT1CONTROL7] not correct\r\n"); }
    88a4:	4865      	ldr	r0, [pc, #404]	; (8a3c <switch_configure+0x80c>)
    88a6:	4b4c      	ldr	r3, [pc, #304]	; (89d8 <switch_configure+0x7a8>)
    88a8:	4798      	blx	r3
    88aa:	e615      	b.n	84d8 <switch_configure+0x2a8>
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL7, 0x3F))	{ xprintf("[SPI_KSZ8794_PORT2CONTROL7] not correct\r\n"); }
    88ac:	4864      	ldr	r0, [pc, #400]	; (8a40 <switch_configure+0x810>)
    88ae:	4b4a      	ldr	r3, [pc, #296]	; (89d8 <switch_configure+0x7a8>)
    88b0:	4798      	blx	r3
    88b2:	e623      	b.n	84fc <switch_configure+0x2cc>
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL7, 0x3F))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL7] not correct\r\n"); }
    88b4:	4863      	ldr	r0, [pc, #396]	; (8a44 <switch_configure+0x814>)
    88b6:	4b48      	ldr	r3, [pc, #288]	; (89d8 <switch_configure+0x7a8>)
    88b8:	4798      	blx	r3
    88ba:	e626      	b.n	850a <switch_configure+0x2da>
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL8, 0x00))	{ xprintf("[SPI_KSZ8794_PORT1CONTROL8] not correct\r\n"); }
    88bc:	4862      	ldr	r0, [pc, #392]	; (8a48 <switch_configure+0x818>)
    88be:	4b46      	ldr	r3, [pc, #280]	; (89d8 <switch_configure+0x7a8>)
    88c0:	4798      	blx	r3
    88c2:	e629      	b.n	8518 <switch_configure+0x2e8>
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL8, 0x00))	{ xprintf("[SPI_KSZ8794_PORT2CONTROL8] not correct\r\n"); }
    88c4:	4861      	ldr	r0, [pc, #388]	; (8a4c <switch_configure+0x81c>)
    88c6:	4b44      	ldr	r3, [pc, #272]	; (89d8 <switch_configure+0x7a8>)
    88c8:	4798      	blx	r3
    88ca:	e62c      	b.n	8526 <switch_configure+0x2f6>
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL8, 0x00))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL8] not correct\r\n"); }
    88cc:	4860      	ldr	r0, [pc, #384]	; (8a50 <switch_configure+0x820>)
    88ce:	4b42      	ldr	r3, [pc, #264]	; (89d8 <switch_configure+0x7a8>)
    88d0:	4798      	blx	r3
    88d2:	e62f      	b.n	8534 <switch_configure+0x304>
	if (!checkKSZreg(SPI_KSZ8794_PORT1LINKMD, 0x00))	{ xprintf("[SPI_KSZ8794_PORT1LINKMD] not correct\r\n"); }
    88d4:	485f      	ldr	r0, [pc, #380]	; (8a54 <switch_configure+0x824>)
    88d6:	4b40      	ldr	r3, [pc, #256]	; (89d8 <switch_configure+0x7a8>)
    88d8:	4798      	blx	r3
    88da:	e632      	b.n	8542 <switch_configure+0x312>
	if (!checkKSZreg(SPI_KSZ8794_PORT2LINKMD, 0x00))	{ xprintf("[SPI_KSZ8794_PORT2LINKMD] not correct\r\n"); }
    88dc:	485e      	ldr	r0, [pc, #376]	; (8a58 <switch_configure+0x828>)
    88de:	4b3e      	ldr	r3, [pc, #248]	; (89d8 <switch_configure+0x7a8>)
    88e0:	4798      	blx	r3
    88e2:	e635      	b.n	8550 <switch_configure+0x320>
	if (!checkKSZreg(SPI_KSZ8794_PORT3LINKMD, 0x00))	{ xprintf("[SPI_KSZ8794_PORT3LINKMD] not correct\r\n"); }
    88e4:	485d      	ldr	r0, [pc, #372]	; (8a5c <switch_configure+0x82c>)
    88e6:	4b3c      	ldr	r3, [pc, #240]	; (89d8 <switch_configure+0x7a8>)
    88e8:	4798      	blx	r3
    88ea:	e638      	b.n	855e <switch_configure+0x32e>
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL9, 0x5F))	{ xprintf("[SPI_KSZ8794_PORT1CONTROL9] not correct\r\n"); }
    88ec:	485c      	ldr	r0, [pc, #368]	; (8a60 <switch_configure+0x830>)
    88ee:	4b3a      	ldr	r3, [pc, #232]	; (89d8 <switch_configure+0x7a8>)
    88f0:	4798      	blx	r3
    88f2:	e63b      	b.n	856c <switch_configure+0x33c>
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL9, 0x5F))	{ xprintf("[SPI_KSZ8794_PORT2CONTROL9] not correct\r\n"); }
    88f4:	485b      	ldr	r0, [pc, #364]	; (8a64 <switch_configure+0x834>)
    88f6:	4b38      	ldr	r3, [pc, #224]	; (89d8 <switch_configure+0x7a8>)
    88f8:	4798      	blx	r3
    88fa:	e63e      	b.n	857a <switch_configure+0x34a>
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL9, 0x5F))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL9] not correct\r\n"); }
    88fc:	485a      	ldr	r0, [pc, #360]	; (8a68 <switch_configure+0x838>)
    88fe:	4b36      	ldr	r3, [pc, #216]	; (89d8 <switch_configure+0x7a8>)
    8900:	4798      	blx	r3
    8902:	e641      	b.n	8588 <switch_configure+0x358>
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL10, 0x00)) { xprintf("[SPI_KSZ8794_PORT1CONTROL10] not correct\r\n"); }
    8904:	4859      	ldr	r0, [pc, #356]	; (8a6c <switch_configure+0x83c>)
    8906:	4b34      	ldr	r3, [pc, #208]	; (89d8 <switch_configure+0x7a8>)
    8908:	4798      	blx	r3
    890a:	e644      	b.n	8596 <switch_configure+0x366>
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL10, 0x00)) { xprintf("[SPI_KSZ8794_PORT2CONTROL10] not correct\r\n"); }
    890c:	4858      	ldr	r0, [pc, #352]	; (8a70 <switch_configure+0x840>)
    890e:	4b32      	ldr	r3, [pc, #200]	; (89d8 <switch_configure+0x7a8>)
    8910:	4798      	blx	r3
    8912:	e647      	b.n	85a4 <switch_configure+0x374>
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL10, 0x00)) { xprintf("[SPI_KSZ8794_PORT3CONTROL10] not correct\r\n"); }
    8914:	4857      	ldr	r0, [pc, #348]	; (8a74 <switch_configure+0x844>)
    8916:	4b30      	ldr	r3, [pc, #192]	; (89d8 <switch_configure+0x7a8>)
    8918:	4798      	blx	r3
    891a:	e64a      	b.n	85b2 <switch_configure+0x382>
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL20, 0x62)) { xprintf("[SPI_KSZ8794_PORT2CONTROL20] not correct\r\n"); }
    891c:	4856      	ldr	r0, [pc, #344]	; (8a78 <switch_configure+0x848>)
    891e:	4b2e      	ldr	r3, [pc, #184]	; (89d8 <switch_configure+0x7a8>)
    8920:	4798      	blx	r3
    8922:	e64d      	b.n	85c0 <switch_configure+0x390>
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL12, 0x80)) { xprintf("[SPI_KSZ8794_PORT1CONTROL12] not correct\r\n"); }
    8924:	4855      	ldr	r0, [pc, #340]	; (8a7c <switch_configure+0x84c>)
    8926:	4b2c      	ldr	r3, [pc, #176]	; (89d8 <switch_configure+0x7a8>)
    8928:	4798      	blx	r3
    892a:	e650      	b.n	85ce <switch_configure+0x39e>
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL12, 0x80)) { xprintf("[SPI_KSZ8794_PORT2CONTROL12] not correct\r\n"); }
    892c:	4854      	ldr	r0, [pc, #336]	; (8a80 <switch_configure+0x850>)
    892e:	4b2a      	ldr	r3, [pc, #168]	; (89d8 <switch_configure+0x7a8>)
    8930:	4798      	blx	r3
    8932:	e653      	b.n	85dc <switch_configure+0x3ac>
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL12, 0x80)) { xprintf("[SPI_KSZ8794_PORT3CONTROL12] not correct\r\n"); }
    8934:	4853      	ldr	r0, [pc, #332]	; (8a84 <switch_configure+0x854>)
    8936:	4b28      	ldr	r3, [pc, #160]	; (89d8 <switch_configure+0x7a8>)
    8938:	4798      	blx	r3
    893a:	e656      	b.n	85ea <switch_configure+0x3ba>
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL12, 0x80)) { xprintf("[SPI_KSZ8794_PORT4CONTROL12] not correct\r\n"); }
    893c:	4852      	ldr	r0, [pc, #328]	; (8a88 <switch_configure+0x858>)
    893e:	4b26      	ldr	r3, [pc, #152]	; (89d8 <switch_configure+0x7a8>)
    8940:	4798      	blx	r3
    8942:	e659      	b.n	85f8 <switch_configure+0x3c8>
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL13, 0x00)) { xprintf("[SPI_KSZ8794_PORT1CONTROL13] not correct\r\n"); }
    8944:	4851      	ldr	r0, [pc, #324]	; (8a8c <switch_configure+0x85c>)
    8946:	4b24      	ldr	r3, [pc, #144]	; (89d8 <switch_configure+0x7a8>)
    8948:	4798      	blx	r3
    894a:	e65c      	b.n	8606 <switch_configure+0x3d6>
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL13, 0x00)) { xprintf("[SPI_KSZ8794_PORT2CONTROL13] not correct\r\n"); }
    894c:	4850      	ldr	r0, [pc, #320]	; (8a90 <switch_configure+0x860>)
    894e:	4b22      	ldr	r3, [pc, #136]	; (89d8 <switch_configure+0x7a8>)
    8950:	4798      	blx	r3
    8952:	e65f      	b.n	8614 <switch_configure+0x3e4>
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL13, 0x00)) { xprintf("[SPI_KSZ8794_PORT3CONTROL13] not correct\r\n"); }
    8954:	484f      	ldr	r0, [pc, #316]	; (8a94 <switch_configure+0x864>)
    8956:	4b20      	ldr	r3, [pc, #128]	; (89d8 <switch_configure+0x7a8>)
    8958:	4798      	blx	r3
    895a:	e662      	b.n	8622 <switch_configure+0x3f2>
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL13, 0x00)) { xprintf("[SPI_KSZ8794_PORT4CONTROL13] not correct\r\n"); }
    895c:	484e      	ldr	r0, [pc, #312]	; (8a98 <switch_configure+0x868>)
    895e:	4b1e      	ldr	r3, [pc, #120]	; (89d8 <switch_configure+0x7a8>)
    8960:	4798      	blx	r3
    8962:	e665      	b.n	8630 <switch_configure+0x400>
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL14, 0x88)) { xprintf("[SPI_KSZ8794_PORT1CONTROL14] not correct\r\n"); }
    8964:	484d      	ldr	r0, [pc, #308]	; (8a9c <switch_configure+0x86c>)
    8966:	4b1c      	ldr	r3, [pc, #112]	; (89d8 <switch_configure+0x7a8>)
    8968:	4798      	blx	r3
    896a:	e668      	b.n	863e <switch_configure+0x40e>
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL14, 0x88)) { xprintf("[SPI_KSZ8794_PORT2CONTROL14] not correct\r\n"); }
    896c:	484c      	ldr	r0, [pc, #304]	; (8aa0 <switch_configure+0x870>)
    896e:	4b1a      	ldr	r3, [pc, #104]	; (89d8 <switch_configure+0x7a8>)
    8970:	4798      	blx	r3
    8972:	e66b      	b.n	864c <switch_configure+0x41c>
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL14, 0x88)) { xprintf("[SPI_KSZ8794_PORT3CONTROL14] not correct\r\n"); }
    8974:	484b      	ldr	r0, [pc, #300]	; (8aa4 <switch_configure+0x874>)
    8976:	4b18      	ldr	r3, [pc, #96]	; (89d8 <switch_configure+0x7a8>)
    8978:	4798      	blx	r3
    897a:	e66e      	b.n	865a <switch_configure+0x42a>
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL14, 0x88)) { xprintf("[SPI_KSZ8794_PORT4CONTROL14] not correct\r\n"); }
    897c:	484a      	ldr	r0, [pc, #296]	; (8aa8 <switch_configure+0x878>)
    897e:	4b16      	ldr	r3, [pc, #88]	; (89d8 <switch_configure+0x7a8>)
    8980:	4798      	blx	r3
    8982:	e671      	b.n	8668 <switch_configure+0x438>
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL15, 0x84)) { xprintf("[SPI_KSZ8794_PORT1CONTROL15] not correct\r\n"); }
    8984:	4849      	ldr	r0, [pc, #292]	; (8aac <switch_configure+0x87c>)
    8986:	4b14      	ldr	r3, [pc, #80]	; (89d8 <switch_configure+0x7a8>)
    8988:	4798      	blx	r3
    898a:	e674      	b.n	8676 <switch_configure+0x446>
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL15, 0x84)) { xprintf("[SPI_KSZ8794_PORT2CONTROL15] not correct\r\n"); }
    898c:	4848      	ldr	r0, [pc, #288]	; (8ab0 <switch_configure+0x880>)
    898e:	4b12      	ldr	r3, [pc, #72]	; (89d8 <switch_configure+0x7a8>)
    8990:	4798      	blx	r3
    8992:	e677      	b.n	8684 <switch_configure+0x454>
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL15, 0x84)) { xprintf("[SPI_KSZ8794_PORT3CONTROL15] not correct\r\n"); }
    8994:	4847      	ldr	r0, [pc, #284]	; (8ab4 <switch_configure+0x884>)
    8996:	4b10      	ldr	r3, [pc, #64]	; (89d8 <switch_configure+0x7a8>)
    8998:	4798      	blx	r3
    899a:	e67a      	b.n	8692 <switch_configure+0x462>
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL15, 0x84)) { xprintf("[SPI_KSZ8794_PORT4CONTROL15] not correct\r\n"); }
    899c:	4846      	ldr	r0, [pc, #280]	; (8ab8 <switch_configure+0x888>)
    899e:	4b0e      	ldr	r3, [pc, #56]	; (89d8 <switch_configure+0x7a8>)
    89a0:	4798      	blx	r3
    89a2:	e67d      	b.n	86a0 <switch_configure+0x470>
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL16, 0x82)) { xprintf("[SPI_KSZ8794_PORT1CONTROL16] not correct\r\n"); }
    89a4:	4845      	ldr	r0, [pc, #276]	; (8abc <switch_configure+0x88c>)
    89a6:	4b0c      	ldr	r3, [pc, #48]	; (89d8 <switch_configure+0x7a8>)
    89a8:	4798      	blx	r3
    89aa:	e680      	b.n	86ae <switch_configure+0x47e>
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL16, 0x82)) { xprintf("[SPI_KSZ8794_PORT2CONTROL16] not correct\r\n"); }
    89ac:	4844      	ldr	r0, [pc, #272]	; (8ac0 <switch_configure+0x890>)
    89ae:	4b0a      	ldr	r3, [pc, #40]	; (89d8 <switch_configure+0x7a8>)
    89b0:	4798      	blx	r3
    89b2:	e683      	b.n	86bc <switch_configure+0x48c>
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL16, 0x82)) { xprintf("[SPI_KSZ8794_PORT3CONTROL16] not correct\r\n"); }
    89b4:	4843      	ldr	r0, [pc, #268]	; (8ac4 <switch_configure+0x894>)
    89b6:	4b08      	ldr	r3, [pc, #32]	; (89d8 <switch_configure+0x7a8>)
    89b8:	4798      	blx	r3
    89ba:	e686      	b.n	86ca <switch_configure+0x49a>
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL16, 0x82)) { xprintf("[SPI_KSZ8794_PORT4CONTROL16] not correct\r\n"); }
    89bc:	4842      	ldr	r0, [pc, #264]	; (8ac8 <switch_configure+0x898>)
    89be:	4b06      	ldr	r3, [pc, #24]	; (89d8 <switch_configure+0x7a8>)
    89c0:	4798      	blx	r3
    89c2:	e689      	b.n	86d8 <switch_configure+0x4a8>
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL17, 0x81)) { xprintf("[SPI_KSZ8794_PORT1CONTROL17] not correct\r\n"); }
    89c4:	4841      	ldr	r0, [pc, #260]	; (8acc <switch_configure+0x89c>)
    89c6:	4b04      	ldr	r3, [pc, #16]	; (89d8 <switch_configure+0x7a8>)
    89c8:	4798      	blx	r3
    89ca:	e68c      	b.n	86e6 <switch_configure+0x4b6>
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL17, 0x81)) { xprintf("[SPI_KSZ8794_PORT2CONTROL17] not correct\r\n"); }
    89cc:	4840      	ldr	r0, [pc, #256]	; (8ad0 <switch_configure+0x8a0>)
    89ce:	4b02      	ldr	r3, [pc, #8]	; (89d8 <switch_configure+0x7a8>)
    89d0:	4798      	blx	r3
    89d2:	e68f      	b.n	86f4 <switch_configure+0x4c4>
    89d4:	0000f50c 	.word	0x0000f50c
    89d8:	0000031d 	.word	0x0000031d
    89dc:	0000f538 	.word	0x0000f538
    89e0:	0000f564 	.word	0x0000f564
    89e4:	0000f590 	.word	0x0000f590
    89e8:	0000f5bc 	.word	0x0000f5bc
    89ec:	0000f5e8 	.word	0x0000f5e8
    89f0:	0000f614 	.word	0x0000f614
    89f4:	0000f640 	.word	0x0000f640
    89f8:	0000f66c 	.word	0x0000f66c
    89fc:	0000f698 	.word	0x0000f698
    8a00:	0000eca0 	.word	0x0000eca0
    8a04:	0000f6c4 	.word	0x0000f6c4
    8a08:	0000f6f0 	.word	0x0000f6f0
    8a0c:	0000f71c 	.word	0x0000f71c
    8a10:	0000f748 	.word	0x0000f748
    8a14:	0000f774 	.word	0x0000f774
    8a18:	0000f7a0 	.word	0x0000f7a0
    8a1c:	0000f7cc 	.word	0x0000f7cc
    8a20:	0000f7f8 	.word	0x0000f7f8
    8a24:	0000f824 	.word	0x0000f824
    8a28:	0000f850 	.word	0x0000f850
    8a2c:	0000f87c 	.word	0x0000f87c
    8a30:	0000f8a8 	.word	0x0000f8a8
    8a34:	0000f8d4 	.word	0x0000f8d4
    8a38:	0000f900 	.word	0x0000f900
    8a3c:	0000f92c 	.word	0x0000f92c
    8a40:	0000f958 	.word	0x0000f958
    8a44:	0000f984 	.word	0x0000f984
    8a48:	0000f9b0 	.word	0x0000f9b0
    8a4c:	0000f9dc 	.word	0x0000f9dc
    8a50:	0000fa08 	.word	0x0000fa08
    8a54:	0000fa34 	.word	0x0000fa34
    8a58:	0000fa5c 	.word	0x0000fa5c
    8a5c:	0000fa84 	.word	0x0000fa84
    8a60:	0000faac 	.word	0x0000faac
    8a64:	0000fad8 	.word	0x0000fad8
    8a68:	0000fb04 	.word	0x0000fb04
    8a6c:	0000fb30 	.word	0x0000fb30
    8a70:	0000fb5c 	.word	0x0000fb5c
    8a74:	0000fb88 	.word	0x0000fb88
    8a78:	0000fbb4 	.word	0x0000fbb4
    8a7c:	0000fbe0 	.word	0x0000fbe0
    8a80:	0000fc0c 	.word	0x0000fc0c
    8a84:	0000fc38 	.word	0x0000fc38
    8a88:	0000fc64 	.word	0x0000fc64
    8a8c:	0000fc90 	.word	0x0000fc90
    8a90:	0000fcbc 	.word	0x0000fcbc
    8a94:	0000fce8 	.word	0x0000fce8
    8a98:	0000fd14 	.word	0x0000fd14
    8a9c:	0000fd40 	.word	0x0000fd40
    8aa0:	0000fd6c 	.word	0x0000fd6c
    8aa4:	0000fd98 	.word	0x0000fd98
    8aa8:	0000fdc4 	.word	0x0000fdc4
    8aac:	0000fdf0 	.word	0x0000fdf0
    8ab0:	0000fe1c 	.word	0x0000fe1c
    8ab4:	0000fe48 	.word	0x0000fe48
    8ab8:	0000fe74 	.word	0x0000fe74
    8abc:	0000fea0 	.word	0x0000fea0
    8ac0:	0000fecc 	.word	0x0000fecc
    8ac4:	0000fef8 	.word	0x0000fef8
    8ac8:	0000ff24 	.word	0x0000ff24
    8acc:	0000ff50 	.word	0x0000ff50
    8ad0:	0000ff7c 	.word	0x0000ff7c
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL17, 0x81)) { xprintf("[SPI_KSZ8794_PORT3CONTROL17] not correct\r\n"); }
    8ad4:	4805      	ldr	r0, [pc, #20]	; (8aec <switch_configure+0x8bc>)
    8ad6:	4b06      	ldr	r3, [pc, #24]	; (8af0 <switch_configure+0x8c0>)
    8ad8:	4798      	blx	r3
    8ada:	e612      	b.n	8702 <switch_configure+0x4d2>
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL17, 0x81)) { xprintf("[SPI_KSZ8794_PORT4CONTROL17] not correct\r\n"); }
    8adc:	4805      	ldr	r0, [pc, #20]	; (8af4 <switch_configure+0x8c4>)
    8ade:	4b04      	ldr	r3, [pc, #16]	; (8af0 <switch_configure+0x8c0>)
    8ae0:	4798      	blx	r3
    8ae2:	e615      	b.n	8710 <switch_configure+0x4e0>
	if (!checkKSZreg(SPI_KSZ8794_START, 0x61))			{ xprintf("[SPI_KSZ8794_START final] not correct\r\n"); }
    8ae4:	4804      	ldr	r0, [pc, #16]	; (8af8 <switch_configure+0x8c8>)
    8ae6:	4b02      	ldr	r3, [pc, #8]	; (8af0 <switch_configure+0x8c0>)
    8ae8:	4798      	blx	r3
	/* Completed set-up commands to the KSZ Ethernet SWITCH via SPI bus */
}
    8aea:	e61f      	b.n	872c <switch_configure+0x4fc>
    8aec:	0000ffa8 	.word	0x0000ffa8
    8af0:	0000031d 	.word	0x0000031d
    8af4:	0000ffd4 	.word	0x0000ffd4
    8af8:	00010000 	.word	0x00010000

00008afc <address_configure>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: from the ID value, set the global IP address, IP scheme and MAC address
// Returns:     Nothing
// *****************************************************************************************************************************************************************
void address_configure(void)
{	
    8afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8b00:	b08d      	sub	sp, #52	; 0x34
	if (((CONFIG *)&settings_buffer)->ID == 0x00000000) {
    8b02:	4b77      	ldr	r3, [pc, #476]	; (8ce0 <address_configure+0x1e4>)
    8b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8b06:	2b00      	cmp	r3, #0
    8b08:	f000 80d5 	beq.w	8cb6 <address_configure+0x1ba>
		xprintf("MAC address and IP scheme not initialized as there is no [ID] set...\r\n");
		return;
	}
	
	/* Set the first 4-octets of the "MAC_PREFIX" for all the MultiSense boards */
	mac_raw[0] = macaddress.addr[0] = MAC_ADDR_00;
    8b0c:	4a75      	ldr	r2, [pc, #468]	; (8ce4 <address_configure+0x1e8>)
    8b0e:	27c2      	movs	r7, #194	; 0xc2
    8b10:	7017      	strb	r7, [r2, #0]
    8b12:	4c75      	ldr	r4, [pc, #468]	; (8ce8 <address_configure+0x1ec>)
    8b14:	7027      	strb	r7, [r4, #0]
	mac_raw[1] = macaddress.addr[1] = MAC_ADDR_01;
    8b16:	2650      	movs	r6, #80	; 0x50
    8b18:	7056      	strb	r6, [r2, #1]
    8b1a:	7066      	strb	r6, [r4, #1]
	mac_raw[2] = macaddress.addr[2] = (uint8_t)(((((CONFIG *)&settings_buffer)->ID) >> 24 & 0x00FF));
    8b1c:	0e1d      	lsrs	r5, r3, #24
    8b1e:	7095      	strb	r5, [r2, #2]
    8b20:	70a5      	strb	r5, [r4, #2]
	mac_raw[3] = macaddress.addr[3] = (uint8_t)(((((CONFIG *)&settings_buffer)->ID) >> 16) & 0x00FF);
    8b22:	f3c3 4007 	ubfx	r0, r3, #16, #8
    8b26:	70d0      	strb	r0, [r2, #3]
    8b28:	70e0      	strb	r0, [r4, #3]
	mac_raw[4] = macaddress.addr[4] = (uint8_t)(((((CONFIG *)&settings_buffer)->ID) >> 8) & 0x00FF);
    8b2a:	f3c3 2107 	ubfx	r1, r3, #8, #8
    8b2e:	7111      	strb	r1, [r2, #4]
    8b30:	7121      	strb	r1, [r4, #4]
    mac_raw[5] = macaddress.addr[5] = (uint8_t)((((CONFIG *)&settings_buffer)->ID) & 0x00FF);
    8b32:	b2db      	uxtb	r3, r3
    8b34:	7153      	strb	r3, [r2, #5]
    8b36:	7163      	strb	r3, [r4, #5]
	
	/* Update the uIP stack with these values */
	uip_setethaddr(macaddress);
    8b38:	4a6c      	ldr	r2, [pc, #432]	; (8cec <address_configure+0x1f0>)
    8b3a:	7017      	strb	r7, [r2, #0]
    8b3c:	7056      	strb	r6, [r2, #1]
    8b3e:	7095      	strb	r5, [r2, #2]
    8b40:	70d0      	strb	r0, [r2, #3]
    8b42:	7111      	strb	r1, [r2, #4]
    8b44:	7153      	strb	r3, [r2, #5]
		
	/* Start the main internal on-chip Ethernet MAC for the frames */
	mac_async_set_filter_ex(&ETHERNET_MAC_0, mac_raw);
    8b46:	4d6a      	ldr	r5, [pc, #424]	; (8cf0 <address_configure+0x1f4>)
    8b48:	4621      	mov	r1, r4
    8b4a:	4628      	mov	r0, r5
    8b4c:	4b69      	ldr	r3, [pc, #420]	; (8cf4 <address_configure+0x1f8>)
    8b4e:	4798      	blx	r3
	mac_async_enable(&ETHERNET_MAC_0);
    8b50:	4628      	mov	r0, r5
    8b52:	4b69      	ldr	r3, [pc, #420]	; (8cf8 <address_configure+0x1fc>)
    8b54:	4798      	blx	r3
	
	uip_ipaddr(&ipaddr, 192, 168, (uint8_t)((((CONFIG *)&settings_buffer)->ID) / 250), 1 + (uint8_t)((((CONFIG *)&settings_buffer)->ID) % 250));
    8b56:	4d69      	ldr	r5, [pc, #420]	; (8cfc <address_configure+0x200>)
    8b58:	f64a 00c0 	movw	r0, #43200	; 0xa8c0
    8b5c:	8028      	strh	r0, [r5, #0]
    8b5e:	4b60      	ldr	r3, [pc, #384]	; (8ce0 <address_configure+0x1e4>)
    8b60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    8b62:	4b67      	ldr	r3, [pc, #412]	; (8d00 <address_configure+0x204>)
    8b64:	fba3 2301 	umull	r2, r3, r3, r1
    8b68:	091a      	lsrs	r2, r3, #4
    8b6a:	23fa      	movs	r3, #250	; 0xfa
    8b6c:	fb03 1312 	mls	r3, r3, r2, r1
    8b70:	b2db      	uxtb	r3, r3
    8b72:	3301      	adds	r3, #1
    8b74:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    8b78:	b29b      	uxth	r3, r3
    8b7a:	0a1a      	lsrs	r2, r3, #8
    8b7c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    8b80:	b29b      	uxth	r3, r3
    8b82:	806b      	strh	r3, [r5, #2]

	/* Update the uIP stack with these values */
	uip_ipaddr(&gwaddr, 192, 168, 0, 1);									// IP address of CPU Server on installation network is always "192.168.0.1". This address can NOT be held by any Multi-Sense node
    8b84:	4e5f      	ldr	r6, [pc, #380]	; (8d04 <address_configure+0x208>)
    8b86:	8030      	strh	r0, [r6, #0]
    8b88:	f44f 7180 	mov.w	r1, #256	; 0x100
    8b8c:	8071      	strh	r1, [r6, #2]
	uip_ipaddr(&netmask, 255, 255, 0, 0);
    8b8e:	4f5e      	ldr	r7, [pc, #376]	; (8d08 <address_configure+0x20c>)
    8b90:	f64f 72ff 	movw	r2, #65535	; 0xffff
    8b94:	803a      	strh	r2, [r7, #0]
    8b96:	f04f 0e00 	mov.w	lr, #0
    8b9a:	f8a7 e002 	strh.w	lr, [r7, #2]
	uip_ipaddr(&broadcast, 255, 255, 255, 255);
    8b9e:	4f5b      	ldr	r7, [pc, #364]	; (8d0c <address_configure+0x210>)
    8ba0:	803a      	strh	r2, [r7, #0]
    8ba2:	807a      	strh	r2, [r7, #2]
	uip_sethostaddr(&ipaddr);
    8ba4:	4a5a      	ldr	r2, [pc, #360]	; (8d10 <address_configure+0x214>)
    8ba6:	8010      	strh	r0, [r2, #0]
    8ba8:	8053      	strh	r3, [r2, #2]
	uip_setnetmask(&netmask);
	uip_setnetmask(&gwaddr);
    8baa:	4b5a      	ldr	r3, [pc, #360]	; (8d14 <address_configure+0x218>)
    8bac:	8018      	strh	r0, [r3, #0]
    8bae:	8059      	strh	r1, [r3, #2]
	
	xprintf("MultiSense [init MAC/IP values] %x:%x:%x:%x:%x:%x %d.%d.%d.%d\r\n", mac_raw[0], mac_raw[1], mac_raw[2], mac_raw[3], mac_raw[4], mac_raw[5], uip_ipaddr2(ipaddr), uip_ipaddr1(ipaddr), uip_ipaddr4(ipaddr), uip_ipaddr3(ipaddr));
    8bb0:	7823      	ldrb	r3, [r4, #0]
    8bb2:	9308      	str	r3, [sp, #32]
    8bb4:	7862      	ldrb	r2, [r4, #1]
    8bb6:	9209      	str	r2, [sp, #36]	; 0x24
    8bb8:	f894 8002 	ldrb.w	r8, [r4, #2]
    8bbc:	f894 9003 	ldrb.w	r9, [r4, #3]
    8bc0:	f894 a004 	ldrb.w	sl, [r4, #4]
    8bc4:	f894 b005 	ldrb.w	fp, [r4, #5]
    8bc8:	4c53      	ldr	r4, [pc, #332]	; (8d18 <address_configure+0x21c>)
    8bca:	47a0      	blx	r4
    8bcc:	900a      	str	r0, [sp, #40]	; 0x28
    8bce:	8828      	ldrh	r0, [r5, #0]
    8bd0:	47a0      	blx	r4
    8bd2:	4607      	mov	r7, r0
    8bd4:	8868      	ldrh	r0, [r5, #2]
    8bd6:	47a0      	blx	r4
    8bd8:	900b      	str	r0, [sp, #44]	; 0x2c
    8bda:	8868      	ldrh	r0, [r5, #2]
    8bdc:	47a0      	blx	r4
    8bde:	f3c0 200f 	ubfx	r0, r0, #8, #16
    8be2:	9006      	str	r0, [sp, #24]
    8be4:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    8be8:	9305      	str	r3, [sp, #20]
    8bea:	f3c7 270f 	ubfx	r7, r7, #8, #16
    8bee:	9704      	str	r7, [sp, #16]
    8bf0:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    8bf4:	9303      	str	r3, [sp, #12]
    8bf6:	f8cd b008 	str.w	fp, [sp, #8]
    8bfa:	f8cd a004 	str.w	sl, [sp, #4]
    8bfe:	f8cd 9000 	str.w	r9, [sp]
    8c02:	4643      	mov	r3, r8
    8c04:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8c06:	9908      	ldr	r1, [sp, #32]
    8c08:	4844      	ldr	r0, [pc, #272]	; (8d1c <address_configure+0x220>)
    8c0a:	4d45      	ldr	r5, [pc, #276]	; (8d20 <address_configure+0x224>)
    8c0c:	47a8      	blx	r5
	
	/* Create and bind the main UDP socket for the MultiSense board */
	main_socket = uip_udp_new(&gwaddr, htons(MAIN_UDPSOCKET));
    8c0e:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
    8c12:	47a0      	blx	r4
    8c14:	4601      	mov	r1, r0
    8c16:	4630      	mov	r0, r6
    8c18:	4b42      	ldr	r3, [pc, #264]	; (8d24 <address_configure+0x228>)
    8c1a:	4798      	blx	r3
    8c1c:	4604      	mov	r4, r0
    8c1e:	4b42      	ldr	r3, [pc, #264]	; (8d28 <address_configure+0x22c>)
    8c20:	6018      	str	r0, [r3, #0]
	if (main_socket != NULL) {
    8c22:	2800      	cmp	r0, #0
    8c24:	d04b      	beq.n	8cbe <address_configure+0x1c2>
		uip_udp_bind(main_socket, htons(MAIN_UDPSOCKET));
    8c26:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
    8c2a:	4b3b      	ldr	r3, [pc, #236]	; (8d18 <address_configure+0x21c>)
    8c2c:	4798      	blx	r3
    8c2e:	80a0      	strh	r0, [r4, #4]
		xprintf("Main UDP socket created...\r\n");
    8c30:	483e      	ldr	r0, [pc, #248]	; (8d2c <address_configure+0x230>)
    8c32:	47a8      	blx	r5
	} else {
		xprintf("Main UDP socket ERROR!!!!!!!\r\n");
	}
	
	/* Create and bind the main UDP socket for the daughter-card on Slot [A] */
	cardA_socket = uip_udp_new(&gwaddr, htons(CARDA_UDPSOCKET));
    8c34:	f640 70a1 	movw	r0, #4001	; 0xfa1
    8c38:	4b37      	ldr	r3, [pc, #220]	; (8d18 <address_configure+0x21c>)
    8c3a:	4798      	blx	r3
    8c3c:	4601      	mov	r1, r0
    8c3e:	4831      	ldr	r0, [pc, #196]	; (8d04 <address_configure+0x208>)
    8c40:	4b38      	ldr	r3, [pc, #224]	; (8d24 <address_configure+0x228>)
    8c42:	4798      	blx	r3
    8c44:	4604      	mov	r4, r0
    8c46:	4b3a      	ldr	r3, [pc, #232]	; (8d30 <address_configure+0x234>)
    8c48:	6018      	str	r0, [r3, #0]
	if (cardA_socket != NULL) {
    8c4a:	2800      	cmp	r0, #0
    8c4c:	d03b      	beq.n	8cc6 <address_configure+0x1ca>
		uip_udp_bind(cardA_socket, htons(CARDA_UDPSOCKET));
    8c4e:	f640 70a1 	movw	r0, #4001	; 0xfa1
    8c52:	4b31      	ldr	r3, [pc, #196]	; (8d18 <address_configure+0x21c>)
    8c54:	4798      	blx	r3
    8c56:	80a0      	strh	r0, [r4, #4]
		xprintf("Card [A] UDP socket created...\r\n");
    8c58:	4836      	ldr	r0, [pc, #216]	; (8d34 <address_configure+0x238>)
    8c5a:	4b31      	ldr	r3, [pc, #196]	; (8d20 <address_configure+0x224>)
    8c5c:	4798      	blx	r3
	} else {
		xprintf("Card [A] UDP socket ERROR!!!!!!!\r\n");
	}
	
	/* Create and bind the main UDP socket for the daughter-card on Slot [B] */
	cardB_socket = uip_udp_new(&gwaddr, htons(CARDB_UDPSOCKET));
    8c5e:	f640 70a2 	movw	r0, #4002	; 0xfa2
    8c62:	4b2d      	ldr	r3, [pc, #180]	; (8d18 <address_configure+0x21c>)
    8c64:	4798      	blx	r3
    8c66:	4601      	mov	r1, r0
    8c68:	4826      	ldr	r0, [pc, #152]	; (8d04 <address_configure+0x208>)
    8c6a:	4b2e      	ldr	r3, [pc, #184]	; (8d24 <address_configure+0x228>)
    8c6c:	4798      	blx	r3
    8c6e:	4604      	mov	r4, r0
    8c70:	4b31      	ldr	r3, [pc, #196]	; (8d38 <address_configure+0x23c>)
    8c72:	6018      	str	r0, [r3, #0]
	if (cardB_socket != NULL) {
    8c74:	2800      	cmp	r0, #0
    8c76:	d02a      	beq.n	8cce <address_configure+0x1d2>
		uip_udp_bind(cardB_socket, htons(CARDB_UDPSOCKET));
    8c78:	f640 70a2 	movw	r0, #4002	; 0xfa2
    8c7c:	4b26      	ldr	r3, [pc, #152]	; (8d18 <address_configure+0x21c>)
    8c7e:	4798      	blx	r3
    8c80:	80a0      	strh	r0, [r4, #4]
		xprintf("Card [B] UDP socket created...\r\n");
    8c82:	482e      	ldr	r0, [pc, #184]	; (8d3c <address_configure+0x240>)
    8c84:	4b26      	ldr	r3, [pc, #152]	; (8d20 <address_configure+0x224>)
    8c86:	4798      	blx	r3
	} else {
		xprintf("Card [B] UDP socket ERROR!!!!!!!\r\n");
	}
	
	/* Create and bind the main UDP socket for the MAC address table FLUSH broadcast when controlling the network loop-topology */
	ring_socket = uip_udp_new(&broadcast, htons(RING_MANAGEMENT_SOCKET));
    8c88:	f640 70a3 	movw	r0, #4003	; 0xfa3
    8c8c:	4b22      	ldr	r3, [pc, #136]	; (8d18 <address_configure+0x21c>)
    8c8e:	4798      	blx	r3
    8c90:	4601      	mov	r1, r0
    8c92:	481e      	ldr	r0, [pc, #120]	; (8d0c <address_configure+0x210>)
    8c94:	4b23      	ldr	r3, [pc, #140]	; (8d24 <address_configure+0x228>)
    8c96:	4798      	blx	r3
    8c98:	4604      	mov	r4, r0
    8c9a:	4b29      	ldr	r3, [pc, #164]	; (8d40 <address_configure+0x244>)
    8c9c:	6018      	str	r0, [r3, #0]
	if (ring_socket != NULL) {
    8c9e:	b1d0      	cbz	r0, 8cd6 <address_configure+0x1da>
		uip_udp_bind(ring_socket, htons(RING_MANAGEMENT_SOCKET));
    8ca0:	f640 70a3 	movw	r0, #4003	; 0xfa3
    8ca4:	4b1c      	ldr	r3, [pc, #112]	; (8d18 <address_configure+0x21c>)
    8ca6:	4798      	blx	r3
    8ca8:	80a0      	strh	r0, [r4, #4]
		xprintf("Ring Management UDP socket created...\r\n");
    8caa:	4826      	ldr	r0, [pc, #152]	; (8d44 <address_configure+0x248>)
    8cac:	4b1c      	ldr	r3, [pc, #112]	; (8d20 <address_configure+0x224>)
    8cae:	4798      	blx	r3
	} else {
		xprintf("Ring Management UDP socket ERROR!!!!!!!\r\n");
	}
}
    8cb0:	b00d      	add	sp, #52	; 0x34
    8cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xprintf("MAC address and IP scheme not initialized as there is no [ID] set...\r\n");
    8cb6:	4824      	ldr	r0, [pc, #144]	; (8d48 <address_configure+0x24c>)
    8cb8:	4b19      	ldr	r3, [pc, #100]	; (8d20 <address_configure+0x224>)
    8cba:	4798      	blx	r3
		return;
    8cbc:	e7f8      	b.n	8cb0 <address_configure+0x1b4>
		xprintf("Main UDP socket ERROR!!!!!!!\r\n");
    8cbe:	4823      	ldr	r0, [pc, #140]	; (8d4c <address_configure+0x250>)
    8cc0:	4b17      	ldr	r3, [pc, #92]	; (8d20 <address_configure+0x224>)
    8cc2:	4798      	blx	r3
    8cc4:	e7b6      	b.n	8c34 <address_configure+0x138>
		xprintf("Card [A] UDP socket ERROR!!!!!!!\r\n");
    8cc6:	4822      	ldr	r0, [pc, #136]	; (8d50 <address_configure+0x254>)
    8cc8:	4b15      	ldr	r3, [pc, #84]	; (8d20 <address_configure+0x224>)
    8cca:	4798      	blx	r3
    8ccc:	e7c7      	b.n	8c5e <address_configure+0x162>
		xprintf("Card [B] UDP socket ERROR!!!!!!!\r\n");
    8cce:	4821      	ldr	r0, [pc, #132]	; (8d54 <address_configure+0x258>)
    8cd0:	4b13      	ldr	r3, [pc, #76]	; (8d20 <address_configure+0x224>)
    8cd2:	4798      	blx	r3
    8cd4:	e7d8      	b.n	8c88 <address_configure+0x18c>
		xprintf("Ring Management UDP socket ERROR!!!!!!!\r\n");
    8cd6:	4820      	ldr	r0, [pc, #128]	; (8d58 <address_configure+0x25c>)
    8cd8:	4b11      	ldr	r3, [pc, #68]	; (8d20 <address_configure+0x224>)
    8cda:	4798      	blx	r3
    8cdc:	e7e8      	b.n	8cb0 <address_configure+0x1b4>
    8cde:	bf00      	nop
    8ce0:	20007f2c 	.word	0x20007f2c
    8ce4:	20008550 	.word	0x20008550
    8ce8:	20007fac 	.word	0x20007fac
    8cec:	200072cc 	.word	0x200072cc
    8cf0:	2000752c 	.word	0x2000752c
    8cf4:	000019f9 	.word	0x000019f9
    8cf8:	0000193d 	.word	0x0000193d
    8cfc:	20007598 	.word	0x20007598
    8d00:	10624dd3 	.word	0x10624dd3
    8d04:	20008544 	.word	0x20008544
    8d08:	20007f28 	.word	0x20007f28
    8d0c:	20008574 	.word	0x20008574
    8d10:	20008650 	.word	0x20008650
    8d14:	2000864c 	.word	0x2000864c
    8d18:	0000cabd 	.word	0x0000cabd
    8d1c:	00010070 	.word	0x00010070
    8d20:	0000031d 	.word	0x0000031d
    8d24:	0000bc75 	.word	0x0000bc75
    8d28:	20007848 	.word	0x20007848
    8d2c:	000100b0 	.word	0x000100b0
    8d30:	20007594 	.word	0x20007594
    8d34:	000100f0 	.word	0x000100f0
    8d38:	20007f24 	.word	0x20007f24
    8d3c:	00010138 	.word	0x00010138
    8d40:	20008270 	.word	0x20008270
    8d44:	00010180 	.word	0x00010180
    8d48:	00010028 	.word	0x00010028
    8d4c:	000100d0 	.word	0x000100d0
    8d50:	00010114 	.word	0x00010114
    8d54:	0001015c 	.word	0x0001015c
    8d58:	000101a8 	.word	0x000101a8

00008d5c <gpio_init>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: define, set and configure the [GPIO] characteristics of the SAM CPU IC
// Returns:     Nothing
// *****************************************************************************************************************************************************************
void gpio_init(void)
{
    8d5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    8d60:	4b98      	ldr	r3, [pc, #608]	; (8fc4 <gpio_init+0x268>)
    8d62:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
	tmp &= ~PORT_PINCFG_PMUXEN;
    8d66:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    8d6a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    8d6e:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
	tmp &= ~PORT_PINCFG_PMUXEN;
    8d72:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    8d76:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    8d7a:	f893 20c3 	ldrb.w	r2, [r3, #195]	; 0xc3
	tmp &= ~PORT_PINCFG_PMUXEN;
    8d7e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    8d82:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    8d86:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
	tmp &= ~PORT_PINCFG_PMUXEN;
    8d8a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    8d8e:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    8d92:	f893 20c5 	ldrb.w	r2, [r3, #197]	; 0xc5
	tmp &= ~PORT_PINCFG_PMUXEN;
    8d96:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    8d9a:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    8d9e:	f893 20c6 	ldrb.w	r2, [r3, #198]	; 0xc6
	tmp &= ~PORT_PINCFG_PMUXEN;
    8da2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    8da6:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    8daa:	f893 20c7 	ldrb.w	r2, [r3, #199]	; 0xc7
	tmp &= ~PORT_PINCFG_PMUXEN;
    8dae:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    8db2:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    8db6:	f893 2140 	ldrb.w	r2, [r3, #320]	; 0x140
	tmp &= ~PORT_PINCFG_PMUXEN;
    8dba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    8dbe:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    8dc2:	f893 2141 	ldrb.w	r2, [r3, #321]	; 0x141
	tmp &= ~PORT_PINCFG_PMUXEN;
    8dc6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    8dca:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    8dce:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
	tmp &= ~PORT_PINCFG_PMUXEN;
    8dd2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    8dd6:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    8dda:	f893 20d9 	ldrb.w	r2, [r3, #217]	; 0xd9
	tmp &= ~PORT_PINCFG_PMUXEN;
    8dde:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    8de2:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    8de6:	f893 215b 	ldrb.w	r2, [r3, #347]	; 0x15b
	tmp &= ~PORT_PINCFG_PMUXEN;
    8dea:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    8dee:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    8df2:	f893 215c 	ldrb.w	r2, [r3, #348]	; 0x15c
	tmp &= ~PORT_PINCFG_PMUXEN;
    8df6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    8dfa:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    8dfe:	2101      	movs	r1, #1
    8e00:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    8e04:	4a70      	ldr	r2, [pc, #448]	; (8fc8 <gpio_init+0x26c>)
    8e06:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    8e0a:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    8e0e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    8e12:	2004      	movs	r0, #4
    8e14:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    8e18:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    8e1c:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
    8e20:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
    8e24:	4869      	ldr	r0, [pc, #420]	; (8fcc <gpio_init+0x270>)
    8e26:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    8e2a:	f04f 0e08 	mov.w	lr, #8
    8e2e:	f8c3 e088 	str.w	lr, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    8e32:	4c67      	ldr	r4, [pc, #412]	; (8fd0 <gpio_init+0x274>)
    8e34:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
    8e38:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    8e3c:	2710      	movs	r7, #16
    8e3e:	f8c3 7088 	str.w	r7, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    8e42:	3408      	adds	r4, #8
    8e44:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
    8e48:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    8e4c:	2620      	movs	r6, #32
    8e4e:	f8c3 6088 	str.w	r6, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    8e52:	3410      	adds	r4, #16
    8e54:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
    8e58:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    8e5c:	2540      	movs	r5, #64	; 0x40
    8e5e:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    8e62:	3420      	adds	r4, #32
    8e64:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
    8e68:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    8e6c:	2480      	movs	r4, #128	; 0x80
    8e6e:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    8e72:	f8df c16c 	ldr.w	ip, [pc, #364]	; 8fe0 <gpio_init+0x284>
    8e76:	f8c3 c0a8 	str.w	ip, [r3, #168]	; 0xa8
    8e7a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    8e7e:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    8e82:	4a54      	ldr	r2, [pc, #336]	; (8fd4 <gpio_init+0x278>)
    8e84:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    8e88:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    8e8c:	2202      	movs	r2, #2
    8e8e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    8e92:	f8df c150 	ldr.w	ip, [pc, #336]	; 8fe4 <gpio_init+0x288>
    8e96:	f8c3 c128 	str.w	ip, [r3, #296]	; 0x128
    8e9a:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    8e9e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    8ea2:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    8ea6:	484c      	ldr	r0, [pc, #304]	; (8fd8 <gpio_init+0x27c>)
    8ea8:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
    8eac:	f10c 4c00 	add.w	ip, ip, #2147483648	; 0x80000000
    8eb0:	f10c 0cfe 	add.w	ip, ip, #254	; 0xfe
    8eb4:	f8c3 c0a8 	str.w	ip, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    8eb8:	f04f 7c00 	mov.w	ip, #33554432	; 0x2000000
    8ebc:	f8c3 c088 	str.w	ip, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    8ec0:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    8ec4:	f8c3 80a8 	str.w	r8, [r3, #168]	; 0xa8
    8ec8:	f8df 911c 	ldr.w	r9, [pc, #284]	; 8fe8 <gpio_init+0x28c>
    8ecc:	f8c3 90a8 	str.w	r9, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    8ed0:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
    8ed4:	f8c3 9104 	str.w	r9, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    8ed8:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
    8edc:	483f      	ldr	r0, [pc, #252]	; (8fdc <gpio_init+0x280>)
    8ede:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    8ee2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    8ee6:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    8eea:	f8c3 8128 	str.w	r8, [r3, #296]	; 0x128
    8eee:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8fec <gpio_init+0x290>
    8ef2:	f8c3 8128 	str.w	r8, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    8ef6:	f893 80c0 	ldrb.w	r8, [r3, #192]	; 0xc0
    8efa:	f008 08fb 	and.w	r8, r8, #251	; 0xfb
    8efe:	f883 80c0 	strb.w	r8, [r3, #192]	; 0xc0
    8f02:	f893 80c2 	ldrb.w	r8, [r3, #194]	; 0xc2
    8f06:	f008 08fb 	and.w	r8, r8, #251	; 0xfb
    8f0a:	f883 80c2 	strb.w	r8, [r3, #194]	; 0xc2
    8f0e:	f893 80c3 	ldrb.w	r8, [r3, #195]	; 0xc3
    8f12:	f008 08fb 	and.w	r8, r8, #251	; 0xfb
    8f16:	f883 80c3 	strb.w	r8, [r3, #195]	; 0xc3
    8f1a:	f893 80c4 	ldrb.w	r8, [r3, #196]	; 0xc4
    8f1e:	f008 08fb 	and.w	r8, r8, #251	; 0xfb
    8f22:	f883 80c4 	strb.w	r8, [r3, #196]	; 0xc4
    8f26:	f893 80c5 	ldrb.w	r8, [r3, #197]	; 0xc5
    8f2a:	f008 08fb 	and.w	r8, r8, #251	; 0xfb
    8f2e:	f883 80c5 	strb.w	r8, [r3, #197]	; 0xc5
    8f32:	f893 80c6 	ldrb.w	r8, [r3, #198]	; 0xc6
    8f36:	f008 08fb 	and.w	r8, r8, #251	; 0xfb
    8f3a:	f883 80c6 	strb.w	r8, [r3, #198]	; 0xc6
    8f3e:	f893 80c7 	ldrb.w	r8, [r3, #199]	; 0xc7
    8f42:	f008 08fb 	and.w	r8, r8, #251	; 0xfb
    8f46:	f883 80c7 	strb.w	r8, [r3, #199]	; 0xc7
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    8f4a:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    8f4e:	f893 8140 	ldrb.w	r8, [r3, #320]	; 0x140
    8f52:	f048 0804 	orr.w	r8, r8, #4
    8f56:	f883 8140 	strb.w	r8, [r3, #320]	; 0x140
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    8f5a:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    8f5e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    8f62:	f893 1141 	ldrb.w	r1, [r3, #321]	; 0x141
    8f66:	f041 0104 	orr.w	r1, r1, #4
    8f6a:	f883 1141 	strb.w	r1, [r3, #321]	; 0x141
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    8f6e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    8f72:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
    8f76:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    8f7a:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
    8f7e:	f893 20d9 	ldrb.w	r2, [r3, #217]	; 0xd9
    8f82:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    8f86:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
    8f8a:	f893 215b 	ldrb.w	r2, [r3, #347]	; 0x15b
    8f8e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    8f92:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
    8f96:	f893 215c 	ldrb.w	r2, [r3, #348]	; 0x15c
    8f9a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    8f9e:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    8fa2:	f8c3 e094 	str.w	lr, [r3, #148]	; 0x94
    8fa6:	f8c3 7094 	str.w	r7, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    8faa:	f8c3 6098 	str.w	r6, [r3, #152]	; 0x98
    8fae:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
    8fb2:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    8fb6:	f8c3 c094 	str.w	ip, [r3, #148]	; 0x94
    8fba:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
    8fbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    8fc2:	bf00      	nop
    8fc4:	41008000 	.word	0x41008000
    8fc8:	40000001 	.word	0x40000001
    8fcc:	c0020000 	.word	0xc0020000
    8fd0:	40000008 	.word	0x40000008
    8fd4:	40020001 	.word	0x40020001
    8fd8:	40020000 	.word	0x40020000
    8fdc:	c0020800 	.word	0xc0020800
    8fe0:	40000080 	.word	0x40000080
    8fe4:	40020002 	.word	0x40020002
    8fe8:	c0000200 	.word	0xc0000200
    8fec:	c0001000 	.word	0xc0001000

00008ff0 <watchdog_init>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: setup, initialize and start the watchdog code timer
// Returns:     Nothing
// *****************************************************************************************************************************************************************
void watchdog_init(void)
{	
    8ff0:	b570      	push	{r4, r5, r6, lr}
 * \retval -2 Invalid timeout period.
 */
static inline int32_t wdt_set_timeout_period(struct wdt_descriptor *const wdt, const uint32_t clk_rate,
                                             const uint16_t timeout_period)
{
	ASSERT(wdt && wdt->dev.hw);
    8ff2:	4e0e      	ldr	r6, [pc, #56]	; (902c <watchdog_init+0x3c>)
    8ff4:	4c0e      	ldr	r4, [pc, #56]	; (9030 <watchdog_init+0x40>)
    8ff6:	6820      	ldr	r0, [r4, #0]
    8ff8:	226f      	movs	r2, #111	; 0x6f
    8ffa:	4631      	mov	r1, r6
    8ffc:	3000      	adds	r0, #0
    8ffe:	bf18      	it	ne
    9000:	2001      	movne	r0, #1
    9002:	4d0c      	ldr	r5, [pc, #48]	; (9034 <watchdog_init+0x44>)
    9004:	47a8      	blx	r5

	return _wdt_set_timeout_period(&wdt->dev, clk_rate, timeout_period);
    9006:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    900a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    900e:	4620      	mov	r0, r4
    9010:	4b09      	ldr	r3, [pc, #36]	; (9038 <watchdog_init+0x48>)
    9012:	4798      	blx	r3
 * \return Operation status of init
 * \retval 0  Completed sucessfully.
 */
static inline int32_t wdt_enable(struct wdt_descriptor *const wdt)
{
	ASSERT(wdt && wdt->dev.hw);
    9014:	6820      	ldr	r0, [r4, #0]
    9016:	228c      	movs	r2, #140	; 0x8c
    9018:	4631      	mov	r1, r6
    901a:	3000      	adds	r0, #0
    901c:	bf18      	it	ne
    901e:	2001      	movne	r0, #1
    9020:	47a8      	blx	r5

	return _wdt_enable(&wdt->dev);
    9022:	4620      	mov	r0, r4
    9024:	4b05      	ldr	r3, [pc, #20]	; (903c <watchdog_init+0x4c>)
    9026:	4798      	blx	r3
    9028:	bd70      	pop	{r4, r5, r6, pc}
    902a:	bf00      	nop
    902c:	0000ee70 	.word	0x0000ee70
    9030:	20007474 	.word	0x20007474
    9034:	0000272d 	.word	0x0000272d
    9038:	0000535d 	.word	0x0000535d
    903c:	00005455 	.word	0x00005455

00009040 <var_init>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: reset all global variables
// Returns:     Nothing
// *****************************************************************************************************************************************************************
void var_init(void)
{
    9040:	b570      	push	{r4, r5, r6, lr}
	/* Set all the main global variables to zero to initialize the states before nay further code executes that relies on the initialization process at the start */
	tick_counter = 0;
    9042:	2200      	movs	r2, #0
    9044:	4b5b      	ldr	r3, [pc, #364]	; (91b4 <var_init+0x174>)
    9046:	601a      	str	r2, [r3, #0]
	readenvironment = 0;
    9048:	4b5b      	ldr	r3, [pc, #364]	; (91b8 <var_init+0x178>)
    904a:	701a      	strb	r2, [r3, #0]
	arp_check = 0;
    904c:	4b5b      	ldr	r3, [pc, #364]	; (91bc <var_init+0x17c>)
    904e:	701a      	strb	r2, [r3, #0]
	ip_periodic_check = 0;
    9050:	4b5b      	ldr	r3, [pc, #364]	; (91c0 <var_init+0x180>)
    9052:	701a      	strb	r2, [r3, #0]
	ring_timer = 0;
    9054:	4b5b      	ldr	r3, [pc, #364]	; (91c4 <var_init+0x184>)
    9056:	701a      	strb	r2, [r3, #0]
	ring = 0;
    9058:	4b5b      	ldr	r3, [pc, #364]	; (91c8 <var_init+0x188>)
    905a:	701a      	strb	r2, [r3, #0]

	sentA = 0;
    905c:	4b5b      	ldr	r3, [pc, #364]	; (91cc <var_init+0x18c>)
    905e:	701a      	strb	r2, [r3, #0]
	sentB = 0;
    9060:	4b5b      	ldr	r3, [pc, #364]	; (91d0 <var_init+0x190>)
    9062:	701a      	strb	r2, [r3, #0]
	reboot_actioned = 0;
    9064:	4b5b      	ldr	r3, [pc, #364]	; (91d4 <var_init+0x194>)
    9066:	701a      	strb	r2, [r3, #0]
	send_relearn_udp = 0;
    9068:	4b5b      	ldr	r3, [pc, #364]	; (91d8 <var_init+0x198>)
    906a:	701a      	strb	r2, [r3, #0]
	refresh_gain = 0;
    906c:	4b5b      	ldr	r3, [pc, #364]	; (91dc <var_init+0x19c>)
    906e:	701a      	strb	r2, [r3, #0]
	
	cardA_old = 0;
    9070:	4b5b      	ldr	r3, [pc, #364]	; (91e0 <var_init+0x1a0>)
    9072:	701a      	strb	r2, [r3, #0]
	cardB_old = 0;
    9074:	4b5b      	ldr	r3, [pc, #364]	; (91e4 <var_init+0x1a4>)
    9076:	701a      	strb	r2, [r3, #0]
	card_sampleindex = 0;
    9078:	4b5b      	ldr	r3, [pc, #364]	; (91e8 <var_init+0x1a8>)
    907a:	601a      	str	r2, [r3, #0]
	good_ethernet = 0;
    907c:	4b5b      	ldr	r3, [pc, #364]	; (91ec <var_init+0x1ac>)
    907e:	701a      	strb	r2, [r3, #0]
	stormstate = 0;
    9080:	4b5b      	ldr	r3, [pc, #364]	; (91f0 <var_init+0x1b0>)
    9082:	701a      	strb	r2, [r3, #0]
	link_port1 = 0;
    9084:	4b5b      	ldr	r3, [pc, #364]	; (91f4 <var_init+0x1b4>)
    9086:	701a      	strb	r2, [r3, #0]
	link_port2 = 0;
    9088:	4b5b      	ldr	r3, [pc, #364]	; (91f8 <var_init+0x1b8>)
    908a:	701a      	strb	r2, [r3, #0]
	link_port3 = 0;
    908c:	4b5b      	ldr	r3, [pc, #364]	; (91fc <var_init+0x1bc>)
    908e:	701a      	strb	r2, [r3, #0]
	old_tamper = 0;
    9090:	4b5b      	ldr	r3, [pc, #364]	; (9200 <var_init+0x1c0>)
    9092:	701a      	strb	r2, [r3, #0]
	old_link_port1 = 0;
    9094:	4b5b      	ldr	r3, [pc, #364]	; (9204 <var_init+0x1c4>)
    9096:	701a      	strb	r2, [r3, #0]
	old_link_port2 = 0;
    9098:	4b5b      	ldr	r3, [pc, #364]	; (9208 <var_init+0x1c8>)
    909a:	701a      	strb	r2, [r3, #0]
	old_link_port3 = 0;
    909c:	4b5b      	ldr	r3, [pc, #364]	; (920c <var_init+0x1cc>)
    909e:	701a      	strb	r2, [r3, #0]
	readdata_water1 = 0;
    90a0:	4b5b      	ldr	r3, [pc, #364]	; (9210 <var_init+0x1d0>)
    90a2:	701a      	strb	r2, [r3, #0]
	readdata_water2 = 0;
    90a4:	4b5b      	ldr	r3, [pc, #364]	; (9214 <var_init+0x1d4>)
    90a6:	701a      	strb	r2, [r3, #0]
	highvoltage = 0;
    90a8:	4b5b      	ldr	r3, [pc, #364]	; (9218 <var_init+0x1d8>)
    90aa:	701a      	strb	r2, [r3, #0]
	read_hardware_index = 0;
    90ac:	4b5b      	ldr	r3, [pc, #364]	; (921c <var_init+0x1dc>)
    90ae:	701a      	strb	r2, [r3, #0]
	looprate = 0;
    90b0:	4b5b      	ldr	r3, [pc, #364]	; (9220 <var_init+0x1e0>)
    90b2:	601a      	str	r2, [r3, #0]
	loopcount = 0;
    90b4:	4b5b      	ldr	r3, [pc, #364]	; (9224 <var_init+0x1e4>)
    90b6:	601a      	str	r2, [r3, #0]
	miniA_chan = 0;
    90b8:	4b5b      	ldr	r3, [pc, #364]	; (9228 <var_init+0x1e8>)
    90ba:	701a      	strb	r2, [r3, #0]
	miniB_chan = 0;
    90bc:	4b5b      	ldr	r3, [pc, #364]	; (922c <var_init+0x1ec>)
    90be:	701a      	strb	r2, [r3, #0]
	miniIO_A1_adcH = 0;
    90c0:	4b5b      	ldr	r3, [pc, #364]	; (9230 <var_init+0x1f0>)
    90c2:	701a      	strb	r2, [r3, #0]
	miniIO_A1_adcL = 0;
    90c4:	4b5b      	ldr	r3, [pc, #364]	; (9234 <var_init+0x1f4>)
    90c6:	701a      	strb	r2, [r3, #0]
	miniIO_A0_adcH = 0;
    90c8:	4b5b      	ldr	r3, [pc, #364]	; (9238 <var_init+0x1f8>)
    90ca:	701a      	strb	r2, [r3, #0]
	miniIO_A0_adcL = 0;
    90cc:	4b5b      	ldr	r3, [pc, #364]	; (923c <var_init+0x1fc>)
    90ce:	701a      	strb	r2, [r3, #0]
	miniIO_A_relay = 0;
    90d0:	4b5b      	ldr	r3, [pc, #364]	; (9240 <var_init+0x200>)
    90d2:	701a      	strb	r2, [r3, #0]
	miniIO_A_inputs = 0;
    90d4:	4b5b      	ldr	r3, [pc, #364]	; (9244 <var_init+0x204>)
    90d6:	701a      	strb	r2, [r3, #0]
	miniIO_B1_adcH = 0;
    90d8:	4b5b      	ldr	r3, [pc, #364]	; (9248 <var_init+0x208>)
    90da:	701a      	strb	r2, [r3, #0]
	miniIO_B1_adcL = 0;
    90dc:	4b5b      	ldr	r3, [pc, #364]	; (924c <var_init+0x20c>)
    90de:	701a      	strb	r2, [r3, #0]
	miniIO_B0_adcH = 0;
    90e0:	4b5b      	ldr	r3, [pc, #364]	; (9250 <var_init+0x210>)
    90e2:	701a      	strb	r2, [r3, #0]
	miniIO_B0_adcL = 0;
    90e4:	4b5b      	ldr	r3, [pc, #364]	; (9254 <var_init+0x214>)
    90e6:	701a      	strb	r2, [r3, #0]
	miniIO_B_relay = 0;
    90e8:	4b5b      	ldr	r3, [pc, #364]	; (9258 <var_init+0x218>)
    90ea:	701a      	strb	r2, [r3, #0]
	miniIO_B_inputs = 0;
    90ec:	4b5b      	ldr	r3, [pc, #364]	; (925c <var_init+0x21c>)
    90ee:	701a      	strb	r2, [r3, #0]
	
	/* Set the enumerated type variables such as the daughter card types and the network loop ring-topology management state */
	cardA_type = CARD_NOTFITTED;
    90f0:	4b5b      	ldr	r3, [pc, #364]	; (9260 <var_init+0x220>)
    90f2:	701a      	strb	r2, [r3, #0]
	cardB_type = CARD_NOTFITTED;
    90f4:	4b5b      	ldr	r3, [pc, #364]	; (9264 <var_init+0x224>)
    90f6:	701a      	strb	r2, [r3, #0]
	ring_broken = RING_NOTCONFIGURED;
    90f8:	2102      	movs	r1, #2
    90fa:	4b5b      	ldr	r3, [pc, #364]	; (9268 <var_init+0x228>)
    90fc:	7019      	strb	r1, [r3, #0]
	
	/* Also, read out the non-volatile EEprom configuration data */
	if (EEprom_settings(settings_buffer, SETTING_STRUCTURE_SIZE, 0) != ERR_NONE) {
    90fe:	2180      	movs	r1, #128	; 0x80
    9100:	485a      	ldr	r0, [pc, #360]	; (926c <var_init+0x22c>)
    9102:	4b5b      	ldr	r3, [pc, #364]	; (9270 <var_init+0x230>)
    9104:	4798      	blx	r3
    9106:	2800      	cmp	r0, #0
    9108:	d140      	bne.n	918c <var_init+0x14c>
		xprintf("MultiSense [configuration ERROR READING]\r\n");
	}
	
	/* Check if the configuration data is invalid and needs defaulting */
	if ((((CONFIG *)&settings_buffer)->pattern1 != CONFIG_IDENTIFIER1) || (((CONFIG *)&settings_buffer)->pattern2 != CONFIG_IDENTIFIER2) || (!(((CONFIG *)&settings_buffer)->ID)) || (((CONFIG *)&settings_buffer)->ID > 0x8000)) {
    910a:	4b58      	ldr	r3, [pc, #352]	; (926c <var_init+0x22c>)
    910c:	681a      	ldr	r2, [r3, #0]
    910e:	4b59      	ldr	r3, [pc, #356]	; (9274 <var_init+0x234>)
    9110:	429a      	cmp	r2, r3
    9112:	d03f      	beq.n	9194 <var_init+0x154>
		xprintf("MultiSense [configuration INVALID]\r\n");
    9114:	4858      	ldr	r0, [pc, #352]	; (9278 <var_init+0x238>)
    9116:	4e59      	ldr	r6, [pc, #356]	; (927c <var_init+0x23c>)
    9118:	47b0      	blx	r6
		
		/* Re-write default values ready for write-back */
		((CONFIG *)&settings_buffer)->pattern1 = CONFIG_IDENTIFIER1;
    911a:	4c54      	ldr	r4, [pc, #336]	; (926c <var_init+0x22c>)
    911c:	2500      	movs	r5, #0
    911e:	2376      	movs	r3, #118	; 0x76
    9120:	7023      	strb	r3, [r4, #0]
    9122:	2336      	movs	r3, #54	; 0x36
    9124:	7063      	strb	r3, [r4, #1]
    9126:	2345      	movs	r3, #69	; 0x45
    9128:	70a3      	strb	r3, [r4, #2]
    912a:	f06f 0301 	mvn.w	r3, #1
    912e:	70e3      	strb	r3, [r4, #3]
		((CONFIG *)&settings_buffer)->pattern2 = CONFIG_IDENTIFIER2;
    9130:	f06f 0343 	mvn.w	r3, #67	; 0x43
    9134:	7123      	strb	r3, [r4, #4]
    9136:	f06f 0315 	mvn.w	r3, #21
    913a:	7163      	strb	r3, [r4, #5]
    913c:	237d      	movs	r3, #125	; 0x7d
    913e:	71a3      	strb	r3, [r4, #6]
    9140:	f06f 036c 	mvn.w	r3, #108	; 0x6c
    9144:	71e3      	strb	r3, [r4, #7]
		strncpy((char *__restrict)(((CONFIG *)&settings_buffer)->name), "MULTISENSE NEEDS CONFIGURING...", sizeof(((CONFIG *)&settings_buffer)->name));
    9146:	2221      	movs	r2, #33	; 0x21
    9148:	494d      	ldr	r1, [pc, #308]	; (9280 <var_init+0x240>)
    914a:	f104 0008 	add.w	r0, r4, #8
    914e:	4b4d      	ldr	r3, [pc, #308]	; (9284 <var_init+0x244>)
    9150:	4798      	blx	r3
		((CONFIG *)&settings_buffer)->ID = 0x8000;
    9152:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
    9156:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    915a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    915e:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
    9162:	f884 502f 	strb.w	r5, [r4, #47]	; 0x2f
		((CONFIG *)&settings_buffer)->gain_cardA = 0xFF;
    9166:	23ff      	movs	r3, #255	; 0xff
    9168:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
		((CONFIG *)&settings_buffer)->gain_cardB = 0xFF;
    916c:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
		((CONFIG *)&settings_buffer)->loop_basestation = 0;
    9170:	f884 502b 	strb.w	r5, [r4, #43]	; 0x2b
		
		xprintf("MultiSense [configuration FORMATTED]\r\n");
    9174:	4844      	ldr	r0, [pc, #272]	; (9288 <var_init+0x248>)
    9176:	47b0      	blx	r6
		
		/* Write these values back to the EEprom storage area */
		if (EEprom_settings(settings_buffer, SETTING_STRUCTURE_SIZE, 1) != ERR_NONE) {
    9178:	2201      	movs	r2, #1
    917a:	2180      	movs	r1, #128	; 0x80
    917c:	4620      	mov	r0, r4
    917e:	4b3c      	ldr	r3, [pc, #240]	; (9270 <var_init+0x230>)
    9180:	4798      	blx	r3
    9182:	b998      	cbnz	r0, 91ac <var_init+0x16c>
			xprintf("MultiSense [configuration ERROR WRITING]\r\n");
		} else {
			xprintf("MultiSense [configuration WRITTEN]\r\n");
    9184:	4841      	ldr	r0, [pc, #260]	; (928c <var_init+0x24c>)
    9186:	4b3d      	ldr	r3, [pc, #244]	; (927c <var_init+0x23c>)
    9188:	4798      	blx	r3
    918a:	bd70      	pop	{r4, r5, r6, pc}
		xprintf("MultiSense [configuration ERROR READING]\r\n");
    918c:	4840      	ldr	r0, [pc, #256]	; (9290 <var_init+0x250>)
    918e:	4b3b      	ldr	r3, [pc, #236]	; (927c <var_init+0x23c>)
    9190:	4798      	blx	r3
    9192:	e7ba      	b.n	910a <var_init+0xca>
	if ((((CONFIG *)&settings_buffer)->pattern1 != CONFIG_IDENTIFIER1) || (((CONFIG *)&settings_buffer)->pattern2 != CONFIG_IDENTIFIER2) || (!(((CONFIG *)&settings_buffer)->ID)) || (((CONFIG *)&settings_buffer)->ID > 0x8000)) {
    9194:	4b35      	ldr	r3, [pc, #212]	; (926c <var_init+0x22c>)
    9196:	685a      	ldr	r2, [r3, #4]
    9198:	4b3e      	ldr	r3, [pc, #248]	; (9294 <var_init+0x254>)
    919a:	429a      	cmp	r2, r3
    919c:	d1ba      	bne.n	9114 <var_init+0xd4>
    919e:	4b33      	ldr	r3, [pc, #204]	; (926c <var_init+0x22c>)
    91a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    91a2:	3b01      	subs	r3, #1
    91a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    91a8:	d3ef      	bcc.n	918a <var_init+0x14a>
    91aa:	e7b3      	b.n	9114 <var_init+0xd4>
			xprintf("MultiSense [configuration ERROR WRITING]\r\n");
    91ac:	483a      	ldr	r0, [pc, #232]	; (9298 <var_init+0x258>)
    91ae:	47b0      	blx	r6
    91b0:	bd70      	pop	{r4, r5, r6, pc}
    91b2:	bf00      	nop
    91b4:	2000855c 	.word	0x2000855c
    91b8:	2000826c 	.word	0x2000826c
    91bc:	20007fbe 	.word	0x20007fbe
    91c0:	20007860 	.word	0x20007860
    91c4:	20008279 	.word	0x20008279
    91c8:	20008558 	.word	0x20008558
    91cc:	20007fbc 	.word	0x20007fbc
    91d0:	20007588 	.word	0x20007588
    91d4:	20007fbf 	.word	0x20007fbf
    91d8:	20008275 	.word	0x20008275
    91dc:	20008561 	.word	0x20008561
    91e0:	20007577 	.word	0x20007577
    91e4:	2000784d 	.word	0x2000784d
    91e8:	20008548 	.word	0x20008548
    91ec:	2000757d 	.word	0x2000757d
    91f0:	20008560 	.word	0x20008560
    91f4:	20007575 	.word	0x20007575
    91f8:	20008294 	.word	0x20008294
    91fc:	20007579 	.word	0x20007579
    9200:	2000854c 	.word	0x2000854c
    9204:	20007589 	.word	0x20007589
    9208:	20007574 	.word	0x20007574
    920c:	20008278 	.word	0x20008278
    9210:	20008562 	.word	0x20008562
    9214:	2000854d 	.word	0x2000854d
    9218:	20008557 	.word	0x20008557
    921c:	2000757e 	.word	0x2000757e
    9220:	20008578 	.word	0x20008578
    9224:	2000758c 	.word	0x2000758c
    9228:	2000757a 	.word	0x2000757a
    922c:	20008276 	.word	0x20008276
    9230:	20008277 	.word	0x20008277
    9234:	20007fb2 	.word	0x20007fb2
    9238:	20007c6c 	.word	0x20007c6c
    923c:	20008556 	.word	0x20008556
    9240:	20007fb4 	.word	0x20007fb4
    9244:	20007578 	.word	0x20007578
    9248:	20007590 	.word	0x20007590
    924c:	20008563 	.word	0x20008563
    9250:	20007fbd 	.word	0x20007fbd
    9254:	20007c6d 	.word	0x20007c6d
    9258:	20007f1c 	.word	0x20007f1c
    925c:	20008274 	.word	0x20008274
    9260:	20007c6e 	.word	0x20007c6e
    9264:	20008564 	.word	0x20008564
    9268:	2000826d 	.word	0x2000826d
    926c:	20007f2c 	.word	0x20007f2c
    9270:	0000dafd 	.word	0x0000dafd
    9274:	fe453676 	.word	0xfe453676
    9278:	00010200 	.word	0x00010200
    927c:	0000031d 	.word	0x0000031d
    9280:	00010228 	.word	0x00010228
    9284:	0000dd61 	.word	0x0000dd61
    9288:	00010248 	.word	0x00010248
    928c:	0001029c 	.word	0x0001029c
    9290:	000101d4 	.word	0x000101d4
    9294:	937deabc 	.word	0x937deabc
    9298:	00010270 	.word	0x00010270

0000929c <tx_callb>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: INTERCEPT HOOK STUB for <UART_1>
// Returns:     Nothing (NULL)
// *****************************************************************************************************************************************************************
void tx_callb(const struct usart_async_descriptor *const descr)
{
    929c:	4770      	bx	lr

0000929e <rx_callb>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: INTERCEPT HOOK STUB for <UART_1>
// Returns:     Nothing (NULL)
// *****************************************************************************************************************************************************************
void rx_callb(const struct usart_async_descriptor *const descr)
{
    929e:	4770      	bx	lr

000092a0 <wdt_disable>:
 * \return Operation status of init
 * \retval 0  Completed sucessfully.
 * \retval -1 Always on, can't disable.
 */
static inline int32_t wdt_disable(struct wdt_descriptor *const wdt)
{
    92a0:	b510      	push	{r4, lr}
	ASSERT(wdt && wdt->dev.hw);
    92a2:	4604      	mov	r4, r0
    92a4:	b158      	cbz	r0, 92be <wdt_disable+0x1e>
    92a6:	6800      	ldr	r0, [r0, #0]
    92a8:	3000      	adds	r0, #0
    92aa:	bf18      	it	ne
    92ac:	2001      	movne	r0, #1
    92ae:	229b      	movs	r2, #155	; 0x9b
    92b0:	4904      	ldr	r1, [pc, #16]	; (92c4 <wdt_disable+0x24>)
    92b2:	4b05      	ldr	r3, [pc, #20]	; (92c8 <wdt_disable+0x28>)
    92b4:	4798      	blx	r3

	return _wdt_disable(&wdt->dev);
    92b6:	4620      	mov	r0, r4
    92b8:	4b04      	ldr	r3, [pc, #16]	; (92cc <wdt_disable+0x2c>)
    92ba:	4798      	blx	r3
}
    92bc:	bd10      	pop	{r4, pc}
    92be:	2000      	movs	r0, #0
    92c0:	e7f5      	b.n	92ae <wdt_disable+0xe>
    92c2:	bf00      	nop
    92c4:	0000ee70 	.word	0x0000ee70
    92c8:	0000272d 	.word	0x0000272d
    92cc:	0000548d 	.word	0x0000548d

000092d0 <wdt_set_timeout_period>:
{
    92d0:	b570      	push	{r4, r5, r6, lr}
    92d2:	460d      	mov	r5, r1
    92d4:	4616      	mov	r6, r2
	ASSERT(wdt && wdt->dev.hw);
    92d6:	4604      	mov	r4, r0
    92d8:	b168      	cbz	r0, 92f6 <wdt_set_timeout_period+0x26>
    92da:	6800      	ldr	r0, [r0, #0]
    92dc:	3000      	adds	r0, #0
    92de:	bf18      	it	ne
    92e0:	2001      	movne	r0, #1
    92e2:	226f      	movs	r2, #111	; 0x6f
    92e4:	4905      	ldr	r1, [pc, #20]	; (92fc <wdt_set_timeout_period+0x2c>)
    92e6:	4b06      	ldr	r3, [pc, #24]	; (9300 <wdt_set_timeout_period+0x30>)
    92e8:	4798      	blx	r3
	return _wdt_set_timeout_period(&wdt->dev, clk_rate, timeout_period);
    92ea:	4632      	mov	r2, r6
    92ec:	4629      	mov	r1, r5
    92ee:	4620      	mov	r0, r4
    92f0:	4b04      	ldr	r3, [pc, #16]	; (9304 <wdt_set_timeout_period+0x34>)
    92f2:	4798      	blx	r3
}
    92f4:	bd70      	pop	{r4, r5, r6, pc}
    92f6:	2000      	movs	r0, #0
    92f8:	e7f3      	b.n	92e2 <wdt_set_timeout_period+0x12>
    92fa:	bf00      	nop
    92fc:	0000ee70 	.word	0x0000ee70
    9300:	0000272d 	.word	0x0000272d
    9304:	0000535d 	.word	0x0000535d

00009308 <wdt_enable>:
{
    9308:	b510      	push	{r4, lr}
	ASSERT(wdt && wdt->dev.hw);
    930a:	4604      	mov	r4, r0
    930c:	b158      	cbz	r0, 9326 <wdt_enable+0x1e>
    930e:	6800      	ldr	r0, [r0, #0]
    9310:	3000      	adds	r0, #0
    9312:	bf18      	it	ne
    9314:	2001      	movne	r0, #1
    9316:	228c      	movs	r2, #140	; 0x8c
    9318:	4904      	ldr	r1, [pc, #16]	; (932c <wdt_enable+0x24>)
    931a:	4b05      	ldr	r3, [pc, #20]	; (9330 <wdt_enable+0x28>)
    931c:	4798      	blx	r3
	return _wdt_enable(&wdt->dev);
    931e:	4620      	mov	r0, r4
    9320:	4b04      	ldr	r3, [pc, #16]	; (9334 <wdt_enable+0x2c>)
    9322:	4798      	blx	r3
}
    9324:	bd10      	pop	{r4, pc}
    9326:	2000      	movs	r0, #0
    9328:	e7f5      	b.n	9316 <wdt_enable+0xe>
    932a:	bf00      	nop
    932c:	0000ee70 	.word	0x0000ee70
    9330:	0000272d 	.word	0x0000272d
    9334:	00005455 	.word	0x00005455

00009338 <TIMER_0_task1_cb>:
	tick_counter++;
    9338:	4a24      	ldr	r2, [pc, #144]	; (93cc <TIMER_0_task1_cb+0x94>)
    933a:	6813      	ldr	r3, [r2, #0]
    933c:	3301      	adds	r3, #1
    933e:	6013      	str	r3, [r2, #0]
	if (!(tick_counter % 5)) {
    9340:	4a23      	ldr	r2, [pc, #140]	; (93d0 <TIMER_0_task1_cb+0x98>)
    9342:	fba2 1203 	umull	r1, r2, r2, r3
    9346:	0892      	lsrs	r2, r2, #2
    9348:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    934c:	4293      	cmp	r3, r2
    934e:	d12a      	bne.n	93a6 <TIMER_0_task1_cb+0x6e>
		readenvironment = 1;
    9350:	2201      	movs	r2, #1
    9352:	4920      	ldr	r1, [pc, #128]	; (93d4 <TIMER_0_task1_cb+0x9c>)
    9354:	700a      	strb	r2, [r1, #0]
	ip_periodic_check = 1;
    9356:	4920      	ldr	r1, [pc, #128]	; (93d8 <TIMER_0_task1_cb+0xa0>)
    9358:	700a      	strb	r2, [r1, #0]
	if (!(tick_counter % 25)) {
    935a:	4a20      	ldr	r2, [pc, #128]	; (93dc <TIMER_0_task1_cb+0xa4>)
    935c:	fba2 1203 	umull	r1, r2, r2, r3
    9360:	08d2      	lsrs	r2, r2, #3
    9362:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    9366:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    936a:	4293      	cmp	r3, r2
    936c:	d102      	bne.n	9374 <TIMER_0_task1_cb+0x3c>
		arp_check = 1;
    936e:	2101      	movs	r1, #1
    9370:	4a1b      	ldr	r2, [pc, #108]	; (93e0 <TIMER_0_task1_cb+0xa8>)
    9372:	7011      	strb	r1, [r2, #0]
		ring_timer = 1;
    9374:	2101      	movs	r1, #1
    9376:	4a1b      	ldr	r2, [pc, #108]	; (93e4 <TIMER_0_task1_cb+0xac>)
    9378:	7011      	strb	r1, [r2, #0]
	if (!(tick_counter % 10)) {
    937a:	4a15      	ldr	r2, [pc, #84]	; (93d0 <TIMER_0_task1_cb+0x98>)
    937c:	fba2 1203 	umull	r1, r2, r2, r3
    9380:	08d2      	lsrs	r2, r2, #3
    9382:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    9386:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
    938a:	d105      	bne.n	9398 <TIMER_0_task1_cb+0x60>
		looprate = loopcount;
    938c:	4b16      	ldr	r3, [pc, #88]	; (93e8 <TIMER_0_task1_cb+0xb0>)
    938e:	6819      	ldr	r1, [r3, #0]
    9390:	4a16      	ldr	r2, [pc, #88]	; (93ec <TIMER_0_task1_cb+0xb4>)
    9392:	6011      	str	r1, [r2, #0]
		loopcount = 0;
    9394:	2200      	movs	r2, #0
    9396:	601a      	str	r2, [r3, #0]
	if (good_ethernet) {
    9398:	4b15      	ldr	r3, [pc, #84]	; (93f0 <TIMER_0_task1_cb+0xb8>)
    939a:	781b      	ldrb	r3, [r3, #0]
    939c:	b1a3      	cbz	r3, 93c8 <TIMER_0_task1_cb+0x90>
		good_ethernet--;
    939e:	3b01      	subs	r3, #1
    93a0:	4a13      	ldr	r2, [pc, #76]	; (93f0 <TIMER_0_task1_cb+0xb8>)
    93a2:	7013      	strb	r3, [r2, #0]
}
    93a4:	4770      	bx	lr
	ip_periodic_check = 1;
    93a6:	2101      	movs	r1, #1
    93a8:	4a0b      	ldr	r2, [pc, #44]	; (93d8 <TIMER_0_task1_cb+0xa0>)
    93aa:	7011      	strb	r1, [r2, #0]
	if (!(tick_counter % 25)) {
    93ac:	4a0b      	ldr	r2, [pc, #44]	; (93dc <TIMER_0_task1_cb+0xa4>)
    93ae:	fba2 1203 	umull	r1, r2, r2, r3
    93b2:	08d2      	lsrs	r2, r2, #3
    93b4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    93b8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    93bc:	4293      	cmp	r3, r2
    93be:	d1dc      	bne.n	937a <TIMER_0_task1_cb+0x42>
		arp_check = 1;
    93c0:	2101      	movs	r1, #1
    93c2:	4a07      	ldr	r2, [pc, #28]	; (93e0 <TIMER_0_task1_cb+0xa8>)
    93c4:	7011      	strb	r1, [r2, #0]
    93c6:	e7d8      	b.n	937a <TIMER_0_task1_cb+0x42>
    93c8:	4770      	bx	lr
    93ca:	bf00      	nop
    93cc:	2000855c 	.word	0x2000855c
    93d0:	cccccccd 	.word	0xcccccccd
    93d4:	2000826c 	.word	0x2000826c
    93d8:	20007860 	.word	0x20007860
    93dc:	51eb851f 	.word	0x51eb851f
    93e0:	20007fbe 	.word	0x20007fbe
    93e4:	20008279 	.word	0x20008279
    93e8:	2000758c 	.word	0x2000758c
    93ec:	20008578 	.word	0x20008578
    93f0:	2000757d 	.word	0x2000757d

000093f4 <application_udp_appcall>:
	if (reboot_actioned) {																							// if the MultiSense node is rebooting, then return
    93f4:	4b88      	ldr	r3, [pc, #544]	; (9618 <application_udp_appcall+0x224>)
    93f6:	781b      	ldrb	r3, [r3, #0]
    93f8:	2b00      	cmp	r3, #0
    93fa:	f040 82f6 	bne.w	99ea <application_udp_appcall+0x5f6>
{
    93fe:	b570      	push	{r4, r5, r6, lr}
	if (uip_newdata()) {
    9400:	4b86      	ldr	r3, [pc, #536]	; (961c <application_udp_appcall+0x228>)
    9402:	781b      	ldrb	r3, [r3, #0]
    9404:	f013 0f02 	tst.w	r3, #2
    9408:	d106      	bne.n	9418 <application_udp_appcall+0x24>
	if ((uip_rexmit()) || (uip_poll())) {
    940a:	4b84      	ldr	r3, [pc, #528]	; (961c <application_udp_appcall+0x228>)
    940c:	781b      	ldrb	r3, [r3, #0]
    940e:	f013 0f0c 	tst.w	r3, #12
    9412:	f040 80be 	bne.w	9592 <application_udp_appcall+0x19e>
    9416:	bd70      	pop	{r4, r5, r6, pc}
		good_ethernet = 255;
    9418:	22ff      	movs	r2, #255	; 0xff
    941a:	4b81      	ldr	r3, [pc, #516]	; (9620 <application_udp_appcall+0x22c>)
    941c:	701a      	strb	r2, [r3, #0]
		len = uip_datalen();
    941e:	4b81      	ldr	r3, [pc, #516]	; (9624 <application_udp_appcall+0x230>)
    9420:	881c      	ldrh	r4, [r3, #0]
		if (uip_conn->lport == htons(MAIN_UDPSOCKET)) {
    9422:	4b81      	ldr	r3, [pc, #516]	; (9628 <application_udp_appcall+0x234>)
    9424:	681b      	ldr	r3, [r3, #0]
    9426:	889d      	ldrh	r5, [r3, #4]
    9428:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
    942c:	4b7f      	ldr	r3, [pc, #508]	; (962c <application_udp_appcall+0x238>)
    942e:	4798      	blx	r3
    9430:	4285      	cmp	r5, r0
    9432:	d037      	beq.n	94a4 <application_udp_appcall+0xb0>
		} else if (uip_conn->lport == htons(CARDA_UDPSOCKET)) {
    9434:	4b7c      	ldr	r3, [pc, #496]	; (9628 <application_udp_appcall+0x234>)
    9436:	681b      	ldr	r3, [r3, #0]
    9438:	889d      	ldrh	r5, [r3, #4]
    943a:	f640 70a1 	movw	r0, #4001	; 0xfa1
    943e:	4b7b      	ldr	r3, [pc, #492]	; (962c <application_udp_appcall+0x238>)
    9440:	4798      	blx	r3
    9442:	4285      	cmp	r5, r0
    9444:	d079      	beq.n	953a <application_udp_appcall+0x146>
		} else if (uip_conn->lport == htons(CARDB_UDPSOCKET)) {
    9446:	4b78      	ldr	r3, [pc, #480]	; (9628 <application_udp_appcall+0x234>)
    9448:	681b      	ldr	r3, [r3, #0]
    944a:	889d      	ldrh	r5, [r3, #4]
    944c:	f640 70a2 	movw	r0, #4002	; 0xfa2
    9450:	4b76      	ldr	r3, [pc, #472]	; (962c <application_udp_appcall+0x238>)
    9452:	4798      	blx	r3
    9454:	4285      	cmp	r5, r0
    9456:	f000 8086 	beq.w	9566 <application_udp_appcall+0x172>
		} else if (uip_conn->lport == htons(RING_MANAGEMENT_SOCKET)) {
    945a:	4b73      	ldr	r3, [pc, #460]	; (9628 <application_udp_appcall+0x234>)
    945c:	681b      	ldr	r3, [r3, #0]
    945e:	889c      	ldrh	r4, [r3, #4]
    9460:	f640 70a3 	movw	r0, #4003	; 0xfa3
    9464:	4b71      	ldr	r3, [pc, #452]	; (962c <application_udp_appcall+0x238>)
    9466:	4798      	blx	r3
    9468:	4284      	cmp	r4, r0
    946a:	d1ce      	bne.n	940a <application_udp_appcall+0x16>
			if (!(((CONFIG *)&settings_buffer)->loop_basestation)) {
    946c:	4b70      	ldr	r3, [pc, #448]	; (9630 <application_udp_appcall+0x23c>)
    946e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
    9472:	2b00      	cmp	r3, #0
    9474:	d1c9      	bne.n	940a <application_udp_appcall+0x16>
				writeKSZreg(SPI_KSZ8794_PORT1CONTROL2, 0x07);
    9476:	2107      	movs	r1, #7
    9478:	2012      	movs	r0, #18
    947a:	4c6e      	ldr	r4, [pc, #440]	; (9634 <application_udp_appcall+0x240>)
    947c:	47a0      	blx	r4
				writeKSZreg(SPI_KSZ8794_PORT2CONTROL2, 0x07);
    947e:	2107      	movs	r1, #7
    9480:	2022      	movs	r0, #34	; 0x22
    9482:	47a0      	blx	r4
				writeKSZreg(SPI_KSZ8794_GLOBAL0, 0x2D);
    9484:	212d      	movs	r1, #45	; 0x2d
    9486:	2002      	movs	r0, #2
    9488:	47a0      	blx	r4
				delay_us(250);
    948a:	20fa      	movs	r0, #250	; 0xfa
    948c:	4b6a      	ldr	r3, [pc, #424]	; (9638 <application_udp_appcall+0x244>)
    948e:	4798      	blx	r3
				writeKSZreg(SPI_KSZ8794_PORT1CONTROL2, 0x06);
    9490:	2106      	movs	r1, #6
    9492:	2012      	movs	r0, #18
    9494:	47a0      	blx	r4
				writeKSZreg(SPI_KSZ8794_PORT2CONTROL2, 0x06);
    9496:	2106      	movs	r1, #6
    9498:	2022      	movs	r0, #34	; 0x22
    949a:	47a0      	blx	r4
				xprintf("Broadcast Table [FLUSH] UDP packet arrived...\r\n");
    949c:	4867      	ldr	r0, [pc, #412]	; (963c <application_udp_appcall+0x248>)
    949e:	4b68      	ldr	r3, [pc, #416]	; (9640 <application_udp_appcall+0x24c>)
    94a0:	4798      	blx	r3
    94a2:	e7b2      	b.n	940a <application_udp_appcall+0x16>
			memmove(PLAINTEXT, CIPHERTEXT, len);																	// If no encryption compiled, then just copy over plain-text from [UDP] buffer
    94a4:	4622      	mov	r2, r4
    94a6:	4b67      	ldr	r3, [pc, #412]	; (9644 <application_udp_appcall+0x250>)
    94a8:	6819      	ldr	r1, [r3, #0]
    94aa:	4867      	ldr	r0, [pc, #412]	; (9648 <application_udp_appcall+0x254>)
    94ac:	4b67      	ldr	r3, [pc, #412]	; (964c <application_udp_appcall+0x258>)
    94ae:	4798      	blx	r3
			if ((len == 40) && (PLAINTEXT[0] == ID_IDENT_1) && (PLAINTEXT[1] == ID_IDENT_2) && (PLAINTEXT[2] == ID_IDENT_3) && (PLAINTEXT[3] == ID_IDENT_4)) {
    94b0:	2c28      	cmp	r4, #40	; 0x28
    94b2:	d1aa      	bne.n	940a <application_udp_appcall+0x16>
    94b4:	4b64      	ldr	r3, [pc, #400]	; (9648 <application_udp_appcall+0x254>)
    94b6:	781b      	ldrb	r3, [r3, #0]
    94b8:	2b37      	cmp	r3, #55	; 0x37
    94ba:	d1a6      	bne.n	940a <application_udp_appcall+0x16>
    94bc:	4b62      	ldr	r3, [pc, #392]	; (9648 <application_udp_appcall+0x254>)
    94be:	785b      	ldrb	r3, [r3, #1]
    94c0:	2b9f      	cmp	r3, #159	; 0x9f
    94c2:	d1a2      	bne.n	940a <application_udp_appcall+0x16>
    94c4:	4b60      	ldr	r3, [pc, #384]	; (9648 <application_udp_appcall+0x254>)
    94c6:	789b      	ldrb	r3, [r3, #2]
    94c8:	2b1b      	cmp	r3, #27
    94ca:	d19e      	bne.n	940a <application_udp_appcall+0x16>
    94cc:	4b5e      	ldr	r3, [pc, #376]	; (9648 <application_udp_appcall+0x254>)
    94ce:	78db      	ldrb	r3, [r3, #3]
    94d0:	2b61      	cmp	r3, #97	; 0x61
    94d2:	d19a      	bne.n	940a <application_udp_appcall+0x16>
				memmove(((CONFIG *)&settings_buffer)->name, &PLAINTEXT[4], 33);
    94d4:	4b5e      	ldr	r3, [pc, #376]	; (9650 <application_udp_appcall+0x25c>)
    94d6:	4a5f      	ldr	r2, [pc, #380]	; (9654 <application_udp_appcall+0x260>)
    94d8:	f103 0120 	add.w	r1, r3, #32
    94dc:	681e      	ldr	r6, [r3, #0]
    94de:	685d      	ldr	r5, [r3, #4]
    94e0:	689c      	ldr	r4, [r3, #8]
    94e2:	68d8      	ldr	r0, [r3, #12]
    94e4:	6016      	str	r6, [r2, #0]
    94e6:	6055      	str	r5, [r2, #4]
    94e8:	6094      	str	r4, [r2, #8]
    94ea:	60d0      	str	r0, [r2, #12]
    94ec:	3310      	adds	r3, #16
    94ee:	3210      	adds	r2, #16
    94f0:	428b      	cmp	r3, r1
    94f2:	d1f3      	bne.n	94dc <application_udp_appcall+0xe8>
    94f4:	781b      	ldrb	r3, [r3, #0]
    94f6:	7013      	strb	r3, [r2, #0]
				((CONFIG *)&settings_buffer)->gain_cardA = PLAINTEXT[37];
    94f8:	484d      	ldr	r0, [pc, #308]	; (9630 <application_udp_appcall+0x23c>)
    94fa:	4b53      	ldr	r3, [pc, #332]	; (9648 <application_udp_appcall+0x254>)
    94fc:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
    9500:	f880 2029 	strb.w	r2, [r0, #41]	; 0x29
				((CONFIG *)&settings_buffer)->gain_cardB = PLAINTEXT[38];
    9504:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
    9508:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
				((CONFIG *)&settings_buffer)->loop_basestation = PLAINTEXT[39];
    950c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
    9510:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
				if (EEprom_settings(settings_buffer, SETTING_STRUCTURE_SIZE, 1) != ERR_NONE) {
    9514:	2201      	movs	r2, #1
    9516:	2180      	movs	r1, #128	; 0x80
    9518:	4b4f      	ldr	r3, [pc, #316]	; (9658 <application_udp_appcall+0x264>)
    951a:	4798      	blx	r3
    951c:	b148      	cbz	r0, 9532 <application_udp_appcall+0x13e>
					xprintf("MultiSense [configuration ERROR READING]\r\n");
    951e:	484f      	ldr	r0, [pc, #316]	; (965c <application_udp_appcall+0x268>)
    9520:	4b47      	ldr	r3, [pc, #284]	; (9640 <application_udp_appcall+0x24c>)
    9522:	4798      	blx	r3
				refresh_gain = 1;
    9524:	2201      	movs	r2, #1
    9526:	4b4e      	ldr	r3, [pc, #312]	; (9660 <application_udp_appcall+0x26c>)
    9528:	701a      	strb	r2, [r3, #0]
				xprintf("Global settings packet received...\r\n");	
    952a:	484e      	ldr	r0, [pc, #312]	; (9664 <application_udp_appcall+0x270>)
    952c:	4b44      	ldr	r3, [pc, #272]	; (9640 <application_udp_appcall+0x24c>)
    952e:	4798      	blx	r3
    9530:	e76b      	b.n	940a <application_udp_appcall+0x16>
					xprintf("MultiSense [UPDATED <ID> configuration WRITTEN]\r\n");
    9532:	484d      	ldr	r0, [pc, #308]	; (9668 <application_udp_appcall+0x274>)
    9534:	4b42      	ldr	r3, [pc, #264]	; (9640 <application_udp_appcall+0x24c>)
    9536:	4798      	blx	r3
    9538:	e7f4      	b.n	9524 <application_udp_appcall+0x130>
			memmove(PLAINTEXT, CIPHERTEXT, len);																	// If no encryption compiled, then just copy over plain-text from [UDP] buffer
    953a:	4622      	mov	r2, r4
    953c:	4b41      	ldr	r3, [pc, #260]	; (9644 <application_udp_appcall+0x250>)
    953e:	6819      	ldr	r1, [r3, #0]
    9540:	4841      	ldr	r0, [pc, #260]	; (9648 <application_udp_appcall+0x254>)
    9542:	4b42      	ldr	r3, [pc, #264]	; (964c <application_udp_appcall+0x258>)
    9544:	4798      	blx	r3
			switch (cardA_type) {
    9546:	4b49      	ldr	r3, [pc, #292]	; (966c <application_udp_appcall+0x278>)
    9548:	781b      	ldrb	r3, [r3, #0]
    954a:	2b02      	cmp	r3, #2
    954c:	f47f af5d 	bne.w	940a <application_udp_appcall+0x16>
				if (len == 1) {
    9550:	2c01      	cmp	r4, #1
    9552:	f47f af5a 	bne.w	940a <application_udp_appcall+0x16>
					miniIO_A_relay = PLAINTEXT[0];
    9556:	4b3c      	ldr	r3, [pc, #240]	; (9648 <application_udp_appcall+0x254>)
    9558:	781a      	ldrb	r2, [r3, #0]
    955a:	4b45      	ldr	r3, [pc, #276]	; (9670 <application_udp_appcall+0x27c>)
    955c:	701a      	strb	r2, [r3, #0]
					xprintf("CardA Mini-IO packet received...\r\n");
    955e:	4845      	ldr	r0, [pc, #276]	; (9674 <application_udp_appcall+0x280>)
    9560:	4b37      	ldr	r3, [pc, #220]	; (9640 <application_udp_appcall+0x24c>)
    9562:	4798      	blx	r3
    9564:	e751      	b.n	940a <application_udp_appcall+0x16>
			memmove(PLAINTEXT, CIPHERTEXT, len);																	// If no encryption compiled, then just copy over plain-text from [UDP] buffer
    9566:	4622      	mov	r2, r4
    9568:	4b36      	ldr	r3, [pc, #216]	; (9644 <application_udp_appcall+0x250>)
    956a:	6819      	ldr	r1, [r3, #0]
    956c:	4836      	ldr	r0, [pc, #216]	; (9648 <application_udp_appcall+0x254>)
    956e:	4b37      	ldr	r3, [pc, #220]	; (964c <application_udp_appcall+0x258>)
    9570:	4798      	blx	r3
			switch (cardB_type) {
    9572:	4b41      	ldr	r3, [pc, #260]	; (9678 <application_udp_appcall+0x284>)
    9574:	781b      	ldrb	r3, [r3, #0]
    9576:	2b02      	cmp	r3, #2
    9578:	f47f af47 	bne.w	940a <application_udp_appcall+0x16>
				if (len == 1) {
    957c:	2c01      	cmp	r4, #1
    957e:	f47f af44 	bne.w	940a <application_udp_appcall+0x16>
					miniIO_B_relay = PLAINTEXT[0];
    9582:	4b31      	ldr	r3, [pc, #196]	; (9648 <application_udp_appcall+0x254>)
    9584:	781a      	ldrb	r2, [r3, #0]
    9586:	4b3d      	ldr	r3, [pc, #244]	; (967c <application_udp_appcall+0x288>)
    9588:	701a      	strb	r2, [r3, #0]
					xprintf("CardB Mini-IO packet received...\r\n");
    958a:	483d      	ldr	r0, [pc, #244]	; (9680 <application_udp_appcall+0x28c>)
    958c:	4b2c      	ldr	r3, [pc, #176]	; (9640 <application_udp_appcall+0x24c>)
    958e:	4798      	blx	r3
    9590:	e73b      	b.n	940a <application_udp_appcall+0x16>
		if (uip_conn->lport == htons(MAIN_UDPSOCKET)) {
    9592:	4b25      	ldr	r3, [pc, #148]	; (9628 <application_udp_appcall+0x234>)
    9594:	681b      	ldr	r3, [r3, #0]
    9596:	889c      	ldrh	r4, [r3, #4]
    9598:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
    959c:	4b23      	ldr	r3, [pc, #140]	; (962c <application_udp_appcall+0x238>)
    959e:	4798      	blx	r3
    95a0:	4284      	cmp	r4, r0
    95a2:	d075      	beq.n	9690 <application_udp_appcall+0x29c>
		} else if (uip_conn->lport == htons(CARDA_UDPSOCKET)) {
    95a4:	4b20      	ldr	r3, [pc, #128]	; (9628 <application_udp_appcall+0x234>)
    95a6:	681b      	ldr	r3, [r3, #0]
    95a8:	889c      	ldrh	r4, [r3, #4]
    95aa:	f640 70a1 	movw	r0, #4001	; 0xfa1
    95ae:	4b1f      	ldr	r3, [pc, #124]	; (962c <application_udp_appcall+0x238>)
    95b0:	4798      	blx	r3
    95b2:	4284      	cmp	r4, r0
    95b4:	f000 80f3 	beq.w	979e <application_udp_appcall+0x3aa>
		} else if (uip_conn->lport == htons(CARDB_UDPSOCKET)) {
    95b8:	4b1b      	ldr	r3, [pc, #108]	; (9628 <application_udp_appcall+0x234>)
    95ba:	681b      	ldr	r3, [r3, #0]
    95bc:	889c      	ldrh	r4, [r3, #4]
    95be:	f640 70a2 	movw	r0, #4002	; 0xfa2
    95c2:	4b1a      	ldr	r3, [pc, #104]	; (962c <application_udp_appcall+0x238>)
    95c4:	4798      	blx	r3
    95c6:	4284      	cmp	r4, r0
    95c8:	f000 8154 	beq.w	9874 <application_udp_appcall+0x480>
		} else if (uip_conn->lport == htons(RING_MANAGEMENT_SOCKET)) {
    95cc:	4b16      	ldr	r3, [pc, #88]	; (9628 <application_udp_appcall+0x234>)
    95ce:	681b      	ldr	r3, [r3, #0]
    95d0:	889c      	ldrh	r4, [r3, #4]
    95d2:	f640 70a3 	movw	r0, #4003	; 0xfa3
    95d6:	4b15      	ldr	r3, [pc, #84]	; (962c <application_udp_appcall+0x238>)
    95d8:	4798      	blx	r3
    95da:	4284      	cmp	r4, r0
    95dc:	f47f af1b 	bne.w	9416 <application_udp_appcall+0x22>
			if ((send_relearn_udp) && (((CONFIG *)&settings_buffer)->loop_basestation)) {
    95e0:	4b28      	ldr	r3, [pc, #160]	; (9684 <application_udp_appcall+0x290>)
    95e2:	781b      	ldrb	r3, [r3, #0]
    95e4:	2b00      	cmp	r3, #0
    95e6:	f43f af16 	beq.w	9416 <application_udp_appcall+0x22>
    95ea:	4b11      	ldr	r3, [pc, #68]	; (9630 <application_udp_appcall+0x23c>)
    95ec:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
    95f0:	2b00      	cmp	r3, #0
    95f2:	f43f af10 	beq.w	9416 <application_udp_appcall+0x22>
				PLAINTEXT[0] = 0;
    95f6:	2400      	movs	r4, #0
    95f8:	4b13      	ldr	r3, [pc, #76]	; (9648 <application_udp_appcall+0x254>)
    95fa:	701c      	strb	r4, [r3, #0]
				memmove(CIPHERTEXT, PLAINTEXT, 1);
    95fc:	4b11      	ldr	r3, [pc, #68]	; (9644 <application_udp_appcall+0x250>)
    95fe:	681a      	ldr	r2, [r3, #0]
    9600:	7014      	strb	r4, [r2, #0]
				uip_udp_send(1);
    9602:	2101      	movs	r1, #1
    9604:	6818      	ldr	r0, [r3, #0]
    9606:	4b20      	ldr	r3, [pc, #128]	; (9688 <application_udp_appcall+0x294>)
    9608:	4798      	blx	r3
				send_relearn_udp = 0;
    960a:	4b1e      	ldr	r3, [pc, #120]	; (9684 <application_udp_appcall+0x290>)
    960c:	701c      	strb	r4, [r3, #0]
				xprintf("Topology update packet send...\r\n");
    960e:	481f      	ldr	r0, [pc, #124]	; (968c <application_udp_appcall+0x298>)
    9610:	4b0b      	ldr	r3, [pc, #44]	; (9640 <application_udp_appcall+0x24c>)
    9612:	4798      	blx	r3
    9614:	e6ff      	b.n	9416 <application_udp_appcall+0x22>
    9616:	bf00      	nop
    9618:	20007fbf 	.word	0x20007fbf
    961c:	2000858c 	.word	0x2000858c
    9620:	2000757d 	.word	0x2000757d
    9624:	20008580 	.word	0x20008580
    9628:	20008598 	.word	0x20008598
    962c:	0000cabd 	.word	0x0000cabd
    9630:	20007f2c 	.word	0x20007f2c
    9634:	0000dbc9 	.word	0x0000dbc9
    9638:	000015a9 	.word	0x000015a9
    963c:	00010368 	.word	0x00010368
    9640:	0000031d 	.word	0x0000031d
    9644:	20008594 	.word	0x20008594
    9648:	2000786c 	.word	0x2000786c
    964c:	0000dcb5 	.word	0x0000dcb5
    9650:	20007870 	.word	0x20007870
    9654:	20007f34 	.word	0x20007f34
    9658:	0000dafd 	.word	0x0000dafd
    965c:	000101d4 	.word	0x000101d4
    9660:	20008561 	.word	0x20008561
    9664:	000102f8 	.word	0x000102f8
    9668:	000102c4 	.word	0x000102c4
    966c:	20007c6e 	.word	0x20007c6e
    9670:	20007fb4 	.word	0x20007fb4
    9674:	00010320 	.word	0x00010320
    9678:	20008564 	.word	0x20008564
    967c:	20007f1c 	.word	0x20007f1c
    9680:	00010344 	.word	0x00010344
    9684:	20008275 	.word	0x20008275
    9688:	0000cac9 	.word	0x0000cac9
    968c:	00010434 	.word	0x00010434
			if (readenvironment == 2) {
    9690:	4b8a      	ldr	r3, [pc, #552]	; (98bc <application_udp_appcall+0x4c8>)
    9692:	781b      	ldrb	r3, [r3, #0]
    9694:	2b02      	cmp	r3, #2
    9696:	f47f aebe 	bne.w	9416 <application_udp_appcall+0x22>
				PLAINTEXT[0] = (uint8_t)(((((CONFIG *)&settings_buffer)->ID) >> 24) & 0x00FF);
    969a:	4989      	ldr	r1, [pc, #548]	; (98c0 <application_udp_appcall+0x4cc>)
    969c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
    969e:	4b89      	ldr	r3, [pc, #548]	; (98c4 <application_udp_appcall+0x4d0>)
    96a0:	0e10      	lsrs	r0, r2, #24
    96a2:	7018      	strb	r0, [r3, #0]
				PLAINTEXT[1] = (uint8_t)(((((CONFIG *)&settings_buffer)->ID) >> 16) & 0x00FF);
    96a4:	0c10      	lsrs	r0, r2, #16
    96a6:	7058      	strb	r0, [r3, #1]
				PLAINTEXT[2] = (uint8_t)(((((CONFIG *)&settings_buffer)->ID) >> 8) & 0x00FF);
    96a8:	0a10      	lsrs	r0, r2, #8
    96aa:	7098      	strb	r0, [r3, #2]
				PLAINTEXT[3] = (uint8_t)((((CONFIG *)&settings_buffer)->ID) & 0x00FF);
    96ac:	70da      	strb	r2, [r3, #3]
				memmove(&PLAINTEXT[4], ((CONFIG *)&settings_buffer)->name, 33);
    96ae:	f101 0208 	add.w	r2, r1, #8
    96b2:	3304      	adds	r3, #4
    96b4:	3128      	adds	r1, #40	; 0x28
    96b6:	6816      	ldr	r6, [r2, #0]
    96b8:	6855      	ldr	r5, [r2, #4]
    96ba:	6894      	ldr	r4, [r2, #8]
    96bc:	68d0      	ldr	r0, [r2, #12]
    96be:	601e      	str	r6, [r3, #0]
    96c0:	605d      	str	r5, [r3, #4]
    96c2:	609c      	str	r4, [r3, #8]
    96c4:	60d8      	str	r0, [r3, #12]
    96c6:	3210      	adds	r2, #16
    96c8:	3310      	adds	r3, #16
    96ca:	428a      	cmp	r2, r1
    96cc:	d1f3      	bne.n	96b6 <application_udp_appcall+0x2c2>
    96ce:	7812      	ldrb	r2, [r2, #0]
    96d0:	701a      	strb	r2, [r3, #0]
				PLAINTEXT[37] = ((CONFIG *)&settings_buffer)->gain_cardA;
    96d2:	497c      	ldr	r1, [pc, #496]	; (98c4 <application_udp_appcall+0x4d0>)
    96d4:	4b7a      	ldr	r3, [pc, #488]	; (98c0 <application_udp_appcall+0x4cc>)
    96d6:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
    96da:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
				PLAINTEXT[38] = ((CONFIG *)&settings_buffer)->gain_cardB;
    96de:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
    96e2:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
				PLAINTEXT[39] = ((CONFIG *)&settings_buffer)->loop_basestation;
    96e6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
    96ea:	f881 3027 	strb.w	r3, [r1, #39]	; 0x27
				PLAINTEXT[40] = readdata_water1;
    96ee:	4b76      	ldr	r3, [pc, #472]	; (98c8 <application_udp_appcall+0x4d4>)
    96f0:	781b      	ldrb	r3, [r3, #0]
    96f2:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
				PLAINTEXT[41] = readdata_water2;
    96f6:	4b75      	ldr	r3, [pc, #468]	; (98cc <application_udp_appcall+0x4d8>)
    96f8:	781b      	ldrb	r3, [r3, #0]
    96fa:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
				PLAINTEXT[42] = highvoltage;
    96fe:	4b74      	ldr	r3, [pc, #464]	; (98d0 <application_udp_appcall+0x4dc>)
    9700:	781b      	ldrb	r3, [r3, #0]
    9702:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
				PLAINTEXT[43] = readdata_tempmoisture[0];
    9706:	4b73      	ldr	r3, [pc, #460]	; (98d4 <application_udp_appcall+0x4e0>)
    9708:	781a      	ldrb	r2, [r3, #0]
    970a:	f881 202b 	strb.w	r2, [r1, #43]	; 0x2b
				PLAINTEXT[44] = readdata_tempmoisture[1];
    970e:	785a      	ldrb	r2, [r3, #1]
    9710:	f881 202c 	strb.w	r2, [r1, #44]	; 0x2c
				PLAINTEXT[45] = readdata_tempmoisture[2];
    9714:	789a      	ldrb	r2, [r3, #2]
    9716:	f881 202d 	strb.w	r2, [r1, #45]	; 0x2d
				PLAINTEXT[46] = readdata_tempmoisture[3];
    971a:	78db      	ldrb	r3, [r3, #3]
    971c:	f881 302e 	strb.w	r3, [r1, #46]	; 0x2e
				PLAINTEXT[47] = tamper;
    9720:	4b6d      	ldr	r3, [pc, #436]	; (98d8 <application_udp_appcall+0x4e4>)
    9722:	781b      	ldrb	r3, [r3, #0]
    9724:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
				PLAINTEXT[48] = link_port1;
    9728:	4b6c      	ldr	r3, [pc, #432]	; (98dc <application_udp_appcall+0x4e8>)
    972a:	781b      	ldrb	r3, [r3, #0]
    972c:	f881 3030 	strb.w	r3, [r1, #48]	; 0x30
				PLAINTEXT[49] = link_port2;
    9730:	4b6b      	ldr	r3, [pc, #428]	; (98e0 <application_udp_appcall+0x4ec>)
    9732:	781b      	ldrb	r3, [r3, #0]
    9734:	f881 3031 	strb.w	r3, [r1, #49]	; 0x31
				PLAINTEXT[50] = link_port3;
    9738:	4b6a      	ldr	r3, [pc, #424]	; (98e4 <application_udp_appcall+0x4f0>)
    973a:	781b      	ldrb	r3, [r3, #0]
    973c:	f881 3032 	strb.w	r3, [r1, #50]	; 0x32
				PLAINTEXT[51] = cardA_type;
    9740:	4b69      	ldr	r3, [pc, #420]	; (98e8 <application_udp_appcall+0x4f4>)
    9742:	781b      	ldrb	r3, [r3, #0]
    9744:	f881 3033 	strb.w	r3, [r1, #51]	; 0x33
				PLAINTEXT[52] = cardB_type;
    9748:	4b68      	ldr	r3, [pc, #416]	; (98ec <application_udp_appcall+0x4f8>)
    974a:	781b      	ldrb	r3, [r3, #0]
    974c:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
				PLAINTEXT[53] = ring_broken;
    9750:	4b67      	ldr	r3, [pc, #412]	; (98f0 <application_udp_appcall+0x4fc>)
    9752:	781b      	ldrb	r3, [r3, #0]
    9754:	f881 3035 	strb.w	r3, [r1, #53]	; 0x35
				PLAINTEXT[54] = MULTISENSE_FIRMWARE_MAJOR;
    9758:	2400      	movs	r4, #0
    975a:	f881 4036 	strb.w	r4, [r1, #54]	; 0x36
				PLAINTEXT[55] = MULTISENSE_FIRMWARE_MINOR;
    975e:	2301      	movs	r3, #1
    9760:	f881 3037 	strb.w	r3, [r1, #55]	; 0x37
				PLAINTEXT[56] = ID_IDENT_1;
    9764:	2337      	movs	r3, #55	; 0x37
    9766:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
				PLAINTEXT[57] = ID_IDENT_2;
    976a:	239f      	movs	r3, #159	; 0x9f
    976c:	f881 3039 	strb.w	r3, [r1, #57]	; 0x39
				PLAINTEXT[58] = ID_IDENT_3;
    9770:	231b      	movs	r3, #27
    9772:	f881 303a 	strb.w	r3, [r1, #58]	; 0x3a
				PLAINTEXT[59] = ID_IDENT_4;
    9776:	2361      	movs	r3, #97	; 0x61
    9778:	f881 303b 	strb.w	r3, [r1, #59]	; 0x3b
				PLAINTEXT[60] = 0;
    977c:	f881 403c 	strb.w	r4, [r1, #60]	; 0x3c
				memmove(CIPHERTEXT, PLAINTEXT, 61);														// If no encryption compiled, then just copy over plain-text into [UDP] buffer
    9780:	4d5c      	ldr	r5, [pc, #368]	; (98f4 <application_udp_appcall+0x500>)
    9782:	223d      	movs	r2, #61	; 0x3d
    9784:	6828      	ldr	r0, [r5, #0]
    9786:	4b5c      	ldr	r3, [pc, #368]	; (98f8 <application_udp_appcall+0x504>)
    9788:	4798      	blx	r3
				uip_udp_send(61);
    978a:	213d      	movs	r1, #61	; 0x3d
    978c:	6828      	ldr	r0, [r5, #0]
    978e:	4b5b      	ldr	r3, [pc, #364]	; (98fc <application_udp_appcall+0x508>)
    9790:	4798      	blx	r3
				readenvironment = 0;
    9792:	4b4a      	ldr	r3, [pc, #296]	; (98bc <application_udp_appcall+0x4c8>)
    9794:	701c      	strb	r4, [r3, #0]
				xprintf("Hardware packet send...\r\n");
    9796:	485a      	ldr	r0, [pc, #360]	; (9900 <application_udp_appcall+0x50c>)
    9798:	4b5a      	ldr	r3, [pc, #360]	; (9904 <application_udp_appcall+0x510>)
    979a:	4798      	blx	r3
    979c:	bd70      	pop	{r4, r5, r6, pc}
			switch (cardA_type) {
    979e:	4b52      	ldr	r3, [pc, #328]	; (98e8 <application_udp_appcall+0x4f4>)
    97a0:	781b      	ldrb	r3, [r3, #0]
    97a2:	2b01      	cmp	r3, #1
    97a4:	d01f      	beq.n	97e6 <application_udp_appcall+0x3f2>
    97a6:	2b02      	cmp	r3, #2
    97a8:	f47f ae35 	bne.w	9416 <application_udp_appcall+0x22>
				PLAINTEXT[0] = (uint8_t)miniIO_A0_adcH;
    97ac:	4945      	ldr	r1, [pc, #276]	; (98c4 <application_udp_appcall+0x4d0>)
    97ae:	4b56      	ldr	r3, [pc, #344]	; (9908 <application_udp_appcall+0x514>)
    97b0:	781b      	ldrb	r3, [r3, #0]
    97b2:	700b      	strb	r3, [r1, #0]
				PLAINTEXT[1] = (uint8_t)miniIO_A0_adcL;
    97b4:	4b55      	ldr	r3, [pc, #340]	; (990c <application_udp_appcall+0x518>)
    97b6:	781b      	ldrb	r3, [r3, #0]
    97b8:	704b      	strb	r3, [r1, #1]
				PLAINTEXT[2] = (uint8_t)miniIO_A1_adcH;
    97ba:	4b55      	ldr	r3, [pc, #340]	; (9910 <application_udp_appcall+0x51c>)
    97bc:	781b      	ldrb	r3, [r3, #0]
    97be:	708b      	strb	r3, [r1, #2]
				PLAINTEXT[3] = (uint8_t)miniIO_A1_adcL;
    97c0:	4b54      	ldr	r3, [pc, #336]	; (9914 <application_udp_appcall+0x520>)
    97c2:	781b      	ldrb	r3, [r3, #0]
    97c4:	70cb      	strb	r3, [r1, #3]
				PLAINTEXT[4] = (uint8_t)miniIO_A_inputs;
    97c6:	4b54      	ldr	r3, [pc, #336]	; (9918 <application_udp_appcall+0x524>)
    97c8:	781b      	ldrb	r3, [r3, #0]
    97ca:	710b      	strb	r3, [r1, #4]
				memmove(CIPHERTEXT, PLAINTEXT, 5);													// If no encryption compiled, then just copy over plain-text into [UDP] buffer
    97cc:	4c49      	ldr	r4, [pc, #292]	; (98f4 <application_udp_appcall+0x500>)
    97ce:	2205      	movs	r2, #5
    97d0:	6820      	ldr	r0, [r4, #0]
    97d2:	4b49      	ldr	r3, [pc, #292]	; (98f8 <application_udp_appcall+0x504>)
    97d4:	4798      	blx	r3
				uip_udp_send(3);
    97d6:	2103      	movs	r1, #3
    97d8:	6820      	ldr	r0, [r4, #0]
    97da:	4b48      	ldr	r3, [pc, #288]	; (98fc <application_udp_appcall+0x508>)
    97dc:	4798      	blx	r3
				xprintf("CardA Mini-IO packet send...\r\n");	
    97de:	484f      	ldr	r0, [pc, #316]	; (991c <application_udp_appcall+0x528>)
    97e0:	4b48      	ldr	r3, [pc, #288]	; (9904 <application_udp_appcall+0x510>)
    97e2:	4798      	blx	r3
				break;
    97e4:	bd70      	pop	{r4, r5, r6, pc}
				if ((!sentA) && (card_sampleindex == SAMPLE_BUFFER_SIZE)) {
    97e6:	4b4e      	ldr	r3, [pc, #312]	; (9920 <application_udp_appcall+0x52c>)
    97e8:	781b      	ldrb	r3, [r3, #0]
    97ea:	2b00      	cmp	r3, #0
    97ec:	f47f ae13 	bne.w	9416 <application_udp_appcall+0x22>
    97f0:	4b4c      	ldr	r3, [pc, #304]	; (9924 <application_udp_appcall+0x530>)
    97f2:	681b      	ldr	r3, [r3, #0]
    97f4:	f5b3 7f2b 	cmp.w	r3, #684	; 0x2ac
    97f8:	f47f ae0d 	bne.w	9416 <application_udp_appcall+0x22>
					memmove(&PLAINTEXT[0], cardAch0_samplebuffer, SAMPLE_BUFFER_SIZE);
    97fc:	4c31      	ldr	r4, [pc, #196]	; (98c4 <application_udp_appcall+0x4d0>)
    97fe:	f44f 762b 	mov.w	r6, #684	; 0x2ac
    9802:	4632      	mov	r2, r6
    9804:	4948      	ldr	r1, [pc, #288]	; (9928 <application_udp_appcall+0x534>)
    9806:	4620      	mov	r0, r4
    9808:	4d48      	ldr	r5, [pc, #288]	; (992c <application_udp_appcall+0x538>)
    980a:	47a8      	blx	r5
					memmove(&PLAINTEXT[SAMPLE_BUFFER_SIZE], cardAch1_samplebuffer, SAMPLE_BUFFER_SIZE);
    980c:	4632      	mov	r2, r6
    980e:	4948      	ldr	r1, [pc, #288]	; (9930 <application_udp_appcall+0x53c>)
    9810:	19a0      	adds	r0, r4, r6
    9812:	47a8      	blx	r5
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 0] = cardAch2_samplebuffer;
    9814:	4b47      	ldr	r3, [pc, #284]	; (9934 <application_udp_appcall+0x540>)
    9816:	781b      	ldrb	r3, [r3, #0]
    9818:	f884 3558 	strb.w	r3, [r4, #1368]	; 0x558
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 1] = cardAch3_samplebuffer;
    981c:	4b46      	ldr	r3, [pc, #280]	; (9938 <application_udp_appcall+0x544>)
    981e:	781b      	ldrb	r3, [r3, #0]
    9820:	f884 3559 	strb.w	r3, [r4, #1369]	; 0x559
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 2] = ID_IDENT_1;
    9824:	2337      	movs	r3, #55	; 0x37
    9826:	f884 355a 	strb.w	r3, [r4, #1370]	; 0x55a
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 3] = ID_IDENT_2;
    982a:	239f      	movs	r3, #159	; 0x9f
    982c:	f884 355b 	strb.w	r3, [r4, #1371]	; 0x55b
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 4] = ID_IDENT_3;
    9830:	231b      	movs	r3, #27
    9832:	f884 355c 	strb.w	r3, [r4, #1372]	; 0x55c
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 5] = ID_IDENT_4;
    9836:	2361      	movs	r3, #97	; 0x61
    9838:	f884 355d 	strb.w	r3, [r4, #1373]	; 0x55d
					memmove(CIPHERTEXT, PLAINTEXT, (SAMPLE_BUFFER_SIZE * 2) + 6);													// If no encryption compiled, then just copy over plain-text into [UDP] buffer
    983c:	4d2d      	ldr	r5, [pc, #180]	; (98f4 <application_udp_appcall+0x500>)
    983e:	f240 525e 	movw	r2, #1374	; 0x55e
    9842:	4621      	mov	r1, r4
    9844:	6828      	ldr	r0, [r5, #0]
    9846:	4b2c      	ldr	r3, [pc, #176]	; (98f8 <application_udp_appcall+0x504>)
    9848:	4798      	blx	r3
					uip_udp_send((SAMPLE_BUFFER_SIZE * 2) + 6);
    984a:	f240 515e 	movw	r1, #1374	; 0x55e
    984e:	6828      	ldr	r0, [r5, #0]
    9850:	4b2a      	ldr	r3, [pc, #168]	; (98fc <application_udp_appcall+0x508>)
    9852:	4798      	blx	r3
					if (sentB) {
    9854:	4b39      	ldr	r3, [pc, #228]	; (993c <application_udp_appcall+0x548>)
    9856:	781b      	ldrb	r3, [r3, #0]
    9858:	b143      	cbz	r3, 986c <application_udp_appcall+0x478>
						sentB = 0;
    985a:	2300      	movs	r3, #0
    985c:	4a37      	ldr	r2, [pc, #220]	; (993c <application_udp_appcall+0x548>)
    985e:	7013      	strb	r3, [r2, #0]
						card_sampleindex = 0;
    9860:	4a30      	ldr	r2, [pc, #192]	; (9924 <application_udp_appcall+0x530>)
    9862:	6013      	str	r3, [r2, #0]
					xprintf("CardA VibraTek packet send...\r\n");
    9864:	4836      	ldr	r0, [pc, #216]	; (9940 <application_udp_appcall+0x54c>)
    9866:	4b27      	ldr	r3, [pc, #156]	; (9904 <application_udp_appcall+0x510>)
    9868:	4798      	blx	r3
    986a:	bd70      	pop	{r4, r5, r6, pc}
						sentA = 1;
    986c:	2201      	movs	r2, #1
    986e:	4b2c      	ldr	r3, [pc, #176]	; (9920 <application_udp_appcall+0x52c>)
    9870:	701a      	strb	r2, [r3, #0]
    9872:	e7f7      	b.n	9864 <application_udp_appcall+0x470>
			switch (cardB_type) {
    9874:	4b1d      	ldr	r3, [pc, #116]	; (98ec <application_udp_appcall+0x4f8>)
    9876:	781b      	ldrb	r3, [r3, #0]
    9878:	2b01      	cmp	r3, #1
    987a:	d06f      	beq.n	995c <application_udp_appcall+0x568>
    987c:	2b02      	cmp	r3, #2
    987e:	f47f adca 	bne.w	9416 <application_udp_appcall+0x22>
				PLAINTEXT[0] = (uint8_t)miniIO_B0_adcH;
    9882:	4910      	ldr	r1, [pc, #64]	; (98c4 <application_udp_appcall+0x4d0>)
    9884:	4b2f      	ldr	r3, [pc, #188]	; (9944 <application_udp_appcall+0x550>)
    9886:	781b      	ldrb	r3, [r3, #0]
    9888:	700b      	strb	r3, [r1, #0]
				PLAINTEXT[1] = (uint8_t)miniIO_B0_adcL;
    988a:	4b2f      	ldr	r3, [pc, #188]	; (9948 <application_udp_appcall+0x554>)
    988c:	781b      	ldrb	r3, [r3, #0]
    988e:	704b      	strb	r3, [r1, #1]
				PLAINTEXT[2] = (uint8_t)miniIO_B1_adcH;
    9890:	4b2e      	ldr	r3, [pc, #184]	; (994c <application_udp_appcall+0x558>)
    9892:	781b      	ldrb	r3, [r3, #0]
    9894:	708b      	strb	r3, [r1, #2]
				PLAINTEXT[3] = (uint8_t)miniIO_B1_adcL;
    9896:	4b2e      	ldr	r3, [pc, #184]	; (9950 <application_udp_appcall+0x55c>)
    9898:	781b      	ldrb	r3, [r3, #0]
    989a:	70cb      	strb	r3, [r1, #3]
				PLAINTEXT[4] = (uint8_t)miniIO_B_inputs;
    989c:	4b2d      	ldr	r3, [pc, #180]	; (9954 <application_udp_appcall+0x560>)
    989e:	781b      	ldrb	r3, [r3, #0]
    98a0:	710b      	strb	r3, [r1, #4]
				memmove(CIPHERTEXT, PLAINTEXT, 3);												   	// If no encryption compiled, then just copy over plain-text into [UDP] buffer
    98a2:	4c14      	ldr	r4, [pc, #80]	; (98f4 <application_udp_appcall+0x500>)
    98a4:	2203      	movs	r2, #3
    98a6:	6820      	ldr	r0, [r4, #0]
    98a8:	4b13      	ldr	r3, [pc, #76]	; (98f8 <application_udp_appcall+0x504>)
    98aa:	4798      	blx	r3
				uip_udp_send(5);
    98ac:	2105      	movs	r1, #5
    98ae:	6820      	ldr	r0, [r4, #0]
    98b0:	4b12      	ldr	r3, [pc, #72]	; (98fc <application_udp_appcall+0x508>)
    98b2:	4798      	blx	r3
				xprintf("CardB Mini-IO packet send...\r\n");
    98b4:	4828      	ldr	r0, [pc, #160]	; (9958 <application_udp_appcall+0x564>)
    98b6:	4b13      	ldr	r3, [pc, #76]	; (9904 <application_udp_appcall+0x510>)
    98b8:	4798      	blx	r3
				break;
    98ba:	bd70      	pop	{r4, r5, r6, pc}
    98bc:	2000826c 	.word	0x2000826c
    98c0:	20007f2c 	.word	0x20007f2c
    98c4:	2000786c 	.word	0x2000786c
    98c8:	20008562 	.word	0x20008562
    98cc:	2000854d 	.word	0x2000854d
    98d0:	20008557 	.word	0x20008557
    98d4:	20007fb8 	.word	0x20007fb8
    98d8:	20007fb3 	.word	0x20007fb3
    98dc:	20007575 	.word	0x20007575
    98e0:	20008294 	.word	0x20008294
    98e4:	20007579 	.word	0x20007579
    98e8:	20007c6e 	.word	0x20007c6e
    98ec:	20008564 	.word	0x20008564
    98f0:	2000826d 	.word	0x2000826d
    98f4:	20008594 	.word	0x20008594
    98f8:	0000dcb5 	.word	0x0000dcb5
    98fc:	0000cac9 	.word	0x0000cac9
    9900:	00010398 	.word	0x00010398
    9904:	0000031d 	.word	0x0000031d
    9908:	20007c6c 	.word	0x20007c6c
    990c:	20008556 	.word	0x20008556
    9910:	20008277 	.word	0x20008277
    9914:	20007fb2 	.word	0x20007fb2
    9918:	20007578 	.word	0x20007578
    991c:	000103b4 	.word	0x000103b4
    9920:	20007fbc 	.word	0x20007fbc
    9924:	20008548 	.word	0x20008548
    9928:	20008298 	.word	0x20008298
    992c:	0000dc9f 	.word	0x0000dc9f
    9930:	20007c70 	.word	0x20007c70
    9934:	2000784c 	.word	0x2000784c
    9938:	20007576 	.word	0x20007576
    993c:	20007588 	.word	0x20007588
    9940:	000103d4 	.word	0x000103d4
    9944:	20007fbd 	.word	0x20007fbd
    9948:	20007c6d 	.word	0x20007c6d
    994c:	20007590 	.word	0x20007590
    9950:	20008563 	.word	0x20008563
    9954:	20008274 	.word	0x20008274
    9958:	000103f4 	.word	0x000103f4
				if ((!sentB) && (card_sampleindex == SAMPLE_BUFFER_SIZE)) {
    995c:	4b23      	ldr	r3, [pc, #140]	; (99ec <application_udp_appcall+0x5f8>)
    995e:	781b      	ldrb	r3, [r3, #0]
    9960:	2b00      	cmp	r3, #0
    9962:	f47f ad58 	bne.w	9416 <application_udp_appcall+0x22>
    9966:	4b22      	ldr	r3, [pc, #136]	; (99f0 <application_udp_appcall+0x5fc>)
    9968:	681b      	ldr	r3, [r3, #0]
    996a:	f5b3 7f2b 	cmp.w	r3, #684	; 0x2ac
    996e:	f47f ad52 	bne.w	9416 <application_udp_appcall+0x22>
					memmove(&PLAINTEXT[0], cardBch0_samplebuffer, SAMPLE_BUFFER_SIZE);
    9972:	4c20      	ldr	r4, [pc, #128]	; (99f4 <application_udp_appcall+0x600>)
    9974:	f44f 762b 	mov.w	r6, #684	; 0x2ac
    9978:	4632      	mov	r2, r6
    997a:	491f      	ldr	r1, [pc, #124]	; (99f8 <application_udp_appcall+0x604>)
    997c:	4620      	mov	r0, r4
    997e:	4d1f      	ldr	r5, [pc, #124]	; (99fc <application_udp_appcall+0x608>)
    9980:	47a8      	blx	r5
					memmove(&PLAINTEXT[SAMPLE_BUFFER_SIZE], cardBch1_samplebuffer, SAMPLE_BUFFER_SIZE);
    9982:	4632      	mov	r2, r6
    9984:	491e      	ldr	r1, [pc, #120]	; (9a00 <application_udp_appcall+0x60c>)
    9986:	19a0      	adds	r0, r4, r6
    9988:	47a8      	blx	r5
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 0] = cardBch2_samplebuffer;
    998a:	4b1e      	ldr	r3, [pc, #120]	; (9a04 <application_udp_appcall+0x610>)
    998c:	781b      	ldrb	r3, [r3, #0]
    998e:	f884 3558 	strb.w	r3, [r4, #1368]	; 0x558
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 1] = cardBch3_samplebuffer;
    9992:	4b1d      	ldr	r3, [pc, #116]	; (9a08 <application_udp_appcall+0x614>)
    9994:	781b      	ldrb	r3, [r3, #0]
    9996:	f884 3559 	strb.w	r3, [r4, #1369]	; 0x559
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 2] = ID_IDENT_1;
    999a:	2337      	movs	r3, #55	; 0x37
    999c:	f884 355a 	strb.w	r3, [r4, #1370]	; 0x55a
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 3] = ID_IDENT_2;
    99a0:	239f      	movs	r3, #159	; 0x9f
    99a2:	f884 355b 	strb.w	r3, [r4, #1371]	; 0x55b
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 4] = ID_IDENT_3;
    99a6:	231b      	movs	r3, #27
    99a8:	f884 355c 	strb.w	r3, [r4, #1372]	; 0x55c
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 5] = ID_IDENT_4;
    99ac:	2361      	movs	r3, #97	; 0x61
    99ae:	f884 355d 	strb.w	r3, [r4, #1373]	; 0x55d
					memmove(CIPHERTEXT, PLAINTEXT, (SAMPLE_BUFFER_SIZE * 2) + 6);													// If no encryption compiled, then just copy over plain-text into [UDP] buffer
    99b2:	4d16      	ldr	r5, [pc, #88]	; (9a0c <application_udp_appcall+0x618>)
    99b4:	f240 525e 	movw	r2, #1374	; 0x55e
    99b8:	4621      	mov	r1, r4
    99ba:	6828      	ldr	r0, [r5, #0]
    99bc:	4b14      	ldr	r3, [pc, #80]	; (9a10 <application_udp_appcall+0x61c>)
    99be:	4798      	blx	r3
					uip_udp_send((SAMPLE_BUFFER_SIZE * 2) + 6);
    99c0:	f240 515e 	movw	r1, #1374	; 0x55e
    99c4:	6828      	ldr	r0, [r5, #0]
    99c6:	4b13      	ldr	r3, [pc, #76]	; (9a14 <application_udp_appcall+0x620>)
    99c8:	4798      	blx	r3
					if (sentA) {
    99ca:	4b13      	ldr	r3, [pc, #76]	; (9a18 <application_udp_appcall+0x624>)
    99cc:	781b      	ldrb	r3, [r3, #0]
    99ce:	b143      	cbz	r3, 99e2 <application_udp_appcall+0x5ee>
						sentA = 0;
    99d0:	2300      	movs	r3, #0
    99d2:	4a11      	ldr	r2, [pc, #68]	; (9a18 <application_udp_appcall+0x624>)
    99d4:	7013      	strb	r3, [r2, #0]
						card_sampleindex = 0;
    99d6:	4a06      	ldr	r2, [pc, #24]	; (99f0 <application_udp_appcall+0x5fc>)
    99d8:	6013      	str	r3, [r2, #0]
					xprintf("CardB VibraTek packet send...\r\n");
    99da:	4810      	ldr	r0, [pc, #64]	; (9a1c <application_udp_appcall+0x628>)
    99dc:	4b10      	ldr	r3, [pc, #64]	; (9a20 <application_udp_appcall+0x62c>)
    99de:	4798      	blx	r3
    99e0:	bd70      	pop	{r4, r5, r6, pc}
						sentB = 1;
    99e2:	2201      	movs	r2, #1
    99e4:	4b01      	ldr	r3, [pc, #4]	; (99ec <application_udp_appcall+0x5f8>)
    99e6:	701a      	strb	r2, [r3, #0]
    99e8:	e7f7      	b.n	99da <application_udp_appcall+0x5e6>
    99ea:	4770      	bx	lr
    99ec:	20007588 	.word	0x20007588
    99f0:	20008548 	.word	0x20008548
    99f4:	2000786c 	.word	0x2000786c
    99f8:	20007fc0 	.word	0x20007fc0
    99fc:	0000dc9f 	.word	0x0000dc9f
    9a00:	2000759c 	.word	0x2000759c
    9a04:	2000757b 	.word	0x2000757b
    9a08:	2000757c 	.word	0x2000757c
    9a0c:	20008594 	.word	0x20008594
    9a10:	0000dcb5 	.word	0x0000dcb5
    9a14:	0000cac9 	.word	0x0000cac9
    9a18:	20007fbc 	.word	0x20007fbc
    9a1c:	00010414 	.word	0x00010414
    9a20:	0000031d 	.word	0x0000031d

00009a24 <main_loop>:
{
    9a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9a28:	b08b      	sub	sp, #44	; 0x2c
	broadcast_storm = 0;
    9a2a:	2300      	movs	r3, #0
    9a2c:	9306      	str	r3, [sp, #24]
	eth_check = 0;
    9a2e:	9304      	str	r3, [sp, #16]
					if (uip_len > 0) {
    9a30:	f8df b290 	ldr.w	fp, [pc, #656]	; 9cc4 <main_loop+0x2a0>
				xprintf("<CLI DEBUG> ID               = %u\r\n", ((CONFIG *)&settings_buffer)->ID);
    9a34:	4f89      	ldr	r7, [pc, #548]	; (9c5c <main_loop+0x238>)
				xprintf("<CLI DEBUG> Name             = %s\r\n", ((CONFIG *)&settings_buffer)->name);
    9a36:	f107 0308 	add.w	r3, r7, #8
    9a3a:	9307      	str	r3, [sp, #28]
    9a3c:	f000 bc67 	b.w	a30e <main_loop+0x8ea>
    9a40:	2300      	movs	r3, #0
    9a42:	9305      	str	r3, [sp, #20]
    9a44:	461d      	mov	r5, r3
				if (mac_async_read_len(&ETHERNET_MAC_0) > 0) {
    9a46:	f8df 8280 	ldr.w	r8, [pc, #640]	; 9cc8 <main_loop+0x2a4>
					uip_len = mac_async_read(&ETHERNET_MAC_0, (uint8_t *)&uip_buf[0], sizeof(uip_buf));
    9a4a:	4c85      	ldr	r4, [pc, #532]	; (9c60 <main_loop+0x23c>)
    9a4c:	e011      	b.n	9a72 <main_loop+0x4e>
					if (ETH_BUF->type == htons(UIP_ETHTYPE_IP)) {
    9a4e:	89a6      	ldrh	r6, [r4, #12]
    9a50:	f44f 6000 	mov.w	r0, #2048	; 0x800
    9a54:	4b83      	ldr	r3, [pc, #524]	; (9c64 <main_loop+0x240>)
    9a56:	4798      	blx	r3
    9a58:	4286      	cmp	r6, r0
    9a5a:	d065      	beq.n	9b28 <main_loop+0x104>
					} else if (ETH_BUF->type == htons (UIP_ETHTYPE_ARP)) {
    9a5c:	89a6      	ldrh	r6, [r4, #12]
    9a5e:	f640 0006 	movw	r0, #2054	; 0x806
    9a62:	4b80      	ldr	r3, [pc, #512]	; (9c64 <main_loop+0x240>)
    9a64:	4798      	blx	r3
    9a66:	4286      	cmp	r6, r0
    9a68:	d06e      	beq.n	9b48 <main_loop+0x124>
			for (etherloop = 0; etherloop < 5; etherloop++) {
    9a6a:	3501      	adds	r5, #1
    9a6c:	2d05      	cmp	r5, #5
    9a6e:	f000 808c 	beq.w	9b8a <main_loop+0x166>
				if (mac_async_read_len(&ETHERNET_MAC_0) > 0) {
    9a72:	487d      	ldr	r0, [pc, #500]	; (9c68 <main_loop+0x244>)
    9a74:	47c0      	blx	r8
    9a76:	2800      	cmp	r0, #0
    9a78:	d071      	beq.n	9b5e <main_loop+0x13a>
					uip_len = mac_async_read(&ETHERNET_MAC_0, (uint8_t *)&uip_buf[0], sizeof(uip_buf));
    9a7a:	f240 62a6 	movw	r2, #1702	; 0x6a6
    9a7e:	4621      	mov	r1, r4
    9a80:	4879      	ldr	r0, [pc, #484]	; (9c68 <main_loop+0x244>)
    9a82:	4b7a      	ldr	r3, [pc, #488]	; (9c6c <main_loop+0x248>)
    9a84:	4798      	blx	r3
    9a86:	b280      	uxth	r0, r0
    9a88:	f8ab 0000 	strh.w	r0, [fp]
				if ((uip_len == 68) && (uip_buf[0] == 0x01) && (uip_buf[1] == 0x80) && (uip_buf[2] == 0xC2) && (uip_buf[3] == 0x00) && (uip_buf[4] == 0x00) && (uip_buf[5] == 0x00) && (uip_buf[6] == 0x01) &&
    9a8c:	2844      	cmp	r0, #68	; 0x44
    9a8e:	d1de      	bne.n	9a4e <main_loop+0x2a>
    9a90:	7823      	ldrb	r3, [r4, #0]
    9a92:	2b01      	cmp	r3, #1
    9a94:	d1db      	bne.n	9a4e <main_loop+0x2a>
    9a96:	7863      	ldrb	r3, [r4, #1]
    9a98:	2b80      	cmp	r3, #128	; 0x80
    9a9a:	d1d8      	bne.n	9a4e <main_loop+0x2a>
    9a9c:	78a3      	ldrb	r3, [r4, #2]
    9a9e:	2bc2      	cmp	r3, #194	; 0xc2
    9aa0:	d1d5      	bne.n	9a4e <main_loop+0x2a>
    9aa2:	78e3      	ldrb	r3, [r4, #3]
    9aa4:	2b00      	cmp	r3, #0
    9aa6:	d1d2      	bne.n	9a4e <main_loop+0x2a>
    9aa8:	7923      	ldrb	r3, [r4, #4]
    9aaa:	2b00      	cmp	r3, #0
    9aac:	d1cf      	bne.n	9a4e <main_loop+0x2a>
    9aae:	7963      	ldrb	r3, [r4, #5]
    9ab0:	2b00      	cmp	r3, #0
    9ab2:	d1cc      	bne.n	9a4e <main_loop+0x2a>
    9ab4:	79a3      	ldrb	r3, [r4, #6]
    9ab6:	2b01      	cmp	r3, #1
    9ab8:	d1c9      	bne.n	9a4e <main_loop+0x2a>
    9aba:	79e3      	ldrb	r3, [r4, #7]
    9abc:	2b80      	cmp	r3, #128	; 0x80
    9abe:	d1c6      	bne.n	9a4e <main_loop+0x2a>
				(uip_buf[7] == 0x80) && (uip_buf[8] == 0xC2) && (uip_buf[9] == 0x00) && (uip_buf[10] == 0x00) && (uip_buf[11] == 0x01) && (*((unsigned short int *)&(uip_buf[12])) == 0x01E0) &&
    9ac0:	7a23      	ldrb	r3, [r4, #8]
    9ac2:	2bc2      	cmp	r3, #194	; 0xc2
    9ac4:	d1c3      	bne.n	9a4e <main_loop+0x2a>
    9ac6:	7a63      	ldrb	r3, [r4, #9]
    9ac8:	2b00      	cmp	r3, #0
    9aca:	d1c0      	bne.n	9a4e <main_loop+0x2a>
    9acc:	7aa3      	ldrb	r3, [r4, #10]
    9ace:	2b00      	cmp	r3, #0
    9ad0:	d1bd      	bne.n	9a4e <main_loop+0x2a>
    9ad2:	7ae3      	ldrb	r3, [r4, #11]
    9ad4:	2b01      	cmp	r3, #1
    9ad6:	d1ba      	bne.n	9a4e <main_loop+0x2a>
    9ad8:	89a3      	ldrh	r3, [r4, #12]
    9ada:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
    9ade:	d1b6      	bne.n	9a4e <main_loop+0x2a>
    9ae0:	7f62      	ldrb	r2, [r4, #29]
    9ae2:	4b63      	ldr	r3, [pc, #396]	; (9c70 <main_loop+0x24c>)
    9ae4:	781b      	ldrb	r3, [r3, #0]
    9ae6:	429a      	cmp	r2, r3
    9ae8:	d1b1      	bne.n	9a4e <main_loop+0x2a>
				(uip_buf[29] == mac_raw[0]) && (uip_buf[30] == mac_raw[1]) && (uip_buf[31] == mac_raw[2]) && (uip_buf[32] == mac_raw[3]) && (uip_buf[33] == mac_raw[4]) && (uip_buf[34] == mac_raw[5])) {
    9aea:	7fa2      	ldrb	r2, [r4, #30]
    9aec:	4b60      	ldr	r3, [pc, #384]	; (9c70 <main_loop+0x24c>)
    9aee:	785b      	ldrb	r3, [r3, #1]
    9af0:	429a      	cmp	r2, r3
    9af2:	d1ac      	bne.n	9a4e <main_loop+0x2a>
    9af4:	7fe2      	ldrb	r2, [r4, #31]
    9af6:	4b5e      	ldr	r3, [pc, #376]	; (9c70 <main_loop+0x24c>)
    9af8:	789b      	ldrb	r3, [r3, #2]
    9afa:	429a      	cmp	r2, r3
    9afc:	d1a7      	bne.n	9a4e <main_loop+0x2a>
    9afe:	f894 2020 	ldrb.w	r2, [r4, #32]
    9b02:	4b5b      	ldr	r3, [pc, #364]	; (9c70 <main_loop+0x24c>)
    9b04:	78db      	ldrb	r3, [r3, #3]
    9b06:	429a      	cmp	r2, r3
    9b08:	d1a1      	bne.n	9a4e <main_loop+0x2a>
    9b0a:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    9b0e:	4b58      	ldr	r3, [pc, #352]	; (9c70 <main_loop+0x24c>)
    9b10:	791b      	ldrb	r3, [r3, #4]
    9b12:	429a      	cmp	r2, r3
    9b14:	d19b      	bne.n	9a4e <main_loop+0x2a>
    9b16:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
    9b1a:	4b55      	ldr	r3, [pc, #340]	; (9c70 <main_loop+0x24c>)
    9b1c:	795b      	ldrb	r3, [r3, #5]
    9b1e:	429a      	cmp	r2, r3
    9b20:	d195      	bne.n	9a4e <main_loop+0x2a>
					bpdu_arrived = 1;
    9b22:	2301      	movs	r3, #1
    9b24:	9305      	str	r3, [sp, #20]
    9b26:	e7a0      	b.n	9a6a <main_loop+0x46>
						uip_input();
    9b28:	2001      	movs	r0, #1
    9b2a:	4b52      	ldr	r3, [pc, #328]	; (9c74 <main_loop+0x250>)
    9b2c:	4798      	blx	r3
						if (uip_len > 0) {
    9b2e:	f8bb 3000 	ldrh.w	r3, [fp]
    9b32:	2b00      	cmp	r3, #0
    9b34:	d099      	beq.n	9a6a <main_loop+0x46>
							uip_arp_out();
    9b36:	4b50      	ldr	r3, [pc, #320]	; (9c78 <main_loop+0x254>)
    9b38:	4798      	blx	r3
							mac_async_write(&ETHERNET_MAC_0, (uint8_t *)&uip_buf[0], uip_len);
    9b3a:	f8bb 2000 	ldrh.w	r2, [fp]
    9b3e:	4621      	mov	r1, r4
    9b40:	4849      	ldr	r0, [pc, #292]	; (9c68 <main_loop+0x244>)
    9b42:	4b4e      	ldr	r3, [pc, #312]	; (9c7c <main_loop+0x258>)
    9b44:	4798      	blx	r3
    9b46:	e790      	b.n	9a6a <main_loop+0x46>
						uip_arp_arpin();
    9b48:	4b4d      	ldr	r3, [pc, #308]	; (9c80 <main_loop+0x25c>)
    9b4a:	4798      	blx	r3
						if (uip_len > 0) {
    9b4c:	f8bb 2000 	ldrh.w	r2, [fp]
    9b50:	2a00      	cmp	r2, #0
    9b52:	d08a      	beq.n	9a6a <main_loop+0x46>
							mac_async_write(&ETHERNET_MAC_0, (uint8_t *)&uip_buf[0], uip_len);
    9b54:	4621      	mov	r1, r4
    9b56:	4844      	ldr	r0, [pc, #272]	; (9c68 <main_loop+0x244>)
    9b58:	4b48      	ldr	r3, [pc, #288]	; (9c7c <main_loop+0x258>)
    9b5a:	4798      	blx	r3
    9b5c:	e785      	b.n	9a6a <main_loop+0x46>
			if (etherloop == 5) {
    9b5e:	2d05      	cmp	r5, #5
    9b60:	d013      	beq.n	9b8a <main_loop+0x166>
			else if (!stormstate) {
    9b62:	4b48      	ldr	r3, [pc, #288]	; (9c84 <main_loop+0x260>)
    9b64:	781b      	ldrb	r3, [r3, #0]
				broadcast_storm = 0;
    9b66:	2b00      	cmp	r3, #0
    9b68:	9a06      	ldr	r2, [sp, #24]
    9b6a:	bf08      	it	eq
    9b6c:	461a      	moveq	r2, r3
    9b6e:	9206      	str	r2, [sp, #24]
			if (ip_periodic_check) {
    9b70:	4b45      	ldr	r3, [pc, #276]	; (9c88 <main_loop+0x264>)
    9b72:	781b      	ldrb	r3, [r3, #0]
    9b74:	2b00      	cmp	r3, #0
    9b76:	d043      	beq.n	9c00 <main_loop+0x1dc>
				ip_periodic_check = 0;
    9b78:	2200      	movs	r2, #0
    9b7a:	4b43      	ldr	r3, [pc, #268]	; (9c88 <main_loop+0x264>)
    9b7c:	701a      	strb	r2, [r3, #0]
    9b7e:	4c43      	ldr	r4, [pc, #268]	; (9c8c <main_loop+0x268>)
    9b80:	f504 6891 	add.w	r8, r4, #1160	; 0x488
					uip_periodic(loop);
    9b84:	4e42      	ldr	r6, [pc, #264]	; (9c90 <main_loop+0x26c>)
    9b86:	4d3b      	ldr	r5, [pc, #236]	; (9c74 <main_loop+0x250>)
    9b88:	e011      	b.n	9bae <main_loop+0x18a>
				if (!broadcast_storm) {
    9b8a:	9b06      	ldr	r3, [sp, #24]
    9b8c:	2b00      	cmp	r3, #0
    9b8e:	d1ef      	bne.n	9b70 <main_loop+0x14c>
					xprintf("ETHERNET: [broadcast storm] !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n");
    9b90:	4840      	ldr	r0, [pc, #256]	; (9c94 <main_loop+0x270>)
    9b92:	4b41      	ldr	r3, [pc, #260]	; (9c98 <main_loop+0x274>)
    9b94:	4798      	blx	r3
					writeKSZreg(SPI_KSZ8794_PORT4CONTROL2, 0x00);
    9b96:	2100      	movs	r1, #0
    9b98:	2052      	movs	r0, #82	; 0x52
    9b9a:	4b40      	ldr	r3, [pc, #256]	; (9c9c <main_loop+0x278>)
    9b9c:	4798      	blx	r3
					stormstate = 1;
    9b9e:	2301      	movs	r3, #1
    9ba0:	4a38      	ldr	r2, [pc, #224]	; (9c84 <main_loop+0x260>)
    9ba2:	7013      	strb	r3, [r2, #0]
					broadcast_storm = 1;
    9ba4:	9306      	str	r3, [sp, #24]
    9ba6:	e7e3      	b.n	9b70 <main_loop+0x14c>
    9ba8:	3474      	adds	r4, #116	; 0x74
				for (loop = 0; loop < UIP_UDP_CONNS; loop++) {
    9baa:	4544      	cmp	r4, r8
    9bac:	d00f      	beq.n	9bce <main_loop+0x1aa>
					uip_periodic(loop);
    9bae:	6034      	str	r4, [r6, #0]
    9bb0:	2002      	movs	r0, #2
    9bb2:	47a8      	blx	r5
					if (uip_len > 0) {
    9bb4:	f8bb 3000 	ldrh.w	r3, [fp]
    9bb8:	2b00      	cmp	r3, #0
    9bba:	d0f5      	beq.n	9ba8 <main_loop+0x184>
						uip_arp_out();
    9bbc:	4b2e      	ldr	r3, [pc, #184]	; (9c78 <main_loop+0x254>)
    9bbe:	4798      	blx	r3
						mac_async_write(&ETHERNET_MAC_0, (uint8_t *)&uip_buf[0], uip_len);
    9bc0:	f8bb 2000 	ldrh.w	r2, [fp]
    9bc4:	4926      	ldr	r1, [pc, #152]	; (9c60 <main_loop+0x23c>)
    9bc6:	4828      	ldr	r0, [pc, #160]	; (9c68 <main_loop+0x244>)
    9bc8:	4b2c      	ldr	r3, [pc, #176]	; (9c7c <main_loop+0x258>)
    9bca:	4798      	blx	r3
    9bcc:	e7ec      	b.n	9ba8 <main_loop+0x184>
    9bce:	4c34      	ldr	r4, [pc, #208]	; (9ca0 <main_loop+0x27c>)
    9bd0:	f504 787a 	add.w	r8, r4, #1000	; 0x3e8
					uip_udp_periodic(loop);
    9bd4:	4e33      	ldr	r6, [pc, #204]	; (9ca4 <main_loop+0x280>)
    9bd6:	4d27      	ldr	r5, [pc, #156]	; (9c74 <main_loop+0x250>)
    9bd8:	e002      	b.n	9be0 <main_loop+0x1bc>
    9bda:	3464      	adds	r4, #100	; 0x64
				for (loop = 0; loop < UIP_UDP_CONNS; loop++) {
    9bdc:	45a0      	cmp	r8, r4
    9bde:	d00f      	beq.n	9c00 <main_loop+0x1dc>
					uip_udp_periodic(loop);
    9be0:	6034      	str	r4, [r6, #0]
    9be2:	2005      	movs	r0, #5
    9be4:	47a8      	blx	r5
					if (uip_len > 0) {
    9be6:	f8bb 3000 	ldrh.w	r3, [fp]
    9bea:	2b00      	cmp	r3, #0
    9bec:	d0f5      	beq.n	9bda <main_loop+0x1b6>
						uip_arp_out();
    9bee:	4b22      	ldr	r3, [pc, #136]	; (9c78 <main_loop+0x254>)
    9bf0:	4798      	blx	r3
						mac_async_write(&ETHERNET_MAC_0, (uint8_t *)&uip_buf[0], uip_len);
    9bf2:	f8bb 2000 	ldrh.w	r2, [fp]
    9bf6:	491a      	ldr	r1, [pc, #104]	; (9c60 <main_loop+0x23c>)
    9bf8:	481b      	ldr	r0, [pc, #108]	; (9c68 <main_loop+0x244>)
    9bfa:	4b20      	ldr	r3, [pc, #128]	; (9c7c <main_loop+0x258>)
    9bfc:	4798      	blx	r3
    9bfe:	e7ec      	b.n	9bda <main_loop+0x1b6>
			if (arp_check) {
    9c00:	4b29      	ldr	r3, [pc, #164]	; (9ca8 <main_loop+0x284>)
    9c02:	781b      	ldrb	r3, [r3, #0]
    9c04:	b913      	cbnz	r3, 9c0c <main_loop+0x1e8>
			eth_check = 0;
    9c06:	2300      	movs	r3, #0
    9c08:	9304      	str	r3, [sp, #16]
    9c0a:	e38e      	b.n	a32a <main_loop+0x906>
				arp_check = 0;
    9c0c:	2400      	movs	r4, #0
    9c0e:	4b26      	ldr	r3, [pc, #152]	; (9ca8 <main_loop+0x284>)
    9c10:	701c      	strb	r4, [r3, #0]
				uip_arp_timer();
    9c12:	4b26      	ldr	r3, [pc, #152]	; (9cac <main_loop+0x288>)
    9c14:	4798      	blx	r3
			eth_check = 0;
    9c16:	9404      	str	r4, [sp, #16]
    9c18:	e387      	b.n	a32a <main_loop+0x906>
				xprintf("Write ADC gain settings for VibraTek CardA\r\n");
    9c1a:	4825      	ldr	r0, [pc, #148]	; (9cb0 <main_loop+0x28c>)
    9c1c:	4b1e      	ldr	r3, [pc, #120]	; (9c98 <main_loop+0x274>)
    9c1e:	4798      	blx	r3
				if ((err = I2C_setGAIN(PC27_CARDA_I2C_SDA,  PC28_CARDA_I2C_CLK, ((CONFIG *)&settings_buffer)->gain_cardA)) < 0) {
    9c20:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
    9c24:	215c      	movs	r1, #92	; 0x5c
    9c26:	205b      	movs	r0, #91	; 0x5b
    9c28:	4b22      	ldr	r3, [pc, #136]	; (9cb4 <main_loop+0x290>)
    9c2a:	4798      	blx	r3
    9c2c:	1e01      	subs	r1, r0, #0
    9c2e:	f280 8388 	bge.w	a342 <main_loop+0x91e>
					xprintf("Could NOT write to the DAC Gain controller on CARDA:I2C [%i]\r\n", err);
    9c32:	4821      	ldr	r0, [pc, #132]	; (9cb8 <main_loop+0x294>)
    9c34:	4b18      	ldr	r3, [pc, #96]	; (9c98 <main_loop+0x274>)
    9c36:	4798      	blx	r3
    9c38:	e383      	b.n	a342 <main_loop+0x91e>
				xprintf("Write ADC gain settings for VibraTek CardB\r\n");
    9c3a:	4820      	ldr	r0, [pc, #128]	; (9cbc <main_loop+0x298>)
    9c3c:	4b16      	ldr	r3, [pc, #88]	; (9c98 <main_loop+0x274>)
    9c3e:	4798      	blx	r3
				if (( err = I2C_setGAIN(PB24_CARDB_I2C_SDA,  PB25_CARDB_I2C_CLK, ((CONFIG *)&settings_buffer)->gain_cardB)) < 0) {
    9c40:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
    9c44:	2139      	movs	r1, #57	; 0x39
    9c46:	2038      	movs	r0, #56	; 0x38
    9c48:	4b1a      	ldr	r3, [pc, #104]	; (9cb4 <main_loop+0x290>)
    9c4a:	4798      	blx	r3
    9c4c:	1e01      	subs	r1, r0, #0
    9c4e:	f280 837d 	bge.w	a34c <main_loop+0x928>
					xprintf("Could NOT write to the DAC Gain controller on CARDB:I2C [%i]\r\n", err);
    9c52:	481b      	ldr	r0, [pc, #108]	; (9cc0 <main_loop+0x29c>)
    9c54:	4b10      	ldr	r3, [pc, #64]	; (9c98 <main_loop+0x274>)
    9c56:	4798      	blx	r3
    9c58:	e378      	b.n	a34c <main_loop+0x928>
    9c5a:	bf00      	nop
    9c5c:	20007f2c 	.word	0x20007f2c
    9c60:	20008654 	.word	0x20008654
    9c64:	0000cabd 	.word	0x0000cabd
    9c68:	2000752c 	.word	0x2000752c
    9c6c:	000019a1 	.word	0x000019a1
    9c70:	20007fac 	.word	0x20007fac
    9c74:	0000bd41 	.word	0x0000bd41
    9c78:	0000cd8d 	.word	0x0000cd8d
    9c7c:	00001965 	.word	0x00001965
    9c80:	0000cca5 	.word	0x0000cca5
    9c84:	20008560 	.word	0x20008560
    9c88:	20007860 	.word	0x20007860
    9c8c:	2000859c 	.word	0x2000859c
    9c90:	20008598 	.word	0x20008598
    9c94:	000104e0 	.word	0x000104e0
    9c98:	0000031d 	.word	0x0000031d
    9c9c:	0000dbc9 	.word	0x0000dbc9
    9ca0:	20008cfc 	.word	0x20008cfc
    9ca4:	20008590 	.word	0x20008590
    9ca8:	20007fbe 	.word	0x20007fbe
    9cac:	0000cc5d 	.word	0x0000cc5d
    9cb0:	00010534 	.word	0x00010534
    9cb4:	00006c11 	.word	0x00006c11
    9cb8:	0000ec48 	.word	0x0000ec48
    9cbc:	00010564 	.word	0x00010564
    9cc0:	0000edfc 	.word	0x0000edfc
    9cc4:	20008580 	.word	0x20008580
    9cc8:	000019d1 	.word	0x000019d1
    9ccc:	f8df a2b0 	ldr.w	sl, [pc, #688]	; 9f80 <main_loop+0x55c>
    9cd0:	f04f 0820 	mov.w	r8, #32
    9cd4:	f8ca 8094 	str.w	r8, [sl, #148]	; 0x94
			command_dataw[0] = 0x30 + (ADC_CH0 << 1);
    9cd8:	4e85      	ldr	r6, [pc, #532]	; (9ef0 <main_loop+0x4cc>)
    9cda:	2330      	movs	r3, #48	; 0x30
    9cdc:	7033      	strb	r3, [r6, #0]
			command_dataw[1] = 0x00;
    9cde:	f04f 0900 	mov.w	r9, #0
    9ce2:	f886 9001 	strb.w	r9, [r6, #1]
			command_dataw[2] = 0x00;
    9ce6:	f886 9002 	strb.w	r9, [r6, #2]
			p_xfer.txbuf = (uint8_t *)&command_dataw;
    9cea:	4d82      	ldr	r5, [pc, #520]	; (9ef4 <main_loop+0x4d0>)
    9cec:	602e      	str	r6, [r5, #0]
			p_xfer.rxbuf = (uint8_t *)&command_datar;
    9cee:	4c82      	ldr	r4, [pc, #520]	; (9ef8 <main_loop+0x4d4>)
    9cf0:	606c      	str	r4, [r5, #4]
			p_xfer.size = 3;
    9cf2:	2303      	movs	r3, #3
    9cf4:	60ab      	str	r3, [r5, #8]
			spi_m_sync_transfer(&SPI_0, &p_xfer);
    9cf6:	4629      	mov	r1, r5
    9cf8:	4880      	ldr	r0, [pc, #512]	; (9efc <main_loop+0x4d8>)
    9cfa:	4b81      	ldr	r3, [pc, #516]	; (9f00 <main_loop+0x4dc>)
    9cfc:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    9cfe:	f8ca 8098 	str.w	r8, [sl, #152]	; 0x98
			command_datar[2] = 0x80 + ((command_datar[2] >> 1) & 0x7C);
    9d02:	78a3      	ldrb	r3, [r4, #2]
    9d04:	085b      	lsrs	r3, r3, #1
    9d06:	f003 037c 	and.w	r3, r3, #124	; 0x7c
    9d0a:	3b80      	subs	r3, #128	; 0x80
    9d0c:	70a3      	strb	r3, [r4, #2]
			cardAch0_samplebuffer[card_sampleindex] = command_datar[1];
    9d0e:	4b7d      	ldr	r3, [pc, #500]	; (9f04 <main_loop+0x4e0>)
    9d10:	681b      	ldr	r3, [r3, #0]
    9d12:	7861      	ldrb	r1, [r4, #1]
    9d14:	4a7c      	ldr	r2, [pc, #496]	; (9f08 <main_loop+0x4e4>)
    9d16:	54d1      	strb	r1, [r2, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    9d18:	f8ca 8094 	str.w	r8, [sl, #148]	; 0x94
			command_dataw[0] = 0x30 + (ADC_CH1 << 1);
    9d1c:	2332      	movs	r3, #50	; 0x32
    9d1e:	7033      	strb	r3, [r6, #0]
			command_dataw[1] = 0x00;
    9d20:	f886 9001 	strb.w	r9, [r6, #1]
			command_dataw[2] = 0x00;
    9d24:	f886 9002 	strb.w	r9, [r6, #2]
			p_xfer.txbuf = (uint8_t *)&command_dataw;
    9d28:	602e      	str	r6, [r5, #0]
			p_xfer.rxbuf = (uint8_t *)&command_datar;
    9d2a:	606c      	str	r4, [r5, #4]
			p_xfer.size = 3;
    9d2c:	2303      	movs	r3, #3
    9d2e:	60ab      	str	r3, [r5, #8]
			spi_m_sync_transfer(&SPI_0, &p_xfer);
    9d30:	4629      	mov	r1, r5
    9d32:	4872      	ldr	r0, [pc, #456]	; (9efc <main_loop+0x4d8>)
    9d34:	4b72      	ldr	r3, [pc, #456]	; (9f00 <main_loop+0x4dc>)
    9d36:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    9d38:	f8ca 8098 	str.w	r8, [sl, #152]	; 0x98
			command_datar[2] = 0x80 + ((command_datar[2] >> 1) & 0x7C);
    9d3c:	78a3      	ldrb	r3, [r4, #2]
    9d3e:	085b      	lsrs	r3, r3, #1
    9d40:	f003 037c 	and.w	r3, r3, #124	; 0x7c
    9d44:	3b80      	subs	r3, #128	; 0x80
    9d46:	70a3      	strb	r3, [r4, #2]
			cardAch1_samplebuffer[card_sampleindex] = command_datar[1];
    9d48:	4b6e      	ldr	r3, [pc, #440]	; (9f04 <main_loop+0x4e0>)
    9d4a:	681b      	ldr	r3, [r3, #0]
    9d4c:	7861      	ldrb	r1, [r4, #1]
    9d4e:	4a6f      	ldr	r2, [pc, #444]	; (9f0c <main_loop+0x4e8>)
    9d50:	54d1      	strb	r1, [r2, r3]
			if (!card_sampleindex) {
    9d52:	2b00      	cmp	r3, #0
    9d54:	d169      	bne.n	9e2a <main_loop+0x406>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    9d56:	46d0      	mov	r8, sl
    9d58:	f04f 0920 	mov.w	r9, #32
    9d5c:	f8ca 9094 	str.w	r9, [sl, #148]	; 0x94
				command_dataw[0] = 0x30 + (ADC_CH2 << 1);
    9d60:	2334      	movs	r3, #52	; 0x34
    9d62:	7033      	strb	r3, [r6, #0]
				command_dataw[1] = 0x00;
    9d64:	f04f 0a00 	mov.w	sl, #0
    9d68:	f886 a001 	strb.w	sl, [r6, #1]
				command_dataw[2] = 0x00;
    9d6c:	f886 a002 	strb.w	sl, [r6, #2]
				p_xfer.txbuf = (uint8_t *)&command_dataw;
    9d70:	602e      	str	r6, [r5, #0]
				p_xfer.rxbuf = (uint8_t *)&command_datar;
    9d72:	606c      	str	r4, [r5, #4]
				p_xfer.size = 3;
    9d74:	2303      	movs	r3, #3
    9d76:	60ab      	str	r3, [r5, #8]
				spi_m_sync_transfer(&SPI_0, &p_xfer);
    9d78:	4629      	mov	r1, r5
    9d7a:	4860      	ldr	r0, [pc, #384]	; (9efc <main_loop+0x4d8>)
    9d7c:	4b60      	ldr	r3, [pc, #384]	; (9f00 <main_loop+0x4dc>)
    9d7e:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    9d80:	f8c8 9098 	str.w	r9, [r8, #152]	; 0x98
				command_datar[2] = 0x80 + ((command_datar[2] >> 1) & 0x7C);
    9d84:	78a3      	ldrb	r3, [r4, #2]
    9d86:	085b      	lsrs	r3, r3, #1
    9d88:	f003 037c 	and.w	r3, r3, #124	; 0x7c
    9d8c:	3b80      	subs	r3, #128	; 0x80
    9d8e:	70a3      	strb	r3, [r4, #2]
				cardAch2_samplebuffer = command_datar[1];
    9d90:	7862      	ldrb	r2, [r4, #1]
    9d92:	4b5f      	ldr	r3, [pc, #380]	; (9f10 <main_loop+0x4ec>)
    9d94:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    9d96:	f8c8 9094 	str.w	r9, [r8, #148]	; 0x94
				command_dataw[0] = 0x30 + (ADC_CH3 << 1);
    9d9a:	2336      	movs	r3, #54	; 0x36
    9d9c:	7033      	strb	r3, [r6, #0]
				command_dataw[1] = 0x00;
    9d9e:	f886 a001 	strb.w	sl, [r6, #1]
				command_dataw[2] = 0x00;
    9da2:	f886 a002 	strb.w	sl, [r6, #2]
				p_xfer.txbuf = (uint8_t *)&command_dataw;
    9da6:	602e      	str	r6, [r5, #0]
				p_xfer.rxbuf = (uint8_t *)&command_datar;
    9da8:	606c      	str	r4, [r5, #4]
				p_xfer.size = 3;
    9daa:	2303      	movs	r3, #3
    9dac:	60ab      	str	r3, [r5, #8]
				spi_m_sync_transfer(&SPI_0, &p_xfer);
    9dae:	4629      	mov	r1, r5
    9db0:	4852      	ldr	r0, [pc, #328]	; (9efc <main_loop+0x4d8>)
    9db2:	4b53      	ldr	r3, [pc, #332]	; (9f00 <main_loop+0x4dc>)
    9db4:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    9db6:	f8c8 9098 	str.w	r9, [r8, #152]	; 0x98
				command_datar[2] = 0x80 + ((command_datar[2] >> 1) & 0x7C);
    9dba:	78a3      	ldrb	r3, [r4, #2]
    9dbc:	085b      	lsrs	r3, r3, #1
    9dbe:	f003 037c 	and.w	r3, r3, #124	; 0x7c
    9dc2:	3b80      	subs	r3, #128	; 0x80
    9dc4:	70a3      	strb	r3, [r4, #2]
				cardAch3_samplebuffer = command_datar[1];
    9dc6:	7862      	ldrb	r2, [r4, #1]
    9dc8:	4b52      	ldr	r3, [pc, #328]	; (9f14 <main_loop+0x4f0>)
    9dca:	701a      	strb	r2, [r3, #0]
    9dcc:	e02d      	b.n	9e2a <main_loop+0x406>
			delay_us(50);
    9dce:	2032      	movs	r0, #50	; 0x32
    9dd0:	4b51      	ldr	r3, [pc, #324]	; (9f18 <main_loop+0x4f4>)
    9dd2:	4798      	blx	r3
    9dd4:	e029      	b.n	9e2a <main_loop+0x406>
			if (miniA_chan) {
    9dd6:	4b51      	ldr	r3, [pc, #324]	; (9f1c <main_loop+0x4f8>)
    9dd8:	781b      	ldrb	r3, [r3, #0]
    9dda:	2b00      	cmp	r3, #0
    9ddc:	d065      	beq.n	9eaa <main_loop+0x486>
				if ((err = I2C_readMONITOREDINPUT(PC27_CARDA_I2C_SDA,  PC28_CARDA_I2C_CLK, &miniIO_A1_adcH,  &miniIO_A1_adcL))) {
    9dde:	4b50      	ldr	r3, [pc, #320]	; (9f20 <main_loop+0x4fc>)
    9de0:	4a50      	ldr	r2, [pc, #320]	; (9f24 <main_loop+0x500>)
    9de2:	215c      	movs	r1, #92	; 0x5c
    9de4:	205b      	movs	r0, #91	; 0x5b
    9de6:	4c50      	ldr	r4, [pc, #320]	; (9f28 <main_loop+0x504>)
    9de8:	47a0      	blx	r4
    9dea:	4601      	mov	r1, r0
    9dec:	b110      	cbz	r0, 9df4 <main_loop+0x3d0>
					xprintf("Could NOT read from the Mini-IO ADC on CARDA:I2C [%i]\r\n", err);
    9dee:	484f      	ldr	r0, [pc, #316]	; (9f2c <main_loop+0x508>)
    9df0:	4b4f      	ldr	r3, [pc, #316]	; (9f30 <main_loop+0x50c>)
    9df2:	4798      	blx	r3
				if ((err = I2C_configMONITOREDINPUTS(PC27_CARDA_I2C_SDA,  PC28_CARDA_I2C_CLK, 0))) {
    9df4:	2200      	movs	r2, #0
    9df6:	215c      	movs	r1, #92	; 0x5c
    9df8:	205b      	movs	r0, #91	; 0x5b
    9dfa:	4b4e      	ldr	r3, [pc, #312]	; (9f34 <main_loop+0x510>)
    9dfc:	4798      	blx	r3
    9dfe:	4601      	mov	r1, r0
    9e00:	b110      	cbz	r0, 9e08 <main_loop+0x3e4>
					xprintf("Could NOT write to the Mini-IO ADC controller on CARDA:I2C [%i]\r\n", err);
    9e02:	484d      	ldr	r0, [pc, #308]	; (9f38 <main_loop+0x514>)
    9e04:	4b4a      	ldr	r3, [pc, #296]	; (9f30 <main_loop+0x50c>)
    9e06:	4798      	blx	r3
			if ((err = I2C_setEXPANDER(PC27_CARDA_I2C_SDA,  PC28_CARDA_I2C_CLK, miniIO_A_relay))) {
    9e08:	4b4c      	ldr	r3, [pc, #304]	; (9f3c <main_loop+0x518>)
    9e0a:	781a      	ldrb	r2, [r3, #0]
    9e0c:	215c      	movs	r1, #92	; 0x5c
    9e0e:	205b      	movs	r0, #91	; 0x5b
    9e10:	4b4b      	ldr	r3, [pc, #300]	; (9f40 <main_loop+0x51c>)
    9e12:	4798      	blx	r3
    9e14:	4601      	mov	r1, r0
    9e16:	2800      	cmp	r0, #0
    9e18:	d15e      	bne.n	9ed8 <main_loop+0x4b4>
			if ((err = I2C_readEXPANDER(PC27_CARDA_I2C_SDA,  PC28_CARDA_I2C_CLK, &miniIO_A_inputs))) {
    9e1a:	4a4a      	ldr	r2, [pc, #296]	; (9f44 <main_loop+0x520>)
    9e1c:	215c      	movs	r1, #92	; 0x5c
    9e1e:	205b      	movs	r0, #91	; 0x5b
    9e20:	4b49      	ldr	r3, [pc, #292]	; (9f48 <main_loop+0x524>)
    9e22:	4798      	blx	r3
    9e24:	4601      	mov	r1, r0
    9e26:	2800      	cmp	r0, #0
    9e28:	d15a      	bne.n	9ee0 <main_loop+0x4bc>
		if (((cardB_type == CARD_VIBRATEK) || (cardB_type == CARD_VIBRAPOINT)) && (card_sampleindex < SAMPLE_BUFFER_SIZE)) {
    9e2a:	4b48      	ldr	r3, [pc, #288]	; (9f4c <main_loop+0x528>)
    9e2c:	781b      	ldrb	r3, [r3, #0]
    9e2e:	2b01      	cmp	r3, #1
    9e30:	f000 8509 	beq.w	a846 <main_loop+0xe22>
    9e34:	2b04      	cmp	r3, #4
    9e36:	f000 8506 	beq.w	a846 <main_loop+0xe22>
		} else if (cardB_type == CARD_MAXI_IO)  {
    9e3a:	2b03      	cmp	r3, #3
    9e3c:	f000 8124 	beq.w	a088 <main_loop+0x664>
		} else if (cardB_type == CARD_MINI_IO)  {
    9e40:	2b02      	cmp	r3, #2
    9e42:	f040 8141 	bne.w	a0c8 <main_loop+0x6a4>
			if (miniB_chan) {
    9e46:	4b42      	ldr	r3, [pc, #264]	; (9f50 <main_loop+0x52c>)
    9e48:	781b      	ldrb	r3, [r3, #0]
    9e4a:	2b00      	cmp	r3, #0
    9e4c:	f000 8120 	beq.w	a090 <main_loop+0x66c>
				if ((err = I2C_readMONITOREDINPUT(PB24_CARDB_I2C_SDA,  PB25_CARDB_I2C_CLK, &miniIO_B1_adcH,  &miniIO_B1_adcL))) {
    9e50:	4b40      	ldr	r3, [pc, #256]	; (9f54 <main_loop+0x530>)
    9e52:	4a41      	ldr	r2, [pc, #260]	; (9f58 <main_loop+0x534>)
    9e54:	2139      	movs	r1, #57	; 0x39
    9e56:	2038      	movs	r0, #56	; 0x38
    9e58:	4c33      	ldr	r4, [pc, #204]	; (9f28 <main_loop+0x504>)
    9e5a:	47a0      	blx	r4
    9e5c:	4601      	mov	r1, r0
    9e5e:	b110      	cbz	r0, 9e66 <main_loop+0x442>
					xprintf("Could NOT read from the Mini-IO ADC on CARDB:I2C [%i]\r\n", err);
    9e60:	483e      	ldr	r0, [pc, #248]	; (9f5c <main_loop+0x538>)
    9e62:	4b33      	ldr	r3, [pc, #204]	; (9f30 <main_loop+0x50c>)
    9e64:	4798      	blx	r3
				if ((err = I2C_configMONITOREDINPUTS(PB24_CARDB_I2C_SDA,  PB25_CARDB_I2C_CLK, 0))) {
    9e66:	2200      	movs	r2, #0
    9e68:	2139      	movs	r1, #57	; 0x39
    9e6a:	2038      	movs	r0, #56	; 0x38
    9e6c:	4b31      	ldr	r3, [pc, #196]	; (9f34 <main_loop+0x510>)
    9e6e:	4798      	blx	r3
    9e70:	4601      	mov	r1, r0
    9e72:	b110      	cbz	r0, 9e7a <main_loop+0x456>
					xprintf("Could NOT write to the Mini-IO ADC controller on CARDB:I2C [%i]\r\n", err);
    9e74:	483a      	ldr	r0, [pc, #232]	; (9f60 <main_loop+0x53c>)
    9e76:	4b2e      	ldr	r3, [pc, #184]	; (9f30 <main_loop+0x50c>)
    9e78:	4798      	blx	r3
			if ((err = I2C_setEXPANDER(PB24_CARDB_I2C_SDA,  PB25_CARDB_I2C_CLK, miniIO_B_relay))) {
    9e7a:	4b3a      	ldr	r3, [pc, #232]	; (9f64 <main_loop+0x540>)
    9e7c:	781a      	ldrb	r2, [r3, #0]
    9e7e:	2139      	movs	r1, #57	; 0x39
    9e80:	2038      	movs	r0, #56	; 0x38
    9e82:	4b2f      	ldr	r3, [pc, #188]	; (9f40 <main_loop+0x51c>)
    9e84:	4798      	blx	r3
    9e86:	4601      	mov	r1, r0
    9e88:	2800      	cmp	r0, #0
    9e8a:	f040 8119 	bne.w	a0c0 <main_loop+0x69c>
			if ((err = I2C_readEXPANDER(PB24_CARDB_I2C_SDA,  PB25_CARDB_I2C_CLK, &miniIO_B_inputs))) {
    9e8e:	4a36      	ldr	r2, [pc, #216]	; (9f68 <main_loop+0x544>)
    9e90:	2139      	movs	r1, #57	; 0x39
    9e92:	2038      	movs	r0, #56	; 0x38
    9e94:	4b2c      	ldr	r3, [pc, #176]	; (9f48 <main_loop+0x524>)
    9e96:	4798      	blx	r3
    9e98:	4601      	mov	r1, r0
    9e9a:	2800      	cmp	r0, #0
    9e9c:	f000 84d9 	beq.w	a852 <main_loop+0xe2e>
				xprintf("Could NOT read from the Mini-IO EXPANDER on CARDB:I2C [%i]\r\n", err);
    9ea0:	4832      	ldr	r0, [pc, #200]	; (9f6c <main_loop+0x548>)
    9ea2:	4b23      	ldr	r3, [pc, #140]	; (9f30 <main_loop+0x50c>)
    9ea4:	4798      	blx	r3
    9ea6:	f000 bcd4 	b.w	a852 <main_loop+0xe2e>
				if ((err = I2C_readMONITOREDINPUT(PC27_CARDA_I2C_SDA,  PC28_CARDA_I2C_CLK, &miniIO_A0_adcH,  &miniIO_A0_adcL))) {
    9eaa:	4b31      	ldr	r3, [pc, #196]	; (9f70 <main_loop+0x54c>)
    9eac:	4a31      	ldr	r2, [pc, #196]	; (9f74 <main_loop+0x550>)
    9eae:	215c      	movs	r1, #92	; 0x5c
    9eb0:	205b      	movs	r0, #91	; 0x5b
    9eb2:	4c1d      	ldr	r4, [pc, #116]	; (9f28 <main_loop+0x504>)
    9eb4:	47a0      	blx	r4
    9eb6:	4601      	mov	r1, r0
    9eb8:	b110      	cbz	r0, 9ec0 <main_loop+0x49c>
					xprintf("Could NOT read from the Mini-IO ADC on CARDA:I2C [%i]\r\n", err);
    9eba:	481c      	ldr	r0, [pc, #112]	; (9f2c <main_loop+0x508>)
    9ebc:	4b1c      	ldr	r3, [pc, #112]	; (9f30 <main_loop+0x50c>)
    9ebe:	4798      	blx	r3
				if ((err = I2C_configMONITOREDINPUTS(PC27_CARDA_I2C_SDA,  PC28_CARDA_I2C_CLK, 1))) {
    9ec0:	2201      	movs	r2, #1
    9ec2:	215c      	movs	r1, #92	; 0x5c
    9ec4:	205b      	movs	r0, #91	; 0x5b
    9ec6:	4b1b      	ldr	r3, [pc, #108]	; (9f34 <main_loop+0x510>)
    9ec8:	4798      	blx	r3
    9eca:	4601      	mov	r1, r0
    9ecc:	2800      	cmp	r0, #0
    9ece:	d09b      	beq.n	9e08 <main_loop+0x3e4>
					xprintf("Could NOT write to the Mini-IO ADC controller on CARDA:I2C [%i]\r\n", err);
    9ed0:	4819      	ldr	r0, [pc, #100]	; (9f38 <main_loop+0x514>)
    9ed2:	4b17      	ldr	r3, [pc, #92]	; (9f30 <main_loop+0x50c>)
    9ed4:	4798      	blx	r3
    9ed6:	e797      	b.n	9e08 <main_loop+0x3e4>
				xprintf("Could NOT write to the Mini-IO EXPANDER on CARDA:I2C [%i]\r\n", err);
    9ed8:	4827      	ldr	r0, [pc, #156]	; (9f78 <main_loop+0x554>)
    9eda:	4b15      	ldr	r3, [pc, #84]	; (9f30 <main_loop+0x50c>)
    9edc:	4798      	blx	r3
    9ede:	e79c      	b.n	9e1a <main_loop+0x3f6>
				xprintf("Could NOT read from the Mini-IO EXPANDER on CARDA:I2C [%i]\r\n", err);
    9ee0:	4826      	ldr	r0, [pc, #152]	; (9f7c <main_loop+0x558>)
    9ee2:	4b13      	ldr	r3, [pc, #76]	; (9f30 <main_loop+0x50c>)
    9ee4:	4798      	blx	r3
    9ee6:	e7a0      	b.n	9e2a <main_loop+0x406>
		delay_us(50);
    9ee8:	2032      	movs	r0, #50	; 0x32
    9eea:	4b0b      	ldr	r3, [pc, #44]	; (9f18 <main_loop+0x4f4>)
    9eec:	4798      	blx	r3
    9eee:	e79c      	b.n	9e2a <main_loop+0x406>
    9ef0:	20007864 	.word	0x20007864
    9ef4:	20008568 	.word	0x20008568
    9ef8:	20007580 	.word	0x20007580
    9efc:	20007478 	.word	0x20007478
    9f00:	00001b81 	.word	0x00001b81
    9f04:	20008548 	.word	0x20008548
    9f08:	20008298 	.word	0x20008298
    9f0c:	20007c70 	.word	0x20007c70
    9f10:	2000784c 	.word	0x2000784c
    9f14:	20007576 	.word	0x20007576
    9f18:	000015a9 	.word	0x000015a9
    9f1c:	2000757a 	.word	0x2000757a
    9f20:	20007fb2 	.word	0x20007fb2
    9f24:	20008277 	.word	0x20008277
    9f28:	000057c5 	.word	0x000057c5
    9f2c:	00010594 	.word	0x00010594
    9f30:	0000031d 	.word	0x0000031d
    9f34:	0000550d 	.word	0x0000550d
    9f38:	000105cc 	.word	0x000105cc
    9f3c:	20007fb4 	.word	0x20007fb4
    9f40:	00006449 	.word	0x00006449
    9f44:	20007578 	.word	0x20007578
    9f48:	000067e5 	.word	0x000067e5
    9f4c:	20008564 	.word	0x20008564
    9f50:	20008276 	.word	0x20008276
    9f54:	20008563 	.word	0x20008563
    9f58:	20007590 	.word	0x20007590
    9f5c:	0001068c 	.word	0x0001068c
    9f60:	000106c4 	.word	0x000106c4
    9f64:	20007f1c 	.word	0x20007f1c
    9f68:	20008274 	.word	0x20008274
    9f6c:	00010744 	.word	0x00010744
    9f70:	20008556 	.word	0x20008556
    9f74:	20007c6c 	.word	0x20007c6c
    9f78:	00010610 	.word	0x00010610
    9f7c:	0001064c 	.word	0x0001064c
    9f80:	41008000 	.word	0x41008000
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    9f84:	f8df a300 	ldr.w	sl, [pc, #768]	; a288 <main_loop+0x864>
    9f88:	f04f 0840 	mov.w	r8, #64	; 0x40
    9f8c:	f8ca 8094 	str.w	r8, [sl, #148]	; 0x94
			command_dataw[0] = 0x30 + (ADC_CH0 << 1);
    9f90:	4e98      	ldr	r6, [pc, #608]	; (a1f4 <main_loop+0x7d0>)
    9f92:	2330      	movs	r3, #48	; 0x30
    9f94:	7033      	strb	r3, [r6, #0]
			command_dataw[1] = 0x00;
    9f96:	f04f 0900 	mov.w	r9, #0
    9f9a:	f886 9001 	strb.w	r9, [r6, #1]
			command_dataw[2] = 0x00;
    9f9e:	f886 9002 	strb.w	r9, [r6, #2]
			p_xfer.txbuf = (uint8_t *)&command_dataw;
    9fa2:	4d95      	ldr	r5, [pc, #596]	; (a1f8 <main_loop+0x7d4>)
    9fa4:	602e      	str	r6, [r5, #0]
			p_xfer.rxbuf = (uint8_t *)&command_datar;
    9fa6:	4c95      	ldr	r4, [pc, #596]	; (a1fc <main_loop+0x7d8>)
    9fa8:	606c      	str	r4, [r5, #4]
			p_xfer.size = 3;
    9faa:	2303      	movs	r3, #3
    9fac:	60ab      	str	r3, [r5, #8]
			spi_m_sync_transfer(&SPI_0, &p_xfer);
    9fae:	4629      	mov	r1, r5
    9fb0:	4893      	ldr	r0, [pc, #588]	; (a200 <main_loop+0x7dc>)
    9fb2:	4b94      	ldr	r3, [pc, #592]	; (a204 <main_loop+0x7e0>)
    9fb4:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    9fb6:	f8ca 8098 	str.w	r8, [sl, #152]	; 0x98
			command_datar[2] = 0x80 + ((command_datar[2] >> 1) & 0x7C);
    9fba:	78a3      	ldrb	r3, [r4, #2]
    9fbc:	085b      	lsrs	r3, r3, #1
    9fbe:	f003 037c 	and.w	r3, r3, #124	; 0x7c
    9fc2:	3b80      	subs	r3, #128	; 0x80
    9fc4:	70a3      	strb	r3, [r4, #2]
			cardBch0_samplebuffer[card_sampleindex] = command_datar[1];
    9fc6:	4b90      	ldr	r3, [pc, #576]	; (a208 <main_loop+0x7e4>)
    9fc8:	681b      	ldr	r3, [r3, #0]
    9fca:	7861      	ldrb	r1, [r4, #1]
    9fcc:	4a8f      	ldr	r2, [pc, #572]	; (a20c <main_loop+0x7e8>)
    9fce:	54d1      	strb	r1, [r2, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    9fd0:	f8ca 8094 	str.w	r8, [sl, #148]	; 0x94
			command_dataw[0] = 0x30 + (ADC_CH1 << 1);
    9fd4:	2332      	movs	r3, #50	; 0x32
    9fd6:	7033      	strb	r3, [r6, #0]
			command_dataw[1] = 0x00;
    9fd8:	f886 9001 	strb.w	r9, [r6, #1]
			command_dataw[2] = 0x00;
    9fdc:	f886 9002 	strb.w	r9, [r6, #2]
			p_xfer.txbuf = (uint8_t *)&command_dataw;
    9fe0:	602e      	str	r6, [r5, #0]
			p_xfer.rxbuf = (uint8_t *)&command_datar;
    9fe2:	606c      	str	r4, [r5, #4]
			p_xfer.size = 3;
    9fe4:	2303      	movs	r3, #3
    9fe6:	60ab      	str	r3, [r5, #8]
			spi_m_sync_transfer(&SPI_0, &p_xfer);
    9fe8:	4629      	mov	r1, r5
    9fea:	4885      	ldr	r0, [pc, #532]	; (a200 <main_loop+0x7dc>)
    9fec:	4b85      	ldr	r3, [pc, #532]	; (a204 <main_loop+0x7e0>)
    9fee:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    9ff0:	f8ca 8098 	str.w	r8, [sl, #152]	; 0x98
			command_datar[2] = 0x80 + ((command_datar[2] >> 1) & 0x7C);
    9ff4:	78a3      	ldrb	r3, [r4, #2]
    9ff6:	085b      	lsrs	r3, r3, #1
    9ff8:	f003 037c 	and.w	r3, r3, #124	; 0x7c
    9ffc:	3b80      	subs	r3, #128	; 0x80
    9ffe:	70a3      	strb	r3, [r4, #2]
			cardBch1_samplebuffer[card_sampleindex] = command_datar[1];
    a000:	4b81      	ldr	r3, [pc, #516]	; (a208 <main_loop+0x7e4>)
    a002:	681b      	ldr	r3, [r3, #0]
    a004:	7861      	ldrb	r1, [r4, #1]
    a006:	4a82      	ldr	r2, [pc, #520]	; (a210 <main_loop+0x7ec>)
    a008:	54d1      	strb	r1, [r2, r3]
			if (!card_sampleindex) {
    a00a:	2b00      	cmp	r3, #0
    a00c:	f040 8421 	bne.w	a852 <main_loop+0xe2e>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    a010:	46d0      	mov	r8, sl
    a012:	f04f 0940 	mov.w	r9, #64	; 0x40
    a016:	f8ca 9094 	str.w	r9, [sl, #148]	; 0x94
				command_dataw[0] = 0x30 + (ADC_CH2 << 1);
    a01a:	2334      	movs	r3, #52	; 0x34
    a01c:	7033      	strb	r3, [r6, #0]
				command_dataw[1] = 0x00;
    a01e:	f04f 0a00 	mov.w	sl, #0
    a022:	f886 a001 	strb.w	sl, [r6, #1]
				command_dataw[2] = 0x00;
    a026:	f886 a002 	strb.w	sl, [r6, #2]
				p_xfer.txbuf = (uint8_t *)&command_dataw;
    a02a:	602e      	str	r6, [r5, #0]
				p_xfer.rxbuf = (uint8_t *)&command_datar;
    a02c:	606c      	str	r4, [r5, #4]
				p_xfer.size = 3;
    a02e:	2303      	movs	r3, #3
    a030:	60ab      	str	r3, [r5, #8]
				spi_m_sync_transfer(&SPI_0, &p_xfer);
    a032:	4629      	mov	r1, r5
    a034:	4872      	ldr	r0, [pc, #456]	; (a200 <main_loop+0x7dc>)
    a036:	4b73      	ldr	r3, [pc, #460]	; (a204 <main_loop+0x7e0>)
    a038:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    a03a:	f8c8 9098 	str.w	r9, [r8, #152]	; 0x98
				command_datar[2] = 0x80 + ((command_datar[2] >> 1) & 0x7C);
    a03e:	78a3      	ldrb	r3, [r4, #2]
    a040:	085b      	lsrs	r3, r3, #1
    a042:	f003 037c 	and.w	r3, r3, #124	; 0x7c
    a046:	3b80      	subs	r3, #128	; 0x80
    a048:	70a3      	strb	r3, [r4, #2]
				cardBch2_samplebuffer = command_datar[1];
    a04a:	7862      	ldrb	r2, [r4, #1]
    a04c:	4b71      	ldr	r3, [pc, #452]	; (a214 <main_loop+0x7f0>)
    a04e:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    a050:	f8c8 9094 	str.w	r9, [r8, #148]	; 0x94
				command_dataw[0] = 0x30 + (ADC_CH3 << 1);
    a054:	2336      	movs	r3, #54	; 0x36
    a056:	7033      	strb	r3, [r6, #0]
				command_dataw[1] = 0x00;
    a058:	f886 a001 	strb.w	sl, [r6, #1]
				command_dataw[2] = 0x00;
    a05c:	f886 a002 	strb.w	sl, [r6, #2]
				p_xfer.txbuf = (uint8_t *)&command_dataw;
    a060:	602e      	str	r6, [r5, #0]
				p_xfer.rxbuf = (uint8_t *)&command_datar;
    a062:	606c      	str	r4, [r5, #4]
				p_xfer.size = 3;
    a064:	2303      	movs	r3, #3
    a066:	60ab      	str	r3, [r5, #8]
				spi_m_sync_transfer(&SPI_0, &p_xfer);
    a068:	4629      	mov	r1, r5
    a06a:	4865      	ldr	r0, [pc, #404]	; (a200 <main_loop+0x7dc>)
    a06c:	4b65      	ldr	r3, [pc, #404]	; (a204 <main_loop+0x7e0>)
    a06e:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    a070:	f8c8 9098 	str.w	r9, [r8, #152]	; 0x98
				command_datar[2] = 0x80 + ((command_datar[2] >> 1) & 0x7C);
    a074:	78a3      	ldrb	r3, [r4, #2]
    a076:	085b      	lsrs	r3, r3, #1
    a078:	f003 037c 	and.w	r3, r3, #124	; 0x7c
    a07c:	3b80      	subs	r3, #128	; 0x80
    a07e:	70a3      	strb	r3, [r4, #2]
				cardBch3_samplebuffer = command_datar[1];
    a080:	7862      	ldrb	r2, [r4, #1]
    a082:	4b65      	ldr	r3, [pc, #404]	; (a218 <main_loop+0x7f4>)
    a084:	701a      	strb	r2, [r3, #0]
    a086:	e3e4      	b.n	a852 <main_loop+0xe2e>
			delay_us(50);
    a088:	2032      	movs	r0, #50	; 0x32
    a08a:	4b64      	ldr	r3, [pc, #400]	; (a21c <main_loop+0x7f8>)
    a08c:	4798      	blx	r3
    a08e:	e3e0      	b.n	a852 <main_loop+0xe2e>
				if ((err = I2C_readMONITOREDINPUT(PB24_CARDB_I2C_SDA,  PB25_CARDB_I2C_CLK, &miniIO_B0_adcH,  &miniIO_B0_adcL))) {
    a090:	4b63      	ldr	r3, [pc, #396]	; (a220 <main_loop+0x7fc>)
    a092:	4a64      	ldr	r2, [pc, #400]	; (a224 <main_loop+0x800>)
    a094:	2139      	movs	r1, #57	; 0x39
    a096:	2038      	movs	r0, #56	; 0x38
    a098:	4c63      	ldr	r4, [pc, #396]	; (a228 <main_loop+0x804>)
    a09a:	47a0      	blx	r4
    a09c:	4601      	mov	r1, r0
    a09e:	b110      	cbz	r0, a0a6 <main_loop+0x682>
					xprintf("Could NOT read from the Mini-IO ADC on CARDB:I2C [%i]\r\n", err);
    a0a0:	4862      	ldr	r0, [pc, #392]	; (a22c <main_loop+0x808>)
    a0a2:	4b63      	ldr	r3, [pc, #396]	; (a230 <main_loop+0x80c>)
    a0a4:	4798      	blx	r3
				if ((err = I2C_configMONITOREDINPUTS(PB24_CARDB_I2C_SDA,  PB25_CARDB_I2C_CLK, 1))) {
    a0a6:	2201      	movs	r2, #1
    a0a8:	2139      	movs	r1, #57	; 0x39
    a0aa:	2038      	movs	r0, #56	; 0x38
    a0ac:	4b61      	ldr	r3, [pc, #388]	; (a234 <main_loop+0x810>)
    a0ae:	4798      	blx	r3
    a0b0:	4601      	mov	r1, r0
    a0b2:	2800      	cmp	r0, #0
    a0b4:	f43f aee1 	beq.w	9e7a <main_loop+0x456>
					xprintf("Could NOT write to the Mini-IO ADC controller on CARDB:I2C [%i]\r\n", err);
    a0b8:	485f      	ldr	r0, [pc, #380]	; (a238 <main_loop+0x814>)
    a0ba:	4b5d      	ldr	r3, [pc, #372]	; (a230 <main_loop+0x80c>)
    a0bc:	4798      	blx	r3
    a0be:	e6dc      	b.n	9e7a <main_loop+0x456>
				xprintf("Could NOT write to the Mini-IO EXPANDER on CARDB:I2C [%i]\r\n", err);
    a0c0:	485e      	ldr	r0, [pc, #376]	; (a23c <main_loop+0x818>)
    a0c2:	4b5b      	ldr	r3, [pc, #364]	; (a230 <main_loop+0x80c>)
    a0c4:	4798      	blx	r3
    a0c6:	e6e2      	b.n	9e8e <main_loop+0x46a>
		} else if (cardB_type == CARD_NOTFITTED)  {
    a0c8:	2b00      	cmp	r3, #0
    a0ca:	f040 83db 	bne.w	a884 <main_loop+0xe60>
			delay_us(50);
    a0ce:	2032      	movs	r0, #50	; 0x32
    a0d0:	4b52      	ldr	r3, [pc, #328]	; (a21c <main_loop+0x7f8>)
    a0d2:	4798      	blx	r3
    a0d4:	e3bd      	b.n	a852 <main_loop+0xe2e>
			card_sampleindex++;
    a0d6:	4a4c      	ldr	r2, [pc, #304]	; (a208 <main_loop+0x7e4>)
    a0d8:	6813      	ldr	r3, [r2, #0]
    a0da:	3301      	adds	r3, #1
    a0dc:	6013      	str	r3, [r2, #0]
			if ((card_sampleindex == SAMPLE_BUFFER_SIZE) && (readenvironment == 1)) {
    a0de:	f5b3 7f2b 	cmp.w	r3, #684	; 0x2ac
    a0e2:	d04f      	beq.n	a184 <main_loop+0x760>
			read_boardvalues();
    a0e4:	4b56      	ldr	r3, [pc, #344]	; (a240 <main_loop+0x81c>)
    a0e6:	4798      	blx	r3
		if (ring_timer) {
    a0e8:	4b56      	ldr	r3, [pc, #344]	; (a244 <main_loop+0x820>)
    a0ea:	781b      	ldrb	r3, [r3, #0]
    a0ec:	2b00      	cmp	r3, #0
    a0ee:	d151      	bne.n	a194 <main_loop+0x770>
		if (io_read((struct io_descriptor *const)io, (uint8_t *const)&ch, 1)) {
    a0f0:	2201      	movs	r2, #1
    a0f2:	f10d 0127 	add.w	r1, sp, #39	; 0x27
    a0f6:	4b54      	ldr	r3, [pc, #336]	; (a248 <main_loop+0x824>)
    a0f8:	6818      	ldr	r0, [r3, #0]
    a0fa:	4b54      	ldr	r3, [pc, #336]	; (a24c <main_loop+0x828>)
    a0fc:	4798      	blx	r3
    a0fe:	2800      	cmp	r0, #0
    a100:	f000 8100 	beq.w	a304 <main_loop+0x8e0>
			key = (unsigned char)ch;
    a104:	f89d 4027 	ldrb.w	r4, [sp, #39]	; 0x27
			switch (key) {
    a108:	f1a4 0342 	sub.w	r3, r4, #66	; 0x42
    a10c:	2b36      	cmp	r3, #54	; 0x36
    a10e:	f200 8369 	bhi.w	a7e4 <main_loop+0xdc0>
    a112:	e8df f013 	tbh	[pc, r3, lsl #1]
    a116:	0165      	.short	0x0165
    a118:	00bb0367 	.word	0x00bb0367
    a11c:	03670367 	.word	0x03670367
    a120:	03670367 	.word	0x03670367
    a124:	0367028b 	.word	0x0367028b
    a128:	01c70367 	.word	0x01c70367
    a12c:	03670367 	.word	0x03670367
    a130:	017c0367 	.word	0x017c0367
    a134:	00570367 	.word	0x00570367
    a138:	0367035b 	.word	0x0367035b
    a13c:	03670367 	.word	0x03670367
    a140:	013a0367 	.word	0x013a0367
    a144:	03670367 	.word	0x03670367
    a148:	03670367 	.word	0x03670367
    a14c:	03670367 	.word	0x03670367
    a150:	03670367 	.word	0x03670367
    a154:	01650367 	.word	0x01650367
    a158:	00bb0367 	.word	0x00bb0367
    a15c:	03670367 	.word	0x03670367
    a160:	03670367 	.word	0x03670367
    a164:	0367028b 	.word	0x0367028b
    a168:	01c70367 	.word	0x01c70367
    a16c:	03670367 	.word	0x03670367
    a170:	017c0367 	.word	0x017c0367
    a174:	00570367 	.word	0x00570367
    a178:	0367035b 	.word	0x0367035b
    a17c:	03670367 	.word	0x03670367
    a180:	013a0367 	.word	0x013a0367
			if ((card_sampleindex == SAMPLE_BUFFER_SIZE) && (readenvironment == 1)) {
    a184:	4b32      	ldr	r3, [pc, #200]	; (a250 <main_loop+0x82c>)
    a186:	781b      	ldrb	r3, [r3, #0]
    a188:	2b01      	cmp	r3, #1
    a18a:	d1ab      	bne.n	a0e4 <main_loop+0x6c0>
				readenvironment = 2;
    a18c:	2202      	movs	r2, #2
    a18e:	4b30      	ldr	r3, [pc, #192]	; (a250 <main_loop+0x82c>)
    a190:	701a      	strb	r2, [r3, #0]
    a192:	e7a7      	b.n	a0e4 <main_loop+0x6c0>
			if (ring_check(bpdu_arrived, &stormstate, &ring)) {
    a194:	4a2f      	ldr	r2, [pc, #188]	; (a254 <main_loop+0x830>)
    a196:	4930      	ldr	r1, [pc, #192]	; (a258 <main_loop+0x834>)
    a198:	9805      	ldr	r0, [sp, #20]
    a19a:	4b30      	ldr	r3, [pc, #192]	; (a25c <main_loop+0x838>)
    a19c:	4798      	blx	r3
    a19e:	b110      	cbz	r0, a1a6 <main_loop+0x782>
				send_relearn_udp = 1;
    a1a0:	2201      	movs	r2, #1
    a1a2:	4b2f      	ldr	r3, [pc, #188]	; (a260 <main_loop+0x83c>)
    a1a4:	701a      	strb	r2, [r3, #0]
			ring_timer = 0;
    a1a6:	2200      	movs	r2, #0
    a1a8:	4b26      	ldr	r3, [pc, #152]	; (a244 <main_loop+0x820>)
    a1aa:	701a      	strb	r2, [r3, #0]
			if (((CONFIG *)&settings_buffer)->loop_basestation) {
    a1ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    a1b0:	2b00      	cmp	r3, #0
    a1b2:	d09d      	beq.n	a0f0 <main_loop+0x6cc>
				ring_broken = (ring) ? RING_BROKEN : RING_CLOSED;
    a1b4:	4b27      	ldr	r3, [pc, #156]	; (a254 <main_loop+0x830>)
    a1b6:	781b      	ldrb	r3, [r3, #0]
    a1b8:	1a9b      	subs	r3, r3, r2
    a1ba:	bf18      	it	ne
    a1bc:	2301      	movne	r3, #1
    a1be:	4a29      	ldr	r2, [pc, #164]	; (a264 <main_loop+0x840>)
    a1c0:	7013      	strb	r3, [r2, #0]
    a1c2:	e795      	b.n	a0f0 <main_loop+0x6cc>
				wdt_disable(&WDT_0);
    a1c4:	4c28      	ldr	r4, [pc, #160]	; (a268 <main_loop+0x844>)
    a1c6:	4620      	mov	r0, r4
    a1c8:	4b28      	ldr	r3, [pc, #160]	; (a26c <main_loop+0x848>)
    a1ca:	4798      	blx	r3
				wdt_set_timeout_period(&WDT_0, 100, 25);
    a1cc:	2219      	movs	r2, #25
    a1ce:	2164      	movs	r1, #100	; 0x64
    a1d0:	4620      	mov	r0, r4
    a1d2:	4b27      	ldr	r3, [pc, #156]	; (a270 <main_loop+0x84c>)
    a1d4:	4798      	blx	r3
				wdt_enable(&WDT_0);
    a1d6:	4620      	mov	r0, r4
    a1d8:	4b26      	ldr	r3, [pc, #152]	; (a274 <main_loop+0x850>)
    a1da:	4798      	blx	r3
				xprintf("\r\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n");
    a1dc:	4826      	ldr	r0, [pc, #152]	; (a278 <main_loop+0x854>)
    a1de:	4c14      	ldr	r4, [pc, #80]	; (a230 <main_loop+0x80c>)
    a1e0:	47a0      	blx	r4
				xprintf("<CLI DEBUG> [REBOOT] command\r\n");
    a1e2:	4826      	ldr	r0, [pc, #152]	; (a27c <main_loop+0x858>)
    a1e4:	47a0      	blx	r4
				xprintf(". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n\r\n");
    a1e6:	4826      	ldr	r0, [pc, #152]	; (a280 <main_loop+0x85c>)
    a1e8:	47a0      	blx	r4
				reboot_actioned = 1;
    a1ea:	2201      	movs	r2, #1
    a1ec:	4b25      	ldr	r3, [pc, #148]	; (a284 <main_loop+0x860>)
    a1ee:	701a      	strb	r2, [r3, #0]
    a1f0:	e08d      	b.n	a30e <main_loop+0x8ea>
    a1f2:	bf00      	nop
    a1f4:	20007864 	.word	0x20007864
    a1f8:	20008568 	.word	0x20008568
    a1fc:	20007580 	.word	0x20007580
    a200:	20007478 	.word	0x20007478
    a204:	00001b81 	.word	0x00001b81
    a208:	20008548 	.word	0x20008548
    a20c:	20007fc0 	.word	0x20007fc0
    a210:	2000759c 	.word	0x2000759c
    a214:	2000757b 	.word	0x2000757b
    a218:	2000757c 	.word	0x2000757c
    a21c:	000015a9 	.word	0x000015a9
    a220:	20007c6d 	.word	0x20007c6d
    a224:	20007fbd 	.word	0x20007fbd
    a228:	000057c5 	.word	0x000057c5
    a22c:	0001068c 	.word	0x0001068c
    a230:	0000031d 	.word	0x0000031d
    a234:	0000550d 	.word	0x0000550d
    a238:	000106c4 	.word	0x000106c4
    a23c:	00010708 	.word	0x00010708
    a240:	000004a5 	.word	0x000004a5
    a244:	20008279 	.word	0x20008279
    a248:	20007f20 	.word	0x20007f20
    a24c:	000018dd 	.word	0x000018dd
    a250:	2000826c 	.word	0x2000826c
    a254:	20008558 	.word	0x20008558
    a258:	20008560 	.word	0x20008560
    a25c:	0000b985 	.word	0x0000b985
    a260:	20008275 	.word	0x20008275
    a264:	2000826d 	.word	0x2000826d
    a268:	20007474 	.word	0x20007474
    a26c:	000092a1 	.word	0x000092a1
    a270:	000092d1 	.word	0x000092d1
    a274:	00009309 	.word	0x00009309
    a278:	00010784 	.word	0x00010784
    a27c:	000107d0 	.word	0x000107d0
    a280:	000107f0 	.word	0x000107f0
    a284:	20007fbf 	.word	0x20007fbf
    a288:	41008000 	.word	0x41008000
				xprintf("\r\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n");
    a28c:	486c      	ldr	r0, [pc, #432]	; (a440 <main_loop+0xa1c>)
    a28e:	4d6d      	ldr	r5, [pc, #436]	; (a444 <main_loop+0xa20>)
    a290:	47a8      	blx	r5
				xprintf("<CLI DEBUG> [CONFIGURATION DEFAULT] command\r\n");
    a292:	486d      	ldr	r0, [pc, #436]	; (a448 <main_loop+0xa24>)
    a294:	47a8      	blx	r5
				((CONFIG *)&settings_buffer)->pattern1 = CONFIG_IDENTIFIER1;
    a296:	2400      	movs	r4, #0
    a298:	2376      	movs	r3, #118	; 0x76
    a29a:	703b      	strb	r3, [r7, #0]
    a29c:	2336      	movs	r3, #54	; 0x36
    a29e:	707b      	strb	r3, [r7, #1]
    a2a0:	2345      	movs	r3, #69	; 0x45
    a2a2:	70bb      	strb	r3, [r7, #2]
    a2a4:	f06f 0301 	mvn.w	r3, #1
    a2a8:	70fb      	strb	r3, [r7, #3]
				((CONFIG *)&settings_buffer)->pattern2 = CONFIG_IDENTIFIER2;
    a2aa:	f06f 0343 	mvn.w	r3, #67	; 0x43
    a2ae:	713b      	strb	r3, [r7, #4]
    a2b0:	f06f 0315 	mvn.w	r3, #21
    a2b4:	717b      	strb	r3, [r7, #5]
    a2b6:	237d      	movs	r3, #125	; 0x7d
    a2b8:	71bb      	strb	r3, [r7, #6]
    a2ba:	f06f 036c 	mvn.w	r3, #108	; 0x6c
    a2be:	71fb      	strb	r3, [r7, #7]
				strncpy((char *__restrict)(((CONFIG *)&settings_buffer)->name), "MULTISENSE NEEDS CONFIGURING...", sizeof(((CONFIG *)&settings_buffer)->name));
    a2c0:	2221      	movs	r2, #33	; 0x21
    a2c2:	4962      	ldr	r1, [pc, #392]	; (a44c <main_loop+0xa28>)
    a2c4:	9807      	ldr	r0, [sp, #28]
    a2c6:	4b62      	ldr	r3, [pc, #392]	; (a450 <main_loop+0xa2c>)
    a2c8:	4798      	blx	r3
				((CONFIG *)&settings_buffer)->ID = 0x00000000;
    a2ca:	f887 402c 	strb.w	r4, [r7, #44]	; 0x2c
    a2ce:	f887 402d 	strb.w	r4, [r7, #45]	; 0x2d
    a2d2:	f887 402e 	strb.w	r4, [r7, #46]	; 0x2e
    a2d6:	f887 402f 	strb.w	r4, [r7, #47]	; 0x2f
				((CONFIG *)&settings_buffer)->gain_cardA = 0xFF;
    a2da:	23ff      	movs	r3, #255	; 0xff
    a2dc:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
				((CONFIG *)&settings_buffer)->gain_cardB = 0xFF;
    a2e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				((CONFIG *)&settings_buffer)->loop_basestation = 0;
    a2e4:	f887 402b 	strb.w	r4, [r7, #43]	; 0x2b
				xprintf("MultiSense [configuration FORMATTED]\r\n");
    a2e8:	485a      	ldr	r0, [pc, #360]	; (a454 <main_loop+0xa30>)
    a2ea:	47a8      	blx	r5
				if (EEprom_settings(settings_buffer, SETTING_STRUCTURE_SIZE, 1) != ERR_NONE) {
    a2ec:	2201      	movs	r2, #1
    a2ee:	2180      	movs	r1, #128	; 0x80
    a2f0:	4638      	mov	r0, r7
    a2f2:	4b59      	ldr	r3, [pc, #356]	; (a458 <main_loop+0xa34>)
    a2f4:	4798      	blx	r3
    a2f6:	2800      	cmp	r0, #0
    a2f8:	d043      	beq.n	a382 <main_loop+0x95e>
					xprintf("MultiSense [configuration ERROR WRITING]\r\n");
    a2fa:	4858      	ldr	r0, [pc, #352]	; (a45c <main_loop+0xa38>)
    a2fc:	47a8      	blx	r5
				xprintf(". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n\r\n");
    a2fe:	4858      	ldr	r0, [pc, #352]	; (a460 <main_loop+0xa3c>)
    a300:	4b50      	ldr	r3, [pc, #320]	; (a444 <main_loop+0xa20>)
    a302:	4798      	blx	r3
		if (!reboot_actioned) {
    a304:	4b57      	ldr	r3, [pc, #348]	; (a464 <main_loop+0xa40>)
    a306:	781b      	ldrb	r3, [r3, #0]
    a308:	2b00      	cmp	r3, #0
    a30a:	f000 8283 	beq.w	a814 <main_loop+0xdf0>
		loopcount++;
    a30e:	4b56      	ldr	r3, [pc, #344]	; (a468 <main_loop+0xa44>)
    a310:	681b      	ldr	r3, [r3, #0]
    a312:	3301      	adds	r3, #1
    a314:	4a54      	ldr	r2, [pc, #336]	; (a468 <main_loop+0xa44>)
    a316:	6013      	str	r3, [r2, #0]
		if (eth_check == 250) {
    a318:	9b04      	ldr	r3, [sp, #16]
    a31a:	2bfa      	cmp	r3, #250	; 0xfa
    a31c:	f43f ab90 	beq.w	9a40 <main_loop+0x1c>
			eth_check++;
    a320:	9b04      	ldr	r3, [sp, #16]
    a322:	3301      	adds	r3, #1
    a324:	9304      	str	r3, [sp, #16]
		bpdu_arrived = 0;
    a326:	2300      	movs	r3, #0
    a328:	9305      	str	r3, [sp, #20]
		if (reboot_actioned) {
    a32a:	4b4e      	ldr	r3, [pc, #312]	; (a464 <main_loop+0xa40>)
    a32c:	781b      	ldrb	r3, [r3, #0]
    a32e:	2b00      	cmp	r3, #0
    a330:	d1ed      	bne.n	a30e <main_loop+0x8ea>
		if (refresh_gain) {
    a332:	4b4e      	ldr	r3, [pc, #312]	; (a46c <main_loop+0xa48>)
    a334:	781b      	ldrb	r3, [r3, #0]
    a336:	b163      	cbz	r3, a352 <main_loop+0x92e>
			if (cardA_type == CARD_VIBRATEK) {
    a338:	4b4d      	ldr	r3, [pc, #308]	; (a470 <main_loop+0xa4c>)
    a33a:	781b      	ldrb	r3, [r3, #0]
    a33c:	2b01      	cmp	r3, #1
    a33e:	f43f ac6c 	beq.w	9c1a <main_loop+0x1f6>
			if (cardB_type == CARD_VIBRATEK) {
    a342:	4b4c      	ldr	r3, [pc, #304]	; (a474 <main_loop+0xa50>)
    a344:	781b      	ldrb	r3, [r3, #0]
    a346:	2b01      	cmp	r3, #1
    a348:	f43f ac77 	beq.w	9c3a <main_loop+0x216>
			refresh_gain = 0;
    a34c:	2200      	movs	r2, #0
    a34e:	4b47      	ldr	r3, [pc, #284]	; (a46c <main_loop+0xa48>)
    a350:	701a      	strb	r2, [r3, #0]
		if (((cardA_type == CARD_VIBRATEK) || (cardA_type == CARD_VIBRAPOINT)) && (card_sampleindex < SAMPLE_BUFFER_SIZE)) {
    a352:	4b47      	ldr	r3, [pc, #284]	; (a470 <main_loop+0xa4c>)
    a354:	781b      	ldrb	r3, [r3, #0]
    a356:	2b01      	cmp	r3, #1
    a358:	f000 8269 	beq.w	a82e <main_loop+0xe0a>
    a35c:	2b04      	cmp	r3, #4
    a35e:	f000 8266 	beq.w	a82e <main_loop+0xe0a>
		} else if (cardA_type == CARD_MAXI_IO)  {
    a362:	2b03      	cmp	r3, #3
    a364:	f43f ad33 	beq.w	9dce <main_loop+0x3aa>
		} else if (cardA_type == CARD_MINI_IO)  {
    a368:	2b02      	cmp	r3, #2
    a36a:	f43f ad34 	beq.w	9dd6 <main_loop+0x3b2>
		} else if (cardA_type == CARD_PE)  {
    a36e:	2b05      	cmp	r3, #5
    a370:	f43f adba 	beq.w	9ee8 <main_loop+0x4c4>
		} else if (cardA_type == CARD_NOTFITTED)  {
    a374:	2b00      	cmp	r3, #0
    a376:	f47f ad58 	bne.w	9e2a <main_loop+0x406>
			delay_us(50);
    a37a:	2032      	movs	r0, #50	; 0x32
    a37c:	4b3e      	ldr	r3, [pc, #248]	; (a478 <main_loop+0xa54>)
    a37e:	4798      	blx	r3
    a380:	e553      	b.n	9e2a <main_loop+0x406>
					xprintf("MultiSense [configuration WRITTEN]\r\n");
    a382:	483e      	ldr	r0, [pc, #248]	; (a47c <main_loop+0xa58>)
    a384:	4b2f      	ldr	r3, [pc, #188]	; (a444 <main_loop+0xa20>)
    a386:	4798      	blx	r3
    a388:	e7b9      	b.n	a2fe <main_loop+0x8da>
				xprintf("\r\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n");
    a38a:	482d      	ldr	r0, [pc, #180]	; (a440 <main_loop+0xa1c>)
    a38c:	4d2d      	ldr	r5, [pc, #180]	; (a444 <main_loop+0xa20>)
    a38e:	47a8      	blx	r5
				xprintf("<CLI DEBUG> [ID RESET] command\r\n", key);
    a390:	4621      	mov	r1, r4
    a392:	483b      	ldr	r0, [pc, #236]	; (a480 <main_loop+0xa5c>)
    a394:	47a8      	blx	r5
				((CONFIG *)&settings_buffer)->ID = 0x00000000;
    a396:	483b      	ldr	r0, [pc, #236]	; (a484 <main_loop+0xa60>)
    a398:	2300      	movs	r3, #0
    a39a:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
    a39e:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    a3a2:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
    a3a6:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
				if (EEprom_settings(settings_buffer, SETTING_STRUCTURE_SIZE, 1) != ERR_NONE) {
    a3aa:	2201      	movs	r2, #1
    a3ac:	2180      	movs	r1, #128	; 0x80
    a3ae:	4b2a      	ldr	r3, [pc, #168]	; (a458 <main_loop+0xa34>)
    a3b0:	4798      	blx	r3
    a3b2:	b188      	cbz	r0, a3d8 <main_loop+0x9b4>
					xprintf("MultiSense [configuration ERROR WRITING]\r\n");
    a3b4:	4829      	ldr	r0, [pc, #164]	; (a45c <main_loop+0xa38>)
    a3b6:	47a8      	blx	r5
				wdt_disable(&WDT_0);
    a3b8:	4c33      	ldr	r4, [pc, #204]	; (a488 <main_loop+0xa64>)
    a3ba:	4620      	mov	r0, r4
    a3bc:	4b33      	ldr	r3, [pc, #204]	; (a48c <main_loop+0xa68>)
    a3be:	4798      	blx	r3
				wdt_set_timeout_period(&WDT_0, 100, 25);
    a3c0:	2219      	movs	r2, #25
    a3c2:	2164      	movs	r1, #100	; 0x64
    a3c4:	4620      	mov	r0, r4
    a3c6:	4b32      	ldr	r3, [pc, #200]	; (a490 <main_loop+0xa6c>)
    a3c8:	4798      	blx	r3
				wdt_enable(&WDT_0);
    a3ca:	4620      	mov	r0, r4
    a3cc:	4b31      	ldr	r3, [pc, #196]	; (a494 <main_loop+0xa70>)
    a3ce:	4798      	blx	r3
				xprintf("Rebooting...\r\n");
    a3d0:	4831      	ldr	r0, [pc, #196]	; (a498 <main_loop+0xa74>)
    a3d2:	4b1c      	ldr	r3, [pc, #112]	; (a444 <main_loop+0xa20>)
    a3d4:	4798      	blx	r3
    a3d6:	e7fe      	b.n	a3d6 <main_loop+0x9b2>
					xprintf("MultiSense [configuration WRITTEN]\r\n");
    a3d8:	4828      	ldr	r0, [pc, #160]	; (a47c <main_loop+0xa58>)
    a3da:	4b1a      	ldr	r3, [pc, #104]	; (a444 <main_loop+0xa20>)
    a3dc:	4798      	blx	r3
    a3de:	e7eb      	b.n	a3b8 <main_loop+0x994>
				xprintf("\r\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n");
    a3e0:	4817      	ldr	r0, [pc, #92]	; (a440 <main_loop+0xa1c>)
    a3e2:	4c18      	ldr	r4, [pc, #96]	; (a444 <main_loop+0xa20>)
    a3e4:	47a0      	blx	r4
				xprintf("<CLI DEBUG> [BASESTATION] command\r\n");
    a3e6:	482d      	ldr	r0, [pc, #180]	; (a49c <main_loop+0xa78>)
    a3e8:	47a0      	blx	r4
				((CONFIG *)&settings_buffer)->loop_basestation = 1;
    a3ea:	2201      	movs	r2, #1
    a3ec:	f887 202b 	strb.w	r2, [r7, #43]	; 0x2b
				if (EEprom_settings(settings_buffer, SETTING_STRUCTURE_SIZE, 1) != ERR_NONE) {
    a3f0:	2180      	movs	r1, #128	; 0x80
    a3f2:	4638      	mov	r0, r7
    a3f4:	4b18      	ldr	r3, [pc, #96]	; (a458 <main_loop+0xa34>)
    a3f6:	4798      	blx	r3
    a3f8:	b128      	cbz	r0, a406 <main_loop+0x9e2>
					xprintf("MultiSense [configuration ERROR WRITING]\r\n");
    a3fa:	4818      	ldr	r0, [pc, #96]	; (a45c <main_loop+0xa38>)
    a3fc:	47a0      	blx	r4
				xprintf(". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n\r\n");
    a3fe:	4818      	ldr	r0, [pc, #96]	; (a460 <main_loop+0xa3c>)
    a400:	4b10      	ldr	r3, [pc, #64]	; (a444 <main_loop+0xa20>)
    a402:	4798      	blx	r3
				break;
    a404:	e77e      	b.n	a304 <main_loop+0x8e0>
					xprintf("MultiSense [configuration WRITTEN]\r\n");
    a406:	481d      	ldr	r0, [pc, #116]	; (a47c <main_loop+0xa58>)
    a408:	4b0e      	ldr	r3, [pc, #56]	; (a444 <main_loop+0xa20>)
    a40a:	4798      	blx	r3
    a40c:	e7f7      	b.n	a3fe <main_loop+0x9da>
				xprintf("\r\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n");
    a40e:	480c      	ldr	r0, [pc, #48]	; (a440 <main_loop+0xa1c>)
    a410:	4c0c      	ldr	r4, [pc, #48]	; (a444 <main_loop+0xa20>)
    a412:	47a0      	blx	r4
				xprintf("<CLI DEBUG> [PASS THROUGH] command\r\n");
    a414:	4822      	ldr	r0, [pc, #136]	; (a4a0 <main_loop+0xa7c>)
    a416:	47a0      	blx	r4
				((CONFIG *)&settings_buffer)->loop_basestation = 0;
    a418:	2300      	movs	r3, #0
    a41a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				if (EEprom_settings(settings_buffer, SETTING_STRUCTURE_SIZE, 1) != ERR_NONE) {
    a41e:	2201      	movs	r2, #1
    a420:	2180      	movs	r1, #128	; 0x80
    a422:	4638      	mov	r0, r7
    a424:	4b0c      	ldr	r3, [pc, #48]	; (a458 <main_loop+0xa34>)
    a426:	4798      	blx	r3
    a428:	b128      	cbz	r0, a436 <main_loop+0xa12>
					xprintf("MultiSense [configuration ERROR WRITING]\r\n");
    a42a:	480c      	ldr	r0, [pc, #48]	; (a45c <main_loop+0xa38>)
    a42c:	47a0      	blx	r4
				xprintf(". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n\r\n");
    a42e:	480c      	ldr	r0, [pc, #48]	; (a460 <main_loop+0xa3c>)
    a430:	4b04      	ldr	r3, [pc, #16]	; (a444 <main_loop+0xa20>)
    a432:	4798      	blx	r3
				break;
    a434:	e766      	b.n	a304 <main_loop+0x8e0>
					xprintf("MultiSense [configuration WRITTEN]\r\n");
    a436:	4811      	ldr	r0, [pc, #68]	; (a47c <main_loop+0xa58>)
    a438:	4b02      	ldr	r3, [pc, #8]	; (a444 <main_loop+0xa20>)
    a43a:	4798      	blx	r3
    a43c:	e7f7      	b.n	a42e <main_loop+0xa0a>
    a43e:	bf00      	nop
    a440:	00010784 	.word	0x00010784
    a444:	0000031d 	.word	0x0000031d
    a448:	0001083c 	.word	0x0001083c
    a44c:	00010228 	.word	0x00010228
    a450:	0000dd61 	.word	0x0000dd61
    a454:	00010248 	.word	0x00010248
    a458:	0000dafd 	.word	0x0000dafd
    a45c:	00010270 	.word	0x00010270
    a460:	000107f0 	.word	0x000107f0
    a464:	20007fbf 	.word	0x20007fbf
    a468:	2000758c 	.word	0x2000758c
    a46c:	20008561 	.word	0x20008561
    a470:	20007c6e 	.word	0x20007c6e
    a474:	20008564 	.word	0x20008564
    a478:	000015a9 	.word	0x000015a9
    a47c:	0001029c 	.word	0x0001029c
    a480:	0001086c 	.word	0x0001086c
    a484:	20007f2c 	.word	0x20007f2c
    a488:	20007474 	.word	0x20007474
    a48c:	000092a1 	.word	0x000092a1
    a490:	000092d1 	.word	0x000092d1
    a494:	00009309 	.word	0x00009309
    a498:	00010890 	.word	0x00010890
    a49c:	000108a0 	.word	0x000108a0
    a4a0:	000108c4 	.word	0x000108c4
				xprintf("\r\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n");
    a4a4:	488e      	ldr	r0, [pc, #568]	; (a6e0 <main_loop+0xcbc>)
    a4a6:	4c8f      	ldr	r4, [pc, #572]	; (a6e4 <main_loop+0xcc0>)
    a4a8:	47a0      	blx	r4
				xprintf("<CLI DEBUG> [LIVE BOARD PRINT] command\r\n");
    a4aa:	488f      	ldr	r0, [pc, #572]	; (a6e8 <main_loop+0xcc4>)
    a4ac:	47a0      	blx	r4
				xprintf("<CLI DEBUG> ID               = %u\r\n", ((CONFIG *)&settings_buffer)->ID);
    a4ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    a4b0:	488e      	ldr	r0, [pc, #568]	; (a6ec <main_loop+0xcc8>)
    a4b2:	47a0      	blx	r4
				xprintf("<CLI DEBUG> Name             = %s\r\n", ((CONFIG *)&settings_buffer)->name);
    a4b4:	9907      	ldr	r1, [sp, #28]
    a4b6:	488e      	ldr	r0, [pc, #568]	; (a6f0 <main_loop+0xccc>)
    a4b8:	47a0      	blx	r4
				xprintf("<CLI DEBUG> gainA            = %d\r\n", ((CONFIG *)&settings_buffer)->gain_cardA);
    a4ba:	f897 1029 	ldrb.w	r1, [r7, #41]	; 0x29
    a4be:	488d      	ldr	r0, [pc, #564]	; (a6f4 <main_loop+0xcd0>)
    a4c0:	47a0      	blx	r4
				xprintf("<CLI DEBUG> gainB            = %d\r\n", ((CONFIG *)&settings_buffer)->gain_cardB);
    a4c2:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
    a4c6:	488c      	ldr	r0, [pc, #560]	; (a6f8 <main_loop+0xcd4>)
    a4c8:	47a0      	blx	r4
				xprintf("<CLI DEBUG> Mode             = %s\r\n", (((CONFIG *)&settings_buffer)->loop_basestation) ? "BASESTATION" : "PASS-THROUGH");
    a4ca:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
    a4ce:	4b8b      	ldr	r3, [pc, #556]	; (a6fc <main_loop+0xcd8>)
    a4d0:	4a8b      	ldr	r2, [pc, #556]	; (a700 <main_loop+0xcdc>)
    a4d2:	2900      	cmp	r1, #0
    a4d4:	bf14      	ite	ne
    a4d6:	4611      	movne	r1, r2
    a4d8:	4619      	moveq	r1, r3
    a4da:	488a      	ldr	r0, [pc, #552]	; (a704 <main_loop+0xce0>)
    a4dc:	47a0      	blx	r4
				xprintf("<CLI DEBUG> Water1           = %d\r\n", (int)readdata_water1);
    a4de:	4b8a      	ldr	r3, [pc, #552]	; (a708 <main_loop+0xce4>)
    a4e0:	7819      	ldrb	r1, [r3, #0]
    a4e2:	488a      	ldr	r0, [pc, #552]	; (a70c <main_loop+0xce8>)
    a4e4:	47a0      	blx	r4
				xprintf("<CLI DEBUG> Water2           = %d\r\n", (int)readdata_water2);
    a4e6:	4b8a      	ldr	r3, [pc, #552]	; (a710 <main_loop+0xcec>)
    a4e8:	7819      	ldrb	r1, [r3, #0]
    a4ea:	488a      	ldr	r0, [pc, #552]	; (a714 <main_loop+0xcf0>)
    a4ec:	47a0      	blx	r4
				xprintf("<CLI DEBUG> HV               = %d\r\n", (int)highvoltage);
    a4ee:	4b8a      	ldr	r3, [pc, #552]	; (a718 <main_loop+0xcf4>)
    a4f0:	7819      	ldrb	r1, [r3, #0]
    a4f2:	488a      	ldr	r0, [pc, #552]	; (a71c <main_loop+0xcf8>)
    a4f4:	47a0      	blx	r4
				xprintf("<CLI DEBUG> Temp             = %d\r\n", ((((((int)readdata_tempmoisture[1] * 256)) + ((int)readdata_tempmoisture[0])) * 165) / 65536) - 40);
    a4f6:	4b8a      	ldr	r3, [pc, #552]	; (a720 <main_loop+0xcfc>)
    a4f8:	785a      	ldrb	r2, [r3, #1]
    a4fa:	781b      	ldrb	r3, [r3, #0]
    a4fc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    a500:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    a504:	eb13 1343 	adds.w	r3, r3, r3, lsl #5
    a508:	bf44      	itt	mi
    a50a:	f503 437f 	addmi.w	r3, r3, #65280	; 0xff00
    a50e:	33ff      	addmi	r3, #255	; 0xff
    a510:	141b      	asrs	r3, r3, #16
    a512:	f1a3 0128 	sub.w	r1, r3, #40	; 0x28
    a516:	4883      	ldr	r0, [pc, #524]	; (a724 <main_loop+0xd00>)
    a518:	4b72      	ldr	r3, [pc, #456]	; (a6e4 <main_loop+0xcc0>)
    a51a:	4798      	blx	r3
				xprintf("<CLI DEBUG> Humidity         = %d\r\n", ((int)((((int)readdata_tempmoisture[3] * 256)) + ((int)readdata_tempmoisture[2])) * 100) / 65536);
    a51c:	4b80      	ldr	r3, [pc, #512]	; (a720 <main_loop+0xcfc>)
    a51e:	78d9      	ldrb	r1, [r3, #3]
    a520:	789b      	ldrb	r3, [r3, #2]
    a522:	eb03 2301 	add.w	r3, r3, r1, lsl #8
    a526:	2164      	movs	r1, #100	; 0x64
    a528:	fb01 f103 	mul.w	r1, r1, r3
    a52c:	2900      	cmp	r1, #0
    a52e:	bfbc      	itt	lt
    a530:	f501 417f 	addlt.w	r1, r1, #65280	; 0xff00
    a534:	31ff      	addlt	r1, #255	; 0xff
    a536:	1409      	asrs	r1, r1, #16
    a538:	487b      	ldr	r0, [pc, #492]	; (a728 <main_loop+0xd04>)
    a53a:	4b6a      	ldr	r3, [pc, #424]	; (a6e4 <main_loop+0xcc0>)
    a53c:	4798      	blx	r3
				xprintf("<CLI DEBUG> Tamper           = %s\r\n", (tamper) ? "UP" : "DOWN");
    a53e:	4b7b      	ldr	r3, [pc, #492]	; (a72c <main_loop+0xd08>)
    a540:	7819      	ldrb	r1, [r3, #0]
    a542:	4b7b      	ldr	r3, [pc, #492]	; (a730 <main_loop+0xd0c>)
    a544:	4a7b      	ldr	r2, [pc, #492]	; (a734 <main_loop+0xd10>)
    a546:	2900      	cmp	r1, #0
    a548:	bf14      	ite	ne
    a54a:	4611      	movne	r1, r2
    a54c:	4619      	moveq	r1, r3
    a54e:	487a      	ldr	r0, [pc, #488]	; (a738 <main_loop+0xd14>)
    a550:	4b64      	ldr	r3, [pc, #400]	; (a6e4 <main_loop+0xcc0>)
    a552:	4798      	blx	r3
				xprintf("<CLI DEBUG> Port1            = %s\r\n", (link_port1) ? "LINK OK" : "LINK DOWN");
    a554:	4b79      	ldr	r3, [pc, #484]	; (a73c <main_loop+0xd18>)
    a556:	7819      	ldrb	r1, [r3, #0]
    a558:	4b79      	ldr	r3, [pc, #484]	; (a740 <main_loop+0xd1c>)
    a55a:	4a7a      	ldr	r2, [pc, #488]	; (a744 <main_loop+0xd20>)
    a55c:	2900      	cmp	r1, #0
    a55e:	bf14      	ite	ne
    a560:	4611      	movne	r1, r2
    a562:	4619      	moveq	r1, r3
    a564:	4878      	ldr	r0, [pc, #480]	; (a748 <main_loop+0xd24>)
    a566:	4b5f      	ldr	r3, [pc, #380]	; (a6e4 <main_loop+0xcc0>)
    a568:	4798      	blx	r3
				xprintf("<CLI DEBUG> Port2            = %s\r\n", (link_port2) ? "LINK OK" : "LINK DOWN");
    a56a:	4b78      	ldr	r3, [pc, #480]	; (a74c <main_loop+0xd28>)
    a56c:	7819      	ldrb	r1, [r3, #0]
    a56e:	4b74      	ldr	r3, [pc, #464]	; (a740 <main_loop+0xd1c>)
    a570:	4a74      	ldr	r2, [pc, #464]	; (a744 <main_loop+0xd20>)
    a572:	2900      	cmp	r1, #0
    a574:	bf14      	ite	ne
    a576:	4611      	movne	r1, r2
    a578:	4619      	moveq	r1, r3
    a57a:	4875      	ldr	r0, [pc, #468]	; (a750 <main_loop+0xd2c>)
    a57c:	4b59      	ldr	r3, [pc, #356]	; (a6e4 <main_loop+0xcc0>)
    a57e:	4798      	blx	r3
				xprintf("<CLI DEBUG> Port3            = %s\r\n", (link_port3) ? "LINK OK" : "LINK DOWN");
    a580:	4b74      	ldr	r3, [pc, #464]	; (a754 <main_loop+0xd30>)
    a582:	7819      	ldrb	r1, [r3, #0]
    a584:	4b6e      	ldr	r3, [pc, #440]	; (a740 <main_loop+0xd1c>)
    a586:	4a6f      	ldr	r2, [pc, #444]	; (a744 <main_loop+0xd20>)
    a588:	2900      	cmp	r1, #0
    a58a:	bf14      	ite	ne
    a58c:	4611      	movne	r1, r2
    a58e:	4619      	moveq	r1, r3
    a590:	4871      	ldr	r0, [pc, #452]	; (a758 <main_loop+0xd34>)
    a592:	4b54      	ldr	r3, [pc, #336]	; (a6e4 <main_loop+0xcc0>)
    a594:	4798      	blx	r3
				xprintf("<CLI DEBUG> CardA            = %s\r\n", (cardA_type == CARD_NOTFITTED) ? "NOT FITTED" : (cardA_type == CARD_VIBRAPOINT) ? "VibraPoint" : (cardA_type == CARD_VIBRATEK) ? "VibraTek" :
    a596:	4b71      	ldr	r3, [pc, #452]	; (a75c <main_loop+0xd38>)
    a598:	781b      	ldrb	r3, [r3, #0]
    a59a:	b16b      	cbz	r3, a5b8 <main_loop+0xb94>
    a59c:	2b04      	cmp	r3, #4
    a59e:	d01e      	beq.n	a5de <main_loop+0xbba>
    a5a0:	2b01      	cmp	r3, #1
    a5a2:	d01e      	beq.n	a5e2 <main_loop+0xbbe>
					                                             (cardA_type == CARD_MAXI_IO) ? "Maxi IO" : (cardA_type == CARD_MINI_IO) ? "Mini IO" : (cardA_type == CARD_PE) ? "P&E" : "Unknown");
    a5a4:	2b03      	cmp	r3, #3
    a5a6:	d01e      	beq.n	a5e6 <main_loop+0xbc2>
    a5a8:	2b02      	cmp	r3, #2
    a5aa:	d01e      	beq.n	a5ea <main_loop+0xbc6>
    a5ac:	4a6c      	ldr	r2, [pc, #432]	; (a760 <main_loop+0xd3c>)
    a5ae:	496d      	ldr	r1, [pc, #436]	; (a764 <main_loop+0xd40>)
    a5b0:	2b05      	cmp	r3, #5
    a5b2:	bf18      	it	ne
    a5b4:	4611      	movne	r1, r2
    a5b6:	e000      	b.n	a5ba <main_loop+0xb96>
				xprintf("<CLI DEBUG> CardA            = %s\r\n", (cardA_type == CARD_NOTFITTED) ? "NOT FITTED" : (cardA_type == CARD_VIBRAPOINT) ? "VibraPoint" : (cardA_type == CARD_VIBRATEK) ? "VibraTek" :
    a5b8:	496b      	ldr	r1, [pc, #428]	; (a768 <main_loop+0xd44>)
    a5ba:	486c      	ldr	r0, [pc, #432]	; (a76c <main_loop+0xd48>)
    a5bc:	4b49      	ldr	r3, [pc, #292]	; (a6e4 <main_loop+0xcc0>)
    a5be:	4798      	blx	r3
				xprintf("<CLI DEBUG> CardB            = %s\r\n", (cardB_type == CARD_NOTFITTED) ? "NOT FITTED" : (cardB_type == CARD_VIBRAPOINT) ? "VibraPoint" : (cardB_type == CARD_VIBRATEK) ? "VibraTek" :
    a5c0:	4b6b      	ldr	r3, [pc, #428]	; (a770 <main_loop+0xd4c>)
    a5c2:	781b      	ldrb	r3, [r3, #0]
    a5c4:	b19b      	cbz	r3, a5ee <main_loop+0xbca>
    a5c6:	2b04      	cmp	r3, #4
    a5c8:	d028      	beq.n	a61c <main_loop+0xbf8>
    a5ca:	2b01      	cmp	r3, #1
    a5cc:	d028      	beq.n	a620 <main_loop+0xbfc>
																 (cardB_type == CARD_MAXI_IO) ? "Maxi IO" : (cardB_type == CARD_MINI_IO) ? "Mini IO" : "Unknown");
    a5ce:	2b03      	cmp	r3, #3
    a5d0:	d028      	beq.n	a624 <main_loop+0xc00>
    a5d2:	4a63      	ldr	r2, [pc, #396]	; (a760 <main_loop+0xd3c>)
    a5d4:	4967      	ldr	r1, [pc, #412]	; (a774 <main_loop+0xd50>)
    a5d6:	2b02      	cmp	r3, #2
    a5d8:	bf18      	it	ne
    a5da:	4611      	movne	r1, r2
    a5dc:	e008      	b.n	a5f0 <main_loop+0xbcc>
				xprintf("<CLI DEBUG> CardA            = %s\r\n", (cardA_type == CARD_NOTFITTED) ? "NOT FITTED" : (cardA_type == CARD_VIBRAPOINT) ? "VibraPoint" : (cardA_type == CARD_VIBRATEK) ? "VibraTek" :
    a5de:	4966      	ldr	r1, [pc, #408]	; (a778 <main_loop+0xd54>)
    a5e0:	e7eb      	b.n	a5ba <main_loop+0xb96>
    a5e2:	4966      	ldr	r1, [pc, #408]	; (a77c <main_loop+0xd58>)
    a5e4:	e7e9      	b.n	a5ba <main_loop+0xb96>
					                                             (cardA_type == CARD_MAXI_IO) ? "Maxi IO" : (cardA_type == CARD_MINI_IO) ? "Mini IO" : (cardA_type == CARD_PE) ? "P&E" : "Unknown");
    a5e6:	4966      	ldr	r1, [pc, #408]	; (a780 <main_loop+0xd5c>)
    a5e8:	e7e7      	b.n	a5ba <main_loop+0xb96>
    a5ea:	4962      	ldr	r1, [pc, #392]	; (a774 <main_loop+0xd50>)
    a5ec:	e7e5      	b.n	a5ba <main_loop+0xb96>
				xprintf("<CLI DEBUG> CardB            = %s\r\n", (cardB_type == CARD_NOTFITTED) ? "NOT FITTED" : (cardB_type == CARD_VIBRAPOINT) ? "VibraPoint" : (cardB_type == CARD_VIBRATEK) ? "VibraTek" :
    a5ee:	495e      	ldr	r1, [pc, #376]	; (a768 <main_loop+0xd44>)
    a5f0:	4864      	ldr	r0, [pc, #400]	; (a784 <main_loop+0xd60>)
    a5f2:	4b3c      	ldr	r3, [pc, #240]	; (a6e4 <main_loop+0xcc0>)
    a5f4:	4798      	blx	r3
				xprintf("<CLI DEBUG> Ring Topology    = %s\r\n", (ring_broken == RING_BROKEN) ? "BROKEN" : (ring_broken == RING_CLOSED) ? "LOOP" : "N/A");
    a5f6:	4b64      	ldr	r3, [pc, #400]	; (a788 <main_loop+0xd64>)
    a5f8:	781b      	ldrb	r3, [r3, #0]
    a5fa:	2b01      	cmp	r3, #1
    a5fc:	d014      	beq.n	a628 <main_loop+0xc04>
    a5fe:	4a63      	ldr	r2, [pc, #396]	; (a78c <main_loop+0xd68>)
    a600:	4963      	ldr	r1, [pc, #396]	; (a790 <main_loop+0xd6c>)
    a602:	2b00      	cmp	r3, #0
    a604:	bf18      	it	ne
    a606:	4611      	movne	r1, r2
    a608:	4862      	ldr	r0, [pc, #392]	; (a794 <main_loop+0xd70>)
    a60a:	4c36      	ldr	r4, [pc, #216]	; (a6e4 <main_loop+0xcc0>)
    a60c:	47a0      	blx	r4
				xprintf("<CLI DEBUG> Firmware         = %d.%d\r\n", MULTISENSE_FIRMWARE_MAJOR, MULTISENSE_FIRMWARE_MINOR);
    a60e:	2201      	movs	r2, #1
    a610:	2100      	movs	r1, #0
    a612:	4861      	ldr	r0, [pc, #388]	; (a798 <main_loop+0xd74>)
    a614:	47a0      	blx	r4
				xprintf(". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n\r\n");
    a616:	4861      	ldr	r0, [pc, #388]	; (a79c <main_loop+0xd78>)
    a618:	47a0      	blx	r4
				break;
    a61a:	e673      	b.n	a304 <main_loop+0x8e0>
				xprintf("<CLI DEBUG> CardB            = %s\r\n", (cardB_type == CARD_NOTFITTED) ? "NOT FITTED" : (cardB_type == CARD_VIBRAPOINT) ? "VibraPoint" : (cardB_type == CARD_VIBRATEK) ? "VibraTek" :
    a61c:	4956      	ldr	r1, [pc, #344]	; (a778 <main_loop+0xd54>)
    a61e:	e7e7      	b.n	a5f0 <main_loop+0xbcc>
    a620:	4956      	ldr	r1, [pc, #344]	; (a77c <main_loop+0xd58>)
    a622:	e7e5      	b.n	a5f0 <main_loop+0xbcc>
																 (cardB_type == CARD_MAXI_IO) ? "Maxi IO" : (cardB_type == CARD_MINI_IO) ? "Mini IO" : "Unknown");
    a624:	4956      	ldr	r1, [pc, #344]	; (a780 <main_loop+0xd5c>)
    a626:	e7e3      	b.n	a5f0 <main_loop+0xbcc>
				xprintf("<CLI DEBUG> Ring Topology    = %s\r\n", (ring_broken == RING_BROKEN) ? "BROKEN" : (ring_broken == RING_CLOSED) ? "LOOP" : "N/A");
    a628:	495d      	ldr	r1, [pc, #372]	; (a7a0 <main_loop+0xd7c>)
    a62a:	e7ed      	b.n	a608 <main_loop+0xbe4>
				xprintf("\r\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n");
    a62c:	482c      	ldr	r0, [pc, #176]	; (a6e0 <main_loop+0xcbc>)
    a62e:	4d2d      	ldr	r5, [pc, #180]	; (a6e4 <main_loop+0xcc0>)
    a630:	47a8      	blx	r5
				xprintf("<CLI DEBUG> [IP SCHEME / NETWORK] command\r\n");
    a632:	485c      	ldr	r0, [pc, #368]	; (a7a4 <main_loop+0xd80>)
    a634:	47a8      	blx	r5
				xprintf("<CLI DEBUG> IP               = %d.%d.%d.%d\r\n", uip_ipaddr2(ipaddr), uip_ipaddr1(ipaddr), uip_ipaddr4(ipaddr), uip_ipaddr3(ipaddr));
    a636:	4e5c      	ldr	r6, [pc, #368]	; (a7a8 <main_loop+0xd84>)
    a638:	8830      	ldrh	r0, [r6, #0]
    a63a:	4c5c      	ldr	r4, [pc, #368]	; (a7ac <main_loop+0xd88>)
    a63c:	47a0      	blx	r4
    a63e:	4680      	mov	r8, r0
    a640:	8830      	ldrh	r0, [r6, #0]
    a642:	47a0      	blx	r4
    a644:	4681      	mov	r9, r0
    a646:	8870      	ldrh	r0, [r6, #2]
    a648:	47a0      	blx	r4
    a64a:	4682      	mov	sl, r0
    a64c:	8870      	ldrh	r0, [r6, #2]
    a64e:	47a0      	blx	r4
    a650:	f3c0 200f 	ubfx	r0, r0, #8, #16
    a654:	9000      	str	r0, [sp, #0]
    a656:	fa5f f38a 	uxtb.w	r3, sl
    a65a:	f3c9 220f 	ubfx	r2, r9, #8, #16
    a65e:	fa5f f188 	uxtb.w	r1, r8
    a662:	4853      	ldr	r0, [pc, #332]	; (a7b0 <main_loop+0xd8c>)
    a664:	47a8      	blx	r5
				xprintf("<CLI DEBUG> Netmask          = %d.%d.%d.%d\r\n", uip_ipaddr2(netmask), uip_ipaddr1(netmask), uip_ipaddr4(netmask), uip_ipaddr3(netmask));
    a666:	4e53      	ldr	r6, [pc, #332]	; (a7b4 <main_loop+0xd90>)
    a668:	8830      	ldrh	r0, [r6, #0]
    a66a:	47a0      	blx	r4
    a66c:	4680      	mov	r8, r0
    a66e:	8830      	ldrh	r0, [r6, #0]
    a670:	47a0      	blx	r4
    a672:	4681      	mov	r9, r0
    a674:	8870      	ldrh	r0, [r6, #2]
    a676:	47a0      	blx	r4
    a678:	4682      	mov	sl, r0
    a67a:	8870      	ldrh	r0, [r6, #2]
    a67c:	47a0      	blx	r4
    a67e:	f3c0 200f 	ubfx	r0, r0, #8, #16
    a682:	9000      	str	r0, [sp, #0]
    a684:	fa5f f38a 	uxtb.w	r3, sl
    a688:	f3c9 220f 	ubfx	r2, r9, #8, #16
    a68c:	fa5f f188 	uxtb.w	r1, r8
    a690:	4849      	ldr	r0, [pc, #292]	; (a7b8 <main_loop+0xd94>)
    a692:	47a8      	blx	r5
				xprintf("<CLI DEBUG> Gateway          = %d.%d.%d.%d\r\n", uip_ipaddr2(gwaddr), uip_ipaddr1(gwaddr), uip_ipaddr4(gwaddr), uip_ipaddr3(gwaddr));
    a694:	4e49      	ldr	r6, [pc, #292]	; (a7bc <main_loop+0xd98>)
    a696:	8830      	ldrh	r0, [r6, #0]
    a698:	47a0      	blx	r4
    a69a:	4680      	mov	r8, r0
    a69c:	8830      	ldrh	r0, [r6, #0]
    a69e:	47a0      	blx	r4
    a6a0:	4681      	mov	r9, r0
    a6a2:	8870      	ldrh	r0, [r6, #2]
    a6a4:	47a0      	blx	r4
    a6a6:	4682      	mov	sl, r0
    a6a8:	8870      	ldrh	r0, [r6, #2]
    a6aa:	47a0      	blx	r4
    a6ac:	f3c0 200f 	ubfx	r0, r0, #8, #16
    a6b0:	9000      	str	r0, [sp, #0]
    a6b2:	fa5f f38a 	uxtb.w	r3, sl
    a6b6:	f3c9 220f 	ubfx	r2, r9, #8, #16
    a6ba:	fa5f f188 	uxtb.w	r1, r8
    a6be:	4840      	ldr	r0, [pc, #256]	; (a7c0 <main_loop+0xd9c>)
    a6c0:	47a8      	blx	r5
				xprintf("<CLI DEBUG> MAC              = %x:%x:%x:%x:%x:%x\r\n", mac_raw[0], mac_raw[1], mac_raw[2], mac_raw[3], mac_raw[4], mac_raw[5]);
    a6c2:	4840      	ldr	r0, [pc, #256]	; (a7c4 <main_loop+0xda0>)
    a6c4:	7883      	ldrb	r3, [r0, #2]
    a6c6:	7842      	ldrb	r2, [r0, #1]
    a6c8:	7801      	ldrb	r1, [r0, #0]
    a6ca:	7944      	ldrb	r4, [r0, #5]
    a6cc:	9402      	str	r4, [sp, #8]
    a6ce:	7904      	ldrb	r4, [r0, #4]
    a6d0:	9401      	str	r4, [sp, #4]
    a6d2:	78c0      	ldrb	r0, [r0, #3]
    a6d4:	9000      	str	r0, [sp, #0]
    a6d6:	483c      	ldr	r0, [pc, #240]	; (a7c8 <main_loop+0xda4>)
    a6d8:	47a8      	blx	r5
				xprintf(". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n\r\n");
    a6da:	4830      	ldr	r0, [pc, #192]	; (a79c <main_loop+0xd78>)
    a6dc:	47a8      	blx	r5
				break;
    a6de:	e611      	b.n	a304 <main_loop+0x8e0>
    a6e0:	00010784 	.word	0x00010784
    a6e4:	0000031d 	.word	0x0000031d
    a6e8:	000108ec 	.word	0x000108ec
    a6ec:	00010918 	.word	0x00010918
    a6f0:	0001093c 	.word	0x0001093c
    a6f4:	00010960 	.word	0x00010960
    a6f8:	00010984 	.word	0x00010984
    a6fc:	00010464 	.word	0x00010464
    a700:	00010458 	.word	0x00010458
    a704:	000109a8 	.word	0x000109a8
    a708:	20008562 	.word	0x20008562
    a70c:	000109cc 	.word	0x000109cc
    a710:	2000854d 	.word	0x2000854d
    a714:	000109f0 	.word	0x000109f0
    a718:	20008557 	.word	0x20008557
    a71c:	00010a14 	.word	0x00010a14
    a720:	20007fb8 	.word	0x20007fb8
    a724:	00010a38 	.word	0x00010a38
    a728:	00010a5c 	.word	0x00010a5c
    a72c:	20007fb3 	.word	0x20007fb3
    a730:	0000e9c0 	.word	0x0000e9c0
    a734:	00010474 	.word	0x00010474
    a738:	00010a80 	.word	0x00010a80
    a73c:	20007575 	.word	0x20007575
    a740:	00010480 	.word	0x00010480
    a744:	00010478 	.word	0x00010478
    a748:	00010aa4 	.word	0x00010aa4
    a74c:	20008294 	.word	0x20008294
    a750:	00010ac8 	.word	0x00010ac8
    a754:	20007579 	.word	0x20007579
    a758:	00010aec 	.word	0x00010aec
    a75c:	20007c6e 	.word	0x20007c6e
    a760:	000104c0 	.word	0x000104c0
    a764:	000104c8 	.word	0x000104c8
    a768:	00010498 	.word	0x00010498
    a76c:	00010b10 	.word	0x00010b10
    a770:	20008564 	.word	0x20008564
    a774:	000104b8 	.word	0x000104b8
    a778:	0001048c 	.word	0x0001048c
    a77c:	000104a4 	.word	0x000104a4
    a780:	000104b0 	.word	0x000104b0
    a784:	00010b34 	.word	0x00010b34
    a788:	2000826d 	.word	0x2000826d
    a78c:	000104cc 	.word	0x000104cc
    a790:	000104d8 	.word	0x000104d8
    a794:	00010b58 	.word	0x00010b58
    a798:	00010b7c 	.word	0x00010b7c
    a79c:	000107f0 	.word	0x000107f0
    a7a0:	000104d0 	.word	0x000104d0
    a7a4:	00010ba4 	.word	0x00010ba4
    a7a8:	20007598 	.word	0x20007598
    a7ac:	0000cabd 	.word	0x0000cabd
    a7b0:	00010bd0 	.word	0x00010bd0
    a7b4:	20007f28 	.word	0x20007f28
    a7b8:	00010c00 	.word	0x00010c00
    a7bc:	20008544 	.word	0x20008544
    a7c0:	00010c30 	.word	0x00010c30
    a7c4:	20007fac 	.word	0x20007fac
    a7c8:	00010c60 	.word	0x00010c60
				xprintf("\r\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n");
    a7cc:	4831      	ldr	r0, [pc, #196]	; (a894 <main_loop+0xe70>)
    a7ce:	4c32      	ldr	r4, [pc, #200]	; (a898 <main_loop+0xe74>)
    a7d0:	47a0      	blx	r4
				xprintf("<CLI DEBUG> [SPEED MAINLOOP] command\r\n");
    a7d2:	4832      	ldr	r0, [pc, #200]	; (a89c <main_loop+0xe78>)
    a7d4:	47a0      	blx	r4
				xprintf("<CLI DEBUG> Main-loop/Sampling = %d\r\n", looprate);
    a7d6:	4b32      	ldr	r3, [pc, #200]	; (a8a0 <main_loop+0xe7c>)
    a7d8:	6819      	ldr	r1, [r3, #0]
    a7da:	4832      	ldr	r0, [pc, #200]	; (a8a4 <main_loop+0xe80>)
    a7dc:	47a0      	blx	r4
				xprintf(". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n\r\n");
    a7de:	4832      	ldr	r0, [pc, #200]	; (a8a8 <main_loop+0xe84>)
    a7e0:	47a0      	blx	r4
				break;
    a7e2:	e58f      	b.n	a304 <main_loop+0x8e0>
				xprintf("\r\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n");
    a7e4:	482b      	ldr	r0, [pc, #172]	; (a894 <main_loop+0xe70>)
    a7e6:	4c2c      	ldr	r4, [pc, #176]	; (a898 <main_loop+0xe74>)
    a7e8:	47a0      	blx	r4
				xprintf("<CLI DEBUG> Unknown command\r\n\r\nHelp Screen:\r\n\r\n");
    a7ea:	4830      	ldr	r0, [pc, #192]	; (a8ac <main_loop+0xe88>)
    a7ec:	47a0      	blx	r4
				xprintf("R         [REBOOT] command\r\n");
    a7ee:	4830      	ldr	r0, [pc, #192]	; (a8b0 <main_loop+0xe8c>)
    a7f0:	47a0      	blx	r4
				xprintf("D         [CONFIGURATION DEFAULT] command\r\n");
    a7f2:	4830      	ldr	r0, [pc, #192]	; (a8b4 <main_loop+0xe90>)
    a7f4:	47a0      	blx	r4
				xprintf("X         [ID RESET] command\r\n");
    a7f6:	4830      	ldr	r0, [pc, #192]	; (a8b8 <main_loop+0xe94>)
    a7f8:	47a0      	blx	r4
				xprintf("B         [BASESTATION] command\r\n");
    a7fa:	4830      	ldr	r0, [pc, #192]	; (a8bc <main_loop+0xe98>)
    a7fc:	47a0      	blx	r4
				xprintf("P         [PASS THROUGH] command\r\n");
    a7fe:	4830      	ldr	r0, [pc, #192]	; (a8c0 <main_loop+0xe9c>)
    a800:	47a0      	blx	r4
				xprintf("L         [LIVE BOARD PRINT] command\r\n");
    a802:	4830      	ldr	r0, [pc, #192]	; (a8c4 <main_loop+0xea0>)
    a804:	47a0      	blx	r4
				xprintf("I         [IP SCHEME / NETWORK] command\r\n");
    a806:	4830      	ldr	r0, [pc, #192]	; (a8c8 <main_loop+0xea4>)
    a808:	47a0      	blx	r4
				xprintf("S         [SPEED MAINLOOP] command\r\n\r\n");
    a80a:	4830      	ldr	r0, [pc, #192]	; (a8cc <main_loop+0xea8>)
    a80c:	47a0      	blx	r4
				xprintf(". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n\r\n");
    a80e:	4826      	ldr	r0, [pc, #152]	; (a8a8 <main_loop+0xe84>)
    a810:	47a0      	blx	r4
				break;
    a812:	e577      	b.n	a304 <main_loop+0x8e0>
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 */
static inline int32_t wdt_feed(struct wdt_descriptor *const wdt)
{
	ASSERT(wdt && wdt->dev.hw);
    a814:	4c2e      	ldr	r4, [pc, #184]	; (a8d0 <main_loop+0xeac>)
    a816:	6820      	ldr	r0, [r4, #0]
    a818:	22a9      	movs	r2, #169	; 0xa9
    a81a:	492e      	ldr	r1, [pc, #184]	; (a8d4 <main_loop+0xeb0>)
    a81c:	3000      	adds	r0, #0
    a81e:	bf18      	it	ne
    a820:	2001      	movne	r0, #1
    a822:	4b2d      	ldr	r3, [pc, #180]	; (a8d8 <main_loop+0xeb4>)
    a824:	4798      	blx	r3

	return _wdt_feed(&wdt->dev);
    a826:	4620      	mov	r0, r4
    a828:	4b2c      	ldr	r3, [pc, #176]	; (a8dc <main_loop+0xeb8>)
    a82a:	4798      	blx	r3
    a82c:	e56f      	b.n	a30e <main_loop+0x8ea>
		if (((cardA_type == CARD_VIBRATEK) || (cardA_type == CARD_VIBRAPOINT)) && (card_sampleindex < SAMPLE_BUFFER_SIZE)) {
    a82e:	4b2c      	ldr	r3, [pc, #176]	; (a8e0 <main_loop+0xebc>)
    a830:	681b      	ldr	r3, [r3, #0]
    a832:	f5b3 7f2b 	cmp.w	r3, #684	; 0x2ac
    a836:	f4ff aa49 	bcc.w	9ccc <main_loop+0x2a8>
		if (((cardB_type == CARD_VIBRATEK) || (cardB_type == CARD_VIBRAPOINT)) && (card_sampleindex < SAMPLE_BUFFER_SIZE)) {
    a83a:	4b2a      	ldr	r3, [pc, #168]	; (a8e4 <main_loop+0xec0>)
    a83c:	781b      	ldrb	r3, [r3, #0]
    a83e:	2b01      	cmp	r3, #1
    a840:	f47f aaf8 	bne.w	9e34 <main_loop+0x410>
    a844:	e005      	b.n	a852 <main_loop+0xe2e>
    a846:	4b26      	ldr	r3, [pc, #152]	; (a8e0 <main_loop+0xebc>)
    a848:	681b      	ldr	r3, [r3, #0]
    a84a:	f5b3 7f2b 	cmp.w	r3, #684	; 0x2ac
    a84e:	f4ff ab99 	bcc.w	9f84 <main_loop+0x560>
		if ((cardA_type == CARD_VIBRATEK) || (cardB_type == CARD_VIBRATEK) || (cardA_type == CARD_VIBRAPOINT) || (cardB_type == CARD_VIBRAPOINT)) {
    a852:	4b25      	ldr	r3, [pc, #148]	; (a8e8 <main_loop+0xec4>)
    a854:	781b      	ldrb	r3, [r3, #0]
    a856:	2b01      	cmp	r3, #1
    a858:	f43f ac3d 	beq.w	a0d6 <main_loop+0x6b2>
    a85c:	4a21      	ldr	r2, [pc, #132]	; (a8e4 <main_loop+0xec0>)
    a85e:	7812      	ldrb	r2, [r2, #0]
    a860:	2a01      	cmp	r2, #1
    a862:	f43f ac38 	beq.w	a0d6 <main_loop+0x6b2>
    a866:	2b04      	cmp	r3, #4
    a868:	f43f ac35 	beq.w	a0d6 <main_loop+0x6b2>
    a86c:	2a04      	cmp	r2, #4
    a86e:	f43f ac32 	beq.w	a0d6 <main_loop+0x6b2>
		} else if (readenvironment == 1) {
    a872:	4b1e      	ldr	r3, [pc, #120]	; (a8ec <main_loop+0xec8>)
    a874:	781b      	ldrb	r3, [r3, #0]
    a876:	2b01      	cmp	r3, #1
    a878:	f47f ac34 	bne.w	a0e4 <main_loop+0x6c0>
			readenvironment = 2;
    a87c:	2202      	movs	r2, #2
    a87e:	4b1b      	ldr	r3, [pc, #108]	; (a8ec <main_loop+0xec8>)
    a880:	701a      	strb	r2, [r3, #0]
    a882:	e42f      	b.n	a0e4 <main_loop+0x6c0>
		if ((cardA_type == CARD_VIBRATEK) || (cardB_type == CARD_VIBRATEK) || (cardA_type == CARD_VIBRAPOINT) || (cardB_type == CARD_VIBRAPOINT)) {
    a884:	4b18      	ldr	r3, [pc, #96]	; (a8e8 <main_loop+0xec4>)
    a886:	781b      	ldrb	r3, [r3, #0]
    a888:	2b01      	cmp	r3, #1
    a88a:	f43f ac24 	beq.w	a0d6 <main_loop+0x6b2>
    a88e:	4a15      	ldr	r2, [pc, #84]	; (a8e4 <main_loop+0xec0>)
    a890:	7812      	ldrb	r2, [r2, #0]
    a892:	e7e8      	b.n	a866 <main_loop+0xe42>
    a894:	00010784 	.word	0x00010784
    a898:	0000031d 	.word	0x0000031d
    a89c:	00010c94 	.word	0x00010c94
    a8a0:	20008578 	.word	0x20008578
    a8a4:	00010cbc 	.word	0x00010cbc
    a8a8:	000107f0 	.word	0x000107f0
    a8ac:	00010ce4 	.word	0x00010ce4
    a8b0:	00010d14 	.word	0x00010d14
    a8b4:	00010d34 	.word	0x00010d34
    a8b8:	00010d60 	.word	0x00010d60
    a8bc:	00010d80 	.word	0x00010d80
    a8c0:	00010da4 	.word	0x00010da4
    a8c4:	00010dc8 	.word	0x00010dc8
    a8c8:	00010df0 	.word	0x00010df0
    a8cc:	00010e1c 	.word	0x00010e1c
    a8d0:	20007474 	.word	0x20007474
    a8d4:	0000ee70 	.word	0x0000ee70
    a8d8:	0000272d 	.word	0x0000272d
    a8dc:	000054dd 	.word	0x000054dd
    a8e0:	20008548 	.word	0x20008548
    a8e4:	20008564 	.word	0x20008564
    a8e8:	20007c6e 	.word	0x20007c6e
    a8ec:	2000826c 	.word	0x2000826c

0000a8f0 <main>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: Main start-point of whole application code
// Returns:     Nothing (NULL)
// *****************************************************************************************************************************************************************
int main(void)
{
    a8f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a8f4:	b084      	sub	sp, #16
	unsigned char	ID_index;
	unsigned char	ID_string[9];
	unsigned int	new_id;
			
	/* Initialize the lower-level Atmel drivers, hardware and HAL interface */
	atmel_start_init();
    a8f6:	4b81      	ldr	r3, [pc, #516]	; (aafc <main+0x20c>)
    a8f8:	4798      	blx	r3
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    a8fa:	4a81      	ldr	r2, [pc, #516]	; (ab00 <main+0x210>)
    a8fc:	f240 73fc 	movw	r3, #2044	; 0x7fc
    a900:	6b11      	ldr	r1, [r2, #48]	; 0x30
    a902:	4219      	tst	r1, r3
    a904:	d1fc      	bne.n	a900 <main+0x10>
	((Adc *)hw)->DSEQCTRL.reg |= ADC_DSEQCTRL_INPUTCTRL;
    a906:	4a7e      	ldr	r2, [pc, #504]	; (ab00 <main+0x210>)
    a908:	6b93      	ldr	r3, [r2, #56]	; 0x38
    a90a:	f043 0301 	orr.w	r3, r3, #1
    a90e:	6393      	str	r3, [r2, #56]	; 0x38
	hri_adc_set_DSEQCTRL_INPUTCTRL_bit(ADC0);    //enable DMA update of the Input Control register
	// Similar to above call, other functions like CTRLB reg REFCTRL etc.. can be added to
	// DMA update sequence by writing the respective DSEQCTRL bit

	/* Set DMA source and destination */
	_dma_set_source_address(DMA_CHANNEL_0, (const void *const)inputctrl_buff);
    a910:	497c      	ldr	r1, [pc, #496]	; (ab04 <main+0x214>)
    a912:	2000      	movs	r0, #0
    a914:	4b7c      	ldr	r3, [pc, #496]	; (ab08 <main+0x218>)
    a916:	4798      	blx	r3
	_dma_set_destination_address(DMA_CHANNEL_0, (void *)(uint32_t) &(ADC0->DSEQDATA.reg));
    a918:	497c      	ldr	r1, [pc, #496]	; (ab0c <main+0x21c>)
    a91a:	2000      	movs	r0, #0
    a91c:	4b7c      	ldr	r3, [pc, #496]	; (ab10 <main+0x220>)
    a91e:	4798      	blx	r3
	_dma_set_data_amount(DMA_CHANNEL_0, SEQ_LENGTH);
    a920:	210a      	movs	r1, #10
    a922:	2000      	movs	r0, #0
    a924:	4b7b      	ldr	r3, [pc, #492]	; (ab14 <main+0x224>)
    a926:	4798      	blx	r3
	_dma_enable_transaction(DMA_CHANNEL_0, false);
    a928:	2100      	movs	r1, #0
    a92a:	4608      	mov	r0, r1
    a92c:	4b7a      	ldr	r3, [pc, #488]	; (ab18 <main+0x228>)
    a92e:	4798      	blx	r3
	
	usart_async_get_io_descriptor(&USART_1, &io);
    a930:	4c7a      	ldr	r4, [pc, #488]	; (ab1c <main+0x22c>)
    a932:	497b      	ldr	r1, [pc, #492]	; (ab20 <main+0x230>)
    a934:	4620      	mov	r0, r4
    a936:	4b7b      	ldr	r3, [pc, #492]	; (ab24 <main+0x234>)
    a938:	4798      	blx	r3
	usart_async_register_callback(&USART_1, USART_ASYNC_TXC_CB, tx_callb);
    a93a:	4a7b      	ldr	r2, [pc, #492]	; (ab28 <main+0x238>)
    a93c:	2101      	movs	r1, #1
    a93e:	4620      	mov	r0, r4
    a940:	4d7a      	ldr	r5, [pc, #488]	; (ab2c <main+0x23c>)
    a942:	47a8      	blx	r5
	usart_async_register_callback(&USART_1, USART_ASYNC_RXC_CB, rx_callb);
    a944:	4a7a      	ldr	r2, [pc, #488]	; (ab30 <main+0x240>)
    a946:	2100      	movs	r1, #0
    a948:	4620      	mov	r0, r4
    a94a:	47a8      	blx	r5
	usart_async_enable(&USART_1);
    a94c:	4620      	mov	r0, r4
    a94e:	4b79      	ldr	r3, [pc, #484]	; (ab34 <main+0x244>)
    a950:	4798      	blx	r3
	
	xprintf("\n\n\n\n\n\n\n\n\n\n\n\n---------------------------------------------------------------------------------------------------------------------\r\n");
    a952:	4879      	ldr	r0, [pc, #484]	; (ab38 <main+0x248>)
    a954:	4c79      	ldr	r4, [pc, #484]	; (ab3c <main+0x24c>)
    a956:	47a0      	blx	r4
	xprintf("MultiSense [START]\r\n");
    a958:	4879      	ldr	r0, [pc, #484]	; (ab40 <main+0x250>)
    a95a:	47a0      	blx	r4
	xprintf("---------------------------------------------------------------------------------------------------------------------\r\n");
    a95c:	4879      	ldr	r0, [pc, #484]	; (ab44 <main+0x254>)
    a95e:	47a0      	blx	r4

	/* Clear and initialize the global variables */
	var_init();
    a960:	4b79      	ldr	r3, [pc, #484]	; (ab48 <main+0x258>)
    a962:	4798      	blx	r3
	xprintf("MultiSense [init global-variables done]\r\n");
    a964:	4879      	ldr	r0, [pc, #484]	; (ab4c <main+0x25c>)
    a966:	47a0      	blx	r4

	/* Set-up the none-hardware utilized GPIO pins */
	gpio_init();
    a968:	4b79      	ldr	r3, [pc, #484]	; (ab50 <main+0x260>)
    a96a:	4798      	blx	r3
	xprintf("MultiSense [init I/O done]\r\n");
    a96c:	4879      	ldr	r0, [pc, #484]	; (ab54 <main+0x264>)
    a96e:	47a0      	blx	r4

	/* Set-up the SPI bus and the USB host stack */
	comms_init();
    a970:	4b79      	ldr	r3, [pc, #484]	; (ab58 <main+0x268>)
    a972:	4798      	blx	r3
	xprintf("MultiSense [init SPI & USB done]\r\n");
    a974:	4879      	ldr	r0, [pc, #484]	; (ab5c <main+0x26c>)
    a976:	47a0      	blx	r4

	/* Reset the Ethernet SWITCH IC via GPIO reset line */
	switch_init();
    a978:	4b79      	ldr	r3, [pc, #484]	; (ab60 <main+0x270>)
    a97a:	4798      	blx	r3
	xprintf("MultiSense [Ethernet SWITCH reset]\r\n");
    a97c:	4879      	ldr	r0, [pc, #484]	; (ab64 <main+0x274>)
    a97e:	47a0      	blx	r4

	/* Initialize the Ethernet SWITCH IC via the SPI bus */
	switch_configure();
    a980:	4b79      	ldr	r3, [pc, #484]	; (ab68 <main+0x278>)
    a982:	4798      	blx	r3
	xprintf("MultiSense [init SWITCH done]\r\n");
    a984:	4879      	ldr	r0, [pc, #484]	; (ab6c <main+0x27c>)
    a986:	47a0      	blx	r4

	/* Define and start the main timer as 1/10th of a second ticker */
	timer_setup();
    a988:	4b79      	ldr	r3, [pc, #484]	; (ab70 <main+0x280>)
    a98a:	4798      	blx	r3
	xprintf("MultiSense [init TIMER done]\r\n");
    a98c:	4879      	ldr	r0, [pc, #484]	; (ab74 <main+0x284>)
    a98e:	47a0      	blx	r4

	/* Internal on-chip ADC feature initialization, used for the water detection feature */
	ADC_init();
    a990:	4b79      	ldr	r3, [pc, #484]	; (ab78 <main+0x288>)
    a992:	4798      	blx	r3
	xprintf("MultiSense [init ADC done]\r\n");
    a994:	4879      	ldr	r0, [pc, #484]	; (ab7c <main+0x28c>)
    a996:	47a0      	blx	r4

	/* Enable and configure the Cryptography on-chip engine with the AES 128-bit private-key */
	crypto_init();
    a998:	4b79      	ldr	r3, [pc, #484]	; (ab80 <main+0x290>)
    a99a:	4798      	blx	r3
	xprintf("MultiSense [init CRYPTO done]\r\n");
    a99c:	4879      	ldr	r0, [pc, #484]	; (ab84 <main+0x294>)
    a99e:	47a0      	blx	r4

	/* IP stack initialization */
	uip_init();																									// initialize the IP stack
    a9a0:	4b79      	ldr	r3, [pc, #484]	; (ab88 <main+0x298>)
    a9a2:	4798      	blx	r3
	xprintf("MultiSense [init uIP done]\r\n");
    a9a4:	4879      	ldr	r0, [pc, #484]	; (ab8c <main+0x29c>)
    a9a6:	47a0      	blx	r4

	/* Set the board MAC and IP address along with the network schemes */
	address_configure();
    a9a8:	4b79      	ldr	r3, [pc, #484]	; (ab90 <main+0x2a0>)
    a9aa:	4798      	blx	r3

	if (((CONFIG *)&settings_buffer)->ID > 0x00000000) {
    a9ac:	4b79      	ldr	r3, [pc, #484]	; (ab94 <main+0x2a4>)
    a9ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    a9b0:	b1ab      	cbz	r3, a9de <main+0xee>
		/* Initialize the ring loop topology function */
		ring_init((unsigned char)(((CONFIG *)&settings_buffer)->loop_basestation), (unsigned char *)&mac_raw);
    a9b2:	4979      	ldr	r1, [pc, #484]	; (ab98 <main+0x2a8>)
    a9b4:	4b77      	ldr	r3, [pc, #476]	; (ab94 <main+0x2a4>)
    a9b6:	f893 002b 	ldrb.w	r0, [r3, #43]	; 0x2b
    a9ba:	4b78      	ldr	r3, [pc, #480]	; (ab9c <main+0x2ac>)
    a9bc:	4798      	blx	r3
		xprintf("********************************************************************************************\r\n\r\n");
	}
	
	/* Create, enable and start the system watchdog (4 seconds timeout period) */
	
	watchdog_init();
    a9be:	4b78      	ldr	r3, [pc, #480]	; (aba0 <main+0x2b0>)
    a9c0:	4798      	blx	r3
	
	if (((CONFIG *)&settings_buffer)->ID > 0x00000000) {
    a9c2:	4b74      	ldr	r3, [pc, #464]	; (ab94 <main+0x2a4>)
    a9c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    a9c6:	b9c3      	cbnz	r3, a9fa <main+0x10a>
		xprintf("MultiSense [boot-up & init completed]\r\n");
		xprintf("- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\r\n");
	} else {
		do {
			xprintf("\r\nEnter new [ID] now:\r\n");
    a9c8:	f8df 923c 	ldr.w	r9, [pc, #572]	; ac08 <main+0x318>
    a9cc:	f8df 816c 	ldr.w	r8, [pc, #364]	; ab3c <main+0x24c>
			/* check for a character being pressed on the CLI keyboard */
					
			ID_index = 0;
					
			while (1) {
				if (io_read((struct io_descriptor *const)io, (uint8_t *const)&ch, 1)) {
    a9d0:	4e53      	ldr	r6, [pc, #332]	; (ab20 <main+0x230>)
    a9d2:	4d74      	ldr	r5, [pc, #464]	; (aba4 <main+0x2b4>)
	ASSERT(wdt && wdt->dev.hw);
    a9d4:	4f74      	ldr	r7, [pc, #464]	; (aba8 <main+0x2b8>)
			xprintf("\r\nEnter new [ID] now:\r\n");
    a9d6:	4648      	mov	r0, r9
    a9d8:	47c0      	blx	r8
			ID_index = 0;
    a9da:	2400      	movs	r4, #0
    a9dc:	e026      	b.n	aa2c <main+0x13c>
		xprintf("********************************************************************************************\r\n");
    a9de:	4873      	ldr	r0, [pc, #460]	; (abac <main+0x2bc>)
    a9e0:	4c56      	ldr	r4, [pc, #344]	; (ab3c <main+0x24c>)
    a9e2:	47a0      	blx	r4
		xprintf("* THE MULTI-SENSE DEVICE [ID] HAS NOT BEEN SET. THIS DEFICE WILL NOT FUNCTION OR RUN AS    *\r\n");
    a9e4:	4872      	ldr	r0, [pc, #456]	; (abb0 <main+0x2c0>)
    a9e6:	47a0      	blx	r4
		xprintf("* NORMAL UNTIL THE [ID] NUMBER HAS BEEN ENTERED BY THIS TERMINAL FACILITY.                 *\r\n");
    a9e8:	4872      	ldr	r0, [pc, #456]	; (abb4 <main+0x2c4>)
    a9ea:	47a0      	blx	r4
		xprintf("* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  *\r\n");
    a9ec:	4872      	ldr	r0, [pc, #456]	; (abb8 <main+0x2c8>)
    a9ee:	47a0      	blx	r4
		xprintf("* PLEASE ENTER THE 32-BIT DEVICE [ID] BELOW:                                               *\r\n");
    a9f0:	4872      	ldr	r0, [pc, #456]	; (abbc <main+0x2cc>)
    a9f2:	47a0      	blx	r4
		xprintf("********************************************************************************************\r\n\r\n");
    a9f4:	4872      	ldr	r0, [pc, #456]	; (abc0 <main+0x2d0>)
    a9f6:	47a0      	blx	r4
    a9f8:	e7e1      	b.n	a9be <main+0xce>
		xprintf("MultiSense [boot-up & init completed]\r\n");
    a9fa:	4872      	ldr	r0, [pc, #456]	; (abc4 <main+0x2d4>)
    a9fc:	4c4f      	ldr	r4, [pc, #316]	; (ab3c <main+0x24c>)
    a9fe:	47a0      	blx	r4
		xprintf("- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\r\n");
    aa00:	4871      	ldr	r0, [pc, #452]	; (abc8 <main+0x2d8>)
    aa02:	47a0      	blx	r4
		}
		while (1);
	}
	
	/* Run the main-loop */
	main_loop();
    aa04:	4b71      	ldr	r3, [pc, #452]	; (abcc <main+0x2dc>)
    aa06:	4798      	blx	r3
						if (ID_index) {
    aa08:	b184      	cbz	r4, aa2c <main+0x13c>
							ID_index--;
    aa0a:	3c01      	subs	r4, #1
    aa0c:	b2e4      	uxtb	r4, r4
    aa0e:	e00d      	b.n	aa2c <main+0x13c>
    aa10:	f8df a1dc 	ldr.w	sl, [pc, #476]	; abf0 <main+0x300>
    aa14:	f8da 0000 	ldr.w	r0, [sl]
    aa18:	22a9      	movs	r2, #169	; 0xa9
    aa1a:	4639      	mov	r1, r7
    aa1c:	3000      	adds	r0, #0
    aa1e:	bf18      	it	ne
    aa20:	2001      	movne	r0, #1
    aa22:	4b6b      	ldr	r3, [pc, #428]	; (abd0 <main+0x2e0>)
    aa24:	4798      	blx	r3
	return _wdt_feed(&wdt->dev);
    aa26:	4650      	mov	r0, sl
    aa28:	4b6a      	ldr	r3, [pc, #424]	; (abd4 <main+0x2e4>)
    aa2a:	4798      	blx	r3
				if (io_read((struct io_descriptor *const)io, (uint8_t *const)&ch, 1)) {
    aa2c:	2201      	movs	r2, #1
    aa2e:	f10d 010f 	add.w	r1, sp, #15
    aa32:	6830      	ldr	r0, [r6, #0]
    aa34:	47a8      	blx	r5
    aa36:	2800      	cmp	r0, #0
    aa38:	d0ea      	beq.n	aa10 <main+0x120>
					if ((unsigned char)ch == 10) {
    aa3a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    aa3e:	2b0a      	cmp	r3, #10
    aa40:	d0f4      	beq.n	aa2c <main+0x13c>
					if ((unsigned char)ch == 8) {
    aa42:	2b08      	cmp	r3, #8
    aa44:	d0e0      	beq.n	aa08 <main+0x118>
					if ((unsigned char)ch == 13) {
    aa46:	2b0d      	cmp	r3, #13
    aa48:	d00d      	beq.n	aa66 <main+0x176>
					if ((unsigned char)ch < '0') {
    aa4a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    aa4e:	b2d2      	uxtb	r2, r2
    aa50:	2a09      	cmp	r2, #9
    aa52:	d8eb      	bhi.n	aa2c <main+0x13c>
					if (ID_index == 8) {
    aa54:	2c08      	cmp	r4, #8
    aa56:	d0e9      	beq.n	aa2c <main+0x13c>
					ID_string[ID_index++] = (unsigned char)ch;
    aa58:	1c62      	adds	r2, r4, #1
    aa5a:	a904      	add	r1, sp, #16
    aa5c:	440c      	add	r4, r1
    aa5e:	f804 3c0c 	strb.w	r3, [r4, #-12]
    aa62:	b2d4      	uxtb	r4, r2
    aa64:	e7d4      	b.n	aa10 <main+0x120>
			ID_string[ID_index] = 0;
    aa66:	ab04      	add	r3, sp, #16
    aa68:	441c      	add	r4, r3
    aa6a:	2300      	movs	r3, #0
    aa6c:	f804 3c0c 	strb.w	r3, [r4, #-12]
			xprintf("ID entered: %s\r\n", ID_string);
    aa70:	a901      	add	r1, sp, #4
    aa72:	4859      	ldr	r0, [pc, #356]	; (abd8 <main+0x2e8>)
    aa74:	47c0      	blx	r8
			xprintf("\r\nIs this correct Y/N?\r\n");
    aa76:	4859      	ldr	r0, [pc, #356]	; (abdc <main+0x2ec>)
    aa78:	47c0      	blx	r8
    aa7a:	e02f      	b.n	aadc <main+0x1ec>
						sscanf((char *)ID_string, "%u", &new_id);
    aa7c:	466a      	mov	r2, sp
    aa7e:	4958      	ldr	r1, [pc, #352]	; (abe0 <main+0x2f0>)
    aa80:	a801      	add	r0, sp, #4
    aa82:	4b58      	ldr	r3, [pc, #352]	; (abe4 <main+0x2f4>)
    aa84:	4798      	blx	r3
						((CONFIG *)&settings_buffer)->ID = new_id;
    aa86:	4843      	ldr	r0, [pc, #268]	; (ab94 <main+0x2a4>)
    aa88:	9b00      	ldr	r3, [sp, #0]
    aa8a:	62c3      	str	r3, [r0, #44]	; 0x2c
						if (EEprom_settings(settings_buffer, SETTING_STRUCTURE_SIZE, 1) != ERR_NONE) {
    aa8c:	2201      	movs	r2, #1
    aa8e:	2180      	movs	r1, #128	; 0x80
    aa90:	4b55      	ldr	r3, [pc, #340]	; (abe8 <main+0x2f8>)
    aa92:	4798      	blx	r3
    aa94:	b190      	cbz	r0, aabc <main+0x1cc>
							xprintf("MultiSense [configuration ERROR WRITING]\r\n");
    aa96:	4855      	ldr	r0, [pc, #340]	; (abec <main+0x2fc>)
    aa98:	4b28      	ldr	r3, [pc, #160]	; (ab3c <main+0x24c>)
    aa9a:	4798      	blx	r3
						wdt_disable(&WDT_0);
    aa9c:	4c54      	ldr	r4, [pc, #336]	; (abf0 <main+0x300>)
    aa9e:	4620      	mov	r0, r4
    aaa0:	4b54      	ldr	r3, [pc, #336]	; (abf4 <main+0x304>)
    aaa2:	4798      	blx	r3
						wdt_set_timeout_period(&WDT_0, 100, 25);
    aaa4:	2219      	movs	r2, #25
    aaa6:	2164      	movs	r1, #100	; 0x64
    aaa8:	4620      	mov	r0, r4
    aaaa:	4b53      	ldr	r3, [pc, #332]	; (abf8 <main+0x308>)
    aaac:	4798      	blx	r3
						wdt_enable(&WDT_0);
    aaae:	4620      	mov	r0, r4
    aab0:	4b52      	ldr	r3, [pc, #328]	; (abfc <main+0x30c>)
    aab2:	4798      	blx	r3
						xprintf("Rebooting...\r\n");
    aab4:	4852      	ldr	r0, [pc, #328]	; (ac00 <main+0x310>)
    aab6:	4b21      	ldr	r3, [pc, #132]	; (ab3c <main+0x24c>)
    aab8:	4798      	blx	r3
    aaba:	e7fe      	b.n	aaba <main+0x1ca>
							xprintf("MultiSense [configuration WRITTEN]\r\n");
    aabc:	4851      	ldr	r0, [pc, #324]	; (ac04 <main+0x314>)
    aabe:	4b1f      	ldr	r3, [pc, #124]	; (ab3c <main+0x24c>)
    aac0:	4798      	blx	r3
    aac2:	e7eb      	b.n	aa9c <main+0x1ac>
	ASSERT(wdt && wdt->dev.hw);
    aac4:	4c4a      	ldr	r4, [pc, #296]	; (abf0 <main+0x300>)
    aac6:	6820      	ldr	r0, [r4, #0]
    aac8:	22a9      	movs	r2, #169	; 0xa9
    aaca:	4639      	mov	r1, r7
    aacc:	3000      	adds	r0, #0
    aace:	bf18      	it	ne
    aad0:	2001      	movne	r0, #1
    aad2:	4b3f      	ldr	r3, [pc, #252]	; (abd0 <main+0x2e0>)
    aad4:	4798      	blx	r3
	return _wdt_feed(&wdt->dev);
    aad6:	4620      	mov	r0, r4
    aad8:	4b3e      	ldr	r3, [pc, #248]	; (abd4 <main+0x2e4>)
    aada:	4798      	blx	r3
				if (io_read((struct io_descriptor *const)io, (uint8_t *const)&ch, 1)) {
    aadc:	2201      	movs	r2, #1
    aade:	f10d 010f 	add.w	r1, sp, #15
    aae2:	6830      	ldr	r0, [r6, #0]
    aae4:	47a8      	blx	r5
    aae6:	2800      	cmp	r0, #0
    aae8:	d0ec      	beq.n	aac4 <main+0x1d4>
					if (((unsigned char)ch == 'y') || ((unsigned char)ch == 'Y')) {
    aaea:	f89d 300f 	ldrb.w	r3, [sp, #15]
    aaee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    aaf2:	2b59      	cmp	r3, #89	; 0x59
    aaf4:	d0c2      	beq.n	aa7c <main+0x18c>
					} else if (((unsigned char)ch == 'n') || ((unsigned char)ch == 'N')) {
    aaf6:	2b4e      	cmp	r3, #78	; 0x4e
    aaf8:	d1e4      	bne.n	aac4 <main+0x1d4>
    aafa:	e76c      	b.n	a9d6 <main+0xe6>
    aafc:	000002d1 	.word	0x000002d1
    ab00:	43001c00 	.word	0x43001c00
    ab04:	20000000 	.word	0x20000000
    ab08:	00002c4d 	.word	0x00002c4d
    ab0c:	43001c34 	.word	0x43001c34
    ab10:	00002c39 	.word	0x00002c39
    ab14:	00002c61 	.word	0x00002c61
    ab18:	00002cc9 	.word	0x00002cc9
    ab1c:	200074dc 	.word	0x200074dc
    ab20:	20007f20 	.word	0x20007f20
    ab24:	000020c9 	.word	0x000020c9
    ab28:	0000929d 	.word	0x0000929d
    ab2c:	000020f1 	.word	0x000020f1
    ab30:	0000929f 	.word	0x0000929f
    ab34:	0000209d 	.word	0x0000209d
    ab38:	00010e44 	.word	0x00010e44
    ab3c:	0000031d 	.word	0x0000031d
    ab40:	00010ec8 	.word	0x00010ec8
    ab44:	00010e50 	.word	0x00010e50
    ab48:	00009041 	.word	0x00009041
    ab4c:	00010ee0 	.word	0x00010ee0
    ab50:	00008d5d 	.word	0x00008d5d
    ab54:	00010f0c 	.word	0x00010f0c
    ab58:	00008131 	.word	0x00008131
    ab5c:	00010f2c 	.word	0x00010f2c
    ab60:	00008209 	.word	0x00008209
    ab64:	00010f50 	.word	0x00010f50
    ab68:	00008231 	.word	0x00008231
    ab6c:	00010f78 	.word	0x00010f78
    ab70:	000080e9 	.word	0x000080e9
    ab74:	00010f98 	.word	0x00010f98
    ab78:	0000811d 	.word	0x0000811d
    ab7c:	00010fb8 	.word	0x00010fb8
    ab80:	000081e1 	.word	0x000081e1
    ab84:	00010fd8 	.word	0x00010fd8
    ab88:	0000bc41 	.word	0x0000bc41
    ab8c:	00010ff8 	.word	0x00010ff8
    ab90:	00008afd 	.word	0x00008afd
    ab94:	20007f2c 	.word	0x20007f2c
    ab98:	20007fac 	.word	0x20007fac
    ab9c:	0000b6e9 	.word	0x0000b6e9
    aba0:	00008ff1 	.word	0x00008ff1
    aba4:	000018dd 	.word	0x000018dd
    aba8:	0000ee70 	.word	0x0000ee70
    abac:	00011018 	.word	0x00011018
    abb0:	00011078 	.word	0x00011078
    abb4:	000110d8 	.word	0x000110d8
    abb8:	00011138 	.word	0x00011138
    abbc:	00011198 	.word	0x00011198
    abc0:	000111f8 	.word	0x000111f8
    abc4:	0001125c 	.word	0x0001125c
    abc8:	00011284 	.word	0x00011284
    abcc:	00009a25 	.word	0x00009a25
    abd0:	0000272d 	.word	0x0000272d
    abd4:	000054dd 	.word	0x000054dd
    abd8:	00011314 	.word	0x00011314
    abdc:	00011328 	.word	0x00011328
    abe0:	00011344 	.word	0x00011344
    abe4:	0000dcf9 	.word	0x0000dcf9
    abe8:	0000dafd 	.word	0x0000dafd
    abec:	00010270 	.word	0x00010270
    abf0:	20007474 	.word	0x20007474
    abf4:	000092a1 	.word	0x000092a1
    abf8:	000092d1 	.word	0x000092d1
    abfc:	00009309 	.word	0x00009309
    ac00:	00010890 	.word	0x00010890
    ac04:	0001029c 	.word	0x0001029c
    ac08:	000112fc 	.word	0x000112fc

0000ac0c <nv_init>:

/**
 * \brief Initialize non-volatile storage
 */
void nv_init(void *descr)
{
    ac0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	flash = (struct flash_descriptor *)descr;
    ac0e:	4f13      	ldr	r7, [pc, #76]	; (ac5c <nv_init+0x50>)
    ac10:	6038      	str	r0, [r7, #0]

	/* Storage must start at row start */
	ASSERT((CONF_STORAGE_MEMORY_START % (flash_get_page_size(flash) * 4)) == 0);
    ac12:	4e13      	ldr	r6, [pc, #76]	; (ac60 <nv_init+0x54>)
    ac14:	47b0      	blx	r6
    ac16:	4c13      	ldr	r4, [pc, #76]	; (ac64 <nv_init+0x58>)
    ac18:	0080      	lsls	r0, r0, #2
    ac1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    ac1e:	fbb3 f3f0 	udiv	r3, r3, r0
    ac22:	fb00 f003 	mul.w	r0, r0, r3
    ac26:	2235      	movs	r2, #53	; 0x35
    ac28:	4621      	mov	r1, r4
    ac2a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    ac2e:	bf14      	ite	ne
    ac30:	2000      	movne	r0, #0
    ac32:	2001      	moveq	r0, #1
    ac34:	4d0c      	ldr	r5, [pc, #48]	; (ac68 <nv_init+0x5c>)
    ac36:	47a8      	blx	r5
	/* Sector must be of integer number of rows */
	ASSERT((CONF_SECTOR_SIZE % ((flash_get_page_size(flash) * 4)) == 0));
    ac38:	6838      	ldr	r0, [r7, #0]
    ac3a:	47b0      	blx	r6
    ac3c:	0080      	lsls	r0, r0, #2
    ac3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    ac42:	fbb3 f3f0 	udiv	r3, r3, r0
    ac46:	fb00 f003 	mul.w	r0, r0, r3
    ac4a:	2237      	movs	r2, #55	; 0x37
    ac4c:	4621      	mov	r1, r4
    ac4e:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    ac52:	bf14      	ite	ne
    ac54:	2000      	movne	r0, #0
    ac56:	2001      	moveq	r0, #1
    ac58:	47a8      	blx	r5
    ac5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ac5c:	2000723c 	.word	0x2000723c
    ac60:	00001885 	.word	0x00001885
    ac64:	00011348 	.word	0x00011348
    ac68:	0000272d 	.word	0x0000272d

0000ac6c <nv_write>:

/**
 * \brief Write data to non-volatile storage
 */
void nv_write(const uint8_t sector, const uint16_t offset, const uint8_t *const data, const uint16_t size)
{
    ac6c:	b570      	push	{r4, r5, r6, lr}
    ac6e:	4616      	mov	r6, r2
    ac70:	461d      	mov	r5, r3
	uint32_t address = CONF_STORAGE_MEMORY_START + sector * CONF_SECTOR_SIZE + offset;
    ac72:	3010      	adds	r0, #16
    ac74:	eb01 3400 	add.w	r4, r1, r0, lsl #12

	/* Write access must start and end within the storage and must not write
	   more than a sector. */
	ASSERT((address <= NV_MEMORY_END) && ((address + size) <= (NV_MEMORY_END + 1))
    ac78:	f5b4 3f90 	cmp.w	r4, #73728	; 0x12000
    ac7c:	d20a      	bcs.n	ac94 <nv_write+0x28>
    ac7e:	4423      	add	r3, r4
    ac80:	f5b3 3f90 	cmp.w	r3, #73728	; 0x12000
    ac84:	d813      	bhi.n	acae <nv_write+0x42>
    ac86:	4429      	add	r1, r5
    ac88:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    ac8c:	bfcc      	ite	gt
    ac8e:	2000      	movgt	r0, #0
    ac90:	2001      	movle	r0, #1
    ac92:	e000      	b.n	ac96 <nv_write+0x2a>
    ac94:	2000      	movs	r0, #0
    ac96:	2244      	movs	r2, #68	; 0x44
    ac98:	4906      	ldr	r1, [pc, #24]	; (acb4 <nv_write+0x48>)
    ac9a:	4b07      	ldr	r3, [pc, #28]	; (acb8 <nv_write+0x4c>)
    ac9c:	4798      	blx	r3
	       && ((offset + size) <= CONF_SECTOR_SIZE));

	flash_append(flash, address, (uint8_t *)data, size);
    ac9e:	462b      	mov	r3, r5
    aca0:	4632      	mov	r2, r6
    aca2:	4621      	mov	r1, r4
    aca4:	4805      	ldr	r0, [pc, #20]	; (acbc <nv_write+0x50>)
    aca6:	6800      	ldr	r0, [r0, #0]
    aca8:	4c05      	ldr	r4, [pc, #20]	; (acc0 <nv_write+0x54>)
    acaa:	47a0      	blx	r4
    acac:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT((address <= NV_MEMORY_END) && ((address + size) <= (NV_MEMORY_END + 1))
    acae:	2000      	movs	r0, #0
    acb0:	e7f1      	b.n	ac96 <nv_write+0x2a>
    acb2:	bf00      	nop
    acb4:	00011348 	.word	0x00011348
    acb8:	0000272d 	.word	0x0000272d
    acbc:	2000723c 	.word	0x2000723c
    acc0:	00001721 	.word	0x00001721

0000acc4 <nv_read>:

/**
 * \brief Read data from non-volatile storage
 */
void nv_read(const uint8_t sector, const uint16_t offset, uint8_t *const data, const uint16_t size)
{
    acc4:	b570      	push	{r4, r5, r6, lr}
    acc6:	4616      	mov	r6, r2
    acc8:	461d      	mov	r5, r3
	uint32_t address = CONF_STORAGE_MEMORY_START + sector * CONF_SECTOR_SIZE + offset;
    acca:	3010      	adds	r0, #16
    accc:	eb01 3400 	add.w	r4, r1, r0, lsl #12

	/* Read access must start and end within the storage and must not read more
	   than a sector. */
	ASSERT((address <= NV_MEMORY_END) && ((address + size) <= (NV_MEMORY_END + 1))
    acd0:	f5b4 3f90 	cmp.w	r4, #73728	; 0x12000
    acd4:	d20a      	bcs.n	acec <nv_read+0x28>
    acd6:	4423      	add	r3, r4
    acd8:	f5b3 3f90 	cmp.w	r3, #73728	; 0x12000
    acdc:	d813      	bhi.n	ad06 <nv_read+0x42>
    acde:	4429      	add	r1, r5
    ace0:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    ace4:	bfcc      	ite	gt
    ace6:	2000      	movgt	r0, #0
    ace8:	2001      	movle	r0, #1
    acea:	e000      	b.n	acee <nv_read+0x2a>
    acec:	2000      	movs	r0, #0
    acee:	2253      	movs	r2, #83	; 0x53
    acf0:	4906      	ldr	r1, [pc, #24]	; (ad0c <nv_read+0x48>)
    acf2:	4b07      	ldr	r3, [pc, #28]	; (ad10 <nv_read+0x4c>)
    acf4:	4798      	blx	r3
	       && ((offset + size) <= CONF_SECTOR_SIZE));

	flash_read(flash, address, data, size);
    acf6:	462b      	mov	r3, r5
    acf8:	4632      	mov	r2, r6
    acfa:	4621      	mov	r1, r4
    acfc:	4805      	ldr	r0, [pc, #20]	; (ad14 <nv_read+0x50>)
    acfe:	6800      	ldr	r0, [r0, #0]
    ad00:	4c05      	ldr	r4, [pc, #20]	; (ad18 <nv_read+0x54>)
    ad02:	47a0      	blx	r4
    ad04:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT((address <= NV_MEMORY_END) && ((address + size) <= (NV_MEMORY_END + 1))
    ad06:	2000      	movs	r0, #0
    ad08:	e7f1      	b.n	acee <nv_read+0x2a>
    ad0a:	bf00      	nop
    ad0c:	00011348 	.word	0x00011348
    ad10:	0000272d 	.word	0x0000272d
    ad14:	2000723c 	.word	0x2000723c
    ad18:	0000167d 	.word	0x0000167d

0000ad1c <nv_erase_sector>:

/**
 * \brief Erase a sector
 */
void nv_erase_sector(uint8_t sector)
{
    ad1c:	b538      	push	{r3, r4, r5, lr}
	uint32_t address = CONF_STORAGE_MEMORY_START + sector * CONF_SECTOR_SIZE;
    ad1e:	3010      	adds	r0, #16
    ad20:	0304      	lsls	r4, r0, #12

	ASSERT(address <= NV_MEMORY_END);
    ad22:	225f      	movs	r2, #95	; 0x5f
    ad24:	490a      	ldr	r1, [pc, #40]	; (ad50 <nv_erase_sector+0x34>)
    ad26:	f5b4 3f90 	cmp.w	r4, #73728	; 0x12000
    ad2a:	bf2c      	ite	cs
    ad2c:	2000      	movcs	r0, #0
    ad2e:	2001      	movcc	r0, #1
    ad30:	4b08      	ldr	r3, [pc, #32]	; (ad54 <nv_erase_sector+0x38>)
    ad32:	4798      	blx	r3

	flash_erase(flash, address, CONF_SECTOR_SIZE / flash_get_page_size(flash));
    ad34:	4b08      	ldr	r3, [pc, #32]	; (ad58 <nv_erase_sector+0x3c>)
    ad36:	681d      	ldr	r5, [r3, #0]
    ad38:	4628      	mov	r0, r5
    ad3a:	4b08      	ldr	r3, [pc, #32]	; (ad5c <nv_erase_sector+0x40>)
    ad3c:	4798      	blx	r3
    ad3e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    ad42:	fbb2 f2f0 	udiv	r2, r2, r0
    ad46:	4621      	mov	r1, r4
    ad48:	4628      	mov	r0, r5
    ad4a:	4b05      	ldr	r3, [pc, #20]	; (ad60 <nv_erase_sector+0x44>)
    ad4c:	4798      	blx	r3
    ad4e:	bd38      	pop	{r3, r4, r5, pc}
    ad50:	00011348 	.word	0x00011348
    ad54:	0000272d 	.word	0x0000272d
    ad58:	2000723c 	.word	0x2000723c
    ad5c:	00001885 	.word	0x00001885
    ad60:	000017d9 	.word	0x000017d9

0000ad64 <nv_is_equal>:

/**
 * \brief Compare given data and data stored in non-volatile storage
 */
bool nv_is_equal(const uint8_t sector, const uint16_t offset, const uint8_t *const data, const uint16_t size)
{
    ad64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ad68:	b091      	sub	sp, #68	; 0x44
    ad6a:	4617      	mov	r7, r2
    ad6c:	461d      	mov	r5, r3
	uint8_t  tmp[64];
	uint16_t pos     = 0;
	uint32_t address = CONF_STORAGE_MEMORY_START + sector * CONF_SECTOR_SIZE + offset;
    ad6e:	3010      	adds	r0, #16
    ad70:	eb01 3600 	add.w	r6, r1, r0, lsl #12

	/* Read access must start and end within the storage and must not read more
	   than a sector. There must be at least one byte to compare to. */
	ASSERT((address <= NV_MEMORY_END) && ((address + size) <= (NV_MEMORY_END + 1))
    ad74:	f5b6 3f90 	cmp.w	r6, #73728	; 0x12000
    ad78:	d20f      	bcs.n	ad9a <nv_is_equal+0x36>
    ad7a:	4433      	add	r3, r6
    ad7c:	f5b3 3f90 	cmp.w	r3, #73728	; 0x12000
    ad80:	d80b      	bhi.n	ad9a <nv_is_equal+0x36>
    ad82:	4429      	add	r1, r5
    ad84:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    ad88:	dc07      	bgt.n	ad9a <nv_is_equal+0x36>
    ad8a:	bb85      	cbnz	r5, adee <nv_is_equal+0x8a>
    ad8c:	2270      	movs	r2, #112	; 0x70
    ad8e:	491b      	ldr	r1, [pc, #108]	; (adfc <nv_is_equal+0x98>)
    ad90:	2000      	movs	r0, #0
    ad92:	4b1b      	ldr	r3, [pc, #108]	; (ae00 <nv_is_equal+0x9c>)
    ad94:	4798      	blx	r3
		}

		pos += cur_size;
	}

	return true;
    ad96:	2001      	movs	r0, #1
    ad98:	e026      	b.n	ade8 <nv_is_equal+0x84>
	ASSERT((address <= NV_MEMORY_END) && ((address + size) <= (NV_MEMORY_END + 1))
    ad9a:	2270      	movs	r2, #112	; 0x70
    ad9c:	4917      	ldr	r1, [pc, #92]	; (adfc <nv_is_equal+0x98>)
    ad9e:	2000      	movs	r0, #0
    ada0:	4b17      	ldr	r3, [pc, #92]	; (ae00 <nv_is_equal+0x9c>)
    ada2:	4798      	blx	r3
	while (pos != size) {
    ada4:	b1ed      	cbz	r5, ade2 <nv_is_equal+0x7e>
{
    ada6:	2400      	movs	r4, #0
		flash_read(flash, address + pos, tmp, cur_size);
    ada8:	f8df a058 	ldr.w	sl, [pc, #88]	; ae04 <nv_is_equal+0xa0>
    adac:	f8df 9058 	ldr.w	r9, [pc, #88]	; ae08 <nv_is_equal+0xa4>
		if (memcmp(data + pos, tmp, cur_size)) {
    adb0:	f8df 8058 	ldr.w	r8, [pc, #88]	; ae0c <nv_is_equal+0xa8>
		uint8_t cur_size = min(64, size - pos);
    adb4:	1b2b      	subs	r3, r5, r4
    adb6:	2b40      	cmp	r3, #64	; 0x40
    adb8:	bfa8      	it	ge
    adba:	2340      	movge	r3, #64	; 0x40
    adbc:	fa5f fb83 	uxtb.w	fp, r3
		flash_read(flash, address + pos, tmp, cur_size);
    adc0:	465b      	mov	r3, fp
    adc2:	466a      	mov	r2, sp
    adc4:	1931      	adds	r1, r6, r4
    adc6:	f8da 0000 	ldr.w	r0, [sl]
    adca:	47c8      	blx	r9
		if (memcmp(data + pos, tmp, cur_size)) {
    adcc:	465a      	mov	r2, fp
    adce:	4669      	mov	r1, sp
    add0:	1938      	adds	r0, r7, r4
    add2:	47c0      	blx	r8
    add4:	b938      	cbnz	r0, ade6 <nv_is_equal+0x82>
		pos += cur_size;
    add6:	445c      	add	r4, fp
    add8:	b2a4      	uxth	r4, r4
	while (pos != size) {
    adda:	42a5      	cmp	r5, r4
    addc:	d1ea      	bne.n	adb4 <nv_is_equal+0x50>
	return true;
    adde:	2001      	movs	r0, #1
    ade0:	e002      	b.n	ade8 <nv_is_equal+0x84>
    ade2:	2001      	movs	r0, #1
    ade4:	e000      	b.n	ade8 <nv_is_equal+0x84>
			return false;
    ade6:	2000      	movs	r0, #0
}
    ade8:	b011      	add	sp, #68	; 0x44
    adea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ASSERT((address <= NV_MEMORY_END) && ((address + size) <= (NV_MEMORY_END + 1))
    adee:	2270      	movs	r2, #112	; 0x70
    adf0:	4902      	ldr	r1, [pc, #8]	; (adfc <nv_is_equal+0x98>)
    adf2:	2001      	movs	r0, #1
    adf4:	4b02      	ldr	r3, [pc, #8]	; (ae00 <nv_is_equal+0x9c>)
    adf6:	4798      	blx	r3
    adf8:	e7d5      	b.n	ada6 <nv_is_equal+0x42>
    adfa:	bf00      	nop
    adfc:	00011348 	.word	0x00011348
    ae00:	0000272d 	.word	0x0000272d
    ae04:	2000723c 	.word	0x2000723c
    ae08:	0000167d 	.word	0x0000167d
    ae0c:	0000dc81 	.word	0x0000dc81

0000ae10 <nv_is_empty>:

/**
 * \brief Check if given area is empty
 */
bool nv_is_empty(const uint8_t sector, const uint16_t offset, const uint16_t size)
{
    ae10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ae14:	b091      	sub	sp, #68	; 0x44
    ae16:	4617      	mov	r7, r2
	uint8_t  tmp[64];
	uint16_t pos     = 0;
	uint32_t address = CONF_STORAGE_MEMORY_START + sector * CONF_SECTOR_SIZE + offset;
    ae18:	3010      	adds	r0, #16
    ae1a:	eb01 3500 	add.w	r5, r1, r0, lsl #12

	/* Read access must start and end within the storage and must not read more
	   than a sector. There must be at least one byte to compare to. */
	ASSERT((address <= NV_MEMORY_END) && ((address + size) <= (NV_MEMORY_END + 1))
    ae1e:	f5b5 3f90 	cmp.w	r5, #73728	; 0x12000
    ae22:	d210      	bcs.n	ae46 <nv_is_empty+0x36>
    ae24:	1953      	adds	r3, r2, r5
    ae26:	f5b3 3f90 	cmp.w	r3, #73728	; 0x12000
    ae2a:	d80c      	bhi.n	ae46 <nv_is_empty+0x36>
    ae2c:	4411      	add	r1, r2
    ae2e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    ae32:	dc08      	bgt.n	ae46 <nv_is_empty+0x36>
    ae34:	2a00      	cmp	r2, #0
    ae36:	d13c      	bne.n	aeb2 <nv_is_empty+0xa2>
    ae38:	228c      	movs	r2, #140	; 0x8c
    ae3a:	4923      	ldr	r1, [pc, #140]	; (aec8 <nv_is_empty+0xb8>)
    ae3c:	2000      	movs	r0, #0
    ae3e:	4b23      	ldr	r3, [pc, #140]	; (aecc <nv_is_empty+0xbc>)
    ae40:	4798      	blx	r3
		}

		pos += cur_size;
	}

	return true;
    ae42:	2001      	movs	r0, #1
    ae44:	e032      	b.n	aeac <nv_is_empty+0x9c>
	ASSERT((address <= NV_MEMORY_END) && ((address + size) <= (NV_MEMORY_END + 1))
    ae46:	228c      	movs	r2, #140	; 0x8c
    ae48:	491f      	ldr	r1, [pc, #124]	; (aec8 <nv_is_empty+0xb8>)
    ae4a:	2000      	movs	r0, #0
    ae4c:	4b1f      	ldr	r3, [pc, #124]	; (aecc <nv_is_empty+0xbc>)
    ae4e:	4798      	blx	r3
	memset(tmp, 0xFF, 64);
    ae50:	2240      	movs	r2, #64	; 0x40
    ae52:	21ff      	movs	r1, #255	; 0xff
    ae54:	4668      	mov	r0, sp
    ae56:	4b1e      	ldr	r3, [pc, #120]	; (aed0 <nv_is_empty+0xc0>)
    ae58:	4798      	blx	r3
	while (pos != size) {
    ae5a:	b317      	cbz	r7, aea2 <nv_is_empty+0x92>
{
    ae5c:	2600      	movs	r6, #0
		flash_read(flash, address + pos, tmp, cur_size);
    ae5e:	f8df 9074 	ldr.w	r9, [pc, #116]	; aed4 <nv_is_empty+0xc4>
    ae62:	f8df 8074 	ldr.w	r8, [pc, #116]	; aed8 <nv_is_empty+0xc8>
		uint8_t cur_size = min(64, size - pos);
    ae66:	1bbc      	subs	r4, r7, r6
    ae68:	2c40      	cmp	r4, #64	; 0x40
    ae6a:	bfa8      	it	ge
    ae6c:	2440      	movge	r4, #64	; 0x40
		flash_read(flash, address + pos, tmp, cur_size);
    ae6e:	b2e3      	uxtb	r3, r4
    ae70:	466a      	mov	r2, sp
    ae72:	1971      	adds	r1, r6, r5
    ae74:	f8d9 0000 	ldr.w	r0, [r9]
    ae78:	47c0      	blx	r8
			if (tmp[i] != 0xFF) {
    ae7a:	f89d 3000 	ldrb.w	r3, [sp]
    ae7e:	2bff      	cmp	r3, #255	; 0xff
    ae80:	d111      	bne.n	aea6 <nv_is_empty+0x96>
    ae82:	466b      	mov	r3, sp
    ae84:	f10d 013f 	add.w	r1, sp, #63	; 0x3f
    ae88:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    ae8c:	2aff      	cmp	r2, #255	; 0xff
    ae8e:	d10c      	bne.n	aeaa <nv_is_empty+0x9a>
		for (; i < 64; i++) {
    ae90:	4299      	cmp	r1, r3
    ae92:	d1f9      	bne.n	ae88 <nv_is_empty+0x78>
		pos += cur_size;
    ae94:	fa56 f684 	uxtab	r6, r6, r4
    ae98:	b2b6      	uxth	r6, r6
	while (pos != size) {
    ae9a:	42b7      	cmp	r7, r6
    ae9c:	d1e3      	bne.n	ae66 <nv_is_empty+0x56>
	return true;
    ae9e:	2001      	movs	r0, #1
    aea0:	e004      	b.n	aeac <nv_is_empty+0x9c>
    aea2:	2001      	movs	r0, #1
    aea4:	e002      	b.n	aeac <nv_is_empty+0x9c>
				return false;
    aea6:	2000      	movs	r0, #0
    aea8:	e000      	b.n	aeac <nv_is_empty+0x9c>
    aeaa:	2000      	movs	r0, #0
}
    aeac:	b011      	add	sp, #68	; 0x44
    aeae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ASSERT((address <= NV_MEMORY_END) && ((address + size) <= (NV_MEMORY_END + 1))
    aeb2:	228c      	movs	r2, #140	; 0x8c
    aeb4:	4904      	ldr	r1, [pc, #16]	; (aec8 <nv_is_empty+0xb8>)
    aeb6:	2001      	movs	r0, #1
    aeb8:	4b04      	ldr	r3, [pc, #16]	; (aecc <nv_is_empty+0xbc>)
    aeba:	4798      	blx	r3
	memset(tmp, 0xFF, 64);
    aebc:	2240      	movs	r2, #64	; 0x40
    aebe:	21ff      	movs	r1, #255	; 0xff
    aec0:	4668      	mov	r0, sp
    aec2:	4b03      	ldr	r3, [pc, #12]	; (aed0 <nv_is_empty+0xc0>)
    aec4:	4798      	blx	r3
    aec6:	e7c9      	b.n	ae5c <nv_is_empty+0x4c>
    aec8:	00011348 	.word	0x00011348
    aecc:	0000272d 	.word	0x0000272d
    aed0:	0000dce9 	.word	0x0000dce9
    aed4:	2000723c 	.word	0x2000723c
    aed8:	0000167d 	.word	0x0000167d

0000aedc <nv_align_next_access_address>:
 * \brief Align current point of write to actual based on type of previous write
 *        access
 */
uint16_t nv_align_next_access_address(const uint16_t address, const enum nv_alignment_type type)
{
	switch (type) {
    aedc:	b179      	cbz	r1, aefe <nv_align_next_access_address+0x22>
    aede:	2901      	cmp	r1, #1
    aee0:	d104      	bne.n	aeec <nv_align_next_access_address+0x10>
	case SECTOR_HEADER_ALIGNMENT:
		return address;

	case BLOCK_WITH_DATA_ALIGNMENT:
		return (address + 127) & 0xFF80;
    aee2:	307f      	adds	r0, #127	; 0x7f
    aee4:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
    aee8:	b280      	uxth	r0, r0
    aeea:	4770      	bx	lr
{
    aeec:	b510      	push	{r4, lr}
    aeee:	4604      	mov	r4, r0

	default:
		ASSERT(false);
    aef0:	22af      	movs	r2, #175	; 0xaf
    aef2:	4903      	ldr	r1, [pc, #12]	; (af00 <nv_align_next_access_address+0x24>)
    aef4:	2000      	movs	r0, #0
    aef6:	4b03      	ldr	r3, [pc, #12]	; (af04 <nv_align_next_access_address+0x28>)
    aef8:	4798      	blx	r3
		return address;
    aefa:	4620      	mov	r0, r4
	}
}
    aefc:	bd10      	pop	{r4, pc}
    aefe:	4770      	bx	lr
    af00:	00011348 	.word	0x00011348
    af04:	0000272d 	.word	0x0000272d

0000af08 <find_item>:
 * \param[in] ID ID of the item it is required to fins
 *
 * \return Pointer to found item, or NULL
 */
static struct nv_item *find_item(const uint16_t id)
{
    af08:	b430      	push	{r4, r5}
	uint16_t i = 0;

	for (; i < mem.items_amount; i++) {
    af0a:	4b0e      	ldr	r3, [pc, #56]	; (af44 <find_item+0x3c>)
    af0c:	8d5c      	ldrh	r4, [r3, #42]	; 0x2a
    af0e:	b1bc      	cbz	r4, af40 <find_item+0x38>
		if (mem.items[i].id == id) {
    af10:	885b      	ldrh	r3, [r3, #2]
    af12:	4283      	cmp	r3, r0
    af14:	d010      	beq.n	af38 <find_item+0x30>
    af16:	4a0b      	ldr	r2, [pc, #44]	; (af44 <find_item+0x3c>)
    af18:	2301      	movs	r3, #1
	for (; i < mem.items_amount; i++) {
    af1a:	b299      	uxth	r1, r3
    af1c:	428c      	cmp	r4, r1
    af1e:	d90d      	bls.n	af3c <find_item+0x34>
		if (mem.items[i].id == id) {
    af20:	461d      	mov	r5, r3
    af22:	88d1      	ldrh	r1, [r2, #6]
    af24:	3301      	adds	r3, #1
    af26:	3204      	adds	r2, #4
    af28:	4281      	cmp	r1, r0
    af2a:	d1f6      	bne.n	af1a <find_item+0x12>
			return &mem.items[i];
    af2c:	4805      	ldr	r0, [pc, #20]	; (af44 <find_item+0x3c>)
    af2e:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    af32:	3002      	adds	r0, #2
		}
	}
	return NULL;
}
    af34:	bc30      	pop	{r4, r5}
    af36:	4770      	bx	lr
		if (mem.items[i].id == id) {
    af38:	2500      	movs	r5, #0
    af3a:	e7f7      	b.n	af2c <find_item+0x24>
	return NULL;
    af3c:	2000      	movs	r0, #0
    af3e:	e7f9      	b.n	af34 <find_item+0x2c>
    af40:	2000      	movs	r0, #0
    af42:	e7f7      	b.n	af34 <find_item+0x2c>
    af44:	20007240 	.word	0x20007240

0000af48 <calculate_block_header_checksum>:
 * \param[in] header The pointer to block header to calculate checksum of
 *
 * \return Checksum of a block header
 */
static uint16_t calculate_block_header_checksum(struct block_header *header)
{
    af48:	1c42      	adds	r2, r0, #1
    af4a:	f100 010b 	add.w	r1, r0, #11
	uint8_t *tmp = (uint8_t *)header + sizeof(header->active);
	uint16_t crc = 0xFFFF;
    af4e:	f64f 70ff 	movw	r0, #65535	; 0xffff
	uint8_t  i   = 0;

	for (; i < sizeof(struct block_header) - sizeof(header->active) - sizeof(header->checksum); i++) {
		uint8_t value;

		value = (uint8_t)((crc >> 8) ^ tmp[i]);
    af52:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    af56:	ea83 2310 	eor.w	r3, r3, r0, lsr #8
		value = value ^ (value >> 4);
    af5a:	ea83 1313 	eor.w	r3, r3, r3, lsr #4
		crc   = (crc << 8) ^ ((uint16_t)value << 12) ^ ((uint16_t)value << 5) ^ (uint16_t)value;
    af5e:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    af62:	ea80 3003 	eor.w	r0, r0, r3, lsl #12
    af66:	ea80 1043 	eor.w	r0, r0, r3, lsl #5
    af6a:	b280      	uxth	r0, r0
	for (; i < sizeof(struct block_header) - sizeof(header->active) - sizeof(header->checksum); i++) {
    af6c:	428a      	cmp	r2, r1
    af6e:	d1f0      	bne.n	af52 <calculate_block_header_checksum+0xa>
	}
	return crc;
}
    af70:	4770      	bx	lr
	...

0000af74 <collect_item_data>:
 *
 * \return True if copying succeeds, otherwise false
 */
static bool collect_item_data(const struct nv_item *const item, uint8_t *const data, const uint16_t offset,
                              const uint16_t size)
{
    af74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    af78:	b087      	sub	sp, #28
	uint16_t            start = offset, end = offset + size;
    af7a:	4413      	add	r3, r2
    af7c:	fa1f fb83 	uxth.w	fp, r3
	uint16_t            current_block      = item->last_block;
    af80:	8846      	ldrh	r6, [r0, #2]
	struct block_header header;

	/* Need to gather item data between offset and offset + size.
	   Start with the latest written block and check if it contains required
	   data. Keep going to previous blocks until all the data is collected. */
	while (start != end) {
    af82:	455a      	cmp	r2, fp
		   start looking for "first bytes" again */
		start += bytes_to_read;
		destination_offset += bytes_to_read;
	}

	return true;
    af84:	bf08      	it	eq
    af86:	2001      	moveq	r0, #1
	while (start != end) {
    af88:	d041      	beq.n	b00e <collect_item_data+0x9a>
    af8a:	9100      	str	r1, [sp, #0]
    af8c:	9001      	str	r0, [sp, #4]
    af8e:	4617      	mov	r7, r2
    af90:	46da      	mov	sl, fp
    af92:	2400      	movs	r4, #0
			nv_read(mem.active_sector, current_block, (uint8_t *)&header, sizeof(struct block_header));
    af94:	f8df 907c 	ldr.w	r9, [pc, #124]	; b014 <collect_item_data+0xa0>
    af98:	f8df 807c 	ldr.w	r8, [pc, #124]	; b018 <collect_item_data+0xa4>
    af9c:	e001      	b.n	afa2 <collect_item_data+0x2e>
			current_block = header.prev_block;
    af9e:	f8bd 6012 	ldrh.w	r6, [sp, #18]
			nv_read(mem.active_sector, current_block, (uint8_t *)&header, sizeof(struct block_header));
    afa2:	230e      	movs	r3, #14
    afa4:	aa02      	add	r2, sp, #8
    afa6:	4631      	mov	r1, r6
    afa8:	f899 002c 	ldrb.w	r0, [r9, #44]	; 0x2c
    afac:	47c0      	blx	r8
			block_end = header.offset + header.block_size;
    afae:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    afb2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    afb6:	4413      	add	r3, r2
    afb8:	b29b      	uxth	r3, r3
			if (current_block == 0) {
    afba:	b33e      	cbz	r6, b00c <collect_item_data+0x98>
			if ((start >= block_end) || (end <= header.offset)) {
    afbc:	42bb      	cmp	r3, r7
    afbe:	d9ee      	bls.n	af9e <collect_item_data+0x2a>
    afc0:	4592      	cmp	sl, r2
    afc2:	d9ec      	bls.n	af9e <collect_item_data+0x2a>
			} else if (start < header.offset) {
    afc4:	42ba      	cmp	r2, r7
    afc6:	d901      	bls.n	afcc <collect_item_data+0x58>
			block_end = header.offset + header.block_size;
    afc8:	4692      	mov	sl, r2
    afca:	e7e8      	b.n	af9e <collect_item_data+0x2a>
		por = current_block + sizeof(struct block_header) + start - header.offset;
    afcc:	f107 010e 	add.w	r1, r7, #14
    afd0:	4431      	add	r1, r6
    afd2:	1a8a      	subs	r2, r1, r2
    afd4:	b291      	uxth	r1, r2
		if (block_end < end) {
    afd6:	459a      	cmp	sl, r3
    afd8:	d911      	bls.n	affe <collect_item_data+0x8a>
			bytes_to_read = block_end - start;
    afda:	1bdb      	subs	r3, r3, r7
    afdc:	b29d      	uxth	r5, r3
			current_block = header.prev_block;
    afde:	f8bd 6012 	ldrh.w	r6, [sp, #18]
		nv_read(mem.active_sector, por, data + destination_offset, bytes_to_read);
    afe2:	462b      	mov	r3, r5
    afe4:	9a00      	ldr	r2, [sp, #0]
    afe6:	4422      	add	r2, r4
    afe8:	f899 002c 	ldrb.w	r0, [r9, #44]	; 0x2c
    afec:	47c0      	blx	r8
		start += bytes_to_read;
    afee:	442f      	add	r7, r5
    aff0:	b2bf      	uxth	r7, r7
		destination_offset += bytes_to_read;
    aff2:	442c      	add	r4, r5
    aff4:	b2a4      	uxth	r4, r4
	while (start != end) {
    aff6:	45ba      	cmp	sl, r7
    aff8:	d1d3      	bne.n	afa2 <collect_item_data+0x2e>
	return true;
    affa:	2001      	movs	r0, #1
    affc:	e007      	b.n	b00e <collect_item_data+0x9a>
			bytes_to_read = end - start;
    affe:	ebaa 0507 	sub.w	r5, sl, r7
    b002:	b2ad      	uxth	r5, r5
			current_block = item->last_block;
    b004:	9b01      	ldr	r3, [sp, #4]
    b006:	885e      	ldrh	r6, [r3, #2]
			end           = offset + size;
    b008:	46da      	mov	sl, fp
    b00a:	e7ea      	b.n	afe2 <collect_item_data+0x6e>
				return false;
    b00c:	2000      	movs	r0, #0
}
    b00e:	b007      	add	sp, #28
    b010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b014:	20007240 	.word	0x20007240
    b018:	0000acc5 	.word	0x0000acc5

0000b01c <write_and_verify>:
{
    b01c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b020:	4604      	mov	r4, r0
    b022:	460d      	mov	r5, r1
    b024:	4616      	mov	r6, r2
    b026:	461f      	mov	r7, r3
	nv_write(sector, offset, data, size);
    b028:	f8df 8018 	ldr.w	r8, [pc, #24]	; b044 <write_and_verify+0x28>
    b02c:	47c0      	blx	r8
	if (!nv_is_equal(sector, offset, data, size)) {
    b02e:	463b      	mov	r3, r7
    b030:	4632      	mov	r2, r6
    b032:	4629      	mov	r1, r5
    b034:	4620      	mov	r0, r4
    b036:	4c02      	ldr	r4, [pc, #8]	; (b040 <write_and_verify+0x24>)
    b038:	47a0      	blx	r4
}
    b03a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b03e:	bf00      	nop
    b040:	0000ad65 	.word	0x0000ad65
    b044:	0000ac6d 	.word	0x0000ac6d

0000b048 <create_sector>:
{
    b048:	b5f0      	push	{r4, r5, r6, r7, lr}
    b04a:	b085      	sub	sp, #20
    b04c:	4604      	mov	r4, r0
    b04e:	460e      	mov	r6, r1
    b050:	4617      	mov	r7, r2
	uint8_t              active = 0;
    b052:	2100      	movs	r1, #0
    b054:	f88d 1003 	strb.w	r1, [sp, #3]
	if (!nv_is_empty(sector, 0, CONF_SECTOR_SIZE)) {
    b058:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    b05c:	4b1e      	ldr	r3, [pc, #120]	; (b0d8 <create_sector+0x90>)
    b05e:	4798      	blx	r3
    b060:	b950      	cbnz	r0, b078 <create_sector+0x30>
		nv_erase_sector(sector);
    b062:	4620      	mov	r0, r4
    b064:	4b1d      	ldr	r3, [pc, #116]	; (b0dc <create_sector+0x94>)
    b066:	4798      	blx	r3
		if (!nv_is_empty(sector, 0, CONF_SECTOR_SIZE)) {
    b068:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    b06c:	2100      	movs	r1, #0
    b06e:	4620      	mov	r0, r4
    b070:	4b19      	ldr	r3, [pc, #100]	; (b0d8 <create_sector+0x90>)
    b072:	4798      	blx	r3
    b074:	4605      	mov	r5, r0
    b076:	b1b8      	cbz	r0, b0a8 <create_sector+0x60>
	memcpy(header.signature, SECTOR_SIGNATURE, 7);
    b078:	4b19      	ldr	r3, [pc, #100]	; (b0e0 <create_sector+0x98>)
    b07a:	6818      	ldr	r0, [r3, #0]
    b07c:	f8cd 0009 	str.w	r0, [sp, #9]
    b080:	889a      	ldrh	r2, [r3, #4]
    b082:	799b      	ldrb	r3, [r3, #6]
    b084:	f8ad 200d 	strh.w	r2, [sp, #13]
    b088:	f88d 300f 	strb.w	r3, [sp, #15]
	header.active = 0xFF;
    b08c:	23ff      	movs	r3, #255	; 0xff
    b08e:	f88d 3004 	strb.w	r3, [sp, #4]
	header.number = number;
    b092:	f8cd 6005 	str.w	r6, [sp, #5]
	if (!write_and_verify(sector, 0, (uint8_t *)&header, sizeof(struct sector_header))) {
    b096:	230c      	movs	r3, #12
    b098:	aa01      	add	r2, sp, #4
    b09a:	2100      	movs	r1, #0
    b09c:	4620      	mov	r0, r4
    b09e:	4d11      	ldr	r5, [pc, #68]	; (b0e4 <create_sector+0x9c>)
    b0a0:	47a8      	blx	r5
    b0a2:	4605      	mov	r5, r0
    b0a4:	b100      	cbz	r0, b0a8 <create_sector+0x60>
	if (activate) {
    b0a6:	b917      	cbnz	r7, b0ae <create_sector+0x66>
}
    b0a8:	4628      	mov	r0, r5
    b0aa:	b005      	add	sp, #20
    b0ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!write_and_verify(sector, 0, &active, sizeof(active))) {
    b0ae:	2301      	movs	r3, #1
    b0b0:	f10d 0203 	add.w	r2, sp, #3
    b0b4:	2100      	movs	r1, #0
    b0b6:	4620      	mov	r0, r4
    b0b8:	4d0a      	ldr	r5, [pc, #40]	; (b0e4 <create_sector+0x9c>)
    b0ba:	47a8      	blx	r5
    b0bc:	4605      	mov	r5, r0
    b0be:	2800      	cmp	r0, #0
    b0c0:	d0f2      	beq.n	b0a8 <create_sector+0x60>
		mem.pow           = sizeof(struct sector_header);
    b0c2:	4e09      	ldr	r6, [pc, #36]	; (b0e8 <create_sector+0xa0>)
    b0c4:	200c      	movs	r0, #12
    b0c6:	8030      	strh	r0, [r6, #0]
		mem.pow           = nv_align_next_access_address(mem.pow, SECTOR_HEADER_ALIGNMENT);
    b0c8:	2100      	movs	r1, #0
    b0ca:	4b08      	ldr	r3, [pc, #32]	; (b0ec <create_sector+0xa4>)
    b0cc:	4798      	blx	r3
    b0ce:	8030      	strh	r0, [r6, #0]
		mem.active_sector = sector;
    b0d0:	f886 402c 	strb.w	r4, [r6, #44]	; 0x2c
    b0d4:	e7e8      	b.n	b0a8 <create_sector+0x60>
    b0d6:	bf00      	nop
    b0d8:	0000ae11 	.word	0x0000ae11
    b0dc:	0000ad1d 	.word	0x0000ad1d
    b0e0:	00011378 	.word	0x00011378
    b0e4:	0000b01d 	.word	0x0000b01d
    b0e8:	20007240 	.word	0x20007240
    b0ec:	0000aedd 	.word	0x0000aedd

0000b0f0 <copy_data_to_new_sector>:
{
    b0f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b0f4:	b09d      	sub	sp, #116	; 0x74
	uint8_t              sector = mem.active_sector;
    b0f6:	4c5b      	ldr	r4, [pc, #364]	; (b264 <copy_data_to_new_sector+0x174>)
    b0f8:	f894 702c 	ldrb.w	r7, [r4, #44]	; 0x2c
	uint16_t             new_pow = nv_align_next_access_address(sizeof(struct sector_header), SECTOR_HEADER_ALIGNMENT);
    b0fc:	2100      	movs	r1, #0
    b0fe:	200c      	movs	r0, #12
    b100:	4b59      	ldr	r3, [pc, #356]	; (b268 <copy_data_to_new_sector+0x178>)
    b102:	4798      	blx	r3
    b104:	4680      	mov	r8, r0
	const uint8_t        active  = 0;
    b106:	2100      	movs	r1, #0
    b108:	f88d 1063 	strb.w	r1, [sp, #99]	; 0x63
	nv_read(mem.active_sector, 0, (uint8_t *)&sector_header, sizeof(struct sector_header));
    b10c:	230c      	movs	r3, #12
    b10e:	aa19      	add	r2, sp, #100	; 0x64
    b110:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    b114:	4c55      	ldr	r4, [pc, #340]	; (b26c <copy_data_to_new_sector+0x17c>)
    b116:	47a0      	blx	r4
	number = sector_header.number + 1;
    b118:	f8dd 4065 	ldr.w	r4, [sp, #101]	; 0x65
    b11c:	3401      	adds	r4, #1
		if (sector == mem.active_sector) {
    b11e:	4d51      	ldr	r5, [pc, #324]	; (b264 <copy_data_to_new_sector+0x174>)
	} while (!create_sector(sector, number, false));
    b120:	f04f 0900 	mov.w	r9, #0
    b124:	4e52      	ldr	r6, [pc, #328]	; (b270 <copy_data_to_new_sector+0x180>)
		if (++sector >= SECTOR_AMOUNT) {
    b126:	3701      	adds	r7, #1
    b128:	b2ff      	uxtb	r7, r7
			sector = 0;
    b12a:	2f02      	cmp	r7, #2
    b12c:	bf28      	it	cs
    b12e:	2700      	movcs	r7, #0
		if (sector == mem.active_sector) {
    b130:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
    b134:	42bb      	cmp	r3, r7
    b136:	f000 808e 	beq.w	b256 <copy_data_to_new_sector+0x166>
	} while (!create_sector(sector, number, false));
    b13a:	464a      	mov	r2, r9
    b13c:	4621      	mov	r1, r4
    b13e:	4638      	mov	r0, r7
    b140:	47b0      	blx	r6
    b142:	2800      	cmp	r0, #0
    b144:	d0ef      	beq.n	b126 <copy_data_to_new_sector+0x36>
	for (; i < mem.items_amount; i++) {
    b146:	4b47      	ldr	r3, [pc, #284]	; (b264 <copy_data_to_new_sector+0x174>)
    b148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    b14a:	2b00      	cmp	r3, #0
    b14c:	d070      	beq.n	b230 <copy_data_to_new_sector+0x140>
    b14e:	f04f 0900 	mov.w	r9, #0
	item_size = header.item_size;

	/* Fill new block header... */
	fill_block_header(&header, header.id, 0, header.item_size, header.item_size, 0);
	/* ...and write it to new sector */
	if (!write_and_verify(sector, pow, (uint8_t *)&header, sizeof(struct block_header))) {
    b152:	f8df a128 	ldr.w	sl, [pc, #296]	; b27c <copy_data_to_new_sector+0x18c>
    b156:	9700      	str	r7, [sp, #0]
    b158:	e01e      	b.n	b198 <copy_data_to_new_sector+0xa8>
		}
		offset += size;
		item_size -= size;
	}
	/* Activate data block */
	if (!write_and_verify(sector, pow, (uint8_t *)&active, sizeof(active))) {
    b15a:	2302      	movs	r3, #2
    b15c:	f10d 020e 	add.w	r2, sp, #14
    b160:	4641      	mov	r1, r8
    b162:	9800      	ldr	r0, [sp, #0]
    b164:	47d0      	blx	sl
    b166:	2800      	cmp	r0, #0
    b168:	d077      	beq.n	b25a <copy_data_to_new_sector+0x16a>
		return -1;
	}

	return header.item_size;
    b16a:	f8bd 0018 	ldrh.w	r0, [sp, #24]
			mem.items[i].last_block = new_pow;
    b16e:	4b3d      	ldr	r3, [pc, #244]	; (b264 <copy_data_to_new_sector+0x174>)
    b170:	9a01      	ldr	r2, [sp, #4]
    b172:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    b176:	f8a3 8004 	strh.w	r8, [r3, #4]
			new_pow += result + sizeof(struct block_header);
    b17a:	300e      	adds	r0, #14
    b17c:	4440      	add	r0, r8
			new_pow = nv_align_next_access_address(new_pow, BLOCK_WITH_DATA_ALIGNMENT);
    b17e:	2101      	movs	r1, #1
    b180:	b280      	uxth	r0, r0
    b182:	4b39      	ldr	r3, [pc, #228]	; (b268 <copy_data_to_new_sector+0x178>)
    b184:	4798      	blx	r3
    b186:	4680      	mov	r8, r0
	for (; i < mem.items_amount; i++) {
    b188:	f109 0901 	add.w	r9, r9, #1
    b18c:	fa1f f989 	uxth.w	r9, r9
    b190:	4b34      	ldr	r3, [pc, #208]	; (b264 <copy_data_to_new_sector+0x174>)
    b192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    b194:	454b      	cmp	r3, r9
    b196:	d94a      	bls.n	b22e <copy_data_to_new_sector+0x13e>
	uint16_t            active = 0;
    b198:	2400      	movs	r4, #0
    b19a:	f8ad 400e 	strh.w	r4, [sp, #14]
	nv_read(mem.active_sector, mem.items[item].last_block, (uint8_t *)&header, sizeof(struct block_header));
    b19e:	f8cd 9004 	str.w	r9, [sp, #4]
    b1a2:	4b30      	ldr	r3, [pc, #192]	; (b264 <copy_data_to_new_sector+0x174>)
    b1a4:	eb03 0189 	add.w	r1, r3, r9, lsl #2
    b1a8:	230e      	movs	r3, #14
    b1aa:	aa04      	add	r2, sp, #16
    b1ac:	8889      	ldrh	r1, [r1, #4]
    b1ae:	482d      	ldr	r0, [pc, #180]	; (b264 <copy_data_to_new_sector+0x174>)
    b1b0:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    b1b4:	4d2d      	ldr	r5, [pc, #180]	; (b26c <copy_data_to_new_sector+0x17c>)
    b1b6:	47a8      	blx	r5
	item_size = header.item_size;
    b1b8:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	header->active     = 0xFFFF;
    b1bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b1c0:	f8ad 3010 	strh.w	r3, [sp, #16]
	header->offset     = offset;
    b1c4:	f8ad 4014 	strh.w	r4, [sp, #20]
	header->block_size = block_size;
    b1c8:	f8ad 5016 	strh.w	r5, [sp, #22]
	header->prev_block = prev_block;
    b1cc:	f8ad 401a 	strh.w	r4, [sp, #26]
	header->checksum   = calculate_block_header_checksum(header);
    b1d0:	a804      	add	r0, sp, #16
    b1d2:	4b28      	ldr	r3, [pc, #160]	; (b274 <copy_data_to_new_sector+0x184>)
    b1d4:	4798      	blx	r3
    b1d6:	f8ad 001c 	strh.w	r0, [sp, #28]
	if (!write_and_verify(sector, pow, (uint8_t *)&header, sizeof(struct block_header))) {
    b1da:	230e      	movs	r3, #14
    b1dc:	aa04      	add	r2, sp, #16
    b1de:	4641      	mov	r1, r8
    b1e0:	9800      	ldr	r0, [sp, #0]
    b1e2:	47d0      	blx	sl
    b1e4:	2800      	cmp	r0, #0
    b1e6:	d038      	beq.n	b25a <copy_data_to_new_sector+0x16a>
	while (item_size) {
    b1e8:	2d00      	cmp	r5, #0
    b1ea:	d0b6      	beq.n	b15a <copy_data_to_new_sector+0x6a>
		if (!collect_item_data(&mem.items[item], data, offset, size)) {
    b1ec:	4b1d      	ldr	r3, [pc, #116]	; (b264 <copy_data_to_new_sector+0x174>)
    b1ee:	eb03 0789 	add.w	r7, r3, r9, lsl #2
    b1f2:	f107 0b02 	add.w	fp, r7, #2
    b1f6:	4626      	mov	r6, r4
    b1f8:	4f1f      	ldr	r7, [pc, #124]	; (b278 <copy_data_to_new_sector+0x188>)
		uint16_t size = min(64, item_size);
    b1fa:	462c      	mov	r4, r5
    b1fc:	2d40      	cmp	r5, #64	; 0x40
    b1fe:	bf28      	it	cs
    b200:	2440      	movcs	r4, #64	; 0x40
		if (!collect_item_data(&mem.items[item], data, offset, size)) {
    b202:	4623      	mov	r3, r4
    b204:	4632      	mov	r2, r6
    b206:	a908      	add	r1, sp, #32
    b208:	4658      	mov	r0, fp
    b20a:	47b8      	blx	r7
    b20c:	b328      	cbz	r0, b25a <copy_data_to_new_sector+0x16a>
		if (!write_and_verify(sector, pow + offset + sizeof(struct block_header), data, size)) {
    b20e:	f108 010e 	add.w	r1, r8, #14
    b212:	4431      	add	r1, r6
    b214:	4623      	mov	r3, r4
    b216:	aa08      	add	r2, sp, #32
    b218:	b289      	uxth	r1, r1
    b21a:	9800      	ldr	r0, [sp, #0]
    b21c:	47d0      	blx	sl
    b21e:	b1e0      	cbz	r0, b25a <copy_data_to_new_sector+0x16a>
		offset += size;
    b220:	4426      	add	r6, r4
    b222:	b2b6      	uxth	r6, r6
		item_size -= size;
    b224:	1b2c      	subs	r4, r5, r4
    b226:	b2a5      	uxth	r5, r4
	while (item_size) {
    b228:	2d00      	cmp	r5, #0
    b22a:	d1e6      	bne.n	b1fa <copy_data_to_new_sector+0x10a>
    b22c:	e795      	b.n	b15a <copy_data_to_new_sector+0x6a>
    b22e:	9f00      	ldr	r7, [sp, #0]
	if (!write_and_verify(sector, 0, &active, sizeof(uint8_t))) {
    b230:	2301      	movs	r3, #1
    b232:	f10d 0263 	add.w	r2, sp, #99	; 0x63
    b236:	2100      	movs	r1, #0
    b238:	4638      	mov	r0, r7
    b23a:	4c10      	ldr	r4, [pc, #64]	; (b27c <copy_data_to_new_sector+0x18c>)
    b23c:	47a0      	blx	r4
    b23e:	4604      	mov	r4, r0
    b240:	b160      	cbz	r0, b25c <copy_data_to_new_sector+0x16c>
	nv_erase_sector(mem.active_sector);
    b242:	4d08      	ldr	r5, [pc, #32]	; (b264 <copy_data_to_new_sector+0x174>)
    b244:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    b248:	4b0d      	ldr	r3, [pc, #52]	; (b280 <copy_data_to_new_sector+0x190>)
    b24a:	4798      	blx	r3
	mem.pow           = new_pow;
    b24c:	f8a5 8000 	strh.w	r8, [r5]
	mem.active_sector = sector;
    b250:	f885 702c 	strb.w	r7, [r5, #44]	; 0x2c
	return true;
    b254:	e002      	b.n	b25c <copy_data_to_new_sector+0x16c>
			return false;
    b256:	2400      	movs	r4, #0
    b258:	e000      	b.n	b25c <copy_data_to_new_sector+0x16c>
			return false;
    b25a:	2400      	movs	r4, #0
}
    b25c:	4620      	mov	r0, r4
    b25e:	b01d      	add	sp, #116	; 0x74
    b260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b264:	20007240 	.word	0x20007240
    b268:	0000aedd 	.word	0x0000aedd
    b26c:	0000acc5 	.word	0x0000acc5
    b270:	0000b049 	.word	0x0000b049
    b274:	0000af49 	.word	0x0000af49
    b278:	0000af75 	.word	0x0000af75
    b27c:	0000b01d 	.word	0x0000b01d
    b280:	0000ad1d 	.word	0x0000ad1d

0000b284 <write_block_header>:
{
    b284:	b538      	push	{r3, r4, r5, lr}
	if (!write_and_verify(mem.active_sector, mem.pow, (const uint8_t *const)header, sizeof(struct block_header))) {
    b286:	4c10      	ldr	r4, [pc, #64]	; (b2c8 <write_block_header+0x44>)
    b288:	230e      	movs	r3, #14
    b28a:	4602      	mov	r2, r0
    b28c:	8821      	ldrh	r1, [r4, #0]
    b28e:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    b292:	4c0e      	ldr	r4, [pc, #56]	; (b2cc <write_block_header+0x48>)
    b294:	47a0      	blx	r4
    b296:	4604      	mov	r4, r0
    b298:	b108      	cbz	r0, b29e <write_block_header+0x1a>
}
    b29a:	4620      	mov	r0, r4
    b29c:	bd38      	pop	{r3, r4, r5, pc}
		if (!nv_is_empty(mem.active_sector, mem.pow, sizeof(struct block_header))) {
    b29e:	4b0a      	ldr	r3, [pc, #40]	; (b2c8 <write_block_header+0x44>)
    b2a0:	220e      	movs	r2, #14
    b2a2:	8819      	ldrh	r1, [r3, #0]
    b2a4:	f893 002c 	ldrb.w	r0, [r3, #44]	; 0x2c
    b2a8:	4b09      	ldr	r3, [pc, #36]	; (b2d0 <write_block_header+0x4c>)
    b2aa:	4798      	blx	r3
    b2ac:	4605      	mov	r5, r0
    b2ae:	2800      	cmp	r0, #0
    b2b0:	d1f3      	bne.n	b29a <write_block_header+0x16>
			mem.pow = nv_align_next_access_address(mem.pow + sizeof(struct block_header), BLOCK_WITH_DATA_ALIGNMENT);
    b2b2:	4c05      	ldr	r4, [pc, #20]	; (b2c8 <write_block_header+0x44>)
    b2b4:	8820      	ldrh	r0, [r4, #0]
    b2b6:	300e      	adds	r0, #14
    b2b8:	2101      	movs	r1, #1
    b2ba:	b280      	uxth	r0, r0
    b2bc:	4b05      	ldr	r3, [pc, #20]	; (b2d4 <write_block_header+0x50>)
    b2be:	4798      	blx	r3
    b2c0:	8020      	strh	r0, [r4, #0]
		return false;
    b2c2:	462c      	mov	r4, r5
    b2c4:	e7e9      	b.n	b29a <write_block_header+0x16>
    b2c6:	bf00      	nop
    b2c8:	20007240 	.word	0x20007240
    b2cc:	0000b01d 	.word	0x0000b01d
    b2d0:	0000ae11 	.word	0x0000ae11
    b2d4:	0000aedd 	.word	0x0000aedd

0000b2d8 <activate_block_header>:
{
    b2d8:	b570      	push	{r4, r5, r6, lr}
    b2da:	b082      	sub	sp, #8
    b2dc:	4604      	mov	r4, r0
	uint16_t active = 0;
    b2de:	aa02      	add	r2, sp, #8
    b2e0:	2300      	movs	r3, #0
    b2e2:	f822 3d02 	strh.w	r3, [r2, #-2]!
	if (!write_and_verify(mem.active_sector, mem.pow, (uint8_t *)&active, sizeof(active))) {
    b2e6:	480b      	ldr	r0, [pc, #44]	; (b314 <activate_block_header+0x3c>)
    b2e8:	2302      	movs	r3, #2
    b2ea:	8801      	ldrh	r1, [r0, #0]
    b2ec:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    b2f0:	4d09      	ldr	r5, [pc, #36]	; (b318 <activate_block_header+0x40>)
    b2f2:	47a8      	blx	r5
    b2f4:	4605      	mov	r5, r0
    b2f6:	b110      	cbz	r0, b2fe <activate_block_header+0x26>
}
    b2f8:	4628      	mov	r0, r5
    b2fa:	b002      	add	sp, #8
    b2fc:	bd70      	pop	{r4, r5, r6, pc}
		mem.pow += sizeof(struct block_header) + size;
    b2fe:	4e05      	ldr	r6, [pc, #20]	; (b314 <activate_block_header+0x3c>)
    b300:	8830      	ldrh	r0, [r6, #0]
    b302:	300e      	adds	r0, #14
    b304:	4420      	add	r0, r4
    b306:	b280      	uxth	r0, r0
    b308:	8030      	strh	r0, [r6, #0]
		mem.pow = nv_align_next_access_address(mem.pow, BLOCK_WITH_DATA_ALIGNMENT);
    b30a:	2101      	movs	r1, #1
    b30c:	4b03      	ldr	r3, [pc, #12]	; (b31c <activate_block_header+0x44>)
    b30e:	4798      	blx	r3
    b310:	8030      	strh	r0, [r6, #0]
		return false;
    b312:	e7f1      	b.n	b2f8 <activate_block_header+0x20>
    b314:	20007240 	.word	0x20007240
    b318:	0000b01d 	.word	0x0000b01d
    b31c:	0000aedd 	.word	0x0000aedd

0000b320 <nv_storage_init>:
{
    b320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b324:	b088      	sub	sp, #32
    b326:	2400      	movs	r4, #0
	uint32_t             last_sector_number = 0;
    b328:	4627      	mov	r7, r4
	uint8_t              sector = 0, last_sector = 0xFF;
    b32a:	25ff      	movs	r5, #255	; 0xff
		nv_read(sector, 0, (uint8_t *)&header, sizeof(struct sector_header));
    b32c:	f8df 8164 	ldr.w	r8, [pc, #356]	; b494 <nv_storage_init+0x174>
		if ((header.active == 0) && (memcmp(header.signature, SECTOR_SIGNATURE, 7) == 0)) {
    b330:	f8df a16c 	ldr.w	sl, [pc, #364]	; b4a0 <nv_storage_init+0x180>
    b334:	f8df 916c 	ldr.w	r9, [pc, #364]	; b4a4 <nv_storage_init+0x184>
    b338:	e002      	b.n	b340 <nv_storage_init+0x20>
    b33a:	3401      	adds	r4, #1
	for (; sector < SECTOR_AMOUNT; sector++) {
    b33c:	2c02      	cmp	r4, #2
    b33e:	d017      	beq.n	b370 <nv_storage_init+0x50>
    b340:	b2e6      	uxtb	r6, r4
		nv_read(sector, 0, (uint8_t *)&header, sizeof(struct sector_header));
    b342:	230c      	movs	r3, #12
    b344:	aa05      	add	r2, sp, #20
    b346:	2100      	movs	r1, #0
    b348:	4630      	mov	r0, r6
    b34a:	47c0      	blx	r8
		if ((header.active == 0) && (memcmp(header.signature, SECTOR_SIGNATURE, 7) == 0)) {
    b34c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    b350:	2b00      	cmp	r3, #0
    b352:	d1f2      	bne.n	b33a <nv_storage_init+0x1a>
    b354:	2207      	movs	r2, #7
    b356:	4651      	mov	r1, sl
    b358:	f10d 0019 	add.w	r0, sp, #25
    b35c:	47c8      	blx	r9
    b35e:	2800      	cmp	r0, #0
    b360:	d1eb      	bne.n	b33a <nv_storage_init+0x1a>
			if (header.number >= last_sector_number) {
    b362:	f8dd 3015 	ldr.w	r3, [sp, #21]
    b366:	42bb      	cmp	r3, r7
				last_sector_number = header.number;
    b368:	bf24      	itt	cs
    b36a:	461f      	movcs	r7, r3
			if (header.number >= last_sector_number) {
    b36c:	4635      	movcs	r5, r6
    b36e:	e7e4      	b.n	b33a <nv_storage_init+0x1a>
	if (last_sector == 0xFF) {
    b370:	2dff      	cmp	r5, #255	; 0xff
    b372:	d113      	bne.n	b39c <nv_storage_init+0x7c>
			if (create_sector(sector, last_sector_number + 1, true)) {
    b374:	3701      	adds	r7, #1
    b376:	2201      	movs	r2, #1
    b378:	4639      	mov	r1, r7
    b37a:	2000      	movs	r0, #0
    b37c:	4b40      	ldr	r3, [pc, #256]	; (b480 <nv_storage_init+0x160>)
    b37e:	4798      	blx	r3
    b380:	2800      	cmp	r0, #0
    b382:	d13e      	bne.n	b402 <nv_storage_init+0xe2>
    b384:	2201      	movs	r2, #1
    b386:	4639      	mov	r1, r7
    b388:	4610      	mov	r0, r2
    b38a:	4b3d      	ldr	r3, [pc, #244]	; (b480 <nv_storage_init+0x160>)
    b38c:	4798      	blx	r3
    b38e:	2800      	cmp	r0, #0
    b390:	d137      	bne.n	b402 <nv_storage_init+0xe2>
			ASSERT(false);
    b392:	2297      	movs	r2, #151	; 0x97
    b394:	493b      	ldr	r1, [pc, #236]	; (b484 <nv_storage_init+0x164>)
    b396:	4b3c      	ldr	r3, [pc, #240]	; (b488 <nv_storage_init+0x168>)
    b398:	4798      	blx	r3
			return;
    b39a:	e032      	b.n	b402 <nv_storage_init+0xe2>
	mem.active_sector = last_sector;
    b39c:	4c3b      	ldr	r4, [pc, #236]	; (b48c <nv_storage_init+0x16c>)
    b39e:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
	mem.pow = nv_align_next_access_address(sizeof(struct sector_header), SECTOR_HEADER_ALIGNMENT);
    b3a2:	2100      	movs	r1, #0
    b3a4:	200c      	movs	r0, #12
    b3a6:	4b3a      	ldr	r3, [pc, #232]	; (b490 <nv_storage_init+0x170>)
    b3a8:	4798      	blx	r3
    b3aa:	8020      	strh	r0, [r4, #0]
			address = CONF_STORAGE_MEMORY_START + number * CONF_SECTOR_SIZE + mem.pow;
    b3ac:	f105 0810 	add.w	r8, r5, #16
    b3b0:	ea4f 3808 	mov.w	r8, r8, lsl #12
			if (address >= NV_SECTOR_END(number)) {
    b3b4:	f608 79ff 	addw	r9, r8, #4095	; 0xfff
		nv_read(number, mem.pow, (uint8_t *)&header, sizeof(struct block_header));
    b3b8:	4e36      	ldr	r6, [pc, #216]	; (b494 <nv_storage_init+0x174>)
		} else if (header.checksum != calculate_block_header_checksum(&header)) {
    b3ba:	4f37      	ldr	r7, [pc, #220]	; (b498 <nv_storage_init+0x178>)
    b3bc:	e00e      	b.n	b3dc <nv_storage_init+0xbc>
		if (i == sizeof(struct block_header)) {
    b3be:	2b0e      	cmp	r3, #14
    b3c0:	d01f      	beq.n	b402 <nv_storage_init+0xe2>
		} else if (header.checksum != calculate_block_header_checksum(&header)) {
    b3c2:	f8bd a010 	ldrh.w	sl, [sp, #16]
    b3c6:	a801      	add	r0, sp, #4
    b3c8:	47b8      	blx	r7
    b3ca:	4582      	cmp	sl, r0
    b3cc:	d01c      	beq.n	b408 <nv_storage_init+0xe8>
			mem.pow = nv_align_next_access_address(mem.pow + sizeof(struct block_header), BLOCK_WITH_DATA_ALIGNMENT);
    b3ce:	8820      	ldrh	r0, [r4, #0]
    b3d0:	300e      	adds	r0, #14
    b3d2:	2101      	movs	r1, #1
    b3d4:	b280      	uxth	r0, r0
    b3d6:	4b2e      	ldr	r3, [pc, #184]	; (b490 <nv_storage_init+0x170>)
    b3d8:	4798      	blx	r3
    b3da:	8020      	strh	r0, [r4, #0]
		nv_read(number, mem.pow, (uint8_t *)&header, sizeof(struct block_header));
    b3dc:	230e      	movs	r3, #14
    b3de:	aa01      	add	r2, sp, #4
    b3e0:	8821      	ldrh	r1, [r4, #0]
    b3e2:	4628      	mov	r0, r5
    b3e4:	47b0      	blx	r6
			if (((uint8_t *)&header)[i] != 0xFF) {
    b3e6:	f89d 3004 	ldrb.w	r3, [sp, #4]
    b3ea:	2bff      	cmp	r3, #255	; 0xff
    b3ec:	d1e9      	bne.n	b3c2 <nv_storage_init+0xa2>
    b3ee:	aa01      	add	r2, sp, #4
		for (i = 0; i < sizeof(struct block_header); i++) {
    b3f0:	2301      	movs	r3, #1
			if (((uint8_t *)&header)[i] != 0xFF) {
    b3f2:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    b3f6:	29ff      	cmp	r1, #255	; 0xff
    b3f8:	d1e1      	bne.n	b3be <nv_storage_init+0x9e>
		for (i = 0; i < sizeof(struct block_header); i++) {
    b3fa:	3301      	adds	r3, #1
    b3fc:	b2db      	uxtb	r3, r3
    b3fe:	2b0e      	cmp	r3, #14
    b400:	d1f7      	bne.n	b3f2 <nv_storage_init+0xd2>
}
    b402:	b008      	add	sp, #32
    b404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (header.active) {
    b408:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    b40c:	b15b      	cbz	r3, b426 <nv_storage_init+0x106>
			mem.pow += sizeof(struct block_header) + header.block_size;
    b40e:	8820      	ldrh	r0, [r4, #0]
    b410:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    b414:	4418      	add	r0, r3
    b416:	300e      	adds	r0, #14
    b418:	b280      	uxth	r0, r0
    b41a:	8020      	strh	r0, [r4, #0]
			mem.pow = nv_align_next_access_address(mem.pow, BLOCK_WITH_DATA_ALIGNMENT);
    b41c:	2101      	movs	r1, #1
    b41e:	4b1c      	ldr	r3, [pc, #112]	; (b490 <nv_storage_init+0x170>)
    b420:	4798      	blx	r3
    b422:	8020      	strh	r0, [r4, #0]
    b424:	e7da      	b.n	b3dc <nv_storage_init+0xbc>
			struct nv_item *item = find_item(header.id);
    b426:	f8bd a006 	ldrh.w	sl, [sp, #6]
    b42a:	4650      	mov	r0, sl
    b42c:	4b1b      	ldr	r3, [pc, #108]	; (b49c <nv_storage_init+0x17c>)
    b42e:	4798      	blx	r3
			if (!item) {
    b430:	4602      	mov	r2, r0
    b432:	b1d8      	cbz	r0, b46c <nv_storage_init+0x14c>
			if (header.item_size == 0) {
    b434:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    b438:	b943      	cbnz	r3, b44c <nv_storage_init+0x12c>
				*item = mem.items[--mem.items_amount];
    b43a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    b43c:	3b01      	subs	r3, #1
    b43e:	b29b      	uxth	r3, r3
    b440:	8563      	strh	r3, [r4, #42]	; 0x2a
    b442:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    b446:	f8d3 3002 	ldr.w	r3, [r3, #2]
    b44a:	6013      	str	r3, [r2, #0]
			item->last_block = mem.pow;
    b44c:	8823      	ldrh	r3, [r4, #0]
    b44e:	8053      	strh	r3, [r2, #2]
			mem.pow += sizeof(struct block_header) + header.block_size;
    b450:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    b454:	4418      	add	r0, r3
    b456:	300e      	adds	r0, #14
    b458:	b280      	uxth	r0, r0
    b45a:	8020      	strh	r0, [r4, #0]
			mem.pow = nv_align_next_access_address(mem.pow, BLOCK_WITH_DATA_ALIGNMENT);
    b45c:	2101      	movs	r1, #1
    b45e:	4b0c      	ldr	r3, [pc, #48]	; (b490 <nv_storage_init+0x170>)
    b460:	4798      	blx	r3
    b462:	8020      	strh	r0, [r4, #0]
			address = CONF_STORAGE_MEMORY_START + number * CONF_SECTOR_SIZE + mem.pow;
    b464:	4440      	add	r0, r8
			if (address >= NV_SECTOR_END(number)) {
    b466:	4548      	cmp	r0, r9
    b468:	d3b8      	bcc.n	b3dc <nv_storage_init+0xbc>
    b46a:	e7ca      	b.n	b402 <nv_storage_init+0xe2>
				item     = &mem.items[mem.items_amount++];
    b46c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    b46e:	1c5a      	adds	r2, r3, #1
    b470:	8562      	strh	r2, [r4, #42]	; 0x2a
    b472:	009b      	lsls	r3, r3, #2
    b474:	1c9a      	adds	r2, r3, #2
    b476:	4422      	add	r2, r4
				item->id = header.id;
    b478:	4423      	add	r3, r4
    b47a:	f8a3 a002 	strh.w	sl, [r3, #2]
    b47e:	e7d9      	b.n	b434 <nv_storage_init+0x114>
    b480:	0000b049 	.word	0x0000b049
    b484:	00011380 	.word	0x00011380
    b488:	0000272d 	.word	0x0000272d
    b48c:	20007240 	.word	0x20007240
    b490:	0000aedd 	.word	0x0000aedd
    b494:	0000acc5 	.word	0x0000acc5
    b498:	0000af49 	.word	0x0000af49
    b49c:	0000af09 	.word	0x0000af09
    b4a0:	00011378 	.word	0x00011378
    b4a4:	0000dc81 	.word	0x0000dc81

0000b4a8 <nv_storage_write>:
{
    b4a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b4ac:	b085      	sub	sp, #20
    b4ae:	4606      	mov	r6, r0
    b4b0:	460f      	mov	r7, r1
    b4b2:	461c      	mov	r4, r3
	ASSERT(data && size && id);
    b4b4:	4690      	mov	r8, r2
    b4b6:	2a00      	cmp	r2, #0
    b4b8:	d065      	beq.n	b586 <nv_storage_write+0xde>
    b4ba:	2b00      	cmp	r3, #0
    b4bc:	d065      	beq.n	b58a <nv_storage_write+0xe2>
    b4be:	3000      	adds	r0, #0
    b4c0:	bf18      	it	ne
    b4c2:	2001      	movne	r0, #1
    b4c4:	22aa      	movs	r2, #170	; 0xaa
    b4c6:	4953      	ldr	r1, [pc, #332]	; (b614 <nv_storage_write+0x16c>)
    b4c8:	4b53      	ldr	r3, [pc, #332]	; (b618 <nv_storage_write+0x170>)
    b4ca:	4798      	blx	r3
	if (CONF_SECTOR_SIZE - mem.pow < size) {
    b4cc:	4b53      	ldr	r3, [pc, #332]	; (b61c <nv_storage_write+0x174>)
    b4ce:	881a      	ldrh	r2, [r3, #0]
    b4d0:	f5c2 5280 	rsb	r2, r2, #4096	; 0x1000
	if (!copy_sector_if_needed(sizeof(struct block_header) + size)) {
    b4d4:	f104 030e 	add.w	r3, r4, #14
	if (CONF_SECTOR_SIZE - mem.pow < size) {
    b4d8:	b29b      	uxth	r3, r3
    b4da:	429a      	cmp	r2, r3
    b4dc:	db57      	blt.n	b58e <nv_storage_write+0xe6>
	item = find_item(id);
    b4de:	4630      	mov	r0, r6
    b4e0:	4b4f      	ldr	r3, [pc, #316]	; (b620 <nv_storage_write+0x178>)
    b4e2:	4798      	blx	r3
	if (!item) {
    b4e4:	4605      	mov	r5, r0
    b4e6:	2800      	cmp	r0, #0
    b4e8:	d05c      	beq.n	b5a4 <nv_storage_write+0xfc>
		nv_read(mem.active_sector, item->last_block, (uint8_t *)&header, sizeof(struct block_header));
    b4ea:	230e      	movs	r3, #14
    b4ec:	466a      	mov	r2, sp
    b4ee:	8841      	ldrh	r1, [r0, #2]
    b4f0:	484a      	ldr	r0, [pc, #296]	; (b61c <nv_storage_write+0x174>)
    b4f2:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    b4f6:	f8df 9140 	ldr.w	r9, [pc, #320]	; b638 <nv_storage_write+0x190>
    b4fa:	47c8      	blx	r9
		fill_block_header(&header, id, offset, size, header.item_size, item->last_block);
    b4fc:	f8bd 9008 	ldrh.w	r9, [sp, #8]
    b500:	886b      	ldrh	r3, [r5, #2]
	header->active     = 0xFFFF;
    b502:	f64f 72ff 	movw	r2, #65535	; 0xffff
    b506:	f8ad 2000 	strh.w	r2, [sp]
	header->id         = id;
    b50a:	f8ad 6002 	strh.w	r6, [sp, #2]
	header->offset     = offset;
    b50e:	f8ad 7004 	strh.w	r7, [sp, #4]
	header->block_size = block_size;
    b512:	f8ad 4006 	strh.w	r4, [sp, #6]
	header->prev_block = prev_block;
    b516:	f8ad 300a 	strh.w	r3, [sp, #10]
	header->checksum   = calculate_block_header_checksum(header);
    b51a:	4668      	mov	r0, sp
    b51c:	4b41      	ldr	r3, [pc, #260]	; (b624 <nv_storage_write+0x17c>)
    b51e:	4798      	blx	r3
    b520:	f8ad 000c 	strh.w	r0, [sp, #12]
		if (((uint32_t)offset + (uint32_t)size) > header.item_size) {
    b524:	4427      	add	r7, r4
    b526:	454f      	cmp	r7, r9
    b528:	d86a      	bhi.n	b600 <nv_storage_write+0x158>
	last_block = mem.pow;
    b52a:	4b3c      	ldr	r3, [pc, #240]	; (b61c <nv_storage_write+0x174>)
    b52c:	881f      	ldrh	r7, [r3, #0]
	if (!write_block_header(&header)) {
    b52e:	4668      	mov	r0, sp
    b530:	4b3d      	ldr	r3, [pc, #244]	; (b628 <nv_storage_write+0x180>)
    b532:	4798      	blx	r3
    b534:	2800      	cmp	r0, #0
    b536:	d066      	beq.n	b606 <nv_storage_write+0x15e>
	if (!write_and_verify(mem.active_sector, mem.pow + sizeof(struct block_header), data, size)) {
    b538:	4838      	ldr	r0, [pc, #224]	; (b61c <nv_storage_write+0x174>)
    b53a:	8801      	ldrh	r1, [r0, #0]
    b53c:	310e      	adds	r1, #14
    b53e:	4623      	mov	r3, r4
    b540:	4642      	mov	r2, r8
    b542:	b289      	uxth	r1, r1
    b544:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    b548:	f8df 80f0 	ldr.w	r8, [pc, #240]	; b63c <nv_storage_write+0x194>
    b54c:	47c0      	blx	r8
    b54e:	2800      	cmp	r0, #0
    b550:	d03d      	beq.n	b5ce <nv_storage_write+0x126>
	if (!activate_block_header(size)) {
    b552:	4620      	mov	r0, r4
    b554:	4b35      	ldr	r3, [pc, #212]	; (b62c <nv_storage_write+0x184>)
    b556:	4798      	blx	r3
    b558:	2800      	cmp	r0, #0
    b55a:	d057      	beq.n	b60c <nv_storage_write+0x164>
	mem.pow += sizeof(struct block_header) + size;
    b55c:	f8df 80bc 	ldr.w	r8, [pc, #188]	; b61c <nv_storage_write+0x174>
    b560:	f8b8 0000 	ldrh.w	r0, [r8]
    b564:	300e      	adds	r0, #14
    b566:	4420      	add	r0, r4
    b568:	b280      	uxth	r0, r0
    b56a:	f8a8 0000 	strh.w	r0, [r8]
	mem.pow = nv_align_next_access_address(mem.pow, BLOCK_WITH_DATA_ALIGNMENT);
    b56e:	2101      	movs	r1, #1
    b570:	4b2f      	ldr	r3, [pc, #188]	; (b630 <nv_storage_write+0x188>)
    b572:	4798      	blx	r3
    b574:	f8a8 0000 	strh.w	r0, [r8]
	if (!item) {
    b578:	2d00      	cmp	r5, #0
    b57a:	d035      	beq.n	b5e8 <nv_storage_write+0x140>
	item->last_block = last_block;
    b57c:	806f      	strh	r7, [r5, #2]
	return ERR_NONE;
    b57e:	2000      	movs	r0, #0
}
    b580:	b005      	add	sp, #20
    b582:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ASSERT(data && size && id);
    b586:	2000      	movs	r0, #0
    b588:	e79c      	b.n	b4c4 <nv_storage_write+0x1c>
    b58a:	2000      	movs	r0, #0
    b58c:	e79a      	b.n	b4c4 <nv_storage_write+0x1c>
		return copy_data_to_new_sector();
    b58e:	4b29      	ldr	r3, [pc, #164]	; (b634 <nv_storage_write+0x18c>)
    b590:	4798      	blx	r3
	if (!copy_sector_if_needed(sizeof(struct block_header) + size)) {
    b592:	2800      	cmp	r0, #0
    b594:	d1a3      	bne.n	b4de <nv_storage_write+0x36>
		ASSERT(false);
    b596:	22ad      	movs	r2, #173	; 0xad
    b598:	491e      	ldr	r1, [pc, #120]	; (b614 <nv_storage_write+0x16c>)
    b59a:	4b1f      	ldr	r3, [pc, #124]	; (b618 <nv_storage_write+0x170>)
    b59c:	4798      	blx	r3
		return ERR_FAILURE;
    b59e:	f06f 001d 	mvn.w	r0, #29
    b5a2:	e7ed      	b.n	b580 <nv_storage_write+0xd8>
	header->active     = 0xFFFF;
    b5a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b5a8:	f8ad 3000 	strh.w	r3, [sp]
	header->id         = id;
    b5ac:	f8ad 6002 	strh.w	r6, [sp, #2]
	header->offset     = offset;
    b5b0:	2300      	movs	r3, #0
    b5b2:	f8ad 3004 	strh.w	r3, [sp, #4]
	header->block_size = block_size;
    b5b6:	f8ad 4006 	strh.w	r4, [sp, #6]
	header->item_size  = item_size;
    b5ba:	f8ad 4008 	strh.w	r4, [sp, #8]
	header->prev_block = prev_block;
    b5be:	f8ad 300a 	strh.w	r3, [sp, #10]
	header->checksum   = calculate_block_header_checksum(header);
    b5c2:	4668      	mov	r0, sp
    b5c4:	4b17      	ldr	r3, [pc, #92]	; (b624 <nv_storage_write+0x17c>)
    b5c6:	4798      	blx	r3
    b5c8:	f8ad 000c 	strh.w	r0, [sp, #12]
    b5cc:	e7ad      	b.n	b52a <nv_storage_write+0x82>
		mem.pow += sizeof(struct block_header) + size;
    b5ce:	4d13      	ldr	r5, [pc, #76]	; (b61c <nv_storage_write+0x174>)
    b5d0:	8828      	ldrh	r0, [r5, #0]
    b5d2:	300e      	adds	r0, #14
    b5d4:	4420      	add	r0, r4
    b5d6:	b280      	uxth	r0, r0
    b5d8:	8028      	strh	r0, [r5, #0]
		mem.pow = nv_align_next_access_address(mem.pow, BLOCK_WITH_DATA_ALIGNMENT);
    b5da:	2101      	movs	r1, #1
    b5dc:	4b14      	ldr	r3, [pc, #80]	; (b630 <nv_storage_write+0x188>)
    b5de:	4798      	blx	r3
    b5e0:	8028      	strh	r0, [r5, #0]
		return ERR_FAILURE;
    b5e2:	f06f 001d 	mvn.w	r0, #29
    b5e6:	e7cb      	b.n	b580 <nv_storage_write+0xd8>
		item     = &mem.items[mem.items_amount++];
    b5e8:	4643      	mov	r3, r8
    b5ea:	f8b8 202a 	ldrh.w	r2, [r8, #42]	; 0x2a
    b5ee:	1c51      	adds	r1, r2, #1
    b5f0:	f8a8 102a 	strh.w	r1, [r8, #42]	; 0x2a
    b5f4:	0092      	lsls	r2, r2, #2
    b5f6:	1c95      	adds	r5, r2, #2
    b5f8:	4445      	add	r5, r8
		item->id = id;
    b5fa:	4413      	add	r3, r2
    b5fc:	805e      	strh	r6, [r3, #2]
    b5fe:	e7bd      	b.n	b57c <nv_storage_write+0xd4>
			return ERR_WRONG_LENGTH;
    b600:	f06f 001e 	mvn.w	r0, #30
    b604:	e7bc      	b.n	b580 <nv_storage_write+0xd8>
		return ERR_FAILURE;
    b606:	f06f 001d 	mvn.w	r0, #29
    b60a:	e7b9      	b.n	b580 <nv_storage_write+0xd8>
		return ERR_FAILURE;
    b60c:	f06f 001d 	mvn.w	r0, #29
    b610:	e7b6      	b.n	b580 <nv_storage_write+0xd8>
    b612:	bf00      	nop
    b614:	00011380 	.word	0x00011380
    b618:	0000272d 	.word	0x0000272d
    b61c:	20007240 	.word	0x20007240
    b620:	0000af09 	.word	0x0000af09
    b624:	0000af49 	.word	0x0000af49
    b628:	0000b285 	.word	0x0000b285
    b62c:	0000b2d9 	.word	0x0000b2d9
    b630:	0000aedd 	.word	0x0000aedd
    b634:	0000b0f1 	.word	0x0000b0f1
    b638:	0000acc5 	.word	0x0000acc5
    b63c:	0000b01d 	.word	0x0000b01d

0000b640 <nv_storage_read>:
{
    b640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b644:	b084      	sub	sp, #16
    b646:	4605      	mov	r5, r0
    b648:	460e      	mov	r6, r1
    b64a:	461c      	mov	r4, r3
	ASSERT(data && size && id);
    b64c:	4690      	mov	r8, r2
    b64e:	b33a      	cbz	r2, b6a0 <nv_storage_read+0x60>
    b650:	b343      	cbz	r3, b6a4 <nv_storage_read+0x64>
    b652:	3000      	adds	r0, #0
    b654:	bf18      	it	ne
    b656:	2001      	movne	r0, #1
    b658:	22e3      	movs	r2, #227	; 0xe3
    b65a:	4916      	ldr	r1, [pc, #88]	; (b6b4 <nv_storage_read+0x74>)
    b65c:	4b16      	ldr	r3, [pc, #88]	; (b6b8 <nv_storage_read+0x78>)
    b65e:	4798      	blx	r3
	item = find_item(id);
    b660:	4628      	mov	r0, r5
    b662:	4b16      	ldr	r3, [pc, #88]	; (b6bc <nv_storage_read+0x7c>)
    b664:	4798      	blx	r3
	if (!item) {
    b666:	4605      	mov	r5, r0
    b668:	b1f0      	cbz	r0, b6a8 <nv_storage_read+0x68>
	nv_read(mem.active_sector, item->last_block, (uint8_t *)&header, sizeof(struct block_header));
    b66a:	230e      	movs	r3, #14
    b66c:	466a      	mov	r2, sp
    b66e:	8841      	ldrh	r1, [r0, #2]
    b670:	4813      	ldr	r0, [pc, #76]	; (b6c0 <nv_storage_read+0x80>)
    b672:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    b676:	4f13      	ldr	r7, [pc, #76]	; (b6c4 <nv_storage_read+0x84>)
    b678:	47b8      	blx	r7
	if (((uint32_t)size + (uint32_t)offset) > header.item_size) {
    b67a:	19a3      	adds	r3, r4, r6
    b67c:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    b680:	4293      	cmp	r3, r2
    b682:	d814      	bhi.n	b6ae <nv_storage_read+0x6e>
	if (!collect_item_data(item, data, offset, size)) {
    b684:	4623      	mov	r3, r4
    b686:	4632      	mov	r2, r6
    b688:	4641      	mov	r1, r8
    b68a:	4628      	mov	r0, r5
    b68c:	4c0e      	ldr	r4, [pc, #56]	; (b6c8 <nv_storage_read+0x88>)
    b68e:	47a0      	blx	r4
    b690:	2800      	cmp	r0, #0
	return ERR_NONE;
    b692:	bf0c      	ite	eq
    b694:	f06f 001d 	mvneq.w	r0, #29
    b698:	2000      	movne	r0, #0
}
    b69a:	b004      	add	sp, #16
    b69c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(data && size && id);
    b6a0:	2000      	movs	r0, #0
    b6a2:	e7d9      	b.n	b658 <nv_storage_read+0x18>
    b6a4:	2000      	movs	r0, #0
    b6a6:	e7d7      	b.n	b658 <nv_storage_read+0x18>
		return ERR_NOT_FOUND;
    b6a8:	f06f 0009 	mvn.w	r0, #9
    b6ac:	e7f5      	b.n	b69a <nv_storage_read+0x5a>
		return ERR_WRONG_LENGTH;
    b6ae:	f06f 001e 	mvn.w	r0, #30
    b6b2:	e7f2      	b.n	b69a <nv_storage_read+0x5a>
    b6b4:	00011380 	.word	0x00011380
    b6b8:	0000272d 	.word	0x0000272d
    b6bc:	0000af09 	.word	0x0000af09
    b6c0:	20007240 	.word	0x20007240
    b6c4:	0000acc5 	.word	0x0000acc5
    b6c8:	0000af75 	.word	0x0000af75

0000b6cc <persistent_storage_init>:

/**
 * \brief Initialize Persistent Storage
 */
void persistent_storage_init(void)
{
    b6cc:	b508      	push	{r3, lr}
	nv_init(&FLASH_0);
    b6ce:	4803      	ldr	r0, [pc, #12]	; (b6dc <persistent_storage_init+0x10>)
    b6d0:	4b03      	ldr	r3, [pc, #12]	; (b6e0 <persistent_storage_init+0x14>)
    b6d2:	4798      	blx	r3
	nv_storage_init();
    b6d4:	4b03      	ldr	r3, [pc, #12]	; (b6e4 <persistent_storage_init+0x18>)
    b6d6:	4798      	blx	r3
    b6d8:	bd08      	pop	{r3, pc}
    b6da:	bf00      	nop
    b6dc:	2000740c 	.word	0x2000740c
    b6e0:	0000ac0d 	.word	0x0000ac0d
    b6e4:	0000b321 	.word	0x0000b321

0000b6e8 <ring_init>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: Called by the main code application to setup and initialize the BPDU ring topology management
// Returns:     Nothing (NULL)
// *****************************************************************************************************************************************************************
void ring_init(unsigned char basestation, unsigned char *mac_raw)
{
    b6e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b6ea:	460c      	mov	r4, r1
	int				loop;
	
	/* set flags to indicate first time boot-up */
	first = 1;
    b6ec:	2201      	movs	r2, #1
    b6ee:	4b97      	ldr	r3, [pc, #604]	; (b94c <ring_init+0x264>)
    b6f0:	701a      	strb	r2, [r3, #0]
	storm_holdoff = 0;

	/* "basestation" parameter determines if this MultiSense unit is a base-station or simple pass-through... */
	if (basestation) {
    b6f2:	4606      	mov	r6, r0
    b6f4:	2800      	cmp	r0, #0
    b6f6:	f000 80b4 	beq.w	b862 <ring_init+0x17a>
		xprintf("ETHERNET: Set as a base-station to manage Ethernet topology...\r\n");
    b6fa:	4895      	ldr	r0, [pc, #596]	; (b950 <ring_init+0x268>)
    b6fc:	4b95      	ldr	r3, [pc, #596]	; (b954 <ring_init+0x26c>)
    b6fe:	4798      	blx	r3
		
		/* Enable BPDU tags */
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA8, 0x00);
    b700:	2100      	movs	r1, #0
    b702:	2070      	movs	r0, #112	; 0x70
    b704:	4d94      	ldr	r5, [pc, #592]	; (b958 <ring_init+0x270>)
    b706:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA7, 0x00);
    b708:	2100      	movs	r1, #0
    b70a:	2071      	movs	r0, #113	; 0x71
    b70c:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA6, 0x71);
    b70e:	2171      	movs	r1, #113	; 0x71
    b710:	2072      	movs	r0, #114	; 0x72
    b712:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA5, 0x01);
    b714:	2101      	movs	r1, #1
    b716:	2073      	movs	r0, #115	; 0x73
    b718:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA4, 0x80);
    b71a:	2180      	movs	r1, #128	; 0x80
    b71c:	2074      	movs	r0, #116	; 0x74
    b71e:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA3, 0xC2);
    b720:	21c2      	movs	r1, #194	; 0xc2
    b722:	2075      	movs	r0, #117	; 0x75
    b724:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA2, 0x00);
    b726:	2100      	movs	r1, #0
    b728:	2076      	movs	r0, #118	; 0x76
    b72a:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA1, 0x00);
    b72c:	2100      	movs	r1, #0
    b72e:	2077      	movs	r0, #119	; 0x77
    b730:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA0, 0x00);
    b732:	2100      	movs	r1, #0
    b734:	2078      	movs	r0, #120	; 0x78
    b736:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_CONTROL0, 0x00);
    b738:	2100      	movs	r1, #0
    b73a:	206e      	movs	r0, #110	; 0x6e
    b73c:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_CONTROL1, 0x00);
    b73e:	2100      	movs	r1, #0
    b740:	206f      	movs	r0, #111	; 0x6f
    b742:	47a8      	blx	r5
		delay_us(250);
    b744:	20fa      	movs	r0, #250	; 0xfa
    b746:	4f85      	ldr	r7, [pc, #532]	; (b95c <ring_init+0x274>)
    b748:	47b8      	blx	r7
		
		/* Read back the static MAC table and check that the BPDU enabling is in operation? */
		writeKSZreg(SPI_KSZ8794_ACCESS_CONTROL0, 0x10);
    b74a:	2110      	movs	r1, #16
    b74c:	206e      	movs	r0, #110	; 0x6e
    b74e:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_CONTROL1, 0x00);
    b750:	2100      	movs	r1, #0
    b752:	206f      	movs	r0, #111	; 0x6f
    b754:	47a8      	blx	r5
		delay_us(50);
    b756:	2032      	movs	r0, #50	; 0x32
    b758:	47b8      	blx	r7

		/* Check the individual registers from the SPI bus */
		if ((!checkKSZreg(SPI_KSZ8794_ACCESS_DATA8, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA7, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA6, 0x71)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA5, 0x01)) ||
    b75a:	2100      	movs	r1, #0
    b75c:	2070      	movs	r0, #112	; 0x70
    b75e:	4b80      	ldr	r3, [pc, #512]	; (b960 <ring_init+0x278>)
    b760:	4798      	blx	r3
    b762:	b128      	cbz	r0, b770 <ring_init+0x88>
    b764:	2100      	movs	r1, #0
    b766:	2071      	movs	r0, #113	; 0x71
    b768:	4b7d      	ldr	r3, [pc, #500]	; (b960 <ring_init+0x278>)
    b76a:	4798      	blx	r3
    b76c:	2800      	cmp	r0, #0
    b76e:	d14d      	bne.n	b80c <ring_init+0x124>
	        (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA4, 0x80)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA3, 0xC2)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA2, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA1, 0x00)) ||
		    (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA0, 0x00))) { xprintf("ERROR setting the STATIC MAC table with BPDU for Base-station...\r\n"); }
    b770:	487c      	ldr	r0, [pc, #496]	; (b964 <ring_init+0x27c>)
    b772:	4b78      	ldr	r3, [pc, #480]	; (b954 <ring_init+0x26c>)
    b774:	4798      	blx	r3
				
		/* Set the local context "mode" to indicate this is in fact a base-station */		
		mode = 1;
    b776:	2201      	movs	r2, #1
    b778:	4b74      	ldr	r3, [pc, #464]	; (b94c <ring_init+0x264>)
    b77a:	705a      	strb	r2, [r3, #1]
		/* Set the local context "mode" to indicate this is in fact a pass-though un-configured node */		
		mode = 0;
	}
	
	/* Bridge DST MAC */
	wbuf[0] = 0x01;
    b77c:	4a73      	ldr	r2, [pc, #460]	; (b94c <ring_init+0x264>)
    b77e:	2101      	movs	r1, #1
    b780:	7111      	strb	r1, [r2, #4]
	wbuf[1] = 0x80;
    b782:	2580      	movs	r5, #128	; 0x80
    b784:	7155      	strb	r5, [r2, #5]
	wbuf[2] = 0xC2;
    b786:	20c2      	movs	r0, #194	; 0xc2
    b788:	7190      	strb	r0, [r2, #6]
	wbuf[3] = 0x00;
    b78a:	2300      	movs	r3, #0
    b78c:	71d3      	strb	r3, [r2, #7]
	wbuf[4] = 0x00;
    b78e:	7213      	strb	r3, [r2, #8]
	wbuf[5] = 0x00;
    b790:	7253      	strb	r3, [r2, #9]

	/* Bridge SRC MAC */
	wbuf[6] = 0x01;
    b792:	7291      	strb	r1, [r2, #10]
	wbuf[7] = 0x80;
    b794:	72d5      	strb	r5, [r2, #11]
	wbuf[8] = 0xC2;
    b796:	7310      	strb	r0, [r2, #12]
	wbuf[9] = 0x00;
    b798:	7353      	strb	r3, [r2, #13]
	wbuf[10] = 0x00;
    b79a:	7393      	strb	r3, [r2, #14]
	wbuf[11] = 0x01;
    b79c:	73d1      	strb	r1, [r2, #15]

	/* BPDU TAG field. Forced forwarding, filtering, priority, send to Port 0 ONLY */
	*((unsigned short int *)&wbuf[12]) = 0x01E0;
    b79e:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
    b7a2:	8210      	strh	r0, [r2, #16]
	wbuf[14] = 0x00;
    b7a4:	7493      	strb	r3, [r2, #18]
	wbuf[15] = 0x07;
    b7a6:	2007      	movs	r0, #7
    b7a8:	74d0      	strb	r0, [r2, #19]
	wbuf[16] = 0x00;
    b7aa:	7513      	strb	r3, [r2, #20]
	wbuf[17] = 0x00;
    b7ac:	7553      	strb	r3, [r2, #21]
	wbuf[18] = 0x00;
    b7ae:	7593      	strb	r3, [r2, #22]
	wbuf[19] = 0x01;
    b7b0:	75d1      	strb	r1, [r2, #23]

	/* BPDU Length/Type */
	wbuf[20] = 0x00;
    b7b2:	7613      	strb	r3, [r2, #24]
	wbuf[21] = 0x27;
    b7b4:	2127      	movs	r1, #39	; 0x27
    b7b6:	7651      	strb	r1, [r2, #25]
	wbuf[22] = 0x42;
    b7b8:	2142      	movs	r1, #66	; 0x42
    b7ba:	7691      	strb	r1, [r2, #26]
	wbuf[23] = 0x42;
    b7bc:	76d1      	strb	r1, [r2, #27]
    wbuf[24] = 0x03;
    b7be:	2103      	movs	r1, #3
    b7c0:	7711      	strb	r1, [r2, #28]

	/* BPDU Header */
	wbuf[25] = 0x00;
    b7c2:	7753      	strb	r3, [r2, #29]
	wbuf[26] = 0x00;
    b7c4:	7793      	strb	r3, [r2, #30]
	wbuf[27] = 0x00;
    b7c6:	77d3      	strb	r3, [r2, #31]
	wbuf[28] = 0x00;
    b7c8:	f882 3020 	strb.w	r3, [r2, #32]

	/* BPDU data payload */
	wbuf[29] = mac_raw[0];
    b7cc:	7823      	ldrb	r3, [r4, #0]
    b7ce:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
	wbuf[30] = mac_raw[1];
    b7d2:	7863      	ldrb	r3, [r4, #1]
    b7d4:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
	wbuf[31] = mac_raw[2];
    b7d8:	78a3      	ldrb	r3, [r4, #2]
    b7da:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
	wbuf[32] = mac_raw[3];
    b7de:	78e3      	ldrb	r3, [r4, #3]
    b7e0:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
	wbuf[33] = mac_raw[4];
    b7e4:	7923      	ldrb	r3, [r4, #4]
    b7e6:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	wbuf[34] = mac_raw[5];
    b7ea:	7961      	ldrb	r1, [r4, #5]
    b7ec:	4613      	mov	r3, r2
    b7ee:	f803 1f26 	strb.w	r1, [r3, #38]!
    b7f2:	3247      	adds	r2, #71	; 0x47

	/* BPDU Padding ZEROs */
	for (loop = 35; loop < 68; loop++) {
		wbuf[loop] = 0x00;
    b7f4:	2100      	movs	r1, #0
    b7f6:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (loop = 35; loop < 68; loop++) {
    b7fa:	4293      	cmp	r3, r2
    b7fc:	d1fb      	bne.n	b7f6 <ring_init+0x10e>
	}
	
	xprintf("ETHERNET: Completed RING management init...\r\n");
    b7fe:	485a      	ldr	r0, [pc, #360]	; (b968 <ring_init+0x280>)
    b800:	4b54      	ldr	r3, [pc, #336]	; (b954 <ring_init+0x26c>)
    b802:	4798      	blx	r3
	
	/* If we are a base-station, then send out the first BPDU frame now upon start-up */
	if (basestation) {																						/* When [BS] switched selected, we are a base-station */
    b804:	2e00      	cmp	r6, #0
    b806:	f040 8098 	bne.w	b93a <ring_init+0x252>
    b80a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((!checkKSZreg(SPI_KSZ8794_ACCESS_DATA8, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA7, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA6, 0x71)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA5, 0x01)) ||
    b80c:	2171      	movs	r1, #113	; 0x71
    b80e:	2072      	movs	r0, #114	; 0x72
    b810:	4b53      	ldr	r3, [pc, #332]	; (b960 <ring_init+0x278>)
    b812:	4798      	blx	r3
    b814:	2800      	cmp	r0, #0
    b816:	d0ab      	beq.n	b770 <ring_init+0x88>
    b818:	2101      	movs	r1, #1
    b81a:	2073      	movs	r0, #115	; 0x73
    b81c:	4b50      	ldr	r3, [pc, #320]	; (b960 <ring_init+0x278>)
    b81e:	4798      	blx	r3
    b820:	2800      	cmp	r0, #0
    b822:	d0a5      	beq.n	b770 <ring_init+0x88>
	        (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA4, 0x80)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA3, 0xC2)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA2, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA1, 0x00)) ||
    b824:	2180      	movs	r1, #128	; 0x80
    b826:	2074      	movs	r0, #116	; 0x74
    b828:	4b4d      	ldr	r3, [pc, #308]	; (b960 <ring_init+0x278>)
    b82a:	4798      	blx	r3
		if ((!checkKSZreg(SPI_KSZ8794_ACCESS_DATA8, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA7, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA6, 0x71)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA5, 0x01)) ||
    b82c:	2800      	cmp	r0, #0
    b82e:	d09f      	beq.n	b770 <ring_init+0x88>
	        (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA4, 0x80)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA3, 0xC2)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA2, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA1, 0x00)) ||
    b830:	21c2      	movs	r1, #194	; 0xc2
    b832:	2075      	movs	r0, #117	; 0x75
    b834:	4b4a      	ldr	r3, [pc, #296]	; (b960 <ring_init+0x278>)
    b836:	4798      	blx	r3
    b838:	2800      	cmp	r0, #0
    b83a:	d099      	beq.n	b770 <ring_init+0x88>
    b83c:	2100      	movs	r1, #0
    b83e:	2076      	movs	r0, #118	; 0x76
    b840:	4b47      	ldr	r3, [pc, #284]	; (b960 <ring_init+0x278>)
    b842:	4798      	blx	r3
    b844:	2800      	cmp	r0, #0
    b846:	d093      	beq.n	b770 <ring_init+0x88>
    b848:	2100      	movs	r1, #0
    b84a:	2077      	movs	r0, #119	; 0x77
    b84c:	4b44      	ldr	r3, [pc, #272]	; (b960 <ring_init+0x278>)
    b84e:	4798      	blx	r3
    b850:	2800      	cmp	r0, #0
    b852:	d08d      	beq.n	b770 <ring_init+0x88>
		    (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA0, 0x00))) { xprintf("ERROR setting the STATIC MAC table with BPDU for Base-station...\r\n"); }
    b854:	2100      	movs	r1, #0
    b856:	2078      	movs	r0, #120	; 0x78
    b858:	4b41      	ldr	r3, [pc, #260]	; (b960 <ring_init+0x278>)
    b85a:	4798      	blx	r3
	        (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA4, 0x80)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA3, 0xC2)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA2, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA1, 0x00)) ||
    b85c:	2800      	cmp	r0, #0
    b85e:	d18a      	bne.n	b776 <ring_init+0x8e>
    b860:	e786      	b.n	b770 <ring_init+0x88>
		xprintf("ETHERNET: normal none-managed pass-through node...\r\n");
    b862:	4842      	ldr	r0, [pc, #264]	; (b96c <ring_init+0x284>)
    b864:	4b3b      	ldr	r3, [pc, #236]	; (b954 <ring_init+0x26c>)
    b866:	4798      	blx	r3
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA8, 0x00);
    b868:	2100      	movs	r1, #0
    b86a:	2070      	movs	r0, #112	; 0x70
    b86c:	4d3a      	ldr	r5, [pc, #232]	; (b958 <ring_init+0x270>)
    b86e:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA7, 0x00);
    b870:	2100      	movs	r1, #0
    b872:	2071      	movs	r0, #113	; 0x71
    b874:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA6, 0x61);
    b876:	2161      	movs	r1, #97	; 0x61
    b878:	2072      	movs	r0, #114	; 0x72
    b87a:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA5, 0x01);
    b87c:	2101      	movs	r1, #1
    b87e:	2073      	movs	r0, #115	; 0x73
    b880:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA4, 0x80);
    b882:	2180      	movs	r1, #128	; 0x80
    b884:	2074      	movs	r0, #116	; 0x74
    b886:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA3, 0xC2);
    b888:	21c2      	movs	r1, #194	; 0xc2
    b88a:	2075      	movs	r0, #117	; 0x75
    b88c:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA2, 0x00);
    b88e:	2100      	movs	r1, #0
    b890:	2076      	movs	r0, #118	; 0x76
    b892:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA1, 0x00);
    b894:	2100      	movs	r1, #0
    b896:	2077      	movs	r0, #119	; 0x77
    b898:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA0, 0x00);
    b89a:	2100      	movs	r1, #0
    b89c:	2078      	movs	r0, #120	; 0x78
    b89e:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_CONTROL0, 0x00);
    b8a0:	2100      	movs	r1, #0
    b8a2:	206e      	movs	r0, #110	; 0x6e
    b8a4:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_CONTROL1, 0x00);
    b8a6:	2100      	movs	r1, #0
    b8a8:	206f      	movs	r0, #111	; 0x6f
    b8aa:	47a8      	blx	r5
		delay_us(250);
    b8ac:	20fa      	movs	r0, #250	; 0xfa
    b8ae:	4f2b      	ldr	r7, [pc, #172]	; (b95c <ring_init+0x274>)
    b8b0:	47b8      	blx	r7
		writeKSZreg(SPI_KSZ8794_ACCESS_CONTROL0, 0x10);
    b8b2:	2110      	movs	r1, #16
    b8b4:	206e      	movs	r0, #110	; 0x6e
    b8b6:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_CONTROL1, 0x00);
    b8b8:	2100      	movs	r1, #0
    b8ba:	206f      	movs	r0, #111	; 0x6f
    b8bc:	47a8      	blx	r5
		delay_us(50);
    b8be:	2032      	movs	r0, #50	; 0x32
    b8c0:	47b8      	blx	r7
		if ((!checkKSZreg(SPI_KSZ8794_ACCESS_DATA8, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA7, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA6, 0x61)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA5, 0x01)) ||
    b8c2:	2100      	movs	r1, #0
    b8c4:	2070      	movs	r0, #112	; 0x70
    b8c6:	4b26      	ldr	r3, [pc, #152]	; (b960 <ring_init+0x278>)
    b8c8:	4798      	blx	r3
    b8ca:	b120      	cbz	r0, b8d6 <ring_init+0x1ee>
    b8cc:	2100      	movs	r1, #0
    b8ce:	2071      	movs	r0, #113	; 0x71
    b8d0:	4b23      	ldr	r3, [pc, #140]	; (b960 <ring_init+0x278>)
    b8d2:	4798      	blx	r3
    b8d4:	b930      	cbnz	r0, b8e4 <ring_init+0x1fc>
			(!checkKSZreg(SPI_KSZ8794_ACCESS_DATA0, 0x00))) { xprintf("ERROR setting the STATIC MAC table with BPDU for pass-through node...\r\n"); }
    b8d6:	4826      	ldr	r0, [pc, #152]	; (b970 <ring_init+0x288>)
    b8d8:	4b1e      	ldr	r3, [pc, #120]	; (b954 <ring_init+0x26c>)
    b8da:	4798      	blx	r3
		mode = 0;
    b8dc:	2200      	movs	r2, #0
    b8de:	4b1b      	ldr	r3, [pc, #108]	; (b94c <ring_init+0x264>)
    b8e0:	705a      	strb	r2, [r3, #1]
    b8e2:	e74b      	b.n	b77c <ring_init+0x94>
		if ((!checkKSZreg(SPI_KSZ8794_ACCESS_DATA8, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA7, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA6, 0x61)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA5, 0x01)) ||
    b8e4:	2161      	movs	r1, #97	; 0x61
    b8e6:	2072      	movs	r0, #114	; 0x72
    b8e8:	4b1d      	ldr	r3, [pc, #116]	; (b960 <ring_init+0x278>)
    b8ea:	4798      	blx	r3
    b8ec:	2800      	cmp	r0, #0
    b8ee:	d0f2      	beq.n	b8d6 <ring_init+0x1ee>
    b8f0:	2101      	movs	r1, #1
    b8f2:	2073      	movs	r0, #115	; 0x73
    b8f4:	4b1a      	ldr	r3, [pc, #104]	; (b960 <ring_init+0x278>)
    b8f6:	4798      	blx	r3
    b8f8:	2800      	cmp	r0, #0
    b8fa:	d0ec      	beq.n	b8d6 <ring_init+0x1ee>
			(!checkKSZreg(SPI_KSZ8794_ACCESS_DATA4, 0x80)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA3, 0xC2)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA2, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA1, 0x00)) ||
    b8fc:	2180      	movs	r1, #128	; 0x80
    b8fe:	2074      	movs	r0, #116	; 0x74
    b900:	4b17      	ldr	r3, [pc, #92]	; (b960 <ring_init+0x278>)
    b902:	4798      	blx	r3
		if ((!checkKSZreg(SPI_KSZ8794_ACCESS_DATA8, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA7, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA6, 0x61)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA5, 0x01)) ||
    b904:	2800      	cmp	r0, #0
    b906:	d0e6      	beq.n	b8d6 <ring_init+0x1ee>
			(!checkKSZreg(SPI_KSZ8794_ACCESS_DATA4, 0x80)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA3, 0xC2)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA2, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA1, 0x00)) ||
    b908:	21c2      	movs	r1, #194	; 0xc2
    b90a:	2075      	movs	r0, #117	; 0x75
    b90c:	4b14      	ldr	r3, [pc, #80]	; (b960 <ring_init+0x278>)
    b90e:	4798      	blx	r3
    b910:	2800      	cmp	r0, #0
    b912:	d0e0      	beq.n	b8d6 <ring_init+0x1ee>
    b914:	2100      	movs	r1, #0
    b916:	2076      	movs	r0, #118	; 0x76
    b918:	4b11      	ldr	r3, [pc, #68]	; (b960 <ring_init+0x278>)
    b91a:	4798      	blx	r3
    b91c:	2800      	cmp	r0, #0
    b91e:	d0da      	beq.n	b8d6 <ring_init+0x1ee>
    b920:	2100      	movs	r1, #0
    b922:	2077      	movs	r0, #119	; 0x77
    b924:	4b0e      	ldr	r3, [pc, #56]	; (b960 <ring_init+0x278>)
    b926:	4798      	blx	r3
    b928:	2800      	cmp	r0, #0
    b92a:	d0d4      	beq.n	b8d6 <ring_init+0x1ee>
			(!checkKSZreg(SPI_KSZ8794_ACCESS_DATA0, 0x00))) { xprintf("ERROR setting the STATIC MAC table with BPDU for pass-through node...\r\n"); }
    b92c:	2100      	movs	r1, #0
    b92e:	2078      	movs	r0, #120	; 0x78
    b930:	4b0b      	ldr	r3, [pc, #44]	; (b960 <ring_init+0x278>)
    b932:	4798      	blx	r3
			(!checkKSZreg(SPI_KSZ8794_ACCESS_DATA4, 0x80)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA3, 0xC2)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA2, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA1, 0x00)) ||
    b934:	2800      	cmp	r0, #0
    b936:	d1d1      	bne.n	b8dc <ring_init+0x1f4>
    b938:	e7cd      	b.n	b8d6 <ring_init+0x1ee>
		mac_async_write(&ETHERNET_MAC_0, (uint8_t *)&wbuf[0], 68);
    b93a:	2244      	movs	r2, #68	; 0x44
    b93c:	490d      	ldr	r1, [pc, #52]	; (b974 <ring_init+0x28c>)
    b93e:	480e      	ldr	r0, [pc, #56]	; (b978 <ring_init+0x290>)
    b940:	4b0e      	ldr	r3, [pc, #56]	; (b97c <ring_init+0x294>)
    b942:	4798      	blx	r3
		xprintf("ETHERNET: Sent first BPDU...\r\n");
    b944:	480e      	ldr	r0, [pc, #56]	; (b980 <ring_init+0x298>)
    b946:	4b03      	ldr	r3, [pc, #12]	; (b954 <ring_init+0x26c>)
    b948:	4798      	blx	r3
	}
}
    b94a:	e75e      	b.n	b80a <ring_init+0x122>
    b94c:	20007270 	.word	0x20007270
    b950:	000113a4 	.word	0x000113a4
    b954:	0000031d 	.word	0x0000031d
    b958:	0000dbc9 	.word	0x0000dbc9
    b95c:	000015a9 	.word	0x000015a9
    b960:	0000db25 	.word	0x0000db25
    b964:	000113e8 	.word	0x000113e8
    b968:	000114ac 	.word	0x000114ac
    b96c:	0001142c 	.word	0x0001142c
    b970:	00011464 	.word	0x00011464
    b974:	20007274 	.word	0x20007274
    b978:	2000752c 	.word	0x2000752c
    b97c:	00001965 	.word	0x00001965
    b980:	000114dc 	.word	0x000114dc

0000b984 <ring_check>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: Called by the main loop execution and checks every time to see if if storms and BPDUs arrive. This manages the storm until it subsides
// Returns:     Nothing (NULL)
// *****************************************************************************************************************************************************************
unsigned char ring_check(unsigned char bpdu_arrived, unsigned char *storm_state, unsigned char *ringbreak)
{
    b984:	b570      	push	{r4, r5, r6, lr}
	unsigned char	sendrelearn;
	
	/* Bound-checks and assertions */
	if (!storm_state) {
    b986:	2900      	cmp	r1, #0
    b988:	d030      	beq.n	b9ec <ring_check+0x68>
    b98a:	4615      	mov	r5, r2
    b98c:	460e      	mov	r6, r1
		xprintf("ETHERNET: (!storm_state) ERROR\r\n");
		return 0;
	}
		
	if (!ringbreak) {
    b98e:	2a00      	cmp	r2, #0
    b990:	d031      	beq.n	b9f6 <ring_check+0x72>
	}
		
	sendrelearn = 0;

	/* Check which mode we are running, base-station or pass-though? */
	if (mode) {
    b992:	4b40      	ldr	r3, [pc, #256]	; (ba94 <ring_check+0x110>)
    b994:	785b      	ldrb	r3, [r3, #1]
    b996:	2b00      	cmp	r3, #0
    b998:	d074      	beq.n	ba84 <ring_check+0x100>
		/* If no BPDU arrived as yet, this indicates a ring break potentially */
		if (!bpdu_arrived) {
    b99a:	2800      	cmp	r0, #0
    b99c:	d130      	bne.n	ba00 <ring_check+0x7c>
			if ((first) || (!(*ringbreak))) {
    b99e:	4b3d      	ldr	r3, [pc, #244]	; (ba94 <ring_check+0x110>)
    b9a0:	781b      	ldrb	r3, [r3, #0]
    b9a2:	b913      	cbnz	r3, b9aa <ring_check+0x26>
    b9a4:	7813      	ldrb	r3, [r2, #0]
    b9a6:	2b00      	cmp	r3, #0
    b9a8:	d163      	bne.n	ba72 <ring_check+0xee>
				/* Enable Port 2 Management port back to normal */
				writeKSZreg(SPI_KSZ8794_PORT1CONTROL2, 0x07);
    b9aa:	2107      	movs	r1, #7
    b9ac:	2012      	movs	r0, #18
    b9ae:	4c3a      	ldr	r4, [pc, #232]	; (ba98 <ring_check+0x114>)
    b9b0:	47a0      	blx	r4
				writeKSZreg(SPI_KSZ8794_PORT2CONTROL2, 0x07);
    b9b2:	2107      	movs	r1, #7
    b9b4:	2022      	movs	r0, #34	; 0x22
    b9b6:	47a0      	blx	r4

				/* Clear the learning tables in the SWITCH */
				writeKSZreg(SPI_KSZ8794_GLOBAL0, 0x2D);
    b9b8:	212d      	movs	r1, #45	; 0x2d
    b9ba:	2002      	movs	r0, #2
    b9bc:	47a0      	blx	r4
				delay_us(250);
    b9be:	20fa      	movs	r0, #250	; 0xfa
    b9c0:	4b36      	ldr	r3, [pc, #216]	; (ba9c <ring_check+0x118>)
    b9c2:	4798      	blx	r3
				
				writeKSZreg(SPI_KSZ8794_PORT1CONTROL2, 0x06);
    b9c4:	2106      	movs	r1, #6
    b9c6:	2012      	movs	r0, #18
    b9c8:	47a0      	blx	r4
				writeKSZreg(SPI_KSZ8794_PORT2CONTROL2, 0x06);
    b9ca:	2106      	movs	r1, #6
    b9cc:	2022      	movs	r0, #34	; 0x22
    b9ce:	47a0      	blx	r4

				/* Set flags to indicate to the main-loop that we have a broken network topology */
				sendrelearn = 1;
				*ringbreak = 1;
    b9d0:	2301      	movs	r3, #1
    b9d2:	702b      	strb	r3, [r5, #0]
				
				xprintf("ETHERNET: [turning Ethernet <B> ON - RING BROKEN]...\r\n");
    b9d4:	4832      	ldr	r0, [pc, #200]	; (baa0 <ring_check+0x11c>)
    b9d6:	4b33      	ldr	r3, [pc, #204]	; (baa4 <ring_check+0x120>)
    b9d8:	4798      	blx	r3
			}
		}
	}

	/* Now check to see what the situation with broadcast storm entails */
	if (*storm_state) {
    b9da:	7833      	ldrb	r3, [r6, #0]
    b9dc:	2b00      	cmp	r3, #0
    b9de:	d12b      	bne.n	ba38 <ring_check+0xb4>
			*ringbreak = 0;
		}
	}
	else {
		/* However, if we have no such storm conditions, and we are a base-station, then send the next BPDU out */
		if (mode) {																										
    b9e0:	4b2c      	ldr	r3, [pc, #176]	; (ba94 <ring_check+0x110>)
    b9e2:	785b      	ldrb	r3, [r3, #1]
    b9e4:	2b00      	cmp	r3, #0
    b9e6:	d142      	bne.n	ba6e <ring_check+0xea>
    b9e8:	2401      	movs	r4, #1
    b9ea:	e04e      	b.n	ba8a <ring_check+0x106>
		xprintf("ETHERNET: (!storm_state) ERROR\r\n");
    b9ec:	482e      	ldr	r0, [pc, #184]	; (baa8 <ring_check+0x124>)
    b9ee:	4b2d      	ldr	r3, [pc, #180]	; (baa4 <ring_check+0x120>)
    b9f0:	4798      	blx	r3
		return 0;
    b9f2:	2400      	movs	r4, #0
    b9f4:	e04c      	b.n	ba90 <ring_check+0x10c>
		xprintf("ETHERNET: (!ringbreak) ERROR\r\n");
    b9f6:	482d      	ldr	r0, [pc, #180]	; (baac <ring_check+0x128>)
    b9f8:	4b2a      	ldr	r3, [pc, #168]	; (baa4 <ring_check+0x120>)
    b9fa:	4798      	blx	r3
		return 0;
    b9fc:	2400      	movs	r4, #0
    b9fe:	e047      	b.n	ba90 <ring_check+0x10c>
			if ((first) || (*ringbreak)) {
    ba00:	4b24      	ldr	r3, [pc, #144]	; (ba94 <ring_check+0x110>)
    ba02:	781b      	ldrb	r3, [r3, #0]
    ba04:	b913      	cbnz	r3, ba0c <ring_check+0x88>
    ba06:	7813      	ldrb	r3, [r2, #0]
    ba08:	2b00      	cmp	r3, #0
    ba0a:	d032      	beq.n	ba72 <ring_check+0xee>
				writeKSZreg(SPI_KSZ8794_PORT1CONTROL2, 0x07);
    ba0c:	2107      	movs	r1, #7
    ba0e:	2012      	movs	r0, #18
    ba10:	4c21      	ldr	r4, [pc, #132]	; (ba98 <ring_check+0x114>)
    ba12:	47a0      	blx	r4
				writeKSZreg(SPI_KSZ8794_PORT2CONTROL2, 0x01);
    ba14:	2101      	movs	r1, #1
    ba16:	2022      	movs	r0, #34	; 0x22
    ba18:	47a0      	blx	r4
				writeKSZreg(SPI_KSZ8794_GLOBAL0, 0x2D);
    ba1a:	212d      	movs	r1, #45	; 0x2d
    ba1c:	2002      	movs	r0, #2
    ba1e:	47a0      	blx	r4
				delay_us(250);
    ba20:	20fa      	movs	r0, #250	; 0xfa
    ba22:	4b1e      	ldr	r3, [pc, #120]	; (ba9c <ring_check+0x118>)
    ba24:	4798      	blx	r3
				writeKSZreg(SPI_KSZ8794_PORT1CONTROL2, 0x06);
    ba26:	2106      	movs	r1, #6
    ba28:	2012      	movs	r0, #18
    ba2a:	47a0      	blx	r4
				*ringbreak = 0;
    ba2c:	2300      	movs	r3, #0
    ba2e:	702b      	strb	r3, [r5, #0]
				xprintf("ETHERNET: [turning Ethernet <B> OFF - RING HEALED]...\r\n");
    ba30:	481f      	ldr	r0, [pc, #124]	; (bab0 <ring_check+0x12c>)
    ba32:	4b1c      	ldr	r3, [pc, #112]	; (baa4 <ring_check+0x120>)
    ba34:	4798      	blx	r3
    ba36:	e7d0      	b.n	b9da <ring_check+0x56>
    ba38:	2401      	movs	r4, #1
    ba3a:	e002      	b.n	ba42 <ring_check+0xbe>
	if (*storm_state) {
    ba3c:	2400      	movs	r4, #0
    ba3e:	e000      	b.n	ba42 <ring_check+0xbe>
	sendrelearn = 0;
    ba40:	461c      	mov	r4, r3
		xprintf("ETHERNET: [storm subsided]...\r\n");
    ba42:	481c      	ldr	r0, [pc, #112]	; (bab4 <ring_check+0x130>)
    ba44:	4b17      	ldr	r3, [pc, #92]	; (baa4 <ring_check+0x120>)
    ba46:	4798      	blx	r3
		*storm_state = 0;
    ba48:	2300      	movs	r3, #0
    ba4a:	7033      	strb	r3, [r6, #0]
		writeKSZreg(SPI_KSZ8794_PORT4CONTROL2, 0x06);
    ba4c:	2106      	movs	r1, #6
    ba4e:	2052      	movs	r0, #82	; 0x52
    ba50:	4b11      	ldr	r3, [pc, #68]	; (ba98 <ring_check+0x114>)
    ba52:	4798      	blx	r3
		if (mode) {
    ba54:	4b0f      	ldr	r3, [pc, #60]	; (ba94 <ring_check+0x110>)
    ba56:	785b      	ldrb	r3, [r3, #1]
    ba58:	b1bb      	cbz	r3, ba8a <ring_check+0x106>
			xprintf("ETHERNET: turning Ethernet <B> OFF because of storm - RING HEALING POSSIBILITY]...\r\n");
    ba5a:	4817      	ldr	r0, [pc, #92]	; (bab8 <ring_check+0x134>)
    ba5c:	4b11      	ldr	r3, [pc, #68]	; (baa4 <ring_check+0x120>)
    ba5e:	4798      	blx	r3
			writeKSZreg(SPI_KSZ8794_PORT2CONTROL2, 0x01);
    ba60:	2101      	movs	r1, #1
    ba62:	2022      	movs	r0, #34	; 0x22
    ba64:	4b0c      	ldr	r3, [pc, #48]	; (ba98 <ring_check+0x114>)
    ba66:	4798      	blx	r3
			*ringbreak = 0;
    ba68:	2300      	movs	r3, #0
    ba6a:	702b      	strb	r3, [r5, #0]
    ba6c:	e00d      	b.n	ba8a <ring_check+0x106>
    ba6e:	2401      	movs	r4, #1
    ba70:	e002      	b.n	ba78 <ring_check+0xf4>
	if (*storm_state) {
    ba72:	7834      	ldrb	r4, [r6, #0]
    ba74:	2c00      	cmp	r4, #0
    ba76:	d1e1      	bne.n	ba3c <ring_check+0xb8>
			mac_async_write(&ETHERNET_MAC_0, (uint8_t *)&wbuf[0], 68);
    ba78:	2244      	movs	r2, #68	; 0x44
    ba7a:	4910      	ldr	r1, [pc, #64]	; (babc <ring_check+0x138>)
    ba7c:	4810      	ldr	r0, [pc, #64]	; (bac0 <ring_check+0x13c>)
    ba7e:	4b11      	ldr	r3, [pc, #68]	; (bac4 <ring_check+0x140>)
    ba80:	4798      	blx	r3
    ba82:	e002      	b.n	ba8a <ring_check+0x106>
	if (*storm_state) {
    ba84:	780c      	ldrb	r4, [r1, #0]
    ba86:	2c00      	cmp	r4, #0
    ba88:	d1da      	bne.n	ba40 <ring_check+0xbc>
		
		/* Keep the storm flag de-asserted */
		storm_holdoff = 0;
	}

	first = 0;
    ba8a:	2200      	movs	r2, #0
    ba8c:	4b01      	ldr	r3, [pc, #4]	; (ba94 <ring_check+0x110>)
    ba8e:	701a      	strb	r2, [r3, #0]
	
	return sendrelearn;
    ba90:	4620      	mov	r0, r4
    ba92:	bd70      	pop	{r4, r5, r6, pc}
    ba94:	20007270 	.word	0x20007270
    ba98:	0000dbc9 	.word	0x0000dbc9
    ba9c:	000015a9 	.word	0x000015a9
    baa0:	00011540 	.word	0x00011540
    baa4:	0000031d 	.word	0x0000031d
    baa8:	000114fc 	.word	0x000114fc
    baac:	00011520 	.word	0x00011520
    bab0:	00011578 	.word	0x00011578
    bab4:	000115b0 	.word	0x000115b0
    bab8:	000115d0 	.word	0x000115d0
    babc:	20007274 	.word	0x20007274
    bac0:	2000752c 	.word	0x2000752c
    bac4:	00001965 	.word	0x00001965

0000bac8 <chksum>:

#if ! UIP_ARCH_CHKSUM
/*---------------------------------------------------------------------------*/
static u16_t
chksum(u16_t sum, const u8_t *data, u16_t len)
{
    bac8:	b470      	push	{r4, r5, r6}
  u16_t t;
  const u8_t *dataptr;
  const u8_t *last_byte;

  dataptr = data;
  last_byte = data + len - 1;
    baca:	1e56      	subs	r6, r2, #1
    bacc:	440e      	add	r6, r1
  
  while(dataptr < last_byte) {	/* At least two more bytes */
    bace:	42b1      	cmp	r1, r6
    bad0:	d213      	bcs.n	bafa <chksum+0x32>
    bad2:	460c      	mov	r4, r1
    t = (dataptr[0] << 8) + dataptr[1];
    bad4:	7825      	ldrb	r5, [r4, #0]
    bad6:	7863      	ldrb	r3, [r4, #1]
    bad8:	eb03 2305 	add.w	r3, r3, r5, lsl #8
    badc:	b29b      	uxth	r3, r3
    sum += t;
    bade:	4418      	add	r0, r3
    bae0:	b280      	uxth	r0, r0
    if(sum < t) {
    bae2:	4283      	cmp	r3, r0
      sum++;		/* carry */
    bae4:	bf84      	itt	hi
    bae6:	3001      	addhi	r0, #1
    bae8:	b280      	uxthhi	r0, r0
    }
    dataptr += 2;
    baea:	3402      	adds	r4, #2
  while(dataptr < last_byte) {	/* At least two more bytes */
    baec:	42a6      	cmp	r6, r4
    baee:	d8f1      	bhi.n	bad4 <chksum+0xc>
    baf0:	3a02      	subs	r2, #2
    baf2:	f022 0201 	bic.w	r2, r2, #1
    baf6:	3202      	adds	r2, #2
    baf8:	4411      	add	r1, r2
  }
  
  if(dataptr == last_byte) {
    bafa:	428e      	cmp	r6, r1
    bafc:	d001      	beq.n	bb02 <chksum+0x3a>
    }
  }

  /* Return sum in host byte order. */
  return sum;
}
    bafe:	bc70      	pop	{r4, r5, r6}
    bb00:	4770      	bx	lr
    t = (dataptr[0] << 8) + 0;
    bb02:	7833      	ldrb	r3, [r6, #0]
    bb04:	021b      	lsls	r3, r3, #8
    sum += t;
    bb06:	4418      	add	r0, r3
    bb08:	b280      	uxth	r0, r0
    if(sum < t) {
    bb0a:	4283      	cmp	r3, r0
      sum++;		/* carry */
    bb0c:	bf84      	itt	hi
    bb0e:	3001      	addhi	r0, #1
    bb10:	b280      	uxthhi	r0, r0
    bb12:	e7f4      	b.n	bafe <chksum+0x36>

0000bb14 <upper_layer_chksum>:
}
#endif
/*---------------------------------------------------------------------------*/
static u16_t
upper_layer_chksum(u8_t proto)
{
    bb14:	b570      	push	{r4, r5, r6, lr}
  u16_t sum;
  
#if UIP_CONF_IPV6
  upper_layer_len = (((u16_t)(BUF->len[0]) << 8) + BUF->len[1]);
#else /* UIP_CONF_IPV6 */
  upper_layer_len = (((u16_t)(BUF->len[0]) << 8) + BUF->len[1]) - UIP_IPH_LEN;
    bb16:	4d0e      	ldr	r5, [pc, #56]	; (bb50 <upper_layer_chksum+0x3c>)
    bb18:	7c2b      	ldrb	r3, [r5, #16]
    bb1a:	7c6c      	ldrb	r4, [r5, #17]
    bb1c:	3c14      	subs	r4, #20
    bb1e:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    bb22:	b2a4      	uxth	r4, r4
#endif /* UIP_CONF_IPV6 */
  
  /* First sum pseudoheader. */
  
  /* IP protocol and length fields. This addition cannot carry. */
  sum = upper_layer_len + proto;
    bb24:	4420      	add	r0, r4
  /* Sum IP source and destination addresses. */
  sum = chksum(sum, (u8_t *)&BUF->srcipaddr[0], 2 * sizeof(uip_ipaddr_t));
    bb26:	2208      	movs	r2, #8
    bb28:	f105 011a 	add.w	r1, r5, #26
    bb2c:	b280      	uxth	r0, r0
    bb2e:	4e09      	ldr	r6, [pc, #36]	; (bb54 <upper_layer_chksum+0x40>)
    bb30:	47b0      	blx	r6

  /* Sum TCP header and data. */
  sum = chksum(sum, &uip_buf[UIP_IPH_LEN + UIP_LLH_LEN],
    bb32:	4622      	mov	r2, r4
    bb34:	f105 0122 	add.w	r1, r5, #34	; 0x22
    bb38:	47b0      	blx	r6
	       upper_layer_len);
    
  return (sum == 0) ? 0xffff : htons(sum);
    bb3a:	b910      	cbnz	r0, bb42 <upper_layer_chksum+0x2e>
    bb3c:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
    bb40:	bd70      	pop	{r4, r5, r6, pc}
    bb42:	4603      	mov	r3, r0
}
/*---------------------------------------------------------------------------*/
u16_t
htons(u16_t val)
{
  return HTONS(val);
    bb44:	0a00      	lsrs	r0, r0, #8
    bb46:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
    bb4a:	b280      	uxth	r0, r0
    bb4c:	bd70      	pop	{r4, r5, r6, pc}
    bb4e:	bf00      	nop
    bb50:	20008654 	.word	0x20008654
    bb54:	0000bac9 	.word	0x0000bac9

0000bb58 <uip_add32>:
{
    bb58:	b470      	push	{r4, r5, r6}
  uip_acc32[3] = op32[3] + (op16 & 0xff);
    bb5a:	78c5      	ldrb	r5, [r0, #3]
    bb5c:	440d      	add	r5, r1
    bb5e:	b2ed      	uxtb	r5, r5
    bb60:	4c13      	ldr	r4, [pc, #76]	; (bbb0 <uip_add32+0x58>)
    bb62:	70e5      	strb	r5, [r4, #3]
  uip_acc32[2] = op32[2] + (op16 >> 8);
    bb64:	0a0e      	lsrs	r6, r1, #8
    bb66:	7883      	ldrb	r3, [r0, #2]
    bb68:	4433      	add	r3, r6
    bb6a:	b2db      	uxtb	r3, r3
    bb6c:	70a3      	strb	r3, [r4, #2]
  uip_acc32[1] = op32[1];
    bb6e:	7842      	ldrb	r2, [r0, #1]
    bb70:	7062      	strb	r2, [r4, #1]
  uip_acc32[0] = op32[0];
    bb72:	7800      	ldrb	r0, [r0, #0]
    bb74:	7020      	strb	r0, [r4, #0]
  if(uip_acc32[2] < (op16 >> 8)) {
    bb76:	b29c      	uxth	r4, r3
    bb78:	42a6      	cmp	r6, r4
    bb7a:	d906      	bls.n	bb8a <uip_add32+0x32>
    ++uip_acc32[1];
    bb7c:	3201      	adds	r2, #1
    bb7e:	b2d2      	uxtb	r2, r2
    bb80:	4c0b      	ldr	r4, [pc, #44]	; (bbb0 <uip_add32+0x58>)
    bb82:	7062      	strb	r2, [r4, #1]
    if(uip_acc32[1] == 0) {
    bb84:	b90a      	cbnz	r2, bb8a <uip_add32+0x32>
      ++uip_acc32[0];
    bb86:	3001      	adds	r0, #1
    bb88:	7020      	strb	r0, [r4, #0]
  if(uip_acc32[3] < (op16 & 0xff)) {
    bb8a:	b2c9      	uxtb	r1, r1
    bb8c:	428d      	cmp	r5, r1
    bb8e:	da0c      	bge.n	bbaa <uip_add32+0x52>
    ++uip_acc32[2];
    bb90:	3301      	adds	r3, #1
    bb92:	b2db      	uxtb	r3, r3
    bb94:	4a06      	ldr	r2, [pc, #24]	; (bbb0 <uip_add32+0x58>)
    bb96:	7093      	strb	r3, [r2, #2]
    if(uip_acc32[2] == 0) {
    bb98:	b93b      	cbnz	r3, bbaa <uip_add32+0x52>
      ++uip_acc32[1];
    bb9a:	7853      	ldrb	r3, [r2, #1]
    bb9c:	3301      	adds	r3, #1
    bb9e:	b2db      	uxtb	r3, r3
    bba0:	7053      	strb	r3, [r2, #1]
      if(uip_acc32[1] == 0) {
    bba2:	b913      	cbnz	r3, bbaa <uip_add32+0x52>
	++uip_acc32[0];
    bba4:	7813      	ldrb	r3, [r2, #0]
    bba6:	3301      	adds	r3, #1
    bba8:	7013      	strb	r3, [r2, #0]
}
    bbaa:	bc70      	pop	{r4, r5, r6}
    bbac:	4770      	bx	lr
    bbae:	bf00      	nop
    bbb0:	20008588 	.word	0x20008588

0000bbb4 <uip_add_rcv_nxt>:
{
    bbb4:	b510      	push	{r4, lr}
  uip_add32(uip_conn->rcv_nxt, n);
    bbb6:	4c09      	ldr	r4, [pc, #36]	; (bbdc <uip_add_rcv_nxt+0x28>)
    bbb8:	6823      	ldr	r3, [r4, #0]
    bbba:	4601      	mov	r1, r0
    bbbc:	f103 0008 	add.w	r0, r3, #8
    bbc0:	4b07      	ldr	r3, [pc, #28]	; (bbe0 <uip_add_rcv_nxt+0x2c>)
    bbc2:	4798      	blx	r3
  uip_conn->rcv_nxt[0] = uip_acc32[0];
    bbc4:	6823      	ldr	r3, [r4, #0]
    bbc6:	4a07      	ldr	r2, [pc, #28]	; (bbe4 <uip_add_rcv_nxt+0x30>)
    bbc8:	7811      	ldrb	r1, [r2, #0]
    bbca:	7219      	strb	r1, [r3, #8]
  uip_conn->rcv_nxt[1] = uip_acc32[1];
    bbcc:	7851      	ldrb	r1, [r2, #1]
    bbce:	7259      	strb	r1, [r3, #9]
  uip_conn->rcv_nxt[2] = uip_acc32[2];
    bbd0:	7891      	ldrb	r1, [r2, #2]
    bbd2:	7299      	strb	r1, [r3, #10]
  uip_conn->rcv_nxt[3] = uip_acc32[3];
    bbd4:	78d2      	ldrb	r2, [r2, #3]
    bbd6:	72da      	strb	r2, [r3, #11]
    bbd8:	bd10      	pop	{r4, pc}
    bbda:	bf00      	nop
    bbdc:	20008598 	.word	0x20008598
    bbe0:	0000bb59 	.word	0x0000bb59
    bbe4:	20008588 	.word	0x20008588

0000bbe8 <uip_ipchksum>:
{
    bbe8:	b510      	push	{r4, lr}
  sum = chksum(0, &uip_buf[UIP_LLH_LEN], UIP_IPH_LEN);
    bbea:	2214      	movs	r2, #20
    bbec:	4908      	ldr	r1, [pc, #32]	; (bc10 <uip_ipchksum+0x28>)
    bbee:	2000      	movs	r0, #0
    bbf0:	4b08      	ldr	r3, [pc, #32]	; (bc14 <uip_ipchksum+0x2c>)
    bbf2:	4798      	blx	r3
    bbf4:	4604      	mov	r4, r0
  DEBUG_PRINTF("uip_ipchksum: sum 0x%04x\n", sum);
    bbf6:	4601      	mov	r1, r0
    bbf8:	4807      	ldr	r0, [pc, #28]	; (bc18 <uip_ipchksum+0x30>)
    bbfa:	4b08      	ldr	r3, [pc, #32]	; (bc1c <uip_ipchksum+0x34>)
    bbfc:	4798      	blx	r3
  return (sum == 0) ? 0xffff : htons(sum);
    bbfe:	b914      	cbnz	r4, bc06 <uip_ipchksum+0x1e>
    bc00:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
    bc04:	bd10      	pop	{r4, pc}
  return HTONS(val);
    bc06:	0a20      	lsrs	r0, r4, #8
    bc08:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
    bc0c:	b280      	uxth	r0, r0
    bc0e:	bd10      	pop	{r4, pc}
    bc10:	20008662 	.word	0x20008662
    bc14:	0000bac9 	.word	0x0000bac9
    bc18:	00011628 	.word	0x00011628
    bc1c:	0000031d 	.word	0x0000031d

0000bc20 <uip_tcpchksum>:
{
    bc20:	b508      	push	{r3, lr}
  return upper_layer_chksum(UIP_PROTO_TCP);
    bc22:	2006      	movs	r0, #6
    bc24:	4b01      	ldr	r3, [pc, #4]	; (bc2c <uip_tcpchksum+0xc>)
    bc26:	4798      	blx	r3
}
    bc28:	bd08      	pop	{r3, pc}
    bc2a:	bf00      	nop
    bc2c:	0000bb15 	.word	0x0000bb15

0000bc30 <uip_udpchksum>:
{
    bc30:	b508      	push	{r3, lr}
  return upper_layer_chksum(UIP_PROTO_UDP);
    bc32:	2011      	movs	r0, #17
    bc34:	4b01      	ldr	r3, [pc, #4]	; (bc3c <uip_udpchksum+0xc>)
    bc36:	4798      	blx	r3
}
    bc38:	bd08      	pop	{r3, pc}
    bc3a:	bf00      	nop
    bc3c:	0000bb15 	.word	0x0000bb15

0000bc40 <uip_init>:
    uip_listenports[c] = 0;
    bc40:	2300      	movs	r3, #0
    bc42:	4a08      	ldr	r2, [pc, #32]	; (bc64 <uip_init+0x24>)
    bc44:	8013      	strh	r3, [r2, #0]
    uip_conns[c].tcpstateflags = UIP_CLOSED;
    bc46:	4a08      	ldr	r2, [pc, #32]	; (bc68 <uip_init+0x28>)
    bc48:	7653      	strb	r3, [r2, #25]
    bc4a:	4b08      	ldr	r3, [pc, #32]	; (bc6c <uip_init+0x2c>)
    bc4c:	f503 717a 	add.w	r1, r3, #1000	; 0x3e8
    uip_udp_conns[c].lport = 0;
    bc50:	2200      	movs	r2, #0
    bc52:	809a      	strh	r2, [r3, #4]
    bc54:	3364      	adds	r3, #100	; 0x64
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
    bc56:	4299      	cmp	r1, r3
    bc58:	d1fb      	bne.n	bc52 <uip_init+0x12>
    bc5a:	220a      	movs	r2, #10
    bc5c:	4b04      	ldr	r3, [pc, #16]	; (bc70 <uip_init+0x30>)
    bc5e:	709a      	strb	r2, [r3, #2]
    bc60:	4770      	bx	lr
    bc62:	bf00      	nop
    bc64:	20008610 	.word	0x20008610
    bc68:	2000859c 	.word	0x2000859c
    bc6c:	20008cfc 	.word	0x20008cfc
    bc70:	200072bc 	.word	0x200072bc

0000bc74 <uip_udp_new>:
{
    bc74:	b5f0      	push	{r4, r5, r6, r7, lr}
    bc76:	4b30      	ldr	r3, [pc, #192]	; (bd38 <uip_udp_new+0xc4>)
    bc78:	889f      	ldrh	r7, [r3, #4]
    if(uip_udp_conns[c].lport == htons(lastport)) {
    bc7a:	4b30      	ldr	r3, [pc, #192]	; (bd3c <uip_udp_new+0xc8>)
    bc7c:	f8b3 e004 	ldrh.w	lr, [r3, #4]
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
    bc80:	f04f 0c01 	mov.w	ip, #1
  ++lastport;
    bc84:	3701      	adds	r7, #1
    bc86:	b2bf      	uxth	r7, r7
    lastport = 4096;
    bc88:	f5b7 4ffa 	cmp.w	r7, #32000	; 0x7d00
    bc8c:	bf28      	it	cs
    bc8e:	f44f 5780 	movcs.w	r7, #4096	; 0x1000
  return HTONS(val);
    bc92:	0a3e      	lsrs	r6, r7, #8
    bc94:	ea46 2607 	orr.w	r6, r6, r7, lsl #8
    bc98:	b2b6      	uxth	r6, r6
    if(uip_udp_conns[c].lport == htons(lastport)) {
    bc9a:	45b6      	cmp	lr, r6
    bc9c:	d0f2      	beq.n	bc84 <uip_udp_new+0x10>
    bc9e:	4d27      	ldr	r5, [pc, #156]	; (bd3c <uip_udp_new+0xc8>)
    bca0:	462a      	mov	r2, r5
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
    bca2:	4663      	mov	r3, ip
    if(uip_udp_conns[c].lport == htons(lastport)) {
    bca4:	f8b2 4068 	ldrh.w	r4, [r2, #104]	; 0x68
    bca8:	42b4      	cmp	r4, r6
    bcaa:	d0eb      	beq.n	bc84 <uip_udp_new+0x10>
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
    bcac:	3301      	adds	r3, #1
    bcae:	b2db      	uxtb	r3, r3
    bcb0:	3264      	adds	r2, #100	; 0x64
    bcb2:	2b0a      	cmp	r3, #10
    bcb4:	d1f6      	bne.n	bca4 <uip_udp_new+0x30>
    bcb6:	4b20      	ldr	r3, [pc, #128]	; (bd38 <uip_udp_new+0xc4>)
    bcb8:	809f      	strh	r7, [r3, #4]
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
    bcba:	2200      	movs	r2, #0
    bcbc:	709a      	strb	r2, [r3, #2]
    if(uip_udp_conns[c].lport == 0) {
    bcbe:	f1be 0f00 	cmp.w	lr, #0
    bcc2:	d034      	beq.n	bd2e <uip_udp_new+0xba>
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
    bcc4:	2201      	movs	r2, #1
    bcc6:	4b1c      	ldr	r3, [pc, #112]	; (bd38 <uip_udp_new+0xc4>)
    bcc8:	709a      	strb	r2, [r3, #2]
    bcca:	4613      	mov	r3, r2
    bccc:	f04f 0e00 	mov.w	lr, #0
    bcd0:	4694      	mov	ip, r2
    if(uip_udp_conns[c].lport == 0) {
    bcd2:	461f      	mov	r7, r3
    bcd4:	f8b5 4068 	ldrh.w	r4, [r5, #104]	; 0x68
    bcd8:	b154      	cbz	r4, bcf0 <uip_udp_new+0x7c>
    bcda:	1c5a      	adds	r2, r3, #1
    bcdc:	b2d2      	uxtb	r2, r2
    bcde:	3301      	adds	r3, #1
    bce0:	3564      	adds	r5, #100	; 0x64
    bce2:	46e6      	mov	lr, ip
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
    bce4:	2b0a      	cmp	r3, #10
    bce6:	d1f4      	bne.n	bcd2 <uip_udp_new+0x5e>
    bce8:	4b13      	ldr	r3, [pc, #76]	; (bd38 <uip_udp_new+0xc4>)
    bcea:	709a      	strb	r2, [r3, #2]
    return 0;
    bcec:	2200      	movs	r2, #0
    bcee:	e019      	b.n	bd24 <uip_udp_new+0xb0>
    bcf0:	f1be 0f00 	cmp.w	lr, #0
    bcf4:	d118      	bne.n	bd28 <uip_udp_new+0xb4>
      conn = &uip_udp_conns[c];
    bcf6:	2364      	movs	r3, #100	; 0x64
    bcf8:	fb03 f307 	mul.w	r3, r3, r7
    bcfc:	4c0f      	ldr	r4, [pc, #60]	; (bd3c <uip_udp_new+0xc8>)
    bcfe:	191a      	adds	r2, r3, r4
  conn->lport = HTONS(lastport);
    bd00:	8096      	strh	r6, [r2, #4]
  conn->rport = rport;
    bd02:	80d1      	strh	r1, [r2, #6]
  if(ripaddr == NULL) {
    bd04:	b1a8      	cbz	r0, bd32 <uip_udp_new+0xbe>
    uip_ipaddr_copy(&conn->ripaddr, ripaddr);
    bd06:	8805      	ldrh	r5, [r0, #0]
    bd08:	490c      	ldr	r1, [pc, #48]	; (bd3c <uip_udp_new+0xc8>)
    bd0a:	2364      	movs	r3, #100	; 0x64
    bd0c:	fb03 f307 	mul.w	r3, r3, r7
    bd10:	18cc      	adds	r4, r1, r3
    bd12:	52cd      	strh	r5, [r1, r3]
    bd14:	8843      	ldrh	r3, [r0, #2]
    bd16:	8063      	strh	r3, [r4, #2]
  conn->ttl = UIP_TTL;
    bd18:	2164      	movs	r1, #100	; 0x64
    bd1a:	4b08      	ldr	r3, [pc, #32]	; (bd3c <uip_udp_new+0xc8>)
    bd1c:	fb01 3707 	mla	r7, r1, r7, r3
    bd20:	2340      	movs	r3, #64	; 0x40
    bd22:	723b      	strb	r3, [r7, #8]
}
    bd24:	4610      	mov	r0, r2
    bd26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bd28:	4b03      	ldr	r3, [pc, #12]	; (bd38 <uip_udp_new+0xc4>)
    bd2a:	709a      	strb	r2, [r3, #2]
    bd2c:	e7e3      	b.n	bcf6 <uip_udp_new+0x82>
    if(uip_udp_conns[c].lport == 0) {
    bd2e:	2700      	movs	r7, #0
    bd30:	e7e1      	b.n	bcf6 <uip_udp_new+0x82>
    memset(conn->ripaddr, 0, sizeof(uip_ipaddr_t));
    bd32:	2100      	movs	r1, #0
    bd34:	5119      	str	r1, [r3, r4]
    bd36:	e7ef      	b.n	bd18 <uip_udp_new+0xa4>
    bd38:	200072bc 	.word	0x200072bc
    bd3c:	20008cfc 	.word	0x20008cfc

0000bd40 <uip_process>:
{
    bd40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(flag == UIP_UDP_SEND_CONN) {
    bd42:	2804      	cmp	r0, #4
    bd44:	f000 8149 	beq.w	bfda <uip_process+0x29a>
  register struct uip_conn *uip_connr = uip_conn;
    bd48:	4b89      	ldr	r3, [pc, #548]	; (bf70 <uip_process+0x230>)
    bd4a:	681c      	ldr	r4, [r3, #0]
  uip_sappdata = uip_appdata = &uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN];
    bd4c:	4b89      	ldr	r3, [pc, #548]	; (bf74 <uip_process+0x234>)
    bd4e:	4a8a      	ldr	r2, [pc, #552]	; (bf78 <uip_process+0x238>)
    bd50:	6013      	str	r3, [r2, #0]
    bd52:	4a8a      	ldr	r2, [pc, #552]	; (bf7c <uip_process+0x23c>)
    bd54:	6013      	str	r3, [r2, #0]
  if(flag == UIP_POLL_REQUEST) {
    bd56:	2803      	cmp	r0, #3
    bd58:	d019      	beq.n	bd8e <uip_process+0x4e>
  } else if(flag == UIP_TIMER) {
    bd5a:	2802      	cmp	r0, #2
    bd5c:	f000 8088 	beq.w	be70 <uip_process+0x130>
  if(flag == UIP_UDP_TIMER) {
    bd60:	2805      	cmp	r0, #5
    bd62:	f000 8123 	beq.w	bfac <uip_process+0x26c>
  UIP_STAT(++uip_stat.ip.recv);
    bd66:	4a86      	ldr	r2, [pc, #536]	; (bf80 <uip_process+0x240>)
    bd68:	8853      	ldrh	r3, [r2, #2]
    bd6a:	3301      	adds	r3, #1
    bd6c:	8053      	strh	r3, [r2, #2]
  if(BUF->vhl != 0x45)  { /* IP version and header length. */
    bd6e:	4b85      	ldr	r3, [pc, #532]	; (bf84 <uip_process+0x244>)
    bd70:	7b9b      	ldrb	r3, [r3, #14]
    bd72:	2b45      	cmp	r3, #69	; 0x45
    bd74:	f000 8199 	beq.w	c0aa <STACK_SIZE+0xaa>
    UIP_STAT(++uip_stat.ip.drop);
    bd78:	4613      	mov	r3, r2
    bd7a:	8812      	ldrh	r2, [r2, #0]
    bd7c:	3201      	adds	r2, #1
    bd7e:	801a      	strh	r2, [r3, #0]
    UIP_STAT(++uip_stat.ip.vhlerr);
    bd80:	88da      	ldrh	r2, [r3, #6]
    bd82:	3201      	adds	r2, #1
    bd84:	80da      	strh	r2, [r3, #6]
    UIP_LOG("ip: invalid version or header length.");
    bd86:	4880      	ldr	r0, [pc, #512]	; (bf88 <uip_process+0x248>)
    bd88:	4b80      	ldr	r3, [pc, #512]	; (bf8c <uip_process+0x24c>)
    bd8a:	4798      	blx	r3
    goto drop;
    bd8c:	e004      	b.n	bd98 <uip_process+0x58>
    if((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_ESTABLISHED &&
    bd8e:	7e63      	ldrb	r3, [r4, #25]
    bd90:	f003 030f 	and.w	r3, r3, #15
    bd94:	2b03      	cmp	r3, #3
    bd96:	d005      	beq.n	bda4 <uip_process+0x64>
  uip_len = 0;
    bd98:	2300      	movs	r3, #0
    bd9a:	4a7d      	ldr	r2, [pc, #500]	; (bf90 <uip_process+0x250>)
    bd9c:	8013      	strh	r3, [r2, #0]
  uip_flags = 0;
    bd9e:	4a7d      	ldr	r2, [pc, #500]	; (bf94 <uip_process+0x254>)
    bda0:	7013      	strb	r3, [r2, #0]
  return;
    bda2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_ESTABLISHED &&
    bda4:	8a23      	ldrh	r3, [r4, #16]
    bda6:	2b00      	cmp	r3, #0
    bda8:	d1f6      	bne.n	bd98 <uip_process+0x58>
	uip_flags = UIP_POLL;
    bdaa:	2208      	movs	r2, #8
    bdac:	4b79      	ldr	r3, [pc, #484]	; (bf94 <uip_process+0x254>)
    bdae:	701a      	strb	r2, [r3, #0]
	UIP_APPCALL();
    bdb0:	4b79      	ldr	r3, [pc, #484]	; (bf98 <uip_process+0x258>)
    bdb2:	4798      	blx	r3
      if(uip_flags & UIP_ABORT) {
    bdb4:	4b77      	ldr	r3, [pc, #476]	; (bf94 <uip_process+0x254>)
    bdb6:	781b      	ldrb	r3, [r3, #0]
    bdb8:	f013 0f20 	tst.w	r3, #32
    bdbc:	f000 8525 	beq.w	c80a <STACK_SIZE+0x80a>
	uip_slen = 0;
    bdc0:	2300      	movs	r3, #0
    bdc2:	4a76      	ldr	r2, [pc, #472]	; (bf9c <uip_process+0x25c>)
    bdc4:	8013      	strh	r3, [r2, #0]
	uip_connr->tcpstateflags = UIP_CLOSED;
    bdc6:	7663      	strb	r3, [r4, #25]
	BUF->flags = TCP_RST | TCP_ACK;
    bdc8:	2214      	movs	r2, #20
    bdca:	4b6e      	ldr	r3, [pc, #440]	; (bf84 <uip_process+0x244>)
    bdcc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  uip_len = UIP_IPTCPH_LEN;
    bdd0:	2228      	movs	r2, #40	; 0x28
    bdd2:	4b6f      	ldr	r3, [pc, #444]	; (bf90 <uip_process+0x250>)
    bdd4:	801a      	strh	r2, [r3, #0]
  BUF->tcpoffset = (UIP_TCPH_LEN / 4) << 4;
    bdd6:	2250      	movs	r2, #80	; 0x50
    bdd8:	4b6a      	ldr	r3, [pc, #424]	; (bf84 <uip_process+0x244>)
    bdda:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  BUF->ackno[0] = uip_connr->rcv_nxt[0];
    bdde:	7a22      	ldrb	r2, [r4, #8]
    bde0:	4b68      	ldr	r3, [pc, #416]	; (bf84 <uip_process+0x244>)
    bde2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  BUF->ackno[1] = uip_connr->rcv_nxt[1];
    bde6:	7a62      	ldrb	r2, [r4, #9]
    bde8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  BUF->ackno[2] = uip_connr->rcv_nxt[2];
    bdec:	7aa2      	ldrb	r2, [r4, #10]
    bdee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  BUF->ackno[3] = uip_connr->rcv_nxt[3];
    bdf2:	7ae2      	ldrb	r2, [r4, #11]
    bdf4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  BUF->seqno[0] = uip_connr->snd_nxt[0];
    bdf8:	7b22      	ldrb	r2, [r4, #12]
    bdfa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  BUF->seqno[1] = uip_connr->snd_nxt[1];
    bdfe:	7b62      	ldrb	r2, [r4, #13]
    be00:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  BUF->seqno[2] = uip_connr->snd_nxt[2];
    be04:	7ba2      	ldrb	r2, [r4, #14]
    be06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  BUF->seqno[3] = uip_connr->snd_nxt[3];
    be0a:	7be2      	ldrb	r2, [r4, #15]
    be0c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  BUF->proto = UIP_PROTO_TCP;
    be10:	2206      	movs	r2, #6
    be12:	75da      	strb	r2, [r3, #23]
  BUF->srcport  = uip_connr->lport;
    be14:	88a2      	ldrh	r2, [r4, #4]
    be16:	845a      	strh	r2, [r3, #34]	; 0x22
  BUF->destport = uip_connr->rport;
    be18:	88e2      	ldrh	r2, [r4, #6]
    be1a:	849a      	strh	r2, [r3, #36]	; 0x24
  uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
    be1c:	4a60      	ldr	r2, [pc, #384]	; (bfa0 <uip_process+0x260>)
    be1e:	8811      	ldrh	r1, [r2, #0]
    be20:	8359      	strh	r1, [r3, #26]
    be22:	8852      	ldrh	r2, [r2, #2]
    be24:	839a      	strh	r2, [r3, #28]
  uip_ipaddr_copy(BUF->destipaddr, uip_connr->ripaddr);
    be26:	8822      	ldrh	r2, [r4, #0]
    be28:	83da      	strh	r2, [r3, #30]
    be2a:	8862      	ldrh	r2, [r4, #2]
    be2c:	841a      	strh	r2, [r3, #32]
  if(uip_connr->tcpstateflags & UIP_STOPPED) {
    be2e:	7e63      	ldrb	r3, [r4, #25]
    be30:	f013 0f10 	tst.w	r3, #16
    be34:	f000 85c1 	beq.w	c9ba <STACK_SIZE+0x9ba>
    BUF->wnd[0] = BUF->wnd[1] = 0;
    be38:	4b52      	ldr	r3, [pc, #328]	; (bf84 <uip_process+0x244>)
    be3a:	2200      	movs	r2, #0
    be3c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    be40:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  BUF->ttl = UIP_TTL;
    be44:	4c4f      	ldr	r4, [pc, #316]	; (bf84 <uip_process+0x244>)
    be46:	2340      	movs	r3, #64	; 0x40
    be48:	75a3      	strb	r3, [r4, #22]
  BUF->len[0] = (uip_len >> 8);
    be4a:	4b51      	ldr	r3, [pc, #324]	; (bf90 <uip_process+0x250>)
    be4c:	881b      	ldrh	r3, [r3, #0]
    be4e:	0a1a      	lsrs	r2, r3, #8
    be50:	7422      	strb	r2, [r4, #16]
  BUF->len[1] = (uip_len & 0xff);
    be52:	7463      	strb	r3, [r4, #17]
  BUF->urgp[0] = BUF->urgp[1] = 0;
    be54:	2300      	movs	r3, #0
    be56:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    be5a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  BUF->tcpchksum = 0;
    be5e:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    be62:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  BUF->tcpchksum = ~(uip_tcpchksum());
    be66:	4b4f      	ldr	r3, [pc, #316]	; (bfa4 <uip_process+0x264>)
    be68:	4798      	blx	r3
    be6a:	43c0      	mvns	r0, r0
    be6c:	8660      	strh	r0, [r4, #50]	; 0x32
    be6e:	e0ec      	b.n	c04a <STACK_SIZE+0x4a>
    if(++iss[3] == 0) {
    be70:	4a4d      	ldr	r2, [pc, #308]	; (bfa8 <uip_process+0x268>)
    be72:	7ad3      	ldrb	r3, [r2, #11]
    be74:	3301      	adds	r3, #1
    be76:	b2db      	uxtb	r3, r3
    be78:	72d3      	strb	r3, [r2, #11]
    be7a:	b963      	cbnz	r3, be96 <uip_process+0x156>
      if(++iss[2] == 0) {
    be7c:	7a93      	ldrb	r3, [r2, #10]
    be7e:	3301      	adds	r3, #1
    be80:	b2db      	uxtb	r3, r3
    be82:	7293      	strb	r3, [r2, #10]
    be84:	b93b      	cbnz	r3, be96 <uip_process+0x156>
	if(++iss[1] == 0) {
    be86:	7a53      	ldrb	r3, [r2, #9]
    be88:	3301      	adds	r3, #1
    be8a:	b2db      	uxtb	r3, r3
    be8c:	7253      	strb	r3, [r2, #9]
    be8e:	b913      	cbnz	r3, be96 <uip_process+0x156>
	  ++iss[0];
    be90:	7a13      	ldrb	r3, [r2, #8]
    be92:	3301      	adds	r3, #1
    be94:	7213      	strb	r3, [r2, #8]
    uip_len = 0;
    be96:	2300      	movs	r3, #0
    be98:	4a3d      	ldr	r2, [pc, #244]	; (bf90 <uip_process+0x250>)
    be9a:	8013      	strh	r3, [r2, #0]
    uip_slen = 0;
    be9c:	4a3f      	ldr	r2, [pc, #252]	; (bf9c <uip_process+0x25c>)
    be9e:	8013      	strh	r3, [r2, #0]
    if(uip_connr->tcpstateflags == UIP_TIME_WAIT ||
    bea0:	7e63      	ldrb	r3, [r4, #25]
    bea2:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
    bea6:	2a05      	cmp	r2, #5
    bea8:	d038      	beq.n	bf1c <uip_process+0x1dc>
    } else if(uip_connr->tcpstateflags != UIP_CLOSED) {
    beaa:	2b00      	cmp	r3, #0
    beac:	f43f af74 	beq.w	bd98 <uip_process+0x58>
      if(uip_outstanding(uip_connr)) {
    beb0:	8a22      	ldrh	r2, [r4, #16]
    beb2:	2a00      	cmp	r2, #0
    beb4:	d051      	beq.n	bf5a <uip_process+0x21a>
	if(uip_connr->timer-- == 0) {
    beb6:	7ea2      	ldrb	r2, [r4, #26]
    beb8:	1e51      	subs	r1, r2, #1
    beba:	76a1      	strb	r1, [r4, #26]
    bebc:	2a00      	cmp	r2, #0
    bebe:	f47f af6b 	bne.w	bd98 <uip_process+0x58>
	  if(uip_connr->nrtx == UIP_MAXRTX ||
    bec2:	7ee2      	ldrb	r2, [r4, #27]
    bec4:	2a08      	cmp	r2, #8
    bec6:	d035      	beq.n	bf34 <uip_process+0x1f4>
	     ((uip_connr->tcpstateflags == UIP_SYN_SENT ||
    bec8:	3b01      	subs	r3, #1
	  if(uip_connr->nrtx == UIP_MAXRTX ||
    beca:	b2db      	uxtb	r3, r3
    becc:	2b01      	cmp	r3, #1
    bece:	d92f      	bls.n	bf30 <uip_process+0x1f0>
	  uip_connr->timer = UIP_RTO << (uip_connr->nrtx > 4?
    bed0:	2a04      	cmp	r2, #4
    bed2:	bf9a      	itte	ls
    bed4:	2303      	movls	r3, #3
    bed6:	4093      	lslls	r3, r2
    bed8:	2330      	movhi	r3, #48	; 0x30
    beda:	76a3      	strb	r3, [r4, #26]
	  ++(uip_connr->nrtx);
    bedc:	3201      	adds	r2, #1
    bede:	76e2      	strb	r2, [r4, #27]
	  UIP_STAT(++uip_stat.tcp.rexmit);
    bee0:	4a27      	ldr	r2, [pc, #156]	; (bf80 <uip_process+0x240>)
    bee2:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
    bee4:	3301      	adds	r3, #1
    bee6:	84d3      	strh	r3, [r2, #38]	; 0x26
	  switch(uip_connr->tcpstateflags & UIP_TS_MASK) {
    bee8:	7e63      	ldrb	r3, [r4, #25]
    beea:	f003 030f 	and.w	r3, r3, #15
    beee:	3b01      	subs	r3, #1
    bef0:	2b07      	cmp	r3, #7
    bef2:	f63f af51 	bhi.w	bd98 <uip_process+0x58>
    bef6:	a201      	add	r2, pc, #4	; (adr r2, befc <uip_process+0x1bc>)
    bef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    befc:	0000c50d 	.word	0x0000c50d
    bf00:	0000bd99 	.word	0x0000bd99
    bf04:	0000bf4d 	.word	0x0000bf4d
    bf08:	0000c779 	.word	0x0000c779
    bf0c:	0000bd99 	.word	0x0000bd99
    bf10:	0000c779 	.word	0x0000c779
    bf14:	0000bd99 	.word	0x0000bd99
    bf18:	0000c779 	.word	0x0000c779
      ++(uip_connr->timer);
    bf1c:	7ea3      	ldrb	r3, [r4, #26]
    bf1e:	3301      	adds	r3, #1
    bf20:	b2db      	uxtb	r3, r3
    bf22:	76a3      	strb	r3, [r4, #26]
      if(uip_connr->timer == UIP_TIME_WAIT_TIMEOUT) {
    bf24:	2b78      	cmp	r3, #120	; 0x78
    bf26:	f47f af37 	bne.w	bd98 <uip_process+0x58>
	uip_connr->tcpstateflags = UIP_CLOSED;
    bf2a:	2300      	movs	r3, #0
    bf2c:	7663      	strb	r3, [r4, #25]
    bf2e:	e733      	b.n	bd98 <uip_process+0x58>
	       uip_connr->tcpstateflags == UIP_SYN_RCVD) &&
    bf30:	2a05      	cmp	r2, #5
    bf32:	d1cd      	bne.n	bed0 <uip_process+0x190>
	    uip_connr->tcpstateflags = UIP_CLOSED;
    bf34:	2300      	movs	r3, #0
    bf36:	7663      	strb	r3, [r4, #25]
	    uip_flags = UIP_TIMEDOUT;
    bf38:	2280      	movs	r2, #128	; 0x80
    bf3a:	4b16      	ldr	r3, [pc, #88]	; (bf94 <uip_process+0x254>)
    bf3c:	701a      	strb	r2, [r3, #0]
	    UIP_APPCALL();
    bf3e:	4b16      	ldr	r3, [pc, #88]	; (bf98 <uip_process+0x258>)
    bf40:	4798      	blx	r3
	    BUF->flags = TCP_RST | TCP_ACK;
    bf42:	2214      	movs	r2, #20
    bf44:	4b0f      	ldr	r3, [pc, #60]	; (bf84 <uip_process+0x244>)
    bf46:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	    goto tcp_send_nodata;
    bf4a:	e741      	b.n	bdd0 <uip_process+0x90>
	    uip_flags = UIP_REXMIT;
    bf4c:	2204      	movs	r2, #4
    bf4e:	4b11      	ldr	r3, [pc, #68]	; (bf94 <uip_process+0x254>)
    bf50:	701a      	strb	r2, [r3, #0]
	    UIP_APPCALL();
    bf52:	4b11      	ldr	r3, [pc, #68]	; (bf98 <uip_process+0x258>)
    bf54:	4798      	blx	r3
	    goto apprexmit;
    bf56:	f000 bc91 	b.w	c87c <STACK_SIZE+0x87c>
      } else if((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_ESTABLISHED) {
    bf5a:	f003 030f 	and.w	r3, r3, #15
    bf5e:	2b03      	cmp	r3, #3
    bf60:	f47f af1a 	bne.w	bd98 <uip_process+0x58>
	uip_flags = UIP_POLL;
    bf64:	2208      	movs	r2, #8
    bf66:	4b0b      	ldr	r3, [pc, #44]	; (bf94 <uip_process+0x254>)
    bf68:	701a      	strb	r2, [r3, #0]
	UIP_APPCALL();
    bf6a:	4b0b      	ldr	r3, [pc, #44]	; (bf98 <uip_process+0x258>)
    bf6c:	4798      	blx	r3
	goto appsend;
    bf6e:	e721      	b.n	bdb4 <uip_process+0x74>
    bf70:	20008598 	.word	0x20008598
    bf74:	2000868a 	.word	0x2000868a
    bf78:	20008594 	.word	0x20008594
    bf7c:	20008584 	.word	0x20008584
    bf80:	20008618 	.word	0x20008618
    bf84:	20008654 	.word	0x20008654
    bf88:	00011644 	.word	0x00011644
    bf8c:	0000dc25 	.word	0x0000dc25
    bf90:	20008580 	.word	0x20008580
    bf94:	2000858c 	.word	0x2000858c
    bf98:	0000dc11 	.word	0x0000dc11
    bf9c:	20008cfa 	.word	0x20008cfa
    bfa0:	20008650 	.word	0x20008650
    bfa4:	0000bc21 	.word	0x0000bc21
    bfa8:	200072bc 	.word	0x200072bc
    if(uip_udp_conn->lport != 0) {
    bfac:	4b9a      	ldr	r3, [pc, #616]	; (c218 <STACK_SIZE+0x218>)
    bfae:	681b      	ldr	r3, [r3, #0]
    bfb0:	889b      	ldrh	r3, [r3, #4]
    bfb2:	2b00      	cmp	r3, #0
    bfb4:	f43f aef0 	beq.w	bd98 <uip_process+0x58>
      uip_conn = NULL;
    bfb8:	2300      	movs	r3, #0
    bfba:	4a98      	ldr	r2, [pc, #608]	; (c21c <STACK_SIZE+0x21c>)
    bfbc:	6013      	str	r3, [r2, #0]
      uip_sappdata = uip_appdata = &uip_buf[UIP_LLH_LEN + UIP_IPUDPH_LEN];
    bfbe:	4a98      	ldr	r2, [pc, #608]	; (c220 <STACK_SIZE+0x220>)
    bfc0:	4998      	ldr	r1, [pc, #608]	; (c224 <STACK_SIZE+0x224>)
    bfc2:	600a      	str	r2, [r1, #0]
    bfc4:	4998      	ldr	r1, [pc, #608]	; (c228 <STACK_SIZE+0x228>)
    bfc6:	600a      	str	r2, [r1, #0]
      uip_len = uip_slen = 0;
    bfc8:	4a98      	ldr	r2, [pc, #608]	; (c22c <STACK_SIZE+0x22c>)
    bfca:	8013      	strh	r3, [r2, #0]
    bfcc:	4a98      	ldr	r2, [pc, #608]	; (c230 <STACK_SIZE+0x230>)
    bfce:	8013      	strh	r3, [r2, #0]
      uip_flags = UIP_POLL;
    bfd0:	2208      	movs	r2, #8
    bfd2:	4b98      	ldr	r3, [pc, #608]	; (c234 <STACK_SIZE+0x234>)
    bfd4:	701a      	strb	r2, [r3, #0]
      UIP_UDP_APPCALL();
    bfd6:	4b98      	ldr	r3, [pc, #608]	; (c238 <STACK_SIZE+0x238>)
    bfd8:	4798      	blx	r3
  if(uip_slen == 0) {
    bfda:	4b94      	ldr	r3, [pc, #592]	; (c22c <STACK_SIZE+0x22c>)
    bfdc:	881a      	ldrh	r2, [r3, #0]
    bfde:	2a00      	cmp	r2, #0
    bfe0:	f43f aeda 	beq.w	bd98 <uip_process+0x58>
  uip_len = uip_slen + UIP_IPUDPH_LEN;
    bfe4:	f102 011c 	add.w	r1, r2, #28
    bfe8:	b289      	uxth	r1, r1
    bfea:	4b91      	ldr	r3, [pc, #580]	; (c230 <STACK_SIZE+0x230>)
    bfec:	8019      	strh	r1, [r3, #0]
  BUF->len[0] = (uip_len >> 8);
    bfee:	4b93      	ldr	r3, [pc, #588]	; (c23c <STACK_SIZE+0x23c>)
    bff0:	0a08      	lsrs	r0, r1, #8
    bff2:	7418      	strb	r0, [r3, #16]
  BUF->len[1] = (uip_len & 0xff);
    bff4:	7459      	strb	r1, [r3, #17]
  BUF->ttl = uip_udp_conn->ttl;
    bff6:	4988      	ldr	r1, [pc, #544]	; (c218 <STACK_SIZE+0x218>)
    bff8:	6809      	ldr	r1, [r1, #0]
    bffa:	7a08      	ldrb	r0, [r1, #8]
    bffc:	7598      	strb	r0, [r3, #22]
  BUF->proto = UIP_PROTO_UDP;
    bffe:	2011      	movs	r0, #17
    c000:	75d8      	strb	r0, [r3, #23]
  UDPBUF->udplen = HTONS(uip_slen + UIP_UDPH_LEN);
    c002:	3208      	adds	r2, #8
    c004:	b292      	uxth	r2, r2
    c006:	0a10      	lsrs	r0, r2, #8
    c008:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
    c00c:	84da      	strh	r2, [r3, #38]	; 0x26
  UDPBUF->udpchksum = 0;
    c00e:	2200      	movs	r2, #0
    c010:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    c014:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  BUF->srcport  = uip_udp_conn->lport;
    c018:	888a      	ldrh	r2, [r1, #4]
    c01a:	845a      	strh	r2, [r3, #34]	; 0x22
  BUF->destport = uip_udp_conn->rport;
    c01c:	88ca      	ldrh	r2, [r1, #6]
    c01e:	849a      	strh	r2, [r3, #36]	; 0x24
  uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
    c020:	4a87      	ldr	r2, [pc, #540]	; (c240 <STACK_SIZE+0x240>)
    c022:	8810      	ldrh	r0, [r2, #0]
    c024:	8358      	strh	r0, [r3, #26]
    c026:	8852      	ldrh	r2, [r2, #2]
    c028:	839a      	strh	r2, [r3, #28]
  uip_ipaddr_copy(BUF->destipaddr, uip_udp_conn->ripaddr);
    c02a:	880a      	ldrh	r2, [r1, #0]
    c02c:	83da      	strh	r2, [r3, #30]
    c02e:	884a      	ldrh	r2, [r1, #2]
    c030:	841a      	strh	r2, [r3, #32]
  uip_appdata = &uip_buf[UIP_LLH_LEN + UIP_IPTCPH_LEN];
    c032:	3336      	adds	r3, #54	; 0x36
    c034:	4a7b      	ldr	r2, [pc, #492]	; (c224 <STACK_SIZE+0x224>)
    c036:	6013      	str	r3, [r2, #0]
  UDPBUF->udpchksum = ~(uip_udpchksum());
    c038:	4b82      	ldr	r3, [pc, #520]	; (c244 <STACK_SIZE+0x244>)
    c03a:	4798      	blx	r3
    c03c:	43c0      	mvns	r0, r0
    c03e:	b280      	uxth	r0, r0
  if(UDPBUF->udpchksum == 0) {
    c040:	2800      	cmp	r0, #0
    c042:	f000 8151 	beq.w	c2e8 <STACK_SIZE+0x2e8>
  UDPBUF->udpchksum = ~(uip_udpchksum());
    c046:	4b7d      	ldr	r3, [pc, #500]	; (c23c <STACK_SIZE+0x23c>)
    c048:	8518      	strh	r0, [r3, #40]	; 0x28
  BUF->vhl = 0x45;
    c04a:	4c7c      	ldr	r4, [pc, #496]	; (c23c <STACK_SIZE+0x23c>)
    c04c:	2345      	movs	r3, #69	; 0x45
    c04e:	73a3      	strb	r3, [r4, #14]
  BUF->tos = 0;
    c050:	2200      	movs	r2, #0
    c052:	73e2      	strb	r2, [r4, #15]
  BUF->ipoffset[0] = BUF->ipoffset[1] = 0;
    c054:	7562      	strb	r2, [r4, #21]
    c056:	7522      	strb	r2, [r4, #20]
  ++ipid;
    c058:	497b      	ldr	r1, [pc, #492]	; (c248 <STACK_SIZE+0x248>)
    c05a:	880b      	ldrh	r3, [r1, #0]
    c05c:	3301      	adds	r3, #1
    c05e:	b29b      	uxth	r3, r3
    c060:	800b      	strh	r3, [r1, #0]
  BUF->ipid[0] = ipid >> 8;
    c062:	0a19      	lsrs	r1, r3, #8
    c064:	74a1      	strb	r1, [r4, #18]
  BUF->ipid[1] = ipid & 0xff;
    c066:	74e3      	strb	r3, [r4, #19]
  BUF->ipchksum = 0;
    c068:	7622      	strb	r2, [r4, #24]
    c06a:	7662      	strb	r2, [r4, #25]
  BUF->ipchksum = ~(uip_ipchksum());
    c06c:	4d77      	ldr	r5, [pc, #476]	; (c24c <STACK_SIZE+0x24c>)
    c06e:	47a8      	blx	r5
    c070:	43c0      	mvns	r0, r0
    c072:	8320      	strh	r0, [r4, #24]
  DEBUG_PRINTF("uip ip_send_nolen: chkecum 0x%04x\n", uip_ipchksum());
    c074:	47a8      	blx	r5
    c076:	4601      	mov	r1, r0
    c078:	4875      	ldr	r0, [pc, #468]	; (c250 <STACK_SIZE+0x250>)
    c07a:	4b76      	ldr	r3, [pc, #472]	; (c254 <STACK_SIZE+0x254>)
    c07c:	4798      	blx	r3
  UIP_STAT(++uip_stat.tcp.sent);
    c07e:	4a76      	ldr	r2, [pc, #472]	; (c258 <STACK_SIZE+0x258>)
    c080:	8bd3      	ldrh	r3, [r2, #30]
    c082:	3301      	adds	r3, #1
    c084:	83d3      	strh	r3, [r2, #30]
  DEBUG_PRINTF("Sending packet with length %d (%d)\n", uip_len,
    c086:	4b6d      	ldr	r3, [pc, #436]	; (c23c <STACK_SIZE+0x23c>)
    c088:	7c1a      	ldrb	r2, [r3, #16]
    c08a:	7c5b      	ldrb	r3, [r3, #17]
    c08c:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
    c090:	4b67      	ldr	r3, [pc, #412]	; (c230 <STACK_SIZE+0x230>)
    c092:	8819      	ldrh	r1, [r3, #0]
    c094:	4871      	ldr	r0, [pc, #452]	; (c25c <STACK_SIZE+0x25c>)
    c096:	4b6f      	ldr	r3, [pc, #444]	; (c254 <STACK_SIZE+0x254>)
    c098:	4798      	blx	r3
  UIP_STAT(++uip_stat.ip.sent);
    c09a:	4a6f      	ldr	r2, [pc, #444]	; (c258 <STACK_SIZE+0x258>)
    c09c:	8893      	ldrh	r3, [r2, #4]
    c09e:	3301      	adds	r3, #1
    c0a0:	8093      	strh	r3, [r2, #4]
  uip_flags = 0;
    c0a2:	2200      	movs	r2, #0
    c0a4:	4b63      	ldr	r3, [pc, #396]	; (c234 <STACK_SIZE+0x234>)
    c0a6:	701a      	strb	r2, [r3, #0]
  return;
    c0a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if((BUF->len[0] << 8) + BUF->len[1] <= uip_len) {
    c0aa:	4a64      	ldr	r2, [pc, #400]	; (c23c <STACK_SIZE+0x23c>)
    c0ac:	7c11      	ldrb	r1, [r2, #16]
    c0ae:	7c53      	ldrb	r3, [r2, #17]
    c0b0:	eb03 2001 	add.w	r0, r3, r1, lsl #8
    c0b4:	4a5e      	ldr	r2, [pc, #376]	; (c230 <STACK_SIZE+0x230>)
    c0b6:	8812      	ldrh	r2, [r2, #0]
    c0b8:	4290      	cmp	r0, r2
    c0ba:	dc14      	bgt.n	c0e6 <STACK_SIZE+0xe6>
    uip_len = (BUF->len[0] << 8) + BUF->len[1];
    c0bc:	4a5c      	ldr	r2, [pc, #368]	; (c230 <STACK_SIZE+0x230>)
    c0be:	8010      	strh	r0, [r2, #0]
  if((BUF->ipoffset[0] & 0x3f) != 0 ||
    c0c0:	4b5e      	ldr	r3, [pc, #376]	; (c23c <STACK_SIZE+0x23c>)
    c0c2:	7d1b      	ldrb	r3, [r3, #20]
    c0c4:	f013 0f3f 	tst.w	r3, #63	; 0x3f
    c0c8:	d102      	bne.n	c0d0 <STACK_SIZE+0xd0>
     BUF->ipoffset[1] != 0) {
    c0ca:	4b5c      	ldr	r3, [pc, #368]	; (c23c <STACK_SIZE+0x23c>)
    c0cc:	7d5c      	ldrb	r4, [r3, #21]
  if((BUF->ipoffset[0] & 0x3f) != 0 ||
    c0ce:	b174      	cbz	r4, c0ee <STACK_SIZE+0xee>
    UIP_STAT(++uip_stat.ip.drop);
    c0d0:	4b61      	ldr	r3, [pc, #388]	; (c258 <STACK_SIZE+0x258>)
    c0d2:	881a      	ldrh	r2, [r3, #0]
    c0d4:	3201      	adds	r2, #1
    c0d6:	801a      	strh	r2, [r3, #0]
    UIP_STAT(++uip_stat.ip.fragerr);
    c0d8:	899a      	ldrh	r2, [r3, #12]
    c0da:	3201      	adds	r2, #1
    c0dc:	819a      	strh	r2, [r3, #12]
    UIP_LOG("ip: fragment dropped.");
    c0de:	4860      	ldr	r0, [pc, #384]	; (c260 <STACK_SIZE+0x260>)
    c0e0:	4b60      	ldr	r3, [pc, #384]	; (c264 <STACK_SIZE+0x264>)
    c0e2:	4798      	blx	r3
    goto drop;
    c0e4:	e658      	b.n	bd98 <uip_process+0x58>
    UIP_LOG("ip: packet shorter than reported in IP header.");
    c0e6:	4860      	ldr	r0, [pc, #384]	; (c268 <STACK_SIZE+0x268>)
    c0e8:	4b5e      	ldr	r3, [pc, #376]	; (c264 <STACK_SIZE+0x264>)
    c0ea:	4798      	blx	r3
    goto drop;
    c0ec:	e654      	b.n	bd98 <uip_process+0x58>
  if(uip_ipaddr_cmp(uip_hostaddr, all_zeroes_addr)) {
    c0ee:	4b54      	ldr	r3, [pc, #336]	; (c240 <STACK_SIZE+0x240>)
    c0f0:	881b      	ldrh	r3, [r3, #0]
    c0f2:	b913      	cbnz	r3, c0fa <STACK_SIZE+0xfa>
    c0f4:	4a52      	ldr	r2, [pc, #328]	; (c240 <STACK_SIZE+0x240>)
    c0f6:	8852      	ldrh	r2, [r2, #2]
    c0f8:	b172      	cbz	r2, c118 <STACK_SIZE+0x118>
    if(!uip_ipaddr_cmp(BUF->destipaddr, uip_hostaddr)) {
    c0fa:	4a50      	ldr	r2, [pc, #320]	; (c23c <STACK_SIZE+0x23c>)
    c0fc:	8bd2      	ldrh	r2, [r2, #30]
    c0fe:	429a      	cmp	r2, r3
    c100:	d004      	beq.n	c10c <STACK_SIZE+0x10c>
      UIP_STAT(++uip_stat.ip.drop);
    c102:	4a55      	ldr	r2, [pc, #340]	; (c258 <STACK_SIZE+0x258>)
    c104:	8813      	ldrh	r3, [r2, #0]
    c106:	3301      	adds	r3, #1
    c108:	8013      	strh	r3, [r2, #0]
      goto drop;
    c10a:	e645      	b.n	bd98 <uip_process+0x58>
    if(!uip_ipaddr_cmp(BUF->destipaddr, uip_hostaddr)) {
    c10c:	4b4b      	ldr	r3, [pc, #300]	; (c23c <STACK_SIZE+0x23c>)
    c10e:	8c1a      	ldrh	r2, [r3, #32]
    c110:	4b4b      	ldr	r3, [pc, #300]	; (c240 <STACK_SIZE+0x240>)
    c112:	885b      	ldrh	r3, [r3, #2]
    c114:	429a      	cmp	r2, r3
    c116:	d1f4      	bne.n	c102 <STACK_SIZE+0x102>
  if(uip_ipchksum() != 0xffff) { /* Compute and check the IP header
    c118:	4b4c      	ldr	r3, [pc, #304]	; (c24c <STACK_SIZE+0x24c>)
    c11a:	4798      	blx	r3
    c11c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c120:	4298      	cmp	r0, r3
    c122:	d00a      	beq.n	c13a <STACK_SIZE+0x13a>
    UIP_STAT(++uip_stat.ip.drop);
    c124:	4b4c      	ldr	r3, [pc, #304]	; (c258 <STACK_SIZE+0x258>)
    c126:	881a      	ldrh	r2, [r3, #0]
    c128:	3201      	adds	r2, #1
    c12a:	801a      	strh	r2, [r3, #0]
    UIP_STAT(++uip_stat.ip.chkerr);
    c12c:	89da      	ldrh	r2, [r3, #14]
    c12e:	3201      	adds	r2, #1
    c130:	81da      	strh	r2, [r3, #14]
    UIP_LOG("ip: bad checksum.");
    c132:	484e      	ldr	r0, [pc, #312]	; (c26c <STACK_SIZE+0x26c>)
    c134:	4b4b      	ldr	r3, [pc, #300]	; (c264 <STACK_SIZE+0x264>)
    c136:	4798      	blx	r3
    goto drop;
    c138:	e62e      	b.n	bd98 <uip_process+0x58>
  if(BUF->proto == UIP_PROTO_TCP) { /* Check for TCP packet. If so,
    c13a:	4b40      	ldr	r3, [pc, #256]	; (c23c <STACK_SIZE+0x23c>)
    c13c:	7ddb      	ldrb	r3, [r3, #23]
    c13e:	2b06      	cmp	r3, #6
    c140:	f000 80da 	beq.w	c2f8 <STACK_SIZE+0x2f8>
  if(BUF->proto == UIP_PROTO_UDP) {
    c144:	2b11      	cmp	r3, #17
    c146:	d03c      	beq.n	c1c2 <STACK_SIZE+0x1c2>
  if(BUF->proto != UIP_PROTO_ICMP) { /* We only allow ICMP packets from
    c148:	2b01      	cmp	r3, #1
    c14a:	d00a      	beq.n	c162 <STACK_SIZE+0x162>
    UIP_STAT(++uip_stat.ip.drop);
    c14c:	4b42      	ldr	r3, [pc, #264]	; (c258 <STACK_SIZE+0x258>)
    c14e:	881a      	ldrh	r2, [r3, #0]
    c150:	3201      	adds	r2, #1
    c152:	801a      	strh	r2, [r3, #0]
    UIP_STAT(++uip_stat.ip.protoerr);
    c154:	8a1a      	ldrh	r2, [r3, #16]
    c156:	3201      	adds	r2, #1
    c158:	821a      	strh	r2, [r3, #16]
    UIP_LOG("ip: neither tcp nor icmp.");
    c15a:	4845      	ldr	r0, [pc, #276]	; (c270 <STACK_SIZE+0x270>)
    c15c:	4b41      	ldr	r3, [pc, #260]	; (c264 <STACK_SIZE+0x264>)
    c15e:	4798      	blx	r3
    goto drop;
    c160:	e61a      	b.n	bd98 <uip_process+0x58>
  UIP_STAT(++uip_stat.icmp.recv);
    c162:	4a3d      	ldr	r2, [pc, #244]	; (c258 <STACK_SIZE+0x258>)
    c164:	8a93      	ldrh	r3, [r2, #20]
    c166:	3301      	adds	r3, #1
    c168:	8293      	strh	r3, [r2, #20]
  if(ICMPBUF->type != ICMP_ECHO) {
    c16a:	4b34      	ldr	r3, [pc, #208]	; (c23c <STACK_SIZE+0x23c>)
    c16c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
    c170:	2b08      	cmp	r3, #8
    c172:	d00a      	beq.n	c18a <STACK_SIZE+0x18a>
    UIP_STAT(++uip_stat.icmp.drop);
    c174:	4613      	mov	r3, r2
    c176:	8a52      	ldrh	r2, [r2, #18]
    c178:	3201      	adds	r2, #1
    c17a:	825a      	strh	r2, [r3, #18]
    UIP_STAT(++uip_stat.icmp.typeerr);
    c17c:	8b1a      	ldrh	r2, [r3, #24]
    c17e:	3201      	adds	r2, #1
    c180:	831a      	strh	r2, [r3, #24]
    UIP_LOG("icmp: not icmp echo.");
    c182:	483c      	ldr	r0, [pc, #240]	; (c274 <STACK_SIZE+0x274>)
    c184:	4b37      	ldr	r3, [pc, #220]	; (c264 <STACK_SIZE+0x264>)
    c186:	4798      	blx	r3
    goto drop;
    c188:	e606      	b.n	bd98 <uip_process+0x58>
  ICMPBUF->type = ICMP_ECHO_REPLY;
    c18a:	4b2c      	ldr	r3, [pc, #176]	; (c23c <STACK_SIZE+0x23c>)
    c18c:	2200      	movs	r2, #0
    c18e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  if(ICMPBUF->icmpchksum >= HTONS(0xffff - (ICMP_ECHO << 8))) {
    c192:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    c194:	f64f 72f6 	movw	r2, #65526	; 0xfff6
    c198:	4293      	cmp	r3, r2
    ICMPBUF->icmpchksum += HTONS(ICMP_ECHO << 8) + 1;
    c19a:	bf8c      	ite	hi
    c19c:	3309      	addhi	r3, #9
    ICMPBUF->icmpchksum += HTONS(ICMP_ECHO << 8);
    c19e:	3308      	addls	r3, #8
    c1a0:	4a26      	ldr	r2, [pc, #152]	; (c23c <STACK_SIZE+0x23c>)
    c1a2:	8493      	strh	r3, [r2, #36]	; 0x24
  uip_ipaddr_copy(BUF->destipaddr, BUF->srcipaddr);
    c1a4:	4b25      	ldr	r3, [pc, #148]	; (c23c <STACK_SIZE+0x23c>)
    c1a6:	8b5a      	ldrh	r2, [r3, #26]
    c1a8:	83da      	strh	r2, [r3, #30]
    c1aa:	8b9a      	ldrh	r2, [r3, #28]
    c1ac:	841a      	strh	r2, [r3, #32]
  uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
    c1ae:	4a24      	ldr	r2, [pc, #144]	; (c240 <STACK_SIZE+0x240>)
    c1b0:	8811      	ldrh	r1, [r2, #0]
    c1b2:	8359      	strh	r1, [r3, #26]
    c1b4:	8852      	ldrh	r2, [r2, #2]
    c1b6:	839a      	strh	r2, [r3, #28]
  UIP_STAT(++uip_stat.icmp.sent);
    c1b8:	4a27      	ldr	r2, [pc, #156]	; (c258 <STACK_SIZE+0x258>)
    c1ba:	8ad3      	ldrh	r3, [r2, #22]
    c1bc:	3301      	adds	r3, #1
    c1be:	82d3      	strh	r3, [r2, #22]
  goto send;
    c1c0:	e761      	b.n	c086 <STACK_SIZE+0x86>
  uip_len = uip_len - UIP_IPUDPH_LEN;
    c1c2:	4a1b      	ldr	r2, [pc, #108]	; (c230 <STACK_SIZE+0x230>)
    c1c4:	8813      	ldrh	r3, [r2, #0]
    c1c6:	3b1c      	subs	r3, #28
    c1c8:	8013      	strh	r3, [r2, #0]
  uip_appdata = &uip_buf[UIP_LLH_LEN + UIP_IPUDPH_LEN];
    c1ca:	4b15      	ldr	r3, [pc, #84]	; (c220 <STACK_SIZE+0x220>)
    c1cc:	4a15      	ldr	r2, [pc, #84]	; (c224 <STACK_SIZE+0x224>)
    c1ce:	6013      	str	r3, [r2, #0]
  if(UDPBUF->udpchksum != 0 && uip_udpchksum() != 0xffff) {
    c1d0:	f833 3c02 	ldrh.w	r3, [r3, #-2]
    c1d4:	b183      	cbz	r3, c1f8 <STACK_SIZE+0x1f8>
    c1d6:	4b1b      	ldr	r3, [pc, #108]	; (c244 <STACK_SIZE+0x244>)
    c1d8:	4798      	blx	r3
    c1da:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c1de:	4298      	cmp	r0, r3
    c1e0:	d00a      	beq.n	c1f8 <STACK_SIZE+0x1f8>
    UIP_STAT(++uip_stat.udp.drop);
    c1e2:	4b1d      	ldr	r3, [pc, #116]	; (c258 <STACK_SIZE+0x258>)
    c1e4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
    c1e6:	3201      	adds	r2, #1
    c1e8:	859a      	strh	r2, [r3, #44]	; 0x2c
    UIP_STAT(++uip_stat.udp.chkerr);
    c1ea:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
    c1ec:	3201      	adds	r2, #1
    c1ee:	865a      	strh	r2, [r3, #50]	; 0x32
    UIP_LOG("udp: bad checksum.");
    c1f0:	4821      	ldr	r0, [pc, #132]	; (c278 <STACK_SIZE+0x278>)
    c1f2:	4b1c      	ldr	r3, [pc, #112]	; (c264 <STACK_SIZE+0x264>)
    c1f4:	4798      	blx	r3
    goto drop;
    c1f6:	e5cf      	b.n	bd98 <uip_process+0x58>
  for(uip_udp_conn = &uip_udp_conns[0];
    c1f8:	4b20      	ldr	r3, [pc, #128]	; (c27c <STACK_SIZE+0x27c>)
    c1fa:	4a07      	ldr	r2, [pc, #28]	; (c218 <STACK_SIZE+0x218>)
    c1fc:	6013      	str	r3, [r2, #0]
       UDPBUF->destport == uip_udp_conn->lport &&
    c1fe:	4a0f      	ldr	r2, [pc, #60]	; (c23c <STACK_SIZE+0x23c>)
    c200:	8c94      	ldrh	r4, [r2, #36]	; 0x24
        UDPBUF->srcport == uip_udp_conn->rport) &&
    c202:	8c57      	ldrh	r7, [r2, #34]	; 0x22
	uip_ipaddr_cmp(BUF->srcipaddr, uip_udp_conn->ripaddr))) {
    c204:	8b56      	ldrh	r6, [r2, #26]
    c206:	f8b2 e01c 	ldrh.w	lr, [r2, #28]
       (uip_ipaddr_cmp(uip_udp_conn->ripaddr, all_zeroes_addr) ||
    c20a:	f64f 75ff 	movw	r5, #65535	; 0xffff
      ++uip_udp_conn) {
    c20e:	4802      	ldr	r0, [pc, #8]	; (c218 <STACK_SIZE+0x218>)
  for(uip_udp_conn = &uip_udp_conns[0];
    c210:	f503 717a 	add.w	r1, r3, #1000	; 0x3e8
    c214:	e041      	b.n	c29a <STACK_SIZE+0x29a>
    c216:	bf00      	nop
    c218:	20008590 	.word	0x20008590
    c21c:	20008598 	.word	0x20008598
    c220:	2000867e 	.word	0x2000867e
    c224:	20008594 	.word	0x20008594
    c228:	20008584 	.word	0x20008584
    c22c:	20008cfa 	.word	0x20008cfa
    c230:	20008580 	.word	0x20008580
    c234:	2000858c 	.word	0x2000858c
    c238:	000093f5 	.word	0x000093f5
    c23c:	20008654 	.word	0x20008654
    c240:	20008650 	.word	0x20008650
    c244:	0000bc31 	.word	0x0000bc31
    c248:	200072bc 	.word	0x200072bc
    c24c:	0000bbe9 	.word	0x0000bbe9
    c250:	00011770 	.word	0x00011770
    c254:	0000031d 	.word	0x0000031d
    c258:	20008618 	.word	0x20008618
    c25c:	00011794 	.word	0x00011794
    c260:	0001169c 	.word	0x0001169c
    c264:	0000dc25 	.word	0x0000dc25
    c268:	0001166c 	.word	0x0001166c
    c26c:	000116b4 	.word	0x000116b4
    c270:	000116c8 	.word	0x000116c8
    c274:	000116e4 	.word	0x000116e4
    c278:	000116fc 	.word	0x000116fc
    c27c:	20008cfc 	.word	0x20008cfc
       (uip_ipaddr_cmp(uip_udp_conn->ripaddr, all_zeroes_addr) ||
    c280:	881a      	ldrh	r2, [r3, #0]
        UDPBUF->srcport == uip_udp_conn->rport) &&
    c282:	b9aa      	cbnz	r2, c2b0 <STACK_SIZE+0x2b0>
       (uip_ipaddr_cmp(uip_udp_conn->ripaddr, all_zeroes_addr) ||
    c284:	f8b3 c002 	ldrh.w	ip, [r3, #2]
    c288:	f1bc 0f00 	cmp.w	ip, #0
    c28c:	d016      	beq.n	c2bc <STACK_SIZE+0x2bc>
	uip_ipaddr_cmp(uip_udp_conn->ripaddr, all_ones_addr) ||
    c28e:	42b2      	cmp	r2, r6
    c290:	d022      	beq.n	c2d8 <STACK_SIZE+0x2d8>
      ++uip_udp_conn) {
    c292:	3364      	adds	r3, #100	; 0x64
    c294:	6003      	str	r3, [r0, #0]
  for(uip_udp_conn = &uip_udp_conns[0];
    c296:	428b      	cmp	r3, r1
    c298:	d222      	bcs.n	c2e0 <STACK_SIZE+0x2e0>
    if(uip_udp_conn->lport != 0 &&
    c29a:	889a      	ldrh	r2, [r3, #4]
    c29c:	2a00      	cmp	r2, #0
    c29e:	d0f8      	beq.n	c292 <STACK_SIZE+0x292>
    c2a0:	42a2      	cmp	r2, r4
    c2a2:	d1f6      	bne.n	c292 <STACK_SIZE+0x292>
       (uip_udp_conn->rport == 0 ||
    c2a4:	88da      	ldrh	r2, [r3, #6]
       UDPBUF->destport == uip_udp_conn->lport &&
    c2a6:	2a00      	cmp	r2, #0
    c2a8:	d0ea      	beq.n	c280 <STACK_SIZE+0x280>
       (uip_udp_conn->rport == 0 ||
    c2aa:	42ba      	cmp	r2, r7
    c2ac:	d1f1      	bne.n	c292 <STACK_SIZE+0x292>
    c2ae:	e7e7      	b.n	c280 <STACK_SIZE+0x280>
       (uip_ipaddr_cmp(uip_udp_conn->ripaddr, all_zeroes_addr) ||
    c2b0:	42aa      	cmp	r2, r5
    c2b2:	d1ec      	bne.n	c28e <STACK_SIZE+0x28e>
	uip_ipaddr_cmp(uip_udp_conn->ripaddr, all_ones_addr) ||
    c2b4:	f8b3 c002 	ldrh.w	ip, [r3, #2]
    c2b8:	45ac      	cmp	ip, r5
    c2ba:	d1e8      	bne.n	c28e <STACK_SIZE+0x28e>
  uip_conn = NULL;
    c2bc:	2300      	movs	r3, #0
    c2be:	4a9f      	ldr	r2, [pc, #636]	; (c53c <STACK_SIZE+0x53c>)
    c2c0:	6013      	str	r3, [r2, #0]
  uip_flags = UIP_NEWDATA;
    c2c2:	2102      	movs	r1, #2
    c2c4:	4a9e      	ldr	r2, [pc, #632]	; (c540 <STACK_SIZE+0x540>)
    c2c6:	7011      	strb	r1, [r2, #0]
  uip_sappdata = uip_appdata = &uip_buf[UIP_LLH_LEN + UIP_IPUDPH_LEN];
    c2c8:	499e      	ldr	r1, [pc, #632]	; (c544 <STACK_SIZE+0x544>)
    c2ca:	4a9f      	ldr	r2, [pc, #636]	; (c548 <STACK_SIZE+0x548>)
    c2cc:	6011      	str	r1, [r2, #0]
  uip_slen = 0;
    c2ce:	4a9f      	ldr	r2, [pc, #636]	; (c54c <STACK_SIZE+0x54c>)
    c2d0:	8013      	strh	r3, [r2, #0]
  UIP_UDP_APPCALL();
    c2d2:	4b9f      	ldr	r3, [pc, #636]	; (c550 <STACK_SIZE+0x550>)
    c2d4:	4798      	blx	r3
    c2d6:	e680      	b.n	bfda <uip_process+0x29a>
	uip_ipaddr_cmp(BUF->srcipaddr, uip_udp_conn->ripaddr))) {
    c2d8:	885a      	ldrh	r2, [r3, #2]
    c2da:	4572      	cmp	r2, lr
    c2dc:	d1d9      	bne.n	c292 <STACK_SIZE+0x292>
    c2de:	e7ed      	b.n	c2bc <STACK_SIZE+0x2bc>
  UIP_LOG("udp: no matching connection found");
    c2e0:	489c      	ldr	r0, [pc, #624]	; (c554 <STACK_SIZE+0x554>)
    c2e2:	4b9d      	ldr	r3, [pc, #628]	; (c558 <STACK_SIZE+0x558>)
    c2e4:	4798      	blx	r3
  goto drop;
    c2e6:	e557      	b.n	bd98 <uip_process+0x58>
    UDPBUF->udpchksum = 0xffff;
    c2e8:	4b9c      	ldr	r3, [pc, #624]	; (c55c <STACK_SIZE+0x55c>)
    c2ea:	f04f 32ff 	mov.w	r2, #4294967295
    c2ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    c2f2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    c2f6:	e6a8      	b.n	c04a <STACK_SIZE+0x4a>
  UIP_STAT(++uip_stat.tcp.recv);
    c2f8:	4a99      	ldr	r2, [pc, #612]	; (c560 <STACK_SIZE+0x560>)
    c2fa:	8b93      	ldrh	r3, [r2, #28]
    c2fc:	3301      	adds	r3, #1
    c2fe:	8393      	strh	r3, [r2, #28]
  if(uip_tcpchksum() != 0xffff) {   /* Compute and check the TCP
    c300:	4b98      	ldr	r3, [pc, #608]	; (c564 <STACK_SIZE+0x564>)
    c302:	4798      	blx	r3
    c304:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c308:	4298      	cmp	r0, r3
    c30a:	d00a      	beq.n	c322 <STACK_SIZE+0x322>
    UIP_STAT(++uip_stat.tcp.drop);
    c30c:	4b94      	ldr	r3, [pc, #592]	; (c560 <STACK_SIZE+0x560>)
    c30e:	8b5a      	ldrh	r2, [r3, #26]
    c310:	3201      	adds	r2, #1
    c312:	835a      	strh	r2, [r3, #26]
    UIP_STAT(++uip_stat.tcp.chkerr);
    c314:	8c1a      	ldrh	r2, [r3, #32]
    c316:	3201      	adds	r2, #1
    c318:	841a      	strh	r2, [r3, #32]
    UIP_LOG("tcp: bad checksum.");
    c31a:	4893      	ldr	r0, [pc, #588]	; (c568 <STACK_SIZE+0x568>)
    c31c:	4b8e      	ldr	r3, [pc, #568]	; (c558 <STACK_SIZE+0x558>)
    c31e:	4798      	blx	r3
    goto drop;
    c320:	e53a      	b.n	bd98 <uip_process+0x58>
    if(uip_connr->tcpstateflags != UIP_CLOSED &&
    c322:	4b92      	ldr	r3, [pc, #584]	; (c56c <STACK_SIZE+0x56c>)
    c324:	7e5b      	ldrb	r3, [r3, #25]
    c326:	b12b      	cbz	r3, c334 <STACK_SIZE+0x334>
    c328:	4a8c      	ldr	r2, [pc, #560]	; (c55c <STACK_SIZE+0x55c>)
    c32a:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    c32c:	4a8f      	ldr	r2, [pc, #572]	; (c56c <STACK_SIZE+0x56c>)
    c32e:	8892      	ldrh	r2, [r2, #4]
    c330:	4291      	cmp	r1, r2
    c332:	d05c      	beq.n	c3ee <STACK_SIZE+0x3ee>
  if((BUF->flags & TCP_CTL) != TCP_SYN) {
    c334:	4a89      	ldr	r2, [pc, #548]	; (c55c <STACK_SIZE+0x55c>)
    c336:	f892 102f 	ldrb.w	r1, [r2, #47]	; 0x2f
    c33a:	f001 023f 	and.w	r2, r1, #63	; 0x3f
    c33e:	2a02      	cmp	r2, #2
    c340:	d07f      	beq.n	c442 <STACK_SIZE+0x442>
  if(BUF->flags & TCP_RST) {
    c342:	f011 0f04 	tst.w	r1, #4
    c346:	f47f ad27 	bne.w	bd98 <uip_process+0x58>
  UIP_STAT(++uip_stat.tcp.rst);
    c34a:	4a85      	ldr	r2, [pc, #532]	; (c560 <STACK_SIZE+0x560>)
    c34c:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    c34e:	3301      	adds	r3, #1
    c350:	8493      	strh	r3, [r2, #36]	; 0x24
  BUF->flags = TCP_RST | TCP_ACK;
    c352:	4b82      	ldr	r3, [pc, #520]	; (c55c <STACK_SIZE+0x55c>)
    c354:	2214      	movs	r2, #20
    c356:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  uip_len = UIP_IPTCPH_LEN;
    c35a:	2128      	movs	r1, #40	; 0x28
    c35c:	4a84      	ldr	r2, [pc, #528]	; (c570 <STACK_SIZE+0x570>)
    c35e:	8011      	strh	r1, [r2, #0]
  BUF->tcpoffset = 5 << 4;
    c360:	2250      	movs	r2, #80	; 0x50
    c362:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  c = BUF->seqno[3];
    c366:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
  BUF->seqno[3] = BUF->ackno[3];
    c36a:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
    c36e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  c = BUF->seqno[2];
    c372:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
  BUF->seqno[2] = BUF->ackno[2];
    c376:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
    c37a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  BUF->ackno[2] = c;
    c37e:	f883 102c 	strb.w	r1, [r3, #44]	; 0x2c
  c = BUF->seqno[1];
    c382:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
  BUF->seqno[1] = BUF->ackno[1];
    c386:	f893 402b 	ldrb.w	r4, [r3, #43]	; 0x2b
    c38a:	f883 4027 	strb.w	r4, [r3, #39]	; 0x27
  BUF->ackno[1] = c;
    c38e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  c = BUF->seqno[0];
    c392:	f893 4026 	ldrb.w	r4, [r3, #38]	; 0x26
    c396:	4d77      	ldr	r5, [pc, #476]	; (c574 <STACK_SIZE+0x574>)
    c398:	70ac      	strb	r4, [r5, #2]
  BUF->seqno[0] = BUF->ackno[0];
    c39a:	f893 502a 	ldrb.w	r5, [r3, #42]	; 0x2a
    c39e:	f883 5026 	strb.w	r5, [r3, #38]	; 0x26
  BUF->ackno[0] = c;
    c3a2:	f883 402a 	strb.w	r4, [r3, #42]	; 0x2a
  if(++BUF->ackno[3] == 0) {
    c3a6:	3001      	adds	r0, #1
    c3a8:	b2c0      	uxtb	r0, r0
    c3aa:	f883 002d 	strb.w	r0, [r3, #45]	; 0x2d
    c3ae:	b968      	cbnz	r0, c3cc <STACK_SIZE+0x3cc>
    if(++BUF->ackno[2] == 0) {
    c3b0:	1c4b      	adds	r3, r1, #1
    c3b2:	b2db      	uxtb	r3, r3
    c3b4:	4969      	ldr	r1, [pc, #420]	; (c55c <STACK_SIZE+0x55c>)
    c3b6:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    c3ba:	b93b      	cbnz	r3, c3cc <STACK_SIZE+0x3cc>
      if(++BUF->ackno[1] == 0) {
    c3bc:	1c53      	adds	r3, r2, #1
    c3be:	b2db      	uxtb	r3, r3
    c3c0:	f881 302b 	strb.w	r3, [r1, #43]	; 0x2b
    c3c4:	b913      	cbnz	r3, c3cc <STACK_SIZE+0x3cc>
	++BUF->ackno[0];
    c3c6:	3401      	adds	r4, #1
    c3c8:	f881 402a 	strb.w	r4, [r1, #42]	; 0x2a
  tmp16 = BUF->srcport;
    c3cc:	4b63      	ldr	r3, [pc, #396]	; (c55c <STACK_SIZE+0x55c>)
    c3ce:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
    c3d0:	4968      	ldr	r1, [pc, #416]	; (c574 <STACK_SIZE+0x574>)
    c3d2:	818a      	strh	r2, [r1, #12]
  BUF->srcport = BUF->destport;
    c3d4:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    c3d6:	8459      	strh	r1, [r3, #34]	; 0x22
  BUF->destport = tmp16;
    c3d8:	849a      	strh	r2, [r3, #36]	; 0x24
  uip_ipaddr_copy(BUF->destipaddr, BUF->srcipaddr);
    c3da:	8b5a      	ldrh	r2, [r3, #26]
    c3dc:	83da      	strh	r2, [r3, #30]
    c3de:	8b9a      	ldrh	r2, [r3, #28]
    c3e0:	841a      	strh	r2, [r3, #32]
  uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
    c3e2:	4a65      	ldr	r2, [pc, #404]	; (c578 <STACK_SIZE+0x578>)
    c3e4:	8811      	ldrh	r1, [r2, #0]
    c3e6:	8359      	strh	r1, [r3, #26]
    c3e8:	8852      	ldrh	r2, [r2, #2]
    c3ea:	839a      	strh	r2, [r3, #28]
  goto tcp_send_noconn;
    c3ec:	e52a      	b.n	be44 <uip_process+0x104>
       BUF->destport == uip_connr->lport &&
    c3ee:	4a5b      	ldr	r2, [pc, #364]	; (c55c <STACK_SIZE+0x55c>)
    c3f0:	8c51      	ldrh	r1, [r2, #34]	; 0x22
    c3f2:	4a5e      	ldr	r2, [pc, #376]	; (c56c <STACK_SIZE+0x56c>)
    c3f4:	88d2      	ldrh	r2, [r2, #6]
    c3f6:	4291      	cmp	r1, r2
    c3f8:	d19c      	bne.n	c334 <STACK_SIZE+0x334>
       BUF->srcport == uip_connr->rport &&
    c3fa:	4a58      	ldr	r2, [pc, #352]	; (c55c <STACK_SIZE+0x55c>)
    c3fc:	8b51      	ldrh	r1, [r2, #26]
    c3fe:	4a5b      	ldr	r2, [pc, #364]	; (c56c <STACK_SIZE+0x56c>)
    c400:	8812      	ldrh	r2, [r2, #0]
    c402:	4291      	cmp	r1, r2
    c404:	d196      	bne.n	c334 <STACK_SIZE+0x334>
       uip_ipaddr_cmp(BUF->srcipaddr, uip_connr->ripaddr)) {
    c406:	4a55      	ldr	r2, [pc, #340]	; (c55c <STACK_SIZE+0x55c>)
    c408:	8b91      	ldrh	r1, [r2, #28]
    c40a:	4a58      	ldr	r2, [pc, #352]	; (c56c <STACK_SIZE+0x56c>)
    c40c:	8852      	ldrh	r2, [r2, #2]
    c40e:	4291      	cmp	r1, r2
    c410:	d190      	bne.n	c334 <STACK_SIZE+0x334>
  uip_conn = uip_connr;
    c412:	4956      	ldr	r1, [pc, #344]	; (c56c <STACK_SIZE+0x56c>)
    c414:	4a49      	ldr	r2, [pc, #292]	; (c53c <STACK_SIZE+0x53c>)
    c416:	6011      	str	r1, [r2, #0]
  uip_flags = 0;
    c418:	2100      	movs	r1, #0
    c41a:	4a49      	ldr	r2, [pc, #292]	; (c540 <STACK_SIZE+0x540>)
    c41c:	7011      	strb	r1, [r2, #0]
  if(BUF->flags & TCP_RST) {
    c41e:	4a4f      	ldr	r2, [pc, #316]	; (c55c <STACK_SIZE+0x55c>)
    c420:	f892 402f 	ldrb.w	r4, [r2, #47]	; 0x2f
    c424:	f014 0f04 	tst.w	r4, #4
    c428:	f000 80b0 	beq.w	c58c <STACK_SIZE+0x58c>
    uip_connr->tcpstateflags = UIP_CLOSED;
    c42c:	4b4f      	ldr	r3, [pc, #316]	; (c56c <STACK_SIZE+0x56c>)
    c42e:	7659      	strb	r1, [r3, #25]
    UIP_LOG("tcp: got reset, aborting connection.");
    c430:	4852      	ldr	r0, [pc, #328]	; (c57c <STACK_SIZE+0x57c>)
    c432:	4b49      	ldr	r3, [pc, #292]	; (c558 <STACK_SIZE+0x558>)
    c434:	4798      	blx	r3
    uip_flags = UIP_ABORT;
    c436:	2220      	movs	r2, #32
    c438:	4b41      	ldr	r3, [pc, #260]	; (c540 <STACK_SIZE+0x540>)
    c43a:	701a      	strb	r2, [r3, #0]
    UIP_APPCALL();
    c43c:	4b50      	ldr	r3, [pc, #320]	; (c580 <STACK_SIZE+0x580>)
    c43e:	4798      	blx	r3
    goto drop;
    c440:	e4aa      	b.n	bd98 <uip_process+0x58>
  tmp16 = BUF->destport;
    c442:	4a46      	ldr	r2, [pc, #280]	; (c55c <STACK_SIZE+0x55c>)
    c444:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    c446:	b295      	uxth	r5, r2
    c448:	484a      	ldr	r0, [pc, #296]	; (c574 <STACK_SIZE+0x574>)
    c44a:	8182      	strh	r2, [r0, #12]
  for(c = 0; c < UIP_LISTENPORTS; ++c) {
    c44c:	2600      	movs	r6, #0
    c44e:	7086      	strb	r6, [r0, #2]
    if(tmp16 == uip_listenports[c])
    c450:	484c      	ldr	r0, [pc, #304]	; (c584 <STACK_SIZE+0x584>)
    c452:	8800      	ldrh	r0, [r0, #0]
    c454:	42a8      	cmp	r0, r5
    c456:	d007      	beq.n	c468 <STACK_SIZE+0x468>
  for(c = 0; c < UIP_LISTENPORTS; ++c) {
    c458:	2201      	movs	r2, #1
    c45a:	4b46      	ldr	r3, [pc, #280]	; (c574 <STACK_SIZE+0x574>)
    c45c:	709a      	strb	r2, [r3, #2]
  UIP_STAT(++uip_stat.tcp.synrst);
    c45e:	4a40      	ldr	r2, [pc, #256]	; (c560 <STACK_SIZE+0x560>)
    c460:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
    c462:	3301      	adds	r3, #1
    c464:	8553      	strh	r3, [r2, #42]	; 0x2a
    c466:	e76c      	b.n	c342 <STACK_SIZE+0x342>
    if(uip_conns[c].tcpstateflags == UIP_CLOSED) {
    c468:	2b00      	cmp	r3, #0
    c46a:	f000 82ce 	beq.w	ca0a <STACK_SIZE+0xa0a>
    if(uip_conns[c].tcpstateflags == UIP_TIME_WAIT) {
    c46e:	2b07      	cmp	r3, #7
    c470:	f000 82c8 	beq.w	ca04 <STACK_SIZE+0xa04>
  for(c = 0; c < UIP_CONNS; ++c) {
    c474:	2201      	movs	r2, #1
    c476:	4b3f      	ldr	r3, [pc, #252]	; (c574 <STACK_SIZE+0x574>)
    c478:	709a      	strb	r2, [r3, #2]
    UIP_STAT(++uip_stat.tcp.syndrop);
    c47a:	4a39      	ldr	r2, [pc, #228]	; (c560 <STACK_SIZE+0x560>)
    c47c:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    c47e:	3301      	adds	r3, #1
    c480:	8513      	strh	r3, [r2, #40]	; 0x28
    UIP_LOG("tcp: found no unused connections.");
    c482:	4841      	ldr	r0, [pc, #260]	; (c588 <STACK_SIZE+0x588>)
    c484:	4b34      	ldr	r3, [pc, #208]	; (c558 <STACK_SIZE+0x558>)
    c486:	4798      	blx	r3
    goto drop;
    c488:	e486      	b.n	bd98 <uip_process+0x58>
    c48a:	b10b      	cbz	r3, c490 <STACK_SIZE+0x490>
    c48c:	4b39      	ldr	r3, [pc, #228]	; (c574 <STACK_SIZE+0x574>)
    c48e:	709c      	strb	r4, [r3, #2]
    c490:	4c36      	ldr	r4, [pc, #216]	; (c56c <STACK_SIZE+0x56c>)
    c492:	e03b      	b.n	c50c <STACK_SIZE+0x50c>
	++c;
    c494:	3401      	adds	r4, #1
    c496:	b2e4      	uxtb	r4, r4
    c498:	e005      	b.n	c4a6 <STACK_SIZE+0x4a6>
	if(uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == 0) {
    c49a:	4401      	add	r1, r0
    c49c:	f891 1037 	ldrb.w	r1, [r1, #55]	; 0x37
    c4a0:	b349      	cbz	r1, c4f6 <STACK_SIZE+0x4f6>
	c += uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c];
    c4a2:	440c      	add	r4, r1
    c4a4:	b2e4      	uxtb	r4, r4
    c4a6:	4633      	mov	r3, r6
    for(c = 0; c < ((BUF->tcpoffset >> 4) - 5) << 2 ;) {
    c4a8:	4621      	mov	r1, r4
    c4aa:	4294      	cmp	r4, r2
    c4ac:	da28      	bge.n	c500 <STACK_SIZE+0x500>
      opt = uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + c];
    c4ae:	1905      	adds	r5, r0, r4
    c4b0:	f895 5036 	ldrb.w	r5, [r5, #54]	; 0x36
      if(opt == TCP_OPT_END) {
    c4b4:	2d00      	cmp	r5, #0
    c4b6:	d0e8      	beq.n	c48a <STACK_SIZE+0x48a>
      } else if(opt == TCP_OPT_NOOP) {
    c4b8:	2d01      	cmp	r5, #1
    c4ba:	d0eb      	beq.n	c494 <STACK_SIZE+0x494>
      } else if(opt == TCP_OPT_MSS &&
    c4bc:	2d02      	cmp	r5, #2
    c4be:	d1ec      	bne.n	c49a <STACK_SIZE+0x49a>
		uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == TCP_OPT_MSS_LEN) {
    c4c0:	1845      	adds	r5, r0, r1
      } else if(opt == TCP_OPT_MSS &&
    c4c2:	f895 5037 	ldrb.w	r5, [r5, #55]	; 0x37
    c4c6:	2d04      	cmp	r5, #4
    c4c8:	d1e7      	bne.n	c49a <STACK_SIZE+0x49a>
    c4ca:	b10b      	cbz	r3, c4d0 <STACK_SIZE+0x4d0>
    c4cc:	4b29      	ldr	r3, [pc, #164]	; (c574 <STACK_SIZE+0x574>)
    c4ce:	709c      	strb	r4, [r3, #2]
	tmp16 = ((u16_t)uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 2 + c] << 8) |
    c4d0:	4b22      	ldr	r3, [pc, #136]	; (c55c <STACK_SIZE+0x55c>)
    c4d2:	4419      	add	r1, r3
    c4d4:	f891 2038 	ldrb.w	r2, [r1, #56]	; 0x38
	  (u16_t)uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN + 3 + c];
    c4d8:	f891 3039 	ldrb.w	r3, [r1, #57]	; 0x39
	tmp16 = ((u16_t)uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 2 + c] << 8) |
    c4dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    c4e0:	4a24      	ldr	r2, [pc, #144]	; (c574 <STACK_SIZE+0x574>)
    c4e2:	8193      	strh	r3, [r2, #12]
	uip_connr->initialmss = uip_connr->mss =
    c4e4:	f240 626e 	movw	r2, #1646	; 0x66e
    c4e8:	4293      	cmp	r3, r2
    c4ea:	bf28      	it	cs
    c4ec:	4613      	movcs	r3, r2
    c4ee:	4c1f      	ldr	r4, [pc, #124]	; (c56c <STACK_SIZE+0x56c>)
    c4f0:	8263      	strh	r3, [r4, #18]
    c4f2:	82a3      	strh	r3, [r4, #20]
	break;
    c4f4:	e00a      	b.n	c50c <STACK_SIZE+0x50c>
    c4f6:	b10b      	cbz	r3, c4fc <STACK_SIZE+0x4fc>
    c4f8:	4b1e      	ldr	r3, [pc, #120]	; (c574 <STACK_SIZE+0x574>)
    c4fa:	709c      	strb	r4, [r3, #2]
    c4fc:	4c1b      	ldr	r4, [pc, #108]	; (c56c <STACK_SIZE+0x56c>)
    c4fe:	e005      	b.n	c50c <STACK_SIZE+0x50c>
    c500:	b10b      	cbz	r3, c506 <STACK_SIZE+0x506>
    c502:	4b1c      	ldr	r3, [pc, #112]	; (c574 <STACK_SIZE+0x574>)
    c504:	709c      	strb	r4, [r3, #2]
    c506:	4c19      	ldr	r4, [pc, #100]	; (c56c <STACK_SIZE+0x56c>)
    c508:	e000      	b.n	c50c <STACK_SIZE+0x50c>
    c50a:	4c18      	ldr	r4, [pc, #96]	; (c56c <STACK_SIZE+0x56c>)
  BUF->flags = TCP_SYN | TCP_ACK;
    c50c:	4b13      	ldr	r3, [pc, #76]	; (c55c <STACK_SIZE+0x55c>)
    c50e:	2212      	movs	r2, #18
    c510:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  BUF->optdata[0] = TCP_OPT_MSS;
    c514:	2202      	movs	r2, #2
    c516:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  BUF->optdata[1] = TCP_OPT_MSS_LEN;
    c51a:	2204      	movs	r2, #4
    c51c:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
  BUF->optdata[2] = (UIP_TCP_MSS) / 256;
    c520:	2206      	movs	r2, #6
    c522:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  BUF->optdata[3] = (UIP_TCP_MSS) & 255;
    c526:	226e      	movs	r2, #110	; 0x6e
    c528:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  uip_len = UIP_IPTCPH_LEN + TCP_OPT_MSS_LEN;
    c52c:	212c      	movs	r1, #44	; 0x2c
    c52e:	4a10      	ldr	r2, [pc, #64]	; (c570 <STACK_SIZE+0x570>)
    c530:	8011      	strh	r1, [r2, #0]
  BUF->tcpoffset = ((UIP_TCPH_LEN + TCP_OPT_MSS_LEN) / 4) << 4;
    c532:	2260      	movs	r2, #96	; 0x60
    c534:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  goto tcp_send;
    c538:	e451      	b.n	bdde <uip_process+0x9e>
    c53a:	bf00      	nop
    c53c:	20008598 	.word	0x20008598
    c540:	2000858c 	.word	0x2000858c
    c544:	2000867e 	.word	0x2000867e
    c548:	20008584 	.word	0x20008584
    c54c:	20008cfa 	.word	0x20008cfa
    c550:	000093f5 	.word	0x000093f5
    c554:	00011710 	.word	0x00011710
    c558:	0000dc25 	.word	0x0000dc25
    c55c:	20008654 	.word	0x20008654
    c560:	20008618 	.word	0x20008618
    c564:	0000bc21 	.word	0x0000bc21
    c568:	00011734 	.word	0x00011734
    c56c:	2000859c 	.word	0x2000859c
    c570:	20008580 	.word	0x20008580
    c574:	200072bc 	.word	0x200072bc
    c578:	20008650 	.word	0x20008650
    c57c:	00011748 	.word	0x00011748
    c580:	0000dc11 	.word	0x0000dc11
    c584:	20008610 	.word	0x20008610
    c588:	000117b8 	.word	0x000117b8
  c = (BUF->tcpoffset >> 4) << 2;
    c58c:	4aa7      	ldr	r2, [pc, #668]	; (c82c <STACK_SIZE+0x82c>)
    c58e:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
    c592:	0912      	lsrs	r2, r2, #4
    c594:	0091      	lsls	r1, r2, #2
    c596:	4aa6      	ldr	r2, [pc, #664]	; (c830 <STACK_SIZE+0x830>)
    c598:	7091      	strb	r1, [r2, #2]
  uip_len = uip_len - c - UIP_IPH_LEN;
    c59a:	48a6      	ldr	r0, [pc, #664]	; (c834 <STACK_SIZE+0x834>)
    c59c:	8802      	ldrh	r2, [r0, #0]
    c59e:	3a14      	subs	r2, #20
    c5a0:	1a52      	subs	r2, r2, r1
    c5a2:	b292      	uxth	r2, r2
    c5a4:	8002      	strh	r2, [r0, #0]
    c5a6:	f003 000f 	and.w	r0, r3, #15
  if(!(((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_SYN_SENT) &&
    c5aa:	2802      	cmp	r0, #2
    c5ac:	d103      	bne.n	c5b6 <STACK_SIZE+0x5b6>
    c5ae:	f004 013f 	and.w	r1, r4, #63	; 0x3f
    c5b2:	2912      	cmp	r1, #18
    c5b4:	d011      	beq.n	c5da <STACK_SIZE+0x5da>
    if((uip_len > 0 || ((BUF->flags & (TCP_SYN | TCP_FIN)) != 0)) &&
    c5b6:	b912      	cbnz	r2, c5be <STACK_SIZE+0x5be>
    c5b8:	f014 0f03 	tst.w	r4, #3
    c5bc:	d00d      	beq.n	c5da <STACK_SIZE+0x5da>
    c5be:	4a9b      	ldr	r2, [pc, #620]	; (c82c <STACK_SIZE+0x82c>)
    c5c0:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
    c5c2:	4a9d      	ldr	r2, [pc, #628]	; (c838 <STACK_SIZE+0x838>)
    c5c4:	8912      	ldrh	r2, [r2, #8]
    c5c6:	4291      	cmp	r1, r2
    c5c8:	f040 81ad 	bne.w	c926 <STACK_SIZE+0x926>
	BUF->seqno[2] != uip_connr->rcv_nxt[2] ||
    c5cc:	4a97      	ldr	r2, [pc, #604]	; (c82c <STACK_SIZE+0x82c>)
    c5ce:	8d11      	ldrh	r1, [r2, #40]	; 0x28
    c5d0:	4a99      	ldr	r2, [pc, #612]	; (c838 <STACK_SIZE+0x838>)
    c5d2:	8952      	ldrh	r2, [r2, #10]
    c5d4:	4291      	cmp	r1, r2
    c5d6:	f040 81a6 	bne.w	c926 <STACK_SIZE+0x926>
  if((BUF->flags & TCP_ACK) && uip_outstanding(uip_connr)) {
    c5da:	f014 0f10 	tst.w	r4, #16
    c5de:	f000 81f5 	beq.w	c9cc <STACK_SIZE+0x9cc>
    c5e2:	4a95      	ldr	r2, [pc, #596]	; (c838 <STACK_SIZE+0x838>)
    c5e4:	8a11      	ldrh	r1, [r2, #16]
    c5e6:	2900      	cmp	r1, #0
    c5e8:	f000 81f0 	beq.w	c9cc <STACK_SIZE+0x9cc>
    uip_add32(uip_connr->snd_nxt, uip_connr->len);
    c5ec:	f102 000c 	add.w	r0, r2, #12
    c5f0:	4b92      	ldr	r3, [pc, #584]	; (c83c <STACK_SIZE+0x83c>)
    c5f2:	4798      	blx	r3
    if(BUF->ackno[0] == uip_acc32[0] &&
    c5f4:	4b8d      	ldr	r3, [pc, #564]	; (c82c <STACK_SIZE+0x82c>)
    c5f6:	f893 402a 	ldrb.w	r4, [r3, #42]	; 0x2a
    c5fa:	4b91      	ldr	r3, [pc, #580]	; (c840 <STACK_SIZE+0x840>)
    c5fc:	781b      	ldrb	r3, [r3, #0]
    c5fe:	42a3      	cmp	r3, r4
    c600:	d158      	bne.n	c6b4 <STACK_SIZE+0x6b4>
       BUF->ackno[1] == uip_acc32[1] &&
    c602:	4b8a      	ldr	r3, [pc, #552]	; (c82c <STACK_SIZE+0x82c>)
    c604:	f893 002b 	ldrb.w	r0, [r3, #43]	; 0x2b
    c608:	4b8d      	ldr	r3, [pc, #564]	; (c840 <STACK_SIZE+0x840>)
    if(BUF->ackno[0] == uip_acc32[0] &&
    c60a:	785b      	ldrb	r3, [r3, #1]
    c60c:	4283      	cmp	r3, r0
    c60e:	d151      	bne.n	c6b4 <STACK_SIZE+0x6b4>
       BUF->ackno[2] == uip_acc32[2] &&
    c610:	4b86      	ldr	r3, [pc, #536]	; (c82c <STACK_SIZE+0x82c>)
    c612:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
    c616:	4b8a      	ldr	r3, [pc, #552]	; (c840 <STACK_SIZE+0x840>)
       BUF->ackno[1] == uip_acc32[1] &&
    c618:	789b      	ldrb	r3, [r3, #2]
    c61a:	428b      	cmp	r3, r1
    c61c:	d14a      	bne.n	c6b4 <STACK_SIZE+0x6b4>
       BUF->ackno[3] == uip_acc32[3]) {
    c61e:	4b83      	ldr	r3, [pc, #524]	; (c82c <STACK_SIZE+0x82c>)
    c620:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
    c624:	4b86      	ldr	r3, [pc, #536]	; (c840 <STACK_SIZE+0x840>)
       BUF->ackno[2] == uip_acc32[2] &&
    c626:	78db      	ldrb	r3, [r3, #3]
    c628:	4293      	cmp	r3, r2
    c62a:	d143      	bne.n	c6b4 <STACK_SIZE+0x6b4>
      uip_connr->snd_nxt[0] = uip_acc32[0];
    c62c:	4b82      	ldr	r3, [pc, #520]	; (c838 <STACK_SIZE+0x838>)
    c62e:	731c      	strb	r4, [r3, #12]
      uip_connr->snd_nxt[1] = uip_acc32[1];
    c630:	7358      	strb	r0, [r3, #13]
      uip_connr->snd_nxt[2] = uip_acc32[2];
    c632:	7399      	strb	r1, [r3, #14]
      uip_connr->snd_nxt[3] = uip_acc32[3];
    c634:	73da      	strb	r2, [r3, #15]
      if(uip_connr->nrtx == 0) {
    c636:	7edb      	ldrb	r3, [r3, #27]
    c638:	b9cb      	cbnz	r3, c66e <STACK_SIZE+0x66e>
	m = m - (uip_connr->sa >> 3);
    c63a:	497f      	ldr	r1, [pc, #508]	; (c838 <STACK_SIZE+0x838>)
    c63c:	7d8a      	ldrb	r2, [r1, #22]
	m = uip_connr->rto - uip_connr->timer;
    c63e:	7e0b      	ldrb	r3, [r1, #24]
    c640:	7e88      	ldrb	r0, [r1, #26]
    c642:	1a1b      	subs	r3, r3, r0
	m = m - (uip_connr->sa >> 3);
    c644:	eba3 03d2 	sub.w	r3, r3, r2, lsr #3
    c648:	b2db      	uxtb	r3, r3
    c64a:	b258      	sxtb	r0, r3
	uip_connr->sa += m;
    c64c:	441a      	add	r2, r3
    c64e:	b2d2      	uxtb	r2, r2
    c650:	758a      	strb	r2, [r1, #22]
	if(m < 0) {
    c652:	2800      	cmp	r0, #0
	  m = -m;
    c654:	bfbc      	itt	lt
    c656:	425b      	neglt	r3, r3
    c658:	b258      	sxtblt	r0, r3
	m = m - (uip_connr->sv >> 2);
    c65a:	4977      	ldr	r1, [pc, #476]	; (c838 <STACK_SIZE+0x838>)
    c65c:	7dcb      	ldrb	r3, [r1, #23]
	uip_connr->sv += m;
    c65e:	eba3 0393 	sub.w	r3, r3, r3, lsr #2
    c662:	4403      	add	r3, r0
    c664:	b2db      	uxtb	r3, r3
    c666:	75cb      	strb	r3, [r1, #23]
	uip_connr->rto = (uip_connr->sa >> 3) + uip_connr->sv;
    c668:	eb03 03d2 	add.w	r3, r3, r2, lsr #3
    c66c:	760b      	strb	r3, [r1, #24]
      uip_flags = UIP_ACKDATA;
    c66e:	2201      	movs	r2, #1
    c670:	4b74      	ldr	r3, [pc, #464]	; (c844 <STACK_SIZE+0x844>)
    c672:	701a      	strb	r2, [r3, #0]
      uip_connr->timer = uip_connr->rto;
    c674:	4b70      	ldr	r3, [pc, #448]	; (c838 <STACK_SIZE+0x838>)
    c676:	7e1a      	ldrb	r2, [r3, #24]
    c678:	769a      	strb	r2, [r3, #26]
      uip_connr->len = 0;
    c67a:	2200      	movs	r2, #0
    c67c:	821a      	strh	r2, [r3, #16]
  switch(uip_connr->tcpstateflags & UIP_TS_MASK) {
    c67e:	7e5b      	ldrb	r3, [r3, #25]
    c680:	f003 020f 	and.w	r2, r3, #15
    c684:	3a01      	subs	r2, #1
    c686:	2a07      	cmp	r2, #7
    c688:	f63f ab86 	bhi.w	bd98 <uip_process+0x58>
    c68c:	a101      	add	r1, pc, #4	; (adr r1, c694 <STACK_SIZE+0x694>)
    c68e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    c692:	bf00      	nop
    c694:	0000c6f9 	.word	0x0000c6f9
    c698:	0000bd99 	.word	0x0000bd99
    c69c:	0000c729 	.word	0x0000c729
    c6a0:	0000c8eb 	.word	0x0000c8eb
    c6a4:	0000c961 	.word	0x0000c961
    c6a8:	0000c9a1 	.word	0x0000c9a1
    c6ac:	0000c927 	.word	0x0000c927
    c6b0:	0000c8cb 	.word	0x0000c8cb
    c6b4:	4b60      	ldr	r3, [pc, #384]	; (c838 <STACK_SIZE+0x838>)
    c6b6:	7e5b      	ldrb	r3, [r3, #25]
    c6b8:	f003 020f 	and.w	r2, r3, #15
    c6bc:	3a01      	subs	r2, #1
    c6be:	2a07      	cmp	r2, #7
    c6c0:	f63f ab6a 	bhi.w	bd98 <uip_process+0x58>
    c6c4:	a101      	add	r1, pc, #4	; (adr r1, c6cc <STACK_SIZE+0x6cc>)
    c6c6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    c6ca:	bf00      	nop
    c6cc:	0000c6ed 	.word	0x0000c6ed
    c6d0:	0000bd99 	.word	0x0000bd99
    c6d4:	0000c729 	.word	0x0000c729
    c6d8:	0000c8eb 	.word	0x0000c8eb
    c6dc:	0000c961 	.word	0x0000c961
    c6e0:	0000c9a1 	.word	0x0000c9a1
    c6e4:	0000c927 	.word	0x0000c927
    c6e8:	0000c8cb 	.word	0x0000c8cb
    if(uip_flags & UIP_ACKDATA) {
    c6ec:	4b55      	ldr	r3, [pc, #340]	; (c844 <STACK_SIZE+0x844>)
    c6ee:	781b      	ldrb	r3, [r3, #0]
    c6f0:	f013 0f01 	tst.w	r3, #1
    c6f4:	f43f ab50 	beq.w	bd98 <uip_process+0x58>
      uip_connr->tcpstateflags = UIP_ESTABLISHED;
    c6f8:	4b4f      	ldr	r3, [pc, #316]	; (c838 <STACK_SIZE+0x838>)
    c6fa:	2203      	movs	r2, #3
    c6fc:	765a      	strb	r2, [r3, #25]
      uip_flags = UIP_CONNECTED;
    c6fe:	2140      	movs	r1, #64	; 0x40
    c700:	4a50      	ldr	r2, [pc, #320]	; (c844 <STACK_SIZE+0x844>)
    c702:	7011      	strb	r1, [r2, #0]
      uip_connr->len = 0;
    c704:	2200      	movs	r2, #0
    c706:	821a      	strh	r2, [r3, #16]
      if(uip_len > 0) {
    c708:	4b4a      	ldr	r3, [pc, #296]	; (c834 <STACK_SIZE+0x834>)
    c70a:	8818      	ldrh	r0, [r3, #0]
    c70c:	b120      	cbz	r0, c718 <STACK_SIZE+0x718>
        uip_flags |= UIP_NEWDATA;
    c70e:	2242      	movs	r2, #66	; 0x42
    c710:	4b4c      	ldr	r3, [pc, #304]	; (c844 <STACK_SIZE+0x844>)
    c712:	701a      	strb	r2, [r3, #0]
        uip_add_rcv_nxt(uip_len);
    c714:	4b4c      	ldr	r3, [pc, #304]	; (c848 <STACK_SIZE+0x848>)
    c716:	4798      	blx	r3
      uip_slen = 0;
    c718:	2200      	movs	r2, #0
    c71a:	4b4c      	ldr	r3, [pc, #304]	; (c84c <STACK_SIZE+0x84c>)
    c71c:	801a      	strh	r2, [r3, #0]
      UIP_APPCALL();
    c71e:	4b4c      	ldr	r3, [pc, #304]	; (c850 <STACK_SIZE+0x850>)
    c720:	4798      	blx	r3
      goto appsend;
    c722:	4c45      	ldr	r4, [pc, #276]	; (c838 <STACK_SIZE+0x838>)
    c724:	f7ff bb46 	b.w	bdb4 <uip_process+0x74>
    if(BUF->flags & TCP_FIN && !(uip_connr->tcpstateflags & UIP_STOPPED)) {
    c728:	4a40      	ldr	r2, [pc, #256]	; (c82c <STACK_SIZE+0x82c>)
    c72a:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
    c72e:	f012 0f01 	tst.w	r2, #1
    c732:	d027      	beq.n	c784 <STACK_SIZE+0x784>
    c734:	f013 0f10 	tst.w	r3, #16
    c738:	d124      	bne.n	c784 <STACK_SIZE+0x784>
      if(uip_outstanding(uip_connr)) {
    c73a:	4b3f      	ldr	r3, [pc, #252]	; (c838 <STACK_SIZE+0x838>)
    c73c:	8a1b      	ldrh	r3, [r3, #16]
    c73e:	2b00      	cmp	r3, #0
    c740:	f47f ab2a 	bne.w	bd98 <uip_process+0x58>
      uip_add_rcv_nxt(1 + uip_len);
    c744:	4c3b      	ldr	r4, [pc, #236]	; (c834 <STACK_SIZE+0x834>)
    c746:	8820      	ldrh	r0, [r4, #0]
    c748:	3001      	adds	r0, #1
    c74a:	b280      	uxth	r0, r0
    c74c:	4b3e      	ldr	r3, [pc, #248]	; (c848 <STACK_SIZE+0x848>)
    c74e:	4798      	blx	r3
      uip_flags |= UIP_CLOSE;
    c750:	4a3c      	ldr	r2, [pc, #240]	; (c844 <STACK_SIZE+0x844>)
    c752:	7813      	ldrb	r3, [r2, #0]
    c754:	f043 0110 	orr.w	r1, r3, #16
    c758:	7011      	strb	r1, [r2, #0]
      if(uip_len > 0) {
    c75a:	8822      	ldrh	r2, [r4, #0]
    c75c:	b11a      	cbz	r2, c766 <STACK_SIZE+0x766>
	uip_flags |= UIP_NEWDATA;
    c75e:	f043 0312 	orr.w	r3, r3, #18
    c762:	4a38      	ldr	r2, [pc, #224]	; (c844 <STACK_SIZE+0x844>)
    c764:	7013      	strb	r3, [r2, #0]
      UIP_APPCALL();
    c766:	4b3a      	ldr	r3, [pc, #232]	; (c850 <STACK_SIZE+0x850>)
    c768:	4798      	blx	r3
      uip_connr->len = 1;
    c76a:	4c33      	ldr	r4, [pc, #204]	; (c838 <STACK_SIZE+0x838>)
    c76c:	2301      	movs	r3, #1
    c76e:	8223      	strh	r3, [r4, #16]
      uip_connr->tcpstateflags = UIP_LAST_ACK;
    c770:	2308      	movs	r3, #8
    c772:	7663      	strb	r3, [r4, #25]
      uip_connr->nrtx = 0;
    c774:	2300      	movs	r3, #0
    c776:	76e3      	strb	r3, [r4, #27]
      BUF->flags = TCP_FIN | TCP_ACK;
    c778:	2211      	movs	r2, #17
    c77a:	4b2c      	ldr	r3, [pc, #176]	; (c82c <STACK_SIZE+0x82c>)
    c77c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
      goto tcp_send_nodata;
    c780:	f7ff bb26 	b.w	bdd0 <uip_process+0x90>
    if((BUF->flags & TCP_URG) != 0) {
    c784:	f012 0f20 	tst.w	r2, #32
    c788:	d00f      	beq.n	c7aa <STACK_SIZE+0x7aa>
      uip_appdata = ((char *)uip_appdata) + ((BUF->urgp[0] << 8) | BUF->urgp[1]);
    c78a:	4928      	ldr	r1, [pc, #160]	; (c82c <STACK_SIZE+0x82c>)
    c78c:	f891 2034 	ldrb.w	r2, [r1, #52]	; 0x34
    c790:	0212      	lsls	r2, r2, #8
    c792:	f891 4035 	ldrb.w	r4, [r1, #53]	; 0x35
    c796:	482f      	ldr	r0, [pc, #188]	; (c854 <STACK_SIZE+0x854>)
    c798:	ea44 0502 	orr.w	r5, r4, r2
    c79c:	6801      	ldr	r1, [r0, #0]
    c79e:	4429      	add	r1, r5
    c7a0:	6001      	str	r1, [r0, #0]
      uip_len -= (BUF->urgp[0] << 8) | BUF->urgp[1];
    c7a2:	4824      	ldr	r0, [pc, #144]	; (c834 <STACK_SIZE+0x834>)
    c7a4:	8801      	ldrh	r1, [r0, #0]
    c7a6:	1b4a      	subs	r2, r1, r5
    c7a8:	8002      	strh	r2, [r0, #0]
    if(uip_len > 0 && !(uip_connr->tcpstateflags & UIP_STOPPED)) {
    c7aa:	4a22      	ldr	r2, [pc, #136]	; (c834 <STACK_SIZE+0x834>)
    c7ac:	8810      	ldrh	r0, [r2, #0]
    c7ae:	b148      	cbz	r0, c7c4 <STACK_SIZE+0x7c4>
    c7b0:	f013 0f10 	tst.w	r3, #16
    c7b4:	d106      	bne.n	c7c4 <STACK_SIZE+0x7c4>
      uip_flags |= UIP_NEWDATA;
    c7b6:	4a23      	ldr	r2, [pc, #140]	; (c844 <STACK_SIZE+0x844>)
    c7b8:	7813      	ldrb	r3, [r2, #0]
    c7ba:	f043 0302 	orr.w	r3, r3, #2
    c7be:	7013      	strb	r3, [r2, #0]
      uip_add_rcv_nxt(uip_len);
    c7c0:	4b21      	ldr	r3, [pc, #132]	; (c848 <STACK_SIZE+0x848>)
    c7c2:	4798      	blx	r3
    tmp16 = ((u16_t)BUF->wnd[0] << 8) + (u16_t)BUF->wnd[1];
    c7c4:	4b19      	ldr	r3, [pc, #100]	; (c82c <STACK_SIZE+0x82c>)
    c7c6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    c7ca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
    c7ce:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    c7d2:	b29b      	uxth	r3, r3
    c7d4:	4a16      	ldr	r2, [pc, #88]	; (c830 <STACK_SIZE+0x830>)
    c7d6:	8193      	strh	r3, [r2, #12]
    if(tmp16 > uip_connr->initialmss ||
    c7d8:	4a17      	ldr	r2, [pc, #92]	; (c838 <STACK_SIZE+0x838>)
    c7da:	8a92      	ldrh	r2, [r2, #20]
    c7dc:	4293      	cmp	r3, r2
    c7de:	d800      	bhi.n	c7e2 <STACK_SIZE+0x7e2>
    c7e0:	b90b      	cbnz	r3, c7e6 <STACK_SIZE+0x7e6>
      tmp16 = uip_connr->initialmss;
    c7e2:	4b13      	ldr	r3, [pc, #76]	; (c830 <STACK_SIZE+0x830>)
    c7e4:	819a      	strh	r2, [r3, #12]
    uip_connr->mss = tmp16;
    c7e6:	4b12      	ldr	r3, [pc, #72]	; (c830 <STACK_SIZE+0x830>)
    c7e8:	899a      	ldrh	r2, [r3, #12]
    c7ea:	4b13      	ldr	r3, [pc, #76]	; (c838 <STACK_SIZE+0x838>)
    c7ec:	825a      	strh	r2, [r3, #18]
    if(uip_flags & (UIP_NEWDATA | UIP_ACKDATA)) {
    c7ee:	4b15      	ldr	r3, [pc, #84]	; (c844 <STACK_SIZE+0x844>)
    c7f0:	781b      	ldrb	r3, [r3, #0]
    c7f2:	f013 0f03 	tst.w	r3, #3
    c7f6:	f43f aacf 	beq.w	bd98 <uip_process+0x58>
      uip_slen = 0;
    c7fa:	2200      	movs	r2, #0
    c7fc:	4b13      	ldr	r3, [pc, #76]	; (c84c <STACK_SIZE+0x84c>)
    c7fe:	801a      	strh	r2, [r3, #0]
      UIP_APPCALL();
    c800:	4b13      	ldr	r3, [pc, #76]	; (c850 <STACK_SIZE+0x850>)
    c802:	4798      	blx	r3
    c804:	4c0c      	ldr	r4, [pc, #48]	; (c838 <STACK_SIZE+0x838>)
    c806:	f7ff bad5 	b.w	bdb4 <uip_process+0x74>
      if(uip_flags & UIP_CLOSE) {
    c80a:	f013 0f10 	tst.w	r3, #16
    c80e:	d023      	beq.n	c858 <STACK_SIZE+0x858>
	uip_slen = 0;
    c810:	2300      	movs	r3, #0
    c812:	4a0e      	ldr	r2, [pc, #56]	; (c84c <STACK_SIZE+0x84c>)
    c814:	8013      	strh	r3, [r2, #0]
	uip_connr->len = 1;
    c816:	2201      	movs	r2, #1
    c818:	8222      	strh	r2, [r4, #16]
	uip_connr->tcpstateflags = UIP_FIN_WAIT_1;
    c81a:	2204      	movs	r2, #4
    c81c:	7662      	strb	r2, [r4, #25]
	uip_connr->nrtx = 0;
    c81e:	76e3      	strb	r3, [r4, #27]
	BUF->flags = TCP_FIN | TCP_ACK;
    c820:	2211      	movs	r2, #17
    c822:	4b02      	ldr	r3, [pc, #8]	; (c82c <STACK_SIZE+0x82c>)
    c824:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	goto tcp_send_nodata;
    c828:	f7ff bad2 	b.w	bdd0 <uip_process+0x90>
    c82c:	20008654 	.word	0x20008654
    c830:	200072bc 	.word	0x200072bc
    c834:	20008580 	.word	0x20008580
    c838:	2000859c 	.word	0x2000859c
    c83c:	0000bb59 	.word	0x0000bb59
    c840:	20008588 	.word	0x20008588
    c844:	2000858c 	.word	0x2000858c
    c848:	0000bbb5 	.word	0x0000bbb5
    c84c:	20008cfa 	.word	0x20008cfa
    c850:	0000dc11 	.word	0x0000dc11
    c854:	20008594 	.word	0x20008594
      if(uip_slen > 0) {
    c858:	4a8d      	ldr	r2, [pc, #564]	; (ca90 <STACK_SIZE+0xa90>)
    c85a:	8812      	ldrh	r2, [r2, #0]
    c85c:	b162      	cbz	r2, c878 <STACK_SIZE+0x878>
	if((uip_flags & UIP_ACKDATA) != 0) {
    c85e:	f013 0f01 	tst.w	r3, #1
    c862:	d01d      	beq.n	c8a0 <STACK_SIZE+0x8a0>
	  uip_connr->len = 0;
    c864:	2300      	movs	r3, #0
    c866:	8223      	strh	r3, [r4, #16]
	  if(uip_slen > uip_connr->mss) {
    c868:	8a63      	ldrh	r3, [r4, #18]
    c86a:	429a      	cmp	r2, r3
	    uip_slen = uip_connr->mss;
    c86c:	bf84      	itt	hi
    c86e:	4a88      	ldrhi	r2, [pc, #544]	; (ca90 <STACK_SIZE+0xa90>)
    c870:	8013      	strhhi	r3, [r2, #0]
	  uip_connr->len = uip_slen;
    c872:	4b87      	ldr	r3, [pc, #540]	; (ca90 <STACK_SIZE+0xa90>)
    c874:	881b      	ldrh	r3, [r3, #0]
    c876:	8223      	strh	r3, [r4, #16]
      uip_connr->nrtx = 0;
    c878:	2300      	movs	r3, #0
    c87a:	76e3      	strb	r3, [r4, #27]
      uip_appdata = uip_sappdata;
    c87c:	4b85      	ldr	r3, [pc, #532]	; (ca94 <STACK_SIZE+0xa94>)
    c87e:	681a      	ldr	r2, [r3, #0]
    c880:	4b85      	ldr	r3, [pc, #532]	; (ca98 <STACK_SIZE+0xa98>)
    c882:	601a      	str	r2, [r3, #0]
      if(uip_slen > 0 && uip_connr->len > 0) {
    c884:	4b82      	ldr	r3, [pc, #520]	; (ca90 <STACK_SIZE+0xa90>)
    c886:	881b      	ldrh	r3, [r3, #0]
    c888:	b183      	cbz	r3, c8ac <STACK_SIZE+0x8ac>
    c88a:	8a23      	ldrh	r3, [r4, #16]
    c88c:	b173      	cbz	r3, c8ac <STACK_SIZE+0x8ac>
	uip_len = uip_connr->len + UIP_TCPIP_HLEN;
    c88e:	3328      	adds	r3, #40	; 0x28
    c890:	4a82      	ldr	r2, [pc, #520]	; (ca9c <STACK_SIZE+0xa9c>)
    c892:	8013      	strh	r3, [r2, #0]
	BUF->flags = TCP_ACK | TCP_PSH;
    c894:	2218      	movs	r2, #24
    c896:	4b82      	ldr	r3, [pc, #520]	; (caa0 <STACK_SIZE+0xaa0>)
    c898:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	goto tcp_send_noopts;
    c89c:	f7ff ba9b 	b.w	bdd6 <uip_process+0x96>
	if(uip_connr->len == 0) {
    c8a0:	8a23      	ldrh	r3, [r4, #16]
    c8a2:	2b00      	cmp	r3, #0
    c8a4:	d0e0      	beq.n	c868 <STACK_SIZE+0x868>
	  uip_slen = uip_connr->len;
    c8a6:	4a7a      	ldr	r2, [pc, #488]	; (ca90 <STACK_SIZE+0xa90>)
    c8a8:	8013      	strh	r3, [r2, #0]
    c8aa:	e7e5      	b.n	c878 <STACK_SIZE+0x878>
      if(uip_flags & UIP_NEWDATA) {
    c8ac:	4b7d      	ldr	r3, [pc, #500]	; (caa4 <STACK_SIZE+0xaa4>)
    c8ae:	781b      	ldrb	r3, [r3, #0]
    c8b0:	f013 0f02 	tst.w	r3, #2
    c8b4:	f43f aa70 	beq.w	bd98 <uip_process+0x58>
	uip_len = UIP_TCPIP_HLEN;
    c8b8:	2228      	movs	r2, #40	; 0x28
    c8ba:	4b78      	ldr	r3, [pc, #480]	; (ca9c <STACK_SIZE+0xa9c>)
    c8bc:	801a      	strh	r2, [r3, #0]
	BUF->flags = TCP_ACK;
    c8be:	2210      	movs	r2, #16
    c8c0:	4b77      	ldr	r3, [pc, #476]	; (caa0 <STACK_SIZE+0xaa0>)
    c8c2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	goto tcp_send_noopts;
    c8c6:	f7ff ba86 	b.w	bdd6 <uip_process+0x96>
    if(uip_flags & UIP_ACKDATA) {
    c8ca:	4b76      	ldr	r3, [pc, #472]	; (caa4 <STACK_SIZE+0xaa4>)
    c8cc:	781b      	ldrb	r3, [r3, #0]
    c8ce:	f013 0f01 	tst.w	r3, #1
    c8d2:	f43f aa61 	beq.w	bd98 <uip_process+0x58>
      uip_connr->tcpstateflags = UIP_CLOSED;
    c8d6:	2200      	movs	r2, #0
    c8d8:	4b73      	ldr	r3, [pc, #460]	; (caa8 <STACK_SIZE+0xaa8>)
    c8da:	765a      	strb	r2, [r3, #25]
      uip_flags = UIP_CLOSE;
    c8dc:	2210      	movs	r2, #16
    c8de:	4b71      	ldr	r3, [pc, #452]	; (caa4 <STACK_SIZE+0xaa4>)
    c8e0:	701a      	strb	r2, [r3, #0]
      UIP_APPCALL();
    c8e2:	4b72      	ldr	r3, [pc, #456]	; (caac <STACK_SIZE+0xaac>)
    c8e4:	4798      	blx	r3
    c8e6:	f7ff ba57 	b.w	bd98 <uip_process+0x58>
    if(uip_len > 0) {
    c8ea:	4b6c      	ldr	r3, [pc, #432]	; (ca9c <STACK_SIZE+0xa9c>)
    c8ec:	8818      	ldrh	r0, [r3, #0]
    c8ee:	b108      	cbz	r0, c8f4 <STACK_SIZE+0x8f4>
      uip_add_rcv_nxt(uip_len);
    c8f0:	4b6f      	ldr	r3, [pc, #444]	; (cab0 <STACK_SIZE+0xab0>)
    c8f2:	4798      	blx	r3
    if(BUF->flags & TCP_FIN) {
    c8f4:	4b6a      	ldr	r3, [pc, #424]	; (caa0 <STACK_SIZE+0xaa0>)
    c8f6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
    c8fa:	f013 0f01 	tst.w	r3, #1
    c8fe:	d01d      	beq.n	c93c <STACK_SIZE+0x93c>
      if(uip_flags & UIP_ACKDATA) {
    c900:	4b68      	ldr	r3, [pc, #416]	; (caa4 <STACK_SIZE+0xaa4>)
    c902:	781b      	ldrb	r3, [r3, #0]
    c904:	f013 0f01 	tst.w	r3, #1
    c908:	d014      	beq.n	c934 <STACK_SIZE+0x934>
	uip_connr->tcpstateflags = UIP_TIME_WAIT;
    c90a:	4b67      	ldr	r3, [pc, #412]	; (caa8 <STACK_SIZE+0xaa8>)
    c90c:	2207      	movs	r2, #7
    c90e:	765a      	strb	r2, [r3, #25]
	uip_connr->timer = 0;
    c910:	2200      	movs	r2, #0
    c912:	769a      	strb	r2, [r3, #26]
	uip_connr->len = 0;
    c914:	821a      	strh	r2, [r3, #16]
      uip_add_rcv_nxt(1);
    c916:	2001      	movs	r0, #1
    c918:	4b65      	ldr	r3, [pc, #404]	; (cab0 <STACK_SIZE+0xab0>)
    c91a:	4798      	blx	r3
      uip_flags = UIP_CLOSE;
    c91c:	2210      	movs	r2, #16
    c91e:	4b61      	ldr	r3, [pc, #388]	; (caa4 <STACK_SIZE+0xaa4>)
    c920:	701a      	strb	r2, [r3, #0]
      UIP_APPCALL();
    c922:	4b62      	ldr	r3, [pc, #392]	; (caac <STACK_SIZE+0xaac>)
    c924:	4798      	blx	r3
  BUF->flags = TCP_ACK;
    c926:	2210      	movs	r2, #16
    c928:	4b5d      	ldr	r3, [pc, #372]	; (caa0 <STACK_SIZE+0xaa0>)
    c92a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    c92e:	4c5e      	ldr	r4, [pc, #376]	; (caa8 <STACK_SIZE+0xaa8>)
    c930:	f7ff ba4e 	b.w	bdd0 <uip_process+0x90>
	uip_connr->tcpstateflags = UIP_CLOSING;
    c934:	2206      	movs	r2, #6
    c936:	4b5c      	ldr	r3, [pc, #368]	; (caa8 <STACK_SIZE+0xaa8>)
    c938:	765a      	strb	r2, [r3, #25]
    c93a:	e7ec      	b.n	c916 <STACK_SIZE+0x916>
    } else if(uip_flags & UIP_ACKDATA) {
    c93c:	4b59      	ldr	r3, [pc, #356]	; (caa4 <STACK_SIZE+0xaa4>)
    c93e:	781b      	ldrb	r3, [r3, #0]
    c940:	f013 0f01 	tst.w	r3, #1
    c944:	d006      	beq.n	c954 <STACK_SIZE+0x954>
      uip_connr->tcpstateflags = UIP_FIN_WAIT_2;
    c946:	4b58      	ldr	r3, [pc, #352]	; (caa8 <STACK_SIZE+0xaa8>)
    c948:	2205      	movs	r2, #5
    c94a:	765a      	strb	r2, [r3, #25]
      uip_connr->len = 0;
    c94c:	2200      	movs	r2, #0
    c94e:	821a      	strh	r2, [r3, #16]
      goto drop;
    c950:	f7ff ba22 	b.w	bd98 <uip_process+0x58>
    if(uip_len > 0) {
    c954:	4b51      	ldr	r3, [pc, #324]	; (ca9c <STACK_SIZE+0xa9c>)
    c956:	881b      	ldrh	r3, [r3, #0]
    c958:	2b00      	cmp	r3, #0
    c95a:	d1e4      	bne.n	c926 <STACK_SIZE+0x926>
    c95c:	f7ff ba1c 	b.w	bd98 <uip_process+0x58>
    if(uip_len > 0) {
    c960:	4b4e      	ldr	r3, [pc, #312]	; (ca9c <STACK_SIZE+0xa9c>)
    c962:	8818      	ldrh	r0, [r3, #0]
    c964:	2800      	cmp	r0, #0
    c966:	d045      	beq.n	c9f4 <STACK_SIZE+0x9f4>
      uip_add_rcv_nxt(uip_len);
    c968:	4b51      	ldr	r3, [pc, #324]	; (cab0 <STACK_SIZE+0xab0>)
    c96a:	4798      	blx	r3
    if(BUF->flags & TCP_FIN) {
    c96c:	4b4c      	ldr	r3, [pc, #304]	; (caa0 <STACK_SIZE+0xaa0>)
    c96e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
    c972:	f013 0f01 	tst.w	r3, #1
    c976:	d00d      	beq.n	c994 <STACK_SIZE+0x994>
      uip_connr->tcpstateflags = UIP_TIME_WAIT;
    c978:	4b4b      	ldr	r3, [pc, #300]	; (caa8 <STACK_SIZE+0xaa8>)
    c97a:	2207      	movs	r2, #7
    c97c:	765a      	strb	r2, [r3, #25]
      uip_connr->timer = 0;
    c97e:	2200      	movs	r2, #0
    c980:	769a      	strb	r2, [r3, #26]
      uip_add_rcv_nxt(1);
    c982:	2001      	movs	r0, #1
    c984:	4b4a      	ldr	r3, [pc, #296]	; (cab0 <STACK_SIZE+0xab0>)
    c986:	4798      	blx	r3
      uip_flags = UIP_CLOSE;
    c988:	2210      	movs	r2, #16
    c98a:	4b46      	ldr	r3, [pc, #280]	; (caa4 <STACK_SIZE+0xaa4>)
    c98c:	701a      	strb	r2, [r3, #0]
      UIP_APPCALL();
    c98e:	4b47      	ldr	r3, [pc, #284]	; (caac <STACK_SIZE+0xaac>)
    c990:	4798      	blx	r3
      goto tcp_send_ack;
    c992:	e7c8      	b.n	c926 <STACK_SIZE+0x926>
    if(uip_len > 0) {
    c994:	4b41      	ldr	r3, [pc, #260]	; (ca9c <STACK_SIZE+0xa9c>)
    c996:	881b      	ldrh	r3, [r3, #0]
    c998:	2b00      	cmp	r3, #0
    c99a:	d1c4      	bne.n	c926 <STACK_SIZE+0x926>
    c99c:	f7ff b9fc 	b.w	bd98 <uip_process+0x58>
    if(uip_flags & UIP_ACKDATA) {
    c9a0:	4b40      	ldr	r3, [pc, #256]	; (caa4 <STACK_SIZE+0xaa4>)
    c9a2:	781b      	ldrb	r3, [r3, #0]
    c9a4:	f013 0f01 	tst.w	r3, #1
    c9a8:	f43f a9f6 	beq.w	bd98 <uip_process+0x58>
      uip_connr->tcpstateflags = UIP_TIME_WAIT;
    c9ac:	4b3e      	ldr	r3, [pc, #248]	; (caa8 <STACK_SIZE+0xaa8>)
    c9ae:	2207      	movs	r2, #7
    c9b0:	765a      	strb	r2, [r3, #25]
      uip_connr->timer = 0;
    c9b2:	2200      	movs	r2, #0
    c9b4:	769a      	strb	r2, [r3, #26]
    c9b6:	f7ff b9ef 	b.w	bd98 <uip_process+0x58>
    BUF->wnd[0] = ((UIP_RECEIVE_WINDOW) >> 8);
    c9ba:	4b39      	ldr	r3, [pc, #228]	; (caa0 <STACK_SIZE+0xaa0>)
    c9bc:	2206      	movs	r2, #6
    c9be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    BUF->wnd[1] = ((UIP_RECEIVE_WINDOW) & 0xff);
    c9c2:	226e      	movs	r2, #110	; 0x6e
    c9c4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    c9c8:	f7ff ba3c 	b.w	be44 <uip_process+0x104>
  switch(uip_connr->tcpstateflags & UIP_TS_MASK) {
    c9cc:	1ec2      	subs	r2, r0, #3
    c9ce:	2a05      	cmp	r2, #5
    c9d0:	f63f a9e2 	bhi.w	bd98 <uip_process+0x58>
    c9d4:	a101      	add	r1, pc, #4	; (adr r1, c9dc <STACK_SIZE+0x9dc>)
    c9d6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    c9da:	bf00      	nop
    c9dc:	0000c729 	.word	0x0000c729
    c9e0:	0000c8eb 	.word	0x0000c8eb
    c9e4:	0000c961 	.word	0x0000c961
    c9e8:	0000c9a1 	.word	0x0000c9a1
    c9ec:	0000c927 	.word	0x0000c927
    c9f0:	0000c8cb 	.word	0x0000c8cb
    if(BUF->flags & TCP_FIN) {
    c9f4:	4b2a      	ldr	r3, [pc, #168]	; (caa0 <STACK_SIZE+0xaa0>)
    c9f6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
    c9fa:	f013 0f01 	tst.w	r3, #1
    c9fe:	f43f a9cb 	beq.w	bd98 <uip_process+0x58>
    ca02:	e7b9      	b.n	c978 <STACK_SIZE+0x978>
  for(c = 0; c < UIP_CONNS; ++c) {
    ca04:	2101      	movs	r1, #1
    ca06:	4b2b      	ldr	r3, [pc, #172]	; (cab4 <STACK_SIZE+0xab4>)
    ca08:	7099      	strb	r1, [r3, #2]
  uip_conn = uip_connr;
    ca0a:	4b27      	ldr	r3, [pc, #156]	; (caa8 <STACK_SIZE+0xaa8>)
    ca0c:	492a      	ldr	r1, [pc, #168]	; (cab8 <STACK_SIZE+0xab8>)
    ca0e:	600b      	str	r3, [r1, #0]
  uip_connr->rto = uip_connr->timer = UIP_RTO;
    ca10:	2103      	movs	r1, #3
    ca12:	7699      	strb	r1, [r3, #26]
    ca14:	7619      	strb	r1, [r3, #24]
  uip_connr->sa = 0;
    ca16:	2100      	movs	r1, #0
    ca18:	7599      	strb	r1, [r3, #22]
  uip_connr->sv = 4;
    ca1a:	2004      	movs	r0, #4
    ca1c:	75d8      	strb	r0, [r3, #23]
  uip_connr->nrtx = 0;
    ca1e:	76d9      	strb	r1, [r3, #27]
  uip_connr->lport = BUF->destport;
    ca20:	809a      	strh	r2, [r3, #4]
  uip_connr->rport = BUF->srcport;
    ca22:	4d1f      	ldr	r5, [pc, #124]	; (caa0 <STACK_SIZE+0xaa0>)
    ca24:	f895 2022 	ldrb.w	r2, [r5, #34]	; 0x22
    ca28:	f895 1023 	ldrb.w	r1, [r5, #35]	; 0x23
    ca2c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    ca30:	80da      	strh	r2, [r3, #6]
  uip_ipaddr_copy(uip_connr->ripaddr, BUF->srcipaddr);
    ca32:	8b6a      	ldrh	r2, [r5, #26]
    ca34:	801a      	strh	r2, [r3, #0]
    ca36:	8baa      	ldrh	r2, [r5, #28]
    ca38:	805a      	strh	r2, [r3, #2]
  uip_connr->tcpstateflags = UIP_SYN_RCVD;
    ca3a:	2001      	movs	r0, #1
    ca3c:	7658      	strb	r0, [r3, #25]
  uip_connr->snd_nxt[0] = iss[0];
    ca3e:	4a1d      	ldr	r2, [pc, #116]	; (cab4 <STACK_SIZE+0xab4>)
    ca40:	7a11      	ldrb	r1, [r2, #8]
    ca42:	7319      	strb	r1, [r3, #12]
  uip_connr->snd_nxt[1] = iss[1];
    ca44:	7a51      	ldrb	r1, [r2, #9]
    ca46:	7359      	strb	r1, [r3, #13]
  uip_connr->snd_nxt[2] = iss[2];
    ca48:	7a91      	ldrb	r1, [r2, #10]
    ca4a:	7399      	strb	r1, [r3, #14]
  uip_connr->snd_nxt[3] = iss[3];
    ca4c:	7ad2      	ldrb	r2, [r2, #11]
    ca4e:	73da      	strb	r2, [r3, #15]
  uip_connr->len = 1;
    ca50:	8218      	strh	r0, [r3, #16]
  uip_connr->rcv_nxt[3] = BUF->seqno[3];
    ca52:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
    ca56:	72da      	strb	r2, [r3, #11]
  uip_connr->rcv_nxt[2] = BUF->seqno[2];
    ca58:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
    ca5c:	729a      	strb	r2, [r3, #10]
  uip_connr->rcv_nxt[1] = BUF->seqno[1];
    ca5e:	f895 2027 	ldrb.w	r2, [r5, #39]	; 0x27
    ca62:	725a      	strb	r2, [r3, #9]
  uip_connr->rcv_nxt[0] = BUF->seqno[0];
    ca64:	f895 2026 	ldrb.w	r2, [r5, #38]	; 0x26
    ca68:	721a      	strb	r2, [r3, #8]
  uip_add_rcv_nxt(1);
    ca6a:	4b11      	ldr	r3, [pc, #68]	; (cab0 <STACK_SIZE+0xab0>)
    ca6c:	4798      	blx	r3
  if((BUF->tcpoffset & 0xf0) > 0x50) {
    ca6e:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
    ca72:	f002 03f0 	and.w	r3, r2, #240	; 0xf0
    ca76:	2b50      	cmp	r3, #80	; 0x50
    ca78:	f77f ad47 	ble.w	c50a <STACK_SIZE+0x50a>
    for(c = 0; c < ((BUF->tcpoffset >> 4) - 5) << 2 ;) {
    ca7c:	2300      	movs	r3, #0
    ca7e:	490d      	ldr	r1, [pc, #52]	; (cab4 <STACK_SIZE+0xab4>)
    ca80:	708b      	strb	r3, [r1, #2]
    ca82:	0912      	lsrs	r2, r2, #4
    ca84:	3a05      	subs	r2, #5
    ca86:	0092      	lsls	r2, r2, #2
      opt = uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + c];
    ca88:	4628      	mov	r0, r5
    ca8a:	2601      	movs	r6, #1
    for(c = 0; c < ((BUF->tcpoffset >> 4) - 5) << 2 ;) {
    ca8c:	e50c      	b.n	c4a8 <STACK_SIZE+0x4a8>
    ca8e:	bf00      	nop
    ca90:	20008cfa 	.word	0x20008cfa
    ca94:	20008584 	.word	0x20008584
    ca98:	20008594 	.word	0x20008594
    ca9c:	20008580 	.word	0x20008580
    caa0:	20008654 	.word	0x20008654
    caa4:	2000858c 	.word	0x2000858c
    caa8:	2000859c 	.word	0x2000859c
    caac:	0000dc11 	.word	0x0000dc11
    cab0:	0000bbb5 	.word	0x0000bbb5
    cab4:	200072bc 	.word	0x200072bc
    cab8:	20008598 	.word	0x20008598

0000cabc <htons>:
  return HTONS(val);
    cabc:	0a03      	lsrs	r3, r0, #8
    cabe:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
}
    cac2:	b280      	uxth	r0, r0
    cac4:	4770      	bx	lr
	...

0000cac8 <uip_send>:
/*---------------------------------------------------------------------------*/
void
uip_send(const void *data, int len)
{
  if(len > 0) {
    cac8:	1e0a      	subs	r2, r1, #0
    caca:	dd0c      	ble.n	cae6 <uip_send+0x1e>
{
    cacc:	b508      	push	{r3, lr}
    uip_slen = len;
    cace:	4b06      	ldr	r3, [pc, #24]	; (cae8 <uip_send+0x20>)
    cad0:	801a      	strh	r2, [r3, #0]
    if(data != uip_sappdata) {
    cad2:	4b06      	ldr	r3, [pc, #24]	; (caec <uip_send+0x24>)
    cad4:	681b      	ldr	r3, [r3, #0]
    cad6:	4283      	cmp	r3, r0
    cad8:	d004      	beq.n	cae4 <uip_send+0x1c>
    cada:	4601      	mov	r1, r0
      memcpy(uip_sappdata, (data), uip_slen);
    cadc:	b292      	uxth	r2, r2
    cade:	4618      	mov	r0, r3
    cae0:	4b03      	ldr	r3, [pc, #12]	; (caf0 <uip_send+0x28>)
    cae2:	4798      	blx	r3
    cae4:	bd08      	pop	{r3, pc}
    cae6:	4770      	bx	lr
    cae8:	20008cfa 	.word	0x20008cfa
    caec:	20008584 	.word	0x20008584
    caf0:	0000dc9f 	.word	0x0000dc9f

0000caf4 <uip_arp_update>:

}
/*-----------------------------------------------------------------------------------*/
static void
uip_arp_update(u16_t *ipaddr, struct uip_eth_addr *ethaddr)
{
    caf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    caf8:	b083      	sub	sp, #12
  register struct arp_entry *tabptr;
  /* Walk through the ARP mapping table and try to find an entry to
     update. If none is found, the IP -> MAC address mapping is
     inserted in the ARP table. */
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    cafa:	2500      	movs	r5, #0
    cafc:	4c55      	ldr	r4, [pc, #340]	; (cc54 <uip_arp_update+0x160>)
    cafe:	f804 5b04 	strb.w	r5, [r4], #4
    cb02:	4622      	mov	r2, r4
    cb04:	462b      	mov	r3, r5
    cb06:	46ae      	mov	lr, r5
    cb08:	f04f 0801 	mov.w	r8, #1
    cb0c:	e009      	b.n	cb22 <uip_arp_update+0x2e>
    cb0e:	4a51      	ldr	r2, [pc, #324]	; (cc54 <uip_arp_update+0x160>)
    cb10:	7015      	strb	r5, [r2, #0]
    cb12:	e017      	b.n	cb44 <uip_arp_update+0x50>
    cb14:	1c5d      	adds	r5, r3, #1
    cb16:	b2ed      	uxtb	r5, r5
    cb18:	3301      	adds	r3, #1
    cb1a:	320c      	adds	r2, #12
    cb1c:	46c6      	mov	lr, r8
    cb1e:	2b08      	cmp	r3, #8
    cb20:	d023      	beq.n	cb6a <uip_arp_update+0x76>

    tabptr = &arp_table[i];
    cb22:	469c      	mov	ip, r3
    /* Only check those entries that are actually in use. */
    if(tabptr->ipaddr[0] != 0 &&
    cb24:	8816      	ldrh	r6, [r2, #0]
    cb26:	2e00      	cmp	r6, #0
    cb28:	d0f4      	beq.n	cb14 <uip_arp_update+0x20>
       tabptr->ipaddr[1] != 0) {
    cb2a:	8857      	ldrh	r7, [r2, #2]
    if(tabptr->ipaddr[0] != 0 &&
    cb2c:	2f00      	cmp	r7, #0
    cb2e:	d0f1      	beq.n	cb14 <uip_arp_update+0x20>

      /* Check if the source IP address of the incoming packet matches
         the IP address in this ARP table entry. */
      if(ipaddr[0] == tabptr->ipaddr[0] &&
    cb30:	f8b0 9000 	ldrh.w	r9, [r0]
    cb34:	45b1      	cmp	r9, r6
    cb36:	d1ed      	bne.n	cb14 <uip_arp_update+0x20>
    cb38:	8846      	ldrh	r6, [r0, #2]
    cb3a:	42be      	cmp	r6, r7
    cb3c:	d1ea      	bne.n	cb14 <uip_arp_update+0x20>
    cb3e:	f1be 0f00 	cmp.w	lr, #0
    cb42:	d1e4      	bne.n	cb0e <uip_arp_update+0x1a>
	 ipaddr[1] == tabptr->ipaddr[1]) {
	 
	/* An old entry found, update this and return. */
	memcpy(tabptr->ethaddr.addr, ethaddr->addr, 6);
    cb44:	4a43      	ldr	r2, [pc, #268]	; (cc54 <uip_arp_update+0x160>)
    cb46:	1d14      	adds	r4, r2, #4
    cb48:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    cb4c:	009b      	lsls	r3, r3, #2
    cb4e:	3304      	adds	r3, #4
    cb50:	18e5      	adds	r5, r4, r3
    cb52:	6808      	ldr	r0, [r1, #0]
    cb54:	50e0      	str	r0, [r4, r3]
    cb56:	888b      	ldrh	r3, [r1, #4]
    cb58:	80ab      	strh	r3, [r5, #4]
	tabptr->time = arptime;
    cb5a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
    cb5e:	eb02 038c 	add.w	r3, r2, ip, lsl #2
    cb62:	f892 2064 	ldrb.w	r2, [r2, #100]	; 0x64
    cb66:	739a      	strb	r2, [r3, #14]

	return;
    cb68:	e035      	b.n	cbd6 <uip_arp_update+0xe2>

  /* If we get here, no existing ARP table entry was found, so we
     create one. */

  /* First, we try to find an unused entry in the ARP table. */
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    cb6a:	2300      	movs	r3, #0
    cb6c:	4a39      	ldr	r2, [pc, #228]	; (cc54 <uip_arp_update+0x160>)
    cb6e:	7013      	strb	r3, [r2, #0]
    cb70:	4622      	mov	r2, r4
    cb72:	461d      	mov	r5, r3
    cb74:	469e      	mov	lr, r3
    cb76:	461f      	mov	r7, r3
    cb78:	f04f 0c01 	mov.w	ip, #1
    cb7c:	e00a      	b.n	cb94 <uip_arp_update+0xa0>
    cb7e:	4a35      	ldr	r2, [pc, #212]	; (cc54 <uip_arp_update+0x160>)
    cb80:	7017      	strb	r7, [r2, #0]
    cb82:	e011      	b.n	cba8 <uip_arp_update+0xb4>
    cb84:	3301      	adds	r3, #1
    cb86:	b2df      	uxtb	r7, r3
    cb88:	1c6e      	adds	r6, r5, #1
    cb8a:	320c      	adds	r2, #12
    cb8c:	46e6      	mov	lr, ip
    cb8e:	2e08      	cmp	r6, #8
    cb90:	d00c      	beq.n	cbac <uip_arp_update+0xb8>
    cb92:	4635      	mov	r5, r6
    cb94:	b2eb      	uxtb	r3, r5
    tabptr = &arp_table[i];
    if(tabptr->ipaddr[0] == 0 &&
    cb96:	8816      	ldrh	r6, [r2, #0]
    cb98:	2e00      	cmp	r6, #0
    cb9a:	d1f3      	bne.n	cb84 <uip_arp_update+0x90>
    cb9c:	8856      	ldrh	r6, [r2, #2]
    cb9e:	2e00      	cmp	r6, #0
    cba0:	d1f0      	bne.n	cb84 <uip_arp_update+0x90>
    cba2:	f1be 0f00 	cmp.w	lr, #0
    cba6:	d1ea      	bne.n	cb7e <uip_arp_update+0x8a>
    cba8:	461f      	mov	r7, r3
    cbaa:	e001      	b.n	cbb0 <uip_arp_update+0xbc>
    cbac:	4b29      	ldr	r3, [pc, #164]	; (cc54 <uip_arp_update+0x160>)
    cbae:	701f      	strb	r7, [r3, #0]
    }
  }

  /* If no unused entry is found, we try to find the oldest entry and
     throw it away. */
  if(i == UIP_ARPTAB_SIZE) {
    cbb0:	2f08      	cmp	r7, #8
    cbb2:	d013      	beq.n	cbdc <uip_arp_update+0xe8>
    tabptr = &arp_table[i];
    cbb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    cbb8:	4b27      	ldr	r3, [pc, #156]	; (cc58 <uip_arp_update+0x164>)
    cbba:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    tabptr = &arp_table[i];
  }

  /* Now, i is the ARP table entry which we will fill with the new
     information. */
  memcpy(tabptr->ipaddr, ipaddr, 4);
    cbbe:	6802      	ldr	r2, [r0, #0]
    cbc0:	462b      	mov	r3, r5
    cbc2:	f843 2b04 	str.w	r2, [r3], #4
  memcpy(tabptr->ethaddr.addr, ethaddr->addr, 6);
    cbc6:	6808      	ldr	r0, [r1, #0]
    cbc8:	6068      	str	r0, [r5, #4]
    cbca:	888a      	ldrh	r2, [r1, #4]
    cbcc:	809a      	strh	r2, [r3, #4]
  tabptr->time = arptime;
    cbce:	4b21      	ldr	r3, [pc, #132]	; (cc54 <uip_arp_update+0x160>)
    cbd0:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
    cbd4:	72ab      	strb	r3, [r5, #10]
}
    cbd6:	b003      	add	sp, #12
    cbd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmpage = 0;
    cbdc:	4b1d      	ldr	r3, [pc, #116]	; (cc54 <uip_arp_update+0x160>)
    cbde:	2200      	movs	r2, #0
    cbe0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    c = 0;
    cbe4:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      if(arptime - tabptr->time > tmpage) {
    cbe8:	f893 9064 	ldrb.w	r9, [r3, #100]	; 0x64
    cbec:	46ce      	mov	lr, r9
    cbee:	4615      	mov	r5, r2
    cbf0:	4693      	mov	fp, r2
    cbf2:	4692      	mov	sl, r2
    cbf4:	4694      	mov	ip, r2
	tmpage = arptime - tabptr->time;
    cbf6:	f04f 0801 	mov.w	r8, #1
    cbfa:	f8cd 8004 	str.w	r8, [sp, #4]
    cbfe:	e003      	b.n	cc08 <uip_arp_update+0x114>
    cc00:	3501      	adds	r5, #1
    cc02:	340c      	adds	r4, #12
    for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    cc04:	2d08      	cmp	r5, #8
    cc06:	d00d      	beq.n	cc24 <uip_arp_update+0x130>
    cc08:	b2ef      	uxtb	r7, r5
      if(arptime - tabptr->time > tmpage) {
    cc0a:	7aa3      	ldrb	r3, [r4, #10]
    cc0c:	ebae 0603 	sub.w	r6, lr, r3
    cc10:	4296      	cmp	r6, r2
    cc12:	ddf5      	ble.n	cc00 <uip_arp_update+0x10c>
	tmpage = arptime - tabptr->time;
    cc14:	eba9 0303 	sub.w	r3, r9, r3
    cc18:	b2da      	uxtb	r2, r3
	c = i;
    cc1a:	46ba      	mov	sl, r7
	tmpage = arptime - tabptr->time;
    cc1c:	46c3      	mov	fp, r8
    cc1e:	f8dd c004 	ldr.w	ip, [sp, #4]
    cc22:	e7ed      	b.n	cc00 <uip_arp_update+0x10c>
    cc24:	f1bc 0f00 	cmp.w	ip, #0
    cc28:	d10f      	bne.n	cc4a <uip_arp_update+0x156>
    cc2a:	f1bb 0f00 	cmp.w	fp, #0
    cc2e:	d002      	beq.n	cc36 <uip_arp_update+0x142>
    cc30:	4b08      	ldr	r3, [pc, #32]	; (cc54 <uip_arp_update+0x160>)
    cc32:	f883 a066 	strb.w	sl, [r3, #102]	; 0x66
    i = c;
    cc36:	4d07      	ldr	r5, [pc, #28]	; (cc54 <uip_arp_update+0x160>)
    cc38:	f895 3066 	ldrb.w	r3, [r5, #102]	; 0x66
    cc3c:	f805 3b04 	strb.w	r3, [r5], #4
    tabptr = &arp_table[i];
    cc40:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    cc44:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    cc48:	e7b9      	b.n	cbbe <uip_arp_update+0xca>
    cc4a:	4b02      	ldr	r3, [pc, #8]	; (cc54 <uip_arp_update+0x160>)
    cc4c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    cc50:	e7eb      	b.n	cc2a <uip_arp_update+0x136>
    cc52:	bf00      	nop
    cc54:	200072d4 	.word	0x200072d4
    cc58:	200072d8 	.word	0x200072d8

0000cc5c <uip_arp_timer>:
{
    cc5c:	b4f0      	push	{r4, r5, r6, r7}
  ++arptime;
    cc5e:	4a10      	ldr	r2, [pc, #64]	; (cca0 <uip_arp_timer+0x44>)
    cc60:	f892 6064 	ldrb.w	r6, [r2, #100]	; 0x64
    cc64:	3601      	adds	r6, #1
    cc66:	b2f6      	uxtb	r6, r6
    cc68:	f882 6064 	strb.w	r6, [r2, #100]	; 0x64
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    cc6c:	2300      	movs	r3, #0
    cc6e:	f802 3b04 	strb.w	r3, [r2], #4
      memset(tabptr->ipaddr, 0, 4);
    cc72:	461f      	mov	r7, r3
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    cc74:	4d0a      	ldr	r5, [pc, #40]	; (cca0 <uip_arp_timer+0x44>)
    cc76:	e005      	b.n	cc84 <uip_arp_timer+0x28>
    cc78:	3301      	adds	r3, #1
    cc7a:	b2db      	uxtb	r3, r3
    cc7c:	702b      	strb	r3, [r5, #0]
    cc7e:	320c      	adds	r2, #12
    cc80:	2b08      	cmp	r3, #8
    cc82:	d00b      	beq.n	cc9c <uip_arp_timer+0x40>
    if((tabptr->ipaddr[0] | tabptr->ipaddr[1]) != 0 &&
    cc84:	8811      	ldrh	r1, [r2, #0]
    cc86:	8850      	ldrh	r0, [r2, #2]
    cc88:	4301      	orrs	r1, r0
    cc8a:	b289      	uxth	r1, r1
    cc8c:	2900      	cmp	r1, #0
    cc8e:	d0f3      	beq.n	cc78 <uip_arp_timer+0x1c>
       arptime - tabptr->time >= UIP_ARP_MAXAGE) {
    cc90:	7a91      	ldrb	r1, [r2, #10]
    cc92:	1a71      	subs	r1, r6, r1
    if((tabptr->ipaddr[0] | tabptr->ipaddr[1]) != 0 &&
    cc94:	2977      	cmp	r1, #119	; 0x77
      memset(tabptr->ipaddr, 0, 4);
    cc96:	bfc8      	it	gt
    cc98:	6017      	strgt	r7, [r2, #0]
    cc9a:	e7ed      	b.n	cc78 <uip_arp_timer+0x1c>
}
    cc9c:	bcf0      	pop	{r4, r5, r6, r7}
    cc9e:	4770      	bx	lr
    cca0:	200072d4 	.word	0x200072d4

0000cca4 <uip_arp_arpin>:
/*-----------------------------------------------------------------------------------*/
void
uip_arp_arpin(void)
{
  
  if(uip_len < sizeof(struct arp_hdr)) {
    cca4:	4b33      	ldr	r3, [pc, #204]	; (cd74 <uip_arp_arpin+0xd0>)
    cca6:	881b      	ldrh	r3, [r3, #0]
    cca8:	2b29      	cmp	r3, #41	; 0x29
    ccaa:	d90c      	bls.n	ccc6 <uip_arp_arpin+0x22>
{
    ccac:	b510      	push	{r4, lr}
    uip_len = 0;
    return;
  }
  uip_len = 0;
    ccae:	2200      	movs	r2, #0
    ccb0:	4b30      	ldr	r3, [pc, #192]	; (cd74 <uip_arp_arpin+0xd0>)
    ccb2:	801a      	strh	r2, [r3, #0]
  
  switch(BUF->opcode) {
    ccb4:	4b30      	ldr	r3, [pc, #192]	; (cd78 <uip_arp_arpin+0xd4>)
    ccb6:	8a9b      	ldrh	r3, [r3, #20]
    ccb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    ccbc:	d007      	beq.n	ccce <uip_arp_arpin+0x2a>
    ccbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    ccc2:	d044      	beq.n	cd4e <uip_arp_arpin+0xaa>
    ccc4:	bd10      	pop	{r4, pc}
    uip_len = 0;
    ccc6:	2200      	movs	r2, #0
    ccc8:	4b2a      	ldr	r3, [pc, #168]	; (cd74 <uip_arp_arpin+0xd0>)
    ccca:	801a      	strh	r2, [r3, #0]
    return;
    cccc:	4770      	bx	lr
  case HTONS(ARP_REQUEST):
    /* ARP request. If it asked for our address, we send out a
       reply. */
    if(uip_ipaddr_cmp(BUF->dipaddr, uip_hostaddr)) {
    ccce:	4b2a      	ldr	r3, [pc, #168]	; (cd78 <uip_arp_arpin+0xd4>)
    ccd0:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    ccd2:	4b2a      	ldr	r3, [pc, #168]	; (cd7c <uip_arp_arpin+0xd8>)
    ccd4:	881b      	ldrh	r3, [r3, #0]
    ccd6:	429a      	cmp	r2, r3
    ccd8:	d000      	beq.n	ccdc <uip_arp_arpin+0x38>
    ccda:	bd10      	pop	{r4, pc}
    ccdc:	4b26      	ldr	r3, [pc, #152]	; (cd78 <uip_arp_arpin+0xd4>)
    ccde:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    cce0:	4b26      	ldr	r3, [pc, #152]	; (cd7c <uip_arp_arpin+0xd8>)
    cce2:	885b      	ldrh	r3, [r3, #2]
    cce4:	429a      	cmp	r2, r3
    cce6:	d1f8      	bne.n	ccda <uip_arp_arpin+0x36>
      /* First, we register the one who made the request in our ARP
	 table, since it is likely that we will do more communication
	 with this host in the future. */
      uip_arp_update(BUF->sipaddr, &BUF->shwaddr);
    cce8:	4c25      	ldr	r4, [pc, #148]	; (cd80 <uip_arp_arpin+0xdc>)
    ccea:	4621      	mov	r1, r4
    ccec:	1da0      	adds	r0, r4, #6
    ccee:	4b25      	ldr	r3, [pc, #148]	; (cd84 <uip_arp_arpin+0xe0>)
    ccf0:	4798      	blx	r3
      
      /* The reply opcode is 2. */
      BUF->opcode = HTONS(2);
    ccf2:	2200      	movs	r2, #0
    ccf4:	f804 2c02 	strb.w	r2, [r4, #-2]
    ccf8:	2202      	movs	r2, #2
    ccfa:	f804 2c01 	strb.w	r2, [r4, #-1]

      memcpy(BUF->dhwaddr.addr, BUF->shwaddr.addr, 6);
    ccfe:	6821      	ldr	r1, [r4, #0]
    cd00:	f8c4 100a 	str.w	r1, [r4, #10]
    cd04:	88a1      	ldrh	r1, [r4, #4]
    cd06:	81e1      	strh	r1, [r4, #14]
      memcpy(BUF->shwaddr.addr, uip_ethaddr.addr, 6);
    cd08:	491f      	ldr	r1, [pc, #124]	; (cd88 <uip_arp_arpin+0xe4>)
    cd0a:	6808      	ldr	r0, [r1, #0]
    cd0c:	6020      	str	r0, [r4, #0]
    cd0e:	8889      	ldrh	r1, [r1, #4]
    cd10:	80a1      	strh	r1, [r4, #4]
      memcpy(BUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
    cd12:	f844 0c10 	str.w	r0, [r4, #-16]
    cd16:	f824 1c0c 	strh.w	r1, [r4, #-12]
      memcpy(BUF->ethhdr.dest.addr, BUF->dhwaddr.addr, 6);
    cd1a:	f8d4 100a 	ldr.w	r1, [r4, #10]
    cd1e:	f844 1c16 	str.w	r1, [r4, #-22]
    cd22:	89e2      	ldrh	r2, [r4, #14]
    cd24:	f824 2c12 	strh.w	r2, [r4, #-18]
      
      BUF->dipaddr[0] = BUF->sipaddr[0];
    cd28:	88e2      	ldrh	r2, [r4, #6]
    cd2a:	8222      	strh	r2, [r4, #16]
      BUF->dipaddr[1] = BUF->sipaddr[1];
    cd2c:	8922      	ldrh	r2, [r4, #8]
    cd2e:	8262      	strh	r2, [r4, #18]
      BUF->sipaddr[0] = uip_hostaddr[0];
    cd30:	4a12      	ldr	r2, [pc, #72]	; (cd7c <uip_arp_arpin+0xd8>)
    cd32:	8811      	ldrh	r1, [r2, #0]
    cd34:	80e1      	strh	r1, [r4, #6]
      BUF->sipaddr[1] = uip_hostaddr[1];
    cd36:	8852      	ldrh	r2, [r2, #2]
    cd38:	8122      	strh	r2, [r4, #8]

      BUF->ethhdr.type = HTONS(UIP_ETHTYPE_ARP);
    cd3a:	2208      	movs	r2, #8
    cd3c:	f804 2c0a 	strb.w	r2, [r4, #-10]
    cd40:	2206      	movs	r2, #6
    cd42:	f804 2c09 	strb.w	r2, [r4, #-9]
      uip_len = sizeof(struct arp_hdr);
    cd46:	222a      	movs	r2, #42	; 0x2a
    cd48:	4b0a      	ldr	r3, [pc, #40]	; (cd74 <uip_arp_arpin+0xd0>)
    cd4a:	801a      	strh	r2, [r3, #0]
    cd4c:	bd10      	pop	{r4, pc}
    }
    break;
  case HTONS(ARP_REPLY):
    /* ARP reply. We insert or update the ARP table if it was meant
       for us. */
    if(uip_ipaddr_cmp(BUF->dipaddr, uip_hostaddr)) {
    cd4e:	4b0a      	ldr	r3, [pc, #40]	; (cd78 <uip_arp_arpin+0xd4>)
    cd50:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    cd52:	4b0a      	ldr	r3, [pc, #40]	; (cd7c <uip_arp_arpin+0xd8>)
    cd54:	881b      	ldrh	r3, [r3, #0]
    cd56:	429a      	cmp	r2, r3
    cd58:	d1bf      	bne.n	ccda <uip_arp_arpin+0x36>
    cd5a:	4b07      	ldr	r3, [pc, #28]	; (cd78 <uip_arp_arpin+0xd4>)
    cd5c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    cd5e:	4b07      	ldr	r3, [pc, #28]	; (cd7c <uip_arp_arpin+0xd8>)
    cd60:	885b      	ldrh	r3, [r3, #2]
    cd62:	429a      	cmp	r2, r3
    cd64:	d1b9      	bne.n	ccda <uip_arp_arpin+0x36>
      uip_arp_update(BUF->sipaddr, &BUF->shwaddr);
    cd66:	4806      	ldr	r0, [pc, #24]	; (cd80 <uip_arp_arpin+0xdc>)
    cd68:	4601      	mov	r1, r0
    cd6a:	3006      	adds	r0, #6
    cd6c:	4b05      	ldr	r3, [pc, #20]	; (cd84 <uip_arp_arpin+0xe0>)
    cd6e:	4798      	blx	r3
    cd70:	e7b3      	b.n	ccda <uip_arp_arpin+0x36>
    cd72:	bf00      	nop
    cd74:	20008580 	.word	0x20008580
    cd78:	20008654 	.word	0x20008654
    cd7c:	20008650 	.word	0x20008650
    cd80:	2000866a 	.word	0x2000866a
    cd84:	0000caf5 	.word	0x0000caf5
    cd88:	200072cc 	.word	0x200072cc

0000cd8c <uip_arp_out>:
 * uip_len.
 */
/*-----------------------------------------------------------------------------------*/
void
uip_arp_out(void)
{
    cd8c:	b5f0      	push	{r4, r5, r6, r7, lr}

     If not ARP table entry is found, we overwrite the original IP
     packet with an ARP request for the IP address. */

  /* First check if destination is a local broadcast. */
  if(uip_ipaddr_cmp(IPBUF->destipaddr, broadcast_ipaddr)) {
    cd8e:	4b53      	ldr	r3, [pc, #332]	; (cedc <uip_arp_out+0x150>)
    cd90:	8bda      	ldrh	r2, [r3, #30]
    cd92:	f64f 73ff 	movw	r3, #65535	; 0xffff
    cd96:	429a      	cmp	r2, r3
    cd98:	d024      	beq.n	cde4 <uip_arp_out+0x58>
    memcpy(IPBUF->ethhdr.dest.addr, broadcast_ethaddr.addr, 6);
  } else {
    /* Check if the destination address is on the local network. */
    if(!uip_ipaddr_maskcmp(IPBUF->destipaddr, uip_hostaddr, uip_netmask)) {
    cd9a:	4b51      	ldr	r3, [pc, #324]	; (cee0 <uip_arp_out+0x154>)
    cd9c:	881b      	ldrh	r3, [r3, #0]
    cd9e:	4053      	eors	r3, r2
    cda0:	4950      	ldr	r1, [pc, #320]	; (cee4 <uip_arp_out+0x158>)
    cda2:	8809      	ldrh	r1, [r1, #0]
    cda4:	420b      	tst	r3, r1
    cda6:	d108      	bne.n	cdba <uip_arp_out+0x2e>
    cda8:	4b4c      	ldr	r3, [pc, #304]	; (cedc <uip_arp_out+0x150>)
    cdaa:	8c19      	ldrh	r1, [r3, #32]
    cdac:	4b4c      	ldr	r3, [pc, #304]	; (cee0 <uip_arp_out+0x154>)
    cdae:	885b      	ldrh	r3, [r3, #2]
    cdb0:	404b      	eors	r3, r1
    cdb2:	484c      	ldr	r0, [pc, #304]	; (cee4 <uip_arp_out+0x158>)
    cdb4:	8840      	ldrh	r0, [r0, #2]
    cdb6:	4203      	tst	r3, r0
    cdb8:	d021      	beq.n	cdfe <uip_arp_out+0x72>
      /* Destination address was not on the local network, so we need to
	 use the default router's IP address instead of the destination
	 address when determining the MAC address. */
      uip_ipaddr_copy(ipaddr, uip_draddr);
    cdba:	4b4b      	ldr	r3, [pc, #300]	; (cee8 <uip_arp_out+0x15c>)
    cdbc:	4a4b      	ldr	r2, [pc, #300]	; (ceec <uip_arp_out+0x160>)
    cdbe:	8811      	ldrh	r1, [r2, #0]
    cdc0:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
    cdc4:	8852      	ldrh	r2, [r2, #2]
    cdc6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    } else {
      /* Else, we use the destination IP address. */
      uip_ipaddr_copy(ipaddr, IPBUF->destipaddr);
    }
      
    for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    cdca:	4a47      	ldr	r2, [pc, #284]	; (cee8 <uip_arp_out+0x15c>)
    cdcc:	2300      	movs	r3, #0
    cdce:	7013      	strb	r3, [r2, #0]
      tabptr = &arp_table[i];
      if(uip_ipaddr_cmp(ipaddr, tabptr->ipaddr)) {
    cdd0:	f8b2 6068 	ldrh.w	r6, [r2, #104]	; 0x68
    cdd4:	f8b2 e06a 	ldrh.w	lr, [r2, #106]	; 0x6a
    cdd8:	3204      	adds	r2, #4
    cdda:	4619      	mov	r1, r3
    cddc:	461d      	mov	r5, r3
    cdde:	461c      	mov	r4, r3
    cde0:	2701      	movs	r7, #1
    cde2:	e01d      	b.n	ce20 <uip_arp_out+0x94>
  if(uip_ipaddr_cmp(IPBUF->destipaddr, broadcast_ipaddr)) {
    cde4:	4b3d      	ldr	r3, [pc, #244]	; (cedc <uip_arp_out+0x150>)
    cde6:	8c19      	ldrh	r1, [r3, #32]
    cde8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    cdec:	4299      	cmp	r1, r3
    cdee:	d1d4      	bne.n	cd9a <uip_arp_out+0xe>
    memcpy(IPBUF->ethhdr.dest.addr, broadcast_ethaddr.addr, 6);
    cdf0:	4b3a      	ldr	r3, [pc, #232]	; (cedc <uip_arp_out+0x150>)
    cdf2:	4a3f      	ldr	r2, [pc, #252]	; (cef0 <uip_arp_out+0x164>)
    cdf4:	6810      	ldr	r0, [r2, #0]
    cdf6:	6018      	str	r0, [r3, #0]
    cdf8:	8892      	ldrh	r2, [r2, #4]
    cdfa:	809a      	strh	r2, [r3, #4]
    cdfc:	e02a      	b.n	ce54 <uip_arp_out+0xc8>
      uip_ipaddr_copy(ipaddr, IPBUF->destipaddr);
    cdfe:	4b3a      	ldr	r3, [pc, #232]	; (cee8 <uip_arp_out+0x15c>)
    ce00:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    ce04:	f8a3 106a 	strh.w	r1, [r3, #106]	; 0x6a
    ce08:	e7df      	b.n	cdca <uip_arp_out+0x3e>
    ce0a:	4a37      	ldr	r2, [pc, #220]	; (cee8 <uip_arp_out+0x15c>)
    ce0c:	7014      	strb	r4, [r2, #0]
    ce0e:	e010      	b.n	ce32 <uip_arp_out+0xa6>
    ce10:	3301      	adds	r3, #1
    ce12:	b2dc      	uxtb	r4, r3
    ce14:	1c48      	adds	r0, r1, #1
    ce16:	320c      	adds	r2, #12
    ce18:	463d      	mov	r5, r7
    for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    ce1a:	2808      	cmp	r0, #8
    ce1c:	d00b      	beq.n	ce36 <uip_arp_out+0xaa>
    ce1e:	4601      	mov	r1, r0
    ce20:	b2cb      	uxtb	r3, r1
      if(uip_ipaddr_cmp(ipaddr, tabptr->ipaddr)) {
    ce22:	8810      	ldrh	r0, [r2, #0]
    ce24:	42b0      	cmp	r0, r6
    ce26:	d1f3      	bne.n	ce10 <uip_arp_out+0x84>
    ce28:	8850      	ldrh	r0, [r2, #2]
    ce2a:	4570      	cmp	r0, lr
    ce2c:	d1f0      	bne.n	ce10 <uip_arp_out+0x84>
    ce2e:	2d00      	cmp	r5, #0
    ce30:	d1eb      	bne.n	ce0a <uip_arp_out+0x7e>
    ce32:	461c      	mov	r4, r3
    ce34:	e001      	b.n	ce3a <uip_arp_out+0xae>
    ce36:	4b2c      	ldr	r3, [pc, #176]	; (cee8 <uip_arp_out+0x15c>)
    ce38:	701c      	strb	r4, [r3, #0]
	break;
      }
    }

    if(i == UIP_ARPTAB_SIZE) {
    ce3a:	2c08      	cmp	r4, #8
    ce3c:	d01a      	beq.n	ce74 <uip_arp_out+0xe8>
      uip_len = sizeof(struct arp_hdr);
      return;
    }

    /* Build an ethernet header. */
    memcpy(IPBUF->ethhdr.dest.addr, tabptr->ethaddr.addr, 6);
    ce3e:	4a27      	ldr	r2, [pc, #156]	; (cedc <uip_arp_out+0x150>)
    ce40:	482c      	ldr	r0, [pc, #176]	; (cef4 <uip_arp_out+0x168>)
    ce42:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    ce46:	009b      	lsls	r3, r3, #2
    ce48:	3304      	adds	r3, #4
    ce4a:	18c1      	adds	r1, r0, r3
    ce4c:	58c0      	ldr	r0, [r0, r3]
    ce4e:	6010      	str	r0, [r2, #0]
    ce50:	888b      	ldrh	r3, [r1, #4]
    ce52:	8093      	strh	r3, [r2, #4]
  }
  memcpy(IPBUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
    ce54:	4b21      	ldr	r3, [pc, #132]	; (cedc <uip_arp_out+0x150>)
    ce56:	4a28      	ldr	r2, [pc, #160]	; (cef8 <uip_arp_out+0x16c>)
    ce58:	6811      	ldr	r1, [r2, #0]
    ce5a:	f8c3 1006 	str.w	r1, [r3, #6]
    ce5e:	8892      	ldrh	r2, [r2, #4]
    ce60:	815a      	strh	r2, [r3, #10]
  
  IPBUF->ethhdr.type = HTONS(UIP_ETHTYPE_IP);
    ce62:	2208      	movs	r2, #8
    ce64:	731a      	strb	r2, [r3, #12]
    ce66:	2200      	movs	r2, #0
    ce68:	735a      	strb	r2, [r3, #13]

  uip_len += sizeof(struct uip_eth_hdr);
    ce6a:	4a24      	ldr	r2, [pc, #144]	; (cefc <uip_arp_out+0x170>)
    ce6c:	8813      	ldrh	r3, [r2, #0]
    ce6e:	330e      	adds	r3, #14
    ce70:	8013      	strh	r3, [r2, #0]
    ce72:	bdf0      	pop	{r4, r5, r6, r7, pc}
      memset(BUF->ethhdr.dest.addr, 0xff, 6);
    ce74:	4b19      	ldr	r3, [pc, #100]	; (cedc <uip_arp_out+0x150>)
    ce76:	f04f 32ff 	mov.w	r2, #4294967295
    ce7a:	601a      	str	r2, [r3, #0]
    ce7c:	809a      	strh	r2, [r3, #4]
      memset(BUF->dhwaddr.addr, 0x00, 6);
    ce7e:	2200      	movs	r2, #0
    ce80:	621a      	str	r2, [r3, #32]
    ce82:	849a      	strh	r2, [r3, #36]	; 0x24
      memcpy(BUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
    ce84:	491c      	ldr	r1, [pc, #112]	; (cef8 <uip_arp_out+0x16c>)
    ce86:	6808      	ldr	r0, [r1, #0]
    ce88:	f8c3 0006 	str.w	r0, [r3, #6]
    ce8c:	8889      	ldrh	r1, [r1, #4]
    ce8e:	8159      	strh	r1, [r3, #10]
      memcpy(BUF->shwaddr.addr, uip_ethaddr.addr, 6);
    ce90:	f8c3 0016 	str.w	r0, [r3, #22]
    ce94:	8359      	strh	r1, [r3, #26]
      uip_ipaddr_copy(BUF->dipaddr, ipaddr);
    ce96:	4914      	ldr	r1, [pc, #80]	; (cee8 <uip_arp_out+0x15c>)
    ce98:	f8b1 0068 	ldrh.w	r0, [r1, #104]	; 0x68
    ce9c:	84d8      	strh	r0, [r3, #38]	; 0x26
    ce9e:	f8b1 106a 	ldrh.w	r1, [r1, #106]	; 0x6a
    cea2:	8519      	strh	r1, [r3, #40]	; 0x28
      uip_ipaddr_copy(BUF->sipaddr, uip_hostaddr);
    cea4:	490e      	ldr	r1, [pc, #56]	; (cee0 <uip_arp_out+0x154>)
    cea6:	8808      	ldrh	r0, [r1, #0]
    cea8:	8398      	strh	r0, [r3, #28]
    ceaa:	8849      	ldrh	r1, [r1, #2]
    ceac:	83d9      	strh	r1, [r3, #30]
      BUF->opcode = HTONS(ARP_REQUEST); /* ARP request. */
    ceae:	751a      	strb	r2, [r3, #20]
    ceb0:	2101      	movs	r1, #1
    ceb2:	7559      	strb	r1, [r3, #21]
      BUF->hwtype = HTONS(ARP_HWTYPE_ETH);
    ceb4:	739a      	strb	r2, [r3, #14]
    ceb6:	73d9      	strb	r1, [r3, #15]
      BUF->protocol = HTONS(UIP_ETHTYPE_IP);
    ceb8:	2108      	movs	r1, #8
    ceba:	7419      	strb	r1, [r3, #16]
    cebc:	745a      	strb	r2, [r3, #17]
      BUF->hwlen = 6;
    cebe:	2206      	movs	r2, #6
    cec0:	749a      	strb	r2, [r3, #18]
      BUF->protolen = 4;
    cec2:	2204      	movs	r2, #4
    cec4:	74da      	strb	r2, [r3, #19]
      BUF->ethhdr.type = HTONS(UIP_ETHTYPE_ARP);
    cec6:	7319      	strb	r1, [r3, #12]
    cec8:	2206      	movs	r2, #6
    ceca:	735a      	strb	r2, [r3, #13]
      uip_appdata = &uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN];
    cecc:	3336      	adds	r3, #54	; 0x36
    cece:	4a0c      	ldr	r2, [pc, #48]	; (cf00 <uip_arp_out+0x174>)
    ced0:	6013      	str	r3, [r2, #0]
      uip_len = sizeof(struct arp_hdr);
    ced2:	222a      	movs	r2, #42	; 0x2a
    ced4:	4b09      	ldr	r3, [pc, #36]	; (cefc <uip_arp_out+0x170>)
    ced6:	801a      	strh	r2, [r3, #0]
      return;
    ced8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ceda:	bf00      	nop
    cedc:	20008654 	.word	0x20008654
    cee0:	20008650 	.word	0x20008650
    cee4:	2000864c 	.word	0x2000864c
    cee8:	200072d4 	.word	0x200072d4
    ceec:	20008614 	.word	0x20008614
    cef0:	000117dc 	.word	0x000117dc
    cef4:	200072d8 	.word	0x200072d8
    cef8:	200072cc 	.word	0x200072cc
    cefc:	20008580 	.word	0x20008580
    cf00:	20008594 	.word	0x20008594

0000cf04 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    cf04:	b5f0      	push	{r4, r5, r6, r7, lr}
    cf06:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    cf08:	780b      	ldrb	r3, [r1, #0]
    cf0a:	f3c3 1441 	ubfx	r4, r3, #5, #2
    cf0e:	2c01      	cmp	r4, #1
    cf10:	d15e      	bne.n	cfd0 <cdcdf_acm_req+0xcc>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    cf12:	888c      	ldrh	r4, [r1, #4]
    cf14:	4d35      	ldr	r5, [pc, #212]	; (cfec <cdcdf_acm_req+0xe8>)
    cf16:	782d      	ldrb	r5, [r5, #0]
    cf18:	42a5      	cmp	r5, r4
    cf1a:	d003      	beq.n	cf24 <cdcdf_acm_req+0x20>
    cf1c:	4d33      	ldr	r5, [pc, #204]	; (cfec <cdcdf_acm_req+0xe8>)
    cf1e:	786d      	ldrb	r5, [r5, #1]
    cf20:	42a5      	cmp	r5, r4
    cf22:	d158      	bne.n	cfd6 <cdcdf_acm_req+0xd2>
    cf24:	4616      	mov	r6, r2
    cf26:	460c      	mov	r4, r1
    cf28:	4605      	mov	r5, r0
		if (req->bmRequestType & USB_EP_DIR_IN) {
    cf2a:	f013 0f80 	tst.w	r3, #128	; 0x80
    cf2e:	d10c      	bne.n	cf4a <cdcdf_acm_req+0x46>
	uint16_t                   len      = req->wLength;
    cf30:	88cf      	ldrh	r7, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    cf32:	4b2f      	ldr	r3, [pc, #188]	; (cff0 <cdcdf_acm_req+0xec>)
    cf34:	4798      	blx	r3
    cf36:	4601      	mov	r1, r0
	switch (req->bRequest) {
    cf38:	7863      	ldrb	r3, [r4, #1]
    cf3a:	2b20      	cmp	r3, #32
    cf3c:	d013      	beq.n	cf66 <cdcdf_acm_req+0x62>
    cf3e:	2b22      	cmp	r3, #34	; 0x22
    cf40:	d032      	beq.n	cfa8 <cdcdf_acm_req+0xa4>
		return ERR_INVALID_ARG;
    cf42:	f06f 000c 	mvn.w	r0, #12
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    cf46:	b003      	add	sp, #12
    cf48:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    cf4a:	2a01      	cmp	r2, #1
    cf4c:	d046      	beq.n	cfdc <cdcdf_acm_req+0xd8>
	switch (req->bRequest) {
    cf4e:	784b      	ldrb	r3, [r1, #1]
    cf50:	2b21      	cmp	r3, #33	; 0x21
    cf52:	d145      	bne.n	cfe0 <cdcdf_acm_req+0xdc>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    cf54:	88cb      	ldrh	r3, [r1, #6]
    cf56:	2b07      	cmp	r3, #7
    cf58:	d145      	bne.n	cfe6 <cdcdf_acm_req+0xe2>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    cf5a:	2300      	movs	r3, #0
    cf5c:	2207      	movs	r2, #7
    cf5e:	4925      	ldr	r1, [pc, #148]	; (cff4 <cdcdf_acm_req+0xf0>)
    cf60:	4c25      	ldr	r4, [pc, #148]	; (cff8 <cdcdf_acm_req+0xf4>)
    cf62:	47a0      	blx	r4
    cf64:	e7ef      	b.n	cf46 <cdcdf_acm_req+0x42>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    cf66:	2f07      	cmp	r7, #7
    cf68:	d12b      	bne.n	cfc2 <cdcdf_acm_req+0xbe>
		if (USB_SETUP_STAGE == stage) {
    cf6a:	b1be      	cbz	r6, cf9c <cdcdf_acm_req+0x98>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    cf6c:	6800      	ldr	r0, [r0, #0]
    cf6e:	9000      	str	r0, [sp, #0]
    cf70:	888a      	ldrh	r2, [r1, #4]
    cf72:	798b      	ldrb	r3, [r1, #6]
    cf74:	f8ad 2004 	strh.w	r2, [sp, #4]
    cf78:	f88d 3006 	strb.w	r3, [sp, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    cf7c:	4b1b      	ldr	r3, [pc, #108]	; (cfec <cdcdf_acm_req+0xe8>)
    cf7e:	691b      	ldr	r3, [r3, #16]
    cf80:	b113      	cbz	r3, cf88 <cdcdf_acm_req+0x84>
    cf82:	4668      	mov	r0, sp
    cf84:	4798      	blx	r3
    cf86:	b1f8      	cbz	r0, cfc8 <cdcdf_acm_req+0xc4>
				usbd_cdc_line_coding = line_coding_tmp;
    cf88:	4b18      	ldr	r3, [pc, #96]	; (cfec <cdcdf_acm_req+0xe8>)
    cf8a:	aa02      	add	r2, sp, #8
    cf8c:	e912 0003 	ldmdb	r2, {r0, r1}
    cf90:	6098      	str	r0, [r3, #8]
    cf92:	8199      	strh	r1, [r3, #12]
    cf94:	0c09      	lsrs	r1, r1, #16
    cf96:	7399      	strb	r1, [r3, #14]
			return ERR_NONE;
    cf98:	2000      	movs	r0, #0
    cf9a:	e7d4      	b.n	cf46 <cdcdf_acm_req+0x42>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    cf9c:	2300      	movs	r3, #0
    cf9e:	2207      	movs	r2, #7
    cfa0:	4628      	mov	r0, r5
    cfa2:	4c15      	ldr	r4, [pc, #84]	; (cff8 <cdcdf_acm_req+0xf4>)
    cfa4:	47a0      	blx	r4
    cfa6:	e7ce      	b.n	cf46 <cdcdf_acm_req+0x42>
		usbdc_xfer(0, NULL, 0, 0);
    cfa8:	2300      	movs	r3, #0
    cfaa:	461a      	mov	r2, r3
    cfac:	4619      	mov	r1, r3
    cfae:	4618      	mov	r0, r3
    cfb0:	4d11      	ldr	r5, [pc, #68]	; (cff8 <cdcdf_acm_req+0xf4>)
    cfb2:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    cfb4:	4b0d      	ldr	r3, [pc, #52]	; (cfec <cdcdf_acm_req+0xe8>)
    cfb6:	695b      	ldr	r3, [r3, #20]
    cfb8:	b143      	cbz	r3, cfcc <cdcdf_acm_req+0xc8>
			cdcdf_acm_notify_state(req->wValue);
    cfba:	8860      	ldrh	r0, [r4, #2]
    cfbc:	4798      	blx	r3
		return ERR_NONE;
    cfbe:	2000      	movs	r0, #0
    cfc0:	e7c1      	b.n	cf46 <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    cfc2:	f04f 30ff 	mov.w	r0, #4294967295
    cfc6:	e7be      	b.n	cf46 <cdcdf_acm_req+0x42>
			return ERR_NONE;
    cfc8:	2000      	movs	r0, #0
    cfca:	e7bc      	b.n	cf46 <cdcdf_acm_req+0x42>
		return ERR_NONE;
    cfcc:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    cfce:	e7ba      	b.n	cf46 <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    cfd0:	f06f 0009 	mvn.w	r0, #9
    cfd4:	e7b7      	b.n	cf46 <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    cfd6:	f06f 0009 	mvn.w	r0, #9
    cfda:	e7b4      	b.n	cf46 <cdcdf_acm_req+0x42>
		return ERR_NONE;
    cfdc:	2000      	movs	r0, #0
    cfde:	e7b2      	b.n	cf46 <cdcdf_acm_req+0x42>
		return ERR_INVALID_ARG;
    cfe0:	f06f 000c 	mvn.w	r0, #12
    cfe4:	e7af      	b.n	cf46 <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    cfe6:	f04f 30ff 	mov.w	r0, #4294967295
    cfea:	e7ac      	b.n	cf46 <cdcdf_acm_req+0x42>
    cfec:	20007340 	.word	0x20007340
    cff0:	0000d901 	.word	0x0000d901
    cff4:	20007348 	.word	0x20007348
    cff8:	0000d3dd 	.word	0x0000d3dd

0000cffc <cdcdf_acm_ctrl>:
{
    cffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d000:	b083      	sub	sp, #12
    d002:	4616      	mov	r6, r2
	switch (ctrl) {
    d004:	2901      	cmp	r1, #1
    d006:	d066      	beq.n	d0d6 <cdcdf_acm_ctrl+0xda>
    d008:	b141      	cbz	r1, d01c <cdcdf_acm_ctrl+0x20>
		return ERR_INVALID_ARG;
    d00a:	2902      	cmp	r1, #2
    d00c:	bf0c      	ite	eq
    d00e:	f06f 001a 	mvneq.w	r0, #26
    d012:	f06f 000c 	mvnne.w	r0, #12
}
    d016:	b003      	add	sp, #12
    d018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    d01c:	f8d0 a008 	ldr.w	sl, [r0, #8]
	ifc = desc->sod;
    d020:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    d022:	2800      	cmp	r0, #0
    d024:	f000 8085 	beq.w	d132 <cdcdf_acm_ctrl+0x136>
    d028:	f10a 3bff 	add.w	fp, sl, #4294967295
    d02c:	f10a 0301 	add.w	r3, sl, #1
    d030:	9300      	str	r3, [sp, #0]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    d032:	4f46      	ldr	r7, [pc, #280]	; (d14c <cdcdf_acm_ctrl+0x150>)
				usb_d_ep_enable(func_data->func_ep_out);
    d034:	f8df 9124 	ldr.w	r9, [pc, #292]	; d15c <cdcdf_acm_ctrl+0x160>
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    d038:	f8df 8124 	ldr.w	r8, [pc, #292]	; d160 <cdcdf_acm_ctrl+0x164>
		ifc_desc.bInterfaceNumber = ifc[2];
    d03c:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    d03e:	7943      	ldrb	r3, [r0, #5]
    d040:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    d044:	2b02      	cmp	r3, #2
    d046:	d002      	beq.n	d04e <cdcdf_acm_ctrl+0x52>
			return ERR_NOT_FOUND;
    d048:	f06f 0009 	mvn.w	r0, #9
    d04c:	e7e3      	b.n	d016 <cdcdf_acm_ctrl+0x1a>
    d04e:	f10b 0b01 	add.w	fp, fp, #1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    d052:	f89b 3000 	ldrb.w	r3, [fp]
    d056:	429a      	cmp	r2, r3
    d058:	d06e      	beq.n	d138 <cdcdf_acm_ctrl+0x13c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    d05a:	2bff      	cmp	r3, #255	; 0xff
    d05c:	d16f      	bne.n	d13e <cdcdf_acm_ctrl+0x142>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    d05e:	f88b 2000 	strb.w	r2, [fp]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    d062:	2205      	movs	r2, #5
    d064:	6871      	ldr	r1, [r6, #4]
    d066:	4b3a      	ldr	r3, [pc, #232]	; (d150 <cdcdf_acm_ctrl+0x154>)
    d068:	4798      	blx	r3
		while (NULL != ep) {
    d06a:	4604      	mov	r4, r0
    d06c:	b1f8      	cbz	r0, d0ae <cdcdf_acm_ctrl+0xb2>
    d06e:	f8cd b004 	str.w	fp, [sp, #4]
			ep_desc.bEndpointAddress = ep[2];
    d072:	78a5      	ldrb	r5, [r4, #2]
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
	return (ptr[0] + (ptr[1] << 8));
    d074:	7963      	ldrb	r3, [r4, #5]
    d076:	7922      	ldrb	r2, [r4, #4]
    d078:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    d07c:	b292      	uxth	r2, r2
    d07e:	78e1      	ldrb	r1, [r4, #3]
    d080:	4628      	mov	r0, r5
    d082:	47b8      	blx	r7
    d084:	2800      	cmp	r0, #0
    d086:	d15d      	bne.n	d144 <cdcdf_acm_ctrl+0x148>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    d088:	f015 0f80 	tst.w	r5, #128	; 0x80
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    d08c:	bf14      	ite	ne
    d08e:	f88b 5002 	strbne.w	r5, [fp, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    d092:	f88a 5004 	strbeq.w	r5, [sl, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    d096:	4628      	mov	r0, r5
    d098:	47c8      	blx	r9
			desc->sod = ep;
    d09a:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    d09c:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    d09e:	6871      	ldr	r1, [r6, #4]
    d0a0:	4420      	add	r0, r4
    d0a2:	47c0      	blx	r8
		while (NULL != ep) {
    d0a4:	4604      	mov	r4, r0
    d0a6:	2800      	cmp	r0, #0
    d0a8:	d1e3      	bne.n	d072 <cdcdf_acm_ctrl+0x76>
    d0aa:	f8dd b004 	ldr.w	fp, [sp, #4]
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    d0ae:	6833      	ldr	r3, [r6, #0]
    d0b0:	7818      	ldrb	r0, [r3, #0]
    d0b2:	2204      	movs	r2, #4
    d0b4:	6871      	ldr	r1, [r6, #4]
    d0b6:	4418      	add	r0, r3
    d0b8:	4b25      	ldr	r3, [pc, #148]	; (d150 <cdcdf_acm_ctrl+0x154>)
    d0ba:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    d0bc:	9b00      	ldr	r3, [sp, #0]
    d0be:	459b      	cmp	fp, r3
    d0c0:	d004      	beq.n	d0cc <cdcdf_acm_ctrl+0xd0>
		if (NULL == ifc) {
    d0c2:	2800      	cmp	r0, #0
    d0c4:	d1ba      	bne.n	d03c <cdcdf_acm_ctrl+0x40>
			return ERR_NOT_FOUND;
    d0c6:	f06f 0009 	mvn.w	r0, #9
    d0ca:	e7a4      	b.n	d016 <cdcdf_acm_ctrl+0x1a>
	_cdcdf_acm_funcd.enabled = true;
    d0cc:	2201      	movs	r2, #1
    d0ce:	4b21      	ldr	r3, [pc, #132]	; (d154 <cdcdf_acm_ctrl+0x158>)
    d0d0:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    d0d2:	2000      	movs	r0, #0
    d0d4:	e79f      	b.n	d016 <cdcdf_acm_ctrl+0x1a>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    d0d6:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    d0d8:	b142      	cbz	r2, d0ec <cdcdf_acm_ctrl+0xf0>
		ifc_desc.bInterfaceClass = desc->sod[5];
    d0da:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    d0dc:	795b      	ldrb	r3, [r3, #5]
    d0de:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    d0e2:	2b02      	cmp	r3, #2
    d0e4:	d002      	beq.n	d0ec <cdcdf_acm_ctrl+0xf0>
			return ERR_NOT_FOUND;
    d0e6:	f06f 0009 	mvn.w	r0, #9
    d0ea:	e794      	b.n	d016 <cdcdf_acm_ctrl+0x1a>
		if (func_data->func_iface[i] == 0xFF) {
    d0ec:	7823      	ldrb	r3, [r4, #0]
    d0ee:	2bff      	cmp	r3, #255	; 0xff
    d0f0:	d008      	beq.n	d104 <cdcdf_acm_ctrl+0x108>
			func_data->func_iface[i] = 0xFF;
    d0f2:	23ff      	movs	r3, #255	; 0xff
    d0f4:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    d0f6:	78a0      	ldrb	r0, [r4, #2]
    d0f8:	4298      	cmp	r0, r3
    d0fa:	d003      	beq.n	d104 <cdcdf_acm_ctrl+0x108>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    d0fc:	4b16      	ldr	r3, [pc, #88]	; (d158 <cdcdf_acm_ctrl+0x15c>)
    d0fe:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    d100:	23ff      	movs	r3, #255	; 0xff
    d102:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    d104:	7863      	ldrb	r3, [r4, #1]
    d106:	2bff      	cmp	r3, #255	; 0xff
    d108:	d008      	beq.n	d11c <cdcdf_acm_ctrl+0x120>
			func_data->func_iface[i] = 0xFF;
    d10a:	23ff      	movs	r3, #255	; 0xff
    d10c:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    d10e:	78e0      	ldrb	r0, [r4, #3]
    d110:	4298      	cmp	r0, r3
    d112:	d003      	beq.n	d11c <cdcdf_acm_ctrl+0x120>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    d114:	4b10      	ldr	r3, [pc, #64]	; (d158 <cdcdf_acm_ctrl+0x15c>)
    d116:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    d118:	23ff      	movs	r3, #255	; 0xff
    d11a:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    d11c:	7920      	ldrb	r0, [r4, #4]
    d11e:	28ff      	cmp	r0, #255	; 0xff
    d120:	d003      	beq.n	d12a <cdcdf_acm_ctrl+0x12e>
		usb_d_ep_deinit(func_data->func_ep_out);
    d122:	4b0d      	ldr	r3, [pc, #52]	; (d158 <cdcdf_acm_ctrl+0x15c>)
    d124:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    d126:	23ff      	movs	r3, #255	; 0xff
    d128:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    d12a:	2000      	movs	r0, #0
    d12c:	4b09      	ldr	r3, [pc, #36]	; (d154 <cdcdf_acm_ctrl+0x158>)
    d12e:	7158      	strb	r0, [r3, #5]
    d130:	e771      	b.n	d016 <cdcdf_acm_ctrl+0x1a>
			return ERR_NOT_FOUND;
    d132:	f06f 0009 	mvn.w	r0, #9
    d136:	e76e      	b.n	d016 <cdcdf_acm_ctrl+0x1a>
				return ERR_ALREADY_INITIALIZED;
    d138:	f06f 0011 	mvn.w	r0, #17
    d13c:	e76b      	b.n	d016 <cdcdf_acm_ctrl+0x1a>
				return ERR_NO_RESOURCE;
    d13e:	f06f 001b 	mvn.w	r0, #27
    d142:	e768      	b.n	d016 <cdcdf_acm_ctrl+0x1a>
				return ERR_NOT_INITIALIZED;
    d144:	f06f 0013 	mvn.w	r0, #19
    d148:	e765      	b.n	d016 <cdcdf_acm_ctrl+0x1a>
    d14a:	bf00      	nop
    d14c:	00002479 	.word	0x00002479
    d150:	0000d921 	.word	0x0000d921
    d154:	20007340 	.word	0x20007340
    d158:	000024e1 	.word	0x000024e1
    d15c:	0000250d 	.word	0x0000250d
    d160:	0000d959 	.word	0x0000d959

0000d164 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    d164:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    d166:	4b0a      	ldr	r3, [pc, #40]	; (d190 <cdcdf_acm_init+0x2c>)
    d168:	4798      	blx	r3
    d16a:	2801      	cmp	r0, #1
    d16c:	d80c      	bhi.n	d188 <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    d16e:	4809      	ldr	r0, [pc, #36]	; (d194 <cdcdf_acm_init+0x30>)
    d170:	4b09      	ldr	r3, [pc, #36]	; (d198 <cdcdf_acm_init+0x34>)
    d172:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    d174:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    d176:	3018      	adds	r0, #24
    d178:	4b08      	ldr	r3, [pc, #32]	; (d19c <cdcdf_acm_init+0x38>)
    d17a:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    d17c:	4908      	ldr	r1, [pc, #32]	; (d1a0 <cdcdf_acm_init+0x3c>)
    d17e:	2001      	movs	r0, #1
    d180:	4b08      	ldr	r3, [pc, #32]	; (d1a4 <cdcdf_acm_init+0x40>)
    d182:	4798      	blx	r3
	return ERR_NONE;
    d184:	2000      	movs	r0, #0
    d186:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    d188:	f06f 0010 	mvn.w	r0, #16
}
    d18c:	bd08      	pop	{r3, pc}
    d18e:	bf00      	nop
    d190:	0000d90d 	.word	0x0000d90d
    d194:	20007340 	.word	0x20007340
    d198:	0000cffd 	.word	0x0000cffd
    d19c:	0000d8ad 	.word	0x0000d8ad
    d1a0:	20000014 	.word	0x20000014
    d1a4:	0000d819 	.word	0x0000d819

0000d1a8 <cdcdf_acm_read>:
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    d1a8:	4b07      	ldr	r3, [pc, #28]	; (d1c8 <cdcdf_acm_read+0x20>)
	if (!cdcdf_acm_is_enabled()) {
    d1aa:	795b      	ldrb	r3, [r3, #5]
    d1ac:	b143      	cbz	r3, d1c0 <cdcdf_acm_read+0x18>
{
    d1ae:	b510      	push	{r4, lr}
    d1b0:	460a      	mov	r2, r1
    d1b2:	4601      	mov	r1, r0
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    d1b4:	2300      	movs	r3, #0
    d1b6:	4804      	ldr	r0, [pc, #16]	; (d1c8 <cdcdf_acm_read+0x20>)
    d1b8:	7900      	ldrb	r0, [r0, #4]
    d1ba:	4c04      	ldr	r4, [pc, #16]	; (d1cc <cdcdf_acm_read+0x24>)
    d1bc:	47a0      	blx	r4
    d1be:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    d1c0:	f06f 0010 	mvn.w	r0, #16
    d1c4:	4770      	bx	lr
    d1c6:	bf00      	nop
    d1c8:	20007340 	.word	0x20007340
    d1cc:	0000d3dd 	.word	0x0000d3dd

0000d1d0 <cdcdf_acm_write>:
	return _cdcdf_acm_funcd.enabled;
    d1d0:	4b07      	ldr	r3, [pc, #28]	; (d1f0 <cdcdf_acm_write+0x20>)
	if (!cdcdf_acm_is_enabled()) {
    d1d2:	795b      	ldrb	r3, [r3, #5]
    d1d4:	b143      	cbz	r3, d1e8 <cdcdf_acm_write+0x18>
{
    d1d6:	b510      	push	{r4, lr}
    d1d8:	460a      	mov	r2, r1
    d1da:	4601      	mov	r1, r0
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    d1dc:	2301      	movs	r3, #1
    d1de:	4804      	ldr	r0, [pc, #16]	; (d1f0 <cdcdf_acm_write+0x20>)
    d1e0:	78c0      	ldrb	r0, [r0, #3]
    d1e2:	4c04      	ldr	r4, [pc, #16]	; (d1f4 <cdcdf_acm_write+0x24>)
    d1e4:	47a0      	blx	r4
    d1e6:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    d1e8:	f06f 0010 	mvn.w	r0, #16
    d1ec:	4770      	bx	lr
    d1ee:	bf00      	nop
    d1f0:	20007340 	.word	0x20007340
    d1f4:	0000d3dd 	.word	0x0000d3dd

0000d1f8 <cdcdf_acm_register_callback>:
{
    d1f8:	b508      	push	{r3, lr}
	switch (cb_type) {
    d1fa:	2803      	cmp	r0, #3
    d1fc:	d81b      	bhi.n	d236 <cdcdf_acm_register_callback+0x3e>
    d1fe:	e8df f000 	tbb	[pc, r0]
    d202:	0a02      	.short	0x0a02
    d204:	1612      	.short	0x1612
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    d206:	460a      	mov	r2, r1
    d208:	2102      	movs	r1, #2
    d20a:	4b0c      	ldr	r3, [pc, #48]	; (d23c <cdcdf_acm_register_callback+0x44>)
    d20c:	7918      	ldrb	r0, [r3, #4]
    d20e:	4b0c      	ldr	r3, [pc, #48]	; (d240 <cdcdf_acm_register_callback+0x48>)
    d210:	4798      	blx	r3
	return ERR_NONE;
    d212:	2000      	movs	r0, #0
		break;
    d214:	bd08      	pop	{r3, pc}
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    d216:	460a      	mov	r2, r1
    d218:	2102      	movs	r1, #2
    d21a:	4b08      	ldr	r3, [pc, #32]	; (d23c <cdcdf_acm_register_callback+0x44>)
    d21c:	78d8      	ldrb	r0, [r3, #3]
    d21e:	4b08      	ldr	r3, [pc, #32]	; (d240 <cdcdf_acm_register_callback+0x48>)
    d220:	4798      	blx	r3
	return ERR_NONE;
    d222:	2000      	movs	r0, #0
		break;
    d224:	bd08      	pop	{r3, pc}
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    d226:	4b05      	ldr	r3, [pc, #20]	; (d23c <cdcdf_acm_register_callback+0x44>)
    d228:	6119      	str	r1, [r3, #16]
	return ERR_NONE;
    d22a:	2000      	movs	r0, #0
		break;
    d22c:	bd08      	pop	{r3, pc}
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    d22e:	4b03      	ldr	r3, [pc, #12]	; (d23c <cdcdf_acm_register_callback+0x44>)
    d230:	6159      	str	r1, [r3, #20]
	return ERR_NONE;
    d232:	2000      	movs	r0, #0
		break;
    d234:	bd08      	pop	{r3, pc}
		return ERR_INVALID_ARG;
    d236:	f06f 000c 	mvn.w	r0, #12
}
    d23a:	bd08      	pop	{r3, pc}
    d23c:	20007340 	.word	0x20007340
    d240:	000026e1 	.word	0x000026e1

0000d244 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    d244:	b570      	push	{r4, r5, r6, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    d246:	4b07      	ldr	r3, [pc, #28]	; (d264 <usbdc_unconfig+0x20>)
    d248:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    d24a:	b14c      	cbz	r4, d260 <usbdc_unconfig+0x1c>
		func->ctrl(func, USBDF_DISABLE, NULL);
    d24c:	2600      	movs	r6, #0
    d24e:	2501      	movs	r5, #1
    d250:	6863      	ldr	r3, [r4, #4]
    d252:	4632      	mov	r2, r6
    d254:	4629      	mov	r1, r5
    d256:	4620      	mov	r0, r4
    d258:	4798      	blx	r3
		func = func->next;
    d25a:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    d25c:	2c00      	cmp	r4, #0
    d25e:	d1f7      	bne.n	d250 <usbdc_unconfig+0xc>
    d260:	bd70      	pop	{r4, r5, r6, pc}
    d262:	bf00      	nop
    d264:	20007364 	.word	0x20007364

0000d268 <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    d268:	b570      	push	{r4, r5, r6, lr}
    d26a:	4606      	mov	r6, r0
    d26c:	460d      	mov	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    d26e:	4b07      	ldr	r3, [pc, #28]	; (d28c <usbdc_change_notify+0x24>)
    d270:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    d272:	b91c      	cbnz	r4, d27c <usbdc_change_notify+0x14>
    d274:	bd70      	pop	{r4, r5, r6, pc}
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    d276:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    d278:	2c00      	cmp	r4, #0
    d27a:	d0fb      	beq.n	d274 <usbdc_change_notify+0xc>
		if (NULL != cg->cb) {
    d27c:	6863      	ldr	r3, [r4, #4]
    d27e:	2b00      	cmp	r3, #0
    d280:	d0f9      	beq.n	d276 <usbdc_change_notify+0xe>
			cg->cb(change, value);
    d282:	4629      	mov	r1, r5
    d284:	4630      	mov	r0, r6
    d286:	4798      	blx	r3
    d288:	e7f5      	b.n	d276 <usbdc_change_notify+0xe>
    d28a:	bf00      	nop
    d28c:	20007364 	.word	0x20007364

0000d290 <usbdc_request_handler>:
	}
}

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    d290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d292:	4607      	mov	r7, r0
    d294:	460e      	mov	r6, r1
    d296:	4615      	mov	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    d298:	4b0c      	ldr	r3, [pc, #48]	; (d2cc <usbdc_request_handler+0x3c>)
    d29a:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    d29c:	b91c      	cbnz	r4, d2a6 <usbdc_request_handler+0x16>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    d29e:	2000      	movs	r0, #0
    d2a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		h = h->next;
    d2a2:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    d2a4:	b16c      	cbz	r4, d2c2 <usbdc_request_handler+0x32>
		if (NULL != h->cb) {
    d2a6:	6863      	ldr	r3, [r4, #4]
    d2a8:	2b00      	cmp	r3, #0
    d2aa:	d0fa      	beq.n	d2a2 <usbdc_request_handler+0x12>
			rc = h->cb(ep, req, stage);
    d2ac:	462a      	mov	r2, r5
    d2ae:	4631      	mov	r1, r6
    d2b0:	4638      	mov	r0, r7
    d2b2:	4798      	blx	r3
			if (0 == rc) {
    d2b4:	b138      	cbz	r0, d2c6 <usbdc_request_handler+0x36>
			} else if (ERR_NOT_FOUND != rc) {
    d2b6:	f110 0f0a 	cmn.w	r0, #10
    d2ba:	d0f2      	beq.n	d2a2 <usbdc_request_handler+0x12>
				return -1;
    d2bc:	f04f 30ff 	mov.w	r0, #4294967295
}
    d2c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    d2c2:	2000      	movs	r0, #0
    d2c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    d2c6:	2001      	movs	r0, #1
    d2c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d2ca:	bf00      	nop
    d2cc:	20007364 	.word	0x20007364

0000d2d0 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    d2d0:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    d2d2:	4b06      	ldr	r3, [pc, #24]	; (d2ec <usbd_sof_cb+0x1c>)
    d2d4:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    d2d6:	b91c      	cbnz	r4, d2e0 <usbd_sof_cb+0x10>
    d2d8:	bd10      	pop	{r4, pc}
		sof = sof->next;
    d2da:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    d2dc:	2c00      	cmp	r4, #0
    d2de:	d0fb      	beq.n	d2d8 <usbd_sof_cb+0x8>
		if (NULL != sof->cb) {
    d2e0:	6863      	ldr	r3, [r4, #4]
    d2e2:	2b00      	cmp	r3, #0
    d2e4:	d0f9      	beq.n	d2da <usbd_sof_cb+0xa>
			sof->cb();
    d2e6:	4798      	blx	r3
    d2e8:	e7f7      	b.n	d2da <usbd_sof_cb+0xa>
    d2ea:	bf00      	nop
    d2ec:	20007364 	.word	0x20007364

0000d2f0 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    d2f0:	b510      	push	{r4, lr}
    d2f2:	4614      	mov	r4, r2
	(void)ep;

	switch (code) {
    d2f4:	b119      	cbz	r1, d2fe <usbdc_cb_ctl_done+0xe>
    d2f6:	2901      	cmp	r1, #1
    d2f8:	d026      	beq.n	d348 <usbdc_cb_ctl_done+0x58>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    d2fa:	2000      	movs	r0, #0
    d2fc:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    d2fe:	7813      	ldrb	r3, [r2, #0]
    d300:	2b00      	cmp	r3, #0
    d302:	d1fa      	bne.n	d2fa <usbdc_cb_ctl_done+0xa>
	switch (req->bRequest) {
    d304:	7853      	ldrb	r3, [r2, #1]
    d306:	2b05      	cmp	r3, #5
    d308:	d00f      	beq.n	d32a <usbdc_cb_ctl_done+0x3a>
    d30a:	2b09      	cmp	r3, #9
    d30c:	d1f5      	bne.n	d2fa <usbdc_cb_ctl_done+0xa>
		usbdc.cfg_value = req->wValue;
    d30e:	8852      	ldrh	r2, [r2, #2]
    d310:	4b10      	ldr	r3, [pc, #64]	; (d354 <usbdc_cb_ctl_done+0x64>)
    d312:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    d314:	8863      	ldrh	r3, [r4, #2]
    d316:	2b00      	cmp	r3, #0
    d318:	bf14      	ite	ne
    d31a:	2104      	movne	r1, #4
    d31c:	2103      	moveq	r1, #3
    d31e:	4b0d      	ldr	r3, [pc, #52]	; (d354 <usbdc_cb_ctl_done+0x64>)
    d320:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    d322:	2001      	movs	r0, #1
    d324:	4b0c      	ldr	r3, [pc, #48]	; (d358 <usbdc_cb_ctl_done+0x68>)
    d326:	4798      	blx	r3
    d328:	e7e7      	b.n	d2fa <usbdc_cb_ctl_done+0xa>
		usbdc_set_address(req->wValue);
    d32a:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    d32c:	b2c0      	uxtb	r0, r0
    d32e:	4b0b      	ldr	r3, [pc, #44]	; (d35c <usbdc_cb_ctl_done+0x6c>)
    d330:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    d332:	8863      	ldrh	r3, [r4, #2]
    d334:	2b00      	cmp	r3, #0
    d336:	bf14      	ite	ne
    d338:	2103      	movne	r1, #3
    d33a:	2102      	moveq	r1, #2
    d33c:	4b05      	ldr	r3, [pc, #20]	; (d354 <usbdc_cb_ctl_done+0x64>)
    d33e:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    d340:	2001      	movs	r0, #1
    d342:	4b05      	ldr	r3, [pc, #20]	; (d358 <usbdc_cb_ctl_done+0x68>)
    d344:	4798      	blx	r3
    d346:	e7d8      	b.n	d2fa <usbdc_cb_ctl_done+0xa>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    d348:	2201      	movs	r2, #1
    d34a:	4621      	mov	r1, r4
    d34c:	2000      	movs	r0, #0
    d34e:	4b04      	ldr	r3, [pc, #16]	; (d360 <usbdc_cb_ctl_done+0x70>)
    d350:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    d352:	e7d2      	b.n	d2fa <usbdc_cb_ctl_done+0xa>
    d354:	20007364 	.word	0x20007364
    d358:	0000d269 	.word	0x0000d269
    d35c:	0000246d 	.word	0x0000246d
    d360:	0000d291 	.word	0x0000d291

0000d364 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    d364:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();
    d366:	4b0d      	ldr	r3, [pc, #52]	; (d39c <usbdc_reset+0x38>)
    d368:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    d36a:	4d0d      	ldr	r5, [pc, #52]	; (d3a0 <usbdc_reset+0x3c>)
    d36c:	2602      	movs	r6, #2
    d36e:	76ae      	strb	r6, [r5, #26]
	usbdc.cfg_value   = 0;
    d370:	2400      	movs	r4, #0
    d372:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    d374:	776c      	strb	r4, [r5, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    d376:	4620      	mov	r0, r4
    d378:	4b0a      	ldr	r3, [pc, #40]	; (d3a4 <usbdc_reset+0x40>)
    d37a:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    d37c:	7f28      	ldrb	r0, [r5, #28]
    d37e:	4b0a      	ldr	r3, [pc, #40]	; (d3a8 <usbdc_reset+0x44>)
    d380:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    d382:	4a0a      	ldr	r2, [pc, #40]	; (d3ac <usbdc_reset+0x48>)
    d384:	4621      	mov	r1, r4
    d386:	4620      	mov	r0, r4
    d388:	4d09      	ldr	r5, [pc, #36]	; (d3b0 <usbdc_reset+0x4c>)
    d38a:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    d38c:	4a09      	ldr	r2, [pc, #36]	; (d3b4 <usbdc_reset+0x50>)
    d38e:	4631      	mov	r1, r6
    d390:	4620      	mov	r0, r4
    d392:	47a8      	blx	r5
	usb_d_ep_enable(0);
    d394:	4620      	mov	r0, r4
    d396:	4b08      	ldr	r3, [pc, #32]	; (d3b8 <usbdc_reset+0x54>)
    d398:	4798      	blx	r3
    d39a:	bd70      	pop	{r4, r5, r6, pc}
    d39c:	0000d245 	.word	0x0000d245
    d3a0:	20007364 	.word	0x20007364
    d3a4:	000024e1 	.word	0x000024e1
    d3a8:	000024cd 	.word	0x000024cd
    d3ac:	0000d3fd 	.word	0x0000d3fd
    d3b0:	000026e1 	.word	0x000026e1
    d3b4:	0000d2f1 	.word	0x0000d2f1
    d3b8:	0000250d 	.word	0x0000250d

0000d3bc <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    d3bc:	b508      	push	{r3, lr}
	(void)param;

	switch (ev) {
    d3be:	b110      	cbz	r0, d3c6 <usbd_event_cb+0xa>
    d3c0:	2801      	cmp	r0, #1
    d3c2:	d004      	beq.n	d3ce <usbd_event_cb+0x12>
    d3c4:	bd08      	pop	{r3, pc}
	case USB_EV_VBUS:
		usbdc_change_notify(USBDC_C_CONN, param);
    d3c6:	2000      	movs	r0, #0
    d3c8:	4b02      	ldr	r3, [pc, #8]	; (d3d4 <usbd_event_cb+0x18>)
    d3ca:	4798      	blx	r3
		break;
    d3cc:	bd08      	pop	{r3, pc}

	case USB_EV_RESET:
		usbdc_reset();
    d3ce:	4b02      	ldr	r3, [pc, #8]	; (d3d8 <usbd_event_cb+0x1c>)
    d3d0:	4798      	blx	r3
    d3d2:	bd08      	pop	{r3, pc}
    d3d4:	0000d269 	.word	0x0000d269
    d3d8:	0000d365 	.word	0x0000d365

0000d3dc <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    d3dc:	b500      	push	{lr}
    d3de:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    d3e0:	9101      	str	r1, [sp, #4]
    d3e2:	9202      	str	r2, [sp, #8]
    d3e4:	f88d 000c 	strb.w	r0, [sp, #12]
    d3e8:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    d3ec:	a801      	add	r0, sp, #4
    d3ee:	4b02      	ldr	r3, [pc, #8]	; (d3f8 <usbdc_xfer+0x1c>)
    d3f0:	4798      	blx	r3
}
    d3f2:	b005      	add	sp, #20
    d3f4:	f85d fb04 	ldr.w	pc, [sp], #4
    d3f8:	00002559 	.word	0x00002559

0000d3fc <usbdc_cb_ctl_req>:
{
    d3fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d400:	b083      	sub	sp, #12
    d402:	4605      	mov	r5, r0
    d404:	460c      	mov	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    d406:	2200      	movs	r2, #0
    d408:	4b9b      	ldr	r3, [pc, #620]	; (d678 <usbdc_cb_ctl_req+0x27c>)
    d40a:	4798      	blx	r3
    d40c:	f1b0 3fff 	cmp.w	r0, #4294967295
    d410:	d00b      	beq.n	d42a <usbdc_cb_ctl_req+0x2e>
    d412:	2801      	cmp	r0, #1
    d414:	f000 81e3 	beq.w	d7de <usbdc_cb_ctl_req+0x3e2>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    d418:	7823      	ldrb	r3, [r4, #0]
    d41a:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    d41e:	d008      	beq.n	d432 <usbdc_cb_ctl_req+0x36>
    d420:	2a80      	cmp	r2, #128	; 0x80
    d422:	f000 80f4 	beq.w	d60e <usbdc_cb_ctl_req+0x212>
		return false;
    d426:	2000      	movs	r0, #0
    d428:	e000      	b.n	d42c <usbdc_cb_ctl_req+0x30>
		return false;
    d42a:	2000      	movs	r0, #0
}
    d42c:	b003      	add	sp, #12
    d42e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (req->bRequest) {
    d432:	7862      	ldrb	r2, [r4, #1]
    d434:	3a01      	subs	r2, #1
    d436:	2a0a      	cmp	r2, #10
    d438:	f200 81d3 	bhi.w	d7e2 <usbdc_cb_ctl_req+0x3e6>
    d43c:	e8df f012 	tbh	[pc, r2, lsl #1]
    d440:	01d10060 	.word	0x01d10060
    d444:	01d10076 	.word	0x01d10076
    d448:	01d1000b 	.word	0x01d1000b
    d44c:	01d101d1 	.word	0x01d101d1
    d450:	01d10015 	.word	0x01d10015
    d454:	008c      	.short	0x008c
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    d456:	2301      	movs	r3, #1
    d458:	2200      	movs	r2, #0
    d45a:	4611      	mov	r1, r2
    d45c:	4628      	mov	r0, r5
    d45e:	4c87      	ldr	r4, [pc, #540]	; (d67c <usbdc_cb_ctl_req+0x280>)
    d460:	47a0      	blx	r4
    d462:	fab0 f080 	clz	r0, r0
    d466:	0940      	lsrs	r0, r0, #5
    d468:	e7e0      	b.n	d42c <usbdc_cb_ctl_req+0x30>
		if (!usbdc_set_config(req->wValue)) {
    d46a:	8862      	ldrh	r2, [r4, #2]
    d46c:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    d46e:	b1ca      	cbz	r2, d4a4 <usbdc_cb_ctl_req+0xa8>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    d470:	4b83      	ldr	r3, [pc, #524]	; (d680 <usbdc_cb_ctl_req+0x284>)
    d472:	681b      	ldr	r3, [r3, #0]
    d474:	6859      	ldr	r1, [r3, #4]
    d476:	6818      	ldr	r0, [r3, #0]
    d478:	4b82      	ldr	r3, [pc, #520]	; (d684 <usbdc_cb_ctl_req+0x288>)
    d47a:	4798      	blx	r3
	if (NULL == cfg_desc) {
    d47c:	2800      	cmp	r0, #0
    d47e:	f000 81be 	beq.w	d7fe <usbdc_cb_ctl_req+0x402>
	return (ptr[0] + (ptr[1] << 8));
    d482:	78c2      	ldrb	r2, [r0, #3]
    d484:	7881      	ldrb	r1, [r0, #2]
    d486:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod  = cfg_desc + total_len;
    d48a:	fa10 f181 	uxtah	r1, r0, r1
    d48e:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    d490:	2204      	movs	r2, #4
    d492:	4b7d      	ldr	r3, [pc, #500]	; (d688 <usbdc_cb_ctl_req+0x28c>)
    d494:	4798      	blx	r3
    d496:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    d498:	b130      	cbz	r0, d4a8 <usbdc_cb_ctl_req+0xac>
    d49a:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    d49c:	f8df 81e0 	ldr.w	r8, [pc, #480]	; d680 <usbdc_cb_ctl_req+0x284>
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    d4a0:	4f79      	ldr	r7, [pc, #484]	; (d688 <usbdc_cb_ctl_req+0x28c>)
    d4a2:	e018      	b.n	d4d6 <usbdc_cb_ctl_req+0xda>
		usbdc_unconfig();
    d4a4:	4b79      	ldr	r3, [pc, #484]	; (d68c <usbdc_cb_ctl_req+0x290>)
    d4a6:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    d4a8:	2301      	movs	r3, #1
    d4aa:	2200      	movs	r2, #0
    d4ac:	4611      	mov	r1, r2
    d4ae:	4628      	mov	r0, r5
    d4b0:	4c72      	ldr	r4, [pc, #456]	; (d67c <usbdc_cb_ctl_req+0x280>)
    d4b2:	47a0      	blx	r4
    d4b4:	fab0 f080 	clz	r0, r0
    d4b8:	0940      	lsrs	r0, r0, #5
    d4ba:	e7b7      	b.n	d42c <usbdc_cb_ctl_req+0x30>
			last_iface = desc.sod[2];
    d4bc:	464c      	mov	r4, r9
    d4be:	e000      	b.n	d4c2 <usbdc_cb_ctl_req+0xc6>
    d4c0:	464c      	mov	r4, r9
		desc.sod = usb_desc_next(desc.sod);
    d4c2:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    d4c4:	7803      	ldrb	r3, [r0, #0]
    d4c6:	4418      	add	r0, r3
    d4c8:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    d4ca:	2204      	movs	r2, #4
    d4cc:	9901      	ldr	r1, [sp, #4]
    d4ce:	47b8      	blx	r7
    d4d0:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    d4d2:	2800      	cmp	r0, #0
    d4d4:	d0e8      	beq.n	d4a8 <usbdc_cb_ctl_req+0xac>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    d4d6:	f890 9002 	ldrb.w	r9, [r0, #2]
    d4da:	45a1      	cmp	r9, r4
    d4dc:	d0f1      	beq.n	d4c2 <usbdc_cb_ctl_req+0xc6>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    d4de:	f8d8 4010 	ldr.w	r4, [r8, #16]
			while (NULL != func) {
    d4e2:	2c00      	cmp	r4, #0
    d4e4:	d0ea      	beq.n	d4bc <usbdc_cb_ctl_req+0xc0>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    d4e6:	2600      	movs	r6, #0
    d4e8:	6863      	ldr	r3, [r4, #4]
    d4ea:	466a      	mov	r2, sp
    d4ec:	4631      	mov	r1, r6
    d4ee:	4620      	mov	r0, r4
    d4f0:	4798      	blx	r3
    d4f2:	2800      	cmp	r0, #0
    d4f4:	d0e4      	beq.n	d4c0 <usbdc_cb_ctl_req+0xc4>
					func = func->next;
    d4f6:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    d4f8:	2c00      	cmp	r4, #0
    d4fa:	d1f5      	bne.n	d4e8 <usbdc_cb_ctl_req+0xec>
			last_iface = desc.sod[2];
    d4fc:	464c      	mov	r4, r9
    d4fe:	e7e0      	b.n	d4c2 <usbdc_cb_ctl_req+0xc6>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    d500:	f003 031f 	and.w	r3, r3, #31
    d504:	2b02      	cmp	r3, #2
    d506:	f040 816e 	bne.w	d7e6 <usbdc_cb_ctl_req+0x3ea>
		if (req->wLength != 0) {
    d50a:	88e3      	ldrh	r3, [r4, #6]
    d50c:	b10b      	cbz	r3, d512 <usbdc_cb_ctl_req+0x116>
			return false;
    d50e:	2000      	movs	r0, #0
    d510:	e78c      	b.n	d42c <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    d512:	88a0      	ldrh	r0, [r4, #4]
    d514:	2100      	movs	r1, #0
    d516:	b2c0      	uxtb	r0, r0
    d518:	4b5d      	ldr	r3, [pc, #372]	; (d690 <usbdc_cb_ctl_req+0x294>)
    d51a:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    d51c:	2301      	movs	r3, #1
    d51e:	2200      	movs	r2, #0
    d520:	4611      	mov	r1, r2
    d522:	4628      	mov	r0, r5
    d524:	4c55      	ldr	r4, [pc, #340]	; (d67c <usbdc_cb_ctl_req+0x280>)
    d526:	47a0      	blx	r4
		return true;
    d528:	2001      	movs	r0, #1
    d52a:	e77f      	b.n	d42c <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    d52c:	f003 031f 	and.w	r3, r3, #31
    d530:	2b02      	cmp	r3, #2
    d532:	f040 815a 	bne.w	d7ea <usbdc_cb_ctl_req+0x3ee>
		if (req->wLength != 0) {
    d536:	88e3      	ldrh	r3, [r4, #6]
    d538:	b10b      	cbz	r3, d53e <usbdc_cb_ctl_req+0x142>
			return false;
    d53a:	2000      	movs	r0, #0
    d53c:	e776      	b.n	d42c <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    d53e:	88a0      	ldrh	r0, [r4, #4]
    d540:	2101      	movs	r1, #1
    d542:	b2c0      	uxtb	r0, r0
    d544:	4b52      	ldr	r3, [pc, #328]	; (d690 <usbdc_cb_ctl_req+0x294>)
    d546:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    d548:	2301      	movs	r3, #1
    d54a:	2200      	movs	r2, #0
    d54c:	4611      	mov	r1, r2
    d54e:	4628      	mov	r0, r5
    d550:	4c4a      	ldr	r4, [pc, #296]	; (d67c <usbdc_cb_ctl_req+0x280>)
    d552:	47a0      	blx	r4
		return true;
    d554:	2001      	movs	r0, #1
    d556:	e769      	b.n	d42c <usbdc_cb_ctl_req+0x30>
		return usbdc_set_interface(req->wValue, req->wIndex);
    d558:	8866      	ldrh	r6, [r4, #2]
    d55a:	88a4      	ldrh	r4, [r4, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    d55c:	4a48      	ldr	r2, [pc, #288]	; (d680 <usbdc_cb_ctl_req+0x284>)
    d55e:	6813      	ldr	r3, [r2, #0]
    d560:	7ed2      	ldrb	r2, [r2, #27]
    d562:	6859      	ldr	r1, [r3, #4]
    d564:	6818      	ldr	r0, [r3, #0]
    d566:	4b47      	ldr	r3, [pc, #284]	; (d684 <usbdc_cb_ctl_req+0x288>)
    d568:	4798      	blx	r3
	if (NULL == ifc) {
    d56a:	2800      	cmp	r0, #0
    d56c:	d045      	beq.n	d5fa <usbdc_cb_ctl_req+0x1fe>
	desc.sod = ifc;
    d56e:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    d570:	78c2      	ldrb	r2, [r0, #3]
    d572:	7881      	ldrb	r1, [r0, #2]
    d574:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    d578:	fa10 f181 	uxtah	r1, r0, r1
    d57c:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    d57e:	2204      	movs	r2, #4
    d580:	4b41      	ldr	r3, [pc, #260]	; (d688 <usbdc_cb_ctl_req+0x28c>)
    d582:	4798      	blx	r3
    d584:	4603      	mov	r3, r0
    d586:	2800      	cmp	r0, #0
    d588:	d039      	beq.n	d5fe <usbdc_cb_ctl_req+0x202>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    d58a:	2704      	movs	r7, #4
    d58c:	4d3e      	ldr	r5, [pc, #248]	; (d688 <usbdc_cb_ctl_req+0x28c>)
    d58e:	e008      	b.n	d5a2 <usbdc_cb_ctl_req+0x1a6>
		desc.sod = usb_desc_next(desc.sod);
    d590:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    d592:	7803      	ldrb	r3, [r0, #0]
    d594:	4418      	add	r0, r3
    d596:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    d598:	463a      	mov	r2, r7
    d59a:	9901      	ldr	r1, [sp, #4]
    d59c:	47a8      	blx	r5
		if (NULL == ifc) {
    d59e:	4603      	mov	r3, r0
    d5a0:	b378      	cbz	r0, d602 <usbdc_cb_ctl_req+0x206>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    d5a2:	789a      	ldrb	r2, [r3, #2]
    d5a4:	42a2      	cmp	r2, r4
    d5a6:	d1f3      	bne.n	d590 <usbdc_cb_ctl_req+0x194>
    d5a8:	78da      	ldrb	r2, [r3, #3]
    d5aa:	42b2      	cmp	r2, r6
    d5ac:	d1f0      	bne.n	d590 <usbdc_cb_ctl_req+0x194>
	desc.sod = ifc;
    d5ae:	9300      	str	r3, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    d5b0:	4b33      	ldr	r3, [pc, #204]	; (d680 <usbdc_cb_ctl_req+0x284>)
    d5b2:	691d      	ldr	r5, [r3, #16]
	while (NULL != func) {
    d5b4:	b33d      	cbz	r5, d606 <usbdc_cb_ctl_req+0x20a>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    d5b6:	2701      	movs	r7, #1
    d5b8:	686b      	ldr	r3, [r5, #4]
    d5ba:	466a      	mov	r2, sp
    d5bc:	4639      	mov	r1, r7
    d5be:	4628      	mov	r0, r5
    d5c0:	4798      	blx	r3
    d5c2:	b120      	cbz	r0, d5ce <usbdc_cb_ctl_req+0x1d2>
			func = func->next;
    d5c4:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    d5c6:	2d00      	cmp	r5, #0
    d5c8:	d1f6      	bne.n	d5b8 <usbdc_cb_ctl_req+0x1bc>
	return false;
    d5ca:	2000      	movs	r0, #0
    d5cc:	e72e      	b.n	d42c <usbdc_cb_ctl_req+0x30>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    d5ce:	686b      	ldr	r3, [r5, #4]
    d5d0:	466a      	mov	r2, sp
    d5d2:	2100      	movs	r1, #0
    d5d4:	4628      	mov	r0, r5
    d5d6:	4798      	blx	r3
    d5d8:	b9b8      	cbnz	r0, d60a <usbdc_cb_ctl_req+0x20e>
			if (alt_set) {
    d5da:	b136      	cbz	r6, d5ea <usbdc_cb_ctl_req+0x1ee>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    d5dc:	4a28      	ldr	r2, [pc, #160]	; (d680 <usbdc_cb_ctl_req+0x284>)
    d5de:	2301      	movs	r3, #1
    d5e0:	fa03 f404 	lsl.w	r4, r3, r4
    d5e4:	7f53      	ldrb	r3, [r2, #29]
    d5e6:	4323      	orrs	r3, r4
    d5e8:	7753      	strb	r3, [r2, #29]
			usbdc_xfer(0, NULL, 0, 0);
    d5ea:	2300      	movs	r3, #0
    d5ec:	461a      	mov	r2, r3
    d5ee:	4619      	mov	r1, r3
    d5f0:	4618      	mov	r0, r3
    d5f2:	4c22      	ldr	r4, [pc, #136]	; (d67c <usbdc_cb_ctl_req+0x280>)
    d5f4:	47a0      	blx	r4
			return true;
    d5f6:	2001      	movs	r0, #1
    d5f8:	e718      	b.n	d42c <usbdc_cb_ctl_req+0x30>
		return false;
    d5fa:	2000      	movs	r0, #0
    d5fc:	e716      	b.n	d42c <usbdc_cb_ctl_req+0x30>
		return false;
    d5fe:	2000      	movs	r0, #0
    d600:	e714      	b.n	d42c <usbdc_cb_ctl_req+0x30>
			return false;
    d602:	2000      	movs	r0, #0
    d604:	e712      	b.n	d42c <usbdc_cb_ctl_req+0x30>
	return false;
    d606:	2000      	movs	r0, #0
    d608:	e710      	b.n	d42c <usbdc_cb_ctl_req+0x30>
			return false;
    d60a:	2000      	movs	r0, #0
    d60c:	e70e      	b.n	d42c <usbdc_cb_ctl_req+0x30>
	switch (req->bRequest) {
    d60e:	7862      	ldrb	r2, [r4, #1]
    d610:	2a0a      	cmp	r2, #10
    d612:	f200 80ec 	bhi.w	d7ee <usbdc_cb_ctl_req+0x3f2>
    d616:	e8df f012 	tbh	[pc, r2, lsl #1]
    d61a:	008e      	.short	0x008e
    d61c:	00ea00ea 	.word	0x00ea00ea
    d620:	00ea00ea 	.word	0x00ea00ea
    d624:	000b00ea 	.word	0x000b00ea
    d628:	008200ea 	.word	0x008200ea
    d62c:	00b200ea 	.word	0x00b200ea
	uint8_t type = (uint8_t)(req->wValue >> 8);
    d630:	8862      	ldrh	r2, [r4, #2]
	switch (type) {
    d632:	0a13      	lsrs	r3, r2, #8
    d634:	2b02      	cmp	r3, #2
    d636:	d02d      	beq.n	d694 <usbdc_cb_ctl_req+0x298>
    d638:	2b03      	cmp	r3, #3
    d63a:	d050      	beq.n	d6de <usbdc_cb_ctl_req+0x2e2>
    d63c:	2b01      	cmp	r3, #1
    d63e:	d001      	beq.n	d644 <usbdc_cb_ctl_req+0x248>
	return false;
    d640:	2000      	movs	r0, #0
    d642:	e6f3      	b.n	d42c <usbdc_cb_ctl_req+0x30>
	uint16_t length   = req->wLength;
    d644:	88e2      	ldrh	r2, [r4, #6]
    d646:	2a12      	cmp	r2, #18
    d648:	bf28      	it	cs
    d64a:	2212      	movcs	r2, #18
    d64c:	4614      	mov	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    d64e:	4b0c      	ldr	r3, [pc, #48]	; (d680 <usbdc_cb_ctl_req+0x284>)
    d650:	681b      	ldr	r3, [r3, #0]
    d652:	2201      	movs	r2, #1
    d654:	6859      	ldr	r1, [r3, #4]
    d656:	6818      	ldr	r0, [r3, #0]
    d658:	4b0b      	ldr	r3, [pc, #44]	; (d688 <usbdc_cb_ctl_req+0x28c>)
    d65a:	4798      	blx	r3
	if (!dev_desc) {
    d65c:	4601      	mov	r1, r0
    d65e:	2800      	cmp	r0, #0
    d660:	f000 80c7 	beq.w	d7f2 <usbdc_cb_ctl_req+0x3f6>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    d664:	2300      	movs	r3, #0
    d666:	4622      	mov	r2, r4
    d668:	4628      	mov	r0, r5
    d66a:	4c04      	ldr	r4, [pc, #16]	; (d67c <usbdc_cb_ctl_req+0x280>)
    d66c:	47a0      	blx	r4
    d66e:	fab0 f080 	clz	r0, r0
    d672:	0940      	lsrs	r0, r0, #5
    d674:	e6da      	b.n	d42c <usbdc_cb_ctl_req+0x30>
    d676:	bf00      	nop
    d678:	0000d291 	.word	0x0000d291
    d67c:	0000d3dd 	.word	0x0000d3dd
    d680:	20007364 	.word	0x20007364
    d684:	0000d9a1 	.word	0x0000d9a1
    d688:	0000d921 	.word	0x0000d921
    d68c:	0000d245 	.word	0x0000d245
    d690:	00002679 	.word	0x00002679
	uint16_t length   = req->wLength;
    d694:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    d696:	4b5b      	ldr	r3, [pc, #364]	; (d804 <usbdc_cb_ctl_req+0x408>)
    d698:	7f1e      	ldrb	r6, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    d69a:	681b      	ldr	r3, [r3, #0]
    d69c:	3201      	adds	r2, #1
    d69e:	b2d2      	uxtb	r2, r2
    d6a0:	6859      	ldr	r1, [r3, #4]
    d6a2:	6818      	ldr	r0, [r3, #0]
    d6a4:	4b58      	ldr	r3, [pc, #352]	; (d808 <usbdc_cb_ctl_req+0x40c>)
    d6a6:	4798      	blx	r3
	if (NULL == cfg_desc) {
    d6a8:	4601      	mov	r1, r0
    d6aa:	2800      	cmp	r0, #0
    d6ac:	f000 80a3 	beq.w	d7f6 <usbdc_cb_ctl_req+0x3fa>
	return (ptr[0] + (ptr[1] << 8));
    d6b0:	78c3      	ldrb	r3, [r0, #3]
    d6b2:	7882      	ldrb	r2, [r0, #2]
    d6b4:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    d6b8:	b292      	uxth	r2, r2
	if (length <= total_len) {
    d6ba:	4294      	cmp	r4, r2
    d6bc:	d90d      	bls.n	d6da <usbdc_cb_ctl_req+0x2de>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    d6be:	3e01      	subs	r6, #1
    d6c0:	4226      	tst	r6, r4
    d6c2:	bf0c      	ite	eq
    d6c4:	2301      	moveq	r3, #1
    d6c6:	2300      	movne	r3, #0
		length = total_len;
    d6c8:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    d6ca:	4622      	mov	r2, r4
    d6cc:	4628      	mov	r0, r5
    d6ce:	4c4f      	ldr	r4, [pc, #316]	; (d80c <usbdc_cb_ctl_req+0x410>)
    d6d0:	47a0      	blx	r4
    d6d2:	fab0 f080 	clz	r0, r0
    d6d6:	0940      	lsrs	r0, r0, #5
    d6d8:	e6a8      	b.n	d42c <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    d6da:	2300      	movs	r3, #0
    d6dc:	e7f5      	b.n	d6ca <usbdc_cb_ctl_req+0x2ce>
	uint16_t length   = req->wLength;
    d6de:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    d6e0:	4b48      	ldr	r3, [pc, #288]	; (d804 <usbdc_cb_ctl_req+0x408>)
    d6e2:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    d6e4:	681b      	ldr	r3, [r3, #0]
    d6e6:	b2d2      	uxtb	r2, r2
    d6e8:	6859      	ldr	r1, [r3, #4]
    d6ea:	6818      	ldr	r0, [r3, #0]
    d6ec:	4b48      	ldr	r3, [pc, #288]	; (d810 <usbdc_cb_ctl_req+0x414>)
    d6ee:	4798      	blx	r3
	if (NULL == str_desc) {
    d6f0:	4601      	mov	r1, r0
    d6f2:	2800      	cmp	r0, #0
    d6f4:	f000 8081 	beq.w	d7fa <usbdc_cb_ctl_req+0x3fe>
	if (length <= str_desc[0]) {
    d6f8:	7802      	ldrb	r2, [r0, #0]
    d6fa:	4294      	cmp	r4, r2
    d6fc:	d90d      	bls.n	d71a <usbdc_cb_ctl_req+0x31e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    d6fe:	3e01      	subs	r6, #1
    d700:	4226      	tst	r6, r4
    d702:	bf0c      	ite	eq
    d704:	2301      	moveq	r3, #1
    d706:	2300      	movne	r3, #0
		length = str_desc[0];
    d708:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    d70a:	4622      	mov	r2, r4
    d70c:	4628      	mov	r0, r5
    d70e:	4c3f      	ldr	r4, [pc, #252]	; (d80c <usbdc_cb_ctl_req+0x410>)
    d710:	47a0      	blx	r4
    d712:	fab0 f080 	clz	r0, r0
    d716:	0940      	lsrs	r0, r0, #5
    d718:	e688      	b.n	d42c <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    d71a:	2300      	movs	r3, #0
    d71c:	e7f5      	b.n	d70a <usbdc_cb_ctl_req+0x30e>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    d71e:	4939      	ldr	r1, [pc, #228]	; (d804 <usbdc_cb_ctl_req+0x408>)
    d720:	694b      	ldr	r3, [r1, #20]
    d722:	7eca      	ldrb	r2, [r1, #27]
    d724:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    d726:	2300      	movs	r3, #0
    d728:	2201      	movs	r2, #1
    d72a:	6949      	ldr	r1, [r1, #20]
    d72c:	4628      	mov	r0, r5
    d72e:	4c37      	ldr	r4, [pc, #220]	; (d80c <usbdc_cb_ctl_req+0x410>)
    d730:	47a0      	blx	r4
		return true;
    d732:	2001      	movs	r0, #1
    d734:	e67a      	b.n	d42c <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    d736:	f003 031f 	and.w	r3, r3, #31
    d73a:	2b01      	cmp	r3, #1
    d73c:	d903      	bls.n	d746 <usbdc_cb_ctl_req+0x34a>
    d73e:	2b02      	cmp	r3, #2
    d740:	d010      	beq.n	d764 <usbdc_cb_ctl_req+0x368>
		return false;
    d742:	2000      	movs	r0, #0
    d744:	e672      	b.n	d42c <usbdc_cb_ctl_req+0x30>
		st = 0;
    d746:	2300      	movs	r3, #0
    d748:	9300      	str	r3, [sp, #0]
	memcpy(usbdc.ctrl_buf, &st, 2);
    d74a:	492e      	ldr	r1, [pc, #184]	; (d804 <usbdc_cb_ctl_req+0x408>)
    d74c:	694b      	ldr	r3, [r1, #20]
    d74e:	f8bd 2000 	ldrh.w	r2, [sp]
    d752:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    d754:	2300      	movs	r3, #0
    d756:	2202      	movs	r2, #2
    d758:	6949      	ldr	r1, [r1, #20]
    d75a:	4628      	mov	r0, r5
    d75c:	4c2b      	ldr	r4, [pc, #172]	; (d80c <usbdc_cb_ctl_req+0x410>)
    d75e:	47a0      	blx	r4
	return true;
    d760:	2001      	movs	r0, #1
    d762:	e663      	b.n	d42c <usbdc_cb_ctl_req+0x30>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    d764:	88a0      	ldrh	r0, [r4, #4]
    d766:	2102      	movs	r1, #2
    d768:	b2c0      	uxtb	r0, r0
    d76a:	4b2a      	ldr	r3, [pc, #168]	; (d814 <usbdc_cb_ctl_req+0x418>)
    d76c:	4798      	blx	r3
		if (st < 0) {
    d76e:	2800      	cmp	r0, #0
    d770:	db03      	blt.n	d77a <usbdc_cb_ctl_req+0x37e>
		st = st & 0x1;
    d772:	f000 0001 	and.w	r0, r0, #1
    d776:	9000      	str	r0, [sp, #0]
    d778:	e7e7      	b.n	d74a <usbdc_cb_ctl_req+0x34e>
			return false;
    d77a:	2000      	movs	r0, #0
    d77c:	e656      	b.n	d42c <usbdc_cb_ctl_req+0x30>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    d77e:	4b21      	ldr	r3, [pc, #132]	; (d804 <usbdc_cb_ctl_req+0x408>)
    d780:	7f5b      	ldrb	r3, [r3, #29]
    d782:	88a2      	ldrh	r2, [r4, #4]
    d784:	4113      	asrs	r3, r2
    d786:	f013 0f01 	tst.w	r3, #1
    d78a:	d012      	beq.n	d7b2 <usbdc_cb_ctl_req+0x3b6>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    d78c:	4b1d      	ldr	r3, [pc, #116]	; (d804 <usbdc_cb_ctl_req+0x408>)
    d78e:	691d      	ldr	r5, [r3, #16]
	return false;
    d790:	2000      	movs	r0, #0
	while (NULL != func) {
    d792:	2d00      	cmp	r5, #0
    d794:	f43f ae4a 	beq.w	d42c <usbdc_cb_ctl_req+0x30>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    d798:	2602      	movs	r6, #2
    d79a:	686b      	ldr	r3, [r5, #4]
    d79c:	4622      	mov	r2, r4
    d79e:	4631      	mov	r1, r6
    d7a0:	4628      	mov	r0, r5
    d7a2:	4798      	blx	r3
    d7a4:	2800      	cmp	r0, #0
    d7a6:	da0f      	bge.n	d7c8 <usbdc_cb_ctl_req+0x3cc>
			func = func->next;
    d7a8:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    d7aa:	2d00      	cmp	r5, #0
    d7ac:	d1f5      	bne.n	d79a <usbdc_cb_ctl_req+0x39e>
	return false;
    d7ae:	2000      	movs	r0, #0
    d7b0:	e63c      	b.n	d42c <usbdc_cb_ctl_req+0x30>
		usbdc.ctrl_buf[0] = 0;
    d7b2:	4914      	ldr	r1, [pc, #80]	; (d804 <usbdc_cb_ctl_req+0x408>)
    d7b4:	694b      	ldr	r3, [r1, #20]
    d7b6:	2000      	movs	r0, #0
    d7b8:	7018      	strb	r0, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    d7ba:	4603      	mov	r3, r0
    d7bc:	2201      	movs	r2, #1
    d7be:	6949      	ldr	r1, [r1, #20]
    d7c0:	4c12      	ldr	r4, [pc, #72]	; (d80c <usbdc_cb_ctl_req+0x410>)
    d7c2:	47a0      	blx	r4
		return true;
    d7c4:	2001      	movs	r0, #1
    d7c6:	e631      	b.n	d42c <usbdc_cb_ctl_req+0x30>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    d7c8:	490e      	ldr	r1, [pc, #56]	; (d804 <usbdc_cb_ctl_req+0x408>)
    d7ca:	694b      	ldr	r3, [r1, #20]
    d7cc:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    d7ce:	2300      	movs	r3, #0
    d7d0:	2201      	movs	r2, #1
    d7d2:	6949      	ldr	r1, [r1, #20]
    d7d4:	4618      	mov	r0, r3
    d7d6:	4c0d      	ldr	r4, [pc, #52]	; (d80c <usbdc_cb_ctl_req+0x410>)
    d7d8:	47a0      	blx	r4
			return true;
    d7da:	2001      	movs	r0, #1
    d7dc:	e626      	b.n	d42c <usbdc_cb_ctl_req+0x30>
		return true;
    d7de:	2001      	movs	r0, #1
    d7e0:	e624      	b.n	d42c <usbdc_cb_ctl_req+0x30>
		return false;
    d7e2:	2000      	movs	r0, #0
    d7e4:	e622      	b.n	d42c <usbdc_cb_ctl_req+0x30>
		return false;
    d7e6:	2000      	movs	r0, #0
    d7e8:	e620      	b.n	d42c <usbdc_cb_ctl_req+0x30>
		return false;
    d7ea:	2000      	movs	r0, #0
    d7ec:	e61e      	b.n	d42c <usbdc_cb_ctl_req+0x30>
		return false;
    d7ee:	2000      	movs	r0, #0
    d7f0:	e61c      	b.n	d42c <usbdc_cb_ctl_req+0x30>
		return false;
    d7f2:	2000      	movs	r0, #0
    d7f4:	e61a      	b.n	d42c <usbdc_cb_ctl_req+0x30>
		return false;
    d7f6:	2000      	movs	r0, #0
    d7f8:	e618      	b.n	d42c <usbdc_cb_ctl_req+0x30>
		return false;
    d7fa:	2000      	movs	r0, #0
    d7fc:	e616      	b.n	d42c <usbdc_cb_ctl_req+0x30>
			return false;
    d7fe:	2000      	movs	r0, #0
    d800:	e614      	b.n	d42c <usbdc_cb_ctl_req+0x30>
    d802:	bf00      	nop
    d804:	20007364 	.word	0x20007364
    d808:	0000d9a1 	.word	0x0000d9a1
    d80c:	0000d3dd 	.word	0x0000d3dd
    d810:	0000da09 	.word	0x0000da09
    d814:	00002679 	.word	0x00002679

0000d818 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    d818:	b508      	push	{r3, lr}
	switch (type) {
    d81a:	2801      	cmp	r0, #1
    d81c:	d007      	beq.n	d82e <usbdc_register_handler+0x16>
    d81e:	b110      	cbz	r0, d826 <usbdc_register_handler+0xe>
    d820:	2802      	cmp	r0, #2
    d822:	d008      	beq.n	d836 <usbdc_register_handler+0x1e>
    d824:	bd08      	pop	{r3, pc}
	case USBDC_HDL_SOF:
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    d826:	4806      	ldr	r0, [pc, #24]	; (d840 <usbdc_register_handler+0x28>)
    d828:	4b06      	ldr	r3, [pc, #24]	; (d844 <usbdc_register_handler+0x2c>)
    d82a:	4798      	blx	r3
		break;
    d82c:	bd08      	pop	{r3, pc}
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    d82e:	4806      	ldr	r0, [pc, #24]	; (d848 <usbdc_register_handler+0x30>)
    d830:	4b04      	ldr	r3, [pc, #16]	; (d844 <usbdc_register_handler+0x2c>)
    d832:	4798      	blx	r3
		break;
    d834:	bd08      	pop	{r3, pc}
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    d836:	4805      	ldr	r0, [pc, #20]	; (d84c <usbdc_register_handler+0x34>)
    d838:	4b02      	ldr	r3, [pc, #8]	; (d844 <usbdc_register_handler+0x2c>)
    d83a:	4798      	blx	r3
    d83c:	bd08      	pop	{r3, pc}
    d83e:	bf00      	nop
    d840:	20007368 	.word	0x20007368
    d844:	00002789 	.word	0x00002789
    d848:	2000736c 	.word	0x2000736c
    d84c:	20007370 	.word	0x20007370

0000d850 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    d850:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
    d852:	4605      	mov	r5, r0
    d854:	f240 3255 	movw	r2, #853	; 0x355
    d858:	490c      	ldr	r1, [pc, #48]	; (d88c <usbdc_init+0x3c>)
    d85a:	3000      	adds	r0, #0
    d85c:	bf18      	it	ne
    d85e:	2001      	movne	r0, #1
    d860:	4b0b      	ldr	r3, [pc, #44]	; (d890 <usbdc_init+0x40>)
    d862:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    d864:	4b0b      	ldr	r3, [pc, #44]	; (d894 <usbdc_init+0x44>)
    d866:	4798      	blx	r3
	if (rc < 0) {
    d868:	2800      	cmp	r0, #0
    d86a:	db0e      	blt.n	d88a <usbdc_init+0x3a>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    d86c:	4c0a      	ldr	r4, [pc, #40]	; (d898 <usbdc_init+0x48>)
    d86e:	2220      	movs	r2, #32
    d870:	2100      	movs	r1, #0
    d872:	4620      	mov	r0, r4
    d874:	4b09      	ldr	r3, [pc, #36]	; (d89c <usbdc_init+0x4c>)
    d876:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    d878:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    d87a:	4909      	ldr	r1, [pc, #36]	; (d8a0 <usbdc_init+0x50>)
    d87c:	2000      	movs	r0, #0
    d87e:	4c09      	ldr	r4, [pc, #36]	; (d8a4 <usbdc_init+0x54>)
    d880:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    d882:	4909      	ldr	r1, [pc, #36]	; (d8a8 <usbdc_init+0x58>)
    d884:	2001      	movs	r0, #1
    d886:	47a0      	blx	r4

	return 0;
    d888:	2000      	movs	r0, #0
}
    d88a:	bd38      	pop	{r3, r4, r5, pc}
    d88c:	000117e4 	.word	0x000117e4
    d890:	0000272d 	.word	0x0000272d
    d894:	000023e1 	.word	0x000023e1
    d898:	20007364 	.word	0x20007364
    d89c:	0000dce9 	.word	0x0000dce9
    d8a0:	0000d2d1 	.word	0x0000d2d1
    d8a4:	00002449 	.word	0x00002449
    d8a8:	0000d3bd 	.word	0x0000d3bd

0000d8ac <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    d8ac:	b508      	push	{r3, lr}
	list_insert_at_end(&usbdc.func_list, func);
    d8ae:	4601      	mov	r1, r0
    d8b0:	4801      	ldr	r0, [pc, #4]	; (d8b8 <usbdc_register_function+0xc>)
    d8b2:	4b02      	ldr	r3, [pc, #8]	; (d8bc <usbdc_register_function+0x10>)
    d8b4:	4798      	blx	r3
    d8b6:	bd08      	pop	{r3, pc}
    d8b8:	20007374 	.word	0x20007374
    d8bc:	00002789 	.word	0x00002789

0000d8c0 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    d8c0:	b508      	push	{r3, lr}
	if (usbdc.state >= USBD_S_POWER) {
    d8c2:	4b0a      	ldr	r3, [pc, #40]	; (d8ec <usbdc_start+0x2c>)
    d8c4:	7e9b      	ldrb	r3, [r3, #26]
    d8c6:	b95b      	cbnz	r3, d8e0 <usbdc_start+0x20>
		return ERR_BUSY;
	}

	if (desces) {
    d8c8:	b168      	cbz	r0, d8e6 <usbdc_start+0x26>
		usbdc.desces.ls_fs = desces;
    d8ca:	4b08      	ldr	r3, [pc, #32]	; (d8ec <usbdc_start+0x2c>)
    d8cc:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    d8ce:	6802      	ldr	r2, [r0, #0]
    d8d0:	79d2      	ldrb	r2, [r2, #7]
    d8d2:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    d8d4:	2201      	movs	r2, #1
    d8d6:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    d8d8:	4b05      	ldr	r3, [pc, #20]	; (d8f0 <usbdc_start+0x30>)
    d8da:	4798      	blx	r3
	return ERR_NONE;
    d8dc:	2000      	movs	r0, #0
    d8de:	bd08      	pop	{r3, pc}
		return ERR_BUSY;
    d8e0:	f06f 0003 	mvn.w	r0, #3
    d8e4:	bd08      	pop	{r3, pc}
		return ERR_BAD_DATA;
    d8e6:	f06f 0008 	mvn.w	r0, #8
}
    d8ea:	bd08      	pop	{r3, pc}
    d8ec:	20007364 	.word	0x20007364
    d8f0:	00002455 	.word	0x00002455

0000d8f4 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    d8f4:	b508      	push	{r3, lr}
	usb_d_attach();
    d8f6:	4b01      	ldr	r3, [pc, #4]	; (d8fc <usbdc_attach+0x8>)
    d8f8:	4798      	blx	r3
    d8fa:	bd08      	pop	{r3, pc}
    d8fc:	00002461 	.word	0x00002461

0000d900 <usbdc_get_ctrl_buffer>:
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
}
    d900:	4b01      	ldr	r3, [pc, #4]	; (d908 <usbdc_get_ctrl_buffer+0x8>)
    d902:	6958      	ldr	r0, [r3, #20]
    d904:	4770      	bx	lr
    d906:	bf00      	nop
    d908:	20007364 	.word	0x20007364

0000d90c <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    d90c:	4b03      	ldr	r3, [pc, #12]	; (d91c <usbdc_get_state+0x10>)
    d90e:	7e98      	ldrb	r0, [r3, #26]
    d910:	f000 0310 	and.w	r3, r0, #16
		return USBD_S_SUSPEND;
    d914:	2b00      	cmp	r3, #0
	}
	return usbdc.state;
}
    d916:	bf18      	it	ne
    d918:	2010      	movne	r0, #16
    d91a:	4770      	bx	lr
    d91c:	20007364 	.word	0x20007364

0000d920 <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    d920:	4288      	cmp	r0, r1
    d922:	d213      	bcs.n	d94c <usb_find_desc+0x2c>
	return desc[0];
    d924:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    d926:	2b01      	cmp	r3, #1
    d928:	d912      	bls.n	d950 <usb_find_desc+0x30>
{
    d92a:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    d92c:	7844      	ldrb	r4, [r0, #1]
    d92e:	4294      	cmp	r4, r2
    d930:	d00a      	beq.n	d948 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    d932:	4418      	add	r0, r3
	while (desc < eof) {
    d934:	4281      	cmp	r1, r0
    d936:	d906      	bls.n	d946 <usb_find_desc+0x26>
	return desc[0];
    d938:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    d93a:	2b01      	cmp	r3, #1
    d93c:	d90a      	bls.n	d954 <usb_find_desc+0x34>
	return desc[1];
    d93e:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    d940:	4294      	cmp	r4, r2
    d942:	d1f6      	bne.n	d932 <usb_find_desc+0x12>
    d944:	e000      	b.n	d948 <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    d946:	2000      	movs	r0, #0
}
    d948:	bc10      	pop	{r4}
    d94a:	4770      	bx	lr
	return NULL;
    d94c:	2000      	movs	r0, #0
    d94e:	4770      	bx	lr
		_desc_len_check();
    d950:	2000      	movs	r0, #0
    d952:	4770      	bx	lr
    d954:	2000      	movs	r0, #0
    d956:	e7f7      	b.n	d948 <usb_find_desc+0x28>

0000d958 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    d958:	4288      	cmp	r0, r1
    d95a:	d216      	bcs.n	d98a <usb_find_ep_desc+0x32>
	return desc[0];
    d95c:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    d95e:	2b01      	cmp	r3, #1
    d960:	d915      	bls.n	d98e <usb_find_ep_desc+0x36>
	return desc[1];
    d962:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    d964:	2a04      	cmp	r2, #4
    d966:	d014      	beq.n	d992 <usb_find_ep_desc+0x3a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    d968:	2a05      	cmp	r2, #5
    d96a:	d00b      	beq.n	d984 <usb_find_ep_desc+0x2c>
	return (desc + usb_desc_len(desc));
    d96c:	4418      	add	r0, r3
	while (desc < eof) {
    d96e:	4281      	cmp	r1, r0
    d970:	d909      	bls.n	d986 <usb_find_ep_desc+0x2e>
	return desc[0];
    d972:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    d974:	2b01      	cmp	r3, #1
    d976:	d90e      	bls.n	d996 <usb_find_ep_desc+0x3e>
	return desc[1];
    d978:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    d97a:	2a04      	cmp	r2, #4
    d97c:	d00d      	beq.n	d99a <usb_find_ep_desc+0x42>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    d97e:	2a05      	cmp	r2, #5
    d980:	d1f4      	bne.n	d96c <usb_find_ep_desc+0x14>
    d982:	e00b      	b.n	d99c <usb_find_ep_desc+0x44>
    d984:	4770      	bx	lr
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    d986:	2000      	movs	r0, #0
    d988:	4770      	bx	lr
    d98a:	2000      	movs	r0, #0
    d98c:	4770      	bx	lr
		_desc_len_check();
    d98e:	2000      	movs	r0, #0
    d990:	4770      	bx	lr
	return NULL;
    d992:	2000      	movs	r0, #0
    d994:	4770      	bx	lr
		_desc_len_check();
    d996:	2000      	movs	r0, #0
    d998:	4770      	bx	lr
	return NULL;
    d99a:	2000      	movs	r0, #0
}
    d99c:	4770      	bx	lr
	...

0000d9a0 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    d9a0:	b538      	push	{r3, r4, r5, lr}
    d9a2:	460c      	mov	r4, r1
    d9a4:	4615      	mov	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    d9a6:	2202      	movs	r2, #2
    d9a8:	4b16      	ldr	r3, [pc, #88]	; (da04 <usb_find_cfg_desc+0x64>)
    d9aa:	4798      	blx	r3
	if (!desc) {
    d9ac:	4603      	mov	r3, r0
    d9ae:	b1e8      	cbz	r0, d9ec <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    d9b0:	4284      	cmp	r4, r0
    d9b2:	d91d      	bls.n	d9f0 <usb_find_cfg_desc+0x50>
		_desc_len_check();
    d9b4:	7802      	ldrb	r2, [r0, #0]
    d9b6:	2a01      	cmp	r2, #1
    d9b8:	d91c      	bls.n	d9f4 <usb_find_cfg_desc+0x54>
		if (desc[1] != USB_DT_CONFIG) {
    d9ba:	7842      	ldrb	r2, [r0, #1]
    d9bc:	2a02      	cmp	r2, #2
    d9be:	d11b      	bne.n	d9f8 <usb_find_cfg_desc+0x58>
			break;
		}
		if (desc[5] == cfg_value) {
    d9c0:	7942      	ldrb	r2, [r0, #5]
    d9c2:	42aa      	cmp	r2, r5
    d9c4:	d012      	beq.n	d9ec <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    d9c6:	78d9      	ldrb	r1, [r3, #3]
    d9c8:	789a      	ldrb	r2, [r3, #2]
    d9ca:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    d9ce:	fa13 f382 	uxtah	r3, r3, r2
	while (desc < eof) {
    d9d2:	429c      	cmp	r4, r3
    d9d4:	d909      	bls.n	d9ea <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    d9d6:	781a      	ldrb	r2, [r3, #0]
    d9d8:	2a01      	cmp	r2, #1
    d9da:	d90f      	bls.n	d9fc <usb_find_cfg_desc+0x5c>
		if (desc[1] != USB_DT_CONFIG) {
    d9dc:	785a      	ldrb	r2, [r3, #1]
    d9de:	2a02      	cmp	r2, #2
    d9e0:	d10e      	bne.n	da00 <usb_find_cfg_desc+0x60>
		if (desc[5] == cfg_value) {
    d9e2:	795a      	ldrb	r2, [r3, #5]
    d9e4:	42aa      	cmp	r2, r5
    d9e6:	d1ee      	bne.n	d9c6 <usb_find_cfg_desc+0x26>
    d9e8:	e000      	b.n	d9ec <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    d9ea:	2300      	movs	r3, #0
}
    d9ec:	4618      	mov	r0, r3
    d9ee:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
    d9f0:	2300      	movs	r3, #0
    d9f2:	e7fb      	b.n	d9ec <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    d9f4:	2300      	movs	r3, #0
    d9f6:	e7f9      	b.n	d9ec <usb_find_cfg_desc+0x4c>
	return NULL;
    d9f8:	2300      	movs	r3, #0
    d9fa:	e7f7      	b.n	d9ec <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    d9fc:	2300      	movs	r3, #0
    d9fe:	e7f5      	b.n	d9ec <usb_find_cfg_desc+0x4c>
	return NULL;
    da00:	2300      	movs	r3, #0
    da02:	e7f3      	b.n	d9ec <usb_find_cfg_desc+0x4c>
    da04:	0000d921 	.word	0x0000d921

0000da08 <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    da08:	4288      	cmp	r0, r1
    da0a:	d217      	bcs.n	da3c <usb_find_str_desc+0x34>
{
    da0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    da10:	460d      	mov	r5, r1
    da12:	4616      	mov	r6, r2
	for (i = 0; desc < eof;) {
    da14:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    da16:	f04f 0803 	mov.w	r8, #3
    da1a:	4f0c      	ldr	r7, [pc, #48]	; (da4c <usb_find_str_desc+0x44>)
    da1c:	4642      	mov	r2, r8
    da1e:	4629      	mov	r1, r5
    da20:	47b8      	blx	r7
		if (desc) {
    da22:	4603      	mov	r3, r0
    da24:	b170      	cbz	r0, da44 <usb_find_str_desc+0x3c>
	return desc[0];
    da26:	7800      	ldrb	r0, [r0, #0]
			_desc_len_check();
    da28:	2801      	cmp	r0, #1
    da2a:	d90a      	bls.n	da42 <usb_find_str_desc+0x3a>
			if (i == str_index) {
    da2c:	42a6      	cmp	r6, r4
    da2e:	d009      	beq.n	da44 <usb_find_str_desc+0x3c>
	return (desc + usb_desc_len(desc));
    da30:	4418      	add	r0, r3
    da32:	3401      	adds	r4, #1
	for (i = 0; desc < eof;) {
    da34:	4285      	cmp	r5, r0
    da36:	d8f1      	bhi.n	da1c <usb_find_str_desc+0x14>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    da38:	2300      	movs	r3, #0
    da3a:	e003      	b.n	da44 <usb_find_str_desc+0x3c>
    da3c:	2300      	movs	r3, #0
}
    da3e:	4618      	mov	r0, r3
    da40:	4770      	bx	lr
			_desc_len_check();
    da42:	2300      	movs	r3, #0
}
    da44:	4618      	mov	r0, r3
    da46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    da4a:	bf00      	nop
    da4c:	0000d921 	.word	0x0000d921

0000da50 <usb_device_cb_state_c>:

/**
 * \brief Callback invoked when Line State Change
 */
bool usb_device_cb_state_c(usb_cdc_control_signal_t state)
{
    da50:	b510      	push	{r4, lr}
    da52:	b082      	sub	sp, #8
    da54:	f8ad 0004 	strh.w	r0, [sp, #4]
	if (state.rs232.DTR) {
    da58:	f010 0f01 	tst.w	r0, #1
    da5c:	d102      	bne.n	da64 <usb_device_cb_state_c+0x14>
		cdcdf_acm_read((uint8_t *)usbd_cdc_buffer, sizeof(usbd_cdc_buffer));
	}

	/* No error. */
	return false;
}
    da5e:	2000      	movs	r0, #0
    da60:	b002      	add	sp, #8
    da62:	bd10      	pop	{r4, pc}
		cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)usb_device_cb_bulk_out);
    da64:	4905      	ldr	r1, [pc, #20]	; (da7c <usb_device_cb_state_c+0x2c>)
    da66:	2000      	movs	r0, #0
    da68:	4c05      	ldr	r4, [pc, #20]	; (da80 <usb_device_cb_state_c+0x30>)
    da6a:	47a0      	blx	r4
		cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)usb_device_cb_bulk_in);
    da6c:	4905      	ldr	r1, [pc, #20]	; (da84 <usb_device_cb_state_c+0x34>)
    da6e:	2001      	movs	r0, #1
    da70:	47a0      	blx	r4
		cdcdf_acm_read((uint8_t *)usbd_cdc_buffer, sizeof(usbd_cdc_buffer));
    da72:	2140      	movs	r1, #64	; 0x40
    da74:	4804      	ldr	r0, [pc, #16]	; (da88 <usb_device_cb_state_c+0x38>)
    da76:	4b05      	ldr	r3, [pc, #20]	; (da8c <usb_device_cb_state_c+0x3c>)
    da78:	4798      	blx	r3
    da7a:	e7f0      	b.n	da5e <usb_device_cb_state_c+0xe>
    da7c:	0000daa9 	.word	0x0000daa9
    da80:	0000d1f9 	.word	0x0000d1f9
    da84:	0000da91 	.word	0x0000da91
    da88:	20007384 	.word	0x20007384
    da8c:	0000d1a9 	.word	0x0000d1a9

0000da90 <usb_device_cb_bulk_in>:
{
    da90:	b508      	push	{r3, lr}
	cdcdf_acm_read((uint8_t *)usbd_cdc_buffer, sizeof(usbd_cdc_buffer));
    da92:	2140      	movs	r1, #64	; 0x40
    da94:	4802      	ldr	r0, [pc, #8]	; (daa0 <usb_device_cb_bulk_in+0x10>)
    da96:	4b03      	ldr	r3, [pc, #12]	; (daa4 <usb_device_cb_bulk_in+0x14>)
    da98:	4798      	blx	r3
}
    da9a:	2000      	movs	r0, #0
    da9c:	bd08      	pop	{r3, pc}
    da9e:	bf00      	nop
    daa0:	20007384 	.word	0x20007384
    daa4:	0000d1a9 	.word	0x0000d1a9

0000daa8 <usb_device_cb_bulk_out>:
{
    daa8:	b508      	push	{r3, lr}
	cdcdf_acm_write((uint8_t *)usbd_cdc_buffer, count);
    daaa:	4611      	mov	r1, r2
    daac:	4802      	ldr	r0, [pc, #8]	; (dab8 <usb_device_cb_bulk_out+0x10>)
    daae:	4b03      	ldr	r3, [pc, #12]	; (dabc <usb_device_cb_bulk_out+0x14>)
    dab0:	4798      	blx	r3
}
    dab2:	2000      	movs	r0, #0
    dab4:	bd08      	pop	{r3, pc}
    dab6:	bf00      	nop
    dab8:	20007384 	.word	0x20007384
    dabc:	0000d1d1 	.word	0x0000d1d1

0000dac0 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    dac0:	b508      	push	{r3, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    dac2:	4805      	ldr	r0, [pc, #20]	; (dad8 <cdc_device_acm_init+0x18>)
    dac4:	4b05      	ldr	r3, [pc, #20]	; (dadc <cdc_device_acm_init+0x1c>)
    dac6:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    dac8:	4b05      	ldr	r3, [pc, #20]	; (dae0 <cdc_device_acm_init+0x20>)
    daca:	4798      	blx	r3

	usbdc_start(single_desc);
    dacc:	4805      	ldr	r0, [pc, #20]	; (dae4 <cdc_device_acm_init+0x24>)
    dace:	4b06      	ldr	r3, [pc, #24]	; (dae8 <cdc_device_acm_init+0x28>)
    dad0:	4798      	blx	r3
	usbdc_attach();
    dad2:	4b06      	ldr	r3, [pc, #24]	; (daec <cdc_device_acm_init+0x2c>)
    dad4:	4798      	blx	r3
    dad6:	bd08      	pop	{r3, pc}
    dad8:	200073c4 	.word	0x200073c4
    dadc:	0000d851 	.word	0x0000d851
    dae0:	0000d165 	.word	0x0000d165
    dae4:	2000001c 	.word	0x2000001c
    dae8:	0000d8c1 	.word	0x0000d8c1
    daec:	0000d8f5 	.word	0x0000d8f5

0000daf0 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    daf0:	b508      	push	{r3, lr}

	cdc_device_acm_init();
    daf2:	4b01      	ldr	r3, [pc, #4]	; (daf8 <usb_init+0x8>)
    daf4:	4798      	blx	r3
    daf6:	bd08      	pop	{r3, pc}
    daf8:	0000dac1 	.word	0x0000dac1

0000dafc <EEprom_settings>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: when requiring EEprom configuration data to be read or written to/from the non-volatile area, this facilitates the [NV] access
// Returns:     Nothing
// *****************************************************************************************************************************************************************
int EEprom_settings(unsigned char *data, unsigned int size, unsigned char write_notread)
{
    dafc:	b510      	push	{r4, lr}
	/* If we have a write flag set, then write the setting configuration overlay image into NV ram */
	if (write_notread) {
    dafe:	b932      	cbnz	r2, db0e <EEprom_settings+0x12>
		return nv_storage_write(1, 0, data, size);
	}
	
	/* else, if we have a read flag set, then read the setting configuration overlay image from the NV ram into the "data" pointer"*/
	return nv_storage_read(1, 0, data, size);
    db00:	b28b      	uxth	r3, r1
    db02:	4602      	mov	r2, r0
    db04:	2100      	movs	r1, #0
    db06:	2001      	movs	r0, #1
    db08:	4c04      	ldr	r4, [pc, #16]	; (db1c <EEprom_settings+0x20>)
    db0a:	47a0      	blx	r4
}
    db0c:	bd10      	pop	{r4, pc}
		return nv_storage_write(1, 0, data, size);
    db0e:	b28b      	uxth	r3, r1
    db10:	4602      	mov	r2, r0
    db12:	2100      	movs	r1, #0
    db14:	2001      	movs	r0, #1
    db16:	4c02      	ldr	r4, [pc, #8]	; (db20 <EEprom_settings+0x24>)
    db18:	47a0      	blx	r4
    db1a:	bd10      	pop	{r4, pc}
    db1c:	0000b641 	.word	0x0000b641
    db20:	0000b4a9 	.word	0x0000b4a9

0000db24 <checkKSZreg>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: check a value in an SPI register of the KSZ-Micrel Ethernet SWITCH
// Returns:     does the register value match the check value? True: False
// *****************************************************************************************************************************************************************
bool checkKSZreg(uint16_t reg, unsigned char verify)
{
    db24:	b570      	push	{r4, r5, r6, lr}
    db26:	b086      	sub	sp, #24
    db28:	460e      	mov	r6, r1
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    db2a:	4c11      	ldr	r4, [pc, #68]	; (db70 <checkKSZreg+0x4c>)
    db2c:	2580      	movs	r5, #128	; 0x80
    db2e:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
		
	/* Lower the nCS line for this SPI device */	
	gpio_set_pin_level(PB07_SPInCS_KSZ8974, 0);	
		
    /* Setup the 3 control bytes to perform a register read operation */		
	command_dataw[0] = 0x40 + REG_SPI_READ + (unsigned char)(reg >> 7);
    db32:	09c3      	lsrs	r3, r0, #7
    db34:	3360      	adds	r3, #96	; 0x60
    db36:	f88d 3008 	strb.w	r3, [sp, #8]
	command_dataw[1] = (unsigned char)(reg & 0x7F) << 1;
    db3a:	0040      	lsls	r0, r0, #1
    db3c:	f88d 0009 	strb.w	r0, [sp, #9]
	command_dataw[2] = 0x00;
    db40:	2300      	movs	r3, #0
    db42:	f88d 300a 	strb.w	r3, [sp, #10]
	p_xfer.txbuf = (uint8_t *)&command_dataw;
    db46:	ab02      	add	r3, sp, #8
    db48:	9303      	str	r3, [sp, #12]
	p_xfer.rxbuf = (uint8_t *)&command_datar;
    db4a:	ab01      	add	r3, sp, #4
    db4c:	9304      	str	r3, [sp, #16]
	p_xfer.size = 3;
    db4e:	2303      	movs	r3, #3
    db50:	9305      	str	r3, [sp, #20]
	
	/* Perform the actual 3-byte push/pull SPI operation */
	spi_m_sync_transfer(&SPI_0, &p_xfer);
    db52:	a903      	add	r1, sp, #12
    db54:	4807      	ldr	r0, [pc, #28]	; (db74 <checkKSZreg+0x50>)
    db56:	4b08      	ldr	r3, [pc, #32]	; (db78 <checkKSZreg+0x54>)
    db58:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    db5a:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
	
	/* Raise the nCS line for this SPI device */	
	gpio_set_pin_level(PB07_SPInCS_KSZ8974, 1);
	
	/* Check to see if the read data byte from the SPI end-point register matches the "verify" parameter and return the result as a boolean */
	return (command_datar[2] == verify) ? 1 : 0;
    db5e:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
    db62:	42b0      	cmp	r0, r6
    db64:	bf14      	ite	ne
    db66:	2000      	movne	r0, #0
    db68:	2001      	moveq	r0, #1
    db6a:	b006      	add	sp, #24
    db6c:	bd70      	pop	{r4, r5, r6, pc}
    db6e:	bf00      	nop
    db70:	41008000 	.word	0x41008000
    db74:	20007478 	.word	0x20007478
    db78:	00001b81 	.word	0x00001b81

0000db7c <readKSZreg>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: read an SPI register of the KSZ-Micrel Ethernet SWITCH
// Returns:     value of register of KSZ Ethernet SWITCH SPI read
// *****************************************************************************************************************************************************************
unsigned char readKSZreg(uint16_t reg)
{
    db7c:	b530      	push	{r4, r5, lr}
    db7e:	b087      	sub	sp, #28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    db80:	4c0e      	ldr	r4, [pc, #56]	; (dbbc <readKSZreg+0x40>)
    db82:	2580      	movs	r5, #128	; 0x80
    db84:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
	
	/* Lower the nCS line for this SPI device */	
	gpio_set_pin_level(PB07_SPInCS_KSZ8974, 0);
	
	/* Setup the 3 control bytes to perform a register read operation */
	command_dataw[0] = 0x40 + REG_SPI_READ + (unsigned char)(reg >> 7);
    db88:	09c3      	lsrs	r3, r0, #7
    db8a:	3360      	adds	r3, #96	; 0x60
    db8c:	f88d 3008 	strb.w	r3, [sp, #8]
	command_dataw[1] = (unsigned char)(reg & 0x7F) << 1;
    db90:	0040      	lsls	r0, r0, #1
    db92:	f88d 0009 	strb.w	r0, [sp, #9]
	command_dataw[2] = 0x00;
    db96:	2300      	movs	r3, #0
    db98:	f88d 300a 	strb.w	r3, [sp, #10]
	p_xfer.txbuf = (uint8_t *)&command_dataw;
    db9c:	ab02      	add	r3, sp, #8
    db9e:	9303      	str	r3, [sp, #12]
	p_xfer.rxbuf = (uint8_t *)&command_datar;
    dba0:	ab01      	add	r3, sp, #4
    dba2:	9304      	str	r3, [sp, #16]
	p_xfer.size = 3;
    dba4:	2303      	movs	r3, #3
    dba6:	9305      	str	r3, [sp, #20]
	
	/* Perform the actual 3-byte push/pull SPI operation */
	spi_m_sync_transfer(&SPI_0, &p_xfer);
    dba8:	a903      	add	r1, sp, #12
    dbaa:	4805      	ldr	r0, [pc, #20]	; (dbc0 <readKSZreg+0x44>)
    dbac:	4b05      	ldr	r3, [pc, #20]	; (dbc4 <readKSZreg+0x48>)
    dbae:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    dbb0:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
	/* Raise the nCS line for this SPI device */
	gpio_set_pin_level(PB07_SPInCS_KSZ8974, 1);
	
	/* Just return the actual far-end register daat value */
	return (command_datar[2]);
}
    dbb4:	f89d 0006 	ldrb.w	r0, [sp, #6]
    dbb8:	b007      	add	sp, #28
    dbba:	bd30      	pop	{r4, r5, pc}
    dbbc:	41008000 	.word	0x41008000
    dbc0:	20007478 	.word	0x20007478
    dbc4:	00001b81 	.word	0x00001b81

0000dbc8 <writeKSZreg>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: write to a SPI register of the KSZ-Micrel Ethernet SWITCH
// Returns:     nothing
// *****************************************************************************************************************************************************************
void writeKSZreg(uint16_t reg, unsigned char value)
{
    dbc8:	b530      	push	{r4, r5, lr}
    dbca:	b087      	sub	sp, #28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    dbcc:	4c0d      	ldr	r4, [pc, #52]	; (dc04 <writeKSZreg+0x3c>)
    dbce:	2580      	movs	r5, #128	; 0x80
    dbd0:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
	
	/* Lower the nCS line for this SPI device */
	gpio_set_pin_level(PB07_SPInCS_KSZ8974, 0);
	
	/* Setup the 3 control bytes to perform a register write operation */
	command_dataw[0] = 0x40 + REG_SPI_WRITE + (unsigned char)(reg >> 7);
    dbd4:	09c3      	lsrs	r3, r0, #7
    dbd6:	3340      	adds	r3, #64	; 0x40
    dbd8:	f88d 3008 	strb.w	r3, [sp, #8]
	command_dataw[1] = (unsigned char)(reg & 0x7F) << 1;
    dbdc:	0040      	lsls	r0, r0, #1
    dbde:	f88d 0009 	strb.w	r0, [sp, #9]
	command_dataw[2] = value;
    dbe2:	f88d 100a 	strb.w	r1, [sp, #10]
	p_xfer.txbuf = (uint8_t *)&command_dataw;
    dbe6:	ab02      	add	r3, sp, #8
    dbe8:	9303      	str	r3, [sp, #12]
	p_xfer.rxbuf = (uint8_t *)&command_datar;
    dbea:	ab01      	add	r3, sp, #4
    dbec:	9304      	str	r3, [sp, #16]
	p_xfer.size = 3;
    dbee:	2303      	movs	r3, #3
    dbf0:	9305      	str	r3, [sp, #20]
	
	/* Perform the actual 3-byte push/pull SPI operation */
	spi_m_sync_transfer(&SPI_0, &p_xfer);
    dbf2:	a903      	add	r1, sp, #12
    dbf4:	4804      	ldr	r0, [pc, #16]	; (dc08 <writeKSZreg+0x40>)
    dbf6:	4b05      	ldr	r3, [pc, #20]	; (dc0c <writeKSZreg+0x44>)
    dbf8:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    dbfa:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
	
	/* Raise the nCS line for this SPI device */
	gpio_set_pin_level(PB07_SPInCS_KSZ8974, 1);
}	
    dbfe:	b007      	add	sp, #28
    dc00:	bd30      	pop	{r4, r5, pc}
    dc02:	bf00      	nop
    dc04:	41008000 	.word	0x41008000
    dc08:	20007478 	.word	0x20007478
    dc0c:	00001b81 	.word	0x00001b81

0000dc10 <application_appcall>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: STUB for compilation - NOT USED
// Returns:     Nothing (NULL)
// *****************************************************************************************************************************************************************
void application_appcall(void)
{
    dc10:	b508      	push	{r3, lr}
	/* This is a stub function. It should not ever get called */
	xprintf("MultiSense application_appcall()\r\n");
    dc12:	4802      	ldr	r0, [pc, #8]	; (dc1c <application_appcall+0xc>)
    dc14:	4b02      	ldr	r3, [pc, #8]	; (dc20 <application_appcall+0x10>)
    dc16:	4798      	blx	r3
    dc18:	bd08      	pop	{r3, pc}
    dc1a:	bf00      	nop
    dc1c:	000117fc 	.word	0x000117fc
    dc20:	0000031d 	.word	0x0000031d

0000dc24 <uip_log>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: Called by the uIP stack to print out debug information, warnings and error messages
// Returns:     Nothing (NULL)
// *****************************************************************************************************************************************************************
void uip_log(char *msg)
{
    dc24:	b508      	push	{r3, lr}
	/* Print out the messages from the uIP stack */
	xprintf("MultiSense uIP log --> [%s]\r\n", msg);
    dc26:	4601      	mov	r1, r0
    dc28:	4801      	ldr	r0, [pc, #4]	; (dc30 <uip_log+0xc>)
    dc2a:	4b02      	ldr	r3, [pc, #8]	; (dc34 <uip_log+0x10>)
    dc2c:	4798      	blx	r3
    dc2e:	bd08      	pop	{r3, pc}
    dc30:	0001185c 	.word	0x0001185c
    dc34:	0000031d 	.word	0x0000031d

0000dc38 <__libc_init_array>:
    dc38:	b570      	push	{r4, r5, r6, lr}
    dc3a:	4e0d      	ldr	r6, [pc, #52]	; (dc70 <__libc_init_array+0x38>)
    dc3c:	4c0d      	ldr	r4, [pc, #52]	; (dc74 <__libc_init_array+0x3c>)
    dc3e:	1ba4      	subs	r4, r4, r6
    dc40:	10a4      	asrs	r4, r4, #2
    dc42:	2500      	movs	r5, #0
    dc44:	42a5      	cmp	r5, r4
    dc46:	d109      	bne.n	dc5c <__libc_init_array+0x24>
    dc48:	4e0b      	ldr	r6, [pc, #44]	; (dc78 <__libc_init_array+0x40>)
    dc4a:	4c0c      	ldr	r4, [pc, #48]	; (dc7c <__libc_init_array+0x44>)
    dc4c:	f003 fee2 	bl	11a14 <_init>
    dc50:	1ba4      	subs	r4, r4, r6
    dc52:	10a4      	asrs	r4, r4, #2
    dc54:	2500      	movs	r5, #0
    dc56:	42a5      	cmp	r5, r4
    dc58:	d105      	bne.n	dc66 <__libc_init_array+0x2e>
    dc5a:	bd70      	pop	{r4, r5, r6, pc}
    dc5c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    dc60:	4798      	blx	r3
    dc62:	3501      	adds	r5, #1
    dc64:	e7ee      	b.n	dc44 <__libc_init_array+0xc>
    dc66:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    dc6a:	4798      	blx	r3
    dc6c:	3501      	adds	r5, #1
    dc6e:	e7f2      	b.n	dc56 <__libc_init_array+0x1e>
    dc70:	00011a20 	.word	0x00011a20
    dc74:	00011a20 	.word	0x00011a20
    dc78:	00011a20 	.word	0x00011a20
    dc7c:	00011a24 	.word	0x00011a24

0000dc80 <memcmp>:
    dc80:	b510      	push	{r4, lr}
    dc82:	3901      	subs	r1, #1
    dc84:	4402      	add	r2, r0
    dc86:	4290      	cmp	r0, r2
    dc88:	d101      	bne.n	dc8e <memcmp+0xe>
    dc8a:	2000      	movs	r0, #0
    dc8c:	bd10      	pop	{r4, pc}
    dc8e:	f810 3b01 	ldrb.w	r3, [r0], #1
    dc92:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    dc96:	42a3      	cmp	r3, r4
    dc98:	d0f5      	beq.n	dc86 <memcmp+0x6>
    dc9a:	1b18      	subs	r0, r3, r4
    dc9c:	bd10      	pop	{r4, pc}

0000dc9e <memcpy>:
    dc9e:	b510      	push	{r4, lr}
    dca0:	1e43      	subs	r3, r0, #1
    dca2:	440a      	add	r2, r1
    dca4:	4291      	cmp	r1, r2
    dca6:	d100      	bne.n	dcaa <memcpy+0xc>
    dca8:	bd10      	pop	{r4, pc}
    dcaa:	f811 4b01 	ldrb.w	r4, [r1], #1
    dcae:	f803 4f01 	strb.w	r4, [r3, #1]!
    dcb2:	e7f7      	b.n	dca4 <memcpy+0x6>

0000dcb4 <memmove>:
    dcb4:	4288      	cmp	r0, r1
    dcb6:	b510      	push	{r4, lr}
    dcb8:	eb01 0302 	add.w	r3, r1, r2
    dcbc:	d803      	bhi.n	dcc6 <memmove+0x12>
    dcbe:	1e42      	subs	r2, r0, #1
    dcc0:	4299      	cmp	r1, r3
    dcc2:	d10c      	bne.n	dcde <memmove+0x2a>
    dcc4:	bd10      	pop	{r4, pc}
    dcc6:	4298      	cmp	r0, r3
    dcc8:	d2f9      	bcs.n	dcbe <memmove+0xa>
    dcca:	1881      	adds	r1, r0, r2
    dccc:	1ad2      	subs	r2, r2, r3
    dcce:	42d3      	cmn	r3, r2
    dcd0:	d100      	bne.n	dcd4 <memmove+0x20>
    dcd2:	bd10      	pop	{r4, pc}
    dcd4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    dcd8:	f801 4d01 	strb.w	r4, [r1, #-1]!
    dcdc:	e7f7      	b.n	dcce <memmove+0x1a>
    dcde:	f811 4b01 	ldrb.w	r4, [r1], #1
    dce2:	f802 4f01 	strb.w	r4, [r2, #1]!
    dce6:	e7eb      	b.n	dcc0 <memmove+0xc>

0000dce8 <memset>:
    dce8:	4402      	add	r2, r0
    dcea:	4603      	mov	r3, r0
    dcec:	4293      	cmp	r3, r2
    dcee:	d100      	bne.n	dcf2 <memset+0xa>
    dcf0:	4770      	bx	lr
    dcf2:	f803 1b01 	strb.w	r1, [r3], #1
    dcf6:	e7f9      	b.n	dcec <memset+0x4>

0000dcf8 <siscanf>:
    dcf8:	b40e      	push	{r1, r2, r3}
    dcfa:	b530      	push	{r4, r5, lr}
    dcfc:	b09c      	sub	sp, #112	; 0x70
    dcfe:	ac1f      	add	r4, sp, #124	; 0x7c
    dd00:	f44f 7201 	mov.w	r2, #516	; 0x204
    dd04:	f854 5b04 	ldr.w	r5, [r4], #4
    dd08:	f8ad 2014 	strh.w	r2, [sp, #20]
    dd0c:	9002      	str	r0, [sp, #8]
    dd0e:	9006      	str	r0, [sp, #24]
    dd10:	f000 f81e 	bl	dd50 <strlen>
    dd14:	4b0b      	ldr	r3, [pc, #44]	; (dd44 <siscanf+0x4c>)
    dd16:	9003      	str	r0, [sp, #12]
    dd18:	9007      	str	r0, [sp, #28]
    dd1a:	930b      	str	r3, [sp, #44]	; 0x2c
    dd1c:	480a      	ldr	r0, [pc, #40]	; (dd48 <siscanf+0x50>)
    dd1e:	9401      	str	r4, [sp, #4]
    dd20:	2300      	movs	r3, #0
    dd22:	930f      	str	r3, [sp, #60]	; 0x3c
    dd24:	9314      	str	r3, [sp, #80]	; 0x50
    dd26:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dd2a:	f8ad 3016 	strh.w	r3, [sp, #22]
    dd2e:	462a      	mov	r2, r5
    dd30:	4623      	mov	r3, r4
    dd32:	a902      	add	r1, sp, #8
    dd34:	6800      	ldr	r0, [r0, #0]
    dd36:	f000 f8e1 	bl	defc <__ssvfiscanf_r>
    dd3a:	b01c      	add	sp, #112	; 0x70
    dd3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    dd40:	b003      	add	sp, #12
    dd42:	4770      	bx	lr
    dd44:	0000dd4d 	.word	0x0000dd4d
    dd48:	200000e0 	.word	0x200000e0

0000dd4c <__seofread>:
    dd4c:	2000      	movs	r0, #0
    dd4e:	4770      	bx	lr

0000dd50 <strlen>:
    dd50:	4603      	mov	r3, r0
    dd52:	f813 2b01 	ldrb.w	r2, [r3], #1
    dd56:	2a00      	cmp	r2, #0
    dd58:	d1fb      	bne.n	dd52 <strlen+0x2>
    dd5a:	1a18      	subs	r0, r3, r0
    dd5c:	3801      	subs	r0, #1
    dd5e:	4770      	bx	lr

0000dd60 <strncpy>:
    dd60:	b570      	push	{r4, r5, r6, lr}
    dd62:	4604      	mov	r4, r0
    dd64:	b902      	cbnz	r2, dd68 <strncpy+0x8>
    dd66:	bd70      	pop	{r4, r5, r6, pc}
    dd68:	4623      	mov	r3, r4
    dd6a:	f811 5b01 	ldrb.w	r5, [r1], #1
    dd6e:	f803 5b01 	strb.w	r5, [r3], #1
    dd72:	1e56      	subs	r6, r2, #1
    dd74:	b91d      	cbnz	r5, dd7e <strncpy+0x1e>
    dd76:	4414      	add	r4, r2
    dd78:	42a3      	cmp	r3, r4
    dd7a:	d103      	bne.n	dd84 <strncpy+0x24>
    dd7c:	bd70      	pop	{r4, r5, r6, pc}
    dd7e:	461c      	mov	r4, r3
    dd80:	4632      	mov	r2, r6
    dd82:	e7ef      	b.n	dd64 <strncpy+0x4>
    dd84:	f803 5b01 	strb.w	r5, [r3], #1
    dd88:	e7f6      	b.n	dd78 <strncpy+0x18>
	...

0000dd8c <_malloc_r>:
    dd8c:	b570      	push	{r4, r5, r6, lr}
    dd8e:	1ccd      	adds	r5, r1, #3
    dd90:	f025 0503 	bic.w	r5, r5, #3
    dd94:	3508      	adds	r5, #8
    dd96:	2d0c      	cmp	r5, #12
    dd98:	bf38      	it	cc
    dd9a:	250c      	movcc	r5, #12
    dd9c:	2d00      	cmp	r5, #0
    dd9e:	4606      	mov	r6, r0
    dda0:	db01      	blt.n	dda6 <_malloc_r+0x1a>
    dda2:	42a9      	cmp	r1, r5
    dda4:	d903      	bls.n	ddae <_malloc_r+0x22>
    dda6:	230c      	movs	r3, #12
    dda8:	6033      	str	r3, [r6, #0]
    ddaa:	2000      	movs	r0, #0
    ddac:	bd70      	pop	{r4, r5, r6, pc}
    ddae:	f000 fd67 	bl	e880 <__malloc_lock>
    ddb2:	4a23      	ldr	r2, [pc, #140]	; (de40 <_malloc_r+0xb4>)
    ddb4:	6814      	ldr	r4, [r2, #0]
    ddb6:	4621      	mov	r1, r4
    ddb8:	b991      	cbnz	r1, dde0 <_malloc_r+0x54>
    ddba:	4c22      	ldr	r4, [pc, #136]	; (de44 <_malloc_r+0xb8>)
    ddbc:	6823      	ldr	r3, [r4, #0]
    ddbe:	b91b      	cbnz	r3, ddc8 <_malloc_r+0x3c>
    ddc0:	4630      	mov	r0, r6
    ddc2:	f000 fb47 	bl	e454 <_sbrk_r>
    ddc6:	6020      	str	r0, [r4, #0]
    ddc8:	4629      	mov	r1, r5
    ddca:	4630      	mov	r0, r6
    ddcc:	f000 fb42 	bl	e454 <_sbrk_r>
    ddd0:	1c43      	adds	r3, r0, #1
    ddd2:	d126      	bne.n	de22 <_malloc_r+0x96>
    ddd4:	230c      	movs	r3, #12
    ddd6:	6033      	str	r3, [r6, #0]
    ddd8:	4630      	mov	r0, r6
    ddda:	f000 fd52 	bl	e882 <__malloc_unlock>
    ddde:	e7e4      	b.n	ddaa <_malloc_r+0x1e>
    dde0:	680b      	ldr	r3, [r1, #0]
    dde2:	1b5b      	subs	r3, r3, r5
    dde4:	d41a      	bmi.n	de1c <_malloc_r+0x90>
    dde6:	2b0b      	cmp	r3, #11
    dde8:	d90f      	bls.n	de0a <_malloc_r+0x7e>
    ddea:	600b      	str	r3, [r1, #0]
    ddec:	50cd      	str	r5, [r1, r3]
    ddee:	18cc      	adds	r4, r1, r3
    ddf0:	4630      	mov	r0, r6
    ddf2:	f000 fd46 	bl	e882 <__malloc_unlock>
    ddf6:	f104 000b 	add.w	r0, r4, #11
    ddfa:	1d23      	adds	r3, r4, #4
    ddfc:	f020 0007 	bic.w	r0, r0, #7
    de00:	1ac3      	subs	r3, r0, r3
    de02:	d01b      	beq.n	de3c <_malloc_r+0xb0>
    de04:	425a      	negs	r2, r3
    de06:	50e2      	str	r2, [r4, r3]
    de08:	bd70      	pop	{r4, r5, r6, pc}
    de0a:	428c      	cmp	r4, r1
    de0c:	bf0d      	iteet	eq
    de0e:	6863      	ldreq	r3, [r4, #4]
    de10:	684b      	ldrne	r3, [r1, #4]
    de12:	6063      	strne	r3, [r4, #4]
    de14:	6013      	streq	r3, [r2, #0]
    de16:	bf18      	it	ne
    de18:	460c      	movne	r4, r1
    de1a:	e7e9      	b.n	ddf0 <_malloc_r+0x64>
    de1c:	460c      	mov	r4, r1
    de1e:	6849      	ldr	r1, [r1, #4]
    de20:	e7ca      	b.n	ddb8 <_malloc_r+0x2c>
    de22:	1cc4      	adds	r4, r0, #3
    de24:	f024 0403 	bic.w	r4, r4, #3
    de28:	42a0      	cmp	r0, r4
    de2a:	d005      	beq.n	de38 <_malloc_r+0xac>
    de2c:	1a21      	subs	r1, r4, r0
    de2e:	4630      	mov	r0, r6
    de30:	f000 fb10 	bl	e454 <_sbrk_r>
    de34:	3001      	adds	r0, #1
    de36:	d0cd      	beq.n	ddd4 <_malloc_r+0x48>
    de38:	6025      	str	r5, [r4, #0]
    de3a:	e7d9      	b.n	ddf0 <_malloc_r+0x64>
    de3c:	bd70      	pop	{r4, r5, r6, pc}
    de3e:	bf00      	nop
    de40:	20007404 	.word	0x20007404
    de44:	20007408 	.word	0x20007408

0000de48 <_sungetc_r>:
    de48:	b538      	push	{r3, r4, r5, lr}
    de4a:	1c4b      	adds	r3, r1, #1
    de4c:	4614      	mov	r4, r2
    de4e:	d103      	bne.n	de58 <_sungetc_r+0x10>
    de50:	f04f 35ff 	mov.w	r5, #4294967295
    de54:	4628      	mov	r0, r5
    de56:	bd38      	pop	{r3, r4, r5, pc}
    de58:	8993      	ldrh	r3, [r2, #12]
    de5a:	f023 0320 	bic.w	r3, r3, #32
    de5e:	8193      	strh	r3, [r2, #12]
    de60:	6b53      	ldr	r3, [r2, #52]	; 0x34
    de62:	6852      	ldr	r2, [r2, #4]
    de64:	b2cd      	uxtb	r5, r1
    de66:	b18b      	cbz	r3, de8c <_sungetc_r+0x44>
    de68:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    de6a:	429a      	cmp	r2, r3
    de6c:	da08      	bge.n	de80 <_sungetc_r+0x38>
    de6e:	6823      	ldr	r3, [r4, #0]
    de70:	1e5a      	subs	r2, r3, #1
    de72:	6022      	str	r2, [r4, #0]
    de74:	f803 5c01 	strb.w	r5, [r3, #-1]
    de78:	6863      	ldr	r3, [r4, #4]
    de7a:	3301      	adds	r3, #1
    de7c:	6063      	str	r3, [r4, #4]
    de7e:	e7e9      	b.n	de54 <_sungetc_r+0xc>
    de80:	4621      	mov	r1, r4
    de82:	f000 fc49 	bl	e718 <__submore>
    de86:	2800      	cmp	r0, #0
    de88:	d0f1      	beq.n	de6e <_sungetc_r+0x26>
    de8a:	e7e1      	b.n	de50 <_sungetc_r+0x8>
    de8c:	6921      	ldr	r1, [r4, #16]
    de8e:	6823      	ldr	r3, [r4, #0]
    de90:	b151      	cbz	r1, dea8 <_sungetc_r+0x60>
    de92:	4299      	cmp	r1, r3
    de94:	d208      	bcs.n	dea8 <_sungetc_r+0x60>
    de96:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    de9a:	428d      	cmp	r5, r1
    de9c:	d104      	bne.n	dea8 <_sungetc_r+0x60>
    de9e:	3b01      	subs	r3, #1
    dea0:	3201      	adds	r2, #1
    dea2:	6023      	str	r3, [r4, #0]
    dea4:	6062      	str	r2, [r4, #4]
    dea6:	e7d5      	b.n	de54 <_sungetc_r+0xc>
    dea8:	63e3      	str	r3, [r4, #60]	; 0x3c
    deaa:	f104 0344 	add.w	r3, r4, #68	; 0x44
    deae:	6363      	str	r3, [r4, #52]	; 0x34
    deb0:	2303      	movs	r3, #3
    deb2:	63a3      	str	r3, [r4, #56]	; 0x38
    deb4:	4623      	mov	r3, r4
    deb6:	6422      	str	r2, [r4, #64]	; 0x40
    deb8:	f803 5f46 	strb.w	r5, [r3, #70]!
    debc:	6023      	str	r3, [r4, #0]
    debe:	2301      	movs	r3, #1
    dec0:	e7dc      	b.n	de7c <_sungetc_r+0x34>

0000dec2 <__ssrefill_r>:
    dec2:	b510      	push	{r4, lr}
    dec4:	460c      	mov	r4, r1
    dec6:	6b49      	ldr	r1, [r1, #52]	; 0x34
    dec8:	b169      	cbz	r1, dee6 <__ssrefill_r+0x24>
    deca:	f104 0344 	add.w	r3, r4, #68	; 0x44
    dece:	4299      	cmp	r1, r3
    ded0:	d001      	beq.n	ded6 <__ssrefill_r+0x14>
    ded2:	f000 fcd7 	bl	e884 <_free_r>
    ded6:	6c23      	ldr	r3, [r4, #64]	; 0x40
    ded8:	6063      	str	r3, [r4, #4]
    deda:	2000      	movs	r0, #0
    dedc:	6360      	str	r0, [r4, #52]	; 0x34
    dede:	b113      	cbz	r3, dee6 <__ssrefill_r+0x24>
    dee0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    dee2:	6023      	str	r3, [r4, #0]
    dee4:	bd10      	pop	{r4, pc}
    dee6:	6923      	ldr	r3, [r4, #16]
    dee8:	6023      	str	r3, [r4, #0]
    deea:	2300      	movs	r3, #0
    deec:	6063      	str	r3, [r4, #4]
    deee:	89a3      	ldrh	r3, [r4, #12]
    def0:	f043 0320 	orr.w	r3, r3, #32
    def4:	81a3      	strh	r3, [r4, #12]
    def6:	f04f 30ff 	mov.w	r0, #4294967295
    defa:	bd10      	pop	{r4, pc}

0000defc <__ssvfiscanf_r>:
    defc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    df00:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
    df04:	f10d 080c 	add.w	r8, sp, #12
    df08:	9301      	str	r3, [sp, #4]
    df0a:	2300      	movs	r3, #0
    df0c:	9346      	str	r3, [sp, #280]	; 0x118
    df0e:	9347      	str	r3, [sp, #284]	; 0x11c
    df10:	4ba0      	ldr	r3, [pc, #640]	; (e194 <__ssvfiscanf_r+0x298>)
    df12:	93a2      	str	r3, [sp, #648]	; 0x288
    df14:	f8df 9284 	ldr.w	r9, [pc, #644]	; e19c <__ssvfiscanf_r+0x2a0>
    df18:	4b9f      	ldr	r3, [pc, #636]	; (e198 <__ssvfiscanf_r+0x29c>)
    df1a:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
    df1e:	4606      	mov	r6, r0
    df20:	460c      	mov	r4, r1
    df22:	93a3      	str	r3, [sp, #652]	; 0x28c
    df24:	4692      	mov	sl, r2
    df26:	270a      	movs	r7, #10
    df28:	f89a 3000 	ldrb.w	r3, [sl]
    df2c:	2b00      	cmp	r3, #0
    df2e:	f000 812f 	beq.w	e190 <__ssvfiscanf_r+0x294>
    df32:	f000 fc2f 	bl	e794 <__locale_ctype_ptr>
    df36:	f89a b000 	ldrb.w	fp, [sl]
    df3a:	4458      	add	r0, fp
    df3c:	7843      	ldrb	r3, [r0, #1]
    df3e:	f013 0308 	ands.w	r3, r3, #8
    df42:	d143      	bne.n	dfcc <__ssvfiscanf_r+0xd0>
    df44:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
    df48:	f10a 0501 	add.w	r5, sl, #1
    df4c:	f040 8099 	bne.w	e082 <__ssvfiscanf_r+0x186>
    df50:	9345      	str	r3, [sp, #276]	; 0x114
    df52:	9343      	str	r3, [sp, #268]	; 0x10c
    df54:	f89a 3001 	ldrb.w	r3, [sl, #1]
    df58:	2b2a      	cmp	r3, #42	; 0x2a
    df5a:	d103      	bne.n	df64 <__ssvfiscanf_r+0x68>
    df5c:	2310      	movs	r3, #16
    df5e:	9343      	str	r3, [sp, #268]	; 0x10c
    df60:	f10a 0502 	add.w	r5, sl, #2
    df64:	7829      	ldrb	r1, [r5, #0]
    df66:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
    df6a:	2a09      	cmp	r2, #9
    df6c:	46aa      	mov	sl, r5
    df6e:	f105 0501 	add.w	r5, r5, #1
    df72:	d941      	bls.n	dff8 <__ssvfiscanf_r+0xfc>
    df74:	2203      	movs	r2, #3
    df76:	4889      	ldr	r0, [pc, #548]	; (e19c <__ssvfiscanf_r+0x2a0>)
    df78:	f000 fc32 	bl	e7e0 <memchr>
    df7c:	b138      	cbz	r0, df8e <__ssvfiscanf_r+0x92>
    df7e:	eba0 0309 	sub.w	r3, r0, r9
    df82:	2001      	movs	r0, #1
    df84:	4098      	lsls	r0, r3
    df86:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    df88:	4318      	orrs	r0, r3
    df8a:	9043      	str	r0, [sp, #268]	; 0x10c
    df8c:	46aa      	mov	sl, r5
    df8e:	f89a 3000 	ldrb.w	r3, [sl]
    df92:	2b67      	cmp	r3, #103	; 0x67
    df94:	f10a 0501 	add.w	r5, sl, #1
    df98:	d84a      	bhi.n	e030 <__ssvfiscanf_r+0x134>
    df9a:	2b65      	cmp	r3, #101	; 0x65
    df9c:	f080 80b7 	bcs.w	e10e <__ssvfiscanf_r+0x212>
    dfa0:	2b47      	cmp	r3, #71	; 0x47
    dfa2:	d82f      	bhi.n	e004 <__ssvfiscanf_r+0x108>
    dfa4:	2b45      	cmp	r3, #69	; 0x45
    dfa6:	f080 80b2 	bcs.w	e10e <__ssvfiscanf_r+0x212>
    dfaa:	2b00      	cmp	r3, #0
    dfac:	f000 8082 	beq.w	e0b4 <__ssvfiscanf_r+0x1b8>
    dfb0:	2b25      	cmp	r3, #37	; 0x25
    dfb2:	d066      	beq.n	e082 <__ssvfiscanf_r+0x186>
    dfb4:	2303      	movs	r3, #3
    dfb6:	9349      	str	r3, [sp, #292]	; 0x124
    dfb8:	9744      	str	r7, [sp, #272]	; 0x110
    dfba:	e045      	b.n	e048 <__ssvfiscanf_r+0x14c>
    dfbc:	9947      	ldr	r1, [sp, #284]	; 0x11c
    dfbe:	3101      	adds	r1, #1
    dfc0:	9147      	str	r1, [sp, #284]	; 0x11c
    dfc2:	6861      	ldr	r1, [r4, #4]
    dfc4:	3301      	adds	r3, #1
    dfc6:	3901      	subs	r1, #1
    dfc8:	6061      	str	r1, [r4, #4]
    dfca:	6023      	str	r3, [r4, #0]
    dfcc:	6863      	ldr	r3, [r4, #4]
    dfce:	2b00      	cmp	r3, #0
    dfd0:	dd0b      	ble.n	dfea <__ssvfiscanf_r+0xee>
    dfd2:	f000 fbdf 	bl	e794 <__locale_ctype_ptr>
    dfd6:	6823      	ldr	r3, [r4, #0]
    dfd8:	7819      	ldrb	r1, [r3, #0]
    dfda:	4408      	add	r0, r1
    dfdc:	7841      	ldrb	r1, [r0, #1]
    dfde:	070d      	lsls	r5, r1, #28
    dfe0:	d4ec      	bmi.n	dfbc <__ssvfiscanf_r+0xc0>
    dfe2:	f10a 0501 	add.w	r5, sl, #1
    dfe6:	46aa      	mov	sl, r5
    dfe8:	e79e      	b.n	df28 <__ssvfiscanf_r+0x2c>
    dfea:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    dfec:	4621      	mov	r1, r4
    dfee:	4630      	mov	r0, r6
    dff0:	4798      	blx	r3
    dff2:	2800      	cmp	r0, #0
    dff4:	d0ed      	beq.n	dfd2 <__ssvfiscanf_r+0xd6>
    dff6:	e7f4      	b.n	dfe2 <__ssvfiscanf_r+0xe6>
    dff8:	9b45      	ldr	r3, [sp, #276]	; 0x114
    dffa:	fb07 1303 	mla	r3, r7, r3, r1
    dffe:	3b30      	subs	r3, #48	; 0x30
    e000:	9345      	str	r3, [sp, #276]	; 0x114
    e002:	e7af      	b.n	df64 <__ssvfiscanf_r+0x68>
    e004:	2b5b      	cmp	r3, #91	; 0x5b
    e006:	d061      	beq.n	e0cc <__ssvfiscanf_r+0x1d0>
    e008:	d80c      	bhi.n	e024 <__ssvfiscanf_r+0x128>
    e00a:	2b58      	cmp	r3, #88	; 0x58
    e00c:	d1d2      	bne.n	dfb4 <__ssvfiscanf_r+0xb8>
    e00e:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    e010:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    e014:	9243      	str	r2, [sp, #268]	; 0x10c
    e016:	2210      	movs	r2, #16
    e018:	9244      	str	r2, [sp, #272]	; 0x110
    e01a:	2b6f      	cmp	r3, #111	; 0x6f
    e01c:	bfb4      	ite	lt
    e01e:	2303      	movlt	r3, #3
    e020:	2304      	movge	r3, #4
    e022:	e010      	b.n	e046 <__ssvfiscanf_r+0x14a>
    e024:	2b63      	cmp	r3, #99	; 0x63
    e026:	d05c      	beq.n	e0e2 <__ssvfiscanf_r+0x1e6>
    e028:	2b64      	cmp	r3, #100	; 0x64
    e02a:	d1c3      	bne.n	dfb4 <__ssvfiscanf_r+0xb8>
    e02c:	9744      	str	r7, [sp, #272]	; 0x110
    e02e:	e7f4      	b.n	e01a <__ssvfiscanf_r+0x11e>
    e030:	2b70      	cmp	r3, #112	; 0x70
    e032:	d042      	beq.n	e0ba <__ssvfiscanf_r+0x1be>
    e034:	d81d      	bhi.n	e072 <__ssvfiscanf_r+0x176>
    e036:	2b6e      	cmp	r3, #110	; 0x6e
    e038:	d059      	beq.n	e0ee <__ssvfiscanf_r+0x1f2>
    e03a:	d843      	bhi.n	e0c4 <__ssvfiscanf_r+0x1c8>
    e03c:	2b69      	cmp	r3, #105	; 0x69
    e03e:	d1b9      	bne.n	dfb4 <__ssvfiscanf_r+0xb8>
    e040:	2300      	movs	r3, #0
    e042:	9344      	str	r3, [sp, #272]	; 0x110
    e044:	2303      	movs	r3, #3
    e046:	9349      	str	r3, [sp, #292]	; 0x124
    e048:	6863      	ldr	r3, [r4, #4]
    e04a:	2b00      	cmp	r3, #0
    e04c:	dd61      	ble.n	e112 <__ssvfiscanf_r+0x216>
    e04e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    e050:	0659      	lsls	r1, r3, #25
    e052:	d56f      	bpl.n	e134 <__ssvfiscanf_r+0x238>
    e054:	9b49      	ldr	r3, [sp, #292]	; 0x124
    e056:	2b02      	cmp	r3, #2
    e058:	dc7c      	bgt.n	e154 <__ssvfiscanf_r+0x258>
    e05a:	ab01      	add	r3, sp, #4
    e05c:	4622      	mov	r2, r4
    e05e:	a943      	add	r1, sp, #268	; 0x10c
    e060:	4630      	mov	r0, r6
    e062:	f000 f89f 	bl	e1a4 <_scanf_chars>
    e066:	2801      	cmp	r0, #1
    e068:	f000 8092 	beq.w	e190 <__ssvfiscanf_r+0x294>
    e06c:	2802      	cmp	r0, #2
    e06e:	d1ba      	bne.n	dfe6 <__ssvfiscanf_r+0xea>
    e070:	e01d      	b.n	e0ae <__ssvfiscanf_r+0x1b2>
    e072:	2b75      	cmp	r3, #117	; 0x75
    e074:	d0da      	beq.n	e02c <__ssvfiscanf_r+0x130>
    e076:	2b78      	cmp	r3, #120	; 0x78
    e078:	d0c9      	beq.n	e00e <__ssvfiscanf_r+0x112>
    e07a:	2b73      	cmp	r3, #115	; 0x73
    e07c:	d19a      	bne.n	dfb4 <__ssvfiscanf_r+0xb8>
    e07e:	2302      	movs	r3, #2
    e080:	e7e1      	b.n	e046 <__ssvfiscanf_r+0x14a>
    e082:	6863      	ldr	r3, [r4, #4]
    e084:	2b00      	cmp	r3, #0
    e086:	dd0c      	ble.n	e0a2 <__ssvfiscanf_r+0x1a6>
    e088:	6823      	ldr	r3, [r4, #0]
    e08a:	781a      	ldrb	r2, [r3, #0]
    e08c:	4593      	cmp	fp, r2
    e08e:	d17f      	bne.n	e190 <__ssvfiscanf_r+0x294>
    e090:	3301      	adds	r3, #1
    e092:	6862      	ldr	r2, [r4, #4]
    e094:	6023      	str	r3, [r4, #0]
    e096:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    e098:	3a01      	subs	r2, #1
    e09a:	3301      	adds	r3, #1
    e09c:	6062      	str	r2, [r4, #4]
    e09e:	9347      	str	r3, [sp, #284]	; 0x11c
    e0a0:	e7a1      	b.n	dfe6 <__ssvfiscanf_r+0xea>
    e0a2:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    e0a4:	4621      	mov	r1, r4
    e0a6:	4630      	mov	r0, r6
    e0a8:	4798      	blx	r3
    e0aa:	2800      	cmp	r0, #0
    e0ac:	d0ec      	beq.n	e088 <__ssvfiscanf_r+0x18c>
    e0ae:	9846      	ldr	r0, [sp, #280]	; 0x118
    e0b0:	2800      	cmp	r0, #0
    e0b2:	d163      	bne.n	e17c <__ssvfiscanf_r+0x280>
    e0b4:	f04f 30ff 	mov.w	r0, #4294967295
    e0b8:	e066      	b.n	e188 <__ssvfiscanf_r+0x28c>
    e0ba:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    e0bc:	f042 0220 	orr.w	r2, r2, #32
    e0c0:	9243      	str	r2, [sp, #268]	; 0x10c
    e0c2:	e7a4      	b.n	e00e <__ssvfiscanf_r+0x112>
    e0c4:	2308      	movs	r3, #8
    e0c6:	9344      	str	r3, [sp, #272]	; 0x110
    e0c8:	2304      	movs	r3, #4
    e0ca:	e7bc      	b.n	e046 <__ssvfiscanf_r+0x14a>
    e0cc:	4629      	mov	r1, r5
    e0ce:	4640      	mov	r0, r8
    e0d0:	f000 f9d0 	bl	e474 <__sccl>
    e0d4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    e0d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e0da:	9343      	str	r3, [sp, #268]	; 0x10c
    e0dc:	4605      	mov	r5, r0
    e0de:	2301      	movs	r3, #1
    e0e0:	e7b1      	b.n	e046 <__ssvfiscanf_r+0x14a>
    e0e2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    e0e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e0e8:	9343      	str	r3, [sp, #268]	; 0x10c
    e0ea:	2300      	movs	r3, #0
    e0ec:	e7ab      	b.n	e046 <__ssvfiscanf_r+0x14a>
    e0ee:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    e0f0:	06d0      	lsls	r0, r2, #27
    e0f2:	f53f af78 	bmi.w	dfe6 <__ssvfiscanf_r+0xea>
    e0f6:	f012 0f01 	tst.w	r2, #1
    e0fa:	9a01      	ldr	r2, [sp, #4]
    e0fc:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    e0fe:	f102 0104 	add.w	r1, r2, #4
    e102:	9101      	str	r1, [sp, #4]
    e104:	6812      	ldr	r2, [r2, #0]
    e106:	bf14      	ite	ne
    e108:	8013      	strhne	r3, [r2, #0]
    e10a:	6013      	streq	r3, [r2, #0]
    e10c:	e76b      	b.n	dfe6 <__ssvfiscanf_r+0xea>
    e10e:	2305      	movs	r3, #5
    e110:	e799      	b.n	e046 <__ssvfiscanf_r+0x14a>
    e112:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    e114:	4621      	mov	r1, r4
    e116:	4630      	mov	r0, r6
    e118:	4798      	blx	r3
    e11a:	2800      	cmp	r0, #0
    e11c:	d097      	beq.n	e04e <__ssvfiscanf_r+0x152>
    e11e:	e7c6      	b.n	e0ae <__ssvfiscanf_r+0x1b2>
    e120:	9a47      	ldr	r2, [sp, #284]	; 0x11c
    e122:	3201      	adds	r2, #1
    e124:	9247      	str	r2, [sp, #284]	; 0x11c
    e126:	6862      	ldr	r2, [r4, #4]
    e128:	3a01      	subs	r2, #1
    e12a:	2a00      	cmp	r2, #0
    e12c:	6062      	str	r2, [r4, #4]
    e12e:	dd0a      	ble.n	e146 <__ssvfiscanf_r+0x24a>
    e130:	3301      	adds	r3, #1
    e132:	6023      	str	r3, [r4, #0]
    e134:	f000 fb2e 	bl	e794 <__locale_ctype_ptr>
    e138:	6823      	ldr	r3, [r4, #0]
    e13a:	781a      	ldrb	r2, [r3, #0]
    e13c:	4410      	add	r0, r2
    e13e:	7842      	ldrb	r2, [r0, #1]
    e140:	0712      	lsls	r2, r2, #28
    e142:	d4ed      	bmi.n	e120 <__ssvfiscanf_r+0x224>
    e144:	e786      	b.n	e054 <__ssvfiscanf_r+0x158>
    e146:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    e148:	4621      	mov	r1, r4
    e14a:	4630      	mov	r0, r6
    e14c:	4798      	blx	r3
    e14e:	2800      	cmp	r0, #0
    e150:	d0f0      	beq.n	e134 <__ssvfiscanf_r+0x238>
    e152:	e7ac      	b.n	e0ae <__ssvfiscanf_r+0x1b2>
    e154:	2b04      	cmp	r3, #4
    e156:	dc06      	bgt.n	e166 <__ssvfiscanf_r+0x26a>
    e158:	ab01      	add	r3, sp, #4
    e15a:	4622      	mov	r2, r4
    e15c:	a943      	add	r1, sp, #268	; 0x10c
    e15e:	4630      	mov	r0, r6
    e160:	f000 f884 	bl	e26c <_scanf_i>
    e164:	e77f      	b.n	e066 <__ssvfiscanf_r+0x16a>
    e166:	4b0e      	ldr	r3, [pc, #56]	; (e1a0 <__ssvfiscanf_r+0x2a4>)
    e168:	2b00      	cmp	r3, #0
    e16a:	f43f af3c 	beq.w	dfe6 <__ssvfiscanf_r+0xea>
    e16e:	ab01      	add	r3, sp, #4
    e170:	4622      	mov	r2, r4
    e172:	a943      	add	r1, sp, #268	; 0x10c
    e174:	4630      	mov	r0, r6
    e176:	f3af 8000 	nop.w
    e17a:	e774      	b.n	e066 <__ssvfiscanf_r+0x16a>
    e17c:	89a3      	ldrh	r3, [r4, #12]
    e17e:	f013 0f40 	tst.w	r3, #64	; 0x40
    e182:	bf18      	it	ne
    e184:	f04f 30ff 	movne.w	r0, #4294967295
    e188:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
    e18c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e190:	9846      	ldr	r0, [sp, #280]	; 0x118
    e192:	e7f9      	b.n	e188 <__ssvfiscanf_r+0x28c>
    e194:	0000de49 	.word	0x0000de49
    e198:	0000dec3 	.word	0x0000dec3
    e19c:	000118dc 	.word	0x000118dc
    e1a0:	00000000 	.word	0x00000000

0000e1a4 <_scanf_chars>:
    e1a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e1a8:	4615      	mov	r5, r2
    e1aa:	688a      	ldr	r2, [r1, #8]
    e1ac:	4680      	mov	r8, r0
    e1ae:	460c      	mov	r4, r1
    e1b0:	b932      	cbnz	r2, e1c0 <_scanf_chars+0x1c>
    e1b2:	698a      	ldr	r2, [r1, #24]
    e1b4:	2a00      	cmp	r2, #0
    e1b6:	bf0c      	ite	eq
    e1b8:	2201      	moveq	r2, #1
    e1ba:	f04f 32ff 	movne.w	r2, #4294967295
    e1be:	608a      	str	r2, [r1, #8]
    e1c0:	6822      	ldr	r2, [r4, #0]
    e1c2:	06d1      	lsls	r1, r2, #27
    e1c4:	bf5f      	itttt	pl
    e1c6:	681a      	ldrpl	r2, [r3, #0]
    e1c8:	1d11      	addpl	r1, r2, #4
    e1ca:	6019      	strpl	r1, [r3, #0]
    e1cc:	6817      	ldrpl	r7, [r2, #0]
    e1ce:	2600      	movs	r6, #0
    e1d0:	69a3      	ldr	r3, [r4, #24]
    e1d2:	b1db      	cbz	r3, e20c <_scanf_chars+0x68>
    e1d4:	2b01      	cmp	r3, #1
    e1d6:	d107      	bne.n	e1e8 <_scanf_chars+0x44>
    e1d8:	682b      	ldr	r3, [r5, #0]
    e1da:	6962      	ldr	r2, [r4, #20]
    e1dc:	781b      	ldrb	r3, [r3, #0]
    e1de:	5cd3      	ldrb	r3, [r2, r3]
    e1e0:	b9a3      	cbnz	r3, e20c <_scanf_chars+0x68>
    e1e2:	2e00      	cmp	r6, #0
    e1e4:	d132      	bne.n	e24c <_scanf_chars+0xa8>
    e1e6:	e006      	b.n	e1f6 <_scanf_chars+0x52>
    e1e8:	2b02      	cmp	r3, #2
    e1ea:	d007      	beq.n	e1fc <_scanf_chars+0x58>
    e1ec:	2e00      	cmp	r6, #0
    e1ee:	d12d      	bne.n	e24c <_scanf_chars+0xa8>
    e1f0:	69a3      	ldr	r3, [r4, #24]
    e1f2:	2b01      	cmp	r3, #1
    e1f4:	d12a      	bne.n	e24c <_scanf_chars+0xa8>
    e1f6:	2001      	movs	r0, #1
    e1f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e1fc:	f000 faca 	bl	e794 <__locale_ctype_ptr>
    e200:	682b      	ldr	r3, [r5, #0]
    e202:	781b      	ldrb	r3, [r3, #0]
    e204:	4418      	add	r0, r3
    e206:	7843      	ldrb	r3, [r0, #1]
    e208:	071b      	lsls	r3, r3, #28
    e20a:	d4ef      	bmi.n	e1ec <_scanf_chars+0x48>
    e20c:	6823      	ldr	r3, [r4, #0]
    e20e:	06da      	lsls	r2, r3, #27
    e210:	bf5e      	ittt	pl
    e212:	682b      	ldrpl	r3, [r5, #0]
    e214:	781b      	ldrbpl	r3, [r3, #0]
    e216:	703b      	strbpl	r3, [r7, #0]
    e218:	682a      	ldr	r2, [r5, #0]
    e21a:	686b      	ldr	r3, [r5, #4]
    e21c:	f102 0201 	add.w	r2, r2, #1
    e220:	602a      	str	r2, [r5, #0]
    e222:	68a2      	ldr	r2, [r4, #8]
    e224:	f103 33ff 	add.w	r3, r3, #4294967295
    e228:	f102 32ff 	add.w	r2, r2, #4294967295
    e22c:	606b      	str	r3, [r5, #4]
    e22e:	f106 0601 	add.w	r6, r6, #1
    e232:	bf58      	it	pl
    e234:	3701      	addpl	r7, #1
    e236:	60a2      	str	r2, [r4, #8]
    e238:	b142      	cbz	r2, e24c <_scanf_chars+0xa8>
    e23a:	2b00      	cmp	r3, #0
    e23c:	dcc8      	bgt.n	e1d0 <_scanf_chars+0x2c>
    e23e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    e242:	4629      	mov	r1, r5
    e244:	4640      	mov	r0, r8
    e246:	4798      	blx	r3
    e248:	2800      	cmp	r0, #0
    e24a:	d0c1      	beq.n	e1d0 <_scanf_chars+0x2c>
    e24c:	6823      	ldr	r3, [r4, #0]
    e24e:	f013 0310 	ands.w	r3, r3, #16
    e252:	d105      	bne.n	e260 <_scanf_chars+0xbc>
    e254:	68e2      	ldr	r2, [r4, #12]
    e256:	3201      	adds	r2, #1
    e258:	60e2      	str	r2, [r4, #12]
    e25a:	69a2      	ldr	r2, [r4, #24]
    e25c:	b102      	cbz	r2, e260 <_scanf_chars+0xbc>
    e25e:	703b      	strb	r3, [r7, #0]
    e260:	6923      	ldr	r3, [r4, #16]
    e262:	441e      	add	r6, r3
    e264:	6126      	str	r6, [r4, #16]
    e266:	2000      	movs	r0, #0
    e268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e26c <_scanf_i>:
    e26c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e270:	469a      	mov	sl, r3
    e272:	4b74      	ldr	r3, [pc, #464]	; (e444 <_scanf_i+0x1d8>)
    e274:	460c      	mov	r4, r1
    e276:	4683      	mov	fp, r0
    e278:	4616      	mov	r6, r2
    e27a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    e27e:	b087      	sub	sp, #28
    e280:	ab03      	add	r3, sp, #12
    e282:	68a7      	ldr	r7, [r4, #8]
    e284:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    e288:	4b6f      	ldr	r3, [pc, #444]	; (e448 <_scanf_i+0x1dc>)
    e28a:	69a1      	ldr	r1, [r4, #24]
    e28c:	4a6f      	ldr	r2, [pc, #444]	; (e44c <_scanf_i+0x1e0>)
    e28e:	2903      	cmp	r1, #3
    e290:	bf18      	it	ne
    e292:	461a      	movne	r2, r3
    e294:	1e7b      	subs	r3, r7, #1
    e296:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
    e29a:	bf84      	itt	hi
    e29c:	f240 135d 	movwhi	r3, #349	; 0x15d
    e2a0:	60a3      	strhi	r3, [r4, #8]
    e2a2:	6823      	ldr	r3, [r4, #0]
    e2a4:	9200      	str	r2, [sp, #0]
    e2a6:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
    e2aa:	bf88      	it	hi
    e2ac:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
    e2b0:	f104 091c 	add.w	r9, r4, #28
    e2b4:	6023      	str	r3, [r4, #0]
    e2b6:	bf8c      	ite	hi
    e2b8:	197f      	addhi	r7, r7, r5
    e2ba:	2700      	movls	r7, #0
    e2bc:	464b      	mov	r3, r9
    e2be:	f04f 0800 	mov.w	r8, #0
    e2c2:	9301      	str	r3, [sp, #4]
    e2c4:	6831      	ldr	r1, [r6, #0]
    e2c6:	ab03      	add	r3, sp, #12
    e2c8:	2202      	movs	r2, #2
    e2ca:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
    e2ce:	7809      	ldrb	r1, [r1, #0]
    e2d0:	f000 fa86 	bl	e7e0 <memchr>
    e2d4:	9b01      	ldr	r3, [sp, #4]
    e2d6:	b328      	cbz	r0, e324 <_scanf_i+0xb8>
    e2d8:	f1b8 0f01 	cmp.w	r8, #1
    e2dc:	d156      	bne.n	e38c <_scanf_i+0x120>
    e2de:	6862      	ldr	r2, [r4, #4]
    e2e0:	b92a      	cbnz	r2, e2ee <_scanf_i+0x82>
    e2e2:	2208      	movs	r2, #8
    e2e4:	6062      	str	r2, [r4, #4]
    e2e6:	6822      	ldr	r2, [r4, #0]
    e2e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    e2ec:	6022      	str	r2, [r4, #0]
    e2ee:	6822      	ldr	r2, [r4, #0]
    e2f0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
    e2f4:	6022      	str	r2, [r4, #0]
    e2f6:	68a2      	ldr	r2, [r4, #8]
    e2f8:	1e51      	subs	r1, r2, #1
    e2fa:	60a1      	str	r1, [r4, #8]
    e2fc:	b192      	cbz	r2, e324 <_scanf_i+0xb8>
    e2fe:	6832      	ldr	r2, [r6, #0]
    e300:	1c51      	adds	r1, r2, #1
    e302:	6031      	str	r1, [r6, #0]
    e304:	7812      	ldrb	r2, [r2, #0]
    e306:	701a      	strb	r2, [r3, #0]
    e308:	1c5d      	adds	r5, r3, #1
    e30a:	6873      	ldr	r3, [r6, #4]
    e30c:	3b01      	subs	r3, #1
    e30e:	2b00      	cmp	r3, #0
    e310:	6073      	str	r3, [r6, #4]
    e312:	dc06      	bgt.n	e322 <_scanf_i+0xb6>
    e314:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    e318:	4631      	mov	r1, r6
    e31a:	4658      	mov	r0, fp
    e31c:	4798      	blx	r3
    e31e:	2800      	cmp	r0, #0
    e320:	d176      	bne.n	e410 <_scanf_i+0x1a4>
    e322:	462b      	mov	r3, r5
    e324:	f108 0801 	add.w	r8, r8, #1
    e328:	f1b8 0f03 	cmp.w	r8, #3
    e32c:	d1c9      	bne.n	e2c2 <_scanf_i+0x56>
    e32e:	6862      	ldr	r2, [r4, #4]
    e330:	b90a      	cbnz	r2, e336 <_scanf_i+0xca>
    e332:	220a      	movs	r2, #10
    e334:	6062      	str	r2, [r4, #4]
    e336:	6862      	ldr	r2, [r4, #4]
    e338:	4945      	ldr	r1, [pc, #276]	; (e450 <_scanf_i+0x1e4>)
    e33a:	6960      	ldr	r0, [r4, #20]
    e33c:	9301      	str	r3, [sp, #4]
    e33e:	1a89      	subs	r1, r1, r2
    e340:	f000 f898 	bl	e474 <__sccl>
    e344:	9b01      	ldr	r3, [sp, #4]
    e346:	f04f 0800 	mov.w	r8, #0
    e34a:	461d      	mov	r5, r3
    e34c:	68a3      	ldr	r3, [r4, #8]
    e34e:	2b00      	cmp	r3, #0
    e350:	d038      	beq.n	e3c4 <_scanf_i+0x158>
    e352:	6831      	ldr	r1, [r6, #0]
    e354:	6960      	ldr	r0, [r4, #20]
    e356:	780a      	ldrb	r2, [r1, #0]
    e358:	5c80      	ldrb	r0, [r0, r2]
    e35a:	2800      	cmp	r0, #0
    e35c:	d032      	beq.n	e3c4 <_scanf_i+0x158>
    e35e:	2a30      	cmp	r2, #48	; 0x30
    e360:	6822      	ldr	r2, [r4, #0]
    e362:	d121      	bne.n	e3a8 <_scanf_i+0x13c>
    e364:	0510      	lsls	r0, r2, #20
    e366:	d51f      	bpl.n	e3a8 <_scanf_i+0x13c>
    e368:	f108 0801 	add.w	r8, r8, #1
    e36c:	b117      	cbz	r7, e374 <_scanf_i+0x108>
    e36e:	3301      	adds	r3, #1
    e370:	3f01      	subs	r7, #1
    e372:	60a3      	str	r3, [r4, #8]
    e374:	6873      	ldr	r3, [r6, #4]
    e376:	3b01      	subs	r3, #1
    e378:	2b00      	cmp	r3, #0
    e37a:	6073      	str	r3, [r6, #4]
    e37c:	dd1b      	ble.n	e3b6 <_scanf_i+0x14a>
    e37e:	6833      	ldr	r3, [r6, #0]
    e380:	3301      	adds	r3, #1
    e382:	6033      	str	r3, [r6, #0]
    e384:	68a3      	ldr	r3, [r4, #8]
    e386:	3b01      	subs	r3, #1
    e388:	60a3      	str	r3, [r4, #8]
    e38a:	e7df      	b.n	e34c <_scanf_i+0xe0>
    e38c:	f1b8 0f02 	cmp.w	r8, #2
    e390:	d1b1      	bne.n	e2f6 <_scanf_i+0x8a>
    e392:	6822      	ldr	r2, [r4, #0]
    e394:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
    e398:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    e39c:	d1c2      	bne.n	e324 <_scanf_i+0xb8>
    e39e:	2110      	movs	r1, #16
    e3a0:	6061      	str	r1, [r4, #4]
    e3a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    e3a6:	e7a5      	b.n	e2f4 <_scanf_i+0x88>
    e3a8:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
    e3ac:	6022      	str	r2, [r4, #0]
    e3ae:	780b      	ldrb	r3, [r1, #0]
    e3b0:	702b      	strb	r3, [r5, #0]
    e3b2:	3501      	adds	r5, #1
    e3b4:	e7de      	b.n	e374 <_scanf_i+0x108>
    e3b6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    e3ba:	4631      	mov	r1, r6
    e3bc:	4658      	mov	r0, fp
    e3be:	4798      	blx	r3
    e3c0:	2800      	cmp	r0, #0
    e3c2:	d0df      	beq.n	e384 <_scanf_i+0x118>
    e3c4:	6823      	ldr	r3, [r4, #0]
    e3c6:	05d9      	lsls	r1, r3, #23
    e3c8:	d50c      	bpl.n	e3e4 <_scanf_i+0x178>
    e3ca:	454d      	cmp	r5, r9
    e3cc:	d908      	bls.n	e3e0 <_scanf_i+0x174>
    e3ce:	f815 1c01 	ldrb.w	r1, [r5, #-1]
    e3d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
    e3d6:	4632      	mov	r2, r6
    e3d8:	4658      	mov	r0, fp
    e3da:	4798      	blx	r3
    e3dc:	1e6f      	subs	r7, r5, #1
    e3de:	463d      	mov	r5, r7
    e3e0:	454d      	cmp	r5, r9
    e3e2:	d02c      	beq.n	e43e <_scanf_i+0x1d2>
    e3e4:	6822      	ldr	r2, [r4, #0]
    e3e6:	f012 0210 	ands.w	r2, r2, #16
    e3ea:	d11e      	bne.n	e42a <_scanf_i+0x1be>
    e3ec:	702a      	strb	r2, [r5, #0]
    e3ee:	6863      	ldr	r3, [r4, #4]
    e3f0:	9e00      	ldr	r6, [sp, #0]
    e3f2:	4649      	mov	r1, r9
    e3f4:	4658      	mov	r0, fp
    e3f6:	47b0      	blx	r6
    e3f8:	6822      	ldr	r2, [r4, #0]
    e3fa:	f8da 3000 	ldr.w	r3, [sl]
    e3fe:	f012 0f20 	tst.w	r2, #32
    e402:	d008      	beq.n	e416 <_scanf_i+0x1aa>
    e404:	1d1a      	adds	r2, r3, #4
    e406:	f8ca 2000 	str.w	r2, [sl]
    e40a:	681b      	ldr	r3, [r3, #0]
    e40c:	6018      	str	r0, [r3, #0]
    e40e:	e009      	b.n	e424 <_scanf_i+0x1b8>
    e410:	f04f 0800 	mov.w	r8, #0
    e414:	e7d6      	b.n	e3c4 <_scanf_i+0x158>
    e416:	07d2      	lsls	r2, r2, #31
    e418:	d5f4      	bpl.n	e404 <_scanf_i+0x198>
    e41a:	1d1a      	adds	r2, r3, #4
    e41c:	f8ca 2000 	str.w	r2, [sl]
    e420:	681b      	ldr	r3, [r3, #0]
    e422:	8018      	strh	r0, [r3, #0]
    e424:	68e3      	ldr	r3, [r4, #12]
    e426:	3301      	adds	r3, #1
    e428:	60e3      	str	r3, [r4, #12]
    e42a:	eba5 0509 	sub.w	r5, r5, r9
    e42e:	44a8      	add	r8, r5
    e430:	6925      	ldr	r5, [r4, #16]
    e432:	4445      	add	r5, r8
    e434:	6125      	str	r5, [r4, #16]
    e436:	2000      	movs	r0, #0
    e438:	b007      	add	sp, #28
    e43a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e43e:	2001      	movs	r0, #1
    e440:	e7fa      	b.n	e438 <_scanf_i+0x1cc>
    e442:	bf00      	nop
    e444:	000118e0 	.word	0x000118e0
    e448:	0000e6f5 	.word	0x0000e6f5
    e44c:	0000e5d5 	.word	0x0000e5d5
    e450:	000118fc 	.word	0x000118fc

0000e454 <_sbrk_r>:
    e454:	b538      	push	{r3, r4, r5, lr}
    e456:	4c06      	ldr	r4, [pc, #24]	; (e470 <_sbrk_r+0x1c>)
    e458:	2300      	movs	r3, #0
    e45a:	4605      	mov	r5, r0
    e45c:	4608      	mov	r0, r1
    e45e:	6023      	str	r3, [r4, #0]
    e460:	f7f4 fa34 	bl	28cc <_sbrk>
    e464:	1c43      	adds	r3, r0, #1
    e466:	d102      	bne.n	e46e <_sbrk_r+0x1a>
    e468:	6823      	ldr	r3, [r4, #0]
    e46a:	b103      	cbz	r3, e46e <_sbrk_r+0x1a>
    e46c:	602b      	str	r3, [r5, #0]
    e46e:	bd38      	pop	{r3, r4, r5, pc}
    e470:	200090e4 	.word	0x200090e4

0000e474 <__sccl>:
    e474:	b570      	push	{r4, r5, r6, lr}
    e476:	780b      	ldrb	r3, [r1, #0]
    e478:	2b5e      	cmp	r3, #94	; 0x5e
    e47a:	bf13      	iteet	ne
    e47c:	1c4a      	addne	r2, r1, #1
    e47e:	1c8a      	addeq	r2, r1, #2
    e480:	784b      	ldrbeq	r3, [r1, #1]
    e482:	2100      	movne	r1, #0
    e484:	bf08      	it	eq
    e486:	2101      	moveq	r1, #1
    e488:	1e44      	subs	r4, r0, #1
    e48a:	f100 05ff 	add.w	r5, r0, #255	; 0xff
    e48e:	f804 1f01 	strb.w	r1, [r4, #1]!
    e492:	42a5      	cmp	r5, r4
    e494:	d1fb      	bne.n	e48e <__sccl+0x1a>
    e496:	b913      	cbnz	r3, e49e <__sccl+0x2a>
    e498:	3a01      	subs	r2, #1
    e49a:	4610      	mov	r0, r2
    e49c:	bd70      	pop	{r4, r5, r6, pc}
    e49e:	f081 0401 	eor.w	r4, r1, #1
    e4a2:	54c4      	strb	r4, [r0, r3]
    e4a4:	4611      	mov	r1, r2
    e4a6:	780d      	ldrb	r5, [r1, #0]
    e4a8:	2d2d      	cmp	r5, #45	; 0x2d
    e4aa:	f101 0201 	add.w	r2, r1, #1
    e4ae:	d006      	beq.n	e4be <__sccl+0x4a>
    e4b0:	2d5d      	cmp	r5, #93	; 0x5d
    e4b2:	d0f2      	beq.n	e49a <__sccl+0x26>
    e4b4:	b90d      	cbnz	r5, e4ba <__sccl+0x46>
    e4b6:	460a      	mov	r2, r1
    e4b8:	e7ef      	b.n	e49a <__sccl+0x26>
    e4ba:	462b      	mov	r3, r5
    e4bc:	e7f1      	b.n	e4a2 <__sccl+0x2e>
    e4be:	784e      	ldrb	r6, [r1, #1]
    e4c0:	2e5d      	cmp	r6, #93	; 0x5d
    e4c2:	d0fa      	beq.n	e4ba <__sccl+0x46>
    e4c4:	42b3      	cmp	r3, r6
    e4c6:	dcf8      	bgt.n	e4ba <__sccl+0x46>
    e4c8:	3102      	adds	r1, #2
    e4ca:	3301      	adds	r3, #1
    e4cc:	429e      	cmp	r6, r3
    e4ce:	54c4      	strb	r4, [r0, r3]
    e4d0:	dcfb      	bgt.n	e4ca <__sccl+0x56>
    e4d2:	e7e8      	b.n	e4a6 <__sccl+0x32>

0000e4d4 <_strtol_l.isra.0>:
    e4d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e4d8:	4680      	mov	r8, r0
    e4da:	4689      	mov	r9, r1
    e4dc:	4692      	mov	sl, r2
    e4de:	461f      	mov	r7, r3
    e4e0:	468b      	mov	fp, r1
    e4e2:	465d      	mov	r5, fp
    e4e4:	980a      	ldr	r0, [sp, #40]	; 0x28
    e4e6:	f815 4b01 	ldrb.w	r4, [r5], #1
    e4ea:	f000 f950 	bl	e78e <__locale_ctype_ptr_l>
    e4ee:	4420      	add	r0, r4
    e4f0:	7846      	ldrb	r6, [r0, #1]
    e4f2:	f016 0608 	ands.w	r6, r6, #8
    e4f6:	d10b      	bne.n	e510 <_strtol_l.isra.0+0x3c>
    e4f8:	2c2d      	cmp	r4, #45	; 0x2d
    e4fa:	d10b      	bne.n	e514 <_strtol_l.isra.0+0x40>
    e4fc:	782c      	ldrb	r4, [r5, #0]
    e4fe:	2601      	movs	r6, #1
    e500:	f10b 0502 	add.w	r5, fp, #2
    e504:	b167      	cbz	r7, e520 <_strtol_l.isra.0+0x4c>
    e506:	2f10      	cmp	r7, #16
    e508:	d114      	bne.n	e534 <_strtol_l.isra.0+0x60>
    e50a:	2c30      	cmp	r4, #48	; 0x30
    e50c:	d00a      	beq.n	e524 <_strtol_l.isra.0+0x50>
    e50e:	e011      	b.n	e534 <_strtol_l.isra.0+0x60>
    e510:	46ab      	mov	fp, r5
    e512:	e7e6      	b.n	e4e2 <_strtol_l.isra.0+0xe>
    e514:	2c2b      	cmp	r4, #43	; 0x2b
    e516:	bf04      	itt	eq
    e518:	782c      	ldrbeq	r4, [r5, #0]
    e51a:	f10b 0502 	addeq.w	r5, fp, #2
    e51e:	e7f1      	b.n	e504 <_strtol_l.isra.0+0x30>
    e520:	2c30      	cmp	r4, #48	; 0x30
    e522:	d127      	bne.n	e574 <_strtol_l.isra.0+0xa0>
    e524:	782b      	ldrb	r3, [r5, #0]
    e526:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    e52a:	2b58      	cmp	r3, #88	; 0x58
    e52c:	d14b      	bne.n	e5c6 <_strtol_l.isra.0+0xf2>
    e52e:	786c      	ldrb	r4, [r5, #1]
    e530:	2710      	movs	r7, #16
    e532:	3502      	adds	r5, #2
    e534:	2e00      	cmp	r6, #0
    e536:	bf0c      	ite	eq
    e538:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
    e53c:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
    e540:	2200      	movs	r2, #0
    e542:	fbb1 fef7 	udiv	lr, r1, r7
    e546:	4610      	mov	r0, r2
    e548:	fb07 1c1e 	mls	ip, r7, lr, r1
    e54c:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    e550:	2b09      	cmp	r3, #9
    e552:	d811      	bhi.n	e578 <_strtol_l.isra.0+0xa4>
    e554:	461c      	mov	r4, r3
    e556:	42a7      	cmp	r7, r4
    e558:	dd1d      	ble.n	e596 <_strtol_l.isra.0+0xc2>
    e55a:	1c53      	adds	r3, r2, #1
    e55c:	d007      	beq.n	e56e <_strtol_l.isra.0+0x9a>
    e55e:	4586      	cmp	lr, r0
    e560:	d316      	bcc.n	e590 <_strtol_l.isra.0+0xbc>
    e562:	d101      	bne.n	e568 <_strtol_l.isra.0+0x94>
    e564:	45a4      	cmp	ip, r4
    e566:	db13      	blt.n	e590 <_strtol_l.isra.0+0xbc>
    e568:	fb00 4007 	mla	r0, r0, r7, r4
    e56c:	2201      	movs	r2, #1
    e56e:	f815 4b01 	ldrb.w	r4, [r5], #1
    e572:	e7eb      	b.n	e54c <_strtol_l.isra.0+0x78>
    e574:	270a      	movs	r7, #10
    e576:	e7dd      	b.n	e534 <_strtol_l.isra.0+0x60>
    e578:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
    e57c:	2b19      	cmp	r3, #25
    e57e:	d801      	bhi.n	e584 <_strtol_l.isra.0+0xb0>
    e580:	3c37      	subs	r4, #55	; 0x37
    e582:	e7e8      	b.n	e556 <_strtol_l.isra.0+0x82>
    e584:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
    e588:	2b19      	cmp	r3, #25
    e58a:	d804      	bhi.n	e596 <_strtol_l.isra.0+0xc2>
    e58c:	3c57      	subs	r4, #87	; 0x57
    e58e:	e7e2      	b.n	e556 <_strtol_l.isra.0+0x82>
    e590:	f04f 32ff 	mov.w	r2, #4294967295
    e594:	e7eb      	b.n	e56e <_strtol_l.isra.0+0x9a>
    e596:	1c53      	adds	r3, r2, #1
    e598:	d108      	bne.n	e5ac <_strtol_l.isra.0+0xd8>
    e59a:	2322      	movs	r3, #34	; 0x22
    e59c:	f8c8 3000 	str.w	r3, [r8]
    e5a0:	4608      	mov	r0, r1
    e5a2:	f1ba 0f00 	cmp.w	sl, #0
    e5a6:	d107      	bne.n	e5b8 <_strtol_l.isra.0+0xe4>
    e5a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e5ac:	b106      	cbz	r6, e5b0 <_strtol_l.isra.0+0xdc>
    e5ae:	4240      	negs	r0, r0
    e5b0:	f1ba 0f00 	cmp.w	sl, #0
    e5b4:	d00c      	beq.n	e5d0 <_strtol_l.isra.0+0xfc>
    e5b6:	b122      	cbz	r2, e5c2 <_strtol_l.isra.0+0xee>
    e5b8:	3d01      	subs	r5, #1
    e5ba:	f8ca 5000 	str.w	r5, [sl]
    e5be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e5c2:	464d      	mov	r5, r9
    e5c4:	e7f9      	b.n	e5ba <_strtol_l.isra.0+0xe6>
    e5c6:	2430      	movs	r4, #48	; 0x30
    e5c8:	2f00      	cmp	r7, #0
    e5ca:	d1b3      	bne.n	e534 <_strtol_l.isra.0+0x60>
    e5cc:	2708      	movs	r7, #8
    e5ce:	e7b1      	b.n	e534 <_strtol_l.isra.0+0x60>
    e5d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000e5d4 <_strtol_r>:
    e5d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    e5d6:	4c06      	ldr	r4, [pc, #24]	; (e5f0 <_strtol_r+0x1c>)
    e5d8:	4d06      	ldr	r5, [pc, #24]	; (e5f4 <_strtol_r+0x20>)
    e5da:	6824      	ldr	r4, [r4, #0]
    e5dc:	6a24      	ldr	r4, [r4, #32]
    e5de:	2c00      	cmp	r4, #0
    e5e0:	bf08      	it	eq
    e5e2:	462c      	moveq	r4, r5
    e5e4:	9400      	str	r4, [sp, #0]
    e5e6:	f7ff ff75 	bl	e4d4 <_strtol_l.isra.0>
    e5ea:	b003      	add	sp, #12
    e5ec:	bd30      	pop	{r4, r5, pc}
    e5ee:	bf00      	nop
    e5f0:	200000e0 	.word	0x200000e0
    e5f4:	20000144 	.word	0x20000144

0000e5f8 <_strtoul_l.isra.0>:
    e5f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e5fc:	4680      	mov	r8, r0
    e5fe:	4689      	mov	r9, r1
    e600:	4692      	mov	sl, r2
    e602:	461e      	mov	r6, r3
    e604:	460f      	mov	r7, r1
    e606:	463d      	mov	r5, r7
    e608:	9808      	ldr	r0, [sp, #32]
    e60a:	f815 4b01 	ldrb.w	r4, [r5], #1
    e60e:	f000 f8be 	bl	e78e <__locale_ctype_ptr_l>
    e612:	4420      	add	r0, r4
    e614:	7843      	ldrb	r3, [r0, #1]
    e616:	f013 0308 	ands.w	r3, r3, #8
    e61a:	d10a      	bne.n	e632 <_strtoul_l.isra.0+0x3a>
    e61c:	2c2d      	cmp	r4, #45	; 0x2d
    e61e:	d10a      	bne.n	e636 <_strtoul_l.isra.0+0x3e>
    e620:	782c      	ldrb	r4, [r5, #0]
    e622:	2301      	movs	r3, #1
    e624:	1cbd      	adds	r5, r7, #2
    e626:	b15e      	cbz	r6, e640 <_strtoul_l.isra.0+0x48>
    e628:	2e10      	cmp	r6, #16
    e62a:	d113      	bne.n	e654 <_strtoul_l.isra.0+0x5c>
    e62c:	2c30      	cmp	r4, #48	; 0x30
    e62e:	d009      	beq.n	e644 <_strtoul_l.isra.0+0x4c>
    e630:	e010      	b.n	e654 <_strtoul_l.isra.0+0x5c>
    e632:	462f      	mov	r7, r5
    e634:	e7e7      	b.n	e606 <_strtoul_l.isra.0+0xe>
    e636:	2c2b      	cmp	r4, #43	; 0x2b
    e638:	bf04      	itt	eq
    e63a:	782c      	ldrbeq	r4, [r5, #0]
    e63c:	1cbd      	addeq	r5, r7, #2
    e63e:	e7f2      	b.n	e626 <_strtoul_l.isra.0+0x2e>
    e640:	2c30      	cmp	r4, #48	; 0x30
    e642:	d125      	bne.n	e690 <_strtoul_l.isra.0+0x98>
    e644:	782a      	ldrb	r2, [r5, #0]
    e646:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    e64a:	2a58      	cmp	r2, #88	; 0x58
    e64c:	d14a      	bne.n	e6e4 <_strtoul_l.isra.0+0xec>
    e64e:	786c      	ldrb	r4, [r5, #1]
    e650:	2610      	movs	r6, #16
    e652:	3502      	adds	r5, #2
    e654:	f04f 31ff 	mov.w	r1, #4294967295
    e658:	2700      	movs	r7, #0
    e65a:	fbb1 f1f6 	udiv	r1, r1, r6
    e65e:	fb06 fe01 	mul.w	lr, r6, r1
    e662:	ea6f 0e0e 	mvn.w	lr, lr
    e666:	4638      	mov	r0, r7
    e668:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
    e66c:	2a09      	cmp	r2, #9
    e66e:	d811      	bhi.n	e694 <_strtoul_l.isra.0+0x9c>
    e670:	4614      	mov	r4, r2
    e672:	42a6      	cmp	r6, r4
    e674:	dd1d      	ble.n	e6b2 <_strtoul_l.isra.0+0xba>
    e676:	2f00      	cmp	r7, #0
    e678:	db18      	blt.n	e6ac <_strtoul_l.isra.0+0xb4>
    e67a:	4281      	cmp	r1, r0
    e67c:	d316      	bcc.n	e6ac <_strtoul_l.isra.0+0xb4>
    e67e:	d101      	bne.n	e684 <_strtoul_l.isra.0+0x8c>
    e680:	45a6      	cmp	lr, r4
    e682:	db13      	blt.n	e6ac <_strtoul_l.isra.0+0xb4>
    e684:	fb00 4006 	mla	r0, r0, r6, r4
    e688:	2701      	movs	r7, #1
    e68a:	f815 4b01 	ldrb.w	r4, [r5], #1
    e68e:	e7eb      	b.n	e668 <_strtoul_l.isra.0+0x70>
    e690:	260a      	movs	r6, #10
    e692:	e7df      	b.n	e654 <_strtoul_l.isra.0+0x5c>
    e694:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
    e698:	2a19      	cmp	r2, #25
    e69a:	d801      	bhi.n	e6a0 <_strtoul_l.isra.0+0xa8>
    e69c:	3c37      	subs	r4, #55	; 0x37
    e69e:	e7e8      	b.n	e672 <_strtoul_l.isra.0+0x7a>
    e6a0:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
    e6a4:	2a19      	cmp	r2, #25
    e6a6:	d804      	bhi.n	e6b2 <_strtoul_l.isra.0+0xba>
    e6a8:	3c57      	subs	r4, #87	; 0x57
    e6aa:	e7e2      	b.n	e672 <_strtoul_l.isra.0+0x7a>
    e6ac:	f04f 37ff 	mov.w	r7, #4294967295
    e6b0:	e7eb      	b.n	e68a <_strtoul_l.isra.0+0x92>
    e6b2:	2f00      	cmp	r7, #0
    e6b4:	da09      	bge.n	e6ca <_strtoul_l.isra.0+0xd2>
    e6b6:	2322      	movs	r3, #34	; 0x22
    e6b8:	f8c8 3000 	str.w	r3, [r8]
    e6bc:	f04f 30ff 	mov.w	r0, #4294967295
    e6c0:	f1ba 0f00 	cmp.w	sl, #0
    e6c4:	d107      	bne.n	e6d6 <_strtoul_l.isra.0+0xde>
    e6c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e6ca:	b103      	cbz	r3, e6ce <_strtoul_l.isra.0+0xd6>
    e6cc:	4240      	negs	r0, r0
    e6ce:	f1ba 0f00 	cmp.w	sl, #0
    e6d2:	d00c      	beq.n	e6ee <_strtoul_l.isra.0+0xf6>
    e6d4:	b127      	cbz	r7, e6e0 <_strtoul_l.isra.0+0xe8>
    e6d6:	3d01      	subs	r5, #1
    e6d8:	f8ca 5000 	str.w	r5, [sl]
    e6dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e6e0:	464d      	mov	r5, r9
    e6e2:	e7f9      	b.n	e6d8 <_strtoul_l.isra.0+0xe0>
    e6e4:	2430      	movs	r4, #48	; 0x30
    e6e6:	2e00      	cmp	r6, #0
    e6e8:	d1b4      	bne.n	e654 <_strtoul_l.isra.0+0x5c>
    e6ea:	2608      	movs	r6, #8
    e6ec:	e7b2      	b.n	e654 <_strtoul_l.isra.0+0x5c>
    e6ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0000e6f4 <_strtoul_r>:
    e6f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    e6f6:	4c06      	ldr	r4, [pc, #24]	; (e710 <_strtoul_r+0x1c>)
    e6f8:	4d06      	ldr	r5, [pc, #24]	; (e714 <_strtoul_r+0x20>)
    e6fa:	6824      	ldr	r4, [r4, #0]
    e6fc:	6a24      	ldr	r4, [r4, #32]
    e6fe:	2c00      	cmp	r4, #0
    e700:	bf08      	it	eq
    e702:	462c      	moveq	r4, r5
    e704:	9400      	str	r4, [sp, #0]
    e706:	f7ff ff77 	bl	e5f8 <_strtoul_l.isra.0>
    e70a:	b003      	add	sp, #12
    e70c:	bd30      	pop	{r4, r5, pc}
    e70e:	bf00      	nop
    e710:	200000e0 	.word	0x200000e0
    e714:	20000144 	.word	0x20000144

0000e718 <__submore>:
    e718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e71c:	460c      	mov	r4, r1
    e71e:	6b49      	ldr	r1, [r1, #52]	; 0x34
    e720:	f104 0344 	add.w	r3, r4, #68	; 0x44
    e724:	4299      	cmp	r1, r3
    e726:	d11e      	bne.n	e766 <__submore+0x4e>
    e728:	f44f 6180 	mov.w	r1, #1024	; 0x400
    e72c:	f7ff fb2e 	bl	dd8c <_malloc_r>
    e730:	b918      	cbnz	r0, e73a <__submore+0x22>
    e732:	f04f 30ff 	mov.w	r0, #4294967295
    e736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e73a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    e73e:	63a3      	str	r3, [r4, #56]	; 0x38
    e740:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
    e744:	6360      	str	r0, [r4, #52]	; 0x34
    e746:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
    e74a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    e74e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
    e752:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    e756:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
    e75a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
    e75e:	6020      	str	r0, [r4, #0]
    e760:	2000      	movs	r0, #0
    e762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e766:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    e768:	0077      	lsls	r7, r6, #1
    e76a:	463a      	mov	r2, r7
    e76c:	f000 f8d8 	bl	e920 <_realloc_r>
    e770:	4605      	mov	r5, r0
    e772:	2800      	cmp	r0, #0
    e774:	d0dd      	beq.n	e732 <__submore+0x1a>
    e776:	eb00 0806 	add.w	r8, r0, r6
    e77a:	4601      	mov	r1, r0
    e77c:	4632      	mov	r2, r6
    e77e:	4640      	mov	r0, r8
    e780:	f7ff fa8d 	bl	dc9e <memcpy>
    e784:	f8c4 8000 	str.w	r8, [r4]
    e788:	6365      	str	r5, [r4, #52]	; 0x34
    e78a:	63a7      	str	r7, [r4, #56]	; 0x38
    e78c:	e7e8      	b.n	e760 <__submore+0x48>

0000e78e <__locale_ctype_ptr_l>:
    e78e:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
    e792:	4770      	bx	lr

0000e794 <__locale_ctype_ptr>:
    e794:	4b04      	ldr	r3, [pc, #16]	; (e7a8 <__locale_ctype_ptr+0x14>)
    e796:	4a05      	ldr	r2, [pc, #20]	; (e7ac <__locale_ctype_ptr+0x18>)
    e798:	681b      	ldr	r3, [r3, #0]
    e79a:	6a1b      	ldr	r3, [r3, #32]
    e79c:	2b00      	cmp	r3, #0
    e79e:	bf08      	it	eq
    e7a0:	4613      	moveq	r3, r2
    e7a2:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
    e7a6:	4770      	bx	lr
    e7a8:	200000e0 	.word	0x200000e0
    e7ac:	20000144 	.word	0x20000144

0000e7b0 <__ascii_mbtowc>:
    e7b0:	b082      	sub	sp, #8
    e7b2:	b901      	cbnz	r1, e7b6 <__ascii_mbtowc+0x6>
    e7b4:	a901      	add	r1, sp, #4
    e7b6:	b142      	cbz	r2, e7ca <__ascii_mbtowc+0x1a>
    e7b8:	b14b      	cbz	r3, e7ce <__ascii_mbtowc+0x1e>
    e7ba:	7813      	ldrb	r3, [r2, #0]
    e7bc:	600b      	str	r3, [r1, #0]
    e7be:	7812      	ldrb	r2, [r2, #0]
    e7c0:	1c10      	adds	r0, r2, #0
    e7c2:	bf18      	it	ne
    e7c4:	2001      	movne	r0, #1
    e7c6:	b002      	add	sp, #8
    e7c8:	4770      	bx	lr
    e7ca:	4610      	mov	r0, r2
    e7cc:	e7fb      	b.n	e7c6 <__ascii_mbtowc+0x16>
    e7ce:	f06f 0001 	mvn.w	r0, #1
    e7d2:	e7f8      	b.n	e7c6 <__ascii_mbtowc+0x16>
	...

0000e7e0 <memchr>:
    e7e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    e7e4:	2a10      	cmp	r2, #16
    e7e6:	db2b      	blt.n	e840 <memchr+0x60>
    e7e8:	f010 0f07 	tst.w	r0, #7
    e7ec:	d008      	beq.n	e800 <memchr+0x20>
    e7ee:	f810 3b01 	ldrb.w	r3, [r0], #1
    e7f2:	3a01      	subs	r2, #1
    e7f4:	428b      	cmp	r3, r1
    e7f6:	d02d      	beq.n	e854 <memchr+0x74>
    e7f8:	f010 0f07 	tst.w	r0, #7
    e7fc:	b342      	cbz	r2, e850 <memchr+0x70>
    e7fe:	d1f6      	bne.n	e7ee <memchr+0xe>
    e800:	b4f0      	push	{r4, r5, r6, r7}
    e802:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    e806:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    e80a:	f022 0407 	bic.w	r4, r2, #7
    e80e:	f07f 0700 	mvns.w	r7, #0
    e812:	2300      	movs	r3, #0
    e814:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    e818:	3c08      	subs	r4, #8
    e81a:	ea85 0501 	eor.w	r5, r5, r1
    e81e:	ea86 0601 	eor.w	r6, r6, r1
    e822:	fa85 f547 	uadd8	r5, r5, r7
    e826:	faa3 f587 	sel	r5, r3, r7
    e82a:	fa86 f647 	uadd8	r6, r6, r7
    e82e:	faa5 f687 	sel	r6, r5, r7
    e832:	b98e      	cbnz	r6, e858 <memchr+0x78>
    e834:	d1ee      	bne.n	e814 <memchr+0x34>
    e836:	bcf0      	pop	{r4, r5, r6, r7}
    e838:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    e83c:	f002 0207 	and.w	r2, r2, #7
    e840:	b132      	cbz	r2, e850 <memchr+0x70>
    e842:	f810 3b01 	ldrb.w	r3, [r0], #1
    e846:	3a01      	subs	r2, #1
    e848:	ea83 0301 	eor.w	r3, r3, r1
    e84c:	b113      	cbz	r3, e854 <memchr+0x74>
    e84e:	d1f8      	bne.n	e842 <memchr+0x62>
    e850:	2000      	movs	r0, #0
    e852:	4770      	bx	lr
    e854:	3801      	subs	r0, #1
    e856:	4770      	bx	lr
    e858:	2d00      	cmp	r5, #0
    e85a:	bf06      	itte	eq
    e85c:	4635      	moveq	r5, r6
    e85e:	3803      	subeq	r0, #3
    e860:	3807      	subne	r0, #7
    e862:	f015 0f01 	tst.w	r5, #1
    e866:	d107      	bne.n	e878 <memchr+0x98>
    e868:	3001      	adds	r0, #1
    e86a:	f415 7f80 	tst.w	r5, #256	; 0x100
    e86e:	bf02      	ittt	eq
    e870:	3001      	addeq	r0, #1
    e872:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    e876:	3001      	addeq	r0, #1
    e878:	bcf0      	pop	{r4, r5, r6, r7}
    e87a:	3801      	subs	r0, #1
    e87c:	4770      	bx	lr
    e87e:	bf00      	nop

0000e880 <__malloc_lock>:
    e880:	4770      	bx	lr

0000e882 <__malloc_unlock>:
    e882:	4770      	bx	lr

0000e884 <_free_r>:
    e884:	b538      	push	{r3, r4, r5, lr}
    e886:	4605      	mov	r5, r0
    e888:	2900      	cmp	r1, #0
    e88a:	d045      	beq.n	e918 <_free_r+0x94>
    e88c:	f851 3c04 	ldr.w	r3, [r1, #-4]
    e890:	1f0c      	subs	r4, r1, #4
    e892:	2b00      	cmp	r3, #0
    e894:	bfb8      	it	lt
    e896:	18e4      	addlt	r4, r4, r3
    e898:	f7ff fff2 	bl	e880 <__malloc_lock>
    e89c:	4a1f      	ldr	r2, [pc, #124]	; (e91c <_free_r+0x98>)
    e89e:	6813      	ldr	r3, [r2, #0]
    e8a0:	4610      	mov	r0, r2
    e8a2:	b933      	cbnz	r3, e8b2 <_free_r+0x2e>
    e8a4:	6063      	str	r3, [r4, #4]
    e8a6:	6014      	str	r4, [r2, #0]
    e8a8:	4628      	mov	r0, r5
    e8aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    e8ae:	f7ff bfe8 	b.w	e882 <__malloc_unlock>
    e8b2:	42a3      	cmp	r3, r4
    e8b4:	d90c      	bls.n	e8d0 <_free_r+0x4c>
    e8b6:	6821      	ldr	r1, [r4, #0]
    e8b8:	1862      	adds	r2, r4, r1
    e8ba:	4293      	cmp	r3, r2
    e8bc:	bf04      	itt	eq
    e8be:	681a      	ldreq	r2, [r3, #0]
    e8c0:	685b      	ldreq	r3, [r3, #4]
    e8c2:	6063      	str	r3, [r4, #4]
    e8c4:	bf04      	itt	eq
    e8c6:	1852      	addeq	r2, r2, r1
    e8c8:	6022      	streq	r2, [r4, #0]
    e8ca:	6004      	str	r4, [r0, #0]
    e8cc:	e7ec      	b.n	e8a8 <_free_r+0x24>
    e8ce:	4613      	mov	r3, r2
    e8d0:	685a      	ldr	r2, [r3, #4]
    e8d2:	b10a      	cbz	r2, e8d8 <_free_r+0x54>
    e8d4:	42a2      	cmp	r2, r4
    e8d6:	d9fa      	bls.n	e8ce <_free_r+0x4a>
    e8d8:	6819      	ldr	r1, [r3, #0]
    e8da:	1858      	adds	r0, r3, r1
    e8dc:	42a0      	cmp	r0, r4
    e8de:	d10b      	bne.n	e8f8 <_free_r+0x74>
    e8e0:	6820      	ldr	r0, [r4, #0]
    e8e2:	4401      	add	r1, r0
    e8e4:	1858      	adds	r0, r3, r1
    e8e6:	4282      	cmp	r2, r0
    e8e8:	6019      	str	r1, [r3, #0]
    e8ea:	d1dd      	bne.n	e8a8 <_free_r+0x24>
    e8ec:	6810      	ldr	r0, [r2, #0]
    e8ee:	6852      	ldr	r2, [r2, #4]
    e8f0:	605a      	str	r2, [r3, #4]
    e8f2:	4401      	add	r1, r0
    e8f4:	6019      	str	r1, [r3, #0]
    e8f6:	e7d7      	b.n	e8a8 <_free_r+0x24>
    e8f8:	d902      	bls.n	e900 <_free_r+0x7c>
    e8fa:	230c      	movs	r3, #12
    e8fc:	602b      	str	r3, [r5, #0]
    e8fe:	e7d3      	b.n	e8a8 <_free_r+0x24>
    e900:	6820      	ldr	r0, [r4, #0]
    e902:	1821      	adds	r1, r4, r0
    e904:	428a      	cmp	r2, r1
    e906:	bf04      	itt	eq
    e908:	6811      	ldreq	r1, [r2, #0]
    e90a:	6852      	ldreq	r2, [r2, #4]
    e90c:	6062      	str	r2, [r4, #4]
    e90e:	bf04      	itt	eq
    e910:	1809      	addeq	r1, r1, r0
    e912:	6021      	streq	r1, [r4, #0]
    e914:	605c      	str	r4, [r3, #4]
    e916:	e7c7      	b.n	e8a8 <_free_r+0x24>
    e918:	bd38      	pop	{r3, r4, r5, pc}
    e91a:	bf00      	nop
    e91c:	20007404 	.word	0x20007404

0000e920 <_realloc_r>:
    e920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e922:	4607      	mov	r7, r0
    e924:	4614      	mov	r4, r2
    e926:	460e      	mov	r6, r1
    e928:	b921      	cbnz	r1, e934 <_realloc_r+0x14>
    e92a:	4611      	mov	r1, r2
    e92c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    e930:	f7ff ba2c 	b.w	dd8c <_malloc_r>
    e934:	b922      	cbnz	r2, e940 <_realloc_r+0x20>
    e936:	f7ff ffa5 	bl	e884 <_free_r>
    e93a:	4625      	mov	r5, r4
    e93c:	4628      	mov	r0, r5
    e93e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e940:	f000 f821 	bl	e986 <_malloc_usable_size_r>
    e944:	4284      	cmp	r4, r0
    e946:	d90f      	bls.n	e968 <_realloc_r+0x48>
    e948:	4621      	mov	r1, r4
    e94a:	4638      	mov	r0, r7
    e94c:	f7ff fa1e 	bl	dd8c <_malloc_r>
    e950:	4605      	mov	r5, r0
    e952:	2800      	cmp	r0, #0
    e954:	d0f2      	beq.n	e93c <_realloc_r+0x1c>
    e956:	4631      	mov	r1, r6
    e958:	4622      	mov	r2, r4
    e95a:	f7ff f9a0 	bl	dc9e <memcpy>
    e95e:	4631      	mov	r1, r6
    e960:	4638      	mov	r0, r7
    e962:	f7ff ff8f 	bl	e884 <_free_r>
    e966:	e7e9      	b.n	e93c <_realloc_r+0x1c>
    e968:	4635      	mov	r5, r6
    e96a:	e7e7      	b.n	e93c <_realloc_r+0x1c>

0000e96c <__ascii_wctomb>:
    e96c:	b149      	cbz	r1, e982 <__ascii_wctomb+0x16>
    e96e:	2aff      	cmp	r2, #255	; 0xff
    e970:	bf85      	ittet	hi
    e972:	238a      	movhi	r3, #138	; 0x8a
    e974:	6003      	strhi	r3, [r0, #0]
    e976:	700a      	strbls	r2, [r1, #0]
    e978:	f04f 30ff 	movhi.w	r0, #4294967295
    e97c:	bf98      	it	ls
    e97e:	2001      	movls	r0, #1
    e980:	4770      	bx	lr
    e982:	4608      	mov	r0, r1
    e984:	4770      	bx	lr

0000e986 <_malloc_usable_size_r>:
    e986:	f851 0c04 	ldr.w	r0, [r1, #-4]
    e98a:	2800      	cmp	r0, #0
    e98c:	f1a0 0004 	sub.w	r0, r0, #4
    e990:	bfbc      	itt	lt
    e992:	580b      	ldrlt	r3, [r1, r0]
    e994:	18c0      	addlt	r0, r0, r3
    e996:	4770      	bx	lr

0000e998 <Representation.78635>:
    e998:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
    e9a8:	0000 0000 4f47 444f 0000 0000 4341 4954     ....GOOD....ACTI
    e9b8:	4556 0000 494c 4b4e 4f44 4e57 0000 0000     VE..LINKDOWN....
    e9c8:	7265 2072 6177 6574 2072 2031 203d 6425     err water 1 = %d
    e9d8:	0a0d 0000 6f43 6c75 2064 4f4e 2054 6572     ....Could NOT re
    e9e8:	6461 6620 6f72 206d 6874 2065 6177 6574     ad from the wate
    e9f8:	2072 6564 6574 7463 726f 3120 0a0d 0000     r detector 1....
    ea08:	7265 2072 6177 6574 2072 2032 203d 6425     err water 2 = %d
    ea18:	0a0d 0000 6f43 6c75 2064 4f4e 2054 6572     ....Could NOT re
    ea28:	6461 6620 6f72 206d 6874 2065 6177 6574     ad from the wate
    ea38:	2072 6564 6574 7463 726f 3220 0a0d 0000     r detector 2....
    ea48:	7265 2072 5648 3d20 2520 0d64 000a 0000     err HV = %d.....
    ea58:	6f43 6c75 2064 4f4e 2054 6572 6461 6620     Could NOT read f
    ea68:	6f72 206d 6874 2065 5648 6420 7669 6469     rom the HV divid
    ea78:	7265 0a0d 0000 0000 6f43 6c75 2064 4f4e     er......Could NO
    ea88:	2054 6572 6461 6620 6f72 206d 6874 2065     T read from the 
    ea98:	6f6d 7369 7574 6572 2620 7420 6d65 2070     moisture & temp 
    eaa8:	6573 736e 726f 6f20 206e 4143 4452 3a42     sensor on CARDB:
    eab8:	3249 2043 255b 5d69 0a0d 0000 2030 203d     I2C [%i]....0 = 
    eac8:	7825 0a0d 0000 0000 2031 203d 7825 0a0d     %x......1 = %x..
    ead8:	0000 0000 2032 203d 7825 0a0d 0000 0000     ....2 = %x......
    eae8:	2033 203d 7825 0a0d 0000 0000 694c 2064     3 = %x......Lid 
    eaf8:	4154 504d 5245 5b20 7325 0d5d 000a 0000     TAMPER [%s].....
    eb08:	654c 7466 4520 6874 7265 656e 2074 255b     Left Ethernet [%
    eb18:	5d73 0a0d 0000 0000 6952 6867 2074 7445     s]......Right Et
    eb28:	6568 6e72 7465 5b20 7325 0d5d 000a 0000     hernet [%s].....
    eb38:	6f50 6577 2072 2026 7445 6568 6e72 7465     Power & Ethernet
    eb48:	3c20 6f43 6d6d 2073 694c 6b6e 203e 255b      <Comms Link> [%
    eb58:	5d73 0a0d 0000 0000 6f43 6c75 2064 6f6e     s]......Could no
    eb68:	2074 6572 6461 4920 4332 6220 7375 6f20     t read I2C bus o
    eb78:	206e 4143 4452 2041 6f66 2072 3249 5f43     n CARDA for I2C_
    eb88:	6863 6365 5f6b 6564 6976 6563 4449 2928     check_deviceID()
    eb98:	5b20 6925 0d5d 000a 4143 4452 2041 6e69      [%i]...CARDA in
    eba8:	6573 7472 6465 6220 7475 6e20 746f 6920     serted but not i
    ebb8:	6564 746e 6669 6569 0d64 000a 4143 4452     dentified...CARD
    ebc8:	2041 7369 6120 4d20 5841 2049 4f49 0a0d     A is a MAXI IO..
    ebd8:	0000 0000 6f43 6c75 2064 4f4e 2054 7277     ....Could NOT wr
    ebe8:	7469 2065 6f74 7420 6568 4d20 6e69 2d69     ite to the Mini-
    ebf8:	4f49 4520 7078 6e61 6564 2072 6e6f 4320     IO Expander on C
    ec08:	5241 4144 493a 4332 5b20 6925 0d5d 000a     ARDA:I2C [%i]...
    ec18:	4143 4452 2041 7369 6120 4d20 4e49 2049     CARDA is a MINI 
    ec28:	4f49 0a0d 0000 0000 4143 4452 2041 7369     IO......CARDA is
    ec38:	6120 5620 4249 4152 4f50 4e49 0d54 000a      a VIBRAPOINT...
    ec48:	6f43 6c75 2064 4f4e 2054 7277 7469 2065     Could NOT write 
    ec58:	6f74 7420 6568 4420 4341 4720 6961 206e     to the DAC Gain 
    ec68:	6f63 746e 6f72 6c6c 7265 6f20 206e 4143     controller on CA
    ec78:	4452 3a41 3249 2043 255b 5d69 0a0d 0000     RDA:I2C [%i]....
    ec88:	4143 4452 2041 7369 6120 5620 4249 4152     CARDA is a VIBRA
    ec98:	4554 0d4b 000a 0000 535b 4950 4b5f 5a53     TEK.....[SPI_KSZ
    eca8:	3738 3439 505f 524f 3354 4f43 544e 4f52     8794_PORT3CONTRO
    ecb8:	324c 205d 6f6e 2074 6f63 7272 6365 0d74     L2] not correct.
    ecc8:	000a 0000 4143 4452 2041 7369 6120 5020     ....CARDA is a P
    ecd8:	776f 7265 2620 4520 6874 7265 656e 2074     ower & Ethernet 
    ece8:	6144 6775 7468 7265 432d 7261 0d64 000a     Daughter-Card...
    ecf8:	4143 4452 2041 6168 2073 6562 6e65 5220     CARDA has been R
    ed08:	4d45 564f 4445 0a0d 0000 0000 6f43 6c75     EMOVED......Coul
    ed18:	2064 6f6e 2074 6572 6461 4920 4332 6220     d not read I2C b
    ed28:	7375 6f20 206e 4143 4452 2042 6f66 2072     us on CARDB for 
    ed38:	3249 5f43 6863 6365 5f6b 6564 6976 6563     I2C_check_device
    ed48:	4449 2928 5b20 6925 0d5d 000a 4143 4452     ID() [%i]...CARD
    ed58:	2042 6e69 6573 7472 6465 6220 7475 6e20     B inserted but n
    ed68:	746f 6920 6564 746e 6669 6569 0d64 000a     ot identified...
    ed78:	4143 4452 2042 7369 6120 4d20 5841 2049     CARDB is a MAXI 
    ed88:	4f49 0a0d 0000 0000 6f43 6c75 2064 4f4e     IO......Could NO
    ed98:	2054 7277 7469 2065 6f74 7420 6568 4d20     T write to the M
    eda8:	6e69 2d69 4f49 4520 7078 6e61 6564 2072     ini-IO Expander 
    edb8:	6e6f 4320 5241 4244 493a 4332 5b20 6925     on CARDB:I2C [%i
    edc8:	0d5d 000a 4143 4452 2042 7369 6120 4d20     ]...CARDB is a M
    edd8:	4e49 2049 4f49 0a0d 0000 0000 4143 4452     INI IO......CARD
    ede8:	2042 7369 6120 5620 4249 4152 4f50 4e49     B is a VIBRAPOIN
    edf8:	0d54 000a 6f43 6c75 2064 4f4e 2054 7277     T...Could NOT wr
    ee08:	7469 2065 6f74 7420 6568 4420 4341 4720     ite to the DAC G
    ee18:	6961 206e 6f63 746e 6f72 6c6c 7265 6f20     ain controller o
    ee28:	206e 4143 4452 3a42 3249 2043 255b 5d69     n CARDB:I2C [%i]
    ee38:	0a0d 0000 4143 4452 2042 7369 6120 5620     ....CARDB is a V
    ee48:	4249 4152 4554 0d4b 000a 0000 4143 4452     IBRATEK.....CARD
    ee58:	2042 6168 2073 6562 6e65 5220 4d45 564f     B has been REMOV
    ee68:	4445 0a0d 0000 0000 2e2e 682f 6c61 692f     ED......../hal/i
    ee78:	636e 756c 6564 682f 6c61 775f 7464 682e     nclude/hal_wdt.h
    ee88:	0000 0000 6548 6c6c 206f 6f57 6c72 2164     ....Hello World!
    ee98:	0000 0000 2e2e 682f 6c61 732f 6372 682f     ....../hal/src/h
    eea8:	6c61 615f 6364 735f 6e79 2e63 0063 0000     al_adc_sync.c...
    eeb8:	2e2e 682f 6c61 732f 6372 682f 6c61 615f     ../hal/src/hal_a
    eec8:	7365 735f 6e79 2e63 0063 0000 2e2e 682f     es_sync.c...../h
    eed8:	6c61 732f 6372 682f 6c61 635f 6372 735f     al/src/hal_crc_s
    eee8:	6e79 2e63 0063 0000 2e2e 682f 6c61 732f     ync.c...../hal/s
    eef8:	6372 682f 6c61 665f 616c 6873 632e 0000     rc/hal_flash.c..
    ef08:	2e2e 682f 6c61 732f 6372 682f 6c61 695f     ../hal/src/hal_i
    ef18:	2e6f 0063 2e2e 682f 6c61 732f 6372 682f     o.c.../hal/src/h
    ef28:	6c61 6d5f 6361 615f 7973 636e 632e 0000     al_mac_async.c..
    ef38:	2e2e 682f 6c61 732f 6372 682f 6c61 735f     ../hal/src/hal_s
    ef48:	6168 735f 6e79 2e63 0063 0000 2e2e 682f     ha_sync.c...../h
    ef58:	6c61 732f 6372 682f 6c61 735f 6970 6d5f     al/src/hal_spi_m
    ef68:	735f 6e79 2e63 0063 2e2e 682f 6c61 732f     _sync.c.../hal/s
    ef78:	6372 682f 6c61 745f 6d69 7265 632e 0000     rc/hal_timer.c..
    ef88:	2e2e 682f 6c61 732f 6372 682f 6c61 755f     ../hal/src/hal_u
    ef98:	6173 7472 615f 7973 636e 632e 0000 0000     sart_async.c....
    efa8:	2e2e 682f 6c61 752f 6974 736c 732f 6372     ../hal/utils/src
    efb8:	752f 6974 736c 6c5f 7369 2e74 0063 0000     /utils_list.c...
    efc8:	2e2e 682f 6c61 752f 6974 736c 732f 6372     ../hal/utils/src
    efd8:	752f 6974 736c 725f 6e69 6267 6675 6566     /utils_ringbuffe
    efe8:	2e72 0063                                   r.c.

0000efec <_adcs>:
    efec:	0000 0340 0018 0003 1800 0000 0000 0000     ..@.............
	...
    f004:	2e2e 682f 6c70 612f 6364 682f 6c70 615f     ../hpl/adc/hpl_a
    f014:	6364 632e 0000 0000                         dc.c....

0000f01c <_cfgs>:
    f01c:	4500 0000 0000 1600 0000 0000 0000 0000     .E..............
	...
    f11c:	2e2e 682f 6c70 6e2f 6d76 7463 6c72 682f     ../hpl/nvmctrl/h
    f12c:	6c70 6e5f 6d76 7463 6c72 632e 0000 0000     pl_nvmctrl.c....
    f13c:	3000 4000 3400 4000 2000 4101 4000 4101     .0.@.4.@. .A.@.A
    f14c:	0000 4300 0400 4300 0800 4300 0c00 4300     ...C...C...C...C

0000f15c <_usarts>:
    f15c:	0000 0000 0084 4010 0000 0003 0002 0070     .......@......p.
    f16c:	f4bc 0000 0000 0000 0005 0000 0084 4010     ...............@
    f17c:	0000 0003 0002 0070 f4bc 0000 0000 0000     ......p.........

0000f18c <_i2cms>:
	...
    f1a4:	2e2e 682f 6c70 732f 7265 6f63 2f6d 7068     ../hpl/sercom/hp
    f1b4:	5f6c 6573 6372 6d6f 632e 0000 3800 4000     l_sercom.c...8.@
    f1c4:	3c00 4000 a000 4101 c000 4101 1400 4200     .<.@...A...A...B
    f1d4:	1800 4200 1400 4300 1800 4300               ...B...C...C

0000f1e0 <_tcs>:
    f1e0:	0000 006b 07d8 0000 0000 0001 002e 0000     ..k.............
    f1f0:	0000 0000 2e2e 682f 6c70 742f 2f63 7068     ....../hpl/tc/hp
    f200:	5f6c 6374 632e 0000                         l_tc.c..

0000f208 <_usb_ep_cfgs>:
    f208:	71fc 2000 0000 0000 0040 0000 71bc 2000     .q. ....@....q. 
    f218:	0000 0000 0040 0000 717c 2000 0000 0000     ....@...|q. ....
    f228:	0040 0000 2e2e 682f 6c70 772f 7464 682f     @...../hpl/wdt/h
    f238:	6c70 775f 7464 632e 0000 0000 5355 2042     pl_wdt.c....USB 
    f248:	6e69 7469 652f 616e 6c62 2065 5245 4f52     init/enable ERRO
    f258:	2152 2121 2121 2121 0a0d 0000 7375 5f62     R!!!!!!!....usb_
    f268:	6e69 7469 2928 0a0d 0000 0000 6463 5f63     init()......cdc_
    f278:	6564 6976 6563 615f 6d63 695f 696e 2874     device_acm_init(
    f288:	0d29 000a 6463 6463 5f66 6361 5f6d 6572     )...cdcdf_acm_re
    f298:	6967 7473 7265 635f 6c61 626c 6361 286b     gister_callback(
    f2a8:	4443 4443 5f46 4341 5f4d 4243 535f 4154     CDCDF_ACM_CB_STA
    f2b8:	4554 435f 202c 4628 4e55 5f43 5450 2952     TE_C, (FUNC_PTR)
    f2c8:	7375 5f62 6564 6976 6563 635f 5f62 7473     usb_device_cb_st
    f2d8:	7461 5f65 2963 0a0d 0000 0000 6f43 666e     ate_c)......Conf
    f2e8:	6769 7275 6e69 2067 6e61 2064 6863 6365     iguring and chec
    f2f8:	696b 676e 7420 6568 5320 4950 4b20 5a53     king the SPI KSZ
    f308:	3738 3439 4520 6874 7265 656e 2074 5753     8794 Ethernet SW
    f318:	5449 4843 7220 6765 7369 6574 7372 2e2e     ITCH registers..
    f328:	0d2e 000a 535b 4950 4b5f 5a53 3738 3439     ....[SPI_KSZ8794
    f338:	465f 4d41 4c49 5f59 4449 205d 6f6e 2074     _FAMILY_ID] not 
    f348:	6f63 7272 6365 0d74 000a 0000 535b 4950     correct.....[SPI
    f358:	4b5f 5a53 3738 3439 535f 4154 5452 6620     _KSZ8794_START f
    f368:	7269 7473 205d 6f6e 2074 6f63 7272 6365     irst] not correc
    f378:	0d74 000a 535b 4950 4b5f 5a53 3738 3439     t...[SPI_KSZ8794
    f388:	475f 4f4c 4142 304c 205d 6f6e 2074 6f63     _GLOBAL0] not co
    f398:	7272 6365 0d74 000a 535b 4950 4b5f 5a53     rrect...[SPI_KSZ
    f3a8:	3738 3439 475f 4f4c 4142 314c 205d 6f6e     8794_GLOBAL1] no
    f3b8:	2074 6f63 7272 6365 0d74 000a 535b 4950     t correct...[SPI
    f3c8:	4b5f 5a53 3738 3439 475f 4f4c 4142 324c     _KSZ8794_GLOBAL2
    f3d8:	205d 6f6e 2074 6f63 7272 6365 0d74 000a     ] not correct...
    f3e8:	535b 4950 4b5f 5a53 3738 3439 475f 4f4c     [SPI_KSZ8794_GLO
    f3f8:	4142 334c 205d 6f6e 2074 6f63 7272 6365     BAL3] not correc
    f408:	0d74 000a 535b 4950 4b5f 5a53 3738 3439     t...[SPI_KSZ8794
    f418:	475f 4f4c 4142 344c 205d 6f6e 2074 6f63     _GLOBAL4] not co
    f428:	7272 6365 0d74 000a 535b 4950 4b5f 5a53     rrect...[SPI_KSZ
    f438:	3738 3439 475f 4f4c 4142 354c 205d 6f6e     8794_GLOBAL5] no
    f448:	2074 6f63 7272 6365 0d74 000a 535b 4950     t correct...[SPI
    f458:	4b5f 5a53 3738 3439 475f 4f4c 4142 364c     _KSZ8794_GLOBAL6
    f468:	205d 6f6e 2074 6f63 7272 6365 0d74 000a     ] not correct...
    f478:	535b 4950 4b5f 5a53 3738 3439 475f 4f4c     [SPI_KSZ8794_GLO
    f488:	4142 394c 205d 6f6e 2074 6f63 7272 6365     BAL9] not correc
    f498:	0d74 000a 535b 4950 4b5f 5a53 3738 3439     t...[SPI_KSZ8794
    f4a8:	475f 4f4c 4142 314c 5d30 6e20 746f 6320     _GLOBAL10] not c
    f4b8:	726f 6572 7463 0a0d 0000 0000 535b 4950     orrect......[SPI
    f4c8:	4b5f 5a53 3738 3439 505f 4d44 3143 205d     _KSZ8794_PDMC1] 
    f4d8:	6f6e 2074 6f63 7272 6365 0d74 000a 0000     not correct.....
    f4e8:	535b 4950 4b5f 5a53 3738 3439 505f 4d44     [SPI_KSZ8794_PDM
    f4f8:	3243 205d 6f6e 2074 6f63 7272 6365 0d74     C2] not correct.
    f508:	000a 0000 535b 4950 4b5f 5a53 3738 3439     ....[SPI_KSZ8794
    f518:	505f 524f 3154 4f43 544e 4f52 304c 205d     _PORT1CONTROL0] 
    f528:	6f6e 2074 6f63 7272 6365 0d74 000a 0000     not correct.....
    f538:	535b 4950 4b5f 5a53 3738 3439 505f 524f     [SPI_KSZ8794_POR
    f548:	3254 4f43 544e 4f52 304c 205d 6f6e 2074     T2CONTROL0] not 
    f558:	6f63 7272 6365 0d74 000a 0000 535b 4950     correct.....[SPI
    f568:	4b5f 5a53 3738 3439 505f 524f 3354 4f43     _KSZ8794_PORT3CO
    f578:	544e 4f52 304c 205d 6f6e 2074 6f63 7272     NTROL0] not corr
    f588:	6365 0d74 000a 0000 535b 4950 4b5f 5a53     ect.....[SPI_KSZ
    f598:	3738 3439 505f 524f 3454 4f43 544e 4f52     8794_PORT4CONTRO
    f5a8:	304c 205d 6f6e 2074 6f63 7272 6365 0d74     L0] not correct.
    f5b8:	000a 0000 535b 4950 4b5f 5a53 3738 3439     ....[SPI_KSZ8794
    f5c8:	505f 524f 3154 4f43 544e 4f52 314c 205d     _PORT1CONTROL1] 
    f5d8:	6f6e 2074 6f63 7272 6365 0d74 000a 0000     not correct.....
    f5e8:	535b 4950 4b5f 5a53 3738 3439 505f 524f     [SPI_KSZ8794_POR
    f5f8:	3254 4f43 544e 4f52 314c 205d 6f6e 2074     T2CONTROL1] not 
    f608:	6f63 7272 6365 0d74 000a 0000 535b 4950     correct.....[SPI
    f618:	4b5f 5a53 3738 3439 505f 524f 3354 4f43     _KSZ8794_PORT3CO
    f628:	544e 4f52 314c 205d 6f6e 2074 6f63 7272     NTROL1] not corr
    f638:	6365 0d74 000a 0000 535b 4950 4b5f 5a53     ect.....[SPI_KSZ
    f648:	3738 3439 505f 524f 3454 4f43 544e 4f52     8794_PORT4CONTRO
    f658:	314c 205d 6f6e 2074 6f63 7272 6365 0d74     L1] not correct.
    f668:	000a 0000 535b 4950 4b5f 5a53 3738 3439     ....[SPI_KSZ8794
    f678:	505f 524f 3154 4f43 544e 4f52 324c 205d     _PORT1CONTROL2] 
    f688:	6f6e 2074 6f63 7272 6365 0d74 000a 0000     not correct.....
    f698:	535b 4950 4b5f 5a53 3738 3439 505f 524f     [SPI_KSZ8794_POR
    f6a8:	3254 4f43 544e 4f52 324c 205d 6f6e 2074     T2CONTROL2] not 
    f6b8:	6f63 7272 6365 0d74 000a 0000 535b 4950     correct.....[SPI
    f6c8:	4b5f 5a53 3738 3439 505f 524f 3454 4f43     _KSZ8794_PORT4CO
    f6d8:	544e 4f52 324c 205d 6f6e 2074 6f63 7272     NTROL2] not corr
    f6e8:	6365 0d74 000a 0000 535b 4950 4b5f 5a53     ect.....[SPI_KSZ
    f6f8:	3738 3439 505f 524f 3154 4f43 544e 4f52     8794_PORT1CONTRO
    f708:	334c 205d 6f6e 2074 6f63 7272 6365 0d74     L3] not correct.
    f718:	000a 0000 535b 4950 4b5f 5a53 3738 3439     ....[SPI_KSZ8794
    f728:	505f 524f 3254 4f43 544e 4f52 334c 205d     _PORT2CONTROL3] 
    f738:	6f6e 2074 6f63 7272 6365 0d74 000a 0000     not correct.....
    f748:	535b 4950 4b5f 5a53 3738 3439 505f 524f     [SPI_KSZ8794_POR
    f758:	3354 4f43 544e 4f52 334c 205d 6f6e 2074     T3CONTROL3] not 
    f768:	6f63 7272 6365 0d74 000a 0000 535b 4950     correct.....[SPI
    f778:	4b5f 5a53 3738 3439 505f 524f 3454 4f43     _KSZ8794_PORT4CO
    f788:	544e 4f52 334c 205d 6f6e 2074 6f63 7272     NTROL3] not corr
    f798:	6365 0d74 000a 0000 535b 4950 4b5f 5a53     ect.....[SPI_KSZ
    f7a8:	3738 3439 505f 524f 3154 4f43 544e 4f52     8794_PORT1CONTRO
    f7b8:	344c 205d 6f6e 2074 6f63 7272 6365 0d74     L4] not correct.
    f7c8:	000a 0000 535b 4950 4b5f 5a53 3738 3439     ....[SPI_KSZ8794
    f7d8:	505f 524f 3254 4f43 544e 4f52 344c 205d     _PORT2CONTROL4] 
    f7e8:	6f6e 2074 6f63 7272 6365 0d74 000a 0000     not correct.....
    f7f8:	535b 4950 4b5f 5a53 3738 3439 505f 524f     [SPI_KSZ8794_POR
    f808:	3354 4f43 544e 4f52 344c 205d 6f6e 2074     T3CONTROL4] not 
    f818:	6f63 7272 6365 0d74 000a 0000 535b 4950     correct.....[SPI
    f828:	4b5f 5a53 3738 3439 505f 524f 3454 4f43     _KSZ8794_PORT4CO
    f838:	544e 4f52 344c 205d 6f6e 2074 6f63 7272     NTROL4] not corr
    f848:	6365 0d74 000a 0000 535b 4950 4b5f 5a53     ect.....[SPI_KSZ
    f858:	3738 3439 505f 524f 3154 4f43 544e 4f52     8794_PORT1CONTRO
    f868:	354c 205d 6f6e 2074 6f63 7272 6365 0d74     L5] not correct.
    f878:	000a 0000 535b 4950 4b5f 5a53 3738 3439     ....[SPI_KSZ8794
    f888:	505f 524f 3254 4f43 544e 4f52 354c 205d     _PORT2CONTROL5] 
    f898:	6f6e 2074 6f63 7272 6365 0d74 000a 0000     not correct.....
    f8a8:	535b 4950 4b5f 5a53 3738 3439 505f 524f     [SPI_KSZ8794_POR
    f8b8:	3354 4f43 544e 4f52 354c 205d 6f6e 2074     T3CONTROL5] not 
    f8c8:	6f63 7272 6365 0d74 000a 0000 535b 4950     correct.....[SPI
    f8d8:	4b5f 5a53 3738 3439 505f 524f 3454 4f43     _KSZ8794_PORT4CO
    f8e8:	544e 4f52 354c 205d 6f6e 2074 6f63 7272     NTROL5] not corr
    f8f8:	6365 0d74 000a 0000 535b 4950 4b5f 5a53     ect.....[SPI_KSZ
    f908:	3738 3439 505f 524f 3454 4f43 544e 4f52     8794_PORT4CONTRO
    f918:	364c 205d 6f6e 2074 6f63 7272 6365 0d74     L6] not correct.
    f928:	000a 0000 535b 4950 4b5f 5a53 3738 3439     ....[SPI_KSZ8794
    f938:	505f 524f 3154 4f43 544e 4f52 374c 205d     _PORT1CONTROL7] 
    f948:	6f6e 2074 6f63 7272 6365 0d74 000a 0000     not correct.....
    f958:	535b 4950 4b5f 5a53 3738 3439 505f 524f     [SPI_KSZ8794_POR
    f968:	3254 4f43 544e 4f52 374c 205d 6f6e 2074     T2CONTROL7] not 
    f978:	6f63 7272 6365 0d74 000a 0000 535b 4950     correct.....[SPI
    f988:	4b5f 5a53 3738 3439 505f 524f 3354 4f43     _KSZ8794_PORT3CO
    f998:	544e 4f52 374c 205d 6f6e 2074 6f63 7272     NTROL7] not corr
    f9a8:	6365 0d74 000a 0000 535b 4950 4b5f 5a53     ect.....[SPI_KSZ
    f9b8:	3738 3439 505f 524f 3154 4f43 544e 4f52     8794_PORT1CONTRO
    f9c8:	384c 205d 6f6e 2074 6f63 7272 6365 0d74     L8] not correct.
    f9d8:	000a 0000 535b 4950 4b5f 5a53 3738 3439     ....[SPI_KSZ8794
    f9e8:	505f 524f 3254 4f43 544e 4f52 384c 205d     _PORT2CONTROL8] 
    f9f8:	6f6e 2074 6f63 7272 6365 0d74 000a 0000     not correct.....
    fa08:	535b 4950 4b5f 5a53 3738 3439 505f 524f     [SPI_KSZ8794_POR
    fa18:	3354 4f43 544e 4f52 384c 205d 6f6e 2074     T3CONTROL8] not 
    fa28:	6f63 7272 6365 0d74 000a 0000 535b 4950     correct.....[SPI
    fa38:	4b5f 5a53 3738 3439 505f 524f 3154 494c     _KSZ8794_PORT1LI
    fa48:	4b4e 444d 205d 6f6e 2074 6f63 7272 6365     NKMD] not correc
    fa58:	0d74 000a 535b 4950 4b5f 5a53 3738 3439     t...[SPI_KSZ8794
    fa68:	505f 524f 3254 494c 4b4e 444d 205d 6f6e     _PORT2LINKMD] no
    fa78:	2074 6f63 7272 6365 0d74 000a 535b 4950     t correct...[SPI
    fa88:	4b5f 5a53 3738 3439 505f 524f 3354 494c     _KSZ8794_PORT3LI
    fa98:	4b4e 444d 205d 6f6e 2074 6f63 7272 6365     NKMD] not correc
    faa8:	0d74 000a 535b 4950 4b5f 5a53 3738 3439     t...[SPI_KSZ8794
    fab8:	505f 524f 3154 4f43 544e 4f52 394c 205d     _PORT1CONTROL9] 
    fac8:	6f6e 2074 6f63 7272 6365 0d74 000a 0000     not correct.....
    fad8:	535b 4950 4b5f 5a53 3738 3439 505f 524f     [SPI_KSZ8794_POR
    fae8:	3254 4f43 544e 4f52 394c 205d 6f6e 2074     T2CONTROL9] not 
    faf8:	6f63 7272 6365 0d74 000a 0000 535b 4950     correct.....[SPI
    fb08:	4b5f 5a53 3738 3439 505f 524f 3354 4f43     _KSZ8794_PORT3CO
    fb18:	544e 4f52 394c 205d 6f6e 2074 6f63 7272     NTROL9] not corr
    fb28:	6365 0d74 000a 0000 535b 4950 4b5f 5a53     ect.....[SPI_KSZ
    fb38:	3738 3439 505f 524f 3154 4f43 544e 4f52     8794_PORT1CONTRO
    fb48:	314c 5d30 6e20 746f 6320 726f 6572 7463     L10] not correct
    fb58:	0a0d 0000 535b 4950 4b5f 5a53 3738 3439     ....[SPI_KSZ8794
    fb68:	505f 524f 3254 4f43 544e 4f52 314c 5d30     _PORT2CONTROL10]
    fb78:	6e20 746f 6320 726f 6572 7463 0a0d 0000      not correct....
    fb88:	535b 4950 4b5f 5a53 3738 3439 505f 524f     [SPI_KSZ8794_POR
    fb98:	3354 4f43 544e 4f52 314c 5d30 6e20 746f     T3CONTROL10] not
    fba8:	6320 726f 6572 7463 0a0d 0000 535b 4950      correct....[SPI
    fbb8:	4b5f 5a53 3738 3439 505f 524f 3254 4f43     _KSZ8794_PORT2CO
    fbc8:	544e 4f52 324c 5d30 6e20 746f 6320 726f     NTROL20] not cor
    fbd8:	6572 7463 0a0d 0000 535b 4950 4b5f 5a53     rect....[SPI_KSZ
    fbe8:	3738 3439 505f 524f 3154 4f43 544e 4f52     8794_PORT1CONTRO
    fbf8:	314c 5d32 6e20 746f 6320 726f 6572 7463     L12] not correct
    fc08:	0a0d 0000 535b 4950 4b5f 5a53 3738 3439     ....[SPI_KSZ8794
    fc18:	505f 524f 3254 4f43 544e 4f52 314c 5d32     _PORT2CONTROL12]
    fc28:	6e20 746f 6320 726f 6572 7463 0a0d 0000      not correct....
    fc38:	535b 4950 4b5f 5a53 3738 3439 505f 524f     [SPI_KSZ8794_POR
    fc48:	3354 4f43 544e 4f52 314c 5d32 6e20 746f     T3CONTROL12] not
    fc58:	6320 726f 6572 7463 0a0d 0000 535b 4950      correct....[SPI
    fc68:	4b5f 5a53 3738 3439 505f 524f 3454 4f43     _KSZ8794_PORT4CO
    fc78:	544e 4f52 314c 5d32 6e20 746f 6320 726f     NTROL12] not cor
    fc88:	6572 7463 0a0d 0000 535b 4950 4b5f 5a53     rect....[SPI_KSZ
    fc98:	3738 3439 505f 524f 3154 4f43 544e 4f52     8794_PORT1CONTRO
    fca8:	314c 5d33 6e20 746f 6320 726f 6572 7463     L13] not correct
    fcb8:	0a0d 0000 535b 4950 4b5f 5a53 3738 3439     ....[SPI_KSZ8794
    fcc8:	505f 524f 3254 4f43 544e 4f52 314c 5d33     _PORT2CONTROL13]
    fcd8:	6e20 746f 6320 726f 6572 7463 0a0d 0000      not correct....
    fce8:	535b 4950 4b5f 5a53 3738 3439 505f 524f     [SPI_KSZ8794_POR
    fcf8:	3354 4f43 544e 4f52 314c 5d33 6e20 746f     T3CONTROL13] not
    fd08:	6320 726f 6572 7463 0a0d 0000 535b 4950      correct....[SPI
    fd18:	4b5f 5a53 3738 3439 505f 524f 3454 4f43     _KSZ8794_PORT4CO
    fd28:	544e 4f52 314c 5d33 6e20 746f 6320 726f     NTROL13] not cor
    fd38:	6572 7463 0a0d 0000 535b 4950 4b5f 5a53     rect....[SPI_KSZ
    fd48:	3738 3439 505f 524f 3154 4f43 544e 4f52     8794_PORT1CONTRO
    fd58:	314c 5d34 6e20 746f 6320 726f 6572 7463     L14] not correct
    fd68:	0a0d 0000 535b 4950 4b5f 5a53 3738 3439     ....[SPI_KSZ8794
    fd78:	505f 524f 3254 4f43 544e 4f52 314c 5d34     _PORT2CONTROL14]
    fd88:	6e20 746f 6320 726f 6572 7463 0a0d 0000      not correct....
    fd98:	535b 4950 4b5f 5a53 3738 3439 505f 524f     [SPI_KSZ8794_POR
    fda8:	3354 4f43 544e 4f52 314c 5d34 6e20 746f     T3CONTROL14] not
    fdb8:	6320 726f 6572 7463 0a0d 0000 535b 4950      correct....[SPI
    fdc8:	4b5f 5a53 3738 3439 505f 524f 3454 4f43     _KSZ8794_PORT4CO
    fdd8:	544e 4f52 314c 5d34 6e20 746f 6320 726f     NTROL14] not cor
    fde8:	6572 7463 0a0d 0000 535b 4950 4b5f 5a53     rect....[SPI_KSZ
    fdf8:	3738 3439 505f 524f 3154 4f43 544e 4f52     8794_PORT1CONTRO
    fe08:	314c 5d35 6e20 746f 6320 726f 6572 7463     L15] not correct
    fe18:	0a0d 0000 535b 4950 4b5f 5a53 3738 3439     ....[SPI_KSZ8794
    fe28:	505f 524f 3254 4f43 544e 4f52 314c 5d35     _PORT2CONTROL15]
    fe38:	6e20 746f 6320 726f 6572 7463 0a0d 0000      not correct....
    fe48:	535b 4950 4b5f 5a53 3738 3439 505f 524f     [SPI_KSZ8794_POR
    fe58:	3354 4f43 544e 4f52 314c 5d35 6e20 746f     T3CONTROL15] not
    fe68:	6320 726f 6572 7463 0a0d 0000 535b 4950      correct....[SPI
    fe78:	4b5f 5a53 3738 3439 505f 524f 3454 4f43     _KSZ8794_PORT4CO
    fe88:	544e 4f52 314c 5d35 6e20 746f 6320 726f     NTROL15] not cor
    fe98:	6572 7463 0a0d 0000 535b 4950 4b5f 5a53     rect....[SPI_KSZ
    fea8:	3738 3439 505f 524f 3154 4f43 544e 4f52     8794_PORT1CONTRO
    feb8:	314c 5d36 6e20 746f 6320 726f 6572 7463     L16] not correct
    fec8:	0a0d 0000 535b 4950 4b5f 5a53 3738 3439     ....[SPI_KSZ8794
    fed8:	505f 524f 3254 4f43 544e 4f52 314c 5d36     _PORT2CONTROL16]
    fee8:	6e20 746f 6320 726f 6572 7463 0a0d 0000      not correct....
    fef8:	535b 4950 4b5f 5a53 3738 3439 505f 524f     [SPI_KSZ8794_POR
    ff08:	3354 4f43 544e 4f52 314c 5d36 6e20 746f     T3CONTROL16] not
    ff18:	6320 726f 6572 7463 0a0d 0000 535b 4950      correct....[SPI
    ff28:	4b5f 5a53 3738 3439 505f 524f 3454 4f43     _KSZ8794_PORT4CO
    ff38:	544e 4f52 314c 5d36 6e20 746f 6320 726f     NTROL16] not cor
    ff48:	6572 7463 0a0d 0000 535b 4950 4b5f 5a53     rect....[SPI_KSZ
    ff58:	3738 3439 505f 524f 3154 4f43 544e 4f52     8794_PORT1CONTRO
    ff68:	314c 5d37 6e20 746f 6320 726f 6572 7463     L17] not correct
    ff78:	0a0d 0000 535b 4950 4b5f 5a53 3738 3439     ....[SPI_KSZ8794
    ff88:	505f 524f 3254 4f43 544e 4f52 314c 5d37     _PORT2CONTROL17]
    ff98:	6e20 746f 6320 726f 6572 7463 0a0d 0000      not correct....
    ffa8:	535b 4950 4b5f 5a53 3738 3439 505f 524f     [SPI_KSZ8794_POR
    ffb8:	3354 4f43 544e 4f52 314c 5d37 6e20 746f     T3CONTROL17] not
    ffc8:	6320 726f 6572 7463 0a0d 0000 535b 4950      correct....[SPI
    ffd8:	4b5f 5a53 3738 3439 505f 524f 3454 4f43     _KSZ8794_PORT4CO
    ffe8:	544e 4f52 314c 5d37 6e20 746f 6320 726f     NTROL17] not cor
    fff8:	6572 7463 0a0d 0000 535b 4950 4b5f 5a53     rect....[SPI_KSZ
   10008:	3738 3439 535f 4154 5452 6620 6e69 6c61     8794_START final
   10018:	205d 6f6e 2074 6f63 7272 6365 0d74 000a     ] not correct...
   10028:	414d 2043 6461 7264 7365 2073 6e61 2064     MAC address and 
   10038:	5049 7320 6863 6d65 2065 6f6e 2074 6e69     IP scheme not in
   10048:	7469 6169 696c 657a 2064 7361 7420 6568     itialized as the
   10058:	6572 6920 2073 6f6e 5b20 4449 205d 6573     re is no [ID] se
   10068:	2e74 2e2e 0a0d 0000 754d 746c 5369 6e65     t.......MultiSen
   10078:	6573 5b20 6e69 7469 4d20 4341 492f 2050     se [init MAC/IP 
   10088:	6176 756c 7365 205d 7825 253a 3a78 7825     values] %x:%x:%x
   10098:	253a 3a78 7825 253a 2078 6425 252e 2e64     :%x:%x:%x %d.%d.
   100a8:	6425 252e 0d64 000a 614d 6e69 5520 5044     %d.%d...Main UDP
   100b8:	7320 636f 656b 2074 7263 6165 6574 2e64      socket created.
   100c8:	2e2e 0a0d 0000 0000 614d 6e69 5520 5044     ........Main UDP
   100d8:	7320 636f 656b 2074 5245 4f52 2152 2121      socket ERROR!!!
   100e8:	2121 2121 0a0d 0000 6143 6472 5b20 5d41     !!!!....Card [A]
   100f8:	5520 5044 7320 636f 656b 2074 7263 6165      UDP socket crea
   10108:	6574 2e64 2e2e 0a0d 0000 0000 6143 6472     ted.........Card
   10118:	5b20 5d41 5520 5044 7320 636f 656b 2074      [A] UDP socket 
   10128:	5245 4f52 2152 2121 2121 2121 0a0d 0000     ERROR!!!!!!!....
   10138:	6143 6472 5b20 5d42 5520 5044 7320 636f     Card [B] UDP soc
   10148:	656b 2074 7263 6165 6574 2e64 2e2e 0a0d     ket created.....
   10158:	0000 0000 6143 6472 5b20 5d42 5520 5044     ....Card [B] UDP
   10168:	7320 636f 656b 2074 5245 4f52 2152 2121      socket ERROR!!!
   10178:	2121 2121 0a0d 0000 6952 676e 4d20 6e61     !!!!....Ring Man
   10188:	6761 6d65 6e65 2074 4455 2050 6f73 6b63     agement UDP sock
   10198:	7465 6320 6572 7461 6465 2e2e 0d2e 000a     et created......
   101a8:	6952 676e 4d20 6e61 6761 6d65 6e65 2074     Ring Management 
   101b8:	4455 2050 6f73 6b63 7465 4520 5252 524f     UDP socket ERROR
   101c8:	2121 2121 2121 0d21 000a 0000 754d 746c     !!!!!!!.....Mult
   101d8:	5369 6e65 6573 5b20 6f63 666e 6769 7275     iSense [configur
   101e8:	7461 6f69 206e 5245 4f52 2052 4552 4441     ation ERROR READ
   101f8:	4e49 5d47 0a0d 0000 754d 746c 5369 6e65     ING]....MultiSen
   10208:	6573 5b20 6f63 666e 6769 7275 7461 6f69     se [configuratio
   10218:	206e 4e49 4156 494c 5d44 0a0d 0000 0000     n INVALID]......
   10228:	554d 544c 5349 4e45 4553 4e20 4545 5344     MULTISENSE NEEDS
   10238:	4320 4e4f 4946 5547 4952 474e 2e2e 002e      CONFIGURING....
   10248:	754d 746c 5369 6e65 6573 5b20 6f63 666e     MultiSense [conf
   10258:	6769 7275 7461 6f69 206e 4f46 4d52 5441     iguration FORMAT
   10268:	4554 5d44 0a0d 0000 754d 746c 5369 6e65     TED]....MultiSen
   10278:	6573 5b20 6f63 666e 6769 7275 7461 6f69     se [configuratio
   10288:	206e 5245 4f52 2052 5257 5449 4e49 5d47     n ERROR WRITING]
   10298:	0a0d 0000 754d 746c 5369 6e65 6573 5b20     ....MultiSense [
   102a8:	6f63 666e 6769 7275 7461 6f69 206e 5257     configuration WR
   102b8:	5449 4554 5d4e 0a0d 0000 0000 754d 746c     ITTEN]......Mult
   102c8:	5369 6e65 6573 5b20 5055 4144 4554 2044     iSense [UPDATED 
   102d8:	493c 3e44 6320 6e6f 6966 7567 6172 6974     <ID> configurati
   102e8:	6e6f 5720 4952 5454 4e45 0d5d 000a 0000     on WRITTEN].....
   102f8:	6c47 626f 6c61 7320 7465 6974 676e 2073     Global settings 
   10308:	6170 6b63 7465 7220 6365 6965 6576 2e64     packet received.
   10318:	2e2e 0a0d 0000 0000 6143 6472 2041 694d     ........CardA Mi
   10328:	696e 492d 204f 6170 6b63 7465 7220 6365     ni-IO packet rec
   10338:	6965 6576 2e64 2e2e 0a0d 0000 6143 6472     eived.......Card
   10348:	2042 694d 696e 492d 204f 6170 6b63 7465     B Mini-IO packet
   10358:	7220 6365 6965 6576 2e64 2e2e 0a0d 0000      received.......
   10368:	7242 616f 6364 7361 2074 6154 6c62 2065     Broadcast Table 
   10378:	465b 554c 4853 205d 4455 2050 6170 6b63     [FLUSH] UDP pack
   10388:	7465 6120 7272 7669 6465 2e2e 0d2e 000a     et arrived......
   10398:	6148 6472 6177 6572 7020 6361 656b 2074     Hardware packet 
   103a8:	6573 646e 2e2e 0d2e 000a 0000 6143 6472     send........Card
   103b8:	2041 694d 696e 492d 204f 6170 6b63 7465     A Mini-IO packet
   103c8:	7320 6e65 2e64 2e2e 0a0d 0000 6143 6472      send.......Card
   103d8:	2041 6956 7262 5461 6b65 7020 6361 656b     A VibraTek packe
   103e8:	2074 6573 646e 2e2e 0d2e 000a 6143 6472     t send......Card
   103f8:	2042 694d 696e 492d 204f 6170 6b63 7465     B Mini-IO packet
   10408:	7320 6e65 2e64 2e2e 0a0d 0000 6143 6472      send.......Card
   10418:	2042 6956 7262 5461 6b65 7020 6361 656b     B VibraTek packe
   10428:	2074 6573 646e 2e2e 0d2e 000a 6f54 6f70     t send......Topo
   10438:	6f6c 7967 7520 6470 7461 2065 6170 6b63     logy update pack
   10448:	7465 7320 6e65 2e64 2e2e 0a0d 0000 0000     et send.........
   10458:	4142 4553 5453 5441 4f49 004e 4150 5353     BASESTATION.PASS
   10468:	542d 5248 554f 4847 0000 0000 5055 0000     -THROUGH....UP..
   10478:	494c 4b4e 4f20 004b 494c 4b4e 4420 574f     LINK OK.LINK DOW
   10488:	004e 0000 6956 7262 5061 696f 746e 0000     N...VibraPoint..
   10498:	4f4e 2054 4946 5454 4445 0000 6956 7262     NOT FITTED..Vibr
   104a8:	5461 6b65 0000 0000 614d 6978 4920 004f     aTek....Maxi IO.
   104b8:	694d 696e 4920 004f 6e55 6e6b 776f 006e     Mini IO.Unknown.
   104c8:	2650 0045 2f4e 0041 5242 4b4f 4e45 0000     P&E.N/A.BROKEN..
   104d8:	4f4c 504f 0000 0000 5445 4548 4e52 5445     LOOP....ETHERNET
   104e8:	203a 625b 6f72 6461 6163 7473 7320 6f74     : [broadcast sto
   104f8:	6d72 205d 2121 2121 2121 2121 2121 2121     rm] !!!!!!!!!!!!
   10508:	2121 2121 2121 2121 2121 2121 2121 2121     !!!!!!!!!!!!!!!!
   10518:	2121 2121 2121 2121 2121 2121 2121 2121     !!!!!!!!!!!!!!!!
   10528:	2121 2121 2121 2121 0d21 000a 7257 7469     !!!!!!!!!...Writ
   10538:	2065 4441 2043 6167 6e69 7320 7465 6974     e ADC gain setti
   10548:	676e 2073 6f66 2072 6956 7262 5461 6b65     ngs for VibraTek
   10558:	4320 7261 4164 0a0d 0000 0000 7257 7469      CardA......Writ
   10568:	2065 4441 2043 6167 6e69 7320 7465 6974     e ADC gain setti
   10578:	676e 2073 6f66 2072 6956 7262 5461 6b65     ngs for VibraTek
   10588:	4320 7261 4264 0a0d 0000 0000 6f43 6c75      CardB......Coul
   10598:	2064 4f4e 2054 6572 6461 6620 6f72 206d     d NOT read from 
   105a8:	6874 2065 694d 696e 492d 204f 4441 2043     the Mini-IO ADC 
   105b8:	6e6f 4320 5241 4144 493a 4332 5b20 6925     on CARDA:I2C [%i
   105c8:	0d5d 000a 6f43 6c75 2064 4f4e 2054 7277     ]...Could NOT wr
   105d8:	7469 2065 6f74 7420 6568 4d20 6e69 2d69     ite to the Mini-
   105e8:	4f49 4120 4344 6320 6e6f 7274 6c6f 656c     IO ADC controlle
   105f8:	2072 6e6f 4320 5241 4144 493a 4332 5b20     r on CARDA:I2C [
   10608:	6925 0d5d 000a 0000 6f43 6c75 2064 4f4e     %i].....Could NO
   10618:	2054 7277 7469 2065 6f74 7420 6568 4d20     T write to the M
   10628:	6e69 2d69 4f49 4520 5058 4e41 4544 2052     ini-IO EXPANDER 
   10638:	6e6f 4320 5241 4144 493a 4332 5b20 6925     on CARDA:I2C [%i
   10648:	0d5d 000a 6f43 6c75 2064 4f4e 2054 6572     ]...Could NOT re
   10658:	6461 6620 6f72 206d 6874 2065 694d 696e     ad from the Mini
   10668:	492d 204f 5845 4150 444e 5245 6f20 206e     -IO EXPANDER on 
   10678:	4143 4452 3a41 3249 2043 255b 5d69 0a0d     CARDA:I2C [%i]..
   10688:	0000 0000 6f43 6c75 2064 4f4e 2054 6572     ....Could NOT re
   10698:	6461 6620 6f72 206d 6874 2065 694d 696e     ad from the Mini
   106a8:	492d 204f 4441 2043 6e6f 4320 5241 4244     -IO ADC on CARDB
   106b8:	493a 4332 5b20 6925 0d5d 000a 6f43 6c75     :I2C [%i]...Coul
   106c8:	2064 4f4e 2054 7277 7469 2065 6f74 7420     d NOT write to t
   106d8:	6568 4d20 6e69 2d69 4f49 4120 4344 6320     he Mini-IO ADC c
   106e8:	6e6f 7274 6c6f 656c 2072 6e6f 4320 5241     ontroller on CAR
   106f8:	4244 493a 4332 5b20 6925 0d5d 000a 0000     DB:I2C [%i].....
   10708:	6f43 6c75 2064 4f4e 2054 7277 7469 2065     Could NOT write 
   10718:	6f74 7420 6568 4d20 6e69 2d69 4f49 4520     to the Mini-IO E
   10728:	5058 4e41 4544 2052 6e6f 4320 5241 4244     XPANDER on CARDB
   10738:	493a 4332 5b20 6925 0d5d 000a 6f43 6c75     :I2C [%i]...Coul
   10748:	2064 4f4e 2054 6572 6461 6620 6f72 206d     d NOT read from 
   10758:	6874 2065 694d 696e 492d 204f 5845 4150     the Mini-IO EXPA
   10768:	444e 5245 6f20 206e 4143 4452 3a42 3249     NDER on CARDB:I2
   10778:	2043 255b 5d69 0a0d 0000 0000 0a0d 202e     C [%i]......... 
   10788:	202e 202e 202e 202e 202e 202e 202e 202e     . . . . . . . . 
   10798:	202e 202e 202e 202e 202e 202e 202e 202e     . . . . . . . . 
   107a8:	202e 202e 202e 202e 202e 202e 202e 202e     . . . . . . . . 
   107b8:	202e 202e 202e 202e 202e 202e 202e 202e     . . . . . . . . 
   107c8:	202e 202e 0d2e 000a 433c 494c 4420 4245     . . ....<CLI DEB
   107d8:	4755 203e 525b 4245 4f4f 5d54 6320 6d6f     UG> [REBOOT] com
   107e8:	616d 646e 0a0d 0000 202e 202e 202e 202e     mand..... . . . 
   107f8:	202e 202e 202e 202e 202e 202e 202e 202e     . . . . . . . . 
   10808:	202e 202e 202e 202e 202e 202e 202e 202e     . . . . . . . . 
   10818:	202e 202e 202e 202e 202e 202e 202e 202e     . . . . . . . . 
   10828:	202e 202e 202e 202e 202e 202e 202e 0d2e     . . . . . . . ..
   10838:	0d0a 000a 433c 494c 4420 4245 4755 203e     ....<CLI DEBUG> 
   10848:	435b 4e4f 4946 5547 4152 4954 4e4f 4420     [CONFIGURATION D
   10858:	4645 5541 544c 205d 6f63 6d6d 6e61 0d64     EFAULT] command.
   10868:	000a 0000 433c 494c 4420 4245 4755 203e     ....<CLI DEBUG> 
   10878:	495b 2044 4552 4553 5d54 6320 6d6f 616d     [ID RESET] comma
   10888:	646e 0a0d 0000 0000 6552 6f62 746f 6e69     nd......Rebootin
   10898:	2e67 2e2e 0a0d 0000 433c 494c 4420 4245     g.......<CLI DEB
   108a8:	4755 203e 425b 5341 5345 4154 4954 4e4f     UG> [BASESTATION
   108b8:	205d 6f63 6d6d 6e61 0d64 000a 433c 494c     ] command...<CLI
   108c8:	4420 4245 4755 203e 505b 5341 2053 4854      DEBUG> [PASS TH
   108d8:	4f52 4755 5d48 6320 6d6f 616d 646e 0a0d     ROUGH] command..
   108e8:	0000 0000 433c 494c 4420 4245 4755 203e     ....<CLI DEBUG> 
   108f8:	4c5b 5649 2045 4f42 5241 2044 5250 4e49     [LIVE BOARD PRIN
   10908:	5d54 6320 6d6f 616d 646e 0a0d 0000 0000     T] command......
   10918:	433c 494c 4420 4245 4755 203e 4449 2020     <CLI DEBUG> ID  
   10928:	2020 2020 2020 2020 2020 2020 3d20 2520                  = %
   10938:	0d75 000a 433c 494c 4420 4245 4755 203e     u...<CLI DEBUG> 
   10948:	614e 656d 2020 2020 2020 2020 2020 2020     Name            
   10958:	3d20 2520 0d73 000a 433c 494c 4420 4245      = %s...<CLI DEB
   10968:	4755 203e 6167 6e69 2041 2020 2020 2020     UG> gainA       
   10978:	2020 2020 3d20 2520 0d64 000a 433c 494c          = %d...<CLI
   10988:	4420 4245 4755 203e 6167 6e69 2042 2020      DEBUG> gainB   
   10998:	2020 2020 2020 2020 3d20 2520 0d64 000a              = %d...
   109a8:	433c 494c 4420 4245 4755 203e 6f4d 6564     <CLI DEBUG> Mode
   109b8:	2020 2020 2020 2020 2020 2020 3d20 2520                  = %
   109c8:	0d73 000a 433c 494c 4420 4245 4755 203e     s...<CLI DEBUG> 
   109d8:	6157 6574 3172 2020 2020 2020 2020 2020     Water1          
   109e8:	3d20 2520 0d64 000a 433c 494c 4420 4245      = %d...<CLI DEB
   109f8:	4755 203e 6157 6574 3272 2020 2020 2020     UG> Water2      
   10a08:	2020 2020 3d20 2520 0d64 000a 433c 494c          = %d...<CLI
   10a18:	4420 4245 4755 203e 5648 2020 2020 2020      DEBUG> HV      
   10a28:	2020 2020 2020 2020 3d20 2520 0d64 000a              = %d...
   10a38:	433c 494c 4420 4245 4755 203e 6554 706d     <CLI DEBUG> Temp
   10a48:	2020 2020 2020 2020 2020 2020 3d20 2520                  = %
   10a58:	0d64 000a 433c 494c 4420 4245 4755 203e     d...<CLI DEBUG> 
   10a68:	7548 696d 6964 7974 2020 2020 2020 2020     Humidity        
   10a78:	3d20 2520 0d64 000a 433c 494c 4420 4245      = %d...<CLI DEB
   10a88:	4755 203e 6154 706d 7265 2020 2020 2020     UG> Tamper      
   10a98:	2020 2020 3d20 2520 0d73 000a 433c 494c          = %s...<CLI
   10aa8:	4420 4245 4755 203e 6f50 7472 2031 2020      DEBUG> Port1   
   10ab8:	2020 2020 2020 2020 3d20 2520 0d73 000a              = %s...
   10ac8:	433c 494c 4420 4245 4755 203e 6f50 7472     <CLI DEBUG> Port
   10ad8:	2032 2020 2020 2020 2020 2020 3d20 2520     2            = %
   10ae8:	0d73 000a 433c 494c 4420 4245 4755 203e     s...<CLI DEBUG> 
   10af8:	6f50 7472 2033 2020 2020 2020 2020 2020     Port3           
   10b08:	3d20 2520 0d73 000a 433c 494c 4420 4245      = %s...<CLI DEB
   10b18:	4755 203e 6143 6472 2041 2020 2020 2020     UG> CardA       
   10b28:	2020 2020 3d20 2520 0d73 000a 433c 494c          = %s...<CLI
   10b38:	4420 4245 4755 203e 6143 6472 2042 2020      DEBUG> CardB   
   10b48:	2020 2020 2020 2020 3d20 2520 0d73 000a              = %s...
   10b58:	433c 494c 4420 4245 4755 203e 6952 676e     <CLI DEBUG> Ring
   10b68:	5420 706f 6c6f 676f 2079 2020 3d20 2520      Topology    = %
   10b78:	0d73 000a 433c 494c 4420 4245 4755 203e     s...<CLI DEBUG> 
   10b88:	6946 6d72 6177 6572 2020 2020 2020 2020     Firmware        
   10b98:	3d20 2520 2e64 6425 0a0d 0000 433c 494c      = %d.%d....<CLI
   10ba8:	4420 4245 4755 203e 495b 2050 4353 4548      DEBUG> [IP SCHE
   10bb8:	454d 2f20 4e20 5445 4f57 4b52 205d 6f63     ME / NETWORK] co
   10bc8:	6d6d 6e61 0d64 000a 433c 494c 4420 4245     mmand...<CLI DEB
   10bd8:	4755 203e 5049 2020 2020 2020 2020 2020     UG> IP          
   10be8:	2020 2020 3d20 2520 2e64 6425 252e 2e64          = %d.%d.%d.
   10bf8:	6425 0a0d 0000 0000 433c 494c 4420 4245     %d......<CLI DEB
   10c08:	4755 203e 654e 6d74 7361 206b 2020 2020     UG> Netmask     
   10c18:	2020 2020 3d20 2520 2e64 6425 252e 2e64          = %d.%d.%d.
   10c28:	6425 0a0d 0000 0000 433c 494c 4420 4245     %d......<CLI DEB
   10c38:	4755 203e 6147 6574 6177 2079 2020 2020     UG> Gateway     
   10c48:	2020 2020 3d20 2520 2e64 6425 252e 2e64          = %d.%d.%d.
   10c58:	6425 0a0d 0000 0000 433c 494c 4420 4245     %d......<CLI DEB
   10c68:	4755 203e 414d 2043 2020 2020 2020 2020     UG> MAC         
   10c78:	2020 2020 3d20 2520 3a78 7825 253a 3a78          = %x:%x:%x:
   10c88:	7825 253a 3a78 7825 0a0d 0000 433c 494c     %x:%x:%x....<CLI
   10c98:	4420 4245 4755 203e 535b 4550 4445 4d20      DEBUG> [SPEED M
   10ca8:	4941 4c4e 4f4f 5d50 6320 6d6f 616d 646e     AINLOOP] command
   10cb8:	0a0d 0000 433c 494c 4420 4245 4755 203e     ....<CLI DEBUG> 
   10cc8:	614d 6e69 6c2d 6f6f 2f70 6153 706d 696c     Main-loop/Sampli
   10cd8:	676e 3d20 2520 0d64 000a 0000 433c 494c     ng = %d.....<CLI
   10ce8:	4420 4245 4755 203e 6e55 6e6b 776f 206e      DEBUG> Unknown 
   10cf8:	6f63 6d6d 6e61 0d64 0d0a 480a 6c65 2070     command....Help 
   10d08:	6353 6572 6e65 0d3a 0d0a 000a 2052 2020     Screen:.....R   
   10d18:	2020 2020 2020 525b 4245 4f4f 5d54 6320           [REBOOT] c
   10d28:	6d6f 616d 646e 0a0d 0000 0000 2044 2020     ommand......D   
   10d38:	2020 2020 2020 435b 4e4f 4946 5547 4152           [CONFIGURA
   10d48:	4954 4e4f 4420 4645 5541 544c 205d 6f63     TION DEFAULT] co
   10d58:	6d6d 6e61 0d64 000a 2058 2020 2020 2020     mmand...X       
   10d68:	2020 495b 2044 4552 4553 5d54 6320 6d6f       [ID RESET] com
   10d78:	616d 646e 0a0d 0000 2042 2020 2020 2020     mand....B       
   10d88:	2020 425b 5341 5345 4154 4954 4e4f 205d       [BASESTATION] 
   10d98:	6f63 6d6d 6e61 0d64 000a 0000 2050 2020     command.....P   
   10da8:	2020 2020 2020 505b 5341 2053 4854 4f52           [PASS THRO
   10db8:	4755 5d48 6320 6d6f 616d 646e 0a0d 0000     UGH] command....
   10dc8:	204c 2020 2020 2020 2020 4c5b 5649 2045     L         [LIVE 
   10dd8:	4f42 5241 2044 5250 4e49 5d54 6320 6d6f     BOARD PRINT] com
   10de8:	616d 646e 0a0d 0000 2049 2020 2020 2020     mand....I       
   10df8:	2020 495b 2050 4353 4548 454d 2f20 4e20       [IP SCHEME / N
   10e08:	5445 4f57 4b52 205d 6f63 6d6d 6e61 0d64     ETWORK] command.
   10e18:	000a 0000 2053 2020 2020 2020 2020 535b     ....S         [S
   10e28:	4550 4445 4d20 4941 4c4e 4f4f 5d50 6320     PEED MAINLOOP] c
   10e38:	6d6f 616d 646e 0a0d 0a0d 0000 0a0a 0a0a     ommand..........
   10e48:	0a0a 0a0a 0a0a 0a0a 2d2d 2d2d 2d2d 2d2d     ........--------
   10e58:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
   10e68:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
   10e78:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
   10e88:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
   10e98:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
   10ea8:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
   10eb8:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 0d2d 000a     -------------...
   10ec8:	754d 746c 5369 6e65 6573 5b20 5453 5241     MultiSense [STAR
   10ed8:	5d54 0a0d 0000 0000 754d 746c 5369 6e65     T]......MultiSen
   10ee8:	6573 5b20 6e69 7469 6720 6f6c 6162 2d6c     se [init global-
   10ef8:	6176 6972 6261 656c 2073 6f64 656e 0d5d     variables done].
   10f08:	000a 0000 754d 746c 5369 6e65 6573 5b20     ....MultiSense [
   10f18:	6e69 7469 4920 4f2f 6420 6e6f 5d65 0a0d     init I/O done]..
   10f28:	0000 0000 754d 746c 5369 6e65 6573 5b20     ....MultiSense [
   10f38:	6e69 7469 5320 4950 2620 5520 4253 6420     init SPI & USB d
   10f48:	6e6f 5d65 0a0d 0000 754d 746c 5369 6e65     one]....MultiSen
   10f58:	6573 5b20 7445 6568 6e72 7465 5320 4957     se [Ethernet SWI
   10f68:	4354 2048 6572 6573 5d74 0a0d 0000 0000     TCH reset]......
   10f78:	754d 746c 5369 6e65 6573 5b20 6e69 7469     MultiSense [init
   10f88:	5320 4957 4354 2048 6f64 656e 0d5d 000a      SWITCH done]...
   10f98:	754d 746c 5369 6e65 6573 5b20 6e69 7469     MultiSense [init
   10fa8:	5420 4d49 5245 6420 6e6f 5d65 0a0d 0000      TIMER done]....
   10fb8:	754d 746c 5369 6e65 6573 5b20 6e69 7469     MultiSense [init
   10fc8:	4120 4344 6420 6e6f 5d65 0a0d 0000 0000      ADC done]......
   10fd8:	754d 746c 5369 6e65 6573 5b20 6e69 7469     MultiSense [init
   10fe8:	4320 5952 5450 204f 6f64 656e 0d5d 000a      CRYPTO done]...
   10ff8:	754d 746c 5369 6e65 6573 5b20 6e69 7469     MultiSense [init
   11008:	7520 5049 6420 6e6f 5d65 0a0d 0000 0000      uIP done]......
   11018:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
   11028:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
   11038:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
   11048:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
   11058:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
   11068:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 0a0d 0000     ************....
   11078:	202a 4854 2045 554d 544c 2d49 4553 534e     * THE MULTI-SENS
   11088:	2045 4544 4956 4543 5b20 4449 205d 4148     E DEVICE [ID] HA
   11098:	2053 4f4e 2054 4542 4e45 5320 5445 202e     S NOT BEEN SET. 
   110a8:	4854 5349 4420 4645 4349 2045 4957 4c4c     THIS DEFICE WILL
   110b8:	4e20 544f 4620 4e55 5443 4f49 204e 524f      NOT FUNCTION OR
   110c8:	5220 4e55 4120 2053 2020 2a20 0a0d 0000      RUN AS    *....
   110d8:	202a 4f4e 4d52 4c41 5520 544e 4c49 5420     * NORMAL UNTIL T
   110e8:	4548 5b20 4449 205d 554e 424d 5245 4820     HE [ID] NUMBER H
   110f8:	5341 4220 4545 204e 4e45 4554 4552 2044     AS BEEN ENTERED 
   11108:	5942 5420 4948 2053 4554 4d52 4e49 4c41     BY THIS TERMINAL
   11118:	4620 4341 4c49 5449 2e59 2020 2020 2020      FACILITY.      
   11128:	2020 2020 2020 2020 2020 2a20 0a0d 0000                *....
   11138:	202a 202d 202d 202d 202d 202d 202d 202d     * - - - - - - - 
   11148:	202d 202d 202d 202d 202d 202d 202d 202d     - - - - - - - - 
   11158:	202d 202d 202d 202d 202d 202d 202d 202d     - - - - - - - - 
   11168:	202d 202d 202d 202d 202d 202d 202d 202d     - - - - - - - - 
   11178:	202d 202d 202d 202d 202d 202d 202d 202d     - - - - - - - - 
   11188:	202d 202d 202d 202d 202d 2a20 0a0d 0000     - - - - -  *....
   11198:	202a 4c50 4145 4553 4520 544e 5245 5420     * PLEASE ENTER T
   111a8:	4548 3320 2d32 4942 2054 4544 4956 4543     HE 32-BIT DEVICE
   111b8:	5b20 4449 205d 4542 4f4c 3a57 2020 2020      [ID] BELOW:    
   111c8:	2020 2020 2020 2020 2020 2020 2020 2020                     
   111d8:	2020 2020 2020 2020 2020 2020 2020 2020                     
   111e8:	2020 2020 2020 2020 2020 2a20 0a0d 0000                *....
   111f8:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
   11208:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
   11218:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
   11228:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
   11238:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
   11248:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 0a0d 0a0d     ************....
   11258:	0000 0000 754d 746c 5369 6e65 6573 5b20     ....MultiSense [
   11268:	6f62 746f 752d 2070 2026 6e69 7469 6320     boot-up & init c
   11278:	6d6f 6c70 7465 6465 0d5d 000a 202d 202d     ompleted]...- - 
   11288:	202d 202d 202d 202d 202d 202d 202d 202d     - - - - - - - - 
   11298:	202d 202d 202d 202d 202d 202d 202d 202d     - - - - - - - - 
   112a8:	202d 202d 202d 202d 202d 202d 202d 202d     - - - - - - - - 
   112b8:	202d 202d 202d 202d 202d 202d 202d 202d     - - - - - - - - 
   112c8:	202d 202d 202d 202d 202d 202d 202d 202d     - - - - - - - - 
   112d8:	202d 202d 202d 202d 202d 202d 202d 202d     - - - - - - - - 
   112e8:	202d 202d 202d 202d 202d 202d 202d 202d     - - - - - - - - 
   112f8:	0d2d 000a 0a0d 6e45 6574 2072 656e 2077     -.....Enter new 
   11308:	495b 5d44 6e20 776f 0d3a 000a 4449 6520     [ID] now:...ID e
   11318:	746e 7265 6465 203a 7325 0a0d 0000 0000     ntered: %s......
   11328:	0a0d 7349 7420 6968 2073 6f63 7272 6365     ..Is this correc
   11338:	2074 2f59 3f4e 0a0d 0000 0000 7525 0000     t Y/N?......%u..
   11348:	2e2e 702f 7265 6973 7473 6e65 5f74 7473     ../persistent_st
   11358:	726f 6761 2f65 766e 695f 746e 7265 616e     orage/nv_interna
   11368:	5f6c 6c66 7361 5f68 6c75 7274 2e61 0063     l_flash_ultra.c.
   11378:	5453 524f 4741 0045 2e2e 702f 7265 6973     STORAGE.../persi
   11388:	7473 6e65 5f74 7473 726f 6761 2f65 766e     stent_storage/nv
   11398:	735f 6f74 6172 6567 632e 0000 5445 4548     _storage.c..ETHE
   113a8:	4e52 5445 203a 6553 2074 7361 6120 6220     RNET: Set as a b
   113b8:	7361 2d65 7473 7461 6f69 206e 6f74 6d20     ase-station to m
   113c8:	6e61 6761 2065 7445 6568 6e72 7465 7420     anage Ethernet t
   113d8:	706f 6c6f 676f 2e79 2e2e 0a0d 0000 0000     opology.........
   113e8:	5245 4f52 2052 6573 7474 6e69 2067 6874     ERROR setting th
   113f8:	2065 5453 5441 4349 4d20 4341 7420 6261     e STATIC MAC tab
   11408:	656c 7720 7469 2068 5042 5544 6620 726f     le with BPDU for
   11418:	4220 7361 2d65 7473 7461 6f69 2e6e 2e2e      Base-station...
   11428:	0a0d 0000 5445 4548 4e52 5445 203a 6f6e     ....ETHERNET: no
   11438:	6d72 6c61 6e20 6e6f 2d65 616d 616e 6567     rmal none-manage
   11448:	2064 6170 7373 742d 7268 756f 6867 6e20     d pass-through n
   11458:	646f 2e65 2e2e 0a0d 0000 0000 5245 4f52     ode.........ERRO
   11468:	2052 6573 7474 6e69 2067 6874 2065 5453     R setting the ST
   11478:	5441 4349 4d20 4341 7420 6261 656c 7720     ATIC MAC table w
   11488:	7469 2068 5042 5544 6620 726f 7020 7361     ith BPDU for pas
   11498:	2d73 6874 6f72 6775 2068 6f6e 6564 2e2e     s-through node..
   114a8:	0d2e 000a 5445 4548 4e52 5445 203a 6f43     ....ETHERNET: Co
   114b8:	706d 656c 6574 2064 4952 474e 6d20 6e61     mpleted RING man
   114c8:	6761 6d65 6e65 2074 6e69 7469 2e2e 0d2e     agement init....
   114d8:	000a 0000 5445 4548 4e52 5445 203a 6553     ....ETHERNET: Se
   114e8:	746e 6620 7269 7473 4220 4450 2e55 2e2e     nt first BPDU...
   114f8:	0a0d 0000 5445 4548 4e52 5445 203a 2128     ....ETHERNET: (!
   11508:	7473 726f 5f6d 7473 7461 2965 4520 5252     storm_state) ERR
   11518:	524f 0a0d 0000 0000 5445 4548 4e52 5445     OR......ETHERNET
   11528:	203a 2128 6972 676e 7262 6165 296b 4520     : (!ringbreak) E
   11538:	5252 524f 0a0d 0000 5445 4548 4e52 5445     RROR....ETHERNET
   11548:	203a 745b 7275 696e 676e 4520 6874 7265     : [turning Ether
   11558:	656e 2074 423c 203e 4e4f 2d20 5220 4e49     net <B> ON - RIN
   11568:	2047 5242 4b4f 4e45 2e5d 2e2e 0a0d 0000     G BROKEN].......
   11578:	5445 4548 4e52 5445 203a 745b 7275 696e     ETHERNET: [turni
   11588:	676e 4520 6874 7265 656e 2074 423c 203e     ng Ethernet <B> 
   11598:	464f 2046 202d 4952 474e 4820 4145 454c     OFF - RING HEALE
   115a8:	5d44 2e2e 0d2e 000a 5445 4548 4e52 5445     D]......ETHERNET
   115b8:	203a 735b 6f74 6d72 7320 6275 6973 6564     : [storm subside
   115c8:	5d64 2e2e 0d2e 000a 5445 4548 4e52 5445     d]......ETHERNET
   115d8:	203a 7574 6e72 6e69 2067 7445 6568 6e72     : turning Ethern
   115e8:	7465 3c20 3e42 4f20 4646 6220 6365 7561     et <B> OFF becau
   115f8:	6573 6f20 2066 7473 726f 206d 202d 4952     se of storm - RI
   11608:	474e 4820 4145 494c 474e 5020 534f 4953     NG HEALING POSSI
   11618:	4942 494c 5954 2e5d 2e2e 0a0d 0000 0000     BILITY].........
   11628:	6975 5f70 7069 6863 736b 6d75 203a 7573     uip_ipchksum: su
   11638:	206d 7830 3025 7834 000a 0000 7069 203a     m 0x%04x....ip: 
   11648:	6e69 6176 696c 2064 6576 7372 6f69 206e     invalid version 
   11658:	726f 6820 6165 6564 2072 656c 676e 6874     or header length
   11668:	002e 0000 7069 203a 6170 6b63 7465 7320     ....ip: packet s
   11678:	6f68 7472 7265 7420 6168 206e 6572 6f70     horter than repo
   11688:	7472 6465 6920 206e 5049 6820 6165 6564     rted in IP heade
   11698:	2e72 0000 7069 203a 7266 6761 656d 746e     r...ip: fragment
   116a8:	6420 6f72 7070 6465 002e 0000 7069 203a      dropped....ip: 
   116b8:	6162 2064 6863 6365 736b 6d75 002e 0000     bad checksum....
   116c8:	7069 203a 656e 7469 6568 2072 6374 2070     ip: neither tcp 
   116d8:	6f6e 2072 6369 706d 002e 0000 6369 706d     nor icmp....icmp
   116e8:	203a 6f6e 2074 6369 706d 6520 6863 2e6f     : not icmp echo.
   116f8:	0000 0000 6475 3a70 6220 6461 6320 6568     ....udp: bad che
   11708:	6b63 7573 2e6d 0000 6475 3a70 6e20 206f     cksum...udp: no 
   11718:	616d 6374 6968 676e 6320 6e6f 656e 7463     matching connect
   11728:	6f69 206e 6f66 6e75 0064 0000 6374 3a70     ion found...tcp:
   11738:	6220 6461 6320 6568 6b63 7573 2e6d 0000      bad checksum...
   11748:	6374 3a70 6720 746f 7220 7365 7465 202c     tcp: got reset, 
   11758:	6261 726f 6974 676e 6320 6e6f 656e 7463     aborting connect
   11768:	6f69 2e6e 0000 0000 6975 2070 7069 735f     ion.....uip ip_s
   11778:	6e65 5f64 6f6e 656c 3a6e 6320 6b68 6365     end_nolen: chkec
   11788:	6d75 3020 2578 3430 0a78 0000 6553 646e     um 0x%04x...Send
   11798:	6e69 2067 6170 6b63 7465 7720 7469 2068     ing packet with 
   117a8:	656c 676e 6874 2520 2064 2528 2964 000a     length %d (%d)..
   117b8:	6374 3a70 6620 756f 646e 6e20 206f 6e75     tcp: found no un
   117c8:	7375 6465 6320 6e6f 656e 7463 6f69 736e     used connections
   117d8:	002e 0000                                   ....

000117dc <broadcast_ethaddr>:
   117dc:	ffff ffff ffff 0000 2e2e 752f 6273 642f     ........../usb/d
   117ec:	7665 6369 2f65 7375 6462 2e63 0063 0000     evice/usbdc.c...
   117fc:	754d 746c 5369 6e65 6573 6120 7070 696c     MultiSense appli
   1180c:	6163 6974 6e6f 615f 7070 6163 6c6c 2928     cation_appcall()
   1181c:	0a0d 0000 754d 746c 5369 6e65 6573 6120     ....MultiSense a
   1182c:	7070 696c 6163 6974 6e6f 695f 696e 2874     pplication_init(
   1183c:	0d29 000a 754d 746c 5369 6e65 6573 7420     )...MultiSense t
   1184c:	7063 7069 6f5f 7475 7570 2874 0d29 000a     cpip_output()...
   1185c:	754d 746c 5369 6e65 6573 7520 5049 6c20     MultiSense uIP l
   1186c:	676f 2d20 3e2d 5b20 7325 0d5d 000a 0000     og --> [%s].....

0001187c <__sf_fake_stderr>:
	...

0001189c <__sf_fake_stdin>:
	...

000118bc <__sf_fake_stdout>:
	...
   118dc:	6c68 004c 18fe 0001 1901 0001 1904 0001     hlL.............
   118ec:	2d41 6146 662d 3938 3130 3332 3534 3736     A-Fa-f8901234567
   118fc:	005d 2d2b 3000 0030 5878 4300 5000 534f     ].+-.00.xX.C.POS
   1190c:	5849 2e00 0000                                   IX...

00011911 <_ctype_>:
   11911:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   11921:	2020 2020 2020 2020 2020 2020 2020 2020                     
   11931:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   11941:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   11951:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   11961:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   11971:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   11981:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   11991:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

00011a14 <_init>:
   11a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11a16:	bf00      	nop
   11a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
   11a1a:	bc08      	pop	{r3}
   11a1c:	469e      	mov	lr, r3
   11a1e:	4770      	bx	lr

00011a20 <__init_array_start>:
   11a20:	00000289 	.word	0x00000289

00011a24 <_fini>:
   11a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11a26:	bf00      	nop
   11a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
   11a2a:	bc08      	pop	{r3}
   11a2c:	469e      	mov	lr, r3
   11a2e:	4770      	bx	lr

00011a30 <__fini_array_start>:
   11a30:	00000265 	.word	0x00000265
