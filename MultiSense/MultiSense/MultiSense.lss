
MultiSense.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000f528  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000002b0  20000000  0000f528  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  000202b0  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  000202b0  2**0
                  CONTENTS
  4 .bss          00008df8  200002c0  0000f800  000202c0  2**5
                  ALLOC
  5 .stack        0000c000  200090b8  000185f8  000202c0  2**0
                  ALLOC
  6 .ARM.attributes 0000002a  00000000  00000000  000202b0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000202da  2**0
                  CONTENTS, READONLY
  8 .debug_info   0007a699  00000000  00000000  00020333  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000a57b  00000000  00000000  0009a9cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00024d3f  00000000  00000000  000a4f47  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001ca0  00000000  00000000  000c9c86  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003ab0  00000000  00000000  000cb926  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00041c49  00000000  00000000  000cf3d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00033a56  00000000  00000000  0011101f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0011a452  00000000  00000000  00144a75  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005b30  00000000  00000000  0025eec8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	b8 50 01 20 41 0a 00 00 3d 0a 00 00 3d 0a 00 00     .P. A...=...=...
      10:	3d 0a 00 00 3d 0a 00 00 3d 0a 00 00 00 00 00 00     =...=...=.......
	...
      2c:	3d 0a 00 00 3d 0a 00 00 00 00 00 00 3d 0a 00 00     =...=.......=...
      3c:	3d 0a 00 00 3d 0a 00 00 3d 0a 00 00 3d 0a 00 00     =...=...=...=...
      4c:	3d 0a 00 00 3d 0a 00 00 3d 0a 00 00 3d 0a 00 00     =...=...=...=...
      5c:	3d 0a 00 00 3d 0a 00 00 3d 0a 00 00 3d 0a 00 00     =...=...=...=...
      6c:	3d 0a 00 00 3d 0a 00 00 3d 0a 00 00 3d 0a 00 00     =...=...=...=...
      7c:	3d 0a 00 00 3d 0a 00 00 3d 0a 00 00 3d 0a 00 00     =...=...=...=...
      8c:	3d 0a 00 00 3d 0a 00 00 3d 0a 00 00 3d 0a 00 00     =...=...=...=...
      9c:	3d 0a 00 00 3d 0a 00 00 3d 0a 00 00 3d 0a 00 00     =...=...=...=...
      ac:	3d 0a 00 00 3d 0a 00 00 b9 2c 00 00 8d 2c 00 00     =...=....,...,..
      bc:	85 25 00 00 8d 25 00 00 95 25 00 00 9d 25 00 00     .%...%...%...%..
      cc:	a5 25 00 00 3d 0a 00 00 3d 0a 00 00 3d 0a 00 00     .%..=...=...=...
      dc:	3d 0a 00 00 3d 0a 00 00 3d 0a 00 00 3d 0a 00 00     =...=...=...=...
      ec:	3d 0a 00 00 00 00 00 00 81 2d 00 00 dd 30 00 00     =........-...0..
      fc:	d5 30 00 00 cd 30 00 00 bd 30 00 00 3d 0a 00 00     .0...0...0..=...
     10c:	3d 0a 00 00 3d 0a 00 00 3d 0a 00 00 3d 0a 00 00     =...=...=...=...
     11c:	3d 0a 00 00 3d 0a 00 00 3d 0a 00 00 3d 0a 00 00     =...=...=...=...
     12c:	3d 0a 00 00 3d 0a 00 00 3d 0a 00 00 3d 0a 00 00     =...=...=...=...
     13c:	3d 0a 00 00 3d 0a 00 00 3d 0a 00 00 05 31 00 00     =...=...=....1..
     14c:	fd 30 00 00 f5 30 00 00 e5 30 00 00 3d 0a 00 00     .0...0...0..=...
     15c:	3d 0a 00 00 3d 0a 00 00 3d 0a 00 00 3d 0a 00 00     =...=...=...=...
     16c:	3d 0a 00 00 3d 0a 00 00 3d 0a 00 00 00 00 00 00     =...=...=.......
     17c:	00 00 00 00 99 41 00 00 a1 41 00 00 a9 41 00 00     .....A...A...A..
     18c:	b1 41 00 00 d9 25 00 00 3d 0a 00 00 3d 0a 00 00     .A...%..=...=...
     19c:	3d 0a 00 00 3d 0a 00 00 3d 0a 00 00 3d 0a 00 00     =...=...=...=...
     1ac:	3d 0a 00 00 3d 0a 00 00 3d 0a 00 00 3d 0a 00 00     =...=...=...=...
     1bc:	3d 0a 00 00 3d 0a 00 00 3d 0a 00 00 3d 0a 00 00     =...=...=...=...
     1cc:	3d 0a 00 00 3d 0a 00 00 3d 0a 00 00 3d 0a 00 00     =...=...=...=...
     1dc:	3d 0a 00 00 3d 0a 00 00 3d 0a 00 00 3d 0a 00 00     =...=...=...=...
     1ec:	31 33 00 00 3d 0a 00 00 3d 0a 00 00 3d 0a 00 00     13..=...=...=...
     1fc:	3d 0a 00 00 3d 0a 00 00 3d 0a 00 00 3d 0a 00 00     =...=...=...=...
     20c:	3d 0a 00 00 3d 0a 00 00 3d 0a 00 00 3d 0a 00 00     =...=...=...=...
     21c:	3d 0a 00 00 3d 0a 00 00 3d 0a 00 00 3d 0a 00 00     =...=...=...=...
     22c:	3d 0a 00 00 3d 0a 00 00 3d 0a 00 00 3d 0a 00 00     =...=...=...=...
     23c:	3d 0a 00 00 3d 0a 00 00 3d 0a 00 00 3d 0a 00 00     =...=...=...=...
     24c:	3d 0a 00 00 3d 0a 00 00 3d 0a 00 00 3d 0a 00 00     =...=...=...=...
     25c:	3d 0a 00 00 3d 0a 00 00                             =...=...

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	200002c0 	.word	0x200002c0
     280:	00000000 	.word	0x00000000
     284:	0000f528 	.word	0x0000f528

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0000f528 	.word	0x0000f528
     2c4:	200002c4 	.word	0x200002c4
     2c8:	0000f528 	.word	0x0000f528
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b510      	push	{r4, lr}
	system_init();
     2d2:	4b04      	ldr	r3, [pc, #16]	; (2e4 <atmel_start_init+0x14>)
     2d4:	4798      	blx	r3
	usb_init();
     2d6:	4b04      	ldr	r3, [pc, #16]	; (2e8 <atmel_start_init+0x18>)
     2d8:	4798      	blx	r3
	persistent_storage_init();
     2da:	4b04      	ldr	r3, [pc, #16]	; (2ec <atmel_start_init+0x1c>)
}
     2dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	persistent_storage_init();
     2e0:	4718      	bx	r3
     2e2:	bf00      	nop
     2e4:	00000f75 	.word	0x00000f75
     2e8:	0000b10d 	.word	0x0000b10d
     2ec:	00009181 	.word	0x00009181

000002f0 <convert>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: Function to format [vargs]
// Returns:     formatted string ptr
// *****************************************************************************************************************************************************************
static char *convert(unsigned int num, int base)
{
     2f0:	4603      	mov	r3, r0
	static char		Representation[]= "0123456789ABCDEF";
	static char		buffer[50];
	char		   *ptr;
	
	ptr = &buffer[49];
	*ptr = '\0';
     2f2:	4808      	ldr	r0, [pc, #32]	; (314 <convert+0x24>)
     2f4:	2200      	movs	r2, #0
{
     2f6:	b510      	push	{r4, lr}
	*ptr = '\0';
     2f8:	f800 2f31 	strb.w	r2, [r0, #49]!
	
	do {
		*--ptr = Representation[num%base];
     2fc:	4c06      	ldr	r4, [pc, #24]	; (318 <convert+0x28>)
     2fe:	fbb3 f2f1 	udiv	r2, r3, r1
     302:	fb01 3312 	mls	r3, r1, r2, r3
     306:	5ce3      	ldrb	r3, [r4, r3]
     308:	f800 3d01 	strb.w	r3, [r0, #-1]!
		num /= base;
	} while(num != 0);
     30c:	4613      	mov	r3, r2
     30e:	2a00      	cmp	r2, #0
     310:	d1f5      	bne.n	2fe <convert+0xe>
	
	return ptr;
}
     312:	bd10      	pop	{r4, pc}
     314:	200002dc 	.word	0x200002dc
     318:	0000bfe8 	.word	0x0000bfe8

0000031c <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
     31c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
     31e:	4b0e      	ldr	r3, [pc, #56]	; (358 <gpio_get_pin_level+0x3c>)
     320:	4605      	mov	r5, r0
     322:	a801      	add	r0, sp, #4
     324:	4798      	blx	r3
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
     326:	096b      	lsrs	r3, r5, #5
     328:	490c      	ldr	r1, [pc, #48]	; (35c <gpio_get_pin_level+0x40>)
     32a:	01db      	lsls	r3, r3, #7
     32c:	18ca      	adds	r2, r1, r3
     32e:	58c9      	ldr	r1, [r1, r3]
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Port *)hw)->Group[submodule_index].IN.reg;
     330:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
     332:	6914      	ldr	r4, [r2, #16]

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
     334:	405c      	eors	r4, r3
     336:	400c      	ands	r4, r1

	CRITICAL_SECTION_LEAVE();
     338:	a801      	add	r0, sp, #4
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
     33a:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
     33c:	4b08      	ldr	r3, [pc, #32]	; (360 <gpio_get_pin_level+0x44>)
     33e:	4798      	blx	r3
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
     340:	f005 051f 	and.w	r5, r5, #31
     344:	2301      	movs	r3, #1
     346:	fa03 f505 	lsl.w	r5, r3, r5
     34a:	4225      	tst	r5, r4
}
     34c:	bf14      	ite	ne
     34e:	4618      	movne	r0, r3
     350:	2000      	moveq	r0, #0
     352:	b003      	add	sp, #12
     354:	bd30      	pop	{r4, r5, pc}
     356:	bf00      	nop
     358:	000011a5 	.word	0x000011a5
     35c:	41008000 	.word	0x41008000
     360:	000011b3 	.word	0x000011b3

00000364 <wdt_feed.constprop.0>:
 *
 * \param[in] wdt The pointer to the HAL WDT instance.
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 */
static inline int32_t wdt_feed(struct wdt_descriptor *const wdt)
     364:	b510      	push	{r4, lr}
{
	ASSERT(wdt && wdt->dev.hw);
     366:	4c07      	ldr	r4, [pc, #28]	; (384 <wdt_feed.constprop.0+0x20>)
     368:	4b07      	ldr	r3, [pc, #28]	; (388 <wdt_feed.constprop.0+0x24>)
     36a:	6820      	ldr	r0, [r4, #0]
     36c:	4907      	ldr	r1, [pc, #28]	; (38c <wdt_feed.constprop.0+0x28>)
     36e:	3000      	adds	r0, #0
     370:	bf18      	it	ne
     372:	2001      	movne	r0, #1
     374:	22a9      	movs	r2, #169	; 0xa9
     376:	4798      	blx	r3

	return _wdt_feed(&wdt->dev);
     378:	4620      	mov	r0, r4
     37a:	4b05      	ldr	r3, [pc, #20]	; (390 <wdt_feed.constprop.0+0x2c>)
}
     37c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return _wdt_feed(&wdt->dev);
     380:	4718      	bx	r3
     382:	bf00      	nop
     384:	20007470 	.word	0x20007470
     388:	00001fdd 	.word	0x00001fdd
     38c:	0000bff9 	.word	0x0000bff9
     390:	00004345 	.word	0x00004345

00000394 <xprintf>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: Function to format and write the debug/info to the standard stream IO
// Returns:     Nothing
// *****************************************************************************************************************************************************************
void xprintf(char* format, ...) 
{ 
     394:	b40f      	push	{r0, r1, r2, r3}
     396:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     398:	ab08      	add	r3, sp, #32
	va_start(arg, format); 
	
	for (traverse = format; *traverse; traverse++) 
	{ 
	    if (*traverse != '%') {
			while (!usart_async_is_tx_empty(&USART_1)) {}
     39a:	4c53      	ldr	r4, [pc, #332]	; (4e8 <xprintf+0x154>)
{ 
     39c:	f853 6b04 	ldr.w	r6, [r3], #4
			while (!usart_async_is_tx_empty(&USART_1)) {}
     3a0:	4d52      	ldr	r5, [pc, #328]	; (4ec <xprintf+0x158>)
	va_start(arg, format); 
     3a2:	9301      	str	r3, [sp, #4]
	for (traverse = format; *traverse; traverse++) 
     3a4:	7833      	ldrb	r3, [r6, #0]
     3a6:	b923      	cbnz	r3, 3b2 <xprintf+0x1e>
			}	
		}
	} 
	
	va_end(arg); 
} 
     3a8:	b003      	add	sp, #12
     3aa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
     3ae:	b004      	add	sp, #16
     3b0:	4770      	bx	lr
	    if (*traverse != '%') {
     3b2:	2b25      	cmp	r3, #37	; 0x25
     3b4:	d010      	beq.n	3d8 <xprintf+0x44>
			while (!usart_async_is_tx_empty(&USART_1)) {}
     3b6:	4620      	mov	r0, r4
     3b8:	47a8      	blx	r5
     3ba:	2800      	cmp	r0, #0
     3bc:	d0fb      	beq.n	3b6 <xprintf+0x22>
			io_write((struct io_descriptor *const)io, (const uint8_t *const)traverse, 1);
     3be:	4b4c      	ldr	r3, [pc, #304]	; (4f0 <xprintf+0x15c>)
     3c0:	2201      	movs	r2, #1
     3c2:	6818      	ldr	r0, [r3, #0]
     3c4:	4b4b      	ldr	r3, [pc, #300]	; (4f4 <xprintf+0x160>)
     3c6:	4631      	mov	r1, r6
     3c8:	4798      	blx	r3
			while (!usart_async_is_tx_empty(&USART_1)) {}
     3ca:	4620      	mov	r0, r4
     3cc:	47a8      	blx	r5
     3ce:	2800      	cmp	r0, #0
     3d0:	d0fb      	beq.n	3ca <xprintf+0x36>
     3d2:	4637      	mov	r7, r6
	for (traverse = format; *traverse; traverse++) 
     3d4:	1c7e      	adds	r6, r7, #1
     3d6:	e7e5      	b.n	3a4 <xprintf+0x10>
			switch (*traverse)  { 
     3d8:	7873      	ldrb	r3, [r6, #1]
     3da:	2b6f      	cmp	r3, #111	; 0x6f
			traverse++; 
     3dc:	f106 0701 	add.w	r7, r6, #1
			switch (*traverse)  { 
     3e0:	d052      	beq.n	488 <xprintf+0xf4>
     3e2:	d81d      	bhi.n	420 <xprintf+0x8c>
     3e4:	2b63      	cmp	r3, #99	; 0x63
     3e6:	d039      	beq.n	45c <xprintf+0xc8>
     3e8:	2b64      	cmp	r3, #100	; 0x64
     3ea:	d1f3      	bne.n	3d4 <xprintf+0x40>
				case 'd' : i = va_arg(arg,int);
     3ec:	9b01      	ldr	r3, [sp, #4]
						s = convert(i, 10);
     3ee:	210a      	movs	r1, #10
				case 'd' : i = va_arg(arg,int);
     3f0:	1d1a      	adds	r2, r3, #4
						s = convert(i, 10);
     3f2:	6818      	ldr	r0, [r3, #0]
     3f4:	4b40      	ldr	r3, [pc, #256]	; (4f8 <xprintf+0x164>)
				case 'd' : i = va_arg(arg,int);
     3f6:	9201      	str	r2, [sp, #4]
						s = convert(i, 10);
     3f8:	4798      	blx	r3
     3fa:	4606      	mov	r6, r0
						while (!usart_async_is_tx_empty(&USART_1)) {}
     3fc:	4620      	mov	r0, r4
     3fe:	47a8      	blx	r5
     400:	2800      	cmp	r0, #0
     402:	d0fb      	beq.n	3fc <xprintf+0x68>
						io_write((struct io_descriptor *const)io, (const uint8_t *const)s, strlen(s));
     404:	4b3d      	ldr	r3, [pc, #244]	; (4fc <xprintf+0x168>)
     406:	4630      	mov	r0, r6
     408:	4798      	blx	r3
     40a:	4b39      	ldr	r3, [pc, #228]	; (4f0 <xprintf+0x15c>)
     40c:	b282      	uxth	r2, r0
     40e:	4631      	mov	r1, r6
     410:	6818      	ldr	r0, [r3, #0]
     412:	4b38      	ldr	r3, [pc, #224]	; (4f4 <xprintf+0x160>)
     414:	4798      	blx	r3
						while (!usart_async_is_tx_empty(&USART_1)) {}
     416:	4620      	mov	r0, r4
     418:	47a8      	blx	r5
     41a:	2800      	cmp	r0, #0
     41c:	d0fb      	beq.n	416 <xprintf+0x82>
     41e:	e7d9      	b.n	3d4 <xprintf+0x40>
			switch (*traverse)  { 
     420:	2b73      	cmp	r3, #115	; 0x73
     422:	d04b      	beq.n	4bc <xprintf+0x128>
     424:	2b78      	cmp	r3, #120	; 0x78
     426:	d1d5      	bne.n	3d4 <xprintf+0x40>
				case 'x': i = va_arg(arg,unsigned int);
     428:	9b01      	ldr	r3, [sp, #4]
						s = convert(i, 16);
     42a:	2110      	movs	r1, #16
				case 'x': i = va_arg(arg,unsigned int);
     42c:	1d1a      	adds	r2, r3, #4
						s = convert(i, 16);
     42e:	6818      	ldr	r0, [r3, #0]
     430:	4b31      	ldr	r3, [pc, #196]	; (4f8 <xprintf+0x164>)
				case 'x': i = va_arg(arg,unsigned int);
     432:	9201      	str	r2, [sp, #4]
						s = convert(i, 16);
     434:	4798      	blx	r3
     436:	4606      	mov	r6, r0
						while (!usart_async_is_tx_empty(&USART_1)) {}
     438:	4620      	mov	r0, r4
     43a:	47a8      	blx	r5
     43c:	2800      	cmp	r0, #0
     43e:	d0fb      	beq.n	438 <xprintf+0xa4>
						io_write((struct io_descriptor *const)io, (const uint8_t *const)s, strlen(s));
     440:	4b2e      	ldr	r3, [pc, #184]	; (4fc <xprintf+0x168>)
     442:	4630      	mov	r0, r6
     444:	4798      	blx	r3
     446:	4b2a      	ldr	r3, [pc, #168]	; (4f0 <xprintf+0x15c>)
     448:	b282      	uxth	r2, r0
     44a:	4631      	mov	r1, r6
     44c:	6818      	ldr	r0, [r3, #0]
     44e:	4b29      	ldr	r3, [pc, #164]	; (4f4 <xprintf+0x160>)
     450:	4798      	blx	r3
						while (!usart_async_is_tx_empty(&USART_1)) {}
     452:	4620      	mov	r0, r4
     454:	47a8      	blx	r5
     456:	2800      	cmp	r0, #0
     458:	d0fb      	beq.n	452 <xprintf+0xbe>
     45a:	e7bb      	b.n	3d4 <xprintf+0x40>
				case 'c' : i = va_arg(arg, int);
     45c:	9b01      	ldr	r3, [sp, #4]
     45e:	1d1a      	adds	r2, r3, #4
						temp = (char)i;
     460:	681b      	ldr	r3, [r3, #0]
				case 'c' : i = va_arg(arg, int);
     462:	9201      	str	r2, [sp, #4]
						temp = (char)i;
     464:	f88d 3003 	strb.w	r3, [sp, #3]
						while (!usart_async_is_tx_empty(&USART_1)) {}
     468:	4620      	mov	r0, r4
     46a:	47a8      	blx	r5
     46c:	2800      	cmp	r0, #0
     46e:	d0fb      	beq.n	468 <xprintf+0xd4>
						io_write((struct io_descriptor *const)io, (const uint8_t *const)&temp, 1);
     470:	4b1f      	ldr	r3, [pc, #124]	; (4f0 <xprintf+0x15c>)
     472:	2201      	movs	r2, #1
     474:	6818      	ldr	r0, [r3, #0]
     476:	4b1f      	ldr	r3, [pc, #124]	; (4f4 <xprintf+0x160>)
     478:	f10d 0103 	add.w	r1, sp, #3
     47c:	4798      	blx	r3
						while (!usart_async_is_tx_empty(&USART_1)) {}
     47e:	4620      	mov	r0, r4
     480:	47a8      	blx	r5
     482:	2800      	cmp	r0, #0
     484:	d0fb      	beq.n	47e <xprintf+0xea>
     486:	e7a5      	b.n	3d4 <xprintf+0x40>
				case 'o': i = va_arg(arg,unsigned int);
     488:	9b01      	ldr	r3, [sp, #4]
						s = convert(i, 8);
     48a:	2108      	movs	r1, #8
				case 'o': i = va_arg(arg,unsigned int);
     48c:	1d1a      	adds	r2, r3, #4
						s = convert(i, 8);
     48e:	6818      	ldr	r0, [r3, #0]
     490:	4b19      	ldr	r3, [pc, #100]	; (4f8 <xprintf+0x164>)
				case 'o': i = va_arg(arg,unsigned int);
     492:	9201      	str	r2, [sp, #4]
						s = convert(i, 8);
     494:	4798      	blx	r3
     496:	4606      	mov	r6, r0
						while (!usart_async_is_tx_empty(&USART_1)) {}
     498:	4620      	mov	r0, r4
     49a:	47a8      	blx	r5
     49c:	2800      	cmp	r0, #0
     49e:	d0fb      	beq.n	498 <xprintf+0x104>
						io_write((struct io_descriptor *const)io, (const uint8_t *const)s, strlen(s));
     4a0:	4b16      	ldr	r3, [pc, #88]	; (4fc <xprintf+0x168>)
     4a2:	4630      	mov	r0, r6
     4a4:	4798      	blx	r3
     4a6:	4b12      	ldr	r3, [pc, #72]	; (4f0 <xprintf+0x15c>)
     4a8:	b282      	uxth	r2, r0
     4aa:	4631      	mov	r1, r6
     4ac:	6818      	ldr	r0, [r3, #0]
     4ae:	4b11      	ldr	r3, [pc, #68]	; (4f4 <xprintf+0x160>)
     4b0:	4798      	blx	r3
						while (!usart_async_is_tx_empty(&USART_1)) {}
     4b2:	4620      	mov	r0, r4
     4b4:	47a8      	blx	r5
     4b6:	2800      	cmp	r0, #0
     4b8:	d0fb      	beq.n	4b2 <xprintf+0x11e>
     4ba:	e78b      	b.n	3d4 <xprintf+0x40>
				case 's': s = va_arg(arg,char *);
     4bc:	9b01      	ldr	r3, [sp, #4]
     4be:	1d1a      	adds	r2, r3, #4
     4c0:	681e      	ldr	r6, [r3, #0]
     4c2:	9201      	str	r2, [sp, #4]
						while (!usart_async_is_tx_empty(&USART_1)) {}
     4c4:	4620      	mov	r0, r4
     4c6:	47a8      	blx	r5
     4c8:	2800      	cmp	r0, #0
     4ca:	d0fb      	beq.n	4c4 <xprintf+0x130>
						io_write((struct io_descriptor *const)io, (const uint8_t *const)s, strlen(s));
     4cc:	4b0b      	ldr	r3, [pc, #44]	; (4fc <xprintf+0x168>)
     4ce:	4630      	mov	r0, r6
     4d0:	4798      	blx	r3
     4d2:	4b07      	ldr	r3, [pc, #28]	; (4f0 <xprintf+0x15c>)
     4d4:	b282      	uxth	r2, r0
     4d6:	4631      	mov	r1, r6
     4d8:	6818      	ldr	r0, [r3, #0]
     4da:	4b06      	ldr	r3, [pc, #24]	; (4f4 <xprintf+0x160>)
     4dc:	4798      	blx	r3
						while (!usart_async_is_tx_empty(&USART_1)) {}
     4de:	4620      	mov	r0, r4
     4e0:	47a8      	blx	r5
     4e2:	2800      	cmp	r0, #0
     4e4:	d0fb      	beq.n	4de <xprintf+0x14a>
     4e6:	e775      	b.n	3d4 <xprintf+0x40>
     4e8:	200074d8 	.word	0x200074d8
     4ec:	00001ac5 	.word	0x00001ac5
     4f0:	20007f08 	.word	0x20007f08
     4f4:	000014ed 	.word	0x000014ed
     4f8:	000002f1 	.word	0x000002f1
     4fc:	0000b3ad 	.word	0x0000b3ad

00000500 <read_boardvalues>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: read and access all main board hardware such as I2C and GPIO to collate a live snapshot of plugged-in cards and sensors
// Returns:     Nothing
// *****************************************************************************************************************************************************************
void read_boardvalues(void)
{
     500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int		err, counter_det;
	
	if (read_hardware_index == 0) {
     504:	4d96      	ldr	r5, [pc, #600]	; (760 <read_boardvalues+0x260>)
     506:	782e      	ldrb	r6, [r5, #0]
{
     508:	b08b      	sub	sp, #44	; 0x2c
	if (read_hardware_index == 0) {
     50a:	2e00      	cmp	r6, #0
     50c:	f040 80a3 	bne.w	656 <read_boardvalues+0x156>
}

static inline void hri_adc_write_INPUTCTRL_reg(const void *const hw, hri_adc_inputctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->INPUTCTRL.reg = data;
     510:	4b94      	ldr	r3, [pc, #592]	; (764 <read_boardvalues+0x264>)
		hri_adc_write_INPUTCTRL_reg(ADC0, 0x1800 + 0);	/* Select AIN<0> - [Water 1] Analogue Input */
		delay_ms(2);
	
		/* Read the ADC value of the first water sensor. If bad result write error debug and set variable to 0xFF */
		err = adc_sync_read_channel(&ADC_0, 0, (uint8_t *const)&readdata_water1, 1);
     512:	4f95      	ldr	r7, [pc, #596]	; (768 <read_boardvalues+0x268>)
     514:	4c95      	ldr	r4, [pc, #596]	; (76c <read_boardvalues+0x26c>)
     516:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
     51a:	809a      	strh	r2, [r3, #4]
		delay_ms(2);
     51c:	2002      	movs	r0, #2
     51e:	4b94      	ldr	r3, [pc, #592]	; (770 <read_boardvalues+0x270>)
     520:	4798      	blx	r3
		err = adc_sync_read_channel(&ADC_0, 0, (uint8_t *const)&readdata_water1, 1);
     522:	2301      	movs	r3, #1
     524:	463a      	mov	r2, r7
     526:	4631      	mov	r1, r6
     528:	4892      	ldr	r0, [pc, #584]	; (774 <read_boardvalues+0x274>)
     52a:	47a0      	blx	r4
		if (err != 1) {
     52c:	2801      	cmp	r0, #1
		err = adc_sync_read_channel(&ADC_0, 0, (uint8_t *const)&readdata_water1, 1);
     52e:	4604      	mov	r4, r0
		if (err != 1) {
     530:	d003      	beq.n	53a <read_boardvalues+0x3a>
			xprintf("Could NOT read from the water detector 1\r\n");
     532:	4891      	ldr	r0, [pc, #580]	; (778 <read_boardvalues+0x278>)
     534:	4b91      	ldr	r3, [pc, #580]	; (77c <read_boardvalues+0x27c>)
     536:	4798      	blx	r3
	
			readdata_water1 = 0;
     538:	703e      	strb	r6, [r7, #0]
		}
		
		read_hardware_index = 1;
     53a:	2301      	movs	r3, #1
			xprintf("Could NOT read from the moisture & temp sensor on CARDB:I2C [%i]\r\n", err);
		
			memset(&readdata_tempmoisture, 0xFF, 4);
		}
		
		read_hardware_index = 0;
     53c:	702b      	strb	r3, [r5, #0]
	}

	/* Read the main simple GPIO inputs for determining the status of tamper, daughter cards */ 
	tamper = (gpio_get_pin_level(PB02_TAMP_OP)) ? 1 : 0;
     53e:	2022      	movs	r0, #34	; 0x22
     540:	4d8f      	ldr	r5, [pc, #572]	; (780 <read_boardvalues+0x280>)
     542:	4f90      	ldr	r7, [pc, #576]	; (784 <read_boardvalues+0x284>)
	cardA_present = (gpio_get_pin_level(PC00_CARDA_PRESENT)) ? 0 : 1;
     544:	4e90      	ldr	r6, [pc, #576]	; (788 <read_boardvalues+0x288>)
	tamper = (gpio_get_pin_level(PB02_TAMP_OP)) ? 1 : 0;
     546:	47a8      	blx	r5
     548:	7038      	strb	r0, [r7, #0]
	cardA_present = (gpio_get_pin_level(PC00_CARDA_PRESENT)) ? 0 : 1;
     54a:	2040      	movs	r0, #64	; 0x40
     54c:	47a8      	blx	r5
     54e:	f080 0001 	eor.w	r0, r0, #1
     552:	7030      	strb	r0, [r6, #0]
	cardB_present = (gpio_get_pin_level(PC01_CARDB_PRESENT)) ? 0 : 1;
     554:	2041      	movs	r0, #65	; 0x41
     556:	47a8      	blx	r5
     558:	4d8c      	ldr	r5, [pc, #560]	; (78c <read_boardvalues+0x28c>)

	/* If tamper switch is closed and the enclosure lid is correct, then the LEDs do not illuminate. Else show the ETH and PWR LEDs according to the system state */
	if (tamper) {
     55a:	7839      	ldrb	r1, [r7, #0]
     55c:	9702      	str	r7, [sp, #8]
	cardB_present = (gpio_get_pin_level(PC01_CARDB_PRESENT)) ? 0 : 1;
     55e:	f080 0001 	eor.w	r0, r0, #1
     562:	7028      	strb	r0, [r5, #0]
     564:	4b8a      	ldr	r3, [pc, #552]	; (790 <read_boardvalues+0x290>)
     566:	2210      	movs	r2, #16
	if (tamper) {
     568:	2900      	cmp	r1, #0
     56a:	f000 80c1 	beq.w	6f0 <read_boardvalues+0x1f0>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     56e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	} else {
		gpio_set_pin_level(PB04_LED_PWR, 0);
	}

	/* Read the status of the two LEFT and RIGHT main Ethernet ports, along with the T-junction Power & Ethernet adapter channel */
	link_port1 = (readKSZreg(SPI_KSZ8794_PORT1STATUS2) & 0x20) ? 1 : 0;
     572:	4f88      	ldr	r7, [pc, #544]	; (794 <read_boardvalues+0x294>)
     574:	f8df 9280 	ldr.w	r9, [pc, #640]	; 7f8 <read_boardvalues+0x2f8>
	link_port2 = (readKSZreg(SPI_KSZ8794_PORT2STATUS2) & 0x20) ? 1 : 0;
     578:	f8df 8280 	ldr.w	r8, [pc, #640]	; 7fc <read_boardvalues+0x2fc>
	link_port1 = (readKSZreg(SPI_KSZ8794_PORT1STATUS2) & 0x20) ? 1 : 0;
     57c:	201e      	movs	r0, #30
     57e:	47b8      	blx	r7
     580:	f3c0 1040 	ubfx	r0, r0, #5, #1
     584:	f889 0000 	strb.w	r0, [r9]
	link_port2 = (readKSZreg(SPI_KSZ8794_PORT2STATUS2) & 0x20) ? 1 : 0;
     588:	202e      	movs	r0, #46	; 0x2e
     58a:	47b8      	blx	r7
     58c:	f3c0 1040 	ubfx	r0, r0, #5, #1
     590:	f888 0000 	strb.w	r0, [r8]
	link_port3 = (readKSZreg(SPI_KSZ8794_PORT3STATUS2) & 0x20) ? 1 : 0;
     594:	203e      	movs	r0, #62	; 0x3e
     596:	47b8      	blx	r7
     598:	4a7f      	ldr	r2, [pc, #508]	; (798 <read_boardvalues+0x298>)

	/* Detect change of status for debug */
	if (tamper != old_tamper) {
     59a:	9b02      	ldr	r3, [sp, #8]
     59c:	f8cd 900c 	str.w	r9, [sp, #12]
	link_port3 = (readKSZreg(SPI_KSZ8794_PORT3STATUS2) & 0x20) ? 1 : 0;
     5a0:	f3c0 1040 	ubfx	r0, r0, #5, #1
     5a4:	7010      	strb	r0, [r2, #0]
	if (tamper != old_tamper) {
     5a6:	7818      	ldrb	r0, [r3, #0]
     5a8:	4b7c      	ldr	r3, [pc, #496]	; (79c <read_boardvalues+0x29c>)
     5aa:	f8cd 8010 	str.w	r8, [sp, #16]
     5ae:	7819      	ldrb	r1, [r3, #0]
     5b0:	9205      	str	r2, [sp, #20]
     5b2:	4281      	cmp	r1, r0
     5b4:	9306      	str	r3, [sp, #24]
     5b6:	d007      	beq.n	5c8 <read_boardvalues+0xc8>
		xprintf("Lid TAMPER [%s]\r\n", (!tamper) ? "GOOD" : "ACTIVE");
     5b8:	4b79      	ldr	r3, [pc, #484]	; (7a0 <read_boardvalues+0x2a0>)
     5ba:	497a      	ldr	r1, [pc, #488]	; (7a4 <read_boardvalues+0x2a4>)
     5bc:	2800      	cmp	r0, #0
     5be:	bf18      	it	ne
     5c0:	4619      	movne	r1, r3
     5c2:	4879      	ldr	r0, [pc, #484]	; (7a8 <read_boardvalues+0x2a8>)
     5c4:	4b6d      	ldr	r3, [pc, #436]	; (77c <read_boardvalues+0x27c>)
     5c6:	4798      	blx	r3
	}

	/* Detect change of status for debug */
	if (link_port1 != old_link_port1) {
     5c8:	4a78      	ldr	r2, [pc, #480]	; (7ac <read_boardvalues+0x2ac>)
     5ca:	9b03      	ldr	r3, [sp, #12]
     5cc:	7811      	ldrb	r1, [r2, #0]
     5ce:	781b      	ldrb	r3, [r3, #0]
     5d0:	9207      	str	r2, [sp, #28]
     5d2:	4299      	cmp	r1, r3
     5d4:	d007      	beq.n	5e6 <read_boardvalues+0xe6>
		xprintf("Left Ethernet [%s]\r\n", (link_port1) ? "GOOD" : "LINKDOWN");
     5d6:	4a76      	ldr	r2, [pc, #472]	; (7b0 <read_boardvalues+0x2b0>)
     5d8:	4972      	ldr	r1, [pc, #456]	; (7a4 <read_boardvalues+0x2a4>)
     5da:	4876      	ldr	r0, [pc, #472]	; (7b4 <read_boardvalues+0x2b4>)
     5dc:	2b00      	cmp	r3, #0
     5de:	bf08      	it	eq
     5e0:	4611      	moveq	r1, r2
     5e2:	4b66      	ldr	r3, [pc, #408]	; (77c <read_boardvalues+0x27c>)
     5e4:	4798      	blx	r3
	}

	/* Detect change of status for debug */
	if (link_port2 != old_link_port2) {
     5e6:	4a74      	ldr	r2, [pc, #464]	; (7b8 <read_boardvalues+0x2b8>)
     5e8:	9b04      	ldr	r3, [sp, #16]
     5ea:	7811      	ldrb	r1, [r2, #0]
     5ec:	781b      	ldrb	r3, [r3, #0]
     5ee:	9208      	str	r2, [sp, #32]
     5f0:	4299      	cmp	r1, r3
     5f2:	d007      	beq.n	604 <read_boardvalues+0x104>
		xprintf("Right Ethernet [%s]\r\n", (link_port2) ? "GOOD" : "LINKDOWN");
     5f4:	4a6e      	ldr	r2, [pc, #440]	; (7b0 <read_boardvalues+0x2b0>)
     5f6:	496b      	ldr	r1, [pc, #428]	; (7a4 <read_boardvalues+0x2a4>)
     5f8:	4870      	ldr	r0, [pc, #448]	; (7bc <read_boardvalues+0x2bc>)
     5fa:	2b00      	cmp	r3, #0
     5fc:	bf08      	it	eq
     5fe:	4611      	moveq	r1, r2
     600:	4b5e      	ldr	r3, [pc, #376]	; (77c <read_boardvalues+0x27c>)
     602:	4798      	blx	r3
	}

	/* Detect change of status for debug */
	if (link_port3 != old_link_port3) {
     604:	9b05      	ldr	r3, [sp, #20]
     606:	4a6e      	ldr	r2, [pc, #440]	; (7c0 <read_boardvalues+0x2c0>)
     608:	781b      	ldrb	r3, [r3, #0]
     60a:	7812      	ldrb	r2, [r2, #0]
     60c:	429a      	cmp	r2, r3
     60e:	d007      	beq.n	620 <read_boardvalues+0x120>
		xprintf("Power & Ethernet <Comms Link> [%s]\r\n", (link_port3) ? "GOOD" : "DOWN");
     610:	4a6c      	ldr	r2, [pc, #432]	; (7c4 <read_boardvalues+0x2c4>)
     612:	4964      	ldr	r1, [pc, #400]	; (7a4 <read_boardvalues+0x2a4>)
     614:	486c      	ldr	r0, [pc, #432]	; (7c8 <read_boardvalues+0x2c8>)
     616:	2b00      	cmp	r3, #0
     618:	bf08      	it	eq
     61a:	4611      	moveq	r1, r2
     61c:	4b57      	ldr	r3, [pc, #348]	; (77c <read_boardvalues+0x27c>)
     61e:	4798      	blx	r3
	}

	/* Detect change of status of Slot [A] daughter-card */
	if ((!cardA_old) && (cardA_present)) {
     620:	4a6a      	ldr	r2, [pc, #424]	; (7cc <read_boardvalues+0x2cc>)
     622:	9209      	str	r2, [sp, #36]	; 0x24
     624:	7813      	ldrb	r3, [r2, #0]
     626:	2b00      	cmp	r3, #0
     628:	f040 813a 	bne.w	8a0 <read_boardvalues+0x3a0>
     62c:	7832      	ldrb	r2, [r6, #0]
     62e:	2a00      	cmp	r2, #0
     630:	f000 8136 	beq.w	8a0 <read_boardvalues+0x3a0>
		/* Read the I2C device address on the card to establish type of card */
		
		counter_det = 10;
		while (counter_det--) {
			delay_ms(500);
     634:	f8df a138 	ldr.w	sl, [pc, #312]	; 770 <read_boardvalues+0x270>
			
			/* Kick the watchdog time-out facility */
			wdt_feed(&WDT_0);
     638:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 800 <read_boardvalues+0x300>
			
			if (!(err = I2C_check_deviceID(PC27_CARDA_I2C_SDA, PC28_CARDA_I2C_CLK, 0x60))) {
     63c:	4f64      	ldr	r7, [pc, #400]	; (7d0 <read_boardvalues+0x2d0>)
     63e:	f04f 090b 	mov.w	r9, #11
		while (counter_det--) {
     642:	f1b9 0901 	subs.w	r9, r9, #1
     646:	d156      	bne.n	6f6 <read_boardvalues+0x1f6>
			} else {
				cardA_type = CARD_NOTFITTED;
			}
		}

		if (err < 0) {
     648:	2c00      	cmp	r4, #0
     64a:	da63      	bge.n	714 <read_boardvalues+0x214>
			xprintf("Could not read I2C bus on CARDA for I2C_check_deviceID() [%i]\r\n", err);
     64c:	4621      	mov	r1, r4
     64e:	4861      	ldr	r0, [pc, #388]	; (7d4 <read_boardvalues+0x2d4>)
     650:	4b4a      	ldr	r3, [pc, #296]	; (77c <read_boardvalues+0x27c>)
     652:	4798      	blx	r3
     654:	e05e      	b.n	714 <read_boardvalues+0x214>
	} else if (read_hardware_index == 1) {
     656:	2e01      	cmp	r6, #1
     658:	d117      	bne.n	68a <read_boardvalues+0x18a>
     65a:	4b42      	ldr	r3, [pc, #264]	; (764 <read_boardvalues+0x264>)
		err = adc_sync_read_channel(&ADC_0, 0, (uint8_t *const)&readdata_water2, 1);
     65c:	4f5e      	ldr	r7, [pc, #376]	; (7d8 <read_boardvalues+0x2d8>)
     65e:	4c43      	ldr	r4, [pc, #268]	; (76c <read_boardvalues+0x26c>)
     660:	f641 0202 	movw	r2, #6146	; 0x1802
     664:	809a      	strh	r2, [r3, #4]
		delay_ms(2);
     666:	2002      	movs	r0, #2
     668:	4b41      	ldr	r3, [pc, #260]	; (770 <read_boardvalues+0x270>)
     66a:	4798      	blx	r3
		err = adc_sync_read_channel(&ADC_0, 0, (uint8_t *const)&readdata_water2, 1);
     66c:	4633      	mov	r3, r6
     66e:	463a      	mov	r2, r7
     670:	2100      	movs	r1, #0
     672:	4840      	ldr	r0, [pc, #256]	; (774 <read_boardvalues+0x274>)
     674:	47a0      	blx	r4
		if (err != 1) {
     676:	2801      	cmp	r0, #1
		err = adc_sync_read_channel(&ADC_0, 0, (uint8_t *const)&readdata_water2, 1);
     678:	4604      	mov	r4, r0
		if (err != 1) {
     67a:	d004      	beq.n	686 <read_boardvalues+0x186>
			xprintf("Could NOT read from the water detector 2\r\n");
     67c:	4b3f      	ldr	r3, [pc, #252]	; (77c <read_boardvalues+0x27c>)
     67e:	4857      	ldr	r0, [pc, #348]	; (7dc <read_boardvalues+0x2dc>)
     680:	4798      	blx	r3
			readdata_water2 = 0;
     682:	2300      	movs	r3, #0
     684:	703b      	strb	r3, [r7, #0]
		read_hardware_index = 2;
     686:	2302      	movs	r3, #2
     688:	e758      	b.n	53c <read_boardvalues+0x3c>
	} else if (read_hardware_index == 2) {
     68a:	2e02      	cmp	r6, #2
     68c:	d117      	bne.n	6be <read_boardvalues+0x1be>
     68e:	4b35      	ldr	r3, [pc, #212]	; (764 <read_boardvalues+0x264>)
		err = adc_sync_read_channel(&ADC_0, 0, (uint8_t *const)&highvoltage, 1);
     690:	4c36      	ldr	r4, [pc, #216]	; (76c <read_boardvalues+0x26c>)
     692:	f641 0201 	movw	r2, #6145	; 0x1801
		delay_ms(2);
     696:	4630      	mov	r0, r6
		err = adc_sync_read_channel(&ADC_0, 0, (uint8_t *const)&highvoltage, 1);
     698:	4e51      	ldr	r6, [pc, #324]	; (7e0 <read_boardvalues+0x2e0>)
     69a:	809a      	strh	r2, [r3, #4]
		delay_ms(2);
     69c:	4b34      	ldr	r3, [pc, #208]	; (770 <read_boardvalues+0x270>)
     69e:	4798      	blx	r3
		err = adc_sync_read_channel(&ADC_0, 0, (uint8_t *const)&highvoltage, 1);
     6a0:	2301      	movs	r3, #1
     6a2:	4632      	mov	r2, r6
     6a4:	2100      	movs	r1, #0
     6a6:	4833      	ldr	r0, [pc, #204]	; (774 <read_boardvalues+0x274>)
     6a8:	47a0      	blx	r4
		if (err != 1) {
     6aa:	2801      	cmp	r0, #1
		err = adc_sync_read_channel(&ADC_0, 0, (uint8_t *const)&highvoltage, 1);
     6ac:	4604      	mov	r4, r0
		if (err != 1) {
     6ae:	d004      	beq.n	6ba <read_boardvalues+0x1ba>
			xprintf("Could NOT read from the HV divider\r\n");
     6b0:	4b32      	ldr	r3, [pc, #200]	; (77c <read_boardvalues+0x27c>)
     6b2:	484c      	ldr	r0, [pc, #304]	; (7e4 <read_boardvalues+0x2e4>)
     6b4:	4798      	blx	r3
			highvoltage = 0;
     6b6:	2300      	movs	r3, #0
     6b8:	7033      	strb	r3, [r6, #0]
		read_hardware_index = 3;
     6ba:	2303      	movs	r3, #3
     6bc:	e73e      	b.n	53c <read_boardvalues+0x3c>
		if ((err = I2C_getTEMPandMOISTURE(PB24_CARDB_I2C_SDA,  PB25_CARDB_I2C_CLK, &readdata_tempmoisture[0], &readdata_tempmoisture[1], &readdata_tempmoisture[2], &readdata_tempmoisture[3]) < 0)) {
     6be:	4e4a      	ldr	r6, [pc, #296]	; (7e8 <read_boardvalues+0x2e8>)
     6c0:	4c4a      	ldr	r4, [pc, #296]	; (7ec <read_boardvalues+0x2ec>)
     6c2:	1cb3      	adds	r3, r6, #2
     6c4:	9301      	str	r3, [sp, #4]
     6c6:	1c73      	adds	r3, r6, #1
     6c8:	9300      	str	r3, [sp, #0]
     6ca:	1e72      	subs	r2, r6, #1
     6cc:	4633      	mov	r3, r6
     6ce:	2139      	movs	r1, #57	; 0x39
     6d0:	2038      	movs	r0, #56	; 0x38
     6d2:	47a0      	blx	r4
     6d4:	2800      	cmp	r0, #0
     6d6:	ea4f 74d0 	mov.w	r4, r0, lsr #31
     6da:	da07      	bge.n	6ec <read_boardvalues+0x1ec>
			xprintf("Could NOT read from the moisture & temp sensor on CARDB:I2C [%i]\r\n", err);
     6dc:	4b27      	ldr	r3, [pc, #156]	; (77c <read_boardvalues+0x27c>)
     6de:	4844      	ldr	r0, [pc, #272]	; (7f0 <read_boardvalues+0x2f0>)
     6e0:	2101      	movs	r1, #1
     6e2:	4798      	blx	r3
			memset(&readdata_tempmoisture, 0xFF, 4);
     6e4:	f04f 33ff 	mov.w	r3, #4294967295
     6e8:	f846 3c01 	str.w	r3, [r6, #-1]
		read_hardware_index = 0;
     6ec:	2300      	movs	r3, #0
     6ee:	e725      	b.n	53c <read_boardvalues+0x3c>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     6f0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
     6f4:	e73d      	b.n	572 <read_boardvalues+0x72>
			delay_ms(500);
     6f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     6fa:	47d0      	blx	sl
			wdt_feed(&WDT_0);
     6fc:	47d8      	blx	fp
			if (!(err = I2C_check_deviceID(PC27_CARDA_I2C_SDA, PC28_CARDA_I2C_CLK, 0x60))) {
     6fe:	2260      	movs	r2, #96	; 0x60
     700:	215c      	movs	r1, #92	; 0x5c
     702:	205b      	movs	r0, #91	; 0x5b
     704:	47b8      	blx	r7
     706:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 7f4 <read_boardvalues+0x2f4>
     70a:	4604      	mov	r4, r0
     70c:	b968      	cbnz	r0, 72a <read_boardvalues+0x22a>
				cardA_type = CARD_VIBRATEK;
     70e:	2301      	movs	r3, #1
				cardA_type = CARD_PE;
     710:	f888 3000 	strb.w	r3, [r8]
		}
		
		/* Actions to be taken for each different card type */
		switch (cardA_type) {
     714:	4b37      	ldr	r3, [pc, #220]	; (7f4 <read_boardvalues+0x2f4>)
     716:	4f19      	ldr	r7, [pc, #100]	; (77c <read_boardvalues+0x27c>)
     718:	781b      	ldrb	r3, [r3, #0]
     71a:	3b01      	subs	r3, #1
     71c:	2b04      	cmp	r3, #4
     71e:	d871      	bhi.n	804 <read_boardvalues+0x304>
     720:	e8df f003 	tbb	[pc, r3]
     724:	9a8b8d9c 	.word	0x9a8b8d9c
     728:	ad          	.byte	0xad
     729:	00          	.byte	0x00
			} else if (!(err = I2C_check_deviceID(PC27_CARDA_I2C_SDA, PC28_CARDA_I2C_CLK, 0x50))) {
     72a:	2250      	movs	r2, #80	; 0x50
     72c:	215c      	movs	r1, #92	; 0x5c
     72e:	205b      	movs	r0, #91	; 0x5b
     730:	47b8      	blx	r7
     732:	4604      	mov	r4, r0
     734:	b908      	cbnz	r0, 73a <read_boardvalues+0x23a>
				cardA_type = CARD_PE;
     736:	2305      	movs	r3, #5
     738:	e7ea      	b.n	710 <read_boardvalues+0x210>
			} else if ((!(err = I2C_check_deviceID(PC27_CARDA_I2C_SDA, PC28_CARDA_I2C_CLK, 0x41))) && (!(err = I2C_check_deviceID(PC27_CARDA_I2C_SDA, PC28_CARDA_I2C_CLK, 0x68)))) {
     73a:	2241      	movs	r2, #65	; 0x41
     73c:	215c      	movs	r1, #92	; 0x5c
     73e:	205b      	movs	r0, #91	; 0x5b
     740:	47b8      	blx	r7
     742:	4604      	mov	r4, r0
     744:	b938      	cbnz	r0, 756 <read_boardvalues+0x256>
     746:	2268      	movs	r2, #104	; 0x68
     748:	215c      	movs	r1, #92	; 0x5c
     74a:	205b      	movs	r0, #91	; 0x5b
     74c:	47b8      	blx	r7
     74e:	4604      	mov	r4, r0
     750:	b908      	cbnz	r0, 756 <read_boardvalues+0x256>
				cardA_type = CARD_MINI_IO;
     752:	2302      	movs	r3, #2
     754:	e7dc      	b.n	710 <read_boardvalues+0x210>
				cardA_type = CARD_NOTFITTED;
     756:	2300      	movs	r3, #0
     758:	f888 3000 	strb.w	r3, [r8]
     75c:	e771      	b.n	642 <read_boardvalues+0x142>
     75e:	bf00      	nop
     760:	20007579 	.word	0x20007579
     764:	43001c00 	.word	0x43001c00
     768:	2000853e 	.word	0x2000853e
     76c:	00001071 	.word	0x00001071
     770:	00001225 	.word	0x00001225
     774:	2000746c 	.word	0x2000746c
     778:	0000c027 	.word	0x0000c027
     77c:	00000395 	.word	0x00000395
     780:	0000031d 	.word	0x0000031d
     784:	20007f9b 	.word	0x20007f9b
     788:	2000854c 	.word	0x2000854c
     78c:	2000757a 	.word	0x2000757a
     790:	41008000 	.word	0x41008000
     794:	0000b211 	.word	0x0000b211
     798:	20007575 	.word	0x20007575
     79c:	2000852c 	.word	0x2000852c
     7a0:	0000c017 	.word	0x0000c017
     7a4:	0000c012 	.word	0x0000c012
     7a8:	0000c0e5 	.word	0x0000c0e5
     7ac:	2000757f 	.word	0x2000757f
     7b0:	0000c01e 	.word	0x0000c01e
     7b4:	0000c0f7 	.word	0x0000c0f7
     7b8:	20007570 	.word	0x20007570
     7bc:	0000c10c 	.word	0x0000c10c
     7c0:	2000825c 	.word	0x2000825c
     7c4:	0000d98a 	.word	0x0000d98a
     7c8:	0000c122 	.word	0x0000c122
     7cc:	20007573 	.word	0x20007573
     7d0:	00006021 	.word	0x00006021
     7d4:	0000c147 	.word	0x0000c147
     7d8:	2000852d 	.word	0x2000852d
     7dc:	0000c052 	.word	0x0000c052
     7e0:	20008535 	.word	0x20008535
     7e4:	0000c07d 	.word	0x0000c07d
     7e8:	20007f9e 	.word	0x20007f9e
     7ec:	00005459 	.word	0x00005459
     7f0:	0000c0a2 	.word	0x0000c0a2
     7f4:	20007c57 	.word	0x20007c57
     7f8:	20007571 	.word	0x20007571
     7fc:	20008274 	.word	0x20008274
     800:	00000365 	.word	0x00000365
			case CARD_NOTFITTED:
			default:
			xprintf("CARDA inserted but not identified\r\n");
     804:	486b      	ldr	r0, [pc, #428]	; (9b4 <read_boardvalues+0x4b4>)
			writeKSZreg(SPI_KSZ8794_PORT3CONTROL2, 0x00);
			delay_us(50);
			
			if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL2, 0x00))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL2] not correct\r\n"); }
				
			xprintf("CARDA has been REMOVED\r\n");
     806:	47b8      	blx	r7
		}
	}

	/* Detect change of status of Slot [B] daughter-card */
	if ((!cardB_old) && (cardB_present)) {
     808:	4f6b      	ldr	r7, [pc, #428]	; (9b8 <read_boardvalues+0x4b8>)
     80a:	783b      	ldrb	r3, [r7, #0]
     80c:	2b00      	cmp	r3, #0
     80e:	f040 80c5 	bne.w	99c <read_boardvalues+0x49c>
     812:	782a      	ldrb	r2, [r5, #0]
     814:	2a00      	cmp	r2, #0
     816:	f000 80c1 	beq.w	99c <read_boardvalues+0x49c>
		/* Read the I2C device address on the card to establish type of card */
		
		counter_det = 10;
		while (counter_det--) {
			delay_ms(500);
     81a:	f8df a218 	ldr.w	sl, [pc, #536]	; a34 <read_boardvalues+0x534>
			
			/* Kick the watchdog time-out facility */
			wdt_feed(&WDT_0);
			
			if (!(err = I2C_check_deviceID(PB24_CARDB_I2C_SDA, PB25_CARDB_I2C_CLK, 0x60))) {
     81e:	f8df 9218 	ldr.w	r9, [pc, #536]	; a38 <read_boardvalues+0x538>
     822:	f04f 080b 	mov.w	r8, #11
		while (counter_det--) {
     826:	f1b8 0801 	subs.w	r8, r8, #1
     82a:	d151      	bne.n	8d0 <read_boardvalues+0x3d0>
			} else {
				cardB_type = CARD_NOTFITTED;
			}
		}
		
		if (err < 0) {
     82c:	2c00      	cmp	r4, #0
     82e:	da5e      	bge.n	8ee <read_boardvalues+0x3ee>
			xprintf("Could not read I2C bus on CARDB for I2C_check_deviceID() [%i]\r\n", err);
     830:	4621      	mov	r1, r4
     832:	4862      	ldr	r0, [pc, #392]	; (9bc <read_boardvalues+0x4bc>)
     834:	4b62      	ldr	r3, [pc, #392]	; (9c0 <read_boardvalues+0x4c0>)
     836:	4798      	blx	r3
     838:	e059      	b.n	8ee <read_boardvalues+0x3ee>
			xprintf("CARDA is a MAXI IO\r\n");
     83a:	4862      	ldr	r0, [pc, #392]	; (9c4 <read_boardvalues+0x4c4>)
     83c:	e7e3      	b.n	806 <read_boardvalues+0x306>
			if ((err = I2C_configEXPANDER(PC27_CARDA_I2C_SDA,  PC28_CARDA_I2C_CLK) < 0)) {
     83e:	215c      	movs	r1, #92	; 0x5c
     840:	205b      	movs	r0, #91	; 0x5b
     842:	4b61      	ldr	r3, [pc, #388]	; (9c8 <read_boardvalues+0x4c8>)
     844:	4798      	blx	r3
     846:	2800      	cmp	r0, #0
     848:	ea4f 74d0 	mov.w	r4, r0, lsr #31
     84c:	da02      	bge.n	854 <read_boardvalues+0x354>
				xprintf("Could NOT write to the Mini-IO Expander on CARDA:I2C [%i]\r\n", err);
     84e:	2101      	movs	r1, #1
     850:	485e      	ldr	r0, [pc, #376]	; (9cc <read_boardvalues+0x4cc>)
     852:	47b8      	blx	r7
			xprintf("CARDA is a MINI IO\r\n");
     854:	485e      	ldr	r0, [pc, #376]	; (9d0 <read_boardvalues+0x4d0>)
     856:	e7d6      	b.n	806 <read_boardvalues+0x306>
			xprintf("CARDA is a VIBRAPOINT\r\n");
     858:	485e      	ldr	r0, [pc, #376]	; (9d4 <read_boardvalues+0x4d4>)
     85a:	e7d4      	b.n	806 <read_boardvalues+0x306>
			if ((err = I2C_setGAIN(PC27_CARDA_I2C_SDA,  PC28_CARDA_I2C_CLK, ((CONFIG *)&settings_buffer)->gain_cardA) < 0)) {
     85c:	4b5e      	ldr	r3, [pc, #376]	; (9d8 <read_boardvalues+0x4d8>)
     85e:	4f58      	ldr	r7, [pc, #352]	; (9c0 <read_boardvalues+0x4c0>)
     860:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
     864:	4b5d      	ldr	r3, [pc, #372]	; (9dc <read_boardvalues+0x4dc>)
     866:	215c      	movs	r1, #92	; 0x5c
     868:	205b      	movs	r0, #91	; 0x5b
     86a:	4798      	blx	r3
     86c:	2800      	cmp	r0, #0
     86e:	ea4f 74d0 	mov.w	r4, r0, lsr #31
     872:	da02      	bge.n	87a <read_boardvalues+0x37a>
				xprintf("Could NOT write to the DAC Gain controller on CARDA:I2C [%i]\r\n", err);
     874:	2101      	movs	r1, #1
     876:	485a      	ldr	r0, [pc, #360]	; (9e0 <read_boardvalues+0x4e0>)
     878:	47b8      	blx	r7
			xprintf("CARDA is a VIBRATEK\r\n");
     87a:	485a      	ldr	r0, [pc, #360]	; (9e4 <read_boardvalues+0x4e4>)
     87c:	e7c3      	b.n	806 <read_boardvalues+0x306>
			writeKSZreg(SPI_KSZ8794_PORT3CONTROL2, 0x06);
     87e:	2106      	movs	r1, #6
     880:	2032      	movs	r0, #50	; 0x32
     882:	4b59      	ldr	r3, [pc, #356]	; (9e8 <read_boardvalues+0x4e8>)
     884:	4f4e      	ldr	r7, [pc, #312]	; (9c0 <read_boardvalues+0x4c0>)
     886:	4798      	blx	r3
			delay_us(50);
     888:	2032      	movs	r0, #50	; 0x32
     88a:	4b58      	ldr	r3, [pc, #352]	; (9ec <read_boardvalues+0x4ec>)
     88c:	4798      	blx	r3
			if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL2, 0x06))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL2] not correct\r\n"); }
     88e:	2106      	movs	r1, #6
     890:	2032      	movs	r0, #50	; 0x32
     892:	4b57      	ldr	r3, [pc, #348]	; (9f0 <read_boardvalues+0x4f0>)
     894:	4798      	blx	r3
     896:	b908      	cbnz	r0, 89c <read_boardvalues+0x39c>
     898:	4856      	ldr	r0, [pc, #344]	; (9f4 <read_boardvalues+0x4f4>)
     89a:	47b8      	blx	r7
			xprintf("CARDA is a Power & Ethernet Daughter-Card\r\n");
     89c:	4856      	ldr	r0, [pc, #344]	; (9f8 <read_boardvalues+0x4f8>)
     89e:	e7b2      	b.n	806 <read_boardvalues+0x306>
	} else if (!cardA_present) {
     8a0:	7837      	ldrb	r7, [r6, #0]
     8a2:	2f00      	cmp	r7, #0
     8a4:	d1b0      	bne.n	808 <read_boardvalues+0x308>
		cardA_type = CARD_NOTFITTED;
     8a6:	4a55      	ldr	r2, [pc, #340]	; (9fc <read_boardvalues+0x4fc>)
     8a8:	7017      	strb	r7, [r2, #0]
		if (cardA_old) {
     8aa:	2b00      	cmp	r3, #0
     8ac:	d0ac      	beq.n	808 <read_boardvalues+0x308>
			writeKSZreg(SPI_KSZ8794_PORT3CONTROL2, 0x00);
     8ae:	4639      	mov	r1, r7
     8b0:	2032      	movs	r0, #50	; 0x32
     8b2:	4b4d      	ldr	r3, [pc, #308]	; (9e8 <read_boardvalues+0x4e8>)
     8b4:	4798      	blx	r3
			delay_us(50);
     8b6:	2032      	movs	r0, #50	; 0x32
     8b8:	4b4c      	ldr	r3, [pc, #304]	; (9ec <read_boardvalues+0x4ec>)
     8ba:	4798      	blx	r3
			if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL2, 0x00))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL2] not correct\r\n"); }
     8bc:	4639      	mov	r1, r7
     8be:	2032      	movs	r0, #50	; 0x32
     8c0:	4b4b      	ldr	r3, [pc, #300]	; (9f0 <read_boardvalues+0x4f0>)
     8c2:	4f3f      	ldr	r7, [pc, #252]	; (9c0 <read_boardvalues+0x4c0>)
     8c4:	4798      	blx	r3
     8c6:	b908      	cbnz	r0, 8cc <read_boardvalues+0x3cc>
     8c8:	484a      	ldr	r0, [pc, #296]	; (9f4 <read_boardvalues+0x4f4>)
     8ca:	47b8      	blx	r7
			xprintf("CARDA has been REMOVED\r\n");
     8cc:	484c      	ldr	r0, [pc, #304]	; (a00 <read_boardvalues+0x500>)
     8ce:	e79a      	b.n	806 <read_boardvalues+0x306>
			delay_ms(500);
     8d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     8d4:	47d0      	blx	sl
			wdt_feed(&WDT_0);
     8d6:	4b4b      	ldr	r3, [pc, #300]	; (a04 <read_boardvalues+0x504>)
     8d8:	f8df b12c 	ldr.w	fp, [pc, #300]	; a08 <read_boardvalues+0x508>
     8dc:	4798      	blx	r3
			if (!(err = I2C_check_deviceID(PB24_CARDB_I2C_SDA, PB25_CARDB_I2C_CLK, 0x60))) {
     8de:	2260      	movs	r2, #96	; 0x60
     8e0:	2139      	movs	r1, #57	; 0x39
     8e2:	2038      	movs	r0, #56	; 0x38
     8e4:	47c8      	blx	r9
     8e6:	b960      	cbnz	r0, 902 <read_boardvalues+0x402>
				cardB_type = CARD_VIBRATEK;
     8e8:	2201      	movs	r2, #1
				cardB_type = CARD_MINI_IO;
     8ea:	f88b 2000 	strb.w	r2, [fp]
		}
		
		/* Actions to be taken for each different card type */
		switch (cardB_type) {
     8ee:	4b46      	ldr	r3, [pc, #280]	; (a08 <read_boardvalues+0x508>)
     8f0:	4c33      	ldr	r4, [pc, #204]	; (9c0 <read_boardvalues+0x4c0>)
     8f2:	781b      	ldrb	r3, [r3, #0]
     8f4:	3b01      	subs	r3, #1
     8f6:	2b03      	cmp	r3, #3
     8f8:	d815      	bhi.n	926 <read_boardvalues+0x426>
     8fa:	e8df f003 	tbb	[pc, r3]
     8fe:	3341      	.short	0x3341
     900:	3f31      	.short	0x3f31
			} else if ((!(err = I2C_check_deviceID(PB24_CARDB_I2C_SDA, PB25_CARDB_I2C_CLK, 0x41))) && (!(err = I2C_check_deviceID(PB24_CARDB_I2C_SDA, PB25_CARDB_I2C_CLK, 0x68)))) {
     902:	2241      	movs	r2, #65	; 0x41
     904:	2139      	movs	r1, #57	; 0x39
     906:	2038      	movs	r0, #56	; 0x38
     908:	47c8      	blx	r9
     90a:	4604      	mov	r4, r0
     90c:	b938      	cbnz	r0, 91e <read_boardvalues+0x41e>
     90e:	2268      	movs	r2, #104	; 0x68
     910:	2139      	movs	r1, #57	; 0x39
     912:	2038      	movs	r0, #56	; 0x38
     914:	47c8      	blx	r9
     916:	4604      	mov	r4, r0
     918:	b908      	cbnz	r0, 91e <read_boardvalues+0x41e>
				cardB_type = CARD_MINI_IO;
     91a:	2202      	movs	r2, #2
     91c:	e7e5      	b.n	8ea <read_boardvalues+0x3ea>
				cardB_type = CARD_NOTFITTED;
     91e:	2200      	movs	r2, #0
     920:	f88b 2000 	strb.w	r2, [fp]
     924:	e77f      	b.n	826 <read_boardvalues+0x326>
			case CARD_NOTFITTED:
			default:
			xprintf("CARDB inserted but not identified\r\n");
     926:	4839      	ldr	r0, [pc, #228]	; (a0c <read_boardvalues+0x50c>)
			break;
			
			case CARD_MAXI_IO:
			xprintf("CARDB is a MAXI IO\r\n");
     928:	47a0      	blx	r4
			xprintf("CARDB has been REMOVED\r\n");
		}
	}

	/* Update the old live states so that next time round, we can detect any changes since this time */
	cardA_old = cardA_present;
     92a:	9a09      	ldr	r2, [sp, #36]	; 0x24
     92c:	7833      	ldrb	r3, [r6, #0]
     92e:	7013      	strb	r3, [r2, #0]
	cardB_old = cardB_present;
     930:	782b      	ldrb	r3, [r5, #0]
     932:	703b      	strb	r3, [r7, #0]
	old_tamper = tamper;
     934:	9b02      	ldr	r3, [sp, #8]
     936:	9a06      	ldr	r2, [sp, #24]
     938:	781b      	ldrb	r3, [r3, #0]
     93a:	7013      	strb	r3, [r2, #0]
	old_link_port1 = link_port1;
     93c:	9b03      	ldr	r3, [sp, #12]
     93e:	9a07      	ldr	r2, [sp, #28]
     940:	781b      	ldrb	r3, [r3, #0]
     942:	7013      	strb	r3, [r2, #0]
	old_link_port2 = link_port2;
     944:	9b04      	ldr	r3, [sp, #16]
     946:	9a08      	ldr	r2, [sp, #32]
     948:	781b      	ldrb	r3, [r3, #0]
     94a:	7013      	strb	r3, [r2, #0]
	old_link_port3 = link_port3;
     94c:	9b05      	ldr	r3, [sp, #20]
     94e:	781a      	ldrb	r2, [r3, #0]
     950:	4b2f      	ldr	r3, [pc, #188]	; (a10 <read_boardvalues+0x510>)
     952:	701a      	strb	r2, [r3, #0]
	
	init_done = 1;
     954:	4b2f      	ldr	r3, [pc, #188]	; (a14 <read_boardvalues+0x514>)
     956:	2201      	movs	r2, #1
     958:	701a      	strb	r2, [r3, #0]
     95a:	b00b      	add	sp, #44	; 0x2c
     95c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xprintf("CARDB is a MAXI IO\r\n");
     960:	482d      	ldr	r0, [pc, #180]	; (a18 <read_boardvalues+0x518>)
     962:	e7e1      	b.n	928 <read_boardvalues+0x428>
			if ((err = I2C_configEXPANDER(PB24_CARDB_I2C_SDA,  PB25_CARDB_I2C_CLK) < 0)) {
     964:	2139      	movs	r1, #57	; 0x39
     966:	2038      	movs	r0, #56	; 0x38
     968:	4b17      	ldr	r3, [pc, #92]	; (9c8 <read_boardvalues+0x4c8>)
     96a:	4798      	blx	r3
     96c:	2800      	cmp	r0, #0
     96e:	da03      	bge.n	978 <read_boardvalues+0x478>
				xprintf("Could NOT write to the Mini-IO Expander on CARDB:I2C [%i]\r\n", err);
     970:	2101      	movs	r1, #1
     972:	482a      	ldr	r0, [pc, #168]	; (a1c <read_boardvalues+0x51c>)
     974:	4b12      	ldr	r3, [pc, #72]	; (9c0 <read_boardvalues+0x4c0>)
     976:	4798      	blx	r3
			xprintf("CARDB is a MINI IO\r\n");
     978:	4829      	ldr	r0, [pc, #164]	; (a20 <read_boardvalues+0x520>)
     97a:	e7d5      	b.n	928 <read_boardvalues+0x428>
			xprintf("CARDB is a VIBRAPOINT\r\n");
     97c:	4829      	ldr	r0, [pc, #164]	; (a24 <read_boardvalues+0x524>)
     97e:	e7d3      	b.n	928 <read_boardvalues+0x428>
			if ((err = I2C_setGAIN(PB24_CARDB_I2C_SDA,  PB25_CARDB_I2C_CLK, ((CONFIG *)&settings_buffer)->gain_cardB)) < 0) {
     980:	4b15      	ldr	r3, [pc, #84]	; (9d8 <read_boardvalues+0x4d8>)
     982:	4c0f      	ldr	r4, [pc, #60]	; (9c0 <read_boardvalues+0x4c0>)
     984:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
     988:	4b14      	ldr	r3, [pc, #80]	; (9dc <read_boardvalues+0x4dc>)
     98a:	2139      	movs	r1, #57	; 0x39
     98c:	2038      	movs	r0, #56	; 0x38
     98e:	4798      	blx	r3
     990:	1e01      	subs	r1, r0, #0
     992:	da01      	bge.n	998 <read_boardvalues+0x498>
				xprintf("Could NOT write to the DAC Gain controller on CARDB:I2C [%i]\r\n", err);
     994:	4824      	ldr	r0, [pc, #144]	; (a28 <read_boardvalues+0x528>)
     996:	47a0      	blx	r4
			xprintf("CARDB is a VIBRATEK\r\n");
     998:	4824      	ldr	r0, [pc, #144]	; (a2c <read_boardvalues+0x52c>)
     99a:	e7c5      	b.n	928 <read_boardvalues+0x428>
	} else if (!cardB_present) {
     99c:	782a      	ldrb	r2, [r5, #0]
     99e:	2a00      	cmp	r2, #0
     9a0:	d1c3      	bne.n	92a <read_boardvalues+0x42a>
		cardB_type = CARD_NOTFITTED;
     9a2:	4919      	ldr	r1, [pc, #100]	; (a08 <read_boardvalues+0x508>)
     9a4:	700a      	strb	r2, [r1, #0]
		if (cardB_old) {
     9a6:	2b00      	cmp	r3, #0
     9a8:	d0bf      	beq.n	92a <read_boardvalues+0x42a>
			xprintf("CARDB has been REMOVED\r\n");
     9aa:	4821      	ldr	r0, [pc, #132]	; (a30 <read_boardvalues+0x530>)
     9ac:	4b04      	ldr	r3, [pc, #16]	; (9c0 <read_boardvalues+0x4c0>)
     9ae:	4798      	blx	r3
     9b0:	e7bb      	b.n	92a <read_boardvalues+0x42a>
     9b2:	bf00      	nop
     9b4:	0000c187 	.word	0x0000c187
     9b8:	20007841 	.word	0x20007841
     9bc:	0000c2ed 	.word	0x0000c2ed
     9c0:	00000395 	.word	0x00000395
     9c4:	0000c1ab 	.word	0x0000c1ab
     9c8:	0000481d 	.word	0x0000481d
     9cc:	0000c1c0 	.word	0x0000c1c0
     9d0:	0000c1fc 	.word	0x0000c1fc
     9d4:	0000c211 	.word	0x0000c211
     9d8:	20007f14 	.word	0x20007f14
     9dc:	00005255 	.word	0x00005255
     9e0:	0000c229 	.word	0x0000c229
     9e4:	0000c268 	.word	0x0000c268
     9e8:	0000b245 	.word	0x0000b245
     9ec:	00001201 	.word	0x00001201
     9f0:	0000b1d5 	.word	0x0000b1d5
     9f4:	0000c27e 	.word	0x0000c27e
     9f8:	0000c2a8 	.word	0x0000c2a8
     9fc:	20007c57 	.word	0x20007c57
     a00:	0000c2d4 	.word	0x0000c2d4
     a04:	00000365 	.word	0x00000365
     a08:	20008540 	.word	0x20008540
     a0c:	0000c32d 	.word	0x0000c32d
     a10:	2000825c 	.word	0x2000825c
     a14:	2000757b 	.word	0x2000757b
     a18:	0000c351 	.word	0x0000c351
     a1c:	0000c366 	.word	0x0000c366
     a20:	0000c3a2 	.word	0x0000c3a2
     a24:	0000c3b7 	.word	0x0000c3b7
     a28:	0000c3cf 	.word	0x0000c3cf
     a2c:	0000c40e 	.word	0x0000c40e
     a30:	0000c424 	.word	0x0000c424
     a34:	00001225 	.word	0x00001225
     a38:	00006021 	.word	0x00006021

00000a3c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     a3c:	4770      	bx	lr
	...

00000a40 <Reset_Handler>:
{
     a40:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     a42:	4a0f      	ldr	r2, [pc, #60]	; (a80 <Reset_Handler+0x40>)
     a44:	4b0f      	ldr	r3, [pc, #60]	; (a84 <Reset_Handler+0x44>)
     a46:	429a      	cmp	r2, r3
     a48:	d10e      	bne.n	a68 <Reset_Handler+0x28>
{
     a4a:	4b0f      	ldr	r3, [pc, #60]	; (a88 <Reset_Handler+0x48>)
        for (pDest = &_szero; pDest < &_ezero;) {
     a4c:	4a0f      	ldr	r2, [pc, #60]	; (a8c <Reset_Handler+0x4c>)
                *pDest++ = 0;
     a4e:	2100      	movs	r1, #0
        for (pDest = &_szero; pDest < &_ezero;) {
     a50:	4293      	cmp	r3, r2
     a52:	d312      	bcc.n	a7a <Reset_Handler+0x3a>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     a54:	4b0e      	ldr	r3, [pc, #56]	; (a90 <Reset_Handler+0x50>)
     a56:	4a0f      	ldr	r2, [pc, #60]	; (a94 <Reset_Handler+0x54>)
     a58:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     a5c:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     a5e:	4b0e      	ldr	r3, [pc, #56]	; (a98 <Reset_Handler+0x58>)
     a60:	4798      	blx	r3
        main();
     a62:	4b0e      	ldr	r3, [pc, #56]	; (a9c <Reset_Handler+0x5c>)
     a64:	4798      	blx	r3
     a66:	e7fe      	b.n	a66 <Reset_Handler+0x26>
                for (; pDest < &_erelocate;) {
     a68:	490d      	ldr	r1, [pc, #52]	; (aa0 <Reset_Handler+0x60>)
     a6a:	3a04      	subs	r2, #4
     a6c:	428b      	cmp	r3, r1
     a6e:	d2ec      	bcs.n	a4a <Reset_Handler+0xa>
                        *pDest++ = *pSrc++;
     a70:	f852 0f04 	ldr.w	r0, [r2, #4]!
     a74:	f843 0b04 	str.w	r0, [r3], #4
     a78:	e7f8      	b.n	a6c <Reset_Handler+0x2c>
                *pDest++ = 0;
     a7a:	f843 1b04 	str.w	r1, [r3], #4
     a7e:	e7e7      	b.n	a50 <Reset_Handler+0x10>
     a80:	0000f528 	.word	0x0000f528
     a84:	20000000 	.word	0x20000000
     a88:	200002c0 	.word	0x200002c0
     a8c:	200090b8 	.word	0x200090b8
     a90:	00000000 	.word	0x00000000
     a94:	e000ed00 	.word	0xe000ed00
     a98:	0000b295 	.word	0x0000b295
     a9c:	00008989 	.word	0x00008989
     aa0:	200002b0 	.word	0x200002b0

00000aa4 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
     aa4:	b530      	push	{r4, r5, lr}
	uint8_t port = GPIO_PORT(gpio);
	uint8_t pin  = GPIO_PIN(gpio);

	if (function == GPIO_PIN_FUNCTION_OFF) {
     aa6:	1c4a      	adds	r2, r1, #1
	uint8_t pin  = GPIO_PIN(gpio);
     aa8:	b2c4      	uxtb	r4, r0
     aaa:	f3c0 1247 	ubfx	r2, r0, #5, #8
     aae:	4816      	ldr	r0, [pc, #88]	; (b08 <_gpio_set_pin_function+0x64>)
     ab0:	f004 031f 	and.w	r3, r4, #31
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ab4:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
	if (function == GPIO_PIN_FUNCTION_OFF) {
     ab8:	d107      	bne.n	aca <_gpio_set_pin_function+0x26>
     aba:	4418      	add	r0, r3
     abc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
	tmp &= ~PORT_PINCFG_PMUXEN;
     ac0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ac4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
     ac8:	bd30      	pop	{r4, r5, pc}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     aca:	18c5      	adds	r5, r0, r3
     acc:	085b      	lsrs	r3, r3, #1
     ace:	f895 2040 	ldrb.w	r2, [r5, #64]	; 0x40
	tmp &= ~PORT_PINCFG_PMUXEN;
     ad2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     ad6:	4418      	add	r0, r3
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     ad8:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     adc:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     ae0:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);

	} else {
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);

		if (pin & 1) {
     ae4:	f014 0f01 	tst.w	r4, #1
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     ae8:	bf19      	ittee	ne
     aea:	f003 030f 	andne.w	r3, r3, #15
	tmp |= PORT_PMUX_PMUXO(data);
     aee:	ea43 1101 	orrne.w	r1, r3, r1, lsl #4
	tmp |= PORT_PMUX_PMUXE(data);
     af2:	f001 010f 	andeq.w	r1, r1, #15
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     af6:	f003 03f0 	andeq.w	r3, r3, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXO(data);
     afa:	bf14      	ite	ne
     afc:	b2c9      	uxtbne	r1, r1
	tmp |= PORT_PMUX_PMUXE(data);
     afe:	4319      	orreq	r1, r3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b00:	f880 1030 	strb.w	r1, [r0, #48]	; 0x30
     b04:	bd30      	pop	{r4, r5, pc}
     b06:	bf00      	nop
     b08:	41008000 	.word	0x41008000

00000b0c <ADC_0_PORT_init>:
struct wdt_descriptor WDT_0;

struct mac_async_descriptor ETHERNET_MAC_0;

void ADC_0_PORT_init(void)
{
     b0c:	b570      	push	{r4, r5, r6, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     b0e:	4c13      	ldr	r4, [pc, #76]	; (b5c <ADC_0_PORT_init+0x50>)
	_gpio_set_pin_function(pin, function);
     b10:	4d13      	ldr	r5, [pc, #76]	; (b60 <ADC_0_PORT_init+0x54>)
     b12:	4914      	ldr	r1, [pc, #80]	; (b64 <ADC_0_PORT_init+0x58>)
     b14:	2304      	movs	r3, #4
     b16:	6063      	str	r3, [r4, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b18:	f04f 4640 	mov.w	r6, #3221225472	; 0xc0000000
     b1c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     b20:	62a3      	str	r3, [r4, #40]	; 0x28
     b22:	2002      	movs	r0, #2
     b24:	62a6      	str	r6, [r4, #40]	; 0x28
     b26:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     b28:	2308      	movs	r3, #8
     b2a:	6063      	str	r3, [r4, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b2c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     b30:	62a3      	str	r3, [r4, #40]	; 0x28
     b32:	490d      	ldr	r1, [pc, #52]	; (b68 <ADC_0_PORT_init+0x5c>)
     b34:	62a6      	str	r6, [r4, #40]	; 0x28
     b36:	2003      	movs	r0, #3
     b38:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     b3a:	f44f 7380 	mov.w	r3, #256	; 0x100
     b3e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b42:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     b46:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
     b4a:	f8c4 60a8 	str.w	r6, [r4, #168]	; 0xa8
     b4e:	462b      	mov	r3, r5
     b50:	4906      	ldr	r1, [pc, #24]	; (b6c <ADC_0_PORT_init+0x60>)
     b52:	2028      	movs	r0, #40	; 0x28
	gpio_set_pin_function(PA03, PINMUX_PA03B_ADC0_AIN1);

	// Disable digital pin circuitry
	gpio_set_pin_direction(PB08, GPIO_DIRECTION_OFF);
	gpio_set_pin_function(PB08, PINMUX_PB08B_ADC0_AIN2);
}
     b54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     b58:	4718      	bx	r3
     b5a:	bf00      	nop
     b5c:	41008000 	.word	0x41008000
     b60:	00000aa5 	.word	0x00000aa5
     b64:	00020001 	.word	0x00020001
     b68:	00030001 	.word	0x00030001
     b6c:	00280001 	.word	0x00280001

00000b70 <ADC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
     b70:	4a04      	ldr	r2, [pc, #16]	; (b84 <ADC_0_CLOCK_init+0x14>)
     b72:	6a13      	ldr	r3, [r2, #32]
     b74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     b78:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     b7a:	4b03      	ldr	r3, [pc, #12]	; (b88 <ADC_0_CLOCK_init+0x18>)
     b7c:	2240      	movs	r2, #64	; 0x40
     b7e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
     b82:	4770      	bx	lr
     b84:	40000800 	.word	0x40000800
     b88:	40001c00 	.word	0x40001c00

00000b8c <ADC_0_init>:
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void ADC_0_init(void)
{
     b8c:	b510      	push	{r4, lr}
	ADC_0_CLOCK_init();
     b8e:	4b05      	ldr	r3, [pc, #20]	; (ba4 <ADC_0_init+0x18>)
     b90:	4798      	blx	r3
	ADC_0_PORT_init();
     b92:	4b05      	ldr	r3, [pc, #20]	; (ba8 <ADC_0_init+0x1c>)
     b94:	4798      	blx	r3
	adc_sync_init(&ADC_0, ADC0, (void *)NULL);
     b96:	2200      	movs	r2, #0
     b98:	4904      	ldr	r1, [pc, #16]	; (bac <ADC_0_init+0x20>)
     b9a:	4805      	ldr	r0, [pc, #20]	; (bb0 <ADC_0_init+0x24>)
     b9c:	4b05      	ldr	r3, [pc, #20]	; (bb4 <ADC_0_init+0x28>)
}
     b9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	adc_sync_init(&ADC_0, ADC0, (void *)NULL);
     ba2:	4718      	bx	r3
     ba4:	00000b71 	.word	0x00000b71
     ba8:	00000b0d 	.word	0x00000b0d
     bac:	43001c00 	.word	0x43001c00
     bb0:	2000746c 	.word	0x2000746c
     bb4:	00001015 	.word	0x00001015

00000bb8 <CRYPTOGRAPHY_0_init>:
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_AES;
     bb8:	4a04      	ldr	r2, [pc, #16]	; (bcc <CRYPTOGRAPHY_0_init+0x14>)
 * Enables AES peripheral, clocks and initializes AES driver
 */
void CRYPTOGRAPHY_0_init(void)
{
	hri_mclk_set_APBCMASK_AES_bit(MCLK);
	aes_sync_init(&CRYPTOGRAPHY_0, AES);
     bba:	4905      	ldr	r1, [pc, #20]	; (bd0 <CRYPTOGRAPHY_0_init+0x18>)
     bbc:	69d3      	ldr	r3, [r2, #28]
     bbe:	4805      	ldr	r0, [pc, #20]	; (bd4 <CRYPTOGRAPHY_0_init+0x1c>)
     bc0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     bc4:	61d3      	str	r3, [r2, #28]
     bc6:	4b04      	ldr	r3, [pc, #16]	; (bd8 <CRYPTOGRAPHY_0_init+0x20>)
     bc8:	4718      	bx	r3
     bca:	bf00      	nop
     bcc:	40000800 	.word	0x40000800
     bd0:	42002400 	.word	0x42002400
     bd4:	20007424 	.word	0x20007424
     bd8:	00001119 	.word	0x00001119

00000bdc <CRC_0_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     bdc:	4a04      	ldr	r2, [pc, #16]	; (bf0 <CRC_0_init+0x14>)
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_0_init(void)
{
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
	crc_sync_init(&CRC_0, DSU);
     bde:	4905      	ldr	r1, [pc, #20]	; (bf4 <CRC_0_init+0x18>)
     be0:	6993      	ldr	r3, [r2, #24]
     be2:	4805      	ldr	r0, [pc, #20]	; (bf8 <CRC_0_init+0x1c>)
     be4:	f043 0302 	orr.w	r3, r3, #2
     be8:	6193      	str	r3, [r2, #24]
     bea:	4b04      	ldr	r3, [pc, #16]	; (bfc <CRC_0_init+0x20>)
     bec:	4718      	bx	r3
     bee:	bf00      	nop
     bf0:	40000800 	.word	0x40000800
     bf4:	41002000 	.word	0x41002000
     bf8:	20007460 	.word	0x20007460
     bfc:	000011c1 	.word	0x000011c1

00000c00 <HASH_ALGORITHM_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_ICM;
     c00:	4b04      	ldr	r3, [pc, #16]	; (c14 <HASH_ALGORITHM_0_CLOCK_init+0x14>)
     c02:	691a      	ldr	r2, [r3, #16]
     c04:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
     c08:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_ICM;
     c0a:	69da      	ldr	r2, [r3, #28]
     c0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
     c10:	61da      	str	r2, [r3, #28]
     c12:	4770      	bx	lr
     c14:	40000800 	.word	0x40000800

00000c18 <HASH_ALGORITHM_0_init>:
 * \brief SHA initialization function
 *
 * Enables SHA peripheral, clocks and initializes SHA driver
 */
void HASH_ALGORITHM_0_init(void)
{
     c18:	b510      	push	{r4, lr}
	HASH_ALGORITHM_0_CLOCK_init();
     c1a:	4b04      	ldr	r3, [pc, #16]	; (c2c <HASH_ALGORITHM_0_init+0x14>)
     c1c:	4798      	blx	r3
	sha_sync_init(&HASH_ALGORITHM_0, ICM);
     c1e:	4904      	ldr	r1, [pc, #16]	; (c30 <HASH_ALGORITHM_0_init+0x18>)
     c20:	4804      	ldr	r0, [pc, #16]	; (c34 <HASH_ALGORITHM_0_init+0x1c>)
     c22:	4b05      	ldr	r3, [pc, #20]	; (c38 <HASH_ALGORITHM_0_init+0x20>)
}
     c24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	sha_sync_init(&HASH_ALGORITHM_0, ICM);
     c28:	4718      	bx	r3
     c2a:	bf00      	nop
     c2c:	00000c01 	.word	0x00000c01
     c30:	42002c00 	.word	0x42002c00
     c34:	20007464 	.word	0x20007464
     c38:	0000163d 	.word	0x0000163d

00000c3c <FLASH_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
     c3c:	4a02      	ldr	r2, [pc, #8]	; (c48 <FLASH_0_CLOCK_init+0xc>)
     c3e:	6913      	ldr	r3, [r2, #16]
     c40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     c44:	6113      	str	r3, [r2, #16]
     c46:	4770      	bx	lr
     c48:	40000800 	.word	0x40000800

00000c4c <FLASH_0_init>:

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}

void FLASH_0_init(void)
{
     c4c:	b510      	push	{r4, lr}
	FLASH_0_CLOCK_init();
     c4e:	4b04      	ldr	r3, [pc, #16]	; (c60 <FLASH_0_init+0x14>)
     c50:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
     c52:	4904      	ldr	r1, [pc, #16]	; (c64 <FLASH_0_init+0x18>)
     c54:	4804      	ldr	r0, [pc, #16]	; (c68 <FLASH_0_init+0x1c>)
     c56:	4b05      	ldr	r3, [pc, #20]	; (c6c <FLASH_0_init+0x20>)
}
     c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	flash_init(&FLASH_0, NVMCTRL);
     c5c:	4718      	bx	r3
     c5e:	bf00      	nop
     c60:	00000c3d 	.word	0x00000c3d
     c64:	41004000 	.word	0x41004000
     c68:	20007408 	.word	0x20007408
     c6c:	00001291 	.word	0x00001291

00000c70 <USART_0_CLOCK_init>:
     c70:	4b05      	ldr	r3, [pc, #20]	; (c88 <USART_0_CLOCK_init+0x18>)
     c72:	2240      	movs	r2, #64	; 0x40
     c74:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     c78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     c7c:	4a03      	ldr	r2, [pc, #12]	; (c8c <USART_0_CLOCK_init+0x1c>)
     c7e:	6953      	ldr	r3, [r2, #20]
     c80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     c84:	6153      	str	r3, [r2, #20]
     c86:	4770      	bx	lr
     c88:	40001c00 	.word	0x40001c00
     c8c:	40000800 	.word	0x40000800

00000c90 <USART_0_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void USART_0_PORT_init()
{
     c90:	b510      	push	{r4, lr}
     c92:	4c05      	ldr	r4, [pc, #20]	; (ca8 <USART_0_PORT_init+0x18>)
     c94:	4905      	ldr	r1, [pc, #20]	; (cac <USART_0_PORT_init+0x1c>)
     c96:	2008      	movs	r0, #8
     c98:	47a0      	blx	r4
     c9a:	4623      	mov	r3, r4
     c9c:	4904      	ldr	r1, [pc, #16]	; (cb0 <USART_0_PORT_init+0x20>)
     c9e:	2009      	movs	r0, #9

	gpio_set_pin_function(PA08, PINMUX_PA08C_SERCOM0_PAD0);

	gpio_set_pin_function(PA09, PINMUX_PA09C_SERCOM0_PAD1);
}
     ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     ca4:	4718      	bx	r3
     ca6:	bf00      	nop
     ca8:	00000aa5 	.word	0x00000aa5
     cac:	00080002 	.word	0x00080002
     cb0:	00090002 	.word	0x00090002

00000cb4 <USART_0_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_0_init(void)
{
     cb4:	b513      	push	{r0, r1, r4, lr}
	USART_0_CLOCK_init();
     cb6:	4b07      	ldr	r3, [pc, #28]	; (cd4 <USART_0_init+0x20>)
	usart_async_init(&USART_0, SERCOM0, USART_0_buffer, USART_0_BUFFER_SIZE, (void *)NULL);
     cb8:	4c07      	ldr	r4, [pc, #28]	; (cd8 <USART_0_init+0x24>)
	USART_0_CLOCK_init();
     cba:	4798      	blx	r3
	usart_async_init(&USART_0, SERCOM0, USART_0_buffer, USART_0_BUFFER_SIZE, (void *)NULL);
     cbc:	2300      	movs	r3, #0
     cbe:	9300      	str	r3, [sp, #0]
     cc0:	4a06      	ldr	r2, [pc, #24]	; (cdc <USART_0_init+0x28>)
     cc2:	4907      	ldr	r1, [pc, #28]	; (ce0 <USART_0_init+0x2c>)
     cc4:	4807      	ldr	r0, [pc, #28]	; (ce4 <USART_0_init+0x30>)
     cc6:	2310      	movs	r3, #16
     cc8:	47a0      	blx	r4
	USART_0_PORT_init();
     cca:	4b07      	ldr	r3, [pc, #28]	; (ce8 <USART_0_init+0x34>)
}
     ccc:	b002      	add	sp, #8
     cce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	USART_0_PORT_init();
     cd2:	4718      	bx	r3
     cd4:	00000c71 	.word	0x00000c71
     cd8:	00001985 	.word	0x00001985
     cdc:	2000030e 	.word	0x2000030e
     ce0:	40003000 	.word	0x40003000
     ce4:	20007488 	.word	0x20007488
     ce8:	00000c91 	.word	0x00000c91

00000cec <USART_1_CLOCK_init>:
     cec:	4b05      	ldr	r3, [pc, #20]	; (d04 <USART_1_CLOCK_init+0x18>)
     cee:	2240      	movs	r2, #64	; 0x40
     cf0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     cf4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     cf8:	4a03      	ldr	r2, [pc, #12]	; (d08 <USART_1_CLOCK_init+0x1c>)
     cfa:	6a13      	ldr	r3, [r2, #32]
     cfc:	f043 0302 	orr.w	r3, r3, #2
     d00:	6213      	str	r3, [r2, #32]
     d02:	4770      	bx	lr
     d04:	40001c00 	.word	0x40001c00
     d08:	40000800 	.word	0x40000800

00000d0c <USART_1_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void USART_1_PORT_init()
{
     d0c:	b510      	push	{r4, lr}
     d0e:	4c05      	ldr	r4, [pc, #20]	; (d24 <USART_1_PORT_init+0x18>)
     d10:	4905      	ldr	r1, [pc, #20]	; (d28 <USART_1_PORT_init+0x1c>)
     d12:	2030      	movs	r0, #48	; 0x30
     d14:	47a0      	blx	r4
     d16:	4623      	mov	r3, r4
     d18:	4904      	ldr	r1, [pc, #16]	; (d2c <USART_1_PORT_init+0x20>)
     d1a:	2031      	movs	r0, #49	; 0x31

	gpio_set_pin_function(PB16, PINMUX_PB16C_SERCOM5_PAD0);

	gpio_set_pin_function(PB17, PINMUX_PB17C_SERCOM5_PAD1);
}
     d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     d20:	4718      	bx	r3
     d22:	bf00      	nop
     d24:	00000aa5 	.word	0x00000aa5
     d28:	00300002 	.word	0x00300002
     d2c:	00310002 	.word	0x00310002

00000d30 <USART_1_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_1_init(void)
{
     d30:	b513      	push	{r0, r1, r4, lr}
	USART_1_CLOCK_init();
     d32:	4b07      	ldr	r3, [pc, #28]	; (d50 <USART_1_init+0x20>)
	usart_async_init(&USART_1, SERCOM5, USART_1_buffer, USART_1_BUFFER_SIZE, (void *)NULL);
     d34:	4c07      	ldr	r4, [pc, #28]	; (d54 <USART_1_init+0x24>)
	USART_1_CLOCK_init();
     d36:	4798      	blx	r3
	usart_async_init(&USART_1, SERCOM5, USART_1_buffer, USART_1_BUFFER_SIZE, (void *)NULL);
     d38:	2300      	movs	r3, #0
     d3a:	9300      	str	r3, [sp, #0]
     d3c:	4a06      	ldr	r2, [pc, #24]	; (d58 <USART_1_init+0x28>)
     d3e:	4907      	ldr	r1, [pc, #28]	; (d5c <USART_1_init+0x2c>)
     d40:	4807      	ldr	r0, [pc, #28]	; (d60 <USART_1_init+0x30>)
     d42:	2310      	movs	r3, #16
     d44:	47a0      	blx	r4
	USART_1_PORT_init();
     d46:	4b07      	ldr	r3, [pc, #28]	; (d64 <USART_1_init+0x34>)
}
     d48:	b002      	add	sp, #8
     d4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	USART_1_PORT_init();
     d4e:	4718      	bx	r3
     d50:	00000ced 	.word	0x00000ced
     d54:	00001985 	.word	0x00001985
     d58:	2000031e 	.word	0x2000031e
     d5c:	43000400 	.word	0x43000400
     d60:	200074d8 	.word	0x200074d8
     d64:	00000d0d 	.word	0x00000d0d

00000d68 <delay_driver_init>:

void delay_driver_init(void)
{
	delay_init(SysTick);
     d68:	4801      	ldr	r0, [pc, #4]	; (d70 <delay_driver_init+0x8>)
     d6a:	4b02      	ldr	r3, [pc, #8]	; (d74 <delay_driver_init+0xc>)
     d6c:	4718      	bx	r3
     d6e:	bf00      	nop
     d70:	e000e010 	.word	0xe000e010
     d74:	000011f1 	.word	0x000011f1

00000d78 <USB_0_PORT_init>:

	timer_init(&TIMER_0, TC0, _tc_get_timer());
}

void USB_0_PORT_init(void)
{
     d78:	b570      	push	{r4, r5, r6, lr}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d7a:	4c13      	ldr	r4, [pc, #76]	; (dc8 <USB_0_PORT_init+0x50>)
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d7c:	4a13      	ldr	r2, [pc, #76]	; (dcc <USB_0_PORT_init+0x54>)
     d7e:	4d14      	ldr	r5, [pc, #80]	; (dd0 <USB_0_PORT_init+0x58>)
     d80:	4914      	ldr	r1, [pc, #80]	; (dd4 <USB_0_PORT_init+0x5c>)
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d86:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d8a:	60a3      	str	r3, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d8c:	62a6      	str	r6, [r4, #40]	; 0x28
     d8e:	62a2      	str	r2, [r4, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d90:	6163      	str	r3, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     d92:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
     d96:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
     d9a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     d9e:	2018      	movs	r0, #24
     da0:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     da2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     da6:	4a0c      	ldr	r2, [pc, #48]	; (dd8 <USB_0_PORT_init+0x60>)
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     da8:	60a3      	str	r3, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     daa:	62a6      	str	r6, [r4, #40]	; 0x28
     dac:	62a2      	str	r2, [r4, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     dae:	6163      	str	r3, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     db0:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
     db4:	4909      	ldr	r1, [pc, #36]	; (ddc <USB_0_PORT_init+0x64>)
     db6:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
     dba:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
     dbe:	2019      	movs	r0, #25
     dc0:	462b      	mov	r3, r5
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
     dc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     dc6:	4718      	bx	r3
     dc8:	41008000 	.word	0x41008000
     dcc:	c0000100 	.word	0xc0000100
     dd0:	00000aa5 	.word	0x00000aa5
     dd4:	00180007 	.word	0x00180007
     dd8:	c0000200 	.word	0xc0000200
     ddc:	00190007 	.word	0x00190007

00000de0 <USB_0_CLOCK_init>:
     de0:	4b07      	ldr	r3, [pc, #28]	; (e00 <USB_0_CLOCK_init+0x20>)
     de2:	2240      	movs	r2, #64	; 0x40
     de4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     de8:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
     dec:	691a      	ldr	r2, [r3, #16]
     dee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     df2:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     df4:	699a      	ldr	r2, [r3, #24]
     df6:	f042 0201 	orr.w	r2, r2, #1
     dfa:	619a      	str	r2, [r3, #24]
     dfc:	4770      	bx	lr
     dfe:	bf00      	nop
     e00:	40001c00 	.word	0x40001c00

00000e04 <USB_0_init>:
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}

void USB_0_init(void)
{
     e04:	b510      	push	{r4, lr}
	USB_0_CLOCK_init();
     e06:	4b04      	ldr	r3, [pc, #16]	; (e18 <USB_0_init+0x14>)
     e08:	4798      	blx	r3
	usb_d_init();
     e0a:	4b04      	ldr	r3, [pc, #16]	; (e1c <USB_0_init+0x18>)
     e0c:	4798      	blx	r3
	USB_0_PORT_init();
     e0e:	4b04      	ldr	r3, [pc, #16]	; (e20 <USB_0_init+0x1c>)
}
     e10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	USB_0_PORT_init();
     e14:	4718      	bx	r3
     e16:	bf00      	nop
     e18:	00000de1 	.word	0x00000de1
     e1c:	00001ce5 	.word	0x00001ce5
     e20:	00000d79 	.word	0x00000d79

00000e24 <WDT_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     e24:	4a02      	ldr	r2, [pc, #8]	; (e30 <WDT_0_CLOCK_init+0xc>)
     e26:	6953      	ldr	r3, [r2, #20]
     e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     e2c:	6153      	str	r3, [r2, #20]
     e2e:	4770      	bx	lr
     e30:	40000800 	.word	0x40000800

00000e34 <WDT_0_init>:
{
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
}

void WDT_0_init(void)
{
     e34:	b510      	push	{r4, lr}
	WDT_0_CLOCK_init();
     e36:	4b07      	ldr	r3, [pc, #28]	; (e54 <WDT_0_init+0x20>)
     e38:	4798      	blx	r3
	ASSERT(wdt && hw);
     e3a:	2001      	movs	r0, #1
     e3c:	4b06      	ldr	r3, [pc, #24]	; (e58 <WDT_0_init+0x24>)
     e3e:	4907      	ldr	r1, [pc, #28]	; (e5c <WDT_0_init+0x28>)
     e40:	2248      	movs	r2, #72	; 0x48
     e42:	4798      	blx	r3
	wdt->dev.hw = (void *)hw;
     e44:	4806      	ldr	r0, [pc, #24]	; (e60 <WDT_0_init+0x2c>)
     e46:	4b07      	ldr	r3, [pc, #28]	; (e64 <WDT_0_init+0x30>)
     e48:	6003      	str	r3, [r0, #0]
	wdt_init(&WDT_0, WDT);
}
     e4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return _wdt_init(&wdt->dev);
     e4e:	4b06      	ldr	r3, [pc, #24]	; (e68 <WDT_0_init+0x34>)
     e50:	4718      	bx	r3
     e52:	bf00      	nop
     e54:	00000e25 	.word	0x00000e25
     e58:	00001fdd 	.word	0x00001fdd
     e5c:	0000bff9 	.word	0x0000bff9
     e60:	20007470 	.word	0x20007470
     e64:	40002000 	.word	0x40002000
     e68:	000041c9 	.word	0x000041c9

00000e6c <ETHERNET_MAC_0_PORT_init>:

void ETHERNET_MAC_0_PORT_init(void)
{
     e6c:	b510      	push	{r4, lr}
     e6e:	491d      	ldr	r1, [pc, #116]	; (ee4 <ETHERNET_MAC_0_PORT_init+0x78>)
     e70:	4c1d      	ldr	r4, [pc, #116]	; (ee8 <ETHERNET_MAC_0_PORT_init+0x7c>)
     e72:	2055      	movs	r0, #85	; 0x55
     e74:	47a0      	blx	r4
     e76:	491d      	ldr	r1, [pc, #116]	; (eec <ETHERNET_MAC_0_PORT_init+0x80>)
     e78:	2010      	movs	r0, #16
     e7a:	47a0      	blx	r4
     e7c:	491c      	ldr	r1, [pc, #112]	; (ef0 <ETHERNET_MAC_0_PORT_init+0x84>)
     e7e:	204b      	movs	r0, #75	; 0x4b
     e80:	47a0      	blx	r4
     e82:	491c      	ldr	r1, [pc, #112]	; (ef4 <ETHERNET_MAC_0_PORT_init+0x88>)
     e84:	204c      	movs	r0, #76	; 0x4c
     e86:	47a0      	blx	r4
     e88:	491b      	ldr	r1, [pc, #108]	; (ef8 <ETHERNET_MAC_0_PORT_init+0x8c>)
     e8a:	200d      	movs	r0, #13
     e8c:	47a0      	blx	r4
     e8e:	491b      	ldr	r1, [pc, #108]	; (efc <ETHERNET_MAC_0_PORT_init+0x90>)
     e90:	200c      	movs	r0, #12
     e92:	47a0      	blx	r4
     e94:	491a      	ldr	r1, [pc, #104]	; (f00 <ETHERNET_MAC_0_PORT_init+0x94>)
     e96:	204f      	movs	r0, #79	; 0x4f
     e98:	47a0      	blx	r4
     e9a:	491a      	ldr	r1, [pc, #104]	; (f04 <ETHERNET_MAC_0_PORT_init+0x98>)
     e9c:	204e      	movs	r0, #78	; 0x4e
     e9e:	47a0      	blx	r4
     ea0:	4919      	ldr	r1, [pc, #100]	; (f08 <ETHERNET_MAC_0_PORT_init+0x9c>)
     ea2:	2052      	movs	r0, #82	; 0x52
     ea4:	47a0      	blx	r4
     ea6:	4919      	ldr	r1, [pc, #100]	; (f0c <ETHERNET_MAC_0_PORT_init+0xa0>)
     ea8:	2054      	movs	r0, #84	; 0x54
     eaa:	47a0      	blx	r4
     eac:	4918      	ldr	r1, [pc, #96]	; (f10 <ETHERNET_MAC_0_PORT_init+0xa4>)
     eae:	200f      	movs	r0, #15
     eb0:	47a0      	blx	r4
     eb2:	4918      	ldr	r1, [pc, #96]	; (f14 <ETHERNET_MAC_0_PORT_init+0xa8>)
     eb4:	2012      	movs	r0, #18
     eb6:	47a0      	blx	r4
     eb8:	4917      	ldr	r1, [pc, #92]	; (f18 <ETHERNET_MAC_0_PORT_init+0xac>)
     eba:	2013      	movs	r0, #19
     ebc:	47a0      	blx	r4
     ebe:	4917      	ldr	r1, [pc, #92]	; (f1c <ETHERNET_MAC_0_PORT_init+0xb0>)
     ec0:	2050      	movs	r0, #80	; 0x50
     ec2:	47a0      	blx	r4
     ec4:	4916      	ldr	r1, [pc, #88]	; (f20 <ETHERNET_MAC_0_PORT_init+0xb4>)
     ec6:	2051      	movs	r0, #81	; 0x51
     ec8:	47a0      	blx	r4
     eca:	4916      	ldr	r1, [pc, #88]	; (f24 <ETHERNET_MAC_0_PORT_init+0xb8>)
     ecc:	200e      	movs	r0, #14
     ece:	47a0      	blx	r4
     ed0:	4915      	ldr	r1, [pc, #84]	; (f28 <ETHERNET_MAC_0_PORT_init+0xbc>)
     ed2:	2011      	movs	r0, #17
     ed4:	47a0      	blx	r4
     ed6:	4623      	mov	r3, r4
     ed8:	4914      	ldr	r1, [pc, #80]	; (f2c <ETHERNET_MAC_0_PORT_init+0xc0>)
     eda:	2053      	movs	r0, #83	; 0x53
	gpio_set_pin_function(PC16, PINMUX_PC16L_GMAC_GTX2);
	gpio_set_pin_function(PC17, PINMUX_PC17L_GMAC_GTX3);
	gpio_set_pin_function(PA14, PINMUX_PA14L_GMAC_GTXCK);
	gpio_set_pin_function(PA17, PINMUX_PA17L_GMAC_GTXEN);
	gpio_set_pin_function(PC19, PINMUX_PC19L_GMAC_GTXER);
}
     edc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     ee0:	4718      	bx	r3
     ee2:	bf00      	nop
     ee4:	0055000b 	.word	0x0055000b
     ee8:	00000aa5 	.word	0x00000aa5
     eec:	0010000b 	.word	0x0010000b
     ef0:	004b000b 	.word	0x004b000b
     ef4:	004c000b 	.word	0x004c000b
     ef8:	000d000b 	.word	0x000d000b
     efc:	000c000b 	.word	0x000c000b
     f00:	004f000b 	.word	0x004f000b
     f04:	004e000b 	.word	0x004e000b
     f08:	0052000b 	.word	0x0052000b
     f0c:	0054000b 	.word	0x0054000b
     f10:	000f000b 	.word	0x000f000b
     f14:	0012000b 	.word	0x0012000b
     f18:	0013000b 	.word	0x0013000b
     f1c:	0050000b 	.word	0x0050000b
     f20:	0051000b 	.word	0x0051000b
     f24:	000e000b 	.word	0x000e000b
     f28:	0011000b 	.word	0x0011000b
     f2c:	0053000b 	.word	0x0053000b

00000f30 <ETHERNET_MAC_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_GMAC;
     f30:	4b04      	ldr	r3, [pc, #16]	; (f44 <ETHERNET_MAC_0_CLOCK_init+0x14>)
     f32:	691a      	ldr	r2, [r3, #16]
     f34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
     f38:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_GMAC;
     f3a:	69da      	ldr	r2, [r3, #28]
     f3c:	f042 0204 	orr.w	r2, r2, #4
     f40:	61da      	str	r2, [r3, #28]
     f42:	4770      	bx	lr
     f44:	40000800 	.word	0x40000800

00000f48 <ETHERNET_MAC_0_init>:
	hri_mclk_set_AHBMASK_GMAC_bit(MCLK);
	hri_mclk_set_APBCMASK_GMAC_bit(MCLK);
}

void ETHERNET_MAC_0_init(void)
{
     f48:	b510      	push	{r4, lr}
	ETHERNET_MAC_0_CLOCK_init();
     f4a:	4b05      	ldr	r3, [pc, #20]	; (f60 <ETHERNET_MAC_0_init+0x18>)
     f4c:	4798      	blx	r3
	mac_async_init(&ETHERNET_MAC_0, GMAC);
     f4e:	4b05      	ldr	r3, [pc, #20]	; (f64 <ETHERNET_MAC_0_init+0x1c>)
     f50:	4905      	ldr	r1, [pc, #20]	; (f68 <ETHERNET_MAC_0_init+0x20>)
     f52:	4806      	ldr	r0, [pc, #24]	; (f6c <ETHERNET_MAC_0_init+0x24>)
     f54:	4798      	blx	r3
	ETHERNET_MAC_0_PORT_init();
     f56:	4b06      	ldr	r3, [pc, #24]	; (f70 <ETHERNET_MAC_0_init+0x28>)
}
     f58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ETHERNET_MAC_0_PORT_init();
     f5c:	4718      	bx	r3
     f5e:	bf00      	nop
     f60:	00000f31 	.word	0x00000f31
     f64:	0000154d 	.word	0x0000154d
     f68:	42000800 	.word	0x42000800
     f6c:	20007528 	.word	0x20007528
     f70:	00000e6d 	.word	0x00000e6d

00000f74 <system_init>:

void system_init(void)
{
     f74:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     f76:	4b15      	ldr	r3, [pc, #84]	; (fcc <system_init+0x58>)
     f78:	4798      	blx	r3
	init_mcu();
	ADC_0_init();
     f7a:	4b15      	ldr	r3, [pc, #84]	; (fd0 <system_init+0x5c>)
     f7c:	4798      	blx	r3
	CRYPTOGRAPHY_0_init();
     f7e:	4b15      	ldr	r3, [pc, #84]	; (fd4 <system_init+0x60>)
     f80:	4798      	blx	r3
	CRC_0_init();
     f82:	4b15      	ldr	r3, [pc, #84]	; (fd8 <system_init+0x64>)
     f84:	4798      	blx	r3
	HASH_ALGORITHM_0_init();
     f86:	4b15      	ldr	r3, [pc, #84]	; (fdc <system_init+0x68>)
     f88:	4798      	blx	r3
	FLASH_0_init();
     f8a:	4b15      	ldr	r3, [pc, #84]	; (fe0 <system_init+0x6c>)
     f8c:	4798      	blx	r3
	USART_0_init();
     f8e:	4b15      	ldr	r3, [pc, #84]	; (fe4 <system_init+0x70>)
     f90:	4798      	blx	r3
	USART_1_init();
     f92:	4b15      	ldr	r3, [pc, #84]	; (fe8 <system_init+0x74>)
     f94:	4798      	blx	r3
	delay_driver_init();
     f96:	4b15      	ldr	r3, [pc, #84]	; (fec <system_init+0x78>)
     f98:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     f9a:	4a15      	ldr	r2, [pc, #84]	; (ff0 <system_init+0x7c>)
     f9c:	6953      	ldr	r3, [r2, #20]
     f9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     fa2:	6153      	str	r3, [r2, #20]
     fa4:	4b13      	ldr	r3, [pc, #76]	; (ff4 <system_init+0x80>)
     fa6:	2240      	movs	r2, #64	; 0x40
     fa8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	timer_init(&TIMER_0, TC0, _tc_get_timer());
     fac:	4b12      	ldr	r3, [pc, #72]	; (ff8 <system_init+0x84>)
     fae:	4798      	blx	r3
     fb0:	4912      	ldr	r1, [pc, #72]	; (ffc <system_init+0x88>)
     fb2:	4b13      	ldr	r3, [pc, #76]	; (1000 <system_init+0x8c>)
     fb4:	4602      	mov	r2, r0
     fb6:	4813      	ldr	r0, [pc, #76]	; (1004 <system_init+0x90>)
     fb8:	4798      	blx	r3
	TIMER_0_init();
	USB_0_init();
     fba:	4b13      	ldr	r3, [pc, #76]	; (1008 <system_init+0x94>)
     fbc:	4798      	blx	r3
	WDT_0_init();
     fbe:	4b13      	ldr	r3, [pc, #76]	; (100c <system_init+0x98>)
     fc0:	4798      	blx	r3
	ETHERNET_MAC_0_init();
     fc2:	4b13      	ldr	r3, [pc, #76]	; (1010 <system_init+0x9c>)
}
     fc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ETHERNET_MAC_0_init();
     fc8:	4718      	bx	r3
     fca:	bf00      	nop
     fcc:	0000235d 	.word	0x0000235d
     fd0:	00000b8d 	.word	0x00000b8d
     fd4:	00000bb9 	.word	0x00000bb9
     fd8:	00000bdd 	.word	0x00000bdd
     fdc:	00000c19 	.word	0x00000c19
     fe0:	00000c4d 	.word	0x00000c4d
     fe4:	00000cb5 	.word	0x00000cb5
     fe8:	00000d31 	.word	0x00000d31
     fec:	00000d69 	.word	0x00000d69
     ff0:	40000800 	.word	0x40000800
     ff4:	40001c00 	.word	0x40001c00
     ff8:	000032eb 	.word	0x000032eb
     ffc:	40003800 	.word	0x40003800
    1000:	00001725 	.word	0x00001725
    1004:	20007544 	.word	0x20007544
    1008:	00000e05 	.word	0x00000e05
    100c:	00000e35 	.word	0x00000e35
    1010:	00000f49 	.word	0x00000f49

00001014 <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
    1014:	b570      	push	{r4, r5, r6, lr}
    1016:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    1018:	4604      	mov	r4, r0
    101a:	b160      	cbz	r0, 1036 <adc_sync_init+0x22>
    101c:	1c08      	adds	r0, r1, #0
    101e:	bf18      	it	ne
    1020:	2001      	movne	r0, #1
    1022:	4905      	ldr	r1, [pc, #20]	; (1038 <adc_sync_init+0x24>)
    1024:	4b05      	ldr	r3, [pc, #20]	; (103c <adc_sync_init+0x28>)
    1026:	2239      	movs	r2, #57	; 0x39
    1028:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
    102a:	4629      	mov	r1, r5
    102c:	4620      	mov	r0, r4
    102e:	4b04      	ldr	r3, [pc, #16]	; (1040 <adc_sync_init+0x2c>)
}
    1030:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return _adc_sync_init(&descr->device, hw);
    1034:	4718      	bx	r3
    1036:	e7f4      	b.n	1022 <adc_sync_init+0xe>
    1038:	0000c43d 	.word	0x0000c43d
    103c:	00001fdd 	.word	0x00001fdd
    1040:	00002249 	.word	0x00002249

00001044 <adc_sync_enable_channel>:

/**
 * \brief Enable ADC
 */
int32_t adc_sync_enable_channel(struct adc_sync_descriptor *const descr, const uint8_t channel)
{
    1044:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr);
    1046:	4604      	mov	r4, r0
    1048:	3000      	adds	r0, #0
    104a:	bf18      	it	ne
    104c:	2001      	movne	r0, #1
{
    104e:	460d      	mov	r5, r1
	ASSERT(descr);
    1050:	224e      	movs	r2, #78	; 0x4e
    1052:	4904      	ldr	r1, [pc, #16]	; (1064 <adc_sync_enable_channel+0x20>)
    1054:	4b04      	ldr	r3, [pc, #16]	; (1068 <adc_sync_enable_channel+0x24>)
    1056:	4798      	blx	r3
	_adc_sync_enable_channel(&descr->device, channel);
    1058:	4620      	mov	r0, r4
    105a:	4629      	mov	r1, r5
    105c:	4b03      	ldr	r3, [pc, #12]	; (106c <adc_sync_enable_channel+0x28>)
    105e:	4798      	blx	r3

	return ERR_NONE;
}
    1060:	2000      	movs	r0, #0
    1062:	bd38      	pop	{r3, r4, r5, pc}
    1064:	0000c43d 	.word	0x0000c43d
    1068:	00001fdd 	.word	0x00001fdd
    106c:	00002281 	.word	0x00002281

00001070 <adc_sync_read_channel>:
/*
 * \brief Read data from ADC
 */
int32_t adc_sync_read_channel(struct adc_sync_descriptor *const descr, const uint8_t channel, uint8_t *const buffer,
                              const uint16_t length)
{
    1070:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1074:	4688      	mov	r8, r1
    1076:	4617      	mov	r7, r2
    1078:	461d      	mov	r5, r3
	uint8_t  data_size;
	uint16_t offset = 0;

	ASSERT(descr && buffer && length);
    107a:	4604      	mov	r4, r0
    107c:	2800      	cmp	r0, #0
    107e:	d03b      	beq.n	10f8 <adc_sync_read_channel+0x88>
    1080:	2a00      	cmp	r2, #0
    1082:	d03a      	beq.n	10fa <adc_sync_read_channel+0x8a>
    1084:	1c18      	adds	r0, r3, #0
    1086:	bf18      	it	ne
    1088:	2001      	movne	r0, #1
    108a:	2267      	movs	r2, #103	; 0x67
    108c:	491c      	ldr	r1, [pc, #112]	; (1100 <adc_sync_read_channel+0x90>)
    108e:	f8df 907c 	ldr.w	r9, [pc, #124]	; 110c <adc_sync_read_channel+0x9c>
		_adc_sync_convert(&descr->device);

		while (!_adc_sync_is_channel_conversion_done(&descr->device, channel))
			;

		result         = _adc_sync_read_channel_data(&descr->device, channel);
    1092:	f8df b07c 	ldr.w	fp, [pc, #124]	; 1110 <adc_sync_read_channel+0xa0>
	ASSERT(descr && buffer && length);
    1096:	47c8      	blx	r9
	data_size = _adc_sync_get_data_size(&descr->device);
    1098:	4b1a      	ldr	r3, [pc, #104]	; (1104 <adc_sync_read_channel+0x94>)
    109a:	4620      	mov	r0, r4
    109c:	4798      	blx	r3
    109e:	4606      	mov	r6, r0
	ASSERT(!(length % data_size));
    10a0:	fb95 f0f0 	sdiv	r0, r5, r0
    10a4:	fb06 5010 	mls	r0, r6, r0, r5
    10a8:	fab0 f080 	clz	r0, r0
    10ac:	2269      	movs	r2, #105	; 0x69
    10ae:	4914      	ldr	r1, [pc, #80]	; (1100 <adc_sync_read_channel+0x90>)
    10b0:	0940      	lsrs	r0, r0, #5
    10b2:	47c8      	blx	r9
		_adc_sync_convert(&descr->device);
    10b4:	f8df 905c 	ldr.w	r9, [pc, #92]	; 1114 <adc_sync_read_channel+0xa4>
	uint16_t offset = 0;
    10b8:	f04f 0a00 	mov.w	sl, #0
		_adc_sync_convert(&descr->device);
    10bc:	4620      	mov	r0, r4
    10be:	47c8      	blx	r9
		while (!_adc_sync_is_channel_conversion_done(&descr->device, channel))
    10c0:	4641      	mov	r1, r8
    10c2:	4620      	mov	r0, r4
    10c4:	4b10      	ldr	r3, [pc, #64]	; (1108 <adc_sync_read_channel+0x98>)
    10c6:	4798      	blx	r3
    10c8:	2800      	cmp	r0, #0
    10ca:	d0f9      	beq.n	10c0 <adc_sync_read_channel+0x50>
		result         = _adc_sync_read_channel_data(&descr->device, channel);
    10cc:	4641      	mov	r1, r8
    10ce:	4620      	mov	r0, r4
    10d0:	47d8      	blx	fp
		buffer[offset] = result;
		if (1 < data_size) {
    10d2:	2e01      	cmp	r6, #1
			buffer[offset + 1] = result >> 8;
    10d4:	bf88      	it	hi
    10d6:	eb07 020a 	addhi.w	r2, r7, sl
    10da:	eb0a 0306 	add.w	r3, sl, r6
		buffer[offset] = result;
    10de:	f807 000a 	strb.w	r0, [r7, sl]
			buffer[offset + 1] = result >> 8;
    10e2:	bf88      	it	hi
    10e4:	0a00      	lsrhi	r0, r0, #8
    10e6:	fa1f fa83 	uxth.w	sl, r3
    10ea:	bf88      	it	hi
    10ec:	7050      	strbhi	r0, [r2, #1]
		}
		offset += data_size;
	} while (offset < length);
    10ee:	4555      	cmp	r5, sl
    10f0:	d8e4      	bhi.n	10bc <adc_sync_read_channel+0x4c>

	return offset;
}
    10f2:	4650      	mov	r0, sl
    10f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    10f8:	e7c7      	b.n	108a <adc_sync_read_channel+0x1a>
	ASSERT(descr && buffer && length);
    10fa:	4610      	mov	r0, r2
    10fc:	e7c5      	b.n	108a <adc_sync_read_channel+0x1a>
    10fe:	bf00      	nop
    1100:	0000c43d 	.word	0x0000c43d
    1104:	0000228d 	.word	0x0000228d
    1108:	0000229f 	.word	0x0000229f
    110c:	00001fdd 	.word	0x00001fdd
    1110:	000022c9 	.word	0x000022c9
    1114:	000022ad 	.word	0x000022ad

00001118 <aes_sync_init>:
                                                          uint8_t *iv, uint32_t *iv_ofst);
/**
 * \brief Initialize AES.
 */
int32_t aes_sync_init(struct aes_sync_descriptor *descr, void *const hw)
{
    1118:	b570      	push	{r4, r5, r6, lr}
    111a:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    111c:	4604      	mov	r4, r0
    111e:	b160      	cbz	r0, 113a <aes_sync_init+0x22>
    1120:	1c08      	adds	r0, r1, #0
    1122:	bf18      	it	ne
    1124:	2001      	movne	r0, #1
    1126:	4905      	ldr	r1, [pc, #20]	; (113c <aes_sync_init+0x24>)
    1128:	4b05      	ldr	r3, [pc, #20]	; (1140 <aes_sync_init+0x28>)
    112a:	2232      	movs	r2, #50	; 0x32
    112c:	4798      	blx	r3

	return _aes_sync_init(&descr->dev, hw);
    112e:	4629      	mov	r1, r5
    1130:	4620      	mov	r0, r4
    1132:	4b04      	ldr	r3, [pc, #16]	; (1144 <aes_sync_init+0x2c>)
}
    1134:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return _aes_sync_init(&descr->dev, hw);
    1138:	4718      	bx	r3
    113a:	e7f4      	b.n	1126 <aes_sync_init+0xe>
    113c:	0000c457 	.word	0x0000c457
    1140:	00001fdd 	.word	0x00001fdd
    1144:	000022d3 	.word	0x000022d3

00001148 <aes_sync_enable>:

/**
 * \brief Enable AES
 */
int32_t aes_sync_enable(struct aes_sync_descriptor *descr)
{
    1148:	b510      	push	{r4, lr}
	ASSERT(descr);
    114a:	4604      	mov	r4, r0
    114c:	3000      	adds	r0, #0
    114e:	bf18      	it	ne
    1150:	2001      	movne	r0, #1
    1152:	4b04      	ldr	r3, [pc, #16]	; (1164 <aes_sync_enable+0x1c>)
    1154:	4904      	ldr	r1, [pc, #16]	; (1168 <aes_sync_enable+0x20>)
    1156:	2246      	movs	r2, #70	; 0x46
    1158:	4798      	blx	r3

	return _aes_sync_enable(&descr->dev);
    115a:	4620      	mov	r0, r4
    115c:	4b03      	ldr	r3, [pc, #12]	; (116c <aes_sync_enable+0x24>)
}
    115e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return _aes_sync_enable(&descr->dev);
    1162:	4718      	bx	r3
    1164:	00001fdd 	.word	0x00001fdd
    1168:	0000c457 	.word	0x0000c457
    116c:	000022e3 	.word	0x000022e3

00001170 <aes_sync_set_encrypt_key>:

/**
 * \brief              Set AES Key (encryption)
 */
int32_t aes_sync_set_encrypt_key(struct aes_sync_descriptor *descr, const uint8_t *key, const enum aes_keysize size)
{
    1170:	b570      	push	{r4, r5, r6, lr}
    1172:	460d      	mov	r5, r1
    1174:	4616      	mov	r6, r2
	ASSERT(descr && key);
    1176:	4604      	mov	r4, r0
    1178:	b168      	cbz	r0, 1196 <aes_sync_set_encrypt_key+0x26>
    117a:	1c08      	adds	r0, r1, #0
    117c:	bf18      	it	ne
    117e:	2001      	movne	r0, #1
    1180:	225a      	movs	r2, #90	; 0x5a
    1182:	4905      	ldr	r1, [pc, #20]	; (1198 <aes_sync_set_encrypt_key+0x28>)
    1184:	4b05      	ldr	r3, [pc, #20]	; (119c <aes_sync_set_encrypt_key+0x2c>)
    1186:	4798      	blx	r3
	return _aes_sync_set_key(&descr->dev, key, size);
    1188:	4632      	mov	r2, r6
    118a:	4629      	mov	r1, r5
    118c:	4620      	mov	r0, r4
    118e:	4b04      	ldr	r3, [pc, #16]	; (11a0 <aes_sync_set_encrypt_key+0x30>)
}
    1190:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return _aes_sync_set_key(&descr->dev, key, size);
    1194:	4718      	bx	r3
    1196:	e7f3      	b.n	1180 <aes_sync_set_encrypt_key+0x10>
    1198:	0000c457 	.word	0x0000c457
    119c:	00001fdd 	.word	0x00001fdd
    11a0:	000022e9 	.word	0x000022e9

000011a4 <atomic_enter_critical>:
 */
__attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    11a4:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    11a8:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    11aa:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    11ac:	f3bf 8f5f 	dmb	sy
    11b0:	4770      	bx	lr

000011b2 <atomic_leave_critical>:
    11b2:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    11b6:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    11b8:	f383 8810 	msr	PRIMASK, r3
    11bc:	4770      	bx	lr
	...

000011c0 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    11c0:	b570      	push	{r4, r5, r6, lr}
    11c2:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    11c4:	4604      	mov	r4, r0
    11c6:	b160      	cbz	r0, 11e2 <crc_sync_init+0x22>
    11c8:	1c08      	adds	r0, r1, #0
    11ca:	bf18      	it	ne
    11cc:	2001      	movne	r0, #1
    11ce:	4905      	ldr	r1, [pc, #20]	; (11e4 <crc_sync_init+0x24>)
    11d0:	4b05      	ldr	r3, [pc, #20]	; (11e8 <crc_sync_init+0x28>)
    11d2:	222b      	movs	r2, #43	; 0x2b
    11d4:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    11d6:	4629      	mov	r1, r5
    11d8:	4620      	mov	r0, r4
    11da:	4b04      	ldr	r3, [pc, #16]	; (11ec <crc_sync_init+0x2c>)
}
    11dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return _crc_sync_init(&descr->dev, hw);
    11e0:	4718      	bx	r3
    11e2:	e7f4      	b.n	11ce <crc_sync_init+0xe>
    11e4:	0000c471 	.word	0x0000c471
    11e8:	00001fdd 	.word	0x00001fdd
    11ec:	000025ad 	.word	0x000025ad

000011f0 <delay_init>:
/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
	_delay_init(hardware = hw);
    11f0:	4b01      	ldr	r3, [pc, #4]	; (11f8 <delay_init+0x8>)
    11f2:	6018      	str	r0, [r3, #0]
    11f4:	4b01      	ldr	r3, [pc, #4]	; (11fc <delay_init+0xc>)
    11f6:	4718      	bx	r3
    11f8:	20000330 	.word	0x20000330
    11fc:	0000310d 	.word	0x0000310d

00001200 <delay_us>:
/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
	_delay_cycles(hardware, _get_cycles_for_us(us));
    1200:	4b05      	ldr	r3, [pc, #20]	; (1218 <delay_us+0x18>)
{
    1202:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
    1204:	681c      	ldr	r4, [r3, #0]
    1206:	4b05      	ldr	r3, [pc, #20]	; (121c <delay_us+0x1c>)
    1208:	4798      	blx	r3
    120a:	4b05      	ldr	r3, [pc, #20]	; (1220 <delay_us+0x20>)
    120c:	4601      	mov	r1, r0
    120e:	4620      	mov	r0, r4
}
    1210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
    1214:	4718      	bx	r3
    1216:	bf00      	nop
    1218:	20000330 	.word	0x20000330
    121c:	00002341 	.word	0x00002341
    1220:	00003121 	.word	0x00003121

00001224 <delay_ms>:
/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    1224:	4b05      	ldr	r3, [pc, #20]	; (123c <delay_ms+0x18>)
{
    1226:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    1228:	681c      	ldr	r4, [r3, #0]
    122a:	4b05      	ldr	r3, [pc, #20]	; (1240 <delay_ms+0x1c>)
    122c:	4798      	blx	r3
    122e:	4b05      	ldr	r3, [pc, #20]	; (1244 <delay_ms+0x20>)
    1230:	4601      	mov	r1, r0
    1232:	4620      	mov	r0, r4
}
    1234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    1238:	4718      	bx	r3
    123a:	bf00      	nop
    123c:	20000330 	.word	0x20000330
    1240:	00002353 	.word	0x00002353
    1244:	00003121 	.word	0x00003121

00001248 <flash_ready>:
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
    1248:	6943      	ldr	r3, [r0, #20]
    124a:	b103      	cbz	r3, 124e <flash_ready+0x6>
		descr->callbacks.cb_ready(descr);
    124c:	4718      	bx	r3
    124e:	4770      	bx	lr

00001250 <flash_error>:
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
    1250:	6983      	ldr	r3, [r0, #24]
    1252:	b103      	cbz	r3, 1256 <flash_error+0x6>
		descr->callbacks.cb_error(descr);
    1254:	4718      	bx	r3
    1256:	4770      	bx	lr

00001258 <flash_is_address_aligned>:
{
    1258:	b538      	push	{r3, r4, r5, lr}
	ASSERT(flash);
    125a:	4605      	mov	r5, r0
    125c:	3000      	adds	r0, #0
    125e:	bf18      	it	ne
    1260:	2001      	movne	r0, #1
{
    1262:	460c      	mov	r4, r1
	ASSERT(flash);
    1264:	f240 1217 	movw	r2, #279	; 0x117
    1268:	4906      	ldr	r1, [pc, #24]	; (1284 <flash_is_address_aligned+0x2c>)
    126a:	4b07      	ldr	r3, [pc, #28]	; (1288 <flash_is_address_aligned+0x30>)
    126c:	4798      	blx	r3
	uint32_t page_size = _flash_get_page_size(&flash->dev);
    126e:	4628      	mov	r0, r5
    1270:	4b06      	ldr	r3, [pc, #24]	; (128c <flash_is_address_aligned+0x34>)
    1272:	4798      	blx	r3
	if (flash_addr & (page_size - 1)) {
    1274:	3801      	subs	r0, #1
    1276:	4220      	tst	r0, r4
}
    1278:	bf14      	ite	ne
    127a:	f06f 000d 	mvnne.w	r0, #13
    127e:	2000      	moveq	r0, #0
    1280:	bd38      	pop	{r3, r4, r5, pc}
    1282:	bf00      	nop
    1284:	0000c48b 	.word	0x0000c48b
    1288:	00001fdd 	.word	0x00001fdd
    128c:	00002a69 	.word	0x00002a69

00001290 <flash_init>:
{
    1290:	b538      	push	{r3, r4, r5, lr}
    1292:	460d      	mov	r5, r1
	ASSERT(flash && hw);
    1294:	4604      	mov	r4, r0
    1296:	b180      	cbz	r0, 12ba <flash_init+0x2a>
    1298:	1c08      	adds	r0, r1, #0
    129a:	bf18      	it	ne
    129c:	2001      	movne	r0, #1
    129e:	4907      	ldr	r1, [pc, #28]	; (12bc <flash_init+0x2c>)
    12a0:	4b07      	ldr	r3, [pc, #28]	; (12c0 <flash_init+0x30>)
    12a2:	2238      	movs	r2, #56	; 0x38
    12a4:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
    12a6:	4629      	mov	r1, r5
    12a8:	4620      	mov	r0, r4
    12aa:	4b06      	ldr	r3, [pc, #24]	; (12c4 <flash_init+0x34>)
    12ac:	4798      	blx	r3
	if (rc) {
    12ae:	b918      	cbnz	r0, 12b8 <flash_init+0x28>
	flash->dev.flash_cb.ready_cb = flash_ready;
    12b0:	4b05      	ldr	r3, [pc, #20]	; (12c8 <flash_init+0x38>)
    12b2:	6023      	str	r3, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
    12b4:	4b05      	ldr	r3, [pc, #20]	; (12cc <flash_init+0x3c>)
    12b6:	6063      	str	r3, [r4, #4]
}
    12b8:	bd38      	pop	{r3, r4, r5, pc}
    12ba:	e7f0      	b.n	129e <flash_init+0xe>
    12bc:	0000c48b 	.word	0x0000c48b
    12c0:	00001fdd 	.word	0x00001fdd
    12c4:	000029ed 	.word	0x000029ed
    12c8:	00001249 	.word	0x00001249
    12cc:	00001251 	.word	0x00001251

000012d0 <flash_read>:
{
    12d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    12d4:	460e      	mov	r6, r1
    12d6:	4617      	mov	r7, r2
    12d8:	4698      	mov	r8, r3
	ASSERT(flash && buffer && length);
    12da:	4604      	mov	r4, r0
    12dc:	b1f0      	cbz	r0, 131c <flash_read+0x4c>
    12de:	b1f2      	cbz	r2, 131e <flash_read+0x4e>
    12e0:	1c18      	adds	r0, r3, #0
    12e2:	bf18      	it	ne
    12e4:	2001      	movne	r0, #1
    12e6:	2256      	movs	r2, #86	; 0x56
    12e8:	4910      	ldr	r1, [pc, #64]	; (132c <flash_read+0x5c>)
    12ea:	4b11      	ldr	r3, [pc, #68]	; (1330 <flash_read+0x60>)
    12ec:	4798      	blx	r3
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    12ee:	4b11      	ldr	r3, [pc, #68]	; (1334 <flash_read+0x64>)
    12f0:	4620      	mov	r0, r4
    12f2:	4798      	blx	r3
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    12f4:	4b10      	ldr	r3, [pc, #64]	; (1338 <flash_read+0x68>)
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    12f6:	4605      	mov	r5, r0
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    12f8:	4620      	mov	r0, r4
    12fa:	4798      	blx	r3
	if ((src_addr > page_size * total_pages) || (src_addr + length > page_size * total_pages)) {
    12fc:	4368      	muls	r0, r5
    12fe:	42b0      	cmp	r0, r6
    1300:	d30f      	bcc.n	1322 <flash_read+0x52>
    1302:	eb08 0306 	add.w	r3, r8, r6
    1306:	4298      	cmp	r0, r3
    1308:	d30b      	bcc.n	1322 <flash_read+0x52>
	_flash_read(&flash->dev, src_addr, buffer, length);
    130a:	4620      	mov	r0, r4
    130c:	4643      	mov	r3, r8
    130e:	463a      	mov	r2, r7
    1310:	4631      	mov	r1, r6
    1312:	4c0a      	ldr	r4, [pc, #40]	; (133c <flash_read+0x6c>)
    1314:	47a0      	blx	r4
	return ERR_NONE;
    1316:	2000      	movs	r0, #0
    1318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    131c:	e7e3      	b.n	12e6 <flash_read+0x16>
	ASSERT(flash && buffer && length);
    131e:	4610      	mov	r0, r2
    1320:	e7e1      	b.n	12e6 <flash_read+0x16>
		return ERR_BAD_ADDRESS;
    1322:	f06f 000d 	mvn.w	r0, #13
}
    1326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    132a:	bf00      	nop
    132c:	0000c48b 	.word	0x0000c48b
    1330:	00001fdd 	.word	0x00001fdd
    1334:	00002a69 	.word	0x00002a69
    1338:	00002a6f 	.word	0x00002a6f
    133c:	00002a77 	.word	0x00002a77

00001340 <flash_write>:
{
    1340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1344:	460e      	mov	r6, r1
    1346:	4617      	mov	r7, r2
    1348:	4698      	mov	r8, r3
	ASSERT(flash && buffer && length);
    134a:	4605      	mov	r5, r0
    134c:	b320      	cbz	r0, 1398 <flash_write+0x58>
    134e:	b322      	cbz	r2, 139a <flash_write+0x5a>
    1350:	1c18      	adds	r0, r3, #0
    1352:	bf18      	it	ne
    1354:	2001      	movne	r0, #1
    1356:	226a      	movs	r2, #106	; 0x6a
    1358:	4915      	ldr	r1, [pc, #84]	; (13b0 <flash_write+0x70>)
    135a:	4b16      	ldr	r3, [pc, #88]	; (13b4 <flash_write+0x74>)
    135c:	4798      	blx	r3
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    135e:	4b16      	ldr	r3, [pc, #88]	; (13b8 <flash_write+0x78>)
    1360:	4628      	mov	r0, r5
    1362:	4798      	blx	r3
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    1364:	4b15      	ldr	r3, [pc, #84]	; (13bc <flash_write+0x7c>)
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    1366:	4604      	mov	r4, r0
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    1368:	4628      	mov	r0, r5
    136a:	4798      	blx	r3
	if ((dst_addr > page_size * total_pages) || (dst_addr + length > page_size * total_pages)) {
    136c:	4360      	muls	r0, r4
    136e:	42b0      	cmp	r0, r6
    1370:	d315      	bcc.n	139e <flash_write+0x5e>
    1372:	eb08 0306 	add.w	r3, r8, r6
    1376:	4298      	cmp	r0, r3
    1378:	d311      	bcc.n	139e <flash_write+0x5e>
	if (_flash_is_locked(&flash->dev, dst_addr)) {
    137a:	4631      	mov	r1, r6
    137c:	4628      	mov	r0, r5
    137e:	4b10      	ldr	r3, [pc, #64]	; (13c0 <flash_write+0x80>)
    1380:	4798      	blx	r3
    1382:	4604      	mov	r4, r0
    1384:	b978      	cbnz	r0, 13a6 <flash_write+0x66>
	_flash_write(&flash->dev, dst_addr, buffer, length);
    1386:	4628      	mov	r0, r5
    1388:	4643      	mov	r3, r8
    138a:	463a      	mov	r2, r7
    138c:	4631      	mov	r1, r6
    138e:	4d0d      	ldr	r5, [pc, #52]	; (13c4 <flash_write+0x84>)
    1390:	47a8      	blx	r5
	return ERR_NONE;
    1392:	4620      	mov	r0, r4
    1394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1398:	e7dd      	b.n	1356 <flash_write+0x16>
	ASSERT(flash && buffer && length);
    139a:	4610      	mov	r0, r2
    139c:	e7db      	b.n	1356 <flash_write+0x16>
		return ERR_BAD_ADDRESS;
    139e:	f06f 000d 	mvn.w	r0, #13
    13a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_DENIED;
    13a6:	f06f 0010 	mvn.w	r0, #16
}
    13aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    13ae:	bf00      	nop
    13b0:	0000c48b 	.word	0x0000c48b
    13b4:	00001fdd 	.word	0x00001fdd
    13b8:	00002a69 	.word	0x00002a69
    13bc:	00002a6f 	.word	0x00002a6f
    13c0:	00002c75 	.word	0x00002c75
    13c4:	00002a95 	.word	0x00002a95

000013c8 <flash_append>:
{
    13c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    13cc:	460e      	mov	r6, r1
    13ce:	4617      	mov	r7, r2
    13d0:	4698      	mov	r8, r3
	ASSERT(flash && buffer && length);
    13d2:	4605      	mov	r5, r0
    13d4:	b320      	cbz	r0, 1420 <flash_append+0x58>
    13d6:	b322      	cbz	r2, 1422 <flash_append+0x5a>
    13d8:	1c18      	adds	r0, r3, #0
    13da:	bf18      	it	ne
    13dc:	2001      	movne	r0, #1
    13de:	2282      	movs	r2, #130	; 0x82
    13e0:	4915      	ldr	r1, [pc, #84]	; (1438 <flash_append+0x70>)
    13e2:	4b16      	ldr	r3, [pc, #88]	; (143c <flash_append+0x74>)
    13e4:	4798      	blx	r3
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    13e6:	4b16      	ldr	r3, [pc, #88]	; (1440 <flash_append+0x78>)
    13e8:	4628      	mov	r0, r5
    13ea:	4798      	blx	r3
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    13ec:	4b15      	ldr	r3, [pc, #84]	; (1444 <flash_append+0x7c>)
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    13ee:	4604      	mov	r4, r0
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    13f0:	4628      	mov	r0, r5
    13f2:	4798      	blx	r3
	if ((dst_addr > page_size * total_pages) || (dst_addr + length > page_size * total_pages)) {
    13f4:	4360      	muls	r0, r4
    13f6:	42b0      	cmp	r0, r6
    13f8:	d315      	bcc.n	1426 <flash_append+0x5e>
    13fa:	eb08 0306 	add.w	r3, r8, r6
    13fe:	4298      	cmp	r0, r3
    1400:	d311      	bcc.n	1426 <flash_append+0x5e>
	if (_flash_is_locked(&flash->dev, dst_addr)) {
    1402:	4631      	mov	r1, r6
    1404:	4628      	mov	r0, r5
    1406:	4b10      	ldr	r3, [pc, #64]	; (1448 <flash_append+0x80>)
    1408:	4798      	blx	r3
    140a:	4604      	mov	r4, r0
    140c:	b978      	cbnz	r0, 142e <flash_append+0x66>
	_flash_append(&flash->dev, dst_addr, buffer, length);
    140e:	4628      	mov	r0, r5
    1410:	4643      	mov	r3, r8
    1412:	463a      	mov	r2, r7
    1414:	4631      	mov	r1, r6
    1416:	4d0d      	ldr	r5, [pc, #52]	; (144c <flash_append+0x84>)
    1418:	47a8      	blx	r5
	return ERR_NONE;
    141a:	4620      	mov	r0, r4
    141c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1420:	e7dd      	b.n	13de <flash_append+0x16>
	ASSERT(flash && buffer && length);
    1422:	4610      	mov	r0, r2
    1424:	e7db      	b.n	13de <flash_append+0x16>
		return ERR_BAD_ADDRESS;
    1426:	f06f 000d 	mvn.w	r0, #13
    142a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_DENIED;
    142e:	f06f 0010 	mvn.w	r0, #16
}
    1432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1436:	bf00      	nop
    1438:	0000c48b 	.word	0x0000c48b
    143c:	00001fdd 	.word	0x00001fdd
    1440:	00002a69 	.word	0x00002a69
    1444:	00002a6f 	.word	0x00002a6f
    1448:	00002c75 	.word	0x00002c75
    144c:	00002b65 	.word	0x00002b65

00001450 <flash_erase>:
{
    1450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1454:	4688      	mov	r8, r1
    1456:	4617      	mov	r7, r2
	ASSERT(flash && page_nums);
    1458:	4604      	mov	r4, r0
    145a:	b318      	cbz	r0, 14a4 <flash_erase+0x54>
    145c:	1c10      	adds	r0, r2, #0
    145e:	bf18      	it	ne
    1460:	2001      	movne	r0, #1
    1462:	229a      	movs	r2, #154	; 0x9a
    1464:	4911      	ldr	r1, [pc, #68]	; (14ac <flash_erase+0x5c>)
    1466:	4b12      	ldr	r3, [pc, #72]	; (14b0 <flash_erase+0x60>)
    1468:	4798      	blx	r3
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    146a:	4b12      	ldr	r3, [pc, #72]	; (14b4 <flash_erase+0x64>)
    146c:	4620      	mov	r0, r4
    146e:	4798      	blx	r3
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    1470:	4b11      	ldr	r3, [pc, #68]	; (14b8 <flash_erase+0x68>)
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    1472:	4605      	mov	r5, r0
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    1474:	4620      	mov	r0, r4
    1476:	4798      	blx	r3
	rc = flash_is_address_aligned(flash, dst_addr);
    1478:	4641      	mov	r1, r8
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    147a:	4681      	mov	r9, r0
	rc = flash_is_address_aligned(flash, dst_addr);
    147c:	4b0f      	ldr	r3, [pc, #60]	; (14bc <flash_erase+0x6c>)
    147e:	4620      	mov	r0, r4
    1480:	4798      	blx	r3
	if (rc) {
    1482:	4606      	mov	r6, r0
    1484:	b958      	cbnz	r0, 149e <flash_erase+0x4e>
	if ((page_nums > total_pages) || (dst_addr / page_size + page_nums > total_pages)) {
    1486:	454f      	cmp	r7, r9
    1488:	d80d      	bhi.n	14a6 <flash_erase+0x56>
    148a:	fbb8 f5f5 	udiv	r5, r8, r5
    148e:	443d      	add	r5, r7
    1490:	45a9      	cmp	r9, r5
    1492:	d308      	bcc.n	14a6 <flash_erase+0x56>
	_flash_erase(&flash->dev, dst_addr, page_nums);
    1494:	463a      	mov	r2, r7
    1496:	4641      	mov	r1, r8
    1498:	4620      	mov	r0, r4
    149a:	4b09      	ldr	r3, [pc, #36]	; (14c0 <flash_erase+0x70>)
    149c:	4798      	blx	r3
}
    149e:	4630      	mov	r0, r6
    14a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    14a4:	e7dd      	b.n	1462 <flash_erase+0x12>
		return ERR_INVALID_ARG;
    14a6:	f06f 060c 	mvn.w	r6, #12
    14aa:	e7f8      	b.n	149e <flash_erase+0x4e>
    14ac:	0000c48b 	.word	0x0000c48b
    14b0:	00001fdd 	.word	0x00001fdd
    14b4:	00002a69 	.word	0x00002a69
    14b8:	00002a6f 	.word	0x00002a6f
    14bc:	00001259 	.word	0x00001259
    14c0:	00002bcd 	.word	0x00002bcd

000014c4 <flash_get_page_size>:
{
    14c4:	b510      	push	{r4, lr}
	ASSERT(flash);
    14c6:	4604      	mov	r4, r0
    14c8:	3000      	adds	r0, #0
    14ca:	bf18      	it	ne
    14cc:	2001      	movne	r0, #1
    14ce:	4b04      	ldr	r3, [pc, #16]	; (14e0 <flash_get_page_size+0x1c>)
    14d0:	4904      	ldr	r1, [pc, #16]	; (14e4 <flash_get_page_size+0x20>)
    14d2:	22f7      	movs	r2, #247	; 0xf7
    14d4:	4798      	blx	r3
	return _flash_get_page_size(&flash->dev);
    14d6:	4620      	mov	r0, r4
    14d8:	4b03      	ldr	r3, [pc, #12]	; (14e8 <flash_get_page_size+0x24>)
}
    14da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return _flash_get_page_size(&flash->dev);
    14de:	4718      	bx	r3
    14e0:	00001fdd 	.word	0x00001fdd
    14e4:	0000c48b 	.word	0x0000c48b
    14e8:	00002a69 	.word	0x00002a69

000014ec <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    14ec:	b570      	push	{r4, r5, r6, lr}
    14ee:	460d      	mov	r5, r1
    14f0:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    14f2:	4604      	mov	r4, r0
    14f4:	b168      	cbz	r0, 1512 <io_write+0x26>
    14f6:	1c08      	adds	r0, r1, #0
    14f8:	bf18      	it	ne
    14fa:	2001      	movne	r0, #1
    14fc:	2234      	movs	r2, #52	; 0x34
    14fe:	4905      	ldr	r1, [pc, #20]	; (1514 <io_write+0x28>)
    1500:	4b05      	ldr	r3, [pc, #20]	; (1518 <io_write+0x2c>)
    1502:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    1504:	6823      	ldr	r3, [r4, #0]
    1506:	4632      	mov	r2, r6
    1508:	4629      	mov	r1, r5
    150a:	4620      	mov	r0, r4
}
    150c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return io_descr->write(io_descr, buf, length);
    1510:	4718      	bx	r3
    1512:	e7f3      	b.n	14fc <io_write+0x10>
    1514:	0000c4a2 	.word	0x0000c4a2
    1518:	00001fdd 	.word	0x00001fdd

0000151c <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    151c:	b570      	push	{r4, r5, r6, lr}
    151e:	460d      	mov	r5, r1
    1520:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    1522:	4604      	mov	r4, r0
    1524:	b168      	cbz	r0, 1542 <io_read+0x26>
    1526:	1c08      	adds	r0, r1, #0
    1528:	bf18      	it	ne
    152a:	2001      	movne	r0, #1
    152c:	223d      	movs	r2, #61	; 0x3d
    152e:	4905      	ldr	r1, [pc, #20]	; (1544 <io_read+0x28>)
    1530:	4b05      	ldr	r3, [pc, #20]	; (1548 <io_read+0x2c>)
    1532:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    1534:	6863      	ldr	r3, [r4, #4]
    1536:	4632      	mov	r2, r6
    1538:	4629      	mov	r1, r5
    153a:	4620      	mov	r0, r4
}
    153c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return io_descr->read(io_descr, buf, length);
    1540:	4718      	bx	r3
    1542:	e7f3      	b.n	152c <io_read+0x10>
    1544:	0000c4a2 	.word	0x0000c4a2
    1548:	00001fdd 	.word	0x00001fdd

0000154c <mac_async_init>:

/**
 * \brief Initialize the MAC driver
 */
int32_t mac_async_init(struct mac_async_descriptor *const descr, void *const hw)
{
    154c:	b570      	push	{r4, r5, r6, lr}
    154e:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    1550:	4604      	mov	r4, r0
    1552:	b160      	cbz	r0, 156e <mac_async_init+0x22>
    1554:	1c08      	adds	r0, r1, #0
    1556:	bf18      	it	ne
    1558:	2001      	movne	r0, #1
    155a:	4905      	ldr	r1, [pc, #20]	; (1570 <mac_async_init+0x24>)
    155c:	4b05      	ldr	r3, [pc, #20]	; (1574 <mac_async_init+0x28>)
    155e:	2231      	movs	r2, #49	; 0x31
    1560:	4798      	blx	r3

	return _mac_async_init(&descr->dev, hw);
    1562:	4629      	mov	r1, r5
    1564:	4620      	mov	r0, r4
    1566:	4b04      	ldr	r3, [pc, #16]	; (1578 <mac_async_init+0x2c>)
}
    1568:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return _mac_async_init(&descr->dev, hw);
    156c:	4718      	bx	r3
    156e:	e7f4      	b.n	155a <mac_async_init+0xe>
    1570:	0000c4b6 	.word	0x0000c4b6
    1574:	00001fdd 	.word	0x00001fdd
    1578:	00002625 	.word	0x00002625

0000157c <mac_async_enable>:

/**
 * \brief Enable the MAC
 */
int32_t mac_async_enable(struct mac_async_descriptor *const descr)
{
    157c:	b510      	push	{r4, lr}
	ASSERT(descr);
    157e:	4604      	mov	r4, r0
    1580:	3000      	adds	r0, #0
    1582:	bf18      	it	ne
    1584:	2001      	movne	r0, #1
    1586:	4b04      	ldr	r3, [pc, #16]	; (1598 <mac_async_enable+0x1c>)
    1588:	4904      	ldr	r1, [pc, #16]	; (159c <mac_async_enable+0x20>)
    158a:	2245      	movs	r2, #69	; 0x45
    158c:	4798      	blx	r3

	return _mac_async_enable(&descr->dev);
    158e:	4620      	mov	r0, r4
    1590:	4b03      	ldr	r3, [pc, #12]	; (15a0 <mac_async_enable+0x24>)
}
    1592:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return _mac_async_enable(&descr->dev);
    1596:	4718      	bx	r3
    1598:	00001fdd 	.word	0x00001fdd
    159c:	0000c4b6 	.word	0x0000c4b6
    15a0:	00002709 	.word	0x00002709

000015a4 <mac_async_write>:
}
/**
 * \brief Write raw data to MAC
 */
int32_t mac_async_write(struct mac_async_descriptor *const descr, uint8_t *buf, uint32_t len)
{
    15a4:	b570      	push	{r4, r5, r6, lr}
    15a6:	460d      	mov	r5, r1
    15a8:	4616      	mov	r6, r2
	ASSERT(descr && buf && len);
    15aa:	4604      	mov	r4, r0
    15ac:	b170      	cbz	r0, 15cc <mac_async_write+0x28>
    15ae:	b171      	cbz	r1, 15ce <mac_async_write+0x2a>
    15b0:	1c10      	adds	r0, r2, #0
    15b2:	bf18      	it	ne
    15b4:	2001      	movne	r0, #1
    15b6:	2257      	movs	r2, #87	; 0x57
    15b8:	4906      	ldr	r1, [pc, #24]	; (15d4 <mac_async_write+0x30>)
    15ba:	4b07      	ldr	r3, [pc, #28]	; (15d8 <mac_async_write+0x34>)
    15bc:	4798      	blx	r3

	return _mac_async_write(&descr->dev, buf, len);
    15be:	4632      	mov	r2, r6
    15c0:	4629      	mov	r1, r5
    15c2:	4620      	mov	r0, r4
    15c4:	4b05      	ldr	r3, [pc, #20]	; (15dc <mac_async_write+0x38>)
}
    15c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return _mac_async_write(&descr->dev, buf, len);
    15ca:	4718      	bx	r3
    15cc:	e7f3      	b.n	15b6 <mac_async_write+0x12>
	ASSERT(descr && buf && len);
    15ce:	4608      	mov	r0, r1
    15d0:	e7f1      	b.n	15b6 <mac_async_write+0x12>
    15d2:	bf00      	nop
    15d4:	0000c4b6 	.word	0x0000c4b6
    15d8:	00001fdd 	.word	0x00001fdd
    15dc:	00002719 	.word	0x00002719

000015e0 <mac_async_read>:

/**
 * \brief Read raw data from MAC
 */
uint32_t mac_async_read(struct mac_async_descriptor *const descr, uint8_t *buf, uint32_t len)
{
    15e0:	b570      	push	{r4, r5, r6, lr}
	ASSERT(descr);
    15e2:	4604      	mov	r4, r0
    15e4:	3000      	adds	r0, #0
{
    15e6:	460d      	mov	r5, r1
    15e8:	4616      	mov	r6, r2
	ASSERT(descr);
    15ea:	4907      	ldr	r1, [pc, #28]	; (1608 <mac_async_read+0x28>)
    15ec:	4b07      	ldr	r3, [pc, #28]	; (160c <mac_async_read+0x2c>)
    15ee:	f04f 0261 	mov.w	r2, #97	; 0x61
    15f2:	bf18      	it	ne
    15f4:	2001      	movne	r0, #1
    15f6:	4798      	blx	r3

	return _mac_async_read(&descr->dev, buf, len);
    15f8:	4632      	mov	r2, r6
    15fa:	4629      	mov	r1, r5
    15fc:	4620      	mov	r0, r4
    15fe:	4b04      	ldr	r3, [pc, #16]	; (1610 <mac_async_read+0x30>)
}
    1600:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return _mac_async_read(&descr->dev, buf, len);
    1604:	4718      	bx	r3
    1606:	bf00      	nop
    1608:	0000c4b6 	.word	0x0000c4b6
    160c:	00001fdd 	.word	0x00001fdd
    1610:	0000284d 	.word	0x0000284d

00001614 <mac_async_read_len>:

/**
 * \brief Get next valid package length
 */
uint32_t mac_async_read_len(struct mac_async_descriptor *const descr)
{
    1614:	b510      	push	{r4, lr}
	ASSERT(descr);
    1616:	4604      	mov	r4, r0
    1618:	3000      	adds	r0, #0
    161a:	bf18      	it	ne
    161c:	2001      	movne	r0, #1
    161e:	4b04      	ldr	r3, [pc, #16]	; (1630 <mac_async_read_len+0x1c>)
    1620:	4904      	ldr	r1, [pc, #16]	; (1634 <mac_async_read_len+0x20>)
    1622:	226b      	movs	r2, #107	; 0x6b
    1624:	4798      	blx	r3

	return _mac_async_read_len(&descr->dev);
    1626:	4620      	mov	r0, r4
    1628:	4b03      	ldr	r3, [pc, #12]	; (1638 <mac_async_read_len+0x24>)
}
    162a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return _mac_async_read_len(&descr->dev);
    162e:	4718      	bx	r3
    1630:	00001fdd 	.word	0x00001fdd
    1634:	0000c4b6 	.word	0x0000c4b6
    1638:	00002941 	.word	0x00002941

0000163c <sha_sync_init>:

/**
 * \brief              Initialize SHA.
 */
int32_t sha_sync_init(struct sha_sync_descriptor *descr, void *const hw)
{
    163c:	b570      	push	{r4, r5, r6, lr}
    163e:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    1640:	4604      	mov	r4, r0
    1642:	b160      	cbz	r0, 165e <sha_sync_init+0x22>
    1644:	1c08      	adds	r0, r1, #0
    1646:	bf18      	it	ne
    1648:	2001      	movne	r0, #1
    164a:	4905      	ldr	r1, [pc, #20]	; (1660 <sha_sync_init+0x24>)
    164c:	4b05      	ldr	r3, [pc, #20]	; (1664 <sha_sync_init+0x28>)
    164e:	222c      	movs	r2, #44	; 0x2c
    1650:	4798      	blx	r3

	return _sha_sync_init(&descr->dev, hw);
    1652:	4629      	mov	r1, r5
    1654:	4620      	mov	r0, r4
    1656:	4b04      	ldr	r3, [pc, #16]	; (1668 <sha_sync_init+0x2c>)
}
    1658:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return _sha_sync_init(&descr->dev, hw);
    165c:	4718      	bx	r3
    165e:	e7f4      	b.n	164a <sha_sync_init+0xe>
    1660:	0000c4d1 	.word	0x0000c4d1
    1664:	00001fdd 	.word	0x00001fdd
    1668:	0000299d 	.word	0x0000299d

0000166c <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    166c:	b5f0      	push	{r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    166e:	6805      	ldr	r5, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    1670:	b91d      	cbnz	r5, 167a <timer_add_timer_task+0xe>
		list_insert_as_head(list, new_task);
    1672:	4b0f      	ldr	r3, [pc, #60]	; (16b0 <timer_add_timer_task+0x44>)
	if (it == head) {
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
	}
}
    1674:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		list_insert_after(prev, new_task);
    1678:	4718      	bx	r3
		if (time_left >= new_task->interval)
    167a:	f8d1 e008 	ldr.w	lr, [r1, #8]
    167e:	462c      	mov	r4, r5
    1680:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    1682:	f1c2 0c01 	rsb	ip, r2, #1
		if (it->time_label <= time) {
    1686:	6863      	ldr	r3, [r4, #4]
    1688:	68a7      	ldr	r7, [r4, #8]
    168a:	4293      	cmp	r3, r2
			time_left = it->interval - (time - it->time_label);
    168c:	bf95      	itete	ls
    168e:	19db      	addls	r3, r3, r7
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    1690:	4463      	addhi	r3, ip
			time_left = it->interval - (time - it->time_label);
    1692:	1a9b      	subls	r3, r3, r2
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    1694:	19db      	addhi	r3, r3, r7
		if (time_left >= new_task->interval)
    1696:	4573      	cmp	r3, lr
    1698:	d207      	bcs.n	16aa <timer_add_timer_task+0x3e>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    169a:	6823      	ldr	r3, [r4, #0]
    169c:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    169e:	b913      	cbnz	r3, 16a6 <timer_add_timer_task+0x3a>
		list_insert_after(prev, new_task);
    16a0:	4630      	mov	r0, r6
    16a2:	4b04      	ldr	r3, [pc, #16]	; (16b4 <timer_add_timer_task+0x48>)
    16a4:	e7e6      	b.n	1674 <timer_add_timer_task+0x8>
    16a6:	461c      	mov	r4, r3
    16a8:	e7ed      	b.n	1686 <timer_add_timer_task+0x1a>
	if (it == head) {
    16aa:	42a5      	cmp	r5, r4
    16ac:	d1f8      	bne.n	16a0 <timer_add_timer_task+0x34>
    16ae:	e7e0      	b.n	1672 <timer_add_timer_task+0x6>
    16b0:	00001ff1 	.word	0x00001ff1
    16b4:	0000201d 	.word	0x0000201d

000016b8 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    16b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    16bc:	6906      	ldr	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    16be:	7e03      	ldrb	r3, [r0, #24]
	return (void *)list->head;
    16c0:	6944      	ldr	r4, [r0, #20]
	uint32_t                 time  = ++timer->time;
    16c2:	3601      	adds	r6, #1
	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    16c4:	07da      	lsls	r2, r3, #31
{
    16c6:	4605      	mov	r5, r0
	uint32_t                 time  = ++timer->time;
    16c8:	6106      	str	r6, [r0, #16]
	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    16ca:	d410      	bmi.n	16ee <timer_process_counted+0x36>
    16cc:	7e03      	ldrb	r3, [r0, #24]
    16ce:	079b      	lsls	r3, r3, #30
    16d0:	d40d      	bmi.n	16ee <timer_process_counted+0x36>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    16d2:	f8df 8048 	ldr.w	r8, [pc, #72]	; 171c <timer_process_counted+0x64>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    16d6:	f8df 9048 	ldr.w	r9, [pc, #72]	; 1720 <timer_process_counted+0x68>
		list_remove_head(&timer->tasks);
    16da:	f100 0714 	add.w	r7, r0, #20
	while (it && ((time - it->time_label) >= it->interval)) {
    16de:	b124      	cbz	r4, 16ea <timer_process_counted+0x32>
    16e0:	6863      	ldr	r3, [r4, #4]
    16e2:	68a2      	ldr	r2, [r4, #8]
    16e4:	1af3      	subs	r3, r6, r3
    16e6:	4293      	cmp	r3, r2
    16e8:	d207      	bcs.n	16fa <timer_process_counted+0x42>
    16ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    16ee:	7e2b      	ldrb	r3, [r5, #24]
    16f0:	f043 0302 	orr.w	r3, r3, #2
    16f4:	762b      	strb	r3, [r5, #24]
		return;
    16f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		list_remove_head(&timer->tasks);
    16fa:	4638      	mov	r0, r7
    16fc:	47c0      	blx	r8
		if (TIMER_TASK_REPEAT == tmp->mode) {
    16fe:	7c23      	ldrb	r3, [r4, #16]
    1700:	2b01      	cmp	r3, #1
    1702:	d104      	bne.n	170e <timer_process_counted+0x56>
			tmp->time_label = time;
    1704:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    1706:	4632      	mov	r2, r6
    1708:	4621      	mov	r1, r4
    170a:	4638      	mov	r0, r7
    170c:	47c8      	blx	r9
    170e:	f8d5 a014 	ldr.w	sl, [r5, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    1712:	68e3      	ldr	r3, [r4, #12]
    1714:	4620      	mov	r0, r4
    1716:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
    1718:	4654      	mov	r4, sl
    171a:	e7e0      	b.n	16de <timer_process_counted+0x26>
    171c:	00002061 	.word	0x00002061
    1720:	0000166d 	.word	0x0000166d

00001724 <timer_init>:
{
    1724:	b538      	push	{r3, r4, r5, lr}
    1726:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    1728:	4604      	mov	r4, r0
    172a:	b178      	cbz	r0, 174c <timer_init+0x28>
    172c:	1c08      	adds	r0, r1, #0
    172e:	bf18      	it	ne
    1730:	2001      	movne	r0, #1
    1732:	223b      	movs	r2, #59	; 0x3b
    1734:	4906      	ldr	r1, [pc, #24]	; (1750 <timer_init+0x2c>)
    1736:	4b07      	ldr	r3, [pc, #28]	; (1754 <timer_init+0x30>)
    1738:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    173a:	4629      	mov	r1, r5
    173c:	4620      	mov	r0, r4
    173e:	4b06      	ldr	r3, [pc, #24]	; (1758 <timer_init+0x34>)
    1740:	4798      	blx	r3
	descr->time                           = 0;
    1742:	2000      	movs	r0, #0
	descr->device.timer_cb.period_expired = timer_process_counted;
    1744:	4b05      	ldr	r3, [pc, #20]	; (175c <timer_init+0x38>)
	descr->time                           = 0;
    1746:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    1748:	6023      	str	r3, [r4, #0]
}
    174a:	bd38      	pop	{r3, r4, r5, pc}
    174c:	e7f1      	b.n	1732 <timer_init+0xe>
    174e:	bf00      	nop
    1750:	0000c4eb 	.word	0x0000c4eb
    1754:	00001fdd 	.word	0x00001fdd
    1758:	000031e1 	.word	0x000031e1
    175c:	000016b9 	.word	0x000016b9

00001760 <timer_start>:
{
    1760:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr);
    1762:	4605      	mov	r5, r0
    1764:	3000      	adds	r0, #0
    1766:	bf18      	it	ne
    1768:	2001      	movne	r0, #1
    176a:	2253      	movs	r2, #83	; 0x53
    176c:	4907      	ldr	r1, [pc, #28]	; (178c <timer_start+0x2c>)
    176e:	4b08      	ldr	r3, [pc, #32]	; (1790 <timer_start+0x30>)
    1770:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
    1772:	4628      	mov	r0, r5
    1774:	4b07      	ldr	r3, [pc, #28]	; (1794 <timer_start+0x34>)
    1776:	4798      	blx	r3
    1778:	4604      	mov	r4, r0
    177a:	b920      	cbnz	r0, 1786 <timer_start+0x26>
	_timer_start(&descr->device);
    177c:	4628      	mov	r0, r5
    177e:	4b06      	ldr	r3, [pc, #24]	; (1798 <timer_start+0x38>)
    1780:	4798      	blx	r3
	return ERR_NONE;
    1782:	4620      	mov	r0, r4
    1784:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_DENIED;
    1786:	f06f 0010 	mvn.w	r0, #16
}
    178a:	bd38      	pop	{r3, r4, r5, pc}
    178c:	0000c4eb 	.word	0x0000c4eb
    1790:	00001fdd 	.word	0x00001fdd
    1794:	000032db 	.word	0x000032db
    1798:	000032c9 	.word	0x000032c9

0000179c <timer_add_task>:
{
    179c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    17a0:	460d      	mov	r5, r1
	ASSERT(descr && task);
    17a2:	4604      	mov	r4, r0
    17a4:	b300      	cbz	r0, 17e8 <timer_add_task+0x4c>
    17a6:	1c08      	adds	r0, r1, #0
    17a8:	bf18      	it	ne
    17aa:	2001      	movne	r0, #1
    17ac:	227a      	movs	r2, #122	; 0x7a
    17ae:	491d      	ldr	r1, [pc, #116]	; (1824 <timer_add_task+0x88>)
    17b0:	f8df 8088 	ldr.w	r8, [pc, #136]	; 183c <timer_add_task+0xa0>
    17b4:	47c0      	blx	r8
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    17b6:	7e23      	ldrb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
    17b8:	f104 0714 	add.w	r7, r4, #20
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    17bc:	f043 0301 	orr.w	r3, r3, #1
    17c0:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
    17c2:	4629      	mov	r1, r5
    17c4:	4638      	mov	r0, r7
    17c6:	4b18      	ldr	r3, [pc, #96]	; (1828 <timer_add_task+0x8c>)
    17c8:	4798      	blx	r3
    17ca:	4606      	mov	r6, r0
    17cc:	b168      	cbz	r0, 17ea <timer_add_task+0x4e>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    17ce:	7e23      	ldrb	r3, [r4, #24]
		ASSERT(false);
    17d0:	4914      	ldr	r1, [pc, #80]	; (1824 <timer_add_task+0x88>)
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    17d2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
		ASSERT(false);
    17d6:	2000      	movs	r0, #0
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    17d8:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
    17da:	227f      	movs	r2, #127	; 0x7f
    17dc:	47c0      	blx	r8
		return ERR_ALREADY_INITIALIZED;
    17de:	f06f 0011 	mvn.w	r0, #17
}
    17e2:	b002      	add	sp, #8
    17e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    17e8:	e7e0      	b.n	17ac <timer_add_task+0x10>
	task->time_label = descr->time;
    17ea:	6922      	ldr	r2, [r4, #16]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    17ec:	4b0f      	ldr	r3, [pc, #60]	; (182c <timer_add_task+0x90>)
	task->time_label = descr->time;
    17ee:	606a      	str	r2, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    17f0:	4638      	mov	r0, r7
    17f2:	4629      	mov	r1, r5
    17f4:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    17f6:	7e23      	ldrb	r3, [r4, #24]
    17f8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    17fc:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    17fe:	7e20      	ldrb	r0, [r4, #24]
    1800:	f010 0002 	ands.w	r0, r0, #2
    1804:	d0ed      	beq.n	17e2 <timer_add_task+0x46>
		CRITICAL_SECTION_ENTER()
    1806:	a801      	add	r0, sp, #4
    1808:	4b09      	ldr	r3, [pc, #36]	; (1830 <timer_add_task+0x94>)
    180a:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    180c:	7e23      	ldrb	r3, [r4, #24]
    180e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    1812:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
    1814:	4620      	mov	r0, r4
    1816:	4b07      	ldr	r3, [pc, #28]	; (1834 <timer_add_task+0x98>)
    1818:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    181a:	a801      	add	r0, sp, #4
    181c:	4b06      	ldr	r3, [pc, #24]	; (1838 <timer_add_task+0x9c>)
    181e:	4798      	blx	r3
	return ERR_NONE;
    1820:	4630      	mov	r0, r6
    1822:	e7de      	b.n	17e2 <timer_add_task+0x46>
    1824:	0000c4eb 	.word	0x0000c4eb
    1828:	00001fe3 	.word	0x00001fe3
    182c:	0000166d 	.word	0x0000166d
    1830:	000011a5 	.word	0x000011a5
    1834:	000032f1 	.word	0x000032f1
    1838:	000011b3 	.word	0x000011b3
    183c:	00001fdd 	.word	0x00001fdd

00001840 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
    1840:	4603      	mov	r3, r0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    1842:	2200      	movs	r2, #0
    1844:	629a      	str	r2, [r3, #40]	; 0x28
	if (descr->usart_cb.tx_done) {
    1846:	69db      	ldr	r3, [r3, #28]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    1848:	3808      	subs	r0, #8
	if (descr->usart_cb.tx_done) {
    184a:	b103      	cbz	r3, 184e <usart_transmission_complete+0xe>
		descr->usart_cb.tx_done(descr);
    184c:	4718      	bx	r3
    184e:	4770      	bx	lr

00001850 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
    1850:	4603      	mov	r3, r0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    1852:	2200      	movs	r2, #0
    1854:	629a      	str	r2, [r3, #40]	; 0x28
	if (descr->usart_cb.error) {
    1856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    1858:	3808      	subs	r0, #8
	if (descr->usart_cb.error) {
    185a:	b103      	cbz	r3, 185e <usart_error+0xe>
		descr->usart_cb.error(descr);
    185c:	4718      	bx	r3
    185e:	4770      	bx	lr

00001860 <usart_fill_rx_buffer>:
{
    1860:	b570      	push	{r4, r5, r6, lr}
    1862:	4604      	mov	r4, r0
	ringbuffer_put(&descr->rx, data);
    1864:	4b05      	ldr	r3, [pc, #20]	; (187c <usart_fill_rx_buffer+0x1c>)
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    1866:	f1a0 0508 	sub.w	r5, r0, #8
	ringbuffer_put(&descr->rx, data);
    186a:	302c      	adds	r0, #44	; 0x2c
    186c:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
    186e:	6a23      	ldr	r3, [r4, #32]
    1870:	b11b      	cbz	r3, 187a <usart_fill_rx_buffer+0x1a>
		descr->usart_cb.rx_done(descr);
    1872:	4628      	mov	r0, r5
}
    1874:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		descr->usart_cb.rx_done(descr);
    1878:	4718      	bx	r3
    187a:	bd70      	pop	{r4, r5, r6, pc}
    187c:	000020f1 	.word	0x000020f1

00001880 <usart_async_write>:
{
    1880:	b570      	push	{r4, r5, r6, lr}
    1882:	460e      	mov	r6, r1
    1884:	4615      	mov	r5, r2
	ASSERT(descr && buf && length);
    1886:	4604      	mov	r4, r0
    1888:	b1e0      	cbz	r0, 18c4 <usart_async_write+0x44>
    188a:	b1e1      	cbz	r1, 18c6 <usart_async_write+0x46>
    188c:	1c10      	adds	r0, r2, #0
    188e:	bf18      	it	ne
    1890:	2001      	movne	r0, #1
    1892:	f240 123b 	movw	r2, #315	; 0x13b
    1896:	4b0e      	ldr	r3, [pc, #56]	; (18d0 <usart_async_write+0x50>)
    1898:	490e      	ldr	r1, [pc, #56]	; (18d4 <usart_async_write+0x54>)
    189a:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
    189c:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
    18a0:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
    18a4:	429a      	cmp	r2, r3
    18a6:	d110      	bne.n	18ca <usart_async_write+0x4a>
	descr->tx_por           = 0;
    18a8:	2300      	movs	r3, #0
    18aa:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    18ae:	2301      	movs	r3, #1
    18b0:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    18b2:	f104 0008 	add.w	r0, r4, #8
	descr->tx_buffer        = (uint8_t *)buf;
    18b6:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
    18b8:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
	_usart_async_enable_byte_sent_irq(&descr->device);
    18bc:	4b06      	ldr	r3, [pc, #24]	; (18d8 <usart_async_write+0x58>)
    18be:	4798      	blx	r3
	return (int32_t)length;
    18c0:	4628      	mov	r0, r5
    18c2:	bd70      	pop	{r4, r5, r6, pc}
    18c4:	e7e5      	b.n	1892 <usart_async_write+0x12>
	ASSERT(descr && buf && length);
    18c6:	4608      	mov	r0, r1
    18c8:	e7e3      	b.n	1892 <usart_async_write+0x12>
		return ERR_NO_RESOURCE;
    18ca:	f06f 001b 	mvn.w	r0, #27
}
    18ce:	bd70      	pop	{r4, r5, r6, pc}
    18d0:	00001fdd 	.word	0x00001fdd
    18d4:	0000c502 	.word	0x0000c502
    18d8:	00003059 	.word	0x00003059

000018dc <usart_process_byte_sent>:
	if (descr->tx_por != descr->tx_buffer_length) {
    18dc:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    18de:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
    18e2:	429a      	cmp	r2, r3
{
    18e4:	b510      	push	{r4, lr}
    18e6:	4604      	mov	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
    18e8:	d00a      	beq.n	1900 <usart_process_byte_sent+0x24>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    18ea:	6c02      	ldr	r2, [r0, #64]	; 0x40
    18ec:	1c59      	adds	r1, r3, #1
    18ee:	8781      	strh	r1, [r0, #60]	; 0x3c
    18f0:	5cd1      	ldrb	r1, [r2, r3]
    18f2:	4b04      	ldr	r3, [pc, #16]	; (1904 <usart_process_byte_sent+0x28>)
    18f4:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    18f6:	4b04      	ldr	r3, [pc, #16]	; (1908 <usart_process_byte_sent+0x2c>)
    18f8:	4620      	mov	r0, r4
}
    18fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_usart_async_enable_tx_done_irq(&descr->device);
    18fe:	4718      	bx	r3
    1900:	4b02      	ldr	r3, [pc, #8]	; (190c <usart_process_byte_sent+0x30>)
    1902:	e7fa      	b.n	18fa <usart_process_byte_sent+0x1e>
    1904:	00003049 	.word	0x00003049
    1908:	00003059 	.word	0x00003059
    190c:	00003061 	.word	0x00003061

00001910 <usart_async_read>:
{
    1910:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    1914:	460e      	mov	r6, r1
    1916:	4617      	mov	r7, r2
	ASSERT(descr && buf && length);
    1918:	4605      	mov	r5, r0
    191a:	b1f0      	cbz	r0, 195a <usart_async_read+0x4a>
    191c:	b1f1      	cbz	r1, 195c <usart_async_read+0x4c>
    191e:	1c10      	adds	r0, r2, #0
    1920:	bf18      	it	ne
    1922:	2001      	movne	r0, #1
    1924:	f44f 72ac 	mov.w	r2, #344	; 0x158
    1928:	4910      	ldr	r1, [pc, #64]	; (196c <usart_async_read+0x5c>)
    192a:	4b11      	ldr	r3, [pc, #68]	; (1970 <usart_async_read+0x60>)
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    192c:	f8df 9050 	ldr.w	r9, [pc, #80]	; 1980 <usart_async_read+0x70>
	ASSERT(descr && buf && length);
    1930:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    1932:	3534      	adds	r5, #52	; 0x34
	CRITICAL_SECTION_ENTER()
    1934:	a801      	add	r0, sp, #4
    1936:	4b0f      	ldr	r3, [pc, #60]	; (1974 <usart_async_read+0x64>)
    1938:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    193a:	4b0f      	ldr	r3, [pc, #60]	; (1978 <usart_async_read+0x68>)
    193c:	4628      	mov	r0, r5
    193e:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
    1940:	4b0e      	ldr	r3, [pc, #56]	; (197c <usart_async_read+0x6c>)
	num = ringbuffer_num(&descr->rx);
    1942:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
    1944:	a801      	add	r0, sp, #4
    1946:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    1948:	2400      	movs	r4, #0
    194a:	45a0      	cmp	r8, r4
    194c:	d001      	beq.n	1952 <usart_async_read+0x42>
    194e:	42a7      	cmp	r7, r4
    1950:	d106      	bne.n	1960 <usart_async_read+0x50>
	return (int32_t)was_read;
    1952:	b2a0      	uxth	r0, r4
}
    1954:	b003      	add	sp, #12
    1956:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    195a:	e7e3      	b.n	1924 <usart_async_read+0x14>
	ASSERT(descr && buf && length);
    195c:	4608      	mov	r0, r1
    195e:	e7e1      	b.n	1924 <usart_async_read+0x14>
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    1960:	1931      	adds	r1, r6, r4
    1962:	4628      	mov	r0, r5
    1964:	47c8      	blx	r9
    1966:	3401      	adds	r4, #1
    1968:	e7ef      	b.n	194a <usart_async_read+0x3a>
    196a:	bf00      	nop
    196c:	0000c502 	.word	0x0000c502
    1970:	00001fdd 	.word	0x00001fdd
    1974:	000011a5 	.word	0x000011a5
    1978:	00002135 	.word	0x00002135
    197c:	000011b3 	.word	0x000011b3
    1980:	000020ad 	.word	0x000020ad

00001984 <usart_async_init>:
{
    1984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1986:	460d      	mov	r5, r1
    1988:	4616      	mov	r6, r2
    198a:	461f      	mov	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    198c:	4604      	mov	r4, r0
    198e:	b310      	cbz	r0, 19d6 <usart_async_init+0x52>
    1990:	b311      	cbz	r1, 19d8 <usart_async_init+0x54>
    1992:	b31a      	cbz	r2, 19dc <usart_async_init+0x58>
    1994:	1c18      	adds	r0, r3, #0
    1996:	bf18      	it	ne
    1998:	2001      	movne	r0, #1
    199a:	223a      	movs	r2, #58	; 0x3a
    199c:	4912      	ldr	r1, [pc, #72]	; (19e8 <usart_async_init+0x64>)
    199e:	4b13      	ldr	r3, [pc, #76]	; (19ec <usart_async_init+0x68>)
    19a0:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    19a2:	463a      	mov	r2, r7
    19a4:	4631      	mov	r1, r6
    19a6:	f104 0034 	add.w	r0, r4, #52	; 0x34
    19aa:	4b11      	ldr	r3, [pc, #68]	; (19f0 <usart_async_init+0x6c>)
    19ac:	4798      	blx	r3
    19ae:	b9b8      	cbnz	r0, 19e0 <usart_async_init+0x5c>
	init_status = _usart_async_init(&descr->device, hw);
    19b0:	4629      	mov	r1, r5
    19b2:	f104 0008 	add.w	r0, r4, #8
    19b6:	4b0f      	ldr	r3, [pc, #60]	; (19f4 <usart_async_init+0x70>)
    19b8:	4798      	blx	r3
	if (init_status) {
    19ba:	b998      	cbnz	r0, 19e4 <usart_async_init+0x60>
	descr->io.read  = usart_async_read;
    19bc:	4b0e      	ldr	r3, [pc, #56]	; (19f8 <usart_async_init+0x74>)
    19be:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_async_write;
    19c0:	4b0e      	ldr	r3, [pc, #56]	; (19fc <usart_async_init+0x78>)
    19c2:	6023      	str	r3, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    19c4:	4b0e      	ldr	r3, [pc, #56]	; (1a00 <usart_async_init+0x7c>)
    19c6:	60a3      	str	r3, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    19c8:	4b0e      	ldr	r3, [pc, #56]	; (1a04 <usart_async_init+0x80>)
    19ca:	60e3      	str	r3, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    19cc:	4b0e      	ldr	r3, [pc, #56]	; (1a08 <usart_async_init+0x84>)
    19ce:	6123      	str	r3, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    19d0:	4b0e      	ldr	r3, [pc, #56]	; (1a0c <usart_async_init+0x88>)
    19d2:	6163      	str	r3, [r4, #20]
	return ERR_NONE;
    19d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    19d6:	e7e0      	b.n	199a <usart_async_init+0x16>
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    19d8:	4608      	mov	r0, r1
    19da:	e7de      	b.n	199a <usart_async_init+0x16>
    19dc:	4610      	mov	r0, r2
    19de:	e7dc      	b.n	199a <usart_async_init+0x16>
		return ERR_INVALID_ARG;
    19e0:	f06f 000c 	mvn.w	r0, #12
}
    19e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    19e6:	bf00      	nop
    19e8:	0000c502 	.word	0x0000c502
    19ec:	00001fdd 	.word	0x00001fdd
    19f0:	0000206d 	.word	0x0000206d
    19f4:	00002fb1 	.word	0x00002fb1
    19f8:	00001911 	.word	0x00001911
    19fc:	00001881 	.word	0x00001881
    1a00:	000018dd 	.word	0x000018dd
    1a04:	00001861 	.word	0x00001861
    1a08:	00001841 	.word	0x00001841
    1a0c:	00001851 	.word	0x00001851

00001a10 <usart_async_enable>:
{
    1a10:	b510      	push	{r4, lr}
	ASSERT(descr);
    1a12:	4604      	mov	r4, r0
    1a14:	3000      	adds	r0, #0
    1a16:	bf18      	it	ne
    1a18:	2001      	movne	r0, #1
    1a1a:	2261      	movs	r2, #97	; 0x61
    1a1c:	4904      	ldr	r1, [pc, #16]	; (1a30 <usart_async_enable+0x20>)
    1a1e:	4b05      	ldr	r3, [pc, #20]	; (1a34 <usart_async_enable+0x24>)
    1a20:	4798      	blx	r3
	_usart_async_enable(&descr->device);
    1a22:	f104 0008 	add.w	r0, r4, #8
    1a26:	4b04      	ldr	r3, [pc, #16]	; (1a38 <usart_async_enable+0x28>)
    1a28:	4798      	blx	r3
}
    1a2a:	2000      	movs	r0, #0
    1a2c:	bd10      	pop	{r4, pc}
    1a2e:	bf00      	nop
    1a30:	0000c502 	.word	0x0000c502
    1a34:	00001fdd 	.word	0x00001fdd
    1a38:	0000302d 	.word	0x0000302d

00001a3c <usart_async_get_io_descriptor>:
{
    1a3c:	b538      	push	{r3, r4, r5, lr}
    1a3e:	460d      	mov	r5, r1
	ASSERT(descr && io);
    1a40:	4604      	mov	r4, r0
    1a42:	b148      	cbz	r0, 1a58 <usart_async_get_io_descriptor+0x1c>
    1a44:	1c08      	adds	r0, r1, #0
    1a46:	bf18      	it	ne
    1a48:	2001      	movne	r0, #1
    1a4a:	2277      	movs	r2, #119	; 0x77
    1a4c:	4903      	ldr	r1, [pc, #12]	; (1a5c <usart_async_get_io_descriptor+0x20>)
    1a4e:	4b04      	ldr	r3, [pc, #16]	; (1a60 <usart_async_get_io_descriptor+0x24>)
    1a50:	4798      	blx	r3
	*io = &descr->io;
    1a52:	602c      	str	r4, [r5, #0]
}
    1a54:	2000      	movs	r0, #0
    1a56:	bd38      	pop	{r3, r4, r5, pc}
    1a58:	e7f7      	b.n	1a4a <usart_async_get_io_descriptor+0xe>
    1a5a:	bf00      	nop
    1a5c:	0000c502 	.word	0x0000c502
    1a60:	00001fdd 	.word	0x00001fdd

00001a64 <usart_async_register_callback>:
{
    1a64:	b570      	push	{r4, r5, r6, lr}
	ASSERT(descr);
    1a66:	4604      	mov	r4, r0
    1a68:	3000      	adds	r0, #0
{
    1a6a:	460e      	mov	r6, r1
	ASSERT(descr);
    1a6c:	bf18      	it	ne
    1a6e:	2001      	movne	r0, #1
{
    1a70:	4615      	mov	r5, r2
	ASSERT(descr);
    1a72:	4911      	ldr	r1, [pc, #68]	; (1ab8 <usart_async_register_callback+0x54>)
    1a74:	4b11      	ldr	r3, [pc, #68]	; (1abc <usart_async_register_callback+0x58>)
    1a76:	2283      	movs	r2, #131	; 0x83
    1a78:	4798      	blx	r3
	switch (type) {
    1a7a:	2e01      	cmp	r6, #1
    1a7c:	d010      	beq.n	1aa0 <usart_async_register_callback+0x3c>
    1a7e:	d304      	bcc.n	1a8a <usart_async_register_callback+0x26>
    1a80:	2e02      	cmp	r6, #2
    1a82:	d013      	beq.n	1aac <usart_async_register_callback+0x48>
		return ERR_INVALID_ARG;
    1a84:	f06f 000c 	mvn.w	r0, #12
}
    1a88:	bd70      	pop	{r4, r5, r6, pc}
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
    1a8a:	1c2a      	adds	r2, r5, #0
		descr->usart_cb.rx_done = cb;
    1a8c:	62a5      	str	r5, [r4, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
    1a8e:	bf18      	it	ne
    1a90:	2201      	movne	r2, #1
    1a92:	2101      	movs	r1, #1
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
    1a94:	f104 0008 	add.w	r0, r4, #8
    1a98:	4b09      	ldr	r3, [pc, #36]	; (1ac0 <usart_async_register_callback+0x5c>)
    1a9a:	4798      	blx	r3
	return ERR_NONE;
    1a9c:	2000      	movs	r0, #0
		break;
    1a9e:	bd70      	pop	{r4, r5, r6, pc}
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
    1aa0:	1c2a      	adds	r2, r5, #0
		descr->usart_cb.tx_done = cb;
    1aa2:	6265      	str	r5, [r4, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
    1aa4:	bf18      	it	ne
    1aa6:	2201      	movne	r2, #1
    1aa8:	2102      	movs	r1, #2
    1aaa:	e7f3      	b.n	1a94 <usart_async_register_callback+0x30>
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
    1aac:	1c2a      	adds	r2, r5, #0
		descr->usart_cb.error = cb;
    1aae:	62e5      	str	r5, [r4, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
    1ab0:	bf18      	it	ne
    1ab2:	2201      	movne	r2, #1
    1ab4:	2103      	movs	r1, #3
    1ab6:	e7ed      	b.n	1a94 <usart_async_register_callback+0x30>
    1ab8:	0000c502 	.word	0x0000c502
    1abc:	00001fdd 	.word	0x00001fdd
    1ac0:	00003069 	.word	0x00003069

00001ac4 <usart_async_is_tx_empty>:
{
    1ac4:	b510      	push	{r4, lr}
	ASSERT(descr);
    1ac6:	4604      	mov	r4, r0
    1ac8:	3000      	adds	r0, #0
    1aca:	bf18      	it	ne
    1acc:	2001      	movne	r0, #1
    1ace:	22f8      	movs	r2, #248	; 0xf8
    1ad0:	4903      	ldr	r1, [pc, #12]	; (1ae0 <usart_async_is_tx_empty+0x1c>)
    1ad2:	4b04      	ldr	r3, [pc, #16]	; (1ae4 <usart_async_is_tx_empty+0x20>)
    1ad4:	4798      	blx	r3
	return _usart_async_is_byte_sent(&descr->device);
    1ad6:	f104 0008 	add.w	r0, r4, #8
    1ada:	4b03      	ldr	r3, [pc, #12]	; (1ae8 <usart_async_is_tx_empty+0x24>)
    1adc:	4798      	blx	r3
}
    1ade:	bd10      	pop	{r4, pc}
    1ae0:	0000c502 	.word	0x0000c502
    1ae4:	00001fdd 	.word	0x00001fdd
    1ae8:	0000304f 	.word	0x0000304f

00001aec <_usb_d_find_ep>:
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    1aec:	490a      	ldr	r1, [pc, #40]	; (1b18 <_usb_d_find_ep+0x2c>)
{
    1aee:	b570      	push	{r4, r5, r6, lr}
    1af0:	2300      	movs	r3, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    1af2:	f000 060f 	and.w	r6, r0, #15
    1af6:	015d      	lsls	r5, r3, #5
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    1af8:	194c      	adds	r4, r1, r5
    1afa:	b25a      	sxtb	r2, r3
    1afc:	7864      	ldrb	r4, [r4, #1]
    1afe:	4284      	cmp	r4, r0
    1b00:	d008      	beq.n	1b14 <_usb_d_find_ep+0x28>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    1b02:	5c6d      	ldrb	r5, [r5, r1]
    1b04:	b90d      	cbnz	r5, 1b0a <_usb_d_find_ep+0x1e>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    1b06:	42a6      	cmp	r6, r4
    1b08:	d004      	beq.n	1b14 <_usb_d_find_ep+0x28>
    1b0a:	3301      	adds	r3, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    1b0c:	2b04      	cmp	r3, #4
    1b0e:	d1f2      	bne.n	1af6 <_usb_d_find_ep+0xa>
			return i;
		}
	}
	return -1;
    1b10:	f04f 32ff 	mov.w	r2, #4294967295
}
    1b14:	4610      	mov	r0, r2
    1b16:	bd70      	pop	{r4, r5, r6, pc}
    1b18:	20000334 	.word	0x20000334

00001b1c <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    1b1c:	2000      	movs	r0, #0
    1b1e:	4770      	bx	lr

00001b20 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    1b20:	b570      	push	{r4, r5, r6, lr}
	int8_t           ep_index = _usb_d_find_ep(ep);
    1b22:	4b09      	ldr	r3, [pc, #36]	; (1b48 <usb_d_cb_trans_more+0x28>)
{
    1b24:	4604      	mov	r4, r0
    1b26:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    1b28:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    1b2a:	4b08      	ldr	r3, [pc, #32]	; (1b4c <usb_d_cb_trans_more+0x2c>)
    1b2c:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    1b30:	7883      	ldrb	r3, [r0, #2]
    1b32:	2b03      	cmp	r3, #3
    1b34:	d105      	bne.n	1b42 <usb_d_cb_trans_more+0x22>
		return ept->callbacks.more(ep, transfered);
    1b36:	6983      	ldr	r3, [r0, #24]
    1b38:	4629      	mov	r1, r5
    1b3a:	4620      	mov	r0, r4
	}
	return false;
}
    1b3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return ept->callbacks.more(ep, transfered);
    1b40:	4718      	bx	r3
}
    1b42:	2000      	movs	r0, #0
    1b44:	bd70      	pop	{r4, r5, r6, pc}
    1b46:	bf00      	nop
    1b48:	00001aed 	.word	0x00001aed
    1b4c:	20000334 	.word	0x20000334

00001b50 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    1b50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int8_t           ep_index = _usb_d_find_ep(ep);
    1b54:	4b3c      	ldr	r3, [pc, #240]	; (1c48 <_usb_d_cb_trans_done+0xf8>)
    1b56:	4c3d      	ldr	r4, [pc, #244]	; (1c4c <_usb_d_cb_trans_done+0xfc>)
{
    1b58:	b085      	sub	sp, #20
    1b5a:	4680      	mov	r8, r0
    1b5c:	460f      	mov	r7, r1
    1b5e:	4691      	mov	r9, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    1b60:	4798      	blx	r3
    1b62:	4603      	mov	r3, r0
    1b64:	0146      	lsls	r6, r0, #5
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
    1b66:	2f00      	cmp	r7, #0
    1b68:	d149      	bne.n	1bfe <_usb_d_cb_trans_done+0xae>
		ept->xfer.hdr.status = USB_XFER_DONE;
    1b6a:	19a5      	adds	r5, r4, r6
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1b6c:	5da1      	ldrb	r1, [r4, r6]
		ept->xfer.hdr.status = USB_XFER_DONE;
    1b6e:	70ef      	strb	r7, [r5, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1b70:	2900      	cmp	r1, #0
    1b72:	d13b      	bne.n	1bec <_usb_d_cb_trans_done+0x9c>
	if (state == USB_EP_S_X_DATA) {
    1b74:	78aa      	ldrb	r2, [r5, #2]
    1b76:	7868      	ldrb	r0, [r5, #1]
    1b78:	69ee      	ldr	r6, [r5, #28]
    1b7a:	2a03      	cmp	r2, #3
    1b7c:	f04f 0e0c 	mov.w	lr, #12
    1b80:	f04f 0220 	mov.w	r2, #32
    1b84:	d12b      	bne.n	1bde <_usb_d_cb_trans_done+0x8e>
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    1b86:	fb12 e203 	smlabb	r2, r2, r3, lr
    1b8a:	4422      	add	r2, r4
    1b8c:	2101      	movs	r1, #1
    1b8e:	f995 700c 	ldrsb.w	r7, [r5, #12]
    1b92:	47b0      	blx	r6
    1b94:	786b      	ldrb	r3, [r5, #1]
		if (err) {
    1b96:	b178      	cbz	r0, 1bb8 <_usb_d_cb_trans_done+0x68>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    1b98:	2205      	movs	r2, #5
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    1b9a:	2f00      	cmp	r7, #0
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    1b9c:	70aa      	strb	r2, [r5, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    1b9e:	f04f 0202 	mov.w	r2, #2
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    1ba2:	bfb4      	ite	lt
    1ba4:	4618      	movlt	r0, r3
    1ba6:	f043 0080 	orrge.w	r0, r3, #128	; 0x80
			ept->xfer.hdr.status = USB_XFER_HALT;
    1baa:	70ea      	strb	r2, [r5, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    1bac:	2101      	movs	r1, #1
    1bae:	4b28      	ldr	r3, [pc, #160]	; (1c50 <_usb_d_cb_trans_done+0x100>)
    1bb0:	4798      	blx	r3
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
}
    1bb2:	b005      	add	sp, #20
    1bb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	struct usb_d_transfer trans
    1bb8:	2f00      	cmp	r7, #0
    1bba:	bfac      	ite	ge
    1bbc:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
    1bc0:	f003 030f 	andlt.w	r3, r3, #15
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    1bc4:	2204      	movs	r2, #4
	struct usb_d_transfer trans
    1bc6:	f88d 300c 	strb.w	r3, [sp, #12]
    1bca:	2301      	movs	r3, #1
    1bcc:	9001      	str	r0, [sp, #4]
    1bce:	9002      	str	r0, [sp, #8]
    1bd0:	f88d 300d 	strb.w	r3, [sp, #13]
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    1bd4:	70aa      	strb	r2, [r5, #2]
	return _usb_d_dev_ep_trans(&trans);
    1bd6:	a801      	add	r0, sp, #4
    1bd8:	4b1e      	ldr	r3, [pc, #120]	; (1c54 <_usb_d_cb_trans_done+0x104>)
    1bda:	4798      	blx	r3
    1bdc:	e7e9      	b.n	1bb2 <_usb_d_cb_trans_done+0x62>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    1bde:	fb12 e203 	smlabb	r2, r2, r3, lr
    1be2:	4422      	add	r2, r4
    1be4:	47b0      	blx	r6
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    1be6:	2302      	movs	r3, #2
    1be8:	70ab      	strb	r3, [r5, #2]
    1bea:	e7e2      	b.n	1bb2 <_usb_d_cb_trans_done+0x62>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    1bec:	2301      	movs	r3, #1
    1bee:	70ab      	strb	r3, [r5, #2]
	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    1bf0:	4434      	add	r4, r6
    1bf2:	464a      	mov	r2, r9
    1bf4:	69e3      	ldr	r3, [r4, #28]
    1bf6:	78e1      	ldrb	r1, [r4, #3]
    1bf8:	4640      	mov	r0, r8
    1bfa:	4798      	blx	r3
    1bfc:	e7d9      	b.n	1bb2 <_usb_d_cb_trans_done+0x62>
	} else if (code == USB_TRANS_STALL) {
    1bfe:	2f01      	cmp	r7, #1
		ept->xfer.hdr.status = USB_XFER_HALT;
    1c00:	eb04 0306 	add.w	r3, r4, r6
	} else if (code == USB_TRANS_STALL) {
    1c04:	d10b      	bne.n	1c1e <_usb_d_cb_trans_done+0xce>
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1c06:	5da1      	ldrb	r1, [r4, r6]
		ept->xfer.hdr.status = USB_XFER_HALT;
    1c08:	2202      	movs	r2, #2
    1c0a:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1c0c:	b921      	cbnz	r1, 1c18 <_usb_d_cb_trans_done+0xc8>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    1c0e:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1c10:	4640      	mov	r0, r8
    1c12:	4b0f      	ldr	r3, [pc, #60]	; (1c50 <_usb_d_cb_trans_done+0x100>)
    1c14:	4798      	blx	r3
    1c16:	e7eb      	b.n	1bf0 <_usb_d_cb_trans_done+0xa0>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    1c18:	2205      	movs	r2, #5
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    1c1a:	709a      	strb	r2, [r3, #2]
    1c1c:	e7e8      	b.n	1bf0 <_usb_d_cb_trans_done+0xa0>
	} else if (code == USB_TRANS_ABORT) {
    1c1e:	2f02      	cmp	r7, #2
    1c20:	d107      	bne.n	1c32 <_usb_d_cb_trans_done+0xe2>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    1c22:	2204      	movs	r2, #4
    1c24:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1c26:	5da2      	ldrb	r2, [r4, r6]
    1c28:	b90a      	cbnz	r2, 1c2e <_usb_d_cb_trans_done+0xde>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    1c2a:	709f      	strb	r7, [r3, #2]
			return;
    1c2c:	e7c1      	b.n	1bb2 <_usb_d_cb_trans_done+0x62>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    1c2e:	2201      	movs	r2, #1
    1c30:	e7f3      	b.n	1c1a <_usb_d_cb_trans_done+0xca>
	} else if (code == USB_TRANS_RESET) {
    1c32:	2f03      	cmp	r7, #3
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    1c34:	bf09      	itett	eq
    1c36:	2200      	moveq	r2, #0
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    1c38:	2206      	movne	r2, #6
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    1c3a:	709a      	strbeq	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    1c3c:	2205      	moveq	r2, #5
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    1c3e:	bf18      	it	ne
    1c40:	709a      	strbne	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    1c42:	70da      	strb	r2, [r3, #3]
    1c44:	e7d4      	b.n	1bf0 <_usb_d_cb_trans_done+0xa0>
    1c46:	bf00      	nop
    1c48:	00001aed 	.word	0x00001aed
    1c4c:	20000334 	.word	0x20000334
    1c50:	00003f09 	.word	0x00003f09
    1c54:	00004041 	.word	0x00004041

00001c58 <usb_d_cb_trans_setup>:
{
    1c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int8_t           ep_index = _usb_d_find_ep(ep);
    1c5c:	4b1d      	ldr	r3, [pc, #116]	; (1cd4 <usb_d_cb_trans_setup+0x7c>)
	uint8_t *        req      = ept->xfer.req;
    1c5e:	4e1e      	ldr	r6, [pc, #120]	; (1cd8 <usb_d_cb_trans_setup+0x80>)
    1c60:	4c1e      	ldr	r4, [pc, #120]	; (1cdc <usb_d_cb_trans_setup+0x84>)
{
    1c62:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1c64:	4798      	blx	r3
	uint8_t *        req      = ept->xfer.req;
    1c66:	2720      	movs	r7, #32
    1c68:	230c      	movs	r3, #12
    1c6a:	fb17 3700 	smlabb	r7, r7, r0, r3
    1c6e:	4437      	add	r7, r6
	int8_t           ep_index = _usb_d_find_ep(ep);
    1c70:	4681      	mov	r9, r0
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    1c72:	4639      	mov	r1, r7
    1c74:	4628      	mov	r0, r5
    1c76:	4b1a      	ldr	r3, [pc, #104]	; (1ce0 <usb_d_cb_trans_setup+0x88>)
    1c78:	4798      	blx	r3
	if (n != 8) {
    1c7a:	b2c0      	uxtb	r0, r0
    1c7c:	2808      	cmp	r0, #8
    1c7e:	f065 087f 	orn	r8, r5, #127	; 0x7f
    1c82:	d009      	beq.n	1c98 <usb_d_cb_trans_setup+0x40>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1c84:	2101      	movs	r1, #1
    1c86:	4628      	mov	r0, r5
    1c88:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    1c8a:	2101      	movs	r1, #1
    1c8c:	fa5f f088 	uxtb.w	r0, r8
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    1c90:	4623      	mov	r3, r4
}
    1c92:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    1c96:	4718      	bx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    1c98:	eb06 1649 	add.w	r6, r6, r9, lsl #5
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1c9c:	2100      	movs	r1, #0
    1c9e:	4628      	mov	r0, r5
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    1ca0:	fa5f f888 	uxtb.w	r8, r8
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1ca4:	47a0      	blx	r4
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    1ca6:	f04f 0901 	mov.w	r9, #1
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    1caa:	2100      	movs	r1, #0
    1cac:	4640      	mov	r0, r8
    1cae:	47a0      	blx	r4
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    1cb0:	f886 9002 	strb.w	r9, [r6, #2]
	if (!ept->callbacks.req(ep, req)) {
    1cb4:	6973      	ldr	r3, [r6, #20]
    1cb6:	4639      	mov	r1, r7
    1cb8:	4628      	mov	r0, r5
    1cba:	4798      	blx	r3
    1cbc:	b938      	cbnz	r0, 1cce <usb_d_cb_trans_setup+0x76>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    1cbe:	2305      	movs	r3, #5
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1cc0:	4649      	mov	r1, r9
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    1cc2:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1cc4:	4628      	mov	r0, r5
    1cc6:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    1cc8:	4649      	mov	r1, r9
    1cca:	4640      	mov	r0, r8
    1ccc:	e7e0      	b.n	1c90 <usb_d_cb_trans_setup+0x38>
    1cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1cd2:	bf00      	nop
    1cd4:	00001aed 	.word	0x00001aed
    1cd8:	20000334 	.word	0x20000334
    1cdc:	00003f09 	.word	0x00003f09
    1ce0:	00003fed 	.word	0x00003fed

00001ce4 <usb_d_init>:

int32_t usb_d_init(void)
{
    1ce4:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    1ce6:	4b10      	ldr	r3, [pc, #64]	; (1d28 <usb_d_init+0x44>)
    1ce8:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    1cea:	2800      	cmp	r0, #0
    1cec:	db1b      	blt.n	1d26 <usb_d_init+0x42>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    1cee:	2280      	movs	r2, #128	; 0x80
    1cf0:	2100      	movs	r1, #0
    1cf2:	4b0e      	ldr	r3, [pc, #56]	; (1d2c <usb_d_init+0x48>)
    1cf4:	480e      	ldr	r0, [pc, #56]	; (1d30 <usb_d_init+0x4c>)
    1cf6:	4798      	blx	r3
    1cf8:	4b0d      	ldr	r3, [pc, #52]	; (1d30 <usb_d_init+0x4c>)
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    1cfa:	4a0e      	ldr	r2, [pc, #56]	; (1d34 <usb_d_init+0x50>)
    1cfc:	f103 0180 	add.w	r1, r3, #128	; 0x80
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    1d00:	20ff      	movs	r0, #255	; 0xff
    1d02:	7058      	strb	r0, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    1d04:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    1d06:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    1d08:	61da      	str	r2, [r3, #28]
    1d0a:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    1d0c:	428b      	cmp	r3, r1
    1d0e:	d1f8      	bne.n	1d02 <usb_d_init+0x1e>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    1d10:	4c09      	ldr	r4, [pc, #36]	; (1d38 <usb_d_init+0x54>)
    1d12:	490a      	ldr	r1, [pc, #40]	; (1d3c <usb_d_init+0x58>)
    1d14:	2000      	movs	r0, #0
    1d16:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    1d18:	4909      	ldr	r1, [pc, #36]	; (1d40 <usb_d_init+0x5c>)
    1d1a:	2001      	movs	r0, #1
    1d1c:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    1d1e:	2002      	movs	r0, #2
    1d20:	4908      	ldr	r1, [pc, #32]	; (1d44 <usb_d_init+0x60>)
    1d22:	47a0      	blx	r4
	return ERR_NONE;
    1d24:	2000      	movs	r0, #0
}
    1d26:	bd10      	pop	{r4, pc}
    1d28:	00003b11 	.word	0x00003b11
    1d2c:	0000b345 	.word	0x0000b345
    1d30:	20000334 	.word	0x20000334
    1d34:	00001b1d 	.word	0x00001b1d
    1d38:	0000416d 	.word	0x0000416d
    1d3c:	00001c59 	.word	0x00001c59
    1d40:	00001b21 	.word	0x00001b21
    1d44:	00001b51 	.word	0x00001b51

00001d48 <usb_d_register_callback>:
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    1d48:	4b00      	ldr	r3, [pc, #0]	; (1d4c <usb_d_register_callback+0x4>)
    1d4a:	4718      	bx	r3
    1d4c:	00004149 	.word	0x00004149

00001d50 <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
	return _usb_d_dev_enable();
    1d50:	4b00      	ldr	r3, [pc, #0]	; (1d54 <usb_d_enable+0x4>)
    1d52:	4718      	bx	r3
    1d54:	00003bdd 	.word	0x00003bdd

00001d58 <usb_d_attach>:
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
	_usb_d_dev_attach();
    1d58:	4b00      	ldr	r3, [pc, #0]	; (1d5c <usb_d_attach+0x4>)
    1d5a:	4718      	bx	r3
    1d5c:	00003c29 	.word	0x00003c29

00001d60 <usb_d_set_address>:
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
	_usb_d_dev_set_address(addr);
    1d60:	4b00      	ldr	r3, [pc, #0]	; (1d64 <usb_d_set_address+0x4>)
    1d62:	4718      	bx	r3
    1d64:	00003c3b 	.word	0x00003c3b

00001d68 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    1d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    1d6a:	4c10      	ldr	r4, [pc, #64]	; (1dac <usb_d_ep_init+0x44>)
{
    1d6c:	4606      	mov	r6, r0
    1d6e:	460d      	mov	r5, r1
    1d70:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    1d72:	47a0      	blx	r4
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    1d74:	2800      	cmp	r0, #0
    1d76:	da13      	bge.n	1da0 <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    1d78:	20ff      	movs	r0, #255	; 0xff
    1d7a:	47a0      	blx	r4
		if (ep_index < 0) {
    1d7c:	1e04      	subs	r4, r0, #0
    1d7e:	db12      	blt.n	1da6 <usb_d_ep_init+0x3e>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    1d80:	463a      	mov	r2, r7
    1d82:	4629      	mov	r1, r5
    1d84:	4630      	mov	r0, r6
    1d86:	4b0a      	ldr	r3, [pc, #40]	; (1db0 <usb_d_ep_init+0x48>)
    1d88:	4798      	blx	r3
	if (rc < 0) {
    1d8a:	2800      	cmp	r0, #0
    1d8c:	db0d      	blt.n	1daa <usb_d_ep_init+0x42>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    1d8e:	4b09      	ldr	r3, [pc, #36]	; (1db4 <usb_d_ep_init+0x4c>)
    1d90:	0160      	lsls	r0, r4, #5
    1d92:	181a      	adds	r2, r3, r0
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    1d94:	f005 0503 	and.w	r5, r5, #3
    1d98:	541d      	strb	r5, [r3, r0]
	ept->xfer.hdr.ep   = ep;
    1d9a:	7056      	strb	r6, [r2, #1]
	return ERR_NONE;
    1d9c:	2000      	movs	r0, #0
    1d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    1da0:	f06f 0013 	mvn.w	r0, #19
    1da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -USB_ERR_ALLOC_FAIL;
    1da6:	f06f 0014 	mvn.w	r0, #20
}
    1daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1dac:	00001aed 	.word	0x00001aed
    1db0:	00003c49 	.word	0x00003c49
    1db4:	20000334 	.word	0x20000334

00001db8 <usb_d_ep0_init>:
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    1db8:	2100      	movs	r1, #0
    1dba:	4602      	mov	r2, r0
    1dbc:	4b01      	ldr	r3, [pc, #4]	; (1dc4 <usb_d_ep0_init+0xc>)
    1dbe:	4608      	mov	r0, r1
    1dc0:	4718      	bx	r3
    1dc2:	bf00      	nop
    1dc4:	00001d69 	.word	0x00001d69

00001dc8 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    1dc8:	b538      	push	{r3, r4, r5, lr}
	int8_t           ep_index = _usb_d_find_ep(ep);
    1dca:	4b07      	ldr	r3, [pc, #28]	; (1de8 <usb_d_ep_deinit+0x20>)
{
    1dcc:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1dce:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    1dd0:	1e04      	subs	r4, r0, #0
    1dd2:	db07      	blt.n	1de4 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    1dd4:	4628      	mov	r0, r5
    1dd6:	4b05      	ldr	r3, [pc, #20]	; (1dec <usb_d_ep_deinit+0x24>)
    1dd8:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    1dda:	4805      	ldr	r0, [pc, #20]	; (1df0 <usb_d_ep_deinit+0x28>)
    1ddc:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    1de0:	23ff      	movs	r3, #255	; 0xff
    1de2:	7043      	strb	r3, [r0, #1]
    1de4:	bd38      	pop	{r3, r4, r5, pc}
    1de6:	bf00      	nop
    1de8:	00001aed 	.word	0x00001aed
    1dec:	00003d09 	.word	0x00003d09
    1df0:	20000334 	.word	0x20000334

00001df4 <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
    1df4:	b538      	push	{r3, r4, r5, lr}
	int8_t           ep_index = _usb_d_find_ep(ep);
    1df6:	4b0c      	ldr	r3, [pc, #48]	; (1e28 <usb_d_ep_enable+0x34>)
{
    1df8:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1dfa:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    1dfc:	2800      	cmp	r0, #0
    1dfe:	db10      	blt.n	1e22 <usb_d_ep_enable+0x2e>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    1e00:	0140      	lsls	r0, r0, #5
    1e02:	4c0a      	ldr	r4, [pc, #40]	; (1e2c <usb_d_ep_enable+0x38>)
    1e04:	5c23      	ldrb	r3, [r4, r0]
    1e06:	4404      	add	r4, r0
    1e08:	2b00      	cmp	r3, #0
    1e0a:	bf0c      	ite	eq
    1e0c:	2302      	moveq	r3, #2
    1e0e:	2301      	movne	r3, #1
    1e10:	70a3      	strb	r3, [r4, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    1e12:	4628      	mov	r0, r5
    1e14:	4b06      	ldr	r3, [pc, #24]	; (1e30 <usb_d_ep_enable+0x3c>)
    1e16:	4798      	blx	r3
	if (rc < 0) {
    1e18:	2800      	cmp	r0, #0
    1e1a:	da04      	bge.n	1e26 <usb_d_ep_enable+0x32>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    1e1c:	2300      	movs	r3, #0
    1e1e:	70a3      	strb	r3, [r4, #2]
    1e20:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
    1e22:	f06f 0011 	mvn.w	r0, #17
	}
	return rc;
}
    1e26:	bd38      	pop	{r3, r4, r5, pc}
    1e28:	00001aed 	.word	0x00001aed
    1e2c:	20000334 	.word	0x20000334
    1e30:	00003d8d 	.word	0x00003d8d

00001e34 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    1e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    1e38:	f890 a008 	ldrb.w	sl, [r0, #8]
    1e3c:	4b36      	ldr	r3, [pc, #216]	; (1f18 <usb_d_ep_transfer+0xe4>)
{
    1e3e:	4607      	mov	r7, r0
    1e40:	b087      	sub	sp, #28
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    1e42:	4650      	mov	r0, sl
    1e44:	4798      	blx	r3
	uint32_t              len = xfer->size;
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    1e46:	f1b0 0800 	subs.w	r8, r0, #0
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    1e4a:	f897 9009 	ldrb.w	r9, [r7, #9]
	uint32_t              len = xfer->size;
    1e4e:	687e      	ldr	r6, [r7, #4]
	if (ep_index < 0) {
    1e50:	db5d      	blt.n	1f0e <usb_d_ep_transfer+0xda>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
	state = ept->xfer.hdr.state;
    1e52:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 1f28 <usb_d_ep_transfer+0xf4>
	atomic_enter_critical(&flags);
    1e56:	4b31      	ldr	r3, [pc, #196]	; (1f1c <usb_d_ep_transfer+0xe8>)
	state = ept->xfer.hdr.state;
    1e58:	ea4f 1848 	mov.w	r8, r8, lsl #5
    1e5c:	eb0b 0508 	add.w	r5, fp, r8
	atomic_enter_critical(&flags);
    1e60:	a802      	add	r0, sp, #8
    1e62:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    1e64:	78ab      	ldrb	r3, [r5, #2]
    1e66:	f88d 3007 	strb.w	r3, [sp, #7]
	if (state == USB_EP_S_IDLE) {
    1e6a:	f89d 0007 	ldrb.w	r0, [sp, #7]
    1e6e:	4b2c      	ldr	r3, [pc, #176]	; (1f20 <usb_d_ep_transfer+0xec>)
    1e70:	b2c4      	uxtb	r4, r0
    1e72:	2c01      	cmp	r4, #1
    1e74:	d11c      	bne.n	1eb0 <usb_d_ep_transfer+0x7c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    1e76:	2203      	movs	r2, #3
    1e78:	70aa      	strb	r2, [r5, #2]
		atomic_leave_critical(&flags);
    1e7a:	a802      	add	r0, sp, #8
    1e7c:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1e7e:	f81b 3008 	ldrb.w	r3, [fp, r8]
    1e82:	b34b      	cbz	r3, 1ed8 <usb_d_ep_transfer+0xa4>
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    1e84:	f119 0300 	adds.w	r3, r9, #0
    1e88:	ea4f 14da 	mov.w	r4, sl, lsr #7
    1e8c:	bf18      	it	ne
    1e8e:	2301      	movne	r3, #1
	struct usb_d_transfer trans
    1e90:	6839      	ldr	r1, [r7, #0]
				zlp = false;
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1e92:	7a3a      	ldrb	r2, [r7, #8]
	struct usb_d_transfer trans
    1e94:	9103      	str	r1, [sp, #12]
    1e96:	9604      	str	r6, [sp, #16]
    1e98:	2c00      	cmp	r4, #0
    1e9a:	d035      	beq.n	1f08 <usb_d_ep_transfer+0xd4>
    1e9c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    1ea0:	f88d 3015 	strb.w	r3, [sp, #21]
	return _usb_d_dev_ep_trans(&trans);
    1ea4:	a803      	add	r0, sp, #12
    1ea6:	4b1f      	ldr	r3, [pc, #124]	; (1f24 <usb_d_ep_transfer+0xf0>)
	struct usb_d_transfer trans
    1ea8:	f88d 2014 	strb.w	r2, [sp, #20]
	return _usb_d_dev_ep_trans(&trans);
    1eac:	4798      	blx	r3
	return rc;
    1eae:	e00d      	b.n	1ecc <usb_d_ep_transfer+0x98>
		atomic_leave_critical(&flags);
    1eb0:	a802      	add	r0, sp, #8
    1eb2:	4798      	blx	r3
		switch (state) {
    1eb4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1eb8:	b2db      	uxtb	r3, r3
    1eba:	2b05      	cmp	r3, #5
    1ebc:	d02a      	beq.n	1f14 <usb_d_ep_transfer+0xe0>
    1ebe:	2b06      	cmp	r3, #6
    1ec0:	d007      	beq.n	1ed2 <usb_d_ep_transfer+0x9e>
			return USB_BUSY;
    1ec2:	2b00      	cmp	r3, #0
    1ec4:	bf0c      	ite	eq
    1ec6:	f06f 0012 	mvneq.w	r0, #18
    1eca:	2001      	movne	r0, #1
}
    1ecc:	b007      	add	sp, #28
    1ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -USB_ERROR;
    1ed2:	f06f 000f 	mvn.w	r0, #15
    1ed6:	e7f9      	b.n	1ecc <usb_d_ep_transfer+0x98>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    1ed8:	7ce9      	ldrb	r1, [r5, #19]
    1eda:	7caa      	ldrb	r2, [r5, #18]
    1edc:	eb02 2201 	add.w	r2, r2, r1, lsl #8
    1ee0:	b292      	uxth	r2, r2
		if (req_len == 0) {
    1ee2:	b92a      	cbnz	r2, 1ef0 <usb_d_ep_transfer+0xbc>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    1ee4:	2304      	movs	r3, #4
    1ee6:	70ab      	strb	r3, [r5, #2]
			len                 = 0;
    1ee8:	4616      	mov	r6, r2
			zlp                 = true;
    1eea:	4623      	mov	r3, r4
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    1eec:	461c      	mov	r4, r3
    1eee:	e7cf      	b.n	1e90 <usb_d_ep_transfer+0x5c>
			if (dir) {
    1ef0:	f995 100c 	ldrsb.w	r1, [r5, #12]
    1ef4:	4296      	cmp	r6, r2
    1ef6:	bf28      	it	cs
    1ef8:	4616      	movcs	r6, r2
    1efa:	2900      	cmp	r1, #0
    1efc:	daf6      	bge.n	1eec <usb_d_ep_transfer+0xb8>
				zlp = (req_len > len);
    1efe:	42b2      	cmp	r2, r6
    1f00:	bf94      	ite	ls
    1f02:	2300      	movls	r3, #0
    1f04:	2301      	movhi	r3, #1
    1f06:	e7c3      	b.n	1e90 <usb_d_ep_transfer+0x5c>
	struct usb_d_transfer trans
    1f08:	f002 020f 	and.w	r2, r2, #15
    1f0c:	e7c8      	b.n	1ea0 <usb_d_ep_transfer+0x6c>
		return -USB_ERR_PARAM;
    1f0e:	f06f 0011 	mvn.w	r0, #17
    1f12:	e7db      	b.n	1ecc <usb_d_ep_transfer+0x98>
			return USB_HALTED;
    1f14:	2002      	movs	r0, #2
    1f16:	e7d9      	b.n	1ecc <usb_d_ep_transfer+0x98>
    1f18:	00001aed 	.word	0x00001aed
    1f1c:	000011a5 	.word	0x000011a5
    1f20:	000011b3 	.word	0x000011b3
    1f24:	00004041 	.word	0x00004041
    1f28:	20000334 	.word	0x20000334

00001f2c <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    1f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1f30:	4605      	mov	r5, r0
	if (ctrl == USB_EP_HALT_CLR) {
    1f32:	460c      	mov	r4, r1
    1f34:	b9d9      	cbnz	r1, 1f6e <usb_d_ep_halt+0x42>
	int8_t           ep_index = _usb_d_find_ep(ep);
    1f36:	4b13      	ldr	r3, [pc, #76]	; (1f84 <usb_d_ep_halt+0x58>)
    1f38:	4798      	blx	r3
	if (ep_index < 0) {
    1f3a:	1e07      	subs	r7, r0, #0
    1f3c:	db1e      	blt.n	1f7c <usb_d_ep_halt+0x50>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    1f3e:	2102      	movs	r1, #2
    1f40:	4628      	mov	r0, r5
    1f42:	4e11      	ldr	r6, [pc, #68]	; (1f88 <usb_d_ep_halt+0x5c>)
    1f44:	47b0      	blx	r6
    1f46:	b1d8      	cbz	r0, 1f80 <usb_d_ep_halt+0x54>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1f48:	4621      	mov	r1, r4
    1f4a:	4628      	mov	r0, r5
    1f4c:	47b0      	blx	r6
		if (rc < 0) {
    1f4e:	2800      	cmp	r0, #0
    1f50:	db16      	blt.n	1f80 <usb_d_ep_halt+0x54>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    1f52:	480e      	ldr	r0, [pc, #56]	; (1f8c <usb_d_ep_halt+0x60>)
    1f54:	eb00 1047 	add.w	r0, r0, r7, lsl #5
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    1f58:	2103      	movs	r1, #3
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    1f5a:	2301      	movs	r3, #1
    1f5c:	7083      	strb	r3, [r0, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    1f5e:	70c1      	strb	r1, [r0, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    1f60:	69c3      	ldr	r3, [r0, #28]
    1f62:	4622      	mov	r2, r4
    1f64:	4628      	mov	r0, r5
    1f66:	4798      	blx	r3
	return ERR_NONE;
    1f68:	4620      	mov	r0, r4
    1f6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    1f6e:	2901      	cmp	r1, #1
    1f70:	4b05      	ldr	r3, [pc, #20]	; (1f88 <usb_d_ep_halt+0x5c>)
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    1f72:	bf18      	it	ne
    1f74:	2102      	movne	r1, #2
	}
}
    1f76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    1f7a:	4718      	bx	r3
		return -USB_ERR_PARAM;
    1f7c:	f06f 0011 	mvn.w	r0, #17
}
    1f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1f84:	00001aed 	.word	0x00001aed
    1f88:	00003f09 	.word	0x00003f09
    1f8c:	20000334 	.word	0x20000334

00001f90 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    1f90:	b538      	push	{r3, r4, r5, lr}
	int8_t           ep_index = _usb_d_find_ep(ep);
    1f92:	4b0f      	ldr	r3, [pc, #60]	; (1fd0 <usb_d_ep_register_callback+0x40>)
{
    1f94:	4614      	mov	r4, r2
    1f96:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    1f98:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    1f9a:	4a0e      	ldr	r2, [pc, #56]	; (1fd4 <usb_d_ep_register_callback+0x44>)
    1f9c:	2c00      	cmp	r4, #0
    1f9e:	bf08      	it	eq
    1fa0:	4614      	moveq	r4, r2
	if (ep_index < 0) {
    1fa2:	2800      	cmp	r0, #0
    1fa4:	db13      	blt.n	1fce <usb_d_ep_register_callback+0x3e>
		return;
	}
	switch (type) {
    1fa6:	2d01      	cmp	r5, #1
    1fa8:	d008      	beq.n	1fbc <usb_d_ep_register_callback+0x2c>
    1faa:	d302      	bcc.n	1fb2 <usb_d_ep_register_callback+0x22>
    1fac:	2d02      	cmp	r5, #2
    1fae:	d00a      	beq.n	1fc6 <usb_d_ep_register_callback+0x36>
    1fb0:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    1fb2:	4b09      	ldr	r3, [pc, #36]	; (1fd8 <usb_d_ep_register_callback+0x48>)
    1fb4:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    1fb8:	6144      	str	r4, [r0, #20]
		break;
    1fba:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    1fbc:	4b06      	ldr	r3, [pc, #24]	; (1fd8 <usb_d_ep_register_callback+0x48>)
    1fbe:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    1fc2:	6184      	str	r4, [r0, #24]
		break;
    1fc4:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    1fc6:	4b04      	ldr	r3, [pc, #16]	; (1fd8 <usb_d_ep_register_callback+0x48>)
    1fc8:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    1fcc:	61c4      	str	r4, [r0, #28]
    1fce:	bd38      	pop	{r3, r4, r5, pc}
    1fd0:	00001aed 	.word	0x00001aed
    1fd4:	00001b1d 	.word	0x00001b1d
    1fd8:	20000334 	.word	0x20000334

00001fdc <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    1fdc:	b900      	cbnz	r0, 1fe0 <assert+0x4>
		__asm("BKPT #0");
    1fde:	be00      	bkpt	0x0000
    1fe0:	4770      	bx	lr

00001fe2 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    1fe2:	6800      	ldr	r0, [r0, #0]
    1fe4:	b900      	cbnz	r0, 1fe8 <is_list_element+0x6>
    1fe6:	4770      	bx	lr
		if (it == element) {
    1fe8:	4288      	cmp	r0, r1
    1fea:	d1fa      	bne.n	1fe2 <is_list_element>
			return true;
    1fec:	2001      	movs	r0, #1
		}
	}

	return false;
}
    1fee:	4770      	bx	lr

00001ff0 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    1ff0:	b538      	push	{r3, r4, r5, lr}
	ASSERT(!is_list_element(list, element));
    1ff2:	4b07      	ldr	r3, [pc, #28]	; (2010 <list_insert_as_head+0x20>)
{
    1ff4:	460d      	mov	r5, r1
    1ff6:	4604      	mov	r4, r0
	ASSERT(!is_list_element(list, element));
    1ff8:	4798      	blx	r3
    1ffa:	f080 0001 	eor.w	r0, r0, #1
    1ffe:	4b05      	ldr	r3, [pc, #20]	; (2014 <list_insert_as_head+0x24>)
    2000:	4905      	ldr	r1, [pc, #20]	; (2018 <list_insert_as_head+0x28>)
    2002:	2239      	movs	r2, #57	; 0x39
    2004:	b2c0      	uxtb	r0, r0
    2006:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    2008:	6823      	ldr	r3, [r4, #0]
    200a:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    200c:	6025      	str	r5, [r4, #0]
    200e:	bd38      	pop	{r3, r4, r5, pc}
    2010:	00001fe3 	.word	0x00001fe3
    2014:	00001fdd 	.word	0x00001fdd
    2018:	0000c51f 	.word	0x0000c51f

0000201c <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    201c:	6803      	ldr	r3, [r0, #0]
    201e:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    2020:	6001      	str	r1, [r0, #0]
    2022:	4770      	bx	lr

00002024 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    2024:	b570      	push	{r4, r5, r6, lr}
	struct list_element *it = list->head;

	ASSERT(!is_list_element(list, element));
    2026:	4b0b      	ldr	r3, [pc, #44]	; (2054 <list_insert_at_end+0x30>)
	struct list_element *it = list->head;
    2028:	6805      	ldr	r5, [r0, #0]
{
    202a:	4606      	mov	r6, r0
    202c:	460c      	mov	r4, r1
	ASSERT(!is_list_element(list, element));
    202e:	4798      	blx	r3
    2030:	f080 0001 	eor.w	r0, r0, #1
    2034:	4b08      	ldr	r3, [pc, #32]	; (2058 <list_insert_at_end+0x34>)
    2036:	4909      	ldr	r1, [pc, #36]	; (205c <list_insert_at_end+0x38>)
    2038:	224f      	movs	r2, #79	; 0x4f
    203a:	b2c0      	uxtb	r0, r0
    203c:	4798      	blx	r3

	if (!list->head) {
    203e:	6833      	ldr	r3, [r6, #0]
    2040:	b91b      	cbnz	r3, 204a <list_insert_at_end+0x26>
		list->head                             = (struct list_element *)element;
    2042:	6034      	str	r4, [r6, #0]

	while (it->next) {
		it = it->next;
	}
	it->next                               = (struct list_element *)element;
	((struct list_element *)element)->next = NULL;
    2044:	6023      	str	r3, [r4, #0]
    2046:	bd70      	pop	{r4, r5, r6, pc}
    2048:	461d      	mov	r5, r3
	while (it->next) {
    204a:	682b      	ldr	r3, [r5, #0]
    204c:	2b00      	cmp	r3, #0
    204e:	d1fb      	bne.n	2048 <list_insert_at_end+0x24>
	it->next                               = (struct list_element *)element;
    2050:	602c      	str	r4, [r5, #0]
    2052:	e7f7      	b.n	2044 <list_insert_at_end+0x20>
    2054:	00001fe3 	.word	0x00001fe3
    2058:	00001fdd 	.word	0x00001fdd
    205c:	0000c51f 	.word	0x0000c51f

00002060 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    2060:	6803      	ldr	r3, [r0, #0]
    2062:	b10b      	cbz	r3, 2068 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    2064:	681a      	ldr	r2, [r3, #0]
    2066:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    2068:	4618      	mov	r0, r3
    206a:	4770      	bx	lr

0000206c <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    206c:	b570      	push	{r4, r5, r6, lr}
    206e:	460e      	mov	r6, r1
    2070:	4614      	mov	r4, r2
	ASSERT(rb && buf && size);
    2072:	4605      	mov	r5, r0
    2074:	b198      	cbz	r0, 209e <ringbuffer_init+0x32>
    2076:	b199      	cbz	r1, 20a0 <ringbuffer_init+0x34>
    2078:	1c10      	adds	r0, r2, #0
    207a:	bf18      	it	ne
    207c:	2001      	movne	r0, #1
    207e:	2228      	movs	r2, #40	; 0x28
    2080:	4908      	ldr	r1, [pc, #32]	; (20a4 <ringbuffer_init+0x38>)
    2082:	4b09      	ldr	r3, [pc, #36]	; (20a8 <ringbuffer_init+0x3c>)
    2084:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    2086:	1e63      	subs	r3, r4, #1
    2088:	ea14 0003 	ands.w	r0, r4, r3
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    208c:	bf01      	itttt	eq
    208e:	606b      	streq	r3, [r5, #4]
	rb->read_index  = 0;
    2090:	60a8      	streq	r0, [r5, #8]
	rb->write_index = rb->read_index;
    2092:	60e8      	streq	r0, [r5, #12]
	rb->buf         = (uint8_t *)buf;
    2094:	602e      	streq	r6, [r5, #0]
		return ERR_INVALID_ARG;
    2096:	bf18      	it	ne
    2098:	f06f 000c 	mvnne.w	r0, #12

	return ERR_NONE;
}
    209c:	bd70      	pop	{r4, r5, r6, pc}
    209e:	e7ee      	b.n	207e <ringbuffer_init+0x12>
	ASSERT(rb && buf && size);
    20a0:	4608      	mov	r0, r1
    20a2:	e7ec      	b.n	207e <ringbuffer_init+0x12>
    20a4:	0000c53d 	.word	0x0000c53d
    20a8:	00001fdd 	.word	0x00001fdd

000020ac <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    20ac:	b538      	push	{r3, r4, r5, lr}
    20ae:	460d      	mov	r5, r1
	ASSERT(rb && data);
    20b0:	4604      	mov	r4, r0
    20b2:	b1a0      	cbz	r0, 20de <ringbuffer_get+0x32>
    20b4:	1c08      	adds	r0, r1, #0
    20b6:	bf18      	it	ne
    20b8:	2001      	movne	r0, #1
    20ba:	2240      	movs	r2, #64	; 0x40
    20bc:	4b0a      	ldr	r3, [pc, #40]	; (20e8 <ringbuffer_get+0x3c>)
    20be:	490b      	ldr	r1, [pc, #44]	; (20ec <ringbuffer_get+0x40>)
    20c0:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    20c2:	68a3      	ldr	r3, [r4, #8]
    20c4:	68e2      	ldr	r2, [r4, #12]
    20c6:	429a      	cmp	r2, r3
    20c8:	d00a      	beq.n	20e0 <ringbuffer_get+0x34>
		*data = rb->buf[rb->read_index & rb->size];
    20ca:	6862      	ldr	r2, [r4, #4]
    20cc:	4013      	ands	r3, r2
    20ce:	6822      	ldr	r2, [r4, #0]
    20d0:	5cd3      	ldrb	r3, [r2, r3]
    20d2:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    20d4:	68a3      	ldr	r3, [r4, #8]
    20d6:	3301      	adds	r3, #1
    20d8:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    20da:	2000      	movs	r0, #0
    20dc:	bd38      	pop	{r3, r4, r5, pc}
    20de:	e7ec      	b.n	20ba <ringbuffer_get+0xe>
	}

	return ERR_NOT_FOUND;
    20e0:	f06f 0009 	mvn.w	r0, #9
}
    20e4:	bd38      	pop	{r3, r4, r5, pc}
    20e6:	bf00      	nop
    20e8:	00001fdd 	.word	0x00001fdd
    20ec:	0000c53d 	.word	0x0000c53d

000020f0 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    20f0:	b538      	push	{r3, r4, r5, lr}
	ASSERT(rb);
    20f2:	4604      	mov	r4, r0
    20f4:	3000      	adds	r0, #0
    20f6:	bf18      	it	ne
    20f8:	2001      	movne	r0, #1
{
    20fa:	460d      	mov	r5, r1
	ASSERT(rb);
    20fc:	2251      	movs	r2, #81	; 0x51
    20fe:	490b      	ldr	r1, [pc, #44]	; (212c <ringbuffer_put+0x3c>)
    2100:	4b0b      	ldr	r3, [pc, #44]	; (2130 <ringbuffer_put+0x40>)
    2102:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    2104:	68e3      	ldr	r3, [r4, #12]
    2106:	6862      	ldr	r2, [r4, #4]
    2108:	4013      	ands	r3, r2
    210a:	6822      	ldr	r2, [r4, #0]
    210c:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    210e:	68e3      	ldr	r3, [r4, #12]
    2110:	68a1      	ldr	r1, [r4, #8]
    2112:	6862      	ldr	r2, [r4, #4]
    2114:	1a59      	subs	r1, r3, r1
    2116:	4291      	cmp	r1, r2
		rb->read_index = rb->write_index - rb->size;
    2118:	bf88      	it	hi
    211a:	1a9a      	subhi	r2, r3, r2
	}

	rb->write_index++;
    211c:	f103 0301 	add.w	r3, r3, #1
		rb->read_index = rb->write_index - rb->size;
    2120:	bf88      	it	hi
    2122:	60a2      	strhi	r2, [r4, #8]
	rb->write_index++;
    2124:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    2126:	2000      	movs	r0, #0
    2128:	bd38      	pop	{r3, r4, r5, pc}
    212a:	bf00      	nop
    212c:	0000c53d 	.word	0x0000c53d
    2130:	00001fdd 	.word	0x00001fdd

00002134 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    2134:	b510      	push	{r4, lr}
	ASSERT(rb);
    2136:	4604      	mov	r4, r0
    2138:	3000      	adds	r0, #0
    213a:	bf18      	it	ne
    213c:	2001      	movne	r0, #1
    213e:	2267      	movs	r2, #103	; 0x67
    2140:	4903      	ldr	r1, [pc, #12]	; (2150 <ringbuffer_num+0x1c>)
    2142:	4b04      	ldr	r3, [pc, #16]	; (2154 <ringbuffer_num+0x20>)
    2144:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    2146:	68e0      	ldr	r0, [r4, #12]
    2148:	68a3      	ldr	r3, [r4, #8]
}
    214a:	1ac0      	subs	r0, r0, r3
    214c:	bd10      	pop	{r4, pc}
    214e:	bf00      	nop
    2150:	0000c53d 	.word	0x0000c53d
    2154:	00001fdd 	.word	0x00001fdd

00002158 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    2158:	4b04      	ldr	r3, [pc, #16]	; (216c <_sbrk+0x14>)
    215a:	6819      	ldr	r1, [r3, #0]
{
    215c:	4602      	mov	r2, r0
	if (heap == NULL) {
    215e:	b909      	cbnz	r1, 2164 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
    2160:	4903      	ldr	r1, [pc, #12]	; (2170 <_sbrk+0x18>)
    2162:	6019      	str	r1, [r3, #0]
	}
	prev_heap = heap;
    2164:	6818      	ldr	r0, [r3, #0]

	heap += incr;
    2166:	4402      	add	r2, r0
    2168:	601a      	str	r2, [r3, #0]

	return (caddr_t)prev_heap;
}
    216a:	4770      	bx	lr
    216c:	200003b4 	.word	0x200003b4
    2170:	200150b8 	.word	0x200150b8

00002174 <hri_adc_wait_for_sync>:
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    2174:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2176:	420b      	tst	r3, r1
    2178:	d1fc      	bne.n	2174 <hri_adc_wait_for_sync>
}
    217a:	4770      	bx	lr

0000217c <hri_adc_set_CTRLA_ENABLE_bit>:
{
    217c:	b508      	push	{r3, lr}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
    217e:	2103      	movs	r1, #3
    2180:	4b03      	ldr	r3, [pc, #12]	; (2190 <hri_adc_set_CTRLA_ENABLE_bit+0x14>)
    2182:	4798      	blx	r3
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
    2184:	8803      	ldrh	r3, [r0, #0]
    2186:	b29b      	uxth	r3, r3
    2188:	f043 0302 	orr.w	r3, r3, #2
    218c:	8003      	strh	r3, [r0, #0]
    218e:	bd08      	pop	{r3, pc}
    2190:	00002175 	.word	0x00002175

00002194 <hri_adc_clear_CTRLA_ENABLE_bit>:
{
    2194:	b508      	push	{r3, lr}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
    2196:	2103      	movs	r1, #3
    2198:	4b04      	ldr	r3, [pc, #16]	; (21ac <hri_adc_clear_CTRLA_ENABLE_bit+0x18>)
    219a:	4798      	blx	r3
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    219c:	8803      	ldrh	r3, [r0, #0]
    219e:	f023 0302 	bic.w	r3, r3, #2
    21a2:	041b      	lsls	r3, r3, #16
    21a4:	0c1b      	lsrs	r3, r3, #16
    21a6:	8003      	strh	r3, [r0, #0]
    21a8:	bd08      	pop	{r3, pc}
    21aa:	bf00      	nop
    21ac:	00002175 	.word	0x00002175

000021b0 <_adc_init>:
 *
 * \param[in] hw The pointer to hardware instance
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{
    21b0:	b538      	push	{r3, r4, r5, lr}
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
    21b2:	6b03      	ldr	r3, [r0, #48]	; 0x30
    21b4:	4d17      	ldr	r5, [pc, #92]	; (2214 <_adc_init+0x64>)

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
    21b6:	f013 0f01 	tst.w	r3, #1
{
    21ba:	4602      	mov	r2, r0
    21bc:	460c      	mov	r4, r1
	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
    21be:	d108      	bne.n	21d2 <_adc_init+0x22>
	tmp = ((Adc *)hw)->CTRLA.reg;
    21c0:	8803      	ldrh	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    21c2:	079b      	lsls	r3, r3, #30
    21c4:	d503      	bpl.n	21ce <_adc_init+0x1e>
			hri_adc_clear_CTRLA_ENABLE_bit(hw);
    21c6:	4b14      	ldr	r3, [pc, #80]	; (2218 <_adc_init+0x68>)
    21c8:	4798      	blx	r3
			hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_ENABLE);
    21ca:	2102      	movs	r1, #2
    21cc:	47a8      	blx	r5
	((Adc *)hw)->CTRLA.reg = data;
    21ce:	2301      	movs	r3, #1
    21d0:	8013      	strh	r3, [r2, #0]
		}
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);
    21d2:	4610      	mov	r0, r2
    21d4:	2101      	movs	r1, #1
    21d6:	47a8      	blx	r5

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    21d8:	4910      	ldr	r1, [pc, #64]	; (221c <_adc_init+0x6c>)
    21da:	2316      	movs	r3, #22
    21dc:	fb03 1104 	mla	r1, r3, r4, r1
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);

	return ERR_NONE;
}
    21e0:	2000      	movs	r0, #0
	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    21e2:	888b      	ldrh	r3, [r1, #4]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    21e4:	80d3      	strh	r3, [r2, #6]
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    21e6:	798b      	ldrb	r3, [r1, #6]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    21e8:	7213      	strb	r3, [r2, #8]
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    21ea:	79cb      	ldrb	r3, [r1, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    21ec:	7093      	strb	r3, [r2, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    21ee:	890b      	ldrh	r3, [r1, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    21f0:	8093      	strh	r3, [r2, #4]
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    21f2:	7a8b      	ldrb	r3, [r1, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    21f4:	7293      	strb	r3, [r2, #10]
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    21f6:	7acb      	ldrb	r3, [r1, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    21f8:	72d3      	strb	r3, [r2, #11]
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    21fa:	898b      	ldrh	r3, [r1, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    21fc:	8193      	strh	r3, [r2, #12]
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    21fe:	89cb      	ldrh	r3, [r1, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    2200:	81d3      	strh	r3, [r2, #14]
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    2202:	8a0b      	ldrh	r3, [r1, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    2204:	8213      	strh	r3, [r2, #16]
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    2206:	8a4b      	ldrh	r3, [r1, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    2208:	8253      	strh	r3, [r2, #18]
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    220a:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    220c:	70d3      	strb	r3, [r2, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    220e:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    2210:	8013      	strh	r3, [r2, #0]
}
    2212:	bd38      	pop	{r3, r4, r5, pc}
    2214:	00002175 	.word	0x00002175
    2218:	00002195 	.word	0x00002195
    221c:	0000c562 	.word	0x0000c562

00002220 <_adc_get_regs>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    2220:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    2224:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
		if (_adcs[i].number == n) {
    2228:	f3c0 2087 	ubfx	r0, r0, #10, #8
{
    222c:	b508      	push	{r3, lr}
		if (_adcs[i].number == n) {
    222e:	b120      	cbz	r0, 223a <_adc_get_regs+0x1a>
	ASSERT(false);
    2230:	2288      	movs	r2, #136	; 0x88
    2232:	4903      	ldr	r1, [pc, #12]	; (2240 <_adc_get_regs+0x20>)
    2234:	4b03      	ldr	r3, [pc, #12]	; (2244 <_adc_get_regs+0x24>)
    2236:	2000      	movs	r0, #0
    2238:	4798      	blx	r3
}
    223a:	2000      	movs	r0, #0
    223c:	bd08      	pop	{r3, pc}
    223e:	bf00      	nop
    2240:	0000c578 	.word	0x0000c578
    2244:	00001fdd 	.word	0x00001fdd

00002248 <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
    2248:	b570      	push	{r4, r5, r6, lr}
	ASSERT(device);
    224a:	4605      	mov	r5, r0
    224c:	3000      	adds	r0, #0
{
    224e:	460c      	mov	r4, r1
	ASSERT(device);
    2250:	bf18      	it	ne
    2252:	2001      	movne	r0, #1
    2254:	4906      	ldr	r1, [pc, #24]	; (2270 <_adc_sync_init+0x28>)
    2256:	4b07      	ldr	r3, [pc, #28]	; (2274 <_adc_sync_init+0x2c>)
    2258:	22ce      	movs	r2, #206	; 0xce
    225a:	4798      	blx	r3

	device->hw = hw;
    225c:	602c      	str	r4, [r5, #0]

	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
    225e:	4620      	mov	r0, r4
    2260:	4b05      	ldr	r3, [pc, #20]	; (2278 <_adc_sync_init+0x30>)
    2262:	4798      	blx	r3
    2264:	4b05      	ldr	r3, [pc, #20]	; (227c <_adc_sync_init+0x34>)
    2266:	4601      	mov	r1, r0
    2268:	4620      	mov	r0, r4
}
    226a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
    226e:	4718      	bx	r3
    2270:	0000c578 	.word	0x0000c578
    2274:	00001fdd 	.word	0x00001fdd
    2278:	00002221 	.word	0x00002221
    227c:	000021b1 	.word	0x000021b1

00002280 <_adc_sync_enable_channel>:
 */
void _adc_sync_enable_channel(struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
    2280:	6800      	ldr	r0, [r0, #0]
    2282:	4b01      	ldr	r3, [pc, #4]	; (2288 <_adc_sync_enable_channel+0x8>)
    2284:	4718      	bx	r3
    2286:	bf00      	nop
    2288:	0000217d 	.word	0x0000217d

0000228c <_adc_sync_get_data_size>:
/**
 * \brief Retrieve ADC conversion data size
 */
uint8_t _adc_sync_get_data_size(const struct _adc_sync_device *const device)
{
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    228c:	6803      	ldr	r3, [r0, #0]
	tmp = ((Adc *)hw)->CTRLB.reg;
    228e:	88db      	ldrh	r3, [r3, #6]
    2290:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    2294:	2b03      	cmp	r3, #3
}
    2296:	bf0c      	ite	eq
    2298:	2001      	moveq	r0, #1
    229a:	2002      	movne	r0, #2
    229c:	4770      	bx	lr

0000229e <_adc_sync_is_channel_conversion_done>:
 */
bool _adc_sync_is_channel_conversion_done(const struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	return hri_adc_get_interrupt_RESRDY_bit(device->hw);
    229e:	6803      	ldr	r3, [r0, #0]
	return (((Adc *)hw)->INTFLAG.reg & ADC_INTFLAG_RESRDY) >> ADC_INTFLAG_RESRDY_Pos;
    22a0:	f893 002e 	ldrb.w	r0, [r3, #46]	; 0x2e
}
    22a4:	f000 0001 	and.w	r0, r0, #1
    22a8:	4770      	bx	lr
	...

000022ac <_adc_sync_convert>:
/**
 * \brief Make conversion
 */
void _adc_sync_convert(struct _adc_sync_device *const device)
{
	hri_adc_set_SWTRIG_START_bit(device->hw);
    22ac:	6802      	ldr	r2, [r0, #0]
{
    22ae:	b508      	push	{r3, lr}
}

static inline void hri_adc_set_SWTRIG_START_bit(const void *const hw)
{
	ADC_CRITICAL_SECTION_ENTER();
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_MASK);
    22b0:	f640 71ff 	movw	r1, #4095	; 0xfff
    22b4:	4b03      	ldr	r3, [pc, #12]	; (22c4 <_adc_sync_convert+0x18>)
    22b6:	4610      	mov	r0, r2
    22b8:	4798      	blx	r3
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START;
    22ba:	7d13      	ldrb	r3, [r2, #20]
    22bc:	f043 0302 	orr.w	r3, r3, #2
    22c0:	7513      	strb	r3, [r2, #20]
    22c2:	bd08      	pop	{r3, pc}
    22c4:	00002175 	.word	0x00002175

000022c8 <_adc_sync_read_channel_data>:
 */
uint16_t _adc_sync_read_channel_data(const struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	return hri_adc_read_RESULT_reg(device->hw);
    22c8:	6803      	ldr	r3, [r0, #0]
	return tmp;
}

static inline hri_adc_result_reg_t hri_adc_read_RESULT_reg(const void *const hw)
{
	return ((Adc *)hw)->RESULT.reg;
    22ca:	f8b3 0040 	ldrh.w	r0, [r3, #64]	; 0x40
}
    22ce:	b280      	uxth	r0, r0
    22d0:	4770      	bx	lr

000022d2 <_aes_sync_init>:
}

static inline void hri_aes_write_CTRLA_reg(const void *const hw, hri_aes_ctrla_reg_t data)
{
	AES_CRITICAL_SECTION_ENTER();
	((Aes *)hw)->CTRLA.reg = data;
    22d2:	2300      	movs	r3, #0
    22d4:	2201      	movs	r2, #1
    22d6:	600b      	str	r3, [r1, #0]
    22d8:	600a      	str	r2, [r1, #0]
int32_t _aes_sync_init(struct _aes_sync_device *const dev, void *const hw)
{
	hri_aes_write_CTRLA_reg(hw, 0);
	hri_aes_write_CTRLA_reg(hw, AES_CTRLA_SWRST);

	dev->hw = hw;
    22da:	6001      	str	r1, [r0, #0]
}

static inline void hri_aes_write_DBGCTRL_reg(const void *const hw, hri_aes_dbgctrl_reg_t data)
{
	AES_CRITICAL_SECTION_ENTER();
	((Aes *)hw)->DBGCTRL.reg = data;
    22dc:	724a      	strb	r2, [r1, #9]

	hri_aes_write_DBGCTRL_reg(dev->hw, _aes.dbgctrl);

	return ERR_NONE;
}
    22de:	4618      	mov	r0, r3
    22e0:	4770      	bx	lr

000022e2 <_aes_sync_enable>:
    22e2:	2000      	movs	r0, #0
    22e4:	4770      	bx	lr
	...

000022e8 <_aes_sync_set_key>:

/**
 * \brief              Set AES Key (encryption/decryption)
 */
int32_t _aes_sync_set_key(struct _aes_sync_device *const dev, const uint8_t *key, const enum aes_keysize size)
{
    22e8:	b508      	push	{r3, lr}

	dev->keysize = size;
    22ea:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
	memcpy(dev->key, key, (size + 2) << 3);
    22ee:	3202      	adds	r2, #2
    22f0:	00d2      	lsls	r2, r2, #3
    22f2:	4b02      	ldr	r3, [pc, #8]	; (22fc <_aes_sync_set_key+0x14>)
    22f4:	3004      	adds	r0, #4
    22f6:	4798      	blx	r3
	return ERR_NONE;
}
    22f8:	2000      	movs	r0, #0
    22fa:	bd08      	pop	{r3, pc}
    22fc:	0000b2fb 	.word	0x0000b2fb

00002300 <_reset_mcu>:
  __ASM volatile ("dsb 0xF":::"memory");
    2300:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2304:	4905      	ldr	r1, [pc, #20]	; (231c <_reset_mcu+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2306:	4b06      	ldr	r3, [pc, #24]	; (2320 <_reset_mcu+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2308:	68ca      	ldr	r2, [r1, #12]
    230a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    230e:	4313      	orrs	r3, r2
    2310:	60cb      	str	r3, [r1, #12]
    2312:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    2316:	bf00      	nop
    2318:	e7fd      	b.n	2316 <_reset_mcu+0x16>
    231a:	bf00      	nop
    231c:	e000ed00 	.word	0xe000ed00
    2320:	05fa0004 	.word	0x05fa0004

00002324 <_irq_set>:
    NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2324:	0943      	lsrs	r3, r0, #5
    2326:	2201      	movs	r2, #1
    2328:	f000 001f 	and.w	r0, r0, #31
    232c:	fa02 f000 	lsl.w	r0, r2, r0
    2330:	3340      	adds	r3, #64	; 0x40
    2332:	4a02      	ldr	r2, [pc, #8]	; (233c <_irq_set+0x18>)
    2334:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    2338:	4770      	bx	lr
    233a:	bf00      	nop
    233c:	e000e100 	.word	0xe000e100

00002340 <_get_cycles_for_us>:
{
	switch (power) {
	case 9:
		return (us * (freq / 1000000) - 1) + 1;
	case 8:
		return (us * (freq / 100000) - 1) / 10 + 1;
    2340:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
    2344:	4358      	muls	r0, r3
    2346:	3801      	subs	r0, #1
    2348:	230a      	movs	r3, #10
    234a:	fbb0 f0f3 	udiv	r0, r0, r3
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    234e:	3001      	adds	r0, #1
    2350:	4770      	bx	lr

00002352 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    2352:	f64b 3380 	movw	r3, #48000	; 0xbb80
    2356:	4358      	muls	r0, r3
    2358:	4770      	bx	lr
	...

0000235c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    235c:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    235e:	4a0d      	ldr	r2, [pc, #52]	; (2394 <_init_chip+0x38>)

	_osc32kctrl_init_sources();
	_oscctrl_init_sources();
	_mclk_init();
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    2360:	4c0d      	ldr	r4, [pc, #52]	; (2398 <_init_chip+0x3c>)
    2362:	8813      	ldrh	r3, [r2, #0]
    2364:	b29b      	uxth	r3, r3
    2366:	8013      	strh	r3, [r2, #0]
	_osc32kctrl_init_sources();
    2368:	4b0c      	ldr	r3, [pc, #48]	; (239c <_init_chip+0x40>)
    236a:	4798      	blx	r3
	_oscctrl_init_sources();
    236c:	4b0c      	ldr	r3, [pc, #48]	; (23a0 <_init_chip+0x44>)
    236e:	4798      	blx	r3
	_mclk_init();
    2370:	4b0c      	ldr	r3, [pc, #48]	; (23a4 <_init_chip+0x48>)
    2372:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    2374:	2005      	movs	r0, #5
    2376:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    2378:	4b0b      	ldr	r3, [pc, #44]	; (23a8 <_init_chip+0x4c>)
    237a:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    237c:	f640 70fa 	movw	r0, #4090	; 0xffa
    2380:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    2382:	4a0a      	ldr	r2, [pc, #40]	; (23ac <_init_chip+0x50>)
    2384:	6913      	ldr	r3, [r2, #16]
    2386:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    238a:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif
}
    238c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_dma_init();
    2390:	4b07      	ldr	r3, [pc, #28]	; (23b0 <_init_chip+0x54>)
    2392:	4718      	bx	r3
    2394:	41004000 	.word	0x41004000
    2398:	000025b5 	.word	0x000025b5
    239c:	00002cc1 	.word	0x00002cc1
    23a0:	00002cd5 	.word	0x00002cd5
    23a4:	000029a5 	.word	0x000029a5
    23a8:	00002cd9 	.word	0x00002cd9
    23ac:	40000800 	.word	0x40000800
    23b0:	00002401 	.word	0x00002401

000023b4 <_dmac_handler>:

/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    23b4:	b410      	push	{r4}
}

static inline hri_dmac_intpend_reg_t hri_dmac_get_INTPEND_reg(const void *const hw, hri_dmac_intpend_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Dmac *)hw)->INTPEND.reg;
    23b6:	4b10      	ldr	r3, [pc, #64]	; (23f8 <_dmac_handler+0x44>)
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
	struct _dma_resource *tmp_resource = &_resources[channel];
    23b8:	4c10      	ldr	r4, [pc, #64]	; (23fc <_dmac_handler+0x48>)
    23ba:	8c19      	ldrh	r1, [r3, #32]
	tmp &= mask;
    23bc:	f001 011f 	and.w	r1, r1, #31
	((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = mask;
}

static inline bool hri_dmac_get_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
    23c0:	eb03 1301 	add.w	r3, r3, r1, lsl #4
    23c4:	220c      	movs	r2, #12
    23c6:	434a      	muls	r2, r1
    23c8:	f893 104e 	ldrb.w	r1, [r3, #78]	; 0x4e

	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC, channel)) {
    23cc:	07c9      	lsls	r1, r1, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    23ce:	eb04 0002 	add.w	r0, r4, r2
	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC, channel)) {
    23d2:	d505      	bpl.n	23e0 <_dmac_handler+0x2c>
}

static inline void hri_dmac_clear_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    23d4:	2201      	movs	r2, #1
    23d6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
    23da:	6843      	ldr	r3, [r0, #4]
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
	}
}
    23dc:	bc10      	pop	{r4}
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    23de:	4718      	bx	r3
}

static inline bool hri_dmac_get_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
    23e0:	f893 104e 	ldrb.w	r1, [r3, #78]	; 0x4e
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
    23e4:	0789      	lsls	r1, r1, #30
    23e6:	d504      	bpl.n	23f2 <_dmac_handler+0x3e>
}

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    23e8:	2102      	movs	r1, #2
    23ea:	f883 104e 	strb.w	r1, [r3, #78]	; 0x4e
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    23ee:	58a3      	ldr	r3, [r4, r2]
    23f0:	e7f4      	b.n	23dc <_dmac_handler+0x28>
}
    23f2:	bc10      	pop	{r4}
    23f4:	4770      	bx	lr
    23f6:	bf00      	nop
    23f8:	4100a000 	.word	0x4100a000
    23fc:	200003c0 	.word	0x200003c0

00002400 <_dma_init>:
{
    2400:	b530      	push	{r4, r5, lr}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    2402:	4b2e      	ldr	r3, [pc, #184]	; (24bc <_dma_init+0xbc>)
    2404:	881a      	ldrh	r2, [r3, #0]
    2406:	f022 0202 	bic.w	r2, r2, #2
    240a:	0412      	lsls	r2, r2, #16
    240c:	0c12      	lsrs	r2, r2, #16
    240e:	801a      	strh	r2, [r3, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    2410:	885a      	ldrh	r2, [r3, #2]
    2412:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
    2416:	0412      	lsls	r2, r2, #16
    2418:	0c12      	lsrs	r2, r2, #16
    241a:	805a      	strh	r2, [r3, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    241c:	881a      	ldrh	r2, [r3, #0]
    241e:	b292      	uxth	r2, r2
    2420:	f042 0201 	orr.w	r2, r2, #1
    2424:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    2426:	881a      	ldrh	r2, [r3, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    2428:	f012 0201 	ands.w	r2, r2, #1
    242c:	d1fb      	bne.n	2426 <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    242e:	f44f 6170 	mov.w	r1, #3840	; 0xf00
    2432:	8019      	strh	r1, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    2434:	7b59      	ldrb	r1, [r3, #13]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    2436:	4822      	ldr	r0, [pc, #136]	; (24c0 <_dma_init+0xc0>)
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    2438:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    243c:	7359      	strb	r1, [r3, #13]
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    243e:	f500 7100 	add.w	r1, r0, #512	; 0x200
	((Dmac *)hw)->PRICTRL0.reg = data;
    2442:	615a      	str	r2, [r3, #20]
	((Dmac *)hw)->BASEADDR.reg = data;
    2444:	6358      	str	r0, [r3, #52]	; 0x34
	((Dmac *)hw)->WRBADDR.reg = data;
    2446:	6399      	str	r1, [r3, #56]	; 0x38
    2448:	491e      	ldr	r1, [pc, #120]	; (24c4 <_dma_init+0xc4>)
    244a:	4613      	mov	r3, r2
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    244c:	f5a0 70c0 	sub.w	r0, r0, #384	; 0x180
    2450:	011c      	lsls	r4, r3, #4
    2452:	f104 4282 	add.w	r2, r4, #1090519040	; 0x41000000
    2456:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    245a:	680d      	ldr	r5, [r1, #0]

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    245c:	6415      	str	r5, [r2, #64]	; 0x40
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    245e:	790d      	ldrb	r5, [r1, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    2460:	f882 5045 	strb.w	r5, [r2, #69]	; 0x45
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    2464:	794d      	ldrb	r5, [r1, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    2466:	f882 5046 	strb.w	r5, [r2, #70]	; 0x46
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    246a:	4404      	add	r4, r0
    246c:	3301      	adds	r3, #1
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    246e:	88ca      	ldrh	r2, [r1, #6]
    2470:	f8a4 2180 	strh.w	r2, [r4, #384]	; 0x180
	for (i = 0; i < DMAC_CH_NUM; i++) {
    2474:	2b20      	cmp	r3, #32
    2476:	f101 0108 	add.w	r1, r1, #8
    247a:	d1e9      	bne.n	2450 <_dma_init+0x50>
    247c:	221f      	movs	r2, #31
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    247e:	2001      	movs	r0, #1
    2480:	0953      	lsrs	r3, r2, #5
    2482:	009b      	lsls	r3, r3, #2
    2484:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    2488:	f002 011f 	and.w	r1, r2, #31
    248c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    2490:	fa00 f101 	lsl.w	r1, r0, r1
    2494:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
    2498:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    249c:	f3bf 8f6f 	isb	sy
    24a0:	3201      	adds	r2, #1
	for (i = 0; i < 5; i++) {
    24a2:	2a24      	cmp	r2, #36	; 0x24
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    24a4:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    24a8:	6019      	str	r1, [r3, #0]
    24aa:	d1e9      	bne.n	2480 <_dma_init+0x80>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    24ac:	4a03      	ldr	r2, [pc, #12]	; (24bc <_dma_init+0xbc>)
    24ae:	8813      	ldrh	r3, [r2, #0]
    24b0:	b29b      	uxth	r3, r3
    24b2:	f043 0302 	orr.w	r3, r3, #2
    24b6:	8013      	strh	r3, [r2, #0]
}
    24b8:	2000      	movs	r0, #0
    24ba:	bd30      	pop	{r4, r5, pc}
    24bc:	4100a000 	.word	0x4100a000
    24c0:	20000540 	.word	0x20000540
    24c4:	0000c590 	.word	0x0000c590

000024c8 <_dma_set_destination_address>:
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    24c8:	4b03      	ldr	r3, [pc, #12]	; (24d8 <_dma_set_destination_address+0x10>)
    24ca:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    24ce:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
}
    24d2:	2000      	movs	r0, #0
    24d4:	4770      	bx	lr
    24d6:	bf00      	nop
    24d8:	200003c0 	.word	0x200003c0

000024dc <_dma_set_source_address>:
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    24dc:	4b03      	ldr	r3, [pc, #12]	; (24ec <_dma_set_source_address+0x10>)
    24de:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    24e2:	f8c0 1184 	str.w	r1, [r0, #388]	; 0x184
}
    24e6:	2000      	movs	r0, #0
    24e8:	4770      	bx	lr
    24ea:	bf00      	nop
    24ec:	200003c0 	.word	0x200003c0

000024f0 <_dma_set_data_amount>:
{
    24f0:	b570      	push	{r4, r5, r6, lr}
	return ((DmacDescriptor *)hw)->DSTADDR.reg;
    24f2:	4a12      	ldr	r2, [pc, #72]	; (253c <_dma_set_data_amount+0x4c>)
    24f4:	0100      	lsls	r0, r0, #4
    24f6:	1814      	adds	r4, r2, r0
    24f8:	f8d4 6188 	ldr.w	r6, [r4, #392]	; 0x188
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    24fc:	f8b4 3180 	ldrh.w	r3, [r4, #384]	; 0x180
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    2500:	f8b4 5180 	ldrh.w	r5, [r4, #384]	; 0x180
	tmp = (tmp & DMAC_BTCTRL_BEATSIZE_Msk) >> DMAC_BTCTRL_BEATSIZE_Pos;
    2504:	f3c3 2301 	ubfx	r3, r3, #8, #2
	if (hri_dmacdescriptor_get_BTCTRL_DSTINC_bit(&_descriptor_section[channel])) {
    2508:	052d      	lsls	r5, r5, #20
		hri_dmacdescriptor_write_DSTADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    250a:	bf42      	ittt	mi
    250c:	fa01 f503 	lslmi.w	r5, r1, r3
    2510:	19ad      	addmi	r5, r5, r6
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    2512:	f8c4 5188 	strmi.w	r5, [r4, #392]	; 0x188
	return ((DmacDescriptor *)hw)->SRCADDR.reg;
    2516:	1814      	adds	r4, r2, r0
	((DmacDescriptor *)hw)->BTCNT.reg = data;
    2518:	4402      	add	r2, r0
	return ((DmacDescriptor *)hw)->SRCADDR.reg;
    251a:	f8d4 5184 	ldr.w	r5, [r4, #388]	; 0x184
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    251e:	f8b4 6180 	ldrh.w	r6, [r4, #384]	; 0x180
	if (hri_dmacdescriptor_get_BTCTRL_SRCINC_bit(&_descriptor_section[channel])) {
    2522:	0576      	lsls	r6, r6, #21
		hri_dmacdescriptor_write_SRCADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    2524:	bf44      	itt	mi
    2526:	fa01 f303 	lslmi.w	r3, r1, r3
    252a:	195b      	addmi	r3, r3, r5
	hri_dmacdescriptor_write_BTCNT_reg(&_descriptor_section[channel], amount);
    252c:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    252e:	bf48      	it	mi
    2530:	f8c4 3184 	strmi.w	r3, [r4, #388]	; 0x184
	((DmacDescriptor *)hw)->BTCNT.reg = data;
    2534:	f8a2 1182 	strh.w	r1, [r2, #386]	; 0x182
}
    2538:	2000      	movs	r0, #0
    253a:	bd70      	pop	{r4, r5, r6, pc}
    253c:	200003c0 	.word	0x200003c0

00002540 <_dma_enable_transaction>:
	((DmacDescriptor *)hw)->BTCTRL.reg |= DMAC_BTCTRL_VALID;
    2540:	4a0e      	ldr	r2, [pc, #56]	; (257c <_dma_enable_transaction+0x3c>)
    2542:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    2546:	f8b2 3180 	ldrh.w	r3, [r2, #384]	; 0x180
    254a:	b29b      	uxth	r3, r3
    254c:	f043 0301 	orr.w	r3, r3, #1
    2550:	f8a2 3180 	strh.w	r3, [r2, #384]	; 0x180
    2554:	0103      	lsls	r3, r0, #4
    2556:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    255a:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    255e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    2560:	f042 0202 	orr.w	r2, r2, #2
    2564:	641a      	str	r2, [r3, #64]	; 0x40
	if (software_trigger) {
    2566:	b131      	cbz	r1, 2576 <_dma_enable_transaction+0x36>
	((Dmac *)hw)->SWTRIGCTRL.reg |= mask;
    2568:	4a05      	ldr	r2, [pc, #20]	; (2580 <_dma_enable_transaction+0x40>)
		hri_dmac_set_SWTRIGCTRL_reg(DMAC, 1 << channel);
    256a:	2301      	movs	r3, #1
    256c:	6911      	ldr	r1, [r2, #16]
    256e:	fa03 f000 	lsl.w	r0, r3, r0
    2572:	4308      	orrs	r0, r1
    2574:	6110      	str	r0, [r2, #16]
}
    2576:	2000      	movs	r0, #0
    2578:	4770      	bx	lr
    257a:	bf00      	nop
    257c:	200003c0 	.word	0x200003c0
    2580:	4100a000 	.word	0x4100a000

00002584 <DMAC_0_Handler>:
    2584:	4b00      	ldr	r3, [pc, #0]	; (2588 <DMAC_0_Handler+0x4>)
    2586:	4718      	bx	r3
    2588:	000023b5 	.word	0x000023b5

0000258c <DMAC_1_Handler>:
    258c:	4b00      	ldr	r3, [pc, #0]	; (2590 <DMAC_1_Handler+0x4>)
    258e:	4718      	bx	r3
    2590:	000023b5 	.word	0x000023b5

00002594 <DMAC_2_Handler>:
    2594:	4b00      	ldr	r3, [pc, #0]	; (2598 <DMAC_2_Handler+0x4>)
    2596:	4718      	bx	r3
    2598:	000023b5 	.word	0x000023b5

0000259c <DMAC_3_Handler>:
    259c:	4b00      	ldr	r3, [pc, #0]	; (25a0 <DMAC_3_Handler+0x4>)
    259e:	4718      	bx	r3
    25a0:	000023b5 	.word	0x000023b5

000025a4 <DMAC_4_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_4_Handler(void)
{
	_dmac_handler();
    25a4:	4b00      	ldr	r3, [pc, #0]	; (25a8 <DMAC_4_Handler+0x4>)
    25a6:	4718      	bx	r3
    25a8:	000023b5 	.word	0x000023b5

000025ac <_crc_sync_init>:
/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
	device->hw = hw;
    25ac:	6001      	str	r1, [r0, #0]

	return ERR_NONE;
}
    25ae:	2000      	movs	r0, #0
    25b0:	4770      	bx	lr
	...

000025b4 <_gclk_init_generators_by_fref>:
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
#if CONF_GCLK_GEN_0_GENEN == 1
	if (bm & (1ul << 0)) {
    25b4:	07c2      	lsls	r2, r0, #31
	((Gclk *)hw)->GENCTRL[index].reg = data;
    25b6:	bf42      	ittt	mi
    25b8:	4b04      	ldrmi	r3, [pc, #16]	; (25cc <_gclk_init_generators_by_fref+0x18>)
    25ba:	4a05      	ldrmi	r2, [pc, #20]	; (25d0 <_gclk_init_generators_by_fref+0x1c>)
    25bc:	621a      	strmi	r2, [r3, #32]
		        | (CONF_GCLK_GEN_0_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_0_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GEN_0_GENEN << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_1_GENEN == 1
	if (bm & (1ul << 1)) {
    25be:	0783      	lsls	r3, r0, #30
    25c0:	bf42      	ittt	mi
    25c2:	4b02      	ldrmi	r3, [pc, #8]	; (25cc <_gclk_init_generators_by_fref+0x18>)
    25c4:	4a03      	ldrmi	r2, [pc, #12]	; (25d4 <_gclk_init_generators_by_fref+0x20>)
    25c6:	625a      	strmi	r2, [r3, #36]	; 0x24
    25c8:	4770      	bx	lr
    25ca:	bf00      	nop
    25cc:	40001c00 	.word	0x40001c00
    25d0:	00012f06 	.word	0x00012f06
    25d4:	00012f04 	.word	0x00012f04

000025d8 <GMAC_Handler>:

/*
 * \internal GMAC interrupt handler
 */
void GMAC_Handler(void)
{
    25d8:	b513      	push	{r0, r1, r4, lr}
	volatile uint32_t tsr;
	volatile uint32_t rsr;

	tsr = hri_gmac_read_TSR_reg(_gmac_dev->hw);
    25da:	4c11      	ldr	r4, [pc, #68]	; (2620 <GMAC_Handler+0x48>)
    25dc:	6820      	ldr	r0, [r4, #0]
    25de:	6803      	ldr	r3, [r0, #0]
	GMAC_CRITICAL_SECTION_LEAVE();
}

static inline hri_gmac_tsr_reg_t hri_gmac_read_TSR_reg(const void *const hw)
{
	return ((Gmac *)hw)->TSR.reg;
    25e0:	695a      	ldr	r2, [r3, #20]
    25e2:	9200      	str	r2, [sp, #0]
	GMAC_CRITICAL_SECTION_LEAVE();
}

static inline hri_gmac_rsr_reg_t hri_gmac_read_RSR_reg(const void *const hw)
{
	return ((Gmac *)hw)->RSR.reg;
    25e4:	6a1a      	ldr	r2, [r3, #32]
	rsr = hri_gmac_read_RSR_reg(_gmac_dev->hw);
    25e6:	9201      	str	r2, [sp, #4]
	GMAC_CRITICAL_SECTION_LEAVE();
}

static inline hri_gmac_isr_reg_t hri_gmac_read_ISR_reg(const void *const hw)
{
	return ((Gmac *)hw)->ISR.reg;
    25e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	/* Must be Clear ISR (Clear on read) */
	hri_gmac_read_ISR_reg(_gmac_dev->hw);

	/* Frame transmited */
	if (tsr & GMAC_TSR_TXCOMP) {
    25ea:	9a00      	ldr	r2, [sp, #0]
    25ec:	0692      	lsls	r2, r2, #26
    25ee:	d50a      	bpl.n	2606 <GMAC_Handler+0x2e>
		hri_gmac_write_TSR_reg(_gmac_dev->hw, tsr);
    25f0:	9a00      	ldr	r2, [sp, #0]
	((Gmac *)hw)->TSR.reg = data;
    25f2:	615a      	str	r2, [r3, #20]
		if ((_txbuf_descrs[_txbuf_index].status.bm.used) && (_gmac_dev->cb.transmited != NULL)) {
    25f4:	6863      	ldr	r3, [r4, #4]
    25f6:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    25fa:	7bdb      	ldrb	r3, [r3, #15]
    25fc:	09db      	lsrs	r3, r3, #7
    25fe:	d002      	beq.n	2606 <GMAC_Handler+0x2e>
    2600:	6843      	ldr	r3, [r0, #4]
    2602:	b103      	cbz	r3, 2606 <GMAC_Handler+0x2e>
			_gmac_dev->cb.transmited(_gmac_dev);
    2604:	4798      	blx	r3
		}
	}

	/* Frame received */
	if (rsr & GMAC_RSR_REC) {
    2606:	9b01      	ldr	r3, [sp, #4]
    2608:	079b      	lsls	r3, r3, #30
    260a:	d503      	bpl.n	2614 <GMAC_Handler+0x3c>
		if (_gmac_dev->cb.received != NULL) {
    260c:	6820      	ldr	r0, [r4, #0]
    260e:	6883      	ldr	r3, [r0, #8]
    2610:	b103      	cbz	r3, 2614 <GMAC_Handler+0x3c>
			_gmac_dev->cb.received(_gmac_dev);
    2612:	4798      	blx	r3
		}
	}
	hri_gmac_write_RSR_reg(_gmac_dev->hw, rsr);
    2614:	6823      	ldr	r3, [r4, #0]
    2616:	9a01      	ldr	r2, [sp, #4]
    2618:	681b      	ldr	r3, [r3, #0]
	((Gmac *)hw)->RSR.reg = data;
    261a:	621a      	str	r2, [r3, #32]
}
    261c:	b002      	add	sp, #8
    261e:	bd10      	pop	{r4, pc}
    2620:	20000940 	.word	0x20000940

00002624 <_mac_async_init>:
	((Gmac *)hw)->NCR.reg = data;
    2624:	4b31      	ldr	r3, [pc, #196]	; (26ec <_mac_async_init+0xc8>)

int32_t _mac_async_init(struct _mac_async_device *const dev, void *const hw)
{
    2626:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	dev->hw = hw;
    262a:	6001      	str	r1, [r0, #0]
    262c:	600b      	str	r3, [r1, #0]
	((Gmac *)hw)->NCFGR.reg = data;
    262e:	4b30      	ldr	r3, [pc, #192]	; (26f0 <_mac_async_init+0xcc>)
    2630:	604b      	str	r3, [r1, #4]
		_txbuf_descrs[i].address        = (uint32_t)_txbuf[i];
    2632:	4f30      	ldr	r7, [pc, #192]	; (26f4 <_mac_async_init+0xd0>)
	((Gmac *)hw)->UR.reg = data;
    2634:	2301      	movs	r3, #1
    2636:	60cb      	str	r3, [r1, #12]
	((Gmac *)hw)->DCFGR.reg = data;
    2638:	4b2f      	ldr	r3, [pc, #188]	; (26f8 <_mac_async_init+0xd4>)
    263a:	610b      	str	r3, [r1, #16]
}

static inline void hri_gmac_write_IPGS_reg(const void *const hw, hri_gmac_ipgs_reg_t data)
{
	GMAC_CRITICAL_SECTION_ENTER();
	((Gmac *)hw)->IPGS.reg = data;
    263c:	f240 1201 	movw	r2, #257	; 0x101
	((Gmac *)hw)->WOL.reg = data;
    2640:	2300      	movs	r3, #0
    2642:	f107 0c08 	add.w	ip, r7, #8
    2646:	f8c1 30b8 	str.w	r3, [r1, #184]	; 0xb8
    264a:	f107 08a0 	add.w	r8, r7, #160	; 0xa0
	((Gmac *)hw)->IPGS.reg = data;
    264e:	f8c1 20bc 	str.w	r2, [r1, #188]	; 0xbc
    2652:	f240 59dc 	movw	r9, #1500	; 0x5dc
		_txbuf_descrs[i].status.val     = 0;
    2656:	469e      	mov	lr, r3
    2658:	463d      	mov	r5, r7
    265a:	4666      	mov	r6, ip
    265c:	00da      	lsls	r2, r3, #3
		_txbuf_descrs[i].address        = (uint32_t)_txbuf[i];
    265e:	fb09 8403 	mla	r4, r9, r3, r8
    2662:	f84c 4033 	str.w	r4, [ip, r3, lsl #3]
		_txbuf_descrs[i].status.val     = 0;
    2666:	eb0c 0402 	add.w	r4, ip, r2
		_txbuf_descrs[i].status.bm.used = 1;
    266a:	443a      	add	r2, r7
		_txbuf_descrs[i].status.val     = 0;
    266c:	f8c4 e004 	str.w	lr, [r4, #4]
		_txbuf_descrs[i].status.bm.used = 1;
    2670:	7bd4      	ldrb	r4, [r2, #15]
	for (i = 0; i < CONF_GMAC_TXDESCR_NUM; i++) {
    2672:	3301      	adds	r3, #1
		_txbuf_descrs[i].status.bm.used = 1;
    2674:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	for (i = 0; i < CONF_GMAC_TXDESCR_NUM; i++) {
    2678:	2b10      	cmp	r3, #16
		_txbuf_descrs[i].status.bm.used = 1;
    267a:	73d4      	strb	r4, [r2, #15]
	for (i = 0; i < CONF_GMAC_TXDESCR_NUM; i++) {
    267c:	d1ee      	bne.n	265c <_mac_async_init+0x38>
	_txbuf_descrs[CONF_GMAC_TXDESCR_NUM - 1].status.bm.wrap = 1;
    267e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
	_txbuf_index                                            = 0;
    2682:	f8c7 e004 	str.w	lr, [r7, #4]
	_txbuf_descrs[CONF_GMAC_TXDESCR_NUM - 1].status.bm.wrap = 1;
    2686:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    268a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	_last_txbuf_index                                       = 0;
    268e:	4b1b      	ldr	r3, [pc, #108]	; (26fc <_mac_async_init+0xd8>)
    2690:	2200      	movs	r2, #0
    2692:	f8c3 e988 	str.w	lr, [r3, #2440]	; 0x988
		_rxbuf_descrs[i].address.val = (uint32_t)_rxbuf[i];
    2696:	f503 6419 	add.w	r4, r3, #2448	; 0x990
    269a:	f603 2c28 	addw	ip, r3, #2600	; 0xa28
		_rxbuf_descrs[i].status.val  = 0;
    269e:	4617      	mov	r7, r2
		_rxbuf_descrs[i].address.val = (uint32_t)_rxbuf[i];
    26a0:	eb0c 1e02 	add.w	lr, ip, r2, lsl #4
    26a4:	f842 e004 	str.w	lr, [r2, r4]
		_rxbuf_descrs[i].status.val  = 0;
    26a8:	eb04 0e02 	add.w	lr, r4, r2
    26ac:	3208      	adds	r2, #8
	for (i = 0; i < CONF_GMAC_RXDESCR_NUM; i++) {
    26ae:	2a80      	cmp	r2, #128	; 0x80
		_rxbuf_descrs[i].status.val  = 0;
    26b0:	f8ce 7004 	str.w	r7, [lr, #4]
	for (i = 0; i < CONF_GMAC_RXDESCR_NUM; i++) {
    26b4:	d1f4      	bne.n	26a0 <_mac_async_init+0x7c>
	_rxbuf_descrs[CONF_GMAC_RXDESCR_NUM - 1].address.bm.wrap = 1;
    26b6:	f893 2a08 	ldrb.w	r2, [r3, #2568]	; 0xa08
	        | GMAC_DCFGR_DRBS(CONF_GMAC_DCFGR_DRBS) | (CONF_GMAC_DCFGR_DDRP ? GMAC_DCFGR_DDRP : 0));
	hri_gmac_write_WOL_reg(dev->hw, 0);
	hri_gmac_write_IPGS_reg(dev->hw, GMAC_IPGS_FL((CONF_GMAC_IPGS_FL_MUL << 8) | CONF_GMAC_IPGS_FL_DIV));
	_mac_init_bufdescr(dev);

	_gmac_dev = dev;
    26ba:	6028      	str	r0, [r5, #0]
	_rxbuf_descrs[CONF_GMAC_RXDESCR_NUM - 1].address.bm.wrap = 1;
    26bc:	f042 0202 	orr.w	r2, r2, #2
    26c0:	f883 2a08 	strb.w	r2, [r3, #2568]	; 0xa08
	_rxbuf_index                                             = 0;
    26c4:	4b0e      	ldr	r3, [pc, #56]	; (2700 <_mac_async_init+0xdc>)
    26c6:	f8c3 7130 	str.w	r7, [r3, #304]	; 0x130
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    26ca:	4b0e      	ldr	r3, [pc, #56]	; (2704 <_mac_async_init+0xe0>)
	((Gmac *)hw)->TBQB.reg = data;
    26cc:	61ce      	str	r6, [r1, #28]
    26ce:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
	((Gmac *)hw)->RBQB.reg = data;
    26d2:	618c      	str	r4, [r1, #24]
    26d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
    26d8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    26dc:	f3bf 8f6f 	isb	sy
	NVIC_DisableIRQ(GMAC_IRQn);
	NVIC_ClearPendingIRQ(GMAC_IRQn);
	NVIC_EnableIRQ(GMAC_IRQn);

	return ERR_NONE;
}
    26e0:	2000      	movs	r0, #0
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    26e2:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    26e6:	609a      	str	r2, [r3, #8]
    26e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    26ec:	00030190 	.word	0x00030190
    26f0:	4091211b 	.word	0x4091211b
    26f4:	20000940 	.word	0x20000940
    26f8:	00020704 	.word	0x00020704
    26fc:	20005e18 	.word	0x20005e18
    2700:	20006f10 	.word	0x20006f10
    2704:	e000e100 	.word	0xe000e100

00002708 <_mac_async_enable>:
	return ERR_NONE;
}

int32_t _mac_async_enable(struct _mac_async_device *const dev)
{
	hri_gmac_set_NCR_reg(dev->hw, GMAC_NCR_RXEN | GMAC_NCR_TXEN);
    2708:	6802      	ldr	r2, [r0, #0]
	((Gmac *)hw)->NCR.reg |= mask;
    270a:	6813      	ldr	r3, [r2, #0]
    270c:	f043 030c 	orr.w	r3, r3, #12
    2710:	6013      	str	r3, [r2, #0]
	return ERR_NONE;
}
    2712:	2000      	movs	r0, #0
    2714:	4770      	bx	lr
	...

00002718 <_mac_async_write>:
	hri_gmac_clear_NCR_reg(dev->hw, GMAC_NCR_RXEN | GMAC_NCR_TXEN);
	return ERR_NONE;
}

int32_t _mac_async_write(struct _mac_async_device *const dev, uint8_t *buf, uint32_t len)
{
    2718:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    271c:	4615      	mov	r5, r2
	uint32_t pos;
	uint32_t blen;
	uint32_t i;

	if (_txbuf_descrs[_last_txbuf_index].status.bm.used && !_txbuf_descrs[_last_txbuf_index].status.bm.last_buf) {
    271e:	4a47      	ldr	r2, [pc, #284]	; (283c <_mac_async_write+0x124>)
    2720:	4c47      	ldr	r4, [pc, #284]	; (2840 <_mac_async_write+0x128>)
    2722:	f8d2 3988 	ldr.w	r3, [r2, #2440]	; 0x988
    2726:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
{
    272a:	4606      	mov	r6, r0
	if (_txbuf_descrs[_last_txbuf_index].status.bm.used && !_txbuf_descrs[_last_txbuf_index].status.bm.last_buf) {
    272c:	7bdb      	ldrb	r3, [r3, #15]
    272e:	09db      	lsrs	r3, r3, #7
    2730:	d108      	bne.n	2744 <_mac_async_write+0x2c>
				break;
			}
		}
	}

	if (!_txbuf_descrs[_txbuf_index].status.bm.used) {
    2732:	6863      	ldr	r3, [r4, #4]
    2734:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    2738:	7bdb      	ldrb	r3, [r3, #15]
    273a:	09db      	lsrs	r3, r3, #7
    273c:	d11d      	bne.n	277a <_mac_async_write+0x62>
		return ERR_NO_RESOURCE;
    273e:	f06f 001b 	mvn.w	r0, #27
    2742:	e077      	b.n	2834 <_mac_async_write+0x11c>
	if (_txbuf_descrs[_last_txbuf_index].status.bm.used && !_txbuf_descrs[_last_txbuf_index].status.bm.last_buf) {
    2744:	f8d2 3988 	ldr.w	r3, [r2, #2440]	; 0x988
    2748:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    274c:	7b5b      	ldrb	r3, [r3, #13]
    274e:	09db      	lsrs	r3, r3, #7
    2750:	d1ef      	bne.n	2732 <_mac_async_write+0x1a>
    2752:	2001      	movs	r0, #1
			pos = _last_txbuf_index + i;
    2754:	f8d2 3988 	ldr.w	r3, [r2, #2440]	; 0x988
    2758:	4403      	add	r3, r0
			if (pos >= CONF_GMAC_TXDESCR_NUM) {
    275a:	2b0f      	cmp	r3, #15
				pos -= CONF_GMAC_TXDESCR_NUM;
    275c:	bf88      	it	hi
    275e:	3b10      	subhi	r3, #16
			_txbuf_descrs[pos].status.bm.used = 1;
    2760:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    2764:	7bdf      	ldrb	r7, [r3, #15]
    2766:	f047 0780 	orr.w	r7, r7, #128	; 0x80
    276a:	73df      	strb	r7, [r3, #15]
			if (_txbuf_descrs[pos].status.bm.last_buf) {
    276c:	7b5b      	ldrb	r3, [r3, #13]
    276e:	09db      	lsrs	r3, r3, #7
    2770:	d1df      	bne.n	2732 <_mac_async_write+0x1a>
		for (i = 1; i < CONF_GMAC_TXDESCR_NUM; i++) {
    2772:	3001      	adds	r0, #1
    2774:	2810      	cmp	r0, #16
    2776:	d1ed      	bne.n	2754 <_mac_async_write+0x3c>
    2778:	e7db      	b.n	2732 <_mac_async_write+0x1a>
	}

	/* Check if have enough buffers, the first buffer already checked */
	if (len > CONF_GMAC_TXBUF_SIZE) {
    277a:	f240 53dc 	movw	r3, #1500	; 0x5dc
    277e:	429d      	cmp	r5, r3
    2780:	d914      	bls.n	27ac <_mac_async_write+0x94>
    2782:	2001      	movs	r0, #1

			if (!_txbuf_descrs[pos].status.bm.used) {
				return ERR_NO_RESOURCE;
			}

			if ((len - (CONF_GMAC_TXBUF_SIZE * i)) < CONF_GMAC_TXBUF_SIZE) {
    2784:	461f      	mov	r7, r3
    2786:	f240 5edb 	movw	lr, #1499	; 0x5db
			pos = _txbuf_index + i;
    278a:	6863      	ldr	r3, [r4, #4]
    278c:	4403      	add	r3, r0
			if (pos >= CONF_GMAC_TXDESCR_NUM) {
    278e:	2b0f      	cmp	r3, #15
				pos -= CONF_GMAC_TXDESCR_NUM;
    2790:	bf88      	it	hi
    2792:	3b10      	subhi	r3, #16
			if (!_txbuf_descrs[pos].status.bm.used) {
    2794:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    2798:	7bdb      	ldrb	r3, [r3, #15]
    279a:	09db      	lsrs	r3, r3, #7
    279c:	d0cf      	beq.n	273e <_mac_async_write+0x26>
			if ((len - (CONF_GMAC_TXBUF_SIZE * i)) < CONF_GMAC_TXBUF_SIZE) {
    279e:	fb07 5310 	mls	r3, r7, r0, r5
    27a2:	4573      	cmp	r3, lr
    27a4:	d902      	bls.n	27ac <_mac_async_write+0x94>
		for (i = 1; i < CONF_GMAC_TXDESCR_NUM; i++) {
    27a6:	3001      	adds	r0, #1
    27a8:	2810      	cmp	r0, #16
    27aa:	d1ee      	bne.n	278a <_mac_async_write+0x72>
				break;
			}
		}
	}
	_last_txbuf_index = _txbuf_index;
    27ac:	6863      	ldr	r3, [r4, #4]
    27ae:	f8c2 3988 	str.w	r3, [r2, #2440]	; 0x988
    27b2:	f501 49bb 	add.w	r9, r1, #23936	; 0x5d80

	/* Write data to transmit buffer */
	for (i = 0; i < CONF_GMAC_TXDESCR_NUM; i++) {
		blen = min(len, CONF_GMAC_TXBUF_SIZE);
		memcpy(_txbuf[_txbuf_index], buf + (i * CONF_GMAC_TXBUF_SIZE), blen);
    27b6:	f8df b090 	ldr.w	fp, [pc, #144]	; 2848 <_mac_async_write+0x130>
    27ba:	4b22      	ldr	r3, [pc, #136]	; (2844 <_mac_async_write+0x12c>)
    27bc:	460f      	mov	r7, r1
    27be:	f109 0940 	add.w	r9, r9, #64	; 0x40
		blen = min(len, CONF_GMAC_TXBUF_SIZE);
    27c2:	f240 5adc 	movw	sl, #1500	; 0x5dc
    27c6:	4555      	cmp	r5, sl
		memcpy(_txbuf[_txbuf_index], buf + (i * CONF_GMAC_TXBUF_SIZE), blen);
    27c8:	6860      	ldr	r0, [r4, #4]
    27ca:	9301      	str	r3, [sp, #4]
		blen = min(len, CONF_GMAC_TXBUF_SIZE);
    27cc:	46a8      	mov	r8, r5
    27ce:	bf28      	it	cs
    27d0:	46d0      	movcs	r8, sl
		memcpy(_txbuf[_txbuf_index], buf + (i * CONF_GMAC_TXBUF_SIZE), blen);
    27d2:	4639      	mov	r1, r7
    27d4:	4642      	mov	r2, r8
    27d6:	fb0a b000 	mla	r0, sl, r0, fp
    27da:	4798      	blx	r3
		len -= blen;

		if (len > 0) {
			/* Here the Used flag be set to zero */
			_txbuf_descrs[_txbuf_index].status.val = blen;
    27dc:	6862      	ldr	r2, [r4, #4]
		if (len > 0) {
    27de:	9b01      	ldr	r3, [sp, #4]
			_txbuf_descrs[_txbuf_index].status.val = blen;
    27e0:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
		if (len > 0) {
    27e4:	ebb5 0508 	subs.w	r5, r5, r8
			_txbuf_descrs[_txbuf_index].status.val = blen;
    27e8:	f8c2 800c 	str.w	r8, [r2, #12]
		} else {
			_txbuf_descrs[_txbuf_index].status.val         = blen;
			_txbuf_descrs[_txbuf_index].status.bm.last_buf = 1;
    27ec:	bf01      	itttt	eq
    27ee:	6862      	ldreq	r2, [r4, #4]
    27f0:	eb04 02c2 	addeq.w	r2, r4, r2, lsl #3
    27f4:	7b51      	ldrbeq	r1, [r2, #13]
    27f6:	f041 0180 	orreq.w	r1, r1, #128	; 0x80
    27fa:	bf08      	it	eq
    27fc:	7351      	strbeq	r1, [r2, #13]
		}
		_txbuf_index++;
    27fe:	6862      	ldr	r2, [r4, #4]
    2800:	3201      	adds	r2, #1
    2802:	6062      	str	r2, [r4, #4]
		if (_txbuf_index == CONF_GMAC_TXDESCR_NUM) {
    2804:	6862      	ldr	r2, [r4, #4]
    2806:	2a10      	cmp	r2, #16
    2808:	d107      	bne.n	281a <_mac_async_write+0x102>
			_txbuf_index                                            = 0;
    280a:	2200      	movs	r2, #0
    280c:	6062      	str	r2, [r4, #4]
			_txbuf_descrs[CONF_GMAC_TXDESCR_NUM - 1].status.bm.wrap = 1;
    280e:	f894 2087 	ldrb.w	r2, [r4, #135]	; 0x87
    2812:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    2816:	f884 2087 	strb.w	r2, [r4, #135]	; 0x87
		}
		if (len == 0) {
    281a:	b11d      	cbz	r5, 2824 <_mac_async_write+0x10c>
    281c:	f207 57dc 	addw	r7, r7, #1500	; 0x5dc
	for (i = 0; i < CONF_GMAC_TXDESCR_NUM; i++) {
    2820:	45b9      	cmp	r9, r7
    2822:	d1d0      	bne.n	27c6 <_mac_async_write+0xae>
  __ASM volatile ("dsb 0xF":::"memory");
    2824:	f3bf 8f4f 	dsb	sy

	/* Data synchronization barrier */
	__DSB();

	/* Active Transmit */
	hri_gmac_set_NCR_reg(dev->hw, GMAC_NCR_TSTART);
    2828:	6832      	ldr	r2, [r6, #0]
    282a:	6813      	ldr	r3, [r2, #0]
    282c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    2830:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    2832:	2000      	movs	r0, #0
}
    2834:	b003      	add	sp, #12
    2836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    283a:	bf00      	nop
    283c:	20005e18 	.word	0x20005e18
    2840:	20000940 	.word	0x20000940
    2844:	0000b2fb 	.word	0x0000b2fb
    2848:	200009e0 	.word	0x200009e0

0000284c <_mac_async_read>:

uint32_t _mac_async_read(struct _mac_async_device *const dev, uint8_t *buf, uint32_t len)
{
    284c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2850:	460b      	mov	r3, r1
	uint32_t eof       = 0xFFFFFFFF; /* End of Frame index */
	uint32_t total_len = 0;          /* Total length of received package */

	(void)dev;
	for (i = 0; i < CONF_GMAC_RXDESCR_NUM; i++) {
		pos = _rxbuf_index + i;
    2852:	4937      	ldr	r1, [pc, #220]	; (2930 <_mac_async_read+0xe4>)
		if (pos >= CONF_GMAC_RXDESCR_NUM) {
			pos -= CONF_GMAC_RXDESCR_NUM;
		}

		/* No more data for Ethernet package */
		if (!_rxbuf_descrs[pos].address.bm.ownership) {
    2854:	4837      	ldr	r0, [pc, #220]	; (2934 <_mac_async_read+0xe8>)
{
    2856:	4617      	mov	r7, r2
	uint32_t sof       = 0xFFFFFFFF; /* Start of Frame index */
    2858:	f04f 35ff 	mov.w	r5, #4294967295
	for (i = 0; i < CONF_GMAC_RXDESCR_NUM; i++) {
    285c:	2400      	movs	r4, #0
    285e:	4688      	mov	r8, r1
		pos = _rxbuf_index + i;
    2860:	f8d1 2130 	ldr.w	r2, [r1, #304]	; 0x130
    2864:	4422      	add	r2, r4
		if (pos >= CONF_GMAC_RXDESCR_NUM) {
    2866:	2a0f      	cmp	r2, #15
			pos -= CONF_GMAC_RXDESCR_NUM;
    2868:	bf88      	it	hi
    286a:	3a10      	subhi	r2, #16
		if (!_rxbuf_descrs[pos].address.bm.ownership) {
    286c:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    2870:	f892 6990 	ldrb.w	r6, [r2, #2448]	; 0x990
    2874:	07f6      	lsls	r6, r6, #31
    2876:	d51e      	bpl.n	28b6 <_mac_async_read+0x6a>
			break;
		}

		if (_rxbuf_descrs[pos].status.bm.sof) {
    2878:	f892 6995 	ldrb.w	r6, [r2, #2453]	; 0x995
    287c:	f016 0f40 	tst.w	r6, #64	; 0x40
    2880:	bf18      	it	ne
    2882:	4625      	movne	r5, r4
			sof = i;
		}

		if ((_rxbuf_descrs[pos].status.bm.eof) && (sof != 0xFFFFFFFF)) {
    2884:	09f6      	lsrs	r6, r6, #7
    2886:	f104 0601 	add.w	r6, r4, #1
    288a:	d011      	beq.n	28b0 <_mac_async_read+0x64>
    288c:	f1b5 3fff 	cmp.w	r5, #4294967295
    2890:	d00e      	beq.n	28b0 <_mac_async_read+0x64>
			/* eof now indicate the number of bufs the frame used */
			eof = i;
			n   = _rxbuf_descrs[pos].status.bm.len;
    2892:	f8b2 2994 	ldrh.w	r2, [r2, #2452]	; 0x994
    2896:	f3c2 020c 	ubfx	r2, r2, #0, #13
			len = min(n, len);
    289a:	4297      	cmp	r7, r2
    289c:	bf28      	it	cs
    289e:	4617      	movcs	r7, r2
	uint32_t total_len = 0;          /* Total length of received package */
    28a0:	f04f 0900 	mov.w	r9, #0
	} else {
		j = i;
	}

	/* Copy data to user buffer */
	for (i = 0; i < j; i++) {
    28a4:	46ca      	mov	sl, r9
    28a6:	45b2      	cmp	sl, r6
    28a8:	d10d      	bne.n	28c6 <_mac_async_read+0x7a>
			_rxbuf_index = 0;
		}
	}

	return total_len;
}
    28aa:	4648      	mov	r0, r9
    28ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (i = 0; i < CONF_GMAC_RXDESCR_NUM; i++) {
    28b0:	2e10      	cmp	r6, #16
    28b2:	4634      	mov	r4, r6
    28b4:	d1d4      	bne.n	2860 <_mac_async_read+0x14>
	} else if (sof != 0xFFFFFFFF) {
    28b6:	1c6a      	adds	r2, r5, #1
    28b8:	d101      	bne.n	28be <_mac_async_read+0x72>
    28ba:	4626      	mov	r6, r4
    28bc:	e000      	b.n	28c0 <_mac_async_read+0x74>
    28be:	462e      	mov	r6, r5
    28c0:	f04f 34ff 	mov.w	r4, #4294967295
    28c4:	e7ec      	b.n	28a0 <_mac_async_read+0x54>
		if (eof != 0xFFFFFFFF && i >= sof && i <= eof && len > 0) {
    28c6:	1c61      	adds	r1, r4, #1
    28c8:	d017      	beq.n	28fa <_mac_async_read+0xae>
    28ca:	45aa      	cmp	sl, r5
    28cc:	d315      	bcc.n	28fa <_mac_async_read+0xae>
    28ce:	45a2      	cmp	sl, r4
    28d0:	d813      	bhi.n	28fa <_mac_async_read+0xae>
    28d2:	b197      	cbz	r7, 28fa <_mac_async_read+0xae>
			n = min(len, CONF_GMAC_RXBUF_SIZE);
    28d4:	2f80      	cmp	r7, #128	; 0x80
			memcpy(buf, _rxbuf[_rxbuf_index], n);
    28d6:	f8d8 1130 	ldr.w	r1, [r8, #304]	; 0x130
    28da:	4817      	ldr	r0, [pc, #92]	; (2938 <_mac_async_read+0xec>)
			n = min(len, CONF_GMAC_RXBUF_SIZE);
    28dc:	46bb      	mov	fp, r7
    28de:	bf28      	it	cs
    28e0:	f04f 0b80 	movcs.w	fp, #128	; 0x80
			memcpy(buf, _rxbuf[_rxbuf_index], n);
    28e4:	eb00 11c1 	add.w	r1, r0, r1, lsl #7
    28e8:	465a      	mov	r2, fp
    28ea:	4618      	mov	r0, r3
    28ec:	4b13      	ldr	r3, [pc, #76]	; (293c <_mac_async_read+0xf0>)
    28ee:	4798      	blx	r3
    28f0:	4603      	mov	r3, r0
			buf += n;
    28f2:	445b      	add	r3, fp
			total_len += n;
    28f4:	44d9      	add	r9, fp
			len -= n;
    28f6:	eba7 070b 	sub.w	r7, r7, fp
		_rxbuf_descrs[_rxbuf_index].address.bm.ownership = 0;
    28fa:	f8d8 2130 	ldr.w	r2, [r8, #304]	; 0x130
    28fe:	490d      	ldr	r1, [pc, #52]	; (2934 <_mac_async_read+0xe8>)
    2900:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
	for (i = 0; i < j; i++) {
    2904:	f10a 0a01 	add.w	sl, sl, #1
		_rxbuf_descrs[_rxbuf_index].address.bm.ownership = 0;
    2908:	f892 1990 	ldrb.w	r1, [r2, #2448]	; 0x990
    290c:	f36f 0100 	bfc	r1, #0, #1
    2910:	f882 1990 	strb.w	r1, [r2, #2448]	; 0x990
		_rxbuf_index++;
    2914:	f8d8 2130 	ldr.w	r2, [r8, #304]	; 0x130
    2918:	3201      	adds	r2, #1
    291a:	f8c8 2130 	str.w	r2, [r8, #304]	; 0x130
		if (_rxbuf_index == CONF_GMAC_RXDESCR_NUM) {
    291e:	f8d8 2130 	ldr.w	r2, [r8, #304]	; 0x130
    2922:	2a10      	cmp	r2, #16
			_rxbuf_index = 0;
    2924:	bf04      	itt	eq
    2926:	2200      	moveq	r2, #0
    2928:	f8c8 2130 	streq.w	r2, [r8, #304]	; 0x130
    292c:	e7bb      	b.n	28a6 <_mac_async_read+0x5a>
    292e:	bf00      	nop
    2930:	20006f10 	.word	0x20006f10
    2934:	20005e18 	.word	0x20005e18
    2938:	20006840 	.word	0x20006840
    293c:	0000b2fb 	.word	0x0000b2fb

00002940 <_mac_async_read_len>:

uint32_t _mac_async_read_len(struct _mac_async_device *const dev)
{
    2940:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (pos >= CONF_GMAC_RXDESCR_NUM) {
			pos -= CONF_GMAC_RXDESCR_NUM;
		}

		/* No more data for Ethernet package */
		if (!(_rxbuf_descrs[pos].address.bm.ownership)) {
    2942:	4c14      	ldr	r4, [pc, #80]	; (2994 <_mac_async_read_len+0x54>)
		pos = _rxbuf_index + i;
    2944:	4f14      	ldr	r7, [pc, #80]	; (2998 <_mac_async_read_len+0x58>)
	uint32_t total_len = 0;     /* Total length of received package */
    2946:	2000      	movs	r0, #0
	bool     sof       = false; /* Start of Frame */
    2948:	4601      	mov	r1, r0
	for (i = 0; i < CONF_GMAC_RXDESCR_NUM; i++) {
    294a:	4602      	mov	r2, r0
    294c:	4625      	mov	r5, r4
		pos = _rxbuf_index + i;
    294e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
    2952:	4413      	add	r3, r2
		if (pos >= CONF_GMAC_RXDESCR_NUM) {
    2954:	2b0f      	cmp	r3, #15
			pos -= CONF_GMAC_RXDESCR_NUM;
    2956:	bf88      	it	hi
    2958:	3b10      	subhi	r3, #16
		if (!(_rxbuf_descrs[pos].address.bm.ownership)) {
    295a:	00db      	lsls	r3, r3, #3
    295c:	18e6      	adds	r6, r4, r3
    295e:	f896 e990 	ldrb.w	lr, [r6, #2448]	; 0x990
    2962:	f01e 0f01 	tst.w	lr, #1
    2966:	d013      	beq.n	2990 <_mac_async_read_len+0x50>
			break;
		}

		if (_rxbuf_descrs[pos].status.bm.sof) {
    2968:	f896 6995 	ldrb.w	r6, [r6, #2453]	; 0x995
    296c:	0676      	lsls	r6, r6, #25
    296e:	d400      	bmi.n	2972 <_mac_async_read_len+0x32>
			sof = true;
		}
		if (sof == true) {
    2970:	b131      	cbz	r1, 2980 <_mac_async_read_len+0x40>
			total_len += _rxbuf_descrs[pos].status.bm.len;
    2972:	18e9      	adds	r1, r5, r3
    2974:	f8b1 1994 	ldrh.w	r1, [r1, #2452]	; 0x994
    2978:	f3c1 010c 	ubfx	r1, r1, #0, #13
    297c:	4408      	add	r0, r1
    297e:	2101      	movs	r1, #1
		}

		if (_rxbuf_descrs[pos].status.bm.eof) {
    2980:	442b      	add	r3, r5
    2982:	f893 3995 	ldrb.w	r3, [r3, #2453]	; 0x995
    2986:	09db      	lsrs	r3, r3, #7
    2988:	d102      	bne.n	2990 <_mac_async_read_len+0x50>
	for (i = 0; i < CONF_GMAC_RXDESCR_NUM; i++) {
    298a:	3201      	adds	r2, #1
    298c:	2a10      	cmp	r2, #16
    298e:	d1de      	bne.n	294e <_mac_async_read_len+0xe>
			break;
		}
	}

	return total_len;
}
    2990:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2992:	bf00      	nop
    2994:	20005e18 	.word	0x20005e18
    2998:	20006f10 	.word	0x20006f10

0000299c <_sha_sync_init>:
struct icm_descriptor icm_descriptor;
COMPILER_PACK_RESET()

int32_t _sha_sync_init(struct _sha_sync_device *const dev, void *const hw)
{
	dev->hw = hw;
    299c:	6001      	str	r1, [r0, #0]

	return ERR_NONE;
}
    299e:	2000      	movs	r0, #0
    29a0:	4770      	bx	lr
	...

000029a4 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    29a4:	4b01      	ldr	r3, [pc, #4]	; (29ac <_mclk_init+0x8>)
    29a6:	2201      	movs	r2, #1
    29a8:	715a      	strb	r2, [r3, #5]
    29aa:	4770      	bx	lr
    29ac:	40000800 	.word	0x40000800

000029b0 <_flash_program>:
 * \param[in]  buffer        Pointer to buffer where the data to
 *                           write is stored
 * \param[in] size           The size of data to write to a page
 */
static void _flash_program(void *const hw, const uint32_t dst_addr, const uint8_t *buffer, const uint16_t size)
{
    29b0:	b570      	push	{r4, r5, r6, lr}
	uint32_t *ptr_read    = (uint32_t *)buffer;
	uint32_t  nvm_address = dst_addr / 4;
    29b2:	088e      	lsrs	r6, r1, #2
	return ((Nvmctrl *)hw)->PARAM.reg;
}

static inline bool hri_nvmctrl_get_STATUS_READY_bit(const void *const hw)
{
	return (((Nvmctrl *)hw)->STATUS.reg & NVMCTRL_STATUS_READY) >> NVMCTRL_STATUS_READY_Pos;
    29b4:	8a44      	ldrh	r4, [r0, #18]
	uint16_t  i;

	while (!hri_nvmctrl_get_STATUS_READY_bit(hw)) {
    29b6:	07e5      	lsls	r5, r4, #31
    29b8:	d5fc      	bpl.n	29b4 <_flash_program+0x4>
	((Nvmctrl *)hw)->CTRLB.reg = data;
    29ba:	f24a 5415 	movw	r4, #42261	; 0xa515
    29be:	8084      	strh	r4, [r0, #4]
	return (((Nvmctrl *)hw)->STATUS.reg & NVMCTRL_STATUS_READY) >> NVMCTRL_STATUS_READY_Pos;
    29c0:	8a44      	ldrh	r4, [r0, #18]
		/* Wait until this module isn't busy */
	}

	hri_nvmctrl_write_CTRLB_reg(hw, NVMCTRL_CTRLB_CMD_PBC | NVMCTRL_CTRLB_CMDEX_KEY);

	while (!hri_nvmctrl_get_STATUS_READY_bit(hw)) {
    29c2:	07e4      	lsls	r4, r4, #31
    29c4:	d5fc      	bpl.n	29c0 <_flash_program+0x10>
    29c6:	ebc2 0686 	rsb	r6, r2, r6, lsl #2
    29ca:	4614      	mov	r4, r2
		/* Wait until this module isn't busy */
	}

	/* Writes to the page buffer must be 32 bits, perform manual copy
	 * to ensure alignment */
	for (i = 0; i < size; i += 4) {
    29cc:	1aa5      	subs	r5, r4, r2
    29ce:	b2ad      	uxth	r5, r5
    29d0:	429d      	cmp	r5, r3
    29d2:	d307      	bcc.n	29e4 <_flash_program+0x34>
    29d4:	8a43      	ldrh	r3, [r0, #18]
		NVM_MEMORY[nvm_address++] = *ptr_read;
		ptr_read++;
	}

	while (!hri_nvmctrl_get_STATUS_READY_bit(hw)) {
    29d6:	07db      	lsls	r3, r3, #31
    29d8:	d5fc      	bpl.n	29d4 <_flash_program+0x24>
	((Nvmctrl *)hw)->CTRLB.reg = data;
    29da:	f24a 5303 	movw	r3, #42243	; 0xa503
	((Nvmctrl *)hw)->ADDR.reg = data;
    29de:	6141      	str	r1, [r0, #20]
	((Nvmctrl *)hw)->CTRLB.reg = data;
    29e0:	8083      	strh	r3, [r0, #4]
    29e2:	bd70      	pop	{r4, r5, r6, pc}
		NVM_MEMORY[nvm_address++] = *ptr_read;
    29e4:	6825      	ldr	r5, [r4, #0]
    29e6:	51a5      	str	r5, [r4, r6]
		ptr_read++;
    29e8:	3404      	adds	r4, #4
    29ea:	e7ef      	b.n	29cc <_flash_program+0x1c>

000029ec <_flash_init>:
{
    29ec:	b538      	push	{r3, r4, r5, lr}
    29ee:	460d      	mov	r5, r1
	ASSERT(device && (hw == NVMCTRL));
    29f0:	4604      	mov	r4, r0
    29f2:	b368      	cbz	r0, 2a50 <_flash_init+0x64>
    29f4:	4817      	ldr	r0, [pc, #92]	; (2a54 <_flash_init+0x68>)
    29f6:	1a0b      	subs	r3, r1, r0
    29f8:	4258      	negs	r0, r3
    29fa:	4158      	adcs	r0, r3
    29fc:	224b      	movs	r2, #75	; 0x4b
    29fe:	4916      	ldr	r1, [pc, #88]	; (2a58 <_flash_init+0x6c>)
    2a00:	4b16      	ldr	r3, [pc, #88]	; (2a5c <_flash_init+0x70>)
    2a02:	4798      	blx	r3
	device->hw = hw;
    2a04:	6125      	str	r5, [r4, #16]
	return ((Nvmctrl *)hw)->CTRLA.reg;
    2a06:	882b      	ldrh	r3, [r5, #0]
	ctrla &= ~(NVMCTRL_CTRLA_CACHEDIS0 | NVMCTRL_CTRLA_CACHEDIS1 | NVMCTRL_CTRLA_PRM_Msk);
    2a08:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
    2a0c:	049b      	lsls	r3, r3, #18
    2a0e:	0c9b      	lsrs	r3, r3, #18
	hri_nvmctrl_write_CTRLA_reg(hw, ctrla);
    2a10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
    2a14:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
	((Nvmctrl *)hw)->CTRLA.reg = data;
    2a18:	802b      	strh	r3, [r5, #0]
	_nvm_dev = device;
    2a1a:	4b11      	ldr	r3, [pc, #68]	; (2a60 <_flash_init+0x74>)
    2a1c:	601c      	str	r4, [r3, #0]
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2a1e:	4b11      	ldr	r3, [pc, #68]	; (2a64 <_flash_init+0x78>)
    2a20:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    2a24:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
    2a28:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2a2c:	f3bf 8f6f 	isb	sy
    2a30:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2a34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    2a38:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2a3c:	f3bf 8f6f 	isb	sy
}
    2a40:	2000      	movs	r0, #0
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2a42:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    2a46:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2a4a:	6019      	str	r1, [r3, #0]
    2a4c:	601a      	str	r2, [r3, #0]
    2a4e:	bd38      	pop	{r3, r4, r5, pc}
    2a50:	e7d4      	b.n	29fc <_flash_init+0x10>
    2a52:	bf00      	nop
    2a54:	41004000 	.word	0x41004000
    2a58:	0000c690 	.word	0x0000c690
    2a5c:	00001fdd 	.word	0x00001fdd
    2a60:	20007044 	.word	0x20007044
    2a64:	e000e100 	.word	0xe000e100

00002a68 <_flash_get_page_size>:
}
    2a68:	f44f 7000 	mov.w	r0, #512	; 0x200
    2a6c:	4770      	bx	lr

00002a6e <_flash_get_total_pages>:
	return (uint32_t)hri_nvmctrl_read_PARAM_NVMP_bf(device->hw);
    2a6e:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->PARAM.reg & NVMCTRL_PARAM_NVMP_Msk) >> NVMCTRL_PARAM_NVMP_Pos;
    2a70:	6898      	ldr	r0, [r3, #8]
}
    2a72:	b280      	uxth	r0, r0
    2a74:	4770      	bx	lr

00002a76 <_flash_read>:
{
    2a76:	b510      	push	{r4, lr}
	while (!hri_nvmctrl_get_STATUS_READY_bit(device->hw)) {
    2a78:	6904      	ldr	r4, [r0, #16]
	return (((Nvmctrl *)hw)->STATUS.reg & NVMCTRL_STATUS_READY) >> NVMCTRL_STATUS_READY_Pos;
    2a7a:	8a60      	ldrh	r0, [r4, #18]
    2a7c:	07c0      	lsls	r0, r0, #31
    2a7e:	d5fc      	bpl.n	2a7a <_flash_read+0x4>
    2a80:	4413      	add	r3, r2
    2a82:	4610      	mov	r0, r2
	for (i = 0; i < length; i++) {
    2a84:	4298      	cmp	r0, r3
    2a86:	d100      	bne.n	2a8a <_flash_read+0x14>
}
    2a88:	bd10      	pop	{r4, pc}
		buffer[i] = nvm_addr[src_addr + i];
    2a8a:	1a84      	subs	r4, r0, r2
    2a8c:	5c64      	ldrb	r4, [r4, r1]
    2a8e:	f800 4b01 	strb.w	r4, [r0], #1
    2a92:	e7f7      	b.n	2a84 <_flash_read+0xe>

00002a94 <_flash_write>:
{
    2a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2a98:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
    2a9c:	b083      	sub	sp, #12
    2a9e:	4681      	mov	r9, r0
    2aa0:	4692      	mov	sl, r2
    2aa2:	4698      	mov	r8, r3
	uint32_t wr_start_addr = dst_addr;
    2aa4:	460e      	mov	r6, r1
		block_start_addr = wr_start_addr & ~(NVMCTRL_BLOCK_SIZE - 1);
    2aa6:	f426 54ff 	bic.w	r4, r6, #8160	; 0x1fe0
    2aaa:	f024 041f 	bic.w	r4, r4, #31
		block_end_addr   = block_start_addr + NVMCTRL_BLOCK_SIZE - 1;
    2aae:	f504 53ff 	add.w	r3, r4, #8160	; 0x1fe0
    2ab2:	331f      	adds	r3, #31
    2ab4:	9301      	str	r3, [sp, #4]
    2ab6:	f504 5b00 	add.w	fp, r4, #8192	; 0x2000
    2aba:	4625      	mov	r5, r4
			_flash_read(device, block_start_addr + i * NVMCTRL_PAGE_SIZE, tmp_buffer[i], NVMCTRL_PAGE_SIZE);
    2abc:	1b2a      	subs	r2, r5, r4
    2abe:	a902      	add	r1, sp, #8
    2ac0:	440a      	add	r2, r1
    2ac2:	f44f 7300 	mov.w	r3, #512	; 0x200
    2ac6:	4629      	mov	r1, r5
    2ac8:	4648      	mov	r0, r9
    2aca:	4f24      	ldr	r7, [pc, #144]	; (2b5c <_flash_write+0xc8>)
    2acc:	f505 7500 	add.w	r5, r5, #512	; 0x200
    2ad0:	47b8      	blx	r7
		for (i = 0; i < NVMCTRL_BLOCK_PAGES; i++) {
    2ad2:	455d      	cmp	r5, fp
    2ad4:	d1f2      	bne.n	2abc <_flash_write+0x28>
		j = (wr_start_addr - block_start_addr) / NVMCTRL_PAGE_SIZE;
    2ad6:	1b33      	subs	r3, r6, r4
		while ((wr_start_addr <= block_end_addr) && (length > 0)) {
    2ad8:	4652      	mov	r2, sl
		j = (wr_start_addr - block_start_addr) / NVMCTRL_PAGE_SIZE;
    2ada:	0a59      	lsrs	r1, r3, #9
    2adc:	1ab6      	subs	r6, r6, r2
    2ade:	f3c3 0308 	ubfx	r3, r3, #0, #9
		while ((wr_start_addr <= block_end_addr) && (length > 0)) {
    2ae2:	9801      	ldr	r0, [sp, #4]
    2ae4:	eb06 0b02 	add.w	fp, r6, r2
    2ae8:	4558      	cmp	r0, fp
    2aea:	4692      	mov	sl, r2
    2aec:	d302      	bcc.n	2af4 <_flash_write+0x60>
    2aee:	f1b8 0f00 	cmp.w	r8, #0
    2af2:	d123      	bne.n	2b3c <_flash_write+0xa8>
		_flash_erase_block(device->hw, block_start_addr);
    2af4:	f8d9 3010 	ldr.w	r3, [r9, #16]
    2af8:	8a5a      	ldrh	r2, [r3, #18]
	while (!hri_nvmctrl_get_STATUS_READY_bit(hw)) {
    2afa:	07d2      	lsls	r2, r2, #31
    2afc:	d5fc      	bpl.n	2af8 <_flash_write+0x64>
	((Nvmctrl *)hw)->CTRLB.reg = data;
    2afe:	f24a 5201 	movw	r2, #42241	; 0xa501
	((Nvmctrl *)hw)->ADDR.reg = data;
    2b02:	615c      	str	r4, [r3, #20]
	((Nvmctrl *)hw)->CTRLB.reg = data;
    2b04:	4626      	mov	r6, r4
    2b06:	809a      	strh	r2, [r3, #4]
			_flash_program(device->hw, block_start_addr + i * NVMCTRL_PAGE_SIZE, tmp_buffer[i], NVMCTRL_PAGE_SIZE);
    2b08:	1b32      	subs	r2, r6, r4
    2b0a:	a902      	add	r1, sp, #8
    2b0c:	440a      	add	r2, r1
    2b0e:	f44f 7300 	mov.w	r3, #512	; 0x200
    2b12:	4631      	mov	r1, r6
    2b14:	f8d9 0010 	ldr.w	r0, [r9, #16]
    2b18:	4f11      	ldr	r7, [pc, #68]	; (2b60 <_flash_write+0xcc>)
    2b1a:	f506 7600 	add.w	r6, r6, #512	; 0x200
    2b1e:	47b8      	blx	r7
		for (i = 0; i < NVMCTRL_BLOCK_PAGES; i++) {
    2b20:	42ae      	cmp	r6, r5
    2b22:	d1f1      	bne.n	2b08 <_flash_write+0x74>
	} while (block_end_addr < (wr_start_addr + length - 1));
    2b24:	eb08 030b 	add.w	r3, r8, fp
    2b28:	9a01      	ldr	r2, [sp, #4]
    2b2a:	3b01      	subs	r3, #1
    2b2c:	429a      	cmp	r2, r3
    2b2e:	465e      	mov	r6, fp
    2b30:	d3b9      	bcc.n	2aa6 <_flash_write+0x12>
}
    2b32:	f50d 5d00 	add.w	sp, sp, #8192	; 0x2000
    2b36:	b003      	add	sp, #12
    2b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tmp_buffer[j][k] = *buffer;
    2b3c:	a802      	add	r0, sp, #8
    2b3e:	eb00 2041 	add.w	r0, r0, r1, lsl #9
    2b42:	f89a e000 	ldrb.w	lr, [sl]
    2b46:	f800 e003 	strb.w	lr, [r0, r3]
			k                = (k + 1) % NVMCTRL_PAGE_SIZE;
    2b4a:	3301      	adds	r3, #1
    2b4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
    2b50:	3201      	adds	r2, #1
			if (0 == k) {
    2b52:	b903      	cbnz	r3, 2b56 <_flash_write+0xc2>
				j++;
    2b54:	3101      	adds	r1, #1
			length--;
    2b56:	f108 38ff 	add.w	r8, r8, #4294967295
    2b5a:	e7c2      	b.n	2ae2 <_flash_write+0x4e>
    2b5c:	00002a77 	.word	0x00002a77
    2b60:	000029b1 	.word	0x000029b1

00002b64 <_flash_append>:
{
    2b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t page_start_addr = dst_addr & ~(NVMCTRL_PAGE_SIZE - 1);
    2b68:	f421 75ff 	bic.w	r5, r1, #510	; 0x1fe
    2b6c:	f025 0501 	bic.w	r5, r5, #1
	if (dst_addr != page_start_addr) {
    2b70:	42a9      	cmp	r1, r5
{
    2b72:	4607      	mov	r7, r0
    2b74:	4690      	mov	r8, r2
    2b76:	461e      	mov	r6, r3
	if (dst_addr != page_start_addr) {
    2b78:	d012      	beq.n	2ba0 <_flash_append+0x3c>
		size = min(length, NVMCTRL_PAGE_SIZE - (dst_addr - page_start_addr));
    2b7a:	1a6c      	subs	r4, r5, r1
    2b7c:	f504 7400 	add.w	r4, r4, #512	; 0x200
    2b80:	429c      	cmp	r4, r3
    2b82:	bf28      	it	cs
    2b84:	461c      	movcs	r4, r3
		_flash_program(device->hw, dst_addr, buffer, size);
    2b86:	b2a3      	uxth	r3, r4
    2b88:	6900      	ldr	r0, [r0, #16]
    2b8a:	f8df 903c 	ldr.w	r9, [pc, #60]	; 2bc8 <_flash_append+0x64>
    2b8e:	47c8      	blx	r9
		page_start_addr += NVMCTRL_PAGE_SIZE;
    2b90:	f505 7500 	add.w	r5, r5, #512	; 0x200
		_flash_program(device->hw, page_start_addr, buffer + offset, size);
    2b94:	f8df a030 	ldr.w	sl, [pc, #48]	; 2bc8 <_flash_append+0x64>
	while (offset < length) {
    2b98:	42b4      	cmp	r4, r6
    2b9a:	d303      	bcc.n	2ba4 <_flash_append+0x40>
}
    2b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32_t offset = 0;
    2ba0:	2400      	movs	r4, #0
    2ba2:	e7f7      	b.n	2b94 <_flash_append+0x30>
		size = min(length - offset, NVMCTRL_PAGE_SIZE);
    2ba4:	eba6 0904 	sub.w	r9, r6, r4
    2ba8:	f5b9 7f00 	cmp.w	r9, #512	; 0x200
    2bac:	bf28      	it	cs
    2bae:	f44f 7900 	movcs.w	r9, #512	; 0x200
		_flash_program(device->hw, page_start_addr, buffer + offset, size);
    2bb2:	eb08 0204 	add.w	r2, r8, r4
    2bb6:	4629      	mov	r1, r5
    2bb8:	fa1f f389 	uxth.w	r3, r9
    2bbc:	6938      	ldr	r0, [r7, #16]
    2bbe:	47d0      	blx	sl
		page_start_addr += NVMCTRL_PAGE_SIZE;
    2bc0:	f505 7500 	add.w	r5, r5, #512	; 0x200
		offset += size;
    2bc4:	444c      	add	r4, r9
    2bc6:	e7e7      	b.n	2b98 <_flash_append+0x34>
    2bc8:	000029b1 	.word	0x000029b1

00002bcc <_flash_erase>:
{
    2bcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	block_start_addr = dst_addr & ~(NVMCTRL_BLOCK_SIZE - 1);
    2bd0:	f421 54ff 	bic.w	r4, r1, #8160	; 0x1fe0
{
    2bd4:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
    2bd8:	460e      	mov	r6, r1
    2bda:	4607      	mov	r7, r0
    2bdc:	4615      	mov	r5, r2
	block_start_addr = dst_addr & ~(NVMCTRL_BLOCK_SIZE - 1);
    2bde:	f024 041f 	bic.w	r4, r4, #31
	memset(tmp_buffer, 0xFF, NVMCTRL_PAGE_SIZE);
    2be2:	f44f 7200 	mov.w	r2, #512	; 0x200
    2be6:	21ff      	movs	r1, #255	; 0xff
    2be8:	4668      	mov	r0, sp
    2bea:	4b20      	ldr	r3, [pc, #128]	; (2c6c <_flash_erase+0xa0>)
    2bec:	4798      	blx	r3
	if (dst_addr != block_start_addr) {
    2bee:	42a6      	cmp	r6, r4
    2bf0:	d11d      	bne.n	2c2e <_flash_erase+0x62>
{
    2bf2:	4622      	mov	r2, r4
    2bf4:	462b      	mov	r3, r5
    2bf6:	f24a 5001 	movw	r0, #42241	; 0xa501
	while (page_nums >= NVMCTRL_BLOCK_PAGES) {
    2bfa:	2b0f      	cmp	r3, #15
    2bfc:	d82c      	bhi.n	2c58 <_flash_erase+0x8c>
    2bfe:	092b      	lsrs	r3, r5, #4
	if (page_nums != 0) {
    2c00:	ebb5 1503 	subs.w	r5, r5, r3, lsl #4
    2c04:	eb04 2443 	add.w	r4, r4, r3, lsl #9
    2c08:	d00d      	beq.n	2c26 <_flash_erase+0x5a>
			_flash_write(device, block_start_addr, tmp_buffer, NVMCTRL_PAGE_SIZE);
    2c0a:	f8df 8064 	ldr.w	r8, [pc, #100]	; 2c70 <_flash_erase+0xa4>
    2c0e:	2600      	movs	r6, #0
    2c10:	4621      	mov	r1, r4
    2c12:	f44f 7300 	mov.w	r3, #512	; 0x200
    2c16:	466a      	mov	r2, sp
    2c18:	4638      	mov	r0, r7
		for (i = 0; i < page_nums; i++) {
    2c1a:	3601      	adds	r6, #1
			_flash_write(device, block_start_addr, tmp_buffer, NVMCTRL_PAGE_SIZE);
    2c1c:	47c0      	blx	r8
		for (i = 0; i < page_nums; i++) {
    2c1e:	42b5      	cmp	r5, r6
			block_start_addr += NVMCTRL_PAGE_SIZE;
    2c20:	f504 7400 	add.w	r4, r4, #512	; 0x200
		for (i = 0; i < page_nums; i++) {
    2c24:	d1f4      	bne.n	2c10 <_flash_erase+0x44>
}
    2c26:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
    2c2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			_flash_write(device, dst_addr, tmp_buffer, NVMCTRL_PAGE_SIZE);
    2c2e:	f8df 9040 	ldr.w	r9, [pc, #64]	; 2c70 <_flash_erase+0xa4>
		block_start_addr += NVMCTRL_BLOCK_SIZE;
    2c32:	f504 5400 	add.w	r4, r4, #8192	; 0x2000
    2c36:	f506 58f0 	add.w	r8, r6, #7680	; 0x1e00
			_flash_write(device, dst_addr, tmp_buffer, NVMCTRL_PAGE_SIZE);
    2c3a:	f44f 7300 	mov.w	r3, #512	; 0x200
    2c3e:	466a      	mov	r2, sp
    2c40:	4631      	mov	r1, r6
    2c42:	4638      	mov	r0, r7
    2c44:	47c8      	blx	r9
			if (--page_nums == 0) {
    2c46:	3d01      	subs	r5, #1
    2c48:	d0ed      	beq.n	2c26 <_flash_erase+0x5a>
			dst_addr += NVMCTRL_PAGE_SIZE;
    2c4a:	f506 7600 	add.w	r6, r6, #512	; 0x200
			if (dst_addr == block_start_addr) {
    2c4e:	42b4      	cmp	r4, r6
    2c50:	d0cf      	beq.n	2bf2 <_flash_erase+0x26>
		for (i = 0; i < NVMCTRL_BLOCK_PAGES - 1; i++) {
    2c52:	4546      	cmp	r6, r8
    2c54:	d1f1      	bne.n	2c3a <_flash_erase+0x6e>
    2c56:	e7cc      	b.n	2bf2 <_flash_erase+0x26>
		_flash_erase_block(device->hw, block_start_addr);
    2c58:	6939      	ldr	r1, [r7, #16]
	return (((Nvmctrl *)hw)->STATUS.reg & NVMCTRL_STATUS_READY) >> NVMCTRL_STATUS_READY_Pos;
    2c5a:	8a4e      	ldrh	r6, [r1, #18]
	while (!hri_nvmctrl_get_STATUS_READY_bit(hw)) {
    2c5c:	07f6      	lsls	r6, r6, #31
    2c5e:	d5fc      	bpl.n	2c5a <_flash_erase+0x8e>
	((Nvmctrl *)hw)->ADDR.reg = data;
    2c60:	614a      	str	r2, [r1, #20]
		page_nums -= NVMCTRL_BLOCK_PAGES;
    2c62:	3b10      	subs	r3, #16
	((Nvmctrl *)hw)->CTRLB.reg = data;
    2c64:	8088      	strh	r0, [r1, #4]
		block_start_addr += NVMCTRL_PAGE_SIZE;
    2c66:	f502 7200 	add.w	r2, r2, #512	; 0x200
    2c6a:	e7c6      	b.n	2bfa <_flash_erase+0x2e>
    2c6c:	0000b345 	.word	0x0000b345
    2c70:	00002a95 	.word	0x00002a95

00002c74 <_flash_is_locked>:
	return !(hri_nvmctrl_get_RUNLOCK_reg(device->hw, 1 << region_id));
    2c74:	6903      	ldr	r3, [r0, #16]
    2c76:	f3c1 318f 	ubfx	r1, r1, #14, #16

static inline hri_nvmctrl_runlock_reg_t hri_nvmctrl_get_RUNLOCK_reg(const void *const         hw,
                                                                    hri_nvmctrl_runlock_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Nvmctrl *)hw)->RUNLOCK.reg;
    2c7a:	699a      	ldr	r2, [r3, #24]
    2c7c:	2301      	movs	r3, #1
    2c7e:	fa03 f101 	lsl.w	r1, r3, r1
    2c82:	4211      	tst	r1, r2
}
    2c84:	bf0c      	ite	eq
    2c86:	4618      	moveq	r0, r3
    2c88:	2000      	movne	r0, #0
    2c8a:	4770      	bx	lr

00002c8c <NVMCTRL_1_Handler>:
/**
 * \internal NVM 1 interrupt handler
 */
void NVMCTRL_1_Handler(void)
{
	_nvm_interrupt_handler(_nvm_dev);
    2c8c:	4b09      	ldr	r3, [pc, #36]	; (2cb4 <NVMCTRL_1_Handler+0x28>)
    2c8e:	6818      	ldr	r0, [r3, #0]
	void *const hw = device->hw;
    2c90:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
    2c92:	8a1a      	ldrh	r2, [r3, #16]
	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
    2c94:	07d2      	lsls	r2, r2, #31
    2c96:	d504      	bpl.n	2ca2 <NVMCTRL_1_Handler+0x16>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
    2c98:	2201      	movs	r2, #1
    2c9a:	821a      	strh	r2, [r3, #16]
		if (NULL != device->flash_cb.ready_cb) {
    2c9c:	6803      	ldr	r3, [r0, #0]
		if (NULL != device->flash_cb.error_cb) {
    2c9e:	b143      	cbz	r3, 2cb2 <NVMCTRL_1_Handler+0x26>
			device->flash_cb.error_cb(device);
    2ca0:	4718      	bx	r3
	return ((Nvmctrl *)hw)->INTFLAG.reg;
    2ca2:	8a1a      	ldrh	r2, [r3, #16]
    2ca4:	b292      	uxth	r2, r2
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
    2ca6:	b122      	cbz	r2, 2cb2 <NVMCTRL_1_Handler+0x26>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    2ca8:	f240 225e 	movw	r2, #606	; 0x25e
    2cac:	821a      	strh	r2, [r3, #16]
		if (NULL != device->flash_cb.error_cb) {
    2cae:	6843      	ldr	r3, [r0, #4]
    2cb0:	e7f5      	b.n	2c9e <NVMCTRL_1_Handler+0x12>
    2cb2:	4770      	bx	lr
    2cb4:	20007044 	.word	0x20007044

00002cb8 <NVMCTRL_0_Handler>:
    2cb8:	4b00      	ldr	r3, [pc, #0]	; (2cbc <NVMCTRL_0_Handler+0x4>)
    2cba:	4718      	bx	r3
    2cbc:	00002c8d 	.word	0x00002c8d

00002cc0 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    2cc0:	4b03      	ldr	r3, [pc, #12]	; (2cd0 <_osc32kctrl_init_sources+0x10>)
    2cc2:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    2cc4:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    2cc8:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    2cca:	2201      	movs	r2, #1
    2ccc:	741a      	strb	r2, [r3, #16]
    2cce:	4770      	bx	lr
    2cd0:	40001400 	.word	0x40001400

00002cd4 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    2cd4:	4770      	bx	lr
	...

00002cd8 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    2cd8:	4a26      	ldr	r2, [pc, #152]	; (2d74 <_oscctrl_init_referenced_generators+0x9c>)
    2cda:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    2cdc:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    2ce0:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    2ce4:	6213      	str	r3, [r2, #32]
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    2ce6:	4b24      	ldr	r3, [pc, #144]	; (2d78 <_oscctrl_init_referenced_generators+0xa0>)
    2ce8:	2200      	movs	r2, #0
    2cea:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    2cec:	4a23      	ldr	r2, [pc, #140]	; (2d7c <_oscctrl_init_referenced_generators+0xa4>)
    2cee:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2cf0:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    2cf4:	f012 0210 	ands.w	r2, r2, #16
    2cf8:	d1fa      	bne.n	2cf0 <_oscctrl_init_referenced_generators+0x18>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    2cfa:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2cfe:	4a1e      	ldr	r2, [pc, #120]	; (2d78 <_oscctrl_init_referenced_generators+0xa0>)
    2d00:	4613      	mov	r3, r2
    2d02:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    2d06:	0749      	lsls	r1, r1, #29
    2d08:	d4fb      	bmi.n	2d02 <_oscctrl_init_referenced_generators+0x2a>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    2d0a:	2142      	movs	r1, #66	; 0x42
    2d0c:	7711      	strb	r1, [r2, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2d0e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    2d12:	0792      	lsls	r2, r2, #30
    2d14:	d4fb      	bmi.n	2d0e <_oscctrl_init_referenced_generators+0x36>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    2d16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    2d18:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2d1a:	4b17      	ldr	r3, [pc, #92]	; (2d78 <_oscctrl_init_referenced_generators+0xa0>)
    2d1c:	461a      	mov	r2, r3
    2d1e:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    2d22:	0708      	lsls	r0, r1, #28
    2d24:	d4fb      	bmi.n	2d1e <_oscctrl_init_referenced_generators+0x46>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    2d26:	21aa      	movs	r1, #170	; 0xaa
    2d28:	f883 1020 	strb.w	r1, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2d2c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    2d30:	0759      	lsls	r1, r3, #29
    2d32:	d4fb      	bmi.n	2d2c <_oscctrl_init_referenced_generators+0x54>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    2d34:	f892 3020 	ldrb.w	r3, [r2, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    2d38:	f013 0f01 	tst.w	r3, #1
    2d3c:	4b0e      	ldr	r3, [pc, #56]	; (2d78 <_oscctrl_init_referenced_generators+0xa0>)
    2d3e:	d014      	beq.n	2d6a <_oscctrl_init_referenced_generators+0x92>
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    2d40:	691a      	ldr	r2, [r3, #16]
	tmp &= mask;
    2d42:	f402 6210 	and.w	r2, r2, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    2d46:	f5b2 6f10 	cmp.w	r2, #2304	; 0x900
    2d4a:	d1f9      	bne.n	2d40 <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLA.reg |= OSCCTRL_DFLLCTRLA_ONDEMAND;
    2d4c:	7f1a      	ldrb	r2, [r3, #28]
    2d4e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    2d52:	771a      	strb	r2, [r3, #28]
	return tmp;
}

static inline hri_gclk_syncbusy_reg_t hri_gclk_read_SYNCBUSY_reg(const void *const hw)
{
	return ((Gclk *)hw)->SYNCBUSY.reg;
    2d54:	4a07      	ldr	r2, [pc, #28]	; (2d74 <_oscctrl_init_referenced_generators+0x9c>)
    2d56:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    2d58:	2b00      	cmp	r3, #0
    2d5a:	d1fc      	bne.n	2d56 <_oscctrl_init_referenced_generators+0x7e>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    2d5c:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    2d5e:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    2d62:	f043 0306 	orr.w	r3, r3, #6
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    2d66:	6213      	str	r3, [r2, #32]
    2d68:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    2d6a:	691a      	ldr	r2, [r3, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    2d6c:	05d2      	lsls	r2, r2, #23
    2d6e:	d5fc      	bpl.n	2d6a <_oscctrl_init_referenced_generators+0x92>
    2d70:	e7ec      	b.n	2d4c <_oscctrl_init_referenced_generators+0x74>
    2d72:	bf00      	nop
    2d74:	40001c00 	.word	0x40001c00
    2d78:	40001000 	.word	0x40001000
    2d7c:	7c80bb80 	.word	0x7c80bb80

00002d80 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    2d80:	b507      	push	{r0, r1, r2, lr}
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    2d82:	4a0c      	ldr	r2, [pc, #48]	; (2db4 <RAMECC_Handler+0x34>)
    2d84:	7893      	ldrb	r3, [r2, #2]
    2d86:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    2d88:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    2d8a:	9b01      	ldr	r3, [sp, #4]
    2d8c:	0799      	lsls	r1, r3, #30
    2d8e:	d507      	bpl.n	2da0 <RAMECC_Handler+0x20>
    2d90:	4b09      	ldr	r3, [pc, #36]	; (2db8 <RAMECC_Handler+0x38>)
    2d92:	681b      	ldr	r3, [r3, #0]
    2d94:	b123      	cbz	r3, 2da0 <RAMECC_Handler+0x20>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    2d96:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    2d98:	4798      	blx	r3
	} else {
		return;
	}
}
    2d9a:	b003      	add	sp, #12
    2d9c:	f85d fb04 	ldr.w	pc, [sp], #4
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    2da0:	9b01      	ldr	r3, [sp, #4]
    2da2:	07db      	lsls	r3, r3, #31
    2da4:	d5f9      	bpl.n	2d9a <RAMECC_Handler+0x1a>
    2da6:	4b04      	ldr	r3, [pc, #16]	; (2db8 <RAMECC_Handler+0x38>)
    2da8:	685b      	ldr	r3, [r3, #4]
    2daa:	2b00      	cmp	r3, #0
    2dac:	d0f5      	beq.n	2d9a <RAMECC_Handler+0x1a>
    2dae:	4a01      	ldr	r2, [pc, #4]	; (2db4 <RAMECC_Handler+0x34>)
    2db0:	e7f1      	b.n	2d96 <RAMECC_Handler+0x16>
    2db2:	bf00      	nop
    2db4:	41020000 	.word	0x41020000
    2db8:	20007560 	.word	0x20007560

00002dbc <__NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
    2dbc:	2800      	cmp	r0, #0
    2dbe:	db08      	blt.n	2dd2 <__NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2dc0:	0942      	lsrs	r2, r0, #5
    2dc2:	2301      	movs	r3, #1
    2dc4:	f000 001f 	and.w	r0, r0, #31
    2dc8:	fa03 f000 	lsl.w	r0, r3, r0
    2dcc:	4b01      	ldr	r3, [pc, #4]	; (2dd4 <__NVIC_EnableIRQ+0x18>)
    2dce:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
    2dd2:	4770      	bx	lr
    2dd4:	e000e100 	.word	0xe000e100

00002dd8 <__NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
    2dd8:	2800      	cmp	r0, #0
    2dda:	db0d      	blt.n	2df8 <__NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2ddc:	0943      	lsrs	r3, r0, #5
    2dde:	2201      	movs	r2, #1
    2de0:	f000 001f 	and.w	r0, r0, #31
    2de4:	fa02 f000 	lsl.w	r0, r2, r0
    2de8:	3320      	adds	r3, #32
    2dea:	4a04      	ldr	r2, [pc, #16]	; (2dfc <__NVIC_DisableIRQ+0x24>)
    2dec:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2df0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2df4:	f3bf 8f6f 	isb	sy
    2df8:	4770      	bx	lr
    2dfa:	bf00      	nop
    2dfc:	e000e100 	.word	0xe000e100

00002e00 <__NVIC_ClearPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
    2e00:	2800      	cmp	r0, #0
    2e02:	db09      	blt.n	2e18 <__NVIC_ClearPendingIRQ+0x18>
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2e04:	0943      	lsrs	r3, r0, #5
    2e06:	2201      	movs	r2, #1
    2e08:	f000 001f 	and.w	r0, r0, #31
    2e0c:	fa02 f000 	lsl.w	r0, r2, r0
    2e10:	3360      	adds	r3, #96	; 0x60
    2e12:	4a02      	ldr	r2, [pc, #8]	; (2e1c <__NVIC_ClearPendingIRQ+0x1c>)
    2e14:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    2e18:	4770      	bx	lr
    2e1a:	bf00      	nop
    2e1c:	e000e100 	.word	0xe000e100

00002e20 <hri_sercomusart_wait_for_sync>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
}

static inline void hri_sercomusart_wait_for_sync(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2e20:	69c3      	ldr	r3, [r0, #28]
    2e22:	420b      	tst	r3, r1
    2e24:	d1fc      	bne.n	2e20 <hri_sercomusart_wait_for_sync>
	};
}
    2e26:	4770      	bx	lr

00002e28 <hri_sercomusart_clear_CTRLA_ENABLE_bit>:
	((Sercom *)hw)->USART.CTRLA.reg = tmp;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomusart_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    2e28:	b508      	push	{r3, lr}
	SERCOM_CRITICAL_SECTION_ENTER();
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    2e2a:	2103      	movs	r1, #3
    2e2c:	4b03      	ldr	r3, [pc, #12]	; (2e3c <hri_sercomusart_clear_CTRLA_ENABLE_bit+0x14>)
    2e2e:	4798      	blx	r3
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    2e30:	6803      	ldr	r3, [r0, #0]
    2e32:	f023 0302 	bic.w	r3, r3, #2
    2e36:	6003      	str	r3, [r0, #0]
    2e38:	bd08      	pop	{r3, pc}
    2e3a:	bf00      	nop
    2e3c:	00002e21 	.word	0x00002e21

00002e40 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    2e40:	b570      	push	{r4, r5, r6, lr}
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    2e42:	4d0b      	ldr	r5, [pc, #44]	; (2e70 <_sercom_get_hardware_index+0x30>)
{
    2e44:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    2e46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    2e48:	b088      	sub	sp, #32
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    2e4a:	466c      	mov	r4, sp
    2e4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2e4e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2e52:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2e56:	2000      	movs	r0, #0
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    2e58:	f85d 3020 	ldr.w	r3, [sp, r0, lsl #2]
    2e5c:	42b3      	cmp	r3, r6
    2e5e:	d102      	bne.n	2e66 <_sercom_get_hardware_index+0x26>
			return i;
    2e60:	b2c0      	uxtb	r0, r0
		}
	}
	return 0;
}
    2e62:	b008      	add	sp, #32
    2e64:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2e66:	3001      	adds	r0, #1
    2e68:	2808      	cmp	r0, #8
    2e6a:	d1f5      	bne.n	2e58 <_sercom_get_hardware_index+0x18>
	return 0;
    2e6c:	2000      	movs	r0, #0
    2e6e:	e7f8      	b.n	2e62 <_sercom_get_hardware_index+0x22>
    2e70:	0000c6b0 	.word	0x0000c6b0

00002e74 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    2e74:	b510      	push	{r4, lr}
	void *hw = device->hw;
    2e76:	6984      	ldr	r4, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    2e78:	7e22      	ldrb	r2, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    2e7a:	07d1      	lsls	r1, r2, #31
{
    2e7c:	4603      	mov	r3, r0
	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    2e7e:	d508      	bpl.n	2e92 <_sercom_usart_interrupt_handler+0x1e>
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    2e80:	7da2      	ldrb	r2, [r4, #22]
    2e82:	07d2      	lsls	r2, r2, #31
    2e84:	d505      	bpl.n	2e92 <_sercom_usart_interrupt_handler+0x1e>
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    2e86:	2201      	movs	r2, #1
    2e88:	7522      	strb	r2, [r4, #20]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
    2e8a:	6803      	ldr	r3, [r0, #0]
		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
		status = hri_sercomusart_read_STATUS_reg(hw);
		hri_sercomusart_clear_STATUS_reg(hw, status);
	}
}
    2e8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		device->usart_cb.tx_byte_sent(device);
    2e90:	4718      	bx	r3
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    2e92:	7e22      	ldrb	r2, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    2e94:	0790      	lsls	r0, r2, #30
    2e96:	d509      	bpl.n	2eac <_sercom_usart_interrupt_handler+0x38>
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    2e98:	7da2      	ldrb	r2, [r4, #22]
    2e9a:	0791      	lsls	r1, r2, #30
    2e9c:	d506      	bpl.n	2eac <_sercom_usart_interrupt_handler+0x38>
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    2e9e:	2202      	movs	r2, #2
    2ea0:	7522      	strb	r2, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    2ea2:	689a      	ldr	r2, [r3, #8]
    2ea4:	4618      	mov	r0, r3
}
    2ea6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		device->usart_cb.tx_done_cb(device);
    2eaa:	4710      	bx	r2
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    2eac:	7e22      	ldrb	r2, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    2eae:	0752      	lsls	r2, r2, #29
    2eb0:	d50d      	bpl.n	2ece <_sercom_usart_interrupt_handler+0x5a>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    2eb2:	8b62      	ldrh	r2, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    2eb4:	f002 0237 	and.w	r2, r2, #55	; 0x37
    2eb8:	b112      	cbz	r2, 2ec0 <_sercom_usart_interrupt_handler+0x4c>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    2eba:	23ff      	movs	r3, #255	; 0xff
    2ebc:	8363      	strh	r3, [r4, #26]
    2ebe:	bd10      	pop	{r4, pc}
	return ((Sercom *)hw)->USART.DATA.reg;
    2ec0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    2ec2:	685a      	ldr	r2, [r3, #4]
    2ec4:	b2c9      	uxtb	r1, r1
    2ec6:	4618      	mov	r0, r3
}
    2ec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    2ecc:	4710      	bx	r2
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    2ece:	7e22      	ldrb	r2, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    2ed0:	09d2      	lsrs	r2, r2, #7
    2ed2:	d0f4      	beq.n	2ebe <_sercom_usart_interrupt_handler+0x4a>
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    2ed4:	2280      	movs	r2, #128	; 0x80
    2ed6:	7622      	strb	r2, [r4, #24]
		device->usart_cb.error_cb(device);
    2ed8:	68da      	ldr	r2, [r3, #12]
    2eda:	4618      	mov	r0, r3
    2edc:	4790      	blx	r2
	return ((Sercom *)hw)->USART.STATUS.reg;
    2ede:	8b63      	ldrh	r3, [r4, #26]
    2ee0:	b29b      	uxth	r3, r3
    2ee2:	e7eb      	b.n	2ebc <_sercom_usart_interrupt_handler+0x48>

00002ee4 <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM0) {
    2ee4:	4b05      	ldr	r3, [pc, #20]	; (2efc <_sercom_init_irq_param+0x18>)
    2ee6:	4298      	cmp	r0, r3
    2ee8:	d102      	bne.n	2ef0 <_sercom_init_irq_param+0xc>
		_sercom0_dev = (struct _usart_async_device *)dev;
    2eea:	4b05      	ldr	r3, [pc, #20]	; (2f00 <_sercom_init_irq_param+0x1c>)
    2eec:	6019      	str	r1, [r3, #0]
    2eee:	4770      	bx	lr
	}

	if (hw == SERCOM5) {
    2ef0:	4b04      	ldr	r3, [pc, #16]	; (2f04 <_sercom_init_irq_param+0x20>)
    2ef2:	4298      	cmp	r0, r3
		_sercom5_dev = (struct _usart_async_device *)dev;
    2ef4:	bf04      	itt	eq
    2ef6:	4b02      	ldreq	r3, [pc, #8]	; (2f00 <_sercom_init_irq_param+0x1c>)
    2ef8:	6059      	streq	r1, [r3, #4]
    2efa:	4770      	bx	lr
    2efc:	40003000 	.word	0x40003000
    2f00:	20007048 	.word	0x20007048
    2f04:	43000400 	.word	0x43000400

00002f08 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    2f08:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    2f0a:	4b03      	ldr	r3, [pc, #12]	; (2f18 <_sercom_get_irq_num+0x10>)
    2f0c:	4798      	blx	r3
    2f0e:	0080      	lsls	r0, r0, #2
    2f10:	302e      	adds	r0, #46	; 0x2e
}
    2f12:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    2f16:	bd08      	pop	{r3, pc}
    2f18:	00002e41 	.word	0x00002e41

00002f1c <_usart_init>:
{
    2f1c:	b538      	push	{r3, r4, r5, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    2f1e:	4b1c      	ldr	r3, [pc, #112]	; (2f90 <_usart_init+0x74>)
{
    2f20:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    2f22:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    2f24:	b138      	cbz	r0, 2f36 <_usart_init+0x1a>
    2f26:	2805      	cmp	r0, #5
    2f28:	d030      	beq.n	2f8c <_usart_init+0x70>
	ASSERT(false);
    2f2a:	f240 226d 	movw	r2, #621	; 0x26d
    2f2e:	4919      	ldr	r1, [pc, #100]	; (2f94 <_usart_init+0x78>)
    2f30:	4b19      	ldr	r3, [pc, #100]	; (2f98 <_usart_init+0x7c>)
    2f32:	2000      	movs	r0, #0
    2f34:	4798      	blx	r3
	return 0;
    2f36:	2200      	movs	r2, #0
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    2f38:	69e3      	ldr	r3, [r4, #28]
    2f3a:	4d18      	ldr	r5, [pc, #96]	; (2f9c <_usart_init+0x80>)
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    2f3c:	f013 0f01 	tst.w	r3, #1
    2f40:	d10a      	bne.n	2f58 <_usart_init+0x3c>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    2f42:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    2f44:	079b      	lsls	r3, r3, #30
    2f46:	d505      	bpl.n	2f54 <_usart_init+0x38>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
    2f48:	4620      	mov	r0, r4
    2f4a:	4b15      	ldr	r3, [pc, #84]	; (2fa0 <_usart_init+0x84>)
    2f4c:	4798      	blx	r3
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
    2f4e:	2102      	movs	r1, #2
    2f50:	4620      	mov	r0, r4
    2f52:	47a8      	blx	r5
	((Sercom *)hw)->USART.CTRLA.reg = data;
    2f54:	2305      	movs	r3, #5
    2f56:	6023      	str	r3, [r4, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);
    2f58:	4620      	mov	r0, r4
    2f5a:	2101      	movs	r1, #1
    2f5c:	47a8      	blx	r5
    2f5e:	4b11      	ldr	r3, [pc, #68]	; (2fa4 <_usart_init+0x88>)
    2f60:	6023      	str	r3, [r4, #0]
	((Sercom *)hw)->USART.CTRLB.reg = data;
    2f62:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    2f66:	6063      	str	r3, [r4, #4]
	((Sercom *)hw)->USART.CTRLC.reg = data;
    2f68:	4b0f      	ldr	r3, [pc, #60]	; (2fa8 <_usart_init+0x8c>)
    2f6a:	60a3      	str	r3, [r4, #8]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    2f6c:	480f      	ldr	r0, [pc, #60]	; (2fac <_usart_init+0x90>)
	((Sercom *)hw)->USART.BAUD.reg = data;
    2f6e:	f24f 43bc 	movw	r3, #62652	; 0xf4bc
    2f72:	81a3      	strh	r3, [r4, #12]
    2f74:	2318      	movs	r3, #24
    2f76:	fb03 0202 	mla	r2, r3, r2, r0
}
    2f7a:	2000      	movs	r0, #0
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    2f7c:	f892 3033 	ldrb.w	r3, [r2, #51]	; 0x33
	((Sercom *)hw)->USART.RXPL.reg = data;
    2f80:	73a3      	strb	r3, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    2f82:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    2f86:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
    2f8a:	bd38      	pop	{r3, r4, r5, pc}
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    2f8c:	2201      	movs	r2, #1
    2f8e:	e7d3      	b.n	2f38 <_usart_init+0x1c>
    2f90:	00002e41 	.word	0x00002e41
    2f94:	0000c729 	.word	0x0000c729
    2f98:	00001fdd 	.word	0x00001fdd
    2f9c:	00002e21 	.word	0x00002e21
    2fa0:	00002e29 	.word	0x00002e29
    2fa4:	40100084 	.word	0x40100084
    2fa8:	00700002 	.word	0x00700002
    2fac:	0000c6b0 	.word	0x0000c6b0

00002fb0 <_usart_async_init>:
{
    2fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	ASSERT(device);
    2fb4:	4606      	mov	r6, r0
    2fb6:	3000      	adds	r0, #0
    2fb8:	bf18      	it	ne
    2fba:	2001      	movne	r0, #1
{
    2fbc:	460c      	mov	r4, r1
	ASSERT(device);
    2fbe:	22cd      	movs	r2, #205	; 0xcd
    2fc0:	4912      	ldr	r1, [pc, #72]	; (300c <_usart_async_init+0x5c>)
    2fc2:	4b13      	ldr	r3, [pc, #76]	; (3010 <_usart_async_init+0x60>)
    2fc4:	4798      	blx	r3
	init_status = _usart_init(hw);
    2fc6:	4620      	mov	r0, r4
    2fc8:	4b12      	ldr	r3, [pc, #72]	; (3014 <_usart_async_init+0x64>)
    2fca:	4798      	blx	r3
	if (init_status) {
    2fcc:	4605      	mov	r5, r0
    2fce:	b9c8      	cbnz	r0, 3004 <_usart_async_init+0x54>
	device->hw = hw;
    2fd0:	61b4      	str	r4, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
    2fd2:	4631      	mov	r1, r6
    2fd4:	4620      	mov	r0, r4
    2fd6:	4b10      	ldr	r3, [pc, #64]	; (3018 <_usart_async_init+0x68>)
		NVIC_DisableIRQ((IRQn_Type)irq);
    2fd8:	f8df 804c 	ldr.w	r8, [pc, #76]	; 3028 <_usart_async_init+0x78>
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    2fdc:	4f0f      	ldr	r7, [pc, #60]	; (301c <_usart_async_init+0x6c>)
		NVIC_EnableIRQ((IRQn_Type)irq);
    2fde:	4e10      	ldr	r6, [pc, #64]	; (3020 <_usart_async_init+0x70>)
	_sercom_init_irq_param(hw, (void *)device);
    2fe0:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    2fe2:	4620      	mov	r0, r4
    2fe4:	4b0f      	ldr	r3, [pc, #60]	; (3024 <_usart_async_init+0x74>)
    2fe6:	4798      	blx	r3
	for (uint32_t i = 0; i < 4; i++) {
    2fe8:	462c      	mov	r4, r5
	uint8_t irq = _sercom_get_irq_num(hw);
    2fea:	4681      	mov	r9, r0
		NVIC_DisableIRQ((IRQn_Type)irq);
    2fec:	eb09 0104 	add.w	r1, r9, r4
    2ff0:	b2c9      	uxtb	r1, r1
    2ff2:	4608      	mov	r0, r1
    2ff4:	47c0      	blx	r8
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    2ff6:	4608      	mov	r0, r1
    2ff8:	47b8      	blx	r7
	for (uint32_t i = 0; i < 4; i++) {
    2ffa:	3401      	adds	r4, #1
		NVIC_EnableIRQ((IRQn_Type)irq);
    2ffc:	4608      	mov	r0, r1
    2ffe:	47b0      	blx	r6
	for (uint32_t i = 0; i < 4; i++) {
    3000:	2c04      	cmp	r4, #4
    3002:	d1f3      	bne.n	2fec <_usart_async_init+0x3c>
}
    3004:	4628      	mov	r0, r5
    3006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    300a:	bf00      	nop
    300c:	0000c729 	.word	0x0000c729
    3010:	00001fdd 	.word	0x00001fdd
    3014:	00002f1d 	.word	0x00002f1d
    3018:	00002ee5 	.word	0x00002ee5
    301c:	00002e01 	.word	0x00002e01
    3020:	00002dbd 	.word	0x00002dbd
    3024:	00002f09 	.word	0x00002f09
    3028:	00002dd9 	.word	0x00002dd9

0000302c <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    302c:	6982      	ldr	r2, [r0, #24]
{
    302e:	b508      	push	{r3, lr}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    3030:	2103      	movs	r1, #3
    3032:	4b04      	ldr	r3, [pc, #16]	; (3044 <_usart_async_enable+0x18>)
    3034:	4610      	mov	r0, r2
    3036:	4798      	blx	r3
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    3038:	6813      	ldr	r3, [r2, #0]
    303a:	f043 0302 	orr.w	r3, r3, #2
    303e:	6013      	str	r3, [r2, #0]
    3040:	bd08      	pop	{r3, pc}
    3042:	bf00      	nop
    3044:	00002e21 	.word	0x00002e21

00003048 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    3048:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.DATA.reg = data;
    304a:	6299      	str	r1, [r3, #40]	; 0x28
    304c:	4770      	bx	lr

0000304e <_usart_async_is_byte_sent>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    304e:	6983      	ldr	r3, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    3050:	7e18      	ldrb	r0, [r3, #24]
}
    3052:	f000 0001 	and.w	r0, r0, #1
    3056:	4770      	bx	lr

00003058 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    3058:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    305a:	2201      	movs	r2, #1
    305c:	759a      	strb	r2, [r3, #22]
    305e:	4770      	bx	lr

00003060 <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    3060:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    3062:	2202      	movs	r2, #2
    3064:	759a      	strb	r2, [r3, #22]
    3066:	4770      	bx	lr

00003068 <_usart_async_set_irq_state>:
{
    3068:	b570      	push	{r4, r5, r6, lr}
	ASSERT(device);
    306a:	4605      	mov	r5, r0
    306c:	3000      	adds	r0, #0
{
    306e:	460e      	mov	r6, r1
	ASSERT(device);
    3070:	bf18      	it	ne
    3072:	2001      	movne	r0, #1
{
    3074:	4614      	mov	r4, r2
	ASSERT(device);
    3076:	490f      	ldr	r1, [pc, #60]	; (30b4 <_usart_async_set_irq_state+0x4c>)
    3078:	4b0f      	ldr	r3, [pc, #60]	; (30b8 <_usart_async_set_irq_state+0x50>)
    307a:	f240 222d 	movw	r2, #557	; 0x22d
    307e:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    3080:	f016 0ffd 	tst.w	r6, #253	; 0xfd
    3084:	d109      	bne.n	309a <_usart_async_set_irq_state+0x32>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    3086:	69ab      	ldr	r3, [r5, #24]
    3088:	2101      	movs	r1, #1
    308a:	2202      	movs	r2, #2
	if (value == 0x0) {
    308c:	b914      	cbnz	r4, 3094 <_usart_async_set_irq_state+0x2c>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    308e:	7519      	strb	r1, [r3, #20]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    3090:	751a      	strb	r2, [r3, #20]
    3092:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    3094:	7599      	strb	r1, [r3, #22]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    3096:	759a      	strb	r2, [r3, #22]
    3098:	bd70      	pop	{r4, r5, r6, pc}
	} else if (USART_ASYNC_RX_DONE == type) {
    309a:	2e01      	cmp	r6, #1
    309c:	d104      	bne.n	30a8 <_usart_async_set_irq_state+0x40>
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    309e:	69ab      	ldr	r3, [r5, #24]
    30a0:	2204      	movs	r2, #4
	if (value == 0x0) {
    30a2:	2c00      	cmp	r4, #0
    30a4:	d1f7      	bne.n	3096 <_usart_async_set_irq_state+0x2e>
    30a6:	e7f3      	b.n	3090 <_usart_async_set_irq_state+0x28>
	} else if (USART_ASYNC_ERROR == type) {
    30a8:	2e03      	cmp	r6, #3
    30aa:	d1f5      	bne.n	3098 <_usart_async_set_irq_state+0x30>
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    30ac:	69ab      	ldr	r3, [r5, #24]
    30ae:	2280      	movs	r2, #128	; 0x80
    30b0:	e7f7      	b.n	30a2 <_usart_async_set_irq_state+0x3a>
    30b2:	bf00      	nop
    30b4:	0000c729 	.word	0x0000c729
    30b8:	00001fdd 	.word	0x00001fdd

000030bc <SERCOM0_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM0_3_Handler(void)
{
	_sercom_usart_interrupt_handler(_sercom0_dev);
    30bc:	4b01      	ldr	r3, [pc, #4]	; (30c4 <SERCOM0_3_Handler+0x8>)
    30be:	6818      	ldr	r0, [r3, #0]
    30c0:	4b01      	ldr	r3, [pc, #4]	; (30c8 <SERCOM0_3_Handler+0xc>)
    30c2:	4718      	bx	r3
    30c4:	20007048 	.word	0x20007048
    30c8:	00002e75 	.word	0x00002e75

000030cc <SERCOM0_2_Handler>:
    30cc:	4b00      	ldr	r3, [pc, #0]	; (30d0 <SERCOM0_2_Handler+0x4>)
    30ce:	4718      	bx	r3
    30d0:	000030bd 	.word	0x000030bd

000030d4 <SERCOM0_1_Handler>:
    30d4:	4b00      	ldr	r3, [pc, #0]	; (30d8 <SERCOM0_1_Handler+0x4>)
    30d6:	4718      	bx	r3
    30d8:	000030bd 	.word	0x000030bd

000030dc <SERCOM0_0_Handler>:
    30dc:	4b00      	ldr	r3, [pc, #0]	; (30e0 <SERCOM0_0_Handler+0x4>)
    30de:	4718      	bx	r3
    30e0:	000030bd 	.word	0x000030bd

000030e4 <SERCOM5_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_3_Handler(void)
{
	_sercom_usart_interrupt_handler(_sercom5_dev);
    30e4:	4b01      	ldr	r3, [pc, #4]	; (30ec <SERCOM5_3_Handler+0x8>)
    30e6:	6858      	ldr	r0, [r3, #4]
    30e8:	4b01      	ldr	r3, [pc, #4]	; (30f0 <SERCOM5_3_Handler+0xc>)
    30ea:	4718      	bx	r3
    30ec:	20007048 	.word	0x20007048
    30f0:	00002e75 	.word	0x00002e75

000030f4 <SERCOM5_2_Handler>:
    30f4:	4b00      	ldr	r3, [pc, #0]	; (30f8 <SERCOM5_2_Handler+0x4>)
    30f6:	4718      	bx	r3
    30f8:	000030e5 	.word	0x000030e5

000030fc <SERCOM5_1_Handler>:
    30fc:	4b00      	ldr	r3, [pc, #0]	; (3100 <SERCOM5_1_Handler+0x4>)
    30fe:	4718      	bx	r3
    3100:	000030e5 	.word	0x000030e5

00003104 <SERCOM5_0_Handler>:
    3104:	4b00      	ldr	r3, [pc, #0]	; (3108 <SERCOM5_0_Handler+0x4>)
    3106:	4718      	bx	r3
    3108:	000030e5 	.word	0x000030e5

0000310c <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    310c:	4b03      	ldr	r3, [pc, #12]	; (311c <_delay_init+0x10>)
    310e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    3112:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    3114:	2205      	movs	r2, #5
    3116:	601a      	str	r2, [r3, #0]
    3118:	4770      	bx	lr
    311a:	bf00      	nop
    311c:	e000e010 	.word	0xe000e010

00003120 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    3120:	0e0b      	lsrs	r3, r1, #24
    3122:	4a0c      	ldr	r2, [pc, #48]	; (3154 <_delay_cycles+0x34>)
{
    3124:	b530      	push	{r4, r5, lr}
	uint8_t  n   = cycles >> 24;
    3126:	b2d8      	uxtb	r0, r3
	uint32_t buf = cycles;

	while (n--) {
		SysTick->LOAD = 0xFFFFFF;
    3128:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
	while (n--) {
    312c:	3801      	subs	r0, #1
    312e:	b2c0      	uxtb	r0, r0
    3130:	28ff      	cmp	r0, #255	; 0xff
    3132:	d108      	bne.n	3146 <_delay_cycles+0x26>
    3134:	eba3 6303 	sub.w	r3, r3, r3, lsl #24
    3138:	4419      	add	r1, r3
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    313a:	6051      	str	r1, [r2, #4]
	SysTick->VAL  = buf;
    313c:	6091      	str	r1, [r2, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    313e:	6813      	ldr	r3, [r2, #0]
    3140:	03db      	lsls	r3, r3, #15
    3142:	d5fc      	bpl.n	313e <_delay_cycles+0x1e>
		;
}
    3144:	bd30      	pop	{r4, r5, pc}
		SysTick->LOAD = 0xFFFFFF;
    3146:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    3148:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    314a:	6815      	ldr	r5, [r2, #0]
    314c:	03ed      	lsls	r5, r5, #15
    314e:	d5fc      	bpl.n	314a <_delay_cycles+0x2a>
    3150:	e7ec      	b.n	312c <_delay_cycles+0xc>
    3152:	bf00      	nop
    3154:	e000e010 	.word	0xe000e010

00003158 <__NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
    3158:	2800      	cmp	r0, #0
    315a:	db0d      	blt.n	3178 <__NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    315c:	0943      	lsrs	r3, r0, #5
    315e:	2201      	movs	r2, #1
    3160:	f000 001f 	and.w	r0, r0, #31
    3164:	fa02 f000 	lsl.w	r0, r2, r0
    3168:	3320      	adds	r3, #32
    316a:	4a04      	ldr	r2, [pc, #16]	; (317c <__NVIC_DisableIRQ+0x24>)
    316c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    3170:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3174:	f3bf 8f6f 	isb	sy
    3178:	4770      	bx	lr
    317a:	bf00      	nop
    317c:	e000e100 	.word	0xe000e100

00003180 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    3180:	b570      	push	{r4, r5, r6, lr}
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    3182:	4d10      	ldr	r5, [pc, #64]	; (31c4 <get_tc_index+0x44>)
{
    3184:	4606      	mov	r6, r0
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    3186:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    3188:	b088      	sub	sp, #32
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    318a:	466c      	mov	r4, sp
    318c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    318e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    3192:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    3196:	2000      	movs	r0, #0
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    3198:	f85d 3020 	ldr.w	r3, [sp, r0, lsl #2]
    319c:	42b3      	cmp	r3, r6
    319e:	d102      	bne.n	31a6 <get_tc_index+0x26>
		if (_tcs[i].number == index) {
    31a0:	b930      	cbnz	r0, 31b0 <get_tc_index+0x30>
}
    31a2:	b008      	add	sp, #32
    31a4:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    31a6:	3001      	adds	r0, #1
    31a8:	2808      	cmp	r0, #8
    31aa:	d1f5      	bne.n	3198 <get_tc_index+0x18>
			return i;
    31ac:	2000      	movs	r0, #0
    31ae:	e7f8      	b.n	31a2 <get_tc_index+0x22>
	ASSERT(false);
    31b0:	2000      	movs	r0, #0
    31b2:	f44f 72a0 	mov.w	r2, #320	; 0x140
    31b6:	4904      	ldr	r1, [pc, #16]	; (31c8 <get_tc_index+0x48>)
    31b8:	4b04      	ldr	r3, [pc, #16]	; (31cc <get_tc_index+0x4c>)
    31ba:	4798      	blx	r3
	return -1;
    31bc:	f04f 30ff 	mov.w	r0, #4294967295
    31c0:	e7ef      	b.n	31a2 <get_tc_index+0x22>
    31c2:	bf00      	nop
    31c4:	0000c744 	.word	0x0000c744
    31c8:	0000c778 	.word	0x0000c778
    31cc:	00001fdd 	.word	0x00001fdd

000031d0 <hri_tc_clear_CTRLA_ENABLE_bit>:
typedef uint8_t  hri_tc_status_reg_t;
typedef uint8_t  hri_tc_wave_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    31d0:	6903      	ldr	r3, [r0, #16]
    31d2:	079b      	lsls	r3, r3, #30
    31d4:	d1fc      	bne.n	31d0 <hri_tc_clear_CTRLA_ENABLE_bit>

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	((Tc *)hw)->COUNT8.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    31d6:	6803      	ldr	r3, [r0, #0]
    31d8:	f023 0302 	bic.w	r3, r3, #2
    31dc:	6003      	str	r3, [r0, #0]
    31de:	4770      	bx	lr

000031e0 <_timer_init>:
{
    31e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    31e2:	4606      	mov	r6, r0
	int8_t i = get_tc_index(hw);
    31e4:	4b30      	ldr	r3, [pc, #192]	; (32a8 <_timer_init+0xc8>)
    31e6:	4608      	mov	r0, r1
{
    31e8:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    31ea:	4798      	blx	r3
	ASSERT(ARRAY_SIZE(_tcs));
    31ec:	492f      	ldr	r1, [pc, #188]	; (32ac <_timer_init+0xcc>)
    31ee:	4b30      	ldr	r3, [pc, #192]	; (32b0 <_timer_init+0xd0>)
	device->hw = hw;
    31f0:	60f4      	str	r4, [r6, #12]
	int8_t i = get_tc_index(hw);
    31f2:	4605      	mov	r5, r0
	ASSERT(ARRAY_SIZE(_tcs));
    31f4:	228e      	movs	r2, #142	; 0x8e
    31f6:	2001      	movs	r0, #1
    31f8:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    31fa:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    31fc:	07d9      	lsls	r1, r3, #31
    31fe:	d404      	bmi.n	320a <_timer_init+0x2a>
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    3200:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    3202:	079a      	lsls	r2, r3, #30
    3204:	d43a      	bmi.n	327c <_timer_init+0x9c>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CTRLA.reg = data;
    3206:	2301      	movs	r3, #1
    3208:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    320a:	6921      	ldr	r1, [r4, #16]
    320c:	f011 0101 	ands.w	r1, r1, #1
    3210:	d1fb      	bne.n	320a <_timer_init+0x2a>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    3212:	4828      	ldr	r0, [pc, #160]	; (32b4 <_timer_init+0xd4>)
    3214:	2314      	movs	r3, #20
    3216:	fb03 0305 	mla	r3, r3, r5, r0
    321a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    321c:	f893 702a 	ldrb.w	r7, [r3, #42]	; 0x2a
	((Tc *)hw)->COUNT8.CTRLA.reg = data;
    3220:	6022      	str	r2, [r4, #0]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.DBGCTRL.reg = data;
    3222:	73e7      	strb	r7, [r4, #15]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    3224:	f002 020c 	and.w	r2, r2, #12
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    3228:	8d1f      	ldrh	r7, [r3, #40]	; 0x28
	((Tc *)hw)->COUNT8.EVCTRL.reg = data;
    322a:	80e7      	strh	r7, [r4, #6]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    322c:	2a08      	cmp	r2, #8
	((Tc *)hw)->COUNT8.WAVE.reg = data;
    322e:	f04f 0701 	mov.w	r7, #1
    3232:	7327      	strb	r7, [r4, #12]
    3234:	d129      	bne.n	328a <_timer_init+0xaa>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    3236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    3238:	61e3      	str	r3, [r4, #28]
    323a:	6221      	str	r1, [r4, #32]
	((Tc *)hw)->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    323c:	2301      	movs	r3, #1
    323e:	7263      	strb	r3, [r4, #9]
	if (hw == TC0) {
    3240:	4b1d      	ldr	r3, [pc, #116]	; (32b8 <_timer_init+0xd8>)
    3242:	429c      	cmp	r4, r3
		_tc0_dev = (struct _timer_device *)dev;
    3244:	bf04      	itt	eq
    3246:	4b1d      	ldreq	r3, [pc, #116]	; (32bc <_timer_init+0xdc>)
    3248:	601e      	streq	r6, [r3, #0]
	NVIC_DisableIRQ(_tcs[i].irq);
    324a:	2314      	movs	r3, #20
    324c:	fb03 0505 	mla	r5, r3, r5, r0
    3250:	4b1b      	ldr	r3, [pc, #108]	; (32c0 <_timer_init+0xe0>)
    3252:	f9b5 1022 	ldrsh.w	r1, [r5, #34]	; 0x22
    3256:	4608      	mov	r0, r1
    3258:	4798      	blx	r3
  if ((int32_t)(IRQn) >= 0)
    325a:	2900      	cmp	r1, #0
    325c:	db0c      	blt.n	3278 <_timer_init+0x98>
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    325e:	f001 021f 	and.w	r2, r1, #31
    3262:	0949      	lsrs	r1, r1, #5
    3264:	0089      	lsls	r1, r1, #2
    3266:	f101 4160 	add.w	r1, r1, #3758096384	; 0xe0000000
    326a:	f501 4161 	add.w	r1, r1, #57600	; 0xe100
    326e:	2301      	movs	r3, #1
    3270:	4093      	lsls	r3, r2
    3272:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3276:	600b      	str	r3, [r1, #0]
}
    3278:	2000      	movs	r0, #0
    327a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    327c:	4620      	mov	r0, r4
    327e:	4b11      	ldr	r3, [pc, #68]	; (32c4 <_timer_init+0xe4>)
    3280:	4798      	blx	r3
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3282:	6923      	ldr	r3, [r4, #16]
    3284:	079b      	lsls	r3, r3, #30
    3286:	d4fc      	bmi.n	3282 <_timer_init+0xa2>
    3288:	e7bd      	b.n	3206 <_timer_init+0x26>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    328a:	b91a      	cbnz	r2, 3294 <_timer_init+0xb4>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    328c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    328e:	83a3      	strh	r3, [r4, #28]
    3290:	83e2      	strh	r2, [r4, #30]
    3292:	e7d3      	b.n	323c <_timer_init+0x5c>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    3294:	2a04      	cmp	r2, #4
    3296:	d1d1      	bne.n	323c <_timer_init+0x5c>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    3298:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
		hri_tc_write_PER_reg(hw, _tcs[i].per);
    329c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tc_cc8_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    32a0:	7722      	strb	r2, [r4, #28]
    32a2:	7761      	strb	r1, [r4, #29]
	((Tc *)hw)->COUNT8.PER.reg = data;
    32a4:	76e3      	strb	r3, [r4, #27]
    32a6:	e7c9      	b.n	323c <_timer_init+0x5c>
    32a8:	00003181 	.word	0x00003181
    32ac:	0000c778 	.word	0x0000c778
    32b0:	00001fdd 	.word	0x00001fdd
    32b4:	0000c744 	.word	0x0000c744
    32b8:	40003800 	.word	0x40003800
    32bc:	20007050 	.word	0x20007050
    32c0:	00003159 	.word	0x00003159
    32c4:	000031d1 	.word	0x000031d1

000032c8 <_timer_start>:
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    32c8:	68c3      	ldr	r3, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    32ca:	691a      	ldr	r2, [r3, #16]
    32cc:	0792      	lsls	r2, r2, #30
    32ce:	d1fc      	bne.n	32ca <_timer_start+0x2>
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    32d0:	681a      	ldr	r2, [r3, #0]
    32d2:	f042 0202 	orr.w	r2, r2, #2
    32d6:	601a      	str	r2, [r3, #0]
    32d8:	4770      	bx	lr

000032da <_timer_is_started>:
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    32da:	68c3      	ldr	r3, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    32dc:	691a      	ldr	r2, [r3, #16]
    32de:	0792      	lsls	r2, r2, #30
    32e0:	d1fc      	bne.n	32dc <_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    32e2:	6818      	ldr	r0, [r3, #0]
}
    32e4:	f3c0 0040 	ubfx	r0, r0, #1, #1
    32e8:	4770      	bx	lr

000032ea <_tc_get_timer>:
}
    32ea:	2000      	movs	r0, #0
    32ec:	4770      	bx	lr
	...

000032f0 <_timer_set_irq>:
{
    32f0:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    32f2:	4b0a      	ldr	r3, [pc, #40]	; (331c <_timer_set_irq+0x2c>)
    32f4:	68c0      	ldr	r0, [r0, #12]
    32f6:	4798      	blx	r3
	ASSERT(ARRAY_SIZE(_tcs));
    32f8:	f240 1213 	movw	r2, #275	; 0x113
	int8_t      i  = get_tc_index(hw);
    32fc:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    32fe:	4b08      	ldr	r3, [pc, #32]	; (3320 <_timer_set_irq+0x30>)
    3300:	4908      	ldr	r1, [pc, #32]	; (3324 <_timer_set_irq+0x34>)
    3302:	2001      	movs	r0, #1
    3304:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    3306:	4b08      	ldr	r3, [pc, #32]	; (3328 <_timer_set_irq+0x38>)
    3308:	2214      	movs	r2, #20
    330a:	fb02 3404 	mla	r4, r2, r4, r3
    330e:	4b07      	ldr	r3, [pc, #28]	; (332c <_timer_set_irq+0x3c>)
    3310:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
}
    3314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_irq_set(_tcs[i].irq);
    3318:	4718      	bx	r3
    331a:	bf00      	nop
    331c:	00003181 	.word	0x00003181
    3320:	00001fdd 	.word	0x00001fdd
    3324:	0000c778 	.word	0x0000c778
    3328:	0000c744 	.word	0x0000c744
    332c:	00002325 	.word	0x00002325

00003330 <TC0_Handler>:
	tc_interrupt_handler(_tc0_dev);
    3330:	4b05      	ldr	r3, [pc, #20]	; (3348 <TC0_Handler+0x18>)
    3332:	6818      	ldr	r0, [r3, #0]
	void *const hw = device->hw;
    3334:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT8.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    3336:	7a9a      	ldrb	r2, [r3, #10]
	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    3338:	07d2      	lsls	r2, r2, #31
    333a:	d503      	bpl.n	3344 <TC0_Handler+0x14>
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    333c:	2201      	movs	r2, #1
    333e:	729a      	strb	r2, [r3, #10]
		device->timer_cb.period_expired(device);
    3340:	6803      	ldr	r3, [r0, #0]
    3342:	4718      	bx	r3
    3344:	4770      	bx	lr
    3346:	bf00      	nop
    3348:	20007050 	.word	0x20007050

0000334c <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    334c:	2000      	movs	r0, #0
    334e:	4770      	bx	lr

00003350 <_usb_d_dev_wait_dfll_rdy>:
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    3350:	4b07      	ldr	r3, [pc, #28]	; (3370 <_usb_d_dev_wait_dfll_rdy+0x20>)
    3352:	f893 2020 	ldrb.w	r2, [r3, #32]
/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    3356:	07d1      	lsls	r1, r2, #31
    3358:	d506      	bpl.n	3368 <_usb_d_dev_wait_dfll_rdy+0x18>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    335a:	691a      	ldr	r2, [r3, #16]
	tmp &= mask;
    335c:	f402 6210 	and.w	r2, r2, #2304	; 0x900
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    3360:	f5b2 6f10 	cmp.w	r2, #2304	; 0x900
    3364:	d1f9      	bne.n	335a <_usb_d_dev_wait_dfll_rdy+0xa>
    3366:	4770      	bx	lr
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    3368:	691a      	ldr	r2, [r3, #16]
		       != (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    336a:	05d2      	lsls	r2, r2, #23
    336c:	d5fc      	bpl.n	3368 <_usb_d_dev_wait_dfll_rdy+0x18>
    336e:	4770      	bx	lr
    3370:	40001000 	.word	0x40001000

00003374 <_usb_d_dev_ept>:
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3374:	b110      	cbz	r0, 337c <_usb_d_dev_ept+0x8>
    3376:	b109      	cbz	r1, 337c <_usb_d_dev_ept+0x8>
    3378:	3002      	adds	r0, #2
    337a:	b2c0      	uxtb	r0, r0
	return &dev_inst.ep[ep_index];
    337c:	2314      	movs	r3, #20
    337e:	fb00 3003 	mla	r0, r0, r3, r3
}
    3382:	4b01      	ldr	r3, [pc, #4]	; (3388 <_usb_d_dev_ept+0x14>)
    3384:	4418      	add	r0, r3
    3386:	4770      	bx	lr
    3388:	20007054 	.word	0x20007054

0000338c <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    338c:	b430      	push	{r4, r5}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    338e:	7cc1      	ldrb	r1, [r0, #19]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    3390:	7c85      	ldrb	r5, [r0, #18]

	if (!is_ctrl) {
    3392:	f001 0307 	and.w	r3, r1, #7
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    3396:	f005 020f 	and.w	r2, r5, #15
	if (!is_ctrl) {
    339a:	2b01      	cmp	r3, #1
    339c:	ea4f 1442 	mov.w	r4, r2, lsl #5
    33a0:	f102 0308 	add.w	r3, r2, #8
    33a4:	d00a      	beq.n	33bc <_usb_d_dev_handle_setup+0x30>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    33a6:	015a      	lsls	r2, r3, #5
    33a8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    33ac:	f104 4382 	add.w	r3, r4, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    33b0:	2110      	movs	r1, #16
    33b2:	71d1      	strb	r1, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    33b4:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
}
    33b8:	bc30      	pop	{r4, r5}
    33ba:	4770      	bx	lr
	if (_usb_d_dev_ep_is_busy(ept)) {
    33bc:	f011 0f40 	tst.w	r1, #64	; 0x40
    33c0:	d00b      	beq.n	33da <_usb_d_dev_handle_setup+0x4e>
    33c2:	0152      	lsls	r2, r2, #5
		ept->flags.bits.is_busy = 0;
    33c4:	f36f 1186 	bfc	r1, #6, #1
    33c8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    33cc:	74c1      	strb	r1, [r0, #19]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    33ce:	2180      	movs	r1, #128	; 0x80
    33d0:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    33d4:	2140      	movs	r1, #64	; 0x40
    33d6:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105
	ept->flags.bits.is_stalled = 0;
    33da:	7cc2      	ldrb	r2, [r0, #19]
    33dc:	f36f 02c3 	bfc	r2, #3, #1
    33e0:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    33e2:	4a0a      	ldr	r2, [pc, #40]	; (340c <_usb_d_dev_handle_setup+0x80>)
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    33e4:	015b      	lsls	r3, r3, #5
    33e6:	1911      	adds	r1, r2, r4
    33e8:	2000      	movs	r0, #0
    33ea:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    33ee:	f881 00d2 	strb.w	r0, [r1, #210]	; 0xd2
    33f2:	f881 00e2 	strb.w	r0, [r1, #226]	; 0xe2
    33f6:	216f      	movs	r1, #111	; 0x6f
    33f8:	71d9      	strb	r1, [r3, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    33fa:	f104 4382 	add.w	r3, r4, #1090519040	; 0x41000000
	dev_inst.ep_callbacks.setup(ept->ep);
    33fe:	4628      	mov	r0, r5
    3400:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
    3404:	6893      	ldr	r3, [r2, #8]
}
    3406:	bc30      	pop	{r4, r5}
	dev_inst.ep_callbacks.setup(ept->ep);
    3408:	4718      	bx	r3
    340a:	bf00      	nop
    340c:	20007054 	.word	0x20007054

00003410 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    3410:	4602      	mov	r2, r0
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3412:	7c80      	ldrb	r0, [r0, #18]
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    3414:	2320      	movs	r3, #32
    3416:	fa03 f101 	lsl.w	r1, r3, r1
    341a:	f000 030f 	and.w	r3, r0, #15
    341e:	015b      	lsls	r3, r3, #5
    3420:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    3424:	b2c9      	uxtb	r1, r1
    3426:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    342a:	4b02      	ldr	r3, [pc, #8]	; (3434 <_usb_d_dev_handle_stall+0x24>)
    342c:	6892      	ldr	r2, [r2, #8]
    342e:	691b      	ldr	r3, [r3, #16]
    3430:	2101      	movs	r1, #1
    3432:	4718      	bx	r3
    3434:	20007054 	.word	0x20007054

00003438 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    3438:	4602      	mov	r2, r0
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    343a:	7c80      	ldrb	r0, [r0, #18]
    343c:	28ff      	cmp	r0, #255	; 0xff
    343e:	d00a      	beq.n	3456 <_usb_d_dev_trans_done+0x1e>
    3440:	7cd3      	ldrb	r3, [r2, #19]
    3442:	f013 0f40 	tst.w	r3, #64	; 0x40
    3446:	d006      	beq.n	3456 <_usb_d_dev_trans_done+0x1e>
		return;
	}
	ept->flags.bits.is_busy = 0;
    3448:	f36f 1386 	bfc	r3, #6, #1
    344c:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    344e:	4b02      	ldr	r3, [pc, #8]	; (3458 <_usb_d_dev_trans_done+0x20>)
    3450:	6892      	ldr	r2, [r2, #8]
    3452:	691b      	ldr	r3, [r3, #16]
    3454:	4718      	bx	r3
    3456:	4770      	bx	lr
    3458:	20007054 	.word	0x20007054

0000345c <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    345c:	b477      	push	{r0, r1, r2, r4, r5, r6}
	uint8_t epn = USB_EP_GET_N(ept->ep);
    345e:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    3460:	2425      	movs	r4, #37	; 0x25
    3462:	f88d 4004 	strb.w	r4, [sp, #4]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    3466:	2bff      	cmp	r3, #255	; 0xff
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    3468:	f04f 044a 	mov.w	r4, #74	; 0x4a
    346c:	f88d 4005 	strb.w	r4, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    3470:	d021      	beq.n	34b6 <_usb_d_dev_trans_stop+0x5a>
    3472:	7cc4      	ldrb	r4, [r0, #19]
    3474:	0664      	lsls	r4, r4, #25
    3476:	d51e      	bpl.n	34b6 <_usb_d_dev_trans_stop+0x5a>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3478:	f003 030f 	and.w	r3, r3, #15
    347c:	f103 0408 	add.w	r4, r3, #8
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3480:	0165      	lsls	r5, r4, #5
    3482:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
		return;
	}
	/* Stop transfer */
	if (dir) {
    3486:	b199      	cbz	r1, 34b0 <_usb_d_dev_trans_stop+0x54>
    3488:	2680      	movs	r6, #128	; 0x80
    348a:	712e      	strb	r6, [r5, #4]
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    348c:	ad02      	add	r5, sp, #8
    348e:	440d      	add	r5, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3490:	0164      	lsls	r4, r4, #5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    3492:	015b      	lsls	r3, r3, #5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3494:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    3498:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    349c:	f815 1c04 	ldrb.w	r1, [r5, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    34a0:	71e1      	strb	r1, [r4, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    34a2:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    34a6:	4b05      	ldr	r3, [pc, #20]	; (34bc <_usb_d_dev_trans_stop+0x60>)
    34a8:	4611      	mov	r1, r2
}
    34aa:	b003      	add	sp, #12
    34ac:	bc70      	pop	{r4, r5, r6}
	_usb_d_dev_trans_done(ept, code);
    34ae:	4718      	bx	r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    34b0:	2640      	movs	r6, #64	; 0x40
    34b2:	716e      	strb	r6, [r5, #5]
    34b4:	e7ea      	b.n	348c <_usb_d_dev_trans_stop+0x30>
}
    34b6:	b003      	add	sp, #12
    34b8:	bc70      	pop	{r4, r5, r6}
    34ba:	4770      	bx	lr
    34bc:	00003439 	.word	0x00003439

000034c0 <_usb_d_dev_handle_trfail>:
{
    34c0:	b4f3      	push	{r0, r1, r4, r5, r6, r7}
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    34c2:	7c86      	ldrb	r6, [r0, #18]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    34c4:	2304      	movs	r3, #4
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    34c6:	f006 060f 	and.w	r6, r6, #15
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    34ca:	f88d 3004 	strb.w	r3, [sp, #4]
    34ce:	2308      	movs	r3, #8
    34d0:	f88d 3005 	strb.w	r3, [sp, #5]
    34d4:	18f3      	adds	r3, r6, r3

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    34d6:	015a      	lsls	r2, r3, #5
    34d8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    34dc:	0175      	lsls	r5, r6, #5
    34de:	7812      	ldrb	r2, [r2, #0]
	uint8_t            eptype
    34e0:	b339      	cbz	r1, 3532 <_usb_d_dev_handle_trfail+0x72>
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    34e2:	f3c2 1202 	ubfx	r2, r2, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
    34e6:	4c2e      	ldr	r4, [pc, #184]	; (35a0 <_usb_d_dev_handle_trfail+0xe0>)
    34e8:	eb05 1501 	add.w	r5, r5, r1, lsl #4
    34ec:	4425      	add	r5, r4
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    34ee:	2a02      	cmp	r2, #2
	st.reg = bank[bank_n].STATUS_BK.reg;
    34f0:	7aac      	ldrb	r4, [r5, #10]
    34f2:	aa02      	add	r2, sp, #8
    34f4:	eb02 0701 	add.w	r7, r2, r1
    34f8:	b2e4      	uxtb	r4, r4
    34fa:	ea4f 1246 	mov.w	r2, r6, lsl #5
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    34fe:	d11b      	bne.n	3538 <_usb_d_dev_handle_trfail+0x78>
    3500:	f014 0f01 	tst.w	r4, #1
    3504:	d018      	beq.n	3538 <_usb_d_dev_handle_trfail+0x78>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    3506:	7aac      	ldrb	r4, [r5, #10]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3508:	015b      	lsls	r3, r3, #5
    350a:	f36f 0400 	bfc	r4, #0, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    350e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3512:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    3516:	72ac      	strb	r4, [r5, #10]
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    3518:	3100      	adds	r1, #0
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    351a:	f817 4c04 	ldrb.w	r4, [r7, #-4]
    351e:	71dc      	strb	r4, [r3, #7]
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    3520:	bf18      	it	ne
    3522:	2101      	movne	r1, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    3524:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
    3528:	2204      	movs	r2, #4
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    352a:	4b1e      	ldr	r3, [pc, #120]	; (35a4 <_usb_d_dev_handle_trfail+0xe4>)
}
    352c:	b002      	add	sp, #8
    352e:	bcf0      	pop	{r4, r5, r6, r7}
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    3530:	4718      	bx	r3
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    3532:	f002 0207 	and.w	r2, r2, #7
    3536:	e7d6      	b.n	34e6 <_usb_d_dev_handle_trfail+0x26>
	} else if (st.bit.ERRORFLOW) {
    3538:	f014 0402 	ands.w	r4, r4, #2
    353c:	d01b      	beq.n	3576 <_usb_d_dev_handle_trfail+0xb6>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    353e:	7aac      	ldrb	r4, [r5, #10]
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    3540:	7cc6      	ldrb	r6, [r0, #19]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3542:	015b      	lsls	r3, r3, #5
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    3544:	f36f 0441 	bfc	r4, #1, #1
    3548:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    354c:	72ac      	strb	r4, [r5, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    354e:	f817 4c04 	ldrb.w	r4, [r7, #-4]
    3552:	71dc      	strb	r4, [r3, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    3554:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    3558:	f006 0307 	and.w	r3, r6, #7
    355c:	2b01      	cmp	r3, #1
    355e:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
    3562:	d119      	bne.n	3598 <_usb_d_dev_handle_trfail+0xd8>
    3564:	0673      	lsls	r3, r6, #25
    3566:	d517      	bpl.n	3598 <_usb_d_dev_handle_trfail+0xd8>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    3568:	7cc3      	ldrb	r3, [r0, #19]
    356a:	09db      	lsrs	r3, r3, #7
    356c:	4299      	cmp	r1, r3
    356e:	d013      	beq.n	3598 <_usb_d_dev_handle_trfail+0xd8>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    3570:	2200      	movs	r2, #0
    3572:	4619      	mov	r1, r3
    3574:	e7d9      	b.n	352a <_usb_d_dev_handle_trfail+0x6a>
	bank->STATUS_BK.reg     = 0;
    3576:	480c      	ldr	r0, [pc, #48]	; (35a8 <_usb_d_dev_handle_trfail+0xe8>)
    3578:	eb01 0146 	add.w	r1, r1, r6, lsl #1
    357c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3580:	015b      	lsls	r3, r3, #5
    3582:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    3586:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    358a:	f881 40d2 	strb.w	r4, [r1, #210]	; 0xd2
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    358e:	f817 1c04 	ldrb.w	r1, [r7, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3592:	71d9      	strb	r1, [r3, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    3594:	f882 1108 	strb.w	r1, [r2, #264]	; 0x108
}
    3598:	b002      	add	sp, #8
    359a:	bcf0      	pop	{r4, r5, r6, r7}
    359c:	4770      	bx	lr
    359e:	bf00      	nop
    35a0:	2000711c 	.word	0x2000711c
    35a4:	0000345d 	.word	0x0000345d
    35a8:	20007054 	.word	0x20007054

000035ac <_usb_d_dev_reset_epts>:
{
    35ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    35b0:	4c09      	ldr	r4, [pc, #36]	; (35d8 <_usb_d_dev_reset_epts+0x2c>)
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    35b2:	4f0a      	ldr	r7, [pc, #40]	; (35dc <_usb_d_dev_reset_epts+0x30>)
    35b4:	f104 05b4 	add.w	r5, r4, #180	; 0xb4
		dev_inst.ep[i].ep       = 0xFF;
    35b8:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    35ba:	2103      	movs	r1, #3
    35bc:	4620      	mov	r0, r4
    35be:	47b8      	blx	r7
		dev_inst.ep[i].flags.u8 = 0;
    35c0:	2100      	movs	r1, #0
		dev_inst.ep[i].ep       = 0xFF;
    35c2:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    35c4:	74e1      	strb	r1, [r4, #19]
    35c6:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    35c8:	42ac      	cmp	r4, r5
    35ca:	d1f6      	bne.n	35ba <_usb_d_dev_reset_epts+0xe>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    35cc:	2260      	movs	r2, #96	; 0x60
    35ce:	4804      	ldr	r0, [pc, #16]	; (35e0 <_usb_d_dev_reset_epts+0x34>)
    35d0:	4b04      	ldr	r3, [pc, #16]	; (35e4 <_usb_d_dev_reset_epts+0x38>)
}
    35d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    35d6:	4718      	bx	r3
    35d8:	20007068 	.word	0x20007068
    35dc:	00003439 	.word	0x00003439
    35e0:	2000711c 	.word	0x2000711c
    35e4:	0000b345 	.word	0x0000b345

000035e8 <_usb_d_dev_in_next>:
{
    35e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    35ec:	4604      	mov	r4, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    35ee:	7c80      	ldrb	r0, [r0, #18]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    35f0:	4689      	mov	r9, r1
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    35f2:	f000 080f 	and.w	r8, r0, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    35f6:	2900      	cmp	r1, #0
    35f8:	d05a      	beq.n	36b0 <_usb_d_dev_in_next+0xc8>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    35fa:	4b4c      	ldr	r3, [pc, #304]	; (372c <_usb_d_dev_in_next+0x144>)
    35fc:	eb03 1348 	add.w	r3, r3, r8, lsl #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    3600:	695e      	ldr	r6, [r3, #20]
    3602:	f3c6 060d 	ubfx	r6, r6, #0, #14
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    3606:	f8b4 e010 	ldrh.w	lr, [r4, #16]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    360a:	f894 c013 	ldrb.w	ip, [r4, #19]
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    360e:	f240 33ff 	movw	r3, #1023	; 0x3ff
    3612:	459e      	cmp	lr, r3
    3614:	bf1a      	itte	ne
    3616:	f10e 32ff 	addne.w	r2, lr, #4294967295
    361a:	b292      	uxthne	r2, r2
    361c:	4672      	moveq	r2, lr
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    361e:	f00c 0a07 	and.w	sl, ip, #7
	if (isr) {
    3622:	f1b9 0f00 	cmp.w	r9, #0
    3626:	d006      	beq.n	3636 <_usb_d_dev_in_next+0x4e>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3628:	ea4f 1348 	mov.w	r3, r8, lsl #5
    362c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    3630:	2102      	movs	r1, #2
    3632:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	ept->trans_count += trans_count;
    3636:	68a1      	ldr	r1, [r4, #8]
	if (ept->trans_count < ept->trans_size) {
    3638:	6863      	ldr	r3, [r4, #4]
	ept->trans_count += trans_count;
    363a:	4431      	add	r1, r6
	if (ept->trans_count < ept->trans_size) {
    363c:	4299      	cmp	r1, r3
	ept->trans_count += trans_count;
    363e:	60a1      	str	r1, [r4, #8]
    3640:	ea4f 1548 	mov.w	r5, r8, lsl #5
	if (ept->trans_count < ept->trans_size) {
    3644:	d240      	bcs.n	36c8 <_usb_d_dev_in_next+0xe0>
		trans_next = ept->trans_size - ept->trans_count;
    3646:	1a5b      	subs	r3, r3, r1
		if (ept->flags.bits.use_cache) {
    3648:	f01c 0f20 	tst.w	ip, #32
		trans_next = ept->trans_size - ept->trans_count;
    364c:	b29f      	uxth	r7, r3
    364e:	4e38      	ldr	r6, [pc, #224]	; (3730 <_usb_d_dev_in_next+0x148>)
    3650:	6823      	ldr	r3, [r4, #0]
		if (ept->flags.bits.use_cache) {
    3652:	d02f      	beq.n	36b4 <_usb_d_dev_in_next+0xcc>
    3654:	4577      	cmp	r7, lr
    3656:	bf28      	it	cs
    3658:	4677      	movcs	r7, lr
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    365a:	463a      	mov	r2, r7
    365c:	4419      	add	r1, r3
    365e:	68e0      	ldr	r0, [r4, #12]
    3660:	4b34      	ldr	r3, [pc, #208]	; (3734 <_usb_d_dev_in_next+0x14c>)
    3662:	4798      	blx	r3
	bank->ADDR.reg          = addr;
    3664:	1973      	adds	r3, r6, r5
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    3666:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    3668:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    366c:	1972      	adds	r2, r6, r5
    366e:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
    3672:	f367 030d 	bfi	r3, r7, #0, #14
    3676:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    367a:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
    367e:	f36f 339b 	bfc	r3, #14, #14
    3682:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
	if (!isr) {
    3686:	f1b9 0f00 	cmp.w	r9, #0
    368a:	d108      	bne.n	369e <_usb_d_dev_in_next+0xb6>
			inten = USB_D_BANK1_INT_FLAGS;
    368c:	f1ba 0f01 	cmp.w	sl, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    3690:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    3694:	bf0c      	ite	eq
    3696:	234e      	moveq	r3, #78	; 0x4e
    3698:	234a      	movne	r3, #74	; 0x4a
    369a:	f885 3109 	strb.w	r3, [r5, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    369e:	ea4f 1348 	mov.w	r3, r8, lsl #5
    36a2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    36a6:	2280      	movs	r2, #128	; 0x80
    36a8:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
    36ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    36b0:	460e      	mov	r6, r1
    36b2:	e7a8      	b.n	3606 <_usb_d_dev_in_next+0x1e>
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    36b4:	4419      	add	r1, r3
	bank->ADDR.reg          = addr;
    36b6:	1973      	adds	r3, r6, r5
    36b8:	f5b7 5f00 	cmp.w	r7, #8192	; 0x2000
    36bc:	bf28      	it	cs
    36be:	f44f 5700 	movcs.w	r7, #8192	; 0x2000
    36c2:	f8c3 10d8 	str.w	r1, [r3, #216]	; 0xd8
    36c6:	e7d1      	b.n	366c <_usb_d_dev_in_next+0x84>
	} else if (ept->flags.bits.need_zlp) {
    36c8:	f01c 0f10 	tst.w	ip, #16
    36cc:	d00e      	beq.n	36ec <_usb_d_dev_in_next+0x104>
		ept->flags.bits.need_zlp = 0;
    36ce:	7ce3      	ldrb	r3, [r4, #19]
    36d0:	f36f 1304 	bfc	r3, #4, #1
    36d4:	74e3      	strb	r3, [r4, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    36d6:	4b18      	ldr	r3, [pc, #96]	; (3738 <_usb_d_dev_in_next+0x150>)
    36d8:	442b      	add	r3, r5
    36da:	685a      	ldr	r2, [r3, #4]
    36dc:	f36f 020d 	bfc	r2, #0, #14
    36e0:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    36e2:	685a      	ldr	r2, [r3, #4]
    36e4:	f36f 329b 	bfc	r2, #14, #14
    36e8:	605a      	str	r2, [r3, #4]
    36ea:	e7cc      	b.n	3686 <_usb_d_dev_in_next+0x9e>
	if (is_ctrl) {
    36ec:	f1ba 0f01 	cmp.w	sl, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    36f0:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
	if (last_pkt == ept->size) {
    36f4:	ea02 0206 	and.w	r2, r2, r6
    36f8:	bf0c      	ite	eq
    36fa:	234b      	moveq	r3, #75	; 0x4b
    36fc:	234a      	movne	r3, #74	; 0x4a
    36fe:	4596      	cmp	lr, r2
    3700:	f885 3108 	strb.w	r3, [r5, #264]	; 0x108
    3704:	d10c      	bne.n	3720 <_usb_d_dev_in_next+0x138>
		ept->flags.bits.is_busy = 0;
    3706:	7ce3      	ldrb	r3, [r4, #19]
    3708:	f36f 1386 	bfc	r3, #6, #1
    370c:	74e3      	strb	r3, [r4, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    370e:	4b08      	ldr	r3, [pc, #32]	; (3730 <_usb_d_dev_in_next+0x148>)
    3710:	68db      	ldr	r3, [r3, #12]
    3712:	4798      	blx	r3
    3714:	2800      	cmp	r0, #0
    3716:	d1c9      	bne.n	36ac <_usb_d_dev_in_next+0xc4>
		ept->flags.bits.is_busy = 1;
    3718:	7ce3      	ldrb	r3, [r4, #19]
    371a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    371e:	74e3      	strb	r3, [r4, #19]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    3720:	4620      	mov	r0, r4
    3722:	2100      	movs	r1, #0
    3724:	4b05      	ldr	r3, [pc, #20]	; (373c <_usb_d_dev_in_next+0x154>)
}
    3726:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    372a:	4718      	bx	r3
    372c:	2000711c 	.word	0x2000711c
    3730:	20007054 	.word	0x20007054
    3734:	0000b2fb 	.word	0x0000b2fb
    3738:	2000712c 	.word	0x2000712c
    373c:	00003439 	.word	0x00003439

00003740 <_usb_d_dev_out_next>:
{
    3740:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    3744:	7c86      	ldrb	r6, [r0, #18]
    3746:	f006 060f 	and.w	r6, r6, #15
{
    374a:	4604      	mov	r4, r0
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    374c:	460f      	mov	r7, r1
    374e:	0175      	lsls	r5, r6, #5
    3750:	2900      	cmp	r1, #0
    3752:	d062      	beq.n	381a <_usb_d_dev_out_next+0xda>
    3754:	4b61      	ldr	r3, [pc, #388]	; (38dc <_usb_d_dev_out_next+0x19c>)
    3756:	442b      	add	r3, r5
    3758:	685a      	ldr	r2, [r3, #4]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    375a:	685b      	ldr	r3, [r3, #4]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    375c:	f3c2 398d 	ubfx	r9, r2, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    3760:	f3c3 0a0d 	ubfx	sl, r3, #0, #14
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    3764:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    3768:	7ce2      	ldrb	r2, [r4, #19]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    376a:	f240 33ff 	movw	r3, #1023	; 0x3ff
    376e:	4598      	cmp	r8, r3
    3770:	bf1c      	itt	ne
    3772:	f108 38ff 	addne.w	r8, r8, #4294967295
    3776:	fa1f f888 	uxthne.w	r8, r8
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    377a:	f002 0307 	and.w	r3, r2, #7
	uint16_t           last_pkt   = last_trans & size_mask;
    377e:	ea0a 0b08 	and.w	fp, sl, r8
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    3782:	9301      	str	r3, [sp, #4]
	if (isr) {
    3784:	b12f      	cbz	r7, 3792 <_usb_d_dev_out_next+0x52>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3786:	0173      	lsls	r3, r6, #5
    3788:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    378c:	2101      	movs	r1, #1
    378e:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
    3792:	0690      	lsls	r0, r2, #26
    3794:	d50c      	bpl.n	37b0 <_usb_d_dev_out_next+0x70>
    3796:	6862      	ldr	r2, [r4, #4]
    3798:	b152      	cbz	r2, 37b0 <_usb_d_dev_out_next+0x70>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    379a:	68a0      	ldr	r0, [r4, #8]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    379c:	6823      	ldr	r3, [r4, #0]
    379e:	68e1      	ldr	r1, [r4, #12]
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    37a0:	1a12      	subs	r2, r2, r0
    37a2:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    37a4:	455a      	cmp	r2, fp
    37a6:	4418      	add	r0, r3
    37a8:	bf28      	it	cs
    37aa:	465a      	movcs	r2, fp
    37ac:	4b4c      	ldr	r3, [pc, #304]	; (38e0 <_usb_d_dev_out_next+0x1a0>)
    37ae:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    37b0:	6862      	ldr	r2, [r4, #4]
    37b2:	2a00      	cmp	r2, #0
    37b4:	d134      	bne.n	3820 <_usb_d_dev_out_next+0xe0>
    37b6:	7ce3      	ldrb	r3, [r4, #19]
    37b8:	06d9      	lsls	r1, r3, #27
    37ba:	f140 8089 	bpl.w	38d0 <_usb_d_dev_out_next+0x190>
		ept->flags.bits.need_zlp  = 0;
    37be:	f362 1304 	bfi	r3, r2, #4, #1
	bank->ADDR.reg          = addr;
    37c2:	4848      	ldr	r0, [pc, #288]	; (38e4 <_usb_d_dev_out_next+0x1a4>)
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    37c4:	68e1      	ldr	r1, [r4, #12]
		ept->flags.bits.use_cache = 1;
    37c6:	b2db      	uxtb	r3, r3
	bank->ADDR.reg          = addr;
    37c8:	4428      	add	r0, r5
		ept->flags.bits.use_cache = 1;
    37ca:	f043 0320 	orr.w	r3, r3, #32
    37ce:	74e3      	strb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
    37d0:	f100 03c8 	add.w	r3, r0, #200	; 0xc8
    37d4:	f8c0 10c8 	str.w	r1, [r0, #200]	; 0xc8
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    37d8:	6859      	ldr	r1, [r3, #4]
    37da:	8a20      	ldrh	r0, [r4, #16]
    37dc:	f360 319b 	bfi	r1, r0, #14, #14
    37e0:	6059      	str	r1, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    37e2:	6859      	ldr	r1, [r3, #4]
    37e4:	f362 010d 	bfi	r1, r2, #0, #14
    37e8:	6059      	str	r1, [r3, #4]
	if (!isr) {
    37ea:	b96f      	cbnz	r7, 3808 <_usb_d_dev_out_next+0xc8>
		if (is_ctrl) {
    37ec:	9b01      	ldr	r3, [sp, #4]
    37ee:	2b01      	cmp	r3, #1
	bank->STATUS_BK.reg     = 0;
    37f0:	bf04      	itt	eq
    37f2:	4b3c      	ldreq	r3, [pc, #240]	; (38e4 <_usb_d_dev_out_next+0x1a4>)
    37f4:	195b      	addeq	r3, r3, r5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    37f6:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    37fa:	bf0a      	itet	eq
    37fc:	f883 70e2 	strbeq.w	r7, [r3, #226]	; 0xe2
			inten = USB_D_BANK0_INT_FLAGS;
    3800:	2325      	movne	r3, #37	; 0x25
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    3802:	232d      	moveq	r3, #45	; 0x2d
    3804:	f885 3109 	strb.w	r3, [r5, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3808:	0176      	lsls	r6, r6, #5
    380a:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
    380e:	2340      	movs	r3, #64	; 0x40
    3810:	f886 3104 	strb.w	r3, [r6, #260]	; 0x104
}
    3814:	b003      	add	sp, #12
    3816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    381a:	4689      	mov	r9, r1
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    381c:	468a      	mov	sl, r1
    381e:	e7a1      	b.n	3764 <_usb_d_dev_out_next+0x24>
	} else if (isr && last_pkt < ept->size) {
    3820:	b1f7      	cbz	r7, 3860 <_usb_d_dev_out_next+0x120>
    3822:	8a23      	ldrh	r3, [r4, #16]
    3824:	455b      	cmp	r3, fp
    3826:	d91b      	bls.n	3860 <_usb_d_dev_out_next+0x120>
		ept->flags.bits.need_zlp = 0;
    3828:	7ce3      	ldrb	r3, [r4, #19]
    382a:	f36f 1304 	bfc	r3, #4, #1
    382e:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    3830:	68a3      	ldr	r3, [r4, #8]
    3832:	4453      	add	r3, sl
		ept->trans_count += trans_size;
    3834:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    3836:	9b01      	ldr	r3, [sp, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    3838:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    383c:	2b01      	cmp	r3, #1
    383e:	bf0c      	ite	eq
    3840:	232d      	moveq	r3, #45	; 0x2d
    3842:	2325      	movne	r3, #37	; 0x25
    3844:	f885 3108 	strb.w	r3, [r5, #264]	; 0x108
	if (0 == epn) {
    3848:	b91e      	cbnz	r6, 3852 <_usb_d_dev_out_next+0x112>
	bank->ADDR.reg          = addr;
    384a:	4b26      	ldr	r3, [pc, #152]	; (38e4 <_usb_d_dev_out_next+0x1a4>)
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    384c:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    384e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    3852:	4b25      	ldr	r3, [pc, #148]	; (38e8 <_usb_d_dev_out_next+0x1a8>)
    3854:	2100      	movs	r1, #0
    3856:	4620      	mov	r0, r4
}
    3858:	b003      	add	sp, #12
    385a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    385e:	4718      	bx	r3
		ept->trans_count += trans_size;
    3860:	68a1      	ldr	r1, [r4, #8]
    3862:	4449      	add	r1, r9
		if (ept->trans_count < ept->trans_size) {
    3864:	428a      	cmp	r2, r1
		ept->trans_count += trans_size;
    3866:	60a1      	str	r1, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    3868:	d9e5      	bls.n	3836 <_usb_d_dev_out_next+0xf6>
			if (ept->flags.bits.use_cache) {
    386a:	7ce0      	ldrb	r0, [r4, #19]
    386c:	4b1d      	ldr	r3, [pc, #116]	; (38e4 <_usb_d_dev_out_next+0x1a4>)
    386e:	f8b4 e010 	ldrh.w	lr, [r4, #16]
			trans_next = ept->trans_size - ept->trans_count;
    3872:	1a52      	subs	r2, r2, r1
			if (ept->flags.bits.use_cache) {
    3874:	f010 0f20 	tst.w	r0, #32
			trans_next = ept->trans_size - ept->trans_count;
    3878:	b292      	uxth	r2, r2
			if (ept->flags.bits.use_cache) {
    387a:	d014      	beq.n	38a6 <_usb_d_dev_out_next+0x166>
	bank->ADDR.reg          = addr;
    387c:	1959      	adds	r1, r3, r5
    387e:	4572      	cmp	r2, lr
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    3880:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    3882:	f8c1 00c8 	str.w	r0, [r1, #200]	; 0xc8
    3886:	bf28      	it	cs
    3888:	4672      	movcs	r2, lr
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    388a:	442b      	add	r3, r5
    388c:	f8d3 10cc 	ldr.w	r1, [r3, #204]	; 0xcc
    3890:	f362 319b 	bfi	r1, r2, #14, #14
    3894:	f8c3 10cc 	str.w	r1, [r3, #204]	; 0xcc
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    3898:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
    389c:	f36f 020d 	bfc	r2, #0, #14
    38a0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    38a4:	e7a1      	b.n	37ea <_usb_d_dev_out_next+0xaa>
				if (trans_next > ept->size) {
    38a6:	4572      	cmp	r2, lr
    38a8:	d90a      	bls.n	38c0 <_usb_d_dev_out_next+0x180>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    38aa:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    38ae:	d80c      	bhi.n	38ca <_usb_d_dev_out_next+0x18a>
    38b0:	ea22 0208 	bic.w	r2, r2, r8
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    38b4:	6820      	ldr	r0, [r4, #0]
    38b6:	4401      	add	r1, r0
	bank->ADDR.reg          = addr;
    38b8:	1958      	adds	r0, r3, r5
    38ba:	f8c0 10c8 	str.w	r1, [r0, #200]	; 0xc8
    38be:	e7e4      	b.n	388a <_usb_d_dev_out_next+0x14a>
				} else if (trans_next < ept->size) {
    38c0:	d2f8      	bcs.n	38b4 <_usb_d_dev_out_next+0x174>
					ept->flags.bits.use_cache = 1;
    38c2:	f040 0020 	orr.w	r0, r0, #32
    38c6:	74e0      	strb	r0, [r4, #19]
    38c8:	e7f4      	b.n	38b4 <_usb_d_dev_out_next+0x174>
						trans_next = USB_D_DEV_TRANS_MAX;
    38ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    38ce:	e7f1      	b.n	38b4 <_usb_d_dev_out_next+0x174>
	} else if (isr && last_pkt < ept->size) {
    38d0:	2f00      	cmp	r7, #0
    38d2:	d1a6      	bne.n	3822 <_usb_d_dev_out_next+0xe2>
		ept->trans_count += trans_size;
    38d4:	68a3      	ldr	r3, [r4, #8]
    38d6:	444b      	add	r3, r9
    38d8:	e7ac      	b.n	3834 <_usb_d_dev_out_next+0xf4>
    38da:	bf00      	nop
    38dc:	2000711c 	.word	0x2000711c
    38e0:	0000b2fb 	.word	0x0000b2fb
    38e4:	20007054 	.word	0x20007054
    38e8:	00003439 	.word	0x00003439

000038ec <_usb_d_dev_handler>:
{
    38ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    38f0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    38f4:	8c1d      	ldrh	r5, [r3, #32]
    38f6:	b2ad      	uxth	r5, r5
	if (0 == epint) {
    38f8:	2d00      	cmp	r5, #0
    38fa:	d16e      	bne.n	39da <_usb_d_dev_handler+0xee>
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    38fc:	8b99      	ldrh	r1, [r3, #28]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    38fe:	8b1a      	ldrh	r2, [r3, #24]
    3900:	b292      	uxth	r2, r2
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    3902:	400a      	ands	r2, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    3904:	f012 0004 	ands.w	r0, r2, #4
    3908:	d006      	beq.n	3918 <_usb_d_dev_handler+0x2c>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    390a:	2204      	movs	r2, #4
    390c:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    390e:	4b67      	ldr	r3, [pc, #412]	; (3aac <_usb_d_dev_handler+0x1c0>)
}
    3910:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	dev_inst.callbacks.sof();
    3914:	681b      	ldr	r3, [r3, #0]
    3916:	4718      	bx	r3
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    3918:	f412 7100 	ands.w	r1, r2, #512	; 0x200
    391c:	d025      	beq.n	396a <_usb_d_dev_handler+0x7e>
    391e:	f240 2201 	movw	r2, #513	; 0x201
    3922:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    3924:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    3926:	2270      	movs	r2, #112	; 0x70
    3928:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    392a:	4b60      	ldr	r3, [pc, #384]	; (3aac <_usb_d_dev_handler+0x1c0>)
    392c:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
    3930:	f002 020f 	and.w	r2, r2, #15
    3934:	2a03      	cmp	r2, #3
    3936:	d014      	beq.n	3962 <_usb_d_dev_handler+0x76>
    3938:	f8b3 20f0 	ldrh.w	r2, [r3, #240]	; 0xf0
    393c:	f002 020f 	and.w	r2, r2, #15
    3940:	2a03      	cmp	r2, #3
    3942:	d110      	bne.n	3966 <_usb_d_dev_handler+0x7a>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    3944:	2101      	movs	r1, #1
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    3946:	eb03 1041 	add.w	r0, r3, r1, lsl #5
			bank->EXTREG.reg = 0;
    394a:	2200      	movs	r2, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    394c:	f8b0 10d0 	ldrh.w	r1, [r0, #208]	; 0xd0
			bank->EXTREG.reg = 0;
    3950:	f8a0 20d0 	strh.w	r2, [r0, #208]	; 0xd0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    3954:	f3c1 110a 	ubfx	r1, r1, #4, #11
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    3958:	685b      	ldr	r3, [r3, #4]
    395a:	2003      	movs	r0, #3
}
    395c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    3960:	4718      	bx	r3
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    3962:	4601      	mov	r1, r0
    3964:	e7ef      	b.n	3946 <_usb_d_dev_handler+0x5a>
	uint32_t lpm_variable = 0;
    3966:	4601      	mov	r1, r0
    3968:	e7f6      	b.n	3958 <_usb_d_dev_handler+0x6c>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    396a:	f012 0080 	ands.w	r0, r2, #128	; 0x80
    396e:	d005      	beq.n	397c <_usb_d_dev_handler+0x90>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    3970:	2280      	movs	r2, #128	; 0x80
    3972:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    3974:	4b4d      	ldr	r3, [pc, #308]	; (3aac <_usb_d_dev_handler+0x1c0>)
    3976:	2005      	movs	r0, #5
    3978:	685b      	ldr	r3, [r3, #4]
    397a:	e7ef      	b.n	395c <_usb_d_dev_handler+0x70>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    397c:	f012 0470 	ands.w	r4, r2, #112	; 0x70
    3980:	d00c      	beq.n	399c <_usb_d_dev_handler+0xb0>
    3982:	2270      	movs	r2, #112	; 0x70
    3984:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    3986:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    3988:	f240 2201 	movw	r2, #513	; 0x201
    398c:	831a      	strh	r2, [r3, #24]
		_usb_d_dev_wait_dfll_rdy();
    398e:	4b48      	ldr	r3, [pc, #288]	; (3ab0 <_usb_d_dev_handler+0x1c4>)
    3990:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    3992:	4b46      	ldr	r3, [pc, #280]	; (3aac <_usb_d_dev_handler+0x1c0>)
    3994:	4601      	mov	r1, r0
    3996:	685b      	ldr	r3, [r3, #4]
    3998:	2002      	movs	r0, #2
    399a:	e7df      	b.n	395c <_usb_d_dev_handler+0x70>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    399c:	f012 0108 	ands.w	r1, r2, #8
    39a0:	d00f      	beq.n	39c2 <_usb_d_dev_handler+0xd6>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    39a2:	2208      	movs	r2, #8

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    39a4:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    39a8:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    39aa:	2270      	movs	r2, #112	; 0x70
    39ac:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    39ae:	f240 2201 	movw	r2, #513	; 0x201
    39b2:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    39b4:	4b3f      	ldr	r3, [pc, #252]	; (3ab4 <_usb_d_dev_handler+0x1c8>)
    39b6:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    39b8:	4b3c      	ldr	r3, [pc, #240]	; (3aac <_usb_d_dev_handler+0x1c0>)
    39ba:	4621      	mov	r1, r4
    39bc:	685b      	ldr	r3, [r3, #4]
    39be:	2001      	movs	r0, #1
    39c0:	e7cc      	b.n	395c <_usb_d_dev_handler+0x70>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    39c2:	07d0      	lsls	r0, r2, #31
    39c4:	d509      	bpl.n	39da <_usb_d_dev_handler+0xee>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    39c6:	f240 2201 	movw	r2, #513	; 0x201
    39ca:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    39cc:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    39ce:	2270      	movs	r2, #112	; 0x70
    39d0:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    39d2:	4b36      	ldr	r3, [pc, #216]	; (3aac <_usb_d_dev_handler+0x1c0>)
    39d4:	2004      	movs	r0, #4
    39d6:	685b      	ldr	r3, [r3, #4]
    39d8:	e7c0      	b.n	395c <_usb_d_dev_handler+0x70>
    39da:	4c37      	ldr	r4, [pc, #220]	; (3ab8 <_usb_d_dev_handler+0x1cc>)
			_usb_d_dev_handle_setup(ept);
    39dc:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 3acc <_usb_d_dev_handler+0x1e0>
			_usb_d_dev_handle_trfail(ept, 1);
    39e0:	4f36      	ldr	r7, [pc, #216]	; (3abc <_usb_d_dev_handler+0x1d0>)
	uint32_t lpm_variable = 0;
    39e2:	2600      	movs	r6, #0
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    39e4:	f1a4 0914 	sub.w	r9, r4, #20
		if (ept->ep == 0xFF) {
    39e8:	7ca2      	ldrb	r2, [r4, #18]
    39ea:	2aff      	cmp	r2, #255	; 0xff
    39ec:	d029      	beq.n	3a42 <_usb_d_dev_handler+0x156>
	if (!(epint & (1u << epn))) {
    39ee:	f002 020f 	and.w	r2, r2, #15
    39f2:	2101      	movs	r1, #1
    39f4:	fa01 f302 	lsl.w	r3, r1, r2
    39f8:	422b      	tst	r3, r5
    39fa:	d022      	beq.n	3a42 <_usb_d_dev_handler+0x156>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    39fc:	0153      	lsls	r3, r2, #5
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    39fe:	0152      	lsls	r2, r2, #5
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    3a00:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    3a04:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    3a08:	f893 0107 	ldrb.w	r0, [r3, #263]	; 0x107
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    3a0c:	f892 3109 	ldrb.w	r3, [r2, #265]	; 0x109
	if (flags) {
    3a10:	4003      	ands	r3, r0
    3a12:	d016      	beq.n	3a42 <_usb_d_dev_handler+0x156>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    3a14:	2214      	movs	r2, #20
    3a16:	fb02 9206 	mla	r2, r2, r6, r9
    3a1a:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
    3a1e:	f002 0047 	and.w	r0, r2, #71	; 0x47
    3a22:	4288      	cmp	r0, r1
    3a24:	d114      	bne.n	3a50 <_usb_d_dev_handler+0x164>
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    3a26:	06da      	lsls	r2, r3, #27
    3a28:	d502      	bpl.n	3a30 <_usb_d_dev_handler+0x144>
			_usb_d_dev_handle_setup(ept);
    3a2a:	4620      	mov	r0, r4
    3a2c:	47c0      	blx	r8
    3a2e:	e008      	b.n	3a42 <_usb_d_dev_handler+0x156>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    3a30:	f013 0140 	ands.w	r1, r3, #64	; 0x40
    3a34:	d003      	beq.n	3a3e <_usb_d_dev_handler+0x152>
		_usb_d_dev_handle_stall(ept, 1);
    3a36:	4601      	mov	r1, r0
		_usb_d_dev_handle_stall(ept, 0);
    3a38:	4620      	mov	r0, r4
    3a3a:	4b21      	ldr	r3, [pc, #132]	; (3ac0 <_usb_d_dev_handler+0x1d4>)
    3a3c:	e015      	b.n	3a6a <_usb_d_dev_handler+0x17e>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    3a3e:	069b      	lsls	r3, r3, #26
    3a40:	d4fa      	bmi.n	3a38 <_usb_d_dev_handler+0x14c>
    3a42:	3601      	adds	r6, #1
	for (i = 0; i < USB_D_N_EP; i++) {
    3a44:	2e09      	cmp	r6, #9
    3a46:	f104 0414 	add.w	r4, r4, #20
    3a4a:	d1cd      	bne.n	39e8 <_usb_d_dev_handler+0xfc>
}
    3a4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (_usb_d_dev_ep_is_in(ept)) {
    3a50:	0610      	lsls	r0, r2, #24
    3a52:	d514      	bpl.n	3a7e <_usb_d_dev_handler+0x192>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    3a54:	0658      	lsls	r0, r3, #25
    3a56:	d4ef      	bmi.n	3a38 <_usb_d_dev_handler+0x14c>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    3a58:	0718      	lsls	r0, r3, #28
    3a5a:	d502      	bpl.n	3a62 <_usb_d_dev_handler+0x176>
			_usb_d_dev_handle_trfail(ept, 1);
    3a5c:	4620      	mov	r0, r4
    3a5e:	47b8      	blx	r7
    3a60:	e7ef      	b.n	3a42 <_usb_d_dev_handler+0x156>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    3a62:	0798      	lsls	r0, r3, #30
    3a64:	d503      	bpl.n	3a6e <_usb_d_dev_handler+0x182>
		_usb_d_dev_in_next(ept, true);
    3a66:	4b17      	ldr	r3, [pc, #92]	; (3ac4 <_usb_d_dev_handler+0x1d8>)
    3a68:	4620      	mov	r0, r4
		_usb_d_dev_out_next(ept, true);
    3a6a:	4798      	blx	r3
    3a6c:	e7e9      	b.n	3a42 <_usb_d_dev_handler+0x156>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    3a6e:	f002 0207 	and.w	r2, r2, #7
    3a72:	2a01      	cmp	r2, #1
    3a74:	d1e5      	bne.n	3a42 <_usb_d_dev_handler+0x156>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    3a76:	075a      	lsls	r2, r3, #29
    3a78:	d515      	bpl.n	3aa6 <_usb_d_dev_handler+0x1ba>
			_usb_d_dev_handle_trfail(ept, 0);
    3a7a:	2100      	movs	r1, #0
    3a7c:	e7ee      	b.n	3a5c <_usb_d_dev_handler+0x170>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    3a7e:	f013 0020 	ands.w	r0, r3, #32
    3a82:	d001      	beq.n	3a88 <_usb_d_dev_handler+0x19c>
		_usb_d_dev_handle_stall(ept, 0);
    3a84:	2100      	movs	r1, #0
    3a86:	e7d7      	b.n	3a38 <_usb_d_dev_handler+0x14c>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    3a88:	0758      	lsls	r0, r3, #29
    3a8a:	d4f6      	bmi.n	3a7a <_usb_d_dev_handler+0x18e>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    3a8c:	07d8      	lsls	r0, r3, #31
    3a8e:	d502      	bpl.n	3a96 <_usb_d_dev_handler+0x1aa>
		_usb_d_dev_out_next(ept, true);
    3a90:	4620      	mov	r0, r4
    3a92:	4b0d      	ldr	r3, [pc, #52]	; (3ac8 <_usb_d_dev_handler+0x1dc>)
    3a94:	e7e9      	b.n	3a6a <_usb_d_dev_handler+0x17e>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    3a96:	f002 0207 	and.w	r2, r2, #7
    3a9a:	2a01      	cmp	r2, #1
    3a9c:	d1d1      	bne.n	3a42 <_usb_d_dev_handler+0x156>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    3a9e:	071a      	lsls	r2, r3, #28
    3aa0:	d501      	bpl.n	3aa6 <_usb_d_dev_handler+0x1ba>
			_usb_d_dev_handle_trfail(ept, 1);
    3aa2:	2101      	movs	r1, #1
    3aa4:	e7da      	b.n	3a5c <_usb_d_dev_handler+0x170>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    3aa6:	06db      	lsls	r3, r3, #27
    3aa8:	d5cb      	bpl.n	3a42 <_usb_d_dev_handler+0x156>
    3aaa:	e7be      	b.n	3a2a <_usb_d_dev_handler+0x13e>
    3aac:	20007054 	.word	0x20007054
    3ab0:	00003351 	.word	0x00003351
    3ab4:	000035ad 	.word	0x000035ad
    3ab8:	20007068 	.word	0x20007068
    3abc:	000034c1 	.word	0x000034c1
    3ac0:	00003411 	.word	0x00003411
    3ac4:	000035e9 	.word	0x000035e9
    3ac8:	00003741 	.word	0x00003741
    3acc:	0000338d 	.word	0x0000338d

00003ad0 <_usbd_ep_pcksize_size>:
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3ad0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    3ad4:	d80f      	bhi.n	3af6 <_usbd_ep_pcksize_size+0x26>
    3ad6:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    3ada:	d80e      	bhi.n	3afa <_usbd_ep_pcksize_size+0x2a>
    3adc:	2880      	cmp	r0, #128	; 0x80
    3ade:	d80e      	bhi.n	3afe <_usbd_ep_pcksize_size+0x2e>
    3ae0:	2840      	cmp	r0, #64	; 0x40
    3ae2:	d80e      	bhi.n	3b02 <_usbd_ep_pcksize_size+0x32>
    3ae4:	2820      	cmp	r0, #32
    3ae6:	d80e      	bhi.n	3b06 <_usbd_ep_pcksize_size+0x36>
    3ae8:	2810      	cmp	r0, #16
    3aea:	d80e      	bhi.n	3b0a <_usbd_ep_pcksize_size+0x3a>
    3aec:	2808      	cmp	r0, #8
    3aee:	bf94      	ite	ls
    3af0:	2000      	movls	r0, #0
    3af2:	2001      	movhi	r0, #1
    3af4:	4770      	bx	lr
    3af6:	2007      	movs	r0, #7
    3af8:	4770      	bx	lr
    3afa:	2006      	movs	r0, #6
    3afc:	4770      	bx	lr
    3afe:	2005      	movs	r0, #5
    3b00:	4770      	bx	lr
    3b02:	2004      	movs	r0, #4
    3b04:	4770      	bx	lr
    3b06:	2003      	movs	r0, #3
    3b08:	4770      	bx	lr
    3b0a:	2002      	movs	r0, #2
}
    3b0c:	4770      	bx	lr
	...

00003b10 <_usb_d_dev_init>:
{
    3b10:	b508      	push	{r3, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    3b12:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3b16:	789a      	ldrb	r2, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    3b18:	07d1      	lsls	r1, r2, #31
    3b1a:	d406      	bmi.n	3b2a <_usb_d_dev_init+0x1a>
	tmp = ((Usb *)hw)->DEVICE.CTRLA.reg;
    3b1c:	781a      	ldrb	r2, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    3b1e:	0792      	lsls	r2, r2, #30
    3b20:	d43f      	bmi.n	3ba2 <_usb_d_dev_init+0x92>
	((Usb *)hw)->DEVICE.CTRLA.reg = data;
    3b22:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3b26:	2201      	movs	r2, #1
    3b28:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    3b2a:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    3b2e:	7893      	ldrb	r3, [r2, #2]
    3b30:	07db      	lsls	r3, r3, #31
    3b32:	d4fc      	bmi.n	3b2e <_usb_d_dev_init+0x1e>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    3b34:	4b24      	ldr	r3, [pc, #144]	; (3bc8 <_usb_d_dev_init+0xb8>)
    3b36:	4a25      	ldr	r2, [pc, #148]	; (3bcc <_usb_d_dev_init+0xbc>)
    3b38:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    3b3a:	605a      	str	r2, [r3, #4]
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    3b3c:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    3b3e:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    3b40:	611a      	str	r2, [r3, #16]
	_usb_d_dev_reset_epts();
    3b42:	4b23      	ldr	r3, [pc, #140]	; (3bd0 <_usb_d_dev_init+0xc0>)
    3b44:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    3b46:	4b23      	ldr	r3, [pc, #140]	; (3bd4 <_usb_d_dev_init+0xc4>)
    3b48:	6819      	ldr	r1, [r3, #0]
	uint32_t pad_transp
    3b4a:	f3c1 1344 	ubfx	r3, r1, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    3b4e:	f3c1 2282 	ubfx	r2, r1, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
    3b52:	f011 011f 	ands.w	r1, r1, #31
    3b56:	d031      	beq.n	3bbc <_usb_d_dev_init+0xac>
		pad_transn = 9;
    3b58:	291f      	cmp	r1, #31
    3b5a:	bf08      	it	eq
    3b5c:	2109      	moveq	r1, #9
	if (pad_transp == 0 || pad_transp == 0x1F) {
    3b5e:	b37b      	cbz	r3, 3bc0 <_usb_d_dev_init+0xb0>
		pad_transp = 25;
    3b60:	2b1f      	cmp	r3, #31
    3b62:	bf08      	it	eq
    3b64:	2319      	moveq	r3, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
    3b66:	b36a      	cbz	r2, 3bc4 <_usb_d_dev_init+0xb4>
		pad_trim = 6;
    3b68:	2a07      	cmp	r2, #7
    3b6a:	bf08      	it	eq
    3b6c:	2206      	moveq	r2, #6
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    3b6e:	0312      	lsls	r2, r2, #12
    3b70:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    3b74:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    3b78:	4313      	orrs	r3, r2
    3b7a:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    3b7e:	b29b      	uxth	r3, r3
    3b80:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    3b82:	78d3      	ldrb	r3, [r2, #3]
    3b84:	f043 0303 	orr.w	r3, r3, #3
    3b88:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    3b8a:	78d3      	ldrb	r3, [r2, #3]
    3b8c:	f043 030c 	orr.w	r3, r3, #12
    3b90:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->DEVICE.CTRLA.reg = data;
    3b92:	2304      	movs	r3, #4
    3b94:	7013      	strb	r3, [r2, #0]
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    3b96:	4b10      	ldr	r3, [pc, #64]	; (3bd8 <_usb_d_dev_init+0xc8>)
	((Usb *)hw)->DEVICE.DESCADD.reg = data;
    3b98:	6253      	str	r3, [r2, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    3b9a:	2301      	movs	r3, #1
    3b9c:	8113      	strh	r3, [r2, #8]
}
    3b9e:	2000      	movs	r0, #0
    3ba0:	bd08      	pop	{r3, pc}
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    3ba2:	789a      	ldrb	r2, [r3, #2]
    3ba4:	0790      	lsls	r0, r2, #30
    3ba6:	d1fc      	bne.n	3ba2 <_usb_d_dev_init+0x92>
	((Usb *)hw)->DEVICE.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    3ba8:	781a      	ldrb	r2, [r3, #0]
    3baa:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
    3bae:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    3bb0:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    3bb4:	7893      	ldrb	r3, [r2, #2]
    3bb6:	0799      	lsls	r1, r3, #30
    3bb8:	d4fc      	bmi.n	3bb4 <_usb_d_dev_init+0xa4>
    3bba:	e7b2      	b.n	3b22 <_usb_d_dev_init+0x12>
		pad_transn = 9;
    3bbc:	2109      	movs	r1, #9
    3bbe:	e7ce      	b.n	3b5e <_usb_d_dev_init+0x4e>
		pad_transp = 25;
    3bc0:	2319      	movs	r3, #25
    3bc2:	e7d0      	b.n	3b66 <_usb_d_dev_init+0x56>
		pad_trim = 6;
    3bc4:	2206      	movs	r2, #6
    3bc6:	e7d2      	b.n	3b6e <_usb_d_dev_init+0x5e>
    3bc8:	20007054 	.word	0x20007054
    3bcc:	0000334d 	.word	0x0000334d
    3bd0:	000035ad 	.word	0x000035ad
    3bd4:	00800084 	.word	0x00800084
    3bd8:	2000711c 	.word	0x2000711c

00003bdc <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->DEVICE.SYNCBUSY.reg;
    3bdc:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    3be0:	7893      	ldrb	r3, [r2, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    3be2:	0798      	lsls	r0, r3, #30
    3be4:	d11a      	bne.n	3c1c <_usb_d_dev_enable+0x40>
	return ((Usb *)hw)->DEVICE.CTRLA.reg;
    3be6:	7813      	ldrb	r3, [r2, #0]
    3be8:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    3bea:	0799      	lsls	r1, r3, #30
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    3bec:	bf5c      	itt	pl
    3bee:	f043 0302 	orrpl.w	r3, r3, #2
	((Usb *)hw)->DEVICE.CTRLA.reg = data;
    3bf2:	7013      	strbpl	r3, [r2, #0]
    3bf4:	4b0b      	ldr	r3, [pc, #44]	; (3c24 <_usb_d_dev_enable+0x48>)
    3bf6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    3bfa:	609a      	str	r2, [r3, #8]
    3bfc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    3c00:	609a      	str	r2, [r3, #8]
    3c02:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    3c06:	609a      	str	r2, [r3, #8]
    3c08:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    3c0c:	609a      	str	r2, [r3, #8]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    3c0e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3c12:	f240 228d 	movw	r2, #653	; 0x28d
    3c16:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    3c18:	2000      	movs	r0, #0
    3c1a:	4770      	bx	lr
		return -USB_ERR_DENIED;
    3c1c:	f06f 0010 	mvn.w	r0, #16
}
    3c20:	4770      	bx	lr
    3c22:	bf00      	nop
    3c24:	e000e100 	.word	0xe000e100

00003c28 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    3c28:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    3c2c:	8913      	ldrh	r3, [r2, #8]
    3c2e:	f023 0301 	bic.w	r3, r3, #1
    3c32:	041b      	lsls	r3, r3, #16
    3c34:	0c1b      	lsrs	r3, r3, #16
    3c36:	8113      	strh	r3, [r2, #8]
    3c38:	4770      	bx	lr

00003c3a <_usb_d_dev_set_address>:
	((Usb *)hw)->DEVICE.DADD.reg = data;
    3c3a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    3c3e:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    3c42:	7298      	strb	r0, [r3, #10]
    3c44:	4770      	bx	lr
	...

00003c48 <_usb_d_dev_ep_init>:
{
    3c48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    3c4c:	f000 040f 	and.w	r4, r0, #15
    3c50:	b247      	sxtb	r7, r0
{
    3c52:	460d      	mov	r5, r1
    3c54:	4680      	mov	r8, r0
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    3c56:	0ff9      	lsrs	r1, r7, #31
    3c58:	4620      	mov	r0, r4
    3c5a:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 3d04 <_usb_d_dev_ep_init+0xbc>
    3c5e:	47c8      	blx	r9
	if (epn > CONF_USB_D_MAX_EP_N) {
    3c60:	2c02      	cmp	r4, #2
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    3c62:	4606      	mov	r6, r0
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    3c64:	f005 0503 	and.w	r5, r5, #3
	if (epn > CONF_USB_D_MAX_EP_N) {
    3c68:	d83f      	bhi.n	3cea <_usb_d_dev_ep_init+0xa2>
	if (ept->ep != 0xFF) {
    3c6a:	7c83      	ldrb	r3, [r0, #18]
    3c6c:	2bff      	cmp	r3, #255	; 0xff
    3c6e:	d140      	bne.n	3cf2 <_usb_d_dev_ep_init+0xaa>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    3c70:	b985      	cbnz	r5, 3c94 <_usb_d_dev_ep_init+0x4c>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    3c72:	43f9      	mvns	r1, r7
    3c74:	0fc9      	lsrs	r1, r1, #31
    3c76:	4620      	mov	r0, r4
    3c78:	47c8      	blx	r9
		if (ept_in->ep != 0xFF) {
    3c7a:	7c83      	ldrb	r3, [r0, #18]
    3c7c:	2bff      	cmp	r3, #255	; 0xff
    3c7e:	d138      	bne.n	3cf2 <_usb_d_dev_ep_init+0xaa>
		if (pcfg->cache == NULL) {
    3c80:	230c      	movs	r3, #12
    3c82:	4363      	muls	r3, r4
    3c84:	491e      	ldr	r1, [pc, #120]	; (3d00 <_usb_d_dev_ep_init+0xb8>)
    3c86:	58cb      	ldr	r3, [r1, r3]
    3c88:	2b00      	cmp	r3, #0
    3c8a:	d136      	bne.n	3cfa <_usb_d_dev_ep_init+0xb2>
			return -USB_ERR_FUNC;
    3c8c:	f06f 0012 	mvn.w	r0, #18
    3c90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    3c94:	2f00      	cmp	r7, #0
    3c96:	da18      	bge.n	3cca <_usb_d_dev_ep_init+0x82>
    3c98:	4919      	ldr	r1, [pc, #100]	; (3d00 <_usb_d_dev_ep_init+0xb8>)
    3c9a:	230c      	movs	r3, #12
    3c9c:	fb03 1304 	mla	r3, r3, r4, r1
    3ca0:	6859      	ldr	r1, [r3, #4]
    3ca2:	b9f1      	cbnz	r1, 3ce2 <_usb_d_dev_ep_init+0x9a>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    3ca4:	4916      	ldr	r1, [pc, #88]	; (3d00 <_usb_d_dev_ep_init+0xb8>)
	ept->ep       = ep;
    3ca6:	f886 8012 	strb.w	r8, [r6, #18]
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    3caa:	230c      	movs	r3, #12
    3cac:	435c      	muls	r4, r3
    3cae:	190b      	adds	r3, r1, r4
    3cb0:	5909      	ldr	r1, [r1, r4]
    3cb2:	685b      	ldr	r3, [r3, #4]
	ept->size     = max_pkt_siz;
    3cb4:	8232      	strh	r2, [r6, #16]
	ept->flags.u8 = (ep_type + 1);
    3cb6:	3501      	adds	r5, #1
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    3cb8:	ea13 0327 	ands.w	r3, r3, r7, asr #32
    3cbc:	bf38      	it	cc
    3cbe:	460b      	movcc	r3, r1
	ept->flags.u8 = (ep_type + 1);
    3cc0:	74f5      	strb	r5, [r6, #19]
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    3cc2:	60f3      	str	r3, [r6, #12]
	return USB_OK;
    3cc4:	2000      	movs	r0, #0
    3cc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    3cca:	230c      	movs	r3, #12
    3ccc:	4363      	muls	r3, r4
    3cce:	490c      	ldr	r1, [pc, #48]	; (3d00 <_usb_d_dev_ep_init+0xb8>)
    3cd0:	58cb      	ldr	r3, [r1, r3]
    3cd2:	2b00      	cmp	r3, #0
    3cd4:	d0e6      	beq.n	3ca4 <_usb_d_dev_ep_init+0x5c>
    3cd6:	490a      	ldr	r1, [pc, #40]	; (3d00 <_usb_d_dev_ep_init+0xb8>)
    3cd8:	230c      	movs	r3, #12
    3cda:	fb03 1304 	mla	r3, r3, r4, r1
    3cde:	891b      	ldrh	r3, [r3, #8]
    3ce0:	e000      	b.n	3ce4 <_usb_d_dev_ep_init+0x9c>
    3ce2:	895b      	ldrh	r3, [r3, #10]
    3ce4:	4293      	cmp	r3, r2
    3ce6:	dadd      	bge.n	3ca4 <_usb_d_dev_ep_init+0x5c>
    3ce8:	e7d0      	b.n	3c8c <_usb_d_dev_ep_init+0x44>
		return -USB_ERR_PARAM;
    3cea:	f06f 0011 	mvn.w	r0, #17
    3cee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -USB_ERR_REDO;
    3cf2:	f06f 0013 	mvn.w	r0, #19
    3cf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    3cfa:	2f00      	cmp	r7, #0
    3cfc:	daeb      	bge.n	3cd6 <_usb_d_dev_ep_init+0x8e>
    3cfe:	e7cb      	b.n	3c98 <_usb_d_dev_ep_init+0x50>
    3d00:	0000c78c 	.word	0x0000c78c
    3d04:	00003375 	.word	0x00003375

00003d08 <_usb_d_dev_ep_deinit>:
{
    3d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3d0c:	b247      	sxtb	r7, r0
	uint8_t               epn = USB_EP_GET_N(ep);
    3d0e:	f000 050f 	and.w	r5, r0, #15
	bool                  dir = USB_EP_GET_DIR(ep);
    3d12:	ea4f 78d7 	mov.w	r8, r7, lsr #31
{
    3d16:	4604      	mov	r4, r0
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    3d18:	4641      	mov	r1, r8
    3d1a:	4628      	mov	r0, r5
    3d1c:	4b19      	ldr	r3, [pc, #100]	; (3d84 <_usb_d_dev_ep_deinit+0x7c>)
    3d1e:	4798      	blx	r3
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    3d20:	2d02      	cmp	r5, #2
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    3d22:	4606      	mov	r6, r0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    3d24:	d815      	bhi.n	3d52 <_usb_d_dev_ep_deinit+0x4a>
    3d26:	7c83      	ldrb	r3, [r0, #18]
    3d28:	2bff      	cmp	r3, #255	; 0xff
    3d2a:	d012      	beq.n	3d52 <_usb_d_dev_ep_deinit+0x4a>
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    3d2c:	4b16      	ldr	r3, [pc, #88]	; (3d88 <_usb_d_dev_ep_deinit+0x80>)
    3d2e:	2203      	movs	r2, #3
    3d30:	4641      	mov	r1, r8
    3d32:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    3d34:	7cf3      	ldrb	r3, [r6, #19]
    3d36:	f003 0307 	and.w	r3, r3, #7
    3d3a:	2b01      	cmp	r3, #1
    3d3c:	d10b      	bne.n	3d56 <_usb_d_dev_ep_deinit+0x4e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    3d3e:	0164      	lsls	r4, r4, #5
    3d40:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    3d44:	2300      	movs	r3, #0
    3d46:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
	ept->flags.u8 = 0;
    3d4a:	2300      	movs	r3, #0
    3d4c:	74f3      	strb	r3, [r6, #19]
	ept->ep       = 0xFF;
    3d4e:	23ff      	movs	r3, #255	; 0xff
    3d50:	74b3      	strb	r3, [r6, #18]
    3d52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (USB_EP_GET_DIR(ep)) {
    3d56:	2f00      	cmp	r7, #0
    3d58:	da09      	bge.n	3d6e <_usb_d_dev_ep_deinit+0x66>
    3d5a:	0168      	lsls	r0, r5, #5
    3d5c:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    3d60:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
    3d64:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    3d68:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
    3d6c:	e7ed      	b.n	3d4a <_usb_d_dev_ep_deinit+0x42>
    3d6e:	0164      	lsls	r4, r4, #5
    3d70:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    3d74:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
    3d78:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    3d7c:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
    3d80:	e7e3      	b.n	3d4a <_usb_d_dev_ep_deinit+0x42>
    3d82:	bf00      	nop
    3d84:	00003375 	.word	0x00003375
    3d88:	0000345d 	.word	0x0000345d

00003d8c <_usb_d_dev_ep_enable>:
{
    3d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint8_t               epn   = USB_EP_GET_N(ep);
    3d90:	f000 050f 	and.w	r5, r0, #15
    3d94:	fa4f f980 	sxtb.w	r9, r0
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    3d98:	4b57      	ldr	r3, [pc, #348]	; (3ef8 <_usb_d_dev_ep_enable+0x16c>)
    3d9a:	ea4f 71d9 	mov.w	r1, r9, lsr #31
    3d9e:	4628      	mov	r0, r5
    3da0:	4798      	blx	r3
    3da2:	016f      	lsls	r7, r5, #5
    3da4:	f107 4682 	add.w	r6, r7, #1090519040	; 0x41000000
    3da8:	4680      	mov	r8, r0
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    3daa:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    3dae:	2d02      	cmp	r5, #2
    3db0:	b2c3      	uxtb	r3, r0
    3db2:	f200 8098 	bhi.w	3ee6 <_usb_d_dev_ep_enable+0x15a>
    3db6:	f898 2012 	ldrb.w	r2, [r8, #18]
    3dba:	2aff      	cmp	r2, #255	; 0xff
    3dbc:	f000 8093 	beq.w	3ee6 <_usb_d_dev_ep_enable+0x15a>
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    3dc0:	4c4e      	ldr	r4, [pc, #312]	; (3efc <_usb_d_dev_ep_enable+0x170>)
    3dc2:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
    3dc6:	440f      	add	r7, r1
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    3dc8:	f898 1013 	ldrb.w	r1, [r8, #19]
    3dcc:	f001 0007 	and.w	r0, r1, #7
    3dd0:	2801      	cmp	r0, #1
    3dd2:	d148      	bne.n	3e66 <_usb_d_dev_ep_enable+0xda>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    3dd4:	f013 0377 	ands.w	r3, r3, #119	; 0x77
    3dd8:	f040 8089 	bne.w	3eee <_usb_d_dev_ep_enable+0x162>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    3ddc:	2111      	movs	r1, #17
    3dde:	f886 1100 	strb.w	r1, [r6, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3de2:	f8b8 1010 	ldrh.w	r1, [r8, #16]
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3de6:	f8df 9118 	ldr.w	r9, [pc, #280]	; 3f00 <_usb_d_dev_ep_enable+0x174>
    3dea:	4608      	mov	r0, r1
    3dec:	47c8      	blx	r9
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3dee:	f8df e114 	ldr.w	lr, [pc, #276]	; 3f04 <_usb_d_dev_ep_enable+0x178>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3df2:	0700      	lsls	r0, r0, #28
    3df4:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3df8:	ea0e 3e81 	and.w	lr, lr, r1, lsl #14
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3dfc:	f3c1 010d 	ubfx	r1, r1, #0, #14
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3e00:	ea4e 0e00 	orr.w	lr, lr, r0
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3e04:	4308      	orrs	r0, r1
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3e06:	f8c7 e004 	str.w	lr, [r7, #4]
	bank->STATUS_BK.reg     = 0;
    3e0a:	eb04 1545 	add.w	r5, r4, r5, lsl #5
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3e0e:	6178      	str	r0, [r7, #20]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3e10:	f002 020f 	and.w	r2, r2, #15
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3e14:	2740      	movs	r7, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3e16:	2080      	movs	r0, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3e18:	f886 7105 	strb.w	r7, [r6, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3e1c:	f886 0104 	strb.w	r0, [r6, #260]	; 0x104
	bank->ADDR.reg          = addr;
    3e20:	0150      	lsls	r0, r2, #5
	bank->STATUS_BK.reg     = 0;
    3e22:	f885 30d2 	strb.w	r3, [r5, #210]	; 0xd2
	bank->ADDR.reg          = addr;
    3e26:	4404      	add	r4, r0
	bank->STATUS_BK.reg     = 0;
    3e28:	f885 30e2 	strb.w	r3, [r5, #226]	; 0xe2
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    3e2c:	f8d8 600c 	ldr.w	r6, [r8, #12]
	bank->ADDR.reg          = addr;
    3e30:	f8c4 60c8 	str.w	r6, [r4, #200]	; 0xc8
    3e34:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    3e38:	f8d4 40cc 	ldr.w	r4, [r4, #204]	; 0xcc
    3e3c:	f361 349b 	bfi	r4, r1, #14, #14
    3e40:	606c      	str	r4, [r5, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    3e42:	6869      	ldr	r1, [r5, #4]
    3e44:	f100 4282 	add.w	r2, r0, #1090519040	; 0x41000000
    3e48:	f363 010d 	bfi	r1, r3, #0, #14
    3e4c:	6069      	str	r1, [r5, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    3e4e:	4610      	mov	r0, r2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3e50:	21b0      	movs	r1, #176	; 0xb0
    3e52:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3e56:	f882 7105 	strb.w	r7, [r2, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    3e5a:	2210      	movs	r2, #16
    3e5c:	f880 2109 	strb.w	r2, [r0, #265]	; 0x109
	return USB_OK;
    3e60:	4618      	mov	r0, r3
    3e62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (dir) {
    3e66:	f1b9 0f00 	cmp.w	r9, #0
    3e6a:	da1e      	bge.n	3eaa <_usb_d_dev_ep_enable+0x11e>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    3e6c:	f013 0270 	ands.w	r2, r3, #112	; 0x70
    3e70:	d13d      	bne.n	3eee <_usb_d_dev_ep_enable+0x162>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    3e72:	0108      	lsls	r0, r1, #4
    3e74:	f000 0070 	and.w	r0, r0, #112	; 0x70
    3e78:	4318      	orrs	r0, r3
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3e7a:	f8b8 3010 	ldrh.w	r3, [r8, #16]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    3e7e:	f886 0100 	strb.w	r0, [r6, #256]	; 0x100
    3e82:	491f      	ldr	r1, [pc, #124]	; (3f00 <_usb_d_dev_ep_enable+0x174>)
    3e84:	4618      	mov	r0, r3
    3e86:	4788      	blx	r1
    3e88:	0700      	lsls	r0, r0, #28
    3e8a:	f3c3 030d 	ubfx	r3, r3, #0, #14
    3e8e:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
	bank->STATUS_BK.reg     = 0;
    3e92:	eb04 1445 	add.w	r4, r4, r5, lsl #5
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3e96:	4318      	orrs	r0, r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3e98:	2380      	movs	r3, #128	; 0x80
    3e9a:	6178      	str	r0, [r7, #20]
    3e9c:	f886 3104 	strb.w	r3, [r6, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    3ea0:	f884 20e2 	strb.w	r2, [r4, #226]	; 0xe2
	return USB_OK;
    3ea4:	4610      	mov	r0, r2
    3ea6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    3eaa:	f013 0207 	ands.w	r2, r3, #7
    3eae:	d11e      	bne.n	3eee <_usb_d_dev_ep_enable+0x162>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    3eb0:	f001 0107 	and.w	r1, r1, #7
    3eb4:	ea41 0003 	orr.w	r0, r1, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3eb8:	f8b8 1010 	ldrh.w	r1, [r8, #16]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    3ebc:	f886 0100 	strb.w	r0, [r6, #256]	; 0x100
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3ec0:	4b0f      	ldr	r3, [pc, #60]	; (3f00 <_usb_d_dev_ep_enable+0x174>)
    3ec2:	4608      	mov	r0, r1
    3ec4:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3ec6:	4b0f      	ldr	r3, [pc, #60]	; (3f04 <_usb_d_dev_ep_enable+0x178>)
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3ec8:	0700      	lsls	r0, r0, #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3eca:	ea03 3381 	and.w	r3, r3, r1, lsl #14
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3ece:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
    3ed2:	4303      	orrs	r3, r0
	bank->STATUS_BK.reg     = 0;
    3ed4:	eb04 1445 	add.w	r4, r4, r5, lsl #5
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3ed8:	607b      	str	r3, [r7, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3eda:	2340      	movs	r3, #64	; 0x40
    3edc:	f886 3105 	strb.w	r3, [r6, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
    3ee0:	f884 20d2 	strb.w	r2, [r4, #210]	; 0xd2
    3ee4:	e7de      	b.n	3ea4 <_usb_d_dev_ep_enable+0x118>
		return -USB_ERR_PARAM;
    3ee6:	f06f 0011 	mvn.w	r0, #17
    3eea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -USB_ERR_REDO;
    3eee:	f06f 0013 	mvn.w	r0, #19
}
    3ef2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3ef6:	bf00      	nop
    3ef8:	00003375 	.word	0x00003375
    3efc:	20007054 	.word	0x20007054
    3f00:	00003ad1 	.word	0x00003ad1
    3f04:	0fffc000 	.word	0x0fffc000

00003f08 <_usb_d_dev_ep_stall>:
{
    3f08:	b538      	push	{r3, r4, r5, lr}
	bool                  dir = USB_EP_GET_DIR(ep);
    3f0a:	09c2      	lsrs	r2, r0, #7
	uint8_t               epn = USB_EP_GET_N(ep);
    3f0c:	f000 050f 	and.w	r5, r0, #15
{
    3f10:	460c      	mov	r4, r1
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    3f12:	4628      	mov	r0, r5
    3f14:	4611      	mov	r1, r2
    3f16:	4b34      	ldr	r3, [pc, #208]	; (3fe8 <_usb_d_dev_ep_stall+0xe0>)
    3f18:	4798      	blx	r3
	if (epn > CONF_USB_D_MAX_EP_N) {
    3f1a:	2d02      	cmp	r5, #2
    3f1c:	d861      	bhi.n	3fe2 <_usb_d_dev_ep_stall+0xda>
	if (USB_EP_STALL_SET == ctrl) {
    3f1e:	2c01      	cmp	r4, #1
    3f20:	d119      	bne.n	3f56 <_usb_d_dev_ep_stall+0x4e>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3f22:	7c83      	ldrb	r3, [r0, #18]
    3f24:	f003 030f 	and.w	r3, r3, #15
    3f28:	0159      	lsls	r1, r3, #5
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    3f2a:	2410      	movs	r4, #16
    3f2c:	4094      	lsls	r4, r2
    3f2e:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    3f32:	b2e4      	uxtb	r4, r4
    3f34:	f881 4105 	strb.w	r4, [r1, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    3f38:	015b      	lsls	r3, r3, #5
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    3f3a:	2120      	movs	r1, #32
    3f3c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    3f40:	fa01 f202 	lsl.w	r2, r1, r2
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    3f44:	b2d2      	uxtb	r2, r2
    3f46:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    3f4a:	7cc3      	ldrb	r3, [r0, #19]
    3f4c:	f043 0308 	orr.w	r3, r3, #8
    3f50:	74c3      	strb	r3, [r0, #19]
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    3f52:	2000      	movs	r0, #0
    3f54:	bd38      	pop	{r3, r4, r5, pc}
	} else if (USB_EP_STALL_CLR == ctrl) {
    3f56:	bb9c      	cbnz	r4, 3fc0 <_usb_d_dev_ep_stall+0xb8>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    3f58:	7c81      	ldrb	r1, [r0, #18]
    3f5a:	f001 010f 	and.w	r1, r1, #15
    3f5e:	014b      	lsls	r3, r1, #5
    3f60:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    3f64:	2410      	movs	r4, #16
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    3f66:	f893 5106 	ldrb.w	r5, [r3, #262]	; 0x106
    3f6a:	4094      	lsls	r4, r2
	if (!is_stalled) {
    3f6c:	4225      	tst	r5, r4
    3f6e:	d0f0      	beq.n	3f52 <_usb_d_dev_ep_stall+0x4a>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    3f70:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3f72:	f883 4104 	strb.w	r4, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    3f76:	0149      	lsls	r1, r1, #5
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    3f78:	2420      	movs	r4, #32
    3f7a:	4094      	lsls	r4, r2
    3f7c:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    3f80:	b2e5      	uxtb	r5, r4
    3f82:	f881 5108 	strb.w	r5, [r1, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    3f86:	f893 1107 	ldrb.w	r1, [r3, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    3f8a:	4221      	tst	r1, r4
    3f8c:	d007      	beq.n	3f9e <_usb_d_dev_ep_stall+0x96>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    3f8e:	2101      	movs	r1, #1
    3f90:	fa01 f202 	lsl.w	r2, r1, r2
    3f94:	b2d2      	uxtb	r2, r2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3f96:	f883 5107 	strb.w	r5, [r3, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3f9a:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    3f9e:	7cc2      	ldrb	r2, [r0, #19]
    3fa0:	f002 0107 	and.w	r1, r2, #7
    3fa4:	2901      	cmp	r1, #1
    3fa6:	d108      	bne.n	3fba <_usb_d_dev_ep_stall+0xb2>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    3fa8:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    3fac:	f013 0330 	ands.w	r3, r3, #48	; 0x30
    3fb0:	d1cf      	bne.n	3f52 <_usb_d_dev_ep_stall+0x4a>
			ept->flags.bits.is_stalled = 0;
    3fb2:	f363 02c3 	bfi	r2, r3, #3, #1
		ept->flags.bits.is_stalled = 0;
    3fb6:	74c2      	strb	r2, [r0, #19]
    3fb8:	e7cb      	b.n	3f52 <_usb_d_dev_ep_stall+0x4a>
    3fba:	f36f 02c3 	bfc	r2, #3, #1
    3fbe:	e7fa      	b.n	3fb6 <_usb_d_dev_ep_stall+0xae>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3fc0:	7c83      	ldrb	r3, [r0, #18]
    3fc2:	f003 030f 	and.w	r3, r3, #15
    3fc6:	015b      	lsls	r3, r3, #5
    3fc8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    3fcc:	f503 7380 	add.w	r3, r3, #256	; 0x100
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    3fd0:	2010      	movs	r0, #16
    3fd2:	799b      	ldrb	r3, [r3, #6]
    3fd4:	fa00 f202 	lsl.w	r2, r0, r2
    3fd8:	421a      	tst	r2, r3
    3fda:	bf14      	ite	ne
    3fdc:	2001      	movne	r0, #1
    3fde:	2000      	moveq	r0, #0
    3fe0:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
    3fe2:	f06f 0011 	mvn.w	r0, #17
}
    3fe6:	bd38      	pop	{r3, r4, r5, pc}
    3fe8:	00003375 	.word	0x00003375

00003fec <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    3fec:	b530      	push	{r4, r5, lr}
	uint8_t            epn   = USB_EP_GET_N(ep);
    3fee:	f000 000f 	and.w	r0, r0, #15
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    3ff2:	4b12      	ldr	r3, [pc, #72]	; (403c <_usb_d_dev_ep_read_req+0x50>)
    3ff4:	0142      	lsls	r2, r0, #5
    3ff6:	189c      	adds	r4, r3, r2
	uint32_t           addr  = bank[0].ADDR.reg;
    3ff8:	589d      	ldr	r5, [r3, r2]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    3ffa:	6864      	ldr	r4, [r4, #4]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    3ffc:	2802      	cmp	r0, #2
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    3ffe:	f3c4 040d 	ubfx	r4, r4, #0, #14
	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    4002:	d814      	bhi.n	402e <_usb_d_dev_ep_read_req+0x42>
    4004:	b199      	cbz	r1, 402e <_usb_d_dev_ep_read_req+0x42>
    4006:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    400a:	f892 3100 	ldrb.w	r3, [r2, #256]	; 0x100
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    400e:	2b11      	cmp	r3, #17
    4010:	d110      	bne.n	4034 <_usb_d_dev_ep_read_req+0x48>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    4012:	f892 3107 	ldrb.w	r3, [r2, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    4016:	f013 0010 	ands.w	r0, r3, #16
    401a:	d00d      	beq.n	4038 <_usb_d_dev_ep_read_req+0x4c>
		return ERR_NONE;
	}
	memcpy(req_buf, (void *)addr, 8);
    401c:	682b      	ldr	r3, [r5, #0]
    401e:	600b      	str	r3, [r1, #0]
    4020:	686b      	ldr	r3, [r5, #4]
    4022:	604b      	str	r3, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    4024:	2310      	movs	r3, #16
    4026:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
	_usbd_ep_ack_setup(epn);

	return bytes;
    402a:	4620      	mov	r0, r4
    402c:	bd30      	pop	{r4, r5, pc}
		return -USB_ERR_PARAM;
    402e:	f06f 0011 	mvn.w	r0, #17
    4032:	bd30      	pop	{r4, r5, pc}
		return -USB_ERR_FUNC;
    4034:	f06f 0012 	mvn.w	r0, #18
}
    4038:	bd30      	pop	{r4, r5, pc}
    403a:	bf00      	nop
    403c:	2000711c 	.word	0x2000711c

00004040 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    4040:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    4044:	7a07      	ldrb	r7, [r0, #8]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    4046:	4b3a      	ldr	r3, [pc, #232]	; (4130 <_usb_d_dev_ep_trans+0xf0>)
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    4048:	f007 050f 	and.w	r5, r7, #15
    404c:	b27f      	sxtb	r7, r7
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    404e:	ea4f 79d7 	mov.w	r9, r7, lsr #31
{
    4052:	4680      	mov	r8, r0
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    4054:	4649      	mov	r1, r9
    4056:	4628      	mov	r0, r5
    4058:	4798      	blx	r3

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    405a:	8a02      	ldrh	r2, [r0, #16]
	bool     size_n_aligned = (trans->size & size_mask);
    405c:	f8d8 1004 	ldr.w	r1, [r8, #4]
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    4060:	f240 33ff 	movw	r3, #1023	; 0x3ff
    4064:	429a      	cmp	r2, r3
    4066:	bf1a      	itte	ne
    4068:	f102 33ff 	addne.w	r3, r2, #4294967295
    406c:	b29b      	uxthne	r3, r3
    406e:	4613      	moveq	r3, r2

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    4070:	2d02      	cmp	r5, #2
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    4072:	4604      	mov	r4, r0
	bool     size_n_aligned = (trans->size & size_mask);
    4074:	ea03 0601 	and.w	r6, r3, r1
	if (epn > CONF_USB_D_MAX_EP_N) {
    4078:	d828      	bhi.n	40cc <_usb_d_dev_ep_trans+0x8c>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    407a:	f8d8 5000 	ldr.w	r5, [r8]
    407e:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
    4082:	d30a      	bcc.n	409a <_usb_d_dev_ep_trans+0x5a>
    4084:	4b2b      	ldr	r3, [pc, #172]	; (4134 <_usb_d_dev_ep_trans+0xf4>)
    4086:	1948      	adds	r0, r1, r5
    4088:	4298      	cmp	r0, r3
    408a:	d806      	bhi.n	409a <_usb_d_dev_ep_trans+0x5a>
    408c:	f015 0503 	ands.w	r5, r5, #3
    4090:	d103      	bne.n	409a <_usb_d_dev_ep_trans+0x5a>
	    || (!dir && (trans->size < ept->size))) {
    4092:	2f00      	cmp	r7, #0
    4094:	db05      	blt.n	40a2 <_usb_d_dev_ep_trans+0x62>
    4096:	4291      	cmp	r1, r2
    4098:	d214      	bcs.n	40c4 <_usb_d_dev_ep_trans+0x84>
		if (!ept->cache) {
    409a:	68e3      	ldr	r3, [r4, #12]
    409c:	2b00      	cmp	r3, #0
    409e:	d041      	beq.n	4124 <_usb_d_dev_ep_trans+0xe4>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
    40a0:	2501      	movs	r5, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    40a2:	7ce3      	ldrb	r3, [r4, #19]
    40a4:	071b      	lsls	r3, r3, #28
    40a6:	d440      	bmi.n	412a <_usb_d_dev_ep_trans+0xea>
		return USB_HALTED;
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    40a8:	4b23      	ldr	r3, [pc, #140]	; (4138 <_usb_d_dev_ep_trans+0xf8>)
    40aa:	a801      	add	r0, sp, #4
    40ac:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    40ae:	7ce3      	ldrb	r3, [r4, #19]
    40b0:	4a22      	ldr	r2, [pc, #136]	; (413c <_usb_d_dev_ep_trans+0xfc>)
    40b2:	f013 0a40 	ands.w	sl, r3, #64	; 0x40
    40b6:	d00e      	beq.n	40d6 <_usb_d_dev_ep_trans+0x96>
		atomic_leave_critical(&flags);
    40b8:	a801      	add	r0, sp, #4
    40ba:	4790      	blx	r2
		return USB_BUSY;
    40bc:	2001      	movs	r0, #1
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    40be:	b002      	add	sp, #8
    40c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!dir && size_n_aligned) {
    40c4:	b12e      	cbz	r6, 40d2 <_usb_d_dev_ep_trans+0x92>
		if (!ept->cache) {
    40c6:	68e3      	ldr	r3, [r4, #12]
    40c8:	2b00      	cmp	r3, #0
    40ca:	d1ea      	bne.n	40a2 <_usb_d_dev_ep_trans+0x62>
		return -USB_ERR_PARAM;
    40cc:	f06f 0011 	mvn.w	r0, #17
    40d0:	e7f5      	b.n	40be <_usb_d_dev_ep_trans+0x7e>
	bool use_cache = false;
    40d2:	4635      	mov	r5, r6
    40d4:	e7e5      	b.n	40a2 <_usb_d_dev_ep_trans+0x62>
	ept->flags.bits.is_busy = 1;
    40d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    40da:	74e3      	strb	r3, [r4, #19]
	atomic_leave_critical(&flags);
    40dc:	a801      	add	r0, sp, #4
    40de:	4790      	blx	r2
	ept->trans_buf   = trans->buf;
    40e0:	f8d8 3000 	ldr.w	r3, [r8]
    40e4:	6023      	str	r3, [r4, #0]
	ept->trans_size  = trans->size;
    40e6:	f8d8 3004 	ldr.w	r3, [r8, #4]
    40ea:	6063      	str	r3, [r4, #4]
	ept->flags.bits.dir       = dir;
    40ec:	7ce3      	ldrb	r3, [r4, #19]
	ept->trans_count = 0;
    40ee:	f8c4 a008 	str.w	sl, [r4, #8]
	ept->flags.bits.dir       = dir;
    40f2:	f369 13c7 	bfi	r3, r9, #7, #1
	ept->flags.bits.use_cache = use_cache;
    40f6:	f365 1345 	bfi	r3, r5, #5, #1
    40fa:	74e3      	strb	r3, [r4, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    40fc:	f898 3009 	ldrb.w	r3, [r8, #9]
    4100:	b113      	cbz	r3, 4108 <_usb_d_dev_ep_trans+0xc8>
    4102:	fab6 f386 	clz	r3, r6
    4106:	095b      	lsrs	r3, r3, #5
    4108:	7ce2      	ldrb	r2, [r4, #19]
	if (dir) {
    410a:	2f00      	cmp	r7, #0
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    410c:	f363 1204 	bfi	r2, r3, #4, #1
		_usb_d_dev_in_next(ept, false);
    4110:	4620      	mov	r0, r4
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    4112:	74e2      	strb	r2, [r4, #19]
		_usb_d_dev_in_next(ept, false);
    4114:	f04f 0100 	mov.w	r1, #0
    4118:	bfb4      	ite	lt
    411a:	4b09      	ldrlt	r3, [pc, #36]	; (4140 <_usb_d_dev_ep_trans+0x100>)
		_usb_d_dev_out_next(ept, false);
    411c:	4b09      	ldrge	r3, [pc, #36]	; (4144 <_usb_d_dev_ep_trans+0x104>)
    411e:	4798      	blx	r3
	return ERR_NONE;
    4120:	2000      	movs	r0, #0
    4122:	e7cc      	b.n	40be <_usb_d_dev_ep_trans+0x7e>
			return -USB_ERR_FUNC;
    4124:	f06f 0012 	mvn.w	r0, #18
    4128:	e7c9      	b.n	40be <_usb_d_dev_ep_trans+0x7e>
		return USB_HALTED;
    412a:	2002      	movs	r0, #2
    412c:	e7c7      	b.n	40be <_usb_d_dev_ep_trans+0x7e>
    412e:	bf00      	nop
    4130:	00003375 	.word	0x00003375
    4134:	20031fff 	.word	0x20031fff
    4138:	000011a5 	.word	0x000011a5
    413c:	000011b3 	.word	0x000011b3
    4140:	000035e9 	.word	0x000035e9
    4144:	00003741 	.word	0x00003741

00004148 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    4148:	4b06      	ldr	r3, [pc, #24]	; (4164 <_usb_d_dev_register_callback+0x1c>)
    414a:	2900      	cmp	r1, #0
    414c:	bf08      	it	eq
    414e:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
    4150:	2801      	cmp	r0, #1
    4152:	d102      	bne.n	415a <_usb_d_dev_register_callback+0x12>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    4154:	4b04      	ldr	r3, [pc, #16]	; (4168 <_usb_d_dev_register_callback+0x20>)
    4156:	6059      	str	r1, [r3, #4]
    4158:	4770      	bx	lr
	} else if (type == USB_D_CB_SOF) {
    415a:	b908      	cbnz	r0, 4160 <_usb_d_dev_register_callback+0x18>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    415c:	4b02      	ldr	r3, [pc, #8]	; (4168 <_usb_d_dev_register_callback+0x20>)
    415e:	6019      	str	r1, [r3, #0]
    4160:	4770      	bx	lr
    4162:	bf00      	nop
    4164:	0000334d 	.word	0x0000334d
    4168:	20007054 	.word	0x20007054

0000416c <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    416c:	4b08      	ldr	r3, [pc, #32]	; (4190 <_usb_d_dev_register_ep_callback+0x24>)
    416e:	2900      	cmp	r1, #0
    4170:	bf08      	it	eq
    4172:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
    4174:	b910      	cbnz	r0, 417c <_usb_d_dev_register_ep_callback+0x10>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    4176:	4b07      	ldr	r3, [pc, #28]	; (4194 <_usb_d_dev_register_ep_callback+0x28>)
    4178:	6099      	str	r1, [r3, #8]
    417a:	4770      	bx	lr
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    417c:	2801      	cmp	r0, #1
    417e:	d102      	bne.n	4186 <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    4180:	4b04      	ldr	r3, [pc, #16]	; (4194 <_usb_d_dev_register_ep_callback+0x28>)
    4182:	60d9      	str	r1, [r3, #12]
    4184:	4770      	bx	lr
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    4186:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    4188:	bf04      	itt	eq
    418a:	4b02      	ldreq	r3, [pc, #8]	; (4194 <_usb_d_dev_register_ep_callback+0x28>)
    418c:	6119      	streq	r1, [r3, #16]
    418e:	4770      	bx	lr
    4190:	0000334d 	.word	0x0000334d
    4194:	20007054 	.word	0x20007054

00004198 <USB_0_Handler>:
    4198:	4b00      	ldr	r3, [pc, #0]	; (419c <USB_0_Handler+0x4>)
    419a:	4718      	bx	r3
    419c:	000038ed 	.word	0x000038ed

000041a0 <USB_1_Handler>:
    41a0:	4b00      	ldr	r3, [pc, #0]	; (41a4 <USB_1_Handler+0x4>)
    41a2:	4718      	bx	r3
    41a4:	000038ed 	.word	0x000038ed

000041a8 <USB_2_Handler>:
    41a8:	4b00      	ldr	r3, [pc, #0]	; (41ac <USB_2_Handler+0x4>)
    41aa:	4718      	bx	r3
    41ac:	000038ed 	.word	0x000038ed

000041b0 <USB_3_Handler>:
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{

	_usb_d_dev_handler();
    41b0:	4b00      	ldr	r3, [pc, #0]	; (41b4 <USB_3_Handler+0x4>)
    41b2:	4718      	bx	r3
    41b4:	000038ed 	.word	0x000038ed

000041b8 <hri_wdt_get_CTRLA_ALWAYSON_bit>:
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    41b8:	6883      	ldr	r3, [r0, #8]
    41ba:	f013 0f0e 	tst.w	r3, #14
    41be:	d1fb      	bne.n	41b8 <hri_wdt_get_CTRLA_ALWAYSON_bit>

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	tmp = ((Wdt *)hw)->CTRLA.reg;
    41c0:	7800      	ldrb	r0, [r0, #0]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
	return (bool)tmp;
}
    41c2:	09c0      	lsrs	r0, r0, #7
    41c4:	4770      	bx	lr
	...

000041c8 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    41c8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    41ca:	4604      	mov	r4, r0
    41cc:	b308      	cbz	r0, 4212 <_wdt_init+0x4a>
    41ce:	6800      	ldr	r0, [r0, #0]
    41d0:	3000      	adds	r0, #0
    41d2:	bf18      	it	ne
    41d4:	2001      	movne	r0, #1
    41d6:	4b11      	ldr	r3, [pc, #68]	; (421c <_wdt_init+0x54>)
    41d8:	4911      	ldr	r1, [pc, #68]	; (4220 <_wdt_init+0x58>)
    41da:	2250      	movs	r2, #80	; 0x50
    41dc:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    41de:	6820      	ldr	r0, [r4, #0]
    41e0:	4b10      	ldr	r3, [pc, #64]	; (4224 <_wdt_init+0x5c>)
    41e2:	4798      	blx	r3
    41e4:	b9b0      	cbnz	r0, 4214 <_wdt_init+0x4c>
    41e6:	6823      	ldr	r3, [r4, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    41e8:	689a      	ldr	r2, [r3, #8]
    41ea:	f012 0f0e 	tst.w	r2, #14
    41ee:	d1fb      	bne.n	41e8 <_wdt_init+0x20>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    41f0:	7818      	ldrb	r0, [r3, #0]
    41f2:	f3c0 0040 	ubfx	r0, r0, #1, #1
    41f6:	b968      	cbnz	r0, 4214 <_wdt_init+0x4c>

static inline void hri_wdt_write_CONFIG_WINDOW_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    41f8:	785a      	ldrb	r2, [r3, #1]
	tmp &= ~WDT_CONFIG_WINDOW_Msk;
    41fa:	f002 020f 	and.w	r2, r2, #15
	tmp |= WDT_CONFIG_WINDOW(data);
    41fe:	f042 02b0 	orr.w	r2, r2, #176	; 0xb0
	((Wdt *)hw)->CONFIG.reg = tmp;
    4202:	705a      	strb	r2, [r3, #1]
	tmp = ((Wdt *)hw)->CONFIG.reg;
    4204:	785a      	ldrb	r2, [r3, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    4206:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
    420a:	f042 020b 	orr.w	r2, r2, #11
	((Wdt *)hw)->CONFIG.reg = tmp;
    420e:	705a      	strb	r2, [r3, #1]
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
	}

	return ERR_NONE;
    4210:	bd10      	pop	{r4, pc}
    4212:	e7e0      	b.n	41d6 <_wdt_init+0xe>
		return ERR_DENIED;
    4214:	f06f 0010 	mvn.w	r0, #16
}
    4218:	bd10      	pop	{r4, pc}
    421a:	bf00      	nop
    421c:	00001fdd 	.word	0x00001fdd
    4220:	0000c7b0 	.word	0x0000c7b0
    4224:	000041b9 	.word	0x000041b9

00004228 <_wdt_set_timeout_period>:

/**
 * \brief set timeout period for WDT instance
 */
int32_t _wdt_set_timeout_period(struct wdt_dev *const dev, const uint32_t clk_rate, const uint16_t timeout_period)
{
    4228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    422a:	460e      	mov	r6, r1
    422c:	4614      	mov	r4, r2
	uint64_t            tmp;
	uint32_t            period_cycles;
	enum wdt_period_reg timeout_period_reg;
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    422e:	4605      	mov	r5, r0
    4230:	b370      	cbz	r0, 4290 <_wdt_set_timeout_period+0x68>
    4232:	6800      	ldr	r0, [r0, #0]
    4234:	3000      	adds	r0, #0
    4236:	bf18      	it	ne
    4238:	2001      	movne	r0, #1
    423a:	4b32      	ldr	r3, [pc, #200]	; (4304 <_wdt_set_timeout_period+0xdc>)
    423c:	4932      	ldr	r1, [pc, #200]	; (4308 <_wdt_set_timeout_period+0xe0>)
    423e:	227a      	movs	r2, #122	; 0x7a
    4240:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    4242:	6828      	ldr	r0, [r5, #0]
    4244:	4b31      	ldr	r3, [pc, #196]	; (430c <_wdt_set_timeout_period+0xe4>)
    4246:	4798      	blx	r3
    4248:	2800      	cmp	r0, #0
    424a:	d157      	bne.n	42fc <_wdt_set_timeout_period+0xd4>
    424c:	682a      	ldr	r2, [r5, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    424e:	6893      	ldr	r3, [r2, #8]
    4250:	f013 0f0e 	tst.w	r3, #14
    4254:	d1fb      	bne.n	424e <_wdt_set_timeout_period+0x26>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    4256:	7813      	ldrb	r3, [r2, #0]
    4258:	f3c3 0340 	ubfx	r3, r3, #1, #1
    425c:	2b00      	cmp	r3, #0
    425e:	d14d      	bne.n	42fc <_wdt_set_timeout_period+0xd4>
		return ERR_DENIED;
	} else {
		/* calc the period cycles corresponding to timeout period */
		tmp = (uint64_t)timeout_period * clk_rate;
    4260:	fba4 6706 	umull	r6, r7, r4, r6

		/* check whether overflow*/
		if (tmp >> 32) {
    4264:	463c      	mov	r4, r7
    4266:	461d      	mov	r5, r3
    4268:	ea54 0105 	orrs.w	r1, r4, r5
    426c:	d10d      	bne.n	428a <_wdt_set_timeout_period+0x62>
			return ERR_INVALID_ARG;
		}

		period_cycles = (uint32_t)tmp;
		/* calc the register value corresponding to period cysles */
		switch (period_cycles) {
    426e:	f5b6 3f7a 	cmp.w	r6, #256000	; 0x3e800
    4272:	d039      	beq.n	42e8 <_wdt_set_timeout_period+0xc0>
    4274:	d815      	bhi.n	42a2 <_wdt_set_timeout_period+0x7a>
    4276:	f5b6 4ffa 	cmp.w	r6, #32000	; 0x7d00
    427a:	d031      	beq.n	42e0 <_wdt_set_timeout_period+0xb8>
    427c:	d809      	bhi.n	4292 <_wdt_set_timeout_period+0x6a>
    427e:	f5b6 5ffa 	cmp.w	r6, #8000	; 0x1f40
    4282:	d026      	beq.n	42d2 <_wdt_set_timeout_period+0xaa>
    4284:	f5b6 5f7a 	cmp.w	r6, #16000	; 0x3e80
    4288:	d022      	beq.n	42d0 <_wdt_set_timeout_period+0xa8>
			break;
		case WDT_CLK_16384CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_16384CYCLE;
			break;
		default:
			return ERR_INVALID_ARG;
    428a:	f06f 000c 	mvn.w	r0, #12
	}

	hri_wdt_write_CONFIG_PER_bf(dev->hw, (uint8_t)timeout_period_reg);

	return ERR_NONE;
}
    428e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4290:	e7d3      	b.n	423a <_wdt_set_timeout_period+0x12>
		switch (period_cycles) {
    4292:	f5b6 4f7a 	cmp.w	r6, #64000	; 0xfa00
    4296:	d025      	beq.n	42e4 <_wdt_set_timeout_period+0xbc>
    4298:	f5b6 3ffa 	cmp.w	r6, #128000	; 0x1f400
    429c:	d1f5      	bne.n	428a <_wdt_set_timeout_period+0x62>
			timeout_period_reg = WDT_PERIOD_128CYCLE;
    429e:	2304      	movs	r3, #4
			break;
    42a0:	e017      	b.n	42d2 <_wdt_set_timeout_period+0xaa>
		switch (period_cycles) {
    42a2:	f5b6 1ffa 	cmp.w	r6, #2048000	; 0x1f4000
    42a6:	d023      	beq.n	42f0 <_wdt_set_timeout_period+0xc8>
    42a8:	d807      	bhi.n	42ba <_wdt_set_timeout_period+0x92>
    42aa:	f5b6 2ffa 	cmp.w	r6, #512000	; 0x7d000
    42ae:	d01d      	beq.n	42ec <_wdt_set_timeout_period+0xc4>
    42b0:	f5b6 2f7a 	cmp.w	r6, #1024000	; 0xfa000
    42b4:	d1e9      	bne.n	428a <_wdt_set_timeout_period+0x62>
			timeout_period_reg = WDT_PERIOD_1024CYCLE;
    42b6:	2307      	movs	r3, #7
			break;
    42b8:	e00b      	b.n	42d2 <_wdt_set_timeout_period+0xaa>
		switch (period_cycles) {
    42ba:	f5b6 0ffa 	cmp.w	r6, #8192000	; 0x7d0000
    42be:	d019      	beq.n	42f4 <_wdt_set_timeout_period+0xcc>
    42c0:	f5b6 0f7a 	cmp.w	r6, #16384000	; 0xfa0000
    42c4:	d018      	beq.n	42f8 <_wdt_set_timeout_period+0xd0>
    42c6:	f5b6 1f7a 	cmp.w	r6, #4096000	; 0x3e8000
    42ca:	d1de      	bne.n	428a <_wdt_set_timeout_period+0x62>
			timeout_period_reg = WDT_PERIOD_4096CYCLE;
    42cc:	2309      	movs	r3, #9
			break;
    42ce:	e000      	b.n	42d2 <_wdt_set_timeout_period+0xaa>
			timeout_period_reg = WDT_PERIOD_16CYCLE;
    42d0:	2301      	movs	r3, #1
	tmp = ((Wdt *)hw)->CONFIG.reg;
    42d2:	7851      	ldrb	r1, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    42d4:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
    42d8:	430b      	orrs	r3, r1
	((Wdt *)hw)->CONFIG.reg = tmp;
    42da:	7053      	strb	r3, [r2, #1]
	return ERR_NONE;
    42dc:	2000      	movs	r0, #0
    42de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			timeout_period_reg = WDT_PERIOD_32CYCLE;
    42e0:	2302      	movs	r3, #2
			break;
    42e2:	e7f6      	b.n	42d2 <_wdt_set_timeout_period+0xaa>
			timeout_period_reg = WDT_PERIOD_64CYCLE;
    42e4:	2303      	movs	r3, #3
			break;
    42e6:	e7f4      	b.n	42d2 <_wdt_set_timeout_period+0xaa>
			timeout_period_reg = WDT_PERIOD_256CYCLE;
    42e8:	2305      	movs	r3, #5
			break;
    42ea:	e7f2      	b.n	42d2 <_wdt_set_timeout_period+0xaa>
			timeout_period_reg = WDT_PERIOD_512CYCLE;
    42ec:	2306      	movs	r3, #6
			break;
    42ee:	e7f0      	b.n	42d2 <_wdt_set_timeout_period+0xaa>
			timeout_period_reg = WDT_PERIOD_2048CYCLE;
    42f0:	2308      	movs	r3, #8
			break;
    42f2:	e7ee      	b.n	42d2 <_wdt_set_timeout_period+0xaa>
			timeout_period_reg = WDT_PERIOD_8192CYCLE;
    42f4:	230a      	movs	r3, #10
			break;
    42f6:	e7ec      	b.n	42d2 <_wdt_set_timeout_period+0xaa>
			timeout_period_reg = WDT_PERIOD_16384CYCLE;
    42f8:	230b      	movs	r3, #11
			break;
    42fa:	e7ea      	b.n	42d2 <_wdt_set_timeout_period+0xaa>
		return ERR_DENIED;
    42fc:	f06f 0010 	mvn.w	r0, #16
    4300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4302:	bf00      	nop
    4304:	00001fdd 	.word	0x00001fdd
    4308:	0000c7b0 	.word	0x0000c7b0
    430c:	000041b9 	.word	0x000041b9

00004310 <_wdt_enable>:

/**
 * \brief enbale watchdog timer
 */
int32_t _wdt_enable(struct wdt_dev *const dev)
{
    4310:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    4312:	4604      	mov	r4, r0
    4314:	b188      	cbz	r0, 433a <_wdt_enable+0x2a>
    4316:	6800      	ldr	r0, [r0, #0]
    4318:	3000      	adds	r0, #0
    431a:	bf18      	it	ne
    431c:	2001      	movne	r0, #1
    431e:	4b07      	ldr	r3, [pc, #28]	; (433c <_wdt_enable+0x2c>)
    4320:	4907      	ldr	r1, [pc, #28]	; (4340 <_wdt_enable+0x30>)
    4322:	22fb      	movs	r2, #251	; 0xfb
    4324:	4798      	blx	r3

	hri_wdt_set_CTRLA_ENABLE_bit(dev->hw);
    4326:	6823      	ldr	r3, [r4, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    4328:	6898      	ldr	r0, [r3, #8]
    432a:	f010 000e 	ands.w	r0, r0, #14
    432e:	d1fb      	bne.n	4328 <_wdt_enable+0x18>
	((Wdt *)hw)->CTRLA.reg |= WDT_CTRLA_ENABLE;
    4330:	781a      	ldrb	r2, [r3, #0]
    4332:	f042 0202 	orr.w	r2, r2, #2
    4336:	701a      	strb	r2, [r3, #0]

	return ERR_NONE;
}
    4338:	bd10      	pop	{r4, pc}
    433a:	e7f0      	b.n	431e <_wdt_enable+0xe>
    433c:	00001fdd 	.word	0x00001fdd
    4340:	0000c7b0 	.word	0x0000c7b0

00004344 <_wdt_feed>:

/**
 * \brief reset watchdog timer to make wdt work from start
 */
int32_t _wdt_feed(struct wdt_dev *const dev)
{
    4344:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    4346:	4604      	mov	r4, r0
    4348:	b168      	cbz	r0, 4366 <_wdt_feed+0x22>
    434a:	6800      	ldr	r0, [r0, #0]
    434c:	3000      	adds	r0, #0
    434e:	bf18      	it	ne
    4350:	2001      	movne	r0, #1
    4352:	f240 1219 	movw	r2, #281	; 0x119
    4356:	4904      	ldr	r1, [pc, #16]	; (4368 <_wdt_feed+0x24>)
    4358:	4b04      	ldr	r3, [pc, #16]	; (436c <_wdt_feed+0x28>)
    435a:	4798      	blx	r3

	hri_wdt_write_CLEAR_reg(dev->hw, WDT_CLEAR_CLEAR_KEY);
    435c:	6823      	ldr	r3, [r4, #0]
	((Wdt *)hw)->CLEAR.reg = data;
    435e:	22a5      	movs	r2, #165	; 0xa5
    4360:	731a      	strb	r2, [r3, #12]

	return ERR_NONE;
}
    4362:	2000      	movs	r0, #0
    4364:	bd10      	pop	{r4, pc}
    4366:	e7f4      	b.n	4352 <_wdt_feed+0xe>
    4368:	0000c7b0 	.word	0x0000c7b0
    436c:	00001fdd 	.word	0x00001fdd

00004370 <gpio_set_pin_level>:
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    4370:	f000 031f 	and.w	r3, r0, #31
    4374:	0942      	lsrs	r2, r0, #5
    4376:	2001      	movs	r0, #1
    4378:	4098      	lsls	r0, r3
    437a:	4b04      	ldr	r3, [pc, #16]	; (438c <gpio_set_pin_level+0x1c>)
    437c:	01d2      	lsls	r2, r2, #7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    437e:	4413      	add	r3, r2
	if (level) {
    4380:	b109      	cbz	r1, 4386 <gpio_set_pin_level+0x16>
    4382:	6198      	str	r0, [r3, #24]
    4384:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4386:	6158      	str	r0, [r3, #20]
    4388:	4770      	bx	lr
    438a:	bf00      	nop
    438c:	41008000 	.word	0x41008000

00004390 <gpio_get_pin_level>:
{
    4390:	b537      	push	{r0, r1, r2, r4, r5, lr}
	CRITICAL_SECTION_ENTER();
    4392:	4b0e      	ldr	r3, [pc, #56]	; (43cc <gpio_get_pin_level+0x3c>)
    4394:	4605      	mov	r5, r0
    4396:	a801      	add	r0, sp, #4
    4398:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    439a:	096b      	lsrs	r3, r5, #5
    439c:	490c      	ldr	r1, [pc, #48]	; (43d0 <gpio_get_pin_level+0x40>)
    439e:	01db      	lsls	r3, r3, #7
    43a0:	18ca      	adds	r2, r1, r3
    43a2:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    43a4:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    43a6:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    43a8:	405c      	eors	r4, r3
    43aa:	400c      	ands	r4, r1
	CRITICAL_SECTION_LEAVE();
    43ac:	a801      	add	r0, sp, #4
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    43ae:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    43b0:	4b08      	ldr	r3, [pc, #32]	; (43d4 <gpio_get_pin_level+0x44>)
    43b2:	4798      	blx	r3
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    43b4:	f005 051f 	and.w	r5, r5, #31
    43b8:	2301      	movs	r3, #1
    43ba:	fa03 f505 	lsl.w	r5, r3, r5
    43be:	4225      	tst	r5, r4
}
    43c0:	bf14      	ite	ne
    43c2:	4618      	movne	r0, r3
    43c4:	2000      	moveq	r0, #0
    43c6:	b003      	add	sp, #12
    43c8:	bd30      	pop	{r4, r5, pc}
    43ca:	bf00      	nop
    43cc:	000011a5 	.word	0x000011a5
    43d0:	41008000 	.word	0x41008000
    43d4:	000011b3 	.word	0x000011b3

000043d8 <gpio_set_pin_direction>:
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    43d8:	2201      	movs	r2, #1
    43da:	0943      	lsrs	r3, r0, #5
	switch (direction) {
    43dc:	4291      	cmp	r1, r2
    43de:	f000 001f 	and.w	r0, r0, #31
    43e2:	fa02 f000 	lsl.w	r0, r2, r0
    43e6:	d015      	beq.n	4414 <gpio_set_pin_direction+0x3c>
    43e8:	d306      	bcc.n	43f8 <gpio_set_pin_direction+0x20>
    43ea:	2902      	cmp	r1, #2
    43ec:	d023      	beq.n	4436 <gpio_set_pin_direction+0x5e>
		ASSERT(false);
    43ee:	2245      	movs	r2, #69	; 0x45
    43f0:	4914      	ldr	r1, [pc, #80]	; (4444 <gpio_set_pin_direction+0x6c>)
    43f2:	4b15      	ldr	r3, [pc, #84]	; (4448 <gpio_set_pin_direction+0x70>)
    43f4:	2000      	movs	r0, #0
    43f6:	4718      	bx	r3
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    43f8:	01db      	lsls	r3, r3, #7
    43fa:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    43fe:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    4402:	6058      	str	r0, [r3, #4]
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    4404:	b282      	uxth	r2, r0
    4406:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    440a:	0c00      	lsrs	r0, r0, #16
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    440c:	629a      	str	r2, [r3, #40]	; 0x28
		hri_port_write_WRCONFIG_reg(
    440e:	f040 4040 	orr.w	r0, r0, #3221225472	; 0xc0000000
    4412:	e00e      	b.n	4432 <gpio_set_pin_direction+0x5a>
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    4414:	01db      	lsls	r3, r3, #7
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    4416:	b282      	uxth	r2, r0
    4418:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    441c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    4420:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    4424:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    4428:	6058      	str	r0, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    442a:	629a      	str	r2, [r3, #40]	; 0x28
		hri_port_write_WRCONFIG_reg(PORT,
    442c:	4a07      	ldr	r2, [pc, #28]	; (444c <gpio_set_pin_direction+0x74>)
    442e:	ea42 4010 	orr.w	r0, r2, r0, lsr #16
    4432:	6298      	str	r0, [r3, #40]	; 0x28
    4434:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4436:	01db      	lsls	r3, r3, #7
    4438:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    443c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    4440:	6098      	str	r0, [r3, #8]
    4442:	e7df      	b.n	4404 <gpio_set_pin_direction+0x2c>
    4444:	0000c7c5 	.word	0x0000c7c5
    4448:	00001fdd 	.word	0x00001fdd
    444c:	c0020000 	.word	0xc0020000

00004450 <I2C_configMONITOREDINPUTS>:
// * CALLED BY:			  main()                                                                                                       *
// * CALLS:		          No function. ALL macros defined in this function file.                                                       *
// * --------------------------------------------------------------------------------------------------------------------------------- *
int I2C_configMONITOREDINPUTS(uint8_t sda,  uint8_t clk, unsigned char channel)

{
    4450:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4454:	460f      	mov	r7, r1
    4456:	4606      	mov	r6, r0
	/* Clip channel for correct assignment */
    channel &= 0x03;

	/* Open an I2C channel, send address 0x68, then send the configuration values for setting up a conversion result */
	I2C_OPEN(sda, clk);
	I2C_START(-1);
    4458:	4d67      	ldr	r5, [pc, #412]	; (45f8 <I2C_configMONITOREDINPUTS+0x1a8>)
    445a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 4600 <I2C_configMONITOREDINPUTS+0x1b0>
    445e:	4c67      	ldr	r4, [pc, #412]	; (45fc <I2C_configMONITOREDINPUTS+0x1ac>)
    4460:	2101      	movs	r1, #1
    4462:	4638      	mov	r0, r7
    channel &= 0x03;
    4464:	f002 0a03 	and.w	sl, r2, #3
	I2C_START(-1);
    4468:	47a8      	blx	r5
    446a:	2101      	movs	r1, #1
    446c:	4630      	mov	r0, r6
    446e:	47a8      	blx	r5
    4470:	2102      	movs	r1, #2
    4472:	4630      	mov	r0, r6
    4474:	47c0      	blx	r8
    4476:	200f      	movs	r0, #15
    4478:	47a0      	blx	r4
    447a:	200f      	movs	r0, #15
    447c:	47a0      	blx	r4
    447e:	2100      	movs	r1, #0
    4480:	4630      	mov	r0, r6
    4482:	47a8      	blx	r5
    4484:	200f      	movs	r0, #15
    4486:	47a0      	blx	r4
    4488:	2100      	movs	r1, #0
    448a:	4638      	mov	r0, r7
    448c:	47a8      	blx	r5
    448e:	200f      	movs	r0, #15
    4490:	47a0      	blx	r4
    4492:	f04f 0907 	mov.w	r9, #7
	I2C_SENDADDR(0x68, forloop);
    4496:	f04f 0b40 	mov.w	fp, #64	; 0x40
    449a:	f01b 0168 	ands.w	r1, fp, #104	; 0x68
    449e:	bf18      	it	ne
    44a0:	2101      	movne	r1, #1
    44a2:	4630      	mov	r0, r6
    44a4:	47a8      	blx	r5
    44a6:	200f      	movs	r0, #15
    44a8:	47a0      	blx	r4
    44aa:	2101      	movs	r1, #1
    44ac:	4638      	mov	r0, r7
    44ae:	47a8      	blx	r5
    44b0:	200f      	movs	r0, #15
    44b2:	47a0      	blx	r4
    44b4:	2100      	movs	r1, #0
    44b6:	4638      	mov	r0, r7
    44b8:	47a8      	blx	r5
    44ba:	200f      	movs	r0, #15
    44bc:	47a0      	blx	r4
    44be:	f1b9 0901 	subs.w	r9, r9, #1
    44c2:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
    44c6:	d1e8      	bne.n	449a <I2C_configMONITOREDINPUTS+0x4a>
	I2C_WRITE();
    44c8:	4649      	mov	r1, r9
    44ca:	4630      	mov	r0, r6
    44cc:	47a8      	blx	r5
    44ce:	200f      	movs	r0, #15
    44d0:	47a0      	blx	r4
    44d2:	2101      	movs	r1, #1
    44d4:	4638      	mov	r0, r7
    44d6:	47a8      	blx	r5
    44d8:	200f      	movs	r0, #15
    44da:	47a0      	blx	r4
    44dc:	4649      	mov	r1, r9
    44de:	4638      	mov	r0, r7
    44e0:	47a8      	blx	r5
    44e2:	200f      	movs	r0, #15
    44e4:	47a0      	blx	r4
	I2C_WAITACKOP(-2);
    44e6:	2101      	movs	r1, #1
    44e8:	4630      	mov	r0, r6
    44ea:	47c0      	blx	r8
    44ec:	200f      	movs	r0, #15
    44ee:	47a0      	blx	r4
    44f0:	2101      	movs	r1, #1
    44f2:	4638      	mov	r0, r7
    44f4:	47a8      	blx	r5
    44f6:	200f      	movs	r0, #15
    44f8:	47a0      	blx	r4
    44fa:	f8df b108 	ldr.w	fp, [pc, #264]	; 4604 <I2C_configMONITOREDINPUTS+0x1b4>
    44fe:	4630      	mov	r0, r6
    4500:	47d8      	blx	fp
    4502:	f8cd b004 	str.w	fp, [sp, #4]
    4506:	b198      	cbz	r0, 4530 <I2C_configMONITOREDINPUTS+0xe0>
    4508:	2101      	movs	r1, #1
    450a:	4638      	mov	r0, r7
    450c:	47a8      	blx	r5
    450e:	200f      	movs	r0, #15
    4510:	47a0      	blx	r4
    4512:	2101      	movs	r1, #1
    4514:	4630      	mov	r0, r6
    4516:	47a8      	blx	r5
    4518:	200f      	movs	r0, #15
    451a:	47a0      	blx	r4
    451c:	2102      	movs	r1, #2
    451e:	4630      	mov	r0, r6
    4520:	47c0      	blx	r8
    4522:	200f      	movs	r0, #15
    4524:	47a0      	blx	r4
    4526:	f06f 0001 	mvn.w	r0, #1
	/* If successful, and code execution got here, the close the I2C channel */
	I2C_STOP();
	I2C_CLOSE();
	
	return 0;
}
    452a:	b003      	add	sp, #12
    452c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	I2C_WAITACKOP(-2);
    4530:	4649      	mov	r1, r9
    4532:	4638      	mov	r0, r7
    4534:	47a8      	blx	r5
    4536:	200f      	movs	r0, #15
    4538:	47a0      	blx	r4
    453a:	2102      	movs	r1, #2
    453c:	4630      	mov	r0, r6
    453e:	47c0      	blx	r8
    4540:	200f      	movs	r0, #15
    4542:	47a0      	blx	r4
	I2C_SENDDATA(((channel << 5) + 0x80), forloop);
    4544:	ea4f 1a4a 	mov.w	sl, sl, lsl #5
    4548:	f10a 0a80 	add.w	sl, sl, #128	; 0x80
    454c:	f04f 0908 	mov.w	r9, #8
    4550:	f04f 0b80 	mov.w	fp, #128	; 0x80
    4554:	ea1b 010a 	ands.w	r1, fp, sl
    4558:	bf18      	it	ne
    455a:	2101      	movne	r1, #1
    455c:	4630      	mov	r0, r6
    455e:	47a8      	blx	r5
    4560:	200f      	movs	r0, #15
    4562:	47a0      	blx	r4
    4564:	2101      	movs	r1, #1
    4566:	4638      	mov	r0, r7
    4568:	47a8      	blx	r5
    456a:	200f      	movs	r0, #15
    456c:	47a0      	blx	r4
    456e:	2100      	movs	r1, #0
    4570:	4638      	mov	r0, r7
    4572:	47a8      	blx	r5
    4574:	200f      	movs	r0, #15
    4576:	47a0      	blx	r4
    4578:	f1b9 0901 	subs.w	r9, r9, #1
    457c:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
    4580:	d1e8      	bne.n	4554 <I2C_configMONITOREDINPUTS+0x104>
	I2C_WAITACKOP(-3);
    4582:	2101      	movs	r1, #1
    4584:	4630      	mov	r0, r6
    4586:	47c0      	blx	r8
    4588:	200f      	movs	r0, #15
    458a:	47a0      	blx	r4
    458c:	2101      	movs	r1, #1
    458e:	4638      	mov	r0, r7
    4590:	47a8      	blx	r5
    4592:	200f      	movs	r0, #15
    4594:	47a0      	blx	r4
    4596:	4630      	mov	r0, r6
    4598:	9b01      	ldr	r3, [sp, #4]
    459a:	4798      	blx	r3
    459c:	b188      	cbz	r0, 45c2 <I2C_configMONITOREDINPUTS+0x172>
    459e:	2101      	movs	r1, #1
    45a0:	4638      	mov	r0, r7
    45a2:	47a8      	blx	r5
    45a4:	200f      	movs	r0, #15
    45a6:	47a0      	blx	r4
    45a8:	2101      	movs	r1, #1
    45aa:	4630      	mov	r0, r6
    45ac:	47a8      	blx	r5
    45ae:	200f      	movs	r0, #15
    45b0:	47a0      	blx	r4
    45b2:	2102      	movs	r1, #2
    45b4:	4630      	mov	r0, r6
    45b6:	47c0      	blx	r8
    45b8:	200f      	movs	r0, #15
    45ba:	47a0      	blx	r4
    45bc:	f06f 0002 	mvn.w	r0, #2
    45c0:	e7b3      	b.n	452a <I2C_configMONITOREDINPUTS+0xda>
    45c2:	4649      	mov	r1, r9
    45c4:	4638      	mov	r0, r7
    45c6:	47a8      	blx	r5
    45c8:	200f      	movs	r0, #15
    45ca:	47a0      	blx	r4
    45cc:	2102      	movs	r1, #2
    45ce:	4630      	mov	r0, r6
    45d0:	47c0      	blx	r8
    45d2:	200f      	movs	r0, #15
    45d4:	47a0      	blx	r4
	I2C_STOP();
    45d6:	2101      	movs	r1, #1
    45d8:	4638      	mov	r0, r7
    45da:	47a8      	blx	r5
    45dc:	200f      	movs	r0, #15
    45de:	47a0      	blx	r4
    45e0:	2101      	movs	r1, #1
    45e2:	4630      	mov	r0, r6
    45e4:	47a8      	blx	r5
    45e6:	200f      	movs	r0, #15
    45e8:	47a0      	blx	r4
    45ea:	2102      	movs	r1, #2
    45ec:	4630      	mov	r0, r6
    45ee:	47c0      	blx	r8
    45f0:	200f      	movs	r0, #15
    45f2:	47a0      	blx	r4
	return 0;
    45f4:	4648      	mov	r0, r9
    45f6:	e798      	b.n	452a <I2C_configMONITOREDINPUTS+0xda>
    45f8:	00004371 	.word	0x00004371
    45fc:	00001201 	.word	0x00001201
    4600:	000043d9 	.word	0x000043d9
    4604:	00004391 	.word	0x00004391

00004608 <I2C_readMONITOREDINPUT>:
// * CALLED BY:			  main()                                                                                                       *
// * CALLS:		          No function. ALL macros defined in this function file.                                                       *
// * --------------------------------------------------------------------------------------------------------------------------------- *
int I2C_readMONITOREDINPUT(uint8_t sda,  uint8_t clk, unsigned char *inputH, unsigned char *inputL)

{
    4608:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    460c:	4606      	mov	r6, r0
    460e:	460f      	mov	r7, r1
    4610:	4693      	mov	fp, r2
	uint8_t     		i2csda, i2cclk;
	unsigned char		forloop;

	if ((!inputL) || (!inputH)) {
    4612:	469a      	mov	sl, r3
    4614:	2b00      	cmp	r3, #0
    4616:	f000 80f6 	beq.w	4806 <I2C_readMONITOREDINPUT+0x1fe>
    461a:	2a00      	cmp	r2, #0
    461c:	f000 80f3 	beq.w	4806 <I2C_readMONITOREDINPUT+0x1fe>
		return -1;
	}

	/* Open an I2C channel, send address 0x68, then read the input value */
	I2C_OPEN(sda, clk);
	I2C_START(-2);
    4620:	4d7a      	ldr	r5, [pc, #488]	; (480c <I2C_readMONITOREDINPUT+0x204>)
    4622:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 4818 <I2C_readMONITOREDINPUT+0x210>
    4626:	4c7a      	ldr	r4, [pc, #488]	; (4810 <I2C_readMONITOREDINPUT+0x208>)
    4628:	2101      	movs	r1, #1
    462a:	4638      	mov	r0, r7
    462c:	47a8      	blx	r5
    462e:	2101      	movs	r1, #1
    4630:	4630      	mov	r0, r6
    4632:	47a8      	blx	r5
    4634:	2102      	movs	r1, #2
    4636:	4630      	mov	r0, r6
    4638:	47c0      	blx	r8
    463a:	200f      	movs	r0, #15
    463c:	47a0      	blx	r4
    463e:	200f      	movs	r0, #15
    4640:	47a0      	blx	r4
    4642:	2100      	movs	r1, #0
    4644:	4630      	mov	r0, r6
    4646:	47a8      	blx	r5
    4648:	200f      	movs	r0, #15
    464a:	47a0      	blx	r4
    464c:	2100      	movs	r1, #0
    464e:	4638      	mov	r0, r7
    4650:	47a8      	blx	r5
    4652:	200f      	movs	r0, #15
    4654:	47a0      	blx	r4
	I2C_SENDADDR(0x68, forloop);
    4656:	2340      	movs	r3, #64	; 0x40
	I2C_START(-2);
    4658:	f04f 0907 	mov.w	r9, #7
	I2C_SENDADDR(0x68, forloop);
    465c:	9300      	str	r3, [sp, #0]
    465e:	9b00      	ldr	r3, [sp, #0]
    4660:	f013 0168 	ands.w	r1, r3, #104	; 0x68
    4664:	bf18      	it	ne
    4666:	2101      	movne	r1, #1
    4668:	4630      	mov	r0, r6
    466a:	47a8      	blx	r5
    466c:	200f      	movs	r0, #15
    466e:	47a0      	blx	r4
    4670:	2101      	movs	r1, #1
    4672:	4638      	mov	r0, r7
    4674:	47a8      	blx	r5
    4676:	200f      	movs	r0, #15
    4678:	47a0      	blx	r4
    467a:	2100      	movs	r1, #0
    467c:	4638      	mov	r0, r7
    467e:	47a8      	blx	r5
    4680:	200f      	movs	r0, #15
    4682:	47a0      	blx	r4
    4684:	9b00      	ldr	r3, [sp, #0]
    4686:	f1b9 0901 	subs.w	r9, r9, #1
    468a:	ea4f 0353 	mov.w	r3, r3, lsr #1
    468e:	9300      	str	r3, [sp, #0]
    4690:	d1e5      	bne.n	465e <I2C_readMONITOREDINPUT+0x56>
	I2C_READ();
    4692:	2101      	movs	r1, #1
    4694:	4630      	mov	r0, r6
    4696:	47a8      	blx	r5
    4698:	200f      	movs	r0, #15
    469a:	47a0      	blx	r4
    469c:	2101      	movs	r1, #1
    469e:	4638      	mov	r0, r7
    46a0:	47a8      	blx	r5
    46a2:	200f      	movs	r0, #15
    46a4:	47a0      	blx	r4
    46a6:	4649      	mov	r1, r9
    46a8:	4638      	mov	r0, r7
    46aa:	47a8      	blx	r5
    46ac:	200f      	movs	r0, #15
    46ae:	47a0      	blx	r4
	I2C_WAITACKIP(-3);
    46b0:	2101      	movs	r1, #1
    46b2:	4630      	mov	r0, r6
    46b4:	47c0      	blx	r8
    46b6:	200f      	movs	r0, #15
    46b8:	47a0      	blx	r4
    46ba:	2101      	movs	r1, #1
    46bc:	4638      	mov	r0, r7
    46be:	47a8      	blx	r5
    46c0:	200f      	movs	r0, #15
    46c2:	47a0      	blx	r4
    46c4:	4b53      	ldr	r3, [pc, #332]	; (4814 <I2C_readMONITOREDINPUT+0x20c>)
    46c6:	9300      	str	r3, [sp, #0]
    46c8:	4630      	mov	r0, r6
    46ca:	4798      	blx	r3
    46cc:	b198      	cbz	r0, 46f6 <I2C_readMONITOREDINPUT+0xee>
    46ce:	2101      	movs	r1, #1
    46d0:	4638      	mov	r0, r7
    46d2:	47a8      	blx	r5
    46d4:	200f      	movs	r0, #15
    46d6:	47a0      	blx	r4
    46d8:	2101      	movs	r1, #1
    46da:	4630      	mov	r0, r6
    46dc:	47a8      	blx	r5
    46de:	200f      	movs	r0, #15
    46e0:	47a0      	blx	r4
    46e2:	2102      	movs	r1, #2
    46e4:	4630      	mov	r0, r6
    46e6:	47c0      	blx	r8
    46e8:	200f      	movs	r0, #15
    46ea:	47a0      	blx	r4
    46ec:	f06f 0002 	mvn.w	r0, #2
	I2C_STOP();
	I2C_CLOSE();
	/* If successful, and code execution got here, the close the I2C channel */
	
	return 0;
}
    46f0:	b003      	add	sp, #12
    46f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	I2C_WAITACKIP(-3);
    46f6:	4649      	mov	r1, r9
    46f8:	4638      	mov	r0, r7
    46fa:	47a8      	blx	r5
    46fc:	200f      	movs	r0, #15
    46fe:	47a0      	blx	r4
	*inputH = 0;
    4700:	f88b 9000 	strb.w	r9, [fp]
	for (forloop = 0x80; forloop > 0;) {
    4704:	2380      	movs	r3, #128	; 0x80
	*inputH = 0;
    4706:	f04f 0908 	mov.w	r9, #8
		I2C_clockhi();
    470a:	2101      	movs	r1, #1
    470c:	4638      	mov	r0, r7
    470e:	9301      	str	r3, [sp, #4]
    4710:	47a8      	blx	r5
    4712:	200f      	movs	r0, #15
    4714:	47a0      	blx	r4
		if (gpio_get_pin_level(i2csda)) {
    4716:	9b00      	ldr	r3, [sp, #0]
    4718:	4630      	mov	r0, r6
    471a:	4798      	blx	r3
    471c:	9b01      	ldr	r3, [sp, #4]
    471e:	b120      	cbz	r0, 472a <I2C_readMONITOREDINPUT+0x122>
			(*inputH) |= forloop;
    4720:	f89b 2000 	ldrb.w	r2, [fp]
    4724:	431a      	orrs	r2, r3
    4726:	f88b 2000 	strb.w	r2, [fp]
		I2C_clocklo();
    472a:	2100      	movs	r1, #0
    472c:	4638      	mov	r0, r7
    472e:	9301      	str	r3, [sp, #4]
    4730:	47a8      	blx	r5
    4732:	200f      	movs	r0, #15
    4734:	47a0      	blx	r4
		forloop = forloop / 2;
    4736:	9b01      	ldr	r3, [sp, #4]
	for (forloop = 0x80; forloop > 0;) {
    4738:	f1b9 0901 	subs.w	r9, r9, #1
		forloop = forloop / 2;
    473c:	ea4f 0353 	mov.w	r3, r3, lsr #1
	for (forloop = 0x80; forloop > 0;) {
    4740:	d1e3      	bne.n	470a <I2C_readMONITOREDINPUT+0x102>
	I2C_SENDACK();
    4742:	2102      	movs	r1, #2
    4744:	4630      	mov	r0, r6
    4746:	47c0      	blx	r8
    4748:	200f      	movs	r0, #15
    474a:	47a0      	blx	r4
    474c:	4649      	mov	r1, r9
    474e:	4630      	mov	r0, r6
    4750:	47a8      	blx	r5
    4752:	200f      	movs	r0, #15
    4754:	47a0      	blx	r4
    4756:	2101      	movs	r1, #1
    4758:	4638      	mov	r0, r7
    475a:	47a8      	blx	r5
    475c:	200f      	movs	r0, #15
    475e:	47a0      	blx	r4
    4760:	4649      	mov	r1, r9
    4762:	4638      	mov	r0, r7
    4764:	47a8      	blx	r5
    4766:	200f      	movs	r0, #15
    4768:	47a0      	blx	r4
    476a:	2101      	movs	r1, #1
    476c:	4630      	mov	r0, r6
    476e:	47c0      	blx	r8
    4770:	200f      	movs	r0, #15
    4772:	47a0      	blx	r4
	for (forloop = 0x80; forloop > 0;) {
    4774:	f04f 0b80 	mov.w	fp, #128	; 0x80
	*inputL = 0;
    4778:	f88a 9000 	strb.w	r9, [sl]
    477c:	f04f 0908 	mov.w	r9, #8
		I2C_clockhi();
    4780:	2101      	movs	r1, #1
    4782:	4638      	mov	r0, r7
    4784:	47a8      	blx	r5
    4786:	200f      	movs	r0, #15
    4788:	47a0      	blx	r4
		if (gpio_get_pin_level(i2csda)) {
    478a:	4630      	mov	r0, r6
    478c:	9b00      	ldr	r3, [sp, #0]
    478e:	4798      	blx	r3
    4790:	b128      	cbz	r0, 479e <I2C_readMONITOREDINPUT+0x196>
			(*inputL) |= forloop;
    4792:	f89a 3000 	ldrb.w	r3, [sl]
    4796:	ea4b 0303 	orr.w	r3, fp, r3
    479a:	f88a 3000 	strb.w	r3, [sl]
		I2C_clocklo();
    479e:	2100      	movs	r1, #0
    47a0:	4638      	mov	r0, r7
    47a2:	47a8      	blx	r5
    47a4:	200f      	movs	r0, #15
    47a6:	47a0      	blx	r4
	for (forloop = 0x80; forloop > 0;) {
    47a8:	f1b9 0901 	subs.w	r9, r9, #1
		forloop = forloop / 2;
    47ac:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
	for (forloop = 0x80; forloop > 0;) {
    47b0:	d1e6      	bne.n	4780 <I2C_readMONITOREDINPUT+0x178>
	I2C_SENDNACK();	
    47b2:	2102      	movs	r1, #2
    47b4:	4630      	mov	r0, r6
    47b6:	47c0      	blx	r8
    47b8:	200f      	movs	r0, #15
    47ba:	47a0      	blx	r4
    47bc:	2101      	movs	r1, #1
    47be:	4630      	mov	r0, r6
    47c0:	47a8      	blx	r5
    47c2:	200f      	movs	r0, #15
    47c4:	47a0      	blx	r4
    47c6:	2101      	movs	r1, #1
    47c8:	4638      	mov	r0, r7
    47ca:	47a8      	blx	r5
    47cc:	200f      	movs	r0, #15
    47ce:	47a0      	blx	r4
    47d0:	4649      	mov	r1, r9
    47d2:	4638      	mov	r0, r7
    47d4:	47a8      	blx	r5
    47d6:	200f      	movs	r0, #15
    47d8:	47a0      	blx	r4
    47da:	2101      	movs	r1, #1
    47dc:	4630      	mov	r0, r6
    47de:	47c0      	blx	r8
    47e0:	200f      	movs	r0, #15
    47e2:	47a0      	blx	r4
	I2C_STOP();
    47e4:	2101      	movs	r1, #1
    47e6:	4638      	mov	r0, r7
    47e8:	47a8      	blx	r5
    47ea:	200f      	movs	r0, #15
    47ec:	47a0      	blx	r4
    47ee:	2101      	movs	r1, #1
    47f0:	4630      	mov	r0, r6
    47f2:	47a8      	blx	r5
    47f4:	200f      	movs	r0, #15
    47f6:	47a0      	blx	r4
    47f8:	2102      	movs	r1, #2
    47fa:	4630      	mov	r0, r6
    47fc:	47c0      	blx	r8
    47fe:	200f      	movs	r0, #15
    4800:	47a0      	blx	r4
	return 0;
    4802:	4648      	mov	r0, r9
    4804:	e774      	b.n	46f0 <I2C_readMONITOREDINPUT+0xe8>
		return -1;
    4806:	f04f 30ff 	mov.w	r0, #4294967295
    480a:	e771      	b.n	46f0 <I2C_readMONITOREDINPUT+0xe8>
    480c:	00004371 	.word	0x00004371
    4810:	00001201 	.word	0x00001201
    4814:	00004391 	.word	0x00004391
    4818:	000043d9 	.word	0x000043d9

0000481c <I2C_configEXPANDER>:
// * CALLED BY:			  main()                                                                                                       *
// * CALLS:		          No function. ALL macros defined in this function file.                                                       *
// * --------------------------------------------------------------------------------------------------------------------------------- *
int I2C_configEXPANDER(uint8_t sda,  uint8_t clk)

{
    481c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4820:	460f      	mov	r7, r1
    4822:	4606      	mov	r6, r0
	uint8_t     		i2csda, i2cclk;
	unsigned char		forloop;

	/* Open an I2C channel, send address 0x41, index register 0x01 then send the 3 configuration values for inversion, output default and the direction register */
	I2C_OPEN(sda, clk);
	I2C_START(-1);
    4824:	4d76      	ldr	r5, [pc, #472]	; (4a00 <I2C_configEXPANDER+0x1e4>)
    4826:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 4a08 <I2C_configEXPANDER+0x1ec>
    482a:	4c76      	ldr	r4, [pc, #472]	; (4a04 <I2C_configEXPANDER+0x1e8>)
    482c:	2101      	movs	r1, #1
    482e:	4638      	mov	r0, r7
    4830:	47a8      	blx	r5
    4832:	2101      	movs	r1, #1
    4834:	4630      	mov	r0, r6
    4836:	47a8      	blx	r5
    4838:	2102      	movs	r1, #2
    483a:	4630      	mov	r0, r6
    483c:	47c0      	blx	r8
    483e:	200f      	movs	r0, #15
    4840:	47a0      	blx	r4
    4842:	200f      	movs	r0, #15
    4844:	47a0      	blx	r4
    4846:	2100      	movs	r1, #0
    4848:	4630      	mov	r0, r6
    484a:	47a8      	blx	r5
    484c:	200f      	movs	r0, #15
    484e:	47a0      	blx	r4
    4850:	2100      	movs	r1, #0
    4852:	4638      	mov	r0, r7
    4854:	47a8      	blx	r5
    4856:	200f      	movs	r0, #15
    4858:	47a0      	blx	r4
    485a:	f04f 0907 	mov.w	r9, #7
	I2C_SENDADDR(0x41, forloop);
    485e:	f04f 0a40 	mov.w	sl, #64	; 0x40
    4862:	f01a 0141 	ands.w	r1, sl, #65	; 0x41
    4866:	bf18      	it	ne
    4868:	2101      	movne	r1, #1
    486a:	4630      	mov	r0, r6
    486c:	47a8      	blx	r5
    486e:	200f      	movs	r0, #15
    4870:	47a0      	blx	r4
    4872:	2101      	movs	r1, #1
    4874:	4638      	mov	r0, r7
    4876:	47a8      	blx	r5
    4878:	200f      	movs	r0, #15
    487a:	47a0      	blx	r4
    487c:	2100      	movs	r1, #0
    487e:	4638      	mov	r0, r7
    4880:	47a8      	blx	r5
    4882:	200f      	movs	r0, #15
    4884:	47a0      	blx	r4
    4886:	f1b9 0901 	subs.w	r9, r9, #1
    488a:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
    488e:	d1e8      	bne.n	4862 <I2C_configEXPANDER+0x46>
	I2C_WRITE();
    4890:	4649      	mov	r1, r9
    4892:	4630      	mov	r0, r6
    4894:	47a8      	blx	r5
    4896:	200f      	movs	r0, #15
    4898:	47a0      	blx	r4
    489a:	2101      	movs	r1, #1
    489c:	4638      	mov	r0, r7
    489e:	47a8      	blx	r5
    48a0:	200f      	movs	r0, #15
    48a2:	47a0      	blx	r4
    48a4:	4649      	mov	r1, r9
    48a6:	4638      	mov	r0, r7
    48a8:	47a8      	blx	r5
    48aa:	200f      	movs	r0, #15
    48ac:	47a0      	blx	r4
	I2C_WAITACKOP(-2);
    48ae:	2101      	movs	r1, #1
    48b0:	4630      	mov	r0, r6
    48b2:	47c0      	blx	r8
    48b4:	200f      	movs	r0, #15
    48b6:	47a0      	blx	r4
    48b8:	2101      	movs	r1, #1
    48ba:	4638      	mov	r0, r7
    48bc:	47a8      	blx	r5
    48be:	200f      	movs	r0, #15
    48c0:	47a0      	blx	r4
    48c2:	f8df a148 	ldr.w	sl, [pc, #328]	; 4a0c <I2C_configEXPANDER+0x1f0>
    48c6:	4630      	mov	r0, r6
    48c8:	47d0      	blx	sl
    48ca:	f8cd a000 	str.w	sl, [sp]
    48ce:	b198      	cbz	r0, 48f8 <I2C_configEXPANDER+0xdc>
    48d0:	2101      	movs	r1, #1
    48d2:	4638      	mov	r0, r7
    48d4:	47a8      	blx	r5
    48d6:	200f      	movs	r0, #15
    48d8:	47a0      	blx	r4
    48da:	2101      	movs	r1, #1
    48dc:	4630      	mov	r0, r6
    48de:	47a8      	blx	r5
    48e0:	200f      	movs	r0, #15
    48e2:	47a0      	blx	r4
    48e4:	2102      	movs	r1, #2
    48e6:	4630      	mov	r0, r6
    48e8:	47c0      	blx	r8
    48ea:	200f      	movs	r0, #15
    48ec:	47a0      	blx	r4
    48ee:	f06f 0001 	mvn.w	r0, #1
	/* If successful, and code execution got here, the close the I2C channel */
	I2C_STOP();
	I2C_CLOSE();
	
	return 0;
}
    48f2:	b003      	add	sp, #12
    48f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	I2C_WAITACKOP(-2);
    48f8:	4649      	mov	r1, r9
    48fa:	4638      	mov	r0, r7
    48fc:	47a8      	blx	r5
    48fe:	200f      	movs	r0, #15
    4900:	47a0      	blx	r4
    4902:	2102      	movs	r1, #2
    4904:	4630      	mov	r0, r6
    4906:	47c0      	blx	r8
    4908:	200f      	movs	r0, #15
    490a:	47a0      	blx	r4
    490c:	f04f 0908 	mov.w	r9, #8
	I2C_SENDDATA(0x01, forloop);
    4910:	f04f 0b80 	mov.w	fp, #128	; 0x80
    4914:	f01b 0101 	ands.w	r1, fp, #1
    4918:	bf18      	it	ne
    491a:	2101      	movne	r1, #1
    491c:	4630      	mov	r0, r6
    491e:	47a8      	blx	r5
    4920:	200f      	movs	r0, #15
    4922:	47a0      	blx	r4
    4924:	2101      	movs	r1, #1
    4926:	4638      	mov	r0, r7
    4928:	47a8      	blx	r5
    492a:	200f      	movs	r0, #15
    492c:	47a0      	blx	r4
    492e:	2100      	movs	r1, #0
    4930:	4638      	mov	r0, r7
    4932:	47a8      	blx	r5
    4934:	200f      	movs	r0, #15
    4936:	47a0      	blx	r4
    4938:	f1b9 0901 	subs.w	r9, r9, #1
    493c:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
    4940:	d1e8      	bne.n	4914 <I2C_configEXPANDER+0xf8>
	I2C_WAITACKOP(-3);
    4942:	2101      	movs	r1, #1
    4944:	4630      	mov	r0, r6
    4946:	47c0      	blx	r8
    4948:	200f      	movs	r0, #15
    494a:	47a0      	blx	r4
    494c:	2101      	movs	r1, #1
    494e:	4638      	mov	r0, r7
    4950:	47a8      	blx	r5
    4952:	200f      	movs	r0, #15
    4954:	47a0      	blx	r4
    4956:	4630      	mov	r0, r6
    4958:	9b00      	ldr	r3, [sp, #0]
    495a:	4798      	blx	r3
    495c:	b188      	cbz	r0, 4982 <I2C_configEXPANDER+0x166>
    495e:	2101      	movs	r1, #1
    4960:	4638      	mov	r0, r7
    4962:	47a8      	blx	r5
    4964:	200f      	movs	r0, #15
    4966:	47a0      	blx	r4
    4968:	2101      	movs	r1, #1
    496a:	4630      	mov	r0, r6
    496c:	47a8      	blx	r5
    496e:	200f      	movs	r0, #15
    4970:	47a0      	blx	r4
    4972:	2102      	movs	r1, #2
    4974:	4630      	mov	r0, r6
    4976:	47c0      	blx	r8
    4978:	200f      	movs	r0, #15
    497a:	47a0      	blx	r4
    497c:	f06f 0002 	mvn.w	r0, #2
    4980:	e7b7      	b.n	48f2 <I2C_configEXPANDER+0xd6>
    4982:	4649      	mov	r1, r9
    4984:	4638      	mov	r0, r7
    4986:	47a8      	blx	r5
    4988:	200f      	movs	r0, #15
    498a:	47a0      	blx	r4
    498c:	2102      	movs	r1, #2
    498e:	4630      	mov	r0, r6
    4990:	47c0      	blx	r8
    4992:	200f      	movs	r0, #15
    4994:	47a0      	blx	r4
    4996:	f04f 0908 	mov.w	r9, #8
	I2C_SENDDATA(0x00, forloop);
    499a:	2100      	movs	r1, #0
    499c:	4630      	mov	r0, r6
    499e:	47a8      	blx	r5
    49a0:	200f      	movs	r0, #15
    49a2:	47a0      	blx	r4
    49a4:	2101      	movs	r1, #1
    49a6:	4638      	mov	r0, r7
    49a8:	47a8      	blx	r5
    49aa:	200f      	movs	r0, #15
    49ac:	47a0      	blx	r4
    49ae:	2100      	movs	r1, #0
    49b0:	4638      	mov	r0, r7
    49b2:	47a8      	blx	r5
    49b4:	200f      	movs	r0, #15
    49b6:	47a0      	blx	r4
    49b8:	f1b9 0901 	subs.w	r9, r9, #1
    49bc:	d1ed      	bne.n	499a <I2C_configEXPANDER+0x17e>
	I2C_WAITACKOP(-4);
    49be:	2101      	movs	r1, #1
    49c0:	4630      	mov	r0, r6
    49c2:	47c0      	blx	r8
    49c4:	200f      	movs	r0, #15
    49c6:	47a0      	blx	r4
    49c8:	2101      	movs	r1, #1
    49ca:	4638      	mov	r0, r7
    49cc:	47a8      	blx	r5
    49ce:	200f      	movs	r0, #15
    49d0:	47a0      	blx	r4
    49d2:	4630      	mov	r0, r6
    49d4:	9b00      	ldr	r3, [sp, #0]
    49d6:	4798      	blx	r3
    49d8:	b1d0      	cbz	r0, 4a10 <I2C_configEXPANDER+0x1f4>
    49da:	2101      	movs	r1, #1
    49dc:	4638      	mov	r0, r7
    49de:	47a8      	blx	r5
    49e0:	200f      	movs	r0, #15
    49e2:	47a0      	blx	r4
    49e4:	2101      	movs	r1, #1
    49e6:	4630      	mov	r0, r6
    49e8:	47a8      	blx	r5
    49ea:	200f      	movs	r0, #15
    49ec:	47a0      	blx	r4
    49ee:	2102      	movs	r1, #2
    49f0:	4630      	mov	r0, r6
    49f2:	47c0      	blx	r8
    49f4:	200f      	movs	r0, #15
    49f6:	47a0      	blx	r4
    49f8:	f06f 0003 	mvn.w	r0, #3
    49fc:	e779      	b.n	48f2 <I2C_configEXPANDER+0xd6>
    49fe:	bf00      	nop
    4a00:	00004371 	.word	0x00004371
    4a04:	00001201 	.word	0x00001201
    4a08:	000043d9 	.word	0x000043d9
    4a0c:	00004391 	.word	0x00004391
    4a10:	4649      	mov	r1, r9
    4a12:	4638      	mov	r0, r7
    4a14:	47a8      	blx	r5
    4a16:	200f      	movs	r0, #15
    4a18:	47a0      	blx	r4
    4a1a:	2102      	movs	r1, #2
    4a1c:	4630      	mov	r0, r6
    4a1e:	47c0      	blx	r8
    4a20:	200f      	movs	r0, #15
    4a22:	47a0      	blx	r4
	I2C_START(-1);
    4a24:	2101      	movs	r1, #1
    4a26:	4638      	mov	r0, r7
    4a28:	47a8      	blx	r5
    4a2a:	2101      	movs	r1, #1
    4a2c:	4630      	mov	r0, r6
    4a2e:	47a8      	blx	r5
    4a30:	2102      	movs	r1, #2
    4a32:	4630      	mov	r0, r6
    4a34:	47c0      	blx	r8
    4a36:	200f      	movs	r0, #15
    4a38:	47a0      	blx	r4
    4a3a:	200f      	movs	r0, #15
    4a3c:	47a0      	blx	r4
    4a3e:	4649      	mov	r1, r9
    4a40:	4630      	mov	r0, r6
    4a42:	47a8      	blx	r5
    4a44:	200f      	movs	r0, #15
    4a46:	47a0      	blx	r4
    4a48:	4649      	mov	r1, r9
    4a4a:	4638      	mov	r0, r7
    4a4c:	47a8      	blx	r5
    4a4e:	200f      	movs	r0, #15
    4a50:	47a0      	blx	r4
    4a52:	f04f 0907 	mov.w	r9, #7
	I2C_SENDADDR(0x41, forloop);
    4a56:	f04f 0b40 	mov.w	fp, #64	; 0x40
    4a5a:	f01b 0141 	ands.w	r1, fp, #65	; 0x41
    4a5e:	bf18      	it	ne
    4a60:	2101      	movne	r1, #1
    4a62:	4630      	mov	r0, r6
    4a64:	47a8      	blx	r5
    4a66:	200f      	movs	r0, #15
    4a68:	47a0      	blx	r4
    4a6a:	2101      	movs	r1, #1
    4a6c:	4638      	mov	r0, r7
    4a6e:	47a8      	blx	r5
    4a70:	200f      	movs	r0, #15
    4a72:	47a0      	blx	r4
    4a74:	2100      	movs	r1, #0
    4a76:	4638      	mov	r0, r7
    4a78:	47a8      	blx	r5
    4a7a:	200f      	movs	r0, #15
    4a7c:	47a0      	blx	r4
    4a7e:	f1b9 0901 	subs.w	r9, r9, #1
    4a82:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
    4a86:	d1e8      	bne.n	4a5a <I2C_configEXPANDER+0x23e>
	I2C_WRITE();
    4a88:	4649      	mov	r1, r9
    4a8a:	4630      	mov	r0, r6
    4a8c:	47a8      	blx	r5
    4a8e:	200f      	movs	r0, #15
    4a90:	47a0      	blx	r4
    4a92:	2101      	movs	r1, #1
    4a94:	4638      	mov	r0, r7
    4a96:	47a8      	blx	r5
    4a98:	200f      	movs	r0, #15
    4a9a:	47a0      	blx	r4
    4a9c:	4649      	mov	r1, r9
    4a9e:	4638      	mov	r0, r7
    4aa0:	47a8      	blx	r5
    4aa2:	200f      	movs	r0, #15
    4aa4:	47a0      	blx	r4
	I2C_WAITACKOP(-2);
    4aa6:	2101      	movs	r1, #1
    4aa8:	4630      	mov	r0, r6
    4aaa:	47c0      	blx	r8
    4aac:	200f      	movs	r0, #15
    4aae:	47a0      	blx	r4
    4ab0:	2101      	movs	r1, #1
    4ab2:	4638      	mov	r0, r7
    4ab4:	47a8      	blx	r5
    4ab6:	200f      	movs	r0, #15
    4ab8:	47a0      	blx	r4
    4aba:	4630      	mov	r0, r6
    4abc:	9b00      	ldr	r3, [sp, #0]
    4abe:	4798      	blx	r3
    4ac0:	2800      	cmp	r0, #0
    4ac2:	f47f af05 	bne.w	48d0 <I2C_configEXPANDER+0xb4>
    4ac6:	4649      	mov	r1, r9
    4ac8:	4638      	mov	r0, r7
    4aca:	47a8      	blx	r5
    4acc:	200f      	movs	r0, #15
    4ace:	47a0      	blx	r4
    4ad0:	2102      	movs	r1, #2
    4ad2:	4630      	mov	r0, r6
    4ad4:	47c0      	blx	r8
    4ad6:	200f      	movs	r0, #15
    4ad8:	47a0      	blx	r4
    4ada:	f04f 0908 	mov.w	r9, #8
	I2C_SENDDATA(0x02, forloop);
    4ade:	f04f 0b80 	mov.w	fp, #128	; 0x80
    4ae2:	f01b 0102 	ands.w	r1, fp, #2
    4ae6:	bf18      	it	ne
    4ae8:	2101      	movne	r1, #1
    4aea:	4630      	mov	r0, r6
    4aec:	47a8      	blx	r5
    4aee:	200f      	movs	r0, #15
    4af0:	47a0      	blx	r4
    4af2:	2101      	movs	r1, #1
    4af4:	4638      	mov	r0, r7
    4af6:	47a8      	blx	r5
    4af8:	200f      	movs	r0, #15
    4afa:	47a0      	blx	r4
    4afc:	2100      	movs	r1, #0
    4afe:	4638      	mov	r0, r7
    4b00:	47a8      	blx	r5
    4b02:	200f      	movs	r0, #15
    4b04:	47a0      	blx	r4
    4b06:	f1b9 0901 	subs.w	r9, r9, #1
    4b0a:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
    4b0e:	d1e8      	bne.n	4ae2 <I2C_configEXPANDER+0x2c6>
	I2C_WAITACKOP(-3);
    4b10:	2101      	movs	r1, #1
    4b12:	4630      	mov	r0, r6
    4b14:	47c0      	blx	r8
    4b16:	200f      	movs	r0, #15
    4b18:	47a0      	blx	r4
    4b1a:	2101      	movs	r1, #1
    4b1c:	4638      	mov	r0, r7
    4b1e:	47a8      	blx	r5
    4b20:	200f      	movs	r0, #15
    4b22:	47a0      	blx	r4
    4b24:	4630      	mov	r0, r6
    4b26:	9b00      	ldr	r3, [sp, #0]
    4b28:	4798      	blx	r3
    4b2a:	2800      	cmp	r0, #0
    4b2c:	f47f af17 	bne.w	495e <I2C_configEXPANDER+0x142>
    4b30:	4649      	mov	r1, r9
    4b32:	4638      	mov	r0, r7
    4b34:	47a8      	blx	r5
    4b36:	200f      	movs	r0, #15
    4b38:	47a0      	blx	r4
    4b3a:	2102      	movs	r1, #2
    4b3c:	4630      	mov	r0, r6
    4b3e:	47c0      	blx	r8
    4b40:	200f      	movs	r0, #15
    4b42:	47a0      	blx	r4
    4b44:	f04f 0908 	mov.w	r9, #8
	I2C_SENDDATA(0x00, forloop);
    4b48:	2100      	movs	r1, #0
    4b4a:	4630      	mov	r0, r6
    4b4c:	47a8      	blx	r5
    4b4e:	200f      	movs	r0, #15
    4b50:	47a0      	blx	r4
    4b52:	2101      	movs	r1, #1
    4b54:	4638      	mov	r0, r7
    4b56:	47a8      	blx	r5
    4b58:	200f      	movs	r0, #15
    4b5a:	47a0      	blx	r4
    4b5c:	2100      	movs	r1, #0
    4b5e:	4638      	mov	r0, r7
    4b60:	47a8      	blx	r5
    4b62:	200f      	movs	r0, #15
    4b64:	47a0      	blx	r4
    4b66:	f1b9 0901 	subs.w	r9, r9, #1
    4b6a:	d1ed      	bne.n	4b48 <I2C_configEXPANDER+0x32c>
	I2C_WAITACKOP(-4);
    4b6c:	2101      	movs	r1, #1
    4b6e:	4630      	mov	r0, r6
    4b70:	47c0      	blx	r8
    4b72:	200f      	movs	r0, #15
    4b74:	47a0      	blx	r4
    4b76:	2101      	movs	r1, #1
    4b78:	4638      	mov	r0, r7
    4b7a:	47a8      	blx	r5
    4b7c:	200f      	movs	r0, #15
    4b7e:	47a0      	blx	r4
    4b80:	4630      	mov	r0, r6
    4b82:	9b00      	ldr	r3, [sp, #0]
    4b84:	4798      	blx	r3
    4b86:	2800      	cmp	r0, #0
    4b88:	f47f af27 	bne.w	49da <I2C_configEXPANDER+0x1be>
    4b8c:	4649      	mov	r1, r9
    4b8e:	4638      	mov	r0, r7
    4b90:	47a8      	blx	r5
    4b92:	200f      	movs	r0, #15
    4b94:	47a0      	blx	r4
    4b96:	2102      	movs	r1, #2
    4b98:	4630      	mov	r0, r6
    4b9a:	47c0      	blx	r8
    4b9c:	200f      	movs	r0, #15
    4b9e:	47a0      	blx	r4
	I2C_START(-1);
    4ba0:	2101      	movs	r1, #1
    4ba2:	4638      	mov	r0, r7
    4ba4:	47a8      	blx	r5
    4ba6:	2101      	movs	r1, #1
    4ba8:	4630      	mov	r0, r6
    4baa:	47a8      	blx	r5
    4bac:	2102      	movs	r1, #2
    4bae:	4630      	mov	r0, r6
    4bb0:	47c0      	blx	r8
    4bb2:	200f      	movs	r0, #15
    4bb4:	47a0      	blx	r4
    4bb6:	200f      	movs	r0, #15
    4bb8:	47a0      	blx	r4
    4bba:	4649      	mov	r1, r9
    4bbc:	4630      	mov	r0, r6
    4bbe:	47a8      	blx	r5
    4bc0:	200f      	movs	r0, #15
    4bc2:	47a0      	blx	r4
    4bc4:	4649      	mov	r1, r9
    4bc6:	4638      	mov	r0, r7
    4bc8:	47a8      	blx	r5
    4bca:	200f      	movs	r0, #15
    4bcc:	47a0      	blx	r4
    4bce:	f04f 0907 	mov.w	r9, #7
	I2C_SENDADDR(0x41, forloop);
    4bd2:	f04f 0b40 	mov.w	fp, #64	; 0x40
    4bd6:	f01b 0141 	ands.w	r1, fp, #65	; 0x41
    4bda:	bf18      	it	ne
    4bdc:	2101      	movne	r1, #1
    4bde:	4630      	mov	r0, r6
    4be0:	47a8      	blx	r5
    4be2:	200f      	movs	r0, #15
    4be4:	47a0      	blx	r4
    4be6:	2101      	movs	r1, #1
    4be8:	4638      	mov	r0, r7
    4bea:	47a8      	blx	r5
    4bec:	200f      	movs	r0, #15
    4bee:	47a0      	blx	r4
    4bf0:	2100      	movs	r1, #0
    4bf2:	4638      	mov	r0, r7
    4bf4:	47a8      	blx	r5
    4bf6:	200f      	movs	r0, #15
    4bf8:	47a0      	blx	r4
    4bfa:	f1b9 0901 	subs.w	r9, r9, #1
    4bfe:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
    4c02:	d1e8      	bne.n	4bd6 <I2C_configEXPANDER+0x3ba>
	I2C_WRITE();
    4c04:	4649      	mov	r1, r9
    4c06:	4630      	mov	r0, r6
    4c08:	47a8      	blx	r5
    4c0a:	200f      	movs	r0, #15
    4c0c:	47a0      	blx	r4
    4c0e:	2101      	movs	r1, #1
    4c10:	4638      	mov	r0, r7
    4c12:	47a8      	blx	r5
    4c14:	200f      	movs	r0, #15
    4c16:	47a0      	blx	r4
    4c18:	4649      	mov	r1, r9
    4c1a:	4638      	mov	r0, r7
    4c1c:	47a8      	blx	r5
    4c1e:	200f      	movs	r0, #15
    4c20:	47a0      	blx	r4
	I2C_WAITACKOP(-2);
    4c22:	2101      	movs	r1, #1
    4c24:	4630      	mov	r0, r6
    4c26:	47c0      	blx	r8
    4c28:	200f      	movs	r0, #15
    4c2a:	47a0      	blx	r4
    4c2c:	2101      	movs	r1, #1
    4c2e:	4638      	mov	r0, r7
    4c30:	47a8      	blx	r5
    4c32:	200f      	movs	r0, #15
    4c34:	47a0      	blx	r4
    4c36:	4630      	mov	r0, r6
    4c38:	9b00      	ldr	r3, [sp, #0]
    4c3a:	4798      	blx	r3
    4c3c:	2800      	cmp	r0, #0
    4c3e:	f47f ae47 	bne.w	48d0 <I2C_configEXPANDER+0xb4>
    4c42:	4649      	mov	r1, r9
    4c44:	4638      	mov	r0, r7
    4c46:	47a8      	blx	r5
    4c48:	200f      	movs	r0, #15
    4c4a:	47a0      	blx	r4
    4c4c:	2102      	movs	r1, #2
    4c4e:	4630      	mov	r0, r6
    4c50:	47c0      	blx	r8
    4c52:	200f      	movs	r0, #15
    4c54:	47a0      	blx	r4
    4c56:	f04f 0908 	mov.w	r9, #8
	I2C_SENDDATA(0x03, forloop);
    4c5a:	f04f 0b80 	mov.w	fp, #128	; 0x80
    4c5e:	f01b 0103 	ands.w	r1, fp, #3
    4c62:	bf18      	it	ne
    4c64:	2101      	movne	r1, #1
    4c66:	4630      	mov	r0, r6
    4c68:	47a8      	blx	r5
    4c6a:	200f      	movs	r0, #15
    4c6c:	47a0      	blx	r4
    4c6e:	2101      	movs	r1, #1
    4c70:	4638      	mov	r0, r7
    4c72:	47a8      	blx	r5
    4c74:	200f      	movs	r0, #15
    4c76:	47a0      	blx	r4
    4c78:	2100      	movs	r1, #0
    4c7a:	4638      	mov	r0, r7
    4c7c:	47a8      	blx	r5
    4c7e:	200f      	movs	r0, #15
    4c80:	47a0      	blx	r4
    4c82:	f1b9 0901 	subs.w	r9, r9, #1
    4c86:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
    4c8a:	d1e8      	bne.n	4c5e <I2C_configEXPANDER+0x442>
	I2C_WAITACKOP(-3);
    4c8c:	2101      	movs	r1, #1
    4c8e:	4630      	mov	r0, r6
    4c90:	47c0      	blx	r8
    4c92:	200f      	movs	r0, #15
    4c94:	47a0      	blx	r4
    4c96:	2101      	movs	r1, #1
    4c98:	4638      	mov	r0, r7
    4c9a:	47a8      	blx	r5
    4c9c:	200f      	movs	r0, #15
    4c9e:	47a0      	blx	r4
    4ca0:	4630      	mov	r0, r6
    4ca2:	9b00      	ldr	r3, [sp, #0]
    4ca4:	4798      	blx	r3
    4ca6:	2800      	cmp	r0, #0
    4ca8:	f47f ae59 	bne.w	495e <I2C_configEXPANDER+0x142>
    4cac:	4649      	mov	r1, r9
    4cae:	4638      	mov	r0, r7
    4cb0:	47a8      	blx	r5
    4cb2:	200f      	movs	r0, #15
    4cb4:	47a0      	blx	r4
    4cb6:	2102      	movs	r1, #2
    4cb8:	4630      	mov	r0, r6
    4cba:	47c0      	blx	r8
    4cbc:	200f      	movs	r0, #15
    4cbe:	47a0      	blx	r4
    4cc0:	f8df a098 	ldr.w	sl, [pc, #152]	; 4d5c <I2C_configEXPANDER+0x540>
    4cc4:	f8df 9098 	ldr.w	r9, [pc, #152]	; 4d60 <I2C_configEXPANDER+0x544>
    4cc8:	2308      	movs	r3, #8
    4cca:	9301      	str	r3, [sp, #4]
	I2C_SENDDATA(0xC0, forloop);
    4ccc:	f04f 0b80 	mov.w	fp, #128	; 0x80
    4cd0:	f01b 01c0 	ands.w	r1, fp, #192	; 0xc0
    4cd4:	bf18      	it	ne
    4cd6:	2101      	movne	r1, #1
    4cd8:	4630      	mov	r0, r6
    4cda:	47d0      	blx	sl
    4cdc:	200f      	movs	r0, #15
    4cde:	47c8      	blx	r9
    4ce0:	2101      	movs	r1, #1
    4ce2:	4638      	mov	r0, r7
    4ce4:	47d0      	blx	sl
    4ce6:	200f      	movs	r0, #15
    4ce8:	47c8      	blx	r9
    4cea:	2100      	movs	r1, #0
    4cec:	4638      	mov	r0, r7
    4cee:	47d0      	blx	sl
    4cf0:	200f      	movs	r0, #15
    4cf2:	47c8      	blx	r9
    4cf4:	9b01      	ldr	r3, [sp, #4]
    4cf6:	3b01      	subs	r3, #1
    4cf8:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
    4cfc:	9301      	str	r3, [sp, #4]
    4cfe:	d1e7      	bne.n	4cd0 <I2C_configEXPANDER+0x4b4>
	I2C_WAITACKOP(-4);		
    4d00:	2101      	movs	r1, #1
    4d02:	4630      	mov	r0, r6
    4d04:	f8df b05c 	ldr.w	fp, [pc, #92]	; 4d64 <I2C_configEXPANDER+0x548>
    4d08:	47d8      	blx	fp
    4d0a:	200f      	movs	r0, #15
    4d0c:	47c8      	blx	r9
    4d0e:	2101      	movs	r1, #1
    4d10:	4638      	mov	r0, r7
    4d12:	47d0      	blx	sl
    4d14:	200f      	movs	r0, #15
    4d16:	47c8      	blx	r9
    4d18:	4630      	mov	r0, r6
    4d1a:	9b00      	ldr	r3, [sp, #0]
    4d1c:	4798      	blx	r3
    4d1e:	2800      	cmp	r0, #0
    4d20:	f47f ae5b 	bne.w	49da <I2C_configEXPANDER+0x1be>
    4d24:	9901      	ldr	r1, [sp, #4]
    4d26:	4638      	mov	r0, r7
    4d28:	47d0      	blx	sl
    4d2a:	200f      	movs	r0, #15
    4d2c:	47c8      	blx	r9
    4d2e:	2102      	movs	r1, #2
    4d30:	4630      	mov	r0, r6
    4d32:	47d8      	blx	fp
    4d34:	200f      	movs	r0, #15
    4d36:	47c8      	blx	r9
	I2C_STOP();
    4d38:	2101      	movs	r1, #1
    4d3a:	4638      	mov	r0, r7
    4d3c:	47d0      	blx	sl
    4d3e:	200f      	movs	r0, #15
    4d40:	47c8      	blx	r9
    4d42:	2101      	movs	r1, #1
    4d44:	4630      	mov	r0, r6
    4d46:	47d0      	blx	sl
    4d48:	200f      	movs	r0, #15
    4d4a:	47c8      	blx	r9
    4d4c:	2102      	movs	r1, #2
    4d4e:	4630      	mov	r0, r6
    4d50:	47d8      	blx	fp
    4d52:	200f      	movs	r0, #15
    4d54:	47c8      	blx	r9
	return 0;
    4d56:	9801      	ldr	r0, [sp, #4]
    4d58:	e5cb      	b.n	48f2 <I2C_configEXPANDER+0xd6>
    4d5a:	bf00      	nop
    4d5c:	00004371 	.word	0x00004371
    4d60:	00001201 	.word	0x00001201
    4d64:	000043d9 	.word	0x000043d9

00004d68 <I2C_setEXPANDER>:
// * CALLED BY:			  main()                                                                                                       *
// * CALLS:		          No function. ALL macros defined in this function file.                                                       *
// * --------------------------------------------------------------------------------------------------------------------------------- *
int I2C_setEXPANDER(uint8_t sda,  uint8_t clk, unsigned char relay)

{
    4d68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4d6c:	460f      	mov	r7, r1
    4d6e:	4606      	mov	r6, r0
	uint8_t     		i2csda, i2cclk;
	unsigned char		forloop;

	/* Open an I2C channel, send address 0x41, index register 0x01 then send the relay output value */
	I2C_OPEN(sda, clk);
	I2C_START(-1);
    4d70:	4d86      	ldr	r5, [pc, #536]	; (4f8c <I2C_setEXPANDER+0x224>)
{
    4d72:	9201      	str	r2, [sp, #4]
	I2C_START(-1);
    4d74:	2101      	movs	r1, #1
    4d76:	4638      	mov	r0, r7
    4d78:	47a8      	blx	r5
    4d7a:	2101      	movs	r1, #1
    4d7c:	4630      	mov	r0, r6
    4d7e:	47a8      	blx	r5
    4d80:	f8df 8210 	ldr.w	r8, [pc, #528]	; 4f94 <I2C_setEXPANDER+0x22c>
    4d84:	4c82      	ldr	r4, [pc, #520]	; (4f90 <I2C_setEXPANDER+0x228>)
    4d86:	2102      	movs	r1, #2
    4d88:	4630      	mov	r0, r6
    4d8a:	47c0      	blx	r8
    4d8c:	200f      	movs	r0, #15
    4d8e:	47a0      	blx	r4
    4d90:	200f      	movs	r0, #15
    4d92:	47a0      	blx	r4
    4d94:	2100      	movs	r1, #0
    4d96:	4630      	mov	r0, r6
    4d98:	47a8      	blx	r5
    4d9a:	200f      	movs	r0, #15
    4d9c:	47a0      	blx	r4
    4d9e:	2100      	movs	r1, #0
    4da0:	4638      	mov	r0, r7
    4da2:	47a8      	blx	r5
    4da4:	200f      	movs	r0, #15
    4da6:	47a0      	blx	r4
    4da8:	f04f 0907 	mov.w	r9, #7
	I2C_SENDADDR(0x41, forloop);
    4dac:	f04f 0a40 	mov.w	sl, #64	; 0x40
    4db0:	f01a 0141 	ands.w	r1, sl, #65	; 0x41
    4db4:	bf18      	it	ne
    4db6:	2101      	movne	r1, #1
    4db8:	4630      	mov	r0, r6
    4dba:	47a8      	blx	r5
    4dbc:	200f      	movs	r0, #15
    4dbe:	47a0      	blx	r4
    4dc0:	2101      	movs	r1, #1
    4dc2:	4638      	mov	r0, r7
    4dc4:	47a8      	blx	r5
    4dc6:	200f      	movs	r0, #15
    4dc8:	47a0      	blx	r4
    4dca:	2100      	movs	r1, #0
    4dcc:	4638      	mov	r0, r7
    4dce:	47a8      	blx	r5
    4dd0:	200f      	movs	r0, #15
    4dd2:	47a0      	blx	r4
    4dd4:	f1b9 0901 	subs.w	r9, r9, #1
    4dd8:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
    4ddc:	d1e8      	bne.n	4db0 <I2C_setEXPANDER+0x48>
	I2C_WRITE();
    4dde:	4649      	mov	r1, r9
    4de0:	4630      	mov	r0, r6
    4de2:	47a8      	blx	r5
    4de4:	200f      	movs	r0, #15
    4de6:	47a0      	blx	r4
    4de8:	2101      	movs	r1, #1
    4dea:	4638      	mov	r0, r7
    4dec:	47a8      	blx	r5
    4dee:	200f      	movs	r0, #15
    4df0:	47a0      	blx	r4
    4df2:	4649      	mov	r1, r9
    4df4:	4638      	mov	r0, r7
    4df6:	47a8      	blx	r5
    4df8:	200f      	movs	r0, #15
    4dfa:	47a0      	blx	r4
	I2C_WAITACKOP(-2);
    4dfc:	2101      	movs	r1, #1
    4dfe:	4630      	mov	r0, r6
    4e00:	47c0      	blx	r8
    4e02:	200f      	movs	r0, #15
    4e04:	47a0      	blx	r4
    4e06:	2101      	movs	r1, #1
    4e08:	4638      	mov	r0, r7
    4e0a:	47a8      	blx	r5
    4e0c:	200f      	movs	r0, #15
    4e0e:	47a0      	blx	r4
    4e10:	f8df a184 	ldr.w	sl, [pc, #388]	; 4f98 <I2C_setEXPANDER+0x230>
    4e14:	4630      	mov	r0, r6
    4e16:	47d0      	blx	sl
    4e18:	b198      	cbz	r0, 4e42 <I2C_setEXPANDER+0xda>
    4e1a:	2101      	movs	r1, #1
    4e1c:	4638      	mov	r0, r7
    4e1e:	47a8      	blx	r5
    4e20:	200f      	movs	r0, #15
    4e22:	47a0      	blx	r4
    4e24:	2101      	movs	r1, #1
    4e26:	4630      	mov	r0, r6
    4e28:	47a8      	blx	r5
    4e2a:	200f      	movs	r0, #15
    4e2c:	47a0      	blx	r4
    4e2e:	2102      	movs	r1, #2
    4e30:	4630      	mov	r0, r6
    4e32:	47c0      	blx	r8
    4e34:	200f      	movs	r0, #15
    4e36:	47a0      	blx	r4
    4e38:	f06f 0001 	mvn.w	r0, #1
	/* If successful, and code execution got here, the close the I2C channel */
	I2C_STOP();
	I2C_CLOSE();
	
	return 0;
}
    4e3c:	b003      	add	sp, #12
    4e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	I2C_WAITACKOP(-2);
    4e42:	4649      	mov	r1, r9
    4e44:	4638      	mov	r0, r7
    4e46:	47a8      	blx	r5
    4e48:	200f      	movs	r0, #15
    4e4a:	47a0      	blx	r4
    4e4c:	2102      	movs	r1, #2
    4e4e:	4630      	mov	r0, r6
    4e50:	47c0      	blx	r8
    4e52:	200f      	movs	r0, #15
    4e54:	47a0      	blx	r4
    4e56:	f04f 0908 	mov.w	r9, #8
	I2C_SENDDATA(0x01, forloop);
    4e5a:	f04f 0b80 	mov.w	fp, #128	; 0x80
    4e5e:	f01b 0101 	ands.w	r1, fp, #1
    4e62:	bf18      	it	ne
    4e64:	2101      	movne	r1, #1
    4e66:	4630      	mov	r0, r6
    4e68:	47a8      	blx	r5
    4e6a:	200f      	movs	r0, #15
    4e6c:	47a0      	blx	r4
    4e6e:	2101      	movs	r1, #1
    4e70:	4638      	mov	r0, r7
    4e72:	47a8      	blx	r5
    4e74:	200f      	movs	r0, #15
    4e76:	47a0      	blx	r4
    4e78:	2100      	movs	r1, #0
    4e7a:	4638      	mov	r0, r7
    4e7c:	47a8      	blx	r5
    4e7e:	200f      	movs	r0, #15
    4e80:	47a0      	blx	r4
    4e82:	f1b9 0901 	subs.w	r9, r9, #1
    4e86:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
    4e8a:	d1e8      	bne.n	4e5e <I2C_setEXPANDER+0xf6>
	I2C_WAITACKOP(-3);
    4e8c:	2101      	movs	r1, #1
    4e8e:	4630      	mov	r0, r6
    4e90:	47c0      	blx	r8
    4e92:	200f      	movs	r0, #15
    4e94:	47a0      	blx	r4
    4e96:	2101      	movs	r1, #1
    4e98:	4638      	mov	r0, r7
    4e9a:	47a8      	blx	r5
    4e9c:	200f      	movs	r0, #15
    4e9e:	47a0      	blx	r4
    4ea0:	4630      	mov	r0, r6
    4ea2:	47d0      	blx	sl
    4ea4:	b188      	cbz	r0, 4eca <I2C_setEXPANDER+0x162>
    4ea6:	2101      	movs	r1, #1
    4ea8:	4638      	mov	r0, r7
    4eaa:	47a8      	blx	r5
    4eac:	200f      	movs	r0, #15
    4eae:	47a0      	blx	r4
    4eb0:	2101      	movs	r1, #1
    4eb2:	4630      	mov	r0, r6
    4eb4:	47a8      	blx	r5
    4eb6:	200f      	movs	r0, #15
    4eb8:	47a0      	blx	r4
    4eba:	2102      	movs	r1, #2
    4ebc:	4630      	mov	r0, r6
    4ebe:	47c0      	blx	r8
    4ec0:	200f      	movs	r0, #15
    4ec2:	47a0      	blx	r4
    4ec4:	f06f 0002 	mvn.w	r0, #2
    4ec8:	e7b8      	b.n	4e3c <I2C_setEXPANDER+0xd4>
    4eca:	4649      	mov	r1, r9
    4ecc:	4638      	mov	r0, r7
    4ece:	47a8      	blx	r5
    4ed0:	200f      	movs	r0, #15
    4ed2:	47a0      	blx	r4
    4ed4:	2102      	movs	r1, #2
    4ed6:	4630      	mov	r0, r6
    4ed8:	47c0      	blx	r8
    4eda:	200f      	movs	r0, #15
    4edc:	47a0      	blx	r4
    4ede:	f04f 0908 	mov.w	r9, #8
	I2C_SENDDATA(relay, forloop);
    4ee2:	f04f 0b80 	mov.w	fp, #128	; 0x80
    4ee6:	9b01      	ldr	r3, [sp, #4]
    4ee8:	ea13 010b 	ands.w	r1, r3, fp
    4eec:	bf18      	it	ne
    4eee:	2101      	movne	r1, #1
    4ef0:	4630      	mov	r0, r6
    4ef2:	47a8      	blx	r5
    4ef4:	200f      	movs	r0, #15
    4ef6:	47a0      	blx	r4
    4ef8:	2101      	movs	r1, #1
    4efa:	4638      	mov	r0, r7
    4efc:	47a8      	blx	r5
    4efe:	200f      	movs	r0, #15
    4f00:	47a0      	blx	r4
    4f02:	2100      	movs	r1, #0
    4f04:	4638      	mov	r0, r7
    4f06:	47a8      	blx	r5
    4f08:	200f      	movs	r0, #15
    4f0a:	47a0      	blx	r4
    4f0c:	f1b9 0901 	subs.w	r9, r9, #1
    4f10:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
    4f14:	d1e7      	bne.n	4ee6 <I2C_setEXPANDER+0x17e>
	I2C_WAITACKOP(-4);
    4f16:	2101      	movs	r1, #1
    4f18:	4630      	mov	r0, r6
    4f1a:	47c0      	blx	r8
    4f1c:	200f      	movs	r0, #15
    4f1e:	47a0      	blx	r4
    4f20:	2101      	movs	r1, #1
    4f22:	4638      	mov	r0, r7
    4f24:	47a8      	blx	r5
    4f26:	200f      	movs	r0, #15
    4f28:	47a0      	blx	r4
    4f2a:	4630      	mov	r0, r6
    4f2c:	47d0      	blx	sl
    4f2e:	b188      	cbz	r0, 4f54 <I2C_setEXPANDER+0x1ec>
    4f30:	2101      	movs	r1, #1
    4f32:	4638      	mov	r0, r7
    4f34:	47a8      	blx	r5
    4f36:	200f      	movs	r0, #15
    4f38:	47a0      	blx	r4
    4f3a:	2101      	movs	r1, #1
    4f3c:	4630      	mov	r0, r6
    4f3e:	47a8      	blx	r5
    4f40:	200f      	movs	r0, #15
    4f42:	47a0      	blx	r4
    4f44:	2102      	movs	r1, #2
    4f46:	4630      	mov	r0, r6
    4f48:	47c0      	blx	r8
    4f4a:	200f      	movs	r0, #15
    4f4c:	47a0      	blx	r4
    4f4e:	f06f 0003 	mvn.w	r0, #3
    4f52:	e773      	b.n	4e3c <I2C_setEXPANDER+0xd4>
    4f54:	4649      	mov	r1, r9
    4f56:	4638      	mov	r0, r7
    4f58:	47a8      	blx	r5
    4f5a:	200f      	movs	r0, #15
    4f5c:	47a0      	blx	r4
    4f5e:	2102      	movs	r1, #2
    4f60:	4630      	mov	r0, r6
    4f62:	47c0      	blx	r8
    4f64:	200f      	movs	r0, #15
    4f66:	47a0      	blx	r4
	I2C_STOP();
    4f68:	2101      	movs	r1, #1
    4f6a:	4638      	mov	r0, r7
    4f6c:	47a8      	blx	r5
    4f6e:	200f      	movs	r0, #15
    4f70:	47a0      	blx	r4
    4f72:	2101      	movs	r1, #1
    4f74:	4630      	mov	r0, r6
    4f76:	47a8      	blx	r5
    4f78:	200f      	movs	r0, #15
    4f7a:	47a0      	blx	r4
    4f7c:	2102      	movs	r1, #2
    4f7e:	4630      	mov	r0, r6
    4f80:	47c0      	blx	r8
    4f82:	200f      	movs	r0, #15
    4f84:	47a0      	blx	r4
	return 0;
    4f86:	4648      	mov	r0, r9
    4f88:	e758      	b.n	4e3c <I2C_setEXPANDER+0xd4>
    4f8a:	bf00      	nop
    4f8c:	00004371 	.word	0x00004371
    4f90:	00001201 	.word	0x00001201
    4f94:	000043d9 	.word	0x000043d9
    4f98:	00004391 	.word	0x00004391

00004f9c <I2C_readEXPANDER>:
// * CALLED BY:			  main()                                                                                                       *
// * CALLS:		          No function. ALL macros defined in this function file.                                                       *
// * --------------------------------------------------------------------------------------------------------------------------------- *
int I2C_readEXPANDER(uint8_t sda,  uint8_t clk, unsigned char *inputs)

{
    4f9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4fa0:	4606      	mov	r6, r0
    4fa2:	460f      	mov	r7, r1
	uint8_t     		i2csda, i2cclk;
	unsigned char		forloop;

    if (!inputs) {
    4fa4:	4692      	mov	sl, r2
    4fa6:	2a00      	cmp	r2, #0
    4fa8:	f000 8148 	beq.w	523c <I2C_readEXPANDER+0x2a0>
		return -1;	
	}

	/* Open an I2C channel, send address 0x41, index register 0x00 then read the input value */
	I2C_OPEN(sda, clk);
	I2C_START(-2);
    4fac:	4da5      	ldr	r5, [pc, #660]	; (5244 <I2C_readEXPANDER+0x2a8>)
    4fae:	f8df 829c 	ldr.w	r8, [pc, #668]	; 524c <I2C_readEXPANDER+0x2b0>
    4fb2:	4ca5      	ldr	r4, [pc, #660]	; (5248 <I2C_readEXPANDER+0x2ac>)
    4fb4:	2101      	movs	r1, #1
    4fb6:	4638      	mov	r0, r7
    4fb8:	47a8      	blx	r5
    4fba:	2101      	movs	r1, #1
    4fbc:	4630      	mov	r0, r6
    4fbe:	47a8      	blx	r5
    4fc0:	2102      	movs	r1, #2
    4fc2:	4630      	mov	r0, r6
    4fc4:	47c0      	blx	r8
    4fc6:	200f      	movs	r0, #15
    4fc8:	47a0      	blx	r4
    4fca:	200f      	movs	r0, #15
    4fcc:	47a0      	blx	r4
    4fce:	2100      	movs	r1, #0
    4fd0:	4630      	mov	r0, r6
    4fd2:	47a8      	blx	r5
    4fd4:	200f      	movs	r0, #15
    4fd6:	47a0      	blx	r4
    4fd8:	2100      	movs	r1, #0
    4fda:	4638      	mov	r0, r7
    4fdc:	47a8      	blx	r5
    4fde:	200f      	movs	r0, #15
    4fe0:	47a0      	blx	r4
    4fe2:	f04f 0907 	mov.w	r9, #7
	I2C_SENDADDR(0x41, forloop);
    4fe6:	f04f 0b40 	mov.w	fp, #64	; 0x40
    4fea:	f01b 0141 	ands.w	r1, fp, #65	; 0x41
    4fee:	bf18      	it	ne
    4ff0:	2101      	movne	r1, #1
    4ff2:	4630      	mov	r0, r6
    4ff4:	47a8      	blx	r5
    4ff6:	200f      	movs	r0, #15
    4ff8:	47a0      	blx	r4
    4ffa:	2101      	movs	r1, #1
    4ffc:	4638      	mov	r0, r7
    4ffe:	47a8      	blx	r5
    5000:	200f      	movs	r0, #15
    5002:	47a0      	blx	r4
    5004:	2100      	movs	r1, #0
    5006:	4638      	mov	r0, r7
    5008:	47a8      	blx	r5
    500a:	200f      	movs	r0, #15
    500c:	47a0      	blx	r4
    500e:	f1b9 0901 	subs.w	r9, r9, #1
    5012:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
    5016:	d1e8      	bne.n	4fea <I2C_readEXPANDER+0x4e>
	I2C_WRITE();
    5018:	4649      	mov	r1, r9
    501a:	4630      	mov	r0, r6
    501c:	47a8      	blx	r5
    501e:	200f      	movs	r0, #15
    5020:	47a0      	blx	r4
    5022:	2101      	movs	r1, #1
    5024:	4638      	mov	r0, r7
    5026:	47a8      	blx	r5
    5028:	200f      	movs	r0, #15
    502a:	47a0      	blx	r4
    502c:	4649      	mov	r1, r9
    502e:	4638      	mov	r0, r7
    5030:	47a8      	blx	r5
    5032:	200f      	movs	r0, #15
    5034:	47a0      	blx	r4
	I2C_WAITACKOP(-3);
    5036:	2101      	movs	r1, #1
    5038:	4630      	mov	r0, r6
    503a:	47c0      	blx	r8
    503c:	200f      	movs	r0, #15
    503e:	47a0      	blx	r4
    5040:	2101      	movs	r1, #1
    5042:	4638      	mov	r0, r7
    5044:	47a8      	blx	r5
    5046:	200f      	movs	r0, #15
    5048:	47a0      	blx	r4
    504a:	f8df b204 	ldr.w	fp, [pc, #516]	; 5250 <I2C_readEXPANDER+0x2b4>
    504e:	4630      	mov	r0, r6
    5050:	47d8      	blx	fp
    5052:	f8cd b004 	str.w	fp, [sp, #4]
    5056:	b198      	cbz	r0, 5080 <I2C_readEXPANDER+0xe4>
    5058:	2101      	movs	r1, #1
    505a:	4638      	mov	r0, r7
    505c:	47a8      	blx	r5
    505e:	200f      	movs	r0, #15
    5060:	47a0      	blx	r4
    5062:	2101      	movs	r1, #1
    5064:	4630      	mov	r0, r6
    5066:	47a8      	blx	r5
    5068:	200f      	movs	r0, #15
    506a:	47a0      	blx	r4
    506c:	2102      	movs	r1, #2
    506e:	4630      	mov	r0, r6
    5070:	47c0      	blx	r8
    5072:	200f      	movs	r0, #15
    5074:	47a0      	blx	r4
    5076:	f06f 0002 	mvn.w	r0, #2
	I2C_STOP();
	I2C_CLOSE();
	/* If successful, and code execution got here, the close the I2C channel */
	
	return 0;
}
    507a:	b003      	add	sp, #12
    507c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	I2C_WAITACKOP(-3);
    5080:	4649      	mov	r1, r9
    5082:	4638      	mov	r0, r7
    5084:	47a8      	blx	r5
    5086:	200f      	movs	r0, #15
    5088:	47a0      	blx	r4
    508a:	2102      	movs	r1, #2
    508c:	4630      	mov	r0, r6
    508e:	47c0      	blx	r8
    5090:	200f      	movs	r0, #15
    5092:	47a0      	blx	r4
    5094:	f04f 0908 	mov.w	r9, #8
	I2C_SENDDATA(0x00, forloop);
    5098:	2100      	movs	r1, #0
    509a:	4630      	mov	r0, r6
    509c:	47a8      	blx	r5
    509e:	200f      	movs	r0, #15
    50a0:	47a0      	blx	r4
    50a2:	2101      	movs	r1, #1
    50a4:	4638      	mov	r0, r7
    50a6:	47a8      	blx	r5
    50a8:	200f      	movs	r0, #15
    50aa:	47a0      	blx	r4
    50ac:	2100      	movs	r1, #0
    50ae:	4638      	mov	r0, r7
    50b0:	47a8      	blx	r5
    50b2:	200f      	movs	r0, #15
    50b4:	47a0      	blx	r4
    50b6:	f1b9 0901 	subs.w	r9, r9, #1
    50ba:	d1ed      	bne.n	5098 <I2C_readEXPANDER+0xfc>
	I2C_WAITACKOP(-4);
    50bc:	2101      	movs	r1, #1
    50be:	4630      	mov	r0, r6
    50c0:	47c0      	blx	r8
    50c2:	200f      	movs	r0, #15
    50c4:	47a0      	blx	r4
    50c6:	2101      	movs	r1, #1
    50c8:	4638      	mov	r0, r7
    50ca:	47a8      	blx	r5
    50cc:	200f      	movs	r0, #15
    50ce:	47a0      	blx	r4
    50d0:	4630      	mov	r0, r6
    50d2:	9b01      	ldr	r3, [sp, #4]
    50d4:	4798      	blx	r3
    50d6:	b188      	cbz	r0, 50fc <I2C_readEXPANDER+0x160>
    50d8:	2101      	movs	r1, #1
    50da:	4638      	mov	r0, r7
    50dc:	47a8      	blx	r5
    50de:	200f      	movs	r0, #15
    50e0:	47a0      	blx	r4
    50e2:	2101      	movs	r1, #1
    50e4:	4630      	mov	r0, r6
    50e6:	47a8      	blx	r5
    50e8:	200f      	movs	r0, #15
    50ea:	47a0      	blx	r4
    50ec:	2102      	movs	r1, #2
    50ee:	4630      	mov	r0, r6
    50f0:	47c0      	blx	r8
    50f2:	200f      	movs	r0, #15
    50f4:	47a0      	blx	r4
    50f6:	f06f 0003 	mvn.w	r0, #3
    50fa:	e7be      	b.n	507a <I2C_readEXPANDER+0xde>
    50fc:	4649      	mov	r1, r9
    50fe:	4638      	mov	r0, r7
    5100:	47a8      	blx	r5
    5102:	200f      	movs	r0, #15
    5104:	47a0      	blx	r4
    5106:	2102      	movs	r1, #2
    5108:	4630      	mov	r0, r6
    510a:	47c0      	blx	r8
    510c:	200f      	movs	r0, #15
    510e:	47a0      	blx	r4
	I2C_START(-5);
    5110:	2101      	movs	r1, #1
    5112:	4638      	mov	r0, r7
    5114:	47a8      	blx	r5
    5116:	2101      	movs	r1, #1
    5118:	4630      	mov	r0, r6
    511a:	47a8      	blx	r5
    511c:	2102      	movs	r1, #2
    511e:	4630      	mov	r0, r6
    5120:	47c0      	blx	r8
    5122:	200f      	movs	r0, #15
    5124:	47a0      	blx	r4
    5126:	200f      	movs	r0, #15
    5128:	47a0      	blx	r4
    512a:	4649      	mov	r1, r9
    512c:	4630      	mov	r0, r6
    512e:	47a8      	blx	r5
    5130:	200f      	movs	r0, #15
    5132:	47a0      	blx	r4
    5134:	4649      	mov	r1, r9
    5136:	4638      	mov	r0, r7
    5138:	47a8      	blx	r5
    513a:	200f      	movs	r0, #15
    513c:	47a0      	blx	r4
    513e:	f04f 0907 	mov.w	r9, #7
	I2C_SENDADDR(0x41, forloop);
    5142:	f04f 0b40 	mov.w	fp, #64	; 0x40
    5146:	f01b 0141 	ands.w	r1, fp, #65	; 0x41
    514a:	bf18      	it	ne
    514c:	2101      	movne	r1, #1
    514e:	4630      	mov	r0, r6
    5150:	47a8      	blx	r5
    5152:	200f      	movs	r0, #15
    5154:	47a0      	blx	r4
    5156:	2101      	movs	r1, #1
    5158:	4638      	mov	r0, r7
    515a:	47a8      	blx	r5
    515c:	200f      	movs	r0, #15
    515e:	47a0      	blx	r4
    5160:	2100      	movs	r1, #0
    5162:	4638      	mov	r0, r7
    5164:	47a8      	blx	r5
    5166:	200f      	movs	r0, #15
    5168:	47a0      	blx	r4
    516a:	f1b9 0901 	subs.w	r9, r9, #1
    516e:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
    5172:	d1e8      	bne.n	5146 <I2C_readEXPANDER+0x1aa>
	I2C_READ();
    5174:	2101      	movs	r1, #1
    5176:	4630      	mov	r0, r6
    5178:	47a8      	blx	r5
    517a:	200f      	movs	r0, #15
    517c:	47a0      	blx	r4
    517e:	2101      	movs	r1, #1
    5180:	4638      	mov	r0, r7
    5182:	47a8      	blx	r5
    5184:	200f      	movs	r0, #15
    5186:	47a0      	blx	r4
    5188:	4649      	mov	r1, r9
    518a:	4638      	mov	r0, r7
    518c:	47a8      	blx	r5
    518e:	200f      	movs	r0, #15
    5190:	47a0      	blx	r4
	I2C_WAITACKIP(-6);
    5192:	2101      	movs	r1, #1
    5194:	4630      	mov	r0, r6
    5196:	47c0      	blx	r8
    5198:	200f      	movs	r0, #15
    519a:	47a0      	blx	r4
    519c:	2101      	movs	r1, #1
    519e:	4638      	mov	r0, r7
    51a0:	47a8      	blx	r5
    51a2:	200f      	movs	r0, #15
    51a4:	47a0      	blx	r4
    51a6:	4630      	mov	r0, r6
    51a8:	9b01      	ldr	r3, [sp, #4]
    51aa:	4798      	blx	r3
    51ac:	b188      	cbz	r0, 51d2 <I2C_readEXPANDER+0x236>
    51ae:	2101      	movs	r1, #1
    51b0:	4638      	mov	r0, r7
    51b2:	47a8      	blx	r5
    51b4:	200f      	movs	r0, #15
    51b6:	47a0      	blx	r4
    51b8:	2101      	movs	r1, #1
    51ba:	4630      	mov	r0, r6
    51bc:	47a8      	blx	r5
    51be:	200f      	movs	r0, #15
    51c0:	47a0      	blx	r4
    51c2:	2102      	movs	r1, #2
    51c4:	4630      	mov	r0, r6
    51c6:	47c0      	blx	r8
    51c8:	200f      	movs	r0, #15
    51ca:	47a0      	blx	r4
    51cc:	f06f 0005 	mvn.w	r0, #5
    51d0:	e753      	b.n	507a <I2C_readEXPANDER+0xde>
    51d2:	4649      	mov	r1, r9
    51d4:	4638      	mov	r0, r7
    51d6:	47a8      	blx	r5
    51d8:	200f      	movs	r0, #15
    51da:	47a0      	blx	r4
	for (forloop = 0x80; forloop > 0;) {
    51dc:	f04f 0b80 	mov.w	fp, #128	; 0x80
	*inputs = 0;
    51e0:	f88a 9000 	strb.w	r9, [sl]
    51e4:	f04f 0908 	mov.w	r9, #8
		I2C_clockhi();
    51e8:	2101      	movs	r1, #1
    51ea:	4638      	mov	r0, r7
    51ec:	47a8      	blx	r5
    51ee:	200f      	movs	r0, #15
    51f0:	47a0      	blx	r4
		if (gpio_get_pin_level(i2csda)) {
    51f2:	4630      	mov	r0, r6
    51f4:	9b01      	ldr	r3, [sp, #4]
    51f6:	4798      	blx	r3
    51f8:	b128      	cbz	r0, 5206 <I2C_readEXPANDER+0x26a>
			(*inputs) |= forloop;
    51fa:	f89a 3000 	ldrb.w	r3, [sl]
    51fe:	ea4b 0303 	orr.w	r3, fp, r3
    5202:	f88a 3000 	strb.w	r3, [sl]
		I2C_clocklo();
    5206:	2100      	movs	r1, #0
    5208:	4638      	mov	r0, r7
    520a:	47a8      	blx	r5
    520c:	200f      	movs	r0, #15
    520e:	47a0      	blx	r4
	for (forloop = 0x80; forloop > 0;) {
    5210:	f1b9 0901 	subs.w	r9, r9, #1
		forloop = forloop / 2;
    5214:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
	for (forloop = 0x80; forloop > 0;) {
    5218:	d1e6      	bne.n	51e8 <I2C_readEXPANDER+0x24c>
	I2C_STOP();
    521a:	2101      	movs	r1, #1
    521c:	4638      	mov	r0, r7
    521e:	47a8      	blx	r5
    5220:	200f      	movs	r0, #15
    5222:	47a0      	blx	r4
    5224:	2101      	movs	r1, #1
    5226:	4630      	mov	r0, r6
    5228:	47a8      	blx	r5
    522a:	200f      	movs	r0, #15
    522c:	47a0      	blx	r4
    522e:	2102      	movs	r1, #2
    5230:	4630      	mov	r0, r6
    5232:	47c0      	blx	r8
    5234:	200f      	movs	r0, #15
    5236:	47a0      	blx	r4
	return 0;
    5238:	4648      	mov	r0, r9
    523a:	e71e      	b.n	507a <I2C_readEXPANDER+0xde>
		return -1;	
    523c:	f04f 30ff 	mov.w	r0, #4294967295
    5240:	e71b      	b.n	507a <I2C_readEXPANDER+0xde>
    5242:	bf00      	nop
    5244:	00004371 	.word	0x00004371
    5248:	00001201 	.word	0x00001201
    524c:	000043d9 	.word	0x000043d9
    5250:	00004391 	.word	0x00004391

00005254 <I2C_setGAIN>:
// * CALLED BY:			  main()                                                                                                       *
// * CALLS:		          No function. ALL macros defined in this function file.                                                       *
// * --------------------------------------------------------------------------------------------------------------------------------- *
int I2C_setGAIN(uint8_t sda,  uint8_t clk, unsigned char dac)

{
    5254:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5258:	460f      	mov	r7, r1
    525a:	4606      	mov	r6, r0
  	uint8_t     		i2csda, i2cclk;
    unsigned char		forloop;

	/* Open an I2C channel, send address 0x60, index register 0x00 then send the 8-bit "dac" value */
	I2C_OPEN(sda, clk);
    I2C_START(-1);
    525c:	4d7a      	ldr	r5, [pc, #488]	; (5448 <I2C_setGAIN+0x1f4>)
{
    525e:	9201      	str	r2, [sp, #4]
    I2C_START(-1);
    5260:	2101      	movs	r1, #1
    5262:	4638      	mov	r0, r7
    5264:	47a8      	blx	r5
    5266:	2101      	movs	r1, #1
    5268:	4630      	mov	r0, r6
    526a:	47a8      	blx	r5
    526c:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 5450 <I2C_setGAIN+0x1fc>
    5270:	4c76      	ldr	r4, [pc, #472]	; (544c <I2C_setGAIN+0x1f8>)
    5272:	2102      	movs	r1, #2
    5274:	4630      	mov	r0, r6
    5276:	47c0      	blx	r8
    5278:	200f      	movs	r0, #15
    527a:	47a0      	blx	r4
    527c:	200f      	movs	r0, #15
    527e:	47a0      	blx	r4
    5280:	2100      	movs	r1, #0
    5282:	4630      	mov	r0, r6
    5284:	47a8      	blx	r5
    5286:	200f      	movs	r0, #15
    5288:	47a0      	blx	r4
    528a:	2100      	movs	r1, #0
    528c:	4638      	mov	r0, r7
    528e:	47a8      	blx	r5
    5290:	200f      	movs	r0, #15
    5292:	47a0      	blx	r4
    5294:	f04f 0907 	mov.w	r9, #7
    I2C_SENDADDR(0x60, forloop);
    5298:	f04f 0a40 	mov.w	sl, #64	; 0x40
    529c:	f01a 0160 	ands.w	r1, sl, #96	; 0x60
    52a0:	bf18      	it	ne
    52a2:	2101      	movne	r1, #1
    52a4:	4630      	mov	r0, r6
    52a6:	47a8      	blx	r5
    52a8:	200f      	movs	r0, #15
    52aa:	47a0      	blx	r4
    52ac:	2101      	movs	r1, #1
    52ae:	4638      	mov	r0, r7
    52b0:	47a8      	blx	r5
    52b2:	200f      	movs	r0, #15
    52b4:	47a0      	blx	r4
    52b6:	2100      	movs	r1, #0
    52b8:	4638      	mov	r0, r7
    52ba:	47a8      	blx	r5
    52bc:	200f      	movs	r0, #15
    52be:	47a0      	blx	r4
    52c0:	f1b9 0901 	subs.w	r9, r9, #1
    52c4:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
    52c8:	d1e8      	bne.n	529c <I2C_setGAIN+0x48>
    I2C_WRITE();
    52ca:	4649      	mov	r1, r9
    52cc:	4630      	mov	r0, r6
    52ce:	47a8      	blx	r5
    52d0:	200f      	movs	r0, #15
    52d2:	47a0      	blx	r4
    52d4:	2101      	movs	r1, #1
    52d6:	4638      	mov	r0, r7
    52d8:	47a8      	blx	r5
    52da:	200f      	movs	r0, #15
    52dc:	47a0      	blx	r4
    52de:	4649      	mov	r1, r9
    52e0:	4638      	mov	r0, r7
    52e2:	47a8      	blx	r5
    52e4:	200f      	movs	r0, #15
    52e6:	47a0      	blx	r4
    I2C_WAITACKOP(-2);
    52e8:	2101      	movs	r1, #1
    52ea:	4630      	mov	r0, r6
    52ec:	47c0      	blx	r8
    52ee:	200f      	movs	r0, #15
    52f0:	47a0      	blx	r4
    52f2:	2101      	movs	r1, #1
    52f4:	4638      	mov	r0, r7
    52f6:	47a8      	blx	r5
    52f8:	200f      	movs	r0, #15
    52fa:	47a0      	blx	r4
    52fc:	f8df a154 	ldr.w	sl, [pc, #340]	; 5454 <I2C_setGAIN+0x200>
    5300:	4630      	mov	r0, r6
    5302:	47d0      	blx	sl
    5304:	b198      	cbz	r0, 532e <I2C_setGAIN+0xda>
    5306:	2101      	movs	r1, #1
    5308:	4638      	mov	r0, r7
    530a:	47a8      	blx	r5
    530c:	200f      	movs	r0, #15
    530e:	47a0      	blx	r4
    5310:	2101      	movs	r1, #1
    5312:	4630      	mov	r0, r6
    5314:	47a8      	blx	r5
    5316:	200f      	movs	r0, #15
    5318:	47a0      	blx	r4
    531a:	2102      	movs	r1, #2
    531c:	4630      	mov	r0, r6
    531e:	47c0      	blx	r8
    5320:	200f      	movs	r0, #15
    5322:	47a0      	blx	r4
    5324:	f06f 0001 	mvn.w	r0, #1
	/* If successful, and code execution got here, the close the I2C channel */
    I2C_STOP();
	I2C_CLOSE();
	
	return 0;
}
    5328:	b003      	add	sp, #12
    532a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    I2C_WAITACKOP(-2);
    532e:	4649      	mov	r1, r9
    5330:	4638      	mov	r0, r7
    5332:	47a8      	blx	r5
    5334:	200f      	movs	r0, #15
    5336:	47a0      	blx	r4
    5338:	2102      	movs	r1, #2
    533a:	4630      	mov	r0, r6
    533c:	47c0      	blx	r8
    533e:	200f      	movs	r0, #15
    5340:	47a0      	blx	r4
    5342:	f04f 0908 	mov.w	r9, #8
    I2C_SENDDATA(0x00, forloop);
    5346:	2100      	movs	r1, #0
    5348:	4630      	mov	r0, r6
    534a:	47a8      	blx	r5
    534c:	200f      	movs	r0, #15
    534e:	47a0      	blx	r4
    5350:	2101      	movs	r1, #1
    5352:	4638      	mov	r0, r7
    5354:	47a8      	blx	r5
    5356:	200f      	movs	r0, #15
    5358:	47a0      	blx	r4
    535a:	2100      	movs	r1, #0
    535c:	4638      	mov	r0, r7
    535e:	47a8      	blx	r5
    5360:	200f      	movs	r0, #15
    5362:	47a0      	blx	r4
    5364:	f1b9 0901 	subs.w	r9, r9, #1
    5368:	d1ed      	bne.n	5346 <I2C_setGAIN+0xf2>
    I2C_WAITACKOP(-3);
    536a:	2101      	movs	r1, #1
    536c:	4630      	mov	r0, r6
    536e:	47c0      	blx	r8
    5370:	200f      	movs	r0, #15
    5372:	47a0      	blx	r4
    5374:	2101      	movs	r1, #1
    5376:	4638      	mov	r0, r7
    5378:	47a8      	blx	r5
    537a:	200f      	movs	r0, #15
    537c:	47a0      	blx	r4
    537e:	4630      	mov	r0, r6
    5380:	47d0      	blx	sl
    5382:	b188      	cbz	r0, 53a8 <I2C_setGAIN+0x154>
    5384:	2101      	movs	r1, #1
    5386:	4638      	mov	r0, r7
    5388:	47a8      	blx	r5
    538a:	200f      	movs	r0, #15
    538c:	47a0      	blx	r4
    538e:	2101      	movs	r1, #1
    5390:	4630      	mov	r0, r6
    5392:	47a8      	blx	r5
    5394:	200f      	movs	r0, #15
    5396:	47a0      	blx	r4
    5398:	2102      	movs	r1, #2
    539a:	4630      	mov	r0, r6
    539c:	47c0      	blx	r8
    539e:	200f      	movs	r0, #15
    53a0:	47a0      	blx	r4
    53a2:	f06f 0002 	mvn.w	r0, #2
    53a6:	e7bf      	b.n	5328 <I2C_setGAIN+0xd4>
    53a8:	4649      	mov	r1, r9
    53aa:	4638      	mov	r0, r7
    53ac:	47a8      	blx	r5
    53ae:	200f      	movs	r0, #15
    53b0:	47a0      	blx	r4
    53b2:	2102      	movs	r1, #2
    53b4:	4630      	mov	r0, r6
    53b6:	47c0      	blx	r8
    53b8:	200f      	movs	r0, #15
    53ba:	47a0      	blx	r4
    53bc:	f04f 0908 	mov.w	r9, #8
	I2C_SENDDATA(dac, forloop);
    53c0:	f04f 0b80 	mov.w	fp, #128	; 0x80
    53c4:	9b01      	ldr	r3, [sp, #4]
    53c6:	ea13 010b 	ands.w	r1, r3, fp
    53ca:	bf18      	it	ne
    53cc:	2101      	movne	r1, #1
    53ce:	4630      	mov	r0, r6
    53d0:	47a8      	blx	r5
    53d2:	200f      	movs	r0, #15
    53d4:	47a0      	blx	r4
    53d6:	2101      	movs	r1, #1
    53d8:	4638      	mov	r0, r7
    53da:	47a8      	blx	r5
    53dc:	200f      	movs	r0, #15
    53de:	47a0      	blx	r4
    53e0:	2100      	movs	r1, #0
    53e2:	4638      	mov	r0, r7
    53e4:	47a8      	blx	r5
    53e6:	200f      	movs	r0, #15
    53e8:	47a0      	blx	r4
    53ea:	f1b9 0901 	subs.w	r9, r9, #1
    53ee:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
    53f2:	d1e7      	bne.n	53c4 <I2C_setGAIN+0x170>
	I2C_WAITACKOP(-3);
    53f4:	2101      	movs	r1, #1
    53f6:	4630      	mov	r0, r6
    53f8:	47c0      	blx	r8
    53fa:	200f      	movs	r0, #15
    53fc:	47a0      	blx	r4
    53fe:	2101      	movs	r1, #1
    5400:	4638      	mov	r0, r7
    5402:	47a8      	blx	r5
    5404:	200f      	movs	r0, #15
    5406:	47a0      	blx	r4
    5408:	4630      	mov	r0, r6
    540a:	47d0      	blx	sl
    540c:	2800      	cmp	r0, #0
    540e:	d1b9      	bne.n	5384 <I2C_setGAIN+0x130>
    5410:	4649      	mov	r1, r9
    5412:	4638      	mov	r0, r7
    5414:	47a8      	blx	r5
    5416:	200f      	movs	r0, #15
    5418:	47a0      	blx	r4
    541a:	2102      	movs	r1, #2
    541c:	4630      	mov	r0, r6
    541e:	47c0      	blx	r8
    5420:	200f      	movs	r0, #15
    5422:	47a0      	blx	r4
    I2C_STOP();
    5424:	2101      	movs	r1, #1
    5426:	4638      	mov	r0, r7
    5428:	47a8      	blx	r5
    542a:	200f      	movs	r0, #15
    542c:	47a0      	blx	r4
    542e:	2101      	movs	r1, #1
    5430:	4630      	mov	r0, r6
    5432:	47a8      	blx	r5
    5434:	200f      	movs	r0, #15
    5436:	47a0      	blx	r4
    5438:	2102      	movs	r1, #2
    543a:	4630      	mov	r0, r6
    543c:	47c0      	blx	r8
    543e:	200f      	movs	r0, #15
    5440:	47a0      	blx	r4
	return 0;
    5442:	4648      	mov	r0, r9
    5444:	e770      	b.n	5328 <I2C_setGAIN+0xd4>
    5446:	bf00      	nop
    5448:	00004371 	.word	0x00004371
    544c:	00001201 	.word	0x00001201
    5450:	000043d9 	.word	0x000043d9
    5454:	00004391 	.word	0x00004391

00005458 <I2C_getTEMPandMOISTURE>:
// * CALLED BY:			  main()                                                                                                                         *
// * CALLS:		          No function. ALL macros defined in this function file.                                                                         *
// * --------------------------------------------------------------------------------------------------------------------------------------------------- *
int I2C_getTEMPandMOISTURE(uint8_t sda,  uint8_t clk, unsigned char *th, unsigned char *tl, unsigned char *hh, unsigned char *hl)

{
    5458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    545c:	b085      	sub	sp, #20
    545e:	4604      	mov	r4, r0
    5460:	460d      	mov	r5, r1
    5462:	469a      	mov	sl, r3
	uint8_t     		i2csda, i2cclk;
	unsigned char		forloop;
	
	/* Assert and bounds check the return parameter variables */
	if ((!th) || (!tl) || (!hh) || (!hl)) {
    5464:	9203      	str	r2, [sp, #12]
    5466:	2a00      	cmp	r2, #0
    5468:	f000 85ce 	beq.w	6008 <I2C_getTEMPandMOISTURE+0xbb0>
    546c:	f1ba 0f00 	cmp.w	sl, #0
    5470:	f000 85ca 	beq.w	6008 <I2C_getTEMPandMOISTURE+0xbb0>
    5474:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5476:	2b00      	cmp	r3, #0
    5478:	f000 85c6 	beq.w	6008 <I2C_getTEMPandMOISTURE+0xbb0>
    547c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    547e:	2b00      	cmp	r3, #0
    5480:	f000 85c2 	beq.w	6008 <I2C_getTEMPandMOISTURE+0xbb0>
		return -1;
	}

	/* Open an I2C channel, send address 0x40, index register 0x0F to trigger-conversion */
	I2C_OPEN(sda, clk);
	I2C_START(-2);
    5484:	4f5a      	ldr	r7, [pc, #360]	; (55f0 <I2C_getTEMPandMOISTURE+0x198>)
    5486:	f8df b174 	ldr.w	fp, [pc, #372]	; 55fc <I2C_getTEMPandMOISTURE+0x1a4>
    548a:	4e5a      	ldr	r6, [pc, #360]	; (55f4 <I2C_getTEMPandMOISTURE+0x19c>)
    548c:	2101      	movs	r1, #1
    548e:	4628      	mov	r0, r5
    5490:	47b8      	blx	r7
    5492:	2101      	movs	r1, #1
    5494:	4620      	mov	r0, r4
    5496:	47b8      	blx	r7
    5498:	2102      	movs	r1, #2
    549a:	4620      	mov	r0, r4
    549c:	47d8      	blx	fp
    549e:	200f      	movs	r0, #15
    54a0:	47b0      	blx	r6
    54a2:	200f      	movs	r0, #15
    54a4:	47b0      	blx	r6
    54a6:	2100      	movs	r1, #0
    54a8:	4620      	mov	r0, r4
    54aa:	47b8      	blx	r7
    54ac:	200f      	movs	r0, #15
    54ae:	47b0      	blx	r6
    54b0:	2100      	movs	r1, #0
    54b2:	4628      	mov	r0, r5
    54b4:	47b8      	blx	r7
    54b6:	200f      	movs	r0, #15
    54b8:	47b0      	blx	r6
    54ba:	f04f 0807 	mov.w	r8, #7
	I2C_SENDADDR(0x40, forloop);
    54be:	f04f 0940 	mov.w	r9, #64	; 0x40
    54c2:	f8cd b004 	str.w	fp, [sp, #4]
    54c6:	f019 0140 	ands.w	r1, r9, #64	; 0x40
    54ca:	bf18      	it	ne
    54cc:	2101      	movne	r1, #1
    54ce:	4620      	mov	r0, r4
    54d0:	47b8      	blx	r7
    54d2:	200f      	movs	r0, #15
    54d4:	47b0      	blx	r6
    54d6:	2101      	movs	r1, #1
    54d8:	4628      	mov	r0, r5
    54da:	47b8      	blx	r7
    54dc:	200f      	movs	r0, #15
    54de:	47b0      	blx	r6
    54e0:	2100      	movs	r1, #0
    54e2:	4628      	mov	r0, r5
    54e4:	47b8      	blx	r7
    54e6:	200f      	movs	r0, #15
    54e8:	47b0      	blx	r6
    54ea:	f1b8 0801 	subs.w	r8, r8, #1
    54ee:	ea4f 0959 	mov.w	r9, r9, lsr #1
    54f2:	d1e8      	bne.n	54c6 <I2C_getTEMPandMOISTURE+0x6e>
	I2C_WRITE();
    54f4:	4641      	mov	r1, r8
    54f6:	4620      	mov	r0, r4
    54f8:	47b8      	blx	r7
    54fa:	200f      	movs	r0, #15
    54fc:	47b0      	blx	r6
    54fe:	2101      	movs	r1, #1
    5500:	4628      	mov	r0, r5
    5502:	47b8      	blx	r7
    5504:	200f      	movs	r0, #15
    5506:	47b0      	blx	r6
    5508:	4641      	mov	r1, r8
    550a:	4628      	mov	r0, r5
    550c:	47b8      	blx	r7
    550e:	200f      	movs	r0, #15
    5510:	47b0      	blx	r6
	I2C_WAITACKOP(-3);
    5512:	9b01      	ldr	r3, [sp, #4]
    5514:	2101      	movs	r1, #1
    5516:	4620      	mov	r0, r4
    5518:	4798      	blx	r3
    551a:	200f      	movs	r0, #15
    551c:	47b0      	blx	r6
    551e:	2101      	movs	r1, #1
    5520:	4628      	mov	r0, r5
    5522:	47b8      	blx	r7
    5524:	200f      	movs	r0, #15
    5526:	47b0      	blx	r6
    5528:	4620      	mov	r0, r4
    552a:	4b33      	ldr	r3, [pc, #204]	; (55f8 <I2C_getTEMPandMOISTURE+0x1a0>)
    552c:	4798      	blx	r3
    552e:	b1a8      	cbz	r0, 555c <I2C_getTEMPandMOISTURE+0x104>
    5530:	2101      	movs	r1, #1
    5532:	4628      	mov	r0, r5
    5534:	47b8      	blx	r7
    5536:	4d2f      	ldr	r5, [pc, #188]	; (55f4 <I2C_getTEMPandMOISTURE+0x19c>)
    5538:	200f      	movs	r0, #15
    553a:	47a8      	blx	r5
    553c:	2101      	movs	r1, #1
    553e:	4620      	mov	r0, r4
    5540:	47b8      	blx	r7
    5542:	200f      	movs	r0, #15
    5544:	47a8      	blx	r5
    5546:	2102      	movs	r1, #2
    5548:	4620      	mov	r0, r4
    554a:	9b01      	ldr	r3, [sp, #4]
    554c:	4798      	blx	r3
    554e:	200f      	movs	r0, #15
    5550:	47a8      	blx	r5
    5552:	f06f 0002 	mvn.w	r0, #2
	I2C_STOP();
	I2C_CLOSE();
	/* If successful, and code execution got here, the close the I2C channel */
	
	return 0;
}
    5556:	b005      	add	sp, #20
    5558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	I2C_WAITACKOP(-3);
    555c:	4641      	mov	r1, r8
    555e:	4628      	mov	r0, r5
    5560:	47b8      	blx	r7
    5562:	200f      	movs	r0, #15
    5564:	47b0      	blx	r6
    5566:	2102      	movs	r1, #2
    5568:	4620      	mov	r0, r4
    556a:	9b01      	ldr	r3, [sp, #4]
    556c:	4798      	blx	r3
    556e:	200f      	movs	r0, #15
    5570:	47b0      	blx	r6
    5572:	4e20      	ldr	r6, [pc, #128]	; (55f4 <I2C_getTEMPandMOISTURE+0x19c>)
    5574:	f04f 0808 	mov.w	r8, #8
	I2C_SENDDATA(0x0F, forloop);
    5578:	f04f 0980 	mov.w	r9, #128	; 0x80
    557c:	f019 010f 	ands.w	r1, r9, #15
    5580:	bf18      	it	ne
    5582:	2101      	movne	r1, #1
    5584:	4620      	mov	r0, r4
    5586:	47b8      	blx	r7
    5588:	200f      	movs	r0, #15
    558a:	47b0      	blx	r6
    558c:	2101      	movs	r1, #1
    558e:	4628      	mov	r0, r5
    5590:	47b8      	blx	r7
    5592:	200f      	movs	r0, #15
    5594:	47b0      	blx	r6
    5596:	2100      	movs	r1, #0
    5598:	4628      	mov	r0, r5
    559a:	47b8      	blx	r7
    559c:	200f      	movs	r0, #15
    559e:	47b0      	blx	r6
    55a0:	f1b8 0801 	subs.w	r8, r8, #1
    55a4:	ea4f 0959 	mov.w	r9, r9, lsr #1
    55a8:	d1e8      	bne.n	557c <I2C_getTEMPandMOISTURE+0x124>
	I2C_WAITACKOP(-4);
    55aa:	9b01      	ldr	r3, [sp, #4]
    55ac:	2101      	movs	r1, #1
    55ae:	4620      	mov	r0, r4
    55b0:	4798      	blx	r3
    55b2:	200f      	movs	r0, #15
    55b4:	47b0      	blx	r6
    55b6:	2101      	movs	r1, #1
    55b8:	4628      	mov	r0, r5
    55ba:	47b8      	blx	r7
    55bc:	200f      	movs	r0, #15
    55be:	47b0      	blx	r6
    55c0:	4620      	mov	r0, r4
    55c2:	4b0d      	ldr	r3, [pc, #52]	; (55f8 <I2C_getTEMPandMOISTURE+0x1a0>)
    55c4:	4798      	blx	r3
    55c6:	b1d8      	cbz	r0, 5600 <I2C_getTEMPandMOISTURE+0x1a8>
    55c8:	2101      	movs	r1, #1
    55ca:	4628      	mov	r0, r5
    55cc:	47b8      	blx	r7
    55ce:	4d09      	ldr	r5, [pc, #36]	; (55f4 <I2C_getTEMPandMOISTURE+0x19c>)
    55d0:	200f      	movs	r0, #15
    55d2:	47a8      	blx	r5
    55d4:	2101      	movs	r1, #1
    55d6:	4620      	mov	r0, r4
    55d8:	47b8      	blx	r7
    55da:	200f      	movs	r0, #15
    55dc:	47a8      	blx	r5
    55de:	2102      	movs	r1, #2
    55e0:	4620      	mov	r0, r4
    55e2:	9b01      	ldr	r3, [sp, #4]
    55e4:	4798      	blx	r3
    55e6:	200f      	movs	r0, #15
    55e8:	47a8      	blx	r5
    55ea:	f06f 0003 	mvn.w	r0, #3
    55ee:	e7b2      	b.n	5556 <I2C_getTEMPandMOISTURE+0xfe>
    55f0:	00004371 	.word	0x00004371
    55f4:	00001201 	.word	0x00001201
    55f8:	00004391 	.word	0x00004391
    55fc:	000043d9 	.word	0x000043d9
    5600:	4641      	mov	r1, r8
    5602:	4628      	mov	r0, r5
    5604:	47b8      	blx	r7
    5606:	200f      	movs	r0, #15
    5608:	47b0      	blx	r6
    560a:	2102      	movs	r1, #2
    560c:	4620      	mov	r0, r4
    560e:	9b01      	ldr	r3, [sp, #4]
    5610:	4798      	blx	r3
    5612:	200f      	movs	r0, #15
    5614:	47b0      	blx	r6
    5616:	4e9e      	ldr	r6, [pc, #632]	; (5890 <I2C_getTEMPandMOISTURE+0x438>)
    5618:	f04f 0808 	mov.w	r8, #8
	I2C_SENDDATA(0x01, forloop);
    561c:	f04f 0980 	mov.w	r9, #128	; 0x80
    5620:	f019 0101 	ands.w	r1, r9, #1
    5624:	bf18      	it	ne
    5626:	2101      	movne	r1, #1
    5628:	4620      	mov	r0, r4
    562a:	47b8      	blx	r7
    562c:	200f      	movs	r0, #15
    562e:	47b0      	blx	r6
    5630:	2101      	movs	r1, #1
    5632:	4628      	mov	r0, r5
    5634:	47b8      	blx	r7
    5636:	200f      	movs	r0, #15
    5638:	47b0      	blx	r6
    563a:	2100      	movs	r1, #0
    563c:	4628      	mov	r0, r5
    563e:	47b8      	blx	r7
    5640:	200f      	movs	r0, #15
    5642:	47b0      	blx	r6
    5644:	f1b8 0801 	subs.w	r8, r8, #1
    5648:	ea4f 0959 	mov.w	r9, r9, lsr #1
    564c:	d1e8      	bne.n	5620 <I2C_getTEMPandMOISTURE+0x1c8>
	I2C_WAITACKOP(-4);
    564e:	9b01      	ldr	r3, [sp, #4]
    5650:	2101      	movs	r1, #1
    5652:	4620      	mov	r0, r4
    5654:	4798      	blx	r3
    5656:	200f      	movs	r0, #15
    5658:	47b0      	blx	r6
    565a:	2101      	movs	r1, #1
    565c:	4628      	mov	r0, r5
    565e:	47b8      	blx	r7
    5660:	200f      	movs	r0, #15
    5662:	47b0      	blx	r6
    5664:	4620      	mov	r0, r4
    5666:	4b8b      	ldr	r3, [pc, #556]	; (5894 <I2C_getTEMPandMOISTURE+0x43c>)
    5668:	4798      	blx	r3
    566a:	2800      	cmp	r0, #0
    566c:	d1ac      	bne.n	55c8 <I2C_getTEMPandMOISTURE+0x170>
    566e:	4641      	mov	r1, r8
    5670:	4628      	mov	r0, r5
    5672:	47b8      	blx	r7
    5674:	200f      	movs	r0, #15
    5676:	47b0      	blx	r6
    5678:	9b01      	ldr	r3, [sp, #4]
    567a:	2102      	movs	r1, #2
    567c:	4620      	mov	r0, r4
    567e:	4798      	blx	r3
    5680:	200f      	movs	r0, #15
    5682:	47b0      	blx	r6
	I2C_STOP();
    5684:	2101      	movs	r1, #1
    5686:	4628      	mov	r0, r5
    5688:	47b8      	blx	r7
    568a:	200f      	movs	r0, #15
    568c:	47b0      	blx	r6
    568e:	2101      	movs	r1, #1
    5690:	4620      	mov	r0, r4
    5692:	47b8      	blx	r7
    5694:	200f      	movs	r0, #15
    5696:	47b0      	blx	r6
    5698:	9b01      	ldr	r3, [sp, #4]
    569a:	2102      	movs	r1, #2
    569c:	4620      	mov	r0, r4
    569e:	4798      	blx	r3
    56a0:	200f      	movs	r0, #15
    56a2:	47b0      	blx	r6
	I2C_START(-2);
    56a4:	2101      	movs	r1, #1
    56a6:	4628      	mov	r0, r5
    56a8:	47b8      	blx	r7
    56aa:	2101      	movs	r1, #1
    56ac:	4620      	mov	r0, r4
    56ae:	47b8      	blx	r7
    56b0:	9b01      	ldr	r3, [sp, #4]
    56b2:	2102      	movs	r1, #2
    56b4:	4620      	mov	r0, r4
    56b6:	4798      	blx	r3
    56b8:	200f      	movs	r0, #15
    56ba:	47b0      	blx	r6
    56bc:	200f      	movs	r0, #15
    56be:	47b0      	blx	r6
    56c0:	4641      	mov	r1, r8
    56c2:	4620      	mov	r0, r4
    56c4:	47b8      	blx	r7
    56c6:	200f      	movs	r0, #15
    56c8:	47b0      	blx	r6
    56ca:	4641      	mov	r1, r8
    56cc:	4628      	mov	r0, r5
    56ce:	47b8      	blx	r7
    56d0:	200f      	movs	r0, #15
    56d2:	47b0      	blx	r6
    56d4:	4e6e      	ldr	r6, [pc, #440]	; (5890 <I2C_getTEMPandMOISTURE+0x438>)
    56d6:	f04f 0807 	mov.w	r8, #7
	I2C_SENDADDR(0x40, forloop);
    56da:	f04f 0940 	mov.w	r9, #64	; 0x40
    56de:	f019 0140 	ands.w	r1, r9, #64	; 0x40
    56e2:	bf18      	it	ne
    56e4:	2101      	movne	r1, #1
    56e6:	4620      	mov	r0, r4
    56e8:	47b8      	blx	r7
    56ea:	200f      	movs	r0, #15
    56ec:	47b0      	blx	r6
    56ee:	2101      	movs	r1, #1
    56f0:	4628      	mov	r0, r5
    56f2:	47b8      	blx	r7
    56f4:	200f      	movs	r0, #15
    56f6:	47b0      	blx	r6
    56f8:	2100      	movs	r1, #0
    56fa:	4628      	mov	r0, r5
    56fc:	47b8      	blx	r7
    56fe:	200f      	movs	r0, #15
    5700:	47b0      	blx	r6
    5702:	f1b8 0801 	subs.w	r8, r8, #1
    5706:	ea4f 0959 	mov.w	r9, r9, lsr #1
    570a:	d1e8      	bne.n	56de <I2C_getTEMPandMOISTURE+0x286>
	I2C_WRITE();
    570c:	4641      	mov	r1, r8
    570e:	4620      	mov	r0, r4
    5710:	47b8      	blx	r7
    5712:	200f      	movs	r0, #15
    5714:	47b0      	blx	r6
    5716:	2101      	movs	r1, #1
    5718:	4628      	mov	r0, r5
    571a:	47b8      	blx	r7
    571c:	200f      	movs	r0, #15
    571e:	47b0      	blx	r6
    5720:	4641      	mov	r1, r8
    5722:	4628      	mov	r0, r5
    5724:	47b8      	blx	r7
    5726:	200f      	movs	r0, #15
    5728:	47b0      	blx	r6
	I2C_WAITACKOP(-3);
    572a:	9b01      	ldr	r3, [sp, #4]
    572c:	2101      	movs	r1, #1
    572e:	4620      	mov	r0, r4
    5730:	4798      	blx	r3
    5732:	200f      	movs	r0, #15
    5734:	47b0      	blx	r6
    5736:	2101      	movs	r1, #1
    5738:	4628      	mov	r0, r5
    573a:	47b8      	blx	r7
    573c:	200f      	movs	r0, #15
    573e:	47b0      	blx	r6
    5740:	4620      	mov	r0, r4
    5742:	4b54      	ldr	r3, [pc, #336]	; (5894 <I2C_getTEMPandMOISTURE+0x43c>)
    5744:	4798      	blx	r3
    5746:	2800      	cmp	r0, #0
    5748:	f47f aef2 	bne.w	5530 <I2C_getTEMPandMOISTURE+0xd8>
    574c:	4641      	mov	r1, r8
    574e:	4628      	mov	r0, r5
    5750:	47b8      	blx	r7
    5752:	200f      	movs	r0, #15
    5754:	47b0      	blx	r6
    5756:	2102      	movs	r1, #2
    5758:	4620      	mov	r0, r4
    575a:	9b01      	ldr	r3, [sp, #4]
    575c:	4798      	blx	r3
    575e:	200f      	movs	r0, #15
    5760:	47b0      	blx	r6
    5762:	f04f 0808 	mov.w	r8, #8
	I2C_SENDDATA(0x00, forloop);
    5766:	2100      	movs	r1, #0
    5768:	4620      	mov	r0, r4
    576a:	47b8      	blx	r7
    576c:	200f      	movs	r0, #15
    576e:	47b0      	blx	r6
    5770:	2101      	movs	r1, #1
    5772:	4628      	mov	r0, r5
    5774:	47b8      	blx	r7
    5776:	200f      	movs	r0, #15
    5778:	47b0      	blx	r6
    577a:	2100      	movs	r1, #0
    577c:	4628      	mov	r0, r5
    577e:	47b8      	blx	r7
    5780:	200f      	movs	r0, #15
    5782:	47b0      	blx	r6
    5784:	f1b8 0801 	subs.w	r8, r8, #1
    5788:	d1ed      	bne.n	5766 <I2C_getTEMPandMOISTURE+0x30e>
	I2C_WAITACKOP(-4);
    578a:	9b01      	ldr	r3, [sp, #4]
    578c:	2101      	movs	r1, #1
    578e:	4620      	mov	r0, r4
    5790:	4798      	blx	r3
    5792:	200f      	movs	r0, #15
    5794:	47b0      	blx	r6
    5796:	2101      	movs	r1, #1
    5798:	4628      	mov	r0, r5
    579a:	47b8      	blx	r7
    579c:	200f      	movs	r0, #15
    579e:	47b0      	blx	r6
    57a0:	4620      	mov	r0, r4
    57a2:	4b3c      	ldr	r3, [pc, #240]	; (5894 <I2C_getTEMPandMOISTURE+0x43c>)
    57a4:	4798      	blx	r3
    57a6:	2800      	cmp	r0, #0
    57a8:	f47f af0e 	bne.w	55c8 <I2C_getTEMPandMOISTURE+0x170>
    57ac:	4641      	mov	r1, r8
    57ae:	4628      	mov	r0, r5
    57b0:	47b8      	blx	r7
    57b2:	200f      	movs	r0, #15
    57b4:	47b0      	blx	r6
    57b6:	9b01      	ldr	r3, [sp, #4]
    57b8:	2102      	movs	r1, #2
    57ba:	4620      	mov	r0, r4
    57bc:	4798      	blx	r3
    57be:	200f      	movs	r0, #15
    57c0:	47b0      	blx	r6
	I2C_START(-5);
    57c2:	2101      	movs	r1, #1
    57c4:	4628      	mov	r0, r5
    57c6:	47b8      	blx	r7
    57c8:	2101      	movs	r1, #1
    57ca:	4620      	mov	r0, r4
    57cc:	47b8      	blx	r7
    57ce:	9b01      	ldr	r3, [sp, #4]
    57d0:	2102      	movs	r1, #2
    57d2:	4620      	mov	r0, r4
    57d4:	4798      	blx	r3
    57d6:	200f      	movs	r0, #15
    57d8:	47b0      	blx	r6
    57da:	200f      	movs	r0, #15
    57dc:	47b0      	blx	r6
    57de:	4641      	mov	r1, r8
    57e0:	4620      	mov	r0, r4
    57e2:	47b8      	blx	r7
    57e4:	200f      	movs	r0, #15
    57e6:	47b0      	blx	r6
    57e8:	4641      	mov	r1, r8
    57ea:	4628      	mov	r0, r5
    57ec:	47b8      	blx	r7
    57ee:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 5890 <I2C_getTEMPandMOISTURE+0x438>
    57f2:	200f      	movs	r0, #15
    57f4:	47b0      	blx	r6
    57f6:	f04f 0907 	mov.w	r9, #7
	I2C_SENDADDR(0x40, forloop);
    57fa:	2640      	movs	r6, #64	; 0x40
    57fc:	f016 0140 	ands.w	r1, r6, #64	; 0x40
    5800:	bf18      	it	ne
    5802:	2101      	movne	r1, #1
    5804:	4620      	mov	r0, r4
    5806:	47b8      	blx	r7
    5808:	200f      	movs	r0, #15
    580a:	47c0      	blx	r8
    580c:	2101      	movs	r1, #1
    580e:	4628      	mov	r0, r5
    5810:	47b8      	blx	r7
    5812:	200f      	movs	r0, #15
    5814:	47c0      	blx	r8
    5816:	2100      	movs	r1, #0
    5818:	4628      	mov	r0, r5
    581a:	47b8      	blx	r7
    581c:	200f      	movs	r0, #15
    581e:	47c0      	blx	r8
    5820:	f1b9 0901 	subs.w	r9, r9, #1
    5824:	ea4f 0656 	mov.w	r6, r6, lsr #1
    5828:	d1e8      	bne.n	57fc <I2C_getTEMPandMOISTURE+0x3a4>
	I2C_READ();
    582a:	2101      	movs	r1, #1
    582c:	4620      	mov	r0, r4
    582e:	47b8      	blx	r7
    5830:	200f      	movs	r0, #15
    5832:	47c0      	blx	r8
    5834:	2101      	movs	r1, #1
    5836:	4628      	mov	r0, r5
    5838:	47b8      	blx	r7
    583a:	200f      	movs	r0, #15
    583c:	47c0      	blx	r8
    583e:	4649      	mov	r1, r9
    5840:	4628      	mov	r0, r5
    5842:	47b8      	blx	r7
    5844:	200f      	movs	r0, #15
    5846:	47c0      	blx	r8
	I2C_WAITACKIP(-6);
    5848:	9b01      	ldr	r3, [sp, #4]
    584a:	f8df b048 	ldr.w	fp, [pc, #72]	; 5894 <I2C_getTEMPandMOISTURE+0x43c>
    584e:	4e10      	ldr	r6, [pc, #64]	; (5890 <I2C_getTEMPandMOISTURE+0x438>)
    5850:	2101      	movs	r1, #1
    5852:	4620      	mov	r0, r4
    5854:	4798      	blx	r3
    5856:	200f      	movs	r0, #15
    5858:	47c0      	blx	r8
    585a:	2101      	movs	r1, #1
    585c:	4628      	mov	r0, r5
    585e:	47b8      	blx	r7
    5860:	200f      	movs	r0, #15
    5862:	47c0      	blx	r8
    5864:	4620      	mov	r0, r4
    5866:	47d8      	blx	fp
    5868:	b1b0      	cbz	r0, 5898 <I2C_getTEMPandMOISTURE+0x440>
    586a:	2101      	movs	r1, #1
    586c:	4628      	mov	r0, r5
    586e:	47b8      	blx	r7
    5870:	200f      	movs	r0, #15
    5872:	47b0      	blx	r6
    5874:	2101      	movs	r1, #1
    5876:	4620      	mov	r0, r4
    5878:	47b8      	blx	r7
    587a:	200f      	movs	r0, #15
    587c:	47b0      	blx	r6
    587e:	2102      	movs	r1, #2
    5880:	4620      	mov	r0, r4
    5882:	9b01      	ldr	r3, [sp, #4]
    5884:	4798      	blx	r3
    5886:	200f      	movs	r0, #15
    5888:	47b0      	blx	r6
    588a:	f06f 0005 	mvn.w	r0, #5
    588e:	e662      	b.n	5556 <I2C_getTEMPandMOISTURE+0xfe>
    5890:	00001201 	.word	0x00001201
    5894:	00004391 	.word	0x00004391
    5898:	4649      	mov	r1, r9
    589a:	4628      	mov	r0, r5
    589c:	47b8      	blx	r7
    589e:	200f      	movs	r0, #15
    58a0:	47c0      	blx	r8
	*tl = 0;
    58a2:	f88a 9000 	strb.w	r9, [sl]
    58a6:	f04f 0808 	mov.w	r8, #8
	for (forloop = 0x80; forloop > 0;) {
    58aa:	f04f 0980 	mov.w	r9, #128	; 0x80
		I2C_clockhi();
    58ae:	2101      	movs	r1, #1
    58b0:	4628      	mov	r0, r5
    58b2:	47b8      	blx	r7
    58b4:	200f      	movs	r0, #15
    58b6:	47b0      	blx	r6
	    if (gpio_get_pin_level(i2csda)) {
    58b8:	4620      	mov	r0, r4
    58ba:	47d8      	blx	fp
    58bc:	b128      	cbz	r0, 58ca <I2C_getTEMPandMOISTURE+0x472>
			(*tl) |= forloop;
    58be:	f89a 3000 	ldrb.w	r3, [sl]
    58c2:	ea49 0303 	orr.w	r3, r9, r3
    58c6:	f88a 3000 	strb.w	r3, [sl]
		I2C_clocklo();
    58ca:	2100      	movs	r1, #0
    58cc:	4628      	mov	r0, r5
    58ce:	47b8      	blx	r7
    58d0:	200f      	movs	r0, #15
    58d2:	47b0      	blx	r6
	for (forloop = 0x80; forloop > 0;) {
    58d4:	f1b8 0801 	subs.w	r8, r8, #1
		forloop = forloop / 2;
    58d8:	ea4f 0959 	mov.w	r9, r9, lsr #1
	for (forloop = 0x80; forloop > 0;) {
    58dc:	d1e7      	bne.n	58ae <I2C_getTEMPandMOISTURE+0x456>
	I2C_STOP();
    58de:	2101      	movs	r1, #1
    58e0:	4628      	mov	r0, r5
    58e2:	47b8      	blx	r7
    58e4:	200f      	movs	r0, #15
    58e6:	47b0      	blx	r6
    58e8:	2101      	movs	r1, #1
    58ea:	4620      	mov	r0, r4
    58ec:	47b8      	blx	r7
    58ee:	200f      	movs	r0, #15
    58f0:	47b0      	blx	r6
    58f2:	9b01      	ldr	r3, [sp, #4]
    58f4:	2102      	movs	r1, #2
    58f6:	4620      	mov	r0, r4
    58f8:	4798      	blx	r3
    58fa:	200f      	movs	r0, #15
    58fc:	47b0      	blx	r6
	I2C_START(-2);
    58fe:	2101      	movs	r1, #1
    5900:	4628      	mov	r0, r5
    5902:	47b8      	blx	r7
    5904:	2101      	movs	r1, #1
    5906:	4620      	mov	r0, r4
    5908:	47b8      	blx	r7
    590a:	9b01      	ldr	r3, [sp, #4]
    590c:	2102      	movs	r1, #2
    590e:	4620      	mov	r0, r4
    5910:	4798      	blx	r3
    5912:	200f      	movs	r0, #15
    5914:	47b0      	blx	r6
    5916:	200f      	movs	r0, #15
    5918:	47b0      	blx	r6
    591a:	4641      	mov	r1, r8
    591c:	4620      	mov	r0, r4
    591e:	47b8      	blx	r7
    5920:	200f      	movs	r0, #15
    5922:	47b0      	blx	r6
    5924:	4641      	mov	r1, r8
    5926:	4628      	mov	r0, r5
    5928:	47b8      	blx	r7
    592a:	200f      	movs	r0, #15
    592c:	47b0      	blx	r6
    592e:	f04f 0807 	mov.w	r8, #7
	I2C_SENDADDR(0x40, forloop);
    5932:	f04f 0940 	mov.w	r9, #64	; 0x40
    5936:	f019 0140 	ands.w	r1, r9, #64	; 0x40
    593a:	bf18      	it	ne
    593c:	2101      	movne	r1, #1
    593e:	4620      	mov	r0, r4
    5940:	47b8      	blx	r7
    5942:	200f      	movs	r0, #15
    5944:	47b0      	blx	r6
    5946:	2101      	movs	r1, #1
    5948:	4628      	mov	r0, r5
    594a:	47b8      	blx	r7
    594c:	200f      	movs	r0, #15
    594e:	47b0      	blx	r6
    5950:	2100      	movs	r1, #0
    5952:	4628      	mov	r0, r5
    5954:	47b8      	blx	r7
    5956:	200f      	movs	r0, #15
    5958:	47b0      	blx	r6
    595a:	f1b8 0801 	subs.w	r8, r8, #1
    595e:	ea4f 0959 	mov.w	r9, r9, lsr #1
    5962:	d1e8      	bne.n	5936 <I2C_getTEMPandMOISTURE+0x4de>
	I2C_WRITE();
    5964:	4641      	mov	r1, r8
    5966:	4620      	mov	r0, r4
    5968:	47b8      	blx	r7
    596a:	200f      	movs	r0, #15
    596c:	47b0      	blx	r6
    596e:	2101      	movs	r1, #1
    5970:	4628      	mov	r0, r5
    5972:	47b8      	blx	r7
    5974:	200f      	movs	r0, #15
    5976:	47b0      	blx	r6
    5978:	4641      	mov	r1, r8
    597a:	4628      	mov	r0, r5
    597c:	47b8      	blx	r7
    597e:	200f      	movs	r0, #15
    5980:	47b0      	blx	r6
	I2C_WAITACKOP(-3);
    5982:	9b01      	ldr	r3, [sp, #4]
    5984:	2101      	movs	r1, #1
    5986:	4620      	mov	r0, r4
    5988:	4798      	blx	r3
    598a:	200f      	movs	r0, #15
    598c:	47b0      	blx	r6
    598e:	2101      	movs	r1, #1
    5990:	4628      	mov	r0, r5
    5992:	47b8      	blx	r7
    5994:	200f      	movs	r0, #15
    5996:	47b0      	blx	r6
    5998:	4620      	mov	r0, r4
    599a:	4bb3      	ldr	r3, [pc, #716]	; (5c68 <I2C_getTEMPandMOISTURE+0x810>)
    599c:	4798      	blx	r3
    599e:	2800      	cmp	r0, #0
    59a0:	f47f adc6 	bne.w	5530 <I2C_getTEMPandMOISTURE+0xd8>
    59a4:	4641      	mov	r1, r8
    59a6:	4628      	mov	r0, r5
    59a8:	47b8      	blx	r7
    59aa:	200f      	movs	r0, #15
    59ac:	47b0      	blx	r6
    59ae:	2102      	movs	r1, #2
    59b0:	4620      	mov	r0, r4
    59b2:	9b01      	ldr	r3, [sp, #4]
    59b4:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 5c6c <I2C_getTEMPandMOISTURE+0x814>
    59b8:	4798      	blx	r3
    59ba:	200f      	movs	r0, #15
    59bc:	47b0      	blx	r6
    59be:	f04f 0908 	mov.w	r9, #8
	I2C_SENDDATA(0x01, forloop);
    59c2:	f04f 0a80 	mov.w	sl, #128	; 0x80
    59c6:	f01a 0101 	ands.w	r1, sl, #1
    59ca:	bf18      	it	ne
    59cc:	2101      	movne	r1, #1
    59ce:	4620      	mov	r0, r4
    59d0:	47c0      	blx	r8
    59d2:	200f      	movs	r0, #15
    59d4:	47b0      	blx	r6
    59d6:	2101      	movs	r1, #1
    59d8:	4628      	mov	r0, r5
    59da:	47c0      	blx	r8
    59dc:	200f      	movs	r0, #15
    59de:	47b0      	blx	r6
    59e0:	2100      	movs	r1, #0
    59e2:	4628      	mov	r0, r5
    59e4:	47c0      	blx	r8
    59e6:	200f      	movs	r0, #15
    59e8:	47b0      	blx	r6
    59ea:	f1b9 0901 	subs.w	r9, r9, #1
    59ee:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
    59f2:	d1e8      	bne.n	59c6 <I2C_getTEMPandMOISTURE+0x56e>
	I2C_WAITACKOP(-4);
    59f4:	2101      	movs	r1, #1
    59f6:	4620      	mov	r0, r4
    59f8:	f8df a274 	ldr.w	sl, [pc, #628]	; 5c70 <I2C_getTEMPandMOISTURE+0x818>
    59fc:	47d0      	blx	sl
    59fe:	200f      	movs	r0, #15
    5a00:	47b0      	blx	r6
    5a02:	2101      	movs	r1, #1
    5a04:	4628      	mov	r0, r5
    5a06:	47c0      	blx	r8
    5a08:	200f      	movs	r0, #15
    5a0a:	47b0      	blx	r6
    5a0c:	4620      	mov	r0, r4
    5a0e:	4b96      	ldr	r3, [pc, #600]	; (5c68 <I2C_getTEMPandMOISTURE+0x810>)
    5a10:	4798      	blx	r3
    5a12:	2800      	cmp	r0, #0
    5a14:	f47f add8 	bne.w	55c8 <I2C_getTEMPandMOISTURE+0x170>
    5a18:	4649      	mov	r1, r9
    5a1a:	4628      	mov	r0, r5
    5a1c:	47c0      	blx	r8
    5a1e:	200f      	movs	r0, #15
    5a20:	47b0      	blx	r6
    5a22:	2102      	movs	r1, #2
    5a24:	4620      	mov	r0, r4
    5a26:	47d0      	blx	sl
    5a28:	200f      	movs	r0, #15
    5a2a:	47b0      	blx	r6
	I2C_START(-5);
    5a2c:	2101      	movs	r1, #1
    5a2e:	4628      	mov	r0, r5
    5a30:	47c0      	blx	r8
    5a32:	2101      	movs	r1, #1
    5a34:	4620      	mov	r0, r4
    5a36:	47c0      	blx	r8
    5a38:	2102      	movs	r1, #2
    5a3a:	4620      	mov	r0, r4
    5a3c:	47d0      	blx	sl
    5a3e:	200f      	movs	r0, #15
    5a40:	47b0      	blx	r6
    5a42:	200f      	movs	r0, #15
    5a44:	47b0      	blx	r6
    5a46:	4649      	mov	r1, r9
    5a48:	4620      	mov	r0, r4
    5a4a:	47c0      	blx	r8
    5a4c:	200f      	movs	r0, #15
    5a4e:	47b0      	blx	r6
    5a50:	4649      	mov	r1, r9
    5a52:	4628      	mov	r0, r5
    5a54:	47c0      	blx	r8
    5a56:	200f      	movs	r0, #15
    5a58:	47b0      	blx	r6
    5a5a:	f8df 8210 	ldr.w	r8, [pc, #528]	; 5c6c <I2C_getTEMPandMOISTURE+0x814>
    5a5e:	f04f 0907 	mov.w	r9, #7
	I2C_SENDADDR(0x40, forloop);
    5a62:	f04f 0a40 	mov.w	sl, #64	; 0x40
    5a66:	f01a 0140 	ands.w	r1, sl, #64	; 0x40
    5a6a:	bf18      	it	ne
    5a6c:	2101      	movne	r1, #1
    5a6e:	4620      	mov	r0, r4
    5a70:	47c0      	blx	r8
    5a72:	200f      	movs	r0, #15
    5a74:	47b0      	blx	r6
    5a76:	2101      	movs	r1, #1
    5a78:	4628      	mov	r0, r5
    5a7a:	47c0      	blx	r8
    5a7c:	200f      	movs	r0, #15
    5a7e:	47b0      	blx	r6
    5a80:	2100      	movs	r1, #0
    5a82:	4628      	mov	r0, r5
    5a84:	47c0      	blx	r8
    5a86:	200f      	movs	r0, #15
    5a88:	47b0      	blx	r6
    5a8a:	f1b9 0901 	subs.w	r9, r9, #1
    5a8e:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
    5a92:	d1e8      	bne.n	5a66 <I2C_getTEMPandMOISTURE+0x60e>
	I2C_READ();
    5a94:	2101      	movs	r1, #1
    5a96:	4620      	mov	r0, r4
    5a98:	47c0      	blx	r8
    5a9a:	200f      	movs	r0, #15
    5a9c:	47b0      	blx	r6
    5a9e:	2101      	movs	r1, #1
    5aa0:	4628      	mov	r0, r5
    5aa2:	47c0      	blx	r8
    5aa4:	200f      	movs	r0, #15
    5aa6:	47b0      	blx	r6
    5aa8:	4649      	mov	r1, r9
    5aaa:	4628      	mov	r0, r5
    5aac:	47c0      	blx	r8
    5aae:	200f      	movs	r0, #15
    5ab0:	47b0      	blx	r6
	I2C_WAITACKIP(-6);
    5ab2:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 5c70 <I2C_getTEMPandMOISTURE+0x818>
    5ab6:	2101      	movs	r1, #1
    5ab8:	4620      	mov	r0, r4
    5aba:	47d0      	blx	sl
    5abc:	200f      	movs	r0, #15
    5abe:	47b0      	blx	r6
    5ac0:	2101      	movs	r1, #1
    5ac2:	4628      	mov	r0, r5
    5ac4:	47c0      	blx	r8
    5ac6:	200f      	movs	r0, #15
    5ac8:	47b0      	blx	r6
    5aca:	4620      	mov	r0, r4
    5acc:	4b66      	ldr	r3, [pc, #408]	; (5c68 <I2C_getTEMPandMOISTURE+0x810>)
    5ace:	4798      	blx	r3
    5ad0:	f8cd a008 	str.w	sl, [sp, #8]
    5ad4:	2800      	cmp	r0, #0
    5ad6:	f47f aec8 	bne.w	586a <I2C_getTEMPandMOISTURE+0x412>
    5ada:	4649      	mov	r1, r9
    5adc:	4628      	mov	r0, r5
    5ade:	47c0      	blx	r8
    5ae0:	200f      	movs	r0, #15
    5ae2:	47b0      	blx	r6
		I2C_clockhi();
    5ae4:	f8df a184 	ldr.w	sl, [pc, #388]	; 5c6c <I2C_getTEMPandMOISTURE+0x814>
	*th = 0;
    5ae8:	9b03      	ldr	r3, [sp, #12]
	for (forloop = 0x80; forloop > 0;) {
    5aea:	f04f 0b80 	mov.w	fp, #128	; 0x80
	*th = 0;
    5aee:	f883 9000 	strb.w	r9, [r3]
    5af2:	46d0      	mov	r8, sl
    5af4:	f04f 0908 	mov.w	r9, #8
		I2C_clockhi();
    5af8:	2101      	movs	r1, #1
    5afa:	4628      	mov	r0, r5
    5afc:	47d0      	blx	sl
    5afe:	200f      	movs	r0, #15
    5b00:	47b0      	blx	r6
		if (gpio_get_pin_level(i2csda)) {
    5b02:	4620      	mov	r0, r4
    5b04:	4b58      	ldr	r3, [pc, #352]	; (5c68 <I2C_getTEMPandMOISTURE+0x810>)
    5b06:	4798      	blx	r3
    5b08:	b128      	cbz	r0, 5b16 <I2C_getTEMPandMOISTURE+0x6be>
			(*th) |= forloop;
    5b0a:	9b03      	ldr	r3, [sp, #12]
    5b0c:	9a03      	ldr	r2, [sp, #12]
    5b0e:	781b      	ldrb	r3, [r3, #0]
    5b10:	ea4b 0303 	orr.w	r3, fp, r3
    5b14:	7013      	strb	r3, [r2, #0]
		I2C_clocklo();
    5b16:	2100      	movs	r1, #0
    5b18:	4628      	mov	r0, r5
    5b1a:	47c0      	blx	r8
    5b1c:	200f      	movs	r0, #15
    5b1e:	47b0      	blx	r6
	for (forloop = 0x80; forloop > 0;) {
    5b20:	f1b9 0901 	subs.w	r9, r9, #1
		forloop = forloop / 2;
    5b24:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
	for (forloop = 0x80; forloop > 0;) {
    5b28:	d1e6      	bne.n	5af8 <I2C_getTEMPandMOISTURE+0x6a0>
	I2C_STOP();
    5b2a:	2101      	movs	r1, #1
    5b2c:	4628      	mov	r0, r5
    5b2e:	47c0      	blx	r8
    5b30:	200f      	movs	r0, #15
    5b32:	47b0      	blx	r6
    5b34:	2101      	movs	r1, #1
    5b36:	4620      	mov	r0, r4
    5b38:	47c0      	blx	r8
    5b3a:	200f      	movs	r0, #15
    5b3c:	47b0      	blx	r6
    5b3e:	9b02      	ldr	r3, [sp, #8]
    5b40:	2102      	movs	r1, #2
    5b42:	4620      	mov	r0, r4
    5b44:	4798      	blx	r3
    5b46:	200f      	movs	r0, #15
    5b48:	47b0      	blx	r6
	I2C_START(-2);
    5b4a:	2101      	movs	r1, #1
    5b4c:	4628      	mov	r0, r5
    5b4e:	47c0      	blx	r8
    5b50:	2101      	movs	r1, #1
    5b52:	4620      	mov	r0, r4
    5b54:	47c0      	blx	r8
    5b56:	9b02      	ldr	r3, [sp, #8]
    5b58:	2102      	movs	r1, #2
    5b5a:	4620      	mov	r0, r4
    5b5c:	4798      	blx	r3
    5b5e:	200f      	movs	r0, #15
    5b60:	47b0      	blx	r6
    5b62:	200f      	movs	r0, #15
    5b64:	47b0      	blx	r6
    5b66:	4649      	mov	r1, r9
    5b68:	4620      	mov	r0, r4
    5b6a:	47c0      	blx	r8
    5b6c:	200f      	movs	r0, #15
    5b6e:	47b0      	blx	r6
    5b70:	4649      	mov	r1, r9
    5b72:	4628      	mov	r0, r5
    5b74:	47c0      	blx	r8
    5b76:	200f      	movs	r0, #15
    5b78:	47b0      	blx	r6
    5b7a:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 5c6c <I2C_getTEMPandMOISTURE+0x814>
    5b7e:	f04f 0907 	mov.w	r9, #7
	I2C_SENDADDR(0x40, forloop);
    5b82:	f04f 0a40 	mov.w	sl, #64	; 0x40
    5b86:	f01a 0140 	ands.w	r1, sl, #64	; 0x40
    5b8a:	bf18      	it	ne
    5b8c:	2101      	movne	r1, #1
    5b8e:	4620      	mov	r0, r4
    5b90:	47c0      	blx	r8
    5b92:	200f      	movs	r0, #15
    5b94:	47b0      	blx	r6
    5b96:	2101      	movs	r1, #1
    5b98:	4628      	mov	r0, r5
    5b9a:	47c0      	blx	r8
    5b9c:	200f      	movs	r0, #15
    5b9e:	47b0      	blx	r6
    5ba0:	2100      	movs	r1, #0
    5ba2:	4628      	mov	r0, r5
    5ba4:	47c0      	blx	r8
    5ba6:	200f      	movs	r0, #15
    5ba8:	47b0      	blx	r6
    5baa:	f1b9 0901 	subs.w	r9, r9, #1
    5bae:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
    5bb2:	d1e8      	bne.n	5b86 <I2C_getTEMPandMOISTURE+0x72e>
	I2C_WRITE();
    5bb4:	4649      	mov	r1, r9
    5bb6:	4620      	mov	r0, r4
    5bb8:	47c0      	blx	r8
    5bba:	200f      	movs	r0, #15
    5bbc:	47b0      	blx	r6
    5bbe:	2101      	movs	r1, #1
    5bc0:	4628      	mov	r0, r5
    5bc2:	47c0      	blx	r8
    5bc4:	200f      	movs	r0, #15
    5bc6:	47b0      	blx	r6
    5bc8:	4649      	mov	r1, r9
    5bca:	4628      	mov	r0, r5
    5bcc:	47c0      	blx	r8
    5bce:	200f      	movs	r0, #15
    5bd0:	47b0      	blx	r6
	I2C_WAITACKOP(-3);
    5bd2:	9b02      	ldr	r3, [sp, #8]
    5bd4:	2101      	movs	r1, #1
    5bd6:	4620      	mov	r0, r4
    5bd8:	4798      	blx	r3
    5bda:	200f      	movs	r0, #15
    5bdc:	47b0      	blx	r6
    5bde:	2101      	movs	r1, #1
    5be0:	4628      	mov	r0, r5
    5be2:	47c0      	blx	r8
    5be4:	200f      	movs	r0, #15
    5be6:	47b0      	blx	r6
    5be8:	4620      	mov	r0, r4
    5bea:	4b1f      	ldr	r3, [pc, #124]	; (5c68 <I2C_getTEMPandMOISTURE+0x810>)
    5bec:	4798      	blx	r3
    5bee:	2800      	cmp	r0, #0
    5bf0:	f47f ac9e 	bne.w	5530 <I2C_getTEMPandMOISTURE+0xd8>
    5bf4:	4649      	mov	r1, r9
    5bf6:	4628      	mov	r0, r5
    5bf8:	47c0      	blx	r8
    5bfa:	200f      	movs	r0, #15
    5bfc:	47b0      	blx	r6
    5bfe:	2102      	movs	r1, #2
    5c00:	4620      	mov	r0, r4
    5c02:	9b02      	ldr	r3, [sp, #8]
    5c04:	f8df 8064 	ldr.w	r8, [pc, #100]	; 5c6c <I2C_getTEMPandMOISTURE+0x814>
    5c08:	4798      	blx	r3
    5c0a:	200f      	movs	r0, #15
    5c0c:	47b0      	blx	r6
    5c0e:	f04f 0908 	mov.w	r9, #8
	I2C_SENDDATA(0x02, forloop);
    5c12:	f04f 0a80 	mov.w	sl, #128	; 0x80
    5c16:	f01a 0102 	ands.w	r1, sl, #2
    5c1a:	bf18      	it	ne
    5c1c:	2101      	movne	r1, #1
    5c1e:	4620      	mov	r0, r4
    5c20:	47c0      	blx	r8
    5c22:	200f      	movs	r0, #15
    5c24:	47b0      	blx	r6
    5c26:	2101      	movs	r1, #1
    5c28:	4628      	mov	r0, r5
    5c2a:	47c0      	blx	r8
    5c2c:	200f      	movs	r0, #15
    5c2e:	47b0      	blx	r6
    5c30:	2100      	movs	r1, #0
    5c32:	4628      	mov	r0, r5
    5c34:	47c0      	blx	r8
    5c36:	200f      	movs	r0, #15
    5c38:	47b0      	blx	r6
    5c3a:	f1b9 0901 	subs.w	r9, r9, #1
    5c3e:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
    5c42:	d1e8      	bne.n	5c16 <I2C_getTEMPandMOISTURE+0x7be>
	I2C_WAITACKOP(-4);
    5c44:	9b02      	ldr	r3, [sp, #8]
    5c46:	2101      	movs	r1, #1
    5c48:	4620      	mov	r0, r4
    5c4a:	4798      	blx	r3
    5c4c:	200f      	movs	r0, #15
    5c4e:	47b0      	blx	r6
    5c50:	2101      	movs	r1, #1
    5c52:	4628      	mov	r0, r5
    5c54:	47c0      	blx	r8
    5c56:	200f      	movs	r0, #15
    5c58:	47b0      	blx	r6
    5c5a:	4620      	mov	r0, r4
    5c5c:	4b02      	ldr	r3, [pc, #8]	; (5c68 <I2C_getTEMPandMOISTURE+0x810>)
    5c5e:	4798      	blx	r3
    5c60:	2800      	cmp	r0, #0
    5c62:	f47f acb1 	bne.w	55c8 <I2C_getTEMPandMOISTURE+0x170>
    5c66:	e005      	b.n	5c74 <I2C_getTEMPandMOISTURE+0x81c>
    5c68:	00004391 	.word	0x00004391
    5c6c:	00004371 	.word	0x00004371
    5c70:	000043d9 	.word	0x000043d9
    5c74:	4649      	mov	r1, r9
    5c76:	4628      	mov	r0, r5
    5c78:	47c0      	blx	r8
    5c7a:	200f      	movs	r0, #15
    5c7c:	47b0      	blx	r6
    5c7e:	9b02      	ldr	r3, [sp, #8]
    5c80:	2102      	movs	r1, #2
    5c82:	4620      	mov	r0, r4
    5c84:	4798      	blx	r3
    5c86:	200f      	movs	r0, #15
    5c88:	47b0      	blx	r6
	I2C_START(-5);
    5c8a:	2101      	movs	r1, #1
    5c8c:	4628      	mov	r0, r5
    5c8e:	47c0      	blx	r8
    5c90:	2101      	movs	r1, #1
    5c92:	4620      	mov	r0, r4
    5c94:	47c0      	blx	r8
    5c96:	9b02      	ldr	r3, [sp, #8]
    5c98:	2102      	movs	r1, #2
    5c9a:	4620      	mov	r0, r4
    5c9c:	4798      	blx	r3
    5c9e:	200f      	movs	r0, #15
    5ca0:	47b0      	blx	r6
    5ca2:	200f      	movs	r0, #15
    5ca4:	47b0      	blx	r6
    5ca6:	4649      	mov	r1, r9
    5ca8:	4620      	mov	r0, r4
    5caa:	47c0      	blx	r8
    5cac:	200f      	movs	r0, #15
    5cae:	47b0      	blx	r6
    5cb0:	4649      	mov	r1, r9
    5cb2:	4628      	mov	r0, r5
    5cb4:	47c0      	blx	r8
    5cb6:	200f      	movs	r0, #15
    5cb8:	47b0      	blx	r6
    5cba:	f8df 8354 	ldr.w	r8, [pc, #852]	; 6010 <I2C_getTEMPandMOISTURE+0xbb8>
    5cbe:	f04f 0907 	mov.w	r9, #7
	I2C_SENDADDR(0x40, forloop);
    5cc2:	f04f 0a40 	mov.w	sl, #64	; 0x40
    5cc6:	f01a 0140 	ands.w	r1, sl, #64	; 0x40
    5cca:	bf18      	it	ne
    5ccc:	2101      	movne	r1, #1
    5cce:	4620      	mov	r0, r4
    5cd0:	47c0      	blx	r8
    5cd2:	200f      	movs	r0, #15
    5cd4:	47b0      	blx	r6
    5cd6:	2101      	movs	r1, #1
    5cd8:	4628      	mov	r0, r5
    5cda:	47c0      	blx	r8
    5cdc:	200f      	movs	r0, #15
    5cde:	47b0      	blx	r6
    5ce0:	2100      	movs	r1, #0
    5ce2:	4628      	mov	r0, r5
    5ce4:	47c0      	blx	r8
    5ce6:	200f      	movs	r0, #15
    5ce8:	47b0      	blx	r6
    5cea:	f1b9 0901 	subs.w	r9, r9, #1
    5cee:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
    5cf2:	d1e8      	bne.n	5cc6 <I2C_getTEMPandMOISTURE+0x86e>
	I2C_READ();
    5cf4:	2101      	movs	r1, #1
    5cf6:	4620      	mov	r0, r4
    5cf8:	47c0      	blx	r8
    5cfa:	200f      	movs	r0, #15
    5cfc:	47b0      	blx	r6
    5cfe:	2101      	movs	r1, #1
    5d00:	4628      	mov	r0, r5
    5d02:	47c0      	blx	r8
    5d04:	200f      	movs	r0, #15
    5d06:	47b0      	blx	r6
    5d08:	4649      	mov	r1, r9
    5d0a:	4628      	mov	r0, r5
    5d0c:	47c0      	blx	r8
    5d0e:	200f      	movs	r0, #15
    5d10:	47b0      	blx	r6
	I2C_WAITACKIP(-6);
    5d12:	9b02      	ldr	r3, [sp, #8]
    5d14:	f8df a304 	ldr.w	sl, [pc, #772]	; 601c <I2C_getTEMPandMOISTURE+0xbc4>
    5d18:	2101      	movs	r1, #1
    5d1a:	4620      	mov	r0, r4
    5d1c:	4798      	blx	r3
    5d1e:	200f      	movs	r0, #15
    5d20:	47b0      	blx	r6
    5d22:	2101      	movs	r1, #1
    5d24:	4628      	mov	r0, r5
    5d26:	47c0      	blx	r8
    5d28:	200f      	movs	r0, #15
    5d2a:	47b0      	blx	r6
    5d2c:	4620      	mov	r0, r4
    5d2e:	47d0      	blx	sl
    5d30:	f8cd a00c 	str.w	sl, [sp, #12]
    5d34:	2800      	cmp	r0, #0
    5d36:	f47f ad98 	bne.w	586a <I2C_getTEMPandMOISTURE+0x412>
    5d3a:	4649      	mov	r1, r9
    5d3c:	4628      	mov	r0, r5
    5d3e:	47c0      	blx	r8
    5d40:	200f      	movs	r0, #15
    5d42:	47b0      	blx	r6
	*hl = 0;
    5d44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5d46:	f883 9000 	strb.w	r9, [r3]
    5d4a:	f8df 92c4 	ldr.w	r9, [pc, #708]	; 6010 <I2C_getTEMPandMOISTURE+0xbb8>
    5d4e:	f04f 0a08 	mov.w	sl, #8
	for (forloop = 0x80; forloop > 0;) {
    5d52:	f04f 0b80 	mov.w	fp, #128	; 0x80
		I2C_clockhi();
    5d56:	4bae      	ldr	r3, [pc, #696]	; (6010 <I2C_getTEMPandMOISTURE+0xbb8>)
    5d58:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 6014 <I2C_getTEMPandMOISTURE+0xbbc>
    5d5c:	2101      	movs	r1, #1
    5d5e:	4628      	mov	r0, r5
    5d60:	4798      	blx	r3
    5d62:	200f      	movs	r0, #15
    5d64:	47c0      	blx	r8
		if (gpio_get_pin_level(i2csda)) {
    5d66:	4620      	mov	r0, r4
    5d68:	9b03      	ldr	r3, [sp, #12]
    5d6a:	4798      	blx	r3
    5d6c:	b120      	cbz	r0, 5d78 <I2C_getTEMPandMOISTURE+0x920>
			(*hl) |= forloop;
    5d6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5d70:	781a      	ldrb	r2, [r3, #0]
    5d72:	ea4b 0202 	orr.w	r2, fp, r2
    5d76:	701a      	strb	r2, [r3, #0]
		I2C_clocklo();
    5d78:	2100      	movs	r1, #0
    5d7a:	4628      	mov	r0, r5
    5d7c:	47c8      	blx	r9
    5d7e:	200f      	movs	r0, #15
    5d80:	47c0      	blx	r8
	for (forloop = 0x80; forloop > 0;) {
    5d82:	f1ba 0a01 	subs.w	sl, sl, #1
		forloop = forloop / 2;
    5d86:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
	for (forloop = 0x80; forloop > 0;) {
    5d8a:	d1e4      	bne.n	5d56 <I2C_getTEMPandMOISTURE+0x8fe>
	I2C_STOP();
    5d8c:	2101      	movs	r1, #1
    5d8e:	4628      	mov	r0, r5
    5d90:	47c8      	blx	r9
    5d92:	200f      	movs	r0, #15
    5d94:	47c0      	blx	r8
    5d96:	2101      	movs	r1, #1
    5d98:	4620      	mov	r0, r4
    5d9a:	47c8      	blx	r9
    5d9c:	200f      	movs	r0, #15
    5d9e:	47c0      	blx	r8
    5da0:	9b02      	ldr	r3, [sp, #8]
    5da2:	2102      	movs	r1, #2
    5da4:	4620      	mov	r0, r4
    5da6:	4798      	blx	r3
    5da8:	200f      	movs	r0, #15
    5daa:	47c0      	blx	r8
	I2C_START(-2);
    5dac:	2101      	movs	r1, #1
    5dae:	4628      	mov	r0, r5
    5db0:	47c8      	blx	r9
    5db2:	2101      	movs	r1, #1
    5db4:	4620      	mov	r0, r4
    5db6:	47c8      	blx	r9
    5db8:	9b02      	ldr	r3, [sp, #8]
    5dba:	2102      	movs	r1, #2
    5dbc:	4620      	mov	r0, r4
    5dbe:	4798      	blx	r3
    5dc0:	200f      	movs	r0, #15
    5dc2:	47c0      	blx	r8
    5dc4:	200f      	movs	r0, #15
    5dc6:	47c0      	blx	r8
    5dc8:	4651      	mov	r1, sl
    5dca:	4620      	mov	r0, r4
    5dcc:	47c8      	blx	r9
    5dce:	200f      	movs	r0, #15
    5dd0:	47c0      	blx	r8
    5dd2:	4651      	mov	r1, sl
    5dd4:	4628      	mov	r0, r5
    5dd6:	47c8      	blx	r9
    5dd8:	200f      	movs	r0, #15
    5dda:	47c0      	blx	r8
    5ddc:	f8df 9230 	ldr.w	r9, [pc, #560]	; 6010 <I2C_getTEMPandMOISTURE+0xbb8>
    5de0:	f8df 8230 	ldr.w	r8, [pc, #560]	; 6014 <I2C_getTEMPandMOISTURE+0xbbc>
    5de4:	f04f 0a07 	mov.w	sl, #7
	I2C_SENDADDR(0x40, forloop);
    5de8:	f04f 0b40 	mov.w	fp, #64	; 0x40
    5dec:	f01b 0140 	ands.w	r1, fp, #64	; 0x40
    5df0:	bf18      	it	ne
    5df2:	2101      	movne	r1, #1
    5df4:	4620      	mov	r0, r4
    5df6:	47c8      	blx	r9
    5df8:	200f      	movs	r0, #15
    5dfa:	47c0      	blx	r8
    5dfc:	2101      	movs	r1, #1
    5dfe:	4628      	mov	r0, r5
    5e00:	47c8      	blx	r9
    5e02:	200f      	movs	r0, #15
    5e04:	47c0      	blx	r8
    5e06:	2100      	movs	r1, #0
    5e08:	4628      	mov	r0, r5
    5e0a:	47c8      	blx	r9
    5e0c:	200f      	movs	r0, #15
    5e0e:	47c0      	blx	r8
    5e10:	f1ba 0a01 	subs.w	sl, sl, #1
    5e14:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
    5e18:	d1e8      	bne.n	5dec <I2C_getTEMPandMOISTURE+0x994>
	I2C_WRITE();
    5e1a:	4651      	mov	r1, sl
    5e1c:	4620      	mov	r0, r4
    5e1e:	47c8      	blx	r9
    5e20:	200f      	movs	r0, #15
    5e22:	47c0      	blx	r8
    5e24:	2101      	movs	r1, #1
    5e26:	4628      	mov	r0, r5
    5e28:	47c8      	blx	r9
    5e2a:	200f      	movs	r0, #15
    5e2c:	47c0      	blx	r8
    5e2e:	4651      	mov	r1, sl
    5e30:	4628      	mov	r0, r5
    5e32:	47c8      	blx	r9
    5e34:	200f      	movs	r0, #15
    5e36:	47c0      	blx	r8
	I2C_WAITACKOP(-3);
    5e38:	9b02      	ldr	r3, [sp, #8]
    5e3a:	2101      	movs	r1, #1
    5e3c:	4620      	mov	r0, r4
    5e3e:	4798      	blx	r3
    5e40:	200f      	movs	r0, #15
    5e42:	47c0      	blx	r8
    5e44:	2101      	movs	r1, #1
    5e46:	4628      	mov	r0, r5
    5e48:	47c8      	blx	r9
    5e4a:	200f      	movs	r0, #15
    5e4c:	47c0      	blx	r8
    5e4e:	4620      	mov	r0, r4
    5e50:	9b03      	ldr	r3, [sp, #12]
    5e52:	4798      	blx	r3
    5e54:	2800      	cmp	r0, #0
    5e56:	f47f ab6b 	bne.w	5530 <I2C_getTEMPandMOISTURE+0xd8>
    5e5a:	4651      	mov	r1, sl
    5e5c:	4628      	mov	r0, r5
    5e5e:	47c8      	blx	r9
    5e60:	200f      	movs	r0, #15
    5e62:	47c0      	blx	r8
    5e64:	2102      	movs	r1, #2
    5e66:	4620      	mov	r0, r4
    5e68:	9b02      	ldr	r3, [sp, #8]
    5e6a:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 6010 <I2C_getTEMPandMOISTURE+0xbb8>
    5e6e:	4798      	blx	r3
    5e70:	200f      	movs	r0, #15
    5e72:	47c0      	blx	r8
    5e74:	f8df 819c 	ldr.w	r8, [pc, #412]	; 6014 <I2C_getTEMPandMOISTURE+0xbbc>
    5e78:	f04f 0a08 	mov.w	sl, #8
	I2C_SENDDATA(0x03, forloop);
    5e7c:	f04f 0b80 	mov.w	fp, #128	; 0x80
    5e80:	f01b 0103 	ands.w	r1, fp, #3
    5e84:	bf18      	it	ne
    5e86:	2101      	movne	r1, #1
    5e88:	4620      	mov	r0, r4
    5e8a:	47c8      	blx	r9
    5e8c:	200f      	movs	r0, #15
    5e8e:	47c0      	blx	r8
    5e90:	2101      	movs	r1, #1
    5e92:	4628      	mov	r0, r5
    5e94:	47c8      	blx	r9
    5e96:	200f      	movs	r0, #15
    5e98:	47c0      	blx	r8
    5e9a:	2100      	movs	r1, #0
    5e9c:	4628      	mov	r0, r5
    5e9e:	47c8      	blx	r9
    5ea0:	200f      	movs	r0, #15
    5ea2:	47c0      	blx	r8
    5ea4:	f1ba 0a01 	subs.w	sl, sl, #1
    5ea8:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
    5eac:	d1e8      	bne.n	5e80 <I2C_getTEMPandMOISTURE+0xa28>
	I2C_WAITACKOP(-4);
    5eae:	9b02      	ldr	r3, [sp, #8]
    5eb0:	2101      	movs	r1, #1
    5eb2:	4620      	mov	r0, r4
    5eb4:	4798      	blx	r3
    5eb6:	200f      	movs	r0, #15
    5eb8:	47c0      	blx	r8
    5eba:	2101      	movs	r1, #1
    5ebc:	4628      	mov	r0, r5
    5ebe:	47c8      	blx	r9
    5ec0:	200f      	movs	r0, #15
    5ec2:	47c0      	blx	r8
    5ec4:	4620      	mov	r0, r4
    5ec6:	9b03      	ldr	r3, [sp, #12]
    5ec8:	4798      	blx	r3
    5eca:	2800      	cmp	r0, #0
    5ecc:	f47f ab7c 	bne.w	55c8 <I2C_getTEMPandMOISTURE+0x170>
    5ed0:	4651      	mov	r1, sl
    5ed2:	4628      	mov	r0, r5
    5ed4:	47c8      	blx	r9
    5ed6:	200f      	movs	r0, #15
    5ed8:	47c0      	blx	r8
    5eda:	9b02      	ldr	r3, [sp, #8]
    5edc:	2102      	movs	r1, #2
    5ede:	4620      	mov	r0, r4
    5ee0:	4798      	blx	r3
    5ee2:	200f      	movs	r0, #15
    5ee4:	47c0      	blx	r8
	I2C_START(-5);
    5ee6:	2101      	movs	r1, #1
    5ee8:	4628      	mov	r0, r5
    5eea:	47c8      	blx	r9
    5eec:	2101      	movs	r1, #1
    5eee:	4620      	mov	r0, r4
    5ef0:	47c8      	blx	r9
    5ef2:	9b02      	ldr	r3, [sp, #8]
    5ef4:	2102      	movs	r1, #2
    5ef6:	4620      	mov	r0, r4
    5ef8:	4798      	blx	r3
    5efa:	200f      	movs	r0, #15
    5efc:	47c0      	blx	r8
    5efe:	200f      	movs	r0, #15
    5f00:	47c0      	blx	r8
    5f02:	4651      	mov	r1, sl
    5f04:	4620      	mov	r0, r4
    5f06:	47c8      	blx	r9
    5f08:	200f      	movs	r0, #15
    5f0a:	47c0      	blx	r8
    5f0c:	4651      	mov	r1, sl
    5f0e:	4628      	mov	r0, r5
    5f10:	47c8      	blx	r9
    5f12:	200f      	movs	r0, #15
    5f14:	47c0      	blx	r8
    5f16:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 6010 <I2C_getTEMPandMOISTURE+0xbb8>
    5f1a:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 6014 <I2C_getTEMPandMOISTURE+0xbbc>
    5f1e:	f04f 0a07 	mov.w	sl, #7
	I2C_SENDADDR(0x40, forloop);
    5f22:	f04f 0b40 	mov.w	fp, #64	; 0x40
    5f26:	f01b 0140 	ands.w	r1, fp, #64	; 0x40
    5f2a:	bf18      	it	ne
    5f2c:	2101      	movne	r1, #1
    5f2e:	4620      	mov	r0, r4
    5f30:	47c8      	blx	r9
    5f32:	200f      	movs	r0, #15
    5f34:	47c0      	blx	r8
    5f36:	2101      	movs	r1, #1
    5f38:	4628      	mov	r0, r5
    5f3a:	47c8      	blx	r9
    5f3c:	200f      	movs	r0, #15
    5f3e:	47c0      	blx	r8
    5f40:	2100      	movs	r1, #0
    5f42:	4628      	mov	r0, r5
    5f44:	47c8      	blx	r9
    5f46:	200f      	movs	r0, #15
    5f48:	47c0      	blx	r8
    5f4a:	f1ba 0a01 	subs.w	sl, sl, #1
    5f4e:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
    5f52:	d1e8      	bne.n	5f26 <I2C_getTEMPandMOISTURE+0xace>
	I2C_READ();
    5f54:	2101      	movs	r1, #1
    5f56:	4620      	mov	r0, r4
    5f58:	47c8      	blx	r9
    5f5a:	200f      	movs	r0, #15
    5f5c:	47c0      	blx	r8
    5f5e:	2101      	movs	r1, #1
    5f60:	4628      	mov	r0, r5
    5f62:	47c8      	blx	r9
    5f64:	200f      	movs	r0, #15
    5f66:	47c0      	blx	r8
    5f68:	4651      	mov	r1, sl
    5f6a:	4628      	mov	r0, r5
    5f6c:	47c8      	blx	r9
    5f6e:	200f      	movs	r0, #15
    5f70:	47c0      	blx	r8
	I2C_WAITACKIP(-6);
    5f72:	9b02      	ldr	r3, [sp, #8]
    5f74:	2101      	movs	r1, #1
    5f76:	4620      	mov	r0, r4
    5f78:	4798      	blx	r3
    5f7a:	200f      	movs	r0, #15
    5f7c:	47c0      	blx	r8
    5f7e:	2101      	movs	r1, #1
    5f80:	4628      	mov	r0, r5
    5f82:	47c8      	blx	r9
    5f84:	200f      	movs	r0, #15
    5f86:	47c0      	blx	r8
    5f88:	4620      	mov	r0, r4
    5f8a:	9b03      	ldr	r3, [sp, #12]
    5f8c:	4798      	blx	r3
    5f8e:	2800      	cmp	r0, #0
    5f90:	f47f ac6b 	bne.w	586a <I2C_getTEMPandMOISTURE+0x412>
    5f94:	4651      	mov	r1, sl
    5f96:	4628      	mov	r0, r5
    5f98:	47c8      	blx	r9
    5f9a:	200f      	movs	r0, #15
    5f9c:	47c0      	blx	r8
		I2C_clockhi();
    5f9e:	f8df 9070 	ldr.w	r9, [pc, #112]	; 6010 <I2C_getTEMPandMOISTURE+0xbb8>
	*hh = 0;
    5fa2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5fa4:	2608      	movs	r6, #8
    5fa6:	f883 a000 	strb.w	sl, [r3]
    5faa:	46c8      	mov	r8, r9
	for (forloop = 0x80; forloop > 0;) {
    5fac:	f04f 0a80 	mov.w	sl, #128	; 0x80
		I2C_clockhi();
    5fb0:	2101      	movs	r1, #1
    5fb2:	4628      	mov	r0, r5
    5fb4:	47c8      	blx	r9
    5fb6:	4f17      	ldr	r7, [pc, #92]	; (6014 <I2C_getTEMPandMOISTURE+0xbbc>)
    5fb8:	200f      	movs	r0, #15
    5fba:	47b8      	blx	r7
		if (gpio_get_pin_level(i2csda)) {
    5fbc:	4620      	mov	r0, r4
    5fbe:	9b03      	ldr	r3, [sp, #12]
    5fc0:	4798      	blx	r3
    5fc2:	b128      	cbz	r0, 5fd0 <I2C_getTEMPandMOISTURE+0xb78>
			(*hh) |= forloop;
    5fc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5fc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    5fc8:	781b      	ldrb	r3, [r3, #0]
    5fca:	ea4a 0303 	orr.w	r3, sl, r3
    5fce:	7013      	strb	r3, [r2, #0]
		I2C_clocklo();
    5fd0:	2100      	movs	r1, #0
    5fd2:	4628      	mov	r0, r5
    5fd4:	47c0      	blx	r8
    5fd6:	200f      	movs	r0, #15
    5fd8:	47b8      	blx	r7
	for (forloop = 0x80; forloop > 0;) {
    5fda:	3e01      	subs	r6, #1
		forloop = forloop / 2;
    5fdc:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
	for (forloop = 0x80; forloop > 0;) {
    5fe0:	d1e6      	bne.n	5fb0 <I2C_getTEMPandMOISTURE+0xb58>
	I2C_STOP();
    5fe2:	2101      	movs	r1, #1
    5fe4:	4628      	mov	r0, r5
    5fe6:	47c0      	blx	r8
    5fe8:	200f      	movs	r0, #15
    5fea:	47b8      	blx	r7
    5fec:	2101      	movs	r1, #1
    5fee:	4620      	mov	r0, r4
    5ff0:	47c0      	blx	r8
    5ff2:	200f      	movs	r0, #15
    5ff4:	47b8      	blx	r7
    5ff6:	2102      	movs	r1, #2
    5ff8:	4620      	mov	r0, r4
    5ffa:	4b07      	ldr	r3, [pc, #28]	; (6018 <I2C_getTEMPandMOISTURE+0xbc0>)
    5ffc:	4798      	blx	r3
    5ffe:	200f      	movs	r0, #15
    6000:	47b8      	blx	r7
	return 0;
    6002:	4630      	mov	r0, r6
    6004:	f7ff baa7 	b.w	5556 <I2C_getTEMPandMOISTURE+0xfe>
		return -1;
    6008:	f04f 30ff 	mov.w	r0, #4294967295
    600c:	f7ff baa3 	b.w	5556 <I2C_getTEMPandMOISTURE+0xfe>
    6010:	00004371 	.word	0x00004371
    6014:	00001201 	.word	0x00001201
    6018:	000043d9 	.word	0x000043d9
    601c:	00004391 	.word	0x00004391

00006020 <I2C_check_deviceID>:
// * CALLED BY:			  main()                                                                                                       *
// * CALLS:		          No function. ALL macros defined in this function file.                                                       *
// * --------------------------------------------------------------------------------------------------------------------------------- *
int I2C_check_deviceID(uint8_t sda,  uint8_t clk, unsigned char deviceID)

{
    6020:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6024:	460f      	mov	r7, r1
    6026:	4606      	mov	r6, r0
	uint8_t     		i2csda, i2cclk;
    unsigned char		forloop;

    /* Open an I2C channel, send address held in parameter variable "deviceID" */
	I2C_OPEN(sda, clk);
	I2C_START(-1);
    6028:	4d41      	ldr	r5, [pc, #260]	; (6130 <I2C_check_deviceID+0x110>)
    602a:	f8df 9110 	ldr.w	r9, [pc, #272]	; 613c <I2C_check_deviceID+0x11c>
    602e:	4c41      	ldr	r4, [pc, #260]	; (6134 <I2C_check_deviceID+0x114>)
    6030:	2101      	movs	r1, #1
    6032:	4638      	mov	r0, r7
{
    6034:	4693      	mov	fp, r2
	I2C_START(-1);
    6036:	47a8      	blx	r5
    6038:	2101      	movs	r1, #1
    603a:	4630      	mov	r0, r6
    603c:	47a8      	blx	r5
    603e:	2102      	movs	r1, #2
    6040:	4630      	mov	r0, r6
    6042:	47c8      	blx	r9
    6044:	200f      	movs	r0, #15
    6046:	47a0      	blx	r4
    6048:	200f      	movs	r0, #15
    604a:	47a0      	blx	r4
    604c:	2100      	movs	r1, #0
    604e:	4630      	mov	r0, r6
    6050:	47a8      	blx	r5
    6052:	200f      	movs	r0, #15
    6054:	47a0      	blx	r4
    6056:	2100      	movs	r1, #0
    6058:	4638      	mov	r0, r7
    605a:	47a8      	blx	r5
    605c:	200f      	movs	r0, #15
    605e:	47a0      	blx	r4
    6060:	f04f 0807 	mov.w	r8, #7
	I2C_SENDADDR(deviceID, forloop);
    6064:	f04f 0a40 	mov.w	sl, #64	; 0x40
    6068:	ea1b 010a 	ands.w	r1, fp, sl
    606c:	bf18      	it	ne
    606e:	2101      	movne	r1, #1
    6070:	4630      	mov	r0, r6
    6072:	47a8      	blx	r5
    6074:	200f      	movs	r0, #15
    6076:	47a0      	blx	r4
    6078:	2101      	movs	r1, #1
    607a:	4638      	mov	r0, r7
    607c:	47a8      	blx	r5
    607e:	200f      	movs	r0, #15
    6080:	47a0      	blx	r4
    6082:	2100      	movs	r1, #0
    6084:	4638      	mov	r0, r7
    6086:	47a8      	blx	r5
    6088:	200f      	movs	r0, #15
    608a:	47a0      	blx	r4
    608c:	f1b8 0801 	subs.w	r8, r8, #1
    6090:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
    6094:	d1e8      	bne.n	6068 <I2C_check_deviceID+0x48>
	I2C_READ();
    6096:	2101      	movs	r1, #1
    6098:	4630      	mov	r0, r6
    609a:	47a8      	blx	r5
    609c:	200f      	movs	r0, #15
    609e:	47a0      	blx	r4
    60a0:	2101      	movs	r1, #1
    60a2:	4638      	mov	r0, r7
    60a4:	47a8      	blx	r5
    60a6:	200f      	movs	r0, #15
    60a8:	47a0      	blx	r4
    60aa:	4641      	mov	r1, r8
    60ac:	4638      	mov	r0, r7
    60ae:	47a8      	blx	r5
    60b0:	200f      	movs	r0, #15
    60b2:	47a0      	blx	r4
	I2C_WAITACKOP(-2);
    60b4:	2101      	movs	r1, #1
    60b6:	4630      	mov	r0, r6
    60b8:	47c8      	blx	r9
    60ba:	200f      	movs	r0, #15
    60bc:	47a0      	blx	r4
    60be:	2101      	movs	r1, #1
    60c0:	4638      	mov	r0, r7
    60c2:	47a8      	blx	r5
    60c4:	200f      	movs	r0, #15
    60c6:	47a0      	blx	r4
    60c8:	4630      	mov	r0, r6
    60ca:	4b1b      	ldr	r3, [pc, #108]	; (6138 <I2C_check_deviceID+0x118>)
    60cc:	4798      	blx	r3
    60ce:	b190      	cbz	r0, 60f6 <I2C_check_deviceID+0xd6>
    60d0:	2101      	movs	r1, #1
    60d2:	4638      	mov	r0, r7
    60d4:	47a8      	blx	r5
    60d6:	200f      	movs	r0, #15
    60d8:	47a0      	blx	r4
    60da:	2101      	movs	r1, #1
    60dc:	4630      	mov	r0, r6
    60de:	47a8      	blx	r5
    60e0:	200f      	movs	r0, #15
    60e2:	47a0      	blx	r4
    60e4:	2102      	movs	r1, #2
    60e6:	4630      	mov	r0, r6
    60e8:	47c8      	blx	r9
    60ea:	200f      	movs	r0, #15
    60ec:	47a0      	blx	r4
    60ee:	f06f 0001 	mvn.w	r0, #1
    60f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    60f6:	4641      	mov	r1, r8
    60f8:	4638      	mov	r0, r7
    60fa:	47a8      	blx	r5
    60fc:	200f      	movs	r0, #15
    60fe:	47a0      	blx	r4
    6100:	2102      	movs	r1, #2
    6102:	4630      	mov	r0, r6
    6104:	47c8      	blx	r9
    6106:	200f      	movs	r0, #15
    6108:	47a0      	blx	r4
	/* If not successful, then function will return with < 0 value if adddress not found */
	
	I2C_STOP();
    610a:	2101      	movs	r1, #1
    610c:	4638      	mov	r0, r7
    610e:	47a8      	blx	r5
    6110:	200f      	movs	r0, #15
    6112:	47a0      	blx	r4
    6114:	2101      	movs	r1, #1
    6116:	4630      	mov	r0, r6
    6118:	47a8      	blx	r5
    611a:	200f      	movs	r0, #15
    611c:	47a0      	blx	r4
    611e:	2102      	movs	r1, #2
    6120:	4630      	mov	r0, r6
    6122:	47c8      	blx	r9
    6124:	200f      	movs	r0, #15
    6126:	47a0      	blx	r4
	I2C_CLOSE();
	
	/* If successful, and code execution got here, the close the I2C channel and return with ZERO value if address found */
	return 0;
    6128:	4640      	mov	r0, r8
    612a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    612e:	bf00      	nop
    6130:	00004371 	.word	0x00004371
    6134:	00001201 	.word	0x00001201
    6138:	00004391 	.word	0x00004391
    613c:	000043d9 	.word	0x000043d9

00006140 <gpio_set_pin_direction>:
    6140:	2201      	movs	r2, #1
    6142:	0943      	lsrs	r3, r0, #5
	switch (direction) {
    6144:	4291      	cmp	r1, r2
    6146:	f000 001f 	and.w	r0, r0, #31
    614a:	fa02 f000 	lsl.w	r0, r2, r0
    614e:	d015      	beq.n	617c <gpio_set_pin_direction+0x3c>
    6150:	d306      	bcc.n	6160 <gpio_set_pin_direction+0x20>
    6152:	2902      	cmp	r1, #2
    6154:	d023      	beq.n	619e <gpio_set_pin_direction+0x5e>
		ASSERT(false);
    6156:	2245      	movs	r2, #69	; 0x45
    6158:	4914      	ldr	r1, [pc, #80]	; (61ac <gpio_set_pin_direction+0x6c>)
    615a:	4b15      	ldr	r3, [pc, #84]	; (61b0 <gpio_set_pin_direction+0x70>)
    615c:	2000      	movs	r0, #0
    615e:	4718      	bx	r3
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    6160:	01db      	lsls	r3, r3, #7
    6162:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    6166:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    616a:	6058      	str	r0, [r3, #4]
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    616c:	b282      	uxth	r2, r0
    616e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    6172:	0c00      	lsrs	r0, r0, #16
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6174:	629a      	str	r2, [r3, #40]	; 0x28
		hri_port_write_WRCONFIG_reg(
    6176:	f040 4040 	orr.w	r0, r0, #3221225472	; 0xc0000000
    617a:	e00e      	b.n	619a <gpio_set_pin_direction+0x5a>
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    617c:	01db      	lsls	r3, r3, #7
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    617e:	b282      	uxth	r2, r0
    6180:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    6184:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    6188:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    618c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    6190:	6058      	str	r0, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6192:	629a      	str	r2, [r3, #40]	; 0x28
		hri_port_write_WRCONFIG_reg(PORT,
    6194:	4a07      	ldr	r2, [pc, #28]	; (61b4 <gpio_set_pin_direction+0x74>)
    6196:	ea42 4010 	orr.w	r0, r2, r0, lsr #16
    619a:	6298      	str	r0, [r3, #40]	; 0x28
    619c:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    619e:	01db      	lsls	r3, r3, #7
    61a0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    61a4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    61a8:	6098      	str	r0, [r3, #8]
    61aa:	e7df      	b.n	616c <gpio_set_pin_direction+0x2c>
    61ac:	0000c7c5 	.word	0x0000c7c5
    61b0:	00001fdd 	.word	0x00001fdd
    61b4:	c0020000 	.word	0xc0020000

000061b8 <gpio_set_pin_pull_mode>:
	switch (pull_mode) {
    61b8:	2901      	cmp	r1, #1
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    61ba:	ea4f 1350 	mov.w	r3, r0, lsr #5
    61be:	f000 001f 	and.w	r0, r0, #31
    61c2:	d014      	beq.n	61ee <gpio_set_pin_pull_mode+0x36>
    61c4:	d306      	bcc.n	61d4 <gpio_set_pin_pull_mode+0x1c>
    61c6:	2902      	cmp	r1, #2
    61c8:	d021      	beq.n	620e <gpio_set_pin_pull_mode+0x56>
		ASSERT(false);
    61ca:	2288      	movs	r2, #136	; 0x88
    61cc:	4918      	ldr	r1, [pc, #96]	; (6230 <gpio_set_pin_pull_mode+0x78>)
    61ce:	4b19      	ldr	r3, [pc, #100]	; (6234 <gpio_set_pin_pull_mode+0x7c>)
    61d0:	2000      	movs	r0, #0
    61d2:	4718      	bx	r3
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    61d4:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
    61d8:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    61dc:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
    61e0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
    61e4:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    61e8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    61ec:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    61ee:	01db      	lsls	r3, r3, #7
    61f0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    61f4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    61f8:	4081      	lsls	r1, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    61fa:	4418      	add	r0, r3
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    61fc:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    61fe:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
    6202:	f042 0204 	orr.w	r2, r2, #4
    6206:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    620a:	6199      	str	r1, [r3, #24]
    620c:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    620e:	01db      	lsls	r3, r3, #7
    6210:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    6214:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    6218:	2201      	movs	r2, #1
    621a:	4082      	lsls	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    621c:	4418      	add	r0, r3
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    621e:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    6220:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    6224:	f041 0104 	orr.w	r1, r1, #4
    6228:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    622c:	615a      	str	r2, [r3, #20]
    622e:	4770      	bx	lr
    6230:	0000c7c5 	.word	0x0000c7c5
    6234:	00001fdd 	.word	0x00001fdd

00006238 <timer_setup>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: initializes and starts the main 10 times per second global timer
// Returns:     Nothing
// *****************************************************************************************************************************************************************
void timer_setup(void)
{
    6238:	b510      	push	{r4, lr}
	/* Setup and start the main 1/10th of a second timer expiration callback routine */
	TIMER_0_task1.interval = 100;
    623a:	4908      	ldr	r1, [pc, #32]	; (625c <timer_setup+0x24>)
	TIMER_0_task1.cb       = TIMER_0_task1_cb;
	TIMER_0_task1.mode     = TIMER_TASK_REPEAT;

	/* Start the repeatable timer feature */
	timer_add_task(&TIMER_0, &TIMER_0_task1);
    623c:	4c08      	ldr	r4, [pc, #32]	; (6260 <timer_setup+0x28>)
	TIMER_0_task1.interval = 100;
    623e:	2364      	movs	r3, #100	; 0x64
    6240:	608b      	str	r3, [r1, #8]
	TIMER_0_task1.cb       = TIMER_0_task1_cb;
    6242:	4b08      	ldr	r3, [pc, #32]	; (6264 <timer_setup+0x2c>)
    6244:	60cb      	str	r3, [r1, #12]
	TIMER_0_task1.mode     = TIMER_TASK_REPEAT;
    6246:	2301      	movs	r3, #1
    6248:	740b      	strb	r3, [r1, #16]
	timer_add_task(&TIMER_0, &TIMER_0_task1);
    624a:	4620      	mov	r0, r4
    624c:	4b06      	ldr	r3, [pc, #24]	; (6268 <timer_setup+0x30>)
    624e:	4798      	blx	r3
	timer_start(&TIMER_0);
    6250:	4620      	mov	r0, r4
    6252:	4b06      	ldr	r3, [pc, #24]	; (626c <timer_setup+0x34>)
}
    6254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	timer_start(&TIMER_0);
    6258:	4718      	bx	r3
    625a:	bf00      	nop
    625c:	20008260 	.word	0x20008260
    6260:	20007544 	.word	0x20007544
    6264:	00007065 	.word	0x00007065
    6268:	0000179d 	.word	0x0000179d
    626c:	00001761 	.word	0x00001761

00006270 <ADC_init>:
// Returns:     Nothing
// *****************************************************************************************************************************************************************
void ADC_init(void)
{
	/* Setup the two internal water detection analogue inputs BOTH on "ADC_0" channels and also the HIGH-VOLTAGE ADC [0|1|2]*/
	adc_sync_enable_channel(&ADC_0, 0);
    6270:	2100      	movs	r1, #0
    6272:	4801      	ldr	r0, [pc, #4]	; (6278 <ADC_init+0x8>)
    6274:	4b01      	ldr	r3, [pc, #4]	; (627c <ADC_init+0xc>)
    6276:	4718      	bx	r3
    6278:	2000746c 	.word	0x2000746c
    627c:	00001045 	.word	0x00001045

00006280 <comms_init>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: setup the SPI and the USB
// Returns:     Nothing
// *****************************************************************************************************************************************************************
void comms_init(void)
{
    6280:	b510      	push	{r4, lr}
	/* Global initialization of main USB mechanism */
	if (usb_d_enable() < 0) {
    6282:	4b0c      	ldr	r3, [pc, #48]	; (62b4 <comms_init+0x34>)
    6284:	4c0c      	ldr	r4, [pc, #48]	; (62b8 <comms_init+0x38>)
    6286:	4798      	blx	r3
    6288:	2800      	cmp	r0, #0
    628a:	da04      	bge.n	6296 <comms_init+0x16>
		xprintf("USB init/enable ERROR!!!!!!!\r\n");
    628c:	480b      	ldr	r0, [pc, #44]	; (62bc <comms_init+0x3c>)
		cdc_device_acm_init();
		xprintf("cdc_device_acm_init()\r\n");
		
		/* Register the read callback function */
		cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)usb_device_cb_state_c);
		xprintf("cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)usb_device_cb_state_c)\r\n");
    628e:	4623      	mov	r3, r4
	}
}
    6290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		xprintf("cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)usb_device_cb_state_c)\r\n");
    6294:	4718      	bx	r3
		usb_init();
    6296:	4b0a      	ldr	r3, [pc, #40]	; (62c0 <comms_init+0x40>)
    6298:	4798      	blx	r3
		xprintf("usb_init()\r\n");
    629a:	480a      	ldr	r0, [pc, #40]	; (62c4 <comms_init+0x44>)
    629c:	47a0      	blx	r4
		cdc_device_acm_init();
    629e:	4b0a      	ldr	r3, [pc, #40]	; (62c8 <comms_init+0x48>)
    62a0:	4798      	blx	r3
		xprintf("cdc_device_acm_init()\r\n");
    62a2:	480a      	ldr	r0, [pc, #40]	; (62cc <comms_init+0x4c>)
    62a4:	47a0      	blx	r4
		cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)usb_device_cb_state_c);
    62a6:	490a      	ldr	r1, [pc, #40]	; (62d0 <comms_init+0x50>)
    62a8:	4b0a      	ldr	r3, [pc, #40]	; (62d4 <comms_init+0x54>)
    62aa:	2003      	movs	r0, #3
    62ac:	4798      	blx	r3
		xprintf("cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)usb_device_cb_state_c)\r\n");
    62ae:	480a      	ldr	r0, [pc, #40]	; (62d8 <comms_init+0x58>)
    62b0:	e7ed      	b.n	628e <comms_init+0xe>
    62b2:	bf00      	nop
    62b4:	00001d51 	.word	0x00001d51
    62b8:	00000395 	.word	0x00000395
    62bc:	0000c7e1 	.word	0x0000c7e1
    62c0:	0000b10d 	.word	0x0000b10d
    62c4:	0000c800 	.word	0x0000c800
    62c8:	0000b0d9 	.word	0x0000b0d9
    62cc:	0000c80d 	.word	0x0000c80d
    62d0:	0000b09d 	.word	0x0000b09d
    62d4:	0000a9e5 	.word	0x0000a9e5
    62d8:	0000c825 	.word	0x0000c825

000062dc <crypto_init>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: initialize the AES encryption-engine in the CPU core
// Returns:     Nothing
// *****************************************************************************************************************************************************************
void crypto_init(void)
{
    62dc:	b510      	push	{r4, lr}
	/* Initialize and start the crypt hardware block. Insert and program the private AES key for this device-node also */
	aes_sync_enable(&CRYPTOGRAPHY_0);
    62de:	4c05      	ldr	r4, [pc, #20]	; (62f4 <crypto_init+0x18>)
    62e0:	4b05      	ldr	r3, [pc, #20]	; (62f8 <crypto_init+0x1c>)
    62e2:	4620      	mov	r0, r4
    62e4:	4798      	blx	r3
	aes_sync_set_encrypt_key(&CRYPTOGRAPHY_0, aes_key, AES_KEY_128);
    62e6:	4620      	mov	r0, r4
    62e8:	2200      	movs	r2, #0
    62ea:	4904      	ldr	r1, [pc, #16]	; (62fc <crypto_init+0x20>)
    62ec:	4b04      	ldr	r3, [pc, #16]	; (6300 <crypto_init+0x24>)
}
    62ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	aes_sync_set_encrypt_key(&CRYPTOGRAPHY_0, aes_key, AES_KEY_128);
    62f2:	4718      	bx	r3
    62f4:	20007424 	.word	0x20007424
    62f8:	00001149 	.word	0x00001149
    62fc:	20000004 	.word	0x20000004
    6300:	00001171 	.word	0x00001171

00006304 <switch_init>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: reset and start the Ethernet SWITCH IC
// Returns:     Nothing
// *****************************************************************************************************************************************************************
void switch_init(void)
{
    6304:	b570      	push	{r4, r5, r6, lr}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6306:	4c07      	ldr	r4, [pc, #28]	; (6324 <switch_init+0x20>)
	/* Go through the reset sequence of the GPIO for the Micrel Ethernet-SWITCH */
	gpio_set_pin_level(PB00_KSZ_RESET, 1);
	delay_ms(10);
    6308:	4e07      	ldr	r6, [pc, #28]	; (6328 <switch_init+0x24>)
    630a:	2501      	movs	r5, #1
    630c:	200a      	movs	r0, #10
    630e:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
    6312:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6314:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
	gpio_set_pin_level(PB00_KSZ_RESET, 0);
	delay_ms(100);
    6318:	2064      	movs	r0, #100	; 0x64
    631a:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    631c:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
    6320:	bd70      	pop	{r4, r5, r6, pc}
    6322:	bf00      	nop
    6324:	41008000 	.word	0x41008000
    6328:	00001225 	.word	0x00001225

0000632c <switch_configure>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: check all default register settings in the Ethernet SWITCH and also change relevant settings to suit the MultiSense operation
// Returns:     Nothing
// *****************************************************************************************************************************************************************
void switch_configure(void)
{
    632c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	xprintf("Configuring and checking the SPI KSZ8794 Ethernet SWITCH registers...\r\n");
    6330:	4883      	ldr	r0, [pc, #524]	; (6540 <switch_configure+0x214>)
    6332:	4d84      	ldr	r5, [pc, #528]	; (6544 <switch_configure+0x218>)
	/* Write set-up commands to the KSZ Ethernet SWITCH via SPI bus */
	if (!checkKSZreg(SPI_KSZ8794_FAMILY_ID, 0x87))		{ xprintf("[SPI_KSZ8794_FAMILY_ID] not correct\r\n"); }
    6334:	4c84      	ldr	r4, [pc, #528]	; (6548 <switch_configure+0x21c>)
	xprintf("Configuring and checking the SPI KSZ8794 Ethernet SWITCH registers...\r\n");
    6336:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_FAMILY_ID, 0x87))		{ xprintf("[SPI_KSZ8794_FAMILY_ID] not correct\r\n"); }
    6338:	2187      	movs	r1, #135	; 0x87
    633a:	2000      	movs	r0, #0
    633c:	47a0      	blx	r4
    633e:	b908      	cbnz	r0, 6344 <switch_configure+0x18>
    6340:	4882      	ldr	r0, [pc, #520]	; (654c <switch_configure+0x220>)
    6342:	47a8      	blx	r5
		
	/* Stop the Ethernet SWITCH operation */
	writeKSZreg(SPI_KSZ8794_START, 0x00);
    6344:	2100      	movs	r1, #0
    6346:	2001      	movs	r0, #1
    6348:	4f81      	ldr	r7, [pc, #516]	; (6550 <switch_configure+0x224>)
	delay_us(50);
    634a:	4e82      	ldr	r6, [pc, #520]	; (6554 <switch_configure+0x228>)
	writeKSZreg(SPI_KSZ8794_START, 0x00);
    634c:	47b8      	blx	r7
	delay_us(50);
    634e:	2032      	movs	r0, #50	; 0x32
    6350:	47b0      	blx	r6
	
	if (!checkKSZreg(SPI_KSZ8794_START, 0x60))			{ xprintf("[SPI_KSZ8794_START first] not correct\r\n"); }
    6352:	2160      	movs	r1, #96	; 0x60
    6354:	2001      	movs	r0, #1
    6356:	47a0      	blx	r4
    6358:	b908      	cbnz	r0, 635e <switch_configure+0x32>
    635a:	487f      	ldr	r0, [pc, #508]	; (6558 <switch_configure+0x22c>)
    635c:	47a8      	blx	r5
	
	writeKSZreg(SPI_KSZ8794_GLOBAL0, 0x0D);
    635e:	210d      	movs	r1, #13
    6360:	2002      	movs	r0, #2
    6362:	47b8      	blx	r7
	delay_us(50);
    6364:	2032      	movs	r0, #50	; 0x32
    6366:	47b0      	blx	r6
	
	if (!checkKSZreg(SPI_KSZ8794_GLOBAL0, 0x0D))		{ xprintf("[SPI_KSZ8794_GLOBAL0] not correct\r\n"); }
    6368:	210d      	movs	r1, #13
    636a:	2002      	movs	r0, #2
    636c:	47a0      	blx	r4
    636e:	b908      	cbnz	r0, 6374 <switch_configure+0x48>
    6370:	487a      	ldr	r0, [pc, #488]	; (655c <switch_configure+0x230>)
    6372:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_GLOBAL1, 0x04))		{ xprintf("[SPI_KSZ8794_GLOBAL1] not correct\r\n"); }
    6374:	2104      	movs	r1, #4
    6376:	2003      	movs	r0, #3
    6378:	47a0      	blx	r4
    637a:	b908      	cbnz	r0, 6380 <switch_configure+0x54>
    637c:	4878      	ldr	r0, [pc, #480]	; (6560 <switch_configure+0x234>)
    637e:	47a8      	blx	r5
	
	writeKSZreg(SPI_KSZ8794_GLOBAL2, 0xB2);
    6380:	21b2      	movs	r1, #178	; 0xb2
    6382:	2004      	movs	r0, #4
    6384:	47b8      	blx	r7
	delay_us(50);
    6386:	2032      	movs	r0, #50	; 0x32
    6388:	47b0      	blx	r6
	
	if (!checkKSZreg(SPI_KSZ8794_GLOBAL2, 0xB2))		{ xprintf("[SPI_KSZ8794_GLOBAL2] not correct\r\n"); }
    638a:	21b2      	movs	r1, #178	; 0xb2
    638c:	2004      	movs	r0, #4
    638e:	47a0      	blx	r4
    6390:	b908      	cbnz	r0, 6396 <switch_configure+0x6a>
    6392:	4874      	ldr	r0, [pc, #464]	; (6564 <switch_configure+0x238>)
    6394:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_GLOBAL3, 0x00))		{ xprintf("[SPI_KSZ8794_GLOBAL3] not correct\r\n"); }
    6396:	2100      	movs	r1, #0
    6398:	2005      	movs	r0, #5
    639a:	47a0      	blx	r4
    639c:	b908      	cbnz	r0, 63a2 <switch_configure+0x76>
    639e:	4872      	ldr	r0, [pc, #456]	; (6568 <switch_configure+0x23c>)
    63a0:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_GLOBAL4, 0x00))		{ xprintf("[SPI_KSZ8794_GLOBAL4] not correct\r\n"); }
    63a2:	2100      	movs	r1, #0
    63a4:	2006      	movs	r0, #6
    63a6:	47a0      	blx	r4
    63a8:	b908      	cbnz	r0, 63ae <switch_configure+0x82>
    63aa:	4870      	ldr	r0, [pc, #448]	; (656c <switch_configure+0x240>)
    63ac:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_GLOBAL5, 0x4A))		{ xprintf("[SPI_KSZ8794_GLOBAL5] not correct\r\n"); }
    63ae:	214a      	movs	r1, #74	; 0x4a
    63b0:	2007      	movs	r0, #7
    63b2:	47a0      	blx	r4
    63b4:	b908      	cbnz	r0, 63ba <switch_configure+0x8e>
    63b6:	486e      	ldr	r0, [pc, #440]	; (6570 <switch_configure+0x244>)
    63b8:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_GLOBAL6, 0x00))		{ xprintf("[SPI_KSZ8794_GLOBAL6] not correct\r\n"); }
    63ba:	2100      	movs	r1, #0
    63bc:	2008      	movs	r0, #8
    63be:	47a0      	blx	r4
    63c0:	b908      	cbnz	r0, 63c6 <switch_configure+0x9a>
    63c2:	486c      	ldr	r0, [pc, #432]	; (6574 <switch_configure+0x248>)
    63c4:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_GLOBAL9, 0x00))		{ xprintf("[SPI_KSZ8794_GLOBAL9] not correct\r\n"); }
    63c6:	2100      	movs	r1, #0
    63c8:	200b      	movs	r0, #11
    63ca:	47a0      	blx	r4
    63cc:	b908      	cbnz	r0, 63d2 <switch_configure+0xa6>
    63ce:	486a      	ldr	r0, [pc, #424]	; (6578 <switch_configure+0x24c>)
    63d0:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_GLOBAL10, 0x44))		{ xprintf("[SPI_KSZ8794_GLOBAL10] not correct\r\n"); }
    63d2:	2144      	movs	r1, #68	; 0x44
    63d4:	200c      	movs	r0, #12
    63d6:	47a0      	blx	r4
    63d8:	b908      	cbnz	r0, 63de <switch_configure+0xb2>
    63da:	4868      	ldr	r0, [pc, #416]	; (657c <switch_configure+0x250>)
    63dc:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_PDMC1, 0x00))			{ xprintf("[SPI_KSZ8794_PDMC1] not correct\r\n"); }
    63de:	2100      	movs	r1, #0
    63e0:	200e      	movs	r0, #14
    63e2:	47a0      	blx	r4
    63e4:	b908      	cbnz	r0, 63ea <switch_configure+0xbe>
    63e6:	4866      	ldr	r0, [pc, #408]	; (6580 <switch_configure+0x254>)
    63e8:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_PDMC2, 0x50))			{ xprintf("[SPI_KSZ8794_PDMC2] not correct\r\n"); }
    63ea:	2150      	movs	r1, #80	; 0x50
    63ec:	200f      	movs	r0, #15
    63ee:	47a0      	blx	r4
    63f0:	b908      	cbnz	r0, 63f6 <switch_configure+0xca>
    63f2:	4864      	ldr	r0, [pc, #400]	; (6584 <switch_configure+0x258>)
    63f4:	47a8      	blx	r5
	
	writeKSZreg(SPI_KSZ8794_PORT1CONTROL0, 0x80);
    63f6:	2180      	movs	r1, #128	; 0x80
    63f8:	2010      	movs	r0, #16
    63fa:	47b8      	blx	r7
	delay_us(50);
    63fc:	2032      	movs	r0, #50	; 0x32
    63fe:	47b0      	blx	r6
	
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL0, 0x80))	{ xprintf("[SPI_KSZ8794_PORT1CONTROL0] not correct\r\n"); }
    6400:	2180      	movs	r1, #128	; 0x80
    6402:	2010      	movs	r0, #16
    6404:	47a0      	blx	r4
    6406:	b908      	cbnz	r0, 640c <switch_configure+0xe0>
    6408:	485f      	ldr	r0, [pc, #380]	; (6588 <switch_configure+0x25c>)
    640a:	47a8      	blx	r5
	
	writeKSZreg(SPI_KSZ8794_PORT2CONTROL0, 0x80);
    640c:	2180      	movs	r1, #128	; 0x80
    640e:	2020      	movs	r0, #32
    6410:	47b8      	blx	r7
	delay_us(50);
    6412:	2032      	movs	r0, #50	; 0x32
    6414:	47b0      	blx	r6
	
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL0, 0x80))	{ xprintf("[SPI_KSZ8794_PORT2CONTROL0] not correct\r\n"); }
    6416:	2180      	movs	r1, #128	; 0x80
    6418:	2020      	movs	r0, #32
    641a:	47a0      	blx	r4
    641c:	b908      	cbnz	r0, 6422 <switch_configure+0xf6>
    641e:	485b      	ldr	r0, [pc, #364]	; (658c <switch_configure+0x260>)
    6420:	47a8      	blx	r5
	
	writeKSZreg(SPI_KSZ8794_PORT3CONTROL0, 0x80);
    6422:	2180      	movs	r1, #128	; 0x80
    6424:	2030      	movs	r0, #48	; 0x30
    6426:	47b8      	blx	r7
	delay_us(50);
    6428:	2032      	movs	r0, #50	; 0x32
    642a:	47b0      	blx	r6
	
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL0, 0x80))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL0] not correct\r\n"); }
    642c:	2180      	movs	r1, #128	; 0x80
    642e:	2030      	movs	r0, #48	; 0x30
    6430:	47a0      	blx	r4
    6432:	b908      	cbnz	r0, 6438 <switch_configure+0x10c>
    6434:	4856      	ldr	r0, [pc, #344]	; (6590 <switch_configure+0x264>)
    6436:	47a8      	blx	r5
	
	writeKSZreg(SPI_KSZ8794_PORT4CONTROL0, 0x80);
    6438:	2180      	movs	r1, #128	; 0x80
    643a:	2050      	movs	r0, #80	; 0x50
    643c:	47b8      	blx	r7
	delay_us(50);
    643e:	2032      	movs	r0, #50	; 0x32
    6440:	47b0      	blx	r6
	
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL0, 0x80))	{ xprintf("[SPI_KSZ8794_PORT4CONTROL0] not correct\r\n"); }
    6442:	2180      	movs	r1, #128	; 0x80
    6444:	2050      	movs	r0, #80	; 0x50
    6446:	47a0      	blx	r4
    6448:	b908      	cbnz	r0, 644e <switch_configure+0x122>
    644a:	4852      	ldr	r0, [pc, #328]	; (6594 <switch_configure+0x268>)
    644c:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL1, 0x1F))	{ xprintf("[SPI_KSZ8794_PORT1CONTROL1] not correct\r\n"); }
    644e:	211f      	movs	r1, #31
    6450:	2011      	movs	r0, #17
    6452:	47a0      	blx	r4
    6454:	b908      	cbnz	r0, 645a <switch_configure+0x12e>
    6456:	4850      	ldr	r0, [pc, #320]	; (6598 <switch_configure+0x26c>)
    6458:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL1, 0x1F))	{ xprintf("[SPI_KSZ8794_PORT2CONTROL1] not correct\r\n"); }
    645a:	211f      	movs	r1, #31
    645c:	2021      	movs	r0, #33	; 0x21
    645e:	47a0      	blx	r4
    6460:	b908      	cbnz	r0, 6466 <switch_configure+0x13a>
    6462:	484e      	ldr	r0, [pc, #312]	; (659c <switch_configure+0x270>)
    6464:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL1, 0x1F))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL1] not correct\r\n"); }
    6466:	211f      	movs	r1, #31
    6468:	2031      	movs	r0, #49	; 0x31
    646a:	47a0      	blx	r4
    646c:	b908      	cbnz	r0, 6472 <switch_configure+0x146>
    646e:	484c      	ldr	r0, [pc, #304]	; (65a0 <switch_configure+0x274>)
    6470:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL1, 0x1F))	{ xprintf("[SPI_KSZ8794_PORT4CONTROL1] not correct\r\n"); }
    6472:	211f      	movs	r1, #31
    6474:	2051      	movs	r0, #81	; 0x51
    6476:	47a0      	blx	r4
    6478:	b908      	cbnz	r0, 647e <switch_configure+0x152>
    647a:	484a      	ldr	r0, [pc, #296]	; (65a4 <switch_configure+0x278>)
    647c:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL2, 0x06))	{ xprintf("[SPI_KSZ8794_PORT1CONTROL2] not correct\r\n"); }
    647e:	2106      	movs	r1, #6
    6480:	2012      	movs	r0, #18
    6482:	47a0      	blx	r4
    6484:	b908      	cbnz	r0, 648a <switch_configure+0x15e>
    6486:	4848      	ldr	r0, [pc, #288]	; (65a8 <switch_configure+0x27c>)
    6488:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL2, 0x06))	{ xprintf("[SPI_KSZ8794_PORT2CONTROL2] not correct\r\n"); }
    648a:	2106      	movs	r1, #6
    648c:	2022      	movs	r0, #34	; 0x22
    648e:	47a0      	blx	r4
    6490:	b908      	cbnz	r0, 6496 <switch_configure+0x16a>
    6492:	4846      	ldr	r0, [pc, #280]	; (65ac <switch_configure+0x280>)
    6494:	47a8      	blx	r5
	
	/* For now, turn off the T-junction port 3 to the Power & Ethernet board attachment */
	writeKSZreg(SPI_KSZ8794_PORT3CONTROL2, 0x00);
    6496:	2100      	movs	r1, #0
    6498:	2032      	movs	r0, #50	; 0x32
    649a:	47b8      	blx	r7
	delay_us(50);
    649c:	2032      	movs	r0, #50	; 0x32
    649e:	47b0      	blx	r6
	
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL2, 0x00))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL2] not correct\r\n"); }
    64a0:	2100      	movs	r1, #0
    64a2:	2032      	movs	r0, #50	; 0x32
    64a4:	47a0      	blx	r4
    64a6:	b908      	cbnz	r0, 64ac <switch_configure+0x180>
    64a8:	4841      	ldr	r0, [pc, #260]	; (65b0 <switch_configure+0x284>)
    64aa:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL2, 0x06))	{ xprintf("[SPI_KSZ8794_PORT4CONTROL2] not correct\r\n"); }
    64ac:	2106      	movs	r1, #6
    64ae:	2052      	movs	r0, #82	; 0x52
    64b0:	47a0      	blx	r4
    64b2:	b908      	cbnz	r0, 64b8 <switch_configure+0x18c>
    64b4:	483f      	ldr	r0, [pc, #252]	; (65b4 <switch_configure+0x288>)
    64b6:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL3, 0x00))	{ xprintf("[SPI_KSZ8794_PORT1CONTROL3] not correct\r\n"); }
    64b8:	2100      	movs	r1, #0
    64ba:	2013      	movs	r0, #19
    64bc:	47a0      	blx	r4
    64be:	b908      	cbnz	r0, 64c4 <switch_configure+0x198>
    64c0:	483d      	ldr	r0, [pc, #244]	; (65b8 <switch_configure+0x28c>)
    64c2:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL3, 0x00))	{ xprintf("[SPI_KSZ8794_PORT2CONTROL3] not correct\r\n"); }
    64c4:	2100      	movs	r1, #0
    64c6:	2023      	movs	r0, #35	; 0x23
    64c8:	47a0      	blx	r4
    64ca:	b908      	cbnz	r0, 64d0 <switch_configure+0x1a4>
    64cc:	483b      	ldr	r0, [pc, #236]	; (65bc <switch_configure+0x290>)
    64ce:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL3, 0x00))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL3] not correct\r\n"); }
    64d0:	2100      	movs	r1, #0
    64d2:	2033      	movs	r0, #51	; 0x33
    64d4:	47a0      	blx	r4
    64d6:	b908      	cbnz	r0, 64dc <switch_configure+0x1b0>
    64d8:	4839      	ldr	r0, [pc, #228]	; (65c0 <switch_configure+0x294>)
    64da:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL3, 0x00))	{ xprintf("[SPI_KSZ8794_PORT4CONTROL3] not correct\r\n"); }
    64dc:	2100      	movs	r1, #0
    64de:	2053      	movs	r0, #83	; 0x53
    64e0:	47a0      	blx	r4
    64e2:	b908      	cbnz	r0, 64e8 <switch_configure+0x1bc>
    64e4:	4837      	ldr	r0, [pc, #220]	; (65c4 <switch_configure+0x298>)
    64e6:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL4, 0x01))	{ xprintf("[SPI_KSZ8794_PORT1CONTROL4] not correct\r\n"); }
    64e8:	2101      	movs	r1, #1
    64ea:	2014      	movs	r0, #20
    64ec:	47a0      	blx	r4
    64ee:	b908      	cbnz	r0, 64f4 <switch_configure+0x1c8>
    64f0:	4835      	ldr	r0, [pc, #212]	; (65c8 <switch_configure+0x29c>)
    64f2:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL4, 0x01))	{ xprintf("[SPI_KSZ8794_PORT2CONTROL4] not correct\r\n"); }
    64f4:	2101      	movs	r1, #1
    64f6:	2024      	movs	r0, #36	; 0x24
    64f8:	47a0      	blx	r4
    64fa:	b910      	cbnz	r0, 6502 <switch_configure+0x1d6>
    64fc:	4833      	ldr	r0, [pc, #204]	; (65cc <switch_configure+0x2a0>)
    64fe:	4b11      	ldr	r3, [pc, #68]	; (6544 <switch_configure+0x218>)
    6500:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL4, 0x01))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL4] not correct\r\n"); }
    6502:	2101      	movs	r1, #1
    6504:	2034      	movs	r0, #52	; 0x34
    6506:	4c10      	ldr	r4, [pc, #64]	; (6548 <switch_configure+0x21c>)
    6508:	47a0      	blx	r4
    650a:	b910      	cbnz	r0, 6512 <switch_configure+0x1e6>
    650c:	4830      	ldr	r0, [pc, #192]	; (65d0 <switch_configure+0x2a4>)
    650e:	4b0d      	ldr	r3, [pc, #52]	; (6544 <switch_configure+0x218>)
    6510:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL4, 0x01))	{ xprintf("[SPI_KSZ8794_PORT4CONTROL4] not correct\r\n"); }
    6512:	2101      	movs	r1, #1
    6514:	2054      	movs	r0, #84	; 0x54
    6516:	47a0      	blx	r4
    6518:	b910      	cbnz	r0, 6520 <switch_configure+0x1f4>
    651a:	482e      	ldr	r0, [pc, #184]	; (65d4 <switch_configure+0x2a8>)
    651c:	4b09      	ldr	r3, [pc, #36]	; (6544 <switch_configure+0x218>)
    651e:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL5, 0x00))	{ xprintf("[SPI_KSZ8794_PORT1CONTROL5] not correct\r\n"); }
    6520:	2100      	movs	r1, #0
    6522:	2015      	movs	r0, #21
    6524:	47a0      	blx	r4
    6526:	b910      	cbnz	r0, 652e <switch_configure+0x202>
    6528:	482b      	ldr	r0, [pc, #172]	; (65d8 <switch_configure+0x2ac>)
    652a:	4b06      	ldr	r3, [pc, #24]	; (6544 <switch_configure+0x218>)
    652c:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL5, 0x00))	{ xprintf("[SPI_KSZ8794_PORT2CONTROL5] not correct\r\n"); }
    652e:	2100      	movs	r1, #0
    6530:	2025      	movs	r0, #37	; 0x25
    6532:	47a0      	blx	r4
    6534:	2800      	cmp	r0, #0
    6536:	d153      	bne.n	65e0 <switch_configure+0x2b4>
    6538:	4828      	ldr	r0, [pc, #160]	; (65dc <switch_configure+0x2b0>)
    653a:	4b02      	ldr	r3, [pc, #8]	; (6544 <switch_configure+0x218>)
    653c:	4798      	blx	r3
    653e:	e04f      	b.n	65e0 <switch_configure+0x2b4>
    6540:	0000c87a 	.word	0x0000c87a
    6544:	00000395 	.word	0x00000395
    6548:	0000b1d5 	.word	0x0000b1d5
    654c:	0000c8c2 	.word	0x0000c8c2
    6550:	0000b245 	.word	0x0000b245
    6554:	00001201 	.word	0x00001201
    6558:	0000c8e8 	.word	0x0000c8e8
    655c:	0000c910 	.word	0x0000c910
    6560:	0000c934 	.word	0x0000c934
    6564:	0000c958 	.word	0x0000c958
    6568:	0000c97c 	.word	0x0000c97c
    656c:	0000c9a0 	.word	0x0000c9a0
    6570:	0000c9c4 	.word	0x0000c9c4
    6574:	0000c9e8 	.word	0x0000c9e8
    6578:	0000ca0c 	.word	0x0000ca0c
    657c:	0000ca30 	.word	0x0000ca30
    6580:	0000ca55 	.word	0x0000ca55
    6584:	0000ca77 	.word	0x0000ca77
    6588:	0000ca99 	.word	0x0000ca99
    658c:	0000cac3 	.word	0x0000cac3
    6590:	0000caed 	.word	0x0000caed
    6594:	0000cb17 	.word	0x0000cb17
    6598:	0000cb41 	.word	0x0000cb41
    659c:	0000cb6b 	.word	0x0000cb6b
    65a0:	0000cb95 	.word	0x0000cb95
    65a4:	0000cbbf 	.word	0x0000cbbf
    65a8:	0000cbe9 	.word	0x0000cbe9
    65ac:	0000cc13 	.word	0x0000cc13
    65b0:	0000c27e 	.word	0x0000c27e
    65b4:	0000cc3d 	.word	0x0000cc3d
    65b8:	0000cc67 	.word	0x0000cc67
    65bc:	0000cc91 	.word	0x0000cc91
    65c0:	0000ccbb 	.word	0x0000ccbb
    65c4:	0000cce5 	.word	0x0000cce5
    65c8:	0000cd0f 	.word	0x0000cd0f
    65cc:	0000cd39 	.word	0x0000cd39
    65d0:	0000cd63 	.word	0x0000cd63
    65d4:	0000cd8d 	.word	0x0000cd8d
    65d8:	0000cdb7 	.word	0x0000cdb7
    65dc:	0000cde1 	.word	0x0000cde1
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL5, 0x00))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL5] not correct\r\n"); }
    65e0:	2100      	movs	r1, #0
    65e2:	2035      	movs	r0, #53	; 0x35
    65e4:	47a0      	blx	r4
    65e6:	b910      	cbnz	r0, 65ee <switch_configure+0x2c2>
    65e8:	487f      	ldr	r0, [pc, #508]	; (67e8 <switch_configure+0x4bc>)
    65ea:	4b80      	ldr	r3, [pc, #512]	; (67ec <switch_configure+0x4c0>)
    65ec:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL5, 0x00))	{ xprintf("[SPI_KSZ8794_PORT4CONTROL5] not correct\r\n"); }
    65ee:	2100      	movs	r1, #0
    65f0:	2055      	movs	r0, #85	; 0x55
    65f2:	47a0      	blx	r4
    65f4:	b910      	cbnz	r0, 65fc <switch_configure+0x2d0>
    65f6:	487e      	ldr	r0, [pc, #504]	; (67f0 <switch_configure+0x4c4>)
    65f8:	4b7c      	ldr	r3, [pc, #496]	; (67ec <switch_configure+0x4c0>)
    65fa:	4798      	blx	r3
		
	writeKSZreg(SPI_KSZ8794_PORT4CONTROL6, 0x20);
    65fc:	2120      	movs	r1, #32
    65fe:	2056      	movs	r0, #86	; 0x56
    6600:	4b7c      	ldr	r3, [pc, #496]	; (67f4 <switch_configure+0x4c8>)
    6602:	4798      	blx	r3
	delay_us(50);
    6604:	2032      	movs	r0, #50	; 0x32
    6606:	4b7c      	ldr	r3, [pc, #496]	; (67f8 <switch_configure+0x4cc>)
    6608:	4798      	blx	r3
	
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL6, 0x20))	{ xprintf("[SPI_KSZ8794_PORT4CONTROL6] not correct\r\n"); }
    660a:	2120      	movs	r1, #32
    660c:	2056      	movs	r0, #86	; 0x56
    660e:	47a0      	blx	r4
    6610:	b910      	cbnz	r0, 6618 <switch_configure+0x2ec>
    6612:	487a      	ldr	r0, [pc, #488]	; (67fc <switch_configure+0x4d0>)
    6614:	4b75      	ldr	r3, [pc, #468]	; (67ec <switch_configure+0x4c0>)
    6616:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL7, 0x3F))	{ xprintf("[SPI_KSZ8794_PORT1CONTROL7] not correct\r\n"); }
    6618:	213f      	movs	r1, #63	; 0x3f
    661a:	2017      	movs	r0, #23
    661c:	47a0      	blx	r4
    661e:	b910      	cbnz	r0, 6626 <switch_configure+0x2fa>
    6620:	4877      	ldr	r0, [pc, #476]	; (6800 <switch_configure+0x4d4>)
    6622:	4b72      	ldr	r3, [pc, #456]	; (67ec <switch_configure+0x4c0>)
    6624:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL7, 0x3F))	{ xprintf("[SPI_KSZ8794_PORT2CONTROL7] not correct\r\n"); }
    6626:	213f      	movs	r1, #63	; 0x3f
    6628:	2027      	movs	r0, #39	; 0x27
    662a:	47a0      	blx	r4
    662c:	b910      	cbnz	r0, 6634 <switch_configure+0x308>
    662e:	4875      	ldr	r0, [pc, #468]	; (6804 <switch_configure+0x4d8>)
    6630:	4b6e      	ldr	r3, [pc, #440]	; (67ec <switch_configure+0x4c0>)
    6632:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL7, 0x3F))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL7] not correct\r\n"); }
    6634:	213f      	movs	r1, #63	; 0x3f
    6636:	2037      	movs	r0, #55	; 0x37
    6638:	47a0      	blx	r4
    663a:	b910      	cbnz	r0, 6642 <switch_configure+0x316>
    663c:	4872      	ldr	r0, [pc, #456]	; (6808 <switch_configure+0x4dc>)
    663e:	4b6b      	ldr	r3, [pc, #428]	; (67ec <switch_configure+0x4c0>)
    6640:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL8, 0x00))	{ xprintf("[SPI_KSZ8794_PORT1CONTROL8] not correct\r\n"); }
    6642:	2100      	movs	r1, #0
    6644:	201a      	movs	r0, #26
    6646:	47a0      	blx	r4
    6648:	b910      	cbnz	r0, 6650 <switch_configure+0x324>
    664a:	4870      	ldr	r0, [pc, #448]	; (680c <switch_configure+0x4e0>)
    664c:	4b67      	ldr	r3, [pc, #412]	; (67ec <switch_configure+0x4c0>)
    664e:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL8, 0x00))	{ xprintf("[SPI_KSZ8794_PORT2CONTROL8] not correct\r\n"); }
    6650:	2100      	movs	r1, #0
    6652:	202a      	movs	r0, #42	; 0x2a
    6654:	47a0      	blx	r4
    6656:	b910      	cbnz	r0, 665e <switch_configure+0x332>
    6658:	486d      	ldr	r0, [pc, #436]	; (6810 <switch_configure+0x4e4>)
    665a:	4b64      	ldr	r3, [pc, #400]	; (67ec <switch_configure+0x4c0>)
    665c:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL8, 0x00))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL8] not correct\r\n"); }
    665e:	2100      	movs	r1, #0
    6660:	203a      	movs	r0, #58	; 0x3a
    6662:	47a0      	blx	r4
    6664:	b910      	cbnz	r0, 666c <switch_configure+0x340>
    6666:	486b      	ldr	r0, [pc, #428]	; (6814 <switch_configure+0x4e8>)
    6668:	4b60      	ldr	r3, [pc, #384]	; (67ec <switch_configure+0x4c0>)
    666a:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT1LINKMD, 0x00))	{ xprintf("[SPI_KSZ8794_PORT1LINKMD] not correct\r\n"); }
    666c:	2100      	movs	r1, #0
    666e:	201b      	movs	r0, #27
    6670:	47a0      	blx	r4
    6672:	b910      	cbnz	r0, 667a <switch_configure+0x34e>
    6674:	4868      	ldr	r0, [pc, #416]	; (6818 <switch_configure+0x4ec>)
    6676:	4b5d      	ldr	r3, [pc, #372]	; (67ec <switch_configure+0x4c0>)
    6678:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT2LINKMD, 0x00))	{ xprintf("[SPI_KSZ8794_PORT2LINKMD] not correct\r\n"); }
    667a:	2100      	movs	r1, #0
    667c:	202b      	movs	r0, #43	; 0x2b
    667e:	47a0      	blx	r4
    6680:	b910      	cbnz	r0, 6688 <switch_configure+0x35c>
    6682:	4866      	ldr	r0, [pc, #408]	; (681c <switch_configure+0x4f0>)
    6684:	4b59      	ldr	r3, [pc, #356]	; (67ec <switch_configure+0x4c0>)
    6686:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT3LINKMD, 0x00))	{ xprintf("[SPI_KSZ8794_PORT3LINKMD] not correct\r\n"); }
    6688:	2100      	movs	r1, #0
    668a:	203b      	movs	r0, #59	; 0x3b
    668c:	47a0      	blx	r4
    668e:	b910      	cbnz	r0, 6696 <switch_configure+0x36a>
    6690:	4863      	ldr	r0, [pc, #396]	; (6820 <switch_configure+0x4f4>)
    6692:	4b56      	ldr	r3, [pc, #344]	; (67ec <switch_configure+0x4c0>)
    6694:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL9, 0x5F))	{ xprintf("[SPI_KSZ8794_PORT1CONTROL9] not correct\r\n"); }
    6696:	215f      	movs	r1, #95	; 0x5f
    6698:	201c      	movs	r0, #28
    669a:	47a0      	blx	r4
    669c:	b910      	cbnz	r0, 66a4 <switch_configure+0x378>
    669e:	4861      	ldr	r0, [pc, #388]	; (6824 <switch_configure+0x4f8>)
    66a0:	4b52      	ldr	r3, [pc, #328]	; (67ec <switch_configure+0x4c0>)
    66a2:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL9, 0x5F))	{ xprintf("[SPI_KSZ8794_PORT2CONTROL9] not correct\r\n"); }
    66a4:	215f      	movs	r1, #95	; 0x5f
    66a6:	202c      	movs	r0, #44	; 0x2c
    66a8:	47a0      	blx	r4
    66aa:	b910      	cbnz	r0, 66b2 <switch_configure+0x386>
    66ac:	485e      	ldr	r0, [pc, #376]	; (6828 <switch_configure+0x4fc>)
    66ae:	4b4f      	ldr	r3, [pc, #316]	; (67ec <switch_configure+0x4c0>)
    66b0:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL9, 0x5F))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL9] not correct\r\n"); }
    66b2:	215f      	movs	r1, #95	; 0x5f
    66b4:	203c      	movs	r0, #60	; 0x3c
    66b6:	47a0      	blx	r4
    66b8:	b910      	cbnz	r0, 66c0 <switch_configure+0x394>
    66ba:	485c      	ldr	r0, [pc, #368]	; (682c <switch_configure+0x500>)
    66bc:	4b4b      	ldr	r3, [pc, #300]	; (67ec <switch_configure+0x4c0>)
    66be:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL10, 0x00)) { xprintf("[SPI_KSZ8794_PORT1CONTROL10] not correct\r\n"); }
    66c0:	2100      	movs	r1, #0
    66c2:	201d      	movs	r0, #29
    66c4:	47a0      	blx	r4
    66c6:	b910      	cbnz	r0, 66ce <switch_configure+0x3a2>
    66c8:	4859      	ldr	r0, [pc, #356]	; (6830 <switch_configure+0x504>)
    66ca:	4b48      	ldr	r3, [pc, #288]	; (67ec <switch_configure+0x4c0>)
    66cc:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL10, 0x00)) { xprintf("[SPI_KSZ8794_PORT2CONTROL10] not correct\r\n"); }
    66ce:	2100      	movs	r1, #0
    66d0:	202d      	movs	r0, #45	; 0x2d
    66d2:	47a0      	blx	r4
    66d4:	b910      	cbnz	r0, 66dc <switch_configure+0x3b0>
    66d6:	4857      	ldr	r0, [pc, #348]	; (6834 <switch_configure+0x508>)
    66d8:	4b44      	ldr	r3, [pc, #272]	; (67ec <switch_configure+0x4c0>)
    66da:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL10, 0x00)) { xprintf("[SPI_KSZ8794_PORT3CONTROL10] not correct\r\n"); }
    66dc:	2100      	movs	r1, #0
    66de:	203d      	movs	r0, #61	; 0x3d
    66e0:	47a0      	blx	r4
    66e2:	b910      	cbnz	r0, 66ea <switch_configure+0x3be>
    66e4:	4854      	ldr	r0, [pc, #336]	; (6838 <switch_configure+0x50c>)
    66e6:	4b41      	ldr	r3, [pc, #260]	; (67ec <switch_configure+0x4c0>)
    66e8:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL20, 0x62)) { xprintf("[SPI_KSZ8794_PORT2CONTROL20] not correct\r\n"); }
    66ea:	2162      	movs	r1, #98	; 0x62
    66ec:	20a3      	movs	r0, #163	; 0xa3
    66ee:	47a0      	blx	r4
    66f0:	b910      	cbnz	r0, 66f8 <switch_configure+0x3cc>
    66f2:	4852      	ldr	r0, [pc, #328]	; (683c <switch_configure+0x510>)
    66f4:	4b3d      	ldr	r3, [pc, #244]	; (67ec <switch_configure+0x4c0>)
    66f6:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL12, 0x80)) { xprintf("[SPI_KSZ8794_PORT1CONTROL12] not correct\r\n"); }
    66f8:	2180      	movs	r1, #128	; 0x80
    66fa:	20b0      	movs	r0, #176	; 0xb0
    66fc:	47a0      	blx	r4
    66fe:	b910      	cbnz	r0, 6706 <switch_configure+0x3da>
    6700:	484f      	ldr	r0, [pc, #316]	; (6840 <switch_configure+0x514>)
    6702:	4b3a      	ldr	r3, [pc, #232]	; (67ec <switch_configure+0x4c0>)
    6704:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL12, 0x80)) { xprintf("[SPI_KSZ8794_PORT2CONTROL12] not correct\r\n"); }
    6706:	2180      	movs	r1, #128	; 0x80
    6708:	20c0      	movs	r0, #192	; 0xc0
    670a:	47a0      	blx	r4
    670c:	b910      	cbnz	r0, 6714 <switch_configure+0x3e8>
    670e:	484d      	ldr	r0, [pc, #308]	; (6844 <switch_configure+0x518>)
    6710:	4b36      	ldr	r3, [pc, #216]	; (67ec <switch_configure+0x4c0>)
    6712:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL12, 0x80)) { xprintf("[SPI_KSZ8794_PORT3CONTROL12] not correct\r\n"); }
    6714:	2180      	movs	r1, #128	; 0x80
    6716:	20d0      	movs	r0, #208	; 0xd0
    6718:	47a0      	blx	r4
    671a:	b910      	cbnz	r0, 6722 <switch_configure+0x3f6>
    671c:	484a      	ldr	r0, [pc, #296]	; (6848 <switch_configure+0x51c>)
    671e:	4b33      	ldr	r3, [pc, #204]	; (67ec <switch_configure+0x4c0>)
    6720:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL12, 0x80)) { xprintf("[SPI_KSZ8794_PORT4CONTROL12] not correct\r\n"); }
    6722:	2180      	movs	r1, #128	; 0x80
    6724:	20f0      	movs	r0, #240	; 0xf0
    6726:	47a0      	blx	r4
    6728:	b910      	cbnz	r0, 6730 <switch_configure+0x404>
    672a:	4848      	ldr	r0, [pc, #288]	; (684c <switch_configure+0x520>)
    672c:	4b2f      	ldr	r3, [pc, #188]	; (67ec <switch_configure+0x4c0>)
    672e:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL13, 0x00)) { xprintf("[SPI_KSZ8794_PORT1CONTROL13] not correct\r\n"); }
    6730:	2100      	movs	r1, #0
    6732:	20b1      	movs	r0, #177	; 0xb1
    6734:	47a0      	blx	r4
    6736:	b910      	cbnz	r0, 673e <switch_configure+0x412>
    6738:	4845      	ldr	r0, [pc, #276]	; (6850 <switch_configure+0x524>)
    673a:	4b2c      	ldr	r3, [pc, #176]	; (67ec <switch_configure+0x4c0>)
    673c:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL13, 0x00)) { xprintf("[SPI_KSZ8794_PORT2CONTROL13] not correct\r\n"); }
    673e:	2100      	movs	r1, #0
    6740:	20c1      	movs	r0, #193	; 0xc1
    6742:	47a0      	blx	r4
    6744:	b910      	cbnz	r0, 674c <switch_configure+0x420>
    6746:	4843      	ldr	r0, [pc, #268]	; (6854 <switch_configure+0x528>)
    6748:	4b28      	ldr	r3, [pc, #160]	; (67ec <switch_configure+0x4c0>)
    674a:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL13, 0x00)) { xprintf("[SPI_KSZ8794_PORT3CONTROL13] not correct\r\n"); }
    674c:	2100      	movs	r1, #0
    674e:	20d1      	movs	r0, #209	; 0xd1
    6750:	47a0      	blx	r4
    6752:	b910      	cbnz	r0, 675a <switch_configure+0x42e>
    6754:	4840      	ldr	r0, [pc, #256]	; (6858 <switch_configure+0x52c>)
    6756:	4b25      	ldr	r3, [pc, #148]	; (67ec <switch_configure+0x4c0>)
    6758:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL13, 0x00)) { xprintf("[SPI_KSZ8794_PORT4CONTROL13] not correct\r\n"); }
    675a:	2100      	movs	r1, #0
    675c:	20f1      	movs	r0, #241	; 0xf1
    675e:	47a0      	blx	r4
    6760:	b910      	cbnz	r0, 6768 <switch_configure+0x43c>
    6762:	483e      	ldr	r0, [pc, #248]	; (685c <switch_configure+0x530>)
    6764:	4b21      	ldr	r3, [pc, #132]	; (67ec <switch_configure+0x4c0>)
    6766:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL14, 0x88)) { xprintf("[SPI_KSZ8794_PORT1CONTROL14] not correct\r\n"); }
    6768:	2188      	movs	r1, #136	; 0x88
    676a:	20b2      	movs	r0, #178	; 0xb2
    676c:	4c3c      	ldr	r4, [pc, #240]	; (6860 <switch_configure+0x534>)
    676e:	47a0      	blx	r4
    6770:	b910      	cbnz	r0, 6778 <switch_configure+0x44c>
    6772:	483c      	ldr	r0, [pc, #240]	; (6864 <switch_configure+0x538>)
    6774:	4b1d      	ldr	r3, [pc, #116]	; (67ec <switch_configure+0x4c0>)
    6776:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL14, 0x88)) { xprintf("[SPI_KSZ8794_PORT2CONTROL14] not correct\r\n"); }
    6778:	2188      	movs	r1, #136	; 0x88
    677a:	20c2      	movs	r0, #194	; 0xc2
    677c:	47a0      	blx	r4
    677e:	b910      	cbnz	r0, 6786 <switch_configure+0x45a>
    6780:	4839      	ldr	r0, [pc, #228]	; (6868 <switch_configure+0x53c>)
    6782:	4b1a      	ldr	r3, [pc, #104]	; (67ec <switch_configure+0x4c0>)
    6784:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL14, 0x88)) { xprintf("[SPI_KSZ8794_PORT3CONTROL14] not correct\r\n"); }
    6786:	2188      	movs	r1, #136	; 0x88
    6788:	20d2      	movs	r0, #210	; 0xd2
    678a:	47a0      	blx	r4
    678c:	b910      	cbnz	r0, 6794 <switch_configure+0x468>
    678e:	4837      	ldr	r0, [pc, #220]	; (686c <switch_configure+0x540>)
    6790:	4b16      	ldr	r3, [pc, #88]	; (67ec <switch_configure+0x4c0>)
    6792:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL14, 0x88)) { xprintf("[SPI_KSZ8794_PORT4CONTROL14] not correct\r\n"); }
    6794:	2188      	movs	r1, #136	; 0x88
    6796:	20f2      	movs	r0, #242	; 0xf2
    6798:	47a0      	blx	r4
    679a:	b910      	cbnz	r0, 67a2 <switch_configure+0x476>
    679c:	4834      	ldr	r0, [pc, #208]	; (6870 <switch_configure+0x544>)
    679e:	4b13      	ldr	r3, [pc, #76]	; (67ec <switch_configure+0x4c0>)
    67a0:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL15, 0x84)) { xprintf("[SPI_KSZ8794_PORT1CONTROL15] not correct\r\n"); }
    67a2:	2184      	movs	r1, #132	; 0x84
    67a4:	20b3      	movs	r0, #179	; 0xb3
    67a6:	47a0      	blx	r4
    67a8:	b910      	cbnz	r0, 67b0 <switch_configure+0x484>
    67aa:	4832      	ldr	r0, [pc, #200]	; (6874 <switch_configure+0x548>)
    67ac:	4b0f      	ldr	r3, [pc, #60]	; (67ec <switch_configure+0x4c0>)
    67ae:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL15, 0x84)) { xprintf("[SPI_KSZ8794_PORT2CONTROL15] not correct\r\n"); }
    67b0:	2184      	movs	r1, #132	; 0x84
    67b2:	20c3      	movs	r0, #195	; 0xc3
    67b4:	47a0      	blx	r4
    67b6:	b910      	cbnz	r0, 67be <switch_configure+0x492>
    67b8:	482f      	ldr	r0, [pc, #188]	; (6878 <switch_configure+0x54c>)
    67ba:	4b0c      	ldr	r3, [pc, #48]	; (67ec <switch_configure+0x4c0>)
    67bc:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL15, 0x84)) { xprintf("[SPI_KSZ8794_PORT3CONTROL15] not correct\r\n"); }
    67be:	2184      	movs	r1, #132	; 0x84
    67c0:	20d3      	movs	r0, #211	; 0xd3
    67c2:	47a0      	blx	r4
    67c4:	b910      	cbnz	r0, 67cc <switch_configure+0x4a0>
    67c6:	482d      	ldr	r0, [pc, #180]	; (687c <switch_configure+0x550>)
    67c8:	4b08      	ldr	r3, [pc, #32]	; (67ec <switch_configure+0x4c0>)
    67ca:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL15, 0x84)) { xprintf("[SPI_KSZ8794_PORT4CONTROL15] not correct\r\n"); }
    67cc:	2184      	movs	r1, #132	; 0x84
    67ce:	20f3      	movs	r0, #243	; 0xf3
    67d0:	47a0      	blx	r4
    67d2:	b910      	cbnz	r0, 67da <switch_configure+0x4ae>
    67d4:	482a      	ldr	r0, [pc, #168]	; (6880 <switch_configure+0x554>)
    67d6:	4b05      	ldr	r3, [pc, #20]	; (67ec <switch_configure+0x4c0>)
    67d8:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL16, 0x82)) { xprintf("[SPI_KSZ8794_PORT1CONTROL16] not correct\r\n"); }
    67da:	2182      	movs	r1, #130	; 0x82
    67dc:	20b4      	movs	r0, #180	; 0xb4
    67de:	47a0      	blx	r4
    67e0:	2800      	cmp	r0, #0
    67e2:	d153      	bne.n	688c <switch_configure+0x560>
    67e4:	4827      	ldr	r0, [pc, #156]	; (6884 <switch_configure+0x558>)
    67e6:	e04f      	b.n	6888 <switch_configure+0x55c>
    67e8:	0000ce0b 	.word	0x0000ce0b
    67ec:	00000395 	.word	0x00000395
    67f0:	0000ce35 	.word	0x0000ce35
    67f4:	0000b245 	.word	0x0000b245
    67f8:	00001201 	.word	0x00001201
    67fc:	0000ce5f 	.word	0x0000ce5f
    6800:	0000ce89 	.word	0x0000ce89
    6804:	0000ceb3 	.word	0x0000ceb3
    6808:	0000cedd 	.word	0x0000cedd
    680c:	0000cf07 	.word	0x0000cf07
    6810:	0000cf31 	.word	0x0000cf31
    6814:	0000cf5b 	.word	0x0000cf5b
    6818:	0000cf85 	.word	0x0000cf85
    681c:	0000cfad 	.word	0x0000cfad
    6820:	0000cfd5 	.word	0x0000cfd5
    6824:	0000cffd 	.word	0x0000cffd
    6828:	0000d027 	.word	0x0000d027
    682c:	0000d051 	.word	0x0000d051
    6830:	0000d07b 	.word	0x0000d07b
    6834:	0000d0a6 	.word	0x0000d0a6
    6838:	0000d0d1 	.word	0x0000d0d1
    683c:	0000d0fc 	.word	0x0000d0fc
    6840:	0000d127 	.word	0x0000d127
    6844:	0000d152 	.word	0x0000d152
    6848:	0000d17d 	.word	0x0000d17d
    684c:	0000d1a8 	.word	0x0000d1a8
    6850:	0000d1d3 	.word	0x0000d1d3
    6854:	0000d1fe 	.word	0x0000d1fe
    6858:	0000d229 	.word	0x0000d229
    685c:	0000d254 	.word	0x0000d254
    6860:	0000b1d5 	.word	0x0000b1d5
    6864:	0000d27f 	.word	0x0000d27f
    6868:	0000d2aa 	.word	0x0000d2aa
    686c:	0000d2d5 	.word	0x0000d2d5
    6870:	0000d300 	.word	0x0000d300
    6874:	0000d32b 	.word	0x0000d32b
    6878:	0000d356 	.word	0x0000d356
    687c:	0000d381 	.word	0x0000d381
    6880:	0000d3ac 	.word	0x0000d3ac
    6884:	0000d3d7 	.word	0x0000d3d7
    6888:	4b22      	ldr	r3, [pc, #136]	; (6914 <switch_configure+0x5e8>)
    688a:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL16, 0x82)) { xprintf("[SPI_KSZ8794_PORT2CONTROL16] not correct\r\n"); }
    688c:	2182      	movs	r1, #130	; 0x82
    688e:	20c4      	movs	r0, #196	; 0xc4
    6890:	47a0      	blx	r4
    6892:	b910      	cbnz	r0, 689a <switch_configure+0x56e>
    6894:	4820      	ldr	r0, [pc, #128]	; (6918 <switch_configure+0x5ec>)
    6896:	4b1f      	ldr	r3, [pc, #124]	; (6914 <switch_configure+0x5e8>)
    6898:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL16, 0x82)) { xprintf("[SPI_KSZ8794_PORT3CONTROL16] not correct\r\n"); }
    689a:	2182      	movs	r1, #130	; 0x82
    689c:	20d4      	movs	r0, #212	; 0xd4
    689e:	47a0      	blx	r4
    68a0:	b910      	cbnz	r0, 68a8 <switch_configure+0x57c>
    68a2:	481e      	ldr	r0, [pc, #120]	; (691c <switch_configure+0x5f0>)
    68a4:	4b1b      	ldr	r3, [pc, #108]	; (6914 <switch_configure+0x5e8>)
    68a6:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL16, 0x82)) { xprintf("[SPI_KSZ8794_PORT4CONTROL16] not correct\r\n"); }
    68a8:	2182      	movs	r1, #130	; 0x82
    68aa:	20f4      	movs	r0, #244	; 0xf4
    68ac:	47a0      	blx	r4
    68ae:	b910      	cbnz	r0, 68b6 <switch_configure+0x58a>
    68b0:	481b      	ldr	r0, [pc, #108]	; (6920 <switch_configure+0x5f4>)
    68b2:	4b18      	ldr	r3, [pc, #96]	; (6914 <switch_configure+0x5e8>)
    68b4:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL17, 0x81)) { xprintf("[SPI_KSZ8794_PORT1CONTROL17] not correct\r\n"); }
    68b6:	2181      	movs	r1, #129	; 0x81
    68b8:	20b5      	movs	r0, #181	; 0xb5
    68ba:	47a0      	blx	r4
    68bc:	b910      	cbnz	r0, 68c4 <switch_configure+0x598>
    68be:	4819      	ldr	r0, [pc, #100]	; (6924 <switch_configure+0x5f8>)
    68c0:	4b14      	ldr	r3, [pc, #80]	; (6914 <switch_configure+0x5e8>)
    68c2:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL17, 0x81)) { xprintf("[SPI_KSZ8794_PORT2CONTROL17] not correct\r\n"); }
    68c4:	2181      	movs	r1, #129	; 0x81
    68c6:	20c5      	movs	r0, #197	; 0xc5
    68c8:	47a0      	blx	r4
    68ca:	b910      	cbnz	r0, 68d2 <switch_configure+0x5a6>
    68cc:	4816      	ldr	r0, [pc, #88]	; (6928 <switch_configure+0x5fc>)
    68ce:	4b11      	ldr	r3, [pc, #68]	; (6914 <switch_configure+0x5e8>)
    68d0:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL17, 0x81)) { xprintf("[SPI_KSZ8794_PORT3CONTROL17] not correct\r\n"); }
    68d2:	2181      	movs	r1, #129	; 0x81
    68d4:	20d5      	movs	r0, #213	; 0xd5
    68d6:	47a0      	blx	r4
    68d8:	b910      	cbnz	r0, 68e0 <switch_configure+0x5b4>
    68da:	4814      	ldr	r0, [pc, #80]	; (692c <switch_configure+0x600>)
    68dc:	4b0d      	ldr	r3, [pc, #52]	; (6914 <switch_configure+0x5e8>)
    68de:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL17, 0x81)) { xprintf("[SPI_KSZ8794_PORT4CONTROL17] not correct\r\n"); }
    68e0:	2181      	movs	r1, #129	; 0x81
    68e2:	20f5      	movs	r0, #245	; 0xf5
    68e4:	47a0      	blx	r4
    68e6:	b910      	cbnz	r0, 68ee <switch_configure+0x5c2>
    68e8:	4811      	ldr	r0, [pc, #68]	; (6930 <switch_configure+0x604>)
    68ea:	4b0a      	ldr	r3, [pc, #40]	; (6914 <switch_configure+0x5e8>)
    68ec:	4798      	blx	r3
		
	/* Start the Ethernet SWITCH operation */
	writeKSZreg(SPI_KSZ8794_START, 0x01);
    68ee:	2101      	movs	r1, #1
    68f0:	4608      	mov	r0, r1
    68f2:	4b10      	ldr	r3, [pc, #64]	; (6934 <switch_configure+0x608>)
    68f4:	4798      	blx	r3
	delay_us(50);
    68f6:	2032      	movs	r0, #50	; 0x32
    68f8:	4b0f      	ldr	r3, [pc, #60]	; (6938 <switch_configure+0x60c>)
    68fa:	4798      	blx	r3
	
	/* Check it has re-started and running */
	if (!checkKSZreg(SPI_KSZ8794_START, 0x61))			{ xprintf("[SPI_KSZ8794_START final] not correct\r\n"); }
    68fc:	2161      	movs	r1, #97	; 0x61
    68fe:	2001      	movs	r0, #1
    6900:	47a0      	blx	r4
    6902:	b920      	cbnz	r0, 690e <switch_configure+0x5e2>
    6904:	480d      	ldr	r0, [pc, #52]	; (693c <switch_configure+0x610>)
    6906:	4b03      	ldr	r3, [pc, #12]	; (6914 <switch_configure+0x5e8>)
	/* Completed set-up commands to the KSZ Ethernet SWITCH via SPI bus */
}
    6908:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	if (!checkKSZreg(SPI_KSZ8794_START, 0x61))			{ xprintf("[SPI_KSZ8794_START final] not correct\r\n"); }
    690c:	4718      	bx	r3
    690e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6912:	bf00      	nop
    6914:	00000395 	.word	0x00000395
    6918:	0000d402 	.word	0x0000d402
    691c:	0000d42d 	.word	0x0000d42d
    6920:	0000d458 	.word	0x0000d458
    6924:	0000d483 	.word	0x0000d483
    6928:	0000d4ae 	.word	0x0000d4ae
    692c:	0000d4d9 	.word	0x0000d4d9
    6930:	0000d504 	.word	0x0000d504
    6934:	0000b245 	.word	0x0000b245
    6938:	00001201 	.word	0x00001201
    693c:	0000d52f 	.word	0x0000d52f

00006940 <address_configure>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: from the ID value, set the global IP address, IP scheme and MAC address
// Returns:     Nothing
// *****************************************************************************************************************************************************************
void address_configure(void)
{	
    6940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (((CONFIG *)&settings_buffer)->ID == 0x00000000) {
    6944:	4f6b      	ldr	r7, [pc, #428]	; (6af4 <address_configure+0x1b4>)
    6946:	4d6c      	ldr	r5, [pc, #432]	; (6af8 <address_configure+0x1b8>)
    6948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
{	
    694a:	b08f      	sub	sp, #60	; 0x3c
	if (((CONFIG *)&settings_buffer)->ID == 0x00000000) {
    694c:	b92b      	cbnz	r3, 695a <address_configure+0x1a>
		xprintf("MAC address and IP scheme not initialized as there is no [ID] set...\r\n");
    694e:	486b      	ldr	r0, [pc, #428]	; (6afc <address_configure+0x1bc>)
	ring_socket = uip_udp_new(&broadcast, htons(RING_MANAGEMENT_SOCKET));
	if (ring_socket != NULL) {
		uip_udp_bind(ring_socket, htons(RING_MANAGEMENT_SOCKET));
		xprintf("Ring Management UDP socket created...\r\n");
	} else {
		xprintf("Ring Management UDP socket ERROR!!!!!!!\r\n");
    6950:	462b      	mov	r3, r5
	}
}
    6952:	b00f      	add	sp, #60	; 0x3c
    6954:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		xprintf("Ring Management UDP socket ERROR!!!!!!!\r\n");
    6958:	4718      	bx	r3
	mac_raw[0] = macaddress.addr[0] = MAC_ADDR_00;
    695a:	4a69      	ldr	r2, [pc, #420]	; (6b00 <address_configure+0x1c0>)
    695c:	4c69      	ldr	r4, [pc, #420]	; (6b04 <address_configure+0x1c4>)
	mac_raw[4] = macaddress.addr[4] = (uint8_t)(((((CONFIG *)&settings_buffer)->ID) >> 8) & 0x00FF);
    695e:	f3c3 2107 	ubfx	r1, r3, #8, #8
	mac_raw[0] = macaddress.addr[0] = MAC_ADDR_00;
    6962:	f04f 0cc2 	mov.w	ip, #194	; 0xc2
	mac_raw[1] = macaddress.addr[1] = MAC_ADDR_01;
    6966:	f04f 0e50 	mov.w	lr, #80	; 0x50
	mac_raw[2] = macaddress.addr[2] = (uint8_t)(((((CONFIG *)&settings_buffer)->ID) >> 24 & 0x00FF));
    696a:	0e1e      	lsrs	r6, r3, #24
	mac_raw[3] = macaddress.addr[3] = (uint8_t)(((((CONFIG *)&settings_buffer)->ID) >> 16) & 0x00FF);
    696c:	f3c3 4007 	ubfx	r0, r3, #16, #8
    mac_raw[5] = macaddress.addr[5] = (uint8_t)((((CONFIG *)&settings_buffer)->ID) & 0x00FF);
    6970:	b2db      	uxtb	r3, r3
	mac_raw[0] = macaddress.addr[0] = MAC_ADDR_00;
    6972:	f882 c000 	strb.w	ip, [r2]
	mac_raw[1] = macaddress.addr[1] = MAC_ADDR_01;
    6976:	f882 e001 	strb.w	lr, [r2, #1]
	mac_raw[2] = macaddress.addr[2] = (uint8_t)(((((CONFIG *)&settings_buffer)->ID) >> 24 & 0x00FF));
    697a:	7096      	strb	r6, [r2, #2]
	mac_raw[3] = macaddress.addr[3] = (uint8_t)(((((CONFIG *)&settings_buffer)->ID) >> 16) & 0x00FF);
    697c:	70d0      	strb	r0, [r2, #3]
	mac_raw[4] = macaddress.addr[4] = (uint8_t)(((((CONFIG *)&settings_buffer)->ID) >> 8) & 0x00FF);
    697e:	7111      	strb	r1, [r2, #4]
    mac_raw[5] = macaddress.addr[5] = (uint8_t)((((CONFIG *)&settings_buffer)->ID) & 0x00FF);
    6980:	7153      	strb	r3, [r2, #5]
	uip_setethaddr(macaddress);
    6982:	4a61      	ldr	r2, [pc, #388]	; (6b08 <address_configure+0x1c8>)
	mac_raw[2] = macaddress.addr[2] = (uint8_t)(((((CONFIG *)&settings_buffer)->ID) >> 24 & 0x00FF));
    6984:	70a6      	strb	r6, [r4, #2]
	mac_raw[3] = macaddress.addr[3] = (uint8_t)(((((CONFIG *)&settings_buffer)->ID) >> 16) & 0x00FF);
    6986:	70e0      	strb	r0, [r4, #3]
    mac_raw[5] = macaddress.addr[5] = (uint8_t)((((CONFIG *)&settings_buffer)->ID) & 0x00FF);
    6988:	7163      	strb	r3, [r4, #5]
	uip_setethaddr(macaddress);
    698a:	7096      	strb	r6, [r2, #2]
    698c:	70d0      	strb	r0, [r2, #3]
	uip_ipaddr(&ipaddr, 192, 168, (uint8_t)((((CONFIG *)&settings_buffer)->ID) / 250), 1 + (uint8_t)((((CONFIG *)&settings_buffer)->ID) % 250));
    698e:	4e5f      	ldr	r6, [pc, #380]	; (6b0c <address_configure+0x1cc>)
	uip_setethaddr(macaddress);
    6990:	7153      	strb	r3, [r2, #5]
	mac_async_enable(&ETHERNET_MAC_0);
    6992:	485f      	ldr	r0, [pc, #380]	; (6b10 <address_configure+0x1d0>)
    6994:	4b5f      	ldr	r3, [pc, #380]	; (6b14 <address_configure+0x1d4>)
	mac_raw[0] = macaddress.addr[0] = MAC_ADDR_00;
    6996:	f884 c000 	strb.w	ip, [r4]
	mac_raw[1] = macaddress.addr[1] = MAC_ADDR_01;
    699a:	f884 e001 	strb.w	lr, [r4, #1]
	mac_raw[4] = macaddress.addr[4] = (uint8_t)(((((CONFIG *)&settings_buffer)->ID) >> 8) & 0x00FF);
    699e:	7121      	strb	r1, [r4, #4]
	uip_setethaddr(macaddress);
    69a0:	f882 c000 	strb.w	ip, [r2]
    69a4:	f882 e001 	strb.w	lr, [r2, #1]
    69a8:	7111      	strb	r1, [r2, #4]
	mac_async_enable(&ETHERNET_MAC_0);
    69aa:	4798      	blx	r3
	uip_ipaddr(&ipaddr, 192, 168, (uint8_t)((((CONFIG *)&settings_buffer)->ID) / 250), 1 + (uint8_t)((((CONFIG *)&settings_buffer)->ID) % 250));
    69ac:	f64a 00c0 	movw	r0, #43200	; 0xa8c0
    69b0:	8030      	strh	r0, [r6, #0]
    69b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	uip_ipaddr(&netmask, 255, 255, 0, 0);
    69b4:	f8df e1ac 	ldr.w	lr, [pc, #428]	; 6b64 <address_configure+0x224>
	uip_ipaddr(&gwaddr, 192, 168, 0, 1);									// IP address of CPU Server on installation network is always "192.168.0.1". This address can NOT be held by any Multi-Sense node
    69b8:	4f57      	ldr	r7, [pc, #348]	; (6b18 <address_configure+0x1d8>)
	xprintf("MultiSense [init MAC/IP values] %x:%x:%x:%x:%x:%x %d.%d.%d.%d\r\n", mac_raw[0], mac_raw[1], mac_raw[2], mac_raw[3], mac_raw[4], mac_raw[5], uip_ipaddr1(ipaddr), uip_ipaddr2(ipaddr), uip_ipaddr3(ipaddr), uip_ipaddr4(ipaddr));
    69ba:	f894 b002 	ldrb.w	fp, [r4, #2]
	uip_ipaddr(&gwaddr, 192, 168, 0, 1);									// IP address of CPU Server on installation network is always "192.168.0.1". This address can NOT be held by any Multi-Sense node
    69be:	8038      	strh	r0, [r7, #0]
	uip_ipaddr(&ipaddr, 192, 168, (uint8_t)((((CONFIG *)&settings_buffer)->ID) / 250), 1 + (uint8_t)((((CONFIG *)&settings_buffer)->ID) % 250));
    69c0:	22fa      	movs	r2, #250	; 0xfa
    69c2:	fbb3 f1f2 	udiv	r1, r3, r2
    69c6:	fb02 3311 	mls	r3, r2, r1, r3
    69ca:	3301      	adds	r3, #1
    69cc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    69d0:	b29b      	uxth	r3, r3
    69d2:	0a1a      	lsrs	r2, r3, #8
	uip_ipaddr(&netmask, 255, 255, 0, 0);
    69d4:	f04f 0c00 	mov.w	ip, #0
	uip_ipaddr(&ipaddr, 192, 168, (uint8_t)((((CONFIG *)&settings_buffer)->ID) / 250), 1 + (uint8_t)((((CONFIG *)&settings_buffer)->ID) % 250));
    69d8:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	uip_ipaddr(&netmask, 255, 255, 0, 0);
    69dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
    69e0:	f8ae c002 	strh.w	ip, [lr, #2]
    69e4:	f8ae 2000 	strh.w	r2, [lr]
	uip_ipaddr(&broadcast, 255, 255, 255, 255);
    69e8:	f8df e15c 	ldr.w	lr, [pc, #348]	; 6b48 <address_configure+0x208>
    69ec:	f8ae 2000 	strh.w	r2, [lr]
    69f0:	f8ae 2002 	strh.w	r2, [lr, #2]
	uip_sethostaddr(&ipaddr);
    69f4:	4a49      	ldr	r2, [pc, #292]	; (6b1c <address_configure+0x1dc>)
	uip_ipaddr(&ipaddr, 192, 168, (uint8_t)((((CONFIG *)&settings_buffer)->ID) / 250), 1 + (uint8_t)((((CONFIG *)&settings_buffer)->ID) % 250));
    69f6:	b29b      	uxth	r3, r3
    69f8:	8073      	strh	r3, [r6, #2]
	uip_sethostaddr(&ipaddr);
    69fa:	8053      	strh	r3, [r2, #2]
	uip_setnetmask(&gwaddr);
    69fc:	4b48      	ldr	r3, [pc, #288]	; (6b20 <address_configure+0x1e0>)
	uip_sethostaddr(&ipaddr);
    69fe:	8010      	strh	r0, [r2, #0]
	uip_ipaddr(&gwaddr, 192, 168, 0, 1);									// IP address of CPU Server on installation network is always "192.168.0.1". This address can NOT be held by any Multi-Sense node
    6a00:	f44f 7180 	mov.w	r1, #256	; 0x100
	uip_setnetmask(&gwaddr);
    6a04:	8059      	strh	r1, [r3, #2]
    6a06:	8018      	strh	r0, [r3, #0]
	xprintf("MultiSense [init MAC/IP values] %x:%x:%x:%x:%x:%x %d.%d.%d.%d\r\n", mac_raw[0], mac_raw[1], mac_raw[2], mac_raw[3], mac_raw[4], mac_raw[5], uip_ipaddr1(ipaddr), uip_ipaddr2(ipaddr), uip_ipaddr3(ipaddr), uip_ipaddr4(ipaddr));
    6a08:	78e3      	ldrb	r3, [r4, #3]
    6a0a:	930b      	str	r3, [sp, #44]	; 0x2c
    6a0c:	7923      	ldrb	r3, [r4, #4]
    6a0e:	7862      	ldrb	r2, [r4, #1]
	uip_ipaddr(&gwaddr, 192, 168, 0, 1);									// IP address of CPU Server on installation network is always "192.168.0.1". This address can NOT be held by any Multi-Sense node
    6a10:	8079      	strh	r1, [r7, #2]
	xprintf("MultiSense [init MAC/IP values] %x:%x:%x:%x:%x:%x %d.%d.%d.%d\r\n", mac_raw[0], mac_raw[1], mac_raw[2], mac_raw[3], mac_raw[4], mac_raw[5], uip_ipaddr1(ipaddr), uip_ipaddr2(ipaddr), uip_ipaddr3(ipaddr), uip_ipaddr4(ipaddr));
    6a12:	9309      	str	r3, [sp, #36]	; 0x24
    6a14:	7821      	ldrb	r1, [r4, #0]
    6a16:	7963      	ldrb	r3, [r4, #5]
    6a18:	4c42      	ldr	r4, [pc, #264]	; (6b24 <address_configure+0x1e4>)
    6a1a:	910d      	str	r1, [sp, #52]	; 0x34
    6a1c:	920c      	str	r2, [sp, #48]	; 0x30
    6a1e:	930a      	str	r3, [sp, #40]	; 0x28
    6a20:	47a0      	blx	r4
    6a22:	4680      	mov	r8, r0
    6a24:	8830      	ldrh	r0, [r6, #0]
    6a26:	47a0      	blx	r4
    6a28:	4681      	mov	r9, r0
    6a2a:	8870      	ldrh	r0, [r6, #2]
    6a2c:	47a0      	blx	r4
    6a2e:	4682      	mov	sl, r0
    6a30:	8870      	ldrh	r0, [r6, #2]
	main_socket = uip_udp_new(&gwaddr, htons(MAIN_UDPSOCKET));
    6a32:	4e3d      	ldr	r6, [pc, #244]	; (6b28 <address_configure+0x1e8>)
	xprintf("MultiSense [init MAC/IP values] %x:%x:%x:%x:%x:%x %d.%d.%d.%d\r\n", mac_raw[0], mac_raw[1], mac_raw[2], mac_raw[3], mac_raw[4], mac_raw[5], uip_ipaddr1(ipaddr), uip_ipaddr2(ipaddr), uip_ipaddr3(ipaddr), uip_ipaddr4(ipaddr));
    6a34:	47a0      	blx	r4
    6a36:	b2c0      	uxtb	r0, r0
    6a38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6a3a:	9006      	str	r0, [sp, #24]
    6a3c:	f3ca 200f 	ubfx	r0, sl, #8, #16
    6a40:	9005      	str	r0, [sp, #20]
    6a42:	9302      	str	r3, [sp, #8]
    6a44:	fa5f f089 	uxtb.w	r0, r9
    6a48:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6a4a:	9004      	str	r0, [sp, #16]
    6a4c:	9301      	str	r3, [sp, #4]
    6a4e:	f3c8 200f 	ubfx	r0, r8, #8, #16
    6a52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6a54:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    6a56:	990d      	ldr	r1, [sp, #52]	; 0x34
    6a58:	9003      	str	r0, [sp, #12]
    6a5a:	9300      	str	r3, [sp, #0]
    6a5c:	4833      	ldr	r0, [pc, #204]	; (6b2c <address_configure+0x1ec>)
    6a5e:	465b      	mov	r3, fp
    6a60:	47a8      	blx	r5
	main_socket = uip_udp_new(&gwaddr, htons(MAIN_UDPSOCKET));
    6a62:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
    6a66:	47a0      	blx	r4
    6a68:	4601      	mov	r1, r0
    6a6a:	4638      	mov	r0, r7
    6a6c:	47b0      	blx	r6
    6a6e:	4b30      	ldr	r3, [pc, #192]	; (6b30 <address_configure+0x1f0>)
    6a70:	4607      	mov	r7, r0
    6a72:	6018      	str	r0, [r3, #0]
	if (main_socket != NULL) {
    6a74:	2800      	cmp	r0, #0
    6a76:	d035      	beq.n	6ae4 <address_configure+0x1a4>
		uip_udp_bind(main_socket, htons(MAIN_UDPSOCKET));
    6a78:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
    6a7c:	47a0      	blx	r4
    6a7e:	80b8      	strh	r0, [r7, #4]
		xprintf("Main UDP socket created...\r\n");
    6a80:	482c      	ldr	r0, [pc, #176]	; (6b34 <address_configure+0x1f4>)
		xprintf("Main UDP socket ERROR!!!!!!!\r\n");
    6a82:	47a8      	blx	r5
	cardA_socket = uip_udp_new(&gwaddr, htons(CARDA_UDPSOCKET));
    6a84:	f640 70a1 	movw	r0, #4001	; 0xfa1
    6a88:	47a0      	blx	r4
    6a8a:	4601      	mov	r1, r0
    6a8c:	4822      	ldr	r0, [pc, #136]	; (6b18 <address_configure+0x1d8>)
    6a8e:	47b0      	blx	r6
    6a90:	4b29      	ldr	r3, [pc, #164]	; (6b38 <address_configure+0x1f8>)
    6a92:	4607      	mov	r7, r0
    6a94:	6018      	str	r0, [r3, #0]
	if (cardA_socket != NULL) {
    6a96:	b338      	cbz	r0, 6ae8 <address_configure+0x1a8>
		uip_udp_bind(cardA_socket, htons(CARDA_UDPSOCKET));
    6a98:	f640 70a1 	movw	r0, #4001	; 0xfa1
    6a9c:	47a0      	blx	r4
    6a9e:	80b8      	strh	r0, [r7, #4]
		xprintf("Card [A] UDP socket created...\r\n");
    6aa0:	4826      	ldr	r0, [pc, #152]	; (6b3c <address_configure+0x1fc>)
		xprintf("Card [A] UDP socket ERROR!!!!!!!\r\n");
    6aa2:	47a8      	blx	r5
	cardB_socket = uip_udp_new(&gwaddr, htons(CARDB_UDPSOCKET));
    6aa4:	f640 70a2 	movw	r0, #4002	; 0xfa2
    6aa8:	47a0      	blx	r4
    6aaa:	4601      	mov	r1, r0
    6aac:	481a      	ldr	r0, [pc, #104]	; (6b18 <address_configure+0x1d8>)
    6aae:	47b0      	blx	r6
    6ab0:	4b23      	ldr	r3, [pc, #140]	; (6b40 <address_configure+0x200>)
    6ab2:	4607      	mov	r7, r0
    6ab4:	6018      	str	r0, [r3, #0]
	if (cardB_socket != NULL) {
    6ab6:	b1c8      	cbz	r0, 6aec <address_configure+0x1ac>
		uip_udp_bind(cardB_socket, htons(CARDB_UDPSOCKET));
    6ab8:	f640 70a2 	movw	r0, #4002	; 0xfa2
    6abc:	47a0      	blx	r4
    6abe:	80b8      	strh	r0, [r7, #4]
		xprintf("Card [B] UDP socket created...\r\n");
    6ac0:	4820      	ldr	r0, [pc, #128]	; (6b44 <address_configure+0x204>)
		xprintf("Card [B] UDP socket ERROR!!!!!!!\r\n");
    6ac2:	47a8      	blx	r5
	ring_socket = uip_udp_new(&broadcast, htons(RING_MANAGEMENT_SOCKET));
    6ac4:	f640 70a3 	movw	r0, #4003	; 0xfa3
    6ac8:	47a0      	blx	r4
    6aca:	4601      	mov	r1, r0
    6acc:	481e      	ldr	r0, [pc, #120]	; (6b48 <address_configure+0x208>)
    6ace:	47b0      	blx	r6
    6ad0:	4b1e      	ldr	r3, [pc, #120]	; (6b4c <address_configure+0x20c>)
    6ad2:	4606      	mov	r6, r0
    6ad4:	6018      	str	r0, [r3, #0]
	if (ring_socket != NULL) {
    6ad6:	b158      	cbz	r0, 6af0 <address_configure+0x1b0>
		uip_udp_bind(ring_socket, htons(RING_MANAGEMENT_SOCKET));
    6ad8:	f640 70a3 	movw	r0, #4003	; 0xfa3
    6adc:	47a0      	blx	r4
    6ade:	80b0      	strh	r0, [r6, #4]
		xprintf("Ring Management UDP socket created...\r\n");
    6ae0:	481b      	ldr	r0, [pc, #108]	; (6b50 <address_configure+0x210>)
    6ae2:	e735      	b.n	6950 <address_configure+0x10>
		xprintf("Main UDP socket ERROR!!!!!!!\r\n");
    6ae4:	481b      	ldr	r0, [pc, #108]	; (6b54 <address_configure+0x214>)
    6ae6:	e7cc      	b.n	6a82 <address_configure+0x142>
		xprintf("Card [A] UDP socket ERROR!!!!!!!\r\n");
    6ae8:	481b      	ldr	r0, [pc, #108]	; (6b58 <address_configure+0x218>)
    6aea:	e7da      	b.n	6aa2 <address_configure+0x162>
		xprintf("Card [B] UDP socket ERROR!!!!!!!\r\n");
    6aec:	481b      	ldr	r0, [pc, #108]	; (6b5c <address_configure+0x21c>)
    6aee:	e7e8      	b.n	6ac2 <address_configure+0x182>
		xprintf("Ring Management UDP socket ERROR!!!!!!!\r\n");
    6af0:	481b      	ldr	r0, [pc, #108]	; (6b60 <address_configure+0x220>)
    6af2:	e72d      	b.n	6950 <address_configure+0x10>
    6af4:	20007f14 	.word	0x20007f14
    6af8:	00000395 	.word	0x00000395
    6afc:	0000d557 	.word	0x0000d557
    6b00:	2000852e 	.word	0x2000852e
    6b04:	20007f94 	.word	0x20007f94
    6b08:	200072c2 	.word	0x200072c2
    6b0c:	2000758c 	.word	0x2000758c
    6b10:	20007528 	.word	0x20007528
    6b14:	0000157d 	.word	0x0000157d
    6b18:	20008522 	.word	0x20008522
    6b1c:	2000861e 	.word	0x2000861e
    6b20:	2000861a 	.word	0x2000861a
    6b24:	0000a39d 	.word	0x0000a39d
    6b28:	000096d5 	.word	0x000096d5
    6b2c:	0000d59e 	.word	0x0000d59e
    6b30:	2000783c 	.word	0x2000783c
    6b34:	0000d5de 	.word	0x0000d5de
    6b38:	20007588 	.word	0x20007588
    6b3c:	0000d61a 	.word	0x0000d61a
    6b40:	20007f0c 	.word	0x20007f0c
    6b44:	0000d65e 	.word	0x0000d65e
    6b48:	20008542 	.word	0x20008542
    6b4c:	20008254 	.word	0x20008254
    6b50:	0000d6a2 	.word	0x0000d6a2
    6b54:	0000d5fb 	.word	0x0000d5fb
    6b58:	0000d63b 	.word	0x0000d63b
    6b5c:	0000d67f 	.word	0x0000d67f
    6b60:	0000d6ca 	.word	0x0000d6ca
    6b64:	20007f10 	.word	0x20007f10

00006b68 <gpio_init>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: define, set and configure the [GPIO] characteristics of the SAM CPU IC
// Returns:     Nothing
// *****************************************************************************************************************************************************************
void gpio_init(void)
{
    6b68:	b538      	push	{r3, r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6b6a:	4c70      	ldr	r4, [pc, #448]	; (6d2c <gpio_init+0x1c4>)
	gpio_set_pin_function(PB12_SPI_MOSI, GPIO_PIN_FUNCTION_OFF);
	gpio_set_pin_function(PB13_SPI_MISO, GPIO_PIN_FUNCTION_OFF);
	gpio_set_pin_function(PB15_SPI_CLK, GPIO_PIN_FUNCTION_OFF);

	/* Set all GPIO MultiSense pins to their respective INPUT or OUTPUT directions */
	gpio_set_pin_direction(PB00_KSZ_RESET, GPIO_DIRECTION_OUT);
    6b6c:	4d70      	ldr	r5, [pc, #448]	; (6d30 <gpio_init+0x1c8>)
    6b6e:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
	tmp &= ~PORT_PINCFG_PMUXEN;
    6b72:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6b76:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6b7a:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
	tmp &= ~PORT_PINCFG_PMUXEN;
    6b7e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6b82:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6b86:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
	tmp &= ~PORT_PINCFG_PMUXEN;
    6b8a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6b8e:	f884 30c3 	strb.w	r3, [r4, #195]	; 0xc3
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6b92:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
	tmp &= ~PORT_PINCFG_PMUXEN;
    6b96:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6b9a:	f884 30c4 	strb.w	r3, [r4, #196]	; 0xc4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6b9e:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
	tmp &= ~PORT_PINCFG_PMUXEN;
    6ba2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6ba6:	f884 30c5 	strb.w	r3, [r4, #197]	; 0xc5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6baa:	f894 30c6 	ldrb.w	r3, [r4, #198]	; 0xc6
	tmp &= ~PORT_PINCFG_PMUXEN;
    6bae:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6bb2:	f884 30c6 	strb.w	r3, [r4, #198]	; 0xc6
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6bb6:	f894 30c7 	ldrb.w	r3, [r4, #199]	; 0xc7
	tmp &= ~PORT_PINCFG_PMUXEN;
    6bba:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6bbe:	f884 30c7 	strb.w	r3, [r4, #199]	; 0xc7
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6bc2:	f894 3140 	ldrb.w	r3, [r4, #320]	; 0x140
	tmp &= ~PORT_PINCFG_PMUXEN;
    6bc6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6bca:	f884 3140 	strb.w	r3, [r4, #320]	; 0x140
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6bce:	f894 3141 	ldrb.w	r3, [r4, #321]	; 0x141
	tmp &= ~PORT_PINCFG_PMUXEN;
    6bd2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6bd6:	f884 3141 	strb.w	r3, [r4, #321]	; 0x141
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6bda:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
	tmp &= ~PORT_PINCFG_PMUXEN;
    6bde:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6be2:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6be6:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
	tmp &= ~PORT_PINCFG_PMUXEN;
    6bea:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6bee:	f884 30d9 	strb.w	r3, [r4, #217]	; 0xd9
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6bf2:	f894 315b 	ldrb.w	r3, [r4, #347]	; 0x15b
	tmp &= ~PORT_PINCFG_PMUXEN;
    6bf6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6bfa:	f884 315b 	strb.w	r3, [r4, #347]	; 0x15b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6bfe:	f894 315c 	ldrb.w	r3, [r4, #348]	; 0x15c
	tmp &= ~PORT_PINCFG_PMUXEN;
    6c02:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6c06:	f884 315c 	strb.w	r3, [r4, #348]	; 0x15c
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6c0a:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
	tmp &= ~PORT_PINCFG_PMUXEN;
    6c0e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6c12:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6c16:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
	tmp &= ~PORT_PINCFG_PMUXEN;
    6c1a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6c1e:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6c22:	f894 30cf 	ldrb.w	r3, [r4, #207]	; 0xcf
    6c26:	2102      	movs	r1, #2
	tmp &= ~PORT_PINCFG_PMUXEN;
    6c28:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    6c2c:	2020      	movs	r0, #32
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6c2e:	f884 30cf 	strb.w	r3, [r4, #207]	; 0xcf
    6c32:	47a8      	blx	r5
	gpio_set_pin_direction(PB02_TAMP_OP, GPIO_DIRECTION_IN);
    6c34:	2101      	movs	r1, #1
    6c36:	2022      	movs	r0, #34	; 0x22
    6c38:	47a8      	blx	r5
	gpio_set_pin_direction(PB03_LED_ETH, GPIO_DIRECTION_OUT);
    6c3a:	2102      	movs	r1, #2
    6c3c:	2023      	movs	r0, #35	; 0x23
    6c3e:	47a8      	blx	r5
	gpio_set_pin_direction(PB04_LED_PWR, GPIO_DIRECTION_OUT);
    6c40:	2102      	movs	r1, #2
    6c42:	2024      	movs	r0, #36	; 0x24
    6c44:	47a8      	blx	r5
	gpio_set_pin_direction(PB05_SPInCS_CARDA, GPIO_DIRECTION_OUT);
    6c46:	2102      	movs	r1, #2
    6c48:	2025      	movs	r0, #37	; 0x25
    6c4a:	47a8      	blx	r5
	gpio_set_pin_direction(PB06_SPInCS_CARDB, GPIO_DIRECTION_OUT);
    6c4c:	2102      	movs	r1, #2
    6c4e:	2026      	movs	r0, #38	; 0x26
    6c50:	47a8      	blx	r5
	gpio_set_pin_direction(PB07_SPInCS_KSZ8974, GPIO_DIRECTION_OUT);
    6c52:	2102      	movs	r1, #2
    6c54:	2027      	movs	r0, #39	; 0x27
    6c56:	47a8      	blx	r5
	gpio_set_pin_direction(PC00_CARDA_PRESENT, GPIO_DIRECTION_IN);
    6c58:	2101      	movs	r1, #1
    6c5a:	2040      	movs	r0, #64	; 0x40
    6c5c:	47a8      	blx	r5
	gpio_set_pin_direction(PC01_CARDB_PRESENT, GPIO_DIRECTION_IN);
    6c5e:	2101      	movs	r1, #1
    6c60:	2041      	movs	r0, #65	; 0x41
    6c62:	47a8      	blx	r5
	gpio_set_pin_direction(PB24_CARDB_I2C_SDA, GPIO_DIRECTION_IN);
    6c64:	2101      	movs	r1, #1
    6c66:	2038      	movs	r0, #56	; 0x38
    6c68:	47a8      	blx	r5
	gpio_set_pin_direction(PB25_CARDB_I2C_CLK, GPIO_DIRECTION_OUT);
    6c6a:	2102      	movs	r1, #2
    6c6c:	2039      	movs	r0, #57	; 0x39
    6c6e:	47a8      	blx	r5
	gpio_set_pin_direction(PC27_CARDA_I2C_SDA, GPIO_DIRECTION_IN);
    6c70:	2101      	movs	r1, #1
    6c72:	205b      	movs	r0, #91	; 0x5b
    6c74:	47a8      	blx	r5
	gpio_set_pin_direction(PC28_CARDA_I2C_CLK, GPIO_DIRECTION_OUT);
    6c76:	2102      	movs	r1, #2
    6c78:	205c      	movs	r0, #92	; 0x5c
    6c7a:	47a8      	blx	r5
	gpio_set_pin_direction(PB12_SPI_MOSI, GPIO_DIRECTION_OUT);
    6c7c:	2102      	movs	r1, #2
    6c7e:	202c      	movs	r0, #44	; 0x2c
    6c80:	47a8      	blx	r5
	gpio_set_pin_direction(PB13_SPI_MISO, GPIO_DIRECTION_IN);
    6c82:	2101      	movs	r1, #1
    6c84:	202d      	movs	r0, #45	; 0x2d
    6c86:	47a8      	blx	r5
	gpio_set_pin_direction(PB15_SPI_CLK, GPIO_DIRECTION_OUT);
    6c88:	2102      	movs	r1, #2
    6c8a:	202f      	movs	r0, #47	; 0x2f
    6c8c:	47a8      	blx	r5

	/* Set all GPIO MultiSense pins to their respective internal pull-up or pull-down configurations. Most of the GPIO has external PCB resistor pull-ups or pull-downs */
	gpio_set_pin_pull_mode(PB00_KSZ_RESET, GPIO_PULL_OFF);
    6c8e:	4d29      	ldr	r5, [pc, #164]	; (6d34 <gpio_init+0x1cc>)
    6c90:	2100      	movs	r1, #0
    6c92:	2020      	movs	r0, #32
    6c94:	47a8      	blx	r5
	gpio_set_pin_pull_mode(PB02_TAMP_OP, GPIO_PULL_OFF);
    6c96:	2100      	movs	r1, #0
    6c98:	2022      	movs	r0, #34	; 0x22
    6c9a:	47a8      	blx	r5
	gpio_set_pin_pull_mode(PB03_LED_ETH, GPIO_PULL_OFF);
    6c9c:	2100      	movs	r1, #0
    6c9e:	2023      	movs	r0, #35	; 0x23
    6ca0:	47a8      	blx	r5
	gpio_set_pin_pull_mode(PB04_LED_PWR, GPIO_PULL_OFF);
    6ca2:	2100      	movs	r1, #0
    6ca4:	2024      	movs	r0, #36	; 0x24
    6ca6:	47a8      	blx	r5
	gpio_set_pin_pull_mode(PB05_SPInCS_CARDA, GPIO_PULL_OFF);
    6ca8:	2100      	movs	r1, #0
    6caa:	2025      	movs	r0, #37	; 0x25
    6cac:	47a8      	blx	r5
	gpio_set_pin_pull_mode(PB06_SPInCS_CARDB, GPIO_PULL_OFF);
    6cae:	2100      	movs	r1, #0
    6cb0:	2026      	movs	r0, #38	; 0x26
    6cb2:	47a8      	blx	r5
	gpio_set_pin_pull_mode(PB07_SPInCS_KSZ8974, GPIO_PULL_OFF);
    6cb4:	2100      	movs	r1, #0
    6cb6:	2027      	movs	r0, #39	; 0x27
    6cb8:	47a8      	blx	r5
	gpio_set_pin_pull_mode(PC00_CARDA_PRESENT, GPIO_PULL_UP);
    6cba:	2101      	movs	r1, #1
    6cbc:	2040      	movs	r0, #64	; 0x40
    6cbe:	47a8      	blx	r5
	gpio_set_pin_pull_mode(PC01_CARDB_PRESENT, GPIO_PULL_UP);
    6cc0:	2101      	movs	r1, #1
    6cc2:	2041      	movs	r0, #65	; 0x41
    6cc4:	47a8      	blx	r5
	gpio_set_pin_pull_mode(PB24_CARDB_I2C_SDA, GPIO_PULL_OFF);
    6cc6:	2100      	movs	r1, #0
    6cc8:	2038      	movs	r0, #56	; 0x38
    6cca:	47a8      	blx	r5
	gpio_set_pin_pull_mode(PB25_CARDB_I2C_CLK, GPIO_PULL_OFF);
    6ccc:	2100      	movs	r1, #0
    6cce:	2039      	movs	r0, #57	; 0x39
    6cd0:	47a8      	blx	r5
	gpio_set_pin_pull_mode(PC27_CARDA_I2C_SDA, GPIO_PULL_OFF);
    6cd2:	2100      	movs	r1, #0
    6cd4:	205b      	movs	r0, #91	; 0x5b
    6cd6:	47a8      	blx	r5
	gpio_set_pin_pull_mode(PC28_CARDA_I2C_CLK, GPIO_PULL_OFF);
    6cd8:	2100      	movs	r1, #0
    6cda:	205c      	movs	r0, #92	; 0x5c
    6cdc:	47a8      	blx	r5
	gpio_set_pin_pull_mode(PB13_SPI_MISO, GPIO_PULL_OFF);
    6cde:	2100      	movs	r1, #0
    6ce0:	202d      	movs	r0, #45	; 0x2d
    6ce2:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6ce4:	2308      	movs	r3, #8
    6ce6:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    6cea:	2310      	movs	r3, #16
    6cec:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6cf0:	2320      	movs	r3, #32
    6cf2:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    6cf6:	2340      	movs	r3, #64	; 0x40
    6cf8:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    6cfc:	2380      	movs	r3, #128	; 0x80
    6cfe:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6d02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    6d06:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    6d0a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    6d0e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6d12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    6d16:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    6d1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    6d1e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    6d22:	2301      	movs	r3, #1
    6d24:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    6d28:	bd38      	pop	{r3, r4, r5, pc}
    6d2a:	bf00      	nop
    6d2c:	41008000 	.word	0x41008000
    6d30:	00006141 	.word	0x00006141
    6d34:	000061b9 	.word	0x000061b9

00006d38 <watchdog_init>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: setup, initialize and start the watchdog code timer
// Returns:     Nothing
// *****************************************************************************************************************************************************************
void watchdog_init(void)
{
    6d38:	b570      	push	{r4, r5, r6, lr}
	ASSERT(wdt && wdt->dev.hw);
    6d3a:	4c0d      	ldr	r4, [pc, #52]	; (6d70 <watchdog_init+0x38>)
    6d3c:	4e0d      	ldr	r6, [pc, #52]	; (6d74 <watchdog_init+0x3c>)
    6d3e:	6820      	ldr	r0, [r4, #0]
    6d40:	4d0d      	ldr	r5, [pc, #52]	; (6d78 <watchdog_init+0x40>)
    6d42:	3000      	adds	r0, #0
    6d44:	bf18      	it	ne
    6d46:	2001      	movne	r0, #1
    6d48:	4631      	mov	r1, r6
    6d4a:	226f      	movs	r2, #111	; 0x6f
    6d4c:	47a8      	blx	r5
	return _wdt_set_timeout_period(&wdt->dev, clk_rate, timeout_period);
    6d4e:	4b0b      	ldr	r3, [pc, #44]	; (6d7c <watchdog_init+0x44>)
    6d50:	2219      	movs	r2, #25
    6d52:	2164      	movs	r1, #100	; 0x64
    6d54:	4620      	mov	r0, r4
    6d56:	4798      	blx	r3
	ASSERT(wdt && wdt->dev.hw);
    6d58:	6820      	ldr	r0, [r4, #0]
    6d5a:	3000      	adds	r0, #0
    6d5c:	4631      	mov	r1, r6
    6d5e:	bf18      	it	ne
    6d60:	2001      	movne	r0, #1
    6d62:	228c      	movs	r2, #140	; 0x8c
    6d64:	47a8      	blx	r5
	return _wdt_enable(&wdt->dev);
    6d66:	4620      	mov	r0, r4
    6d68:	4b05      	ldr	r3, [pc, #20]	; (6d80 <watchdog_init+0x48>)
	/* Set the main watchdog to 4 seconds timeout */
	wdt_set_timeout_period(&WDT_0, 100, 25);
	
	/* Turn it on */
	wdt_enable(&WDT_0);
}
    6d6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6d6e:	4718      	bx	r3
    6d70:	20007470 	.word	0x20007470
    6d74:	0000bff9 	.word	0x0000bff9
    6d78:	00001fdd 	.word	0x00001fdd
    6d7c:	00004229 	.word	0x00004229
    6d80:	00004311 	.word	0x00004311

00006d84 <var_init>:
// Returns:     Nothing
// *****************************************************************************************************************************************************************
void var_init(void)
{
	/* Set all the main global variables to zero to initialize the states before nay further code executes that relies on the initialization process at the start */
	tick_counter = 0;
    6d84:	4b54      	ldr	r3, [pc, #336]	; (6ed8 <var_init+0x154>)
	cardA_type = CARD_NOTFITTED;
	cardB_type = CARD_NOTFITTED;
	ring_broken = RING_NOTCONFIGURED;
	
	/* Also, read out the non-volatile EEprom configuration data */
	if (EEprom_settings(settings_buffer, SETTING_STRUCTURE_SIZE, 0) != ERR_NONE) {
    6d86:	4855      	ldr	r0, [pc, #340]	; (6edc <var_init+0x158>)
	tick_counter = 0;
    6d88:	2200      	movs	r2, #0
{
    6d8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	tick_counter = 0;
    6d8e:	601a      	str	r2, [r3, #0]
	readenvironment = 0;
    6d90:	4b53      	ldr	r3, [pc, #332]	; (6ee0 <var_init+0x15c>)
	if (EEprom_settings(settings_buffer, SETTING_STRUCTURE_SIZE, 0) != ERR_NONE) {
    6d92:	4f54      	ldr	r7, [pc, #336]	; (6ee4 <var_init+0x160>)
	readenvironment = 0;
    6d94:	701a      	strb	r2, [r3, #0]
	arp_check = 0;
    6d96:	4b54      	ldr	r3, [pc, #336]	; (6ee8 <var_init+0x164>)
    6d98:	701a      	strb	r2, [r3, #0]
	ip_periodic_check = 0;
    6d9a:	4b54      	ldr	r3, [pc, #336]	; (6eec <var_init+0x168>)
    6d9c:	701a      	strb	r2, [r3, #0]
	ring_timer = 0;
    6d9e:	4b54      	ldr	r3, [pc, #336]	; (6ef0 <var_init+0x16c>)
    6da0:	701a      	strb	r2, [r3, #0]
	ring = 0;
    6da2:	4b54      	ldr	r3, [pc, #336]	; (6ef4 <var_init+0x170>)
    6da4:	701a      	strb	r2, [r3, #0]
	sentA = 0;
    6da6:	4b54      	ldr	r3, [pc, #336]	; (6ef8 <var_init+0x174>)
    6da8:	701a      	strb	r2, [r3, #0]
	sentB = 0;
    6daa:	4b54      	ldr	r3, [pc, #336]	; (6efc <var_init+0x178>)
    6dac:	701a      	strb	r2, [r3, #0]
	send_relearn_udp = 0;
    6dae:	4b54      	ldr	r3, [pc, #336]	; (6f00 <var_init+0x17c>)
    6db0:	701a      	strb	r2, [r3, #0]
	refresh_gain = 0;
    6db2:	4b54      	ldr	r3, [pc, #336]	; (6f04 <var_init+0x180>)
    6db4:	701a      	strb	r2, [r3, #0]
	cardA_old = 0;
    6db6:	4b54      	ldr	r3, [pc, #336]	; (6f08 <var_init+0x184>)
    6db8:	701a      	strb	r2, [r3, #0]
	cardB_old = 0;
    6dba:	4b54      	ldr	r3, [pc, #336]	; (6f0c <var_init+0x188>)
    6dbc:	701a      	strb	r2, [r3, #0]
	card_sampleindex = 0;
    6dbe:	4b54      	ldr	r3, [pc, #336]	; (6f10 <var_init+0x18c>)
    6dc0:	601a      	str	r2, [r3, #0]
	stormstate = 0;
    6dc2:	4b54      	ldr	r3, [pc, #336]	; (6f14 <var_init+0x190>)
    6dc4:	701a      	strb	r2, [r3, #0]
	link_port1 = 0;
    6dc6:	4b54      	ldr	r3, [pc, #336]	; (6f18 <var_init+0x194>)
    6dc8:	701a      	strb	r2, [r3, #0]
	link_port2 = 0;
    6dca:	4b54      	ldr	r3, [pc, #336]	; (6f1c <var_init+0x198>)
    6dcc:	701a      	strb	r2, [r3, #0]
	link_port3 = 0;
    6dce:	4b54      	ldr	r3, [pc, #336]	; (6f20 <var_init+0x19c>)
    6dd0:	701a      	strb	r2, [r3, #0]
	old_tamper = 0;
    6dd2:	4b54      	ldr	r3, [pc, #336]	; (6f24 <var_init+0x1a0>)
    6dd4:	701a      	strb	r2, [r3, #0]
	old_link_port1 = 0;
    6dd6:	4b54      	ldr	r3, [pc, #336]	; (6f28 <var_init+0x1a4>)
    6dd8:	701a      	strb	r2, [r3, #0]
	old_link_port2 = 0;
    6dda:	4b54      	ldr	r3, [pc, #336]	; (6f2c <var_init+0x1a8>)
    6ddc:	701a      	strb	r2, [r3, #0]
	old_link_port3 = 0;
    6dde:	4b54      	ldr	r3, [pc, #336]	; (6f30 <var_init+0x1ac>)
    6de0:	701a      	strb	r2, [r3, #0]
	readdata_water1 = 0;
    6de2:	4b54      	ldr	r3, [pc, #336]	; (6f34 <var_init+0x1b0>)
    6de4:	701a      	strb	r2, [r3, #0]
	readdata_water2 = 0;
    6de6:	4b54      	ldr	r3, [pc, #336]	; (6f38 <var_init+0x1b4>)
    6de8:	701a      	strb	r2, [r3, #0]
	highvoltage = 0;
    6dea:	4b54      	ldr	r3, [pc, #336]	; (6f3c <var_init+0x1b8>)
    6dec:	701a      	strb	r2, [r3, #0]
	read_hardware_index = 0;
    6dee:	4b54      	ldr	r3, [pc, #336]	; (6f40 <var_init+0x1bc>)
    6df0:	701a      	strb	r2, [r3, #0]
	looprate = 0;
    6df2:	4b54      	ldr	r3, [pc, #336]	; (6f44 <var_init+0x1c0>)
    6df4:	601a      	str	r2, [r3, #0]
	loopcount = 0;
    6df6:	4b54      	ldr	r3, [pc, #336]	; (6f48 <var_init+0x1c4>)
    6df8:	601a      	str	r2, [r3, #0]
	miniA_chan = 0;
    6dfa:	4b54      	ldr	r3, [pc, #336]	; (6f4c <var_init+0x1c8>)
    6dfc:	701a      	strb	r2, [r3, #0]
	miniB_chan = 0;
    6dfe:	4b54      	ldr	r3, [pc, #336]	; (6f50 <var_init+0x1cc>)
    6e00:	701a      	strb	r2, [r3, #0]
	miniIO_A1_adcH = 0;
    6e02:	4b54      	ldr	r3, [pc, #336]	; (6f54 <var_init+0x1d0>)
    6e04:	701a      	strb	r2, [r3, #0]
	miniIO_A1_adcL = 0;
    6e06:	4b54      	ldr	r3, [pc, #336]	; (6f58 <var_init+0x1d4>)
    6e08:	701a      	strb	r2, [r3, #0]
	miniIO_A0_adcH = 0;
    6e0a:	4b54      	ldr	r3, [pc, #336]	; (6f5c <var_init+0x1d8>)
    6e0c:	701a      	strb	r2, [r3, #0]
	miniIO_A0_adcL = 0;
    6e0e:	4b54      	ldr	r3, [pc, #336]	; (6f60 <var_init+0x1dc>)
    6e10:	701a      	strb	r2, [r3, #0]
	miniIO_A_relay = 0;
    6e12:	4b54      	ldr	r3, [pc, #336]	; (6f64 <var_init+0x1e0>)
    6e14:	701a      	strb	r2, [r3, #0]
	miniIO_A_inputs = 0;
    6e16:	4b54      	ldr	r3, [pc, #336]	; (6f68 <var_init+0x1e4>)
    6e18:	701a      	strb	r2, [r3, #0]
	miniIO_B1_adcH = 0;
    6e1a:	4b54      	ldr	r3, [pc, #336]	; (6f6c <var_init+0x1e8>)
    6e1c:	701a      	strb	r2, [r3, #0]
	miniIO_B1_adcL = 0;
    6e1e:	4b54      	ldr	r3, [pc, #336]	; (6f70 <var_init+0x1ec>)
    6e20:	701a      	strb	r2, [r3, #0]
	miniIO_B0_adcH = 0;
    6e22:	4b54      	ldr	r3, [pc, #336]	; (6f74 <var_init+0x1f0>)
    6e24:	701a      	strb	r2, [r3, #0]
	miniIO_B0_adcL = 0;
    6e26:	4b54      	ldr	r3, [pc, #336]	; (6f78 <var_init+0x1f4>)
    6e28:	701a      	strb	r2, [r3, #0]
	miniIO_B_relay = 0;
    6e2a:	4b54      	ldr	r3, [pc, #336]	; (6f7c <var_init+0x1f8>)
    6e2c:	701a      	strb	r2, [r3, #0]
	miniIO_B_inputs = 0;
    6e2e:	4b54      	ldr	r3, [pc, #336]	; (6f80 <var_init+0x1fc>)
    6e30:	701a      	strb	r2, [r3, #0]
	cardA_type = CARD_NOTFITTED;
    6e32:	4b54      	ldr	r3, [pc, #336]	; (6f84 <var_init+0x200>)
    6e34:	701a      	strb	r2, [r3, #0]
	cardB_type = CARD_NOTFITTED;
    6e36:	4b54      	ldr	r3, [pc, #336]	; (6f88 <var_init+0x204>)
    6e38:	701a      	strb	r2, [r3, #0]
	ring_broken = RING_NOTCONFIGURED;
    6e3a:	4b54      	ldr	r3, [pc, #336]	; (6f8c <var_init+0x208>)
    6e3c:	2102      	movs	r1, #2
    6e3e:	7019      	strb	r1, [r3, #0]
	if (EEprom_settings(settings_buffer, SETTING_STRUCTURE_SIZE, 0) != ERR_NONE) {
    6e40:	2180      	movs	r1, #128	; 0x80
    6e42:	47b8      	blx	r7
    6e44:	b110      	cbz	r0, 6e4c <var_init+0xc8>
		xprintf("MultiSense [configuration ERROR READING]\r\n");
    6e46:	4852      	ldr	r0, [pc, #328]	; (6f90 <var_init+0x20c>)
    6e48:	4b52      	ldr	r3, [pc, #328]	; (6f94 <var_init+0x210>)
    6e4a:	4798      	blx	r3
	}
	
	/* Check if the configuration data is invalid and needs defaulting */
	if ((((CONFIG *)&settings_buffer)->pattern1 != CONFIG_IDENTIFIER1) || (((CONFIG *)&settings_buffer)->pattern2 != CONFIG_IDENTIFIER2)) {
    6e4c:	4b23      	ldr	r3, [pc, #140]	; (6edc <var_init+0x158>)
    6e4e:	4a52      	ldr	r2, [pc, #328]	; (6f98 <var_init+0x214>)
    6e50:	6819      	ldr	r1, [r3, #0]
    6e52:	4291      	cmp	r1, r2
    6e54:	461c      	mov	r4, r3
    6e56:	d103      	bne.n	6e60 <var_init+0xdc>
    6e58:	685a      	ldr	r2, [r3, #4]
    6e5a:	4b50      	ldr	r3, [pc, #320]	; (6f9c <var_init+0x218>)
    6e5c:	429a      	cmp	r2, r3
    6e5e:	d039      	beq.n	6ed4 <var_init+0x150>
		xprintf("MultiSense [configuration INVALID]\r\n");
    6e60:	484f      	ldr	r0, [pc, #316]	; (6fa0 <var_init+0x21c>)
    6e62:	4e4c      	ldr	r6, [pc, #304]	; (6f94 <var_init+0x210>)
    6e64:	47b0      	blx	r6
		
		/* Re-write default values ready for write-back */
		((CONFIG *)&settings_buffer)->pattern1 = CONFIG_IDENTIFIER1;
    6e66:	2376      	movs	r3, #118	; 0x76
    6e68:	7023      	strb	r3, [r4, #0]
    6e6a:	2336      	movs	r3, #54	; 0x36
    6e6c:	7063      	strb	r3, [r4, #1]
    6e6e:	2345      	movs	r3, #69	; 0x45
    6e70:	70a3      	strb	r3, [r4, #2]
    6e72:	f06f 0301 	mvn.w	r3, #1
    6e76:	70e3      	strb	r3, [r4, #3]
		((CONFIG *)&settings_buffer)->pattern2 = CONFIG_IDENTIFIER2;
    6e78:	f06f 0343 	mvn.w	r3, #67	; 0x43
    6e7c:	7123      	strb	r3, [r4, #4]
    6e7e:	f06f 0315 	mvn.w	r3, #21
    6e82:	7163      	strb	r3, [r4, #5]
    6e84:	237d      	movs	r3, #125	; 0x7d
    6e86:	71a3      	strb	r3, [r4, #6]
    6e88:	f06f 036c 	mvn.w	r3, #108	; 0x6c
		strncpy((char *__restrict)(((CONFIG *)&settings_buffer)->name), "MULTISENSE NEEDS CONFIGURING...", sizeof(((CONFIG *)&settings_buffer)->name));
    6e8c:	2221      	movs	r2, #33	; 0x21
    6e8e:	4945      	ldr	r1, [pc, #276]	; (6fa4 <var_init+0x220>)
		((CONFIG *)&settings_buffer)->pattern2 = CONFIG_IDENTIFIER2;
    6e90:	71e3      	strb	r3, [r4, #7]
		strncpy((char *__restrict)(((CONFIG *)&settings_buffer)->name), "MULTISENSE NEEDS CONFIGURING...", sizeof(((CONFIG *)&settings_buffer)->name));
    6e92:	4845      	ldr	r0, [pc, #276]	; (6fa8 <var_init+0x224>)
    6e94:	4b45      	ldr	r3, [pc, #276]	; (6fac <var_init+0x228>)
    6e96:	4798      	blx	r3
		((CONFIG *)&settings_buffer)->pattern1 = CONFIG_IDENTIFIER1;
    6e98:	2500      	movs	r5, #0
		((CONFIG *)&settings_buffer)->ID = 0x00000000;
		((CONFIG *)&settings_buffer)->gain_cardA = 0xFF;
    6e9a:	23ff      	movs	r3, #255	; 0xff
		((CONFIG *)&settings_buffer)->gain_cardB = 0xFF;
		((CONFIG *)&settings_buffer)->loop_basestation = 0;
		
		xprintf("MultiSense [configuration FORMATTED]\r\n");
    6e9c:	4844      	ldr	r0, [pc, #272]	; (6fb0 <var_init+0x22c>)
		((CONFIG *)&settings_buffer)->ID = 0x00000000;
    6e9e:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
    6ea2:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
    6ea6:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
    6eaa:	f884 502f 	strb.w	r5, [r4, #47]	; 0x2f
		((CONFIG *)&settings_buffer)->gain_cardA = 0xFF;
    6eae:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
		((CONFIG *)&settings_buffer)->gain_cardB = 0xFF;
    6eb2:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
		((CONFIG *)&settings_buffer)->loop_basestation = 0;
    6eb6:	f884 502b 	strb.w	r5, [r4, #43]	; 0x2b
		xprintf("MultiSense [configuration FORMATTED]\r\n");
    6eba:	47b0      	blx	r6

		/* Write these values back to the EEprom storage area */
		if (EEprom_settings(settings_buffer, SETTING_STRUCTURE_SIZE, 1) != ERR_NONE) {
    6ebc:	2201      	movs	r2, #1
    6ebe:	2180      	movs	r1, #128	; 0x80
    6ec0:	4806      	ldr	r0, [pc, #24]	; (6edc <var_init+0x158>)
    6ec2:	47b8      	blx	r7
    6ec4:	b120      	cbz	r0, 6ed0 <var_init+0x14c>
			xprintf("MultiSense [configuration ERROR WRITING]\r\n");
    6ec6:	483b      	ldr	r0, [pc, #236]	; (6fb4 <var_init+0x230>)
		} else {
			xprintf("MultiSense [configuration WRITTEN]\r\n");
    6ec8:	4633      	mov	r3, r6
		}
	}
    6eca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			xprintf("MultiSense [configuration WRITTEN]\r\n");
    6ece:	4718      	bx	r3
    6ed0:	4839      	ldr	r0, [pc, #228]	; (6fb8 <var_init+0x234>)
    6ed2:	e7f9      	b.n	6ec8 <var_init+0x144>
    6ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6ed8:	20008538 	.word	0x20008538
    6edc:	20007f14 	.word	0x20007f14
    6ee0:	20008250 	.word	0x20008250
    6ee4:	0000b1a5 	.word	0x0000b1a5
    6ee8:	20007fa3 	.word	0x20007fa3
    6eec:	20007852 	.word	0x20007852
    6ef0:	2000825d 	.word	0x2000825d
    6ef4:	20008536 	.word	0x20008536
    6ef8:	20007fa1 	.word	0x20007fa1
    6efc:	2000757e 	.word	0x2000757e
    6f00:	20008259 	.word	0x20008259
    6f04:	2000853d 	.word	0x2000853d
    6f08:	20007573 	.word	0x20007573
    6f0c:	20007841 	.word	0x20007841
    6f10:	20008528 	.word	0x20008528
    6f14:	2000853c 	.word	0x2000853c
    6f18:	20007571 	.word	0x20007571
    6f1c:	20008274 	.word	0x20008274
    6f20:	20007575 	.word	0x20007575
    6f24:	2000852c 	.word	0x2000852c
    6f28:	2000757f 	.word	0x2000757f
    6f2c:	20007570 	.word	0x20007570
    6f30:	2000825c 	.word	0x2000825c
    6f34:	2000853e 	.word	0x2000853e
    6f38:	2000852d 	.word	0x2000852d
    6f3c:	20008535 	.word	0x20008535
    6f40:	20007579 	.word	0x20007579
    6f44:	20008548 	.word	0x20008548
    6f48:	20007580 	.word	0x20007580
    6f4c:	20007576 	.word	0x20007576
    6f50:	2000825a 	.word	0x2000825a
    6f54:	2000825b 	.word	0x2000825b
    6f58:	20007f9a 	.word	0x20007f9a
    6f5c:	20007c55 	.word	0x20007c55
    6f60:	20008534 	.word	0x20008534
    6f64:	20007f9c 	.word	0x20007f9c
    6f68:	20007574 	.word	0x20007574
    6f6c:	20007584 	.word	0x20007584
    6f70:	2000853f 	.word	0x2000853f
    6f74:	20007fa2 	.word	0x20007fa2
    6f78:	20007c56 	.word	0x20007c56
    6f7c:	20007f04 	.word	0x20007f04
    6f80:	20008258 	.word	0x20008258
    6f84:	20007c57 	.word	0x20007c57
    6f88:	20008540 	.word	0x20008540
    6f8c:	20008251 	.word	0x20008251
    6f90:	0000d6f4 	.word	0x0000d6f4
    6f94:	00000395 	.word	0x00000395
    6f98:	fe453676 	.word	0xfe453676
    6f9c:	937deabc 	.word	0x937deabc
    6fa0:	0000d71f 	.word	0x0000d71f
    6fa4:	0000d744 	.word	0x0000d744
    6fa8:	20007f1c 	.word	0x20007f1c
    6fac:	0000b3bd 	.word	0x0000b3bd
    6fb0:	0000d764 	.word	0x0000d764
    6fb4:	0000d78b 	.word	0x0000d78b
    6fb8:	0000d7b6 	.word	0x0000d7b6

00006fbc <rx_callb>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: INTERCEPT HOOK STUB for <UART_1>
// Returns:     Nothing (NULL)
// *****************************************************************************************************************************************************************
void rx_callb(const struct usart_async_descriptor *const descr)
{
    6fbc:	4770      	bx	lr
	...

00006fc0 <bash_spi_transfer.constprop.0>:
static void inline bash_spi_transfer(unsigned char *tx, unsigned char *rx, int size)
    6fc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6fc4:	4e21      	ldr	r6, [pc, #132]	; (704c <bash_spi_transfer.constprop.0+0x8c>)
			gpio_set_pin_level(PB12_SPI_MOSI, (tx[count] & (1 << (loop - 1))) ? 1 : 0);
    6fc6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 7058 <bash_spi_transfer.constprop.0+0x98>
    6fca:	4d21      	ldr	r5, [pc, #132]	; (7050 <bash_spi_transfer.constprop.0+0x90>)
	CRITICAL_SECTION_ENTER();
    6fcc:	f8df a08c 	ldr.w	sl, [pc, #140]	; 705c <bash_spi_transfer.constprop.0+0x9c>
	for (count = 0; count < size; count++) {
    6fd0:	f04f 0800 	mov.w	r8, #0
		rx[count] = 0;
    6fd4:	2300      	movs	r3, #0
    6fd6:	7033      	strb	r3, [r6, #0]
		for (loop = 8; loop; loop--) {
    6fd8:	2708      	movs	r7, #8
			gpio_set_pin_level(PB12_SPI_MOSI, (tx[count] & (1 << (loop - 1))) ? 1 : 0);
    6fda:	eb08 0b09 	add.w	fp, r8, r9
    6fde:	f89b 3000 	ldrb.w	r3, [fp]
    6fe2:	3f01      	subs	r7, #1
    6fe4:	413b      	asrs	r3, r7
	if (level) {
    6fe6:	f013 0f01 	tst.w	r3, #1
    6fea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    6fee:	bf14      	ite	ne
    6ff0:	f8c5 3098 	strne.w	r3, [r5, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6ff4:	f8c5 3094 	streq.w	r3, [r5, #148]	; 0x94
    6ff8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    6ffc:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
	CRITICAL_SECTION_ENTER();
    7000:	a801      	add	r0, sp, #4
    7002:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
    7006:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    700a:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
    700e:	47d0      	blx	sl
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    7010:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    7014:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    7018:	f8d5 4090 	ldr.w	r4, [r5, #144]	; 0x90
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    701c:	405c      	eors	r4, r3
    701e:	4014      	ands	r4, r2
    7020:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    7022:	a801      	add	r0, sp, #4
    7024:	4b0b      	ldr	r3, [pc, #44]	; (7054 <bash_spi_transfer.constprop.0+0x94>)
    7026:	4798      	blx	r3
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    7028:	f3c4 3440 	ubfx	r4, r4, #13, #1
			rx[count] |= (gpio_get_pin_level(PB13_SPI_MISO) << (loop - 1));
    702c:	7833      	ldrb	r3, [r6, #0]
    702e:	40bc      	lsls	r4, r7
    7030:	431c      	orrs	r4, r3
    7032:	7034      	strb	r4, [r6, #0]
		for (loop = 8; loop; loop--) {
    7034:	2f00      	cmp	r7, #0
    7036:	d1d2      	bne.n	6fde <bash_spi_transfer.constprop.0+0x1e>
	for (count = 0; count < size; count++) {
    7038:	f108 0801 	add.w	r8, r8, #1
    703c:	f1b8 0f02 	cmp.w	r8, #2
    7040:	f106 0601 	add.w	r6, r6, #1
    7044:	d1c6      	bne.n	6fd4 <bash_spi_transfer.constprop.0+0x14>
}
    7046:	b003      	add	sp, #12
    7048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    704c:	2000757c 	.word	0x2000757c
    7050:	41008000 	.word	0x41008000
    7054:	000011b3 	.word	0x000011b3
    7058:	20007853 	.word	0x20007853
    705c:	000011a5 	.word	0x000011a5

00007060 <tx_callb>:
    7060:	4770      	bx	lr
	...

00007064 <TIMER_0_task1_cb>:
{
    7064:	b538      	push	{r3, r4, r5, lr}
	tick_counter++;
    7066:	4c36      	ldr	r4, [pc, #216]	; (7140 <TIMER_0_task1_cb+0xdc>)
    7068:	6821      	ldr	r1, [r4, #0]
	if (!(tick_counter % 5)) {
    706a:	2305      	movs	r3, #5
	tick_counter++;
    706c:	3101      	adds	r1, #1
	if (!(tick_counter % 5)) {
    706e:	fbb1 f3f3 	udiv	r3, r1, r3
    7072:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7076:	4299      	cmp	r1, r3
	tick_counter++;
    7078:	6021      	str	r1, [r4, #0]
	if (!(tick_counter % 5)) {
    707a:	d10f      	bne.n	709c <TIMER_0_task1_cb+0x38>
	ASSERT(wdt && wdt->dev.hw);
    707c:	4d31      	ldr	r5, [pc, #196]	; (7144 <TIMER_0_task1_cb+0xe0>)
		readenvironment = 1;
    707e:	4b32      	ldr	r3, [pc, #200]	; (7148 <TIMER_0_task1_cb+0xe4>)
    7080:	6828      	ldr	r0, [r5, #0]
    7082:	4932      	ldr	r1, [pc, #200]	; (714c <TIMER_0_task1_cb+0xe8>)
    7084:	3000      	adds	r0, #0
    7086:	f04f 0201 	mov.w	r2, #1
    708a:	701a      	strb	r2, [r3, #0]
    708c:	bf18      	it	ne
    708e:	2001      	movne	r0, #1
    7090:	4b2f      	ldr	r3, [pc, #188]	; (7150 <TIMER_0_task1_cb+0xec>)
    7092:	22a9      	movs	r2, #169	; 0xa9
    7094:	4798      	blx	r3
	return _wdt_feed(&wdt->dev);
    7096:	4628      	mov	r0, r5
    7098:	4b2e      	ldr	r3, [pc, #184]	; (7154 <TIMER_0_task1_cb+0xf0>)
    709a:	4798      	blx	r3
	ip_periodic_check = 1;
    709c:	4b2e      	ldr	r3, [pc, #184]	; (7158 <TIMER_0_task1_cb+0xf4>)
    709e:	2101      	movs	r1, #1
    70a0:	7019      	strb	r1, [r3, #0]
	if (!(tick_counter % 25)) {
    70a2:	6823      	ldr	r3, [r4, #0]
    70a4:	2019      	movs	r0, #25
    70a6:	fbb3 f2f0 	udiv	r2, r3, r0
    70aa:	fb00 3212 	mls	r2, r0, r2, r3
    70ae:	b90a      	cbnz	r2, 70b4 <TIMER_0_task1_cb+0x50>
		arp_check = 1;
    70b0:	4a2a      	ldr	r2, [pc, #168]	; (715c <TIMER_0_task1_cb+0xf8>)
    70b2:	7011      	strb	r1, [r2, #0]
	if (!(tick_counter % 5)) {
    70b4:	2205      	movs	r2, #5
    70b6:	fbb3 f2f2 	udiv	r2, r3, r2
    70ba:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    70be:	4293      	cmp	r3, r2
		ring_timer = 1;
    70c0:	bf02      	ittt	eq
    70c2:	4a27      	ldreq	r2, [pc, #156]	; (7160 <TIMER_0_task1_cb+0xfc>)
    70c4:	2101      	moveq	r1, #1
    70c6:	7011      	strbeq	r1, [r2, #0]
	if (!(tick_counter % 10)) {
    70c8:	210a      	movs	r1, #10
    70ca:	fbb3 f2f1 	udiv	r2, r3, r1
    70ce:	fb01 3212 	mls	r2, r1, r2, r3
    70d2:	b922      	cbnz	r2, 70de <TIMER_0_task1_cb+0x7a>
		looprate = loopcount;
    70d4:	4923      	ldr	r1, [pc, #140]	; (7164 <TIMER_0_task1_cb+0x100>)
    70d6:	4824      	ldr	r0, [pc, #144]	; (7168 <TIMER_0_task1_cb+0x104>)
    70d8:	680c      	ldr	r4, [r1, #0]
    70da:	6004      	str	r4, [r0, #0]
		loopcount = 0;
    70dc:	600a      	str	r2, [r1, #0]
	if ((tamper) && (init_done) && (((CONFIG *)&settings_buffer)->ID > 0x00000000)) {
    70de:	4a23      	ldr	r2, [pc, #140]	; (716c <TIMER_0_task1_cb+0x108>)
    70e0:	7812      	ldrb	r2, [r2, #0]
    70e2:	b33a      	cbz	r2, 7134 <TIMER_0_task1_cb+0xd0>
    70e4:	4a22      	ldr	r2, [pc, #136]	; (7170 <TIMER_0_task1_cb+0x10c>)
    70e6:	7812      	ldrb	r2, [r2, #0]
    70e8:	b322      	cbz	r2, 7134 <TIMER_0_task1_cb+0xd0>
    70ea:	4a22      	ldr	r2, [pc, #136]	; (7174 <TIMER_0_task1_cb+0x110>)
    70ec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    70ee:	b30a      	cbz	r2, 7134 <TIMER_0_task1_cb+0xd0>
		if ((link_port1 + link_port2 + link_port3) == 0) {
    70f0:	4a21      	ldr	r2, [pc, #132]	; (7178 <TIMER_0_task1_cb+0x114>)
    70f2:	4922      	ldr	r1, [pc, #136]	; (717c <TIMER_0_task1_cb+0x118>)
    70f4:	7812      	ldrb	r2, [r2, #0]
    70f6:	7809      	ldrb	r1, [r1, #0]
    70f8:	440a      	add	r2, r1
    70fa:	4921      	ldr	r1, [pc, #132]	; (7180 <TIMER_0_task1_cb+0x11c>)
    70fc:	7809      	ldrb	r1, [r1, #0]
    70fe:	1852      	adds	r2, r2, r1
    7100:	4920      	ldr	r1, [pc, #128]	; (7184 <TIMER_0_task1_cb+0x120>)
    7102:	d103      	bne.n	710c <TIMER_0_task1_cb+0xa8>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7104:	2308      	movs	r3, #8
    7106:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    710a:	bd38      	pop	{r3, r4, r5, pc}
		} else if ((link_port1 + link_port2 + link_port3) == 1) {
    710c:	2a01      	cmp	r2, #1
    710e:	d107      	bne.n	7120 <TIMER_0_task1_cb+0xbc>
			if (!(tick_counter & 0x03)) {
    7110:	f013 0f03 	tst.w	r3, #3
    7114:	f04f 0308 	mov.w	r3, #8
    7118:	d1f5      	bne.n	7106 <TIMER_0_task1_cb+0xa2>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    711a:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
    711e:	bd38      	pop	{r3, r4, r5, pc}
		} else if ((link_port1 + link_port2 + link_port3) == 2) {
    7120:	2a02      	cmp	r2, #2
    7122:	d105      	bne.n	7130 <TIMER_0_task1_cb+0xcc>
			if (tick_counter & 0x03) {
    7124:	f013 0f03 	tst.w	r3, #3
    7128:	f04f 0308 	mov.w	r3, #8
    712c:	d0eb      	beq.n	7106 <TIMER_0_task1_cb+0xa2>
    712e:	e7f4      	b.n	711a <TIMER_0_task1_cb+0xb6>
    7130:	2308      	movs	r3, #8
    7132:	e7f2      	b.n	711a <TIMER_0_task1_cb+0xb6>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7134:	4b13      	ldr	r3, [pc, #76]	; (7184 <TIMER_0_task1_cb+0x120>)
    7136:	2208      	movs	r2, #8
    7138:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    713c:	bd38      	pop	{r3, r4, r5, pc}
    713e:	bf00      	nop
    7140:	20008538 	.word	0x20008538
    7144:	20007470 	.word	0x20007470
    7148:	20008250 	.word	0x20008250
    714c:	0000bff9 	.word	0x0000bff9
    7150:	00001fdd 	.word	0x00001fdd
    7154:	00004345 	.word	0x00004345
    7158:	20007852 	.word	0x20007852
    715c:	20007fa3 	.word	0x20007fa3
    7160:	2000825d 	.word	0x2000825d
    7164:	20007580 	.word	0x20007580
    7168:	20008548 	.word	0x20008548
    716c:	20007f9b 	.word	0x20007f9b
    7170:	2000757b 	.word	0x2000757b
    7174:	20007f14 	.word	0x20007f14
    7178:	20007571 	.word	0x20007571
    717c:	20008274 	.word	0x20008274
    7180:	20007575 	.word	0x20007575
    7184:	41008000 	.word	0x41008000

00007188 <application_udp_appcall>:
{
    7188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (uip_newdata()) {
    718c:	4d9c      	ldr	r5, [pc, #624]	; (7400 <application_udp_appcall+0x278>)
    718e:	782b      	ldrb	r3, [r5, #0]
    7190:	079b      	lsls	r3, r3, #30
    7192:	d545      	bpl.n	7220 <application_udp_appcall+0x98>
		len = uip_datalen();
    7194:	4b9b      	ldr	r3, [pc, #620]	; (7404 <application_udp_appcall+0x27c>)
		if (uip_conn->lport == htons(MAIN_UDPSOCKET)) {
    7196:	4f9c      	ldr	r7, [pc, #624]	; (7408 <application_udp_appcall+0x280>)
		len = uip_datalen();
    7198:	881c      	ldrh	r4, [r3, #0]
		if (uip_conn->lport == htons(MAIN_UDPSOCKET)) {
    719a:	683b      	ldr	r3, [r7, #0]
    719c:	4e9b      	ldr	r6, [pc, #620]	; (740c <application_udp_appcall+0x284>)
    719e:	f8b3 8004 	ldrh.w	r8, [r3, #4]
    71a2:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
    71a6:	47b0      	blx	r6
    71a8:	4580      	cmp	r8, r0
    71aa:	f040 80cb 	bne.w	7344 <application_udp_appcall+0x1bc>
			memmove(PLAINTEXT, CIPHERTEXT, len);																	// If no encryption compiled, then just copy over plain-text from [UDP] buffer
    71ae:	4b98      	ldr	r3, [pc, #608]	; (7410 <application_udp_appcall+0x288>)
    71b0:	4998      	ldr	r1, [pc, #608]	; (7414 <application_udp_appcall+0x28c>)
    71b2:	4e99      	ldr	r6, [pc, #612]	; (7418 <application_udp_appcall+0x290>)
    71b4:	6809      	ldr	r1, [r1, #0]
    71b6:	4618      	mov	r0, r3
    71b8:	4622      	mov	r2, r4
    71ba:	47b0      	blx	r6
			if ((len == 39) && (PLAINTEXT[0] == ID_IDENT_1) && (PLAINTEXT[1] == ID_IDENT_2) && (PLAINTEXT[2] == ID_IDENT_3) && (PLAINTEXT[3] == ID_IDENT_4)) {
    71bc:	2c27      	cmp	r4, #39	; 0x27
			memmove(PLAINTEXT, CIPHERTEXT, len);																	// If no encryption compiled, then just copy over plain-text from [UDP] buffer
    71be:	4603      	mov	r3, r0
			if ((len == 39) && (PLAINTEXT[0] == ID_IDENT_1) && (PLAINTEXT[1] == ID_IDENT_2) && (PLAINTEXT[2] == ID_IDENT_3) && (PLAINTEXT[3] == ID_IDENT_4)) {
    71c0:	d12e      	bne.n	7220 <application_udp_appcall+0x98>
    71c2:	7802      	ldrb	r2, [r0, #0]
    71c4:	2a37      	cmp	r2, #55	; 0x37
    71c6:	d12b      	bne.n	7220 <application_udp_appcall+0x98>
    71c8:	7842      	ldrb	r2, [r0, #1]
    71ca:	2a9f      	cmp	r2, #159	; 0x9f
    71cc:	d128      	bne.n	7220 <application_udp_appcall+0x98>
    71ce:	7882      	ldrb	r2, [r0, #2]
    71d0:	2a1b      	cmp	r2, #27
    71d2:	d125      	bne.n	7220 <application_udp_appcall+0x98>
    71d4:	78c2      	ldrb	r2, [r0, #3]
    71d6:	2a61      	cmp	r2, #97	; 0x61
    71d8:	d122      	bne.n	7220 <application_udp_appcall+0x98>
				memmove(((CONFIG *)&settings_buffer)->name, &PLAINTEXT[4], 33);
    71da:	4990      	ldr	r1, [pc, #576]	; (741c <application_udp_appcall+0x294>)
    71dc:	1d02      	adds	r2, r0, #4
    71de:	3024      	adds	r0, #36	; 0x24
    71e0:	f852 4b04 	ldr.w	r4, [r2], #4
    71e4:	f841 4b04 	str.w	r4, [r1], #4
    71e8:	4282      	cmp	r2, r0
    71ea:	d1f9      	bne.n	71e0 <application_udp_appcall+0x58>
    71ec:	7812      	ldrb	r2, [r2, #0]
    71ee:	700a      	strb	r2, [r1, #0]
				((CONFIG *)&settings_buffer)->gain_cardA = PLAINTEXT[37];
    71f0:	488b      	ldr	r0, [pc, #556]	; (7420 <application_udp_appcall+0x298>)
    71f2:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
				((CONFIG *)&settings_buffer)->gain_cardB = PLAINTEXT[38];
    71f6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
				((CONFIG *)&settings_buffer)->gain_cardA = PLAINTEXT[37];
    71fa:	f880 2029 	strb.w	r2, [r0, #41]	; 0x29
				((CONFIG *)&settings_buffer)->gain_cardB = PLAINTEXT[38];
    71fe:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
				if (EEprom_settings(settings_buffer, SETTING_STRUCTURE_SIZE, 1) != ERR_NONE) {
    7202:	2201      	movs	r2, #1
    7204:	2180      	movs	r1, #128	; 0x80
    7206:	4b87      	ldr	r3, [pc, #540]	; (7424 <application_udp_appcall+0x29c>)
    7208:	4c87      	ldr	r4, [pc, #540]	; (7428 <application_udp_appcall+0x2a0>)
    720a:	4798      	blx	r3
    720c:	2800      	cmp	r0, #0
    720e:	f000 8097 	beq.w	7340 <application_udp_appcall+0x1b8>
					xprintf("MultiSense [configuration ERROR READING]\r\n");
    7212:	4886      	ldr	r0, [pc, #536]	; (742c <application_udp_appcall+0x2a4>)
					xprintf("MultiSense [UPDATED <ID> configuration WRITTEN]\r\n");
    7214:	47a0      	blx	r4
				refresh_gain = 1;
    7216:	4b86      	ldr	r3, [pc, #536]	; (7430 <application_udp_appcall+0x2a8>)
				xprintf("Global settings packet received...\r\n");	
    7218:	4886      	ldr	r0, [pc, #536]	; (7434 <application_udp_appcall+0x2ac>)
				refresh_gain = 1;
    721a:	2201      	movs	r2, #1
    721c:	701a      	strb	r2, [r3, #0]
				xprintf("Global settings packet received...\r\n");	
    721e:	47a0      	blx	r4
	if ((uip_rexmit()) || (uip_poll())) {
    7220:	782b      	ldrb	r3, [r5, #0]
    7222:	f013 0f0c 	tst.w	r3, #12
    7226:	f000 8229 	beq.w	767c <application_udp_appcall+0x4f4>
		if (uip_conn->lport == htons(MAIN_UDPSOCKET)) {
    722a:	4d77      	ldr	r5, [pc, #476]	; (7408 <application_udp_appcall+0x280>)
    722c:	4c77      	ldr	r4, [pc, #476]	; (740c <application_udp_appcall+0x284>)
    722e:	682b      	ldr	r3, [r5, #0]
    7230:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
    7234:	889e      	ldrh	r6, [r3, #4]
    7236:	47a0      	blx	r4
    7238:	4286      	cmp	r6, r0
    723a:	f040 8129 	bne.w	7490 <application_udp_appcall+0x308>
			if (readenvironment == 2) {
    723e:	4c7e      	ldr	r4, [pc, #504]	; (7438 <application_udp_appcall+0x2b0>)
    7240:	7823      	ldrb	r3, [r4, #0]
    7242:	2b02      	cmp	r3, #2
    7244:	f040 821a 	bne.w	767c <application_udp_appcall+0x4f4>
				PLAINTEXT[0] = (uint8_t)(((((CONFIG *)&settings_buffer)->ID) >> 24) & 0x00FF);
    7248:	4a75      	ldr	r2, [pc, #468]	; (7420 <application_udp_appcall+0x298>)
    724a:	4b71      	ldr	r3, [pc, #452]	; (7410 <application_udp_appcall+0x288>)
    724c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
				PLAINTEXT[3] = (uint8_t)((((CONFIG *)&settings_buffer)->ID) & 0x00FF);
    724e:	70d9      	strb	r1, [r3, #3]
				PLAINTEXT[0] = (uint8_t)(((((CONFIG *)&settings_buffer)->ID) >> 24) & 0x00FF);
    7250:	0e08      	lsrs	r0, r1, #24
    7252:	7018      	strb	r0, [r3, #0]
				PLAINTEXT[1] = (uint8_t)(((((CONFIG *)&settings_buffer)->ID) >> 16) & 0x00FF);
    7254:	0c08      	lsrs	r0, r1, #16
    7256:	7058      	strb	r0, [r3, #1]
				PLAINTEXT[2] = (uint8_t)(((((CONFIG *)&settings_buffer)->ID) >> 8) & 0x00FF);
    7258:	0a08      	lsrs	r0, r1, #8
    725a:	7098      	strb	r0, [r3, #2]
				memmove(&PLAINTEXT[4], ((CONFIG *)&settings_buffer)->name, 33);
    725c:	f102 0108 	add.w	r1, r2, #8
    7260:	1d18      	adds	r0, r3, #4
    7262:	f102 0528 	add.w	r5, r2, #40	; 0x28
    7266:	f851 6b04 	ldr.w	r6, [r1], #4
    726a:	f840 6b04 	str.w	r6, [r0], #4
    726e:	42a9      	cmp	r1, r5
    7270:	d1f9      	bne.n	7266 <application_udp_appcall+0xde>
    7272:	7809      	ldrb	r1, [r1, #0]
    7274:	7001      	strb	r1, [r0, #0]
				PLAINTEXT[37] = ((CONFIG *)&settings_buffer)->gain_cardA;
    7276:	f892 1029 	ldrb.w	r1, [r2, #41]	; 0x29
    727a:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
				PLAINTEXT[38] = ((CONFIG *)&settings_buffer)->gain_cardB;
    727e:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
				PLAINTEXT[39] = ((CONFIG *)&settings_buffer)->loop_basestation;
    7282:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
    7286:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
				PLAINTEXT[40] = readdata_water1;
    728a:	4a6c      	ldr	r2, [pc, #432]	; (743c <application_udp_appcall+0x2b4>)
				PLAINTEXT[38] = ((CONFIG *)&settings_buffer)->gain_cardB;
    728c:	f883 1026 	strb.w	r1, [r3, #38]	; 0x26
				PLAINTEXT[40] = readdata_water1;
    7290:	7812      	ldrb	r2, [r2, #0]
    7292:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				PLAINTEXT[41] = readdata_water2;
    7296:	4a6a      	ldr	r2, [pc, #424]	; (7440 <application_udp_appcall+0x2b8>)
				memmove(CIPHERTEXT, PLAINTEXT, 61);														// If no encryption compiled, then just copy over plain-text into [UDP] buffer
    7298:	4e5e      	ldr	r6, [pc, #376]	; (7414 <application_udp_appcall+0x28c>)
				PLAINTEXT[41] = readdata_water2;
    729a:	7812      	ldrb	r2, [r2, #0]
    729c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
				PLAINTEXT[42] = highvoltage;
    72a0:	4a68      	ldr	r2, [pc, #416]	; (7444 <application_udp_appcall+0x2bc>)
    72a2:	7812      	ldrb	r2, [r2, #0]
    72a4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				PLAINTEXT[43] = readdata_tempmoisture[0];
    72a8:	4a67      	ldr	r2, [pc, #412]	; (7448 <application_udp_appcall+0x2c0>)
    72aa:	7811      	ldrb	r1, [r2, #0]
    72ac:	f883 102b 	strb.w	r1, [r3, #43]	; 0x2b
				PLAINTEXT[44] = readdata_tempmoisture[1];
    72b0:	7851      	ldrb	r1, [r2, #1]
    72b2:	f883 102c 	strb.w	r1, [r3, #44]	; 0x2c
				PLAINTEXT[45] = readdata_tempmoisture[2];
    72b6:	7891      	ldrb	r1, [r2, #2]
				PLAINTEXT[46] = readdata_tempmoisture[3];
    72b8:	78d2      	ldrb	r2, [r2, #3]
    72ba:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				PLAINTEXT[47] = tamper;
    72be:	4a63      	ldr	r2, [pc, #396]	; (744c <application_udp_appcall+0x2c4>)
				PLAINTEXT[45] = readdata_tempmoisture[2];
    72c0:	f883 102d 	strb.w	r1, [r3, #45]	; 0x2d
				PLAINTEXT[47] = tamper;
    72c4:	7812      	ldrb	r2, [r2, #0]
    72c6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				PLAINTEXT[48] = link_port1;
    72ca:	4a61      	ldr	r2, [pc, #388]	; (7450 <application_udp_appcall+0x2c8>)
				memmove(CIPHERTEXT, PLAINTEXT, 61);														// If no encryption compiled, then just copy over plain-text into [UDP] buffer
    72cc:	4950      	ldr	r1, [pc, #320]	; (7410 <application_udp_appcall+0x288>)
				PLAINTEXT[48] = link_port1;
    72ce:	7812      	ldrb	r2, [r2, #0]
    72d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				PLAINTEXT[49] = link_port2;
    72d4:	4a5f      	ldr	r2, [pc, #380]	; (7454 <application_udp_appcall+0x2cc>)
    72d6:	7812      	ldrb	r2, [r2, #0]
    72d8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				PLAINTEXT[50] = link_port3;
    72dc:	4a5e      	ldr	r2, [pc, #376]	; (7458 <application_udp_appcall+0x2d0>)
    72de:	7812      	ldrb	r2, [r2, #0]
    72e0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
				PLAINTEXT[51] = cardA_type;
    72e4:	4a5d      	ldr	r2, [pc, #372]	; (745c <application_udp_appcall+0x2d4>)
    72e6:	7812      	ldrb	r2, [r2, #0]
    72e8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
				PLAINTEXT[52] = cardB_type;
    72ec:	4a5c      	ldr	r2, [pc, #368]	; (7460 <application_udp_appcall+0x2d8>)
    72ee:	7812      	ldrb	r2, [r2, #0]
    72f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				PLAINTEXT[53] = ring_broken;
    72f4:	4a5b      	ldr	r2, [pc, #364]	; (7464 <application_udp_appcall+0x2dc>)
				memmove(CIPHERTEXT, PLAINTEXT, 61);														// If no encryption compiled, then just copy over plain-text into [UDP] buffer
    72f6:	6830      	ldr	r0, [r6, #0]
				PLAINTEXT[53] = ring_broken;
    72f8:	7812      	ldrb	r2, [r2, #0]
    72fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
				PLAINTEXT[55] = MULTISENSE_FIRMWARE_MINOR;
    72fe:	2201      	movs	r2, #1
    7300:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
				PLAINTEXT[56] = ID_IDENT_1;
    7304:	2237      	movs	r2, #55	; 0x37
    7306:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
				PLAINTEXT[57] = ID_IDENT_2;
    730a:	229f      	movs	r2, #159	; 0x9f
    730c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
				PLAINTEXT[58] = ID_IDENT_3;
    7310:	221b      	movs	r2, #27
				PLAINTEXT[54] = MULTISENSE_FIRMWARE_MAJOR;
    7312:	2500      	movs	r5, #0
				PLAINTEXT[58] = ID_IDENT_3;
    7314:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				PLAINTEXT[59] = ID_IDENT_4;
    7318:	2261      	movs	r2, #97	; 0x61
    731a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
				PLAINTEXT[54] = MULTISENSE_FIRMWARE_MAJOR;
    731e:	f883 5036 	strb.w	r5, [r3, #54]	; 0x36
				PLAINTEXT[60] = 0;
    7322:	f883 503c 	strb.w	r5, [r3, #60]	; 0x3c
				memmove(CIPHERTEXT, PLAINTEXT, 61);														// If no encryption compiled, then just copy over plain-text into [UDP] buffer
    7326:	223d      	movs	r2, #61	; 0x3d
    7328:	4b3b      	ldr	r3, [pc, #236]	; (7418 <application_udp_appcall+0x290>)
    732a:	4798      	blx	r3
				uip_udp_send(61);
    732c:	6830      	ldr	r0, [r6, #0]
    732e:	4b4e      	ldr	r3, [pc, #312]	; (7468 <application_udp_appcall+0x2e0>)
    7330:	213d      	movs	r1, #61	; 0x3d
    7332:	4798      	blx	r3
				xprintf("Hardware packet send...\r\n");
    7334:	484d      	ldr	r0, [pc, #308]	; (746c <application_udp_appcall+0x2e4>)
				readenvironment = 0;
    7336:	7025      	strb	r5, [r4, #0]
				xprintf("Topology update packet send...\r\n");
    7338:	4b3b      	ldr	r3, [pc, #236]	; (7428 <application_udp_appcall+0x2a0>)
}
    733a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
				xprintf("Topology update packet send...\r\n");
    733e:	4718      	bx	r3
					xprintf("MultiSense [UPDATED <ID> configuration WRITTEN]\r\n");
    7340:	484b      	ldr	r0, [pc, #300]	; (7470 <application_udp_appcall+0x2e8>)
    7342:	e767      	b.n	7214 <application_udp_appcall+0x8c>
		} else if (uip_conn->lport == htons(CARDA_UDPSOCKET)) {
    7344:	683b      	ldr	r3, [r7, #0]
    7346:	f640 70a1 	movw	r0, #4001	; 0xfa1
    734a:	f8b3 8004 	ldrh.w	r8, [r3, #4]
    734e:	47b0      	blx	r6
    7350:	4580      	cmp	r8, r0
    7352:	d115      	bne.n	7380 <application_udp_appcall+0x1f8>
			memmove(PLAINTEXT, CIPHERTEXT, len);																	// If no encryption compiled, then just copy over plain-text from [UDP] buffer
    7354:	4b2e      	ldr	r3, [pc, #184]	; (7410 <application_udp_appcall+0x288>)
    7356:	492f      	ldr	r1, [pc, #188]	; (7414 <application_udp_appcall+0x28c>)
    7358:	4e2f      	ldr	r6, [pc, #188]	; (7418 <application_udp_appcall+0x290>)
    735a:	6809      	ldr	r1, [r1, #0]
    735c:	4622      	mov	r2, r4
    735e:	4618      	mov	r0, r3
    7360:	47b0      	blx	r6
			switch (cardA_type) {
    7362:	4a3e      	ldr	r2, [pc, #248]	; (745c <application_udp_appcall+0x2d4>)
    7364:	7812      	ldrb	r2, [r2, #0]
    7366:	2a02      	cmp	r2, #2
    7368:	f47f af5a 	bne.w	7220 <application_udp_appcall+0x98>
				if (len == 1) {
    736c:	2c01      	cmp	r4, #1
    736e:	f47f af57 	bne.w	7220 <application_udp_appcall+0x98>
					miniIO_A_relay = PLAINTEXT[0];
    7372:	4b40      	ldr	r3, [pc, #256]	; (7474 <application_udp_appcall+0x2ec>)
    7374:	7802      	ldrb	r2, [r0, #0]
					xprintf("CardA Mini-IO packet received...\r\n");
    7376:	4840      	ldr	r0, [pc, #256]	; (7478 <application_udp_appcall+0x2f0>)
					miniIO_A_relay = PLAINTEXT[0];
    7378:	701a      	strb	r2, [r3, #0]
				xprintf("Broadcast Table [FLUSH] UDP packet arrived...\r\n");
    737a:	4b2b      	ldr	r3, [pc, #172]	; (7428 <application_udp_appcall+0x2a0>)
    737c:	4798      	blx	r3
    737e:	e74f      	b.n	7220 <application_udp_appcall+0x98>
		} else if (uip_conn->lport == htons(CARDB_UDPSOCKET)) {
    7380:	683b      	ldr	r3, [r7, #0]
    7382:	f640 70a2 	movw	r0, #4002	; 0xfa2
    7386:	f8b3 8004 	ldrh.w	r8, [r3, #4]
    738a:	47b0      	blx	r6
    738c:	4580      	cmp	r8, r0
    738e:	d113      	bne.n	73b8 <application_udp_appcall+0x230>
			memmove(PLAINTEXT, CIPHERTEXT, len);																	// If no encryption compiled, then just copy over plain-text from [UDP] buffer
    7390:	4b1f      	ldr	r3, [pc, #124]	; (7410 <application_udp_appcall+0x288>)
    7392:	4920      	ldr	r1, [pc, #128]	; (7414 <application_udp_appcall+0x28c>)
    7394:	4e20      	ldr	r6, [pc, #128]	; (7418 <application_udp_appcall+0x290>)
    7396:	6809      	ldr	r1, [r1, #0]
    7398:	4622      	mov	r2, r4
    739a:	4618      	mov	r0, r3
    739c:	47b0      	blx	r6
			switch (cardB_type) {
    739e:	4a30      	ldr	r2, [pc, #192]	; (7460 <application_udp_appcall+0x2d8>)
    73a0:	7812      	ldrb	r2, [r2, #0]
    73a2:	2a02      	cmp	r2, #2
    73a4:	f47f af3c 	bne.w	7220 <application_udp_appcall+0x98>
				if (len == 1) {
    73a8:	2c01      	cmp	r4, #1
    73aa:	f47f af39 	bne.w	7220 <application_udp_appcall+0x98>
					miniIO_B_relay = PLAINTEXT[0];
    73ae:	4b33      	ldr	r3, [pc, #204]	; (747c <application_udp_appcall+0x2f4>)
    73b0:	7802      	ldrb	r2, [r0, #0]
    73b2:	701a      	strb	r2, [r3, #0]
					xprintf("CardB Mini-IO packet received...\r\n");
    73b4:	4832      	ldr	r0, [pc, #200]	; (7480 <application_udp_appcall+0x2f8>)
    73b6:	e7e0      	b.n	737a <application_udp_appcall+0x1f2>
		} else if (uip_conn->lport == htons(RING_MANAGEMENT_SOCKET)) {
    73b8:	683b      	ldr	r3, [r7, #0]
    73ba:	f640 70a3 	movw	r0, #4003	; 0xfa3
    73be:	889c      	ldrh	r4, [r3, #4]
    73c0:	47b0      	blx	r6
    73c2:	4284      	cmp	r4, r0
    73c4:	f47f af2c 	bne.w	7220 <application_udp_appcall+0x98>
			if (!(((CONFIG *)&settings_buffer)->loop_basestation)) {
    73c8:	4b15      	ldr	r3, [pc, #84]	; (7420 <application_udp_appcall+0x298>)
    73ca:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
    73ce:	2b00      	cmp	r3, #0
    73d0:	f47f af26 	bne.w	7220 <application_udp_appcall+0x98>
				writeKSZreg(SPI_KSZ8794_PORT1CONTROL2, 0x07);
    73d4:	4c2b      	ldr	r4, [pc, #172]	; (7484 <application_udp_appcall+0x2fc>)
    73d6:	2107      	movs	r1, #7
    73d8:	2012      	movs	r0, #18
    73da:	47a0      	blx	r4
				writeKSZreg(SPI_KSZ8794_PORT2CONTROL2, 0x07);
    73dc:	2107      	movs	r1, #7
    73de:	2022      	movs	r0, #34	; 0x22
    73e0:	47a0      	blx	r4
				writeKSZreg(SPI_KSZ8794_GLOBAL0, 0x6D);
    73e2:	216d      	movs	r1, #109	; 0x6d
    73e4:	2002      	movs	r0, #2
    73e6:	47a0      	blx	r4
				delay_us(250);
    73e8:	4b27      	ldr	r3, [pc, #156]	; (7488 <application_udp_appcall+0x300>)
    73ea:	20fa      	movs	r0, #250	; 0xfa
    73ec:	4798      	blx	r3
				writeKSZreg(SPI_KSZ8794_PORT1CONTROL2, 0x06);
    73ee:	2106      	movs	r1, #6
    73f0:	2012      	movs	r0, #18
    73f2:	47a0      	blx	r4
				writeKSZreg(SPI_KSZ8794_PORT2CONTROL2, 0x06);
    73f4:	2022      	movs	r0, #34	; 0x22
    73f6:	2106      	movs	r1, #6
    73f8:	47a0      	blx	r4
				xprintf("Broadcast Table [FLUSH] UDP packet arrived...\r\n");
    73fa:	4824      	ldr	r0, [pc, #144]	; (748c <application_udp_appcall+0x304>)
    73fc:	e7bd      	b.n	737a <application_udp_appcall+0x1f2>
    73fe:	bf00      	nop
    7400:	2000855c 	.word	0x2000855c
    7404:	20008550 	.word	0x20008550
    7408:	20008568 	.word	0x20008568
    740c:	0000a39d 	.word	0x0000a39d
    7410:	20007855 	.word	0x20007855
    7414:	20008564 	.word	0x20008564
    7418:	0000b311 	.word	0x0000b311
    741c:	20007f1c 	.word	0x20007f1c
    7420:	20007f14 	.word	0x20007f14
    7424:	0000b1a5 	.word	0x0000b1a5
    7428:	00000395 	.word	0x00000395
    742c:	0000d6f4 	.word	0x0000d6f4
    7430:	2000853d 	.word	0x2000853d
    7434:	0000d80d 	.word	0x0000d80d
    7438:	20008250 	.word	0x20008250
    743c:	2000853e 	.word	0x2000853e
    7440:	2000852d 	.word	0x2000852d
    7444:	20008535 	.word	0x20008535
    7448:	20007f9d 	.word	0x20007f9d
    744c:	20007f9b 	.word	0x20007f9b
    7450:	20007571 	.word	0x20007571
    7454:	20008274 	.word	0x20008274
    7458:	20007575 	.word	0x20007575
    745c:	20007c57 	.word	0x20007c57
    7460:	20008540 	.word	0x20008540
    7464:	20008251 	.word	0x20008251
    7468:	0000a3a5 	.word	0x0000a3a5
    746c:	0000d8a8 	.word	0x0000d8a8
    7470:	0000d7db 	.word	0x0000d7db
    7474:	20007f9c 	.word	0x20007f9c
    7478:	0000d832 	.word	0x0000d832
    747c:	20007f04 	.word	0x20007f04
    7480:	0000d855 	.word	0x0000d855
    7484:	0000b245 	.word	0x0000b245
    7488:	00001201 	.word	0x00001201
    748c:	0000d878 	.word	0x0000d878
		} else if (uip_conn->lport == htons(CARDA_UDPSOCKET)) {
    7490:	682b      	ldr	r3, [r5, #0]
    7492:	f640 70a1 	movw	r0, #4001	; 0xfa1
    7496:	889e      	ldrh	r6, [r3, #4]
    7498:	47a0      	blx	r4
    749a:	4286      	cmp	r6, r0
    749c:	d167      	bne.n	756e <application_udp_appcall+0x3e6>
			switch (cardA_type) {
    749e:	4b78      	ldr	r3, [pc, #480]	; (7680 <application_udp_appcall+0x4f8>)
    74a0:	781d      	ldrb	r5, [r3, #0]
    74a2:	2d01      	cmp	r5, #1
    74a4:	d01d      	beq.n	74e2 <application_udp_appcall+0x35a>
    74a6:	2d02      	cmp	r5, #2
    74a8:	f040 80e8 	bne.w	767c <application_udp_appcall+0x4f4>
				PLAINTEXT[0] = (uint8_t)miniIO_A0_adcH;
    74ac:	4b75      	ldr	r3, [pc, #468]	; (7684 <application_udp_appcall+0x4fc>)
    74ae:	4976      	ldr	r1, [pc, #472]	; (7688 <application_udp_appcall+0x500>)
    74b0:	781b      	ldrb	r3, [r3, #0]
    74b2:	700b      	strb	r3, [r1, #0]
				PLAINTEXT[1] = (uint8_t)miniIO_A0_adcL;
    74b4:	4b75      	ldr	r3, [pc, #468]	; (768c <application_udp_appcall+0x504>)
				memmove(CIPHERTEXT, PLAINTEXT, 5);													// If no encryption compiled, then just copy over plain-text into [UDP] buffer
    74b6:	4c76      	ldr	r4, [pc, #472]	; (7690 <application_udp_appcall+0x508>)
				PLAINTEXT[1] = (uint8_t)miniIO_A0_adcL;
    74b8:	781b      	ldrb	r3, [r3, #0]
    74ba:	704b      	strb	r3, [r1, #1]
				PLAINTEXT[2] = (uint8_t)miniIO_A1_adcH;
    74bc:	4b75      	ldr	r3, [pc, #468]	; (7694 <application_udp_appcall+0x50c>)
				memmove(CIPHERTEXT, PLAINTEXT, 5);													// If no encryption compiled, then just copy over plain-text into [UDP] buffer
    74be:	6820      	ldr	r0, [r4, #0]
				PLAINTEXT[2] = (uint8_t)miniIO_A1_adcH;
    74c0:	781b      	ldrb	r3, [r3, #0]
    74c2:	708b      	strb	r3, [r1, #2]
				PLAINTEXT[3] = (uint8_t)miniIO_A1_adcL;
    74c4:	4b74      	ldr	r3, [pc, #464]	; (7698 <application_udp_appcall+0x510>)
    74c6:	781b      	ldrb	r3, [r3, #0]
    74c8:	70cb      	strb	r3, [r1, #3]
				PLAINTEXT[4] = (uint8_t)miniIO_A_inputs;
    74ca:	4b74      	ldr	r3, [pc, #464]	; (769c <application_udp_appcall+0x514>)
    74cc:	781b      	ldrb	r3, [r3, #0]
    74ce:	710b      	strb	r3, [r1, #4]
				memmove(CIPHERTEXT, PLAINTEXT, 5);													// If no encryption compiled, then just copy over plain-text into [UDP] buffer
    74d0:	2205      	movs	r2, #5
    74d2:	4b73      	ldr	r3, [pc, #460]	; (76a0 <application_udp_appcall+0x518>)
    74d4:	4798      	blx	r3
				uip_udp_send(3);
    74d6:	6820      	ldr	r0, [r4, #0]
    74d8:	4b72      	ldr	r3, [pc, #456]	; (76a4 <application_udp_appcall+0x51c>)
    74da:	2103      	movs	r1, #3
    74dc:	4798      	blx	r3
				xprintf("CardA Mini-IO packet send...\r\n");	
    74de:	4872      	ldr	r0, [pc, #456]	; (76a8 <application_udp_appcall+0x520>)
    74e0:	e72a      	b.n	7338 <application_udp_appcall+0x1b0>
				if ((!sentA) && (card_sampleindex == SAMPLE_BUFFER_SIZE)) {
    74e2:	f8df 820c 	ldr.w	r8, [pc, #524]	; 76f0 <application_udp_appcall+0x568>
    74e6:	f898 6000 	ldrb.w	r6, [r8]
    74ea:	2e00      	cmp	r6, #0
    74ec:	f040 80c6 	bne.w	767c <application_udp_appcall+0x4f4>
    74f0:	f8df 9210 	ldr.w	r9, [pc, #528]	; 7704 <application_udp_appcall+0x57c>
    74f4:	f8d9 7000 	ldr.w	r7, [r9]
    74f8:	f5b7 7f2b 	cmp.w	r7, #684	; 0x2ac
    74fc:	f040 80be 	bne.w	767c <application_udp_appcall+0x4f4>
					memmove(&PLAINTEXT[0], cardAch0_samplebuffer, SAMPLE_BUFFER_SIZE);
    7500:	4c61      	ldr	r4, [pc, #388]	; (7688 <application_udp_appcall+0x500>)
    7502:	496a      	ldr	r1, [pc, #424]	; (76ac <application_udp_appcall+0x524>)
    7504:	f8df a200 	ldr.w	sl, [pc, #512]	; 7708 <application_udp_appcall+0x580>
    7508:	463a      	mov	r2, r7
    750a:	4620      	mov	r0, r4
    750c:	47d0      	blx	sl
					memmove(&PLAINTEXT[SAMPLE_BUFFER_SIZE], cardAch1_samplebuffer, SAMPLE_BUFFER_SIZE);
    750e:	463a      	mov	r2, r7
    7510:	4967      	ldr	r1, [pc, #412]	; (76b0 <application_udp_appcall+0x528>)
					memmove(CIPHERTEXT, PLAINTEXT, (SAMPLE_BUFFER_SIZE * 2) + 6);													// If no encryption compiled, then just copy over plain-text into [UDP] buffer
    7512:	4f5f      	ldr	r7, [pc, #380]	; (7690 <application_udp_appcall+0x508>)
					memmove(&PLAINTEXT[SAMPLE_BUFFER_SIZE], cardAch1_samplebuffer, SAMPLE_BUFFER_SIZE);
    7514:	f504 702b 	add.w	r0, r4, #684	; 0x2ac
    7518:	47d0      	blx	sl
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 0] = cardAch2_samplebuffer;
    751a:	4b66      	ldr	r3, [pc, #408]	; (76b4 <application_udp_appcall+0x52c>)
					memmove(CIPHERTEXT, PLAINTEXT, (SAMPLE_BUFFER_SIZE * 2) + 6);													// If no encryption compiled, then just copy over plain-text into [UDP] buffer
    751c:	6838      	ldr	r0, [r7, #0]
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 0] = cardAch2_samplebuffer;
    751e:	781b      	ldrb	r3, [r3, #0]
    7520:	f884 3558 	strb.w	r3, [r4, #1368]	; 0x558
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 1] = cardAch3_samplebuffer;
    7524:	4b64      	ldr	r3, [pc, #400]	; (76b8 <application_udp_appcall+0x530>)
    7526:	781b      	ldrb	r3, [r3, #0]
    7528:	f884 3559 	strb.w	r3, [r4, #1369]	; 0x559
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 2] = ID_IDENT_1;
    752c:	2337      	movs	r3, #55	; 0x37
    752e:	f884 355a 	strb.w	r3, [r4, #1370]	; 0x55a
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 3] = ID_IDENT_2;
    7532:	239f      	movs	r3, #159	; 0x9f
    7534:	f884 355b 	strb.w	r3, [r4, #1371]	; 0x55b
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 4] = ID_IDENT_3;
    7538:	231b      	movs	r3, #27
    753a:	f884 355c 	strb.w	r3, [r4, #1372]	; 0x55c
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 5] = ID_IDENT_4;
    753e:	2361      	movs	r3, #97	; 0x61
					memmove(CIPHERTEXT, PLAINTEXT, (SAMPLE_BUFFER_SIZE * 2) + 6);													// If no encryption compiled, then just copy over plain-text into [UDP] buffer
    7540:	f240 525e 	movw	r2, #1374	; 0x55e
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 5] = ID_IDENT_4;
    7544:	f884 355d 	strb.w	r3, [r4, #1373]	; 0x55d
					memmove(CIPHERTEXT, PLAINTEXT, (SAMPLE_BUFFER_SIZE * 2) + 6);													// If no encryption compiled, then just copy over plain-text into [UDP] buffer
    7548:	4621      	mov	r1, r4
    754a:	4b55      	ldr	r3, [pc, #340]	; (76a0 <application_udp_appcall+0x518>)
    754c:	4798      	blx	r3
					uip_udp_send((SAMPLE_BUFFER_SIZE * 2) + 6);
    754e:	4b55      	ldr	r3, [pc, #340]	; (76a4 <application_udp_appcall+0x51c>)
    7550:	6838      	ldr	r0, [r7, #0]
    7552:	f240 515e 	movw	r1, #1374	; 0x55e
    7556:	4798      	blx	r3
					if (sentB) {
    7558:	4b58      	ldr	r3, [pc, #352]	; (76bc <application_udp_appcall+0x534>)
    755a:	781a      	ldrb	r2, [r3, #0]
    755c:	b122      	cbz	r2, 7568 <application_udp_appcall+0x3e0>
						sentB = 0;
    755e:	701e      	strb	r6, [r3, #0]
						card_sampleindex = 0;
    7560:	f8c9 6000 	str.w	r6, [r9]
					xprintf("CardA VibraTek packet send...\r\n");
    7564:	4856      	ldr	r0, [pc, #344]	; (76c0 <application_udp_appcall+0x538>)
    7566:	e6e7      	b.n	7338 <application_udp_appcall+0x1b0>
						sentA = 1;
    7568:	f888 5000 	strb.w	r5, [r8]
    756c:	e7fa      	b.n	7564 <application_udp_appcall+0x3dc>
		} else if (uip_conn->lport == htons(CARDB_UDPSOCKET)) {
    756e:	682b      	ldr	r3, [r5, #0]
    7570:	f640 70a2 	movw	r0, #4002	; 0xfa2
    7574:	889e      	ldrh	r6, [r3, #4]
    7576:	47a0      	blx	r4
    7578:	4286      	cmp	r6, r0
    757a:	d164      	bne.n	7646 <application_udp_appcall+0x4be>
			switch (cardB_type) {
    757c:	4b51      	ldr	r3, [pc, #324]	; (76c4 <application_udp_appcall+0x53c>)
    757e:	781d      	ldrb	r5, [r3, #0]
    7580:	2d01      	cmp	r5, #1
    7582:	d01c      	beq.n	75be <application_udp_appcall+0x436>
    7584:	2d02      	cmp	r5, #2
    7586:	d179      	bne.n	767c <application_udp_appcall+0x4f4>
				PLAINTEXT[0] = (uint8_t)miniIO_B0_adcH;
    7588:	4b4f      	ldr	r3, [pc, #316]	; (76c8 <application_udp_appcall+0x540>)
    758a:	493f      	ldr	r1, [pc, #252]	; (7688 <application_udp_appcall+0x500>)
    758c:	781b      	ldrb	r3, [r3, #0]
    758e:	700b      	strb	r3, [r1, #0]
				PLAINTEXT[1] = (uint8_t)miniIO_B0_adcL;
    7590:	4b4e      	ldr	r3, [pc, #312]	; (76cc <application_udp_appcall+0x544>)
				memmove(CIPHERTEXT, PLAINTEXT, 3);												   	// If no encryption compiled, then just copy over plain-text into [UDP] buffer
    7592:	4c3f      	ldr	r4, [pc, #252]	; (7690 <application_udp_appcall+0x508>)
				PLAINTEXT[1] = (uint8_t)miniIO_B0_adcL;
    7594:	781b      	ldrb	r3, [r3, #0]
    7596:	704b      	strb	r3, [r1, #1]
				PLAINTEXT[2] = (uint8_t)miniIO_B1_adcH;
    7598:	4b4d      	ldr	r3, [pc, #308]	; (76d0 <application_udp_appcall+0x548>)
				memmove(CIPHERTEXT, PLAINTEXT, 3);												   	// If no encryption compiled, then just copy over plain-text into [UDP] buffer
    759a:	6820      	ldr	r0, [r4, #0]
				PLAINTEXT[2] = (uint8_t)miniIO_B1_adcH;
    759c:	781b      	ldrb	r3, [r3, #0]
    759e:	708b      	strb	r3, [r1, #2]
				PLAINTEXT[3] = (uint8_t)miniIO_B1_adcL;
    75a0:	4b4c      	ldr	r3, [pc, #304]	; (76d4 <application_udp_appcall+0x54c>)
    75a2:	781b      	ldrb	r3, [r3, #0]
    75a4:	70cb      	strb	r3, [r1, #3]
				PLAINTEXT[4] = (uint8_t)miniIO_B_inputs;
    75a6:	4b4c      	ldr	r3, [pc, #304]	; (76d8 <application_udp_appcall+0x550>)
    75a8:	781b      	ldrb	r3, [r3, #0]
    75aa:	710b      	strb	r3, [r1, #4]
				memmove(CIPHERTEXT, PLAINTEXT, 3);												   	// If no encryption compiled, then just copy over plain-text into [UDP] buffer
    75ac:	2203      	movs	r2, #3
    75ae:	4b3c      	ldr	r3, [pc, #240]	; (76a0 <application_udp_appcall+0x518>)
    75b0:	4798      	blx	r3
				uip_udp_send(5);
    75b2:	6820      	ldr	r0, [r4, #0]
    75b4:	4b3b      	ldr	r3, [pc, #236]	; (76a4 <application_udp_appcall+0x51c>)
    75b6:	2105      	movs	r1, #5
    75b8:	4798      	blx	r3
				xprintf("CardB Mini-IO packet send...\r\n");
    75ba:	4848      	ldr	r0, [pc, #288]	; (76dc <application_udp_appcall+0x554>)
    75bc:	e6bc      	b.n	7338 <application_udp_appcall+0x1b0>
				if ((!sentB) && (card_sampleindex == SAMPLE_BUFFER_SIZE)) {
    75be:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 76bc <application_udp_appcall+0x534>
    75c2:	f898 6000 	ldrb.w	r6, [r8]
    75c6:	2e00      	cmp	r6, #0
    75c8:	d158      	bne.n	767c <application_udp_appcall+0x4f4>
    75ca:	f8df 9138 	ldr.w	r9, [pc, #312]	; 7704 <application_udp_appcall+0x57c>
    75ce:	f8d9 7000 	ldr.w	r7, [r9]
    75d2:	f5b7 7f2b 	cmp.w	r7, #684	; 0x2ac
    75d6:	d151      	bne.n	767c <application_udp_appcall+0x4f4>
					memmove(&PLAINTEXT[0], cardBch0_samplebuffer, SAMPLE_BUFFER_SIZE);
    75d8:	4c2b      	ldr	r4, [pc, #172]	; (7688 <application_udp_appcall+0x500>)
    75da:	4941      	ldr	r1, [pc, #260]	; (76e0 <application_udp_appcall+0x558>)
    75dc:	f8df a128 	ldr.w	sl, [pc, #296]	; 7708 <application_udp_appcall+0x580>
    75e0:	463a      	mov	r2, r7
    75e2:	4620      	mov	r0, r4
    75e4:	47d0      	blx	sl
					memmove(&PLAINTEXT[SAMPLE_BUFFER_SIZE], cardBch1_samplebuffer, SAMPLE_BUFFER_SIZE);
    75e6:	463a      	mov	r2, r7
    75e8:	493e      	ldr	r1, [pc, #248]	; (76e4 <application_udp_appcall+0x55c>)
					memmove(CIPHERTEXT, PLAINTEXT, (SAMPLE_BUFFER_SIZE * 2) + 6);													// If no encryption compiled, then just copy over plain-text into [UDP] buffer
    75ea:	4f29      	ldr	r7, [pc, #164]	; (7690 <application_udp_appcall+0x508>)
					memmove(&PLAINTEXT[SAMPLE_BUFFER_SIZE], cardBch1_samplebuffer, SAMPLE_BUFFER_SIZE);
    75ec:	f504 702b 	add.w	r0, r4, #684	; 0x2ac
    75f0:	47d0      	blx	sl
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 0] = cardBch2_samplebuffer;
    75f2:	4b3d      	ldr	r3, [pc, #244]	; (76e8 <application_udp_appcall+0x560>)
					memmove(CIPHERTEXT, PLAINTEXT, (SAMPLE_BUFFER_SIZE * 2) + 6);													// If no encryption compiled, then just copy over plain-text into [UDP] buffer
    75f4:	6838      	ldr	r0, [r7, #0]
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 0] = cardBch2_samplebuffer;
    75f6:	781b      	ldrb	r3, [r3, #0]
    75f8:	f884 3558 	strb.w	r3, [r4, #1368]	; 0x558
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 1] = cardBch3_samplebuffer;
    75fc:	4b3b      	ldr	r3, [pc, #236]	; (76ec <application_udp_appcall+0x564>)
    75fe:	781b      	ldrb	r3, [r3, #0]
    7600:	f884 3559 	strb.w	r3, [r4, #1369]	; 0x559
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 2] = ID_IDENT_1;
    7604:	2337      	movs	r3, #55	; 0x37
    7606:	f884 355a 	strb.w	r3, [r4, #1370]	; 0x55a
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 3] = ID_IDENT_2;
    760a:	239f      	movs	r3, #159	; 0x9f
    760c:	f884 355b 	strb.w	r3, [r4, #1371]	; 0x55b
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 4] = ID_IDENT_3;
    7610:	231b      	movs	r3, #27
    7612:	f884 355c 	strb.w	r3, [r4, #1372]	; 0x55c
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 5] = ID_IDENT_4;
    7616:	2361      	movs	r3, #97	; 0x61
					memmove(CIPHERTEXT, PLAINTEXT, (SAMPLE_BUFFER_SIZE * 2) + 6);													// If no encryption compiled, then just copy over plain-text into [UDP] buffer
    7618:	f240 525e 	movw	r2, #1374	; 0x55e
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 5] = ID_IDENT_4;
    761c:	f884 355d 	strb.w	r3, [r4, #1373]	; 0x55d
					memmove(CIPHERTEXT, PLAINTEXT, (SAMPLE_BUFFER_SIZE * 2) + 6);													// If no encryption compiled, then just copy over plain-text into [UDP] buffer
    7620:	4621      	mov	r1, r4
    7622:	4b1f      	ldr	r3, [pc, #124]	; (76a0 <application_udp_appcall+0x518>)
    7624:	4798      	blx	r3
					uip_udp_send((SAMPLE_BUFFER_SIZE * 2) + 6);
    7626:	4b1f      	ldr	r3, [pc, #124]	; (76a4 <application_udp_appcall+0x51c>)
    7628:	6838      	ldr	r0, [r7, #0]
    762a:	f240 515e 	movw	r1, #1374	; 0x55e
    762e:	4798      	blx	r3
					if (sentA) {
    7630:	4b2f      	ldr	r3, [pc, #188]	; (76f0 <application_udp_appcall+0x568>)
    7632:	781a      	ldrb	r2, [r3, #0]
    7634:	b122      	cbz	r2, 7640 <application_udp_appcall+0x4b8>
						sentA = 0;
    7636:	701e      	strb	r6, [r3, #0]
						card_sampleindex = 0;
    7638:	f8c9 6000 	str.w	r6, [r9]
					xprintf("CardB VibraTek packet send...\r\n");
    763c:	482d      	ldr	r0, [pc, #180]	; (76f4 <application_udp_appcall+0x56c>)
    763e:	e67b      	b.n	7338 <application_udp_appcall+0x1b0>
						sentB = 1;
    7640:	f888 5000 	strb.w	r5, [r8]
    7644:	e7fa      	b.n	763c <application_udp_appcall+0x4b4>
		} else if (uip_conn->lport == htons(RING_MANAGEMENT_SOCKET)) {
    7646:	682b      	ldr	r3, [r5, #0]
    7648:	f640 70a3 	movw	r0, #4003	; 0xfa3
    764c:	889d      	ldrh	r5, [r3, #4]
    764e:	47a0      	blx	r4
    7650:	4285      	cmp	r5, r0
    7652:	d113      	bne.n	767c <application_udp_appcall+0x4f4>
			if ((send_relearn_udp) && (((CONFIG *)&settings_buffer)->loop_basestation)) {
    7654:	4d28      	ldr	r5, [pc, #160]	; (76f8 <application_udp_appcall+0x570>)
    7656:	782b      	ldrb	r3, [r5, #0]
    7658:	b183      	cbz	r3, 767c <application_udp_appcall+0x4f4>
    765a:	4b28      	ldr	r3, [pc, #160]	; (76fc <application_udp_appcall+0x574>)
    765c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
    7660:	b163      	cbz	r3, 767c <application_udp_appcall+0x4f4>
				PLAINTEXT[0] = 0;
    7662:	4b09      	ldr	r3, [pc, #36]	; (7688 <application_udp_appcall+0x500>)
    7664:	2400      	movs	r4, #0
    7666:	701c      	strb	r4, [r3, #0]
				memmove(CIPHERTEXT, PLAINTEXT, 1);
    7668:	4b09      	ldr	r3, [pc, #36]	; (7690 <application_udp_appcall+0x508>)
    766a:	681a      	ldr	r2, [r3, #0]
    766c:	7014      	strb	r4, [r2, #0]
				uip_udp_send(1);
    766e:	6818      	ldr	r0, [r3, #0]
    7670:	4b0c      	ldr	r3, [pc, #48]	; (76a4 <application_udp_appcall+0x51c>)
    7672:	2101      	movs	r1, #1
    7674:	4798      	blx	r3
				send_relearn_udp = 0;
    7676:	702c      	strb	r4, [r5, #0]
				xprintf("Topology update packet send...\r\n");
    7678:	4821      	ldr	r0, [pc, #132]	; (7700 <application_udp_appcall+0x578>)
    767a:	e65d      	b.n	7338 <application_udp_appcall+0x1b0>
    767c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7680:	20007c57 	.word	0x20007c57
    7684:	20007c55 	.word	0x20007c55
    7688:	20007855 	.word	0x20007855
    768c:	20008534 	.word	0x20008534
    7690:	20008564 	.word	0x20008564
    7694:	2000825b 	.word	0x2000825b
    7698:	20007f9a 	.word	0x20007f9a
    769c:	20007574 	.word	0x20007574
    76a0:	0000b311 	.word	0x0000b311
    76a4:	0000a3a5 	.word	0x0000a3a5
    76a8:	0000d8c2 	.word	0x0000d8c2
    76ac:	20008275 	.word	0x20008275
    76b0:	20007c58 	.word	0x20007c58
    76b4:	20007840 	.word	0x20007840
    76b8:	20007572 	.word	0x20007572
    76bc:	2000757e 	.word	0x2000757e
    76c0:	0000d8e1 	.word	0x0000d8e1
    76c4:	20008540 	.word	0x20008540
    76c8:	20007fa2 	.word	0x20007fa2
    76cc:	20007c56 	.word	0x20007c56
    76d0:	20007584 	.word	0x20007584
    76d4:	2000853f 	.word	0x2000853f
    76d8:	20008258 	.word	0x20008258
    76dc:	0000d901 	.word	0x0000d901
    76e0:	20007fa4 	.word	0x20007fa4
    76e4:	20007590 	.word	0x20007590
    76e8:	20007577 	.word	0x20007577
    76ec:	20007578 	.word	0x20007578
    76f0:	20007fa1 	.word	0x20007fa1
    76f4:	0000d920 	.word	0x0000d920
    76f8:	20008259 	.word	0x20008259
    76fc:	20007f14 	.word	0x20007f14
    7700:	0000d940 	.word	0x0000d940
    7704:	20008528 	.word	0x20008528
    7708:	0000b2fb 	.word	0x0000b2fb

0000770c <main_loop>:
{
    770c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	command_dataw[1] = 0x00;
    7710:	4d98      	ldr	r5, [pc, #608]	; (7974 <main_loop+0x268>)
{
    7712:	b08b      	sub	sp, #44	; 0x2c
	command_dataw[1] = 0x00;
    7714:	2300      	movs	r3, #0
    7716:	706b      	strb	r3, [r5, #1]
	command_dataw[2] = 0x00;
    7718:	70ab      	strb	r3, [r5, #2]
	broadcast_storm = 0;
    771a:	9304      	str	r3, [sp, #16]
	key_check = 0;
    771c:	461c      	mov	r4, r3
	eth_check = 0;
    771e:	461e      	mov	r6, r3
		loopcount++;
    7720:	4b95      	ldr	r3, [pc, #596]	; (7978 <main_loop+0x26c>)
    7722:	4a95      	ldr	r2, [pc, #596]	; (7978 <main_loop+0x26c>)
    7724:	681b      	ldr	r3, [r3, #0]
		if (eth_check == 1000) {
    7726:	f5b6 7f7a 	cmp.w	r6, #1000	; 0x3e8
		loopcount++;
    772a:	f103 0301 	add.w	r3, r3, #1
    772e:	6013      	str	r3, [r2, #0]
		if (eth_check == 1000) {
    7730:	f040 80f0 	bne.w	7914 <main_loop+0x208>
    7734:	2300      	movs	r3, #0
				if (mac_async_read_len(&ETHERNET_MAC_0) > 0) {
    7736:	f8df 825c 	ldr.w	r8, [pc, #604]	; 7994 <main_loop+0x288>
    773a:	f8df 9264 	ldr.w	r9, [pc, #612]	; 79a0 <main_loop+0x294>
    773e:	9305      	str	r3, [sp, #20]
    7740:	f04f 0b05 	mov.w	fp, #5
    7744:	4640      	mov	r0, r8
    7746:	47c8      	blx	r9
    7748:	2800      	cmp	r0, #0
    774a:	f000 868d 	beq.w	8468 <main_loop+0xd5c>
					uip_len = mac_async_read(&ETHERNET_MAC_0, (uint8_t *)&uip_buf[0], sizeof(uip_buf));
    774e:	4f8b      	ldr	r7, [pc, #556]	; (797c <main_loop+0x270>)
    7750:	f8df a298 	ldr.w	sl, [pc, #664]	; 79ec <main_loop+0x2e0>
    7754:	f240 62a6 	movw	r2, #1702	; 0x6a6
    7758:	4639      	mov	r1, r7
    775a:	4640      	mov	r0, r8
    775c:	47d0      	blx	sl
    775e:	4b88      	ldr	r3, [pc, #544]	; (7980 <main_loop+0x274>)
    7760:	b280      	uxth	r0, r0
				if ((uip_len == 72) && (uip_buf[0] == 0x01) && (uip_buf[1] == 0x80) && (uip_buf[2] == 0xC2) && (uip_buf[3] == 0x00) && (uip_buf[4] == 0x00) && (uip_buf[5] == 0x00) && (uip_buf[6] == 0x01) &&
    7762:	2848      	cmp	r0, #72	; 0x48
					uip_len = mac_async_read(&ETHERNET_MAC_0, (uint8_t *)&uip_buf[0], sizeof(uip_buf));
    7764:	8018      	strh	r0, [r3, #0]
    7766:	463a      	mov	r2, r7
				if ((uip_len == 72) && (uip_buf[0] == 0x01) && (uip_buf[1] == 0x80) && (uip_buf[2] == 0xC2) && (uip_buf[3] == 0x00) && (uip_buf[4] == 0x00) && (uip_buf[5] == 0x00) && (uip_buf[6] == 0x01) &&
    7768:	d166      	bne.n	7838 <main_loop+0x12c>
    776a:	783b      	ldrb	r3, [r7, #0]
    776c:	2b01      	cmp	r3, #1
    776e:	d163      	bne.n	7838 <main_loop+0x12c>
    7770:	787b      	ldrb	r3, [r7, #1]
    7772:	2b80      	cmp	r3, #128	; 0x80
    7774:	d160      	bne.n	7838 <main_loop+0x12c>
    7776:	78bb      	ldrb	r3, [r7, #2]
    7778:	2bc2      	cmp	r3, #194	; 0xc2
    777a:	d15d      	bne.n	7838 <main_loop+0x12c>
    777c:	78fb      	ldrb	r3, [r7, #3]
    777e:	2b00      	cmp	r3, #0
    7780:	d15a      	bne.n	7838 <main_loop+0x12c>
    7782:	793b      	ldrb	r3, [r7, #4]
    7784:	2b00      	cmp	r3, #0
    7786:	d157      	bne.n	7838 <main_loop+0x12c>
    7788:	797b      	ldrb	r3, [r7, #5]
    778a:	2b00      	cmp	r3, #0
    778c:	d154      	bne.n	7838 <main_loop+0x12c>
    778e:	79bb      	ldrb	r3, [r7, #6]
    7790:	2b01      	cmp	r3, #1
    7792:	d151      	bne.n	7838 <main_loop+0x12c>
    7794:	79fb      	ldrb	r3, [r7, #7]
    7796:	2b80      	cmp	r3, #128	; 0x80
    7798:	d14e      	bne.n	7838 <main_loop+0x12c>
				(uip_buf[7] == 0x80) && (uip_buf[8] == 0xC2) && (uip_buf[9] == 0x00) && (uip_buf[10] == 0x00) && (uip_buf[11] == 0x01) && (*((unsigned short int *)&(uip_buf[12])) == 0x01E0) &&
    779a:	7a3b      	ldrb	r3, [r7, #8]
    779c:	2bc2      	cmp	r3, #194	; 0xc2
    779e:	d14b      	bne.n	7838 <main_loop+0x12c>
    77a0:	7a7b      	ldrb	r3, [r7, #9]
    77a2:	2b00      	cmp	r3, #0
    77a4:	d148      	bne.n	7838 <main_loop+0x12c>
    77a6:	7abb      	ldrb	r3, [r7, #10]
    77a8:	2b00      	cmp	r3, #0
    77aa:	d145      	bne.n	7838 <main_loop+0x12c>
    77ac:	7afb      	ldrb	r3, [r7, #11]
    77ae:	2b01      	cmp	r3, #1
    77b0:	d142      	bne.n	7838 <main_loop+0x12c>
    77b2:	89bb      	ldrh	r3, [r7, #12]
    77b4:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
    77b8:	d13e      	bne.n	7838 <main_loop+0x12c>
				(uip_buf[29] == mac_raw[0]) && (uip_buf[30] == mac_raw[1]) && (uip_buf[31] == mac_raw[2]) && (uip_buf[32] == mac_raw[3]) && (uip_buf[33] == mac_raw[4]) && (uip_buf[34] == mac_raw[5])) {
    77ba:	4b72      	ldr	r3, [pc, #456]	; (7984 <main_loop+0x278>)
				(uip_buf[7] == 0x80) && (uip_buf[8] == 0xC2) && (uip_buf[9] == 0x00) && (uip_buf[10] == 0x00) && (uip_buf[11] == 0x01) && (*((unsigned short int *)&(uip_buf[12])) == 0x01E0) &&
    77bc:	7f78      	ldrb	r0, [r7, #29]
    77be:	7819      	ldrb	r1, [r3, #0]
    77c0:	4288      	cmp	r0, r1
    77c2:	d139      	bne.n	7838 <main_loop+0x12c>
				(uip_buf[29] == mac_raw[0]) && (uip_buf[30] == mac_raw[1]) && (uip_buf[31] == mac_raw[2]) && (uip_buf[32] == mac_raw[3]) && (uip_buf[33] == mac_raw[4]) && (uip_buf[34] == mac_raw[5])) {
    77c4:	7fb8      	ldrb	r0, [r7, #30]
    77c6:	7859      	ldrb	r1, [r3, #1]
    77c8:	4288      	cmp	r0, r1
    77ca:	d135      	bne.n	7838 <main_loop+0x12c>
    77cc:	7ff8      	ldrb	r0, [r7, #31]
    77ce:	7899      	ldrb	r1, [r3, #2]
    77d0:	4288      	cmp	r0, r1
    77d2:	d131      	bne.n	7838 <main_loop+0x12c>
    77d4:	f897 0020 	ldrb.w	r0, [r7, #32]
    77d8:	78d9      	ldrb	r1, [r3, #3]
    77da:	4288      	cmp	r0, r1
    77dc:	d12c      	bne.n	7838 <main_loop+0x12c>
    77de:	f897 0021 	ldrb.w	r0, [r7, #33]	; 0x21
    77e2:	7919      	ldrb	r1, [r3, #4]
    77e4:	4288      	cmp	r0, r1
    77e6:	d127      	bne.n	7838 <main_loop+0x12c>
    77e8:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
    77ec:	795b      	ldrb	r3, [r3, #5]
    77ee:	4299      	cmp	r1, r3
    77f0:	d122      	bne.n	7838 <main_loop+0x12c>
					xprintf("BPDU = 1\r\n");
    77f2:	4b65      	ldr	r3, [pc, #404]	; (7988 <main_loop+0x27c>)
    77f4:	4865      	ldr	r0, [pc, #404]	; (798c <main_loop+0x280>)
    77f6:	4798      	blx	r3
					bpdu_arrived = 1;
    77f8:	2301      	movs	r3, #1
    77fa:	9305      	str	r3, [sp, #20]
			for (etherloop = 0; etherloop < 5; etherloop++) {
    77fc:	f1bb 0b01 	subs.w	fp, fp, #1
    7800:	d1a0      	bne.n	7744 <main_loop+0x38>
				if (!broadcast_storm) {
    7802:	9b04      	ldr	r3, [sp, #16]
    7804:	2b00      	cmp	r3, #0
    7806:	f040 8636 	bne.w	8476 <main_loop+0xd6a>
					xprintf("ETHERNET: [broadcast storm] !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n");
    780a:	4861      	ldr	r0, [pc, #388]	; (7990 <main_loop+0x284>)
    780c:	4b5e      	ldr	r3, [pc, #376]	; (7988 <main_loop+0x27c>)
					while (mac_async_read_len(&ETHERNET_MAC_0) > 0) {
    780e:	4f61      	ldr	r7, [pc, #388]	; (7994 <main_loop+0x288>)
						mac_async_read(&ETHERNET_MAC_0, (uint8_t *)&uip_buf[0], sizeof(uip_buf));
    7810:	f8df 8168 	ldr.w	r8, [pc, #360]	; 797c <main_loop+0x270>
					xprintf("ETHERNET: [broadcast storm] !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n");
    7814:	4798      	blx	r3
					writeKSZreg(SPI_KSZ8794_PORT4CONTROL2, 0x00);
    7816:	4b60      	ldr	r3, [pc, #384]	; (7998 <main_loop+0x28c>)
    7818:	9904      	ldr	r1, [sp, #16]
    781a:	2052      	movs	r0, #82	; 0x52
    781c:	4798      	blx	r3
					stormstate = 1;
    781e:	4b5f      	ldr	r3, [pc, #380]	; (799c <main_loop+0x290>)
    7820:	2201      	movs	r2, #1
    7822:	701a      	strb	r2, [r3, #0]
					while (mac_async_read_len(&ETHERNET_MAC_0) > 0) {
    7824:	4638      	mov	r0, r7
    7826:	4b5e      	ldr	r3, [pc, #376]	; (79a0 <main_loop+0x294>)
    7828:	4798      	blx	r3
    782a:	2800      	cmp	r0, #0
    782c:	d12d      	bne.n	788a <main_loop+0x17e>
					broadcast_storm = 1;
    782e:	2301      	movs	r3, #1
    7830:	9304      	str	r3, [sp, #16]
    7832:	e775      	b.n	7720 <main_loop+0x14>
		key_check = 0;
    7834:	4604      	mov	r4, r0
    7836:	e773      	b.n	7720 <main_loop+0x14>
					if (ETH_BUF->type == htons(UIP_ETHTYPE_IP)) {
    7838:	8993      	ldrh	r3, [r2, #12]
    783a:	4f5a      	ldr	r7, [pc, #360]	; (79a4 <main_loop+0x298>)
    783c:	9207      	str	r2, [sp, #28]
    783e:	f44f 6000 	mov.w	r0, #2048	; 0x800
    7842:	9306      	str	r3, [sp, #24]
    7844:	47b8      	blx	r7
    7846:	9b06      	ldr	r3, [sp, #24]
    7848:	9a07      	ldr	r2, [sp, #28]
    784a:	4283      	cmp	r3, r0
    784c:	d10e      	bne.n	786c <main_loop+0x160>
						if (uip_len > 0) {
    784e:	4f4c      	ldr	r7, [pc, #304]	; (7980 <main_loop+0x274>)
						uip_input();
    7850:	4b55      	ldr	r3, [pc, #340]	; (79a8 <main_loop+0x29c>)
    7852:	2001      	movs	r0, #1
    7854:	4798      	blx	r3
						if (uip_len > 0) {
    7856:	883b      	ldrh	r3, [r7, #0]
    7858:	2b00      	cmp	r3, #0
    785a:	d0cf      	beq.n	77fc <main_loop+0xf0>
							uip_arp_out();
    785c:	4b53      	ldr	r3, [pc, #332]	; (79ac <main_loop+0x2a0>)
    785e:	4798      	blx	r3
							mac_async_write(&ETHERNET_MAC_0, (uint8_t *)&uip_buf[0], uip_len);
    7860:	883a      	ldrh	r2, [r7, #0]
							mac_async_write(&ETHERNET_MAC_0, (uint8_t *)&uip_buf[0], uip_len);
    7862:	4946      	ldr	r1, [pc, #280]	; (797c <main_loop+0x270>)
    7864:	4b52      	ldr	r3, [pc, #328]	; (79b0 <main_loop+0x2a4>)
    7866:	4640      	mov	r0, r8
    7868:	4798      	blx	r3
    786a:	e7c7      	b.n	77fc <main_loop+0xf0>
					} else if (ETH_BUF->type == htons (UIP_ETHTYPE_ARP)) {
    786c:	8993      	ldrh	r3, [r2, #12]
    786e:	9306      	str	r3, [sp, #24]
    7870:	f640 0006 	movw	r0, #2054	; 0x806
    7874:	47b8      	blx	r7
    7876:	9b06      	ldr	r3, [sp, #24]
    7878:	4283      	cmp	r3, r0
    787a:	d1bf      	bne.n	77fc <main_loop+0xf0>
						uip_arp_arpin();
    787c:	4b4d      	ldr	r3, [pc, #308]	; (79b4 <main_loop+0x2a8>)
    787e:	4798      	blx	r3
						if (uip_len > 0) {
    7880:	4b3f      	ldr	r3, [pc, #252]	; (7980 <main_loop+0x274>)
    7882:	881a      	ldrh	r2, [r3, #0]
    7884:	2a00      	cmp	r2, #0
    7886:	d0b9      	beq.n	77fc <main_loop+0xf0>
    7888:	e7eb      	b.n	7862 <main_loop+0x156>
						mac_async_read(&ETHERNET_MAC_0, (uint8_t *)&uip_buf[0], sizeof(uip_buf));
    788a:	f240 62a6 	movw	r2, #1702	; 0x6a6
    788e:	4641      	mov	r1, r8
    7890:	4638      	mov	r0, r7
    7892:	47d0      	blx	sl
    7894:	e7c6      	b.n	7824 <main_loop+0x118>
					if (uip_len > 0) {
    7896:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 7980 <main_loop+0x274>
					uip_periodic(loop);
    789a:	f8df a154 	ldr.w	sl, [pc, #340]	; 79f0 <main_loop+0x2e4>
				ip_periodic_check = 0;
    789e:	2600      	movs	r6, #0
    78a0:	701e      	strb	r6, [r3, #0]
    78a2:	46c8      	mov	r8, r9
					uip_periodic(loop);
    78a4:	4b44      	ldr	r3, [pc, #272]	; (79b8 <main_loop+0x2ac>)
    78a6:	4f40      	ldr	r7, [pc, #256]	; (79a8 <main_loop+0x29c>)
    78a8:	4433      	add	r3, r6
    78aa:	2002      	movs	r0, #2
    78ac:	f8ca 3000 	str.w	r3, [sl]
    78b0:	47b8      	blx	r7
					if (uip_len > 0) {
    78b2:	f8b9 3000 	ldrh.w	r3, [r9]
    78b6:	b13b      	cbz	r3, 78c8 <main_loop+0x1bc>
						uip_arp_out();
    78b8:	4b3c      	ldr	r3, [pc, #240]	; (79ac <main_loop+0x2a0>)
    78ba:	4798      	blx	r3
						mac_async_write(&ETHERNET_MAC_0, (uint8_t *)&uip_buf[0], uip_len);
    78bc:	f8b9 2000 	ldrh.w	r2, [r9]
    78c0:	492e      	ldr	r1, [pc, #184]	; (797c <main_loop+0x270>)
    78c2:	4834      	ldr	r0, [pc, #208]	; (7994 <main_loop+0x288>)
    78c4:	4b3a      	ldr	r3, [pc, #232]	; (79b0 <main_loop+0x2a4>)
    78c6:	4798      	blx	r3
    78c8:	3674      	adds	r6, #116	; 0x74
				for (loop = 0; loop < UIP_UDP_CONNS; loop++) {
    78ca:	f5b6 6f91 	cmp.w	r6, #1160	; 0x488
    78ce:	d1e9      	bne.n	78a4 <main_loop+0x198>
					uip_udp_periodic(loop);
    78d0:	f8df 9120 	ldr.w	r9, [pc, #288]	; 79f4 <main_loop+0x2e8>
    78d4:	f8df a120 	ldr.w	sl, [pc, #288]	; 79f8 <main_loop+0x2ec>
						uip_arp_out();
    78d8:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 79ac <main_loop+0x2a0>
    78dc:	2600      	movs	r6, #0
					uip_udp_periodic(loop);
    78de:	eb06 030a 	add.w	r3, r6, sl
    78e2:	2005      	movs	r0, #5
    78e4:	f8c9 3000 	str.w	r3, [r9]
    78e8:	47b8      	blx	r7
					if (uip_len > 0) {
    78ea:	f8b8 3000 	ldrh.w	r3, [r8]
    78ee:	b133      	cbz	r3, 78fe <main_loop+0x1f2>
						uip_arp_out();
    78f0:	47d8      	blx	fp
						mac_async_write(&ETHERNET_MAC_0, (uint8_t *)&uip_buf[0], uip_len);
    78f2:	f8b8 2000 	ldrh.w	r2, [r8]
    78f6:	4921      	ldr	r1, [pc, #132]	; (797c <main_loop+0x270>)
    78f8:	4826      	ldr	r0, [pc, #152]	; (7994 <main_loop+0x288>)
    78fa:	4b2d      	ldr	r3, [pc, #180]	; (79b0 <main_loop+0x2a4>)
    78fc:	4798      	blx	r3
    78fe:	3664      	adds	r6, #100	; 0x64
				for (loop = 0; loop < UIP_UDP_CONNS; loop++) {
    7900:	f5b6 7f7a 	cmp.w	r6, #1000	; 0x3e8
    7904:	d1eb      	bne.n	78de <main_loop+0x1d2>
    7906:	f000 bdbb 	b.w	8480 <main_loop+0xd74>
				arp_check = 0;
    790a:	701e      	strb	r6, [r3, #0]
				uip_arp_timer();
    790c:	4b2b      	ldr	r3, [pc, #172]	; (79bc <main_loop+0x2b0>)
    790e:	4798      	blx	r3
    7910:	f000 bdbd 	b.w	848e <main_loop+0xd82>
		bpdu_arrived = 0;
    7914:	2300      	movs	r3, #0
			eth_check++;
    7916:	3601      	adds	r6, #1
		bpdu_arrived = 0;
    7918:	9305      	str	r3, [sp, #20]
    791a:	f000 bdb8 	b.w	848e <main_loop+0xd82>
				if ((err = I2C_readMONITOREDINPUT(PC27_CARDA_I2C_SDA,  PC28_CARDA_I2C_CLK, &miniIO_A0_adcH,  &miniIO_A0_adcL))) {
    791e:	215c      	movs	r1, #92	; 0x5c
    7920:	4b27      	ldr	r3, [pc, #156]	; (79c0 <main_loop+0x2b4>)
    7922:	4a28      	ldr	r2, [pc, #160]	; (79c4 <main_loop+0x2b8>)
    7924:	205b      	movs	r0, #91	; 0x5b
    7926:	47d0      	blx	sl
    7928:	4601      	mov	r1, r0
    792a:	b110      	cbz	r0, 7932 <main_loop+0x226>
					xprintf("Could NOT read from the Mini-IO ADC on CARDA:I2C [%i]\r\n", err);
    792c:	4826      	ldr	r0, [pc, #152]	; (79c8 <main_loop+0x2bc>)
    792e:	4b16      	ldr	r3, [pc, #88]	; (7988 <main_loop+0x27c>)
    7930:	4798      	blx	r3
				if ((err = I2C_configMONITOREDINPUTS(PC27_CARDA_I2C_SDA,  PC28_CARDA_I2C_CLK, 1))) {
    7932:	2201      	movs	r2, #1
    7934:	f000 be45 	b.w	85c2 <main_loop+0xeb6>
				if ((err = I2C_readMONITOREDINPUT(PB24_CARDB_I2C_SDA,  PB25_CARDB_I2C_CLK, &miniIO_B0_adcH,  &miniIO_B0_adcL))) {
    7938:	2139      	movs	r1, #57	; 0x39
    793a:	4b24      	ldr	r3, [pc, #144]	; (79cc <main_loop+0x2c0>)
    793c:	4a24      	ldr	r2, [pc, #144]	; (79d0 <main_loop+0x2c4>)
    793e:	2038      	movs	r0, #56	; 0x38
    7940:	47d0      	blx	sl
    7942:	4601      	mov	r1, r0
    7944:	b110      	cbz	r0, 794c <main_loop+0x240>
					xprintf("Could NOT read from the Mini-IO ADC on CARDB:I2C [%i]\r\n", err);
    7946:	4823      	ldr	r0, [pc, #140]	; (79d4 <main_loop+0x2c8>)
    7948:	4b0f      	ldr	r3, [pc, #60]	; (7988 <main_loop+0x27c>)
    794a:	4798      	blx	r3
				if ((err = I2C_configMONITOREDINPUTS(PB24_CARDB_I2C_SDA,  PB25_CARDB_I2C_CLK, 1))) {
    794c:	2201      	movs	r2, #1
    794e:	f000 bebf 	b.w	86d0 <main_loop+0xfc4>
				ring_broken = RING_NOTCONFIGURED;
    7952:	2302      	movs	r3, #2
    7954:	f000 bf6e 	b.w	8834 <main_loop+0x1128>
				xprintf("\r\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n");
    7958:	481f      	ldr	r0, [pc, #124]	; (79d8 <main_loop+0x2cc>)
    795a:	47a0      	blx	r4
				xprintf("<CLI DEBUG> [REBOOT] command\r\n");
    795c:	481f      	ldr	r0, [pc, #124]	; (79dc <main_loop+0x2d0>)
    795e:	47a0      	blx	r4
				xprintf(". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n\r\n");
    7960:	481f      	ldr	r0, [pc, #124]	; (79e0 <main_loop+0x2d4>)
				xprintf("\r\r\rRebooting...\r\n");
    7962:	47a0      	blx	r4
				delay_ms(250);
    7964:	4b1f      	ldr	r3, [pc, #124]	; (79e4 <main_loop+0x2d8>)
    7966:	20fa      	movs	r0, #250	; 0xfa
    7968:	4798      	blx	r3
				_reset_mcu();
    796a:	4b1f      	ldr	r3, [pc, #124]	; (79e8 <main_loop+0x2dc>)
    796c:	4798      	blx	r3
		key_check = 0;
    796e:	2400      	movs	r4, #0
				break;
    7970:	e6d6      	b.n	7720 <main_loop+0x14>
    7972:	bf00      	nop
    7974:	20007853 	.word	0x20007853
    7978:	20007580 	.word	0x20007580
    797c:	20008622 	.word	0x20008622
    7980:	20008550 	.word	0x20008550
    7984:	20007f94 	.word	0x20007f94
    7988:	00000395 	.word	0x00000395
    798c:	0000d9da 	.word	0x0000d9da
    7990:	0000d9e5 	.word	0x0000d9e5
    7994:	20007528 	.word	0x20007528
    7998:	0000b245 	.word	0x0000b245
    799c:	2000853c 	.word	0x2000853c
    79a0:	00001615 	.word	0x00001615
    79a4:	0000a39d 	.word	0x0000a39d
    79a8:	00009775 	.word	0x00009775
    79ac:	0000a5fd 	.word	0x0000a5fd
    79b0:	000015a5 	.word	0x000015a5
    79b4:	0000a541 	.word	0x0000a541
    79b8:	2000856c 	.word	0x2000856c
    79bc:	0000a4f1 	.word	0x0000a4f1
    79c0:	20008534 	.word	0x20008534
    79c4:	20007c55 	.word	0x20007c55
    79c8:	0000da93 	.word	0x0000da93
    79cc:	20007c56 	.word	0x20007c56
    79d0:	20007fa2 	.word	0x20007fa2
    79d4:	0000db86 	.word	0x0000db86
    79d8:	0000dc79 	.word	0x0000dc79
    79dc:	0000dcc5 	.word	0x0000dcc5
    79e0:	0000dce4 	.word	0x0000dce4
    79e4:	00001225 	.word	0x00001225
    79e8:	00002301 	.word	0x00002301
    79ec:	000015e1 	.word	0x000015e1
    79f0:	20008568 	.word	0x20008568
    79f4:	20008560 	.word	0x20008560
    79f8:	20008ccc 	.word	0x20008ccc
				xprintf("\r\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n");
    79fc:	489c      	ldr	r0, [pc, #624]	; (7c70 <main_loop+0x564>)
				((CONFIG *)&settings_buffer)->pattern1 = CONFIG_IDENTIFIER1;
    79fe:	4f9d      	ldr	r7, [pc, #628]	; (7c74 <main_loop+0x568>)
				xprintf("\r\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n");
    7a00:	47a0      	blx	r4
				xprintf("<CLI DEBUG> [CONFIGURATION DEFAULT] command\r\n");
    7a02:	489d      	ldr	r0, [pc, #628]	; (7c78 <main_loop+0x56c>)
    7a04:	47a0      	blx	r4
				((CONFIG *)&settings_buffer)->pattern1 = CONFIG_IDENTIFIER1;
    7a06:	2376      	movs	r3, #118	; 0x76
    7a08:	703b      	strb	r3, [r7, #0]
    7a0a:	2336      	movs	r3, #54	; 0x36
    7a0c:	707b      	strb	r3, [r7, #1]
    7a0e:	2345      	movs	r3, #69	; 0x45
    7a10:	70bb      	strb	r3, [r7, #2]
    7a12:	f06f 0301 	mvn.w	r3, #1
    7a16:	70fb      	strb	r3, [r7, #3]
				((CONFIG *)&settings_buffer)->pattern2 = CONFIG_IDENTIFIER2;
    7a18:	f06f 0343 	mvn.w	r3, #67	; 0x43
    7a1c:	713b      	strb	r3, [r7, #4]
    7a1e:	f06f 0315 	mvn.w	r3, #21
    7a22:	717b      	strb	r3, [r7, #5]
    7a24:	237d      	movs	r3, #125	; 0x7d
    7a26:	71bb      	strb	r3, [r7, #6]
    7a28:	f06f 036c 	mvn.w	r3, #108	; 0x6c
				strncpy((char *__restrict)(((CONFIG *)&settings_buffer)->name), "MULTISENSE NEEDS CONFIGURING...", sizeof(((CONFIG *)&settings_buffer)->name));
    7a2c:	2221      	movs	r2, #33	; 0x21
    7a2e:	4993      	ldr	r1, [pc, #588]	; (7c7c <main_loop+0x570>)
				((CONFIG *)&settings_buffer)->pattern2 = CONFIG_IDENTIFIER2;
    7a30:	71fb      	strb	r3, [r7, #7]
				strncpy((char *__restrict)(((CONFIG *)&settings_buffer)->name), "MULTISENSE NEEDS CONFIGURING...", sizeof(((CONFIG *)&settings_buffer)->name));
    7a32:	f107 0008 	add.w	r0, r7, #8
    7a36:	4b92      	ldr	r3, [pc, #584]	; (7c80 <main_loop+0x574>)
    7a38:	4798      	blx	r3
				((CONFIG *)&settings_buffer)->pattern1 = CONFIG_IDENTIFIER1;
    7a3a:	f04f 0800 	mov.w	r8, #0
				((CONFIG *)&settings_buffer)->gain_cardA = 0xFF;
    7a3e:	23ff      	movs	r3, #255	; 0xff
    7a40:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
				((CONFIG *)&settings_buffer)->gain_cardB = 0xFF;
    7a44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				xprintf("MultiSense [configuration FORMATTED]\r\n");
    7a48:	488e      	ldr	r0, [pc, #568]	; (7c84 <main_loop+0x578>)
				((CONFIG *)&settings_buffer)->ID = 0x00000000;
    7a4a:	f887 802c 	strb.w	r8, [r7, #44]	; 0x2c
    7a4e:	f887 802d 	strb.w	r8, [r7, #45]	; 0x2d
    7a52:	f887 802e 	strb.w	r8, [r7, #46]	; 0x2e
    7a56:	f887 802f 	strb.w	r8, [r7, #47]	; 0x2f
				((CONFIG *)&settings_buffer)->loop_basestation = 0;
    7a5a:	f887 802b 	strb.w	r8, [r7, #43]	; 0x2b
				xprintf("MultiSense [configuration FORMATTED]\r\n");
    7a5e:	47a0      	blx	r4
				if (EEprom_settings(settings_buffer, SETTING_STRUCTURE_SIZE, 1) != ERR_NONE) {
    7a60:	2201      	movs	r2, #1
    7a62:	2180      	movs	r1, #128	; 0x80
    7a64:	4638      	mov	r0, r7
    7a66:	4b88      	ldr	r3, [pc, #544]	; (7c88 <main_loop+0x57c>)
    7a68:	4798      	blx	r3
    7a6a:	b110      	cbz	r0, 7a72 <main_loop+0x366>
					xprintf("MultiSense [configuration ERROR WRITING]\r\n");
    7a6c:	4887      	ldr	r0, [pc, #540]	; (7c8c <main_loop+0x580>)
				xprintf("S         [SPEED MAINLOOP] command\r\n\r\n");
    7a6e:	47a0      	blx	r4
    7a70:	e207      	b.n	7e82 <main_loop+0x776>
					xprintf("MultiSense [configuration WRITTEN]\r\n");
    7a72:	4887      	ldr	r0, [pc, #540]	; (7c90 <main_loop+0x584>)
    7a74:	e7fb      	b.n	7a6e <main_loop+0x362>
				xprintf("\r\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n");
    7a76:	487e      	ldr	r0, [pc, #504]	; (7c70 <main_loop+0x564>)
    7a78:	47a0      	blx	r4
				xprintf("<CLI DEBUG> [ID RESET] command\r\n", key);
    7a7a:	4886      	ldr	r0, [pc, #536]	; (7c94 <main_loop+0x588>)
    7a7c:	4649      	mov	r1, r9
    7a7e:	47a0      	blx	r4
				((CONFIG *)&settings_buffer)->ID = 0x00000000;
    7a80:	487c      	ldr	r0, [pc, #496]	; (7c74 <main_loop+0x568>)
    7a82:	2300      	movs	r3, #0
    7a84:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
    7a88:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    7a8c:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
    7a90:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
				if (EEprom_settings(settings_buffer, SETTING_STRUCTURE_SIZE, 1) != ERR_NONE) {
    7a94:	2201      	movs	r2, #1
    7a96:	e007      	b.n	7aa8 <main_loop+0x39c>
				xprintf("\r\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n");
    7a98:	4875      	ldr	r0, [pc, #468]	; (7c70 <main_loop+0x564>)
    7a9a:	47a0      	blx	r4
				xprintf("<CLI DEBUG> [BASESTATION] command\r\n");
    7a9c:	487e      	ldr	r0, [pc, #504]	; (7c98 <main_loop+0x58c>)
    7a9e:	47a0      	blx	r4
				((CONFIG *)&settings_buffer)->loop_basestation = 1;
    7aa0:	4874      	ldr	r0, [pc, #464]	; (7c74 <main_loop+0x568>)
    7aa2:	2201      	movs	r2, #1
    7aa4:	f880 202b 	strb.w	r2, [r0, #43]	; 0x2b
				if (EEprom_settings(settings_buffer, SETTING_STRUCTURE_SIZE, 1) != ERR_NONE) {
    7aa8:	2180      	movs	r1, #128	; 0x80
    7aaa:	4b77      	ldr	r3, [pc, #476]	; (7c88 <main_loop+0x57c>)
    7aac:	4798      	blx	r3
    7aae:	b160      	cbz	r0, 7aca <main_loop+0x3be>
					xprintf("MultiSense [configuration ERROR WRITING]\r\n");
    7ab0:	4876      	ldr	r0, [pc, #472]	; (7c8c <main_loop+0x580>)
					xprintf("MultiSense [configuration WRITTEN]\r\n");
    7ab2:	47a0      	blx	r4
				xprintf("\r\r\rRebooting...\r\n");
    7ab4:	4879      	ldr	r0, [pc, #484]	; (7c9c <main_loop+0x590>)
    7ab6:	e754      	b.n	7962 <main_loop+0x256>
				xprintf("\r\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n");
    7ab8:	486d      	ldr	r0, [pc, #436]	; (7c70 <main_loop+0x564>)
    7aba:	47a0      	blx	r4
				xprintf("<CLI DEBUG> [PASS THROUGH] command\r\n");
    7abc:	4878      	ldr	r0, [pc, #480]	; (7ca0 <main_loop+0x594>)
    7abe:	47a0      	blx	r4
				((CONFIG *)&settings_buffer)->loop_basestation = 0;
    7ac0:	486c      	ldr	r0, [pc, #432]	; (7c74 <main_loop+0x568>)
    7ac2:	2300      	movs	r3, #0
    7ac4:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
    7ac8:	e7e4      	b.n	7a94 <main_loop+0x388>
					xprintf("MultiSense [configuration WRITTEN]\r\n");
    7aca:	4871      	ldr	r0, [pc, #452]	; (7c90 <main_loop+0x584>)
    7acc:	e7f1      	b.n	7ab2 <main_loop+0x3a6>
				xprintf("\r\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .");
    7ace:	4875      	ldr	r0, [pc, #468]	; (7ca4 <main_loop+0x598>)
				xprintf("<CLI DEBUG> ID               = %d", ((CONFIG *)&settings_buffer)->ID);
    7ad0:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 7c74 <main_loop+0x568>
				xprintf("\r\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .");
    7ad4:	47a0      	blx	r4
				xprintf("\r\n");
    7ad6:	4874      	ldr	r0, [pc, #464]	; (7ca8 <main_loop+0x59c>)
    7ad8:	47a0      	blx	r4
				xprintf("<CLI DEBUG> [LIVE BOARD PRINT] command");
    7ada:	4874      	ldr	r0, [pc, #464]	; (7cac <main_loop+0x5a0>)
    7adc:	47a0      	blx	r4
				xprintf("\r\n");
    7ade:	4872      	ldr	r0, [pc, #456]	; (7ca8 <main_loop+0x59c>)
    7ae0:	47a0      	blx	r4
				xprintf("<CLI DEBUG> ID               = %d", ((CONFIG *)&settings_buffer)->ID);
    7ae2:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
    7ae6:	4872      	ldr	r0, [pc, #456]	; (7cb0 <main_loop+0x5a4>)
    7ae8:	47a0      	blx	r4
				xprintf("\r\n");
    7aea:	486f      	ldr	r0, [pc, #444]	; (7ca8 <main_loop+0x59c>)
    7aec:	47a0      	blx	r4
				xprintf("<CLI DEBUG> Name             = %s", ((CONFIG *)&settings_buffer)->name);
    7aee:	f109 0108 	add.w	r1, r9, #8
    7af2:	4870      	ldr	r0, [pc, #448]	; (7cb4 <main_loop+0x5a8>)
    7af4:	47a0      	blx	r4
				xprintf("\r\r\r\r\r\n");
    7af6:	4870      	ldr	r0, [pc, #448]	; (7cb8 <main_loop+0x5ac>)
    7af8:	47a0      	blx	r4
				xprintf("<CLI DEBUG> gainA            = %d", ((CONFIG *)&settings_buffer)->gain_cardA);
    7afa:	f899 1029 	ldrb.w	r1, [r9, #41]	; 0x29
    7afe:	486f      	ldr	r0, [pc, #444]	; (7cbc <main_loop+0x5b0>)
    7b00:	47a0      	blx	r4
				xprintf("\r\n");
    7b02:	4869      	ldr	r0, [pc, #420]	; (7ca8 <main_loop+0x59c>)
    7b04:	47a0      	blx	r4
				xprintf("<CLI DEBUG> gainB            = %d", ((CONFIG *)&settings_buffer)->gain_cardB);
    7b06:	f899 102a 	ldrb.w	r1, [r9, #42]	; 0x2a
    7b0a:	486d      	ldr	r0, [pc, #436]	; (7cc0 <main_loop+0x5b4>)
    7b0c:	47a0      	blx	r4
				xprintf("\r\n");
    7b0e:	4866      	ldr	r0, [pc, #408]	; (7ca8 <main_loop+0x59c>)
    7b10:	47a0      	blx	r4
				xprintf("<CLI DEBUG> Mode             = %s", (((CONFIG *)&settings_buffer)->loop_basestation) ? "BASESTATION" : "PASS-THROUGH");
    7b12:	4a6c      	ldr	r2, [pc, #432]	; (7cc4 <main_loop+0x5b8>)
    7b14:	4b6c      	ldr	r3, [pc, #432]	; (7cc8 <main_loop+0x5bc>)
    7b16:	f899 102b 	ldrb.w	r1, [r9, #43]	; 0x2b
    7b1a:	486c      	ldr	r0, [pc, #432]	; (7ccc <main_loop+0x5c0>)
				if ((readdata_tempmoisture[1] == 0xFF) && (readdata_tempmoisture[0] == 0xFF)) {
    7b1c:	f8df 9224 	ldr.w	r9, [pc, #548]	; 7d44 <main_loop+0x638>
				xprintf("<CLI DEBUG> Mode             = %s", (((CONFIG *)&settings_buffer)->loop_basestation) ? "BASESTATION" : "PASS-THROUGH");
    7b20:	2900      	cmp	r1, #0
    7b22:	bf0c      	ite	eq
    7b24:	4611      	moveq	r1, r2
    7b26:	4619      	movne	r1, r3
    7b28:	47a0      	blx	r4
				xprintf("\r\r\r\r\r\n");
    7b2a:	4863      	ldr	r0, [pc, #396]	; (7cb8 <main_loop+0x5ac>)
    7b2c:	47a0      	blx	r4
				xprintf("<CLI DEBUG> Water1           = %d", (int)readdata_water1);
    7b2e:	4b68      	ldr	r3, [pc, #416]	; (7cd0 <main_loop+0x5c4>)
    7b30:	4868      	ldr	r0, [pc, #416]	; (7cd4 <main_loop+0x5c8>)
    7b32:	7819      	ldrb	r1, [r3, #0]
    7b34:	47a0      	blx	r4
				xprintf("\r\n");
    7b36:	485c      	ldr	r0, [pc, #368]	; (7ca8 <main_loop+0x59c>)
    7b38:	47a0      	blx	r4
				xprintf("<CLI DEBUG> Water2           = %d", (int)readdata_water2);
    7b3a:	4b67      	ldr	r3, [pc, #412]	; (7cd8 <main_loop+0x5cc>)
    7b3c:	4867      	ldr	r0, [pc, #412]	; (7cdc <main_loop+0x5d0>)
    7b3e:	7819      	ldrb	r1, [r3, #0]
    7b40:	47a0      	blx	r4
				xprintf("\r\n");
    7b42:	4859      	ldr	r0, [pc, #356]	; (7ca8 <main_loop+0x59c>)
    7b44:	47a0      	blx	r4
				xprintf("<CLI DEBUG> HV               = %d", (int)highvoltage);
    7b46:	4b66      	ldr	r3, [pc, #408]	; (7ce0 <main_loop+0x5d4>)
    7b48:	4866      	ldr	r0, [pc, #408]	; (7ce4 <main_loop+0x5d8>)
    7b4a:	7819      	ldrb	r1, [r3, #0]
    7b4c:	47a0      	blx	r4
				xprintf("\r\n");
    7b4e:	4856      	ldr	r0, [pc, #344]	; (7ca8 <main_loop+0x59c>)
    7b50:	47a0      	blx	r4
				if ((readdata_tempmoisture[1] == 0xFF) && (readdata_tempmoisture[0] == 0xFF)) {
    7b52:	f899 1001 	ldrb.w	r1, [r9, #1]
    7b56:	29ff      	cmp	r1, #255	; 0xff
    7b58:	f040 80fa 	bne.w	7d50 <main_loop+0x644>
    7b5c:	f899 3000 	ldrb.w	r3, [r9]
    7b60:	2bff      	cmp	r3, #255	; 0xff
    7b62:	f040 80f5 	bne.w	7d50 <main_loop+0x644>
					xprintf("<CLI DEBUG> Temp             = ERROR");
    7b66:	4860      	ldr	r0, [pc, #384]	; (7ce8 <main_loop+0x5dc>)
    7b68:	47a0      	blx	r4
				xprintf("\r\n");
    7b6a:	484f      	ldr	r0, [pc, #316]	; (7ca8 <main_loop+0x59c>)
    7b6c:	47a0      	blx	r4
				if ((readdata_tempmoisture[3] == 0xFF) && (readdata_tempmoisture[2] == 0xFF)) {
    7b6e:	f899 1003 	ldrb.w	r1, [r9, #3]
    7b72:	29ff      	cmp	r1, #255	; 0xff
    7b74:	f040 8104 	bne.w	7d80 <main_loop+0x674>
    7b78:	f899 3002 	ldrb.w	r3, [r9, #2]
    7b7c:	2bff      	cmp	r3, #255	; 0xff
    7b7e:	f040 80ff 	bne.w	7d80 <main_loop+0x674>
					xprintf("<CLI DEBUG> Humidity         = ERROR");
    7b82:	485a      	ldr	r0, [pc, #360]	; (7cec <main_loop+0x5e0>)
    7b84:	47a0      	blx	r4
				xprintf("\r\n");
    7b86:	4848      	ldr	r0, [pc, #288]	; (7ca8 <main_loop+0x59c>)
				xprintf("<CLI DEBUG> Port1            = %s", (link_port1) ? "LINK OK" : "LINK DOWN");
    7b88:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 7d48 <main_loop+0x63c>
    7b8c:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 7d4c <main_loop+0x640>
				xprintf("\r\n");
    7b90:	47a0      	blx	r4
				xprintf("<CLI DEBUG> Tamper           = %s", (tamper) ? "UP" : "DOWN");
    7b92:	4b57      	ldr	r3, [pc, #348]	; (7cf0 <main_loop+0x5e4>)
    7b94:	4a57      	ldr	r2, [pc, #348]	; (7cf4 <main_loop+0x5e8>)
    7b96:	7819      	ldrb	r1, [r3, #0]
    7b98:	4b57      	ldr	r3, [pc, #348]	; (7cf8 <main_loop+0x5ec>)
    7b9a:	4858      	ldr	r0, [pc, #352]	; (7cfc <main_loop+0x5f0>)
    7b9c:	2900      	cmp	r1, #0
    7b9e:	bf0c      	ite	eq
    7ba0:	4611      	moveq	r1, r2
    7ba2:	4619      	movne	r1, r3
    7ba4:	47a0      	blx	r4
				xprintf("\r\r\r\r\n");
    7ba6:	4856      	ldr	r0, [pc, #344]	; (7d00 <main_loop+0x5f4>)
    7ba8:	47a0      	blx	r4
				xprintf("<CLI DEBUG> Port1            = %s", (link_port1) ? "LINK OK" : "LINK DOWN");
    7baa:	4b56      	ldr	r3, [pc, #344]	; (7d04 <main_loop+0x5f8>)
    7bac:	4856      	ldr	r0, [pc, #344]	; (7d08 <main_loop+0x5fc>)
    7bae:	7819      	ldrb	r1, [r3, #0]
    7bb0:	2900      	cmp	r1, #0
    7bb2:	bf0c      	ite	eq
    7bb4:	4651      	moveq	r1, sl
    7bb6:	4649      	movne	r1, r9
    7bb8:	47a0      	blx	r4
				xprintf("\r\r\r\r\n");
    7bba:	4851      	ldr	r0, [pc, #324]	; (7d00 <main_loop+0x5f4>)
    7bbc:	47a0      	blx	r4
				xprintf("<CLI DEBUG> Port2            = %s", (link_port2) ? "LINK OK" : "LINK DOWN");
    7bbe:	4b53      	ldr	r3, [pc, #332]	; (7d0c <main_loop+0x600>)
    7bc0:	4853      	ldr	r0, [pc, #332]	; (7d10 <main_loop+0x604>)
    7bc2:	7819      	ldrb	r1, [r3, #0]
    7bc4:	2900      	cmp	r1, #0
    7bc6:	bf0c      	ite	eq
    7bc8:	4651      	moveq	r1, sl
    7bca:	4649      	movne	r1, r9
    7bcc:	47a0      	blx	r4
				xprintf("\r\r\r\r\n");
    7bce:	484c      	ldr	r0, [pc, #304]	; (7d00 <main_loop+0x5f4>)
    7bd0:	47a0      	blx	r4
				xprintf("<CLI DEBUG> Port3            = %s", (link_port3) ? "LINK OK" : "LINK DOWN");
    7bd2:	4b50      	ldr	r3, [pc, #320]	; (7d14 <main_loop+0x608>)
    7bd4:	4850      	ldr	r0, [pc, #320]	; (7d18 <main_loop+0x60c>)
    7bd6:	7819      	ldrb	r1, [r3, #0]
    7bd8:	2900      	cmp	r1, #0
    7bda:	bf0c      	ite	eq
    7bdc:	4651      	moveq	r1, sl
    7bde:	4649      	movne	r1, r9
    7be0:	47a0      	blx	r4
				xprintf("\r\r\r\r\n");
    7be2:	4847      	ldr	r0, [pc, #284]	; (7d00 <main_loop+0x5f4>)
    7be4:	47a0      	blx	r4
				xprintf("<CLI DEBUG> CardA            = %s", (cardA_type == CARD_NOTFITTED) ? "NOT FITTED" : (cardA_type == CARD_VIBRAPOINT) ? "VibraPoint" : (cardA_type == CARD_VIBRATEK) ? "VibraTek" :
    7be6:	f898 3000 	ldrb.w	r3, [r8]
    7bea:	2b00      	cmp	r3, #0
    7bec:	f000 80d3 	beq.w	7d96 <main_loop+0x68a>
    7bf0:	2b04      	cmp	r3, #4
    7bf2:	f000 80d2 	beq.w	7d9a <main_loop+0x68e>
    7bf6:	2b01      	cmp	r3, #1
    7bf8:	f000 80d1 	beq.w	7d9e <main_loop+0x692>
					                                             (cardA_type == CARD_MAXI_IO) ? "Maxi IO" : (cardA_type == CARD_MINI_IO) ? "Mini IO" : (cardA_type == CARD_PE) ? "P&E" : "Unknown");
    7bfc:	2b03      	cmp	r3, #3
    7bfe:	f000 80d0 	beq.w	7da2 <main_loop+0x696>
    7c02:	2b02      	cmp	r3, #2
    7c04:	f000 80cf 	beq.w	7da6 <main_loop+0x69a>
    7c08:	4a44      	ldr	r2, [pc, #272]	; (7d1c <main_loop+0x610>)
    7c0a:	4945      	ldr	r1, [pc, #276]	; (7d20 <main_loop+0x614>)
    7c0c:	2b05      	cmp	r3, #5
    7c0e:	bf08      	it	eq
    7c10:	4611      	moveq	r1, r2
				xprintf("<CLI DEBUG> CardA            = %s", (cardA_type == CARD_NOTFITTED) ? "NOT FITTED" : (cardA_type == CARD_VIBRAPOINT) ? "VibraPoint" : (cardA_type == CARD_VIBRATEK) ? "VibraTek" :
    7c12:	4844      	ldr	r0, [pc, #272]	; (7d24 <main_loop+0x618>)
    7c14:	47a0      	blx	r4
				xprintf("\r\r\r\r\r\n");
    7c16:	4828      	ldr	r0, [pc, #160]	; (7cb8 <main_loop+0x5ac>)
    7c18:	47a0      	blx	r4
				xprintf("<CLI DEBUG> CardB            = %s", (cardB_type == CARD_NOTFITTED) ? "NOT FITTED" : (cardB_type == CARD_VIBRAPOINT) ? "VibraPoint" : (cardB_type == CARD_VIBRATEK) ? "VibraTek" :
    7c1a:	783b      	ldrb	r3, [r7, #0]
    7c1c:	2b00      	cmp	r3, #0
    7c1e:	f000 80c4 	beq.w	7daa <main_loop+0x69e>
    7c22:	2b04      	cmp	r3, #4
    7c24:	f000 80c3 	beq.w	7dae <main_loop+0x6a2>
    7c28:	2b01      	cmp	r3, #1
    7c2a:	f000 80c2 	beq.w	7db2 <main_loop+0x6a6>
																 (cardB_type == CARD_MAXI_IO) ? "Maxi IO" : (cardB_type == CARD_MINI_IO) ? "Mini IO" : "Unknown");
    7c2e:	2b03      	cmp	r3, #3
    7c30:	f000 80c1 	beq.w	7db6 <main_loop+0x6aa>
    7c34:	4a3c      	ldr	r2, [pc, #240]	; (7d28 <main_loop+0x61c>)
    7c36:	493a      	ldr	r1, [pc, #232]	; (7d20 <main_loop+0x614>)
    7c38:	2b02      	cmp	r3, #2
    7c3a:	bf08      	it	eq
    7c3c:	4611      	moveq	r1, r2
				xprintf("<CLI DEBUG> CardB            = %s", (cardB_type == CARD_NOTFITTED) ? "NOT FITTED" : (cardB_type == CARD_VIBRAPOINT) ? "VibraPoint" : (cardB_type == CARD_VIBRATEK) ? "VibraTek" :
    7c3e:	483b      	ldr	r0, [pc, #236]	; (7d2c <main_loop+0x620>)
    7c40:	47a0      	blx	r4
				xprintf("\r\r\r\r\r\n");
    7c42:	481d      	ldr	r0, [pc, #116]	; (7cb8 <main_loop+0x5ac>)
    7c44:	47a0      	blx	r4
				xprintf("<CLI DEBUG> Ring Topology    = %s", (ring_broken == RING_BROKEN) ? "BROKEN" : (ring_broken == RING_CLOSED) ? "LOOP" : "N/A");
    7c46:	4b3a      	ldr	r3, [pc, #232]	; (7d30 <main_loop+0x624>)
    7c48:	781b      	ldrb	r3, [r3, #0]
    7c4a:	2b01      	cmp	r3, #1
    7c4c:	f000 80b5 	beq.w	7dba <main_loop+0x6ae>
    7c50:	4a38      	ldr	r2, [pc, #224]	; (7d34 <main_loop+0x628>)
    7c52:	4939      	ldr	r1, [pc, #228]	; (7d38 <main_loop+0x62c>)
    7c54:	2b00      	cmp	r3, #0
    7c56:	bf08      	it	eq
    7c58:	4611      	moveq	r1, r2
    7c5a:	4838      	ldr	r0, [pc, #224]	; (7d3c <main_loop+0x630>)
    7c5c:	47a0      	blx	r4
				xprintf("\r\r\r\r\r\n");
    7c5e:	4816      	ldr	r0, [pc, #88]	; (7cb8 <main_loop+0x5ac>)
    7c60:	47a0      	blx	r4
				xprintf("<CLI DEBUG> Firmware         = %d.%d", MULTISENSE_FIRMWARE_MAJOR, MULTISENSE_FIRMWARE_MINOR);
    7c62:	4837      	ldr	r0, [pc, #220]	; (7d40 <main_loop+0x634>)
    7c64:	2201      	movs	r2, #1
    7c66:	2100      	movs	r1, #0
    7c68:	47a0      	blx	r4
				xprintf("\r\n");
    7c6a:	480f      	ldr	r0, [pc, #60]	; (7ca8 <main_loop+0x59c>)
    7c6c:	e6ff      	b.n	7a6e <main_loop+0x362>
    7c6e:	bf00      	nop
    7c70:	0000dc79 	.word	0x0000dc79
    7c74:	20007f14 	.word	0x20007f14
    7c78:	0000dd30 	.word	0x0000dd30
    7c7c:	0000d744 	.word	0x0000d744
    7c80:	0000b3bd 	.word	0x0000b3bd
    7c84:	0000d764 	.word	0x0000d764
    7c88:	0000b1a5 	.word	0x0000b1a5
    7c8c:	0000d78b 	.word	0x0000d78b
    7c90:	0000d7b6 	.word	0x0000d7b6
    7c94:	0000dd5e 	.word	0x0000dd5e
    7c98:	0000dd91 	.word	0x0000dd91
    7c9c:	0000dd7f 	.word	0x0000dd7f
    7ca0:	0000ddb5 	.word	0x0000ddb5
    7ca4:	0000ddda 	.word	0x0000ddda
    7ca8:	0000ee6f 	.word	0x0000ee6f
    7cac:	0000de24 	.word	0x0000de24
    7cb0:	0000de4b 	.word	0x0000de4b
    7cb4:	0000de6d 	.word	0x0000de6d
    7cb8:	0000de8f 	.word	0x0000de8f
    7cbc:	0000de96 	.word	0x0000de96
    7cc0:	0000deb8 	.word	0x0000deb8
    7cc4:	0000d96d 	.word	0x0000d96d
    7cc8:	0000d961 	.word	0x0000d961
    7ccc:	0000deda 	.word	0x0000deda
    7cd0:	2000853e 	.word	0x2000853e
    7cd4:	0000defc 	.word	0x0000defc
    7cd8:	2000852d 	.word	0x2000852d
    7cdc:	0000df1e 	.word	0x0000df1e
    7ce0:	20008535 	.word	0x20008535
    7ce4:	0000df40 	.word	0x0000df40
    7ce8:	0000df62 	.word	0x0000df62
    7cec:	0000dfce 	.word	0x0000dfce
    7cf0:	20007f9b 	.word	0x20007f9b
    7cf4:	0000d98a 	.word	0x0000d98a
    7cf8:	0000d97a 	.word	0x0000d97a
    7cfc:	0000e017 	.word	0x0000e017
    7d00:	0000de90 	.word	0x0000de90
    7d04:	20007571 	.word	0x20007571
    7d08:	0000e039 	.word	0x0000e039
    7d0c:	20008274 	.word	0x20008274
    7d10:	0000e05b 	.word	0x0000e05b
    7d14:	20007575 	.word	0x20007575
    7d18:	0000e07d 	.word	0x0000e07d
    7d1c:	0000d9c6 	.word	0x0000d9c6
    7d20:	0000d9be 	.word	0x0000d9be
    7d24:	0000e09f 	.word	0x0000e09f
    7d28:	0000d9b6 	.word	0x0000d9b6
    7d2c:	0000e0c1 	.word	0x0000e0c1
    7d30:	20008251 	.word	0x20008251
    7d34:	0000d9d5 	.word	0x0000d9d5
    7d38:	0000d9ca 	.word	0x0000d9ca
    7d3c:	0000e0e3 	.word	0x0000e0e3
    7d40:	0000e105 	.word	0x0000e105
    7d44:	20007f9d 	.word	0x20007f9d
    7d48:	0000d985 	.word	0x0000d985
    7d4c:	0000d97d 	.word	0x0000d97d
				} else if ((((((((int)readdata_tempmoisture[0] * 256)) + ((int)readdata_tempmoisture[1])) * 165) / 65536) - 40) >= 0) {
    7d50:	f899 3000 	ldrb.w	r3, [r9]
    7d54:	eb01 2303 	add.w	r3, r1, r3, lsl #8
    7d58:	21a5      	movs	r1, #165	; 0xa5
    7d5a:	4359      	muls	r1, r3
    7d5c:	f5b1 1f20 	cmp.w	r1, #2621440	; 0x280000
    7d60:	db04      	blt.n	7d6c <main_loop+0x660>
					xprintf("<CLI DEBUG> Temp             = %dC", ((((((int)readdata_tempmoisture[0] * 256)) + ((int)readdata_tempmoisture[1])) * 165) / 65536) - 40);
    7d62:	1409      	asrs	r1, r1, #16
    7d64:	484d      	ldr	r0, [pc, #308]	; (7e9c <main_loop+0x790>)
    7d66:	3928      	subs	r1, #40	; 0x28
					xprintf("<CLI DEBUG> Temp             = -%dC", -(((((((int)readdata_tempmoisture[0] * 256)) + ((int)readdata_tempmoisture[1])) * 165) / 65536) - 40));
    7d68:	47a0      	blx	r4
    7d6a:	e6fe      	b.n	7b6a <main_loop+0x45e>
    7d6c:	f06f 01a4 	mvn.w	r1, #164	; 0xa4
    7d70:	4359      	muls	r1, r3
    7d72:	484b      	ldr	r0, [pc, #300]	; (7ea0 <main_loop+0x794>)
    7d74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    7d78:	fb91 f1f3 	sdiv	r1, r1, r3
    7d7c:	3128      	adds	r1, #40	; 0x28
    7d7e:	e7f3      	b.n	7d68 <main_loop+0x65c>
					xprintf("<CLI DEBUG> Humidity         = %d%c", ((int)((((int)readdata_tempmoisture[2] * 256)) + ((int)readdata_tempmoisture[3])) * 100) / 65536, '%');
    7d80:	f899 3002 	ldrb.w	r3, [r9, #2]
    7d84:	4847      	ldr	r0, [pc, #284]	; (7ea4 <main_loop+0x798>)
    7d86:	eb01 2103 	add.w	r1, r1, r3, lsl #8
    7d8a:	2364      	movs	r3, #100	; 0x64
    7d8c:	4359      	muls	r1, r3
    7d8e:	2225      	movs	r2, #37	; 0x25
    7d90:	1409      	asrs	r1, r1, #16
    7d92:	47a0      	blx	r4
    7d94:	e6f7      	b.n	7b86 <main_loop+0x47a>
				xprintf("<CLI DEBUG> CardA            = %s", (cardA_type == CARD_NOTFITTED) ? "NOT FITTED" : (cardA_type == CARD_VIBRAPOINT) ? "VibraPoint" : (cardA_type == CARD_VIBRATEK) ? "VibraTek" :
    7d96:	4944      	ldr	r1, [pc, #272]	; (7ea8 <main_loop+0x79c>)
    7d98:	e73b      	b.n	7c12 <main_loop+0x506>
    7d9a:	4944      	ldr	r1, [pc, #272]	; (7eac <main_loop+0x7a0>)
    7d9c:	e739      	b.n	7c12 <main_loop+0x506>
    7d9e:	4944      	ldr	r1, [pc, #272]	; (7eb0 <main_loop+0x7a4>)
    7da0:	e737      	b.n	7c12 <main_loop+0x506>
					                                             (cardA_type == CARD_MAXI_IO) ? "Maxi IO" : (cardA_type == CARD_MINI_IO) ? "Mini IO" : (cardA_type == CARD_PE) ? "P&E" : "Unknown");
    7da2:	4944      	ldr	r1, [pc, #272]	; (7eb4 <main_loop+0x7a8>)
    7da4:	e735      	b.n	7c12 <main_loop+0x506>
    7da6:	4944      	ldr	r1, [pc, #272]	; (7eb8 <main_loop+0x7ac>)
    7da8:	e733      	b.n	7c12 <main_loop+0x506>
				xprintf("<CLI DEBUG> CardB            = %s", (cardB_type == CARD_NOTFITTED) ? "NOT FITTED" : (cardB_type == CARD_VIBRAPOINT) ? "VibraPoint" : (cardB_type == CARD_VIBRATEK) ? "VibraTek" :
    7daa:	493f      	ldr	r1, [pc, #252]	; (7ea8 <main_loop+0x79c>)
    7dac:	e747      	b.n	7c3e <main_loop+0x532>
    7dae:	493f      	ldr	r1, [pc, #252]	; (7eac <main_loop+0x7a0>)
    7db0:	e745      	b.n	7c3e <main_loop+0x532>
    7db2:	493f      	ldr	r1, [pc, #252]	; (7eb0 <main_loop+0x7a4>)
    7db4:	e743      	b.n	7c3e <main_loop+0x532>
																 (cardB_type == CARD_MAXI_IO) ? "Maxi IO" : (cardB_type == CARD_MINI_IO) ? "Mini IO" : "Unknown");
    7db6:	493f      	ldr	r1, [pc, #252]	; (7eb4 <main_loop+0x7a8>)
    7db8:	e741      	b.n	7c3e <main_loop+0x532>
				xprintf("<CLI DEBUG> Ring Topology    = %s", (ring_broken == RING_BROKEN) ? "BROKEN" : (ring_broken == RING_CLOSED) ? "LOOP" : "N/A");
    7dba:	4940      	ldr	r1, [pc, #256]	; (7ebc <main_loop+0x7b0>)
    7dbc:	e74d      	b.n	7c5a <main_loop+0x54e>
				xprintf("<CLI DEBUG> IP               = %d.%d.%d.%d\r\n", uip_ipaddr1(ipaddr), uip_ipaddr2(ipaddr), uip_ipaddr3(ipaddr), uip_ipaddr4(ipaddr));
    7dbe:	f8df 8130 	ldr.w	r8, [pc, #304]	; 7ef0 <main_loop+0x7e4>
				xprintf("\r\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n");
    7dc2:	483f      	ldr	r0, [pc, #252]	; (7ec0 <main_loop+0x7b4>)
				xprintf("<CLI DEBUG> IP               = %d.%d.%d.%d\r\n", uip_ipaddr1(ipaddr), uip_ipaddr2(ipaddr), uip_ipaddr3(ipaddr), uip_ipaddr4(ipaddr));
    7dc4:	4f3f      	ldr	r7, [pc, #252]	; (7ec4 <main_loop+0x7b8>)
				xprintf("\r\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n");
    7dc6:	47a0      	blx	r4
				xprintf("<CLI DEBUG> [IP SCHEME / NETWORK] command\r\n");
    7dc8:	483f      	ldr	r0, [pc, #252]	; (7ec8 <main_loop+0x7bc>)
    7dca:	47a0      	blx	r4
				xprintf("<CLI DEBUG> IP               = %d.%d.%d.%d\r\n", uip_ipaddr1(ipaddr), uip_ipaddr2(ipaddr), uip_ipaddr3(ipaddr), uip_ipaddr4(ipaddr));
    7dcc:	f8b8 0000 	ldrh.w	r0, [r8]
    7dd0:	47b8      	blx	r7
    7dd2:	4681      	mov	r9, r0
    7dd4:	f8b8 0000 	ldrh.w	r0, [r8]
    7dd8:	47b8      	blx	r7
    7dda:	4682      	mov	sl, r0
    7ddc:	f8b8 0002 	ldrh.w	r0, [r8, #2]
    7de0:	47b8      	blx	r7
    7de2:	4683      	mov	fp, r0
    7de4:	f8b8 0002 	ldrh.w	r0, [r8, #2]
				xprintf("<CLI DEBUG> Netmask          = %d.%d.%d.%d\r\n", uip_ipaddr1(netmask), uip_ipaddr2(netmask), uip_ipaddr3(netmask), uip_ipaddr4(netmask));
    7de8:	f8df 8108 	ldr.w	r8, [pc, #264]	; 7ef4 <main_loop+0x7e8>
				xprintf("<CLI DEBUG> IP               = %d.%d.%d.%d\r\n", uip_ipaddr1(ipaddr), uip_ipaddr2(ipaddr), uip_ipaddr3(ipaddr), uip_ipaddr4(ipaddr));
    7dec:	47b8      	blx	r7
    7dee:	b2c0      	uxtb	r0, r0
    7df0:	f3cb 230f 	ubfx	r3, fp, #8, #16
    7df4:	fa5f f28a 	uxtb.w	r2, sl
    7df8:	f3c9 210f 	ubfx	r1, r9, #8, #16
    7dfc:	9000      	str	r0, [sp, #0]
    7dfe:	4833      	ldr	r0, [pc, #204]	; (7ecc <main_loop+0x7c0>)
    7e00:	47a0      	blx	r4
				xprintf("<CLI DEBUG> Netmask          = %d.%d.%d.%d\r\n", uip_ipaddr1(netmask), uip_ipaddr2(netmask), uip_ipaddr3(netmask), uip_ipaddr4(netmask));
    7e02:	f8b8 0000 	ldrh.w	r0, [r8]
    7e06:	47b8      	blx	r7
    7e08:	4681      	mov	r9, r0
    7e0a:	f8b8 0000 	ldrh.w	r0, [r8]
    7e0e:	47b8      	blx	r7
    7e10:	4682      	mov	sl, r0
    7e12:	f8b8 0002 	ldrh.w	r0, [r8, #2]
    7e16:	47b8      	blx	r7
    7e18:	4683      	mov	fp, r0
    7e1a:	f8b8 0002 	ldrh.w	r0, [r8, #2]
				xprintf("<CLI DEBUG> Gateway          = %d.%d.%d.%d\r\n", uip_ipaddr1(gwaddr), uip_ipaddr2(gwaddr), uip_ipaddr3(gwaddr), uip_ipaddr4(gwaddr));
    7e1e:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 7ef8 <main_loop+0x7ec>
				xprintf("<CLI DEBUG> Netmask          = %d.%d.%d.%d\r\n", uip_ipaddr1(netmask), uip_ipaddr2(netmask), uip_ipaddr3(netmask), uip_ipaddr4(netmask));
    7e22:	47b8      	blx	r7
    7e24:	b2c0      	uxtb	r0, r0
    7e26:	f3cb 230f 	ubfx	r3, fp, #8, #16
    7e2a:	fa5f f28a 	uxtb.w	r2, sl
    7e2e:	f3c9 210f 	ubfx	r1, r9, #8, #16
    7e32:	9000      	str	r0, [sp, #0]
    7e34:	4826      	ldr	r0, [pc, #152]	; (7ed0 <main_loop+0x7c4>)
    7e36:	47a0      	blx	r4
				xprintf("<CLI DEBUG> Gateway          = %d.%d.%d.%d\r\n", uip_ipaddr1(gwaddr), uip_ipaddr2(gwaddr), uip_ipaddr3(gwaddr), uip_ipaddr4(gwaddr));
    7e38:	f8b8 0000 	ldrh.w	r0, [r8]
    7e3c:	47b8      	blx	r7
    7e3e:	4681      	mov	r9, r0
    7e40:	f8b8 0000 	ldrh.w	r0, [r8]
    7e44:	47b8      	blx	r7
    7e46:	4682      	mov	sl, r0
    7e48:	f8b8 0002 	ldrh.w	r0, [r8, #2]
    7e4c:	47b8      	blx	r7
    7e4e:	4683      	mov	fp, r0
    7e50:	f8b8 0002 	ldrh.w	r0, [r8, #2]
    7e54:	47b8      	blx	r7
    7e56:	b2c0      	uxtb	r0, r0
    7e58:	9000      	str	r0, [sp, #0]
    7e5a:	f3cb 230f 	ubfx	r3, fp, #8, #16
    7e5e:	fa5f f28a 	uxtb.w	r2, sl
    7e62:	f3c9 210f 	ubfx	r1, r9, #8, #16
    7e66:	481b      	ldr	r0, [pc, #108]	; (7ed4 <main_loop+0x7c8>)
    7e68:	47a0      	blx	r4
				xprintf("<CLI DEBUG> MAC              = %x:%x:%x:%x:%x:%x\r\n", mac_raw[0], mac_raw[1], mac_raw[2], mac_raw[3], mac_raw[4], mac_raw[5]);
    7e6a:	481b      	ldr	r0, [pc, #108]	; (7ed8 <main_loop+0x7cc>)
    7e6c:	7947      	ldrb	r7, [r0, #5]
    7e6e:	7883      	ldrb	r3, [r0, #2]
    7e70:	7842      	ldrb	r2, [r0, #1]
    7e72:	7801      	ldrb	r1, [r0, #0]
    7e74:	9702      	str	r7, [sp, #8]
    7e76:	7907      	ldrb	r7, [r0, #4]
    7e78:	9701      	str	r7, [sp, #4]
    7e7a:	78c0      	ldrb	r0, [r0, #3]
    7e7c:	9000      	str	r0, [sp, #0]
    7e7e:	4817      	ldr	r0, [pc, #92]	; (7edc <main_loop+0x7d0>)
    7e80:	47a0      	blx	r4
				xprintf(". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n\r\n");
    7e82:	4817      	ldr	r0, [pc, #92]	; (7ee0 <main_loop+0x7d4>)
    7e84:	47a0      	blx	r4
    7e86:	e572      	b.n	796e <main_loop+0x262>
				xprintf("\r\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n");
    7e88:	480d      	ldr	r0, [pc, #52]	; (7ec0 <main_loop+0x7b4>)
    7e8a:	47a0      	blx	r4
				xprintf("<CLI DEBUG> [SPEED MAINLOOP] command\r\n");
    7e8c:	4815      	ldr	r0, [pc, #84]	; (7ee4 <main_loop+0x7d8>)
    7e8e:	47a0      	blx	r4
				xprintf("<CLI DEBUG> Main-loop/Sampling = %d\r\n", looprate);
    7e90:	4b15      	ldr	r3, [pc, #84]	; (7ee8 <main_loop+0x7dc>)
    7e92:	4816      	ldr	r0, [pc, #88]	; (7eec <main_loop+0x7e0>)
    7e94:	6819      	ldr	r1, [r3, #0]
				xprintf("PORT4CONTROL17 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT4CONTROL17));
    7e96:	47a0      	blx	r4
    7e98:	e7f3      	b.n	7e82 <main_loop+0x776>
    7e9a:	bf00      	nop
    7e9c:	0000df87 	.word	0x0000df87
    7ea0:	0000dfaa 	.word	0x0000dfaa
    7ea4:	0000dff3 	.word	0x0000dff3
    7ea8:	0000d99a 	.word	0x0000d99a
    7eac:	0000d98f 	.word	0x0000d98f
    7eb0:	0000d9a5 	.word	0x0000d9a5
    7eb4:	0000d9ae 	.word	0x0000d9ae
    7eb8:	0000d9b6 	.word	0x0000d9b6
    7ebc:	0000d9ce 	.word	0x0000d9ce
    7ec0:	0000dc79 	.word	0x0000dc79
    7ec4:	0000a39d 	.word	0x0000a39d
    7ec8:	0000e12a 	.word	0x0000e12a
    7ecc:	0000e156 	.word	0x0000e156
    7ed0:	0000e183 	.word	0x0000e183
    7ed4:	0000e1b0 	.word	0x0000e1b0
    7ed8:	20007f94 	.word	0x20007f94
    7edc:	0000e1dd 	.word	0x0000e1dd
    7ee0:	0000dce4 	.word	0x0000dce4
    7ee4:	0000e210 	.word	0x0000e210
    7ee8:	20008548 	.word	0x20008548
    7eec:	0000e237 	.word	0x0000e237
    7ef0:	2000758c 	.word	0x2000758c
    7ef4:	20007f10 	.word	0x20007f10
    7ef8:	20008522 	.word	0x20008522
				xprintf("\r\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n");
    7efc:	489d      	ldr	r0, [pc, #628]	; (8174 <main_loop+0xa68>)
				xprintf("FAMILY_ID = %x\r\n", readKSZreg(SPI_KSZ8794_FAMILY_ID));
    7efe:	4f9e      	ldr	r7, [pc, #632]	; (8178 <main_loop+0xa6c>)
				xprintf("\r\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n");
    7f00:	47a0      	blx	r4
				xprintf("\r\n");
    7f02:	489e      	ldr	r0, [pc, #632]	; (817c <main_loop+0xa70>)
    7f04:	47a0      	blx	r4
				xprintf("<CLI DEBUG> [READ MICREL REGISTERS] command");
    7f06:	489e      	ldr	r0, [pc, #632]	; (8180 <main_loop+0xa74>)
    7f08:	47a0      	blx	r4
				xprintf("\r\n");
    7f0a:	489c      	ldr	r0, [pc, #624]	; (817c <main_loop+0xa70>)
    7f0c:	47a0      	blx	r4
				xprintf("FAMILY_ID = %x\r\n", readKSZreg(SPI_KSZ8794_FAMILY_ID));
    7f0e:	2000      	movs	r0, #0
    7f10:	47b8      	blx	r7
    7f12:	4601      	mov	r1, r0
    7f14:	489b      	ldr	r0, [pc, #620]	; (8184 <main_loop+0xa78>)
    7f16:	47a0      	blx	r4
				xprintf("START = %x\r\n", readKSZreg(SPI_KSZ8794_START));
    7f18:	2001      	movs	r0, #1
    7f1a:	47b8      	blx	r7
    7f1c:	4601      	mov	r1, r0
    7f1e:	489a      	ldr	r0, [pc, #616]	; (8188 <main_loop+0xa7c>)
    7f20:	47a0      	blx	r4
				xprintf("GLOBAL0 = %x\r\n", readKSZreg(SPI_KSZ8794_GLOBAL0));
    7f22:	2002      	movs	r0, #2
    7f24:	47b8      	blx	r7
    7f26:	4601      	mov	r1, r0
    7f28:	4898      	ldr	r0, [pc, #608]	; (818c <main_loop+0xa80>)
    7f2a:	47a0      	blx	r4
				xprintf("GLOBAL1 = %x\r\n", readKSZreg(SPI_KSZ8794_GLOBAL1));
    7f2c:	2003      	movs	r0, #3
    7f2e:	47b8      	blx	r7
    7f30:	4601      	mov	r1, r0
    7f32:	4897      	ldr	r0, [pc, #604]	; (8190 <main_loop+0xa84>)
    7f34:	47a0      	blx	r4
				xprintf("GLOBAL2 = %x\r\n", readKSZreg(SPI_KSZ8794_GLOBAL2));
    7f36:	2004      	movs	r0, #4
    7f38:	47b8      	blx	r7
    7f3a:	4601      	mov	r1, r0
    7f3c:	4895      	ldr	r0, [pc, #596]	; (8194 <main_loop+0xa88>)
    7f3e:	47a0      	blx	r4
				xprintf("GLOBAL3 = %x\r\n", readKSZreg(SPI_KSZ8794_GLOBAL3));
    7f40:	2005      	movs	r0, #5
    7f42:	47b8      	blx	r7
    7f44:	4601      	mov	r1, r0
    7f46:	4894      	ldr	r0, [pc, #592]	; (8198 <main_loop+0xa8c>)
    7f48:	47a0      	blx	r4
				xprintf("GLOBAL4 = %x\r\n", readKSZreg(SPI_KSZ8794_GLOBAL4));
    7f4a:	2006      	movs	r0, #6
    7f4c:	47b8      	blx	r7
    7f4e:	4601      	mov	r1, r0
    7f50:	4892      	ldr	r0, [pc, #584]	; (819c <main_loop+0xa90>)
    7f52:	47a0      	blx	r4
				xprintf("GLOBAL5 = %x\r\n", readKSZreg(SPI_KSZ8794_GLOBAL5));
    7f54:	2007      	movs	r0, #7
    7f56:	47b8      	blx	r7
    7f58:	4601      	mov	r1, r0
    7f5a:	4891      	ldr	r0, [pc, #580]	; (81a0 <main_loop+0xa94>)
    7f5c:	47a0      	blx	r4
				xprintf("GLOBAL6 = %x\r\n", readKSZreg(SPI_KSZ8794_GLOBAL6));
    7f5e:	2008      	movs	r0, #8
    7f60:	47b8      	blx	r7
    7f62:	4601      	mov	r1, r0
    7f64:	488f      	ldr	r0, [pc, #572]	; (81a4 <main_loop+0xa98>)
    7f66:	47a0      	blx	r4
				xprintf("GLOBAL9 = %x\r\n", readKSZreg(SPI_KSZ8794_GLOBAL9));
    7f68:	200b      	movs	r0, #11
    7f6a:	47b8      	blx	r7
    7f6c:	4601      	mov	r1, r0
    7f6e:	488e      	ldr	r0, [pc, #568]	; (81a8 <main_loop+0xa9c>)
    7f70:	47a0      	blx	r4
				xprintf("GLOBAL10 = %x\r\n", readKSZreg(SPI_KSZ8794_GLOBAL10));
    7f72:	200c      	movs	r0, #12
    7f74:	47b8      	blx	r7
    7f76:	4601      	mov	r1, r0
    7f78:	488c      	ldr	r0, [pc, #560]	; (81ac <main_loop+0xaa0>)
    7f7a:	47a0      	blx	r4
				xprintf("PDMC1 = %x\r\n", readKSZreg(SPI_KSZ8794_PDMC1));
    7f7c:	200e      	movs	r0, #14
    7f7e:	47b8      	blx	r7
    7f80:	4601      	mov	r1, r0
    7f82:	488b      	ldr	r0, [pc, #556]	; (81b0 <main_loop+0xaa4>)
    7f84:	47a0      	blx	r4
				xprintf("PDMC2 = %x\r\n", readKSZreg(SPI_KSZ8794_PDMC2));
    7f86:	200f      	movs	r0, #15
    7f88:	47b8      	blx	r7
    7f8a:	4601      	mov	r1, r0
    7f8c:	4889      	ldr	r0, [pc, #548]	; (81b4 <main_loop+0xaa8>)
    7f8e:	47a0      	blx	r4
				xprintf("PORT1CONTROL0 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT1CONTROL0));
    7f90:	2010      	movs	r0, #16
    7f92:	47b8      	blx	r7
    7f94:	4601      	mov	r1, r0
    7f96:	4888      	ldr	r0, [pc, #544]	; (81b8 <main_loop+0xaac>)
    7f98:	47a0      	blx	r4
				xprintf("PORT2CONTROL0 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT2CONTROL0));
    7f9a:	2020      	movs	r0, #32
    7f9c:	47b8      	blx	r7
    7f9e:	4601      	mov	r1, r0
    7fa0:	4886      	ldr	r0, [pc, #536]	; (81bc <main_loop+0xab0>)
    7fa2:	47a0      	blx	r4
				xprintf("PORT3CONTROL0 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT3CONTROL0));	
    7fa4:	2030      	movs	r0, #48	; 0x30
    7fa6:	47b8      	blx	r7
    7fa8:	4601      	mov	r1, r0
    7faa:	4885      	ldr	r0, [pc, #532]	; (81c0 <main_loop+0xab4>)
    7fac:	47a0      	blx	r4
				xprintf("PORT4CONTROL0 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT4CONTROL0));
    7fae:	2050      	movs	r0, #80	; 0x50
    7fb0:	47b8      	blx	r7
    7fb2:	4601      	mov	r1, r0
    7fb4:	4883      	ldr	r0, [pc, #524]	; (81c4 <main_loop+0xab8>)
    7fb6:	47a0      	blx	r4
				xprintf("PORT1CONTROL1 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT1CONTROL1));	
    7fb8:	2011      	movs	r0, #17
    7fba:	47b8      	blx	r7
    7fbc:	4601      	mov	r1, r0
    7fbe:	4882      	ldr	r0, [pc, #520]	; (81c8 <main_loop+0xabc>)
    7fc0:	47a0      	blx	r4
				xprintf("PORT2CONTROL1 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT2CONTROL1));
    7fc2:	2021      	movs	r0, #33	; 0x21
    7fc4:	47b8      	blx	r7
    7fc6:	4601      	mov	r1, r0
    7fc8:	4880      	ldr	r0, [pc, #512]	; (81cc <main_loop+0xac0>)
    7fca:	47a0      	blx	r4
				xprintf("PORT3CONTROL1 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT3CONTROL1));
    7fcc:	2031      	movs	r0, #49	; 0x31
    7fce:	47b8      	blx	r7
    7fd0:	4601      	mov	r1, r0
    7fd2:	487f      	ldr	r0, [pc, #508]	; (81d0 <main_loop+0xac4>)
    7fd4:	47a0      	blx	r4
				xprintf("PORT4CONTROL1 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT4CONTROL1));	
    7fd6:	2051      	movs	r0, #81	; 0x51
    7fd8:	47b8      	blx	r7
    7fda:	4601      	mov	r1, r0
    7fdc:	487d      	ldr	r0, [pc, #500]	; (81d4 <main_loop+0xac8>)
    7fde:	47a0      	blx	r4
				xprintf("PORT1CONTROL2 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT1CONTROL2));
    7fe0:	2012      	movs	r0, #18
    7fe2:	47b8      	blx	r7
    7fe4:	4601      	mov	r1, r0
    7fe6:	487c      	ldr	r0, [pc, #496]	; (81d8 <main_loop+0xacc>)
    7fe8:	47a0      	blx	r4
				xprintf("PORT2CONTROL2 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT2CONTROL2));
    7fea:	2022      	movs	r0, #34	; 0x22
    7fec:	47b8      	blx	r7
    7fee:	4601      	mov	r1, r0
    7ff0:	487a      	ldr	r0, [pc, #488]	; (81dc <main_loop+0xad0>)
    7ff2:	47a0      	blx	r4
				xprintf("PORT3CONTROL2 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT3CONTROL2));
    7ff4:	2032      	movs	r0, #50	; 0x32
    7ff6:	47b8      	blx	r7
    7ff8:	4601      	mov	r1, r0
    7ffa:	4879      	ldr	r0, [pc, #484]	; (81e0 <main_loop+0xad4>)
    7ffc:	47a0      	blx	r4
				xprintf("PORT4CONTROL2 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT4CONTROL2));
    7ffe:	2052      	movs	r0, #82	; 0x52
    8000:	47b8      	blx	r7
    8002:	4601      	mov	r1, r0
    8004:	4877      	ldr	r0, [pc, #476]	; (81e4 <main_loop+0xad8>)
    8006:	47a0      	blx	r4
				xprintf("PORT1CONTROL3 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT1CONTROL3));
    8008:	2013      	movs	r0, #19
    800a:	47b8      	blx	r7
    800c:	4601      	mov	r1, r0
    800e:	4876      	ldr	r0, [pc, #472]	; (81e8 <main_loop+0xadc>)
    8010:	47a0      	blx	r4
				xprintf("PORT2CONTROL3 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT2CONTROL3));
    8012:	2023      	movs	r0, #35	; 0x23
    8014:	47b8      	blx	r7
    8016:	4601      	mov	r1, r0
    8018:	4874      	ldr	r0, [pc, #464]	; (81ec <main_loop+0xae0>)
    801a:	47a0      	blx	r4
				xprintf("PORT3CONTROL3 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT3CONTROL3));
    801c:	2033      	movs	r0, #51	; 0x33
    801e:	47b8      	blx	r7
    8020:	4601      	mov	r1, r0
    8022:	4873      	ldr	r0, [pc, #460]	; (81f0 <main_loop+0xae4>)
    8024:	47a0      	blx	r4
				xprintf("PORT4CONTROL3 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT4CONTROL3));
    8026:	2053      	movs	r0, #83	; 0x53
    8028:	47b8      	blx	r7
    802a:	4601      	mov	r1, r0
    802c:	4871      	ldr	r0, [pc, #452]	; (81f4 <main_loop+0xae8>)
    802e:	47a0      	blx	r4
				xprintf("PORT1CONTROL4 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT1CONTROL4));
    8030:	2014      	movs	r0, #20
    8032:	47b8      	blx	r7
    8034:	4601      	mov	r1, r0
    8036:	4870      	ldr	r0, [pc, #448]	; (81f8 <main_loop+0xaec>)
    8038:	47a0      	blx	r4
				xprintf("PORT2CONTROL4 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT2CONTROL4));
    803a:	2024      	movs	r0, #36	; 0x24
    803c:	47b8      	blx	r7
    803e:	4601      	mov	r1, r0
    8040:	486e      	ldr	r0, [pc, #440]	; (81fc <main_loop+0xaf0>)
    8042:	47a0      	blx	r4
				xprintf("PORT3CONTROL4 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT3CONTROL4));
    8044:	2034      	movs	r0, #52	; 0x34
    8046:	47b8      	blx	r7
    8048:	4601      	mov	r1, r0
    804a:	486d      	ldr	r0, [pc, #436]	; (8200 <main_loop+0xaf4>)
    804c:	47a0      	blx	r4
				xprintf("PORT4CONTROL4 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT4CONTROL4));
    804e:	2054      	movs	r0, #84	; 0x54
    8050:	47b8      	blx	r7
    8052:	4601      	mov	r1, r0
    8054:	486b      	ldr	r0, [pc, #428]	; (8204 <main_loop+0xaf8>)
    8056:	47a0      	blx	r4
				xprintf("PORT1CONTROL5 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT1CONTROL5));
    8058:	2015      	movs	r0, #21
    805a:	47b8      	blx	r7
    805c:	4601      	mov	r1, r0
    805e:	486a      	ldr	r0, [pc, #424]	; (8208 <main_loop+0xafc>)
    8060:	47a0      	blx	r4
				xprintf("PORT2CONTROL5 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT2CONTROL5));
    8062:	2025      	movs	r0, #37	; 0x25
    8064:	47b8      	blx	r7
    8066:	4601      	mov	r1, r0
    8068:	4868      	ldr	r0, [pc, #416]	; (820c <main_loop+0xb00>)
    806a:	47a0      	blx	r4
				xprintf("PORT3CONTROL5 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT3CONTROL5));
    806c:	2035      	movs	r0, #53	; 0x35
    806e:	47b8      	blx	r7
    8070:	4601      	mov	r1, r0
    8072:	4867      	ldr	r0, [pc, #412]	; (8210 <main_loop+0xb04>)
    8074:	47a0      	blx	r4
				xprintf("PORT4CONTROL5 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT4CONTROL5));
    8076:	2055      	movs	r0, #85	; 0x55
    8078:	47b8      	blx	r7
    807a:	4601      	mov	r1, r0
    807c:	4865      	ldr	r0, [pc, #404]	; (8214 <main_loop+0xb08>)
    807e:	47a0      	blx	r4
				xprintf("PORT4CONTROL6 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT4CONTROL6));
    8080:	2056      	movs	r0, #86	; 0x56
    8082:	47b8      	blx	r7
    8084:	4601      	mov	r1, r0
    8086:	4864      	ldr	r0, [pc, #400]	; (8218 <main_loop+0xb0c>)
    8088:	47a0      	blx	r4
				xprintf("PORT1CONTROL7 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT1CONTROL7));
    808a:	2017      	movs	r0, #23
    808c:	47b8      	blx	r7
    808e:	4601      	mov	r1, r0
    8090:	4862      	ldr	r0, [pc, #392]	; (821c <main_loop+0xb10>)
    8092:	47a0      	blx	r4
				xprintf("PORT2CONTROL7 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT2CONTROL7));
    8094:	2027      	movs	r0, #39	; 0x27
    8096:	47b8      	blx	r7
    8098:	4601      	mov	r1, r0
    809a:	4861      	ldr	r0, [pc, #388]	; (8220 <main_loop+0xb14>)
    809c:	47a0      	blx	r4
				xprintf("PORT3CONTROL7 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT3CONTROL7));
    809e:	2037      	movs	r0, #55	; 0x37
    80a0:	47b8      	blx	r7
    80a2:	4601      	mov	r1, r0
    80a4:	485f      	ldr	r0, [pc, #380]	; (8224 <main_loop+0xb18>)
    80a6:	47a0      	blx	r4
				xprintf("PORT1CONTROL8 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT1CONTROL8));
    80a8:	201a      	movs	r0, #26
    80aa:	47b8      	blx	r7
    80ac:	4601      	mov	r1, r0
    80ae:	485e      	ldr	r0, [pc, #376]	; (8228 <main_loop+0xb1c>)
    80b0:	47a0      	blx	r4
				xprintf("PORT2CONTROL8 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT2CONTROL8));
    80b2:	202a      	movs	r0, #42	; 0x2a
    80b4:	47b8      	blx	r7
    80b6:	4601      	mov	r1, r0
    80b8:	485c      	ldr	r0, [pc, #368]	; (822c <main_loop+0xb20>)
    80ba:	47a0      	blx	r4
				xprintf("PORT3CONTROL8 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT3CONTROL8));
    80bc:	203a      	movs	r0, #58	; 0x3a
    80be:	47b8      	blx	r7
    80c0:	4601      	mov	r1, r0
    80c2:	485b      	ldr	r0, [pc, #364]	; (8230 <main_loop+0xb24>)
    80c4:	47a0      	blx	r4
				xprintf("PORT1STATUS0 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT1STATUS0));
    80c6:	2018      	movs	r0, #24
    80c8:	47b8      	blx	r7
    80ca:	4601      	mov	r1, r0
    80cc:	4859      	ldr	r0, [pc, #356]	; (8234 <main_loop+0xb28>)
    80ce:	47a0      	blx	r4
				xprintf("PORT2STATUS0 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT2STATUS0));
    80d0:	2028      	movs	r0, #40	; 0x28
    80d2:	47b8      	blx	r7
    80d4:	4601      	mov	r1, r0
    80d6:	4858      	ldr	r0, [pc, #352]	; (8238 <main_loop+0xb2c>)
    80d8:	47a0      	blx	r4
				xprintf("PORT3STATUS0 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT3STATUS0));
    80da:	2038      	movs	r0, #56	; 0x38
    80dc:	47b8      	blx	r7
    80de:	4601      	mov	r1, r0
    80e0:	4856      	ldr	r0, [pc, #344]	; (823c <main_loop+0xb30>)
    80e2:	47a0      	blx	r4
				xprintf("PORT1STATUS1 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT1STATUS1));
    80e4:	2019      	movs	r0, #25
    80e6:	47b8      	blx	r7
    80e8:	4601      	mov	r1, r0
    80ea:	4855      	ldr	r0, [pc, #340]	; (8240 <main_loop+0xb34>)
    80ec:	47a0      	blx	r4
				xprintf("PORT2STATUS1 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT2STATUS1));
    80ee:	2029      	movs	r0, #41	; 0x29
    80f0:	47b8      	blx	r7
    80f2:	4601      	mov	r1, r0
    80f4:	4853      	ldr	r0, [pc, #332]	; (8244 <main_loop+0xb38>)
    80f6:	47a0      	blx	r4
				xprintf("PORT3STATUS1 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT3STATUS1));
    80f8:	2039      	movs	r0, #57	; 0x39
    80fa:	47b8      	blx	r7
    80fc:	4601      	mov	r1, r0
    80fe:	4852      	ldr	r0, [pc, #328]	; (8248 <main_loop+0xb3c>)
    8100:	47a0      	blx	r4
				xprintf("PORT1STATUS2 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT1STATUS2));
    8102:	201e      	movs	r0, #30
    8104:	47b8      	blx	r7
    8106:	4601      	mov	r1, r0
    8108:	4850      	ldr	r0, [pc, #320]	; (824c <main_loop+0xb40>)
    810a:	47a0      	blx	r4
				xprintf("PORT2STATUS2 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT2STATUS2));
    810c:	202e      	movs	r0, #46	; 0x2e
    810e:	47b8      	blx	r7
    8110:	4601      	mov	r1, r0
    8112:	484f      	ldr	r0, [pc, #316]	; (8250 <main_loop+0xb44>)
    8114:	47a0      	blx	r4
				xprintf("PORT3STATUS2 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT3STATUS2));
    8116:	203e      	movs	r0, #62	; 0x3e
    8118:	47b8      	blx	r7
    811a:	4601      	mov	r1, r0
    811c:	484d      	ldr	r0, [pc, #308]	; (8254 <main_loop+0xb48>)
    811e:	47a0      	blx	r4
				xprintf("PORT1STATUS3 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT1STATUS3));
    8120:	201f      	movs	r0, #31
    8122:	47b8      	blx	r7
    8124:	4601      	mov	r1, r0
    8126:	484c      	ldr	r0, [pc, #304]	; (8258 <main_loop+0xb4c>)
    8128:	47a0      	blx	r4
				xprintf("PORT2STATUS3 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT2STATUS3));
    812a:	202f      	movs	r0, #47	; 0x2f
    812c:	47b8      	blx	r7
    812e:	4601      	mov	r1, r0
    8130:	484a      	ldr	r0, [pc, #296]	; (825c <main_loop+0xb50>)
    8132:	47a0      	blx	r4
				xprintf("PORT3STATUS3 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT3STATUS3));
    8134:	203f      	movs	r0, #63	; 0x3f
    8136:	47b8      	blx	r7
    8138:	4601      	mov	r1, r0
    813a:	4849      	ldr	r0, [pc, #292]	; (8260 <main_loop+0xb54>)
    813c:	47a0      	blx	r4
				xprintf("PORT1LINKMD = %x\r\n", readKSZreg(SPI_KSZ8794_PORT1LINKMD));
    813e:	201b      	movs	r0, #27
    8140:	47b8      	blx	r7
    8142:	4601      	mov	r1, r0
    8144:	4847      	ldr	r0, [pc, #284]	; (8264 <main_loop+0xb58>)
    8146:	47a0      	blx	r4
				xprintf("PORT2LINKMD = %x\r\n", readKSZreg(SPI_KSZ8794_PORT2LINKMD));
    8148:	202b      	movs	r0, #43	; 0x2b
    814a:	47b8      	blx	r7
    814c:	4601      	mov	r1, r0
    814e:	4846      	ldr	r0, [pc, #280]	; (8268 <main_loop+0xb5c>)
    8150:	47a0      	blx	r4
				xprintf("PORT3LINKMD = %x\r\n", readKSZreg(SPI_KSZ8794_PORT3LINKMD));
    8152:	203b      	movs	r0, #59	; 0x3b
    8154:	47b8      	blx	r7
    8156:	4601      	mov	r1, r0
    8158:	4844      	ldr	r0, [pc, #272]	; (826c <main_loop+0xb60>)
    815a:	47a0      	blx	r4
				xprintf("PORT1CONTROL9 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT1CONTROL9));
    815c:	201c      	movs	r0, #28
    815e:	47b8      	blx	r7
    8160:	4601      	mov	r1, r0
    8162:	4843      	ldr	r0, [pc, #268]	; (8270 <main_loop+0xb64>)
    8164:	47a0      	blx	r4
				xprintf("PORT2CONTROL9 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT2CONTROL9));
    8166:	202c      	movs	r0, #44	; 0x2c
    8168:	47b8      	blx	r7
    816a:	4601      	mov	r1, r0
    816c:	4841      	ldr	r0, [pc, #260]	; (8274 <main_loop+0xb68>)
    816e:	47a0      	blx	r4
				xprintf("PORT3CONTROL9 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT3CONTROL9));
    8170:	203c      	movs	r0, #60	; 0x3c
    8172:	e081      	b.n	8278 <main_loop+0xb6c>
    8174:	0000dc79 	.word	0x0000dc79
    8178:	0000b211 	.word	0x0000b211
    817c:	0000ee6f 	.word	0x0000ee6f
    8180:	0000e25d 	.word	0x0000e25d
    8184:	0000e289 	.word	0x0000e289
    8188:	0000e29a 	.word	0x0000e29a
    818c:	0000e2a7 	.word	0x0000e2a7
    8190:	0000e2b6 	.word	0x0000e2b6
    8194:	0000e2c5 	.word	0x0000e2c5
    8198:	0000e2d4 	.word	0x0000e2d4
    819c:	0000e2e3 	.word	0x0000e2e3
    81a0:	0000e2f2 	.word	0x0000e2f2
    81a4:	0000e301 	.word	0x0000e301
    81a8:	0000e310 	.word	0x0000e310
    81ac:	0000e31f 	.word	0x0000e31f
    81b0:	0000e32f 	.word	0x0000e32f
    81b4:	0000e33c 	.word	0x0000e33c
    81b8:	0000e349 	.word	0x0000e349
    81bc:	0000e35e 	.word	0x0000e35e
    81c0:	0000e373 	.word	0x0000e373
    81c4:	0000e388 	.word	0x0000e388
    81c8:	0000e39d 	.word	0x0000e39d
    81cc:	0000e3b2 	.word	0x0000e3b2
    81d0:	0000e3c7 	.word	0x0000e3c7
    81d4:	0000e3dc 	.word	0x0000e3dc
    81d8:	0000e3f1 	.word	0x0000e3f1
    81dc:	0000e406 	.word	0x0000e406
    81e0:	0000e41b 	.word	0x0000e41b
    81e4:	0000e430 	.word	0x0000e430
    81e8:	0000e445 	.word	0x0000e445
    81ec:	0000e45a 	.word	0x0000e45a
    81f0:	0000e46f 	.word	0x0000e46f
    81f4:	0000e484 	.word	0x0000e484
    81f8:	0000e499 	.word	0x0000e499
    81fc:	0000e4ae 	.word	0x0000e4ae
    8200:	0000e4c3 	.word	0x0000e4c3
    8204:	0000e4d8 	.word	0x0000e4d8
    8208:	0000e4ed 	.word	0x0000e4ed
    820c:	0000e502 	.word	0x0000e502
    8210:	0000e517 	.word	0x0000e517
    8214:	0000e52c 	.word	0x0000e52c
    8218:	0000e541 	.word	0x0000e541
    821c:	0000e556 	.word	0x0000e556
    8220:	0000e56b 	.word	0x0000e56b
    8224:	0000e580 	.word	0x0000e580
    8228:	0000e595 	.word	0x0000e595
    822c:	0000e5aa 	.word	0x0000e5aa
    8230:	0000e5bf 	.word	0x0000e5bf
    8234:	0000e5d4 	.word	0x0000e5d4
    8238:	0000e5e8 	.word	0x0000e5e8
    823c:	0000e5fc 	.word	0x0000e5fc
    8240:	0000e610 	.word	0x0000e610
    8244:	0000e624 	.word	0x0000e624
    8248:	0000e638 	.word	0x0000e638
    824c:	0000e64c 	.word	0x0000e64c
    8250:	0000e660 	.word	0x0000e660
    8254:	0000e674 	.word	0x0000e674
    8258:	0000e688 	.word	0x0000e688
    825c:	0000e69c 	.word	0x0000e69c
    8260:	0000e6b0 	.word	0x0000e6b0
    8264:	0000e6c4 	.word	0x0000e6c4
    8268:	0000e6d7 	.word	0x0000e6d7
    826c:	0000e6ea 	.word	0x0000e6ea
    8270:	0000e6fd 	.word	0x0000e6fd
    8274:	0000e712 	.word	0x0000e712
    8278:	47b8      	blx	r7
    827a:	4601      	mov	r1, r0
    827c:	4852      	ldr	r0, [pc, #328]	; (83c8 <main_loop+0xcbc>)
    827e:	47a0      	blx	r4
				xprintf("PORT1CONTROL10 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT1CONTROL10));
    8280:	201d      	movs	r0, #29
    8282:	47b8      	blx	r7
    8284:	4601      	mov	r1, r0
    8286:	4851      	ldr	r0, [pc, #324]	; (83cc <main_loop+0xcc0>)
    8288:	47a0      	blx	r4
				xprintf("PORT2CONTROL10 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT2CONTROL10));
    828a:	202d      	movs	r0, #45	; 0x2d
    828c:	47b8      	blx	r7
    828e:	4601      	mov	r1, r0
    8290:	484f      	ldr	r0, [pc, #316]	; (83d0 <main_loop+0xcc4>)
    8292:	47a0      	blx	r4
				xprintf("PORT3CONTROL10 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT3CONTROL10));
    8294:	203d      	movs	r0, #61	; 0x3d
    8296:	47b8      	blx	r7
    8298:	4601      	mov	r1, r0
    829a:	484e      	ldr	r0, [pc, #312]	; (83d4 <main_loop+0xcc8>)
    829c:	47a0      	blx	r4
				xprintf("PORT2CONTROL20 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT2CONTROL20));
    829e:	20a3      	movs	r0, #163	; 0xa3
    82a0:	47b8      	blx	r7
    82a2:	4601      	mov	r1, r0
    82a4:	484c      	ldr	r0, [pc, #304]	; (83d8 <main_loop+0xccc>)
    82a6:	47a0      	blx	r4
				xprintf("PORT1CONTROL12 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT1CONTROL12));
    82a8:	20b0      	movs	r0, #176	; 0xb0
    82aa:	47b8      	blx	r7
    82ac:	4601      	mov	r1, r0
    82ae:	484b      	ldr	r0, [pc, #300]	; (83dc <main_loop+0xcd0>)
    82b0:	47a0      	blx	r4
				xprintf("PORT2CONTROL12 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT2CONTROL12));
    82b2:	20c0      	movs	r0, #192	; 0xc0
    82b4:	47b8      	blx	r7
    82b6:	4601      	mov	r1, r0
    82b8:	4849      	ldr	r0, [pc, #292]	; (83e0 <main_loop+0xcd4>)
    82ba:	47a0      	blx	r4
				xprintf("PORT3CONTROL12 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT3CONTROL12));
    82bc:	20d0      	movs	r0, #208	; 0xd0
    82be:	47b8      	blx	r7
    82c0:	4601      	mov	r1, r0
    82c2:	4848      	ldr	r0, [pc, #288]	; (83e4 <main_loop+0xcd8>)
    82c4:	47a0      	blx	r4
				xprintf("PORT4CONTROL12 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT4CONTROL12));
    82c6:	20f0      	movs	r0, #240	; 0xf0
    82c8:	47b8      	blx	r7
    82ca:	4601      	mov	r1, r0
    82cc:	4846      	ldr	r0, [pc, #280]	; (83e8 <main_loop+0xcdc>)
    82ce:	47a0      	blx	r4
				xprintf("PORT1CONTROL13 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT1CONTROL13));
    82d0:	20b1      	movs	r0, #177	; 0xb1
    82d2:	47b8      	blx	r7
    82d4:	4601      	mov	r1, r0
    82d6:	4845      	ldr	r0, [pc, #276]	; (83ec <main_loop+0xce0>)
    82d8:	47a0      	blx	r4
				xprintf("PORT2CONTROL13 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT2CONTROL13));
    82da:	20c1      	movs	r0, #193	; 0xc1
    82dc:	47b8      	blx	r7
    82de:	4601      	mov	r1, r0
    82e0:	4843      	ldr	r0, [pc, #268]	; (83f0 <main_loop+0xce4>)
    82e2:	47a0      	blx	r4
				xprintf("PORT3CONTROL13 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT3CONTROL13));
    82e4:	20d1      	movs	r0, #209	; 0xd1
    82e6:	47b8      	blx	r7
    82e8:	4601      	mov	r1, r0
    82ea:	4842      	ldr	r0, [pc, #264]	; (83f4 <main_loop+0xce8>)
    82ec:	47a0      	blx	r4
				xprintf("PORT4CONTROL13 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT4CONTROL13));
    82ee:	20f1      	movs	r0, #241	; 0xf1
    82f0:	47b8      	blx	r7
    82f2:	4601      	mov	r1, r0
    82f4:	4840      	ldr	r0, [pc, #256]	; (83f8 <main_loop+0xcec>)
    82f6:	47a0      	blx	r4
				xprintf("PORT1CONTROL14 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT1CONTROL14));
    82f8:	20b2      	movs	r0, #178	; 0xb2
    82fa:	47b8      	blx	r7
    82fc:	4601      	mov	r1, r0
    82fe:	483f      	ldr	r0, [pc, #252]	; (83fc <main_loop+0xcf0>)
    8300:	47a0      	blx	r4
				xprintf("PORT2CONTROL14 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT2CONTROL14));
    8302:	20c2      	movs	r0, #194	; 0xc2
    8304:	47b8      	blx	r7
    8306:	4601      	mov	r1, r0
    8308:	483d      	ldr	r0, [pc, #244]	; (8400 <main_loop+0xcf4>)
    830a:	47a0      	blx	r4
				xprintf("PORT3CONTROL14 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT3CONTROL14));
    830c:	20d2      	movs	r0, #210	; 0xd2
    830e:	47b8      	blx	r7
    8310:	4601      	mov	r1, r0
    8312:	483c      	ldr	r0, [pc, #240]	; (8404 <main_loop+0xcf8>)
    8314:	47a0      	blx	r4
				xprintf("PORT4CONTROL14 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT4CONTROL14));
    8316:	20f2      	movs	r0, #242	; 0xf2
    8318:	47b8      	blx	r7
    831a:	4601      	mov	r1, r0
    831c:	483a      	ldr	r0, [pc, #232]	; (8408 <main_loop+0xcfc>)
    831e:	47a0      	blx	r4
				xprintf("PORT1CONTROL15 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT1CONTROL15));
    8320:	20b3      	movs	r0, #179	; 0xb3
    8322:	47b8      	blx	r7
    8324:	4601      	mov	r1, r0
    8326:	4839      	ldr	r0, [pc, #228]	; (840c <main_loop+0xd00>)
    8328:	47a0      	blx	r4
				xprintf("PORT2CONTROL15 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT2CONTROL15));
    832a:	20c3      	movs	r0, #195	; 0xc3
    832c:	47b8      	blx	r7
    832e:	4601      	mov	r1, r0
    8330:	4837      	ldr	r0, [pc, #220]	; (8410 <main_loop+0xd04>)
    8332:	47a0      	blx	r4
				xprintf("PORT3CONTROL15 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT3CONTROL15));
    8334:	20d3      	movs	r0, #211	; 0xd3
    8336:	47b8      	blx	r7
    8338:	4601      	mov	r1, r0
    833a:	4836      	ldr	r0, [pc, #216]	; (8414 <main_loop+0xd08>)
    833c:	47a0      	blx	r4
				xprintf("PORT4CONTROL15 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT4CONTROL15));
    833e:	20f3      	movs	r0, #243	; 0xf3
    8340:	47b8      	blx	r7
    8342:	4601      	mov	r1, r0
    8344:	4834      	ldr	r0, [pc, #208]	; (8418 <main_loop+0xd0c>)
    8346:	47a0      	blx	r4
				xprintf("PORT1CONTROL16 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT1CONTROL16));
    8348:	20b4      	movs	r0, #180	; 0xb4
    834a:	47b8      	blx	r7
    834c:	4601      	mov	r1, r0
    834e:	4833      	ldr	r0, [pc, #204]	; (841c <main_loop+0xd10>)
    8350:	47a0      	blx	r4
				xprintf("PORT2CONTROL16 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT2CONTROL16));
    8352:	20c4      	movs	r0, #196	; 0xc4
    8354:	47b8      	blx	r7
    8356:	4601      	mov	r1, r0
    8358:	4831      	ldr	r0, [pc, #196]	; (8420 <main_loop+0xd14>)
    835a:	47a0      	blx	r4
				xprintf("PORT3CONTROL16 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT3CONTROL16));
    835c:	20d4      	movs	r0, #212	; 0xd4
    835e:	47b8      	blx	r7
    8360:	4601      	mov	r1, r0
    8362:	4830      	ldr	r0, [pc, #192]	; (8424 <main_loop+0xd18>)
    8364:	47a0      	blx	r4
				xprintf("PORT4CONTROL16 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT4CONTROL16));
    8366:	20f4      	movs	r0, #244	; 0xf4
    8368:	47b8      	blx	r7
    836a:	4601      	mov	r1, r0
    836c:	482e      	ldr	r0, [pc, #184]	; (8428 <main_loop+0xd1c>)
    836e:	47a0      	blx	r4
				xprintf("PORT1CONTROL17 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT1CONTROL17));
    8370:	20b5      	movs	r0, #181	; 0xb5
    8372:	47b8      	blx	r7
    8374:	4601      	mov	r1, r0
    8376:	482d      	ldr	r0, [pc, #180]	; (842c <main_loop+0xd20>)
    8378:	47a0      	blx	r4
				xprintf("PORT2CONTROL17 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT2CONTROL17));
    837a:	20c5      	movs	r0, #197	; 0xc5
    837c:	47b8      	blx	r7
    837e:	4601      	mov	r1, r0
    8380:	482b      	ldr	r0, [pc, #172]	; (8430 <main_loop+0xd24>)
    8382:	47a0      	blx	r4
				xprintf("PORT3CONTROL17 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT3CONTROL17)); 
    8384:	20d5      	movs	r0, #213	; 0xd5
    8386:	47b8      	blx	r7
    8388:	4601      	mov	r1, r0
    838a:	482a      	ldr	r0, [pc, #168]	; (8434 <main_loop+0xd28>)
    838c:	47a0      	blx	r4
				xprintf("PORT4CONTROL17 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT4CONTROL17));
    838e:	20f5      	movs	r0, #245	; 0xf5
    8390:	47b8      	blx	r7
    8392:	4601      	mov	r1, r0
    8394:	4828      	ldr	r0, [pc, #160]	; (8438 <main_loop+0xd2c>)
    8396:	e57e      	b.n	7e96 <main_loop+0x78a>
				xprintf("\r\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n");
    8398:	4828      	ldr	r0, [pc, #160]	; (843c <main_loop+0xd30>)
    839a:	47a0      	blx	r4
				xprintf("<CLI DEBUG> Unknown command\r\n\r\nHelp Screen:\r\n\r\n");
    839c:	4828      	ldr	r0, [pc, #160]	; (8440 <main_loop+0xd34>)
    839e:	47a0      	blx	r4
				xprintf("R         [REBOOT] command\r\n");
    83a0:	4828      	ldr	r0, [pc, #160]	; (8444 <main_loop+0xd38>)
    83a2:	47a0      	blx	r4
				xprintf("D         [CONFIGURATION DEFAULT] command\r\n");
    83a4:	4828      	ldr	r0, [pc, #160]	; (8448 <main_loop+0xd3c>)
    83a6:	47a0      	blx	r4
				xprintf("X         [ID RESET] command\r\n");
    83a8:	4828      	ldr	r0, [pc, #160]	; (844c <main_loop+0xd40>)
    83aa:	47a0      	blx	r4
				xprintf("B         [BASESTATION] command\r\n");
    83ac:	4828      	ldr	r0, [pc, #160]	; (8450 <main_loop+0xd44>)
    83ae:	47a0      	blx	r4
				xprintf("P         [PASS THROUGH] command\r\n");
    83b0:	4828      	ldr	r0, [pc, #160]	; (8454 <main_loop+0xd48>)
    83b2:	47a0      	blx	r4
				xprintf("L         [LIVE BOARD PRINT] command\r\n");
    83b4:	4828      	ldr	r0, [pc, #160]	; (8458 <main_loop+0xd4c>)
    83b6:	47a0      	blx	r4
				xprintf("M         [READ MICREL REGISTERS] command\r\n");
    83b8:	4828      	ldr	r0, [pc, #160]	; (845c <main_loop+0xd50>)
    83ba:	47a0      	blx	r4
				xprintf("I         [IP SCHEME / NETWORK] command\r\n");
    83bc:	4828      	ldr	r0, [pc, #160]	; (8460 <main_loop+0xd54>)
    83be:	47a0      	blx	r4
				xprintf("S         [SPEED MAINLOOP] command\r\n\r\n");
    83c0:	4828      	ldr	r0, [pc, #160]	; (8464 <main_loop+0xd58>)
    83c2:	f7ff bb54 	b.w	7a6e <main_loop+0x362>
    83c6:	bf00      	nop
    83c8:	0000e727 	.word	0x0000e727
    83cc:	0000e73c 	.word	0x0000e73c
    83d0:	0000e752 	.word	0x0000e752
    83d4:	0000e768 	.word	0x0000e768
    83d8:	0000e77e 	.word	0x0000e77e
    83dc:	0000e794 	.word	0x0000e794
    83e0:	0000e7aa 	.word	0x0000e7aa
    83e4:	0000e7c0 	.word	0x0000e7c0
    83e8:	0000e7d6 	.word	0x0000e7d6
    83ec:	0000e7ec 	.word	0x0000e7ec
    83f0:	0000e802 	.word	0x0000e802
    83f4:	0000e818 	.word	0x0000e818
    83f8:	0000e82e 	.word	0x0000e82e
    83fc:	0000e844 	.word	0x0000e844
    8400:	0000e85a 	.word	0x0000e85a
    8404:	0000e870 	.word	0x0000e870
    8408:	0000e886 	.word	0x0000e886
    840c:	0000e89c 	.word	0x0000e89c
    8410:	0000e8b2 	.word	0x0000e8b2
    8414:	0000e8c8 	.word	0x0000e8c8
    8418:	0000e8de 	.word	0x0000e8de
    841c:	0000e8f4 	.word	0x0000e8f4
    8420:	0000e90a 	.word	0x0000e90a
    8424:	0000e920 	.word	0x0000e920
    8428:	0000e936 	.word	0x0000e936
    842c:	0000e94c 	.word	0x0000e94c
    8430:	0000e962 	.word	0x0000e962
    8434:	0000e978 	.word	0x0000e978
    8438:	0000e98e 	.word	0x0000e98e
    843c:	0000dc79 	.word	0x0000dc79
    8440:	0000e9a4 	.word	0x0000e9a4
    8444:	0000e9d4 	.word	0x0000e9d4
    8448:	0000e9f1 	.word	0x0000e9f1
    844c:	0000ea1d 	.word	0x0000ea1d
    8450:	0000ea3c 	.word	0x0000ea3c
    8454:	0000ea5e 	.word	0x0000ea5e
    8458:	0000ea81 	.word	0x0000ea81
    845c:	0000eaa8 	.word	0x0000eaa8
    8460:	0000ead4 	.word	0x0000ead4
    8464:	0000eafe 	.word	0x0000eafe
			else if (!stormstate) {
    8468:	4ba3      	ldr	r3, [pc, #652]	; (86f8 <main_loop+0xfec>)
    846a:	781b      	ldrb	r3, [r3, #0]
				broadcast_storm = 0;
    846c:	2b00      	cmp	r3, #0
    846e:	9b04      	ldr	r3, [sp, #16]
    8470:	bf08      	it	eq
    8472:	2300      	moveq	r3, #0
    8474:	9304      	str	r3, [sp, #16]
			if (ip_periodic_check) {
    8476:	4ba1      	ldr	r3, [pc, #644]	; (86fc <main_loop+0xff0>)
    8478:	781a      	ldrb	r2, [r3, #0]
    847a:	2a00      	cmp	r2, #0
    847c:	f47f aa0b 	bne.w	7896 <main_loop+0x18a>
			if (arp_check) {
    8480:	4b9f      	ldr	r3, [pc, #636]	; (8700 <main_loop+0xff4>)
    8482:	781a      	ldrb	r2, [r3, #0]
    8484:	2600      	movs	r6, #0
    8486:	2a00      	cmp	r2, #0
    8488:	f47f aa3f 	bne.w	790a <main_loop+0x1fe>
			eth_check = 0;
    848c:	4616      	mov	r6, r2
		if (refresh_gain) {
    848e:	4b9d      	ldr	r3, [pc, #628]	; (8704 <main_loop+0xff8>)
    8490:	f8df 8304 	ldr.w	r8, [pc, #772]	; 8798 <main_loop+0x108c>
    8494:	781b      	ldrb	r3, [r3, #0]
    8496:	4f9c      	ldr	r7, [pc, #624]	; (8708 <main_loop+0xffc>)
    8498:	b33b      	cbz	r3, 84ea <main_loop+0xdde>
			if (cardA_type == CARD_VIBRATEK) {
    849a:	f898 3000 	ldrb.w	r3, [r8]
    849e:	2b01      	cmp	r3, #1
    84a0:	d10e      	bne.n	84c0 <main_loop+0xdb4>
				xprintf("Write ADC gain settings for VibraTek CardA\r\n");
    84a2:	489a      	ldr	r0, [pc, #616]	; (870c <main_loop+0x1000>)
    84a4:	f8df 92a4 	ldr.w	r9, [pc, #676]	; 874c <main_loop+0x1040>
    84a8:	47c8      	blx	r9
				if ((err = I2C_setGAIN(PC27_CARDA_I2C_SDA,  PC28_CARDA_I2C_CLK, ((CONFIG *)&settings_buffer)->gain_cardA)) < 0) {
    84aa:	4b99      	ldr	r3, [pc, #612]	; (8710 <main_loop+0x1004>)
    84ac:	215c      	movs	r1, #92	; 0x5c
    84ae:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
    84b2:	4b98      	ldr	r3, [pc, #608]	; (8714 <main_loop+0x1008>)
    84b4:	205b      	movs	r0, #91	; 0x5b
    84b6:	4798      	blx	r3
    84b8:	1e01      	subs	r1, r0, #0
    84ba:	da01      	bge.n	84c0 <main_loop+0xdb4>
					xprintf("Could NOT write to the DAC Gain controller on CARDA:I2C [%i]\r\n", err);
    84bc:	4896      	ldr	r0, [pc, #600]	; (8718 <main_loop+0x100c>)
    84be:	47c8      	blx	r9
			if (cardB_type == CARD_VIBRATEK) {
    84c0:	783b      	ldrb	r3, [r7, #0]
    84c2:	2b01      	cmp	r3, #1
    84c4:	d10e      	bne.n	84e4 <main_loop+0xdd8>
				xprintf("Write ADC gain settings for VibraTek CardB\r\n");
    84c6:	4895      	ldr	r0, [pc, #596]	; (871c <main_loop+0x1010>)
    84c8:	f8df 9280 	ldr.w	r9, [pc, #640]	; 874c <main_loop+0x1040>
    84cc:	47c8      	blx	r9
				if (( err = I2C_setGAIN(PB24_CARDB_I2C_SDA,  PB25_CARDB_I2C_CLK, ((CONFIG *)&settings_buffer)->gain_cardB)) < 0) {
    84ce:	4b90      	ldr	r3, [pc, #576]	; (8710 <main_loop+0x1004>)
    84d0:	2139      	movs	r1, #57	; 0x39
    84d2:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
    84d6:	4b8f      	ldr	r3, [pc, #572]	; (8714 <main_loop+0x1008>)
    84d8:	2038      	movs	r0, #56	; 0x38
    84da:	4798      	blx	r3
    84dc:	1e01      	subs	r1, r0, #0
    84de:	da01      	bge.n	84e4 <main_loop+0xdd8>
					xprintf("Could NOT write to the DAC Gain controller on CARDB:I2C [%i]\r\n", err);
    84e0:	488f      	ldr	r0, [pc, #572]	; (8720 <main_loop+0x1014>)
    84e2:	47c8      	blx	r9
			refresh_gain = 0;
    84e4:	4a87      	ldr	r2, [pc, #540]	; (8704 <main_loop+0xff8>)
    84e6:	2300      	movs	r3, #0
    84e8:	7013      	strb	r3, [r2, #0]
    84ea:	f8df a2b0 	ldr.w	sl, [pc, #688]	; 879c <main_loop+0x1090>
		bash_spi_transfer(command_dataw, command_datar, 2);
    84ee:	f8df 92b0 	ldr.w	r9, [pc, #688]	; 87a0 <main_loop+0x1094>
    84f2:	f04f 0b20 	mov.w	fp, #32
		command_dataw[0] = 0x60 + (ADC_CH0 << 2);
    84f6:	2360      	movs	r3, #96	; 0x60
    84f8:	f8ca b094 	str.w	fp, [sl, #148]	; 0x94
    84fc:	702b      	strb	r3, [r5, #0]
		bash_spi_transfer(command_dataw, command_datar, 2);
    84fe:	47c8      	blx	r9
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    8500:	f8ca b098 	str.w	fp, [sl, #152]	; 0x98
		if (((cardA_type == CARD_VIBRATEK) || (cardA_type == CARD_VIBRAPOINT)) && (card_sampleindex < SAMPLE_BUFFER_SIZE)) {
    8504:	f898 3000 	ldrb.w	r3, [r8]
    8508:	2b01      	cmp	r3, #1
    850a:	d001      	beq.n	8510 <main_loop+0xe04>
    850c:	2b04      	cmp	r3, #4
    850e:	d108      	bne.n	8522 <main_loop+0xe16>
    8510:	4b84      	ldr	r3, [pc, #528]	; (8724 <main_loop+0x1018>)
    8512:	681b      	ldr	r3, [r3, #0]
    8514:	f5b3 7f2b 	cmp.w	r3, #684	; 0x2ac
			cardAch0_samplebuffer[card_sampleindex] = command_datar[1];
    8518:	bf3f      	itttt	cc
    851a:	4a83      	ldrcc	r2, [pc, #524]	; (8728 <main_loop+0x101c>)
    851c:	7851      	ldrbcc	r1, [r2, #1]
    851e:	4a83      	ldrcc	r2, [pc, #524]	; (872c <main_loop+0x1020>)
    8520:	54d1      	strbcc	r1, [r2, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    8522:	f04f 0b20 	mov.w	fp, #32
		command_dataw[0] = 0x60 + (ADC_CH1 << 2);
    8526:	2364      	movs	r3, #100	; 0x64
    8528:	f8ca b094 	str.w	fp, [sl, #148]	; 0x94
    852c:	702b      	strb	r3, [r5, #0]
		bash_spi_transfer(command_dataw, command_datar, 2);
    852e:	47c8      	blx	r9
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    8530:	f8ca b098 	str.w	fp, [sl, #152]	; 0x98
		if (((cardA_type == CARD_VIBRATEK) || (cardA_type == CARD_VIBRAPOINT)) && (card_sampleindex < SAMPLE_BUFFER_SIZE)) {
    8534:	f898 3000 	ldrb.w	r3, [r8]
    8538:	2b01      	cmp	r3, #1
    853a:	d001      	beq.n	8540 <main_loop+0xe34>
    853c:	2b04      	cmp	r3, #4
    853e:	d128      	bne.n	8592 <main_loop+0xe86>
    8540:	4a78      	ldr	r2, [pc, #480]	; (8724 <main_loop+0x1018>)
    8542:	6812      	ldr	r2, [r2, #0]
    8544:	f5b2 7f2b 	cmp.w	r2, #684	; 0x2ac
			cardAch1_samplebuffer[card_sampleindex] = command_datar[1];
    8548:	bf3f      	itttt	cc
    854a:	4977      	ldrcc	r1, [pc, #476]	; (8728 <main_loop+0x101c>)
    854c:	7848      	ldrbcc	r0, [r1, #1]
    854e:	4978      	ldrcc	r1, [pc, #480]	; (8730 <main_loop+0x1024>)
    8550:	5488      	strbcc	r0, [r1, r2]
		if (((cardA_type == CARD_VIBRATEK) || (cardA_type == CARD_VIBRAPOINT)) && (!card_sampleindex)) {
    8552:	2b01      	cmp	r3, #1
    8554:	d001      	beq.n	855a <main_loop+0xe4e>
    8556:	2b04      	cmp	r3, #4
    8558:	d11b      	bne.n	8592 <main_loop+0xe86>
    855a:	b9d2      	cbnz	r2, 8592 <main_loop+0xe86>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    855c:	f8df a23c 	ldr.w	sl, [pc, #572]	; 879c <main_loop+0x1090>
    8560:	f04f 0b20 	mov.w	fp, #32
			command_dataw[0] = 0x60 + (ADC_CH2 << 2);
    8564:	2368      	movs	r3, #104	; 0x68
    8566:	f8ca b094 	str.w	fp, [sl, #148]	; 0x94
    856a:	702b      	strb	r3, [r5, #0]
			bash_spi_transfer(command_dataw, command_datar, 2);
    856c:	47c8      	blx	r9
			cardAch2_samplebuffer = command_datar[1];
    856e:	4b6e      	ldr	r3, [pc, #440]	; (8728 <main_loop+0x101c>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    8570:	f8ca b098 	str.w	fp, [sl, #152]	; 0x98
    8574:	4a6f      	ldr	r2, [pc, #444]	; (8734 <main_loop+0x1028>)
    8576:	7859      	ldrb	r1, [r3, #1]
    8578:	9306      	str	r3, [sp, #24]
    857a:	7011      	strb	r1, [r2, #0]
			command_dataw[0] = 0x60 + (ADC_CH3 << 2);
    857c:	226c      	movs	r2, #108	; 0x6c
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    857e:	f8ca b094 	str.w	fp, [sl, #148]	; 0x94
    8582:	702a      	strb	r2, [r5, #0]
			bash_spi_transfer(command_dataw, command_datar, 2);
    8584:	47c8      	blx	r9
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    8586:	f8ca b098 	str.w	fp, [sl, #152]	; 0x98
			cardAch3_samplebuffer = command_datar[1];
    858a:	9b06      	ldr	r3, [sp, #24]
    858c:	785a      	ldrb	r2, [r3, #1]
    858e:	4b6a      	ldr	r3, [pc, #424]	; (8738 <main_loop+0x102c>)
    8590:	701a      	strb	r2, [r3, #0]
		} else if (cardA_type == CARD_MINI_IO)  {
    8592:	f898 3000 	ldrb.w	r3, [r8]
    8596:	2b02      	cmp	r3, #2
    8598:	d130      	bne.n	85fc <main_loop+0xef0>
			if (miniA_chan) {
    859a:	4b68      	ldr	r3, [pc, #416]	; (873c <main_loop+0x1030>)
    859c:	f8df a204 	ldr.w	sl, [pc, #516]	; 87a4 <main_loop+0x1098>
    85a0:	781b      	ldrb	r3, [r3, #0]
    85a2:	f8df 9204 	ldr.w	r9, [pc, #516]	; 87a8 <main_loop+0x109c>
    85a6:	2b00      	cmp	r3, #0
    85a8:	f43f a9b9 	beq.w	791e <main_loop+0x212>
				if ((err = I2C_readMONITOREDINPUT(PC27_CARDA_I2C_SDA,  PC28_CARDA_I2C_CLK, &miniIO_A1_adcH,  &miniIO_A1_adcL))) {
    85ac:	215c      	movs	r1, #92	; 0x5c
    85ae:	4b64      	ldr	r3, [pc, #400]	; (8740 <main_loop+0x1034>)
    85b0:	4a64      	ldr	r2, [pc, #400]	; (8744 <main_loop+0x1038>)
    85b2:	205b      	movs	r0, #91	; 0x5b
    85b4:	47d0      	blx	sl
    85b6:	4601      	mov	r1, r0
    85b8:	b110      	cbz	r0, 85c0 <main_loop+0xeb4>
					xprintf("Could NOT read from the Mini-IO ADC on CARDA:I2C [%i]\r\n", err);
    85ba:	4863      	ldr	r0, [pc, #396]	; (8748 <main_loop+0x103c>)
    85bc:	4b63      	ldr	r3, [pc, #396]	; (874c <main_loop+0x1040>)
    85be:	4798      	blx	r3
				if ((err = I2C_configMONITOREDINPUTS(PC27_CARDA_I2C_SDA,  PC28_CARDA_I2C_CLK, 0))) {
    85c0:	2200      	movs	r2, #0
				if ((err = I2C_configMONITOREDINPUTS(PC27_CARDA_I2C_SDA,  PC28_CARDA_I2C_CLK, 1))) {
    85c2:	215c      	movs	r1, #92	; 0x5c
    85c4:	205b      	movs	r0, #91	; 0x5b
    85c6:	47c8      	blx	r9
    85c8:	4601      	mov	r1, r0
    85ca:	b110      	cbz	r0, 85d2 <main_loop+0xec6>
					xprintf("Could NOT write to the Mini-IO ADC controller on CARDA:I2C [%i]\r\n", err);
    85cc:	4860      	ldr	r0, [pc, #384]	; (8750 <main_loop+0x1044>)
    85ce:	4b5f      	ldr	r3, [pc, #380]	; (874c <main_loop+0x1040>)
    85d0:	4798      	blx	r3
			if ((err = I2C_setEXPANDER(PC27_CARDA_I2C_SDA,  PC28_CARDA_I2C_CLK, miniIO_A_relay))) {
    85d2:	4b60      	ldr	r3, [pc, #384]	; (8754 <main_loop+0x1048>)
    85d4:	215c      	movs	r1, #92	; 0x5c
    85d6:	781a      	ldrb	r2, [r3, #0]
    85d8:	4b5f      	ldr	r3, [pc, #380]	; (8758 <main_loop+0x104c>)
    85da:	205b      	movs	r0, #91	; 0x5b
    85dc:	4798      	blx	r3
    85de:	4601      	mov	r1, r0
    85e0:	b110      	cbz	r0, 85e8 <main_loop+0xedc>
				xprintf("Could NOT write to the Mini-IO EXPANDER on CARDA:I2C [%i]\r\n", err);
    85e2:	485e      	ldr	r0, [pc, #376]	; (875c <main_loop+0x1050>)
    85e4:	4b59      	ldr	r3, [pc, #356]	; (874c <main_loop+0x1040>)
    85e6:	4798      	blx	r3
			if ((err = I2C_readEXPANDER(PC27_CARDA_I2C_SDA,  PC28_CARDA_I2C_CLK, &miniIO_A_inputs))) {
    85e8:	215c      	movs	r1, #92	; 0x5c
    85ea:	4a5d      	ldr	r2, [pc, #372]	; (8760 <main_loop+0x1054>)
    85ec:	4b5d      	ldr	r3, [pc, #372]	; (8764 <main_loop+0x1058>)
    85ee:	205b      	movs	r0, #91	; 0x5b
    85f0:	4798      	blx	r3
    85f2:	4601      	mov	r1, r0
    85f4:	b110      	cbz	r0, 85fc <main_loop+0xef0>
				xprintf("Could NOT read from the Mini-IO EXPANDER on CARDA:I2C [%i]\r\n", err);
    85f6:	485c      	ldr	r0, [pc, #368]	; (8768 <main_loop+0x105c>)
    85f8:	4b54      	ldr	r3, [pc, #336]	; (874c <main_loop+0x1040>)
    85fa:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    85fc:	f8df a19c 	ldr.w	sl, [pc, #412]	; 879c <main_loop+0x1090>
		bash_spi_transfer(command_dataw, command_datar, 2);
    8600:	f8df 919c 	ldr.w	r9, [pc, #412]	; 87a0 <main_loop+0x1094>
    8604:	f04f 0b40 	mov.w	fp, #64	; 0x40
		command_dataw[0] = 0x60 + (ADC_CH0 << 2);
    8608:	2360      	movs	r3, #96	; 0x60
    860a:	f8ca b094 	str.w	fp, [sl, #148]	; 0x94
    860e:	702b      	strb	r3, [r5, #0]
		bash_spi_transfer(command_dataw, command_datar, 2);
    8610:	47c8      	blx	r9
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    8612:	f8ca b098 	str.w	fp, [sl, #152]	; 0x98
		if (((cardB_type == CARD_VIBRATEK) || (cardB_type == CARD_VIBRAPOINT)) && (card_sampleindex < SAMPLE_BUFFER_SIZE)) {
    8616:	783b      	ldrb	r3, [r7, #0]
    8618:	2b01      	cmp	r3, #1
    861a:	d001      	beq.n	8620 <main_loop+0xf14>
    861c:	2b04      	cmp	r3, #4
    861e:	d108      	bne.n	8632 <main_loop+0xf26>
    8620:	4b40      	ldr	r3, [pc, #256]	; (8724 <main_loop+0x1018>)
    8622:	681b      	ldr	r3, [r3, #0]
    8624:	f5b3 7f2b 	cmp.w	r3, #684	; 0x2ac
			cardBch0_samplebuffer[card_sampleindex] = command_datar[1];
    8628:	bf3f      	itttt	cc
    862a:	4a3f      	ldrcc	r2, [pc, #252]	; (8728 <main_loop+0x101c>)
    862c:	7851      	ldrbcc	r1, [r2, #1]
    862e:	4a4f      	ldrcc	r2, [pc, #316]	; (876c <main_loop+0x1060>)
    8630:	54d1      	strbcc	r1, [r2, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    8632:	f04f 0b40 	mov.w	fp, #64	; 0x40
		command_dataw[0] = 0x60 + (ADC_CH1 << 2);
    8636:	2364      	movs	r3, #100	; 0x64
    8638:	f8ca b094 	str.w	fp, [sl, #148]	; 0x94
    863c:	702b      	strb	r3, [r5, #0]
		bash_spi_transfer(command_dataw, command_datar, 2);
    863e:	47c8      	blx	r9
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    8640:	f8ca b098 	str.w	fp, [sl, #152]	; 0x98
		if (((cardB_type == CARD_VIBRATEK) || (cardB_type == CARD_VIBRAPOINT)) && (card_sampleindex < SAMPLE_BUFFER_SIZE)) {
    8644:	783b      	ldrb	r3, [r7, #0]
    8646:	2b01      	cmp	r3, #1
    8648:	d001      	beq.n	864e <main_loop+0xf42>
    864a:	2b04      	cmp	r3, #4
    864c:	d128      	bne.n	86a0 <main_loop+0xf94>
    864e:	4a35      	ldr	r2, [pc, #212]	; (8724 <main_loop+0x1018>)
    8650:	6812      	ldr	r2, [r2, #0]
    8652:	f5b2 7f2b 	cmp.w	r2, #684	; 0x2ac
			cardBch1_samplebuffer[card_sampleindex] = command_datar[1];
    8656:	bf3f      	itttt	cc
    8658:	4933      	ldrcc	r1, [pc, #204]	; (8728 <main_loop+0x101c>)
    865a:	7848      	ldrbcc	r0, [r1, #1]
    865c:	4944      	ldrcc	r1, [pc, #272]	; (8770 <main_loop+0x1064>)
    865e:	5488      	strbcc	r0, [r1, r2]
		if (((cardB_type == CARD_VIBRATEK) || (cardB_type == CARD_VIBRAPOINT)) && (!card_sampleindex)) {
    8660:	2b01      	cmp	r3, #1
    8662:	d001      	beq.n	8668 <main_loop+0xf5c>
    8664:	2b04      	cmp	r3, #4
    8666:	d11b      	bne.n	86a0 <main_loop+0xf94>
    8668:	b9d2      	cbnz	r2, 86a0 <main_loop+0xf94>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    866a:	f8df a130 	ldr.w	sl, [pc, #304]	; 879c <main_loop+0x1090>
    866e:	f04f 0b40 	mov.w	fp, #64	; 0x40
			command_dataw[0] = 0x60 + (ADC_CH2 << 2);
    8672:	2368      	movs	r3, #104	; 0x68
    8674:	f8ca b094 	str.w	fp, [sl, #148]	; 0x94
    8678:	702b      	strb	r3, [r5, #0]
			bash_spi_transfer(command_dataw, command_datar, 2);
    867a:	47c8      	blx	r9
			cardBch2_samplebuffer = command_datar[1];
    867c:	4b2a      	ldr	r3, [pc, #168]	; (8728 <main_loop+0x101c>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    867e:	f8ca b098 	str.w	fp, [sl, #152]	; 0x98
    8682:	4a3c      	ldr	r2, [pc, #240]	; (8774 <main_loop+0x1068>)
    8684:	7859      	ldrb	r1, [r3, #1]
    8686:	9306      	str	r3, [sp, #24]
    8688:	7011      	strb	r1, [r2, #0]
			command_dataw[0] = 0x60 + (ADC_CH3 << 2);
    868a:	226c      	movs	r2, #108	; 0x6c
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    868c:	f8ca b094 	str.w	fp, [sl, #148]	; 0x94
    8690:	702a      	strb	r2, [r5, #0]
			bash_spi_transfer(command_dataw, command_datar, 2);
    8692:	47c8      	blx	r9
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    8694:	f8ca b098 	str.w	fp, [sl, #152]	; 0x98
			cardBch3_samplebuffer = command_datar[1];
    8698:	9b06      	ldr	r3, [sp, #24]
    869a:	785a      	ldrb	r2, [r3, #1]
    869c:	4b36      	ldr	r3, [pc, #216]	; (8778 <main_loop+0x106c>)
    869e:	701a      	strb	r2, [r3, #0]
		} else if (cardB_type == CARD_MINI_IO)  {
    86a0:	783b      	ldrb	r3, [r7, #0]
    86a2:	2b02      	cmp	r3, #2
    86a4:	f040 808e 	bne.w	87c4 <main_loop+0x10b8>
			if (miniB_chan) {
    86a8:	4b34      	ldr	r3, [pc, #208]	; (877c <main_loop+0x1070>)
    86aa:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 87a4 <main_loop+0x1098>
    86ae:	781b      	ldrb	r3, [r3, #0]
    86b0:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 87a8 <main_loop+0x109c>
    86b4:	2b00      	cmp	r3, #0
    86b6:	f43f a93f 	beq.w	7938 <main_loop+0x22c>
				if ((err = I2C_readMONITOREDINPUT(PB24_CARDB_I2C_SDA,  PB25_CARDB_I2C_CLK, &miniIO_B1_adcH,  &miniIO_B1_adcL))) {
    86ba:	2139      	movs	r1, #57	; 0x39
    86bc:	4b30      	ldr	r3, [pc, #192]	; (8780 <main_loop+0x1074>)
    86be:	4a31      	ldr	r2, [pc, #196]	; (8784 <main_loop+0x1078>)
    86c0:	2038      	movs	r0, #56	; 0x38
    86c2:	47d0      	blx	sl
    86c4:	4601      	mov	r1, r0
    86c6:	b110      	cbz	r0, 86ce <main_loop+0xfc2>
					xprintf("Could NOT read from the Mini-IO ADC on CARDB:I2C [%i]\r\n", err);
    86c8:	482f      	ldr	r0, [pc, #188]	; (8788 <main_loop+0x107c>)
    86ca:	4b20      	ldr	r3, [pc, #128]	; (874c <main_loop+0x1040>)
    86cc:	4798      	blx	r3
				if ((err = I2C_configMONITOREDINPUTS(PB24_CARDB_I2C_SDA,  PB25_CARDB_I2C_CLK, 0))) {
    86ce:	2200      	movs	r2, #0
				if ((err = I2C_configMONITOREDINPUTS(PB24_CARDB_I2C_SDA,  PB25_CARDB_I2C_CLK, 1))) {
    86d0:	2139      	movs	r1, #57	; 0x39
    86d2:	2038      	movs	r0, #56	; 0x38
    86d4:	47c8      	blx	r9
    86d6:	4601      	mov	r1, r0
    86d8:	b110      	cbz	r0, 86e0 <main_loop+0xfd4>
					xprintf("Could NOT write to the Mini-IO ADC controller on CARDB:I2C [%i]\r\n", err);
    86da:	482c      	ldr	r0, [pc, #176]	; (878c <main_loop+0x1080>)
    86dc:	4b1b      	ldr	r3, [pc, #108]	; (874c <main_loop+0x1040>)
    86de:	4798      	blx	r3
			if ((err = I2C_setEXPANDER(PB24_CARDB_I2C_SDA,  PB25_CARDB_I2C_CLK, miniIO_B_relay))) {
    86e0:	4b2b      	ldr	r3, [pc, #172]	; (8790 <main_loop+0x1084>)
    86e2:	2139      	movs	r1, #57	; 0x39
    86e4:	781a      	ldrb	r2, [r3, #0]
    86e6:	4b1c      	ldr	r3, [pc, #112]	; (8758 <main_loop+0x104c>)
    86e8:	2038      	movs	r0, #56	; 0x38
    86ea:	4798      	blx	r3
    86ec:	4601      	mov	r1, r0
    86ee:	2800      	cmp	r0, #0
    86f0:	d05e      	beq.n	87b0 <main_loop+0x10a4>
				xprintf("Could NOT write to the Mini-IO EXPANDER on CARDB:I2C [%i]\r\n", err);
    86f2:	4828      	ldr	r0, [pc, #160]	; (8794 <main_loop+0x1088>)
    86f4:	e05a      	b.n	87ac <main_loop+0x10a0>
    86f6:	bf00      	nop
    86f8:	2000853c 	.word	0x2000853c
    86fc:	20007852 	.word	0x20007852
    8700:	20007fa3 	.word	0x20007fa3
    8704:	2000853d 	.word	0x2000853d
    8708:	20008540 	.word	0x20008540
    870c:	0000da39 	.word	0x0000da39
    8710:	20007f14 	.word	0x20007f14
    8714:	00005255 	.word	0x00005255
    8718:	0000c229 	.word	0x0000c229
    871c:	0000da66 	.word	0x0000da66
    8720:	0000c3cf 	.word	0x0000c3cf
    8724:	20008528 	.word	0x20008528
    8728:	2000757c 	.word	0x2000757c
    872c:	20008275 	.word	0x20008275
    8730:	20007c58 	.word	0x20007c58
    8734:	20007840 	.word	0x20007840
    8738:	20007572 	.word	0x20007572
    873c:	20007576 	.word	0x20007576
    8740:	20007f9a 	.word	0x20007f9a
    8744:	2000825b 	.word	0x2000825b
    8748:	0000da93 	.word	0x0000da93
    874c:	00000395 	.word	0x00000395
    8750:	0000dacb 	.word	0x0000dacb
    8754:	20007f9c 	.word	0x20007f9c
    8758:	00004d69 	.word	0x00004d69
    875c:	0000db0d 	.word	0x0000db0d
    8760:	20007574 	.word	0x20007574
    8764:	00004f9d 	.word	0x00004f9d
    8768:	0000db49 	.word	0x0000db49
    876c:	20007fa4 	.word	0x20007fa4
    8770:	20007590 	.word	0x20007590
    8774:	20007577 	.word	0x20007577
    8778:	20007578 	.word	0x20007578
    877c:	2000825a 	.word	0x2000825a
    8780:	2000853f 	.word	0x2000853f
    8784:	20007584 	.word	0x20007584
    8788:	0000db86 	.word	0x0000db86
    878c:	0000dbbe 	.word	0x0000dbbe
    8790:	20007f04 	.word	0x20007f04
    8794:	0000dc00 	.word	0x0000dc00
    8798:	20007c57 	.word	0x20007c57
    879c:	41008000 	.word	0x41008000
    87a0:	00006fc1 	.word	0x00006fc1
    87a4:	00004609 	.word	0x00004609
    87a8:	00004451 	.word	0x00004451
    87ac:	4b66      	ldr	r3, [pc, #408]	; (8948 <main_loop+0x123c>)
    87ae:	4798      	blx	r3
			if ((err = I2C_readEXPANDER(PB24_CARDB_I2C_SDA,  PB25_CARDB_I2C_CLK, &miniIO_B_inputs))) {
    87b0:	2139      	movs	r1, #57	; 0x39
    87b2:	4a66      	ldr	r2, [pc, #408]	; (894c <main_loop+0x1240>)
    87b4:	4b66      	ldr	r3, [pc, #408]	; (8950 <main_loop+0x1244>)
    87b6:	2038      	movs	r0, #56	; 0x38
    87b8:	4798      	blx	r3
    87ba:	4601      	mov	r1, r0
    87bc:	b110      	cbz	r0, 87c4 <main_loop+0x10b8>
				xprintf("Could NOT read from the Mini-IO EXPANDER on CARDB:I2C [%i]\r\n", err);
    87be:	4865      	ldr	r0, [pc, #404]	; (8954 <main_loop+0x1248>)
    87c0:	4b61      	ldr	r3, [pc, #388]	; (8948 <main_loop+0x123c>)
    87c2:	4798      	blx	r3
		if ((cardA_type == CARD_VIBRATEK) || (cardB_type == CARD_VIBRATEK) || (cardA_type == CARD_VIBRAPOINT) || (cardB_type == CARD_VIBRAPOINT)) {
    87c4:	f898 2000 	ldrb.w	r2, [r8]
    87c8:	2a01      	cmp	r2, #1
    87ca:	d006      	beq.n	87da <main_loop+0x10ce>
    87cc:	783b      	ldrb	r3, [r7, #0]
    87ce:	2b01      	cmp	r3, #1
    87d0:	d003      	beq.n	87da <main_loop+0x10ce>
    87d2:	2a04      	cmp	r2, #4
    87d4:	d001      	beq.n	87da <main_loop+0x10ce>
    87d6:	2b04      	cmp	r3, #4
    87d8:	d106      	bne.n	87e8 <main_loop+0x10dc>
			card_sampleindex++;
    87da:	4a5f      	ldr	r2, [pc, #380]	; (8958 <main_loop+0x124c>)
    87dc:	6813      	ldr	r3, [r2, #0]
    87de:	3301      	adds	r3, #1
			if ((card_sampleindex == SAMPLE_BUFFER_SIZE) && (readenvironment == 1)) {
    87e0:	f5b3 7f2b 	cmp.w	r3, #684	; 0x2ac
			card_sampleindex++;
    87e4:	6013      	str	r3, [r2, #0]
			if ((card_sampleindex == SAMPLE_BUFFER_SIZE) && (readenvironment == 1)) {
    87e6:	d108      	bne.n	87fa <main_loop+0x10ee>
    87e8:	4b5c      	ldr	r3, [pc, #368]	; (895c <main_loop+0x1250>)
    87ea:	781b      	ldrb	r3, [r3, #0]
    87ec:	2b01      	cmp	r3, #1
    87ee:	d104      	bne.n	87fa <main_loop+0x10ee>
				readenvironment = 2;
    87f0:	4b5a      	ldr	r3, [pc, #360]	; (895c <main_loop+0x1250>)
    87f2:	2202      	movs	r2, #2
    87f4:	701a      	strb	r2, [r3, #0]
				read_boardvalues();
    87f6:	4b5a      	ldr	r3, [pc, #360]	; (8960 <main_loop+0x1254>)
    87f8:	4798      	blx	r3
		if (ring_timer) {
    87fa:	f8df 9188 	ldr.w	r9, [pc, #392]	; 8984 <main_loop+0x1278>
    87fe:	f899 3000 	ldrb.w	r3, [r9]
    8802:	b1c3      	cbz	r3, 8836 <main_loop+0x112a>
			if (ring_check(bpdu_arrived, &stormstate, &ring)) {
    8804:	4a57      	ldr	r2, [pc, #348]	; (8964 <main_loop+0x1258>)
    8806:	4958      	ldr	r1, [pc, #352]	; (8968 <main_loop+0x125c>)
    8808:	9805      	ldr	r0, [sp, #20]
    880a:	4b58      	ldr	r3, [pc, #352]	; (896c <main_loop+0x1260>)
    880c:	4798      	blx	r3
    880e:	b110      	cbz	r0, 8816 <main_loop+0x110a>
				send_relearn_udp = 1;
    8810:	4b57      	ldr	r3, [pc, #348]	; (8970 <main_loop+0x1264>)
    8812:	2201      	movs	r2, #1
    8814:	701a      	strb	r2, [r3, #0]
			ring_timer = 0;
    8816:	2300      	movs	r3, #0
    8818:	f889 3000 	strb.w	r3, [r9]
			if (((CONFIG *)&settings_buffer)->loop_basestation) {
    881c:	4b55      	ldr	r3, [pc, #340]	; (8974 <main_loop+0x1268>)
    881e:	4a56      	ldr	r2, [pc, #344]	; (8978 <main_loop+0x126c>)
    8820:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
    8824:	2b00      	cmp	r3, #0
    8826:	f43f a894 	beq.w	7952 <main_loop+0x246>
				ring_broken = (ring) ? RING_BROKEN : RING_CLOSED;
    882a:	4b4e      	ldr	r3, [pc, #312]	; (8964 <main_loop+0x1258>)
    882c:	781b      	ldrb	r3, [r3, #0]
    882e:	3300      	adds	r3, #0
    8830:	bf18      	it	ne
    8832:	2301      	movne	r3, #1
				ring_broken = RING_NOTCONFIGURED;
    8834:	7013      	strb	r3, [r2, #0]
		key_check++;
    8836:	3401      	adds	r4, #1
		if (key_check < 3000) {
    8838:	f640 33b7 	movw	r3, #2999	; 0xbb7
    883c:	429c      	cmp	r4, r3
    883e:	f77e af6f 	ble.w	7720 <main_loop+0x14>
		if (io_read((struct io_descriptor *const)io, (uint8_t *const)&ch, 1)) {
    8842:	4b4e      	ldr	r3, [pc, #312]	; (897c <main_loop+0x1270>)
    8844:	2201      	movs	r2, #1
    8846:	6818      	ldr	r0, [r3, #0]
    8848:	4b4d      	ldr	r3, [pc, #308]	; (8980 <main_loop+0x1274>)
    884a:	f10d 0127 	add.w	r1, sp, #39	; 0x27
    884e:	4798      	blx	r3
    8850:	2800      	cmp	r0, #0
    8852:	f43e afef 	beq.w	7834 <main_loop+0x128>
			key = (unsigned char)ch;
    8856:	f89d 9027 	ldrb.w	r9, [sp, #39]	; 0x27
    885a:	4c3b      	ldr	r4, [pc, #236]	; (8948 <main_loop+0x123c>)
			switch (key) {
    885c:	f1a9 0342 	sub.w	r3, r9, #66	; 0x42
    8860:	2b36      	cmp	r3, #54	; 0x36
    8862:	f63f ad99 	bhi.w	8398 <main_loop+0xc8c>
    8866:	a201      	add	r2, pc, #4	; (adr r2, 886c <main_loop+0x1160>)
    8868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    886c:	00007a99 	.word	0x00007a99
    8870:	00008399 	.word	0x00008399
    8874:	000079fd 	.word	0x000079fd
    8878:	00008399 	.word	0x00008399
    887c:	00008399 	.word	0x00008399
    8880:	00008399 	.word	0x00008399
    8884:	00008399 	.word	0x00008399
    8888:	00007dbf 	.word	0x00007dbf
    888c:	00008399 	.word	0x00008399
    8890:	00008399 	.word	0x00008399
    8894:	00007acf 	.word	0x00007acf
    8898:	00007efd 	.word	0x00007efd
    889c:	00008399 	.word	0x00008399
    88a0:	00008399 	.word	0x00008399
    88a4:	00007ab9 	.word	0x00007ab9
    88a8:	00008399 	.word	0x00008399
    88ac:	00007959 	.word	0x00007959
    88b0:	00007e89 	.word	0x00007e89
    88b4:	00008399 	.word	0x00008399
    88b8:	00008399 	.word	0x00008399
    88bc:	00008399 	.word	0x00008399
    88c0:	00008399 	.word	0x00008399
    88c4:	00007a77 	.word	0x00007a77
    88c8:	00008399 	.word	0x00008399
    88cc:	00008399 	.word	0x00008399
    88d0:	00008399 	.word	0x00008399
    88d4:	00008399 	.word	0x00008399
    88d8:	00008399 	.word	0x00008399
    88dc:	00008399 	.word	0x00008399
    88e0:	00008399 	.word	0x00008399
    88e4:	00008399 	.word	0x00008399
    88e8:	00008399 	.word	0x00008399
    88ec:	00007a99 	.word	0x00007a99
    88f0:	00008399 	.word	0x00008399
    88f4:	000079fd 	.word	0x000079fd
    88f8:	00008399 	.word	0x00008399
    88fc:	00008399 	.word	0x00008399
    8900:	00008399 	.word	0x00008399
    8904:	00008399 	.word	0x00008399
    8908:	00007dbf 	.word	0x00007dbf
    890c:	00008399 	.word	0x00008399
    8910:	00008399 	.word	0x00008399
    8914:	00007acf 	.word	0x00007acf
    8918:	00007efd 	.word	0x00007efd
    891c:	00008399 	.word	0x00008399
    8920:	00008399 	.word	0x00008399
    8924:	00007ab9 	.word	0x00007ab9
    8928:	00008399 	.word	0x00008399
    892c:	00007959 	.word	0x00007959
    8930:	00007e89 	.word	0x00007e89
    8934:	00008399 	.word	0x00008399
    8938:	00008399 	.word	0x00008399
    893c:	00008399 	.word	0x00008399
    8940:	00008399 	.word	0x00008399
    8944:	00007a77 	.word	0x00007a77
    8948:	00000395 	.word	0x00000395
    894c:	20008258 	.word	0x20008258
    8950:	00004f9d 	.word	0x00004f9d
    8954:	0000dc3c 	.word	0x0000dc3c
    8958:	20008528 	.word	0x20008528
    895c:	20008250 	.word	0x20008250
    8960:	00000501 	.word	0x00000501
    8964:	20008536 	.word	0x20008536
    8968:	2000853c 	.word	0x2000853c
    896c:	00009421 	.word	0x00009421
    8970:	20008259 	.word	0x20008259
    8974:	20007f14 	.word	0x20007f14
    8978:	20008251 	.word	0x20008251
    897c:	20007f08 	.word	0x20007f08
    8980:	0000151d 	.word	0x0000151d
    8984:	2000825d 	.word	0x2000825d

00008988 <main>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: Main start-point of whole application code
// Returns:     Nothing (NULL)
// *****************************************************************************************************************************************************************
int main(void)
{
    8988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t			ch;
	unsigned char	ID_index;
	unsigned char	ID_string[9];
	unsigned int	new_id;
			
	init_done = 0;
    898c:	4b72      	ldr	r3, [pc, #456]	; (8b58 <main+0x1d0>)
				
	/* Initialize the lower-level Atmel drivers, hardware and HAL interface */
	atmel_start_init();

	usart_async_get_io_descriptor(&USART_1, &io);
	usart_async_register_callback(&USART_1, USART_ASYNC_TXC_CB, tx_callb);
    898e:	4c73      	ldr	r4, [pc, #460]	; (8b5c <main+0x1d4>)
	init_done = 0;
    8990:	2500      	movs	r5, #0
{
    8992:	b089      	sub	sp, #36	; 0x24
	init_done = 0;
    8994:	701d      	strb	r5, [r3, #0]
	atmel_start_init();
    8996:	4b72      	ldr	r3, [pc, #456]	; (8b60 <main+0x1d8>)
    8998:	4798      	blx	r3
	usart_async_get_io_descriptor(&USART_1, &io);
    899a:	4b72      	ldr	r3, [pc, #456]	; (8b64 <main+0x1dc>)
    899c:	4972      	ldr	r1, [pc, #456]	; (8b68 <main+0x1e0>)
    899e:	4873      	ldr	r0, [pc, #460]	; (8b6c <main+0x1e4>)
    89a0:	4798      	blx	r3
	usart_async_register_callback(&USART_1, USART_ASYNC_TXC_CB, tx_callb);
    89a2:	4a73      	ldr	r2, [pc, #460]	; (8b70 <main+0x1e8>)
    89a4:	4871      	ldr	r0, [pc, #452]	; (8b6c <main+0x1e4>)
    89a6:	2101      	movs	r1, #1
    89a8:	47a0      	blx	r4
	usart_async_register_callback(&USART_1, USART_ASYNC_RXC_CB, rx_callb);
    89aa:	4a72      	ldr	r2, [pc, #456]	; (8b74 <main+0x1ec>)
    89ac:	486f      	ldr	r0, [pc, #444]	; (8b6c <main+0x1e4>)
    89ae:	4629      	mov	r1, r5
    89b0:	47a0      	blx	r4
	usart_async_enable(&USART_1);
    89b2:	4b71      	ldr	r3, [pc, #452]	; (8b78 <main+0x1f0>)
    89b4:	486d      	ldr	r0, [pc, #436]	; (8b6c <main+0x1e4>)
    89b6:	4798      	blx	r3
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    89b8:	4b70      	ldr	r3, [pc, #448]	; (8b7c <main+0x1f4>)
    89ba:	f240 72fc 	movw	r2, #2044	; 0x7fc
    89be:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    89c0:	4014      	ands	r4, r2
    89c2:	d1fc      	bne.n	89be <main+0x36>
	((Adc *)hw)->DSEQCTRL.reg |= ADC_DSEQCTRL_INPUTCTRL;
    89c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	
	hri_adc_set_DSEQCTRL_INPUTCTRL_bit(ADC0);
	_dma_set_source_address(DMA_CHANNEL_0, (const void *const)inputctrl_buff);
    89c6:	496e      	ldr	r1, [pc, #440]	; (8b80 <main+0x1f8>)
	uip_init();																									// initialize the IP stack

	/* Set the board MAC and IP address along with the network schemes */
	address_configure();
	
	if (((CONFIG *)&settings_buffer)->ID > 0x00000000) {
    89c8:	4e6e      	ldr	r6, [pc, #440]	; (8b84 <main+0x1fc>)
    89ca:	f042 0201 	orr.w	r2, r2, #1
    89ce:	639a      	str	r2, [r3, #56]	; 0x38
	_dma_set_source_address(DMA_CHANNEL_0, (const void *const)inputctrl_buff);
    89d0:	4620      	mov	r0, r4
    89d2:	4b6d      	ldr	r3, [pc, #436]	; (8b88 <main+0x200>)
    89d4:	4798      	blx	r3
	_dma_set_destination_address(DMA_CHANNEL_0, (void *)(uint32_t) &(ADC0->DSEQDATA.reg));
    89d6:	496d      	ldr	r1, [pc, #436]	; (8b8c <main+0x204>)
    89d8:	4b6d      	ldr	r3, [pc, #436]	; (8b90 <main+0x208>)
    89da:	4620      	mov	r0, r4
    89dc:	4798      	blx	r3
	_dma_set_data_amount(DMA_CHANNEL_0, SEQ_LENGTH);
    89de:	210a      	movs	r1, #10
    89e0:	4620      	mov	r0, r4
    89e2:	4b6c      	ldr	r3, [pc, #432]	; (8b94 <main+0x20c>)
    89e4:	4798      	blx	r3
	_dma_enable_transaction(DMA_CHANNEL_0, false);
    89e6:	4621      	mov	r1, r4
    89e8:	4b6b      	ldr	r3, [pc, #428]	; (8b98 <main+0x210>)
    89ea:	4620      	mov	r0, r4
    89ec:	4798      	blx	r3
	xprintf("\r\n\r\n\r\n---------------------\r\nBOOT-UP\r\n---------------------\r\n\r\n");
    89ee:	4c6b      	ldr	r4, [pc, #428]	; (8b9c <main+0x214>)
    89f0:	486b      	ldr	r0, [pc, #428]	; (8ba0 <main+0x218>)
    89f2:	47a0      	blx	r4
	var_init();
    89f4:	4b6b      	ldr	r3, [pc, #428]	; (8ba4 <main+0x21c>)
    89f6:	4798      	blx	r3
	gpio_init();
    89f8:	4b6b      	ldr	r3, [pc, #428]	; (8ba8 <main+0x220>)
    89fa:	4798      	blx	r3
	comms_init();
    89fc:	4b6b      	ldr	r3, [pc, #428]	; (8bac <main+0x224>)
    89fe:	4798      	blx	r3
	switch_init();
    8a00:	4b6b      	ldr	r3, [pc, #428]	; (8bb0 <main+0x228>)
    8a02:	4798      	blx	r3
	switch_configure();
    8a04:	4b6b      	ldr	r3, [pc, #428]	; (8bb4 <main+0x22c>)
    8a06:	4798      	blx	r3
	timer_setup();
    8a08:	4b6b      	ldr	r3, [pc, #428]	; (8bb8 <main+0x230>)
    8a0a:	4798      	blx	r3
	ADC_init();
    8a0c:	4b6b      	ldr	r3, [pc, #428]	; (8bbc <main+0x234>)
    8a0e:	4798      	blx	r3
	crypto_init();
    8a10:	4b6b      	ldr	r3, [pc, #428]	; (8bc0 <main+0x238>)
    8a12:	4798      	blx	r3
	uip_init();																									// initialize the IP stack
    8a14:	4b6b      	ldr	r3, [pc, #428]	; (8bc4 <main+0x23c>)
    8a16:	4798      	blx	r3
	address_configure();
    8a18:	4b6b      	ldr	r3, [pc, #428]	; (8bc8 <main+0x240>)
    8a1a:	4798      	blx	r3
	if (((CONFIG *)&settings_buffer)->ID > 0x00000000) {
    8a1c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    8a1e:	2b00      	cmp	r3, #0
    8a20:	d053      	beq.n	8aca <main+0x142>
		/* Initialize the ring loop topology function */
		ring_init((unsigned char)(((CONFIG *)&settings_buffer)->loop_basestation), (unsigned char *)&mac_raw);
    8a22:	496a      	ldr	r1, [pc, #424]	; (8bcc <main+0x244>)
    8a24:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    8a28:	4b69      	ldr	r3, [pc, #420]	; (8bd0 <main+0x248>)
    8a2a:	4798      	blx	r3
		xprintf("* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  *\r\n");
		xprintf("* PLEASE ENTER THE 32-BIT DEVICE [ID] BELOW                                                *\r\n");
		xprintf("********************************************************************************************\r\n");
	}
	
	if (((CONFIG *)&settings_buffer)->ID > 0x00000000) {
    8a2c:	6af1      	ldr	r1, [r6, #44]	; 0x2c
    8a2e:	2900      	cmp	r1, #0
    8a30:	d158      	bne.n	8ae4 <main+0x15c>
    8a32:	4f68      	ldr	r7, [pc, #416]	; (8bd4 <main+0x24c>)
		xprintf("MultiSense [boot-up & init completed ID = %d]\r\n", ((CONFIG *)&settings_buffer)->ID);
		xprintf("- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\r\n");
	} else {
		do {
			xprintf("\r\nEnter new [ID] now: ");
    8a34:	4868      	ldr	r0, [pc, #416]	; (8bd8 <main+0x250>)
    8a36:	f04f 0a10 	mov.w	sl, #16
    8a3a:	47a0      	blx	r4
    8a3c:	46d3      	mov	fp, sl
			/* check for a character being pressed on the CLI keyboard */
					
			ID_index = 0;
    8a3e:	2300      	movs	r3, #0
    8a40:	9301      	str	r3, [sp, #4]
					
			while (1) {
				gpio_set_pin_level(PB04_LED_PWR, 1);
				delay_ms(100);
    8a42:	2064      	movs	r0, #100	; 0x64
    8a44:	4d65      	ldr	r5, [pc, #404]	; (8bdc <main+0x254>)
    8a46:	f8c7 b098 	str.w	fp, [r7, #152]	; 0x98
				gpio_set_pin_level(PB04_LED_PWR, 0);
				delay_ms(100);
				
				if (io_read((struct io_descriptor *const)io, (uint8_t *const)&ch, 1)) {
    8a4a:	f8df 811c 	ldr.w	r8, [pc, #284]	; 8b68 <main+0x1e0>
    8a4e:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 8c28 <main+0x2a0>
				delay_ms(100);
    8a52:	47a8      	blx	r5
				delay_ms(100);
    8a54:	2064      	movs	r0, #100	; 0x64
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    8a56:	f8c7 a094 	str.w	sl, [r7, #148]	; 0x94
    8a5a:	47a8      	blx	r5
				if (io_read((struct io_descriptor *const)io, (uint8_t *const)&ch, 1)) {
    8a5c:	2201      	movs	r2, #1
    8a5e:	f10d 010f 	add.w	r1, sp, #15
    8a62:	f8d8 0000 	ldr.w	r0, [r8]
    8a66:	47c8      	blx	r9
    8a68:	9b01      	ldr	r3, [sp, #4]
    8a6a:	2800      	cmp	r0, #0
    8a6c:	d0e8      	beq.n	8a40 <main+0xb8>
					/* If so, then read and get the character pressed */
				
					if ((unsigned char)ch == 10) {
    8a6e:	f89d 100f 	ldrb.w	r1, [sp, #15]
    8a72:	290a      	cmp	r1, #10
    8a74:	d0e4      	beq.n	8a40 <main+0xb8>
						continue;
					}
				
					if (((unsigned char)ch == 13) && (ID_index)) {
    8a76:	290d      	cmp	r1, #13
    8a78:	d13c      	bne.n	8af4 <main+0x16c>
    8a7a:	2b00      	cmp	r3, #0
    8a7c:	d0e0      	beq.n	8a40 <main+0xb8>
					ID_string[ID_index++] = (unsigned char)ch;
					xprintf("%c", ch);
				}
			}
			
			ID_string[ID_index] = 0;
    8a7e:	aa08      	add	r2, sp, #32
    8a80:	4413      	add	r3, r2
			xprintf("ID entered: %s\r\n", ID_string);
    8a82:	a905      	add	r1, sp, #20
			ID_string[ID_index] = 0;
    8a84:	2200      	movs	r2, #0
			xprintf("ID entered: %s\r\n", ID_string);
    8a86:	4856      	ldr	r0, [pc, #344]	; (8be0 <main+0x258>)
			ID_string[ID_index] = 0;
    8a88:	f803 2c0c 	strb.w	r2, [r3, #-12]
			xprintf("ID entered: %s\r\n", ID_string);
    8a8c:	47a0      	blx	r4
			xprintf("\r\nIs this correct Y/N?\r\n");
    8a8e:	4855      	ldr	r0, [pc, #340]	; (8be4 <main+0x25c>)
			while (1) {
				if (io_read((struct io_descriptor *const)io, (uint8_t *const)&ch, 1)) {
				/* If so, then read and get the character pressed */
				
					if (((unsigned char)ch == 'y') || ((unsigned char)ch == 'Y')) {
						sscanf((char *)ID_string, "%u", &new_id);
    8a90:	f8df a198 	ldr.w	sl, [pc, #408]	; 8c2c <main+0x2a4>
    8a94:	f8df b198 	ldr.w	fp, [pc, #408]	; 8c30 <main+0x2a8>
			xprintf("\r\nIs this correct Y/N?\r\n");
    8a98:	47a0      	blx	r4
				if (io_read((struct io_descriptor *const)io, (uint8_t *const)&ch, 1)) {
    8a9a:	2201      	movs	r2, #1
    8a9c:	f10d 010f 	add.w	r1, sp, #15
    8aa0:	f8d8 0000 	ldr.w	r0, [r8]
    8aa4:	47c8      	blx	r9
    8aa6:	2800      	cmp	r0, #0
    8aa8:	d049      	beq.n	8b3e <main+0x1b6>
					if (((unsigned char)ch == 'y') || ((unsigned char)ch == 'Y')) {
    8aaa:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8aae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    8ab2:	2b59      	cmp	r3, #89	; 0x59
    8ab4:	d140      	bne.n	8b38 <main+0x1b0>
						sscanf((char *)ID_string, "%u", &new_id);
    8ab6:	aa04      	add	r2, sp, #16
    8ab8:	4651      	mov	r1, sl
    8aba:	a805      	add	r0, sp, #20
    8abc:	47d8      	blx	fp
		
						if (!new_id) {
    8abe:	9b04      	ldr	r3, [sp, #16]
    8ac0:	2b00      	cmp	r3, #0
    8ac2:	d127      	bne.n	8b14 <main+0x18c>
							xprintf("\r\nERROR ID cannot be <ZERO>!!!!!\r\n");
    8ac4:	4848      	ldr	r0, [pc, #288]	; (8be8 <main+0x260>)
    8ac6:	47a0      	blx	r4
							break;
    8ac8:	e7b4      	b.n	8a34 <main+0xac>
		xprintf("********************************************************************************************\r\n");
    8aca:	4848      	ldr	r0, [pc, #288]	; (8bec <main+0x264>)
    8acc:	47a0      	blx	r4
		xprintf("* THE MULTI-SENSE DEVICE [ID] HAS NOT BEEN SET. THIS DEFICE WILL NOT FUNCTION OR RUN AS    *\r\n");
    8ace:	4848      	ldr	r0, [pc, #288]	; (8bf0 <main+0x268>)
    8ad0:	47a0      	blx	r4
		xprintf("* NORMAL UNTIL THE [ID] NUMBER HAS BEEN ENTERED BY THIS TERMINAL FACILITY.                 *\r\n");
    8ad2:	4848      	ldr	r0, [pc, #288]	; (8bf4 <main+0x26c>)
    8ad4:	47a0      	blx	r4
		xprintf("* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  *\r\n");
    8ad6:	4848      	ldr	r0, [pc, #288]	; (8bf8 <main+0x270>)
    8ad8:	47a0      	blx	r4
		xprintf("* PLEASE ENTER THE 32-BIT DEVICE [ID] BELOW                                                *\r\n");
    8ada:	4848      	ldr	r0, [pc, #288]	; (8bfc <main+0x274>)
    8adc:	47a0      	blx	r4
		xprintf("********************************************************************************************\r\n");
    8ade:	4843      	ldr	r0, [pc, #268]	; (8bec <main+0x264>)
    8ae0:	47a0      	blx	r4
    8ae2:	e7a3      	b.n	8a2c <main+0xa4>
		xprintf("MultiSense [boot-up & init completed ID = %d]\r\n", ((CONFIG *)&settings_buffer)->ID);
    8ae4:	4846      	ldr	r0, [pc, #280]	; (8c00 <main+0x278>)
    8ae6:	47a0      	blx	r4
		xprintf("- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\r\n");
    8ae8:	4846      	ldr	r0, [pc, #280]	; (8c04 <main+0x27c>)
    8aea:	47a0      	blx	r4
		}
		while (1);
	}
	
	/* Create, enable and start the system watchdog (4 seconds timeout period) */
	watchdog_init();
    8aec:	4b46      	ldr	r3, [pc, #280]	; (8c08 <main+0x280>)
    8aee:	4798      	blx	r3
	
	/* Run the main-loop */
	main_loop();
    8af0:	4b46      	ldr	r3, [pc, #280]	; (8c0c <main+0x284>)
    8af2:	4798      	blx	r3
					if ((unsigned char)ch < '0') {
    8af4:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
    8af8:	2a09      	cmp	r2, #9
    8afa:	d8a1      	bhi.n	8a40 <main+0xb8>
					if (ID_index == 8) {
    8afc:	2b08      	cmp	r3, #8
    8afe:	d09f      	beq.n	8a40 <main+0xb8>
					ID_string[ID_index++] = (unsigned char)ch;
    8b00:	aa08      	add	r2, sp, #32
    8b02:	1c5d      	adds	r5, r3, #1
    8b04:	4413      	add	r3, r2
    8b06:	b2ed      	uxtb	r5, r5
					xprintf("%c", ch);
    8b08:	4841      	ldr	r0, [pc, #260]	; (8c10 <main+0x288>)
					ID_string[ID_index++] = (unsigned char)ch;
    8b0a:	f803 1c0c 	strb.w	r1, [r3, #-12]
					xprintf("%c", ch);
    8b0e:	47a0      	blx	r4
					ID_string[ID_index++] = (unsigned char)ch;
    8b10:	462b      	mov	r3, r5
    8b12:	e795      	b.n	8a40 <main+0xb8>
						((CONFIG *)&settings_buffer)->ID = new_id;
    8b14:	62f3      	str	r3, [r6, #44]	; 0x2c
						if (EEprom_settings(settings_buffer, SETTING_STRUCTURE_SIZE, 1) != ERR_NONE) {
    8b16:	2201      	movs	r2, #1
    8b18:	2180      	movs	r1, #128	; 0x80
    8b1a:	481a      	ldr	r0, [pc, #104]	; (8b84 <main+0x1fc>)
    8b1c:	4b3d      	ldr	r3, [pc, #244]	; (8c14 <main+0x28c>)
    8b1e:	4798      	blx	r3
    8b20:	b140      	cbz	r0, 8b34 <main+0x1ac>
							xprintf("MultiSense [configuration ERROR WRITING]\r\n");
    8b22:	483d      	ldr	r0, [pc, #244]	; (8c18 <main+0x290>)
							xprintf("MultiSense [configuration WRITTEN]\r\n");
    8b24:	47a0      	blx	r4
						xprintf("\r\n\r\r\rRebooting...(please wait)\r\n\r\n");
    8b26:	483d      	ldr	r0, [pc, #244]	; (8c1c <main+0x294>)
    8b28:	47a0      	blx	r4
						delay_ms(250);
    8b2a:	20fa      	movs	r0, #250	; 0xfa
    8b2c:	47a8      	blx	r5
					   _reset_mcu();
    8b2e:	4b3c      	ldr	r3, [pc, #240]	; (8c20 <main+0x298>)
    8b30:	4798      	blx	r3
    8b32:	e7b2      	b.n	8a9a <main+0x112>
							xprintf("MultiSense [configuration WRITTEN]\r\n");
    8b34:	483b      	ldr	r0, [pc, #236]	; (8c24 <main+0x29c>)
    8b36:	e7f5      	b.n	8b24 <main+0x19c>
					} else if (((unsigned char)ch == 'n') || ((unsigned char)ch == 'N')) {
    8b38:	2b4e      	cmp	r3, #78	; 0x4e
    8b3a:	d1ae      	bne.n	8a9a <main+0x112>
    8b3c:	e77a      	b.n	8a34 <main+0xac>
					delay_ms(100);
    8b3e:	2064      	movs	r0, #100	; 0x64
    8b40:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    8b42:	2310      	movs	r3, #16
    8b44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
					delay_ms(100);
    8b48:	2064      	movs	r0, #100	; 0x64
    8b4a:	9301      	str	r3, [sp, #4]
    8b4c:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    8b4e:	9b01      	ldr	r3, [sp, #4]
    8b50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    8b54:	e7a1      	b.n	8a9a <main+0x112>
    8b56:	bf00      	nop
    8b58:	2000757b 	.word	0x2000757b
    8b5c:	00001a65 	.word	0x00001a65
    8b60:	000002d1 	.word	0x000002d1
    8b64:	00001a3d 	.word	0x00001a3d
    8b68:	20007f08 	.word	0x20007f08
    8b6c:	200074d8 	.word	0x200074d8
    8b70:	00007061 	.word	0x00007061
    8b74:	00006fbd 	.word	0x00006fbd
    8b78:	00001a11 	.word	0x00001a11
    8b7c:	43001c00 	.word	0x43001c00
    8b80:	20000000 	.word	0x20000000
    8b84:	20007f14 	.word	0x20007f14
    8b88:	000024dd 	.word	0x000024dd
    8b8c:	43001c34 	.word	0x43001c34
    8b90:	000024c9 	.word	0x000024c9
    8b94:	000024f1 	.word	0x000024f1
    8b98:	00002541 	.word	0x00002541
    8b9c:	00000395 	.word	0x00000395
    8ba0:	0000eb25 	.word	0x0000eb25
    8ba4:	00006d85 	.word	0x00006d85
    8ba8:	00006b69 	.word	0x00006b69
    8bac:	00006281 	.word	0x00006281
    8bb0:	00006305 	.word	0x00006305
    8bb4:	0000632d 	.word	0x0000632d
    8bb8:	00006239 	.word	0x00006239
    8bbc:	00006271 	.word	0x00006271
    8bc0:	000062dd 	.word	0x000062dd
    8bc4:	00009681 	.word	0x00009681
    8bc8:	00006941 	.word	0x00006941
    8bcc:	20007f94 	.word	0x20007f94
    8bd0:	0000919d 	.word	0x0000919d
    8bd4:	41008000 	.word	0x41008000
    8bd8:	0000ede8 	.word	0x0000ede8
    8bdc:	00001225 	.word	0x00001225
    8be0:	0000edff 	.word	0x0000edff
    8be4:	0000ee10 	.word	0x0000ee10
    8be8:	0000ee2c 	.word	0x0000ee2c
    8bec:	0000eb65 	.word	0x0000eb65
    8bf0:	0000ebc4 	.word	0x0000ebc4
    8bf4:	0000ec23 	.word	0x0000ec23
    8bf8:	0000ec82 	.word	0x0000ec82
    8bfc:	0000ece1 	.word	0x0000ece1
    8c00:	0000ed40 	.word	0x0000ed40
    8c04:	0000ed70 	.word	0x0000ed70
    8c08:	00006d39 	.word	0x00006d39
    8c0c:	0000770d 	.word	0x0000770d
    8c10:	0000e014 	.word	0x0000e014
    8c14:	0000b1a5 	.word	0x0000b1a5
    8c18:	0000d78b 	.word	0x0000d78b
    8c1c:	0000ee4f 	.word	0x0000ee4f
    8c20:	00002301 	.word	0x00002301
    8c24:	0000d7b6 	.word	0x0000d7b6
    8c28:	0000151d 	.word	0x0000151d
    8c2c:	0000ee29 	.word	0x0000ee29
    8c30:	0000b355 	.word	0x0000b355

00008c34 <nv_init>:

/**
 * \brief Initialize non-volatile storage
 */
void nv_init(void *descr)
{
    8c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	flash = (struct flash_descriptor *)descr;
    8c38:	4f12      	ldr	r7, [pc, #72]	; (8c84 <nv_init+0x50>)

	/* Storage must start at row start */
	ASSERT((CONF_STORAGE_MEMORY_START % (flash_get_page_size(flash) * 4)) == 0);
    8c3a:	4e13      	ldr	r6, [pc, #76]	; (8c88 <nv_init+0x54>)
	flash = (struct flash_descriptor *)descr;
    8c3c:	6038      	str	r0, [r7, #0]
	ASSERT((CONF_STORAGE_MEMORY_START % (flash_get_page_size(flash) * 4)) == 0);
    8c3e:	47b0      	blx	r6
    8c40:	0080      	lsls	r0, r0, #2
    8c42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    8c46:	fbb3 f3f0 	udiv	r3, r3, r0
    8c4a:	4358      	muls	r0, r3
    8c4c:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
    8c50:	4c0e      	ldr	r4, [pc, #56]	; (8c8c <nv_init+0x58>)
    8c52:	4d0f      	ldr	r5, [pc, #60]	; (8c90 <nv_init+0x5c>)
    8c54:	4258      	negs	r0, r3
    8c56:	4158      	adcs	r0, r3
    8c58:	4621      	mov	r1, r4
    8c5a:	2235      	movs	r2, #53	; 0x35
    8c5c:	47a8      	blx	r5
	/* Sector must be of integer number of rows */
	ASSERT((CONF_SECTOR_SIZE % ((flash_get_page_size(flash) * 4)) == 0));
    8c5e:	6838      	ldr	r0, [r7, #0]
    8c60:	47b0      	blx	r6
    8c62:	0080      	lsls	r0, r0, #2
    8c64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    8c68:	fbb3 f3f0 	udiv	r3, r3, r0
    8c6c:	4358      	muls	r0, r3
    8c6e:	4621      	mov	r1, r4
    8c70:	f5a0 5480 	sub.w	r4, r0, #4096	; 0x1000
    8c74:	4260      	negs	r0, r4
    8c76:	4160      	adcs	r0, r4
    8c78:	462b      	mov	r3, r5
    8c7a:	2237      	movs	r2, #55	; 0x37
}
    8c7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	ASSERT((CONF_SECTOR_SIZE % ((flash_get_page_size(flash) * 4)) == 0));
    8c80:	4718      	bx	r3
    8c82:	bf00      	nop
    8c84:	2000723c 	.word	0x2000723c
    8c88:	000014c5 	.word	0x000014c5
    8c8c:	0000ee72 	.word	0x0000ee72
    8c90:	00001fdd 	.word	0x00001fdd

00008c94 <nv_write>:
/**
 * \brief Write data to non-volatile storage
 */
void nv_write(const uint8_t sector, const uint16_t offset, const uint8_t *const data, const uint16_t size)
{
	uint32_t address = CONF_STORAGE_MEMORY_START + sector * CONF_SECTOR_SIZE + offset;
    8c94:	3010      	adds	r0, #16
{
    8c96:	b570      	push	{r4, r5, r6, lr}
	uint32_t address = CONF_STORAGE_MEMORY_START + sector * CONF_SECTOR_SIZE + offset;
    8c98:	eb01 3400 	add.w	r4, r1, r0, lsl #12

	/* Write access must start and end within the storage and must not write
	   more than a sector. */
	ASSERT((address <= NV_MEMORY_END) && ((address + size) <= (NV_MEMORY_END + 1))
    8c9c:	f5b4 3f90 	cmp.w	r4, #73728	; 0x12000
{
    8ca0:	4616      	mov	r6, r2
    8ca2:	461d      	mov	r5, r3
	ASSERT((address <= NV_MEMORY_END) && ((address + size) <= (NV_MEMORY_END + 1))
    8ca4:	da17      	bge.n	8cd6 <nv_write+0x42>
    8ca6:	4423      	add	r3, r4
    8ca8:	f5b3 3f90 	cmp.w	r3, #73728	; 0x12000
    8cac:	d813      	bhi.n	8cd6 <nv_write+0x42>
    8cae:	1868      	adds	r0, r5, r1
    8cb0:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    8cb4:	bfcc      	ite	gt
    8cb6:	2000      	movgt	r0, #0
    8cb8:	2001      	movle	r0, #1
    8cba:	2244      	movs	r2, #68	; 0x44
    8cbc:	4907      	ldr	r1, [pc, #28]	; (8cdc <nv_write+0x48>)
    8cbe:	4b08      	ldr	r3, [pc, #32]	; (8ce0 <nv_write+0x4c>)
    8cc0:	4798      	blx	r3
	       && ((offset + size) <= CONF_SECTOR_SIZE));

	flash_append(flash, address, (uint8_t *)data, size);
    8cc2:	4621      	mov	r1, r4
    8cc4:	4807      	ldr	r0, [pc, #28]	; (8ce4 <nv_write+0x50>)
    8cc6:	4c08      	ldr	r4, [pc, #32]	; (8ce8 <nv_write+0x54>)
    8cc8:	6800      	ldr	r0, [r0, #0]
    8cca:	462b      	mov	r3, r5
    8ccc:	4632      	mov	r2, r6
    8cce:	46a4      	mov	ip, r4
}
    8cd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	flash_append(flash, address, (uint8_t *)data, size);
    8cd4:	4760      	bx	ip
	ASSERT((address <= NV_MEMORY_END) && ((address + size) <= (NV_MEMORY_END + 1))
    8cd6:	2000      	movs	r0, #0
    8cd8:	e7ef      	b.n	8cba <nv_write+0x26>
    8cda:	bf00      	nop
    8cdc:	0000ee72 	.word	0x0000ee72
    8ce0:	00001fdd 	.word	0x00001fdd
    8ce4:	2000723c 	.word	0x2000723c
    8ce8:	000013c9 	.word	0x000013c9

00008cec <nv_read>:
/**
 * \brief Read data from non-volatile storage
 */
void nv_read(const uint8_t sector, const uint16_t offset, uint8_t *const data, const uint16_t size)
{
	uint32_t address = CONF_STORAGE_MEMORY_START + sector * CONF_SECTOR_SIZE + offset;
    8cec:	3010      	adds	r0, #16
{
    8cee:	b570      	push	{r4, r5, r6, lr}
	uint32_t address = CONF_STORAGE_MEMORY_START + sector * CONF_SECTOR_SIZE + offset;
    8cf0:	eb01 3400 	add.w	r4, r1, r0, lsl #12

	/* Read access must start and end within the storage and must not read more
	   than a sector. */
	ASSERT((address <= NV_MEMORY_END) && ((address + size) <= (NV_MEMORY_END + 1))
    8cf4:	f5b4 3f90 	cmp.w	r4, #73728	; 0x12000
{
    8cf8:	4616      	mov	r6, r2
    8cfa:	461d      	mov	r5, r3
	ASSERT((address <= NV_MEMORY_END) && ((address + size) <= (NV_MEMORY_END + 1))
    8cfc:	da17      	bge.n	8d2e <nv_read+0x42>
    8cfe:	4423      	add	r3, r4
    8d00:	f5b3 3f90 	cmp.w	r3, #73728	; 0x12000
    8d04:	d813      	bhi.n	8d2e <nv_read+0x42>
    8d06:	1868      	adds	r0, r5, r1
    8d08:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    8d0c:	bfcc      	ite	gt
    8d0e:	2000      	movgt	r0, #0
    8d10:	2001      	movle	r0, #1
    8d12:	2253      	movs	r2, #83	; 0x53
    8d14:	4907      	ldr	r1, [pc, #28]	; (8d34 <nv_read+0x48>)
    8d16:	4b08      	ldr	r3, [pc, #32]	; (8d38 <nv_read+0x4c>)
    8d18:	4798      	blx	r3
	       && ((offset + size) <= CONF_SECTOR_SIZE));

	flash_read(flash, address, data, size);
    8d1a:	4621      	mov	r1, r4
    8d1c:	4807      	ldr	r0, [pc, #28]	; (8d3c <nv_read+0x50>)
    8d1e:	4c08      	ldr	r4, [pc, #32]	; (8d40 <nv_read+0x54>)
    8d20:	6800      	ldr	r0, [r0, #0]
    8d22:	462b      	mov	r3, r5
    8d24:	4632      	mov	r2, r6
    8d26:	46a4      	mov	ip, r4
}
    8d28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	flash_read(flash, address, data, size);
    8d2c:	4760      	bx	ip
	ASSERT((address <= NV_MEMORY_END) && ((address + size) <= (NV_MEMORY_END + 1))
    8d2e:	2000      	movs	r0, #0
    8d30:	e7ef      	b.n	8d12 <nv_read+0x26>
    8d32:	bf00      	nop
    8d34:	0000ee72 	.word	0x0000ee72
    8d38:	00001fdd 	.word	0x00001fdd
    8d3c:	2000723c 	.word	0x2000723c
    8d40:	000012d1 	.word	0x000012d1

00008d44 <nv_erase_sector>:
/**
 * \brief Erase a sector
 */
void nv_erase_sector(uint8_t sector)
{
	uint32_t address = CONF_STORAGE_MEMORY_START + sector * CONF_SECTOR_SIZE;
    8d44:	3010      	adds	r0, #16
{
    8d46:	b570      	push	{r4, r5, r6, lr}
	uint32_t address = CONF_STORAGE_MEMORY_START + sector * CONF_SECTOR_SIZE;
    8d48:	0304      	lsls	r4, r0, #12

	ASSERT(address <= NV_MEMORY_END);
    8d4a:	f5b4 3f90 	cmp.w	r4, #73728	; 0x12000
    8d4e:	f04f 025f 	mov.w	r2, #95	; 0x5f
    8d52:	490a      	ldr	r1, [pc, #40]	; (8d7c <nv_erase_sector+0x38>)
    8d54:	4b0a      	ldr	r3, [pc, #40]	; (8d80 <nv_erase_sector+0x3c>)
    8d56:	bf2c      	ite	cs
    8d58:	2000      	movcs	r0, #0
    8d5a:	2001      	movcc	r0, #1
    8d5c:	4798      	blx	r3

	flash_erase(flash, address, CONF_SECTOR_SIZE / flash_get_page_size(flash));
    8d5e:	4b09      	ldr	r3, [pc, #36]	; (8d84 <nv_erase_sector+0x40>)
    8d60:	681d      	ldr	r5, [r3, #0]
    8d62:	4b09      	ldr	r3, [pc, #36]	; (8d88 <nv_erase_sector+0x44>)
    8d64:	4628      	mov	r0, r5
    8d66:	4798      	blx	r3
    8d68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    8d6c:	4621      	mov	r1, r4
    8d6e:	fbb2 f2f0 	udiv	r2, r2, r0
    8d72:	4b06      	ldr	r3, [pc, #24]	; (8d8c <nv_erase_sector+0x48>)
    8d74:	4628      	mov	r0, r5
}
    8d76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	flash_erase(flash, address, CONF_SECTOR_SIZE / flash_get_page_size(flash));
    8d7a:	4718      	bx	r3
    8d7c:	0000ee72 	.word	0x0000ee72
    8d80:	00001fdd 	.word	0x00001fdd
    8d84:	2000723c 	.word	0x2000723c
    8d88:	000014c5 	.word	0x000014c5
    8d8c:	00001451 	.word	0x00001451

00008d90 <nv_is_equal>:

/**
 * \brief Compare given data and data stored in non-volatile storage
 */
bool nv_is_equal(const uint8_t sector, const uint16_t offset, const uint8_t *const data, const uint16_t size)
{
    8d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t  tmp[64];
	uint16_t pos     = 0;
	uint32_t address = CONF_STORAGE_MEMORY_START + sector * CONF_SECTOR_SIZE + offset;
    8d94:	3010      	adds	r0, #16
    8d96:	eb01 3700 	add.w	r7, r1, r0, lsl #12

	/* Read access must start and end within the storage and must not read more
	   than a sector. There must be at least one byte to compare to. */
	ASSERT((address <= NV_MEMORY_END) && ((address + size) <= (NV_MEMORY_END + 1))
    8d9a:	f5b7 3f90 	cmp.w	r7, #73728	; 0x12000
{
    8d9e:	b091      	sub	sp, #68	; 0x44
    8da0:	4690      	mov	r8, r2
    8da2:	461e      	mov	r6, r3
	ASSERT((address <= NV_MEMORY_END) && ((address + size) <= (NV_MEMORY_END + 1))
    8da4:	da1b      	bge.n	8dde <nv_is_equal+0x4e>
    8da6:	443b      	add	r3, r7
    8da8:	f5b3 3f90 	cmp.w	r3, #73728	; 0x12000
    8dac:	d817      	bhi.n	8dde <nv_is_equal+0x4e>
    8dae:	4431      	add	r1, r6
    8db0:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    8db4:	dc13      	bgt.n	8dde <nv_is_equal+0x4e>
    8db6:	1c30      	adds	r0, r6, #0
    8db8:	bf18      	it	ne
    8dba:	2001      	movne	r0, #1
    8dbc:	2270      	movs	r2, #112	; 0x70
    8dbe:	4914      	ldr	r1, [pc, #80]	; (8e10 <nv_is_equal+0x80>)
    8dc0:	4b14      	ldr	r3, [pc, #80]	; (8e14 <nv_is_equal+0x84>)
	       && ((offset + size) <= CONF_SECTOR_SIZE) && size);

	while (pos != size) {
		uint8_t cur_size = min(64, size - pos);

		flash_read(flash, address + pos, tmp, cur_size);
    8dc2:	f8df 9054 	ldr.w	r9, [pc, #84]	; 8e18 <nv_is_equal+0x88>
    8dc6:	f8df a054 	ldr.w	sl, [pc, #84]	; 8e1c <nv_is_equal+0x8c>
		if (memcmp(data + pos, tmp, cur_size)) {
    8dca:	f8df b054 	ldr.w	fp, [pc, #84]	; 8e20 <nv_is_equal+0x90>
	ASSERT((address <= NV_MEMORY_END) && ((address + size) <= (NV_MEMORY_END + 1))
    8dce:	4798      	blx	r3
	uint16_t pos     = 0;
    8dd0:	2500      	movs	r5, #0
	while (pos != size) {
    8dd2:	42b5      	cmp	r5, r6
    8dd4:	d105      	bne.n	8de2 <nv_is_equal+0x52>
		}

		pos += cur_size;
	}

	return true;
    8dd6:	2001      	movs	r0, #1
}
    8dd8:	b011      	add	sp, #68	; 0x44
    8dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ASSERT((address <= NV_MEMORY_END) && ((address + size) <= (NV_MEMORY_END + 1))
    8dde:	2000      	movs	r0, #0
    8de0:	e7ec      	b.n	8dbc <nv_is_equal+0x2c>
		uint8_t cur_size = min(64, size - pos);
    8de2:	1b74      	subs	r4, r6, r5
    8de4:	2c40      	cmp	r4, #64	; 0x40
    8de6:	bfa8      	it	ge
    8de8:	2440      	movge	r4, #64	; 0x40
    8dea:	b2e4      	uxtb	r4, r4
		flash_read(flash, address + pos, tmp, cur_size);
    8dec:	466a      	mov	r2, sp
    8dee:	1979      	adds	r1, r7, r5
    8df0:	4623      	mov	r3, r4
    8df2:	f8d9 0000 	ldr.w	r0, [r9]
    8df6:	47d0      	blx	sl
		if (memcmp(data + pos, tmp, cur_size)) {
    8df8:	4622      	mov	r2, r4
    8dfa:	4669      	mov	r1, sp
    8dfc:	eb08 0005 	add.w	r0, r8, r5
    8e00:	47d8      	blx	fp
    8e02:	b910      	cbnz	r0, 8e0a <nv_is_equal+0x7a>
		pos += cur_size;
    8e04:	4425      	add	r5, r4
    8e06:	b2ad      	uxth	r5, r5
    8e08:	e7e3      	b.n	8dd2 <nv_is_equal+0x42>
			return false;
    8e0a:	2000      	movs	r0, #0
    8e0c:	e7e4      	b.n	8dd8 <nv_is_equal+0x48>
    8e0e:	bf00      	nop
    8e10:	0000ee72 	.word	0x0000ee72
    8e14:	00001fdd 	.word	0x00001fdd
    8e18:	2000723c 	.word	0x2000723c
    8e1c:	000012d1 	.word	0x000012d1
    8e20:	0000b2dd 	.word	0x0000b2dd

00008e24 <nv_is_empty>:

/**
 * \brief Check if given area is empty
 */
bool nv_is_empty(const uint8_t sector, const uint16_t offset, const uint16_t size)
{
    8e24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint8_t  tmp[64];
	uint16_t pos     = 0;
	uint32_t address = CONF_STORAGE_MEMORY_START + sector * CONF_SECTOR_SIZE + offset;
    8e28:	3010      	adds	r0, #16
    8e2a:	eb01 3700 	add.w	r7, r1, r0, lsl #12

	/* Read access must start and end within the storage and must not read more
	   than a sector. There must be at least one byte to compare to. */
	ASSERT((address <= NV_MEMORY_END) && ((address + size) <= (NV_MEMORY_END + 1))
    8e2e:	f5b7 3f90 	cmp.w	r7, #73728	; 0x12000
{
    8e32:	b091      	sub	sp, #68	; 0x44
    8e34:	4615      	mov	r5, r2
	ASSERT((address <= NV_MEMORY_END) && ((address + size) <= (NV_MEMORY_END + 1))
    8e36:	da1e      	bge.n	8e76 <nv_is_empty+0x52>
    8e38:	19d3      	adds	r3, r2, r7
    8e3a:	f5b3 3f90 	cmp.w	r3, #73728	; 0x12000
    8e3e:	d81a      	bhi.n	8e76 <nv_is_empty+0x52>
    8e40:	4411      	add	r1, r2
    8e42:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    8e46:	dc16      	bgt.n	8e76 <nv_is_empty+0x52>
    8e48:	1c10      	adds	r0, r2, #0
    8e4a:	bf18      	it	ne
    8e4c:	2001      	movne	r0, #1
    8e4e:	228c      	movs	r2, #140	; 0x8c
    8e50:	4916      	ldr	r1, [pc, #88]	; (8eac <nv_is_empty+0x88>)
    8e52:	4b17      	ldr	r3, [pc, #92]	; (8eb0 <nv_is_empty+0x8c>)

	while (pos != size) {
		uint8_t cur_size = min(64, size - pos);
		uint8_t i        = 0;

		flash_read(flash, address + pos, tmp, cur_size);
    8e54:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8eb8 <nv_is_empty+0x94>
    8e58:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8ebc <nv_is_empty+0x98>
	ASSERT((address <= NV_MEMORY_END) && ((address + size) <= (NV_MEMORY_END + 1))
    8e5c:	4798      	blx	r3
	memset(tmp, 0xFF, 64);
    8e5e:	2240      	movs	r2, #64	; 0x40
    8e60:	21ff      	movs	r1, #255	; 0xff
    8e62:	4668      	mov	r0, sp
    8e64:	4b13      	ldr	r3, [pc, #76]	; (8eb4 <nv_is_empty+0x90>)
    8e66:	4798      	blx	r3
	uint16_t pos     = 0;
    8e68:	2600      	movs	r6, #0
	while (pos != size) {
    8e6a:	42ae      	cmp	r6, r5
    8e6c:	d105      	bne.n	8e7a <nv_is_empty+0x56>
		}

		pos += cur_size;
	}

	return true;
    8e6e:	2001      	movs	r0, #1
}
    8e70:	b011      	add	sp, #68	; 0x44
    8e72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ASSERT((address <= NV_MEMORY_END) && ((address + size) <= (NV_MEMORY_END + 1))
    8e76:	2000      	movs	r0, #0
    8e78:	e7e9      	b.n	8e4e <nv_is_empty+0x2a>
		uint8_t cur_size = min(64, size - pos);
    8e7a:	1bab      	subs	r3, r5, r6
    8e7c:	2b40      	cmp	r3, #64	; 0x40
    8e7e:	bfa8      	it	ge
    8e80:	2340      	movge	r3, #64	; 0x40
		flash_read(flash, address + pos, tmp, cur_size);
    8e82:	b2dc      	uxtb	r4, r3
    8e84:	4623      	mov	r3, r4
    8e86:	466a      	mov	r2, sp
    8e88:	19f1      	adds	r1, r6, r7
    8e8a:	f8d8 0000 	ldr.w	r0, [r8]
    8e8e:	47c8      	blx	r9
    8e90:	2300      	movs	r3, #0
			if (tmp[i] != 0xFF) {
    8e92:	f81d 2003 	ldrb.w	r2, [sp, r3]
    8e96:	2aff      	cmp	r2, #255	; 0xff
    8e98:	d105      	bne.n	8ea6 <nv_is_empty+0x82>
    8e9a:	3301      	adds	r3, #1
		for (; i < 64; i++) {
    8e9c:	2b40      	cmp	r3, #64	; 0x40
    8e9e:	d1f8      	bne.n	8e92 <nv_is_empty+0x6e>
		pos += cur_size;
    8ea0:	1933      	adds	r3, r6, r4
    8ea2:	b29e      	uxth	r6, r3
    8ea4:	e7e1      	b.n	8e6a <nv_is_empty+0x46>
				return false;
    8ea6:	2000      	movs	r0, #0
    8ea8:	e7e2      	b.n	8e70 <nv_is_empty+0x4c>
    8eaa:	bf00      	nop
    8eac:	0000ee72 	.word	0x0000ee72
    8eb0:	00001fdd 	.word	0x00001fdd
    8eb4:	0000b345 	.word	0x0000b345
    8eb8:	2000723c 	.word	0x2000723c
    8ebc:	000012d1 	.word	0x000012d1

00008ec0 <nv_align_next_access_address>:
/**
 * \brief Align current point of write to actual based on type of previous write
 *        access
 */
uint16_t nv_align_next_access_address(const uint16_t address, const enum nv_alignment_type type)
{
    8ec0:	b510      	push	{r4, lr}
    8ec2:	4604      	mov	r4, r0
	switch (type) {
    8ec4:	b129      	cbz	r1, 8ed2 <nv_align_next_access_address+0x12>
    8ec6:	2901      	cmp	r1, #1
    8ec8:	d105      	bne.n	8ed6 <nv_align_next_access_address+0x16>
	case SECTOR_HEADER_ALIGNMENT:
		return address;

	case BLOCK_WITH_DATA_ALIGNMENT:
		return (address + 127) & 0xFF80;
    8eca:	347f      	adds	r4, #127	; 0x7f
    8ecc:	f024 047f 	bic.w	r4, r4, #127	; 0x7f
    8ed0:	b2a4      	uxth	r4, r4

	default:
		ASSERT(false);
		return address;
	}
}
    8ed2:	4620      	mov	r0, r4
    8ed4:	bd10      	pop	{r4, pc}
		ASSERT(false);
    8ed6:	22af      	movs	r2, #175	; 0xaf
    8ed8:	4902      	ldr	r1, [pc, #8]	; (8ee4 <nv_align_next_access_address+0x24>)
    8eda:	4b03      	ldr	r3, [pc, #12]	; (8ee8 <nv_align_next_access_address+0x28>)
    8edc:	2000      	movs	r0, #0
    8ede:	4798      	blx	r3
		return address;
    8ee0:	e7f7      	b.n	8ed2 <nv_align_next_access_address+0x12>
    8ee2:	bf00      	nop
    8ee4:	0000ee72 	.word	0x0000ee72
    8ee8:	00001fdd 	.word	0x00001fdd

00008eec <find_item>:
 */
static struct nv_item *find_item(const uint16_t id)
{
	uint16_t i = 0;

	for (; i < mem.items_amount; i++) {
    8eec:	4b0a      	ldr	r3, [pc, #40]	; (8f18 <find_item+0x2c>)
{
    8eee:	b530      	push	{r4, r5, lr}
	for (; i < mem.items_amount; i++) {
    8ef0:	8d5c      	ldrh	r4, [r3, #42]	; 0x2a
    8ef2:	2200      	movs	r2, #0
    8ef4:	b291      	uxth	r1, r2
    8ef6:	428c      	cmp	r4, r1
    8ef8:	d801      	bhi.n	8efe <find_item+0x12>
		if (mem.items[i].id == id) {
			return &mem.items[i];
		}
	}
	return NULL;
    8efa:	2000      	movs	r0, #0
}
    8efc:	bd30      	pop	{r4, r5, pc}
    8efe:	1c51      	adds	r1, r2, #1
		if (mem.items[i].id == id) {
    8f00:	eb03 0581 	add.w	r5, r3, r1, lsl #2
    8f04:	f835 5c02 	ldrh.w	r5, [r5, #-2]
    8f08:	4285      	cmp	r5, r0
    8f0a:	d103      	bne.n	8f14 <find_item+0x28>
			return &mem.items[i];
    8f0c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    8f10:	3002      	adds	r0, #2
    8f12:	bd30      	pop	{r4, r5, pc}
    8f14:	460a      	mov	r2, r1
    8f16:	e7ed      	b.n	8ef4 <find_item+0x8>
    8f18:	20007240 	.word	0x20007240

00008f1c <calculate_block_header_checksum>:
 * \param[in] header The pointer to block header to calculate checksum of
 *
 * \return Checksum of a block header
 */
static uint16_t calculate_block_header_checksum(struct block_header *header)
{
    8f1c:	1c41      	adds	r1, r0, #1
    8f1e:	f100 020b 	add.w	r2, r0, #11
	uint8_t *tmp = (uint8_t *)header + sizeof(header->active);
	uint16_t crc = 0xFFFF;
    8f22:	f64f 70ff 	movw	r0, #65535	; 0xffff
	uint8_t  i   = 0;

	for (; i < sizeof(struct block_header) - sizeof(header->active) - sizeof(header->checksum); i++) {
		uint8_t value;

		value = (uint8_t)((crc >> 8) ^ tmp[i]);
    8f26:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    8f2a:	ea83 2310 	eor.w	r3, r3, r0, lsr #8
		value = value ^ (value >> 4);
    8f2e:	ea83 1313 	eor.w	r3, r3, r3, lsr #4
		crc   = (crc << 8) ^ ((uint16_t)value << 12) ^ ((uint16_t)value << 5) ^ (uint16_t)value;
    8f32:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    8f36:	ea80 3003 	eor.w	r0, r0, r3, lsl #12
    8f3a:	ea80 1043 	eor.w	r0, r0, r3, lsl #5
	for (; i < sizeof(struct block_header) - sizeof(header->active) - sizeof(header->checksum); i++) {
    8f3e:	428a      	cmp	r2, r1
		crc   = (crc << 8) ^ ((uint16_t)value << 12) ^ ((uint16_t)value << 5) ^ (uint16_t)value;
    8f40:	b280      	uxth	r0, r0
	for (; i < sizeof(struct block_header) - sizeof(header->active) - sizeof(header->checksum); i++) {
    8f42:	d1f0      	bne.n	8f26 <calculate_block_header_checksum+0xa>
	}
	return crc;
}
    8f44:	4770      	bx	lr
	...

00008f48 <write_and_verify>:
{
    8f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8f4c:	4604      	mov	r4, r0
	nv_write(sector, offset, data, size);
    8f4e:	f8df 8020 	ldr.w	r8, [pc, #32]	; 8f70 <write_and_verify+0x28>
{
    8f52:	460d      	mov	r5, r1
    8f54:	4616      	mov	r6, r2
    8f56:	461f      	mov	r7, r3
	nv_write(sector, offset, data, size);
    8f58:	47c0      	blx	r8
	if (!nv_is_equal(sector, offset, data, size)) {
    8f5a:	4620      	mov	r0, r4
    8f5c:	4c03      	ldr	r4, [pc, #12]	; (8f6c <write_and_verify+0x24>)
    8f5e:	463b      	mov	r3, r7
    8f60:	4632      	mov	r2, r6
    8f62:	4629      	mov	r1, r5
    8f64:	46a4      	mov	ip, r4
}
    8f66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	if (!nv_is_equal(sector, offset, data, size)) {
    8f6a:	4760      	bx	ip
    8f6c:	00008d91 	.word	0x00008d91
    8f70:	00008c95 	.word	0x00008c95

00008f74 <create_sector>:
{
    8f74:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    8f78:	4688      	mov	r8, r1
    8f7a:	4617      	mov	r7, r2
	uint8_t              active = 0;
    8f7c:	2100      	movs	r1, #0
	if (!nv_is_empty(sector, 0, CONF_SECTOR_SIZE)) {
    8f7e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    8f82:	4c21      	ldr	r4, [pc, #132]	; (9008 <create_sector+0x94>)
	uint8_t              active = 0;
    8f84:	f88d 1003 	strb.w	r1, [sp, #3]
{
    8f88:	4605      	mov	r5, r0
	if (!nv_is_empty(sector, 0, CONF_SECTOR_SIZE)) {
    8f8a:	47a0      	blx	r4
    8f8c:	4606      	mov	r6, r0
    8f8e:	b1d8      	cbz	r0, 8fc8 <create_sector+0x54>
	memcpy(header.signature, SECTOR_SIGNATURE, 7);
    8f90:	4b1e      	ldr	r3, [pc, #120]	; (900c <create_sector+0x98>)
	if (!write_and_verify(sector, 0, (uint8_t *)&header, sizeof(struct sector_header))) {
    8f92:	4e1f      	ldr	r6, [pc, #124]	; (9010 <create_sector+0x9c>)
	memcpy(header.signature, SECTOR_SIGNATURE, 7);
    8f94:	681a      	ldr	r2, [r3, #0]
    8f96:	f8cd 2009 	str.w	r2, [sp, #9]
    8f9a:	889a      	ldrh	r2, [r3, #4]
    8f9c:	799b      	ldrb	r3, [r3, #6]
    8f9e:	f88d 300f 	strb.w	r3, [sp, #15]
	header.active = 0xFF;
    8fa2:	23ff      	movs	r3, #255	; 0xff
	memcpy(header.signature, SECTOR_SIGNATURE, 7);
    8fa4:	f8ad 200d 	strh.w	r2, [sp, #13]
	header.active = 0xFF;
    8fa8:	f88d 3004 	strb.w	r3, [sp, #4]
	if (!write_and_verify(sector, 0, (uint8_t *)&header, sizeof(struct sector_header))) {
    8fac:	aa01      	add	r2, sp, #4
    8fae:	230c      	movs	r3, #12
    8fb0:	2100      	movs	r1, #0
    8fb2:	4628      	mov	r0, r5
	header.number = number;
    8fb4:	f8cd 8005 	str.w	r8, [sp, #5]
	if (!write_and_verify(sector, 0, (uint8_t *)&header, sizeof(struct sector_header))) {
    8fb8:	47b0      	blx	r6
    8fba:	4604      	mov	r4, r0
    8fbc:	b978      	cbnz	r0, 8fde <create_sector+0x6a>
			return false;
    8fbe:	2400      	movs	r4, #0
}
    8fc0:	4620      	mov	r0, r4
    8fc2:	b004      	add	sp, #16
    8fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nv_erase_sector(sector);
    8fc8:	4628      	mov	r0, r5
    8fca:	4b12      	ldr	r3, [pc, #72]	; (9014 <create_sector+0xa0>)
    8fcc:	4798      	blx	r3
		if (!nv_is_empty(sector, 0, CONF_SECTOR_SIZE)) {
    8fce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    8fd2:	4631      	mov	r1, r6
    8fd4:	4628      	mov	r0, r5
    8fd6:	47a0      	blx	r4
    8fd8:	2800      	cmp	r0, #0
    8fda:	d1d9      	bne.n	8f90 <create_sector+0x1c>
    8fdc:	e7ef      	b.n	8fbe <create_sector+0x4a>
	if (activate) {
    8fde:	2f00      	cmp	r7, #0
    8fe0:	d0ee      	beq.n	8fc0 <create_sector+0x4c>
		if (!write_and_verify(sector, 0, &active, sizeof(active))) {
    8fe2:	2301      	movs	r3, #1
    8fe4:	f10d 0203 	add.w	r2, sp, #3
    8fe8:	2100      	movs	r1, #0
    8fea:	4628      	mov	r0, r5
    8fec:	47b0      	blx	r6
    8fee:	4604      	mov	r4, r0
    8ff0:	2800      	cmp	r0, #0
    8ff2:	d0e4      	beq.n	8fbe <create_sector+0x4a>
		mem.pow           = sizeof(struct sector_header);
    8ff4:	4e08      	ldr	r6, [pc, #32]	; (9018 <create_sector+0xa4>)
		mem.pow           = nv_align_next_access_address(mem.pow, SECTOR_HEADER_ALIGNMENT);
    8ff6:	4b09      	ldr	r3, [pc, #36]	; (901c <create_sector+0xa8>)
		mem.pow           = sizeof(struct sector_header);
    8ff8:	200c      	movs	r0, #12
		mem.pow           = nv_align_next_access_address(mem.pow, SECTOR_HEADER_ALIGNMENT);
    8ffa:	2100      	movs	r1, #0
		mem.pow           = sizeof(struct sector_header);
    8ffc:	8030      	strh	r0, [r6, #0]
		mem.pow           = nv_align_next_access_address(mem.pow, SECTOR_HEADER_ALIGNMENT);
    8ffe:	4798      	blx	r3
		mem.active_sector = sector;
    9000:	f886 502c 	strb.w	r5, [r6, #44]	; 0x2c
		mem.pow           = nv_align_next_access_address(mem.pow, SECTOR_HEADER_ALIGNMENT);
    9004:	8030      	strh	r0, [r6, #0]
    9006:	e7db      	b.n	8fc0 <create_sector+0x4c>
    9008:	00008e25 	.word	0x00008e25
    900c:	0000eea2 	.word	0x0000eea2
    9010:	00008f49 	.word	0x00008f49
    9014:	00008d45 	.word	0x00008d45
    9018:	20007240 	.word	0x20007240
    901c:	00008ec1 	.word	0x00008ec1

00009020 <nv_storage_init>:
{
    9020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		nv_read(sector, 0, (uint8_t *)&header, sizeof(struct sector_header));
    9024:	4f4c      	ldr	r7, [pc, #304]	; (9158 <nv_storage_init+0x138>)
		if ((header.active == 0) && (memcmp(header.signature, SECTOR_SIGNATURE, 7) == 0)) {
    9026:	f8df a154 	ldr.w	sl, [pc, #340]	; 917c <nv_storage_init+0x15c>
{
    902a:	2500      	movs	r5, #0
    902c:	b089      	sub	sp, #36	; 0x24
	uint32_t             last_sector_number = 0;
    902e:	462c      	mov	r4, r5
	uint8_t              sector = 0, last_sector = 0xFF;
    9030:	26ff      	movs	r6, #255	; 0xff
    9032:	46b9      	mov	r9, r7
    9034:	fa5f f885 	uxtb.w	r8, r5
		nv_read(sector, 0, (uint8_t *)&header, sizeof(struct sector_header));
    9038:	230c      	movs	r3, #12
    903a:	aa01      	add	r2, sp, #4
    903c:	2100      	movs	r1, #0
    903e:	4640      	mov	r0, r8
    9040:	47b8      	blx	r7
		if ((header.active == 0) && (memcmp(header.signature, SECTOR_SIGNATURE, 7) == 0)) {
    9042:	f89d 3004 	ldrb.w	r3, [sp, #4]
    9046:	b963      	cbnz	r3, 9062 <nv_storage_init+0x42>
    9048:	2207      	movs	r2, #7
    904a:	4651      	mov	r1, sl
    904c:	f10d 0009 	add.w	r0, sp, #9
    9050:	4b42      	ldr	r3, [pc, #264]	; (915c <nv_storage_init+0x13c>)
    9052:	4798      	blx	r3
    9054:	b928      	cbnz	r0, 9062 <nv_storage_init+0x42>
			if (header.number >= last_sector_number) {
    9056:	f8dd 3005 	ldr.w	r3, [sp, #5]
    905a:	42a3      	cmp	r3, r4
    905c:	bf24      	itt	cs
    905e:	461c      	movcs	r4, r3
    9060:	4646      	movcs	r6, r8
    9062:	3501      	adds	r5, #1
	for (; sector < SECTOR_AMOUNT; sector++) {
    9064:	2d02      	cmp	r5, #2
    9066:	d1e5      	bne.n	9034 <nv_storage_init+0x14>
	if (last_sector == 0xFF) {
    9068:	2eff      	cmp	r6, #255	; 0xff
    906a:	d112      	bne.n	9092 <nv_storage_init+0x72>
			if (create_sector(sector, last_sector_number + 1, true)) {
    906c:	3401      	adds	r4, #1
    906e:	2201      	movs	r2, #1
    9070:	4621      	mov	r1, r4
    9072:	2000      	movs	r0, #0
    9074:	4d3a      	ldr	r5, [pc, #232]	; (9160 <nv_storage_init+0x140>)
    9076:	47a8      	blx	r5
    9078:	b940      	cbnz	r0, 908c <nv_storage_init+0x6c>
    907a:	2201      	movs	r2, #1
    907c:	4621      	mov	r1, r4
    907e:	4610      	mov	r0, r2
    9080:	47a8      	blx	r5
    9082:	b918      	cbnz	r0, 908c <nv_storage_init+0x6c>
			ASSERT(false);
    9084:	2297      	movs	r2, #151	; 0x97
    9086:	4937      	ldr	r1, [pc, #220]	; (9164 <nv_storage_init+0x144>)
    9088:	4b37      	ldr	r3, [pc, #220]	; (9168 <nv_storage_init+0x148>)
    908a:	4798      	blx	r3
}
    908c:	b009      	add	sp, #36	; 0x24
    908e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	mem.active_sector = last_sector;
    9092:	4c36      	ldr	r4, [pc, #216]	; (916c <nv_storage_init+0x14c>)
	mem.pow = nv_align_next_access_address(sizeof(struct sector_header), SECTOR_HEADER_ALIGNMENT);
    9094:	4d36      	ldr	r5, [pc, #216]	; (9170 <nv_storage_init+0x150>)
	mem.active_sector = last_sector;
    9096:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
	mem.pow = nv_align_next_access_address(sizeof(struct sector_header), SECTOR_HEADER_ALIGNMENT);
    909a:	2100      	movs	r1, #0
    909c:	200c      	movs	r0, #12
    909e:	47a8      	blx	r5
			address = CONF_STORAGE_MEMORY_START + number * CONF_SECTOR_SIZE + mem.pow;
    90a0:	f106 0710 	add.w	r7, r6, #16
    90a4:	033f      	lsls	r7, r7, #12
	mem.pow = nv_align_next_access_address(sizeof(struct sector_header), SECTOR_HEADER_ALIGNMENT);
    90a6:	8020      	strh	r0, [r4, #0]
			if (address >= NV_SECTOR_END(number)) {
    90a8:	f607 7aff 	addw	sl, r7, #4095	; 0xfff
		nv_read(number, mem.pow, (uint8_t *)&header, sizeof(struct block_header));
    90ac:	f10d 0810 	add.w	r8, sp, #16
    90b0:	230e      	movs	r3, #14
    90b2:	4642      	mov	r2, r8
    90b4:	8821      	ldrh	r1, [r4, #0]
    90b6:	4630      	mov	r0, r6
    90b8:	47c8      	blx	r9
    90ba:	2300      	movs	r3, #0
			if (((uint8_t *)&header)[i] != 0xFF) {
    90bc:	f818 2003 	ldrb.w	r2, [r8, r3]
    90c0:	2aff      	cmp	r2, #255	; 0xff
    90c2:	d134      	bne.n	912e <nv_storage_init+0x10e>
    90c4:	3301      	adds	r3, #1
		for (i = 0; i < sizeof(struct block_header); i++) {
    90c6:	2b0e      	cmp	r3, #14
    90c8:	d1f8      	bne.n	90bc <nv_storage_init+0x9c>
    90ca:	e7df      	b.n	908c <nv_storage_init+0x6c>
			mem.pow = nv_align_next_access_address(mem.pow + sizeof(struct block_header), BLOCK_WITH_DATA_ALIGNMENT);
    90cc:	8820      	ldrh	r0, [r4, #0]
    90ce:	300e      	adds	r0, #14
    90d0:	2101      	movs	r1, #1
    90d2:	b280      	uxth	r0, r0
			mem.pow = nv_align_next_access_address(mem.pow, BLOCK_WITH_DATA_ALIGNMENT);
    90d4:	47a8      	blx	r5
    90d6:	8020      	strh	r0, [r4, #0]
    90d8:	e7ea      	b.n	90b0 <nv_storage_init+0x90>
			struct nv_item *item = find_item(header.id);
    90da:	f8bd b012 	ldrh.w	fp, [sp, #18]
    90de:	4b25      	ldr	r3, [pc, #148]	; (9174 <nv_storage_init+0x154>)
    90e0:	4658      	mov	r0, fp
    90e2:	4798      	blx	r3
			if (!item) {
    90e4:	b940      	cbnz	r0, 90f8 <nv_storage_init+0xd8>
				item     = &mem.items[mem.items_amount++];
    90e6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    90e8:	1c59      	adds	r1, r3, #1
    90ea:	009b      	lsls	r3, r3, #2
    90ec:	1c98      	adds	r0, r3, #2
				item->id = header.id;
    90ee:	4423      	add	r3, r4
				item     = &mem.items[mem.items_amount++];
    90f0:	8561      	strh	r1, [r4, #42]	; 0x2a
    90f2:	4420      	add	r0, r4
				item->id = header.id;
    90f4:	f8a3 b002 	strh.w	fp, [r3, #2]
			if (header.item_size == 0) {
    90f8:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    90fc:	b943      	cbnz	r3, 9110 <nv_storage_init+0xf0>
				*item = mem.items[--mem.items_amount];
    90fe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    9100:	3b01      	subs	r3, #1
    9102:	b29b      	uxth	r3, r3
    9104:	8563      	strh	r3, [r4, #42]	; 0x2a
    9106:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    910a:	f8d3 3002 	ldr.w	r3, [r3, #2]
    910e:	6003      	str	r3, [r0, #0]
			item->last_block = mem.pow;
    9110:	8823      	ldrh	r3, [r4, #0]
    9112:	8043      	strh	r3, [r0, #2]
			mem.pow += sizeof(struct block_header) + header.block_size;
    9114:	f8bd 0016 	ldrh.w	r0, [sp, #22]
    9118:	4418      	add	r0, r3
    911a:	300e      	adds	r0, #14
    911c:	b280      	uxth	r0, r0
			mem.pow = nv_align_next_access_address(mem.pow, BLOCK_WITH_DATA_ALIGNMENT);
    911e:	2101      	movs	r1, #1
			mem.pow += sizeof(struct block_header) + header.block_size;
    9120:	8020      	strh	r0, [r4, #0]
			mem.pow = nv_align_next_access_address(mem.pow, BLOCK_WITH_DATA_ALIGNMENT);
    9122:	47a8      	blx	r5
    9124:	8020      	strh	r0, [r4, #0]
			address = CONF_STORAGE_MEMORY_START + number * CONF_SECTOR_SIZE + mem.pow;
    9126:	4438      	add	r0, r7
			if (address >= NV_SECTOR_END(number)) {
    9128:	4550      	cmp	r0, sl
    912a:	d3c1      	bcc.n	90b0 <nv_storage_init+0x90>
    912c:	e7ae      	b.n	908c <nv_storage_init+0x6c>
		} else if (header.checksum != calculate_block_header_checksum(&header)) {
    912e:	4640      	mov	r0, r8
    9130:	4b11      	ldr	r3, [pc, #68]	; (9178 <nv_storage_init+0x158>)
    9132:	f8bd b01c 	ldrh.w	fp, [sp, #28]
    9136:	4798      	blx	r3
    9138:	4583      	cmp	fp, r0
    913a:	d1c7      	bne.n	90cc <nv_storage_init+0xac>
		} else if (header.active) {
    913c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    9140:	2b00      	cmp	r3, #0
    9142:	d0ca      	beq.n	90da <nv_storage_init+0xba>
			mem.pow += sizeof(struct block_header) + header.block_size;
    9144:	8820      	ldrh	r0, [r4, #0]
    9146:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    914a:	4418      	add	r0, r3
    914c:	300e      	adds	r0, #14
    914e:	b280      	uxth	r0, r0
    9150:	8020      	strh	r0, [r4, #0]
			mem.pow = nv_align_next_access_address(mem.pow, BLOCK_WITH_DATA_ALIGNMENT);
    9152:	2101      	movs	r1, #1
    9154:	e7be      	b.n	90d4 <nv_storage_init+0xb4>
    9156:	bf00      	nop
    9158:	00008ced 	.word	0x00008ced
    915c:	0000b2dd 	.word	0x0000b2dd
    9160:	00008f75 	.word	0x00008f75
    9164:	0000eeaa 	.word	0x0000eeaa
    9168:	00001fdd 	.word	0x00001fdd
    916c:	20007240 	.word	0x20007240
    9170:	00008ec1 	.word	0x00008ec1
    9174:	00008eed 	.word	0x00008eed
    9178:	00008f1d 	.word	0x00008f1d
    917c:	0000eea2 	.word	0x0000eea2

00009180 <persistent_storage_init>:

/**
 * \brief Initialize Persistent Storage
 */
void persistent_storage_init(void)
{
    9180:	b510      	push	{r4, lr}
	nv_init(&FLASH_0);
    9182:	4b03      	ldr	r3, [pc, #12]	; (9190 <persistent_storage_init+0x10>)
    9184:	4803      	ldr	r0, [pc, #12]	; (9194 <persistent_storage_init+0x14>)
    9186:	4798      	blx	r3
	nv_storage_init();
    9188:	4b03      	ldr	r3, [pc, #12]	; (9198 <persistent_storage_init+0x18>)
}
    918a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	nv_storage_init();
    918e:	4718      	bx	r3
    9190:	00008c35 	.word	0x00008c35
    9194:	20007408 	.word	0x20007408
    9198:	00009021 	.word	0x00009021

0000919c <ring_init>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: Called by the main code application to setup and initialize the BPDU ring topology management
// Returns:     Nothing (NULL)
// *****************************************************************************************************************************************************************
void ring_init(unsigned char basestation, unsigned char *mac_raw)
{
    919c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int				loop;
	
	/* set flags to indicate first time boot-up */
	first = 1;
    91a0:	4c91      	ldr	r4, [pc, #580]	; (93e8 <ring_init+0x24c>)
    91a2:	f8df 8274 	ldr.w	r8, [pc, #628]	; 9418 <ring_init+0x27c>
    91a6:	4d91      	ldr	r5, [pc, #580]	; (93ec <ring_init+0x250>)
    91a8:	f8df b270 	ldr.w	fp, [pc, #624]	; 941c <ring_init+0x280>
    91ac:	4e90      	ldr	r6, [pc, #576]	; (93f0 <ring_init+0x254>)
    91ae:	f04f 0a01 	mov.w	sl, #1
{
    91b2:	4689      	mov	r9, r1
	first = 1;
    91b4:	f884 a000 	strb.w	sl, [r4]
	storm_holdoff = 0;

	/* "basestation" parameter determines if this MultiSense unit is a base-station or simple pass-through... */
	if (basestation) {
    91b8:	4607      	mov	r7, r0
    91ba:	2800      	cmp	r0, #0
    91bc:	f000 80b2 	beq.w	9324 <ring_init+0x188>
		xprintf("ETHERNET: Set as a base-station to manage Ethernet topology...\r\n");
    91c0:	488c      	ldr	r0, [pc, #560]	; (93f4 <ring_init+0x258>)
    91c2:	47c0      	blx	r8
		
		/* Enable BPDU tags */
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA8, 0x00);
    91c4:	2100      	movs	r1, #0
    91c6:	2070      	movs	r0, #112	; 0x70
    91c8:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA7, 0x00);
    91ca:	2100      	movs	r1, #0
    91cc:	2071      	movs	r0, #113	; 0x71
    91ce:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA6, 0x71);
    91d0:	2171      	movs	r1, #113	; 0x71
    91d2:	2072      	movs	r0, #114	; 0x72
    91d4:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA5, 0x01);
    91d6:	4651      	mov	r1, sl
    91d8:	2073      	movs	r0, #115	; 0x73
    91da:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA4, 0x80);
    91dc:	2180      	movs	r1, #128	; 0x80
    91de:	2074      	movs	r0, #116	; 0x74
    91e0:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA3, 0xC2);
    91e2:	21c2      	movs	r1, #194	; 0xc2
    91e4:	2075      	movs	r0, #117	; 0x75
    91e6:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA2, 0x00);
    91e8:	2100      	movs	r1, #0
    91ea:	2076      	movs	r0, #118	; 0x76
    91ec:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA1, 0x00);
    91ee:	2100      	movs	r1, #0
    91f0:	2077      	movs	r0, #119	; 0x77
    91f2:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA0, 0x00);
    91f4:	2100      	movs	r1, #0
    91f6:	2078      	movs	r0, #120	; 0x78
    91f8:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_CONTROL0, 0x00);
    91fa:	2100      	movs	r1, #0
    91fc:	206e      	movs	r0, #110	; 0x6e
    91fe:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_CONTROL1, 0x00);
    9200:	2100      	movs	r1, #0
    9202:	206f      	movs	r0, #111	; 0x6f
    9204:	47a8      	blx	r5
		delay_us(250);
    9206:	20fa      	movs	r0, #250	; 0xfa
    9208:	47d8      	blx	fp
		
		/* Read back the static MAC table and check that the BPDU enabling is in operation? */
		writeKSZreg(SPI_KSZ8794_ACCESS_CONTROL0, 0x10);
    920a:	2110      	movs	r1, #16
    920c:	206e      	movs	r0, #110	; 0x6e
    920e:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_CONTROL1, 0x00);
    9210:	2100      	movs	r1, #0
    9212:	206f      	movs	r0, #111	; 0x6f
    9214:	47a8      	blx	r5
		delay_us(50);
    9216:	2032      	movs	r0, #50	; 0x32
    9218:	47d8      	blx	fp

		/* Check the individual registers from the SPI bus */
		if ((!checkKSZreg(SPI_KSZ8794_ACCESS_DATA8, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA7, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA6, 0x71)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA5, 0x01)) ||
    921a:	2100      	movs	r1, #0
    921c:	2070      	movs	r0, #112	; 0x70
    921e:	47b0      	blx	r6
    9220:	2800      	cmp	r0, #0
    9222:	d156      	bne.n	92d2 <ring_init+0x136>
	        (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA4, 0x80)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA3, 0xC2)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA2, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA1, 0x00)) ||
		    (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA0, 0x00))) { xprintf("ERROR setting the STATIC MAC table with BPDU for Base-station...\r\n"); }
    9224:	4874      	ldr	r0, [pc, #464]	; (93f8 <ring_init+0x25c>)
    9226:	47c0      	blx	r8
				
		/* Set the local context "mode" to indicate this is in fact a base-station */		
		mode = 1;
    9228:	2301      	movs	r3, #1
		/* Set the local context "mode" to indicate this is in fact a pass-though un-configured node */		
		mode = 0;
	}
	
	/* Bridge DST MAC */
	wbuf[0] = 0x01;
    922a:	2201      	movs	r2, #1
    922c:	70a2      	strb	r2, [r4, #2]
	wbuf[3] = 0x00;
	wbuf[4] = 0x00;
	wbuf[5] = 0x00;

	/* Bridge SRC MAC */
	wbuf[6] = 0x01;
    922e:	7222      	strb	r2, [r4, #8]
	wbuf[7] = 0x80;
	wbuf[8] = 0xC2;
	wbuf[9] = 0x00;
	wbuf[10] = 0x00;
	wbuf[11] = 0x01;
    9230:	7362      	strb	r2, [r4, #13]
	wbuf[14] = 0x00;
	wbuf[15] = 0x07;
	wbuf[16] = 0x00;
	wbuf[17] = 0x00;
	wbuf[18] = 0x00;
	wbuf[19] = 0x01;
    9232:	7562      	strb	r2, [r4, #21]
	wbuf[2] = 0xC2;
    9234:	21c2      	movs	r1, #194	; 0xc2

	/* BPDU Length/Type */
	wbuf[20] = 0x00;
	wbuf[21] = 0x27;
    9236:	2227      	movs	r2, #39	; 0x27
	wbuf[2] = 0xC2;
    9238:	7121      	strb	r1, [r4, #4]
	wbuf[8] = 0xC2;
    923a:	72a1      	strb	r1, [r4, #10]
	wbuf[21] = 0x27;
    923c:	75e2      	strb	r2, [r4, #23]
	*((unsigned short int *)&wbuf[12]) = 0x01E0;
    923e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
	wbuf[22] = 0x42;
    9242:	2242      	movs	r2, #66	; 0x42
	*((unsigned short int *)&wbuf[12]) = 0x01E0;
    9244:	81e1      	strh	r1, [r4, #14]
	wbuf[22] = 0x42;
    9246:	7622      	strb	r2, [r4, #24]
	wbuf[23] = 0x42;
    9248:	7662      	strb	r2, [r4, #25]
		mode = 0;
    924a:	7063      	strb	r3, [r4, #1]
	wbuf[1] = 0x80;
    924c:	2080      	movs	r0, #128	; 0x80
	wbuf[3] = 0x00;
    924e:	2300      	movs	r3, #0
    wbuf[24] = 0x03;
    9250:	2203      	movs	r2, #3
	wbuf[15] = 0x07;
    9252:	2107      	movs	r1, #7
	wbuf[1] = 0x80;
    9254:	70e0      	strb	r0, [r4, #3]
	wbuf[3] = 0x00;
    9256:	7163      	strb	r3, [r4, #5]
	wbuf[4] = 0x00;
    9258:	71a3      	strb	r3, [r4, #6]
	wbuf[5] = 0x00;
    925a:	71e3      	strb	r3, [r4, #7]
	wbuf[7] = 0x80;
    925c:	7260      	strb	r0, [r4, #9]
	wbuf[9] = 0x00;
    925e:	72e3      	strb	r3, [r4, #11]
	wbuf[10] = 0x00;
    9260:	7323      	strb	r3, [r4, #12]
	wbuf[14] = 0x00;
    9262:	7423      	strb	r3, [r4, #16]
	wbuf[15] = 0x07;
    9264:	7461      	strb	r1, [r4, #17]
	wbuf[16] = 0x00;
    9266:	74a3      	strb	r3, [r4, #18]
	wbuf[17] = 0x00;
    9268:	74e3      	strb	r3, [r4, #19]
	wbuf[18] = 0x00;
    926a:	7523      	strb	r3, [r4, #20]
	wbuf[20] = 0x00;
    926c:	75a3      	strb	r3, [r4, #22]
    wbuf[24] = 0x03;
    926e:	76a2      	strb	r2, [r4, #26]

	/* BPDU Header */
	wbuf[25] = 0x00;
    9270:	76e3      	strb	r3, [r4, #27]
	wbuf[26] = 0x00;
    9272:	7723      	strb	r3, [r4, #28]
	wbuf[27] = 0x00;
    9274:	7763      	strb	r3, [r4, #29]
	wbuf[28] = 0x00;
    9276:	77a3      	strb	r3, [r4, #30]

	/* BPDU data payload */
	wbuf[29] = mac_raw[0];
    9278:	f899 2000 	ldrb.w	r2, [r9]
    927c:	77e2      	strb	r2, [r4, #31]
	wbuf[30] = mac_raw[1];
    927e:	f899 2001 	ldrb.w	r2, [r9, #1]
    9282:	f884 2020 	strb.w	r2, [r4, #32]
	wbuf[31] = mac_raw[2];
    9286:	f899 2002 	ldrb.w	r2, [r9, #2]
    928a:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
	wbuf[32] = mac_raw[3];
    928e:	f899 2003 	ldrb.w	r2, [r9, #3]
    9292:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
	wbuf[33] = mac_raw[4];
    9296:	f899 2004 	ldrb.w	r2, [r9, #4]
    929a:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
	wbuf[34] = mac_raw[5];
    929e:	f899 2005 	ldrb.w	r2, [r9, #5]
    92a2:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24

	/* BPDU Padding ZEROs */
	for (loop = 35; loop < 68; loop++) {
		wbuf[loop] = 0x00;
    92a6:	4a55      	ldr	r2, [pc, #340]	; (93fc <ring_init+0x260>)
	for (loop = 35; loop < 68; loop++) {
    92a8:	2423      	movs	r4, #35	; 0x23
		wbuf[loop] = 0x00;
    92aa:	54a3      	strb	r3, [r4, r2]
	for (loop = 35; loop < 68; loop++) {
    92ac:	3401      	adds	r4, #1
    92ae:	2c44      	cmp	r4, #68	; 0x44
    92b0:	d1fb      	bne.n	92aa <ring_init+0x10e>
	}
	
	xprintf("ETHERNET: Completed RING management init...\r\n");
    92b2:	4853      	ldr	r0, [pc, #332]	; (9400 <ring_init+0x264>)
    92b4:	47c0      	blx	r8
	
	/* If we are a base-station, then send out the first BPDU frame now upon start-up */
	if (basestation) {																						/* When [BS] switched selected, we are a base-station */
    92b6:	2f00      	cmp	r7, #0
    92b8:	f000 8092 	beq.w	93e0 <ring_init+0x244>
		mac_async_write(&ETHERNET_MAC_0, (uint8_t *)&wbuf[0], 68);
    92bc:	4622      	mov	r2, r4
    92be:	494f      	ldr	r1, [pc, #316]	; (93fc <ring_init+0x260>)
    92c0:	4b50      	ldr	r3, [pc, #320]	; (9404 <ring_init+0x268>)
    92c2:	4851      	ldr	r0, [pc, #324]	; (9408 <ring_init+0x26c>)
    92c4:	4798      	blx	r3
		xprintf("ETHERNET: Sent first BPDU...\r\n");
    92c6:	4851      	ldr	r0, [pc, #324]	; (940c <ring_init+0x270>)
    92c8:	4643      	mov	r3, r8
	}
}
    92ca:	b001      	add	sp, #4
    92cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		xprintf("ETHERNET: Sent first BPDU...\r\n");
    92d0:	4718      	bx	r3
		if ((!checkKSZreg(SPI_KSZ8794_ACCESS_DATA8, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA7, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA6, 0x71)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA5, 0x01)) ||
    92d2:	2100      	movs	r1, #0
    92d4:	2071      	movs	r0, #113	; 0x71
    92d6:	47b0      	blx	r6
    92d8:	2800      	cmp	r0, #0
    92da:	d0a3      	beq.n	9224 <ring_init+0x88>
    92dc:	2171      	movs	r1, #113	; 0x71
    92de:	2072      	movs	r0, #114	; 0x72
    92e0:	47b0      	blx	r6
    92e2:	2800      	cmp	r0, #0
    92e4:	d09e      	beq.n	9224 <ring_init+0x88>
    92e6:	4651      	mov	r1, sl
    92e8:	2073      	movs	r0, #115	; 0x73
    92ea:	47b0      	blx	r6
    92ec:	2800      	cmp	r0, #0
    92ee:	d099      	beq.n	9224 <ring_init+0x88>
	        (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA4, 0x80)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA3, 0xC2)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA2, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA1, 0x00)) ||
    92f0:	2180      	movs	r1, #128	; 0x80
    92f2:	2074      	movs	r0, #116	; 0x74
    92f4:	47b0      	blx	r6
		if ((!checkKSZreg(SPI_KSZ8794_ACCESS_DATA8, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA7, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA6, 0x71)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA5, 0x01)) ||
    92f6:	2800      	cmp	r0, #0
    92f8:	d094      	beq.n	9224 <ring_init+0x88>
	        (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA4, 0x80)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA3, 0xC2)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA2, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA1, 0x00)) ||
    92fa:	21c2      	movs	r1, #194	; 0xc2
    92fc:	2075      	movs	r0, #117	; 0x75
    92fe:	47b0      	blx	r6
    9300:	2800      	cmp	r0, #0
    9302:	d08f      	beq.n	9224 <ring_init+0x88>
    9304:	2100      	movs	r1, #0
    9306:	2076      	movs	r0, #118	; 0x76
    9308:	47b0      	blx	r6
    930a:	2800      	cmp	r0, #0
    930c:	d08a      	beq.n	9224 <ring_init+0x88>
    930e:	2100      	movs	r1, #0
    9310:	2077      	movs	r0, #119	; 0x77
    9312:	47b0      	blx	r6
    9314:	2800      	cmp	r0, #0
    9316:	d085      	beq.n	9224 <ring_init+0x88>
		    (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA0, 0x00))) { xprintf("ERROR setting the STATIC MAC table with BPDU for Base-station...\r\n"); }
    9318:	2100      	movs	r1, #0
    931a:	2078      	movs	r0, #120	; 0x78
    931c:	47b0      	blx	r6
	        (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA4, 0x80)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA3, 0xC2)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA2, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA1, 0x00)) ||
    931e:	2800      	cmp	r0, #0
    9320:	d080      	beq.n	9224 <ring_init+0x88>
    9322:	e781      	b.n	9228 <ring_init+0x8c>
		xprintf("ETHERNET: normal none-managed pass-through node...\r\n");
    9324:	483a      	ldr	r0, [pc, #232]	; (9410 <ring_init+0x274>)
    9326:	47c0      	blx	r8
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA8, 0x00);
    9328:	4639      	mov	r1, r7
    932a:	2070      	movs	r0, #112	; 0x70
    932c:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA7, 0x00);
    932e:	4639      	mov	r1, r7
    9330:	2071      	movs	r0, #113	; 0x71
    9332:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA6, 0x61);
    9334:	2161      	movs	r1, #97	; 0x61
    9336:	2072      	movs	r0, #114	; 0x72
    9338:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA5, 0x01);
    933a:	4651      	mov	r1, sl
    933c:	2073      	movs	r0, #115	; 0x73
    933e:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA4, 0x80);
    9340:	2180      	movs	r1, #128	; 0x80
    9342:	2074      	movs	r0, #116	; 0x74
    9344:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA3, 0xC2);
    9346:	21c2      	movs	r1, #194	; 0xc2
    9348:	2075      	movs	r0, #117	; 0x75
    934a:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA2, 0x00);
    934c:	4639      	mov	r1, r7
    934e:	2076      	movs	r0, #118	; 0x76
    9350:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA1, 0x00);
    9352:	4639      	mov	r1, r7
    9354:	2077      	movs	r0, #119	; 0x77
    9356:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA0, 0x00);
    9358:	4639      	mov	r1, r7
    935a:	2078      	movs	r0, #120	; 0x78
    935c:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_CONTROL0, 0x00);
    935e:	4639      	mov	r1, r7
    9360:	206e      	movs	r0, #110	; 0x6e
    9362:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_CONTROL1, 0x00);
    9364:	4639      	mov	r1, r7
    9366:	206f      	movs	r0, #111	; 0x6f
    9368:	47a8      	blx	r5
		delay_us(250);
    936a:	20fa      	movs	r0, #250	; 0xfa
    936c:	47d8      	blx	fp
		writeKSZreg(SPI_KSZ8794_ACCESS_CONTROL0, 0x10);
    936e:	2110      	movs	r1, #16
    9370:	206e      	movs	r0, #110	; 0x6e
    9372:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_CONTROL1, 0x00);
    9374:	4639      	mov	r1, r7
    9376:	206f      	movs	r0, #111	; 0x6f
    9378:	47a8      	blx	r5
		delay_us(50);
    937a:	2032      	movs	r0, #50	; 0x32
    937c:	47d8      	blx	fp
		if ((!checkKSZreg(SPI_KSZ8794_ACCESS_DATA8, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA7, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA6, 0x61)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA5, 0x01)) ||
    937e:	4639      	mov	r1, r7
    9380:	2070      	movs	r0, #112	; 0x70
    9382:	47b0      	blx	r6
    9384:	b918      	cbnz	r0, 938e <ring_init+0x1f2>
			(!checkKSZreg(SPI_KSZ8794_ACCESS_DATA0, 0x00))) { xprintf("ERROR setting the STATIC MAC table with BPDU for pass-through node...\r\n"); }
    9386:	4823      	ldr	r0, [pc, #140]	; (9414 <ring_init+0x278>)
    9388:	47c0      	blx	r8
		mode = 0;
    938a:	2300      	movs	r3, #0
    938c:	e74d      	b.n	922a <ring_init+0x8e>
		if ((!checkKSZreg(SPI_KSZ8794_ACCESS_DATA8, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA7, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA6, 0x61)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA5, 0x01)) ||
    938e:	4639      	mov	r1, r7
    9390:	2071      	movs	r0, #113	; 0x71
    9392:	47b0      	blx	r6
    9394:	2800      	cmp	r0, #0
    9396:	d0f6      	beq.n	9386 <ring_init+0x1ea>
    9398:	2161      	movs	r1, #97	; 0x61
    939a:	2072      	movs	r0, #114	; 0x72
    939c:	47b0      	blx	r6
    939e:	2800      	cmp	r0, #0
    93a0:	d0f1      	beq.n	9386 <ring_init+0x1ea>
    93a2:	4651      	mov	r1, sl
    93a4:	2073      	movs	r0, #115	; 0x73
    93a6:	47b0      	blx	r6
    93a8:	2800      	cmp	r0, #0
    93aa:	d0ec      	beq.n	9386 <ring_init+0x1ea>
			(!checkKSZreg(SPI_KSZ8794_ACCESS_DATA4, 0x80)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA3, 0xC2)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA2, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA1, 0x00)) ||
    93ac:	2180      	movs	r1, #128	; 0x80
    93ae:	2074      	movs	r0, #116	; 0x74
    93b0:	47b0      	blx	r6
		if ((!checkKSZreg(SPI_KSZ8794_ACCESS_DATA8, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA7, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA6, 0x61)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA5, 0x01)) ||
    93b2:	2800      	cmp	r0, #0
    93b4:	d0e7      	beq.n	9386 <ring_init+0x1ea>
			(!checkKSZreg(SPI_KSZ8794_ACCESS_DATA4, 0x80)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA3, 0xC2)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA2, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA1, 0x00)) ||
    93b6:	21c2      	movs	r1, #194	; 0xc2
    93b8:	2075      	movs	r0, #117	; 0x75
    93ba:	47b0      	blx	r6
    93bc:	2800      	cmp	r0, #0
    93be:	d0e2      	beq.n	9386 <ring_init+0x1ea>
    93c0:	4639      	mov	r1, r7
    93c2:	2076      	movs	r0, #118	; 0x76
    93c4:	47b0      	blx	r6
    93c6:	2800      	cmp	r0, #0
    93c8:	d0dd      	beq.n	9386 <ring_init+0x1ea>
    93ca:	4639      	mov	r1, r7
    93cc:	2077      	movs	r0, #119	; 0x77
    93ce:	47b0      	blx	r6
    93d0:	2800      	cmp	r0, #0
    93d2:	d0d8      	beq.n	9386 <ring_init+0x1ea>
			(!checkKSZreg(SPI_KSZ8794_ACCESS_DATA0, 0x00))) { xprintf("ERROR setting the STATIC MAC table with BPDU for pass-through node...\r\n"); }
    93d4:	4639      	mov	r1, r7
    93d6:	2078      	movs	r0, #120	; 0x78
    93d8:	47b0      	blx	r6
			(!checkKSZreg(SPI_KSZ8794_ACCESS_DATA4, 0x80)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA3, 0xC2)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA2, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA1, 0x00)) ||
    93da:	2800      	cmp	r0, #0
    93dc:	d0d3      	beq.n	9386 <ring_init+0x1ea>
    93de:	e7d4      	b.n	938a <ring_init+0x1ee>
}
    93e0:	b001      	add	sp, #4
    93e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    93e6:	bf00      	nop
    93e8:	2000726e 	.word	0x2000726e
    93ec:	0000b245 	.word	0x0000b245
    93f0:	0000b1d5 	.word	0x0000b1d5
    93f4:	0000eecd 	.word	0x0000eecd
    93f8:	0000ef0e 	.word	0x0000ef0e
    93fc:	20007270 	.word	0x20007270
    9400:	0000efce 	.word	0x0000efce
    9404:	000015a5 	.word	0x000015a5
    9408:	20007528 	.word	0x20007528
    940c:	0000effc 	.word	0x0000effc
    9410:	0000ef51 	.word	0x0000ef51
    9414:	0000ef86 	.word	0x0000ef86
    9418:	00000395 	.word	0x00000395
    941c:	00001201 	.word	0x00001201

00009420 <ring_check>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: Called by the main loop execution and checks every time to see if if storms and BPDUs arrive. This manages the storm until it subsides
// Returns:     Nothing (NULL)
// *****************************************************************************************************************************************************************
unsigned char ring_check(unsigned char bpdu_arrived, unsigned char *storm_state, unsigned char *ringbreak)
{
    9420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9424:	4616      	mov	r6, r2
	unsigned char	sendrelearn;

	/* Bound-checks and assertions */
	if (!storm_state) {
    9426:	460f      	mov	r7, r1
    9428:	b931      	cbnz	r1, 9438 <ring_check+0x18>
		xprintf("ETHERNET: (!storm_state) ERROR\r\n");
    942a:	4836      	ldr	r0, [pc, #216]	; (9504 <ring_check+0xe4>)
    942c:	4b36      	ldr	r3, [pc, #216]	; (9508 <ring_check+0xe8>)
    942e:	4798      	blx	r3
		return 0;
    9430:	463c      	mov	r4, r7
	}

	first = 0;
	
	return sendrelearn;
    9432:	4620      	mov	r0, r4
    9434:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!ringbreak) {
    9438:	b922      	cbnz	r2, 9444 <ring_check+0x24>
		xprintf("ETHERNET: (!ringbreak) ERROR\r\n");
    943a:	4834      	ldr	r0, [pc, #208]	; (950c <ring_check+0xec>)
    943c:	4b32      	ldr	r3, [pc, #200]	; (9508 <ring_check+0xe8>)
    943e:	4798      	blx	r3
		return 0;
    9440:	4634      	mov	r4, r6
    9442:	e7f6      	b.n	9432 <ring_check+0x12>
	if (mode) {
    9444:	4d32      	ldr	r5, [pc, #200]	; (9510 <ring_check+0xf0>)
    9446:	786c      	ldrb	r4, [r5, #1]
    9448:	b1ec      	cbz	r4, 9486 <ring_check+0x66>
    944a:	782c      	ldrb	r4, [r5, #0]
		if (!bpdu_arrived) {
    944c:	2800      	cmp	r0, #0
    944e:	d135      	bne.n	94bc <ring_check+0x9c>
			if ((first) || (!(*ringbreak))) {
    9450:	b90c      	cbnz	r4, 9456 <ring_check+0x36>
    9452:	7813      	ldrb	r3, [r2, #0]
    9454:	b9bb      	cbnz	r3, 9486 <ring_check+0x66>
				writeKSZreg(SPI_KSZ8794_PORT1CONTROL2, 0x07);
    9456:	4c2f      	ldr	r4, [pc, #188]	; (9514 <ring_check+0xf4>)
    9458:	2107      	movs	r1, #7
    945a:	2012      	movs	r0, #18
    945c:	47a0      	blx	r4
				writeKSZreg(SPI_KSZ8794_PORT2CONTROL2, 0x07);
    945e:	2107      	movs	r1, #7
    9460:	2022      	movs	r0, #34	; 0x22
    9462:	47a0      	blx	r4
				writeKSZreg(SPI_KSZ8794_GLOBAL0, 0x2D);
    9464:	212d      	movs	r1, #45	; 0x2d
    9466:	2002      	movs	r0, #2
    9468:	47a0      	blx	r4
				delay_us(250);
    946a:	4b2b      	ldr	r3, [pc, #172]	; (9518 <ring_check+0xf8>)
    946c:	20fa      	movs	r0, #250	; 0xfa
    946e:	4798      	blx	r3
				writeKSZreg(SPI_KSZ8794_PORT1CONTROL2, 0x06);
    9470:	2106      	movs	r1, #6
    9472:	2012      	movs	r0, #18
    9474:	47a0      	blx	r4
				writeKSZreg(SPI_KSZ8794_PORT2CONTROL2, 0x06);
    9476:	2022      	movs	r0, #34	; 0x22
    9478:	2106      	movs	r1, #6
    947a:	47a0      	blx	r4
				*ringbreak = 1;
    947c:	2401      	movs	r4, #1
    947e:	7034      	strb	r4, [r6, #0]
				xprintf("ETHERNET: [turning Ethernet <B> ON - RING BROKEN]...\r\n");
    9480:	4826      	ldr	r0, [pc, #152]	; (951c <ring_check+0xfc>)
    9482:	4b21      	ldr	r3, [pc, #132]	; (9508 <ring_check+0xe8>)
    9484:	4798      	blx	r3
	if (*storm_state) {
    9486:	783b      	ldrb	r3, [r7, #0]
    9488:	2b00      	cmp	r3, #0
    948a:	d032      	beq.n	94f2 <ring_check+0xd2>
		xprintf("ETHERNET: [storm subsided]...\r\n");
    948c:	4824      	ldr	r0, [pc, #144]	; (9520 <ring_check+0x100>)
    948e:	f8df 9078 	ldr.w	r9, [pc, #120]	; 9508 <ring_check+0xe8>
		*storm_state = 0;
    9492:	f04f 0800 	mov.w	r8, #0
		xprintf("ETHERNET: [storm subsided]...\r\n");
    9496:	47c8      	blx	r9
		*storm_state = 0;
    9498:	f887 8000 	strb.w	r8, [r7]
		writeKSZreg(SPI_KSZ8794_PORT4CONTROL2, 0x06);
    949c:	2106      	movs	r1, #6
    949e:	2052      	movs	r0, #82	; 0x52
    94a0:	4f1c      	ldr	r7, [pc, #112]	; (9514 <ring_check+0xf4>)
    94a2:	47b8      	blx	r7
		if (mode) {
    94a4:	786b      	ldrb	r3, [r5, #1]
    94a6:	b133      	cbz	r3, 94b6 <ring_check+0x96>
			xprintf("ETHERNET: turning Ethernet <B> OFF because of storm - RING HEALING POSSIBILITY]...\r\n");
    94a8:	481e      	ldr	r0, [pc, #120]	; (9524 <ring_check+0x104>)
    94aa:	47c8      	blx	r9
			writeKSZreg(SPI_KSZ8794_PORT2CONTROL2, 0x01);
    94ac:	2101      	movs	r1, #1
    94ae:	2022      	movs	r0, #34	; 0x22
    94b0:	47b8      	blx	r7
			*ringbreak = 0;
    94b2:	f886 8000 	strb.w	r8, [r6]
	first = 0;
    94b6:	2300      	movs	r3, #0
    94b8:	702b      	strb	r3, [r5, #0]
	return sendrelearn;
    94ba:	e7ba      	b.n	9432 <ring_check+0x12>
			if ((first) || (*ringbreak)) {
    94bc:	b914      	cbnz	r4, 94c4 <ring_check+0xa4>
    94be:	7814      	ldrb	r4, [r2, #0]
    94c0:	2c00      	cmp	r4, #0
    94c2:	d0e0      	beq.n	9486 <ring_check+0x66>
				writeKSZreg(SPI_KSZ8794_PORT1CONTROL2, 0x07);
    94c4:	4c13      	ldr	r4, [pc, #76]	; (9514 <ring_check+0xf4>)
    94c6:	2107      	movs	r1, #7
    94c8:	2012      	movs	r0, #18
    94ca:	47a0      	blx	r4
				writeKSZreg(SPI_KSZ8794_PORT2CONTROL2, 0x01);
    94cc:	2101      	movs	r1, #1
    94ce:	2022      	movs	r0, #34	; 0x22
    94d0:	47a0      	blx	r4
				writeKSZreg(SPI_KSZ8794_GLOBAL0, 0x6D);
    94d2:	216d      	movs	r1, #109	; 0x6d
    94d4:	2002      	movs	r0, #2
    94d6:	47a0      	blx	r4
				delay_us(250);
    94d8:	4b0f      	ldr	r3, [pc, #60]	; (9518 <ring_check+0xf8>)
    94da:	20fa      	movs	r0, #250	; 0xfa
    94dc:	4798      	blx	r3
				writeKSZreg(SPI_KSZ8794_PORT1CONTROL2, 0x06);
    94de:	2106      	movs	r1, #6
    94e0:	2012      	movs	r0, #18
    94e2:	47a0      	blx	r4
				*ringbreak = 0;
    94e4:	2300      	movs	r3, #0
    94e6:	7033      	strb	r3, [r6, #0]
				xprintf("ETHERNET: [turning Ethernet <B> OFF - RING HEALED]...\r\n");
    94e8:	480f      	ldr	r0, [pc, #60]	; (9528 <ring_check+0x108>)
    94ea:	4b07      	ldr	r3, [pc, #28]	; (9508 <ring_check+0xe8>)
    94ec:	4798      	blx	r3
				sendrelearn = 1;
    94ee:	2401      	movs	r4, #1
    94f0:	e7c9      	b.n	9486 <ring_check+0x66>
		if (mode) {																										
    94f2:	786b      	ldrb	r3, [r5, #1]
    94f4:	2b00      	cmp	r3, #0
    94f6:	d0de      	beq.n	94b6 <ring_check+0x96>
			mac_async_write(&ETHERNET_MAC_0, (uint8_t *)&wbuf[0], 68);
    94f8:	2244      	movs	r2, #68	; 0x44
    94fa:	490c      	ldr	r1, [pc, #48]	; (952c <ring_check+0x10c>)
    94fc:	4b0c      	ldr	r3, [pc, #48]	; (9530 <ring_check+0x110>)
    94fe:	480d      	ldr	r0, [pc, #52]	; (9534 <ring_check+0x114>)
    9500:	4798      	blx	r3
    9502:	e7d8      	b.n	94b6 <ring_check+0x96>
    9504:	0000f01b 	.word	0x0000f01b
    9508:	00000395 	.word	0x00000395
    950c:	0000f03c 	.word	0x0000f03c
    9510:	2000726e 	.word	0x2000726e
    9514:	0000b245 	.word	0x0000b245
    9518:	00001201 	.word	0x00001201
    951c:	0000f05b 	.word	0x0000f05b
    9520:	0000f0ca 	.word	0x0000f0ca
    9524:	0000f0ea 	.word	0x0000f0ea
    9528:	0000f092 	.word	0x0000f092
    952c:	20007270 	.word	0x20007270
    9530:	000015a5 	.word	0x000015a5
    9534:	20007528 	.word	0x20007528

00009538 <chksum>:

#if ! UIP_ARCH_CHKSUM
/*---------------------------------------------------------------------------*/
static u16_t
chksum(u16_t sum, const u8_t *data, u16_t len)
{
    9538:	b510      	push	{r4, lr}
  u16_t t;
  const u8_t *dataptr;
  const u8_t *last_byte;

  dataptr = data;
  last_byte = data + len - 1;
    953a:	3a01      	subs	r2, #1
    953c:	440a      	add	r2, r1
  
  while(dataptr < last_byte) {	/* At least two more bytes */
    953e:	4291      	cmp	r1, r2
    9540:	d309      	bcc.n	9556 <chksum+0x1e>
      sum++;		/* carry */
    }
    dataptr += 2;
  }
  
  if(dataptr == last_byte) {
    9542:	d107      	bne.n	9554 <chksum+0x1c>
    t = (dataptr[0] << 8) + 0;
    9544:	780b      	ldrb	r3, [r1, #0]
    9546:	021b      	lsls	r3, r3, #8
    sum += t;
    9548:	4418      	add	r0, r3
    954a:	b280      	uxth	r0, r0
    if(sum < t) {
    954c:	4283      	cmp	r3, r0
      sum++;		/* carry */
    954e:	bf84      	itt	hi
    9550:	3001      	addhi	r0, #1
    9552:	b280      	uxthhi	r0, r0
    }
  }

  /* Return sum in host byte order. */
  return sum;
}
    9554:	bd10      	pop	{r4, pc}
    t = (dataptr[0] << 8) + dataptr[1];
    9556:	780c      	ldrb	r4, [r1, #0]
    9558:	784b      	ldrb	r3, [r1, #1]
    955a:	eb03 2304 	add.w	r3, r3, r4, lsl #8
    955e:	b29b      	uxth	r3, r3
    sum += t;
    9560:	4418      	add	r0, r3
    9562:	b280      	uxth	r0, r0
    if(sum < t) {
    9564:	4283      	cmp	r3, r0
      sum++;		/* carry */
    9566:	bf84      	itt	hi
    9568:	3001      	addhi	r0, #1
    956a:	b280      	uxthhi	r0, r0
    dataptr += 2;
    956c:	3102      	adds	r1, #2
    956e:	e7e6      	b.n	953e <chksum+0x6>

00009570 <upper_layer_chksum>:
}
#endif
/*---------------------------------------------------------------------------*/
static u16_t
upper_layer_chksum(u8_t proto)
{
    9570:	b570      	push	{r4, r5, r6, lr}
  u16_t sum;
  
#if UIP_CONF_IPV6
  upper_layer_len = (((u16_t)(BUF->len[0]) << 8) + BUF->len[1]);
#else /* UIP_CONF_IPV6 */
  upper_layer_len = (((u16_t)(BUF->len[0]) << 8) + BUF->len[1]) - UIP_IPH_LEN;
    9572:	4d0c      	ldr	r5, [pc, #48]	; (95a4 <upper_layer_chksum+0x34>)
  /* First sum pseudoheader. */
  
  /* IP protocol and length fields. This addition cannot carry. */
  sum = upper_layer_len + proto;
  /* Sum IP source and destination addresses. */
  sum = chksum(sum, (u8_t *)&BUF->srcipaddr[0], 2 * sizeof(uip_ipaddr_t));
    9574:	4e0c      	ldr	r6, [pc, #48]	; (95a8 <upper_layer_chksum+0x38>)
  upper_layer_len = (((u16_t)(BUF->len[0]) << 8) + BUF->len[1]) - UIP_IPH_LEN;
    9576:	7c6c      	ldrb	r4, [r5, #17]
    9578:	7c2b      	ldrb	r3, [r5, #16]
    957a:	3c14      	subs	r4, #20
    957c:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    9580:	b2a4      	uxth	r4, r4
  sum = upper_layer_len + proto;
    9582:	4420      	add	r0, r4
  sum = chksum(sum, (u8_t *)&BUF->srcipaddr[0], 2 * sizeof(uip_ipaddr_t));
    9584:	2208      	movs	r2, #8
    9586:	f105 011a 	add.w	r1, r5, #26
    958a:	b280      	uxth	r0, r0
    958c:	47b0      	blx	r6

  /* Sum TCP header and data. */
  sum = chksum(sum, &uip_buf[UIP_IPH_LEN + UIP_LLH_LEN],
    958e:	4622      	mov	r2, r4
    9590:	f105 0122 	add.w	r1, r5, #34	; 0x22
    9594:	47b0      	blx	r6
	       upper_layer_len);
    
  return (sum == 0) ? 0xffff : htons(sum);
    9596:	b110      	cbz	r0, 959e <upper_layer_chksum+0x2e>
    9598:	ba40      	rev16	r0, r0
    959a:	b280      	uxth	r0, r0
    959c:	bd70      	pop	{r4, r5, r6, pc}
    959e:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
    95a2:	bd70      	pop	{r4, r5, r6, pc}
    95a4:	20008622 	.word	0x20008622
    95a8:	00009539 	.word	0x00009539

000095ac <uip_add32>:
{
    95ac:	b5f0      	push	{r4, r5, r6, r7, lr}
  uip_acc32[3] = op32[3] + (op16 & 0xff);
    95ae:	78c5      	ldrb	r5, [r0, #3]
    95b0:	4b12      	ldr	r3, [pc, #72]	; (95fc <uip_add32+0x50>)
    95b2:	440d      	add	r5, r1
    95b4:	b2ed      	uxtb	r5, r5
    95b6:	70dd      	strb	r5, [r3, #3]
  uip_acc32[2] = op32[2] + (op16 >> 8);
    95b8:	7882      	ldrb	r2, [r0, #2]
    95ba:	0a0f      	lsrs	r7, r1, #8
    95bc:	443a      	add	r2, r7
    95be:	b2d2      	uxtb	r2, r2
    95c0:	709a      	strb	r2, [r3, #2]
  uip_acc32[1] = op32[1];
    95c2:	7844      	ldrb	r4, [r0, #1]
    95c4:	705c      	strb	r4, [r3, #1]
  uip_acc32[0] = op32[0];
    95c6:	7806      	ldrb	r6, [r0, #0]
    95c8:	701e      	strb	r6, [r3, #0]
  if(uip_acc32[2] < (op16 >> 8)) {
    95ca:	4297      	cmp	r7, r2
    95cc:	d905      	bls.n	95da <uip_add32+0x2e>
    ++uip_acc32[1];
    95ce:	1c60      	adds	r0, r4, #1
    95d0:	b2c0      	uxtb	r0, r0
    95d2:	7058      	strb	r0, [r3, #1]
    if(uip_acc32[1] == 0) {
    95d4:	b908      	cbnz	r0, 95da <uip_add32+0x2e>
      ++uip_acc32[0];
    95d6:	3601      	adds	r6, #1
    95d8:	701e      	strb	r6, [r3, #0]
  if(uip_acc32[3] < (op16 & 0xff)) {
    95da:	b2c9      	uxtb	r1, r1
    95dc:	428d      	cmp	r5, r1
    95de:	da0b      	bge.n	95f8 <uip_add32+0x4c>
    ++uip_acc32[2];
    95e0:	3201      	adds	r2, #1
    95e2:	b2d2      	uxtb	r2, r2
    95e4:	709a      	strb	r2, [r3, #2]
    if(uip_acc32[2] == 0) {
    95e6:	b93a      	cbnz	r2, 95f8 <uip_add32+0x4c>
      ++uip_acc32[1];
    95e8:	785a      	ldrb	r2, [r3, #1]
    95ea:	3201      	adds	r2, #1
    95ec:	b2d2      	uxtb	r2, r2
    95ee:	705a      	strb	r2, [r3, #1]
      if(uip_acc32[1] == 0) {
    95f0:	b912      	cbnz	r2, 95f8 <uip_add32+0x4c>
	++uip_acc32[0];
    95f2:	781a      	ldrb	r2, [r3, #0]
    95f4:	3201      	adds	r2, #1
    95f6:	701a      	strb	r2, [r3, #0]
    95f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    95fa:	bf00      	nop
    95fc:	20008558 	.word	0x20008558

00009600 <uip_add_rcv_nxt>:
}
#endif /* UIP_REASSEMBLY */
/*---------------------------------------------------------------------------*/
static void
uip_add_rcv_nxt(u16_t n)
{
    9600:	b510      	push	{r4, lr}
  uip_add32(uip_conn->rcv_nxt, n);
    9602:	4c09      	ldr	r4, [pc, #36]	; (9628 <uip_add_rcv_nxt+0x28>)
    9604:	6823      	ldr	r3, [r4, #0]
    9606:	4601      	mov	r1, r0
    9608:	f103 0008 	add.w	r0, r3, #8
    960c:	4b07      	ldr	r3, [pc, #28]	; (962c <uip_add_rcv_nxt+0x2c>)
    960e:	4798      	blx	r3
  uip_conn->rcv_nxt[0] = uip_acc32[0];
    9610:	4a07      	ldr	r2, [pc, #28]	; (9630 <uip_add_rcv_nxt+0x30>)
    9612:	6823      	ldr	r3, [r4, #0]
    9614:	7811      	ldrb	r1, [r2, #0]
    9616:	7219      	strb	r1, [r3, #8]
  uip_conn->rcv_nxt[1] = uip_acc32[1];
    9618:	7851      	ldrb	r1, [r2, #1]
    961a:	7259      	strb	r1, [r3, #9]
  uip_conn->rcv_nxt[2] = uip_acc32[2];
    961c:	7891      	ldrb	r1, [r2, #2]
  uip_conn->rcv_nxt[3] = uip_acc32[3];
    961e:	78d2      	ldrb	r2, [r2, #3]
  uip_conn->rcv_nxt[2] = uip_acc32[2];
    9620:	7299      	strb	r1, [r3, #10]
  uip_conn->rcv_nxt[3] = uip_acc32[3];
    9622:	72da      	strb	r2, [r3, #11]
    9624:	bd10      	pop	{r4, pc}
    9626:	bf00      	nop
    9628:	20008568 	.word	0x20008568
    962c:	000095ad 	.word	0x000095ad
    9630:	20008558 	.word	0x20008558

00009634 <uip_ipchksum>:
{
    9634:	b510      	push	{r4, lr}
  sum = chksum(0, &uip_buf[UIP_LLH_LEN], UIP_IPH_LEN);
    9636:	4908      	ldr	r1, [pc, #32]	; (9658 <uip_ipchksum+0x24>)
    9638:	4b08      	ldr	r3, [pc, #32]	; (965c <uip_ipchksum+0x28>)
    963a:	2214      	movs	r2, #20
    963c:	2000      	movs	r0, #0
    963e:	4798      	blx	r3
  DEBUG_PRINTF("uip_ipchksum: sum 0x%04x\n", sum);
    9640:	4b07      	ldr	r3, [pc, #28]	; (9660 <uip_ipchksum+0x2c>)
  sum = chksum(0, &uip_buf[UIP_LLH_LEN], UIP_IPH_LEN);
    9642:	4604      	mov	r4, r0
  DEBUG_PRINTF("uip_ipchksum: sum 0x%04x\n", sum);
    9644:	4601      	mov	r1, r0
    9646:	4807      	ldr	r0, [pc, #28]	; (9664 <uip_ipchksum+0x30>)
    9648:	4798      	blx	r3
  return (sum == 0) ? 0xffff : htons(sum);
    964a:	b114      	cbz	r4, 9652 <uip_ipchksum+0x1e>
    964c:	ba60      	rev16	r0, r4
    964e:	b280      	uxth	r0, r0
    9650:	bd10      	pop	{r4, pc}
    9652:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
    9656:	bd10      	pop	{r4, pc}
    9658:	20008630 	.word	0x20008630
    965c:	00009539 	.word	0x00009539
    9660:	00000395 	.word	0x00000395
    9664:	0000f13f 	.word	0x0000f13f

00009668 <uip_tcpchksum>:
  return upper_layer_chksum(UIP_PROTO_TCP);
    9668:	2006      	movs	r0, #6
    966a:	4b01      	ldr	r3, [pc, #4]	; (9670 <uip_tcpchksum+0x8>)
    966c:	4718      	bx	r3
    966e:	bf00      	nop
    9670:	00009571 	.word	0x00009571

00009674 <uip_udpchksum>:
  return upper_layer_chksum(UIP_PROTO_UDP);
    9674:	2011      	movs	r0, #17
    9676:	4b01      	ldr	r3, [pc, #4]	; (967c <uip_udpchksum+0x8>)
    9678:	4718      	bx	r3
    967a:	bf00      	nop
    967c:	00009571 	.word	0x00009571

00009680 <uip_init>:
{
    9680:	b530      	push	{r4, r5, lr}
    9682:	4b10      	ldr	r3, [pc, #64]	; (96c4 <uip_init+0x44>)
    9684:	4810      	ldr	r0, [pc, #64]	; (96c8 <uip_init+0x48>)
    9686:	2200      	movs	r2, #0
    9688:	801a      	strh	r2, [r3, #0]
    968a:	4b10      	ldr	r3, [pc, #64]	; (96cc <uip_init+0x4c>)
    968c:	7e5c      	ldrb	r4, [r3, #25]
    968e:	2501      	movs	r5, #1
  for(c = 0; c < UIP_CONNS; ++c) {
    9690:	4611      	mov	r1, r2
    9692:	b169      	cbz	r1, 96b0 <uip_init+0x30>
    9694:	b102      	cbz	r2, 9698 <uip_init+0x18>
    9696:	765c      	strb	r4, [r3, #25]
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
    9698:	2300      	movs	r3, #0
    969a:	490d      	ldr	r1, [pc, #52]	; (96d0 <uip_init+0x50>)
    969c:	7083      	strb	r3, [r0, #2]
    969e:	461a      	mov	r2, r3
    uip_udp_conns[c].lport = 0;
    96a0:	461c      	mov	r4, r3
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
    96a2:	2a0a      	cmp	r2, #10
    96a4:	f101 0164 	add.w	r1, r1, #100	; 0x64
    96a8:	d106      	bne.n	96b8 <uip_init+0x38>
    96aa:	b103      	cbz	r3, 96ae <uip_init+0x2e>
    96ac:	7082      	strb	r2, [r0, #2]
    96ae:	bd30      	pop	{r4, r5, pc}
    uip_conns[c].tcpstateflags = UIP_CLOSED;
    96b0:	460c      	mov	r4, r1
    96b2:	2201      	movs	r2, #1
  for(c = 0; c < UIP_CONNS; ++c) {
    96b4:	4629      	mov	r1, r5
    96b6:	e7ec      	b.n	9692 <uip_init+0x12>
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
    96b8:	3201      	adds	r2, #1
    uip_udp_conns[c].lport = 0;
    96ba:	f821 4c64 	strh.w	r4, [r1, #-100]
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
    96be:	b2d2      	uxtb	r2, r2
    96c0:	2301      	movs	r3, #1
    96c2:	e7ee      	b.n	96a2 <uip_init+0x22>
    96c4:	200085e0 	.word	0x200085e0
    96c8:	200072b6 	.word	0x200072b6
    96cc:	2000856c 	.word	0x2000856c
    96d0:	20008cd0 	.word	0x20008cd0

000096d4 <uip_udp_new>:
{
    96d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    96d8:	4c24      	ldr	r4, [pc, #144]	; (976c <uip_udp_new+0x98>)
    96da:	4e25      	ldr	r6, [pc, #148]	; (9770 <uip_udp_new+0x9c>)
    96dc:	88a2      	ldrh	r2, [r4, #4]
    if(uip_udp_conns[c].lport == htons(lastport)) {
    96de:	2764      	movs	r7, #100	; 0x64
  ++lastport;
    96e0:	3201      	adds	r2, #1
    96e2:	b292      	uxth	r2, r2
    lastport = 4096;
    96e4:	f5b2 4ffa 	cmp.w	r2, #32000	; 0x7d00
    96e8:	bf28      	it	cs
    96ea:	f44f 5280 	movcs.w	r2, #4096	; 0x1000
}
/*---------------------------------------------------------------------------*/
u16_t
htons(u16_t val)
{
  return HTONS(val);
    96ee:	0a15      	lsrs	r5, r2, #8
    96f0:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
    96f4:	b2ad      	uxth	r5, r5
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
    96f6:	2300      	movs	r3, #0
    96f8:	2b0a      	cmp	r3, #10
    96fa:	d10e      	bne.n	971a <uip_udp_new+0x46>
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
    96fc:	2300      	movs	r3, #0
    96fe:	f8df e070 	ldr.w	lr, [pc, #112]	; 9770 <uip_udp_new+0x9c>
    9702:	80a2      	strh	r2, [r4, #4]
    9704:	70a3      	strb	r3, [r4, #2]
    9706:	461f      	mov	r7, r3
    9708:	b2da      	uxtb	r2, r3
    970a:	2a0a      	cmp	r2, #10
    970c:	d10d      	bne.n	972a <uip_udp_new+0x56>
    970e:	b107      	cbz	r7, 9712 <uip_udp_new+0x3e>
    9710:	70a2      	strb	r2, [r4, #2]
    return 0;
    9712:	2200      	movs	r2, #0
}
    9714:	4610      	mov	r0, r2
    9716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    971a:	3301      	adds	r3, #1
    if(uip_udp_conns[c].lport == htons(lastport)) {
    971c:	fb07 6e03 	mla	lr, r7, r3, r6
    9720:	f83e ec60 	ldrh.w	lr, [lr, #-96]
    9724:	45ae      	cmp	lr, r5
    9726:	d1e7      	bne.n	96f8 <uip_udp_new+0x24>
    9728:	e7da      	b.n	96e0 <uip_udp_new+0xc>
    if(uip_udp_conns[c].lport == 0) {
    972a:	f8be 8004 	ldrh.w	r8, [lr, #4]
    972e:	f103 0c01 	add.w	ip, r3, #1
    9732:	f10e 0e64 	add.w	lr, lr, #100	; 0x64
    9736:	f1b8 0f00 	cmp.w	r8, #0
    973a:	d10e      	bne.n	975a <uip_udp_new+0x86>
    973c:	b107      	cbz	r7, 9740 <uip_udp_new+0x6c>
    973e:	70a2      	strb	r2, [r4, #2]
      conn = &uip_udp_conns[c];
    9740:	2464      	movs	r4, #100	; 0x64
    9742:	435c      	muls	r4, r3
    9744:	19a2      	adds	r2, r4, r6
  conn->lport = HTONS(lastport);
    9746:	8095      	strh	r5, [r2, #4]
  conn->rport = rport;
    9748:	80d1      	strh	r1, [r2, #6]
  if(ripaddr == NULL) {
    974a:	b948      	cbnz	r0, 9760 <uip_udp_new+0x8c>
    memset(conn->ripaddr, 0, sizeof(uip_ipaddr_t));
    974c:	51a0      	str	r0, [r4, r6]
  conn->ttl = UIP_TTL;
    974e:	2164      	movs	r1, #100	; 0x64
    9750:	fb01 6303 	mla	r3, r1, r3, r6
    9754:	2140      	movs	r1, #64	; 0x40
    9756:	7219      	strb	r1, [r3, #8]
  return conn;
    9758:	e7dc      	b.n	9714 <uip_udp_new+0x40>
    975a:	4663      	mov	r3, ip
    975c:	2701      	movs	r7, #1
    975e:	e7d3      	b.n	9708 <uip_udp_new+0x34>
    uip_ipaddr_copy(&conn->ripaddr, ripaddr);
    9760:	8801      	ldrh	r1, [r0, #0]
    9762:	5331      	strh	r1, [r6, r4]
    9764:	8841      	ldrh	r1, [r0, #2]
    9766:	8051      	strh	r1, [r2, #2]
    9768:	e7f1      	b.n	974e <uip_udp_new+0x7a>
    976a:	bf00      	nop
    976c:	200072b6 	.word	0x200072b6
    9770:	20008ccc 	.word	0x20008ccc

00009774 <uip_process>:
  if(flag == UIP_UDP_SEND_CONN) {
    9774:	2804      	cmp	r0, #4
{
    9776:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    977a:	4cac      	ldr	r4, [pc, #688]	; (9a2c <uip_process+0x2b8>)
  if(flag == UIP_UDP_SEND_CONN) {
    977c:	f000 80d6 	beq.w	992c <uip_process+0x1b8>
  register struct uip_conn *uip_connr = uip_conn;
    9780:	f8df e2fc 	ldr.w	lr, [pc, #764]	; 9a80 <uip_process+0x30c>
  uip_sappdata = uip_appdata = &uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN];
    9784:	49aa      	ldr	r1, [pc, #680]	; (9a30 <uip_process+0x2bc>)
    9786:	4aab      	ldr	r2, [pc, #684]	; (9a34 <uip_process+0x2c0>)
    9788:	4fab      	ldr	r7, [pc, #684]	; (9a38 <uip_process+0x2c4>)
  register struct uip_conn *uip_connr = uip_conn;
    978a:	f8de 8000 	ldr.w	r8, [lr]
  uip_sappdata = uip_appdata = &uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN];
    978e:	600f      	str	r7, [r1, #0]
  if(flag == UIP_POLL_REQUEST) {
    9790:	2803      	cmp	r0, #3
  uip_sappdata = uip_appdata = &uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN];
    9792:	6017      	str	r7, [r2, #0]
    9794:	4675      	mov	r5, lr
    9796:	468a      	mov	sl, r1
    9798:	4616      	mov	r6, r2
  if(flag == UIP_POLL_REQUEST) {
    979a:	d11a      	bne.n	97d2 <uip_process+0x5e>
    if((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_ESTABLISHED &&
    979c:	f898 3019 	ldrb.w	r3, [r8, #25]
    97a0:	f003 030f 	and.w	r3, r3, #15
    97a4:	2b03      	cmp	r3, #3
    97a6:	d13e      	bne.n	9826 <uip_process+0xb2>
    97a8:	f8b8 3010 	ldrh.w	r3, [r8, #16]
    97ac:	2b00      	cmp	r3, #0
    97ae:	d13a      	bne.n	9826 <uip_process+0xb2>
	uip_flags = UIP_POLL;
    97b0:	4ba2      	ldr	r3, [pc, #648]	; (9a3c <uip_process+0x2c8>)
    97b2:	2208      	movs	r2, #8
    97b4:	701a      	strb	r2, [r3, #0]
	UIP_APPCALL();
    97b6:	4ba2      	ldr	r3, [pc, #648]	; (9a40 <uip_process+0x2cc>)
    97b8:	4798      	blx	r3
      if(uip_flags & UIP_ABORT) {
    97ba:	4ba0      	ldr	r3, [pc, #640]	; (9a3c <uip_process+0x2c8>)
    97bc:	781a      	ldrb	r2, [r3, #0]
    97be:	4ba1      	ldr	r3, [pc, #644]	; (9a44 <uip_process+0x2d0>)
    97c0:	f012 0120 	ands.w	r1, r2, #32
    97c4:	f000 854c 	beq.w	a260 <uip_process+0xaec>
	uip_slen = 0;
    97c8:	2200      	movs	r2, #0
    97ca:	801a      	strh	r2, [r3, #0]
	uip_connr->tcpstateflags = UIP_CLOSED;
    97cc:	f888 2019 	strb.w	r2, [r8, #25]
    97d0:	e04c      	b.n	986c <uip_process+0xf8>
  } else if(flag == UIP_TIMER) {
    97d2:	2802      	cmp	r0, #2
    97d4:	f040 8095 	bne.w	9902 <uip_process+0x18e>
    if(++iss[3] == 0) {
    97d8:	4a9b      	ldr	r2, [pc, #620]	; (9a48 <uip_process+0x2d4>)
    97da:	7a53      	ldrb	r3, [r2, #9]
    97dc:	3301      	adds	r3, #1
    97de:	b2db      	uxtb	r3, r3
    97e0:	7253      	strb	r3, [r2, #9]
    97e2:	b963      	cbnz	r3, 97fe <uip_process+0x8a>
      if(++iss[2] == 0) {
    97e4:	7a13      	ldrb	r3, [r2, #8]
    97e6:	3301      	adds	r3, #1
    97e8:	b2db      	uxtb	r3, r3
    97ea:	7213      	strb	r3, [r2, #8]
    97ec:	b93b      	cbnz	r3, 97fe <uip_process+0x8a>
	if(++iss[1] == 0) {
    97ee:	79d3      	ldrb	r3, [r2, #7]
    97f0:	3301      	adds	r3, #1
    97f2:	b2db      	uxtb	r3, r3
    97f4:	71d3      	strb	r3, [r2, #7]
    97f6:	b913      	cbnz	r3, 97fe <uip_process+0x8a>
	  ++iss[0];
    97f8:	7993      	ldrb	r3, [r2, #6]
    97fa:	3301      	adds	r3, #1
    97fc:	7193      	strb	r3, [r2, #6]
    uip_slen = 0;
    97fe:	4b91      	ldr	r3, [pc, #580]	; (9a44 <uip_process+0x2d0>)
    uip_len = 0;
    9800:	2200      	movs	r2, #0
    uip_slen = 0;
    9802:	801a      	strh	r2, [r3, #0]
    if(uip_connr->tcpstateflags == UIP_TIME_WAIT ||
    9804:	f898 3019 	ldrb.w	r3, [r8, #25]
    uip_len = 0;
    9808:	8022      	strh	r2, [r4, #0]
    if(uip_connr->tcpstateflags == UIP_TIME_WAIT ||
    980a:	f003 01fd 	and.w	r1, r3, #253	; 0xfd
    980e:	2905      	cmp	r1, #5
    9810:	d10e      	bne.n	9830 <uip_process+0xbc>
      ++(uip_connr->timer);
    9812:	f898 301a 	ldrb.w	r3, [r8, #26]
    9816:	3301      	adds	r3, #1
    9818:	b2db      	uxtb	r3, r3
      if(uip_connr->timer == UIP_TIME_WAIT_TIMEOUT) {
    981a:	2b78      	cmp	r3, #120	; 0x78
      ++(uip_connr->timer);
    981c:	f888 301a 	strb.w	r3, [r8, #26]
      if(uip_connr->timer == UIP_TIME_WAIT_TIMEOUT) {
    9820:	d101      	bne.n	9826 <uip_process+0xb2>
	uip_connr->tcpstateflags = UIP_CLOSED;
    9822:	f888 2019 	strb.w	r2, [r8, #25]
  uip_flags = 0;
    9826:	4a85      	ldr	r2, [pc, #532]	; (9a3c <uip_process+0x2c8>)
  uip_len = 0;
    9828:	2300      	movs	r3, #0
    982a:	8023      	strh	r3, [r4, #0]
  uip_flags = 0;
    982c:	7013      	strb	r3, [r2, #0]
  return;
    982e:	e1a6      	b.n	9b7e <uip_process+0x40a>
    } else if(uip_connr->tcpstateflags != UIP_CLOSED) {
    9830:	2b00      	cmp	r3, #0
    9832:	d0f8      	beq.n	9826 <uip_process+0xb2>
      if(uip_outstanding(uip_connr)) {
    9834:	f8b8 2010 	ldrh.w	r2, [r8, #16]
    9838:	4880      	ldr	r0, [pc, #512]	; (9a3c <uip_process+0x2c8>)
    983a:	2a00      	cmp	r2, #0
    983c:	d05a      	beq.n	98f4 <uip_process+0x180>
	if(uip_connr->timer-- == 0) {
    983e:	f898 201a 	ldrb.w	r2, [r8, #26]
    9842:	1e51      	subs	r1, r2, #1
    9844:	f888 101a 	strb.w	r1, [r8, #26]
    9848:	2a00      	cmp	r2, #0
    984a:	d1ec      	bne.n	9826 <uip_process+0xb2>
	  if(uip_connr->nrtx == UIP_MAXRTX ||
    984c:	f898 201b 	ldrb.w	r2, [r8, #27]
    9850:	2a08      	cmp	r2, #8
    9852:	d004      	beq.n	985e <uip_process+0xea>
    9854:	1e59      	subs	r1, r3, #1
    9856:	2901      	cmp	r1, #1
    9858:	d80b      	bhi.n	9872 <uip_process+0xfe>
	       uip_connr->tcpstateflags == UIP_SYN_RCVD) &&
    985a:	2a05      	cmp	r2, #5
    985c:	d109      	bne.n	9872 <uip_process+0xfe>
	    uip_connr->tcpstateflags = UIP_CLOSED;
    985e:	2300      	movs	r3, #0
    9860:	f888 3019 	strb.w	r3, [r8, #25]
	    uip_flags = UIP_TIMEDOUT;
    9864:	2380      	movs	r3, #128	; 0x80
    9866:	7003      	strb	r3, [r0, #0]
	    UIP_APPCALL();
    9868:	4b75      	ldr	r3, [pc, #468]	; (9a40 <uip_process+0x2cc>)
    986a:	4798      	blx	r3
	BUF->flags = TCP_RST | TCP_ACK;
    986c:	2214      	movs	r2, #20
    986e:	f000 bcbd 	b.w	a1ec <uip_process+0xa78>
	  uip_connr->timer = UIP_RTO << (uip_connr->nrtx > 4?
    9872:	2a04      	cmp	r2, #4
    9874:	bf9a      	itte	ls
    9876:	2103      	movls	r1, #3
    9878:	4091      	lslls	r1, r2
    987a:	2130      	movhi	r1, #48	; 0x30
    987c:	f888 101a 	strb.w	r1, [r8, #26]
	  ++(uip_connr->nrtx);
    9880:	3201      	adds	r2, #1
	  UIP_STAT(++uip_stat.tcp.rexmit);
    9882:	4972      	ldr	r1, [pc, #456]	; (9a4c <uip_process+0x2d8>)
	  ++(uip_connr->nrtx);
    9884:	f888 201b 	strb.w	r2, [r8, #27]
	  UIP_STAT(++uip_stat.tcp.rexmit);
    9888:	8cca      	ldrh	r2, [r1, #38]	; 0x26
	  switch(uip_connr->tcpstateflags & UIP_TS_MASK) {
    988a:	f003 030f 	and.w	r3, r3, #15
	  UIP_STAT(++uip_stat.tcp.rexmit);
    988e:	3201      	adds	r2, #1
	  switch(uip_connr->tcpstateflags & UIP_TS_MASK) {
    9890:	3b01      	subs	r3, #1
	  UIP_STAT(++uip_stat.tcp.rexmit);
    9892:	84ca      	strh	r2, [r1, #38]	; 0x26
	  switch(uip_connr->tcpstateflags & UIP_TS_MASK) {
    9894:	2b07      	cmp	r3, #7
    9896:	d8c6      	bhi.n	9826 <uip_process+0xb2>
    9898:	a201      	add	r2, pc, #4	; (adr r2, 98a0 <uip_process+0x12c>)
    989a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    989e:	bf00      	nop
    98a0:	00009f27 	.word	0x00009f27
    98a4:	00009827 	.word	0x00009827
    98a8:	000098c1 	.word	0x000098c1
    98ac:	0000a1eb 	.word	0x0000a1eb
    98b0:	00009827 	.word	0x00009827
    98b4:	0000a1eb 	.word	0x0000a1eb
    98b8:	00009827 	.word	0x00009827
    98bc:	0000a1eb 	.word	0x0000a1eb
	    uip_flags = UIP_REXMIT;
    98c0:	2304      	movs	r3, #4
    98c2:	7003      	strb	r3, [r0, #0]
	    UIP_APPCALL();
    98c4:	4b5e      	ldr	r3, [pc, #376]	; (9a40 <uip_process+0x2cc>)
    98c6:	4798      	blx	r3
      uip_appdata = uip_sappdata;
    98c8:	6833      	ldr	r3, [r6, #0]
    98ca:	f8ca 3000 	str.w	r3, [sl]
      if(uip_slen > 0 && uip_connr->len > 0) {
    98ce:	4b5d      	ldr	r3, [pc, #372]	; (9a44 <uip_process+0x2d0>)
    98d0:	881b      	ldrh	r3, [r3, #0]
    98d2:	2b00      	cmp	r3, #0
    98d4:	f000 84e9 	beq.w	a2aa <uip_process+0xb36>
    98d8:	f8b8 3010 	ldrh.w	r3, [r8, #16]
    98dc:	2b00      	cmp	r3, #0
    98de:	f000 84e4 	beq.w	a2aa <uip_process+0xb36>
	uip_len = uip_connr->len + UIP_TCPIP_HLEN;
    98e2:	3328      	adds	r3, #40	; 0x28
    98e4:	8023      	strh	r3, [r4, #0]
	BUF->flags = TCP_ACK | TCP_PSH;
    98e6:	2218      	movs	r2, #24
	BUF->flags = TCP_ACK;
    98e8:	4b59      	ldr	r3, [pc, #356]	; (9a50 <uip_process+0x2dc>)
    98ea:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  BUF->tcpoffset = (UIP_TCPH_LEN / 4) << 4;
    98ee:	2250      	movs	r2, #80	; 0x50
    98f0:	4b57      	ldr	r3, [pc, #348]	; (9a50 <uip_process+0x2dc>)
    98f2:	e32b      	b.n	9f4c <uip_process+0x7d8>
      } else if((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_ESTABLISHED) {
    98f4:	f003 030f 	and.w	r3, r3, #15
    98f8:	2b03      	cmp	r3, #3
    98fa:	d194      	bne.n	9826 <uip_process+0xb2>
	uip_flags = UIP_POLL;
    98fc:	2308      	movs	r3, #8
    98fe:	7003      	strb	r3, [r0, #0]
    9900:	e759      	b.n	97b6 <uip_process+0x42>
  if(flag == UIP_UDP_TIMER) {
    9902:	2805      	cmp	r0, #5
    9904:	d165      	bne.n	99d2 <uip_process+0x25e>
    if(uip_udp_conn->lport != 0) {
    9906:	4b53      	ldr	r3, [pc, #332]	; (9a54 <uip_process+0x2e0>)
    9908:	681b      	ldr	r3, [r3, #0]
    990a:	889b      	ldrh	r3, [r3, #4]
    990c:	2b00      	cmp	r3, #0
    990e:	d08a      	beq.n	9826 <uip_process+0xb2>
      uip_sappdata = uip_appdata = &uip_buf[UIP_LLH_LEN + UIP_IPUDPH_LEN];
    9910:	3f0c      	subs	r7, #12
    9912:	6017      	str	r7, [r2, #0]
      uip_len = uip_slen = 0;
    9914:	4a4b      	ldr	r2, [pc, #300]	; (9a44 <uip_process+0x2d0>)
      uip_sappdata = uip_appdata = &uip_buf[UIP_LLH_LEN + UIP_IPUDPH_LEN];
    9916:	600f      	str	r7, [r1, #0]
      uip_conn = NULL;
    9918:	2300      	movs	r3, #0
      uip_len = uip_slen = 0;
    991a:	8013      	strh	r3, [r2, #0]
      uip_conn = NULL;
    991c:	f8ce 3000 	str.w	r3, [lr]
      uip_len = uip_slen = 0;
    9920:	8023      	strh	r3, [r4, #0]
      uip_flags = UIP_POLL;
    9922:	4b46      	ldr	r3, [pc, #280]	; (9a3c <uip_process+0x2c8>)
    9924:	2208      	movs	r2, #8
    9926:	701a      	strb	r2, [r3, #0]
  UIP_UDP_APPCALL();
    9928:	4b4b      	ldr	r3, [pc, #300]	; (9a58 <uip_process+0x2e4>)
    992a:	4798      	blx	r3
  if(uip_slen == 0) {
    992c:	4b45      	ldr	r3, [pc, #276]	; (9a44 <uip_process+0x2d0>)
    992e:	881b      	ldrh	r3, [r3, #0]
    9930:	2b00      	cmp	r3, #0
    9932:	f43f af78 	beq.w	9826 <uip_process+0xb2>
  BUF->len[0] = (uip_len >> 8);
    9936:	4d46      	ldr	r5, [pc, #280]	; (9a50 <uip_process+0x2dc>)
  uip_len = uip_slen + UIP_IPUDPH_LEN;
    9938:	f103 021c 	add.w	r2, r3, #28
    993c:	b292      	uxth	r2, r2
  BUF->len[1] = (uip_len & 0xff);
    993e:	746a      	strb	r2, [r5, #17]
  BUF->len[0] = (uip_len >> 8);
    9940:	0a11      	lsrs	r1, r2, #8
  uip_len = uip_slen + UIP_IPUDPH_LEN;
    9942:	8022      	strh	r2, [r4, #0]
  BUF->ttl = uip_udp_conn->ttl;
    9944:	4a43      	ldr	r2, [pc, #268]	; (9a54 <uip_process+0x2e0>)
  BUF->len[0] = (uip_len >> 8);
    9946:	7429      	strb	r1, [r5, #16]
  BUF->ttl = uip_udp_conn->ttl;
    9948:	6812      	ldr	r2, [r2, #0]
  UDPBUF->udplen = HTONS(uip_slen + UIP_UDPH_LEN);
    994a:	3308      	adds	r3, #8
  BUF->ttl = uip_udp_conn->ttl;
    994c:	7a11      	ldrb	r1, [r2, #8]
    994e:	75a9      	strb	r1, [r5, #22]
  UDPBUF->udplen = HTONS(uip_slen + UIP_UDPH_LEN);
    9950:	ba5b      	rev16	r3, r3
  BUF->proto = UIP_PROTO_UDP;
    9952:	2111      	movs	r1, #17
    9954:	75e9      	strb	r1, [r5, #23]
  UDPBUF->udplen = HTONS(uip_slen + UIP_UDPH_LEN);
    9956:	84eb      	strh	r3, [r5, #38]	; 0x26
  UDPBUF->udpchksum = 0;
    9958:	2300      	movs	r3, #0
    995a:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
    995e:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
  BUF->srcport  = uip_udp_conn->lport;
    9962:	8893      	ldrh	r3, [r2, #4]
    9964:	846b      	strh	r3, [r5, #34]	; 0x22
  BUF->destport = uip_udp_conn->rport;
    9966:	88d3      	ldrh	r3, [r2, #6]
    9968:	84ab      	strh	r3, [r5, #36]	; 0x24
  uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
    996a:	4b3c      	ldr	r3, [pc, #240]	; (9a5c <uip_process+0x2e8>)
    996c:	8819      	ldrh	r1, [r3, #0]
    996e:	885b      	ldrh	r3, [r3, #2]
    9970:	8369      	strh	r1, [r5, #26]
    9972:	83ab      	strh	r3, [r5, #28]
  uip_ipaddr_copy(BUF->destipaddr, uip_udp_conn->ripaddr);
    9974:	8813      	ldrh	r3, [r2, #0]
    9976:	83eb      	strh	r3, [r5, #30]
    9978:	8853      	ldrh	r3, [r2, #2]
    997a:	842b      	strh	r3, [r5, #32]
  uip_appdata = &uip_buf[UIP_LLH_LEN + UIP_IPTCPH_LEN];
    997c:	4b2c      	ldr	r3, [pc, #176]	; (9a30 <uip_process+0x2bc>)
    997e:	f105 0236 	add.w	r2, r5, #54	; 0x36
    9982:	601a      	str	r2, [r3, #0]
  UDPBUF->udpchksum = ~(uip_udpchksum());
    9984:	4b36      	ldr	r3, [pc, #216]	; (9a60 <uip_process+0x2ec>)
    9986:	4798      	blx	r3
    9988:	43c0      	mvns	r0, r0
    998a:	b280      	uxth	r0, r0
  if(UDPBUF->udpchksum == 0) {
    998c:	2800      	cmp	r0, #0
    998e:	f000 8151 	beq.w	9c34 <uip_process+0x4c0>
  UDPBUF->udpchksum = ~(uip_udpchksum());
    9992:	8528      	strh	r0, [r5, #40]	; 0x28
  BUF->vhl = 0x45;
    9994:	4d2e      	ldr	r5, [pc, #184]	; (9a50 <uip_process+0x2dc>)
  ++ipid;
    9996:	492c      	ldr	r1, [pc, #176]	; (9a48 <uip_process+0x2d4>)
  BUF->ipchksum = ~(uip_ipchksum());
    9998:	4e32      	ldr	r6, [pc, #200]	; (9a64 <uip_process+0x2f0>)
  BUF->vhl = 0x45;
    999a:	2345      	movs	r3, #69	; 0x45
    999c:	73ab      	strb	r3, [r5, #14]
  ++ipid;
    999e:	880b      	ldrh	r3, [r1, #0]
    99a0:	3301      	adds	r3, #1
    99a2:	b29b      	uxth	r3, r3
  BUF->tos = 0;
    99a4:	2200      	movs	r2, #0
  ++ipid;
    99a6:	800b      	strh	r3, [r1, #0]
  BUF->ipid[0] = ipid >> 8;
    99a8:	0a19      	lsrs	r1, r3, #8
  BUF->tos = 0;
    99aa:	73ea      	strb	r2, [r5, #15]
  BUF->ipoffset[0] = BUF->ipoffset[1] = 0;
    99ac:	756a      	strb	r2, [r5, #21]
    99ae:	752a      	strb	r2, [r5, #20]
  BUF->ipchksum = 0;
    99b0:	762a      	strb	r2, [r5, #24]
    99b2:	766a      	strb	r2, [r5, #25]
  BUF->ipid[0] = ipid >> 8;
    99b4:	74a9      	strb	r1, [r5, #18]
  BUF->ipid[1] = ipid & 0xff;
    99b6:	74eb      	strb	r3, [r5, #19]
  BUF->ipchksum = ~(uip_ipchksum());
    99b8:	47b0      	blx	r6
    99ba:	43c0      	mvns	r0, r0
    99bc:	8328      	strh	r0, [r5, #24]
  DEBUG_PRINTF("uip ip_send_nolen: chkecum 0x%04x\n", uip_ipchksum());
    99be:	47b0      	blx	r6
    99c0:	4b29      	ldr	r3, [pc, #164]	; (9a68 <uip_process+0x2f4>)
    99c2:	4601      	mov	r1, r0
    99c4:	4829      	ldr	r0, [pc, #164]	; (9a6c <uip_process+0x2f8>)
    99c6:	4798      	blx	r3
  UIP_STAT(++uip_stat.tcp.sent);
    99c8:	4a20      	ldr	r2, [pc, #128]	; (9a4c <uip_process+0x2d8>)
    99ca:	8bd3      	ldrh	r3, [r2, #30]
    99cc:	3301      	adds	r3, #1
    99ce:	83d3      	strh	r3, [r2, #30]
    99d0:	e0c5      	b.n	9b5e <uip_process+0x3ea>
  UIP_STAT(++uip_stat.ip.recv);
    99d2:	4b1e      	ldr	r3, [pc, #120]	; (9a4c <uip_process+0x2d8>)
    99d4:	885a      	ldrh	r2, [r3, #2]
  if(BUF->vhl != 0x45)  { /* IP version and header length. */
    99d6:	3f36      	subs	r7, #54	; 0x36
  UIP_STAT(++uip_stat.ip.recv);
    99d8:	3201      	adds	r2, #1
    99da:	805a      	strh	r2, [r3, #2]
  if(BUF->vhl != 0x45)  { /* IP version and header length. */
    99dc:	7bba      	ldrb	r2, [r7, #14]
    99de:	2a45      	cmp	r2, #69	; 0x45
    99e0:	4699      	mov	r9, r3
    99e2:	d009      	beq.n	99f8 <uip_process+0x284>
    UIP_STAT(++uip_stat.ip.drop);
    99e4:	881a      	ldrh	r2, [r3, #0]
    UIP_LOG("ip: invalid version or header length.");
    99e6:	4822      	ldr	r0, [pc, #136]	; (9a70 <uip_process+0x2fc>)
    UIP_STAT(++uip_stat.ip.drop);
    99e8:	3201      	adds	r2, #1
    99ea:	801a      	strh	r2, [r3, #0]
    UIP_STAT(++uip_stat.ip.vhlerr);
    99ec:	88da      	ldrh	r2, [r3, #6]
    99ee:	3201      	adds	r2, #1
    99f0:	80da      	strh	r2, [r3, #6]
    UIP_LOG("ip: packet shorter than reported in IP header.");
    99f2:	4b20      	ldr	r3, [pc, #128]	; (9a74 <uip_process+0x300>)
    99f4:	4798      	blx	r3
    goto drop;
    99f6:	e716      	b.n	9826 <uip_process+0xb2>
  if((BUF->len[0] << 8) + BUF->len[1] <= uip_len) {
    99f8:	7c3a      	ldrb	r2, [r7, #16]
    99fa:	7c7b      	ldrb	r3, [r7, #17]
    99fc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    9a00:	8822      	ldrh	r2, [r4, #0]
    9a02:	4293      	cmp	r3, r2
    9a04:	dc0f      	bgt.n	9a26 <uip_process+0x2b2>
    uip_len = (BUF->len[0] << 8) + BUF->len[1];
    9a06:	8023      	strh	r3, [r4, #0]
  if((BUF->ipoffset[0] & 0x3f) != 0 ||
    9a08:	7d3b      	ldrb	r3, [r7, #20]
    9a0a:	0699      	lsls	r1, r3, #26
    9a0c:	d03a      	beq.n	9a84 <uip_process+0x310>
    UIP_STAT(++uip_stat.ip.drop);
    9a0e:	f8b9 3000 	ldrh.w	r3, [r9]
    UIP_LOG("ip: fragment dropped.");
    9a12:	4819      	ldr	r0, [pc, #100]	; (9a78 <uip_process+0x304>)
    UIP_STAT(++uip_stat.ip.drop);
    9a14:	3301      	adds	r3, #1
    9a16:	f8a9 3000 	strh.w	r3, [r9]
    UIP_STAT(++uip_stat.ip.fragerr);
    9a1a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
    9a1e:	3301      	adds	r3, #1
    9a20:	f8a9 300c 	strh.w	r3, [r9, #12]
    9a24:	e7e5      	b.n	99f2 <uip_process+0x27e>
    UIP_LOG("ip: packet shorter than reported in IP header.");
    9a26:	4815      	ldr	r0, [pc, #84]	; (9a7c <uip_process+0x308>)
    9a28:	e7e3      	b.n	99f2 <uip_process+0x27e>
    9a2a:	bf00      	nop
    9a2c:	20008550 	.word	0x20008550
    9a30:	20008564 	.word	0x20008564
    9a34:	20008554 	.word	0x20008554
    9a38:	20008658 	.word	0x20008658
    9a3c:	2000855c 	.word	0x2000855c
    9a40:	0000b275 	.word	0x0000b275
    9a44:	20008cc8 	.word	0x20008cc8
    9a48:	200072b6 	.word	0x200072b6
    9a4c:	200085e6 	.word	0x200085e6
    9a50:	20008622 	.word	0x20008622
    9a54:	20008560 	.word	0x20008560
    9a58:	00007189 	.word	0x00007189
    9a5c:	2000861e 	.word	0x2000861e
    9a60:	00009675 	.word	0x00009675
    9a64:	00009635 	.word	0x00009635
    9a68:	00000395 	.word	0x00000395
    9a6c:	0000f294 	.word	0x0000f294
    9a70:	0000f159 	.word	0x0000f159
    9a74:	0000b285 	.word	0x0000b285
    9a78:	0000f1ae 	.word	0x0000f1ae
    9a7c:	0000f17f 	.word	0x0000f17f
    9a80:	20008568 	.word	0x20008568
     BUF->ipoffset[1] != 0) {
    9a84:	f897 b015 	ldrb.w	fp, [r7, #21]
  if((BUF->ipoffset[0] & 0x3f) != 0 ||
    9a88:	f1bb 0f00 	cmp.w	fp, #0
    9a8c:	d1bf      	bne.n	9a0e <uip_process+0x29a>
  if(uip_ipaddr_cmp(uip_hostaddr, all_zeroes_addr)) {
    9a8e:	4bba      	ldr	r3, [pc, #744]	; (9d78 <uip_process+0x604>)
    9a90:	881a      	ldrh	r2, [r3, #0]
    9a92:	b90a      	cbnz	r2, 9a98 <uip_process+0x324>
    9a94:	8859      	ldrh	r1, [r3, #2]
    9a96:	b161      	cbz	r1, 9ab2 <uip_process+0x33e>
    if(!uip_ipaddr_cmp(BUF->destipaddr, uip_hostaddr)) {
    9a98:	8bf9      	ldrh	r1, [r7, #30]
    9a9a:	4291      	cmp	r1, r2
    9a9c:	d103      	bne.n	9aa6 <uip_process+0x332>
    9a9e:	8c39      	ldrh	r1, [r7, #32]
    9aa0:	885a      	ldrh	r2, [r3, #2]
    9aa2:	4291      	cmp	r1, r2
    9aa4:	d005      	beq.n	9ab2 <uip_process+0x33e>
      UIP_STAT(++uip_stat.ip.drop);
    9aa6:	f8b9 3000 	ldrh.w	r3, [r9]
    9aaa:	3301      	adds	r3, #1
    9aac:	f8a9 3000 	strh.w	r3, [r9]
      goto drop;
    9ab0:	e6b9      	b.n	9826 <uip_process+0xb2>
  if(uip_ipchksum() != 0xffff) { /* Compute and check the IP header
    9ab2:	4ab2      	ldr	r2, [pc, #712]	; (9d7c <uip_process+0x608>)
    9ab4:	9301      	str	r3, [sp, #4]
    9ab6:	4790      	blx	r2
    9ab8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    9abc:	4290      	cmp	r0, r2
    9abe:	4680      	mov	r8, r0
    9ac0:	9b01      	ldr	r3, [sp, #4]
    9ac2:	d00b      	beq.n	9adc <uip_process+0x368>
    UIP_STAT(++uip_stat.ip.drop);
    9ac4:	f8b9 3000 	ldrh.w	r3, [r9]
    UIP_LOG("ip: bad checksum.");
    9ac8:	48ad      	ldr	r0, [pc, #692]	; (9d80 <uip_process+0x60c>)
    UIP_STAT(++uip_stat.ip.drop);
    9aca:	3301      	adds	r3, #1
    9acc:	f8a9 3000 	strh.w	r3, [r9]
    UIP_STAT(++uip_stat.ip.chkerr);
    9ad0:	f8b9 300e 	ldrh.w	r3, [r9, #14]
    9ad4:	3301      	adds	r3, #1
    9ad6:	f8a9 300e 	strh.w	r3, [r9, #14]
    9ada:	e78a      	b.n	99f2 <uip_process+0x27e>
  if(BUF->proto == UIP_PROTO_TCP) { /* Check for TCP packet. If so,
    9adc:	7dfa      	ldrb	r2, [r7, #23]
    9ade:	2a06      	cmp	r2, #6
    9ae0:	f000 80af 	beq.w	9c42 <uip_process+0x4ce>
  if(BUF->proto == UIP_PROTO_UDP) {
    9ae4:	2a11      	cmp	r2, #17
    9ae6:	d04d      	beq.n	9b84 <uip_process+0x410>
  if(BUF->proto != UIP_PROTO_ICMP) { /* We only allow ICMP packets from
    9ae8:	2a01      	cmp	r2, #1
    9aea:	d00b      	beq.n	9b04 <uip_process+0x390>
    UIP_STAT(++uip_stat.ip.drop);
    9aec:	f8b9 3000 	ldrh.w	r3, [r9]
    UIP_LOG("ip: neither tcp nor icmp.");
    9af0:	48a4      	ldr	r0, [pc, #656]	; (9d84 <uip_process+0x610>)
    UIP_STAT(++uip_stat.ip.drop);
    9af2:	3301      	adds	r3, #1
    9af4:	f8a9 3000 	strh.w	r3, [r9]
    UIP_STAT(++uip_stat.ip.protoerr);
    9af8:	f8b9 3010 	ldrh.w	r3, [r9, #16]
    9afc:	3301      	adds	r3, #1
    9afe:	f8a9 3010 	strh.w	r3, [r9, #16]
    9b02:	e776      	b.n	99f2 <uip_process+0x27e>
  UIP_STAT(++uip_stat.icmp.recv);
    9b04:	f8b9 2014 	ldrh.w	r2, [r9, #20]
    9b08:	3201      	adds	r2, #1
    9b0a:	f8a9 2014 	strh.w	r2, [r9, #20]
  if(ICMPBUF->type != ICMP_ECHO) {
    9b0e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
    9b12:	2a08      	cmp	r2, #8
    9b14:	d00b      	beq.n	9b2e <uip_process+0x3ba>
    UIP_STAT(++uip_stat.icmp.drop);
    9b16:	f8b9 3012 	ldrh.w	r3, [r9, #18]
    UIP_LOG("icmp: not icmp echo.");
    9b1a:	489b      	ldr	r0, [pc, #620]	; (9d88 <uip_process+0x614>)
    UIP_STAT(++uip_stat.icmp.drop);
    9b1c:	3301      	adds	r3, #1
    9b1e:	f8a9 3012 	strh.w	r3, [r9, #18]
    UIP_STAT(++uip_stat.icmp.typeerr);
    9b22:	f8b9 3018 	ldrh.w	r3, [r9, #24]
    9b26:	3301      	adds	r3, #1
    9b28:	f8a9 3018 	strh.w	r3, [r9, #24]
    9b2c:	e761      	b.n	99f2 <uip_process+0x27e>
  ICMPBUF->type = ICMP_ECHO_REPLY;
    9b2e:	2200      	movs	r2, #0
    9b30:	f887 2022 	strb.w	r2, [r7, #34]	; 0x22
  if(ICMPBUF->icmpchksum >= HTONS(0xffff - (ICMP_ECHO << 8))) {
    9b34:	8cba      	ldrh	r2, [r7, #36]	; 0x24
    9b36:	f64f 71f6 	movw	r1, #65526	; 0xfff6
    9b3a:	428a      	cmp	r2, r1
    ICMPBUF->icmpchksum += HTONS(ICMP_ECHO << 8) + 1;
    9b3c:	bf8c      	ite	hi
    9b3e:	3209      	addhi	r2, #9
    ICMPBUF->icmpchksum += HTONS(ICMP_ECHO << 8);
    9b40:	3208      	addls	r2, #8
    9b42:	84ba      	strh	r2, [r7, #36]	; 0x24
  uip_ipaddr_copy(BUF->destipaddr, BUF->srcipaddr);
    9b44:	8b7a      	ldrh	r2, [r7, #26]
    9b46:	83fa      	strh	r2, [r7, #30]
    9b48:	8bba      	ldrh	r2, [r7, #28]
    9b4a:	843a      	strh	r2, [r7, #32]
  uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
    9b4c:	881a      	ldrh	r2, [r3, #0]
    9b4e:	885b      	ldrh	r3, [r3, #2]
    9b50:	83bb      	strh	r3, [r7, #28]
  UIP_STAT(++uip_stat.icmp.sent);
    9b52:	f8b9 3016 	ldrh.w	r3, [r9, #22]
  uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
    9b56:	837a      	strh	r2, [r7, #26]
  UIP_STAT(++uip_stat.icmp.sent);
    9b58:	3301      	adds	r3, #1
    9b5a:	f8a9 3016 	strh.w	r3, [r9, #22]
  DEBUG_PRINTF("Sending packet with length %d (%d)\n", uip_len,
    9b5e:	4b8b      	ldr	r3, [pc, #556]	; (9d8c <uip_process+0x618>)
    9b60:	8821      	ldrh	r1, [r4, #0]
    9b62:	7c1a      	ldrb	r2, [r3, #16]
    9b64:	7c5b      	ldrb	r3, [r3, #17]
    9b66:	488a      	ldr	r0, [pc, #552]	; (9d90 <uip_process+0x61c>)
    9b68:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
    9b6c:	4b89      	ldr	r3, [pc, #548]	; (9d94 <uip_process+0x620>)
    9b6e:	4798      	blx	r3
  UIP_STAT(++uip_stat.ip.sent);
    9b70:	4a89      	ldr	r2, [pc, #548]	; (9d98 <uip_process+0x624>)
    9b72:	8893      	ldrh	r3, [r2, #4]
    9b74:	3301      	adds	r3, #1
    9b76:	8093      	strh	r3, [r2, #4]
  uip_flags = 0;
    9b78:	4b88      	ldr	r3, [pc, #544]	; (9d9c <uip_process+0x628>)
    9b7a:	2200      	movs	r2, #0
    9b7c:	701a      	strb	r2, [r3, #0]
}
    9b7e:	b003      	add	sp, #12
    9b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uip_len = uip_len - UIP_IPUDPH_LEN;
    9b84:	8823      	ldrh	r3, [r4, #0]
    9b86:	3b1c      	subs	r3, #28
    9b88:	8023      	strh	r3, [r4, #0]
  uip_appdata = &uip_buf[UIP_LLH_LEN + UIP_IPUDPH_LEN];
    9b8a:	4b85      	ldr	r3, [pc, #532]	; (9da0 <uip_process+0x62c>)
    9b8c:	f8ca 3000 	str.w	r3, [sl]
  if(UDPBUF->udpchksum != 0 && uip_udpchksum() != 0xffff) {
    9b90:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
    9b92:	9301      	str	r3, [sp, #4]
    9b94:	b17a      	cbz	r2, 9bb6 <uip_process+0x442>
    9b96:	4b83      	ldr	r3, [pc, #524]	; (9da4 <uip_process+0x630>)
    9b98:	4798      	blx	r3
    9b9a:	4540      	cmp	r0, r8
    9b9c:	d00b      	beq.n	9bb6 <uip_process+0x442>
    UIP_STAT(++uip_stat.udp.drop);
    9b9e:	f8b9 302c 	ldrh.w	r3, [r9, #44]	; 0x2c
    UIP_LOG("udp: bad checksum.");
    9ba2:	4881      	ldr	r0, [pc, #516]	; (9da8 <uip_process+0x634>)
    UIP_STAT(++uip_stat.udp.drop);
    9ba4:	3301      	adds	r3, #1
    9ba6:	f8a9 302c 	strh.w	r3, [r9, #44]	; 0x2c
    UIP_STAT(++uip_stat.udp.chkerr);
    9baa:	f8b9 3032 	ldrh.w	r3, [r9, #50]	; 0x32
    9bae:	3301      	adds	r3, #1
    9bb0:	f8a9 3032 	strh.w	r3, [r9, #50]	; 0x32
    9bb4:	e71d      	b.n	99f2 <uip_process+0x27e>
  for(uip_udp_conn = &uip_udp_conns[0];
    9bb6:	4a7d      	ldr	r2, [pc, #500]	; (9dac <uip_process+0x638>)
    9bb8:	4b7d      	ldr	r3, [pc, #500]	; (9db0 <uip_process+0x63c>)
    9bba:	6013      	str	r3, [r2, #0]
       UDPBUF->destport == uip_udp_conn->lport &&
    9bbc:	f8b7 c024 	ldrh.w	ip, [r7, #36]	; 0x24
        UDPBUF->srcport == uip_udp_conn->rport) &&
    9bc0:	f8b7 8022 	ldrh.w	r8, [r7, #34]	; 0x22
	uip_ipaddr_cmp(BUF->srcipaddr, uip_udp_conn->ripaddr))) {
    9bc4:	f8b7 901a 	ldrh.w	r9, [r7, #26]
    9bc8:	f8b7 a01c 	ldrh.w	sl, [r7, #28]
  for(uip_udp_conn = &uip_udp_conns[0];
    9bcc:	2100      	movs	r1, #0
    9bce:	f503 7e7a 	add.w	lr, r3, #1000	; 0x3e8
       (uip_ipaddr_cmp(uip_udp_conn->ripaddr, all_zeroes_addr) ||
    9bd2:	f64f 77ff 	movw	r7, #65535	; 0xffff
  for(uip_udp_conn = &uip_udp_conns[0];
    9bd6:	4573      	cmp	r3, lr
    9bd8:	d303      	bcc.n	9be2 <uip_process+0x46e>
    9bda:	b101      	cbz	r1, 9bde <uip_process+0x46a>
    9bdc:	6013      	str	r3, [r2, #0]
  UIP_LOG("udp: no matching connection found");
    9bde:	4875      	ldr	r0, [pc, #468]	; (9db4 <uip_process+0x640>)
    9be0:	e707      	b.n	99f2 <uip_process+0x27e>
    if(uip_udp_conn->lport != 0 &&
    9be2:	8898      	ldrh	r0, [r3, #4]
    9be4:	b318      	cbz	r0, 9c2e <uip_process+0x4ba>
    9be6:	4560      	cmp	r0, ip
    9be8:	d121      	bne.n	9c2e <uip_process+0x4ba>
       (uip_udp_conn->rport == 0 ||
    9bea:	88d8      	ldrh	r0, [r3, #6]
       UDPBUF->destport == uip_udp_conn->lport &&
    9bec:	b108      	cbz	r0, 9bf2 <uip_process+0x47e>
       (uip_udp_conn->rport == 0 ||
    9bee:	4540      	cmp	r0, r8
    9bf0:	d11d      	bne.n	9c2e <uip_process+0x4ba>
       (uip_ipaddr_cmp(uip_udp_conn->ripaddr, all_zeroes_addr) ||
    9bf2:	8818      	ldrh	r0, [r3, #0]
        UDPBUF->srcport == uip_udp_conn->rport) &&
    9bf4:	b980      	cbnz	r0, 9c18 <uip_process+0x4a4>
       (uip_ipaddr_cmp(uip_udp_conn->ripaddr, all_zeroes_addr) ||
    9bf6:	f8b3 b002 	ldrh.w	fp, [r3, #2]
    9bfa:	f1bb 0f00 	cmp.w	fp, #0
    9bfe:	d111      	bne.n	9c24 <uip_process+0x4b0>
    9c00:	b101      	cbz	r1, 9c04 <uip_process+0x490>
    9c02:	6013      	str	r3, [r2, #0]
  uip_flags = UIP_NEWDATA;
    9c04:	4a65      	ldr	r2, [pc, #404]	; (9d9c <uip_process+0x628>)
    9c06:	2102      	movs	r1, #2
    9c08:	7011      	strb	r1, [r2, #0]
  uip_sappdata = uip_appdata = &uip_buf[UIP_LLH_LEN + UIP_IPUDPH_LEN];
    9c0a:	9a01      	ldr	r2, [sp, #4]
    9c0c:	6032      	str	r2, [r6, #0]
  uip_slen = 0;
    9c0e:	4a6a      	ldr	r2, [pc, #424]	; (9db8 <uip_process+0x644>)
  uip_conn = NULL;
    9c10:	2300      	movs	r3, #0
    9c12:	602b      	str	r3, [r5, #0]
  uip_slen = 0;
    9c14:	8013      	strh	r3, [r2, #0]
    9c16:	e687      	b.n	9928 <uip_process+0x1b4>
       (uip_ipaddr_cmp(uip_udp_conn->ripaddr, all_zeroes_addr) ||
    9c18:	42b8      	cmp	r0, r7
    9c1a:	d103      	bne.n	9c24 <uip_process+0x4b0>
	uip_ipaddr_cmp(uip_udp_conn->ripaddr, all_ones_addr) ||
    9c1c:	f8b3 b002 	ldrh.w	fp, [r3, #2]
    9c20:	45bb      	cmp	fp, r7
    9c22:	d0ed      	beq.n	9c00 <uip_process+0x48c>
    9c24:	4548      	cmp	r0, r9
    9c26:	d102      	bne.n	9c2e <uip_process+0x4ba>
	uip_ipaddr_cmp(BUF->srcipaddr, uip_udp_conn->ripaddr))) {
    9c28:	8858      	ldrh	r0, [r3, #2]
    9c2a:	4550      	cmp	r0, sl
    9c2c:	d0e8      	beq.n	9c00 <uip_process+0x48c>
    9c2e:	3364      	adds	r3, #100	; 0x64
    9c30:	2101      	movs	r1, #1
    9c32:	e7d0      	b.n	9bd6 <uip_process+0x462>
    UDPBUF->udpchksum = 0xffff;
    9c34:	f04f 33ff 	mov.w	r3, #4294967295
    9c38:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
    9c3c:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
    9c40:	e6a8      	b.n	9994 <uip_process+0x220>
  UIP_STAT(++uip_stat.tcp.recv);
    9c42:	f8b9 201c 	ldrh.w	r2, [r9, #28]
    9c46:	9301      	str	r3, [sp, #4]
    9c48:	3201      	adds	r2, #1
    9c4a:	f8a9 201c 	strh.w	r2, [r9, #28]
  if(uip_tcpchksum() != 0xffff) {   /* Compute and check the TCP
    9c4e:	4a5b      	ldr	r2, [pc, #364]	; (9dbc <uip_process+0x648>)
    9c50:	4790      	blx	r2
    9c52:	4540      	cmp	r0, r8
    9c54:	f040 80bc 	bne.w	9dd0 <uip_process+0x65c>
    if(uip_connr->tcpstateflags != UIP_CLOSED &&
    9c58:	4859      	ldr	r0, [pc, #356]	; (9dc0 <uip_process+0x64c>)
    9c5a:	9b01      	ldr	r3, [sp, #4]
    9c5c:	7e42      	ldrb	r2, [r0, #25]
    9c5e:	4680      	mov	r8, r0
    9c60:	b1a2      	cbz	r2, 9c8c <uip_process+0x518>
    9c62:	f8b7 e024 	ldrh.w	lr, [r7, #36]	; 0x24
    9c66:	8881      	ldrh	r1, [r0, #4]
    9c68:	458e      	cmp	lr, r1
    9c6a:	d10f      	bne.n	9c8c <uip_process+0x518>
       BUF->destport == uip_connr->lport &&
    9c6c:	f8b7 e022 	ldrh.w	lr, [r7, #34]	; 0x22
    9c70:	88c1      	ldrh	r1, [r0, #6]
    9c72:	458e      	cmp	lr, r1
    9c74:	d10a      	bne.n	9c8c <uip_process+0x518>
       BUF->srcport == uip_connr->rport &&
    9c76:	f8b7 e01a 	ldrh.w	lr, [r7, #26]
    9c7a:	8801      	ldrh	r1, [r0, #0]
    9c7c:	458e      	cmp	lr, r1
    9c7e:	d105      	bne.n	9c8c <uip_process+0x518>
       uip_ipaddr_cmp(BUF->srcipaddr, uip_connr->ripaddr)) {
    9c80:	f8b7 e01c 	ldrh.w	lr, [r7, #28]
    9c84:	8841      	ldrh	r1, [r0, #2]
    9c86:	458e      	cmp	lr, r1
    9c88:	f000 81af 	beq.w	9fea <uip_process+0x876>
  if((BUF->flags & TCP_CTL) != TCP_SYN) {
    9c8c:	f897 c02f 	ldrb.w	ip, [r7, #47]	; 0x2f
    9c90:	f00c 013f 	and.w	r1, ip, #63	; 0x3f
    9c94:	2902      	cmp	r1, #2
    9c96:	f040 80ae 	bne.w	9df6 <uip_process+0x682>
    if(tmp16 == uip_listenports[c])
    9c9a:	4e4a      	ldr	r6, [pc, #296]	; (9dc4 <uip_process+0x650>)
  tmp16 = BUF->destport;
    9c9c:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
    if(tmp16 == uip_listenports[c])
    9c9e:	8836      	ldrh	r6, [r6, #0]
  tmp16 = BUF->destport;
    9ca0:	4849      	ldr	r0, [pc, #292]	; (9dc8 <uip_process+0x654>)
  for(c = 0; c < UIP_LISTENPORTS; ++c) {
    9ca2:	f04f 0800 	mov.w	r8, #0
    if(tmp16 == uip_listenports[c])
    9ca6:	42b1      	cmp	r1, r6
  tmp16 = BUF->destport;
    9ca8:	468e      	mov	lr, r1
    9caa:	8141      	strh	r1, [r0, #10]
  for(c = 0; c < UIP_LISTENPORTS; ++c) {
    9cac:	f880 8002 	strb.w	r8, [r0, #2]
    9cb0:	4606      	mov	r6, r0
    if(tmp16 == uip_listenports[c])
    9cb2:	f040 8099 	bne.w	9de8 <uip_process+0x674>
    if(uip_conns[c].tcpstateflags == UIP_CLOSED) {
    9cb6:	2a00      	cmp	r2, #0
    9cb8:	f040 8102 	bne.w	9ec0 <uip_process+0x74c>
      uip_connr = &uip_conns[c];
    9cbc:	f8df 8100 	ldr.w	r8, [pc, #256]	; 9dc0 <uip_process+0x64c>
  uip_conn = uip_connr;
    9cc0:	f8c5 8000 	str.w	r8, [r5]
  uip_connr->rto = uip_connr->timer = UIP_RTO;
    9cc4:	2303      	movs	r3, #3
    9cc6:	f888 301a 	strb.w	r3, [r8, #26]
    9cca:	f888 3018 	strb.w	r3, [r8, #24]
  uip_connr->sa = 0;
    9cce:	2500      	movs	r5, #0
  uip_connr->sv = 4;
    9cd0:	2304      	movs	r3, #4
  uip_connr->sa = 0;
    9cd2:	f888 5016 	strb.w	r5, [r8, #22]
  uip_connr->sv = 4;
    9cd6:	f888 3017 	strb.w	r3, [r8, #23]
  uip_connr->nrtx = 0;
    9cda:	f888 501b 	strb.w	r5, [r8, #27]
  uip_connr->lport = BUF->destport;
    9cde:	f8a8 e004 	strh.w	lr, [r8, #4]
  uip_connr->rport = BUF->srcport;
    9ce2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    9ce6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
    9cea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    9cee:	f8a8 3006 	strh.w	r3, [r8, #6]
  uip_ipaddr_copy(uip_connr->ripaddr, BUF->srcipaddr);
    9cf2:	8b7b      	ldrh	r3, [r7, #26]
    9cf4:	f8a8 3000 	strh.w	r3, [r8]
    9cf8:	8bbb      	ldrh	r3, [r7, #28]
    9cfa:	f8a8 3002 	strh.w	r3, [r8, #2]
  uip_connr->snd_nxt[0] = iss[0];
    9cfe:	79b3      	ldrb	r3, [r6, #6]
    9d00:	f888 300c 	strb.w	r3, [r8, #12]
  uip_connr->snd_nxt[1] = iss[1];
    9d04:	79f3      	ldrb	r3, [r6, #7]
    9d06:	f888 300d 	strb.w	r3, [r8, #13]
  uip_connr->snd_nxt[2] = iss[2];
    9d0a:	7a33      	ldrb	r3, [r6, #8]
    9d0c:	f888 300e 	strb.w	r3, [r8, #14]
  uip_connr->snd_nxt[3] = iss[3];
    9d10:	7a73      	ldrb	r3, [r6, #9]
    9d12:	f888 300f 	strb.w	r3, [r8, #15]
  uip_connr->rcv_nxt[3] = BUF->seqno[3];
    9d16:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
    9d1a:	f888 300b 	strb.w	r3, [r8, #11]
  uip_connr->rcv_nxt[2] = BUF->seqno[2];
    9d1e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    9d22:	f888 300a 	strb.w	r3, [r8, #10]
  uip_connr->rcv_nxt[1] = BUF->seqno[1];
    9d26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    9d2a:	f888 3009 	strb.w	r3, [r8, #9]
  uip_connr->tcpstateflags = UIP_SYN_RCVD;
    9d2e:	2001      	movs	r0, #1
  uip_connr->rcv_nxt[0] = BUF->seqno[0];
    9d30:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    9d34:	f888 3008 	strb.w	r3, [r8, #8]
  uip_connr->tcpstateflags = UIP_SYN_RCVD;
    9d38:	f888 0019 	strb.w	r0, [r8, #25]
  uip_add_rcv_nxt(1);
    9d3c:	4b23      	ldr	r3, [pc, #140]	; (9dcc <uip_process+0x658>)
  uip_connr->len = 1;
    9d3e:	f8a8 0010 	strh.w	r0, [r8, #16]
  uip_add_rcv_nxt(1);
    9d42:	4798      	blx	r3
  if((BUF->tcpoffset & 0xf0) > 0x50) {
    9d44:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
    9d48:	f002 03f0 	and.w	r3, r2, #240	; 0xf0
    9d4c:	2b50      	cmp	r3, #80	; 0x50
    9d4e:	f240 80ea 	bls.w	9f26 <uip_process+0x7b2>
    for(c = 0; c < ((BUF->tcpoffset >> 4) - 5) << 2 ;) {
    9d52:	0912      	lsrs	r2, r2, #4
    9d54:	3a05      	subs	r2, #5
    9d56:	70b5      	strb	r5, [r6, #2]
    9d58:	0092      	lsls	r2, r2, #2
    9d5a:	4593      	cmp	fp, r2
    9d5c:	da06      	bge.n	9d6c <uip_process+0x5f8>
      opt = uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + c];
    9d5e:	eb07 000b 	add.w	r0, r7, fp
    9d62:	f890 1036 	ldrb.w	r1, [r0, #54]	; 0x36
      if(opt == TCP_OPT_END) {
    9d66:	2900      	cmp	r1, #0
    9d68:	f040 80bb 	bne.w	9ee2 <uip_process+0x76e>
    9d6c:	2d00      	cmp	r5, #0
    9d6e:	f000 80da 	beq.w	9f26 <uip_process+0x7b2>
    9d72:	f886 b002 	strb.w	fp, [r6, #2]
    9d76:	e0d6      	b.n	9f26 <uip_process+0x7b2>
    9d78:	2000861e 	.word	0x2000861e
    9d7c:	00009635 	.word	0x00009635
    9d80:	0000f1c4 	.word	0x0000f1c4
    9d84:	0000f1d6 	.word	0x0000f1d6
    9d88:	0000f1f0 	.word	0x0000f1f0
    9d8c:	20008622 	.word	0x20008622
    9d90:	0000f2b7 	.word	0x0000f2b7
    9d94:	00000395 	.word	0x00000395
    9d98:	200085e6 	.word	0x200085e6
    9d9c:	2000855c 	.word	0x2000855c
    9da0:	2000864c 	.word	0x2000864c
    9da4:	00009675 	.word	0x00009675
    9da8:	0000f205 	.word	0x0000f205
    9dac:	20008560 	.word	0x20008560
    9db0:	20008ccc 	.word	0x20008ccc
    9db4:	0000f218 	.word	0x0000f218
    9db8:	20008cc8 	.word	0x20008cc8
    9dbc:	00009669 	.word	0x00009669
    9dc0:	2000856c 	.word	0x2000856c
    9dc4:	200085e0 	.word	0x200085e0
    9dc8:	200072b6 	.word	0x200072b6
    9dcc:	00009601 	.word	0x00009601
    UIP_STAT(++uip_stat.tcp.drop);
    9dd0:	f8b9 301a 	ldrh.w	r3, [r9, #26]
    UIP_LOG("tcp: bad checksum.");
    9dd4:	4890      	ldr	r0, [pc, #576]	; (a018 <uip_process+0x8a4>)
    UIP_STAT(++uip_stat.tcp.drop);
    9dd6:	3301      	adds	r3, #1
    9dd8:	f8a9 301a 	strh.w	r3, [r9, #26]
    UIP_STAT(++uip_stat.tcp.chkerr);
    9ddc:	f8b9 3020 	ldrh.w	r3, [r9, #32]
    9de0:	3301      	adds	r3, #1
    9de2:	f8a9 3020 	strh.w	r3, [r9, #32]
    9de6:	e604      	b.n	99f2 <uip_process+0x27e>
    9de8:	2201      	movs	r2, #1
    9dea:	7082      	strb	r2, [r0, #2]
  UIP_STAT(++uip_stat.tcp.synrst);
    9dec:	f8b9 202a 	ldrh.w	r2, [r9, #42]	; 0x2a
    9df0:	3201      	adds	r2, #1
    9df2:	f8a9 202a 	strh.w	r2, [r9, #42]	; 0x2a
  if(BUF->flags & TCP_RST) {
    9df6:	f01c 0f04 	tst.w	ip, #4
    9dfa:	f47f ad14 	bne.w	9826 <uip_process+0xb2>
  UIP_STAT(++uip_stat.tcp.rst);
    9dfe:	f8b9 2024 	ldrh.w	r2, [r9, #36]	; 0x24
  c = BUF->seqno[3];
    9e02:	f897 0029 	ldrb.w	r0, [r7, #41]	; 0x29
  BUF->seqno[1] = BUF->ackno[1];
    9e06:	f897 502b 	ldrb.w	r5, [r7, #43]	; 0x2b
  c = BUF->seqno[2];
    9e0a:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
  c = BUF->seqno[0];
    9e0e:	f897 6026 	ldrb.w	r6, [r7, #38]	; 0x26
  BUF->seqno[0] = BUF->ackno[0];
    9e12:	f897 e02a 	ldrb.w	lr, [r7, #42]	; 0x2a
    9e16:	f887 e026 	strb.w	lr, [r7, #38]	; 0x26
  UIP_STAT(++uip_stat.tcp.rst);
    9e1a:	3201      	adds	r2, #1
    9e1c:	f8a9 2024 	strh.w	r2, [r9, #36]	; 0x24
  BUF->flags = TCP_RST | TCP_ACK;
    9e20:	2214      	movs	r2, #20
    9e22:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
  uip_len = UIP_IPTCPH_LEN;
    9e26:	2228      	movs	r2, #40	; 0x28
    9e28:	8022      	strh	r2, [r4, #0]
  BUF->tcpoffset = 5 << 4;
    9e2a:	2250      	movs	r2, #80	; 0x50
    9e2c:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
  BUF->seqno[3] = BUF->ackno[3];
    9e30:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
    9e34:	f887 2029 	strb.w	r2, [r7, #41]	; 0x29
  BUF->seqno[2] = BUF->ackno[2];
    9e38:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
    9e3c:	f887 2028 	strb.w	r2, [r7, #40]	; 0x28
  if(++BUF->ackno[3] == 0) {
    9e40:	3001      	adds	r0, #1
  c = BUF->seqno[1];
    9e42:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
  BUF->seqno[1] = BUF->ackno[1];
    9e46:	f887 5027 	strb.w	r5, [r7, #39]	; 0x27
  c = BUF->seqno[0];
    9e4a:	4d74      	ldr	r5, [pc, #464]	; (a01c <uip_process+0x8a8>)
  BUF->ackno[2] = c;
    9e4c:	f887 102c 	strb.w	r1, [r7, #44]	; 0x2c
  if(++BUF->ackno[3] == 0) {
    9e50:	b2c0      	uxtb	r0, r0
  BUF->ackno[1] = c;
    9e52:	f887 202b 	strb.w	r2, [r7, #43]	; 0x2b
  c = BUF->seqno[0];
    9e56:	70ae      	strb	r6, [r5, #2]
  BUF->ackno[0] = c;
    9e58:	f887 602a 	strb.w	r6, [r7, #42]	; 0x2a
  if(++BUF->ackno[3] == 0) {
    9e5c:	f887 002d 	strb.w	r0, [r7, #45]	; 0x2d
    9e60:	b960      	cbnz	r0, 9e7c <uip_process+0x708>
    if(++BUF->ackno[2] == 0) {
    9e62:	3101      	adds	r1, #1
    9e64:	b2c9      	uxtb	r1, r1
    9e66:	f887 102c 	strb.w	r1, [r7, #44]	; 0x2c
    9e6a:	b939      	cbnz	r1, 9e7c <uip_process+0x708>
      if(++BUF->ackno[1] == 0) {
    9e6c:	3201      	adds	r2, #1
    9e6e:	b2d2      	uxtb	r2, r2
    9e70:	f887 202b 	strb.w	r2, [r7, #43]	; 0x2b
    9e74:	b912      	cbnz	r2, 9e7c <uip_process+0x708>
	++BUF->ackno[0];
    9e76:	1c72      	adds	r2, r6, #1
    9e78:	f887 202a 	strb.w	r2, [r7, #42]	; 0x2a
  tmp16 = BUF->srcport;
    9e7c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
    9e7e:	816a      	strh	r2, [r5, #10]
  BUF->srcport = BUF->destport;
    9e80:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
  BUF->destport = tmp16;
    9e82:	84ba      	strh	r2, [r7, #36]	; 0x24
  uip_ipaddr_copy(BUF->destipaddr, BUF->srcipaddr);
    9e84:	8b7a      	ldrh	r2, [r7, #26]
    9e86:	83fa      	strh	r2, [r7, #30]
    9e88:	8bba      	ldrh	r2, [r7, #28]
    9e8a:	843a      	strh	r2, [r7, #32]
  uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
    9e8c:	881a      	ldrh	r2, [r3, #0]
    9e8e:	885b      	ldrh	r3, [r3, #2]
  BUF->srcport = BUF->destport;
    9e90:	8479      	strh	r1, [r7, #34]	; 0x22
  uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
    9e92:	837a      	strh	r2, [r7, #26]
    9e94:	83bb      	strh	r3, [r7, #28]
  BUF->ttl = UIP_TTL;
    9e96:	4d62      	ldr	r5, [pc, #392]	; (a020 <uip_process+0x8ac>)
    9e98:	2340      	movs	r3, #64	; 0x40
    9e9a:	75ab      	strb	r3, [r5, #22]
  BUF->len[0] = (uip_len >> 8);
    9e9c:	8823      	ldrh	r3, [r4, #0]
  BUF->len[1] = (uip_len & 0xff);
    9e9e:	746b      	strb	r3, [r5, #17]
  BUF->len[0] = (uip_len >> 8);
    9ea0:	0a1a      	lsrs	r2, r3, #8
  BUF->urgp[0] = BUF->urgp[1] = 0;
    9ea2:	2300      	movs	r3, #0
    9ea4:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
    9ea8:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
  BUF->tcpchksum = 0;
    9eac:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
    9eb0:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
  BUF->len[0] = (uip_len >> 8);
    9eb4:	742a      	strb	r2, [r5, #16]
  BUF->tcpchksum = ~(uip_tcpchksum());
    9eb6:	4b5b      	ldr	r3, [pc, #364]	; (a024 <uip_process+0x8b0>)
    9eb8:	4798      	blx	r3
    9eba:	43c0      	mvns	r0, r0
    9ebc:	8668      	strh	r0, [r5, #50]	; 0x32
    9ebe:	e569      	b.n	9994 <uip_process+0x220>
	uip_connr = &uip_conns[c];
    9ec0:	4b59      	ldr	r3, [pc, #356]	; (a028 <uip_process+0x8b4>)
    if(uip_conns[c].tcpstateflags == UIP_TIME_WAIT) {
    9ec2:	2a07      	cmp	r2, #7
	uip_connr = &uip_conns[c];
    9ec4:	bf08      	it	eq
    9ec6:	4698      	moveq	r8, r3
  for(c = 0; c < UIP_CONNS; ++c) {
    9ec8:	2301      	movs	r3, #1
    9eca:	7083      	strb	r3, [r0, #2]
  if(uip_connr == 0) {
    9ecc:	f1b8 0f00 	cmp.w	r8, #0
    9ed0:	f47f aef6 	bne.w	9cc0 <uip_process+0x54c>
    UIP_STAT(++uip_stat.tcp.syndrop);
    9ed4:	f8b9 3028 	ldrh.w	r3, [r9, #40]	; 0x28
    UIP_LOG("tcp: found no unused connections.");
    9ed8:	4854      	ldr	r0, [pc, #336]	; (a02c <uip_process+0x8b8>)
    UIP_STAT(++uip_stat.tcp.syndrop);
    9eda:	3301      	adds	r3, #1
    9edc:	f8a9 3028 	strh.w	r3, [r9, #40]	; 0x28
    9ee0:	e587      	b.n	99f2 <uip_process+0x27e>
      } else if(opt == TCP_OPT_NOOP) {
    9ee2:	2901      	cmp	r1, #1
    9ee4:	d105      	bne.n	9ef2 <uip_process+0x77e>
	++c;
    9ee6:	f10b 0b01 	add.w	fp, fp, #1
	c += uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c];
    9eea:	fa5f fb8b 	uxtb.w	fp, fp
    9eee:	2501      	movs	r5, #1
    9ef0:	e733      	b.n	9d5a <uip_process+0x5e6>
      } else if(opt == TCP_OPT_MSS &&
    9ef2:	2902      	cmp	r1, #2
    9ef4:	d170      	bne.n	9fd8 <uip_process+0x864>
    9ef6:	f890 1037 	ldrb.w	r1, [r0, #55]	; 0x37
    9efa:	2904      	cmp	r1, #4
    9efc:	d16c      	bne.n	9fd8 <uip_process+0x864>
    9efe:	b10d      	cbz	r5, 9f04 <uip_process+0x790>
    9f00:	f886 b002 	strb.w	fp, [r6, #2]
	tmp16 = ((u16_t)uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 2 + c] << 8) |
    9f04:	445f      	add	r7, fp
    9f06:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
	  (u16_t)uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN + 3 + c];
    9f0a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
	tmp16 = ((u16_t)uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 2 + c] << 8) |
    9f0e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	uip_connr->initialmss = uip_connr->mss =
    9f12:	f240 626e 	movw	r2, #1646	; 0x66e
    9f16:	4293      	cmp	r3, r2
	tmp16 = ((u16_t)uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 2 + c] << 8) |
    9f18:	8173      	strh	r3, [r6, #10]
	uip_connr->initialmss = uip_connr->mss =
    9f1a:	bf28      	it	cs
    9f1c:	4613      	movcs	r3, r2
    9f1e:	f8a8 3012 	strh.w	r3, [r8, #18]
    9f22:	f8a8 3014 	strh.w	r3, [r8, #20]
  BUF->flags = TCP_SYN | TCP_ACK;
    9f26:	4b3e      	ldr	r3, [pc, #248]	; (a020 <uip_process+0x8ac>)
    9f28:	2212      	movs	r2, #18
    9f2a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  BUF->optdata[0] = TCP_OPT_MSS;
    9f2e:	2202      	movs	r2, #2
    9f30:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  BUF->optdata[1] = TCP_OPT_MSS_LEN;
    9f34:	2204      	movs	r2, #4
    9f36:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
  BUF->optdata[2] = (UIP_TCP_MSS) / 256;
    9f3a:	2206      	movs	r2, #6
    9f3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  BUF->optdata[3] = (UIP_TCP_MSS) & 255;
    9f40:	226e      	movs	r2, #110	; 0x6e
    9f42:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  uip_len = UIP_IPTCPH_LEN + TCP_OPT_MSS_LEN;
    9f46:	222c      	movs	r2, #44	; 0x2c
    9f48:	8022      	strh	r2, [r4, #0]
  BUF->tcpoffset = ((UIP_TCPH_LEN + TCP_OPT_MSS_LEN) / 4) << 4;
    9f4a:	2260      	movs	r2, #96	; 0x60
  BUF->tcpoffset = (UIP_TCPH_LEN / 4) << 4;
    9f4c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  BUF->ackno[0] = uip_connr->rcv_nxt[0];
    9f50:	4b33      	ldr	r3, [pc, #204]	; (a020 <uip_process+0x8ac>)
    9f52:	f898 2008 	ldrb.w	r2, [r8, #8]
    9f56:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  BUF->ackno[1] = uip_connr->rcv_nxt[1];
    9f5a:	f898 2009 	ldrb.w	r2, [r8, #9]
    9f5e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  BUF->ackno[2] = uip_connr->rcv_nxt[2];
    9f62:	f898 200a 	ldrb.w	r2, [r8, #10]
    9f66:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  BUF->ackno[3] = uip_connr->rcv_nxt[3];
    9f6a:	f898 200b 	ldrb.w	r2, [r8, #11]
    9f6e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  BUF->seqno[0] = uip_connr->snd_nxt[0];
    9f72:	f898 200c 	ldrb.w	r2, [r8, #12]
    9f76:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  BUF->seqno[1] = uip_connr->snd_nxt[1];
    9f7a:	f898 200d 	ldrb.w	r2, [r8, #13]
    9f7e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  BUF->seqno[2] = uip_connr->snd_nxt[2];
    9f82:	f898 200e 	ldrb.w	r2, [r8, #14]
    9f86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  BUF->seqno[3] = uip_connr->snd_nxt[3];
    9f8a:	f898 200f 	ldrb.w	r2, [r8, #15]
    9f8e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  BUF->proto = UIP_PROTO_TCP;
    9f92:	2206      	movs	r2, #6
    9f94:	75da      	strb	r2, [r3, #23]
  BUF->srcport  = uip_connr->lport;
    9f96:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    9f9a:	8459      	strh	r1, [r3, #34]	; 0x22
  BUF->destport = uip_connr->rport;
    9f9c:	f8b8 1006 	ldrh.w	r1, [r8, #6]
    9fa0:	8499      	strh	r1, [r3, #36]	; 0x24
  uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
    9fa2:	4923      	ldr	r1, [pc, #140]	; (a030 <uip_process+0x8bc>)
    9fa4:	8808      	ldrh	r0, [r1, #0]
    9fa6:	8849      	ldrh	r1, [r1, #2]
    9fa8:	8358      	strh	r0, [r3, #26]
    9faa:	8399      	strh	r1, [r3, #28]
  uip_ipaddr_copy(BUF->destipaddr, uip_connr->ripaddr);
    9fac:	f8b8 1000 	ldrh.w	r1, [r8]
    9fb0:	83d9      	strh	r1, [r3, #30]
    9fb2:	f8b8 1002 	ldrh.w	r1, [r8, #2]
    9fb6:	8419      	strh	r1, [r3, #32]
  if(uip_connr->tcpstateflags & UIP_STOPPED) {
    9fb8:	f898 1019 	ldrb.w	r1, [r8, #25]
    9fbc:	06c9      	lsls	r1, r1, #27
    BUF->wnd[0] = BUF->wnd[1] = 0;
    9fbe:	bf43      	ittte	mi
    9fc0:	2200      	movmi	r2, #0
    9fc2:	f883 2031 	strbmi.w	r2, [r3, #49]	; 0x31
    9fc6:	f883 2030 	strbmi.w	r2, [r3, #48]	; 0x30
    BUF->wnd[0] = ((UIP_RECEIVE_WINDOW) >> 8);
    9fca:	f883 2030 	strbpl.w	r2, [r3, #48]	; 0x30
    BUF->wnd[1] = ((UIP_RECEIVE_WINDOW) & 0xff);
    9fce:	bf5c      	itt	pl
    9fd0:	226e      	movpl	r2, #110	; 0x6e
    9fd2:	f883 2031 	strbpl.w	r2, [r3, #49]	; 0x31
    9fd6:	e75e      	b.n	9e96 <uip_process+0x722>
	if(uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == 0) {
    9fd8:	eb07 010b 	add.w	r1, r7, fp
    9fdc:	f891 1037 	ldrb.w	r1, [r1, #55]	; 0x37
    9fe0:	2900      	cmp	r1, #0
    9fe2:	f43f aec3 	beq.w	9d6c <uip_process+0x5f8>
	c += uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c];
    9fe6:	448b      	add	fp, r1
    9fe8:	e77f      	b.n	9eea <uip_process+0x776>
  if(BUF->flags & TCP_RST) {
    9fea:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
  uip_flags = 0;
    9fee:	f8df 9050 	ldr.w	r9, [pc, #80]	; a040 <uip_process+0x8cc>
  uip_conn = uip_connr;
    9ff2:	6028      	str	r0, [r5, #0]
  uip_flags = 0;
    9ff4:	2300      	movs	r3, #0
  if(BUF->flags & TCP_RST) {
    9ff6:	f011 0f04 	tst.w	r1, #4
  uip_flags = 0;
    9ffa:	f889 3000 	strb.w	r3, [r9]
    9ffe:	464d      	mov	r5, r9
  if(BUF->flags & TCP_RST) {
    a000:	d020      	beq.n	a044 <uip_process+0x8d0>
    uip_connr->tcpstateflags = UIP_CLOSED;
    a002:	7643      	strb	r3, [r0, #25]
    UIP_LOG("tcp: got reset, aborting connection.");
    a004:	4b0b      	ldr	r3, [pc, #44]	; (a034 <uip_process+0x8c0>)
    a006:	480c      	ldr	r0, [pc, #48]	; (a038 <uip_process+0x8c4>)
    a008:	4798      	blx	r3
    uip_flags = UIP_ABORT;
    a00a:	2320      	movs	r3, #32
    a00c:	f889 3000 	strb.w	r3, [r9]
      UIP_APPCALL();
    a010:	4b0a      	ldr	r3, [pc, #40]	; (a03c <uip_process+0x8c8>)
    a012:	4798      	blx	r3
    a014:	e407      	b.n	9826 <uip_process+0xb2>
    a016:	bf00      	nop
    a018:	0000f23a 	.word	0x0000f23a
    a01c:	200072b6 	.word	0x200072b6
    a020:	20008622 	.word	0x20008622
    a024:	00009669 	.word	0x00009669
    a028:	2000856c 	.word	0x2000856c
    a02c:	0000f24d 	.word	0x0000f24d
    a030:	2000861e 	.word	0x2000861e
    a034:	0000b285 	.word	0x0000b285
    a038:	0000f26f 	.word	0x0000f26f
    a03c:	0000b275 	.word	0x0000b275
    a040:	2000855c 	.word	0x2000855c
  c = (BUF->tcpoffset >> 4) << 2;
    a044:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    a048:	48b4      	ldr	r0, [pc, #720]	; (a31c <uip_process+0xba8>)
    a04a:	091b      	lsrs	r3, r3, #4
    a04c:	ea4f 0e83 	mov.w	lr, r3, lsl #2
  uip_len = uip_len - c - UIP_IPH_LEN;
    a050:	8823      	ldrh	r3, [r4, #0]
  c = (BUF->tcpoffset >> 4) << 2;
    a052:	f880 e002 	strb.w	lr, [r0, #2]
  uip_len = uip_len - c - UIP_IPH_LEN;
    a056:	3b14      	subs	r3, #20
    a058:	eba3 030e 	sub.w	r3, r3, lr
  if(!(((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_SYN_SENT) &&
    a05c:	f002 020f 	and.w	r2, r2, #15
  uip_len = uip_len - c - UIP_IPH_LEN;
    a060:	b29b      	uxth	r3, r3
  if(!(((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_SYN_SENT) &&
    a062:	2a02      	cmp	r2, #2
  uip_len = uip_len - c - UIP_IPH_LEN;
    a064:	8023      	strh	r3, [r4, #0]
    a066:	4681      	mov	r9, r0
  if(!(((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_SYN_SENT) &&
    a068:	d103      	bne.n	a072 <uip_process+0x8fe>
    a06a:	f001 023f 	and.w	r2, r1, #63	; 0x3f
    a06e:	2a12      	cmp	r2, #18
    a070:	d00e      	beq.n	a090 <uip_process+0x91c>
    if((uip_len > 0 || ((BUF->flags & (TCP_SYN | TCP_FIN)) != 0)) &&
    a072:	b90b      	cbnz	r3, a078 <uip_process+0x904>
    a074:	078a      	lsls	r2, r1, #30
    a076:	d00b      	beq.n	a090 <uip_process+0x91c>
    a078:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a07a:	f8b8 3008 	ldrh.w	r3, [r8, #8]
    a07e:	429a      	cmp	r2, r3
    a080:	f040 8146 	bne.w	a310 <uip_process+0xb9c>
	BUF->seqno[2] != uip_connr->rcv_nxt[2] ||
    a084:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
    a086:	f8b8 300a 	ldrh.w	r3, [r8, #10]
    a08a:	429a      	cmp	r2, r3
    a08c:	f040 8140 	bne.w	a310 <uip_process+0xb9c>
  if((BUF->flags & TCP_ACK) && uip_outstanding(uip_connr)) {
    a090:	06cb      	lsls	r3, r1, #27
    a092:	d54e      	bpl.n	a132 <uip_process+0x9be>
    a094:	f8b8 1010 	ldrh.w	r1, [r8, #16]
    a098:	2900      	cmp	r1, #0
    a09a:	d04a      	beq.n	a132 <uip_process+0x9be>
    uip_add32(uip_connr->snd_nxt, uip_connr->len);
    a09c:	48a0      	ldr	r0, [pc, #640]	; (a320 <uip_process+0xbac>)
    a09e:	4ba1      	ldr	r3, [pc, #644]	; (a324 <uip_process+0xbb0>)
    a0a0:	4798      	blx	r3
    if(BUF->ackno[0] == uip_acc32[0] &&
    a0a2:	4ba1      	ldr	r3, [pc, #644]	; (a328 <uip_process+0xbb4>)
    a0a4:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
    a0a8:	7818      	ldrb	r0, [r3, #0]
    a0aa:	4290      	cmp	r0, r2
    a0ac:	d141      	bne.n	a132 <uip_process+0x9be>
       BUF->ackno[1] == uip_acc32[1] &&
    a0ae:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
    if(BUF->ackno[0] == uip_acc32[0] &&
    a0b2:	7859      	ldrb	r1, [r3, #1]
    a0b4:	4291      	cmp	r1, r2
    a0b6:	d13c      	bne.n	a132 <uip_process+0x9be>
       BUF->ackno[2] == uip_acc32[2] &&
    a0b8:	f897 e02c 	ldrb.w	lr, [r7, #44]	; 0x2c
       BUF->ackno[1] == uip_acc32[1] &&
    a0bc:	789a      	ldrb	r2, [r3, #2]
    a0be:	4572      	cmp	r2, lr
    a0c0:	d137      	bne.n	a132 <uip_process+0x9be>
       BUF->ackno[3] == uip_acc32[3]) {
    a0c2:	f897 e02d 	ldrb.w	lr, [r7, #45]	; 0x2d
       BUF->ackno[2] == uip_acc32[2] &&
    a0c6:	78db      	ldrb	r3, [r3, #3]
    a0c8:	4573      	cmp	r3, lr
    a0ca:	d132      	bne.n	a132 <uip_process+0x9be>
      uip_connr->snd_nxt[3] = uip_acc32[3];
    a0cc:	f888 300f 	strb.w	r3, [r8, #15]
      if(uip_connr->nrtx == 0) {
    a0d0:	f898 301b 	ldrb.w	r3, [r8, #27]
      uip_connr->snd_nxt[0] = uip_acc32[0];
    a0d4:	f888 000c 	strb.w	r0, [r8, #12]
      uip_connr->snd_nxt[1] = uip_acc32[1];
    a0d8:	f888 100d 	strb.w	r1, [r8, #13]
      uip_connr->snd_nxt[2] = uip_acc32[2];
    a0dc:	f888 200e 	strb.w	r2, [r8, #14]
      if(uip_connr->nrtx == 0) {
    a0e0:	b9f3      	cbnz	r3, a120 <uip_process+0x9ac>
	m = uip_connr->rto - uip_connr->timer;
    a0e2:	f898 1018 	ldrb.w	r1, [r8, #24]
    a0e6:	f898 301a 	ldrb.w	r3, [r8, #26]
	m = m - (uip_connr->sa >> 3);
    a0ea:	f898 0016 	ldrb.w	r0, [r8, #22]
	m = m - (uip_connr->sv >> 2);
    a0ee:	f898 2017 	ldrb.w	r2, [r8, #23]
	m = uip_connr->rto - uip_connr->timer;
    a0f2:	1ac9      	subs	r1, r1, r3
	m = m - (uip_connr->sa >> 3);
    a0f4:	eba1 01d0 	sub.w	r1, r1, r0, lsr #3
    a0f8:	b2c9      	uxtb	r1, r1
    a0fa:	b24b      	sxtb	r3, r1
	if(m < 0) {
    a0fc:	2b00      	cmp	r3, #0
	uip_connr->sa += m;
    a0fe:	4408      	add	r0, r1
	  m = -m;
    a100:	bfbc      	itt	lt
    a102:	4249      	neglt	r1, r1
    a104:	b24b      	sxtblt	r3, r1
	uip_connr->sv += m;
    a106:	eba2 0292 	sub.w	r2, r2, r2, lsr #2
    a10a:	4413      	add	r3, r2
	uip_connr->sa += m;
    a10c:	b2c0      	uxtb	r0, r0
	uip_connr->sv += m;
    a10e:	b2db      	uxtb	r3, r3
    a110:	f888 3017 	strb.w	r3, [r8, #23]
	uip_connr->rto = (uip_connr->sa >> 3) + uip_connr->sv;
    a114:	eb03 03d0 	add.w	r3, r3, r0, lsr #3
	uip_connr->sa += m;
    a118:	f888 0016 	strb.w	r0, [r8, #22]
	uip_connr->rto = (uip_connr->sa >> 3) + uip_connr->sv;
    a11c:	f888 3018 	strb.w	r3, [r8, #24]
      uip_flags = UIP_ACKDATA;
    a120:	2301      	movs	r3, #1
    a122:	702b      	strb	r3, [r5, #0]
      uip_connr->timer = uip_connr->rto;
    a124:	f898 3018 	ldrb.w	r3, [r8, #24]
    a128:	f888 301a 	strb.w	r3, [r8, #26]
      uip_connr->len = 0;
    a12c:	2300      	movs	r3, #0
    a12e:	f8a8 3010 	strh.w	r3, [r8, #16]
  switch(uip_connr->tcpstateflags & UIP_TS_MASK) {
    a132:	f898 1019 	ldrb.w	r1, [r8, #25]
    a136:	f001 030f 	and.w	r3, r1, #15
    a13a:	3b01      	subs	r3, #1
    a13c:	2b07      	cmp	r3, #7
    a13e:	f63f ab72 	bhi.w	9826 <uip_process+0xb2>
    a142:	a201      	add	r2, pc, #4	; (adr r2, a148 <uip_process+0x9d4>)
    a144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    a148:	0000a169 	.word	0x0000a169
    a14c:	00009827 	.word	0x00009827
    a150:	0000a19f 	.word	0x0000a19f
    a154:	0000a2d3 	.word	0x0000a2d3
    a158:	0000a359 	.word	0x0000a359
    a15c:	0000a381 	.word	0x0000a381
    a160:	0000a311 	.word	0x0000a311
    a164:	0000a2bf 	.word	0x0000a2bf
    if(uip_flags & UIP_ACKDATA) {
    a168:	782b      	ldrb	r3, [r5, #0]
    a16a:	07df      	lsls	r7, r3, #31
    a16c:	f57f ab5b 	bpl.w	9826 <uip_process+0xb2>
      uip_connr->tcpstateflags = UIP_ESTABLISHED;
    a170:	2303      	movs	r3, #3
    a172:	f888 3019 	strb.w	r3, [r8, #25]
      if(uip_len > 0) {
    a176:	8820      	ldrh	r0, [r4, #0]
      uip_flags = UIP_CONNECTED;
    a178:	2340      	movs	r3, #64	; 0x40
    a17a:	702b      	strb	r3, [r5, #0]
      uip_connr->len = 0;
    a17c:	2300      	movs	r3, #0
    a17e:	f8a8 3010 	strh.w	r3, [r8, #16]
      if(uip_len > 0) {
    a182:	b118      	cbz	r0, a18c <uip_process+0xa18>
        uip_flags |= UIP_NEWDATA;
    a184:	2342      	movs	r3, #66	; 0x42
    a186:	702b      	strb	r3, [r5, #0]
        uip_add_rcv_nxt(uip_len);
    a188:	4b68      	ldr	r3, [pc, #416]	; (a32c <uip_process+0xbb8>)
    a18a:	4798      	blx	r3
      uip_slen = 0;
    a18c:	4b68      	ldr	r3, [pc, #416]	; (a330 <uip_process+0xbbc>)
      goto appsend;
    a18e:	f8df 81b0 	ldr.w	r8, [pc, #432]	; a340 <uip_process+0xbcc>
      uip_slen = 0;
    a192:	2200      	movs	r2, #0
    a194:	801a      	strh	r2, [r3, #0]
      UIP_APPCALL();
    a196:	4b67      	ldr	r3, [pc, #412]	; (a334 <uip_process+0xbc0>)
    a198:	4798      	blx	r3
      goto appsend;
    a19a:	f7ff bb0e 	b.w	97ba <uip_process+0x46>
    if(BUF->flags & TCP_FIN && !(uip_connr->tcpstateflags & UIP_STOPPED)) {
    a19e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    a1a2:	07d8      	lsls	r0, r3, #31
    a1a4:	d529      	bpl.n	a1fa <uip_process+0xa86>
    a1a6:	06ca      	lsls	r2, r1, #27
    a1a8:	d427      	bmi.n	a1fa <uip_process+0xa86>
      if(uip_outstanding(uip_connr)) {
    a1aa:	f8b8 3010 	ldrh.w	r3, [r8, #16]
    a1ae:	2b00      	cmp	r3, #0
    a1b0:	f47f ab39 	bne.w	9826 <uip_process+0xb2>
      uip_add_rcv_nxt(1 + uip_len);
    a1b4:	8820      	ldrh	r0, [r4, #0]
    a1b6:	4b5d      	ldr	r3, [pc, #372]	; (a32c <uip_process+0xbb8>)
    a1b8:	3001      	adds	r0, #1
    a1ba:	b280      	uxth	r0, r0
    a1bc:	4798      	blx	r3
      uip_flags |= UIP_CLOSE;
    a1be:	782b      	ldrb	r3, [r5, #0]
    a1c0:	f043 0210 	orr.w	r2, r3, #16
    a1c4:	702a      	strb	r2, [r5, #0]
      if(uip_len > 0) {
    a1c6:	8822      	ldrh	r2, [r4, #0]
    a1c8:	b112      	cbz	r2, a1d0 <uip_process+0xa5c>
	uip_flags |= UIP_NEWDATA;
    a1ca:	f043 0312 	orr.w	r3, r3, #18
    a1ce:	702b      	strb	r3, [r5, #0]
      UIP_APPCALL();
    a1d0:	4b58      	ldr	r3, [pc, #352]	; (a334 <uip_process+0xbc0>)
    a1d2:	4798      	blx	r3
      uip_connr->len = 1;
    a1d4:	2301      	movs	r3, #1
    a1d6:	f8a8 3010 	strh.w	r3, [r8, #16]
      uip_connr->tcpstateflags = UIP_LAST_ACK;
    a1da:	2308      	movs	r3, #8
    a1dc:	f888 3019 	strb.w	r3, [r8, #25]
      uip_connr->nrtx = 0;
    a1e0:	2300      	movs	r3, #0
    a1e2:	f888 301b 	strb.w	r3, [r8, #27]
    a1e6:	f8df 8158 	ldr.w	r8, [pc, #344]	; a340 <uip_process+0xbcc>
      BUF->flags = TCP_FIN | TCP_ACK;
    a1ea:	2211      	movs	r2, #17
    a1ec:	4b52      	ldr	r3, [pc, #328]	; (a338 <uip_process+0xbc4>)
    a1ee:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  uip_len = UIP_IPTCPH_LEN;
    a1f2:	2328      	movs	r3, #40	; 0x28
    a1f4:	8023      	strh	r3, [r4, #0]
    a1f6:	f7ff bb7a 	b.w	98ee <uip_process+0x17a>
    if((BUF->flags & TCP_URG) != 0) {
    a1fa:	0698      	lsls	r0, r3, #26
    a1fc:	d50d      	bpl.n	a21a <uip_process+0xaa6>
      uip_appdata = ((char *)uip_appdata) + ((BUF->urgp[0] << 8) | BUF->urgp[1]);
    a1fe:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
    a202:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
    a206:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    a20a:	f8da 2000 	ldr.w	r2, [sl]
    a20e:	441a      	add	r2, r3
    a210:	f8ca 2000 	str.w	r2, [sl]
      uip_len -= (BUF->urgp[0] << 8) | BUF->urgp[1];
    a214:	8822      	ldrh	r2, [r4, #0]
    a216:	1ad3      	subs	r3, r2, r3
    a218:	8023      	strh	r3, [r4, #0]
    if(uip_len > 0 && !(uip_connr->tcpstateflags & UIP_STOPPED)) {
    a21a:	8820      	ldrh	r0, [r4, #0]
    a21c:	b138      	cbz	r0, a22e <uip_process+0xaba>
    a21e:	06ca      	lsls	r2, r1, #27
    a220:	d405      	bmi.n	a22e <uip_process+0xaba>
      uip_flags |= UIP_NEWDATA;
    a222:	782b      	ldrb	r3, [r5, #0]
    a224:	f043 0302 	orr.w	r3, r3, #2
    a228:	702b      	strb	r3, [r5, #0]
      uip_add_rcv_nxt(uip_len);
    a22a:	4b40      	ldr	r3, [pc, #256]	; (a32c <uip_process+0xbb8>)
    a22c:	4798      	blx	r3
    tmp16 = ((u16_t)BUF->wnd[0] << 8) + (u16_t)BUF->wnd[1];
    a22e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
    a232:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
    a236:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    if(tmp16 > uip_connr->initialmss ||
    a23a:	f8b8 2014 	ldrh.w	r2, [r8, #20]
    tmp16 = ((u16_t)BUF->wnd[0] << 8) + (u16_t)BUF->wnd[1];
    a23e:	b29b      	uxth	r3, r3
    if(tmp16 > uip_connr->initialmss ||
    a240:	4293      	cmp	r3, r2
    tmp16 = ((u16_t)BUF->wnd[0] << 8) + (u16_t)BUF->wnd[1];
    a242:	f8a9 300a 	strh.w	r3, [r9, #10]
    if(tmp16 > uip_connr->initialmss ||
    a246:	d800      	bhi.n	a24a <uip_process+0xad6>
    a248:	b90b      	cbnz	r3, a24e <uip_process+0xada>
      tmp16 = uip_connr->initialmss;
    a24a:	f8a9 200a 	strh.w	r2, [r9, #10]
    uip_connr->mss = tmp16;
    a24e:	f8b9 300a 	ldrh.w	r3, [r9, #10]
    a252:	f8a8 3012 	strh.w	r3, [r8, #18]
    if(uip_flags & (UIP_NEWDATA | UIP_ACKDATA)) {
    a256:	782b      	ldrb	r3, [r5, #0]
    a258:	079b      	lsls	r3, r3, #30
    a25a:	f43f aae4 	beq.w	9826 <uip_process+0xb2>
    a25e:	e795      	b.n	a18c <uip_process+0xa18>
      if(uip_flags & UIP_CLOSE) {
    a260:	f012 0010 	ands.w	r0, r2, #16
    a264:	d009      	beq.n	a27a <uip_process+0xb06>
	uip_slen = 0;
    a266:	8019      	strh	r1, [r3, #0]
	uip_connr->len = 1;
    a268:	2301      	movs	r3, #1
    a26a:	f8a8 3010 	strh.w	r3, [r8, #16]
	uip_connr->tcpstateflags = UIP_FIN_WAIT_1;
    a26e:	2304      	movs	r3, #4
    a270:	f888 3019 	strb.w	r3, [r8, #25]
	uip_connr->nrtx = 0;
    a274:	f888 101b 	strb.w	r1, [r8, #27]
    a278:	e7b7      	b.n	a1ea <uip_process+0xa76>
      if(uip_slen > 0) {
    a27a:	8819      	ldrh	r1, [r3, #0]
    a27c:	b171      	cbz	r1, a29c <uip_process+0xb28>
	if((uip_flags & UIP_ACKDATA) != 0) {
    a27e:	07d7      	lsls	r7, r2, #31
	  uip_connr->len = 0;
    a280:	bf48      	it	mi
    a282:	f8a8 0010 	strhmi.w	r0, [r8, #16]
	if(uip_connr->len == 0) {
    a286:	f8b8 2010 	ldrh.w	r2, [r8, #16]
    a28a:	b962      	cbnz	r2, a2a6 <uip_process+0xb32>
	  if(uip_slen > uip_connr->mss) {
    a28c:	f8b8 2012 	ldrh.w	r2, [r8, #18]
    a290:	4291      	cmp	r1, r2
	    uip_slen = uip_connr->mss;
    a292:	bf88      	it	hi
    a294:	801a      	strhhi	r2, [r3, #0]
	  uip_connr->len = uip_slen;
    a296:	881b      	ldrh	r3, [r3, #0]
    a298:	f8a8 3010 	strh.w	r3, [r8, #16]
      uip_connr->nrtx = 0;
    a29c:	2300      	movs	r3, #0
    a29e:	f888 301b 	strb.w	r3, [r8, #27]
    a2a2:	f7ff bb11 	b.w	98c8 <uip_process+0x154>
	  uip_slen = uip_connr->len;
    a2a6:	801a      	strh	r2, [r3, #0]
    a2a8:	e7f8      	b.n	a29c <uip_process+0xb28>
      if(uip_flags & UIP_NEWDATA) {
    a2aa:	4b24      	ldr	r3, [pc, #144]	; (a33c <uip_process+0xbc8>)
    a2ac:	781b      	ldrb	r3, [r3, #0]
    a2ae:	079d      	lsls	r5, r3, #30
    a2b0:	f57f aab9 	bpl.w	9826 <uip_process+0xb2>
	uip_len = UIP_TCPIP_HLEN;
    a2b4:	2328      	movs	r3, #40	; 0x28
    a2b6:	8023      	strh	r3, [r4, #0]
	BUF->flags = TCP_ACK;
    a2b8:	2210      	movs	r2, #16
    a2ba:	f7ff bb15 	b.w	98e8 <uip_process+0x174>
    if(uip_flags & UIP_ACKDATA) {
    a2be:	782b      	ldrb	r3, [r5, #0]
    a2c0:	07d8      	lsls	r0, r3, #31
    a2c2:	f57f aab0 	bpl.w	9826 <uip_process+0xb2>
      uip_connr->tcpstateflags = UIP_CLOSED;
    a2c6:	2300      	movs	r3, #0
    a2c8:	f888 3019 	strb.w	r3, [r8, #25]
      uip_flags = UIP_CLOSE;
    a2cc:	2310      	movs	r3, #16
    a2ce:	702b      	strb	r3, [r5, #0]
    a2d0:	e69e      	b.n	a010 <uip_process+0x89c>
    if(uip_len > 0) {
    a2d2:	8820      	ldrh	r0, [r4, #0]
    a2d4:	b108      	cbz	r0, a2da <uip_process+0xb66>
      uip_add_rcv_nxt(uip_len);
    a2d6:	4b15      	ldr	r3, [pc, #84]	; (a32c <uip_process+0xbb8>)
    a2d8:	4798      	blx	r3
    if(BUF->flags & TCP_FIN) {
    a2da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    a2de:	f013 0301 	ands.w	r3, r3, #1
    a2e2:	d02f      	beq.n	a344 <uip_process+0xbd0>
      if(uip_flags & UIP_ACKDATA) {
    a2e4:	782b      	ldrb	r3, [r5, #0]
    a2e6:	07d9      	lsls	r1, r3, #31
	uip_connr->tcpstateflags = UIP_TIME_WAIT;
    a2e8:	bf45      	ittet	mi
    a2ea:	2307      	movmi	r3, #7
    a2ec:	f888 3019 	strbmi.w	r3, [r8, #25]
	uip_connr->tcpstateflags = UIP_CLOSING;
    a2f0:	2306      	movpl	r3, #6
	uip_connr->timer = 0;
    a2f2:	2300      	movmi	r3, #0
    a2f4:	bf46      	itte	mi
    a2f6:	f888 301a 	strbmi.w	r3, [r8, #26]
	uip_connr->len = 0;
    a2fa:	f8a8 3010 	strhmi.w	r3, [r8, #16]
	uip_connr->tcpstateflags = UIP_CLOSING;
    a2fe:	f888 3019 	strbpl.w	r3, [r8, #25]
      uip_add_rcv_nxt(1);
    a302:	4b0a      	ldr	r3, [pc, #40]	; (a32c <uip_process+0xbb8>)
    a304:	2001      	movs	r0, #1
    a306:	4798      	blx	r3
      uip_flags = UIP_CLOSE;
    a308:	2310      	movs	r3, #16
    a30a:	702b      	strb	r3, [r5, #0]
      UIP_APPCALL();
    a30c:	4b09      	ldr	r3, [pc, #36]	; (a334 <uip_process+0xbc0>)
    a30e:	4798      	blx	r3
  BUF->flags = TCP_ACK;
    a310:	2310      	movs	r3, #16
    a312:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    a316:	f8df 8028 	ldr.w	r8, [pc, #40]	; a340 <uip_process+0xbcc>
    a31a:	e76a      	b.n	a1f2 <uip_process+0xa7e>
    a31c:	200072b6 	.word	0x200072b6
    a320:	20008578 	.word	0x20008578
    a324:	000095ad 	.word	0x000095ad
    a328:	20008558 	.word	0x20008558
    a32c:	00009601 	.word	0x00009601
    a330:	20008cc8 	.word	0x20008cc8
    a334:	0000b275 	.word	0x0000b275
    a338:	20008622 	.word	0x20008622
    a33c:	2000855c 	.word	0x2000855c
    a340:	2000856c 	.word	0x2000856c
    } else if(uip_flags & UIP_ACKDATA) {
    a344:	782a      	ldrb	r2, [r5, #0]
    a346:	07d2      	lsls	r2, r2, #31
    a348:	d515      	bpl.n	a376 <uip_process+0xc02>
      uip_connr->tcpstateflags = UIP_FIN_WAIT_2;
    a34a:	2205      	movs	r2, #5
    a34c:	f888 2019 	strb.w	r2, [r8, #25]
      uip_connr->len = 0;
    a350:	f8a8 3010 	strh.w	r3, [r8, #16]
      goto drop;
    a354:	f7ff ba67 	b.w	9826 <uip_process+0xb2>
    if(uip_len > 0) {
    a358:	8820      	ldrh	r0, [r4, #0]
    a35a:	b108      	cbz	r0, a360 <uip_process+0xbec>
      uip_add_rcv_nxt(uip_len);
    a35c:	4b0e      	ldr	r3, [pc, #56]	; (a398 <uip_process+0xc24>)
    a35e:	4798      	blx	r3
    if(BUF->flags & TCP_FIN) {
    a360:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    a364:	07de      	lsls	r6, r3, #31
    a366:	d506      	bpl.n	a376 <uip_process+0xc02>
      uip_connr->tcpstateflags = UIP_TIME_WAIT;
    a368:	2307      	movs	r3, #7
    a36a:	f888 3019 	strb.w	r3, [r8, #25]
      uip_connr->timer = 0;
    a36e:	2300      	movs	r3, #0
    a370:	f888 301a 	strb.w	r3, [r8, #26]
    a374:	e7c5      	b.n	a302 <uip_process+0xb8e>
    if(uip_len > 0) {
    a376:	8823      	ldrh	r3, [r4, #0]
    a378:	2b00      	cmp	r3, #0
    a37a:	d1c9      	bne.n	a310 <uip_process+0xb9c>
    a37c:	f7ff ba53 	b.w	9826 <uip_process+0xb2>
    if(uip_flags & UIP_ACKDATA) {
    a380:	782b      	ldrb	r3, [r5, #0]
    a382:	07d8      	lsls	r0, r3, #31
    a384:	f57f aa4f 	bpl.w	9826 <uip_process+0xb2>
      uip_connr->tcpstateflags = UIP_TIME_WAIT;
    a388:	2307      	movs	r3, #7
    a38a:	f888 3019 	strb.w	r3, [r8, #25]
      uip_connr->timer = 0;
    a38e:	2300      	movs	r3, #0
    a390:	f888 301a 	strb.w	r3, [r8, #26]
    a394:	f7ff ba47 	b.w	9826 <uip_process+0xb2>
    a398:	00009601 	.word	0x00009601

0000a39c <htons>:
  return HTONS(val);
    a39c:	ba40      	rev16	r0, r0
}
    a39e:	b280      	uxth	r0, r0
    a3a0:	4770      	bx	lr
	...

0000a3a4 <uip_send>:
/*---------------------------------------------------------------------------*/
void
uip_send(const void *data, int len)
{
  if(len > 0) {
    a3a4:	1e0a      	subs	r2, r1, #0
    a3a6:	dd0a      	ble.n	a3be <uip_send+0x1a>
    uip_slen = len;
    a3a8:	4b05      	ldr	r3, [pc, #20]	; (a3c0 <uip_send+0x1c>)
    a3aa:	801a      	strh	r2, [r3, #0]
    if(data != uip_sappdata) {
    a3ac:	4b05      	ldr	r3, [pc, #20]	; (a3c4 <uip_send+0x20>)
    a3ae:	681b      	ldr	r3, [r3, #0]
    a3b0:	4283      	cmp	r3, r0
    a3b2:	d004      	beq.n	a3be <uip_send+0x1a>
      memcpy(uip_sappdata, (data), uip_slen);
    a3b4:	4601      	mov	r1, r0
    a3b6:	b292      	uxth	r2, r2
    a3b8:	4618      	mov	r0, r3
    a3ba:	4b03      	ldr	r3, [pc, #12]	; (a3c8 <uip_send+0x24>)
    a3bc:	4718      	bx	r3
    a3be:	4770      	bx	lr
    a3c0:	20008cc8 	.word	0x20008cc8
    a3c4:	20008554 	.word	0x20008554
    a3c8:	0000b2fb 	.word	0x0000b2fb

0000a3cc <uip_arp_update.constprop.0>:
{
  register struct arp_entry *tabptr;
  /* Walk through the ARP mapping table and try to find an entry to
     update. If none is found, the IP -> MAC address mapping is
     inserted in the ARP table. */
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    a3cc:	4b45      	ldr	r3, [pc, #276]	; (a4e4 <uip_arp_update.constprop.0+0x118>)
    a3ce:	4618      	mov	r0, r3
uip_arp_update(u16_t *ipaddr, struct uip_eth_addr *ethaddr)
    a3d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    a3d4:	2200      	movs	r2, #0
    if(tabptr->ipaddr[0] != 0 &&
       tabptr->ipaddr[1] != 0) {

      /* Check if the source IP address of the incoming packet matches
         the IP address in this ARP table entry. */
      if(ipaddr[0] == tabptr->ipaddr[0] &&
    a3d6:	4c44      	ldr	r4, [pc, #272]	; (a4e8 <uip_arp_update.constprop.0+0x11c>)
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    a3d8:	f800 2b02 	strb.w	r2, [r0], #2
      if(ipaddr[0] == tabptr->ipaddr[0] &&
    a3dc:	f8b4 901c 	ldrh.w	r9, [r4, #28]
	 ipaddr[1] == tabptr->ipaddr[1]) {
    a3e0:	f8b4 a01e 	ldrh.w	sl, [r4, #30]
    a3e4:	4601      	mov	r1, r0
    a3e6:	4696      	mov	lr, r2
    a3e8:	4605      	mov	r5, r0
    a3ea:	b2d7      	uxtb	r7, r2
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    a3ec:	2f08      	cmp	r7, #8
    a3ee:	d123      	bne.n	a438 <uip_arp_update.constprop.0+0x6c>

  /* If we get here, no existing ARP table entry was found, so we
     create one. */

  /* First, we try to find an unused entry in the ARP table. */
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    a3f0:	2100      	movs	r1, #0
    a3f2:	7019      	strb	r1, [r3, #0]
    a3f4:	4606      	mov	r6, r0
    a3f6:	460f      	mov	r7, r1
    a3f8:	2908      	cmp	r1, #8
    a3fa:	d144      	bne.n	a486 <uip_arp_update.constprop.0+0xba>
  }

  /* If no unused entry is found, we try to find the oldest entry and
     throw it away. */
  if(i == UIP_ARPTAB_SIZE) {
    tmpage = 0;
    a3fc:	2200      	movs	r2, #0
    c = 0;
    for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
      tabptr = &arp_table[i];
      if(arptime - tabptr->time > tmpage) {
    a3fe:	f893 8062 	ldrb.w	r8, [r3, #98]	; 0x62
    tmpage = 0;
    a402:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
    c = 0;
    a406:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    a40a:	701a      	strb	r2, [r3, #0]
      if(arptime - tabptr->time > tmpage) {
    a40c:	4616      	mov	r6, r2
    a40e:	4696      	mov	lr, r2
    a410:	4694      	mov	ip, r2
    a412:	4617      	mov	r7, r2
    for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    a414:	2a08      	cmp	r2, #8
    a416:	d156      	bne.n	a4c6 <uip_arp_update.constprop.0+0xfa>
    a418:	f1bc 0f00 	cmp.w	ip, #0
    a41c:	d001      	beq.n	a422 <uip_arp_update.constprop.0+0x56>
    a41e:	f883 7063 	strb.w	r7, [r3, #99]	; 0x63
    a422:	b10e      	cbz	r6, a428 <uip_arp_update.constprop.0+0x5c>
    a424:	f883 e064 	strb.w	lr, [r3, #100]	; 0x64
	tmpage = arptime - tabptr->time;
	c = i;
      }
    }
    i = c;
    a428:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
    a42c:	701a      	strb	r2, [r3, #0]
    tabptr = &arp_table[i];
    a42e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    a432:	eb05 0282 	add.w	r2, r5, r2, lsl #2
    a436:	e033      	b.n	a4a0 <uip_arp_update.constprop.0+0xd4>
    if(tabptr->ipaddr[0] != 0 &&
    a438:	f8b1 8000 	ldrh.w	r8, [r1]
    a43c:	1a0e      	subs	r6, r1, r0
    a43e:	f1b8 0f00 	cmp.w	r8, #0
    a442:	d01b      	beq.n	a47c <uip_arp_update.constprop.0+0xb0>
       tabptr->ipaddr[1] != 0) {
    a444:	f8b1 c002 	ldrh.w	ip, [r1, #2]
    if(tabptr->ipaddr[0] != 0 &&
    a448:	f1bc 0f00 	cmp.w	ip, #0
    a44c:	d016      	beq.n	a47c <uip_arp_update.constprop.0+0xb0>
      if(ipaddr[0] == tabptr->ipaddr[0] &&
    a44e:	45c8      	cmp	r8, r9
    a450:	d114      	bne.n	a47c <uip_arp_update.constprop.0+0xb0>
    a452:	45d4      	cmp	ip, sl
    a454:	d112      	bne.n	a47c <uip_arp_update.constprop.0+0xb0>
    a456:	f1be 0f00 	cmp.w	lr, #0
    a45a:	d000      	beq.n	a45e <uip_arp_update.constprop.0+0x92>
    a45c:	701f      	strb	r7, [r3, #0]
	memcpy(tabptr->ethaddr.addr, ethaddr->addr, 6);
    a45e:	4823      	ldr	r0, [pc, #140]	; (a4ec <uip_arp_update.constprop.0+0x120>)
    a460:	1d31      	adds	r1, r6, #4
    a462:	186c      	adds	r4, r5, r1
    a464:	6806      	ldr	r6, [r0, #0]
    a466:	506e      	str	r6, [r5, r1]
    a468:	8881      	ldrh	r1, [r0, #4]
    a46a:	80a1      	strh	r1, [r4, #4]
	tabptr->time = arptime;
    a46c:	210c      	movs	r1, #12
    a46e:	fb01 3202 	mla	r2, r1, r2, r3
    a472:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
    a476:	7313      	strb	r3, [r2, #12]
    a478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a47c:	310c      	adds	r1, #12
    a47e:	3201      	adds	r2, #1
    a480:	f04f 0e01 	mov.w	lr, #1
    a484:	e7b1      	b.n	a3ea <uip_arp_update.constprop.0+0x1e>
    if(tabptr->ipaddr[0] == 0 &&
    a486:	f8b6 e000 	ldrh.w	lr, [r6]
    tabptr = &arp_table[i];
    a48a:	4632      	mov	r2, r6
    if(tabptr->ipaddr[0] == 0 &&
    a48c:	f1be 0f00 	cmp.w	lr, #0
    a490:	d114      	bne.n	a4bc <uip_arp_update.constprop.0+0xf0>
    a492:	f8b6 e002 	ldrh.w	lr, [r6, #2]
    a496:	f1be 0f00 	cmp.w	lr, #0
    a49a:	d10f      	bne.n	a4bc <uip_arp_update.constprop.0+0xf0>
    a49c:	b107      	cbz	r7, a4a0 <uip_arp_update.constprop.0+0xd4>
    a49e:	7019      	strb	r1, [r3, #0]
  }

  /* Now, i is the ARP table entry which we will fill with the new
     information. */
  memcpy(tabptr->ipaddr, ipaddr, 4);
    a4a0:	4611      	mov	r1, r2
    a4a2:	69e0      	ldr	r0, [r4, #28]
    a4a4:	f841 0b04 	str.w	r0, [r1], #4
  memcpy(tabptr->ethaddr.addr, ethaddr->addr, 6);
    a4a8:	4810      	ldr	r0, [pc, #64]	; (a4ec <uip_arp_update.constprop.0+0x120>)
  tabptr->time = arptime;
    a4aa:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
  memcpy(tabptr->ethaddr.addr, ethaddr->addr, 6);
    a4ae:	6804      	ldr	r4, [r0, #0]
    a4b0:	8880      	ldrh	r0, [r0, #4]
    a4b2:	6054      	str	r4, [r2, #4]
    a4b4:	8088      	strh	r0, [r1, #4]
  tabptr->time = arptime;
    a4b6:	7293      	strb	r3, [r2, #10]
    a4b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a4bc:	3101      	adds	r1, #1
    a4be:	b2c9      	uxtb	r1, r1
    a4c0:	360c      	adds	r6, #12
    a4c2:	2701      	movs	r7, #1
    a4c4:	e798      	b.n	a3f8 <uip_arp_update.constprop.0+0x2c>
      if(arptime - tabptr->time > tmpage) {
    a4c6:	7a81      	ldrb	r1, [r0, #10]
    a4c8:	eba8 0101 	sub.w	r1, r8, r1
    a4cc:	42b9      	cmp	r1, r7
	tmpage = arptime - tabptr->time;
    a4ce:	bfc4      	itt	gt
    a4d0:	4696      	movgt	lr, r2
    a4d2:	2601      	movgt	r6, #1
    a4d4:	f102 0201 	add.w	r2, r2, #1
    a4d8:	bfc4      	itt	gt
    a4da:	b2cf      	uxtbgt	r7, r1
    a4dc:	46b4      	movgt	ip, r6
    a4de:	b2d2      	uxtb	r2, r2
    a4e0:	300c      	adds	r0, #12
    a4e2:	e797      	b.n	a414 <uip_arp_update.constprop.0+0x48>
    a4e4:	200072c8 	.word	0x200072c8
    a4e8:	20008622 	.word	0x20008622
    a4ec:	20008638 	.word	0x20008638

0000a4f0 <uip_arp_timer>:
{
    a4f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  ++arptime;
    a4f2:	4b12      	ldr	r3, [pc, #72]	; (a53c <uip_arp_timer+0x4c>)
    a4f4:	f893 0062 	ldrb.w	r0, [r3, #98]	; 0x62
    a4f8:	3001      	adds	r0, #1
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    a4fa:	2200      	movs	r2, #0
  ++arptime;
    a4fc:	b2c0      	uxtb	r0, r0
    a4fe:	f883 0062 	strb.w	r0, [r3, #98]	; 0x62
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    a502:	701a      	strb	r2, [r3, #0]
    if((tabptr->ipaddr[0] | tabptr->ipaddr[1]) != 0 &&
    a504:	260c      	movs	r6, #12
      memset(tabptr->ipaddr, 0, 4);
    a506:	1c9f      	adds	r7, r3, #2
    a508:	4615      	mov	r5, r2
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    a50a:	781a      	ldrb	r2, [r3, #0]
    a50c:	2a07      	cmp	r2, #7
    a50e:	d900      	bls.n	a512 <uip_arp_timer+0x22>
}
    a510:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((tabptr->ipaddr[0] | tabptr->ipaddr[1]) != 0 &&
    a512:	fb06 3402 	mla	r4, r6, r2, r3
    a516:	8861      	ldrh	r1, [r4, #2]
    a518:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    a51c:	ea41 010e 	orr.w	r1, r1, lr
    a520:	b289      	uxth	r1, r1
    a522:	b139      	cbz	r1, a534 <uip_arp_timer+0x44>
       arptime - tabptr->time >= UIP_ARP_MAXAGE) {
    a524:	7b21      	ldrb	r1, [r4, #12]
    a526:	1a41      	subs	r1, r0, r1
    if((tabptr->ipaddr[0] | tabptr->ipaddr[1]) != 0 &&
    a528:	2977      	cmp	r1, #119	; 0x77
      memset(tabptr->ipaddr, 0, 4);
    a52a:	bfc4      	itt	gt
    a52c:	eb02 0142 	addgt.w	r1, r2, r2, lsl #1
    a530:	f847 5021 	strgt.w	r5, [r7, r1, lsl #2]
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    a534:	3201      	adds	r2, #1
    a536:	701a      	strb	r2, [r3, #0]
    a538:	e7e7      	b.n	a50a <uip_arp_timer+0x1a>
    a53a:	bf00      	nop
    a53c:	200072c8 	.word	0x200072c8

0000a540 <uip_arp_arpin>:
 * global variable uip_len.
 */
/*-----------------------------------------------------------------------------------*/
void
uip_arp_arpin(void)
{
    a540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  
  if(uip_len < sizeof(struct arp_hdr)) {
    a544:	4d28      	ldr	r5, [pc, #160]	; (a5e8 <uip_arp_arpin+0xa8>)
    a546:	882b      	ldrh	r3, [r5, #0]
    a548:	2700      	movs	r7, #0
    a54a:	2b29      	cmp	r3, #41	; 0x29
    uip_len = 0;
    a54c:	802f      	strh	r7, [r5, #0]
  if(uip_len < sizeof(struct arp_hdr)) {
    a54e:	d801      	bhi.n	a554 <uip_arp_arpin+0x14>
    return;
    a550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  uip_len = 0;
  
  switch(BUF->opcode) {
    a554:	4c25      	ldr	r4, [pc, #148]	; (a5ec <uip_arp_arpin+0xac>)
    a556:	8aa3      	ldrh	r3, [r4, #20]
    a558:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    a55c:	d004      	beq.n	a568 <uip_arp_arpin+0x28>
    a55e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    a562:	d032      	beq.n	a5ca <uip_arp_arpin+0x8a>
    a564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  case HTONS(ARP_REQUEST):
    /* ARP request. If it asked for our address, we send out a
       reply. */
    if(uip_ipaddr_cmp(BUF->dipaddr, uip_hostaddr)) {
    a568:	4e21      	ldr	r6, [pc, #132]	; (a5f0 <uip_arp_arpin+0xb0>)
    a56a:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
    a56c:	8833      	ldrh	r3, [r6, #0]
    a56e:	429a      	cmp	r2, r3
    a570:	d138      	bne.n	a5e4 <uip_arp_arpin+0xa4>
    a572:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    a574:	8873      	ldrh	r3, [r6, #2]
    a576:	429a      	cmp	r2, r3
    a578:	d134      	bne.n	a5e4 <uip_arp_arpin+0xa4>
      /* First, we register the one who made the request in our ARP
	 table, since it is likely that we will do more communication
	 with this host in the future. */
      uip_arp_update(BUF->sipaddr, &BUF->shwaddr);
    a57a:	4b1e      	ldr	r3, [pc, #120]	; (a5f4 <uip_arp_arpin+0xb4>)
    a57c:	4798      	blx	r3
      
      /* The reply opcode is 2. */
      BUF->opcode = HTONS(2);
    a57e:	2302      	movs	r3, #2
    a580:	7563      	strb	r3, [r4, #21]

      memcpy(BUF->dhwaddr.addr, BUF->shwaddr.addr, 6);
    a582:	4623      	mov	r3, r4
      BUF->opcode = HTONS(2);
    a584:	7527      	strb	r7, [r4, #20]
      memcpy(BUF->dhwaddr.addr, BUF->shwaddr.addr, 6);
    a586:	f853 1f16 	ldr.w	r1, [r3, #22]!
    a58a:	6221      	str	r1, [r4, #32]
    a58c:	8899      	ldrh	r1, [r3, #4]
    a58e:	84a1      	strh	r1, [r4, #36]	; 0x24
      memcpy(BUF->shwaddr.addr, uip_ethaddr.addr, 6);
    a590:	4919      	ldr	r1, [pc, #100]	; (a5f8 <uip_arp_arpin+0xb8>)
    a592:	6808      	ldr	r0, [r1, #0]
    a594:	8889      	ldrh	r1, [r1, #4]
    a596:	f8c4 0016 	str.w	r0, [r4, #22]
    a59a:	8099      	strh	r1, [r3, #4]
      memcpy(BUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
      memcpy(BUF->ethhdr.dest.addr, BUF->dhwaddr.addr, 6);
    a59c:	6a23      	ldr	r3, [r4, #32]
    a59e:	6023      	str	r3, [r4, #0]
    a5a0:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    a5a2:	80a3      	strh	r3, [r4, #4]
      
      BUF->dipaddr[0] = BUF->sipaddr[0];
    a5a4:	8ba3      	ldrh	r3, [r4, #28]
    a5a6:	84e3      	strh	r3, [r4, #38]	; 0x26
      BUF->dipaddr[1] = BUF->sipaddr[1];
    a5a8:	8be3      	ldrh	r3, [r4, #30]
    a5aa:	8523      	strh	r3, [r4, #40]	; 0x28
      BUF->sipaddr[0] = uip_hostaddr[0];
    a5ac:	8833      	ldrh	r3, [r6, #0]
    a5ae:	83a3      	strh	r3, [r4, #28]
      BUF->sipaddr[1] = uip_hostaddr[1];
    a5b0:	8873      	ldrh	r3, [r6, #2]
    a5b2:	83e3      	strh	r3, [r4, #30]

      BUF->ethhdr.type = HTONS(UIP_ETHTYPE_ARP);
    a5b4:	2308      	movs	r3, #8
    a5b6:	7323      	strb	r3, [r4, #12]
    a5b8:	2306      	movs	r3, #6
    a5ba:	7363      	strb	r3, [r4, #13]
      memcpy(BUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
    a5bc:	f8c4 0006 	str.w	r0, [r4, #6]
      uip_len = sizeof(struct arp_hdr);
    a5c0:	232a      	movs	r3, #42	; 0x2a
      memcpy(BUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
    a5c2:	8161      	strh	r1, [r4, #10]
      uip_len = sizeof(struct arp_hdr);
    a5c4:	802b      	strh	r3, [r5, #0]
    a5c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    break;
  case HTONS(ARP_REPLY):
    /* ARP reply. We insert or update the ARP table if it was meant
       for us. */
    if(uip_ipaddr_cmp(BUF->dipaddr, uip_hostaddr)) {
    a5ca:	4b09      	ldr	r3, [pc, #36]	; (a5f0 <uip_arp_arpin+0xb0>)
    a5cc:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
    a5ce:	881a      	ldrh	r2, [r3, #0]
    a5d0:	4291      	cmp	r1, r2
    a5d2:	d107      	bne.n	a5e4 <uip_arp_arpin+0xa4>
    a5d4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    a5d6:	885b      	ldrh	r3, [r3, #2]
    a5d8:	429a      	cmp	r2, r3
    a5da:	d103      	bne.n	a5e4 <uip_arp_arpin+0xa4>
      uip_arp_update(BUF->sipaddr, &BUF->shwaddr);
    a5dc:	4b05      	ldr	r3, [pc, #20]	; (a5f4 <uip_arp_arpin+0xb4>)
    }
    break;
  }

  return;
}
    a5de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      uip_arp_update(BUF->sipaddr, &BUF->shwaddr);
    a5e2:	4718      	bx	r3
    a5e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a5e8:	20008550 	.word	0x20008550
    a5ec:	20008622 	.word	0x20008622
    a5f0:	2000861e 	.word	0x2000861e
    a5f4:	0000a3cd 	.word	0x0000a3cd
    a5f8:	200072c2 	.word	0x200072c2

0000a5fc <uip_arp_out>:

     If not ARP table entry is found, we overwrite the original IP
     packet with an ARP request for the IP address. */

  /* First check if destination is a local broadcast. */
  if(uip_ipaddr_cmp(IPBUF->destipaddr, broadcast_ipaddr)) {
    a5fc:	4b43      	ldr	r3, [pc, #268]	; (a70c <uip_arp_out+0x110>)
    a5fe:	8bda      	ldrh	r2, [r3, #30]
    a600:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a604:	428a      	cmp	r2, r1
{
    a606:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(uip_ipaddr_cmp(IPBUF->destipaddr, broadcast_ipaddr)) {
    a608:	d117      	bne.n	a63a <uip_arp_out+0x3e>
    a60a:	8c19      	ldrh	r1, [r3, #32]
    a60c:	4291      	cmp	r1, r2
    a60e:	d114      	bne.n	a63a <uip_arp_out+0x3e>
    memcpy(IPBUF->ethhdr.dest.addr, broadcast_ethaddr.addr, 6);
    a610:	4a3f      	ldr	r2, [pc, #252]	; (a710 <uip_arp_out+0x114>)
    a612:	6811      	ldr	r1, [r2, #0]
    a614:	8892      	ldrh	r2, [r2, #4]
    a616:	6019      	str	r1, [r3, #0]
      uip_len = sizeof(struct arp_hdr);
      return;
    }

    /* Build an ethernet header. */
    memcpy(IPBUF->ethhdr.dest.addr, tabptr->ethaddr.addr, 6);
    a618:	809a      	strh	r2, [r3, #4]
  }
  memcpy(IPBUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
    a61a:	4a3e      	ldr	r2, [pc, #248]	; (a714 <uip_arp_out+0x118>)
    a61c:	6811      	ldr	r1, [r2, #0]
    a61e:	f8c3 1006 	str.w	r1, [r3, #6]
    a622:	8891      	ldrh	r1, [r2, #4]
    a624:	4a3c      	ldr	r2, [pc, #240]	; (a718 <uip_arp_out+0x11c>)
    a626:	8091      	strh	r1, [r2, #4]
  
  IPBUF->ethhdr.type = HTONS(UIP_ETHTYPE_IP);
    a628:	2208      	movs	r2, #8
    a62a:	731a      	strb	r2, [r3, #12]
    a62c:	2200      	movs	r2, #0
    a62e:	735a      	strb	r2, [r3, #13]

  uip_len += sizeof(struct uip_eth_hdr);
    a630:	4a3a      	ldr	r2, [pc, #232]	; (a71c <uip_arp_out+0x120>)
    a632:	8813      	ldrh	r3, [r2, #0]
    a634:	330e      	adds	r3, #14
    a636:	8013      	strh	r3, [r2, #0]
    a638:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(!uip_ipaddr_maskcmp(IPBUF->destipaddr, uip_hostaddr, uip_netmask)) {
    a63a:	4c39      	ldr	r4, [pc, #228]	; (a720 <uip_arp_out+0x124>)
    a63c:	4e39      	ldr	r6, [pc, #228]	; (a724 <uip_arp_out+0x128>)
    a63e:	8821      	ldrh	r1, [r4, #0]
    a640:	8830      	ldrh	r0, [r6, #0]
    a642:	4051      	eors	r1, r2
    a644:	4201      	tst	r1, r0
    a646:	4838      	ldr	r0, [pc, #224]	; (a728 <uip_arp_out+0x12c>)
    a648:	d105      	bne.n	a656 <uip_arp_out+0x5a>
    a64a:	8c1d      	ldrh	r5, [r3, #32]
    a64c:	8861      	ldrh	r1, [r4, #2]
    a64e:	8876      	ldrh	r6, [r6, #2]
    a650:	4069      	eors	r1, r5
    a652:	4231      	tst	r1, r6
    a654:	d040      	beq.n	a6d8 <uip_arp_out+0xdc>
      uip_ipaddr_copy(ipaddr, uip_draddr);
    a656:	4a35      	ldr	r2, [pc, #212]	; (a72c <uip_arp_out+0x130>)
    a658:	8811      	ldrh	r1, [r2, #0]
    a65a:	8852      	ldrh	r2, [r2, #2]
    a65c:	f8a0 1066 	strh.w	r1, [r0, #102]	; 0x66
    a660:	f8a0 2068 	strh.w	r2, [r0, #104]	; 0x68
    for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    a664:	2200      	movs	r2, #0
      if(uip_ipaddr_cmp(ipaddr, tabptr->ipaddr)) {
    a666:	f8b0 7066 	ldrh.w	r7, [r0, #102]	; 0x66
    a66a:	f8b0 6068 	ldrh.w	r6, [r0, #104]	; 0x68
    a66e:	4930      	ldr	r1, [pc, #192]	; (a730 <uip_arp_out+0x134>)
    for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    a670:	7002      	strb	r2, [r0, #0]
    a672:	4615      	mov	r5, r2
    a674:	2a08      	cmp	r2, #8
    a676:	d134      	bne.n	a6e2 <uip_arp_out+0xe6>
    a678:	b105      	cbz	r5, a67c <uip_arp_out+0x80>
    a67a:	7002      	strb	r2, [r0, #0]
      memset(BUF->ethhdr.dest.addr, 0xff, 6);
    a67c:	f04f 32ff 	mov.w	r2, #4294967295
      memcpy(BUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
    a680:	4824      	ldr	r0, [pc, #144]	; (a714 <uip_arp_out+0x118>)
      memset(BUF->ethhdr.dest.addr, 0xff, 6);
    a682:	601a      	str	r2, [r3, #0]
    a684:	809a      	strh	r2, [r3, #4]
      memset(BUF->dhwaddr.addr, 0x00, 6);
    a686:	4a2b      	ldr	r2, [pc, #172]	; (a734 <uip_arp_out+0x138>)
      memcpy(BUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
    a688:	6805      	ldr	r5, [r0, #0]
    a68a:	8880      	ldrh	r0, [r0, #4]
    a68c:	f8c3 5006 	str.w	r5, [r3, #6]
      memcpy(BUF->shwaddr.addr, uip_ethaddr.addr, 6);
    a690:	f8c3 5016 	str.w	r5, [r3, #22]
      memcpy(BUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
    a694:	f822 0c16 	strh.w	r0, [r2, #-22]
      memcpy(BUF->shwaddr.addr, uip_ethaddr.addr, 6);
    a698:	f822 0c06 	strh.w	r0, [r2, #-6]
      uip_ipaddr_copy(BUF->sipaddr, uip_hostaddr);
    a69c:	8820      	ldrh	r0, [r4, #0]
    a69e:	8398      	strh	r0, [r3, #28]
    a6a0:	8860      	ldrh	r0, [r4, #2]
    a6a2:	83d8      	strh	r0, [r3, #30]
      memset(BUF->dhwaddr.addr, 0x00, 6);
    a6a4:	2100      	movs	r1, #0
      BUF->opcode = HTONS(ARP_REQUEST); /* ARP request. */
    a6a6:	2001      	movs	r0, #1
      memset(BUF->dhwaddr.addr, 0x00, 6);
    a6a8:	6219      	str	r1, [r3, #32]
      BUF->opcode = HTONS(ARP_REQUEST); /* ARP request. */
    a6aa:	7519      	strb	r1, [r3, #20]
      memset(BUF->dhwaddr.addr, 0x00, 6);
    a6ac:	8091      	strh	r1, [r2, #4]
      BUF->opcode = HTONS(ARP_REQUEST); /* ARP request. */
    a6ae:	7558      	strb	r0, [r3, #21]
      BUF->hwtype = HTONS(ARP_HWTYPE_ETH);
    a6b0:	7399      	strb	r1, [r3, #14]
    a6b2:	73d8      	strb	r0, [r3, #15]
      BUF->protocol = HTONS(UIP_ETHTYPE_IP);
    a6b4:	7459      	strb	r1, [r3, #17]
    a6b6:	2008      	movs	r0, #8
      BUF->hwlen = 6;
    a6b8:	2106      	movs	r1, #6
      BUF->protolen = 4;
    a6ba:	2404      	movs	r4, #4
      uip_ipaddr_copy(BUF->dipaddr, ipaddr);
    a6bc:	84df      	strh	r7, [r3, #38]	; 0x26
    a6be:	851e      	strh	r6, [r3, #40]	; 0x28
      BUF->protocol = HTONS(UIP_ETHTYPE_IP);
    a6c0:	7418      	strb	r0, [r3, #16]
      BUF->hwlen = 6;
    a6c2:	7499      	strb	r1, [r3, #18]
      BUF->protolen = 4;
    a6c4:	74dc      	strb	r4, [r3, #19]
      BUF->ethhdr.type = HTONS(UIP_ETHTYPE_ARP);
    a6c6:	7318      	strb	r0, [r3, #12]
    a6c8:	7359      	strb	r1, [r3, #13]
      uip_appdata = &uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN];
    a6ca:	4b1b      	ldr	r3, [pc, #108]	; (a738 <uip_arp_out+0x13c>)
    a6cc:	3216      	adds	r2, #22
    a6ce:	601a      	str	r2, [r3, #0]
      uip_len = sizeof(struct arp_hdr);
    a6d0:	4b12      	ldr	r3, [pc, #72]	; (a71c <uip_arp_out+0x120>)
    a6d2:	222a      	movs	r2, #42	; 0x2a
    a6d4:	801a      	strh	r2, [r3, #0]
      return;
    a6d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      uip_ipaddr_copy(ipaddr, IPBUF->destipaddr);
    a6d8:	f8a0 2066 	strh.w	r2, [r0, #102]	; 0x66
    a6dc:	f8a0 5068 	strh.w	r5, [r0, #104]	; 0x68
    a6e0:	e7c0      	b.n	a664 <uip_arp_out+0x68>
      if(uip_ipaddr_cmp(ipaddr, tabptr->ipaddr)) {
    a6e2:	f8b1 e000 	ldrh.w	lr, [r1]
    a6e6:	45be      	cmp	lr, r7
    a6e8:	d103      	bne.n	a6f2 <uip_arp_out+0xf6>
    a6ea:	f8b1 e002 	ldrh.w	lr, [r1, #2]
    a6ee:	45b6      	cmp	lr, r6
    a6f0:	d004      	beq.n	a6fc <uip_arp_out+0x100>
    a6f2:	3201      	adds	r2, #1
    a6f4:	b2d2      	uxtb	r2, r2
    a6f6:	310c      	adds	r1, #12
    a6f8:	2501      	movs	r5, #1
    a6fa:	e7bb      	b.n	a674 <uip_arp_out+0x78>
    a6fc:	b105      	cbz	r5, a700 <uip_arp_out+0x104>
    a6fe:	7002      	strb	r2, [r0, #0]
    memcpy(IPBUF->ethhdr.dest.addr, tabptr->ethaddr.addr, 6);
    a700:	f851 2f04 	ldr.w	r2, [r1, #4]!
    a704:	601a      	str	r2, [r3, #0]
    a706:	888a      	ldrh	r2, [r1, #4]
    a708:	e786      	b.n	a618 <uip_arp_out+0x1c>
    a70a:	bf00      	nop
    a70c:	20008622 	.word	0x20008622
    a710:	0000f2db 	.word	0x0000f2db
    a714:	200072c2 	.word	0x200072c2
    a718:	20008628 	.word	0x20008628
    a71c:	20008550 	.word	0x20008550
    a720:	2000861e 	.word	0x2000861e
    a724:	2000861a 	.word	0x2000861a
    a728:	200072c8 	.word	0x200072c8
    a72c:	200085e2 	.word	0x200085e2
    a730:	200072ca 	.word	0x200072ca
    a734:	20008642 	.word	0x20008642
    a738:	20008564 	.word	0x20008564

0000a73c <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    a73c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    a740:	4616      	mov	r6, r2
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    a742:	780a      	ldrb	r2, [r1, #0]
    a744:	f3c2 1341 	ubfx	r3, r2, #5, #2
    a748:	2b01      	cmp	r3, #1
{
    a74a:	4607      	mov	r7, r0
    a74c:	460c      	mov	r4, r1
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    a74e:	d155      	bne.n	a7fc <cdcdf_acm_req+0xc0>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    a750:	4b2d      	ldr	r3, [pc, #180]	; (a808 <cdcdf_acm_req+0xcc>)
    a752:	8889      	ldrh	r1, [r1, #4]
    a754:	7818      	ldrb	r0, [r3, #0]
    a756:	4288      	cmp	r0, r1
    a758:	461d      	mov	r5, r3
    a75a:	d002      	beq.n	a762 <cdcdf_acm_req+0x26>
    a75c:	785b      	ldrb	r3, [r3, #1]
    a75e:	428b      	cmp	r3, r1
    a760:	d14c      	bne.n	a7fc <cdcdf_acm_req+0xc0>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    a762:	0613      	lsls	r3, r2, #24
    a764:	d50f      	bpl.n	a786 <cdcdf_acm_req+0x4a>
	if (USB_DATA_STAGE == stage) {
    a766:	2e01      	cmp	r6, #1
    a768:	d035      	beq.n	a7d6 <cdcdf_acm_req+0x9a>
	switch (req->bRequest) {
    a76a:	7863      	ldrb	r3, [r4, #1]
    a76c:	2b21      	cmp	r3, #33	; 0x21
    a76e:	d114      	bne.n	a79a <cdcdf_acm_req+0x5e>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    a770:	88e2      	ldrh	r2, [r4, #6]
    a772:	2a07      	cmp	r2, #7
    a774:	d145      	bne.n	a802 <cdcdf_acm_req+0xc6>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    a776:	4925      	ldr	r1, [pc, #148]	; (a80c <cdcdf_acm_req+0xd0>)
    a778:	2300      	movs	r3, #0
			return usbdc_xfer(ep, ctrl_buf, len, false);
    a77a:	4638      	mov	r0, r7
    a77c:	4c24      	ldr	r4, [pc, #144]	; (a810 <cdcdf_acm_req+0xd4>)
    a77e:	47a0      	blx	r4
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    a780:	b002      	add	sp, #8
    a782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    a786:	4b23      	ldr	r3, [pc, #140]	; (a814 <cdcdf_acm_req+0xd8>)
	uint16_t                   len      = req->wLength;
    a788:	f8b4 8006 	ldrh.w	r8, [r4, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    a78c:	4798      	blx	r3
	switch (req->bRequest) {
    a78e:	7863      	ldrb	r3, [r4, #1]
    a790:	2b20      	cmp	r3, #32
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    a792:	4601      	mov	r1, r0
	switch (req->bRequest) {
    a794:	d004      	beq.n	a7a0 <cdcdf_acm_req+0x64>
    a796:	2b22      	cmp	r3, #34	; 0x22
    a798:	d024      	beq.n	a7e4 <cdcdf_acm_req+0xa8>
		return ERR_INVALID_ARG;
    a79a:	f06f 000c 	mvn.w	r0, #12
    a79e:	e7ef      	b.n	a780 <cdcdf_acm_req+0x44>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    a7a0:	f1b8 0f07 	cmp.w	r8, #7
    a7a4:	d12d      	bne.n	a802 <cdcdf_acm_req+0xc6>
		if (USB_SETUP_STAGE == stage) {
    a7a6:	b916      	cbnz	r6, a7ae <cdcdf_acm_req+0x72>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    a7a8:	4633      	mov	r3, r6
    a7aa:	4642      	mov	r2, r8
    a7ac:	e7e5      	b.n	a77a <cdcdf_acm_req+0x3e>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    a7ae:	6800      	ldr	r0, [r0, #0]
    a7b0:	9000      	str	r0, [sp, #0]
    a7b2:	798b      	ldrb	r3, [r1, #6]
    a7b4:	888a      	ldrh	r2, [r1, #4]
    a7b6:	f88d 3006 	strb.w	r3, [sp, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    a7ba:	692b      	ldr	r3, [r5, #16]
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    a7bc:	f8ad 2004 	strh.w	r2, [sp, #4]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    a7c0:	b95b      	cbnz	r3, a7da <cdcdf_acm_req+0x9e>
				usbd_cdc_line_coding = line_coding_tmp;
    a7c2:	4b12      	ldr	r3, [pc, #72]	; (a80c <cdcdf_acm_req+0xd0>)
    a7c4:	9800      	ldr	r0, [sp, #0]
    a7c6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    a7ca:	f89d 2006 	ldrb.w	r2, [sp, #6]
    a7ce:	f8c5 0006 	str.w	r0, [r5, #6]
    a7d2:	8099      	strh	r1, [r3, #4]
    a7d4:	719a      	strb	r2, [r3, #6]
		return ERR_NONE;
    a7d6:	2000      	movs	r0, #0
    a7d8:	e7d2      	b.n	a780 <cdcdf_acm_req+0x44>
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    a7da:	4668      	mov	r0, sp
    a7dc:	4798      	blx	r3
    a7de:	2800      	cmp	r0, #0
    a7e0:	d1ef      	bne.n	a7c2 <cdcdf_acm_req+0x86>
    a7e2:	e7f8      	b.n	a7d6 <cdcdf_acm_req+0x9a>
		usbdc_xfer(0, NULL, 0, 0);
    a7e4:	2300      	movs	r3, #0
    a7e6:	461a      	mov	r2, r3
    a7e8:	4619      	mov	r1, r3
    a7ea:	4618      	mov	r0, r3
    a7ec:	4e08      	ldr	r6, [pc, #32]	; (a810 <cdcdf_acm_req+0xd4>)
    a7ee:	47b0      	blx	r6
		if (NULL != cdcdf_acm_notify_state) {
    a7f0:	696b      	ldr	r3, [r5, #20]
    a7f2:	2b00      	cmp	r3, #0
    a7f4:	d0ef      	beq.n	a7d6 <cdcdf_acm_req+0x9a>
			cdcdf_acm_notify_state(req->wValue);
    a7f6:	8860      	ldrh	r0, [r4, #2]
    a7f8:	4798      	blx	r3
    a7fa:	e7ec      	b.n	a7d6 <cdcdf_acm_req+0x9a>
		return ERR_NOT_FOUND;
    a7fc:	f06f 0009 	mvn.w	r0, #9
    a800:	e7be      	b.n	a780 <cdcdf_acm_req+0x44>
			return ERR_INVALID_DATA;
    a802:	f04f 30ff 	mov.w	r0, #4294967295
    a806:	e7bb      	b.n	a780 <cdcdf_acm_req+0x44>
    a808:	20007334 	.word	0x20007334
    a80c:	2000733a 	.word	0x2000733a
    a810:	0000ab8d 	.word	0x0000ab8d
    a814:	0000afa9 	.word	0x0000afa9

0000a818 <cdcdf_acm_ctrl>:
	switch (ctrl) {
    a818:	2901      	cmp	r1, #1
{
    a81a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a81e:	4615      	mov	r5, r2
	switch (ctrl) {
    a820:	d054      	beq.n	a8cc <cdcdf_acm_ctrl+0xb4>
    a822:	d307      	bcc.n	a834 <cdcdf_acm_ctrl+0x1c>
		return ERR_INVALID_ARG;
    a824:	2902      	cmp	r1, #2
    a826:	bf0c      	ite	eq
    a828:	f06f 001a 	mvneq.w	r0, #26
    a82c:	f06f 000c 	mvnne.w	r0, #12
    a830:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a834:	6887      	ldr	r7, [r0, #8]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    a836:	f8df 8110 	ldr.w	r8, [pc, #272]	; a948 <cdcdf_acm_ctrl+0x130>
	ifc = desc->sod;
    a83a:	6810      	ldr	r0, [r2, #0]
    a83c:	1e7e      	subs	r6, r7, #1
    a83e:	f107 0a01 	add.w	sl, r7, #1
		if (NULL == ifc) {
    a842:	b918      	cbnz	r0, a84c <cdcdf_acm_ctrl+0x34>
			return ERR_NOT_FOUND;
    a844:	f06f 0009 	mvn.w	r0, #9
    a848:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    a84c:	7943      	ldrb	r3, [r0, #5]
		ifc_desc.bInterfaceNumber = ifc[2];
    a84e:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    a850:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    a854:	2b02      	cmp	r3, #2
    a856:	d1f5      	bne.n	a844 <cdcdf_acm_ctrl+0x2c>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    a858:	f816 3f01 	ldrb.w	r3, [r6, #1]!
    a85c:	429a      	cmp	r2, r3
    a85e:	d05f      	beq.n	a920 <cdcdf_acm_ctrl+0x108>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    a860:	2bff      	cmp	r3, #255	; 0xff
    a862:	d161      	bne.n	a928 <cdcdf_acm_ctrl+0x110>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    a864:	7032      	strb	r2, [r6, #0]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    a866:	6869      	ldr	r1, [r5, #4]
    a868:	f8df 90e0 	ldr.w	r9, [pc, #224]	; a94c <cdcdf_acm_ctrl+0x134>
    a86c:	2205      	movs	r2, #5
    a86e:	47c0      	blx	r8
    a870:	4604      	mov	r4, r0
		while (NULL != ep) {
    a872:	b96c      	cbnz	r4, a890 <cdcdf_acm_ctrl+0x78>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    a874:	682b      	ldr	r3, [r5, #0]
    a876:	6869      	ldr	r1, [r5, #4]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    a878:	7818      	ldrb	r0, [r3, #0]
    a87a:	2204      	movs	r2, #4
    a87c:	4418      	add	r0, r3
    a87e:	47c0      	blx	r8
	for (i = 0; i < 2; i++) {
    a880:	45b2      	cmp	sl, r6
    a882:	d1de      	bne.n	a842 <cdcdf_acm_ctrl+0x2a>
	_cdcdf_acm_funcd.enabled = true;
    a884:	4b2c      	ldr	r3, [pc, #176]	; (a938 <cdcdf_acm_ctrl+0x120>)
    a886:	2201      	movs	r2, #1
    a888:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    a88a:	4620      	mov	r0, r4
    a88c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (ptr[0] + (ptr[1] << 8));
    a890:	7961      	ldrb	r1, [r4, #5]
    a892:	7922      	ldrb	r2, [r4, #4]
			ep_desc.bEndpointAddress = ep[2];
    a894:	f894 b002 	ldrb.w	fp, [r4, #2]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    a898:	4b28      	ldr	r3, [pc, #160]	; (a93c <cdcdf_acm_ctrl+0x124>)
    a89a:	eb02 2201 	add.w	r2, r2, r1, lsl #8
    a89e:	b292      	uxth	r2, r2
    a8a0:	78e1      	ldrb	r1, [r4, #3]
    a8a2:	4658      	mov	r0, fp
    a8a4:	4798      	blx	r3
    a8a6:	2800      	cmp	r0, #0
    a8a8:	d142      	bne.n	a930 <cdcdf_acm_ctrl+0x118>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    a8aa:	f01b 0f80 	tst.w	fp, #128	; 0x80
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    a8ae:	bf14      	ite	ne
    a8b0:	f886 b002 	strbne.w	fp, [r6, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    a8b4:	f887 b004 	strbeq.w	fp, [r7, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    a8b8:	4658      	mov	r0, fp
    a8ba:	47c8      	blx	r9
			desc->sod = ep;
    a8bc:	602c      	str	r4, [r5, #0]
	return (desc + usb_desc_len(desc));
    a8be:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    a8c0:	6869      	ldr	r1, [r5, #4]
    a8c2:	4b1f      	ldr	r3, [pc, #124]	; (a940 <cdcdf_acm_ctrl+0x128>)
    a8c4:	4420      	add	r0, r4
    a8c6:	4798      	blx	r3
    a8c8:	4604      	mov	r4, r0
    a8ca:	e7d2      	b.n	a872 <cdcdf_acm_ctrl+0x5a>
    a8cc:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    a8ce:	b12a      	cbz	r2, a8dc <cdcdf_acm_ctrl+0xc4>
		ifc_desc.bInterfaceClass = desc->sod[5];
    a8d0:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    a8d2:	795b      	ldrb	r3, [r3, #5]
    a8d4:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    a8d8:	2b02      	cmp	r3, #2
    a8da:	d1b3      	bne.n	a844 <cdcdf_acm_ctrl+0x2c>
		if (func_data->func_iface[i] == 0xFF) {
    a8dc:	7823      	ldrb	r3, [r4, #0]
    a8de:	2bff      	cmp	r3, #255	; 0xff
    a8e0:	d007      	beq.n	a8f2 <cdcdf_acm_ctrl+0xda>
			if (func_data->func_ep_in[i] != 0xFF) {
    a8e2:	78a0      	ldrb	r0, [r4, #2]
			func_data->func_iface[i] = 0xFF;
    a8e4:	25ff      	movs	r5, #255	; 0xff
			if (func_data->func_ep_in[i] != 0xFF) {
    a8e6:	42a8      	cmp	r0, r5
			func_data->func_iface[i] = 0xFF;
    a8e8:	7025      	strb	r5, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    a8ea:	d002      	beq.n	a8f2 <cdcdf_acm_ctrl+0xda>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    a8ec:	4b15      	ldr	r3, [pc, #84]	; (a944 <cdcdf_acm_ctrl+0x12c>)
    a8ee:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    a8f0:	70a5      	strb	r5, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    a8f2:	7863      	ldrb	r3, [r4, #1]
    a8f4:	2bff      	cmp	r3, #255	; 0xff
    a8f6:	d007      	beq.n	a908 <cdcdf_acm_ctrl+0xf0>
			if (func_data->func_ep_in[i] != 0xFF) {
    a8f8:	78e0      	ldrb	r0, [r4, #3]
			func_data->func_iface[i] = 0xFF;
    a8fa:	25ff      	movs	r5, #255	; 0xff
			if (func_data->func_ep_in[i] != 0xFF) {
    a8fc:	42a8      	cmp	r0, r5
			func_data->func_iface[i] = 0xFF;
    a8fe:	7065      	strb	r5, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    a900:	d002      	beq.n	a908 <cdcdf_acm_ctrl+0xf0>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    a902:	4b10      	ldr	r3, [pc, #64]	; (a944 <cdcdf_acm_ctrl+0x12c>)
    a904:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    a906:	70e5      	strb	r5, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    a908:	7920      	ldrb	r0, [r4, #4]
    a90a:	28ff      	cmp	r0, #255	; 0xff
    a90c:	d003      	beq.n	a916 <cdcdf_acm_ctrl+0xfe>
		usb_d_ep_deinit(func_data->func_ep_out);
    a90e:	4b0d      	ldr	r3, [pc, #52]	; (a944 <cdcdf_acm_ctrl+0x12c>)
    a910:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    a912:	23ff      	movs	r3, #255	; 0xff
    a914:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    a916:	4b08      	ldr	r3, [pc, #32]	; (a938 <cdcdf_acm_ctrl+0x120>)
    a918:	2000      	movs	r0, #0
    a91a:	7158      	strb	r0, [r3, #5]
    a91c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				return ERR_ALREADY_INITIALIZED;
    a920:	f06f 0011 	mvn.w	r0, #17
    a924:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				return ERR_NO_RESOURCE;
    a928:	f06f 001b 	mvn.w	r0, #27
    a92c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				return ERR_NOT_INITIALIZED;
    a930:	f06f 0013 	mvn.w	r0, #19
}
    a934:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a938:	20007334 	.word	0x20007334
    a93c:	00001d69 	.word	0x00001d69
    a940:	0000afe3 	.word	0x0000afe3
    a944:	00001dc9 	.word	0x00001dc9
    a948:	0000afc9 	.word	0x0000afc9
    a94c:	00001df5 	.word	0x00001df5

0000a950 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    a950:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    a952:	4b0a      	ldr	r3, [pc, #40]	; (a97c <cdcdf_acm_init+0x2c>)
    a954:	4798      	blx	r3
    a956:	2801      	cmp	r0, #1
    a958:	d80c      	bhi.n	a974 <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    a95a:	4809      	ldr	r0, [pc, #36]	; (a980 <cdcdf_acm_init+0x30>)
    a95c:	4b09      	ldr	r3, [pc, #36]	; (a984 <cdcdf_acm_init+0x34>)
    a95e:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    a960:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    a962:	4b09      	ldr	r3, [pc, #36]	; (a988 <cdcdf_acm_init+0x38>)
    a964:	3018      	adds	r0, #24
    a966:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    a968:	4908      	ldr	r1, [pc, #32]	; (a98c <cdcdf_acm_init+0x3c>)
    a96a:	4b09      	ldr	r3, [pc, #36]	; (a990 <cdcdf_acm_init+0x40>)
    a96c:	2001      	movs	r0, #1
    a96e:	4798      	blx	r3
	return ERR_NONE;
    a970:	2000      	movs	r0, #0
    a972:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    a974:	f06f 0010 	mvn.w	r0, #16
}
    a978:	bd08      	pop	{r3, pc}
    a97a:	bf00      	nop
    a97c:	0000afb5 	.word	0x0000afb5
    a980:	20007334 	.word	0x20007334
    a984:	0000a819 	.word	0x0000a819
    a988:	0000af5d 	.word	0x0000af5d
    a98c:	20000014 	.word	0x20000014
    a990:	0000aed5 	.word	0x0000aed5

0000a994 <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    a994:	b410      	push	{r4}
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    a996:	4c07      	ldr	r4, [pc, #28]	; (a9b4 <cdcdf_acm_read+0x20>)
	if (!cdcdf_acm_is_enabled()) {
    a998:	7963      	ldrb	r3, [r4, #5]
{
    a99a:	460a      	mov	r2, r1
	if (!cdcdf_acm_is_enabled()) {
    a99c:	b133      	cbz	r3, a9ac <cdcdf_acm_read+0x18>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    a99e:	4601      	mov	r1, r0
    a9a0:	7920      	ldrb	r0, [r4, #4]
    a9a2:	4c05      	ldr	r4, [pc, #20]	; (a9b8 <cdcdf_acm_read+0x24>)
    a9a4:	2300      	movs	r3, #0
    a9a6:	46a4      	mov	ip, r4
}
    a9a8:	bc10      	pop	{r4}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    a9aa:	4760      	bx	ip
}
    a9ac:	f06f 0010 	mvn.w	r0, #16
    a9b0:	bc10      	pop	{r4}
    a9b2:	4770      	bx	lr
    a9b4:	20007334 	.word	0x20007334
    a9b8:	0000ab8d 	.word	0x0000ab8d

0000a9bc <cdcdf_acm_write>:
{
    a9bc:	b410      	push	{r4}
	return _cdcdf_acm_funcd.enabled;
    a9be:	4c07      	ldr	r4, [pc, #28]	; (a9dc <cdcdf_acm_write+0x20>)
	if (!cdcdf_acm_is_enabled()) {
    a9c0:	7963      	ldrb	r3, [r4, #5]
{
    a9c2:	460a      	mov	r2, r1
	if (!cdcdf_acm_is_enabled()) {
    a9c4:	b133      	cbz	r3, a9d4 <cdcdf_acm_write+0x18>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    a9c6:	4601      	mov	r1, r0
    a9c8:	78e0      	ldrb	r0, [r4, #3]
    a9ca:	4c05      	ldr	r4, [pc, #20]	; (a9e0 <cdcdf_acm_write+0x24>)
    a9cc:	2301      	movs	r3, #1
    a9ce:	46a4      	mov	ip, r4
}
    a9d0:	bc10      	pop	{r4}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    a9d2:	4760      	bx	ip
}
    a9d4:	f06f 0010 	mvn.w	r0, #16
    a9d8:	bc10      	pop	{r4}
    a9da:	4770      	bx	lr
    a9dc:	20007334 	.word	0x20007334
    a9e0:	0000ab8d 	.word	0x0000ab8d

0000a9e4 <cdcdf_acm_register_callback>:
{
    a9e4:	b508      	push	{r3, lr}
    a9e6:	460a      	mov	r2, r1
	switch (cb_type) {
    a9e8:	2803      	cmp	r0, #3
    a9ea:	d814      	bhi.n	aa16 <cdcdf_acm_register_callback+0x32>
    a9ec:	e8df f000 	tbb	[pc, r0]
    a9f0:	100d0902 	.word	0x100d0902
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    a9f4:	4b09      	ldr	r3, [pc, #36]	; (aa1c <cdcdf_acm_register_callback+0x38>)
    a9f6:	7918      	ldrb	r0, [r3, #4]
    a9f8:	2102      	movs	r1, #2
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    a9fa:	4b09      	ldr	r3, [pc, #36]	; (aa20 <cdcdf_acm_register_callback+0x3c>)
    a9fc:	4798      	blx	r3
	return ERR_NONE;
    a9fe:	2000      	movs	r0, #0
		break;
    aa00:	bd08      	pop	{r3, pc}
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    aa02:	4b06      	ldr	r3, [pc, #24]	; (aa1c <cdcdf_acm_register_callback+0x38>)
    aa04:	2102      	movs	r1, #2
    aa06:	78d8      	ldrb	r0, [r3, #3]
    aa08:	e7f7      	b.n	a9fa <cdcdf_acm_register_callback+0x16>
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    aa0a:	4b04      	ldr	r3, [pc, #16]	; (aa1c <cdcdf_acm_register_callback+0x38>)
    aa0c:	6119      	str	r1, [r3, #16]
    aa0e:	e7f6      	b.n	a9fe <cdcdf_acm_register_callback+0x1a>
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    aa10:	4b02      	ldr	r3, [pc, #8]	; (aa1c <cdcdf_acm_register_callback+0x38>)
    aa12:	6159      	str	r1, [r3, #20]
    aa14:	e7f3      	b.n	a9fe <cdcdf_acm_register_callback+0x1a>
		return ERR_INVALID_ARG;
    aa16:	f06f 000c 	mvn.w	r0, #12
}
    aa1a:	bd08      	pop	{r3, pc}
    aa1c:	20007334 	.word	0x20007334
    aa20:	00001f91 	.word	0x00001f91

0000aa24 <usbdc_unconfig>:
/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    aa24:	4b05      	ldr	r3, [pc, #20]	; (aa3c <usbdc_unconfig+0x18>)
{
    aa26:	b510      	push	{r4, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    aa28:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    aa2a:	b904      	cbnz	r4, aa2e <usbdc_unconfig+0xa>
		func->ctrl(func, USBDF_DISABLE, NULL);
		func = func->next;
	}
}
    aa2c:	bd10      	pop	{r4, pc}
		func->ctrl(func, USBDF_DISABLE, NULL);
    aa2e:	6863      	ldr	r3, [r4, #4]
    aa30:	4620      	mov	r0, r4
    aa32:	2200      	movs	r2, #0
    aa34:	2101      	movs	r1, #1
    aa36:	4798      	blx	r3
		func = func->next;
    aa38:	6824      	ldr	r4, [r4, #0]
    aa3a:	e7f6      	b.n	aa2a <usbdc_unconfig+0x6>
    aa3c:	20007358 	.word	0x20007358

0000aa40 <usbdc_change_notify>:
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    aa40:	4b06      	ldr	r3, [pc, #24]	; (aa5c <usbdc_change_notify+0x1c>)
{
    aa42:	b570      	push	{r4, r5, r6, lr}
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    aa44:	68dc      	ldr	r4, [r3, #12]
{
    aa46:	4605      	mov	r5, r0
    aa48:	460e      	mov	r6, r1

	while (cg != NULL) {
    aa4a:	b904      	cbnz	r4, aa4e <usbdc_change_notify+0xe>
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
	}
}
    aa4c:	bd70      	pop	{r4, r5, r6, pc}
		if (NULL != cg->cb) {
    aa4e:	6863      	ldr	r3, [r4, #4]
    aa50:	b113      	cbz	r3, aa58 <usbdc_change_notify+0x18>
			cg->cb(change, value);
    aa52:	4631      	mov	r1, r6
    aa54:	4628      	mov	r0, r5
    aa56:	4798      	blx	r3
		cg = cg->next;
    aa58:	6824      	ldr	r4, [r4, #0]
    aa5a:	e7f6      	b.n	aa4a <usbdc_change_notify+0xa>
    aa5c:	20007358 	.word	0x20007358

0000aa60 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    aa60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    aa62:	4b0c      	ldr	r3, [pc, #48]	; (aa94 <usbdc_request_handler+0x34>)
    aa64:	689c      	ldr	r4, [r3, #8]
{
    aa66:	4605      	mov	r5, r0
    aa68:	460e      	mov	r6, r1
    aa6a:	4617      	mov	r7, r2
	int32_t                   rc;

	while (h != NULL) {
    aa6c:	b90c      	cbnz	r4, aa72 <usbdc_request_handler+0x12>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    aa6e:	4620      	mov	r0, r4
    aa70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (NULL != h->cb) {
    aa72:	6863      	ldr	r3, [r4, #4]
    aa74:	b90b      	cbnz	r3, aa7a <usbdc_request_handler+0x1a>
		h = h->next;
    aa76:	6824      	ldr	r4, [r4, #0]
    aa78:	e7f8      	b.n	aa6c <usbdc_request_handler+0xc>
			rc = h->cb(ep, req, stage);
    aa7a:	463a      	mov	r2, r7
    aa7c:	4631      	mov	r1, r6
    aa7e:	4628      	mov	r0, r5
    aa80:	4798      	blx	r3
			if (0 == rc) {
    aa82:	b120      	cbz	r0, aa8e <usbdc_request_handler+0x2e>
			} else if (ERR_NOT_FOUND != rc) {
    aa84:	300a      	adds	r0, #10
    aa86:	d0f6      	beq.n	aa76 <usbdc_request_handler+0x16>
				return -1;
    aa88:	f04f 30ff 	mov.w	r0, #4294967295
}
    aa8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    aa8e:	2001      	movs	r0, #1
    aa90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    aa92:	bf00      	nop
    aa94:	20007358 	.word	0x20007358

0000aa98 <usbd_sof_cb>:
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    aa98:	4b04      	ldr	r3, [pc, #16]	; (aaac <usbd_sof_cb+0x14>)

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    aa9a:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    aa9c:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    aa9e:	b904      	cbnz	r4, aaa2 <usbd_sof_cb+0xa>
	usbdc_sof_notify();
}
    aaa0:	bd10      	pop	{r4, pc}
		if (NULL != sof->cb) {
    aaa2:	6863      	ldr	r3, [r4, #4]
    aaa4:	b103      	cbz	r3, aaa8 <usbd_sof_cb+0x10>
			sof->cb();
    aaa6:	4798      	blx	r3
		sof = sof->next;
    aaa8:	6824      	ldr	r4, [r4, #0]
    aaaa:	e7f8      	b.n	aa9e <usbd_sof_cb+0x6>
    aaac:	20007358 	.word	0x20007358

0000aab0 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    aab0:	b510      	push	{r4, lr}
    aab2:	4614      	mov	r4, r2
	(void)ep;

	switch (code) {
    aab4:	460a      	mov	r2, r1
    aab6:	b119      	cbz	r1, aac0 <usbdc_cb_ctl_done+0x10>
    aab8:	2901      	cmp	r1, #1
    aaba:	d020      	beq.n	aafe <usbdc_cb_ctl_done+0x4e>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    aabc:	2000      	movs	r0, #0
    aabe:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    aac0:	7823      	ldrb	r3, [r4, #0]
    aac2:	2b00      	cmp	r3, #0
    aac4:	d1fa      	bne.n	aabc <usbdc_cb_ctl_done+0xc>
	switch (req->bRequest) {
    aac6:	7863      	ldrb	r3, [r4, #1]
    aac8:	2b05      	cmp	r3, #5
    aaca:	d00d      	beq.n	aae8 <usbdc_cb_ctl_done+0x38>
    aacc:	2b09      	cmp	r3, #9
    aace:	d1f5      	bne.n	aabc <usbdc_cb_ctl_done+0xc>
		usbdc.cfg_value = req->wValue;
    aad0:	8862      	ldrh	r2, [r4, #2]
    aad2:	4b0d      	ldr	r3, [pc, #52]	; (ab08 <usbdc_cb_ctl_done+0x58>)
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    aad4:	2a00      	cmp	r2, #0
		usbdc.cfg_value = req->wValue;
    aad6:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    aad8:	bf14      	ite	ne
    aada:	2104      	movne	r1, #4
    aadc:	2103      	moveq	r1, #3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    aade:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    aae0:	2001      	movs	r0, #1
    aae2:	4b0a      	ldr	r3, [pc, #40]	; (ab0c <usbdc_cb_ctl_done+0x5c>)
    aae4:	4798      	blx	r3
    aae6:	e7e9      	b.n	aabc <usbdc_cb_ctl_done+0xc>
		usbdc_set_address(req->wValue);
    aae8:	8860      	ldrh	r0, [r4, #2]
	usb_d_set_address(addr);
    aaea:	4b09      	ldr	r3, [pc, #36]	; (ab10 <usbdc_cb_ctl_done+0x60>)
    aaec:	b2c0      	uxtb	r0, r0
    aaee:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    aaf0:	8863      	ldrh	r3, [r4, #2]
    aaf2:	2b00      	cmp	r3, #0
    aaf4:	bf14      	ite	ne
    aaf6:	2103      	movne	r1, #3
    aaf8:	2102      	moveq	r1, #2
    aafa:	4b03      	ldr	r3, [pc, #12]	; (ab08 <usbdc_cb_ctl_done+0x58>)
    aafc:	e7ef      	b.n	aade <usbdc_cb_ctl_done+0x2e>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    aafe:	4621      	mov	r1, r4
    ab00:	4b04      	ldr	r3, [pc, #16]	; (ab14 <usbdc_cb_ctl_done+0x64>)
    ab02:	2000      	movs	r0, #0
    ab04:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    ab06:	e7d9      	b.n	aabc <usbdc_cb_ctl_done+0xc>
    ab08:	20007358 	.word	0x20007358
    ab0c:	0000aa41 	.word	0x0000aa41
    ab10:	00001d61 	.word	0x00001d61
    ab14:	0000aa61 	.word	0x0000aa61

0000ab18 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    ab18:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();
    ab1a:	4b0e      	ldr	r3, [pc, #56]	; (ab54 <usbdc_reset+0x3c>)

	usbdc.state       = USBD_S_DEFAULT;
    ab1c:	4d0e      	ldr	r5, [pc, #56]	; (ab58 <usbdc_reset+0x40>)
	usbdc.cfg_value   = 0;
    ab1e:	2400      	movs	r4, #0
	usbdc_unconfig();
    ab20:	4798      	blx	r3
	usbdc.state       = USBD_S_DEFAULT;
    ab22:	2602      	movs	r6, #2
	usbdc.ifc_alt_map = 0;

	// Setup EP0
	usb_d_ep_deinit(0);
    ab24:	4620      	mov	r0, r4
    ab26:	4b0d      	ldr	r3, [pc, #52]	; (ab5c <usbdc_reset+0x44>)
	usbdc.state       = USBD_S_DEFAULT;
    ab28:	76ae      	strb	r6, [r5, #26]
	usbdc.cfg_value   = 0;
    ab2a:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    ab2c:	776c      	strb	r4, [r5, #29]
	usb_d_ep_deinit(0);
    ab2e:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    ab30:	4b0b      	ldr	r3, [pc, #44]	; (ab60 <usbdc_reset+0x48>)
    ab32:	7f28      	ldrb	r0, [r5, #28]
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    ab34:	4d0b      	ldr	r5, [pc, #44]	; (ab64 <usbdc_reset+0x4c>)
	usb_d_ep0_init(usbdc.ctrl_size);
    ab36:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    ab38:	4621      	mov	r1, r4
    ab3a:	4620      	mov	r0, r4
    ab3c:	4a0a      	ldr	r2, [pc, #40]	; (ab68 <usbdc_reset+0x50>)
    ab3e:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    ab40:	4620      	mov	r0, r4
    ab42:	4631      	mov	r1, r6
    ab44:	4a09      	ldr	r2, [pc, #36]	; (ab6c <usbdc_reset+0x54>)
    ab46:	47a8      	blx	r5
	usb_d_ep_enable(0);
    ab48:	4620      	mov	r0, r4
    ab4a:	4b09      	ldr	r3, [pc, #36]	; (ab70 <usbdc_reset+0x58>)
}
    ab4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	usb_d_ep_enable(0);
    ab50:	4718      	bx	r3
    ab52:	bf00      	nop
    ab54:	0000aa25 	.word	0x0000aa25
    ab58:	20007358 	.word	0x20007358
    ab5c:	00001dc9 	.word	0x00001dc9
    ab60:	00001db9 	.word	0x00001db9
    ab64:	00001f91 	.word	0x00001f91
    ab68:	0000abad 	.word	0x0000abad
    ab6c:	0000aab1 	.word	0x0000aab1
    ab70:	00001df5 	.word	0x00001df5

0000ab74 <usbd_event_cb>:
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
	(void)param;

	switch (ev) {
    ab74:	b110      	cbz	r0, ab7c <usbd_event_cb+0x8>
    ab76:	2801      	cmp	r0, #1
    ab78:	d002      	beq.n	ab80 <usbd_event_cb+0xc>
    ab7a:	4770      	bx	lr
	case USB_EV_VBUS:
		usbdc_change_notify(USBDC_C_CONN, param);
    ab7c:	4b01      	ldr	r3, [pc, #4]	; (ab84 <usbd_event_cb+0x10>)
    ab7e:	4718      	bx	r3
		break;

	case USB_EV_RESET:
		usbdc_reset();
    ab80:	4b01      	ldr	r3, [pc, #4]	; (ab88 <usbd_event_cb+0x14>)
    ab82:	4718      	bx	r3
    ab84:	0000aa41 	.word	0x0000aa41
    ab88:	0000ab19 	.word	0x0000ab19

0000ab8c <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    ab8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    ab8e:	f88d 000c 	strb.w	r0, [sp, #12]
    ab92:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    ab96:	a801      	add	r0, sp, #4
    ab98:	4b03      	ldr	r3, [pc, #12]	; (aba8 <usbdc_xfer+0x1c>)
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    ab9a:	9101      	str	r1, [sp, #4]
    ab9c:	9202      	str	r2, [sp, #8]
	return usb_d_ep_transfer(&xfer);
    ab9e:	4798      	blx	r3
}
    aba0:	b005      	add	sp, #20
    aba2:	f85d fb04 	ldr.w	pc, [sp], #4
    aba6:	bf00      	nop
    aba8:	00001e35 	.word	0x00001e35

0000abac <usbdc_cb_ctl_req>:
{
    abac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    abb0:	4baa      	ldr	r3, [pc, #680]	; (ae5c <usbdc_cb_ctl_req+0x2b0>)
    abb2:	2200      	movs	r2, #0
{
    abb4:	4605      	mov	r5, r0
    abb6:	460c      	mov	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    abb8:	4798      	blx	r3
    abba:	1c43      	adds	r3, r0, #1
    abbc:	d008      	beq.n	abd0 <usbdc_cb_ctl_req+0x24>
    abbe:	2801      	cmp	r0, #1
    abc0:	d075      	beq.n	acae <usbdc_cb_ctl_req+0x102>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    abc2:	7821      	ldrb	r1, [r4, #0]
    abc4:	f011 03e0 	ands.w	r3, r1, #224	; 0xe0
    abc8:	d004      	beq.n	abd4 <usbdc_cb_ctl_req+0x28>
    abca:	2b80      	cmp	r3, #128	; 0x80
    abcc:	f000 80c4 	beq.w	ad58 <usbdc_cb_ctl_req+0x1ac>
	return false;
    abd0:	2000      	movs	r0, #0
    abd2:	e06c      	b.n	acae <usbdc_cb_ctl_req+0x102>
	switch (req->bRequest) {
    abd4:	7863      	ldrb	r3, [r4, #1]
    abd6:	3b01      	subs	r3, #1
    abd8:	2b0a      	cmp	r3, #10
    abda:	d8f9      	bhi.n	abd0 <usbdc_cb_ctl_req+0x24>
    abdc:	a201      	add	r2, pc, #4	; (adr r2, abe4 <usbdc_cb_ctl_req+0x38>)
    abde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    abe2:	bf00      	nop
    abe4:	0000ac8d 	.word	0x0000ac8d
    abe8:	0000abd1 	.word	0x0000abd1
    abec:	0000acb5 	.word	0x0000acb5
    abf0:	0000abd1 	.word	0x0000abd1
    abf4:	0000ac1b 	.word	0x0000ac1b
    abf8:	0000abd1 	.word	0x0000abd1
    abfc:	0000abd1 	.word	0x0000abd1
    ac00:	0000abd1 	.word	0x0000abd1
    ac04:	0000ac11 	.word	0x0000ac11
    ac08:	0000abd1 	.word	0x0000abd1
    ac0c:	0000acc5 	.word	0x0000acc5
		if (!usbdc_set_config(req->wValue)) {
    ac10:	8862      	ldrh	r2, [r4, #2]
    ac12:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    ac14:	b92a      	cbnz	r2, ac22 <usbdc_cb_ctl_req+0x76>
		usbdc_unconfig();
    ac16:	4b92      	ldr	r3, [pc, #584]	; (ae60 <usbdc_cb_ctl_req+0x2b4>)
    ac18:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    ac1a:	2200      	movs	r2, #0
    ac1c:	2301      	movs	r3, #1
    ac1e:	4611      	mov	r1, r2
    ac20:	e0ec      	b.n	adfc <usbdc_cb_ctl_req+0x250>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    ac22:	4c90      	ldr	r4, [pc, #576]	; (ae64 <usbdc_cb_ctl_req+0x2b8>)
    ac24:	6823      	ldr	r3, [r4, #0]
    ac26:	e893 0003 	ldmia.w	r3, {r0, r1}
    ac2a:	4b8f      	ldr	r3, [pc, #572]	; (ae68 <usbdc_cb_ctl_req+0x2bc>)
    ac2c:	4798      	blx	r3
	if (NULL == cfg_desc) {
    ac2e:	2800      	cmp	r0, #0
    ac30:	d0ce      	beq.n	abd0 <usbdc_cb_ctl_req+0x24>
	return (ptr[0] + (ptr[1] << 8));
    ac32:	78c2      	ldrb	r2, [r0, #3]
    ac34:	7883      	ldrb	r3, [r0, #2]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    ac36:	4f8d      	ldr	r7, [pc, #564]	; (ae6c <usbdc_cb_ctl_req+0x2c0>)
    ac38:	eb03 2302 	add.w	r3, r3, r2, lsl #8
	desc.eod  = cfg_desc + total_len;
    ac3c:	fa10 f183 	uxtah	r1, r0, r3
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    ac40:	2204      	movs	r2, #4
	desc.eod  = cfg_desc + total_len;
    ac42:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    ac44:	47b8      	blx	r7
    ac46:	f10d 0808 	add.w	r8, sp, #8
	uint8_t                 last_iface = 0xFF;
    ac4a:	23ff      	movs	r3, #255	; 0xff
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    ac4c:	f848 0d08 	str.w	r0, [r8, #-8]!
	while (NULL != desc.sod) {
    ac50:	9a00      	ldr	r2, [sp, #0]
    ac52:	2a00      	cmp	r2, #0
    ac54:	d0e1      	beq.n	ac1a <usbdc_cb_ctl_req+0x6e>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    ac56:	f892 9002 	ldrb.w	r9, [r2, #2]
    ac5a:	4599      	cmp	r9, r3
    ac5c:	d014      	beq.n	ac88 <usbdc_cb_ctl_req+0xdc>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    ac5e:	6926      	ldr	r6, [r4, #16]
			while (NULL != func) {
    ac60:	b94e      	cbnz	r6, ac76 <usbdc_cb_ctl_req+0xca>
		desc.sod = usb_desc_next(desc.sod);
    ac62:	9800      	ldr	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    ac64:	9901      	ldr	r1, [sp, #4]
	return (desc + usb_desc_len(desc));
    ac66:	7803      	ldrb	r3, [r0, #0]
    ac68:	2204      	movs	r2, #4
    ac6a:	4418      	add	r0, r3
		desc.sod = usb_desc_next(desc.sod);
    ac6c:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    ac6e:	47b8      	blx	r7
    ac70:	464b      	mov	r3, r9
    ac72:	9000      	str	r0, [sp, #0]
    ac74:	e7ec      	b.n	ac50 <usbdc_cb_ctl_req+0xa4>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    ac76:	6873      	ldr	r3, [r6, #4]
    ac78:	4642      	mov	r2, r8
    ac7a:	2100      	movs	r1, #0
    ac7c:	4630      	mov	r0, r6
    ac7e:	4798      	blx	r3
    ac80:	2800      	cmp	r0, #0
    ac82:	d0ee      	beq.n	ac62 <usbdc_cb_ctl_req+0xb6>
					func = func->next;
    ac84:	6836      	ldr	r6, [r6, #0]
    ac86:	e7eb      	b.n	ac60 <usbdc_cb_ctl_req+0xb4>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    ac88:	4699      	mov	r9, r3
    ac8a:	e7ea      	b.n	ac62 <usbdc_cb_ctl_req+0xb6>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    ac8c:	2902      	cmp	r1, #2
    ac8e:	d19f      	bne.n	abd0 <usbdc_cb_ctl_req+0x24>
		if (req->wLength != 0) {
    ac90:	88e6      	ldrh	r6, [r4, #6]
    ac92:	2e00      	cmp	r6, #0
    ac94:	d19c      	bne.n	abd0 <usbdc_cb_ctl_req+0x24>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    ac96:	88a0      	ldrh	r0, [r4, #4]
    ac98:	4631      	mov	r1, r6
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    ac9a:	4b75      	ldr	r3, [pc, #468]	; (ae70 <usbdc_cb_ctl_req+0x2c4>)
    ac9c:	b2c0      	uxtb	r0, r0
    ac9e:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    aca0:	2301      	movs	r3, #1
    aca2:	4632      	mov	r2, r6
    aca4:	4631      	mov	r1, r6
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    aca6:	4628      	mov	r0, r5
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    aca8:	4c72      	ldr	r4, [pc, #456]	; (ae74 <usbdc_cb_ctl_req+0x2c8>)
    acaa:	47a0      	blx	r4
			return true;
    acac:	2001      	movs	r0, #1
}
    acae:	b003      	add	sp, #12
    acb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    acb4:	2902      	cmp	r1, #2
    acb6:	d18b      	bne.n	abd0 <usbdc_cb_ctl_req+0x24>
		if (req->wLength != 0) {
    acb8:	88e6      	ldrh	r6, [r4, #6]
    acba:	2e00      	cmp	r6, #0
    acbc:	d188      	bne.n	abd0 <usbdc_cb_ctl_req+0x24>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    acbe:	88a0      	ldrh	r0, [r4, #4]
    acc0:	2101      	movs	r1, #1
    acc2:	e7ea      	b.n	ac9a <usbdc_cb_ctl_req+0xee>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    acc4:	4d67      	ldr	r5, [pc, #412]	; (ae64 <usbdc_cb_ctl_req+0x2b8>)
		return usbdc_set_interface(req->wValue, req->wIndex);
    acc6:	8866      	ldrh	r6, [r4, #2]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    acc8:	682b      	ldr	r3, [r5, #0]
    acca:	7eea      	ldrb	r2, [r5, #27]
		return usbdc_set_interface(req->wValue, req->wIndex);
    accc:	88a7      	ldrh	r7, [r4, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    acce:	e893 0003 	ldmia.w	r3, {r0, r1}
    acd2:	4b65      	ldr	r3, [pc, #404]	; (ae68 <usbdc_cb_ctl_req+0x2bc>)
    acd4:	4798      	blx	r3
	if (NULL == ifc) {
    acd6:	2800      	cmp	r0, #0
    acd8:	f43f af7a 	beq.w	abd0 <usbdc_cb_ctl_req+0x24>
	desc.sod = ifc;
    acdc:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    acde:	78c2      	ldrb	r2, [r0, #3]
    ace0:	7881      	ldrb	r1, [r0, #2]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    ace2:	4c62      	ldr	r4, [pc, #392]	; (ae6c <usbdc_cb_ctl_req+0x2c0>)
    ace4:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    ace8:	fa10 f181 	uxtah	r1, r0, r1
    acec:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    acee:	2204      	movs	r2, #4
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    acf0:	47a0      	blx	r4
		if (NULL == ifc) {
    acf2:	2800      	cmp	r0, #0
    acf4:	f43f af6c 	beq.w	abd0 <usbdc_cb_ctl_req+0x24>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    acf8:	7883      	ldrb	r3, [r0, #2]
    acfa:	42bb      	cmp	r3, r7
    acfc:	d113      	bne.n	ad26 <usbdc_cb_ctl_req+0x17a>
    acfe:	78c3      	ldrb	r3, [r0, #3]
    ad00:	42b3      	cmp	r3, r6
    ad02:	d110      	bne.n	ad26 <usbdc_cb_ctl_req+0x17a>
	desc.sod = ifc;
    ad04:	f10d 0808 	add.w	r8, sp, #8
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    ad08:	692c      	ldr	r4, [r5, #16]
	desc.sod = ifc;
    ad0a:	f848 0d08 	str.w	r0, [r8, #-8]!
	while (NULL != func) {
    ad0e:	2c00      	cmp	r4, #0
    ad10:	f43f af5e 	beq.w	abd0 <usbdc_cb_ctl_req+0x24>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    ad14:	2101      	movs	r1, #1
    ad16:	6863      	ldr	r3, [r4, #4]
    ad18:	4642      	mov	r2, r8
    ad1a:	4620      	mov	r0, r4
    ad1c:	4798      	blx	r3
    ad1e:	4601      	mov	r1, r0
    ad20:	b140      	cbz	r0, ad34 <usbdc_cb_ctl_req+0x188>
			func = func->next;
    ad22:	6824      	ldr	r4, [r4, #0]
    ad24:	e7f3      	b.n	ad0e <usbdc_cb_ctl_req+0x162>
		desc.sod = usb_desc_next(desc.sod);
    ad26:	9800      	ldr	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    ad28:	9901      	ldr	r1, [sp, #4]
	return (desc + usb_desc_len(desc));
    ad2a:	7803      	ldrb	r3, [r0, #0]
    ad2c:	4418      	add	r0, r3
		desc.sod = usb_desc_next(desc.sod);
    ad2e:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    ad30:	2204      	movs	r2, #4
    ad32:	e7dd      	b.n	acf0 <usbdc_cb_ctl_req+0x144>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    ad34:	6863      	ldr	r3, [r4, #4]
    ad36:	4642      	mov	r2, r8
    ad38:	4620      	mov	r0, r4
    ad3a:	4798      	blx	r3
    ad3c:	2800      	cmp	r0, #0
    ad3e:	f47f af47 	bne.w	abd0 <usbdc_cb_ctl_req+0x24>
			if (alt_set) {
    ad42:	b126      	cbz	r6, ad4e <usbdc_cb_ctl_req+0x1a2>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    ad44:	2301      	movs	r3, #1
    ad46:	40bb      	lsls	r3, r7
    ad48:	7f6f      	ldrb	r7, [r5, #29]
    ad4a:	431f      	orrs	r7, r3
    ad4c:	776f      	strb	r7, [r5, #29]
			usbdc_xfer(0, NULL, 0, 0);
    ad4e:	2300      	movs	r3, #0
    ad50:	461a      	mov	r2, r3
    ad52:	4619      	mov	r1, r3
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    ad54:	4618      	mov	r0, r3
    ad56:	e7a7      	b.n	aca8 <usbdc_cb_ctl_req+0xfc>
	switch (req->bRequest) {
    ad58:	7863      	ldrb	r3, [r4, #1]
    ad5a:	2b0a      	cmp	r3, #10
    ad5c:	f63f af38 	bhi.w	abd0 <usbdc_cb_ctl_req+0x24>
    ad60:	a201      	add	r2, pc, #4	; (adr r2, ad68 <usbdc_cb_ctl_req+0x1bc>)
    ad62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ad66:	bf00      	nop
    ad68:	0000ae37 	.word	0x0000ae37
    ad6c:	0000abd1 	.word	0x0000abd1
    ad70:	0000abd1 	.word	0x0000abd1
    ad74:	0000abd1 	.word	0x0000abd1
    ad78:	0000abd1 	.word	0x0000abd1
    ad7c:	0000abd1 	.word	0x0000abd1
    ad80:	0000ad95 	.word	0x0000ad95
    ad84:	0000abd1 	.word	0x0000abd1
    ad88:	0000ae27 	.word	0x0000ae27
    ad8c:	0000abd1 	.word	0x0000abd1
    ad90:	0000ae91 	.word	0x0000ae91
	uint8_t type = (uint8_t)(req->wValue >> 8);
    ad94:	8863      	ldrh	r3, [r4, #2]
	switch (type) {
    ad96:	0a1a      	lsrs	r2, r3, #8
    ad98:	2a02      	cmp	r2, #2
    ad9a:	d014      	beq.n	adc6 <usbdc_cb_ctl_req+0x21a>
    ad9c:	2a03      	cmp	r2, #3
    ad9e:	d034      	beq.n	ae0a <usbdc_cb_ctl_req+0x25e>
    ada0:	2a01      	cmp	r2, #1
    ada2:	f47f af15 	bne.w	abd0 <usbdc_cb_ctl_req+0x24>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    ada6:	4b2f      	ldr	r3, [pc, #188]	; (ae64 <usbdc_cb_ctl_req+0x2b8>)
	uint16_t length   = req->wLength;
    ada8:	88e4      	ldrh	r4, [r4, #6]
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    adaa:	681b      	ldr	r3, [r3, #0]
    adac:	2c12      	cmp	r4, #18
    adae:	e893 0003 	ldmia.w	r3, {r0, r1}
    adb2:	4b2e      	ldr	r3, [pc, #184]	; (ae6c <usbdc_cb_ctl_req+0x2c0>)
    adb4:	bf28      	it	cs
    adb6:	2412      	movcs	r4, #18
    adb8:	4798      	blx	r3
	if (!dev_desc) {
    adba:	4601      	mov	r1, r0
    adbc:	2800      	cmp	r0, #0
    adbe:	f43f af07 	beq.w	abd0 <usbdc_cb_ctl_req+0x24>
		need_zlp = false;
    adc2:	2300      	movs	r3, #0
    adc4:	e019      	b.n	adfa <usbdc_cb_ctl_req+0x24e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    adc6:	4a27      	ldr	r2, [pc, #156]	; (ae64 <usbdc_cb_ctl_req+0x2b8>)
	uint16_t length   = req->wLength;
    adc8:	88e4      	ldrh	r4, [r4, #6]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    adca:	6810      	ldr	r0, [r2, #0]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    adcc:	7f16      	ldrb	r6, [r2, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    adce:	1c5a      	adds	r2, r3, #1
    add0:	c803      	ldmia	r0, {r0, r1}
    add2:	b2d2      	uxtb	r2, r2
    add4:	4b24      	ldr	r3, [pc, #144]	; (ae68 <usbdc_cb_ctl_req+0x2bc>)
    add6:	4798      	blx	r3
	if (NULL == cfg_desc) {
    add8:	4601      	mov	r1, r0
    adda:	2800      	cmp	r0, #0
    addc:	f43f aef8 	beq.w	abd0 <usbdc_cb_ctl_req+0x24>
	return (ptr[0] + (ptr[1] << 8));
    ade0:	78c3      	ldrb	r3, [r0, #3]
    ade2:	7882      	ldrb	r2, [r0, #2]
    ade4:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    ade8:	b292      	uxth	r2, r2
	if (length <= str_desc[0]) {
    adea:	4294      	cmp	r4, r2
    adec:	d9e9      	bls.n	adc2 <usbdc_cb_ctl_req+0x216>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    adee:	3e01      	subs	r6, #1
    adf0:	4226      	tst	r6, r4
    adf2:	bf0c      	ite	eq
    adf4:	2301      	moveq	r3, #1
    adf6:	2300      	movne	r3, #0
    adf8:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    adfa:	4622      	mov	r2, r4
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    adfc:	4628      	mov	r0, r5
    adfe:	4c1d      	ldr	r4, [pc, #116]	; (ae74 <usbdc_cb_ctl_req+0x2c8>)
    ae00:	47a0      	blx	r4
    ae02:	fab0 f080 	clz	r0, r0
    ae06:	0940      	lsrs	r0, r0, #5
    ae08:	e751      	b.n	acae <usbdc_cb_ctl_req+0x102>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    ae0a:	4a16      	ldr	r2, [pc, #88]	; (ae64 <usbdc_cb_ctl_req+0x2b8>)
	uint16_t length   = req->wLength;
    ae0c:	88e4      	ldrh	r4, [r4, #6]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    ae0e:	6810      	ldr	r0, [r2, #0]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    ae10:	7f16      	ldrb	r6, [r2, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    ae12:	c803      	ldmia	r0, {r0, r1}
    ae14:	b2da      	uxtb	r2, r3
    ae16:	4b18      	ldr	r3, [pc, #96]	; (ae78 <usbdc_cb_ctl_req+0x2cc>)
    ae18:	4798      	blx	r3
	if (NULL == str_desc) {
    ae1a:	4601      	mov	r1, r0
    ae1c:	2800      	cmp	r0, #0
    ae1e:	f43f aed7 	beq.w	abd0 <usbdc_cb_ctl_req+0x24>
	if (length <= str_desc[0]) {
    ae22:	7802      	ldrb	r2, [r0, #0]
    ae24:	e7e1      	b.n	adea <usbdc_cb_ctl_req+0x23e>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    ae26:	490f      	ldr	r1, [pc, #60]	; (ae64 <usbdc_cb_ctl_req+0x2b8>)
    ae28:	694b      	ldr	r3, [r1, #20]
    ae2a:	7eca      	ldrb	r2, [r1, #27]
    ae2c:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    ae2e:	2300      	movs	r3, #0
    ae30:	2201      	movs	r2, #1
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    ae32:	6949      	ldr	r1, [r1, #20]
    ae34:	e737      	b.n	aca6 <usbdc_cb_ctl_req+0xfa>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    ae36:	f001 011f 	and.w	r1, r1, #31
    ae3a:	2901      	cmp	r1, #1
    ae3c:	d91e      	bls.n	ae7c <usbdc_cb_ctl_req+0x2d0>
    ae3e:	2902      	cmp	r1, #2
    ae40:	f47f aec6 	bne.w	abd0 <usbdc_cb_ctl_req+0x24>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    ae44:	88a0      	ldrh	r0, [r4, #4]
    ae46:	4b0a      	ldr	r3, [pc, #40]	; (ae70 <usbdc_cb_ctl_req+0x2c4>)
    ae48:	b2c0      	uxtb	r0, r0
    ae4a:	4798      	blx	r3
		if (st < 0) {
    ae4c:	2800      	cmp	r0, #0
    ae4e:	f6ff aebf 	blt.w	abd0 <usbdc_cb_ctl_req+0x24>
		st = st & 0x1;
    ae52:	f000 0001 	and.w	r0, r0, #1
    ae56:	9000      	str	r0, [sp, #0]
    ae58:	e012      	b.n	ae80 <usbdc_cb_ctl_req+0x2d4>
    ae5a:	bf00      	nop
    ae5c:	0000aa61 	.word	0x0000aa61
    ae60:	0000aa25 	.word	0x0000aa25
    ae64:	20007358 	.word	0x20007358
    ae68:	0000b001 	.word	0x0000b001
    ae6c:	0000afc9 	.word	0x0000afc9
    ae70:	00001f2d 	.word	0x00001f2d
    ae74:	0000ab8d 	.word	0x0000ab8d
    ae78:	0000b03d 	.word	0x0000b03d
		st = 0;
    ae7c:	2300      	movs	r3, #0
    ae7e:	9300      	str	r3, [sp, #0]
	memcpy(usbdc.ctrl_buf, &st, 2);
    ae80:	4913      	ldr	r1, [pc, #76]	; (aed0 <usbdc_cb_ctl_req+0x324>)
    ae82:	f8bd 2000 	ldrh.w	r2, [sp]
    ae86:	694b      	ldr	r3, [r1, #20]
    ae88:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    ae8a:	2300      	movs	r3, #0
    ae8c:	2202      	movs	r2, #2
    ae8e:	e7d0      	b.n	ae32 <usbdc_cb_ctl_req+0x286>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    ae90:	490f      	ldr	r1, [pc, #60]	; (aed0 <usbdc_cb_ctl_req+0x324>)
    ae92:	88a2      	ldrh	r2, [r4, #4]
    ae94:	7f4b      	ldrb	r3, [r1, #29]
    ae96:	4113      	asrs	r3, r2
    ae98:	f013 0301 	ands.w	r3, r3, #1
    ae9c:	460e      	mov	r6, r1
    ae9e:	d115      	bne.n	aecc <usbdc_cb_ctl_req+0x320>
		usbdc.ctrl_buf[0] = 0;
    aea0:	694a      	ldr	r2, [r1, #20]
    aea2:	7013      	strb	r3, [r2, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    aea4:	6949      	ldr	r1, [r1, #20]
    aea6:	2201      	movs	r2, #1
    aea8:	e754      	b.n	ad54 <usbdc_cb_ctl_req+0x1a8>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    aeaa:	686b      	ldr	r3, [r5, #4]
    aeac:	4622      	mov	r2, r4
    aeae:	2102      	movs	r1, #2
    aeb0:	4628      	mov	r0, r5
    aeb2:	4798      	blx	r3
    aeb4:	2800      	cmp	r0, #0
    aeb6:	da03      	bge.n	aec0 <usbdc_cb_ctl_req+0x314>
			func = func->next;
    aeb8:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    aeba:	2d00      	cmp	r5, #0
    aebc:	d1f5      	bne.n	aeaa <usbdc_cb_ctl_req+0x2fe>
    aebe:	e687      	b.n	abd0 <usbdc_cb_ctl_req+0x24>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    aec0:	6973      	ldr	r3, [r6, #20]
    aec2:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    aec4:	2201      	movs	r2, #1
    aec6:	2300      	movs	r3, #0
    aec8:	6971      	ldr	r1, [r6, #20]
    aeca:	e743      	b.n	ad54 <usbdc_cb_ctl_req+0x1a8>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    aecc:	690d      	ldr	r5, [r1, #16]
    aece:	e7f4      	b.n	aeba <usbdc_cb_ctl_req+0x30e>
    aed0:	20007358 	.word	0x20007358

0000aed4 <usbdc_register_handler>:
/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
	switch (type) {
    aed4:	2801      	cmp	r0, #1
    aed6:	d006      	beq.n	aee6 <usbdc_register_handler+0x12>
    aed8:	d302      	bcc.n	aee0 <usbdc_register_handler+0xc>
    aeda:	2802      	cmp	r0, #2
    aedc:	d005      	beq.n	aeea <usbdc_register_handler+0x16>
    aede:	4770      	bx	lr
	case USBDC_HDL_SOF:
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    aee0:	4803      	ldr	r0, [pc, #12]	; (aef0 <usbdc_register_handler+0x1c>)
		break;
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    aee2:	4b04      	ldr	r3, [pc, #16]	; (aef4 <usbdc_register_handler+0x20>)
    aee4:	4718      	bx	r3
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    aee6:	4804      	ldr	r0, [pc, #16]	; (aef8 <usbdc_register_handler+0x24>)
    aee8:	e7fb      	b.n	aee2 <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    aeea:	4804      	ldr	r0, [pc, #16]	; (aefc <usbdc_register_handler+0x28>)
    aeec:	e7f9      	b.n	aee2 <usbdc_register_handler+0xe>
    aeee:	bf00      	nop
    aef0:	2000735c 	.word	0x2000735c
    aef4:	00002025 	.word	0x00002025
    aef8:	20007360 	.word	0x20007360
    aefc:	20007364 	.word	0x20007364

0000af00 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    af00:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
    af02:	4605      	mov	r5, r0
    af04:	3000      	adds	r0, #0
    af06:	bf18      	it	ne
    af08:	2001      	movne	r0, #1
    af0a:	f240 3255 	movw	r2, #853	; 0x355
    af0e:	490b      	ldr	r1, [pc, #44]	; (af3c <usbdc_init+0x3c>)
    af10:	4b0b      	ldr	r3, [pc, #44]	; (af40 <usbdc_init+0x40>)
    af12:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    af14:	4b0b      	ldr	r3, [pc, #44]	; (af44 <usbdc_init+0x44>)
    af16:	4798      	blx	r3
	if (rc < 0) {
    af18:	2800      	cmp	r0, #0
    af1a:	db0e      	blt.n	af3a <usbdc_init+0x3a>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    af1c:	4c0a      	ldr	r4, [pc, #40]	; (af48 <usbdc_init+0x48>)
    af1e:	4b0b      	ldr	r3, [pc, #44]	; (af4c <usbdc_init+0x4c>)
    af20:	2220      	movs	r2, #32
    af22:	2100      	movs	r1, #0
    af24:	4620      	mov	r0, r4
    af26:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    af28:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    af2a:	4909      	ldr	r1, [pc, #36]	; (af50 <usbdc_init+0x50>)
    af2c:	4c09      	ldr	r4, [pc, #36]	; (af54 <usbdc_init+0x54>)
    af2e:	2000      	movs	r0, #0
    af30:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    af32:	2001      	movs	r0, #1
    af34:	4908      	ldr	r1, [pc, #32]	; (af58 <usbdc_init+0x58>)
    af36:	47a0      	blx	r4

	return 0;
    af38:	2000      	movs	r0, #0
}
    af3a:	bd38      	pop	{r3, r4, r5, pc}
    af3c:	0000f2e1 	.word	0x0000f2e1
    af40:	00001fdd 	.word	0x00001fdd
    af44:	00001ce5 	.word	0x00001ce5
    af48:	20007358 	.word	0x20007358
    af4c:	0000b345 	.word	0x0000b345
    af50:	0000aa99 	.word	0x0000aa99
    af54:	00001d49 	.word	0x00001d49
    af58:	0000ab75 	.word	0x0000ab75

0000af5c <usbdc_register_function>:
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
	list_insert_at_end(&usbdc.func_list, func);
    af5c:	4601      	mov	r1, r0
    af5e:	4b01      	ldr	r3, [pc, #4]	; (af64 <usbdc_register_function+0x8>)
    af60:	4801      	ldr	r0, [pc, #4]	; (af68 <usbdc_register_function+0xc>)
    af62:	4718      	bx	r3
    af64:	00002025 	.word	0x00002025
    af68:	20007368 	.word	0x20007368

0000af6c <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    af6c:	b510      	push	{r4, lr}
	if (usbdc.state >= USBD_S_POWER) {
    af6e:	4b0a      	ldr	r3, [pc, #40]	; (af98 <usbdc_start+0x2c>)
    af70:	7e9c      	ldrb	r4, [r3, #26]
    af72:	b954      	cbnz	r4, af8a <usbdc_start+0x1e>
		return ERR_BUSY;
	}

	if (desces) {
    af74:	b160      	cbz	r0, af90 <usbdc_start+0x24>
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    af76:	6802      	ldr	r2, [r0, #0]
		usbdc.desces.ls_fs = desces;
    af78:	6018      	str	r0, [r3, #0]
	usbdc.ctrl_size = desces->sod[7];
    af7a:	79d2      	ldrb	r2, [r2, #7]
    af7c:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    af7e:	2201      	movs	r2, #1
    af80:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    af82:	4b06      	ldr	r3, [pc, #24]	; (af9c <usbdc_start+0x30>)
    af84:	4798      	blx	r3
	return ERR_NONE;
    af86:	4620      	mov	r0, r4
    af88:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    af8a:	f06f 0003 	mvn.w	r0, #3
    af8e:	bd10      	pop	{r4, pc}
		return ERR_BAD_DATA;
    af90:	f06f 0008 	mvn.w	r0, #8
}
    af94:	bd10      	pop	{r4, pc}
    af96:	bf00      	nop
    af98:	20007358 	.word	0x20007358
    af9c:	00001d51 	.word	0x00001d51

0000afa0 <usbdc_attach>:
/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
	usb_d_attach();
    afa0:	4b00      	ldr	r3, [pc, #0]	; (afa4 <usbdc_attach+0x4>)
    afa2:	4718      	bx	r3
    afa4:	00001d59 	.word	0x00001d59

0000afa8 <usbdc_get_ctrl_buffer>:
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
}
    afa8:	4b01      	ldr	r3, [pc, #4]	; (afb0 <usbdc_get_ctrl_buffer+0x8>)
    afaa:	6958      	ldr	r0, [r3, #20]
    afac:	4770      	bx	lr
    afae:	bf00      	nop
    afb0:	20007358 	.word	0x20007358

0000afb4 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    afb4:	4b03      	ldr	r3, [pc, #12]	; (afc4 <usbdc_get_state+0x10>)
    afb6:	7e98      	ldrb	r0, [r3, #26]
    afb8:	f010 0f10 	tst.w	r0, #16
		return USBD_S_SUSPEND;
	}
	return usbdc.state;
}
    afbc:	bf18      	it	ne
    afbe:	2010      	movne	r0, #16
    afc0:	4770      	bx	lr
    afc2:	bf00      	nop
    afc4:	20007358 	.word	0x20007358

0000afc8 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    afc8:	b510      	push	{r4, lr}
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    afca:	4288      	cmp	r0, r1
    afcc:	d301      	bcc.n	afd2 <usb_find_desc+0xa>
		_desc_len_check();
    afce:	2000      	movs	r0, #0
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
}
    afd0:	bd10      	pop	{r4, pc}
    afd2:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    afd4:	2b01      	cmp	r3, #1
    afd6:	d9fa      	bls.n	afce <usb_find_desc+0x6>
		if (type == usb_desc_type(desc)) {
    afd8:	7844      	ldrb	r4, [r0, #1]
    afda:	4294      	cmp	r4, r2
    afdc:	d0f8      	beq.n	afd0 <usb_find_desc+0x8>
	return (desc + usb_desc_len(desc));
    afde:	4418      	add	r0, r3
    afe0:	e7f3      	b.n	afca <usb_find_desc+0x2>

0000afe2 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    afe2:	4288      	cmp	r0, r1
    afe4:	d301      	bcc.n	afea <usb_find_ep_desc+0x8>
		_desc_len_check();
    afe6:	2000      	movs	r0, #0
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
}
    afe8:	4770      	bx	lr
    afea:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    afec:	2b01      	cmp	r3, #1
    afee:	d9fa      	bls.n	afe6 <usb_find_ep_desc+0x4>
	return desc[1];
    aff0:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    aff2:	2a04      	cmp	r2, #4
    aff4:	d0f7      	beq.n	afe6 <usb_find_ep_desc+0x4>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    aff6:	2a05      	cmp	r2, #5
    aff8:	d0f6      	beq.n	afe8 <usb_find_ep_desc+0x6>
	return (desc + usb_desc_len(desc));
    affa:	4418      	add	r0, r3
    affc:	e7f1      	b.n	afe2 <usb_find_ep_desc>
	...

0000b000 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    b000:	b538      	push	{r3, r4, r5, lr}
    b002:	4615      	mov	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    b004:	4b0c      	ldr	r3, [pc, #48]	; (b038 <usb_find_cfg_desc+0x38>)
    b006:	2202      	movs	r2, #2
{
    b008:	460c      	mov	r4, r1
	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    b00a:	4798      	blx	r3
	if (!desc) {
    b00c:	b978      	cbnz	r0, b02e <usb_find_cfg_desc+0x2e>
    b00e:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
	}
	while (desc < eof) {
		_desc_len_check();
    b010:	7803      	ldrb	r3, [r0, #0]
    b012:	2b01      	cmp	r3, #1
    b014:	d90d      	bls.n	b032 <usb_find_cfg_desc+0x32>
		if (desc[1] != USB_DT_CONFIG) {
    b016:	7843      	ldrb	r3, [r0, #1]
    b018:	2b02      	cmp	r3, #2
    b01a:	d10a      	bne.n	b032 <usb_find_cfg_desc+0x32>
			break;
		}
		if (desc[5] == cfg_value) {
    b01c:	7943      	ldrb	r3, [r0, #5]
    b01e:	42ab      	cmp	r3, r5
    b020:	d008      	beq.n	b034 <usb_find_cfg_desc+0x34>
	return (ptr[0] + (ptr[1] << 8));
    b022:	78c2      	ldrb	r2, [r0, #3]
    b024:	7883      	ldrb	r3, [r0, #2]
    b026:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    b02a:	fa10 f083 	uxtah	r0, r0, r3
	while (desc < eof) {
    b02e:	42a0      	cmp	r0, r4
    b030:	d3ee      	bcc.n	b010 <usb_find_cfg_desc+0x10>
		return NULL;
    b032:	2000      	movs	r0, #0
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
}
    b034:	bd38      	pop	{r3, r4, r5, pc}
    b036:	bf00      	nop
    b038:	0000afc9 	.word	0x0000afc9

0000b03c <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    b03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    b03e:	4f0a      	ldr	r7, [pc, #40]	; (b068 <usb_find_str_desc+0x2c>)
{
    b040:	460d      	mov	r5, r1
    b042:	4616      	mov	r6, r2
	for (i = 0; desc < eof;) {
    b044:	2400      	movs	r4, #0
    b046:	42a8      	cmp	r0, r5
    b048:	d301      	bcc.n	b04e <usb_find_str_desc+0x12>
				return desc;
			}
			i++;
			desc = usb_desc_next(desc);
		} else {
			return NULL;
    b04a:	2000      	movs	r0, #0
		}
	}
	return NULL;
}
    b04c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    b04e:	2203      	movs	r2, #3
    b050:	4629      	mov	r1, r5
    b052:	47b8      	blx	r7
		if (desc) {
    b054:	2800      	cmp	r0, #0
    b056:	d0f9      	beq.n	b04c <usb_find_str_desc+0x10>
    b058:	7803      	ldrb	r3, [r0, #0]
			_desc_len_check();
    b05a:	2b01      	cmp	r3, #1
    b05c:	d9f5      	bls.n	b04a <usb_find_str_desc+0xe>
			if (i == str_index) {
    b05e:	42b4      	cmp	r4, r6
    b060:	d0f4      	beq.n	b04c <usb_find_str_desc+0x10>
	return (desc + usb_desc_len(desc));
    b062:	4418      	add	r0, r3
    b064:	3401      	adds	r4, #1
    b066:	e7ee      	b.n	b046 <usb_find_str_desc+0xa>
    b068:	0000afc9 	.word	0x0000afc9

0000b06c <usb_device_cb_bulk_in>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool usb_device_cb_bulk_in(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    b06c:	b508      	push	{r3, lr}
	/* Echo data. */
	cdcdf_acm_read((uint8_t *)usbd_cdc_buffer, sizeof(usbd_cdc_buffer));
    b06e:	2140      	movs	r1, #64	; 0x40
    b070:	4b02      	ldr	r3, [pc, #8]	; (b07c <usb_device_cb_bulk_in+0x10>)
    b072:	4803      	ldr	r0, [pc, #12]	; (b080 <usb_device_cb_bulk_in+0x14>)
    b074:	4798      	blx	r3

	/* No error. */
	return false;
}
    b076:	2000      	movs	r0, #0
    b078:	bd08      	pop	{r3, pc}
    b07a:	bf00      	nop
    b07c:	0000a995 	.word	0x0000a995
    b080:	20007378 	.word	0x20007378

0000b084 <usb_device_cb_bulk_out>:
{
    b084:	b508      	push	{r3, lr}
	cdcdf_acm_write((uint8_t *)usbd_cdc_buffer, count);
    b086:	4611      	mov	r1, r2
    b088:	4b02      	ldr	r3, [pc, #8]	; (b094 <usb_device_cb_bulk_out+0x10>)
    b08a:	4803      	ldr	r0, [pc, #12]	; (b098 <usb_device_cb_bulk_out+0x14>)
    b08c:	4798      	blx	r3
}
    b08e:	2000      	movs	r0, #0
    b090:	bd08      	pop	{r3, pc}
    b092:	bf00      	nop
    b094:	0000a9bd 	.word	0x0000a9bd
    b098:	20007378 	.word	0x20007378

0000b09c <usb_device_cb_state_c>:

/**
 * \brief Callback invoked when Line State Change
 */
bool usb_device_cb_state_c(usb_cdc_control_signal_t state)
{
    b09c:	b513      	push	{r0, r1, r4, lr}
	if (state.rs232.DTR) {
    b09e:	07c3      	lsls	r3, r0, #31
{
    b0a0:	f8ad 0004 	strh.w	r0, [sp, #4]
	if (state.rs232.DTR) {
    b0a4:	d50a      	bpl.n	b0bc <usb_device_cb_state_c+0x20>
		/* Callbacks must be registered after endpoint allocation */
		cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)usb_device_cb_bulk_out);
    b0a6:	4907      	ldr	r1, [pc, #28]	; (b0c4 <usb_device_cb_state_c+0x28>)
    b0a8:	4c07      	ldr	r4, [pc, #28]	; (b0c8 <usb_device_cb_state_c+0x2c>)
    b0aa:	2000      	movs	r0, #0
    b0ac:	47a0      	blx	r4
		cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)usb_device_cb_bulk_in);
    b0ae:	4907      	ldr	r1, [pc, #28]	; (b0cc <usb_device_cb_state_c+0x30>)
    b0b0:	2001      	movs	r0, #1
    b0b2:	47a0      	blx	r4
		/* Start Rx */
		cdcdf_acm_read((uint8_t *)usbd_cdc_buffer, sizeof(usbd_cdc_buffer));
    b0b4:	2140      	movs	r1, #64	; 0x40
    b0b6:	4806      	ldr	r0, [pc, #24]	; (b0d0 <usb_device_cb_state_c+0x34>)
    b0b8:	4b06      	ldr	r3, [pc, #24]	; (b0d4 <usb_device_cb_state_c+0x38>)
    b0ba:	4798      	blx	r3
	}

	/* No error. */
	return false;
}
    b0bc:	2000      	movs	r0, #0
    b0be:	b002      	add	sp, #8
    b0c0:	bd10      	pop	{r4, pc}
    b0c2:	bf00      	nop
    b0c4:	0000b085 	.word	0x0000b085
    b0c8:	0000a9e5 	.word	0x0000a9e5
    b0cc:	0000b06d 	.word	0x0000b06d
    b0d0:	20007378 	.word	0x20007378
    b0d4:	0000a995 	.word	0x0000a995

0000b0d8 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    b0d8:	b510      	push	{r4, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    b0da:	4b06      	ldr	r3, [pc, #24]	; (b0f4 <cdc_device_acm_init+0x1c>)
    b0dc:	4806      	ldr	r0, [pc, #24]	; (b0f8 <cdc_device_acm_init+0x20>)
    b0de:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    b0e0:	4b06      	ldr	r3, [pc, #24]	; (b0fc <cdc_device_acm_init+0x24>)
    b0e2:	4798      	blx	r3

	usbdc_start(single_desc);
    b0e4:	4b06      	ldr	r3, [pc, #24]	; (b100 <cdc_device_acm_init+0x28>)
    b0e6:	4807      	ldr	r0, [pc, #28]	; (b104 <cdc_device_acm_init+0x2c>)
    b0e8:	4798      	blx	r3
	usbdc_attach();
    b0ea:	4b07      	ldr	r3, [pc, #28]	; (b108 <cdc_device_acm_init+0x30>)
}
    b0ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	usbdc_attach();
    b0f0:	4718      	bx	r3
    b0f2:	bf00      	nop
    b0f4:	0000af01 	.word	0x0000af01
    b0f8:	200073b8 	.word	0x200073b8
    b0fc:	0000a951 	.word	0x0000a951
    b100:	0000af6d 	.word	0x0000af6d
    b104:	2000001c 	.word	0x2000001c
    b108:	0000afa1 	.word	0x0000afa1

0000b10c <usb_init>:
}

void usb_init(void)
{

	cdc_device_acm_init();
    b10c:	4b00      	ldr	r3, [pc, #0]	; (b110 <usb_init+0x4>)
    b10e:	4718      	bx	r3
    b110:	0000b0d9 	.word	0x0000b0d9

0000b114 <bash_spi_transfer.constprop.0>:
// Function:    bash_spi_transfer(unsigned char *tx, unsigned char *rx, int size)
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: rolls round the push-pull MOSI/MISO of the SPI bus for [size] bytes of 8-bits, MSB
// Returns:     Nothing
// *****************************************************************************************************************************************************************
static void inline bash_spi_transfer(unsigned char *tx, unsigned char *rx, int size)
    b114:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    b118:	4e1e      	ldr	r6, [pc, #120]	; (b194 <bash_spi_transfer.constprop.0+0x80>)
    b11a:	4d1f      	ldr	r5, [pc, #124]	; (b198 <bash_spi_transfer.constprop.0+0x84>)
{
	int count, loop;
	
	for (count = 0; count < size; count++) {
    b11c:	f04f 0800 	mov.w	r8, #0
    b120:	f44f 4900 	mov.w	r9, #32768	; 0x8000
		rx[count] = 0;
		
		for (loop = 8; loop; loop--) {
			gpio_set_pin_level(PB12_SPI_MOSI, (tx[count] & (1 << (loop - 1))) ? 1 : 0);
    b124:	f106 0a04 	add.w	sl, r6, #4
		rx[count] = 0;
    b128:	2300      	movs	r3, #0
    b12a:	7033      	strb	r3, [r6, #0]
		for (loop = 8; loop; loop--) {
    b12c:	2708      	movs	r7, #8
			gpio_set_pin_level(PB12_SPI_MOSI, (tx[count] & (1 << (loop - 1))) ? 1 : 0);
    b12e:	f818 300a 	ldrb.w	r3, [r8, sl]
    b132:	3f01      	subs	r7, #1
    b134:	413b      	asrs	r3, r7
	if (level) {
    b136:	f013 0f01 	tst.w	r3, #1
    b13a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    b13e:	bf14      	ite	ne
    b140:	f8c5 3098 	strne.w	r3, [r5, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    b144:	f8c5 3094 	streq.w	r3, [r5, #148]	; 0x94
	CRITICAL_SECTION_ENTER();
    b148:	a801      	add	r0, sp, #4
    b14a:	f8c5 9094 	str.w	r9, [r5, #148]	; 0x94
    b14e:	4b13      	ldr	r3, [pc, #76]	; (b19c <bash_spi_transfer.constprop.0+0x88>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    b150:	f8c5 9098 	str.w	r9, [r5, #152]	; 0x98
    b154:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    b156:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    b15a:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    b15e:	f8d5 4090 	ldr.w	r4, [r5, #144]	; 0x90
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    b162:	405c      	eors	r4, r3
    b164:	4014      	ands	r4, r2
    b166:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    b168:	a801      	add	r0, sp, #4
    b16a:	4b0d      	ldr	r3, [pc, #52]	; (b1a0 <bash_spi_transfer.constprop.0+0x8c>)
    b16c:	4798      	blx	r3
    b16e:	f3c4 3440 	ubfx	r4, r4, #13, #1
			gpio_set_pin_level(PB15_SPI_CLK, 0);
			gpio_set_pin_level(PB15_SPI_CLK, 1);
			
			rx[count] |= (gpio_get_pin_level(PB13_SPI_MISO) << (loop - 1));
    b172:	7833      	ldrb	r3, [r6, #0]
    b174:	40bc      	lsls	r4, r7
    b176:	431c      	orrs	r4, r3
    b178:	7034      	strb	r4, [r6, #0]
		for (loop = 8; loop; loop--) {
    b17a:	2f00      	cmp	r7, #0
    b17c:	d1d7      	bne.n	b12e <bash_spi_transfer.constprop.0+0x1a>
	for (count = 0; count < size; count++) {
    b17e:	f108 0801 	add.w	r8, r8, #1
    b182:	f1b8 0f03 	cmp.w	r8, #3
    b186:	f106 0601 	add.w	r6, r6, #1
    b18a:	d1cd      	bne.n	b128 <bash_spi_transfer.constprop.0+0x14>
		}
	}
}
    b18c:	b002      	add	sp, #8
    b18e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b192:	bf00      	nop
    b194:	200073f8 	.word	0x200073f8
    b198:	41008000 	.word	0x41008000
    b19c:	000011a5 	.word	0x000011a5
    b1a0:	000011b3 	.word	0x000011b3

0000b1a4 <EEprom_settings>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: when requiring EEprom configuration data to be read or written to/from the non-volatile area, this facilitates the [NV] access
// Returns:     Nothing
// *****************************************************************************************************************************************************************
int EEprom_settings(unsigned char *data, unsigned int size, unsigned char write_notread)
{
    b1a4:	b410      	push	{r4}
    b1a6:	460b      	mov	r3, r1
	/* If we have a write flag set, then write the setting configuration overlay image into NV ram */
	if (write_notread) {
    b1a8:	b13a      	cbz	r2, b1ba <EEprom_settings+0x16>
		return flash_write(&FLASH_0, 256 * 1024, data, size);
    b1aa:	4602      	mov	r2, r0
    b1ac:	4c06      	ldr	r4, [pc, #24]	; (b1c8 <EEprom_settings+0x24>)
    b1ae:	4807      	ldr	r0, [pc, #28]	; (b1cc <EEprom_settings+0x28>)
    b1b0:	f44f 2180 	mov.w	r1, #262144	; 0x40000
	}
	
	/* else, if we have a read flag set, then read the setting configuration overlay image from the NV ram into the "data" pointer"*/
	return flash_read(&FLASH_0, 256 * 1024, data, size);
    b1b4:	46a4      	mov	ip, r4
}
    b1b6:	bc10      	pop	{r4}
	return flash_read(&FLASH_0, 256 * 1024, data, size);
    b1b8:	4760      	bx	ip
    b1ba:	4602      	mov	r2, r0
    b1bc:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    b1c0:	4802      	ldr	r0, [pc, #8]	; (b1cc <EEprom_settings+0x28>)
    b1c2:	4c03      	ldr	r4, [pc, #12]	; (b1d0 <EEprom_settings+0x2c>)
    b1c4:	e7f6      	b.n	b1b4 <EEprom_settings+0x10>
    b1c6:	bf00      	nop
    b1c8:	00001341 	.word	0x00001341
    b1cc:	20007408 	.word	0x20007408
    b1d0:	000012d1 	.word	0x000012d1

0000b1d4 <checkKSZreg>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: check a value in an SPI register of the KSZ-Micrel Ethernet SWITCH
// Returns:     does the register value match the check value? True: False
// *****************************************************************************************************************************************************************
bool checkKSZreg(uint16_t reg, unsigned char verify)
{
    b1d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Lower the nCS line for this SPI device */	
	gpio_set_pin_level(PB07_SPInCS_KSZ8974, 0);	
	
    /* Setup the 3 control bytes to perform a register read operation */		
	command_dataw[0] = 0x40 + REG_SPI_READ + (unsigned char)(reg >> 7);
    b1d6:	4c0b      	ldr	r4, [pc, #44]	; (b204 <checkKSZreg+0x30>)
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    b1d8:	4d0b      	ldr	r5, [pc, #44]	; (b208 <checkKSZreg+0x34>)
    b1da:	09c3      	lsrs	r3, r0, #7
    b1dc:	2680      	movs	r6, #128	; 0x80
    b1de:	3360      	adds	r3, #96	; 0x60
    b1e0:	f8c5 6094 	str.w	r6, [r5, #148]	; 0x94
    b1e4:	7123      	strb	r3, [r4, #4]
	command_dataw[1] = (unsigned char)(reg & 0x7F) << 1;
	command_dataw[2] = 0x00;
    b1e6:	2300      	movs	r3, #0
	command_dataw[1] = (unsigned char)(reg & 0x7F) << 1;
    b1e8:	0040      	lsls	r0, r0, #1
	command_dataw[2] = 0x00;
    b1ea:	71a3      	strb	r3, [r4, #6]
	
	/* Perform the actual 3-byte push/pull SPI operation */
	bash_spi_transfer(command_dataw, command_datar, 3);
    b1ec:	4b07      	ldr	r3, [pc, #28]	; (b20c <checkKSZreg+0x38>)
	command_dataw[1] = (unsigned char)(reg & 0x7F) << 1;
    b1ee:	7160      	strb	r0, [r4, #5]
{
    b1f0:	460f      	mov	r7, r1
	bash_spi_transfer(command_dataw, command_datar, 3);
    b1f2:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    b1f4:	f8c5 6098 	str.w	r6, [r5, #152]	; 0x98

	/* Raise the nCS line for this SPI device */	
	gpio_set_pin_level(PB07_SPInCS_KSZ8974, 1);
	
	/* Check to see if the read data byte from the SPI end-point register matches the "verify" parameter and return the result as a boolean */
	return (command_datar[2] == verify) ? 1 : 0;
    b1f8:	78a0      	ldrb	r0, [r4, #2]
}
    b1fa:	1bc3      	subs	r3, r0, r7
    b1fc:	4258      	negs	r0, r3
    b1fe:	4158      	adcs	r0, r3
    b200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b202:	bf00      	nop
    b204:	200073f8 	.word	0x200073f8
    b208:	41008000 	.word	0x41008000
    b20c:	0000b115 	.word	0x0000b115

0000b210 <readKSZreg>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: read an SPI register of the KSZ-Micrel Ethernet SWITCH
// Returns:     value of register of KSZ Ethernet SWITCH SPI read
// *****************************************************************************************************************************************************************
unsigned char readKSZreg(uint16_t reg)
{
    b210:	b570      	push	{r4, r5, r6, lr}
	/* Lower the nCS line for this SPI device */	
	gpio_set_pin_level(PB07_SPInCS_KSZ8974, 0);
	
	/* Setup the 3 control bytes to perform a register read operation */
	command_dataw[0] = 0x40 + REG_SPI_READ + (unsigned char)(reg >> 7);
    b212:	09c3      	lsrs	r3, r0, #7
    b214:	4c08      	ldr	r4, [pc, #32]	; (b238 <readKSZreg+0x28>)
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    b216:	4d09      	ldr	r5, [pc, #36]	; (b23c <readKSZreg+0x2c>)
    b218:	2680      	movs	r6, #128	; 0x80
    b21a:	3360      	adds	r3, #96	; 0x60
    b21c:	f8c5 6094 	str.w	r6, [r5, #148]	; 0x94
    b220:	7123      	strb	r3, [r4, #4]
	command_dataw[1] = (unsigned char)(reg & 0x7F) << 1;
	command_dataw[2] = 0x00;
    b222:	2300      	movs	r3, #0
	command_dataw[1] = (unsigned char)(reg & 0x7F) << 1;
    b224:	0040      	lsls	r0, r0, #1
	command_dataw[2] = 0x00;
    b226:	71a3      	strb	r3, [r4, #6]
	
	/* Perform the actual 3-byte push/pull SPI operation */
	bash_spi_transfer(command_dataw, command_datar, 3);
    b228:	4b05      	ldr	r3, [pc, #20]	; (b240 <readKSZreg+0x30>)
	command_dataw[1] = (unsigned char)(reg & 0x7F) << 1;
    b22a:	7160      	strb	r0, [r4, #5]
	bash_spi_transfer(command_dataw, command_datar, 3);
    b22c:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    b22e:	f8c5 6098 	str.w	r6, [r5, #152]	; 0x98
	/* Raise the nCS line for this SPI device */
	gpio_set_pin_level(PB07_SPInCS_KSZ8974, 1);
	
	/* Just return the actual far-end register data value */
	return (command_datar[2]);
}
    b232:	78a0      	ldrb	r0, [r4, #2]
    b234:	bd70      	pop	{r4, r5, r6, pc}
    b236:	bf00      	nop
    b238:	200073f8 	.word	0x200073f8
    b23c:	41008000 	.word	0x41008000
    b240:	0000b115 	.word	0x0000b115

0000b244 <writeKSZreg>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: write to a SPI register of the KSZ-Micrel Ethernet SWITCH
// Returns:     nothing
// *****************************************************************************************************************************************************************
void writeKSZreg(uint16_t reg, unsigned char value)
{
    b244:	b538      	push	{r3, r4, r5, lr}
	/* Lower the nCS line for this SPI device */
	gpio_set_pin_level(PB07_SPInCS_KSZ8974, 0);
	
	/* Setup the 3 control bytes to perform a register write operation */
	command_dataw[0] = 0x40 + REG_SPI_WRITE + (unsigned char)(reg >> 7);
    b246:	09c2      	lsrs	r2, r0, #7
    b248:	4b07      	ldr	r3, [pc, #28]	; (b268 <writeKSZreg+0x24>)
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    b24a:	4c08      	ldr	r4, [pc, #32]	; (b26c <writeKSZreg+0x28>)
    b24c:	2580      	movs	r5, #128	; 0x80
    b24e:	3240      	adds	r2, #64	; 0x40
	command_dataw[1] = (unsigned char)(reg & 0x7F) << 1;
    b250:	0040      	lsls	r0, r0, #1
    b252:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
	command_dataw[0] = 0x40 + REG_SPI_WRITE + (unsigned char)(reg >> 7);
    b256:	711a      	strb	r2, [r3, #4]
	command_dataw[1] = (unsigned char)(reg & 0x7F) << 1;
    b258:	7158      	strb	r0, [r3, #5]
	command_dataw[2] = value;
    b25a:	7199      	strb	r1, [r3, #6]
	
	/* Perform the actual 3-byte push/pull SPI operation */
	bash_spi_transfer(command_dataw, command_datar, 3);
    b25c:	4b04      	ldr	r3, [pc, #16]	; (b270 <writeKSZreg+0x2c>)
    b25e:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    b260:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
    b264:	bd38      	pop	{r3, r4, r5, pc}
    b266:	bf00      	nop
    b268:	200073f8 	.word	0x200073f8
    b26c:	41008000 	.word	0x41008000
    b270:	0000b115 	.word	0x0000b115

0000b274 <application_appcall>:
// Returns:     Nothing (NULL)
// *****************************************************************************************************************************************************************
void application_appcall(void)
{
	/* This is a stub function. It should not ever get called */
	xprintf("MultiSense application_appcall()\r\n");
    b274:	4801      	ldr	r0, [pc, #4]	; (b27c <application_appcall+0x8>)
    b276:	4b02      	ldr	r3, [pc, #8]	; (b280 <application_appcall+0xc>)
    b278:	4718      	bx	r3
    b27a:	bf00      	nop
    b27c:	0000f2f7 	.word	0x0000f2f7
    b280:	00000395 	.word	0x00000395

0000b284 <uip_log>:
// Returns:     Nothing (NULL)
// *****************************************************************************************************************************************************************
void uip_log(char *msg)
{
	/* Print out the messages from the uIP stack */
	xprintf("MultiSense uIP log --> [%s]\r\n", msg);
    b284:	4601      	mov	r1, r0
    b286:	4b01      	ldr	r3, [pc, #4]	; (b28c <uip_log+0x8>)
    b288:	4801      	ldr	r0, [pc, #4]	; (b290 <uip_log+0xc>)
    b28a:	4718      	bx	r3
    b28c:	00000395 	.word	0x00000395
    b290:	0000f356 	.word	0x0000f356

0000b294 <__libc_init_array>:
    b294:	b570      	push	{r4, r5, r6, lr}
    b296:	4e0d      	ldr	r6, [pc, #52]	; (b2cc <__libc_init_array+0x38>)
    b298:	4c0d      	ldr	r4, [pc, #52]	; (b2d0 <__libc_init_array+0x3c>)
    b29a:	1ba4      	subs	r4, r4, r6
    b29c:	10a4      	asrs	r4, r4, #2
    b29e:	2500      	movs	r5, #0
    b2a0:	42a5      	cmp	r5, r4
    b2a2:	d109      	bne.n	b2b8 <__libc_init_array+0x24>
    b2a4:	4e0b      	ldr	r6, [pc, #44]	; (b2d4 <__libc_init_array+0x40>)
    b2a6:	4c0c      	ldr	r4, [pc, #48]	; (b2d8 <__libc_init_array+0x44>)
    b2a8:	f004 f92e 	bl	f508 <_init>
    b2ac:	1ba4      	subs	r4, r4, r6
    b2ae:	10a4      	asrs	r4, r4, #2
    b2b0:	2500      	movs	r5, #0
    b2b2:	42a5      	cmp	r5, r4
    b2b4:	d105      	bne.n	b2c2 <__libc_init_array+0x2e>
    b2b6:	bd70      	pop	{r4, r5, r6, pc}
    b2b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    b2bc:	4798      	blx	r3
    b2be:	3501      	adds	r5, #1
    b2c0:	e7ee      	b.n	b2a0 <__libc_init_array+0xc>
    b2c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    b2c6:	4798      	blx	r3
    b2c8:	3501      	adds	r5, #1
    b2ca:	e7f2      	b.n	b2b2 <__libc_init_array+0x1e>
    b2cc:	0000f514 	.word	0x0000f514
    b2d0:	0000f514 	.word	0x0000f514
    b2d4:	0000f514 	.word	0x0000f514
    b2d8:	0000f518 	.word	0x0000f518

0000b2dc <memcmp>:
    b2dc:	b510      	push	{r4, lr}
    b2de:	3901      	subs	r1, #1
    b2e0:	4402      	add	r2, r0
    b2e2:	4290      	cmp	r0, r2
    b2e4:	d101      	bne.n	b2ea <memcmp+0xe>
    b2e6:	2000      	movs	r0, #0
    b2e8:	bd10      	pop	{r4, pc}
    b2ea:	f810 3b01 	ldrb.w	r3, [r0], #1
    b2ee:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    b2f2:	42a3      	cmp	r3, r4
    b2f4:	d0f5      	beq.n	b2e2 <memcmp+0x6>
    b2f6:	1b18      	subs	r0, r3, r4
    b2f8:	bd10      	pop	{r4, pc}

0000b2fa <memcpy>:
    b2fa:	b510      	push	{r4, lr}
    b2fc:	1e43      	subs	r3, r0, #1
    b2fe:	440a      	add	r2, r1
    b300:	4291      	cmp	r1, r2
    b302:	d100      	bne.n	b306 <memcpy+0xc>
    b304:	bd10      	pop	{r4, pc}
    b306:	f811 4b01 	ldrb.w	r4, [r1], #1
    b30a:	f803 4f01 	strb.w	r4, [r3, #1]!
    b30e:	e7f7      	b.n	b300 <memcpy+0x6>

0000b310 <memmove>:
    b310:	4288      	cmp	r0, r1
    b312:	b510      	push	{r4, lr}
    b314:	eb01 0302 	add.w	r3, r1, r2
    b318:	d803      	bhi.n	b322 <memmove+0x12>
    b31a:	1e42      	subs	r2, r0, #1
    b31c:	4299      	cmp	r1, r3
    b31e:	d10c      	bne.n	b33a <memmove+0x2a>
    b320:	bd10      	pop	{r4, pc}
    b322:	4298      	cmp	r0, r3
    b324:	d2f9      	bcs.n	b31a <memmove+0xa>
    b326:	1881      	adds	r1, r0, r2
    b328:	1ad2      	subs	r2, r2, r3
    b32a:	42d3      	cmn	r3, r2
    b32c:	d100      	bne.n	b330 <memmove+0x20>
    b32e:	bd10      	pop	{r4, pc}
    b330:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    b334:	f801 4d01 	strb.w	r4, [r1, #-1]!
    b338:	e7f7      	b.n	b32a <memmove+0x1a>
    b33a:	f811 4b01 	ldrb.w	r4, [r1], #1
    b33e:	f802 4f01 	strb.w	r4, [r2, #1]!
    b342:	e7eb      	b.n	b31c <memmove+0xc>

0000b344 <memset>:
    b344:	4402      	add	r2, r0
    b346:	4603      	mov	r3, r0
    b348:	4293      	cmp	r3, r2
    b34a:	d100      	bne.n	b34e <memset+0xa>
    b34c:	4770      	bx	lr
    b34e:	f803 1b01 	strb.w	r1, [r3], #1
    b352:	e7f9      	b.n	b348 <memset+0x4>

0000b354 <siscanf>:
    b354:	b40e      	push	{r1, r2, r3}
    b356:	b530      	push	{r4, r5, lr}
    b358:	b09c      	sub	sp, #112	; 0x70
    b35a:	ac1f      	add	r4, sp, #124	; 0x7c
    b35c:	f44f 7201 	mov.w	r2, #516	; 0x204
    b360:	f854 5b04 	ldr.w	r5, [r4], #4
    b364:	f8ad 2014 	strh.w	r2, [sp, #20]
    b368:	9002      	str	r0, [sp, #8]
    b36a:	9006      	str	r0, [sp, #24]
    b36c:	f000 f81e 	bl	b3ac <strlen>
    b370:	4b0b      	ldr	r3, [pc, #44]	; (b3a0 <siscanf+0x4c>)
    b372:	9003      	str	r0, [sp, #12]
    b374:	9007      	str	r0, [sp, #28]
    b376:	930b      	str	r3, [sp, #44]	; 0x2c
    b378:	480a      	ldr	r0, [pc, #40]	; (b3a4 <siscanf+0x50>)
    b37a:	9401      	str	r4, [sp, #4]
    b37c:	2300      	movs	r3, #0
    b37e:	930f      	str	r3, [sp, #60]	; 0x3c
    b380:	9314      	str	r3, [sp, #80]	; 0x50
    b382:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b386:	f8ad 3016 	strh.w	r3, [sp, #22]
    b38a:	462a      	mov	r2, r5
    b38c:	4623      	mov	r3, r4
    b38e:	a902      	add	r1, sp, #8
    b390:	6800      	ldr	r0, [r0, #0]
    b392:	f000 f8e1 	bl	b558 <__ssvfiscanf_r>
    b396:	b01c      	add	sp, #112	; 0x70
    b398:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    b39c:	b003      	add	sp, #12
    b39e:	4770      	bx	lr
    b3a0:	0000b3a9 	.word	0x0000b3a9
    b3a4:	200000e0 	.word	0x200000e0

0000b3a8 <__seofread>:
    b3a8:	2000      	movs	r0, #0
    b3aa:	4770      	bx	lr

0000b3ac <strlen>:
    b3ac:	4603      	mov	r3, r0
    b3ae:	f813 2b01 	ldrb.w	r2, [r3], #1
    b3b2:	2a00      	cmp	r2, #0
    b3b4:	d1fb      	bne.n	b3ae <strlen+0x2>
    b3b6:	1a18      	subs	r0, r3, r0
    b3b8:	3801      	subs	r0, #1
    b3ba:	4770      	bx	lr

0000b3bc <strncpy>:
    b3bc:	b570      	push	{r4, r5, r6, lr}
    b3be:	4604      	mov	r4, r0
    b3c0:	b902      	cbnz	r2, b3c4 <strncpy+0x8>
    b3c2:	bd70      	pop	{r4, r5, r6, pc}
    b3c4:	4623      	mov	r3, r4
    b3c6:	f811 5b01 	ldrb.w	r5, [r1], #1
    b3ca:	f803 5b01 	strb.w	r5, [r3], #1
    b3ce:	1e56      	subs	r6, r2, #1
    b3d0:	b91d      	cbnz	r5, b3da <strncpy+0x1e>
    b3d2:	4414      	add	r4, r2
    b3d4:	42a3      	cmp	r3, r4
    b3d6:	d103      	bne.n	b3e0 <strncpy+0x24>
    b3d8:	bd70      	pop	{r4, r5, r6, pc}
    b3da:	461c      	mov	r4, r3
    b3dc:	4632      	mov	r2, r6
    b3de:	e7ef      	b.n	b3c0 <strncpy+0x4>
    b3e0:	f803 5b01 	strb.w	r5, [r3], #1
    b3e4:	e7f6      	b.n	b3d4 <strncpy+0x18>
	...

0000b3e8 <_malloc_r>:
    b3e8:	b570      	push	{r4, r5, r6, lr}
    b3ea:	1ccd      	adds	r5, r1, #3
    b3ec:	f025 0503 	bic.w	r5, r5, #3
    b3f0:	3508      	adds	r5, #8
    b3f2:	2d0c      	cmp	r5, #12
    b3f4:	bf38      	it	cc
    b3f6:	250c      	movcc	r5, #12
    b3f8:	2d00      	cmp	r5, #0
    b3fa:	4606      	mov	r6, r0
    b3fc:	db01      	blt.n	b402 <_malloc_r+0x1a>
    b3fe:	42a9      	cmp	r1, r5
    b400:	d903      	bls.n	b40a <_malloc_r+0x22>
    b402:	230c      	movs	r3, #12
    b404:	6033      	str	r3, [r6, #0]
    b406:	2000      	movs	r0, #0
    b408:	bd70      	pop	{r4, r5, r6, pc}
    b40a:	f000 fd61 	bl	bed0 <__malloc_lock>
    b40e:	4a23      	ldr	r2, [pc, #140]	; (b49c <_malloc_r+0xb4>)
    b410:	6814      	ldr	r4, [r2, #0]
    b412:	4621      	mov	r1, r4
    b414:	b991      	cbnz	r1, b43c <_malloc_r+0x54>
    b416:	4c22      	ldr	r4, [pc, #136]	; (b4a0 <_malloc_r+0xb8>)
    b418:	6823      	ldr	r3, [r4, #0]
    b41a:	b91b      	cbnz	r3, b424 <_malloc_r+0x3c>
    b41c:	4630      	mov	r0, r6
    b41e:	f000 fb47 	bl	bab0 <_sbrk_r>
    b422:	6020      	str	r0, [r4, #0]
    b424:	4629      	mov	r1, r5
    b426:	4630      	mov	r0, r6
    b428:	f000 fb42 	bl	bab0 <_sbrk_r>
    b42c:	1c43      	adds	r3, r0, #1
    b42e:	d126      	bne.n	b47e <_malloc_r+0x96>
    b430:	230c      	movs	r3, #12
    b432:	6033      	str	r3, [r6, #0]
    b434:	4630      	mov	r0, r6
    b436:	f000 fd4c 	bl	bed2 <__malloc_unlock>
    b43a:	e7e4      	b.n	b406 <_malloc_r+0x1e>
    b43c:	680b      	ldr	r3, [r1, #0]
    b43e:	1b5b      	subs	r3, r3, r5
    b440:	d41a      	bmi.n	b478 <_malloc_r+0x90>
    b442:	2b0b      	cmp	r3, #11
    b444:	d90f      	bls.n	b466 <_malloc_r+0x7e>
    b446:	600b      	str	r3, [r1, #0]
    b448:	50cd      	str	r5, [r1, r3]
    b44a:	18cc      	adds	r4, r1, r3
    b44c:	4630      	mov	r0, r6
    b44e:	f000 fd40 	bl	bed2 <__malloc_unlock>
    b452:	f104 000b 	add.w	r0, r4, #11
    b456:	1d23      	adds	r3, r4, #4
    b458:	f020 0007 	bic.w	r0, r0, #7
    b45c:	1ac3      	subs	r3, r0, r3
    b45e:	d01b      	beq.n	b498 <_malloc_r+0xb0>
    b460:	425a      	negs	r2, r3
    b462:	50e2      	str	r2, [r4, r3]
    b464:	bd70      	pop	{r4, r5, r6, pc}
    b466:	428c      	cmp	r4, r1
    b468:	bf0d      	iteet	eq
    b46a:	6863      	ldreq	r3, [r4, #4]
    b46c:	684b      	ldrne	r3, [r1, #4]
    b46e:	6063      	strne	r3, [r4, #4]
    b470:	6013      	streq	r3, [r2, #0]
    b472:	bf18      	it	ne
    b474:	460c      	movne	r4, r1
    b476:	e7e9      	b.n	b44c <_malloc_r+0x64>
    b478:	460c      	mov	r4, r1
    b47a:	6849      	ldr	r1, [r1, #4]
    b47c:	e7ca      	b.n	b414 <_malloc_r+0x2c>
    b47e:	1cc4      	adds	r4, r0, #3
    b480:	f024 0403 	bic.w	r4, r4, #3
    b484:	42a0      	cmp	r0, r4
    b486:	d005      	beq.n	b494 <_malloc_r+0xac>
    b488:	1a21      	subs	r1, r4, r0
    b48a:	4630      	mov	r0, r6
    b48c:	f000 fb10 	bl	bab0 <_sbrk_r>
    b490:	3001      	adds	r0, #1
    b492:	d0cd      	beq.n	b430 <_malloc_r+0x48>
    b494:	6025      	str	r5, [r4, #0]
    b496:	e7d9      	b.n	b44c <_malloc_r+0x64>
    b498:	bd70      	pop	{r4, r5, r6, pc}
    b49a:	bf00      	nop
    b49c:	20007400 	.word	0x20007400
    b4a0:	20007404 	.word	0x20007404

0000b4a4 <_sungetc_r>:
    b4a4:	b538      	push	{r3, r4, r5, lr}
    b4a6:	1c4b      	adds	r3, r1, #1
    b4a8:	4614      	mov	r4, r2
    b4aa:	d103      	bne.n	b4b4 <_sungetc_r+0x10>
    b4ac:	f04f 35ff 	mov.w	r5, #4294967295
    b4b0:	4628      	mov	r0, r5
    b4b2:	bd38      	pop	{r3, r4, r5, pc}
    b4b4:	8993      	ldrh	r3, [r2, #12]
    b4b6:	f023 0320 	bic.w	r3, r3, #32
    b4ba:	8193      	strh	r3, [r2, #12]
    b4bc:	6b53      	ldr	r3, [r2, #52]	; 0x34
    b4be:	6852      	ldr	r2, [r2, #4]
    b4c0:	b2cd      	uxtb	r5, r1
    b4c2:	b18b      	cbz	r3, b4e8 <_sungetc_r+0x44>
    b4c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    b4c6:	429a      	cmp	r2, r3
    b4c8:	da08      	bge.n	b4dc <_sungetc_r+0x38>
    b4ca:	6823      	ldr	r3, [r4, #0]
    b4cc:	1e5a      	subs	r2, r3, #1
    b4ce:	6022      	str	r2, [r4, #0]
    b4d0:	f803 5c01 	strb.w	r5, [r3, #-1]
    b4d4:	6863      	ldr	r3, [r4, #4]
    b4d6:	3301      	adds	r3, #1
    b4d8:	6063      	str	r3, [r4, #4]
    b4da:	e7e9      	b.n	b4b0 <_sungetc_r+0xc>
    b4dc:	4621      	mov	r1, r4
    b4de:	f000 fc49 	bl	bd74 <__submore>
    b4e2:	2800      	cmp	r0, #0
    b4e4:	d0f1      	beq.n	b4ca <_sungetc_r+0x26>
    b4e6:	e7e1      	b.n	b4ac <_sungetc_r+0x8>
    b4e8:	6921      	ldr	r1, [r4, #16]
    b4ea:	6823      	ldr	r3, [r4, #0]
    b4ec:	b151      	cbz	r1, b504 <_sungetc_r+0x60>
    b4ee:	4299      	cmp	r1, r3
    b4f0:	d208      	bcs.n	b504 <_sungetc_r+0x60>
    b4f2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    b4f6:	428d      	cmp	r5, r1
    b4f8:	d104      	bne.n	b504 <_sungetc_r+0x60>
    b4fa:	3b01      	subs	r3, #1
    b4fc:	3201      	adds	r2, #1
    b4fe:	6023      	str	r3, [r4, #0]
    b500:	6062      	str	r2, [r4, #4]
    b502:	e7d5      	b.n	b4b0 <_sungetc_r+0xc>
    b504:	63e3      	str	r3, [r4, #60]	; 0x3c
    b506:	f104 0344 	add.w	r3, r4, #68	; 0x44
    b50a:	6363      	str	r3, [r4, #52]	; 0x34
    b50c:	2303      	movs	r3, #3
    b50e:	63a3      	str	r3, [r4, #56]	; 0x38
    b510:	4623      	mov	r3, r4
    b512:	6422      	str	r2, [r4, #64]	; 0x40
    b514:	f803 5f46 	strb.w	r5, [r3, #70]!
    b518:	6023      	str	r3, [r4, #0]
    b51a:	2301      	movs	r3, #1
    b51c:	e7dc      	b.n	b4d8 <_sungetc_r+0x34>

0000b51e <__ssrefill_r>:
    b51e:	b510      	push	{r4, lr}
    b520:	460c      	mov	r4, r1
    b522:	6b49      	ldr	r1, [r1, #52]	; 0x34
    b524:	b169      	cbz	r1, b542 <__ssrefill_r+0x24>
    b526:	f104 0344 	add.w	r3, r4, #68	; 0x44
    b52a:	4299      	cmp	r1, r3
    b52c:	d001      	beq.n	b532 <__ssrefill_r+0x14>
    b52e:	f000 fcd1 	bl	bed4 <_free_r>
    b532:	6c23      	ldr	r3, [r4, #64]	; 0x40
    b534:	6063      	str	r3, [r4, #4]
    b536:	2000      	movs	r0, #0
    b538:	6360      	str	r0, [r4, #52]	; 0x34
    b53a:	b113      	cbz	r3, b542 <__ssrefill_r+0x24>
    b53c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    b53e:	6023      	str	r3, [r4, #0]
    b540:	bd10      	pop	{r4, pc}
    b542:	6923      	ldr	r3, [r4, #16]
    b544:	6023      	str	r3, [r4, #0]
    b546:	2300      	movs	r3, #0
    b548:	6063      	str	r3, [r4, #4]
    b54a:	89a3      	ldrh	r3, [r4, #12]
    b54c:	f043 0320 	orr.w	r3, r3, #32
    b550:	81a3      	strh	r3, [r4, #12]
    b552:	f04f 30ff 	mov.w	r0, #4294967295
    b556:	bd10      	pop	{r4, pc}

0000b558 <__ssvfiscanf_r>:
    b558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b55c:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
    b560:	f10d 080c 	add.w	r8, sp, #12
    b564:	9301      	str	r3, [sp, #4]
    b566:	2300      	movs	r3, #0
    b568:	9346      	str	r3, [sp, #280]	; 0x118
    b56a:	9347      	str	r3, [sp, #284]	; 0x11c
    b56c:	4ba0      	ldr	r3, [pc, #640]	; (b7f0 <__ssvfiscanf_r+0x298>)
    b56e:	93a2      	str	r3, [sp, #648]	; 0x288
    b570:	f8df 9284 	ldr.w	r9, [pc, #644]	; b7f8 <__ssvfiscanf_r+0x2a0>
    b574:	4b9f      	ldr	r3, [pc, #636]	; (b7f4 <__ssvfiscanf_r+0x29c>)
    b576:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
    b57a:	4606      	mov	r6, r0
    b57c:	460c      	mov	r4, r1
    b57e:	93a3      	str	r3, [sp, #652]	; 0x28c
    b580:	4692      	mov	sl, r2
    b582:	270a      	movs	r7, #10
    b584:	f89a 3000 	ldrb.w	r3, [sl]
    b588:	2b00      	cmp	r3, #0
    b58a:	f000 812f 	beq.w	b7ec <__ssvfiscanf_r+0x294>
    b58e:	f000 fc2f 	bl	bdf0 <__locale_ctype_ptr>
    b592:	f89a b000 	ldrb.w	fp, [sl]
    b596:	4458      	add	r0, fp
    b598:	7843      	ldrb	r3, [r0, #1]
    b59a:	f013 0308 	ands.w	r3, r3, #8
    b59e:	d143      	bne.n	b628 <__ssvfiscanf_r+0xd0>
    b5a0:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
    b5a4:	f10a 0501 	add.w	r5, sl, #1
    b5a8:	f040 8099 	bne.w	b6de <__ssvfiscanf_r+0x186>
    b5ac:	9345      	str	r3, [sp, #276]	; 0x114
    b5ae:	9343      	str	r3, [sp, #268]	; 0x10c
    b5b0:	f89a 3001 	ldrb.w	r3, [sl, #1]
    b5b4:	2b2a      	cmp	r3, #42	; 0x2a
    b5b6:	d103      	bne.n	b5c0 <__ssvfiscanf_r+0x68>
    b5b8:	2310      	movs	r3, #16
    b5ba:	9343      	str	r3, [sp, #268]	; 0x10c
    b5bc:	f10a 0502 	add.w	r5, sl, #2
    b5c0:	7829      	ldrb	r1, [r5, #0]
    b5c2:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
    b5c6:	2a09      	cmp	r2, #9
    b5c8:	46aa      	mov	sl, r5
    b5ca:	f105 0501 	add.w	r5, r5, #1
    b5ce:	d941      	bls.n	b654 <__ssvfiscanf_r+0xfc>
    b5d0:	2203      	movs	r2, #3
    b5d2:	4889      	ldr	r0, [pc, #548]	; (b7f8 <__ssvfiscanf_r+0x2a0>)
    b5d4:	f000 fc2c 	bl	be30 <memchr>
    b5d8:	b138      	cbz	r0, b5ea <__ssvfiscanf_r+0x92>
    b5da:	eba0 0309 	sub.w	r3, r0, r9
    b5de:	2001      	movs	r0, #1
    b5e0:	4098      	lsls	r0, r3
    b5e2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    b5e4:	4318      	orrs	r0, r3
    b5e6:	9043      	str	r0, [sp, #268]	; 0x10c
    b5e8:	46aa      	mov	sl, r5
    b5ea:	f89a 3000 	ldrb.w	r3, [sl]
    b5ee:	2b67      	cmp	r3, #103	; 0x67
    b5f0:	f10a 0501 	add.w	r5, sl, #1
    b5f4:	d84a      	bhi.n	b68c <__ssvfiscanf_r+0x134>
    b5f6:	2b65      	cmp	r3, #101	; 0x65
    b5f8:	f080 80b7 	bcs.w	b76a <__ssvfiscanf_r+0x212>
    b5fc:	2b47      	cmp	r3, #71	; 0x47
    b5fe:	d82f      	bhi.n	b660 <__ssvfiscanf_r+0x108>
    b600:	2b45      	cmp	r3, #69	; 0x45
    b602:	f080 80b2 	bcs.w	b76a <__ssvfiscanf_r+0x212>
    b606:	2b00      	cmp	r3, #0
    b608:	f000 8082 	beq.w	b710 <__ssvfiscanf_r+0x1b8>
    b60c:	2b25      	cmp	r3, #37	; 0x25
    b60e:	d066      	beq.n	b6de <__ssvfiscanf_r+0x186>
    b610:	2303      	movs	r3, #3
    b612:	9349      	str	r3, [sp, #292]	; 0x124
    b614:	9744      	str	r7, [sp, #272]	; 0x110
    b616:	e045      	b.n	b6a4 <__ssvfiscanf_r+0x14c>
    b618:	9947      	ldr	r1, [sp, #284]	; 0x11c
    b61a:	3101      	adds	r1, #1
    b61c:	9147      	str	r1, [sp, #284]	; 0x11c
    b61e:	6861      	ldr	r1, [r4, #4]
    b620:	3301      	adds	r3, #1
    b622:	3901      	subs	r1, #1
    b624:	6061      	str	r1, [r4, #4]
    b626:	6023      	str	r3, [r4, #0]
    b628:	6863      	ldr	r3, [r4, #4]
    b62a:	2b00      	cmp	r3, #0
    b62c:	dd0b      	ble.n	b646 <__ssvfiscanf_r+0xee>
    b62e:	f000 fbdf 	bl	bdf0 <__locale_ctype_ptr>
    b632:	6823      	ldr	r3, [r4, #0]
    b634:	7819      	ldrb	r1, [r3, #0]
    b636:	4408      	add	r0, r1
    b638:	7841      	ldrb	r1, [r0, #1]
    b63a:	070d      	lsls	r5, r1, #28
    b63c:	d4ec      	bmi.n	b618 <__ssvfiscanf_r+0xc0>
    b63e:	f10a 0501 	add.w	r5, sl, #1
    b642:	46aa      	mov	sl, r5
    b644:	e79e      	b.n	b584 <__ssvfiscanf_r+0x2c>
    b646:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    b648:	4621      	mov	r1, r4
    b64a:	4630      	mov	r0, r6
    b64c:	4798      	blx	r3
    b64e:	2800      	cmp	r0, #0
    b650:	d0ed      	beq.n	b62e <__ssvfiscanf_r+0xd6>
    b652:	e7f4      	b.n	b63e <__ssvfiscanf_r+0xe6>
    b654:	9b45      	ldr	r3, [sp, #276]	; 0x114
    b656:	fb07 1303 	mla	r3, r7, r3, r1
    b65a:	3b30      	subs	r3, #48	; 0x30
    b65c:	9345      	str	r3, [sp, #276]	; 0x114
    b65e:	e7af      	b.n	b5c0 <__ssvfiscanf_r+0x68>
    b660:	2b5b      	cmp	r3, #91	; 0x5b
    b662:	d061      	beq.n	b728 <__ssvfiscanf_r+0x1d0>
    b664:	d80c      	bhi.n	b680 <__ssvfiscanf_r+0x128>
    b666:	2b58      	cmp	r3, #88	; 0x58
    b668:	d1d2      	bne.n	b610 <__ssvfiscanf_r+0xb8>
    b66a:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    b66c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    b670:	9243      	str	r2, [sp, #268]	; 0x10c
    b672:	2210      	movs	r2, #16
    b674:	9244      	str	r2, [sp, #272]	; 0x110
    b676:	2b6f      	cmp	r3, #111	; 0x6f
    b678:	bfb4      	ite	lt
    b67a:	2303      	movlt	r3, #3
    b67c:	2304      	movge	r3, #4
    b67e:	e010      	b.n	b6a2 <__ssvfiscanf_r+0x14a>
    b680:	2b63      	cmp	r3, #99	; 0x63
    b682:	d05c      	beq.n	b73e <__ssvfiscanf_r+0x1e6>
    b684:	2b64      	cmp	r3, #100	; 0x64
    b686:	d1c3      	bne.n	b610 <__ssvfiscanf_r+0xb8>
    b688:	9744      	str	r7, [sp, #272]	; 0x110
    b68a:	e7f4      	b.n	b676 <__ssvfiscanf_r+0x11e>
    b68c:	2b70      	cmp	r3, #112	; 0x70
    b68e:	d042      	beq.n	b716 <__ssvfiscanf_r+0x1be>
    b690:	d81d      	bhi.n	b6ce <__ssvfiscanf_r+0x176>
    b692:	2b6e      	cmp	r3, #110	; 0x6e
    b694:	d059      	beq.n	b74a <__ssvfiscanf_r+0x1f2>
    b696:	d843      	bhi.n	b720 <__ssvfiscanf_r+0x1c8>
    b698:	2b69      	cmp	r3, #105	; 0x69
    b69a:	d1b9      	bne.n	b610 <__ssvfiscanf_r+0xb8>
    b69c:	2300      	movs	r3, #0
    b69e:	9344      	str	r3, [sp, #272]	; 0x110
    b6a0:	2303      	movs	r3, #3
    b6a2:	9349      	str	r3, [sp, #292]	; 0x124
    b6a4:	6863      	ldr	r3, [r4, #4]
    b6a6:	2b00      	cmp	r3, #0
    b6a8:	dd61      	ble.n	b76e <__ssvfiscanf_r+0x216>
    b6aa:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    b6ac:	0659      	lsls	r1, r3, #25
    b6ae:	d56f      	bpl.n	b790 <__ssvfiscanf_r+0x238>
    b6b0:	9b49      	ldr	r3, [sp, #292]	; 0x124
    b6b2:	2b02      	cmp	r3, #2
    b6b4:	dc7c      	bgt.n	b7b0 <__ssvfiscanf_r+0x258>
    b6b6:	ab01      	add	r3, sp, #4
    b6b8:	4622      	mov	r2, r4
    b6ba:	a943      	add	r1, sp, #268	; 0x10c
    b6bc:	4630      	mov	r0, r6
    b6be:	f000 f89f 	bl	b800 <_scanf_chars>
    b6c2:	2801      	cmp	r0, #1
    b6c4:	f000 8092 	beq.w	b7ec <__ssvfiscanf_r+0x294>
    b6c8:	2802      	cmp	r0, #2
    b6ca:	d1ba      	bne.n	b642 <__ssvfiscanf_r+0xea>
    b6cc:	e01d      	b.n	b70a <__ssvfiscanf_r+0x1b2>
    b6ce:	2b75      	cmp	r3, #117	; 0x75
    b6d0:	d0da      	beq.n	b688 <__ssvfiscanf_r+0x130>
    b6d2:	2b78      	cmp	r3, #120	; 0x78
    b6d4:	d0c9      	beq.n	b66a <__ssvfiscanf_r+0x112>
    b6d6:	2b73      	cmp	r3, #115	; 0x73
    b6d8:	d19a      	bne.n	b610 <__ssvfiscanf_r+0xb8>
    b6da:	2302      	movs	r3, #2
    b6dc:	e7e1      	b.n	b6a2 <__ssvfiscanf_r+0x14a>
    b6de:	6863      	ldr	r3, [r4, #4]
    b6e0:	2b00      	cmp	r3, #0
    b6e2:	dd0c      	ble.n	b6fe <__ssvfiscanf_r+0x1a6>
    b6e4:	6823      	ldr	r3, [r4, #0]
    b6e6:	781a      	ldrb	r2, [r3, #0]
    b6e8:	4593      	cmp	fp, r2
    b6ea:	d17f      	bne.n	b7ec <__ssvfiscanf_r+0x294>
    b6ec:	3301      	adds	r3, #1
    b6ee:	6862      	ldr	r2, [r4, #4]
    b6f0:	6023      	str	r3, [r4, #0]
    b6f2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    b6f4:	3a01      	subs	r2, #1
    b6f6:	3301      	adds	r3, #1
    b6f8:	6062      	str	r2, [r4, #4]
    b6fa:	9347      	str	r3, [sp, #284]	; 0x11c
    b6fc:	e7a1      	b.n	b642 <__ssvfiscanf_r+0xea>
    b6fe:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    b700:	4621      	mov	r1, r4
    b702:	4630      	mov	r0, r6
    b704:	4798      	blx	r3
    b706:	2800      	cmp	r0, #0
    b708:	d0ec      	beq.n	b6e4 <__ssvfiscanf_r+0x18c>
    b70a:	9846      	ldr	r0, [sp, #280]	; 0x118
    b70c:	2800      	cmp	r0, #0
    b70e:	d163      	bne.n	b7d8 <__ssvfiscanf_r+0x280>
    b710:	f04f 30ff 	mov.w	r0, #4294967295
    b714:	e066      	b.n	b7e4 <__ssvfiscanf_r+0x28c>
    b716:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    b718:	f042 0220 	orr.w	r2, r2, #32
    b71c:	9243      	str	r2, [sp, #268]	; 0x10c
    b71e:	e7a4      	b.n	b66a <__ssvfiscanf_r+0x112>
    b720:	2308      	movs	r3, #8
    b722:	9344      	str	r3, [sp, #272]	; 0x110
    b724:	2304      	movs	r3, #4
    b726:	e7bc      	b.n	b6a2 <__ssvfiscanf_r+0x14a>
    b728:	4629      	mov	r1, r5
    b72a:	4640      	mov	r0, r8
    b72c:	f000 f9d0 	bl	bad0 <__sccl>
    b730:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    b732:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b736:	9343      	str	r3, [sp, #268]	; 0x10c
    b738:	4605      	mov	r5, r0
    b73a:	2301      	movs	r3, #1
    b73c:	e7b1      	b.n	b6a2 <__ssvfiscanf_r+0x14a>
    b73e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    b740:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b744:	9343      	str	r3, [sp, #268]	; 0x10c
    b746:	2300      	movs	r3, #0
    b748:	e7ab      	b.n	b6a2 <__ssvfiscanf_r+0x14a>
    b74a:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    b74c:	06d0      	lsls	r0, r2, #27
    b74e:	f53f af78 	bmi.w	b642 <__ssvfiscanf_r+0xea>
    b752:	f012 0f01 	tst.w	r2, #1
    b756:	9a01      	ldr	r2, [sp, #4]
    b758:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    b75a:	f102 0104 	add.w	r1, r2, #4
    b75e:	9101      	str	r1, [sp, #4]
    b760:	6812      	ldr	r2, [r2, #0]
    b762:	bf14      	ite	ne
    b764:	8013      	strhne	r3, [r2, #0]
    b766:	6013      	streq	r3, [r2, #0]
    b768:	e76b      	b.n	b642 <__ssvfiscanf_r+0xea>
    b76a:	2305      	movs	r3, #5
    b76c:	e799      	b.n	b6a2 <__ssvfiscanf_r+0x14a>
    b76e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    b770:	4621      	mov	r1, r4
    b772:	4630      	mov	r0, r6
    b774:	4798      	blx	r3
    b776:	2800      	cmp	r0, #0
    b778:	d097      	beq.n	b6aa <__ssvfiscanf_r+0x152>
    b77a:	e7c6      	b.n	b70a <__ssvfiscanf_r+0x1b2>
    b77c:	9a47      	ldr	r2, [sp, #284]	; 0x11c
    b77e:	3201      	adds	r2, #1
    b780:	9247      	str	r2, [sp, #284]	; 0x11c
    b782:	6862      	ldr	r2, [r4, #4]
    b784:	3a01      	subs	r2, #1
    b786:	2a00      	cmp	r2, #0
    b788:	6062      	str	r2, [r4, #4]
    b78a:	dd0a      	ble.n	b7a2 <__ssvfiscanf_r+0x24a>
    b78c:	3301      	adds	r3, #1
    b78e:	6023      	str	r3, [r4, #0]
    b790:	f000 fb2e 	bl	bdf0 <__locale_ctype_ptr>
    b794:	6823      	ldr	r3, [r4, #0]
    b796:	781a      	ldrb	r2, [r3, #0]
    b798:	4410      	add	r0, r2
    b79a:	7842      	ldrb	r2, [r0, #1]
    b79c:	0712      	lsls	r2, r2, #28
    b79e:	d4ed      	bmi.n	b77c <__ssvfiscanf_r+0x224>
    b7a0:	e786      	b.n	b6b0 <__ssvfiscanf_r+0x158>
    b7a2:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    b7a4:	4621      	mov	r1, r4
    b7a6:	4630      	mov	r0, r6
    b7a8:	4798      	blx	r3
    b7aa:	2800      	cmp	r0, #0
    b7ac:	d0f0      	beq.n	b790 <__ssvfiscanf_r+0x238>
    b7ae:	e7ac      	b.n	b70a <__ssvfiscanf_r+0x1b2>
    b7b0:	2b04      	cmp	r3, #4
    b7b2:	dc06      	bgt.n	b7c2 <__ssvfiscanf_r+0x26a>
    b7b4:	ab01      	add	r3, sp, #4
    b7b6:	4622      	mov	r2, r4
    b7b8:	a943      	add	r1, sp, #268	; 0x10c
    b7ba:	4630      	mov	r0, r6
    b7bc:	f000 f884 	bl	b8c8 <_scanf_i>
    b7c0:	e77f      	b.n	b6c2 <__ssvfiscanf_r+0x16a>
    b7c2:	4b0e      	ldr	r3, [pc, #56]	; (b7fc <__ssvfiscanf_r+0x2a4>)
    b7c4:	2b00      	cmp	r3, #0
    b7c6:	f43f af3c 	beq.w	b642 <__ssvfiscanf_r+0xea>
    b7ca:	ab01      	add	r3, sp, #4
    b7cc:	4622      	mov	r2, r4
    b7ce:	a943      	add	r1, sp, #268	; 0x10c
    b7d0:	4630      	mov	r0, r6
    b7d2:	f3af 8000 	nop.w
    b7d6:	e774      	b.n	b6c2 <__ssvfiscanf_r+0x16a>
    b7d8:	89a3      	ldrh	r3, [r4, #12]
    b7da:	f013 0f40 	tst.w	r3, #64	; 0x40
    b7de:	bf18      	it	ne
    b7e0:	f04f 30ff 	movne.w	r0, #4294967295
    b7e4:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
    b7e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b7ec:	9846      	ldr	r0, [sp, #280]	; 0x118
    b7ee:	e7f9      	b.n	b7e4 <__ssvfiscanf_r+0x28c>
    b7f0:	0000b4a5 	.word	0x0000b4a5
    b7f4:	0000b51f 	.word	0x0000b51f
    b7f8:	0000f3d4 	.word	0x0000f3d4
    b7fc:	00000000 	.word	0x00000000

0000b800 <_scanf_chars>:
    b800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b804:	4615      	mov	r5, r2
    b806:	688a      	ldr	r2, [r1, #8]
    b808:	4680      	mov	r8, r0
    b80a:	460c      	mov	r4, r1
    b80c:	b932      	cbnz	r2, b81c <_scanf_chars+0x1c>
    b80e:	698a      	ldr	r2, [r1, #24]
    b810:	2a00      	cmp	r2, #0
    b812:	bf0c      	ite	eq
    b814:	2201      	moveq	r2, #1
    b816:	f04f 32ff 	movne.w	r2, #4294967295
    b81a:	608a      	str	r2, [r1, #8]
    b81c:	6822      	ldr	r2, [r4, #0]
    b81e:	06d1      	lsls	r1, r2, #27
    b820:	bf5f      	itttt	pl
    b822:	681a      	ldrpl	r2, [r3, #0]
    b824:	1d11      	addpl	r1, r2, #4
    b826:	6019      	strpl	r1, [r3, #0]
    b828:	6817      	ldrpl	r7, [r2, #0]
    b82a:	2600      	movs	r6, #0
    b82c:	69a3      	ldr	r3, [r4, #24]
    b82e:	b1db      	cbz	r3, b868 <_scanf_chars+0x68>
    b830:	2b01      	cmp	r3, #1
    b832:	d107      	bne.n	b844 <_scanf_chars+0x44>
    b834:	682b      	ldr	r3, [r5, #0]
    b836:	6962      	ldr	r2, [r4, #20]
    b838:	781b      	ldrb	r3, [r3, #0]
    b83a:	5cd3      	ldrb	r3, [r2, r3]
    b83c:	b9a3      	cbnz	r3, b868 <_scanf_chars+0x68>
    b83e:	2e00      	cmp	r6, #0
    b840:	d132      	bne.n	b8a8 <_scanf_chars+0xa8>
    b842:	e006      	b.n	b852 <_scanf_chars+0x52>
    b844:	2b02      	cmp	r3, #2
    b846:	d007      	beq.n	b858 <_scanf_chars+0x58>
    b848:	2e00      	cmp	r6, #0
    b84a:	d12d      	bne.n	b8a8 <_scanf_chars+0xa8>
    b84c:	69a3      	ldr	r3, [r4, #24]
    b84e:	2b01      	cmp	r3, #1
    b850:	d12a      	bne.n	b8a8 <_scanf_chars+0xa8>
    b852:	2001      	movs	r0, #1
    b854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b858:	f000 faca 	bl	bdf0 <__locale_ctype_ptr>
    b85c:	682b      	ldr	r3, [r5, #0]
    b85e:	781b      	ldrb	r3, [r3, #0]
    b860:	4418      	add	r0, r3
    b862:	7843      	ldrb	r3, [r0, #1]
    b864:	071b      	lsls	r3, r3, #28
    b866:	d4ef      	bmi.n	b848 <_scanf_chars+0x48>
    b868:	6823      	ldr	r3, [r4, #0]
    b86a:	06da      	lsls	r2, r3, #27
    b86c:	bf5e      	ittt	pl
    b86e:	682b      	ldrpl	r3, [r5, #0]
    b870:	781b      	ldrbpl	r3, [r3, #0]
    b872:	703b      	strbpl	r3, [r7, #0]
    b874:	682a      	ldr	r2, [r5, #0]
    b876:	686b      	ldr	r3, [r5, #4]
    b878:	f102 0201 	add.w	r2, r2, #1
    b87c:	602a      	str	r2, [r5, #0]
    b87e:	68a2      	ldr	r2, [r4, #8]
    b880:	f103 33ff 	add.w	r3, r3, #4294967295
    b884:	f102 32ff 	add.w	r2, r2, #4294967295
    b888:	606b      	str	r3, [r5, #4]
    b88a:	f106 0601 	add.w	r6, r6, #1
    b88e:	bf58      	it	pl
    b890:	3701      	addpl	r7, #1
    b892:	60a2      	str	r2, [r4, #8]
    b894:	b142      	cbz	r2, b8a8 <_scanf_chars+0xa8>
    b896:	2b00      	cmp	r3, #0
    b898:	dcc8      	bgt.n	b82c <_scanf_chars+0x2c>
    b89a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    b89e:	4629      	mov	r1, r5
    b8a0:	4640      	mov	r0, r8
    b8a2:	4798      	blx	r3
    b8a4:	2800      	cmp	r0, #0
    b8a6:	d0c1      	beq.n	b82c <_scanf_chars+0x2c>
    b8a8:	6823      	ldr	r3, [r4, #0]
    b8aa:	f013 0310 	ands.w	r3, r3, #16
    b8ae:	d105      	bne.n	b8bc <_scanf_chars+0xbc>
    b8b0:	68e2      	ldr	r2, [r4, #12]
    b8b2:	3201      	adds	r2, #1
    b8b4:	60e2      	str	r2, [r4, #12]
    b8b6:	69a2      	ldr	r2, [r4, #24]
    b8b8:	b102      	cbz	r2, b8bc <_scanf_chars+0xbc>
    b8ba:	703b      	strb	r3, [r7, #0]
    b8bc:	6923      	ldr	r3, [r4, #16]
    b8be:	441e      	add	r6, r3
    b8c0:	6126      	str	r6, [r4, #16]
    b8c2:	2000      	movs	r0, #0
    b8c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000b8c8 <_scanf_i>:
    b8c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b8cc:	469a      	mov	sl, r3
    b8ce:	4b74      	ldr	r3, [pc, #464]	; (baa0 <_scanf_i+0x1d8>)
    b8d0:	460c      	mov	r4, r1
    b8d2:	4683      	mov	fp, r0
    b8d4:	4616      	mov	r6, r2
    b8d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    b8da:	b087      	sub	sp, #28
    b8dc:	ab03      	add	r3, sp, #12
    b8de:	68a7      	ldr	r7, [r4, #8]
    b8e0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    b8e4:	4b6f      	ldr	r3, [pc, #444]	; (baa4 <_scanf_i+0x1dc>)
    b8e6:	69a1      	ldr	r1, [r4, #24]
    b8e8:	4a6f      	ldr	r2, [pc, #444]	; (baa8 <_scanf_i+0x1e0>)
    b8ea:	2903      	cmp	r1, #3
    b8ec:	bf18      	it	ne
    b8ee:	461a      	movne	r2, r3
    b8f0:	1e7b      	subs	r3, r7, #1
    b8f2:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
    b8f6:	bf84      	itt	hi
    b8f8:	f240 135d 	movwhi	r3, #349	; 0x15d
    b8fc:	60a3      	strhi	r3, [r4, #8]
    b8fe:	6823      	ldr	r3, [r4, #0]
    b900:	9200      	str	r2, [sp, #0]
    b902:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
    b906:	bf88      	it	hi
    b908:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
    b90c:	f104 091c 	add.w	r9, r4, #28
    b910:	6023      	str	r3, [r4, #0]
    b912:	bf8c      	ite	hi
    b914:	197f      	addhi	r7, r7, r5
    b916:	2700      	movls	r7, #0
    b918:	464b      	mov	r3, r9
    b91a:	f04f 0800 	mov.w	r8, #0
    b91e:	9301      	str	r3, [sp, #4]
    b920:	6831      	ldr	r1, [r6, #0]
    b922:	ab03      	add	r3, sp, #12
    b924:	2202      	movs	r2, #2
    b926:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
    b92a:	7809      	ldrb	r1, [r1, #0]
    b92c:	f000 fa80 	bl	be30 <memchr>
    b930:	9b01      	ldr	r3, [sp, #4]
    b932:	b328      	cbz	r0, b980 <_scanf_i+0xb8>
    b934:	f1b8 0f01 	cmp.w	r8, #1
    b938:	d156      	bne.n	b9e8 <_scanf_i+0x120>
    b93a:	6862      	ldr	r2, [r4, #4]
    b93c:	b92a      	cbnz	r2, b94a <_scanf_i+0x82>
    b93e:	2208      	movs	r2, #8
    b940:	6062      	str	r2, [r4, #4]
    b942:	6822      	ldr	r2, [r4, #0]
    b944:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    b948:	6022      	str	r2, [r4, #0]
    b94a:	6822      	ldr	r2, [r4, #0]
    b94c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
    b950:	6022      	str	r2, [r4, #0]
    b952:	68a2      	ldr	r2, [r4, #8]
    b954:	1e51      	subs	r1, r2, #1
    b956:	60a1      	str	r1, [r4, #8]
    b958:	b192      	cbz	r2, b980 <_scanf_i+0xb8>
    b95a:	6832      	ldr	r2, [r6, #0]
    b95c:	1c51      	adds	r1, r2, #1
    b95e:	6031      	str	r1, [r6, #0]
    b960:	7812      	ldrb	r2, [r2, #0]
    b962:	701a      	strb	r2, [r3, #0]
    b964:	1c5d      	adds	r5, r3, #1
    b966:	6873      	ldr	r3, [r6, #4]
    b968:	3b01      	subs	r3, #1
    b96a:	2b00      	cmp	r3, #0
    b96c:	6073      	str	r3, [r6, #4]
    b96e:	dc06      	bgt.n	b97e <_scanf_i+0xb6>
    b970:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    b974:	4631      	mov	r1, r6
    b976:	4658      	mov	r0, fp
    b978:	4798      	blx	r3
    b97a:	2800      	cmp	r0, #0
    b97c:	d176      	bne.n	ba6c <_scanf_i+0x1a4>
    b97e:	462b      	mov	r3, r5
    b980:	f108 0801 	add.w	r8, r8, #1
    b984:	f1b8 0f03 	cmp.w	r8, #3
    b988:	d1c9      	bne.n	b91e <_scanf_i+0x56>
    b98a:	6862      	ldr	r2, [r4, #4]
    b98c:	b90a      	cbnz	r2, b992 <_scanf_i+0xca>
    b98e:	220a      	movs	r2, #10
    b990:	6062      	str	r2, [r4, #4]
    b992:	6862      	ldr	r2, [r4, #4]
    b994:	4945      	ldr	r1, [pc, #276]	; (baac <_scanf_i+0x1e4>)
    b996:	6960      	ldr	r0, [r4, #20]
    b998:	9301      	str	r3, [sp, #4]
    b99a:	1a89      	subs	r1, r1, r2
    b99c:	f000 f898 	bl	bad0 <__sccl>
    b9a0:	9b01      	ldr	r3, [sp, #4]
    b9a2:	f04f 0800 	mov.w	r8, #0
    b9a6:	461d      	mov	r5, r3
    b9a8:	68a3      	ldr	r3, [r4, #8]
    b9aa:	2b00      	cmp	r3, #0
    b9ac:	d038      	beq.n	ba20 <_scanf_i+0x158>
    b9ae:	6831      	ldr	r1, [r6, #0]
    b9b0:	6960      	ldr	r0, [r4, #20]
    b9b2:	780a      	ldrb	r2, [r1, #0]
    b9b4:	5c80      	ldrb	r0, [r0, r2]
    b9b6:	2800      	cmp	r0, #0
    b9b8:	d032      	beq.n	ba20 <_scanf_i+0x158>
    b9ba:	2a30      	cmp	r2, #48	; 0x30
    b9bc:	6822      	ldr	r2, [r4, #0]
    b9be:	d121      	bne.n	ba04 <_scanf_i+0x13c>
    b9c0:	0510      	lsls	r0, r2, #20
    b9c2:	d51f      	bpl.n	ba04 <_scanf_i+0x13c>
    b9c4:	f108 0801 	add.w	r8, r8, #1
    b9c8:	b117      	cbz	r7, b9d0 <_scanf_i+0x108>
    b9ca:	3301      	adds	r3, #1
    b9cc:	3f01      	subs	r7, #1
    b9ce:	60a3      	str	r3, [r4, #8]
    b9d0:	6873      	ldr	r3, [r6, #4]
    b9d2:	3b01      	subs	r3, #1
    b9d4:	2b00      	cmp	r3, #0
    b9d6:	6073      	str	r3, [r6, #4]
    b9d8:	dd1b      	ble.n	ba12 <_scanf_i+0x14a>
    b9da:	6833      	ldr	r3, [r6, #0]
    b9dc:	3301      	adds	r3, #1
    b9de:	6033      	str	r3, [r6, #0]
    b9e0:	68a3      	ldr	r3, [r4, #8]
    b9e2:	3b01      	subs	r3, #1
    b9e4:	60a3      	str	r3, [r4, #8]
    b9e6:	e7df      	b.n	b9a8 <_scanf_i+0xe0>
    b9e8:	f1b8 0f02 	cmp.w	r8, #2
    b9ec:	d1b1      	bne.n	b952 <_scanf_i+0x8a>
    b9ee:	6822      	ldr	r2, [r4, #0]
    b9f0:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
    b9f4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    b9f8:	d1c2      	bne.n	b980 <_scanf_i+0xb8>
    b9fa:	2110      	movs	r1, #16
    b9fc:	6061      	str	r1, [r4, #4]
    b9fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    ba02:	e7a5      	b.n	b950 <_scanf_i+0x88>
    ba04:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
    ba08:	6022      	str	r2, [r4, #0]
    ba0a:	780b      	ldrb	r3, [r1, #0]
    ba0c:	702b      	strb	r3, [r5, #0]
    ba0e:	3501      	adds	r5, #1
    ba10:	e7de      	b.n	b9d0 <_scanf_i+0x108>
    ba12:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    ba16:	4631      	mov	r1, r6
    ba18:	4658      	mov	r0, fp
    ba1a:	4798      	blx	r3
    ba1c:	2800      	cmp	r0, #0
    ba1e:	d0df      	beq.n	b9e0 <_scanf_i+0x118>
    ba20:	6823      	ldr	r3, [r4, #0]
    ba22:	05d9      	lsls	r1, r3, #23
    ba24:	d50c      	bpl.n	ba40 <_scanf_i+0x178>
    ba26:	454d      	cmp	r5, r9
    ba28:	d908      	bls.n	ba3c <_scanf_i+0x174>
    ba2a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
    ba2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
    ba32:	4632      	mov	r2, r6
    ba34:	4658      	mov	r0, fp
    ba36:	4798      	blx	r3
    ba38:	1e6f      	subs	r7, r5, #1
    ba3a:	463d      	mov	r5, r7
    ba3c:	454d      	cmp	r5, r9
    ba3e:	d02c      	beq.n	ba9a <_scanf_i+0x1d2>
    ba40:	6822      	ldr	r2, [r4, #0]
    ba42:	f012 0210 	ands.w	r2, r2, #16
    ba46:	d11e      	bne.n	ba86 <_scanf_i+0x1be>
    ba48:	702a      	strb	r2, [r5, #0]
    ba4a:	6863      	ldr	r3, [r4, #4]
    ba4c:	9e00      	ldr	r6, [sp, #0]
    ba4e:	4649      	mov	r1, r9
    ba50:	4658      	mov	r0, fp
    ba52:	47b0      	blx	r6
    ba54:	6822      	ldr	r2, [r4, #0]
    ba56:	f8da 3000 	ldr.w	r3, [sl]
    ba5a:	f012 0f20 	tst.w	r2, #32
    ba5e:	d008      	beq.n	ba72 <_scanf_i+0x1aa>
    ba60:	1d1a      	adds	r2, r3, #4
    ba62:	f8ca 2000 	str.w	r2, [sl]
    ba66:	681b      	ldr	r3, [r3, #0]
    ba68:	6018      	str	r0, [r3, #0]
    ba6a:	e009      	b.n	ba80 <_scanf_i+0x1b8>
    ba6c:	f04f 0800 	mov.w	r8, #0
    ba70:	e7d6      	b.n	ba20 <_scanf_i+0x158>
    ba72:	07d2      	lsls	r2, r2, #31
    ba74:	d5f4      	bpl.n	ba60 <_scanf_i+0x198>
    ba76:	1d1a      	adds	r2, r3, #4
    ba78:	f8ca 2000 	str.w	r2, [sl]
    ba7c:	681b      	ldr	r3, [r3, #0]
    ba7e:	8018      	strh	r0, [r3, #0]
    ba80:	68e3      	ldr	r3, [r4, #12]
    ba82:	3301      	adds	r3, #1
    ba84:	60e3      	str	r3, [r4, #12]
    ba86:	eba5 0509 	sub.w	r5, r5, r9
    ba8a:	44a8      	add	r8, r5
    ba8c:	6925      	ldr	r5, [r4, #16]
    ba8e:	4445      	add	r5, r8
    ba90:	6125      	str	r5, [r4, #16]
    ba92:	2000      	movs	r0, #0
    ba94:	b007      	add	sp, #28
    ba96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ba9a:	2001      	movs	r0, #1
    ba9c:	e7fa      	b.n	ba94 <_scanf_i+0x1cc>
    ba9e:	bf00      	nop
    baa0:	0000f3d8 	.word	0x0000f3d8
    baa4:	0000bd51 	.word	0x0000bd51
    baa8:	0000bc31 	.word	0x0000bc31
    baac:	0000f3f4 	.word	0x0000f3f4

0000bab0 <_sbrk_r>:
    bab0:	b538      	push	{r3, r4, r5, lr}
    bab2:	4c06      	ldr	r4, [pc, #24]	; (bacc <_sbrk_r+0x1c>)
    bab4:	2300      	movs	r3, #0
    bab6:	4605      	mov	r5, r0
    bab8:	4608      	mov	r0, r1
    baba:	6023      	str	r3, [r4, #0]
    babc:	f7f6 fb4c 	bl	2158 <_sbrk>
    bac0:	1c43      	adds	r3, r0, #1
    bac2:	d102      	bne.n	baca <_sbrk_r+0x1a>
    bac4:	6823      	ldr	r3, [r4, #0]
    bac6:	b103      	cbz	r3, baca <_sbrk_r+0x1a>
    bac8:	602b      	str	r3, [r5, #0]
    baca:	bd38      	pop	{r3, r4, r5, pc}
    bacc:	200090b4 	.word	0x200090b4

0000bad0 <__sccl>:
    bad0:	b570      	push	{r4, r5, r6, lr}
    bad2:	780b      	ldrb	r3, [r1, #0]
    bad4:	2b5e      	cmp	r3, #94	; 0x5e
    bad6:	bf13      	iteet	ne
    bad8:	1c4a      	addne	r2, r1, #1
    bada:	1c8a      	addeq	r2, r1, #2
    badc:	784b      	ldrbeq	r3, [r1, #1]
    bade:	2100      	movne	r1, #0
    bae0:	bf08      	it	eq
    bae2:	2101      	moveq	r1, #1
    bae4:	1e44      	subs	r4, r0, #1
    bae6:	f100 05ff 	add.w	r5, r0, #255	; 0xff
    baea:	f804 1f01 	strb.w	r1, [r4, #1]!
    baee:	42a5      	cmp	r5, r4
    baf0:	d1fb      	bne.n	baea <__sccl+0x1a>
    baf2:	b913      	cbnz	r3, bafa <__sccl+0x2a>
    baf4:	3a01      	subs	r2, #1
    baf6:	4610      	mov	r0, r2
    baf8:	bd70      	pop	{r4, r5, r6, pc}
    bafa:	f081 0401 	eor.w	r4, r1, #1
    bafe:	54c4      	strb	r4, [r0, r3]
    bb00:	4611      	mov	r1, r2
    bb02:	780d      	ldrb	r5, [r1, #0]
    bb04:	2d2d      	cmp	r5, #45	; 0x2d
    bb06:	f101 0201 	add.w	r2, r1, #1
    bb0a:	d006      	beq.n	bb1a <__sccl+0x4a>
    bb0c:	2d5d      	cmp	r5, #93	; 0x5d
    bb0e:	d0f2      	beq.n	baf6 <__sccl+0x26>
    bb10:	b90d      	cbnz	r5, bb16 <__sccl+0x46>
    bb12:	460a      	mov	r2, r1
    bb14:	e7ef      	b.n	baf6 <__sccl+0x26>
    bb16:	462b      	mov	r3, r5
    bb18:	e7f1      	b.n	bafe <__sccl+0x2e>
    bb1a:	784e      	ldrb	r6, [r1, #1]
    bb1c:	2e5d      	cmp	r6, #93	; 0x5d
    bb1e:	d0fa      	beq.n	bb16 <__sccl+0x46>
    bb20:	42b3      	cmp	r3, r6
    bb22:	dcf8      	bgt.n	bb16 <__sccl+0x46>
    bb24:	3102      	adds	r1, #2
    bb26:	3301      	adds	r3, #1
    bb28:	429e      	cmp	r6, r3
    bb2a:	54c4      	strb	r4, [r0, r3]
    bb2c:	dcfb      	bgt.n	bb26 <__sccl+0x56>
    bb2e:	e7e8      	b.n	bb02 <__sccl+0x32>

0000bb30 <_strtol_l.isra.0>:
    bb30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bb34:	4680      	mov	r8, r0
    bb36:	4689      	mov	r9, r1
    bb38:	4692      	mov	sl, r2
    bb3a:	461f      	mov	r7, r3
    bb3c:	468b      	mov	fp, r1
    bb3e:	465d      	mov	r5, fp
    bb40:	980a      	ldr	r0, [sp, #40]	; 0x28
    bb42:	f815 4b01 	ldrb.w	r4, [r5], #1
    bb46:	f000 f950 	bl	bdea <__locale_ctype_ptr_l>
    bb4a:	4420      	add	r0, r4
    bb4c:	7846      	ldrb	r6, [r0, #1]
    bb4e:	f016 0608 	ands.w	r6, r6, #8
    bb52:	d10b      	bne.n	bb6c <_strtol_l.isra.0+0x3c>
    bb54:	2c2d      	cmp	r4, #45	; 0x2d
    bb56:	d10b      	bne.n	bb70 <_strtol_l.isra.0+0x40>
    bb58:	782c      	ldrb	r4, [r5, #0]
    bb5a:	2601      	movs	r6, #1
    bb5c:	f10b 0502 	add.w	r5, fp, #2
    bb60:	b167      	cbz	r7, bb7c <_strtol_l.isra.0+0x4c>
    bb62:	2f10      	cmp	r7, #16
    bb64:	d114      	bne.n	bb90 <_strtol_l.isra.0+0x60>
    bb66:	2c30      	cmp	r4, #48	; 0x30
    bb68:	d00a      	beq.n	bb80 <_strtol_l.isra.0+0x50>
    bb6a:	e011      	b.n	bb90 <_strtol_l.isra.0+0x60>
    bb6c:	46ab      	mov	fp, r5
    bb6e:	e7e6      	b.n	bb3e <_strtol_l.isra.0+0xe>
    bb70:	2c2b      	cmp	r4, #43	; 0x2b
    bb72:	bf04      	itt	eq
    bb74:	782c      	ldrbeq	r4, [r5, #0]
    bb76:	f10b 0502 	addeq.w	r5, fp, #2
    bb7a:	e7f1      	b.n	bb60 <_strtol_l.isra.0+0x30>
    bb7c:	2c30      	cmp	r4, #48	; 0x30
    bb7e:	d127      	bne.n	bbd0 <_strtol_l.isra.0+0xa0>
    bb80:	782b      	ldrb	r3, [r5, #0]
    bb82:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    bb86:	2b58      	cmp	r3, #88	; 0x58
    bb88:	d14b      	bne.n	bc22 <_strtol_l.isra.0+0xf2>
    bb8a:	786c      	ldrb	r4, [r5, #1]
    bb8c:	2710      	movs	r7, #16
    bb8e:	3502      	adds	r5, #2
    bb90:	2e00      	cmp	r6, #0
    bb92:	bf0c      	ite	eq
    bb94:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
    bb98:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
    bb9c:	2200      	movs	r2, #0
    bb9e:	fbb1 fef7 	udiv	lr, r1, r7
    bba2:	4610      	mov	r0, r2
    bba4:	fb07 1c1e 	mls	ip, r7, lr, r1
    bba8:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    bbac:	2b09      	cmp	r3, #9
    bbae:	d811      	bhi.n	bbd4 <_strtol_l.isra.0+0xa4>
    bbb0:	461c      	mov	r4, r3
    bbb2:	42a7      	cmp	r7, r4
    bbb4:	dd1d      	ble.n	bbf2 <_strtol_l.isra.0+0xc2>
    bbb6:	1c53      	adds	r3, r2, #1
    bbb8:	d007      	beq.n	bbca <_strtol_l.isra.0+0x9a>
    bbba:	4586      	cmp	lr, r0
    bbbc:	d316      	bcc.n	bbec <_strtol_l.isra.0+0xbc>
    bbbe:	d101      	bne.n	bbc4 <_strtol_l.isra.0+0x94>
    bbc0:	45a4      	cmp	ip, r4
    bbc2:	db13      	blt.n	bbec <_strtol_l.isra.0+0xbc>
    bbc4:	fb00 4007 	mla	r0, r0, r7, r4
    bbc8:	2201      	movs	r2, #1
    bbca:	f815 4b01 	ldrb.w	r4, [r5], #1
    bbce:	e7eb      	b.n	bba8 <_strtol_l.isra.0+0x78>
    bbd0:	270a      	movs	r7, #10
    bbd2:	e7dd      	b.n	bb90 <_strtol_l.isra.0+0x60>
    bbd4:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
    bbd8:	2b19      	cmp	r3, #25
    bbda:	d801      	bhi.n	bbe0 <_strtol_l.isra.0+0xb0>
    bbdc:	3c37      	subs	r4, #55	; 0x37
    bbde:	e7e8      	b.n	bbb2 <_strtol_l.isra.0+0x82>
    bbe0:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
    bbe4:	2b19      	cmp	r3, #25
    bbe6:	d804      	bhi.n	bbf2 <_strtol_l.isra.0+0xc2>
    bbe8:	3c57      	subs	r4, #87	; 0x57
    bbea:	e7e2      	b.n	bbb2 <_strtol_l.isra.0+0x82>
    bbec:	f04f 32ff 	mov.w	r2, #4294967295
    bbf0:	e7eb      	b.n	bbca <_strtol_l.isra.0+0x9a>
    bbf2:	1c53      	adds	r3, r2, #1
    bbf4:	d108      	bne.n	bc08 <_strtol_l.isra.0+0xd8>
    bbf6:	2322      	movs	r3, #34	; 0x22
    bbf8:	f8c8 3000 	str.w	r3, [r8]
    bbfc:	4608      	mov	r0, r1
    bbfe:	f1ba 0f00 	cmp.w	sl, #0
    bc02:	d107      	bne.n	bc14 <_strtol_l.isra.0+0xe4>
    bc04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bc08:	b106      	cbz	r6, bc0c <_strtol_l.isra.0+0xdc>
    bc0a:	4240      	negs	r0, r0
    bc0c:	f1ba 0f00 	cmp.w	sl, #0
    bc10:	d00c      	beq.n	bc2c <_strtol_l.isra.0+0xfc>
    bc12:	b122      	cbz	r2, bc1e <_strtol_l.isra.0+0xee>
    bc14:	3d01      	subs	r5, #1
    bc16:	f8ca 5000 	str.w	r5, [sl]
    bc1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bc1e:	464d      	mov	r5, r9
    bc20:	e7f9      	b.n	bc16 <_strtol_l.isra.0+0xe6>
    bc22:	2430      	movs	r4, #48	; 0x30
    bc24:	2f00      	cmp	r7, #0
    bc26:	d1b3      	bne.n	bb90 <_strtol_l.isra.0+0x60>
    bc28:	2708      	movs	r7, #8
    bc2a:	e7b1      	b.n	bb90 <_strtol_l.isra.0+0x60>
    bc2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000bc30 <_strtol_r>:
    bc30:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bc32:	4c06      	ldr	r4, [pc, #24]	; (bc4c <_strtol_r+0x1c>)
    bc34:	4d06      	ldr	r5, [pc, #24]	; (bc50 <_strtol_r+0x20>)
    bc36:	6824      	ldr	r4, [r4, #0]
    bc38:	6a24      	ldr	r4, [r4, #32]
    bc3a:	2c00      	cmp	r4, #0
    bc3c:	bf08      	it	eq
    bc3e:	462c      	moveq	r4, r5
    bc40:	9400      	str	r4, [sp, #0]
    bc42:	f7ff ff75 	bl	bb30 <_strtol_l.isra.0>
    bc46:	b003      	add	sp, #12
    bc48:	bd30      	pop	{r4, r5, pc}
    bc4a:	bf00      	nop
    bc4c:	200000e0 	.word	0x200000e0
    bc50:	20000144 	.word	0x20000144

0000bc54 <_strtoul_l.isra.0>:
    bc54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bc58:	4680      	mov	r8, r0
    bc5a:	4689      	mov	r9, r1
    bc5c:	4692      	mov	sl, r2
    bc5e:	461e      	mov	r6, r3
    bc60:	460f      	mov	r7, r1
    bc62:	463d      	mov	r5, r7
    bc64:	9808      	ldr	r0, [sp, #32]
    bc66:	f815 4b01 	ldrb.w	r4, [r5], #1
    bc6a:	f000 f8be 	bl	bdea <__locale_ctype_ptr_l>
    bc6e:	4420      	add	r0, r4
    bc70:	7843      	ldrb	r3, [r0, #1]
    bc72:	f013 0308 	ands.w	r3, r3, #8
    bc76:	d10a      	bne.n	bc8e <_strtoul_l.isra.0+0x3a>
    bc78:	2c2d      	cmp	r4, #45	; 0x2d
    bc7a:	d10a      	bne.n	bc92 <_strtoul_l.isra.0+0x3e>
    bc7c:	782c      	ldrb	r4, [r5, #0]
    bc7e:	2301      	movs	r3, #1
    bc80:	1cbd      	adds	r5, r7, #2
    bc82:	b15e      	cbz	r6, bc9c <_strtoul_l.isra.0+0x48>
    bc84:	2e10      	cmp	r6, #16
    bc86:	d113      	bne.n	bcb0 <_strtoul_l.isra.0+0x5c>
    bc88:	2c30      	cmp	r4, #48	; 0x30
    bc8a:	d009      	beq.n	bca0 <_strtoul_l.isra.0+0x4c>
    bc8c:	e010      	b.n	bcb0 <_strtoul_l.isra.0+0x5c>
    bc8e:	462f      	mov	r7, r5
    bc90:	e7e7      	b.n	bc62 <_strtoul_l.isra.0+0xe>
    bc92:	2c2b      	cmp	r4, #43	; 0x2b
    bc94:	bf04      	itt	eq
    bc96:	782c      	ldrbeq	r4, [r5, #0]
    bc98:	1cbd      	addeq	r5, r7, #2
    bc9a:	e7f2      	b.n	bc82 <_strtoul_l.isra.0+0x2e>
    bc9c:	2c30      	cmp	r4, #48	; 0x30
    bc9e:	d125      	bne.n	bcec <_strtoul_l.isra.0+0x98>
    bca0:	782a      	ldrb	r2, [r5, #0]
    bca2:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    bca6:	2a58      	cmp	r2, #88	; 0x58
    bca8:	d14a      	bne.n	bd40 <_strtoul_l.isra.0+0xec>
    bcaa:	786c      	ldrb	r4, [r5, #1]
    bcac:	2610      	movs	r6, #16
    bcae:	3502      	adds	r5, #2
    bcb0:	f04f 31ff 	mov.w	r1, #4294967295
    bcb4:	2700      	movs	r7, #0
    bcb6:	fbb1 f1f6 	udiv	r1, r1, r6
    bcba:	fb06 fe01 	mul.w	lr, r6, r1
    bcbe:	ea6f 0e0e 	mvn.w	lr, lr
    bcc2:	4638      	mov	r0, r7
    bcc4:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
    bcc8:	2a09      	cmp	r2, #9
    bcca:	d811      	bhi.n	bcf0 <_strtoul_l.isra.0+0x9c>
    bccc:	4614      	mov	r4, r2
    bcce:	42a6      	cmp	r6, r4
    bcd0:	dd1d      	ble.n	bd0e <_strtoul_l.isra.0+0xba>
    bcd2:	2f00      	cmp	r7, #0
    bcd4:	db18      	blt.n	bd08 <_strtoul_l.isra.0+0xb4>
    bcd6:	4281      	cmp	r1, r0
    bcd8:	d316      	bcc.n	bd08 <_strtoul_l.isra.0+0xb4>
    bcda:	d101      	bne.n	bce0 <_strtoul_l.isra.0+0x8c>
    bcdc:	45a6      	cmp	lr, r4
    bcde:	db13      	blt.n	bd08 <_strtoul_l.isra.0+0xb4>
    bce0:	fb00 4006 	mla	r0, r0, r6, r4
    bce4:	2701      	movs	r7, #1
    bce6:	f815 4b01 	ldrb.w	r4, [r5], #1
    bcea:	e7eb      	b.n	bcc4 <_strtoul_l.isra.0+0x70>
    bcec:	260a      	movs	r6, #10
    bcee:	e7df      	b.n	bcb0 <_strtoul_l.isra.0+0x5c>
    bcf0:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
    bcf4:	2a19      	cmp	r2, #25
    bcf6:	d801      	bhi.n	bcfc <_strtoul_l.isra.0+0xa8>
    bcf8:	3c37      	subs	r4, #55	; 0x37
    bcfa:	e7e8      	b.n	bcce <_strtoul_l.isra.0+0x7a>
    bcfc:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
    bd00:	2a19      	cmp	r2, #25
    bd02:	d804      	bhi.n	bd0e <_strtoul_l.isra.0+0xba>
    bd04:	3c57      	subs	r4, #87	; 0x57
    bd06:	e7e2      	b.n	bcce <_strtoul_l.isra.0+0x7a>
    bd08:	f04f 37ff 	mov.w	r7, #4294967295
    bd0c:	e7eb      	b.n	bce6 <_strtoul_l.isra.0+0x92>
    bd0e:	2f00      	cmp	r7, #0
    bd10:	da09      	bge.n	bd26 <_strtoul_l.isra.0+0xd2>
    bd12:	2322      	movs	r3, #34	; 0x22
    bd14:	f8c8 3000 	str.w	r3, [r8]
    bd18:	f04f 30ff 	mov.w	r0, #4294967295
    bd1c:	f1ba 0f00 	cmp.w	sl, #0
    bd20:	d107      	bne.n	bd32 <_strtoul_l.isra.0+0xde>
    bd22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bd26:	b103      	cbz	r3, bd2a <_strtoul_l.isra.0+0xd6>
    bd28:	4240      	negs	r0, r0
    bd2a:	f1ba 0f00 	cmp.w	sl, #0
    bd2e:	d00c      	beq.n	bd4a <_strtoul_l.isra.0+0xf6>
    bd30:	b127      	cbz	r7, bd3c <_strtoul_l.isra.0+0xe8>
    bd32:	3d01      	subs	r5, #1
    bd34:	f8ca 5000 	str.w	r5, [sl]
    bd38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bd3c:	464d      	mov	r5, r9
    bd3e:	e7f9      	b.n	bd34 <_strtoul_l.isra.0+0xe0>
    bd40:	2430      	movs	r4, #48	; 0x30
    bd42:	2e00      	cmp	r6, #0
    bd44:	d1b4      	bne.n	bcb0 <_strtoul_l.isra.0+0x5c>
    bd46:	2608      	movs	r6, #8
    bd48:	e7b2      	b.n	bcb0 <_strtoul_l.isra.0+0x5c>
    bd4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0000bd50 <_strtoul_r>:
    bd50:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bd52:	4c06      	ldr	r4, [pc, #24]	; (bd6c <_strtoul_r+0x1c>)
    bd54:	4d06      	ldr	r5, [pc, #24]	; (bd70 <_strtoul_r+0x20>)
    bd56:	6824      	ldr	r4, [r4, #0]
    bd58:	6a24      	ldr	r4, [r4, #32]
    bd5a:	2c00      	cmp	r4, #0
    bd5c:	bf08      	it	eq
    bd5e:	462c      	moveq	r4, r5
    bd60:	9400      	str	r4, [sp, #0]
    bd62:	f7ff ff77 	bl	bc54 <_strtoul_l.isra.0>
    bd66:	b003      	add	sp, #12
    bd68:	bd30      	pop	{r4, r5, pc}
    bd6a:	bf00      	nop
    bd6c:	200000e0 	.word	0x200000e0
    bd70:	20000144 	.word	0x20000144

0000bd74 <__submore>:
    bd74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bd78:	460c      	mov	r4, r1
    bd7a:	6b49      	ldr	r1, [r1, #52]	; 0x34
    bd7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
    bd80:	4299      	cmp	r1, r3
    bd82:	d11e      	bne.n	bdc2 <__submore+0x4e>
    bd84:	f44f 6180 	mov.w	r1, #1024	; 0x400
    bd88:	f7ff fb2e 	bl	b3e8 <_malloc_r>
    bd8c:	b918      	cbnz	r0, bd96 <__submore+0x22>
    bd8e:	f04f 30ff 	mov.w	r0, #4294967295
    bd92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bd96:	f44f 6380 	mov.w	r3, #1024	; 0x400
    bd9a:	63a3      	str	r3, [r4, #56]	; 0x38
    bd9c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
    bda0:	6360      	str	r0, [r4, #52]	; 0x34
    bda2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
    bda6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    bdaa:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
    bdae:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    bdb2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
    bdb6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
    bdba:	6020      	str	r0, [r4, #0]
    bdbc:	2000      	movs	r0, #0
    bdbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bdc2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    bdc4:	0077      	lsls	r7, r6, #1
    bdc6:	463a      	mov	r2, r7
    bdc8:	f000 f8d2 	bl	bf70 <_realloc_r>
    bdcc:	4605      	mov	r5, r0
    bdce:	2800      	cmp	r0, #0
    bdd0:	d0dd      	beq.n	bd8e <__submore+0x1a>
    bdd2:	eb00 0806 	add.w	r8, r0, r6
    bdd6:	4601      	mov	r1, r0
    bdd8:	4632      	mov	r2, r6
    bdda:	4640      	mov	r0, r8
    bddc:	f7ff fa8d 	bl	b2fa <memcpy>
    bde0:	f8c4 8000 	str.w	r8, [r4]
    bde4:	6365      	str	r5, [r4, #52]	; 0x34
    bde6:	63a7      	str	r7, [r4, #56]	; 0x38
    bde8:	e7e8      	b.n	bdbc <__submore+0x48>

0000bdea <__locale_ctype_ptr_l>:
    bdea:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
    bdee:	4770      	bx	lr

0000bdf0 <__locale_ctype_ptr>:
    bdf0:	4b04      	ldr	r3, [pc, #16]	; (be04 <__locale_ctype_ptr+0x14>)
    bdf2:	4a05      	ldr	r2, [pc, #20]	; (be08 <__locale_ctype_ptr+0x18>)
    bdf4:	681b      	ldr	r3, [r3, #0]
    bdf6:	6a1b      	ldr	r3, [r3, #32]
    bdf8:	2b00      	cmp	r3, #0
    bdfa:	bf08      	it	eq
    bdfc:	4613      	moveq	r3, r2
    bdfe:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
    be02:	4770      	bx	lr
    be04:	200000e0 	.word	0x200000e0
    be08:	20000144 	.word	0x20000144

0000be0c <__ascii_mbtowc>:
    be0c:	b082      	sub	sp, #8
    be0e:	b901      	cbnz	r1, be12 <__ascii_mbtowc+0x6>
    be10:	a901      	add	r1, sp, #4
    be12:	b142      	cbz	r2, be26 <__ascii_mbtowc+0x1a>
    be14:	b14b      	cbz	r3, be2a <__ascii_mbtowc+0x1e>
    be16:	7813      	ldrb	r3, [r2, #0]
    be18:	600b      	str	r3, [r1, #0]
    be1a:	7812      	ldrb	r2, [r2, #0]
    be1c:	1c10      	adds	r0, r2, #0
    be1e:	bf18      	it	ne
    be20:	2001      	movne	r0, #1
    be22:	b002      	add	sp, #8
    be24:	4770      	bx	lr
    be26:	4610      	mov	r0, r2
    be28:	e7fb      	b.n	be22 <__ascii_mbtowc+0x16>
    be2a:	f06f 0001 	mvn.w	r0, #1
    be2e:	e7f8      	b.n	be22 <__ascii_mbtowc+0x16>

0000be30 <memchr>:
    be30:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    be34:	2a10      	cmp	r2, #16
    be36:	db2b      	blt.n	be90 <memchr+0x60>
    be38:	f010 0f07 	tst.w	r0, #7
    be3c:	d008      	beq.n	be50 <memchr+0x20>
    be3e:	f810 3b01 	ldrb.w	r3, [r0], #1
    be42:	3a01      	subs	r2, #1
    be44:	428b      	cmp	r3, r1
    be46:	d02d      	beq.n	bea4 <memchr+0x74>
    be48:	f010 0f07 	tst.w	r0, #7
    be4c:	b342      	cbz	r2, bea0 <memchr+0x70>
    be4e:	d1f6      	bne.n	be3e <memchr+0xe>
    be50:	b4f0      	push	{r4, r5, r6, r7}
    be52:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    be56:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    be5a:	f022 0407 	bic.w	r4, r2, #7
    be5e:	f07f 0700 	mvns.w	r7, #0
    be62:	2300      	movs	r3, #0
    be64:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    be68:	3c08      	subs	r4, #8
    be6a:	ea85 0501 	eor.w	r5, r5, r1
    be6e:	ea86 0601 	eor.w	r6, r6, r1
    be72:	fa85 f547 	uadd8	r5, r5, r7
    be76:	faa3 f587 	sel	r5, r3, r7
    be7a:	fa86 f647 	uadd8	r6, r6, r7
    be7e:	faa5 f687 	sel	r6, r5, r7
    be82:	b98e      	cbnz	r6, bea8 <memchr+0x78>
    be84:	d1ee      	bne.n	be64 <memchr+0x34>
    be86:	bcf0      	pop	{r4, r5, r6, r7}
    be88:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    be8c:	f002 0207 	and.w	r2, r2, #7
    be90:	b132      	cbz	r2, bea0 <memchr+0x70>
    be92:	f810 3b01 	ldrb.w	r3, [r0], #1
    be96:	3a01      	subs	r2, #1
    be98:	ea83 0301 	eor.w	r3, r3, r1
    be9c:	b113      	cbz	r3, bea4 <memchr+0x74>
    be9e:	d1f8      	bne.n	be92 <memchr+0x62>
    bea0:	2000      	movs	r0, #0
    bea2:	4770      	bx	lr
    bea4:	3801      	subs	r0, #1
    bea6:	4770      	bx	lr
    bea8:	2d00      	cmp	r5, #0
    beaa:	bf06      	itte	eq
    beac:	4635      	moveq	r5, r6
    beae:	3803      	subeq	r0, #3
    beb0:	3807      	subne	r0, #7
    beb2:	f015 0f01 	tst.w	r5, #1
    beb6:	d107      	bne.n	bec8 <memchr+0x98>
    beb8:	3001      	adds	r0, #1
    beba:	f415 7f80 	tst.w	r5, #256	; 0x100
    bebe:	bf02      	ittt	eq
    bec0:	3001      	addeq	r0, #1
    bec2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    bec6:	3001      	addeq	r0, #1
    bec8:	bcf0      	pop	{r4, r5, r6, r7}
    beca:	3801      	subs	r0, #1
    becc:	4770      	bx	lr
    bece:	bf00      	nop

0000bed0 <__malloc_lock>:
    bed0:	4770      	bx	lr

0000bed2 <__malloc_unlock>:
    bed2:	4770      	bx	lr

0000bed4 <_free_r>:
    bed4:	b538      	push	{r3, r4, r5, lr}
    bed6:	4605      	mov	r5, r0
    bed8:	2900      	cmp	r1, #0
    beda:	d045      	beq.n	bf68 <_free_r+0x94>
    bedc:	f851 3c04 	ldr.w	r3, [r1, #-4]
    bee0:	1f0c      	subs	r4, r1, #4
    bee2:	2b00      	cmp	r3, #0
    bee4:	bfb8      	it	lt
    bee6:	18e4      	addlt	r4, r4, r3
    bee8:	f7ff fff2 	bl	bed0 <__malloc_lock>
    beec:	4a1f      	ldr	r2, [pc, #124]	; (bf6c <_free_r+0x98>)
    beee:	6813      	ldr	r3, [r2, #0]
    bef0:	4610      	mov	r0, r2
    bef2:	b933      	cbnz	r3, bf02 <_free_r+0x2e>
    bef4:	6063      	str	r3, [r4, #4]
    bef6:	6014      	str	r4, [r2, #0]
    bef8:	4628      	mov	r0, r5
    befa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    befe:	f7ff bfe8 	b.w	bed2 <__malloc_unlock>
    bf02:	42a3      	cmp	r3, r4
    bf04:	d90c      	bls.n	bf20 <_free_r+0x4c>
    bf06:	6821      	ldr	r1, [r4, #0]
    bf08:	1862      	adds	r2, r4, r1
    bf0a:	4293      	cmp	r3, r2
    bf0c:	bf04      	itt	eq
    bf0e:	681a      	ldreq	r2, [r3, #0]
    bf10:	685b      	ldreq	r3, [r3, #4]
    bf12:	6063      	str	r3, [r4, #4]
    bf14:	bf04      	itt	eq
    bf16:	1852      	addeq	r2, r2, r1
    bf18:	6022      	streq	r2, [r4, #0]
    bf1a:	6004      	str	r4, [r0, #0]
    bf1c:	e7ec      	b.n	bef8 <_free_r+0x24>
    bf1e:	4613      	mov	r3, r2
    bf20:	685a      	ldr	r2, [r3, #4]
    bf22:	b10a      	cbz	r2, bf28 <_free_r+0x54>
    bf24:	42a2      	cmp	r2, r4
    bf26:	d9fa      	bls.n	bf1e <_free_r+0x4a>
    bf28:	6819      	ldr	r1, [r3, #0]
    bf2a:	1858      	adds	r0, r3, r1
    bf2c:	42a0      	cmp	r0, r4
    bf2e:	d10b      	bne.n	bf48 <_free_r+0x74>
    bf30:	6820      	ldr	r0, [r4, #0]
    bf32:	4401      	add	r1, r0
    bf34:	1858      	adds	r0, r3, r1
    bf36:	4282      	cmp	r2, r0
    bf38:	6019      	str	r1, [r3, #0]
    bf3a:	d1dd      	bne.n	bef8 <_free_r+0x24>
    bf3c:	6810      	ldr	r0, [r2, #0]
    bf3e:	6852      	ldr	r2, [r2, #4]
    bf40:	605a      	str	r2, [r3, #4]
    bf42:	4401      	add	r1, r0
    bf44:	6019      	str	r1, [r3, #0]
    bf46:	e7d7      	b.n	bef8 <_free_r+0x24>
    bf48:	d902      	bls.n	bf50 <_free_r+0x7c>
    bf4a:	230c      	movs	r3, #12
    bf4c:	602b      	str	r3, [r5, #0]
    bf4e:	e7d3      	b.n	bef8 <_free_r+0x24>
    bf50:	6820      	ldr	r0, [r4, #0]
    bf52:	1821      	adds	r1, r4, r0
    bf54:	428a      	cmp	r2, r1
    bf56:	bf04      	itt	eq
    bf58:	6811      	ldreq	r1, [r2, #0]
    bf5a:	6852      	ldreq	r2, [r2, #4]
    bf5c:	6062      	str	r2, [r4, #4]
    bf5e:	bf04      	itt	eq
    bf60:	1809      	addeq	r1, r1, r0
    bf62:	6021      	streq	r1, [r4, #0]
    bf64:	605c      	str	r4, [r3, #4]
    bf66:	e7c7      	b.n	bef8 <_free_r+0x24>
    bf68:	bd38      	pop	{r3, r4, r5, pc}
    bf6a:	bf00      	nop
    bf6c:	20007400 	.word	0x20007400

0000bf70 <_realloc_r>:
    bf70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bf72:	4607      	mov	r7, r0
    bf74:	4614      	mov	r4, r2
    bf76:	460e      	mov	r6, r1
    bf78:	b921      	cbnz	r1, bf84 <_realloc_r+0x14>
    bf7a:	4611      	mov	r1, r2
    bf7c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    bf80:	f7ff ba32 	b.w	b3e8 <_malloc_r>
    bf84:	b922      	cbnz	r2, bf90 <_realloc_r+0x20>
    bf86:	f7ff ffa5 	bl	bed4 <_free_r>
    bf8a:	4625      	mov	r5, r4
    bf8c:	4628      	mov	r0, r5
    bf8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bf90:	f000 f821 	bl	bfd6 <_malloc_usable_size_r>
    bf94:	4284      	cmp	r4, r0
    bf96:	d90f      	bls.n	bfb8 <_realloc_r+0x48>
    bf98:	4621      	mov	r1, r4
    bf9a:	4638      	mov	r0, r7
    bf9c:	f7ff fa24 	bl	b3e8 <_malloc_r>
    bfa0:	4605      	mov	r5, r0
    bfa2:	2800      	cmp	r0, #0
    bfa4:	d0f2      	beq.n	bf8c <_realloc_r+0x1c>
    bfa6:	4631      	mov	r1, r6
    bfa8:	4622      	mov	r2, r4
    bfaa:	f7ff f9a6 	bl	b2fa <memcpy>
    bfae:	4631      	mov	r1, r6
    bfb0:	4638      	mov	r0, r7
    bfb2:	f7ff ff8f 	bl	bed4 <_free_r>
    bfb6:	e7e9      	b.n	bf8c <_realloc_r+0x1c>
    bfb8:	4635      	mov	r5, r6
    bfba:	e7e7      	b.n	bf8c <_realloc_r+0x1c>

0000bfbc <__ascii_wctomb>:
    bfbc:	b149      	cbz	r1, bfd2 <__ascii_wctomb+0x16>
    bfbe:	2aff      	cmp	r2, #255	; 0xff
    bfc0:	bf85      	ittet	hi
    bfc2:	238a      	movhi	r3, #138	; 0x8a
    bfc4:	6003      	strhi	r3, [r0, #0]
    bfc6:	700a      	strbls	r2, [r1, #0]
    bfc8:	f04f 30ff 	movhi.w	r0, #4294967295
    bfcc:	bf98      	it	ls
    bfce:	2001      	movls	r0, #1
    bfd0:	4770      	bx	lr
    bfd2:	4608      	mov	r0, r1
    bfd4:	4770      	bx	lr

0000bfd6 <_malloc_usable_size_r>:
    bfd6:	f851 0c04 	ldr.w	r0, [r1, #-4]
    bfda:	2800      	cmp	r0, #0
    bfdc:	f1a0 0004 	sub.w	r0, r0, #4
    bfe0:	bfbc      	itt	lt
    bfe2:	580b      	ldrlt	r3, [r1, r0]
    bfe4:	18c0      	addlt	r0, r0, r3
    bfe6:	4770      	bx	lr

0000bfe8 <Representation.78636>:
    bfe8:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
    bff8:	2e00 2f2e 6168 2f6c 6e69 6c63 6475 2f65     .../hal/include/
    c008:	6168 5f6c 6477 2e74 0068 4f47 444f 4100     hal_wdt.h.GOOD.A
    c018:	5443 5649 0045 494c 4b4e 4f44 4e57 4300     CTIVE.LINKDOWN.C
    c028:	756f 646c 4e20 544f 7220 6165 2064 7266     ould NOT read fr
    c038:	6d6f 7420 6568 7720 7461 7265 6420 7465     om the water det
    c048:	6365 6f74 2072 0d31 000a 6f43 6c75 2064     ector 1...Could 
    c058:	4f4e 2054 6572 6461 6620 6f72 206d 6874     NOT read from th
    c068:	2065 6177 6574 2072 6564 6574 7463 726f     e water detector
    c078:	3220 0a0d 4300 756f 646c 4e20 544f 7220      2...Could NOT r
    c088:	6165 2064 7266 6d6f 7420 6568 4820 2056     ead from the HV 
    c098:	6964 6976 6564 0d72 000a 6f43 6c75 2064     divider...Could 
    c0a8:	4f4e 2054 6572 6461 6620 6f72 206d 6874     NOT read from th
    c0b8:	2065 6f6d 7369 7574 6572 2620 7420 6d65     e moisture & tem
    c0c8:	2070 6573 736e 726f 6f20 206e 4143 4452     p sensor on CARD
    c0d8:	3a42 3249 2043 255b 5d69 0a0d 4c00 6469     B:I2C [%i]...Lid
    c0e8:	5420 4d41 4550 2052 255b 5d73 0a0d 4c00      TAMPER [%s]...L
    c0f8:	6665 2074 7445 6568 6e72 7465 5b20 7325     eft Ethernet [%s
    c108:	0d5d 000a 6952 6867 2074 7445 6568 6e72     ]...Right Ethern
    c118:	7465 5b20 7325 0d5d 000a 6f50 6577 2072     et [%s]...Power 
    c128:	2026 7445 6568 6e72 7465 3c20 6f43 6d6d     & Ethernet <Comm
    c138:	2073 694c 6b6e 203e 255b 5d73 0a0d 4300     s Link> [%s]...C
    c148:	756f 646c 6e20 746f 7220 6165 2064 3249     ould not read I2
    c158:	2043 7562 2073 6e6f 4320 5241 4144 6620     C bus on CARDA f
    c168:	726f 4920 4332 635f 6568 6b63 645f 7665     or I2C_check_dev
    c178:	6369 4965 2844 2029 255b 5d69 0a0d 4300     iceID() [%i]...C
    c188:	5241 4144 6920 736e 7265 6574 2064 7562     ARDA inserted bu
    c198:	2074 6f6e 2074 6469 6e65 6974 6966 6465     t not identified
    c1a8:	0a0d 4300 5241 4144 6920 2073 2061 414d     ...CARDA is a MA
    c1b8:	4958 4920 0d4f 000a 6f43 6c75 2064 4f4e     XI IO...Could NO
    c1c8:	2054 7277 7469 2065 6f74 7420 6568 4d20     T write to the M
    c1d8:	6e69 2d69 4f49 4520 7078 6e61 6564 2072     ini-IO Expander 
    c1e8:	6e6f 4320 5241 4144 493a 4332 5b20 6925     on CARDA:I2C [%i
    c1f8:	0d5d 000a 4143 4452 2041 7369 6120 4d20     ]...CARDA is a M
    c208:	4e49 2049 4f49 0a0d 4300 5241 4144 6920     INI IO...CARDA i
    c218:	2073 2061 4956 5242 5041 494f 544e 0a0d     s a VIBRAPOINT..
    c228:	4300 756f 646c 4e20 544f 7720 6972 6574     .Could NOT write
    c238:	7420 206f 6874 2065 4144 2043 6147 6e69      to the DAC Gain
    c248:	6320 6e6f 7274 6c6f 656c 2072 6e6f 4320      controller on C
    c258:	5241 4144 493a 4332 5b20 6925 0d5d 000a     ARDA:I2C [%i]...
    c268:	4143 4452 2041 7369 6120 5620 4249 4152     CARDA is a VIBRA
    c278:	4554 0d4b 000a 535b 4950 4b5f 5a53 3738     TEK...[SPI_KSZ87
    c288:	3439 505f 524f 3354 4f43 544e 4f52 324c     94_PORT3CONTROL2
    c298:	205d 6f6e 2074 6f63 7272 6365 0d74 000a     ] not correct...
    c2a8:	4143 4452 2041 7369 6120 5020 776f 7265     CARDA is a Power
    c2b8:	2620 4520 6874 7265 656e 2074 6144 6775      & Ethernet Daug
    c2c8:	7468 7265 432d 7261 0d64 000a 4143 4452     hter-Card...CARD
    c2d8:	2041 6168 2073 6562 6e65 5220 4d45 564f     A has been REMOV
    c2e8:	4445 0a0d 4300 756f 646c 6e20 746f 7220     ED...Could not r
    c2f8:	6165 2064 3249 2043 7562 2073 6e6f 4320     ead I2C bus on C
    c308:	5241 4244 6620 726f 4920 4332 635f 6568     ARDB for I2C_che
    c318:	6b63 645f 7665 6369 4965 2844 2029 255b     ck_deviceID() [%
    c328:	5d69 0a0d 4300 5241 4244 6920 736e 7265     i]...CARDB inser
    c338:	6574 2064 7562 2074 6f6e 2074 6469 6e65     ted but not iden
    c348:	6974 6966 6465 0a0d 4300 5241 4244 6920     tified...CARDB i
    c358:	2073 2061 414d 4958 4920 0d4f 000a 6f43     s a MAXI IO...Co
    c368:	6c75 2064 4f4e 2054 7277 7469 2065 6f74     uld NOT write to
    c378:	7420 6568 4d20 6e69 2d69 4f49 4520 7078      the Mini-IO Exp
    c388:	6e61 6564 2072 6e6f 4320 5241 4244 493a     ander on CARDB:I
    c398:	4332 5b20 6925 0d5d 000a 4143 4452 2042     2C [%i]...CARDB 
    c3a8:	7369 6120 4d20 4e49 2049 4f49 0a0d 4300     is a MINI IO...C
    c3b8:	5241 4244 6920 2073 2061 4956 5242 5041     ARDB is a VIBRAP
    c3c8:	494f 544e 0a0d 4300 756f 646c 4e20 544f     OINT...Could NOT
    c3d8:	7720 6972 6574 7420 206f 6874 2065 4144      write to the DA
    c3e8:	2043 6147 6e69 6320 6e6f 7274 6c6f 656c     C Gain controlle
    c3f8:	2072 6e6f 4320 5241 4244 493a 4332 5b20     r on CARDB:I2C [
    c408:	6925 0d5d 000a 4143 4452 2042 7369 6120     %i]...CARDB is a
    c418:	5620 4249 4152 4554 0d4b 000a 4143 4452      VIBRATEK...CARD
    c428:	2042 6168 2073 6562 6e65 5220 4d45 564f     B has been REMOV
    c438:	4445 0a0d 2e00 2f2e 6168 2f6c 7273 2f63     ED...../hal/src/
    c448:	6168 5f6c 6461 5f63 7973 636e 632e 2e00     hal_adc_sync.c..
    c458:	2f2e 6168 2f6c 7273 2f63 6168 5f6c 6561     ./hal/src/hal_ae
    c468:	5f73 7973 636e 632e 2e00 2f2e 6168 2f6c     s_sync.c.../hal/
    c478:	7273 2f63 6168 5f6c 7263 5f63 7973 636e     src/hal_crc_sync
    c488:	632e 2e00 2f2e 6168 2f6c 7273 2f63 6168     .c.../hal/src/ha
    c498:	5f6c 6c66 7361 2e68 0063 2e2e 682f 6c61     l_flash.c.../hal
    c4a8:	732f 6372 682f 6c61 695f 2e6f 0063 2e2e     /src/hal_io.c...
    c4b8:	682f 6c61 732f 6372 682f 6c61 6d5f 6361     /hal/src/hal_mac
    c4c8:	615f 7973 636e 632e 2e00 2f2e 6168 2f6c     _async.c.../hal/
    c4d8:	7273 2f63 6168 5f6c 6873 5f61 7973 636e     src/hal_sha_sync
    c4e8:	632e 2e00 2f2e 6168 2f6c 7273 2f63 6168     .c.../hal/src/ha
    c4f8:	5f6c 6974 656d 2e72 0063 2e2e 682f 6c61     l_timer.c.../hal
    c508:	732f 6372 682f 6c61 755f 6173 7472 615f     /src/hal_usart_a
    c518:	7973 636e 632e 2e00 2f2e 6168 2f6c 7475     sync.c.../hal/ut
    c528:	6c69 2f73 7273 2f63 7475 6c69 5f73 696c     ils/src/utils_li
    c538:	7473 632e 2e00 2f2e 6168 2f6c 7475 6c69     st.c.../hal/util
    c548:	2f73 7273 2f63 7475 6c69 5f73 6972 676e     s/src/utils_ring
    c558:	7562 6666 7265 632e 0000                    buffer.c..

0000c562 <_adcs>:
    c562:	0000 0340 0018 0003 1800 0000 0000 0000     ..@.............
    c572:	0000 0000 0000 2e2e 682f 6c70 612f 6364     ......../hpl/adc
    c582:	682f 6c70 615f 6364 632e 0000 0000          /hpl_adc.c....

0000c590 <_cfgs>:
    c590:	4500 0000 0000 1600 0000 0000 0000 0000     .E..............
	...
    c690:	2e2e 682f 6c70 6e2f 6d76 7463 6c72 682f     ../hpl/nvmctrl/h
    c6a0:	6c70 6e5f 6d76 7463 6c72 632e 0000 0000     pl_nvmctrl.c....
    c6b0:	3000 4000 3400 4000 2000 4101 4000 4101     .0.@.4.@. .A.@.A
    c6c0:	0000 4300 0400 4300 0800 4300 0c00 4300     ...C...C...C...C

0000c6d0 <_usarts>:
    c6d0:	0000 0000 0084 4010 0000 0003 0002 0070     .......@......p.
    c6e0:	f4bc 0000 0000 0000 0005 0000 0084 4010     ...............@
    c6f0:	0000 0003 0002 0070 f4bc 0000 0000 0000     ......p.........

0000c700 <_i2cms>:
	...

0000c718 <sercomspi_regs>:
    c718:	018c 0013 0000 0002 0000 0000 001d 01ff     ................
    c728:	2e04 2f2e 7068 2f6c 6573 6372 6d6f 682f     .../hpl/sercom/h
    c738:	6c70 735f 7265 6f63 2e6d 0063 3800 4000     pl_sercom.c..8.@
    c748:	3c00 4000 a000 4101 c000 4101 1400 4200     .<.@...A...A...B
    c758:	1800 4200 1400 4300 1800 4300               ...B...C...C

0000c764 <_tcs>:
    c764:	0000 006b 07d8 0000 0000 0001 002e 0000     ..k.............
    c774:	0000 0000 2e2e 682f 6c70 742f 2f63 7068     ....../hpl/tc/hp
    c784:	5f6c 6374 632e 0000                         l_tc.c..

0000c78c <_usb_ep_cfgs>:
    c78c:	71fc 2000 0000 0000 0040 0000 71bc 2000     .q. ....@....q. 
    c79c:	0000 0000 0040 0000 717c 2000 0000 0000     ....@...|q. ....
    c7ac:	0040 0000 2e2e 682f 6c70 772f 7464 682f     @...../hpl/wdt/h
    c7bc:	6c70 775f 7464 632e 2e00 2f2e 7068 2f6c     pl_wdt.c.../hpl/
    c7cc:	6f70 7472 682f 6c70 675f 6970 5f6f 6162     port/hpl_gpio_ba
    c7dc:	6573 682e 5500 4253 6920 696e 2f74 6e65     se.h.USB init/en
    c7ec:	6261 656c 4520 5252 524f 2121 2121 2121     able ERROR!!!!!!
    c7fc:	0d21 000a 7375 5f62 6e69 7469 2928 0a0d     !...usb_init()..
    c80c:	6300 6364 645f 7665 6369 5f65 6361 5f6d     .cdc_device_acm_
    c81c:	6e69 7469 2928 0a0d 6300 6364 6664 615f     init()...cdcdf_a
    c82c:	6d63 725f 6765 7369 6574 5f72 6163 6c6c     cm_register_call
    c83c:	6162 6b63 4328 4344 4644 415f 4d43 435f     back(CDCDF_ACM_C
    c84c:	5f42 5453 5441 5f45 2c43 2820 5546 434e     B_STATE_C, (FUNC
    c85c:	505f 5254 7529 6273 645f 7665 6369 5f65     _PTR)usb_device_
    c86c:	6263 735f 6174 6574 635f 0d29 000a 6f43     cb_state_c)...Co
    c87c:	666e 6769 7275 6e69 2067 6e61 2064 6863     nfiguring and ch
    c88c:	6365 696b 676e 7420 6568 5320 4950 4b20     ecking the SPI K
    c89c:	5a53 3738 3439 4520 6874 7265 656e 2074     SZ8794 Ethernet 
    c8ac:	5753 5449 4843 7220 6765 7369 6574 7372     SWITCH registers
    c8bc:	2e2e 0d2e 000a 535b 4950 4b5f 5a53 3738     ......[SPI_KSZ87
    c8cc:	3439 465f 4d41 4c49 5f59 4449 205d 6f6e     94_FAMILY_ID] no
    c8dc:	2074 6f63 7272 6365 0d74 000a 535b 4950     t correct...[SPI
    c8ec:	4b5f 5a53 3738 3439 535f 4154 5452 6620     _KSZ8794_START f
    c8fc:	7269 7473 205d 6f6e 2074 6f63 7272 6365     irst] not correc
    c90c:	0d74 000a 535b 4950 4b5f 5a53 3738 3439     t...[SPI_KSZ8794
    c91c:	475f 4f4c 4142 304c 205d 6f6e 2074 6f63     _GLOBAL0] not co
    c92c:	7272 6365 0d74 000a 535b 4950 4b5f 5a53     rrect...[SPI_KSZ
    c93c:	3738 3439 475f 4f4c 4142 314c 205d 6f6e     8794_GLOBAL1] no
    c94c:	2074 6f63 7272 6365 0d74 000a 535b 4950     t correct...[SPI
    c95c:	4b5f 5a53 3738 3439 475f 4f4c 4142 324c     _KSZ8794_GLOBAL2
    c96c:	205d 6f6e 2074 6f63 7272 6365 0d74 000a     ] not correct...
    c97c:	535b 4950 4b5f 5a53 3738 3439 475f 4f4c     [SPI_KSZ8794_GLO
    c98c:	4142 334c 205d 6f6e 2074 6f63 7272 6365     BAL3] not correc
    c99c:	0d74 000a 535b 4950 4b5f 5a53 3738 3439     t...[SPI_KSZ8794
    c9ac:	475f 4f4c 4142 344c 205d 6f6e 2074 6f63     _GLOBAL4] not co
    c9bc:	7272 6365 0d74 000a 535b 4950 4b5f 5a53     rrect...[SPI_KSZ
    c9cc:	3738 3439 475f 4f4c 4142 354c 205d 6f6e     8794_GLOBAL5] no
    c9dc:	2074 6f63 7272 6365 0d74 000a 535b 4950     t correct...[SPI
    c9ec:	4b5f 5a53 3738 3439 475f 4f4c 4142 364c     _KSZ8794_GLOBAL6
    c9fc:	205d 6f6e 2074 6f63 7272 6365 0d74 000a     ] not correct...
    ca0c:	535b 4950 4b5f 5a53 3738 3439 475f 4f4c     [SPI_KSZ8794_GLO
    ca1c:	4142 394c 205d 6f6e 2074 6f63 7272 6365     BAL9] not correc
    ca2c:	0d74 000a 535b 4950 4b5f 5a53 3738 3439     t...[SPI_KSZ8794
    ca3c:	475f 4f4c 4142 314c 5d30 6e20 746f 6320     _GLOBAL10] not c
    ca4c:	726f 6572 7463 0a0d 5b00 5053 5f49 534b     orrect...[SPI_KS
    ca5c:	385a 3937 5f34 4450 434d 5d31 6e20 746f     Z8794_PDMC1] not
    ca6c:	6320 726f 6572 7463 0a0d 5b00 5053 5f49      correct...[SPI_
    ca7c:	534b 385a 3937 5f34 4450 434d 5d32 6e20     KSZ8794_PDMC2] n
    ca8c:	746f 6320 726f 6572 7463 0a0d 5b00 5053     ot correct...[SP
    ca9c:	5f49 534b 385a 3937 5f34 4f50 5452 4331     I_KSZ8794_PORT1C
    caac:	4e4f 5254 4c4f 5d30 6e20 746f 6320 726f     ONTROL0] not cor
    cabc:	6572 7463 0a0d 5b00 5053 5f49 534b 385a     rect...[SPI_KSZ8
    cacc:	3937 5f34 4f50 5452 4332 4e4f 5254 4c4f     794_PORT2CONTROL
    cadc:	5d30 6e20 746f 6320 726f 6572 7463 0a0d     0] not correct..
    caec:	5b00 5053 5f49 534b 385a 3937 5f34 4f50     .[SPI_KSZ8794_PO
    cafc:	5452 4333 4e4f 5254 4c4f 5d30 6e20 746f     RT3CONTROL0] not
    cb0c:	6320 726f 6572 7463 0a0d 5b00 5053 5f49      correct...[SPI_
    cb1c:	534b 385a 3937 5f34 4f50 5452 4334 4e4f     KSZ8794_PORT4CON
    cb2c:	5254 4c4f 5d30 6e20 746f 6320 726f 6572     TROL0] not corre
    cb3c:	7463 0a0d 5b00 5053 5f49 534b 385a 3937     ct...[SPI_KSZ879
    cb4c:	5f34 4f50 5452 4331 4e4f 5254 4c4f 5d31     4_PORT1CONTROL1]
    cb5c:	6e20 746f 6320 726f 6572 7463 0a0d 5b00      not correct...[
    cb6c:	5053 5f49 534b 385a 3937 5f34 4f50 5452     SPI_KSZ8794_PORT
    cb7c:	4332 4e4f 5254 4c4f 5d31 6e20 746f 6320     2CONTROL1] not c
    cb8c:	726f 6572 7463 0a0d 5b00 5053 5f49 534b     orrect...[SPI_KS
    cb9c:	385a 3937 5f34 4f50 5452 4333 4e4f 5254     Z8794_PORT3CONTR
    cbac:	4c4f 5d31 6e20 746f 6320 726f 6572 7463     OL1] not correct
    cbbc:	0a0d 5b00 5053 5f49 534b 385a 3937 5f34     ...[SPI_KSZ8794_
    cbcc:	4f50 5452 4334 4e4f 5254 4c4f 5d31 6e20     PORT4CONTROL1] n
    cbdc:	746f 6320 726f 6572 7463 0a0d 5b00 5053     ot correct...[SP
    cbec:	5f49 534b 385a 3937 5f34 4f50 5452 4331     I_KSZ8794_PORT1C
    cbfc:	4e4f 5254 4c4f 5d32 6e20 746f 6320 726f     ONTROL2] not cor
    cc0c:	6572 7463 0a0d 5b00 5053 5f49 534b 385a     rect...[SPI_KSZ8
    cc1c:	3937 5f34 4f50 5452 4332 4e4f 5254 4c4f     794_PORT2CONTROL
    cc2c:	5d32 6e20 746f 6320 726f 6572 7463 0a0d     2] not correct..
    cc3c:	5b00 5053 5f49 534b 385a 3937 5f34 4f50     .[SPI_KSZ8794_PO
    cc4c:	5452 4334 4e4f 5254 4c4f 5d32 6e20 746f     RT4CONTROL2] not
    cc5c:	6320 726f 6572 7463 0a0d 5b00 5053 5f49      correct...[SPI_
    cc6c:	534b 385a 3937 5f34 4f50 5452 4331 4e4f     KSZ8794_PORT1CON
    cc7c:	5254 4c4f 5d33 6e20 746f 6320 726f 6572     TROL3] not corre
    cc8c:	7463 0a0d 5b00 5053 5f49 534b 385a 3937     ct...[SPI_KSZ879
    cc9c:	5f34 4f50 5452 4332 4e4f 5254 4c4f 5d33     4_PORT2CONTROL3]
    ccac:	6e20 746f 6320 726f 6572 7463 0a0d 5b00      not correct...[
    ccbc:	5053 5f49 534b 385a 3937 5f34 4f50 5452     SPI_KSZ8794_PORT
    cccc:	4333 4e4f 5254 4c4f 5d33 6e20 746f 6320     3CONTROL3] not c
    ccdc:	726f 6572 7463 0a0d 5b00 5053 5f49 534b     orrect...[SPI_KS
    ccec:	385a 3937 5f34 4f50 5452 4334 4e4f 5254     Z8794_PORT4CONTR
    ccfc:	4c4f 5d33 6e20 746f 6320 726f 6572 7463     OL3] not correct
    cd0c:	0a0d 5b00 5053 5f49 534b 385a 3937 5f34     ...[SPI_KSZ8794_
    cd1c:	4f50 5452 4331 4e4f 5254 4c4f 5d34 6e20     PORT1CONTROL4] n
    cd2c:	746f 6320 726f 6572 7463 0a0d 5b00 5053     ot correct...[SP
    cd3c:	5f49 534b 385a 3937 5f34 4f50 5452 4332     I_KSZ8794_PORT2C
    cd4c:	4e4f 5254 4c4f 5d34 6e20 746f 6320 726f     ONTROL4] not cor
    cd5c:	6572 7463 0a0d 5b00 5053 5f49 534b 385a     rect...[SPI_KSZ8
    cd6c:	3937 5f34 4f50 5452 4333 4e4f 5254 4c4f     794_PORT3CONTROL
    cd7c:	5d34 6e20 746f 6320 726f 6572 7463 0a0d     4] not correct..
    cd8c:	5b00 5053 5f49 534b 385a 3937 5f34 4f50     .[SPI_KSZ8794_PO
    cd9c:	5452 4334 4e4f 5254 4c4f 5d34 6e20 746f     RT4CONTROL4] not
    cdac:	6320 726f 6572 7463 0a0d 5b00 5053 5f49      correct...[SPI_
    cdbc:	534b 385a 3937 5f34 4f50 5452 4331 4e4f     KSZ8794_PORT1CON
    cdcc:	5254 4c4f 5d35 6e20 746f 6320 726f 6572     TROL5] not corre
    cddc:	7463 0a0d 5b00 5053 5f49 534b 385a 3937     ct...[SPI_KSZ879
    cdec:	5f34 4f50 5452 4332 4e4f 5254 4c4f 5d35     4_PORT2CONTROL5]
    cdfc:	6e20 746f 6320 726f 6572 7463 0a0d 5b00      not correct...[
    ce0c:	5053 5f49 534b 385a 3937 5f34 4f50 5452     SPI_KSZ8794_PORT
    ce1c:	4333 4e4f 5254 4c4f 5d35 6e20 746f 6320     3CONTROL5] not c
    ce2c:	726f 6572 7463 0a0d 5b00 5053 5f49 534b     orrect...[SPI_KS
    ce3c:	385a 3937 5f34 4f50 5452 4334 4e4f 5254     Z8794_PORT4CONTR
    ce4c:	4c4f 5d35 6e20 746f 6320 726f 6572 7463     OL5] not correct
    ce5c:	0a0d 5b00 5053 5f49 534b 385a 3937 5f34     ...[SPI_KSZ8794_
    ce6c:	4f50 5452 4334 4e4f 5254 4c4f 5d36 6e20     PORT4CONTROL6] n
    ce7c:	746f 6320 726f 6572 7463 0a0d 5b00 5053     ot correct...[SP
    ce8c:	5f49 534b 385a 3937 5f34 4f50 5452 4331     I_KSZ8794_PORT1C
    ce9c:	4e4f 5254 4c4f 5d37 6e20 746f 6320 726f     ONTROL7] not cor
    ceac:	6572 7463 0a0d 5b00 5053 5f49 534b 385a     rect...[SPI_KSZ8
    cebc:	3937 5f34 4f50 5452 4332 4e4f 5254 4c4f     794_PORT2CONTROL
    cecc:	5d37 6e20 746f 6320 726f 6572 7463 0a0d     7] not correct..
    cedc:	5b00 5053 5f49 534b 385a 3937 5f34 4f50     .[SPI_KSZ8794_PO
    ceec:	5452 4333 4e4f 5254 4c4f 5d37 6e20 746f     RT3CONTROL7] not
    cefc:	6320 726f 6572 7463 0a0d 5b00 5053 5f49      correct...[SPI_
    cf0c:	534b 385a 3937 5f34 4f50 5452 4331 4e4f     KSZ8794_PORT1CON
    cf1c:	5254 4c4f 5d38 6e20 746f 6320 726f 6572     TROL8] not corre
    cf2c:	7463 0a0d 5b00 5053 5f49 534b 385a 3937     ct...[SPI_KSZ879
    cf3c:	5f34 4f50 5452 4332 4e4f 5254 4c4f 5d38     4_PORT2CONTROL8]
    cf4c:	6e20 746f 6320 726f 6572 7463 0a0d 5b00      not correct...[
    cf5c:	5053 5f49 534b 385a 3937 5f34 4f50 5452     SPI_KSZ8794_PORT
    cf6c:	4333 4e4f 5254 4c4f 5d38 6e20 746f 6320     3CONTROL8] not c
    cf7c:	726f 6572 7463 0a0d 5b00 5053 5f49 534b     orrect...[SPI_KS
    cf8c:	385a 3937 5f34 4f50 5452 4c31 4e49 4d4b     Z8794_PORT1LINKM
    cf9c:	5d44 6e20 746f 6320 726f 6572 7463 0a0d     D] not correct..
    cfac:	5b00 5053 5f49 534b 385a 3937 5f34 4f50     .[SPI_KSZ8794_PO
    cfbc:	5452 4c32 4e49 4d4b 5d44 6e20 746f 6320     RT2LINKMD] not c
    cfcc:	726f 6572 7463 0a0d 5b00 5053 5f49 534b     orrect...[SPI_KS
    cfdc:	385a 3937 5f34 4f50 5452 4c33 4e49 4d4b     Z8794_PORT3LINKM
    cfec:	5d44 6e20 746f 6320 726f 6572 7463 0a0d     D] not correct..
    cffc:	5b00 5053 5f49 534b 385a 3937 5f34 4f50     .[SPI_KSZ8794_PO
    d00c:	5452 4331 4e4f 5254 4c4f 5d39 6e20 746f     RT1CONTROL9] not
    d01c:	6320 726f 6572 7463 0a0d 5b00 5053 5f49      correct...[SPI_
    d02c:	534b 385a 3937 5f34 4f50 5452 4332 4e4f     KSZ8794_PORT2CON
    d03c:	5254 4c4f 5d39 6e20 746f 6320 726f 6572     TROL9] not corre
    d04c:	7463 0a0d 5b00 5053 5f49 534b 385a 3937     ct...[SPI_KSZ879
    d05c:	5f34 4f50 5452 4333 4e4f 5254 4c4f 5d39     4_PORT3CONTROL9]
    d06c:	6e20 746f 6320 726f 6572 7463 0a0d 5b00      not correct...[
    d07c:	5053 5f49 534b 385a 3937 5f34 4f50 5452     SPI_KSZ8794_PORT
    d08c:	4331 4e4f 5254 4c4f 3031 205d 6f6e 2074     1CONTROL10] not 
    d09c:	6f63 7272 6365 0d74 000a 535b 4950 4b5f     correct...[SPI_K
    d0ac:	5a53 3738 3439 505f 524f 3254 4f43 544e     SZ8794_PORT2CONT
    d0bc:	4f52 314c 5d30 6e20 746f 6320 726f 6572     ROL10] not corre
    d0cc:	7463 0a0d 5b00 5053 5f49 534b 385a 3937     ct...[SPI_KSZ879
    d0dc:	5f34 4f50 5452 4333 4e4f 5254 4c4f 3031     4_PORT3CONTROL10
    d0ec:	205d 6f6e 2074 6f63 7272 6365 0d74 000a     ] not correct...
    d0fc:	535b 4950 4b5f 5a53 3738 3439 505f 524f     [SPI_KSZ8794_POR
    d10c:	3254 4f43 544e 4f52 324c 5d30 6e20 746f     T2CONTROL20] not
    d11c:	6320 726f 6572 7463 0a0d 5b00 5053 5f49      correct...[SPI_
    d12c:	534b 385a 3937 5f34 4f50 5452 4331 4e4f     KSZ8794_PORT1CON
    d13c:	5254 4c4f 3231 205d 6f6e 2074 6f63 7272     TROL12] not corr
    d14c:	6365 0d74 000a 535b 4950 4b5f 5a53 3738     ect...[SPI_KSZ87
    d15c:	3439 505f 524f 3254 4f43 544e 4f52 314c     94_PORT2CONTROL1
    d16c:	5d32 6e20 746f 6320 726f 6572 7463 0a0d     2] not correct..
    d17c:	5b00 5053 5f49 534b 385a 3937 5f34 4f50     .[SPI_KSZ8794_PO
    d18c:	5452 4333 4e4f 5254 4c4f 3231 205d 6f6e     RT3CONTROL12] no
    d19c:	2074 6f63 7272 6365 0d74 000a 535b 4950     t correct...[SPI
    d1ac:	4b5f 5a53 3738 3439 505f 524f 3454 4f43     _KSZ8794_PORT4CO
    d1bc:	544e 4f52 314c 5d32 6e20 746f 6320 726f     NTROL12] not cor
    d1cc:	6572 7463 0a0d 5b00 5053 5f49 534b 385a     rect...[SPI_KSZ8
    d1dc:	3937 5f34 4f50 5452 4331 4e4f 5254 4c4f     794_PORT1CONTROL
    d1ec:	3331 205d 6f6e 2074 6f63 7272 6365 0d74     13] not correct.
    d1fc:	000a 535b 4950 4b5f 5a53 3738 3439 505f     ..[SPI_KSZ8794_P
    d20c:	524f 3254 4f43 544e 4f52 314c 5d33 6e20     ORT2CONTROL13] n
    d21c:	746f 6320 726f 6572 7463 0a0d 5b00 5053     ot correct...[SP
    d22c:	5f49 534b 385a 3937 5f34 4f50 5452 4333     I_KSZ8794_PORT3C
    d23c:	4e4f 5254 4c4f 3331 205d 6f6e 2074 6f63     ONTROL13] not co
    d24c:	7272 6365 0d74 000a 535b 4950 4b5f 5a53     rrect...[SPI_KSZ
    d25c:	3738 3439 505f 524f 3454 4f43 544e 4f52     8794_PORT4CONTRO
    d26c:	314c 5d33 6e20 746f 6320 726f 6572 7463     L13] not correct
    d27c:	0a0d 5b00 5053 5f49 534b 385a 3937 5f34     ...[SPI_KSZ8794_
    d28c:	4f50 5452 4331 4e4f 5254 4c4f 3431 205d     PORT1CONTROL14] 
    d29c:	6f6e 2074 6f63 7272 6365 0d74 000a 535b     not correct...[S
    d2ac:	4950 4b5f 5a53 3738 3439 505f 524f 3254     PI_KSZ8794_PORT2
    d2bc:	4f43 544e 4f52 314c 5d34 6e20 746f 6320     CONTROL14] not c
    d2cc:	726f 6572 7463 0a0d 5b00 5053 5f49 534b     orrect...[SPI_KS
    d2dc:	385a 3937 5f34 4f50 5452 4333 4e4f 5254     Z8794_PORT3CONTR
    d2ec:	4c4f 3431 205d 6f6e 2074 6f63 7272 6365     OL14] not correc
    d2fc:	0d74 000a 535b 4950 4b5f 5a53 3738 3439     t...[SPI_KSZ8794
    d30c:	505f 524f 3454 4f43 544e 4f52 314c 5d34     _PORT4CONTROL14]
    d31c:	6e20 746f 6320 726f 6572 7463 0a0d 5b00      not correct...[
    d32c:	5053 5f49 534b 385a 3937 5f34 4f50 5452     SPI_KSZ8794_PORT
    d33c:	4331 4e4f 5254 4c4f 3531 205d 6f6e 2074     1CONTROL15] not 
    d34c:	6f63 7272 6365 0d74 000a 535b 4950 4b5f     correct...[SPI_K
    d35c:	5a53 3738 3439 505f 524f 3254 4f43 544e     SZ8794_PORT2CONT
    d36c:	4f52 314c 5d35 6e20 746f 6320 726f 6572     ROL15] not corre
    d37c:	7463 0a0d 5b00 5053 5f49 534b 385a 3937     ct...[SPI_KSZ879
    d38c:	5f34 4f50 5452 4333 4e4f 5254 4c4f 3531     4_PORT3CONTROL15
    d39c:	205d 6f6e 2074 6f63 7272 6365 0d74 000a     ] not correct...
    d3ac:	535b 4950 4b5f 5a53 3738 3439 505f 524f     [SPI_KSZ8794_POR
    d3bc:	3454 4f43 544e 4f52 314c 5d35 6e20 746f     T4CONTROL15] not
    d3cc:	6320 726f 6572 7463 0a0d 5b00 5053 5f49      correct...[SPI_
    d3dc:	534b 385a 3937 5f34 4f50 5452 4331 4e4f     KSZ8794_PORT1CON
    d3ec:	5254 4c4f 3631 205d 6f6e 2074 6f63 7272     TROL16] not corr
    d3fc:	6365 0d74 000a 535b 4950 4b5f 5a53 3738     ect...[SPI_KSZ87
    d40c:	3439 505f 524f 3254 4f43 544e 4f52 314c     94_PORT2CONTROL1
    d41c:	5d36 6e20 746f 6320 726f 6572 7463 0a0d     6] not correct..
    d42c:	5b00 5053 5f49 534b 385a 3937 5f34 4f50     .[SPI_KSZ8794_PO
    d43c:	5452 4333 4e4f 5254 4c4f 3631 205d 6f6e     RT3CONTROL16] no
    d44c:	2074 6f63 7272 6365 0d74 000a 535b 4950     t correct...[SPI
    d45c:	4b5f 5a53 3738 3439 505f 524f 3454 4f43     _KSZ8794_PORT4CO
    d46c:	544e 4f52 314c 5d36 6e20 746f 6320 726f     NTROL16] not cor
    d47c:	6572 7463 0a0d 5b00 5053 5f49 534b 385a     rect...[SPI_KSZ8
    d48c:	3937 5f34 4f50 5452 4331 4e4f 5254 4c4f     794_PORT1CONTROL
    d49c:	3731 205d 6f6e 2074 6f63 7272 6365 0d74     17] not correct.
    d4ac:	000a 535b 4950 4b5f 5a53 3738 3439 505f     ..[SPI_KSZ8794_P
    d4bc:	524f 3254 4f43 544e 4f52 314c 5d37 6e20     ORT2CONTROL17] n
    d4cc:	746f 6320 726f 6572 7463 0a0d 5b00 5053     ot correct...[SP
    d4dc:	5f49 534b 385a 3937 5f34 4f50 5452 4333     I_KSZ8794_PORT3C
    d4ec:	4e4f 5254 4c4f 3731 205d 6f6e 2074 6f63     ONTROL17] not co
    d4fc:	7272 6365 0d74 000a 535b 4950 4b5f 5a53     rrect...[SPI_KSZ
    d50c:	3738 3439 505f 524f 3454 4f43 544e 4f52     8794_PORT4CONTRO
    d51c:	314c 5d37 6e20 746f 6320 726f 6572 7463     L17] not correct
    d52c:	0a0d 5b00 5053 5f49 534b 385a 3937 5f34     ...[SPI_KSZ8794_
    d53c:	5453 5241 2054 6966 616e 5d6c 6e20 746f     START final] not
    d54c:	6320 726f 6572 7463 0a0d 4d00 4341 6120      correct...MAC a
    d55c:	6464 6572 7373 6120 646e 4920 2050 6373     ddress and IP sc
    d56c:	6568 656d 6e20 746f 6920 696e 6974 6c61     heme not initial
    d57c:	7a69 6465 6120 2073 6874 7265 2065 7369     ized as there is
    d58c:	6e20 206f 495b 5d44 7320 7465 2e2e 0d2e      no [ID] set....
    d59c:	000a 754d 746c 5369 6e65 6573 5b20 6e69     ..MultiSense [in
    d5ac:	7469 4d20 4341 492f 2050 6176 756c 7365     it MAC/IP values
    d5bc:	205d 7825 253a 3a78 7825 253a 3a78 7825     ] %x:%x:%x:%x:%x
    d5cc:	253a 2078 6425 252e 2e64 6425 252e 0d64     :%x %d.%d.%d.%d.
    d5dc:	000a 614d 6e69 5520 5044 7320 636f 656b     ..Main UDP socke
    d5ec:	2074 7263 6165 6574 2e64 2e2e 0a0d 4d00     t created......M
    d5fc:	6961 206e 4455 2050 6f73 6b63 7465 4520     ain UDP socket E
    d60c:	5252 524f 2121 2121 2121 0d21 000a 6143     RROR!!!!!!!...Ca
    d61c:	6472 5b20 5d41 5520 5044 7320 636f 656b     rd [A] UDP socke
    d62c:	2074 7263 6165 6574 2e64 2e2e 0a0d 4300     t created......C
    d63c:	7261 2064 415b 205d 4455 2050 6f73 6b63     ard [A] UDP sock
    d64c:	7465 4520 5252 524f 2121 2121 2121 0d21     et ERROR!!!!!!!.
    d65c:	000a 6143 6472 5b20 5d42 5520 5044 7320     ..Card [B] UDP s
    d66c:	636f 656b 2074 7263 6165 6574 2e64 2e2e     ocket created...
    d67c:	0a0d 4300 7261 2064 425b 205d 4455 2050     ...Card [B] UDP 
    d68c:	6f73 6b63 7465 4520 5252 524f 2121 2121     socket ERROR!!!!
    d69c:	2121 0d21 000a 6952 676e 4d20 6e61 6761     !!!...Ring Manag
    d6ac:	6d65 6e65 2074 4455 2050 6f73 6b63 7465     ement UDP socket
    d6bc:	6320 6572 7461 6465 2e2e 0d2e 000a 6952      created......Ri
    d6cc:	676e 4d20 6e61 6761 6d65 6e65 2074 4455     ng Management UD
    d6dc:	2050 6f73 6b63 7465 4520 5252 524f 2121     P socket ERROR!!
    d6ec:	2121 2121 0d21 000a 754d 746c 5369 6e65     !!!!!...MultiSen
    d6fc:	6573 5b20 6f63 666e 6769 7275 7461 6f69     se [configuratio
    d70c:	206e 5245 4f52 2052 4552 4441 4e49 5d47     n ERROR READING]
    d71c:	0a0d 4d00 6c75 6974 6553 736e 2065 635b     ...MultiSense [c
    d72c:	6e6f 6966 7567 6172 6974 6e6f 4920 564e     onfiguration INV
    d73c:	4c41 4449 0d5d 000a 554d 544c 5349 4e45     ALID]...MULTISEN
    d74c:	4553 4e20 4545 5344 4320 4e4f 4946 5547     SE NEEDS CONFIGU
    d75c:	4952 474e 2e2e 002e 754d 746c 5369 6e65     RING....MultiSen
    d76c:	6573 5b20 6f63 666e 6769 7275 7461 6f69     se [configuratio
    d77c:	206e 4f46 4d52 5441 4554 5d44 0a0d 4d00     n FORMATTED]...M
    d78c:	6c75 6974 6553 736e 2065 635b 6e6f 6966     ultiSense [confi
    d79c:	7567 6172 6974 6e6f 4520 5252 524f 5720     guration ERROR W
    d7ac:	4952 4954 474e 0d5d 000a 754d 746c 5369     RITING]...MultiS
    d7bc:	6e65 6573 5b20 6f63 666e 6769 7275 7461     ense [configurat
    d7cc:	6f69 206e 5257 5449 4554 5d4e 0a0d 4d00     ion WRITTEN]...M
    d7dc:	6c75 6974 6553 736e 2065 555b 4450 5441     ultiSense [UPDAT
    d7ec:	4445 3c20 4449 203e 6f63 666e 6769 7275     ED <ID> configur
    d7fc:	7461 6f69 206e 5257 5449 4554 5d4e 0a0d     ation WRITTEN]..
    d80c:	4700 6f6c 6162 206c 6573 7474 6e69 7367     .Global settings
    d81c:	7020 6361 656b 2074 6572 6563 7669 6465      packet received
    d82c:	2e2e 0d2e 000a 6143 6472 2041 694d 696e     ......CardA Mini
    d83c:	492d 204f 6170 6b63 7465 7220 6365 6965     -IO packet recei
    d84c:	6576 2e64 2e2e 0a0d 4300 7261 4264 4d20     ved......CardB M
    d85c:	6e69 2d69 4f49 7020 6361 656b 2074 6572     ini-IO packet re
    d86c:	6563 7669 6465 2e2e 0d2e 000a 7242 616f     ceived......Broa
    d87c:	6364 7361 2074 6154 6c62 2065 465b 554c     dcast Table [FLU
    d88c:	4853 205d 4455 2050 6170 6b63 7465 6120     SH] UDP packet a
    d89c:	7272 7669 6465 2e2e 0d2e 000a 6148 6472     rrived......Hard
    d8ac:	6177 6572 7020 6361 656b 2074 6573 646e     ware packet send
    d8bc:	2e2e 0d2e 000a 6143 6472 2041 694d 696e     ......CardA Mini
    d8cc:	492d 204f 6170 6b63 7465 7320 6e65 2e64     -IO packet send.
    d8dc:	2e2e 0a0d 4300 7261 4164 5620 6269 6172     .....CardA Vibra
    d8ec:	6554 206b 6170 6b63 7465 7320 6e65 2e64     Tek packet send.
    d8fc:	2e2e 0a0d 4300 7261 4264 4d20 6e69 2d69     .....CardB Mini-
    d90c:	4f49 7020 6361 656b 2074 6573 646e 2e2e     IO packet send..
    d91c:	0d2e 000a 6143 6472 2042 6956 7262 5461     ....CardB VibraT
    d92c:	6b65 7020 6361 656b 2074 6573 646e 2e2e     ek packet send..
    d93c:	0d2e 000a 6f54 6f70 6f6c 7967 7520 6470     ....Topology upd
    d94c:	7461 2065 6170 6b63 7465 7320 6e65 2e64     ate packet send.
    d95c:	2e2e 0a0d 4200 5341 5345 4154 4954 4e4f     .....BASESTATION
    d96c:	5000 5341 2d53 4854 4f52 4755 0048 5055     .PASS-THROUGH.UP
    d97c:	4c00 4e49 204b 4b4f 4c00 4e49 204b 4f44     .LINK OK.LINK DO
    d98c:	4e57 5600 6269 6172 6f50 6e69 0074 4f4e     WN.VibraPoint.NO
    d99c:	2054 4946 5454 4445 5600 6269 6172 6554     T FITTED.VibraTe
    d9ac:	006b 614d 6978 4920 004f 694d 696e 4920     k.Maxi IO.Mini I
    d9bc:	004f 6e55 6e6b 776f 006e 2650 0045 2f4e     O.Unknown.P&E.N/
    d9cc:	0041 5242 4b4f 4e45 4c00 4f4f 0050 5042     A.BROKEN.LOOP.BP
    d9dc:	5544 3d20 3120 0a0d 4500 4854 5245 454e     DU = 1...ETHERNE
    d9ec:	3a54 5b20 7262 616f 6364 7361 2074 7473     T: [broadcast st
    d9fc:	726f 5d6d 2120 2121 2121 2121 2121 2121     orm] !!!!!!!!!!!
    da0c:	2121 2121 2121 2121 2121 2121 2121 2121     !!!!!!!!!!!!!!!!
    da1c:	2121 2121 2121 2121 2121 2121 2121 2121     !!!!!!!!!!!!!!!!
    da2c:	2121 2121 2121 2121 2121 0a0d 5700 6972     !!!!!!!!!!...Wri
    da3c:	6574 4120 4344 6720 6961 206e 6573 7474     te ADC gain sett
    da4c:	6e69 7367 6620 726f 5620 6269 6172 6554     ings for VibraTe
    da5c:	206b 6143 6472 0d41 000a 7257 7469 2065     k CardA...Write 
    da6c:	4441 2043 6167 6e69 7320 7465 6974 676e     ADC gain setting
    da7c:	2073 6f66 2072 6956 7262 5461 6b65 4320     s for VibraTek C
    da8c:	7261 4264 0a0d 4300 756f 646c 4e20 544f     ardB...Could NOT
    da9c:	7220 6165 2064 7266 6d6f 7420 6568 4d20      read from the M
    daac:	6e69 2d69 4f49 4120 4344 6f20 206e 4143     ini-IO ADC on CA
    dabc:	4452 3a41 3249 2043 255b 5d69 0a0d 4300     RDA:I2C [%i]...C
    dacc:	756f 646c 4e20 544f 7720 6972 6574 7420     ould NOT write t
    dadc:	206f 6874 2065 694d 696e 492d 204f 4441     o the Mini-IO AD
    daec:	2043 6f63 746e 6f72 6c6c 7265 6f20 206e     C controller on 
    dafc:	4143 4452 3a41 3249 2043 255b 5d69 0a0d     CARDA:I2C [%i]..
    db0c:	4300 756f 646c 4e20 544f 7720 6972 6574     .Could NOT write
    db1c:	7420 206f 6874 2065 694d 696e 492d 204f      to the Mini-IO 
    db2c:	5845 4150 444e 5245 6f20 206e 4143 4452     EXPANDER on CARD
    db3c:	3a41 3249 2043 255b 5d69 0a0d 4300 756f     A:I2C [%i]...Cou
    db4c:	646c 4e20 544f 7220 6165 2064 7266 6d6f     ld NOT read from
    db5c:	7420 6568 4d20 6e69 2d69 4f49 4520 5058      the Mini-IO EXP
    db6c:	4e41 4544 2052 6e6f 4320 5241 4144 493a     ANDER on CARDA:I
    db7c:	4332 5b20 6925 0d5d 000a 6f43 6c75 2064     2C [%i]...Could 
    db8c:	4f4e 2054 6572 6461 6620 6f72 206d 6874     NOT read from th
    db9c:	2065 694d 696e 492d 204f 4441 2043 6e6f     e Mini-IO ADC on
    dbac:	4320 5241 4244 493a 4332 5b20 6925 0d5d      CARDB:I2C [%i].
    dbbc:	000a 6f43 6c75 2064 4f4e 2054 7277 7469     ..Could NOT writ
    dbcc:	2065 6f74 7420 6568 4d20 6e69 2d69 4f49     e to the Mini-IO
    dbdc:	4120 4344 6320 6e6f 7274 6c6f 656c 2072      ADC controller 
    dbec:	6e6f 4320 5241 4244 493a 4332 5b20 6925     on CARDB:I2C [%i
    dbfc:	0d5d 000a 6f43 6c75 2064 4f4e 2054 7277     ]...Could NOT wr
    dc0c:	7469 2065 6f74 7420 6568 4d20 6e69 2d69     ite to the Mini-
    dc1c:	4f49 4520 5058 4e41 4544 2052 6e6f 4320     IO EXPANDER on C
    dc2c:	5241 4244 493a 4332 5b20 6925 0d5d 000a     ARDB:I2C [%i]...
    dc3c:	6f43 6c75 2064 4f4e 2054 6572 6461 6620     Could NOT read f
    dc4c:	6f72 206d 6874 2065 694d 696e 492d 204f     rom the Mini-IO 
    dc5c:	5845 4150 444e 5245 6f20 206e 4143 4452     EXPANDER on CARD
    dc6c:	3a42 3249 2043 255b 5d69 0a0d 0d00 2e0a     B:I2C [%i]......
    dc7c:	2e20 2e20 2e20 2e20 2e20 2e20 2e20 2e20      . . . . . . . .
    dc8c:	2e20 2e20 2e20 2e20 2e20 2e20 2e20 2e20      . . . . . . . .
    dc9c:	2e20 2e20 2e20 2e20 2e20 2e20 2e20 2e20      . . . . . . . .
    dcac:	2e20 2e20 2e20 2e20 2e20 2e20 2e20 2e20      . . . . . . . .
    dcbc:	2e20 2e20 2e20 0a0d 3c00 4c43 2049 4544      . . ....<CLI DE
    dccc:	5542 3e47 5b20 4552 4f42 544f 205d 6f63     BUG> [REBOOT] co
    dcdc:	6d6d 6e61 0d64 000a 202e 202e 202e 202e     mmand.... . . . 
    dcec:	202e 202e 202e 202e 202e 202e 202e 202e     . . . . . . . . 
    dcfc:	202e 202e 202e 202e 202e 202e 202e 202e     . . . . . . . . 
    dd0c:	202e 202e 202e 202e 202e 202e 202e 202e     . . . . . . . . 
    dd1c:	202e 202e 202e 202e 202e 202e 202e 0d2e     . . . . . . . ..
    dd2c:	0d0a 000a 433c 494c 4420 4245 4755 203e     ....<CLI DEBUG> 
    dd3c:	435b 4e4f 4946 5547 4152 4954 4e4f 4420     [CONFIGURATION D
    dd4c:	4645 5541 544c 205d 6f63 6d6d 6e61 0d64     EFAULT] command.
    dd5c:	000a 433c 494c 4420 4245 4755 203e 495b     ..<CLI DEBUG> [I
    dd6c:	2044 4552 4553 5d54 6320 6d6f 616d 646e     D RESET] command
    dd7c:	0a0d 0d00 0d0d 6552 6f62 746f 6e69 2e67     ......Rebooting.
    dd8c:	2e2e 0a0d 3c00 4c43 2049 4544 5542 3e47     .....<CLI DEBUG>
    dd9c:	5b20 4142 4553 5453 5441 4f49 5d4e 6320      [BASESTATION] c
    ddac:	6d6f 616d 646e 0a0d 3c00 4c43 2049 4544     ommand...<CLI DE
    ddbc:	5542 3e47 5b20 4150 5353 5420 5248 554f     BUG> [PASS THROU
    ddcc:	4847 205d 6f63 6d6d 6e61 0d64 000a 0a0d     GH] command.....
    dddc:	202e 202e 202e 202e 202e 202e 202e 202e     . . . . . . . . 
    ddec:	202e 202e 202e 202e 202e 202e 202e 202e     . . . . . . . . 
    ddfc:	202e 202e 202e 202e 202e 202e 202e 202e     . . . . . . . . 
    de0c:	202e 202e 202e 202e 202e 202e 202e 202e     . . . . . . . . 
    de1c:	202e 202e 202e 002e 433c 494c 4420 4245     . . . ..<CLI DEB
    de2c:	4755 203e 4c5b 5649 2045 4f42 5241 2044     UG> [LIVE BOARD 
    de3c:	5250 4e49 5d54 6320 6d6f 616d 646e 3c00     PRINT] command.<
    de4c:	4c43 2049 4544 5542 3e47 4920 2044 2020     CLI DEBUG> ID   
    de5c:	2020 2020 2020 2020 2020 2020 203d 6425                 = %d
    de6c:	3c00 4c43 2049 4544 5542 3e47 4e20 6d61     .<CLI DEBUG> Nam
    de7c:	2065 2020 2020 2020 2020 2020 2020 203d     e             = 
    de8c:	7325 0d00 0d0d 0d0d 000a 433c 494c 4420     %s........<CLI D
    de9c:	4245 4755 203e 6167 6e69 2041 2020 2020     EBUG> gainA     
    deac:	2020 2020 2020 3d20 2520 0064 433c 494c            = %d.<CLI
    debc:	4420 4245 4755 203e 6167 6e69 2042 2020      DEBUG> gainB   
    decc:	2020 2020 2020 2020 3d20 2520 0064 433c              = %d.<C
    dedc:	494c 4420 4245 4755 203e 6f4d 6564 2020     LI DEBUG> Mode  
    deec:	2020 2020 2020 2020 2020 3d20 2520 0073                = %s.
    defc:	433c 494c 4420 4245 4755 203e 6157 6574     <CLI DEBUG> Wate
    df0c:	3172 2020 2020 2020 2020 2020 3d20 2520     r1           = %
    df1c:	0064 433c 494c 4420 4245 4755 203e 6157     d.<CLI DEBUG> Wa
    df2c:	6574 3272 2020 2020 2020 2020 2020 3d20     ter2           =
    df3c:	2520 0064 433c 494c 4420 4245 4755 203e      %d.<CLI DEBUG> 
    df4c:	5648 2020 2020 2020 2020 2020 2020 2020     HV              
    df5c:	3d20 2520 0064 433c 494c 4420 4245 4755      = %d.<CLI DEBUG
    df6c:	203e 6554 706d 2020 2020 2020 2020 2020     > Temp          
    df7c:	2020 3d20 4520 5252 524f 3c00 4c43 2049        = ERROR.<CLI 
    df8c:	4544 5542 3e47 5420 6d65 2070 2020 2020     DEBUG> Temp     
    df9c:	2020 2020 2020 2020 203d 6425 0043 433c             = %dC.<C
    dfac:	494c 4420 4245 4755 203e 6554 706d 2020     LI DEBUG> Temp  
    dfbc:	2020 2020 2020 2020 2020 3d20 2d20 6425                = -%d
    dfcc:	0043 433c 494c 4420 4245 4755 203e 7548     C.<CLI DEBUG> Hu
    dfdc:	696d 6964 7974 2020 2020 2020 2020 3d20     midity         =
    dfec:	4520 5252 524f 3c00 4c43 2049 4544 5542      ERROR.<CLI DEBU
    dffc:	3e47 4820 6d75 6469 7469 2079 2020 2020     G> Humidity     
    e00c:	2020 2020 203d 6425 6325 3c00 4c43 2049         = %d%c.<CLI 
    e01c:	4544 5542 3e47 5420 6d61 6570 2072 2020     DEBUG> Tamper   
    e02c:	2020 2020 2020 2020 203d 7325 3c00 4c43             = %s.<CL
    e03c:	2049 4544 5542 3e47 5020 726f 3174 2020     I DEBUG> Port1  
    e04c:	2020 2020 2020 2020 2020 203d 7325 3c00               = %s.<
    e05c:	4c43 2049 4544 5542 3e47 5020 726f 3274     CLI DEBUG> Port2
    e06c:	2020 2020 2020 2020 2020 2020 203d 7325                 = %s
    e07c:	3c00 4c43 2049 4544 5542 3e47 5020 726f     .<CLI DEBUG> Por
    e08c:	3374 2020 2020 2020 2020 2020 2020 203d     t3            = 
    e09c:	7325 3c00 4c43 2049 4544 5542 3e47 4320     %s.<CLI DEBUG> C
    e0ac:	7261 4164 2020 2020 2020 2020 2020 2020     ardA            
    e0bc:	203d 7325 3c00 4c43 2049 4544 5542 3e47     = %s.<CLI DEBUG>
    e0cc:	4320 7261 4264 2020 2020 2020 2020 2020      CardB          
    e0dc:	2020 203d 7325 3c00 4c43 2049 4544 5542       = %s.<CLI DEBU
    e0ec:	3e47 5220 6e69 2067 6f54 6f70 6f6c 7967     G> Ring Topology
    e0fc:	2020 2020 203d 7325 3c00 4c43 2049 4544         = %s.<CLI DE
    e10c:	5542 3e47 4620 7269 776d 7261 2065 2020     BUG> Firmware   
    e11c:	2020 2020 2020 203d 6425 252e 0064 433c           = %d.%d.<C
    e12c:	494c 4420 4245 4755 203e 495b 2050 4353     LI DEBUG> [IP SC
    e13c:	4548 454d 2f20 4e20 5445 4f57 4b52 205d     HEME / NETWORK] 
    e14c:	6f63 6d6d 6e61 0d64 000a 433c 494c 4420     command...<CLI D
    e15c:	4245 4755 203e 5049 2020 2020 2020 2020     EBUG> IP        
    e16c:	2020 2020 2020 3d20 2520 2e64 6425 252e            = %d.%d.%
    e17c:	2e64 6425 0a0d 3c00 4c43 2049 4544 5542     d.%d...<CLI DEBU
    e18c:	3e47 4e20 7465 616d 6b73 2020 2020 2020     G> Netmask      
    e19c:	2020 2020 203d 6425 252e 2e64 6425 252e         = %d.%d.%d.%
    e1ac:	0d64 000a 433c 494c 4420 4245 4755 203e     d...<CLI DEBUG> 
    e1bc:	6147 6574 6177 2079 2020 2020 2020 2020     Gateway         
    e1cc:	3d20 2520 2e64 6425 252e 2e64 6425 0a0d      = %d.%d.%d.%d..
    e1dc:	3c00 4c43 2049 4544 5542 3e47 4d20 4341     .<CLI DEBUG> MAC
    e1ec:	2020 2020 2020 2020 2020 2020 2020 203d                   = 
    e1fc:	7825 253a 3a78 7825 253a 3a78 7825 253a     %x:%x:%x:%x:%x:%
    e20c:	0d78 000a 433c 494c 4420 4245 4755 203e     x...<CLI DEBUG> 
    e21c:	535b 4550 4445 4d20 4941 4c4e 4f4f 5d50     [SPEED MAINLOOP]
    e22c:	6320 6d6f 616d 646e 0a0d 3c00 4c43 2049      command...<CLI 
    e23c:	4544 5542 3e47 4d20 6961 2d6e 6f6c 706f     DEBUG> Main-loop
    e24c:	532f 6d61 6c70 6e69 2067 203d 6425 0a0d     /Sampling = %d..
    e25c:	3c00 4c43 2049 4544 5542 3e47 5b20 4552     .<CLI DEBUG> [RE
    e26c:	4441 4d20 4349 4552 204c 4552 4947 5453     AD MICREL REGIST
    e27c:	5245 5d53 6320 6d6f 616d 646e 4600 4d41     ERS] command.FAM
    e28c:	4c49 5f59 4449 3d20 2520 0d78 000a 5453     ILY_ID = %x...ST
    e29c:	5241 2054 203d 7825 0a0d 4700 4f4c 4142     ART = %x...GLOBA
    e2ac:	304c 3d20 2520 0d78 000a 4c47 424f 4c41     L0 = %x...GLOBAL
    e2bc:	2031 203d 7825 0a0d 4700 4f4c 4142 324c     1 = %x...GLOBAL2
    e2cc:	3d20 2520 0d78 000a 4c47 424f 4c41 2033      = %x...GLOBAL3 
    e2dc:	203d 7825 0a0d 4700 4f4c 4142 344c 3d20     = %x...GLOBAL4 =
    e2ec:	2520 0d78 000a 4c47 424f 4c41 2035 203d      %x...GLOBAL5 = 
    e2fc:	7825 0a0d 4700 4f4c 4142 364c 3d20 2520     %x...GLOBAL6 = %
    e30c:	0d78 000a 4c47 424f 4c41 2039 203d 7825     x...GLOBAL9 = %x
    e31c:	0a0d 4700 4f4c 4142 314c 2030 203d 7825     ...GLOBAL10 = %x
    e32c:	0a0d 5000 4d44 3143 3d20 2520 0d78 000a     ...PDMC1 = %x...
    e33c:	4450 434d 2032 203d 7825 0a0d 5000 524f     PDMC2 = %x...POR
    e34c:	3154 4f43 544e 4f52 304c 3d20 2520 0d78     T1CONTROL0 = %x.
    e35c:	000a 4f50 5452 4332 4e4f 5254 4c4f 2030     ..PORT2CONTROL0 
    e36c:	203d 7825 0a0d 5000 524f 3354 4f43 544e     = %x...PORT3CONT
    e37c:	4f52 304c 3d20 2520 0d78 000a 4f50 5452     ROL0 = %x...PORT
    e38c:	4334 4e4f 5254 4c4f 2030 203d 7825 0a0d     4CONTROL0 = %x..
    e39c:	5000 524f 3154 4f43 544e 4f52 314c 3d20     .PORT1CONTROL1 =
    e3ac:	2520 0d78 000a 4f50 5452 4332 4e4f 5254      %x...PORT2CONTR
    e3bc:	4c4f 2031 203d 7825 0a0d 5000 524f 3354     OL1 = %x...PORT3
    e3cc:	4f43 544e 4f52 314c 3d20 2520 0d78 000a     CONTROL1 = %x...
    e3dc:	4f50 5452 4334 4e4f 5254 4c4f 2031 203d     PORT4CONTROL1 = 
    e3ec:	7825 0a0d 5000 524f 3154 4f43 544e 4f52     %x...PORT1CONTRO
    e3fc:	324c 3d20 2520 0d78 000a 4f50 5452 4332     L2 = %x...PORT2C
    e40c:	4e4f 5254 4c4f 2032 203d 7825 0a0d 5000     ONTROL2 = %x...P
    e41c:	524f 3354 4f43 544e 4f52 324c 3d20 2520     ORT3CONTROL2 = %
    e42c:	0d78 000a 4f50 5452 4334 4e4f 5254 4c4f     x...PORT4CONTROL
    e43c:	2032 203d 7825 0a0d 5000 524f 3154 4f43     2 = %x...PORT1CO
    e44c:	544e 4f52 334c 3d20 2520 0d78 000a 4f50     NTROL3 = %x...PO
    e45c:	5452 4332 4e4f 5254 4c4f 2033 203d 7825     RT2CONTROL3 = %x
    e46c:	0a0d 5000 524f 3354 4f43 544e 4f52 334c     ...PORT3CONTROL3
    e47c:	3d20 2520 0d78 000a 4f50 5452 4334 4e4f      = %x...PORT4CON
    e48c:	5254 4c4f 2033 203d 7825 0a0d 5000 524f     TROL3 = %x...POR
    e49c:	3154 4f43 544e 4f52 344c 3d20 2520 0d78     T1CONTROL4 = %x.
    e4ac:	000a 4f50 5452 4332 4e4f 5254 4c4f 2034     ..PORT2CONTROL4 
    e4bc:	203d 7825 0a0d 5000 524f 3354 4f43 544e     = %x...PORT3CONT
    e4cc:	4f52 344c 3d20 2520 0d78 000a 4f50 5452     ROL4 = %x...PORT
    e4dc:	4334 4e4f 5254 4c4f 2034 203d 7825 0a0d     4CONTROL4 = %x..
    e4ec:	5000 524f 3154 4f43 544e 4f52 354c 3d20     .PORT1CONTROL5 =
    e4fc:	2520 0d78 000a 4f50 5452 4332 4e4f 5254      %x...PORT2CONTR
    e50c:	4c4f 2035 203d 7825 0a0d 5000 524f 3354     OL5 = %x...PORT3
    e51c:	4f43 544e 4f52 354c 3d20 2520 0d78 000a     CONTROL5 = %x...
    e52c:	4f50 5452 4334 4e4f 5254 4c4f 2035 203d     PORT4CONTROL5 = 
    e53c:	7825 0a0d 5000 524f 3454 4f43 544e 4f52     %x...PORT4CONTRO
    e54c:	364c 3d20 2520 0d78 000a 4f50 5452 4331     L6 = %x...PORT1C
    e55c:	4e4f 5254 4c4f 2037 203d 7825 0a0d 5000     ONTROL7 = %x...P
    e56c:	524f 3254 4f43 544e 4f52 374c 3d20 2520     ORT2CONTROL7 = %
    e57c:	0d78 000a 4f50 5452 4333 4e4f 5254 4c4f     x...PORT3CONTROL
    e58c:	2037 203d 7825 0a0d 5000 524f 3154 4f43     7 = %x...PORT1CO
    e59c:	544e 4f52 384c 3d20 2520 0d78 000a 4f50     NTROL8 = %x...PO
    e5ac:	5452 4332 4e4f 5254 4c4f 2038 203d 7825     RT2CONTROL8 = %x
    e5bc:	0a0d 5000 524f 3354 4f43 544e 4f52 384c     ...PORT3CONTROL8
    e5cc:	3d20 2520 0d78 000a 4f50 5452 5331 4154      = %x...PORT1STA
    e5dc:	5554 3053 3d20 2520 0d78 000a 4f50 5452     TUS0 = %x...PORT
    e5ec:	5332 4154 5554 3053 3d20 2520 0d78 000a     2STATUS0 = %x...
    e5fc:	4f50 5452 5333 4154 5554 3053 3d20 2520     PORT3STATUS0 = %
    e60c:	0d78 000a 4f50 5452 5331 4154 5554 3153     x...PORT1STATUS1
    e61c:	3d20 2520 0d78 000a 4f50 5452 5332 4154      = %x...PORT2STA
    e62c:	5554 3153 3d20 2520 0d78 000a 4f50 5452     TUS1 = %x...PORT
    e63c:	5333 4154 5554 3153 3d20 2520 0d78 000a     3STATUS1 = %x...
    e64c:	4f50 5452 5331 4154 5554 3253 3d20 2520     PORT1STATUS2 = %
    e65c:	0d78 000a 4f50 5452 5332 4154 5554 3253     x...PORT2STATUS2
    e66c:	3d20 2520 0d78 000a 4f50 5452 5333 4154      = %x...PORT3STA
    e67c:	5554 3253 3d20 2520 0d78 000a 4f50 5452     TUS2 = %x...PORT
    e68c:	5331 4154 5554 3353 3d20 2520 0d78 000a     1STATUS3 = %x...
    e69c:	4f50 5452 5332 4154 5554 3353 3d20 2520     PORT2STATUS3 = %
    e6ac:	0d78 000a 4f50 5452 5333 4154 5554 3353     x...PORT3STATUS3
    e6bc:	3d20 2520 0d78 000a 4f50 5452 4c31 4e49      = %x...PORT1LIN
    e6cc:	4d4b 2044 203d 7825 0a0d 5000 524f 3254     KMD = %x...PORT2
    e6dc:	494c 4b4e 444d 3d20 2520 0d78 000a 4f50     LINKMD = %x...PO
    e6ec:	5452 4c33 4e49 4d4b 2044 203d 7825 0a0d     RT3LINKMD = %x..
    e6fc:	5000 524f 3154 4f43 544e 4f52 394c 3d20     .PORT1CONTROL9 =
    e70c:	2520 0d78 000a 4f50 5452 4332 4e4f 5254      %x...PORT2CONTR
    e71c:	4c4f 2039 203d 7825 0a0d 5000 524f 3354     OL9 = %x...PORT3
    e72c:	4f43 544e 4f52 394c 3d20 2520 0d78 000a     CONTROL9 = %x...
    e73c:	4f50 5452 4331 4e4f 5254 4c4f 3031 3d20     PORT1CONTROL10 =
    e74c:	2520 0d78 000a 4f50 5452 4332 4e4f 5254      %x...PORT2CONTR
    e75c:	4c4f 3031 3d20 2520 0d78 000a 4f50 5452     OL10 = %x...PORT
    e76c:	4333 4e4f 5254 4c4f 3031 3d20 2520 0d78     3CONTROL10 = %x.
    e77c:	000a 4f50 5452 4332 4e4f 5254 4c4f 3032     ..PORT2CONTROL20
    e78c:	3d20 2520 0d78 000a 4f50 5452 4331 4e4f      = %x...PORT1CON
    e79c:	5254 4c4f 3231 3d20 2520 0d78 000a 4f50     TROL12 = %x...PO
    e7ac:	5452 4332 4e4f 5254 4c4f 3231 3d20 2520     RT2CONTROL12 = %
    e7bc:	0d78 000a 4f50 5452 4333 4e4f 5254 4c4f     x...PORT3CONTROL
    e7cc:	3231 3d20 2520 0d78 000a 4f50 5452 4334     12 = %x...PORT4C
    e7dc:	4e4f 5254 4c4f 3231 3d20 2520 0d78 000a     ONTROL12 = %x...
    e7ec:	4f50 5452 4331 4e4f 5254 4c4f 3331 3d20     PORT1CONTROL13 =
    e7fc:	2520 0d78 000a 4f50 5452 4332 4e4f 5254      %x...PORT2CONTR
    e80c:	4c4f 3331 3d20 2520 0d78 000a 4f50 5452     OL13 = %x...PORT
    e81c:	4333 4e4f 5254 4c4f 3331 3d20 2520 0d78     3CONTROL13 = %x.
    e82c:	000a 4f50 5452 4334 4e4f 5254 4c4f 3331     ..PORT4CONTROL13
    e83c:	3d20 2520 0d78 000a 4f50 5452 4331 4e4f      = %x...PORT1CON
    e84c:	5254 4c4f 3431 3d20 2520 0d78 000a 4f50     TROL14 = %x...PO
    e85c:	5452 4332 4e4f 5254 4c4f 3431 3d20 2520     RT2CONTROL14 = %
    e86c:	0d78 000a 4f50 5452 4333 4e4f 5254 4c4f     x...PORT3CONTROL
    e87c:	3431 3d20 2520 0d78 000a 4f50 5452 4334     14 = %x...PORT4C
    e88c:	4e4f 5254 4c4f 3431 3d20 2520 0d78 000a     ONTROL14 = %x...
    e89c:	4f50 5452 4331 4e4f 5254 4c4f 3531 3d20     PORT1CONTROL15 =
    e8ac:	2520 0d78 000a 4f50 5452 4332 4e4f 5254      %x...PORT2CONTR
    e8bc:	4c4f 3531 3d20 2520 0d78 000a 4f50 5452     OL15 = %x...PORT
    e8cc:	4333 4e4f 5254 4c4f 3531 3d20 2520 0d78     3CONTROL15 = %x.
    e8dc:	000a 4f50 5452 4334 4e4f 5254 4c4f 3531     ..PORT4CONTROL15
    e8ec:	3d20 2520 0d78 000a 4f50 5452 4331 4e4f      = %x...PORT1CON
    e8fc:	5254 4c4f 3631 3d20 2520 0d78 000a 4f50     TROL16 = %x...PO
    e90c:	5452 4332 4e4f 5254 4c4f 3631 3d20 2520     RT2CONTROL16 = %
    e91c:	0d78 000a 4f50 5452 4333 4e4f 5254 4c4f     x...PORT3CONTROL
    e92c:	3631 3d20 2520 0d78 000a 4f50 5452 4334     16 = %x...PORT4C
    e93c:	4e4f 5254 4c4f 3631 3d20 2520 0d78 000a     ONTROL16 = %x...
    e94c:	4f50 5452 4331 4e4f 5254 4c4f 3731 3d20     PORT1CONTROL17 =
    e95c:	2520 0d78 000a 4f50 5452 4332 4e4f 5254      %x...PORT2CONTR
    e96c:	4c4f 3731 3d20 2520 0d78 000a 4f50 5452     OL17 = %x...PORT
    e97c:	4333 4e4f 5254 4c4f 3731 3d20 2520 0d78     3CONTROL17 = %x.
    e98c:	000a 4f50 5452 4334 4e4f 5254 4c4f 3731     ..PORT4CONTROL17
    e99c:	3d20 2520 0d78 000a 433c 494c 4420 4245      = %x...<CLI DEB
    e9ac:	4755 203e 6e55 6e6b 776f 206e 6f63 6d6d     UG> Unknown comm
    e9bc:	6e61 0d64 0d0a 480a 6c65 2070 6353 6572     and....Help Scre
    e9cc:	6e65 0d3a 0d0a 000a 2052 2020 2020 2020     en:.....R       
    e9dc:	2020 525b 4245 4f4f 5d54 6320 6d6f 616d       [REBOOT] comma
    e9ec:	646e 0a0d 4400 2020 2020 2020 2020 5b20     nd...D         [
    e9fc:	4f43 464e 4749 5255 5441 4f49 204e 4544     CONFIGURATION DE
    ea0c:	4146 4c55 5d54 6320 6d6f 616d 646e 0a0d     FAULT] command..
    ea1c:	5800 2020 2020 2020 2020 5b20 4449 5220     .X         [ID R
    ea2c:	5345 5445 205d 6f63 6d6d 6e61 0d64 000a     ESET] command...
    ea3c:	2042 2020 2020 2020 2020 425b 5341 5345     B         [BASES
    ea4c:	4154 4954 4e4f 205d 6f63 6d6d 6e61 0d64     TATION] command.
    ea5c:	000a 2050 2020 2020 2020 2020 505b 5341     ..P         [PAS
    ea6c:	2053 4854 4f52 4755 5d48 6320 6d6f 616d     S THROUGH] comma
    ea7c:	646e 0a0d 4c00 2020 2020 2020 2020 5b20     nd...L         [
    ea8c:	494c 4556 4220 414f 4452 5020 4952 544e     LIVE BOARD PRINT
    ea9c:	205d 6f63 6d6d 6e61 0d64 000a 204d 2020     ] command...M   
    eaac:	2020 2020 2020 525b 4145 2044 494d 5243           [READ MICR
    eabc:	4c45 5220 4745 5349 4554 5352 205d 6f63     EL REGISTERS] co
    eacc:	6d6d 6e61 0d64 000a 2049 2020 2020 2020     mmand...I       
    eadc:	2020 495b 2050 4353 4548 454d 2f20 4e20       [IP SCHEME / N
    eaec:	5445 4f57 4b52 205d 6f63 6d6d 6e61 0d64     ETWORK] command.
    eafc:	000a 2053 2020 2020 2020 2020 535b 4550     ..S         [SPE
    eb0c:	4445 4d20 4941 4c4e 4f4f 5d50 6320 6d6f     ED MAINLOOP] com
    eb1c:	616d 646e 0a0d 0a0d 0d00 0d0a 0d0a 2d0a     mand...........-
    eb2c:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
    eb3c:	2d2d 2d2d 0a0d 4f42 544f 552d 0d50 2d0a     ----..BOOT-UP..-
    eb4c:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
    eb5c:	2d2d 2d2d 0a0d 0a0d 2a00 2a2a 2a2a 2a2a     ----.....*******
    eb6c:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
    eb7c:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
    eb8c:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
    eb9c:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
    ebac:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
    ebbc:	2a2a 2a2a 0d2a 000a 202a 4854 2045 554d     *****...* THE MU
    ebcc:	544c 2d49 4553 534e 2045 4544 4956 4543     LTI-SENSE DEVICE
    ebdc:	5b20 4449 205d 4148 2053 4f4e 2054 4542      [ID] HAS NOT BE
    ebec:	4e45 5320 5445 202e 4854 5349 4420 4645     EN SET. THIS DEF
    ebfc:	4349 2045 4957 4c4c 4e20 544f 4620 4e55     ICE WILL NOT FUN
    ec0c:	5443 4f49 204e 524f 5220 4e55 4120 2053     CTION OR RUN AS 
    ec1c:	2020 2a20 0a0d 2a00 4e20 524f 414d 204c        *...* NORMAL 
    ec2c:	4e55 4954 204c 4854 2045 495b 5d44 4e20     UNTIL THE [ID] N
    ec3c:	4d55 4542 2052 4148 2053 4542 4e45 4520     UMBER HAS BEEN E
    ec4c:	544e 5245 4445 4220 2059 4854 5349 5420     NTERED BY THIS T
    ec5c:	5245 494d 414e 204c 4146 4943 494c 5954     ERMINAL FACILITY
    ec6c:	202e 2020 2020 2020 2020 2020 2020 2020     .               
    ec7c:	2020 0d2a 000a 202a 202d 202d 202d 202d       *...* - - - - 
    ec8c:	202d 202d 202d 202d 202d 202d 202d 202d     - - - - - - - - 
    ec9c:	202d 202d 202d 202d 202d 202d 202d 202d     - - - - - - - - 
    ecac:	202d 202d 202d 202d 202d 202d 202d 202d     - - - - - - - - 
    ecbc:	202d 202d 202d 202d 202d 202d 202d 202d     - - - - - - - - 
    eccc:	202d 202d 202d 202d 202d 202d 202d 202d     - - - - - - - - 
    ecdc:	2a20 0a0d 2a00 5020 454c 5341 2045 4e45      *...* PLEASE EN
    ecec:	4554 2052 4854 2045 3233 422d 5449 4420     TER THE 32-BIT D
    ecfc:	5645 4349 2045 495b 5d44 4220 4c45 574f     EVICE [ID] BELOW
    ed0c:	2020 2020 2020 2020 2020 2020 2020 2020                     
    ed1c:	2020 2020 2020 2020 2020 2020 2020 2020                     
    ed2c:	2020 2020 2020 2020 2020 2020 2020 2020                     
    ed3c:	0d2a 000a 754d 746c 5369 6e65 6573 5b20     *...MultiSense [
    ed4c:	6f62 746f 752d 2070 2026 6e69 7469 6320     boot-up & init c
    ed5c:	6d6f 6c70 7465 6465 4920 2044 203d 6425     ompleted ID = %d
    ed6c:	0d5d 000a 202d 202d 202d 202d 202d 202d     ]...- - - - - - 
    ed7c:	202d 202d 202d 202d 202d 202d 202d 202d     - - - - - - - - 
    ed8c:	202d 202d 202d 202d 202d 202d 202d 202d     - - - - - - - - 
    ed9c:	202d 202d 202d 202d 202d 202d 202d 202d     - - - - - - - - 
    edac:	202d 202d 202d 202d 202d 202d 202d 202d     - - - - - - - - 
    edbc:	202d 202d 202d 202d 202d 202d 202d 202d     - - - - - - - - 
    edcc:	202d 202d 202d 202d 202d 202d 202d 202d     - - - - - - - - 
    eddc:	202d 202d 202d 202d 0d2d 000a 0a0d 6e45     - - - - -.....En
    edec:	6574 2072 656e 2077 495b 5d44 6e20 776f     ter new [ID] now
    edfc:	203a 4900 2044 6e65 6574 6572 3a64 2520     : .ID entered: %
    ee0c:	0d73 000a 0a0d 7349 7420 6968 2073 6f63     s.....Is this co
    ee1c:	7272 6365 2074 2f59 3f4e 0a0d 2500 0075     rrect Y/N?...%u.
    ee2c:	0a0d 5245 4f52 2052 4449 6320 6e61 6f6e     ..ERROR ID canno
    ee3c:	2074 6562 3c20 455a 4f52 213e 2121 2121     t be <ZERO>!!!!!
    ee4c:	0a0d 0d00 0d0a 0d0d 6552 6f62 746f 6e69     ........Rebootin
    ee5c:	2e67 2e2e 7028 656c 7361 2065 6177 7469     g...(please wait
    ee6c:	0d29 0d0a 000a 2e2e 702f 7265 6973 7473     )......./persist
    ee7c:	6e65 5f74 7473 726f 6761 2f65 766e 695f     ent_storage/nv_i
    ee8c:	746e 7265 616e 5f6c 6c66 7361 5f68 6c75     nternal_flash_ul
    ee9c:	7274 2e61 0063 5453 524f 4741 0045 2e2e     tra.c.STORAGE...
    eeac:	702f 7265 6973 7473 6e65 5f74 7473 726f     /persistent_stor
    eebc:	6761 2f65 766e 735f 6f74 6172 6567 632e     age/nv_storage.c
    eecc:	4500 4854 5245 454e 3a54 5320 7465 6120     .ETHERNET: Set a
    eedc:	2073 2061 6162 6573 732d 6174 6974 6e6f     s a base-station
    eeec:	7420 206f 616d 616e 6567 4520 6874 7265      to manage Ether
    eefc:	656e 2074 6f74 6f70 6f6c 7967 2e2e 0d2e     net topology....
    ef0c:	000a 5245 4f52 2052 6573 7474 6e69 2067     ..ERROR setting 
    ef1c:	6874 2065 5453 5441 4349 4d20 4341 7420     the STATIC MAC t
    ef2c:	6261 656c 7720 7469 2068 5042 5544 6620     able with BPDU f
    ef3c:	726f 4220 7361 2d65 7473 7461 6f69 2e6e     or Base-station.
    ef4c:	2e2e 0a0d 4500 4854 5245 454e 3a54 6e20     .....ETHERNET: n
    ef5c:	726f 616d 206c 6f6e 656e 6d2d 6e61 6761     ormal none-manag
    ef6c:	6465 7020 7361 2d73 6874 6f72 6775 2068     ed pass-through 
    ef7c:	6f6e 6564 2e2e 0d2e 000a 5245 4f52 2052     node......ERROR 
    ef8c:	6573 7474 6e69 2067 6874 2065 5453 5441     setting the STAT
    ef9c:	4349 4d20 4341 7420 6261 656c 7720 7469     IC MAC table wit
    efac:	2068 5042 5544 6620 726f 7020 7361 2d73     h BPDU for pass-
    efbc:	6874 6f72 6775 2068 6f6e 6564 2e2e 0d2e     through node....
    efcc:	000a 5445 4548 4e52 5445 203a 6f43 706d     ..ETHERNET: Comp
    efdc:	656c 6574 2064 4952 474e 6d20 6e61 6761     leted RING manag
    efec:	6d65 6e65 2074 6e69 7469 2e2e 0d2e 000a     ement init......
    effc:	5445 4548 4e52 5445 203a 6553 746e 6620     ETHERNET: Sent f
    f00c:	7269 7473 4220 4450 2e55 2e2e 0a0d 4500     irst BPDU......E
    f01c:	4854 5245 454e 3a54 2820 7321 6f74 6d72     THERNET: (!storm
    f02c:	735f 6174 6574 2029 5245 4f52 0d52 000a     _state) ERROR...
    f03c:	5445 4548 4e52 5445 203a 2128 6972 676e     ETHERNET: (!ring
    f04c:	7262 6165 296b 4520 5252 524f 0a0d 4500     break) ERROR...E
    f05c:	4854 5245 454e 3a54 5b20 7574 6e72 6e69     THERNET: [turnin
    f06c:	2067 7445 6568 6e72 7465 3c20 3e42 4f20     g Ethernet <B> O
    f07c:	204e 202d 4952 474e 4220 4f52 454b 5d4e     N - RING BROKEN]
    f08c:	2e2e 0d2e 000a 5445 4548 4e52 5445 203a     ......ETHERNET: 
    f09c:	745b 7275 696e 676e 4520 6874 7265 656e     [turning Etherne
    f0ac:	2074 423c 203e 464f 2046 202d 4952 474e     t <B> OFF - RING
    f0bc:	4820 4145 454c 5d44 2e2e 0d2e 000a 5445      HEALED]......ET
    f0cc:	4548 4e52 5445 203a 735b 6f74 6d72 7320     HERNET: [storm s
    f0dc:	6275 6973 6564 5d64 2e2e 0d2e 000a 5445     ubsided]......ET
    f0ec:	4548 4e52 5445 203a 7574 6e72 6e69 2067     HERNET: turning 
    f0fc:	7445 6568 6e72 7465 3c20 3e42 4f20 4646     Ethernet <B> OFF
    f10c:	6220 6365 7561 6573 6f20 2066 7473 726f      because of stor
    f11c:	206d 202d 4952 474e 4820 4145 494c 474e     m - RING HEALING
    f12c:	5020 534f 4953 4942 494c 5954 2e5d 2e2e      POSSIBILITY]...
    f13c:	0a0d 7500 7069 695f 6370 6b68 7573 3a6d     ...uip_ipchksum:
    f14c:	7320 6d75 3020 2578 3430 0a78 6900 3a70      sum 0x%04x..ip:
    f15c:	6920 766e 6c61 6469 7620 7265 6973 6e6f      invalid version
    f16c:	6f20 2072 6568 6461 7265 6c20 6e65 7467      or header lengt
    f17c:	2e68 6900 3a70 7020 6361 656b 2074 6873     h..ip: packet sh
    f18c:	726f 6574 2072 6874 6e61 7220 7065 726f     orter than repor
    f19c:	6574 2064 6e69 4920 2050 6568 6461 7265     ted in IP header
    f1ac:	002e 7069 203a 7266 6761 656d 746e 6420     ..ip: fragment d
    f1bc:	6f72 7070 6465 002e 7069 203a 6162 2064     ropped..ip: bad 
    f1cc:	6863 6365 736b 6d75 002e 7069 203a 656e     checksum..ip: ne
    f1dc:	7469 6568 2072 6374 2070 6f6e 2072 6369     ither tcp nor ic
    f1ec:	706d 002e 6369 706d 203a 6f6e 2074 6369     mp..icmp: not ic
    f1fc:	706d 6520 6863 2e6f 7500 7064 203a 6162     mp echo..udp: ba
    f20c:	2064 6863 6365 736b 6d75 002e 6475 3a70     d checksum..udp:
    f21c:	6e20 206f 616d 6374 6968 676e 6320 6e6f      no matching con
    f22c:	656e 7463 6f69 206e 6f66 6e75 0064 6374     nection found.tc
    f23c:	3a70 6220 6461 6320 6568 6b63 7573 2e6d     p: bad checksum.
    f24c:	7400 7063 203a 6f66 6e75 2064 6f6e 7520     .tcp: found no u
    f25c:	756e 6573 2064 6f63 6e6e 6365 6974 6e6f     nused connection
    f26c:	2e73 7400 7063 203a 6f67 2074 6572 6573     s..tcp: got rese
    f27c:	2c74 6120 6f62 7472 6e69 2067 6f63 6e6e     t, aborting conn
    f28c:	6365 6974 6e6f 002e 6975 2070 7069 735f     ection..uip ip_s
    f29c:	6e65 5f64 6f6e 656c 3a6e 6320 6b68 6365     end_nolen: chkec
    f2ac:	6d75 3020 2578 3430 0a78 5300 6e65 6964     um 0x%04x..Sendi
    f2bc:	676e 7020 6361 656b 2074 6977 6874 6c20     ng packet with l
    f2cc:	6e65 7467 2068 6425 2820 6425 0a29 ff00          ength %d (%d)..

0000f2db <broadcast_ethaddr>:
    f2db:	ffff ffff ffff 2e2e 752f 6273 642f 7665     ......../usb/dev
    f2eb:	6369 2f65 7375 6462 2e63 0063 754d 746c     ice/usbdc.c.Mult
    f2fb:	5369 6e65 6573 6120 7070 696c 6163 6974     iSense applicati
    f30b:	6e6f 615f 7070 6163 6c6c 2928 0a0d 4d00     on_appcall()...M
    f31b:	6c75 6974 6553 736e 2065 7061 6c70 6369     ultiSense applic
    f32b:	7461 6f69 5f6e 6e69 7469 2928 0a0d 4d00     ation_init()...M
    f33b:	6c75 6974 6553 736e 2065 6374 6970 5f70     ultiSense tcpip_
    f34b:	756f 7074 7475 2928 0a0d 4d00 6c75 6974     output()...Multi
    f35b:	6553 736e 2065 4975 2050 6f6c 2067 2d2d     Sense uIP log --
    f36b:	203e 255b 5d73 0a0d 0000                         > [%s]...

0000f374 <__sf_fake_stderr>:
	...

0000f394 <__sf_fake_stdin>:
	...

0000f3b4 <__sf_fake_stdout>:
	...
    f3d4:	6c68 004c f3f6 0000 f3f9 0000 f3fc 0000     hlL.............
    f3e4:	2d41 6146 662d 3938 3130 3332 3534 3736     A-Fa-f8901234567
    f3f4:	005d 2d2b 3000 0030 5878 5000 534f 5849     ].+-.00.xX.POSIX
	...

0000f405 <_ctype_>:
    f405:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
    f415:	2020 2020 2020 2020 2020 2020 2020 2020                     
    f425:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
    f435:	0410 0404 0404 0404 0404 1004 1010 1010     ................
    f445:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
    f455:	0101 0101 0101 0101 0101 0101 1010 1010     ................
    f465:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
    f475:	0202 0202 0202 0202 0202 0202 1010 1010     ................
    f485:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0000f508 <_init>:
    f508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f50a:	bf00      	nop
    f50c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    f50e:	bc08      	pop	{r3}
    f510:	469e      	mov	lr, r3
    f512:	4770      	bx	lr

0000f514 <__init_array_start>:
    f514:	00000289 	.word	0x00000289

0000f518 <_fini>:
    f518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f51a:	bf00      	nop
    f51c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    f51e:	bc08      	pop	{r3}
    f520:	469e      	mov	lr, r3
    f522:	4770      	bx	lr

0000f524 <__fini_array_start>:
    f524:	00000265 	.word	0x00000265
