
MultiSense.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000f548  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000002b0  20000000  0000f548  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  000202b0  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  000202b0  2**0
                  CONTENTS
  4 .bss          0000936c  200002c0  0000f820  000202c0  2**5
                  ALLOC
  5 .stack        0000c004  2000962c  00018b8c  000202c0  2**0
                  ALLOC
  6 .ARM.attributes 0000002a  00000000  00000000  000202b0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000202da  2**0
                  CONTENTS, READONLY
  8 .debug_info   0007ac1a  00000000  00000000  00020333  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000a5c7  00000000  00000000  0009af4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00024f88  00000000  00000000  000a5514  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001cb0  00000000  00000000  000ca49c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003ac8  00000000  00000000  000cc14c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00042079  00000000  00000000  000cfc14  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00033b67  00000000  00000000  00111c8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0011a4a1  00000000  00000000  001457f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005b70  00000000  00000000  0025fc98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	30 56 01 20 6d 0a 00 00 69 0a 00 00 69 0a 00 00     0V. m...i...i...
      10:	69 0a 00 00 69 0a 00 00 69 0a 00 00 00 00 00 00     i...i...i.......
	...
      2c:	69 0a 00 00 69 0a 00 00 00 00 00 00 69 0a 00 00     i...i.......i...
      3c:	69 0a 00 00 69 0a 00 00 69 0a 00 00 69 0a 00 00     i...i...i...i...
      4c:	69 0a 00 00 69 0a 00 00 69 0a 00 00 69 0a 00 00     i...i...i...i...
      5c:	69 0a 00 00 69 0a 00 00 69 0a 00 00 69 0a 00 00     i...i...i...i...
      6c:	69 0a 00 00 69 0a 00 00 69 0a 00 00 69 0a 00 00     i...i...i...i...
      7c:	69 0a 00 00 69 0a 00 00 69 0a 00 00 69 0a 00 00     i...i...i...i...
      8c:	69 0a 00 00 69 0a 00 00 69 0a 00 00 69 0a 00 00     i...i...i...i...
      9c:	69 0a 00 00 69 0a 00 00 69 0a 00 00 69 0a 00 00     i...i...i...i...
      ac:	69 0a 00 00 69 0a 00 00 e5 2c 00 00 b9 2c 00 00     i...i....,...,..
      bc:	b1 25 00 00 b9 25 00 00 c1 25 00 00 c9 25 00 00     .%...%...%...%..
      cc:	d1 25 00 00 69 0a 00 00 69 0a 00 00 69 0a 00 00     .%..i...i...i...
      dc:	69 0a 00 00 69 0a 00 00 69 0a 00 00 69 0a 00 00     i...i...i...i...
      ec:	69 0a 00 00 00 00 00 00 ad 2d 00 00 09 31 00 00     i........-...1..
      fc:	01 31 00 00 f9 30 00 00 e9 30 00 00 69 0a 00 00     .1...0...0..i...
     10c:	69 0a 00 00 69 0a 00 00 69 0a 00 00 69 0a 00 00     i...i...i...i...
     11c:	69 0a 00 00 69 0a 00 00 69 0a 00 00 69 0a 00 00     i...i...i...i...
     12c:	69 0a 00 00 69 0a 00 00 69 0a 00 00 69 0a 00 00     i...i...i...i...
     13c:	69 0a 00 00 69 0a 00 00 69 0a 00 00 31 31 00 00     i...i...i...11..
     14c:	29 31 00 00 21 31 00 00 11 31 00 00 69 0a 00 00     )1..!1...1..i...
     15c:	69 0a 00 00 69 0a 00 00 69 0a 00 00 69 0a 00 00     i...i...i...i...
     16c:	69 0a 00 00 69 0a 00 00 69 0a 00 00 00 00 00 00     i...i...i.......
     17c:	00 00 00 00 c5 41 00 00 cd 41 00 00 d5 41 00 00     .....A...A...A..
     18c:	dd 41 00 00 05 26 00 00 69 0a 00 00 69 0a 00 00     .A...&..i...i...
     19c:	69 0a 00 00 69 0a 00 00 69 0a 00 00 69 0a 00 00     i...i...i...i...
     1ac:	69 0a 00 00 69 0a 00 00 69 0a 00 00 69 0a 00 00     i...i...i...i...
     1bc:	69 0a 00 00 69 0a 00 00 69 0a 00 00 69 0a 00 00     i...i...i...i...
     1cc:	69 0a 00 00 69 0a 00 00 69 0a 00 00 69 0a 00 00     i...i...i...i...
     1dc:	69 0a 00 00 69 0a 00 00 69 0a 00 00 69 0a 00 00     i...i...i...i...
     1ec:	5d 33 00 00 69 0a 00 00 69 0a 00 00 69 0a 00 00     ]3..i...i...i...
     1fc:	69 0a 00 00 69 0a 00 00 69 0a 00 00 69 0a 00 00     i...i...i...i...
     20c:	69 0a 00 00 69 0a 00 00 69 0a 00 00 69 0a 00 00     i...i...i...i...
     21c:	69 0a 00 00 69 0a 00 00 69 0a 00 00 69 0a 00 00     i...i...i...i...
     22c:	69 0a 00 00 69 0a 00 00 69 0a 00 00 69 0a 00 00     i...i...i...i...
     23c:	69 0a 00 00 69 0a 00 00 69 0a 00 00 69 0a 00 00     i...i...i...i...
     24c:	69 0a 00 00 69 0a 00 00 69 0a 00 00 69 0a 00 00     i...i...i...i...
     25c:	69 0a 00 00 69 0a 00 00                             i...i...

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	200002c0 	.word	0x200002c0
     280:	00000000 	.word	0x00000000
     284:	0000f548 	.word	0x0000f548

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0000f548 	.word	0x0000f548
     2c4:	200002c4 	.word	0x200002c4
     2c8:	0000f548 	.word	0x0000f548
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b510      	push	{r4, lr}
	system_init();
     2d2:	4b04      	ldr	r3, [pc, #16]	; (2e4 <atmel_start_init+0x14>)
     2d4:	4798      	blx	r3
	usb_init();
     2d6:	4b04      	ldr	r3, [pc, #16]	; (2e8 <atmel_start_init+0x18>)
     2d8:	4798      	blx	r3
	persistent_storage_init();
     2da:	4b04      	ldr	r3, [pc, #16]	; (2ec <atmel_start_init+0x1c>)
}
     2dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	persistent_storage_init();
     2e0:	4718      	bx	r3
     2e2:	bf00      	nop
     2e4:	00000fa1 	.word	0x00000fa1
     2e8:	0000b121 	.word	0x0000b121
     2ec:	00009235 	.word	0x00009235

000002f0 <convert>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: Function to format [vargs]
// Returns:     formatted string ptr
// *****************************************************************************************************************************************************************
static char *convert(unsigned int num, int base)
{
     2f0:	4603      	mov	r3, r0
	static char		Representation[]= "0123456789ABCDEF";
	static char		buffer[50];
	char		   *ptr;
	
	ptr = &buffer[49];
	*ptr = '\0';
     2f2:	4808      	ldr	r0, [pc, #32]	; (314 <convert+0x24>)
     2f4:	2200      	movs	r2, #0
{
     2f6:	b510      	push	{r4, lr}
	*ptr = '\0';
     2f8:	f800 2f31 	strb.w	r2, [r0, #49]!
	
	do {
		*--ptr = Representation[num%base];
     2fc:	4c06      	ldr	r4, [pc, #24]	; (318 <convert+0x28>)
     2fe:	fbb3 f2f1 	udiv	r2, r3, r1
     302:	fb01 3312 	mls	r3, r1, r2, r3
     306:	5ce3      	ldrb	r3, [r4, r3]
     308:	f800 3d01 	strb.w	r3, [r0, #-1]!
		num /= base;
	} while(num != 0);
     30c:	4613      	mov	r3, r2
     30e:	2a00      	cmp	r2, #0
     310:	d1f5      	bne.n	2fe <convert+0xe>
	
	return ptr;
}
     312:	bd10      	pop	{r4, pc}
     314:	200002dc 	.word	0x200002dc
     318:	0000c028 	.word	0x0000c028

0000031c <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
     31c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
     31e:	4b0e      	ldr	r3, [pc, #56]	; (358 <gpio_get_pin_level+0x3c>)
     320:	4605      	mov	r5, r0
     322:	a801      	add	r0, sp, #4
     324:	4798      	blx	r3
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
     326:	096b      	lsrs	r3, r5, #5
     328:	490c      	ldr	r1, [pc, #48]	; (35c <gpio_get_pin_level+0x40>)
     32a:	01db      	lsls	r3, r3, #7
     32c:	18ca      	adds	r2, r1, r3
     32e:	58c9      	ldr	r1, [r1, r3]
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Port *)hw)->Group[submodule_index].IN.reg;
     330:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
     332:	6914      	ldr	r4, [r2, #16]

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
     334:	405c      	eors	r4, r3
     336:	400c      	ands	r4, r1

	CRITICAL_SECTION_LEAVE();
     338:	a801      	add	r0, sp, #4
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
     33a:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
     33c:	4b08      	ldr	r3, [pc, #32]	; (360 <gpio_get_pin_level+0x44>)
     33e:	4798      	blx	r3
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
     340:	f005 051f 	and.w	r5, r5, #31
     344:	2301      	movs	r3, #1
     346:	fa03 f505 	lsl.w	r5, r3, r5
     34a:	4225      	tst	r5, r4
}
     34c:	bf14      	ite	ne
     34e:	4618      	movne	r0, r3
     350:	2000      	moveq	r0, #0
     352:	b003      	add	sp, #12
     354:	bd30      	pop	{r4, r5, pc}
     356:	bf00      	nop
     358:	000011d1 	.word	0x000011d1
     35c:	41008000 	.word	0x41008000
     360:	000011df 	.word	0x000011df

00000364 <wdt_feed.constprop.0>:
 *
 * \param[in] wdt The pointer to the HAL WDT instance.
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 */
static inline int32_t wdt_feed(struct wdt_descriptor *const wdt)
     364:	b510      	push	{r4, lr}
{
	ASSERT(wdt && wdt->dev.hw);
     366:	4c07      	ldr	r4, [pc, #28]	; (384 <wdt_feed.constprop.0+0x20>)
     368:	4b07      	ldr	r3, [pc, #28]	; (388 <wdt_feed.constprop.0+0x24>)
     36a:	6820      	ldr	r0, [r4, #0]
     36c:	4907      	ldr	r1, [pc, #28]	; (38c <wdt_feed.constprop.0+0x28>)
     36e:	3000      	adds	r0, #0
     370:	bf18      	it	ne
     372:	2001      	movne	r0, #1
     374:	22a9      	movs	r2, #169	; 0xa9
     376:	4798      	blx	r3

	return _wdt_feed(&wdt->dev);
     378:	4620      	mov	r0, r4
     37a:	4b05      	ldr	r3, [pc, #20]	; (390 <wdt_feed.constprop.0+0x2c>)
}
     37c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return _wdt_feed(&wdt->dev);
     380:	4718      	bx	r3
     382:	bf00      	nop
     384:	20007490 	.word	0x20007490
     388:	00002009 	.word	0x00002009
     38c:	0000c039 	.word	0x0000c039
     390:	00004371 	.word	0x00004371

00000394 <xprintf>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: Function to format and write the debug/info to the standard stream IO
// Returns:     Nothing
// *****************************************************************************************************************************************************************
void xprintf(char* format, ...) 
{ 
     394:	b40f      	push	{r0, r1, r2, r3}
     396:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     398:	ab08      	add	r3, sp, #32
	va_start(arg, format); 
	
	for (traverse = format; *traverse; traverse++) 
	{ 
	    if (*traverse != '%') {
			while (!usart_async_is_tx_empty(&USART_1)) {}
     39a:	4c53      	ldr	r4, [pc, #332]	; (4e8 <xprintf+0x154>)
{ 
     39c:	f853 6b04 	ldr.w	r6, [r3], #4
			while (!usart_async_is_tx_empty(&USART_1)) {}
     3a0:	4d52      	ldr	r5, [pc, #328]	; (4ec <xprintf+0x158>)
	va_start(arg, format); 
     3a2:	9301      	str	r3, [sp, #4]
	for (traverse = format; *traverse; traverse++) 
     3a4:	7833      	ldrb	r3, [r6, #0]
     3a6:	b923      	cbnz	r3, 3b2 <xprintf+0x1e>
			}	
		}
	} 
	
	va_end(arg); 
} 
     3a8:	b003      	add	sp, #12
     3aa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
     3ae:	b004      	add	sp, #16
     3b0:	4770      	bx	lr
	    if (*traverse != '%') {
     3b2:	2b25      	cmp	r3, #37	; 0x25
     3b4:	d010      	beq.n	3d8 <xprintf+0x44>
			while (!usart_async_is_tx_empty(&USART_1)) {}
     3b6:	4620      	mov	r0, r4
     3b8:	47a8      	blx	r5
     3ba:	2800      	cmp	r0, #0
     3bc:	d0fb      	beq.n	3b6 <xprintf+0x22>
			io_write((struct io_descriptor *const)io, (const uint8_t *const)traverse, 1);
     3be:	4b4c      	ldr	r3, [pc, #304]	; (4f0 <xprintf+0x15c>)
     3c0:	2201      	movs	r2, #1
     3c2:	6818      	ldr	r0, [r3, #0]
     3c4:	4b4b      	ldr	r3, [pc, #300]	; (4f4 <xprintf+0x160>)
     3c6:	4631      	mov	r1, r6
     3c8:	4798      	blx	r3
			while (!usart_async_is_tx_empty(&USART_1)) {}
     3ca:	4620      	mov	r0, r4
     3cc:	47a8      	blx	r5
     3ce:	2800      	cmp	r0, #0
     3d0:	d0fb      	beq.n	3ca <xprintf+0x36>
     3d2:	4637      	mov	r7, r6
	for (traverse = format; *traverse; traverse++) 
     3d4:	1c7e      	adds	r6, r7, #1
     3d6:	e7e5      	b.n	3a4 <xprintf+0x10>
			switch (*traverse)  { 
     3d8:	7873      	ldrb	r3, [r6, #1]
     3da:	2b6f      	cmp	r3, #111	; 0x6f
			traverse++; 
     3dc:	f106 0701 	add.w	r7, r6, #1
			switch (*traverse)  { 
     3e0:	d052      	beq.n	488 <xprintf+0xf4>
     3e2:	d81d      	bhi.n	420 <xprintf+0x8c>
     3e4:	2b63      	cmp	r3, #99	; 0x63
     3e6:	d039      	beq.n	45c <xprintf+0xc8>
     3e8:	2b64      	cmp	r3, #100	; 0x64
     3ea:	d1f3      	bne.n	3d4 <xprintf+0x40>
				case 'd' : i = va_arg(arg,int);
     3ec:	9b01      	ldr	r3, [sp, #4]
						s = convert(i, 10);
     3ee:	210a      	movs	r1, #10
				case 'd' : i = va_arg(arg,int);
     3f0:	1d1a      	adds	r2, r3, #4
						s = convert(i, 10);
     3f2:	6818      	ldr	r0, [r3, #0]
     3f4:	4b40      	ldr	r3, [pc, #256]	; (4f8 <xprintf+0x164>)
				case 'd' : i = va_arg(arg,int);
     3f6:	9201      	str	r2, [sp, #4]
						s = convert(i, 10);
     3f8:	4798      	blx	r3
     3fa:	4606      	mov	r6, r0
						while (!usart_async_is_tx_empty(&USART_1)) {}
     3fc:	4620      	mov	r0, r4
     3fe:	47a8      	blx	r5
     400:	2800      	cmp	r0, #0
     402:	d0fb      	beq.n	3fc <xprintf+0x68>
						io_write((struct io_descriptor *const)io, (const uint8_t *const)s, strlen(s));
     404:	4b3d      	ldr	r3, [pc, #244]	; (4fc <xprintf+0x168>)
     406:	4630      	mov	r0, r6
     408:	4798      	blx	r3
     40a:	4b39      	ldr	r3, [pc, #228]	; (4f0 <xprintf+0x15c>)
     40c:	b282      	uxth	r2, r0
     40e:	4631      	mov	r1, r6
     410:	6818      	ldr	r0, [r3, #0]
     412:	4b38      	ldr	r3, [pc, #224]	; (4f4 <xprintf+0x160>)
     414:	4798      	blx	r3
						while (!usart_async_is_tx_empty(&USART_1)) {}
     416:	4620      	mov	r0, r4
     418:	47a8      	blx	r5
     41a:	2800      	cmp	r0, #0
     41c:	d0fb      	beq.n	416 <xprintf+0x82>
     41e:	e7d9      	b.n	3d4 <xprintf+0x40>
			switch (*traverse)  { 
     420:	2b73      	cmp	r3, #115	; 0x73
     422:	d04b      	beq.n	4bc <xprintf+0x128>
     424:	2b78      	cmp	r3, #120	; 0x78
     426:	d1d5      	bne.n	3d4 <xprintf+0x40>
				case 'x': i = va_arg(arg,unsigned int);
     428:	9b01      	ldr	r3, [sp, #4]
						s = convert(i, 16);
     42a:	2110      	movs	r1, #16
				case 'x': i = va_arg(arg,unsigned int);
     42c:	1d1a      	adds	r2, r3, #4
						s = convert(i, 16);
     42e:	6818      	ldr	r0, [r3, #0]
     430:	4b31      	ldr	r3, [pc, #196]	; (4f8 <xprintf+0x164>)
				case 'x': i = va_arg(arg,unsigned int);
     432:	9201      	str	r2, [sp, #4]
						s = convert(i, 16);
     434:	4798      	blx	r3
     436:	4606      	mov	r6, r0
						while (!usart_async_is_tx_empty(&USART_1)) {}
     438:	4620      	mov	r0, r4
     43a:	47a8      	blx	r5
     43c:	2800      	cmp	r0, #0
     43e:	d0fb      	beq.n	438 <xprintf+0xa4>
						io_write((struct io_descriptor *const)io, (const uint8_t *const)s, strlen(s));
     440:	4b2e      	ldr	r3, [pc, #184]	; (4fc <xprintf+0x168>)
     442:	4630      	mov	r0, r6
     444:	4798      	blx	r3
     446:	4b2a      	ldr	r3, [pc, #168]	; (4f0 <xprintf+0x15c>)
     448:	b282      	uxth	r2, r0
     44a:	4631      	mov	r1, r6
     44c:	6818      	ldr	r0, [r3, #0]
     44e:	4b29      	ldr	r3, [pc, #164]	; (4f4 <xprintf+0x160>)
     450:	4798      	blx	r3
						while (!usart_async_is_tx_empty(&USART_1)) {}
     452:	4620      	mov	r0, r4
     454:	47a8      	blx	r5
     456:	2800      	cmp	r0, #0
     458:	d0fb      	beq.n	452 <xprintf+0xbe>
     45a:	e7bb      	b.n	3d4 <xprintf+0x40>
				case 'c' : i = va_arg(arg, int);
     45c:	9b01      	ldr	r3, [sp, #4]
     45e:	1d1a      	adds	r2, r3, #4
						temp = (char)i;
     460:	681b      	ldr	r3, [r3, #0]
				case 'c' : i = va_arg(arg, int);
     462:	9201      	str	r2, [sp, #4]
						temp = (char)i;
     464:	f88d 3003 	strb.w	r3, [sp, #3]
						while (!usart_async_is_tx_empty(&USART_1)) {}
     468:	4620      	mov	r0, r4
     46a:	47a8      	blx	r5
     46c:	2800      	cmp	r0, #0
     46e:	d0fb      	beq.n	468 <xprintf+0xd4>
						io_write((struct io_descriptor *const)io, (const uint8_t *const)&temp, 1);
     470:	4b1f      	ldr	r3, [pc, #124]	; (4f0 <xprintf+0x15c>)
     472:	2201      	movs	r2, #1
     474:	6818      	ldr	r0, [r3, #0]
     476:	4b1f      	ldr	r3, [pc, #124]	; (4f4 <xprintf+0x160>)
     478:	f10d 0103 	add.w	r1, sp, #3
     47c:	4798      	blx	r3
						while (!usart_async_is_tx_empty(&USART_1)) {}
     47e:	4620      	mov	r0, r4
     480:	47a8      	blx	r5
     482:	2800      	cmp	r0, #0
     484:	d0fb      	beq.n	47e <xprintf+0xea>
     486:	e7a5      	b.n	3d4 <xprintf+0x40>
				case 'o': i = va_arg(arg,unsigned int);
     488:	9b01      	ldr	r3, [sp, #4]
						s = convert(i, 8);
     48a:	2108      	movs	r1, #8
				case 'o': i = va_arg(arg,unsigned int);
     48c:	1d1a      	adds	r2, r3, #4
						s = convert(i, 8);
     48e:	6818      	ldr	r0, [r3, #0]
     490:	4b19      	ldr	r3, [pc, #100]	; (4f8 <xprintf+0x164>)
				case 'o': i = va_arg(arg,unsigned int);
     492:	9201      	str	r2, [sp, #4]
						s = convert(i, 8);
     494:	4798      	blx	r3
     496:	4606      	mov	r6, r0
						while (!usart_async_is_tx_empty(&USART_1)) {}
     498:	4620      	mov	r0, r4
     49a:	47a8      	blx	r5
     49c:	2800      	cmp	r0, #0
     49e:	d0fb      	beq.n	498 <xprintf+0x104>
						io_write((struct io_descriptor *const)io, (const uint8_t *const)s, strlen(s));
     4a0:	4b16      	ldr	r3, [pc, #88]	; (4fc <xprintf+0x168>)
     4a2:	4630      	mov	r0, r6
     4a4:	4798      	blx	r3
     4a6:	4b12      	ldr	r3, [pc, #72]	; (4f0 <xprintf+0x15c>)
     4a8:	b282      	uxth	r2, r0
     4aa:	4631      	mov	r1, r6
     4ac:	6818      	ldr	r0, [r3, #0]
     4ae:	4b11      	ldr	r3, [pc, #68]	; (4f4 <xprintf+0x160>)
     4b0:	4798      	blx	r3
						while (!usart_async_is_tx_empty(&USART_1)) {}
     4b2:	4620      	mov	r0, r4
     4b4:	47a8      	blx	r5
     4b6:	2800      	cmp	r0, #0
     4b8:	d0fb      	beq.n	4b2 <xprintf+0x11e>
     4ba:	e78b      	b.n	3d4 <xprintf+0x40>
				case 's': s = va_arg(arg,char *);
     4bc:	9b01      	ldr	r3, [sp, #4]
     4be:	1d1a      	adds	r2, r3, #4
     4c0:	681e      	ldr	r6, [r3, #0]
     4c2:	9201      	str	r2, [sp, #4]
						while (!usart_async_is_tx_empty(&USART_1)) {}
     4c4:	4620      	mov	r0, r4
     4c6:	47a8      	blx	r5
     4c8:	2800      	cmp	r0, #0
     4ca:	d0fb      	beq.n	4c4 <xprintf+0x130>
						io_write((struct io_descriptor *const)io, (const uint8_t *const)s, strlen(s));
     4cc:	4b0b      	ldr	r3, [pc, #44]	; (4fc <xprintf+0x168>)
     4ce:	4630      	mov	r0, r6
     4d0:	4798      	blx	r3
     4d2:	4b07      	ldr	r3, [pc, #28]	; (4f0 <xprintf+0x15c>)
     4d4:	b282      	uxth	r2, r0
     4d6:	4631      	mov	r1, r6
     4d8:	6818      	ldr	r0, [r3, #0]
     4da:	4b06      	ldr	r3, [pc, #24]	; (4f4 <xprintf+0x160>)
     4dc:	4798      	blx	r3
						while (!usart_async_is_tx_empty(&USART_1)) {}
     4de:	4620      	mov	r0, r4
     4e0:	47a8      	blx	r5
     4e2:	2800      	cmp	r0, #0
     4e4:	d0fb      	beq.n	4de <xprintf+0x14a>
     4e6:	e775      	b.n	3d4 <xprintf+0x40>
     4e8:	200074f8 	.word	0x200074f8
     4ec:	00001af1 	.word	0x00001af1
     4f0:	200081d0 	.word	0x200081d0
     4f4:	00001519 	.word	0x00001519
     4f8:	000002f1 	.word	0x000002f1
     4fc:	0000b3ed 	.word	0x0000b3ed

00000500 <read_boardvalues>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: read and access all main board hardware such as I2C and GPIO to collate a live snapshot of plugged-in cards and sensors
// Returns:     Nothing
// *****************************************************************************************************************************************************************
void read_boardvalues(void)
{
     500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int		err, counter_det;
	
	if (read_hardware_index == 0) {
     504:	4d9f      	ldr	r5, [pc, #636]	; (784 <read_boardvalues+0x284>)
     506:	782e      	ldrb	r6, [r5, #0]
{
     508:	b08b      	sub	sp, #44	; 0x2c
	if (read_hardware_index == 0) {
     50a:	2e00      	cmp	r6, #0
     50c:	f040 80af 	bne.w	66e <read_boardvalues+0x16e>
}

static inline void hri_adc_write_INPUTCTRL_reg(const void *const hw, hri_adc_inputctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->INPUTCTRL.reg = data;
     510:	4b9d      	ldr	r3, [pc, #628]	; (788 <read_boardvalues+0x288>)
		hri_adc_write_INPUTCTRL_reg(ADC0, 0x1800 + 0);	/* Select AIN<0> - [Water 1] Analogue Input */
		delay_ms(2);
	
		/* Read the ADC value of the first water sensor. If bad result write error debug and set variable to 0xFF */
		err = adc_sync_read_channel(&ADC_0, 0, (uint8_t *const)&readdata_water1, 1);
     512:	4f9e      	ldr	r7, [pc, #632]	; (78c <read_boardvalues+0x28c>)
     514:	4c9e      	ldr	r4, [pc, #632]	; (790 <read_boardvalues+0x290>)
     516:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
     51a:	809a      	strh	r2, [r3, #4]
		delay_ms(2);
     51c:	2002      	movs	r0, #2
     51e:	4b9d      	ldr	r3, [pc, #628]	; (794 <read_boardvalues+0x294>)
     520:	4798      	blx	r3
		err = adc_sync_read_channel(&ADC_0, 0, (uint8_t *const)&readdata_water1, 1);
     522:	2301      	movs	r3, #1
     524:	463a      	mov	r2, r7
     526:	4631      	mov	r1, r6
     528:	489b      	ldr	r0, [pc, #620]	; (798 <read_boardvalues+0x298>)
     52a:	47a0      	blx	r4
		if (err != 1) {
     52c:	2801      	cmp	r0, #1
		err = adc_sync_read_channel(&ADC_0, 0, (uint8_t *const)&readdata_water1, 1);
     52e:	4604      	mov	r4, r0
		if (err != 1) {
     530:	d003      	beq.n	53a <read_boardvalues+0x3a>
			xprintf("Could NOT read from the water detector 1\r\n");
     532:	489a      	ldr	r0, [pc, #616]	; (79c <read_boardvalues+0x29c>)
     534:	4b9a      	ldr	r3, [pc, #616]	; (7a0 <read_boardvalues+0x2a0>)
     536:	4798      	blx	r3
	
			readdata_water1 = 0;
     538:	703e      	strb	r6, [r7, #0]
		}
		
		read_hardware_index = 1;
     53a:	2301      	movs	r3, #1
			temp_failure_flag = 1;
		} else {
			temp_failure_flag = 0;
		}
		
		read_hardware_index = 0;
     53c:	702b      	strb	r3, [r5, #0]
	}

	/* Read the main simple GPIO inputs for determining the status of tamper, daughter cards */ 
	tamper = (gpio_get_pin_level(PB02_TAMP_OP)) ? 1 : 0;
     53e:	2022      	movs	r0, #34	; 0x22
     540:	4d98      	ldr	r5, [pc, #608]	; (7a4 <read_boardvalues+0x2a4>)
     542:	4f99      	ldr	r7, [pc, #612]	; (7a8 <read_boardvalues+0x2a8>)
	cardA_present = (gpio_get_pin_level(PC00_CARDA_PRESENT)) ? 0 : 1;
     544:	4e99      	ldr	r6, [pc, #612]	; (7ac <read_boardvalues+0x2ac>)
	tamper = (gpio_get_pin_level(PB02_TAMP_OP)) ? 1 : 0;
     546:	47a8      	blx	r5
     548:	7038      	strb	r0, [r7, #0]
	cardA_present = (gpio_get_pin_level(PC00_CARDA_PRESENT)) ? 0 : 1;
     54a:	2040      	movs	r0, #64	; 0x40
     54c:	47a8      	blx	r5
     54e:	f080 0001 	eor.w	r0, r0, #1
     552:	7030      	strb	r0, [r6, #0]
	cardB_present = (gpio_get_pin_level(PC01_CARDB_PRESENT)) ? 0 : 1;
     554:	2041      	movs	r0, #65	; 0x41
     556:	47a8      	blx	r5
     558:	4d95      	ldr	r5, [pc, #596]	; (7b0 <read_boardvalues+0x2b0>)

	/* If tamper switch is closed and the enclosure lid is correct, then the LEDs do not illuminate. Else show the ETH and PWR LEDs according to the system state */
	if (tamper) {
     55a:	7839      	ldrb	r1, [r7, #0]
     55c:	9702      	str	r7, [sp, #8]
	cardB_present = (gpio_get_pin_level(PC01_CARDB_PRESENT)) ? 0 : 1;
     55e:	f080 0001 	eor.w	r0, r0, #1
     562:	7028      	strb	r0, [r5, #0]
     564:	4b93      	ldr	r3, [pc, #588]	; (7b4 <read_boardvalues+0x2b4>)
     566:	2210      	movs	r2, #16
	if (tamper) {
     568:	2900      	cmp	r1, #0
     56a:	f000 80d4 	beq.w	716 <read_boardvalues+0x216>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     56e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	} else {
		gpio_set_pin_level(PB04_LED_PWR, 0);
	}

	/* Read the status of the two LEFT and RIGHT main Ethernet ports, along with the T-junction Power & Ethernet adapter channel */
	link_port1 = (readKSZreg(SPI_KSZ8794_PORT1STATUS2) & 0x20) ? 1 : 0;
     572:	4f91      	ldr	r7, [pc, #580]	; (7b8 <read_boardvalues+0x2b8>)
     574:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 824 <read_boardvalues+0x324>
	link_port2 = (readKSZreg(SPI_KSZ8794_PORT2STATUS2) & 0x20) ? 1 : 0;
     578:	f8df 82ac 	ldr.w	r8, [pc, #684]	; 828 <read_boardvalues+0x328>
	link_port1 = (readKSZreg(SPI_KSZ8794_PORT1STATUS2) & 0x20) ? 1 : 0;
     57c:	201e      	movs	r0, #30
     57e:	47b8      	blx	r7
     580:	f3c0 1040 	ubfx	r0, r0, #5, #1
     584:	f889 0000 	strb.w	r0, [r9]
	link_port2 = (readKSZreg(SPI_KSZ8794_PORT2STATUS2) & 0x20) ? 1 : 0;
     588:	202e      	movs	r0, #46	; 0x2e
     58a:	47b8      	blx	r7
     58c:	f3c0 1040 	ubfx	r0, r0, #5, #1
     590:	f888 0000 	strb.w	r0, [r8]
	link_port3 = (readKSZreg(SPI_KSZ8794_PORT3STATUS2) & 0x20) ? 1 : 0;
     594:	203e      	movs	r0, #62	; 0x3e
     596:	47b8      	blx	r7
     598:	4988      	ldr	r1, [pc, #544]	; (7bc <read_boardvalues+0x2bc>)

	/* Detect change of status for debug */
	if (tamper != old_tamper) {
     59a:	4a89      	ldr	r2, [pc, #548]	; (7c0 <read_boardvalues+0x2c0>)
     59c:	9b02      	ldr	r3, [sp, #8]
     59e:	f8cd 900c 	str.w	r9, [sp, #12]
	link_port3 = (readKSZreg(SPI_KSZ8794_PORT3STATUS2) & 0x20) ? 1 : 0;
     5a2:	f3c0 1040 	ubfx	r0, r0, #5, #1
     5a6:	7008      	strb	r0, [r1, #0]
	if (tamper != old_tamper) {
     5a8:	781b      	ldrb	r3, [r3, #0]
     5aa:	7810      	ldrb	r0, [r2, #0]
     5ac:	f8cd 8010 	str.w	r8, [sp, #16]
     5b0:	4298      	cmp	r0, r3
     5b2:	9105      	str	r1, [sp, #20]
     5b4:	9206      	str	r2, [sp, #24]
     5b6:	d007      	beq.n	5c8 <read_boardvalues+0xc8>
		xprintf("Lid TAMPER [%s]\r\n", (!tamper) ? "GOOD" : "ACTIVE");
     5b8:	4a82      	ldr	r2, [pc, #520]	; (7c4 <read_boardvalues+0x2c4>)
     5ba:	4983      	ldr	r1, [pc, #524]	; (7c8 <read_boardvalues+0x2c8>)
     5bc:	4883      	ldr	r0, [pc, #524]	; (7cc <read_boardvalues+0x2cc>)
     5be:	2b00      	cmp	r3, #0
     5c0:	bf18      	it	ne
     5c2:	4611      	movne	r1, r2
     5c4:	4b76      	ldr	r3, [pc, #472]	; (7a0 <read_boardvalues+0x2a0>)
     5c6:	4798      	blx	r3
	}

	/* Detect change of status for debug */
	if (link_port1 != old_link_port1) {
     5c8:	4a81      	ldr	r2, [pc, #516]	; (7d0 <read_boardvalues+0x2d0>)
     5ca:	9b03      	ldr	r3, [sp, #12]
     5cc:	7811      	ldrb	r1, [r2, #0]
     5ce:	781b      	ldrb	r3, [r3, #0]
     5d0:	9207      	str	r2, [sp, #28]
     5d2:	4299      	cmp	r1, r3
     5d4:	d00b      	beq.n	5ee <read_boardvalues+0xee>
		xprintf("Left Ethernet [%s]\r\n", (link_port1) ? "GOOD" : "LINKDOWN");
     5d6:	4a7f      	ldr	r2, [pc, #508]	; (7d4 <read_boardvalues+0x2d4>)
     5d8:	497b      	ldr	r1, [pc, #492]	; (7c8 <read_boardvalues+0x2c8>)
     5da:	487f      	ldr	r0, [pc, #508]	; (7d8 <read_boardvalues+0x2d8>)
     5dc:	2b00      	cmp	r3, #0
     5de:	bf08      	it	eq
     5e0:	4611      	moveq	r1, r2
     5e2:	4b6f      	ldr	r3, [pc, #444]	; (7a0 <read_boardvalues+0x2a0>)
     5e4:	4798      	blx	r3
		
		/* Clear the learning tables in the SWITCH */
		writeKSZreg(SPI_KSZ8794_GLOBAL0, 0x2C);
     5e6:	212c      	movs	r1, #44	; 0x2c
     5e8:	2002      	movs	r0, #2
     5ea:	4b7c      	ldr	r3, [pc, #496]	; (7dc <read_boardvalues+0x2dc>)
     5ec:	4798      	blx	r3
	}

	/* Detect change of status for debug */
	if (link_port2 != old_link_port2) {
     5ee:	4a7c      	ldr	r2, [pc, #496]	; (7e0 <read_boardvalues+0x2e0>)
     5f0:	9b04      	ldr	r3, [sp, #16]
     5f2:	7811      	ldrb	r1, [r2, #0]
     5f4:	781b      	ldrb	r3, [r3, #0]
     5f6:	9208      	str	r2, [sp, #32]
     5f8:	4299      	cmp	r1, r3
     5fa:	d00b      	beq.n	614 <read_boardvalues+0x114>
		xprintf("Right Ethernet [%s]\r\n", (link_port2) ? "GOOD" : "LINKDOWN");
     5fc:	4a75      	ldr	r2, [pc, #468]	; (7d4 <read_boardvalues+0x2d4>)
     5fe:	4972      	ldr	r1, [pc, #456]	; (7c8 <read_boardvalues+0x2c8>)
     600:	4878      	ldr	r0, [pc, #480]	; (7e4 <read_boardvalues+0x2e4>)
     602:	2b00      	cmp	r3, #0
     604:	bf08      	it	eq
     606:	4611      	moveq	r1, r2
     608:	4b65      	ldr	r3, [pc, #404]	; (7a0 <read_boardvalues+0x2a0>)
     60a:	4798      	blx	r3
		
		/* Clear the learning tables in the SWITCH */
		writeKSZreg(SPI_KSZ8794_GLOBAL0, 0x2C);
     60c:	212c      	movs	r1, #44	; 0x2c
     60e:	2002      	movs	r0, #2
     610:	4b72      	ldr	r3, [pc, #456]	; (7dc <read_boardvalues+0x2dc>)
     612:	4798      	blx	r3
	}

	/* Detect change of status for debug */
	if (link_port3 != old_link_port3) {
     614:	9b05      	ldr	r3, [sp, #20]
     616:	4a74      	ldr	r2, [pc, #464]	; (7e8 <read_boardvalues+0x2e8>)
     618:	781b      	ldrb	r3, [r3, #0]
     61a:	7812      	ldrb	r2, [r2, #0]
     61c:	429a      	cmp	r2, r3
     61e:	d00b      	beq.n	638 <read_boardvalues+0x138>
		xprintf("Power & Ethernet <Comms Link> [%s]\r\n", (link_port3) ? "GOOD" : "DOWN");
     620:	4a72      	ldr	r2, [pc, #456]	; (7ec <read_boardvalues+0x2ec>)
     622:	4969      	ldr	r1, [pc, #420]	; (7c8 <read_boardvalues+0x2c8>)
     624:	4872      	ldr	r0, [pc, #456]	; (7f0 <read_boardvalues+0x2f0>)
     626:	2b00      	cmp	r3, #0
     628:	bf08      	it	eq
     62a:	4611      	moveq	r1, r2
     62c:	4b5c      	ldr	r3, [pc, #368]	; (7a0 <read_boardvalues+0x2a0>)
     62e:	4798      	blx	r3
		
		/* Clear the learning tables in the SWITCH */
		writeKSZreg(SPI_KSZ8794_GLOBAL0, 0x2C);
     630:	212c      	movs	r1, #44	; 0x2c
     632:	2002      	movs	r0, #2
     634:	4b69      	ldr	r3, [pc, #420]	; (7dc <read_boardvalues+0x2dc>)
     636:	4798      	blx	r3
	}

	/* Detect change of status of Slot [A] daughter-card */
	if ((!cardA_old) && (cardA_present)) {
     638:	4a6e      	ldr	r2, [pc, #440]	; (7f4 <read_boardvalues+0x2f4>)
     63a:	9209      	str	r2, [sp, #36]	; 0x24
     63c:	7813      	ldrb	r3, [r2, #0]
     63e:	2b00      	cmp	r3, #0
     640:	f040 8144 	bne.w	8cc <read_boardvalues+0x3cc>
     644:	7832      	ldrb	r2, [r6, #0]
     646:	2a00      	cmp	r2, #0
     648:	f000 8140 	beq.w	8cc <read_boardvalues+0x3cc>
		/* Read the I2C device address on the card to establish type of card */
		
		counter_det = 10;
		while (counter_det--) {
			delay_ms(500);
     64c:	f8df a144 	ldr.w	sl, [pc, #324]	; 794 <read_boardvalues+0x294>
			
			/* Kick the watchdog time-out facility */
			wdt_feed(&WDT_0);
     650:	f8df b1d8 	ldr.w	fp, [pc, #472]	; 82c <read_boardvalues+0x32c>
			
			if (!(err = I2C_check_deviceID(PC27_CARDA_I2C_SDA, PC28_CARDA_I2C_CLK, 0x60))) {
     654:	4f68      	ldr	r7, [pc, #416]	; (7f8 <read_boardvalues+0x2f8>)
     656:	f04f 090b 	mov.w	r9, #11
		while (counter_det--) {
     65a:	f1b9 0901 	subs.w	r9, r9, #1
     65e:	d15d      	bne.n	71c <read_boardvalues+0x21c>
			} else {
				cardA_type = CARD_NOTFITTED;
			}
		}

		if (err < 0) {
     660:	2c00      	cmp	r4, #0
     662:	da6a      	bge.n	73a <read_boardvalues+0x23a>
			xprintf("Could not read I2C bus on CARDA for I2C_check_deviceID() [%i]\r\n", err);
     664:	4621      	mov	r1, r4
     666:	4865      	ldr	r0, [pc, #404]	; (7fc <read_boardvalues+0x2fc>)
     668:	4b4d      	ldr	r3, [pc, #308]	; (7a0 <read_boardvalues+0x2a0>)
     66a:	4798      	blx	r3
     66c:	e065      	b.n	73a <read_boardvalues+0x23a>
	} else if (read_hardware_index == 1) {
     66e:	2e01      	cmp	r6, #1
     670:	d117      	bne.n	6a2 <read_boardvalues+0x1a2>
     672:	4b45      	ldr	r3, [pc, #276]	; (788 <read_boardvalues+0x288>)
		err = adc_sync_read_channel(&ADC_0, 0, (uint8_t *const)&readdata_water2, 1);
     674:	4f62      	ldr	r7, [pc, #392]	; (800 <read_boardvalues+0x300>)
     676:	4c46      	ldr	r4, [pc, #280]	; (790 <read_boardvalues+0x290>)
     678:	f641 0202 	movw	r2, #6146	; 0x1802
     67c:	809a      	strh	r2, [r3, #4]
		delay_ms(2);
     67e:	2002      	movs	r0, #2
     680:	4b44      	ldr	r3, [pc, #272]	; (794 <read_boardvalues+0x294>)
     682:	4798      	blx	r3
		err = adc_sync_read_channel(&ADC_0, 0, (uint8_t *const)&readdata_water2, 1);
     684:	4633      	mov	r3, r6
     686:	463a      	mov	r2, r7
     688:	2100      	movs	r1, #0
     68a:	4843      	ldr	r0, [pc, #268]	; (798 <read_boardvalues+0x298>)
     68c:	47a0      	blx	r4
		if (err != 1) {
     68e:	2801      	cmp	r0, #1
		err = adc_sync_read_channel(&ADC_0, 0, (uint8_t *const)&readdata_water2, 1);
     690:	4604      	mov	r4, r0
		if (err != 1) {
     692:	d004      	beq.n	69e <read_boardvalues+0x19e>
			xprintf("Could NOT read from the water detector 2\r\n");
     694:	4b42      	ldr	r3, [pc, #264]	; (7a0 <read_boardvalues+0x2a0>)
     696:	485b      	ldr	r0, [pc, #364]	; (804 <read_boardvalues+0x304>)
     698:	4798      	blx	r3
			readdata_water2 = 0;
     69a:	2300      	movs	r3, #0
     69c:	703b      	strb	r3, [r7, #0]
		read_hardware_index = 2;
     69e:	2302      	movs	r3, #2
     6a0:	e74c      	b.n	53c <read_boardvalues+0x3c>
	} else if (read_hardware_index == 2) {
     6a2:	2e02      	cmp	r6, #2
     6a4:	d117      	bne.n	6d6 <read_boardvalues+0x1d6>
     6a6:	4b38      	ldr	r3, [pc, #224]	; (788 <read_boardvalues+0x288>)
		err = adc_sync_read_channel(&ADC_0, 0, (uint8_t *const)&highvoltage, 1);
     6a8:	4c39      	ldr	r4, [pc, #228]	; (790 <read_boardvalues+0x290>)
     6aa:	f641 0201 	movw	r2, #6145	; 0x1801
		delay_ms(2);
     6ae:	4630      	mov	r0, r6
		err = adc_sync_read_channel(&ADC_0, 0, (uint8_t *const)&highvoltage, 1);
     6b0:	4e55      	ldr	r6, [pc, #340]	; (808 <read_boardvalues+0x308>)
     6b2:	809a      	strh	r2, [r3, #4]
		delay_ms(2);
     6b4:	4b37      	ldr	r3, [pc, #220]	; (794 <read_boardvalues+0x294>)
     6b6:	4798      	blx	r3
		err = adc_sync_read_channel(&ADC_0, 0, (uint8_t *const)&highvoltage, 1);
     6b8:	2301      	movs	r3, #1
     6ba:	4632      	mov	r2, r6
     6bc:	2100      	movs	r1, #0
     6be:	4836      	ldr	r0, [pc, #216]	; (798 <read_boardvalues+0x298>)
     6c0:	47a0      	blx	r4
		if (err != 1) {
     6c2:	2801      	cmp	r0, #1
		err = adc_sync_read_channel(&ADC_0, 0, (uint8_t *const)&highvoltage, 1);
     6c4:	4604      	mov	r4, r0
		if (err != 1) {
     6c6:	d004      	beq.n	6d2 <read_boardvalues+0x1d2>
			xprintf("Could NOT read from the HV divider\r\n");
     6c8:	4b35      	ldr	r3, [pc, #212]	; (7a0 <read_boardvalues+0x2a0>)
     6ca:	4850      	ldr	r0, [pc, #320]	; (80c <read_boardvalues+0x30c>)
     6cc:	4798      	blx	r3
			highvoltage = 0;
     6ce:	2300      	movs	r3, #0
     6d0:	7033      	strb	r3, [r6, #0]
		read_hardware_index = 3;
     6d2:	2303      	movs	r3, #3
     6d4:	e732      	b.n	53c <read_boardvalues+0x3c>
		if ((err = I2C_getTEMPandMOISTURE(PB24_CARDB_I2C_SDA,  PB25_CARDB_I2C_CLK, &readdata_tempmoisture[0], &readdata_tempmoisture[1], &readdata_tempmoisture[2], &readdata_tempmoisture[3]) < 0)) {
     6d6:	4e4e      	ldr	r6, [pc, #312]	; (810 <read_boardvalues+0x310>)
     6d8:	4c4e      	ldr	r4, [pc, #312]	; (814 <read_boardvalues+0x314>)
     6da:	4f4f      	ldr	r7, [pc, #316]	; (818 <read_boardvalues+0x318>)
     6dc:	1cb3      	adds	r3, r6, #2
     6de:	9301      	str	r3, [sp, #4]
     6e0:	1c73      	adds	r3, r6, #1
     6e2:	9300      	str	r3, [sp, #0]
     6e4:	1e72      	subs	r2, r6, #1
     6e6:	4633      	mov	r3, r6
     6e8:	2139      	movs	r1, #57	; 0x39
     6ea:	2038      	movs	r0, #56	; 0x38
     6ec:	47a0      	blx	r4
     6ee:	2800      	cmp	r0, #0
     6f0:	ea4f 74d0 	mov.w	r4, r0, lsr #31
     6f4:	da0d      	bge.n	712 <read_boardvalues+0x212>
			if (!temp_failure_flag) {
     6f6:	783b      	ldrb	r3, [r7, #0]
     6f8:	b93b      	cbnz	r3, 70a <read_boardvalues+0x20a>
				xprintf("Could NOT read from the moisture & temp sensor on CARDB:I2C [%i]\r\n", err);
     6fa:	4b29      	ldr	r3, [pc, #164]	; (7a0 <read_boardvalues+0x2a0>)
     6fc:	4847      	ldr	r0, [pc, #284]	; (81c <read_boardvalues+0x31c>)
     6fe:	2101      	movs	r1, #1
     700:	4798      	blx	r3
				memset(&readdata_tempmoisture, 0xFF, 4);
     702:	f04f 33ff 	mov.w	r3, #4294967295
     706:	f846 3c01 	str.w	r3, [r6, #-1]
			temp_failure_flag = 1;
     70a:	2301      	movs	r3, #1
			temp_failure_flag = 0;
     70c:	703b      	strb	r3, [r7, #0]
		read_hardware_index = 0;
     70e:	2300      	movs	r3, #0
     710:	e714      	b.n	53c <read_boardvalues+0x3c>
			temp_failure_flag = 0;
     712:	2300      	movs	r3, #0
     714:	e7fa      	b.n	70c <read_boardvalues+0x20c>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     716:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
     71a:	e72a      	b.n	572 <read_boardvalues+0x72>
			delay_ms(500);
     71c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     720:	47d0      	blx	sl
			wdt_feed(&WDT_0);
     722:	47d8      	blx	fp
			if (!(err = I2C_check_deviceID(PC27_CARDA_I2C_SDA, PC28_CARDA_I2C_CLK, 0x60))) {
     724:	2260      	movs	r2, #96	; 0x60
     726:	215c      	movs	r1, #92	; 0x5c
     728:	205b      	movs	r0, #91	; 0x5b
     72a:	47b8      	blx	r7
     72c:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 820 <read_boardvalues+0x320>
     730:	4604      	mov	r4, r0
     732:	b968      	cbnz	r0, 750 <read_boardvalues+0x250>
				cardA_type = CARD_VIBRATEK;
     734:	2301      	movs	r3, #1
				cardA_type = CARD_PE;
     736:	f888 3000 	strb.w	r3, [r8]
		}
		
		/* Actions to be taken for each different card type */
		switch (cardA_type) {
     73a:	4b39      	ldr	r3, [pc, #228]	; (820 <read_boardvalues+0x320>)
     73c:	4f18      	ldr	r7, [pc, #96]	; (7a0 <read_boardvalues+0x2a0>)
     73e:	781b      	ldrb	r3, [r3, #0]
     740:	3b01      	subs	r3, #1
     742:	2b04      	cmp	r3, #4
     744:	d874      	bhi.n	830 <read_boardvalues+0x330>
     746:	e8df f003 	tbb	[pc, r3]
     74a:	909f      	.short	0x909f
     74c:	9d8e      	.short	0x9d8e
     74e:	b0          	.byte	0xb0
     74f:	00          	.byte	0x00
			} else if (!(err = I2C_check_deviceID(PC27_CARDA_I2C_SDA, PC28_CARDA_I2C_CLK, 0x50))) {
     750:	2250      	movs	r2, #80	; 0x50
     752:	215c      	movs	r1, #92	; 0x5c
     754:	205b      	movs	r0, #91	; 0x5b
     756:	47b8      	blx	r7
     758:	4604      	mov	r4, r0
     75a:	b908      	cbnz	r0, 760 <read_boardvalues+0x260>
				cardA_type = CARD_PE;
     75c:	2305      	movs	r3, #5
     75e:	e7ea      	b.n	736 <read_boardvalues+0x236>
			} else if ((!(err = I2C_check_deviceID(PC27_CARDA_I2C_SDA, PC28_CARDA_I2C_CLK, 0x41))) && (!(err = I2C_check_deviceID(PC27_CARDA_I2C_SDA, PC28_CARDA_I2C_CLK, 0x68)))) {
     760:	2241      	movs	r2, #65	; 0x41
     762:	215c      	movs	r1, #92	; 0x5c
     764:	205b      	movs	r0, #91	; 0x5b
     766:	47b8      	blx	r7
     768:	4604      	mov	r4, r0
     76a:	b938      	cbnz	r0, 77c <read_boardvalues+0x27c>
     76c:	2268      	movs	r2, #104	; 0x68
     76e:	215c      	movs	r1, #92	; 0x5c
     770:	205b      	movs	r0, #91	; 0x5b
     772:	47b8      	blx	r7
     774:	4604      	mov	r4, r0
     776:	b908      	cbnz	r0, 77c <read_boardvalues+0x27c>
				cardA_type = CARD_MINI_IO;
     778:	2302      	movs	r3, #2
     77a:	e7dc      	b.n	736 <read_boardvalues+0x236>
				cardA_type = CARD_NOTFITTED;
     77c:	2300      	movs	r3, #0
     77e:	f888 3000 	strb.w	r3, [r8]
     782:	e76a      	b.n	65a <read_boardvalues+0x15a>
     784:	2000759a 	.word	0x2000759a
     788:	43001c00 	.word	0x43001c00
     78c:	20008ab2 	.word	0x20008ab2
     790:	0000109d 	.word	0x0000109d
     794:	00001251 	.word	0x00001251
     798:	2000748c 	.word	0x2000748c
     79c:	0000c067 	.word	0x0000c067
     7a0:	00000395 	.word	0x00000395
     7a4:	0000031d 	.word	0x0000031d
     7a8:	20008263 	.word	0x20008263
     7ac:	20008ac0 	.word	0x20008ac0
     7b0:	2000759b 	.word	0x2000759b
     7b4:	41008000 	.word	0x41008000
     7b8:	0000b225 	.word	0x0000b225
     7bc:	20007596 	.word	0x20007596
     7c0:	20008aa0 	.word	0x20008aa0
     7c4:	0000c057 	.word	0x0000c057
     7c8:	0000c052 	.word	0x0000c052
     7cc:	0000c125 	.word	0x0000c125
     7d0:	200075a0 	.word	0x200075a0
     7d4:	0000c05e 	.word	0x0000c05e
     7d8:	0000c137 	.word	0x0000c137
     7dc:	0000b259 	.word	0x0000b259
     7e0:	20007590 	.word	0x20007590
     7e4:	0000c14c 	.word	0x0000c14c
     7e8:	2000867c 	.word	0x2000867c
     7ec:	0000d9ca 	.word	0x0000d9ca
     7f0:	0000c162 	.word	0x0000c162
     7f4:	20007593 	.word	0x20007593
     7f8:	0000604d 	.word	0x0000604d
     7fc:	0000c187 	.word	0x0000c187
     800:	20008aa1 	.word	0x20008aa1
     804:	0000c092 	.word	0x0000c092
     808:	20008aa9 	.word	0x20008aa9
     80c:	0000c0bd 	.word	0x0000c0bd
     810:	20008266 	.word	0x20008266
     814:	00005485 	.word	0x00005485
     818:	20007595 	.word	0x20007595
     81c:	0000c0e2 	.word	0x0000c0e2
     820:	20007dce 	.word	0x20007dce
     824:	20007591 	.word	0x20007591
     828:	20008694 	.word	0x20008694
     82c:	00000365 	.word	0x00000365
			case CARD_NOTFITTED:
			default:
			xprintf("CARDA inserted but not identified\r\n");
     830:	486b      	ldr	r0, [pc, #428]	; (9e0 <read_boardvalues+0x4e0>)
			writeKSZreg(SPI_KSZ8794_PORT3CONTROL2, 0x00);
			delay_us(50);
			
			if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL2, 0x00))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL2] not correct\r\n"); }
				
			xprintf("CARDA has been REMOVED\r\n");
     832:	47b8      	blx	r7
		}
	}

	/* Detect change of status of Slot [B] daughter-card */
	if ((!cardB_old) && (cardB_present)) {
     834:	4f6b      	ldr	r7, [pc, #428]	; (9e4 <read_boardvalues+0x4e4>)
     836:	783b      	ldrb	r3, [r7, #0]
     838:	2b00      	cmp	r3, #0
     83a:	f040 80c5 	bne.w	9c8 <read_boardvalues+0x4c8>
     83e:	782a      	ldrb	r2, [r5, #0]
     840:	2a00      	cmp	r2, #0
     842:	f000 80c1 	beq.w	9c8 <read_boardvalues+0x4c8>
		/* Read the I2C device address on the card to establish type of card */
		
		counter_det = 10;
		while (counter_det--) {
			delay_ms(500);
     846:	f8df a218 	ldr.w	sl, [pc, #536]	; a60 <read_boardvalues+0x560>
			
			/* Kick the watchdog time-out facility */
			wdt_feed(&WDT_0);
			
			if (!(err = I2C_check_deviceID(PB24_CARDB_I2C_SDA, PB25_CARDB_I2C_CLK, 0x60))) {
     84a:	f8df 9218 	ldr.w	r9, [pc, #536]	; a64 <read_boardvalues+0x564>
     84e:	f04f 080b 	mov.w	r8, #11
		while (counter_det--) {
     852:	f1b8 0801 	subs.w	r8, r8, #1
     856:	d151      	bne.n	8fc <read_boardvalues+0x3fc>
			} else {
				cardB_type = CARD_NOTFITTED;
			}
		}
		
		if (err < 0) {
     858:	2c00      	cmp	r4, #0
     85a:	da5e      	bge.n	91a <read_boardvalues+0x41a>
			xprintf("Could not read I2C bus on CARDB for I2C_check_deviceID() [%i]\r\n", err);
     85c:	4621      	mov	r1, r4
     85e:	4862      	ldr	r0, [pc, #392]	; (9e8 <read_boardvalues+0x4e8>)
     860:	4b62      	ldr	r3, [pc, #392]	; (9ec <read_boardvalues+0x4ec>)
     862:	4798      	blx	r3
     864:	e059      	b.n	91a <read_boardvalues+0x41a>
			xprintf("CARDA is a MAXI IO\r\n");
     866:	4862      	ldr	r0, [pc, #392]	; (9f0 <read_boardvalues+0x4f0>)
     868:	e7e3      	b.n	832 <read_boardvalues+0x332>
			if ((err = I2C_configEXPANDER(PC27_CARDA_I2C_SDA,  PC28_CARDA_I2C_CLK) < 0)) {
     86a:	215c      	movs	r1, #92	; 0x5c
     86c:	205b      	movs	r0, #91	; 0x5b
     86e:	4b61      	ldr	r3, [pc, #388]	; (9f4 <read_boardvalues+0x4f4>)
     870:	4798      	blx	r3
     872:	2800      	cmp	r0, #0
     874:	ea4f 74d0 	mov.w	r4, r0, lsr #31
     878:	da02      	bge.n	880 <read_boardvalues+0x380>
				xprintf("Could NOT write to the Mini-IO Expander on CARDA:I2C [%i]\r\n", err);
     87a:	2101      	movs	r1, #1
     87c:	485e      	ldr	r0, [pc, #376]	; (9f8 <read_boardvalues+0x4f8>)
     87e:	47b8      	blx	r7
			xprintf("CARDA is a MINI IO\r\n");
     880:	485e      	ldr	r0, [pc, #376]	; (9fc <read_boardvalues+0x4fc>)
     882:	e7d6      	b.n	832 <read_boardvalues+0x332>
			xprintf("CARDA is a VIBRAPOINT\r\n");
     884:	485e      	ldr	r0, [pc, #376]	; (a00 <read_boardvalues+0x500>)
     886:	e7d4      	b.n	832 <read_boardvalues+0x332>
			if ((err = I2C_setGAIN(PC27_CARDA_I2C_SDA,  PC28_CARDA_I2C_CLK, ((CONFIG *)&settings_buffer)->gain_cardA) < 0)) {
     888:	4b5e      	ldr	r3, [pc, #376]	; (a04 <read_boardvalues+0x504>)
     88a:	4f58      	ldr	r7, [pc, #352]	; (9ec <read_boardvalues+0x4ec>)
     88c:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
     890:	4b5d      	ldr	r3, [pc, #372]	; (a08 <read_boardvalues+0x508>)
     892:	215c      	movs	r1, #92	; 0x5c
     894:	205b      	movs	r0, #91	; 0x5b
     896:	4798      	blx	r3
     898:	2800      	cmp	r0, #0
     89a:	ea4f 74d0 	mov.w	r4, r0, lsr #31
     89e:	da02      	bge.n	8a6 <read_boardvalues+0x3a6>
				xprintf("Could NOT write to the DAC Gain controller on CARDA:I2C [%i]\r\n", err);
     8a0:	2101      	movs	r1, #1
     8a2:	485a      	ldr	r0, [pc, #360]	; (a0c <read_boardvalues+0x50c>)
     8a4:	47b8      	blx	r7
			xprintf("CARDA is a VIBRATEK\r\n");
     8a6:	485a      	ldr	r0, [pc, #360]	; (a10 <read_boardvalues+0x510>)
     8a8:	e7c3      	b.n	832 <read_boardvalues+0x332>
			writeKSZreg(SPI_KSZ8794_PORT3CONTROL2, 0x06);
     8aa:	2106      	movs	r1, #6
     8ac:	2032      	movs	r0, #50	; 0x32
     8ae:	4b59      	ldr	r3, [pc, #356]	; (a14 <read_boardvalues+0x514>)
     8b0:	4f4e      	ldr	r7, [pc, #312]	; (9ec <read_boardvalues+0x4ec>)
     8b2:	4798      	blx	r3
			delay_us(50);
     8b4:	2032      	movs	r0, #50	; 0x32
     8b6:	4b58      	ldr	r3, [pc, #352]	; (a18 <read_boardvalues+0x518>)
     8b8:	4798      	blx	r3
			if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL2, 0x06))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL2] not correct\r\n"); }
     8ba:	2106      	movs	r1, #6
     8bc:	2032      	movs	r0, #50	; 0x32
     8be:	4b57      	ldr	r3, [pc, #348]	; (a1c <read_boardvalues+0x51c>)
     8c0:	4798      	blx	r3
     8c2:	b908      	cbnz	r0, 8c8 <read_boardvalues+0x3c8>
     8c4:	4856      	ldr	r0, [pc, #344]	; (a20 <read_boardvalues+0x520>)
     8c6:	47b8      	blx	r7
			xprintf("CARDA is a Power & Ethernet Daughter-Card\r\n");
     8c8:	4856      	ldr	r0, [pc, #344]	; (a24 <read_boardvalues+0x524>)
     8ca:	e7b2      	b.n	832 <read_boardvalues+0x332>
	} else if (!cardA_present) {
     8cc:	7837      	ldrb	r7, [r6, #0]
     8ce:	2f00      	cmp	r7, #0
     8d0:	d1b0      	bne.n	834 <read_boardvalues+0x334>
		cardA_type = CARD_NOTFITTED;
     8d2:	4a55      	ldr	r2, [pc, #340]	; (a28 <read_boardvalues+0x528>)
     8d4:	7017      	strb	r7, [r2, #0]
		if (cardA_old) {
     8d6:	2b00      	cmp	r3, #0
     8d8:	d0ac      	beq.n	834 <read_boardvalues+0x334>
			writeKSZreg(SPI_KSZ8794_PORT3CONTROL2, 0x00);
     8da:	4639      	mov	r1, r7
     8dc:	2032      	movs	r0, #50	; 0x32
     8de:	4b4d      	ldr	r3, [pc, #308]	; (a14 <read_boardvalues+0x514>)
     8e0:	4798      	blx	r3
			delay_us(50);
     8e2:	2032      	movs	r0, #50	; 0x32
     8e4:	4b4c      	ldr	r3, [pc, #304]	; (a18 <read_boardvalues+0x518>)
     8e6:	4798      	blx	r3
			if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL2, 0x00))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL2] not correct\r\n"); }
     8e8:	4639      	mov	r1, r7
     8ea:	2032      	movs	r0, #50	; 0x32
     8ec:	4b4b      	ldr	r3, [pc, #300]	; (a1c <read_boardvalues+0x51c>)
     8ee:	4f3f      	ldr	r7, [pc, #252]	; (9ec <read_boardvalues+0x4ec>)
     8f0:	4798      	blx	r3
     8f2:	b908      	cbnz	r0, 8f8 <read_boardvalues+0x3f8>
     8f4:	484a      	ldr	r0, [pc, #296]	; (a20 <read_boardvalues+0x520>)
     8f6:	47b8      	blx	r7
			xprintf("CARDA has been REMOVED\r\n");
     8f8:	484c      	ldr	r0, [pc, #304]	; (a2c <read_boardvalues+0x52c>)
     8fa:	e79a      	b.n	832 <read_boardvalues+0x332>
			delay_ms(500);
     8fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     900:	47d0      	blx	sl
			wdt_feed(&WDT_0);
     902:	4b4b      	ldr	r3, [pc, #300]	; (a30 <read_boardvalues+0x530>)
     904:	f8df b12c 	ldr.w	fp, [pc, #300]	; a34 <read_boardvalues+0x534>
     908:	4798      	blx	r3
			if (!(err = I2C_check_deviceID(PB24_CARDB_I2C_SDA, PB25_CARDB_I2C_CLK, 0x60))) {
     90a:	2260      	movs	r2, #96	; 0x60
     90c:	2139      	movs	r1, #57	; 0x39
     90e:	2038      	movs	r0, #56	; 0x38
     910:	47c8      	blx	r9
     912:	b960      	cbnz	r0, 92e <read_boardvalues+0x42e>
				cardB_type = CARD_VIBRATEK;
     914:	2201      	movs	r2, #1
				cardB_type = CARD_MINI_IO;
     916:	f88b 2000 	strb.w	r2, [fp]
		}
		
		/* Actions to be taken for each different card type */
		switch (cardB_type) {
     91a:	4b46      	ldr	r3, [pc, #280]	; (a34 <read_boardvalues+0x534>)
     91c:	4c33      	ldr	r4, [pc, #204]	; (9ec <read_boardvalues+0x4ec>)
     91e:	781b      	ldrb	r3, [r3, #0]
     920:	3b01      	subs	r3, #1
     922:	2b03      	cmp	r3, #3
     924:	d815      	bhi.n	952 <read_boardvalues+0x452>
     926:	e8df f003 	tbb	[pc, r3]
     92a:	3341      	.short	0x3341
     92c:	3f31      	.short	0x3f31
			} else if ((!(err = I2C_check_deviceID(PB24_CARDB_I2C_SDA, PB25_CARDB_I2C_CLK, 0x41))) && (!(err = I2C_check_deviceID(PB24_CARDB_I2C_SDA, PB25_CARDB_I2C_CLK, 0x68)))) {
     92e:	2241      	movs	r2, #65	; 0x41
     930:	2139      	movs	r1, #57	; 0x39
     932:	2038      	movs	r0, #56	; 0x38
     934:	47c8      	blx	r9
     936:	4604      	mov	r4, r0
     938:	b938      	cbnz	r0, 94a <read_boardvalues+0x44a>
     93a:	2268      	movs	r2, #104	; 0x68
     93c:	2139      	movs	r1, #57	; 0x39
     93e:	2038      	movs	r0, #56	; 0x38
     940:	47c8      	blx	r9
     942:	4604      	mov	r4, r0
     944:	b908      	cbnz	r0, 94a <read_boardvalues+0x44a>
				cardB_type = CARD_MINI_IO;
     946:	2202      	movs	r2, #2
     948:	e7e5      	b.n	916 <read_boardvalues+0x416>
				cardB_type = CARD_NOTFITTED;
     94a:	2200      	movs	r2, #0
     94c:	f88b 2000 	strb.w	r2, [fp]
     950:	e77f      	b.n	852 <read_boardvalues+0x352>
			case CARD_NOTFITTED:
			default:
			xprintf("CARDB inserted but not identified\r\n");
     952:	4839      	ldr	r0, [pc, #228]	; (a38 <read_boardvalues+0x538>)
			break;
			
			case CARD_MAXI_IO:
			xprintf("CARDB is a MAXI IO\r\n");
     954:	47a0      	blx	r4
			xprintf("CARDB has been REMOVED\r\n");
		}
	}

	/* Update the old live states so that next time round, we can detect any changes since this time */
	cardA_old = cardA_present;
     956:	9a09      	ldr	r2, [sp, #36]	; 0x24
     958:	7833      	ldrb	r3, [r6, #0]
     95a:	7013      	strb	r3, [r2, #0]
	cardB_old = cardB_present;
     95c:	782b      	ldrb	r3, [r5, #0]
     95e:	703b      	strb	r3, [r7, #0]
	old_tamper = tamper;
     960:	9b02      	ldr	r3, [sp, #8]
     962:	9a06      	ldr	r2, [sp, #24]
     964:	781b      	ldrb	r3, [r3, #0]
     966:	7013      	strb	r3, [r2, #0]
	old_link_port1 = link_port1;
     968:	9b03      	ldr	r3, [sp, #12]
     96a:	9a07      	ldr	r2, [sp, #28]
     96c:	781b      	ldrb	r3, [r3, #0]
     96e:	7013      	strb	r3, [r2, #0]
	old_link_port2 = link_port2;
     970:	9b04      	ldr	r3, [sp, #16]
     972:	9a08      	ldr	r2, [sp, #32]
     974:	781b      	ldrb	r3, [r3, #0]
     976:	7013      	strb	r3, [r2, #0]
	old_link_port3 = link_port3;
     978:	9b05      	ldr	r3, [sp, #20]
     97a:	781a      	ldrb	r2, [r3, #0]
     97c:	4b2f      	ldr	r3, [pc, #188]	; (a3c <read_boardvalues+0x53c>)
     97e:	701a      	strb	r2, [r3, #0]
	
	init_done = 1;
     980:	4b2f      	ldr	r3, [pc, #188]	; (a40 <read_boardvalues+0x540>)
     982:	2201      	movs	r2, #1
     984:	701a      	strb	r2, [r3, #0]
     986:	b00b      	add	sp, #44	; 0x2c
     988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xprintf("CARDB is a MAXI IO\r\n");
     98c:	482d      	ldr	r0, [pc, #180]	; (a44 <read_boardvalues+0x544>)
     98e:	e7e1      	b.n	954 <read_boardvalues+0x454>
			if ((err = I2C_configEXPANDER(PB24_CARDB_I2C_SDA,  PB25_CARDB_I2C_CLK) < 0)) {
     990:	2139      	movs	r1, #57	; 0x39
     992:	2038      	movs	r0, #56	; 0x38
     994:	4b17      	ldr	r3, [pc, #92]	; (9f4 <read_boardvalues+0x4f4>)
     996:	4798      	blx	r3
     998:	2800      	cmp	r0, #0
     99a:	da03      	bge.n	9a4 <read_boardvalues+0x4a4>
				xprintf("Could NOT write to the Mini-IO Expander on CARDB:I2C [%i]\r\n", err);
     99c:	2101      	movs	r1, #1
     99e:	482a      	ldr	r0, [pc, #168]	; (a48 <read_boardvalues+0x548>)
     9a0:	4b12      	ldr	r3, [pc, #72]	; (9ec <read_boardvalues+0x4ec>)
     9a2:	4798      	blx	r3
			xprintf("CARDB is a MINI IO\r\n");
     9a4:	4829      	ldr	r0, [pc, #164]	; (a4c <read_boardvalues+0x54c>)
     9a6:	e7d5      	b.n	954 <read_boardvalues+0x454>
			xprintf("CARDB is a VIBRAPOINT\r\n");
     9a8:	4829      	ldr	r0, [pc, #164]	; (a50 <read_boardvalues+0x550>)
     9aa:	e7d3      	b.n	954 <read_boardvalues+0x454>
			if ((err = I2C_setGAIN(PB24_CARDB_I2C_SDA,  PB25_CARDB_I2C_CLK, ((CONFIG *)&settings_buffer)->gain_cardB)) < 0) {
     9ac:	4b15      	ldr	r3, [pc, #84]	; (a04 <read_boardvalues+0x504>)
     9ae:	4c0f      	ldr	r4, [pc, #60]	; (9ec <read_boardvalues+0x4ec>)
     9b0:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
     9b4:	4b14      	ldr	r3, [pc, #80]	; (a08 <read_boardvalues+0x508>)
     9b6:	2139      	movs	r1, #57	; 0x39
     9b8:	2038      	movs	r0, #56	; 0x38
     9ba:	4798      	blx	r3
     9bc:	1e01      	subs	r1, r0, #0
     9be:	da01      	bge.n	9c4 <read_boardvalues+0x4c4>
				xprintf("Could NOT write to the DAC Gain controller on CARDB:I2C [%i]\r\n", err);
     9c0:	4824      	ldr	r0, [pc, #144]	; (a54 <read_boardvalues+0x554>)
     9c2:	47a0      	blx	r4
			xprintf("CARDB is a VIBRATEK\r\n");
     9c4:	4824      	ldr	r0, [pc, #144]	; (a58 <read_boardvalues+0x558>)
     9c6:	e7c5      	b.n	954 <read_boardvalues+0x454>
	} else if (!cardB_present) {
     9c8:	782a      	ldrb	r2, [r5, #0]
     9ca:	2a00      	cmp	r2, #0
     9cc:	d1c3      	bne.n	956 <read_boardvalues+0x456>
		cardB_type = CARD_NOTFITTED;
     9ce:	4919      	ldr	r1, [pc, #100]	; (a34 <read_boardvalues+0x534>)
     9d0:	700a      	strb	r2, [r1, #0]
		if (cardB_old) {
     9d2:	2b00      	cmp	r3, #0
     9d4:	d0bf      	beq.n	956 <read_boardvalues+0x456>
			xprintf("CARDB has been REMOVED\r\n");
     9d6:	4821      	ldr	r0, [pc, #132]	; (a5c <read_boardvalues+0x55c>)
     9d8:	4b04      	ldr	r3, [pc, #16]	; (9ec <read_boardvalues+0x4ec>)
     9da:	4798      	blx	r3
     9dc:	e7bb      	b.n	956 <read_boardvalues+0x456>
     9de:	bf00      	nop
     9e0:	0000c1c7 	.word	0x0000c1c7
     9e4:	200079b9 	.word	0x200079b9
     9e8:	0000c32d 	.word	0x0000c32d
     9ec:	00000395 	.word	0x00000395
     9f0:	0000c1eb 	.word	0x0000c1eb
     9f4:	00004849 	.word	0x00004849
     9f8:	0000c200 	.word	0x0000c200
     9fc:	0000c23c 	.word	0x0000c23c
     a00:	0000c251 	.word	0x0000c251
     a04:	200081dc 	.word	0x200081dc
     a08:	00005281 	.word	0x00005281
     a0c:	0000c269 	.word	0x0000c269
     a10:	0000c2a8 	.word	0x0000c2a8
     a14:	0000b259 	.word	0x0000b259
     a18:	0000122d 	.word	0x0000122d
     a1c:	0000b1e9 	.word	0x0000b1e9
     a20:	0000c2be 	.word	0x0000c2be
     a24:	0000c2e8 	.word	0x0000c2e8
     a28:	20007dce 	.word	0x20007dce
     a2c:	0000c314 	.word	0x0000c314
     a30:	00000365 	.word	0x00000365
     a34:	20008ab4 	.word	0x20008ab4
     a38:	0000c36d 	.word	0x0000c36d
     a3c:	2000867c 	.word	0x2000867c
     a40:	2000759c 	.word	0x2000759c
     a44:	0000c391 	.word	0x0000c391
     a48:	0000c3a6 	.word	0x0000c3a6
     a4c:	0000c3e2 	.word	0x0000c3e2
     a50:	0000c3f7 	.word	0x0000c3f7
     a54:	0000c40f 	.word	0x0000c40f
     a58:	0000c44e 	.word	0x0000c44e
     a5c:	0000c464 	.word	0x0000c464
     a60:	00001251 	.word	0x00001251
     a64:	0000604d 	.word	0x0000604d

00000a68 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     a68:	4770      	bx	lr
	...

00000a6c <Reset_Handler>:
{
     a6c:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     a6e:	4a0f      	ldr	r2, [pc, #60]	; (aac <Reset_Handler+0x40>)
     a70:	4b0f      	ldr	r3, [pc, #60]	; (ab0 <Reset_Handler+0x44>)
     a72:	429a      	cmp	r2, r3
     a74:	d10e      	bne.n	a94 <Reset_Handler+0x28>
{
     a76:	4b0f      	ldr	r3, [pc, #60]	; (ab4 <Reset_Handler+0x48>)
        for (pDest = &_szero; pDest < &_ezero;) {
     a78:	4a0f      	ldr	r2, [pc, #60]	; (ab8 <Reset_Handler+0x4c>)
                *pDest++ = 0;
     a7a:	2100      	movs	r1, #0
        for (pDest = &_szero; pDest < &_ezero;) {
     a7c:	4293      	cmp	r3, r2
     a7e:	d312      	bcc.n	aa6 <Reset_Handler+0x3a>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     a80:	4b0e      	ldr	r3, [pc, #56]	; (abc <Reset_Handler+0x50>)
     a82:	4a0f      	ldr	r2, [pc, #60]	; (ac0 <Reset_Handler+0x54>)
     a84:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     a88:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     a8a:	4b0e      	ldr	r3, [pc, #56]	; (ac4 <Reset_Handler+0x58>)
     a8c:	4798      	blx	r3
        main();
     a8e:	4b0e      	ldr	r3, [pc, #56]	; (ac8 <Reset_Handler+0x5c>)
     a90:	4798      	blx	r3
     a92:	e7fe      	b.n	a92 <Reset_Handler+0x26>
                for (; pDest < &_erelocate;) {
     a94:	490d      	ldr	r1, [pc, #52]	; (acc <Reset_Handler+0x60>)
     a96:	3a04      	subs	r2, #4
     a98:	428b      	cmp	r3, r1
     a9a:	d2ec      	bcs.n	a76 <Reset_Handler+0xa>
                        *pDest++ = *pSrc++;
     a9c:	f852 0f04 	ldr.w	r0, [r2, #4]!
     aa0:	f843 0b04 	str.w	r0, [r3], #4
     aa4:	e7f8      	b.n	a98 <Reset_Handler+0x2c>
                *pDest++ = 0;
     aa6:	f843 1b04 	str.w	r1, [r3], #4
     aaa:	e7e7      	b.n	a7c <Reset_Handler+0x10>
     aac:	0000f548 	.word	0x0000f548
     ab0:	20000000 	.word	0x20000000
     ab4:	200002c0 	.word	0x200002c0
     ab8:	2000962c 	.word	0x2000962c
     abc:	00000000 	.word	0x00000000
     ac0:	e000ed00 	.word	0xe000ed00
     ac4:	0000b2d5 	.word	0x0000b2d5
     ac8:	00008a39 	.word	0x00008a39
     acc:	200002b0 	.word	0x200002b0

00000ad0 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
     ad0:	b530      	push	{r4, r5, lr}
	uint8_t port = GPIO_PORT(gpio);
	uint8_t pin  = GPIO_PIN(gpio);

	if (function == GPIO_PIN_FUNCTION_OFF) {
     ad2:	1c4a      	adds	r2, r1, #1
	uint8_t pin  = GPIO_PIN(gpio);
     ad4:	b2c4      	uxtb	r4, r0
     ad6:	f3c0 1247 	ubfx	r2, r0, #5, #8
     ada:	4816      	ldr	r0, [pc, #88]	; (b34 <_gpio_set_pin_function+0x64>)
     adc:	f004 031f 	and.w	r3, r4, #31
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ae0:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
	if (function == GPIO_PIN_FUNCTION_OFF) {
     ae4:	d107      	bne.n	af6 <_gpio_set_pin_function+0x26>
     ae6:	4418      	add	r0, r3
     ae8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
	tmp &= ~PORT_PINCFG_PMUXEN;
     aec:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     af0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
     af4:	bd30      	pop	{r4, r5, pc}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     af6:	18c5      	adds	r5, r0, r3
     af8:	085b      	lsrs	r3, r3, #1
     afa:	f895 2040 	ldrb.w	r2, [r5, #64]	; 0x40
	tmp &= ~PORT_PINCFG_PMUXEN;
     afe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b02:	4418      	add	r0, r3
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b04:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b08:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b0c:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);

	} else {
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);

		if (pin & 1) {
     b10:	f014 0f01 	tst.w	r4, #1
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     b14:	bf19      	ittee	ne
     b16:	f003 030f 	andne.w	r3, r3, #15
	tmp |= PORT_PMUX_PMUXO(data);
     b1a:	ea43 1101 	orrne.w	r1, r3, r1, lsl #4
	tmp |= PORT_PMUX_PMUXE(data);
     b1e:	f001 010f 	andeq.w	r1, r1, #15
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     b22:	f003 03f0 	andeq.w	r3, r3, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXO(data);
     b26:	bf14      	ite	ne
     b28:	b2c9      	uxtbne	r1, r1
	tmp |= PORT_PMUX_PMUXE(data);
     b2a:	4319      	orreq	r1, r3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b2c:	f880 1030 	strb.w	r1, [r0, #48]	; 0x30
     b30:	bd30      	pop	{r4, r5, pc}
     b32:	bf00      	nop
     b34:	41008000 	.word	0x41008000

00000b38 <ADC_0_PORT_init>:
struct wdt_descriptor WDT_0;

struct mac_async_descriptor ETHERNET_MAC_0;

void ADC_0_PORT_init(void)
{
     b38:	b570      	push	{r4, r5, r6, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     b3a:	4c13      	ldr	r4, [pc, #76]	; (b88 <ADC_0_PORT_init+0x50>)
	_gpio_set_pin_function(pin, function);
     b3c:	4d13      	ldr	r5, [pc, #76]	; (b8c <ADC_0_PORT_init+0x54>)
     b3e:	4914      	ldr	r1, [pc, #80]	; (b90 <ADC_0_PORT_init+0x58>)
     b40:	2304      	movs	r3, #4
     b42:	6063      	str	r3, [r4, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b44:	f04f 4640 	mov.w	r6, #3221225472	; 0xc0000000
     b48:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     b4c:	62a3      	str	r3, [r4, #40]	; 0x28
     b4e:	2002      	movs	r0, #2
     b50:	62a6      	str	r6, [r4, #40]	; 0x28
     b52:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     b54:	2308      	movs	r3, #8
     b56:	6063      	str	r3, [r4, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     b5c:	62a3      	str	r3, [r4, #40]	; 0x28
     b5e:	490d      	ldr	r1, [pc, #52]	; (b94 <ADC_0_PORT_init+0x5c>)
     b60:	62a6      	str	r6, [r4, #40]	; 0x28
     b62:	2003      	movs	r0, #3
     b64:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     b66:	f44f 7380 	mov.w	r3, #256	; 0x100
     b6a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b6e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     b72:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
     b76:	f8c4 60a8 	str.w	r6, [r4, #168]	; 0xa8
     b7a:	462b      	mov	r3, r5
     b7c:	4906      	ldr	r1, [pc, #24]	; (b98 <ADC_0_PORT_init+0x60>)
     b7e:	2028      	movs	r0, #40	; 0x28
	gpio_set_pin_function(PA03, PINMUX_PA03B_ADC0_AIN1);

	// Disable digital pin circuitry
	gpio_set_pin_direction(PB08, GPIO_DIRECTION_OFF);
	gpio_set_pin_function(PB08, PINMUX_PB08B_ADC0_AIN2);
}
     b80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     b84:	4718      	bx	r3
     b86:	bf00      	nop
     b88:	41008000 	.word	0x41008000
     b8c:	00000ad1 	.word	0x00000ad1
     b90:	00020001 	.word	0x00020001
     b94:	00030001 	.word	0x00030001
     b98:	00280001 	.word	0x00280001

00000b9c <ADC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
     b9c:	4a04      	ldr	r2, [pc, #16]	; (bb0 <ADC_0_CLOCK_init+0x14>)
     b9e:	6a13      	ldr	r3, [r2, #32]
     ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     ba4:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     ba6:	4b03      	ldr	r3, [pc, #12]	; (bb4 <ADC_0_CLOCK_init+0x18>)
     ba8:	2240      	movs	r2, #64	; 0x40
     baa:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
     bae:	4770      	bx	lr
     bb0:	40000800 	.word	0x40000800
     bb4:	40001c00 	.word	0x40001c00

00000bb8 <ADC_0_init>:
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void ADC_0_init(void)
{
     bb8:	b510      	push	{r4, lr}
	ADC_0_CLOCK_init();
     bba:	4b05      	ldr	r3, [pc, #20]	; (bd0 <ADC_0_init+0x18>)
     bbc:	4798      	blx	r3
	ADC_0_PORT_init();
     bbe:	4b05      	ldr	r3, [pc, #20]	; (bd4 <ADC_0_init+0x1c>)
     bc0:	4798      	blx	r3
	adc_sync_init(&ADC_0, ADC0, (void *)NULL);
     bc2:	2200      	movs	r2, #0
     bc4:	4904      	ldr	r1, [pc, #16]	; (bd8 <ADC_0_init+0x20>)
     bc6:	4805      	ldr	r0, [pc, #20]	; (bdc <ADC_0_init+0x24>)
     bc8:	4b05      	ldr	r3, [pc, #20]	; (be0 <ADC_0_init+0x28>)
}
     bca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	adc_sync_init(&ADC_0, ADC0, (void *)NULL);
     bce:	4718      	bx	r3
     bd0:	00000b9d 	.word	0x00000b9d
     bd4:	00000b39 	.word	0x00000b39
     bd8:	43001c00 	.word	0x43001c00
     bdc:	2000748c 	.word	0x2000748c
     be0:	00001041 	.word	0x00001041

00000be4 <CRYPTOGRAPHY_0_init>:
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_AES;
     be4:	4a04      	ldr	r2, [pc, #16]	; (bf8 <CRYPTOGRAPHY_0_init+0x14>)
 * Enables AES peripheral, clocks and initializes AES driver
 */
void CRYPTOGRAPHY_0_init(void)
{
	hri_mclk_set_APBCMASK_AES_bit(MCLK);
	aes_sync_init(&CRYPTOGRAPHY_0, AES);
     be6:	4905      	ldr	r1, [pc, #20]	; (bfc <CRYPTOGRAPHY_0_init+0x18>)
     be8:	69d3      	ldr	r3, [r2, #28]
     bea:	4805      	ldr	r0, [pc, #20]	; (c00 <CRYPTOGRAPHY_0_init+0x1c>)
     bec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     bf0:	61d3      	str	r3, [r2, #28]
     bf2:	4b04      	ldr	r3, [pc, #16]	; (c04 <CRYPTOGRAPHY_0_init+0x20>)
     bf4:	4718      	bx	r3
     bf6:	bf00      	nop
     bf8:	40000800 	.word	0x40000800
     bfc:	42002400 	.word	0x42002400
     c00:	20007444 	.word	0x20007444
     c04:	00001145 	.word	0x00001145

00000c08 <CRC_0_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     c08:	4a04      	ldr	r2, [pc, #16]	; (c1c <CRC_0_init+0x14>)
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_0_init(void)
{
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
	crc_sync_init(&CRC_0, DSU);
     c0a:	4905      	ldr	r1, [pc, #20]	; (c20 <CRC_0_init+0x18>)
     c0c:	6993      	ldr	r3, [r2, #24]
     c0e:	4805      	ldr	r0, [pc, #20]	; (c24 <CRC_0_init+0x1c>)
     c10:	f043 0302 	orr.w	r3, r3, #2
     c14:	6193      	str	r3, [r2, #24]
     c16:	4b04      	ldr	r3, [pc, #16]	; (c28 <CRC_0_init+0x20>)
     c18:	4718      	bx	r3
     c1a:	bf00      	nop
     c1c:	40000800 	.word	0x40000800
     c20:	41002000 	.word	0x41002000
     c24:	20007480 	.word	0x20007480
     c28:	000011ed 	.word	0x000011ed

00000c2c <HASH_ALGORITHM_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_ICM;
     c2c:	4b04      	ldr	r3, [pc, #16]	; (c40 <HASH_ALGORITHM_0_CLOCK_init+0x14>)
     c2e:	691a      	ldr	r2, [r3, #16]
     c30:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
     c34:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_ICM;
     c36:	69da      	ldr	r2, [r3, #28]
     c38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
     c3c:	61da      	str	r2, [r3, #28]
     c3e:	4770      	bx	lr
     c40:	40000800 	.word	0x40000800

00000c44 <HASH_ALGORITHM_0_init>:
 * \brief SHA initialization function
 *
 * Enables SHA peripheral, clocks and initializes SHA driver
 */
void HASH_ALGORITHM_0_init(void)
{
     c44:	b510      	push	{r4, lr}
	HASH_ALGORITHM_0_CLOCK_init();
     c46:	4b04      	ldr	r3, [pc, #16]	; (c58 <HASH_ALGORITHM_0_init+0x14>)
     c48:	4798      	blx	r3
	sha_sync_init(&HASH_ALGORITHM_0, ICM);
     c4a:	4904      	ldr	r1, [pc, #16]	; (c5c <HASH_ALGORITHM_0_init+0x18>)
     c4c:	4804      	ldr	r0, [pc, #16]	; (c60 <HASH_ALGORITHM_0_init+0x1c>)
     c4e:	4b05      	ldr	r3, [pc, #20]	; (c64 <HASH_ALGORITHM_0_init+0x20>)
}
     c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	sha_sync_init(&HASH_ALGORITHM_0, ICM);
     c54:	4718      	bx	r3
     c56:	bf00      	nop
     c58:	00000c2d 	.word	0x00000c2d
     c5c:	42002c00 	.word	0x42002c00
     c60:	20007484 	.word	0x20007484
     c64:	00001669 	.word	0x00001669

00000c68 <FLASH_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
     c68:	4a02      	ldr	r2, [pc, #8]	; (c74 <FLASH_0_CLOCK_init+0xc>)
     c6a:	6913      	ldr	r3, [r2, #16]
     c6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     c70:	6113      	str	r3, [r2, #16]
     c72:	4770      	bx	lr
     c74:	40000800 	.word	0x40000800

00000c78 <FLASH_0_init>:

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}

void FLASH_0_init(void)
{
     c78:	b510      	push	{r4, lr}
	FLASH_0_CLOCK_init();
     c7a:	4b04      	ldr	r3, [pc, #16]	; (c8c <FLASH_0_init+0x14>)
     c7c:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
     c7e:	4904      	ldr	r1, [pc, #16]	; (c90 <FLASH_0_init+0x18>)
     c80:	4804      	ldr	r0, [pc, #16]	; (c94 <FLASH_0_init+0x1c>)
     c82:	4b05      	ldr	r3, [pc, #20]	; (c98 <FLASH_0_init+0x20>)
}
     c84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	flash_init(&FLASH_0, NVMCTRL);
     c88:	4718      	bx	r3
     c8a:	bf00      	nop
     c8c:	00000c69 	.word	0x00000c69
     c90:	41004000 	.word	0x41004000
     c94:	20007428 	.word	0x20007428
     c98:	000012bd 	.word	0x000012bd

00000c9c <USART_0_CLOCK_init>:
     c9c:	4b05      	ldr	r3, [pc, #20]	; (cb4 <USART_0_CLOCK_init+0x18>)
     c9e:	2240      	movs	r2, #64	; 0x40
     ca0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     ca4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     ca8:	4a03      	ldr	r2, [pc, #12]	; (cb8 <USART_0_CLOCK_init+0x1c>)
     caa:	6953      	ldr	r3, [r2, #20]
     cac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     cb0:	6153      	str	r3, [r2, #20]
     cb2:	4770      	bx	lr
     cb4:	40001c00 	.word	0x40001c00
     cb8:	40000800 	.word	0x40000800

00000cbc <USART_0_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void USART_0_PORT_init()
{
     cbc:	b510      	push	{r4, lr}
     cbe:	4c05      	ldr	r4, [pc, #20]	; (cd4 <USART_0_PORT_init+0x18>)
     cc0:	4905      	ldr	r1, [pc, #20]	; (cd8 <USART_0_PORT_init+0x1c>)
     cc2:	2008      	movs	r0, #8
     cc4:	47a0      	blx	r4
     cc6:	4623      	mov	r3, r4
     cc8:	4904      	ldr	r1, [pc, #16]	; (cdc <USART_0_PORT_init+0x20>)
     cca:	2009      	movs	r0, #9

	gpio_set_pin_function(PA08, PINMUX_PA08C_SERCOM0_PAD0);

	gpio_set_pin_function(PA09, PINMUX_PA09C_SERCOM0_PAD1);
}
     ccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     cd0:	4718      	bx	r3
     cd2:	bf00      	nop
     cd4:	00000ad1 	.word	0x00000ad1
     cd8:	00080002 	.word	0x00080002
     cdc:	00090002 	.word	0x00090002

00000ce0 <USART_0_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_0_init(void)
{
     ce0:	b513      	push	{r0, r1, r4, lr}
	USART_0_CLOCK_init();
     ce2:	4b07      	ldr	r3, [pc, #28]	; (d00 <USART_0_init+0x20>)
	usart_async_init(&USART_0, SERCOM0, USART_0_buffer, USART_0_BUFFER_SIZE, (void *)NULL);
     ce4:	4c07      	ldr	r4, [pc, #28]	; (d04 <USART_0_init+0x24>)
	USART_0_CLOCK_init();
     ce6:	4798      	blx	r3
	usart_async_init(&USART_0, SERCOM0, USART_0_buffer, USART_0_BUFFER_SIZE, (void *)NULL);
     ce8:	2300      	movs	r3, #0
     cea:	9300      	str	r3, [sp, #0]
     cec:	4a06      	ldr	r2, [pc, #24]	; (d08 <USART_0_init+0x28>)
     cee:	4907      	ldr	r1, [pc, #28]	; (d0c <USART_0_init+0x2c>)
     cf0:	4807      	ldr	r0, [pc, #28]	; (d10 <USART_0_init+0x30>)
     cf2:	2310      	movs	r3, #16
     cf4:	47a0      	blx	r4
	USART_0_PORT_init();
     cf6:	4b07      	ldr	r3, [pc, #28]	; (d14 <USART_0_init+0x34>)
}
     cf8:	b002      	add	sp, #8
     cfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	USART_0_PORT_init();
     cfe:	4718      	bx	r3
     d00:	00000c9d 	.word	0x00000c9d
     d04:	000019b1 	.word	0x000019b1
     d08:	2000030e 	.word	0x2000030e
     d0c:	40003000 	.word	0x40003000
     d10:	200074a8 	.word	0x200074a8
     d14:	00000cbd 	.word	0x00000cbd

00000d18 <USART_1_CLOCK_init>:
     d18:	4b05      	ldr	r3, [pc, #20]	; (d30 <USART_1_CLOCK_init+0x18>)
     d1a:	2240      	movs	r2, #64	; 0x40
     d1c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     d20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     d24:	4a03      	ldr	r2, [pc, #12]	; (d34 <USART_1_CLOCK_init+0x1c>)
     d26:	6a13      	ldr	r3, [r2, #32]
     d28:	f043 0302 	orr.w	r3, r3, #2
     d2c:	6213      	str	r3, [r2, #32]
     d2e:	4770      	bx	lr
     d30:	40001c00 	.word	0x40001c00
     d34:	40000800 	.word	0x40000800

00000d38 <USART_1_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void USART_1_PORT_init()
{
     d38:	b510      	push	{r4, lr}
     d3a:	4c05      	ldr	r4, [pc, #20]	; (d50 <USART_1_PORT_init+0x18>)
     d3c:	4905      	ldr	r1, [pc, #20]	; (d54 <USART_1_PORT_init+0x1c>)
     d3e:	2030      	movs	r0, #48	; 0x30
     d40:	47a0      	blx	r4
     d42:	4623      	mov	r3, r4
     d44:	4904      	ldr	r1, [pc, #16]	; (d58 <USART_1_PORT_init+0x20>)
     d46:	2031      	movs	r0, #49	; 0x31

	gpio_set_pin_function(PB16, PINMUX_PB16C_SERCOM5_PAD0);

	gpio_set_pin_function(PB17, PINMUX_PB17C_SERCOM5_PAD1);
}
     d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     d4c:	4718      	bx	r3
     d4e:	bf00      	nop
     d50:	00000ad1 	.word	0x00000ad1
     d54:	00300002 	.word	0x00300002
     d58:	00310002 	.word	0x00310002

00000d5c <USART_1_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_1_init(void)
{
     d5c:	b513      	push	{r0, r1, r4, lr}
	USART_1_CLOCK_init();
     d5e:	4b07      	ldr	r3, [pc, #28]	; (d7c <USART_1_init+0x20>)
	usart_async_init(&USART_1, SERCOM5, USART_1_buffer, USART_1_BUFFER_SIZE, (void *)NULL);
     d60:	4c07      	ldr	r4, [pc, #28]	; (d80 <USART_1_init+0x24>)
	USART_1_CLOCK_init();
     d62:	4798      	blx	r3
	usart_async_init(&USART_1, SERCOM5, USART_1_buffer, USART_1_BUFFER_SIZE, (void *)NULL);
     d64:	2300      	movs	r3, #0
     d66:	9300      	str	r3, [sp, #0]
     d68:	4a06      	ldr	r2, [pc, #24]	; (d84 <USART_1_init+0x28>)
     d6a:	4907      	ldr	r1, [pc, #28]	; (d88 <USART_1_init+0x2c>)
     d6c:	4807      	ldr	r0, [pc, #28]	; (d8c <USART_1_init+0x30>)
     d6e:	2310      	movs	r3, #16
     d70:	47a0      	blx	r4
	USART_1_PORT_init();
     d72:	4b07      	ldr	r3, [pc, #28]	; (d90 <USART_1_init+0x34>)
}
     d74:	b002      	add	sp, #8
     d76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	USART_1_PORT_init();
     d7a:	4718      	bx	r3
     d7c:	00000d19 	.word	0x00000d19
     d80:	000019b1 	.word	0x000019b1
     d84:	2000031e 	.word	0x2000031e
     d88:	43000400 	.word	0x43000400
     d8c:	200074f8 	.word	0x200074f8
     d90:	00000d39 	.word	0x00000d39

00000d94 <delay_driver_init>:

void delay_driver_init(void)
{
	delay_init(SysTick);
     d94:	4801      	ldr	r0, [pc, #4]	; (d9c <delay_driver_init+0x8>)
     d96:	4b02      	ldr	r3, [pc, #8]	; (da0 <delay_driver_init+0xc>)
     d98:	4718      	bx	r3
     d9a:	bf00      	nop
     d9c:	e000e010 	.word	0xe000e010
     da0:	0000121d 	.word	0x0000121d

00000da4 <USB_0_PORT_init>:

	timer_init(&TIMER_0, TC0, _tc_get_timer());
}

void USB_0_PORT_init(void)
{
     da4:	b570      	push	{r4, r5, r6, lr}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     da6:	4c13      	ldr	r4, [pc, #76]	; (df4 <USB_0_PORT_init+0x50>)
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     da8:	4a13      	ldr	r2, [pc, #76]	; (df8 <USB_0_PORT_init+0x54>)
     daa:	4d14      	ldr	r5, [pc, #80]	; (dfc <USB_0_PORT_init+0x58>)
     dac:	4914      	ldr	r1, [pc, #80]	; (e00 <USB_0_PORT_init+0x5c>)
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     dae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     db2:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     db6:	60a3      	str	r3, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     db8:	62a6      	str	r6, [r4, #40]	; 0x28
     dba:	62a2      	str	r2, [r4, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     dbc:	6163      	str	r3, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     dbe:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
     dc2:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
     dc6:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     dca:	2018      	movs	r0, #24
     dcc:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     dce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     dd2:	4a0c      	ldr	r2, [pc, #48]	; (e04 <USB_0_PORT_init+0x60>)
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     dd4:	60a3      	str	r3, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     dd6:	62a6      	str	r6, [r4, #40]	; 0x28
     dd8:	62a2      	str	r2, [r4, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     dda:	6163      	str	r3, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     ddc:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
     de0:	4909      	ldr	r1, [pc, #36]	; (e08 <USB_0_PORT_init+0x64>)
     de2:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
     de6:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
     dea:	2019      	movs	r0, #25
     dec:	462b      	mov	r3, r5
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
     dee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     df2:	4718      	bx	r3
     df4:	41008000 	.word	0x41008000
     df8:	c0000100 	.word	0xc0000100
     dfc:	00000ad1 	.word	0x00000ad1
     e00:	00180007 	.word	0x00180007
     e04:	c0000200 	.word	0xc0000200
     e08:	00190007 	.word	0x00190007

00000e0c <USB_0_CLOCK_init>:
     e0c:	4b07      	ldr	r3, [pc, #28]	; (e2c <USB_0_CLOCK_init+0x20>)
     e0e:	2240      	movs	r2, #64	; 0x40
     e10:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     e14:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
     e18:	691a      	ldr	r2, [r3, #16]
     e1a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     e1e:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     e20:	699a      	ldr	r2, [r3, #24]
     e22:	f042 0201 	orr.w	r2, r2, #1
     e26:	619a      	str	r2, [r3, #24]
     e28:	4770      	bx	lr
     e2a:	bf00      	nop
     e2c:	40001c00 	.word	0x40001c00

00000e30 <USB_0_init>:
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}

void USB_0_init(void)
{
     e30:	b510      	push	{r4, lr}
	USB_0_CLOCK_init();
     e32:	4b04      	ldr	r3, [pc, #16]	; (e44 <USB_0_init+0x14>)
     e34:	4798      	blx	r3
	usb_d_init();
     e36:	4b04      	ldr	r3, [pc, #16]	; (e48 <USB_0_init+0x18>)
     e38:	4798      	blx	r3
	USB_0_PORT_init();
     e3a:	4b04      	ldr	r3, [pc, #16]	; (e4c <USB_0_init+0x1c>)
}
     e3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	USB_0_PORT_init();
     e40:	4718      	bx	r3
     e42:	bf00      	nop
     e44:	00000e0d 	.word	0x00000e0d
     e48:	00001d11 	.word	0x00001d11
     e4c:	00000da5 	.word	0x00000da5

00000e50 <WDT_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     e50:	4a02      	ldr	r2, [pc, #8]	; (e5c <WDT_0_CLOCK_init+0xc>)
     e52:	6953      	ldr	r3, [r2, #20]
     e54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     e58:	6153      	str	r3, [r2, #20]
     e5a:	4770      	bx	lr
     e5c:	40000800 	.word	0x40000800

00000e60 <WDT_0_init>:
{
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
}

void WDT_0_init(void)
{
     e60:	b510      	push	{r4, lr}
	WDT_0_CLOCK_init();
     e62:	4b07      	ldr	r3, [pc, #28]	; (e80 <WDT_0_init+0x20>)
     e64:	4798      	blx	r3
	ASSERT(wdt && hw);
     e66:	2001      	movs	r0, #1
     e68:	4b06      	ldr	r3, [pc, #24]	; (e84 <WDT_0_init+0x24>)
     e6a:	4907      	ldr	r1, [pc, #28]	; (e88 <WDT_0_init+0x28>)
     e6c:	2248      	movs	r2, #72	; 0x48
     e6e:	4798      	blx	r3
	wdt->dev.hw = (void *)hw;
     e70:	4806      	ldr	r0, [pc, #24]	; (e8c <WDT_0_init+0x2c>)
     e72:	4b07      	ldr	r3, [pc, #28]	; (e90 <WDT_0_init+0x30>)
     e74:	6003      	str	r3, [r0, #0]
	wdt_init(&WDT_0, WDT);
}
     e76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return _wdt_init(&wdt->dev);
     e7a:	4b06      	ldr	r3, [pc, #24]	; (e94 <WDT_0_init+0x34>)
     e7c:	4718      	bx	r3
     e7e:	bf00      	nop
     e80:	00000e51 	.word	0x00000e51
     e84:	00002009 	.word	0x00002009
     e88:	0000c039 	.word	0x0000c039
     e8c:	20007490 	.word	0x20007490
     e90:	40002000 	.word	0x40002000
     e94:	000041f5 	.word	0x000041f5

00000e98 <ETHERNET_MAC_0_PORT_init>:

void ETHERNET_MAC_0_PORT_init(void)
{
     e98:	b510      	push	{r4, lr}
     e9a:	491d      	ldr	r1, [pc, #116]	; (f10 <ETHERNET_MAC_0_PORT_init+0x78>)
     e9c:	4c1d      	ldr	r4, [pc, #116]	; (f14 <ETHERNET_MAC_0_PORT_init+0x7c>)
     e9e:	2055      	movs	r0, #85	; 0x55
     ea0:	47a0      	blx	r4
     ea2:	491d      	ldr	r1, [pc, #116]	; (f18 <ETHERNET_MAC_0_PORT_init+0x80>)
     ea4:	2010      	movs	r0, #16
     ea6:	47a0      	blx	r4
     ea8:	491c      	ldr	r1, [pc, #112]	; (f1c <ETHERNET_MAC_0_PORT_init+0x84>)
     eaa:	204b      	movs	r0, #75	; 0x4b
     eac:	47a0      	blx	r4
     eae:	491c      	ldr	r1, [pc, #112]	; (f20 <ETHERNET_MAC_0_PORT_init+0x88>)
     eb0:	204c      	movs	r0, #76	; 0x4c
     eb2:	47a0      	blx	r4
     eb4:	491b      	ldr	r1, [pc, #108]	; (f24 <ETHERNET_MAC_0_PORT_init+0x8c>)
     eb6:	200d      	movs	r0, #13
     eb8:	47a0      	blx	r4
     eba:	491b      	ldr	r1, [pc, #108]	; (f28 <ETHERNET_MAC_0_PORT_init+0x90>)
     ebc:	200c      	movs	r0, #12
     ebe:	47a0      	blx	r4
     ec0:	491a      	ldr	r1, [pc, #104]	; (f2c <ETHERNET_MAC_0_PORT_init+0x94>)
     ec2:	204f      	movs	r0, #79	; 0x4f
     ec4:	47a0      	blx	r4
     ec6:	491a      	ldr	r1, [pc, #104]	; (f30 <ETHERNET_MAC_0_PORT_init+0x98>)
     ec8:	204e      	movs	r0, #78	; 0x4e
     eca:	47a0      	blx	r4
     ecc:	4919      	ldr	r1, [pc, #100]	; (f34 <ETHERNET_MAC_0_PORT_init+0x9c>)
     ece:	2052      	movs	r0, #82	; 0x52
     ed0:	47a0      	blx	r4
     ed2:	4919      	ldr	r1, [pc, #100]	; (f38 <ETHERNET_MAC_0_PORT_init+0xa0>)
     ed4:	2054      	movs	r0, #84	; 0x54
     ed6:	47a0      	blx	r4
     ed8:	4918      	ldr	r1, [pc, #96]	; (f3c <ETHERNET_MAC_0_PORT_init+0xa4>)
     eda:	200f      	movs	r0, #15
     edc:	47a0      	blx	r4
     ede:	4918      	ldr	r1, [pc, #96]	; (f40 <ETHERNET_MAC_0_PORT_init+0xa8>)
     ee0:	2012      	movs	r0, #18
     ee2:	47a0      	blx	r4
     ee4:	4917      	ldr	r1, [pc, #92]	; (f44 <ETHERNET_MAC_0_PORT_init+0xac>)
     ee6:	2013      	movs	r0, #19
     ee8:	47a0      	blx	r4
     eea:	4917      	ldr	r1, [pc, #92]	; (f48 <ETHERNET_MAC_0_PORT_init+0xb0>)
     eec:	2050      	movs	r0, #80	; 0x50
     eee:	47a0      	blx	r4
     ef0:	4916      	ldr	r1, [pc, #88]	; (f4c <ETHERNET_MAC_0_PORT_init+0xb4>)
     ef2:	2051      	movs	r0, #81	; 0x51
     ef4:	47a0      	blx	r4
     ef6:	4916      	ldr	r1, [pc, #88]	; (f50 <ETHERNET_MAC_0_PORT_init+0xb8>)
     ef8:	200e      	movs	r0, #14
     efa:	47a0      	blx	r4
     efc:	4915      	ldr	r1, [pc, #84]	; (f54 <ETHERNET_MAC_0_PORT_init+0xbc>)
     efe:	2011      	movs	r0, #17
     f00:	47a0      	blx	r4
     f02:	4623      	mov	r3, r4
     f04:	4914      	ldr	r1, [pc, #80]	; (f58 <ETHERNET_MAC_0_PORT_init+0xc0>)
     f06:	2053      	movs	r0, #83	; 0x53
	gpio_set_pin_function(PC16, PINMUX_PC16L_GMAC_GTX2);
	gpio_set_pin_function(PC17, PINMUX_PC17L_GMAC_GTX3);
	gpio_set_pin_function(PA14, PINMUX_PA14L_GMAC_GTXCK);
	gpio_set_pin_function(PA17, PINMUX_PA17L_GMAC_GTXEN);
	gpio_set_pin_function(PC19, PINMUX_PC19L_GMAC_GTXER);
}
     f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     f0c:	4718      	bx	r3
     f0e:	bf00      	nop
     f10:	0055000b 	.word	0x0055000b
     f14:	00000ad1 	.word	0x00000ad1
     f18:	0010000b 	.word	0x0010000b
     f1c:	004b000b 	.word	0x004b000b
     f20:	004c000b 	.word	0x004c000b
     f24:	000d000b 	.word	0x000d000b
     f28:	000c000b 	.word	0x000c000b
     f2c:	004f000b 	.word	0x004f000b
     f30:	004e000b 	.word	0x004e000b
     f34:	0052000b 	.word	0x0052000b
     f38:	0054000b 	.word	0x0054000b
     f3c:	000f000b 	.word	0x000f000b
     f40:	0012000b 	.word	0x0012000b
     f44:	0013000b 	.word	0x0013000b
     f48:	0050000b 	.word	0x0050000b
     f4c:	0051000b 	.word	0x0051000b
     f50:	000e000b 	.word	0x000e000b
     f54:	0011000b 	.word	0x0011000b
     f58:	0053000b 	.word	0x0053000b

00000f5c <ETHERNET_MAC_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_GMAC;
     f5c:	4b04      	ldr	r3, [pc, #16]	; (f70 <ETHERNET_MAC_0_CLOCK_init+0x14>)
     f5e:	691a      	ldr	r2, [r3, #16]
     f60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
     f64:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_GMAC;
     f66:	69da      	ldr	r2, [r3, #28]
     f68:	f042 0204 	orr.w	r2, r2, #4
     f6c:	61da      	str	r2, [r3, #28]
     f6e:	4770      	bx	lr
     f70:	40000800 	.word	0x40000800

00000f74 <ETHERNET_MAC_0_init>:
	hri_mclk_set_AHBMASK_GMAC_bit(MCLK);
	hri_mclk_set_APBCMASK_GMAC_bit(MCLK);
}

void ETHERNET_MAC_0_init(void)
{
     f74:	b510      	push	{r4, lr}
	ETHERNET_MAC_0_CLOCK_init();
     f76:	4b05      	ldr	r3, [pc, #20]	; (f8c <ETHERNET_MAC_0_init+0x18>)
     f78:	4798      	blx	r3
	mac_async_init(&ETHERNET_MAC_0, GMAC);
     f7a:	4b05      	ldr	r3, [pc, #20]	; (f90 <ETHERNET_MAC_0_init+0x1c>)
     f7c:	4905      	ldr	r1, [pc, #20]	; (f94 <ETHERNET_MAC_0_init+0x20>)
     f7e:	4806      	ldr	r0, [pc, #24]	; (f98 <ETHERNET_MAC_0_init+0x24>)
     f80:	4798      	blx	r3
	ETHERNET_MAC_0_PORT_init();
     f82:	4b06      	ldr	r3, [pc, #24]	; (f9c <ETHERNET_MAC_0_init+0x28>)
}
     f84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ETHERNET_MAC_0_PORT_init();
     f88:	4718      	bx	r3
     f8a:	bf00      	nop
     f8c:	00000f5d 	.word	0x00000f5d
     f90:	00001579 	.word	0x00001579
     f94:	42000800 	.word	0x42000800
     f98:	20007548 	.word	0x20007548
     f9c:	00000e99 	.word	0x00000e99

00000fa0 <system_init>:

void system_init(void)
{
     fa0:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     fa2:	4b15      	ldr	r3, [pc, #84]	; (ff8 <system_init+0x58>)
     fa4:	4798      	blx	r3
	init_mcu();
	ADC_0_init();
     fa6:	4b15      	ldr	r3, [pc, #84]	; (ffc <system_init+0x5c>)
     fa8:	4798      	blx	r3
	CRYPTOGRAPHY_0_init();
     faa:	4b15      	ldr	r3, [pc, #84]	; (1000 <system_init+0x60>)
     fac:	4798      	blx	r3
	CRC_0_init();
     fae:	4b15      	ldr	r3, [pc, #84]	; (1004 <system_init+0x64>)
     fb0:	4798      	blx	r3
	HASH_ALGORITHM_0_init();
     fb2:	4b15      	ldr	r3, [pc, #84]	; (1008 <system_init+0x68>)
     fb4:	4798      	blx	r3
	FLASH_0_init();
     fb6:	4b15      	ldr	r3, [pc, #84]	; (100c <system_init+0x6c>)
     fb8:	4798      	blx	r3
	USART_0_init();
     fba:	4b15      	ldr	r3, [pc, #84]	; (1010 <system_init+0x70>)
     fbc:	4798      	blx	r3
	USART_1_init();
     fbe:	4b15      	ldr	r3, [pc, #84]	; (1014 <system_init+0x74>)
     fc0:	4798      	blx	r3
	delay_driver_init();
     fc2:	4b15      	ldr	r3, [pc, #84]	; (1018 <system_init+0x78>)
     fc4:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     fc6:	4a15      	ldr	r2, [pc, #84]	; (101c <system_init+0x7c>)
     fc8:	6953      	ldr	r3, [r2, #20]
     fca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     fce:	6153      	str	r3, [r2, #20]
     fd0:	4b13      	ldr	r3, [pc, #76]	; (1020 <system_init+0x80>)
     fd2:	2240      	movs	r2, #64	; 0x40
     fd4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	timer_init(&TIMER_0, TC0, _tc_get_timer());
     fd8:	4b12      	ldr	r3, [pc, #72]	; (1024 <system_init+0x84>)
     fda:	4798      	blx	r3
     fdc:	4912      	ldr	r1, [pc, #72]	; (1028 <system_init+0x88>)
     fde:	4b13      	ldr	r3, [pc, #76]	; (102c <system_init+0x8c>)
     fe0:	4602      	mov	r2, r0
     fe2:	4813      	ldr	r0, [pc, #76]	; (1030 <system_init+0x90>)
     fe4:	4798      	blx	r3
	TIMER_0_init();
	USB_0_init();
     fe6:	4b13      	ldr	r3, [pc, #76]	; (1034 <system_init+0x94>)
     fe8:	4798      	blx	r3
	WDT_0_init();
     fea:	4b13      	ldr	r3, [pc, #76]	; (1038 <system_init+0x98>)
     fec:	4798      	blx	r3
	ETHERNET_MAC_0_init();
     fee:	4b13      	ldr	r3, [pc, #76]	; (103c <system_init+0x9c>)
}
     ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ETHERNET_MAC_0_init();
     ff4:	4718      	bx	r3
     ff6:	bf00      	nop
     ff8:	00002389 	.word	0x00002389
     ffc:	00000bb9 	.word	0x00000bb9
    1000:	00000be5 	.word	0x00000be5
    1004:	00000c09 	.word	0x00000c09
    1008:	00000c45 	.word	0x00000c45
    100c:	00000c79 	.word	0x00000c79
    1010:	00000ce1 	.word	0x00000ce1
    1014:	00000d5d 	.word	0x00000d5d
    1018:	00000d95 	.word	0x00000d95
    101c:	40000800 	.word	0x40000800
    1020:	40001c00 	.word	0x40001c00
    1024:	00003317 	.word	0x00003317
    1028:	40003800 	.word	0x40003800
    102c:	00001751 	.word	0x00001751
    1030:	20007564 	.word	0x20007564
    1034:	00000e31 	.word	0x00000e31
    1038:	00000e61 	.word	0x00000e61
    103c:	00000f75 	.word	0x00000f75

00001040 <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
    1040:	b570      	push	{r4, r5, r6, lr}
    1042:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    1044:	4604      	mov	r4, r0
    1046:	b160      	cbz	r0, 1062 <adc_sync_init+0x22>
    1048:	1c08      	adds	r0, r1, #0
    104a:	bf18      	it	ne
    104c:	2001      	movne	r0, #1
    104e:	4905      	ldr	r1, [pc, #20]	; (1064 <adc_sync_init+0x24>)
    1050:	4b05      	ldr	r3, [pc, #20]	; (1068 <adc_sync_init+0x28>)
    1052:	2239      	movs	r2, #57	; 0x39
    1054:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
    1056:	4629      	mov	r1, r5
    1058:	4620      	mov	r0, r4
    105a:	4b04      	ldr	r3, [pc, #16]	; (106c <adc_sync_init+0x2c>)
}
    105c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return _adc_sync_init(&descr->device, hw);
    1060:	4718      	bx	r3
    1062:	e7f4      	b.n	104e <adc_sync_init+0xe>
    1064:	0000c47d 	.word	0x0000c47d
    1068:	00002009 	.word	0x00002009
    106c:	00002275 	.word	0x00002275

00001070 <adc_sync_enable_channel>:

/**
 * \brief Enable ADC
 */
int32_t adc_sync_enable_channel(struct adc_sync_descriptor *const descr, const uint8_t channel)
{
    1070:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr);
    1072:	4604      	mov	r4, r0
    1074:	3000      	adds	r0, #0
    1076:	bf18      	it	ne
    1078:	2001      	movne	r0, #1
{
    107a:	460d      	mov	r5, r1
	ASSERT(descr);
    107c:	224e      	movs	r2, #78	; 0x4e
    107e:	4904      	ldr	r1, [pc, #16]	; (1090 <adc_sync_enable_channel+0x20>)
    1080:	4b04      	ldr	r3, [pc, #16]	; (1094 <adc_sync_enable_channel+0x24>)
    1082:	4798      	blx	r3
	_adc_sync_enable_channel(&descr->device, channel);
    1084:	4620      	mov	r0, r4
    1086:	4629      	mov	r1, r5
    1088:	4b03      	ldr	r3, [pc, #12]	; (1098 <adc_sync_enable_channel+0x28>)
    108a:	4798      	blx	r3

	return ERR_NONE;
}
    108c:	2000      	movs	r0, #0
    108e:	bd38      	pop	{r3, r4, r5, pc}
    1090:	0000c47d 	.word	0x0000c47d
    1094:	00002009 	.word	0x00002009
    1098:	000022ad 	.word	0x000022ad

0000109c <adc_sync_read_channel>:
/*
 * \brief Read data from ADC
 */
int32_t adc_sync_read_channel(struct adc_sync_descriptor *const descr, const uint8_t channel, uint8_t *const buffer,
                              const uint16_t length)
{
    109c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    10a0:	4688      	mov	r8, r1
    10a2:	4617      	mov	r7, r2
    10a4:	461d      	mov	r5, r3
	uint8_t  data_size;
	uint16_t offset = 0;

	ASSERT(descr && buffer && length);
    10a6:	4604      	mov	r4, r0
    10a8:	2800      	cmp	r0, #0
    10aa:	d03b      	beq.n	1124 <adc_sync_read_channel+0x88>
    10ac:	2a00      	cmp	r2, #0
    10ae:	d03a      	beq.n	1126 <adc_sync_read_channel+0x8a>
    10b0:	1c18      	adds	r0, r3, #0
    10b2:	bf18      	it	ne
    10b4:	2001      	movne	r0, #1
    10b6:	2267      	movs	r2, #103	; 0x67
    10b8:	491c      	ldr	r1, [pc, #112]	; (112c <adc_sync_read_channel+0x90>)
    10ba:	f8df 907c 	ldr.w	r9, [pc, #124]	; 1138 <adc_sync_read_channel+0x9c>
		_adc_sync_convert(&descr->device);

		while (!_adc_sync_is_channel_conversion_done(&descr->device, channel))
			;

		result         = _adc_sync_read_channel_data(&descr->device, channel);
    10be:	f8df b07c 	ldr.w	fp, [pc, #124]	; 113c <adc_sync_read_channel+0xa0>
	ASSERT(descr && buffer && length);
    10c2:	47c8      	blx	r9
	data_size = _adc_sync_get_data_size(&descr->device);
    10c4:	4b1a      	ldr	r3, [pc, #104]	; (1130 <adc_sync_read_channel+0x94>)
    10c6:	4620      	mov	r0, r4
    10c8:	4798      	blx	r3
    10ca:	4606      	mov	r6, r0
	ASSERT(!(length % data_size));
    10cc:	fb95 f0f0 	sdiv	r0, r5, r0
    10d0:	fb06 5010 	mls	r0, r6, r0, r5
    10d4:	fab0 f080 	clz	r0, r0
    10d8:	2269      	movs	r2, #105	; 0x69
    10da:	4914      	ldr	r1, [pc, #80]	; (112c <adc_sync_read_channel+0x90>)
    10dc:	0940      	lsrs	r0, r0, #5
    10de:	47c8      	blx	r9
		_adc_sync_convert(&descr->device);
    10e0:	f8df 905c 	ldr.w	r9, [pc, #92]	; 1140 <adc_sync_read_channel+0xa4>
	uint16_t offset = 0;
    10e4:	f04f 0a00 	mov.w	sl, #0
		_adc_sync_convert(&descr->device);
    10e8:	4620      	mov	r0, r4
    10ea:	47c8      	blx	r9
		while (!_adc_sync_is_channel_conversion_done(&descr->device, channel))
    10ec:	4641      	mov	r1, r8
    10ee:	4620      	mov	r0, r4
    10f0:	4b10      	ldr	r3, [pc, #64]	; (1134 <adc_sync_read_channel+0x98>)
    10f2:	4798      	blx	r3
    10f4:	2800      	cmp	r0, #0
    10f6:	d0f9      	beq.n	10ec <adc_sync_read_channel+0x50>
		result         = _adc_sync_read_channel_data(&descr->device, channel);
    10f8:	4641      	mov	r1, r8
    10fa:	4620      	mov	r0, r4
    10fc:	47d8      	blx	fp
		buffer[offset] = result;
		if (1 < data_size) {
    10fe:	2e01      	cmp	r6, #1
			buffer[offset + 1] = result >> 8;
    1100:	bf88      	it	hi
    1102:	eb07 020a 	addhi.w	r2, r7, sl
    1106:	eb0a 0306 	add.w	r3, sl, r6
		buffer[offset] = result;
    110a:	f807 000a 	strb.w	r0, [r7, sl]
			buffer[offset + 1] = result >> 8;
    110e:	bf88      	it	hi
    1110:	0a00      	lsrhi	r0, r0, #8
    1112:	fa1f fa83 	uxth.w	sl, r3
    1116:	bf88      	it	hi
    1118:	7050      	strbhi	r0, [r2, #1]
		}
		offset += data_size;
	} while (offset < length);
    111a:	4555      	cmp	r5, sl
    111c:	d8e4      	bhi.n	10e8 <adc_sync_read_channel+0x4c>

	return offset;
}
    111e:	4650      	mov	r0, sl
    1120:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1124:	e7c7      	b.n	10b6 <adc_sync_read_channel+0x1a>
	ASSERT(descr && buffer && length);
    1126:	4610      	mov	r0, r2
    1128:	e7c5      	b.n	10b6 <adc_sync_read_channel+0x1a>
    112a:	bf00      	nop
    112c:	0000c47d 	.word	0x0000c47d
    1130:	000022b9 	.word	0x000022b9
    1134:	000022cb 	.word	0x000022cb
    1138:	00002009 	.word	0x00002009
    113c:	000022f5 	.word	0x000022f5
    1140:	000022d9 	.word	0x000022d9

00001144 <aes_sync_init>:
                                                          uint8_t *iv, uint32_t *iv_ofst);
/**
 * \brief Initialize AES.
 */
int32_t aes_sync_init(struct aes_sync_descriptor *descr, void *const hw)
{
    1144:	b570      	push	{r4, r5, r6, lr}
    1146:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    1148:	4604      	mov	r4, r0
    114a:	b160      	cbz	r0, 1166 <aes_sync_init+0x22>
    114c:	1c08      	adds	r0, r1, #0
    114e:	bf18      	it	ne
    1150:	2001      	movne	r0, #1
    1152:	4905      	ldr	r1, [pc, #20]	; (1168 <aes_sync_init+0x24>)
    1154:	4b05      	ldr	r3, [pc, #20]	; (116c <aes_sync_init+0x28>)
    1156:	2232      	movs	r2, #50	; 0x32
    1158:	4798      	blx	r3

	return _aes_sync_init(&descr->dev, hw);
    115a:	4629      	mov	r1, r5
    115c:	4620      	mov	r0, r4
    115e:	4b04      	ldr	r3, [pc, #16]	; (1170 <aes_sync_init+0x2c>)
}
    1160:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return _aes_sync_init(&descr->dev, hw);
    1164:	4718      	bx	r3
    1166:	e7f4      	b.n	1152 <aes_sync_init+0xe>
    1168:	0000c497 	.word	0x0000c497
    116c:	00002009 	.word	0x00002009
    1170:	000022ff 	.word	0x000022ff

00001174 <aes_sync_enable>:

/**
 * \brief Enable AES
 */
int32_t aes_sync_enable(struct aes_sync_descriptor *descr)
{
    1174:	b510      	push	{r4, lr}
	ASSERT(descr);
    1176:	4604      	mov	r4, r0
    1178:	3000      	adds	r0, #0
    117a:	bf18      	it	ne
    117c:	2001      	movne	r0, #1
    117e:	4b04      	ldr	r3, [pc, #16]	; (1190 <aes_sync_enable+0x1c>)
    1180:	4904      	ldr	r1, [pc, #16]	; (1194 <aes_sync_enable+0x20>)
    1182:	2246      	movs	r2, #70	; 0x46
    1184:	4798      	blx	r3

	return _aes_sync_enable(&descr->dev);
    1186:	4620      	mov	r0, r4
    1188:	4b03      	ldr	r3, [pc, #12]	; (1198 <aes_sync_enable+0x24>)
}
    118a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return _aes_sync_enable(&descr->dev);
    118e:	4718      	bx	r3
    1190:	00002009 	.word	0x00002009
    1194:	0000c497 	.word	0x0000c497
    1198:	0000230f 	.word	0x0000230f

0000119c <aes_sync_set_encrypt_key>:

/**
 * \brief              Set AES Key (encryption)
 */
int32_t aes_sync_set_encrypt_key(struct aes_sync_descriptor *descr, const uint8_t *key, const enum aes_keysize size)
{
    119c:	b570      	push	{r4, r5, r6, lr}
    119e:	460d      	mov	r5, r1
    11a0:	4616      	mov	r6, r2
	ASSERT(descr && key);
    11a2:	4604      	mov	r4, r0
    11a4:	b168      	cbz	r0, 11c2 <aes_sync_set_encrypt_key+0x26>
    11a6:	1c08      	adds	r0, r1, #0
    11a8:	bf18      	it	ne
    11aa:	2001      	movne	r0, #1
    11ac:	225a      	movs	r2, #90	; 0x5a
    11ae:	4905      	ldr	r1, [pc, #20]	; (11c4 <aes_sync_set_encrypt_key+0x28>)
    11b0:	4b05      	ldr	r3, [pc, #20]	; (11c8 <aes_sync_set_encrypt_key+0x2c>)
    11b2:	4798      	blx	r3
	return _aes_sync_set_key(&descr->dev, key, size);
    11b4:	4632      	mov	r2, r6
    11b6:	4629      	mov	r1, r5
    11b8:	4620      	mov	r0, r4
    11ba:	4b04      	ldr	r3, [pc, #16]	; (11cc <aes_sync_set_encrypt_key+0x30>)
}
    11bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return _aes_sync_set_key(&descr->dev, key, size);
    11c0:	4718      	bx	r3
    11c2:	e7f3      	b.n	11ac <aes_sync_set_encrypt_key+0x10>
    11c4:	0000c497 	.word	0x0000c497
    11c8:	00002009 	.word	0x00002009
    11cc:	00002315 	.word	0x00002315

000011d0 <atomic_enter_critical>:
 */
__attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    11d0:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    11d4:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    11d6:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    11d8:	f3bf 8f5f 	dmb	sy
    11dc:	4770      	bx	lr

000011de <atomic_leave_critical>:
    11de:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    11e2:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    11e4:	f383 8810 	msr	PRIMASK, r3
    11e8:	4770      	bx	lr
	...

000011ec <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    11ec:	b570      	push	{r4, r5, r6, lr}
    11ee:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    11f0:	4604      	mov	r4, r0
    11f2:	b160      	cbz	r0, 120e <crc_sync_init+0x22>
    11f4:	1c08      	adds	r0, r1, #0
    11f6:	bf18      	it	ne
    11f8:	2001      	movne	r0, #1
    11fa:	4905      	ldr	r1, [pc, #20]	; (1210 <crc_sync_init+0x24>)
    11fc:	4b05      	ldr	r3, [pc, #20]	; (1214 <crc_sync_init+0x28>)
    11fe:	222b      	movs	r2, #43	; 0x2b
    1200:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    1202:	4629      	mov	r1, r5
    1204:	4620      	mov	r0, r4
    1206:	4b04      	ldr	r3, [pc, #16]	; (1218 <crc_sync_init+0x2c>)
}
    1208:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return _crc_sync_init(&descr->dev, hw);
    120c:	4718      	bx	r3
    120e:	e7f4      	b.n	11fa <crc_sync_init+0xe>
    1210:	0000c4b1 	.word	0x0000c4b1
    1214:	00002009 	.word	0x00002009
    1218:	000025d9 	.word	0x000025d9

0000121c <delay_init>:
/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
	_delay_init(hardware = hw);
    121c:	4b01      	ldr	r3, [pc, #4]	; (1224 <delay_init+0x8>)
    121e:	6018      	str	r0, [r3, #0]
    1220:	4b01      	ldr	r3, [pc, #4]	; (1228 <delay_init+0xc>)
    1222:	4718      	bx	r3
    1224:	20000330 	.word	0x20000330
    1228:	00003139 	.word	0x00003139

0000122c <delay_us>:
/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
	_delay_cycles(hardware, _get_cycles_for_us(us));
    122c:	4b05      	ldr	r3, [pc, #20]	; (1244 <delay_us+0x18>)
{
    122e:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
    1230:	681c      	ldr	r4, [r3, #0]
    1232:	4b05      	ldr	r3, [pc, #20]	; (1248 <delay_us+0x1c>)
    1234:	4798      	blx	r3
    1236:	4b05      	ldr	r3, [pc, #20]	; (124c <delay_us+0x20>)
    1238:	4601      	mov	r1, r0
    123a:	4620      	mov	r0, r4
}
    123c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
    1240:	4718      	bx	r3
    1242:	bf00      	nop
    1244:	20000330 	.word	0x20000330
    1248:	0000236d 	.word	0x0000236d
    124c:	0000314d 	.word	0x0000314d

00001250 <delay_ms>:
/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    1250:	4b05      	ldr	r3, [pc, #20]	; (1268 <delay_ms+0x18>)
{
    1252:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    1254:	681c      	ldr	r4, [r3, #0]
    1256:	4b05      	ldr	r3, [pc, #20]	; (126c <delay_ms+0x1c>)
    1258:	4798      	blx	r3
    125a:	4b05      	ldr	r3, [pc, #20]	; (1270 <delay_ms+0x20>)
    125c:	4601      	mov	r1, r0
    125e:	4620      	mov	r0, r4
}
    1260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    1264:	4718      	bx	r3
    1266:	bf00      	nop
    1268:	20000330 	.word	0x20000330
    126c:	0000237f 	.word	0x0000237f
    1270:	0000314d 	.word	0x0000314d

00001274 <flash_ready>:
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
    1274:	6943      	ldr	r3, [r0, #20]
    1276:	b103      	cbz	r3, 127a <flash_ready+0x6>
		descr->callbacks.cb_ready(descr);
    1278:	4718      	bx	r3
    127a:	4770      	bx	lr

0000127c <flash_error>:
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
    127c:	6983      	ldr	r3, [r0, #24]
    127e:	b103      	cbz	r3, 1282 <flash_error+0x6>
		descr->callbacks.cb_error(descr);
    1280:	4718      	bx	r3
    1282:	4770      	bx	lr

00001284 <flash_is_address_aligned>:
{
    1284:	b538      	push	{r3, r4, r5, lr}
	ASSERT(flash);
    1286:	4605      	mov	r5, r0
    1288:	3000      	adds	r0, #0
    128a:	bf18      	it	ne
    128c:	2001      	movne	r0, #1
{
    128e:	460c      	mov	r4, r1
	ASSERT(flash);
    1290:	f240 1217 	movw	r2, #279	; 0x117
    1294:	4906      	ldr	r1, [pc, #24]	; (12b0 <flash_is_address_aligned+0x2c>)
    1296:	4b07      	ldr	r3, [pc, #28]	; (12b4 <flash_is_address_aligned+0x30>)
    1298:	4798      	blx	r3
	uint32_t page_size = _flash_get_page_size(&flash->dev);
    129a:	4628      	mov	r0, r5
    129c:	4b06      	ldr	r3, [pc, #24]	; (12b8 <flash_is_address_aligned+0x34>)
    129e:	4798      	blx	r3
	if (flash_addr & (page_size - 1)) {
    12a0:	3801      	subs	r0, #1
    12a2:	4220      	tst	r0, r4
}
    12a4:	bf14      	ite	ne
    12a6:	f06f 000d 	mvnne.w	r0, #13
    12aa:	2000      	moveq	r0, #0
    12ac:	bd38      	pop	{r3, r4, r5, pc}
    12ae:	bf00      	nop
    12b0:	0000c4cb 	.word	0x0000c4cb
    12b4:	00002009 	.word	0x00002009
    12b8:	00002a95 	.word	0x00002a95

000012bc <flash_init>:
{
    12bc:	b538      	push	{r3, r4, r5, lr}
    12be:	460d      	mov	r5, r1
	ASSERT(flash && hw);
    12c0:	4604      	mov	r4, r0
    12c2:	b180      	cbz	r0, 12e6 <flash_init+0x2a>
    12c4:	1c08      	adds	r0, r1, #0
    12c6:	bf18      	it	ne
    12c8:	2001      	movne	r0, #1
    12ca:	4907      	ldr	r1, [pc, #28]	; (12e8 <flash_init+0x2c>)
    12cc:	4b07      	ldr	r3, [pc, #28]	; (12ec <flash_init+0x30>)
    12ce:	2238      	movs	r2, #56	; 0x38
    12d0:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
    12d2:	4629      	mov	r1, r5
    12d4:	4620      	mov	r0, r4
    12d6:	4b06      	ldr	r3, [pc, #24]	; (12f0 <flash_init+0x34>)
    12d8:	4798      	blx	r3
	if (rc) {
    12da:	b918      	cbnz	r0, 12e4 <flash_init+0x28>
	flash->dev.flash_cb.ready_cb = flash_ready;
    12dc:	4b05      	ldr	r3, [pc, #20]	; (12f4 <flash_init+0x38>)
    12de:	6023      	str	r3, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
    12e0:	4b05      	ldr	r3, [pc, #20]	; (12f8 <flash_init+0x3c>)
    12e2:	6063      	str	r3, [r4, #4]
}
    12e4:	bd38      	pop	{r3, r4, r5, pc}
    12e6:	e7f0      	b.n	12ca <flash_init+0xe>
    12e8:	0000c4cb 	.word	0x0000c4cb
    12ec:	00002009 	.word	0x00002009
    12f0:	00002a19 	.word	0x00002a19
    12f4:	00001275 	.word	0x00001275
    12f8:	0000127d 	.word	0x0000127d

000012fc <flash_read>:
{
    12fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1300:	460e      	mov	r6, r1
    1302:	4617      	mov	r7, r2
    1304:	4698      	mov	r8, r3
	ASSERT(flash && buffer && length);
    1306:	4604      	mov	r4, r0
    1308:	b1f0      	cbz	r0, 1348 <flash_read+0x4c>
    130a:	b1f2      	cbz	r2, 134a <flash_read+0x4e>
    130c:	1c18      	adds	r0, r3, #0
    130e:	bf18      	it	ne
    1310:	2001      	movne	r0, #1
    1312:	2256      	movs	r2, #86	; 0x56
    1314:	4910      	ldr	r1, [pc, #64]	; (1358 <flash_read+0x5c>)
    1316:	4b11      	ldr	r3, [pc, #68]	; (135c <flash_read+0x60>)
    1318:	4798      	blx	r3
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    131a:	4b11      	ldr	r3, [pc, #68]	; (1360 <flash_read+0x64>)
    131c:	4620      	mov	r0, r4
    131e:	4798      	blx	r3
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    1320:	4b10      	ldr	r3, [pc, #64]	; (1364 <flash_read+0x68>)
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    1322:	4605      	mov	r5, r0
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    1324:	4620      	mov	r0, r4
    1326:	4798      	blx	r3
	if ((src_addr > page_size * total_pages) || (src_addr + length > page_size * total_pages)) {
    1328:	4368      	muls	r0, r5
    132a:	42b0      	cmp	r0, r6
    132c:	d30f      	bcc.n	134e <flash_read+0x52>
    132e:	eb08 0306 	add.w	r3, r8, r6
    1332:	4298      	cmp	r0, r3
    1334:	d30b      	bcc.n	134e <flash_read+0x52>
	_flash_read(&flash->dev, src_addr, buffer, length);
    1336:	4620      	mov	r0, r4
    1338:	4643      	mov	r3, r8
    133a:	463a      	mov	r2, r7
    133c:	4631      	mov	r1, r6
    133e:	4c0a      	ldr	r4, [pc, #40]	; (1368 <flash_read+0x6c>)
    1340:	47a0      	blx	r4
	return ERR_NONE;
    1342:	2000      	movs	r0, #0
    1344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1348:	e7e3      	b.n	1312 <flash_read+0x16>
	ASSERT(flash && buffer && length);
    134a:	4610      	mov	r0, r2
    134c:	e7e1      	b.n	1312 <flash_read+0x16>
		return ERR_BAD_ADDRESS;
    134e:	f06f 000d 	mvn.w	r0, #13
}
    1352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1356:	bf00      	nop
    1358:	0000c4cb 	.word	0x0000c4cb
    135c:	00002009 	.word	0x00002009
    1360:	00002a95 	.word	0x00002a95
    1364:	00002a9b 	.word	0x00002a9b
    1368:	00002aa3 	.word	0x00002aa3

0000136c <flash_write>:
{
    136c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1370:	460e      	mov	r6, r1
    1372:	4617      	mov	r7, r2
    1374:	4698      	mov	r8, r3
	ASSERT(flash && buffer && length);
    1376:	4605      	mov	r5, r0
    1378:	b320      	cbz	r0, 13c4 <flash_write+0x58>
    137a:	b322      	cbz	r2, 13c6 <flash_write+0x5a>
    137c:	1c18      	adds	r0, r3, #0
    137e:	bf18      	it	ne
    1380:	2001      	movne	r0, #1
    1382:	226a      	movs	r2, #106	; 0x6a
    1384:	4915      	ldr	r1, [pc, #84]	; (13dc <flash_write+0x70>)
    1386:	4b16      	ldr	r3, [pc, #88]	; (13e0 <flash_write+0x74>)
    1388:	4798      	blx	r3
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    138a:	4b16      	ldr	r3, [pc, #88]	; (13e4 <flash_write+0x78>)
    138c:	4628      	mov	r0, r5
    138e:	4798      	blx	r3
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    1390:	4b15      	ldr	r3, [pc, #84]	; (13e8 <flash_write+0x7c>)
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    1392:	4604      	mov	r4, r0
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    1394:	4628      	mov	r0, r5
    1396:	4798      	blx	r3
	if ((dst_addr > page_size * total_pages) || (dst_addr + length > page_size * total_pages)) {
    1398:	4360      	muls	r0, r4
    139a:	42b0      	cmp	r0, r6
    139c:	d315      	bcc.n	13ca <flash_write+0x5e>
    139e:	eb08 0306 	add.w	r3, r8, r6
    13a2:	4298      	cmp	r0, r3
    13a4:	d311      	bcc.n	13ca <flash_write+0x5e>
	if (_flash_is_locked(&flash->dev, dst_addr)) {
    13a6:	4631      	mov	r1, r6
    13a8:	4628      	mov	r0, r5
    13aa:	4b10      	ldr	r3, [pc, #64]	; (13ec <flash_write+0x80>)
    13ac:	4798      	blx	r3
    13ae:	4604      	mov	r4, r0
    13b0:	b978      	cbnz	r0, 13d2 <flash_write+0x66>
	_flash_write(&flash->dev, dst_addr, buffer, length);
    13b2:	4628      	mov	r0, r5
    13b4:	4643      	mov	r3, r8
    13b6:	463a      	mov	r2, r7
    13b8:	4631      	mov	r1, r6
    13ba:	4d0d      	ldr	r5, [pc, #52]	; (13f0 <flash_write+0x84>)
    13bc:	47a8      	blx	r5
	return ERR_NONE;
    13be:	4620      	mov	r0, r4
    13c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    13c4:	e7dd      	b.n	1382 <flash_write+0x16>
	ASSERT(flash && buffer && length);
    13c6:	4610      	mov	r0, r2
    13c8:	e7db      	b.n	1382 <flash_write+0x16>
		return ERR_BAD_ADDRESS;
    13ca:	f06f 000d 	mvn.w	r0, #13
    13ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_DENIED;
    13d2:	f06f 0010 	mvn.w	r0, #16
}
    13d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    13da:	bf00      	nop
    13dc:	0000c4cb 	.word	0x0000c4cb
    13e0:	00002009 	.word	0x00002009
    13e4:	00002a95 	.word	0x00002a95
    13e8:	00002a9b 	.word	0x00002a9b
    13ec:	00002ca1 	.word	0x00002ca1
    13f0:	00002ac1 	.word	0x00002ac1

000013f4 <flash_append>:
{
    13f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    13f8:	460e      	mov	r6, r1
    13fa:	4617      	mov	r7, r2
    13fc:	4698      	mov	r8, r3
	ASSERT(flash && buffer && length);
    13fe:	4605      	mov	r5, r0
    1400:	b320      	cbz	r0, 144c <flash_append+0x58>
    1402:	b322      	cbz	r2, 144e <flash_append+0x5a>
    1404:	1c18      	adds	r0, r3, #0
    1406:	bf18      	it	ne
    1408:	2001      	movne	r0, #1
    140a:	2282      	movs	r2, #130	; 0x82
    140c:	4915      	ldr	r1, [pc, #84]	; (1464 <flash_append+0x70>)
    140e:	4b16      	ldr	r3, [pc, #88]	; (1468 <flash_append+0x74>)
    1410:	4798      	blx	r3
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    1412:	4b16      	ldr	r3, [pc, #88]	; (146c <flash_append+0x78>)
    1414:	4628      	mov	r0, r5
    1416:	4798      	blx	r3
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    1418:	4b15      	ldr	r3, [pc, #84]	; (1470 <flash_append+0x7c>)
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    141a:	4604      	mov	r4, r0
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    141c:	4628      	mov	r0, r5
    141e:	4798      	blx	r3
	if ((dst_addr > page_size * total_pages) || (dst_addr + length > page_size * total_pages)) {
    1420:	4360      	muls	r0, r4
    1422:	42b0      	cmp	r0, r6
    1424:	d315      	bcc.n	1452 <flash_append+0x5e>
    1426:	eb08 0306 	add.w	r3, r8, r6
    142a:	4298      	cmp	r0, r3
    142c:	d311      	bcc.n	1452 <flash_append+0x5e>
	if (_flash_is_locked(&flash->dev, dst_addr)) {
    142e:	4631      	mov	r1, r6
    1430:	4628      	mov	r0, r5
    1432:	4b10      	ldr	r3, [pc, #64]	; (1474 <flash_append+0x80>)
    1434:	4798      	blx	r3
    1436:	4604      	mov	r4, r0
    1438:	b978      	cbnz	r0, 145a <flash_append+0x66>
	_flash_append(&flash->dev, dst_addr, buffer, length);
    143a:	4628      	mov	r0, r5
    143c:	4643      	mov	r3, r8
    143e:	463a      	mov	r2, r7
    1440:	4631      	mov	r1, r6
    1442:	4d0d      	ldr	r5, [pc, #52]	; (1478 <flash_append+0x84>)
    1444:	47a8      	blx	r5
	return ERR_NONE;
    1446:	4620      	mov	r0, r4
    1448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    144c:	e7dd      	b.n	140a <flash_append+0x16>
	ASSERT(flash && buffer && length);
    144e:	4610      	mov	r0, r2
    1450:	e7db      	b.n	140a <flash_append+0x16>
		return ERR_BAD_ADDRESS;
    1452:	f06f 000d 	mvn.w	r0, #13
    1456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_DENIED;
    145a:	f06f 0010 	mvn.w	r0, #16
}
    145e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1462:	bf00      	nop
    1464:	0000c4cb 	.word	0x0000c4cb
    1468:	00002009 	.word	0x00002009
    146c:	00002a95 	.word	0x00002a95
    1470:	00002a9b 	.word	0x00002a9b
    1474:	00002ca1 	.word	0x00002ca1
    1478:	00002b91 	.word	0x00002b91

0000147c <flash_erase>:
{
    147c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1480:	4688      	mov	r8, r1
    1482:	4617      	mov	r7, r2
	ASSERT(flash && page_nums);
    1484:	4604      	mov	r4, r0
    1486:	b318      	cbz	r0, 14d0 <flash_erase+0x54>
    1488:	1c10      	adds	r0, r2, #0
    148a:	bf18      	it	ne
    148c:	2001      	movne	r0, #1
    148e:	229a      	movs	r2, #154	; 0x9a
    1490:	4911      	ldr	r1, [pc, #68]	; (14d8 <flash_erase+0x5c>)
    1492:	4b12      	ldr	r3, [pc, #72]	; (14dc <flash_erase+0x60>)
    1494:	4798      	blx	r3
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    1496:	4b12      	ldr	r3, [pc, #72]	; (14e0 <flash_erase+0x64>)
    1498:	4620      	mov	r0, r4
    149a:	4798      	blx	r3
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    149c:	4b11      	ldr	r3, [pc, #68]	; (14e4 <flash_erase+0x68>)
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    149e:	4605      	mov	r5, r0
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    14a0:	4620      	mov	r0, r4
    14a2:	4798      	blx	r3
	rc = flash_is_address_aligned(flash, dst_addr);
    14a4:	4641      	mov	r1, r8
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    14a6:	4681      	mov	r9, r0
	rc = flash_is_address_aligned(flash, dst_addr);
    14a8:	4b0f      	ldr	r3, [pc, #60]	; (14e8 <flash_erase+0x6c>)
    14aa:	4620      	mov	r0, r4
    14ac:	4798      	blx	r3
	if (rc) {
    14ae:	4606      	mov	r6, r0
    14b0:	b958      	cbnz	r0, 14ca <flash_erase+0x4e>
	if ((page_nums > total_pages) || (dst_addr / page_size + page_nums > total_pages)) {
    14b2:	454f      	cmp	r7, r9
    14b4:	d80d      	bhi.n	14d2 <flash_erase+0x56>
    14b6:	fbb8 f5f5 	udiv	r5, r8, r5
    14ba:	443d      	add	r5, r7
    14bc:	45a9      	cmp	r9, r5
    14be:	d308      	bcc.n	14d2 <flash_erase+0x56>
	_flash_erase(&flash->dev, dst_addr, page_nums);
    14c0:	463a      	mov	r2, r7
    14c2:	4641      	mov	r1, r8
    14c4:	4620      	mov	r0, r4
    14c6:	4b09      	ldr	r3, [pc, #36]	; (14ec <flash_erase+0x70>)
    14c8:	4798      	blx	r3
}
    14ca:	4630      	mov	r0, r6
    14cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    14d0:	e7dd      	b.n	148e <flash_erase+0x12>
		return ERR_INVALID_ARG;
    14d2:	f06f 060c 	mvn.w	r6, #12
    14d6:	e7f8      	b.n	14ca <flash_erase+0x4e>
    14d8:	0000c4cb 	.word	0x0000c4cb
    14dc:	00002009 	.word	0x00002009
    14e0:	00002a95 	.word	0x00002a95
    14e4:	00002a9b 	.word	0x00002a9b
    14e8:	00001285 	.word	0x00001285
    14ec:	00002bf9 	.word	0x00002bf9

000014f0 <flash_get_page_size>:
{
    14f0:	b510      	push	{r4, lr}
	ASSERT(flash);
    14f2:	4604      	mov	r4, r0
    14f4:	3000      	adds	r0, #0
    14f6:	bf18      	it	ne
    14f8:	2001      	movne	r0, #1
    14fa:	4b04      	ldr	r3, [pc, #16]	; (150c <flash_get_page_size+0x1c>)
    14fc:	4904      	ldr	r1, [pc, #16]	; (1510 <flash_get_page_size+0x20>)
    14fe:	22f7      	movs	r2, #247	; 0xf7
    1500:	4798      	blx	r3
	return _flash_get_page_size(&flash->dev);
    1502:	4620      	mov	r0, r4
    1504:	4b03      	ldr	r3, [pc, #12]	; (1514 <flash_get_page_size+0x24>)
}
    1506:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return _flash_get_page_size(&flash->dev);
    150a:	4718      	bx	r3
    150c:	00002009 	.word	0x00002009
    1510:	0000c4cb 	.word	0x0000c4cb
    1514:	00002a95 	.word	0x00002a95

00001518 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    1518:	b570      	push	{r4, r5, r6, lr}
    151a:	460d      	mov	r5, r1
    151c:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    151e:	4604      	mov	r4, r0
    1520:	b168      	cbz	r0, 153e <io_write+0x26>
    1522:	1c08      	adds	r0, r1, #0
    1524:	bf18      	it	ne
    1526:	2001      	movne	r0, #1
    1528:	2234      	movs	r2, #52	; 0x34
    152a:	4905      	ldr	r1, [pc, #20]	; (1540 <io_write+0x28>)
    152c:	4b05      	ldr	r3, [pc, #20]	; (1544 <io_write+0x2c>)
    152e:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    1530:	6823      	ldr	r3, [r4, #0]
    1532:	4632      	mov	r2, r6
    1534:	4629      	mov	r1, r5
    1536:	4620      	mov	r0, r4
}
    1538:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return io_descr->write(io_descr, buf, length);
    153c:	4718      	bx	r3
    153e:	e7f3      	b.n	1528 <io_write+0x10>
    1540:	0000c4e2 	.word	0x0000c4e2
    1544:	00002009 	.word	0x00002009

00001548 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    1548:	b570      	push	{r4, r5, r6, lr}
    154a:	460d      	mov	r5, r1
    154c:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    154e:	4604      	mov	r4, r0
    1550:	b168      	cbz	r0, 156e <io_read+0x26>
    1552:	1c08      	adds	r0, r1, #0
    1554:	bf18      	it	ne
    1556:	2001      	movne	r0, #1
    1558:	223d      	movs	r2, #61	; 0x3d
    155a:	4905      	ldr	r1, [pc, #20]	; (1570 <io_read+0x28>)
    155c:	4b05      	ldr	r3, [pc, #20]	; (1574 <io_read+0x2c>)
    155e:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    1560:	6863      	ldr	r3, [r4, #4]
    1562:	4632      	mov	r2, r6
    1564:	4629      	mov	r1, r5
    1566:	4620      	mov	r0, r4
}
    1568:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return io_descr->read(io_descr, buf, length);
    156c:	4718      	bx	r3
    156e:	e7f3      	b.n	1558 <io_read+0x10>
    1570:	0000c4e2 	.word	0x0000c4e2
    1574:	00002009 	.word	0x00002009

00001578 <mac_async_init>:

/**
 * \brief Initialize the MAC driver
 */
int32_t mac_async_init(struct mac_async_descriptor *const descr, void *const hw)
{
    1578:	b570      	push	{r4, r5, r6, lr}
    157a:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    157c:	4604      	mov	r4, r0
    157e:	b160      	cbz	r0, 159a <mac_async_init+0x22>
    1580:	1c08      	adds	r0, r1, #0
    1582:	bf18      	it	ne
    1584:	2001      	movne	r0, #1
    1586:	4905      	ldr	r1, [pc, #20]	; (159c <mac_async_init+0x24>)
    1588:	4b05      	ldr	r3, [pc, #20]	; (15a0 <mac_async_init+0x28>)
    158a:	2231      	movs	r2, #49	; 0x31
    158c:	4798      	blx	r3

	return _mac_async_init(&descr->dev, hw);
    158e:	4629      	mov	r1, r5
    1590:	4620      	mov	r0, r4
    1592:	4b04      	ldr	r3, [pc, #16]	; (15a4 <mac_async_init+0x2c>)
}
    1594:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return _mac_async_init(&descr->dev, hw);
    1598:	4718      	bx	r3
    159a:	e7f4      	b.n	1586 <mac_async_init+0xe>
    159c:	0000c4f6 	.word	0x0000c4f6
    15a0:	00002009 	.word	0x00002009
    15a4:	00002651 	.word	0x00002651

000015a8 <mac_async_enable>:

/**
 * \brief Enable the MAC
 */
int32_t mac_async_enable(struct mac_async_descriptor *const descr)
{
    15a8:	b510      	push	{r4, lr}
	ASSERT(descr);
    15aa:	4604      	mov	r4, r0
    15ac:	3000      	adds	r0, #0
    15ae:	bf18      	it	ne
    15b0:	2001      	movne	r0, #1
    15b2:	4b04      	ldr	r3, [pc, #16]	; (15c4 <mac_async_enable+0x1c>)
    15b4:	4904      	ldr	r1, [pc, #16]	; (15c8 <mac_async_enable+0x20>)
    15b6:	2245      	movs	r2, #69	; 0x45
    15b8:	4798      	blx	r3

	return _mac_async_enable(&descr->dev);
    15ba:	4620      	mov	r0, r4
    15bc:	4b03      	ldr	r3, [pc, #12]	; (15cc <mac_async_enable+0x24>)
}
    15be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return _mac_async_enable(&descr->dev);
    15c2:	4718      	bx	r3
    15c4:	00002009 	.word	0x00002009
    15c8:	0000c4f6 	.word	0x0000c4f6
    15cc:	00002735 	.word	0x00002735

000015d0 <mac_async_write>:
}
/**
 * \brief Write raw data to MAC
 */
int32_t mac_async_write(struct mac_async_descriptor *const descr, uint8_t *buf, uint32_t len)
{
    15d0:	b570      	push	{r4, r5, r6, lr}
    15d2:	460d      	mov	r5, r1
    15d4:	4616      	mov	r6, r2
	ASSERT(descr && buf && len);
    15d6:	4604      	mov	r4, r0
    15d8:	b170      	cbz	r0, 15f8 <mac_async_write+0x28>
    15da:	b171      	cbz	r1, 15fa <mac_async_write+0x2a>
    15dc:	1c10      	adds	r0, r2, #0
    15de:	bf18      	it	ne
    15e0:	2001      	movne	r0, #1
    15e2:	2257      	movs	r2, #87	; 0x57
    15e4:	4906      	ldr	r1, [pc, #24]	; (1600 <mac_async_write+0x30>)
    15e6:	4b07      	ldr	r3, [pc, #28]	; (1604 <mac_async_write+0x34>)
    15e8:	4798      	blx	r3

	return _mac_async_write(&descr->dev, buf, len);
    15ea:	4632      	mov	r2, r6
    15ec:	4629      	mov	r1, r5
    15ee:	4620      	mov	r0, r4
    15f0:	4b05      	ldr	r3, [pc, #20]	; (1608 <mac_async_write+0x38>)
}
    15f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return _mac_async_write(&descr->dev, buf, len);
    15f6:	4718      	bx	r3
    15f8:	e7f3      	b.n	15e2 <mac_async_write+0x12>
	ASSERT(descr && buf && len);
    15fa:	4608      	mov	r0, r1
    15fc:	e7f1      	b.n	15e2 <mac_async_write+0x12>
    15fe:	bf00      	nop
    1600:	0000c4f6 	.word	0x0000c4f6
    1604:	00002009 	.word	0x00002009
    1608:	00002745 	.word	0x00002745

0000160c <mac_async_read>:

/**
 * \brief Read raw data from MAC
 */
uint32_t mac_async_read(struct mac_async_descriptor *const descr, uint8_t *buf, uint32_t len)
{
    160c:	b570      	push	{r4, r5, r6, lr}
	ASSERT(descr);
    160e:	4604      	mov	r4, r0
    1610:	3000      	adds	r0, #0
{
    1612:	460d      	mov	r5, r1
    1614:	4616      	mov	r6, r2
	ASSERT(descr);
    1616:	4907      	ldr	r1, [pc, #28]	; (1634 <mac_async_read+0x28>)
    1618:	4b07      	ldr	r3, [pc, #28]	; (1638 <mac_async_read+0x2c>)
    161a:	f04f 0261 	mov.w	r2, #97	; 0x61
    161e:	bf18      	it	ne
    1620:	2001      	movne	r0, #1
    1622:	4798      	blx	r3

	return _mac_async_read(&descr->dev, buf, len);
    1624:	4632      	mov	r2, r6
    1626:	4629      	mov	r1, r5
    1628:	4620      	mov	r0, r4
    162a:	4b04      	ldr	r3, [pc, #16]	; (163c <mac_async_read+0x30>)
}
    162c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return _mac_async_read(&descr->dev, buf, len);
    1630:	4718      	bx	r3
    1632:	bf00      	nop
    1634:	0000c4f6 	.word	0x0000c4f6
    1638:	00002009 	.word	0x00002009
    163c:	00002879 	.word	0x00002879

00001640 <mac_async_read_len>:

/**
 * \brief Get next valid package length
 */
uint32_t mac_async_read_len(struct mac_async_descriptor *const descr)
{
    1640:	b510      	push	{r4, lr}
	ASSERT(descr);
    1642:	4604      	mov	r4, r0
    1644:	3000      	adds	r0, #0
    1646:	bf18      	it	ne
    1648:	2001      	movne	r0, #1
    164a:	4b04      	ldr	r3, [pc, #16]	; (165c <mac_async_read_len+0x1c>)
    164c:	4904      	ldr	r1, [pc, #16]	; (1660 <mac_async_read_len+0x20>)
    164e:	226b      	movs	r2, #107	; 0x6b
    1650:	4798      	blx	r3

	return _mac_async_read_len(&descr->dev);
    1652:	4620      	mov	r0, r4
    1654:	4b03      	ldr	r3, [pc, #12]	; (1664 <mac_async_read_len+0x24>)
}
    1656:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return _mac_async_read_len(&descr->dev);
    165a:	4718      	bx	r3
    165c:	00002009 	.word	0x00002009
    1660:	0000c4f6 	.word	0x0000c4f6
    1664:	0000296d 	.word	0x0000296d

00001668 <sha_sync_init>:

/**
 * \brief              Initialize SHA.
 */
int32_t sha_sync_init(struct sha_sync_descriptor *descr, void *const hw)
{
    1668:	b570      	push	{r4, r5, r6, lr}
    166a:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    166c:	4604      	mov	r4, r0
    166e:	b160      	cbz	r0, 168a <sha_sync_init+0x22>
    1670:	1c08      	adds	r0, r1, #0
    1672:	bf18      	it	ne
    1674:	2001      	movne	r0, #1
    1676:	4905      	ldr	r1, [pc, #20]	; (168c <sha_sync_init+0x24>)
    1678:	4b05      	ldr	r3, [pc, #20]	; (1690 <sha_sync_init+0x28>)
    167a:	222c      	movs	r2, #44	; 0x2c
    167c:	4798      	blx	r3

	return _sha_sync_init(&descr->dev, hw);
    167e:	4629      	mov	r1, r5
    1680:	4620      	mov	r0, r4
    1682:	4b04      	ldr	r3, [pc, #16]	; (1694 <sha_sync_init+0x2c>)
}
    1684:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return _sha_sync_init(&descr->dev, hw);
    1688:	4718      	bx	r3
    168a:	e7f4      	b.n	1676 <sha_sync_init+0xe>
    168c:	0000c511 	.word	0x0000c511
    1690:	00002009 	.word	0x00002009
    1694:	000029c9 	.word	0x000029c9

00001698 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    1698:	b5f0      	push	{r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    169a:	6805      	ldr	r5, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    169c:	b91d      	cbnz	r5, 16a6 <timer_add_timer_task+0xe>
		list_insert_as_head(list, new_task);
    169e:	4b0f      	ldr	r3, [pc, #60]	; (16dc <timer_add_timer_task+0x44>)
	if (it == head) {
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
	}
}
    16a0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		list_insert_after(prev, new_task);
    16a4:	4718      	bx	r3
		if (time_left >= new_task->interval)
    16a6:	f8d1 e008 	ldr.w	lr, [r1, #8]
    16aa:	462c      	mov	r4, r5
    16ac:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    16ae:	f1c2 0c01 	rsb	ip, r2, #1
		if (it->time_label <= time) {
    16b2:	6863      	ldr	r3, [r4, #4]
    16b4:	68a7      	ldr	r7, [r4, #8]
    16b6:	4293      	cmp	r3, r2
			time_left = it->interval - (time - it->time_label);
    16b8:	bf95      	itete	ls
    16ba:	19db      	addls	r3, r3, r7
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    16bc:	4463      	addhi	r3, ip
			time_left = it->interval - (time - it->time_label);
    16be:	1a9b      	subls	r3, r3, r2
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    16c0:	19db      	addhi	r3, r3, r7
		if (time_left >= new_task->interval)
    16c2:	4573      	cmp	r3, lr
    16c4:	d207      	bcs.n	16d6 <timer_add_timer_task+0x3e>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    16c6:	6823      	ldr	r3, [r4, #0]
    16c8:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    16ca:	b913      	cbnz	r3, 16d2 <timer_add_timer_task+0x3a>
		list_insert_after(prev, new_task);
    16cc:	4630      	mov	r0, r6
    16ce:	4b04      	ldr	r3, [pc, #16]	; (16e0 <timer_add_timer_task+0x48>)
    16d0:	e7e6      	b.n	16a0 <timer_add_timer_task+0x8>
    16d2:	461c      	mov	r4, r3
    16d4:	e7ed      	b.n	16b2 <timer_add_timer_task+0x1a>
	if (it == head) {
    16d6:	42a5      	cmp	r5, r4
    16d8:	d1f8      	bne.n	16cc <timer_add_timer_task+0x34>
    16da:	e7e0      	b.n	169e <timer_add_timer_task+0x6>
    16dc:	0000201d 	.word	0x0000201d
    16e0:	00002049 	.word	0x00002049

000016e4 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    16e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    16e8:	6906      	ldr	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    16ea:	7e03      	ldrb	r3, [r0, #24]
	return (void *)list->head;
    16ec:	6944      	ldr	r4, [r0, #20]
	uint32_t                 time  = ++timer->time;
    16ee:	3601      	adds	r6, #1
	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    16f0:	07da      	lsls	r2, r3, #31
{
    16f2:	4605      	mov	r5, r0
	uint32_t                 time  = ++timer->time;
    16f4:	6106      	str	r6, [r0, #16]
	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    16f6:	d410      	bmi.n	171a <timer_process_counted+0x36>
    16f8:	7e03      	ldrb	r3, [r0, #24]
    16fa:	079b      	lsls	r3, r3, #30
    16fc:	d40d      	bmi.n	171a <timer_process_counted+0x36>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    16fe:	f8df 8048 	ldr.w	r8, [pc, #72]	; 1748 <timer_process_counted+0x64>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    1702:	f8df 9048 	ldr.w	r9, [pc, #72]	; 174c <timer_process_counted+0x68>
		list_remove_head(&timer->tasks);
    1706:	f100 0714 	add.w	r7, r0, #20
	while (it && ((time - it->time_label) >= it->interval)) {
    170a:	b124      	cbz	r4, 1716 <timer_process_counted+0x32>
    170c:	6863      	ldr	r3, [r4, #4]
    170e:	68a2      	ldr	r2, [r4, #8]
    1710:	1af3      	subs	r3, r6, r3
    1712:	4293      	cmp	r3, r2
    1714:	d207      	bcs.n	1726 <timer_process_counted+0x42>
    1716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    171a:	7e2b      	ldrb	r3, [r5, #24]
    171c:	f043 0302 	orr.w	r3, r3, #2
    1720:	762b      	strb	r3, [r5, #24]
		return;
    1722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		list_remove_head(&timer->tasks);
    1726:	4638      	mov	r0, r7
    1728:	47c0      	blx	r8
		if (TIMER_TASK_REPEAT == tmp->mode) {
    172a:	7c23      	ldrb	r3, [r4, #16]
    172c:	2b01      	cmp	r3, #1
    172e:	d104      	bne.n	173a <timer_process_counted+0x56>
			tmp->time_label = time;
    1730:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    1732:	4632      	mov	r2, r6
    1734:	4621      	mov	r1, r4
    1736:	4638      	mov	r0, r7
    1738:	47c8      	blx	r9
    173a:	f8d5 a014 	ldr.w	sl, [r5, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    173e:	68e3      	ldr	r3, [r4, #12]
    1740:	4620      	mov	r0, r4
    1742:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
    1744:	4654      	mov	r4, sl
    1746:	e7e0      	b.n	170a <timer_process_counted+0x26>
    1748:	0000208d 	.word	0x0000208d
    174c:	00001699 	.word	0x00001699

00001750 <timer_init>:
{
    1750:	b538      	push	{r3, r4, r5, lr}
    1752:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    1754:	4604      	mov	r4, r0
    1756:	b178      	cbz	r0, 1778 <timer_init+0x28>
    1758:	1c08      	adds	r0, r1, #0
    175a:	bf18      	it	ne
    175c:	2001      	movne	r0, #1
    175e:	223b      	movs	r2, #59	; 0x3b
    1760:	4906      	ldr	r1, [pc, #24]	; (177c <timer_init+0x2c>)
    1762:	4b07      	ldr	r3, [pc, #28]	; (1780 <timer_init+0x30>)
    1764:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    1766:	4629      	mov	r1, r5
    1768:	4620      	mov	r0, r4
    176a:	4b06      	ldr	r3, [pc, #24]	; (1784 <timer_init+0x34>)
    176c:	4798      	blx	r3
	descr->time                           = 0;
    176e:	2000      	movs	r0, #0
	descr->device.timer_cb.period_expired = timer_process_counted;
    1770:	4b05      	ldr	r3, [pc, #20]	; (1788 <timer_init+0x38>)
	descr->time                           = 0;
    1772:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    1774:	6023      	str	r3, [r4, #0]
}
    1776:	bd38      	pop	{r3, r4, r5, pc}
    1778:	e7f1      	b.n	175e <timer_init+0xe>
    177a:	bf00      	nop
    177c:	0000c52b 	.word	0x0000c52b
    1780:	00002009 	.word	0x00002009
    1784:	0000320d 	.word	0x0000320d
    1788:	000016e5 	.word	0x000016e5

0000178c <timer_start>:
{
    178c:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr);
    178e:	4605      	mov	r5, r0
    1790:	3000      	adds	r0, #0
    1792:	bf18      	it	ne
    1794:	2001      	movne	r0, #1
    1796:	2253      	movs	r2, #83	; 0x53
    1798:	4907      	ldr	r1, [pc, #28]	; (17b8 <timer_start+0x2c>)
    179a:	4b08      	ldr	r3, [pc, #32]	; (17bc <timer_start+0x30>)
    179c:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
    179e:	4628      	mov	r0, r5
    17a0:	4b07      	ldr	r3, [pc, #28]	; (17c0 <timer_start+0x34>)
    17a2:	4798      	blx	r3
    17a4:	4604      	mov	r4, r0
    17a6:	b920      	cbnz	r0, 17b2 <timer_start+0x26>
	_timer_start(&descr->device);
    17a8:	4628      	mov	r0, r5
    17aa:	4b06      	ldr	r3, [pc, #24]	; (17c4 <timer_start+0x38>)
    17ac:	4798      	blx	r3
	return ERR_NONE;
    17ae:	4620      	mov	r0, r4
    17b0:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_DENIED;
    17b2:	f06f 0010 	mvn.w	r0, #16
}
    17b6:	bd38      	pop	{r3, r4, r5, pc}
    17b8:	0000c52b 	.word	0x0000c52b
    17bc:	00002009 	.word	0x00002009
    17c0:	00003307 	.word	0x00003307
    17c4:	000032f5 	.word	0x000032f5

000017c8 <timer_add_task>:
{
    17c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    17cc:	460d      	mov	r5, r1
	ASSERT(descr && task);
    17ce:	4604      	mov	r4, r0
    17d0:	b300      	cbz	r0, 1814 <timer_add_task+0x4c>
    17d2:	1c08      	adds	r0, r1, #0
    17d4:	bf18      	it	ne
    17d6:	2001      	movne	r0, #1
    17d8:	227a      	movs	r2, #122	; 0x7a
    17da:	491d      	ldr	r1, [pc, #116]	; (1850 <timer_add_task+0x88>)
    17dc:	f8df 8088 	ldr.w	r8, [pc, #136]	; 1868 <timer_add_task+0xa0>
    17e0:	47c0      	blx	r8
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    17e2:	7e23      	ldrb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
    17e4:	f104 0714 	add.w	r7, r4, #20
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    17e8:	f043 0301 	orr.w	r3, r3, #1
    17ec:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
    17ee:	4629      	mov	r1, r5
    17f0:	4638      	mov	r0, r7
    17f2:	4b18      	ldr	r3, [pc, #96]	; (1854 <timer_add_task+0x8c>)
    17f4:	4798      	blx	r3
    17f6:	4606      	mov	r6, r0
    17f8:	b168      	cbz	r0, 1816 <timer_add_task+0x4e>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    17fa:	7e23      	ldrb	r3, [r4, #24]
		ASSERT(false);
    17fc:	4914      	ldr	r1, [pc, #80]	; (1850 <timer_add_task+0x88>)
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    17fe:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
		ASSERT(false);
    1802:	2000      	movs	r0, #0
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    1804:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
    1806:	227f      	movs	r2, #127	; 0x7f
    1808:	47c0      	blx	r8
		return ERR_ALREADY_INITIALIZED;
    180a:	f06f 0011 	mvn.w	r0, #17
}
    180e:	b002      	add	sp, #8
    1810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1814:	e7e0      	b.n	17d8 <timer_add_task+0x10>
	task->time_label = descr->time;
    1816:	6922      	ldr	r2, [r4, #16]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    1818:	4b0f      	ldr	r3, [pc, #60]	; (1858 <timer_add_task+0x90>)
	task->time_label = descr->time;
    181a:	606a      	str	r2, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    181c:	4638      	mov	r0, r7
    181e:	4629      	mov	r1, r5
    1820:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    1822:	7e23      	ldrb	r3, [r4, #24]
    1824:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    1828:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    182a:	7e20      	ldrb	r0, [r4, #24]
    182c:	f010 0002 	ands.w	r0, r0, #2
    1830:	d0ed      	beq.n	180e <timer_add_task+0x46>
		CRITICAL_SECTION_ENTER()
    1832:	a801      	add	r0, sp, #4
    1834:	4b09      	ldr	r3, [pc, #36]	; (185c <timer_add_task+0x94>)
    1836:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    1838:	7e23      	ldrb	r3, [r4, #24]
    183a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    183e:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
    1840:	4620      	mov	r0, r4
    1842:	4b07      	ldr	r3, [pc, #28]	; (1860 <timer_add_task+0x98>)
    1844:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    1846:	a801      	add	r0, sp, #4
    1848:	4b06      	ldr	r3, [pc, #24]	; (1864 <timer_add_task+0x9c>)
    184a:	4798      	blx	r3
	return ERR_NONE;
    184c:	4630      	mov	r0, r6
    184e:	e7de      	b.n	180e <timer_add_task+0x46>
    1850:	0000c52b 	.word	0x0000c52b
    1854:	0000200f 	.word	0x0000200f
    1858:	00001699 	.word	0x00001699
    185c:	000011d1 	.word	0x000011d1
    1860:	0000331d 	.word	0x0000331d
    1864:	000011df 	.word	0x000011df
    1868:	00002009 	.word	0x00002009

0000186c <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
    186c:	4603      	mov	r3, r0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    186e:	2200      	movs	r2, #0
    1870:	629a      	str	r2, [r3, #40]	; 0x28
	if (descr->usart_cb.tx_done) {
    1872:	69db      	ldr	r3, [r3, #28]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    1874:	3808      	subs	r0, #8
	if (descr->usart_cb.tx_done) {
    1876:	b103      	cbz	r3, 187a <usart_transmission_complete+0xe>
		descr->usart_cb.tx_done(descr);
    1878:	4718      	bx	r3
    187a:	4770      	bx	lr

0000187c <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
    187c:	4603      	mov	r3, r0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    187e:	2200      	movs	r2, #0
    1880:	629a      	str	r2, [r3, #40]	; 0x28
	if (descr->usart_cb.error) {
    1882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    1884:	3808      	subs	r0, #8
	if (descr->usart_cb.error) {
    1886:	b103      	cbz	r3, 188a <usart_error+0xe>
		descr->usart_cb.error(descr);
    1888:	4718      	bx	r3
    188a:	4770      	bx	lr

0000188c <usart_fill_rx_buffer>:
{
    188c:	b570      	push	{r4, r5, r6, lr}
    188e:	4604      	mov	r4, r0
	ringbuffer_put(&descr->rx, data);
    1890:	4b05      	ldr	r3, [pc, #20]	; (18a8 <usart_fill_rx_buffer+0x1c>)
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    1892:	f1a0 0508 	sub.w	r5, r0, #8
	ringbuffer_put(&descr->rx, data);
    1896:	302c      	adds	r0, #44	; 0x2c
    1898:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
    189a:	6a23      	ldr	r3, [r4, #32]
    189c:	b11b      	cbz	r3, 18a6 <usart_fill_rx_buffer+0x1a>
		descr->usart_cb.rx_done(descr);
    189e:	4628      	mov	r0, r5
}
    18a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		descr->usart_cb.rx_done(descr);
    18a4:	4718      	bx	r3
    18a6:	bd70      	pop	{r4, r5, r6, pc}
    18a8:	0000211d 	.word	0x0000211d

000018ac <usart_async_write>:
{
    18ac:	b570      	push	{r4, r5, r6, lr}
    18ae:	460e      	mov	r6, r1
    18b0:	4615      	mov	r5, r2
	ASSERT(descr && buf && length);
    18b2:	4604      	mov	r4, r0
    18b4:	b1e0      	cbz	r0, 18f0 <usart_async_write+0x44>
    18b6:	b1e1      	cbz	r1, 18f2 <usart_async_write+0x46>
    18b8:	1c10      	adds	r0, r2, #0
    18ba:	bf18      	it	ne
    18bc:	2001      	movne	r0, #1
    18be:	f240 123b 	movw	r2, #315	; 0x13b
    18c2:	4b0e      	ldr	r3, [pc, #56]	; (18fc <usart_async_write+0x50>)
    18c4:	490e      	ldr	r1, [pc, #56]	; (1900 <usart_async_write+0x54>)
    18c6:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
    18c8:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
    18cc:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
    18d0:	429a      	cmp	r2, r3
    18d2:	d110      	bne.n	18f6 <usart_async_write+0x4a>
	descr->tx_por           = 0;
    18d4:	2300      	movs	r3, #0
    18d6:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    18da:	2301      	movs	r3, #1
    18dc:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    18de:	f104 0008 	add.w	r0, r4, #8
	descr->tx_buffer        = (uint8_t *)buf;
    18e2:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
    18e4:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
	_usart_async_enable_byte_sent_irq(&descr->device);
    18e8:	4b06      	ldr	r3, [pc, #24]	; (1904 <usart_async_write+0x58>)
    18ea:	4798      	blx	r3
	return (int32_t)length;
    18ec:	4628      	mov	r0, r5
    18ee:	bd70      	pop	{r4, r5, r6, pc}
    18f0:	e7e5      	b.n	18be <usart_async_write+0x12>
	ASSERT(descr && buf && length);
    18f2:	4608      	mov	r0, r1
    18f4:	e7e3      	b.n	18be <usart_async_write+0x12>
		return ERR_NO_RESOURCE;
    18f6:	f06f 001b 	mvn.w	r0, #27
}
    18fa:	bd70      	pop	{r4, r5, r6, pc}
    18fc:	00002009 	.word	0x00002009
    1900:	0000c542 	.word	0x0000c542
    1904:	00003085 	.word	0x00003085

00001908 <usart_process_byte_sent>:
	if (descr->tx_por != descr->tx_buffer_length) {
    1908:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    190a:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
    190e:	429a      	cmp	r2, r3
{
    1910:	b510      	push	{r4, lr}
    1912:	4604      	mov	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
    1914:	d00a      	beq.n	192c <usart_process_byte_sent+0x24>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    1916:	6c02      	ldr	r2, [r0, #64]	; 0x40
    1918:	1c59      	adds	r1, r3, #1
    191a:	8781      	strh	r1, [r0, #60]	; 0x3c
    191c:	5cd1      	ldrb	r1, [r2, r3]
    191e:	4b04      	ldr	r3, [pc, #16]	; (1930 <usart_process_byte_sent+0x28>)
    1920:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    1922:	4b04      	ldr	r3, [pc, #16]	; (1934 <usart_process_byte_sent+0x2c>)
    1924:	4620      	mov	r0, r4
}
    1926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_usart_async_enable_tx_done_irq(&descr->device);
    192a:	4718      	bx	r3
    192c:	4b02      	ldr	r3, [pc, #8]	; (1938 <usart_process_byte_sent+0x30>)
    192e:	e7fa      	b.n	1926 <usart_process_byte_sent+0x1e>
    1930:	00003075 	.word	0x00003075
    1934:	00003085 	.word	0x00003085
    1938:	0000308d 	.word	0x0000308d

0000193c <usart_async_read>:
{
    193c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    1940:	460e      	mov	r6, r1
    1942:	4617      	mov	r7, r2
	ASSERT(descr && buf && length);
    1944:	4605      	mov	r5, r0
    1946:	b1f0      	cbz	r0, 1986 <usart_async_read+0x4a>
    1948:	b1f1      	cbz	r1, 1988 <usart_async_read+0x4c>
    194a:	1c10      	adds	r0, r2, #0
    194c:	bf18      	it	ne
    194e:	2001      	movne	r0, #1
    1950:	f44f 72ac 	mov.w	r2, #344	; 0x158
    1954:	4910      	ldr	r1, [pc, #64]	; (1998 <usart_async_read+0x5c>)
    1956:	4b11      	ldr	r3, [pc, #68]	; (199c <usart_async_read+0x60>)
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    1958:	f8df 9050 	ldr.w	r9, [pc, #80]	; 19ac <usart_async_read+0x70>
	ASSERT(descr && buf && length);
    195c:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    195e:	3534      	adds	r5, #52	; 0x34
	CRITICAL_SECTION_ENTER()
    1960:	a801      	add	r0, sp, #4
    1962:	4b0f      	ldr	r3, [pc, #60]	; (19a0 <usart_async_read+0x64>)
    1964:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    1966:	4b0f      	ldr	r3, [pc, #60]	; (19a4 <usart_async_read+0x68>)
    1968:	4628      	mov	r0, r5
    196a:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
    196c:	4b0e      	ldr	r3, [pc, #56]	; (19a8 <usart_async_read+0x6c>)
	num = ringbuffer_num(&descr->rx);
    196e:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
    1970:	a801      	add	r0, sp, #4
    1972:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    1974:	2400      	movs	r4, #0
    1976:	45a0      	cmp	r8, r4
    1978:	d001      	beq.n	197e <usart_async_read+0x42>
    197a:	42a7      	cmp	r7, r4
    197c:	d106      	bne.n	198c <usart_async_read+0x50>
	return (int32_t)was_read;
    197e:	b2a0      	uxth	r0, r4
}
    1980:	b003      	add	sp, #12
    1982:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1986:	e7e3      	b.n	1950 <usart_async_read+0x14>
	ASSERT(descr && buf && length);
    1988:	4608      	mov	r0, r1
    198a:	e7e1      	b.n	1950 <usart_async_read+0x14>
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    198c:	1931      	adds	r1, r6, r4
    198e:	4628      	mov	r0, r5
    1990:	47c8      	blx	r9
    1992:	3401      	adds	r4, #1
    1994:	e7ef      	b.n	1976 <usart_async_read+0x3a>
    1996:	bf00      	nop
    1998:	0000c542 	.word	0x0000c542
    199c:	00002009 	.word	0x00002009
    19a0:	000011d1 	.word	0x000011d1
    19a4:	00002161 	.word	0x00002161
    19a8:	000011df 	.word	0x000011df
    19ac:	000020d9 	.word	0x000020d9

000019b0 <usart_async_init>:
{
    19b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    19b2:	460d      	mov	r5, r1
    19b4:	4616      	mov	r6, r2
    19b6:	461f      	mov	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    19b8:	4604      	mov	r4, r0
    19ba:	b310      	cbz	r0, 1a02 <usart_async_init+0x52>
    19bc:	b311      	cbz	r1, 1a04 <usart_async_init+0x54>
    19be:	b31a      	cbz	r2, 1a08 <usart_async_init+0x58>
    19c0:	1c18      	adds	r0, r3, #0
    19c2:	bf18      	it	ne
    19c4:	2001      	movne	r0, #1
    19c6:	223a      	movs	r2, #58	; 0x3a
    19c8:	4912      	ldr	r1, [pc, #72]	; (1a14 <usart_async_init+0x64>)
    19ca:	4b13      	ldr	r3, [pc, #76]	; (1a18 <usart_async_init+0x68>)
    19cc:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    19ce:	463a      	mov	r2, r7
    19d0:	4631      	mov	r1, r6
    19d2:	f104 0034 	add.w	r0, r4, #52	; 0x34
    19d6:	4b11      	ldr	r3, [pc, #68]	; (1a1c <usart_async_init+0x6c>)
    19d8:	4798      	blx	r3
    19da:	b9b8      	cbnz	r0, 1a0c <usart_async_init+0x5c>
	init_status = _usart_async_init(&descr->device, hw);
    19dc:	4629      	mov	r1, r5
    19de:	f104 0008 	add.w	r0, r4, #8
    19e2:	4b0f      	ldr	r3, [pc, #60]	; (1a20 <usart_async_init+0x70>)
    19e4:	4798      	blx	r3
	if (init_status) {
    19e6:	b998      	cbnz	r0, 1a10 <usart_async_init+0x60>
	descr->io.read  = usart_async_read;
    19e8:	4b0e      	ldr	r3, [pc, #56]	; (1a24 <usart_async_init+0x74>)
    19ea:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_async_write;
    19ec:	4b0e      	ldr	r3, [pc, #56]	; (1a28 <usart_async_init+0x78>)
    19ee:	6023      	str	r3, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    19f0:	4b0e      	ldr	r3, [pc, #56]	; (1a2c <usart_async_init+0x7c>)
    19f2:	60a3      	str	r3, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    19f4:	4b0e      	ldr	r3, [pc, #56]	; (1a30 <usart_async_init+0x80>)
    19f6:	60e3      	str	r3, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    19f8:	4b0e      	ldr	r3, [pc, #56]	; (1a34 <usart_async_init+0x84>)
    19fa:	6123      	str	r3, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    19fc:	4b0e      	ldr	r3, [pc, #56]	; (1a38 <usart_async_init+0x88>)
    19fe:	6163      	str	r3, [r4, #20]
	return ERR_NONE;
    1a00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1a02:	e7e0      	b.n	19c6 <usart_async_init+0x16>
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    1a04:	4608      	mov	r0, r1
    1a06:	e7de      	b.n	19c6 <usart_async_init+0x16>
    1a08:	4610      	mov	r0, r2
    1a0a:	e7dc      	b.n	19c6 <usart_async_init+0x16>
		return ERR_INVALID_ARG;
    1a0c:	f06f 000c 	mvn.w	r0, #12
}
    1a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1a12:	bf00      	nop
    1a14:	0000c542 	.word	0x0000c542
    1a18:	00002009 	.word	0x00002009
    1a1c:	00002099 	.word	0x00002099
    1a20:	00002fdd 	.word	0x00002fdd
    1a24:	0000193d 	.word	0x0000193d
    1a28:	000018ad 	.word	0x000018ad
    1a2c:	00001909 	.word	0x00001909
    1a30:	0000188d 	.word	0x0000188d
    1a34:	0000186d 	.word	0x0000186d
    1a38:	0000187d 	.word	0x0000187d

00001a3c <usart_async_enable>:
{
    1a3c:	b510      	push	{r4, lr}
	ASSERT(descr);
    1a3e:	4604      	mov	r4, r0
    1a40:	3000      	adds	r0, #0
    1a42:	bf18      	it	ne
    1a44:	2001      	movne	r0, #1
    1a46:	2261      	movs	r2, #97	; 0x61
    1a48:	4904      	ldr	r1, [pc, #16]	; (1a5c <usart_async_enable+0x20>)
    1a4a:	4b05      	ldr	r3, [pc, #20]	; (1a60 <usart_async_enable+0x24>)
    1a4c:	4798      	blx	r3
	_usart_async_enable(&descr->device);
    1a4e:	f104 0008 	add.w	r0, r4, #8
    1a52:	4b04      	ldr	r3, [pc, #16]	; (1a64 <usart_async_enable+0x28>)
    1a54:	4798      	blx	r3
}
    1a56:	2000      	movs	r0, #0
    1a58:	bd10      	pop	{r4, pc}
    1a5a:	bf00      	nop
    1a5c:	0000c542 	.word	0x0000c542
    1a60:	00002009 	.word	0x00002009
    1a64:	00003059 	.word	0x00003059

00001a68 <usart_async_get_io_descriptor>:
{
    1a68:	b538      	push	{r3, r4, r5, lr}
    1a6a:	460d      	mov	r5, r1
	ASSERT(descr && io);
    1a6c:	4604      	mov	r4, r0
    1a6e:	b148      	cbz	r0, 1a84 <usart_async_get_io_descriptor+0x1c>
    1a70:	1c08      	adds	r0, r1, #0
    1a72:	bf18      	it	ne
    1a74:	2001      	movne	r0, #1
    1a76:	2277      	movs	r2, #119	; 0x77
    1a78:	4903      	ldr	r1, [pc, #12]	; (1a88 <usart_async_get_io_descriptor+0x20>)
    1a7a:	4b04      	ldr	r3, [pc, #16]	; (1a8c <usart_async_get_io_descriptor+0x24>)
    1a7c:	4798      	blx	r3
	*io = &descr->io;
    1a7e:	602c      	str	r4, [r5, #0]
}
    1a80:	2000      	movs	r0, #0
    1a82:	bd38      	pop	{r3, r4, r5, pc}
    1a84:	e7f7      	b.n	1a76 <usart_async_get_io_descriptor+0xe>
    1a86:	bf00      	nop
    1a88:	0000c542 	.word	0x0000c542
    1a8c:	00002009 	.word	0x00002009

00001a90 <usart_async_register_callback>:
{
    1a90:	b570      	push	{r4, r5, r6, lr}
	ASSERT(descr);
    1a92:	4604      	mov	r4, r0
    1a94:	3000      	adds	r0, #0
{
    1a96:	460e      	mov	r6, r1
	ASSERT(descr);
    1a98:	bf18      	it	ne
    1a9a:	2001      	movne	r0, #1
{
    1a9c:	4615      	mov	r5, r2
	ASSERT(descr);
    1a9e:	4911      	ldr	r1, [pc, #68]	; (1ae4 <usart_async_register_callback+0x54>)
    1aa0:	4b11      	ldr	r3, [pc, #68]	; (1ae8 <usart_async_register_callback+0x58>)
    1aa2:	2283      	movs	r2, #131	; 0x83
    1aa4:	4798      	blx	r3
	switch (type) {
    1aa6:	2e01      	cmp	r6, #1
    1aa8:	d010      	beq.n	1acc <usart_async_register_callback+0x3c>
    1aaa:	d304      	bcc.n	1ab6 <usart_async_register_callback+0x26>
    1aac:	2e02      	cmp	r6, #2
    1aae:	d013      	beq.n	1ad8 <usart_async_register_callback+0x48>
		return ERR_INVALID_ARG;
    1ab0:	f06f 000c 	mvn.w	r0, #12
}
    1ab4:	bd70      	pop	{r4, r5, r6, pc}
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
    1ab6:	1c2a      	adds	r2, r5, #0
		descr->usart_cb.rx_done = cb;
    1ab8:	62a5      	str	r5, [r4, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
    1aba:	bf18      	it	ne
    1abc:	2201      	movne	r2, #1
    1abe:	2101      	movs	r1, #1
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
    1ac0:	f104 0008 	add.w	r0, r4, #8
    1ac4:	4b09      	ldr	r3, [pc, #36]	; (1aec <usart_async_register_callback+0x5c>)
    1ac6:	4798      	blx	r3
	return ERR_NONE;
    1ac8:	2000      	movs	r0, #0
		break;
    1aca:	bd70      	pop	{r4, r5, r6, pc}
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
    1acc:	1c2a      	adds	r2, r5, #0
		descr->usart_cb.tx_done = cb;
    1ace:	6265      	str	r5, [r4, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
    1ad0:	bf18      	it	ne
    1ad2:	2201      	movne	r2, #1
    1ad4:	2102      	movs	r1, #2
    1ad6:	e7f3      	b.n	1ac0 <usart_async_register_callback+0x30>
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
    1ad8:	1c2a      	adds	r2, r5, #0
		descr->usart_cb.error = cb;
    1ada:	62e5      	str	r5, [r4, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
    1adc:	bf18      	it	ne
    1ade:	2201      	movne	r2, #1
    1ae0:	2103      	movs	r1, #3
    1ae2:	e7ed      	b.n	1ac0 <usart_async_register_callback+0x30>
    1ae4:	0000c542 	.word	0x0000c542
    1ae8:	00002009 	.word	0x00002009
    1aec:	00003095 	.word	0x00003095

00001af0 <usart_async_is_tx_empty>:
{
    1af0:	b510      	push	{r4, lr}
	ASSERT(descr);
    1af2:	4604      	mov	r4, r0
    1af4:	3000      	adds	r0, #0
    1af6:	bf18      	it	ne
    1af8:	2001      	movne	r0, #1
    1afa:	22f8      	movs	r2, #248	; 0xf8
    1afc:	4903      	ldr	r1, [pc, #12]	; (1b0c <usart_async_is_tx_empty+0x1c>)
    1afe:	4b04      	ldr	r3, [pc, #16]	; (1b10 <usart_async_is_tx_empty+0x20>)
    1b00:	4798      	blx	r3
	return _usart_async_is_byte_sent(&descr->device);
    1b02:	f104 0008 	add.w	r0, r4, #8
    1b06:	4b03      	ldr	r3, [pc, #12]	; (1b14 <usart_async_is_tx_empty+0x24>)
    1b08:	4798      	blx	r3
}
    1b0a:	bd10      	pop	{r4, pc}
    1b0c:	0000c542 	.word	0x0000c542
    1b10:	00002009 	.word	0x00002009
    1b14:	0000307b 	.word	0x0000307b

00001b18 <_usb_d_find_ep>:
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    1b18:	490a      	ldr	r1, [pc, #40]	; (1b44 <_usb_d_find_ep+0x2c>)
{
    1b1a:	b570      	push	{r4, r5, r6, lr}
    1b1c:	2300      	movs	r3, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    1b1e:	f000 060f 	and.w	r6, r0, #15
    1b22:	015d      	lsls	r5, r3, #5
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    1b24:	194c      	adds	r4, r1, r5
    1b26:	b25a      	sxtb	r2, r3
    1b28:	7864      	ldrb	r4, [r4, #1]
    1b2a:	4284      	cmp	r4, r0
    1b2c:	d008      	beq.n	1b40 <_usb_d_find_ep+0x28>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    1b2e:	5c6d      	ldrb	r5, [r5, r1]
    1b30:	b90d      	cbnz	r5, 1b36 <_usb_d_find_ep+0x1e>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    1b32:	42a6      	cmp	r6, r4
    1b34:	d004      	beq.n	1b40 <_usb_d_find_ep+0x28>
    1b36:	3301      	adds	r3, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    1b38:	2b04      	cmp	r3, #4
    1b3a:	d1f2      	bne.n	1b22 <_usb_d_find_ep+0xa>
			return i;
		}
	}
	return -1;
    1b3c:	f04f 32ff 	mov.w	r2, #4294967295
}
    1b40:	4610      	mov	r0, r2
    1b42:	bd70      	pop	{r4, r5, r6, pc}
    1b44:	20000334 	.word	0x20000334

00001b48 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    1b48:	2000      	movs	r0, #0
    1b4a:	4770      	bx	lr

00001b4c <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    1b4c:	b570      	push	{r4, r5, r6, lr}
	int8_t           ep_index = _usb_d_find_ep(ep);
    1b4e:	4b09      	ldr	r3, [pc, #36]	; (1b74 <usb_d_cb_trans_more+0x28>)
{
    1b50:	4604      	mov	r4, r0
    1b52:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    1b54:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    1b56:	4b08      	ldr	r3, [pc, #32]	; (1b78 <usb_d_cb_trans_more+0x2c>)
    1b58:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    1b5c:	7883      	ldrb	r3, [r0, #2]
    1b5e:	2b03      	cmp	r3, #3
    1b60:	d105      	bne.n	1b6e <usb_d_cb_trans_more+0x22>
		return ept->callbacks.more(ep, transfered);
    1b62:	6983      	ldr	r3, [r0, #24]
    1b64:	4629      	mov	r1, r5
    1b66:	4620      	mov	r0, r4
	}
	return false;
}
    1b68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return ept->callbacks.more(ep, transfered);
    1b6c:	4718      	bx	r3
}
    1b6e:	2000      	movs	r0, #0
    1b70:	bd70      	pop	{r4, r5, r6, pc}
    1b72:	bf00      	nop
    1b74:	00001b19 	.word	0x00001b19
    1b78:	20000334 	.word	0x20000334

00001b7c <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    1b7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int8_t           ep_index = _usb_d_find_ep(ep);
    1b80:	4b3c      	ldr	r3, [pc, #240]	; (1c74 <_usb_d_cb_trans_done+0xf8>)
    1b82:	4c3d      	ldr	r4, [pc, #244]	; (1c78 <_usb_d_cb_trans_done+0xfc>)
{
    1b84:	b085      	sub	sp, #20
    1b86:	4680      	mov	r8, r0
    1b88:	460f      	mov	r7, r1
    1b8a:	4691      	mov	r9, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    1b8c:	4798      	blx	r3
    1b8e:	4603      	mov	r3, r0
    1b90:	0146      	lsls	r6, r0, #5
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
    1b92:	2f00      	cmp	r7, #0
    1b94:	d149      	bne.n	1c2a <_usb_d_cb_trans_done+0xae>
		ept->xfer.hdr.status = USB_XFER_DONE;
    1b96:	19a5      	adds	r5, r4, r6
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1b98:	5da1      	ldrb	r1, [r4, r6]
		ept->xfer.hdr.status = USB_XFER_DONE;
    1b9a:	70ef      	strb	r7, [r5, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1b9c:	2900      	cmp	r1, #0
    1b9e:	d13b      	bne.n	1c18 <_usb_d_cb_trans_done+0x9c>
	if (state == USB_EP_S_X_DATA) {
    1ba0:	78aa      	ldrb	r2, [r5, #2]
    1ba2:	7868      	ldrb	r0, [r5, #1]
    1ba4:	69ee      	ldr	r6, [r5, #28]
    1ba6:	2a03      	cmp	r2, #3
    1ba8:	f04f 0e0c 	mov.w	lr, #12
    1bac:	f04f 0220 	mov.w	r2, #32
    1bb0:	d12b      	bne.n	1c0a <_usb_d_cb_trans_done+0x8e>
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    1bb2:	fb12 e203 	smlabb	r2, r2, r3, lr
    1bb6:	4422      	add	r2, r4
    1bb8:	2101      	movs	r1, #1
    1bba:	f995 700c 	ldrsb.w	r7, [r5, #12]
    1bbe:	47b0      	blx	r6
    1bc0:	786b      	ldrb	r3, [r5, #1]
		if (err) {
    1bc2:	b178      	cbz	r0, 1be4 <_usb_d_cb_trans_done+0x68>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    1bc4:	2205      	movs	r2, #5
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    1bc6:	2f00      	cmp	r7, #0
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    1bc8:	70aa      	strb	r2, [r5, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    1bca:	f04f 0202 	mov.w	r2, #2
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    1bce:	bfb4      	ite	lt
    1bd0:	4618      	movlt	r0, r3
    1bd2:	f043 0080 	orrge.w	r0, r3, #128	; 0x80
			ept->xfer.hdr.status = USB_XFER_HALT;
    1bd6:	70ea      	strb	r2, [r5, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    1bd8:	2101      	movs	r1, #1
    1bda:	4b28      	ldr	r3, [pc, #160]	; (1c7c <_usb_d_cb_trans_done+0x100>)
    1bdc:	4798      	blx	r3
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
}
    1bde:	b005      	add	sp, #20
    1be0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	struct usb_d_transfer trans
    1be4:	2f00      	cmp	r7, #0
    1be6:	bfac      	ite	ge
    1be8:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
    1bec:	f003 030f 	andlt.w	r3, r3, #15
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    1bf0:	2204      	movs	r2, #4
	struct usb_d_transfer trans
    1bf2:	f88d 300c 	strb.w	r3, [sp, #12]
    1bf6:	2301      	movs	r3, #1
    1bf8:	9001      	str	r0, [sp, #4]
    1bfa:	9002      	str	r0, [sp, #8]
    1bfc:	f88d 300d 	strb.w	r3, [sp, #13]
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    1c00:	70aa      	strb	r2, [r5, #2]
	return _usb_d_dev_ep_trans(&trans);
    1c02:	a801      	add	r0, sp, #4
    1c04:	4b1e      	ldr	r3, [pc, #120]	; (1c80 <_usb_d_cb_trans_done+0x104>)
    1c06:	4798      	blx	r3
    1c08:	e7e9      	b.n	1bde <_usb_d_cb_trans_done+0x62>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    1c0a:	fb12 e203 	smlabb	r2, r2, r3, lr
    1c0e:	4422      	add	r2, r4
    1c10:	47b0      	blx	r6
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    1c12:	2302      	movs	r3, #2
    1c14:	70ab      	strb	r3, [r5, #2]
    1c16:	e7e2      	b.n	1bde <_usb_d_cb_trans_done+0x62>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    1c18:	2301      	movs	r3, #1
    1c1a:	70ab      	strb	r3, [r5, #2]
	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    1c1c:	4434      	add	r4, r6
    1c1e:	464a      	mov	r2, r9
    1c20:	69e3      	ldr	r3, [r4, #28]
    1c22:	78e1      	ldrb	r1, [r4, #3]
    1c24:	4640      	mov	r0, r8
    1c26:	4798      	blx	r3
    1c28:	e7d9      	b.n	1bde <_usb_d_cb_trans_done+0x62>
	} else if (code == USB_TRANS_STALL) {
    1c2a:	2f01      	cmp	r7, #1
		ept->xfer.hdr.status = USB_XFER_HALT;
    1c2c:	eb04 0306 	add.w	r3, r4, r6
	} else if (code == USB_TRANS_STALL) {
    1c30:	d10b      	bne.n	1c4a <_usb_d_cb_trans_done+0xce>
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1c32:	5da1      	ldrb	r1, [r4, r6]
		ept->xfer.hdr.status = USB_XFER_HALT;
    1c34:	2202      	movs	r2, #2
    1c36:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1c38:	b921      	cbnz	r1, 1c44 <_usb_d_cb_trans_done+0xc8>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    1c3a:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1c3c:	4640      	mov	r0, r8
    1c3e:	4b0f      	ldr	r3, [pc, #60]	; (1c7c <_usb_d_cb_trans_done+0x100>)
    1c40:	4798      	blx	r3
    1c42:	e7eb      	b.n	1c1c <_usb_d_cb_trans_done+0xa0>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    1c44:	2205      	movs	r2, #5
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    1c46:	709a      	strb	r2, [r3, #2]
    1c48:	e7e8      	b.n	1c1c <_usb_d_cb_trans_done+0xa0>
	} else if (code == USB_TRANS_ABORT) {
    1c4a:	2f02      	cmp	r7, #2
    1c4c:	d107      	bne.n	1c5e <_usb_d_cb_trans_done+0xe2>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    1c4e:	2204      	movs	r2, #4
    1c50:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1c52:	5da2      	ldrb	r2, [r4, r6]
    1c54:	b90a      	cbnz	r2, 1c5a <_usb_d_cb_trans_done+0xde>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    1c56:	709f      	strb	r7, [r3, #2]
			return;
    1c58:	e7c1      	b.n	1bde <_usb_d_cb_trans_done+0x62>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    1c5a:	2201      	movs	r2, #1
    1c5c:	e7f3      	b.n	1c46 <_usb_d_cb_trans_done+0xca>
	} else if (code == USB_TRANS_RESET) {
    1c5e:	2f03      	cmp	r7, #3
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    1c60:	bf09      	itett	eq
    1c62:	2200      	moveq	r2, #0
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    1c64:	2206      	movne	r2, #6
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    1c66:	709a      	strbeq	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    1c68:	2205      	moveq	r2, #5
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    1c6a:	bf18      	it	ne
    1c6c:	709a      	strbne	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    1c6e:	70da      	strb	r2, [r3, #3]
    1c70:	e7d4      	b.n	1c1c <_usb_d_cb_trans_done+0xa0>
    1c72:	bf00      	nop
    1c74:	00001b19 	.word	0x00001b19
    1c78:	20000334 	.word	0x20000334
    1c7c:	00003f35 	.word	0x00003f35
    1c80:	0000406d 	.word	0x0000406d

00001c84 <usb_d_cb_trans_setup>:
{
    1c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int8_t           ep_index = _usb_d_find_ep(ep);
    1c88:	4b1d      	ldr	r3, [pc, #116]	; (1d00 <usb_d_cb_trans_setup+0x7c>)
	uint8_t *        req      = ept->xfer.req;
    1c8a:	4e1e      	ldr	r6, [pc, #120]	; (1d04 <usb_d_cb_trans_setup+0x80>)
    1c8c:	4c1e      	ldr	r4, [pc, #120]	; (1d08 <usb_d_cb_trans_setup+0x84>)
{
    1c8e:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1c90:	4798      	blx	r3
	uint8_t *        req      = ept->xfer.req;
    1c92:	2720      	movs	r7, #32
    1c94:	230c      	movs	r3, #12
    1c96:	fb17 3700 	smlabb	r7, r7, r0, r3
    1c9a:	4437      	add	r7, r6
	int8_t           ep_index = _usb_d_find_ep(ep);
    1c9c:	4681      	mov	r9, r0
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    1c9e:	4639      	mov	r1, r7
    1ca0:	4628      	mov	r0, r5
    1ca2:	4b1a      	ldr	r3, [pc, #104]	; (1d0c <usb_d_cb_trans_setup+0x88>)
    1ca4:	4798      	blx	r3
	if (n != 8) {
    1ca6:	b2c0      	uxtb	r0, r0
    1ca8:	2808      	cmp	r0, #8
    1caa:	f065 087f 	orn	r8, r5, #127	; 0x7f
    1cae:	d009      	beq.n	1cc4 <usb_d_cb_trans_setup+0x40>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1cb0:	2101      	movs	r1, #1
    1cb2:	4628      	mov	r0, r5
    1cb4:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    1cb6:	2101      	movs	r1, #1
    1cb8:	fa5f f088 	uxtb.w	r0, r8
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    1cbc:	4623      	mov	r3, r4
}
    1cbe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    1cc2:	4718      	bx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    1cc4:	eb06 1649 	add.w	r6, r6, r9, lsl #5
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1cc8:	2100      	movs	r1, #0
    1cca:	4628      	mov	r0, r5
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    1ccc:	fa5f f888 	uxtb.w	r8, r8
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1cd0:	47a0      	blx	r4
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    1cd2:	f04f 0901 	mov.w	r9, #1
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    1cd6:	2100      	movs	r1, #0
    1cd8:	4640      	mov	r0, r8
    1cda:	47a0      	blx	r4
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    1cdc:	f886 9002 	strb.w	r9, [r6, #2]
	if (!ept->callbacks.req(ep, req)) {
    1ce0:	6973      	ldr	r3, [r6, #20]
    1ce2:	4639      	mov	r1, r7
    1ce4:	4628      	mov	r0, r5
    1ce6:	4798      	blx	r3
    1ce8:	b938      	cbnz	r0, 1cfa <usb_d_cb_trans_setup+0x76>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    1cea:	2305      	movs	r3, #5
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1cec:	4649      	mov	r1, r9
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    1cee:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1cf0:	4628      	mov	r0, r5
    1cf2:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    1cf4:	4649      	mov	r1, r9
    1cf6:	4640      	mov	r0, r8
    1cf8:	e7e0      	b.n	1cbc <usb_d_cb_trans_setup+0x38>
    1cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1cfe:	bf00      	nop
    1d00:	00001b19 	.word	0x00001b19
    1d04:	20000334 	.word	0x20000334
    1d08:	00003f35 	.word	0x00003f35
    1d0c:	00004019 	.word	0x00004019

00001d10 <usb_d_init>:

int32_t usb_d_init(void)
{
    1d10:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    1d12:	4b10      	ldr	r3, [pc, #64]	; (1d54 <usb_d_init+0x44>)
    1d14:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    1d16:	2800      	cmp	r0, #0
    1d18:	db1b      	blt.n	1d52 <usb_d_init+0x42>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    1d1a:	2280      	movs	r2, #128	; 0x80
    1d1c:	2100      	movs	r1, #0
    1d1e:	4b0e      	ldr	r3, [pc, #56]	; (1d58 <usb_d_init+0x48>)
    1d20:	480e      	ldr	r0, [pc, #56]	; (1d5c <usb_d_init+0x4c>)
    1d22:	4798      	blx	r3
    1d24:	4b0d      	ldr	r3, [pc, #52]	; (1d5c <usb_d_init+0x4c>)
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    1d26:	4a0e      	ldr	r2, [pc, #56]	; (1d60 <usb_d_init+0x50>)
    1d28:	f103 0180 	add.w	r1, r3, #128	; 0x80
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    1d2c:	20ff      	movs	r0, #255	; 0xff
    1d2e:	7058      	strb	r0, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    1d30:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    1d32:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    1d34:	61da      	str	r2, [r3, #28]
    1d36:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    1d38:	428b      	cmp	r3, r1
    1d3a:	d1f8      	bne.n	1d2e <usb_d_init+0x1e>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    1d3c:	4c09      	ldr	r4, [pc, #36]	; (1d64 <usb_d_init+0x54>)
    1d3e:	490a      	ldr	r1, [pc, #40]	; (1d68 <usb_d_init+0x58>)
    1d40:	2000      	movs	r0, #0
    1d42:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    1d44:	4909      	ldr	r1, [pc, #36]	; (1d6c <usb_d_init+0x5c>)
    1d46:	2001      	movs	r0, #1
    1d48:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    1d4a:	2002      	movs	r0, #2
    1d4c:	4908      	ldr	r1, [pc, #32]	; (1d70 <usb_d_init+0x60>)
    1d4e:	47a0      	blx	r4
	return ERR_NONE;
    1d50:	2000      	movs	r0, #0
}
    1d52:	bd10      	pop	{r4, pc}
    1d54:	00003b3d 	.word	0x00003b3d
    1d58:	0000b385 	.word	0x0000b385
    1d5c:	20000334 	.word	0x20000334
    1d60:	00001b49 	.word	0x00001b49
    1d64:	00004199 	.word	0x00004199
    1d68:	00001c85 	.word	0x00001c85
    1d6c:	00001b4d 	.word	0x00001b4d
    1d70:	00001b7d 	.word	0x00001b7d

00001d74 <usb_d_register_callback>:
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    1d74:	4b00      	ldr	r3, [pc, #0]	; (1d78 <usb_d_register_callback+0x4>)
    1d76:	4718      	bx	r3
    1d78:	00004175 	.word	0x00004175

00001d7c <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
	return _usb_d_dev_enable();
    1d7c:	4b00      	ldr	r3, [pc, #0]	; (1d80 <usb_d_enable+0x4>)
    1d7e:	4718      	bx	r3
    1d80:	00003c09 	.word	0x00003c09

00001d84 <usb_d_attach>:
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
	_usb_d_dev_attach();
    1d84:	4b00      	ldr	r3, [pc, #0]	; (1d88 <usb_d_attach+0x4>)
    1d86:	4718      	bx	r3
    1d88:	00003c55 	.word	0x00003c55

00001d8c <usb_d_set_address>:
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
	_usb_d_dev_set_address(addr);
    1d8c:	4b00      	ldr	r3, [pc, #0]	; (1d90 <usb_d_set_address+0x4>)
    1d8e:	4718      	bx	r3
    1d90:	00003c67 	.word	0x00003c67

00001d94 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    1d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    1d96:	4c10      	ldr	r4, [pc, #64]	; (1dd8 <usb_d_ep_init+0x44>)
{
    1d98:	4606      	mov	r6, r0
    1d9a:	460d      	mov	r5, r1
    1d9c:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    1d9e:	47a0      	blx	r4
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    1da0:	2800      	cmp	r0, #0
    1da2:	da13      	bge.n	1dcc <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    1da4:	20ff      	movs	r0, #255	; 0xff
    1da6:	47a0      	blx	r4
		if (ep_index < 0) {
    1da8:	1e04      	subs	r4, r0, #0
    1daa:	db12      	blt.n	1dd2 <usb_d_ep_init+0x3e>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    1dac:	463a      	mov	r2, r7
    1dae:	4629      	mov	r1, r5
    1db0:	4630      	mov	r0, r6
    1db2:	4b0a      	ldr	r3, [pc, #40]	; (1ddc <usb_d_ep_init+0x48>)
    1db4:	4798      	blx	r3
	if (rc < 0) {
    1db6:	2800      	cmp	r0, #0
    1db8:	db0d      	blt.n	1dd6 <usb_d_ep_init+0x42>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    1dba:	4b09      	ldr	r3, [pc, #36]	; (1de0 <usb_d_ep_init+0x4c>)
    1dbc:	0160      	lsls	r0, r4, #5
    1dbe:	181a      	adds	r2, r3, r0
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    1dc0:	f005 0503 	and.w	r5, r5, #3
    1dc4:	541d      	strb	r5, [r3, r0]
	ept->xfer.hdr.ep   = ep;
    1dc6:	7056      	strb	r6, [r2, #1]
	return ERR_NONE;
    1dc8:	2000      	movs	r0, #0
    1dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    1dcc:	f06f 0013 	mvn.w	r0, #19
    1dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -USB_ERR_ALLOC_FAIL;
    1dd2:	f06f 0014 	mvn.w	r0, #20
}
    1dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1dd8:	00001b19 	.word	0x00001b19
    1ddc:	00003c75 	.word	0x00003c75
    1de0:	20000334 	.word	0x20000334

00001de4 <usb_d_ep0_init>:
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    1de4:	2100      	movs	r1, #0
    1de6:	4602      	mov	r2, r0
    1de8:	4b01      	ldr	r3, [pc, #4]	; (1df0 <usb_d_ep0_init+0xc>)
    1dea:	4608      	mov	r0, r1
    1dec:	4718      	bx	r3
    1dee:	bf00      	nop
    1df0:	00001d95 	.word	0x00001d95

00001df4 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    1df4:	b538      	push	{r3, r4, r5, lr}
	int8_t           ep_index = _usb_d_find_ep(ep);
    1df6:	4b07      	ldr	r3, [pc, #28]	; (1e14 <usb_d_ep_deinit+0x20>)
{
    1df8:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1dfa:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    1dfc:	1e04      	subs	r4, r0, #0
    1dfe:	db07      	blt.n	1e10 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    1e00:	4628      	mov	r0, r5
    1e02:	4b05      	ldr	r3, [pc, #20]	; (1e18 <usb_d_ep_deinit+0x24>)
    1e04:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    1e06:	4805      	ldr	r0, [pc, #20]	; (1e1c <usb_d_ep_deinit+0x28>)
    1e08:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    1e0c:	23ff      	movs	r3, #255	; 0xff
    1e0e:	7043      	strb	r3, [r0, #1]
    1e10:	bd38      	pop	{r3, r4, r5, pc}
    1e12:	bf00      	nop
    1e14:	00001b19 	.word	0x00001b19
    1e18:	00003d35 	.word	0x00003d35
    1e1c:	20000334 	.word	0x20000334

00001e20 <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
    1e20:	b538      	push	{r3, r4, r5, lr}
	int8_t           ep_index = _usb_d_find_ep(ep);
    1e22:	4b0c      	ldr	r3, [pc, #48]	; (1e54 <usb_d_ep_enable+0x34>)
{
    1e24:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1e26:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    1e28:	2800      	cmp	r0, #0
    1e2a:	db10      	blt.n	1e4e <usb_d_ep_enable+0x2e>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    1e2c:	0140      	lsls	r0, r0, #5
    1e2e:	4c0a      	ldr	r4, [pc, #40]	; (1e58 <usb_d_ep_enable+0x38>)
    1e30:	5c23      	ldrb	r3, [r4, r0]
    1e32:	4404      	add	r4, r0
    1e34:	2b00      	cmp	r3, #0
    1e36:	bf0c      	ite	eq
    1e38:	2302      	moveq	r3, #2
    1e3a:	2301      	movne	r3, #1
    1e3c:	70a3      	strb	r3, [r4, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    1e3e:	4628      	mov	r0, r5
    1e40:	4b06      	ldr	r3, [pc, #24]	; (1e5c <usb_d_ep_enable+0x3c>)
    1e42:	4798      	blx	r3
	if (rc < 0) {
    1e44:	2800      	cmp	r0, #0
    1e46:	da04      	bge.n	1e52 <usb_d_ep_enable+0x32>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    1e48:	2300      	movs	r3, #0
    1e4a:	70a3      	strb	r3, [r4, #2]
    1e4c:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
    1e4e:	f06f 0011 	mvn.w	r0, #17
	}
	return rc;
}
    1e52:	bd38      	pop	{r3, r4, r5, pc}
    1e54:	00001b19 	.word	0x00001b19
    1e58:	20000334 	.word	0x20000334
    1e5c:	00003db9 	.word	0x00003db9

00001e60 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    1e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    1e64:	f890 a008 	ldrb.w	sl, [r0, #8]
    1e68:	4b36      	ldr	r3, [pc, #216]	; (1f44 <usb_d_ep_transfer+0xe4>)
{
    1e6a:	4607      	mov	r7, r0
    1e6c:	b087      	sub	sp, #28
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    1e6e:	4650      	mov	r0, sl
    1e70:	4798      	blx	r3
	uint32_t              len = xfer->size;
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    1e72:	f1b0 0800 	subs.w	r8, r0, #0
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    1e76:	f897 9009 	ldrb.w	r9, [r7, #9]
	uint32_t              len = xfer->size;
    1e7a:	687e      	ldr	r6, [r7, #4]
	if (ep_index < 0) {
    1e7c:	db5d      	blt.n	1f3a <usb_d_ep_transfer+0xda>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
	state = ept->xfer.hdr.state;
    1e7e:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 1f54 <usb_d_ep_transfer+0xf4>
	atomic_enter_critical(&flags);
    1e82:	4b31      	ldr	r3, [pc, #196]	; (1f48 <usb_d_ep_transfer+0xe8>)
	state = ept->xfer.hdr.state;
    1e84:	ea4f 1848 	mov.w	r8, r8, lsl #5
    1e88:	eb0b 0508 	add.w	r5, fp, r8
	atomic_enter_critical(&flags);
    1e8c:	a802      	add	r0, sp, #8
    1e8e:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    1e90:	78ab      	ldrb	r3, [r5, #2]
    1e92:	f88d 3007 	strb.w	r3, [sp, #7]
	if (state == USB_EP_S_IDLE) {
    1e96:	f89d 0007 	ldrb.w	r0, [sp, #7]
    1e9a:	4b2c      	ldr	r3, [pc, #176]	; (1f4c <usb_d_ep_transfer+0xec>)
    1e9c:	b2c4      	uxtb	r4, r0
    1e9e:	2c01      	cmp	r4, #1
    1ea0:	d11c      	bne.n	1edc <usb_d_ep_transfer+0x7c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    1ea2:	2203      	movs	r2, #3
    1ea4:	70aa      	strb	r2, [r5, #2]
		atomic_leave_critical(&flags);
    1ea6:	a802      	add	r0, sp, #8
    1ea8:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1eaa:	f81b 3008 	ldrb.w	r3, [fp, r8]
    1eae:	b34b      	cbz	r3, 1f04 <usb_d_ep_transfer+0xa4>
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    1eb0:	f119 0300 	adds.w	r3, r9, #0
    1eb4:	ea4f 14da 	mov.w	r4, sl, lsr #7
    1eb8:	bf18      	it	ne
    1eba:	2301      	movne	r3, #1
	struct usb_d_transfer trans
    1ebc:	6839      	ldr	r1, [r7, #0]
				zlp = false;
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1ebe:	7a3a      	ldrb	r2, [r7, #8]
	struct usb_d_transfer trans
    1ec0:	9103      	str	r1, [sp, #12]
    1ec2:	9604      	str	r6, [sp, #16]
    1ec4:	2c00      	cmp	r4, #0
    1ec6:	d035      	beq.n	1f34 <usb_d_ep_transfer+0xd4>
    1ec8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    1ecc:	f88d 3015 	strb.w	r3, [sp, #21]
	return _usb_d_dev_ep_trans(&trans);
    1ed0:	a803      	add	r0, sp, #12
    1ed2:	4b1f      	ldr	r3, [pc, #124]	; (1f50 <usb_d_ep_transfer+0xf0>)
	struct usb_d_transfer trans
    1ed4:	f88d 2014 	strb.w	r2, [sp, #20]
	return _usb_d_dev_ep_trans(&trans);
    1ed8:	4798      	blx	r3
	return rc;
    1eda:	e00d      	b.n	1ef8 <usb_d_ep_transfer+0x98>
		atomic_leave_critical(&flags);
    1edc:	a802      	add	r0, sp, #8
    1ede:	4798      	blx	r3
		switch (state) {
    1ee0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1ee4:	b2db      	uxtb	r3, r3
    1ee6:	2b05      	cmp	r3, #5
    1ee8:	d02a      	beq.n	1f40 <usb_d_ep_transfer+0xe0>
    1eea:	2b06      	cmp	r3, #6
    1eec:	d007      	beq.n	1efe <usb_d_ep_transfer+0x9e>
			return USB_BUSY;
    1eee:	2b00      	cmp	r3, #0
    1ef0:	bf0c      	ite	eq
    1ef2:	f06f 0012 	mvneq.w	r0, #18
    1ef6:	2001      	movne	r0, #1
}
    1ef8:	b007      	add	sp, #28
    1efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -USB_ERROR;
    1efe:	f06f 000f 	mvn.w	r0, #15
    1f02:	e7f9      	b.n	1ef8 <usb_d_ep_transfer+0x98>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    1f04:	7ce9      	ldrb	r1, [r5, #19]
    1f06:	7caa      	ldrb	r2, [r5, #18]
    1f08:	eb02 2201 	add.w	r2, r2, r1, lsl #8
    1f0c:	b292      	uxth	r2, r2
		if (req_len == 0) {
    1f0e:	b92a      	cbnz	r2, 1f1c <usb_d_ep_transfer+0xbc>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    1f10:	2304      	movs	r3, #4
    1f12:	70ab      	strb	r3, [r5, #2]
			len                 = 0;
    1f14:	4616      	mov	r6, r2
			zlp                 = true;
    1f16:	4623      	mov	r3, r4
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    1f18:	461c      	mov	r4, r3
    1f1a:	e7cf      	b.n	1ebc <usb_d_ep_transfer+0x5c>
			if (dir) {
    1f1c:	f995 100c 	ldrsb.w	r1, [r5, #12]
    1f20:	4296      	cmp	r6, r2
    1f22:	bf28      	it	cs
    1f24:	4616      	movcs	r6, r2
    1f26:	2900      	cmp	r1, #0
    1f28:	daf6      	bge.n	1f18 <usb_d_ep_transfer+0xb8>
				zlp = (req_len > len);
    1f2a:	42b2      	cmp	r2, r6
    1f2c:	bf94      	ite	ls
    1f2e:	2300      	movls	r3, #0
    1f30:	2301      	movhi	r3, #1
    1f32:	e7c3      	b.n	1ebc <usb_d_ep_transfer+0x5c>
	struct usb_d_transfer trans
    1f34:	f002 020f 	and.w	r2, r2, #15
    1f38:	e7c8      	b.n	1ecc <usb_d_ep_transfer+0x6c>
		return -USB_ERR_PARAM;
    1f3a:	f06f 0011 	mvn.w	r0, #17
    1f3e:	e7db      	b.n	1ef8 <usb_d_ep_transfer+0x98>
			return USB_HALTED;
    1f40:	2002      	movs	r0, #2
    1f42:	e7d9      	b.n	1ef8 <usb_d_ep_transfer+0x98>
    1f44:	00001b19 	.word	0x00001b19
    1f48:	000011d1 	.word	0x000011d1
    1f4c:	000011df 	.word	0x000011df
    1f50:	0000406d 	.word	0x0000406d
    1f54:	20000334 	.word	0x20000334

00001f58 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    1f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1f5c:	4605      	mov	r5, r0
	if (ctrl == USB_EP_HALT_CLR) {
    1f5e:	460c      	mov	r4, r1
    1f60:	b9d9      	cbnz	r1, 1f9a <usb_d_ep_halt+0x42>
	int8_t           ep_index = _usb_d_find_ep(ep);
    1f62:	4b13      	ldr	r3, [pc, #76]	; (1fb0 <usb_d_ep_halt+0x58>)
    1f64:	4798      	blx	r3
	if (ep_index < 0) {
    1f66:	1e07      	subs	r7, r0, #0
    1f68:	db1e      	blt.n	1fa8 <usb_d_ep_halt+0x50>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    1f6a:	2102      	movs	r1, #2
    1f6c:	4628      	mov	r0, r5
    1f6e:	4e11      	ldr	r6, [pc, #68]	; (1fb4 <usb_d_ep_halt+0x5c>)
    1f70:	47b0      	blx	r6
    1f72:	b1d8      	cbz	r0, 1fac <usb_d_ep_halt+0x54>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1f74:	4621      	mov	r1, r4
    1f76:	4628      	mov	r0, r5
    1f78:	47b0      	blx	r6
		if (rc < 0) {
    1f7a:	2800      	cmp	r0, #0
    1f7c:	db16      	blt.n	1fac <usb_d_ep_halt+0x54>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    1f7e:	480e      	ldr	r0, [pc, #56]	; (1fb8 <usb_d_ep_halt+0x60>)
    1f80:	eb00 1047 	add.w	r0, r0, r7, lsl #5
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    1f84:	2103      	movs	r1, #3
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    1f86:	2301      	movs	r3, #1
    1f88:	7083      	strb	r3, [r0, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    1f8a:	70c1      	strb	r1, [r0, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    1f8c:	69c3      	ldr	r3, [r0, #28]
    1f8e:	4622      	mov	r2, r4
    1f90:	4628      	mov	r0, r5
    1f92:	4798      	blx	r3
	return ERR_NONE;
    1f94:	4620      	mov	r0, r4
    1f96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    1f9a:	2901      	cmp	r1, #1
    1f9c:	4b05      	ldr	r3, [pc, #20]	; (1fb4 <usb_d_ep_halt+0x5c>)
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    1f9e:	bf18      	it	ne
    1fa0:	2102      	movne	r1, #2
	}
}
    1fa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    1fa6:	4718      	bx	r3
		return -USB_ERR_PARAM;
    1fa8:	f06f 0011 	mvn.w	r0, #17
}
    1fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1fb0:	00001b19 	.word	0x00001b19
    1fb4:	00003f35 	.word	0x00003f35
    1fb8:	20000334 	.word	0x20000334

00001fbc <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    1fbc:	b538      	push	{r3, r4, r5, lr}
	int8_t           ep_index = _usb_d_find_ep(ep);
    1fbe:	4b0f      	ldr	r3, [pc, #60]	; (1ffc <usb_d_ep_register_callback+0x40>)
{
    1fc0:	4614      	mov	r4, r2
    1fc2:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    1fc4:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    1fc6:	4a0e      	ldr	r2, [pc, #56]	; (2000 <usb_d_ep_register_callback+0x44>)
    1fc8:	2c00      	cmp	r4, #0
    1fca:	bf08      	it	eq
    1fcc:	4614      	moveq	r4, r2
	if (ep_index < 0) {
    1fce:	2800      	cmp	r0, #0
    1fd0:	db13      	blt.n	1ffa <usb_d_ep_register_callback+0x3e>
		return;
	}
	switch (type) {
    1fd2:	2d01      	cmp	r5, #1
    1fd4:	d008      	beq.n	1fe8 <usb_d_ep_register_callback+0x2c>
    1fd6:	d302      	bcc.n	1fde <usb_d_ep_register_callback+0x22>
    1fd8:	2d02      	cmp	r5, #2
    1fda:	d00a      	beq.n	1ff2 <usb_d_ep_register_callback+0x36>
    1fdc:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    1fde:	4b09      	ldr	r3, [pc, #36]	; (2004 <usb_d_ep_register_callback+0x48>)
    1fe0:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    1fe4:	6144      	str	r4, [r0, #20]
		break;
    1fe6:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    1fe8:	4b06      	ldr	r3, [pc, #24]	; (2004 <usb_d_ep_register_callback+0x48>)
    1fea:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    1fee:	6184      	str	r4, [r0, #24]
		break;
    1ff0:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    1ff2:	4b04      	ldr	r3, [pc, #16]	; (2004 <usb_d_ep_register_callback+0x48>)
    1ff4:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    1ff8:	61c4      	str	r4, [r0, #28]
    1ffa:	bd38      	pop	{r3, r4, r5, pc}
    1ffc:	00001b19 	.word	0x00001b19
    2000:	00001b49 	.word	0x00001b49
    2004:	20000334 	.word	0x20000334

00002008 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    2008:	b900      	cbnz	r0, 200c <assert+0x4>
		__asm("BKPT #0");
    200a:	be00      	bkpt	0x0000
    200c:	4770      	bx	lr

0000200e <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    200e:	6800      	ldr	r0, [r0, #0]
    2010:	b900      	cbnz	r0, 2014 <is_list_element+0x6>
    2012:	4770      	bx	lr
		if (it == element) {
    2014:	4288      	cmp	r0, r1
    2016:	d1fa      	bne.n	200e <is_list_element>
			return true;
    2018:	2001      	movs	r0, #1
		}
	}

	return false;
}
    201a:	4770      	bx	lr

0000201c <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    201c:	b538      	push	{r3, r4, r5, lr}
	ASSERT(!is_list_element(list, element));
    201e:	4b07      	ldr	r3, [pc, #28]	; (203c <list_insert_as_head+0x20>)
{
    2020:	460d      	mov	r5, r1
    2022:	4604      	mov	r4, r0
	ASSERT(!is_list_element(list, element));
    2024:	4798      	blx	r3
    2026:	f080 0001 	eor.w	r0, r0, #1
    202a:	4b05      	ldr	r3, [pc, #20]	; (2040 <list_insert_as_head+0x24>)
    202c:	4905      	ldr	r1, [pc, #20]	; (2044 <list_insert_as_head+0x28>)
    202e:	2239      	movs	r2, #57	; 0x39
    2030:	b2c0      	uxtb	r0, r0
    2032:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    2034:	6823      	ldr	r3, [r4, #0]
    2036:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    2038:	6025      	str	r5, [r4, #0]
    203a:	bd38      	pop	{r3, r4, r5, pc}
    203c:	0000200f 	.word	0x0000200f
    2040:	00002009 	.word	0x00002009
    2044:	0000c55f 	.word	0x0000c55f

00002048 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    2048:	6803      	ldr	r3, [r0, #0]
    204a:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    204c:	6001      	str	r1, [r0, #0]
    204e:	4770      	bx	lr

00002050 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    2050:	b570      	push	{r4, r5, r6, lr}
	struct list_element *it = list->head;

	ASSERT(!is_list_element(list, element));
    2052:	4b0b      	ldr	r3, [pc, #44]	; (2080 <list_insert_at_end+0x30>)
	struct list_element *it = list->head;
    2054:	6805      	ldr	r5, [r0, #0]
{
    2056:	4606      	mov	r6, r0
    2058:	460c      	mov	r4, r1
	ASSERT(!is_list_element(list, element));
    205a:	4798      	blx	r3
    205c:	f080 0001 	eor.w	r0, r0, #1
    2060:	4b08      	ldr	r3, [pc, #32]	; (2084 <list_insert_at_end+0x34>)
    2062:	4909      	ldr	r1, [pc, #36]	; (2088 <list_insert_at_end+0x38>)
    2064:	224f      	movs	r2, #79	; 0x4f
    2066:	b2c0      	uxtb	r0, r0
    2068:	4798      	blx	r3

	if (!list->head) {
    206a:	6833      	ldr	r3, [r6, #0]
    206c:	b91b      	cbnz	r3, 2076 <list_insert_at_end+0x26>
		list->head                             = (struct list_element *)element;
    206e:	6034      	str	r4, [r6, #0]

	while (it->next) {
		it = it->next;
	}
	it->next                               = (struct list_element *)element;
	((struct list_element *)element)->next = NULL;
    2070:	6023      	str	r3, [r4, #0]
    2072:	bd70      	pop	{r4, r5, r6, pc}
    2074:	461d      	mov	r5, r3
	while (it->next) {
    2076:	682b      	ldr	r3, [r5, #0]
    2078:	2b00      	cmp	r3, #0
    207a:	d1fb      	bne.n	2074 <list_insert_at_end+0x24>
	it->next                               = (struct list_element *)element;
    207c:	602c      	str	r4, [r5, #0]
    207e:	e7f7      	b.n	2070 <list_insert_at_end+0x20>
    2080:	0000200f 	.word	0x0000200f
    2084:	00002009 	.word	0x00002009
    2088:	0000c55f 	.word	0x0000c55f

0000208c <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    208c:	6803      	ldr	r3, [r0, #0]
    208e:	b10b      	cbz	r3, 2094 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    2090:	681a      	ldr	r2, [r3, #0]
    2092:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    2094:	4618      	mov	r0, r3
    2096:	4770      	bx	lr

00002098 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    2098:	b570      	push	{r4, r5, r6, lr}
    209a:	460e      	mov	r6, r1
    209c:	4614      	mov	r4, r2
	ASSERT(rb && buf && size);
    209e:	4605      	mov	r5, r0
    20a0:	b198      	cbz	r0, 20ca <ringbuffer_init+0x32>
    20a2:	b199      	cbz	r1, 20cc <ringbuffer_init+0x34>
    20a4:	1c10      	adds	r0, r2, #0
    20a6:	bf18      	it	ne
    20a8:	2001      	movne	r0, #1
    20aa:	2228      	movs	r2, #40	; 0x28
    20ac:	4908      	ldr	r1, [pc, #32]	; (20d0 <ringbuffer_init+0x38>)
    20ae:	4b09      	ldr	r3, [pc, #36]	; (20d4 <ringbuffer_init+0x3c>)
    20b0:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    20b2:	1e63      	subs	r3, r4, #1
    20b4:	ea14 0003 	ands.w	r0, r4, r3
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    20b8:	bf01      	itttt	eq
    20ba:	606b      	streq	r3, [r5, #4]
	rb->read_index  = 0;
    20bc:	60a8      	streq	r0, [r5, #8]
	rb->write_index = rb->read_index;
    20be:	60e8      	streq	r0, [r5, #12]
	rb->buf         = (uint8_t *)buf;
    20c0:	602e      	streq	r6, [r5, #0]
		return ERR_INVALID_ARG;
    20c2:	bf18      	it	ne
    20c4:	f06f 000c 	mvnne.w	r0, #12

	return ERR_NONE;
}
    20c8:	bd70      	pop	{r4, r5, r6, pc}
    20ca:	e7ee      	b.n	20aa <ringbuffer_init+0x12>
	ASSERT(rb && buf && size);
    20cc:	4608      	mov	r0, r1
    20ce:	e7ec      	b.n	20aa <ringbuffer_init+0x12>
    20d0:	0000c57d 	.word	0x0000c57d
    20d4:	00002009 	.word	0x00002009

000020d8 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    20d8:	b538      	push	{r3, r4, r5, lr}
    20da:	460d      	mov	r5, r1
	ASSERT(rb && data);
    20dc:	4604      	mov	r4, r0
    20de:	b1a0      	cbz	r0, 210a <ringbuffer_get+0x32>
    20e0:	1c08      	adds	r0, r1, #0
    20e2:	bf18      	it	ne
    20e4:	2001      	movne	r0, #1
    20e6:	2240      	movs	r2, #64	; 0x40
    20e8:	4b0a      	ldr	r3, [pc, #40]	; (2114 <ringbuffer_get+0x3c>)
    20ea:	490b      	ldr	r1, [pc, #44]	; (2118 <ringbuffer_get+0x40>)
    20ec:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    20ee:	68a3      	ldr	r3, [r4, #8]
    20f0:	68e2      	ldr	r2, [r4, #12]
    20f2:	429a      	cmp	r2, r3
    20f4:	d00a      	beq.n	210c <ringbuffer_get+0x34>
		*data = rb->buf[rb->read_index & rb->size];
    20f6:	6862      	ldr	r2, [r4, #4]
    20f8:	4013      	ands	r3, r2
    20fa:	6822      	ldr	r2, [r4, #0]
    20fc:	5cd3      	ldrb	r3, [r2, r3]
    20fe:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    2100:	68a3      	ldr	r3, [r4, #8]
    2102:	3301      	adds	r3, #1
    2104:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    2106:	2000      	movs	r0, #0
    2108:	bd38      	pop	{r3, r4, r5, pc}
    210a:	e7ec      	b.n	20e6 <ringbuffer_get+0xe>
	}

	return ERR_NOT_FOUND;
    210c:	f06f 0009 	mvn.w	r0, #9
}
    2110:	bd38      	pop	{r3, r4, r5, pc}
    2112:	bf00      	nop
    2114:	00002009 	.word	0x00002009
    2118:	0000c57d 	.word	0x0000c57d

0000211c <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    211c:	b538      	push	{r3, r4, r5, lr}
	ASSERT(rb);
    211e:	4604      	mov	r4, r0
    2120:	3000      	adds	r0, #0
    2122:	bf18      	it	ne
    2124:	2001      	movne	r0, #1
{
    2126:	460d      	mov	r5, r1
	ASSERT(rb);
    2128:	2251      	movs	r2, #81	; 0x51
    212a:	490b      	ldr	r1, [pc, #44]	; (2158 <ringbuffer_put+0x3c>)
    212c:	4b0b      	ldr	r3, [pc, #44]	; (215c <ringbuffer_put+0x40>)
    212e:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    2130:	68e3      	ldr	r3, [r4, #12]
    2132:	6862      	ldr	r2, [r4, #4]
    2134:	4013      	ands	r3, r2
    2136:	6822      	ldr	r2, [r4, #0]
    2138:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    213a:	68e3      	ldr	r3, [r4, #12]
    213c:	68a1      	ldr	r1, [r4, #8]
    213e:	6862      	ldr	r2, [r4, #4]
    2140:	1a59      	subs	r1, r3, r1
    2142:	4291      	cmp	r1, r2
		rb->read_index = rb->write_index - rb->size;
    2144:	bf88      	it	hi
    2146:	1a9a      	subhi	r2, r3, r2
	}

	rb->write_index++;
    2148:	f103 0301 	add.w	r3, r3, #1
		rb->read_index = rb->write_index - rb->size;
    214c:	bf88      	it	hi
    214e:	60a2      	strhi	r2, [r4, #8]
	rb->write_index++;
    2150:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    2152:	2000      	movs	r0, #0
    2154:	bd38      	pop	{r3, r4, r5, pc}
    2156:	bf00      	nop
    2158:	0000c57d 	.word	0x0000c57d
    215c:	00002009 	.word	0x00002009

00002160 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    2160:	b510      	push	{r4, lr}
	ASSERT(rb);
    2162:	4604      	mov	r4, r0
    2164:	3000      	adds	r0, #0
    2166:	bf18      	it	ne
    2168:	2001      	movne	r0, #1
    216a:	2267      	movs	r2, #103	; 0x67
    216c:	4903      	ldr	r1, [pc, #12]	; (217c <ringbuffer_num+0x1c>)
    216e:	4b04      	ldr	r3, [pc, #16]	; (2180 <ringbuffer_num+0x20>)
    2170:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    2172:	68e0      	ldr	r0, [r4, #12]
    2174:	68a3      	ldr	r3, [r4, #8]
}
    2176:	1ac0      	subs	r0, r0, r3
    2178:	bd10      	pop	{r4, pc}
    217a:	bf00      	nop
    217c:	0000c57d 	.word	0x0000c57d
    2180:	00002009 	.word	0x00002009

00002184 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    2184:	4b04      	ldr	r3, [pc, #16]	; (2198 <_sbrk+0x14>)
    2186:	6819      	ldr	r1, [r3, #0]
{
    2188:	4602      	mov	r2, r0
	if (heap == NULL) {
    218a:	b909      	cbnz	r1, 2190 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
    218c:	4903      	ldr	r1, [pc, #12]	; (219c <_sbrk+0x18>)
    218e:	6019      	str	r1, [r3, #0]
	}
	prev_heap = heap;
    2190:	6818      	ldr	r0, [r3, #0]

	heap += incr;
    2192:	4402      	add	r2, r0
    2194:	601a      	str	r2, [r3, #0]

	return (caddr_t)prev_heap;
}
    2196:	4770      	bx	lr
    2198:	200003b4 	.word	0x200003b4
    219c:	20015630 	.word	0x20015630

000021a0 <hri_adc_wait_for_sync>:
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    21a0:	6b03      	ldr	r3, [r0, #48]	; 0x30
    21a2:	420b      	tst	r3, r1
    21a4:	d1fc      	bne.n	21a0 <hri_adc_wait_for_sync>
}
    21a6:	4770      	bx	lr

000021a8 <hri_adc_set_CTRLA_ENABLE_bit>:
{
    21a8:	b508      	push	{r3, lr}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
    21aa:	2103      	movs	r1, #3
    21ac:	4b03      	ldr	r3, [pc, #12]	; (21bc <hri_adc_set_CTRLA_ENABLE_bit+0x14>)
    21ae:	4798      	blx	r3
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
    21b0:	8803      	ldrh	r3, [r0, #0]
    21b2:	b29b      	uxth	r3, r3
    21b4:	f043 0302 	orr.w	r3, r3, #2
    21b8:	8003      	strh	r3, [r0, #0]
    21ba:	bd08      	pop	{r3, pc}
    21bc:	000021a1 	.word	0x000021a1

000021c0 <hri_adc_clear_CTRLA_ENABLE_bit>:
{
    21c0:	b508      	push	{r3, lr}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
    21c2:	2103      	movs	r1, #3
    21c4:	4b04      	ldr	r3, [pc, #16]	; (21d8 <hri_adc_clear_CTRLA_ENABLE_bit+0x18>)
    21c6:	4798      	blx	r3
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    21c8:	8803      	ldrh	r3, [r0, #0]
    21ca:	f023 0302 	bic.w	r3, r3, #2
    21ce:	041b      	lsls	r3, r3, #16
    21d0:	0c1b      	lsrs	r3, r3, #16
    21d2:	8003      	strh	r3, [r0, #0]
    21d4:	bd08      	pop	{r3, pc}
    21d6:	bf00      	nop
    21d8:	000021a1 	.word	0x000021a1

000021dc <_adc_init>:
 *
 * \param[in] hw The pointer to hardware instance
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{
    21dc:	b538      	push	{r3, r4, r5, lr}
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
    21de:	6b03      	ldr	r3, [r0, #48]	; 0x30
    21e0:	4d17      	ldr	r5, [pc, #92]	; (2240 <_adc_init+0x64>)

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
    21e2:	f013 0f01 	tst.w	r3, #1
{
    21e6:	4602      	mov	r2, r0
    21e8:	460c      	mov	r4, r1
	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
    21ea:	d108      	bne.n	21fe <_adc_init+0x22>
	tmp = ((Adc *)hw)->CTRLA.reg;
    21ec:	8803      	ldrh	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    21ee:	079b      	lsls	r3, r3, #30
    21f0:	d503      	bpl.n	21fa <_adc_init+0x1e>
			hri_adc_clear_CTRLA_ENABLE_bit(hw);
    21f2:	4b14      	ldr	r3, [pc, #80]	; (2244 <_adc_init+0x68>)
    21f4:	4798      	blx	r3
			hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_ENABLE);
    21f6:	2102      	movs	r1, #2
    21f8:	47a8      	blx	r5
	((Adc *)hw)->CTRLA.reg = data;
    21fa:	2301      	movs	r3, #1
    21fc:	8013      	strh	r3, [r2, #0]
		}
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);
    21fe:	4610      	mov	r0, r2
    2200:	2101      	movs	r1, #1
    2202:	47a8      	blx	r5

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    2204:	4910      	ldr	r1, [pc, #64]	; (2248 <_adc_init+0x6c>)
    2206:	2316      	movs	r3, #22
    2208:	fb03 1104 	mla	r1, r3, r4, r1
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);

	return ERR_NONE;
}
    220c:	2000      	movs	r0, #0
	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    220e:	888b      	ldrh	r3, [r1, #4]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    2210:	80d3      	strh	r3, [r2, #6]
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    2212:	798b      	ldrb	r3, [r1, #6]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    2214:	7213      	strb	r3, [r2, #8]
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    2216:	79cb      	ldrb	r3, [r1, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    2218:	7093      	strb	r3, [r2, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    221a:	890b      	ldrh	r3, [r1, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    221c:	8093      	strh	r3, [r2, #4]
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    221e:	7a8b      	ldrb	r3, [r1, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    2220:	7293      	strb	r3, [r2, #10]
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    2222:	7acb      	ldrb	r3, [r1, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    2224:	72d3      	strb	r3, [r2, #11]
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    2226:	898b      	ldrh	r3, [r1, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    2228:	8193      	strh	r3, [r2, #12]
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    222a:	89cb      	ldrh	r3, [r1, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    222c:	81d3      	strh	r3, [r2, #14]
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    222e:	8a0b      	ldrh	r3, [r1, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    2230:	8213      	strh	r3, [r2, #16]
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    2232:	8a4b      	ldrh	r3, [r1, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    2234:	8253      	strh	r3, [r2, #18]
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    2236:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    2238:	70d3      	strb	r3, [r2, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    223a:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    223c:	8013      	strh	r3, [r2, #0]
}
    223e:	bd38      	pop	{r3, r4, r5, pc}
    2240:	000021a1 	.word	0x000021a1
    2244:	000021c1 	.word	0x000021c1
    2248:	0000c5a2 	.word	0x0000c5a2

0000224c <_adc_get_regs>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    224c:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    2250:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
		if (_adcs[i].number == n) {
    2254:	f3c0 2087 	ubfx	r0, r0, #10, #8
{
    2258:	b508      	push	{r3, lr}
		if (_adcs[i].number == n) {
    225a:	b120      	cbz	r0, 2266 <_adc_get_regs+0x1a>
	ASSERT(false);
    225c:	2288      	movs	r2, #136	; 0x88
    225e:	4903      	ldr	r1, [pc, #12]	; (226c <_adc_get_regs+0x20>)
    2260:	4b03      	ldr	r3, [pc, #12]	; (2270 <_adc_get_regs+0x24>)
    2262:	2000      	movs	r0, #0
    2264:	4798      	blx	r3
}
    2266:	2000      	movs	r0, #0
    2268:	bd08      	pop	{r3, pc}
    226a:	bf00      	nop
    226c:	0000c5b8 	.word	0x0000c5b8
    2270:	00002009 	.word	0x00002009

00002274 <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
    2274:	b570      	push	{r4, r5, r6, lr}
	ASSERT(device);
    2276:	4605      	mov	r5, r0
    2278:	3000      	adds	r0, #0
{
    227a:	460c      	mov	r4, r1
	ASSERT(device);
    227c:	bf18      	it	ne
    227e:	2001      	movne	r0, #1
    2280:	4906      	ldr	r1, [pc, #24]	; (229c <_adc_sync_init+0x28>)
    2282:	4b07      	ldr	r3, [pc, #28]	; (22a0 <_adc_sync_init+0x2c>)
    2284:	22ce      	movs	r2, #206	; 0xce
    2286:	4798      	blx	r3

	device->hw = hw;
    2288:	602c      	str	r4, [r5, #0]

	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
    228a:	4620      	mov	r0, r4
    228c:	4b05      	ldr	r3, [pc, #20]	; (22a4 <_adc_sync_init+0x30>)
    228e:	4798      	blx	r3
    2290:	4b05      	ldr	r3, [pc, #20]	; (22a8 <_adc_sync_init+0x34>)
    2292:	4601      	mov	r1, r0
    2294:	4620      	mov	r0, r4
}
    2296:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
    229a:	4718      	bx	r3
    229c:	0000c5b8 	.word	0x0000c5b8
    22a0:	00002009 	.word	0x00002009
    22a4:	0000224d 	.word	0x0000224d
    22a8:	000021dd 	.word	0x000021dd

000022ac <_adc_sync_enable_channel>:
 */
void _adc_sync_enable_channel(struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
    22ac:	6800      	ldr	r0, [r0, #0]
    22ae:	4b01      	ldr	r3, [pc, #4]	; (22b4 <_adc_sync_enable_channel+0x8>)
    22b0:	4718      	bx	r3
    22b2:	bf00      	nop
    22b4:	000021a9 	.word	0x000021a9

000022b8 <_adc_sync_get_data_size>:
/**
 * \brief Retrieve ADC conversion data size
 */
uint8_t _adc_sync_get_data_size(const struct _adc_sync_device *const device)
{
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    22b8:	6803      	ldr	r3, [r0, #0]
	tmp = ((Adc *)hw)->CTRLB.reg;
    22ba:	88db      	ldrh	r3, [r3, #6]
    22bc:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    22c0:	2b03      	cmp	r3, #3
}
    22c2:	bf0c      	ite	eq
    22c4:	2001      	moveq	r0, #1
    22c6:	2002      	movne	r0, #2
    22c8:	4770      	bx	lr

000022ca <_adc_sync_is_channel_conversion_done>:
 */
bool _adc_sync_is_channel_conversion_done(const struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	return hri_adc_get_interrupt_RESRDY_bit(device->hw);
    22ca:	6803      	ldr	r3, [r0, #0]
	return (((Adc *)hw)->INTFLAG.reg & ADC_INTFLAG_RESRDY) >> ADC_INTFLAG_RESRDY_Pos;
    22cc:	f893 002e 	ldrb.w	r0, [r3, #46]	; 0x2e
}
    22d0:	f000 0001 	and.w	r0, r0, #1
    22d4:	4770      	bx	lr
	...

000022d8 <_adc_sync_convert>:
/**
 * \brief Make conversion
 */
void _adc_sync_convert(struct _adc_sync_device *const device)
{
	hri_adc_set_SWTRIG_START_bit(device->hw);
    22d8:	6802      	ldr	r2, [r0, #0]
{
    22da:	b508      	push	{r3, lr}
}

static inline void hri_adc_set_SWTRIG_START_bit(const void *const hw)
{
	ADC_CRITICAL_SECTION_ENTER();
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_MASK);
    22dc:	f640 71ff 	movw	r1, #4095	; 0xfff
    22e0:	4b03      	ldr	r3, [pc, #12]	; (22f0 <_adc_sync_convert+0x18>)
    22e2:	4610      	mov	r0, r2
    22e4:	4798      	blx	r3
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START;
    22e6:	7d13      	ldrb	r3, [r2, #20]
    22e8:	f043 0302 	orr.w	r3, r3, #2
    22ec:	7513      	strb	r3, [r2, #20]
    22ee:	bd08      	pop	{r3, pc}
    22f0:	000021a1 	.word	0x000021a1

000022f4 <_adc_sync_read_channel_data>:
 */
uint16_t _adc_sync_read_channel_data(const struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	return hri_adc_read_RESULT_reg(device->hw);
    22f4:	6803      	ldr	r3, [r0, #0]
	return tmp;
}

static inline hri_adc_result_reg_t hri_adc_read_RESULT_reg(const void *const hw)
{
	return ((Adc *)hw)->RESULT.reg;
    22f6:	f8b3 0040 	ldrh.w	r0, [r3, #64]	; 0x40
}
    22fa:	b280      	uxth	r0, r0
    22fc:	4770      	bx	lr

000022fe <_aes_sync_init>:
}

static inline void hri_aes_write_CTRLA_reg(const void *const hw, hri_aes_ctrla_reg_t data)
{
	AES_CRITICAL_SECTION_ENTER();
	((Aes *)hw)->CTRLA.reg = data;
    22fe:	2300      	movs	r3, #0
    2300:	2201      	movs	r2, #1
    2302:	600b      	str	r3, [r1, #0]
    2304:	600a      	str	r2, [r1, #0]
int32_t _aes_sync_init(struct _aes_sync_device *const dev, void *const hw)
{
	hri_aes_write_CTRLA_reg(hw, 0);
	hri_aes_write_CTRLA_reg(hw, AES_CTRLA_SWRST);

	dev->hw = hw;
    2306:	6001      	str	r1, [r0, #0]
}

static inline void hri_aes_write_DBGCTRL_reg(const void *const hw, hri_aes_dbgctrl_reg_t data)
{
	AES_CRITICAL_SECTION_ENTER();
	((Aes *)hw)->DBGCTRL.reg = data;
    2308:	724a      	strb	r2, [r1, #9]

	hri_aes_write_DBGCTRL_reg(dev->hw, _aes.dbgctrl);

	return ERR_NONE;
}
    230a:	4618      	mov	r0, r3
    230c:	4770      	bx	lr

0000230e <_aes_sync_enable>:
    230e:	2000      	movs	r0, #0
    2310:	4770      	bx	lr
	...

00002314 <_aes_sync_set_key>:

/**
 * \brief              Set AES Key (encryption/decryption)
 */
int32_t _aes_sync_set_key(struct _aes_sync_device *const dev, const uint8_t *key, const enum aes_keysize size)
{
    2314:	b508      	push	{r3, lr}

	dev->keysize = size;
    2316:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
	memcpy(dev->key, key, (size + 2) << 3);
    231a:	3202      	adds	r2, #2
    231c:	00d2      	lsls	r2, r2, #3
    231e:	4b02      	ldr	r3, [pc, #8]	; (2328 <_aes_sync_set_key+0x14>)
    2320:	3004      	adds	r0, #4
    2322:	4798      	blx	r3
	return ERR_NONE;
}
    2324:	2000      	movs	r0, #0
    2326:	bd08      	pop	{r3, pc}
    2328:	0000b33b 	.word	0x0000b33b

0000232c <_reset_mcu>:
  __ASM volatile ("dsb 0xF":::"memory");
    232c:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2330:	4905      	ldr	r1, [pc, #20]	; (2348 <_reset_mcu+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2332:	4b06      	ldr	r3, [pc, #24]	; (234c <_reset_mcu+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2334:	68ca      	ldr	r2, [r1, #12]
    2336:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    233a:	4313      	orrs	r3, r2
    233c:	60cb      	str	r3, [r1, #12]
    233e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    2342:	bf00      	nop
    2344:	e7fd      	b.n	2342 <_reset_mcu+0x16>
    2346:	bf00      	nop
    2348:	e000ed00 	.word	0xe000ed00
    234c:	05fa0004 	.word	0x05fa0004

00002350 <_irq_set>:
    NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2350:	0943      	lsrs	r3, r0, #5
    2352:	2201      	movs	r2, #1
    2354:	f000 001f 	and.w	r0, r0, #31
    2358:	fa02 f000 	lsl.w	r0, r2, r0
    235c:	3340      	adds	r3, #64	; 0x40
    235e:	4a02      	ldr	r2, [pc, #8]	; (2368 <_irq_set+0x18>)
    2360:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    2364:	4770      	bx	lr
    2366:	bf00      	nop
    2368:	e000e100 	.word	0xe000e100

0000236c <_get_cycles_for_us>:
{
	switch (power) {
	case 9:
		return (us * (freq / 1000000) - 1) + 1;
	case 8:
		return (us * (freq / 100000) - 1) / 10 + 1;
    236c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
    2370:	4358      	muls	r0, r3
    2372:	3801      	subs	r0, #1
    2374:	230a      	movs	r3, #10
    2376:	fbb0 f0f3 	udiv	r0, r0, r3
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    237a:	3001      	adds	r0, #1
    237c:	4770      	bx	lr

0000237e <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    237e:	f64b 3380 	movw	r3, #48000	; 0xbb80
    2382:	4358      	muls	r0, r3
    2384:	4770      	bx	lr
	...

00002388 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    2388:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    238a:	4a0d      	ldr	r2, [pc, #52]	; (23c0 <_init_chip+0x38>)

	_osc32kctrl_init_sources();
	_oscctrl_init_sources();
	_mclk_init();
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    238c:	4c0d      	ldr	r4, [pc, #52]	; (23c4 <_init_chip+0x3c>)
    238e:	8813      	ldrh	r3, [r2, #0]
    2390:	b29b      	uxth	r3, r3
    2392:	8013      	strh	r3, [r2, #0]
	_osc32kctrl_init_sources();
    2394:	4b0c      	ldr	r3, [pc, #48]	; (23c8 <_init_chip+0x40>)
    2396:	4798      	blx	r3
	_oscctrl_init_sources();
    2398:	4b0c      	ldr	r3, [pc, #48]	; (23cc <_init_chip+0x44>)
    239a:	4798      	blx	r3
	_mclk_init();
    239c:	4b0c      	ldr	r3, [pc, #48]	; (23d0 <_init_chip+0x48>)
    239e:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    23a0:	2005      	movs	r0, #5
    23a2:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    23a4:	4b0b      	ldr	r3, [pc, #44]	; (23d4 <_init_chip+0x4c>)
    23a6:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    23a8:	f640 70fa 	movw	r0, #4090	; 0xffa
    23ac:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    23ae:	4a0a      	ldr	r2, [pc, #40]	; (23d8 <_init_chip+0x50>)
    23b0:	6913      	ldr	r3, [r2, #16]
    23b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    23b6:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif
}
    23b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_dma_init();
    23bc:	4b07      	ldr	r3, [pc, #28]	; (23dc <_init_chip+0x54>)
    23be:	4718      	bx	r3
    23c0:	41004000 	.word	0x41004000
    23c4:	000025e1 	.word	0x000025e1
    23c8:	00002ced 	.word	0x00002ced
    23cc:	00002d01 	.word	0x00002d01
    23d0:	000029d1 	.word	0x000029d1
    23d4:	00002d05 	.word	0x00002d05
    23d8:	40000800 	.word	0x40000800
    23dc:	0000242d 	.word	0x0000242d

000023e0 <_dmac_handler>:

/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    23e0:	b410      	push	{r4}
}

static inline hri_dmac_intpend_reg_t hri_dmac_get_INTPEND_reg(const void *const hw, hri_dmac_intpend_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Dmac *)hw)->INTPEND.reg;
    23e2:	4b10      	ldr	r3, [pc, #64]	; (2424 <_dmac_handler+0x44>)
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
	struct _dma_resource *tmp_resource = &_resources[channel];
    23e4:	4c10      	ldr	r4, [pc, #64]	; (2428 <_dmac_handler+0x48>)
    23e6:	8c19      	ldrh	r1, [r3, #32]
	tmp &= mask;
    23e8:	f001 011f 	and.w	r1, r1, #31
	((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = mask;
}

static inline bool hri_dmac_get_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
    23ec:	eb03 1301 	add.w	r3, r3, r1, lsl #4
    23f0:	220c      	movs	r2, #12
    23f2:	434a      	muls	r2, r1
    23f4:	f893 104e 	ldrb.w	r1, [r3, #78]	; 0x4e

	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC, channel)) {
    23f8:	07c9      	lsls	r1, r1, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    23fa:	eb04 0002 	add.w	r0, r4, r2
	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC, channel)) {
    23fe:	d505      	bpl.n	240c <_dmac_handler+0x2c>
}

static inline void hri_dmac_clear_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    2400:	2201      	movs	r2, #1
    2402:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
    2406:	6843      	ldr	r3, [r0, #4]
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
	}
}
    2408:	bc10      	pop	{r4}
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    240a:	4718      	bx	r3
}

static inline bool hri_dmac_get_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
    240c:	f893 104e 	ldrb.w	r1, [r3, #78]	; 0x4e
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
    2410:	0789      	lsls	r1, r1, #30
    2412:	d504      	bpl.n	241e <_dmac_handler+0x3e>
}

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    2414:	2102      	movs	r1, #2
    2416:	f883 104e 	strb.w	r1, [r3, #78]	; 0x4e
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    241a:	58a3      	ldr	r3, [r4, r2]
    241c:	e7f4      	b.n	2408 <_dmac_handler+0x28>
}
    241e:	bc10      	pop	{r4}
    2420:	4770      	bx	lr
    2422:	bf00      	nop
    2424:	4100a000 	.word	0x4100a000
    2428:	200003c0 	.word	0x200003c0

0000242c <_dma_init>:
{
    242c:	b530      	push	{r4, r5, lr}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    242e:	4b2e      	ldr	r3, [pc, #184]	; (24e8 <_dma_init+0xbc>)
    2430:	881a      	ldrh	r2, [r3, #0]
    2432:	f022 0202 	bic.w	r2, r2, #2
    2436:	0412      	lsls	r2, r2, #16
    2438:	0c12      	lsrs	r2, r2, #16
    243a:	801a      	strh	r2, [r3, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    243c:	885a      	ldrh	r2, [r3, #2]
    243e:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
    2442:	0412      	lsls	r2, r2, #16
    2444:	0c12      	lsrs	r2, r2, #16
    2446:	805a      	strh	r2, [r3, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    2448:	881a      	ldrh	r2, [r3, #0]
    244a:	b292      	uxth	r2, r2
    244c:	f042 0201 	orr.w	r2, r2, #1
    2450:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    2452:	881a      	ldrh	r2, [r3, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    2454:	f012 0201 	ands.w	r2, r2, #1
    2458:	d1fb      	bne.n	2452 <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    245a:	f44f 6170 	mov.w	r1, #3840	; 0xf00
    245e:	8019      	strh	r1, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    2460:	7b59      	ldrb	r1, [r3, #13]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    2462:	4822      	ldr	r0, [pc, #136]	; (24ec <_dma_init+0xc0>)
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    2464:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    2468:	7359      	strb	r1, [r3, #13]
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    246a:	f500 7100 	add.w	r1, r0, #512	; 0x200
	((Dmac *)hw)->PRICTRL0.reg = data;
    246e:	615a      	str	r2, [r3, #20]
	((Dmac *)hw)->BASEADDR.reg = data;
    2470:	6358      	str	r0, [r3, #52]	; 0x34
	((Dmac *)hw)->WRBADDR.reg = data;
    2472:	6399      	str	r1, [r3, #56]	; 0x38
    2474:	491e      	ldr	r1, [pc, #120]	; (24f0 <_dma_init+0xc4>)
    2476:	4613      	mov	r3, r2
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    2478:	f5a0 70c0 	sub.w	r0, r0, #384	; 0x180
    247c:	011c      	lsls	r4, r3, #4
    247e:	f104 4282 	add.w	r2, r4, #1090519040	; 0x41000000
    2482:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    2486:	680d      	ldr	r5, [r1, #0]

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    2488:	6415      	str	r5, [r2, #64]	; 0x40
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    248a:	790d      	ldrb	r5, [r1, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    248c:	f882 5045 	strb.w	r5, [r2, #69]	; 0x45
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    2490:	794d      	ldrb	r5, [r1, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    2492:	f882 5046 	strb.w	r5, [r2, #70]	; 0x46
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    2496:	4404      	add	r4, r0
    2498:	3301      	adds	r3, #1
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    249a:	88ca      	ldrh	r2, [r1, #6]
    249c:	f8a4 2180 	strh.w	r2, [r4, #384]	; 0x180
	for (i = 0; i < DMAC_CH_NUM; i++) {
    24a0:	2b20      	cmp	r3, #32
    24a2:	f101 0108 	add.w	r1, r1, #8
    24a6:	d1e9      	bne.n	247c <_dma_init+0x50>
    24a8:	221f      	movs	r2, #31
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    24aa:	2001      	movs	r0, #1
    24ac:	0953      	lsrs	r3, r2, #5
    24ae:	009b      	lsls	r3, r3, #2
    24b0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    24b4:	f002 011f 	and.w	r1, r2, #31
    24b8:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    24bc:	fa00 f101 	lsl.w	r1, r0, r1
    24c0:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
    24c4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    24c8:	f3bf 8f6f 	isb	sy
    24cc:	3201      	adds	r2, #1
	for (i = 0; i < 5; i++) {
    24ce:	2a24      	cmp	r2, #36	; 0x24
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    24d0:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    24d4:	6019      	str	r1, [r3, #0]
    24d6:	d1e9      	bne.n	24ac <_dma_init+0x80>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    24d8:	4a03      	ldr	r2, [pc, #12]	; (24e8 <_dma_init+0xbc>)
    24da:	8813      	ldrh	r3, [r2, #0]
    24dc:	b29b      	uxth	r3, r3
    24de:	f043 0302 	orr.w	r3, r3, #2
    24e2:	8013      	strh	r3, [r2, #0]
}
    24e4:	2000      	movs	r0, #0
    24e6:	bd30      	pop	{r4, r5, pc}
    24e8:	4100a000 	.word	0x4100a000
    24ec:	20000540 	.word	0x20000540
    24f0:	0000c5d0 	.word	0x0000c5d0

000024f4 <_dma_set_destination_address>:
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    24f4:	4b03      	ldr	r3, [pc, #12]	; (2504 <_dma_set_destination_address+0x10>)
    24f6:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    24fa:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
}
    24fe:	2000      	movs	r0, #0
    2500:	4770      	bx	lr
    2502:	bf00      	nop
    2504:	200003c0 	.word	0x200003c0

00002508 <_dma_set_source_address>:
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    2508:	4b03      	ldr	r3, [pc, #12]	; (2518 <_dma_set_source_address+0x10>)
    250a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    250e:	f8c0 1184 	str.w	r1, [r0, #388]	; 0x184
}
    2512:	2000      	movs	r0, #0
    2514:	4770      	bx	lr
    2516:	bf00      	nop
    2518:	200003c0 	.word	0x200003c0

0000251c <_dma_set_data_amount>:
{
    251c:	b570      	push	{r4, r5, r6, lr}
	return ((DmacDescriptor *)hw)->DSTADDR.reg;
    251e:	4a12      	ldr	r2, [pc, #72]	; (2568 <_dma_set_data_amount+0x4c>)
    2520:	0100      	lsls	r0, r0, #4
    2522:	1814      	adds	r4, r2, r0
    2524:	f8d4 6188 	ldr.w	r6, [r4, #392]	; 0x188
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    2528:	f8b4 3180 	ldrh.w	r3, [r4, #384]	; 0x180
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    252c:	f8b4 5180 	ldrh.w	r5, [r4, #384]	; 0x180
	tmp = (tmp & DMAC_BTCTRL_BEATSIZE_Msk) >> DMAC_BTCTRL_BEATSIZE_Pos;
    2530:	f3c3 2301 	ubfx	r3, r3, #8, #2
	if (hri_dmacdescriptor_get_BTCTRL_DSTINC_bit(&_descriptor_section[channel])) {
    2534:	052d      	lsls	r5, r5, #20
		hri_dmacdescriptor_write_DSTADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    2536:	bf42      	ittt	mi
    2538:	fa01 f503 	lslmi.w	r5, r1, r3
    253c:	19ad      	addmi	r5, r5, r6
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    253e:	f8c4 5188 	strmi.w	r5, [r4, #392]	; 0x188
	return ((DmacDescriptor *)hw)->SRCADDR.reg;
    2542:	1814      	adds	r4, r2, r0
	((DmacDescriptor *)hw)->BTCNT.reg = data;
    2544:	4402      	add	r2, r0
	return ((DmacDescriptor *)hw)->SRCADDR.reg;
    2546:	f8d4 5184 	ldr.w	r5, [r4, #388]	; 0x184
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    254a:	f8b4 6180 	ldrh.w	r6, [r4, #384]	; 0x180
	if (hri_dmacdescriptor_get_BTCTRL_SRCINC_bit(&_descriptor_section[channel])) {
    254e:	0576      	lsls	r6, r6, #21
		hri_dmacdescriptor_write_SRCADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    2550:	bf44      	itt	mi
    2552:	fa01 f303 	lslmi.w	r3, r1, r3
    2556:	195b      	addmi	r3, r3, r5
	hri_dmacdescriptor_write_BTCNT_reg(&_descriptor_section[channel], amount);
    2558:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    255a:	bf48      	it	mi
    255c:	f8c4 3184 	strmi.w	r3, [r4, #388]	; 0x184
	((DmacDescriptor *)hw)->BTCNT.reg = data;
    2560:	f8a2 1182 	strh.w	r1, [r2, #386]	; 0x182
}
    2564:	2000      	movs	r0, #0
    2566:	bd70      	pop	{r4, r5, r6, pc}
    2568:	200003c0 	.word	0x200003c0

0000256c <_dma_enable_transaction>:
	((DmacDescriptor *)hw)->BTCTRL.reg |= DMAC_BTCTRL_VALID;
    256c:	4a0e      	ldr	r2, [pc, #56]	; (25a8 <_dma_enable_transaction+0x3c>)
    256e:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    2572:	f8b2 3180 	ldrh.w	r3, [r2, #384]	; 0x180
    2576:	b29b      	uxth	r3, r3
    2578:	f043 0301 	orr.w	r3, r3, #1
    257c:	f8a2 3180 	strh.w	r3, [r2, #384]	; 0x180
    2580:	0103      	lsls	r3, r0, #4
    2582:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2586:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    258a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    258c:	f042 0202 	orr.w	r2, r2, #2
    2590:	641a      	str	r2, [r3, #64]	; 0x40
	if (software_trigger) {
    2592:	b131      	cbz	r1, 25a2 <_dma_enable_transaction+0x36>
	((Dmac *)hw)->SWTRIGCTRL.reg |= mask;
    2594:	4a05      	ldr	r2, [pc, #20]	; (25ac <_dma_enable_transaction+0x40>)
		hri_dmac_set_SWTRIGCTRL_reg(DMAC, 1 << channel);
    2596:	2301      	movs	r3, #1
    2598:	6911      	ldr	r1, [r2, #16]
    259a:	fa03 f000 	lsl.w	r0, r3, r0
    259e:	4308      	orrs	r0, r1
    25a0:	6110      	str	r0, [r2, #16]
}
    25a2:	2000      	movs	r0, #0
    25a4:	4770      	bx	lr
    25a6:	bf00      	nop
    25a8:	200003c0 	.word	0x200003c0
    25ac:	4100a000 	.word	0x4100a000

000025b0 <DMAC_0_Handler>:
    25b0:	4b00      	ldr	r3, [pc, #0]	; (25b4 <DMAC_0_Handler+0x4>)
    25b2:	4718      	bx	r3
    25b4:	000023e1 	.word	0x000023e1

000025b8 <DMAC_1_Handler>:
    25b8:	4b00      	ldr	r3, [pc, #0]	; (25bc <DMAC_1_Handler+0x4>)
    25ba:	4718      	bx	r3
    25bc:	000023e1 	.word	0x000023e1

000025c0 <DMAC_2_Handler>:
    25c0:	4b00      	ldr	r3, [pc, #0]	; (25c4 <DMAC_2_Handler+0x4>)
    25c2:	4718      	bx	r3
    25c4:	000023e1 	.word	0x000023e1

000025c8 <DMAC_3_Handler>:
    25c8:	4b00      	ldr	r3, [pc, #0]	; (25cc <DMAC_3_Handler+0x4>)
    25ca:	4718      	bx	r3
    25cc:	000023e1 	.word	0x000023e1

000025d0 <DMAC_4_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_4_Handler(void)
{
	_dmac_handler();
    25d0:	4b00      	ldr	r3, [pc, #0]	; (25d4 <DMAC_4_Handler+0x4>)
    25d2:	4718      	bx	r3
    25d4:	000023e1 	.word	0x000023e1

000025d8 <_crc_sync_init>:
/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
	device->hw = hw;
    25d8:	6001      	str	r1, [r0, #0]

	return ERR_NONE;
}
    25da:	2000      	movs	r0, #0
    25dc:	4770      	bx	lr
	...

000025e0 <_gclk_init_generators_by_fref>:
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
#if CONF_GCLK_GEN_0_GENEN == 1
	if (bm & (1ul << 0)) {
    25e0:	07c2      	lsls	r2, r0, #31
	((Gclk *)hw)->GENCTRL[index].reg = data;
    25e2:	bf42      	ittt	mi
    25e4:	4b04      	ldrmi	r3, [pc, #16]	; (25f8 <_gclk_init_generators_by_fref+0x18>)
    25e6:	4a05      	ldrmi	r2, [pc, #20]	; (25fc <_gclk_init_generators_by_fref+0x1c>)
    25e8:	621a      	strmi	r2, [r3, #32]
		        | (CONF_GCLK_GEN_0_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_0_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GEN_0_GENEN << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_1_GENEN == 1
	if (bm & (1ul << 1)) {
    25ea:	0783      	lsls	r3, r0, #30
    25ec:	bf42      	ittt	mi
    25ee:	4b02      	ldrmi	r3, [pc, #8]	; (25f8 <_gclk_init_generators_by_fref+0x18>)
    25f0:	4a03      	ldrmi	r2, [pc, #12]	; (2600 <_gclk_init_generators_by_fref+0x20>)
    25f2:	625a      	strmi	r2, [r3, #36]	; 0x24
    25f4:	4770      	bx	lr
    25f6:	bf00      	nop
    25f8:	40001c00 	.word	0x40001c00
    25fc:	00012f06 	.word	0x00012f06
    2600:	00012f04 	.word	0x00012f04

00002604 <GMAC_Handler>:

/*
 * \internal GMAC interrupt handler
 */
void GMAC_Handler(void)
{
    2604:	b513      	push	{r0, r1, r4, lr}
	volatile uint32_t tsr;
	volatile uint32_t rsr;

	tsr = hri_gmac_read_TSR_reg(_gmac_dev->hw);
    2606:	4c11      	ldr	r4, [pc, #68]	; (264c <GMAC_Handler+0x48>)
    2608:	6820      	ldr	r0, [r4, #0]
    260a:	6803      	ldr	r3, [r0, #0]
	GMAC_CRITICAL_SECTION_LEAVE();
}

static inline hri_gmac_tsr_reg_t hri_gmac_read_TSR_reg(const void *const hw)
{
	return ((Gmac *)hw)->TSR.reg;
    260c:	695a      	ldr	r2, [r3, #20]
    260e:	9200      	str	r2, [sp, #0]
	GMAC_CRITICAL_SECTION_LEAVE();
}

static inline hri_gmac_rsr_reg_t hri_gmac_read_RSR_reg(const void *const hw)
{
	return ((Gmac *)hw)->RSR.reg;
    2610:	6a1a      	ldr	r2, [r3, #32]
	rsr = hri_gmac_read_RSR_reg(_gmac_dev->hw);
    2612:	9201      	str	r2, [sp, #4]
	GMAC_CRITICAL_SECTION_LEAVE();
}

static inline hri_gmac_isr_reg_t hri_gmac_read_ISR_reg(const void *const hw)
{
	return ((Gmac *)hw)->ISR.reg;
    2614:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	/* Must be Clear ISR (Clear on read) */
	hri_gmac_read_ISR_reg(_gmac_dev->hw);

	/* Frame transmited */
	if (tsr & GMAC_TSR_TXCOMP) {
    2616:	9a00      	ldr	r2, [sp, #0]
    2618:	0692      	lsls	r2, r2, #26
    261a:	d50a      	bpl.n	2632 <GMAC_Handler+0x2e>
		hri_gmac_write_TSR_reg(_gmac_dev->hw, tsr);
    261c:	9a00      	ldr	r2, [sp, #0]
	((Gmac *)hw)->TSR.reg = data;
    261e:	615a      	str	r2, [r3, #20]
		if ((_txbuf_descrs[_txbuf_index].status.bm.used) && (_gmac_dev->cb.transmited != NULL)) {
    2620:	6863      	ldr	r3, [r4, #4]
    2622:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    2626:	7bdb      	ldrb	r3, [r3, #15]
    2628:	09db      	lsrs	r3, r3, #7
    262a:	d002      	beq.n	2632 <GMAC_Handler+0x2e>
    262c:	6843      	ldr	r3, [r0, #4]
    262e:	b103      	cbz	r3, 2632 <GMAC_Handler+0x2e>
			_gmac_dev->cb.transmited(_gmac_dev);
    2630:	4798      	blx	r3
		}
	}

	/* Frame received */
	if (rsr & GMAC_RSR_REC) {
    2632:	9b01      	ldr	r3, [sp, #4]
    2634:	079b      	lsls	r3, r3, #30
    2636:	d503      	bpl.n	2640 <GMAC_Handler+0x3c>
		if (_gmac_dev->cb.received != NULL) {
    2638:	6820      	ldr	r0, [r4, #0]
    263a:	6883      	ldr	r3, [r0, #8]
    263c:	b103      	cbz	r3, 2640 <GMAC_Handler+0x3c>
			_gmac_dev->cb.received(_gmac_dev);
    263e:	4798      	blx	r3
		}
	}
	hri_gmac_write_RSR_reg(_gmac_dev->hw, rsr);
    2640:	6823      	ldr	r3, [r4, #0]
    2642:	9a01      	ldr	r2, [sp, #4]
    2644:	681b      	ldr	r3, [r3, #0]
	((Gmac *)hw)->RSR.reg = data;
    2646:	621a      	str	r2, [r3, #32]
}
    2648:	b002      	add	sp, #8
    264a:	bd10      	pop	{r4, pc}
    264c:	20000940 	.word	0x20000940

00002650 <_mac_async_init>:
	((Gmac *)hw)->NCR.reg = data;
    2650:	4b31      	ldr	r3, [pc, #196]	; (2718 <_mac_async_init+0xc8>)

int32_t _mac_async_init(struct _mac_async_device *const dev, void *const hw)
{
    2652:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	dev->hw = hw;
    2656:	6001      	str	r1, [r0, #0]
    2658:	600b      	str	r3, [r1, #0]
	((Gmac *)hw)->NCFGR.reg = data;
    265a:	4b30      	ldr	r3, [pc, #192]	; (271c <_mac_async_init+0xcc>)
    265c:	604b      	str	r3, [r1, #4]
		_txbuf_descrs[i].address        = (uint32_t)_txbuf[i];
    265e:	4f30      	ldr	r7, [pc, #192]	; (2720 <_mac_async_init+0xd0>)
	((Gmac *)hw)->UR.reg = data;
    2660:	2301      	movs	r3, #1
    2662:	60cb      	str	r3, [r1, #12]
	((Gmac *)hw)->DCFGR.reg = data;
    2664:	4b2f      	ldr	r3, [pc, #188]	; (2724 <_mac_async_init+0xd4>)
    2666:	610b      	str	r3, [r1, #16]
}

static inline void hri_gmac_write_IPGS_reg(const void *const hw, hri_gmac_ipgs_reg_t data)
{
	GMAC_CRITICAL_SECTION_ENTER();
	((Gmac *)hw)->IPGS.reg = data;
    2668:	f240 1201 	movw	r2, #257	; 0x101
	((Gmac *)hw)->WOL.reg = data;
    266c:	2300      	movs	r3, #0
    266e:	f107 0c08 	add.w	ip, r7, #8
    2672:	f8c1 30b8 	str.w	r3, [r1, #184]	; 0xb8
    2676:	f107 08a0 	add.w	r8, r7, #160	; 0xa0
	((Gmac *)hw)->IPGS.reg = data;
    267a:	f8c1 20bc 	str.w	r2, [r1, #188]	; 0xbc
    267e:	f240 59dc 	movw	r9, #1500	; 0x5dc
		_txbuf_descrs[i].status.val     = 0;
    2682:	469e      	mov	lr, r3
    2684:	463d      	mov	r5, r7
    2686:	4666      	mov	r6, ip
    2688:	00da      	lsls	r2, r3, #3
		_txbuf_descrs[i].address        = (uint32_t)_txbuf[i];
    268a:	fb09 8403 	mla	r4, r9, r3, r8
    268e:	f84c 4033 	str.w	r4, [ip, r3, lsl #3]
		_txbuf_descrs[i].status.val     = 0;
    2692:	eb0c 0402 	add.w	r4, ip, r2
		_txbuf_descrs[i].status.bm.used = 1;
    2696:	443a      	add	r2, r7
		_txbuf_descrs[i].status.val     = 0;
    2698:	f8c4 e004 	str.w	lr, [r4, #4]
		_txbuf_descrs[i].status.bm.used = 1;
    269c:	7bd4      	ldrb	r4, [r2, #15]
	for (i = 0; i < CONF_GMAC_TXDESCR_NUM; i++) {
    269e:	3301      	adds	r3, #1
		_txbuf_descrs[i].status.bm.used = 1;
    26a0:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	for (i = 0; i < CONF_GMAC_TXDESCR_NUM; i++) {
    26a4:	2b10      	cmp	r3, #16
		_txbuf_descrs[i].status.bm.used = 1;
    26a6:	73d4      	strb	r4, [r2, #15]
	for (i = 0; i < CONF_GMAC_TXDESCR_NUM; i++) {
    26a8:	d1ee      	bne.n	2688 <_mac_async_init+0x38>
	_txbuf_descrs[CONF_GMAC_TXDESCR_NUM - 1].status.bm.wrap = 1;
    26aa:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
	_txbuf_index                                            = 0;
    26ae:	f8c7 e004 	str.w	lr, [r7, #4]
	_txbuf_descrs[CONF_GMAC_TXDESCR_NUM - 1].status.bm.wrap = 1;
    26b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    26b6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	_last_txbuf_index                                       = 0;
    26ba:	4b1b      	ldr	r3, [pc, #108]	; (2728 <_mac_async_init+0xd8>)
    26bc:	2200      	movs	r2, #0
    26be:	f8c3 e988 	str.w	lr, [r3, #2440]	; 0x988
		_rxbuf_descrs[i].address.val = (uint32_t)_rxbuf[i];
    26c2:	f503 6419 	add.w	r4, r3, #2448	; 0x990
    26c6:	f603 2c28 	addw	ip, r3, #2600	; 0xa28
		_rxbuf_descrs[i].status.val  = 0;
    26ca:	4617      	mov	r7, r2
		_rxbuf_descrs[i].address.val = (uint32_t)_rxbuf[i];
    26cc:	eb0c 1e02 	add.w	lr, ip, r2, lsl #4
    26d0:	f842 e004 	str.w	lr, [r2, r4]
		_rxbuf_descrs[i].status.val  = 0;
    26d4:	eb04 0e02 	add.w	lr, r4, r2
    26d8:	3208      	adds	r2, #8
	for (i = 0; i < CONF_GMAC_RXDESCR_NUM; i++) {
    26da:	2a80      	cmp	r2, #128	; 0x80
		_rxbuf_descrs[i].status.val  = 0;
    26dc:	f8ce 7004 	str.w	r7, [lr, #4]
	for (i = 0; i < CONF_GMAC_RXDESCR_NUM; i++) {
    26e0:	d1f4      	bne.n	26cc <_mac_async_init+0x7c>
	_rxbuf_descrs[CONF_GMAC_RXDESCR_NUM - 1].address.bm.wrap = 1;
    26e2:	f893 2a08 	ldrb.w	r2, [r3, #2568]	; 0xa08
	        | GMAC_DCFGR_DRBS(CONF_GMAC_DCFGR_DRBS) | (CONF_GMAC_DCFGR_DDRP ? GMAC_DCFGR_DDRP : 0));
	hri_gmac_write_WOL_reg(dev->hw, 0);
	hri_gmac_write_IPGS_reg(dev->hw, GMAC_IPGS_FL((CONF_GMAC_IPGS_FL_MUL << 8) | CONF_GMAC_IPGS_FL_DIV));
	_mac_init_bufdescr(dev);

	_gmac_dev = dev;
    26e6:	6028      	str	r0, [r5, #0]
	_rxbuf_descrs[CONF_GMAC_RXDESCR_NUM - 1].address.bm.wrap = 1;
    26e8:	f042 0202 	orr.w	r2, r2, #2
    26ec:	f883 2a08 	strb.w	r2, [r3, #2568]	; 0xa08
	_rxbuf_index                                             = 0;
    26f0:	4b0e      	ldr	r3, [pc, #56]	; (272c <_mac_async_init+0xdc>)
    26f2:	f8c3 7130 	str.w	r7, [r3, #304]	; 0x130
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    26f6:	4b0e      	ldr	r3, [pc, #56]	; (2730 <_mac_async_init+0xe0>)
	((Gmac *)hw)->TBQB.reg = data;
    26f8:	61ce      	str	r6, [r1, #28]
    26fa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
	((Gmac *)hw)->RBQB.reg = data;
    26fe:	618c      	str	r4, [r1, #24]
    2700:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
    2704:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2708:	f3bf 8f6f 	isb	sy
	NVIC_DisableIRQ(GMAC_IRQn);
	NVIC_ClearPendingIRQ(GMAC_IRQn);
	NVIC_EnableIRQ(GMAC_IRQn);

	return ERR_NONE;
}
    270c:	2000      	movs	r0, #0
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    270e:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2712:	609a      	str	r2, [r3, #8]
    2714:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2718:	00030180 	.word	0x00030180
    271c:	4090211b 	.word	0x4090211b
    2720:	20000940 	.word	0x20000940
    2724:	00020704 	.word	0x00020704
    2728:	20005e18 	.word	0x20005e18
    272c:	20006f10 	.word	0x20006f10
    2730:	e000e100 	.word	0xe000e100

00002734 <_mac_async_enable>:
	return ERR_NONE;
}

int32_t _mac_async_enable(struct _mac_async_device *const dev)
{
	hri_gmac_set_NCR_reg(dev->hw, GMAC_NCR_RXEN | GMAC_NCR_TXEN);
    2734:	6802      	ldr	r2, [r0, #0]
	((Gmac *)hw)->NCR.reg |= mask;
    2736:	6813      	ldr	r3, [r2, #0]
    2738:	f043 030c 	orr.w	r3, r3, #12
    273c:	6013      	str	r3, [r2, #0]
	return ERR_NONE;
}
    273e:	2000      	movs	r0, #0
    2740:	4770      	bx	lr
	...

00002744 <_mac_async_write>:
	hri_gmac_clear_NCR_reg(dev->hw, GMAC_NCR_RXEN | GMAC_NCR_TXEN);
	return ERR_NONE;
}

int32_t _mac_async_write(struct _mac_async_device *const dev, uint8_t *buf, uint32_t len)
{
    2744:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2748:	4615      	mov	r5, r2
	uint32_t pos;
	uint32_t blen;
	uint32_t i;

	if (_txbuf_descrs[_last_txbuf_index].status.bm.used && !_txbuf_descrs[_last_txbuf_index].status.bm.last_buf) {
    274a:	4a47      	ldr	r2, [pc, #284]	; (2868 <_mac_async_write+0x124>)
    274c:	4c47      	ldr	r4, [pc, #284]	; (286c <_mac_async_write+0x128>)
    274e:	f8d2 3988 	ldr.w	r3, [r2, #2440]	; 0x988
    2752:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
{
    2756:	4606      	mov	r6, r0
	if (_txbuf_descrs[_last_txbuf_index].status.bm.used && !_txbuf_descrs[_last_txbuf_index].status.bm.last_buf) {
    2758:	7bdb      	ldrb	r3, [r3, #15]
    275a:	09db      	lsrs	r3, r3, #7
    275c:	d108      	bne.n	2770 <_mac_async_write+0x2c>
				break;
			}
		}
	}

	if (!_txbuf_descrs[_txbuf_index].status.bm.used) {
    275e:	6863      	ldr	r3, [r4, #4]
    2760:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    2764:	7bdb      	ldrb	r3, [r3, #15]
    2766:	09db      	lsrs	r3, r3, #7
    2768:	d11d      	bne.n	27a6 <_mac_async_write+0x62>
		return ERR_NO_RESOURCE;
    276a:	f06f 001b 	mvn.w	r0, #27
    276e:	e077      	b.n	2860 <_mac_async_write+0x11c>
	if (_txbuf_descrs[_last_txbuf_index].status.bm.used && !_txbuf_descrs[_last_txbuf_index].status.bm.last_buf) {
    2770:	f8d2 3988 	ldr.w	r3, [r2, #2440]	; 0x988
    2774:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    2778:	7b5b      	ldrb	r3, [r3, #13]
    277a:	09db      	lsrs	r3, r3, #7
    277c:	d1ef      	bne.n	275e <_mac_async_write+0x1a>
    277e:	2001      	movs	r0, #1
			pos = _last_txbuf_index + i;
    2780:	f8d2 3988 	ldr.w	r3, [r2, #2440]	; 0x988
    2784:	4403      	add	r3, r0
			if (pos >= CONF_GMAC_TXDESCR_NUM) {
    2786:	2b0f      	cmp	r3, #15
				pos -= CONF_GMAC_TXDESCR_NUM;
    2788:	bf88      	it	hi
    278a:	3b10      	subhi	r3, #16
			_txbuf_descrs[pos].status.bm.used = 1;
    278c:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    2790:	7bdf      	ldrb	r7, [r3, #15]
    2792:	f047 0780 	orr.w	r7, r7, #128	; 0x80
    2796:	73df      	strb	r7, [r3, #15]
			if (_txbuf_descrs[pos].status.bm.last_buf) {
    2798:	7b5b      	ldrb	r3, [r3, #13]
    279a:	09db      	lsrs	r3, r3, #7
    279c:	d1df      	bne.n	275e <_mac_async_write+0x1a>
		for (i = 1; i < CONF_GMAC_TXDESCR_NUM; i++) {
    279e:	3001      	adds	r0, #1
    27a0:	2810      	cmp	r0, #16
    27a2:	d1ed      	bne.n	2780 <_mac_async_write+0x3c>
    27a4:	e7db      	b.n	275e <_mac_async_write+0x1a>
	}

	/* Check if have enough buffers, the first buffer already checked */
	if (len > CONF_GMAC_TXBUF_SIZE) {
    27a6:	f240 53dc 	movw	r3, #1500	; 0x5dc
    27aa:	429d      	cmp	r5, r3
    27ac:	d914      	bls.n	27d8 <_mac_async_write+0x94>
    27ae:	2001      	movs	r0, #1

			if (!_txbuf_descrs[pos].status.bm.used) {
				return ERR_NO_RESOURCE;
			}

			if ((len - (CONF_GMAC_TXBUF_SIZE * i)) < CONF_GMAC_TXBUF_SIZE) {
    27b0:	461f      	mov	r7, r3
    27b2:	f240 5edb 	movw	lr, #1499	; 0x5db
			pos = _txbuf_index + i;
    27b6:	6863      	ldr	r3, [r4, #4]
    27b8:	4403      	add	r3, r0
			if (pos >= CONF_GMAC_TXDESCR_NUM) {
    27ba:	2b0f      	cmp	r3, #15
				pos -= CONF_GMAC_TXDESCR_NUM;
    27bc:	bf88      	it	hi
    27be:	3b10      	subhi	r3, #16
			if (!_txbuf_descrs[pos].status.bm.used) {
    27c0:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    27c4:	7bdb      	ldrb	r3, [r3, #15]
    27c6:	09db      	lsrs	r3, r3, #7
    27c8:	d0cf      	beq.n	276a <_mac_async_write+0x26>
			if ((len - (CONF_GMAC_TXBUF_SIZE * i)) < CONF_GMAC_TXBUF_SIZE) {
    27ca:	fb07 5310 	mls	r3, r7, r0, r5
    27ce:	4573      	cmp	r3, lr
    27d0:	d902      	bls.n	27d8 <_mac_async_write+0x94>
		for (i = 1; i < CONF_GMAC_TXDESCR_NUM; i++) {
    27d2:	3001      	adds	r0, #1
    27d4:	2810      	cmp	r0, #16
    27d6:	d1ee      	bne.n	27b6 <_mac_async_write+0x72>
				break;
			}
		}
	}
	_last_txbuf_index = _txbuf_index;
    27d8:	6863      	ldr	r3, [r4, #4]
    27da:	f8c2 3988 	str.w	r3, [r2, #2440]	; 0x988
    27de:	f501 49bb 	add.w	r9, r1, #23936	; 0x5d80

	/* Write data to transmit buffer */
	for (i = 0; i < CONF_GMAC_TXDESCR_NUM; i++) {
		blen = min(len, CONF_GMAC_TXBUF_SIZE);
		memcpy(_txbuf[_txbuf_index], buf + (i * CONF_GMAC_TXBUF_SIZE), blen);
    27e2:	f8df b090 	ldr.w	fp, [pc, #144]	; 2874 <_mac_async_write+0x130>
    27e6:	4b22      	ldr	r3, [pc, #136]	; (2870 <_mac_async_write+0x12c>)
    27e8:	460f      	mov	r7, r1
    27ea:	f109 0940 	add.w	r9, r9, #64	; 0x40
		blen = min(len, CONF_GMAC_TXBUF_SIZE);
    27ee:	f240 5adc 	movw	sl, #1500	; 0x5dc
    27f2:	4555      	cmp	r5, sl
		memcpy(_txbuf[_txbuf_index], buf + (i * CONF_GMAC_TXBUF_SIZE), blen);
    27f4:	6860      	ldr	r0, [r4, #4]
    27f6:	9301      	str	r3, [sp, #4]
		blen = min(len, CONF_GMAC_TXBUF_SIZE);
    27f8:	46a8      	mov	r8, r5
    27fa:	bf28      	it	cs
    27fc:	46d0      	movcs	r8, sl
		memcpy(_txbuf[_txbuf_index], buf + (i * CONF_GMAC_TXBUF_SIZE), blen);
    27fe:	4639      	mov	r1, r7
    2800:	4642      	mov	r2, r8
    2802:	fb0a b000 	mla	r0, sl, r0, fp
    2806:	4798      	blx	r3
		len -= blen;

		if (len > 0) {
			/* Here the Used flag be set to zero */
			_txbuf_descrs[_txbuf_index].status.val = blen;
    2808:	6862      	ldr	r2, [r4, #4]
		if (len > 0) {
    280a:	9b01      	ldr	r3, [sp, #4]
			_txbuf_descrs[_txbuf_index].status.val = blen;
    280c:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
		if (len > 0) {
    2810:	ebb5 0508 	subs.w	r5, r5, r8
			_txbuf_descrs[_txbuf_index].status.val = blen;
    2814:	f8c2 800c 	str.w	r8, [r2, #12]
		} else {
			_txbuf_descrs[_txbuf_index].status.val         = blen;
			_txbuf_descrs[_txbuf_index].status.bm.last_buf = 1;
    2818:	bf01      	itttt	eq
    281a:	6862      	ldreq	r2, [r4, #4]
    281c:	eb04 02c2 	addeq.w	r2, r4, r2, lsl #3
    2820:	7b51      	ldrbeq	r1, [r2, #13]
    2822:	f041 0180 	orreq.w	r1, r1, #128	; 0x80
    2826:	bf08      	it	eq
    2828:	7351      	strbeq	r1, [r2, #13]
		}
		_txbuf_index++;
    282a:	6862      	ldr	r2, [r4, #4]
    282c:	3201      	adds	r2, #1
    282e:	6062      	str	r2, [r4, #4]
		if (_txbuf_index == CONF_GMAC_TXDESCR_NUM) {
    2830:	6862      	ldr	r2, [r4, #4]
    2832:	2a10      	cmp	r2, #16
    2834:	d107      	bne.n	2846 <_mac_async_write+0x102>
			_txbuf_index                                            = 0;
    2836:	2200      	movs	r2, #0
    2838:	6062      	str	r2, [r4, #4]
			_txbuf_descrs[CONF_GMAC_TXDESCR_NUM - 1].status.bm.wrap = 1;
    283a:	f894 2087 	ldrb.w	r2, [r4, #135]	; 0x87
    283e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    2842:	f884 2087 	strb.w	r2, [r4, #135]	; 0x87
		}
		if (len == 0) {
    2846:	b11d      	cbz	r5, 2850 <_mac_async_write+0x10c>
    2848:	f207 57dc 	addw	r7, r7, #1500	; 0x5dc
	for (i = 0; i < CONF_GMAC_TXDESCR_NUM; i++) {
    284c:	45b9      	cmp	r9, r7
    284e:	d1d0      	bne.n	27f2 <_mac_async_write+0xae>
  __ASM volatile ("dsb 0xF":::"memory");
    2850:	f3bf 8f4f 	dsb	sy

	/* Data synchronization barrier */
	__DSB();

	/* Active Transmit */
	hri_gmac_set_NCR_reg(dev->hw, GMAC_NCR_TSTART);
    2854:	6832      	ldr	r2, [r6, #0]
    2856:	6813      	ldr	r3, [r2, #0]
    2858:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    285c:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    285e:	2000      	movs	r0, #0
}
    2860:	b003      	add	sp, #12
    2862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2866:	bf00      	nop
    2868:	20005e18 	.word	0x20005e18
    286c:	20000940 	.word	0x20000940
    2870:	0000b33b 	.word	0x0000b33b
    2874:	200009e0 	.word	0x200009e0

00002878 <_mac_async_read>:

uint32_t _mac_async_read(struct _mac_async_device *const dev, uint8_t *buf, uint32_t len)
{
    2878:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    287c:	460b      	mov	r3, r1
	uint32_t eof       = 0xFFFFFFFF; /* End of Frame index */
	uint32_t total_len = 0;          /* Total length of received package */

	(void)dev;
	for (i = 0; i < CONF_GMAC_RXDESCR_NUM; i++) {
		pos = _rxbuf_index + i;
    287e:	4937      	ldr	r1, [pc, #220]	; (295c <_mac_async_read+0xe4>)
		if (pos >= CONF_GMAC_RXDESCR_NUM) {
			pos -= CONF_GMAC_RXDESCR_NUM;
		}

		/* No more data for Ethernet package */
		if (!_rxbuf_descrs[pos].address.bm.ownership) {
    2880:	4837      	ldr	r0, [pc, #220]	; (2960 <_mac_async_read+0xe8>)
{
    2882:	4617      	mov	r7, r2
	uint32_t sof       = 0xFFFFFFFF; /* Start of Frame index */
    2884:	f04f 35ff 	mov.w	r5, #4294967295
	for (i = 0; i < CONF_GMAC_RXDESCR_NUM; i++) {
    2888:	2400      	movs	r4, #0
    288a:	4688      	mov	r8, r1
		pos = _rxbuf_index + i;
    288c:	f8d1 2130 	ldr.w	r2, [r1, #304]	; 0x130
    2890:	4422      	add	r2, r4
		if (pos >= CONF_GMAC_RXDESCR_NUM) {
    2892:	2a0f      	cmp	r2, #15
			pos -= CONF_GMAC_RXDESCR_NUM;
    2894:	bf88      	it	hi
    2896:	3a10      	subhi	r2, #16
		if (!_rxbuf_descrs[pos].address.bm.ownership) {
    2898:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    289c:	f892 6990 	ldrb.w	r6, [r2, #2448]	; 0x990
    28a0:	07f6      	lsls	r6, r6, #31
    28a2:	d51e      	bpl.n	28e2 <_mac_async_read+0x6a>
			break;
		}

		if (_rxbuf_descrs[pos].status.bm.sof) {
    28a4:	f892 6995 	ldrb.w	r6, [r2, #2453]	; 0x995
    28a8:	f016 0f40 	tst.w	r6, #64	; 0x40
    28ac:	bf18      	it	ne
    28ae:	4625      	movne	r5, r4
			sof = i;
		}

		if ((_rxbuf_descrs[pos].status.bm.eof) && (sof != 0xFFFFFFFF)) {
    28b0:	09f6      	lsrs	r6, r6, #7
    28b2:	f104 0601 	add.w	r6, r4, #1
    28b6:	d011      	beq.n	28dc <_mac_async_read+0x64>
    28b8:	f1b5 3fff 	cmp.w	r5, #4294967295
    28bc:	d00e      	beq.n	28dc <_mac_async_read+0x64>
			/* eof now indicate the number of bufs the frame used */
			eof = i;
			n   = _rxbuf_descrs[pos].status.bm.len;
    28be:	f8b2 2994 	ldrh.w	r2, [r2, #2452]	; 0x994
    28c2:	f3c2 020c 	ubfx	r2, r2, #0, #13
			len = min(n, len);
    28c6:	4297      	cmp	r7, r2
    28c8:	bf28      	it	cs
    28ca:	4617      	movcs	r7, r2
	uint32_t total_len = 0;          /* Total length of received package */
    28cc:	f04f 0900 	mov.w	r9, #0
	} else {
		j = i;
	}

	/* Copy data to user buffer */
	for (i = 0; i < j; i++) {
    28d0:	46ca      	mov	sl, r9
    28d2:	45b2      	cmp	sl, r6
    28d4:	d10d      	bne.n	28f2 <_mac_async_read+0x7a>
			_rxbuf_index = 0;
		}
	}

	return total_len;
}
    28d6:	4648      	mov	r0, r9
    28d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (i = 0; i < CONF_GMAC_RXDESCR_NUM; i++) {
    28dc:	2e10      	cmp	r6, #16
    28de:	4634      	mov	r4, r6
    28e0:	d1d4      	bne.n	288c <_mac_async_read+0x14>
	} else if (sof != 0xFFFFFFFF) {
    28e2:	1c6a      	adds	r2, r5, #1
    28e4:	d101      	bne.n	28ea <_mac_async_read+0x72>
    28e6:	4626      	mov	r6, r4
    28e8:	e000      	b.n	28ec <_mac_async_read+0x74>
    28ea:	462e      	mov	r6, r5
    28ec:	f04f 34ff 	mov.w	r4, #4294967295
    28f0:	e7ec      	b.n	28cc <_mac_async_read+0x54>
		if (eof != 0xFFFFFFFF && i >= sof && i <= eof && len > 0) {
    28f2:	1c61      	adds	r1, r4, #1
    28f4:	d017      	beq.n	2926 <_mac_async_read+0xae>
    28f6:	45aa      	cmp	sl, r5
    28f8:	d315      	bcc.n	2926 <_mac_async_read+0xae>
    28fa:	45a2      	cmp	sl, r4
    28fc:	d813      	bhi.n	2926 <_mac_async_read+0xae>
    28fe:	b197      	cbz	r7, 2926 <_mac_async_read+0xae>
			n = min(len, CONF_GMAC_RXBUF_SIZE);
    2900:	2f80      	cmp	r7, #128	; 0x80
			memcpy(buf, _rxbuf[_rxbuf_index], n);
    2902:	f8d8 1130 	ldr.w	r1, [r8, #304]	; 0x130
    2906:	4817      	ldr	r0, [pc, #92]	; (2964 <_mac_async_read+0xec>)
			n = min(len, CONF_GMAC_RXBUF_SIZE);
    2908:	46bb      	mov	fp, r7
    290a:	bf28      	it	cs
    290c:	f04f 0b80 	movcs.w	fp, #128	; 0x80
			memcpy(buf, _rxbuf[_rxbuf_index], n);
    2910:	eb00 11c1 	add.w	r1, r0, r1, lsl #7
    2914:	465a      	mov	r2, fp
    2916:	4618      	mov	r0, r3
    2918:	4b13      	ldr	r3, [pc, #76]	; (2968 <_mac_async_read+0xf0>)
    291a:	4798      	blx	r3
    291c:	4603      	mov	r3, r0
			buf += n;
    291e:	445b      	add	r3, fp
			total_len += n;
    2920:	44d9      	add	r9, fp
			len -= n;
    2922:	eba7 070b 	sub.w	r7, r7, fp
		_rxbuf_descrs[_rxbuf_index].address.bm.ownership = 0;
    2926:	f8d8 2130 	ldr.w	r2, [r8, #304]	; 0x130
    292a:	490d      	ldr	r1, [pc, #52]	; (2960 <_mac_async_read+0xe8>)
    292c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
	for (i = 0; i < j; i++) {
    2930:	f10a 0a01 	add.w	sl, sl, #1
		_rxbuf_descrs[_rxbuf_index].address.bm.ownership = 0;
    2934:	f892 1990 	ldrb.w	r1, [r2, #2448]	; 0x990
    2938:	f36f 0100 	bfc	r1, #0, #1
    293c:	f882 1990 	strb.w	r1, [r2, #2448]	; 0x990
		_rxbuf_index++;
    2940:	f8d8 2130 	ldr.w	r2, [r8, #304]	; 0x130
    2944:	3201      	adds	r2, #1
    2946:	f8c8 2130 	str.w	r2, [r8, #304]	; 0x130
		if (_rxbuf_index == CONF_GMAC_RXDESCR_NUM) {
    294a:	f8d8 2130 	ldr.w	r2, [r8, #304]	; 0x130
    294e:	2a10      	cmp	r2, #16
			_rxbuf_index = 0;
    2950:	bf04      	itt	eq
    2952:	2200      	moveq	r2, #0
    2954:	f8c8 2130 	streq.w	r2, [r8, #304]	; 0x130
    2958:	e7bb      	b.n	28d2 <_mac_async_read+0x5a>
    295a:	bf00      	nop
    295c:	20006f10 	.word	0x20006f10
    2960:	20005e18 	.word	0x20005e18
    2964:	20006840 	.word	0x20006840
    2968:	0000b33b 	.word	0x0000b33b

0000296c <_mac_async_read_len>:

uint32_t _mac_async_read_len(struct _mac_async_device *const dev)
{
    296c:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (pos >= CONF_GMAC_RXDESCR_NUM) {
			pos -= CONF_GMAC_RXDESCR_NUM;
		}

		/* No more data for Ethernet package */
		if (!(_rxbuf_descrs[pos].address.bm.ownership)) {
    296e:	4c14      	ldr	r4, [pc, #80]	; (29c0 <_mac_async_read_len+0x54>)
		pos = _rxbuf_index + i;
    2970:	4f14      	ldr	r7, [pc, #80]	; (29c4 <_mac_async_read_len+0x58>)
	uint32_t total_len = 0;     /* Total length of received package */
    2972:	2000      	movs	r0, #0
	bool     sof       = false; /* Start of Frame */
    2974:	4601      	mov	r1, r0
	for (i = 0; i < CONF_GMAC_RXDESCR_NUM; i++) {
    2976:	4602      	mov	r2, r0
    2978:	4625      	mov	r5, r4
		pos = _rxbuf_index + i;
    297a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
    297e:	4413      	add	r3, r2
		if (pos >= CONF_GMAC_RXDESCR_NUM) {
    2980:	2b0f      	cmp	r3, #15
			pos -= CONF_GMAC_RXDESCR_NUM;
    2982:	bf88      	it	hi
    2984:	3b10      	subhi	r3, #16
		if (!(_rxbuf_descrs[pos].address.bm.ownership)) {
    2986:	00db      	lsls	r3, r3, #3
    2988:	18e6      	adds	r6, r4, r3
    298a:	f896 e990 	ldrb.w	lr, [r6, #2448]	; 0x990
    298e:	f01e 0f01 	tst.w	lr, #1
    2992:	d013      	beq.n	29bc <_mac_async_read_len+0x50>
			break;
		}

		if (_rxbuf_descrs[pos].status.bm.sof) {
    2994:	f896 6995 	ldrb.w	r6, [r6, #2453]	; 0x995
    2998:	0676      	lsls	r6, r6, #25
    299a:	d400      	bmi.n	299e <_mac_async_read_len+0x32>
			sof = true;
		}
		if (sof == true) {
    299c:	b131      	cbz	r1, 29ac <_mac_async_read_len+0x40>
			total_len += _rxbuf_descrs[pos].status.bm.len;
    299e:	18e9      	adds	r1, r5, r3
    29a0:	f8b1 1994 	ldrh.w	r1, [r1, #2452]	; 0x994
    29a4:	f3c1 010c 	ubfx	r1, r1, #0, #13
    29a8:	4408      	add	r0, r1
    29aa:	2101      	movs	r1, #1
		}

		if (_rxbuf_descrs[pos].status.bm.eof) {
    29ac:	442b      	add	r3, r5
    29ae:	f893 3995 	ldrb.w	r3, [r3, #2453]	; 0x995
    29b2:	09db      	lsrs	r3, r3, #7
    29b4:	d102      	bne.n	29bc <_mac_async_read_len+0x50>
	for (i = 0; i < CONF_GMAC_RXDESCR_NUM; i++) {
    29b6:	3201      	adds	r2, #1
    29b8:	2a10      	cmp	r2, #16
    29ba:	d1de      	bne.n	297a <_mac_async_read_len+0xe>
			break;
		}
	}

	return total_len;
}
    29bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    29be:	bf00      	nop
    29c0:	20005e18 	.word	0x20005e18
    29c4:	20006f10 	.word	0x20006f10

000029c8 <_sha_sync_init>:
struct icm_descriptor icm_descriptor;
COMPILER_PACK_RESET()

int32_t _sha_sync_init(struct _sha_sync_device *const dev, void *const hw)
{
	dev->hw = hw;
    29c8:	6001      	str	r1, [r0, #0]

	return ERR_NONE;
}
    29ca:	2000      	movs	r0, #0
    29cc:	4770      	bx	lr
	...

000029d0 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    29d0:	4b01      	ldr	r3, [pc, #4]	; (29d8 <_mclk_init+0x8>)
    29d2:	2201      	movs	r2, #1
    29d4:	715a      	strb	r2, [r3, #5]
    29d6:	4770      	bx	lr
    29d8:	40000800 	.word	0x40000800

000029dc <_flash_program>:
 * \param[in]  buffer        Pointer to buffer where the data to
 *                           write is stored
 * \param[in] size           The size of data to write to a page
 */
static void _flash_program(void *const hw, const uint32_t dst_addr, const uint8_t *buffer, const uint16_t size)
{
    29dc:	b570      	push	{r4, r5, r6, lr}
	uint32_t *ptr_read    = (uint32_t *)buffer;
	uint32_t  nvm_address = dst_addr / 4;
    29de:	088e      	lsrs	r6, r1, #2
	return ((Nvmctrl *)hw)->PARAM.reg;
}

static inline bool hri_nvmctrl_get_STATUS_READY_bit(const void *const hw)
{
	return (((Nvmctrl *)hw)->STATUS.reg & NVMCTRL_STATUS_READY) >> NVMCTRL_STATUS_READY_Pos;
    29e0:	8a44      	ldrh	r4, [r0, #18]
	uint16_t  i;

	while (!hri_nvmctrl_get_STATUS_READY_bit(hw)) {
    29e2:	07e5      	lsls	r5, r4, #31
    29e4:	d5fc      	bpl.n	29e0 <_flash_program+0x4>
	((Nvmctrl *)hw)->CTRLB.reg = data;
    29e6:	f24a 5415 	movw	r4, #42261	; 0xa515
    29ea:	8084      	strh	r4, [r0, #4]
	return (((Nvmctrl *)hw)->STATUS.reg & NVMCTRL_STATUS_READY) >> NVMCTRL_STATUS_READY_Pos;
    29ec:	8a44      	ldrh	r4, [r0, #18]
		/* Wait until this module isn't busy */
	}

	hri_nvmctrl_write_CTRLB_reg(hw, NVMCTRL_CTRLB_CMD_PBC | NVMCTRL_CTRLB_CMDEX_KEY);

	while (!hri_nvmctrl_get_STATUS_READY_bit(hw)) {
    29ee:	07e4      	lsls	r4, r4, #31
    29f0:	d5fc      	bpl.n	29ec <_flash_program+0x10>
    29f2:	ebc2 0686 	rsb	r6, r2, r6, lsl #2
    29f6:	4614      	mov	r4, r2
		/* Wait until this module isn't busy */
	}

	/* Writes to the page buffer must be 32 bits, perform manual copy
	 * to ensure alignment */
	for (i = 0; i < size; i += 4) {
    29f8:	1aa5      	subs	r5, r4, r2
    29fa:	b2ad      	uxth	r5, r5
    29fc:	429d      	cmp	r5, r3
    29fe:	d307      	bcc.n	2a10 <_flash_program+0x34>
    2a00:	8a43      	ldrh	r3, [r0, #18]
		NVM_MEMORY[nvm_address++] = *ptr_read;
		ptr_read++;
	}

	while (!hri_nvmctrl_get_STATUS_READY_bit(hw)) {
    2a02:	07db      	lsls	r3, r3, #31
    2a04:	d5fc      	bpl.n	2a00 <_flash_program+0x24>
	((Nvmctrl *)hw)->CTRLB.reg = data;
    2a06:	f24a 5303 	movw	r3, #42243	; 0xa503
	((Nvmctrl *)hw)->ADDR.reg = data;
    2a0a:	6141      	str	r1, [r0, #20]
	((Nvmctrl *)hw)->CTRLB.reg = data;
    2a0c:	8083      	strh	r3, [r0, #4]
    2a0e:	bd70      	pop	{r4, r5, r6, pc}
		NVM_MEMORY[nvm_address++] = *ptr_read;
    2a10:	6825      	ldr	r5, [r4, #0]
    2a12:	51a5      	str	r5, [r4, r6]
		ptr_read++;
    2a14:	3404      	adds	r4, #4
    2a16:	e7ef      	b.n	29f8 <_flash_program+0x1c>

00002a18 <_flash_init>:
{
    2a18:	b538      	push	{r3, r4, r5, lr}
    2a1a:	460d      	mov	r5, r1
	ASSERT(device && (hw == NVMCTRL));
    2a1c:	4604      	mov	r4, r0
    2a1e:	b368      	cbz	r0, 2a7c <_flash_init+0x64>
    2a20:	4817      	ldr	r0, [pc, #92]	; (2a80 <_flash_init+0x68>)
    2a22:	1a0b      	subs	r3, r1, r0
    2a24:	4258      	negs	r0, r3
    2a26:	4158      	adcs	r0, r3
    2a28:	224b      	movs	r2, #75	; 0x4b
    2a2a:	4916      	ldr	r1, [pc, #88]	; (2a84 <_flash_init+0x6c>)
    2a2c:	4b16      	ldr	r3, [pc, #88]	; (2a88 <_flash_init+0x70>)
    2a2e:	4798      	blx	r3
	device->hw = hw;
    2a30:	6125      	str	r5, [r4, #16]
	return ((Nvmctrl *)hw)->CTRLA.reg;
    2a32:	882b      	ldrh	r3, [r5, #0]
	ctrla &= ~(NVMCTRL_CTRLA_CACHEDIS0 | NVMCTRL_CTRLA_CACHEDIS1 | NVMCTRL_CTRLA_PRM_Msk);
    2a34:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
    2a38:	049b      	lsls	r3, r3, #18
    2a3a:	0c9b      	lsrs	r3, r3, #18
	hri_nvmctrl_write_CTRLA_reg(hw, ctrla);
    2a3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
    2a40:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
	((Nvmctrl *)hw)->CTRLA.reg = data;
    2a44:	802b      	strh	r3, [r5, #0]
	_nvm_dev = device;
    2a46:	4b11      	ldr	r3, [pc, #68]	; (2a8c <_flash_init+0x74>)
    2a48:	601c      	str	r4, [r3, #0]
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2a4a:	4b11      	ldr	r3, [pc, #68]	; (2a90 <_flash_init+0x78>)
    2a4c:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    2a50:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
    2a54:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2a58:	f3bf 8f6f 	isb	sy
    2a5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2a60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    2a64:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2a68:	f3bf 8f6f 	isb	sy
}
    2a6c:	2000      	movs	r0, #0
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2a6e:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    2a72:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2a76:	6019      	str	r1, [r3, #0]
    2a78:	601a      	str	r2, [r3, #0]
    2a7a:	bd38      	pop	{r3, r4, r5, pc}
    2a7c:	e7d4      	b.n	2a28 <_flash_init+0x10>
    2a7e:	bf00      	nop
    2a80:	41004000 	.word	0x41004000
    2a84:	0000c6d0 	.word	0x0000c6d0
    2a88:	00002009 	.word	0x00002009
    2a8c:	20007044 	.word	0x20007044
    2a90:	e000e100 	.word	0xe000e100

00002a94 <_flash_get_page_size>:
}
    2a94:	f44f 7000 	mov.w	r0, #512	; 0x200
    2a98:	4770      	bx	lr

00002a9a <_flash_get_total_pages>:
	return (uint32_t)hri_nvmctrl_read_PARAM_NVMP_bf(device->hw);
    2a9a:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->PARAM.reg & NVMCTRL_PARAM_NVMP_Msk) >> NVMCTRL_PARAM_NVMP_Pos;
    2a9c:	6898      	ldr	r0, [r3, #8]
}
    2a9e:	b280      	uxth	r0, r0
    2aa0:	4770      	bx	lr

00002aa2 <_flash_read>:
{
    2aa2:	b510      	push	{r4, lr}
	while (!hri_nvmctrl_get_STATUS_READY_bit(device->hw)) {
    2aa4:	6904      	ldr	r4, [r0, #16]
	return (((Nvmctrl *)hw)->STATUS.reg & NVMCTRL_STATUS_READY) >> NVMCTRL_STATUS_READY_Pos;
    2aa6:	8a60      	ldrh	r0, [r4, #18]
    2aa8:	07c0      	lsls	r0, r0, #31
    2aaa:	d5fc      	bpl.n	2aa6 <_flash_read+0x4>
    2aac:	4413      	add	r3, r2
    2aae:	4610      	mov	r0, r2
	for (i = 0; i < length; i++) {
    2ab0:	4298      	cmp	r0, r3
    2ab2:	d100      	bne.n	2ab6 <_flash_read+0x14>
}
    2ab4:	bd10      	pop	{r4, pc}
		buffer[i] = nvm_addr[src_addr + i];
    2ab6:	1a84      	subs	r4, r0, r2
    2ab8:	5c64      	ldrb	r4, [r4, r1]
    2aba:	f800 4b01 	strb.w	r4, [r0], #1
    2abe:	e7f7      	b.n	2ab0 <_flash_read+0xe>

00002ac0 <_flash_write>:
{
    2ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2ac4:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
    2ac8:	b083      	sub	sp, #12
    2aca:	4681      	mov	r9, r0
    2acc:	4692      	mov	sl, r2
    2ace:	4698      	mov	r8, r3
	uint32_t wr_start_addr = dst_addr;
    2ad0:	460e      	mov	r6, r1
		block_start_addr = wr_start_addr & ~(NVMCTRL_BLOCK_SIZE - 1);
    2ad2:	f426 54ff 	bic.w	r4, r6, #8160	; 0x1fe0
    2ad6:	f024 041f 	bic.w	r4, r4, #31
		block_end_addr   = block_start_addr + NVMCTRL_BLOCK_SIZE - 1;
    2ada:	f504 53ff 	add.w	r3, r4, #8160	; 0x1fe0
    2ade:	331f      	adds	r3, #31
    2ae0:	9301      	str	r3, [sp, #4]
    2ae2:	f504 5b00 	add.w	fp, r4, #8192	; 0x2000
    2ae6:	4625      	mov	r5, r4
			_flash_read(device, block_start_addr + i * NVMCTRL_PAGE_SIZE, tmp_buffer[i], NVMCTRL_PAGE_SIZE);
    2ae8:	1b2a      	subs	r2, r5, r4
    2aea:	a902      	add	r1, sp, #8
    2aec:	440a      	add	r2, r1
    2aee:	f44f 7300 	mov.w	r3, #512	; 0x200
    2af2:	4629      	mov	r1, r5
    2af4:	4648      	mov	r0, r9
    2af6:	4f24      	ldr	r7, [pc, #144]	; (2b88 <_flash_write+0xc8>)
    2af8:	f505 7500 	add.w	r5, r5, #512	; 0x200
    2afc:	47b8      	blx	r7
		for (i = 0; i < NVMCTRL_BLOCK_PAGES; i++) {
    2afe:	455d      	cmp	r5, fp
    2b00:	d1f2      	bne.n	2ae8 <_flash_write+0x28>
		j = (wr_start_addr - block_start_addr) / NVMCTRL_PAGE_SIZE;
    2b02:	1b33      	subs	r3, r6, r4
		while ((wr_start_addr <= block_end_addr) && (length > 0)) {
    2b04:	4652      	mov	r2, sl
		j = (wr_start_addr - block_start_addr) / NVMCTRL_PAGE_SIZE;
    2b06:	0a59      	lsrs	r1, r3, #9
    2b08:	1ab6      	subs	r6, r6, r2
    2b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
		while ((wr_start_addr <= block_end_addr) && (length > 0)) {
    2b0e:	9801      	ldr	r0, [sp, #4]
    2b10:	eb06 0b02 	add.w	fp, r6, r2
    2b14:	4558      	cmp	r0, fp
    2b16:	4692      	mov	sl, r2
    2b18:	d302      	bcc.n	2b20 <_flash_write+0x60>
    2b1a:	f1b8 0f00 	cmp.w	r8, #0
    2b1e:	d123      	bne.n	2b68 <_flash_write+0xa8>
		_flash_erase_block(device->hw, block_start_addr);
    2b20:	f8d9 3010 	ldr.w	r3, [r9, #16]
    2b24:	8a5a      	ldrh	r2, [r3, #18]
	while (!hri_nvmctrl_get_STATUS_READY_bit(hw)) {
    2b26:	07d2      	lsls	r2, r2, #31
    2b28:	d5fc      	bpl.n	2b24 <_flash_write+0x64>
	((Nvmctrl *)hw)->CTRLB.reg = data;
    2b2a:	f24a 5201 	movw	r2, #42241	; 0xa501
	((Nvmctrl *)hw)->ADDR.reg = data;
    2b2e:	615c      	str	r4, [r3, #20]
	((Nvmctrl *)hw)->CTRLB.reg = data;
    2b30:	4626      	mov	r6, r4
    2b32:	809a      	strh	r2, [r3, #4]
			_flash_program(device->hw, block_start_addr + i * NVMCTRL_PAGE_SIZE, tmp_buffer[i], NVMCTRL_PAGE_SIZE);
    2b34:	1b32      	subs	r2, r6, r4
    2b36:	a902      	add	r1, sp, #8
    2b38:	440a      	add	r2, r1
    2b3a:	f44f 7300 	mov.w	r3, #512	; 0x200
    2b3e:	4631      	mov	r1, r6
    2b40:	f8d9 0010 	ldr.w	r0, [r9, #16]
    2b44:	4f11      	ldr	r7, [pc, #68]	; (2b8c <_flash_write+0xcc>)
    2b46:	f506 7600 	add.w	r6, r6, #512	; 0x200
    2b4a:	47b8      	blx	r7
		for (i = 0; i < NVMCTRL_BLOCK_PAGES; i++) {
    2b4c:	42ae      	cmp	r6, r5
    2b4e:	d1f1      	bne.n	2b34 <_flash_write+0x74>
	} while (block_end_addr < (wr_start_addr + length - 1));
    2b50:	eb08 030b 	add.w	r3, r8, fp
    2b54:	9a01      	ldr	r2, [sp, #4]
    2b56:	3b01      	subs	r3, #1
    2b58:	429a      	cmp	r2, r3
    2b5a:	465e      	mov	r6, fp
    2b5c:	d3b9      	bcc.n	2ad2 <_flash_write+0x12>
}
    2b5e:	f50d 5d00 	add.w	sp, sp, #8192	; 0x2000
    2b62:	b003      	add	sp, #12
    2b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tmp_buffer[j][k] = *buffer;
    2b68:	a802      	add	r0, sp, #8
    2b6a:	eb00 2041 	add.w	r0, r0, r1, lsl #9
    2b6e:	f89a e000 	ldrb.w	lr, [sl]
    2b72:	f800 e003 	strb.w	lr, [r0, r3]
			k                = (k + 1) % NVMCTRL_PAGE_SIZE;
    2b76:	3301      	adds	r3, #1
    2b78:	f3c3 0308 	ubfx	r3, r3, #0, #9
    2b7c:	3201      	adds	r2, #1
			if (0 == k) {
    2b7e:	b903      	cbnz	r3, 2b82 <_flash_write+0xc2>
				j++;
    2b80:	3101      	adds	r1, #1
			length--;
    2b82:	f108 38ff 	add.w	r8, r8, #4294967295
    2b86:	e7c2      	b.n	2b0e <_flash_write+0x4e>
    2b88:	00002aa3 	.word	0x00002aa3
    2b8c:	000029dd 	.word	0x000029dd

00002b90 <_flash_append>:
{
    2b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t page_start_addr = dst_addr & ~(NVMCTRL_PAGE_SIZE - 1);
    2b94:	f421 75ff 	bic.w	r5, r1, #510	; 0x1fe
    2b98:	f025 0501 	bic.w	r5, r5, #1
	if (dst_addr != page_start_addr) {
    2b9c:	42a9      	cmp	r1, r5
{
    2b9e:	4607      	mov	r7, r0
    2ba0:	4690      	mov	r8, r2
    2ba2:	461e      	mov	r6, r3
	if (dst_addr != page_start_addr) {
    2ba4:	d012      	beq.n	2bcc <_flash_append+0x3c>
		size = min(length, NVMCTRL_PAGE_SIZE - (dst_addr - page_start_addr));
    2ba6:	1a6c      	subs	r4, r5, r1
    2ba8:	f504 7400 	add.w	r4, r4, #512	; 0x200
    2bac:	429c      	cmp	r4, r3
    2bae:	bf28      	it	cs
    2bb0:	461c      	movcs	r4, r3
		_flash_program(device->hw, dst_addr, buffer, size);
    2bb2:	b2a3      	uxth	r3, r4
    2bb4:	6900      	ldr	r0, [r0, #16]
    2bb6:	f8df 903c 	ldr.w	r9, [pc, #60]	; 2bf4 <_flash_append+0x64>
    2bba:	47c8      	blx	r9
		page_start_addr += NVMCTRL_PAGE_SIZE;
    2bbc:	f505 7500 	add.w	r5, r5, #512	; 0x200
		_flash_program(device->hw, page_start_addr, buffer + offset, size);
    2bc0:	f8df a030 	ldr.w	sl, [pc, #48]	; 2bf4 <_flash_append+0x64>
	while (offset < length) {
    2bc4:	42b4      	cmp	r4, r6
    2bc6:	d303      	bcc.n	2bd0 <_flash_append+0x40>
}
    2bc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32_t offset = 0;
    2bcc:	2400      	movs	r4, #0
    2bce:	e7f7      	b.n	2bc0 <_flash_append+0x30>
		size = min(length - offset, NVMCTRL_PAGE_SIZE);
    2bd0:	eba6 0904 	sub.w	r9, r6, r4
    2bd4:	f5b9 7f00 	cmp.w	r9, #512	; 0x200
    2bd8:	bf28      	it	cs
    2bda:	f44f 7900 	movcs.w	r9, #512	; 0x200
		_flash_program(device->hw, page_start_addr, buffer + offset, size);
    2bde:	eb08 0204 	add.w	r2, r8, r4
    2be2:	4629      	mov	r1, r5
    2be4:	fa1f f389 	uxth.w	r3, r9
    2be8:	6938      	ldr	r0, [r7, #16]
    2bea:	47d0      	blx	sl
		page_start_addr += NVMCTRL_PAGE_SIZE;
    2bec:	f505 7500 	add.w	r5, r5, #512	; 0x200
		offset += size;
    2bf0:	444c      	add	r4, r9
    2bf2:	e7e7      	b.n	2bc4 <_flash_append+0x34>
    2bf4:	000029dd 	.word	0x000029dd

00002bf8 <_flash_erase>:
{
    2bf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	block_start_addr = dst_addr & ~(NVMCTRL_BLOCK_SIZE - 1);
    2bfc:	f421 54ff 	bic.w	r4, r1, #8160	; 0x1fe0
{
    2c00:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
    2c04:	460e      	mov	r6, r1
    2c06:	4607      	mov	r7, r0
    2c08:	4615      	mov	r5, r2
	block_start_addr = dst_addr & ~(NVMCTRL_BLOCK_SIZE - 1);
    2c0a:	f024 041f 	bic.w	r4, r4, #31
	memset(tmp_buffer, 0xFF, NVMCTRL_PAGE_SIZE);
    2c0e:	f44f 7200 	mov.w	r2, #512	; 0x200
    2c12:	21ff      	movs	r1, #255	; 0xff
    2c14:	4668      	mov	r0, sp
    2c16:	4b20      	ldr	r3, [pc, #128]	; (2c98 <_flash_erase+0xa0>)
    2c18:	4798      	blx	r3
	if (dst_addr != block_start_addr) {
    2c1a:	42a6      	cmp	r6, r4
    2c1c:	d11d      	bne.n	2c5a <_flash_erase+0x62>
{
    2c1e:	4622      	mov	r2, r4
    2c20:	462b      	mov	r3, r5
    2c22:	f24a 5001 	movw	r0, #42241	; 0xa501
	while (page_nums >= NVMCTRL_BLOCK_PAGES) {
    2c26:	2b0f      	cmp	r3, #15
    2c28:	d82c      	bhi.n	2c84 <_flash_erase+0x8c>
    2c2a:	092b      	lsrs	r3, r5, #4
	if (page_nums != 0) {
    2c2c:	ebb5 1503 	subs.w	r5, r5, r3, lsl #4
    2c30:	eb04 2443 	add.w	r4, r4, r3, lsl #9
    2c34:	d00d      	beq.n	2c52 <_flash_erase+0x5a>
			_flash_write(device, block_start_addr, tmp_buffer, NVMCTRL_PAGE_SIZE);
    2c36:	f8df 8064 	ldr.w	r8, [pc, #100]	; 2c9c <_flash_erase+0xa4>
    2c3a:	2600      	movs	r6, #0
    2c3c:	4621      	mov	r1, r4
    2c3e:	f44f 7300 	mov.w	r3, #512	; 0x200
    2c42:	466a      	mov	r2, sp
    2c44:	4638      	mov	r0, r7
		for (i = 0; i < page_nums; i++) {
    2c46:	3601      	adds	r6, #1
			_flash_write(device, block_start_addr, tmp_buffer, NVMCTRL_PAGE_SIZE);
    2c48:	47c0      	blx	r8
		for (i = 0; i < page_nums; i++) {
    2c4a:	42b5      	cmp	r5, r6
			block_start_addr += NVMCTRL_PAGE_SIZE;
    2c4c:	f504 7400 	add.w	r4, r4, #512	; 0x200
		for (i = 0; i < page_nums; i++) {
    2c50:	d1f4      	bne.n	2c3c <_flash_erase+0x44>
}
    2c52:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
    2c56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			_flash_write(device, dst_addr, tmp_buffer, NVMCTRL_PAGE_SIZE);
    2c5a:	f8df 9040 	ldr.w	r9, [pc, #64]	; 2c9c <_flash_erase+0xa4>
		block_start_addr += NVMCTRL_BLOCK_SIZE;
    2c5e:	f504 5400 	add.w	r4, r4, #8192	; 0x2000
    2c62:	f506 58f0 	add.w	r8, r6, #7680	; 0x1e00
			_flash_write(device, dst_addr, tmp_buffer, NVMCTRL_PAGE_SIZE);
    2c66:	f44f 7300 	mov.w	r3, #512	; 0x200
    2c6a:	466a      	mov	r2, sp
    2c6c:	4631      	mov	r1, r6
    2c6e:	4638      	mov	r0, r7
    2c70:	47c8      	blx	r9
			if (--page_nums == 0) {
    2c72:	3d01      	subs	r5, #1
    2c74:	d0ed      	beq.n	2c52 <_flash_erase+0x5a>
			dst_addr += NVMCTRL_PAGE_SIZE;
    2c76:	f506 7600 	add.w	r6, r6, #512	; 0x200
			if (dst_addr == block_start_addr) {
    2c7a:	42b4      	cmp	r4, r6
    2c7c:	d0cf      	beq.n	2c1e <_flash_erase+0x26>
		for (i = 0; i < NVMCTRL_BLOCK_PAGES - 1; i++) {
    2c7e:	4546      	cmp	r6, r8
    2c80:	d1f1      	bne.n	2c66 <_flash_erase+0x6e>
    2c82:	e7cc      	b.n	2c1e <_flash_erase+0x26>
		_flash_erase_block(device->hw, block_start_addr);
    2c84:	6939      	ldr	r1, [r7, #16]
	return (((Nvmctrl *)hw)->STATUS.reg & NVMCTRL_STATUS_READY) >> NVMCTRL_STATUS_READY_Pos;
    2c86:	8a4e      	ldrh	r6, [r1, #18]
	while (!hri_nvmctrl_get_STATUS_READY_bit(hw)) {
    2c88:	07f6      	lsls	r6, r6, #31
    2c8a:	d5fc      	bpl.n	2c86 <_flash_erase+0x8e>
	((Nvmctrl *)hw)->ADDR.reg = data;
    2c8c:	614a      	str	r2, [r1, #20]
		page_nums -= NVMCTRL_BLOCK_PAGES;
    2c8e:	3b10      	subs	r3, #16
	((Nvmctrl *)hw)->CTRLB.reg = data;
    2c90:	8088      	strh	r0, [r1, #4]
		block_start_addr += NVMCTRL_PAGE_SIZE;
    2c92:	f502 7200 	add.w	r2, r2, #512	; 0x200
    2c96:	e7c6      	b.n	2c26 <_flash_erase+0x2e>
    2c98:	0000b385 	.word	0x0000b385
    2c9c:	00002ac1 	.word	0x00002ac1

00002ca0 <_flash_is_locked>:
	return !(hri_nvmctrl_get_RUNLOCK_reg(device->hw, 1 << region_id));
    2ca0:	6903      	ldr	r3, [r0, #16]
    2ca2:	f3c1 318f 	ubfx	r1, r1, #14, #16

static inline hri_nvmctrl_runlock_reg_t hri_nvmctrl_get_RUNLOCK_reg(const void *const         hw,
                                                                    hri_nvmctrl_runlock_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Nvmctrl *)hw)->RUNLOCK.reg;
    2ca6:	699a      	ldr	r2, [r3, #24]
    2ca8:	2301      	movs	r3, #1
    2caa:	fa03 f101 	lsl.w	r1, r3, r1
    2cae:	4211      	tst	r1, r2
}
    2cb0:	bf0c      	ite	eq
    2cb2:	4618      	moveq	r0, r3
    2cb4:	2000      	movne	r0, #0
    2cb6:	4770      	bx	lr

00002cb8 <NVMCTRL_1_Handler>:
/**
 * \internal NVM 1 interrupt handler
 */
void NVMCTRL_1_Handler(void)
{
	_nvm_interrupt_handler(_nvm_dev);
    2cb8:	4b09      	ldr	r3, [pc, #36]	; (2ce0 <NVMCTRL_1_Handler+0x28>)
    2cba:	6818      	ldr	r0, [r3, #0]
	void *const hw = device->hw;
    2cbc:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
    2cbe:	8a1a      	ldrh	r2, [r3, #16]
	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
    2cc0:	07d2      	lsls	r2, r2, #31
    2cc2:	d504      	bpl.n	2cce <NVMCTRL_1_Handler+0x16>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
    2cc4:	2201      	movs	r2, #1
    2cc6:	821a      	strh	r2, [r3, #16]
		if (NULL != device->flash_cb.ready_cb) {
    2cc8:	6803      	ldr	r3, [r0, #0]
		if (NULL != device->flash_cb.error_cb) {
    2cca:	b143      	cbz	r3, 2cde <NVMCTRL_1_Handler+0x26>
			device->flash_cb.error_cb(device);
    2ccc:	4718      	bx	r3
	return ((Nvmctrl *)hw)->INTFLAG.reg;
    2cce:	8a1a      	ldrh	r2, [r3, #16]
    2cd0:	b292      	uxth	r2, r2
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
    2cd2:	b122      	cbz	r2, 2cde <NVMCTRL_1_Handler+0x26>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    2cd4:	f240 225e 	movw	r2, #606	; 0x25e
    2cd8:	821a      	strh	r2, [r3, #16]
		if (NULL != device->flash_cb.error_cb) {
    2cda:	6843      	ldr	r3, [r0, #4]
    2cdc:	e7f5      	b.n	2cca <NVMCTRL_1_Handler+0x12>
    2cde:	4770      	bx	lr
    2ce0:	20007044 	.word	0x20007044

00002ce4 <NVMCTRL_0_Handler>:
    2ce4:	4b00      	ldr	r3, [pc, #0]	; (2ce8 <NVMCTRL_0_Handler+0x4>)
    2ce6:	4718      	bx	r3
    2ce8:	00002cb9 	.word	0x00002cb9

00002cec <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    2cec:	4b03      	ldr	r3, [pc, #12]	; (2cfc <_osc32kctrl_init_sources+0x10>)
    2cee:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    2cf0:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    2cf4:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    2cf6:	2201      	movs	r2, #1
    2cf8:	741a      	strb	r2, [r3, #16]
    2cfa:	4770      	bx	lr
    2cfc:	40001400 	.word	0x40001400

00002d00 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    2d00:	4770      	bx	lr
	...

00002d04 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    2d04:	4a26      	ldr	r2, [pc, #152]	; (2da0 <_oscctrl_init_referenced_generators+0x9c>)
    2d06:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    2d08:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    2d0c:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    2d10:	6213      	str	r3, [r2, #32]
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    2d12:	4b24      	ldr	r3, [pc, #144]	; (2da4 <_oscctrl_init_referenced_generators+0xa0>)
    2d14:	2200      	movs	r2, #0
    2d16:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    2d18:	4a23      	ldr	r2, [pc, #140]	; (2da8 <_oscctrl_init_referenced_generators+0xa4>)
    2d1a:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2d1c:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    2d20:	f012 0210 	ands.w	r2, r2, #16
    2d24:	d1fa      	bne.n	2d1c <_oscctrl_init_referenced_generators+0x18>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    2d26:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2d2a:	4a1e      	ldr	r2, [pc, #120]	; (2da4 <_oscctrl_init_referenced_generators+0xa0>)
    2d2c:	4613      	mov	r3, r2
    2d2e:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    2d32:	0749      	lsls	r1, r1, #29
    2d34:	d4fb      	bmi.n	2d2e <_oscctrl_init_referenced_generators+0x2a>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    2d36:	2142      	movs	r1, #66	; 0x42
    2d38:	7711      	strb	r1, [r2, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2d3a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    2d3e:	0792      	lsls	r2, r2, #30
    2d40:	d4fb      	bmi.n	2d3a <_oscctrl_init_referenced_generators+0x36>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    2d42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    2d44:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2d46:	4b17      	ldr	r3, [pc, #92]	; (2da4 <_oscctrl_init_referenced_generators+0xa0>)
    2d48:	461a      	mov	r2, r3
    2d4a:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    2d4e:	0708      	lsls	r0, r1, #28
    2d50:	d4fb      	bmi.n	2d4a <_oscctrl_init_referenced_generators+0x46>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    2d52:	21aa      	movs	r1, #170	; 0xaa
    2d54:	f883 1020 	strb.w	r1, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2d58:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    2d5c:	0759      	lsls	r1, r3, #29
    2d5e:	d4fb      	bmi.n	2d58 <_oscctrl_init_referenced_generators+0x54>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    2d60:	f892 3020 	ldrb.w	r3, [r2, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    2d64:	f013 0f01 	tst.w	r3, #1
    2d68:	4b0e      	ldr	r3, [pc, #56]	; (2da4 <_oscctrl_init_referenced_generators+0xa0>)
    2d6a:	d014      	beq.n	2d96 <_oscctrl_init_referenced_generators+0x92>
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    2d6c:	691a      	ldr	r2, [r3, #16]
	tmp &= mask;
    2d6e:	f402 6210 	and.w	r2, r2, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    2d72:	f5b2 6f10 	cmp.w	r2, #2304	; 0x900
    2d76:	d1f9      	bne.n	2d6c <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLA.reg |= OSCCTRL_DFLLCTRLA_ONDEMAND;
    2d78:	7f1a      	ldrb	r2, [r3, #28]
    2d7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    2d7e:	771a      	strb	r2, [r3, #28]
	return tmp;
}

static inline hri_gclk_syncbusy_reg_t hri_gclk_read_SYNCBUSY_reg(const void *const hw)
{
	return ((Gclk *)hw)->SYNCBUSY.reg;
    2d80:	4a07      	ldr	r2, [pc, #28]	; (2da0 <_oscctrl_init_referenced_generators+0x9c>)
    2d82:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    2d84:	2b00      	cmp	r3, #0
    2d86:	d1fc      	bne.n	2d82 <_oscctrl_init_referenced_generators+0x7e>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    2d88:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    2d8a:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    2d8e:	f043 0306 	orr.w	r3, r3, #6
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    2d92:	6213      	str	r3, [r2, #32]
    2d94:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    2d96:	691a      	ldr	r2, [r3, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    2d98:	05d2      	lsls	r2, r2, #23
    2d9a:	d5fc      	bpl.n	2d96 <_oscctrl_init_referenced_generators+0x92>
    2d9c:	e7ec      	b.n	2d78 <_oscctrl_init_referenced_generators+0x74>
    2d9e:	bf00      	nop
    2da0:	40001c00 	.word	0x40001c00
    2da4:	40001000 	.word	0x40001000
    2da8:	7c80bb80 	.word	0x7c80bb80

00002dac <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    2dac:	b507      	push	{r0, r1, r2, lr}
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    2dae:	4a0c      	ldr	r2, [pc, #48]	; (2de0 <RAMECC_Handler+0x34>)
    2db0:	7893      	ldrb	r3, [r2, #2]
    2db2:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    2db4:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    2db6:	9b01      	ldr	r3, [sp, #4]
    2db8:	0799      	lsls	r1, r3, #30
    2dba:	d507      	bpl.n	2dcc <RAMECC_Handler+0x20>
    2dbc:	4b09      	ldr	r3, [pc, #36]	; (2de4 <RAMECC_Handler+0x38>)
    2dbe:	681b      	ldr	r3, [r3, #0]
    2dc0:	b123      	cbz	r3, 2dcc <RAMECC_Handler+0x20>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    2dc2:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    2dc4:	4798      	blx	r3
	} else {
		return;
	}
}
    2dc6:	b003      	add	sp, #12
    2dc8:	f85d fb04 	ldr.w	pc, [sp], #4
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    2dcc:	9b01      	ldr	r3, [sp, #4]
    2dce:	07db      	lsls	r3, r3, #31
    2dd0:	d5f9      	bpl.n	2dc6 <RAMECC_Handler+0x1a>
    2dd2:	4b04      	ldr	r3, [pc, #16]	; (2de4 <RAMECC_Handler+0x38>)
    2dd4:	685b      	ldr	r3, [r3, #4]
    2dd6:	2b00      	cmp	r3, #0
    2dd8:	d0f5      	beq.n	2dc6 <RAMECC_Handler+0x1a>
    2dda:	4a01      	ldr	r2, [pc, #4]	; (2de0 <RAMECC_Handler+0x34>)
    2ddc:	e7f1      	b.n	2dc2 <RAMECC_Handler+0x16>
    2dde:	bf00      	nop
    2de0:	41020000 	.word	0x41020000
    2de4:	20007580 	.word	0x20007580

00002de8 <__NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
    2de8:	2800      	cmp	r0, #0
    2dea:	db08      	blt.n	2dfe <__NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2dec:	0942      	lsrs	r2, r0, #5
    2dee:	2301      	movs	r3, #1
    2df0:	f000 001f 	and.w	r0, r0, #31
    2df4:	fa03 f000 	lsl.w	r0, r3, r0
    2df8:	4b01      	ldr	r3, [pc, #4]	; (2e00 <__NVIC_EnableIRQ+0x18>)
    2dfa:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
    2dfe:	4770      	bx	lr
    2e00:	e000e100 	.word	0xe000e100

00002e04 <__NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
    2e04:	2800      	cmp	r0, #0
    2e06:	db0d      	blt.n	2e24 <__NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2e08:	0943      	lsrs	r3, r0, #5
    2e0a:	2201      	movs	r2, #1
    2e0c:	f000 001f 	and.w	r0, r0, #31
    2e10:	fa02 f000 	lsl.w	r0, r2, r0
    2e14:	3320      	adds	r3, #32
    2e16:	4a04      	ldr	r2, [pc, #16]	; (2e28 <__NVIC_DisableIRQ+0x24>)
    2e18:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2e1c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2e20:	f3bf 8f6f 	isb	sy
    2e24:	4770      	bx	lr
    2e26:	bf00      	nop
    2e28:	e000e100 	.word	0xe000e100

00002e2c <__NVIC_ClearPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
    2e2c:	2800      	cmp	r0, #0
    2e2e:	db09      	blt.n	2e44 <__NVIC_ClearPendingIRQ+0x18>
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2e30:	0943      	lsrs	r3, r0, #5
    2e32:	2201      	movs	r2, #1
    2e34:	f000 001f 	and.w	r0, r0, #31
    2e38:	fa02 f000 	lsl.w	r0, r2, r0
    2e3c:	3360      	adds	r3, #96	; 0x60
    2e3e:	4a02      	ldr	r2, [pc, #8]	; (2e48 <__NVIC_ClearPendingIRQ+0x1c>)
    2e40:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    2e44:	4770      	bx	lr
    2e46:	bf00      	nop
    2e48:	e000e100 	.word	0xe000e100

00002e4c <hri_sercomusart_wait_for_sync>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
}

static inline void hri_sercomusart_wait_for_sync(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2e4c:	69c3      	ldr	r3, [r0, #28]
    2e4e:	420b      	tst	r3, r1
    2e50:	d1fc      	bne.n	2e4c <hri_sercomusart_wait_for_sync>
	};
}
    2e52:	4770      	bx	lr

00002e54 <hri_sercomusart_clear_CTRLA_ENABLE_bit>:
	((Sercom *)hw)->USART.CTRLA.reg = tmp;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomusart_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    2e54:	b508      	push	{r3, lr}
	SERCOM_CRITICAL_SECTION_ENTER();
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    2e56:	2103      	movs	r1, #3
    2e58:	4b03      	ldr	r3, [pc, #12]	; (2e68 <hri_sercomusart_clear_CTRLA_ENABLE_bit+0x14>)
    2e5a:	4798      	blx	r3
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    2e5c:	6803      	ldr	r3, [r0, #0]
    2e5e:	f023 0302 	bic.w	r3, r3, #2
    2e62:	6003      	str	r3, [r0, #0]
    2e64:	bd08      	pop	{r3, pc}
    2e66:	bf00      	nop
    2e68:	00002e4d 	.word	0x00002e4d

00002e6c <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    2e6c:	b570      	push	{r4, r5, r6, lr}
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    2e6e:	4d0b      	ldr	r5, [pc, #44]	; (2e9c <_sercom_get_hardware_index+0x30>)
{
    2e70:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    2e72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    2e74:	b088      	sub	sp, #32
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    2e76:	466c      	mov	r4, sp
    2e78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2e7a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2e7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2e82:	2000      	movs	r0, #0
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    2e84:	f85d 3020 	ldr.w	r3, [sp, r0, lsl #2]
    2e88:	42b3      	cmp	r3, r6
    2e8a:	d102      	bne.n	2e92 <_sercom_get_hardware_index+0x26>
			return i;
    2e8c:	b2c0      	uxtb	r0, r0
		}
	}
	return 0;
}
    2e8e:	b008      	add	sp, #32
    2e90:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2e92:	3001      	adds	r0, #1
    2e94:	2808      	cmp	r0, #8
    2e96:	d1f5      	bne.n	2e84 <_sercom_get_hardware_index+0x18>
	return 0;
    2e98:	2000      	movs	r0, #0
    2e9a:	e7f8      	b.n	2e8e <_sercom_get_hardware_index+0x22>
    2e9c:	0000c6f0 	.word	0x0000c6f0

00002ea0 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    2ea0:	b510      	push	{r4, lr}
	void *hw = device->hw;
    2ea2:	6984      	ldr	r4, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    2ea4:	7e22      	ldrb	r2, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    2ea6:	07d1      	lsls	r1, r2, #31
{
    2ea8:	4603      	mov	r3, r0
	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    2eaa:	d508      	bpl.n	2ebe <_sercom_usart_interrupt_handler+0x1e>
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    2eac:	7da2      	ldrb	r2, [r4, #22]
    2eae:	07d2      	lsls	r2, r2, #31
    2eb0:	d505      	bpl.n	2ebe <_sercom_usart_interrupt_handler+0x1e>
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    2eb2:	2201      	movs	r2, #1
    2eb4:	7522      	strb	r2, [r4, #20]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
    2eb6:	6803      	ldr	r3, [r0, #0]
		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
		status = hri_sercomusart_read_STATUS_reg(hw);
		hri_sercomusart_clear_STATUS_reg(hw, status);
	}
}
    2eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		device->usart_cb.tx_byte_sent(device);
    2ebc:	4718      	bx	r3
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    2ebe:	7e22      	ldrb	r2, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    2ec0:	0790      	lsls	r0, r2, #30
    2ec2:	d509      	bpl.n	2ed8 <_sercom_usart_interrupt_handler+0x38>
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    2ec4:	7da2      	ldrb	r2, [r4, #22]
    2ec6:	0791      	lsls	r1, r2, #30
    2ec8:	d506      	bpl.n	2ed8 <_sercom_usart_interrupt_handler+0x38>
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    2eca:	2202      	movs	r2, #2
    2ecc:	7522      	strb	r2, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    2ece:	689a      	ldr	r2, [r3, #8]
    2ed0:	4618      	mov	r0, r3
}
    2ed2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		device->usart_cb.tx_done_cb(device);
    2ed6:	4710      	bx	r2
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    2ed8:	7e22      	ldrb	r2, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    2eda:	0752      	lsls	r2, r2, #29
    2edc:	d50d      	bpl.n	2efa <_sercom_usart_interrupt_handler+0x5a>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    2ede:	8b62      	ldrh	r2, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    2ee0:	f002 0237 	and.w	r2, r2, #55	; 0x37
    2ee4:	b112      	cbz	r2, 2eec <_sercom_usart_interrupt_handler+0x4c>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    2ee6:	23ff      	movs	r3, #255	; 0xff
    2ee8:	8363      	strh	r3, [r4, #26]
    2eea:	bd10      	pop	{r4, pc}
	return ((Sercom *)hw)->USART.DATA.reg;
    2eec:	6aa1      	ldr	r1, [r4, #40]	; 0x28
		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    2eee:	685a      	ldr	r2, [r3, #4]
    2ef0:	b2c9      	uxtb	r1, r1
    2ef2:	4618      	mov	r0, r3
}
    2ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    2ef8:	4710      	bx	r2
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    2efa:	7e22      	ldrb	r2, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    2efc:	09d2      	lsrs	r2, r2, #7
    2efe:	d0f4      	beq.n	2eea <_sercom_usart_interrupt_handler+0x4a>
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    2f00:	2280      	movs	r2, #128	; 0x80
    2f02:	7622      	strb	r2, [r4, #24]
		device->usart_cb.error_cb(device);
    2f04:	68da      	ldr	r2, [r3, #12]
    2f06:	4618      	mov	r0, r3
    2f08:	4790      	blx	r2
	return ((Sercom *)hw)->USART.STATUS.reg;
    2f0a:	8b63      	ldrh	r3, [r4, #26]
    2f0c:	b29b      	uxth	r3, r3
    2f0e:	e7eb      	b.n	2ee8 <_sercom_usart_interrupt_handler+0x48>

00002f10 <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM0) {
    2f10:	4b05      	ldr	r3, [pc, #20]	; (2f28 <_sercom_init_irq_param+0x18>)
    2f12:	4298      	cmp	r0, r3
    2f14:	d102      	bne.n	2f1c <_sercom_init_irq_param+0xc>
		_sercom0_dev = (struct _usart_async_device *)dev;
    2f16:	4b05      	ldr	r3, [pc, #20]	; (2f2c <_sercom_init_irq_param+0x1c>)
    2f18:	6019      	str	r1, [r3, #0]
    2f1a:	4770      	bx	lr
	}

	if (hw == SERCOM5) {
    2f1c:	4b04      	ldr	r3, [pc, #16]	; (2f30 <_sercom_init_irq_param+0x20>)
    2f1e:	4298      	cmp	r0, r3
		_sercom5_dev = (struct _usart_async_device *)dev;
    2f20:	bf04      	itt	eq
    2f22:	4b02      	ldreq	r3, [pc, #8]	; (2f2c <_sercom_init_irq_param+0x1c>)
    2f24:	6059      	streq	r1, [r3, #4]
    2f26:	4770      	bx	lr
    2f28:	40003000 	.word	0x40003000
    2f2c:	20007048 	.word	0x20007048
    2f30:	43000400 	.word	0x43000400

00002f34 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    2f34:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    2f36:	4b03      	ldr	r3, [pc, #12]	; (2f44 <_sercom_get_irq_num+0x10>)
    2f38:	4798      	blx	r3
    2f3a:	0080      	lsls	r0, r0, #2
    2f3c:	302e      	adds	r0, #46	; 0x2e
}
    2f3e:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    2f42:	bd08      	pop	{r3, pc}
    2f44:	00002e6d 	.word	0x00002e6d

00002f48 <_usart_init>:
{
    2f48:	b538      	push	{r3, r4, r5, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    2f4a:	4b1c      	ldr	r3, [pc, #112]	; (2fbc <_usart_init+0x74>)
{
    2f4c:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    2f4e:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    2f50:	b138      	cbz	r0, 2f62 <_usart_init+0x1a>
    2f52:	2805      	cmp	r0, #5
    2f54:	d030      	beq.n	2fb8 <_usart_init+0x70>
	ASSERT(false);
    2f56:	f240 226d 	movw	r2, #621	; 0x26d
    2f5a:	4919      	ldr	r1, [pc, #100]	; (2fc0 <_usart_init+0x78>)
    2f5c:	4b19      	ldr	r3, [pc, #100]	; (2fc4 <_usart_init+0x7c>)
    2f5e:	2000      	movs	r0, #0
    2f60:	4798      	blx	r3
	return 0;
    2f62:	2200      	movs	r2, #0
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    2f64:	69e3      	ldr	r3, [r4, #28]
    2f66:	4d18      	ldr	r5, [pc, #96]	; (2fc8 <_usart_init+0x80>)
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    2f68:	f013 0f01 	tst.w	r3, #1
    2f6c:	d10a      	bne.n	2f84 <_usart_init+0x3c>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    2f6e:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    2f70:	079b      	lsls	r3, r3, #30
    2f72:	d505      	bpl.n	2f80 <_usart_init+0x38>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
    2f74:	4620      	mov	r0, r4
    2f76:	4b15      	ldr	r3, [pc, #84]	; (2fcc <_usart_init+0x84>)
    2f78:	4798      	blx	r3
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
    2f7a:	2102      	movs	r1, #2
    2f7c:	4620      	mov	r0, r4
    2f7e:	47a8      	blx	r5
	((Sercom *)hw)->USART.CTRLA.reg = data;
    2f80:	2305      	movs	r3, #5
    2f82:	6023      	str	r3, [r4, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);
    2f84:	4620      	mov	r0, r4
    2f86:	2101      	movs	r1, #1
    2f88:	47a8      	blx	r5
    2f8a:	4b11      	ldr	r3, [pc, #68]	; (2fd0 <_usart_init+0x88>)
    2f8c:	6023      	str	r3, [r4, #0]
	((Sercom *)hw)->USART.CTRLB.reg = data;
    2f8e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    2f92:	6063      	str	r3, [r4, #4]
	((Sercom *)hw)->USART.CTRLC.reg = data;
    2f94:	4b0f      	ldr	r3, [pc, #60]	; (2fd4 <_usart_init+0x8c>)
    2f96:	60a3      	str	r3, [r4, #8]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    2f98:	480f      	ldr	r0, [pc, #60]	; (2fd8 <_usart_init+0x90>)
	((Sercom *)hw)->USART.BAUD.reg = data;
    2f9a:	f24f 43bc 	movw	r3, #62652	; 0xf4bc
    2f9e:	81a3      	strh	r3, [r4, #12]
    2fa0:	2318      	movs	r3, #24
    2fa2:	fb03 0202 	mla	r2, r3, r2, r0
}
    2fa6:	2000      	movs	r0, #0
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    2fa8:	f892 3033 	ldrb.w	r3, [r2, #51]	; 0x33
	((Sercom *)hw)->USART.RXPL.reg = data;
    2fac:	73a3      	strb	r3, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    2fae:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    2fb2:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
    2fb6:	bd38      	pop	{r3, r4, r5, pc}
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    2fb8:	2201      	movs	r2, #1
    2fba:	e7d3      	b.n	2f64 <_usart_init+0x1c>
    2fbc:	00002e6d 	.word	0x00002e6d
    2fc0:	0000c769 	.word	0x0000c769
    2fc4:	00002009 	.word	0x00002009
    2fc8:	00002e4d 	.word	0x00002e4d
    2fcc:	00002e55 	.word	0x00002e55
    2fd0:	40100084 	.word	0x40100084
    2fd4:	00700002 	.word	0x00700002
    2fd8:	0000c6f0 	.word	0x0000c6f0

00002fdc <_usart_async_init>:
{
    2fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	ASSERT(device);
    2fe0:	4606      	mov	r6, r0
    2fe2:	3000      	adds	r0, #0
    2fe4:	bf18      	it	ne
    2fe6:	2001      	movne	r0, #1
{
    2fe8:	460c      	mov	r4, r1
	ASSERT(device);
    2fea:	22cd      	movs	r2, #205	; 0xcd
    2fec:	4912      	ldr	r1, [pc, #72]	; (3038 <_usart_async_init+0x5c>)
    2fee:	4b13      	ldr	r3, [pc, #76]	; (303c <_usart_async_init+0x60>)
    2ff0:	4798      	blx	r3
	init_status = _usart_init(hw);
    2ff2:	4620      	mov	r0, r4
    2ff4:	4b12      	ldr	r3, [pc, #72]	; (3040 <_usart_async_init+0x64>)
    2ff6:	4798      	blx	r3
	if (init_status) {
    2ff8:	4605      	mov	r5, r0
    2ffa:	b9c8      	cbnz	r0, 3030 <_usart_async_init+0x54>
	device->hw = hw;
    2ffc:	61b4      	str	r4, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
    2ffe:	4631      	mov	r1, r6
    3000:	4620      	mov	r0, r4
    3002:	4b10      	ldr	r3, [pc, #64]	; (3044 <_usart_async_init+0x68>)
		NVIC_DisableIRQ((IRQn_Type)irq);
    3004:	f8df 804c 	ldr.w	r8, [pc, #76]	; 3054 <_usart_async_init+0x78>
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    3008:	4f0f      	ldr	r7, [pc, #60]	; (3048 <_usart_async_init+0x6c>)
		NVIC_EnableIRQ((IRQn_Type)irq);
    300a:	4e10      	ldr	r6, [pc, #64]	; (304c <_usart_async_init+0x70>)
	_sercom_init_irq_param(hw, (void *)device);
    300c:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    300e:	4620      	mov	r0, r4
    3010:	4b0f      	ldr	r3, [pc, #60]	; (3050 <_usart_async_init+0x74>)
    3012:	4798      	blx	r3
	for (uint32_t i = 0; i < 4; i++) {
    3014:	462c      	mov	r4, r5
	uint8_t irq = _sercom_get_irq_num(hw);
    3016:	4681      	mov	r9, r0
		NVIC_DisableIRQ((IRQn_Type)irq);
    3018:	eb09 0104 	add.w	r1, r9, r4
    301c:	b2c9      	uxtb	r1, r1
    301e:	4608      	mov	r0, r1
    3020:	47c0      	blx	r8
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    3022:	4608      	mov	r0, r1
    3024:	47b8      	blx	r7
	for (uint32_t i = 0; i < 4; i++) {
    3026:	3401      	adds	r4, #1
		NVIC_EnableIRQ((IRQn_Type)irq);
    3028:	4608      	mov	r0, r1
    302a:	47b0      	blx	r6
	for (uint32_t i = 0; i < 4; i++) {
    302c:	2c04      	cmp	r4, #4
    302e:	d1f3      	bne.n	3018 <_usart_async_init+0x3c>
}
    3030:	4628      	mov	r0, r5
    3032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3036:	bf00      	nop
    3038:	0000c769 	.word	0x0000c769
    303c:	00002009 	.word	0x00002009
    3040:	00002f49 	.word	0x00002f49
    3044:	00002f11 	.word	0x00002f11
    3048:	00002e2d 	.word	0x00002e2d
    304c:	00002de9 	.word	0x00002de9
    3050:	00002f35 	.word	0x00002f35
    3054:	00002e05 	.word	0x00002e05

00003058 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    3058:	6982      	ldr	r2, [r0, #24]
{
    305a:	b508      	push	{r3, lr}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    305c:	2103      	movs	r1, #3
    305e:	4b04      	ldr	r3, [pc, #16]	; (3070 <_usart_async_enable+0x18>)
    3060:	4610      	mov	r0, r2
    3062:	4798      	blx	r3
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    3064:	6813      	ldr	r3, [r2, #0]
    3066:	f043 0302 	orr.w	r3, r3, #2
    306a:	6013      	str	r3, [r2, #0]
    306c:	bd08      	pop	{r3, pc}
    306e:	bf00      	nop
    3070:	00002e4d 	.word	0x00002e4d

00003074 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    3074:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.DATA.reg = data;
    3076:	6299      	str	r1, [r3, #40]	; 0x28
    3078:	4770      	bx	lr

0000307a <_usart_async_is_byte_sent>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    307a:	6983      	ldr	r3, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    307c:	7e18      	ldrb	r0, [r3, #24]
}
    307e:	f000 0001 	and.w	r0, r0, #1
    3082:	4770      	bx	lr

00003084 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    3084:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    3086:	2201      	movs	r2, #1
    3088:	759a      	strb	r2, [r3, #22]
    308a:	4770      	bx	lr

0000308c <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    308c:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    308e:	2202      	movs	r2, #2
    3090:	759a      	strb	r2, [r3, #22]
    3092:	4770      	bx	lr

00003094 <_usart_async_set_irq_state>:
{
    3094:	b570      	push	{r4, r5, r6, lr}
	ASSERT(device);
    3096:	4605      	mov	r5, r0
    3098:	3000      	adds	r0, #0
{
    309a:	460e      	mov	r6, r1
	ASSERT(device);
    309c:	bf18      	it	ne
    309e:	2001      	movne	r0, #1
{
    30a0:	4614      	mov	r4, r2
	ASSERT(device);
    30a2:	490f      	ldr	r1, [pc, #60]	; (30e0 <_usart_async_set_irq_state+0x4c>)
    30a4:	4b0f      	ldr	r3, [pc, #60]	; (30e4 <_usart_async_set_irq_state+0x50>)
    30a6:	f240 222d 	movw	r2, #557	; 0x22d
    30aa:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    30ac:	f016 0ffd 	tst.w	r6, #253	; 0xfd
    30b0:	d109      	bne.n	30c6 <_usart_async_set_irq_state+0x32>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    30b2:	69ab      	ldr	r3, [r5, #24]
    30b4:	2101      	movs	r1, #1
    30b6:	2202      	movs	r2, #2
	if (value == 0x0) {
    30b8:	b914      	cbnz	r4, 30c0 <_usart_async_set_irq_state+0x2c>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    30ba:	7519      	strb	r1, [r3, #20]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    30bc:	751a      	strb	r2, [r3, #20]
    30be:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    30c0:	7599      	strb	r1, [r3, #22]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    30c2:	759a      	strb	r2, [r3, #22]
    30c4:	bd70      	pop	{r4, r5, r6, pc}
	} else if (USART_ASYNC_RX_DONE == type) {
    30c6:	2e01      	cmp	r6, #1
    30c8:	d104      	bne.n	30d4 <_usart_async_set_irq_state+0x40>
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    30ca:	69ab      	ldr	r3, [r5, #24]
    30cc:	2204      	movs	r2, #4
	if (value == 0x0) {
    30ce:	2c00      	cmp	r4, #0
    30d0:	d1f7      	bne.n	30c2 <_usart_async_set_irq_state+0x2e>
    30d2:	e7f3      	b.n	30bc <_usart_async_set_irq_state+0x28>
	} else if (USART_ASYNC_ERROR == type) {
    30d4:	2e03      	cmp	r6, #3
    30d6:	d1f5      	bne.n	30c4 <_usart_async_set_irq_state+0x30>
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    30d8:	69ab      	ldr	r3, [r5, #24]
    30da:	2280      	movs	r2, #128	; 0x80
    30dc:	e7f7      	b.n	30ce <_usart_async_set_irq_state+0x3a>
    30de:	bf00      	nop
    30e0:	0000c769 	.word	0x0000c769
    30e4:	00002009 	.word	0x00002009

000030e8 <SERCOM0_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM0_3_Handler(void)
{
	_sercom_usart_interrupt_handler(_sercom0_dev);
    30e8:	4b01      	ldr	r3, [pc, #4]	; (30f0 <SERCOM0_3_Handler+0x8>)
    30ea:	6818      	ldr	r0, [r3, #0]
    30ec:	4b01      	ldr	r3, [pc, #4]	; (30f4 <SERCOM0_3_Handler+0xc>)
    30ee:	4718      	bx	r3
    30f0:	20007048 	.word	0x20007048
    30f4:	00002ea1 	.word	0x00002ea1

000030f8 <SERCOM0_2_Handler>:
    30f8:	4b00      	ldr	r3, [pc, #0]	; (30fc <SERCOM0_2_Handler+0x4>)
    30fa:	4718      	bx	r3
    30fc:	000030e9 	.word	0x000030e9

00003100 <SERCOM0_1_Handler>:
    3100:	4b00      	ldr	r3, [pc, #0]	; (3104 <SERCOM0_1_Handler+0x4>)
    3102:	4718      	bx	r3
    3104:	000030e9 	.word	0x000030e9

00003108 <SERCOM0_0_Handler>:
    3108:	4b00      	ldr	r3, [pc, #0]	; (310c <SERCOM0_0_Handler+0x4>)
    310a:	4718      	bx	r3
    310c:	000030e9 	.word	0x000030e9

00003110 <SERCOM5_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_3_Handler(void)
{
	_sercom_usart_interrupt_handler(_sercom5_dev);
    3110:	4b01      	ldr	r3, [pc, #4]	; (3118 <SERCOM5_3_Handler+0x8>)
    3112:	6858      	ldr	r0, [r3, #4]
    3114:	4b01      	ldr	r3, [pc, #4]	; (311c <SERCOM5_3_Handler+0xc>)
    3116:	4718      	bx	r3
    3118:	20007048 	.word	0x20007048
    311c:	00002ea1 	.word	0x00002ea1

00003120 <SERCOM5_2_Handler>:
    3120:	4b00      	ldr	r3, [pc, #0]	; (3124 <SERCOM5_2_Handler+0x4>)
    3122:	4718      	bx	r3
    3124:	00003111 	.word	0x00003111

00003128 <SERCOM5_1_Handler>:
    3128:	4b00      	ldr	r3, [pc, #0]	; (312c <SERCOM5_1_Handler+0x4>)
    312a:	4718      	bx	r3
    312c:	00003111 	.word	0x00003111

00003130 <SERCOM5_0_Handler>:
    3130:	4b00      	ldr	r3, [pc, #0]	; (3134 <SERCOM5_0_Handler+0x4>)
    3132:	4718      	bx	r3
    3134:	00003111 	.word	0x00003111

00003138 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    3138:	4b03      	ldr	r3, [pc, #12]	; (3148 <_delay_init+0x10>)
    313a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    313e:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    3140:	2205      	movs	r2, #5
    3142:	601a      	str	r2, [r3, #0]
    3144:	4770      	bx	lr
    3146:	bf00      	nop
    3148:	e000e010 	.word	0xe000e010

0000314c <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    314c:	0e0b      	lsrs	r3, r1, #24
    314e:	4a0c      	ldr	r2, [pc, #48]	; (3180 <_delay_cycles+0x34>)
{
    3150:	b530      	push	{r4, r5, lr}
	uint8_t  n   = cycles >> 24;
    3152:	b2d8      	uxtb	r0, r3
	uint32_t buf = cycles;

	while (n--) {
		SysTick->LOAD = 0xFFFFFF;
    3154:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
	while (n--) {
    3158:	3801      	subs	r0, #1
    315a:	b2c0      	uxtb	r0, r0
    315c:	28ff      	cmp	r0, #255	; 0xff
    315e:	d108      	bne.n	3172 <_delay_cycles+0x26>
    3160:	eba3 6303 	sub.w	r3, r3, r3, lsl #24
    3164:	4419      	add	r1, r3
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    3166:	6051      	str	r1, [r2, #4]
	SysTick->VAL  = buf;
    3168:	6091      	str	r1, [r2, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    316a:	6813      	ldr	r3, [r2, #0]
    316c:	03db      	lsls	r3, r3, #15
    316e:	d5fc      	bpl.n	316a <_delay_cycles+0x1e>
		;
}
    3170:	bd30      	pop	{r4, r5, pc}
		SysTick->LOAD = 0xFFFFFF;
    3172:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    3174:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    3176:	6815      	ldr	r5, [r2, #0]
    3178:	03ed      	lsls	r5, r5, #15
    317a:	d5fc      	bpl.n	3176 <_delay_cycles+0x2a>
    317c:	e7ec      	b.n	3158 <_delay_cycles+0xc>
    317e:	bf00      	nop
    3180:	e000e010 	.word	0xe000e010

00003184 <__NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
    3184:	2800      	cmp	r0, #0
    3186:	db0d      	blt.n	31a4 <__NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3188:	0943      	lsrs	r3, r0, #5
    318a:	2201      	movs	r2, #1
    318c:	f000 001f 	and.w	r0, r0, #31
    3190:	fa02 f000 	lsl.w	r0, r2, r0
    3194:	3320      	adds	r3, #32
    3196:	4a04      	ldr	r2, [pc, #16]	; (31a8 <__NVIC_DisableIRQ+0x24>)
    3198:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    319c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    31a0:	f3bf 8f6f 	isb	sy
    31a4:	4770      	bx	lr
    31a6:	bf00      	nop
    31a8:	e000e100 	.word	0xe000e100

000031ac <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    31ac:	b570      	push	{r4, r5, r6, lr}
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    31ae:	4d10      	ldr	r5, [pc, #64]	; (31f0 <get_tc_index+0x44>)
{
    31b0:	4606      	mov	r6, r0
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    31b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    31b4:	b088      	sub	sp, #32
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    31b6:	466c      	mov	r4, sp
    31b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    31ba:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    31be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    31c2:	2000      	movs	r0, #0
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    31c4:	f85d 3020 	ldr.w	r3, [sp, r0, lsl #2]
    31c8:	42b3      	cmp	r3, r6
    31ca:	d102      	bne.n	31d2 <get_tc_index+0x26>
		if (_tcs[i].number == index) {
    31cc:	b930      	cbnz	r0, 31dc <get_tc_index+0x30>
}
    31ce:	b008      	add	sp, #32
    31d0:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    31d2:	3001      	adds	r0, #1
    31d4:	2808      	cmp	r0, #8
    31d6:	d1f5      	bne.n	31c4 <get_tc_index+0x18>
			return i;
    31d8:	2000      	movs	r0, #0
    31da:	e7f8      	b.n	31ce <get_tc_index+0x22>
	ASSERT(false);
    31dc:	2000      	movs	r0, #0
    31de:	f44f 72a0 	mov.w	r2, #320	; 0x140
    31e2:	4904      	ldr	r1, [pc, #16]	; (31f4 <get_tc_index+0x48>)
    31e4:	4b04      	ldr	r3, [pc, #16]	; (31f8 <get_tc_index+0x4c>)
    31e6:	4798      	blx	r3
	return -1;
    31e8:	f04f 30ff 	mov.w	r0, #4294967295
    31ec:	e7ef      	b.n	31ce <get_tc_index+0x22>
    31ee:	bf00      	nop
    31f0:	0000c784 	.word	0x0000c784
    31f4:	0000c7b8 	.word	0x0000c7b8
    31f8:	00002009 	.word	0x00002009

000031fc <hri_tc_clear_CTRLA_ENABLE_bit>:
typedef uint8_t  hri_tc_status_reg_t;
typedef uint8_t  hri_tc_wave_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    31fc:	6903      	ldr	r3, [r0, #16]
    31fe:	079b      	lsls	r3, r3, #30
    3200:	d1fc      	bne.n	31fc <hri_tc_clear_CTRLA_ENABLE_bit>

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	((Tc *)hw)->COUNT8.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    3202:	6803      	ldr	r3, [r0, #0]
    3204:	f023 0302 	bic.w	r3, r3, #2
    3208:	6003      	str	r3, [r0, #0]
    320a:	4770      	bx	lr

0000320c <_timer_init>:
{
    320c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    320e:	4606      	mov	r6, r0
	int8_t i = get_tc_index(hw);
    3210:	4b30      	ldr	r3, [pc, #192]	; (32d4 <_timer_init+0xc8>)
    3212:	4608      	mov	r0, r1
{
    3214:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    3216:	4798      	blx	r3
	ASSERT(ARRAY_SIZE(_tcs));
    3218:	492f      	ldr	r1, [pc, #188]	; (32d8 <_timer_init+0xcc>)
    321a:	4b30      	ldr	r3, [pc, #192]	; (32dc <_timer_init+0xd0>)
	device->hw = hw;
    321c:	60f4      	str	r4, [r6, #12]
	int8_t i = get_tc_index(hw);
    321e:	4605      	mov	r5, r0
	ASSERT(ARRAY_SIZE(_tcs));
    3220:	228e      	movs	r2, #142	; 0x8e
    3222:	2001      	movs	r0, #1
    3224:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    3226:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    3228:	07d9      	lsls	r1, r3, #31
    322a:	d404      	bmi.n	3236 <_timer_init+0x2a>
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    322c:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    322e:	079a      	lsls	r2, r3, #30
    3230:	d43a      	bmi.n	32a8 <_timer_init+0x9c>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CTRLA.reg = data;
    3232:	2301      	movs	r3, #1
    3234:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3236:	6921      	ldr	r1, [r4, #16]
    3238:	f011 0101 	ands.w	r1, r1, #1
    323c:	d1fb      	bne.n	3236 <_timer_init+0x2a>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    323e:	4828      	ldr	r0, [pc, #160]	; (32e0 <_timer_init+0xd4>)
    3240:	2314      	movs	r3, #20
    3242:	fb03 0305 	mla	r3, r3, r5, r0
    3246:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    3248:	f893 702a 	ldrb.w	r7, [r3, #42]	; 0x2a
	((Tc *)hw)->COUNT8.CTRLA.reg = data;
    324c:	6022      	str	r2, [r4, #0]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.DBGCTRL.reg = data;
    324e:	73e7      	strb	r7, [r4, #15]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    3250:	f002 020c 	and.w	r2, r2, #12
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    3254:	8d1f      	ldrh	r7, [r3, #40]	; 0x28
	((Tc *)hw)->COUNT8.EVCTRL.reg = data;
    3256:	80e7      	strh	r7, [r4, #6]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    3258:	2a08      	cmp	r2, #8
	((Tc *)hw)->COUNT8.WAVE.reg = data;
    325a:	f04f 0701 	mov.w	r7, #1
    325e:	7327      	strb	r7, [r4, #12]
    3260:	d129      	bne.n	32b6 <_timer_init+0xaa>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    3262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    3264:	61e3      	str	r3, [r4, #28]
    3266:	6221      	str	r1, [r4, #32]
	((Tc *)hw)->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    3268:	2301      	movs	r3, #1
    326a:	7263      	strb	r3, [r4, #9]
	if (hw == TC0) {
    326c:	4b1d      	ldr	r3, [pc, #116]	; (32e4 <_timer_init+0xd8>)
    326e:	429c      	cmp	r4, r3
		_tc0_dev = (struct _timer_device *)dev;
    3270:	bf04      	itt	eq
    3272:	4b1d      	ldreq	r3, [pc, #116]	; (32e8 <_timer_init+0xdc>)
    3274:	601e      	streq	r6, [r3, #0]
	NVIC_DisableIRQ(_tcs[i].irq);
    3276:	2314      	movs	r3, #20
    3278:	fb03 0505 	mla	r5, r3, r5, r0
    327c:	4b1b      	ldr	r3, [pc, #108]	; (32ec <_timer_init+0xe0>)
    327e:	f9b5 1022 	ldrsh.w	r1, [r5, #34]	; 0x22
    3282:	4608      	mov	r0, r1
    3284:	4798      	blx	r3
  if ((int32_t)(IRQn) >= 0)
    3286:	2900      	cmp	r1, #0
    3288:	db0c      	blt.n	32a4 <_timer_init+0x98>
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    328a:	f001 021f 	and.w	r2, r1, #31
    328e:	0949      	lsrs	r1, r1, #5
    3290:	0089      	lsls	r1, r1, #2
    3292:	f101 4160 	add.w	r1, r1, #3758096384	; 0xe0000000
    3296:	f501 4161 	add.w	r1, r1, #57600	; 0xe100
    329a:	2301      	movs	r3, #1
    329c:	4093      	lsls	r3, r2
    329e:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    32a2:	600b      	str	r3, [r1, #0]
}
    32a4:	2000      	movs	r0, #0
    32a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    32a8:	4620      	mov	r0, r4
    32aa:	4b11      	ldr	r3, [pc, #68]	; (32f0 <_timer_init+0xe4>)
    32ac:	4798      	blx	r3
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    32ae:	6923      	ldr	r3, [r4, #16]
    32b0:	079b      	lsls	r3, r3, #30
    32b2:	d4fc      	bmi.n	32ae <_timer_init+0xa2>
    32b4:	e7bd      	b.n	3232 <_timer_init+0x26>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    32b6:	b91a      	cbnz	r2, 32c0 <_timer_init+0xb4>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    32b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    32ba:	83a3      	strh	r3, [r4, #28]
    32bc:	83e2      	strh	r2, [r4, #30]
    32be:	e7d3      	b.n	3268 <_timer_init+0x5c>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    32c0:	2a04      	cmp	r2, #4
    32c2:	d1d1      	bne.n	3268 <_timer_init+0x5c>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    32c4:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
		hri_tc_write_PER_reg(hw, _tcs[i].per);
    32c8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tc_cc8_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    32cc:	7722      	strb	r2, [r4, #28]
    32ce:	7761      	strb	r1, [r4, #29]
	((Tc *)hw)->COUNT8.PER.reg = data;
    32d0:	76e3      	strb	r3, [r4, #27]
    32d2:	e7c9      	b.n	3268 <_timer_init+0x5c>
    32d4:	000031ad 	.word	0x000031ad
    32d8:	0000c7b8 	.word	0x0000c7b8
    32dc:	00002009 	.word	0x00002009
    32e0:	0000c784 	.word	0x0000c784
    32e4:	40003800 	.word	0x40003800
    32e8:	20007050 	.word	0x20007050
    32ec:	00003185 	.word	0x00003185
    32f0:	000031fd 	.word	0x000031fd

000032f4 <_timer_start>:
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    32f4:	68c3      	ldr	r3, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    32f6:	691a      	ldr	r2, [r3, #16]
    32f8:	0792      	lsls	r2, r2, #30
    32fa:	d1fc      	bne.n	32f6 <_timer_start+0x2>
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    32fc:	681a      	ldr	r2, [r3, #0]
    32fe:	f042 0202 	orr.w	r2, r2, #2
    3302:	601a      	str	r2, [r3, #0]
    3304:	4770      	bx	lr

00003306 <_timer_is_started>:
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    3306:	68c3      	ldr	r3, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3308:	691a      	ldr	r2, [r3, #16]
    330a:	0792      	lsls	r2, r2, #30
    330c:	d1fc      	bne.n	3308 <_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    330e:	6818      	ldr	r0, [r3, #0]
}
    3310:	f3c0 0040 	ubfx	r0, r0, #1, #1
    3314:	4770      	bx	lr

00003316 <_tc_get_timer>:
}
    3316:	2000      	movs	r0, #0
    3318:	4770      	bx	lr
	...

0000331c <_timer_set_irq>:
{
    331c:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    331e:	4b0a      	ldr	r3, [pc, #40]	; (3348 <_timer_set_irq+0x2c>)
    3320:	68c0      	ldr	r0, [r0, #12]
    3322:	4798      	blx	r3
	ASSERT(ARRAY_SIZE(_tcs));
    3324:	f240 1213 	movw	r2, #275	; 0x113
	int8_t      i  = get_tc_index(hw);
    3328:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    332a:	4b08      	ldr	r3, [pc, #32]	; (334c <_timer_set_irq+0x30>)
    332c:	4908      	ldr	r1, [pc, #32]	; (3350 <_timer_set_irq+0x34>)
    332e:	2001      	movs	r0, #1
    3330:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    3332:	4b08      	ldr	r3, [pc, #32]	; (3354 <_timer_set_irq+0x38>)
    3334:	2214      	movs	r2, #20
    3336:	fb02 3404 	mla	r4, r2, r4, r3
    333a:	4b07      	ldr	r3, [pc, #28]	; (3358 <_timer_set_irq+0x3c>)
    333c:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
}
    3340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_irq_set(_tcs[i].irq);
    3344:	4718      	bx	r3
    3346:	bf00      	nop
    3348:	000031ad 	.word	0x000031ad
    334c:	00002009 	.word	0x00002009
    3350:	0000c7b8 	.word	0x0000c7b8
    3354:	0000c784 	.word	0x0000c784
    3358:	00002351 	.word	0x00002351

0000335c <TC0_Handler>:
	tc_interrupt_handler(_tc0_dev);
    335c:	4b05      	ldr	r3, [pc, #20]	; (3374 <TC0_Handler+0x18>)
    335e:	6818      	ldr	r0, [r3, #0]
	void *const hw = device->hw;
    3360:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT8.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    3362:	7a9a      	ldrb	r2, [r3, #10]
	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    3364:	07d2      	lsls	r2, r2, #31
    3366:	d503      	bpl.n	3370 <TC0_Handler+0x14>
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    3368:	2201      	movs	r2, #1
    336a:	729a      	strb	r2, [r3, #10]
		device->timer_cb.period_expired(device);
    336c:	6803      	ldr	r3, [r0, #0]
    336e:	4718      	bx	r3
    3370:	4770      	bx	lr
    3372:	bf00      	nop
    3374:	20007050 	.word	0x20007050

00003378 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    3378:	2000      	movs	r0, #0
    337a:	4770      	bx	lr

0000337c <_usb_d_dev_wait_dfll_rdy>:
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    337c:	4b07      	ldr	r3, [pc, #28]	; (339c <_usb_d_dev_wait_dfll_rdy+0x20>)
    337e:	f893 2020 	ldrb.w	r2, [r3, #32]
/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    3382:	07d1      	lsls	r1, r2, #31
    3384:	d506      	bpl.n	3394 <_usb_d_dev_wait_dfll_rdy+0x18>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    3386:	691a      	ldr	r2, [r3, #16]
	tmp &= mask;
    3388:	f402 6210 	and.w	r2, r2, #2304	; 0x900
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    338c:	f5b2 6f10 	cmp.w	r2, #2304	; 0x900
    3390:	d1f9      	bne.n	3386 <_usb_d_dev_wait_dfll_rdy+0xa>
    3392:	4770      	bx	lr
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    3394:	691a      	ldr	r2, [r3, #16]
		       != (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    3396:	05d2      	lsls	r2, r2, #23
    3398:	d5fc      	bpl.n	3394 <_usb_d_dev_wait_dfll_rdy+0x18>
    339a:	4770      	bx	lr
    339c:	40001000 	.word	0x40001000

000033a0 <_usb_d_dev_ept>:
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    33a0:	b110      	cbz	r0, 33a8 <_usb_d_dev_ept+0x8>
    33a2:	b109      	cbz	r1, 33a8 <_usb_d_dev_ept+0x8>
    33a4:	3002      	adds	r0, #2
    33a6:	b2c0      	uxtb	r0, r0
	return &dev_inst.ep[ep_index];
    33a8:	2314      	movs	r3, #20
    33aa:	fb00 3003 	mla	r0, r0, r3, r3
}
    33ae:	4b01      	ldr	r3, [pc, #4]	; (33b4 <_usb_d_dev_ept+0x14>)
    33b0:	4418      	add	r0, r3
    33b2:	4770      	bx	lr
    33b4:	20007054 	.word	0x20007054

000033b8 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    33b8:	b430      	push	{r4, r5}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    33ba:	7cc1      	ldrb	r1, [r0, #19]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    33bc:	7c85      	ldrb	r5, [r0, #18]

	if (!is_ctrl) {
    33be:	f001 0307 	and.w	r3, r1, #7
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    33c2:	f005 020f 	and.w	r2, r5, #15
	if (!is_ctrl) {
    33c6:	2b01      	cmp	r3, #1
    33c8:	ea4f 1442 	mov.w	r4, r2, lsl #5
    33cc:	f102 0308 	add.w	r3, r2, #8
    33d0:	d00a      	beq.n	33e8 <_usb_d_dev_handle_setup+0x30>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    33d2:	015a      	lsls	r2, r3, #5
    33d4:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    33d8:	f104 4382 	add.w	r3, r4, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    33dc:	2110      	movs	r1, #16
    33de:	71d1      	strb	r1, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    33e0:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
}
    33e4:	bc30      	pop	{r4, r5}
    33e6:	4770      	bx	lr
	if (_usb_d_dev_ep_is_busy(ept)) {
    33e8:	f011 0f40 	tst.w	r1, #64	; 0x40
    33ec:	d00b      	beq.n	3406 <_usb_d_dev_handle_setup+0x4e>
    33ee:	0152      	lsls	r2, r2, #5
		ept->flags.bits.is_busy = 0;
    33f0:	f36f 1186 	bfc	r1, #6, #1
    33f4:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    33f8:	74c1      	strb	r1, [r0, #19]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    33fa:	2180      	movs	r1, #128	; 0x80
    33fc:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3400:	2140      	movs	r1, #64	; 0x40
    3402:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105
	ept->flags.bits.is_stalled = 0;
    3406:	7cc2      	ldrb	r2, [r0, #19]
    3408:	f36f 02c3 	bfc	r2, #3, #1
    340c:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    340e:	4a0a      	ldr	r2, [pc, #40]	; (3438 <_usb_d_dev_handle_setup+0x80>)
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3410:	015b      	lsls	r3, r3, #5
    3412:	1911      	adds	r1, r2, r4
    3414:	2000      	movs	r0, #0
    3416:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    341a:	f881 00d2 	strb.w	r0, [r1, #210]	; 0xd2
    341e:	f881 00e2 	strb.w	r0, [r1, #226]	; 0xe2
    3422:	216f      	movs	r1, #111	; 0x6f
    3424:	71d9      	strb	r1, [r3, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    3426:	f104 4382 	add.w	r3, r4, #1090519040	; 0x41000000
	dev_inst.ep_callbacks.setup(ept->ep);
    342a:	4628      	mov	r0, r5
    342c:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
    3430:	6893      	ldr	r3, [r2, #8]
}
    3432:	bc30      	pop	{r4, r5}
	dev_inst.ep_callbacks.setup(ept->ep);
    3434:	4718      	bx	r3
    3436:	bf00      	nop
    3438:	20007054 	.word	0x20007054

0000343c <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    343c:	4602      	mov	r2, r0
	uint8_t epn = USB_EP_GET_N(ept->ep);
    343e:	7c80      	ldrb	r0, [r0, #18]
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    3440:	2320      	movs	r3, #32
    3442:	fa03 f101 	lsl.w	r1, r3, r1
    3446:	f000 030f 	and.w	r3, r0, #15
    344a:	015b      	lsls	r3, r3, #5
    344c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    3450:	b2c9      	uxtb	r1, r1
    3452:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    3456:	4b02      	ldr	r3, [pc, #8]	; (3460 <_usb_d_dev_handle_stall+0x24>)
    3458:	6892      	ldr	r2, [r2, #8]
    345a:	691b      	ldr	r3, [r3, #16]
    345c:	2101      	movs	r1, #1
    345e:	4718      	bx	r3
    3460:	20007054 	.word	0x20007054

00003464 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    3464:	4602      	mov	r2, r0
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    3466:	7c80      	ldrb	r0, [r0, #18]
    3468:	28ff      	cmp	r0, #255	; 0xff
    346a:	d00a      	beq.n	3482 <_usb_d_dev_trans_done+0x1e>
    346c:	7cd3      	ldrb	r3, [r2, #19]
    346e:	f013 0f40 	tst.w	r3, #64	; 0x40
    3472:	d006      	beq.n	3482 <_usb_d_dev_trans_done+0x1e>
		return;
	}
	ept->flags.bits.is_busy = 0;
    3474:	f36f 1386 	bfc	r3, #6, #1
    3478:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    347a:	4b02      	ldr	r3, [pc, #8]	; (3484 <_usb_d_dev_trans_done+0x20>)
    347c:	6892      	ldr	r2, [r2, #8]
    347e:	691b      	ldr	r3, [r3, #16]
    3480:	4718      	bx	r3
    3482:	4770      	bx	lr
    3484:	20007054 	.word	0x20007054

00003488 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    3488:	b477      	push	{r0, r1, r2, r4, r5, r6}
	uint8_t epn = USB_EP_GET_N(ept->ep);
    348a:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    348c:	2425      	movs	r4, #37	; 0x25
    348e:	f88d 4004 	strb.w	r4, [sp, #4]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    3492:	2bff      	cmp	r3, #255	; 0xff
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    3494:	f04f 044a 	mov.w	r4, #74	; 0x4a
    3498:	f88d 4005 	strb.w	r4, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    349c:	d021      	beq.n	34e2 <_usb_d_dev_trans_stop+0x5a>
    349e:	7cc4      	ldrb	r4, [r0, #19]
    34a0:	0664      	lsls	r4, r4, #25
    34a2:	d51e      	bpl.n	34e2 <_usb_d_dev_trans_stop+0x5a>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    34a4:	f003 030f 	and.w	r3, r3, #15
    34a8:	f103 0408 	add.w	r4, r3, #8
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    34ac:	0165      	lsls	r5, r4, #5
    34ae:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
		return;
	}
	/* Stop transfer */
	if (dir) {
    34b2:	b199      	cbz	r1, 34dc <_usb_d_dev_trans_stop+0x54>
    34b4:	2680      	movs	r6, #128	; 0x80
    34b6:	712e      	strb	r6, [r5, #4]
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    34b8:	ad02      	add	r5, sp, #8
    34ba:	440d      	add	r5, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    34bc:	0164      	lsls	r4, r4, #5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    34be:	015b      	lsls	r3, r3, #5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    34c0:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    34c4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    34c8:	f815 1c04 	ldrb.w	r1, [r5, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    34cc:	71e1      	strb	r1, [r4, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    34ce:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    34d2:	4b05      	ldr	r3, [pc, #20]	; (34e8 <_usb_d_dev_trans_stop+0x60>)
    34d4:	4611      	mov	r1, r2
}
    34d6:	b003      	add	sp, #12
    34d8:	bc70      	pop	{r4, r5, r6}
	_usb_d_dev_trans_done(ept, code);
    34da:	4718      	bx	r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    34dc:	2640      	movs	r6, #64	; 0x40
    34de:	716e      	strb	r6, [r5, #5]
    34e0:	e7ea      	b.n	34b8 <_usb_d_dev_trans_stop+0x30>
}
    34e2:	b003      	add	sp, #12
    34e4:	bc70      	pop	{r4, r5, r6}
    34e6:	4770      	bx	lr
    34e8:	00003465 	.word	0x00003465

000034ec <_usb_d_dev_handle_trfail>:
{
    34ec:	b4f3      	push	{r0, r1, r4, r5, r6, r7}
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    34ee:	7c86      	ldrb	r6, [r0, #18]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    34f0:	2304      	movs	r3, #4
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    34f2:	f006 060f 	and.w	r6, r6, #15
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    34f6:	f88d 3004 	strb.w	r3, [sp, #4]
    34fa:	2308      	movs	r3, #8
    34fc:	f88d 3005 	strb.w	r3, [sp, #5]
    3500:	18f3      	adds	r3, r6, r3

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    3502:	015a      	lsls	r2, r3, #5
    3504:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    3508:	0175      	lsls	r5, r6, #5
    350a:	7812      	ldrb	r2, [r2, #0]
	uint8_t            eptype
    350c:	b339      	cbz	r1, 355e <_usb_d_dev_handle_trfail+0x72>
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    350e:	f3c2 1202 	ubfx	r2, r2, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
    3512:	4c2e      	ldr	r4, [pc, #184]	; (35cc <_usb_d_dev_handle_trfail+0xe0>)
    3514:	eb05 1501 	add.w	r5, r5, r1, lsl #4
    3518:	4425      	add	r5, r4
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    351a:	2a02      	cmp	r2, #2
	st.reg = bank[bank_n].STATUS_BK.reg;
    351c:	7aac      	ldrb	r4, [r5, #10]
    351e:	aa02      	add	r2, sp, #8
    3520:	eb02 0701 	add.w	r7, r2, r1
    3524:	b2e4      	uxtb	r4, r4
    3526:	ea4f 1246 	mov.w	r2, r6, lsl #5
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    352a:	d11b      	bne.n	3564 <_usb_d_dev_handle_trfail+0x78>
    352c:	f014 0f01 	tst.w	r4, #1
    3530:	d018      	beq.n	3564 <_usb_d_dev_handle_trfail+0x78>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    3532:	7aac      	ldrb	r4, [r5, #10]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3534:	015b      	lsls	r3, r3, #5
    3536:	f36f 0400 	bfc	r4, #0, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    353a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    353e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    3542:	72ac      	strb	r4, [r5, #10]
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    3544:	3100      	adds	r1, #0
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    3546:	f817 4c04 	ldrb.w	r4, [r7, #-4]
    354a:	71dc      	strb	r4, [r3, #7]
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    354c:	bf18      	it	ne
    354e:	2101      	movne	r1, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    3550:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
    3554:	2204      	movs	r2, #4
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    3556:	4b1e      	ldr	r3, [pc, #120]	; (35d0 <_usb_d_dev_handle_trfail+0xe4>)
}
    3558:	b002      	add	sp, #8
    355a:	bcf0      	pop	{r4, r5, r6, r7}
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    355c:	4718      	bx	r3
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    355e:	f002 0207 	and.w	r2, r2, #7
    3562:	e7d6      	b.n	3512 <_usb_d_dev_handle_trfail+0x26>
	} else if (st.bit.ERRORFLOW) {
    3564:	f014 0402 	ands.w	r4, r4, #2
    3568:	d01b      	beq.n	35a2 <_usb_d_dev_handle_trfail+0xb6>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    356a:	7aac      	ldrb	r4, [r5, #10]
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    356c:	7cc6      	ldrb	r6, [r0, #19]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    356e:	015b      	lsls	r3, r3, #5
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    3570:	f36f 0441 	bfc	r4, #1, #1
    3574:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    3578:	72ac      	strb	r4, [r5, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    357a:	f817 4c04 	ldrb.w	r4, [r7, #-4]
    357e:	71dc      	strb	r4, [r3, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    3580:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    3584:	f006 0307 	and.w	r3, r6, #7
    3588:	2b01      	cmp	r3, #1
    358a:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
    358e:	d119      	bne.n	35c4 <_usb_d_dev_handle_trfail+0xd8>
    3590:	0673      	lsls	r3, r6, #25
    3592:	d517      	bpl.n	35c4 <_usb_d_dev_handle_trfail+0xd8>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    3594:	7cc3      	ldrb	r3, [r0, #19]
    3596:	09db      	lsrs	r3, r3, #7
    3598:	4299      	cmp	r1, r3
    359a:	d013      	beq.n	35c4 <_usb_d_dev_handle_trfail+0xd8>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    359c:	2200      	movs	r2, #0
    359e:	4619      	mov	r1, r3
    35a0:	e7d9      	b.n	3556 <_usb_d_dev_handle_trfail+0x6a>
	bank->STATUS_BK.reg     = 0;
    35a2:	480c      	ldr	r0, [pc, #48]	; (35d4 <_usb_d_dev_handle_trfail+0xe8>)
    35a4:	eb01 0146 	add.w	r1, r1, r6, lsl #1
    35a8:	eb00 1101 	add.w	r1, r0, r1, lsl #4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    35ac:	015b      	lsls	r3, r3, #5
    35ae:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    35b2:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    35b6:	f881 40d2 	strb.w	r4, [r1, #210]	; 0xd2
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    35ba:	f817 1c04 	ldrb.w	r1, [r7, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    35be:	71d9      	strb	r1, [r3, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    35c0:	f882 1108 	strb.w	r1, [r2, #264]	; 0x108
}
    35c4:	b002      	add	sp, #8
    35c6:	bcf0      	pop	{r4, r5, r6, r7}
    35c8:	4770      	bx	lr
    35ca:	bf00      	nop
    35cc:	2000711c 	.word	0x2000711c
    35d0:	00003489 	.word	0x00003489
    35d4:	20007054 	.word	0x20007054

000035d8 <_usb_d_dev_reset_epts>:
{
    35d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    35dc:	4c09      	ldr	r4, [pc, #36]	; (3604 <_usb_d_dev_reset_epts+0x2c>)
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    35de:	4f0a      	ldr	r7, [pc, #40]	; (3608 <_usb_d_dev_reset_epts+0x30>)
    35e0:	f104 05b4 	add.w	r5, r4, #180	; 0xb4
		dev_inst.ep[i].ep       = 0xFF;
    35e4:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    35e6:	2103      	movs	r1, #3
    35e8:	4620      	mov	r0, r4
    35ea:	47b8      	blx	r7
		dev_inst.ep[i].flags.u8 = 0;
    35ec:	2100      	movs	r1, #0
		dev_inst.ep[i].ep       = 0xFF;
    35ee:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    35f0:	74e1      	strb	r1, [r4, #19]
    35f2:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    35f4:	42ac      	cmp	r4, r5
    35f6:	d1f6      	bne.n	35e6 <_usb_d_dev_reset_epts+0xe>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    35f8:	2260      	movs	r2, #96	; 0x60
    35fa:	4804      	ldr	r0, [pc, #16]	; (360c <_usb_d_dev_reset_epts+0x34>)
    35fc:	4b04      	ldr	r3, [pc, #16]	; (3610 <_usb_d_dev_reset_epts+0x38>)
}
    35fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    3602:	4718      	bx	r3
    3604:	20007068 	.word	0x20007068
    3608:	00003465 	.word	0x00003465
    360c:	2000711c 	.word	0x2000711c
    3610:	0000b385 	.word	0x0000b385

00003614 <_usb_d_dev_in_next>:
{
    3614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3618:	4604      	mov	r4, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    361a:	7c80      	ldrb	r0, [r0, #18]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    361c:	4689      	mov	r9, r1
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    361e:	f000 080f 	and.w	r8, r0, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    3622:	2900      	cmp	r1, #0
    3624:	d05a      	beq.n	36dc <_usb_d_dev_in_next+0xc8>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    3626:	4b4c      	ldr	r3, [pc, #304]	; (3758 <_usb_d_dev_in_next+0x144>)
    3628:	eb03 1348 	add.w	r3, r3, r8, lsl #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    362c:	695e      	ldr	r6, [r3, #20]
    362e:	f3c6 060d 	ubfx	r6, r6, #0, #14
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    3632:	f8b4 e010 	ldrh.w	lr, [r4, #16]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    3636:	f894 c013 	ldrb.w	ip, [r4, #19]
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    363a:	f240 33ff 	movw	r3, #1023	; 0x3ff
    363e:	459e      	cmp	lr, r3
    3640:	bf1a      	itte	ne
    3642:	f10e 32ff 	addne.w	r2, lr, #4294967295
    3646:	b292      	uxthne	r2, r2
    3648:	4672      	moveq	r2, lr
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    364a:	f00c 0a07 	and.w	sl, ip, #7
	if (isr) {
    364e:	f1b9 0f00 	cmp.w	r9, #0
    3652:	d006      	beq.n	3662 <_usb_d_dev_in_next+0x4e>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3654:	ea4f 1348 	mov.w	r3, r8, lsl #5
    3658:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    365c:	2102      	movs	r1, #2
    365e:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	ept->trans_count += trans_count;
    3662:	68a1      	ldr	r1, [r4, #8]
	if (ept->trans_count < ept->trans_size) {
    3664:	6863      	ldr	r3, [r4, #4]
	ept->trans_count += trans_count;
    3666:	4431      	add	r1, r6
	if (ept->trans_count < ept->trans_size) {
    3668:	4299      	cmp	r1, r3
	ept->trans_count += trans_count;
    366a:	60a1      	str	r1, [r4, #8]
    366c:	ea4f 1548 	mov.w	r5, r8, lsl #5
	if (ept->trans_count < ept->trans_size) {
    3670:	d240      	bcs.n	36f4 <_usb_d_dev_in_next+0xe0>
		trans_next = ept->trans_size - ept->trans_count;
    3672:	1a5b      	subs	r3, r3, r1
		if (ept->flags.bits.use_cache) {
    3674:	f01c 0f20 	tst.w	ip, #32
		trans_next = ept->trans_size - ept->trans_count;
    3678:	b29f      	uxth	r7, r3
    367a:	4e38      	ldr	r6, [pc, #224]	; (375c <_usb_d_dev_in_next+0x148>)
    367c:	6823      	ldr	r3, [r4, #0]
		if (ept->flags.bits.use_cache) {
    367e:	d02f      	beq.n	36e0 <_usb_d_dev_in_next+0xcc>
    3680:	4577      	cmp	r7, lr
    3682:	bf28      	it	cs
    3684:	4677      	movcs	r7, lr
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    3686:	463a      	mov	r2, r7
    3688:	4419      	add	r1, r3
    368a:	68e0      	ldr	r0, [r4, #12]
    368c:	4b34      	ldr	r3, [pc, #208]	; (3760 <_usb_d_dev_in_next+0x14c>)
    368e:	4798      	blx	r3
	bank->ADDR.reg          = addr;
    3690:	1973      	adds	r3, r6, r5
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    3692:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    3694:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    3698:	1972      	adds	r2, r6, r5
    369a:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
    369e:	f367 030d 	bfi	r3, r7, #0, #14
    36a2:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    36a6:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
    36aa:	f36f 339b 	bfc	r3, #14, #14
    36ae:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
	if (!isr) {
    36b2:	f1b9 0f00 	cmp.w	r9, #0
    36b6:	d108      	bne.n	36ca <_usb_d_dev_in_next+0xb6>
			inten = USB_D_BANK1_INT_FLAGS;
    36b8:	f1ba 0f01 	cmp.w	sl, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    36bc:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    36c0:	bf0c      	ite	eq
    36c2:	234e      	moveq	r3, #78	; 0x4e
    36c4:	234a      	movne	r3, #74	; 0x4a
    36c6:	f885 3109 	strb.w	r3, [r5, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    36ca:	ea4f 1348 	mov.w	r3, r8, lsl #5
    36ce:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    36d2:	2280      	movs	r2, #128	; 0x80
    36d4:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
    36d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    36dc:	460e      	mov	r6, r1
    36de:	e7a8      	b.n	3632 <_usb_d_dev_in_next+0x1e>
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    36e0:	4419      	add	r1, r3
	bank->ADDR.reg          = addr;
    36e2:	1973      	adds	r3, r6, r5
    36e4:	f5b7 5f00 	cmp.w	r7, #8192	; 0x2000
    36e8:	bf28      	it	cs
    36ea:	f44f 5700 	movcs.w	r7, #8192	; 0x2000
    36ee:	f8c3 10d8 	str.w	r1, [r3, #216]	; 0xd8
    36f2:	e7d1      	b.n	3698 <_usb_d_dev_in_next+0x84>
	} else if (ept->flags.bits.need_zlp) {
    36f4:	f01c 0f10 	tst.w	ip, #16
    36f8:	d00e      	beq.n	3718 <_usb_d_dev_in_next+0x104>
		ept->flags.bits.need_zlp = 0;
    36fa:	7ce3      	ldrb	r3, [r4, #19]
    36fc:	f36f 1304 	bfc	r3, #4, #1
    3700:	74e3      	strb	r3, [r4, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    3702:	4b18      	ldr	r3, [pc, #96]	; (3764 <_usb_d_dev_in_next+0x150>)
    3704:	442b      	add	r3, r5
    3706:	685a      	ldr	r2, [r3, #4]
    3708:	f36f 020d 	bfc	r2, #0, #14
    370c:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    370e:	685a      	ldr	r2, [r3, #4]
    3710:	f36f 329b 	bfc	r2, #14, #14
    3714:	605a      	str	r2, [r3, #4]
    3716:	e7cc      	b.n	36b2 <_usb_d_dev_in_next+0x9e>
	if (is_ctrl) {
    3718:	f1ba 0f01 	cmp.w	sl, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    371c:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
	if (last_pkt == ept->size) {
    3720:	ea02 0206 	and.w	r2, r2, r6
    3724:	bf0c      	ite	eq
    3726:	234b      	moveq	r3, #75	; 0x4b
    3728:	234a      	movne	r3, #74	; 0x4a
    372a:	4596      	cmp	lr, r2
    372c:	f885 3108 	strb.w	r3, [r5, #264]	; 0x108
    3730:	d10c      	bne.n	374c <_usb_d_dev_in_next+0x138>
		ept->flags.bits.is_busy = 0;
    3732:	7ce3      	ldrb	r3, [r4, #19]
    3734:	f36f 1386 	bfc	r3, #6, #1
    3738:	74e3      	strb	r3, [r4, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    373a:	4b08      	ldr	r3, [pc, #32]	; (375c <_usb_d_dev_in_next+0x148>)
    373c:	68db      	ldr	r3, [r3, #12]
    373e:	4798      	blx	r3
    3740:	2800      	cmp	r0, #0
    3742:	d1c9      	bne.n	36d8 <_usb_d_dev_in_next+0xc4>
		ept->flags.bits.is_busy = 1;
    3744:	7ce3      	ldrb	r3, [r4, #19]
    3746:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    374a:	74e3      	strb	r3, [r4, #19]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    374c:	4620      	mov	r0, r4
    374e:	2100      	movs	r1, #0
    3750:	4b05      	ldr	r3, [pc, #20]	; (3768 <_usb_d_dev_in_next+0x154>)
}
    3752:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    3756:	4718      	bx	r3
    3758:	2000711c 	.word	0x2000711c
    375c:	20007054 	.word	0x20007054
    3760:	0000b33b 	.word	0x0000b33b
    3764:	2000712c 	.word	0x2000712c
    3768:	00003465 	.word	0x00003465

0000376c <_usb_d_dev_out_next>:
{
    376c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    3770:	7c86      	ldrb	r6, [r0, #18]
    3772:	f006 060f 	and.w	r6, r6, #15
{
    3776:	4604      	mov	r4, r0
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    3778:	460f      	mov	r7, r1
    377a:	0175      	lsls	r5, r6, #5
    377c:	2900      	cmp	r1, #0
    377e:	d062      	beq.n	3846 <_usb_d_dev_out_next+0xda>
    3780:	4b61      	ldr	r3, [pc, #388]	; (3908 <_usb_d_dev_out_next+0x19c>)
    3782:	442b      	add	r3, r5
    3784:	685a      	ldr	r2, [r3, #4]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    3786:	685b      	ldr	r3, [r3, #4]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    3788:	f3c2 398d 	ubfx	r9, r2, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    378c:	f3c3 0a0d 	ubfx	sl, r3, #0, #14
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    3790:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    3794:	7ce2      	ldrb	r2, [r4, #19]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    3796:	f240 33ff 	movw	r3, #1023	; 0x3ff
    379a:	4598      	cmp	r8, r3
    379c:	bf1c      	itt	ne
    379e:	f108 38ff 	addne.w	r8, r8, #4294967295
    37a2:	fa1f f888 	uxthne.w	r8, r8
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    37a6:	f002 0307 	and.w	r3, r2, #7
	uint16_t           last_pkt   = last_trans & size_mask;
    37aa:	ea0a 0b08 	and.w	fp, sl, r8
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    37ae:	9301      	str	r3, [sp, #4]
	if (isr) {
    37b0:	b12f      	cbz	r7, 37be <_usb_d_dev_out_next+0x52>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    37b2:	0173      	lsls	r3, r6, #5
    37b4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    37b8:	2101      	movs	r1, #1
    37ba:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
    37be:	0690      	lsls	r0, r2, #26
    37c0:	d50c      	bpl.n	37dc <_usb_d_dev_out_next+0x70>
    37c2:	6862      	ldr	r2, [r4, #4]
    37c4:	b152      	cbz	r2, 37dc <_usb_d_dev_out_next+0x70>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    37c6:	68a0      	ldr	r0, [r4, #8]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    37c8:	6823      	ldr	r3, [r4, #0]
    37ca:	68e1      	ldr	r1, [r4, #12]
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    37cc:	1a12      	subs	r2, r2, r0
    37ce:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    37d0:	455a      	cmp	r2, fp
    37d2:	4418      	add	r0, r3
    37d4:	bf28      	it	cs
    37d6:	465a      	movcs	r2, fp
    37d8:	4b4c      	ldr	r3, [pc, #304]	; (390c <_usb_d_dev_out_next+0x1a0>)
    37da:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    37dc:	6862      	ldr	r2, [r4, #4]
    37de:	2a00      	cmp	r2, #0
    37e0:	d134      	bne.n	384c <_usb_d_dev_out_next+0xe0>
    37e2:	7ce3      	ldrb	r3, [r4, #19]
    37e4:	06d9      	lsls	r1, r3, #27
    37e6:	f140 8089 	bpl.w	38fc <_usb_d_dev_out_next+0x190>
		ept->flags.bits.need_zlp  = 0;
    37ea:	f362 1304 	bfi	r3, r2, #4, #1
	bank->ADDR.reg          = addr;
    37ee:	4848      	ldr	r0, [pc, #288]	; (3910 <_usb_d_dev_out_next+0x1a4>)
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    37f0:	68e1      	ldr	r1, [r4, #12]
		ept->flags.bits.use_cache = 1;
    37f2:	b2db      	uxtb	r3, r3
	bank->ADDR.reg          = addr;
    37f4:	4428      	add	r0, r5
		ept->flags.bits.use_cache = 1;
    37f6:	f043 0320 	orr.w	r3, r3, #32
    37fa:	74e3      	strb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
    37fc:	f100 03c8 	add.w	r3, r0, #200	; 0xc8
    3800:	f8c0 10c8 	str.w	r1, [r0, #200]	; 0xc8
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    3804:	6859      	ldr	r1, [r3, #4]
    3806:	8a20      	ldrh	r0, [r4, #16]
    3808:	f360 319b 	bfi	r1, r0, #14, #14
    380c:	6059      	str	r1, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    380e:	6859      	ldr	r1, [r3, #4]
    3810:	f362 010d 	bfi	r1, r2, #0, #14
    3814:	6059      	str	r1, [r3, #4]
	if (!isr) {
    3816:	b96f      	cbnz	r7, 3834 <_usb_d_dev_out_next+0xc8>
		if (is_ctrl) {
    3818:	9b01      	ldr	r3, [sp, #4]
    381a:	2b01      	cmp	r3, #1
	bank->STATUS_BK.reg     = 0;
    381c:	bf04      	itt	eq
    381e:	4b3c      	ldreq	r3, [pc, #240]	; (3910 <_usb_d_dev_out_next+0x1a4>)
    3820:	195b      	addeq	r3, r3, r5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    3822:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    3826:	bf0a      	itet	eq
    3828:	f883 70e2 	strbeq.w	r7, [r3, #226]	; 0xe2
			inten = USB_D_BANK0_INT_FLAGS;
    382c:	2325      	movne	r3, #37	; 0x25
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    382e:	232d      	moveq	r3, #45	; 0x2d
    3830:	f885 3109 	strb.w	r3, [r5, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3834:	0176      	lsls	r6, r6, #5
    3836:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
    383a:	2340      	movs	r3, #64	; 0x40
    383c:	f886 3104 	strb.w	r3, [r6, #260]	; 0x104
}
    3840:	b003      	add	sp, #12
    3842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    3846:	4689      	mov	r9, r1
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    3848:	468a      	mov	sl, r1
    384a:	e7a1      	b.n	3790 <_usb_d_dev_out_next+0x24>
	} else if (isr && last_pkt < ept->size) {
    384c:	b1f7      	cbz	r7, 388c <_usb_d_dev_out_next+0x120>
    384e:	8a23      	ldrh	r3, [r4, #16]
    3850:	455b      	cmp	r3, fp
    3852:	d91b      	bls.n	388c <_usb_d_dev_out_next+0x120>
		ept->flags.bits.need_zlp = 0;
    3854:	7ce3      	ldrb	r3, [r4, #19]
    3856:	f36f 1304 	bfc	r3, #4, #1
    385a:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    385c:	68a3      	ldr	r3, [r4, #8]
    385e:	4453      	add	r3, sl
		ept->trans_count += trans_size;
    3860:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    3862:	9b01      	ldr	r3, [sp, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    3864:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    3868:	2b01      	cmp	r3, #1
    386a:	bf0c      	ite	eq
    386c:	232d      	moveq	r3, #45	; 0x2d
    386e:	2325      	movne	r3, #37	; 0x25
    3870:	f885 3108 	strb.w	r3, [r5, #264]	; 0x108
	if (0 == epn) {
    3874:	b91e      	cbnz	r6, 387e <_usb_d_dev_out_next+0x112>
	bank->ADDR.reg          = addr;
    3876:	4b26      	ldr	r3, [pc, #152]	; (3910 <_usb_d_dev_out_next+0x1a4>)
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    3878:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    387a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    387e:	4b25      	ldr	r3, [pc, #148]	; (3914 <_usb_d_dev_out_next+0x1a8>)
    3880:	2100      	movs	r1, #0
    3882:	4620      	mov	r0, r4
}
    3884:	b003      	add	sp, #12
    3886:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    388a:	4718      	bx	r3
		ept->trans_count += trans_size;
    388c:	68a1      	ldr	r1, [r4, #8]
    388e:	4449      	add	r1, r9
		if (ept->trans_count < ept->trans_size) {
    3890:	428a      	cmp	r2, r1
		ept->trans_count += trans_size;
    3892:	60a1      	str	r1, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    3894:	d9e5      	bls.n	3862 <_usb_d_dev_out_next+0xf6>
			if (ept->flags.bits.use_cache) {
    3896:	7ce0      	ldrb	r0, [r4, #19]
    3898:	4b1d      	ldr	r3, [pc, #116]	; (3910 <_usb_d_dev_out_next+0x1a4>)
    389a:	f8b4 e010 	ldrh.w	lr, [r4, #16]
			trans_next = ept->trans_size - ept->trans_count;
    389e:	1a52      	subs	r2, r2, r1
			if (ept->flags.bits.use_cache) {
    38a0:	f010 0f20 	tst.w	r0, #32
			trans_next = ept->trans_size - ept->trans_count;
    38a4:	b292      	uxth	r2, r2
			if (ept->flags.bits.use_cache) {
    38a6:	d014      	beq.n	38d2 <_usb_d_dev_out_next+0x166>
	bank->ADDR.reg          = addr;
    38a8:	1959      	adds	r1, r3, r5
    38aa:	4572      	cmp	r2, lr
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    38ac:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    38ae:	f8c1 00c8 	str.w	r0, [r1, #200]	; 0xc8
    38b2:	bf28      	it	cs
    38b4:	4672      	movcs	r2, lr
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    38b6:	442b      	add	r3, r5
    38b8:	f8d3 10cc 	ldr.w	r1, [r3, #204]	; 0xcc
    38bc:	f362 319b 	bfi	r1, r2, #14, #14
    38c0:	f8c3 10cc 	str.w	r1, [r3, #204]	; 0xcc
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    38c4:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
    38c8:	f36f 020d 	bfc	r2, #0, #14
    38cc:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    38d0:	e7a1      	b.n	3816 <_usb_d_dev_out_next+0xaa>
				if (trans_next > ept->size) {
    38d2:	4572      	cmp	r2, lr
    38d4:	d90a      	bls.n	38ec <_usb_d_dev_out_next+0x180>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    38d6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    38da:	d80c      	bhi.n	38f6 <_usb_d_dev_out_next+0x18a>
    38dc:	ea22 0208 	bic.w	r2, r2, r8
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    38e0:	6820      	ldr	r0, [r4, #0]
    38e2:	4401      	add	r1, r0
	bank->ADDR.reg          = addr;
    38e4:	1958      	adds	r0, r3, r5
    38e6:	f8c0 10c8 	str.w	r1, [r0, #200]	; 0xc8
    38ea:	e7e4      	b.n	38b6 <_usb_d_dev_out_next+0x14a>
				} else if (trans_next < ept->size) {
    38ec:	d2f8      	bcs.n	38e0 <_usb_d_dev_out_next+0x174>
					ept->flags.bits.use_cache = 1;
    38ee:	f040 0020 	orr.w	r0, r0, #32
    38f2:	74e0      	strb	r0, [r4, #19]
    38f4:	e7f4      	b.n	38e0 <_usb_d_dev_out_next+0x174>
						trans_next = USB_D_DEV_TRANS_MAX;
    38f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    38fa:	e7f1      	b.n	38e0 <_usb_d_dev_out_next+0x174>
	} else if (isr && last_pkt < ept->size) {
    38fc:	2f00      	cmp	r7, #0
    38fe:	d1a6      	bne.n	384e <_usb_d_dev_out_next+0xe2>
		ept->trans_count += trans_size;
    3900:	68a3      	ldr	r3, [r4, #8]
    3902:	444b      	add	r3, r9
    3904:	e7ac      	b.n	3860 <_usb_d_dev_out_next+0xf4>
    3906:	bf00      	nop
    3908:	2000711c 	.word	0x2000711c
    390c:	0000b33b 	.word	0x0000b33b
    3910:	20007054 	.word	0x20007054
    3914:	00003465 	.word	0x00003465

00003918 <_usb_d_dev_handler>:
{
    3918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    391c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3920:	8c1d      	ldrh	r5, [r3, #32]
    3922:	b2ad      	uxth	r5, r5
	if (0 == epint) {
    3924:	2d00      	cmp	r5, #0
    3926:	d16e      	bne.n	3a06 <_usb_d_dev_handler+0xee>
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    3928:	8b99      	ldrh	r1, [r3, #28]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    392a:	8b1a      	ldrh	r2, [r3, #24]
    392c:	b292      	uxth	r2, r2
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    392e:	400a      	ands	r2, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    3930:	f012 0004 	ands.w	r0, r2, #4
    3934:	d006      	beq.n	3944 <_usb_d_dev_handler+0x2c>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    3936:	2204      	movs	r2, #4
    3938:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    393a:	4b67      	ldr	r3, [pc, #412]	; (3ad8 <_usb_d_dev_handler+0x1c0>)
}
    393c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	dev_inst.callbacks.sof();
    3940:	681b      	ldr	r3, [r3, #0]
    3942:	4718      	bx	r3
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    3944:	f412 7100 	ands.w	r1, r2, #512	; 0x200
    3948:	d025      	beq.n	3996 <_usb_d_dev_handler+0x7e>
    394a:	f240 2201 	movw	r2, #513	; 0x201
    394e:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    3950:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    3952:	2270      	movs	r2, #112	; 0x70
    3954:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    3956:	4b60      	ldr	r3, [pc, #384]	; (3ad8 <_usb_d_dev_handler+0x1c0>)
    3958:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
    395c:	f002 020f 	and.w	r2, r2, #15
    3960:	2a03      	cmp	r2, #3
    3962:	d014      	beq.n	398e <_usb_d_dev_handler+0x76>
    3964:	f8b3 20f0 	ldrh.w	r2, [r3, #240]	; 0xf0
    3968:	f002 020f 	and.w	r2, r2, #15
    396c:	2a03      	cmp	r2, #3
    396e:	d110      	bne.n	3992 <_usb_d_dev_handler+0x7a>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    3970:	2101      	movs	r1, #1
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    3972:	eb03 1041 	add.w	r0, r3, r1, lsl #5
			bank->EXTREG.reg = 0;
    3976:	2200      	movs	r2, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    3978:	f8b0 10d0 	ldrh.w	r1, [r0, #208]	; 0xd0
			bank->EXTREG.reg = 0;
    397c:	f8a0 20d0 	strh.w	r2, [r0, #208]	; 0xd0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    3980:	f3c1 110a 	ubfx	r1, r1, #4, #11
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    3984:	685b      	ldr	r3, [r3, #4]
    3986:	2003      	movs	r0, #3
}
    3988:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    398c:	4718      	bx	r3
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    398e:	4601      	mov	r1, r0
    3990:	e7ef      	b.n	3972 <_usb_d_dev_handler+0x5a>
	uint32_t lpm_variable = 0;
    3992:	4601      	mov	r1, r0
    3994:	e7f6      	b.n	3984 <_usb_d_dev_handler+0x6c>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    3996:	f012 0080 	ands.w	r0, r2, #128	; 0x80
    399a:	d005      	beq.n	39a8 <_usb_d_dev_handler+0x90>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    399c:	2280      	movs	r2, #128	; 0x80
    399e:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    39a0:	4b4d      	ldr	r3, [pc, #308]	; (3ad8 <_usb_d_dev_handler+0x1c0>)
    39a2:	2005      	movs	r0, #5
    39a4:	685b      	ldr	r3, [r3, #4]
    39a6:	e7ef      	b.n	3988 <_usb_d_dev_handler+0x70>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    39a8:	f012 0470 	ands.w	r4, r2, #112	; 0x70
    39ac:	d00c      	beq.n	39c8 <_usb_d_dev_handler+0xb0>
    39ae:	2270      	movs	r2, #112	; 0x70
    39b0:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    39b2:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    39b4:	f240 2201 	movw	r2, #513	; 0x201
    39b8:	831a      	strh	r2, [r3, #24]
		_usb_d_dev_wait_dfll_rdy();
    39ba:	4b48      	ldr	r3, [pc, #288]	; (3adc <_usb_d_dev_handler+0x1c4>)
    39bc:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    39be:	4b46      	ldr	r3, [pc, #280]	; (3ad8 <_usb_d_dev_handler+0x1c0>)
    39c0:	4601      	mov	r1, r0
    39c2:	685b      	ldr	r3, [r3, #4]
    39c4:	2002      	movs	r0, #2
    39c6:	e7df      	b.n	3988 <_usb_d_dev_handler+0x70>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    39c8:	f012 0108 	ands.w	r1, r2, #8
    39cc:	d00f      	beq.n	39ee <_usb_d_dev_handler+0xd6>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    39ce:	2208      	movs	r2, #8

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    39d0:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    39d4:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    39d6:	2270      	movs	r2, #112	; 0x70
    39d8:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    39da:	f240 2201 	movw	r2, #513	; 0x201
    39de:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    39e0:	4b3f      	ldr	r3, [pc, #252]	; (3ae0 <_usb_d_dev_handler+0x1c8>)
    39e2:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    39e4:	4b3c      	ldr	r3, [pc, #240]	; (3ad8 <_usb_d_dev_handler+0x1c0>)
    39e6:	4621      	mov	r1, r4
    39e8:	685b      	ldr	r3, [r3, #4]
    39ea:	2001      	movs	r0, #1
    39ec:	e7cc      	b.n	3988 <_usb_d_dev_handler+0x70>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    39ee:	07d0      	lsls	r0, r2, #31
    39f0:	d509      	bpl.n	3a06 <_usb_d_dev_handler+0xee>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    39f2:	f240 2201 	movw	r2, #513	; 0x201
    39f6:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    39f8:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    39fa:	2270      	movs	r2, #112	; 0x70
    39fc:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    39fe:	4b36      	ldr	r3, [pc, #216]	; (3ad8 <_usb_d_dev_handler+0x1c0>)
    3a00:	2004      	movs	r0, #4
    3a02:	685b      	ldr	r3, [r3, #4]
    3a04:	e7c0      	b.n	3988 <_usb_d_dev_handler+0x70>
    3a06:	4c37      	ldr	r4, [pc, #220]	; (3ae4 <_usb_d_dev_handler+0x1cc>)
			_usb_d_dev_handle_setup(ept);
    3a08:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 3af8 <_usb_d_dev_handler+0x1e0>
			_usb_d_dev_handle_trfail(ept, 1);
    3a0c:	4f36      	ldr	r7, [pc, #216]	; (3ae8 <_usb_d_dev_handler+0x1d0>)
	uint32_t lpm_variable = 0;
    3a0e:	2600      	movs	r6, #0
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    3a10:	f1a4 0914 	sub.w	r9, r4, #20
		if (ept->ep == 0xFF) {
    3a14:	7ca2      	ldrb	r2, [r4, #18]
    3a16:	2aff      	cmp	r2, #255	; 0xff
    3a18:	d029      	beq.n	3a6e <_usb_d_dev_handler+0x156>
	if (!(epint & (1u << epn))) {
    3a1a:	f002 020f 	and.w	r2, r2, #15
    3a1e:	2101      	movs	r1, #1
    3a20:	fa01 f302 	lsl.w	r3, r1, r2
    3a24:	422b      	tst	r3, r5
    3a26:	d022      	beq.n	3a6e <_usb_d_dev_handler+0x156>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    3a28:	0153      	lsls	r3, r2, #5
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    3a2a:	0152      	lsls	r2, r2, #5
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    3a2c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    3a30:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    3a34:	f893 0107 	ldrb.w	r0, [r3, #263]	; 0x107
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    3a38:	f892 3109 	ldrb.w	r3, [r2, #265]	; 0x109
	if (flags) {
    3a3c:	4003      	ands	r3, r0
    3a3e:	d016      	beq.n	3a6e <_usb_d_dev_handler+0x156>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    3a40:	2214      	movs	r2, #20
    3a42:	fb02 9206 	mla	r2, r2, r6, r9
    3a46:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
    3a4a:	f002 0047 	and.w	r0, r2, #71	; 0x47
    3a4e:	4288      	cmp	r0, r1
    3a50:	d114      	bne.n	3a7c <_usb_d_dev_handler+0x164>
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    3a52:	06da      	lsls	r2, r3, #27
    3a54:	d502      	bpl.n	3a5c <_usb_d_dev_handler+0x144>
			_usb_d_dev_handle_setup(ept);
    3a56:	4620      	mov	r0, r4
    3a58:	47c0      	blx	r8
    3a5a:	e008      	b.n	3a6e <_usb_d_dev_handler+0x156>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    3a5c:	f013 0140 	ands.w	r1, r3, #64	; 0x40
    3a60:	d003      	beq.n	3a6a <_usb_d_dev_handler+0x152>
		_usb_d_dev_handle_stall(ept, 1);
    3a62:	4601      	mov	r1, r0
		_usb_d_dev_handle_stall(ept, 0);
    3a64:	4620      	mov	r0, r4
    3a66:	4b21      	ldr	r3, [pc, #132]	; (3aec <_usb_d_dev_handler+0x1d4>)
    3a68:	e015      	b.n	3a96 <_usb_d_dev_handler+0x17e>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    3a6a:	069b      	lsls	r3, r3, #26
    3a6c:	d4fa      	bmi.n	3a64 <_usb_d_dev_handler+0x14c>
    3a6e:	3601      	adds	r6, #1
	for (i = 0; i < USB_D_N_EP; i++) {
    3a70:	2e09      	cmp	r6, #9
    3a72:	f104 0414 	add.w	r4, r4, #20
    3a76:	d1cd      	bne.n	3a14 <_usb_d_dev_handler+0xfc>
}
    3a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (_usb_d_dev_ep_is_in(ept)) {
    3a7c:	0610      	lsls	r0, r2, #24
    3a7e:	d514      	bpl.n	3aaa <_usb_d_dev_handler+0x192>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    3a80:	0658      	lsls	r0, r3, #25
    3a82:	d4ef      	bmi.n	3a64 <_usb_d_dev_handler+0x14c>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    3a84:	0718      	lsls	r0, r3, #28
    3a86:	d502      	bpl.n	3a8e <_usb_d_dev_handler+0x176>
			_usb_d_dev_handle_trfail(ept, 1);
    3a88:	4620      	mov	r0, r4
    3a8a:	47b8      	blx	r7
    3a8c:	e7ef      	b.n	3a6e <_usb_d_dev_handler+0x156>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    3a8e:	0798      	lsls	r0, r3, #30
    3a90:	d503      	bpl.n	3a9a <_usb_d_dev_handler+0x182>
		_usb_d_dev_in_next(ept, true);
    3a92:	4b17      	ldr	r3, [pc, #92]	; (3af0 <_usb_d_dev_handler+0x1d8>)
    3a94:	4620      	mov	r0, r4
		_usb_d_dev_out_next(ept, true);
    3a96:	4798      	blx	r3
    3a98:	e7e9      	b.n	3a6e <_usb_d_dev_handler+0x156>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    3a9a:	f002 0207 	and.w	r2, r2, #7
    3a9e:	2a01      	cmp	r2, #1
    3aa0:	d1e5      	bne.n	3a6e <_usb_d_dev_handler+0x156>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    3aa2:	075a      	lsls	r2, r3, #29
    3aa4:	d515      	bpl.n	3ad2 <_usb_d_dev_handler+0x1ba>
			_usb_d_dev_handle_trfail(ept, 0);
    3aa6:	2100      	movs	r1, #0
    3aa8:	e7ee      	b.n	3a88 <_usb_d_dev_handler+0x170>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    3aaa:	f013 0020 	ands.w	r0, r3, #32
    3aae:	d001      	beq.n	3ab4 <_usb_d_dev_handler+0x19c>
		_usb_d_dev_handle_stall(ept, 0);
    3ab0:	2100      	movs	r1, #0
    3ab2:	e7d7      	b.n	3a64 <_usb_d_dev_handler+0x14c>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    3ab4:	0758      	lsls	r0, r3, #29
    3ab6:	d4f6      	bmi.n	3aa6 <_usb_d_dev_handler+0x18e>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    3ab8:	07d8      	lsls	r0, r3, #31
    3aba:	d502      	bpl.n	3ac2 <_usb_d_dev_handler+0x1aa>
		_usb_d_dev_out_next(ept, true);
    3abc:	4620      	mov	r0, r4
    3abe:	4b0d      	ldr	r3, [pc, #52]	; (3af4 <_usb_d_dev_handler+0x1dc>)
    3ac0:	e7e9      	b.n	3a96 <_usb_d_dev_handler+0x17e>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    3ac2:	f002 0207 	and.w	r2, r2, #7
    3ac6:	2a01      	cmp	r2, #1
    3ac8:	d1d1      	bne.n	3a6e <_usb_d_dev_handler+0x156>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    3aca:	071a      	lsls	r2, r3, #28
    3acc:	d501      	bpl.n	3ad2 <_usb_d_dev_handler+0x1ba>
			_usb_d_dev_handle_trfail(ept, 1);
    3ace:	2101      	movs	r1, #1
    3ad0:	e7da      	b.n	3a88 <_usb_d_dev_handler+0x170>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    3ad2:	06db      	lsls	r3, r3, #27
    3ad4:	d5cb      	bpl.n	3a6e <_usb_d_dev_handler+0x156>
    3ad6:	e7be      	b.n	3a56 <_usb_d_dev_handler+0x13e>
    3ad8:	20007054 	.word	0x20007054
    3adc:	0000337d 	.word	0x0000337d
    3ae0:	000035d9 	.word	0x000035d9
    3ae4:	20007068 	.word	0x20007068
    3ae8:	000034ed 	.word	0x000034ed
    3aec:	0000343d 	.word	0x0000343d
    3af0:	00003615 	.word	0x00003615
    3af4:	0000376d 	.word	0x0000376d
    3af8:	000033b9 	.word	0x000033b9

00003afc <_usbd_ep_pcksize_size>:
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3afc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    3b00:	d80f      	bhi.n	3b22 <_usbd_ep_pcksize_size+0x26>
    3b02:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    3b06:	d80e      	bhi.n	3b26 <_usbd_ep_pcksize_size+0x2a>
    3b08:	2880      	cmp	r0, #128	; 0x80
    3b0a:	d80e      	bhi.n	3b2a <_usbd_ep_pcksize_size+0x2e>
    3b0c:	2840      	cmp	r0, #64	; 0x40
    3b0e:	d80e      	bhi.n	3b2e <_usbd_ep_pcksize_size+0x32>
    3b10:	2820      	cmp	r0, #32
    3b12:	d80e      	bhi.n	3b32 <_usbd_ep_pcksize_size+0x36>
    3b14:	2810      	cmp	r0, #16
    3b16:	d80e      	bhi.n	3b36 <_usbd_ep_pcksize_size+0x3a>
    3b18:	2808      	cmp	r0, #8
    3b1a:	bf94      	ite	ls
    3b1c:	2000      	movls	r0, #0
    3b1e:	2001      	movhi	r0, #1
    3b20:	4770      	bx	lr
    3b22:	2007      	movs	r0, #7
    3b24:	4770      	bx	lr
    3b26:	2006      	movs	r0, #6
    3b28:	4770      	bx	lr
    3b2a:	2005      	movs	r0, #5
    3b2c:	4770      	bx	lr
    3b2e:	2004      	movs	r0, #4
    3b30:	4770      	bx	lr
    3b32:	2003      	movs	r0, #3
    3b34:	4770      	bx	lr
    3b36:	2002      	movs	r0, #2
}
    3b38:	4770      	bx	lr
	...

00003b3c <_usb_d_dev_init>:
{
    3b3c:	b508      	push	{r3, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    3b3e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3b42:	789a      	ldrb	r2, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    3b44:	07d1      	lsls	r1, r2, #31
    3b46:	d406      	bmi.n	3b56 <_usb_d_dev_init+0x1a>
	tmp = ((Usb *)hw)->DEVICE.CTRLA.reg;
    3b48:	781a      	ldrb	r2, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    3b4a:	0792      	lsls	r2, r2, #30
    3b4c:	d43f      	bmi.n	3bce <_usb_d_dev_init+0x92>
	((Usb *)hw)->DEVICE.CTRLA.reg = data;
    3b4e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3b52:	2201      	movs	r2, #1
    3b54:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    3b56:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    3b5a:	7893      	ldrb	r3, [r2, #2]
    3b5c:	07db      	lsls	r3, r3, #31
    3b5e:	d4fc      	bmi.n	3b5a <_usb_d_dev_init+0x1e>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    3b60:	4b24      	ldr	r3, [pc, #144]	; (3bf4 <_usb_d_dev_init+0xb8>)
    3b62:	4a25      	ldr	r2, [pc, #148]	; (3bf8 <_usb_d_dev_init+0xbc>)
    3b64:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    3b66:	605a      	str	r2, [r3, #4]
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    3b68:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    3b6a:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    3b6c:	611a      	str	r2, [r3, #16]
	_usb_d_dev_reset_epts();
    3b6e:	4b23      	ldr	r3, [pc, #140]	; (3bfc <_usb_d_dev_init+0xc0>)
    3b70:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    3b72:	4b23      	ldr	r3, [pc, #140]	; (3c00 <_usb_d_dev_init+0xc4>)
    3b74:	6819      	ldr	r1, [r3, #0]
	uint32_t pad_transp
    3b76:	f3c1 1344 	ubfx	r3, r1, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    3b7a:	f3c1 2282 	ubfx	r2, r1, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
    3b7e:	f011 011f 	ands.w	r1, r1, #31
    3b82:	d031      	beq.n	3be8 <_usb_d_dev_init+0xac>
		pad_transn = 9;
    3b84:	291f      	cmp	r1, #31
    3b86:	bf08      	it	eq
    3b88:	2109      	moveq	r1, #9
	if (pad_transp == 0 || pad_transp == 0x1F) {
    3b8a:	b37b      	cbz	r3, 3bec <_usb_d_dev_init+0xb0>
		pad_transp = 25;
    3b8c:	2b1f      	cmp	r3, #31
    3b8e:	bf08      	it	eq
    3b90:	2319      	moveq	r3, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
    3b92:	b36a      	cbz	r2, 3bf0 <_usb_d_dev_init+0xb4>
		pad_trim = 6;
    3b94:	2a07      	cmp	r2, #7
    3b96:	bf08      	it	eq
    3b98:	2206      	moveq	r2, #6
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    3b9a:	0312      	lsls	r2, r2, #12
    3b9c:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    3ba0:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    3ba4:	4313      	orrs	r3, r2
    3ba6:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    3baa:	b29b      	uxth	r3, r3
    3bac:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    3bae:	78d3      	ldrb	r3, [r2, #3]
    3bb0:	f043 0303 	orr.w	r3, r3, #3
    3bb4:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    3bb6:	78d3      	ldrb	r3, [r2, #3]
    3bb8:	f043 030c 	orr.w	r3, r3, #12
    3bbc:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->DEVICE.CTRLA.reg = data;
    3bbe:	2304      	movs	r3, #4
    3bc0:	7013      	strb	r3, [r2, #0]
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    3bc2:	4b10      	ldr	r3, [pc, #64]	; (3c04 <_usb_d_dev_init+0xc8>)
	((Usb *)hw)->DEVICE.DESCADD.reg = data;
    3bc4:	6253      	str	r3, [r2, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    3bc6:	2301      	movs	r3, #1
    3bc8:	8113      	strh	r3, [r2, #8]
}
    3bca:	2000      	movs	r0, #0
    3bcc:	bd08      	pop	{r3, pc}
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    3bce:	789a      	ldrb	r2, [r3, #2]
    3bd0:	0790      	lsls	r0, r2, #30
    3bd2:	d1fc      	bne.n	3bce <_usb_d_dev_init+0x92>
	((Usb *)hw)->DEVICE.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    3bd4:	781a      	ldrb	r2, [r3, #0]
    3bd6:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
    3bda:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    3bdc:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    3be0:	7893      	ldrb	r3, [r2, #2]
    3be2:	0799      	lsls	r1, r3, #30
    3be4:	d4fc      	bmi.n	3be0 <_usb_d_dev_init+0xa4>
    3be6:	e7b2      	b.n	3b4e <_usb_d_dev_init+0x12>
		pad_transn = 9;
    3be8:	2109      	movs	r1, #9
    3bea:	e7ce      	b.n	3b8a <_usb_d_dev_init+0x4e>
		pad_transp = 25;
    3bec:	2319      	movs	r3, #25
    3bee:	e7d0      	b.n	3b92 <_usb_d_dev_init+0x56>
		pad_trim = 6;
    3bf0:	2206      	movs	r2, #6
    3bf2:	e7d2      	b.n	3b9a <_usb_d_dev_init+0x5e>
    3bf4:	20007054 	.word	0x20007054
    3bf8:	00003379 	.word	0x00003379
    3bfc:	000035d9 	.word	0x000035d9
    3c00:	00800084 	.word	0x00800084
    3c04:	2000711c 	.word	0x2000711c

00003c08 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->DEVICE.SYNCBUSY.reg;
    3c08:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    3c0c:	7893      	ldrb	r3, [r2, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    3c0e:	0798      	lsls	r0, r3, #30
    3c10:	d11a      	bne.n	3c48 <_usb_d_dev_enable+0x40>
	return ((Usb *)hw)->DEVICE.CTRLA.reg;
    3c12:	7813      	ldrb	r3, [r2, #0]
    3c14:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    3c16:	0799      	lsls	r1, r3, #30
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    3c18:	bf5c      	itt	pl
    3c1a:	f043 0302 	orrpl.w	r3, r3, #2
	((Usb *)hw)->DEVICE.CTRLA.reg = data;
    3c1e:	7013      	strbpl	r3, [r2, #0]
    3c20:	4b0b      	ldr	r3, [pc, #44]	; (3c50 <_usb_d_dev_enable+0x48>)
    3c22:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    3c26:	609a      	str	r2, [r3, #8]
    3c28:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    3c2c:	609a      	str	r2, [r3, #8]
    3c2e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    3c32:	609a      	str	r2, [r3, #8]
    3c34:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    3c38:	609a      	str	r2, [r3, #8]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    3c3a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3c3e:	f240 228d 	movw	r2, #653	; 0x28d
    3c42:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    3c44:	2000      	movs	r0, #0
    3c46:	4770      	bx	lr
		return -USB_ERR_DENIED;
    3c48:	f06f 0010 	mvn.w	r0, #16
}
    3c4c:	4770      	bx	lr
    3c4e:	bf00      	nop
    3c50:	e000e100 	.word	0xe000e100

00003c54 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    3c54:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    3c58:	8913      	ldrh	r3, [r2, #8]
    3c5a:	f023 0301 	bic.w	r3, r3, #1
    3c5e:	041b      	lsls	r3, r3, #16
    3c60:	0c1b      	lsrs	r3, r3, #16
    3c62:	8113      	strh	r3, [r2, #8]
    3c64:	4770      	bx	lr

00003c66 <_usb_d_dev_set_address>:
	((Usb *)hw)->DEVICE.DADD.reg = data;
    3c66:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    3c6a:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    3c6e:	7298      	strb	r0, [r3, #10]
    3c70:	4770      	bx	lr
	...

00003c74 <_usb_d_dev_ep_init>:
{
    3c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    3c78:	f000 040f 	and.w	r4, r0, #15
    3c7c:	b247      	sxtb	r7, r0
{
    3c7e:	460d      	mov	r5, r1
    3c80:	4680      	mov	r8, r0
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    3c82:	0ff9      	lsrs	r1, r7, #31
    3c84:	4620      	mov	r0, r4
    3c86:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 3d30 <_usb_d_dev_ep_init+0xbc>
    3c8a:	47c8      	blx	r9
	if (epn > CONF_USB_D_MAX_EP_N) {
    3c8c:	2c02      	cmp	r4, #2
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    3c8e:	4606      	mov	r6, r0
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    3c90:	f005 0503 	and.w	r5, r5, #3
	if (epn > CONF_USB_D_MAX_EP_N) {
    3c94:	d83f      	bhi.n	3d16 <_usb_d_dev_ep_init+0xa2>
	if (ept->ep != 0xFF) {
    3c96:	7c83      	ldrb	r3, [r0, #18]
    3c98:	2bff      	cmp	r3, #255	; 0xff
    3c9a:	d140      	bne.n	3d1e <_usb_d_dev_ep_init+0xaa>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    3c9c:	b985      	cbnz	r5, 3cc0 <_usb_d_dev_ep_init+0x4c>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    3c9e:	43f9      	mvns	r1, r7
    3ca0:	0fc9      	lsrs	r1, r1, #31
    3ca2:	4620      	mov	r0, r4
    3ca4:	47c8      	blx	r9
		if (ept_in->ep != 0xFF) {
    3ca6:	7c83      	ldrb	r3, [r0, #18]
    3ca8:	2bff      	cmp	r3, #255	; 0xff
    3caa:	d138      	bne.n	3d1e <_usb_d_dev_ep_init+0xaa>
		if (pcfg->cache == NULL) {
    3cac:	230c      	movs	r3, #12
    3cae:	4363      	muls	r3, r4
    3cb0:	491e      	ldr	r1, [pc, #120]	; (3d2c <_usb_d_dev_ep_init+0xb8>)
    3cb2:	58cb      	ldr	r3, [r1, r3]
    3cb4:	2b00      	cmp	r3, #0
    3cb6:	d136      	bne.n	3d26 <_usb_d_dev_ep_init+0xb2>
			return -USB_ERR_FUNC;
    3cb8:	f06f 0012 	mvn.w	r0, #18
    3cbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    3cc0:	2f00      	cmp	r7, #0
    3cc2:	da18      	bge.n	3cf6 <_usb_d_dev_ep_init+0x82>
    3cc4:	4919      	ldr	r1, [pc, #100]	; (3d2c <_usb_d_dev_ep_init+0xb8>)
    3cc6:	230c      	movs	r3, #12
    3cc8:	fb03 1304 	mla	r3, r3, r4, r1
    3ccc:	6859      	ldr	r1, [r3, #4]
    3cce:	b9f1      	cbnz	r1, 3d0e <_usb_d_dev_ep_init+0x9a>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    3cd0:	4916      	ldr	r1, [pc, #88]	; (3d2c <_usb_d_dev_ep_init+0xb8>)
	ept->ep       = ep;
    3cd2:	f886 8012 	strb.w	r8, [r6, #18]
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    3cd6:	230c      	movs	r3, #12
    3cd8:	435c      	muls	r4, r3
    3cda:	190b      	adds	r3, r1, r4
    3cdc:	5909      	ldr	r1, [r1, r4]
    3cde:	685b      	ldr	r3, [r3, #4]
	ept->size     = max_pkt_siz;
    3ce0:	8232      	strh	r2, [r6, #16]
	ept->flags.u8 = (ep_type + 1);
    3ce2:	3501      	adds	r5, #1
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    3ce4:	ea13 0327 	ands.w	r3, r3, r7, asr #32
    3ce8:	bf38      	it	cc
    3cea:	460b      	movcc	r3, r1
	ept->flags.u8 = (ep_type + 1);
    3cec:	74f5      	strb	r5, [r6, #19]
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    3cee:	60f3      	str	r3, [r6, #12]
	return USB_OK;
    3cf0:	2000      	movs	r0, #0
    3cf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    3cf6:	230c      	movs	r3, #12
    3cf8:	4363      	muls	r3, r4
    3cfa:	490c      	ldr	r1, [pc, #48]	; (3d2c <_usb_d_dev_ep_init+0xb8>)
    3cfc:	58cb      	ldr	r3, [r1, r3]
    3cfe:	2b00      	cmp	r3, #0
    3d00:	d0e6      	beq.n	3cd0 <_usb_d_dev_ep_init+0x5c>
    3d02:	490a      	ldr	r1, [pc, #40]	; (3d2c <_usb_d_dev_ep_init+0xb8>)
    3d04:	230c      	movs	r3, #12
    3d06:	fb03 1304 	mla	r3, r3, r4, r1
    3d0a:	891b      	ldrh	r3, [r3, #8]
    3d0c:	e000      	b.n	3d10 <_usb_d_dev_ep_init+0x9c>
    3d0e:	895b      	ldrh	r3, [r3, #10]
    3d10:	4293      	cmp	r3, r2
    3d12:	dadd      	bge.n	3cd0 <_usb_d_dev_ep_init+0x5c>
    3d14:	e7d0      	b.n	3cb8 <_usb_d_dev_ep_init+0x44>
		return -USB_ERR_PARAM;
    3d16:	f06f 0011 	mvn.w	r0, #17
    3d1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -USB_ERR_REDO;
    3d1e:	f06f 0013 	mvn.w	r0, #19
    3d22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    3d26:	2f00      	cmp	r7, #0
    3d28:	daeb      	bge.n	3d02 <_usb_d_dev_ep_init+0x8e>
    3d2a:	e7cb      	b.n	3cc4 <_usb_d_dev_ep_init+0x50>
    3d2c:	0000c7cc 	.word	0x0000c7cc
    3d30:	000033a1 	.word	0x000033a1

00003d34 <_usb_d_dev_ep_deinit>:
{
    3d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3d38:	b247      	sxtb	r7, r0
	uint8_t               epn = USB_EP_GET_N(ep);
    3d3a:	f000 050f 	and.w	r5, r0, #15
	bool                  dir = USB_EP_GET_DIR(ep);
    3d3e:	ea4f 78d7 	mov.w	r8, r7, lsr #31
{
    3d42:	4604      	mov	r4, r0
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    3d44:	4641      	mov	r1, r8
    3d46:	4628      	mov	r0, r5
    3d48:	4b19      	ldr	r3, [pc, #100]	; (3db0 <_usb_d_dev_ep_deinit+0x7c>)
    3d4a:	4798      	blx	r3
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    3d4c:	2d02      	cmp	r5, #2
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    3d4e:	4606      	mov	r6, r0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    3d50:	d815      	bhi.n	3d7e <_usb_d_dev_ep_deinit+0x4a>
    3d52:	7c83      	ldrb	r3, [r0, #18]
    3d54:	2bff      	cmp	r3, #255	; 0xff
    3d56:	d012      	beq.n	3d7e <_usb_d_dev_ep_deinit+0x4a>
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    3d58:	4b16      	ldr	r3, [pc, #88]	; (3db4 <_usb_d_dev_ep_deinit+0x80>)
    3d5a:	2203      	movs	r2, #3
    3d5c:	4641      	mov	r1, r8
    3d5e:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    3d60:	7cf3      	ldrb	r3, [r6, #19]
    3d62:	f003 0307 	and.w	r3, r3, #7
    3d66:	2b01      	cmp	r3, #1
    3d68:	d10b      	bne.n	3d82 <_usb_d_dev_ep_deinit+0x4e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    3d6a:	0164      	lsls	r4, r4, #5
    3d6c:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    3d70:	2300      	movs	r3, #0
    3d72:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
	ept->flags.u8 = 0;
    3d76:	2300      	movs	r3, #0
    3d78:	74f3      	strb	r3, [r6, #19]
	ept->ep       = 0xFF;
    3d7a:	23ff      	movs	r3, #255	; 0xff
    3d7c:	74b3      	strb	r3, [r6, #18]
    3d7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (USB_EP_GET_DIR(ep)) {
    3d82:	2f00      	cmp	r7, #0
    3d84:	da09      	bge.n	3d9a <_usb_d_dev_ep_deinit+0x66>
    3d86:	0168      	lsls	r0, r5, #5
    3d88:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    3d8c:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
    3d90:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    3d94:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
    3d98:	e7ed      	b.n	3d76 <_usb_d_dev_ep_deinit+0x42>
    3d9a:	0164      	lsls	r4, r4, #5
    3d9c:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    3da0:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
    3da4:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    3da8:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
    3dac:	e7e3      	b.n	3d76 <_usb_d_dev_ep_deinit+0x42>
    3dae:	bf00      	nop
    3db0:	000033a1 	.word	0x000033a1
    3db4:	00003489 	.word	0x00003489

00003db8 <_usb_d_dev_ep_enable>:
{
    3db8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint8_t               epn   = USB_EP_GET_N(ep);
    3dbc:	f000 050f 	and.w	r5, r0, #15
    3dc0:	fa4f f980 	sxtb.w	r9, r0
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    3dc4:	4b57      	ldr	r3, [pc, #348]	; (3f24 <_usb_d_dev_ep_enable+0x16c>)
    3dc6:	ea4f 71d9 	mov.w	r1, r9, lsr #31
    3dca:	4628      	mov	r0, r5
    3dcc:	4798      	blx	r3
    3dce:	016f      	lsls	r7, r5, #5
    3dd0:	f107 4682 	add.w	r6, r7, #1090519040	; 0x41000000
    3dd4:	4680      	mov	r8, r0
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    3dd6:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    3dda:	2d02      	cmp	r5, #2
    3ddc:	b2c3      	uxtb	r3, r0
    3dde:	f200 8098 	bhi.w	3f12 <_usb_d_dev_ep_enable+0x15a>
    3de2:	f898 2012 	ldrb.w	r2, [r8, #18]
    3de6:	2aff      	cmp	r2, #255	; 0xff
    3de8:	f000 8093 	beq.w	3f12 <_usb_d_dev_ep_enable+0x15a>
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    3dec:	4c4e      	ldr	r4, [pc, #312]	; (3f28 <_usb_d_dev_ep_enable+0x170>)
    3dee:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
    3df2:	440f      	add	r7, r1
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    3df4:	f898 1013 	ldrb.w	r1, [r8, #19]
    3df8:	f001 0007 	and.w	r0, r1, #7
    3dfc:	2801      	cmp	r0, #1
    3dfe:	d148      	bne.n	3e92 <_usb_d_dev_ep_enable+0xda>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    3e00:	f013 0377 	ands.w	r3, r3, #119	; 0x77
    3e04:	f040 8089 	bne.w	3f1a <_usb_d_dev_ep_enable+0x162>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    3e08:	2111      	movs	r1, #17
    3e0a:	f886 1100 	strb.w	r1, [r6, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3e0e:	f8b8 1010 	ldrh.w	r1, [r8, #16]
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3e12:	f8df 9118 	ldr.w	r9, [pc, #280]	; 3f2c <_usb_d_dev_ep_enable+0x174>
    3e16:	4608      	mov	r0, r1
    3e18:	47c8      	blx	r9
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3e1a:	f8df e114 	ldr.w	lr, [pc, #276]	; 3f30 <_usb_d_dev_ep_enable+0x178>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3e1e:	0700      	lsls	r0, r0, #28
    3e20:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3e24:	ea0e 3e81 	and.w	lr, lr, r1, lsl #14
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3e28:	f3c1 010d 	ubfx	r1, r1, #0, #14
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3e2c:	ea4e 0e00 	orr.w	lr, lr, r0
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3e30:	4308      	orrs	r0, r1
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3e32:	f8c7 e004 	str.w	lr, [r7, #4]
	bank->STATUS_BK.reg     = 0;
    3e36:	eb04 1545 	add.w	r5, r4, r5, lsl #5
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3e3a:	6178      	str	r0, [r7, #20]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3e3c:	f002 020f 	and.w	r2, r2, #15
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3e40:	2740      	movs	r7, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3e42:	2080      	movs	r0, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3e44:	f886 7105 	strb.w	r7, [r6, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3e48:	f886 0104 	strb.w	r0, [r6, #260]	; 0x104
	bank->ADDR.reg          = addr;
    3e4c:	0150      	lsls	r0, r2, #5
	bank->STATUS_BK.reg     = 0;
    3e4e:	f885 30d2 	strb.w	r3, [r5, #210]	; 0xd2
	bank->ADDR.reg          = addr;
    3e52:	4404      	add	r4, r0
	bank->STATUS_BK.reg     = 0;
    3e54:	f885 30e2 	strb.w	r3, [r5, #226]	; 0xe2
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    3e58:	f8d8 600c 	ldr.w	r6, [r8, #12]
	bank->ADDR.reg          = addr;
    3e5c:	f8c4 60c8 	str.w	r6, [r4, #200]	; 0xc8
    3e60:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    3e64:	f8d4 40cc 	ldr.w	r4, [r4, #204]	; 0xcc
    3e68:	f361 349b 	bfi	r4, r1, #14, #14
    3e6c:	606c      	str	r4, [r5, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    3e6e:	6869      	ldr	r1, [r5, #4]
    3e70:	f100 4282 	add.w	r2, r0, #1090519040	; 0x41000000
    3e74:	f363 010d 	bfi	r1, r3, #0, #14
    3e78:	6069      	str	r1, [r5, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    3e7a:	4610      	mov	r0, r2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3e7c:	21b0      	movs	r1, #176	; 0xb0
    3e7e:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3e82:	f882 7105 	strb.w	r7, [r2, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    3e86:	2210      	movs	r2, #16
    3e88:	f880 2109 	strb.w	r2, [r0, #265]	; 0x109
	return USB_OK;
    3e8c:	4618      	mov	r0, r3
    3e8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (dir) {
    3e92:	f1b9 0f00 	cmp.w	r9, #0
    3e96:	da1e      	bge.n	3ed6 <_usb_d_dev_ep_enable+0x11e>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    3e98:	f013 0270 	ands.w	r2, r3, #112	; 0x70
    3e9c:	d13d      	bne.n	3f1a <_usb_d_dev_ep_enable+0x162>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    3e9e:	0108      	lsls	r0, r1, #4
    3ea0:	f000 0070 	and.w	r0, r0, #112	; 0x70
    3ea4:	4318      	orrs	r0, r3
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3ea6:	f8b8 3010 	ldrh.w	r3, [r8, #16]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    3eaa:	f886 0100 	strb.w	r0, [r6, #256]	; 0x100
    3eae:	491f      	ldr	r1, [pc, #124]	; (3f2c <_usb_d_dev_ep_enable+0x174>)
    3eb0:	4618      	mov	r0, r3
    3eb2:	4788      	blx	r1
    3eb4:	0700      	lsls	r0, r0, #28
    3eb6:	f3c3 030d 	ubfx	r3, r3, #0, #14
    3eba:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
	bank->STATUS_BK.reg     = 0;
    3ebe:	eb04 1445 	add.w	r4, r4, r5, lsl #5
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3ec2:	4318      	orrs	r0, r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3ec4:	2380      	movs	r3, #128	; 0x80
    3ec6:	6178      	str	r0, [r7, #20]
    3ec8:	f886 3104 	strb.w	r3, [r6, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    3ecc:	f884 20e2 	strb.w	r2, [r4, #226]	; 0xe2
	return USB_OK;
    3ed0:	4610      	mov	r0, r2
    3ed2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    3ed6:	f013 0207 	ands.w	r2, r3, #7
    3eda:	d11e      	bne.n	3f1a <_usb_d_dev_ep_enable+0x162>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    3edc:	f001 0107 	and.w	r1, r1, #7
    3ee0:	ea41 0003 	orr.w	r0, r1, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3ee4:	f8b8 1010 	ldrh.w	r1, [r8, #16]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    3ee8:	f886 0100 	strb.w	r0, [r6, #256]	; 0x100
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3eec:	4b0f      	ldr	r3, [pc, #60]	; (3f2c <_usb_d_dev_ep_enable+0x174>)
    3eee:	4608      	mov	r0, r1
    3ef0:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3ef2:	4b0f      	ldr	r3, [pc, #60]	; (3f30 <_usb_d_dev_ep_enable+0x178>)
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3ef4:	0700      	lsls	r0, r0, #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3ef6:	ea03 3381 	and.w	r3, r3, r1, lsl #14
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3efa:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
    3efe:	4303      	orrs	r3, r0
	bank->STATUS_BK.reg     = 0;
    3f00:	eb04 1445 	add.w	r4, r4, r5, lsl #5
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3f04:	607b      	str	r3, [r7, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3f06:	2340      	movs	r3, #64	; 0x40
    3f08:	f886 3105 	strb.w	r3, [r6, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
    3f0c:	f884 20d2 	strb.w	r2, [r4, #210]	; 0xd2
    3f10:	e7de      	b.n	3ed0 <_usb_d_dev_ep_enable+0x118>
		return -USB_ERR_PARAM;
    3f12:	f06f 0011 	mvn.w	r0, #17
    3f16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -USB_ERR_REDO;
    3f1a:	f06f 0013 	mvn.w	r0, #19
}
    3f1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3f22:	bf00      	nop
    3f24:	000033a1 	.word	0x000033a1
    3f28:	20007054 	.word	0x20007054
    3f2c:	00003afd 	.word	0x00003afd
    3f30:	0fffc000 	.word	0x0fffc000

00003f34 <_usb_d_dev_ep_stall>:
{
    3f34:	b538      	push	{r3, r4, r5, lr}
	bool                  dir = USB_EP_GET_DIR(ep);
    3f36:	09c2      	lsrs	r2, r0, #7
	uint8_t               epn = USB_EP_GET_N(ep);
    3f38:	f000 050f 	and.w	r5, r0, #15
{
    3f3c:	460c      	mov	r4, r1
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    3f3e:	4628      	mov	r0, r5
    3f40:	4611      	mov	r1, r2
    3f42:	4b34      	ldr	r3, [pc, #208]	; (4014 <_usb_d_dev_ep_stall+0xe0>)
    3f44:	4798      	blx	r3
	if (epn > CONF_USB_D_MAX_EP_N) {
    3f46:	2d02      	cmp	r5, #2
    3f48:	d861      	bhi.n	400e <_usb_d_dev_ep_stall+0xda>
	if (USB_EP_STALL_SET == ctrl) {
    3f4a:	2c01      	cmp	r4, #1
    3f4c:	d119      	bne.n	3f82 <_usb_d_dev_ep_stall+0x4e>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3f4e:	7c83      	ldrb	r3, [r0, #18]
    3f50:	f003 030f 	and.w	r3, r3, #15
    3f54:	0159      	lsls	r1, r3, #5
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    3f56:	2410      	movs	r4, #16
    3f58:	4094      	lsls	r4, r2
    3f5a:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    3f5e:	b2e4      	uxtb	r4, r4
    3f60:	f881 4105 	strb.w	r4, [r1, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    3f64:	015b      	lsls	r3, r3, #5
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    3f66:	2120      	movs	r1, #32
    3f68:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    3f6c:	fa01 f202 	lsl.w	r2, r1, r2
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    3f70:	b2d2      	uxtb	r2, r2
    3f72:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    3f76:	7cc3      	ldrb	r3, [r0, #19]
    3f78:	f043 0308 	orr.w	r3, r3, #8
    3f7c:	74c3      	strb	r3, [r0, #19]
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    3f7e:	2000      	movs	r0, #0
    3f80:	bd38      	pop	{r3, r4, r5, pc}
	} else if (USB_EP_STALL_CLR == ctrl) {
    3f82:	bb9c      	cbnz	r4, 3fec <_usb_d_dev_ep_stall+0xb8>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    3f84:	7c81      	ldrb	r1, [r0, #18]
    3f86:	f001 010f 	and.w	r1, r1, #15
    3f8a:	014b      	lsls	r3, r1, #5
    3f8c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    3f90:	2410      	movs	r4, #16
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    3f92:	f893 5106 	ldrb.w	r5, [r3, #262]	; 0x106
    3f96:	4094      	lsls	r4, r2
	if (!is_stalled) {
    3f98:	4225      	tst	r5, r4
    3f9a:	d0f0      	beq.n	3f7e <_usb_d_dev_ep_stall+0x4a>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    3f9c:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3f9e:	f883 4104 	strb.w	r4, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    3fa2:	0149      	lsls	r1, r1, #5
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    3fa4:	2420      	movs	r4, #32
    3fa6:	4094      	lsls	r4, r2
    3fa8:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    3fac:	b2e5      	uxtb	r5, r4
    3fae:	f881 5108 	strb.w	r5, [r1, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    3fb2:	f893 1107 	ldrb.w	r1, [r3, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    3fb6:	4221      	tst	r1, r4
    3fb8:	d007      	beq.n	3fca <_usb_d_dev_ep_stall+0x96>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    3fba:	2101      	movs	r1, #1
    3fbc:	fa01 f202 	lsl.w	r2, r1, r2
    3fc0:	b2d2      	uxtb	r2, r2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3fc2:	f883 5107 	strb.w	r5, [r3, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3fc6:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    3fca:	7cc2      	ldrb	r2, [r0, #19]
    3fcc:	f002 0107 	and.w	r1, r2, #7
    3fd0:	2901      	cmp	r1, #1
    3fd2:	d108      	bne.n	3fe6 <_usb_d_dev_ep_stall+0xb2>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    3fd4:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    3fd8:	f013 0330 	ands.w	r3, r3, #48	; 0x30
    3fdc:	d1cf      	bne.n	3f7e <_usb_d_dev_ep_stall+0x4a>
			ept->flags.bits.is_stalled = 0;
    3fde:	f363 02c3 	bfi	r2, r3, #3, #1
		ept->flags.bits.is_stalled = 0;
    3fe2:	74c2      	strb	r2, [r0, #19]
    3fe4:	e7cb      	b.n	3f7e <_usb_d_dev_ep_stall+0x4a>
    3fe6:	f36f 02c3 	bfc	r2, #3, #1
    3fea:	e7fa      	b.n	3fe2 <_usb_d_dev_ep_stall+0xae>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3fec:	7c83      	ldrb	r3, [r0, #18]
    3fee:	f003 030f 	and.w	r3, r3, #15
    3ff2:	015b      	lsls	r3, r3, #5
    3ff4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    3ff8:	f503 7380 	add.w	r3, r3, #256	; 0x100
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    3ffc:	2010      	movs	r0, #16
    3ffe:	799b      	ldrb	r3, [r3, #6]
    4000:	fa00 f202 	lsl.w	r2, r0, r2
    4004:	421a      	tst	r2, r3
    4006:	bf14      	ite	ne
    4008:	2001      	movne	r0, #1
    400a:	2000      	moveq	r0, #0
    400c:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
    400e:	f06f 0011 	mvn.w	r0, #17
}
    4012:	bd38      	pop	{r3, r4, r5, pc}
    4014:	000033a1 	.word	0x000033a1

00004018 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    4018:	b530      	push	{r4, r5, lr}
	uint8_t            epn   = USB_EP_GET_N(ep);
    401a:	f000 000f 	and.w	r0, r0, #15
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    401e:	4b12      	ldr	r3, [pc, #72]	; (4068 <_usb_d_dev_ep_read_req+0x50>)
    4020:	0142      	lsls	r2, r0, #5
    4022:	189c      	adds	r4, r3, r2
	uint32_t           addr  = bank[0].ADDR.reg;
    4024:	589d      	ldr	r5, [r3, r2]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    4026:	6864      	ldr	r4, [r4, #4]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    4028:	2802      	cmp	r0, #2
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    402a:	f3c4 040d 	ubfx	r4, r4, #0, #14
	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    402e:	d814      	bhi.n	405a <_usb_d_dev_ep_read_req+0x42>
    4030:	b199      	cbz	r1, 405a <_usb_d_dev_ep_read_req+0x42>
    4032:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    4036:	f892 3100 	ldrb.w	r3, [r2, #256]	; 0x100
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    403a:	2b11      	cmp	r3, #17
    403c:	d110      	bne.n	4060 <_usb_d_dev_ep_read_req+0x48>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    403e:	f892 3107 	ldrb.w	r3, [r2, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    4042:	f013 0010 	ands.w	r0, r3, #16
    4046:	d00d      	beq.n	4064 <_usb_d_dev_ep_read_req+0x4c>
		return ERR_NONE;
	}
	memcpy(req_buf, (void *)addr, 8);
    4048:	682b      	ldr	r3, [r5, #0]
    404a:	600b      	str	r3, [r1, #0]
    404c:	686b      	ldr	r3, [r5, #4]
    404e:	604b      	str	r3, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    4050:	2310      	movs	r3, #16
    4052:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
	_usbd_ep_ack_setup(epn);

	return bytes;
    4056:	4620      	mov	r0, r4
    4058:	bd30      	pop	{r4, r5, pc}
		return -USB_ERR_PARAM;
    405a:	f06f 0011 	mvn.w	r0, #17
    405e:	bd30      	pop	{r4, r5, pc}
		return -USB_ERR_FUNC;
    4060:	f06f 0012 	mvn.w	r0, #18
}
    4064:	bd30      	pop	{r4, r5, pc}
    4066:	bf00      	nop
    4068:	2000711c 	.word	0x2000711c

0000406c <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    406c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    4070:	7a07      	ldrb	r7, [r0, #8]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    4072:	4b3a      	ldr	r3, [pc, #232]	; (415c <_usb_d_dev_ep_trans+0xf0>)
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    4074:	f007 050f 	and.w	r5, r7, #15
    4078:	b27f      	sxtb	r7, r7
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    407a:	ea4f 79d7 	mov.w	r9, r7, lsr #31
{
    407e:	4680      	mov	r8, r0
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    4080:	4649      	mov	r1, r9
    4082:	4628      	mov	r0, r5
    4084:	4798      	blx	r3

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    4086:	8a02      	ldrh	r2, [r0, #16]
	bool     size_n_aligned = (trans->size & size_mask);
    4088:	f8d8 1004 	ldr.w	r1, [r8, #4]
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    408c:	f240 33ff 	movw	r3, #1023	; 0x3ff
    4090:	429a      	cmp	r2, r3
    4092:	bf1a      	itte	ne
    4094:	f102 33ff 	addne.w	r3, r2, #4294967295
    4098:	b29b      	uxthne	r3, r3
    409a:	4613      	moveq	r3, r2

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    409c:	2d02      	cmp	r5, #2
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    409e:	4604      	mov	r4, r0
	bool     size_n_aligned = (trans->size & size_mask);
    40a0:	ea03 0601 	and.w	r6, r3, r1
	if (epn > CONF_USB_D_MAX_EP_N) {
    40a4:	d828      	bhi.n	40f8 <_usb_d_dev_ep_trans+0x8c>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    40a6:	f8d8 5000 	ldr.w	r5, [r8]
    40aa:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
    40ae:	d30a      	bcc.n	40c6 <_usb_d_dev_ep_trans+0x5a>
    40b0:	4b2b      	ldr	r3, [pc, #172]	; (4160 <_usb_d_dev_ep_trans+0xf4>)
    40b2:	1948      	adds	r0, r1, r5
    40b4:	4298      	cmp	r0, r3
    40b6:	d806      	bhi.n	40c6 <_usb_d_dev_ep_trans+0x5a>
    40b8:	f015 0503 	ands.w	r5, r5, #3
    40bc:	d103      	bne.n	40c6 <_usb_d_dev_ep_trans+0x5a>
	    || (!dir && (trans->size < ept->size))) {
    40be:	2f00      	cmp	r7, #0
    40c0:	db05      	blt.n	40ce <_usb_d_dev_ep_trans+0x62>
    40c2:	4291      	cmp	r1, r2
    40c4:	d214      	bcs.n	40f0 <_usb_d_dev_ep_trans+0x84>
		if (!ept->cache) {
    40c6:	68e3      	ldr	r3, [r4, #12]
    40c8:	2b00      	cmp	r3, #0
    40ca:	d041      	beq.n	4150 <_usb_d_dev_ep_trans+0xe4>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
    40cc:	2501      	movs	r5, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    40ce:	7ce3      	ldrb	r3, [r4, #19]
    40d0:	071b      	lsls	r3, r3, #28
    40d2:	d440      	bmi.n	4156 <_usb_d_dev_ep_trans+0xea>
		return USB_HALTED;
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    40d4:	4b23      	ldr	r3, [pc, #140]	; (4164 <_usb_d_dev_ep_trans+0xf8>)
    40d6:	a801      	add	r0, sp, #4
    40d8:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    40da:	7ce3      	ldrb	r3, [r4, #19]
    40dc:	4a22      	ldr	r2, [pc, #136]	; (4168 <_usb_d_dev_ep_trans+0xfc>)
    40de:	f013 0a40 	ands.w	sl, r3, #64	; 0x40
    40e2:	d00e      	beq.n	4102 <_usb_d_dev_ep_trans+0x96>
		atomic_leave_critical(&flags);
    40e4:	a801      	add	r0, sp, #4
    40e6:	4790      	blx	r2
		return USB_BUSY;
    40e8:	2001      	movs	r0, #1
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    40ea:	b002      	add	sp, #8
    40ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!dir && size_n_aligned) {
    40f0:	b12e      	cbz	r6, 40fe <_usb_d_dev_ep_trans+0x92>
		if (!ept->cache) {
    40f2:	68e3      	ldr	r3, [r4, #12]
    40f4:	2b00      	cmp	r3, #0
    40f6:	d1ea      	bne.n	40ce <_usb_d_dev_ep_trans+0x62>
		return -USB_ERR_PARAM;
    40f8:	f06f 0011 	mvn.w	r0, #17
    40fc:	e7f5      	b.n	40ea <_usb_d_dev_ep_trans+0x7e>
	bool use_cache = false;
    40fe:	4635      	mov	r5, r6
    4100:	e7e5      	b.n	40ce <_usb_d_dev_ep_trans+0x62>
	ept->flags.bits.is_busy = 1;
    4102:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4106:	74e3      	strb	r3, [r4, #19]
	atomic_leave_critical(&flags);
    4108:	a801      	add	r0, sp, #4
    410a:	4790      	blx	r2
	ept->trans_buf   = trans->buf;
    410c:	f8d8 3000 	ldr.w	r3, [r8]
    4110:	6023      	str	r3, [r4, #0]
	ept->trans_size  = trans->size;
    4112:	f8d8 3004 	ldr.w	r3, [r8, #4]
    4116:	6063      	str	r3, [r4, #4]
	ept->flags.bits.dir       = dir;
    4118:	7ce3      	ldrb	r3, [r4, #19]
	ept->trans_count = 0;
    411a:	f8c4 a008 	str.w	sl, [r4, #8]
	ept->flags.bits.dir       = dir;
    411e:	f369 13c7 	bfi	r3, r9, #7, #1
	ept->flags.bits.use_cache = use_cache;
    4122:	f365 1345 	bfi	r3, r5, #5, #1
    4126:	74e3      	strb	r3, [r4, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    4128:	f898 3009 	ldrb.w	r3, [r8, #9]
    412c:	b113      	cbz	r3, 4134 <_usb_d_dev_ep_trans+0xc8>
    412e:	fab6 f386 	clz	r3, r6
    4132:	095b      	lsrs	r3, r3, #5
    4134:	7ce2      	ldrb	r2, [r4, #19]
	if (dir) {
    4136:	2f00      	cmp	r7, #0
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    4138:	f363 1204 	bfi	r2, r3, #4, #1
		_usb_d_dev_in_next(ept, false);
    413c:	4620      	mov	r0, r4
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    413e:	74e2      	strb	r2, [r4, #19]
		_usb_d_dev_in_next(ept, false);
    4140:	f04f 0100 	mov.w	r1, #0
    4144:	bfb4      	ite	lt
    4146:	4b09      	ldrlt	r3, [pc, #36]	; (416c <_usb_d_dev_ep_trans+0x100>)
		_usb_d_dev_out_next(ept, false);
    4148:	4b09      	ldrge	r3, [pc, #36]	; (4170 <_usb_d_dev_ep_trans+0x104>)
    414a:	4798      	blx	r3
	return ERR_NONE;
    414c:	2000      	movs	r0, #0
    414e:	e7cc      	b.n	40ea <_usb_d_dev_ep_trans+0x7e>
			return -USB_ERR_FUNC;
    4150:	f06f 0012 	mvn.w	r0, #18
    4154:	e7c9      	b.n	40ea <_usb_d_dev_ep_trans+0x7e>
		return USB_HALTED;
    4156:	2002      	movs	r0, #2
    4158:	e7c7      	b.n	40ea <_usb_d_dev_ep_trans+0x7e>
    415a:	bf00      	nop
    415c:	000033a1 	.word	0x000033a1
    4160:	20031fff 	.word	0x20031fff
    4164:	000011d1 	.word	0x000011d1
    4168:	000011df 	.word	0x000011df
    416c:	00003615 	.word	0x00003615
    4170:	0000376d 	.word	0x0000376d

00004174 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    4174:	4b06      	ldr	r3, [pc, #24]	; (4190 <_usb_d_dev_register_callback+0x1c>)
    4176:	2900      	cmp	r1, #0
    4178:	bf08      	it	eq
    417a:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
    417c:	2801      	cmp	r0, #1
    417e:	d102      	bne.n	4186 <_usb_d_dev_register_callback+0x12>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    4180:	4b04      	ldr	r3, [pc, #16]	; (4194 <_usb_d_dev_register_callback+0x20>)
    4182:	6059      	str	r1, [r3, #4]
    4184:	4770      	bx	lr
	} else if (type == USB_D_CB_SOF) {
    4186:	b908      	cbnz	r0, 418c <_usb_d_dev_register_callback+0x18>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    4188:	4b02      	ldr	r3, [pc, #8]	; (4194 <_usb_d_dev_register_callback+0x20>)
    418a:	6019      	str	r1, [r3, #0]
    418c:	4770      	bx	lr
    418e:	bf00      	nop
    4190:	00003379 	.word	0x00003379
    4194:	20007054 	.word	0x20007054

00004198 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    4198:	4b08      	ldr	r3, [pc, #32]	; (41bc <_usb_d_dev_register_ep_callback+0x24>)
    419a:	2900      	cmp	r1, #0
    419c:	bf08      	it	eq
    419e:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
    41a0:	b910      	cbnz	r0, 41a8 <_usb_d_dev_register_ep_callback+0x10>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    41a2:	4b07      	ldr	r3, [pc, #28]	; (41c0 <_usb_d_dev_register_ep_callback+0x28>)
    41a4:	6099      	str	r1, [r3, #8]
    41a6:	4770      	bx	lr
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    41a8:	2801      	cmp	r0, #1
    41aa:	d102      	bne.n	41b2 <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    41ac:	4b04      	ldr	r3, [pc, #16]	; (41c0 <_usb_d_dev_register_ep_callback+0x28>)
    41ae:	60d9      	str	r1, [r3, #12]
    41b0:	4770      	bx	lr
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    41b2:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    41b4:	bf04      	itt	eq
    41b6:	4b02      	ldreq	r3, [pc, #8]	; (41c0 <_usb_d_dev_register_ep_callback+0x28>)
    41b8:	6119      	streq	r1, [r3, #16]
    41ba:	4770      	bx	lr
    41bc:	00003379 	.word	0x00003379
    41c0:	20007054 	.word	0x20007054

000041c4 <USB_0_Handler>:
    41c4:	4b00      	ldr	r3, [pc, #0]	; (41c8 <USB_0_Handler+0x4>)
    41c6:	4718      	bx	r3
    41c8:	00003919 	.word	0x00003919

000041cc <USB_1_Handler>:
    41cc:	4b00      	ldr	r3, [pc, #0]	; (41d0 <USB_1_Handler+0x4>)
    41ce:	4718      	bx	r3
    41d0:	00003919 	.word	0x00003919

000041d4 <USB_2_Handler>:
    41d4:	4b00      	ldr	r3, [pc, #0]	; (41d8 <USB_2_Handler+0x4>)
    41d6:	4718      	bx	r3
    41d8:	00003919 	.word	0x00003919

000041dc <USB_3_Handler>:
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{

	_usb_d_dev_handler();
    41dc:	4b00      	ldr	r3, [pc, #0]	; (41e0 <USB_3_Handler+0x4>)
    41de:	4718      	bx	r3
    41e0:	00003919 	.word	0x00003919

000041e4 <hri_wdt_get_CTRLA_ALWAYSON_bit>:
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    41e4:	6883      	ldr	r3, [r0, #8]
    41e6:	f013 0f0e 	tst.w	r3, #14
    41ea:	d1fb      	bne.n	41e4 <hri_wdt_get_CTRLA_ALWAYSON_bit>

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	tmp = ((Wdt *)hw)->CTRLA.reg;
    41ec:	7800      	ldrb	r0, [r0, #0]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
	return (bool)tmp;
}
    41ee:	09c0      	lsrs	r0, r0, #7
    41f0:	4770      	bx	lr
	...

000041f4 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    41f4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    41f6:	4604      	mov	r4, r0
    41f8:	b308      	cbz	r0, 423e <_wdt_init+0x4a>
    41fa:	6800      	ldr	r0, [r0, #0]
    41fc:	3000      	adds	r0, #0
    41fe:	bf18      	it	ne
    4200:	2001      	movne	r0, #1
    4202:	4b11      	ldr	r3, [pc, #68]	; (4248 <_wdt_init+0x54>)
    4204:	4911      	ldr	r1, [pc, #68]	; (424c <_wdt_init+0x58>)
    4206:	2250      	movs	r2, #80	; 0x50
    4208:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    420a:	6820      	ldr	r0, [r4, #0]
    420c:	4b10      	ldr	r3, [pc, #64]	; (4250 <_wdt_init+0x5c>)
    420e:	4798      	blx	r3
    4210:	b9b0      	cbnz	r0, 4240 <_wdt_init+0x4c>
    4212:	6823      	ldr	r3, [r4, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    4214:	689a      	ldr	r2, [r3, #8]
    4216:	f012 0f0e 	tst.w	r2, #14
    421a:	d1fb      	bne.n	4214 <_wdt_init+0x20>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    421c:	7818      	ldrb	r0, [r3, #0]
    421e:	f3c0 0040 	ubfx	r0, r0, #1, #1
    4222:	b968      	cbnz	r0, 4240 <_wdt_init+0x4c>

static inline void hri_wdt_write_CONFIG_WINDOW_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    4224:	785a      	ldrb	r2, [r3, #1]
	tmp &= ~WDT_CONFIG_WINDOW_Msk;
    4226:	f002 020f 	and.w	r2, r2, #15
	tmp |= WDT_CONFIG_WINDOW(data);
    422a:	f042 02b0 	orr.w	r2, r2, #176	; 0xb0
	((Wdt *)hw)->CONFIG.reg = tmp;
    422e:	705a      	strb	r2, [r3, #1]
	tmp = ((Wdt *)hw)->CONFIG.reg;
    4230:	785a      	ldrb	r2, [r3, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    4232:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
    4236:	f042 020b 	orr.w	r2, r2, #11
	((Wdt *)hw)->CONFIG.reg = tmp;
    423a:	705a      	strb	r2, [r3, #1]
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
	}

	return ERR_NONE;
    423c:	bd10      	pop	{r4, pc}
    423e:	e7e0      	b.n	4202 <_wdt_init+0xe>
		return ERR_DENIED;
    4240:	f06f 0010 	mvn.w	r0, #16
}
    4244:	bd10      	pop	{r4, pc}
    4246:	bf00      	nop
    4248:	00002009 	.word	0x00002009
    424c:	0000c7f0 	.word	0x0000c7f0
    4250:	000041e5 	.word	0x000041e5

00004254 <_wdt_set_timeout_period>:

/**
 * \brief set timeout period for WDT instance
 */
int32_t _wdt_set_timeout_period(struct wdt_dev *const dev, const uint32_t clk_rate, const uint16_t timeout_period)
{
    4254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4256:	460e      	mov	r6, r1
    4258:	4614      	mov	r4, r2
	uint64_t            tmp;
	uint32_t            period_cycles;
	enum wdt_period_reg timeout_period_reg;
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    425a:	4605      	mov	r5, r0
    425c:	b370      	cbz	r0, 42bc <_wdt_set_timeout_period+0x68>
    425e:	6800      	ldr	r0, [r0, #0]
    4260:	3000      	adds	r0, #0
    4262:	bf18      	it	ne
    4264:	2001      	movne	r0, #1
    4266:	4b32      	ldr	r3, [pc, #200]	; (4330 <_wdt_set_timeout_period+0xdc>)
    4268:	4932      	ldr	r1, [pc, #200]	; (4334 <_wdt_set_timeout_period+0xe0>)
    426a:	227a      	movs	r2, #122	; 0x7a
    426c:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    426e:	6828      	ldr	r0, [r5, #0]
    4270:	4b31      	ldr	r3, [pc, #196]	; (4338 <_wdt_set_timeout_period+0xe4>)
    4272:	4798      	blx	r3
    4274:	2800      	cmp	r0, #0
    4276:	d157      	bne.n	4328 <_wdt_set_timeout_period+0xd4>
    4278:	682a      	ldr	r2, [r5, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    427a:	6893      	ldr	r3, [r2, #8]
    427c:	f013 0f0e 	tst.w	r3, #14
    4280:	d1fb      	bne.n	427a <_wdt_set_timeout_period+0x26>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    4282:	7813      	ldrb	r3, [r2, #0]
    4284:	f3c3 0340 	ubfx	r3, r3, #1, #1
    4288:	2b00      	cmp	r3, #0
    428a:	d14d      	bne.n	4328 <_wdt_set_timeout_period+0xd4>
		return ERR_DENIED;
	} else {
		/* calc the period cycles corresponding to timeout period */
		tmp = (uint64_t)timeout_period * clk_rate;
    428c:	fba4 6706 	umull	r6, r7, r4, r6

		/* check whether overflow*/
		if (tmp >> 32) {
    4290:	463c      	mov	r4, r7
    4292:	461d      	mov	r5, r3
    4294:	ea54 0105 	orrs.w	r1, r4, r5
    4298:	d10d      	bne.n	42b6 <_wdt_set_timeout_period+0x62>
			return ERR_INVALID_ARG;
		}

		period_cycles = (uint32_t)tmp;
		/* calc the register value corresponding to period cysles */
		switch (period_cycles) {
    429a:	f5b6 3f7a 	cmp.w	r6, #256000	; 0x3e800
    429e:	d039      	beq.n	4314 <_wdt_set_timeout_period+0xc0>
    42a0:	d815      	bhi.n	42ce <_wdt_set_timeout_period+0x7a>
    42a2:	f5b6 4ffa 	cmp.w	r6, #32000	; 0x7d00
    42a6:	d031      	beq.n	430c <_wdt_set_timeout_period+0xb8>
    42a8:	d809      	bhi.n	42be <_wdt_set_timeout_period+0x6a>
    42aa:	f5b6 5ffa 	cmp.w	r6, #8000	; 0x1f40
    42ae:	d026      	beq.n	42fe <_wdt_set_timeout_period+0xaa>
    42b0:	f5b6 5f7a 	cmp.w	r6, #16000	; 0x3e80
    42b4:	d022      	beq.n	42fc <_wdt_set_timeout_period+0xa8>
			break;
		case WDT_CLK_16384CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_16384CYCLE;
			break;
		default:
			return ERR_INVALID_ARG;
    42b6:	f06f 000c 	mvn.w	r0, #12
	}

	hri_wdt_write_CONFIG_PER_bf(dev->hw, (uint8_t)timeout_period_reg);

	return ERR_NONE;
}
    42ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    42bc:	e7d3      	b.n	4266 <_wdt_set_timeout_period+0x12>
		switch (period_cycles) {
    42be:	f5b6 4f7a 	cmp.w	r6, #64000	; 0xfa00
    42c2:	d025      	beq.n	4310 <_wdt_set_timeout_period+0xbc>
    42c4:	f5b6 3ffa 	cmp.w	r6, #128000	; 0x1f400
    42c8:	d1f5      	bne.n	42b6 <_wdt_set_timeout_period+0x62>
			timeout_period_reg = WDT_PERIOD_128CYCLE;
    42ca:	2304      	movs	r3, #4
			break;
    42cc:	e017      	b.n	42fe <_wdt_set_timeout_period+0xaa>
		switch (period_cycles) {
    42ce:	f5b6 1ffa 	cmp.w	r6, #2048000	; 0x1f4000
    42d2:	d023      	beq.n	431c <_wdt_set_timeout_period+0xc8>
    42d4:	d807      	bhi.n	42e6 <_wdt_set_timeout_period+0x92>
    42d6:	f5b6 2ffa 	cmp.w	r6, #512000	; 0x7d000
    42da:	d01d      	beq.n	4318 <_wdt_set_timeout_period+0xc4>
    42dc:	f5b6 2f7a 	cmp.w	r6, #1024000	; 0xfa000
    42e0:	d1e9      	bne.n	42b6 <_wdt_set_timeout_period+0x62>
			timeout_period_reg = WDT_PERIOD_1024CYCLE;
    42e2:	2307      	movs	r3, #7
			break;
    42e4:	e00b      	b.n	42fe <_wdt_set_timeout_period+0xaa>
		switch (period_cycles) {
    42e6:	f5b6 0ffa 	cmp.w	r6, #8192000	; 0x7d0000
    42ea:	d019      	beq.n	4320 <_wdt_set_timeout_period+0xcc>
    42ec:	f5b6 0f7a 	cmp.w	r6, #16384000	; 0xfa0000
    42f0:	d018      	beq.n	4324 <_wdt_set_timeout_period+0xd0>
    42f2:	f5b6 1f7a 	cmp.w	r6, #4096000	; 0x3e8000
    42f6:	d1de      	bne.n	42b6 <_wdt_set_timeout_period+0x62>
			timeout_period_reg = WDT_PERIOD_4096CYCLE;
    42f8:	2309      	movs	r3, #9
			break;
    42fa:	e000      	b.n	42fe <_wdt_set_timeout_period+0xaa>
			timeout_period_reg = WDT_PERIOD_16CYCLE;
    42fc:	2301      	movs	r3, #1
	tmp = ((Wdt *)hw)->CONFIG.reg;
    42fe:	7851      	ldrb	r1, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    4300:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
    4304:	430b      	orrs	r3, r1
	((Wdt *)hw)->CONFIG.reg = tmp;
    4306:	7053      	strb	r3, [r2, #1]
	return ERR_NONE;
    4308:	2000      	movs	r0, #0
    430a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			timeout_period_reg = WDT_PERIOD_32CYCLE;
    430c:	2302      	movs	r3, #2
			break;
    430e:	e7f6      	b.n	42fe <_wdt_set_timeout_period+0xaa>
			timeout_period_reg = WDT_PERIOD_64CYCLE;
    4310:	2303      	movs	r3, #3
			break;
    4312:	e7f4      	b.n	42fe <_wdt_set_timeout_period+0xaa>
			timeout_period_reg = WDT_PERIOD_256CYCLE;
    4314:	2305      	movs	r3, #5
			break;
    4316:	e7f2      	b.n	42fe <_wdt_set_timeout_period+0xaa>
			timeout_period_reg = WDT_PERIOD_512CYCLE;
    4318:	2306      	movs	r3, #6
			break;
    431a:	e7f0      	b.n	42fe <_wdt_set_timeout_period+0xaa>
			timeout_period_reg = WDT_PERIOD_2048CYCLE;
    431c:	2308      	movs	r3, #8
			break;
    431e:	e7ee      	b.n	42fe <_wdt_set_timeout_period+0xaa>
			timeout_period_reg = WDT_PERIOD_8192CYCLE;
    4320:	230a      	movs	r3, #10
			break;
    4322:	e7ec      	b.n	42fe <_wdt_set_timeout_period+0xaa>
			timeout_period_reg = WDT_PERIOD_16384CYCLE;
    4324:	230b      	movs	r3, #11
			break;
    4326:	e7ea      	b.n	42fe <_wdt_set_timeout_period+0xaa>
		return ERR_DENIED;
    4328:	f06f 0010 	mvn.w	r0, #16
    432c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    432e:	bf00      	nop
    4330:	00002009 	.word	0x00002009
    4334:	0000c7f0 	.word	0x0000c7f0
    4338:	000041e5 	.word	0x000041e5

0000433c <_wdt_enable>:

/**
 * \brief enbale watchdog timer
 */
int32_t _wdt_enable(struct wdt_dev *const dev)
{
    433c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    433e:	4604      	mov	r4, r0
    4340:	b188      	cbz	r0, 4366 <_wdt_enable+0x2a>
    4342:	6800      	ldr	r0, [r0, #0]
    4344:	3000      	adds	r0, #0
    4346:	bf18      	it	ne
    4348:	2001      	movne	r0, #1
    434a:	4b07      	ldr	r3, [pc, #28]	; (4368 <_wdt_enable+0x2c>)
    434c:	4907      	ldr	r1, [pc, #28]	; (436c <_wdt_enable+0x30>)
    434e:	22fb      	movs	r2, #251	; 0xfb
    4350:	4798      	blx	r3

	hri_wdt_set_CTRLA_ENABLE_bit(dev->hw);
    4352:	6823      	ldr	r3, [r4, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    4354:	6898      	ldr	r0, [r3, #8]
    4356:	f010 000e 	ands.w	r0, r0, #14
    435a:	d1fb      	bne.n	4354 <_wdt_enable+0x18>
	((Wdt *)hw)->CTRLA.reg |= WDT_CTRLA_ENABLE;
    435c:	781a      	ldrb	r2, [r3, #0]
    435e:	f042 0202 	orr.w	r2, r2, #2
    4362:	701a      	strb	r2, [r3, #0]

	return ERR_NONE;
}
    4364:	bd10      	pop	{r4, pc}
    4366:	e7f0      	b.n	434a <_wdt_enable+0xe>
    4368:	00002009 	.word	0x00002009
    436c:	0000c7f0 	.word	0x0000c7f0

00004370 <_wdt_feed>:

/**
 * \brief reset watchdog timer to make wdt work from start
 */
int32_t _wdt_feed(struct wdt_dev *const dev)
{
    4370:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    4372:	4604      	mov	r4, r0
    4374:	b168      	cbz	r0, 4392 <_wdt_feed+0x22>
    4376:	6800      	ldr	r0, [r0, #0]
    4378:	3000      	adds	r0, #0
    437a:	bf18      	it	ne
    437c:	2001      	movne	r0, #1
    437e:	f240 1219 	movw	r2, #281	; 0x119
    4382:	4904      	ldr	r1, [pc, #16]	; (4394 <_wdt_feed+0x24>)
    4384:	4b04      	ldr	r3, [pc, #16]	; (4398 <_wdt_feed+0x28>)
    4386:	4798      	blx	r3

	hri_wdt_write_CLEAR_reg(dev->hw, WDT_CLEAR_CLEAR_KEY);
    4388:	6823      	ldr	r3, [r4, #0]
	((Wdt *)hw)->CLEAR.reg = data;
    438a:	22a5      	movs	r2, #165	; 0xa5
    438c:	731a      	strb	r2, [r3, #12]

	return ERR_NONE;
}
    438e:	2000      	movs	r0, #0
    4390:	bd10      	pop	{r4, pc}
    4392:	e7f4      	b.n	437e <_wdt_feed+0xe>
    4394:	0000c7f0 	.word	0x0000c7f0
    4398:	00002009 	.word	0x00002009

0000439c <gpio_set_pin_level>:
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    439c:	f000 031f 	and.w	r3, r0, #31
    43a0:	0942      	lsrs	r2, r0, #5
    43a2:	2001      	movs	r0, #1
    43a4:	4098      	lsls	r0, r3
    43a6:	4b04      	ldr	r3, [pc, #16]	; (43b8 <gpio_set_pin_level+0x1c>)
    43a8:	01d2      	lsls	r2, r2, #7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    43aa:	4413      	add	r3, r2
	if (level) {
    43ac:	b109      	cbz	r1, 43b2 <gpio_set_pin_level+0x16>
    43ae:	6198      	str	r0, [r3, #24]
    43b0:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    43b2:	6158      	str	r0, [r3, #20]
    43b4:	4770      	bx	lr
    43b6:	bf00      	nop
    43b8:	41008000 	.word	0x41008000

000043bc <gpio_get_pin_level>:
{
    43bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	CRITICAL_SECTION_ENTER();
    43be:	4b0e      	ldr	r3, [pc, #56]	; (43f8 <gpio_get_pin_level+0x3c>)
    43c0:	4605      	mov	r5, r0
    43c2:	a801      	add	r0, sp, #4
    43c4:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    43c6:	096b      	lsrs	r3, r5, #5
    43c8:	490c      	ldr	r1, [pc, #48]	; (43fc <gpio_get_pin_level+0x40>)
    43ca:	01db      	lsls	r3, r3, #7
    43cc:	18ca      	adds	r2, r1, r3
    43ce:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    43d0:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    43d2:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    43d4:	405c      	eors	r4, r3
    43d6:	400c      	ands	r4, r1
	CRITICAL_SECTION_LEAVE();
    43d8:	a801      	add	r0, sp, #4
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    43da:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    43dc:	4b08      	ldr	r3, [pc, #32]	; (4400 <gpio_get_pin_level+0x44>)
    43de:	4798      	blx	r3
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    43e0:	f005 051f 	and.w	r5, r5, #31
    43e4:	2301      	movs	r3, #1
    43e6:	fa03 f505 	lsl.w	r5, r3, r5
    43ea:	4225      	tst	r5, r4
}
    43ec:	bf14      	ite	ne
    43ee:	4618      	movne	r0, r3
    43f0:	2000      	moveq	r0, #0
    43f2:	b003      	add	sp, #12
    43f4:	bd30      	pop	{r4, r5, pc}
    43f6:	bf00      	nop
    43f8:	000011d1 	.word	0x000011d1
    43fc:	41008000 	.word	0x41008000
    4400:	000011df 	.word	0x000011df

00004404 <gpio_set_pin_direction>:
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    4404:	2201      	movs	r2, #1
    4406:	0943      	lsrs	r3, r0, #5
	switch (direction) {
    4408:	4291      	cmp	r1, r2
    440a:	f000 001f 	and.w	r0, r0, #31
    440e:	fa02 f000 	lsl.w	r0, r2, r0
    4412:	d015      	beq.n	4440 <gpio_set_pin_direction+0x3c>
    4414:	d306      	bcc.n	4424 <gpio_set_pin_direction+0x20>
    4416:	2902      	cmp	r1, #2
    4418:	d023      	beq.n	4462 <gpio_set_pin_direction+0x5e>
		ASSERT(false);
    441a:	2245      	movs	r2, #69	; 0x45
    441c:	4914      	ldr	r1, [pc, #80]	; (4470 <gpio_set_pin_direction+0x6c>)
    441e:	4b15      	ldr	r3, [pc, #84]	; (4474 <gpio_set_pin_direction+0x70>)
    4420:	2000      	movs	r0, #0
    4422:	4718      	bx	r3
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    4424:	01db      	lsls	r3, r3, #7
    4426:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    442a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    442e:	6058      	str	r0, [r3, #4]
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    4430:	b282      	uxth	r2, r0
    4432:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    4436:	0c00      	lsrs	r0, r0, #16
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4438:	629a      	str	r2, [r3, #40]	; 0x28
		hri_port_write_WRCONFIG_reg(
    443a:	f040 4040 	orr.w	r0, r0, #3221225472	; 0xc0000000
    443e:	e00e      	b.n	445e <gpio_set_pin_direction+0x5a>
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    4440:	01db      	lsls	r3, r3, #7
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    4442:	b282      	uxth	r2, r0
    4444:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4448:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    444c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    4450:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    4454:	6058      	str	r0, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4456:	629a      	str	r2, [r3, #40]	; 0x28
		hri_port_write_WRCONFIG_reg(PORT,
    4458:	4a07      	ldr	r2, [pc, #28]	; (4478 <gpio_set_pin_direction+0x74>)
    445a:	ea42 4010 	orr.w	r0, r2, r0, lsr #16
    445e:	6298      	str	r0, [r3, #40]	; 0x28
    4460:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4462:	01db      	lsls	r3, r3, #7
    4464:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4468:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    446c:	6098      	str	r0, [r3, #8]
    446e:	e7df      	b.n	4430 <gpio_set_pin_direction+0x2c>
    4470:	0000c805 	.word	0x0000c805
    4474:	00002009 	.word	0x00002009
    4478:	c0020000 	.word	0xc0020000

0000447c <I2C_configMONITOREDINPUTS>:
// * CALLED BY:			  main()                                                                                                       *
// * CALLS:		          No function. ALL macros defined in this function file.                                                       *
// * --------------------------------------------------------------------------------------------------------------------------------- *
int I2C_configMONITOREDINPUTS(uint8_t sda,  uint8_t clk, unsigned char channel)

{
    447c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4480:	460f      	mov	r7, r1
    4482:	4606      	mov	r6, r0
	/* Clip channel for correct assignment */
    channel &= 0x03;

	/* Open an I2C channel, send address 0x68, then send the configuration values for setting up a conversion result */
	I2C_OPEN(sda, clk);
	I2C_START(-1);
    4484:	4d67      	ldr	r5, [pc, #412]	; (4624 <I2C_configMONITOREDINPUTS+0x1a8>)
    4486:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 462c <I2C_configMONITOREDINPUTS+0x1b0>
    448a:	4c67      	ldr	r4, [pc, #412]	; (4628 <I2C_configMONITOREDINPUTS+0x1ac>)
    448c:	2101      	movs	r1, #1
    448e:	4638      	mov	r0, r7
    channel &= 0x03;
    4490:	f002 0a03 	and.w	sl, r2, #3
	I2C_START(-1);
    4494:	47a8      	blx	r5
    4496:	2101      	movs	r1, #1
    4498:	4630      	mov	r0, r6
    449a:	47a8      	blx	r5
    449c:	2102      	movs	r1, #2
    449e:	4630      	mov	r0, r6
    44a0:	47c0      	blx	r8
    44a2:	200f      	movs	r0, #15
    44a4:	47a0      	blx	r4
    44a6:	200f      	movs	r0, #15
    44a8:	47a0      	blx	r4
    44aa:	2100      	movs	r1, #0
    44ac:	4630      	mov	r0, r6
    44ae:	47a8      	blx	r5
    44b0:	200f      	movs	r0, #15
    44b2:	47a0      	blx	r4
    44b4:	2100      	movs	r1, #0
    44b6:	4638      	mov	r0, r7
    44b8:	47a8      	blx	r5
    44ba:	200f      	movs	r0, #15
    44bc:	47a0      	blx	r4
    44be:	f04f 0907 	mov.w	r9, #7
	I2C_SENDADDR(0x68, forloop);
    44c2:	f04f 0b40 	mov.w	fp, #64	; 0x40
    44c6:	f01b 0168 	ands.w	r1, fp, #104	; 0x68
    44ca:	bf18      	it	ne
    44cc:	2101      	movne	r1, #1
    44ce:	4630      	mov	r0, r6
    44d0:	47a8      	blx	r5
    44d2:	200f      	movs	r0, #15
    44d4:	47a0      	blx	r4
    44d6:	2101      	movs	r1, #1
    44d8:	4638      	mov	r0, r7
    44da:	47a8      	blx	r5
    44dc:	200f      	movs	r0, #15
    44de:	47a0      	blx	r4
    44e0:	2100      	movs	r1, #0
    44e2:	4638      	mov	r0, r7
    44e4:	47a8      	blx	r5
    44e6:	200f      	movs	r0, #15
    44e8:	47a0      	blx	r4
    44ea:	f1b9 0901 	subs.w	r9, r9, #1
    44ee:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
    44f2:	d1e8      	bne.n	44c6 <I2C_configMONITOREDINPUTS+0x4a>
	I2C_WRITE();
    44f4:	4649      	mov	r1, r9
    44f6:	4630      	mov	r0, r6
    44f8:	47a8      	blx	r5
    44fa:	200f      	movs	r0, #15
    44fc:	47a0      	blx	r4
    44fe:	2101      	movs	r1, #1
    4500:	4638      	mov	r0, r7
    4502:	47a8      	blx	r5
    4504:	200f      	movs	r0, #15
    4506:	47a0      	blx	r4
    4508:	4649      	mov	r1, r9
    450a:	4638      	mov	r0, r7
    450c:	47a8      	blx	r5
    450e:	200f      	movs	r0, #15
    4510:	47a0      	blx	r4
	I2C_WAITACKOP(-2);
    4512:	2101      	movs	r1, #1
    4514:	4630      	mov	r0, r6
    4516:	47c0      	blx	r8
    4518:	200f      	movs	r0, #15
    451a:	47a0      	blx	r4
    451c:	2101      	movs	r1, #1
    451e:	4638      	mov	r0, r7
    4520:	47a8      	blx	r5
    4522:	200f      	movs	r0, #15
    4524:	47a0      	blx	r4
    4526:	f8df b108 	ldr.w	fp, [pc, #264]	; 4630 <I2C_configMONITOREDINPUTS+0x1b4>
    452a:	4630      	mov	r0, r6
    452c:	47d8      	blx	fp
    452e:	f8cd b004 	str.w	fp, [sp, #4]
    4532:	b198      	cbz	r0, 455c <I2C_configMONITOREDINPUTS+0xe0>
    4534:	2101      	movs	r1, #1
    4536:	4638      	mov	r0, r7
    4538:	47a8      	blx	r5
    453a:	200f      	movs	r0, #15
    453c:	47a0      	blx	r4
    453e:	2101      	movs	r1, #1
    4540:	4630      	mov	r0, r6
    4542:	47a8      	blx	r5
    4544:	200f      	movs	r0, #15
    4546:	47a0      	blx	r4
    4548:	2102      	movs	r1, #2
    454a:	4630      	mov	r0, r6
    454c:	47c0      	blx	r8
    454e:	200f      	movs	r0, #15
    4550:	47a0      	blx	r4
    4552:	f06f 0001 	mvn.w	r0, #1
	/* If successful, and code execution got here, the close the I2C channel */
	I2C_STOP();
	I2C_CLOSE();
	
	return 0;
}
    4556:	b003      	add	sp, #12
    4558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	I2C_WAITACKOP(-2);
    455c:	4649      	mov	r1, r9
    455e:	4638      	mov	r0, r7
    4560:	47a8      	blx	r5
    4562:	200f      	movs	r0, #15
    4564:	47a0      	blx	r4
    4566:	2102      	movs	r1, #2
    4568:	4630      	mov	r0, r6
    456a:	47c0      	blx	r8
    456c:	200f      	movs	r0, #15
    456e:	47a0      	blx	r4
	I2C_SENDDATA(((channel << 5) + 0x80), forloop);
    4570:	ea4f 1a4a 	mov.w	sl, sl, lsl #5
    4574:	f10a 0a80 	add.w	sl, sl, #128	; 0x80
    4578:	f04f 0908 	mov.w	r9, #8
    457c:	f04f 0b80 	mov.w	fp, #128	; 0x80
    4580:	ea1b 010a 	ands.w	r1, fp, sl
    4584:	bf18      	it	ne
    4586:	2101      	movne	r1, #1
    4588:	4630      	mov	r0, r6
    458a:	47a8      	blx	r5
    458c:	200f      	movs	r0, #15
    458e:	47a0      	blx	r4
    4590:	2101      	movs	r1, #1
    4592:	4638      	mov	r0, r7
    4594:	47a8      	blx	r5
    4596:	200f      	movs	r0, #15
    4598:	47a0      	blx	r4
    459a:	2100      	movs	r1, #0
    459c:	4638      	mov	r0, r7
    459e:	47a8      	blx	r5
    45a0:	200f      	movs	r0, #15
    45a2:	47a0      	blx	r4
    45a4:	f1b9 0901 	subs.w	r9, r9, #1
    45a8:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
    45ac:	d1e8      	bne.n	4580 <I2C_configMONITOREDINPUTS+0x104>
	I2C_WAITACKOP(-3);
    45ae:	2101      	movs	r1, #1
    45b0:	4630      	mov	r0, r6
    45b2:	47c0      	blx	r8
    45b4:	200f      	movs	r0, #15
    45b6:	47a0      	blx	r4
    45b8:	2101      	movs	r1, #1
    45ba:	4638      	mov	r0, r7
    45bc:	47a8      	blx	r5
    45be:	200f      	movs	r0, #15
    45c0:	47a0      	blx	r4
    45c2:	4630      	mov	r0, r6
    45c4:	9b01      	ldr	r3, [sp, #4]
    45c6:	4798      	blx	r3
    45c8:	b188      	cbz	r0, 45ee <I2C_configMONITOREDINPUTS+0x172>
    45ca:	2101      	movs	r1, #1
    45cc:	4638      	mov	r0, r7
    45ce:	47a8      	blx	r5
    45d0:	200f      	movs	r0, #15
    45d2:	47a0      	blx	r4
    45d4:	2101      	movs	r1, #1
    45d6:	4630      	mov	r0, r6
    45d8:	47a8      	blx	r5
    45da:	200f      	movs	r0, #15
    45dc:	47a0      	blx	r4
    45de:	2102      	movs	r1, #2
    45e0:	4630      	mov	r0, r6
    45e2:	47c0      	blx	r8
    45e4:	200f      	movs	r0, #15
    45e6:	47a0      	blx	r4
    45e8:	f06f 0002 	mvn.w	r0, #2
    45ec:	e7b3      	b.n	4556 <I2C_configMONITOREDINPUTS+0xda>
    45ee:	4649      	mov	r1, r9
    45f0:	4638      	mov	r0, r7
    45f2:	47a8      	blx	r5
    45f4:	200f      	movs	r0, #15
    45f6:	47a0      	blx	r4
    45f8:	2102      	movs	r1, #2
    45fa:	4630      	mov	r0, r6
    45fc:	47c0      	blx	r8
    45fe:	200f      	movs	r0, #15
    4600:	47a0      	blx	r4
	I2C_STOP();
    4602:	2101      	movs	r1, #1
    4604:	4638      	mov	r0, r7
    4606:	47a8      	blx	r5
    4608:	200f      	movs	r0, #15
    460a:	47a0      	blx	r4
    460c:	2101      	movs	r1, #1
    460e:	4630      	mov	r0, r6
    4610:	47a8      	blx	r5
    4612:	200f      	movs	r0, #15
    4614:	47a0      	blx	r4
    4616:	2102      	movs	r1, #2
    4618:	4630      	mov	r0, r6
    461a:	47c0      	blx	r8
    461c:	200f      	movs	r0, #15
    461e:	47a0      	blx	r4
	return 0;
    4620:	4648      	mov	r0, r9
    4622:	e798      	b.n	4556 <I2C_configMONITOREDINPUTS+0xda>
    4624:	0000439d 	.word	0x0000439d
    4628:	0000122d 	.word	0x0000122d
    462c:	00004405 	.word	0x00004405
    4630:	000043bd 	.word	0x000043bd

00004634 <I2C_readMONITOREDINPUT>:
// * CALLED BY:			  main()                                                                                                       *
// * CALLS:		          No function. ALL macros defined in this function file.                                                       *
// * --------------------------------------------------------------------------------------------------------------------------------- *
int I2C_readMONITOREDINPUT(uint8_t sda,  uint8_t clk, unsigned char *inputH, unsigned char *inputL)

{
    4634:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4638:	4606      	mov	r6, r0
    463a:	460f      	mov	r7, r1
    463c:	4693      	mov	fp, r2
	uint8_t     		i2csda, i2cclk;
	unsigned char		forloop;

	if ((!inputL) || (!inputH)) {
    463e:	469a      	mov	sl, r3
    4640:	2b00      	cmp	r3, #0
    4642:	f000 80f6 	beq.w	4832 <I2C_readMONITOREDINPUT+0x1fe>
    4646:	2a00      	cmp	r2, #0
    4648:	f000 80f3 	beq.w	4832 <I2C_readMONITOREDINPUT+0x1fe>
		return -1;
	}

	/* Open an I2C channel, send address 0x68, then read the input value */
	I2C_OPEN(sda, clk);
	I2C_START(-2);
    464c:	4d7a      	ldr	r5, [pc, #488]	; (4838 <I2C_readMONITOREDINPUT+0x204>)
    464e:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 4844 <I2C_readMONITOREDINPUT+0x210>
    4652:	4c7a      	ldr	r4, [pc, #488]	; (483c <I2C_readMONITOREDINPUT+0x208>)
    4654:	2101      	movs	r1, #1
    4656:	4638      	mov	r0, r7
    4658:	47a8      	blx	r5
    465a:	2101      	movs	r1, #1
    465c:	4630      	mov	r0, r6
    465e:	47a8      	blx	r5
    4660:	2102      	movs	r1, #2
    4662:	4630      	mov	r0, r6
    4664:	47c0      	blx	r8
    4666:	200f      	movs	r0, #15
    4668:	47a0      	blx	r4
    466a:	200f      	movs	r0, #15
    466c:	47a0      	blx	r4
    466e:	2100      	movs	r1, #0
    4670:	4630      	mov	r0, r6
    4672:	47a8      	blx	r5
    4674:	200f      	movs	r0, #15
    4676:	47a0      	blx	r4
    4678:	2100      	movs	r1, #0
    467a:	4638      	mov	r0, r7
    467c:	47a8      	blx	r5
    467e:	200f      	movs	r0, #15
    4680:	47a0      	blx	r4
	I2C_SENDADDR(0x68, forloop);
    4682:	2340      	movs	r3, #64	; 0x40
	I2C_START(-2);
    4684:	f04f 0907 	mov.w	r9, #7
	I2C_SENDADDR(0x68, forloop);
    4688:	9300      	str	r3, [sp, #0]
    468a:	9b00      	ldr	r3, [sp, #0]
    468c:	f013 0168 	ands.w	r1, r3, #104	; 0x68
    4690:	bf18      	it	ne
    4692:	2101      	movne	r1, #1
    4694:	4630      	mov	r0, r6
    4696:	47a8      	blx	r5
    4698:	200f      	movs	r0, #15
    469a:	47a0      	blx	r4
    469c:	2101      	movs	r1, #1
    469e:	4638      	mov	r0, r7
    46a0:	47a8      	blx	r5
    46a2:	200f      	movs	r0, #15
    46a4:	47a0      	blx	r4
    46a6:	2100      	movs	r1, #0
    46a8:	4638      	mov	r0, r7
    46aa:	47a8      	blx	r5
    46ac:	200f      	movs	r0, #15
    46ae:	47a0      	blx	r4
    46b0:	9b00      	ldr	r3, [sp, #0]
    46b2:	f1b9 0901 	subs.w	r9, r9, #1
    46b6:	ea4f 0353 	mov.w	r3, r3, lsr #1
    46ba:	9300      	str	r3, [sp, #0]
    46bc:	d1e5      	bne.n	468a <I2C_readMONITOREDINPUT+0x56>
	I2C_READ();
    46be:	2101      	movs	r1, #1
    46c0:	4630      	mov	r0, r6
    46c2:	47a8      	blx	r5
    46c4:	200f      	movs	r0, #15
    46c6:	47a0      	blx	r4
    46c8:	2101      	movs	r1, #1
    46ca:	4638      	mov	r0, r7
    46cc:	47a8      	blx	r5
    46ce:	200f      	movs	r0, #15
    46d0:	47a0      	blx	r4
    46d2:	4649      	mov	r1, r9
    46d4:	4638      	mov	r0, r7
    46d6:	47a8      	blx	r5
    46d8:	200f      	movs	r0, #15
    46da:	47a0      	blx	r4
	I2C_WAITACKIP(-3);
    46dc:	2101      	movs	r1, #1
    46de:	4630      	mov	r0, r6
    46e0:	47c0      	blx	r8
    46e2:	200f      	movs	r0, #15
    46e4:	47a0      	blx	r4
    46e6:	2101      	movs	r1, #1
    46e8:	4638      	mov	r0, r7
    46ea:	47a8      	blx	r5
    46ec:	200f      	movs	r0, #15
    46ee:	47a0      	blx	r4
    46f0:	4b53      	ldr	r3, [pc, #332]	; (4840 <I2C_readMONITOREDINPUT+0x20c>)
    46f2:	9300      	str	r3, [sp, #0]
    46f4:	4630      	mov	r0, r6
    46f6:	4798      	blx	r3
    46f8:	b198      	cbz	r0, 4722 <I2C_readMONITOREDINPUT+0xee>
    46fa:	2101      	movs	r1, #1
    46fc:	4638      	mov	r0, r7
    46fe:	47a8      	blx	r5
    4700:	200f      	movs	r0, #15
    4702:	47a0      	blx	r4
    4704:	2101      	movs	r1, #1
    4706:	4630      	mov	r0, r6
    4708:	47a8      	blx	r5
    470a:	200f      	movs	r0, #15
    470c:	47a0      	blx	r4
    470e:	2102      	movs	r1, #2
    4710:	4630      	mov	r0, r6
    4712:	47c0      	blx	r8
    4714:	200f      	movs	r0, #15
    4716:	47a0      	blx	r4
    4718:	f06f 0002 	mvn.w	r0, #2
	I2C_STOP();
	I2C_CLOSE();
	/* If successful, and code execution got here, the close the I2C channel */
	
	return 0;
}
    471c:	b003      	add	sp, #12
    471e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	I2C_WAITACKIP(-3);
    4722:	4649      	mov	r1, r9
    4724:	4638      	mov	r0, r7
    4726:	47a8      	blx	r5
    4728:	200f      	movs	r0, #15
    472a:	47a0      	blx	r4
	*inputH = 0;
    472c:	f88b 9000 	strb.w	r9, [fp]
	for (forloop = 0x80; forloop > 0;) {
    4730:	2380      	movs	r3, #128	; 0x80
	*inputH = 0;
    4732:	f04f 0908 	mov.w	r9, #8
		I2C_clockhi();
    4736:	2101      	movs	r1, #1
    4738:	4638      	mov	r0, r7
    473a:	9301      	str	r3, [sp, #4]
    473c:	47a8      	blx	r5
    473e:	200f      	movs	r0, #15
    4740:	47a0      	blx	r4
		if (gpio_get_pin_level(i2csda)) {
    4742:	9b00      	ldr	r3, [sp, #0]
    4744:	4630      	mov	r0, r6
    4746:	4798      	blx	r3
    4748:	9b01      	ldr	r3, [sp, #4]
    474a:	b120      	cbz	r0, 4756 <I2C_readMONITOREDINPUT+0x122>
			(*inputH) |= forloop;
    474c:	f89b 2000 	ldrb.w	r2, [fp]
    4750:	431a      	orrs	r2, r3
    4752:	f88b 2000 	strb.w	r2, [fp]
		I2C_clocklo();
    4756:	2100      	movs	r1, #0
    4758:	4638      	mov	r0, r7
    475a:	9301      	str	r3, [sp, #4]
    475c:	47a8      	blx	r5
    475e:	200f      	movs	r0, #15
    4760:	47a0      	blx	r4
		forloop = forloop / 2;
    4762:	9b01      	ldr	r3, [sp, #4]
	for (forloop = 0x80; forloop > 0;) {
    4764:	f1b9 0901 	subs.w	r9, r9, #1
		forloop = forloop / 2;
    4768:	ea4f 0353 	mov.w	r3, r3, lsr #1
	for (forloop = 0x80; forloop > 0;) {
    476c:	d1e3      	bne.n	4736 <I2C_readMONITOREDINPUT+0x102>
	I2C_SENDACK();
    476e:	2102      	movs	r1, #2
    4770:	4630      	mov	r0, r6
    4772:	47c0      	blx	r8
    4774:	200f      	movs	r0, #15
    4776:	47a0      	blx	r4
    4778:	4649      	mov	r1, r9
    477a:	4630      	mov	r0, r6
    477c:	47a8      	blx	r5
    477e:	200f      	movs	r0, #15
    4780:	47a0      	blx	r4
    4782:	2101      	movs	r1, #1
    4784:	4638      	mov	r0, r7
    4786:	47a8      	blx	r5
    4788:	200f      	movs	r0, #15
    478a:	47a0      	blx	r4
    478c:	4649      	mov	r1, r9
    478e:	4638      	mov	r0, r7
    4790:	47a8      	blx	r5
    4792:	200f      	movs	r0, #15
    4794:	47a0      	blx	r4
    4796:	2101      	movs	r1, #1
    4798:	4630      	mov	r0, r6
    479a:	47c0      	blx	r8
    479c:	200f      	movs	r0, #15
    479e:	47a0      	blx	r4
	for (forloop = 0x80; forloop > 0;) {
    47a0:	f04f 0b80 	mov.w	fp, #128	; 0x80
	*inputL = 0;
    47a4:	f88a 9000 	strb.w	r9, [sl]
    47a8:	f04f 0908 	mov.w	r9, #8
		I2C_clockhi();
    47ac:	2101      	movs	r1, #1
    47ae:	4638      	mov	r0, r7
    47b0:	47a8      	blx	r5
    47b2:	200f      	movs	r0, #15
    47b4:	47a0      	blx	r4
		if (gpio_get_pin_level(i2csda)) {
    47b6:	4630      	mov	r0, r6
    47b8:	9b00      	ldr	r3, [sp, #0]
    47ba:	4798      	blx	r3
    47bc:	b128      	cbz	r0, 47ca <I2C_readMONITOREDINPUT+0x196>
			(*inputL) |= forloop;
    47be:	f89a 3000 	ldrb.w	r3, [sl]
    47c2:	ea4b 0303 	orr.w	r3, fp, r3
    47c6:	f88a 3000 	strb.w	r3, [sl]
		I2C_clocklo();
    47ca:	2100      	movs	r1, #0
    47cc:	4638      	mov	r0, r7
    47ce:	47a8      	blx	r5
    47d0:	200f      	movs	r0, #15
    47d2:	47a0      	blx	r4
	for (forloop = 0x80; forloop > 0;) {
    47d4:	f1b9 0901 	subs.w	r9, r9, #1
		forloop = forloop / 2;
    47d8:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
	for (forloop = 0x80; forloop > 0;) {
    47dc:	d1e6      	bne.n	47ac <I2C_readMONITOREDINPUT+0x178>
	I2C_SENDNACK();	
    47de:	2102      	movs	r1, #2
    47e0:	4630      	mov	r0, r6
    47e2:	47c0      	blx	r8
    47e4:	200f      	movs	r0, #15
    47e6:	47a0      	blx	r4
    47e8:	2101      	movs	r1, #1
    47ea:	4630      	mov	r0, r6
    47ec:	47a8      	blx	r5
    47ee:	200f      	movs	r0, #15
    47f0:	47a0      	blx	r4
    47f2:	2101      	movs	r1, #1
    47f4:	4638      	mov	r0, r7
    47f6:	47a8      	blx	r5
    47f8:	200f      	movs	r0, #15
    47fa:	47a0      	blx	r4
    47fc:	4649      	mov	r1, r9
    47fe:	4638      	mov	r0, r7
    4800:	47a8      	blx	r5
    4802:	200f      	movs	r0, #15
    4804:	47a0      	blx	r4
    4806:	2101      	movs	r1, #1
    4808:	4630      	mov	r0, r6
    480a:	47c0      	blx	r8
    480c:	200f      	movs	r0, #15
    480e:	47a0      	blx	r4
	I2C_STOP();
    4810:	2101      	movs	r1, #1
    4812:	4638      	mov	r0, r7
    4814:	47a8      	blx	r5
    4816:	200f      	movs	r0, #15
    4818:	47a0      	blx	r4
    481a:	2101      	movs	r1, #1
    481c:	4630      	mov	r0, r6
    481e:	47a8      	blx	r5
    4820:	200f      	movs	r0, #15
    4822:	47a0      	blx	r4
    4824:	2102      	movs	r1, #2
    4826:	4630      	mov	r0, r6
    4828:	47c0      	blx	r8
    482a:	200f      	movs	r0, #15
    482c:	47a0      	blx	r4
	return 0;
    482e:	4648      	mov	r0, r9
    4830:	e774      	b.n	471c <I2C_readMONITOREDINPUT+0xe8>
		return -1;
    4832:	f04f 30ff 	mov.w	r0, #4294967295
    4836:	e771      	b.n	471c <I2C_readMONITOREDINPUT+0xe8>
    4838:	0000439d 	.word	0x0000439d
    483c:	0000122d 	.word	0x0000122d
    4840:	000043bd 	.word	0x000043bd
    4844:	00004405 	.word	0x00004405

00004848 <I2C_configEXPANDER>:
// * CALLED BY:			  main()                                                                                                       *
// * CALLS:		          No function. ALL macros defined in this function file.                                                       *
// * --------------------------------------------------------------------------------------------------------------------------------- *
int I2C_configEXPANDER(uint8_t sda,  uint8_t clk)

{
    4848:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    484c:	460f      	mov	r7, r1
    484e:	4606      	mov	r6, r0
	uint8_t     		i2csda, i2cclk;
	unsigned char		forloop;

	/* Open an I2C channel, send address 0x41, index register 0x01 then send the 3 configuration values for inversion, output default and the direction register */
	I2C_OPEN(sda, clk);
	I2C_START(-1);
    4850:	4d76      	ldr	r5, [pc, #472]	; (4a2c <I2C_configEXPANDER+0x1e4>)
    4852:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 4a34 <I2C_configEXPANDER+0x1ec>
    4856:	4c76      	ldr	r4, [pc, #472]	; (4a30 <I2C_configEXPANDER+0x1e8>)
    4858:	2101      	movs	r1, #1
    485a:	4638      	mov	r0, r7
    485c:	47a8      	blx	r5
    485e:	2101      	movs	r1, #1
    4860:	4630      	mov	r0, r6
    4862:	47a8      	blx	r5
    4864:	2102      	movs	r1, #2
    4866:	4630      	mov	r0, r6
    4868:	47c0      	blx	r8
    486a:	200f      	movs	r0, #15
    486c:	47a0      	blx	r4
    486e:	200f      	movs	r0, #15
    4870:	47a0      	blx	r4
    4872:	2100      	movs	r1, #0
    4874:	4630      	mov	r0, r6
    4876:	47a8      	blx	r5
    4878:	200f      	movs	r0, #15
    487a:	47a0      	blx	r4
    487c:	2100      	movs	r1, #0
    487e:	4638      	mov	r0, r7
    4880:	47a8      	blx	r5
    4882:	200f      	movs	r0, #15
    4884:	47a0      	blx	r4
    4886:	f04f 0907 	mov.w	r9, #7
	I2C_SENDADDR(0x41, forloop);
    488a:	f04f 0a40 	mov.w	sl, #64	; 0x40
    488e:	f01a 0141 	ands.w	r1, sl, #65	; 0x41
    4892:	bf18      	it	ne
    4894:	2101      	movne	r1, #1
    4896:	4630      	mov	r0, r6
    4898:	47a8      	blx	r5
    489a:	200f      	movs	r0, #15
    489c:	47a0      	blx	r4
    489e:	2101      	movs	r1, #1
    48a0:	4638      	mov	r0, r7
    48a2:	47a8      	blx	r5
    48a4:	200f      	movs	r0, #15
    48a6:	47a0      	blx	r4
    48a8:	2100      	movs	r1, #0
    48aa:	4638      	mov	r0, r7
    48ac:	47a8      	blx	r5
    48ae:	200f      	movs	r0, #15
    48b0:	47a0      	blx	r4
    48b2:	f1b9 0901 	subs.w	r9, r9, #1
    48b6:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
    48ba:	d1e8      	bne.n	488e <I2C_configEXPANDER+0x46>
	I2C_WRITE();
    48bc:	4649      	mov	r1, r9
    48be:	4630      	mov	r0, r6
    48c0:	47a8      	blx	r5
    48c2:	200f      	movs	r0, #15
    48c4:	47a0      	blx	r4
    48c6:	2101      	movs	r1, #1
    48c8:	4638      	mov	r0, r7
    48ca:	47a8      	blx	r5
    48cc:	200f      	movs	r0, #15
    48ce:	47a0      	blx	r4
    48d0:	4649      	mov	r1, r9
    48d2:	4638      	mov	r0, r7
    48d4:	47a8      	blx	r5
    48d6:	200f      	movs	r0, #15
    48d8:	47a0      	blx	r4
	I2C_WAITACKOP(-2);
    48da:	2101      	movs	r1, #1
    48dc:	4630      	mov	r0, r6
    48de:	47c0      	blx	r8
    48e0:	200f      	movs	r0, #15
    48e2:	47a0      	blx	r4
    48e4:	2101      	movs	r1, #1
    48e6:	4638      	mov	r0, r7
    48e8:	47a8      	blx	r5
    48ea:	200f      	movs	r0, #15
    48ec:	47a0      	blx	r4
    48ee:	f8df a148 	ldr.w	sl, [pc, #328]	; 4a38 <I2C_configEXPANDER+0x1f0>
    48f2:	4630      	mov	r0, r6
    48f4:	47d0      	blx	sl
    48f6:	f8cd a000 	str.w	sl, [sp]
    48fa:	b198      	cbz	r0, 4924 <I2C_configEXPANDER+0xdc>
    48fc:	2101      	movs	r1, #1
    48fe:	4638      	mov	r0, r7
    4900:	47a8      	blx	r5
    4902:	200f      	movs	r0, #15
    4904:	47a0      	blx	r4
    4906:	2101      	movs	r1, #1
    4908:	4630      	mov	r0, r6
    490a:	47a8      	blx	r5
    490c:	200f      	movs	r0, #15
    490e:	47a0      	blx	r4
    4910:	2102      	movs	r1, #2
    4912:	4630      	mov	r0, r6
    4914:	47c0      	blx	r8
    4916:	200f      	movs	r0, #15
    4918:	47a0      	blx	r4
    491a:	f06f 0001 	mvn.w	r0, #1
	/* If successful, and code execution got here, the close the I2C channel */
	I2C_STOP();
	I2C_CLOSE();
	
	return 0;
}
    491e:	b003      	add	sp, #12
    4920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	I2C_WAITACKOP(-2);
    4924:	4649      	mov	r1, r9
    4926:	4638      	mov	r0, r7
    4928:	47a8      	blx	r5
    492a:	200f      	movs	r0, #15
    492c:	47a0      	blx	r4
    492e:	2102      	movs	r1, #2
    4930:	4630      	mov	r0, r6
    4932:	47c0      	blx	r8
    4934:	200f      	movs	r0, #15
    4936:	47a0      	blx	r4
    4938:	f04f 0908 	mov.w	r9, #8
	I2C_SENDDATA(0x01, forloop);
    493c:	f04f 0b80 	mov.w	fp, #128	; 0x80
    4940:	f01b 0101 	ands.w	r1, fp, #1
    4944:	bf18      	it	ne
    4946:	2101      	movne	r1, #1
    4948:	4630      	mov	r0, r6
    494a:	47a8      	blx	r5
    494c:	200f      	movs	r0, #15
    494e:	47a0      	blx	r4
    4950:	2101      	movs	r1, #1
    4952:	4638      	mov	r0, r7
    4954:	47a8      	blx	r5
    4956:	200f      	movs	r0, #15
    4958:	47a0      	blx	r4
    495a:	2100      	movs	r1, #0
    495c:	4638      	mov	r0, r7
    495e:	47a8      	blx	r5
    4960:	200f      	movs	r0, #15
    4962:	47a0      	blx	r4
    4964:	f1b9 0901 	subs.w	r9, r9, #1
    4968:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
    496c:	d1e8      	bne.n	4940 <I2C_configEXPANDER+0xf8>
	I2C_WAITACKOP(-3);
    496e:	2101      	movs	r1, #1
    4970:	4630      	mov	r0, r6
    4972:	47c0      	blx	r8
    4974:	200f      	movs	r0, #15
    4976:	47a0      	blx	r4
    4978:	2101      	movs	r1, #1
    497a:	4638      	mov	r0, r7
    497c:	47a8      	blx	r5
    497e:	200f      	movs	r0, #15
    4980:	47a0      	blx	r4
    4982:	4630      	mov	r0, r6
    4984:	9b00      	ldr	r3, [sp, #0]
    4986:	4798      	blx	r3
    4988:	b188      	cbz	r0, 49ae <I2C_configEXPANDER+0x166>
    498a:	2101      	movs	r1, #1
    498c:	4638      	mov	r0, r7
    498e:	47a8      	blx	r5
    4990:	200f      	movs	r0, #15
    4992:	47a0      	blx	r4
    4994:	2101      	movs	r1, #1
    4996:	4630      	mov	r0, r6
    4998:	47a8      	blx	r5
    499a:	200f      	movs	r0, #15
    499c:	47a0      	blx	r4
    499e:	2102      	movs	r1, #2
    49a0:	4630      	mov	r0, r6
    49a2:	47c0      	blx	r8
    49a4:	200f      	movs	r0, #15
    49a6:	47a0      	blx	r4
    49a8:	f06f 0002 	mvn.w	r0, #2
    49ac:	e7b7      	b.n	491e <I2C_configEXPANDER+0xd6>
    49ae:	4649      	mov	r1, r9
    49b0:	4638      	mov	r0, r7
    49b2:	47a8      	blx	r5
    49b4:	200f      	movs	r0, #15
    49b6:	47a0      	blx	r4
    49b8:	2102      	movs	r1, #2
    49ba:	4630      	mov	r0, r6
    49bc:	47c0      	blx	r8
    49be:	200f      	movs	r0, #15
    49c0:	47a0      	blx	r4
    49c2:	f04f 0908 	mov.w	r9, #8
	I2C_SENDDATA(0x00, forloop);
    49c6:	2100      	movs	r1, #0
    49c8:	4630      	mov	r0, r6
    49ca:	47a8      	blx	r5
    49cc:	200f      	movs	r0, #15
    49ce:	47a0      	blx	r4
    49d0:	2101      	movs	r1, #1
    49d2:	4638      	mov	r0, r7
    49d4:	47a8      	blx	r5
    49d6:	200f      	movs	r0, #15
    49d8:	47a0      	blx	r4
    49da:	2100      	movs	r1, #0
    49dc:	4638      	mov	r0, r7
    49de:	47a8      	blx	r5
    49e0:	200f      	movs	r0, #15
    49e2:	47a0      	blx	r4
    49e4:	f1b9 0901 	subs.w	r9, r9, #1
    49e8:	d1ed      	bne.n	49c6 <I2C_configEXPANDER+0x17e>
	I2C_WAITACKOP(-4);
    49ea:	2101      	movs	r1, #1
    49ec:	4630      	mov	r0, r6
    49ee:	47c0      	blx	r8
    49f0:	200f      	movs	r0, #15
    49f2:	47a0      	blx	r4
    49f4:	2101      	movs	r1, #1
    49f6:	4638      	mov	r0, r7
    49f8:	47a8      	blx	r5
    49fa:	200f      	movs	r0, #15
    49fc:	47a0      	blx	r4
    49fe:	4630      	mov	r0, r6
    4a00:	9b00      	ldr	r3, [sp, #0]
    4a02:	4798      	blx	r3
    4a04:	b1d0      	cbz	r0, 4a3c <I2C_configEXPANDER+0x1f4>
    4a06:	2101      	movs	r1, #1
    4a08:	4638      	mov	r0, r7
    4a0a:	47a8      	blx	r5
    4a0c:	200f      	movs	r0, #15
    4a0e:	47a0      	blx	r4
    4a10:	2101      	movs	r1, #1
    4a12:	4630      	mov	r0, r6
    4a14:	47a8      	blx	r5
    4a16:	200f      	movs	r0, #15
    4a18:	47a0      	blx	r4
    4a1a:	2102      	movs	r1, #2
    4a1c:	4630      	mov	r0, r6
    4a1e:	47c0      	blx	r8
    4a20:	200f      	movs	r0, #15
    4a22:	47a0      	blx	r4
    4a24:	f06f 0003 	mvn.w	r0, #3
    4a28:	e779      	b.n	491e <I2C_configEXPANDER+0xd6>
    4a2a:	bf00      	nop
    4a2c:	0000439d 	.word	0x0000439d
    4a30:	0000122d 	.word	0x0000122d
    4a34:	00004405 	.word	0x00004405
    4a38:	000043bd 	.word	0x000043bd
    4a3c:	4649      	mov	r1, r9
    4a3e:	4638      	mov	r0, r7
    4a40:	47a8      	blx	r5
    4a42:	200f      	movs	r0, #15
    4a44:	47a0      	blx	r4
    4a46:	2102      	movs	r1, #2
    4a48:	4630      	mov	r0, r6
    4a4a:	47c0      	blx	r8
    4a4c:	200f      	movs	r0, #15
    4a4e:	47a0      	blx	r4
	I2C_START(-1);
    4a50:	2101      	movs	r1, #1
    4a52:	4638      	mov	r0, r7
    4a54:	47a8      	blx	r5
    4a56:	2101      	movs	r1, #1
    4a58:	4630      	mov	r0, r6
    4a5a:	47a8      	blx	r5
    4a5c:	2102      	movs	r1, #2
    4a5e:	4630      	mov	r0, r6
    4a60:	47c0      	blx	r8
    4a62:	200f      	movs	r0, #15
    4a64:	47a0      	blx	r4
    4a66:	200f      	movs	r0, #15
    4a68:	47a0      	blx	r4
    4a6a:	4649      	mov	r1, r9
    4a6c:	4630      	mov	r0, r6
    4a6e:	47a8      	blx	r5
    4a70:	200f      	movs	r0, #15
    4a72:	47a0      	blx	r4
    4a74:	4649      	mov	r1, r9
    4a76:	4638      	mov	r0, r7
    4a78:	47a8      	blx	r5
    4a7a:	200f      	movs	r0, #15
    4a7c:	47a0      	blx	r4
    4a7e:	f04f 0907 	mov.w	r9, #7
	I2C_SENDADDR(0x41, forloop);
    4a82:	f04f 0b40 	mov.w	fp, #64	; 0x40
    4a86:	f01b 0141 	ands.w	r1, fp, #65	; 0x41
    4a8a:	bf18      	it	ne
    4a8c:	2101      	movne	r1, #1
    4a8e:	4630      	mov	r0, r6
    4a90:	47a8      	blx	r5
    4a92:	200f      	movs	r0, #15
    4a94:	47a0      	blx	r4
    4a96:	2101      	movs	r1, #1
    4a98:	4638      	mov	r0, r7
    4a9a:	47a8      	blx	r5
    4a9c:	200f      	movs	r0, #15
    4a9e:	47a0      	blx	r4
    4aa0:	2100      	movs	r1, #0
    4aa2:	4638      	mov	r0, r7
    4aa4:	47a8      	blx	r5
    4aa6:	200f      	movs	r0, #15
    4aa8:	47a0      	blx	r4
    4aaa:	f1b9 0901 	subs.w	r9, r9, #1
    4aae:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
    4ab2:	d1e8      	bne.n	4a86 <I2C_configEXPANDER+0x23e>
	I2C_WRITE();
    4ab4:	4649      	mov	r1, r9
    4ab6:	4630      	mov	r0, r6
    4ab8:	47a8      	blx	r5
    4aba:	200f      	movs	r0, #15
    4abc:	47a0      	blx	r4
    4abe:	2101      	movs	r1, #1
    4ac0:	4638      	mov	r0, r7
    4ac2:	47a8      	blx	r5
    4ac4:	200f      	movs	r0, #15
    4ac6:	47a0      	blx	r4
    4ac8:	4649      	mov	r1, r9
    4aca:	4638      	mov	r0, r7
    4acc:	47a8      	blx	r5
    4ace:	200f      	movs	r0, #15
    4ad0:	47a0      	blx	r4
	I2C_WAITACKOP(-2);
    4ad2:	2101      	movs	r1, #1
    4ad4:	4630      	mov	r0, r6
    4ad6:	47c0      	blx	r8
    4ad8:	200f      	movs	r0, #15
    4ada:	47a0      	blx	r4
    4adc:	2101      	movs	r1, #1
    4ade:	4638      	mov	r0, r7
    4ae0:	47a8      	blx	r5
    4ae2:	200f      	movs	r0, #15
    4ae4:	47a0      	blx	r4
    4ae6:	4630      	mov	r0, r6
    4ae8:	9b00      	ldr	r3, [sp, #0]
    4aea:	4798      	blx	r3
    4aec:	2800      	cmp	r0, #0
    4aee:	f47f af05 	bne.w	48fc <I2C_configEXPANDER+0xb4>
    4af2:	4649      	mov	r1, r9
    4af4:	4638      	mov	r0, r7
    4af6:	47a8      	blx	r5
    4af8:	200f      	movs	r0, #15
    4afa:	47a0      	blx	r4
    4afc:	2102      	movs	r1, #2
    4afe:	4630      	mov	r0, r6
    4b00:	47c0      	blx	r8
    4b02:	200f      	movs	r0, #15
    4b04:	47a0      	blx	r4
    4b06:	f04f 0908 	mov.w	r9, #8
	I2C_SENDDATA(0x02, forloop);
    4b0a:	f04f 0b80 	mov.w	fp, #128	; 0x80
    4b0e:	f01b 0102 	ands.w	r1, fp, #2
    4b12:	bf18      	it	ne
    4b14:	2101      	movne	r1, #1
    4b16:	4630      	mov	r0, r6
    4b18:	47a8      	blx	r5
    4b1a:	200f      	movs	r0, #15
    4b1c:	47a0      	blx	r4
    4b1e:	2101      	movs	r1, #1
    4b20:	4638      	mov	r0, r7
    4b22:	47a8      	blx	r5
    4b24:	200f      	movs	r0, #15
    4b26:	47a0      	blx	r4
    4b28:	2100      	movs	r1, #0
    4b2a:	4638      	mov	r0, r7
    4b2c:	47a8      	blx	r5
    4b2e:	200f      	movs	r0, #15
    4b30:	47a0      	blx	r4
    4b32:	f1b9 0901 	subs.w	r9, r9, #1
    4b36:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
    4b3a:	d1e8      	bne.n	4b0e <I2C_configEXPANDER+0x2c6>
	I2C_WAITACKOP(-3);
    4b3c:	2101      	movs	r1, #1
    4b3e:	4630      	mov	r0, r6
    4b40:	47c0      	blx	r8
    4b42:	200f      	movs	r0, #15
    4b44:	47a0      	blx	r4
    4b46:	2101      	movs	r1, #1
    4b48:	4638      	mov	r0, r7
    4b4a:	47a8      	blx	r5
    4b4c:	200f      	movs	r0, #15
    4b4e:	47a0      	blx	r4
    4b50:	4630      	mov	r0, r6
    4b52:	9b00      	ldr	r3, [sp, #0]
    4b54:	4798      	blx	r3
    4b56:	2800      	cmp	r0, #0
    4b58:	f47f af17 	bne.w	498a <I2C_configEXPANDER+0x142>
    4b5c:	4649      	mov	r1, r9
    4b5e:	4638      	mov	r0, r7
    4b60:	47a8      	blx	r5
    4b62:	200f      	movs	r0, #15
    4b64:	47a0      	blx	r4
    4b66:	2102      	movs	r1, #2
    4b68:	4630      	mov	r0, r6
    4b6a:	47c0      	blx	r8
    4b6c:	200f      	movs	r0, #15
    4b6e:	47a0      	blx	r4
    4b70:	f04f 0908 	mov.w	r9, #8
	I2C_SENDDATA(0x00, forloop);
    4b74:	2100      	movs	r1, #0
    4b76:	4630      	mov	r0, r6
    4b78:	47a8      	blx	r5
    4b7a:	200f      	movs	r0, #15
    4b7c:	47a0      	blx	r4
    4b7e:	2101      	movs	r1, #1
    4b80:	4638      	mov	r0, r7
    4b82:	47a8      	blx	r5
    4b84:	200f      	movs	r0, #15
    4b86:	47a0      	blx	r4
    4b88:	2100      	movs	r1, #0
    4b8a:	4638      	mov	r0, r7
    4b8c:	47a8      	blx	r5
    4b8e:	200f      	movs	r0, #15
    4b90:	47a0      	blx	r4
    4b92:	f1b9 0901 	subs.w	r9, r9, #1
    4b96:	d1ed      	bne.n	4b74 <I2C_configEXPANDER+0x32c>
	I2C_WAITACKOP(-4);
    4b98:	2101      	movs	r1, #1
    4b9a:	4630      	mov	r0, r6
    4b9c:	47c0      	blx	r8
    4b9e:	200f      	movs	r0, #15
    4ba0:	47a0      	blx	r4
    4ba2:	2101      	movs	r1, #1
    4ba4:	4638      	mov	r0, r7
    4ba6:	47a8      	blx	r5
    4ba8:	200f      	movs	r0, #15
    4baa:	47a0      	blx	r4
    4bac:	4630      	mov	r0, r6
    4bae:	9b00      	ldr	r3, [sp, #0]
    4bb0:	4798      	blx	r3
    4bb2:	2800      	cmp	r0, #0
    4bb4:	f47f af27 	bne.w	4a06 <I2C_configEXPANDER+0x1be>
    4bb8:	4649      	mov	r1, r9
    4bba:	4638      	mov	r0, r7
    4bbc:	47a8      	blx	r5
    4bbe:	200f      	movs	r0, #15
    4bc0:	47a0      	blx	r4
    4bc2:	2102      	movs	r1, #2
    4bc4:	4630      	mov	r0, r6
    4bc6:	47c0      	blx	r8
    4bc8:	200f      	movs	r0, #15
    4bca:	47a0      	blx	r4
	I2C_START(-1);
    4bcc:	2101      	movs	r1, #1
    4bce:	4638      	mov	r0, r7
    4bd0:	47a8      	blx	r5
    4bd2:	2101      	movs	r1, #1
    4bd4:	4630      	mov	r0, r6
    4bd6:	47a8      	blx	r5
    4bd8:	2102      	movs	r1, #2
    4bda:	4630      	mov	r0, r6
    4bdc:	47c0      	blx	r8
    4bde:	200f      	movs	r0, #15
    4be0:	47a0      	blx	r4
    4be2:	200f      	movs	r0, #15
    4be4:	47a0      	blx	r4
    4be6:	4649      	mov	r1, r9
    4be8:	4630      	mov	r0, r6
    4bea:	47a8      	blx	r5
    4bec:	200f      	movs	r0, #15
    4bee:	47a0      	blx	r4
    4bf0:	4649      	mov	r1, r9
    4bf2:	4638      	mov	r0, r7
    4bf4:	47a8      	blx	r5
    4bf6:	200f      	movs	r0, #15
    4bf8:	47a0      	blx	r4
    4bfa:	f04f 0907 	mov.w	r9, #7
	I2C_SENDADDR(0x41, forloop);
    4bfe:	f04f 0b40 	mov.w	fp, #64	; 0x40
    4c02:	f01b 0141 	ands.w	r1, fp, #65	; 0x41
    4c06:	bf18      	it	ne
    4c08:	2101      	movne	r1, #1
    4c0a:	4630      	mov	r0, r6
    4c0c:	47a8      	blx	r5
    4c0e:	200f      	movs	r0, #15
    4c10:	47a0      	blx	r4
    4c12:	2101      	movs	r1, #1
    4c14:	4638      	mov	r0, r7
    4c16:	47a8      	blx	r5
    4c18:	200f      	movs	r0, #15
    4c1a:	47a0      	blx	r4
    4c1c:	2100      	movs	r1, #0
    4c1e:	4638      	mov	r0, r7
    4c20:	47a8      	blx	r5
    4c22:	200f      	movs	r0, #15
    4c24:	47a0      	blx	r4
    4c26:	f1b9 0901 	subs.w	r9, r9, #1
    4c2a:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
    4c2e:	d1e8      	bne.n	4c02 <I2C_configEXPANDER+0x3ba>
	I2C_WRITE();
    4c30:	4649      	mov	r1, r9
    4c32:	4630      	mov	r0, r6
    4c34:	47a8      	blx	r5
    4c36:	200f      	movs	r0, #15
    4c38:	47a0      	blx	r4
    4c3a:	2101      	movs	r1, #1
    4c3c:	4638      	mov	r0, r7
    4c3e:	47a8      	blx	r5
    4c40:	200f      	movs	r0, #15
    4c42:	47a0      	blx	r4
    4c44:	4649      	mov	r1, r9
    4c46:	4638      	mov	r0, r7
    4c48:	47a8      	blx	r5
    4c4a:	200f      	movs	r0, #15
    4c4c:	47a0      	blx	r4
	I2C_WAITACKOP(-2);
    4c4e:	2101      	movs	r1, #1
    4c50:	4630      	mov	r0, r6
    4c52:	47c0      	blx	r8
    4c54:	200f      	movs	r0, #15
    4c56:	47a0      	blx	r4
    4c58:	2101      	movs	r1, #1
    4c5a:	4638      	mov	r0, r7
    4c5c:	47a8      	blx	r5
    4c5e:	200f      	movs	r0, #15
    4c60:	47a0      	blx	r4
    4c62:	4630      	mov	r0, r6
    4c64:	9b00      	ldr	r3, [sp, #0]
    4c66:	4798      	blx	r3
    4c68:	2800      	cmp	r0, #0
    4c6a:	f47f ae47 	bne.w	48fc <I2C_configEXPANDER+0xb4>
    4c6e:	4649      	mov	r1, r9
    4c70:	4638      	mov	r0, r7
    4c72:	47a8      	blx	r5
    4c74:	200f      	movs	r0, #15
    4c76:	47a0      	blx	r4
    4c78:	2102      	movs	r1, #2
    4c7a:	4630      	mov	r0, r6
    4c7c:	47c0      	blx	r8
    4c7e:	200f      	movs	r0, #15
    4c80:	47a0      	blx	r4
    4c82:	f04f 0908 	mov.w	r9, #8
	I2C_SENDDATA(0x03, forloop);
    4c86:	f04f 0b80 	mov.w	fp, #128	; 0x80
    4c8a:	f01b 0103 	ands.w	r1, fp, #3
    4c8e:	bf18      	it	ne
    4c90:	2101      	movne	r1, #1
    4c92:	4630      	mov	r0, r6
    4c94:	47a8      	blx	r5
    4c96:	200f      	movs	r0, #15
    4c98:	47a0      	blx	r4
    4c9a:	2101      	movs	r1, #1
    4c9c:	4638      	mov	r0, r7
    4c9e:	47a8      	blx	r5
    4ca0:	200f      	movs	r0, #15
    4ca2:	47a0      	blx	r4
    4ca4:	2100      	movs	r1, #0
    4ca6:	4638      	mov	r0, r7
    4ca8:	47a8      	blx	r5
    4caa:	200f      	movs	r0, #15
    4cac:	47a0      	blx	r4
    4cae:	f1b9 0901 	subs.w	r9, r9, #1
    4cb2:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
    4cb6:	d1e8      	bne.n	4c8a <I2C_configEXPANDER+0x442>
	I2C_WAITACKOP(-3);
    4cb8:	2101      	movs	r1, #1
    4cba:	4630      	mov	r0, r6
    4cbc:	47c0      	blx	r8
    4cbe:	200f      	movs	r0, #15
    4cc0:	47a0      	blx	r4
    4cc2:	2101      	movs	r1, #1
    4cc4:	4638      	mov	r0, r7
    4cc6:	47a8      	blx	r5
    4cc8:	200f      	movs	r0, #15
    4cca:	47a0      	blx	r4
    4ccc:	4630      	mov	r0, r6
    4cce:	9b00      	ldr	r3, [sp, #0]
    4cd0:	4798      	blx	r3
    4cd2:	2800      	cmp	r0, #0
    4cd4:	f47f ae59 	bne.w	498a <I2C_configEXPANDER+0x142>
    4cd8:	4649      	mov	r1, r9
    4cda:	4638      	mov	r0, r7
    4cdc:	47a8      	blx	r5
    4cde:	200f      	movs	r0, #15
    4ce0:	47a0      	blx	r4
    4ce2:	2102      	movs	r1, #2
    4ce4:	4630      	mov	r0, r6
    4ce6:	47c0      	blx	r8
    4ce8:	200f      	movs	r0, #15
    4cea:	47a0      	blx	r4
    4cec:	f8df a098 	ldr.w	sl, [pc, #152]	; 4d88 <I2C_configEXPANDER+0x540>
    4cf0:	f8df 9098 	ldr.w	r9, [pc, #152]	; 4d8c <I2C_configEXPANDER+0x544>
    4cf4:	2308      	movs	r3, #8
    4cf6:	9301      	str	r3, [sp, #4]
	I2C_SENDDATA(0xC0, forloop);
    4cf8:	f04f 0b80 	mov.w	fp, #128	; 0x80
    4cfc:	f01b 01c0 	ands.w	r1, fp, #192	; 0xc0
    4d00:	bf18      	it	ne
    4d02:	2101      	movne	r1, #1
    4d04:	4630      	mov	r0, r6
    4d06:	47d0      	blx	sl
    4d08:	200f      	movs	r0, #15
    4d0a:	47c8      	blx	r9
    4d0c:	2101      	movs	r1, #1
    4d0e:	4638      	mov	r0, r7
    4d10:	47d0      	blx	sl
    4d12:	200f      	movs	r0, #15
    4d14:	47c8      	blx	r9
    4d16:	2100      	movs	r1, #0
    4d18:	4638      	mov	r0, r7
    4d1a:	47d0      	blx	sl
    4d1c:	200f      	movs	r0, #15
    4d1e:	47c8      	blx	r9
    4d20:	9b01      	ldr	r3, [sp, #4]
    4d22:	3b01      	subs	r3, #1
    4d24:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
    4d28:	9301      	str	r3, [sp, #4]
    4d2a:	d1e7      	bne.n	4cfc <I2C_configEXPANDER+0x4b4>
	I2C_WAITACKOP(-4);		
    4d2c:	2101      	movs	r1, #1
    4d2e:	4630      	mov	r0, r6
    4d30:	f8df b05c 	ldr.w	fp, [pc, #92]	; 4d90 <I2C_configEXPANDER+0x548>
    4d34:	47d8      	blx	fp
    4d36:	200f      	movs	r0, #15
    4d38:	47c8      	blx	r9
    4d3a:	2101      	movs	r1, #1
    4d3c:	4638      	mov	r0, r7
    4d3e:	47d0      	blx	sl
    4d40:	200f      	movs	r0, #15
    4d42:	47c8      	blx	r9
    4d44:	4630      	mov	r0, r6
    4d46:	9b00      	ldr	r3, [sp, #0]
    4d48:	4798      	blx	r3
    4d4a:	2800      	cmp	r0, #0
    4d4c:	f47f ae5b 	bne.w	4a06 <I2C_configEXPANDER+0x1be>
    4d50:	9901      	ldr	r1, [sp, #4]
    4d52:	4638      	mov	r0, r7
    4d54:	47d0      	blx	sl
    4d56:	200f      	movs	r0, #15
    4d58:	47c8      	blx	r9
    4d5a:	2102      	movs	r1, #2
    4d5c:	4630      	mov	r0, r6
    4d5e:	47d8      	blx	fp
    4d60:	200f      	movs	r0, #15
    4d62:	47c8      	blx	r9
	I2C_STOP();
    4d64:	2101      	movs	r1, #1
    4d66:	4638      	mov	r0, r7
    4d68:	47d0      	blx	sl
    4d6a:	200f      	movs	r0, #15
    4d6c:	47c8      	blx	r9
    4d6e:	2101      	movs	r1, #1
    4d70:	4630      	mov	r0, r6
    4d72:	47d0      	blx	sl
    4d74:	200f      	movs	r0, #15
    4d76:	47c8      	blx	r9
    4d78:	2102      	movs	r1, #2
    4d7a:	4630      	mov	r0, r6
    4d7c:	47d8      	blx	fp
    4d7e:	200f      	movs	r0, #15
    4d80:	47c8      	blx	r9
	return 0;
    4d82:	9801      	ldr	r0, [sp, #4]
    4d84:	e5cb      	b.n	491e <I2C_configEXPANDER+0xd6>
    4d86:	bf00      	nop
    4d88:	0000439d 	.word	0x0000439d
    4d8c:	0000122d 	.word	0x0000122d
    4d90:	00004405 	.word	0x00004405

00004d94 <I2C_setEXPANDER>:
// * CALLED BY:			  main()                                                                                                       *
// * CALLS:		          No function. ALL macros defined in this function file.                                                       *
// * --------------------------------------------------------------------------------------------------------------------------------- *
int I2C_setEXPANDER(uint8_t sda,  uint8_t clk, unsigned char relay)

{
    4d94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4d98:	460f      	mov	r7, r1
    4d9a:	4606      	mov	r6, r0
	uint8_t     		i2csda, i2cclk;
	unsigned char		forloop;

	/* Open an I2C channel, send address 0x41, index register 0x01 then send the relay output value */
	I2C_OPEN(sda, clk);
	I2C_START(-1);
    4d9c:	4d86      	ldr	r5, [pc, #536]	; (4fb8 <I2C_setEXPANDER+0x224>)
{
    4d9e:	9201      	str	r2, [sp, #4]
	I2C_START(-1);
    4da0:	2101      	movs	r1, #1
    4da2:	4638      	mov	r0, r7
    4da4:	47a8      	blx	r5
    4da6:	2101      	movs	r1, #1
    4da8:	4630      	mov	r0, r6
    4daa:	47a8      	blx	r5
    4dac:	f8df 8210 	ldr.w	r8, [pc, #528]	; 4fc0 <I2C_setEXPANDER+0x22c>
    4db0:	4c82      	ldr	r4, [pc, #520]	; (4fbc <I2C_setEXPANDER+0x228>)
    4db2:	2102      	movs	r1, #2
    4db4:	4630      	mov	r0, r6
    4db6:	47c0      	blx	r8
    4db8:	200f      	movs	r0, #15
    4dba:	47a0      	blx	r4
    4dbc:	200f      	movs	r0, #15
    4dbe:	47a0      	blx	r4
    4dc0:	2100      	movs	r1, #0
    4dc2:	4630      	mov	r0, r6
    4dc4:	47a8      	blx	r5
    4dc6:	200f      	movs	r0, #15
    4dc8:	47a0      	blx	r4
    4dca:	2100      	movs	r1, #0
    4dcc:	4638      	mov	r0, r7
    4dce:	47a8      	blx	r5
    4dd0:	200f      	movs	r0, #15
    4dd2:	47a0      	blx	r4
    4dd4:	f04f 0907 	mov.w	r9, #7
	I2C_SENDADDR(0x41, forloop);
    4dd8:	f04f 0a40 	mov.w	sl, #64	; 0x40
    4ddc:	f01a 0141 	ands.w	r1, sl, #65	; 0x41
    4de0:	bf18      	it	ne
    4de2:	2101      	movne	r1, #1
    4de4:	4630      	mov	r0, r6
    4de6:	47a8      	blx	r5
    4de8:	200f      	movs	r0, #15
    4dea:	47a0      	blx	r4
    4dec:	2101      	movs	r1, #1
    4dee:	4638      	mov	r0, r7
    4df0:	47a8      	blx	r5
    4df2:	200f      	movs	r0, #15
    4df4:	47a0      	blx	r4
    4df6:	2100      	movs	r1, #0
    4df8:	4638      	mov	r0, r7
    4dfa:	47a8      	blx	r5
    4dfc:	200f      	movs	r0, #15
    4dfe:	47a0      	blx	r4
    4e00:	f1b9 0901 	subs.w	r9, r9, #1
    4e04:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
    4e08:	d1e8      	bne.n	4ddc <I2C_setEXPANDER+0x48>
	I2C_WRITE();
    4e0a:	4649      	mov	r1, r9
    4e0c:	4630      	mov	r0, r6
    4e0e:	47a8      	blx	r5
    4e10:	200f      	movs	r0, #15
    4e12:	47a0      	blx	r4
    4e14:	2101      	movs	r1, #1
    4e16:	4638      	mov	r0, r7
    4e18:	47a8      	blx	r5
    4e1a:	200f      	movs	r0, #15
    4e1c:	47a0      	blx	r4
    4e1e:	4649      	mov	r1, r9
    4e20:	4638      	mov	r0, r7
    4e22:	47a8      	blx	r5
    4e24:	200f      	movs	r0, #15
    4e26:	47a0      	blx	r4
	I2C_WAITACKOP(-2);
    4e28:	2101      	movs	r1, #1
    4e2a:	4630      	mov	r0, r6
    4e2c:	47c0      	blx	r8
    4e2e:	200f      	movs	r0, #15
    4e30:	47a0      	blx	r4
    4e32:	2101      	movs	r1, #1
    4e34:	4638      	mov	r0, r7
    4e36:	47a8      	blx	r5
    4e38:	200f      	movs	r0, #15
    4e3a:	47a0      	blx	r4
    4e3c:	f8df a184 	ldr.w	sl, [pc, #388]	; 4fc4 <I2C_setEXPANDER+0x230>
    4e40:	4630      	mov	r0, r6
    4e42:	47d0      	blx	sl
    4e44:	b198      	cbz	r0, 4e6e <I2C_setEXPANDER+0xda>
    4e46:	2101      	movs	r1, #1
    4e48:	4638      	mov	r0, r7
    4e4a:	47a8      	blx	r5
    4e4c:	200f      	movs	r0, #15
    4e4e:	47a0      	blx	r4
    4e50:	2101      	movs	r1, #1
    4e52:	4630      	mov	r0, r6
    4e54:	47a8      	blx	r5
    4e56:	200f      	movs	r0, #15
    4e58:	47a0      	blx	r4
    4e5a:	2102      	movs	r1, #2
    4e5c:	4630      	mov	r0, r6
    4e5e:	47c0      	blx	r8
    4e60:	200f      	movs	r0, #15
    4e62:	47a0      	blx	r4
    4e64:	f06f 0001 	mvn.w	r0, #1
	/* If successful, and code execution got here, the close the I2C channel */
	I2C_STOP();
	I2C_CLOSE();
	
	return 0;
}
    4e68:	b003      	add	sp, #12
    4e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	I2C_WAITACKOP(-2);
    4e6e:	4649      	mov	r1, r9
    4e70:	4638      	mov	r0, r7
    4e72:	47a8      	blx	r5
    4e74:	200f      	movs	r0, #15
    4e76:	47a0      	blx	r4
    4e78:	2102      	movs	r1, #2
    4e7a:	4630      	mov	r0, r6
    4e7c:	47c0      	blx	r8
    4e7e:	200f      	movs	r0, #15
    4e80:	47a0      	blx	r4
    4e82:	f04f 0908 	mov.w	r9, #8
	I2C_SENDDATA(0x01, forloop);
    4e86:	f04f 0b80 	mov.w	fp, #128	; 0x80
    4e8a:	f01b 0101 	ands.w	r1, fp, #1
    4e8e:	bf18      	it	ne
    4e90:	2101      	movne	r1, #1
    4e92:	4630      	mov	r0, r6
    4e94:	47a8      	blx	r5
    4e96:	200f      	movs	r0, #15
    4e98:	47a0      	blx	r4
    4e9a:	2101      	movs	r1, #1
    4e9c:	4638      	mov	r0, r7
    4e9e:	47a8      	blx	r5
    4ea0:	200f      	movs	r0, #15
    4ea2:	47a0      	blx	r4
    4ea4:	2100      	movs	r1, #0
    4ea6:	4638      	mov	r0, r7
    4ea8:	47a8      	blx	r5
    4eaa:	200f      	movs	r0, #15
    4eac:	47a0      	blx	r4
    4eae:	f1b9 0901 	subs.w	r9, r9, #1
    4eb2:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
    4eb6:	d1e8      	bne.n	4e8a <I2C_setEXPANDER+0xf6>
	I2C_WAITACKOP(-3);
    4eb8:	2101      	movs	r1, #1
    4eba:	4630      	mov	r0, r6
    4ebc:	47c0      	blx	r8
    4ebe:	200f      	movs	r0, #15
    4ec0:	47a0      	blx	r4
    4ec2:	2101      	movs	r1, #1
    4ec4:	4638      	mov	r0, r7
    4ec6:	47a8      	blx	r5
    4ec8:	200f      	movs	r0, #15
    4eca:	47a0      	blx	r4
    4ecc:	4630      	mov	r0, r6
    4ece:	47d0      	blx	sl
    4ed0:	b188      	cbz	r0, 4ef6 <I2C_setEXPANDER+0x162>
    4ed2:	2101      	movs	r1, #1
    4ed4:	4638      	mov	r0, r7
    4ed6:	47a8      	blx	r5
    4ed8:	200f      	movs	r0, #15
    4eda:	47a0      	blx	r4
    4edc:	2101      	movs	r1, #1
    4ede:	4630      	mov	r0, r6
    4ee0:	47a8      	blx	r5
    4ee2:	200f      	movs	r0, #15
    4ee4:	47a0      	blx	r4
    4ee6:	2102      	movs	r1, #2
    4ee8:	4630      	mov	r0, r6
    4eea:	47c0      	blx	r8
    4eec:	200f      	movs	r0, #15
    4eee:	47a0      	blx	r4
    4ef0:	f06f 0002 	mvn.w	r0, #2
    4ef4:	e7b8      	b.n	4e68 <I2C_setEXPANDER+0xd4>
    4ef6:	4649      	mov	r1, r9
    4ef8:	4638      	mov	r0, r7
    4efa:	47a8      	blx	r5
    4efc:	200f      	movs	r0, #15
    4efe:	47a0      	blx	r4
    4f00:	2102      	movs	r1, #2
    4f02:	4630      	mov	r0, r6
    4f04:	47c0      	blx	r8
    4f06:	200f      	movs	r0, #15
    4f08:	47a0      	blx	r4
    4f0a:	f04f 0908 	mov.w	r9, #8
	I2C_SENDDATA(relay, forloop);
    4f0e:	f04f 0b80 	mov.w	fp, #128	; 0x80
    4f12:	9b01      	ldr	r3, [sp, #4]
    4f14:	ea13 010b 	ands.w	r1, r3, fp
    4f18:	bf18      	it	ne
    4f1a:	2101      	movne	r1, #1
    4f1c:	4630      	mov	r0, r6
    4f1e:	47a8      	blx	r5
    4f20:	200f      	movs	r0, #15
    4f22:	47a0      	blx	r4
    4f24:	2101      	movs	r1, #1
    4f26:	4638      	mov	r0, r7
    4f28:	47a8      	blx	r5
    4f2a:	200f      	movs	r0, #15
    4f2c:	47a0      	blx	r4
    4f2e:	2100      	movs	r1, #0
    4f30:	4638      	mov	r0, r7
    4f32:	47a8      	blx	r5
    4f34:	200f      	movs	r0, #15
    4f36:	47a0      	blx	r4
    4f38:	f1b9 0901 	subs.w	r9, r9, #1
    4f3c:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
    4f40:	d1e7      	bne.n	4f12 <I2C_setEXPANDER+0x17e>
	I2C_WAITACKOP(-4);
    4f42:	2101      	movs	r1, #1
    4f44:	4630      	mov	r0, r6
    4f46:	47c0      	blx	r8
    4f48:	200f      	movs	r0, #15
    4f4a:	47a0      	blx	r4
    4f4c:	2101      	movs	r1, #1
    4f4e:	4638      	mov	r0, r7
    4f50:	47a8      	blx	r5
    4f52:	200f      	movs	r0, #15
    4f54:	47a0      	blx	r4
    4f56:	4630      	mov	r0, r6
    4f58:	47d0      	blx	sl
    4f5a:	b188      	cbz	r0, 4f80 <I2C_setEXPANDER+0x1ec>
    4f5c:	2101      	movs	r1, #1
    4f5e:	4638      	mov	r0, r7
    4f60:	47a8      	blx	r5
    4f62:	200f      	movs	r0, #15
    4f64:	47a0      	blx	r4
    4f66:	2101      	movs	r1, #1
    4f68:	4630      	mov	r0, r6
    4f6a:	47a8      	blx	r5
    4f6c:	200f      	movs	r0, #15
    4f6e:	47a0      	blx	r4
    4f70:	2102      	movs	r1, #2
    4f72:	4630      	mov	r0, r6
    4f74:	47c0      	blx	r8
    4f76:	200f      	movs	r0, #15
    4f78:	47a0      	blx	r4
    4f7a:	f06f 0003 	mvn.w	r0, #3
    4f7e:	e773      	b.n	4e68 <I2C_setEXPANDER+0xd4>
    4f80:	4649      	mov	r1, r9
    4f82:	4638      	mov	r0, r7
    4f84:	47a8      	blx	r5
    4f86:	200f      	movs	r0, #15
    4f88:	47a0      	blx	r4
    4f8a:	2102      	movs	r1, #2
    4f8c:	4630      	mov	r0, r6
    4f8e:	47c0      	blx	r8
    4f90:	200f      	movs	r0, #15
    4f92:	47a0      	blx	r4
	I2C_STOP();
    4f94:	2101      	movs	r1, #1
    4f96:	4638      	mov	r0, r7
    4f98:	47a8      	blx	r5
    4f9a:	200f      	movs	r0, #15
    4f9c:	47a0      	blx	r4
    4f9e:	2101      	movs	r1, #1
    4fa0:	4630      	mov	r0, r6
    4fa2:	47a8      	blx	r5
    4fa4:	200f      	movs	r0, #15
    4fa6:	47a0      	blx	r4
    4fa8:	2102      	movs	r1, #2
    4faa:	4630      	mov	r0, r6
    4fac:	47c0      	blx	r8
    4fae:	200f      	movs	r0, #15
    4fb0:	47a0      	blx	r4
	return 0;
    4fb2:	4648      	mov	r0, r9
    4fb4:	e758      	b.n	4e68 <I2C_setEXPANDER+0xd4>
    4fb6:	bf00      	nop
    4fb8:	0000439d 	.word	0x0000439d
    4fbc:	0000122d 	.word	0x0000122d
    4fc0:	00004405 	.word	0x00004405
    4fc4:	000043bd 	.word	0x000043bd

00004fc8 <I2C_readEXPANDER>:
// * CALLED BY:			  main()                                                                                                       *
// * CALLS:		          No function. ALL macros defined in this function file.                                                       *
// * --------------------------------------------------------------------------------------------------------------------------------- *
int I2C_readEXPANDER(uint8_t sda,  uint8_t clk, unsigned char *inputs)

{
    4fc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4fcc:	4606      	mov	r6, r0
    4fce:	460f      	mov	r7, r1
	uint8_t     		i2csda, i2cclk;
	unsigned char		forloop;

    if (!inputs) {
    4fd0:	4692      	mov	sl, r2
    4fd2:	2a00      	cmp	r2, #0
    4fd4:	f000 8148 	beq.w	5268 <I2C_readEXPANDER+0x2a0>
		return -1;	
	}

	/* Open an I2C channel, send address 0x41, index register 0x00 then read the input value */
	I2C_OPEN(sda, clk);
	I2C_START(-2);
    4fd8:	4da5      	ldr	r5, [pc, #660]	; (5270 <I2C_readEXPANDER+0x2a8>)
    4fda:	f8df 829c 	ldr.w	r8, [pc, #668]	; 5278 <I2C_readEXPANDER+0x2b0>
    4fde:	4ca5      	ldr	r4, [pc, #660]	; (5274 <I2C_readEXPANDER+0x2ac>)
    4fe0:	2101      	movs	r1, #1
    4fe2:	4638      	mov	r0, r7
    4fe4:	47a8      	blx	r5
    4fe6:	2101      	movs	r1, #1
    4fe8:	4630      	mov	r0, r6
    4fea:	47a8      	blx	r5
    4fec:	2102      	movs	r1, #2
    4fee:	4630      	mov	r0, r6
    4ff0:	47c0      	blx	r8
    4ff2:	200f      	movs	r0, #15
    4ff4:	47a0      	blx	r4
    4ff6:	200f      	movs	r0, #15
    4ff8:	47a0      	blx	r4
    4ffa:	2100      	movs	r1, #0
    4ffc:	4630      	mov	r0, r6
    4ffe:	47a8      	blx	r5
    5000:	200f      	movs	r0, #15
    5002:	47a0      	blx	r4
    5004:	2100      	movs	r1, #0
    5006:	4638      	mov	r0, r7
    5008:	47a8      	blx	r5
    500a:	200f      	movs	r0, #15
    500c:	47a0      	blx	r4
    500e:	f04f 0907 	mov.w	r9, #7
	I2C_SENDADDR(0x41, forloop);
    5012:	f04f 0b40 	mov.w	fp, #64	; 0x40
    5016:	f01b 0141 	ands.w	r1, fp, #65	; 0x41
    501a:	bf18      	it	ne
    501c:	2101      	movne	r1, #1
    501e:	4630      	mov	r0, r6
    5020:	47a8      	blx	r5
    5022:	200f      	movs	r0, #15
    5024:	47a0      	blx	r4
    5026:	2101      	movs	r1, #1
    5028:	4638      	mov	r0, r7
    502a:	47a8      	blx	r5
    502c:	200f      	movs	r0, #15
    502e:	47a0      	blx	r4
    5030:	2100      	movs	r1, #0
    5032:	4638      	mov	r0, r7
    5034:	47a8      	blx	r5
    5036:	200f      	movs	r0, #15
    5038:	47a0      	blx	r4
    503a:	f1b9 0901 	subs.w	r9, r9, #1
    503e:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
    5042:	d1e8      	bne.n	5016 <I2C_readEXPANDER+0x4e>
	I2C_WRITE();
    5044:	4649      	mov	r1, r9
    5046:	4630      	mov	r0, r6
    5048:	47a8      	blx	r5
    504a:	200f      	movs	r0, #15
    504c:	47a0      	blx	r4
    504e:	2101      	movs	r1, #1
    5050:	4638      	mov	r0, r7
    5052:	47a8      	blx	r5
    5054:	200f      	movs	r0, #15
    5056:	47a0      	blx	r4
    5058:	4649      	mov	r1, r9
    505a:	4638      	mov	r0, r7
    505c:	47a8      	blx	r5
    505e:	200f      	movs	r0, #15
    5060:	47a0      	blx	r4
	I2C_WAITACKOP(-3);
    5062:	2101      	movs	r1, #1
    5064:	4630      	mov	r0, r6
    5066:	47c0      	blx	r8
    5068:	200f      	movs	r0, #15
    506a:	47a0      	blx	r4
    506c:	2101      	movs	r1, #1
    506e:	4638      	mov	r0, r7
    5070:	47a8      	blx	r5
    5072:	200f      	movs	r0, #15
    5074:	47a0      	blx	r4
    5076:	f8df b204 	ldr.w	fp, [pc, #516]	; 527c <I2C_readEXPANDER+0x2b4>
    507a:	4630      	mov	r0, r6
    507c:	47d8      	blx	fp
    507e:	f8cd b004 	str.w	fp, [sp, #4]
    5082:	b198      	cbz	r0, 50ac <I2C_readEXPANDER+0xe4>
    5084:	2101      	movs	r1, #1
    5086:	4638      	mov	r0, r7
    5088:	47a8      	blx	r5
    508a:	200f      	movs	r0, #15
    508c:	47a0      	blx	r4
    508e:	2101      	movs	r1, #1
    5090:	4630      	mov	r0, r6
    5092:	47a8      	blx	r5
    5094:	200f      	movs	r0, #15
    5096:	47a0      	blx	r4
    5098:	2102      	movs	r1, #2
    509a:	4630      	mov	r0, r6
    509c:	47c0      	blx	r8
    509e:	200f      	movs	r0, #15
    50a0:	47a0      	blx	r4
    50a2:	f06f 0002 	mvn.w	r0, #2
	I2C_STOP();
	I2C_CLOSE();
	/* If successful, and code execution got here, the close the I2C channel */
	
	return 0;
}
    50a6:	b003      	add	sp, #12
    50a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	I2C_WAITACKOP(-3);
    50ac:	4649      	mov	r1, r9
    50ae:	4638      	mov	r0, r7
    50b0:	47a8      	blx	r5
    50b2:	200f      	movs	r0, #15
    50b4:	47a0      	blx	r4
    50b6:	2102      	movs	r1, #2
    50b8:	4630      	mov	r0, r6
    50ba:	47c0      	blx	r8
    50bc:	200f      	movs	r0, #15
    50be:	47a0      	blx	r4
    50c0:	f04f 0908 	mov.w	r9, #8
	I2C_SENDDATA(0x00, forloop);
    50c4:	2100      	movs	r1, #0
    50c6:	4630      	mov	r0, r6
    50c8:	47a8      	blx	r5
    50ca:	200f      	movs	r0, #15
    50cc:	47a0      	blx	r4
    50ce:	2101      	movs	r1, #1
    50d0:	4638      	mov	r0, r7
    50d2:	47a8      	blx	r5
    50d4:	200f      	movs	r0, #15
    50d6:	47a0      	blx	r4
    50d8:	2100      	movs	r1, #0
    50da:	4638      	mov	r0, r7
    50dc:	47a8      	blx	r5
    50de:	200f      	movs	r0, #15
    50e0:	47a0      	blx	r4
    50e2:	f1b9 0901 	subs.w	r9, r9, #1
    50e6:	d1ed      	bne.n	50c4 <I2C_readEXPANDER+0xfc>
	I2C_WAITACKOP(-4);
    50e8:	2101      	movs	r1, #1
    50ea:	4630      	mov	r0, r6
    50ec:	47c0      	blx	r8
    50ee:	200f      	movs	r0, #15
    50f0:	47a0      	blx	r4
    50f2:	2101      	movs	r1, #1
    50f4:	4638      	mov	r0, r7
    50f6:	47a8      	blx	r5
    50f8:	200f      	movs	r0, #15
    50fa:	47a0      	blx	r4
    50fc:	4630      	mov	r0, r6
    50fe:	9b01      	ldr	r3, [sp, #4]
    5100:	4798      	blx	r3
    5102:	b188      	cbz	r0, 5128 <I2C_readEXPANDER+0x160>
    5104:	2101      	movs	r1, #1
    5106:	4638      	mov	r0, r7
    5108:	47a8      	blx	r5
    510a:	200f      	movs	r0, #15
    510c:	47a0      	blx	r4
    510e:	2101      	movs	r1, #1
    5110:	4630      	mov	r0, r6
    5112:	47a8      	blx	r5
    5114:	200f      	movs	r0, #15
    5116:	47a0      	blx	r4
    5118:	2102      	movs	r1, #2
    511a:	4630      	mov	r0, r6
    511c:	47c0      	blx	r8
    511e:	200f      	movs	r0, #15
    5120:	47a0      	blx	r4
    5122:	f06f 0003 	mvn.w	r0, #3
    5126:	e7be      	b.n	50a6 <I2C_readEXPANDER+0xde>
    5128:	4649      	mov	r1, r9
    512a:	4638      	mov	r0, r7
    512c:	47a8      	blx	r5
    512e:	200f      	movs	r0, #15
    5130:	47a0      	blx	r4
    5132:	2102      	movs	r1, #2
    5134:	4630      	mov	r0, r6
    5136:	47c0      	blx	r8
    5138:	200f      	movs	r0, #15
    513a:	47a0      	blx	r4
	I2C_START(-5);
    513c:	2101      	movs	r1, #1
    513e:	4638      	mov	r0, r7
    5140:	47a8      	blx	r5
    5142:	2101      	movs	r1, #1
    5144:	4630      	mov	r0, r6
    5146:	47a8      	blx	r5
    5148:	2102      	movs	r1, #2
    514a:	4630      	mov	r0, r6
    514c:	47c0      	blx	r8
    514e:	200f      	movs	r0, #15
    5150:	47a0      	blx	r4
    5152:	200f      	movs	r0, #15
    5154:	47a0      	blx	r4
    5156:	4649      	mov	r1, r9
    5158:	4630      	mov	r0, r6
    515a:	47a8      	blx	r5
    515c:	200f      	movs	r0, #15
    515e:	47a0      	blx	r4
    5160:	4649      	mov	r1, r9
    5162:	4638      	mov	r0, r7
    5164:	47a8      	blx	r5
    5166:	200f      	movs	r0, #15
    5168:	47a0      	blx	r4
    516a:	f04f 0907 	mov.w	r9, #7
	I2C_SENDADDR(0x41, forloop);
    516e:	f04f 0b40 	mov.w	fp, #64	; 0x40
    5172:	f01b 0141 	ands.w	r1, fp, #65	; 0x41
    5176:	bf18      	it	ne
    5178:	2101      	movne	r1, #1
    517a:	4630      	mov	r0, r6
    517c:	47a8      	blx	r5
    517e:	200f      	movs	r0, #15
    5180:	47a0      	blx	r4
    5182:	2101      	movs	r1, #1
    5184:	4638      	mov	r0, r7
    5186:	47a8      	blx	r5
    5188:	200f      	movs	r0, #15
    518a:	47a0      	blx	r4
    518c:	2100      	movs	r1, #0
    518e:	4638      	mov	r0, r7
    5190:	47a8      	blx	r5
    5192:	200f      	movs	r0, #15
    5194:	47a0      	blx	r4
    5196:	f1b9 0901 	subs.w	r9, r9, #1
    519a:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
    519e:	d1e8      	bne.n	5172 <I2C_readEXPANDER+0x1aa>
	I2C_READ();
    51a0:	2101      	movs	r1, #1
    51a2:	4630      	mov	r0, r6
    51a4:	47a8      	blx	r5
    51a6:	200f      	movs	r0, #15
    51a8:	47a0      	blx	r4
    51aa:	2101      	movs	r1, #1
    51ac:	4638      	mov	r0, r7
    51ae:	47a8      	blx	r5
    51b0:	200f      	movs	r0, #15
    51b2:	47a0      	blx	r4
    51b4:	4649      	mov	r1, r9
    51b6:	4638      	mov	r0, r7
    51b8:	47a8      	blx	r5
    51ba:	200f      	movs	r0, #15
    51bc:	47a0      	blx	r4
	I2C_WAITACKIP(-6);
    51be:	2101      	movs	r1, #1
    51c0:	4630      	mov	r0, r6
    51c2:	47c0      	blx	r8
    51c4:	200f      	movs	r0, #15
    51c6:	47a0      	blx	r4
    51c8:	2101      	movs	r1, #1
    51ca:	4638      	mov	r0, r7
    51cc:	47a8      	blx	r5
    51ce:	200f      	movs	r0, #15
    51d0:	47a0      	blx	r4
    51d2:	4630      	mov	r0, r6
    51d4:	9b01      	ldr	r3, [sp, #4]
    51d6:	4798      	blx	r3
    51d8:	b188      	cbz	r0, 51fe <I2C_readEXPANDER+0x236>
    51da:	2101      	movs	r1, #1
    51dc:	4638      	mov	r0, r7
    51de:	47a8      	blx	r5
    51e0:	200f      	movs	r0, #15
    51e2:	47a0      	blx	r4
    51e4:	2101      	movs	r1, #1
    51e6:	4630      	mov	r0, r6
    51e8:	47a8      	blx	r5
    51ea:	200f      	movs	r0, #15
    51ec:	47a0      	blx	r4
    51ee:	2102      	movs	r1, #2
    51f0:	4630      	mov	r0, r6
    51f2:	47c0      	blx	r8
    51f4:	200f      	movs	r0, #15
    51f6:	47a0      	blx	r4
    51f8:	f06f 0005 	mvn.w	r0, #5
    51fc:	e753      	b.n	50a6 <I2C_readEXPANDER+0xde>
    51fe:	4649      	mov	r1, r9
    5200:	4638      	mov	r0, r7
    5202:	47a8      	blx	r5
    5204:	200f      	movs	r0, #15
    5206:	47a0      	blx	r4
	for (forloop = 0x80; forloop > 0;) {
    5208:	f04f 0b80 	mov.w	fp, #128	; 0x80
	*inputs = 0;
    520c:	f88a 9000 	strb.w	r9, [sl]
    5210:	f04f 0908 	mov.w	r9, #8
		I2C_clockhi();
    5214:	2101      	movs	r1, #1
    5216:	4638      	mov	r0, r7
    5218:	47a8      	blx	r5
    521a:	200f      	movs	r0, #15
    521c:	47a0      	blx	r4
		if (gpio_get_pin_level(i2csda)) {
    521e:	4630      	mov	r0, r6
    5220:	9b01      	ldr	r3, [sp, #4]
    5222:	4798      	blx	r3
    5224:	b128      	cbz	r0, 5232 <I2C_readEXPANDER+0x26a>
			(*inputs) |= forloop;
    5226:	f89a 3000 	ldrb.w	r3, [sl]
    522a:	ea4b 0303 	orr.w	r3, fp, r3
    522e:	f88a 3000 	strb.w	r3, [sl]
		I2C_clocklo();
    5232:	2100      	movs	r1, #0
    5234:	4638      	mov	r0, r7
    5236:	47a8      	blx	r5
    5238:	200f      	movs	r0, #15
    523a:	47a0      	blx	r4
	for (forloop = 0x80; forloop > 0;) {
    523c:	f1b9 0901 	subs.w	r9, r9, #1
		forloop = forloop / 2;
    5240:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
	for (forloop = 0x80; forloop > 0;) {
    5244:	d1e6      	bne.n	5214 <I2C_readEXPANDER+0x24c>
	I2C_STOP();
    5246:	2101      	movs	r1, #1
    5248:	4638      	mov	r0, r7
    524a:	47a8      	blx	r5
    524c:	200f      	movs	r0, #15
    524e:	47a0      	blx	r4
    5250:	2101      	movs	r1, #1
    5252:	4630      	mov	r0, r6
    5254:	47a8      	blx	r5
    5256:	200f      	movs	r0, #15
    5258:	47a0      	blx	r4
    525a:	2102      	movs	r1, #2
    525c:	4630      	mov	r0, r6
    525e:	47c0      	blx	r8
    5260:	200f      	movs	r0, #15
    5262:	47a0      	blx	r4
	return 0;
    5264:	4648      	mov	r0, r9
    5266:	e71e      	b.n	50a6 <I2C_readEXPANDER+0xde>
		return -1;	
    5268:	f04f 30ff 	mov.w	r0, #4294967295
    526c:	e71b      	b.n	50a6 <I2C_readEXPANDER+0xde>
    526e:	bf00      	nop
    5270:	0000439d 	.word	0x0000439d
    5274:	0000122d 	.word	0x0000122d
    5278:	00004405 	.word	0x00004405
    527c:	000043bd 	.word	0x000043bd

00005280 <I2C_setGAIN>:
// * CALLED BY:			  main()                                                                                                       *
// * CALLS:		          No function. ALL macros defined in this function file.                                                       *
// * --------------------------------------------------------------------------------------------------------------------------------- *
int I2C_setGAIN(uint8_t sda,  uint8_t clk, unsigned char dac)

{
    5280:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5284:	460f      	mov	r7, r1
    5286:	4606      	mov	r6, r0
  	uint8_t     		i2csda, i2cclk;
    unsigned char		forloop;

	/* Open an I2C channel, send address 0x60, index register 0x00 then send the 8-bit "dac" value */
	I2C_OPEN(sda, clk);
    I2C_START(-1);
    5288:	4d7a      	ldr	r5, [pc, #488]	; (5474 <I2C_setGAIN+0x1f4>)
{
    528a:	9201      	str	r2, [sp, #4]
    I2C_START(-1);
    528c:	2101      	movs	r1, #1
    528e:	4638      	mov	r0, r7
    5290:	47a8      	blx	r5
    5292:	2101      	movs	r1, #1
    5294:	4630      	mov	r0, r6
    5296:	47a8      	blx	r5
    5298:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 547c <I2C_setGAIN+0x1fc>
    529c:	4c76      	ldr	r4, [pc, #472]	; (5478 <I2C_setGAIN+0x1f8>)
    529e:	2102      	movs	r1, #2
    52a0:	4630      	mov	r0, r6
    52a2:	47c0      	blx	r8
    52a4:	200f      	movs	r0, #15
    52a6:	47a0      	blx	r4
    52a8:	200f      	movs	r0, #15
    52aa:	47a0      	blx	r4
    52ac:	2100      	movs	r1, #0
    52ae:	4630      	mov	r0, r6
    52b0:	47a8      	blx	r5
    52b2:	200f      	movs	r0, #15
    52b4:	47a0      	blx	r4
    52b6:	2100      	movs	r1, #0
    52b8:	4638      	mov	r0, r7
    52ba:	47a8      	blx	r5
    52bc:	200f      	movs	r0, #15
    52be:	47a0      	blx	r4
    52c0:	f04f 0907 	mov.w	r9, #7
    I2C_SENDADDR(0x60, forloop);
    52c4:	f04f 0a40 	mov.w	sl, #64	; 0x40
    52c8:	f01a 0160 	ands.w	r1, sl, #96	; 0x60
    52cc:	bf18      	it	ne
    52ce:	2101      	movne	r1, #1
    52d0:	4630      	mov	r0, r6
    52d2:	47a8      	blx	r5
    52d4:	200f      	movs	r0, #15
    52d6:	47a0      	blx	r4
    52d8:	2101      	movs	r1, #1
    52da:	4638      	mov	r0, r7
    52dc:	47a8      	blx	r5
    52de:	200f      	movs	r0, #15
    52e0:	47a0      	blx	r4
    52e2:	2100      	movs	r1, #0
    52e4:	4638      	mov	r0, r7
    52e6:	47a8      	blx	r5
    52e8:	200f      	movs	r0, #15
    52ea:	47a0      	blx	r4
    52ec:	f1b9 0901 	subs.w	r9, r9, #1
    52f0:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
    52f4:	d1e8      	bne.n	52c8 <I2C_setGAIN+0x48>
    I2C_WRITE();
    52f6:	4649      	mov	r1, r9
    52f8:	4630      	mov	r0, r6
    52fa:	47a8      	blx	r5
    52fc:	200f      	movs	r0, #15
    52fe:	47a0      	blx	r4
    5300:	2101      	movs	r1, #1
    5302:	4638      	mov	r0, r7
    5304:	47a8      	blx	r5
    5306:	200f      	movs	r0, #15
    5308:	47a0      	blx	r4
    530a:	4649      	mov	r1, r9
    530c:	4638      	mov	r0, r7
    530e:	47a8      	blx	r5
    5310:	200f      	movs	r0, #15
    5312:	47a0      	blx	r4
    I2C_WAITACKOP(-2);
    5314:	2101      	movs	r1, #1
    5316:	4630      	mov	r0, r6
    5318:	47c0      	blx	r8
    531a:	200f      	movs	r0, #15
    531c:	47a0      	blx	r4
    531e:	2101      	movs	r1, #1
    5320:	4638      	mov	r0, r7
    5322:	47a8      	blx	r5
    5324:	200f      	movs	r0, #15
    5326:	47a0      	blx	r4
    5328:	f8df a154 	ldr.w	sl, [pc, #340]	; 5480 <I2C_setGAIN+0x200>
    532c:	4630      	mov	r0, r6
    532e:	47d0      	blx	sl
    5330:	b198      	cbz	r0, 535a <I2C_setGAIN+0xda>
    5332:	2101      	movs	r1, #1
    5334:	4638      	mov	r0, r7
    5336:	47a8      	blx	r5
    5338:	200f      	movs	r0, #15
    533a:	47a0      	blx	r4
    533c:	2101      	movs	r1, #1
    533e:	4630      	mov	r0, r6
    5340:	47a8      	blx	r5
    5342:	200f      	movs	r0, #15
    5344:	47a0      	blx	r4
    5346:	2102      	movs	r1, #2
    5348:	4630      	mov	r0, r6
    534a:	47c0      	blx	r8
    534c:	200f      	movs	r0, #15
    534e:	47a0      	blx	r4
    5350:	f06f 0001 	mvn.w	r0, #1
	/* If successful, and code execution got here, the close the I2C channel */
    I2C_STOP();
	I2C_CLOSE();
	
	return 0;
}
    5354:	b003      	add	sp, #12
    5356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    I2C_WAITACKOP(-2);
    535a:	4649      	mov	r1, r9
    535c:	4638      	mov	r0, r7
    535e:	47a8      	blx	r5
    5360:	200f      	movs	r0, #15
    5362:	47a0      	blx	r4
    5364:	2102      	movs	r1, #2
    5366:	4630      	mov	r0, r6
    5368:	47c0      	blx	r8
    536a:	200f      	movs	r0, #15
    536c:	47a0      	blx	r4
    536e:	f04f 0908 	mov.w	r9, #8
    I2C_SENDDATA(0x00, forloop);
    5372:	2100      	movs	r1, #0
    5374:	4630      	mov	r0, r6
    5376:	47a8      	blx	r5
    5378:	200f      	movs	r0, #15
    537a:	47a0      	blx	r4
    537c:	2101      	movs	r1, #1
    537e:	4638      	mov	r0, r7
    5380:	47a8      	blx	r5
    5382:	200f      	movs	r0, #15
    5384:	47a0      	blx	r4
    5386:	2100      	movs	r1, #0
    5388:	4638      	mov	r0, r7
    538a:	47a8      	blx	r5
    538c:	200f      	movs	r0, #15
    538e:	47a0      	blx	r4
    5390:	f1b9 0901 	subs.w	r9, r9, #1
    5394:	d1ed      	bne.n	5372 <I2C_setGAIN+0xf2>
    I2C_WAITACKOP(-3);
    5396:	2101      	movs	r1, #1
    5398:	4630      	mov	r0, r6
    539a:	47c0      	blx	r8
    539c:	200f      	movs	r0, #15
    539e:	47a0      	blx	r4
    53a0:	2101      	movs	r1, #1
    53a2:	4638      	mov	r0, r7
    53a4:	47a8      	blx	r5
    53a6:	200f      	movs	r0, #15
    53a8:	47a0      	blx	r4
    53aa:	4630      	mov	r0, r6
    53ac:	47d0      	blx	sl
    53ae:	b188      	cbz	r0, 53d4 <I2C_setGAIN+0x154>
    53b0:	2101      	movs	r1, #1
    53b2:	4638      	mov	r0, r7
    53b4:	47a8      	blx	r5
    53b6:	200f      	movs	r0, #15
    53b8:	47a0      	blx	r4
    53ba:	2101      	movs	r1, #1
    53bc:	4630      	mov	r0, r6
    53be:	47a8      	blx	r5
    53c0:	200f      	movs	r0, #15
    53c2:	47a0      	blx	r4
    53c4:	2102      	movs	r1, #2
    53c6:	4630      	mov	r0, r6
    53c8:	47c0      	blx	r8
    53ca:	200f      	movs	r0, #15
    53cc:	47a0      	blx	r4
    53ce:	f06f 0002 	mvn.w	r0, #2
    53d2:	e7bf      	b.n	5354 <I2C_setGAIN+0xd4>
    53d4:	4649      	mov	r1, r9
    53d6:	4638      	mov	r0, r7
    53d8:	47a8      	blx	r5
    53da:	200f      	movs	r0, #15
    53dc:	47a0      	blx	r4
    53de:	2102      	movs	r1, #2
    53e0:	4630      	mov	r0, r6
    53e2:	47c0      	blx	r8
    53e4:	200f      	movs	r0, #15
    53e6:	47a0      	blx	r4
    53e8:	f04f 0908 	mov.w	r9, #8
	I2C_SENDDATA(dac, forloop);
    53ec:	f04f 0b80 	mov.w	fp, #128	; 0x80
    53f0:	9b01      	ldr	r3, [sp, #4]
    53f2:	ea13 010b 	ands.w	r1, r3, fp
    53f6:	bf18      	it	ne
    53f8:	2101      	movne	r1, #1
    53fa:	4630      	mov	r0, r6
    53fc:	47a8      	blx	r5
    53fe:	200f      	movs	r0, #15
    5400:	47a0      	blx	r4
    5402:	2101      	movs	r1, #1
    5404:	4638      	mov	r0, r7
    5406:	47a8      	blx	r5
    5408:	200f      	movs	r0, #15
    540a:	47a0      	blx	r4
    540c:	2100      	movs	r1, #0
    540e:	4638      	mov	r0, r7
    5410:	47a8      	blx	r5
    5412:	200f      	movs	r0, #15
    5414:	47a0      	blx	r4
    5416:	f1b9 0901 	subs.w	r9, r9, #1
    541a:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
    541e:	d1e7      	bne.n	53f0 <I2C_setGAIN+0x170>
	I2C_WAITACKOP(-3);
    5420:	2101      	movs	r1, #1
    5422:	4630      	mov	r0, r6
    5424:	47c0      	blx	r8
    5426:	200f      	movs	r0, #15
    5428:	47a0      	blx	r4
    542a:	2101      	movs	r1, #1
    542c:	4638      	mov	r0, r7
    542e:	47a8      	blx	r5
    5430:	200f      	movs	r0, #15
    5432:	47a0      	blx	r4
    5434:	4630      	mov	r0, r6
    5436:	47d0      	blx	sl
    5438:	2800      	cmp	r0, #0
    543a:	d1b9      	bne.n	53b0 <I2C_setGAIN+0x130>
    543c:	4649      	mov	r1, r9
    543e:	4638      	mov	r0, r7
    5440:	47a8      	blx	r5
    5442:	200f      	movs	r0, #15
    5444:	47a0      	blx	r4
    5446:	2102      	movs	r1, #2
    5448:	4630      	mov	r0, r6
    544a:	47c0      	blx	r8
    544c:	200f      	movs	r0, #15
    544e:	47a0      	blx	r4
    I2C_STOP();
    5450:	2101      	movs	r1, #1
    5452:	4638      	mov	r0, r7
    5454:	47a8      	blx	r5
    5456:	200f      	movs	r0, #15
    5458:	47a0      	blx	r4
    545a:	2101      	movs	r1, #1
    545c:	4630      	mov	r0, r6
    545e:	47a8      	blx	r5
    5460:	200f      	movs	r0, #15
    5462:	47a0      	blx	r4
    5464:	2102      	movs	r1, #2
    5466:	4630      	mov	r0, r6
    5468:	47c0      	blx	r8
    546a:	200f      	movs	r0, #15
    546c:	47a0      	blx	r4
	return 0;
    546e:	4648      	mov	r0, r9
    5470:	e770      	b.n	5354 <I2C_setGAIN+0xd4>
    5472:	bf00      	nop
    5474:	0000439d 	.word	0x0000439d
    5478:	0000122d 	.word	0x0000122d
    547c:	00004405 	.word	0x00004405
    5480:	000043bd 	.word	0x000043bd

00005484 <I2C_getTEMPandMOISTURE>:
// * CALLED BY:			  main()                                                                                                                         *
// * CALLS:		          No function. ALL macros defined in this function file.                                                                         *
// * --------------------------------------------------------------------------------------------------------------------------------------------------- *
int I2C_getTEMPandMOISTURE(uint8_t sda,  uint8_t clk, unsigned char *th, unsigned char *tl, unsigned char *hh, unsigned char *hl)

{
    5484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5488:	b085      	sub	sp, #20
    548a:	4604      	mov	r4, r0
    548c:	460d      	mov	r5, r1
    548e:	469a      	mov	sl, r3
	uint8_t     		i2csda, i2cclk;
	unsigned char		forloop;
	
	/* Assert and bounds check the return parameter variables */
	if ((!th) || (!tl) || (!hh) || (!hl)) {
    5490:	9203      	str	r2, [sp, #12]
    5492:	2a00      	cmp	r2, #0
    5494:	f000 85ce 	beq.w	6034 <I2C_getTEMPandMOISTURE+0xbb0>
    5498:	f1ba 0f00 	cmp.w	sl, #0
    549c:	f000 85ca 	beq.w	6034 <I2C_getTEMPandMOISTURE+0xbb0>
    54a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    54a2:	2b00      	cmp	r3, #0
    54a4:	f000 85c6 	beq.w	6034 <I2C_getTEMPandMOISTURE+0xbb0>
    54a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    54aa:	2b00      	cmp	r3, #0
    54ac:	f000 85c2 	beq.w	6034 <I2C_getTEMPandMOISTURE+0xbb0>
		return -1;
	}

	/* Open an I2C channel, send address 0x40, index register 0x0F to trigger-conversion */
	I2C_OPEN(sda, clk);
	I2C_START(-2);
    54b0:	4f5a      	ldr	r7, [pc, #360]	; (561c <I2C_getTEMPandMOISTURE+0x198>)
    54b2:	f8df b174 	ldr.w	fp, [pc, #372]	; 5628 <I2C_getTEMPandMOISTURE+0x1a4>
    54b6:	4e5a      	ldr	r6, [pc, #360]	; (5620 <I2C_getTEMPandMOISTURE+0x19c>)
    54b8:	2101      	movs	r1, #1
    54ba:	4628      	mov	r0, r5
    54bc:	47b8      	blx	r7
    54be:	2101      	movs	r1, #1
    54c0:	4620      	mov	r0, r4
    54c2:	47b8      	blx	r7
    54c4:	2102      	movs	r1, #2
    54c6:	4620      	mov	r0, r4
    54c8:	47d8      	blx	fp
    54ca:	200f      	movs	r0, #15
    54cc:	47b0      	blx	r6
    54ce:	200f      	movs	r0, #15
    54d0:	47b0      	blx	r6
    54d2:	2100      	movs	r1, #0
    54d4:	4620      	mov	r0, r4
    54d6:	47b8      	blx	r7
    54d8:	200f      	movs	r0, #15
    54da:	47b0      	blx	r6
    54dc:	2100      	movs	r1, #0
    54de:	4628      	mov	r0, r5
    54e0:	47b8      	blx	r7
    54e2:	200f      	movs	r0, #15
    54e4:	47b0      	blx	r6
    54e6:	f04f 0807 	mov.w	r8, #7
	I2C_SENDADDR(0x40, forloop);
    54ea:	f04f 0940 	mov.w	r9, #64	; 0x40
    54ee:	f8cd b004 	str.w	fp, [sp, #4]
    54f2:	f019 0140 	ands.w	r1, r9, #64	; 0x40
    54f6:	bf18      	it	ne
    54f8:	2101      	movne	r1, #1
    54fa:	4620      	mov	r0, r4
    54fc:	47b8      	blx	r7
    54fe:	200f      	movs	r0, #15
    5500:	47b0      	blx	r6
    5502:	2101      	movs	r1, #1
    5504:	4628      	mov	r0, r5
    5506:	47b8      	blx	r7
    5508:	200f      	movs	r0, #15
    550a:	47b0      	blx	r6
    550c:	2100      	movs	r1, #0
    550e:	4628      	mov	r0, r5
    5510:	47b8      	blx	r7
    5512:	200f      	movs	r0, #15
    5514:	47b0      	blx	r6
    5516:	f1b8 0801 	subs.w	r8, r8, #1
    551a:	ea4f 0959 	mov.w	r9, r9, lsr #1
    551e:	d1e8      	bne.n	54f2 <I2C_getTEMPandMOISTURE+0x6e>
	I2C_WRITE();
    5520:	4641      	mov	r1, r8
    5522:	4620      	mov	r0, r4
    5524:	47b8      	blx	r7
    5526:	200f      	movs	r0, #15
    5528:	47b0      	blx	r6
    552a:	2101      	movs	r1, #1
    552c:	4628      	mov	r0, r5
    552e:	47b8      	blx	r7
    5530:	200f      	movs	r0, #15
    5532:	47b0      	blx	r6
    5534:	4641      	mov	r1, r8
    5536:	4628      	mov	r0, r5
    5538:	47b8      	blx	r7
    553a:	200f      	movs	r0, #15
    553c:	47b0      	blx	r6
	I2C_WAITACKOP(-3);
    553e:	9b01      	ldr	r3, [sp, #4]
    5540:	2101      	movs	r1, #1
    5542:	4620      	mov	r0, r4
    5544:	4798      	blx	r3
    5546:	200f      	movs	r0, #15
    5548:	47b0      	blx	r6
    554a:	2101      	movs	r1, #1
    554c:	4628      	mov	r0, r5
    554e:	47b8      	blx	r7
    5550:	200f      	movs	r0, #15
    5552:	47b0      	blx	r6
    5554:	4620      	mov	r0, r4
    5556:	4b33      	ldr	r3, [pc, #204]	; (5624 <I2C_getTEMPandMOISTURE+0x1a0>)
    5558:	4798      	blx	r3
    555a:	b1a8      	cbz	r0, 5588 <I2C_getTEMPandMOISTURE+0x104>
    555c:	2101      	movs	r1, #1
    555e:	4628      	mov	r0, r5
    5560:	47b8      	blx	r7
    5562:	4d2f      	ldr	r5, [pc, #188]	; (5620 <I2C_getTEMPandMOISTURE+0x19c>)
    5564:	200f      	movs	r0, #15
    5566:	47a8      	blx	r5
    5568:	2101      	movs	r1, #1
    556a:	4620      	mov	r0, r4
    556c:	47b8      	blx	r7
    556e:	200f      	movs	r0, #15
    5570:	47a8      	blx	r5
    5572:	2102      	movs	r1, #2
    5574:	4620      	mov	r0, r4
    5576:	9b01      	ldr	r3, [sp, #4]
    5578:	4798      	blx	r3
    557a:	200f      	movs	r0, #15
    557c:	47a8      	blx	r5
    557e:	f06f 0002 	mvn.w	r0, #2
	I2C_STOP();
	I2C_CLOSE();
	/* If successful, and code execution got here, the close the I2C channel */
	
	return 0;
}
    5582:	b005      	add	sp, #20
    5584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	I2C_WAITACKOP(-3);
    5588:	4641      	mov	r1, r8
    558a:	4628      	mov	r0, r5
    558c:	47b8      	blx	r7
    558e:	200f      	movs	r0, #15
    5590:	47b0      	blx	r6
    5592:	2102      	movs	r1, #2
    5594:	4620      	mov	r0, r4
    5596:	9b01      	ldr	r3, [sp, #4]
    5598:	4798      	blx	r3
    559a:	200f      	movs	r0, #15
    559c:	47b0      	blx	r6
    559e:	4e20      	ldr	r6, [pc, #128]	; (5620 <I2C_getTEMPandMOISTURE+0x19c>)
    55a0:	f04f 0808 	mov.w	r8, #8
	I2C_SENDDATA(0x0F, forloop);
    55a4:	f04f 0980 	mov.w	r9, #128	; 0x80
    55a8:	f019 010f 	ands.w	r1, r9, #15
    55ac:	bf18      	it	ne
    55ae:	2101      	movne	r1, #1
    55b0:	4620      	mov	r0, r4
    55b2:	47b8      	blx	r7
    55b4:	200f      	movs	r0, #15
    55b6:	47b0      	blx	r6
    55b8:	2101      	movs	r1, #1
    55ba:	4628      	mov	r0, r5
    55bc:	47b8      	blx	r7
    55be:	200f      	movs	r0, #15
    55c0:	47b0      	blx	r6
    55c2:	2100      	movs	r1, #0
    55c4:	4628      	mov	r0, r5
    55c6:	47b8      	blx	r7
    55c8:	200f      	movs	r0, #15
    55ca:	47b0      	blx	r6
    55cc:	f1b8 0801 	subs.w	r8, r8, #1
    55d0:	ea4f 0959 	mov.w	r9, r9, lsr #1
    55d4:	d1e8      	bne.n	55a8 <I2C_getTEMPandMOISTURE+0x124>
	I2C_WAITACKOP(-4);
    55d6:	9b01      	ldr	r3, [sp, #4]
    55d8:	2101      	movs	r1, #1
    55da:	4620      	mov	r0, r4
    55dc:	4798      	blx	r3
    55de:	200f      	movs	r0, #15
    55e0:	47b0      	blx	r6
    55e2:	2101      	movs	r1, #1
    55e4:	4628      	mov	r0, r5
    55e6:	47b8      	blx	r7
    55e8:	200f      	movs	r0, #15
    55ea:	47b0      	blx	r6
    55ec:	4620      	mov	r0, r4
    55ee:	4b0d      	ldr	r3, [pc, #52]	; (5624 <I2C_getTEMPandMOISTURE+0x1a0>)
    55f0:	4798      	blx	r3
    55f2:	b1d8      	cbz	r0, 562c <I2C_getTEMPandMOISTURE+0x1a8>
    55f4:	2101      	movs	r1, #1
    55f6:	4628      	mov	r0, r5
    55f8:	47b8      	blx	r7
    55fa:	4d09      	ldr	r5, [pc, #36]	; (5620 <I2C_getTEMPandMOISTURE+0x19c>)
    55fc:	200f      	movs	r0, #15
    55fe:	47a8      	blx	r5
    5600:	2101      	movs	r1, #1
    5602:	4620      	mov	r0, r4
    5604:	47b8      	blx	r7
    5606:	200f      	movs	r0, #15
    5608:	47a8      	blx	r5
    560a:	2102      	movs	r1, #2
    560c:	4620      	mov	r0, r4
    560e:	9b01      	ldr	r3, [sp, #4]
    5610:	4798      	blx	r3
    5612:	200f      	movs	r0, #15
    5614:	47a8      	blx	r5
    5616:	f06f 0003 	mvn.w	r0, #3
    561a:	e7b2      	b.n	5582 <I2C_getTEMPandMOISTURE+0xfe>
    561c:	0000439d 	.word	0x0000439d
    5620:	0000122d 	.word	0x0000122d
    5624:	000043bd 	.word	0x000043bd
    5628:	00004405 	.word	0x00004405
    562c:	4641      	mov	r1, r8
    562e:	4628      	mov	r0, r5
    5630:	47b8      	blx	r7
    5632:	200f      	movs	r0, #15
    5634:	47b0      	blx	r6
    5636:	2102      	movs	r1, #2
    5638:	4620      	mov	r0, r4
    563a:	9b01      	ldr	r3, [sp, #4]
    563c:	4798      	blx	r3
    563e:	200f      	movs	r0, #15
    5640:	47b0      	blx	r6
    5642:	4e9e      	ldr	r6, [pc, #632]	; (58bc <I2C_getTEMPandMOISTURE+0x438>)
    5644:	f04f 0808 	mov.w	r8, #8
	I2C_SENDDATA(0x01, forloop);
    5648:	f04f 0980 	mov.w	r9, #128	; 0x80
    564c:	f019 0101 	ands.w	r1, r9, #1
    5650:	bf18      	it	ne
    5652:	2101      	movne	r1, #1
    5654:	4620      	mov	r0, r4
    5656:	47b8      	blx	r7
    5658:	200f      	movs	r0, #15
    565a:	47b0      	blx	r6
    565c:	2101      	movs	r1, #1
    565e:	4628      	mov	r0, r5
    5660:	47b8      	blx	r7
    5662:	200f      	movs	r0, #15
    5664:	47b0      	blx	r6
    5666:	2100      	movs	r1, #0
    5668:	4628      	mov	r0, r5
    566a:	47b8      	blx	r7
    566c:	200f      	movs	r0, #15
    566e:	47b0      	blx	r6
    5670:	f1b8 0801 	subs.w	r8, r8, #1
    5674:	ea4f 0959 	mov.w	r9, r9, lsr #1
    5678:	d1e8      	bne.n	564c <I2C_getTEMPandMOISTURE+0x1c8>
	I2C_WAITACKOP(-4);
    567a:	9b01      	ldr	r3, [sp, #4]
    567c:	2101      	movs	r1, #1
    567e:	4620      	mov	r0, r4
    5680:	4798      	blx	r3
    5682:	200f      	movs	r0, #15
    5684:	47b0      	blx	r6
    5686:	2101      	movs	r1, #1
    5688:	4628      	mov	r0, r5
    568a:	47b8      	blx	r7
    568c:	200f      	movs	r0, #15
    568e:	47b0      	blx	r6
    5690:	4620      	mov	r0, r4
    5692:	4b8b      	ldr	r3, [pc, #556]	; (58c0 <I2C_getTEMPandMOISTURE+0x43c>)
    5694:	4798      	blx	r3
    5696:	2800      	cmp	r0, #0
    5698:	d1ac      	bne.n	55f4 <I2C_getTEMPandMOISTURE+0x170>
    569a:	4641      	mov	r1, r8
    569c:	4628      	mov	r0, r5
    569e:	47b8      	blx	r7
    56a0:	200f      	movs	r0, #15
    56a2:	47b0      	blx	r6
    56a4:	9b01      	ldr	r3, [sp, #4]
    56a6:	2102      	movs	r1, #2
    56a8:	4620      	mov	r0, r4
    56aa:	4798      	blx	r3
    56ac:	200f      	movs	r0, #15
    56ae:	47b0      	blx	r6
	I2C_STOP();
    56b0:	2101      	movs	r1, #1
    56b2:	4628      	mov	r0, r5
    56b4:	47b8      	blx	r7
    56b6:	200f      	movs	r0, #15
    56b8:	47b0      	blx	r6
    56ba:	2101      	movs	r1, #1
    56bc:	4620      	mov	r0, r4
    56be:	47b8      	blx	r7
    56c0:	200f      	movs	r0, #15
    56c2:	47b0      	blx	r6
    56c4:	9b01      	ldr	r3, [sp, #4]
    56c6:	2102      	movs	r1, #2
    56c8:	4620      	mov	r0, r4
    56ca:	4798      	blx	r3
    56cc:	200f      	movs	r0, #15
    56ce:	47b0      	blx	r6
	I2C_START(-2);
    56d0:	2101      	movs	r1, #1
    56d2:	4628      	mov	r0, r5
    56d4:	47b8      	blx	r7
    56d6:	2101      	movs	r1, #1
    56d8:	4620      	mov	r0, r4
    56da:	47b8      	blx	r7
    56dc:	9b01      	ldr	r3, [sp, #4]
    56de:	2102      	movs	r1, #2
    56e0:	4620      	mov	r0, r4
    56e2:	4798      	blx	r3
    56e4:	200f      	movs	r0, #15
    56e6:	47b0      	blx	r6
    56e8:	200f      	movs	r0, #15
    56ea:	47b0      	blx	r6
    56ec:	4641      	mov	r1, r8
    56ee:	4620      	mov	r0, r4
    56f0:	47b8      	blx	r7
    56f2:	200f      	movs	r0, #15
    56f4:	47b0      	blx	r6
    56f6:	4641      	mov	r1, r8
    56f8:	4628      	mov	r0, r5
    56fa:	47b8      	blx	r7
    56fc:	200f      	movs	r0, #15
    56fe:	47b0      	blx	r6
    5700:	4e6e      	ldr	r6, [pc, #440]	; (58bc <I2C_getTEMPandMOISTURE+0x438>)
    5702:	f04f 0807 	mov.w	r8, #7
	I2C_SENDADDR(0x40, forloop);
    5706:	f04f 0940 	mov.w	r9, #64	; 0x40
    570a:	f019 0140 	ands.w	r1, r9, #64	; 0x40
    570e:	bf18      	it	ne
    5710:	2101      	movne	r1, #1
    5712:	4620      	mov	r0, r4
    5714:	47b8      	blx	r7
    5716:	200f      	movs	r0, #15
    5718:	47b0      	blx	r6
    571a:	2101      	movs	r1, #1
    571c:	4628      	mov	r0, r5
    571e:	47b8      	blx	r7
    5720:	200f      	movs	r0, #15
    5722:	47b0      	blx	r6
    5724:	2100      	movs	r1, #0
    5726:	4628      	mov	r0, r5
    5728:	47b8      	blx	r7
    572a:	200f      	movs	r0, #15
    572c:	47b0      	blx	r6
    572e:	f1b8 0801 	subs.w	r8, r8, #1
    5732:	ea4f 0959 	mov.w	r9, r9, lsr #1
    5736:	d1e8      	bne.n	570a <I2C_getTEMPandMOISTURE+0x286>
	I2C_WRITE();
    5738:	4641      	mov	r1, r8
    573a:	4620      	mov	r0, r4
    573c:	47b8      	blx	r7
    573e:	200f      	movs	r0, #15
    5740:	47b0      	blx	r6
    5742:	2101      	movs	r1, #1
    5744:	4628      	mov	r0, r5
    5746:	47b8      	blx	r7
    5748:	200f      	movs	r0, #15
    574a:	47b0      	blx	r6
    574c:	4641      	mov	r1, r8
    574e:	4628      	mov	r0, r5
    5750:	47b8      	blx	r7
    5752:	200f      	movs	r0, #15
    5754:	47b0      	blx	r6
	I2C_WAITACKOP(-3);
    5756:	9b01      	ldr	r3, [sp, #4]
    5758:	2101      	movs	r1, #1
    575a:	4620      	mov	r0, r4
    575c:	4798      	blx	r3
    575e:	200f      	movs	r0, #15
    5760:	47b0      	blx	r6
    5762:	2101      	movs	r1, #1
    5764:	4628      	mov	r0, r5
    5766:	47b8      	blx	r7
    5768:	200f      	movs	r0, #15
    576a:	47b0      	blx	r6
    576c:	4620      	mov	r0, r4
    576e:	4b54      	ldr	r3, [pc, #336]	; (58c0 <I2C_getTEMPandMOISTURE+0x43c>)
    5770:	4798      	blx	r3
    5772:	2800      	cmp	r0, #0
    5774:	f47f aef2 	bne.w	555c <I2C_getTEMPandMOISTURE+0xd8>
    5778:	4641      	mov	r1, r8
    577a:	4628      	mov	r0, r5
    577c:	47b8      	blx	r7
    577e:	200f      	movs	r0, #15
    5780:	47b0      	blx	r6
    5782:	2102      	movs	r1, #2
    5784:	4620      	mov	r0, r4
    5786:	9b01      	ldr	r3, [sp, #4]
    5788:	4798      	blx	r3
    578a:	200f      	movs	r0, #15
    578c:	47b0      	blx	r6
    578e:	f04f 0808 	mov.w	r8, #8
	I2C_SENDDATA(0x00, forloop);
    5792:	2100      	movs	r1, #0
    5794:	4620      	mov	r0, r4
    5796:	47b8      	blx	r7
    5798:	200f      	movs	r0, #15
    579a:	47b0      	blx	r6
    579c:	2101      	movs	r1, #1
    579e:	4628      	mov	r0, r5
    57a0:	47b8      	blx	r7
    57a2:	200f      	movs	r0, #15
    57a4:	47b0      	blx	r6
    57a6:	2100      	movs	r1, #0
    57a8:	4628      	mov	r0, r5
    57aa:	47b8      	blx	r7
    57ac:	200f      	movs	r0, #15
    57ae:	47b0      	blx	r6
    57b0:	f1b8 0801 	subs.w	r8, r8, #1
    57b4:	d1ed      	bne.n	5792 <I2C_getTEMPandMOISTURE+0x30e>
	I2C_WAITACKOP(-4);
    57b6:	9b01      	ldr	r3, [sp, #4]
    57b8:	2101      	movs	r1, #1
    57ba:	4620      	mov	r0, r4
    57bc:	4798      	blx	r3
    57be:	200f      	movs	r0, #15
    57c0:	47b0      	blx	r6
    57c2:	2101      	movs	r1, #1
    57c4:	4628      	mov	r0, r5
    57c6:	47b8      	blx	r7
    57c8:	200f      	movs	r0, #15
    57ca:	47b0      	blx	r6
    57cc:	4620      	mov	r0, r4
    57ce:	4b3c      	ldr	r3, [pc, #240]	; (58c0 <I2C_getTEMPandMOISTURE+0x43c>)
    57d0:	4798      	blx	r3
    57d2:	2800      	cmp	r0, #0
    57d4:	f47f af0e 	bne.w	55f4 <I2C_getTEMPandMOISTURE+0x170>
    57d8:	4641      	mov	r1, r8
    57da:	4628      	mov	r0, r5
    57dc:	47b8      	blx	r7
    57de:	200f      	movs	r0, #15
    57e0:	47b0      	blx	r6
    57e2:	9b01      	ldr	r3, [sp, #4]
    57e4:	2102      	movs	r1, #2
    57e6:	4620      	mov	r0, r4
    57e8:	4798      	blx	r3
    57ea:	200f      	movs	r0, #15
    57ec:	47b0      	blx	r6
	I2C_START(-5);
    57ee:	2101      	movs	r1, #1
    57f0:	4628      	mov	r0, r5
    57f2:	47b8      	blx	r7
    57f4:	2101      	movs	r1, #1
    57f6:	4620      	mov	r0, r4
    57f8:	47b8      	blx	r7
    57fa:	9b01      	ldr	r3, [sp, #4]
    57fc:	2102      	movs	r1, #2
    57fe:	4620      	mov	r0, r4
    5800:	4798      	blx	r3
    5802:	200f      	movs	r0, #15
    5804:	47b0      	blx	r6
    5806:	200f      	movs	r0, #15
    5808:	47b0      	blx	r6
    580a:	4641      	mov	r1, r8
    580c:	4620      	mov	r0, r4
    580e:	47b8      	blx	r7
    5810:	200f      	movs	r0, #15
    5812:	47b0      	blx	r6
    5814:	4641      	mov	r1, r8
    5816:	4628      	mov	r0, r5
    5818:	47b8      	blx	r7
    581a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 58bc <I2C_getTEMPandMOISTURE+0x438>
    581e:	200f      	movs	r0, #15
    5820:	47b0      	blx	r6
    5822:	f04f 0907 	mov.w	r9, #7
	I2C_SENDADDR(0x40, forloop);
    5826:	2640      	movs	r6, #64	; 0x40
    5828:	f016 0140 	ands.w	r1, r6, #64	; 0x40
    582c:	bf18      	it	ne
    582e:	2101      	movne	r1, #1
    5830:	4620      	mov	r0, r4
    5832:	47b8      	blx	r7
    5834:	200f      	movs	r0, #15
    5836:	47c0      	blx	r8
    5838:	2101      	movs	r1, #1
    583a:	4628      	mov	r0, r5
    583c:	47b8      	blx	r7
    583e:	200f      	movs	r0, #15
    5840:	47c0      	blx	r8
    5842:	2100      	movs	r1, #0
    5844:	4628      	mov	r0, r5
    5846:	47b8      	blx	r7
    5848:	200f      	movs	r0, #15
    584a:	47c0      	blx	r8
    584c:	f1b9 0901 	subs.w	r9, r9, #1
    5850:	ea4f 0656 	mov.w	r6, r6, lsr #1
    5854:	d1e8      	bne.n	5828 <I2C_getTEMPandMOISTURE+0x3a4>
	I2C_READ();
    5856:	2101      	movs	r1, #1
    5858:	4620      	mov	r0, r4
    585a:	47b8      	blx	r7
    585c:	200f      	movs	r0, #15
    585e:	47c0      	blx	r8
    5860:	2101      	movs	r1, #1
    5862:	4628      	mov	r0, r5
    5864:	47b8      	blx	r7
    5866:	200f      	movs	r0, #15
    5868:	47c0      	blx	r8
    586a:	4649      	mov	r1, r9
    586c:	4628      	mov	r0, r5
    586e:	47b8      	blx	r7
    5870:	200f      	movs	r0, #15
    5872:	47c0      	blx	r8
	I2C_WAITACKIP(-6);
    5874:	9b01      	ldr	r3, [sp, #4]
    5876:	f8df b048 	ldr.w	fp, [pc, #72]	; 58c0 <I2C_getTEMPandMOISTURE+0x43c>
    587a:	4e10      	ldr	r6, [pc, #64]	; (58bc <I2C_getTEMPandMOISTURE+0x438>)
    587c:	2101      	movs	r1, #1
    587e:	4620      	mov	r0, r4
    5880:	4798      	blx	r3
    5882:	200f      	movs	r0, #15
    5884:	47c0      	blx	r8
    5886:	2101      	movs	r1, #1
    5888:	4628      	mov	r0, r5
    588a:	47b8      	blx	r7
    588c:	200f      	movs	r0, #15
    588e:	47c0      	blx	r8
    5890:	4620      	mov	r0, r4
    5892:	47d8      	blx	fp
    5894:	b1b0      	cbz	r0, 58c4 <I2C_getTEMPandMOISTURE+0x440>
    5896:	2101      	movs	r1, #1
    5898:	4628      	mov	r0, r5
    589a:	47b8      	blx	r7
    589c:	200f      	movs	r0, #15
    589e:	47b0      	blx	r6
    58a0:	2101      	movs	r1, #1
    58a2:	4620      	mov	r0, r4
    58a4:	47b8      	blx	r7
    58a6:	200f      	movs	r0, #15
    58a8:	47b0      	blx	r6
    58aa:	2102      	movs	r1, #2
    58ac:	4620      	mov	r0, r4
    58ae:	9b01      	ldr	r3, [sp, #4]
    58b0:	4798      	blx	r3
    58b2:	200f      	movs	r0, #15
    58b4:	47b0      	blx	r6
    58b6:	f06f 0005 	mvn.w	r0, #5
    58ba:	e662      	b.n	5582 <I2C_getTEMPandMOISTURE+0xfe>
    58bc:	0000122d 	.word	0x0000122d
    58c0:	000043bd 	.word	0x000043bd
    58c4:	4649      	mov	r1, r9
    58c6:	4628      	mov	r0, r5
    58c8:	47b8      	blx	r7
    58ca:	200f      	movs	r0, #15
    58cc:	47c0      	blx	r8
	*tl = 0;
    58ce:	f88a 9000 	strb.w	r9, [sl]
    58d2:	f04f 0808 	mov.w	r8, #8
	for (forloop = 0x80; forloop > 0;) {
    58d6:	f04f 0980 	mov.w	r9, #128	; 0x80
		I2C_clockhi();
    58da:	2101      	movs	r1, #1
    58dc:	4628      	mov	r0, r5
    58de:	47b8      	blx	r7
    58e0:	200f      	movs	r0, #15
    58e2:	47b0      	blx	r6
	    if (gpio_get_pin_level(i2csda)) {
    58e4:	4620      	mov	r0, r4
    58e6:	47d8      	blx	fp
    58e8:	b128      	cbz	r0, 58f6 <I2C_getTEMPandMOISTURE+0x472>
			(*tl) |= forloop;
    58ea:	f89a 3000 	ldrb.w	r3, [sl]
    58ee:	ea49 0303 	orr.w	r3, r9, r3
    58f2:	f88a 3000 	strb.w	r3, [sl]
		I2C_clocklo();
    58f6:	2100      	movs	r1, #0
    58f8:	4628      	mov	r0, r5
    58fa:	47b8      	blx	r7
    58fc:	200f      	movs	r0, #15
    58fe:	47b0      	blx	r6
	for (forloop = 0x80; forloop > 0;) {
    5900:	f1b8 0801 	subs.w	r8, r8, #1
		forloop = forloop / 2;
    5904:	ea4f 0959 	mov.w	r9, r9, lsr #1
	for (forloop = 0x80; forloop > 0;) {
    5908:	d1e7      	bne.n	58da <I2C_getTEMPandMOISTURE+0x456>
	I2C_STOP();
    590a:	2101      	movs	r1, #1
    590c:	4628      	mov	r0, r5
    590e:	47b8      	blx	r7
    5910:	200f      	movs	r0, #15
    5912:	47b0      	blx	r6
    5914:	2101      	movs	r1, #1
    5916:	4620      	mov	r0, r4
    5918:	47b8      	blx	r7
    591a:	200f      	movs	r0, #15
    591c:	47b0      	blx	r6
    591e:	9b01      	ldr	r3, [sp, #4]
    5920:	2102      	movs	r1, #2
    5922:	4620      	mov	r0, r4
    5924:	4798      	blx	r3
    5926:	200f      	movs	r0, #15
    5928:	47b0      	blx	r6
	I2C_START(-2);
    592a:	2101      	movs	r1, #1
    592c:	4628      	mov	r0, r5
    592e:	47b8      	blx	r7
    5930:	2101      	movs	r1, #1
    5932:	4620      	mov	r0, r4
    5934:	47b8      	blx	r7
    5936:	9b01      	ldr	r3, [sp, #4]
    5938:	2102      	movs	r1, #2
    593a:	4620      	mov	r0, r4
    593c:	4798      	blx	r3
    593e:	200f      	movs	r0, #15
    5940:	47b0      	blx	r6
    5942:	200f      	movs	r0, #15
    5944:	47b0      	blx	r6
    5946:	4641      	mov	r1, r8
    5948:	4620      	mov	r0, r4
    594a:	47b8      	blx	r7
    594c:	200f      	movs	r0, #15
    594e:	47b0      	blx	r6
    5950:	4641      	mov	r1, r8
    5952:	4628      	mov	r0, r5
    5954:	47b8      	blx	r7
    5956:	200f      	movs	r0, #15
    5958:	47b0      	blx	r6
    595a:	f04f 0807 	mov.w	r8, #7
	I2C_SENDADDR(0x40, forloop);
    595e:	f04f 0940 	mov.w	r9, #64	; 0x40
    5962:	f019 0140 	ands.w	r1, r9, #64	; 0x40
    5966:	bf18      	it	ne
    5968:	2101      	movne	r1, #1
    596a:	4620      	mov	r0, r4
    596c:	47b8      	blx	r7
    596e:	200f      	movs	r0, #15
    5970:	47b0      	blx	r6
    5972:	2101      	movs	r1, #1
    5974:	4628      	mov	r0, r5
    5976:	47b8      	blx	r7
    5978:	200f      	movs	r0, #15
    597a:	47b0      	blx	r6
    597c:	2100      	movs	r1, #0
    597e:	4628      	mov	r0, r5
    5980:	47b8      	blx	r7
    5982:	200f      	movs	r0, #15
    5984:	47b0      	blx	r6
    5986:	f1b8 0801 	subs.w	r8, r8, #1
    598a:	ea4f 0959 	mov.w	r9, r9, lsr #1
    598e:	d1e8      	bne.n	5962 <I2C_getTEMPandMOISTURE+0x4de>
	I2C_WRITE();
    5990:	4641      	mov	r1, r8
    5992:	4620      	mov	r0, r4
    5994:	47b8      	blx	r7
    5996:	200f      	movs	r0, #15
    5998:	47b0      	blx	r6
    599a:	2101      	movs	r1, #1
    599c:	4628      	mov	r0, r5
    599e:	47b8      	blx	r7
    59a0:	200f      	movs	r0, #15
    59a2:	47b0      	blx	r6
    59a4:	4641      	mov	r1, r8
    59a6:	4628      	mov	r0, r5
    59a8:	47b8      	blx	r7
    59aa:	200f      	movs	r0, #15
    59ac:	47b0      	blx	r6
	I2C_WAITACKOP(-3);
    59ae:	9b01      	ldr	r3, [sp, #4]
    59b0:	2101      	movs	r1, #1
    59b2:	4620      	mov	r0, r4
    59b4:	4798      	blx	r3
    59b6:	200f      	movs	r0, #15
    59b8:	47b0      	blx	r6
    59ba:	2101      	movs	r1, #1
    59bc:	4628      	mov	r0, r5
    59be:	47b8      	blx	r7
    59c0:	200f      	movs	r0, #15
    59c2:	47b0      	blx	r6
    59c4:	4620      	mov	r0, r4
    59c6:	4bb3      	ldr	r3, [pc, #716]	; (5c94 <I2C_getTEMPandMOISTURE+0x810>)
    59c8:	4798      	blx	r3
    59ca:	2800      	cmp	r0, #0
    59cc:	f47f adc6 	bne.w	555c <I2C_getTEMPandMOISTURE+0xd8>
    59d0:	4641      	mov	r1, r8
    59d2:	4628      	mov	r0, r5
    59d4:	47b8      	blx	r7
    59d6:	200f      	movs	r0, #15
    59d8:	47b0      	blx	r6
    59da:	2102      	movs	r1, #2
    59dc:	4620      	mov	r0, r4
    59de:	9b01      	ldr	r3, [sp, #4]
    59e0:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 5c98 <I2C_getTEMPandMOISTURE+0x814>
    59e4:	4798      	blx	r3
    59e6:	200f      	movs	r0, #15
    59e8:	47b0      	blx	r6
    59ea:	f04f 0908 	mov.w	r9, #8
	I2C_SENDDATA(0x01, forloop);
    59ee:	f04f 0a80 	mov.w	sl, #128	; 0x80
    59f2:	f01a 0101 	ands.w	r1, sl, #1
    59f6:	bf18      	it	ne
    59f8:	2101      	movne	r1, #1
    59fa:	4620      	mov	r0, r4
    59fc:	47c0      	blx	r8
    59fe:	200f      	movs	r0, #15
    5a00:	47b0      	blx	r6
    5a02:	2101      	movs	r1, #1
    5a04:	4628      	mov	r0, r5
    5a06:	47c0      	blx	r8
    5a08:	200f      	movs	r0, #15
    5a0a:	47b0      	blx	r6
    5a0c:	2100      	movs	r1, #0
    5a0e:	4628      	mov	r0, r5
    5a10:	47c0      	blx	r8
    5a12:	200f      	movs	r0, #15
    5a14:	47b0      	blx	r6
    5a16:	f1b9 0901 	subs.w	r9, r9, #1
    5a1a:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
    5a1e:	d1e8      	bne.n	59f2 <I2C_getTEMPandMOISTURE+0x56e>
	I2C_WAITACKOP(-4);
    5a20:	2101      	movs	r1, #1
    5a22:	4620      	mov	r0, r4
    5a24:	f8df a274 	ldr.w	sl, [pc, #628]	; 5c9c <I2C_getTEMPandMOISTURE+0x818>
    5a28:	47d0      	blx	sl
    5a2a:	200f      	movs	r0, #15
    5a2c:	47b0      	blx	r6
    5a2e:	2101      	movs	r1, #1
    5a30:	4628      	mov	r0, r5
    5a32:	47c0      	blx	r8
    5a34:	200f      	movs	r0, #15
    5a36:	47b0      	blx	r6
    5a38:	4620      	mov	r0, r4
    5a3a:	4b96      	ldr	r3, [pc, #600]	; (5c94 <I2C_getTEMPandMOISTURE+0x810>)
    5a3c:	4798      	blx	r3
    5a3e:	2800      	cmp	r0, #0
    5a40:	f47f add8 	bne.w	55f4 <I2C_getTEMPandMOISTURE+0x170>
    5a44:	4649      	mov	r1, r9
    5a46:	4628      	mov	r0, r5
    5a48:	47c0      	blx	r8
    5a4a:	200f      	movs	r0, #15
    5a4c:	47b0      	blx	r6
    5a4e:	2102      	movs	r1, #2
    5a50:	4620      	mov	r0, r4
    5a52:	47d0      	blx	sl
    5a54:	200f      	movs	r0, #15
    5a56:	47b0      	blx	r6
	I2C_START(-5);
    5a58:	2101      	movs	r1, #1
    5a5a:	4628      	mov	r0, r5
    5a5c:	47c0      	blx	r8
    5a5e:	2101      	movs	r1, #1
    5a60:	4620      	mov	r0, r4
    5a62:	47c0      	blx	r8
    5a64:	2102      	movs	r1, #2
    5a66:	4620      	mov	r0, r4
    5a68:	47d0      	blx	sl
    5a6a:	200f      	movs	r0, #15
    5a6c:	47b0      	blx	r6
    5a6e:	200f      	movs	r0, #15
    5a70:	47b0      	blx	r6
    5a72:	4649      	mov	r1, r9
    5a74:	4620      	mov	r0, r4
    5a76:	47c0      	blx	r8
    5a78:	200f      	movs	r0, #15
    5a7a:	47b0      	blx	r6
    5a7c:	4649      	mov	r1, r9
    5a7e:	4628      	mov	r0, r5
    5a80:	47c0      	blx	r8
    5a82:	200f      	movs	r0, #15
    5a84:	47b0      	blx	r6
    5a86:	f8df 8210 	ldr.w	r8, [pc, #528]	; 5c98 <I2C_getTEMPandMOISTURE+0x814>
    5a8a:	f04f 0907 	mov.w	r9, #7
	I2C_SENDADDR(0x40, forloop);
    5a8e:	f04f 0a40 	mov.w	sl, #64	; 0x40
    5a92:	f01a 0140 	ands.w	r1, sl, #64	; 0x40
    5a96:	bf18      	it	ne
    5a98:	2101      	movne	r1, #1
    5a9a:	4620      	mov	r0, r4
    5a9c:	47c0      	blx	r8
    5a9e:	200f      	movs	r0, #15
    5aa0:	47b0      	blx	r6
    5aa2:	2101      	movs	r1, #1
    5aa4:	4628      	mov	r0, r5
    5aa6:	47c0      	blx	r8
    5aa8:	200f      	movs	r0, #15
    5aaa:	47b0      	blx	r6
    5aac:	2100      	movs	r1, #0
    5aae:	4628      	mov	r0, r5
    5ab0:	47c0      	blx	r8
    5ab2:	200f      	movs	r0, #15
    5ab4:	47b0      	blx	r6
    5ab6:	f1b9 0901 	subs.w	r9, r9, #1
    5aba:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
    5abe:	d1e8      	bne.n	5a92 <I2C_getTEMPandMOISTURE+0x60e>
	I2C_READ();
    5ac0:	2101      	movs	r1, #1
    5ac2:	4620      	mov	r0, r4
    5ac4:	47c0      	blx	r8
    5ac6:	200f      	movs	r0, #15
    5ac8:	47b0      	blx	r6
    5aca:	2101      	movs	r1, #1
    5acc:	4628      	mov	r0, r5
    5ace:	47c0      	blx	r8
    5ad0:	200f      	movs	r0, #15
    5ad2:	47b0      	blx	r6
    5ad4:	4649      	mov	r1, r9
    5ad6:	4628      	mov	r0, r5
    5ad8:	47c0      	blx	r8
    5ada:	200f      	movs	r0, #15
    5adc:	47b0      	blx	r6
	I2C_WAITACKIP(-6);
    5ade:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 5c9c <I2C_getTEMPandMOISTURE+0x818>
    5ae2:	2101      	movs	r1, #1
    5ae4:	4620      	mov	r0, r4
    5ae6:	47d0      	blx	sl
    5ae8:	200f      	movs	r0, #15
    5aea:	47b0      	blx	r6
    5aec:	2101      	movs	r1, #1
    5aee:	4628      	mov	r0, r5
    5af0:	47c0      	blx	r8
    5af2:	200f      	movs	r0, #15
    5af4:	47b0      	blx	r6
    5af6:	4620      	mov	r0, r4
    5af8:	4b66      	ldr	r3, [pc, #408]	; (5c94 <I2C_getTEMPandMOISTURE+0x810>)
    5afa:	4798      	blx	r3
    5afc:	f8cd a008 	str.w	sl, [sp, #8]
    5b00:	2800      	cmp	r0, #0
    5b02:	f47f aec8 	bne.w	5896 <I2C_getTEMPandMOISTURE+0x412>
    5b06:	4649      	mov	r1, r9
    5b08:	4628      	mov	r0, r5
    5b0a:	47c0      	blx	r8
    5b0c:	200f      	movs	r0, #15
    5b0e:	47b0      	blx	r6
		I2C_clockhi();
    5b10:	f8df a184 	ldr.w	sl, [pc, #388]	; 5c98 <I2C_getTEMPandMOISTURE+0x814>
	*th = 0;
    5b14:	9b03      	ldr	r3, [sp, #12]
	for (forloop = 0x80; forloop > 0;) {
    5b16:	f04f 0b80 	mov.w	fp, #128	; 0x80
	*th = 0;
    5b1a:	f883 9000 	strb.w	r9, [r3]
    5b1e:	46d0      	mov	r8, sl
    5b20:	f04f 0908 	mov.w	r9, #8
		I2C_clockhi();
    5b24:	2101      	movs	r1, #1
    5b26:	4628      	mov	r0, r5
    5b28:	47d0      	blx	sl
    5b2a:	200f      	movs	r0, #15
    5b2c:	47b0      	blx	r6
		if (gpio_get_pin_level(i2csda)) {
    5b2e:	4620      	mov	r0, r4
    5b30:	4b58      	ldr	r3, [pc, #352]	; (5c94 <I2C_getTEMPandMOISTURE+0x810>)
    5b32:	4798      	blx	r3
    5b34:	b128      	cbz	r0, 5b42 <I2C_getTEMPandMOISTURE+0x6be>
			(*th) |= forloop;
    5b36:	9b03      	ldr	r3, [sp, #12]
    5b38:	9a03      	ldr	r2, [sp, #12]
    5b3a:	781b      	ldrb	r3, [r3, #0]
    5b3c:	ea4b 0303 	orr.w	r3, fp, r3
    5b40:	7013      	strb	r3, [r2, #0]
		I2C_clocklo();
    5b42:	2100      	movs	r1, #0
    5b44:	4628      	mov	r0, r5
    5b46:	47c0      	blx	r8
    5b48:	200f      	movs	r0, #15
    5b4a:	47b0      	blx	r6
	for (forloop = 0x80; forloop > 0;) {
    5b4c:	f1b9 0901 	subs.w	r9, r9, #1
		forloop = forloop / 2;
    5b50:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
	for (forloop = 0x80; forloop > 0;) {
    5b54:	d1e6      	bne.n	5b24 <I2C_getTEMPandMOISTURE+0x6a0>
	I2C_STOP();
    5b56:	2101      	movs	r1, #1
    5b58:	4628      	mov	r0, r5
    5b5a:	47c0      	blx	r8
    5b5c:	200f      	movs	r0, #15
    5b5e:	47b0      	blx	r6
    5b60:	2101      	movs	r1, #1
    5b62:	4620      	mov	r0, r4
    5b64:	47c0      	blx	r8
    5b66:	200f      	movs	r0, #15
    5b68:	47b0      	blx	r6
    5b6a:	9b02      	ldr	r3, [sp, #8]
    5b6c:	2102      	movs	r1, #2
    5b6e:	4620      	mov	r0, r4
    5b70:	4798      	blx	r3
    5b72:	200f      	movs	r0, #15
    5b74:	47b0      	blx	r6
	I2C_START(-2);
    5b76:	2101      	movs	r1, #1
    5b78:	4628      	mov	r0, r5
    5b7a:	47c0      	blx	r8
    5b7c:	2101      	movs	r1, #1
    5b7e:	4620      	mov	r0, r4
    5b80:	47c0      	blx	r8
    5b82:	9b02      	ldr	r3, [sp, #8]
    5b84:	2102      	movs	r1, #2
    5b86:	4620      	mov	r0, r4
    5b88:	4798      	blx	r3
    5b8a:	200f      	movs	r0, #15
    5b8c:	47b0      	blx	r6
    5b8e:	200f      	movs	r0, #15
    5b90:	47b0      	blx	r6
    5b92:	4649      	mov	r1, r9
    5b94:	4620      	mov	r0, r4
    5b96:	47c0      	blx	r8
    5b98:	200f      	movs	r0, #15
    5b9a:	47b0      	blx	r6
    5b9c:	4649      	mov	r1, r9
    5b9e:	4628      	mov	r0, r5
    5ba0:	47c0      	blx	r8
    5ba2:	200f      	movs	r0, #15
    5ba4:	47b0      	blx	r6
    5ba6:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 5c98 <I2C_getTEMPandMOISTURE+0x814>
    5baa:	f04f 0907 	mov.w	r9, #7
	I2C_SENDADDR(0x40, forloop);
    5bae:	f04f 0a40 	mov.w	sl, #64	; 0x40
    5bb2:	f01a 0140 	ands.w	r1, sl, #64	; 0x40
    5bb6:	bf18      	it	ne
    5bb8:	2101      	movne	r1, #1
    5bba:	4620      	mov	r0, r4
    5bbc:	47c0      	blx	r8
    5bbe:	200f      	movs	r0, #15
    5bc0:	47b0      	blx	r6
    5bc2:	2101      	movs	r1, #1
    5bc4:	4628      	mov	r0, r5
    5bc6:	47c0      	blx	r8
    5bc8:	200f      	movs	r0, #15
    5bca:	47b0      	blx	r6
    5bcc:	2100      	movs	r1, #0
    5bce:	4628      	mov	r0, r5
    5bd0:	47c0      	blx	r8
    5bd2:	200f      	movs	r0, #15
    5bd4:	47b0      	blx	r6
    5bd6:	f1b9 0901 	subs.w	r9, r9, #1
    5bda:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
    5bde:	d1e8      	bne.n	5bb2 <I2C_getTEMPandMOISTURE+0x72e>
	I2C_WRITE();
    5be0:	4649      	mov	r1, r9
    5be2:	4620      	mov	r0, r4
    5be4:	47c0      	blx	r8
    5be6:	200f      	movs	r0, #15
    5be8:	47b0      	blx	r6
    5bea:	2101      	movs	r1, #1
    5bec:	4628      	mov	r0, r5
    5bee:	47c0      	blx	r8
    5bf0:	200f      	movs	r0, #15
    5bf2:	47b0      	blx	r6
    5bf4:	4649      	mov	r1, r9
    5bf6:	4628      	mov	r0, r5
    5bf8:	47c0      	blx	r8
    5bfa:	200f      	movs	r0, #15
    5bfc:	47b0      	blx	r6
	I2C_WAITACKOP(-3);
    5bfe:	9b02      	ldr	r3, [sp, #8]
    5c00:	2101      	movs	r1, #1
    5c02:	4620      	mov	r0, r4
    5c04:	4798      	blx	r3
    5c06:	200f      	movs	r0, #15
    5c08:	47b0      	blx	r6
    5c0a:	2101      	movs	r1, #1
    5c0c:	4628      	mov	r0, r5
    5c0e:	47c0      	blx	r8
    5c10:	200f      	movs	r0, #15
    5c12:	47b0      	blx	r6
    5c14:	4620      	mov	r0, r4
    5c16:	4b1f      	ldr	r3, [pc, #124]	; (5c94 <I2C_getTEMPandMOISTURE+0x810>)
    5c18:	4798      	blx	r3
    5c1a:	2800      	cmp	r0, #0
    5c1c:	f47f ac9e 	bne.w	555c <I2C_getTEMPandMOISTURE+0xd8>
    5c20:	4649      	mov	r1, r9
    5c22:	4628      	mov	r0, r5
    5c24:	47c0      	blx	r8
    5c26:	200f      	movs	r0, #15
    5c28:	47b0      	blx	r6
    5c2a:	2102      	movs	r1, #2
    5c2c:	4620      	mov	r0, r4
    5c2e:	9b02      	ldr	r3, [sp, #8]
    5c30:	f8df 8064 	ldr.w	r8, [pc, #100]	; 5c98 <I2C_getTEMPandMOISTURE+0x814>
    5c34:	4798      	blx	r3
    5c36:	200f      	movs	r0, #15
    5c38:	47b0      	blx	r6
    5c3a:	f04f 0908 	mov.w	r9, #8
	I2C_SENDDATA(0x02, forloop);
    5c3e:	f04f 0a80 	mov.w	sl, #128	; 0x80
    5c42:	f01a 0102 	ands.w	r1, sl, #2
    5c46:	bf18      	it	ne
    5c48:	2101      	movne	r1, #1
    5c4a:	4620      	mov	r0, r4
    5c4c:	47c0      	blx	r8
    5c4e:	200f      	movs	r0, #15
    5c50:	47b0      	blx	r6
    5c52:	2101      	movs	r1, #1
    5c54:	4628      	mov	r0, r5
    5c56:	47c0      	blx	r8
    5c58:	200f      	movs	r0, #15
    5c5a:	47b0      	blx	r6
    5c5c:	2100      	movs	r1, #0
    5c5e:	4628      	mov	r0, r5
    5c60:	47c0      	blx	r8
    5c62:	200f      	movs	r0, #15
    5c64:	47b0      	blx	r6
    5c66:	f1b9 0901 	subs.w	r9, r9, #1
    5c6a:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
    5c6e:	d1e8      	bne.n	5c42 <I2C_getTEMPandMOISTURE+0x7be>
	I2C_WAITACKOP(-4);
    5c70:	9b02      	ldr	r3, [sp, #8]
    5c72:	2101      	movs	r1, #1
    5c74:	4620      	mov	r0, r4
    5c76:	4798      	blx	r3
    5c78:	200f      	movs	r0, #15
    5c7a:	47b0      	blx	r6
    5c7c:	2101      	movs	r1, #1
    5c7e:	4628      	mov	r0, r5
    5c80:	47c0      	blx	r8
    5c82:	200f      	movs	r0, #15
    5c84:	47b0      	blx	r6
    5c86:	4620      	mov	r0, r4
    5c88:	4b02      	ldr	r3, [pc, #8]	; (5c94 <I2C_getTEMPandMOISTURE+0x810>)
    5c8a:	4798      	blx	r3
    5c8c:	2800      	cmp	r0, #0
    5c8e:	f47f acb1 	bne.w	55f4 <I2C_getTEMPandMOISTURE+0x170>
    5c92:	e005      	b.n	5ca0 <I2C_getTEMPandMOISTURE+0x81c>
    5c94:	000043bd 	.word	0x000043bd
    5c98:	0000439d 	.word	0x0000439d
    5c9c:	00004405 	.word	0x00004405
    5ca0:	4649      	mov	r1, r9
    5ca2:	4628      	mov	r0, r5
    5ca4:	47c0      	blx	r8
    5ca6:	200f      	movs	r0, #15
    5ca8:	47b0      	blx	r6
    5caa:	9b02      	ldr	r3, [sp, #8]
    5cac:	2102      	movs	r1, #2
    5cae:	4620      	mov	r0, r4
    5cb0:	4798      	blx	r3
    5cb2:	200f      	movs	r0, #15
    5cb4:	47b0      	blx	r6
	I2C_START(-5);
    5cb6:	2101      	movs	r1, #1
    5cb8:	4628      	mov	r0, r5
    5cba:	47c0      	blx	r8
    5cbc:	2101      	movs	r1, #1
    5cbe:	4620      	mov	r0, r4
    5cc0:	47c0      	blx	r8
    5cc2:	9b02      	ldr	r3, [sp, #8]
    5cc4:	2102      	movs	r1, #2
    5cc6:	4620      	mov	r0, r4
    5cc8:	4798      	blx	r3
    5cca:	200f      	movs	r0, #15
    5ccc:	47b0      	blx	r6
    5cce:	200f      	movs	r0, #15
    5cd0:	47b0      	blx	r6
    5cd2:	4649      	mov	r1, r9
    5cd4:	4620      	mov	r0, r4
    5cd6:	47c0      	blx	r8
    5cd8:	200f      	movs	r0, #15
    5cda:	47b0      	blx	r6
    5cdc:	4649      	mov	r1, r9
    5cde:	4628      	mov	r0, r5
    5ce0:	47c0      	blx	r8
    5ce2:	200f      	movs	r0, #15
    5ce4:	47b0      	blx	r6
    5ce6:	f8df 8354 	ldr.w	r8, [pc, #852]	; 603c <I2C_getTEMPandMOISTURE+0xbb8>
    5cea:	f04f 0907 	mov.w	r9, #7
	I2C_SENDADDR(0x40, forloop);
    5cee:	f04f 0a40 	mov.w	sl, #64	; 0x40
    5cf2:	f01a 0140 	ands.w	r1, sl, #64	; 0x40
    5cf6:	bf18      	it	ne
    5cf8:	2101      	movne	r1, #1
    5cfa:	4620      	mov	r0, r4
    5cfc:	47c0      	blx	r8
    5cfe:	200f      	movs	r0, #15
    5d00:	47b0      	blx	r6
    5d02:	2101      	movs	r1, #1
    5d04:	4628      	mov	r0, r5
    5d06:	47c0      	blx	r8
    5d08:	200f      	movs	r0, #15
    5d0a:	47b0      	blx	r6
    5d0c:	2100      	movs	r1, #0
    5d0e:	4628      	mov	r0, r5
    5d10:	47c0      	blx	r8
    5d12:	200f      	movs	r0, #15
    5d14:	47b0      	blx	r6
    5d16:	f1b9 0901 	subs.w	r9, r9, #1
    5d1a:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
    5d1e:	d1e8      	bne.n	5cf2 <I2C_getTEMPandMOISTURE+0x86e>
	I2C_READ();
    5d20:	2101      	movs	r1, #1
    5d22:	4620      	mov	r0, r4
    5d24:	47c0      	blx	r8
    5d26:	200f      	movs	r0, #15
    5d28:	47b0      	blx	r6
    5d2a:	2101      	movs	r1, #1
    5d2c:	4628      	mov	r0, r5
    5d2e:	47c0      	blx	r8
    5d30:	200f      	movs	r0, #15
    5d32:	47b0      	blx	r6
    5d34:	4649      	mov	r1, r9
    5d36:	4628      	mov	r0, r5
    5d38:	47c0      	blx	r8
    5d3a:	200f      	movs	r0, #15
    5d3c:	47b0      	blx	r6
	I2C_WAITACKIP(-6);
    5d3e:	9b02      	ldr	r3, [sp, #8]
    5d40:	f8df a304 	ldr.w	sl, [pc, #772]	; 6048 <I2C_getTEMPandMOISTURE+0xbc4>
    5d44:	2101      	movs	r1, #1
    5d46:	4620      	mov	r0, r4
    5d48:	4798      	blx	r3
    5d4a:	200f      	movs	r0, #15
    5d4c:	47b0      	blx	r6
    5d4e:	2101      	movs	r1, #1
    5d50:	4628      	mov	r0, r5
    5d52:	47c0      	blx	r8
    5d54:	200f      	movs	r0, #15
    5d56:	47b0      	blx	r6
    5d58:	4620      	mov	r0, r4
    5d5a:	47d0      	blx	sl
    5d5c:	f8cd a00c 	str.w	sl, [sp, #12]
    5d60:	2800      	cmp	r0, #0
    5d62:	f47f ad98 	bne.w	5896 <I2C_getTEMPandMOISTURE+0x412>
    5d66:	4649      	mov	r1, r9
    5d68:	4628      	mov	r0, r5
    5d6a:	47c0      	blx	r8
    5d6c:	200f      	movs	r0, #15
    5d6e:	47b0      	blx	r6
	*hl = 0;
    5d70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5d72:	f883 9000 	strb.w	r9, [r3]
    5d76:	f8df 92c4 	ldr.w	r9, [pc, #708]	; 603c <I2C_getTEMPandMOISTURE+0xbb8>
    5d7a:	f04f 0a08 	mov.w	sl, #8
	for (forloop = 0x80; forloop > 0;) {
    5d7e:	f04f 0b80 	mov.w	fp, #128	; 0x80
		I2C_clockhi();
    5d82:	4bae      	ldr	r3, [pc, #696]	; (603c <I2C_getTEMPandMOISTURE+0xbb8>)
    5d84:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 6040 <I2C_getTEMPandMOISTURE+0xbbc>
    5d88:	2101      	movs	r1, #1
    5d8a:	4628      	mov	r0, r5
    5d8c:	4798      	blx	r3
    5d8e:	200f      	movs	r0, #15
    5d90:	47c0      	blx	r8
		if (gpio_get_pin_level(i2csda)) {
    5d92:	4620      	mov	r0, r4
    5d94:	9b03      	ldr	r3, [sp, #12]
    5d96:	4798      	blx	r3
    5d98:	b120      	cbz	r0, 5da4 <I2C_getTEMPandMOISTURE+0x920>
			(*hl) |= forloop;
    5d9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5d9c:	781a      	ldrb	r2, [r3, #0]
    5d9e:	ea4b 0202 	orr.w	r2, fp, r2
    5da2:	701a      	strb	r2, [r3, #0]
		I2C_clocklo();
    5da4:	2100      	movs	r1, #0
    5da6:	4628      	mov	r0, r5
    5da8:	47c8      	blx	r9
    5daa:	200f      	movs	r0, #15
    5dac:	47c0      	blx	r8
	for (forloop = 0x80; forloop > 0;) {
    5dae:	f1ba 0a01 	subs.w	sl, sl, #1
		forloop = forloop / 2;
    5db2:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
	for (forloop = 0x80; forloop > 0;) {
    5db6:	d1e4      	bne.n	5d82 <I2C_getTEMPandMOISTURE+0x8fe>
	I2C_STOP();
    5db8:	2101      	movs	r1, #1
    5dba:	4628      	mov	r0, r5
    5dbc:	47c8      	blx	r9
    5dbe:	200f      	movs	r0, #15
    5dc0:	47c0      	blx	r8
    5dc2:	2101      	movs	r1, #1
    5dc4:	4620      	mov	r0, r4
    5dc6:	47c8      	blx	r9
    5dc8:	200f      	movs	r0, #15
    5dca:	47c0      	blx	r8
    5dcc:	9b02      	ldr	r3, [sp, #8]
    5dce:	2102      	movs	r1, #2
    5dd0:	4620      	mov	r0, r4
    5dd2:	4798      	blx	r3
    5dd4:	200f      	movs	r0, #15
    5dd6:	47c0      	blx	r8
	I2C_START(-2);
    5dd8:	2101      	movs	r1, #1
    5dda:	4628      	mov	r0, r5
    5ddc:	47c8      	blx	r9
    5dde:	2101      	movs	r1, #1
    5de0:	4620      	mov	r0, r4
    5de2:	47c8      	blx	r9
    5de4:	9b02      	ldr	r3, [sp, #8]
    5de6:	2102      	movs	r1, #2
    5de8:	4620      	mov	r0, r4
    5dea:	4798      	blx	r3
    5dec:	200f      	movs	r0, #15
    5dee:	47c0      	blx	r8
    5df0:	200f      	movs	r0, #15
    5df2:	47c0      	blx	r8
    5df4:	4651      	mov	r1, sl
    5df6:	4620      	mov	r0, r4
    5df8:	47c8      	blx	r9
    5dfa:	200f      	movs	r0, #15
    5dfc:	47c0      	blx	r8
    5dfe:	4651      	mov	r1, sl
    5e00:	4628      	mov	r0, r5
    5e02:	47c8      	blx	r9
    5e04:	200f      	movs	r0, #15
    5e06:	47c0      	blx	r8
    5e08:	f8df 9230 	ldr.w	r9, [pc, #560]	; 603c <I2C_getTEMPandMOISTURE+0xbb8>
    5e0c:	f8df 8230 	ldr.w	r8, [pc, #560]	; 6040 <I2C_getTEMPandMOISTURE+0xbbc>
    5e10:	f04f 0a07 	mov.w	sl, #7
	I2C_SENDADDR(0x40, forloop);
    5e14:	f04f 0b40 	mov.w	fp, #64	; 0x40
    5e18:	f01b 0140 	ands.w	r1, fp, #64	; 0x40
    5e1c:	bf18      	it	ne
    5e1e:	2101      	movne	r1, #1
    5e20:	4620      	mov	r0, r4
    5e22:	47c8      	blx	r9
    5e24:	200f      	movs	r0, #15
    5e26:	47c0      	blx	r8
    5e28:	2101      	movs	r1, #1
    5e2a:	4628      	mov	r0, r5
    5e2c:	47c8      	blx	r9
    5e2e:	200f      	movs	r0, #15
    5e30:	47c0      	blx	r8
    5e32:	2100      	movs	r1, #0
    5e34:	4628      	mov	r0, r5
    5e36:	47c8      	blx	r9
    5e38:	200f      	movs	r0, #15
    5e3a:	47c0      	blx	r8
    5e3c:	f1ba 0a01 	subs.w	sl, sl, #1
    5e40:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
    5e44:	d1e8      	bne.n	5e18 <I2C_getTEMPandMOISTURE+0x994>
	I2C_WRITE();
    5e46:	4651      	mov	r1, sl
    5e48:	4620      	mov	r0, r4
    5e4a:	47c8      	blx	r9
    5e4c:	200f      	movs	r0, #15
    5e4e:	47c0      	blx	r8
    5e50:	2101      	movs	r1, #1
    5e52:	4628      	mov	r0, r5
    5e54:	47c8      	blx	r9
    5e56:	200f      	movs	r0, #15
    5e58:	47c0      	blx	r8
    5e5a:	4651      	mov	r1, sl
    5e5c:	4628      	mov	r0, r5
    5e5e:	47c8      	blx	r9
    5e60:	200f      	movs	r0, #15
    5e62:	47c0      	blx	r8
	I2C_WAITACKOP(-3);
    5e64:	9b02      	ldr	r3, [sp, #8]
    5e66:	2101      	movs	r1, #1
    5e68:	4620      	mov	r0, r4
    5e6a:	4798      	blx	r3
    5e6c:	200f      	movs	r0, #15
    5e6e:	47c0      	blx	r8
    5e70:	2101      	movs	r1, #1
    5e72:	4628      	mov	r0, r5
    5e74:	47c8      	blx	r9
    5e76:	200f      	movs	r0, #15
    5e78:	47c0      	blx	r8
    5e7a:	4620      	mov	r0, r4
    5e7c:	9b03      	ldr	r3, [sp, #12]
    5e7e:	4798      	blx	r3
    5e80:	2800      	cmp	r0, #0
    5e82:	f47f ab6b 	bne.w	555c <I2C_getTEMPandMOISTURE+0xd8>
    5e86:	4651      	mov	r1, sl
    5e88:	4628      	mov	r0, r5
    5e8a:	47c8      	blx	r9
    5e8c:	200f      	movs	r0, #15
    5e8e:	47c0      	blx	r8
    5e90:	2102      	movs	r1, #2
    5e92:	4620      	mov	r0, r4
    5e94:	9b02      	ldr	r3, [sp, #8]
    5e96:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 603c <I2C_getTEMPandMOISTURE+0xbb8>
    5e9a:	4798      	blx	r3
    5e9c:	200f      	movs	r0, #15
    5e9e:	47c0      	blx	r8
    5ea0:	f8df 819c 	ldr.w	r8, [pc, #412]	; 6040 <I2C_getTEMPandMOISTURE+0xbbc>
    5ea4:	f04f 0a08 	mov.w	sl, #8
	I2C_SENDDATA(0x03, forloop);
    5ea8:	f04f 0b80 	mov.w	fp, #128	; 0x80
    5eac:	f01b 0103 	ands.w	r1, fp, #3
    5eb0:	bf18      	it	ne
    5eb2:	2101      	movne	r1, #1
    5eb4:	4620      	mov	r0, r4
    5eb6:	47c8      	blx	r9
    5eb8:	200f      	movs	r0, #15
    5eba:	47c0      	blx	r8
    5ebc:	2101      	movs	r1, #1
    5ebe:	4628      	mov	r0, r5
    5ec0:	47c8      	blx	r9
    5ec2:	200f      	movs	r0, #15
    5ec4:	47c0      	blx	r8
    5ec6:	2100      	movs	r1, #0
    5ec8:	4628      	mov	r0, r5
    5eca:	47c8      	blx	r9
    5ecc:	200f      	movs	r0, #15
    5ece:	47c0      	blx	r8
    5ed0:	f1ba 0a01 	subs.w	sl, sl, #1
    5ed4:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
    5ed8:	d1e8      	bne.n	5eac <I2C_getTEMPandMOISTURE+0xa28>
	I2C_WAITACKOP(-4);
    5eda:	9b02      	ldr	r3, [sp, #8]
    5edc:	2101      	movs	r1, #1
    5ede:	4620      	mov	r0, r4
    5ee0:	4798      	blx	r3
    5ee2:	200f      	movs	r0, #15
    5ee4:	47c0      	blx	r8
    5ee6:	2101      	movs	r1, #1
    5ee8:	4628      	mov	r0, r5
    5eea:	47c8      	blx	r9
    5eec:	200f      	movs	r0, #15
    5eee:	47c0      	blx	r8
    5ef0:	4620      	mov	r0, r4
    5ef2:	9b03      	ldr	r3, [sp, #12]
    5ef4:	4798      	blx	r3
    5ef6:	2800      	cmp	r0, #0
    5ef8:	f47f ab7c 	bne.w	55f4 <I2C_getTEMPandMOISTURE+0x170>
    5efc:	4651      	mov	r1, sl
    5efe:	4628      	mov	r0, r5
    5f00:	47c8      	blx	r9
    5f02:	200f      	movs	r0, #15
    5f04:	47c0      	blx	r8
    5f06:	9b02      	ldr	r3, [sp, #8]
    5f08:	2102      	movs	r1, #2
    5f0a:	4620      	mov	r0, r4
    5f0c:	4798      	blx	r3
    5f0e:	200f      	movs	r0, #15
    5f10:	47c0      	blx	r8
	I2C_START(-5);
    5f12:	2101      	movs	r1, #1
    5f14:	4628      	mov	r0, r5
    5f16:	47c8      	blx	r9
    5f18:	2101      	movs	r1, #1
    5f1a:	4620      	mov	r0, r4
    5f1c:	47c8      	blx	r9
    5f1e:	9b02      	ldr	r3, [sp, #8]
    5f20:	2102      	movs	r1, #2
    5f22:	4620      	mov	r0, r4
    5f24:	4798      	blx	r3
    5f26:	200f      	movs	r0, #15
    5f28:	47c0      	blx	r8
    5f2a:	200f      	movs	r0, #15
    5f2c:	47c0      	blx	r8
    5f2e:	4651      	mov	r1, sl
    5f30:	4620      	mov	r0, r4
    5f32:	47c8      	blx	r9
    5f34:	200f      	movs	r0, #15
    5f36:	47c0      	blx	r8
    5f38:	4651      	mov	r1, sl
    5f3a:	4628      	mov	r0, r5
    5f3c:	47c8      	blx	r9
    5f3e:	200f      	movs	r0, #15
    5f40:	47c0      	blx	r8
    5f42:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 603c <I2C_getTEMPandMOISTURE+0xbb8>
    5f46:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 6040 <I2C_getTEMPandMOISTURE+0xbbc>
    5f4a:	f04f 0a07 	mov.w	sl, #7
	I2C_SENDADDR(0x40, forloop);
    5f4e:	f04f 0b40 	mov.w	fp, #64	; 0x40
    5f52:	f01b 0140 	ands.w	r1, fp, #64	; 0x40
    5f56:	bf18      	it	ne
    5f58:	2101      	movne	r1, #1
    5f5a:	4620      	mov	r0, r4
    5f5c:	47c8      	blx	r9
    5f5e:	200f      	movs	r0, #15
    5f60:	47c0      	blx	r8
    5f62:	2101      	movs	r1, #1
    5f64:	4628      	mov	r0, r5
    5f66:	47c8      	blx	r9
    5f68:	200f      	movs	r0, #15
    5f6a:	47c0      	blx	r8
    5f6c:	2100      	movs	r1, #0
    5f6e:	4628      	mov	r0, r5
    5f70:	47c8      	blx	r9
    5f72:	200f      	movs	r0, #15
    5f74:	47c0      	blx	r8
    5f76:	f1ba 0a01 	subs.w	sl, sl, #1
    5f7a:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
    5f7e:	d1e8      	bne.n	5f52 <I2C_getTEMPandMOISTURE+0xace>
	I2C_READ();
    5f80:	2101      	movs	r1, #1
    5f82:	4620      	mov	r0, r4
    5f84:	47c8      	blx	r9
    5f86:	200f      	movs	r0, #15
    5f88:	47c0      	blx	r8
    5f8a:	2101      	movs	r1, #1
    5f8c:	4628      	mov	r0, r5
    5f8e:	47c8      	blx	r9
    5f90:	200f      	movs	r0, #15
    5f92:	47c0      	blx	r8
    5f94:	4651      	mov	r1, sl
    5f96:	4628      	mov	r0, r5
    5f98:	47c8      	blx	r9
    5f9a:	200f      	movs	r0, #15
    5f9c:	47c0      	blx	r8
	I2C_WAITACKIP(-6);
    5f9e:	9b02      	ldr	r3, [sp, #8]
    5fa0:	2101      	movs	r1, #1
    5fa2:	4620      	mov	r0, r4
    5fa4:	4798      	blx	r3
    5fa6:	200f      	movs	r0, #15
    5fa8:	47c0      	blx	r8
    5faa:	2101      	movs	r1, #1
    5fac:	4628      	mov	r0, r5
    5fae:	47c8      	blx	r9
    5fb0:	200f      	movs	r0, #15
    5fb2:	47c0      	blx	r8
    5fb4:	4620      	mov	r0, r4
    5fb6:	9b03      	ldr	r3, [sp, #12]
    5fb8:	4798      	blx	r3
    5fba:	2800      	cmp	r0, #0
    5fbc:	f47f ac6b 	bne.w	5896 <I2C_getTEMPandMOISTURE+0x412>
    5fc0:	4651      	mov	r1, sl
    5fc2:	4628      	mov	r0, r5
    5fc4:	47c8      	blx	r9
    5fc6:	200f      	movs	r0, #15
    5fc8:	47c0      	blx	r8
		I2C_clockhi();
    5fca:	f8df 9070 	ldr.w	r9, [pc, #112]	; 603c <I2C_getTEMPandMOISTURE+0xbb8>
	*hh = 0;
    5fce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5fd0:	2608      	movs	r6, #8
    5fd2:	f883 a000 	strb.w	sl, [r3]
    5fd6:	46c8      	mov	r8, r9
	for (forloop = 0x80; forloop > 0;) {
    5fd8:	f04f 0a80 	mov.w	sl, #128	; 0x80
		I2C_clockhi();
    5fdc:	2101      	movs	r1, #1
    5fde:	4628      	mov	r0, r5
    5fe0:	47c8      	blx	r9
    5fe2:	4f17      	ldr	r7, [pc, #92]	; (6040 <I2C_getTEMPandMOISTURE+0xbbc>)
    5fe4:	200f      	movs	r0, #15
    5fe6:	47b8      	blx	r7
		if (gpio_get_pin_level(i2csda)) {
    5fe8:	4620      	mov	r0, r4
    5fea:	9b03      	ldr	r3, [sp, #12]
    5fec:	4798      	blx	r3
    5fee:	b128      	cbz	r0, 5ffc <I2C_getTEMPandMOISTURE+0xb78>
			(*hh) |= forloop;
    5ff0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5ff2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    5ff4:	781b      	ldrb	r3, [r3, #0]
    5ff6:	ea4a 0303 	orr.w	r3, sl, r3
    5ffa:	7013      	strb	r3, [r2, #0]
		I2C_clocklo();
    5ffc:	2100      	movs	r1, #0
    5ffe:	4628      	mov	r0, r5
    6000:	47c0      	blx	r8
    6002:	200f      	movs	r0, #15
    6004:	47b8      	blx	r7
	for (forloop = 0x80; forloop > 0;) {
    6006:	3e01      	subs	r6, #1
		forloop = forloop / 2;
    6008:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
	for (forloop = 0x80; forloop > 0;) {
    600c:	d1e6      	bne.n	5fdc <I2C_getTEMPandMOISTURE+0xb58>
	I2C_STOP();
    600e:	2101      	movs	r1, #1
    6010:	4628      	mov	r0, r5
    6012:	47c0      	blx	r8
    6014:	200f      	movs	r0, #15
    6016:	47b8      	blx	r7
    6018:	2101      	movs	r1, #1
    601a:	4620      	mov	r0, r4
    601c:	47c0      	blx	r8
    601e:	200f      	movs	r0, #15
    6020:	47b8      	blx	r7
    6022:	2102      	movs	r1, #2
    6024:	4620      	mov	r0, r4
    6026:	4b07      	ldr	r3, [pc, #28]	; (6044 <I2C_getTEMPandMOISTURE+0xbc0>)
    6028:	4798      	blx	r3
    602a:	200f      	movs	r0, #15
    602c:	47b8      	blx	r7
	return 0;
    602e:	4630      	mov	r0, r6
    6030:	f7ff baa7 	b.w	5582 <I2C_getTEMPandMOISTURE+0xfe>
		return -1;
    6034:	f04f 30ff 	mov.w	r0, #4294967295
    6038:	f7ff baa3 	b.w	5582 <I2C_getTEMPandMOISTURE+0xfe>
    603c:	0000439d 	.word	0x0000439d
    6040:	0000122d 	.word	0x0000122d
    6044:	00004405 	.word	0x00004405
    6048:	000043bd 	.word	0x000043bd

0000604c <I2C_check_deviceID>:
// * CALLED BY:			  main()                                                                                                       *
// * CALLS:		          No function. ALL macros defined in this function file.                                                       *
// * --------------------------------------------------------------------------------------------------------------------------------- *
int I2C_check_deviceID(uint8_t sda,  uint8_t clk, unsigned char deviceID)

{
    604c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6050:	460f      	mov	r7, r1
    6052:	4606      	mov	r6, r0
	uint8_t     		i2csda, i2cclk;
    unsigned char		forloop;

    /* Open an I2C channel, send address held in parameter variable "deviceID" */
	I2C_OPEN(sda, clk);
	I2C_START(-1);
    6054:	4d41      	ldr	r5, [pc, #260]	; (615c <I2C_check_deviceID+0x110>)
    6056:	f8df 9110 	ldr.w	r9, [pc, #272]	; 6168 <I2C_check_deviceID+0x11c>
    605a:	4c41      	ldr	r4, [pc, #260]	; (6160 <I2C_check_deviceID+0x114>)
    605c:	2101      	movs	r1, #1
    605e:	4638      	mov	r0, r7
{
    6060:	4693      	mov	fp, r2
	I2C_START(-1);
    6062:	47a8      	blx	r5
    6064:	2101      	movs	r1, #1
    6066:	4630      	mov	r0, r6
    6068:	47a8      	blx	r5
    606a:	2102      	movs	r1, #2
    606c:	4630      	mov	r0, r6
    606e:	47c8      	blx	r9
    6070:	200f      	movs	r0, #15
    6072:	47a0      	blx	r4
    6074:	200f      	movs	r0, #15
    6076:	47a0      	blx	r4
    6078:	2100      	movs	r1, #0
    607a:	4630      	mov	r0, r6
    607c:	47a8      	blx	r5
    607e:	200f      	movs	r0, #15
    6080:	47a0      	blx	r4
    6082:	2100      	movs	r1, #0
    6084:	4638      	mov	r0, r7
    6086:	47a8      	blx	r5
    6088:	200f      	movs	r0, #15
    608a:	47a0      	blx	r4
    608c:	f04f 0807 	mov.w	r8, #7
	I2C_SENDADDR(deviceID, forloop);
    6090:	f04f 0a40 	mov.w	sl, #64	; 0x40
    6094:	ea1b 010a 	ands.w	r1, fp, sl
    6098:	bf18      	it	ne
    609a:	2101      	movne	r1, #1
    609c:	4630      	mov	r0, r6
    609e:	47a8      	blx	r5
    60a0:	200f      	movs	r0, #15
    60a2:	47a0      	blx	r4
    60a4:	2101      	movs	r1, #1
    60a6:	4638      	mov	r0, r7
    60a8:	47a8      	blx	r5
    60aa:	200f      	movs	r0, #15
    60ac:	47a0      	blx	r4
    60ae:	2100      	movs	r1, #0
    60b0:	4638      	mov	r0, r7
    60b2:	47a8      	blx	r5
    60b4:	200f      	movs	r0, #15
    60b6:	47a0      	blx	r4
    60b8:	f1b8 0801 	subs.w	r8, r8, #1
    60bc:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
    60c0:	d1e8      	bne.n	6094 <I2C_check_deviceID+0x48>
	I2C_READ();
    60c2:	2101      	movs	r1, #1
    60c4:	4630      	mov	r0, r6
    60c6:	47a8      	blx	r5
    60c8:	200f      	movs	r0, #15
    60ca:	47a0      	blx	r4
    60cc:	2101      	movs	r1, #1
    60ce:	4638      	mov	r0, r7
    60d0:	47a8      	blx	r5
    60d2:	200f      	movs	r0, #15
    60d4:	47a0      	blx	r4
    60d6:	4641      	mov	r1, r8
    60d8:	4638      	mov	r0, r7
    60da:	47a8      	blx	r5
    60dc:	200f      	movs	r0, #15
    60de:	47a0      	blx	r4
	I2C_WAITACKOP(-2);
    60e0:	2101      	movs	r1, #1
    60e2:	4630      	mov	r0, r6
    60e4:	47c8      	blx	r9
    60e6:	200f      	movs	r0, #15
    60e8:	47a0      	blx	r4
    60ea:	2101      	movs	r1, #1
    60ec:	4638      	mov	r0, r7
    60ee:	47a8      	blx	r5
    60f0:	200f      	movs	r0, #15
    60f2:	47a0      	blx	r4
    60f4:	4630      	mov	r0, r6
    60f6:	4b1b      	ldr	r3, [pc, #108]	; (6164 <I2C_check_deviceID+0x118>)
    60f8:	4798      	blx	r3
    60fa:	b190      	cbz	r0, 6122 <I2C_check_deviceID+0xd6>
    60fc:	2101      	movs	r1, #1
    60fe:	4638      	mov	r0, r7
    6100:	47a8      	blx	r5
    6102:	200f      	movs	r0, #15
    6104:	47a0      	blx	r4
    6106:	2101      	movs	r1, #1
    6108:	4630      	mov	r0, r6
    610a:	47a8      	blx	r5
    610c:	200f      	movs	r0, #15
    610e:	47a0      	blx	r4
    6110:	2102      	movs	r1, #2
    6112:	4630      	mov	r0, r6
    6114:	47c8      	blx	r9
    6116:	200f      	movs	r0, #15
    6118:	47a0      	blx	r4
    611a:	f06f 0001 	mvn.w	r0, #1
    611e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6122:	4641      	mov	r1, r8
    6124:	4638      	mov	r0, r7
    6126:	47a8      	blx	r5
    6128:	200f      	movs	r0, #15
    612a:	47a0      	blx	r4
    612c:	2102      	movs	r1, #2
    612e:	4630      	mov	r0, r6
    6130:	47c8      	blx	r9
    6132:	200f      	movs	r0, #15
    6134:	47a0      	blx	r4
	/* If not successful, then function will return with < 0 value if adddress not found */
	
	I2C_STOP();
    6136:	2101      	movs	r1, #1
    6138:	4638      	mov	r0, r7
    613a:	47a8      	blx	r5
    613c:	200f      	movs	r0, #15
    613e:	47a0      	blx	r4
    6140:	2101      	movs	r1, #1
    6142:	4630      	mov	r0, r6
    6144:	47a8      	blx	r5
    6146:	200f      	movs	r0, #15
    6148:	47a0      	blx	r4
    614a:	2102      	movs	r1, #2
    614c:	4630      	mov	r0, r6
    614e:	47c8      	blx	r9
    6150:	200f      	movs	r0, #15
    6152:	47a0      	blx	r4
	I2C_CLOSE();
	
	/* If successful, and code execution got here, the close the I2C channel and return with ZERO value if address found */
	return 0;
    6154:	4640      	mov	r0, r8
    6156:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    615a:	bf00      	nop
    615c:	0000439d 	.word	0x0000439d
    6160:	0000122d 	.word	0x0000122d
    6164:	000043bd 	.word	0x000043bd
    6168:	00004405 	.word	0x00004405

0000616c <gpio_set_pin_direction>:
    616c:	2201      	movs	r2, #1
    616e:	0943      	lsrs	r3, r0, #5
	switch (direction) {
    6170:	4291      	cmp	r1, r2
    6172:	f000 001f 	and.w	r0, r0, #31
    6176:	fa02 f000 	lsl.w	r0, r2, r0
    617a:	d015      	beq.n	61a8 <gpio_set_pin_direction+0x3c>
    617c:	d306      	bcc.n	618c <gpio_set_pin_direction+0x20>
    617e:	2902      	cmp	r1, #2
    6180:	d023      	beq.n	61ca <gpio_set_pin_direction+0x5e>
		ASSERT(false);
    6182:	2245      	movs	r2, #69	; 0x45
    6184:	4914      	ldr	r1, [pc, #80]	; (61d8 <gpio_set_pin_direction+0x6c>)
    6186:	4b15      	ldr	r3, [pc, #84]	; (61dc <gpio_set_pin_direction+0x70>)
    6188:	2000      	movs	r0, #0
    618a:	4718      	bx	r3
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    618c:	01db      	lsls	r3, r3, #7
    618e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    6192:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    6196:	6058      	str	r0, [r3, #4]
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    6198:	b282      	uxth	r2, r0
    619a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    619e:	0c00      	lsrs	r0, r0, #16
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    61a0:	629a      	str	r2, [r3, #40]	; 0x28
		hri_port_write_WRCONFIG_reg(
    61a2:	f040 4040 	orr.w	r0, r0, #3221225472	; 0xc0000000
    61a6:	e00e      	b.n	61c6 <gpio_set_pin_direction+0x5a>
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    61a8:	01db      	lsls	r3, r3, #7
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    61aa:	b282      	uxth	r2, r0
    61ac:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    61b0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    61b4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    61b8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    61bc:	6058      	str	r0, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    61be:	629a      	str	r2, [r3, #40]	; 0x28
		hri_port_write_WRCONFIG_reg(PORT,
    61c0:	4a07      	ldr	r2, [pc, #28]	; (61e0 <gpio_set_pin_direction+0x74>)
    61c2:	ea42 4010 	orr.w	r0, r2, r0, lsr #16
    61c6:	6298      	str	r0, [r3, #40]	; 0x28
    61c8:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    61ca:	01db      	lsls	r3, r3, #7
    61cc:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    61d0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    61d4:	6098      	str	r0, [r3, #8]
    61d6:	e7df      	b.n	6198 <gpio_set_pin_direction+0x2c>
    61d8:	0000c805 	.word	0x0000c805
    61dc:	00002009 	.word	0x00002009
    61e0:	c0020000 	.word	0xc0020000

000061e4 <gpio_set_pin_pull_mode>:
	switch (pull_mode) {
    61e4:	2901      	cmp	r1, #1
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    61e6:	ea4f 1350 	mov.w	r3, r0, lsr #5
    61ea:	f000 001f 	and.w	r0, r0, #31
    61ee:	d014      	beq.n	621a <gpio_set_pin_pull_mode+0x36>
    61f0:	d306      	bcc.n	6200 <gpio_set_pin_pull_mode+0x1c>
    61f2:	2902      	cmp	r1, #2
    61f4:	d021      	beq.n	623a <gpio_set_pin_pull_mode+0x56>
		ASSERT(false);
    61f6:	2288      	movs	r2, #136	; 0x88
    61f8:	4918      	ldr	r1, [pc, #96]	; (625c <gpio_set_pin_pull_mode+0x78>)
    61fa:	4b19      	ldr	r3, [pc, #100]	; (6260 <gpio_set_pin_pull_mode+0x7c>)
    61fc:	2000      	movs	r0, #0
    61fe:	4718      	bx	r3
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    6200:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
    6204:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    6208:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
    620c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
    6210:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    6214:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    6218:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    621a:	01db      	lsls	r3, r3, #7
    621c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    6220:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    6224:	4081      	lsls	r1, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    6226:	4418      	add	r0, r3
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    6228:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    622a:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
    622e:	f042 0204 	orr.w	r2, r2, #4
    6232:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6236:	6199      	str	r1, [r3, #24]
    6238:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    623a:	01db      	lsls	r3, r3, #7
    623c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    6240:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    6244:	2201      	movs	r2, #1
    6246:	4082      	lsls	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    6248:	4418      	add	r0, r3
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    624a:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    624c:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    6250:	f041 0104 	orr.w	r1, r1, #4
    6254:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6258:	615a      	str	r2, [r3, #20]
    625a:	4770      	bx	lr
    625c:	0000c805 	.word	0x0000c805
    6260:	00002009 	.word	0x00002009

00006264 <timer_setup>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: initializes and starts the main 10 times per second global timer
// Returns:     Nothing
// *****************************************************************************************************************************************************************
void timer_setup(void)
{
    6264:	b510      	push	{r4, lr}
	/* Setup and start the main 1/10th of a second timer expiration callback routine */
	TIMER_0_task1.interval = 100;
    6266:	4908      	ldr	r1, [pc, #32]	; (6288 <timer_setup+0x24>)
	TIMER_0_task1.cb       = TIMER_0_task1_cb;
	TIMER_0_task1.mode     = TIMER_TASK_REPEAT;

	/* Start the repeatable timer feature */
	timer_add_task(&TIMER_0, &TIMER_0_task1);
    6268:	4c08      	ldr	r4, [pc, #32]	; (628c <timer_setup+0x28>)
	TIMER_0_task1.interval = 100;
    626a:	2364      	movs	r3, #100	; 0x64
    626c:	608b      	str	r3, [r1, #8]
	TIMER_0_task1.cb       = TIMER_0_task1_cb;
    626e:	4b08      	ldr	r3, [pc, #32]	; (6290 <timer_setup+0x2c>)
    6270:	60cb      	str	r3, [r1, #12]
	TIMER_0_task1.mode     = TIMER_TASK_REPEAT;
    6272:	2301      	movs	r3, #1
    6274:	740b      	strb	r3, [r1, #16]
	timer_add_task(&TIMER_0, &TIMER_0_task1);
    6276:	4620      	mov	r0, r4
    6278:	4b06      	ldr	r3, [pc, #24]	; (6294 <timer_setup+0x30>)
    627a:	4798      	blx	r3
	timer_start(&TIMER_0);
    627c:	4620      	mov	r0, r4
    627e:	4b06      	ldr	r3, [pc, #24]	; (6298 <timer_setup+0x34>)
}
    6280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	timer_start(&TIMER_0);
    6284:	4718      	bx	r3
    6286:	bf00      	nop
    6288:	20008680 	.word	0x20008680
    628c:	20007564 	.word	0x20007564
    6290:	0000714d 	.word	0x0000714d
    6294:	000017c9 	.word	0x000017c9
    6298:	0000178d 	.word	0x0000178d

0000629c <ADC_init>:
// Returns:     Nothing
// *****************************************************************************************************************************************************************
void ADC_init(void)
{
	/* Setup the two internal water detection analogue inputs BOTH on "ADC_0" channels and also the HIGH-VOLTAGE ADC [0|1|2]*/
	adc_sync_enable_channel(&ADC_0, 0);
    629c:	2100      	movs	r1, #0
    629e:	4801      	ldr	r0, [pc, #4]	; (62a4 <ADC_init+0x8>)
    62a0:	4b01      	ldr	r3, [pc, #4]	; (62a8 <ADC_init+0xc>)
    62a2:	4718      	bx	r3
    62a4:	2000748c 	.word	0x2000748c
    62a8:	00001071 	.word	0x00001071

000062ac <comms_init>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: setup the SPI and the USB
// Returns:     Nothing
// *****************************************************************************************************************************************************************
void comms_init(void)
{
    62ac:	b510      	push	{r4, lr}
	/* Global initialization of main USB mechanism */
	if (usb_d_enable() < 0) {
    62ae:	4b0c      	ldr	r3, [pc, #48]	; (62e0 <comms_init+0x34>)
    62b0:	4c0c      	ldr	r4, [pc, #48]	; (62e4 <comms_init+0x38>)
    62b2:	4798      	blx	r3
    62b4:	2800      	cmp	r0, #0
    62b6:	da04      	bge.n	62c2 <comms_init+0x16>
		xprintf("USB init/enable ERROR!!!!!!!\r\n");
    62b8:	480b      	ldr	r0, [pc, #44]	; (62e8 <comms_init+0x3c>)
		cdc_device_acm_init();
		xprintf("cdc_device_acm_init()\r\n");
		
		/* Register the read callback function */
		cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)usb_device_cb_state_c);
		xprintf("cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)usb_device_cb_state_c)\r\n");
    62ba:	4623      	mov	r3, r4
	}
}
    62bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		xprintf("cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)usb_device_cb_state_c)\r\n");
    62c0:	4718      	bx	r3
		usb_init();
    62c2:	4b0a      	ldr	r3, [pc, #40]	; (62ec <comms_init+0x40>)
    62c4:	4798      	blx	r3
		xprintf("usb_init()\r\n");
    62c6:	480a      	ldr	r0, [pc, #40]	; (62f0 <comms_init+0x44>)
    62c8:	47a0      	blx	r4
		cdc_device_acm_init();
    62ca:	4b0a      	ldr	r3, [pc, #40]	; (62f4 <comms_init+0x48>)
    62cc:	4798      	blx	r3
		xprintf("cdc_device_acm_init()\r\n");
    62ce:	480a      	ldr	r0, [pc, #40]	; (62f8 <comms_init+0x4c>)
    62d0:	47a0      	blx	r4
		cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)usb_device_cb_state_c);
    62d2:	490a      	ldr	r1, [pc, #40]	; (62fc <comms_init+0x50>)
    62d4:	4b0a      	ldr	r3, [pc, #40]	; (6300 <comms_init+0x54>)
    62d6:	2003      	movs	r0, #3
    62d8:	4798      	blx	r3
		xprintf("cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)usb_device_cb_state_c)\r\n");
    62da:	480a      	ldr	r0, [pc, #40]	; (6304 <comms_init+0x58>)
    62dc:	e7ed      	b.n	62ba <comms_init+0xe>
    62de:	bf00      	nop
    62e0:	00001d7d 	.word	0x00001d7d
    62e4:	00000395 	.word	0x00000395
    62e8:	0000c821 	.word	0x0000c821
    62ec:	0000b121 	.word	0x0000b121
    62f0:	0000c840 	.word	0x0000c840
    62f4:	0000b0ed 	.word	0x0000b0ed
    62f8:	0000c84d 	.word	0x0000c84d
    62fc:	0000b0b1 	.word	0x0000b0b1
    6300:	0000a9f9 	.word	0x0000a9f9
    6304:	0000c865 	.word	0x0000c865

00006308 <crypto_init>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: initialize the AES encryption-engine in the CPU core
// Returns:     Nothing
// *****************************************************************************************************************************************************************
void crypto_init(void)
{
    6308:	b510      	push	{r4, lr}
	/* Initialize and start the crypt hardware block. Insert and program the private AES key for this device-node also */
	aes_sync_enable(&CRYPTOGRAPHY_0);
    630a:	4c05      	ldr	r4, [pc, #20]	; (6320 <crypto_init+0x18>)
    630c:	4b05      	ldr	r3, [pc, #20]	; (6324 <crypto_init+0x1c>)
    630e:	4620      	mov	r0, r4
    6310:	4798      	blx	r3
	aes_sync_set_encrypt_key(&CRYPTOGRAPHY_0, aes_key, AES_KEY_128);
    6312:	4620      	mov	r0, r4
    6314:	2200      	movs	r2, #0
    6316:	4904      	ldr	r1, [pc, #16]	; (6328 <crypto_init+0x20>)
    6318:	4b04      	ldr	r3, [pc, #16]	; (632c <crypto_init+0x24>)
}
    631a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	aes_sync_set_encrypt_key(&CRYPTOGRAPHY_0, aes_key, AES_KEY_128);
    631e:	4718      	bx	r3
    6320:	20007444 	.word	0x20007444
    6324:	00001175 	.word	0x00001175
    6328:	20000004 	.word	0x20000004
    632c:	0000119d 	.word	0x0000119d

00006330 <switch_init>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: reset and start the Ethernet SWITCH IC
// Returns:     Nothing
// *****************************************************************************************************************************************************************
void switch_init(void)
{
    6330:	b570      	push	{r4, r5, r6, lr}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6332:	4c07      	ldr	r4, [pc, #28]	; (6350 <switch_init+0x20>)
	/* Go through the reset sequence of the GPIO for the Micrel Ethernet-SWITCH */
	gpio_set_pin_level(PB00_KSZ_RESET, 1);
	delay_ms(10);
    6334:	4e07      	ldr	r6, [pc, #28]	; (6354 <switch_init+0x24>)
    6336:	2501      	movs	r5, #1
    6338:	200a      	movs	r0, #10
    633a:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
    633e:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6340:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
	gpio_set_pin_level(PB00_KSZ_RESET, 0);
	delay_ms(100);
    6344:	2064      	movs	r0, #100	; 0x64
    6346:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6348:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
    634c:	bd70      	pop	{r4, r5, r6, pc}
    634e:	bf00      	nop
    6350:	41008000 	.word	0x41008000
    6354:	00001251 	.word	0x00001251

00006358 <switch_configure>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: check all default register settings in the Ethernet SWITCH and also change relevant settings to suit the MultiSense operation
// Returns:     Nothing
// *****************************************************************************************************************************************************************
void switch_configure(void)
{
    6358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	xprintf("Configuring and checking the SPI KSZ8794 Ethernet SWITCH registers...\r\n");
    635c:	4886      	ldr	r0, [pc, #536]	; (6578 <switch_configure+0x220>)
    635e:	4d87      	ldr	r5, [pc, #540]	; (657c <switch_configure+0x224>)
	
	/* Write set-up commands to the KSZ Ethernet SWITCH via SPI bus */
	if (!checkKSZreg(SPI_KSZ8794_FAMILY_ID, 0x87))		{ xprintf("[SPI_KSZ8794_FAMILY_ID] not correct\r\n"); }
    6360:	4c87      	ldr	r4, [pc, #540]	; (6580 <switch_configure+0x228>)
	xprintf("Configuring and checking the SPI KSZ8794 Ethernet SWITCH registers...\r\n");
    6362:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_FAMILY_ID, 0x87))		{ xprintf("[SPI_KSZ8794_FAMILY_ID] not correct\r\n"); }
    6364:	2187      	movs	r1, #135	; 0x87
    6366:	2000      	movs	r0, #0
    6368:	47a0      	blx	r4
    636a:	b908      	cbnz	r0, 6370 <switch_configure+0x18>
    636c:	4885      	ldr	r0, [pc, #532]	; (6584 <switch_configure+0x22c>)
    636e:	47a8      	blx	r5
		
	/* Stop the Ethernet SWITCH operation */
	writeKSZreg(SPI_KSZ8794_START, 0x00);
    6370:	4e85      	ldr	r6, [pc, #532]	; (6588 <switch_configure+0x230>)
	writeKSZreg(SPI_KSZ8794_GLOBAL2, 0xB0);
	writeKSZreg(SPI_KSZ8794_GLOBAL6, 0x80);
	delay_us(50);
    6372:	4f86      	ldr	r7, [pc, #536]	; (658c <switch_configure+0x234>)
	writeKSZreg(SPI_KSZ8794_START, 0x00);
    6374:	2100      	movs	r1, #0
    6376:	2001      	movs	r0, #1
    6378:	47b0      	blx	r6
	writeKSZreg(SPI_KSZ8794_GLOBAL2, 0xB0);
    637a:	21b0      	movs	r1, #176	; 0xb0
    637c:	2004      	movs	r0, #4
    637e:	47b0      	blx	r6
	writeKSZreg(SPI_KSZ8794_GLOBAL6, 0x80);
    6380:	2180      	movs	r1, #128	; 0x80
    6382:	2008      	movs	r0, #8
    6384:	47b0      	blx	r6
	delay_us(50);
    6386:	2032      	movs	r0, #50	; 0x32
    6388:	47b8      	blx	r7
	
	if (!checkKSZreg(SPI_KSZ8794_START, 0x60))			{ xprintf("[SPI_KSZ8794_START first] not correct\r\n"); }
    638a:	2160      	movs	r1, #96	; 0x60
    638c:	2001      	movs	r0, #1
    638e:	47a0      	blx	r4
    6390:	b908      	cbnz	r0, 6396 <switch_configure+0x3e>
    6392:	487f      	ldr	r0, [pc, #508]	; (6590 <switch_configure+0x238>)
    6394:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_GLOBAL0, 0x0C))		{ xprintf("[SPI_KSZ8794_GLOBAL0] not correct\r\n"); }
    6396:	210c      	movs	r1, #12
    6398:	2002      	movs	r0, #2
    639a:	47a0      	blx	r4
    639c:	b908      	cbnz	r0, 63a2 <switch_configure+0x4a>
    639e:	487d      	ldr	r0, [pc, #500]	; (6594 <switch_configure+0x23c>)
    63a0:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_GLOBAL1, 0x04))		{ xprintf("[SPI_KSZ8794_GLOBAL1] not correct\r\n"); }
    63a2:	2104      	movs	r1, #4
    63a4:	2003      	movs	r0, #3
    63a6:	47a0      	blx	r4
    63a8:	b908      	cbnz	r0, 63ae <switch_configure+0x56>
    63aa:	487b      	ldr	r0, [pc, #492]	; (6598 <switch_configure+0x240>)
    63ac:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_GLOBAL2, 0xB0))		{ xprintf("[SPI_KSZ8794_GLOBAL2] not correct\r\n"); }
    63ae:	21b0      	movs	r1, #176	; 0xb0
    63b0:	2004      	movs	r0, #4
    63b2:	47a0      	blx	r4
    63b4:	b908      	cbnz	r0, 63ba <switch_configure+0x62>
    63b6:	4879      	ldr	r0, [pc, #484]	; (659c <switch_configure+0x244>)
    63b8:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_GLOBAL3, 0x00))		{ xprintf("[SPI_KSZ8794_GLOBAL3] not correct\r\n"); }
    63ba:	2100      	movs	r1, #0
    63bc:	2005      	movs	r0, #5
    63be:	47a0      	blx	r4
    63c0:	b908      	cbnz	r0, 63c6 <switch_configure+0x6e>
    63c2:	4877      	ldr	r0, [pc, #476]	; (65a0 <switch_configure+0x248>)
    63c4:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_GLOBAL4, 0x00))		{ xprintf("[SPI_KSZ8794_GLOBAL4] not correct\r\n"); }
    63c6:	2100      	movs	r1, #0
    63c8:	2006      	movs	r0, #6
    63ca:	47a0      	blx	r4
    63cc:	b908      	cbnz	r0, 63d2 <switch_configure+0x7a>
    63ce:	4875      	ldr	r0, [pc, #468]	; (65a4 <switch_configure+0x24c>)
    63d0:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_GLOBAL5, 0x4A))		{ xprintf("[SPI_KSZ8794_GLOBAL5] not correct\r\n"); }
    63d2:	214a      	movs	r1, #74	; 0x4a
    63d4:	2007      	movs	r0, #7
    63d6:	47a0      	blx	r4
    63d8:	b908      	cbnz	r0, 63de <switch_configure+0x86>
    63da:	4873      	ldr	r0, [pc, #460]	; (65a8 <switch_configure+0x250>)
    63dc:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_GLOBAL6, 0x00))		{ xprintf("[SPI_KSZ8794_GLOBAL6] not correct\r\n"); }
    63de:	2100      	movs	r1, #0
    63e0:	2008      	movs	r0, #8
    63e2:	47a0      	blx	r4
    63e4:	b908      	cbnz	r0, 63ea <switch_configure+0x92>
    63e6:	4871      	ldr	r0, [pc, #452]	; (65ac <switch_configure+0x254>)
    63e8:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_GLOBAL9, 0x00))		{ xprintf("[SPI_KSZ8794_GLOBAL9] not correct\r\n"); }
    63ea:	2100      	movs	r1, #0
    63ec:	200b      	movs	r0, #11
    63ee:	47a0      	blx	r4
    63f0:	b908      	cbnz	r0, 63f6 <switch_configure+0x9e>
    63f2:	486f      	ldr	r0, [pc, #444]	; (65b0 <switch_configure+0x258>)
    63f4:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_GLOBAL10, 0x44))		{ xprintf("[SPI_KSZ8794_GLOBAL10] not correct\r\n"); }
    63f6:	2144      	movs	r1, #68	; 0x44
    63f8:	200c      	movs	r0, #12
    63fa:	47a0      	blx	r4
    63fc:	b908      	cbnz	r0, 6402 <switch_configure+0xaa>
    63fe:	486d      	ldr	r0, [pc, #436]	; (65b4 <switch_configure+0x25c>)
    6400:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_PDMC1, 0x00))			{ xprintf("[SPI_KSZ8794_PDMC1] not correct\r\n"); }
    6402:	2100      	movs	r1, #0
    6404:	200e      	movs	r0, #14
    6406:	47a0      	blx	r4
    6408:	b908      	cbnz	r0, 640e <switch_configure+0xb6>
    640a:	486b      	ldr	r0, [pc, #428]	; (65b8 <switch_configure+0x260>)
    640c:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_PDMC2, 0x50))			{ xprintf("[SPI_KSZ8794_PDMC2] not correct\r\n"); }
    640e:	2150      	movs	r1, #80	; 0x50
    6410:	200f      	movs	r0, #15
    6412:	47a0      	blx	r4
    6414:	b908      	cbnz	r0, 641a <switch_configure+0xc2>
    6416:	4869      	ldr	r0, [pc, #420]	; (65bc <switch_configure+0x264>)
    6418:	47a8      	blx	r5
	
	writeKSZreg(SPI_KSZ8794_PORT1CONTROL0, 0x80);
    641a:	2180      	movs	r1, #128	; 0x80
    641c:	2010      	movs	r0, #16
    641e:	47b0      	blx	r6
	delay_us(50);
    6420:	2032      	movs	r0, #50	; 0x32
    6422:	47b8      	blx	r7
	
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL0, 0x80))	{ xprintf("[SPI_KSZ8794_PORT1CONTROL0] not correct\r\n"); }
    6424:	2180      	movs	r1, #128	; 0x80
    6426:	2010      	movs	r0, #16
    6428:	47a0      	blx	r4
    642a:	b908      	cbnz	r0, 6430 <switch_configure+0xd8>
    642c:	4864      	ldr	r0, [pc, #400]	; (65c0 <switch_configure+0x268>)
    642e:	47a8      	blx	r5
	
	writeKSZreg(SPI_KSZ8794_PORT2CONTROL0, 0x80);
    6430:	2180      	movs	r1, #128	; 0x80
    6432:	2020      	movs	r0, #32
    6434:	47b0      	blx	r6
	delay_us(50);
    6436:	2032      	movs	r0, #50	; 0x32
    6438:	47b8      	blx	r7
	
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL0, 0x80))	{ xprintf("[SPI_KSZ8794_PORT2CONTROL0] not correct\r\n"); }
    643a:	2180      	movs	r1, #128	; 0x80
    643c:	2020      	movs	r0, #32
    643e:	47a0      	blx	r4
    6440:	b908      	cbnz	r0, 6446 <switch_configure+0xee>
    6442:	4860      	ldr	r0, [pc, #384]	; (65c4 <switch_configure+0x26c>)
    6444:	47a8      	blx	r5
	
	writeKSZreg(SPI_KSZ8794_PORT3CONTROL0, 0x80);
    6446:	2180      	movs	r1, #128	; 0x80
    6448:	2030      	movs	r0, #48	; 0x30
    644a:	47b0      	blx	r6
	delay_us(50);
    644c:	2032      	movs	r0, #50	; 0x32
    644e:	47b8      	blx	r7
	
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL0, 0x80))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL0] not correct\r\n"); }
    6450:	2180      	movs	r1, #128	; 0x80
    6452:	2030      	movs	r0, #48	; 0x30
    6454:	47a0      	blx	r4
    6456:	b908      	cbnz	r0, 645c <switch_configure+0x104>
    6458:	485b      	ldr	r0, [pc, #364]	; (65c8 <switch_configure+0x270>)
    645a:	47a8      	blx	r5
	
	writeKSZreg(SPI_KSZ8794_PORT4CONTROL0, 0x80);
    645c:	2180      	movs	r1, #128	; 0x80
    645e:	2050      	movs	r0, #80	; 0x50
    6460:	47b0      	blx	r6
	delay_us(50);
    6462:	2032      	movs	r0, #50	; 0x32
    6464:	47b8      	blx	r7
	
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL0, 0x80))	{ xprintf("[SPI_KSZ8794_PORT4CONTROL0] not correct\r\n"); }
    6466:	2180      	movs	r1, #128	; 0x80
    6468:	2050      	movs	r0, #80	; 0x50
    646a:	47a0      	blx	r4
    646c:	b908      	cbnz	r0, 6472 <switch_configure+0x11a>
    646e:	4857      	ldr	r0, [pc, #348]	; (65cc <switch_configure+0x274>)
    6470:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL1, 0x1F))	{ xprintf("[SPI_KSZ8794_PORT1CONTROL1] not correct\r\n"); }
    6472:	211f      	movs	r1, #31
    6474:	2011      	movs	r0, #17
    6476:	47a0      	blx	r4
    6478:	b908      	cbnz	r0, 647e <switch_configure+0x126>
    647a:	4855      	ldr	r0, [pc, #340]	; (65d0 <switch_configure+0x278>)
    647c:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL1, 0x1F))	{ xprintf("[SPI_KSZ8794_PORT2CONTROL1] not correct\r\n"); }
    647e:	211f      	movs	r1, #31
    6480:	2021      	movs	r0, #33	; 0x21
    6482:	47a0      	blx	r4
    6484:	b908      	cbnz	r0, 648a <switch_configure+0x132>
    6486:	4853      	ldr	r0, [pc, #332]	; (65d4 <switch_configure+0x27c>)
    6488:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL1, 0x1F))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL1] not correct\r\n"); }
    648a:	211f      	movs	r1, #31
    648c:	2031      	movs	r0, #49	; 0x31
    648e:	47a0      	blx	r4
    6490:	b908      	cbnz	r0, 6496 <switch_configure+0x13e>
    6492:	4851      	ldr	r0, [pc, #324]	; (65d8 <switch_configure+0x280>)
    6494:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL1, 0x1F))	{ xprintf("[SPI_KSZ8794_PORT4CONTROL1] not correct\r\n"); }
    6496:	211f      	movs	r1, #31
    6498:	2051      	movs	r0, #81	; 0x51
    649a:	47a0      	blx	r4
    649c:	b908      	cbnz	r0, 64a2 <switch_configure+0x14a>
    649e:	484f      	ldr	r0, [pc, #316]	; (65dc <switch_configure+0x284>)
    64a0:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL2, 0x06))	{ xprintf("[SPI_KSZ8794_PORT1CONTROL2] not correct\r\n"); }
    64a2:	2106      	movs	r1, #6
    64a4:	2012      	movs	r0, #18
    64a6:	47a0      	blx	r4
    64a8:	b908      	cbnz	r0, 64ae <switch_configure+0x156>
    64aa:	484d      	ldr	r0, [pc, #308]	; (65e0 <switch_configure+0x288>)
    64ac:	47a8      	blx	r5
	
	if (((CONFIG *)&settings_buffer)->loop_basestation) {	
    64ae:	4b4d      	ldr	r3, [pc, #308]	; (65e4 <switch_configure+0x28c>)
    64b0:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
    64b4:	2b00      	cmp	r3, #0
    64b6:	f000 8248 	beq.w	694a <switch_configure+0x5f2>
		writeKSZreg(SPI_KSZ8794_PORT2CONTROL2, 0x00);	
    64ba:	2100      	movs	r1, #0
    64bc:	2022      	movs	r0, #34	; 0x22
    64be:	47b0      	blx	r6
		if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL2, 0x00))	{ xprintf("[SPI_KSZ8794_PORT2CONTROL2] not correct\r\n"); }
    64c0:	2100      	movs	r1, #0
    64c2:	2022      	movs	r0, #34	; 0x22
    64c4:	47a0      	blx	r4
    64c6:	b908      	cbnz	r0, 64cc <switch_configure+0x174>
    64c8:	4847      	ldr	r0, [pc, #284]	; (65e8 <switch_configure+0x290>)
    64ca:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_PORT2CONTROL2, 0x06);	
		if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL2, 0x06))	{ xprintf("[SPI_KSZ8794_PORT2CONTROL2] not correct\r\n"); }
	}
	
	/* For now, turn off the T-junction port 3 to the Power & Ethernet board attachment */
	writeKSZreg(SPI_KSZ8794_PORT3CONTROL2, 0x00);
    64cc:	2100      	movs	r1, #0
    64ce:	2032      	movs	r0, #50	; 0x32
    64d0:	47b0      	blx	r6
	delay_us(50);
    64d2:	2032      	movs	r0, #50	; 0x32
    64d4:	47b8      	blx	r7
	
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL2, 0x00))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL2] not correct\r\n"); }
    64d6:	2100      	movs	r1, #0
    64d8:	2032      	movs	r0, #50	; 0x32
    64da:	47a0      	blx	r4
    64dc:	b908      	cbnz	r0, 64e2 <switch_configure+0x18a>
    64de:	4843      	ldr	r0, [pc, #268]	; (65ec <switch_configure+0x294>)
    64e0:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL2, 0x06))	{ xprintf("[SPI_KSZ8794_PORT4CONTROL2] not correct\r\n"); }
    64e2:	2106      	movs	r1, #6
    64e4:	2052      	movs	r0, #82	; 0x52
    64e6:	47a0      	blx	r4
    64e8:	b908      	cbnz	r0, 64ee <switch_configure+0x196>
    64ea:	4841      	ldr	r0, [pc, #260]	; (65f0 <switch_configure+0x298>)
    64ec:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL3, 0x00))	{ xprintf("[SPI_KSZ8794_PORT1CONTROL3] not correct\r\n"); }
    64ee:	2100      	movs	r1, #0
    64f0:	2013      	movs	r0, #19
    64f2:	47a0      	blx	r4
    64f4:	b908      	cbnz	r0, 64fa <switch_configure+0x1a2>
    64f6:	483f      	ldr	r0, [pc, #252]	; (65f4 <switch_configure+0x29c>)
    64f8:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL3, 0x00))	{ xprintf("[SPI_KSZ8794_PORT2CONTROL3] not correct\r\n"); }
    64fa:	2100      	movs	r1, #0
    64fc:	2023      	movs	r0, #35	; 0x23
    64fe:	47a0      	blx	r4
    6500:	b908      	cbnz	r0, 6506 <switch_configure+0x1ae>
    6502:	483d      	ldr	r0, [pc, #244]	; (65f8 <switch_configure+0x2a0>)
    6504:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL3, 0x00))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL3] not correct\r\n"); }
    6506:	2100      	movs	r1, #0
    6508:	2033      	movs	r0, #51	; 0x33
    650a:	47a0      	blx	r4
    650c:	b908      	cbnz	r0, 6512 <switch_configure+0x1ba>
    650e:	483b      	ldr	r0, [pc, #236]	; (65fc <switch_configure+0x2a4>)
    6510:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL3, 0x00))	{ xprintf("[SPI_KSZ8794_PORT4CONTROL3] not correct\r\n"); }
    6512:	2100      	movs	r1, #0
    6514:	2053      	movs	r0, #83	; 0x53
    6516:	47a0      	blx	r4
    6518:	b908      	cbnz	r0, 651e <switch_configure+0x1c6>
    651a:	4839      	ldr	r0, [pc, #228]	; (6600 <switch_configure+0x2a8>)
    651c:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL4, 0x01))	{ xprintf("[SPI_KSZ8794_PORT1CONTROL4] not correct\r\n"); }
    651e:	2101      	movs	r1, #1
    6520:	2014      	movs	r0, #20
    6522:	47a0      	blx	r4
    6524:	b908      	cbnz	r0, 652a <switch_configure+0x1d2>
    6526:	4837      	ldr	r0, [pc, #220]	; (6604 <switch_configure+0x2ac>)
    6528:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL4, 0x01))	{ xprintf("[SPI_KSZ8794_PORT2CONTROL4] not correct\r\n"); }
    652a:	2101      	movs	r1, #1
    652c:	2024      	movs	r0, #36	; 0x24
    652e:	47a0      	blx	r4
    6530:	b910      	cbnz	r0, 6538 <switch_configure+0x1e0>
    6532:	4835      	ldr	r0, [pc, #212]	; (6608 <switch_configure+0x2b0>)
    6534:	4b11      	ldr	r3, [pc, #68]	; (657c <switch_configure+0x224>)
    6536:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL4, 0x01))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL4] not correct\r\n"); }
    6538:	2101      	movs	r1, #1
    653a:	2034      	movs	r0, #52	; 0x34
    653c:	4c10      	ldr	r4, [pc, #64]	; (6580 <switch_configure+0x228>)
    653e:	47a0      	blx	r4
    6540:	b910      	cbnz	r0, 6548 <switch_configure+0x1f0>
    6542:	4832      	ldr	r0, [pc, #200]	; (660c <switch_configure+0x2b4>)
    6544:	4b0d      	ldr	r3, [pc, #52]	; (657c <switch_configure+0x224>)
    6546:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL4, 0x01))	{ xprintf("[SPI_KSZ8794_PORT4CONTROL4] not correct\r\n"); }
    6548:	2101      	movs	r1, #1
    654a:	2054      	movs	r0, #84	; 0x54
    654c:	47a0      	blx	r4
    654e:	b910      	cbnz	r0, 6556 <switch_configure+0x1fe>
    6550:	482f      	ldr	r0, [pc, #188]	; (6610 <switch_configure+0x2b8>)
    6552:	4b0a      	ldr	r3, [pc, #40]	; (657c <switch_configure+0x224>)
    6554:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL5, 0x00))	{ xprintf("[SPI_KSZ8794_PORT1CONTROL5] not correct\r\n"); }
    6556:	2100      	movs	r1, #0
    6558:	2015      	movs	r0, #21
    655a:	47a0      	blx	r4
    655c:	b910      	cbnz	r0, 6564 <switch_configure+0x20c>
    655e:	482d      	ldr	r0, [pc, #180]	; (6614 <switch_configure+0x2bc>)
    6560:	4b06      	ldr	r3, [pc, #24]	; (657c <switch_configure+0x224>)
    6562:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL5, 0x00))	{ xprintf("[SPI_KSZ8794_PORT2CONTROL5] not correct\r\n"); }
    6564:	2100      	movs	r1, #0
    6566:	2025      	movs	r0, #37	; 0x25
    6568:	47a0      	blx	r4
    656a:	2800      	cmp	r0, #0
    656c:	d156      	bne.n	661c <switch_configure+0x2c4>
    656e:	482a      	ldr	r0, [pc, #168]	; (6618 <switch_configure+0x2c0>)
    6570:	4b02      	ldr	r3, [pc, #8]	; (657c <switch_configure+0x224>)
    6572:	4798      	blx	r3
    6574:	e052      	b.n	661c <switch_configure+0x2c4>
    6576:	bf00      	nop
    6578:	0000c8ba 	.word	0x0000c8ba
    657c:	00000395 	.word	0x00000395
    6580:	0000b1e9 	.word	0x0000b1e9
    6584:	0000c902 	.word	0x0000c902
    6588:	0000b259 	.word	0x0000b259
    658c:	0000122d 	.word	0x0000122d
    6590:	0000c928 	.word	0x0000c928
    6594:	0000c950 	.word	0x0000c950
    6598:	0000c974 	.word	0x0000c974
    659c:	0000c998 	.word	0x0000c998
    65a0:	0000c9bc 	.word	0x0000c9bc
    65a4:	0000c9e0 	.word	0x0000c9e0
    65a8:	0000ca04 	.word	0x0000ca04
    65ac:	0000ca28 	.word	0x0000ca28
    65b0:	0000ca4c 	.word	0x0000ca4c
    65b4:	0000ca70 	.word	0x0000ca70
    65b8:	0000ca95 	.word	0x0000ca95
    65bc:	0000cab7 	.word	0x0000cab7
    65c0:	0000cad9 	.word	0x0000cad9
    65c4:	0000cb03 	.word	0x0000cb03
    65c8:	0000cb2d 	.word	0x0000cb2d
    65cc:	0000cb57 	.word	0x0000cb57
    65d0:	0000cb81 	.word	0x0000cb81
    65d4:	0000cbab 	.word	0x0000cbab
    65d8:	0000cbd5 	.word	0x0000cbd5
    65dc:	0000cbff 	.word	0x0000cbff
    65e0:	0000cc29 	.word	0x0000cc29
    65e4:	200081dc 	.word	0x200081dc
    65e8:	0000cc53 	.word	0x0000cc53
    65ec:	0000c2be 	.word	0x0000c2be
    65f0:	0000cc7d 	.word	0x0000cc7d
    65f4:	0000cca7 	.word	0x0000cca7
    65f8:	0000ccd1 	.word	0x0000ccd1
    65fc:	0000ccfb 	.word	0x0000ccfb
    6600:	0000cd25 	.word	0x0000cd25
    6604:	0000cd4f 	.word	0x0000cd4f
    6608:	0000cd79 	.word	0x0000cd79
    660c:	0000cda3 	.word	0x0000cda3
    6610:	0000cdcd 	.word	0x0000cdcd
    6614:	0000cdf7 	.word	0x0000cdf7
    6618:	0000ce21 	.word	0x0000ce21
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL5, 0x00))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL5] not correct\r\n"); }
    661c:	2100      	movs	r1, #0
    661e:	2035      	movs	r0, #53	; 0x35
    6620:	47a0      	blx	r4
    6622:	b910      	cbnz	r0, 662a <switch_configure+0x2d2>
    6624:	487f      	ldr	r0, [pc, #508]	; (6824 <switch_configure+0x4cc>)
    6626:	4b80      	ldr	r3, [pc, #512]	; (6828 <switch_configure+0x4d0>)
    6628:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL5, 0x00))	{ xprintf("[SPI_KSZ8794_PORT4CONTROL5] not correct\r\n"); }
    662a:	2100      	movs	r1, #0
    662c:	2055      	movs	r0, #85	; 0x55
    662e:	47a0      	blx	r4
    6630:	b910      	cbnz	r0, 6638 <switch_configure+0x2e0>
    6632:	487e      	ldr	r0, [pc, #504]	; (682c <switch_configure+0x4d4>)
    6634:	4b7c      	ldr	r3, [pc, #496]	; (6828 <switch_configure+0x4d0>)
    6636:	4798      	blx	r3
		
	writeKSZreg(SPI_KSZ8794_PORT4CONTROL6, 0x20);
    6638:	2120      	movs	r1, #32
    663a:	2056      	movs	r0, #86	; 0x56
    663c:	4b7c      	ldr	r3, [pc, #496]	; (6830 <switch_configure+0x4d8>)
    663e:	4798      	blx	r3
	delay_us(50);
    6640:	2032      	movs	r0, #50	; 0x32
    6642:	4b7c      	ldr	r3, [pc, #496]	; (6834 <switch_configure+0x4dc>)
    6644:	4798      	blx	r3
	
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL6, 0x20))	{ xprintf("[SPI_KSZ8794_PORT4CONTROL6] not correct\r\n"); }
    6646:	2120      	movs	r1, #32
    6648:	2056      	movs	r0, #86	; 0x56
    664a:	47a0      	blx	r4
    664c:	b910      	cbnz	r0, 6654 <switch_configure+0x2fc>
    664e:	487a      	ldr	r0, [pc, #488]	; (6838 <switch_configure+0x4e0>)
    6650:	4b75      	ldr	r3, [pc, #468]	; (6828 <switch_configure+0x4d0>)
    6652:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL7, 0x3F))	{ xprintf("[SPI_KSZ8794_PORT1CONTROL7] not correct\r\n"); }
    6654:	213f      	movs	r1, #63	; 0x3f
    6656:	2017      	movs	r0, #23
    6658:	47a0      	blx	r4
    665a:	b910      	cbnz	r0, 6662 <switch_configure+0x30a>
    665c:	4877      	ldr	r0, [pc, #476]	; (683c <switch_configure+0x4e4>)
    665e:	4b72      	ldr	r3, [pc, #456]	; (6828 <switch_configure+0x4d0>)
    6660:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL7, 0x3F))	{ xprintf("[SPI_KSZ8794_PORT2CONTROL7] not correct\r\n"); }
    6662:	213f      	movs	r1, #63	; 0x3f
    6664:	2027      	movs	r0, #39	; 0x27
    6666:	47a0      	blx	r4
    6668:	b910      	cbnz	r0, 6670 <switch_configure+0x318>
    666a:	4875      	ldr	r0, [pc, #468]	; (6840 <switch_configure+0x4e8>)
    666c:	4b6e      	ldr	r3, [pc, #440]	; (6828 <switch_configure+0x4d0>)
    666e:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL7, 0x3F))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL7] not correct\r\n"); }
    6670:	213f      	movs	r1, #63	; 0x3f
    6672:	2037      	movs	r0, #55	; 0x37
    6674:	47a0      	blx	r4
    6676:	b910      	cbnz	r0, 667e <switch_configure+0x326>
    6678:	4872      	ldr	r0, [pc, #456]	; (6844 <switch_configure+0x4ec>)
    667a:	4b6b      	ldr	r3, [pc, #428]	; (6828 <switch_configure+0x4d0>)
    667c:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL8, 0x00))	{ xprintf("[SPI_KSZ8794_PORT1CONTROL8] not correct\r\n"); }
    667e:	2100      	movs	r1, #0
    6680:	201a      	movs	r0, #26
    6682:	47a0      	blx	r4
    6684:	b910      	cbnz	r0, 668c <switch_configure+0x334>
    6686:	4870      	ldr	r0, [pc, #448]	; (6848 <switch_configure+0x4f0>)
    6688:	4b67      	ldr	r3, [pc, #412]	; (6828 <switch_configure+0x4d0>)
    668a:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL8, 0x00))	{ xprintf("[SPI_KSZ8794_PORT2CONTROL8] not correct\r\n"); }
    668c:	2100      	movs	r1, #0
    668e:	202a      	movs	r0, #42	; 0x2a
    6690:	47a0      	blx	r4
    6692:	b910      	cbnz	r0, 669a <switch_configure+0x342>
    6694:	486d      	ldr	r0, [pc, #436]	; (684c <switch_configure+0x4f4>)
    6696:	4b64      	ldr	r3, [pc, #400]	; (6828 <switch_configure+0x4d0>)
    6698:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL8, 0x00))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL8] not correct\r\n"); }
    669a:	2100      	movs	r1, #0
    669c:	203a      	movs	r0, #58	; 0x3a
    669e:	47a0      	blx	r4
    66a0:	b910      	cbnz	r0, 66a8 <switch_configure+0x350>
    66a2:	486b      	ldr	r0, [pc, #428]	; (6850 <switch_configure+0x4f8>)
    66a4:	4b60      	ldr	r3, [pc, #384]	; (6828 <switch_configure+0x4d0>)
    66a6:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT1LINKMD, 0x00))	{ xprintf("[SPI_KSZ8794_PORT1LINKMD] not correct\r\n"); }
    66a8:	2100      	movs	r1, #0
    66aa:	201b      	movs	r0, #27
    66ac:	47a0      	blx	r4
    66ae:	b910      	cbnz	r0, 66b6 <switch_configure+0x35e>
    66b0:	4868      	ldr	r0, [pc, #416]	; (6854 <switch_configure+0x4fc>)
    66b2:	4b5d      	ldr	r3, [pc, #372]	; (6828 <switch_configure+0x4d0>)
    66b4:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT2LINKMD, 0x00))	{ xprintf("[SPI_KSZ8794_PORT2LINKMD] not correct\r\n"); }
    66b6:	2100      	movs	r1, #0
    66b8:	202b      	movs	r0, #43	; 0x2b
    66ba:	47a0      	blx	r4
    66bc:	b910      	cbnz	r0, 66c4 <switch_configure+0x36c>
    66be:	4866      	ldr	r0, [pc, #408]	; (6858 <switch_configure+0x500>)
    66c0:	4b59      	ldr	r3, [pc, #356]	; (6828 <switch_configure+0x4d0>)
    66c2:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT3LINKMD, 0x00))	{ xprintf("[SPI_KSZ8794_PORT3LINKMD] not correct\r\n"); }
    66c4:	2100      	movs	r1, #0
    66c6:	203b      	movs	r0, #59	; 0x3b
    66c8:	47a0      	blx	r4
    66ca:	b910      	cbnz	r0, 66d2 <switch_configure+0x37a>
    66cc:	4863      	ldr	r0, [pc, #396]	; (685c <switch_configure+0x504>)
    66ce:	4b56      	ldr	r3, [pc, #344]	; (6828 <switch_configure+0x4d0>)
    66d0:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL9, 0x5F))	{ xprintf("[SPI_KSZ8794_PORT1CONTROL9] not correct\r\n"); }
    66d2:	215f      	movs	r1, #95	; 0x5f
    66d4:	201c      	movs	r0, #28
    66d6:	47a0      	blx	r4
    66d8:	b910      	cbnz	r0, 66e0 <switch_configure+0x388>
    66da:	4861      	ldr	r0, [pc, #388]	; (6860 <switch_configure+0x508>)
    66dc:	4b52      	ldr	r3, [pc, #328]	; (6828 <switch_configure+0x4d0>)
    66de:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL9, 0x5F))	{ xprintf("[SPI_KSZ8794_PORT2CONTROL9] not correct\r\n"); }
    66e0:	215f      	movs	r1, #95	; 0x5f
    66e2:	202c      	movs	r0, #44	; 0x2c
    66e4:	47a0      	blx	r4
    66e6:	b910      	cbnz	r0, 66ee <switch_configure+0x396>
    66e8:	485e      	ldr	r0, [pc, #376]	; (6864 <switch_configure+0x50c>)
    66ea:	4b4f      	ldr	r3, [pc, #316]	; (6828 <switch_configure+0x4d0>)
    66ec:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL9, 0x5F))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL9] not correct\r\n"); }
    66ee:	215f      	movs	r1, #95	; 0x5f
    66f0:	203c      	movs	r0, #60	; 0x3c
    66f2:	47a0      	blx	r4
    66f4:	b910      	cbnz	r0, 66fc <switch_configure+0x3a4>
    66f6:	485c      	ldr	r0, [pc, #368]	; (6868 <switch_configure+0x510>)
    66f8:	4b4b      	ldr	r3, [pc, #300]	; (6828 <switch_configure+0x4d0>)
    66fa:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL10, 0x00)) { xprintf("[SPI_KSZ8794_PORT1CONTROL10] not correct\r\n"); }
    66fc:	2100      	movs	r1, #0
    66fe:	201d      	movs	r0, #29
    6700:	47a0      	blx	r4
    6702:	b910      	cbnz	r0, 670a <switch_configure+0x3b2>
    6704:	4859      	ldr	r0, [pc, #356]	; (686c <switch_configure+0x514>)
    6706:	4b48      	ldr	r3, [pc, #288]	; (6828 <switch_configure+0x4d0>)
    6708:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL10, 0x00)) { xprintf("[SPI_KSZ8794_PORT2CONTROL10] not correct\r\n"); }
    670a:	2100      	movs	r1, #0
    670c:	202d      	movs	r0, #45	; 0x2d
    670e:	47a0      	blx	r4
    6710:	b910      	cbnz	r0, 6718 <switch_configure+0x3c0>
    6712:	4857      	ldr	r0, [pc, #348]	; (6870 <switch_configure+0x518>)
    6714:	4b44      	ldr	r3, [pc, #272]	; (6828 <switch_configure+0x4d0>)
    6716:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL10, 0x00)) { xprintf("[SPI_KSZ8794_PORT3CONTROL10] not correct\r\n"); }
    6718:	2100      	movs	r1, #0
    671a:	203d      	movs	r0, #61	; 0x3d
    671c:	47a0      	blx	r4
    671e:	b910      	cbnz	r0, 6726 <switch_configure+0x3ce>
    6720:	4854      	ldr	r0, [pc, #336]	; (6874 <switch_configure+0x51c>)
    6722:	4b41      	ldr	r3, [pc, #260]	; (6828 <switch_configure+0x4d0>)
    6724:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL20, 0x62)) { xprintf("[SPI_KSZ8794_PORT2CONTROL20] not correct\r\n"); }
    6726:	2162      	movs	r1, #98	; 0x62
    6728:	20a3      	movs	r0, #163	; 0xa3
    672a:	47a0      	blx	r4
    672c:	b910      	cbnz	r0, 6734 <switch_configure+0x3dc>
    672e:	4852      	ldr	r0, [pc, #328]	; (6878 <switch_configure+0x520>)
    6730:	4b3d      	ldr	r3, [pc, #244]	; (6828 <switch_configure+0x4d0>)
    6732:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL12, 0x80)) { xprintf("[SPI_KSZ8794_PORT1CONTROL12] not correct\r\n"); }
    6734:	2180      	movs	r1, #128	; 0x80
    6736:	20b0      	movs	r0, #176	; 0xb0
    6738:	47a0      	blx	r4
    673a:	b910      	cbnz	r0, 6742 <switch_configure+0x3ea>
    673c:	484f      	ldr	r0, [pc, #316]	; (687c <switch_configure+0x524>)
    673e:	4b3a      	ldr	r3, [pc, #232]	; (6828 <switch_configure+0x4d0>)
    6740:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL12, 0x80)) { xprintf("[SPI_KSZ8794_PORT2CONTROL12] not correct\r\n"); }
    6742:	2180      	movs	r1, #128	; 0x80
    6744:	20c0      	movs	r0, #192	; 0xc0
    6746:	47a0      	blx	r4
    6748:	b910      	cbnz	r0, 6750 <switch_configure+0x3f8>
    674a:	484d      	ldr	r0, [pc, #308]	; (6880 <switch_configure+0x528>)
    674c:	4b36      	ldr	r3, [pc, #216]	; (6828 <switch_configure+0x4d0>)
    674e:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL12, 0x80)) { xprintf("[SPI_KSZ8794_PORT3CONTROL12] not correct\r\n"); }
    6750:	2180      	movs	r1, #128	; 0x80
    6752:	20d0      	movs	r0, #208	; 0xd0
    6754:	47a0      	blx	r4
    6756:	b910      	cbnz	r0, 675e <switch_configure+0x406>
    6758:	484a      	ldr	r0, [pc, #296]	; (6884 <switch_configure+0x52c>)
    675a:	4b33      	ldr	r3, [pc, #204]	; (6828 <switch_configure+0x4d0>)
    675c:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL12, 0x80)) { xprintf("[SPI_KSZ8794_PORT4CONTROL12] not correct\r\n"); }
    675e:	2180      	movs	r1, #128	; 0x80
    6760:	20f0      	movs	r0, #240	; 0xf0
    6762:	47a0      	blx	r4
    6764:	b910      	cbnz	r0, 676c <switch_configure+0x414>
    6766:	4848      	ldr	r0, [pc, #288]	; (6888 <switch_configure+0x530>)
    6768:	4b2f      	ldr	r3, [pc, #188]	; (6828 <switch_configure+0x4d0>)
    676a:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL13, 0x00)) { xprintf("[SPI_KSZ8794_PORT1CONTROL13] not correct\r\n"); }
    676c:	2100      	movs	r1, #0
    676e:	20b1      	movs	r0, #177	; 0xb1
    6770:	47a0      	blx	r4
    6772:	b910      	cbnz	r0, 677a <switch_configure+0x422>
    6774:	4845      	ldr	r0, [pc, #276]	; (688c <switch_configure+0x534>)
    6776:	4b2c      	ldr	r3, [pc, #176]	; (6828 <switch_configure+0x4d0>)
    6778:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL13, 0x00)) { xprintf("[SPI_KSZ8794_PORT2CONTROL13] not correct\r\n"); }
    677a:	2100      	movs	r1, #0
    677c:	20c1      	movs	r0, #193	; 0xc1
    677e:	47a0      	blx	r4
    6780:	b910      	cbnz	r0, 6788 <switch_configure+0x430>
    6782:	4843      	ldr	r0, [pc, #268]	; (6890 <switch_configure+0x538>)
    6784:	4b28      	ldr	r3, [pc, #160]	; (6828 <switch_configure+0x4d0>)
    6786:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL13, 0x00)) { xprintf("[SPI_KSZ8794_PORT3CONTROL13] not correct\r\n"); }
    6788:	2100      	movs	r1, #0
    678a:	20d1      	movs	r0, #209	; 0xd1
    678c:	47a0      	blx	r4
    678e:	b910      	cbnz	r0, 6796 <switch_configure+0x43e>
    6790:	4840      	ldr	r0, [pc, #256]	; (6894 <switch_configure+0x53c>)
    6792:	4b25      	ldr	r3, [pc, #148]	; (6828 <switch_configure+0x4d0>)
    6794:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL13, 0x00)) { xprintf("[SPI_KSZ8794_PORT4CONTROL13] not correct\r\n"); }
    6796:	2100      	movs	r1, #0
    6798:	20f1      	movs	r0, #241	; 0xf1
    679a:	47a0      	blx	r4
    679c:	b910      	cbnz	r0, 67a4 <switch_configure+0x44c>
    679e:	483e      	ldr	r0, [pc, #248]	; (6898 <switch_configure+0x540>)
    67a0:	4b21      	ldr	r3, [pc, #132]	; (6828 <switch_configure+0x4d0>)
    67a2:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL14, 0x88)) { xprintf("[SPI_KSZ8794_PORT1CONTROL14] not correct\r\n"); }
    67a4:	2188      	movs	r1, #136	; 0x88
    67a6:	20b2      	movs	r0, #178	; 0xb2
    67a8:	4c3c      	ldr	r4, [pc, #240]	; (689c <switch_configure+0x544>)
    67aa:	47a0      	blx	r4
    67ac:	b910      	cbnz	r0, 67b4 <switch_configure+0x45c>
    67ae:	483c      	ldr	r0, [pc, #240]	; (68a0 <switch_configure+0x548>)
    67b0:	4b1d      	ldr	r3, [pc, #116]	; (6828 <switch_configure+0x4d0>)
    67b2:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL14, 0x88)) { xprintf("[SPI_KSZ8794_PORT2CONTROL14] not correct\r\n"); }
    67b4:	2188      	movs	r1, #136	; 0x88
    67b6:	20c2      	movs	r0, #194	; 0xc2
    67b8:	47a0      	blx	r4
    67ba:	b910      	cbnz	r0, 67c2 <switch_configure+0x46a>
    67bc:	4839      	ldr	r0, [pc, #228]	; (68a4 <switch_configure+0x54c>)
    67be:	4b1a      	ldr	r3, [pc, #104]	; (6828 <switch_configure+0x4d0>)
    67c0:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL14, 0x88)) { xprintf("[SPI_KSZ8794_PORT3CONTROL14] not correct\r\n"); }
    67c2:	2188      	movs	r1, #136	; 0x88
    67c4:	20d2      	movs	r0, #210	; 0xd2
    67c6:	47a0      	blx	r4
    67c8:	b910      	cbnz	r0, 67d0 <switch_configure+0x478>
    67ca:	4837      	ldr	r0, [pc, #220]	; (68a8 <switch_configure+0x550>)
    67cc:	4b16      	ldr	r3, [pc, #88]	; (6828 <switch_configure+0x4d0>)
    67ce:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL14, 0x88)) { xprintf("[SPI_KSZ8794_PORT4CONTROL14] not correct\r\n"); }
    67d0:	2188      	movs	r1, #136	; 0x88
    67d2:	20f2      	movs	r0, #242	; 0xf2
    67d4:	47a0      	blx	r4
    67d6:	b910      	cbnz	r0, 67de <switch_configure+0x486>
    67d8:	4834      	ldr	r0, [pc, #208]	; (68ac <switch_configure+0x554>)
    67da:	4b13      	ldr	r3, [pc, #76]	; (6828 <switch_configure+0x4d0>)
    67dc:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL15, 0x84)) { xprintf("[SPI_KSZ8794_PORT1CONTROL15] not correct\r\n"); }
    67de:	2184      	movs	r1, #132	; 0x84
    67e0:	20b3      	movs	r0, #179	; 0xb3
    67e2:	47a0      	blx	r4
    67e4:	b910      	cbnz	r0, 67ec <switch_configure+0x494>
    67e6:	4832      	ldr	r0, [pc, #200]	; (68b0 <switch_configure+0x558>)
    67e8:	4b0f      	ldr	r3, [pc, #60]	; (6828 <switch_configure+0x4d0>)
    67ea:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL15, 0x84)) { xprintf("[SPI_KSZ8794_PORT2CONTROL15] not correct\r\n"); }
    67ec:	2184      	movs	r1, #132	; 0x84
    67ee:	20c3      	movs	r0, #195	; 0xc3
    67f0:	47a0      	blx	r4
    67f2:	b910      	cbnz	r0, 67fa <switch_configure+0x4a2>
    67f4:	482f      	ldr	r0, [pc, #188]	; (68b4 <switch_configure+0x55c>)
    67f6:	4b0c      	ldr	r3, [pc, #48]	; (6828 <switch_configure+0x4d0>)
    67f8:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL15, 0x84)) { xprintf("[SPI_KSZ8794_PORT3CONTROL15] not correct\r\n"); }
    67fa:	2184      	movs	r1, #132	; 0x84
    67fc:	20d3      	movs	r0, #211	; 0xd3
    67fe:	47a0      	blx	r4
    6800:	b910      	cbnz	r0, 6808 <switch_configure+0x4b0>
    6802:	482d      	ldr	r0, [pc, #180]	; (68b8 <switch_configure+0x560>)
    6804:	4b08      	ldr	r3, [pc, #32]	; (6828 <switch_configure+0x4d0>)
    6806:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL15, 0x84)) { xprintf("[SPI_KSZ8794_PORT4CONTROL15] not correct\r\n"); }
    6808:	2184      	movs	r1, #132	; 0x84
    680a:	20f3      	movs	r0, #243	; 0xf3
    680c:	47a0      	blx	r4
    680e:	b910      	cbnz	r0, 6816 <switch_configure+0x4be>
    6810:	482a      	ldr	r0, [pc, #168]	; (68bc <switch_configure+0x564>)
    6812:	4b05      	ldr	r3, [pc, #20]	; (6828 <switch_configure+0x4d0>)
    6814:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL16, 0x82)) { xprintf("[SPI_KSZ8794_PORT1CONTROL16] not correct\r\n"); }
    6816:	2182      	movs	r1, #130	; 0x82
    6818:	20b4      	movs	r0, #180	; 0xb4
    681a:	47a0      	blx	r4
    681c:	2800      	cmp	r0, #0
    681e:	d153      	bne.n	68c8 <switch_configure+0x570>
    6820:	4827      	ldr	r0, [pc, #156]	; (68c0 <switch_configure+0x568>)
    6822:	e04f      	b.n	68c4 <switch_configure+0x56c>
    6824:	0000ce4b 	.word	0x0000ce4b
    6828:	00000395 	.word	0x00000395
    682c:	0000ce75 	.word	0x0000ce75
    6830:	0000b259 	.word	0x0000b259
    6834:	0000122d 	.word	0x0000122d
    6838:	0000ce9f 	.word	0x0000ce9f
    683c:	0000cec9 	.word	0x0000cec9
    6840:	0000cef3 	.word	0x0000cef3
    6844:	0000cf1d 	.word	0x0000cf1d
    6848:	0000cf47 	.word	0x0000cf47
    684c:	0000cf71 	.word	0x0000cf71
    6850:	0000cf9b 	.word	0x0000cf9b
    6854:	0000cfc5 	.word	0x0000cfc5
    6858:	0000cfed 	.word	0x0000cfed
    685c:	0000d015 	.word	0x0000d015
    6860:	0000d03d 	.word	0x0000d03d
    6864:	0000d067 	.word	0x0000d067
    6868:	0000d091 	.word	0x0000d091
    686c:	0000d0bb 	.word	0x0000d0bb
    6870:	0000d0e6 	.word	0x0000d0e6
    6874:	0000d111 	.word	0x0000d111
    6878:	0000d13c 	.word	0x0000d13c
    687c:	0000d167 	.word	0x0000d167
    6880:	0000d192 	.word	0x0000d192
    6884:	0000d1bd 	.word	0x0000d1bd
    6888:	0000d1e8 	.word	0x0000d1e8
    688c:	0000d213 	.word	0x0000d213
    6890:	0000d23e 	.word	0x0000d23e
    6894:	0000d269 	.word	0x0000d269
    6898:	0000d294 	.word	0x0000d294
    689c:	0000b1e9 	.word	0x0000b1e9
    68a0:	0000d2bf 	.word	0x0000d2bf
    68a4:	0000d2ea 	.word	0x0000d2ea
    68a8:	0000d315 	.word	0x0000d315
    68ac:	0000d340 	.word	0x0000d340
    68b0:	0000d36b 	.word	0x0000d36b
    68b4:	0000d396 	.word	0x0000d396
    68b8:	0000d3c1 	.word	0x0000d3c1
    68bc:	0000d3ec 	.word	0x0000d3ec
    68c0:	0000d417 	.word	0x0000d417
    68c4:	4b24      	ldr	r3, [pc, #144]	; (6958 <switch_configure+0x600>)
    68c6:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL16, 0x82)) { xprintf("[SPI_KSZ8794_PORT2CONTROL16] not correct\r\n"); }
    68c8:	2182      	movs	r1, #130	; 0x82
    68ca:	20c4      	movs	r0, #196	; 0xc4
    68cc:	47a0      	blx	r4
    68ce:	b910      	cbnz	r0, 68d6 <switch_configure+0x57e>
    68d0:	4822      	ldr	r0, [pc, #136]	; (695c <switch_configure+0x604>)
    68d2:	4b21      	ldr	r3, [pc, #132]	; (6958 <switch_configure+0x600>)
    68d4:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL16, 0x82)) { xprintf("[SPI_KSZ8794_PORT3CONTROL16] not correct\r\n"); }
    68d6:	2182      	movs	r1, #130	; 0x82
    68d8:	20d4      	movs	r0, #212	; 0xd4
    68da:	47a0      	blx	r4
    68dc:	b910      	cbnz	r0, 68e4 <switch_configure+0x58c>
    68de:	4820      	ldr	r0, [pc, #128]	; (6960 <switch_configure+0x608>)
    68e0:	4b1d      	ldr	r3, [pc, #116]	; (6958 <switch_configure+0x600>)
    68e2:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL16, 0x82)) { xprintf("[SPI_KSZ8794_PORT4CONTROL16] not correct\r\n"); }
    68e4:	2182      	movs	r1, #130	; 0x82
    68e6:	20f4      	movs	r0, #244	; 0xf4
    68e8:	47a0      	blx	r4
    68ea:	b910      	cbnz	r0, 68f2 <switch_configure+0x59a>
    68ec:	481d      	ldr	r0, [pc, #116]	; (6964 <switch_configure+0x60c>)
    68ee:	4b1a      	ldr	r3, [pc, #104]	; (6958 <switch_configure+0x600>)
    68f0:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL17, 0x81)) { xprintf("[SPI_KSZ8794_PORT1CONTROL17] not correct\r\n"); }
    68f2:	2181      	movs	r1, #129	; 0x81
    68f4:	20b5      	movs	r0, #181	; 0xb5
    68f6:	47a0      	blx	r4
    68f8:	b910      	cbnz	r0, 6900 <switch_configure+0x5a8>
    68fa:	481b      	ldr	r0, [pc, #108]	; (6968 <switch_configure+0x610>)
    68fc:	4b16      	ldr	r3, [pc, #88]	; (6958 <switch_configure+0x600>)
    68fe:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL17, 0x81)) { xprintf("[SPI_KSZ8794_PORT2CONTROL17] not correct\r\n"); }
    6900:	2181      	movs	r1, #129	; 0x81
    6902:	20c5      	movs	r0, #197	; 0xc5
    6904:	47a0      	blx	r4
    6906:	b910      	cbnz	r0, 690e <switch_configure+0x5b6>
    6908:	4818      	ldr	r0, [pc, #96]	; (696c <switch_configure+0x614>)
    690a:	4b13      	ldr	r3, [pc, #76]	; (6958 <switch_configure+0x600>)
    690c:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL17, 0x81)) { xprintf("[SPI_KSZ8794_PORT3CONTROL17] not correct\r\n"); }
    690e:	2181      	movs	r1, #129	; 0x81
    6910:	20d5      	movs	r0, #213	; 0xd5
    6912:	47a0      	blx	r4
    6914:	b910      	cbnz	r0, 691c <switch_configure+0x5c4>
    6916:	4816      	ldr	r0, [pc, #88]	; (6970 <switch_configure+0x618>)
    6918:	4b0f      	ldr	r3, [pc, #60]	; (6958 <switch_configure+0x600>)
    691a:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL17, 0x81)) { xprintf("[SPI_KSZ8794_PORT4CONTROL17] not correct\r\n"); }
    691c:	2181      	movs	r1, #129	; 0x81
    691e:	20f5      	movs	r0, #245	; 0xf5
    6920:	47a0      	blx	r4
    6922:	b910      	cbnz	r0, 692a <switch_configure+0x5d2>
    6924:	4813      	ldr	r0, [pc, #76]	; (6974 <switch_configure+0x61c>)
    6926:	4b0c      	ldr	r3, [pc, #48]	; (6958 <switch_configure+0x600>)
    6928:	4798      	blx	r3
		
	/* Start the Ethernet SWITCH operation */
	writeKSZreg(SPI_KSZ8794_START, 0x01);
    692a:	2101      	movs	r1, #1
    692c:	4608      	mov	r0, r1
    692e:	4b12      	ldr	r3, [pc, #72]	; (6978 <switch_configure+0x620>)
    6930:	4798      	blx	r3
	delay_us(50);
    6932:	2032      	movs	r0, #50	; 0x32
    6934:	4b11      	ldr	r3, [pc, #68]	; (697c <switch_configure+0x624>)
    6936:	4798      	blx	r3
	
	/* Check it has re-started and running */
	if (!checkKSZreg(SPI_KSZ8794_START, 0x61))			{ xprintf("[SPI_KSZ8794_START final] not correct\r\n"); }
    6938:	2161      	movs	r1, #97	; 0x61
    693a:	2001      	movs	r0, #1
    693c:	47a0      	blx	r4
    693e:	b948      	cbnz	r0, 6954 <switch_configure+0x5fc>
    6940:	480f      	ldr	r0, [pc, #60]	; (6980 <switch_configure+0x628>)
    6942:	4b05      	ldr	r3, [pc, #20]	; (6958 <switch_configure+0x600>)
	/* Completed set-up commands to the KSZ Ethernet SWITCH via SPI bus */
}
    6944:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	if (!checkKSZreg(SPI_KSZ8794_START, 0x61))			{ xprintf("[SPI_KSZ8794_START final] not correct\r\n"); }
    6948:	4718      	bx	r3
		writeKSZreg(SPI_KSZ8794_PORT2CONTROL2, 0x06);	
    694a:	2106      	movs	r1, #6
    694c:	2022      	movs	r0, #34	; 0x22
    694e:	47b0      	blx	r6
		if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL2, 0x06))	{ xprintf("[SPI_KSZ8794_PORT2CONTROL2] not correct\r\n"); }
    6950:	2106      	movs	r1, #6
    6952:	e5b6      	b.n	64c2 <switch_configure+0x16a>
    6954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6958:	00000395 	.word	0x00000395
    695c:	0000d442 	.word	0x0000d442
    6960:	0000d46d 	.word	0x0000d46d
    6964:	0000d498 	.word	0x0000d498
    6968:	0000d4c3 	.word	0x0000d4c3
    696c:	0000d4ee 	.word	0x0000d4ee
    6970:	0000d519 	.word	0x0000d519
    6974:	0000d544 	.word	0x0000d544
    6978:	0000b259 	.word	0x0000b259
    697c:	0000122d 	.word	0x0000122d
    6980:	0000d56f 	.word	0x0000d56f

00006984 <address_configure>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: from the ID value, set the global IP address, IP scheme and MAC address
// Returns:     Nothing
// *****************************************************************************************************************************************************************
void address_configure(void)
{	
    6984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (((CONFIG *)&settings_buffer)->ID == 0x00000000) {
    6988:	4f6f      	ldr	r7, [pc, #444]	; (6b48 <address_configure+0x1c4>)
    698a:	4d70      	ldr	r5, [pc, #448]	; (6b4c <address_configure+0x1c8>)
    698c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
{	
    698e:	b08f      	sub	sp, #60	; 0x3c
	if (((CONFIG *)&settings_buffer)->ID == 0x00000000) {
    6990:	b92b      	cbnz	r3, 699e <address_configure+0x1a>
		xprintf("MAC address and IP scheme not initialized as there is no [ID] set...\r\n");
    6992:	486f      	ldr	r0, [pc, #444]	; (6b50 <address_configure+0x1cc>)
	ring_socket = uip_udp_new(&broadcast, htons(RING_MANAGEMENT_SOCKET));
	if (ring_socket != NULL) {
		uip_udp_bind(ring_socket, htons(RING_MANAGEMENT_SOCKET));
		xprintf("Ring Management UDP socket created...\r\n");
	} else {
		xprintf("Ring Management UDP socket ERROR!!!!!!!\r\n");
    6994:	462b      	mov	r3, r5
	}
}
    6996:	b00f      	add	sp, #60	; 0x3c
    6998:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		xprintf("Ring Management UDP socket ERROR!!!!!!!\r\n");
    699c:	4718      	bx	r3
	mac_raw[0] = macaddress.addr[0] = MAC_ADDR_00;
    699e:	4a6d      	ldr	r2, [pc, #436]	; (6b54 <address_configure+0x1d0>)
    69a0:	4c6d      	ldr	r4, [pc, #436]	; (6b58 <address_configure+0x1d4>)
	mac_raw[4] = macaddress.addr[4] = (uint8_t)(((((CONFIG *)&settings_buffer)->ID) >> 8) & 0x00FF);
    69a2:	f3c3 2107 	ubfx	r1, r3, #8, #8
	mac_raw[0] = macaddress.addr[0] = MAC_ADDR_00;
    69a6:	f04f 0cc2 	mov.w	ip, #194	; 0xc2
	mac_raw[1] = macaddress.addr[1] = MAC_ADDR_01;
    69aa:	f04f 0e50 	mov.w	lr, #80	; 0x50
	mac_raw[2] = macaddress.addr[2] = (uint8_t)(((((CONFIG *)&settings_buffer)->ID) >> 24 & 0x00FF));
    69ae:	0e1e      	lsrs	r6, r3, #24
	mac_raw[3] = macaddress.addr[3] = (uint8_t)(((((CONFIG *)&settings_buffer)->ID) >> 16) & 0x00FF);
    69b0:	f3c3 4007 	ubfx	r0, r3, #16, #8
    mac_raw[5] = macaddress.addr[5] = (uint8_t)((((CONFIG *)&settings_buffer)->ID) & 0x00FF);
    69b4:	b2db      	uxtb	r3, r3
	mac_raw[0] = macaddress.addr[0] = MAC_ADDR_00;
    69b6:	f882 c000 	strb.w	ip, [r2]
	mac_raw[1] = macaddress.addr[1] = MAC_ADDR_01;
    69ba:	f882 e001 	strb.w	lr, [r2, #1]
	mac_raw[2] = macaddress.addr[2] = (uint8_t)(((((CONFIG *)&settings_buffer)->ID) >> 24 & 0x00FF));
    69be:	7096      	strb	r6, [r2, #2]
	mac_raw[3] = macaddress.addr[3] = (uint8_t)(((((CONFIG *)&settings_buffer)->ID) >> 16) & 0x00FF);
    69c0:	70d0      	strb	r0, [r2, #3]
	mac_raw[4] = macaddress.addr[4] = (uint8_t)(((((CONFIG *)&settings_buffer)->ID) >> 8) & 0x00FF);
    69c2:	7111      	strb	r1, [r2, #4]
    mac_raw[5] = macaddress.addr[5] = (uint8_t)((((CONFIG *)&settings_buffer)->ID) & 0x00FF);
    69c4:	7153      	strb	r3, [r2, #5]
	uip_setethaddr(macaddress);
    69c6:	4a65      	ldr	r2, [pc, #404]	; (6b5c <address_configure+0x1d8>)
	mac_raw[2] = macaddress.addr[2] = (uint8_t)(((((CONFIG *)&settings_buffer)->ID) >> 24 & 0x00FF));
    69c8:	70a6      	strb	r6, [r4, #2]
	mac_raw[3] = macaddress.addr[3] = (uint8_t)(((((CONFIG *)&settings_buffer)->ID) >> 16) & 0x00FF);
    69ca:	70e0      	strb	r0, [r4, #3]
    mac_raw[5] = macaddress.addr[5] = (uint8_t)((((CONFIG *)&settings_buffer)->ID) & 0x00FF);
    69cc:	7163      	strb	r3, [r4, #5]
	uip_setethaddr(macaddress);
    69ce:	7096      	strb	r6, [r2, #2]
    69d0:	70d0      	strb	r0, [r2, #3]
	uip_ipaddr(&ipaddr, 192, 168, (uint8_t)((((CONFIG *)&settings_buffer)->ID) / 250), 1 + (uint8_t)((((CONFIG *)&settings_buffer)->ID) % 250));
    69d2:	4e63      	ldr	r6, [pc, #396]	; (6b60 <address_configure+0x1dc>)
	uip_setethaddr(macaddress);
    69d4:	7153      	strb	r3, [r2, #5]
	mac_async_enable(&ETHERNET_MAC_0);
    69d6:	4863      	ldr	r0, [pc, #396]	; (6b64 <address_configure+0x1e0>)
    69d8:	4b63      	ldr	r3, [pc, #396]	; (6b68 <address_configure+0x1e4>)
	mac_raw[0] = macaddress.addr[0] = MAC_ADDR_00;
    69da:	f884 c000 	strb.w	ip, [r4]
	mac_raw[1] = macaddress.addr[1] = MAC_ADDR_01;
    69de:	f884 e001 	strb.w	lr, [r4, #1]
	mac_raw[4] = macaddress.addr[4] = (uint8_t)(((((CONFIG *)&settings_buffer)->ID) >> 8) & 0x00FF);
    69e2:	7121      	strb	r1, [r4, #4]
	uip_setethaddr(macaddress);
    69e4:	f882 c000 	strb.w	ip, [r2]
    69e8:	f882 e001 	strb.w	lr, [r2, #1]
    69ec:	7111      	strb	r1, [r2, #4]
	mac_async_enable(&ETHERNET_MAC_0);
    69ee:	4798      	blx	r3
	uip_ipaddr(&ipaddr, 192, 168, (uint8_t)((((CONFIG *)&settings_buffer)->ID) / 250), 1 + (uint8_t)((((CONFIG *)&settings_buffer)->ID) % 250));
    69f0:	f64a 00c0 	movw	r0, #43200	; 0xa8c0
    69f4:	8030      	strh	r0, [r6, #0]
    69f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	uip_ipaddr(&netmask, 255, 255, 0, 0);
    69f8:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 6bb8 <address_configure+0x234>
	uip_ipaddr(&gwaddr, 192, 168, 0, 1);									// IP address of CPU Server on installation network is always "192.168.0.1". This address can NOT be held by any Multi-Sense node
    69fc:	4f5b      	ldr	r7, [pc, #364]	; (6b6c <address_configure+0x1e8>)
	xprintf("MultiSense [init MAC/IP values] %x:%x:%x:%x:%x:%x %d.%d.%d.%d\r\n", mac_raw[0], mac_raw[1], mac_raw[2], mac_raw[3], mac_raw[4], mac_raw[5], uip_ipaddr1(ipaddr), uip_ipaddr2(ipaddr), uip_ipaddr3(ipaddr), uip_ipaddr4(ipaddr));
    69fe:	f894 b002 	ldrb.w	fp, [r4, #2]
	uip_ipaddr(&gwaddr, 192, 168, 0, 1);									// IP address of CPU Server on installation network is always "192.168.0.1". This address can NOT be held by any Multi-Sense node
    6a02:	8038      	strh	r0, [r7, #0]
	uip_ipaddr(&ipaddr, 192, 168, (uint8_t)((((CONFIG *)&settings_buffer)->ID) / 250), 1 + (uint8_t)((((CONFIG *)&settings_buffer)->ID) % 250));
    6a04:	22fa      	movs	r2, #250	; 0xfa
    6a06:	fbb3 f1f2 	udiv	r1, r3, r2
    6a0a:	fb02 3311 	mls	r3, r2, r1, r3
    6a0e:	3301      	adds	r3, #1
    6a10:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    6a14:	b29b      	uxth	r3, r3
    6a16:	0a1a      	lsrs	r2, r3, #8
	uip_ipaddr(&netmask, 255, 255, 0, 0);
    6a18:	f04f 0e00 	mov.w	lr, #0
	uip_ipaddr(&ipaddr, 192, 168, (uint8_t)((((CONFIG *)&settings_buffer)->ID) / 250), 1 + (uint8_t)((((CONFIG *)&settings_buffer)->ID) % 250));
    6a1c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	uip_ipaddr(&netmask, 255, 255, 0, 0);
    6a20:	f64f 72ff 	movw	r2, #65535	; 0xffff
    6a24:	f8ac e002 	strh.w	lr, [ip, #2]
    6a28:	f8ac 2000 	strh.w	r2, [ip]
	uip_ipaddr(&broadcast, 255, 255, 255, 255);
    6a2c:	f8df c16c 	ldr.w	ip, [pc, #364]	; 6b9c <address_configure+0x218>
    6a30:	f8ac 2000 	strh.w	r2, [ip]
    6a34:	f8ac 2002 	strh.w	r2, [ip, #2]
	uip_sethostaddr(&ipaddr);
    6a38:	f8df c180 	ldr.w	ip, [pc, #384]	; 6bbc <address_configure+0x238>
	uip_ipaddr(&ipaddr, 192, 168, (uint8_t)((((CONFIG *)&settings_buffer)->ID) / 250), 1 + (uint8_t)((((CONFIG *)&settings_buffer)->ID) % 250));
    6a3c:	b29b      	uxth	r3, r3
	uip_sethostaddr(&ipaddr);
    6a3e:	f8ac 3002 	strh.w	r3, [ip, #2]
	uip_ipaddr(&ipaddr, 192, 168, (uint8_t)((((CONFIG *)&settings_buffer)->ID) / 250), 1 + (uint8_t)((((CONFIG *)&settings_buffer)->ID) % 250));
    6a42:	8073      	strh	r3, [r6, #2]
	uip_setnetmask(&netmask);
    6a44:	4b4a      	ldr	r3, [pc, #296]	; (6b70 <address_configure+0x1ec>)
	uip_sethostaddr(&ipaddr);
    6a46:	f8ac 0000 	strh.w	r0, [ip]
	uip_setnetmask(&netmask);
    6a4a:	f8a3 e002 	strh.w	lr, [r3, #2]
    6a4e:	801a      	strh	r2, [r3, #0]
	uip_setdraddr(&gwaddr);
    6a50:	4b48      	ldr	r3, [pc, #288]	; (6b74 <address_configure+0x1f0>)
	xprintf("MultiSense [init MAC/IP values] %x:%x:%x:%x:%x:%x %d.%d.%d.%d\r\n", mac_raw[0], mac_raw[1], mac_raw[2], mac_raw[3], mac_raw[4], mac_raw[5], uip_ipaddr1(ipaddr), uip_ipaddr2(ipaddr), uip_ipaddr3(ipaddr), uip_ipaddr4(ipaddr));
    6a52:	7862      	ldrb	r2, [r4, #1]
	uip_setdraddr(&gwaddr);
    6a54:	8018      	strh	r0, [r3, #0]
	uip_ipaddr(&gwaddr, 192, 168, 0, 1);									// IP address of CPU Server on installation network is always "192.168.0.1". This address can NOT be held by any Multi-Sense node
    6a56:	f44f 7180 	mov.w	r1, #256	; 0x100
	uip_setdraddr(&gwaddr);
    6a5a:	8059      	strh	r1, [r3, #2]
	xprintf("MultiSense [init MAC/IP values] %x:%x:%x:%x:%x:%x %d.%d.%d.%d\r\n", mac_raw[0], mac_raw[1], mac_raw[2], mac_raw[3], mac_raw[4], mac_raw[5], uip_ipaddr1(ipaddr), uip_ipaddr2(ipaddr), uip_ipaddr3(ipaddr), uip_ipaddr4(ipaddr));
    6a5c:	78e3      	ldrb	r3, [r4, #3]
    6a5e:	930b      	str	r3, [sp, #44]	; 0x2c
    6a60:	7923      	ldrb	r3, [r4, #4]
	uip_ipaddr(&gwaddr, 192, 168, 0, 1);									// IP address of CPU Server on installation network is always "192.168.0.1". This address can NOT be held by any Multi-Sense node
    6a62:	8079      	strh	r1, [r7, #2]
	xprintf("MultiSense [init MAC/IP values] %x:%x:%x:%x:%x:%x %d.%d.%d.%d\r\n", mac_raw[0], mac_raw[1], mac_raw[2], mac_raw[3], mac_raw[4], mac_raw[5], uip_ipaddr1(ipaddr), uip_ipaddr2(ipaddr), uip_ipaddr3(ipaddr), uip_ipaddr4(ipaddr));
    6a64:	9309      	str	r3, [sp, #36]	; 0x24
    6a66:	7821      	ldrb	r1, [r4, #0]
    6a68:	7963      	ldrb	r3, [r4, #5]
    6a6a:	4c43      	ldr	r4, [pc, #268]	; (6b78 <address_configure+0x1f4>)
    6a6c:	910d      	str	r1, [sp, #52]	; 0x34
    6a6e:	920c      	str	r2, [sp, #48]	; 0x30
    6a70:	930a      	str	r3, [sp, #40]	; 0x28
    6a72:	47a0      	blx	r4
    6a74:	4680      	mov	r8, r0
    6a76:	8830      	ldrh	r0, [r6, #0]
    6a78:	47a0      	blx	r4
    6a7a:	4681      	mov	r9, r0
    6a7c:	8870      	ldrh	r0, [r6, #2]
    6a7e:	47a0      	blx	r4
    6a80:	4682      	mov	sl, r0
    6a82:	8870      	ldrh	r0, [r6, #2]
	main_socket = uip_udp_new(&gwaddr, htons(MAIN_UDPSOCKET));
    6a84:	4e3d      	ldr	r6, [pc, #244]	; (6b7c <address_configure+0x1f8>)
	xprintf("MultiSense [init MAC/IP values] %x:%x:%x:%x:%x:%x %d.%d.%d.%d\r\n", mac_raw[0], mac_raw[1], mac_raw[2], mac_raw[3], mac_raw[4], mac_raw[5], uip_ipaddr1(ipaddr), uip_ipaddr2(ipaddr), uip_ipaddr3(ipaddr), uip_ipaddr4(ipaddr));
    6a86:	47a0      	blx	r4
    6a88:	b2c0      	uxtb	r0, r0
    6a8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6a8c:	9006      	str	r0, [sp, #24]
    6a8e:	f3ca 200f 	ubfx	r0, sl, #8, #16
    6a92:	9005      	str	r0, [sp, #20]
    6a94:	9302      	str	r3, [sp, #8]
    6a96:	fa5f f089 	uxtb.w	r0, r9
    6a9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6a9c:	9004      	str	r0, [sp, #16]
    6a9e:	9301      	str	r3, [sp, #4]
    6aa0:	f3c8 200f 	ubfx	r0, r8, #8, #16
    6aa4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6aa6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    6aa8:	990d      	ldr	r1, [sp, #52]	; 0x34
    6aaa:	9003      	str	r0, [sp, #12]
    6aac:	9300      	str	r3, [sp, #0]
    6aae:	4834      	ldr	r0, [pc, #208]	; (6b80 <address_configure+0x1fc>)
    6ab0:	465b      	mov	r3, fp
    6ab2:	47a8      	blx	r5
	main_socket = uip_udp_new(&gwaddr, htons(MAIN_UDPSOCKET));
    6ab4:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
    6ab8:	47a0      	blx	r4
    6aba:	4601      	mov	r1, r0
    6abc:	4638      	mov	r0, r7
    6abe:	47b0      	blx	r6
    6ac0:	4b30      	ldr	r3, [pc, #192]	; (6b84 <address_configure+0x200>)
    6ac2:	4607      	mov	r7, r0
    6ac4:	6018      	str	r0, [r3, #0]
	if (main_socket != NULL) {
    6ac6:	2800      	cmp	r0, #0
    6ac8:	d035      	beq.n	6b36 <address_configure+0x1b2>
		uip_udp_bind(main_socket, htons(MAIN_UDPSOCKET));
    6aca:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
    6ace:	47a0      	blx	r4
    6ad0:	80b8      	strh	r0, [r7, #4]
		xprintf("Main UDP socket created...\r\n");
    6ad2:	482d      	ldr	r0, [pc, #180]	; (6b88 <address_configure+0x204>)
		xprintf("Main UDP socket ERROR!!!!!!!\r\n");
    6ad4:	47a8      	blx	r5
	cardA_socket = uip_udp_new(&gwaddr, htons(CARDA_UDPSOCKET));
    6ad6:	f640 70a1 	movw	r0, #4001	; 0xfa1
    6ada:	47a0      	blx	r4
    6adc:	4601      	mov	r1, r0
    6ade:	4823      	ldr	r0, [pc, #140]	; (6b6c <address_configure+0x1e8>)
    6ae0:	47b0      	blx	r6
    6ae2:	4b2a      	ldr	r3, [pc, #168]	; (6b8c <address_configure+0x208>)
    6ae4:	4607      	mov	r7, r0
    6ae6:	6018      	str	r0, [r3, #0]
	if (cardA_socket != NULL) {
    6ae8:	b338      	cbz	r0, 6b3a <address_configure+0x1b6>
		uip_udp_bind(cardA_socket, htons(CARDA_UDPSOCKET));
    6aea:	f640 70a1 	movw	r0, #4001	; 0xfa1
    6aee:	47a0      	blx	r4
    6af0:	80b8      	strh	r0, [r7, #4]
		xprintf("Card [A] UDP socket created...\r\n");
    6af2:	4827      	ldr	r0, [pc, #156]	; (6b90 <address_configure+0x20c>)
		xprintf("Card [A] UDP socket ERROR!!!!!!!\r\n");
    6af4:	47a8      	blx	r5
	cardB_socket = uip_udp_new(&gwaddr, htons(CARDB_UDPSOCKET));
    6af6:	f640 70a2 	movw	r0, #4002	; 0xfa2
    6afa:	47a0      	blx	r4
    6afc:	4601      	mov	r1, r0
    6afe:	481b      	ldr	r0, [pc, #108]	; (6b6c <address_configure+0x1e8>)
    6b00:	47b0      	blx	r6
    6b02:	4b24      	ldr	r3, [pc, #144]	; (6b94 <address_configure+0x210>)
    6b04:	4607      	mov	r7, r0
    6b06:	6018      	str	r0, [r3, #0]
	if (cardB_socket != NULL) {
    6b08:	b1c8      	cbz	r0, 6b3e <address_configure+0x1ba>
		uip_udp_bind(cardB_socket, htons(CARDB_UDPSOCKET));
    6b0a:	f640 70a2 	movw	r0, #4002	; 0xfa2
    6b0e:	47a0      	blx	r4
    6b10:	80b8      	strh	r0, [r7, #4]
		xprintf("Card [B] UDP socket created...\r\n");
    6b12:	4821      	ldr	r0, [pc, #132]	; (6b98 <address_configure+0x214>)
		xprintf("Card [B] UDP socket ERROR!!!!!!!\r\n");
    6b14:	47a8      	blx	r5
	ring_socket = uip_udp_new(&broadcast, htons(RING_MANAGEMENT_SOCKET));
    6b16:	f640 70a3 	movw	r0, #4003	; 0xfa3
    6b1a:	47a0      	blx	r4
    6b1c:	4601      	mov	r1, r0
    6b1e:	481f      	ldr	r0, [pc, #124]	; (6b9c <address_configure+0x218>)
    6b20:	47b0      	blx	r6
    6b22:	4b1f      	ldr	r3, [pc, #124]	; (6ba0 <address_configure+0x21c>)
    6b24:	4606      	mov	r6, r0
    6b26:	6018      	str	r0, [r3, #0]
	if (ring_socket != NULL) {
    6b28:	b158      	cbz	r0, 6b42 <address_configure+0x1be>
		uip_udp_bind(ring_socket, htons(RING_MANAGEMENT_SOCKET));
    6b2a:	f640 70a3 	movw	r0, #4003	; 0xfa3
    6b2e:	47a0      	blx	r4
    6b30:	80b0      	strh	r0, [r6, #4]
		xprintf("Ring Management UDP socket created...\r\n");
    6b32:	481c      	ldr	r0, [pc, #112]	; (6ba4 <address_configure+0x220>)
    6b34:	e72e      	b.n	6994 <address_configure+0x10>
		xprintf("Main UDP socket ERROR!!!!!!!\r\n");
    6b36:	481c      	ldr	r0, [pc, #112]	; (6ba8 <address_configure+0x224>)
    6b38:	e7cc      	b.n	6ad4 <address_configure+0x150>
		xprintf("Card [A] UDP socket ERROR!!!!!!!\r\n");
    6b3a:	481c      	ldr	r0, [pc, #112]	; (6bac <address_configure+0x228>)
    6b3c:	e7da      	b.n	6af4 <address_configure+0x170>
		xprintf("Card [B] UDP socket ERROR!!!!!!!\r\n");
    6b3e:	481c      	ldr	r0, [pc, #112]	; (6bb0 <address_configure+0x22c>)
    6b40:	e7e8      	b.n	6b14 <address_configure+0x190>
		xprintf("Ring Management UDP socket ERROR!!!!!!!\r\n");
    6b42:	481c      	ldr	r0, [pc, #112]	; (6bb4 <address_configure+0x230>)
    6b44:	e726      	b.n	6994 <address_configure+0x10>
    6b46:	bf00      	nop
    6b48:	200081dc 	.word	0x200081dc
    6b4c:	00000395 	.word	0x00000395
    6b50:	0000d597 	.word	0x0000d597
    6b54:	20008aa2 	.word	0x20008aa2
    6b58:	2000825c 	.word	0x2000825c
    6b5c:	200072e2 	.word	0x200072e2
    6b60:	200075b0 	.word	0x200075b0
    6b64:	20007548 	.word	0x20007548
    6b68:	000015a9 	.word	0x000015a9
    6b6c:	20008a96 	.word	0x20008a96
    6b70:	20008b8e 	.word	0x20008b8e
    6b74:	20008b56 	.word	0x20008b56
    6b78:	0000a34d 	.word	0x0000a34d
    6b7c:	000096c1 	.word	0x000096c1
    6b80:	0000d5de 	.word	0x0000d5de
    6b84:	200079b4 	.word	0x200079b4
    6b88:	0000d61e 	.word	0x0000d61e
    6b8c:	200075ac 	.word	0x200075ac
    6b90:	0000d65a 	.word	0x0000d65a
    6b94:	200081d4 	.word	0x200081d4
    6b98:	0000d69e 	.word	0x0000d69e
    6b9c:	20008ab6 	.word	0x20008ab6
    6ba0:	20008670 	.word	0x20008670
    6ba4:	0000d6e2 	.word	0x0000d6e2
    6ba8:	0000d63b 	.word	0x0000d63b
    6bac:	0000d67b 	.word	0x0000d67b
    6bb0:	0000d6bf 	.word	0x0000d6bf
    6bb4:	0000d70a 	.word	0x0000d70a
    6bb8:	200081d8 	.word	0x200081d8
    6bbc:	20008b92 	.word	0x20008b92

00006bc0 <gpio_init>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: define, set and configure the [GPIO] characteristics of the SAM CPU IC
// Returns:     Nothing
// *****************************************************************************************************************************************************************
void gpio_init(void)
{
    6bc0:	b538      	push	{r3, r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6bc2:	4c70      	ldr	r4, [pc, #448]	; (6d84 <gpio_init+0x1c4>)
	gpio_set_pin_function(PB12_SPI_MOSI, GPIO_PIN_FUNCTION_OFF);
	gpio_set_pin_function(PB13_SPI_MISO, GPIO_PIN_FUNCTION_OFF);
	gpio_set_pin_function(PB15_SPI_CLK, GPIO_PIN_FUNCTION_OFF);

	/* Set all GPIO MultiSense pins to their respective INPUT or OUTPUT directions */
	gpio_set_pin_direction(PB00_KSZ_RESET, GPIO_DIRECTION_OUT);
    6bc4:	4d70      	ldr	r5, [pc, #448]	; (6d88 <gpio_init+0x1c8>)
    6bc6:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
	tmp &= ~PORT_PINCFG_PMUXEN;
    6bca:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6bce:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6bd2:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
	tmp &= ~PORT_PINCFG_PMUXEN;
    6bd6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6bda:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6bde:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
	tmp &= ~PORT_PINCFG_PMUXEN;
    6be2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6be6:	f884 30c3 	strb.w	r3, [r4, #195]	; 0xc3
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6bea:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
	tmp &= ~PORT_PINCFG_PMUXEN;
    6bee:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6bf2:	f884 30c4 	strb.w	r3, [r4, #196]	; 0xc4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6bf6:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
	tmp &= ~PORT_PINCFG_PMUXEN;
    6bfa:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6bfe:	f884 30c5 	strb.w	r3, [r4, #197]	; 0xc5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6c02:	f894 30c6 	ldrb.w	r3, [r4, #198]	; 0xc6
	tmp &= ~PORT_PINCFG_PMUXEN;
    6c06:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6c0a:	f884 30c6 	strb.w	r3, [r4, #198]	; 0xc6
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6c0e:	f894 30c7 	ldrb.w	r3, [r4, #199]	; 0xc7
	tmp &= ~PORT_PINCFG_PMUXEN;
    6c12:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6c16:	f884 30c7 	strb.w	r3, [r4, #199]	; 0xc7
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6c1a:	f894 3140 	ldrb.w	r3, [r4, #320]	; 0x140
	tmp &= ~PORT_PINCFG_PMUXEN;
    6c1e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6c22:	f884 3140 	strb.w	r3, [r4, #320]	; 0x140
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6c26:	f894 3141 	ldrb.w	r3, [r4, #321]	; 0x141
	tmp &= ~PORT_PINCFG_PMUXEN;
    6c2a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6c2e:	f884 3141 	strb.w	r3, [r4, #321]	; 0x141
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6c32:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
	tmp &= ~PORT_PINCFG_PMUXEN;
    6c36:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6c3a:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6c3e:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
	tmp &= ~PORT_PINCFG_PMUXEN;
    6c42:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6c46:	f884 30d9 	strb.w	r3, [r4, #217]	; 0xd9
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6c4a:	f894 315b 	ldrb.w	r3, [r4, #347]	; 0x15b
	tmp &= ~PORT_PINCFG_PMUXEN;
    6c4e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6c52:	f884 315b 	strb.w	r3, [r4, #347]	; 0x15b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6c56:	f894 315c 	ldrb.w	r3, [r4, #348]	; 0x15c
	tmp &= ~PORT_PINCFG_PMUXEN;
    6c5a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6c5e:	f884 315c 	strb.w	r3, [r4, #348]	; 0x15c
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6c62:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
	tmp &= ~PORT_PINCFG_PMUXEN;
    6c66:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6c6a:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6c6e:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
	tmp &= ~PORT_PINCFG_PMUXEN;
    6c72:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6c76:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6c7a:	f894 30cf 	ldrb.w	r3, [r4, #207]	; 0xcf
    6c7e:	2102      	movs	r1, #2
	tmp &= ~PORT_PINCFG_PMUXEN;
    6c80:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    6c84:	2020      	movs	r0, #32
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6c86:	f884 30cf 	strb.w	r3, [r4, #207]	; 0xcf
    6c8a:	47a8      	blx	r5
	gpio_set_pin_direction(PB02_TAMP_OP, GPIO_DIRECTION_IN);
    6c8c:	2101      	movs	r1, #1
    6c8e:	2022      	movs	r0, #34	; 0x22
    6c90:	47a8      	blx	r5
	gpio_set_pin_direction(PB03_LED_ETH, GPIO_DIRECTION_OUT);
    6c92:	2102      	movs	r1, #2
    6c94:	2023      	movs	r0, #35	; 0x23
    6c96:	47a8      	blx	r5
	gpio_set_pin_direction(PB04_LED_PWR, GPIO_DIRECTION_OUT);
    6c98:	2102      	movs	r1, #2
    6c9a:	2024      	movs	r0, #36	; 0x24
    6c9c:	47a8      	blx	r5
	gpio_set_pin_direction(PB05_SPInCS_CARDA, GPIO_DIRECTION_OUT);
    6c9e:	2102      	movs	r1, #2
    6ca0:	2025      	movs	r0, #37	; 0x25
    6ca2:	47a8      	blx	r5
	gpio_set_pin_direction(PB06_SPInCS_CARDB, GPIO_DIRECTION_OUT);
    6ca4:	2102      	movs	r1, #2
    6ca6:	2026      	movs	r0, #38	; 0x26
    6ca8:	47a8      	blx	r5
	gpio_set_pin_direction(PB07_SPInCS_KSZ8974, GPIO_DIRECTION_OUT);
    6caa:	2102      	movs	r1, #2
    6cac:	2027      	movs	r0, #39	; 0x27
    6cae:	47a8      	blx	r5
	gpio_set_pin_direction(PC00_CARDA_PRESENT, GPIO_DIRECTION_IN);
    6cb0:	2101      	movs	r1, #1
    6cb2:	2040      	movs	r0, #64	; 0x40
    6cb4:	47a8      	blx	r5
	gpio_set_pin_direction(PC01_CARDB_PRESENT, GPIO_DIRECTION_IN);
    6cb6:	2101      	movs	r1, #1
    6cb8:	2041      	movs	r0, #65	; 0x41
    6cba:	47a8      	blx	r5
	gpio_set_pin_direction(PB24_CARDB_I2C_SDA, GPIO_DIRECTION_IN);
    6cbc:	2101      	movs	r1, #1
    6cbe:	2038      	movs	r0, #56	; 0x38
    6cc0:	47a8      	blx	r5
	gpio_set_pin_direction(PB25_CARDB_I2C_CLK, GPIO_DIRECTION_OUT);
    6cc2:	2102      	movs	r1, #2
    6cc4:	2039      	movs	r0, #57	; 0x39
    6cc6:	47a8      	blx	r5
	gpio_set_pin_direction(PC27_CARDA_I2C_SDA, GPIO_DIRECTION_IN);
    6cc8:	2101      	movs	r1, #1
    6cca:	205b      	movs	r0, #91	; 0x5b
    6ccc:	47a8      	blx	r5
	gpio_set_pin_direction(PC28_CARDA_I2C_CLK, GPIO_DIRECTION_OUT);
    6cce:	2102      	movs	r1, #2
    6cd0:	205c      	movs	r0, #92	; 0x5c
    6cd2:	47a8      	blx	r5
	gpio_set_pin_direction(PB12_SPI_MOSI, GPIO_DIRECTION_OUT);
    6cd4:	2102      	movs	r1, #2
    6cd6:	202c      	movs	r0, #44	; 0x2c
    6cd8:	47a8      	blx	r5
	gpio_set_pin_direction(PB13_SPI_MISO, GPIO_DIRECTION_IN);
    6cda:	2101      	movs	r1, #1
    6cdc:	202d      	movs	r0, #45	; 0x2d
    6cde:	47a8      	blx	r5
	gpio_set_pin_direction(PB15_SPI_CLK, GPIO_DIRECTION_OUT);
    6ce0:	2102      	movs	r1, #2
    6ce2:	202f      	movs	r0, #47	; 0x2f
    6ce4:	47a8      	blx	r5

	/* Set all GPIO MultiSense pins to their respective internal pull-up or pull-down configurations. Most of the GPIO has external PCB resistor pull-ups or pull-downs */
	gpio_set_pin_pull_mode(PB00_KSZ_RESET, GPIO_PULL_OFF);
    6ce6:	4d29      	ldr	r5, [pc, #164]	; (6d8c <gpio_init+0x1cc>)
    6ce8:	2100      	movs	r1, #0
    6cea:	2020      	movs	r0, #32
    6cec:	47a8      	blx	r5
	gpio_set_pin_pull_mode(PB02_TAMP_OP, GPIO_PULL_OFF);
    6cee:	2100      	movs	r1, #0
    6cf0:	2022      	movs	r0, #34	; 0x22
    6cf2:	47a8      	blx	r5
	gpio_set_pin_pull_mode(PB03_LED_ETH, GPIO_PULL_OFF);
    6cf4:	2100      	movs	r1, #0
    6cf6:	2023      	movs	r0, #35	; 0x23
    6cf8:	47a8      	blx	r5
	gpio_set_pin_pull_mode(PB04_LED_PWR, GPIO_PULL_OFF);
    6cfa:	2100      	movs	r1, #0
    6cfc:	2024      	movs	r0, #36	; 0x24
    6cfe:	47a8      	blx	r5
	gpio_set_pin_pull_mode(PB05_SPInCS_CARDA, GPIO_PULL_OFF);
    6d00:	2100      	movs	r1, #0
    6d02:	2025      	movs	r0, #37	; 0x25
    6d04:	47a8      	blx	r5
	gpio_set_pin_pull_mode(PB06_SPInCS_CARDB, GPIO_PULL_OFF);
    6d06:	2100      	movs	r1, #0
    6d08:	2026      	movs	r0, #38	; 0x26
    6d0a:	47a8      	blx	r5
	gpio_set_pin_pull_mode(PB07_SPInCS_KSZ8974, GPIO_PULL_OFF);
    6d0c:	2100      	movs	r1, #0
    6d0e:	2027      	movs	r0, #39	; 0x27
    6d10:	47a8      	blx	r5
	gpio_set_pin_pull_mode(PC00_CARDA_PRESENT, GPIO_PULL_UP);
    6d12:	2101      	movs	r1, #1
    6d14:	2040      	movs	r0, #64	; 0x40
    6d16:	47a8      	blx	r5
	gpio_set_pin_pull_mode(PC01_CARDB_PRESENT, GPIO_PULL_UP);
    6d18:	2101      	movs	r1, #1
    6d1a:	2041      	movs	r0, #65	; 0x41
    6d1c:	47a8      	blx	r5
	gpio_set_pin_pull_mode(PB24_CARDB_I2C_SDA, GPIO_PULL_OFF);
    6d1e:	2100      	movs	r1, #0
    6d20:	2038      	movs	r0, #56	; 0x38
    6d22:	47a8      	blx	r5
	gpio_set_pin_pull_mode(PB25_CARDB_I2C_CLK, GPIO_PULL_OFF);
    6d24:	2100      	movs	r1, #0
    6d26:	2039      	movs	r0, #57	; 0x39
    6d28:	47a8      	blx	r5
	gpio_set_pin_pull_mode(PC27_CARDA_I2C_SDA, GPIO_PULL_OFF);
    6d2a:	2100      	movs	r1, #0
    6d2c:	205b      	movs	r0, #91	; 0x5b
    6d2e:	47a8      	blx	r5
	gpio_set_pin_pull_mode(PC28_CARDA_I2C_CLK, GPIO_PULL_OFF);
    6d30:	2100      	movs	r1, #0
    6d32:	205c      	movs	r0, #92	; 0x5c
    6d34:	47a8      	blx	r5
	gpio_set_pin_pull_mode(PB13_SPI_MISO, GPIO_PULL_OFF);
    6d36:	2100      	movs	r1, #0
    6d38:	202d      	movs	r0, #45	; 0x2d
    6d3a:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6d3c:	2308      	movs	r3, #8
    6d3e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    6d42:	2310      	movs	r3, #16
    6d44:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6d48:	2320      	movs	r3, #32
    6d4a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    6d4e:	2340      	movs	r3, #64	; 0x40
    6d50:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    6d54:	2380      	movs	r3, #128	; 0x80
    6d56:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6d5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    6d5e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    6d62:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    6d66:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6d6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    6d6e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    6d72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    6d76:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    6d7a:	2301      	movs	r3, #1
    6d7c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    6d80:	bd38      	pop	{r3, r4, r5, pc}
    6d82:	bf00      	nop
    6d84:	41008000 	.word	0x41008000
    6d88:	0000616d 	.word	0x0000616d
    6d8c:	000061e5 	.word	0x000061e5

00006d90 <watchdog_init>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: setup, initialize and start the watchdog code timer
// Returns:     Nothing
// *****************************************************************************************************************************************************************
void watchdog_init(void)
{
    6d90:	b570      	push	{r4, r5, r6, lr}
	ASSERT(wdt && wdt->dev.hw);
    6d92:	4c0d      	ldr	r4, [pc, #52]	; (6dc8 <watchdog_init+0x38>)
    6d94:	4e0d      	ldr	r6, [pc, #52]	; (6dcc <watchdog_init+0x3c>)
    6d96:	6820      	ldr	r0, [r4, #0]
    6d98:	4d0d      	ldr	r5, [pc, #52]	; (6dd0 <watchdog_init+0x40>)
    6d9a:	3000      	adds	r0, #0
    6d9c:	bf18      	it	ne
    6d9e:	2001      	movne	r0, #1
    6da0:	4631      	mov	r1, r6
    6da2:	226f      	movs	r2, #111	; 0x6f
    6da4:	47a8      	blx	r5
	return _wdt_set_timeout_period(&wdt->dev, clk_rate, timeout_period);
    6da6:	4b0b      	ldr	r3, [pc, #44]	; (6dd4 <watchdog_init+0x44>)
    6da8:	2219      	movs	r2, #25
    6daa:	2164      	movs	r1, #100	; 0x64
    6dac:	4620      	mov	r0, r4
    6dae:	4798      	blx	r3
	ASSERT(wdt && wdt->dev.hw);
    6db0:	6820      	ldr	r0, [r4, #0]
    6db2:	3000      	adds	r0, #0
    6db4:	4631      	mov	r1, r6
    6db6:	bf18      	it	ne
    6db8:	2001      	movne	r0, #1
    6dba:	228c      	movs	r2, #140	; 0x8c
    6dbc:	47a8      	blx	r5
	return _wdt_enable(&wdt->dev);
    6dbe:	4620      	mov	r0, r4
    6dc0:	4b05      	ldr	r3, [pc, #20]	; (6dd8 <watchdog_init+0x48>)
	/* Set the main watchdog to 4 seconds timeout */
	wdt_set_timeout_period(&WDT_0, 100, 25);
	
	/* Turn it on */
	wdt_enable(&WDT_0);
}
    6dc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6dc6:	4718      	bx	r3
    6dc8:	20007490 	.word	0x20007490
    6dcc:	0000c039 	.word	0x0000c039
    6dd0:	00002009 	.word	0x00002009
    6dd4:	00004255 	.word	0x00004255
    6dd8:	0000433d 	.word	0x0000433d

00006ddc <var_init>:
// Returns:     Nothing
// *****************************************************************************************************************************************************************
void var_init(void)
{
	/* Set all the main global variables to zero to initialize the states before nay further code executes that relies on the initialization process at the start */
	tick_counter = 0;
    6ddc:	4b54      	ldr	r3, [pc, #336]	; (6f30 <var_init+0x154>)
	cardA_type = CARD_NOTFITTED;
	cardB_type = CARD_NOTFITTED;
	ring_broken = RING_NOTCONFIGURED;
	
	/* Also, read out the non-volatile EEprom configuration data */
	if (EEprom_settings(settings_buffer, SETTING_STRUCTURE_SIZE, 0) != ERR_NONE) {
    6dde:	4855      	ldr	r0, [pc, #340]	; (6f34 <var_init+0x158>)
	tick_counter = 0;
    6de0:	2200      	movs	r2, #0
{
    6de2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	tick_counter = 0;
    6de6:	601a      	str	r2, [r3, #0]
	readenvironment = 0;
    6de8:	4b53      	ldr	r3, [pc, #332]	; (6f38 <var_init+0x15c>)
	if (EEprom_settings(settings_buffer, SETTING_STRUCTURE_SIZE, 0) != ERR_NONE) {
    6dea:	4f54      	ldr	r7, [pc, #336]	; (6f3c <var_init+0x160>)
	readenvironment = 0;
    6dec:	701a      	strb	r2, [r3, #0]
	arp_check = 0;
    6dee:	4b54      	ldr	r3, [pc, #336]	; (6f40 <var_init+0x164>)
    6df0:	701a      	strb	r2, [r3, #0]
	ring_timer = 0;
    6df2:	4b54      	ldr	r3, [pc, #336]	; (6f44 <var_init+0x168>)
    6df4:	701a      	strb	r2, [r3, #0]
	ring = 0;
    6df6:	4b54      	ldr	r3, [pc, #336]	; (6f48 <var_init+0x16c>)
    6df8:	701a      	strb	r2, [r3, #0]
	sentA = 0;
    6dfa:	4b54      	ldr	r3, [pc, #336]	; (6f4c <var_init+0x170>)
    6dfc:	701a      	strb	r2, [r3, #0]
	sentB = 0;
    6dfe:	4b54      	ldr	r3, [pc, #336]	; (6f50 <var_init+0x174>)
    6e00:	701a      	strb	r2, [r3, #0]
	send_relearn_udp = 0;
    6e02:	4b54      	ldr	r3, [pc, #336]	; (6f54 <var_init+0x178>)
    6e04:	701a      	strb	r2, [r3, #0]
	refresh_gain = 0;
    6e06:	4b54      	ldr	r3, [pc, #336]	; (6f58 <var_init+0x17c>)
    6e08:	701a      	strb	r2, [r3, #0]
	cardA_old = 0;
    6e0a:	4b54      	ldr	r3, [pc, #336]	; (6f5c <var_init+0x180>)
    6e0c:	701a      	strb	r2, [r3, #0]
	cardB_old = 0;
    6e0e:	4b54      	ldr	r3, [pc, #336]	; (6f60 <var_init+0x184>)
    6e10:	701a      	strb	r2, [r3, #0]
	card_sampleindex = 0;
    6e12:	4b54      	ldr	r3, [pc, #336]	; (6f64 <var_init+0x188>)
    6e14:	601a      	str	r2, [r3, #0]
	stormstate = 0;
    6e16:	4b54      	ldr	r3, [pc, #336]	; (6f68 <var_init+0x18c>)
    6e18:	701a      	strb	r2, [r3, #0]
	link_port1 = 0;
    6e1a:	4b54      	ldr	r3, [pc, #336]	; (6f6c <var_init+0x190>)
    6e1c:	701a      	strb	r2, [r3, #0]
	link_port2 = 0;
    6e1e:	4b54      	ldr	r3, [pc, #336]	; (6f70 <var_init+0x194>)
    6e20:	701a      	strb	r2, [r3, #0]
	link_port3 = 0;
    6e22:	4b54      	ldr	r3, [pc, #336]	; (6f74 <var_init+0x198>)
    6e24:	701a      	strb	r2, [r3, #0]
	old_tamper = 0;
    6e26:	4b54      	ldr	r3, [pc, #336]	; (6f78 <var_init+0x19c>)
    6e28:	701a      	strb	r2, [r3, #0]
	old_link_port1 = 0;
    6e2a:	4b54      	ldr	r3, [pc, #336]	; (6f7c <var_init+0x1a0>)
    6e2c:	701a      	strb	r2, [r3, #0]
	old_link_port2 = 0;
    6e2e:	4b54      	ldr	r3, [pc, #336]	; (6f80 <var_init+0x1a4>)
    6e30:	701a      	strb	r2, [r3, #0]
	old_link_port3 = 0;
    6e32:	4b54      	ldr	r3, [pc, #336]	; (6f84 <var_init+0x1a8>)
    6e34:	701a      	strb	r2, [r3, #0]
	readdata_water1 = 0;
    6e36:	4b54      	ldr	r3, [pc, #336]	; (6f88 <var_init+0x1ac>)
    6e38:	701a      	strb	r2, [r3, #0]
	readdata_water2 = 0;
    6e3a:	4b54      	ldr	r3, [pc, #336]	; (6f8c <var_init+0x1b0>)
    6e3c:	701a      	strb	r2, [r3, #0]
	highvoltage = 0;
    6e3e:	4b54      	ldr	r3, [pc, #336]	; (6f90 <var_init+0x1b4>)
    6e40:	701a      	strb	r2, [r3, #0]
	read_hardware_index = 0;
    6e42:	4b54      	ldr	r3, [pc, #336]	; (6f94 <var_init+0x1b8>)
    6e44:	701a      	strb	r2, [r3, #0]
	looprate = 0;
    6e46:	4b54      	ldr	r3, [pc, #336]	; (6f98 <var_init+0x1bc>)
    6e48:	601a      	str	r2, [r3, #0]
	loopcount = 0;
    6e4a:	4b54      	ldr	r3, [pc, #336]	; (6f9c <var_init+0x1c0>)
    6e4c:	601a      	str	r2, [r3, #0]
	miniA_chan = 0;
    6e4e:	4b54      	ldr	r3, [pc, #336]	; (6fa0 <var_init+0x1c4>)
    6e50:	701a      	strb	r2, [r3, #0]
	miniB_chan = 0;
    6e52:	4b54      	ldr	r3, [pc, #336]	; (6fa4 <var_init+0x1c8>)
    6e54:	701a      	strb	r2, [r3, #0]
	miniIO_A1_adcH = 0;
    6e56:	4b54      	ldr	r3, [pc, #336]	; (6fa8 <var_init+0x1cc>)
    6e58:	701a      	strb	r2, [r3, #0]
	miniIO_A1_adcL = 0;
    6e5a:	4b54      	ldr	r3, [pc, #336]	; (6fac <var_init+0x1d0>)
    6e5c:	701a      	strb	r2, [r3, #0]
	miniIO_A0_adcH = 0;
    6e5e:	4b54      	ldr	r3, [pc, #336]	; (6fb0 <var_init+0x1d4>)
    6e60:	701a      	strb	r2, [r3, #0]
	miniIO_A0_adcL = 0;
    6e62:	4b54      	ldr	r3, [pc, #336]	; (6fb4 <var_init+0x1d8>)
    6e64:	701a      	strb	r2, [r3, #0]
	miniIO_A_relay = 0;
    6e66:	4b54      	ldr	r3, [pc, #336]	; (6fb8 <var_init+0x1dc>)
    6e68:	701a      	strb	r2, [r3, #0]
	miniIO_A_inputs = 0;
    6e6a:	4b54      	ldr	r3, [pc, #336]	; (6fbc <var_init+0x1e0>)
    6e6c:	701a      	strb	r2, [r3, #0]
	miniIO_B1_adcH = 0;
    6e6e:	4b54      	ldr	r3, [pc, #336]	; (6fc0 <var_init+0x1e4>)
    6e70:	701a      	strb	r2, [r3, #0]
	miniIO_B1_adcL = 0;
    6e72:	4b54      	ldr	r3, [pc, #336]	; (6fc4 <var_init+0x1e8>)
    6e74:	701a      	strb	r2, [r3, #0]
	miniIO_B0_adcH = 0;
    6e76:	4b54      	ldr	r3, [pc, #336]	; (6fc8 <var_init+0x1ec>)
    6e78:	701a      	strb	r2, [r3, #0]
	miniIO_B0_adcL = 0;
    6e7a:	4b54      	ldr	r3, [pc, #336]	; (6fcc <var_init+0x1f0>)
    6e7c:	701a      	strb	r2, [r3, #0]
	miniIO_B_relay = 0;
    6e7e:	4b54      	ldr	r3, [pc, #336]	; (6fd0 <var_init+0x1f4>)
    6e80:	701a      	strb	r2, [r3, #0]
	miniIO_B_inputs = 0;
    6e82:	4b54      	ldr	r3, [pc, #336]	; (6fd4 <var_init+0x1f8>)
    6e84:	701a      	strb	r2, [r3, #0]
	temp_failure_flag = 0;
    6e86:	4b54      	ldr	r3, [pc, #336]	; (6fd8 <var_init+0x1fc>)
    6e88:	701a      	strb	r2, [r3, #0]
	cardA_type = CARD_NOTFITTED;
    6e8a:	4b54      	ldr	r3, [pc, #336]	; (6fdc <var_init+0x200>)
    6e8c:	701a      	strb	r2, [r3, #0]
	cardB_type = CARD_NOTFITTED;
    6e8e:	4b54      	ldr	r3, [pc, #336]	; (6fe0 <var_init+0x204>)
    6e90:	701a      	strb	r2, [r3, #0]
	ring_broken = RING_NOTCONFIGURED;
    6e92:	4b54      	ldr	r3, [pc, #336]	; (6fe4 <var_init+0x208>)
    6e94:	2102      	movs	r1, #2
    6e96:	7019      	strb	r1, [r3, #0]
	if (EEprom_settings(settings_buffer, SETTING_STRUCTURE_SIZE, 0) != ERR_NONE) {
    6e98:	2180      	movs	r1, #128	; 0x80
    6e9a:	47b8      	blx	r7
    6e9c:	b110      	cbz	r0, 6ea4 <var_init+0xc8>
		xprintf("MultiSense [configuration ERROR READING]\r\n");
    6e9e:	4852      	ldr	r0, [pc, #328]	; (6fe8 <var_init+0x20c>)
    6ea0:	4b52      	ldr	r3, [pc, #328]	; (6fec <var_init+0x210>)
    6ea2:	4798      	blx	r3
	}
	
	/* Check if the configuration data is invalid and needs defaulting */
	if ((((CONFIG *)&settings_buffer)->pattern1 != CONFIG_IDENTIFIER1) || (((CONFIG *)&settings_buffer)->pattern2 != CONFIG_IDENTIFIER2)) {
    6ea4:	4b23      	ldr	r3, [pc, #140]	; (6f34 <var_init+0x158>)
    6ea6:	4a52      	ldr	r2, [pc, #328]	; (6ff0 <var_init+0x214>)
    6ea8:	6819      	ldr	r1, [r3, #0]
    6eaa:	4291      	cmp	r1, r2
    6eac:	461c      	mov	r4, r3
    6eae:	d103      	bne.n	6eb8 <var_init+0xdc>
    6eb0:	685a      	ldr	r2, [r3, #4]
    6eb2:	4b50      	ldr	r3, [pc, #320]	; (6ff4 <var_init+0x218>)
    6eb4:	429a      	cmp	r2, r3
    6eb6:	d039      	beq.n	6f2c <var_init+0x150>
		xprintf("MultiSense [configuration INVALID]\r\n");
    6eb8:	484f      	ldr	r0, [pc, #316]	; (6ff8 <var_init+0x21c>)
    6eba:	4e4c      	ldr	r6, [pc, #304]	; (6fec <var_init+0x210>)
    6ebc:	47b0      	blx	r6
		
		/* Re-write default values ready for write-back */
		((CONFIG *)&settings_buffer)->pattern1 = CONFIG_IDENTIFIER1;
    6ebe:	2376      	movs	r3, #118	; 0x76
    6ec0:	7023      	strb	r3, [r4, #0]
    6ec2:	2336      	movs	r3, #54	; 0x36
    6ec4:	7063      	strb	r3, [r4, #1]
    6ec6:	2345      	movs	r3, #69	; 0x45
    6ec8:	70a3      	strb	r3, [r4, #2]
    6eca:	f06f 0301 	mvn.w	r3, #1
    6ece:	70e3      	strb	r3, [r4, #3]
		((CONFIG *)&settings_buffer)->pattern2 = CONFIG_IDENTIFIER2;
    6ed0:	f06f 0343 	mvn.w	r3, #67	; 0x43
    6ed4:	7123      	strb	r3, [r4, #4]
    6ed6:	f06f 0315 	mvn.w	r3, #21
    6eda:	7163      	strb	r3, [r4, #5]
    6edc:	237d      	movs	r3, #125	; 0x7d
    6ede:	71a3      	strb	r3, [r4, #6]
    6ee0:	f06f 036c 	mvn.w	r3, #108	; 0x6c
		strncpy((char *__restrict)(((CONFIG *)&settings_buffer)->name), "MULTISENSE NEEDS CONFIGURING...", sizeof(((CONFIG *)&settings_buffer)->name));
    6ee4:	2221      	movs	r2, #33	; 0x21
    6ee6:	4945      	ldr	r1, [pc, #276]	; (6ffc <var_init+0x220>)
		((CONFIG *)&settings_buffer)->pattern2 = CONFIG_IDENTIFIER2;
    6ee8:	71e3      	strb	r3, [r4, #7]
		strncpy((char *__restrict)(((CONFIG *)&settings_buffer)->name), "MULTISENSE NEEDS CONFIGURING...", sizeof(((CONFIG *)&settings_buffer)->name));
    6eea:	4845      	ldr	r0, [pc, #276]	; (7000 <var_init+0x224>)
    6eec:	4b45      	ldr	r3, [pc, #276]	; (7004 <var_init+0x228>)
    6eee:	4798      	blx	r3
		((CONFIG *)&settings_buffer)->pattern1 = CONFIG_IDENTIFIER1;
    6ef0:	2500      	movs	r5, #0
		((CONFIG *)&settings_buffer)->ID = 0x00000000;
		((CONFIG *)&settings_buffer)->gain_cardA = 0xFF;
    6ef2:	23ff      	movs	r3, #255	; 0xff
		((CONFIG *)&settings_buffer)->gain_cardB = 0xFF;
		((CONFIG *)&settings_buffer)->loop_basestation = 0;
		
		xprintf("MultiSense [configuration FORMATTED]\r\n");
    6ef4:	4844      	ldr	r0, [pc, #272]	; (7008 <var_init+0x22c>)
		((CONFIG *)&settings_buffer)->ID = 0x00000000;
    6ef6:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
    6efa:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
    6efe:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
    6f02:	f884 502f 	strb.w	r5, [r4, #47]	; 0x2f
		((CONFIG *)&settings_buffer)->gain_cardA = 0xFF;
    6f06:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
		((CONFIG *)&settings_buffer)->gain_cardB = 0xFF;
    6f0a:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
		((CONFIG *)&settings_buffer)->loop_basestation = 0;
    6f0e:	f884 502b 	strb.w	r5, [r4, #43]	; 0x2b
		xprintf("MultiSense [configuration FORMATTED]\r\n");
    6f12:	47b0      	blx	r6

		/* Write these values back to the EEprom storage area */
		if (EEprom_settings(settings_buffer, SETTING_STRUCTURE_SIZE, 1) != ERR_NONE) {
    6f14:	2201      	movs	r2, #1
    6f16:	2180      	movs	r1, #128	; 0x80
    6f18:	4806      	ldr	r0, [pc, #24]	; (6f34 <var_init+0x158>)
    6f1a:	47b8      	blx	r7
    6f1c:	b120      	cbz	r0, 6f28 <var_init+0x14c>
			xprintf("MultiSense [configuration ERROR WRITING]\r\n");
    6f1e:	483b      	ldr	r0, [pc, #236]	; (700c <var_init+0x230>)
		} else {
			xprintf("MultiSense [configuration WRITTEN]\r\n");
    6f20:	4633      	mov	r3, r6
		}
	}
    6f22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			xprintf("MultiSense [configuration WRITTEN]\r\n");
    6f26:	4718      	bx	r3
    6f28:	4839      	ldr	r0, [pc, #228]	; (7010 <var_init+0x234>)
    6f2a:	e7f9      	b.n	6f20 <var_init+0x144>
    6f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6f30:	20008aac 	.word	0x20008aac
    6f34:	200081dc 	.word	0x200081dc
    6f38:	2000866c 	.word	0x2000866c
    6f3c:	0000b1b9 	.word	0x0000b1b9
    6f40:	2000826b 	.word	0x2000826b
    6f44:	2000867d 	.word	0x2000867d
    6f48:	20008aaa 	.word	0x20008aaa
    6f4c:	20008269 	.word	0x20008269
    6f50:	2000759f 	.word	0x2000759f
    6f54:	20008679 	.word	0x20008679
    6f58:	20008ab1 	.word	0x20008ab1
    6f5c:	20007593 	.word	0x20007593
    6f60:	200079b9 	.word	0x200079b9
    6f64:	20008a9c 	.word	0x20008a9c
    6f68:	20008ab0 	.word	0x20008ab0
    6f6c:	20007591 	.word	0x20007591
    6f70:	20008694 	.word	0x20008694
    6f74:	20007596 	.word	0x20007596
    6f78:	20008aa0 	.word	0x20008aa0
    6f7c:	200075a0 	.word	0x200075a0
    6f80:	20007590 	.word	0x20007590
    6f84:	2000867c 	.word	0x2000867c
    6f88:	20008ab2 	.word	0x20008ab2
    6f8c:	20008aa1 	.word	0x20008aa1
    6f90:	20008aa9 	.word	0x20008aa9
    6f94:	2000759a 	.word	0x2000759a
    6f98:	20008abc 	.word	0x20008abc
    6f9c:	200075a4 	.word	0x200075a4
    6fa0:	20007597 	.word	0x20007597
    6fa4:	2000867a 	.word	0x2000867a
    6fa8:	2000867b 	.word	0x2000867b
    6fac:	20008262 	.word	0x20008262
    6fb0:	20007dcc 	.word	0x20007dcc
    6fb4:	20008aa8 	.word	0x20008aa8
    6fb8:	20008264 	.word	0x20008264
    6fbc:	20007594 	.word	0x20007594
    6fc0:	200075a8 	.word	0x200075a8
    6fc4:	20008ab3 	.word	0x20008ab3
    6fc8:	2000826a 	.word	0x2000826a
    6fcc:	20007dcd 	.word	0x20007dcd
    6fd0:	200081cf 	.word	0x200081cf
    6fd4:	20008678 	.word	0x20008678
    6fd8:	20007595 	.word	0x20007595
    6fdc:	20007dce 	.word	0x20007dce
    6fe0:	20008ab4 	.word	0x20008ab4
    6fe4:	2000866d 	.word	0x2000866d
    6fe8:	0000d734 	.word	0x0000d734
    6fec:	00000395 	.word	0x00000395
    6ff0:	fe453676 	.word	0xfe453676
    6ff4:	937deabc 	.word	0x937deabc
    6ff8:	0000d75f 	.word	0x0000d75f
    6ffc:	0000d784 	.word	0x0000d784
    7000:	200081e4 	.word	0x200081e4
    7004:	0000b3fd 	.word	0x0000b3fd
    7008:	0000d7a4 	.word	0x0000d7a4
    700c:	0000d7cb 	.word	0x0000d7cb
    7010:	0000d7f6 	.word	0x0000d7f6

00007014 <rx_callb>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: INTERCEPT HOOK STUB for <UART_1>
// Returns:     Nothing (NULL)
// *****************************************************************************************************************************************************************
void rx_callb(const struct usart_async_descriptor *const descr)
{
    7014:	4770      	bx	lr
	...

00007018 <udp_stack_check>:
{
    7018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		uip_periodic(loop);
    701c:	4f18      	ldr	r7, [pc, #96]	; (7080 <udp_stack_check+0x68>)
    701e:	f8df 9084 	ldr.w	r9, [pc, #132]	; 70a4 <udp_stack_check+0x8c>
{
    7022:	2400      	movs	r4, #0
    7024:	46b8      	mov	r8, r7
		uip_periodic(loop);
    7026:	4b17      	ldr	r3, [pc, #92]	; (7084 <udp_stack_check+0x6c>)
		if (uip_len > 0) {
    7028:	4d17      	ldr	r5, [pc, #92]	; (7088 <udp_stack_check+0x70>)
		uip_periodic(loop);
    702a:	4423      	add	r3, r4
    702c:	2002      	movs	r0, #2
    702e:	f8c9 3000 	str.w	r3, [r9]
    7032:	47b8      	blx	r7
		if (uip_len > 0) {
    7034:	882b      	ldrh	r3, [r5, #0]
    7036:	462e      	mov	r6, r5
    7038:	b133      	cbz	r3, 7048 <udp_stack_check+0x30>
			uip_arp_out();
    703a:	4b14      	ldr	r3, [pc, #80]	; (708c <udp_stack_check+0x74>)
    703c:	4798      	blx	r3
			mac_async_write(&ETHERNET_MAC_0, (uint8_t *)&uip_buf[0], uip_len);	
    703e:	882a      	ldrh	r2, [r5, #0]
    7040:	4913      	ldr	r1, [pc, #76]	; (7090 <udp_stack_check+0x78>)
    7042:	4814      	ldr	r0, [pc, #80]	; (7094 <udp_stack_check+0x7c>)
    7044:	4b14      	ldr	r3, [pc, #80]	; (7098 <udp_stack_check+0x80>)
    7046:	4798      	blx	r3
    7048:	3474      	adds	r4, #116	; 0x74
	for (loop = 0; loop < UIP_UDP_CONNS; loop++) {
    704a:	f5b4 6f91 	cmp.w	r4, #1160	; 0x488
    704e:	d1ea      	bne.n	7026 <udp_stack_check+0xe>
		uip_udp_periodic(loop);
    7050:	4d12      	ldr	r5, [pc, #72]	; (709c <udp_stack_check+0x84>)
    7052:	4f13      	ldr	r7, [pc, #76]	; (70a0 <udp_stack_check+0x88>)
			uip_arp_out();
    7054:	f8df 9034 	ldr.w	r9, [pc, #52]	; 708c <udp_stack_check+0x74>
    7058:	2400      	movs	r4, #0
		uip_udp_periodic(loop);
    705a:	19e3      	adds	r3, r4, r7
    705c:	2005      	movs	r0, #5
    705e:	602b      	str	r3, [r5, #0]
    7060:	47c0      	blx	r8
		if (uip_len > 0) {
    7062:	8833      	ldrh	r3, [r6, #0]
    7064:	b12b      	cbz	r3, 7072 <udp_stack_check+0x5a>
			uip_arp_out();
    7066:	47c8      	blx	r9
	 	    mac_async_write(&ETHERNET_MAC_0, (uint8_t *)&uip_buf[0], uip_len);
    7068:	8832      	ldrh	r2, [r6, #0]
    706a:	4909      	ldr	r1, [pc, #36]	; (7090 <udp_stack_check+0x78>)
    706c:	4809      	ldr	r0, [pc, #36]	; (7094 <udp_stack_check+0x7c>)
    706e:	4b0a      	ldr	r3, [pc, #40]	; (7098 <udp_stack_check+0x80>)
    7070:	4798      	blx	r3
    7072:	3464      	adds	r4, #100	; 0x64
	for (loop = 0; loop < UIP_UDP_CONNS; loop++) {
    7074:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
    7078:	d1ef      	bne.n	705a <udp_stack_check+0x42>
}
    707a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    707e:	bf00      	nop
    7080:	00009761 	.word	0x00009761
    7084:	20008ae0 	.word	0x20008ae0
    7088:	20008ac4 	.word	0x20008ac4
    708c:	0000a611 	.word	0x0000a611
    7090:	20008b96 	.word	0x20008b96
    7094:	20007548 	.word	0x20007548
    7098:	000015d1 	.word	0x000015d1
    709c:	20008ad4 	.word	0x20008ad4
    70a0:	20009240 	.word	0x20009240
    70a4:	20008adc 	.word	0x20008adc

000070a8 <bash_spi_transfer.constprop.0>:
static void inline bash_spi_transfer(unsigned char *tx, unsigned char *rx, int size)
    70a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    70ac:	4e21      	ldr	r6, [pc, #132]	; (7134 <bash_spi_transfer.constprop.0+0x8c>)
			gpio_set_pin_level(PB12_SPI_MOSI, (tx[count] & (1 << (loop - 1))) ? 1 : 0);
    70ae:	f8df 9090 	ldr.w	r9, [pc, #144]	; 7140 <bash_spi_transfer.constprop.0+0x98>
    70b2:	4d21      	ldr	r5, [pc, #132]	; (7138 <bash_spi_transfer.constprop.0+0x90>)
	CRITICAL_SECTION_ENTER();
    70b4:	f8df a08c 	ldr.w	sl, [pc, #140]	; 7144 <bash_spi_transfer.constprop.0+0x9c>
	for (count = 0; count < size; count++) {
    70b8:	f04f 0800 	mov.w	r8, #0
		rx[count] = 0;
    70bc:	2300      	movs	r3, #0
    70be:	7033      	strb	r3, [r6, #0]
		for (loop = 8; loop; loop--) {
    70c0:	2708      	movs	r7, #8
			gpio_set_pin_level(PB12_SPI_MOSI, (tx[count] & (1 << (loop - 1))) ? 1 : 0);
    70c2:	eb08 0b09 	add.w	fp, r8, r9
    70c6:	f89b 3000 	ldrb.w	r3, [fp]
    70ca:	3f01      	subs	r7, #1
    70cc:	413b      	asrs	r3, r7
	if (level) {
    70ce:	f013 0f01 	tst.w	r3, #1
    70d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    70d6:	bf14      	ite	ne
    70d8:	f8c5 3098 	strne.w	r3, [r5, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    70dc:	f8c5 3094 	streq.w	r3, [r5, #148]	; 0x94
    70e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    70e4:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
	CRITICAL_SECTION_ENTER();
    70e8:	a801      	add	r0, sp, #4
    70ea:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
    70ee:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    70f2:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
    70f6:	47d0      	blx	sl
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    70f8:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    70fc:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    7100:	f8d5 4090 	ldr.w	r4, [r5, #144]	; 0x90
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    7104:	405c      	eors	r4, r3
    7106:	4014      	ands	r4, r2
    7108:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    710a:	a801      	add	r0, sp, #4
    710c:	4b0b      	ldr	r3, [pc, #44]	; (713c <bash_spi_transfer.constprop.0+0x94>)
    710e:	4798      	blx	r3
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    7110:	f3c4 3440 	ubfx	r4, r4, #13, #1
			rx[count] |= (gpio_get_pin_level(PB13_SPI_MISO) << (loop - 1));
    7114:	7833      	ldrb	r3, [r6, #0]
    7116:	40bc      	lsls	r4, r7
    7118:	431c      	orrs	r4, r3
    711a:	7034      	strb	r4, [r6, #0]
		for (loop = 8; loop; loop--) {
    711c:	2f00      	cmp	r7, #0
    711e:	d1d2      	bne.n	70c6 <bash_spi_transfer.constprop.0+0x1e>
	for (count = 0; count < size; count++) {
    7120:	f108 0801 	add.w	r8, r8, #1
    7124:	f1b8 0f02 	cmp.w	r8, #2
    7128:	f106 0601 	add.w	r6, r6, #1
    712c:	d1c6      	bne.n	70bc <bash_spi_transfer.constprop.0+0x14>
}
    712e:	b003      	add	sp, #12
    7130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7134:	2000759d 	.word	0x2000759d
    7138:	41008000 	.word	0x41008000
    713c:	000011df 	.word	0x000011df
    7140:	200079ca 	.word	0x200079ca
    7144:	000011d1 	.word	0x000011d1

00007148 <tx_callb>:
    7148:	4770      	bx	lr
	...

0000714c <TIMER_0_task1_cb>:
{
    714c:	b538      	push	{r3, r4, r5, lr}
	tick_counter++;
    714e:	4c38      	ldr	r4, [pc, #224]	; (7230 <TIMER_0_task1_cb+0xe4>)
    7150:	6821      	ldr	r1, [r4, #0]
	if (!(tick_counter % 5)) {
    7152:	2305      	movs	r3, #5
	tick_counter++;
    7154:	3101      	adds	r1, #1
	if (!(tick_counter % 5)) {
    7156:	fbb1 f3f3 	udiv	r3, r1, r3
    715a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    715e:	4299      	cmp	r1, r3
	tick_counter++;
    7160:	6021      	str	r1, [r4, #0]
	if (!(tick_counter % 5)) {
    7162:	d10f      	bne.n	7184 <TIMER_0_task1_cb+0x38>
	ASSERT(wdt && wdt->dev.hw);
    7164:	4d33      	ldr	r5, [pc, #204]	; (7234 <TIMER_0_task1_cb+0xe8>)
		readenvironment = 1;
    7166:	4b34      	ldr	r3, [pc, #208]	; (7238 <TIMER_0_task1_cb+0xec>)
    7168:	6828      	ldr	r0, [r5, #0]
    716a:	4934      	ldr	r1, [pc, #208]	; (723c <TIMER_0_task1_cb+0xf0>)
    716c:	3000      	adds	r0, #0
    716e:	f04f 0201 	mov.w	r2, #1
    7172:	701a      	strb	r2, [r3, #0]
    7174:	bf18      	it	ne
    7176:	2001      	movne	r0, #1
    7178:	4b31      	ldr	r3, [pc, #196]	; (7240 <TIMER_0_task1_cb+0xf4>)
    717a:	22a9      	movs	r2, #169	; 0xa9
    717c:	4798      	blx	r3
	return _wdt_feed(&wdt->dev);
    717e:	4628      	mov	r0, r5
    7180:	4b30      	ldr	r3, [pc, #192]	; (7244 <TIMER_0_task1_cb+0xf8>)
    7182:	4798      	blx	r3
	if (!(tick_counter % 25)) {
    7184:	6823      	ldr	r3, [r4, #0]
    7186:	2119      	movs	r1, #25
    7188:	fbb3 f2f1 	udiv	r2, r3, r1
    718c:	fb01 3212 	mls	r2, r1, r2, r3
    7190:	b912      	cbnz	r2, 7198 <TIMER_0_task1_cb+0x4c>
		arp_check = 1;
    7192:	4a2d      	ldr	r2, [pc, #180]	; (7248 <TIMER_0_task1_cb+0xfc>)
    7194:	2101      	movs	r1, #1
    7196:	7011      	strb	r1, [r2, #0]
	if (!(tick_counter % 5)) {
    7198:	2205      	movs	r2, #5
    719a:	fbb3 f2f2 	udiv	r2, r3, r2
    719e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    71a2:	4293      	cmp	r3, r2
		ring_timer = 1;
    71a4:	bf02      	ittt	eq
    71a6:	4a29      	ldreq	r2, [pc, #164]	; (724c <TIMER_0_task1_cb+0x100>)
    71a8:	2101      	moveq	r1, #1
    71aa:	7011      	strbeq	r1, [r2, #0]
	if (!(tick_counter % 10)) {
    71ac:	210a      	movs	r1, #10
    71ae:	fbb3 f2f1 	udiv	r2, r3, r1
    71b2:	fb01 3212 	mls	r2, r1, r2, r3
    71b6:	b95a      	cbnz	r2, 71d0 <TIMER_0_task1_cb+0x84>
		looprate = loopcount;
    71b8:	4925      	ldr	r1, [pc, #148]	; (7250 <TIMER_0_task1_cb+0x104>)
    71ba:	4826      	ldr	r0, [pc, #152]	; (7254 <TIMER_0_task1_cb+0x108>)
    71bc:	680c      	ldr	r4, [r1, #0]
		loopcount = 0;
    71be:	600a      	str	r2, [r1, #0]
		if (uptime < 1000000) {
    71c0:	4925      	ldr	r1, [pc, #148]	; (7258 <TIMER_0_task1_cb+0x10c>)
		looprate = loopcount;
    71c2:	6004      	str	r4, [r0, #0]
		if (uptime < 1000000) {
    71c4:	680a      	ldr	r2, [r1, #0]
    71c6:	4825      	ldr	r0, [pc, #148]	; (725c <TIMER_0_task1_cb+0x110>)
    71c8:	4282      	cmp	r2, r0
			uptime++;
    71ca:	bf9c      	itt	ls
    71cc:	3201      	addls	r2, #1
    71ce:	600a      	strls	r2, [r1, #0]
	if ((tamper) && (init_done) && (((CONFIG *)&settings_buffer)->ID > 0x00000000)) {
    71d0:	4a23      	ldr	r2, [pc, #140]	; (7260 <TIMER_0_task1_cb+0x114>)
    71d2:	7812      	ldrb	r2, [r2, #0]
    71d4:	b33a      	cbz	r2, 7226 <TIMER_0_task1_cb+0xda>
    71d6:	4a23      	ldr	r2, [pc, #140]	; (7264 <TIMER_0_task1_cb+0x118>)
    71d8:	7812      	ldrb	r2, [r2, #0]
    71da:	b322      	cbz	r2, 7226 <TIMER_0_task1_cb+0xda>
    71dc:	4a22      	ldr	r2, [pc, #136]	; (7268 <TIMER_0_task1_cb+0x11c>)
    71de:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    71e0:	b30a      	cbz	r2, 7226 <TIMER_0_task1_cb+0xda>
		if ((link_port1 + link_port2 + link_port3) == 0) {
    71e2:	4a22      	ldr	r2, [pc, #136]	; (726c <TIMER_0_task1_cb+0x120>)
    71e4:	4922      	ldr	r1, [pc, #136]	; (7270 <TIMER_0_task1_cb+0x124>)
    71e6:	7812      	ldrb	r2, [r2, #0]
    71e8:	7809      	ldrb	r1, [r1, #0]
    71ea:	440a      	add	r2, r1
    71ec:	4921      	ldr	r1, [pc, #132]	; (7274 <TIMER_0_task1_cb+0x128>)
    71ee:	7809      	ldrb	r1, [r1, #0]
    71f0:	1852      	adds	r2, r2, r1
    71f2:	4921      	ldr	r1, [pc, #132]	; (7278 <TIMER_0_task1_cb+0x12c>)
    71f4:	d103      	bne.n	71fe <TIMER_0_task1_cb+0xb2>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    71f6:	2308      	movs	r3, #8
    71f8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    71fc:	bd38      	pop	{r3, r4, r5, pc}
		} else if ((link_port1 + link_port2 + link_port3) == 1) {
    71fe:	2a01      	cmp	r2, #1
    7200:	d107      	bne.n	7212 <TIMER_0_task1_cb+0xc6>
			if (!(tick_counter & 0x03)) {
    7202:	f013 0f03 	tst.w	r3, #3
    7206:	f04f 0308 	mov.w	r3, #8
    720a:	d1f5      	bne.n	71f8 <TIMER_0_task1_cb+0xac>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    720c:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
    7210:	bd38      	pop	{r3, r4, r5, pc}
		} else if ((link_port1 + link_port2 + link_port3) == 2) {
    7212:	2a02      	cmp	r2, #2
    7214:	d105      	bne.n	7222 <TIMER_0_task1_cb+0xd6>
			if (tick_counter & 0x03) {
    7216:	f013 0f03 	tst.w	r3, #3
    721a:	f04f 0308 	mov.w	r3, #8
    721e:	d0eb      	beq.n	71f8 <TIMER_0_task1_cb+0xac>
    7220:	e7f4      	b.n	720c <TIMER_0_task1_cb+0xc0>
    7222:	2308      	movs	r3, #8
    7224:	e7f2      	b.n	720c <TIMER_0_task1_cb+0xc0>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7226:	4b14      	ldr	r3, [pc, #80]	; (7278 <TIMER_0_task1_cb+0x12c>)
    7228:	2208      	movs	r2, #8
    722a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    722e:	bd38      	pop	{r3, r4, r5, pc}
    7230:	20008aac 	.word	0x20008aac
    7234:	20007490 	.word	0x20007490
    7238:	2000866c 	.word	0x2000866c
    723c:	0000c039 	.word	0x0000c039
    7240:	00002009 	.word	0x00002009
    7244:	00004371 	.word	0x00004371
    7248:	2000826b 	.word	0x2000826b
    724c:	2000867d 	.word	0x2000867d
    7250:	200075a4 	.word	0x200075a4
    7254:	20008abc 	.word	0x20008abc
    7258:	20008674 	.word	0x20008674
    725c:	000f423f 	.word	0x000f423f
    7260:	20008263 	.word	0x20008263
    7264:	2000759c 	.word	0x2000759c
    7268:	200081dc 	.word	0x200081dc
    726c:	20007591 	.word	0x20007591
    7270:	20008694 	.word	0x20008694
    7274:	20007596 	.word	0x20007596
    7278:	41008000 	.word	0x41008000

0000727c <application_udp_appcall>:
{
    727c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (uip_newdata()) {
    7280:	4da0      	ldr	r5, [pc, #640]	; (7504 <application_udp_appcall+0x288>)
    7282:	782b      	ldrb	r3, [r5, #0]
    7284:	079b      	lsls	r3, r3, #30
    7286:	d545      	bpl.n	7314 <application_udp_appcall+0x98>
		len = uip_datalen();
    7288:	4b9f      	ldr	r3, [pc, #636]	; (7508 <application_udp_appcall+0x28c>)
		if (uip_conn->lport == htons(MAIN_UDPSOCKET)) {
    728a:	4fa0      	ldr	r7, [pc, #640]	; (750c <application_udp_appcall+0x290>)
		len = uip_datalen();
    728c:	881c      	ldrh	r4, [r3, #0]
		if (uip_conn->lport == htons(MAIN_UDPSOCKET)) {
    728e:	683b      	ldr	r3, [r7, #0]
    7290:	4e9f      	ldr	r6, [pc, #636]	; (7510 <application_udp_appcall+0x294>)
    7292:	f8b3 8004 	ldrh.w	r8, [r3, #4]
    7296:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
    729a:	47b0      	blx	r6
    729c:	4580      	cmp	r8, r0
    729e:	f040 80e2 	bne.w	7466 <application_udp_appcall+0x1ea>
			memmove(PLAINTEXT, CIPHERTEXT, len);																	// If no encryption compiled, then just copy over plain-text from [UDP] buffer
    72a2:	4b9c      	ldr	r3, [pc, #624]	; (7514 <application_udp_appcall+0x298>)
    72a4:	499c      	ldr	r1, [pc, #624]	; (7518 <application_udp_appcall+0x29c>)
    72a6:	4e9d      	ldr	r6, [pc, #628]	; (751c <application_udp_appcall+0x2a0>)
    72a8:	6809      	ldr	r1, [r1, #0]
    72aa:	4618      	mov	r0, r3
    72ac:	4622      	mov	r2, r4
    72ae:	47b0      	blx	r6
			if ((len == 39) && (PLAINTEXT[0] == ID_IDENT_1) && (PLAINTEXT[1] == ID_IDENT_2) && (PLAINTEXT[2] == ID_IDENT_3) && (PLAINTEXT[3] == ID_IDENT_4)) {
    72b0:	2c27      	cmp	r4, #39	; 0x27
			memmove(PLAINTEXT, CIPHERTEXT, len);																	// If no encryption compiled, then just copy over plain-text from [UDP] buffer
    72b2:	4603      	mov	r3, r0
			if ((len == 39) && (PLAINTEXT[0] == ID_IDENT_1) && (PLAINTEXT[1] == ID_IDENT_2) && (PLAINTEXT[2] == ID_IDENT_3) && (PLAINTEXT[3] == ID_IDENT_4)) {
    72b4:	d12e      	bne.n	7314 <application_udp_appcall+0x98>
    72b6:	7802      	ldrb	r2, [r0, #0]
    72b8:	2a37      	cmp	r2, #55	; 0x37
    72ba:	d12b      	bne.n	7314 <application_udp_appcall+0x98>
    72bc:	7842      	ldrb	r2, [r0, #1]
    72be:	2a9f      	cmp	r2, #159	; 0x9f
    72c0:	d128      	bne.n	7314 <application_udp_appcall+0x98>
    72c2:	7882      	ldrb	r2, [r0, #2]
    72c4:	2a1b      	cmp	r2, #27
    72c6:	d125      	bne.n	7314 <application_udp_appcall+0x98>
    72c8:	78c2      	ldrb	r2, [r0, #3]
    72ca:	2a61      	cmp	r2, #97	; 0x61
    72cc:	d122      	bne.n	7314 <application_udp_appcall+0x98>
				memmove(((CONFIG *)&settings_buffer)->name, &PLAINTEXT[4], 33);
    72ce:	4994      	ldr	r1, [pc, #592]	; (7520 <application_udp_appcall+0x2a4>)
    72d0:	1d02      	adds	r2, r0, #4
    72d2:	3024      	adds	r0, #36	; 0x24
    72d4:	f852 4b04 	ldr.w	r4, [r2], #4
    72d8:	f841 4b04 	str.w	r4, [r1], #4
    72dc:	4282      	cmp	r2, r0
    72de:	d1f9      	bne.n	72d4 <application_udp_appcall+0x58>
    72e0:	7812      	ldrb	r2, [r2, #0]
    72e2:	700a      	strb	r2, [r1, #0]
				((CONFIG *)&settings_buffer)->gain_cardA = PLAINTEXT[37];
    72e4:	488f      	ldr	r0, [pc, #572]	; (7524 <application_udp_appcall+0x2a8>)
    72e6:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
				((CONFIG *)&settings_buffer)->gain_cardB = PLAINTEXT[38];
    72ea:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
				((CONFIG *)&settings_buffer)->gain_cardA = PLAINTEXT[37];
    72ee:	f880 2029 	strb.w	r2, [r0, #41]	; 0x29
				((CONFIG *)&settings_buffer)->gain_cardB = PLAINTEXT[38];
    72f2:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
				if (EEprom_settings(settings_buffer, SETTING_STRUCTURE_SIZE, 1) != ERR_NONE) {
    72f6:	2201      	movs	r2, #1
    72f8:	2180      	movs	r1, #128	; 0x80
    72fa:	4b8b      	ldr	r3, [pc, #556]	; (7528 <application_udp_appcall+0x2ac>)
    72fc:	4c8b      	ldr	r4, [pc, #556]	; (752c <application_udp_appcall+0x2b0>)
    72fe:	4798      	blx	r3
    7300:	2800      	cmp	r0, #0
    7302:	f000 80ae 	beq.w	7462 <application_udp_appcall+0x1e6>
					xprintf("MultiSense [configuration ERROR READING]\r\n");
    7306:	488a      	ldr	r0, [pc, #552]	; (7530 <application_udp_appcall+0x2b4>)
					xprintf("MultiSense [UPDATED <ID> configuration WRITTEN]\r\n");
    7308:	47a0      	blx	r4
				refresh_gain = 1;
    730a:	4b8a      	ldr	r3, [pc, #552]	; (7534 <application_udp_appcall+0x2b8>)
				xprintf("Global settings packet received...\r\n");	
    730c:	488a      	ldr	r0, [pc, #552]	; (7538 <application_udp_appcall+0x2bc>)
				refresh_gain = 1;
    730e:	2201      	movs	r2, #1
    7310:	701a      	strb	r2, [r3, #0]
				xprintf("Global settings packet received...\r\n");	
    7312:	47a0      	blx	r4
	if ((uip_rexmit()) || (uip_poll())) {
    7314:	782b      	ldrb	r3, [r5, #0]
    7316:	f013 0f0c 	tst.w	r3, #12
    731a:	f000 8233 	beq.w	7784 <application_udp_appcall+0x508>
		if (uip_conn->lport == htons(MAIN_UDPSOCKET)) {
    731e:	4d7b      	ldr	r5, [pc, #492]	; (750c <application_udp_appcall+0x290>)
    7320:	4c7b      	ldr	r4, [pc, #492]	; (7510 <application_udp_appcall+0x294>)
    7322:	682b      	ldr	r3, [r5, #0]
    7324:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
    7328:	889e      	ldrh	r6, [r3, #4]
    732a:	47a0      	blx	r4
    732c:	4286      	cmp	r6, r0
    732e:	f040 8131 	bne.w	7594 <application_udp_appcall+0x318>
			if (readenvironment == 2) {
    7332:	4c82      	ldr	r4, [pc, #520]	; (753c <application_udp_appcall+0x2c0>)
    7334:	7823      	ldrb	r3, [r4, #0]
    7336:	2b02      	cmp	r3, #2
    7338:	f040 8224 	bne.w	7784 <application_udp_appcall+0x508>
				PLAINTEXT[0] = (uint8_t)(((((CONFIG *)&settings_buffer)->ID) >> 24) & 0x00FF);
    733c:	4a79      	ldr	r2, [pc, #484]	; (7524 <application_udp_appcall+0x2a8>)
    733e:	4b75      	ldr	r3, [pc, #468]	; (7514 <application_udp_appcall+0x298>)
    7340:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
				PLAINTEXT[3] = (uint8_t)((((CONFIG *)&settings_buffer)->ID) & 0x00FF);
    7342:	70d9      	strb	r1, [r3, #3]
				PLAINTEXT[0] = (uint8_t)(((((CONFIG *)&settings_buffer)->ID) >> 24) & 0x00FF);
    7344:	0e08      	lsrs	r0, r1, #24
    7346:	7018      	strb	r0, [r3, #0]
				PLAINTEXT[1] = (uint8_t)(((((CONFIG *)&settings_buffer)->ID) >> 16) & 0x00FF);
    7348:	0c08      	lsrs	r0, r1, #16
    734a:	7058      	strb	r0, [r3, #1]
				PLAINTEXT[2] = (uint8_t)(((((CONFIG *)&settings_buffer)->ID) >> 8) & 0x00FF);
    734c:	0a08      	lsrs	r0, r1, #8
    734e:	7098      	strb	r0, [r3, #2]
				memmove(&PLAINTEXT[4], ((CONFIG *)&settings_buffer)->name, 33);
    7350:	f102 0108 	add.w	r1, r2, #8
    7354:	1d18      	adds	r0, r3, #4
    7356:	f102 0528 	add.w	r5, r2, #40	; 0x28
    735a:	f851 6b04 	ldr.w	r6, [r1], #4
    735e:	f840 6b04 	str.w	r6, [r0], #4
    7362:	42a9      	cmp	r1, r5
    7364:	d1f9      	bne.n	735a <application_udp_appcall+0xde>
    7366:	7809      	ldrb	r1, [r1, #0]
    7368:	7001      	strb	r1, [r0, #0]
				PLAINTEXT[37] = ((CONFIG *)&settings_buffer)->gain_cardA;
    736a:	f892 1029 	ldrb.w	r1, [r2, #41]	; 0x29
    736e:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
				PLAINTEXT[38] = ((CONFIG *)&settings_buffer)->gain_cardB;
    7372:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
				PLAINTEXT[39] = ((CONFIG *)&settings_buffer)->loop_basestation;
    7376:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
    737a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
				PLAINTEXT[40] = readdata_water1;
    737e:	4a70      	ldr	r2, [pc, #448]	; (7540 <application_udp_appcall+0x2c4>)
				PLAINTEXT[38] = ((CONFIG *)&settings_buffer)->gain_cardB;
    7380:	f883 1026 	strb.w	r1, [r3, #38]	; 0x26
				PLAINTEXT[40] = readdata_water1;
    7384:	7812      	ldrb	r2, [r2, #0]
    7386:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				PLAINTEXT[41] = readdata_water2;
    738a:	4a6e      	ldr	r2, [pc, #440]	; (7544 <application_udp_appcall+0x2c8>)
				memmove(CIPHERTEXT, PLAINTEXT, 64);															// If no encryption compiled, then just copy over plain-text into [UDP] buffer
    738c:	4e62      	ldr	r6, [pc, #392]	; (7518 <application_udp_appcall+0x29c>)
				PLAINTEXT[41] = readdata_water2;
    738e:	7812      	ldrb	r2, [r2, #0]
    7390:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
				PLAINTEXT[42] = highvoltage;
    7394:	4a6c      	ldr	r2, [pc, #432]	; (7548 <application_udp_appcall+0x2cc>)
    7396:	7812      	ldrb	r2, [r2, #0]
    7398:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				PLAINTEXT[43] = readdata_tempmoisture[0];
    739c:	4a6b      	ldr	r2, [pc, #428]	; (754c <application_udp_appcall+0x2d0>)
    739e:	7811      	ldrb	r1, [r2, #0]
    73a0:	f883 102b 	strb.w	r1, [r3, #43]	; 0x2b
				PLAINTEXT[44] = readdata_tempmoisture[1];
    73a4:	7851      	ldrb	r1, [r2, #1]
    73a6:	f883 102c 	strb.w	r1, [r3, #44]	; 0x2c
				PLAINTEXT[45] = readdata_tempmoisture[2];
    73aa:	7891      	ldrb	r1, [r2, #2]
				PLAINTEXT[46] = readdata_tempmoisture[3];
    73ac:	78d2      	ldrb	r2, [r2, #3]
    73ae:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				PLAINTEXT[47] = tamper;
    73b2:	4a67      	ldr	r2, [pc, #412]	; (7550 <application_udp_appcall+0x2d4>)
				PLAINTEXT[45] = readdata_tempmoisture[2];
    73b4:	f883 102d 	strb.w	r1, [r3, #45]	; 0x2d
				PLAINTEXT[47] = tamper;
    73b8:	7812      	ldrb	r2, [r2, #0]
    73ba:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				PLAINTEXT[48] = link_port1;
    73be:	4a65      	ldr	r2, [pc, #404]	; (7554 <application_udp_appcall+0x2d8>)
    73c0:	7812      	ldrb	r2, [r2, #0]
    73c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				PLAINTEXT[49] = link_port2;
    73c6:	4a64      	ldr	r2, [pc, #400]	; (7558 <application_udp_appcall+0x2dc>)
    73c8:	7812      	ldrb	r2, [r2, #0]
    73ca:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				PLAINTEXT[50] = link_port3;
    73ce:	4a63      	ldr	r2, [pc, #396]	; (755c <application_udp_appcall+0x2e0>)
    73d0:	7812      	ldrb	r2, [r2, #0]
    73d2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
				PLAINTEXT[51] = cardA_type;
    73d6:	4a62      	ldr	r2, [pc, #392]	; (7560 <application_udp_appcall+0x2e4>)
    73d8:	7812      	ldrb	r2, [r2, #0]
    73da:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
				PLAINTEXT[52] = cardB_type;
    73de:	4a61      	ldr	r2, [pc, #388]	; (7564 <application_udp_appcall+0x2e8>)
    73e0:	7812      	ldrb	r2, [r2, #0]
    73e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				PLAINTEXT[53] = ring_broken;
    73e6:	4a60      	ldr	r2, [pc, #384]	; (7568 <application_udp_appcall+0x2ec>)
				memmove(CIPHERTEXT, PLAINTEXT, 64);															// If no encryption compiled, then just copy over plain-text into [UDP] buffer
    73e8:	6830      	ldr	r0, [r6, #0]
				PLAINTEXT[53] = ring_broken;
    73ea:	7812      	ldrb	r2, [r2, #0]
    73ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
				PLAINTEXT[55] = MULTISENSE_FIRMWARE_MINOR;
    73f0:	2202      	movs	r2, #2
    73f2:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
				PLAINTEXT[56] = ID_IDENT_1;
    73f6:	2237      	movs	r2, #55	; 0x37
    73f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
				PLAINTEXT[57] = ID_IDENT_2;
    73fc:	229f      	movs	r2, #159	; 0x9f
    73fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
				PLAINTEXT[58] = ID_IDENT_3;
    7402:	221b      	movs	r2, #27
    7404:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				PLAINTEXT[59] = ID_IDENT_4;
    7408:	2261      	movs	r2, #97	; 0x61
    740a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
				PLAINTEXT[60] = (unsigned char)((uptime >> 24) && 0xFF);
    740e:	4a57      	ldr	r2, [pc, #348]	; (756c <application_udp_appcall+0x2f0>)
    7410:	6812      	ldr	r2, [r2, #0]
				PLAINTEXT[54] = MULTISENSE_FIRMWARE_MAJOR;
    7412:	2500      	movs	r5, #0
				PLAINTEXT[60] = (unsigned char)((uptime >> 24) && 0xFF);
    7414:	0e11      	lsrs	r1, r2, #24
    7416:	bf14      	ite	ne
    7418:	2101      	movne	r1, #1
    741a:	4629      	moveq	r1, r5
    741c:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
				PLAINTEXT[61] = (unsigned char)((uptime >> 16) && 0xFF);
    7420:	0c11      	lsrs	r1, r2, #16
    7422:	bf14      	ite	ne
    7424:	2101      	movne	r1, #1
    7426:	4629      	moveq	r1, r5
    7428:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
				PLAINTEXT[62] = (unsigned char)((uptime >> 8) && 0xFF);
    742c:	0a11      	lsrs	r1, r2, #8
    742e:	bf14      	ite	ne
    7430:	2101      	movne	r1, #1
    7432:	4629      	moveq	r1, r5
				PLAINTEXT[63] = (unsigned char)((uptime >> 0) && 0xFF);
    7434:	1b52      	subs	r2, r2, r5
    7436:	bf18      	it	ne
    7438:	2201      	movne	r2, #1
				PLAINTEXT[62] = (unsigned char)((uptime >> 8) && 0xFF);
    743a:	f883 103e 	strb.w	r1, [r3, #62]	; 0x3e
				PLAINTEXT[63] = (unsigned char)((uptime >> 0) && 0xFF);
    743e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
				PLAINTEXT[54] = MULTISENSE_FIRMWARE_MAJOR;
    7442:	f883 5036 	strb.w	r5, [r3, #54]	; 0x36
				memmove(CIPHERTEXT, PLAINTEXT, 64);															// If no encryption compiled, then just copy over plain-text into [UDP] buffer
    7446:	2240      	movs	r2, #64	; 0x40
    7448:	4932      	ldr	r1, [pc, #200]	; (7514 <application_udp_appcall+0x298>)
    744a:	4b34      	ldr	r3, [pc, #208]	; (751c <application_udp_appcall+0x2a0>)
    744c:	4798      	blx	r3
				uip_udp_send(64);
    744e:	6830      	ldr	r0, [r6, #0]
    7450:	4b47      	ldr	r3, [pc, #284]	; (7570 <application_udp_appcall+0x2f4>)
    7452:	2140      	movs	r1, #64	; 0x40
    7454:	4798      	blx	r3
				xprintf("Hardware packet send...\r\n");
    7456:	4847      	ldr	r0, [pc, #284]	; (7574 <application_udp_appcall+0x2f8>)
				readenvironment = 0;
    7458:	7025      	strb	r5, [r4, #0]
				xprintf("Topology update packet send...\r\n");
    745a:	4b34      	ldr	r3, [pc, #208]	; (752c <application_udp_appcall+0x2b0>)
}
    745c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
				xprintf("Topology update packet send...\r\n");
    7460:	4718      	bx	r3
					xprintf("MultiSense [UPDATED <ID> configuration WRITTEN]\r\n");
    7462:	4845      	ldr	r0, [pc, #276]	; (7578 <application_udp_appcall+0x2fc>)
    7464:	e750      	b.n	7308 <application_udp_appcall+0x8c>
		} else if (uip_conn->lport == htons(CARDA_UDPSOCKET)) {
    7466:	683b      	ldr	r3, [r7, #0]
    7468:	f640 70a1 	movw	r0, #4001	; 0xfa1
    746c:	f8b3 8004 	ldrh.w	r8, [r3, #4]
    7470:	47b0      	blx	r6
    7472:	4580      	cmp	r8, r0
    7474:	d115      	bne.n	74a2 <application_udp_appcall+0x226>
			memmove(PLAINTEXT, CIPHERTEXT, len);																	// If no encryption compiled, then just copy over plain-text from [UDP] buffer
    7476:	4b27      	ldr	r3, [pc, #156]	; (7514 <application_udp_appcall+0x298>)
    7478:	4927      	ldr	r1, [pc, #156]	; (7518 <application_udp_appcall+0x29c>)
    747a:	4e28      	ldr	r6, [pc, #160]	; (751c <application_udp_appcall+0x2a0>)
    747c:	6809      	ldr	r1, [r1, #0]
    747e:	4622      	mov	r2, r4
    7480:	4618      	mov	r0, r3
    7482:	47b0      	blx	r6
			switch (cardA_type) {
    7484:	4a36      	ldr	r2, [pc, #216]	; (7560 <application_udp_appcall+0x2e4>)
    7486:	7812      	ldrb	r2, [r2, #0]
    7488:	2a02      	cmp	r2, #2
    748a:	f47f af43 	bne.w	7314 <application_udp_appcall+0x98>
				if (len == 1) {
    748e:	2c01      	cmp	r4, #1
    7490:	f47f af40 	bne.w	7314 <application_udp_appcall+0x98>
					miniIO_A_relay = PLAINTEXT[0];
    7494:	4b39      	ldr	r3, [pc, #228]	; (757c <application_udp_appcall+0x300>)
    7496:	7802      	ldrb	r2, [r0, #0]
					xprintf("CardA Mini-IO packet received...\r\n");
    7498:	4839      	ldr	r0, [pc, #228]	; (7580 <application_udp_appcall+0x304>)
					miniIO_A_relay = PLAINTEXT[0];
    749a:	701a      	strb	r2, [r3, #0]
				xprintf("Broadcast Table [FLUSH] UDP packet arrived...\r\n");
    749c:	4b23      	ldr	r3, [pc, #140]	; (752c <application_udp_appcall+0x2b0>)
    749e:	4798      	blx	r3
    74a0:	e738      	b.n	7314 <application_udp_appcall+0x98>
		} else if (uip_conn->lport == htons(CARDB_UDPSOCKET)) {
    74a2:	683b      	ldr	r3, [r7, #0]
    74a4:	f640 70a2 	movw	r0, #4002	; 0xfa2
    74a8:	f8b3 8004 	ldrh.w	r8, [r3, #4]
    74ac:	47b0      	blx	r6
    74ae:	4580      	cmp	r8, r0
    74b0:	d113      	bne.n	74da <application_udp_appcall+0x25e>
			memmove(PLAINTEXT, CIPHERTEXT, len);																	// If no encryption compiled, then just copy over plain-text from [UDP] buffer
    74b2:	4b18      	ldr	r3, [pc, #96]	; (7514 <application_udp_appcall+0x298>)
    74b4:	4918      	ldr	r1, [pc, #96]	; (7518 <application_udp_appcall+0x29c>)
    74b6:	4e19      	ldr	r6, [pc, #100]	; (751c <application_udp_appcall+0x2a0>)
    74b8:	6809      	ldr	r1, [r1, #0]
    74ba:	4622      	mov	r2, r4
    74bc:	4618      	mov	r0, r3
    74be:	47b0      	blx	r6
			switch (cardB_type) {
    74c0:	4a28      	ldr	r2, [pc, #160]	; (7564 <application_udp_appcall+0x2e8>)
    74c2:	7812      	ldrb	r2, [r2, #0]
    74c4:	2a02      	cmp	r2, #2
    74c6:	f47f af25 	bne.w	7314 <application_udp_appcall+0x98>
				if (len == 1) {
    74ca:	2c01      	cmp	r4, #1
    74cc:	f47f af22 	bne.w	7314 <application_udp_appcall+0x98>
					miniIO_B_relay = PLAINTEXT[0];
    74d0:	4b2c      	ldr	r3, [pc, #176]	; (7584 <application_udp_appcall+0x308>)
    74d2:	7802      	ldrb	r2, [r0, #0]
    74d4:	701a      	strb	r2, [r3, #0]
					xprintf("CardB Mini-IO packet received...\r\n");
    74d6:	482c      	ldr	r0, [pc, #176]	; (7588 <application_udp_appcall+0x30c>)
    74d8:	e7e0      	b.n	749c <application_udp_appcall+0x220>
		} else if (uip_conn->lport == htons(RING_MANAGEMENT_SOCKET)) {
    74da:	683b      	ldr	r3, [r7, #0]
    74dc:	f640 70a3 	movw	r0, #4003	; 0xfa3
    74e0:	889c      	ldrh	r4, [r3, #4]
    74e2:	47b0      	blx	r6
    74e4:	4284      	cmp	r4, r0
    74e6:	f47f af15 	bne.w	7314 <application_udp_appcall+0x98>
			if (!(((CONFIG *)&settings_buffer)->loop_basestation)) {
    74ea:	4b0e      	ldr	r3, [pc, #56]	; (7524 <application_udp_appcall+0x2a8>)
    74ec:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
    74f0:	2b00      	cmp	r3, #0
    74f2:	f47f af0f 	bne.w	7314 <application_udp_appcall+0x98>
				writeKSZreg(SPI_KSZ8794_GLOBAL0, 0x2C);
    74f6:	2002      	movs	r0, #2
    74f8:	212c      	movs	r1, #44	; 0x2c
    74fa:	4b24      	ldr	r3, [pc, #144]	; (758c <application_udp_appcall+0x310>)
    74fc:	4798      	blx	r3
				xprintf("Broadcast Table [FLUSH] UDP packet arrived...\r\n");
    74fe:	4824      	ldr	r0, [pc, #144]	; (7590 <application_udp_appcall+0x314>)
    7500:	e7cc      	b.n	749c <application_udp_appcall+0x220>
    7502:	bf00      	nop
    7504:	20008ad0 	.word	0x20008ad0
    7508:	20008ac4 	.word	0x20008ac4
    750c:	20008adc 	.word	0x20008adc
    7510:	0000a34d 	.word	0x0000a34d
    7514:	200079cc 	.word	0x200079cc
    7518:	20008ad8 	.word	0x20008ad8
    751c:	0000b351 	.word	0x0000b351
    7520:	200081e4 	.word	0x200081e4
    7524:	200081dc 	.word	0x200081dc
    7528:	0000b1b9 	.word	0x0000b1b9
    752c:	00000395 	.word	0x00000395
    7530:	0000d734 	.word	0x0000d734
    7534:	20008ab1 	.word	0x20008ab1
    7538:	0000d84d 	.word	0x0000d84d
    753c:	2000866c 	.word	0x2000866c
    7540:	20008ab2 	.word	0x20008ab2
    7544:	20008aa1 	.word	0x20008aa1
    7548:	20008aa9 	.word	0x20008aa9
    754c:	20008265 	.word	0x20008265
    7550:	20008263 	.word	0x20008263
    7554:	20007591 	.word	0x20007591
    7558:	20008694 	.word	0x20008694
    755c:	20007596 	.word	0x20007596
    7560:	20007dce 	.word	0x20007dce
    7564:	20008ab4 	.word	0x20008ab4
    7568:	2000866d 	.word	0x2000866d
    756c:	20008674 	.word	0x20008674
    7570:	0000a355 	.word	0x0000a355
    7574:	0000d8e8 	.word	0x0000d8e8
    7578:	0000d81b 	.word	0x0000d81b
    757c:	20008264 	.word	0x20008264
    7580:	0000d872 	.word	0x0000d872
    7584:	200081cf 	.word	0x200081cf
    7588:	0000d895 	.word	0x0000d895
    758c:	0000b259 	.word	0x0000b259
    7590:	0000d8b8 	.word	0x0000d8b8
		} else if (uip_conn->lport == htons(CARDA_UDPSOCKET)) {
    7594:	682b      	ldr	r3, [r5, #0]
    7596:	f640 70a1 	movw	r0, #4001	; 0xfa1
    759a:	889e      	ldrh	r6, [r3, #4]
    759c:	47a0      	blx	r4
    759e:	4286      	cmp	r6, r0
    75a0:	d167      	bne.n	7672 <application_udp_appcall+0x3f6>
			switch (cardA_type) {
    75a2:	4b79      	ldr	r3, [pc, #484]	; (7788 <application_udp_appcall+0x50c>)
    75a4:	781d      	ldrb	r5, [r3, #0]
    75a6:	2d01      	cmp	r5, #1
    75a8:	d01d      	beq.n	75e6 <application_udp_appcall+0x36a>
    75aa:	2d02      	cmp	r5, #2
    75ac:	f040 80ea 	bne.w	7784 <application_udp_appcall+0x508>
				PLAINTEXT[0] = (uint8_t)miniIO_A0_adcH;
    75b0:	4b76      	ldr	r3, [pc, #472]	; (778c <application_udp_appcall+0x510>)
    75b2:	4977      	ldr	r1, [pc, #476]	; (7790 <application_udp_appcall+0x514>)
    75b4:	781b      	ldrb	r3, [r3, #0]
    75b6:	700b      	strb	r3, [r1, #0]
				PLAINTEXT[1] = (uint8_t)miniIO_A0_adcL;
    75b8:	4b76      	ldr	r3, [pc, #472]	; (7794 <application_udp_appcall+0x518>)
				memmove(CIPHERTEXT, PLAINTEXT, 5);													// If no encryption compiled, then just copy over plain-text into [UDP] buffer
    75ba:	4c77      	ldr	r4, [pc, #476]	; (7798 <application_udp_appcall+0x51c>)
				PLAINTEXT[1] = (uint8_t)miniIO_A0_adcL;
    75bc:	781b      	ldrb	r3, [r3, #0]
    75be:	704b      	strb	r3, [r1, #1]
				PLAINTEXT[2] = (uint8_t)miniIO_A1_adcH;
    75c0:	4b76      	ldr	r3, [pc, #472]	; (779c <application_udp_appcall+0x520>)
				memmove(CIPHERTEXT, PLAINTEXT, 5);													// If no encryption compiled, then just copy over plain-text into [UDP] buffer
    75c2:	6820      	ldr	r0, [r4, #0]
				PLAINTEXT[2] = (uint8_t)miniIO_A1_adcH;
    75c4:	781b      	ldrb	r3, [r3, #0]
    75c6:	708b      	strb	r3, [r1, #2]
				PLAINTEXT[3] = (uint8_t)miniIO_A1_adcL;
    75c8:	4b75      	ldr	r3, [pc, #468]	; (77a0 <application_udp_appcall+0x524>)
    75ca:	781b      	ldrb	r3, [r3, #0]
    75cc:	70cb      	strb	r3, [r1, #3]
				PLAINTEXT[4] = (uint8_t)miniIO_A_inputs;
    75ce:	4b75      	ldr	r3, [pc, #468]	; (77a4 <application_udp_appcall+0x528>)
    75d0:	781b      	ldrb	r3, [r3, #0]
    75d2:	710b      	strb	r3, [r1, #4]
				memmove(CIPHERTEXT, PLAINTEXT, 5);													// If no encryption compiled, then just copy over plain-text into [UDP] buffer
    75d4:	2205      	movs	r2, #5
    75d6:	4b74      	ldr	r3, [pc, #464]	; (77a8 <application_udp_appcall+0x52c>)
    75d8:	4798      	blx	r3
				uip_udp_send(3);
    75da:	6820      	ldr	r0, [r4, #0]
    75dc:	4b73      	ldr	r3, [pc, #460]	; (77ac <application_udp_appcall+0x530>)
    75de:	2103      	movs	r1, #3
    75e0:	4798      	blx	r3
				xprintf("CardA Mini-IO packet send...\r\n");	
    75e2:	4873      	ldr	r0, [pc, #460]	; (77b0 <application_udp_appcall+0x534>)
    75e4:	e739      	b.n	745a <application_udp_appcall+0x1de>
				if ((!sentA) && (card_sampleindex == SAMPLE_BUFFER_SIZE)) {
    75e6:	f8df 8210 	ldr.w	r8, [pc, #528]	; 77f8 <application_udp_appcall+0x57c>
    75ea:	f898 6000 	ldrb.w	r6, [r8]
    75ee:	2e00      	cmp	r6, #0
    75f0:	f040 80c8 	bne.w	7784 <application_udp_appcall+0x508>
    75f4:	f8df 9218 	ldr.w	r9, [pc, #536]	; 7810 <application_udp_appcall+0x594>
    75f8:	f8d9 7000 	ldr.w	r7, [r9]
    75fc:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
    7600:	f040 80c0 	bne.w	7784 <application_udp_appcall+0x508>
					memmove(&PLAINTEXT[0], cardAch0_samplebuffer, SAMPLE_BUFFER_SIZE);
    7604:	4c62      	ldr	r4, [pc, #392]	; (7790 <application_udp_appcall+0x514>)
    7606:	496b      	ldr	r1, [pc, #428]	; (77b4 <application_udp_appcall+0x538>)
    7608:	f8df a208 	ldr.w	sl, [pc, #520]	; 7814 <application_udp_appcall+0x598>
    760c:	463a      	mov	r2, r7
    760e:	4620      	mov	r0, r4
    7610:	47d0      	blx	sl
					memmove(&PLAINTEXT[SAMPLE_BUFFER_SIZE], cardAch1_samplebuffer, SAMPLE_BUFFER_SIZE);
    7612:	463a      	mov	r2, r7
    7614:	4968      	ldr	r1, [pc, #416]	; (77b8 <application_udp_appcall+0x53c>)
					memmove(CIPHERTEXT, PLAINTEXT, (SAMPLE_BUFFER_SIZE * 2) + 6);													// If no encryption compiled, then just copy over plain-text into [UDP] buffer
    7616:	4f60      	ldr	r7, [pc, #384]	; (7798 <application_udp_appcall+0x51c>)
					memmove(&PLAINTEXT[SAMPLE_BUFFER_SIZE], cardAch1_samplebuffer, SAMPLE_BUFFER_SIZE);
    7618:	f504 6080 	add.w	r0, r4, #1024	; 0x400
    761c:	47d0      	blx	sl
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 0] = cardAch2_samplebuffer;
    761e:	4b67      	ldr	r3, [pc, #412]	; (77bc <application_udp_appcall+0x540>)
					memmove(CIPHERTEXT, PLAINTEXT, (SAMPLE_BUFFER_SIZE * 2) + 6);													// If no encryption compiled, then just copy over plain-text into [UDP] buffer
    7620:	6838      	ldr	r0, [r7, #0]
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 0] = cardAch2_samplebuffer;
    7622:	781b      	ldrb	r3, [r3, #0]
    7624:	f884 3800 	strb.w	r3, [r4, #2048]	; 0x800
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 1] = cardAch3_samplebuffer;
    7628:	4b65      	ldr	r3, [pc, #404]	; (77c0 <application_udp_appcall+0x544>)
    762a:	781b      	ldrb	r3, [r3, #0]
    762c:	f884 3801 	strb.w	r3, [r4, #2049]	; 0x801
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 2] = ID_IDENT_1;
    7630:	2337      	movs	r3, #55	; 0x37
    7632:	f884 3802 	strb.w	r3, [r4, #2050]	; 0x802
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 3] = ID_IDENT_2;
    7636:	239f      	movs	r3, #159	; 0x9f
    7638:	f884 3803 	strb.w	r3, [r4, #2051]	; 0x803
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 4] = ID_IDENT_3;
    763c:	231b      	movs	r3, #27
    763e:	f884 3804 	strb.w	r3, [r4, #2052]	; 0x804
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 5] = ID_IDENT_4;
    7642:	2361      	movs	r3, #97	; 0x61
					memmove(CIPHERTEXT, PLAINTEXT, (SAMPLE_BUFFER_SIZE * 2) + 6);													// If no encryption compiled, then just copy over plain-text into [UDP] buffer
    7644:	f640 0206 	movw	r2, #2054	; 0x806
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 5] = ID_IDENT_4;
    7648:	f884 3805 	strb.w	r3, [r4, #2053]	; 0x805
					memmove(CIPHERTEXT, PLAINTEXT, (SAMPLE_BUFFER_SIZE * 2) + 6);													// If no encryption compiled, then just copy over plain-text into [UDP] buffer
    764c:	4621      	mov	r1, r4
    764e:	4b56      	ldr	r3, [pc, #344]	; (77a8 <application_udp_appcall+0x52c>)
    7650:	4798      	blx	r3
					uip_udp_send((SAMPLE_BUFFER_SIZE * 2) + 6);
    7652:	4b56      	ldr	r3, [pc, #344]	; (77ac <application_udp_appcall+0x530>)
    7654:	6838      	ldr	r0, [r7, #0]
    7656:	f640 0106 	movw	r1, #2054	; 0x806
    765a:	4798      	blx	r3
					if (sentB) {
    765c:	4b59      	ldr	r3, [pc, #356]	; (77c4 <application_udp_appcall+0x548>)
    765e:	781a      	ldrb	r2, [r3, #0]
    7660:	b122      	cbz	r2, 766c <application_udp_appcall+0x3f0>
						sentB = 0;
    7662:	701e      	strb	r6, [r3, #0]
						card_sampleindex = 0;
    7664:	f8c9 6000 	str.w	r6, [r9]
					xprintf("CardA VibraTek packet send...\r\n");
    7668:	4857      	ldr	r0, [pc, #348]	; (77c8 <application_udp_appcall+0x54c>)
    766a:	e6f6      	b.n	745a <application_udp_appcall+0x1de>
						sentA = 1;
    766c:	f888 5000 	strb.w	r5, [r8]
    7670:	e7fa      	b.n	7668 <application_udp_appcall+0x3ec>
		} else if (uip_conn->lport == htons(CARDB_UDPSOCKET)) {
    7672:	682b      	ldr	r3, [r5, #0]
    7674:	f640 70a2 	movw	r0, #4002	; 0xfa2
    7678:	889e      	ldrh	r6, [r3, #4]
    767a:	47a0      	blx	r4
    767c:	4286      	cmp	r6, r0
    767e:	d164      	bne.n	774a <application_udp_appcall+0x4ce>
			switch (cardB_type) {
    7680:	4b52      	ldr	r3, [pc, #328]	; (77cc <application_udp_appcall+0x550>)
    7682:	781d      	ldrb	r5, [r3, #0]
    7684:	2d01      	cmp	r5, #1
    7686:	d01c      	beq.n	76c2 <application_udp_appcall+0x446>
    7688:	2d02      	cmp	r5, #2
    768a:	d17b      	bne.n	7784 <application_udp_appcall+0x508>
				PLAINTEXT[0] = (uint8_t)miniIO_B0_adcH;
    768c:	4b50      	ldr	r3, [pc, #320]	; (77d0 <application_udp_appcall+0x554>)
    768e:	4940      	ldr	r1, [pc, #256]	; (7790 <application_udp_appcall+0x514>)
    7690:	781b      	ldrb	r3, [r3, #0]
    7692:	700b      	strb	r3, [r1, #0]
				PLAINTEXT[1] = (uint8_t)miniIO_B0_adcL;
    7694:	4b4f      	ldr	r3, [pc, #316]	; (77d4 <application_udp_appcall+0x558>)
				memmove(CIPHERTEXT, PLAINTEXT, 3);												   	// If no encryption compiled, then just copy over plain-text into [UDP] buffer
    7696:	4c40      	ldr	r4, [pc, #256]	; (7798 <application_udp_appcall+0x51c>)
				PLAINTEXT[1] = (uint8_t)miniIO_B0_adcL;
    7698:	781b      	ldrb	r3, [r3, #0]
    769a:	704b      	strb	r3, [r1, #1]
				PLAINTEXT[2] = (uint8_t)miniIO_B1_adcH;
    769c:	4b4e      	ldr	r3, [pc, #312]	; (77d8 <application_udp_appcall+0x55c>)
				memmove(CIPHERTEXT, PLAINTEXT, 3);												   	// If no encryption compiled, then just copy over plain-text into [UDP] buffer
    769e:	6820      	ldr	r0, [r4, #0]
				PLAINTEXT[2] = (uint8_t)miniIO_B1_adcH;
    76a0:	781b      	ldrb	r3, [r3, #0]
    76a2:	708b      	strb	r3, [r1, #2]
				PLAINTEXT[3] = (uint8_t)miniIO_B1_adcL;
    76a4:	4b4d      	ldr	r3, [pc, #308]	; (77dc <application_udp_appcall+0x560>)
    76a6:	781b      	ldrb	r3, [r3, #0]
    76a8:	70cb      	strb	r3, [r1, #3]
				PLAINTEXT[4] = (uint8_t)miniIO_B_inputs;
    76aa:	4b4d      	ldr	r3, [pc, #308]	; (77e0 <application_udp_appcall+0x564>)
    76ac:	781b      	ldrb	r3, [r3, #0]
    76ae:	710b      	strb	r3, [r1, #4]
				memmove(CIPHERTEXT, PLAINTEXT, 3);												   	// If no encryption compiled, then just copy over plain-text into [UDP] buffer
    76b0:	2203      	movs	r2, #3
    76b2:	4b3d      	ldr	r3, [pc, #244]	; (77a8 <application_udp_appcall+0x52c>)
    76b4:	4798      	blx	r3
				uip_udp_send(5);
    76b6:	6820      	ldr	r0, [r4, #0]
    76b8:	4b3c      	ldr	r3, [pc, #240]	; (77ac <application_udp_appcall+0x530>)
    76ba:	2105      	movs	r1, #5
    76bc:	4798      	blx	r3
				xprintf("CardB Mini-IO packet send...\r\n");
    76be:	4849      	ldr	r0, [pc, #292]	; (77e4 <application_udp_appcall+0x568>)
    76c0:	e6cb      	b.n	745a <application_udp_appcall+0x1de>
				if ((!sentB) && (card_sampleindex == SAMPLE_BUFFER_SIZE)) {
    76c2:	f8df 8100 	ldr.w	r8, [pc, #256]	; 77c4 <application_udp_appcall+0x548>
    76c6:	f898 6000 	ldrb.w	r6, [r8]
    76ca:	2e00      	cmp	r6, #0
    76cc:	d15a      	bne.n	7784 <application_udp_appcall+0x508>
    76ce:	f8df 9140 	ldr.w	r9, [pc, #320]	; 7810 <application_udp_appcall+0x594>
    76d2:	f8d9 7000 	ldr.w	r7, [r9]
    76d6:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
    76da:	d153      	bne.n	7784 <application_udp_appcall+0x508>
					memmove(&PLAINTEXT[0], cardBch0_samplebuffer, SAMPLE_BUFFER_SIZE);
    76dc:	4c2c      	ldr	r4, [pc, #176]	; (7790 <application_udp_appcall+0x514>)
    76de:	4942      	ldr	r1, [pc, #264]	; (77e8 <application_udp_appcall+0x56c>)
    76e0:	f8df a130 	ldr.w	sl, [pc, #304]	; 7814 <application_udp_appcall+0x598>
    76e4:	463a      	mov	r2, r7
    76e6:	4620      	mov	r0, r4
    76e8:	47d0      	blx	sl
					memmove(&PLAINTEXT[SAMPLE_BUFFER_SIZE], cardBch1_samplebuffer, SAMPLE_BUFFER_SIZE);
    76ea:	463a      	mov	r2, r7
    76ec:	493f      	ldr	r1, [pc, #252]	; (77ec <application_udp_appcall+0x570>)
					memmove(CIPHERTEXT, PLAINTEXT, (SAMPLE_BUFFER_SIZE * 2) + 6);													// If no encryption compiled, then just copy over plain-text into [UDP] buffer
    76ee:	4f2a      	ldr	r7, [pc, #168]	; (7798 <application_udp_appcall+0x51c>)
					memmove(&PLAINTEXT[SAMPLE_BUFFER_SIZE], cardBch1_samplebuffer, SAMPLE_BUFFER_SIZE);
    76f0:	f504 6080 	add.w	r0, r4, #1024	; 0x400
    76f4:	47d0      	blx	sl
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 0] = cardBch2_samplebuffer;
    76f6:	4b3e      	ldr	r3, [pc, #248]	; (77f0 <application_udp_appcall+0x574>)
					memmove(CIPHERTEXT, PLAINTEXT, (SAMPLE_BUFFER_SIZE * 2) + 6);													// If no encryption compiled, then just copy over plain-text into [UDP] buffer
    76f8:	6838      	ldr	r0, [r7, #0]
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 0] = cardBch2_samplebuffer;
    76fa:	781b      	ldrb	r3, [r3, #0]
    76fc:	f884 3800 	strb.w	r3, [r4, #2048]	; 0x800
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 1] = cardBch3_samplebuffer;
    7700:	4b3c      	ldr	r3, [pc, #240]	; (77f4 <application_udp_appcall+0x578>)
    7702:	781b      	ldrb	r3, [r3, #0]
    7704:	f884 3801 	strb.w	r3, [r4, #2049]	; 0x801
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 2] = ID_IDENT_1;
    7708:	2337      	movs	r3, #55	; 0x37
    770a:	f884 3802 	strb.w	r3, [r4, #2050]	; 0x802
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 3] = ID_IDENT_2;
    770e:	239f      	movs	r3, #159	; 0x9f
    7710:	f884 3803 	strb.w	r3, [r4, #2051]	; 0x803
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 4] = ID_IDENT_3;
    7714:	231b      	movs	r3, #27
    7716:	f884 3804 	strb.w	r3, [r4, #2052]	; 0x804
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 5] = ID_IDENT_4;
    771a:	2361      	movs	r3, #97	; 0x61
					memmove(CIPHERTEXT, PLAINTEXT, (SAMPLE_BUFFER_SIZE * 2) + 6);													// If no encryption compiled, then just copy over plain-text into [UDP] buffer
    771c:	f640 0206 	movw	r2, #2054	; 0x806
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 5] = ID_IDENT_4;
    7720:	f884 3805 	strb.w	r3, [r4, #2053]	; 0x805
					memmove(CIPHERTEXT, PLAINTEXT, (SAMPLE_BUFFER_SIZE * 2) + 6);													// If no encryption compiled, then just copy over plain-text into [UDP] buffer
    7724:	4621      	mov	r1, r4
    7726:	4b20      	ldr	r3, [pc, #128]	; (77a8 <application_udp_appcall+0x52c>)
    7728:	4798      	blx	r3
					uip_udp_send((SAMPLE_BUFFER_SIZE * 2) + 6);
    772a:	4b20      	ldr	r3, [pc, #128]	; (77ac <application_udp_appcall+0x530>)
    772c:	6838      	ldr	r0, [r7, #0]
    772e:	f640 0106 	movw	r1, #2054	; 0x806
    7732:	4798      	blx	r3
					if (sentA) {
    7734:	4b30      	ldr	r3, [pc, #192]	; (77f8 <application_udp_appcall+0x57c>)
    7736:	781a      	ldrb	r2, [r3, #0]
    7738:	b122      	cbz	r2, 7744 <application_udp_appcall+0x4c8>
						sentA = 0;
    773a:	701e      	strb	r6, [r3, #0]
						card_sampleindex = 0;
    773c:	f8c9 6000 	str.w	r6, [r9]
					xprintf("CardB VibraTek packet send...\r\n");
    7740:	482e      	ldr	r0, [pc, #184]	; (77fc <application_udp_appcall+0x580>)
    7742:	e68a      	b.n	745a <application_udp_appcall+0x1de>
						sentB = 1;
    7744:	f888 5000 	strb.w	r5, [r8]
    7748:	e7fa      	b.n	7740 <application_udp_appcall+0x4c4>
		} else if (uip_conn->lport == htons(RING_MANAGEMENT_SOCKET)) {
    774a:	682b      	ldr	r3, [r5, #0]
    774c:	f640 70a3 	movw	r0, #4003	; 0xfa3
    7750:	889d      	ldrh	r5, [r3, #4]
    7752:	47a0      	blx	r4
    7754:	4285      	cmp	r5, r0
    7756:	d115      	bne.n	7784 <application_udp_appcall+0x508>
			if ((send_relearn_udp) && (((CONFIG *)&settings_buffer)->loop_basestation) && (!stormstate)) {
    7758:	4d29      	ldr	r5, [pc, #164]	; (7800 <application_udp_appcall+0x584>)
    775a:	782b      	ldrb	r3, [r5, #0]
    775c:	b193      	cbz	r3, 7784 <application_udp_appcall+0x508>
    775e:	4b29      	ldr	r3, [pc, #164]	; (7804 <application_udp_appcall+0x588>)
    7760:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
    7764:	b173      	cbz	r3, 7784 <application_udp_appcall+0x508>
    7766:	4b28      	ldr	r3, [pc, #160]	; (7808 <application_udp_appcall+0x58c>)
    7768:	781c      	ldrb	r4, [r3, #0]
    776a:	b95c      	cbnz	r4, 7784 <application_udp_appcall+0x508>
				PLAINTEXT[0] = 0;
    776c:	4b08      	ldr	r3, [pc, #32]	; (7790 <application_udp_appcall+0x514>)
    776e:	701c      	strb	r4, [r3, #0]
				memmove(CIPHERTEXT, PLAINTEXT, 1);
    7770:	4b09      	ldr	r3, [pc, #36]	; (7798 <application_udp_appcall+0x51c>)
    7772:	681a      	ldr	r2, [r3, #0]
    7774:	7014      	strb	r4, [r2, #0]
				uip_udp_send(1);
    7776:	6818      	ldr	r0, [r3, #0]
    7778:	4b0c      	ldr	r3, [pc, #48]	; (77ac <application_udp_appcall+0x530>)
    777a:	2101      	movs	r1, #1
    777c:	4798      	blx	r3
				send_relearn_udp = 0;
    777e:	702c      	strb	r4, [r5, #0]
				xprintf("Topology update packet send...\r\n");
    7780:	4822      	ldr	r0, [pc, #136]	; (780c <application_udp_appcall+0x590>)
    7782:	e66a      	b.n	745a <application_udp_appcall+0x1de>
    7784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7788:	20007dce 	.word	0x20007dce
    778c:	20007dcc 	.word	0x20007dcc
    7790:	200079cc 	.word	0x200079cc
    7794:	20008aa8 	.word	0x20008aa8
    7798:	20008ad8 	.word	0x20008ad8
    779c:	2000867b 	.word	0x2000867b
    77a0:	20008262 	.word	0x20008262
    77a4:	20007594 	.word	0x20007594
    77a8:	0000b351 	.word	0x0000b351
    77ac:	0000a355 	.word	0x0000a355
    77b0:	0000d902 	.word	0x0000d902
    77b4:	20008695 	.word	0x20008695
    77b8:	20007dcf 	.word	0x20007dcf
    77bc:	200079b8 	.word	0x200079b8
    77c0:	20007592 	.word	0x20007592
    77c4:	2000759f 	.word	0x2000759f
    77c8:	0000d921 	.word	0x0000d921
    77cc:	20008ab4 	.word	0x20008ab4
    77d0:	2000826a 	.word	0x2000826a
    77d4:	20007dcd 	.word	0x20007dcd
    77d8:	200075a8 	.word	0x200075a8
    77dc:	20008ab3 	.word	0x20008ab3
    77e0:	20008678 	.word	0x20008678
    77e4:	0000d941 	.word	0x0000d941
    77e8:	2000826c 	.word	0x2000826c
    77ec:	200075b4 	.word	0x200075b4
    77f0:	20007598 	.word	0x20007598
    77f4:	20007599 	.word	0x20007599
    77f8:	20008269 	.word	0x20008269
    77fc:	0000d960 	.word	0x0000d960
    7800:	20008679 	.word	0x20008679
    7804:	200081dc 	.word	0x200081dc
    7808:	20008ab0 	.word	0x20008ab0
    780c:	0000d980 	.word	0x0000d980
    7810:	20008a9c 	.word	0x20008a9c
    7814:	0000b33b 	.word	0x0000b33b

00007818 <main_loop>:
{
    7818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uptime = 0;
    781c:	4f94      	ldr	r7, [pc, #592]	; (7a70 <main_loop+0x258>)
	command_dataw[1] = 0x00;
    781e:	4e95      	ldr	r6, [pc, #596]	; (7a74 <main_loop+0x25c>)
	read_boardvalues();
    7820:	4b95      	ldr	r3, [pc, #596]	; (7a78 <main_loop+0x260>)
{
    7822:	b093      	sub	sp, #76	; 0x4c
	uptime = 0;
    7824:	2500      	movs	r5, #0
    7826:	603d      	str	r5, [r7, #0]
	command_dataw[1] = 0x00;
    7828:	7075      	strb	r5, [r6, #1]
	command_dataw[2] = 0x00;
    782a:	70b5      	strb	r5, [r6, #2]
	key_check = 0;
    782c:	462c      	mov	r4, r5
	read_boardvalues();
    782e:	4798      	blx	r3
	bpdu_arrived = 0;
    7830:	950d      	str	r5, [sp, #52]	; 0x34
	eth_check = 0;
    7832:	950c      	str	r5, [sp, #48]	; 0x30
    7834:	970e      	str	r7, [sp, #56]	; 0x38
		loopcount++;
    7836:	4a91      	ldr	r2, [pc, #580]	; (7a7c <main_loop+0x264>)
    7838:	6813      	ldr	r3, [r2, #0]
    783a:	3301      	adds	r3, #1
    783c:	6013      	str	r3, [r2, #0]
		if (eth_check == 500) {
    783e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7840:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    7844:	f040 8110 	bne.w	7a68 <main_loop+0x250>
				if (mac_async_read_len(&ETHERNET_MAC_0) > 0) {
    7848:	4f8d      	ldr	r7, [pc, #564]	; (7a80 <main_loop+0x268>)
    784a:	f04f 0a10 	mov.w	sl, #16
    784e:	4638      	mov	r0, r7
    7850:	4b8c      	ldr	r3, [pc, #560]	; (7a84 <main_loop+0x26c>)
    7852:	4798      	blx	r3
    7854:	2800      	cmp	r0, #0
    7856:	d04e      	beq.n	78f6 <main_loop+0xde>
					uip_len = mac_async_read(&ETHERNET_MAC_0, (uint8_t *)&uip_buf[0], sizeof(uip_buf));
    7858:	f8df 8250 	ldr.w	r8, [pc, #592]	; 7aac <main_loop+0x294>
    785c:	4b8a      	ldr	r3, [pc, #552]	; (7a88 <main_loop+0x270>)
    785e:	f240 62a6 	movw	r2, #1702	; 0x6a6
    7862:	4641      	mov	r1, r8
    7864:	4638      	mov	r0, r7
    7866:	4798      	blx	r3
    7868:	4b88      	ldr	r3, [pc, #544]	; (7a8c <main_loop+0x274>)
    786a:	8018      	strh	r0, [r3, #0]
				if ((uip_buf[0] == 0x01) && (uip_buf[1] == 0x80) && (uip_buf[2] == 0xC2) && (uip_buf[3] == 0x00) && (uip_buf[4] == 0x00) && (uip_buf[5] == 0x00) && (*((unsigned short int *)&(uip_buf[12])) == 0x01E0) &&
    786c:	f898 3000 	ldrb.w	r3, [r8]
    7870:	2b01      	cmp	r3, #1
    7872:	46c3      	mov	fp, r8
    7874:	d148      	bne.n	7908 <main_loop+0xf0>
    7876:	f898 3001 	ldrb.w	r3, [r8, #1]
    787a:	2b80      	cmp	r3, #128	; 0x80
    787c:	d144      	bne.n	7908 <main_loop+0xf0>
    787e:	f898 3002 	ldrb.w	r3, [r8, #2]
    7882:	2bc2      	cmp	r3, #194	; 0xc2
    7884:	d140      	bne.n	7908 <main_loop+0xf0>
    7886:	f898 3003 	ldrb.w	r3, [r8, #3]
    788a:	2b00      	cmp	r3, #0
    788c:	d13c      	bne.n	7908 <main_loop+0xf0>
    788e:	f898 3004 	ldrb.w	r3, [r8, #4]
    7892:	2b00      	cmp	r3, #0
    7894:	d138      	bne.n	7908 <main_loop+0xf0>
    7896:	f898 3005 	ldrb.w	r3, [r8, #5]
    789a:	2b00      	cmp	r3, #0
    789c:	d134      	bne.n	7908 <main_loop+0xf0>
    789e:	f8b8 300c 	ldrh.w	r3, [r8, #12]
    78a2:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
    78a6:	d12f      	bne.n	7908 <main_loop+0xf0>
				    (uip_buf[29] == mac_raw[0]) && (uip_buf[30] == mac_raw[1]) && (uip_buf[31] == mac_raw[2]) && (uip_buf[32] == mac_raw[3]) && (uip_buf[33] == mac_raw[4]) && (uip_buf[34] == mac_raw[5])) {
    78a8:	4b79      	ldr	r3, [pc, #484]	; (7a90 <main_loop+0x278>)
				if ((uip_buf[0] == 0x01) && (uip_buf[1] == 0x80) && (uip_buf[2] == 0xC2) && (uip_buf[3] == 0x00) && (uip_buf[4] == 0x00) && (uip_buf[5] == 0x00) && (*((unsigned short int *)&(uip_buf[12])) == 0x01E0) &&
    78aa:	f898 101d 	ldrb.w	r1, [r8, #29]
    78ae:	781a      	ldrb	r2, [r3, #0]
    78b0:	4291      	cmp	r1, r2
    78b2:	d129      	bne.n	7908 <main_loop+0xf0>
				    (uip_buf[29] == mac_raw[0]) && (uip_buf[30] == mac_raw[1]) && (uip_buf[31] == mac_raw[2]) && (uip_buf[32] == mac_raw[3]) && (uip_buf[33] == mac_raw[4]) && (uip_buf[34] == mac_raw[5])) {
    78b4:	f898 101e 	ldrb.w	r1, [r8, #30]
    78b8:	785a      	ldrb	r2, [r3, #1]
    78ba:	4291      	cmp	r1, r2
    78bc:	d124      	bne.n	7908 <main_loop+0xf0>
    78be:	f898 101f 	ldrb.w	r1, [r8, #31]
    78c2:	789a      	ldrb	r2, [r3, #2]
    78c4:	4291      	cmp	r1, r2
    78c6:	d11f      	bne.n	7908 <main_loop+0xf0>
    78c8:	f898 1020 	ldrb.w	r1, [r8, #32]
    78cc:	78da      	ldrb	r2, [r3, #3]
    78ce:	4291      	cmp	r1, r2
    78d0:	d11a      	bne.n	7908 <main_loop+0xf0>
    78d2:	f898 1021 	ldrb.w	r1, [r8, #33]	; 0x21
    78d6:	791a      	ldrb	r2, [r3, #4]
    78d8:	4291      	cmp	r1, r2
    78da:	d115      	bne.n	7908 <main_loop+0xf0>
    78dc:	f898 2022 	ldrb.w	r2, [r8, #34]	; 0x22
    78e0:	795b      	ldrb	r3, [r3, #5]
    78e2:	429a      	cmp	r2, r3
    78e4:	d110      	bne.n	7908 <main_loop+0xf0>
					if (((CONFIG *)&settings_buffer)->loop_basestation) {
    78e6:	4b6b      	ldr	r3, [pc, #428]	; (7a94 <main_loop+0x27c>)
    78e8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
						bpdu_arrived = 1;	
    78ec:	2b00      	cmp	r3, #0
    78ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    78f0:	bf18      	it	ne
    78f2:	2301      	movne	r3, #1
    78f4:	930d      	str	r3, [sp, #52]	; 0x34
			else if (!stormstate) {
    78f6:	4b68      	ldr	r3, [pc, #416]	; (7a98 <main_loop+0x280>)
    78f8:	781b      	ldrb	r3, [r3, #0]
    78fa:	2b00      	cmp	r3, #0
    78fc:	f000 80e8 	beq.w	7ad0 <main_loop+0x2b8>
			eth_check = 0;
    7900:	2300      	movs	r3, #0
    7902:	e0b3      	b.n	7a6c <main_loop+0x254>
		key_check = 0;
    7904:	4604      	mov	r4, r0
    7906:	e796      	b.n	7836 <main_loop+0x1e>
					if (ETH_BUF->type == htons(UIP_ETHTYPE_IP)) {
    7908:	f8bb 200c 	ldrh.w	r2, [fp, #12]
    790c:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 7acc <main_loop+0x2b4>
    7910:	920f      	str	r2, [sp, #60]	; 0x3c
    7912:	f44f 6000 	mov.w	r0, #2048	; 0x800
    7916:	47c8      	blx	r9
    7918:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    791a:	4282      	cmp	r2, r0
    791c:	d172      	bne.n	7a04 <main_loop+0x1ec>
						xprintf("reading IN <--- %d %x,%x,%x,%x,%x,%x %x,%x,%x,%x,%x,%x %x,%x\r\n", uip_len, uip_buf[0], uip_buf[1], uip_buf[2], uip_buf[3], uip_buf[4], uip_buf[5], uip_buf[6], uip_buf[7], uip_buf[8], uip_buf[9], uip_buf[10], uip_buf[11], uip_buf[12], uip_buf[13]);
    791e:	495b      	ldr	r1, [pc, #364]	; (7a8c <main_loop+0x274>)
    7920:	f898 000d 	ldrb.w	r0, [r8, #13]
    7924:	f898 2000 	ldrb.w	r2, [r8]
    7928:	8809      	ldrh	r1, [r1, #0]
    792a:	f898 3001 	ldrb.w	r3, [r8, #1]
    792e:	900b      	str	r0, [sp, #44]	; 0x2c
    7930:	f898 000c 	ldrb.w	r0, [r8, #12]
    7934:	900a      	str	r0, [sp, #40]	; 0x28
    7936:	f898 000b 	ldrb.w	r0, [r8, #11]
    793a:	9009      	str	r0, [sp, #36]	; 0x24
    793c:	f898 000a 	ldrb.w	r0, [r8, #10]
    7940:	9008      	str	r0, [sp, #32]
    7942:	f898 0009 	ldrb.w	r0, [r8, #9]
    7946:	9007      	str	r0, [sp, #28]
    7948:	f898 0008 	ldrb.w	r0, [r8, #8]
    794c:	9006      	str	r0, [sp, #24]
    794e:	f898 0007 	ldrb.w	r0, [r8, #7]
    7952:	9005      	str	r0, [sp, #20]
    7954:	f898 0006 	ldrb.w	r0, [r8, #6]
    7958:	9004      	str	r0, [sp, #16]
    795a:	f898 0005 	ldrb.w	r0, [r8, #5]
    795e:	9003      	str	r0, [sp, #12]
    7960:	f898 0004 	ldrb.w	r0, [r8, #4]
    7964:	9002      	str	r0, [sp, #8]
    7966:	f898 0003 	ldrb.w	r0, [r8, #3]
    796a:	9001      	str	r0, [sp, #4]
    796c:	f898 0002 	ldrb.w	r0, [r8, #2]
    7970:	9000      	str	r0, [sp, #0]
    7972:	f8df b14c 	ldr.w	fp, [pc, #332]	; 7ac0 <main_loop+0x2a8>
    7976:	4849      	ldr	r0, [pc, #292]	; (7a9c <main_loop+0x284>)
    7978:	47d8      	blx	fp
						uip_arp_ipin();
    797a:	4b49      	ldr	r3, [pc, #292]	; (7aa0 <main_loop+0x288>)
    797c:	4798      	blx	r3
						uip_input();
    797e:	4b49      	ldr	r3, [pc, #292]	; (7aa4 <main_loop+0x28c>)
    7980:	2001      	movs	r0, #1
    7982:	4798      	blx	r3
						if (uip_len > 0) {
    7984:	4b41      	ldr	r3, [pc, #260]	; (7a8c <main_loop+0x274>)
    7986:	881b      	ldrh	r3, [r3, #0]
    7988:	2b00      	cmp	r3, #0
    798a:	d033      	beq.n	79f4 <main_loop+0x1dc>
							uip_arp_out();
    798c:	4b46      	ldr	r3, [pc, #280]	; (7aa8 <main_loop+0x290>)
    798e:	4798      	blx	r3
							mac_async_write(&ETHERNET_MAC_0, (uint8_t *)&uip_buf[0], uip_len);
    7990:	4b3e      	ldr	r3, [pc, #248]	; (7a8c <main_loop+0x274>)
    7992:	4946      	ldr	r1, [pc, #280]	; (7aac <main_loop+0x294>)
    7994:	881a      	ldrh	r2, [r3, #0]
    7996:	4b46      	ldr	r3, [pc, #280]	; (7ab0 <main_loop+0x298>)
    7998:	4638      	mov	r0, r7
    799a:	4798      	blx	r3
							xprintf("writing OUT ---> %d %x,%x,%x,%x,%x,%x %x,%x,%x,%x,%x,%x %x,%x\r\n", uip_len, uip_buf[0], uip_buf[1], uip_buf[2], uip_buf[3], uip_buf[4], uip_buf[5], uip_buf[6], uip_buf[7], uip_buf[8], uip_buf[9], uip_buf[10], uip_buf[11], uip_buf[12], uip_buf[13]);
    799c:	493b      	ldr	r1, [pc, #236]	; (7a8c <main_loop+0x274>)
    799e:	f898 000d 	ldrb.w	r0, [r8, #13]
    79a2:	f898 3001 	ldrb.w	r3, [r8, #1]
    79a6:	f898 2000 	ldrb.w	r2, [r8]
    79aa:	8809      	ldrh	r1, [r1, #0]
    79ac:	900b      	str	r0, [sp, #44]	; 0x2c
    79ae:	f898 000c 	ldrb.w	r0, [r8, #12]
    79b2:	900a      	str	r0, [sp, #40]	; 0x28
    79b4:	f898 000b 	ldrb.w	r0, [r8, #11]
    79b8:	9009      	str	r0, [sp, #36]	; 0x24
    79ba:	f898 000a 	ldrb.w	r0, [r8, #10]
    79be:	9008      	str	r0, [sp, #32]
    79c0:	f898 0009 	ldrb.w	r0, [r8, #9]
    79c4:	9007      	str	r0, [sp, #28]
    79c6:	f898 0008 	ldrb.w	r0, [r8, #8]
    79ca:	9006      	str	r0, [sp, #24]
    79cc:	f898 0007 	ldrb.w	r0, [r8, #7]
    79d0:	9005      	str	r0, [sp, #20]
    79d2:	f898 0006 	ldrb.w	r0, [r8, #6]
    79d6:	9004      	str	r0, [sp, #16]
    79d8:	f898 0005 	ldrb.w	r0, [r8, #5]
    79dc:	9003      	str	r0, [sp, #12]
    79de:	f898 0004 	ldrb.w	r0, [r8, #4]
    79e2:	9002      	str	r0, [sp, #8]
    79e4:	f898 0003 	ldrb.w	r0, [r8, #3]
    79e8:	9001      	str	r0, [sp, #4]
    79ea:	f898 0002 	ldrb.w	r0, [r8, #2]
    79ee:	9000      	str	r0, [sp, #0]
    79f0:	4830      	ldr	r0, [pc, #192]	; (7ab4 <main_loop+0x29c>)
    79f2:	47d8      	blx	fp
			for (etherloop = 0; etherloop < 16; etherloop++) {
    79f4:	f1ba 0a01 	subs.w	sl, sl, #1
    79f8:	f47f af29 	bne.w	784e <main_loop+0x36>
				if (!broadcast_storm) {
    79fc:	b1a5      	cbz	r5, 7a28 <main_loop+0x210>
			eth_check = 0;
    79fe:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
    7a02:	e067      	b.n	7ad4 <main_loop+0x2bc>
					} else if (ETH_BUF->type == htons(UIP_ETHTYPE_ARP)) {
    7a04:	f640 0006 	movw	r0, #2054	; 0x806
    7a08:	f8bb 800c 	ldrh.w	r8, [fp, #12]
    7a0c:	47c8      	blx	r9
    7a0e:	4580      	cmp	r8, r0
    7a10:	d1f0      	bne.n	79f4 <main_loop+0x1dc>
						uip_arp_arpin();
    7a12:	4b29      	ldr	r3, [pc, #164]	; (7ab8 <main_loop+0x2a0>)
    7a14:	4798      	blx	r3
						if (uip_len > 0) {
    7a16:	4b1d      	ldr	r3, [pc, #116]	; (7a8c <main_loop+0x274>)
    7a18:	881a      	ldrh	r2, [r3, #0]
    7a1a:	2a00      	cmp	r2, #0
    7a1c:	d0ea      	beq.n	79f4 <main_loop+0x1dc>
							mac_async_write(&ETHERNET_MAC_0, (uint8_t *)&uip_buf[0], uip_len);
    7a1e:	4923      	ldr	r1, [pc, #140]	; (7aac <main_loop+0x294>)
    7a20:	4b23      	ldr	r3, [pc, #140]	; (7ab0 <main_loop+0x298>)
    7a22:	4638      	mov	r0, r7
    7a24:	4798      	blx	r3
    7a26:	e7e5      	b.n	79f4 <main_loop+0x1dc>
					xprintf("ETHERNET: [broadcast storm] !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n");
    7a28:	4824      	ldr	r0, [pc, #144]	; (7abc <main_loop+0x2a4>)
    7a2a:	4f25      	ldr	r7, [pc, #148]	; (7ac0 <main_loop+0x2a8>)
    7a2c:	47b8      	blx	r7
					if (((CONFIG *)&settings_buffer)->loop_basestation) {
    7a2e:	4b19      	ldr	r3, [pc, #100]	; (7a94 <main_loop+0x27c>)
    7a30:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
    7a34:	b12b      	cbz	r3, 7a42 <main_loop+0x22a>
						writeKSZreg(SPI_KSZ8794_PORT2CONTROL2, 0x00);
    7a36:	2022      	movs	r0, #34	; 0x22
    7a38:	4629      	mov	r1, r5
    7a3a:	4b22      	ldr	r3, [pc, #136]	; (7ac4 <main_loop+0x2ac>)
    7a3c:	4798      	blx	r3
						xprintf("ETHERNET: Shutting [OFF] flow...\r\n");
    7a3e:	4822      	ldr	r0, [pc, #136]	; (7ac8 <main_loop+0x2b0>)
    7a40:	47b8      	blx	r7
					stormstate = 1;
    7a42:	4b15      	ldr	r3, [pc, #84]	; (7a98 <main_loop+0x280>)
					while (mac_async_read_len(&ETHERNET_MAC_0) > 0) {
    7a44:	4d0e      	ldr	r5, [pc, #56]	; (7a80 <main_loop+0x268>)
    7a46:	4f0f      	ldr	r7, [pc, #60]	; (7a84 <main_loop+0x26c>)
						mac_async_read(&ETHERNET_MAC_0, (uint8_t *)&uip_buf[0], sizeof(uip_buf));
    7a48:	f8df 9060 	ldr.w	r9, [pc, #96]	; 7aac <main_loop+0x294>
					stormstate = 1;
    7a4c:	2201      	movs	r2, #1
    7a4e:	701a      	strb	r2, [r3, #0]
					while (mac_async_read_len(&ETHERNET_MAC_0) > 0) {
    7a50:	4628      	mov	r0, r5
    7a52:	47b8      	blx	r7
    7a54:	b908      	cbnz	r0, 7a5a <main_loop+0x242>
					broadcast_storm = 1;
    7a56:	2501      	movs	r5, #1
    7a58:	e6ed      	b.n	7836 <main_loop+0x1e>
						mac_async_read(&ETHERNET_MAC_0, (uint8_t *)&uip_buf[0], sizeof(uip_buf));
    7a5a:	f240 62a6 	movw	r2, #1702	; 0x6a6
    7a5e:	4649      	mov	r1, r9
    7a60:	4628      	mov	r0, r5
    7a62:	4b09      	ldr	r3, [pc, #36]	; (7a88 <main_loop+0x270>)
    7a64:	4798      	blx	r3
    7a66:	e7f3      	b.n	7a50 <main_loop+0x238>
			eth_check++;
    7a68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7a6a:	3301      	adds	r3, #1
			eth_check = 0;
    7a6c:	930c      	str	r3, [sp, #48]	; 0x30
    7a6e:	e031      	b.n	7ad4 <main_loop+0x2bc>
    7a70:	20008674 	.word	0x20008674
    7a74:	200079ca 	.word	0x200079ca
    7a78:	00000501 	.word	0x00000501
    7a7c:	200075a4 	.word	0x200075a4
    7a80:	20007548 	.word	0x20007548
    7a84:	00001641 	.word	0x00001641
    7a88:	0000160d 	.word	0x0000160d
    7a8c:	20008ac4 	.word	0x20008ac4
    7a90:	2000825c 	.word	0x2000825c
    7a94:	200081dc 	.word	0x200081dc
    7a98:	20008ab0 	.word	0x20008ab0
    7a9c:	0000da1a 	.word	0x0000da1a
    7aa0:	0000a4f1 	.word	0x0000a4f1
    7aa4:	00009761 	.word	0x00009761
    7aa8:	0000a611 	.word	0x0000a611
    7aac:	20008b96 	.word	0x20008b96
    7ab0:	000015d1 	.word	0x000015d1
    7ab4:	0000da59 	.word	0x0000da59
    7ab8:	0000a53d 	.word	0x0000a53d
    7abc:	0000da99 	.word	0x0000da99
    7ac0:	00000395 	.word	0x00000395
    7ac4:	0000b259 	.word	0x0000b259
    7ac8:	0000daed 	.word	0x0000daed
    7acc:	0000a34d 	.word	0x0000a34d
				broadcast_storm = 0;
    7ad0:	461d      	mov	r5, r3
			eth_check = 0;
    7ad2:	930c      	str	r3, [sp, #48]	; 0x30
		if (arp_check) {
    7ad4:	4ba0      	ldr	r3, [pc, #640]	; (7d58 <main_loop+0x540>)
    7ad6:	781a      	ldrb	r2, [r3, #0]
    7ad8:	b11a      	cbz	r2, 7ae2 <main_loop+0x2ca>
			arp_check = 0;
    7ada:	2200      	movs	r2, #0
    7adc:	701a      	strb	r2, [r3, #0]
			uip_arp_timer();
    7ade:	4b9f      	ldr	r3, [pc, #636]	; (7d5c <main_loop+0x544>)
    7ae0:	4798      	blx	r3
		if (refresh_gain) {
    7ae2:	4f9f      	ldr	r7, [pc, #636]	; (7d60 <main_loop+0x548>)
    7ae4:	f8df 831c 	ldr.w	r8, [pc, #796]	; 7e04 <main_loop+0x5ec>
    7ae8:	783b      	ldrb	r3, [r7, #0]
    7aea:	b33b      	cbz	r3, 7b3c <main_loop+0x324>
			if (cardA_type == CARD_VIBRATEK) {
    7aec:	f898 3000 	ldrb.w	r3, [r8]
    7af0:	2b01      	cmp	r3, #1
    7af2:	d10e      	bne.n	7b12 <main_loop+0x2fa>
				xprintf("Write ADC gain settings for VibraTek CardA\r\n");
    7af4:	489b      	ldr	r0, [pc, #620]	; (7d64 <main_loop+0x54c>)
    7af6:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 7db0 <main_loop+0x598>
    7afa:	47d0      	blx	sl
				if ((err = I2C_setGAIN(PC27_CARDA_I2C_SDA,  PC28_CARDA_I2C_CLK, ((CONFIG *)&settings_buffer)->gain_cardA)) < 0) {
    7afc:	4b9a      	ldr	r3, [pc, #616]	; (7d68 <main_loop+0x550>)
    7afe:	215c      	movs	r1, #92	; 0x5c
    7b00:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
    7b04:	4b99      	ldr	r3, [pc, #612]	; (7d6c <main_loop+0x554>)
    7b06:	205b      	movs	r0, #91	; 0x5b
    7b08:	4798      	blx	r3
    7b0a:	1e01      	subs	r1, r0, #0
    7b0c:	da01      	bge.n	7b12 <main_loop+0x2fa>
					xprintf("Could NOT write to the DAC Gain controller on CARDA:I2C [%i]\r\n", err);
    7b0e:	4898      	ldr	r0, [pc, #608]	; (7d70 <main_loop+0x558>)
    7b10:	47d0      	blx	sl
			if (cardB_type == CARD_VIBRATEK) {
    7b12:	4b98      	ldr	r3, [pc, #608]	; (7d74 <main_loop+0x55c>)
    7b14:	781b      	ldrb	r3, [r3, #0]
    7b16:	2b01      	cmp	r3, #1
    7b18:	d10e      	bne.n	7b38 <main_loop+0x320>
				xprintf("Write ADC gain settings for VibraTek CardB\r\n");
    7b1a:	4897      	ldr	r0, [pc, #604]	; (7d78 <main_loop+0x560>)
    7b1c:	f8df a290 	ldr.w	sl, [pc, #656]	; 7db0 <main_loop+0x598>
    7b20:	47d0      	blx	sl
				if (( err = I2C_setGAIN(PB24_CARDB_I2C_SDA,  PB25_CARDB_I2C_CLK, ((CONFIG *)&settings_buffer)->gain_cardB)) < 0) {
    7b22:	4b91      	ldr	r3, [pc, #580]	; (7d68 <main_loop+0x550>)
    7b24:	2139      	movs	r1, #57	; 0x39
    7b26:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
    7b2a:	4b90      	ldr	r3, [pc, #576]	; (7d6c <main_loop+0x554>)
    7b2c:	2038      	movs	r0, #56	; 0x38
    7b2e:	4798      	blx	r3
    7b30:	1e01      	subs	r1, r0, #0
    7b32:	da01      	bge.n	7b38 <main_loop+0x320>
					xprintf("Could NOT write to the DAC Gain controller on CARDB:I2C [%i]\r\n", err);
    7b34:	4891      	ldr	r0, [pc, #580]	; (7d7c <main_loop+0x564>)
    7b36:	47d0      	blx	sl
			refresh_gain = 0;
    7b38:	2300      	movs	r3, #0
    7b3a:	703b      	strb	r3, [r7, #0]
    7b3c:	4f90      	ldr	r7, [pc, #576]	; (7d80 <main_loop+0x568>)
		bash_spi_transfer(command_dataw, command_datar, 2);
    7b3e:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 7e08 <main_loop+0x5f0>
    7b42:	f04f 0b20 	mov.w	fp, #32
		command_dataw[0] = 0x60 + (ADC_CH0 << 2);
    7b46:	2360      	movs	r3, #96	; 0x60
    7b48:	f8c7 b094 	str.w	fp, [r7, #148]	; 0x94
    7b4c:	7033      	strb	r3, [r6, #0]
		bash_spi_transfer(command_dataw, command_datar, 2);
    7b4e:	47c8      	blx	r9
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7b50:	f8c7 b098 	str.w	fp, [r7, #152]	; 0x98
		if (((cardA_type == CARD_VIBRATEK) || (cardA_type == CARD_VIBRAPOINT)) && (card_sampleindex < SAMPLE_BUFFER_SIZE)) {
    7b54:	f898 3000 	ldrb.w	r3, [r8]
    7b58:	2b01      	cmp	r3, #1
    7b5a:	d001      	beq.n	7b60 <main_loop+0x348>
    7b5c:	2b04      	cmp	r3, #4
    7b5e:	d108      	bne.n	7b72 <main_loop+0x35a>
    7b60:	4b88      	ldr	r3, [pc, #544]	; (7d84 <main_loop+0x56c>)
    7b62:	681b      	ldr	r3, [r3, #0]
    7b64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
			cardAch0_samplebuffer[card_sampleindex] = command_datar[1];
    7b68:	bf3f      	itttt	cc
    7b6a:	4a87      	ldrcc	r2, [pc, #540]	; (7d88 <main_loop+0x570>)
    7b6c:	7851      	ldrbcc	r1, [r2, #1]
    7b6e:	4a87      	ldrcc	r2, [pc, #540]	; (7d8c <main_loop+0x574>)
    7b70:	54d1      	strbcc	r1, [r2, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7b72:	f04f 0b20 	mov.w	fp, #32
		command_dataw[0] = 0x60 + (ADC_CH1 << 2);
    7b76:	2364      	movs	r3, #100	; 0x64
    7b78:	f8c7 b094 	str.w	fp, [r7, #148]	; 0x94
    7b7c:	7033      	strb	r3, [r6, #0]
		bash_spi_transfer(command_dataw, command_datar, 2);
    7b7e:	47c8      	blx	r9
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7b80:	f8c7 b098 	str.w	fp, [r7, #152]	; 0x98
		if (((cardA_type == CARD_VIBRATEK) || (cardA_type == CARD_VIBRAPOINT)) && (card_sampleindex < SAMPLE_BUFFER_SIZE)) {
    7b84:	f898 3000 	ldrb.w	r3, [r8]
    7b88:	2b01      	cmp	r3, #1
    7b8a:	d001      	beq.n	7b90 <main_loop+0x378>
    7b8c:	2b04      	cmp	r3, #4
    7b8e:	d126      	bne.n	7bde <main_loop+0x3c6>
    7b90:	4a7c      	ldr	r2, [pc, #496]	; (7d84 <main_loop+0x56c>)
    7b92:	6812      	ldr	r2, [r2, #0]
    7b94:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
			cardAch1_samplebuffer[card_sampleindex] = command_datar[1];
    7b98:	bf3f      	itttt	cc
    7b9a:	497b      	ldrcc	r1, [pc, #492]	; (7d88 <main_loop+0x570>)
    7b9c:	7848      	ldrbcc	r0, [r1, #1]
    7b9e:	497c      	ldrcc	r1, [pc, #496]	; (7d90 <main_loop+0x578>)
    7ba0:	5488      	strbcc	r0, [r1, r2]
		if (((cardA_type == CARD_VIBRATEK) || (cardA_type == CARD_VIBRAPOINT)) && (!card_sampleindex)) {
    7ba2:	2b01      	cmp	r3, #1
    7ba4:	d001      	beq.n	7baa <main_loop+0x392>
    7ba6:	2b04      	cmp	r3, #4
    7ba8:	d119      	bne.n	7bde <main_loop+0x3c6>
    7baa:	b9c2      	cbnz	r2, 7bde <main_loop+0x3c6>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7bac:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 7d80 <main_loop+0x568>
			cardAch2_samplebuffer = command_datar[1];
    7bb0:	4f75      	ldr	r7, [pc, #468]	; (7d88 <main_loop+0x570>)
    7bb2:	f04f 0b20 	mov.w	fp, #32
			command_dataw[0] = 0x60 + (ADC_CH2 << 2);
    7bb6:	2368      	movs	r3, #104	; 0x68
    7bb8:	f8ca b094 	str.w	fp, [sl, #148]	; 0x94
    7bbc:	7033      	strb	r3, [r6, #0]
			bash_spi_transfer(command_dataw, command_datar, 2);
    7bbe:	47c8      	blx	r9
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7bc0:	f8ca b098 	str.w	fp, [sl, #152]	; 0x98
			cardAch2_samplebuffer = command_datar[1];
    7bc4:	4a73      	ldr	r2, [pc, #460]	; (7d94 <main_loop+0x57c>)
    7bc6:	7879      	ldrb	r1, [r7, #1]
    7bc8:	7011      	strb	r1, [r2, #0]
			command_dataw[0] = 0x60 + (ADC_CH3 << 2);
    7bca:	226c      	movs	r2, #108	; 0x6c
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7bcc:	f8ca b094 	str.w	fp, [sl, #148]	; 0x94
    7bd0:	7032      	strb	r2, [r6, #0]
			bash_spi_transfer(command_dataw, command_datar, 2);
    7bd2:	47c8      	blx	r9
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7bd4:	f8ca b098 	str.w	fp, [sl, #152]	; 0x98
			cardAch3_samplebuffer = command_datar[1];
    7bd8:	4b6f      	ldr	r3, [pc, #444]	; (7d98 <main_loop+0x580>)
    7bda:	787a      	ldrb	r2, [r7, #1]
    7bdc:	701a      	strb	r2, [r3, #0]
		} else if (cardA_type == CARD_MINI_IO)  {
    7bde:	f898 3000 	ldrb.w	r3, [r8]
    7be2:	2b02      	cmp	r3, #2
    7be4:	d12f      	bne.n	7c46 <main_loop+0x42e>
			if (miniA_chan) {
    7be6:	4b6d      	ldr	r3, [pc, #436]	; (7d9c <main_loop+0x584>)
    7be8:	f8df a220 	ldr.w	sl, [pc, #544]	; 7e0c <main_loop+0x5f4>
    7bec:	781b      	ldrb	r3, [r3, #0]
    7bee:	4f6c      	ldr	r7, [pc, #432]	; (7da0 <main_loop+0x588>)
    7bf0:	2b00      	cmp	r3, #0
    7bf2:	f000 819a 	beq.w	7f2a <main_loop+0x712>
				if ((err = I2C_readMONITOREDINPUT(PC27_CARDA_I2C_SDA,  PC28_CARDA_I2C_CLK, &miniIO_A1_adcH,  &miniIO_A1_adcL))) {
    7bf6:	215c      	movs	r1, #92	; 0x5c
    7bf8:	4b6a      	ldr	r3, [pc, #424]	; (7da4 <main_loop+0x58c>)
    7bfa:	4a6b      	ldr	r2, [pc, #428]	; (7da8 <main_loop+0x590>)
    7bfc:	205b      	movs	r0, #91	; 0x5b
    7bfe:	47d0      	blx	sl
    7c00:	4601      	mov	r1, r0
    7c02:	b110      	cbz	r0, 7c0a <main_loop+0x3f2>
					xprintf("Could NOT read from the Mini-IO ADC on CARDA:I2C [%i]\r\n", err);
    7c04:	4869      	ldr	r0, [pc, #420]	; (7dac <main_loop+0x594>)
    7c06:	4b6a      	ldr	r3, [pc, #424]	; (7db0 <main_loop+0x598>)
    7c08:	4798      	blx	r3
				if ((err = I2C_configMONITOREDINPUTS(PC27_CARDA_I2C_SDA,  PC28_CARDA_I2C_CLK, 0))) {
    7c0a:	2200      	movs	r2, #0
				if ((err = I2C_configMONITOREDINPUTS(PC27_CARDA_I2C_SDA,  PC28_CARDA_I2C_CLK, 1))) {
    7c0c:	215c      	movs	r1, #92	; 0x5c
    7c0e:	205b      	movs	r0, #91	; 0x5b
    7c10:	47b8      	blx	r7
    7c12:	4601      	mov	r1, r0
    7c14:	b110      	cbz	r0, 7c1c <main_loop+0x404>
					xprintf("Could NOT write to the Mini-IO ADC controller on CARDA:I2C [%i]\r\n", err);
    7c16:	4867      	ldr	r0, [pc, #412]	; (7db4 <main_loop+0x59c>)
    7c18:	4b65      	ldr	r3, [pc, #404]	; (7db0 <main_loop+0x598>)
    7c1a:	4798      	blx	r3
			if ((err = I2C_setEXPANDER(PC27_CARDA_I2C_SDA,  PC28_CARDA_I2C_CLK, miniIO_A_relay))) {
    7c1c:	4b66      	ldr	r3, [pc, #408]	; (7db8 <main_loop+0x5a0>)
    7c1e:	215c      	movs	r1, #92	; 0x5c
    7c20:	781a      	ldrb	r2, [r3, #0]
    7c22:	4b66      	ldr	r3, [pc, #408]	; (7dbc <main_loop+0x5a4>)
    7c24:	205b      	movs	r0, #91	; 0x5b
    7c26:	4798      	blx	r3
    7c28:	4601      	mov	r1, r0
    7c2a:	b110      	cbz	r0, 7c32 <main_loop+0x41a>
				xprintf("Could NOT write to the Mini-IO EXPANDER on CARDA:I2C [%i]\r\n", err);
    7c2c:	4864      	ldr	r0, [pc, #400]	; (7dc0 <main_loop+0x5a8>)
    7c2e:	4b60      	ldr	r3, [pc, #384]	; (7db0 <main_loop+0x598>)
    7c30:	4798      	blx	r3
			if ((err = I2C_readEXPANDER(PC27_CARDA_I2C_SDA,  PC28_CARDA_I2C_CLK, &miniIO_A_inputs))) {
    7c32:	215c      	movs	r1, #92	; 0x5c
    7c34:	4a63      	ldr	r2, [pc, #396]	; (7dc4 <main_loop+0x5ac>)
    7c36:	4b64      	ldr	r3, [pc, #400]	; (7dc8 <main_loop+0x5b0>)
    7c38:	205b      	movs	r0, #91	; 0x5b
    7c3a:	4798      	blx	r3
    7c3c:	4601      	mov	r1, r0
    7c3e:	b110      	cbz	r0, 7c46 <main_loop+0x42e>
				xprintf("Could NOT read from the Mini-IO EXPANDER on CARDA:I2C [%i]\r\n", err);
    7c40:	4862      	ldr	r0, [pc, #392]	; (7dcc <main_loop+0x5b4>)
    7c42:	4b5b      	ldr	r3, [pc, #364]	; (7db0 <main_loop+0x598>)
    7c44:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7c46:	f8df a138 	ldr.w	sl, [pc, #312]	; 7d80 <main_loop+0x568>
		bash_spi_transfer(command_dataw, command_datar, 2);
    7c4a:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 7e08 <main_loop+0x5f0>
    7c4e:	2740      	movs	r7, #64	; 0x40
    7c50:	f8ca 7094 	str.w	r7, [sl, #148]	; 0x94
		command_dataw[0] = 0x60 + (ADC_CH0 << 2);
    7c54:	2360      	movs	r3, #96	; 0x60
    7c56:	7033      	strb	r3, [r6, #0]
		bash_spi_transfer(command_dataw, command_datar, 2);
    7c58:	47c8      	blx	r9
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7c5a:	f8ca 7098 	str.w	r7, [sl, #152]	; 0x98
		if (((cardB_type == CARD_VIBRATEK) || (cardB_type == CARD_VIBRAPOINT)) && (card_sampleindex < SAMPLE_BUFFER_SIZE)) {
    7c5e:	4f45      	ldr	r7, [pc, #276]	; (7d74 <main_loop+0x55c>)
    7c60:	783b      	ldrb	r3, [r7, #0]
    7c62:	2b01      	cmp	r3, #1
    7c64:	d001      	beq.n	7c6a <main_loop+0x452>
    7c66:	2b04      	cmp	r3, #4
    7c68:	d108      	bne.n	7c7c <main_loop+0x464>
    7c6a:	4b46      	ldr	r3, [pc, #280]	; (7d84 <main_loop+0x56c>)
    7c6c:	681b      	ldr	r3, [r3, #0]
    7c6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
			cardBch0_samplebuffer[card_sampleindex] = command_datar[1];
    7c72:	bf3f      	itttt	cc
    7c74:	4a44      	ldrcc	r2, [pc, #272]	; (7d88 <main_loop+0x570>)
    7c76:	7851      	ldrbcc	r1, [r2, #1]
    7c78:	4a55      	ldrcc	r2, [pc, #340]	; (7dd0 <main_loop+0x5b8>)
    7c7a:	54d1      	strbcc	r1, [r2, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7c7c:	f04f 0b40 	mov.w	fp, #64	; 0x40
    7c80:	f8ca b094 	str.w	fp, [sl, #148]	; 0x94
		command_dataw[0] = 0x60 + (ADC_CH1 << 2);
    7c84:	2264      	movs	r2, #100	; 0x64
    7c86:	7032      	strb	r2, [r6, #0]
		bash_spi_transfer(command_dataw, command_datar, 2);
    7c88:	47c8      	blx	r9
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7c8a:	f8ca b098 	str.w	fp, [sl, #152]	; 0x98
		if (((cardB_type == CARD_VIBRATEK) || (cardB_type == CARD_VIBRAPOINT)) && (card_sampleindex < SAMPLE_BUFFER_SIZE)) {
    7c8e:	783b      	ldrb	r3, [r7, #0]
    7c90:	2b01      	cmp	r3, #1
    7c92:	d001      	beq.n	7c98 <main_loop+0x480>
    7c94:	2b04      	cmp	r3, #4
    7c96:	d126      	bne.n	7ce6 <main_loop+0x4ce>
    7c98:	4a3a      	ldr	r2, [pc, #232]	; (7d84 <main_loop+0x56c>)
    7c9a:	6812      	ldr	r2, [r2, #0]
    7c9c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
			cardBch1_samplebuffer[card_sampleindex] = command_datar[1];
    7ca0:	bf3f      	itttt	cc
    7ca2:	4939      	ldrcc	r1, [pc, #228]	; (7d88 <main_loop+0x570>)
    7ca4:	7848      	ldrbcc	r0, [r1, #1]
    7ca6:	494b      	ldrcc	r1, [pc, #300]	; (7dd4 <main_loop+0x5bc>)
    7ca8:	5488      	strbcc	r0, [r1, r2]
		if (((cardB_type == CARD_VIBRATEK) || (cardB_type == CARD_VIBRAPOINT)) && (!card_sampleindex)) {
    7caa:	2b01      	cmp	r3, #1
    7cac:	d001      	beq.n	7cb2 <main_loop+0x49a>
    7cae:	2b04      	cmp	r3, #4
    7cb0:	d119      	bne.n	7ce6 <main_loop+0x4ce>
    7cb2:	b9c2      	cbnz	r2, 7ce6 <main_loop+0x4ce>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7cb4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 7d80 <main_loop+0x568>
			cardBch2_samplebuffer = command_datar[1];
    7cb8:	4f33      	ldr	r7, [pc, #204]	; (7d88 <main_loop+0x570>)
    7cba:	f04f 0b40 	mov.w	fp, #64	; 0x40
			command_dataw[0] = 0x60 + (ADC_CH2 << 2);
    7cbe:	2368      	movs	r3, #104	; 0x68
    7cc0:	f8ca b094 	str.w	fp, [sl, #148]	; 0x94
    7cc4:	7033      	strb	r3, [r6, #0]
			bash_spi_transfer(command_dataw, command_datar, 2);
    7cc6:	47c8      	blx	r9
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7cc8:	f8ca b098 	str.w	fp, [sl, #152]	; 0x98
			cardBch2_samplebuffer = command_datar[1];
    7ccc:	4a42      	ldr	r2, [pc, #264]	; (7dd8 <main_loop+0x5c0>)
    7cce:	7879      	ldrb	r1, [r7, #1]
    7cd0:	7011      	strb	r1, [r2, #0]
			command_dataw[0] = 0x60 + (ADC_CH3 << 2);
    7cd2:	226c      	movs	r2, #108	; 0x6c
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7cd4:	f8ca b094 	str.w	fp, [sl, #148]	; 0x94
    7cd8:	7032      	strb	r2, [r6, #0]
			bash_spi_transfer(command_dataw, command_datar, 2);
    7cda:	47c8      	blx	r9
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7cdc:	f8ca b098 	str.w	fp, [sl, #152]	; 0x98
			cardBch3_samplebuffer = command_datar[1];
    7ce0:	4b3e      	ldr	r3, [pc, #248]	; (7ddc <main_loop+0x5c4>)
    7ce2:	787a      	ldrb	r2, [r7, #1]
    7ce4:	701a      	strb	r2, [r3, #0]
		if (cardB_type == CARD_MAXI_IO)  {
    7ce6:	4f23      	ldr	r7, [pc, #140]	; (7d74 <main_loop+0x55c>)
		} else if (cardB_type == CARD_MINI_IO)  {
    7ce8:	783b      	ldrb	r3, [r7, #0]
    7cea:	2b02      	cmp	r3, #2
    7cec:	f040 8090 	bne.w	7e10 <main_loop+0x5f8>
			if (miniB_chan) {
    7cf0:	4b3b      	ldr	r3, [pc, #236]	; (7de0 <main_loop+0x5c8>)
    7cf2:	f8df b118 	ldr.w	fp, [pc, #280]	; 7e0c <main_loop+0x5f4>
    7cf6:	781b      	ldrb	r3, [r3, #0]
    7cf8:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 7da0 <main_loop+0x588>
    7cfc:	2b00      	cmp	r3, #0
    7cfe:	f000 8120 	beq.w	7f42 <main_loop+0x72a>
				if ((err = I2C_readMONITOREDINPUT(PB24_CARDB_I2C_SDA,  PB25_CARDB_I2C_CLK, &miniIO_B1_adcH,  &miniIO_B1_adcL))) {
    7d02:	2139      	movs	r1, #57	; 0x39
    7d04:	4b37      	ldr	r3, [pc, #220]	; (7de4 <main_loop+0x5cc>)
    7d06:	4a38      	ldr	r2, [pc, #224]	; (7de8 <main_loop+0x5d0>)
    7d08:	2038      	movs	r0, #56	; 0x38
    7d0a:	47d8      	blx	fp
    7d0c:	4601      	mov	r1, r0
    7d0e:	b110      	cbz	r0, 7d16 <main_loop+0x4fe>
					xprintf("Could NOT read from the Mini-IO ADC on CARDB:I2C [%i]\r\n", err);
    7d10:	4836      	ldr	r0, [pc, #216]	; (7dec <main_loop+0x5d4>)
    7d12:	4b27      	ldr	r3, [pc, #156]	; (7db0 <main_loop+0x598>)
    7d14:	4798      	blx	r3
				if ((err = I2C_configMONITOREDINPUTS(PB24_CARDB_I2C_SDA,  PB25_CARDB_I2C_CLK, 0))) {
    7d16:	2200      	movs	r2, #0
				if ((err = I2C_configMONITOREDINPUTS(PB24_CARDB_I2C_SDA,  PB25_CARDB_I2C_CLK, 1))) {
    7d18:	2139      	movs	r1, #57	; 0x39
    7d1a:	2038      	movs	r0, #56	; 0x38
    7d1c:	47d0      	blx	sl
    7d1e:	4601      	mov	r1, r0
    7d20:	b110      	cbz	r0, 7d28 <main_loop+0x510>
					xprintf("Could NOT write to the Mini-IO ADC controller on CARDB:I2C [%i]\r\n", err);
    7d22:	4833      	ldr	r0, [pc, #204]	; (7df0 <main_loop+0x5d8>)
    7d24:	4b22      	ldr	r3, [pc, #136]	; (7db0 <main_loop+0x598>)
    7d26:	4798      	blx	r3
			if ((err = I2C_setEXPANDER(PB24_CARDB_I2C_SDA,  PB25_CARDB_I2C_CLK, miniIO_B_relay))) {
    7d28:	4b32      	ldr	r3, [pc, #200]	; (7df4 <main_loop+0x5dc>)
    7d2a:	2139      	movs	r1, #57	; 0x39
    7d2c:	781a      	ldrb	r2, [r3, #0]
    7d2e:	4b23      	ldr	r3, [pc, #140]	; (7dbc <main_loop+0x5a4>)
    7d30:	2038      	movs	r0, #56	; 0x38
    7d32:	4798      	blx	r3
    7d34:	4601      	mov	r1, r0
    7d36:	b110      	cbz	r0, 7d3e <main_loop+0x526>
				xprintf("Could NOT write to the Mini-IO EXPANDER on CARDB:I2C [%i]\r\n", err);
    7d38:	482f      	ldr	r0, [pc, #188]	; (7df8 <main_loop+0x5e0>)
    7d3a:	4b1d      	ldr	r3, [pc, #116]	; (7db0 <main_loop+0x598>)
    7d3c:	4798      	blx	r3
			if ((err = I2C_readEXPANDER(PB24_CARDB_I2C_SDA,  PB25_CARDB_I2C_CLK, &miniIO_B_inputs))) {
    7d3e:	2139      	movs	r1, #57	; 0x39
    7d40:	4a2e      	ldr	r2, [pc, #184]	; (7dfc <main_loop+0x5e4>)
    7d42:	4b21      	ldr	r3, [pc, #132]	; (7dc8 <main_loop+0x5b0>)
    7d44:	2038      	movs	r0, #56	; 0x38
    7d46:	4798      	blx	r3
    7d48:	4601      	mov	r1, r0
    7d4a:	2800      	cmp	r0, #0
    7d4c:	d060      	beq.n	7e10 <main_loop+0x5f8>
				xprintf("Could NOT read from the Mini-IO EXPANDER on CARDB:I2C [%i]\r\n", err);
    7d4e:	482c      	ldr	r0, [pc, #176]	; (7e00 <main_loop+0x5e8>)
    7d50:	4b17      	ldr	r3, [pc, #92]	; (7db0 <main_loop+0x598>)
    7d52:	4798      	blx	r3
    7d54:	e05c      	b.n	7e10 <main_loop+0x5f8>
    7d56:	bf00      	nop
    7d58:	2000826b 	.word	0x2000826b
    7d5c:	0000a4a1 	.word	0x0000a4a1
    7d60:	20008ab1 	.word	0x20008ab1
    7d64:	0000db10 	.word	0x0000db10
    7d68:	200081dc 	.word	0x200081dc
    7d6c:	00005281 	.word	0x00005281
    7d70:	0000c269 	.word	0x0000c269
    7d74:	20008ab4 	.word	0x20008ab4
    7d78:	0000db3d 	.word	0x0000db3d
    7d7c:	0000c40f 	.word	0x0000c40f
    7d80:	41008000 	.word	0x41008000
    7d84:	20008a9c 	.word	0x20008a9c
    7d88:	2000759d 	.word	0x2000759d
    7d8c:	20008695 	.word	0x20008695
    7d90:	20007dcf 	.word	0x20007dcf
    7d94:	200079b8 	.word	0x200079b8
    7d98:	20007592 	.word	0x20007592
    7d9c:	20007597 	.word	0x20007597
    7da0:	0000447d 	.word	0x0000447d
    7da4:	20008262 	.word	0x20008262
    7da8:	2000867b 	.word	0x2000867b
    7dac:	0000db6a 	.word	0x0000db6a
    7db0:	00000395 	.word	0x00000395
    7db4:	0000dba2 	.word	0x0000dba2
    7db8:	20008264 	.word	0x20008264
    7dbc:	00004d95 	.word	0x00004d95
    7dc0:	0000dbe4 	.word	0x0000dbe4
    7dc4:	20007594 	.word	0x20007594
    7dc8:	00004fc9 	.word	0x00004fc9
    7dcc:	0000dc20 	.word	0x0000dc20
    7dd0:	2000826c 	.word	0x2000826c
    7dd4:	200075b4 	.word	0x200075b4
    7dd8:	20007598 	.word	0x20007598
    7ddc:	20007599 	.word	0x20007599
    7de0:	2000867a 	.word	0x2000867a
    7de4:	20008ab3 	.word	0x20008ab3
    7de8:	200075a8 	.word	0x200075a8
    7dec:	0000dc5d 	.word	0x0000dc5d
    7df0:	0000dc95 	.word	0x0000dc95
    7df4:	200081cf 	.word	0x200081cf
    7df8:	0000dcd7 	.word	0x0000dcd7
    7dfc:	20008678 	.word	0x20008678
    7e00:	0000dd13 	.word	0x0000dd13
    7e04:	20007dce 	.word	0x20007dce
    7e08:	000070a9 	.word	0x000070a9
    7e0c:	00004635 	.word	0x00004635
		if ((cardA_type == CARD_VIBRATEK) || (cardB_type == CARD_VIBRATEK) || (cardA_type == CARD_VIBRAPOINT) || (cardB_type == CARD_VIBRAPOINT)) {
    7e10:	f898 2000 	ldrb.w	r2, [r8]
    7e14:	2a01      	cmp	r2, #1
    7e16:	d006      	beq.n	7e26 <main_loop+0x60e>
    7e18:	783b      	ldrb	r3, [r7, #0]
    7e1a:	2b01      	cmp	r3, #1
    7e1c:	d003      	beq.n	7e26 <main_loop+0x60e>
    7e1e:	2a04      	cmp	r2, #4
    7e20:	d001      	beq.n	7e26 <main_loop+0x60e>
    7e22:	2b04      	cmp	r3, #4
    7e24:	d106      	bne.n	7e34 <main_loop+0x61c>
			card_sampleindex++;
    7e26:	4a89      	ldr	r2, [pc, #548]	; (804c <main_loop+0x834>)
    7e28:	6813      	ldr	r3, [r2, #0]
    7e2a:	3301      	adds	r3, #1
			if ((card_sampleindex == SAMPLE_BUFFER_SIZE) && (readenvironment == 1)) {
    7e2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
			card_sampleindex++;
    7e30:	6013      	str	r3, [r2, #0]
			if ((card_sampleindex == SAMPLE_BUFFER_SIZE) && (readenvironment == 1)) {
    7e32:	d10a      	bne.n	7e4a <main_loop+0x632>
    7e34:	4b86      	ldr	r3, [pc, #536]	; (8050 <main_loop+0x838>)
    7e36:	781b      	ldrb	r3, [r3, #0]
    7e38:	2b01      	cmp	r3, #1
    7e3a:	d106      	bne.n	7e4a <main_loop+0x632>
				readenvironment = 2;
    7e3c:	4b84      	ldr	r3, [pc, #528]	; (8050 <main_loop+0x838>)
    7e3e:	2202      	movs	r2, #2
    7e40:	701a      	strb	r2, [r3, #0]
				read_boardvalues();
    7e42:	4b84      	ldr	r3, [pc, #528]	; (8054 <main_loop+0x83c>)
    7e44:	4798      	blx	r3
				udp_stack_check();
    7e46:	4b84      	ldr	r3, [pc, #528]	; (8058 <main_loop+0x840>)
    7e48:	4798      	blx	r3
		if (ring_timer) {
    7e4a:	f8df a28c 	ldr.w	sl, [pc, #652]	; 80d8 <main_loop+0x8c0>
    7e4e:	f89a 3000 	ldrb.w	r3, [sl]
    7e52:	b1cb      	cbz	r3, 7e88 <main_loop+0x670>
			if (ring_check(bpdu_arrived, &stormstate, &ring)) {
    7e54:	4a81      	ldr	r2, [pc, #516]	; (805c <main_loop+0x844>)
    7e56:	4982      	ldr	r1, [pc, #520]	; (8060 <main_loop+0x848>)
    7e58:	980d      	ldr	r0, [sp, #52]	; 0x34
    7e5a:	4b82      	ldr	r3, [pc, #520]	; (8064 <main_loop+0x84c>)
    7e5c:	4798      	blx	r3
    7e5e:	b110      	cbz	r0, 7e66 <main_loop+0x64e>
				send_relearn_udp = 1;
    7e60:	4b81      	ldr	r3, [pc, #516]	; (8068 <main_loop+0x850>)
    7e62:	2201      	movs	r2, #1
    7e64:	701a      	strb	r2, [r3, #0]
			if (((CONFIG *)&settings_buffer)->loop_basestation) {
    7e66:	4b81      	ldr	r3, [pc, #516]	; (806c <main_loop+0x854>)
    7e68:	4a81      	ldr	r2, [pc, #516]	; (8070 <main_loop+0x858>)
    7e6a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
    7e6e:	930d      	str	r3, [sp, #52]	; 0x34
			ring_timer = 0;
    7e70:	2100      	movs	r1, #0
    7e72:	f88a 1000 	strb.w	r1, [sl]
			if (((CONFIG *)&settings_buffer)->loop_basestation) {
    7e76:	2b00      	cmp	r3, #0
    7e78:	d06f      	beq.n	7f5a <main_loop+0x742>
				ring_broken = (ring) ? RING_BROKEN : RING_CLOSED;
    7e7a:	4b78      	ldr	r3, [pc, #480]	; (805c <main_loop+0x844>)
			bpdu_arrived = 0;
    7e7c:	910d      	str	r1, [sp, #52]	; 0x34
				ring_broken = (ring) ? RING_BROKEN : RING_CLOSED;
    7e7e:	781b      	ldrb	r3, [r3, #0]
    7e80:	1a5b      	subs	r3, r3, r1
    7e82:	bf18      	it	ne
    7e84:	2301      	movne	r3, #1
    7e86:	7013      	strb	r3, [r2, #0]
		key_check++;
    7e88:	3401      	adds	r4, #1
		if (key_check < 3000) {
    7e8a:	f640 33b7 	movw	r3, #2999	; 0xbb7
    7e8e:	429c      	cmp	r4, r3
    7e90:	f77f acd1 	ble.w	7836 <main_loop+0x1e>
		if (io_read((struct io_descriptor *const)io, (uint8_t *const)&ch, 1)) {
    7e94:	4b77      	ldr	r3, [pc, #476]	; (8074 <main_loop+0x85c>)
    7e96:	2201      	movs	r2, #1
    7e98:	6818      	ldr	r0, [r3, #0]
    7e9a:	4b77      	ldr	r3, [pc, #476]	; (8078 <main_loop+0x860>)
    7e9c:	f10d 0147 	add.w	r1, sp, #71	; 0x47
    7ea0:	4798      	blx	r3
    7ea2:	2800      	cmp	r0, #0
    7ea4:	f43f ad2e 	beq.w	7904 <main_loop+0xec>
			key = (unsigned char)ch;
    7ea8:	f89d a047 	ldrb.w	sl, [sp, #71]	; 0x47
    7eac:	4c73      	ldr	r4, [pc, #460]	; (807c <main_loop+0x864>)
			switch (key) {
    7eae:	f1aa 0342 	sub.w	r3, sl, #66	; 0x42
    7eb2:	2b36      	cmp	r3, #54	; 0x36
    7eb4:	f200 8558 	bhi.w	8968 <main_loop+0x1150>
    7eb8:	e8df f013 	tbh	[pc, r3, lsl #1]
    7ebc:	055600ad 	.word	0x055600ad
    7ec0:	0556005f 	.word	0x0556005f
    7ec4:	05560556 	.word	0x05560556
    7ec8:	027c0556 	.word	0x027c0556
    7ecc:	05560556 	.word	0x05560556
    7ed0:	03080110 	.word	0x03080110
    7ed4:	05560556 	.word	0x05560556
    7ed8:	055600bd 	.word	0x055600bd
    7edc:	02e10052 	.word	0x02e10052
    7ee0:	05560556 	.word	0x05560556
    7ee4:	05560556 	.word	0x05560556
    7ee8:	0556009c 	.word	0x0556009c
    7eec:	05560556 	.word	0x05560556
    7ef0:	05560556 	.word	0x05560556
    7ef4:	05560556 	.word	0x05560556
    7ef8:	05560556 	.word	0x05560556
    7efc:	055600ad 	.word	0x055600ad
    7f00:	0556005f 	.word	0x0556005f
    7f04:	05560556 	.word	0x05560556
    7f08:	027c0556 	.word	0x027c0556
    7f0c:	05560556 	.word	0x05560556
    7f10:	03080110 	.word	0x03080110
    7f14:	05560556 	.word	0x05560556
    7f18:	055600bd 	.word	0x055600bd
    7f1c:	02e10052 	.word	0x02e10052
    7f20:	05560556 	.word	0x05560556
    7f24:	05560556 	.word	0x05560556
    7f28:	009c      	.short	0x009c
				if ((err = I2C_readMONITOREDINPUT(PC27_CARDA_I2C_SDA,  PC28_CARDA_I2C_CLK, &miniIO_A0_adcH,  &miniIO_A0_adcL))) {
    7f2a:	215c      	movs	r1, #92	; 0x5c
    7f2c:	4b54      	ldr	r3, [pc, #336]	; (8080 <main_loop+0x868>)
    7f2e:	4a55      	ldr	r2, [pc, #340]	; (8084 <main_loop+0x86c>)
    7f30:	205b      	movs	r0, #91	; 0x5b
    7f32:	47d0      	blx	sl
    7f34:	4601      	mov	r1, r0
    7f36:	b110      	cbz	r0, 7f3e <main_loop+0x726>
					xprintf("Could NOT read from the Mini-IO ADC on CARDA:I2C [%i]\r\n", err);
    7f38:	4853      	ldr	r0, [pc, #332]	; (8088 <main_loop+0x870>)
    7f3a:	4b50      	ldr	r3, [pc, #320]	; (807c <main_loop+0x864>)
    7f3c:	4798      	blx	r3
				if ((err = I2C_configMONITOREDINPUTS(PC27_CARDA_I2C_SDA,  PC28_CARDA_I2C_CLK, 1))) {
    7f3e:	2201      	movs	r2, #1
    7f40:	e664      	b.n	7c0c <main_loop+0x3f4>
				if ((err = I2C_readMONITOREDINPUT(PB24_CARDB_I2C_SDA,  PB25_CARDB_I2C_CLK, &miniIO_B0_adcH,  &miniIO_B0_adcL))) {
    7f42:	2139      	movs	r1, #57	; 0x39
    7f44:	4b51      	ldr	r3, [pc, #324]	; (808c <main_loop+0x874>)
    7f46:	4a52      	ldr	r2, [pc, #328]	; (8090 <main_loop+0x878>)
    7f48:	2038      	movs	r0, #56	; 0x38
    7f4a:	47d8      	blx	fp
    7f4c:	4601      	mov	r1, r0
    7f4e:	b110      	cbz	r0, 7f56 <main_loop+0x73e>
					xprintf("Could NOT read from the Mini-IO ADC on CARDB:I2C [%i]\r\n", err);
    7f50:	4850      	ldr	r0, [pc, #320]	; (8094 <main_loop+0x87c>)
    7f52:	4b4a      	ldr	r3, [pc, #296]	; (807c <main_loop+0x864>)
    7f54:	4798      	blx	r3
				if ((err = I2C_configMONITOREDINPUTS(PB24_CARDB_I2C_SDA,  PB25_CARDB_I2C_CLK, 1))) {
    7f56:	2201      	movs	r2, #1
    7f58:	e6de      	b.n	7d18 <main_loop+0x500>
				ring_broken = RING_NOTCONFIGURED;
    7f5a:	2302      	movs	r3, #2
    7f5c:	7013      	strb	r3, [r2, #0]
    7f5e:	e793      	b.n	7e88 <main_loop+0x670>
				xprintf("\r\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n");
    7f60:	484d      	ldr	r0, [pc, #308]	; (8098 <main_loop+0x880>)
    7f62:	47a0      	blx	r4
				xprintf("<CLI DEBUG> [REBOOT] command\r\n");
    7f64:	484d      	ldr	r0, [pc, #308]	; (809c <main_loop+0x884>)
    7f66:	47a0      	blx	r4
				xprintf(". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n\r\n");
    7f68:	484d      	ldr	r0, [pc, #308]	; (80a0 <main_loop+0x888>)
				xprintf("\r\r\rRebooting...\r\n");
    7f6a:	47a0      	blx	r4
				delay_ms(250);
    7f6c:	4b4d      	ldr	r3, [pc, #308]	; (80a4 <main_loop+0x88c>)
    7f6e:	20fa      	movs	r0, #250	; 0xfa
    7f70:	4798      	blx	r3
				_reset_mcu();
    7f72:	4b4d      	ldr	r3, [pc, #308]	; (80a8 <main_loop+0x890>)
    7f74:	4798      	blx	r3
		key_check = 0;
    7f76:	2400      	movs	r4, #0
				break;
    7f78:	e45d      	b.n	7836 <main_loop+0x1e>
				xprintf("\r\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n");
    7f7a:	4847      	ldr	r0, [pc, #284]	; (8098 <main_loop+0x880>)
				((CONFIG *)&settings_buffer)->pattern1 = CONFIG_IDENTIFIER1;
    7f7c:	4f3b      	ldr	r7, [pc, #236]	; (806c <main_loop+0x854>)
				xprintf("\r\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n");
    7f7e:	47a0      	blx	r4
				xprintf("<CLI DEBUG> [CONFIGURATION DEFAULT] command\r\n");
    7f80:	484a      	ldr	r0, [pc, #296]	; (80ac <main_loop+0x894>)
    7f82:	47a0      	blx	r4
				((CONFIG *)&settings_buffer)->pattern1 = CONFIG_IDENTIFIER1;
    7f84:	2376      	movs	r3, #118	; 0x76
    7f86:	703b      	strb	r3, [r7, #0]
    7f88:	2336      	movs	r3, #54	; 0x36
    7f8a:	707b      	strb	r3, [r7, #1]
    7f8c:	2345      	movs	r3, #69	; 0x45
    7f8e:	70bb      	strb	r3, [r7, #2]
    7f90:	f06f 0301 	mvn.w	r3, #1
    7f94:	70fb      	strb	r3, [r7, #3]
				((CONFIG *)&settings_buffer)->pattern2 = CONFIG_IDENTIFIER2;
    7f96:	f06f 0343 	mvn.w	r3, #67	; 0x43
    7f9a:	713b      	strb	r3, [r7, #4]
    7f9c:	f06f 0315 	mvn.w	r3, #21
    7fa0:	717b      	strb	r3, [r7, #5]
    7fa2:	237d      	movs	r3, #125	; 0x7d
    7fa4:	71bb      	strb	r3, [r7, #6]
    7fa6:	f06f 036c 	mvn.w	r3, #108	; 0x6c
				strncpy((char *__restrict)(((CONFIG *)&settings_buffer)->name), "MULTISENSE NEEDS CONFIGURING...", sizeof(((CONFIG *)&settings_buffer)->name));
    7faa:	2221      	movs	r2, #33	; 0x21
    7fac:	4940      	ldr	r1, [pc, #256]	; (80b0 <main_loop+0x898>)
				((CONFIG *)&settings_buffer)->pattern2 = CONFIG_IDENTIFIER2;
    7fae:	71fb      	strb	r3, [r7, #7]
				strncpy((char *__restrict)(((CONFIG *)&settings_buffer)->name), "MULTISENSE NEEDS CONFIGURING...", sizeof(((CONFIG *)&settings_buffer)->name));
    7fb0:	f107 0008 	add.w	r0, r7, #8
    7fb4:	4b3f      	ldr	r3, [pc, #252]	; (80b4 <main_loop+0x89c>)
    7fb6:	4798      	blx	r3
				((CONFIG *)&settings_buffer)->pattern1 = CONFIG_IDENTIFIER1;
    7fb8:	f04f 0900 	mov.w	r9, #0
				((CONFIG *)&settings_buffer)->gain_cardA = 0xFF;
    7fbc:	23ff      	movs	r3, #255	; 0xff
    7fbe:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
				((CONFIG *)&settings_buffer)->gain_cardB = 0xFF;
    7fc2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				xprintf("MultiSense [configuration FORMATTED]\r\n");
    7fc6:	483c      	ldr	r0, [pc, #240]	; (80b8 <main_loop+0x8a0>)
				((CONFIG *)&settings_buffer)->ID = 0x00000000;
    7fc8:	f887 902c 	strb.w	r9, [r7, #44]	; 0x2c
    7fcc:	f887 902d 	strb.w	r9, [r7, #45]	; 0x2d
    7fd0:	f887 902e 	strb.w	r9, [r7, #46]	; 0x2e
    7fd4:	f887 902f 	strb.w	r9, [r7, #47]	; 0x2f
				((CONFIG *)&settings_buffer)->loop_basestation = 0;
    7fd8:	f887 902b 	strb.w	r9, [r7, #43]	; 0x2b
				xprintf("MultiSense [configuration FORMATTED]\r\n");
    7fdc:	47a0      	blx	r4
				if (EEprom_settings(settings_buffer, SETTING_STRUCTURE_SIZE, 1) != ERR_NONE) {
    7fde:	2201      	movs	r2, #1
    7fe0:	2180      	movs	r1, #128	; 0x80
    7fe2:	4638      	mov	r0, r7
    7fe4:	4b35      	ldr	r3, [pc, #212]	; (80bc <main_loop+0x8a4>)
    7fe6:	4798      	blx	r3
    7fe8:	b110      	cbz	r0, 7ff0 <main_loop+0x7d8>
					xprintf("MultiSense [configuration ERROR WRITING]\r\n");
    7fea:	4835      	ldr	r0, [pc, #212]	; (80c0 <main_loop+0x8a8>)
				xprintf("S         [SPEED MAINLOOP] command\r\n\r\n");
    7fec:	47a0      	blx	r4
    7fee:	e243      	b.n	8478 <main_loop+0xc60>
					xprintf("MultiSense [configuration WRITTEN]\r\n");
    7ff0:	4834      	ldr	r0, [pc, #208]	; (80c4 <main_loop+0x8ac>)
    7ff2:	e7fb      	b.n	7fec <main_loop+0x7d4>
				xprintf("\r\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n");
    7ff4:	4828      	ldr	r0, [pc, #160]	; (8098 <main_loop+0x880>)
    7ff6:	47a0      	blx	r4
				xprintf("<CLI DEBUG> [ID RESET] command\r\n", key);
    7ff8:	4833      	ldr	r0, [pc, #204]	; (80c8 <main_loop+0x8b0>)
    7ffa:	4651      	mov	r1, sl
    7ffc:	47a0      	blx	r4
				((CONFIG *)&settings_buffer)->ID = 0x00000000;
    7ffe:	481b      	ldr	r0, [pc, #108]	; (806c <main_loop+0x854>)
    8000:	2300      	movs	r3, #0
    8002:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
    8006:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    800a:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
    800e:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
				if (EEprom_settings(settings_buffer, SETTING_STRUCTURE_SIZE, 1) != ERR_NONE) {
    8012:	2201      	movs	r2, #1
    8014:	e007      	b.n	8026 <main_loop+0x80e>
				xprintf("\r\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n");
    8016:	4820      	ldr	r0, [pc, #128]	; (8098 <main_loop+0x880>)
    8018:	47a0      	blx	r4
				xprintf("<CLI DEBUG> [BASESTATION] command\r\n");
    801a:	482c      	ldr	r0, [pc, #176]	; (80cc <main_loop+0x8b4>)
    801c:	47a0      	blx	r4
				((CONFIG *)&settings_buffer)->loop_basestation = 1;
    801e:	4813      	ldr	r0, [pc, #76]	; (806c <main_loop+0x854>)
    8020:	2201      	movs	r2, #1
    8022:	f880 202b 	strb.w	r2, [r0, #43]	; 0x2b
				if (EEprom_settings(settings_buffer, SETTING_STRUCTURE_SIZE, 1) != ERR_NONE) {
    8026:	2180      	movs	r1, #128	; 0x80
    8028:	4b24      	ldr	r3, [pc, #144]	; (80bc <main_loop+0x8a4>)
    802a:	4798      	blx	r3
    802c:	b160      	cbz	r0, 8048 <main_loop+0x830>
					xprintf("MultiSense [configuration ERROR WRITING]\r\n");
    802e:	4824      	ldr	r0, [pc, #144]	; (80c0 <main_loop+0x8a8>)
					xprintf("MultiSense [configuration WRITTEN]\r\n");
    8030:	47a0      	blx	r4
				xprintf("\r\r\rRebooting...\r\n");
    8032:	4827      	ldr	r0, [pc, #156]	; (80d0 <main_loop+0x8b8>)
    8034:	e799      	b.n	7f6a <main_loop+0x752>
				xprintf("\r\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n");
    8036:	4818      	ldr	r0, [pc, #96]	; (8098 <main_loop+0x880>)
    8038:	47a0      	blx	r4
				xprintf("<CLI DEBUG> [PASS THROUGH] command\r\n");
    803a:	4826      	ldr	r0, [pc, #152]	; (80d4 <main_loop+0x8bc>)
    803c:	47a0      	blx	r4
				((CONFIG *)&settings_buffer)->loop_basestation = 0;
    803e:	480b      	ldr	r0, [pc, #44]	; (806c <main_loop+0x854>)
    8040:	2300      	movs	r3, #0
    8042:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
    8046:	e7e4      	b.n	8012 <main_loop+0x7fa>
					xprintf("MultiSense [configuration WRITTEN]\r\n");
    8048:	481e      	ldr	r0, [pc, #120]	; (80c4 <main_loop+0x8ac>)
    804a:	e7f1      	b.n	8030 <main_loop+0x818>
    804c:	20008a9c 	.word	0x20008a9c
    8050:	2000866c 	.word	0x2000866c
    8054:	00000501 	.word	0x00000501
    8058:	00007019 	.word	0x00007019
    805c:	20008aaa 	.word	0x20008aaa
    8060:	20008ab0 	.word	0x20008ab0
    8064:	000093b1 	.word	0x000093b1
    8068:	20008679 	.word	0x20008679
    806c:	200081dc 	.word	0x200081dc
    8070:	2000866d 	.word	0x2000866d
    8074:	200081d0 	.word	0x200081d0
    8078:	00001549 	.word	0x00001549
    807c:	00000395 	.word	0x00000395
    8080:	20008aa8 	.word	0x20008aa8
    8084:	20007dcc 	.word	0x20007dcc
    8088:	0000db6a 	.word	0x0000db6a
    808c:	20007dcd 	.word	0x20007dcd
    8090:	2000826a 	.word	0x2000826a
    8094:	0000dc5d 	.word	0x0000dc5d
    8098:	0000dd50 	.word	0x0000dd50
    809c:	0000dd9c 	.word	0x0000dd9c
    80a0:	0000ddbb 	.word	0x0000ddbb
    80a4:	00001251 	.word	0x00001251
    80a8:	0000232d 	.word	0x0000232d
    80ac:	0000de07 	.word	0x0000de07
    80b0:	0000d784 	.word	0x0000d784
    80b4:	0000b3fd 	.word	0x0000b3fd
    80b8:	0000d7a4 	.word	0x0000d7a4
    80bc:	0000b1b9 	.word	0x0000b1b9
    80c0:	0000d7cb 	.word	0x0000d7cb
    80c4:	0000d7f6 	.word	0x0000d7f6
    80c8:	0000de35 	.word	0x0000de35
    80cc:	0000de68 	.word	0x0000de68
    80d0:	0000de56 	.word	0x0000de56
    80d4:	0000de8c 	.word	0x0000de8c
    80d8:	2000867d 	.word	0x2000867d
				xprintf("\r\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .");
    80dc:	4880      	ldr	r0, [pc, #512]	; (82e0 <main_loop+0xac8>)
				xprintf("<CLI DEBUG> ID               = %d", ((CONFIG *)&settings_buffer)->ID);
    80de:	f8df a2c4 	ldr.w	sl, [pc, #708]	; 83a4 <main_loop+0xb8c>
				xprintf("\r\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .");
    80e2:	47a0      	blx	r4
				xprintf("\r\n");
    80e4:	487f      	ldr	r0, [pc, #508]	; (82e4 <main_loop+0xacc>)
    80e6:	47a0      	blx	r4
				xprintf("<CLI DEBUG> [LIVE BOARD PRINT] command");
    80e8:	487f      	ldr	r0, [pc, #508]	; (82e8 <main_loop+0xad0>)
    80ea:	47a0      	blx	r4
				xprintf("\r\n");
    80ec:	487d      	ldr	r0, [pc, #500]	; (82e4 <main_loop+0xacc>)
    80ee:	47a0      	blx	r4
				xprintf("<CLI DEBUG> ID               = %d", ((CONFIG *)&settings_buffer)->ID);
    80f0:	f8da 102c 	ldr.w	r1, [sl, #44]	; 0x2c
    80f4:	487d      	ldr	r0, [pc, #500]	; (82ec <main_loop+0xad4>)
    80f6:	47a0      	blx	r4
				xprintf("\r\n");
    80f8:	487a      	ldr	r0, [pc, #488]	; (82e4 <main_loop+0xacc>)
    80fa:	47a0      	blx	r4
				xprintf("<CLI DEBUG> Name             = %s", ((CONFIG *)&settings_buffer)->name);
    80fc:	f10a 0108 	add.w	r1, sl, #8
    8100:	487b      	ldr	r0, [pc, #492]	; (82f0 <main_loop+0xad8>)
    8102:	47a0      	blx	r4
				xprintf("\r\r\r\r\r\n");
    8104:	487b      	ldr	r0, [pc, #492]	; (82f4 <main_loop+0xadc>)
    8106:	47a0      	blx	r4
				xprintf("<CLI DEBUG> gainA            = %d", ((CONFIG *)&settings_buffer)->gain_cardA);
    8108:	f89a 1029 	ldrb.w	r1, [sl, #41]	; 0x29
    810c:	487a      	ldr	r0, [pc, #488]	; (82f8 <main_loop+0xae0>)
    810e:	47a0      	blx	r4
				xprintf("\r\n");
    8110:	4874      	ldr	r0, [pc, #464]	; (82e4 <main_loop+0xacc>)
    8112:	47a0      	blx	r4
				xprintf("<CLI DEBUG> gainB            = %d", ((CONFIG *)&settings_buffer)->gain_cardB);
    8114:	f89a 102a 	ldrb.w	r1, [sl, #42]	; 0x2a
    8118:	4878      	ldr	r0, [pc, #480]	; (82fc <main_loop+0xae4>)
    811a:	47a0      	blx	r4
				xprintf("\r\n");
    811c:	4871      	ldr	r0, [pc, #452]	; (82e4 <main_loop+0xacc>)
    811e:	47a0      	blx	r4
				xprintf("<CLI DEBUG> Mode             = %s", (((CONFIG *)&settings_buffer)->loop_basestation) ? "BASESTATION" : "PASS-THROUGH");
    8120:	4a77      	ldr	r2, [pc, #476]	; (8300 <main_loop+0xae8>)
    8122:	4b78      	ldr	r3, [pc, #480]	; (8304 <main_loop+0xaec>)
    8124:	f89a 102b 	ldrb.w	r1, [sl, #43]	; 0x2b
    8128:	4877      	ldr	r0, [pc, #476]	; (8308 <main_loop+0xaf0>)
				if ((readdata_tempmoisture[1] == 0xFF) && (readdata_tempmoisture[0] == 0xFF)) {
    812a:	f8df a27c 	ldr.w	sl, [pc, #636]	; 83a8 <main_loop+0xb90>
				xprintf("<CLI DEBUG> Mode             = %s", (((CONFIG *)&settings_buffer)->loop_basestation) ? "BASESTATION" : "PASS-THROUGH");
    812e:	2900      	cmp	r1, #0
    8130:	bf0c      	ite	eq
    8132:	4611      	moveq	r1, r2
    8134:	4619      	movne	r1, r3
    8136:	47a0      	blx	r4
				xprintf("\r\r\r\r\r\n");
    8138:	486e      	ldr	r0, [pc, #440]	; (82f4 <main_loop+0xadc>)
    813a:	47a0      	blx	r4
				xprintf("<CLI DEBUG> Water1           = %d", (int)readdata_water1);
    813c:	4b73      	ldr	r3, [pc, #460]	; (830c <main_loop+0xaf4>)
    813e:	4874      	ldr	r0, [pc, #464]	; (8310 <main_loop+0xaf8>)
    8140:	7819      	ldrb	r1, [r3, #0]
    8142:	47a0      	blx	r4
				xprintf("\r\n");
    8144:	4867      	ldr	r0, [pc, #412]	; (82e4 <main_loop+0xacc>)
    8146:	47a0      	blx	r4
				xprintf("<CLI DEBUG> Water2           = %d", (int)readdata_water2);
    8148:	4b72      	ldr	r3, [pc, #456]	; (8314 <main_loop+0xafc>)
    814a:	4873      	ldr	r0, [pc, #460]	; (8318 <main_loop+0xb00>)
    814c:	7819      	ldrb	r1, [r3, #0]
    814e:	47a0      	blx	r4
				xprintf("\r\n");
    8150:	4864      	ldr	r0, [pc, #400]	; (82e4 <main_loop+0xacc>)
    8152:	47a0      	blx	r4
				xprintf("<CLI DEBUG> HV               = %d", (int)highvoltage);
    8154:	4b71      	ldr	r3, [pc, #452]	; (831c <main_loop+0xb04>)
    8156:	4872      	ldr	r0, [pc, #456]	; (8320 <main_loop+0xb08>)
    8158:	7819      	ldrb	r1, [r3, #0]
    815a:	47a0      	blx	r4
				xprintf("\r\n");
    815c:	4861      	ldr	r0, [pc, #388]	; (82e4 <main_loop+0xacc>)
    815e:	47a0      	blx	r4
				if ((readdata_tempmoisture[1] == 0xFF) && (readdata_tempmoisture[0] == 0xFF)) {
    8160:	f89a 1001 	ldrb.w	r1, [sl, #1]
    8164:	29ff      	cmp	r1, #255	; 0xff
    8166:	f040 8084 	bne.w	8272 <main_loop+0xa5a>
    816a:	f89a 3000 	ldrb.w	r3, [sl]
    816e:	2bff      	cmp	r3, #255	; 0xff
    8170:	d17f      	bne.n	8272 <main_loop+0xa5a>
					xprintf("<CLI DEBUG> Temp             = ERROR");
    8172:	486c      	ldr	r0, [pc, #432]	; (8324 <main_loop+0xb0c>)
    8174:	47a0      	blx	r4
				xprintf("\r\n");
    8176:	485b      	ldr	r0, [pc, #364]	; (82e4 <main_loop+0xacc>)
    8178:	47a0      	blx	r4
				if ((readdata_tempmoisture[3] == 0xFF) && (readdata_tempmoisture[2] == 0xFF)) {
    817a:	f89a 1003 	ldrb.w	r1, [sl, #3]
    817e:	29ff      	cmp	r1, #255	; 0xff
    8180:	f040 808f 	bne.w	82a2 <main_loop+0xa8a>
    8184:	f89a 3002 	ldrb.w	r3, [sl, #2]
    8188:	2bff      	cmp	r3, #255	; 0xff
    818a:	f040 808a 	bne.w	82a2 <main_loop+0xa8a>
					xprintf("<CLI DEBUG> Humidity         = ERROR");
    818e:	4866      	ldr	r0, [pc, #408]	; (8328 <main_loop+0xb10>)
    8190:	47a0      	blx	r4
				xprintf("\r\n");
    8192:	4854      	ldr	r0, [pc, #336]	; (82e4 <main_loop+0xacc>)
				xprintf("<CLI DEBUG> Port1            = %s", (link_port1) ? "LINK OK" : "LINK DOWN");
    8194:	f8df b214 	ldr.w	fp, [pc, #532]	; 83ac <main_loop+0xb94>
    8198:	f8df a214 	ldr.w	sl, [pc, #532]	; 83b0 <main_loop+0xb98>
				xprintf("\r\n");
    819c:	47a0      	blx	r4
				xprintf("<CLI DEBUG> Tamper           = %s", (tamper) ? "UP" : "DOWN");
    819e:	4b63      	ldr	r3, [pc, #396]	; (832c <main_loop+0xb14>)
    81a0:	4a63      	ldr	r2, [pc, #396]	; (8330 <main_loop+0xb18>)
    81a2:	7819      	ldrb	r1, [r3, #0]
    81a4:	4b63      	ldr	r3, [pc, #396]	; (8334 <main_loop+0xb1c>)
    81a6:	4864      	ldr	r0, [pc, #400]	; (8338 <main_loop+0xb20>)
    81a8:	2900      	cmp	r1, #0
    81aa:	bf0c      	ite	eq
    81ac:	4611      	moveq	r1, r2
    81ae:	4619      	movne	r1, r3
    81b0:	47a0      	blx	r4
				xprintf("\r\r\r\r\n");
    81b2:	4862      	ldr	r0, [pc, #392]	; (833c <main_loop+0xb24>)
    81b4:	47a0      	blx	r4
				xprintf("<CLI DEBUG> Port1            = %s", (link_port1) ? "LINK OK" : "LINK DOWN");
    81b6:	4b62      	ldr	r3, [pc, #392]	; (8340 <main_loop+0xb28>)
    81b8:	4862      	ldr	r0, [pc, #392]	; (8344 <main_loop+0xb2c>)
    81ba:	7819      	ldrb	r1, [r3, #0]
    81bc:	2900      	cmp	r1, #0
    81be:	bf0c      	ite	eq
    81c0:	4659      	moveq	r1, fp
    81c2:	4651      	movne	r1, sl
    81c4:	47a0      	blx	r4
				xprintf("\r\r\r\r\n");
    81c6:	485d      	ldr	r0, [pc, #372]	; (833c <main_loop+0xb24>)
    81c8:	47a0      	blx	r4
				xprintf("<CLI DEBUG> Port2            = %s", (link_port2) ? "LINK OK" : "LINK DOWN");
    81ca:	4b5f      	ldr	r3, [pc, #380]	; (8348 <main_loop+0xb30>)
    81cc:	485f      	ldr	r0, [pc, #380]	; (834c <main_loop+0xb34>)
    81ce:	7819      	ldrb	r1, [r3, #0]
    81d0:	2900      	cmp	r1, #0
    81d2:	bf0c      	ite	eq
    81d4:	4659      	moveq	r1, fp
    81d6:	4651      	movne	r1, sl
    81d8:	47a0      	blx	r4
				xprintf("\r\r\r\r\n");
    81da:	4858      	ldr	r0, [pc, #352]	; (833c <main_loop+0xb24>)
    81dc:	47a0      	blx	r4
				xprintf("<CLI DEBUG> Port3            = %s", (link_port3) ? "LINK OK" : "LINK DOWN");
    81de:	4b5c      	ldr	r3, [pc, #368]	; (8350 <main_loop+0xb38>)
    81e0:	485c      	ldr	r0, [pc, #368]	; (8354 <main_loop+0xb3c>)
    81e2:	7819      	ldrb	r1, [r3, #0]
    81e4:	2900      	cmp	r1, #0
    81e6:	bf0c      	ite	eq
    81e8:	4659      	moveq	r1, fp
    81ea:	4651      	movne	r1, sl
    81ec:	47a0      	blx	r4
				xprintf("\r\r\r\r\n");
    81ee:	4853      	ldr	r0, [pc, #332]	; (833c <main_loop+0xb24>)
    81f0:	47a0      	blx	r4
				xprintf("<CLI DEBUG> CardA            = %s", (cardA_type == CARD_NOTFITTED) ? "NOT FITTED" : (cardA_type == CARD_VIBRAPOINT) ? "VibraPoint" : (cardA_type == CARD_VIBRATEK) ? "VibraTek" :
    81f2:	f898 3000 	ldrb.w	r3, [r8]
    81f6:	2b00      	cmp	r3, #0
    81f8:	d05e      	beq.n	82b8 <main_loop+0xaa0>
    81fa:	2b04      	cmp	r3, #4
    81fc:	d05e      	beq.n	82bc <main_loop+0xaa4>
    81fe:	2b01      	cmp	r3, #1
    8200:	d05e      	beq.n	82c0 <main_loop+0xaa8>
					                                             (cardA_type == CARD_MAXI_IO) ? "Maxi IO" : (cardA_type == CARD_MINI_IO) ? "Mini IO" : (cardA_type == CARD_PE) ? "P&E" : "Unknown");
    8202:	2b03      	cmp	r3, #3
    8204:	d05e      	beq.n	82c4 <main_loop+0xaac>
    8206:	2b02      	cmp	r3, #2
    8208:	d05e      	beq.n	82c8 <main_loop+0xab0>
    820a:	4a53      	ldr	r2, [pc, #332]	; (8358 <main_loop+0xb40>)
    820c:	4953      	ldr	r1, [pc, #332]	; (835c <main_loop+0xb44>)
    820e:	2b05      	cmp	r3, #5
    8210:	bf08      	it	eq
    8212:	4611      	moveq	r1, r2
				xprintf("<CLI DEBUG> CardA            = %s", (cardA_type == CARD_NOTFITTED) ? "NOT FITTED" : (cardA_type == CARD_VIBRAPOINT) ? "VibraPoint" : (cardA_type == CARD_VIBRATEK) ? "VibraTek" :
    8214:	4852      	ldr	r0, [pc, #328]	; (8360 <main_loop+0xb48>)
    8216:	47a0      	blx	r4
				xprintf("\r\r\r\r\r\n");
    8218:	4836      	ldr	r0, [pc, #216]	; (82f4 <main_loop+0xadc>)
    821a:	47a0      	blx	r4
				xprintf("<CLI DEBUG> CardB            = %s", (cardB_type == CARD_NOTFITTED) ? "NOT FITTED" : (cardB_type == CARD_VIBRAPOINT) ? "VibraPoint" : (cardB_type == CARD_VIBRATEK) ? "VibraTek" :
    821c:	783b      	ldrb	r3, [r7, #0]
    821e:	2b00      	cmp	r3, #0
    8220:	d054      	beq.n	82cc <main_loop+0xab4>
    8222:	2b04      	cmp	r3, #4
    8224:	d054      	beq.n	82d0 <main_loop+0xab8>
    8226:	2b01      	cmp	r3, #1
    8228:	d054      	beq.n	82d4 <main_loop+0xabc>
																 (cardB_type == CARD_MAXI_IO) ? "Maxi IO" : (cardB_type == CARD_MINI_IO) ? "Mini IO" : "Unknown");
    822a:	2b03      	cmp	r3, #3
    822c:	d054      	beq.n	82d8 <main_loop+0xac0>
    822e:	4a4d      	ldr	r2, [pc, #308]	; (8364 <main_loop+0xb4c>)
    8230:	494a      	ldr	r1, [pc, #296]	; (835c <main_loop+0xb44>)
    8232:	2b02      	cmp	r3, #2
    8234:	bf08      	it	eq
    8236:	4611      	moveq	r1, r2
				xprintf("<CLI DEBUG> CardB            = %s", (cardB_type == CARD_NOTFITTED) ? "NOT FITTED" : (cardB_type == CARD_VIBRAPOINT) ? "VibraPoint" : (cardB_type == CARD_VIBRATEK) ? "VibraTek" :
    8238:	484b      	ldr	r0, [pc, #300]	; (8368 <main_loop+0xb50>)
    823a:	47a0      	blx	r4
				xprintf("\r\r\r\r\r\n");
    823c:	482d      	ldr	r0, [pc, #180]	; (82f4 <main_loop+0xadc>)
    823e:	47a0      	blx	r4
				xprintf("<CLI DEBUG> Ring Topology    = %s", (ring_broken == RING_BROKEN) ? "BROKEN" : (ring_broken == RING_CLOSED) ? "LOOP" : "N/A");
    8240:	4b4a      	ldr	r3, [pc, #296]	; (836c <main_loop+0xb54>)
    8242:	781b      	ldrb	r3, [r3, #0]
    8244:	2b01      	cmp	r3, #1
    8246:	d049      	beq.n	82dc <main_loop+0xac4>
    8248:	4a49      	ldr	r2, [pc, #292]	; (8370 <main_loop+0xb58>)
    824a:	494a      	ldr	r1, [pc, #296]	; (8374 <main_loop+0xb5c>)
    824c:	2b00      	cmp	r3, #0
    824e:	bf08      	it	eq
    8250:	4611      	moveq	r1, r2
    8252:	4849      	ldr	r0, [pc, #292]	; (8378 <main_loop+0xb60>)
    8254:	47a0      	blx	r4
				xprintf("\r\r\r\r\r\n");
    8256:	4827      	ldr	r0, [pc, #156]	; (82f4 <main_loop+0xadc>)
    8258:	47a0      	blx	r4
				xprintf("<CLI DEBUG> Uptime           = %d seconds", uptime);
    825a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    825c:	4847      	ldr	r0, [pc, #284]	; (837c <main_loop+0xb64>)
    825e:	6819      	ldr	r1, [r3, #0]
    8260:	47a0      	blx	r4
				xprintf("\r\r\r\r\r\n");
    8262:	4824      	ldr	r0, [pc, #144]	; (82f4 <main_loop+0xadc>)
    8264:	47a0      	blx	r4
				xprintf("<CLI DEBUG> Firmware         = V%d.%d", MULTISENSE_FIRMWARE_MAJOR, MULTISENSE_FIRMWARE_MINOR);
    8266:	4846      	ldr	r0, [pc, #280]	; (8380 <main_loop+0xb68>)
    8268:	2202      	movs	r2, #2
    826a:	2100      	movs	r1, #0
    826c:	47a0      	blx	r4
				xprintf("\r\n");
    826e:	481d      	ldr	r0, [pc, #116]	; (82e4 <main_loop+0xacc>)
    8270:	e6bc      	b.n	7fec <main_loop+0x7d4>
				} else if ((((((((int)readdata_tempmoisture[0] * 256)) + ((int)readdata_tempmoisture[1])) * 165) / 65536) - 40) >= 0) {
    8272:	f89a 3000 	ldrb.w	r3, [sl]
    8276:	eb01 2303 	add.w	r3, r1, r3, lsl #8
    827a:	21a5      	movs	r1, #165	; 0xa5
    827c:	4359      	muls	r1, r3
    827e:	f5b1 1f20 	cmp.w	r1, #2621440	; 0x280000
    8282:	db04      	blt.n	828e <main_loop+0xa76>
					xprintf("<CLI DEBUG> Temp             = %dC", ((((((int)readdata_tempmoisture[0] * 256)) + ((int)readdata_tempmoisture[1])) * 165) / 65536) - 40);
    8284:	1409      	asrs	r1, r1, #16
    8286:	483f      	ldr	r0, [pc, #252]	; (8384 <main_loop+0xb6c>)
    8288:	3928      	subs	r1, #40	; 0x28
					xprintf("<CLI DEBUG> Temp             = -%dC", -(((((((int)readdata_tempmoisture[0] * 256)) + ((int)readdata_tempmoisture[1])) * 165) / 65536) - 40));
    828a:	47a0      	blx	r4
    828c:	e773      	b.n	8176 <main_loop+0x95e>
    828e:	f06f 01a4 	mvn.w	r1, #164	; 0xa4
    8292:	4359      	muls	r1, r3
    8294:	483c      	ldr	r0, [pc, #240]	; (8388 <main_loop+0xb70>)
    8296:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    829a:	fb91 f1f3 	sdiv	r1, r1, r3
    829e:	3128      	adds	r1, #40	; 0x28
    82a0:	e7f3      	b.n	828a <main_loop+0xa72>
					xprintf("<CLI DEBUG> Humidity         = %d%c", ((int)((((int)readdata_tempmoisture[2] * 256)) + ((int)readdata_tempmoisture[3])) * 100) / 65536, '%');
    82a2:	f89a 3002 	ldrb.w	r3, [sl, #2]
    82a6:	4839      	ldr	r0, [pc, #228]	; (838c <main_loop+0xb74>)
    82a8:	eb01 2103 	add.w	r1, r1, r3, lsl #8
    82ac:	2364      	movs	r3, #100	; 0x64
    82ae:	4359      	muls	r1, r3
    82b0:	2225      	movs	r2, #37	; 0x25
    82b2:	1409      	asrs	r1, r1, #16
    82b4:	47a0      	blx	r4
    82b6:	e76c      	b.n	8192 <main_loop+0x97a>
				xprintf("<CLI DEBUG> CardA            = %s", (cardA_type == CARD_NOTFITTED) ? "NOT FITTED" : (cardA_type == CARD_VIBRAPOINT) ? "VibraPoint" : (cardA_type == CARD_VIBRATEK) ? "VibraTek" :
    82b8:	4935      	ldr	r1, [pc, #212]	; (8390 <main_loop+0xb78>)
    82ba:	e7ab      	b.n	8214 <main_loop+0x9fc>
    82bc:	4935      	ldr	r1, [pc, #212]	; (8394 <main_loop+0xb7c>)
    82be:	e7a9      	b.n	8214 <main_loop+0x9fc>
    82c0:	4935      	ldr	r1, [pc, #212]	; (8398 <main_loop+0xb80>)
    82c2:	e7a7      	b.n	8214 <main_loop+0x9fc>
					                                             (cardA_type == CARD_MAXI_IO) ? "Maxi IO" : (cardA_type == CARD_MINI_IO) ? "Mini IO" : (cardA_type == CARD_PE) ? "P&E" : "Unknown");
    82c4:	4935      	ldr	r1, [pc, #212]	; (839c <main_loop+0xb84>)
    82c6:	e7a5      	b.n	8214 <main_loop+0x9fc>
    82c8:	4926      	ldr	r1, [pc, #152]	; (8364 <main_loop+0xb4c>)
    82ca:	e7a3      	b.n	8214 <main_loop+0x9fc>
				xprintf("<CLI DEBUG> CardB            = %s", (cardB_type == CARD_NOTFITTED) ? "NOT FITTED" : (cardB_type == CARD_VIBRAPOINT) ? "VibraPoint" : (cardB_type == CARD_VIBRATEK) ? "VibraTek" :
    82cc:	4930      	ldr	r1, [pc, #192]	; (8390 <main_loop+0xb78>)
    82ce:	e7b3      	b.n	8238 <main_loop+0xa20>
    82d0:	4930      	ldr	r1, [pc, #192]	; (8394 <main_loop+0xb7c>)
    82d2:	e7b1      	b.n	8238 <main_loop+0xa20>
    82d4:	4930      	ldr	r1, [pc, #192]	; (8398 <main_loop+0xb80>)
    82d6:	e7af      	b.n	8238 <main_loop+0xa20>
																 (cardB_type == CARD_MAXI_IO) ? "Maxi IO" : (cardB_type == CARD_MINI_IO) ? "Mini IO" : "Unknown");
    82d8:	4930      	ldr	r1, [pc, #192]	; (839c <main_loop+0xb84>)
    82da:	e7ad      	b.n	8238 <main_loop+0xa20>
				xprintf("<CLI DEBUG> Ring Topology    = %s", (ring_broken == RING_BROKEN) ? "BROKEN" : (ring_broken == RING_CLOSED) ? "LOOP" : "N/A");
    82dc:	4930      	ldr	r1, [pc, #192]	; (83a0 <main_loop+0xb88>)
    82de:	e7b8      	b.n	8252 <main_loop+0xa3a>
    82e0:	0000deb1 	.word	0x0000deb1
    82e4:	0000ef75 	.word	0x0000ef75
    82e8:	0000defb 	.word	0x0000defb
    82ec:	0000df22 	.word	0x0000df22
    82f0:	0000df44 	.word	0x0000df44
    82f4:	0000df66 	.word	0x0000df66
    82f8:	0000df6d 	.word	0x0000df6d
    82fc:	0000df8f 	.word	0x0000df8f
    8300:	0000d9ad 	.word	0x0000d9ad
    8304:	0000d9a1 	.word	0x0000d9a1
    8308:	0000dfb1 	.word	0x0000dfb1
    830c:	20008ab2 	.word	0x20008ab2
    8310:	0000dfd3 	.word	0x0000dfd3
    8314:	20008aa1 	.word	0x20008aa1
    8318:	0000dff5 	.word	0x0000dff5
    831c:	20008aa9 	.word	0x20008aa9
    8320:	0000e017 	.word	0x0000e017
    8324:	0000e039 	.word	0x0000e039
    8328:	0000e0a5 	.word	0x0000e0a5
    832c:	20008263 	.word	0x20008263
    8330:	0000d9ca 	.word	0x0000d9ca
    8334:	0000d9ba 	.word	0x0000d9ba
    8338:	0000e0ee 	.word	0x0000e0ee
    833c:	0000df67 	.word	0x0000df67
    8340:	20007591 	.word	0x20007591
    8344:	0000e110 	.word	0x0000e110
    8348:	20008694 	.word	0x20008694
    834c:	0000e132 	.word	0x0000e132
    8350:	20007596 	.word	0x20007596
    8354:	0000e154 	.word	0x0000e154
    8358:	0000da06 	.word	0x0000da06
    835c:	0000d9fe 	.word	0x0000d9fe
    8360:	0000e176 	.word	0x0000e176
    8364:	0000d9f6 	.word	0x0000d9f6
    8368:	0000e198 	.word	0x0000e198
    836c:	2000866d 	.word	0x2000866d
    8370:	0000da15 	.word	0x0000da15
    8374:	0000da0a 	.word	0x0000da0a
    8378:	0000e1ba 	.word	0x0000e1ba
    837c:	0000e1dc 	.word	0x0000e1dc
    8380:	0000e206 	.word	0x0000e206
    8384:	0000e05e 	.word	0x0000e05e
    8388:	0000e081 	.word	0x0000e081
    838c:	0000e0ca 	.word	0x0000e0ca
    8390:	0000d9da 	.word	0x0000d9da
    8394:	0000d9cf 	.word	0x0000d9cf
    8398:	0000d9e5 	.word	0x0000d9e5
    839c:	0000d9ee 	.word	0x0000d9ee
    83a0:	0000da0e 	.word	0x0000da0e
    83a4:	200081dc 	.word	0x200081dc
    83a8:	20008265 	.word	0x20008265
    83ac:	0000d9c5 	.word	0x0000d9c5
    83b0:	0000d9bd 	.word	0x0000d9bd
				xprintf("<CLI DEBUG> IP               = %d.%d.%d.%d\r\n", uip_ipaddr1(ipaddr), uip_ipaddr2(ipaddr), uip_ipaddr3(ipaddr), uip_ipaddr4(ipaddr));
    83b4:	f8df 9108 	ldr.w	r9, [pc, #264]	; 84c0 <main_loop+0xca8>
				xprintf("\r\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n");
    83b8:	4835      	ldr	r0, [pc, #212]	; (8490 <main_loop+0xc78>)
				xprintf("<CLI DEBUG> IP               = %d.%d.%d.%d\r\n", uip_ipaddr1(ipaddr), uip_ipaddr2(ipaddr), uip_ipaddr3(ipaddr), uip_ipaddr4(ipaddr));
    83ba:	4f36      	ldr	r7, [pc, #216]	; (8494 <main_loop+0xc7c>)
				xprintf("\r\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n");
    83bc:	47a0      	blx	r4
				xprintf("<CLI DEBUG> [IP SCHEME / NETWORK] command\r\n");
    83be:	4836      	ldr	r0, [pc, #216]	; (8498 <main_loop+0xc80>)
    83c0:	47a0      	blx	r4
				xprintf("<CLI DEBUG> IP               = %d.%d.%d.%d\r\n", uip_ipaddr1(ipaddr), uip_ipaddr2(ipaddr), uip_ipaddr3(ipaddr), uip_ipaddr4(ipaddr));
    83c2:	f8b9 0000 	ldrh.w	r0, [r9]
    83c6:	47b8      	blx	r7
    83c8:	4682      	mov	sl, r0
    83ca:	f8b9 0000 	ldrh.w	r0, [r9]
    83ce:	47b8      	blx	r7
    83d0:	4683      	mov	fp, r0
    83d2:	f8b9 0002 	ldrh.w	r0, [r9, #2]
    83d6:	47b8      	blx	r7
    83d8:	4680      	mov	r8, r0
    83da:	f8b9 0002 	ldrh.w	r0, [r9, #2]
				xprintf("<CLI DEBUG> Netmask          = %d.%d.%d.%d\r\n", uip_ipaddr1(netmask), uip_ipaddr2(netmask), uip_ipaddr3(netmask), uip_ipaddr4(netmask));
    83de:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 84c4 <main_loop+0xcac>
				xprintf("<CLI DEBUG> IP               = %d.%d.%d.%d\r\n", uip_ipaddr1(ipaddr), uip_ipaddr2(ipaddr), uip_ipaddr3(ipaddr), uip_ipaddr4(ipaddr));
    83e2:	47b8      	blx	r7
    83e4:	b2c0      	uxtb	r0, r0
    83e6:	f3c8 230f 	ubfx	r3, r8, #8, #16
    83ea:	fa5f f28b 	uxtb.w	r2, fp
    83ee:	f3ca 210f 	ubfx	r1, sl, #8, #16
    83f2:	9000      	str	r0, [sp, #0]
    83f4:	4829      	ldr	r0, [pc, #164]	; (849c <main_loop+0xc84>)
    83f6:	47a0      	blx	r4
				xprintf("<CLI DEBUG> Netmask          = %d.%d.%d.%d\r\n", uip_ipaddr1(netmask), uip_ipaddr2(netmask), uip_ipaddr3(netmask), uip_ipaddr4(netmask));
    83f8:	f8b9 0000 	ldrh.w	r0, [r9]
    83fc:	47b8      	blx	r7
    83fe:	4682      	mov	sl, r0
    8400:	f8b9 0000 	ldrh.w	r0, [r9]
    8404:	47b8      	blx	r7
    8406:	4683      	mov	fp, r0
    8408:	f8b9 0002 	ldrh.w	r0, [r9, #2]
    840c:	47b8      	blx	r7
    840e:	4680      	mov	r8, r0
    8410:	f8b9 0002 	ldrh.w	r0, [r9, #2]
				xprintf("<CLI DEBUG> Gateway          = %d.%d.%d.%d\r\n", uip_ipaddr1(gwaddr), uip_ipaddr2(gwaddr), uip_ipaddr3(gwaddr), uip_ipaddr4(gwaddr));
    8414:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 84c8 <main_loop+0xcb0>
				xprintf("<CLI DEBUG> Netmask          = %d.%d.%d.%d\r\n", uip_ipaddr1(netmask), uip_ipaddr2(netmask), uip_ipaddr3(netmask), uip_ipaddr4(netmask));
    8418:	47b8      	blx	r7
    841a:	b2c0      	uxtb	r0, r0
    841c:	f3c8 230f 	ubfx	r3, r8, #8, #16
    8420:	fa5f f28b 	uxtb.w	r2, fp
    8424:	f3ca 210f 	ubfx	r1, sl, #8, #16
    8428:	9000      	str	r0, [sp, #0]
    842a:	481d      	ldr	r0, [pc, #116]	; (84a0 <main_loop+0xc88>)
    842c:	47a0      	blx	r4
				xprintf("<CLI DEBUG> Gateway          = %d.%d.%d.%d\r\n", uip_ipaddr1(gwaddr), uip_ipaddr2(gwaddr), uip_ipaddr3(gwaddr), uip_ipaddr4(gwaddr));
    842e:	f8b9 0000 	ldrh.w	r0, [r9]
    8432:	47b8      	blx	r7
    8434:	4682      	mov	sl, r0
    8436:	f8b9 0000 	ldrh.w	r0, [r9]
    843a:	47b8      	blx	r7
    843c:	4683      	mov	fp, r0
    843e:	f8b9 0002 	ldrh.w	r0, [r9, #2]
    8442:	47b8      	blx	r7
    8444:	4680      	mov	r8, r0
    8446:	f8b9 0002 	ldrh.w	r0, [r9, #2]
    844a:	47b8      	blx	r7
    844c:	b2c0      	uxtb	r0, r0
    844e:	9000      	str	r0, [sp, #0]
    8450:	f3c8 230f 	ubfx	r3, r8, #8, #16
    8454:	fa5f f28b 	uxtb.w	r2, fp
    8458:	f3ca 210f 	ubfx	r1, sl, #8, #16
    845c:	4811      	ldr	r0, [pc, #68]	; (84a4 <main_loop+0xc8c>)
    845e:	47a0      	blx	r4
				xprintf("<CLI DEBUG> MAC              = %x:%x:%x:%x:%x:%x\r\n", mac_raw[0], mac_raw[1], mac_raw[2], mac_raw[3], mac_raw[4], mac_raw[5]);
    8460:	4811      	ldr	r0, [pc, #68]	; (84a8 <main_loop+0xc90>)
    8462:	7947      	ldrb	r7, [r0, #5]
    8464:	7883      	ldrb	r3, [r0, #2]
    8466:	7842      	ldrb	r2, [r0, #1]
    8468:	7801      	ldrb	r1, [r0, #0]
    846a:	9702      	str	r7, [sp, #8]
    846c:	7907      	ldrb	r7, [r0, #4]
    846e:	9701      	str	r7, [sp, #4]
    8470:	78c0      	ldrb	r0, [r0, #3]
    8472:	9000      	str	r0, [sp, #0]
    8474:	480d      	ldr	r0, [pc, #52]	; (84ac <main_loop+0xc94>)
    8476:	47a0      	blx	r4
				xprintf(". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n\r\n");
    8478:	480d      	ldr	r0, [pc, #52]	; (84b0 <main_loop+0xc98>)
    847a:	47a0      	blx	r4
    847c:	e57b      	b.n	7f76 <main_loop+0x75e>
				xprintf("\r\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n");
    847e:	4804      	ldr	r0, [pc, #16]	; (8490 <main_loop+0xc78>)
    8480:	47a0      	blx	r4
				xprintf("<CLI DEBUG> [SPEED MAINLOOP] command\r\n");
    8482:	480c      	ldr	r0, [pc, #48]	; (84b4 <main_loop+0xc9c>)
    8484:	47a0      	blx	r4
				xprintf("<CLI DEBUG> Main-loop/Sampling = %d\r\n", looprate);
    8486:	4b0c      	ldr	r3, [pc, #48]	; (84b8 <main_loop+0xca0>)
    8488:	480c      	ldr	r0, [pc, #48]	; (84bc <main_loop+0xca4>)
    848a:	6819      	ldr	r1, [r3, #0]
				xprintf("PORT4CONTROL17 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT4CONTROL17));
    848c:	47a0      	blx	r4
    848e:	e7f3      	b.n	8478 <main_loop+0xc60>
    8490:	0000dd50 	.word	0x0000dd50
    8494:	0000a34d 	.word	0x0000a34d
    8498:	0000e22c 	.word	0x0000e22c
    849c:	0000e258 	.word	0x0000e258
    84a0:	0000e285 	.word	0x0000e285
    84a4:	0000e2b2 	.word	0x0000e2b2
    84a8:	2000825c 	.word	0x2000825c
    84ac:	0000e2df 	.word	0x0000e2df
    84b0:	0000ddbb 	.word	0x0000ddbb
    84b4:	0000e312 	.word	0x0000e312
    84b8:	20008abc 	.word	0x20008abc
    84bc:	0000e339 	.word	0x0000e339
    84c0:	200075b0 	.word	0x200075b0
    84c4:	200081d8 	.word	0x200081d8
    84c8:	20008a96 	.word	0x20008a96
				xprintf("\r\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n");
    84cc:	489d      	ldr	r0, [pc, #628]	; (8744 <main_loop+0xf2c>)
				xprintf("FAMILY_ID = %x\r\n", readKSZreg(SPI_KSZ8794_FAMILY_ID));
    84ce:	4f9e      	ldr	r7, [pc, #632]	; (8748 <main_loop+0xf30>)
				xprintf("\r\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n");
    84d0:	47a0      	blx	r4
				xprintf("\r\n");
    84d2:	489e      	ldr	r0, [pc, #632]	; (874c <main_loop+0xf34>)
    84d4:	47a0      	blx	r4
				xprintf("<CLI DEBUG> [READ MICREL REGISTERS] command");
    84d6:	489e      	ldr	r0, [pc, #632]	; (8750 <main_loop+0xf38>)
    84d8:	47a0      	blx	r4
				xprintf("\r\n");
    84da:	489c      	ldr	r0, [pc, #624]	; (874c <main_loop+0xf34>)
    84dc:	47a0      	blx	r4
				xprintf("FAMILY_ID = %x\r\n", readKSZreg(SPI_KSZ8794_FAMILY_ID));
    84de:	2000      	movs	r0, #0
    84e0:	47b8      	blx	r7
    84e2:	4601      	mov	r1, r0
    84e4:	489b      	ldr	r0, [pc, #620]	; (8754 <main_loop+0xf3c>)
    84e6:	47a0      	blx	r4
				xprintf("START = %x\r\n", readKSZreg(SPI_KSZ8794_START));
    84e8:	2001      	movs	r0, #1
    84ea:	47b8      	blx	r7
    84ec:	4601      	mov	r1, r0
    84ee:	489a      	ldr	r0, [pc, #616]	; (8758 <main_loop+0xf40>)
    84f0:	47a0      	blx	r4
				xprintf("GLOBAL0 = %x\r\n", readKSZreg(SPI_KSZ8794_GLOBAL0));
    84f2:	2002      	movs	r0, #2
    84f4:	47b8      	blx	r7
    84f6:	4601      	mov	r1, r0
    84f8:	4898      	ldr	r0, [pc, #608]	; (875c <main_loop+0xf44>)
    84fa:	47a0      	blx	r4
				xprintf("GLOBAL1 = %x\r\n", readKSZreg(SPI_KSZ8794_GLOBAL1));
    84fc:	2003      	movs	r0, #3
    84fe:	47b8      	blx	r7
    8500:	4601      	mov	r1, r0
    8502:	4897      	ldr	r0, [pc, #604]	; (8760 <main_loop+0xf48>)
    8504:	47a0      	blx	r4
				xprintf("GLOBAL2 = %x\r\n", readKSZreg(SPI_KSZ8794_GLOBAL2));
    8506:	2004      	movs	r0, #4
    8508:	47b8      	blx	r7
    850a:	4601      	mov	r1, r0
    850c:	4895      	ldr	r0, [pc, #596]	; (8764 <main_loop+0xf4c>)
    850e:	47a0      	blx	r4
				xprintf("GLOBAL3 = %x\r\n", readKSZreg(SPI_KSZ8794_GLOBAL3));
    8510:	2005      	movs	r0, #5
    8512:	47b8      	blx	r7
    8514:	4601      	mov	r1, r0
    8516:	4894      	ldr	r0, [pc, #592]	; (8768 <main_loop+0xf50>)
    8518:	47a0      	blx	r4
				xprintf("GLOBAL4 = %x\r\n", readKSZreg(SPI_KSZ8794_GLOBAL4));
    851a:	2006      	movs	r0, #6
    851c:	47b8      	blx	r7
    851e:	4601      	mov	r1, r0
    8520:	4892      	ldr	r0, [pc, #584]	; (876c <main_loop+0xf54>)
    8522:	47a0      	blx	r4
				xprintf("GLOBAL5 = %x\r\n", readKSZreg(SPI_KSZ8794_GLOBAL5));
    8524:	2007      	movs	r0, #7
    8526:	47b8      	blx	r7
    8528:	4601      	mov	r1, r0
    852a:	4891      	ldr	r0, [pc, #580]	; (8770 <main_loop+0xf58>)
    852c:	47a0      	blx	r4
				xprintf("GLOBAL6 = %x\r\n", readKSZreg(SPI_KSZ8794_GLOBAL6));
    852e:	2008      	movs	r0, #8
    8530:	47b8      	blx	r7
    8532:	4601      	mov	r1, r0
    8534:	488f      	ldr	r0, [pc, #572]	; (8774 <main_loop+0xf5c>)
    8536:	47a0      	blx	r4
				xprintf("GLOBAL9 = %x\r\n", readKSZreg(SPI_KSZ8794_GLOBAL9));
    8538:	200b      	movs	r0, #11
    853a:	47b8      	blx	r7
    853c:	4601      	mov	r1, r0
    853e:	488e      	ldr	r0, [pc, #568]	; (8778 <main_loop+0xf60>)
    8540:	47a0      	blx	r4
				xprintf("GLOBAL10 = %x\r\n", readKSZreg(SPI_KSZ8794_GLOBAL10));
    8542:	200c      	movs	r0, #12
    8544:	47b8      	blx	r7
    8546:	4601      	mov	r1, r0
    8548:	488c      	ldr	r0, [pc, #560]	; (877c <main_loop+0xf64>)
    854a:	47a0      	blx	r4
				xprintf("PDMC1 = %x\r\n", readKSZreg(SPI_KSZ8794_PDMC1));
    854c:	200e      	movs	r0, #14
    854e:	47b8      	blx	r7
    8550:	4601      	mov	r1, r0
    8552:	488b      	ldr	r0, [pc, #556]	; (8780 <main_loop+0xf68>)
    8554:	47a0      	blx	r4
				xprintf("PDMC2 = %x\r\n", readKSZreg(SPI_KSZ8794_PDMC2));
    8556:	200f      	movs	r0, #15
    8558:	47b8      	blx	r7
    855a:	4601      	mov	r1, r0
    855c:	4889      	ldr	r0, [pc, #548]	; (8784 <main_loop+0xf6c>)
    855e:	47a0      	blx	r4
				xprintf("PORT1CONTROL0 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT1CONTROL0));
    8560:	2010      	movs	r0, #16
    8562:	47b8      	blx	r7
    8564:	4601      	mov	r1, r0
    8566:	4888      	ldr	r0, [pc, #544]	; (8788 <main_loop+0xf70>)
    8568:	47a0      	blx	r4
				xprintf("PORT2CONTROL0 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT2CONTROL0));
    856a:	2020      	movs	r0, #32
    856c:	47b8      	blx	r7
    856e:	4601      	mov	r1, r0
    8570:	4886      	ldr	r0, [pc, #536]	; (878c <main_loop+0xf74>)
    8572:	47a0      	blx	r4
				xprintf("PORT3CONTROL0 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT3CONTROL0));	
    8574:	2030      	movs	r0, #48	; 0x30
    8576:	47b8      	blx	r7
    8578:	4601      	mov	r1, r0
    857a:	4885      	ldr	r0, [pc, #532]	; (8790 <main_loop+0xf78>)
    857c:	47a0      	blx	r4
				xprintf("PORT4CONTROL0 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT4CONTROL0));
    857e:	2050      	movs	r0, #80	; 0x50
    8580:	47b8      	blx	r7
    8582:	4601      	mov	r1, r0
    8584:	4883      	ldr	r0, [pc, #524]	; (8794 <main_loop+0xf7c>)
    8586:	47a0      	blx	r4
				xprintf("PORT1CONTROL1 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT1CONTROL1));	
    8588:	2011      	movs	r0, #17
    858a:	47b8      	blx	r7
    858c:	4601      	mov	r1, r0
    858e:	4882      	ldr	r0, [pc, #520]	; (8798 <main_loop+0xf80>)
    8590:	47a0      	blx	r4
				xprintf("PORT2CONTROL1 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT2CONTROL1));
    8592:	2021      	movs	r0, #33	; 0x21
    8594:	47b8      	blx	r7
    8596:	4601      	mov	r1, r0
    8598:	4880      	ldr	r0, [pc, #512]	; (879c <main_loop+0xf84>)
    859a:	47a0      	blx	r4
				xprintf("PORT3CONTROL1 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT3CONTROL1));
    859c:	2031      	movs	r0, #49	; 0x31
    859e:	47b8      	blx	r7
    85a0:	4601      	mov	r1, r0
    85a2:	487f      	ldr	r0, [pc, #508]	; (87a0 <main_loop+0xf88>)
    85a4:	47a0      	blx	r4
				xprintf("PORT4CONTROL1 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT4CONTROL1));	
    85a6:	2051      	movs	r0, #81	; 0x51
    85a8:	47b8      	blx	r7
    85aa:	4601      	mov	r1, r0
    85ac:	487d      	ldr	r0, [pc, #500]	; (87a4 <main_loop+0xf8c>)
    85ae:	47a0      	blx	r4
				xprintf("PORT1CONTROL2 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT1CONTROL2));
    85b0:	2012      	movs	r0, #18
    85b2:	47b8      	blx	r7
    85b4:	4601      	mov	r1, r0
    85b6:	487c      	ldr	r0, [pc, #496]	; (87a8 <main_loop+0xf90>)
    85b8:	47a0      	blx	r4
				xprintf("PORT2CONTROL2 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT2CONTROL2));
    85ba:	2022      	movs	r0, #34	; 0x22
    85bc:	47b8      	blx	r7
    85be:	4601      	mov	r1, r0
    85c0:	487a      	ldr	r0, [pc, #488]	; (87ac <main_loop+0xf94>)
    85c2:	47a0      	blx	r4
				xprintf("PORT3CONTROL2 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT3CONTROL2));
    85c4:	2032      	movs	r0, #50	; 0x32
    85c6:	47b8      	blx	r7
    85c8:	4601      	mov	r1, r0
    85ca:	4879      	ldr	r0, [pc, #484]	; (87b0 <main_loop+0xf98>)
    85cc:	47a0      	blx	r4
				xprintf("PORT4CONTROL2 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT4CONTROL2));
    85ce:	2052      	movs	r0, #82	; 0x52
    85d0:	47b8      	blx	r7
    85d2:	4601      	mov	r1, r0
    85d4:	4877      	ldr	r0, [pc, #476]	; (87b4 <main_loop+0xf9c>)
    85d6:	47a0      	blx	r4
				xprintf("PORT1CONTROL3 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT1CONTROL3));
    85d8:	2013      	movs	r0, #19
    85da:	47b8      	blx	r7
    85dc:	4601      	mov	r1, r0
    85de:	4876      	ldr	r0, [pc, #472]	; (87b8 <main_loop+0xfa0>)
    85e0:	47a0      	blx	r4
				xprintf("PORT2CONTROL3 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT2CONTROL3));
    85e2:	2023      	movs	r0, #35	; 0x23
    85e4:	47b8      	blx	r7
    85e6:	4601      	mov	r1, r0
    85e8:	4874      	ldr	r0, [pc, #464]	; (87bc <main_loop+0xfa4>)
    85ea:	47a0      	blx	r4
				xprintf("PORT3CONTROL3 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT3CONTROL3));
    85ec:	2033      	movs	r0, #51	; 0x33
    85ee:	47b8      	blx	r7
    85f0:	4601      	mov	r1, r0
    85f2:	4873      	ldr	r0, [pc, #460]	; (87c0 <main_loop+0xfa8>)
    85f4:	47a0      	blx	r4
				xprintf("PORT4CONTROL3 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT4CONTROL3));
    85f6:	2053      	movs	r0, #83	; 0x53
    85f8:	47b8      	blx	r7
    85fa:	4601      	mov	r1, r0
    85fc:	4871      	ldr	r0, [pc, #452]	; (87c4 <main_loop+0xfac>)
    85fe:	47a0      	blx	r4
				xprintf("PORT1CONTROL4 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT1CONTROL4));
    8600:	2014      	movs	r0, #20
    8602:	47b8      	blx	r7
    8604:	4601      	mov	r1, r0
    8606:	4870      	ldr	r0, [pc, #448]	; (87c8 <main_loop+0xfb0>)
    8608:	47a0      	blx	r4
				xprintf("PORT2CONTROL4 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT2CONTROL4));
    860a:	2024      	movs	r0, #36	; 0x24
    860c:	47b8      	blx	r7
    860e:	4601      	mov	r1, r0
    8610:	486e      	ldr	r0, [pc, #440]	; (87cc <main_loop+0xfb4>)
    8612:	47a0      	blx	r4
				xprintf("PORT3CONTROL4 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT3CONTROL4));
    8614:	2034      	movs	r0, #52	; 0x34
    8616:	47b8      	blx	r7
    8618:	4601      	mov	r1, r0
    861a:	486d      	ldr	r0, [pc, #436]	; (87d0 <main_loop+0xfb8>)
    861c:	47a0      	blx	r4
				xprintf("PORT4CONTROL4 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT4CONTROL4));
    861e:	2054      	movs	r0, #84	; 0x54
    8620:	47b8      	blx	r7
    8622:	4601      	mov	r1, r0
    8624:	486b      	ldr	r0, [pc, #428]	; (87d4 <main_loop+0xfbc>)
    8626:	47a0      	blx	r4
				xprintf("PORT1CONTROL5 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT1CONTROL5));
    8628:	2015      	movs	r0, #21
    862a:	47b8      	blx	r7
    862c:	4601      	mov	r1, r0
    862e:	486a      	ldr	r0, [pc, #424]	; (87d8 <main_loop+0xfc0>)
    8630:	47a0      	blx	r4
				xprintf("PORT2CONTROL5 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT2CONTROL5));
    8632:	2025      	movs	r0, #37	; 0x25
    8634:	47b8      	blx	r7
    8636:	4601      	mov	r1, r0
    8638:	4868      	ldr	r0, [pc, #416]	; (87dc <main_loop+0xfc4>)
    863a:	47a0      	blx	r4
				xprintf("PORT3CONTROL5 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT3CONTROL5));
    863c:	2035      	movs	r0, #53	; 0x35
    863e:	47b8      	blx	r7
    8640:	4601      	mov	r1, r0
    8642:	4867      	ldr	r0, [pc, #412]	; (87e0 <main_loop+0xfc8>)
    8644:	47a0      	blx	r4
				xprintf("PORT4CONTROL5 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT4CONTROL5));
    8646:	2055      	movs	r0, #85	; 0x55
    8648:	47b8      	blx	r7
    864a:	4601      	mov	r1, r0
    864c:	4865      	ldr	r0, [pc, #404]	; (87e4 <main_loop+0xfcc>)
    864e:	47a0      	blx	r4
				xprintf("PORT4CONTROL6 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT4CONTROL6));
    8650:	2056      	movs	r0, #86	; 0x56
    8652:	47b8      	blx	r7
    8654:	4601      	mov	r1, r0
    8656:	4864      	ldr	r0, [pc, #400]	; (87e8 <main_loop+0xfd0>)
    8658:	47a0      	blx	r4
				xprintf("PORT1CONTROL7 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT1CONTROL7));
    865a:	2017      	movs	r0, #23
    865c:	47b8      	blx	r7
    865e:	4601      	mov	r1, r0
    8660:	4862      	ldr	r0, [pc, #392]	; (87ec <main_loop+0xfd4>)
    8662:	47a0      	blx	r4
				xprintf("PORT2CONTROL7 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT2CONTROL7));
    8664:	2027      	movs	r0, #39	; 0x27
    8666:	47b8      	blx	r7
    8668:	4601      	mov	r1, r0
    866a:	4861      	ldr	r0, [pc, #388]	; (87f0 <main_loop+0xfd8>)
    866c:	47a0      	blx	r4
				xprintf("PORT3CONTROL7 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT3CONTROL7));
    866e:	2037      	movs	r0, #55	; 0x37
    8670:	47b8      	blx	r7
    8672:	4601      	mov	r1, r0
    8674:	485f      	ldr	r0, [pc, #380]	; (87f4 <main_loop+0xfdc>)
    8676:	47a0      	blx	r4
				xprintf("PORT1CONTROL8 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT1CONTROL8));
    8678:	201a      	movs	r0, #26
    867a:	47b8      	blx	r7
    867c:	4601      	mov	r1, r0
    867e:	485e      	ldr	r0, [pc, #376]	; (87f8 <main_loop+0xfe0>)
    8680:	47a0      	blx	r4
				xprintf("PORT2CONTROL8 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT2CONTROL8));
    8682:	202a      	movs	r0, #42	; 0x2a
    8684:	47b8      	blx	r7
    8686:	4601      	mov	r1, r0
    8688:	485c      	ldr	r0, [pc, #368]	; (87fc <main_loop+0xfe4>)
    868a:	47a0      	blx	r4
				xprintf("PORT3CONTROL8 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT3CONTROL8));
    868c:	203a      	movs	r0, #58	; 0x3a
    868e:	47b8      	blx	r7
    8690:	4601      	mov	r1, r0
    8692:	485b      	ldr	r0, [pc, #364]	; (8800 <main_loop+0xfe8>)
    8694:	47a0      	blx	r4
				xprintf("PORT1STATUS0 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT1STATUS0));
    8696:	2018      	movs	r0, #24
    8698:	47b8      	blx	r7
    869a:	4601      	mov	r1, r0
    869c:	4859      	ldr	r0, [pc, #356]	; (8804 <main_loop+0xfec>)
    869e:	47a0      	blx	r4
				xprintf("PORT2STATUS0 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT2STATUS0));
    86a0:	2028      	movs	r0, #40	; 0x28
    86a2:	47b8      	blx	r7
    86a4:	4601      	mov	r1, r0
    86a6:	4858      	ldr	r0, [pc, #352]	; (8808 <main_loop+0xff0>)
    86a8:	47a0      	blx	r4
				xprintf("PORT3STATUS0 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT3STATUS0));
    86aa:	2038      	movs	r0, #56	; 0x38
    86ac:	47b8      	blx	r7
    86ae:	4601      	mov	r1, r0
    86b0:	4856      	ldr	r0, [pc, #344]	; (880c <main_loop+0xff4>)
    86b2:	47a0      	blx	r4
				xprintf("PORT1STATUS1 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT1STATUS1));
    86b4:	2019      	movs	r0, #25
    86b6:	47b8      	blx	r7
    86b8:	4601      	mov	r1, r0
    86ba:	4855      	ldr	r0, [pc, #340]	; (8810 <main_loop+0xff8>)
    86bc:	47a0      	blx	r4
				xprintf("PORT2STATUS1 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT2STATUS1));
    86be:	2029      	movs	r0, #41	; 0x29
    86c0:	47b8      	blx	r7
    86c2:	4601      	mov	r1, r0
    86c4:	4853      	ldr	r0, [pc, #332]	; (8814 <main_loop+0xffc>)
    86c6:	47a0      	blx	r4
				xprintf("PORT3STATUS1 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT3STATUS1));
    86c8:	2039      	movs	r0, #57	; 0x39
    86ca:	47b8      	blx	r7
    86cc:	4601      	mov	r1, r0
    86ce:	4852      	ldr	r0, [pc, #328]	; (8818 <main_loop+0x1000>)
    86d0:	47a0      	blx	r4
				xprintf("PORT1STATUS2 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT1STATUS2));
    86d2:	201e      	movs	r0, #30
    86d4:	47b8      	blx	r7
    86d6:	4601      	mov	r1, r0
    86d8:	4850      	ldr	r0, [pc, #320]	; (881c <main_loop+0x1004>)
    86da:	47a0      	blx	r4
				xprintf("PORT2STATUS2 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT2STATUS2));
    86dc:	202e      	movs	r0, #46	; 0x2e
    86de:	47b8      	blx	r7
    86e0:	4601      	mov	r1, r0
    86e2:	484f      	ldr	r0, [pc, #316]	; (8820 <main_loop+0x1008>)
    86e4:	47a0      	blx	r4
				xprintf("PORT3STATUS2 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT3STATUS2));
    86e6:	203e      	movs	r0, #62	; 0x3e
    86e8:	47b8      	blx	r7
    86ea:	4601      	mov	r1, r0
    86ec:	484d      	ldr	r0, [pc, #308]	; (8824 <main_loop+0x100c>)
    86ee:	47a0      	blx	r4
				xprintf("PORT1STATUS3 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT1STATUS3));
    86f0:	201f      	movs	r0, #31
    86f2:	47b8      	blx	r7
    86f4:	4601      	mov	r1, r0
    86f6:	484c      	ldr	r0, [pc, #304]	; (8828 <main_loop+0x1010>)
    86f8:	47a0      	blx	r4
				xprintf("PORT2STATUS3 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT2STATUS3));
    86fa:	202f      	movs	r0, #47	; 0x2f
    86fc:	47b8      	blx	r7
    86fe:	4601      	mov	r1, r0
    8700:	484a      	ldr	r0, [pc, #296]	; (882c <main_loop+0x1014>)
    8702:	47a0      	blx	r4
				xprintf("PORT3STATUS3 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT3STATUS3));
    8704:	203f      	movs	r0, #63	; 0x3f
    8706:	47b8      	blx	r7
    8708:	4601      	mov	r1, r0
    870a:	4849      	ldr	r0, [pc, #292]	; (8830 <main_loop+0x1018>)
    870c:	47a0      	blx	r4
				xprintf("PORT1LINKMD = %x\r\n", readKSZreg(SPI_KSZ8794_PORT1LINKMD));
    870e:	201b      	movs	r0, #27
    8710:	47b8      	blx	r7
    8712:	4601      	mov	r1, r0
    8714:	4847      	ldr	r0, [pc, #284]	; (8834 <main_loop+0x101c>)
    8716:	47a0      	blx	r4
				xprintf("PORT2LINKMD = %x\r\n", readKSZreg(SPI_KSZ8794_PORT2LINKMD));
    8718:	202b      	movs	r0, #43	; 0x2b
    871a:	47b8      	blx	r7
    871c:	4601      	mov	r1, r0
    871e:	4846      	ldr	r0, [pc, #280]	; (8838 <main_loop+0x1020>)
    8720:	47a0      	blx	r4
				xprintf("PORT3LINKMD = %x\r\n", readKSZreg(SPI_KSZ8794_PORT3LINKMD));
    8722:	203b      	movs	r0, #59	; 0x3b
    8724:	47b8      	blx	r7
    8726:	4601      	mov	r1, r0
    8728:	4844      	ldr	r0, [pc, #272]	; (883c <main_loop+0x1024>)
    872a:	47a0      	blx	r4
				xprintf("PORT1CONTROL9 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT1CONTROL9));
    872c:	201c      	movs	r0, #28
    872e:	47b8      	blx	r7
    8730:	4601      	mov	r1, r0
    8732:	4843      	ldr	r0, [pc, #268]	; (8840 <main_loop+0x1028>)
    8734:	47a0      	blx	r4
				xprintf("PORT2CONTROL9 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT2CONTROL9));
    8736:	202c      	movs	r0, #44	; 0x2c
    8738:	47b8      	blx	r7
    873a:	4601      	mov	r1, r0
    873c:	4841      	ldr	r0, [pc, #260]	; (8844 <main_loop+0x102c>)
    873e:	47a0      	blx	r4
				xprintf("PORT3CONTROL9 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT3CONTROL9));
    8740:	203c      	movs	r0, #60	; 0x3c
    8742:	e081      	b.n	8848 <main_loop+0x1030>
    8744:	0000dd50 	.word	0x0000dd50
    8748:	0000b225 	.word	0x0000b225
    874c:	0000ef75 	.word	0x0000ef75
    8750:	0000e35f 	.word	0x0000e35f
    8754:	0000e38b 	.word	0x0000e38b
    8758:	0000e39c 	.word	0x0000e39c
    875c:	0000e3a9 	.word	0x0000e3a9
    8760:	0000e3b8 	.word	0x0000e3b8
    8764:	0000e3c7 	.word	0x0000e3c7
    8768:	0000e3d6 	.word	0x0000e3d6
    876c:	0000e3e5 	.word	0x0000e3e5
    8770:	0000e3f4 	.word	0x0000e3f4
    8774:	0000e403 	.word	0x0000e403
    8778:	0000e412 	.word	0x0000e412
    877c:	0000e421 	.word	0x0000e421
    8780:	0000e431 	.word	0x0000e431
    8784:	0000e43e 	.word	0x0000e43e
    8788:	0000e44b 	.word	0x0000e44b
    878c:	0000e460 	.word	0x0000e460
    8790:	0000e475 	.word	0x0000e475
    8794:	0000e48a 	.word	0x0000e48a
    8798:	0000e49f 	.word	0x0000e49f
    879c:	0000e4b4 	.word	0x0000e4b4
    87a0:	0000e4c9 	.word	0x0000e4c9
    87a4:	0000e4de 	.word	0x0000e4de
    87a8:	0000e4f3 	.word	0x0000e4f3
    87ac:	0000e508 	.word	0x0000e508
    87b0:	0000e51d 	.word	0x0000e51d
    87b4:	0000e532 	.word	0x0000e532
    87b8:	0000e547 	.word	0x0000e547
    87bc:	0000e55c 	.word	0x0000e55c
    87c0:	0000e571 	.word	0x0000e571
    87c4:	0000e586 	.word	0x0000e586
    87c8:	0000e59b 	.word	0x0000e59b
    87cc:	0000e5b0 	.word	0x0000e5b0
    87d0:	0000e5c5 	.word	0x0000e5c5
    87d4:	0000e5da 	.word	0x0000e5da
    87d8:	0000e5ef 	.word	0x0000e5ef
    87dc:	0000e604 	.word	0x0000e604
    87e0:	0000e619 	.word	0x0000e619
    87e4:	0000e62e 	.word	0x0000e62e
    87e8:	0000e643 	.word	0x0000e643
    87ec:	0000e658 	.word	0x0000e658
    87f0:	0000e66d 	.word	0x0000e66d
    87f4:	0000e682 	.word	0x0000e682
    87f8:	0000e697 	.word	0x0000e697
    87fc:	0000e6ac 	.word	0x0000e6ac
    8800:	0000e6c1 	.word	0x0000e6c1
    8804:	0000e6d6 	.word	0x0000e6d6
    8808:	0000e6ea 	.word	0x0000e6ea
    880c:	0000e6fe 	.word	0x0000e6fe
    8810:	0000e712 	.word	0x0000e712
    8814:	0000e726 	.word	0x0000e726
    8818:	0000e73a 	.word	0x0000e73a
    881c:	0000e74e 	.word	0x0000e74e
    8820:	0000e762 	.word	0x0000e762
    8824:	0000e776 	.word	0x0000e776
    8828:	0000e78a 	.word	0x0000e78a
    882c:	0000e79e 	.word	0x0000e79e
    8830:	0000e7b2 	.word	0x0000e7b2
    8834:	0000e7c6 	.word	0x0000e7c6
    8838:	0000e7d9 	.word	0x0000e7d9
    883c:	0000e7ec 	.word	0x0000e7ec
    8840:	0000e7ff 	.word	0x0000e7ff
    8844:	0000e814 	.word	0x0000e814
    8848:	47b8      	blx	r7
    884a:	4601      	mov	r1, r0
    884c:	4852      	ldr	r0, [pc, #328]	; (8998 <main_loop+0x1180>)
    884e:	47a0      	blx	r4
				xprintf("PORT1CONTROL10 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT1CONTROL10));
    8850:	201d      	movs	r0, #29
    8852:	47b8      	blx	r7
    8854:	4601      	mov	r1, r0
    8856:	4851      	ldr	r0, [pc, #324]	; (899c <main_loop+0x1184>)
    8858:	47a0      	blx	r4
				xprintf("PORT2CONTROL10 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT2CONTROL10));
    885a:	202d      	movs	r0, #45	; 0x2d
    885c:	47b8      	blx	r7
    885e:	4601      	mov	r1, r0
    8860:	484f      	ldr	r0, [pc, #316]	; (89a0 <main_loop+0x1188>)
    8862:	47a0      	blx	r4
				xprintf("PORT3CONTROL10 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT3CONTROL10));
    8864:	203d      	movs	r0, #61	; 0x3d
    8866:	47b8      	blx	r7
    8868:	4601      	mov	r1, r0
    886a:	484e      	ldr	r0, [pc, #312]	; (89a4 <main_loop+0x118c>)
    886c:	47a0      	blx	r4
				xprintf("PORT2CONTROL20 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT2CONTROL20));
    886e:	20a3      	movs	r0, #163	; 0xa3
    8870:	47b8      	blx	r7
    8872:	4601      	mov	r1, r0
    8874:	484c      	ldr	r0, [pc, #304]	; (89a8 <main_loop+0x1190>)
    8876:	47a0      	blx	r4
				xprintf("PORT1CONTROL12 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT1CONTROL12));
    8878:	20b0      	movs	r0, #176	; 0xb0
    887a:	47b8      	blx	r7
    887c:	4601      	mov	r1, r0
    887e:	484b      	ldr	r0, [pc, #300]	; (89ac <main_loop+0x1194>)
    8880:	47a0      	blx	r4
				xprintf("PORT2CONTROL12 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT2CONTROL12));
    8882:	20c0      	movs	r0, #192	; 0xc0
    8884:	47b8      	blx	r7
    8886:	4601      	mov	r1, r0
    8888:	4849      	ldr	r0, [pc, #292]	; (89b0 <main_loop+0x1198>)
    888a:	47a0      	blx	r4
				xprintf("PORT3CONTROL12 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT3CONTROL12));
    888c:	20d0      	movs	r0, #208	; 0xd0
    888e:	47b8      	blx	r7
    8890:	4601      	mov	r1, r0
    8892:	4848      	ldr	r0, [pc, #288]	; (89b4 <main_loop+0x119c>)
    8894:	47a0      	blx	r4
				xprintf("PORT4CONTROL12 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT4CONTROL12));
    8896:	20f0      	movs	r0, #240	; 0xf0
    8898:	47b8      	blx	r7
    889a:	4601      	mov	r1, r0
    889c:	4846      	ldr	r0, [pc, #280]	; (89b8 <main_loop+0x11a0>)
    889e:	47a0      	blx	r4
				xprintf("PORT1CONTROL13 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT1CONTROL13));
    88a0:	20b1      	movs	r0, #177	; 0xb1
    88a2:	47b8      	blx	r7
    88a4:	4601      	mov	r1, r0
    88a6:	4845      	ldr	r0, [pc, #276]	; (89bc <main_loop+0x11a4>)
    88a8:	47a0      	blx	r4
				xprintf("PORT2CONTROL13 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT2CONTROL13));
    88aa:	20c1      	movs	r0, #193	; 0xc1
    88ac:	47b8      	blx	r7
    88ae:	4601      	mov	r1, r0
    88b0:	4843      	ldr	r0, [pc, #268]	; (89c0 <main_loop+0x11a8>)
    88b2:	47a0      	blx	r4
				xprintf("PORT3CONTROL13 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT3CONTROL13));
    88b4:	20d1      	movs	r0, #209	; 0xd1
    88b6:	47b8      	blx	r7
    88b8:	4601      	mov	r1, r0
    88ba:	4842      	ldr	r0, [pc, #264]	; (89c4 <main_loop+0x11ac>)
    88bc:	47a0      	blx	r4
				xprintf("PORT4CONTROL13 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT4CONTROL13));
    88be:	20f1      	movs	r0, #241	; 0xf1
    88c0:	47b8      	blx	r7
    88c2:	4601      	mov	r1, r0
    88c4:	4840      	ldr	r0, [pc, #256]	; (89c8 <main_loop+0x11b0>)
    88c6:	47a0      	blx	r4
				xprintf("PORT1CONTROL14 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT1CONTROL14));
    88c8:	20b2      	movs	r0, #178	; 0xb2
    88ca:	47b8      	blx	r7
    88cc:	4601      	mov	r1, r0
    88ce:	483f      	ldr	r0, [pc, #252]	; (89cc <main_loop+0x11b4>)
    88d0:	47a0      	blx	r4
				xprintf("PORT2CONTROL14 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT2CONTROL14));
    88d2:	20c2      	movs	r0, #194	; 0xc2
    88d4:	47b8      	blx	r7
    88d6:	4601      	mov	r1, r0
    88d8:	483d      	ldr	r0, [pc, #244]	; (89d0 <main_loop+0x11b8>)
    88da:	47a0      	blx	r4
				xprintf("PORT3CONTROL14 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT3CONTROL14));
    88dc:	20d2      	movs	r0, #210	; 0xd2
    88de:	47b8      	blx	r7
    88e0:	4601      	mov	r1, r0
    88e2:	483c      	ldr	r0, [pc, #240]	; (89d4 <main_loop+0x11bc>)
    88e4:	47a0      	blx	r4
				xprintf("PORT4CONTROL14 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT4CONTROL14));
    88e6:	20f2      	movs	r0, #242	; 0xf2
    88e8:	47b8      	blx	r7
    88ea:	4601      	mov	r1, r0
    88ec:	483a      	ldr	r0, [pc, #232]	; (89d8 <main_loop+0x11c0>)
    88ee:	47a0      	blx	r4
				xprintf("PORT1CONTROL15 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT1CONTROL15));
    88f0:	20b3      	movs	r0, #179	; 0xb3
    88f2:	47b8      	blx	r7
    88f4:	4601      	mov	r1, r0
    88f6:	4839      	ldr	r0, [pc, #228]	; (89dc <main_loop+0x11c4>)
    88f8:	47a0      	blx	r4
				xprintf("PORT2CONTROL15 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT2CONTROL15));
    88fa:	20c3      	movs	r0, #195	; 0xc3
    88fc:	47b8      	blx	r7
    88fe:	4601      	mov	r1, r0
    8900:	4837      	ldr	r0, [pc, #220]	; (89e0 <main_loop+0x11c8>)
    8902:	47a0      	blx	r4
				xprintf("PORT3CONTROL15 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT3CONTROL15));
    8904:	20d3      	movs	r0, #211	; 0xd3
    8906:	47b8      	blx	r7
    8908:	4601      	mov	r1, r0
    890a:	4836      	ldr	r0, [pc, #216]	; (89e4 <main_loop+0x11cc>)
    890c:	47a0      	blx	r4
				xprintf("PORT4CONTROL15 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT4CONTROL15));
    890e:	20f3      	movs	r0, #243	; 0xf3
    8910:	47b8      	blx	r7
    8912:	4601      	mov	r1, r0
    8914:	4834      	ldr	r0, [pc, #208]	; (89e8 <main_loop+0x11d0>)
    8916:	47a0      	blx	r4
				xprintf("PORT1CONTROL16 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT1CONTROL16));
    8918:	20b4      	movs	r0, #180	; 0xb4
    891a:	47b8      	blx	r7
    891c:	4601      	mov	r1, r0
    891e:	4833      	ldr	r0, [pc, #204]	; (89ec <main_loop+0x11d4>)
    8920:	47a0      	blx	r4
				xprintf("PORT2CONTROL16 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT2CONTROL16));
    8922:	20c4      	movs	r0, #196	; 0xc4
    8924:	47b8      	blx	r7
    8926:	4601      	mov	r1, r0
    8928:	4831      	ldr	r0, [pc, #196]	; (89f0 <main_loop+0x11d8>)
    892a:	47a0      	blx	r4
				xprintf("PORT3CONTROL16 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT3CONTROL16));
    892c:	20d4      	movs	r0, #212	; 0xd4
    892e:	47b8      	blx	r7
    8930:	4601      	mov	r1, r0
    8932:	4830      	ldr	r0, [pc, #192]	; (89f4 <main_loop+0x11dc>)
    8934:	47a0      	blx	r4
				xprintf("PORT4CONTROL16 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT4CONTROL16));
    8936:	20f4      	movs	r0, #244	; 0xf4
    8938:	47b8      	blx	r7
    893a:	4601      	mov	r1, r0
    893c:	482e      	ldr	r0, [pc, #184]	; (89f8 <main_loop+0x11e0>)
    893e:	47a0      	blx	r4
				xprintf("PORT1CONTROL17 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT1CONTROL17));
    8940:	20b5      	movs	r0, #181	; 0xb5
    8942:	47b8      	blx	r7
    8944:	4601      	mov	r1, r0
    8946:	482d      	ldr	r0, [pc, #180]	; (89fc <main_loop+0x11e4>)
    8948:	47a0      	blx	r4
				xprintf("PORT2CONTROL17 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT2CONTROL17));
    894a:	20c5      	movs	r0, #197	; 0xc5
    894c:	47b8      	blx	r7
    894e:	4601      	mov	r1, r0
    8950:	482b      	ldr	r0, [pc, #172]	; (8a00 <main_loop+0x11e8>)
    8952:	47a0      	blx	r4
				xprintf("PORT3CONTROL17 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT3CONTROL17)); 
    8954:	20d5      	movs	r0, #213	; 0xd5
    8956:	47b8      	blx	r7
    8958:	4601      	mov	r1, r0
    895a:	482a      	ldr	r0, [pc, #168]	; (8a04 <main_loop+0x11ec>)
    895c:	47a0      	blx	r4
				xprintf("PORT4CONTROL17 = %x\r\n", readKSZreg(SPI_KSZ8794_PORT4CONTROL17));
    895e:	20f5      	movs	r0, #245	; 0xf5
    8960:	47b8      	blx	r7
    8962:	4601      	mov	r1, r0
    8964:	4828      	ldr	r0, [pc, #160]	; (8a08 <main_loop+0x11f0>)
    8966:	e591      	b.n	848c <main_loop+0xc74>
				xprintf("\r\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n");
    8968:	4828      	ldr	r0, [pc, #160]	; (8a0c <main_loop+0x11f4>)
    896a:	47a0      	blx	r4
				xprintf("<CLI DEBUG> Unknown command\r\n\r\nHelp Screen:\r\n\r\n");
    896c:	4828      	ldr	r0, [pc, #160]	; (8a10 <main_loop+0x11f8>)
    896e:	47a0      	blx	r4
				xprintf("R         [REBOOT] command\r\n");
    8970:	4828      	ldr	r0, [pc, #160]	; (8a14 <main_loop+0x11fc>)
    8972:	47a0      	blx	r4
				xprintf("D         [CONFIGURATION DEFAULT] command\r\n");
    8974:	4828      	ldr	r0, [pc, #160]	; (8a18 <main_loop+0x1200>)
    8976:	47a0      	blx	r4
				xprintf("X         [ID RESET] command\r\n");
    8978:	4828      	ldr	r0, [pc, #160]	; (8a1c <main_loop+0x1204>)
    897a:	47a0      	blx	r4
				xprintf("B         [BASESTATION] command\r\n");
    897c:	4828      	ldr	r0, [pc, #160]	; (8a20 <main_loop+0x1208>)
    897e:	47a0      	blx	r4
				xprintf("P         [PASS THROUGH] command\r\n");
    8980:	4828      	ldr	r0, [pc, #160]	; (8a24 <main_loop+0x120c>)
    8982:	47a0      	blx	r4
				xprintf("L         [LIVE BOARD PRINT] command\r\n");
    8984:	4828      	ldr	r0, [pc, #160]	; (8a28 <main_loop+0x1210>)
    8986:	47a0      	blx	r4
				xprintf("M         [READ MICREL REGISTERS] command\r\n");
    8988:	4828      	ldr	r0, [pc, #160]	; (8a2c <main_loop+0x1214>)
    898a:	47a0      	blx	r4
				xprintf("I         [IP SCHEME / NETWORK] command\r\n");
    898c:	4828      	ldr	r0, [pc, #160]	; (8a30 <main_loop+0x1218>)
    898e:	47a0      	blx	r4
				xprintf("S         [SPEED MAINLOOP] command\r\n\r\n");
    8990:	4828      	ldr	r0, [pc, #160]	; (8a34 <main_loop+0x121c>)
    8992:	f7ff bb2b 	b.w	7fec <main_loop+0x7d4>
    8996:	bf00      	nop
    8998:	0000e829 	.word	0x0000e829
    899c:	0000e83e 	.word	0x0000e83e
    89a0:	0000e854 	.word	0x0000e854
    89a4:	0000e86a 	.word	0x0000e86a
    89a8:	0000e880 	.word	0x0000e880
    89ac:	0000e896 	.word	0x0000e896
    89b0:	0000e8ac 	.word	0x0000e8ac
    89b4:	0000e8c2 	.word	0x0000e8c2
    89b8:	0000e8d8 	.word	0x0000e8d8
    89bc:	0000e8ee 	.word	0x0000e8ee
    89c0:	0000e904 	.word	0x0000e904
    89c4:	0000e91a 	.word	0x0000e91a
    89c8:	0000e930 	.word	0x0000e930
    89cc:	0000e946 	.word	0x0000e946
    89d0:	0000e95c 	.word	0x0000e95c
    89d4:	0000e972 	.word	0x0000e972
    89d8:	0000e988 	.word	0x0000e988
    89dc:	0000e99e 	.word	0x0000e99e
    89e0:	0000e9b4 	.word	0x0000e9b4
    89e4:	0000e9ca 	.word	0x0000e9ca
    89e8:	0000e9e0 	.word	0x0000e9e0
    89ec:	0000e9f6 	.word	0x0000e9f6
    89f0:	0000ea0c 	.word	0x0000ea0c
    89f4:	0000ea22 	.word	0x0000ea22
    89f8:	0000ea38 	.word	0x0000ea38
    89fc:	0000ea4e 	.word	0x0000ea4e
    8a00:	0000ea64 	.word	0x0000ea64
    8a04:	0000ea7a 	.word	0x0000ea7a
    8a08:	0000ea90 	.word	0x0000ea90
    8a0c:	0000dd50 	.word	0x0000dd50
    8a10:	0000eaa6 	.word	0x0000eaa6
    8a14:	0000ead6 	.word	0x0000ead6
    8a18:	0000eaf3 	.word	0x0000eaf3
    8a1c:	0000eb1f 	.word	0x0000eb1f
    8a20:	0000eb3e 	.word	0x0000eb3e
    8a24:	0000eb60 	.word	0x0000eb60
    8a28:	0000eb83 	.word	0x0000eb83
    8a2c:	0000ebaa 	.word	0x0000ebaa
    8a30:	0000ebd6 	.word	0x0000ebd6
    8a34:	0000ec00 	.word	0x0000ec00

00008a38 <main>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: Main start-point of whole application code
// Returns:     Nothing (NULL)
// *****************************************************************************************************************************************************************
int main(void)
{
    8a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t			ch;
	unsigned char	ID_index;
	unsigned char	ID_string[9];
	unsigned int	new_id;
			
	init_done = 0;
    8a3c:	4b72      	ldr	r3, [pc, #456]	; (8c08 <main+0x1d0>)
				
	/* Initialize the lower-level Atmel drivers, hardware and HAL interface */
	atmel_start_init();

	usart_async_get_io_descriptor(&USART_1, &io);
	usart_async_register_callback(&USART_1, USART_ASYNC_TXC_CB, tx_callb);
    8a3e:	4c73      	ldr	r4, [pc, #460]	; (8c0c <main+0x1d4>)
	init_done = 0;
    8a40:	2500      	movs	r5, #0
{
    8a42:	b089      	sub	sp, #36	; 0x24
	init_done = 0;
    8a44:	701d      	strb	r5, [r3, #0]
	atmel_start_init();
    8a46:	4b72      	ldr	r3, [pc, #456]	; (8c10 <main+0x1d8>)
    8a48:	4798      	blx	r3
	usart_async_get_io_descriptor(&USART_1, &io);
    8a4a:	4b72      	ldr	r3, [pc, #456]	; (8c14 <main+0x1dc>)
    8a4c:	4972      	ldr	r1, [pc, #456]	; (8c18 <main+0x1e0>)
    8a4e:	4873      	ldr	r0, [pc, #460]	; (8c1c <main+0x1e4>)
    8a50:	4798      	blx	r3
	usart_async_register_callback(&USART_1, USART_ASYNC_TXC_CB, tx_callb);
    8a52:	4a73      	ldr	r2, [pc, #460]	; (8c20 <main+0x1e8>)
    8a54:	4871      	ldr	r0, [pc, #452]	; (8c1c <main+0x1e4>)
    8a56:	2101      	movs	r1, #1
    8a58:	47a0      	blx	r4
	usart_async_register_callback(&USART_1, USART_ASYNC_RXC_CB, rx_callb);
    8a5a:	4a72      	ldr	r2, [pc, #456]	; (8c24 <main+0x1ec>)
    8a5c:	486f      	ldr	r0, [pc, #444]	; (8c1c <main+0x1e4>)
    8a5e:	4629      	mov	r1, r5
    8a60:	47a0      	blx	r4
	usart_async_enable(&USART_1);
    8a62:	4b71      	ldr	r3, [pc, #452]	; (8c28 <main+0x1f0>)
    8a64:	486d      	ldr	r0, [pc, #436]	; (8c1c <main+0x1e4>)
    8a66:	4798      	blx	r3
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    8a68:	4b70      	ldr	r3, [pc, #448]	; (8c2c <main+0x1f4>)
    8a6a:	f240 72fc 	movw	r2, #2044	; 0x7fc
    8a6e:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    8a70:	4014      	ands	r4, r2
    8a72:	d1fc      	bne.n	8a6e <main+0x36>
	((Adc *)hw)->DSEQCTRL.reg |= ADC_DSEQCTRL_INPUTCTRL;
    8a74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	
	hri_adc_set_DSEQCTRL_INPUTCTRL_bit(ADC0);
	_dma_set_source_address(DMA_CHANNEL_0, (const void *const)inputctrl_buff);
    8a76:	496e      	ldr	r1, [pc, #440]	; (8c30 <main+0x1f8>)
	uip_init();																									// initialize the IP stack

	/* Set the board MAC and IP address along with the network schemes */
	address_configure();
		
	if (((CONFIG *)&settings_buffer)->ID > 0x00000000) {
    8a78:	4e6e      	ldr	r6, [pc, #440]	; (8c34 <main+0x1fc>)
    8a7a:	f042 0201 	orr.w	r2, r2, #1
    8a7e:	639a      	str	r2, [r3, #56]	; 0x38
	_dma_set_source_address(DMA_CHANNEL_0, (const void *const)inputctrl_buff);
    8a80:	4620      	mov	r0, r4
    8a82:	4b6d      	ldr	r3, [pc, #436]	; (8c38 <main+0x200>)
    8a84:	4798      	blx	r3
	_dma_set_destination_address(DMA_CHANNEL_0, (void *)(uint32_t) &(ADC0->DSEQDATA.reg));
    8a86:	496d      	ldr	r1, [pc, #436]	; (8c3c <main+0x204>)
    8a88:	4b6d      	ldr	r3, [pc, #436]	; (8c40 <main+0x208>)
    8a8a:	4620      	mov	r0, r4
    8a8c:	4798      	blx	r3
	_dma_set_data_amount(DMA_CHANNEL_0, SEQ_LENGTH);
    8a8e:	210a      	movs	r1, #10
    8a90:	4620      	mov	r0, r4
    8a92:	4b6c      	ldr	r3, [pc, #432]	; (8c44 <main+0x20c>)
    8a94:	4798      	blx	r3
	_dma_enable_transaction(DMA_CHANNEL_0, false);
    8a96:	4621      	mov	r1, r4
    8a98:	4b6b      	ldr	r3, [pc, #428]	; (8c48 <main+0x210>)
    8a9a:	4620      	mov	r0, r4
    8a9c:	4798      	blx	r3
	xprintf("\r\n\r\n\r\n---------------------\r\nBOOT-UP\r\n---------------------\r\n\r\n");
    8a9e:	4c6b      	ldr	r4, [pc, #428]	; (8c4c <main+0x214>)
    8aa0:	486b      	ldr	r0, [pc, #428]	; (8c50 <main+0x218>)
    8aa2:	47a0      	blx	r4
	var_init();
    8aa4:	4b6b      	ldr	r3, [pc, #428]	; (8c54 <main+0x21c>)
    8aa6:	4798      	blx	r3
	gpio_init();
    8aa8:	4b6b      	ldr	r3, [pc, #428]	; (8c58 <main+0x220>)
    8aaa:	4798      	blx	r3
	comms_init();
    8aac:	4b6b      	ldr	r3, [pc, #428]	; (8c5c <main+0x224>)
    8aae:	4798      	blx	r3
	switch_init();
    8ab0:	4b6b      	ldr	r3, [pc, #428]	; (8c60 <main+0x228>)
    8ab2:	4798      	blx	r3
	switch_configure();
    8ab4:	4b6b      	ldr	r3, [pc, #428]	; (8c64 <main+0x22c>)
    8ab6:	4798      	blx	r3
	timer_setup();
    8ab8:	4b6b      	ldr	r3, [pc, #428]	; (8c68 <main+0x230>)
    8aba:	4798      	blx	r3
	ADC_init();
    8abc:	4b6b      	ldr	r3, [pc, #428]	; (8c6c <main+0x234>)
    8abe:	4798      	blx	r3
	crypto_init();
    8ac0:	4b6b      	ldr	r3, [pc, #428]	; (8c70 <main+0x238>)
    8ac2:	4798      	blx	r3
	uip_init();																									// initialize the IP stack
    8ac4:	4b6b      	ldr	r3, [pc, #428]	; (8c74 <main+0x23c>)
    8ac6:	4798      	blx	r3
	address_configure();
    8ac8:	4b6b      	ldr	r3, [pc, #428]	; (8c78 <main+0x240>)
    8aca:	4798      	blx	r3
	if (((CONFIG *)&settings_buffer)->ID > 0x00000000) {
    8acc:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    8ace:	2b00      	cmp	r3, #0
    8ad0:	d053      	beq.n	8b7a <main+0x142>
		/* Initialize the ring loop topology function */
		ring_init((unsigned char)(((CONFIG *)&settings_buffer)->loop_basestation), (unsigned char *)&mac_raw);
    8ad2:	496a      	ldr	r1, [pc, #424]	; (8c7c <main+0x244>)
    8ad4:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    8ad8:	4b69      	ldr	r3, [pc, #420]	; (8c80 <main+0x248>)
    8ada:	4798      	blx	r3
		xprintf("* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  *\r\n");
		xprintf("* PLEASE ENTER THE 32-BIT DEVICE [ID] BELOW                                                *\r\n");
		xprintf("********************************************************************************************\r\n");
	}
	
	if (((CONFIG *)&settings_buffer)->ID > 0x00000000) {
    8adc:	6af1      	ldr	r1, [r6, #44]	; 0x2c
    8ade:	2900      	cmp	r1, #0
    8ae0:	d158      	bne.n	8b94 <main+0x15c>
    8ae2:	4f68      	ldr	r7, [pc, #416]	; (8c84 <main+0x24c>)
		xprintf("MultiSense [boot-up & init completed ID = %d]\r\n", ((CONFIG *)&settings_buffer)->ID);
		xprintf("- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\r\n");
	} else {
		do {
			xprintf("\r\nEnter new [ID] now: ");
    8ae4:	4868      	ldr	r0, [pc, #416]	; (8c88 <main+0x250>)
    8ae6:	f04f 0a10 	mov.w	sl, #16
    8aea:	47a0      	blx	r4
    8aec:	46d3      	mov	fp, sl
			/* check for a character being pressed on the CLI keyboard */
					
			ID_index = 0;
    8aee:	2300      	movs	r3, #0
    8af0:	9301      	str	r3, [sp, #4]
					
			while (1) {
				gpio_set_pin_level(PB04_LED_PWR, 1);
				delay_ms(100);
    8af2:	2064      	movs	r0, #100	; 0x64
    8af4:	4d65      	ldr	r5, [pc, #404]	; (8c8c <main+0x254>)
    8af6:	f8c7 b098 	str.w	fp, [r7, #152]	; 0x98
				gpio_set_pin_level(PB04_LED_PWR, 0);
				delay_ms(100);
				
				if (io_read((struct io_descriptor *const)io, (uint8_t *const)&ch, 1)) {
    8afa:	f8df 811c 	ldr.w	r8, [pc, #284]	; 8c18 <main+0x1e0>
    8afe:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 8cdc <main+0x2a4>
				delay_ms(100);
    8b02:	47a8      	blx	r5
				delay_ms(100);
    8b04:	2064      	movs	r0, #100	; 0x64
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    8b06:	f8c7 a094 	str.w	sl, [r7, #148]	; 0x94
    8b0a:	47a8      	blx	r5
				if (io_read((struct io_descriptor *const)io, (uint8_t *const)&ch, 1)) {
    8b0c:	2201      	movs	r2, #1
    8b0e:	f10d 010f 	add.w	r1, sp, #15
    8b12:	f8d8 0000 	ldr.w	r0, [r8]
    8b16:	47c8      	blx	r9
    8b18:	9b01      	ldr	r3, [sp, #4]
    8b1a:	2800      	cmp	r0, #0
    8b1c:	d0e8      	beq.n	8af0 <main+0xb8>
					/* If so, then read and get the character pressed */
				
					if ((unsigned char)ch == 10) {
    8b1e:	f89d 100f 	ldrb.w	r1, [sp, #15]
    8b22:	290a      	cmp	r1, #10
    8b24:	d0e4      	beq.n	8af0 <main+0xb8>
						continue;
					}
				
					if (((unsigned char)ch == 13) && (ID_index)) {
    8b26:	290d      	cmp	r1, #13
    8b28:	d13c      	bne.n	8ba4 <main+0x16c>
    8b2a:	2b00      	cmp	r3, #0
    8b2c:	d0e0      	beq.n	8af0 <main+0xb8>
					ID_string[ID_index++] = (unsigned char)ch;
					xprintf("%c", ch);
				}
			}
			
			ID_string[ID_index] = 0;
    8b2e:	aa08      	add	r2, sp, #32
    8b30:	4413      	add	r3, r2
			xprintf("ID entered: %s\r\n", ID_string);
    8b32:	a905      	add	r1, sp, #20
			ID_string[ID_index] = 0;
    8b34:	2200      	movs	r2, #0
			xprintf("ID entered: %s\r\n", ID_string);
    8b36:	4856      	ldr	r0, [pc, #344]	; (8c90 <main+0x258>)
			ID_string[ID_index] = 0;
    8b38:	f803 2c0c 	strb.w	r2, [r3, #-12]
			xprintf("ID entered: %s\r\n", ID_string);
    8b3c:	47a0      	blx	r4
			xprintf("\r\nIs this correct Y/N?\r\n");
    8b3e:	4855      	ldr	r0, [pc, #340]	; (8c94 <main+0x25c>)
			while (1) {
				if (io_read((struct io_descriptor *const)io, (uint8_t *const)&ch, 1)) {
				/* If so, then read and get the character pressed */
				
					if (((unsigned char)ch == 'y') || ((unsigned char)ch == 'Y')) {
						sscanf((char *)ID_string, "%u", &new_id);
    8b40:	f8df a19c 	ldr.w	sl, [pc, #412]	; 8ce0 <main+0x2a8>
    8b44:	f8df b19c 	ldr.w	fp, [pc, #412]	; 8ce4 <main+0x2ac>
			xprintf("\r\nIs this correct Y/N?\r\n");
    8b48:	47a0      	blx	r4
				if (io_read((struct io_descriptor *const)io, (uint8_t *const)&ch, 1)) {
    8b4a:	2201      	movs	r2, #1
    8b4c:	f10d 010f 	add.w	r1, sp, #15
    8b50:	f8d8 0000 	ldr.w	r0, [r8]
    8b54:	47c8      	blx	r9
    8b56:	2800      	cmp	r0, #0
    8b58:	d049      	beq.n	8bee <main+0x1b6>
					if (((unsigned char)ch == 'y') || ((unsigned char)ch == 'Y')) {
    8b5a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8b5e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    8b62:	2b59      	cmp	r3, #89	; 0x59
    8b64:	d140      	bne.n	8be8 <main+0x1b0>
						sscanf((char *)ID_string, "%u", &new_id);
    8b66:	aa04      	add	r2, sp, #16
    8b68:	4651      	mov	r1, sl
    8b6a:	a805      	add	r0, sp, #20
    8b6c:	47d8      	blx	fp
		
						if (!new_id) {
    8b6e:	9b04      	ldr	r3, [sp, #16]
    8b70:	2b00      	cmp	r3, #0
    8b72:	d127      	bne.n	8bc4 <main+0x18c>
							xprintf("\r\nERROR ID cannot be <ZERO>!!!!!\r\n");
    8b74:	4848      	ldr	r0, [pc, #288]	; (8c98 <main+0x260>)
    8b76:	47a0      	blx	r4
							break;
    8b78:	e7b4      	b.n	8ae4 <main+0xac>
		xprintf("\r\n\r\n********************************************************************************************\r\n");
    8b7a:	4848      	ldr	r0, [pc, #288]	; (8c9c <main+0x264>)
    8b7c:	47a0      	blx	r4
		xprintf("* THE MULTI-SENSE DEVICE [ID] HAS NOT BEEN SET. THIS DEFICE WILL NOT FUNCTION OR RUN AS    *\r\n");
    8b7e:	4848      	ldr	r0, [pc, #288]	; (8ca0 <main+0x268>)
    8b80:	47a0      	blx	r4
		xprintf("* NORMAL UNTIL THE [ID] NUMBER HAS BEEN ENTERED BY THIS TERMINAL FACILITY.                 *\r\n");
    8b82:	4848      	ldr	r0, [pc, #288]	; (8ca4 <main+0x26c>)
    8b84:	47a0      	blx	r4
		xprintf("* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  *\r\n");
    8b86:	4848      	ldr	r0, [pc, #288]	; (8ca8 <main+0x270>)
    8b88:	47a0      	blx	r4
		xprintf("* PLEASE ENTER THE 32-BIT DEVICE [ID] BELOW                                                *\r\n");
    8b8a:	4848      	ldr	r0, [pc, #288]	; (8cac <main+0x274>)
    8b8c:	47a0      	blx	r4
		xprintf("********************************************************************************************\r\n");
    8b8e:	4848      	ldr	r0, [pc, #288]	; (8cb0 <main+0x278>)
    8b90:	47a0      	blx	r4
    8b92:	e7a3      	b.n	8adc <main+0xa4>
		xprintf("MultiSense [boot-up & init completed ID = %d]\r\n", ((CONFIG *)&settings_buffer)->ID);
    8b94:	4847      	ldr	r0, [pc, #284]	; (8cb4 <main+0x27c>)
    8b96:	47a0      	blx	r4
		xprintf("- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\r\n");
    8b98:	4847      	ldr	r0, [pc, #284]	; (8cb8 <main+0x280>)
    8b9a:	47a0      	blx	r4
		}
		while (1);
	}
	
	/* Create, enable and start the system watchdog (4 seconds timeout period) */
	watchdog_init();
    8b9c:	4b47      	ldr	r3, [pc, #284]	; (8cbc <main+0x284>)
    8b9e:	4798      	blx	r3
	
	/* Run the main-loop */
	main_loop();
    8ba0:	4b47      	ldr	r3, [pc, #284]	; (8cc0 <main+0x288>)
    8ba2:	4798      	blx	r3
					if ((unsigned char)ch < '0') {
    8ba4:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
    8ba8:	2a09      	cmp	r2, #9
    8baa:	d8a1      	bhi.n	8af0 <main+0xb8>
					if (ID_index == 8) {
    8bac:	2b08      	cmp	r3, #8
    8bae:	d09f      	beq.n	8af0 <main+0xb8>
					ID_string[ID_index++] = (unsigned char)ch;
    8bb0:	aa08      	add	r2, sp, #32
    8bb2:	1c5d      	adds	r5, r3, #1
    8bb4:	4413      	add	r3, r2
    8bb6:	b2ed      	uxtb	r5, r5
					xprintf("%c", ch);
    8bb8:	4842      	ldr	r0, [pc, #264]	; (8cc4 <main+0x28c>)
					ID_string[ID_index++] = (unsigned char)ch;
    8bba:	f803 1c0c 	strb.w	r1, [r3, #-12]
					xprintf("%c", ch);
    8bbe:	47a0      	blx	r4
					ID_string[ID_index++] = (unsigned char)ch;
    8bc0:	462b      	mov	r3, r5
    8bc2:	e795      	b.n	8af0 <main+0xb8>
						((CONFIG *)&settings_buffer)->ID = new_id;
    8bc4:	62f3      	str	r3, [r6, #44]	; 0x2c
						if (EEprom_settings(settings_buffer, SETTING_STRUCTURE_SIZE, 1) != ERR_NONE) {
    8bc6:	2201      	movs	r2, #1
    8bc8:	2180      	movs	r1, #128	; 0x80
    8bca:	481a      	ldr	r0, [pc, #104]	; (8c34 <main+0x1fc>)
    8bcc:	4b3e      	ldr	r3, [pc, #248]	; (8cc8 <main+0x290>)
    8bce:	4798      	blx	r3
    8bd0:	b140      	cbz	r0, 8be4 <main+0x1ac>
							xprintf("MultiSense [configuration ERROR WRITING]\r\n");
    8bd2:	483e      	ldr	r0, [pc, #248]	; (8ccc <main+0x294>)
							xprintf("MultiSense [configuration WRITTEN]\r\n");
    8bd4:	47a0      	blx	r4
						xprintf("\r\n\r\r\rRebooting...(please wait)\r\n\r\n");
    8bd6:	483e      	ldr	r0, [pc, #248]	; (8cd0 <main+0x298>)
    8bd8:	47a0      	blx	r4
						delay_ms(250);
    8bda:	20fa      	movs	r0, #250	; 0xfa
    8bdc:	47a8      	blx	r5
					   _reset_mcu();
    8bde:	4b3d      	ldr	r3, [pc, #244]	; (8cd4 <main+0x29c>)
    8be0:	4798      	blx	r3
    8be2:	e7b2      	b.n	8b4a <main+0x112>
							xprintf("MultiSense [configuration WRITTEN]\r\n");
    8be4:	483c      	ldr	r0, [pc, #240]	; (8cd8 <main+0x2a0>)
    8be6:	e7f5      	b.n	8bd4 <main+0x19c>
					} else if (((unsigned char)ch == 'n') || ((unsigned char)ch == 'N')) {
    8be8:	2b4e      	cmp	r3, #78	; 0x4e
    8bea:	d1ae      	bne.n	8b4a <main+0x112>
    8bec:	e77a      	b.n	8ae4 <main+0xac>
					delay_ms(100);
    8bee:	2064      	movs	r0, #100	; 0x64
    8bf0:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    8bf2:	2310      	movs	r3, #16
    8bf4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
					delay_ms(100);
    8bf8:	2064      	movs	r0, #100	; 0x64
    8bfa:	9301      	str	r3, [sp, #4]
    8bfc:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    8bfe:	9b01      	ldr	r3, [sp, #4]
    8c00:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    8c04:	e7a1      	b.n	8b4a <main+0x112>
    8c06:	bf00      	nop
    8c08:	2000759c 	.word	0x2000759c
    8c0c:	00001a91 	.word	0x00001a91
    8c10:	000002d1 	.word	0x000002d1
    8c14:	00001a69 	.word	0x00001a69
    8c18:	200081d0 	.word	0x200081d0
    8c1c:	200074f8 	.word	0x200074f8
    8c20:	00007149 	.word	0x00007149
    8c24:	00007015 	.word	0x00007015
    8c28:	00001a3d 	.word	0x00001a3d
    8c2c:	43001c00 	.word	0x43001c00
    8c30:	20000000 	.word	0x20000000
    8c34:	200081dc 	.word	0x200081dc
    8c38:	00002509 	.word	0x00002509
    8c3c:	43001c34 	.word	0x43001c34
    8c40:	000024f5 	.word	0x000024f5
    8c44:	0000251d 	.word	0x0000251d
    8c48:	0000256d 	.word	0x0000256d
    8c4c:	00000395 	.word	0x00000395
    8c50:	0000ec27 	.word	0x0000ec27
    8c54:	00006ddd 	.word	0x00006ddd
    8c58:	00006bc1 	.word	0x00006bc1
    8c5c:	000062ad 	.word	0x000062ad
    8c60:	00006331 	.word	0x00006331
    8c64:	00006359 	.word	0x00006359
    8c68:	00006265 	.word	0x00006265
    8c6c:	0000629d 	.word	0x0000629d
    8c70:	00006309 	.word	0x00006309
    8c74:	0000966d 	.word	0x0000966d
    8c78:	00006985 	.word	0x00006985
    8c7c:	2000825c 	.word	0x2000825c
    8c80:	00009251 	.word	0x00009251
    8c84:	41008000 	.word	0x41008000
    8c88:	0000eeee 	.word	0x0000eeee
    8c8c:	00001251 	.word	0x00001251
    8c90:	0000ef05 	.word	0x0000ef05
    8c94:	0000ef16 	.word	0x0000ef16
    8c98:	0000ef32 	.word	0x0000ef32
    8c9c:	0000ec67 	.word	0x0000ec67
    8ca0:	0000ecca 	.word	0x0000ecca
    8ca4:	0000ed29 	.word	0x0000ed29
    8ca8:	0000ed88 	.word	0x0000ed88
    8cac:	0000ede7 	.word	0x0000ede7
    8cb0:	0000ec6b 	.word	0x0000ec6b
    8cb4:	0000ee46 	.word	0x0000ee46
    8cb8:	0000ee76 	.word	0x0000ee76
    8cbc:	00006d91 	.word	0x00006d91
    8cc0:	00007819 	.word	0x00007819
    8cc4:	0000e0eb 	.word	0x0000e0eb
    8cc8:	0000b1b9 	.word	0x0000b1b9
    8ccc:	0000d7cb 	.word	0x0000d7cb
    8cd0:	0000ef55 	.word	0x0000ef55
    8cd4:	0000232d 	.word	0x0000232d
    8cd8:	0000d7f6 	.word	0x0000d7f6
    8cdc:	00001549 	.word	0x00001549
    8ce0:	0000ef2f 	.word	0x0000ef2f
    8ce4:	0000b395 	.word	0x0000b395

00008ce8 <nv_init>:

/**
 * \brief Initialize non-volatile storage
 */
void nv_init(void *descr)
{
    8ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	flash = (struct flash_descriptor *)descr;
    8cec:	4f12      	ldr	r7, [pc, #72]	; (8d38 <nv_init+0x50>)

	/* Storage must start at row start */
	ASSERT((CONF_STORAGE_MEMORY_START % (flash_get_page_size(flash) * 4)) == 0);
    8cee:	4e13      	ldr	r6, [pc, #76]	; (8d3c <nv_init+0x54>)
	flash = (struct flash_descriptor *)descr;
    8cf0:	6038      	str	r0, [r7, #0]
	ASSERT((CONF_STORAGE_MEMORY_START % (flash_get_page_size(flash) * 4)) == 0);
    8cf2:	47b0      	blx	r6
    8cf4:	0080      	lsls	r0, r0, #2
    8cf6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    8cfa:	fbb3 f3f0 	udiv	r3, r3, r0
    8cfe:	4358      	muls	r0, r3
    8d00:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
    8d04:	4c0e      	ldr	r4, [pc, #56]	; (8d40 <nv_init+0x58>)
    8d06:	4d0f      	ldr	r5, [pc, #60]	; (8d44 <nv_init+0x5c>)
    8d08:	4258      	negs	r0, r3
    8d0a:	4158      	adcs	r0, r3
    8d0c:	4621      	mov	r1, r4
    8d0e:	2235      	movs	r2, #53	; 0x35
    8d10:	47a8      	blx	r5
	/* Sector must be of integer number of rows */
	ASSERT((CONF_SECTOR_SIZE % ((flash_get_page_size(flash) * 4)) == 0));
    8d12:	6838      	ldr	r0, [r7, #0]
    8d14:	47b0      	blx	r6
    8d16:	0080      	lsls	r0, r0, #2
    8d18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    8d1c:	fbb3 f3f0 	udiv	r3, r3, r0
    8d20:	4358      	muls	r0, r3
    8d22:	4621      	mov	r1, r4
    8d24:	f5a0 5480 	sub.w	r4, r0, #4096	; 0x1000
    8d28:	4260      	negs	r0, r4
    8d2a:	4160      	adcs	r0, r4
    8d2c:	462b      	mov	r3, r5
    8d2e:	2237      	movs	r2, #55	; 0x37
}
    8d30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	ASSERT((CONF_SECTOR_SIZE % ((flash_get_page_size(flash) * 4)) == 0));
    8d34:	4718      	bx	r3
    8d36:	bf00      	nop
    8d38:	2000723c 	.word	0x2000723c
    8d3c:	000014f1 	.word	0x000014f1
    8d40:	0000ef78 	.word	0x0000ef78
    8d44:	00002009 	.word	0x00002009

00008d48 <nv_write>:
/**
 * \brief Write data to non-volatile storage
 */
void nv_write(const uint8_t sector, const uint16_t offset, const uint8_t *const data, const uint16_t size)
{
	uint32_t address = CONF_STORAGE_MEMORY_START + sector * CONF_SECTOR_SIZE + offset;
    8d48:	3010      	adds	r0, #16
{
    8d4a:	b570      	push	{r4, r5, r6, lr}
	uint32_t address = CONF_STORAGE_MEMORY_START + sector * CONF_SECTOR_SIZE + offset;
    8d4c:	eb01 3400 	add.w	r4, r1, r0, lsl #12

	/* Write access must start and end within the storage and must not write
	   more than a sector. */
	ASSERT((address <= NV_MEMORY_END) && ((address + size) <= (NV_MEMORY_END + 1))
    8d50:	f5b4 3f90 	cmp.w	r4, #73728	; 0x12000
{
    8d54:	4616      	mov	r6, r2
    8d56:	461d      	mov	r5, r3
	ASSERT((address <= NV_MEMORY_END) && ((address + size) <= (NV_MEMORY_END + 1))
    8d58:	da17      	bge.n	8d8a <nv_write+0x42>
    8d5a:	4423      	add	r3, r4
    8d5c:	f5b3 3f90 	cmp.w	r3, #73728	; 0x12000
    8d60:	d813      	bhi.n	8d8a <nv_write+0x42>
    8d62:	1868      	adds	r0, r5, r1
    8d64:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    8d68:	bfcc      	ite	gt
    8d6a:	2000      	movgt	r0, #0
    8d6c:	2001      	movle	r0, #1
    8d6e:	2244      	movs	r2, #68	; 0x44
    8d70:	4907      	ldr	r1, [pc, #28]	; (8d90 <nv_write+0x48>)
    8d72:	4b08      	ldr	r3, [pc, #32]	; (8d94 <nv_write+0x4c>)
    8d74:	4798      	blx	r3
	       && ((offset + size) <= CONF_SECTOR_SIZE));

	flash_append(flash, address, (uint8_t *)data, size);
    8d76:	4621      	mov	r1, r4
    8d78:	4807      	ldr	r0, [pc, #28]	; (8d98 <nv_write+0x50>)
    8d7a:	4c08      	ldr	r4, [pc, #32]	; (8d9c <nv_write+0x54>)
    8d7c:	6800      	ldr	r0, [r0, #0]
    8d7e:	462b      	mov	r3, r5
    8d80:	4632      	mov	r2, r6
    8d82:	46a4      	mov	ip, r4
}
    8d84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	flash_append(flash, address, (uint8_t *)data, size);
    8d88:	4760      	bx	ip
	ASSERT((address <= NV_MEMORY_END) && ((address + size) <= (NV_MEMORY_END + 1))
    8d8a:	2000      	movs	r0, #0
    8d8c:	e7ef      	b.n	8d6e <nv_write+0x26>
    8d8e:	bf00      	nop
    8d90:	0000ef78 	.word	0x0000ef78
    8d94:	00002009 	.word	0x00002009
    8d98:	2000723c 	.word	0x2000723c
    8d9c:	000013f5 	.word	0x000013f5

00008da0 <nv_read>:
/**
 * \brief Read data from non-volatile storage
 */
void nv_read(const uint8_t sector, const uint16_t offset, uint8_t *const data, const uint16_t size)
{
	uint32_t address = CONF_STORAGE_MEMORY_START + sector * CONF_SECTOR_SIZE + offset;
    8da0:	3010      	adds	r0, #16
{
    8da2:	b570      	push	{r4, r5, r6, lr}
	uint32_t address = CONF_STORAGE_MEMORY_START + sector * CONF_SECTOR_SIZE + offset;
    8da4:	eb01 3400 	add.w	r4, r1, r0, lsl #12

	/* Read access must start and end within the storage and must not read more
	   than a sector. */
	ASSERT((address <= NV_MEMORY_END) && ((address + size) <= (NV_MEMORY_END + 1))
    8da8:	f5b4 3f90 	cmp.w	r4, #73728	; 0x12000
{
    8dac:	4616      	mov	r6, r2
    8dae:	461d      	mov	r5, r3
	ASSERT((address <= NV_MEMORY_END) && ((address + size) <= (NV_MEMORY_END + 1))
    8db0:	da17      	bge.n	8de2 <nv_read+0x42>
    8db2:	4423      	add	r3, r4
    8db4:	f5b3 3f90 	cmp.w	r3, #73728	; 0x12000
    8db8:	d813      	bhi.n	8de2 <nv_read+0x42>
    8dba:	1868      	adds	r0, r5, r1
    8dbc:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    8dc0:	bfcc      	ite	gt
    8dc2:	2000      	movgt	r0, #0
    8dc4:	2001      	movle	r0, #1
    8dc6:	2253      	movs	r2, #83	; 0x53
    8dc8:	4907      	ldr	r1, [pc, #28]	; (8de8 <nv_read+0x48>)
    8dca:	4b08      	ldr	r3, [pc, #32]	; (8dec <nv_read+0x4c>)
    8dcc:	4798      	blx	r3
	       && ((offset + size) <= CONF_SECTOR_SIZE));

	flash_read(flash, address, data, size);
    8dce:	4621      	mov	r1, r4
    8dd0:	4807      	ldr	r0, [pc, #28]	; (8df0 <nv_read+0x50>)
    8dd2:	4c08      	ldr	r4, [pc, #32]	; (8df4 <nv_read+0x54>)
    8dd4:	6800      	ldr	r0, [r0, #0]
    8dd6:	462b      	mov	r3, r5
    8dd8:	4632      	mov	r2, r6
    8dda:	46a4      	mov	ip, r4
}
    8ddc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	flash_read(flash, address, data, size);
    8de0:	4760      	bx	ip
	ASSERT((address <= NV_MEMORY_END) && ((address + size) <= (NV_MEMORY_END + 1))
    8de2:	2000      	movs	r0, #0
    8de4:	e7ef      	b.n	8dc6 <nv_read+0x26>
    8de6:	bf00      	nop
    8de8:	0000ef78 	.word	0x0000ef78
    8dec:	00002009 	.word	0x00002009
    8df0:	2000723c 	.word	0x2000723c
    8df4:	000012fd 	.word	0x000012fd

00008df8 <nv_erase_sector>:
/**
 * \brief Erase a sector
 */
void nv_erase_sector(uint8_t sector)
{
	uint32_t address = CONF_STORAGE_MEMORY_START + sector * CONF_SECTOR_SIZE;
    8df8:	3010      	adds	r0, #16
{
    8dfa:	b570      	push	{r4, r5, r6, lr}
	uint32_t address = CONF_STORAGE_MEMORY_START + sector * CONF_SECTOR_SIZE;
    8dfc:	0304      	lsls	r4, r0, #12

	ASSERT(address <= NV_MEMORY_END);
    8dfe:	f5b4 3f90 	cmp.w	r4, #73728	; 0x12000
    8e02:	f04f 025f 	mov.w	r2, #95	; 0x5f
    8e06:	490a      	ldr	r1, [pc, #40]	; (8e30 <nv_erase_sector+0x38>)
    8e08:	4b0a      	ldr	r3, [pc, #40]	; (8e34 <nv_erase_sector+0x3c>)
    8e0a:	bf2c      	ite	cs
    8e0c:	2000      	movcs	r0, #0
    8e0e:	2001      	movcc	r0, #1
    8e10:	4798      	blx	r3

	flash_erase(flash, address, CONF_SECTOR_SIZE / flash_get_page_size(flash));
    8e12:	4b09      	ldr	r3, [pc, #36]	; (8e38 <nv_erase_sector+0x40>)
    8e14:	681d      	ldr	r5, [r3, #0]
    8e16:	4b09      	ldr	r3, [pc, #36]	; (8e3c <nv_erase_sector+0x44>)
    8e18:	4628      	mov	r0, r5
    8e1a:	4798      	blx	r3
    8e1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    8e20:	4621      	mov	r1, r4
    8e22:	fbb2 f2f0 	udiv	r2, r2, r0
    8e26:	4b06      	ldr	r3, [pc, #24]	; (8e40 <nv_erase_sector+0x48>)
    8e28:	4628      	mov	r0, r5
}
    8e2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	flash_erase(flash, address, CONF_SECTOR_SIZE / flash_get_page_size(flash));
    8e2e:	4718      	bx	r3
    8e30:	0000ef78 	.word	0x0000ef78
    8e34:	00002009 	.word	0x00002009
    8e38:	2000723c 	.word	0x2000723c
    8e3c:	000014f1 	.word	0x000014f1
    8e40:	0000147d 	.word	0x0000147d

00008e44 <nv_is_equal>:

/**
 * \brief Compare given data and data stored in non-volatile storage
 */
bool nv_is_equal(const uint8_t sector, const uint16_t offset, const uint8_t *const data, const uint16_t size)
{
    8e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t  tmp[64];
	uint16_t pos     = 0;
	uint32_t address = CONF_STORAGE_MEMORY_START + sector * CONF_SECTOR_SIZE + offset;
    8e48:	3010      	adds	r0, #16
    8e4a:	eb01 3700 	add.w	r7, r1, r0, lsl #12

	/* Read access must start and end within the storage and must not read more
	   than a sector. There must be at least one byte to compare to. */
	ASSERT((address <= NV_MEMORY_END) && ((address + size) <= (NV_MEMORY_END + 1))
    8e4e:	f5b7 3f90 	cmp.w	r7, #73728	; 0x12000
{
    8e52:	b091      	sub	sp, #68	; 0x44
    8e54:	4690      	mov	r8, r2
    8e56:	461e      	mov	r6, r3
	ASSERT((address <= NV_MEMORY_END) && ((address + size) <= (NV_MEMORY_END + 1))
    8e58:	da1b      	bge.n	8e92 <nv_is_equal+0x4e>
    8e5a:	443b      	add	r3, r7
    8e5c:	f5b3 3f90 	cmp.w	r3, #73728	; 0x12000
    8e60:	d817      	bhi.n	8e92 <nv_is_equal+0x4e>
    8e62:	4431      	add	r1, r6
    8e64:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    8e68:	dc13      	bgt.n	8e92 <nv_is_equal+0x4e>
    8e6a:	1c30      	adds	r0, r6, #0
    8e6c:	bf18      	it	ne
    8e6e:	2001      	movne	r0, #1
    8e70:	2270      	movs	r2, #112	; 0x70
    8e72:	4914      	ldr	r1, [pc, #80]	; (8ec4 <nv_is_equal+0x80>)
    8e74:	4b14      	ldr	r3, [pc, #80]	; (8ec8 <nv_is_equal+0x84>)
	       && ((offset + size) <= CONF_SECTOR_SIZE) && size);

	while (pos != size) {
		uint8_t cur_size = min(64, size - pos);

		flash_read(flash, address + pos, tmp, cur_size);
    8e76:	f8df 9054 	ldr.w	r9, [pc, #84]	; 8ecc <nv_is_equal+0x88>
    8e7a:	f8df a054 	ldr.w	sl, [pc, #84]	; 8ed0 <nv_is_equal+0x8c>
		if (memcmp(data + pos, tmp, cur_size)) {
    8e7e:	f8df b054 	ldr.w	fp, [pc, #84]	; 8ed4 <nv_is_equal+0x90>
	ASSERT((address <= NV_MEMORY_END) && ((address + size) <= (NV_MEMORY_END + 1))
    8e82:	4798      	blx	r3
	uint16_t pos     = 0;
    8e84:	2500      	movs	r5, #0
	while (pos != size) {
    8e86:	42b5      	cmp	r5, r6
    8e88:	d105      	bne.n	8e96 <nv_is_equal+0x52>
		}

		pos += cur_size;
	}

	return true;
    8e8a:	2001      	movs	r0, #1
}
    8e8c:	b011      	add	sp, #68	; 0x44
    8e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ASSERT((address <= NV_MEMORY_END) && ((address + size) <= (NV_MEMORY_END + 1))
    8e92:	2000      	movs	r0, #0
    8e94:	e7ec      	b.n	8e70 <nv_is_equal+0x2c>
		uint8_t cur_size = min(64, size - pos);
    8e96:	1b74      	subs	r4, r6, r5
    8e98:	2c40      	cmp	r4, #64	; 0x40
    8e9a:	bfa8      	it	ge
    8e9c:	2440      	movge	r4, #64	; 0x40
    8e9e:	b2e4      	uxtb	r4, r4
		flash_read(flash, address + pos, tmp, cur_size);
    8ea0:	466a      	mov	r2, sp
    8ea2:	1979      	adds	r1, r7, r5
    8ea4:	4623      	mov	r3, r4
    8ea6:	f8d9 0000 	ldr.w	r0, [r9]
    8eaa:	47d0      	blx	sl
		if (memcmp(data + pos, tmp, cur_size)) {
    8eac:	4622      	mov	r2, r4
    8eae:	4669      	mov	r1, sp
    8eb0:	eb08 0005 	add.w	r0, r8, r5
    8eb4:	47d8      	blx	fp
    8eb6:	b910      	cbnz	r0, 8ebe <nv_is_equal+0x7a>
		pos += cur_size;
    8eb8:	4425      	add	r5, r4
    8eba:	b2ad      	uxth	r5, r5
    8ebc:	e7e3      	b.n	8e86 <nv_is_equal+0x42>
			return false;
    8ebe:	2000      	movs	r0, #0
    8ec0:	e7e4      	b.n	8e8c <nv_is_equal+0x48>
    8ec2:	bf00      	nop
    8ec4:	0000ef78 	.word	0x0000ef78
    8ec8:	00002009 	.word	0x00002009
    8ecc:	2000723c 	.word	0x2000723c
    8ed0:	000012fd 	.word	0x000012fd
    8ed4:	0000b31d 	.word	0x0000b31d

00008ed8 <nv_is_empty>:

/**
 * \brief Check if given area is empty
 */
bool nv_is_empty(const uint8_t sector, const uint16_t offset, const uint16_t size)
{
    8ed8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint8_t  tmp[64];
	uint16_t pos     = 0;
	uint32_t address = CONF_STORAGE_MEMORY_START + sector * CONF_SECTOR_SIZE + offset;
    8edc:	3010      	adds	r0, #16
    8ede:	eb01 3700 	add.w	r7, r1, r0, lsl #12

	/* Read access must start and end within the storage and must not read more
	   than a sector. There must be at least one byte to compare to. */
	ASSERT((address <= NV_MEMORY_END) && ((address + size) <= (NV_MEMORY_END + 1))
    8ee2:	f5b7 3f90 	cmp.w	r7, #73728	; 0x12000
{
    8ee6:	b091      	sub	sp, #68	; 0x44
    8ee8:	4615      	mov	r5, r2
	ASSERT((address <= NV_MEMORY_END) && ((address + size) <= (NV_MEMORY_END + 1))
    8eea:	da1e      	bge.n	8f2a <nv_is_empty+0x52>
    8eec:	19d3      	adds	r3, r2, r7
    8eee:	f5b3 3f90 	cmp.w	r3, #73728	; 0x12000
    8ef2:	d81a      	bhi.n	8f2a <nv_is_empty+0x52>
    8ef4:	4411      	add	r1, r2
    8ef6:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    8efa:	dc16      	bgt.n	8f2a <nv_is_empty+0x52>
    8efc:	1c10      	adds	r0, r2, #0
    8efe:	bf18      	it	ne
    8f00:	2001      	movne	r0, #1
    8f02:	228c      	movs	r2, #140	; 0x8c
    8f04:	4916      	ldr	r1, [pc, #88]	; (8f60 <nv_is_empty+0x88>)
    8f06:	4b17      	ldr	r3, [pc, #92]	; (8f64 <nv_is_empty+0x8c>)

	while (pos != size) {
		uint8_t cur_size = min(64, size - pos);
		uint8_t i        = 0;

		flash_read(flash, address + pos, tmp, cur_size);
    8f08:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8f6c <nv_is_empty+0x94>
    8f0c:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8f70 <nv_is_empty+0x98>
	ASSERT((address <= NV_MEMORY_END) && ((address + size) <= (NV_MEMORY_END + 1))
    8f10:	4798      	blx	r3
	memset(tmp, 0xFF, 64);
    8f12:	2240      	movs	r2, #64	; 0x40
    8f14:	21ff      	movs	r1, #255	; 0xff
    8f16:	4668      	mov	r0, sp
    8f18:	4b13      	ldr	r3, [pc, #76]	; (8f68 <nv_is_empty+0x90>)
    8f1a:	4798      	blx	r3
	uint16_t pos     = 0;
    8f1c:	2600      	movs	r6, #0
	while (pos != size) {
    8f1e:	42ae      	cmp	r6, r5
    8f20:	d105      	bne.n	8f2e <nv_is_empty+0x56>
		}

		pos += cur_size;
	}

	return true;
    8f22:	2001      	movs	r0, #1
}
    8f24:	b011      	add	sp, #68	; 0x44
    8f26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ASSERT((address <= NV_MEMORY_END) && ((address + size) <= (NV_MEMORY_END + 1))
    8f2a:	2000      	movs	r0, #0
    8f2c:	e7e9      	b.n	8f02 <nv_is_empty+0x2a>
		uint8_t cur_size = min(64, size - pos);
    8f2e:	1bab      	subs	r3, r5, r6
    8f30:	2b40      	cmp	r3, #64	; 0x40
    8f32:	bfa8      	it	ge
    8f34:	2340      	movge	r3, #64	; 0x40
		flash_read(flash, address + pos, tmp, cur_size);
    8f36:	b2dc      	uxtb	r4, r3
    8f38:	4623      	mov	r3, r4
    8f3a:	466a      	mov	r2, sp
    8f3c:	19f1      	adds	r1, r6, r7
    8f3e:	f8d8 0000 	ldr.w	r0, [r8]
    8f42:	47c8      	blx	r9
    8f44:	2300      	movs	r3, #0
			if (tmp[i] != 0xFF) {
    8f46:	f81d 2003 	ldrb.w	r2, [sp, r3]
    8f4a:	2aff      	cmp	r2, #255	; 0xff
    8f4c:	d105      	bne.n	8f5a <nv_is_empty+0x82>
    8f4e:	3301      	adds	r3, #1
		for (; i < 64; i++) {
    8f50:	2b40      	cmp	r3, #64	; 0x40
    8f52:	d1f8      	bne.n	8f46 <nv_is_empty+0x6e>
		pos += cur_size;
    8f54:	1933      	adds	r3, r6, r4
    8f56:	b29e      	uxth	r6, r3
    8f58:	e7e1      	b.n	8f1e <nv_is_empty+0x46>
				return false;
    8f5a:	2000      	movs	r0, #0
    8f5c:	e7e2      	b.n	8f24 <nv_is_empty+0x4c>
    8f5e:	bf00      	nop
    8f60:	0000ef78 	.word	0x0000ef78
    8f64:	00002009 	.word	0x00002009
    8f68:	0000b385 	.word	0x0000b385
    8f6c:	2000723c 	.word	0x2000723c
    8f70:	000012fd 	.word	0x000012fd

00008f74 <nv_align_next_access_address>:
/**
 * \brief Align current point of write to actual based on type of previous write
 *        access
 */
uint16_t nv_align_next_access_address(const uint16_t address, const enum nv_alignment_type type)
{
    8f74:	b510      	push	{r4, lr}
    8f76:	4604      	mov	r4, r0
	switch (type) {
    8f78:	b129      	cbz	r1, 8f86 <nv_align_next_access_address+0x12>
    8f7a:	2901      	cmp	r1, #1
    8f7c:	d105      	bne.n	8f8a <nv_align_next_access_address+0x16>
	case SECTOR_HEADER_ALIGNMENT:
		return address;

	case BLOCK_WITH_DATA_ALIGNMENT:
		return (address + 127) & 0xFF80;
    8f7e:	347f      	adds	r4, #127	; 0x7f
    8f80:	f024 047f 	bic.w	r4, r4, #127	; 0x7f
    8f84:	b2a4      	uxth	r4, r4

	default:
		ASSERT(false);
		return address;
	}
}
    8f86:	4620      	mov	r0, r4
    8f88:	bd10      	pop	{r4, pc}
		ASSERT(false);
    8f8a:	22af      	movs	r2, #175	; 0xaf
    8f8c:	4902      	ldr	r1, [pc, #8]	; (8f98 <nv_align_next_access_address+0x24>)
    8f8e:	4b03      	ldr	r3, [pc, #12]	; (8f9c <nv_align_next_access_address+0x28>)
    8f90:	2000      	movs	r0, #0
    8f92:	4798      	blx	r3
		return address;
    8f94:	e7f7      	b.n	8f86 <nv_align_next_access_address+0x12>
    8f96:	bf00      	nop
    8f98:	0000ef78 	.word	0x0000ef78
    8f9c:	00002009 	.word	0x00002009

00008fa0 <find_item>:
 */
static struct nv_item *find_item(const uint16_t id)
{
	uint16_t i = 0;

	for (; i < mem.items_amount; i++) {
    8fa0:	4b0a      	ldr	r3, [pc, #40]	; (8fcc <find_item+0x2c>)
{
    8fa2:	b530      	push	{r4, r5, lr}
	for (; i < mem.items_amount; i++) {
    8fa4:	8d5c      	ldrh	r4, [r3, #42]	; 0x2a
    8fa6:	2200      	movs	r2, #0
    8fa8:	b291      	uxth	r1, r2
    8faa:	428c      	cmp	r4, r1
    8fac:	d801      	bhi.n	8fb2 <find_item+0x12>
		if (mem.items[i].id == id) {
			return &mem.items[i];
		}
	}
	return NULL;
    8fae:	2000      	movs	r0, #0
}
    8fb0:	bd30      	pop	{r4, r5, pc}
    8fb2:	1c51      	adds	r1, r2, #1
		if (mem.items[i].id == id) {
    8fb4:	eb03 0581 	add.w	r5, r3, r1, lsl #2
    8fb8:	f835 5c02 	ldrh.w	r5, [r5, #-2]
    8fbc:	4285      	cmp	r5, r0
    8fbe:	d103      	bne.n	8fc8 <find_item+0x28>
			return &mem.items[i];
    8fc0:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    8fc4:	3002      	adds	r0, #2
    8fc6:	bd30      	pop	{r4, r5, pc}
    8fc8:	460a      	mov	r2, r1
    8fca:	e7ed      	b.n	8fa8 <find_item+0x8>
    8fcc:	20007240 	.word	0x20007240

00008fd0 <calculate_block_header_checksum>:
 * \param[in] header The pointer to block header to calculate checksum of
 *
 * \return Checksum of a block header
 */
static uint16_t calculate_block_header_checksum(struct block_header *header)
{
    8fd0:	1c41      	adds	r1, r0, #1
    8fd2:	f100 020b 	add.w	r2, r0, #11
	uint8_t *tmp = (uint8_t *)header + sizeof(header->active);
	uint16_t crc = 0xFFFF;
    8fd6:	f64f 70ff 	movw	r0, #65535	; 0xffff
	uint8_t  i   = 0;

	for (; i < sizeof(struct block_header) - sizeof(header->active) - sizeof(header->checksum); i++) {
		uint8_t value;

		value = (uint8_t)((crc >> 8) ^ tmp[i]);
    8fda:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    8fde:	ea83 2310 	eor.w	r3, r3, r0, lsr #8
		value = value ^ (value >> 4);
    8fe2:	ea83 1313 	eor.w	r3, r3, r3, lsr #4
		crc   = (crc << 8) ^ ((uint16_t)value << 12) ^ ((uint16_t)value << 5) ^ (uint16_t)value;
    8fe6:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    8fea:	ea80 3003 	eor.w	r0, r0, r3, lsl #12
    8fee:	ea80 1043 	eor.w	r0, r0, r3, lsl #5
	for (; i < sizeof(struct block_header) - sizeof(header->active) - sizeof(header->checksum); i++) {
    8ff2:	428a      	cmp	r2, r1
		crc   = (crc << 8) ^ ((uint16_t)value << 12) ^ ((uint16_t)value << 5) ^ (uint16_t)value;
    8ff4:	b280      	uxth	r0, r0
	for (; i < sizeof(struct block_header) - sizeof(header->active) - sizeof(header->checksum); i++) {
    8ff6:	d1f0      	bne.n	8fda <calculate_block_header_checksum+0xa>
	}
	return crc;
}
    8ff8:	4770      	bx	lr
	...

00008ffc <write_and_verify>:
{
    8ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9000:	4604      	mov	r4, r0
	nv_write(sector, offset, data, size);
    9002:	f8df 8020 	ldr.w	r8, [pc, #32]	; 9024 <write_and_verify+0x28>
{
    9006:	460d      	mov	r5, r1
    9008:	4616      	mov	r6, r2
    900a:	461f      	mov	r7, r3
	nv_write(sector, offset, data, size);
    900c:	47c0      	blx	r8
	if (!nv_is_equal(sector, offset, data, size)) {
    900e:	4620      	mov	r0, r4
    9010:	4c03      	ldr	r4, [pc, #12]	; (9020 <write_and_verify+0x24>)
    9012:	463b      	mov	r3, r7
    9014:	4632      	mov	r2, r6
    9016:	4629      	mov	r1, r5
    9018:	46a4      	mov	ip, r4
}
    901a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	if (!nv_is_equal(sector, offset, data, size)) {
    901e:	4760      	bx	ip
    9020:	00008e45 	.word	0x00008e45
    9024:	00008d49 	.word	0x00008d49

00009028 <create_sector>:
{
    9028:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    902c:	4688      	mov	r8, r1
    902e:	4617      	mov	r7, r2
	uint8_t              active = 0;
    9030:	2100      	movs	r1, #0
	if (!nv_is_empty(sector, 0, CONF_SECTOR_SIZE)) {
    9032:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    9036:	4c21      	ldr	r4, [pc, #132]	; (90bc <create_sector+0x94>)
	uint8_t              active = 0;
    9038:	f88d 1003 	strb.w	r1, [sp, #3]
{
    903c:	4605      	mov	r5, r0
	if (!nv_is_empty(sector, 0, CONF_SECTOR_SIZE)) {
    903e:	47a0      	blx	r4
    9040:	4606      	mov	r6, r0
    9042:	b1d8      	cbz	r0, 907c <create_sector+0x54>
	memcpy(header.signature, SECTOR_SIGNATURE, 7);
    9044:	4b1e      	ldr	r3, [pc, #120]	; (90c0 <create_sector+0x98>)
	if (!write_and_verify(sector, 0, (uint8_t *)&header, sizeof(struct sector_header))) {
    9046:	4e1f      	ldr	r6, [pc, #124]	; (90c4 <create_sector+0x9c>)
	memcpy(header.signature, SECTOR_SIGNATURE, 7);
    9048:	681a      	ldr	r2, [r3, #0]
    904a:	f8cd 2009 	str.w	r2, [sp, #9]
    904e:	889a      	ldrh	r2, [r3, #4]
    9050:	799b      	ldrb	r3, [r3, #6]
    9052:	f88d 300f 	strb.w	r3, [sp, #15]
	header.active = 0xFF;
    9056:	23ff      	movs	r3, #255	; 0xff
	memcpy(header.signature, SECTOR_SIGNATURE, 7);
    9058:	f8ad 200d 	strh.w	r2, [sp, #13]
	header.active = 0xFF;
    905c:	f88d 3004 	strb.w	r3, [sp, #4]
	if (!write_and_verify(sector, 0, (uint8_t *)&header, sizeof(struct sector_header))) {
    9060:	aa01      	add	r2, sp, #4
    9062:	230c      	movs	r3, #12
    9064:	2100      	movs	r1, #0
    9066:	4628      	mov	r0, r5
	header.number = number;
    9068:	f8cd 8005 	str.w	r8, [sp, #5]
	if (!write_and_verify(sector, 0, (uint8_t *)&header, sizeof(struct sector_header))) {
    906c:	47b0      	blx	r6
    906e:	4604      	mov	r4, r0
    9070:	b978      	cbnz	r0, 9092 <create_sector+0x6a>
			return false;
    9072:	2400      	movs	r4, #0
}
    9074:	4620      	mov	r0, r4
    9076:	b004      	add	sp, #16
    9078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nv_erase_sector(sector);
    907c:	4628      	mov	r0, r5
    907e:	4b12      	ldr	r3, [pc, #72]	; (90c8 <create_sector+0xa0>)
    9080:	4798      	blx	r3
		if (!nv_is_empty(sector, 0, CONF_SECTOR_SIZE)) {
    9082:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    9086:	4631      	mov	r1, r6
    9088:	4628      	mov	r0, r5
    908a:	47a0      	blx	r4
    908c:	2800      	cmp	r0, #0
    908e:	d1d9      	bne.n	9044 <create_sector+0x1c>
    9090:	e7ef      	b.n	9072 <create_sector+0x4a>
	if (activate) {
    9092:	2f00      	cmp	r7, #0
    9094:	d0ee      	beq.n	9074 <create_sector+0x4c>
		if (!write_and_verify(sector, 0, &active, sizeof(active))) {
    9096:	2301      	movs	r3, #1
    9098:	f10d 0203 	add.w	r2, sp, #3
    909c:	2100      	movs	r1, #0
    909e:	4628      	mov	r0, r5
    90a0:	47b0      	blx	r6
    90a2:	4604      	mov	r4, r0
    90a4:	2800      	cmp	r0, #0
    90a6:	d0e4      	beq.n	9072 <create_sector+0x4a>
		mem.pow           = sizeof(struct sector_header);
    90a8:	4e08      	ldr	r6, [pc, #32]	; (90cc <create_sector+0xa4>)
		mem.pow           = nv_align_next_access_address(mem.pow, SECTOR_HEADER_ALIGNMENT);
    90aa:	4b09      	ldr	r3, [pc, #36]	; (90d0 <create_sector+0xa8>)
		mem.pow           = sizeof(struct sector_header);
    90ac:	200c      	movs	r0, #12
		mem.pow           = nv_align_next_access_address(mem.pow, SECTOR_HEADER_ALIGNMENT);
    90ae:	2100      	movs	r1, #0
		mem.pow           = sizeof(struct sector_header);
    90b0:	8030      	strh	r0, [r6, #0]
		mem.pow           = nv_align_next_access_address(mem.pow, SECTOR_HEADER_ALIGNMENT);
    90b2:	4798      	blx	r3
		mem.active_sector = sector;
    90b4:	f886 502c 	strb.w	r5, [r6, #44]	; 0x2c
		mem.pow           = nv_align_next_access_address(mem.pow, SECTOR_HEADER_ALIGNMENT);
    90b8:	8030      	strh	r0, [r6, #0]
    90ba:	e7db      	b.n	9074 <create_sector+0x4c>
    90bc:	00008ed9 	.word	0x00008ed9
    90c0:	0000efa8 	.word	0x0000efa8
    90c4:	00008ffd 	.word	0x00008ffd
    90c8:	00008df9 	.word	0x00008df9
    90cc:	20007240 	.word	0x20007240
    90d0:	00008f75 	.word	0x00008f75

000090d4 <nv_storage_init>:
{
    90d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		nv_read(sector, 0, (uint8_t *)&header, sizeof(struct sector_header));
    90d8:	4f4c      	ldr	r7, [pc, #304]	; (920c <nv_storage_init+0x138>)
		if ((header.active == 0) && (memcmp(header.signature, SECTOR_SIGNATURE, 7) == 0)) {
    90da:	f8df a154 	ldr.w	sl, [pc, #340]	; 9230 <nv_storage_init+0x15c>
{
    90de:	2500      	movs	r5, #0
    90e0:	b089      	sub	sp, #36	; 0x24
	uint32_t             last_sector_number = 0;
    90e2:	462c      	mov	r4, r5
	uint8_t              sector = 0, last_sector = 0xFF;
    90e4:	26ff      	movs	r6, #255	; 0xff
    90e6:	46b9      	mov	r9, r7
    90e8:	fa5f f885 	uxtb.w	r8, r5
		nv_read(sector, 0, (uint8_t *)&header, sizeof(struct sector_header));
    90ec:	230c      	movs	r3, #12
    90ee:	aa01      	add	r2, sp, #4
    90f0:	2100      	movs	r1, #0
    90f2:	4640      	mov	r0, r8
    90f4:	47b8      	blx	r7
		if ((header.active == 0) && (memcmp(header.signature, SECTOR_SIGNATURE, 7) == 0)) {
    90f6:	f89d 3004 	ldrb.w	r3, [sp, #4]
    90fa:	b963      	cbnz	r3, 9116 <nv_storage_init+0x42>
    90fc:	2207      	movs	r2, #7
    90fe:	4651      	mov	r1, sl
    9100:	f10d 0009 	add.w	r0, sp, #9
    9104:	4b42      	ldr	r3, [pc, #264]	; (9210 <nv_storage_init+0x13c>)
    9106:	4798      	blx	r3
    9108:	b928      	cbnz	r0, 9116 <nv_storage_init+0x42>
			if (header.number >= last_sector_number) {
    910a:	f8dd 3005 	ldr.w	r3, [sp, #5]
    910e:	42a3      	cmp	r3, r4
    9110:	bf24      	itt	cs
    9112:	461c      	movcs	r4, r3
    9114:	4646      	movcs	r6, r8
    9116:	3501      	adds	r5, #1
	for (; sector < SECTOR_AMOUNT; sector++) {
    9118:	2d02      	cmp	r5, #2
    911a:	d1e5      	bne.n	90e8 <nv_storage_init+0x14>
	if (last_sector == 0xFF) {
    911c:	2eff      	cmp	r6, #255	; 0xff
    911e:	d112      	bne.n	9146 <nv_storage_init+0x72>
			if (create_sector(sector, last_sector_number + 1, true)) {
    9120:	3401      	adds	r4, #1
    9122:	2201      	movs	r2, #1
    9124:	4621      	mov	r1, r4
    9126:	2000      	movs	r0, #0
    9128:	4d3a      	ldr	r5, [pc, #232]	; (9214 <nv_storage_init+0x140>)
    912a:	47a8      	blx	r5
    912c:	b940      	cbnz	r0, 9140 <nv_storage_init+0x6c>
    912e:	2201      	movs	r2, #1
    9130:	4621      	mov	r1, r4
    9132:	4610      	mov	r0, r2
    9134:	47a8      	blx	r5
    9136:	b918      	cbnz	r0, 9140 <nv_storage_init+0x6c>
			ASSERT(false);
    9138:	2297      	movs	r2, #151	; 0x97
    913a:	4937      	ldr	r1, [pc, #220]	; (9218 <nv_storage_init+0x144>)
    913c:	4b37      	ldr	r3, [pc, #220]	; (921c <nv_storage_init+0x148>)
    913e:	4798      	blx	r3
}
    9140:	b009      	add	sp, #36	; 0x24
    9142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	mem.active_sector = last_sector;
    9146:	4c36      	ldr	r4, [pc, #216]	; (9220 <nv_storage_init+0x14c>)
	mem.pow = nv_align_next_access_address(sizeof(struct sector_header), SECTOR_HEADER_ALIGNMENT);
    9148:	4d36      	ldr	r5, [pc, #216]	; (9224 <nv_storage_init+0x150>)
	mem.active_sector = last_sector;
    914a:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
	mem.pow = nv_align_next_access_address(sizeof(struct sector_header), SECTOR_HEADER_ALIGNMENT);
    914e:	2100      	movs	r1, #0
    9150:	200c      	movs	r0, #12
    9152:	47a8      	blx	r5
			address = CONF_STORAGE_MEMORY_START + number * CONF_SECTOR_SIZE + mem.pow;
    9154:	f106 0710 	add.w	r7, r6, #16
    9158:	033f      	lsls	r7, r7, #12
	mem.pow = nv_align_next_access_address(sizeof(struct sector_header), SECTOR_HEADER_ALIGNMENT);
    915a:	8020      	strh	r0, [r4, #0]
			if (address >= NV_SECTOR_END(number)) {
    915c:	f607 7aff 	addw	sl, r7, #4095	; 0xfff
		nv_read(number, mem.pow, (uint8_t *)&header, sizeof(struct block_header));
    9160:	f10d 0810 	add.w	r8, sp, #16
    9164:	230e      	movs	r3, #14
    9166:	4642      	mov	r2, r8
    9168:	8821      	ldrh	r1, [r4, #0]
    916a:	4630      	mov	r0, r6
    916c:	47c8      	blx	r9
    916e:	2300      	movs	r3, #0
			if (((uint8_t *)&header)[i] != 0xFF) {
    9170:	f818 2003 	ldrb.w	r2, [r8, r3]
    9174:	2aff      	cmp	r2, #255	; 0xff
    9176:	d134      	bne.n	91e2 <nv_storage_init+0x10e>
    9178:	3301      	adds	r3, #1
		for (i = 0; i < sizeof(struct block_header); i++) {
    917a:	2b0e      	cmp	r3, #14
    917c:	d1f8      	bne.n	9170 <nv_storage_init+0x9c>
    917e:	e7df      	b.n	9140 <nv_storage_init+0x6c>
			mem.pow = nv_align_next_access_address(mem.pow + sizeof(struct block_header), BLOCK_WITH_DATA_ALIGNMENT);
    9180:	8820      	ldrh	r0, [r4, #0]
    9182:	300e      	adds	r0, #14
    9184:	2101      	movs	r1, #1
    9186:	b280      	uxth	r0, r0
			mem.pow = nv_align_next_access_address(mem.pow, BLOCK_WITH_DATA_ALIGNMENT);
    9188:	47a8      	blx	r5
    918a:	8020      	strh	r0, [r4, #0]
    918c:	e7ea      	b.n	9164 <nv_storage_init+0x90>
			struct nv_item *item = find_item(header.id);
    918e:	f8bd b012 	ldrh.w	fp, [sp, #18]
    9192:	4b25      	ldr	r3, [pc, #148]	; (9228 <nv_storage_init+0x154>)
    9194:	4658      	mov	r0, fp
    9196:	4798      	blx	r3
			if (!item) {
    9198:	b940      	cbnz	r0, 91ac <nv_storage_init+0xd8>
				item     = &mem.items[mem.items_amount++];
    919a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    919c:	1c59      	adds	r1, r3, #1
    919e:	009b      	lsls	r3, r3, #2
    91a0:	1c98      	adds	r0, r3, #2
				item->id = header.id;
    91a2:	4423      	add	r3, r4
				item     = &mem.items[mem.items_amount++];
    91a4:	8561      	strh	r1, [r4, #42]	; 0x2a
    91a6:	4420      	add	r0, r4
				item->id = header.id;
    91a8:	f8a3 b002 	strh.w	fp, [r3, #2]
			if (header.item_size == 0) {
    91ac:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    91b0:	b943      	cbnz	r3, 91c4 <nv_storage_init+0xf0>
				*item = mem.items[--mem.items_amount];
    91b2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    91b4:	3b01      	subs	r3, #1
    91b6:	b29b      	uxth	r3, r3
    91b8:	8563      	strh	r3, [r4, #42]	; 0x2a
    91ba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    91be:	f8d3 3002 	ldr.w	r3, [r3, #2]
    91c2:	6003      	str	r3, [r0, #0]
			item->last_block = mem.pow;
    91c4:	8823      	ldrh	r3, [r4, #0]
    91c6:	8043      	strh	r3, [r0, #2]
			mem.pow += sizeof(struct block_header) + header.block_size;
    91c8:	f8bd 0016 	ldrh.w	r0, [sp, #22]
    91cc:	4418      	add	r0, r3
    91ce:	300e      	adds	r0, #14
    91d0:	b280      	uxth	r0, r0
			mem.pow = nv_align_next_access_address(mem.pow, BLOCK_WITH_DATA_ALIGNMENT);
    91d2:	2101      	movs	r1, #1
			mem.pow += sizeof(struct block_header) + header.block_size;
    91d4:	8020      	strh	r0, [r4, #0]
			mem.pow = nv_align_next_access_address(mem.pow, BLOCK_WITH_DATA_ALIGNMENT);
    91d6:	47a8      	blx	r5
    91d8:	8020      	strh	r0, [r4, #0]
			address = CONF_STORAGE_MEMORY_START + number * CONF_SECTOR_SIZE + mem.pow;
    91da:	4438      	add	r0, r7
			if (address >= NV_SECTOR_END(number)) {
    91dc:	4550      	cmp	r0, sl
    91de:	d3c1      	bcc.n	9164 <nv_storage_init+0x90>
    91e0:	e7ae      	b.n	9140 <nv_storage_init+0x6c>
		} else if (header.checksum != calculate_block_header_checksum(&header)) {
    91e2:	4640      	mov	r0, r8
    91e4:	4b11      	ldr	r3, [pc, #68]	; (922c <nv_storage_init+0x158>)
    91e6:	f8bd b01c 	ldrh.w	fp, [sp, #28]
    91ea:	4798      	blx	r3
    91ec:	4583      	cmp	fp, r0
    91ee:	d1c7      	bne.n	9180 <nv_storage_init+0xac>
		} else if (header.active) {
    91f0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    91f4:	2b00      	cmp	r3, #0
    91f6:	d0ca      	beq.n	918e <nv_storage_init+0xba>
			mem.pow += sizeof(struct block_header) + header.block_size;
    91f8:	8820      	ldrh	r0, [r4, #0]
    91fa:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    91fe:	4418      	add	r0, r3
    9200:	300e      	adds	r0, #14
    9202:	b280      	uxth	r0, r0
    9204:	8020      	strh	r0, [r4, #0]
			mem.pow = nv_align_next_access_address(mem.pow, BLOCK_WITH_DATA_ALIGNMENT);
    9206:	2101      	movs	r1, #1
    9208:	e7be      	b.n	9188 <nv_storage_init+0xb4>
    920a:	bf00      	nop
    920c:	00008da1 	.word	0x00008da1
    9210:	0000b31d 	.word	0x0000b31d
    9214:	00009029 	.word	0x00009029
    9218:	0000efb0 	.word	0x0000efb0
    921c:	00002009 	.word	0x00002009
    9220:	20007240 	.word	0x20007240
    9224:	00008f75 	.word	0x00008f75
    9228:	00008fa1 	.word	0x00008fa1
    922c:	00008fd1 	.word	0x00008fd1
    9230:	0000efa8 	.word	0x0000efa8

00009234 <persistent_storage_init>:

/**
 * \brief Initialize Persistent Storage
 */
void persistent_storage_init(void)
{
    9234:	b510      	push	{r4, lr}
	nv_init(&FLASH_0);
    9236:	4b03      	ldr	r3, [pc, #12]	; (9244 <persistent_storage_init+0x10>)
    9238:	4803      	ldr	r0, [pc, #12]	; (9248 <persistent_storage_init+0x14>)
    923a:	4798      	blx	r3
	nv_storage_init();
    923c:	4b03      	ldr	r3, [pc, #12]	; (924c <persistent_storage_init+0x18>)
}
    923e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	nv_storage_init();
    9242:	4718      	bx	r3
    9244:	00008ce9 	.word	0x00008ce9
    9248:	20007428 	.word	0x20007428
    924c:	000090d5 	.word	0x000090d5

00009250 <ring_init>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: Called by the main code application to setup and initialize the BPDU ring topology management
// Returns:     Nothing (NULL)
// *****************************************************************************************************************************************************************
void ring_init(unsigned char basestation, unsigned char *mac_raw)
{
    9250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int				loop;

	/* set flags to indicate first time boot-up */
	first = 1;
    9254:	4c4c      	ldr	r4, [pc, #304]	; (9388 <ring_init+0x138>)
    9256:	f8df 8154 	ldr.w	r8, [pc, #340]	; 93ac <ring_init+0x15c>
    925a:	f04f 0a01 	mov.w	sl, #1
	port_val = 0;
    925e:	2600      	movs	r6, #0
{
    9260:	460f      	mov	r7, r1
	first = 1;
    9262:	f884 a000 	strb.w	sl, [r4]
	port_val = 0;
    9266:	7066      	strb	r6, [r4, #1]

	/* "basestation" parameter determines if this MultiSense unit is a base-station or simple pass-through... */
	if (basestation) {
    9268:	4681      	mov	r9, r0
    926a:	2800      	cmp	r0, #0
    926c:	f000 8085 	beq.w	937a <ring_init+0x12a>
		xprintf("ETHERNET: Set as a base-station to manage Ethernet topology...\r\n");
    9270:	4846      	ldr	r0, [pc, #280]	; (938c <ring_init+0x13c>)

		/* Enable BPDU tags */
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA8, 0x00);
    9272:	4d47      	ldr	r5, [pc, #284]	; (9390 <ring_init+0x140>)
		xprintf("ETHERNET: Set as a base-station to manage Ethernet topology...\r\n");
    9274:	47c0      	blx	r8
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA8, 0x00);
    9276:	4631      	mov	r1, r6
    9278:	2070      	movs	r0, #112	; 0x70
    927a:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA7, 0x00);
    927c:	4631      	mov	r1, r6
    927e:	2071      	movs	r0, #113	; 0x71
    9280:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA6, 0x30);
    9282:	2130      	movs	r1, #48	; 0x30
    9284:	2072      	movs	r0, #114	; 0x72
    9286:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA5, 0x01);
    9288:	4651      	mov	r1, sl
    928a:	2073      	movs	r0, #115	; 0x73
    928c:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA4, 0x80);
    928e:	2180      	movs	r1, #128	; 0x80
    9290:	2074      	movs	r0, #116	; 0x74
    9292:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA3, 0xC2);
    9294:	21c2      	movs	r1, #194	; 0xc2
    9296:	2075      	movs	r0, #117	; 0x75
    9298:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA2, 0x00);
    929a:	4631      	mov	r1, r6
    929c:	2076      	movs	r0, #118	; 0x76
    929e:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA1, 0x00);
    92a0:	4631      	mov	r1, r6
    92a2:	2077      	movs	r0, #119	; 0x77
    92a4:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA0, 0x00);
    92a6:	4631      	mov	r1, r6
    92a8:	2078      	movs	r0, #120	; 0x78
    92aa:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_CONTROL0, 0x00);
    92ac:	4631      	mov	r1, r6
    92ae:	206e      	movs	r0, #110	; 0x6e
    92b0:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_CONTROL1, 0x00);
    92b2:	4631      	mov	r1, r6
    92b4:	206f      	movs	r0, #111	; 0x6f
    92b6:	47a8      	blx	r5
	
		/* Set the local context "mode" to indicate this is in fact a base-station */
		mode = 1;
    92b8:	f884 a002 	strb.w	sl, [r4, #2]
	}
	
	hysterysis = 0;

	/* Bridge DST MAC */
	wbuf[0] = 0x01;
    92bc:	2201      	movs	r2, #1
    92be:	7122      	strb	r2, [r4, #4]
	wbuf[3] = 0x00;
	wbuf[4] = 0x00;
	wbuf[5] = 0x00;

	/* Bridge SRC MAC */
	wbuf[6] = 0x01;
    92c0:	72a2      	strb	r2, [r4, #10]
	wbuf[7] = 0x80;
	wbuf[8] = 0xC2;
	wbuf[9] = 0x00;
	wbuf[10] = 0x00;
	wbuf[11] = 0x01;
    92c2:	73e2      	strb	r2, [r4, #15]
	wbuf[14] = 0x00;
	wbuf[15] = 0x07;
	wbuf[16] = 0x00;
	wbuf[17] = 0x00;
	wbuf[18] = 0x00;
	wbuf[19] = 0x01;
    92c4:	75e2      	strb	r2, [r4, #23]
	wbuf[2] = 0xC2;
    92c6:	21c2      	movs	r1, #194	; 0xc2

	/* BPDU Length/Type */
	wbuf[20] = 0x00;
	wbuf[21] = 0x27;
    92c8:	2227      	movs	r2, #39	; 0x27
	wbuf[2] = 0xC2;
    92ca:	71a1      	strb	r1, [r4, #6]
	wbuf[8] = 0xC2;
    92cc:	7321      	strb	r1, [r4, #12]
	wbuf[21] = 0x27;
    92ce:	7662      	strb	r2, [r4, #25]
	*((unsigned short int *)&wbuf[12]) = 0x01E0;
    92d0:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
	wbuf[22] = 0x42;
    92d4:	2242      	movs	r2, #66	; 0x42
	hysterysis = 0;
    92d6:	2300      	movs	r3, #0
	*((unsigned short int *)&wbuf[12]) = 0x01E0;
    92d8:	8221      	strh	r1, [r4, #16]
	wbuf[22] = 0x42;
    92da:	76a2      	strb	r2, [r4, #26]
	wbuf[23] = 0x42;
    92dc:	76e2      	strb	r2, [r4, #27]
	wbuf[1] = 0x80;
    92de:	2080      	movs	r0, #128	; 0x80
    wbuf[24] = 0x03;
    92e0:	2203      	movs	r2, #3
	wbuf[15] = 0x07;
    92e2:	2107      	movs	r1, #7
	wbuf[1] = 0x80;
    92e4:	7160      	strb	r0, [r4, #5]
	wbuf[3] = 0x00;
    92e6:	71e3      	strb	r3, [r4, #7]
	wbuf[4] = 0x00;
    92e8:	7223      	strb	r3, [r4, #8]
	wbuf[5] = 0x00;
    92ea:	7263      	strb	r3, [r4, #9]
	wbuf[7] = 0x80;
    92ec:	72e0      	strb	r0, [r4, #11]
	wbuf[9] = 0x00;
    92ee:	7363      	strb	r3, [r4, #13]
	wbuf[10] = 0x00;
    92f0:	73a3      	strb	r3, [r4, #14]
	wbuf[14] = 0x00;
    92f2:	74a3      	strb	r3, [r4, #18]
	wbuf[15] = 0x07;
    92f4:	74e1      	strb	r1, [r4, #19]
	wbuf[16] = 0x00;
    92f6:	7523      	strb	r3, [r4, #20]
	wbuf[17] = 0x00;
    92f8:	7563      	strb	r3, [r4, #21]
	wbuf[18] = 0x00;
    92fa:	75a3      	strb	r3, [r4, #22]
	wbuf[20] = 0x00;
    92fc:	7623      	strb	r3, [r4, #24]
    wbuf[24] = 0x03;
    92fe:	7722      	strb	r2, [r4, #28]

	/* BPDU Header */
	wbuf[25] = 0x00;
    9300:	7763      	strb	r3, [r4, #29]
	wbuf[26] = 0x00;
    9302:	77a3      	strb	r3, [r4, #30]
	wbuf[27] = 0x00;
    9304:	77e3      	strb	r3, [r4, #31]
	wbuf[28] = 0x00;
    9306:	f884 3020 	strb.w	r3, [r4, #32]

	/* BPDU data payload */
	wbuf[29] = mac_raw[0];
    930a:	783a      	ldrb	r2, [r7, #0]
    930c:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
	wbuf[30] = mac_raw[1];
    9310:	787a      	ldrb	r2, [r7, #1]
	hysterysis = 0;
    9312:	70e3      	strb	r3, [r4, #3]
	wbuf[30] = mac_raw[1];
    9314:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
	wbuf[31] = mac_raw[2];
    9318:	78ba      	ldrb	r2, [r7, #2]
    931a:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
	wbuf[32] = mac_raw[3];
    931e:	78fa      	ldrb	r2, [r7, #3]
    9320:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
	wbuf[33] = mac_raw[4];
    9324:	793a      	ldrb	r2, [r7, #4]
    9326:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
	wbuf[34] = mac_raw[5];
    932a:	797a      	ldrb	r2, [r7, #5]
    932c:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26

	/* BPDU Padding ZEROs */
	for (loop = 35; loop < 68; loop++) {
		wbuf[loop] = 0x00;
    9330:	4a18      	ldr	r2, [pc, #96]	; (9394 <ring_init+0x144>)
	for (loop = 35; loop < 68; loop++) {
    9332:	2523      	movs	r5, #35	; 0x23
		wbuf[loop] = 0x00;
    9334:	54ab      	strb	r3, [r5, r2]
	for (loop = 35; loop < 68; loop++) {
    9336:	3501      	adds	r5, #1
    9338:	2d44      	cmp	r5, #68	; 0x44
    933a:	d1fb      	bne.n	9334 <ring_init+0xe4>
	}
	
	wbuf[68] = 0x02;																											/* Tail TAG to inform SWITCH to forward to <Port 2> */
    933c:	2302      	movs	r3, #2

	xprintf("ETHERNET: Completed RING management init...\r\n");
    933e:	4816      	ldr	r0, [pc, #88]	; (9398 <ring_init+0x148>)
	wbuf[68] = 0x02;																											/* Tail TAG to inform SWITCH to forward to <Port 2> */
    9340:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
	xprintf("ETHERNET: Completed RING management init...\r\n");
    9344:	47c0      	blx	r8

	/* If we are a base-station, then send out the first BPDU frame now upon start-up */
	if (basestation) {		
    9346:	f1b9 0f00 	cmp.w	r9, #0
    934a:	d01b      	beq.n	9384 <ring_init+0x134>
		writeKSZreg(SPI_KSZ8794_GLOBAL10, 0x46);																				/* When [BS] switched selected, we are a base-station */
    934c:	4c10      	ldr	r4, [pc, #64]	; (9390 <ring_init+0x140>)
    934e:	2146      	movs	r1, #70	; 0x46
    9350:	200c      	movs	r0, #12
    9352:	47a0      	blx	r4
		writeKSZreg(SPI_KSZ8794_PORT2CONTROL2, 0x04);
    9354:	2104      	movs	r1, #4
    9356:	2022      	movs	r0, #34	; 0x22
    9358:	47a0      	blx	r4
		mac_async_write(&ETHERNET_MAC_0, (uint8_t *)&wbuf[0], 69);
    935a:	4b10      	ldr	r3, [pc, #64]	; (939c <ring_init+0x14c>)
    935c:	490d      	ldr	r1, [pc, #52]	; (9394 <ring_init+0x144>)
    935e:	4810      	ldr	r0, [pc, #64]	; (93a0 <ring_init+0x150>)
    9360:	2245      	movs	r2, #69	; 0x45
    9362:	4798      	blx	r3
		writeKSZreg(SPI_KSZ8794_PORT2CONTROL2, 0x00);
    9364:	2100      	movs	r1, #0
    9366:	2022      	movs	r0, #34	; 0x22
    9368:	47a0      	blx	r4
		writeKSZreg(SPI_KSZ8794_GLOBAL10, 0x44);
    936a:	4629      	mov	r1, r5
    936c:	200c      	movs	r0, #12
    936e:	47a0      	blx	r4
		
		xprintf("ETHERNET: Sent first BPDU...\r\n");
    9370:	4643      	mov	r3, r8
    9372:	480c      	ldr	r0, [pc, #48]	; (93a4 <ring_init+0x154>)
	}
}
    9374:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		xprintf("ETHERNET: Sent first BPDU...\r\n");
    9378:	4718      	bx	r3
		xprintf("ETHERNET: normal none-managed pass-through node...\r\n");
    937a:	480b      	ldr	r0, [pc, #44]	; (93a8 <ring_init+0x158>)
    937c:	47c0      	blx	r8
		mode = 0;
    937e:	f884 9002 	strb.w	r9, [r4, #2]
    9382:	e79b      	b.n	92bc <ring_init+0x6c>
    9384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9388:	2000726e 	.word	0x2000726e
    938c:	0000efd3 	.word	0x0000efd3
    9390:	0000b259 	.word	0x0000b259
    9394:	20007272 	.word	0x20007272
    9398:	0000f049 	.word	0x0000f049
    939c:	000015d1 	.word	0x000015d1
    93a0:	20007548 	.word	0x20007548
    93a4:	0000f077 	.word	0x0000f077
    93a8:	0000f014 	.word	0x0000f014
    93ac:	00000395 	.word	0x00000395

000093b0 <ring_check>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: Called by the main loop execution and checks every time to see if if storms and BPDUs arrive. This manages the storm until it subsides
// Returns:     Nothing (NULL)
// *****************************************************************************************************************************************************************
unsigned char ring_check(unsigned char bpdu_arrived, unsigned char *storm_state, unsigned char *ringbreak)
{
    93b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    93b4:	4616      	mov	r6, r2
	unsigned char	sendrelearn;

	/* Bound-checks and assertions */
	if (!storm_state) {
    93b6:	460f      	mov	r7, r1
    93b8:	b931      	cbnz	r1, 93c8 <ring_check+0x18>
		xprintf("ETHERNET: (!storm_state) ERROR\r\n");
    93ba:	484f      	ldr	r0, [pc, #316]	; (94f8 <ring_check+0x148>)
    93bc:	4b4f      	ldr	r3, [pc, #316]	; (94fc <ring_check+0x14c>)
    93be:	4798      	blx	r3
		return 0;
    93c0:	463d      	mov	r5, r7
		writeKSZreg(SPI_KSZ8794_GLOBAL10, 0x44);
	}

	first = 0;
	return sendrelearn;
    93c2:	4628      	mov	r0, r5
    93c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!ringbreak) {
    93c8:	b922      	cbnz	r2, 93d4 <ring_check+0x24>
		xprintf("ETHERNET: (!ringbreak) ERROR\r\n");
    93ca:	484d      	ldr	r0, [pc, #308]	; (9500 <ring_check+0x150>)
    93cc:	4b4b      	ldr	r3, [pc, #300]	; (94fc <ring_check+0x14c>)
    93ce:	4798      	blx	r3
		return 0;
    93d0:	4635      	mov	r5, r6
    93d2:	e7f6      	b.n	93c2 <ring_check+0x12>
	if (mode) {
    93d4:	4c4b      	ldr	r4, [pc, #300]	; (9504 <ring_check+0x154>)
    93d6:	78a5      	ldrb	r5, [r4, #2]
    93d8:	b1ed      	cbz	r5, 9416 <ring_check+0x66>
    93da:	780b      	ldrb	r3, [r1, #0]
		if ((!bpdu_arrived) && (!(*storm_state))) {
    93dc:	2800      	cmp	r0, #0
    93de:	d159      	bne.n	9494 <ring_check+0xe4>
    93e0:	2b00      	cmp	r3, #0
    93e2:	d157      	bne.n	9494 <ring_check+0xe4>
			if ((first) || ((!(*ringbreak))) && (hysterysis == 2)) {
    93e4:	7825      	ldrb	r5, [r4, #0]
    93e6:	b92d      	cbnz	r5, 93f4 <ring_check+0x44>
    93e8:	7813      	ldrb	r3, [r2, #0]
    93ea:	2b00      	cmp	r3, #0
    93ec:	d14e      	bne.n	948c <ring_check+0xdc>
    93ee:	78e3      	ldrb	r3, [r4, #3]
    93f0:	2b02      	cmp	r3, #2
    93f2:	d14b      	bne.n	948c <ring_check+0xdc>
				writeKSZreg(SPI_KSZ8794_PORT2CONTROL2, 0x06);
    93f4:	4d44      	ldr	r5, [pc, #272]	; (9508 <ring_check+0x158>)
    93f6:	2106      	movs	r1, #6
    93f8:	2022      	movs	r0, #34	; 0x22
    93fa:	47a8      	blx	r5
				port_val = 0x06;
    93fc:	2306      	movs	r3, #6
				writeKSZreg(SPI_KSZ8794_GLOBAL0, 0x2C);
    93fe:	212c      	movs	r1, #44	; 0x2c
    9400:	2002      	movs	r0, #2
				port_val = 0x06;
    9402:	7063      	strb	r3, [r4, #1]
				writeKSZreg(SPI_KSZ8794_GLOBAL0, 0x2C);
    9404:	47a8      	blx	r5
				delay_us(250);
    9406:	20fa      	movs	r0, #250	; 0xfa
    9408:	4b40      	ldr	r3, [pc, #256]	; (950c <ring_check+0x15c>)
				*ringbreak = 1;
    940a:	2501      	movs	r5, #1
				delay_us(250);
    940c:	4798      	blx	r3
				*ringbreak = 1;
    940e:	7035      	strb	r5, [r6, #0]
				xprintf("ETHERNET: [turning Ethernet <B> ON - RING BROKEN]...\r\n");
    9410:	483f      	ldr	r0, [pc, #252]	; (9510 <ring_check+0x160>)
    9412:	4b3a      	ldr	r3, [pc, #232]	; (94fc <ring_check+0x14c>)
    9414:	4798      	blx	r3
	if (*storm_state) {
    9416:	783b      	ldrb	r3, [r7, #0]
    9418:	b1fb      	cbz	r3, 945a <ring_check+0xaa>
		xprintf("ETHERNET: [storm subsided]...\r\n");
    941a:	483e      	ldr	r0, [pc, #248]	; (9514 <ring_check+0x164>)
    941c:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 94fc <ring_check+0x14c>
		*storm_state = 0;
    9420:	f04f 0800 	mov.w	r8, #0
		xprintf("ETHERNET: [storm subsided]...\r\n");
    9424:	47c8      	blx	r9
		writeKSZreg(SPI_KSZ8794_GLOBAL0, 0x2C);
    9426:	4b38      	ldr	r3, [pc, #224]	; (9508 <ring_check+0x158>)
		*storm_state = 0;
    9428:	f887 8000 	strb.w	r8, [r7]
		writeKSZreg(SPI_KSZ8794_GLOBAL0, 0x2C);
    942c:	212c      	movs	r1, #44	; 0x2c
    942e:	2002      	movs	r0, #2
    9430:	4798      	blx	r3
		if (mode) {
    9432:	78a3      	ldrb	r3, [r4, #2]
    9434:	b18b      	cbz	r3, 945a <ring_check+0xaa>
			delay_us(250);
    9436:	20fa      	movs	r0, #250	; 0xfa
    9438:	4b34      	ldr	r3, [pc, #208]	; (950c <ring_check+0x15c>)
			port_val = 0;
    943a:	f884 8001 	strb.w	r8, [r4, #1]
			delay_us(250);
    943e:	4798      	blx	r3
			*ringbreak = 0;
    9440:	f886 8000 	strb.w	r8, [r6]
			xprintf("ETHERNET: [turning Ethernet <B> OFF - RING INTACT]...\r\n");
    9444:	4834      	ldr	r0, [pc, #208]	; (9518 <ring_check+0x168>)
			while (mac_async_read_len(&ETHERNET_MAC_0) > 0) {
    9446:	4d35      	ldr	r5, [pc, #212]	; (951c <ring_check+0x16c>)
    9448:	4e35      	ldr	r6, [pc, #212]	; (9520 <ring_check+0x170>)
				mac_async_read(&ETHERNET_MAC_0, (uint8_t *)&uip_buf[0], sizeof(uip_buf));
    944a:	4f36      	ldr	r7, [pc, #216]	; (9524 <ring_check+0x174>)
			xprintf("ETHERNET: [turning Ethernet <B> OFF - RING INTACT]...\r\n");
    944c:	47c8      	blx	r9
			while (mac_async_read_len(&ETHERNET_MAC_0) > 0) {
    944e:	4628      	mov	r0, r5
    9450:	47b0      	blx	r6
    9452:	2800      	cmp	r0, #0
    9454:	d149      	bne.n	94ea <ring_check+0x13a>
			hysterysis = 0;
    9456:	70e0      	strb	r0, [r4, #3]
			sendrelearn = 1;
    9458:	2501      	movs	r5, #1
	if (mode) {
    945a:	78a3      	ldrb	r3, [r4, #2]
    945c:	b19b      	cbz	r3, 9486 <ring_check+0xd6>
		writeKSZreg(SPI_KSZ8794_PORT2CONTROL2, (0x04 | port_val));
    945e:	7861      	ldrb	r1, [r4, #1]
    9460:	4e29      	ldr	r6, [pc, #164]	; (9508 <ring_check+0x158>)
    9462:	f041 0104 	orr.w	r1, r1, #4
    9466:	2022      	movs	r0, #34	; 0x22
    9468:	47b0      	blx	r6
		writeKSZreg(SPI_KSZ8794_GLOBAL10, 0x46);
    946a:	2146      	movs	r1, #70	; 0x46
    946c:	200c      	movs	r0, #12
    946e:	47b0      	blx	r6
		mac_async_write(&ETHERNET_MAC_0, (uint8_t *)&wbuf[0], 69);
    9470:	2245      	movs	r2, #69	; 0x45
    9472:	492d      	ldr	r1, [pc, #180]	; (9528 <ring_check+0x178>)
    9474:	4b2d      	ldr	r3, [pc, #180]	; (952c <ring_check+0x17c>)
    9476:	4829      	ldr	r0, [pc, #164]	; (951c <ring_check+0x16c>)
    9478:	4798      	blx	r3
		writeKSZreg(SPI_KSZ8794_PORT2CONTROL2, port_val);
    947a:	7861      	ldrb	r1, [r4, #1]
    947c:	2022      	movs	r0, #34	; 0x22
    947e:	47b0      	blx	r6
		writeKSZreg(SPI_KSZ8794_GLOBAL10, 0x44);
    9480:	2144      	movs	r1, #68	; 0x44
    9482:	200c      	movs	r0, #12
    9484:	47b0      	blx	r6
	first = 0;
    9486:	2300      	movs	r3, #0
    9488:	7023      	strb	r3, [r4, #0]
	return sendrelearn;
    948a:	e79a      	b.n	93c2 <ring_check+0x12>
				hysterysis++;
    948c:	78e3      	ldrb	r3, [r4, #3]
    948e:	3301      	adds	r3, #1
    9490:	70e3      	strb	r3, [r4, #3]
    9492:	e7c0      	b.n	9416 <ring_check+0x66>
		else if (!(*storm_state)) {
    9494:	bb3b      	cbnz	r3, 94e6 <ring_check+0x136>
			if ((first) || (*ringbreak)) {
    9496:	7823      	ldrb	r3, [r4, #0]
    9498:	b913      	cbnz	r3, 94a0 <ring_check+0xf0>
    949a:	7835      	ldrb	r5, [r6, #0]
    949c:	2d00      	cmp	r5, #0
    949e:	d0ba      	beq.n	9416 <ring_check+0x66>
				writeKSZreg(SPI_KSZ8794_PORT2CONTROL2, 0x00);
    94a0:	f8df 8064 	ldr.w	r8, [pc, #100]	; 9508 <ring_check+0x158>
						mac_async_read(&ETHERNET_MAC_0, (uint8_t *)&uip_buf[0], sizeof(uip_buf));
    94a4:	f8df 907c 	ldr.w	r9, [pc, #124]	; 9524 <ring_check+0x174>
				writeKSZreg(SPI_KSZ8794_PORT2CONTROL2, 0x00);
    94a8:	2100      	movs	r1, #0
    94aa:	2022      	movs	r0, #34	; 0x22
    94ac:	47c0      	blx	r8
				port_val = 0;
    94ae:	2500      	movs	r5, #0
				writeKSZreg(SPI_KSZ8794_GLOBAL0, 0x2C);
    94b0:	212c      	movs	r1, #44	; 0x2c
    94b2:	2002      	movs	r0, #2
				port_val = 0;
    94b4:	7065      	strb	r5, [r4, #1]
				writeKSZreg(SPI_KSZ8794_GLOBAL0, 0x2C);
    94b6:	47c0      	blx	r8
				delay_us(250);
    94b8:	20fa      	movs	r0, #250	; 0xfa
    94ba:	4b14      	ldr	r3, [pc, #80]	; (950c <ring_check+0x15c>)
				while (mac_async_read_len(&ETHERNET_MAC_0) > 0) {
    94bc:	f8df 8060 	ldr.w	r8, [pc, #96]	; 9520 <ring_check+0x170>
				delay_us(250);
    94c0:	4798      	blx	r3
				*ringbreak = 0;
    94c2:	7035      	strb	r5, [r6, #0]
				xprintf("ETHERNET: [turning Ethernet <B> OFF - RING INTACT]...\r\n");
    94c4:	4814      	ldr	r0, [pc, #80]	; (9518 <ring_check+0x168>)
    94c6:	4b0d      	ldr	r3, [pc, #52]	; (94fc <ring_check+0x14c>)
				hysterysis = 0;
    94c8:	70e5      	strb	r5, [r4, #3]
				xprintf("ETHERNET: [turning Ethernet <B> OFF - RING INTACT]...\r\n");
    94ca:	4798      	blx	r3
				while (mac_async_read_len(&ETHERNET_MAC_0) > 0) {
    94cc:	4d13      	ldr	r5, [pc, #76]	; (951c <ring_check+0x16c>)
    94ce:	4628      	mov	r0, r5
    94d0:	47c0      	blx	r8
    94d2:	b908      	cbnz	r0, 94d8 <ring_check+0x128>
				sendrelearn = 1;
    94d4:	2501      	movs	r5, #1
    94d6:	e79e      	b.n	9416 <ring_check+0x66>
						mac_async_read(&ETHERNET_MAC_0, (uint8_t *)&uip_buf[0], sizeof(uip_buf));
    94d8:	f240 62a6 	movw	r2, #1702	; 0x6a6
    94dc:	4649      	mov	r1, r9
    94de:	4628      	mov	r0, r5
    94e0:	4b13      	ldr	r3, [pc, #76]	; (9530 <ring_check+0x180>)
    94e2:	4798      	blx	r3
    94e4:	e7f3      	b.n	94ce <ring_check+0x11e>
	sendrelearn = 0;
    94e6:	2500      	movs	r5, #0
    94e8:	e795      	b.n	9416 <ring_check+0x66>
				mac_async_read(&ETHERNET_MAC_0, (uint8_t *)&uip_buf[0], sizeof(uip_buf));
    94ea:	f240 62a6 	movw	r2, #1702	; 0x6a6
    94ee:	4639      	mov	r1, r7
    94f0:	4628      	mov	r0, r5
    94f2:	4b0f      	ldr	r3, [pc, #60]	; (9530 <ring_check+0x180>)
    94f4:	4798      	blx	r3
    94f6:	e7aa      	b.n	944e <ring_check+0x9e>
    94f8:	0000f096 	.word	0x0000f096
    94fc:	00000395 	.word	0x00000395
    9500:	0000f0b7 	.word	0x0000f0b7
    9504:	2000726e 	.word	0x2000726e
    9508:	0000b259 	.word	0x0000b259
    950c:	0000122d 	.word	0x0000122d
    9510:	0000f0d6 	.word	0x0000f0d6
    9514:	0000f145 	.word	0x0000f145
    9518:	0000f10d 	.word	0x0000f10d
    951c:	20007548 	.word	0x20007548
    9520:	00001641 	.word	0x00001641
    9524:	20008b96 	.word	0x20008b96
    9528:	20007272 	.word	0x20007272
    952c:	000015d1 	.word	0x000015d1
    9530:	0000160d 	.word	0x0000160d

00009534 <chksum>:

#if ! UIP_ARCH_CHKSUM
/*---------------------------------------------------------------------------*/
static u16_t
chksum(u16_t sum, const u8_t *data, u16_t len)
{
    9534:	b510      	push	{r4, lr}
  u16_t t;
  const u8_t *dataptr;
  const u8_t *last_byte;

  dataptr = data;
  last_byte = data + len - 1;
    9536:	3a01      	subs	r2, #1
    9538:	440a      	add	r2, r1
  
  while(dataptr < last_byte) {	/* At least two more bytes */
    953a:	4291      	cmp	r1, r2
    953c:	d309      	bcc.n	9552 <chksum+0x1e>
      sum++;		/* carry */
    }
    dataptr += 2;
  }
  
  if(dataptr == last_byte) {
    953e:	d107      	bne.n	9550 <chksum+0x1c>
    t = (dataptr[0] << 8) + 0;
    9540:	780b      	ldrb	r3, [r1, #0]
    9542:	021b      	lsls	r3, r3, #8
    sum += t;
    9544:	4418      	add	r0, r3
    9546:	b280      	uxth	r0, r0
    if(sum < t) {
    9548:	4283      	cmp	r3, r0
      sum++;		/* carry */
    954a:	bf84      	itt	hi
    954c:	3001      	addhi	r0, #1
    954e:	b280      	uxthhi	r0, r0
    }
  }

  /* Return sum in host byte order. */
  return sum;
}
    9550:	bd10      	pop	{r4, pc}
    t = (dataptr[0] << 8) + dataptr[1];
    9552:	780c      	ldrb	r4, [r1, #0]
    9554:	784b      	ldrb	r3, [r1, #1]
    9556:	eb03 2304 	add.w	r3, r3, r4, lsl #8
    955a:	b29b      	uxth	r3, r3
    sum += t;
    955c:	4418      	add	r0, r3
    955e:	b280      	uxth	r0, r0
    if(sum < t) {
    9560:	4283      	cmp	r3, r0
      sum++;		/* carry */
    9562:	bf84      	itt	hi
    9564:	3001      	addhi	r0, #1
    9566:	b280      	uxthhi	r0, r0
    dataptr += 2;
    9568:	3102      	adds	r1, #2
    956a:	e7e6      	b.n	953a <chksum+0x6>

0000956c <upper_layer_chksum>:
}
#endif
/*---------------------------------------------------------------------------*/
static u16_t
upper_layer_chksum(u8_t proto)
{
    956c:	b570      	push	{r4, r5, r6, lr}
  u16_t sum;
  
#if UIP_CONF_IPV6
  upper_layer_len = (((u16_t)(BUF->len[0]) << 8) + BUF->len[1]);
#else /* UIP_CONF_IPV6 */
  upper_layer_len = (((u16_t)(BUF->len[0]) << 8) + BUF->len[1]) - UIP_IPH_LEN;
    956e:	4d0c      	ldr	r5, [pc, #48]	; (95a0 <upper_layer_chksum+0x34>)
  /* First sum pseudoheader. */
  
  /* IP protocol and length fields. This addition cannot carry. */
  sum = upper_layer_len + proto;
  /* Sum IP source and destination addresses. */
  sum = chksum(sum, (u8_t *)&BUF->srcipaddr[0], 2 * sizeof(uip_ipaddr_t));
    9570:	4e0c      	ldr	r6, [pc, #48]	; (95a4 <upper_layer_chksum+0x38>)
  upper_layer_len = (((u16_t)(BUF->len[0]) << 8) + BUF->len[1]) - UIP_IPH_LEN;
    9572:	7c6c      	ldrb	r4, [r5, #17]
    9574:	7c2b      	ldrb	r3, [r5, #16]
    9576:	3c14      	subs	r4, #20
    9578:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    957c:	b2a4      	uxth	r4, r4
  sum = upper_layer_len + proto;
    957e:	4420      	add	r0, r4
  sum = chksum(sum, (u8_t *)&BUF->srcipaddr[0], 2 * sizeof(uip_ipaddr_t));
    9580:	2208      	movs	r2, #8
    9582:	f105 011a 	add.w	r1, r5, #26
    9586:	b280      	uxth	r0, r0
    9588:	47b0      	blx	r6

  /* Sum TCP header and data. */
  sum = chksum(sum, &uip_buf[UIP_IPH_LEN + UIP_LLH_LEN],
    958a:	4622      	mov	r2, r4
    958c:	f105 0122 	add.w	r1, r5, #34	; 0x22
    9590:	47b0      	blx	r6
	       upper_layer_len);
    
  return (sum == 0) ? 0xffff : htons(sum);
    9592:	b110      	cbz	r0, 959a <upper_layer_chksum+0x2e>
    9594:	ba40      	rev16	r0, r0
    9596:	b280      	uxth	r0, r0
    9598:	bd70      	pop	{r4, r5, r6, pc}
    959a:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
    959e:	bd70      	pop	{r4, r5, r6, pc}
    95a0:	20008b96 	.word	0x20008b96
    95a4:	00009535 	.word	0x00009535

000095a8 <uip_add32>:
{
    95a8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uip_acc32[3] = op32[3] + (op16 & 0xff);
    95aa:	78c5      	ldrb	r5, [r0, #3]
    95ac:	4b12      	ldr	r3, [pc, #72]	; (95f8 <uip_add32+0x50>)
    95ae:	440d      	add	r5, r1
    95b0:	b2ed      	uxtb	r5, r5
    95b2:	70dd      	strb	r5, [r3, #3]
  uip_acc32[2] = op32[2] + (op16 >> 8);
    95b4:	7882      	ldrb	r2, [r0, #2]
    95b6:	0a0f      	lsrs	r7, r1, #8
    95b8:	443a      	add	r2, r7
    95ba:	b2d2      	uxtb	r2, r2
    95bc:	709a      	strb	r2, [r3, #2]
  uip_acc32[1] = op32[1];
    95be:	7844      	ldrb	r4, [r0, #1]
    95c0:	705c      	strb	r4, [r3, #1]
  uip_acc32[0] = op32[0];
    95c2:	7806      	ldrb	r6, [r0, #0]
    95c4:	701e      	strb	r6, [r3, #0]
  if(uip_acc32[2] < (op16 >> 8)) {
    95c6:	4297      	cmp	r7, r2
    95c8:	d905      	bls.n	95d6 <uip_add32+0x2e>
    ++uip_acc32[1];
    95ca:	1c60      	adds	r0, r4, #1
    95cc:	b2c0      	uxtb	r0, r0
    95ce:	7058      	strb	r0, [r3, #1]
    if(uip_acc32[1] == 0) {
    95d0:	b908      	cbnz	r0, 95d6 <uip_add32+0x2e>
      ++uip_acc32[0];
    95d2:	3601      	adds	r6, #1
    95d4:	701e      	strb	r6, [r3, #0]
  if(uip_acc32[3] < (op16 & 0xff)) {
    95d6:	b2c9      	uxtb	r1, r1
    95d8:	428d      	cmp	r5, r1
    95da:	da0b      	bge.n	95f4 <uip_add32+0x4c>
    ++uip_acc32[2];
    95dc:	3201      	adds	r2, #1
    95de:	b2d2      	uxtb	r2, r2
    95e0:	709a      	strb	r2, [r3, #2]
    if(uip_acc32[2] == 0) {
    95e2:	b93a      	cbnz	r2, 95f4 <uip_add32+0x4c>
      ++uip_acc32[1];
    95e4:	785a      	ldrb	r2, [r3, #1]
    95e6:	3201      	adds	r2, #1
    95e8:	b2d2      	uxtb	r2, r2
    95ea:	705a      	strb	r2, [r3, #1]
      if(uip_acc32[1] == 0) {
    95ec:	b912      	cbnz	r2, 95f4 <uip_add32+0x4c>
	++uip_acc32[0];
    95ee:	781a      	ldrb	r2, [r3, #0]
    95f0:	3201      	adds	r2, #1
    95f2:	701a      	strb	r2, [r3, #0]
    95f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    95f6:	bf00      	nop
    95f8:	20008acc 	.word	0x20008acc

000095fc <uip_add_rcv_nxt>:
}
#endif /* UIP_REASSEMBLY */
/*---------------------------------------------------------------------------*/
static void
uip_add_rcv_nxt(u16_t n)
{
    95fc:	b510      	push	{r4, lr}
  uip_add32(uip_conn->rcv_nxt, n);
    95fe:	4c09      	ldr	r4, [pc, #36]	; (9624 <uip_add_rcv_nxt+0x28>)
    9600:	6823      	ldr	r3, [r4, #0]
    9602:	4601      	mov	r1, r0
    9604:	f103 0008 	add.w	r0, r3, #8
    9608:	4b07      	ldr	r3, [pc, #28]	; (9628 <uip_add_rcv_nxt+0x2c>)
    960a:	4798      	blx	r3
  uip_conn->rcv_nxt[0] = uip_acc32[0];
    960c:	4a07      	ldr	r2, [pc, #28]	; (962c <uip_add_rcv_nxt+0x30>)
    960e:	6823      	ldr	r3, [r4, #0]
    9610:	7811      	ldrb	r1, [r2, #0]
    9612:	7219      	strb	r1, [r3, #8]
  uip_conn->rcv_nxt[1] = uip_acc32[1];
    9614:	7851      	ldrb	r1, [r2, #1]
    9616:	7259      	strb	r1, [r3, #9]
  uip_conn->rcv_nxt[2] = uip_acc32[2];
    9618:	7891      	ldrb	r1, [r2, #2]
  uip_conn->rcv_nxt[3] = uip_acc32[3];
    961a:	78d2      	ldrb	r2, [r2, #3]
  uip_conn->rcv_nxt[2] = uip_acc32[2];
    961c:	7299      	strb	r1, [r3, #10]
  uip_conn->rcv_nxt[3] = uip_acc32[3];
    961e:	72da      	strb	r2, [r3, #11]
    9620:	bd10      	pop	{r4, pc}
    9622:	bf00      	nop
    9624:	20008adc 	.word	0x20008adc
    9628:	000095a9 	.word	0x000095a9
    962c:	20008acc 	.word	0x20008acc

00009630 <uip_ipchksum>:
{
    9630:	b508      	push	{r3, lr}
  sum = chksum(0, &uip_buf[UIP_LLH_LEN], UIP_IPH_LEN);
    9632:	2214      	movs	r2, #20
    9634:	4905      	ldr	r1, [pc, #20]	; (964c <uip_ipchksum+0x1c>)
    9636:	4b06      	ldr	r3, [pc, #24]	; (9650 <uip_ipchksum+0x20>)
    9638:	2000      	movs	r0, #0
    963a:	4798      	blx	r3
  return (sum == 0) ? 0xffff : htons(sum);
    963c:	b110      	cbz	r0, 9644 <uip_ipchksum+0x14>
    963e:	ba40      	rev16	r0, r0
    9640:	b280      	uxth	r0, r0
    9642:	bd08      	pop	{r3, pc}
    9644:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
    9648:	bd08      	pop	{r3, pc}
    964a:	bf00      	nop
    964c:	20008ba4 	.word	0x20008ba4
    9650:	00009535 	.word	0x00009535

00009654 <uip_tcpchksum>:
  return upper_layer_chksum(UIP_PROTO_TCP);
    9654:	2006      	movs	r0, #6
    9656:	4b01      	ldr	r3, [pc, #4]	; (965c <uip_tcpchksum+0x8>)
    9658:	4718      	bx	r3
    965a:	bf00      	nop
    965c:	0000956d 	.word	0x0000956d

00009660 <uip_udpchksum>:
  return upper_layer_chksum(UIP_PROTO_UDP);
    9660:	2011      	movs	r0, #17
    9662:	4b01      	ldr	r3, [pc, #4]	; (9668 <uip_udpchksum+0x8>)
    9664:	4718      	bx	r3
    9666:	bf00      	nop
    9668:	0000956d 	.word	0x0000956d

0000966c <uip_init>:
{
    966c:	b530      	push	{r4, r5, lr}
    966e:	4b10      	ldr	r3, [pc, #64]	; (96b0 <uip_init+0x44>)
    9670:	4810      	ldr	r0, [pc, #64]	; (96b4 <uip_init+0x48>)
    9672:	2200      	movs	r2, #0
    9674:	801a      	strh	r2, [r3, #0]
    9676:	4b10      	ldr	r3, [pc, #64]	; (96b8 <uip_init+0x4c>)
    9678:	7e5c      	ldrb	r4, [r3, #25]
    967a:	2501      	movs	r5, #1
  for(c = 0; c < UIP_CONNS; ++c) {
    967c:	4611      	mov	r1, r2
    967e:	b169      	cbz	r1, 969c <uip_init+0x30>
    9680:	b102      	cbz	r2, 9684 <uip_init+0x18>
    9682:	765c      	strb	r4, [r3, #25]
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
    9684:	2300      	movs	r3, #0
    9686:	490d      	ldr	r1, [pc, #52]	; (96bc <uip_init+0x50>)
    9688:	7083      	strb	r3, [r0, #2]
    968a:	461a      	mov	r2, r3
    uip_udp_conns[c].lport = 0;
    968c:	461c      	mov	r4, r3
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
    968e:	2a0a      	cmp	r2, #10
    9690:	f101 0164 	add.w	r1, r1, #100	; 0x64
    9694:	d106      	bne.n	96a4 <uip_init+0x38>
    9696:	b103      	cbz	r3, 969a <uip_init+0x2e>
    9698:	7082      	strb	r2, [r0, #2]
    969a:	bd30      	pop	{r4, r5, pc}
    uip_conns[c].tcpstateflags = UIP_CLOSED;
    969c:	460c      	mov	r4, r1
    969e:	2201      	movs	r2, #1
  for(c = 0; c < UIP_CONNS; ++c) {
    96a0:	4629      	mov	r1, r5
    96a2:	e7ec      	b.n	967e <uip_init+0x12>
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
    96a4:	3201      	adds	r2, #1
    uip_udp_conns[c].lport = 0;
    96a6:	f821 4c64 	strh.w	r4, [r1, #-100]
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
    96aa:	b2d2      	uxtb	r2, r2
    96ac:	2301      	movs	r3, #1
    96ae:	e7ee      	b.n	968e <uip_init+0x22>
    96b0:	20008b54 	.word	0x20008b54
    96b4:	200072d6 	.word	0x200072d6
    96b8:	20008ae0 	.word	0x20008ae0
    96bc:	20009244 	.word	0x20009244

000096c0 <uip_udp_new>:
{
    96c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    96c4:	4c24      	ldr	r4, [pc, #144]	; (9758 <uip_udp_new+0x98>)
    96c6:	4e25      	ldr	r6, [pc, #148]	; (975c <uip_udp_new+0x9c>)
    96c8:	88a2      	ldrh	r2, [r4, #4]
    if(uip_udp_conns[c].lport == htons(lastport)) {
    96ca:	2764      	movs	r7, #100	; 0x64
  ++lastport;
    96cc:	3201      	adds	r2, #1
    96ce:	b292      	uxth	r2, r2
    lastport = 4096;
    96d0:	f5b2 4ffa 	cmp.w	r2, #32000	; 0x7d00
    96d4:	bf28      	it	cs
    96d6:	f44f 5280 	movcs.w	r2, #4096	; 0x1000
}
/*---------------------------------------------------------------------------*/
u16_t
htons(u16_t val)
{
  return HTONS(val);
    96da:	0a15      	lsrs	r5, r2, #8
    96dc:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
    96e0:	b2ad      	uxth	r5, r5
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
    96e2:	2300      	movs	r3, #0
    96e4:	2b0a      	cmp	r3, #10
    96e6:	d10e      	bne.n	9706 <uip_udp_new+0x46>
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
    96e8:	2300      	movs	r3, #0
    96ea:	f8df e070 	ldr.w	lr, [pc, #112]	; 975c <uip_udp_new+0x9c>
    96ee:	80a2      	strh	r2, [r4, #4]
    96f0:	70a3      	strb	r3, [r4, #2]
    96f2:	461f      	mov	r7, r3
    96f4:	b2da      	uxtb	r2, r3
    96f6:	2a0a      	cmp	r2, #10
    96f8:	d10d      	bne.n	9716 <uip_udp_new+0x56>
    96fa:	b107      	cbz	r7, 96fe <uip_udp_new+0x3e>
    96fc:	70a2      	strb	r2, [r4, #2]
    return 0;
    96fe:	2200      	movs	r2, #0
}
    9700:	4610      	mov	r0, r2
    9702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9706:	3301      	adds	r3, #1
    if(uip_udp_conns[c].lport == htons(lastport)) {
    9708:	fb07 6e03 	mla	lr, r7, r3, r6
    970c:	f83e ec60 	ldrh.w	lr, [lr, #-96]
    9710:	45ae      	cmp	lr, r5
    9712:	d1e7      	bne.n	96e4 <uip_udp_new+0x24>
    9714:	e7da      	b.n	96cc <uip_udp_new+0xc>
    if(uip_udp_conns[c].lport == 0) {
    9716:	f8be 8004 	ldrh.w	r8, [lr, #4]
    971a:	f103 0c01 	add.w	ip, r3, #1
    971e:	f10e 0e64 	add.w	lr, lr, #100	; 0x64
    9722:	f1b8 0f00 	cmp.w	r8, #0
    9726:	d10e      	bne.n	9746 <uip_udp_new+0x86>
    9728:	b107      	cbz	r7, 972c <uip_udp_new+0x6c>
    972a:	70a2      	strb	r2, [r4, #2]
      conn = &uip_udp_conns[c];
    972c:	2464      	movs	r4, #100	; 0x64
    972e:	435c      	muls	r4, r3
    9730:	19a2      	adds	r2, r4, r6
  conn->lport = HTONS(lastport);
    9732:	8095      	strh	r5, [r2, #4]
  conn->rport = rport;
    9734:	80d1      	strh	r1, [r2, #6]
  if(ripaddr == NULL) {
    9736:	b948      	cbnz	r0, 974c <uip_udp_new+0x8c>
    memset(conn->ripaddr, 0, sizeof(uip_ipaddr_t));
    9738:	51a0      	str	r0, [r4, r6]
  conn->ttl = UIP_TTL;
    973a:	2164      	movs	r1, #100	; 0x64
    973c:	fb01 6303 	mla	r3, r1, r3, r6
    9740:	2140      	movs	r1, #64	; 0x40
    9742:	7219      	strb	r1, [r3, #8]
  return conn;
    9744:	e7dc      	b.n	9700 <uip_udp_new+0x40>
    9746:	4663      	mov	r3, ip
    9748:	2701      	movs	r7, #1
    974a:	e7d3      	b.n	96f4 <uip_udp_new+0x34>
    uip_ipaddr_copy(&conn->ripaddr, ripaddr);
    974c:	8801      	ldrh	r1, [r0, #0]
    974e:	5331      	strh	r1, [r6, r4]
    9750:	8841      	ldrh	r1, [r0, #2]
    9752:	8051      	strh	r1, [r2, #2]
    9754:	e7f1      	b.n	973a <uip_udp_new+0x7a>
    9756:	bf00      	nop
    9758:	200072d6 	.word	0x200072d6
    975c:	20009240 	.word	0x20009240

00009760 <uip_process>:
{
    9760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(flag == UIP_UDP_SEND_CONN) {
    9764:	2804      	cmp	r0, #4
{
    9766:	b085      	sub	sp, #20
    9768:	4ea7      	ldr	r6, [pc, #668]	; (9a08 <uip_process+0x2a8>)
  if(flag == UIP_UDP_SEND_CONN) {
    976a:	f000 80d3 	beq.w	9914 <uip_process+0x1b4>
  register struct uip_conn *uip_connr = uip_conn;
    976e:	4da7      	ldr	r5, [pc, #668]	; (9a0c <uip_process+0x2ac>)
  uip_sappdata = uip_appdata = &uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN];
    9770:	49a7      	ldr	r1, [pc, #668]	; (9a10 <uip_process+0x2b0>)
    9772:	4aa8      	ldr	r2, [pc, #672]	; (9a14 <uip_process+0x2b4>)
    9774:	4ca8      	ldr	r4, [pc, #672]	; (9a18 <uip_process+0x2b8>)
  register struct uip_conn *uip_connr = uip_conn;
    9776:	f8d5 8000 	ldr.w	r8, [r5]
  uip_sappdata = uip_appdata = &uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN];
    977a:	600c      	str	r4, [r1, #0]
  if(flag == UIP_POLL_REQUEST) {
    977c:	2803      	cmp	r0, #3
  uip_sappdata = uip_appdata = &uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN];
    977e:	6014      	str	r4, [r2, #0]
    9780:	46ab      	mov	fp, r5
    9782:	468a      	mov	sl, r1
  if(flag == UIP_POLL_REQUEST) {
    9784:	d11a      	bne.n	97bc <uip_process+0x5c>
    if((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_ESTABLISHED &&
    9786:	f898 3019 	ldrb.w	r3, [r8, #25]
    978a:	f003 030f 	and.w	r3, r3, #15
    978e:	2b03      	cmp	r3, #3
    9790:	d13e      	bne.n	9810 <uip_process+0xb0>
    9792:	f8b8 3010 	ldrh.w	r3, [r8, #16]
    9796:	2b00      	cmp	r3, #0
    9798:	d13a      	bne.n	9810 <uip_process+0xb0>
	uip_flags = UIP_POLL;
    979a:	4ba0      	ldr	r3, [pc, #640]	; (9a1c <uip_process+0x2bc>)
    979c:	2208      	movs	r2, #8
    979e:	701a      	strb	r2, [r3, #0]
	UIP_APPCALL();
    97a0:	4b9f      	ldr	r3, [pc, #636]	; (9a20 <uip_process+0x2c0>)
    97a2:	4798      	blx	r3
      if(uip_flags & UIP_ABORT) {
    97a4:	4b9d      	ldr	r3, [pc, #628]	; (9a1c <uip_process+0x2bc>)
    97a6:	781a      	ldrb	r2, [r3, #0]
    97a8:	4b9e      	ldr	r3, [pc, #632]	; (9a24 <uip_process+0x2c4>)
    97aa:	f012 0120 	ands.w	r1, r2, #32
    97ae:	f000 852e 	beq.w	a20e <uip_process+0xaae>
	uip_slen = 0;
    97b2:	2200      	movs	r2, #0
    97b4:	801a      	strh	r2, [r3, #0]
	uip_connr->tcpstateflags = UIP_CLOSED;
    97b6:	f888 2019 	strb.w	r2, [r8, #25]
    97ba:	e04c      	b.n	9856 <uip_process+0xf6>
  } else if(flag == UIP_TIMER) {
    97bc:	2802      	cmp	r0, #2
    97be:	f040 8095 	bne.w	98ec <uip_process+0x18c>
    if(++iss[3] == 0) {
    97c2:	4a99      	ldr	r2, [pc, #612]	; (9a28 <uip_process+0x2c8>)
    97c4:	7a53      	ldrb	r3, [r2, #9]
    97c6:	3301      	adds	r3, #1
    97c8:	b2db      	uxtb	r3, r3
    97ca:	7253      	strb	r3, [r2, #9]
    97cc:	b963      	cbnz	r3, 97e8 <uip_process+0x88>
      if(++iss[2] == 0) {
    97ce:	7a13      	ldrb	r3, [r2, #8]
    97d0:	3301      	adds	r3, #1
    97d2:	b2db      	uxtb	r3, r3
    97d4:	7213      	strb	r3, [r2, #8]
    97d6:	b93b      	cbnz	r3, 97e8 <uip_process+0x88>
	if(++iss[1] == 0) {
    97d8:	79d3      	ldrb	r3, [r2, #7]
    97da:	3301      	adds	r3, #1
    97dc:	b2db      	uxtb	r3, r3
    97de:	71d3      	strb	r3, [r2, #7]
    97e0:	b913      	cbnz	r3, 97e8 <uip_process+0x88>
	  ++iss[0];
    97e2:	7993      	ldrb	r3, [r2, #6]
    97e4:	3301      	adds	r3, #1
    97e6:	7193      	strb	r3, [r2, #6]
    uip_slen = 0;
    97e8:	4b8e      	ldr	r3, [pc, #568]	; (9a24 <uip_process+0x2c4>)
    uip_len = 0;
    97ea:	2200      	movs	r2, #0
    uip_slen = 0;
    97ec:	801a      	strh	r2, [r3, #0]
    if(uip_connr->tcpstateflags == UIP_TIME_WAIT ||
    97ee:	f898 3019 	ldrb.w	r3, [r8, #25]
    uip_len = 0;
    97f2:	8032      	strh	r2, [r6, #0]
    if(uip_connr->tcpstateflags == UIP_TIME_WAIT ||
    97f4:	f003 01fd 	and.w	r1, r3, #253	; 0xfd
    97f8:	2905      	cmp	r1, #5
    97fa:	d10e      	bne.n	981a <uip_process+0xba>
      ++(uip_connr->timer);
    97fc:	f898 301a 	ldrb.w	r3, [r8, #26]
    9800:	3301      	adds	r3, #1
    9802:	b2db      	uxtb	r3, r3
      if(uip_connr->timer == UIP_TIME_WAIT_TIMEOUT) {
    9804:	2b78      	cmp	r3, #120	; 0x78
      ++(uip_connr->timer);
    9806:	f888 301a 	strb.w	r3, [r8, #26]
      if(uip_connr->timer == UIP_TIME_WAIT_TIMEOUT) {
    980a:	d101      	bne.n	9810 <uip_process+0xb0>
	uip_connr->tcpstateflags = UIP_CLOSED;
    980c:	f888 2019 	strb.w	r2, [r8, #25]
  uip_flags = 0;
    9810:	4a82      	ldr	r2, [pc, #520]	; (9a1c <uip_process+0x2bc>)
  uip_len = 0;
    9812:	2300      	movs	r3, #0
    9814:	8033      	strh	r3, [r6, #0]
  uip_flags = 0;
    9816:	7013      	strb	r3, [r2, #0]
  return;
    9818:	e1ad      	b.n	9b76 <uip_process+0x416>
    } else if(uip_connr->tcpstateflags != UIP_CLOSED) {
    981a:	2b00      	cmp	r3, #0
    981c:	d0f8      	beq.n	9810 <uip_process+0xb0>
      if(uip_outstanding(uip_connr)) {
    981e:	f8b8 2010 	ldrh.w	r2, [r8, #16]
    9822:	487e      	ldr	r0, [pc, #504]	; (9a1c <uip_process+0x2bc>)
    9824:	2a00      	cmp	r2, #0
    9826:	d05a      	beq.n	98de <uip_process+0x17e>
	if(uip_connr->timer-- == 0) {
    9828:	f898 201a 	ldrb.w	r2, [r8, #26]
    982c:	1e51      	subs	r1, r2, #1
    982e:	f888 101a 	strb.w	r1, [r8, #26]
    9832:	2a00      	cmp	r2, #0
    9834:	d1ec      	bne.n	9810 <uip_process+0xb0>
	  if(uip_connr->nrtx == UIP_MAXRTX ||
    9836:	f898 201b 	ldrb.w	r2, [r8, #27]
    983a:	2a08      	cmp	r2, #8
    983c:	d004      	beq.n	9848 <uip_process+0xe8>
    983e:	1e59      	subs	r1, r3, #1
    9840:	2901      	cmp	r1, #1
    9842:	d80b      	bhi.n	985c <uip_process+0xfc>
	       uip_connr->tcpstateflags == UIP_SYN_RCVD) &&
    9844:	2a05      	cmp	r2, #5
    9846:	d109      	bne.n	985c <uip_process+0xfc>
	    uip_connr->tcpstateflags = UIP_CLOSED;
    9848:	2300      	movs	r3, #0
    984a:	f888 3019 	strb.w	r3, [r8, #25]
	    uip_flags = UIP_TIMEDOUT;
    984e:	2380      	movs	r3, #128	; 0x80
    9850:	7003      	strb	r3, [r0, #0]
	    UIP_APPCALL();
    9852:	4b73      	ldr	r3, [pc, #460]	; (9a20 <uip_process+0x2c0>)
    9854:	4798      	blx	r3
	BUF->flags = TCP_RST | TCP_ACK;
    9856:	2214      	movs	r2, #20
    9858:	f000 bca0 	b.w	a19c <uip_process+0xa3c>
	  uip_connr->timer = UIP_RTO << (uip_connr->nrtx > 4?
    985c:	2a04      	cmp	r2, #4
    985e:	bf9a      	itte	ls
    9860:	2103      	movls	r1, #3
    9862:	4091      	lslls	r1, r2
    9864:	2130      	movhi	r1, #48	; 0x30
    9866:	f888 101a 	strb.w	r1, [r8, #26]
	  ++(uip_connr->nrtx);
    986a:	3201      	adds	r2, #1
	  UIP_STAT(++uip_stat.tcp.rexmit);
    986c:	496f      	ldr	r1, [pc, #444]	; (9a2c <uip_process+0x2cc>)
	  ++(uip_connr->nrtx);
    986e:	f888 201b 	strb.w	r2, [r8, #27]
	  UIP_STAT(++uip_stat.tcp.rexmit);
    9872:	8cca      	ldrh	r2, [r1, #38]	; 0x26
	  switch(uip_connr->tcpstateflags & UIP_TS_MASK) {
    9874:	f003 030f 	and.w	r3, r3, #15
	  UIP_STAT(++uip_stat.tcp.rexmit);
    9878:	3201      	adds	r2, #1
	  switch(uip_connr->tcpstateflags & UIP_TS_MASK) {
    987a:	3b01      	subs	r3, #1
	  UIP_STAT(++uip_stat.tcp.rexmit);
    987c:	84ca      	strh	r2, [r1, #38]	; 0x26
	  switch(uip_connr->tcpstateflags & UIP_TS_MASK) {
    987e:	2b07      	cmp	r3, #7
    9880:	d8c6      	bhi.n	9810 <uip_process+0xb0>
    9882:	a201      	add	r2, pc, #4	; (adr r2, 9888 <uip_process+0x128>)
    9884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    9888:	00009f07 	.word	0x00009f07
    988c:	00009811 	.word	0x00009811
    9890:	000098a9 	.word	0x000098a9
    9894:	0000a19b 	.word	0x0000a19b
    9898:	00009811 	.word	0x00009811
    989c:	0000a19b 	.word	0x0000a19b
    98a0:	00009811 	.word	0x00009811
    98a4:	0000a19b 	.word	0x0000a19b
	    uip_flags = UIP_REXMIT;
    98a8:	2304      	movs	r3, #4
    98aa:	7003      	strb	r3, [r0, #0]
	    UIP_APPCALL();
    98ac:	4b5c      	ldr	r3, [pc, #368]	; (9a20 <uip_process+0x2c0>)
    98ae:	4798      	blx	r3
      uip_appdata = uip_sappdata;
    98b0:	4b58      	ldr	r3, [pc, #352]	; (9a14 <uip_process+0x2b4>)
    98b2:	681b      	ldr	r3, [r3, #0]
    98b4:	f8ca 3000 	str.w	r3, [sl]
      if(uip_slen > 0 && uip_connr->len > 0) {
    98b8:	4b5a      	ldr	r3, [pc, #360]	; (9a24 <uip_process+0x2c4>)
    98ba:	881b      	ldrh	r3, [r3, #0]
    98bc:	2b00      	cmp	r3, #0
    98be:	f000 84cb 	beq.w	a258 <uip_process+0xaf8>
    98c2:	f8b8 3010 	ldrh.w	r3, [r8, #16]
    98c6:	2b00      	cmp	r3, #0
    98c8:	f000 84c6 	beq.w	a258 <uip_process+0xaf8>
	uip_len = uip_connr->len + UIP_TCPIP_HLEN;
    98cc:	3328      	adds	r3, #40	; 0x28
    98ce:	8033      	strh	r3, [r6, #0]
	BUF->flags = TCP_ACK | TCP_PSH;
    98d0:	2218      	movs	r2, #24
	BUF->flags = TCP_ACK;
    98d2:	4b57      	ldr	r3, [pc, #348]	; (9a30 <uip_process+0x2d0>)
    98d4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  BUF->tcpoffset = (UIP_TCPH_LEN / 4) << 4;
    98d8:	2250      	movs	r2, #80	; 0x50
    98da:	4b55      	ldr	r3, [pc, #340]	; (9a30 <uip_process+0x2d0>)
    98dc:	e326      	b.n	9f2c <uip_process+0x7cc>
      } else if((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_ESTABLISHED) {
    98de:	f003 030f 	and.w	r3, r3, #15
    98e2:	2b03      	cmp	r3, #3
    98e4:	d194      	bne.n	9810 <uip_process+0xb0>
	uip_flags = UIP_POLL;
    98e6:	2308      	movs	r3, #8
    98e8:	7003      	strb	r3, [r0, #0]
    98ea:	e759      	b.n	97a0 <uip_process+0x40>
  if(flag == UIP_UDP_TIMER) {
    98ec:	2805      	cmp	r0, #5
    98ee:	d15f      	bne.n	99b0 <uip_process+0x250>
    if(uip_udp_conn->lport != 0) {
    98f0:	4b50      	ldr	r3, [pc, #320]	; (9a34 <uip_process+0x2d4>)
    98f2:	681b      	ldr	r3, [r3, #0]
    98f4:	889b      	ldrh	r3, [r3, #4]
    98f6:	2b00      	cmp	r3, #0
    98f8:	d08a      	beq.n	9810 <uip_process+0xb0>
      uip_sappdata = uip_appdata = &uip_buf[UIP_LLH_LEN + UIP_IPUDPH_LEN];
    98fa:	3c0c      	subs	r4, #12
    98fc:	6014      	str	r4, [r2, #0]
      uip_len = uip_slen = 0;
    98fe:	4a49      	ldr	r2, [pc, #292]	; (9a24 <uip_process+0x2c4>)
      uip_sappdata = uip_appdata = &uip_buf[UIP_LLH_LEN + UIP_IPUDPH_LEN];
    9900:	600c      	str	r4, [r1, #0]
      uip_conn = NULL;
    9902:	2300      	movs	r3, #0
      uip_len = uip_slen = 0;
    9904:	8013      	strh	r3, [r2, #0]
      uip_conn = NULL;
    9906:	602b      	str	r3, [r5, #0]
      uip_len = uip_slen = 0;
    9908:	8033      	strh	r3, [r6, #0]
      uip_flags = UIP_POLL;
    990a:	4b44      	ldr	r3, [pc, #272]	; (9a1c <uip_process+0x2bc>)
    990c:	2208      	movs	r2, #8
    990e:	701a      	strb	r2, [r3, #0]
  UIP_UDP_APPCALL();
    9910:	4b49      	ldr	r3, [pc, #292]	; (9a38 <uip_process+0x2d8>)
    9912:	4798      	blx	r3
  if(uip_slen == 0) {
    9914:	4b43      	ldr	r3, [pc, #268]	; (9a24 <uip_process+0x2c4>)
    9916:	881b      	ldrh	r3, [r3, #0]
    9918:	2b00      	cmp	r3, #0
    991a:	f43f af79 	beq.w	9810 <uip_process+0xb0>
  BUF->len[0] = (uip_len >> 8);
    991e:	4c44      	ldr	r4, [pc, #272]	; (9a30 <uip_process+0x2d0>)
  uip_len = uip_slen + UIP_IPUDPH_LEN;
    9920:	f103 021c 	add.w	r2, r3, #28
    9924:	b292      	uxth	r2, r2
  BUF->len[1] = (uip_len & 0xff);
    9926:	7462      	strb	r2, [r4, #17]
  BUF->len[0] = (uip_len >> 8);
    9928:	0a11      	lsrs	r1, r2, #8
  uip_len = uip_slen + UIP_IPUDPH_LEN;
    992a:	8032      	strh	r2, [r6, #0]
  BUF->ttl = uip_udp_conn->ttl;
    992c:	4a41      	ldr	r2, [pc, #260]	; (9a34 <uip_process+0x2d4>)
  BUF->len[0] = (uip_len >> 8);
    992e:	7421      	strb	r1, [r4, #16]
  BUF->ttl = uip_udp_conn->ttl;
    9930:	6812      	ldr	r2, [r2, #0]
  UDPBUF->udplen = HTONS(uip_slen + UIP_UDPH_LEN);
    9932:	3308      	adds	r3, #8
  BUF->ttl = uip_udp_conn->ttl;
    9934:	7a11      	ldrb	r1, [r2, #8]
    9936:	75a1      	strb	r1, [r4, #22]
  UDPBUF->udplen = HTONS(uip_slen + UIP_UDPH_LEN);
    9938:	ba5b      	rev16	r3, r3
  BUF->proto = UIP_PROTO_UDP;
    993a:	2111      	movs	r1, #17
    993c:	75e1      	strb	r1, [r4, #23]
  UDPBUF->udplen = HTONS(uip_slen + UIP_UDPH_LEN);
    993e:	84e3      	strh	r3, [r4, #38]	; 0x26
  UDPBUF->udpchksum = 0;
    9940:	2300      	movs	r3, #0
    9942:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    9946:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  BUF->srcport  = uip_udp_conn->lport;
    994a:	8893      	ldrh	r3, [r2, #4]
    994c:	8463      	strh	r3, [r4, #34]	; 0x22
  BUF->destport = uip_udp_conn->rport;
    994e:	88d3      	ldrh	r3, [r2, #6]
    9950:	84a3      	strh	r3, [r4, #36]	; 0x24
  uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
    9952:	4b3a      	ldr	r3, [pc, #232]	; (9a3c <uip_process+0x2dc>)
    9954:	8819      	ldrh	r1, [r3, #0]
    9956:	885b      	ldrh	r3, [r3, #2]
    9958:	8361      	strh	r1, [r4, #26]
    995a:	83a3      	strh	r3, [r4, #28]
  uip_ipaddr_copy(BUF->destipaddr, uip_udp_conn->ripaddr);
    995c:	8813      	ldrh	r3, [r2, #0]
    995e:	83e3      	strh	r3, [r4, #30]
    9960:	8853      	ldrh	r3, [r2, #2]
    9962:	8423      	strh	r3, [r4, #32]
  uip_appdata = &uip_buf[UIP_LLH_LEN + UIP_IPTCPH_LEN];
    9964:	4b2a      	ldr	r3, [pc, #168]	; (9a10 <uip_process+0x2b0>)
    9966:	f104 0236 	add.w	r2, r4, #54	; 0x36
    996a:	601a      	str	r2, [r3, #0]
  UDPBUF->udpchksum = ~(uip_udpchksum());
    996c:	4b34      	ldr	r3, [pc, #208]	; (9a40 <uip_process+0x2e0>)
    996e:	4798      	blx	r3
    9970:	43c0      	mvns	r0, r0
    9972:	b280      	uxth	r0, r0
  if(UDPBUF->udpchksum == 0) {
    9974:	2800      	cmp	r0, #0
    9976:	f000 8159 	beq.w	9c2c <uip_process+0x4cc>
  UDPBUF->udpchksum = ~(uip_udpchksum());
    997a:	8520      	strh	r0, [r4, #40]	; 0x28
  BUF->vhl = 0x45;
    997c:	4c2c      	ldr	r4, [pc, #176]	; (9a30 <uip_process+0x2d0>)
  ++ipid;
    997e:	492a      	ldr	r1, [pc, #168]	; (9a28 <uip_process+0x2c8>)
  BUF->vhl = 0x45;
    9980:	2345      	movs	r3, #69	; 0x45
    9982:	73a3      	strb	r3, [r4, #14]
  ++ipid;
    9984:	880b      	ldrh	r3, [r1, #0]
    9986:	3301      	adds	r3, #1
    9988:	b29b      	uxth	r3, r3
  BUF->tos = 0;
    998a:	2200      	movs	r2, #0
  ++ipid;
    998c:	800b      	strh	r3, [r1, #0]
  BUF->ipid[0] = ipid >> 8;
    998e:	0a19      	lsrs	r1, r3, #8
  BUF->tos = 0;
    9990:	73e2      	strb	r2, [r4, #15]
  BUF->ipoffset[0] = BUF->ipoffset[1] = 0;
    9992:	7562      	strb	r2, [r4, #21]
    9994:	7522      	strb	r2, [r4, #20]
  BUF->ipid[1] = ipid & 0xff;
    9996:	74e3      	strb	r3, [r4, #19]
  BUF->ipchksum = 0;
    9998:	7622      	strb	r2, [r4, #24]
    999a:	7662      	strb	r2, [r4, #25]
  BUF->ipchksum = ~(uip_ipchksum());
    999c:	4b29      	ldr	r3, [pc, #164]	; (9a44 <uip_process+0x2e4>)
  BUF->ipid[0] = ipid >> 8;
    999e:	74a1      	strb	r1, [r4, #18]
  BUF->ipchksum = ~(uip_ipchksum());
    99a0:	4798      	blx	r3
  UIP_STAT(++uip_stat.tcp.sent);
    99a2:	4a22      	ldr	r2, [pc, #136]	; (9a2c <uip_process+0x2cc>)
    99a4:	8bd3      	ldrh	r3, [r2, #30]
  BUF->ipchksum = ~(uip_ipchksum());
    99a6:	43c0      	mvns	r0, r0
  UIP_STAT(++uip_stat.tcp.sent);
    99a8:	3301      	adds	r3, #1
  BUF->ipchksum = ~(uip_ipchksum());
    99aa:	8320      	strh	r0, [r4, #24]
  UIP_STAT(++uip_stat.tcp.sent);
    99ac:	83d3      	strh	r3, [r2, #30]
    99ae:	e0db      	b.n	9b68 <uip_process+0x408>
  UIP_STAT(++uip_stat.ip.recv);
    99b0:	4b1e      	ldr	r3, [pc, #120]	; (9a2c <uip_process+0x2cc>)
    99b2:	885a      	ldrh	r2, [r3, #2]
  if(BUF->vhl != 0x45)  { /* IP version and header length. */
    99b4:	3c36      	subs	r4, #54	; 0x36
  UIP_STAT(++uip_stat.ip.recv);
    99b6:	3201      	adds	r2, #1
    99b8:	805a      	strh	r2, [r3, #2]
  if(BUF->vhl != 0x45)  { /* IP version and header length. */
    99ba:	7ba2      	ldrb	r2, [r4, #14]
    99bc:	2a45      	cmp	r2, #69	; 0x45
    99be:	461d      	mov	r5, r3
    99c0:	d009      	beq.n	99d6 <uip_process+0x276>
    UIP_STAT(++uip_stat.ip.drop);
    99c2:	881a      	ldrh	r2, [r3, #0]
    UIP_LOG("ip: invalid version or header length.");
    99c4:	4820      	ldr	r0, [pc, #128]	; (9a48 <uip_process+0x2e8>)
    UIP_STAT(++uip_stat.ip.drop);
    99c6:	3201      	adds	r2, #1
    99c8:	801a      	strh	r2, [r3, #0]
    UIP_STAT(++uip_stat.ip.vhlerr);
    99ca:	88da      	ldrh	r2, [r3, #6]
    99cc:	3201      	adds	r2, #1
    99ce:	80da      	strh	r2, [r3, #6]
    UIP_LOG("ip: packet shorter than reported in IP header.");
    99d0:	4b1e      	ldr	r3, [pc, #120]	; (9a4c <uip_process+0x2ec>)
    99d2:	4798      	blx	r3
    goto drop;
    99d4:	e71c      	b.n	9810 <uip_process+0xb0>
  if((BUF->len[0] << 8) + BUF->len[1] <= uip_len) {
    99d6:	7c23      	ldrb	r3, [r4, #16]
    99d8:	f894 8011 	ldrb.w	r8, [r4, #17]
    99dc:	eb08 2803 	add.w	r8, r8, r3, lsl #8
    99e0:	8833      	ldrh	r3, [r6, #0]
    99e2:	4598      	cmp	r8, r3
    99e4:	dc0e      	bgt.n	9a04 <uip_process+0x2a4>
  if((BUF->ipoffset[0] & 0x3f) != 0 ||
    99e6:	7d23      	ldrb	r3, [r4, #20]
    uip_len = (BUF->len[0] << 8) + BUF->len[1];
    99e8:	fa1f f888 	uxth.w	r8, r8
  if((BUF->ipoffset[0] & 0x3f) != 0 ||
    99ec:	069a      	lsls	r2, r3, #26
    uip_len = (BUF->len[0] << 8) + BUF->len[1];
    99ee:	f8a6 8000 	strh.w	r8, [r6]
  if((BUF->ipoffset[0] & 0x3f) != 0 ||
    99f2:	d031      	beq.n	9a58 <uip_process+0x2f8>
    UIP_STAT(++uip_stat.ip.drop);
    99f4:	882b      	ldrh	r3, [r5, #0]
    UIP_LOG("ip: fragment dropped.");
    99f6:	4816      	ldr	r0, [pc, #88]	; (9a50 <uip_process+0x2f0>)
    UIP_STAT(++uip_stat.ip.drop);
    99f8:	3301      	adds	r3, #1
    99fa:	802b      	strh	r3, [r5, #0]
    UIP_STAT(++uip_stat.ip.fragerr);
    99fc:	89ab      	ldrh	r3, [r5, #12]
    99fe:	3301      	adds	r3, #1
    9a00:	81ab      	strh	r3, [r5, #12]
    9a02:	e7e5      	b.n	99d0 <uip_process+0x270>
    UIP_LOG("ip: packet shorter than reported in IP header.");
    9a04:	4813      	ldr	r0, [pc, #76]	; (9a54 <uip_process+0x2f4>)
    9a06:	e7e3      	b.n	99d0 <uip_process+0x270>
    9a08:	20008ac4 	.word	0x20008ac4
    9a0c:	20008adc 	.word	0x20008adc
    9a10:	20008ad8 	.word	0x20008ad8
    9a14:	20008ac8 	.word	0x20008ac8
    9a18:	20008bcc 	.word	0x20008bcc
    9a1c:	20008ad0 	.word	0x20008ad0
    9a20:	0000b2b5 	.word	0x0000b2b5
    9a24:	2000923c 	.word	0x2000923c
    9a28:	200072d6 	.word	0x200072d6
    9a2c:	20008b5a 	.word	0x20008b5a
    9a30:	20008b96 	.word	0x20008b96
    9a34:	20008ad4 	.word	0x20008ad4
    9a38:	0000727d 	.word	0x0000727d
    9a3c:	20008b92 	.word	0x20008b92
    9a40:	00009661 	.word	0x00009661
    9a44:	00009631 	.word	0x00009631
    9a48:	0000f165 	.word	0x0000f165
    9a4c:	0000b2c5 	.word	0x0000b2c5
    9a50:	0000f1ba 	.word	0x0000f1ba
    9a54:	0000f18b 	.word	0x0000f18b
     BUF->ipoffset[1] != 0) {
    9a58:	7d67      	ldrb	r7, [r4, #21]
  if((BUF->ipoffset[0] & 0x3f) != 0 ||
    9a5a:	2f00      	cmp	r7, #0
    9a5c:	d1ca      	bne.n	99f4 <uip_process+0x294>
  if(uip_ipaddr_cmp(uip_hostaddr, all_zeroes_addr)) {
    9a5e:	4b77      	ldr	r3, [pc, #476]	; (9c3c <uip_process+0x4dc>)
    9a60:	881a      	ldrh	r2, [r3, #0]
    9a62:	9201      	str	r2, [sp, #4]
    9a64:	4699      	mov	r9, r3
    9a66:	b9ca      	cbnz	r2, 9a9c <uip_process+0x33c>
    9a68:	f8b9 3002 	ldrh.w	r3, [r9, #2]
    9a6c:	b9b3      	cbnz	r3, 9a9c <uip_process+0x33c>
    if(BUF->proto == UIP_PROTO_ICMP) {
    9a6e:	7de3      	ldrb	r3, [r4, #23]
    9a70:	2b01      	cmp	r3, #1
    9a72:	4b73      	ldr	r3, [pc, #460]	; (9c40 <uip_process+0x4e0>)
    9a74:	d110      	bne.n	9a98 <uip_process+0x338>
      UIP_LOG("ip: possible ping config packet received.");
    9a76:	4873      	ldr	r0, [pc, #460]	; (9c44 <uip_process+0x4e4>)
    9a78:	4798      	blx	r3
  UIP_STAT(++uip_stat.icmp.recv);
    9a7a:	8aab      	ldrh	r3, [r5, #20]
    9a7c:	3301      	adds	r3, #1
    9a7e:	82ab      	strh	r3, [r5, #20]
  if(ICMPBUF->type != ICMP_ECHO) {
    9a80:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    9a84:	2b08      	cmp	r3, #8
    9a86:	d042      	beq.n	9b0e <uip_process+0x3ae>
    UIP_STAT(++uip_stat.icmp.drop);
    9a88:	8a6b      	ldrh	r3, [r5, #18]
    UIP_LOG("icmp: not icmp echo.");
    9a8a:	486f      	ldr	r0, [pc, #444]	; (9c48 <uip_process+0x4e8>)
    UIP_STAT(++uip_stat.icmp.drop);
    9a8c:	3301      	adds	r3, #1
    9a8e:	826b      	strh	r3, [r5, #18]
    UIP_STAT(++uip_stat.icmp.typeerr);
    9a90:	8b2b      	ldrh	r3, [r5, #24]
    9a92:	3301      	adds	r3, #1
    9a94:	832b      	strh	r3, [r5, #24]
    9a96:	e79b      	b.n	99d0 <uip_process+0x270>
      UIP_LOG("ip: packet dropped since no address assigned.");
    9a98:	486c      	ldr	r0, [pc, #432]	; (9c4c <uip_process+0x4ec>)
    9a9a:	e79a      	b.n	99d2 <uip_process+0x272>
    if(BUF->proto == UIP_PROTO_UDP &&
    9a9c:	7de3      	ldrb	r3, [r4, #23]
    9a9e:	2b11      	cmp	r3, #17
    9aa0:	d107      	bne.n	9ab2 <uip_process+0x352>
    9aa2:	8be1      	ldrh	r1, [r4, #30]
    9aa4:	f64f 70ff 	movw	r0, #65535	; 0xffff
    9aa8:	4281      	cmp	r1, r0
    9aaa:	d102      	bne.n	9ab2 <uip_process+0x352>
       uip_ipaddr_cmp(BUF->destipaddr, all_ones_addr)
    9aac:	8c20      	ldrh	r0, [r4, #32]
    9aae:	4288      	cmp	r0, r1
    9ab0:	d064      	beq.n	9b7c <uip_process+0x41c>
    if(!uip_ipaddr_cmp(BUF->destipaddr, uip_hostaddr)) {
    9ab2:	8be1      	ldrh	r1, [r4, #30]
    9ab4:	9a01      	ldr	r2, [sp, #4]
    9ab6:	4291      	cmp	r1, r2
    9ab8:	d105      	bne.n	9ac6 <uip_process+0x366>
    9aba:	8c22      	ldrh	r2, [r4, #32]
    9abc:	f8b9 1002 	ldrh.w	r1, [r9, #2]
    9ac0:	9202      	str	r2, [sp, #8]
    9ac2:	4291      	cmp	r1, r2
    9ac4:	d003      	beq.n	9ace <uip_process+0x36e>
      UIP_STAT(++uip_stat.ip.drop);
    9ac6:	882b      	ldrh	r3, [r5, #0]
    9ac8:	3301      	adds	r3, #1
    9aca:	802b      	strh	r3, [r5, #0]
      goto drop;
    9acc:	e6a0      	b.n	9810 <uip_process+0xb0>
  if(uip_ipchksum() != 0xffff) { /* Compute and check the IP header
    9ace:	4960      	ldr	r1, [pc, #384]	; (9c50 <uip_process+0x4f0>)
    9ad0:	9303      	str	r3, [sp, #12]
    9ad2:	4788      	blx	r1
    9ad4:	4601      	mov	r1, r0
    9ad6:	f64f 70ff 	movw	r0, #65535	; 0xffff
    9ada:	4281      	cmp	r1, r0
    9adc:	9b03      	ldr	r3, [sp, #12]
    9ade:	d007      	beq.n	9af0 <uip_process+0x390>
    UIP_STAT(++uip_stat.ip.drop);
    9ae0:	882b      	ldrh	r3, [r5, #0]
    UIP_LOG("ip: bad checksum.");
    9ae2:	485c      	ldr	r0, [pc, #368]	; (9c54 <uip_process+0x4f4>)
    UIP_STAT(++uip_stat.ip.drop);
    9ae4:	3301      	adds	r3, #1
    9ae6:	802b      	strh	r3, [r5, #0]
    UIP_STAT(++uip_stat.ip.chkerr);
    9ae8:	89eb      	ldrh	r3, [r5, #14]
    9aea:	3301      	adds	r3, #1
    9aec:	81eb      	strh	r3, [r5, #14]
    9aee:	e76f      	b.n	99d0 <uip_process+0x270>
  if(BUF->proto == UIP_PROTO_TCP) { /* Check for TCP packet. If so,
    9af0:	2b06      	cmp	r3, #6
    9af2:	f000 80c7 	beq.w	9c84 <uip_process+0x524>
  if(BUF->proto == UIP_PROTO_UDP) {
    9af6:	2b11      	cmp	r3, #17
    9af8:	d040      	beq.n	9b7c <uip_process+0x41c>
  if(BUF->proto != UIP_PROTO_ICMP) { /* We only allow ICMP packets from
    9afa:	2b01      	cmp	r3, #1
    9afc:	d0bd      	beq.n	9a7a <uip_process+0x31a>
    UIP_STAT(++uip_stat.ip.drop);
    9afe:	882b      	ldrh	r3, [r5, #0]
    UIP_LOG("ip: neither tcp nor icmp.");
    9b00:	4855      	ldr	r0, [pc, #340]	; (9c58 <uip_process+0x4f8>)
    UIP_STAT(++uip_stat.ip.drop);
    9b02:	3301      	adds	r3, #1
    9b04:	802b      	strh	r3, [r5, #0]
    UIP_STAT(++uip_stat.ip.protoerr);
    9b06:	8a2b      	ldrh	r3, [r5, #16]
    9b08:	3301      	adds	r3, #1
    9b0a:	822b      	strh	r3, [r5, #16]
    9b0c:	e760      	b.n	99d0 <uip_process+0x270>
  if((uip_hostaddr[0] | uip_hostaddr[1]) == 0) {
    9b0e:	f8b9 3000 	ldrh.w	r3, [r9]
    9b12:	f8b9 2002 	ldrh.w	r2, [r9, #2]
    9b16:	4313      	orrs	r3, r2
    9b18:	b29b      	uxth	r3, r3
    9b1a:	b96b      	cbnz	r3, 9b38 <uip_process+0x3d8>
    uip_hostaddr[0] = BUF->destipaddr[0];
    9b1c:	7fe2      	ldrb	r2, [r4, #31]
    9b1e:	7fa3      	ldrb	r3, [r4, #30]
    9b20:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    9b24:	f8a9 3000 	strh.w	r3, [r9]
    uip_hostaddr[1] = BUF->destipaddr[1];
    9b28:	f894 3020 	ldrb.w	r3, [r4, #32]
    9b2c:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    9b30:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    9b34:	f8a9 3002 	strh.w	r3, [r9, #2]
  ICMPBUF->type = ICMP_ECHO_REPLY;
    9b38:	2300      	movs	r3, #0
    9b3a:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
  if(ICMPBUF->icmpchksum >= HTONS(0xffff - (ICMP_ECHO << 8))) {
    9b3e:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    9b40:	f64f 72f6 	movw	r2, #65526	; 0xfff6
    9b44:	4293      	cmp	r3, r2
    ICMPBUF->icmpchksum += HTONS(ICMP_ECHO << 8) + 1;
    9b46:	bf8c      	ite	hi
    9b48:	3309      	addhi	r3, #9
    ICMPBUF->icmpchksum += HTONS(ICMP_ECHO << 8);
    9b4a:	3308      	addls	r3, #8
    9b4c:	84a3      	strh	r3, [r4, #36]	; 0x24
  uip_ipaddr_copy(BUF->destipaddr, BUF->srcipaddr);
    9b4e:	8b63      	ldrh	r3, [r4, #26]
    9b50:	83e3      	strh	r3, [r4, #30]
    9b52:	8ba3      	ldrh	r3, [r4, #28]
    9b54:	8423      	strh	r3, [r4, #32]
  uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
    9b56:	f8b9 3000 	ldrh.w	r3, [r9]
    9b5a:	8363      	strh	r3, [r4, #26]
    9b5c:	f8b9 3002 	ldrh.w	r3, [r9, #2]
    9b60:	83a3      	strh	r3, [r4, #28]
  UIP_STAT(++uip_stat.icmp.sent);
    9b62:	8aeb      	ldrh	r3, [r5, #22]
    9b64:	3301      	adds	r3, #1
    9b66:	82eb      	strh	r3, [r5, #22]
  UIP_STAT(++uip_stat.ip.sent);
    9b68:	4a3c      	ldr	r2, [pc, #240]	; (9c5c <uip_process+0x4fc>)
    9b6a:	8893      	ldrh	r3, [r2, #4]
    9b6c:	3301      	adds	r3, #1
    9b6e:	8093      	strh	r3, [r2, #4]
  uip_flags = 0;
    9b70:	4b3b      	ldr	r3, [pc, #236]	; (9c60 <uip_process+0x500>)
    9b72:	2200      	movs	r2, #0
    9b74:	701a      	strb	r2, [r3, #0]
}
    9b76:	b005      	add	sp, #20
    9b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uip_appdata = &uip_buf[UIP_LLH_LEN + UIP_IPUDPH_LEN];
    9b7c:	4b39      	ldr	r3, [pc, #228]	; (9c64 <uip_process+0x504>)
    9b7e:	f8ca 3000 	str.w	r3, [sl]
  uip_len = uip_len - UIP_IPUDPH_LEN;
    9b82:	f1a8 081c 	sub.w	r8, r8, #28
    9b86:	f8a6 8000 	strh.w	r8, [r6]
  if(UDPBUF->udpchksum != 0 && uip_udpchksum() != 0xffff) {
    9b8a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    9b8c:	469a      	mov	sl, r3
    9b8e:	b16a      	cbz	r2, 9bac <uip_process+0x44c>
    9b90:	4b35      	ldr	r3, [pc, #212]	; (9c68 <uip_process+0x508>)
    9b92:	4798      	blx	r3
    9b94:	f64f 73ff 	movw	r3, #65535	; 0xffff
    9b98:	4298      	cmp	r0, r3
    9b9a:	d007      	beq.n	9bac <uip_process+0x44c>
    UIP_STAT(++uip_stat.udp.drop);
    9b9c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    UIP_LOG("udp: bad checksum.");
    9b9e:	4833      	ldr	r0, [pc, #204]	; (9c6c <uip_process+0x50c>)
    UIP_STAT(++uip_stat.udp.drop);
    9ba0:	3301      	adds	r3, #1
    9ba2:	85ab      	strh	r3, [r5, #44]	; 0x2c
    UIP_STAT(++uip_stat.udp.chkerr);
    9ba4:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
    9ba6:	3301      	adds	r3, #1
    9ba8:	866b      	strh	r3, [r5, #50]	; 0x32
    9baa:	e711      	b.n	99d0 <uip_process+0x270>
  for(uip_udp_conn = &uip_udp_conns[0];
    9bac:	4a30      	ldr	r2, [pc, #192]	; (9c70 <uip_process+0x510>)
    9bae:	4b31      	ldr	r3, [pc, #196]	; (9c74 <uip_process+0x514>)
    9bb0:	6013      	str	r3, [r2, #0]
       UDPBUF->destport == uip_udp_conn->lport &&
    9bb2:	8ca7      	ldrh	r7, [r4, #36]	; 0x24
        UDPBUF->srcport == uip_udp_conn->rport) &&
    9bb4:	f8b4 e022 	ldrh.w	lr, [r4, #34]	; 0x22
	uip_ipaddr_cmp(BUF->srcipaddr, uip_udp_conn->ripaddr))) {
    9bb8:	f8b4 c01a 	ldrh.w	ip, [r4, #26]
    9bbc:	f8b4 801c 	ldrh.w	r8, [r4, #28]
  for(uip_udp_conn = &uip_udp_conns[0];
    9bc0:	2100      	movs	r1, #0
    9bc2:	f503 757a 	add.w	r5, r3, #1000	; 0x3e8
       (uip_ipaddr_cmp(uip_udp_conn->ripaddr, all_zeroes_addr) ||
    9bc6:	f64f 74ff 	movw	r4, #65535	; 0xffff
  for(uip_udp_conn = &uip_udp_conns[0];
    9bca:	42ab      	cmp	r3, r5
    9bcc:	d303      	bcc.n	9bd6 <uip_process+0x476>
    9bce:	b101      	cbz	r1, 9bd2 <uip_process+0x472>
    9bd0:	6013      	str	r3, [r2, #0]
  UIP_LOG("udp: no matching connection found");
    9bd2:	4829      	ldr	r0, [pc, #164]	; (9c78 <uip_process+0x518>)
    9bd4:	e6fc      	b.n	99d0 <uip_process+0x270>
    if(uip_udp_conn->lport != 0 &&
    9bd6:	8898      	ldrh	r0, [r3, #4]
    9bd8:	b328      	cbz	r0, 9c26 <uip_process+0x4c6>
    9bda:	42b8      	cmp	r0, r7
    9bdc:	d123      	bne.n	9c26 <uip_process+0x4c6>
       (uip_udp_conn->rport == 0 ||
    9bde:	88d8      	ldrh	r0, [r3, #6]
       UDPBUF->destport == uip_udp_conn->lport &&
    9be0:	b108      	cbz	r0, 9be6 <uip_process+0x486>
       (uip_udp_conn->rport == 0 ||
    9be2:	4570      	cmp	r0, lr
    9be4:	d11f      	bne.n	9c26 <uip_process+0x4c6>
       (uip_ipaddr_cmp(uip_udp_conn->ripaddr, all_zeroes_addr) ||
    9be6:	8818      	ldrh	r0, [r3, #0]
        UDPBUF->srcport == uip_udp_conn->rport) &&
    9be8:	b990      	cbnz	r0, 9c10 <uip_process+0x4b0>
       (uip_ipaddr_cmp(uip_udp_conn->ripaddr, all_zeroes_addr) ||
    9bea:	f8b3 9002 	ldrh.w	r9, [r3, #2]
    9bee:	f1b9 0f00 	cmp.w	r9, #0
    9bf2:	d113      	bne.n	9c1c <uip_process+0x4bc>
    9bf4:	b101      	cbz	r1, 9bf8 <uip_process+0x498>
    9bf6:	6013      	str	r3, [r2, #0]
  uip_flags = UIP_NEWDATA;
    9bf8:	4a19      	ldr	r2, [pc, #100]	; (9c60 <uip_process+0x500>)
    9bfa:	2102      	movs	r1, #2
    9bfc:	7011      	strb	r1, [r2, #0]
  uip_sappdata = uip_appdata = &uip_buf[UIP_LLH_LEN + UIP_IPUDPH_LEN];
    9bfe:	4a1f      	ldr	r2, [pc, #124]	; (9c7c <uip_process+0x51c>)
    9c00:	f8c2 a000 	str.w	sl, [r2]
  uip_slen = 0;
    9c04:	4a1e      	ldr	r2, [pc, #120]	; (9c80 <uip_process+0x520>)
  uip_conn = NULL;
    9c06:	2300      	movs	r3, #0
    9c08:	f8cb 3000 	str.w	r3, [fp]
  uip_slen = 0;
    9c0c:	8013      	strh	r3, [r2, #0]
    9c0e:	e67f      	b.n	9910 <uip_process+0x1b0>
       (uip_ipaddr_cmp(uip_udp_conn->ripaddr, all_zeroes_addr) ||
    9c10:	42a0      	cmp	r0, r4
    9c12:	d103      	bne.n	9c1c <uip_process+0x4bc>
	uip_ipaddr_cmp(uip_udp_conn->ripaddr, all_ones_addr) ||
    9c14:	f8b3 9002 	ldrh.w	r9, [r3, #2]
    9c18:	45a1      	cmp	r9, r4
    9c1a:	d0eb      	beq.n	9bf4 <uip_process+0x494>
    9c1c:	4560      	cmp	r0, ip
    9c1e:	d102      	bne.n	9c26 <uip_process+0x4c6>
	uip_ipaddr_cmp(BUF->srcipaddr, uip_udp_conn->ripaddr))) {
    9c20:	8858      	ldrh	r0, [r3, #2]
    9c22:	4540      	cmp	r0, r8
    9c24:	d0e6      	beq.n	9bf4 <uip_process+0x494>
    9c26:	3364      	adds	r3, #100	; 0x64
    9c28:	2101      	movs	r1, #1
    9c2a:	e7ce      	b.n	9bca <uip_process+0x46a>
    UDPBUF->udpchksum = 0xffff;
    9c2c:	f04f 33ff 	mov.w	r3, #4294967295
    9c30:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    9c34:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    9c38:	e6a0      	b.n	997c <uip_process+0x21c>
    9c3a:	bf00      	nop
    9c3c:	20008b92 	.word	0x20008b92
    9c40:	0000b2c5 	.word	0x0000b2c5
    9c44:	0000f1d0 	.word	0x0000f1d0
    9c48:	0000f254 	.word	0x0000f254
    9c4c:	0000f1fa 	.word	0x0000f1fa
    9c50:	00009631 	.word	0x00009631
    9c54:	0000f228 	.word	0x0000f228
    9c58:	0000f23a 	.word	0x0000f23a
    9c5c:	20008b5a 	.word	0x20008b5a
    9c60:	20008ad0 	.word	0x20008ad0
    9c64:	20008bc0 	.word	0x20008bc0
    9c68:	00009661 	.word	0x00009661
    9c6c:	0000f269 	.word	0x0000f269
    9c70:	20008ad4 	.word	0x20008ad4
    9c74:	20009240 	.word	0x20009240
    9c78:	0000f27c 	.word	0x0000f27c
    9c7c:	20008ac8 	.word	0x20008ac8
    9c80:	2000923c 	.word	0x2000923c
  UIP_STAT(++uip_stat.tcp.recv);
    9c84:	8bab      	ldrh	r3, [r5, #28]
    9c86:	9103      	str	r1, [sp, #12]
    9c88:	3301      	adds	r3, #1
    9c8a:	83ab      	strh	r3, [r5, #28]
  if(uip_tcpchksum() != 0xffff) {   /* Compute and check the TCP
    9c8c:	4bce      	ldr	r3, [pc, #824]	; (9fc8 <uip_process+0x868>)
    9c8e:	4798      	blx	r3
    9c90:	9903      	ldr	r1, [sp, #12]
    9c92:	4288      	cmp	r0, r1
    9c94:	f040 8094 	bne.w	9dc0 <uip_process+0x660>
    if(uip_connr->tcpstateflags != UIP_CLOSED &&
    9c98:	4bcc      	ldr	r3, [pc, #816]	; (9fcc <uip_process+0x86c>)
    9c9a:	7e59      	ldrb	r1, [r3, #25]
    9c9c:	4699      	mov	r9, r3
    9c9e:	b199      	cbz	r1, 9cc8 <uip_process+0x568>
    9ca0:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
    9ca2:	889b      	ldrh	r3, [r3, #4]
    9ca4:	4298      	cmp	r0, r3
    9ca6:	d10f      	bne.n	9cc8 <uip_process+0x568>
       BUF->destport == uip_connr->lport &&
    9ca8:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    9caa:	f8b9 3006 	ldrh.w	r3, [r9, #6]
    9cae:	4298      	cmp	r0, r3
    9cb0:	d10a      	bne.n	9cc8 <uip_process+0x568>
       BUF->srcport == uip_connr->rport &&
    9cb2:	8b60      	ldrh	r0, [r4, #26]
    9cb4:	f8b9 3000 	ldrh.w	r3, [r9]
    9cb8:	4298      	cmp	r0, r3
    9cba:	d105      	bne.n	9cc8 <uip_process+0x568>
       uip_ipaddr_cmp(BUF->srcipaddr, uip_connr->ripaddr)) {
    9cbc:	8ba0      	ldrh	r0, [r4, #28]
    9cbe:	f8b9 3002 	ldrh.w	r3, [r9, #2]
    9cc2:	4298      	cmp	r0, r3
    9cc4:	f000 8192 	beq.w	9fec <uip_process+0x88c>
  if((BUF->flags & TCP_CTL) != TCP_SYN) {
    9cc8:	f894 e02f 	ldrb.w	lr, [r4, #47]	; 0x2f
    9ccc:	f00e 033f 	and.w	r3, lr, #63	; 0x3f
    9cd0:	2b02      	cmp	r3, #2
    9cd2:	f040 8082 	bne.w	9dda <uip_process+0x67a>
    if(tmp16 == uip_listenports[c])
    9cd6:	4abe      	ldr	r2, [pc, #760]	; (9fd0 <uip_process+0x870>)
  tmp16 = BUF->destport;
    9cd8:	f8b4 c024 	ldrh.w	ip, [r4, #36]	; 0x24
    if(tmp16 == uip_listenports[c])
    9cdc:	f8b2 9000 	ldrh.w	r9, [r2]
  tmp16 = BUF->destport;
    9ce0:	4bbc      	ldr	r3, [pc, #752]	; (9fd4 <uip_process+0x874>)
  for(c = 0; c < UIP_LISTENPORTS; ++c) {
    9ce2:	f04f 0800 	mov.w	r8, #0
    if(tmp16 == uip_listenports[c])
    9ce6:	45cc      	cmp	ip, r9
  tmp16 = BUF->destport;
    9ce8:	4660      	mov	r0, ip
    9cea:	f8a3 c00a 	strh.w	ip, [r3, #10]
  for(c = 0; c < UIP_LISTENPORTS; ++c) {
    9cee:	f883 8002 	strb.w	r8, [r3, #2]
    9cf2:	4699      	mov	r9, r3
    if(tmp16 == uip_listenports[c])
    9cf4:	d16c      	bne.n	9dd0 <uip_process+0x670>
    if(uip_conns[c].tcpstateflags == UIP_CLOSED) {
    9cf6:	2900      	cmp	r1, #0
    9cf8:	f040 80d4 	bne.w	9ea4 <uip_process+0x744>
      uip_connr = &uip_conns[c];
    9cfc:	f8df 82cc 	ldr.w	r8, [pc, #716]	; 9fcc <uip_process+0x86c>
  uip_connr->lport = BUF->destport;
    9d00:	f8a8 0004 	strh.w	r0, [r8, #4]
  uip_connr->rto = uip_connr->timer = UIP_RTO;
    9d04:	2303      	movs	r3, #3
    9d06:	f888 301a 	strb.w	r3, [r8, #26]
    9d0a:	f888 3018 	strb.w	r3, [r8, #24]
  uip_connr->sa = 0;
    9d0e:	2500      	movs	r5, #0
  uip_connr->sv = 4;
    9d10:	2304      	movs	r3, #4
  uip_conn = uip_connr;
    9d12:	f8cb 8000 	str.w	r8, [fp]
  uip_connr->sa = 0;
    9d16:	f888 5016 	strb.w	r5, [r8, #22]
  uip_connr->sv = 4;
    9d1a:	f888 3017 	strb.w	r3, [r8, #23]
  uip_connr->nrtx = 0;
    9d1e:	f888 501b 	strb.w	r5, [r8, #27]
  uip_connr->rport = BUF->srcport;
    9d22:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
    9d26:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    9d2a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    9d2e:	f8a8 3006 	strh.w	r3, [r8, #6]
  uip_ipaddr_copy(uip_connr->ripaddr, BUF->srcipaddr);
    9d32:	8b63      	ldrh	r3, [r4, #26]
    9d34:	f8a8 3000 	strh.w	r3, [r8]
    9d38:	8ba3      	ldrh	r3, [r4, #28]
    9d3a:	f8a8 3002 	strh.w	r3, [r8, #2]
  uip_connr->snd_nxt[0] = iss[0];
    9d3e:	f899 3006 	ldrb.w	r3, [r9, #6]
    9d42:	f888 300c 	strb.w	r3, [r8, #12]
  uip_connr->snd_nxt[1] = iss[1];
    9d46:	f899 3007 	ldrb.w	r3, [r9, #7]
    9d4a:	f888 300d 	strb.w	r3, [r8, #13]
  uip_connr->snd_nxt[2] = iss[2];
    9d4e:	f899 3008 	ldrb.w	r3, [r9, #8]
    9d52:	f888 300e 	strb.w	r3, [r8, #14]
  uip_connr->snd_nxt[3] = iss[3];
    9d56:	f899 3009 	ldrb.w	r3, [r9, #9]
    9d5a:	f888 300f 	strb.w	r3, [r8, #15]
  uip_connr->rcv_nxt[3] = BUF->seqno[3];
    9d5e:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    9d62:	f888 300b 	strb.w	r3, [r8, #11]
  uip_connr->rcv_nxt[2] = BUF->seqno[2];
    9d66:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    9d6a:	f888 300a 	strb.w	r3, [r8, #10]
  uip_connr->rcv_nxt[1] = BUF->seqno[1];
    9d6e:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    9d72:	f888 3009 	strb.w	r3, [r8, #9]
  uip_connr->tcpstateflags = UIP_SYN_RCVD;
    9d76:	2001      	movs	r0, #1
  uip_connr->rcv_nxt[0] = BUF->seqno[0];
    9d78:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
    9d7c:	f888 3008 	strb.w	r3, [r8, #8]
  uip_connr->tcpstateflags = UIP_SYN_RCVD;
    9d80:	f888 0019 	strb.w	r0, [r8, #25]
  uip_add_rcv_nxt(1);
    9d84:	4b94      	ldr	r3, [pc, #592]	; (9fd8 <uip_process+0x878>)
  uip_connr->len = 1;
    9d86:	f8a8 0010 	strh.w	r0, [r8, #16]
  uip_add_rcv_nxt(1);
    9d8a:	4798      	blx	r3
  if((BUF->tcpoffset & 0xf0) > 0x50) {
    9d8c:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    9d90:	f002 03f0 	and.w	r3, r2, #240	; 0xf0
    9d94:	2b50      	cmp	r3, #80	; 0x50
    9d96:	f240 80b6 	bls.w	9f06 <uip_process+0x7a6>
    for(c = 0; c < ((BUF->tcpoffset >> 4) - 5) << 2 ;) {
    9d9a:	0912      	lsrs	r2, r2, #4
    9d9c:	3a05      	subs	r2, #5
    9d9e:	f889 5002 	strb.w	r5, [r9, #2]
    9da2:	0092      	lsls	r2, r2, #2
    9da4:	4297      	cmp	r7, r2
    9da6:	da05      	bge.n	9db4 <uip_process+0x654>
      opt = uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + c];
    9da8:	19e0      	adds	r0, r4, r7
    9daa:	f890 1036 	ldrb.w	r1, [r0, #54]	; 0x36
      if(opt == TCP_OPT_END) {
    9dae:	2900      	cmp	r1, #0
    9db0:	f040 8088 	bne.w	9ec4 <uip_process+0x764>
    9db4:	2d00      	cmp	r5, #0
    9db6:	f000 80a6 	beq.w	9f06 <uip_process+0x7a6>
    9dba:	f889 7002 	strb.w	r7, [r9, #2]
    9dbe:	e0a2      	b.n	9f06 <uip_process+0x7a6>
    UIP_STAT(++uip_stat.tcp.drop);
    9dc0:	8b6b      	ldrh	r3, [r5, #26]
    UIP_LOG("tcp: bad checksum.");
    9dc2:	4886      	ldr	r0, [pc, #536]	; (9fdc <uip_process+0x87c>)
    UIP_STAT(++uip_stat.tcp.drop);
    9dc4:	3301      	adds	r3, #1
    9dc6:	836b      	strh	r3, [r5, #26]
    UIP_STAT(++uip_stat.tcp.chkerr);
    9dc8:	8c2b      	ldrh	r3, [r5, #32]
    9dca:	3301      	adds	r3, #1
    9dcc:	842b      	strh	r3, [r5, #32]
    9dce:	e5ff      	b.n	99d0 <uip_process+0x270>
    9dd0:	2101      	movs	r1, #1
    9dd2:	7099      	strb	r1, [r3, #2]
  UIP_STAT(++uip_stat.tcp.synrst);
    9dd4:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
    9dd6:	440b      	add	r3, r1
    9dd8:	856b      	strh	r3, [r5, #42]	; 0x2a
  if(BUF->flags & TCP_RST) {
    9dda:	f01e 0f04 	tst.w	lr, #4
    9dde:	f47f ad17 	bne.w	9810 <uip_process+0xb0>
  UIP_STAT(++uip_stat.tcp.rst);
    9de2:	8cab      	ldrh	r3, [r5, #36]	; 0x24
  c = BUF->seqno[3];
    9de4:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
  c = BUF->seqno[2];
    9de8:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
  c = BUF->seqno[0];
    9dec:	f894 7026 	ldrb.w	r7, [r4, #38]	; 0x26
  BUF->seqno[0] = BUF->ackno[0];
    9df0:	f894 e02a 	ldrb.w	lr, [r4, #42]	; 0x2a
    9df4:	f884 e026 	strb.w	lr, [r4, #38]	; 0x26
  UIP_STAT(++uip_stat.tcp.rst);
    9df8:	3301      	adds	r3, #1
    9dfa:	84ab      	strh	r3, [r5, #36]	; 0x24
  BUF->flags = TCP_RST | TCP_ACK;
    9dfc:	2314      	movs	r3, #20
    9dfe:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
  uip_len = UIP_IPTCPH_LEN;
    9e02:	2328      	movs	r3, #40	; 0x28
    9e04:	8033      	strh	r3, [r6, #0]
  BUF->tcpoffset = 5 << 4;
    9e06:	2350      	movs	r3, #80	; 0x50
    9e08:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
  BUF->seqno[3] = BUF->ackno[3];
    9e0c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
  BUF->seqno[1] = BUF->ackno[1];
    9e10:	f894 502b 	ldrb.w	r5, [r4, #43]	; 0x2b
  BUF->seqno[3] = BUF->ackno[3];
    9e14:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  BUF->seqno[2] = BUF->ackno[2];
    9e18:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    9e1c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  if(++BUF->ackno[3] == 0) {
    9e20:	3001      	adds	r0, #1
  c = BUF->seqno[1];
    9e22:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
  BUF->seqno[1] = BUF->ackno[1];
    9e26:	f884 5027 	strb.w	r5, [r4, #39]	; 0x27
  c = BUF->seqno[0];
    9e2a:	4d6a      	ldr	r5, [pc, #424]	; (9fd4 <uip_process+0x874>)
  BUF->ackno[2] = c;
    9e2c:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
  if(++BUF->ackno[3] == 0) {
    9e30:	b2c0      	uxtb	r0, r0
  BUF->ackno[1] = c;
    9e32:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  c = BUF->seqno[0];
    9e36:	70af      	strb	r7, [r5, #2]
  BUF->ackno[0] = c;
    9e38:	f884 702a 	strb.w	r7, [r4, #42]	; 0x2a
  if(++BUF->ackno[3] == 0) {
    9e3c:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    9e40:	b960      	cbnz	r0, 9e5c <uip_process+0x6fc>
    if(++BUF->ackno[2] == 0) {
    9e42:	3101      	adds	r1, #1
    9e44:	b2c9      	uxtb	r1, r1
    9e46:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
    9e4a:	b939      	cbnz	r1, 9e5c <uip_process+0x6fc>
      if(++BUF->ackno[1] == 0) {
    9e4c:	3301      	adds	r3, #1
    9e4e:	b2db      	uxtb	r3, r3
    9e50:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
    9e54:	b913      	cbnz	r3, 9e5c <uip_process+0x6fc>
	++BUF->ackno[0];
    9e56:	1c7b      	adds	r3, r7, #1
    9e58:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
  tmp16 = BUF->srcport;
    9e5c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    9e5e:	816b      	strh	r3, [r5, #10]
  BUF->srcport = BUF->destport;
    9e60:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
  BUF->destport = tmp16;
    9e62:	84a3      	strh	r3, [r4, #36]	; 0x24
  uip_ipaddr_copy(BUF->destipaddr, BUF->srcipaddr);
    9e64:	8b63      	ldrh	r3, [r4, #26]
    9e66:	83e3      	strh	r3, [r4, #30]
    9e68:	8ba3      	ldrh	r3, [r4, #28]
    9e6a:	8423      	strh	r3, [r4, #32]
  uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
    9e6c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    9e70:	8363      	strh	r3, [r4, #26]
    9e72:	f8bd 3008 	ldrh.w	r3, [sp, #8]
  BUF->srcport = BUF->destport;
    9e76:	8461      	strh	r1, [r4, #34]	; 0x22
  uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
    9e78:	83a3      	strh	r3, [r4, #28]
  BUF->ttl = UIP_TTL;
    9e7a:	4c59      	ldr	r4, [pc, #356]	; (9fe0 <uip_process+0x880>)
    9e7c:	2340      	movs	r3, #64	; 0x40
    9e7e:	75a3      	strb	r3, [r4, #22]
  BUF->len[0] = (uip_len >> 8);
    9e80:	8833      	ldrh	r3, [r6, #0]
  BUF->len[1] = (uip_len & 0xff);
    9e82:	7463      	strb	r3, [r4, #17]
  BUF->len[0] = (uip_len >> 8);
    9e84:	0a1a      	lsrs	r2, r3, #8
  BUF->urgp[0] = BUF->urgp[1] = 0;
    9e86:	2300      	movs	r3, #0
    9e88:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    9e8c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  BUF->tcpchksum = 0;
    9e90:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    9e94:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  BUF->len[0] = (uip_len >> 8);
    9e98:	7422      	strb	r2, [r4, #16]
  BUF->tcpchksum = ~(uip_tcpchksum());
    9e9a:	4b4b      	ldr	r3, [pc, #300]	; (9fc8 <uip_process+0x868>)
    9e9c:	4798      	blx	r3
    9e9e:	43c0      	mvns	r0, r0
    9ea0:	8660      	strh	r0, [r4, #50]	; 0x32
    9ea2:	e56b      	b.n	997c <uip_process+0x21c>
	uip_connr = &uip_conns[c];
    9ea4:	4b49      	ldr	r3, [pc, #292]	; (9fcc <uip_process+0x86c>)
    if(uip_conns[c].tcpstateflags == UIP_TIME_WAIT) {
    9ea6:	2907      	cmp	r1, #7
	uip_connr = &uip_conns[c];
    9ea8:	bf08      	it	eq
    9eaa:	4698      	moveq	r8, r3
  for(c = 0; c < UIP_CONNS; ++c) {
    9eac:	2301      	movs	r3, #1
    9eae:	f889 3002 	strb.w	r3, [r9, #2]
  if(uip_connr == 0) {
    9eb2:	f1b8 0f00 	cmp.w	r8, #0
    9eb6:	f47f af23 	bne.w	9d00 <uip_process+0x5a0>
    UIP_STAT(++uip_stat.tcp.syndrop);
    9eba:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    UIP_LOG("tcp: found no unused connections.");
    9ebc:	4849      	ldr	r0, [pc, #292]	; (9fe4 <uip_process+0x884>)
    UIP_STAT(++uip_stat.tcp.syndrop);
    9ebe:	3301      	adds	r3, #1
    9ec0:	852b      	strh	r3, [r5, #40]	; 0x28
    9ec2:	e585      	b.n	99d0 <uip_process+0x270>
      } else if(opt == TCP_OPT_NOOP) {
    9ec4:	2901      	cmp	r1, #1
    9ec6:	d103      	bne.n	9ed0 <uip_process+0x770>
	++c;
    9ec8:	3701      	adds	r7, #1
	c += uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c];
    9eca:	b2ff      	uxtb	r7, r7
    9ecc:	2501      	movs	r5, #1
    9ece:	e769      	b.n	9da4 <uip_process+0x644>
      } else if(opt == TCP_OPT_MSS &&
    9ed0:	2902      	cmp	r1, #2
    9ed2:	d171      	bne.n	9fb8 <uip_process+0x858>
    9ed4:	f890 1037 	ldrb.w	r1, [r0, #55]	; 0x37
    9ed8:	2904      	cmp	r1, #4
    9eda:	d16d      	bne.n	9fb8 <uip_process+0x858>
    9edc:	b10d      	cbz	r5, 9ee2 <uip_process+0x782>
    9ede:	f889 7002 	strb.w	r7, [r9, #2]
	tmp16 = ((u16_t)uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 2 + c] << 8) |
    9ee2:	443c      	add	r4, r7
    9ee4:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
	  (u16_t)uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN + 3 + c];
    9ee8:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
	tmp16 = ((u16_t)uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 2 + c] << 8) |
    9eec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	uip_connr->initialmss = uip_connr->mss =
    9ef0:	f240 626e 	movw	r2, #1646	; 0x66e
    9ef4:	4293      	cmp	r3, r2
	tmp16 = ((u16_t)uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 2 + c] << 8) |
    9ef6:	f8a9 300a 	strh.w	r3, [r9, #10]
	uip_connr->initialmss = uip_connr->mss =
    9efa:	bf28      	it	cs
    9efc:	4613      	movcs	r3, r2
    9efe:	f8a8 3012 	strh.w	r3, [r8, #18]
    9f02:	f8a8 3014 	strh.w	r3, [r8, #20]
  BUF->flags = TCP_SYN | TCP_ACK;
    9f06:	4b36      	ldr	r3, [pc, #216]	; (9fe0 <uip_process+0x880>)
    9f08:	2212      	movs	r2, #18
    9f0a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  BUF->optdata[0] = TCP_OPT_MSS;
    9f0e:	2202      	movs	r2, #2
    9f10:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  BUF->optdata[1] = TCP_OPT_MSS_LEN;
    9f14:	2204      	movs	r2, #4
    9f16:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
  BUF->optdata[2] = (UIP_TCP_MSS) / 256;
    9f1a:	2206      	movs	r2, #6
    9f1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  BUF->optdata[3] = (UIP_TCP_MSS) & 255;
    9f20:	226e      	movs	r2, #110	; 0x6e
    9f22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  uip_len = UIP_IPTCPH_LEN + TCP_OPT_MSS_LEN;
    9f26:	222c      	movs	r2, #44	; 0x2c
    9f28:	8032      	strh	r2, [r6, #0]
  BUF->tcpoffset = ((UIP_TCPH_LEN + TCP_OPT_MSS_LEN) / 4) << 4;
    9f2a:	2260      	movs	r2, #96	; 0x60
  BUF->tcpoffset = (UIP_TCPH_LEN / 4) << 4;
    9f2c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  BUF->ackno[0] = uip_connr->rcv_nxt[0];
    9f30:	4b2b      	ldr	r3, [pc, #172]	; (9fe0 <uip_process+0x880>)
    9f32:	f898 2008 	ldrb.w	r2, [r8, #8]
    9f36:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  BUF->ackno[1] = uip_connr->rcv_nxt[1];
    9f3a:	f898 2009 	ldrb.w	r2, [r8, #9]
    9f3e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  BUF->ackno[2] = uip_connr->rcv_nxt[2];
    9f42:	f898 200a 	ldrb.w	r2, [r8, #10]
    9f46:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  BUF->ackno[3] = uip_connr->rcv_nxt[3];
    9f4a:	f898 200b 	ldrb.w	r2, [r8, #11]
    9f4e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  BUF->seqno[0] = uip_connr->snd_nxt[0];
    9f52:	f898 200c 	ldrb.w	r2, [r8, #12]
    9f56:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  BUF->seqno[1] = uip_connr->snd_nxt[1];
    9f5a:	f898 200d 	ldrb.w	r2, [r8, #13]
    9f5e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  BUF->seqno[2] = uip_connr->snd_nxt[2];
    9f62:	f898 200e 	ldrb.w	r2, [r8, #14]
    9f66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  BUF->seqno[3] = uip_connr->snd_nxt[3];
    9f6a:	f898 200f 	ldrb.w	r2, [r8, #15]
    9f6e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  BUF->proto = UIP_PROTO_TCP;
    9f72:	2206      	movs	r2, #6
    9f74:	75da      	strb	r2, [r3, #23]
  BUF->srcport  = uip_connr->lport;
    9f76:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    9f7a:	8459      	strh	r1, [r3, #34]	; 0x22
  BUF->destport = uip_connr->rport;
    9f7c:	f8b8 1006 	ldrh.w	r1, [r8, #6]
    9f80:	8499      	strh	r1, [r3, #36]	; 0x24
  uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
    9f82:	4919      	ldr	r1, [pc, #100]	; (9fe8 <uip_process+0x888>)
    9f84:	8808      	ldrh	r0, [r1, #0]
    9f86:	8849      	ldrh	r1, [r1, #2]
    9f88:	8358      	strh	r0, [r3, #26]
    9f8a:	8399      	strh	r1, [r3, #28]
  uip_ipaddr_copy(BUF->destipaddr, uip_connr->ripaddr);
    9f8c:	f8b8 1000 	ldrh.w	r1, [r8]
    9f90:	83d9      	strh	r1, [r3, #30]
    9f92:	f8b8 1002 	ldrh.w	r1, [r8, #2]
    9f96:	8419      	strh	r1, [r3, #32]
  if(uip_connr->tcpstateflags & UIP_STOPPED) {
    9f98:	f898 1019 	ldrb.w	r1, [r8, #25]
    9f9c:	06c9      	lsls	r1, r1, #27
    BUF->wnd[0] = BUF->wnd[1] = 0;
    9f9e:	bf43      	ittte	mi
    9fa0:	2200      	movmi	r2, #0
    9fa2:	f883 2031 	strbmi.w	r2, [r3, #49]	; 0x31
    9fa6:	f883 2030 	strbmi.w	r2, [r3, #48]	; 0x30
    BUF->wnd[0] = ((UIP_RECEIVE_WINDOW) >> 8);
    9faa:	f883 2030 	strbpl.w	r2, [r3, #48]	; 0x30
    BUF->wnd[1] = ((UIP_RECEIVE_WINDOW) & 0xff);
    9fae:	bf5c      	itt	pl
    9fb0:	226e      	movpl	r2, #110	; 0x6e
    9fb2:	f883 2031 	strbpl.w	r2, [r3, #49]	; 0x31
    9fb6:	e760      	b.n	9e7a <uip_process+0x71a>
	if(uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == 0) {
    9fb8:	19e1      	adds	r1, r4, r7
    9fba:	f891 1037 	ldrb.w	r1, [r1, #55]	; 0x37
    9fbe:	2900      	cmp	r1, #0
    9fc0:	f43f aef8 	beq.w	9db4 <uip_process+0x654>
	c += uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c];
    9fc4:	440f      	add	r7, r1
    9fc6:	e780      	b.n	9eca <uip_process+0x76a>
    9fc8:	00009655 	.word	0x00009655
    9fcc:	20008ae0 	.word	0x20008ae0
    9fd0:	20008b54 	.word	0x20008b54
    9fd4:	200072d6 	.word	0x200072d6
    9fd8:	000095fd 	.word	0x000095fd
    9fdc:	0000f29e 	.word	0x0000f29e
    9fe0:	20008b96 	.word	0x20008b96
    9fe4:	0000f2b1 	.word	0x0000f2b1
    9fe8:	20008b92 	.word	0x20008b92
  if(BUF->flags & TCP_RST) {
    9fec:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
  uip_flags = 0;
    9ff0:	4da3      	ldr	r5, [pc, #652]	; (a280 <uip_process+0xb20>)
  uip_conn = uip_connr;
    9ff2:	f8cb 9000 	str.w	r9, [fp]
  uip_flags = 0;
    9ff6:	2300      	movs	r3, #0
  if(BUF->flags & TCP_RST) {
    9ff8:	f012 0f04 	tst.w	r2, #4
  uip_flags = 0;
    9ffc:	702b      	strb	r3, [r5, #0]
    9ffe:	462f      	mov	r7, r5
  if(BUF->flags & TCP_RST) {
    a000:	d00a      	beq.n	a018 <uip_process+0x8b8>
    uip_connr->tcpstateflags = UIP_CLOSED;
    a002:	f889 3019 	strb.w	r3, [r9, #25]
    UIP_LOG("tcp: got reset, aborting connection.");
    a006:	489f      	ldr	r0, [pc, #636]	; (a284 <uip_process+0xb24>)
    a008:	4b9f      	ldr	r3, [pc, #636]	; (a288 <uip_process+0xb28>)
    a00a:	4798      	blx	r3
    uip_flags = UIP_ABORT;
    a00c:	2320      	movs	r3, #32
    a00e:	702b      	strb	r3, [r5, #0]
      UIP_APPCALL();
    a010:	4b9e      	ldr	r3, [pc, #632]	; (a28c <uip_process+0xb2c>)
    a012:	4798      	blx	r3
    a014:	f7ff bbfc 	b.w	9810 <uip_process+0xb0>
  c = (BUF->tcpoffset >> 4) << 2;
    a018:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    a01c:	489c      	ldr	r0, [pc, #624]	; (a290 <uip_process+0xb30>)
    a01e:	091b      	lsrs	r3, r3, #4
    a020:	009d      	lsls	r5, r3, #2
  uip_len = uip_len - c - UIP_IPH_LEN;
    a022:	f1a8 0314 	sub.w	r3, r8, #20
    a026:	1b5b      	subs	r3, r3, r5
  if(!(((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_SYN_SENT) &&
    a028:	f001 010f 	and.w	r1, r1, #15
  uip_len = uip_len - c - UIP_IPH_LEN;
    a02c:	b29b      	uxth	r3, r3
  if(!(((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_SYN_SENT) &&
    a02e:	2902      	cmp	r1, #2
  c = (BUF->tcpoffset >> 4) << 2;
    a030:	7085      	strb	r5, [r0, #2]
  uip_len = uip_len - c - UIP_IPH_LEN;
    a032:	8033      	strh	r3, [r6, #0]
    a034:	4683      	mov	fp, r0
    a036:	4d97      	ldr	r5, [pc, #604]	; (a294 <uip_process+0xb34>)
  if(!(((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_SYN_SENT) &&
    a038:	d103      	bne.n	a042 <uip_process+0x8e2>
    a03a:	f002 013f 	and.w	r1, r2, #63	; 0x3f
    a03e:	2912      	cmp	r1, #18
    a040:	d00c      	beq.n	a05c <uip_process+0x8fc>
    if((uip_len > 0 || ((BUF->flags & (TCP_SYN | TCP_FIN)) != 0)) &&
    a042:	b90b      	cbnz	r3, a048 <uip_process+0x8e8>
    a044:	0793      	lsls	r3, r2, #30
    a046:	d009      	beq.n	a05c <uip_process+0x8fc>
    a048:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
    a04a:	892b      	ldrh	r3, [r5, #8]
    a04c:	4299      	cmp	r1, r3
    a04e:	f040 814a 	bne.w	a2e6 <uip_process+0xb86>
	BUF->seqno[2] != uip_connr->rcv_nxt[2] ||
    a052:	8d21      	ldrh	r1, [r4, #40]	; 0x28
    a054:	896b      	ldrh	r3, [r5, #10]
    a056:	4299      	cmp	r1, r3
    a058:	f040 8145 	bne.w	a2e6 <uip_process+0xb86>
  if((BUF->flags & TCP_ACK) && uip_outstanding(uip_connr)) {
    a05c:	06d0      	lsls	r0, r2, #27
    a05e:	d545      	bpl.n	a0ec <uip_process+0x98c>
    a060:	8a29      	ldrh	r1, [r5, #16]
    a062:	2900      	cmp	r1, #0
    a064:	d042      	beq.n	a0ec <uip_process+0x98c>
    uip_add32(uip_connr->snd_nxt, uip_connr->len);
    a066:	488c      	ldr	r0, [pc, #560]	; (a298 <uip_process+0xb38>)
    a068:	4b8c      	ldr	r3, [pc, #560]	; (a29c <uip_process+0xb3c>)
    a06a:	4798      	blx	r3
    if(BUF->ackno[0] == uip_acc32[0] &&
    a06c:	4b8c      	ldr	r3, [pc, #560]	; (a2a0 <uip_process+0xb40>)
    a06e:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
    a072:	7818      	ldrb	r0, [r3, #0]
    a074:	4290      	cmp	r0, r2
    a076:	d139      	bne.n	a0ec <uip_process+0x98c>
       BUF->ackno[1] == uip_acc32[1] &&
    a078:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
    if(BUF->ackno[0] == uip_acc32[0] &&
    a07c:	7859      	ldrb	r1, [r3, #1]
    a07e:	4291      	cmp	r1, r2
    a080:	d134      	bne.n	a0ec <uip_process+0x98c>
       BUF->ackno[2] == uip_acc32[2] &&
    a082:	f894 e02c 	ldrb.w	lr, [r4, #44]	; 0x2c
       BUF->ackno[1] == uip_acc32[1] &&
    a086:	789a      	ldrb	r2, [r3, #2]
    a088:	4572      	cmp	r2, lr
    a08a:	d12f      	bne.n	a0ec <uip_process+0x98c>
       BUF->ackno[3] == uip_acc32[3]) {
    a08c:	f894 e02d 	ldrb.w	lr, [r4, #45]	; 0x2d
       BUF->ackno[2] == uip_acc32[2] &&
    a090:	78db      	ldrb	r3, [r3, #3]
    a092:	4573      	cmp	r3, lr
    a094:	d12a      	bne.n	a0ec <uip_process+0x98c>
      uip_connr->snd_nxt[3] = uip_acc32[3];
    a096:	73eb      	strb	r3, [r5, #15]
      if(uip_connr->nrtx == 0) {
    a098:	7eeb      	ldrb	r3, [r5, #27]
      uip_connr->snd_nxt[0] = uip_acc32[0];
    a09a:	7328      	strb	r0, [r5, #12]
      uip_connr->snd_nxt[1] = uip_acc32[1];
    a09c:	7369      	strb	r1, [r5, #13]
      uip_connr->snd_nxt[2] = uip_acc32[2];
    a09e:	73aa      	strb	r2, [r5, #14]
      if(uip_connr->nrtx == 0) {
    a0a0:	b9f3      	cbnz	r3, a0e0 <uip_process+0x980>
	m = uip_connr->rto - uip_connr->timer;
    a0a2:	7e29      	ldrb	r1, [r5, #24]
    a0a4:	7eaa      	ldrb	r2, [r5, #26]
	m = m - (uip_connr->sa >> 3);
    a0a6:	7dab      	ldrb	r3, [r5, #22]
	m = uip_connr->rto - uip_connr->timer;
    a0a8:	1a89      	subs	r1, r1, r2
	m = m - (uip_connr->sa >> 3);
    a0aa:	eba1 01d3 	sub.w	r1, r1, r3, lsr #3
    a0ae:	b2c9      	uxtb	r1, r1
    a0b0:	fa4f fe81 	sxtb.w	lr, r1
	if(m < 0) {
    a0b4:	f1be 0f00 	cmp.w	lr, #0
	m = m - (uip_connr->sv >> 2);
    a0b8:	f899 2017 	ldrb.w	r2, [r9, #23]
	uip_connr->sa += m;
    a0bc:	440b      	add	r3, r1
	  m = -m;
    a0be:	bfbc      	itt	lt
    a0c0:	4249      	neglt	r1, r1
    a0c2:	fa4f fe81 	sxtblt.w	lr, r1
	uip_connr->sv += m;
    a0c6:	eba2 0292 	sub.w	r2, r2, r2, lsr #2
	uip_connr->sa += m;
    a0ca:	b2d8      	uxtb	r0, r3
	uip_connr->sv += m;
    a0cc:	eb02 030e 	add.w	r3, r2, lr
    a0d0:	b2db      	uxtb	r3, r3
    a0d2:	f889 3017 	strb.w	r3, [r9, #23]
	uip_connr->rto = (uip_connr->sa >> 3) + uip_connr->sv;
    a0d6:	eb03 03d0 	add.w	r3, r3, r0, lsr #3
	uip_connr->sa += m;
    a0da:	75a8      	strb	r0, [r5, #22]
	uip_connr->rto = (uip_connr->sa >> 3) + uip_connr->sv;
    a0dc:	f889 3018 	strb.w	r3, [r9, #24]
      uip_flags = UIP_ACKDATA;
    a0e0:	2301      	movs	r3, #1
    a0e2:	703b      	strb	r3, [r7, #0]
      uip_connr->timer = uip_connr->rto;
    a0e4:	7e2b      	ldrb	r3, [r5, #24]
    a0e6:	76ab      	strb	r3, [r5, #26]
      uip_connr->len = 0;
    a0e8:	2300      	movs	r3, #0
    a0ea:	822b      	strh	r3, [r5, #16]
  switch(uip_connr->tcpstateflags & UIP_TS_MASK) {
    a0ec:	7e69      	ldrb	r1, [r5, #25]
    a0ee:	f001 030f 	and.w	r3, r1, #15
    a0f2:	3b01      	subs	r3, #1
    a0f4:	2b07      	cmp	r3, #7
    a0f6:	f63f ab8b 	bhi.w	9810 <uip_process+0xb0>
    a0fa:	a201      	add	r2, pc, #4	; (adr r2, a100 <uip_process+0x9a0>)
    a0fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    a100:	0000a121 	.word	0x0000a121
    a104:	00009811 	.word	0x00009811
    a108:	0000a157 	.word	0x0000a157
    a10c:	0000a2b1 	.word	0x0000a2b1
    a110:	0000a303 	.word	0x0000a303
    a114:	0000a32b 	.word	0x0000a32b
    a118:	0000a2e7 	.word	0x0000a2e7
    a11c:	0000a26d 	.word	0x0000a26d
    if(uip_flags & UIP_ACKDATA) {
    a120:	783b      	ldrb	r3, [r7, #0]
    a122:	07d9      	lsls	r1, r3, #31
    a124:	f57f ab74 	bpl.w	9810 <uip_process+0xb0>
      uip_connr->tcpstateflags = UIP_ESTABLISHED;
    a128:	2303      	movs	r3, #3
    a12a:	f889 3019 	strb.w	r3, [r9, #25]
      if(uip_len > 0) {
    a12e:	8830      	ldrh	r0, [r6, #0]
      uip_flags = UIP_CONNECTED;
    a130:	2340      	movs	r3, #64	; 0x40
    a132:	703b      	strb	r3, [r7, #0]
      uip_connr->len = 0;
    a134:	2300      	movs	r3, #0
    a136:	f8a9 3010 	strh.w	r3, [r9, #16]
      if(uip_len > 0) {
    a13a:	b118      	cbz	r0, a144 <uip_process+0x9e4>
        uip_flags |= UIP_NEWDATA;
    a13c:	2342      	movs	r3, #66	; 0x42
    a13e:	703b      	strb	r3, [r7, #0]
        uip_add_rcv_nxt(uip_len);
    a140:	4b58      	ldr	r3, [pc, #352]	; (a2a4 <uip_process+0xb44>)
    a142:	4798      	blx	r3
      uip_slen = 0;
    a144:	4b58      	ldr	r3, [pc, #352]	; (a2a8 <uip_process+0xb48>)
      goto appsend;
    a146:	f8df 814c 	ldr.w	r8, [pc, #332]	; a294 <uip_process+0xb34>
      uip_slen = 0;
    a14a:	2200      	movs	r2, #0
    a14c:	801a      	strh	r2, [r3, #0]
      UIP_APPCALL();
    a14e:	4b4f      	ldr	r3, [pc, #316]	; (a28c <uip_process+0xb2c>)
    a150:	4798      	blx	r3
      goto appsend;
    a152:	f7ff bb27 	b.w	97a4 <uip_process+0x44>
    if(BUF->flags & TCP_FIN && !(uip_connr->tcpstateflags & UIP_STOPPED)) {
    a156:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    a15a:	07da      	lsls	r2, r3, #31
    a15c:	d525      	bpl.n	a1aa <uip_process+0xa4a>
    a15e:	06c8      	lsls	r0, r1, #27
    a160:	d423      	bmi.n	a1aa <uip_process+0xa4a>
      if(uip_outstanding(uip_connr)) {
    a162:	8a2b      	ldrh	r3, [r5, #16]
    a164:	2b00      	cmp	r3, #0
    a166:	f47f ab53 	bne.w	9810 <uip_process+0xb0>
      uip_add_rcv_nxt(1 + uip_len);
    a16a:	8830      	ldrh	r0, [r6, #0]
    a16c:	4b4d      	ldr	r3, [pc, #308]	; (a2a4 <uip_process+0xb44>)
    a16e:	3001      	adds	r0, #1
    a170:	b280      	uxth	r0, r0
    a172:	4798      	blx	r3
      uip_flags |= UIP_CLOSE;
    a174:	783b      	ldrb	r3, [r7, #0]
    a176:	f043 0210 	orr.w	r2, r3, #16
    a17a:	703a      	strb	r2, [r7, #0]
      if(uip_len > 0) {
    a17c:	8832      	ldrh	r2, [r6, #0]
    a17e:	b112      	cbz	r2, a186 <uip_process+0xa26>
	uip_flags |= UIP_NEWDATA;
    a180:	f043 0312 	orr.w	r3, r3, #18
    a184:	703b      	strb	r3, [r7, #0]
      UIP_APPCALL();
    a186:	4b41      	ldr	r3, [pc, #260]	; (a28c <uip_process+0xb2c>)
      uip_connr->nrtx = 0;
    a188:	f8df 8108 	ldr.w	r8, [pc, #264]	; a294 <uip_process+0xb34>
      UIP_APPCALL();
    a18c:	4798      	blx	r3
      uip_connr->len = 1;
    a18e:	2301      	movs	r3, #1
    a190:	822b      	strh	r3, [r5, #16]
      uip_connr->tcpstateflags = UIP_LAST_ACK;
    a192:	2308      	movs	r3, #8
    a194:	766b      	strb	r3, [r5, #25]
      uip_connr->nrtx = 0;
    a196:	2300      	movs	r3, #0
    a198:	76eb      	strb	r3, [r5, #27]
      BUF->flags = TCP_FIN | TCP_ACK;
    a19a:	2211      	movs	r2, #17
    a19c:	4b43      	ldr	r3, [pc, #268]	; (a2ac <uip_process+0xb4c>)
    a19e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  uip_len = UIP_IPTCPH_LEN;
    a1a2:	2328      	movs	r3, #40	; 0x28
    a1a4:	8033      	strh	r3, [r6, #0]
    a1a6:	f7ff bb97 	b.w	98d8 <uip_process+0x178>
    if((BUF->flags & TCP_URG) != 0) {
    a1aa:	069a      	lsls	r2, r3, #26
    a1ac:	d50d      	bpl.n	a1ca <uip_process+0xa6a>
      uip_appdata = ((char *)uip_appdata) + ((BUF->urgp[0] << 8) | BUF->urgp[1]);
    a1ae:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
    a1b2:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
    a1b6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    a1ba:	f8da 2000 	ldr.w	r2, [sl]
    a1be:	441a      	add	r2, r3
    a1c0:	f8ca 2000 	str.w	r2, [sl]
      uip_len -= (BUF->urgp[0] << 8) | BUF->urgp[1];
    a1c4:	8832      	ldrh	r2, [r6, #0]
    a1c6:	1ad3      	subs	r3, r2, r3
    a1c8:	8033      	strh	r3, [r6, #0]
    if(uip_len > 0 && !(uip_connr->tcpstateflags & UIP_STOPPED)) {
    a1ca:	8830      	ldrh	r0, [r6, #0]
    a1cc:	b138      	cbz	r0, a1de <uip_process+0xa7e>
    a1ce:	06cb      	lsls	r3, r1, #27
    a1d0:	d405      	bmi.n	a1de <uip_process+0xa7e>
      uip_flags |= UIP_NEWDATA;
    a1d2:	783b      	ldrb	r3, [r7, #0]
    a1d4:	f043 0302 	orr.w	r3, r3, #2
    a1d8:	703b      	strb	r3, [r7, #0]
      uip_add_rcv_nxt(uip_len);
    a1da:	4b32      	ldr	r3, [pc, #200]	; (a2a4 <uip_process+0xb44>)
    a1dc:	4798      	blx	r3
    tmp16 = ((u16_t)BUF->wnd[0] << 8) + (u16_t)BUF->wnd[1];
    a1de:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
    a1e2:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
    a1e6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    if(tmp16 > uip_connr->initialmss ||
    a1ea:	8aaa      	ldrh	r2, [r5, #20]
    tmp16 = ((u16_t)BUF->wnd[0] << 8) + (u16_t)BUF->wnd[1];
    a1ec:	b29b      	uxth	r3, r3
    if(tmp16 > uip_connr->initialmss ||
    a1ee:	4293      	cmp	r3, r2
    tmp16 = ((u16_t)BUF->wnd[0] << 8) + (u16_t)BUF->wnd[1];
    a1f0:	f8ab 300a 	strh.w	r3, [fp, #10]
    if(tmp16 > uip_connr->initialmss ||
    a1f4:	d800      	bhi.n	a1f8 <uip_process+0xa98>
    a1f6:	b90b      	cbnz	r3, a1fc <uip_process+0xa9c>
      tmp16 = uip_connr->initialmss;
    a1f8:	f8ab 200a 	strh.w	r2, [fp, #10]
    uip_connr->mss = tmp16;
    a1fc:	f8bb 300a 	ldrh.w	r3, [fp, #10]
    a200:	f8a9 3012 	strh.w	r3, [r9, #18]
    if(uip_flags & (UIP_NEWDATA | UIP_ACKDATA)) {
    a204:	783b      	ldrb	r3, [r7, #0]
    a206:	079d      	lsls	r5, r3, #30
    a208:	f43f ab02 	beq.w	9810 <uip_process+0xb0>
    a20c:	e79a      	b.n	a144 <uip_process+0x9e4>
      if(uip_flags & UIP_CLOSE) {
    a20e:	f012 0010 	ands.w	r0, r2, #16
    a212:	d009      	beq.n	a228 <uip_process+0xac8>
	uip_slen = 0;
    a214:	8019      	strh	r1, [r3, #0]
	uip_connr->len = 1;
    a216:	2301      	movs	r3, #1
    a218:	f8a8 3010 	strh.w	r3, [r8, #16]
	uip_connr->tcpstateflags = UIP_FIN_WAIT_1;
    a21c:	2304      	movs	r3, #4
    a21e:	f888 3019 	strb.w	r3, [r8, #25]
	uip_connr->nrtx = 0;
    a222:	f888 101b 	strb.w	r1, [r8, #27]
    a226:	e7b8      	b.n	a19a <uip_process+0xa3a>
      if(uip_slen > 0) {
    a228:	8819      	ldrh	r1, [r3, #0]
    a22a:	b171      	cbz	r1, a24a <uip_process+0xaea>
	if((uip_flags & UIP_ACKDATA) != 0) {
    a22c:	07d4      	lsls	r4, r2, #31
	  uip_connr->len = 0;
    a22e:	bf48      	it	mi
    a230:	f8a8 0010 	strhmi.w	r0, [r8, #16]
	if(uip_connr->len == 0) {
    a234:	f8b8 2010 	ldrh.w	r2, [r8, #16]
    a238:	b962      	cbnz	r2, a254 <uip_process+0xaf4>
	  if(uip_slen > uip_connr->mss) {
    a23a:	f8b8 2012 	ldrh.w	r2, [r8, #18]
    a23e:	4291      	cmp	r1, r2
	    uip_slen = uip_connr->mss;
    a240:	bf88      	it	hi
    a242:	801a      	strhhi	r2, [r3, #0]
	  uip_connr->len = uip_slen;
    a244:	881b      	ldrh	r3, [r3, #0]
    a246:	f8a8 3010 	strh.w	r3, [r8, #16]
      uip_connr->nrtx = 0;
    a24a:	2300      	movs	r3, #0
    a24c:	f888 301b 	strb.w	r3, [r8, #27]
    a250:	f7ff bb2e 	b.w	98b0 <uip_process+0x150>
	  uip_slen = uip_connr->len;
    a254:	801a      	strh	r2, [r3, #0]
    a256:	e7f8      	b.n	a24a <uip_process+0xaea>
      if(uip_flags & UIP_NEWDATA) {
    a258:	4b09      	ldr	r3, [pc, #36]	; (a280 <uip_process+0xb20>)
    a25a:	781b      	ldrb	r3, [r3, #0]
    a25c:	0799      	lsls	r1, r3, #30
    a25e:	f57f aad7 	bpl.w	9810 <uip_process+0xb0>
	uip_len = UIP_TCPIP_HLEN;
    a262:	2328      	movs	r3, #40	; 0x28
    a264:	8033      	strh	r3, [r6, #0]
	BUF->flags = TCP_ACK;
    a266:	2210      	movs	r2, #16
    a268:	f7ff bb33 	b.w	98d2 <uip_process+0x172>
    if(uip_flags & UIP_ACKDATA) {
    a26c:	783b      	ldrb	r3, [r7, #0]
    a26e:	07da      	lsls	r2, r3, #31
    a270:	f57f aace 	bpl.w	9810 <uip_process+0xb0>
      uip_connr->tcpstateflags = UIP_CLOSED;
    a274:	2300      	movs	r3, #0
    a276:	766b      	strb	r3, [r5, #25]
      uip_flags = UIP_CLOSE;
    a278:	2310      	movs	r3, #16
    a27a:	703b      	strb	r3, [r7, #0]
    a27c:	e6c8      	b.n	a010 <uip_process+0x8b0>
    a27e:	bf00      	nop
    a280:	20008ad0 	.word	0x20008ad0
    a284:	0000f2d3 	.word	0x0000f2d3
    a288:	0000b2c5 	.word	0x0000b2c5
    a28c:	0000b2b5 	.word	0x0000b2b5
    a290:	200072d6 	.word	0x200072d6
    a294:	20008ae0 	.word	0x20008ae0
    a298:	20008aec 	.word	0x20008aec
    a29c:	000095a9 	.word	0x000095a9
    a2a0:	20008acc 	.word	0x20008acc
    a2a4:	000095fd 	.word	0x000095fd
    a2a8:	2000923c 	.word	0x2000923c
    a2ac:	20008b96 	.word	0x20008b96
    if(uip_len > 0) {
    a2b0:	8830      	ldrh	r0, [r6, #0]
    a2b2:	b108      	cbz	r0, a2b8 <uip_process+0xb58>
      uip_add_rcv_nxt(uip_len);
    a2b4:	4b22      	ldr	r3, [pc, #136]	; (a340 <uip_process+0xbe0>)
    a2b6:	4798      	blx	r3
    if(BUF->flags & TCP_FIN) {
    a2b8:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    a2bc:	f013 0301 	ands.w	r3, r3, #1
    a2c0:	d017      	beq.n	a2f2 <uip_process+0xb92>
      if(uip_flags & UIP_ACKDATA) {
    a2c2:	783b      	ldrb	r3, [r7, #0]
    a2c4:	07db      	lsls	r3, r3, #31
	uip_connr->tcpstateflags = UIP_TIME_WAIT;
    a2c6:	bf45      	ittet	mi
    a2c8:	2307      	movmi	r3, #7
    a2ca:	766b      	strbmi	r3, [r5, #25]
	uip_connr->tcpstateflags = UIP_CLOSING;
    a2cc:	2306      	movpl	r3, #6
	uip_connr->timer = 0;
    a2ce:	2300      	movmi	r3, #0
    a2d0:	bf46      	itte	mi
    a2d2:	76ab      	strbmi	r3, [r5, #26]
	uip_connr->len = 0;
    a2d4:	822b      	strhmi	r3, [r5, #16]
	uip_connr->tcpstateflags = UIP_CLOSING;
    a2d6:	766b      	strbpl	r3, [r5, #25]
      uip_add_rcv_nxt(1);
    a2d8:	4b19      	ldr	r3, [pc, #100]	; (a340 <uip_process+0xbe0>)
    a2da:	2001      	movs	r0, #1
    a2dc:	4798      	blx	r3
      uip_flags = UIP_CLOSE;
    a2de:	2310      	movs	r3, #16
    a2e0:	703b      	strb	r3, [r7, #0]
      UIP_APPCALL();
    a2e2:	4b18      	ldr	r3, [pc, #96]	; (a344 <uip_process+0xbe4>)
    a2e4:	4798      	blx	r3
  BUF->flags = TCP_ACK;
    a2e6:	2310      	movs	r3, #16
    a2e8:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    a2ec:	f8df 8058 	ldr.w	r8, [pc, #88]	; a348 <uip_process+0xbe8>
    a2f0:	e757      	b.n	a1a2 <uip_process+0xa42>
    } else if(uip_flags & UIP_ACKDATA) {
    a2f2:	783a      	ldrb	r2, [r7, #0]
    a2f4:	07d7      	lsls	r7, r2, #31
    a2f6:	d513      	bpl.n	a320 <uip_process+0xbc0>
      uip_connr->tcpstateflags = UIP_FIN_WAIT_2;
    a2f8:	2205      	movs	r2, #5
    a2fa:	766a      	strb	r2, [r5, #25]
      uip_connr->len = 0;
    a2fc:	822b      	strh	r3, [r5, #16]
      goto drop;
    a2fe:	f7ff ba87 	b.w	9810 <uip_process+0xb0>
    if(uip_len > 0) {
    a302:	8830      	ldrh	r0, [r6, #0]
    a304:	b108      	cbz	r0, a30a <uip_process+0xbaa>
      uip_add_rcv_nxt(uip_len);
    a306:	4b0e      	ldr	r3, [pc, #56]	; (a340 <uip_process+0xbe0>)
    a308:	4798      	blx	r3
    if(BUF->flags & TCP_FIN) {
    a30a:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    a30e:	07dd      	lsls	r5, r3, #31
    a310:	d506      	bpl.n	a320 <uip_process+0xbc0>
      uip_connr->tcpstateflags = UIP_TIME_WAIT;
    a312:	2307      	movs	r3, #7
    a314:	f889 3019 	strb.w	r3, [r9, #25]
      uip_connr->timer = 0;
    a318:	2300      	movs	r3, #0
    a31a:	f889 301a 	strb.w	r3, [r9, #26]
    a31e:	e7db      	b.n	a2d8 <uip_process+0xb78>
    if(uip_len > 0) {
    a320:	8833      	ldrh	r3, [r6, #0]
    a322:	2b00      	cmp	r3, #0
    a324:	d1df      	bne.n	a2e6 <uip_process+0xb86>
    a326:	f7ff ba73 	b.w	9810 <uip_process+0xb0>
    if(uip_flags & UIP_ACKDATA) {
    a32a:	783b      	ldrb	r3, [r7, #0]
    a32c:	07d8      	lsls	r0, r3, #31
    a32e:	f57f aa6f 	bpl.w	9810 <uip_process+0xb0>
      uip_connr->tcpstateflags = UIP_TIME_WAIT;
    a332:	2307      	movs	r3, #7
    a334:	766b      	strb	r3, [r5, #25]
      uip_connr->timer = 0;
    a336:	2300      	movs	r3, #0
    a338:	76ab      	strb	r3, [r5, #26]
    a33a:	f7ff ba69 	b.w	9810 <uip_process+0xb0>
    a33e:	bf00      	nop
    a340:	000095fd 	.word	0x000095fd
    a344:	0000b2b5 	.word	0x0000b2b5
    a348:	20008ae0 	.word	0x20008ae0

0000a34c <htons>:
  return HTONS(val);
    a34c:	ba40      	rev16	r0, r0
}
    a34e:	b280      	uxth	r0, r0
    a350:	4770      	bx	lr
	...

0000a354 <uip_send>:
/*---------------------------------------------------------------------------*/
void
uip_send(const void *data, int len)
{
  if(len > 0) {
    a354:	1e0a      	subs	r2, r1, #0
    a356:	dd0a      	ble.n	a36e <uip_send+0x1a>
    uip_slen = len;
    a358:	4b05      	ldr	r3, [pc, #20]	; (a370 <uip_send+0x1c>)
    a35a:	801a      	strh	r2, [r3, #0]
    if(data != uip_sappdata) {
    a35c:	4b05      	ldr	r3, [pc, #20]	; (a374 <uip_send+0x20>)
    a35e:	681b      	ldr	r3, [r3, #0]
    a360:	4283      	cmp	r3, r0
    a362:	d004      	beq.n	a36e <uip_send+0x1a>
      memcpy(uip_sappdata, (data), uip_slen);
    a364:	4601      	mov	r1, r0
    a366:	b292      	uxth	r2, r2
    a368:	4618      	mov	r0, r3
    a36a:	4b03      	ldr	r3, [pc, #12]	; (a378 <uip_send+0x24>)
    a36c:	4718      	bx	r3
    a36e:	4770      	bx	lr
    a370:	2000923c 	.word	0x2000923c
    a374:	20008ac8 	.word	0x20008ac8
    a378:	0000b33b 	.word	0x0000b33b

0000a37c <uip_arp_update>:
{
  register struct arp_entry *tabptr;
  /* Walk through the ARP mapping table and try to find an entry to
     update. If none is found, the IP -> MAC address mapping is
     inserted in the ARP table. */
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    a37c:	4b47      	ldr	r3, [pc, #284]	; (a49c <uip_arp_update+0x120>)
{
    a37e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    a382:	461d      	mov	r5, r3
    a384:	2200      	movs	r2, #0
    a386:	f805 2b02 	strb.w	r2, [r5], #2
    a38a:	4694      	mov	ip, r2
    a38c:	462c      	mov	r4, r5
    a38e:	462e      	mov	r6, r5
    a390:	fa5f fe82 	uxtb.w	lr, r2
    a394:	f1be 0f08 	cmp.w	lr, #8
    a398:	d123      	bne.n	a3e2 <uip_arp_update+0x66>

  /* If we get here, no existing ARP table entry was found, so we
     create one. */

  /* First, we try to find an unused entry in the ARP table. */
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    a39a:	2400      	movs	r4, #0
    a39c:	701c      	strb	r4, [r3, #0]
    a39e:	462f      	mov	r7, r5
    a3a0:	46a6      	mov	lr, r4
    a3a2:	2c08      	cmp	r4, #8
    a3a4:	d148      	bne.n	a438 <uip_arp_update+0xbc>
  }

  /* If no unused entry is found, we try to find the oldest entry and
     throw it away. */
  if(i == UIP_ARPTAB_SIZE) {
    tmpage = 0;
    a3a6:	2200      	movs	r2, #0
    c = 0;
    for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
      tabptr = &arp_table[i];
      if(arptime - tabptr->time > tmpage) {
    a3a8:	f893 8062 	ldrb.w	r8, [r3, #98]	; 0x62
    tmpage = 0;
    a3ac:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
    c = 0;
    a3b0:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    a3b4:	701a      	strb	r2, [r3, #0]
    a3b6:	4617      	mov	r7, r2
    a3b8:	4694      	mov	ip, r2
    a3ba:	4691      	mov	r9, r2
    a3bc:	4696      	mov	lr, r2
    a3be:	2a08      	cmp	r2, #8
    a3c0:	d15c      	bne.n	a47c <uip_arp_update+0x100>
    a3c2:	f1b9 0f00 	cmp.w	r9, #0
    a3c6:	d001      	beq.n	a3cc <uip_arp_update+0x50>
    a3c8:	f883 e063 	strb.w	lr, [r3, #99]	; 0x63
    a3cc:	b10f      	cbz	r7, a3d2 <uip_arp_update+0x56>
    a3ce:	f883 c064 	strb.w	ip, [r3, #100]	; 0x64
	tmpage = arptime - tabptr->time;
	c = i;
      }
    }
    i = c;
    a3d2:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
    a3d6:	701a      	strb	r2, [r3, #0]
    tabptr = &arp_table[i];
    a3d8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    a3dc:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    a3e0:	e039      	b.n	a456 <uip_arp_update+0xda>
    if(tabptr->ipaddr[0] != 0 &&
    a3e2:	f8b4 9000 	ldrh.w	r9, [r4]
    a3e6:	1b67      	subs	r7, r4, r5
    a3e8:	f1b9 0f00 	cmp.w	r9, #0
    a3ec:	d01f      	beq.n	a42e <uip_arp_update+0xb2>
       tabptr->ipaddr[1] != 0) {
    a3ee:	f8b4 8002 	ldrh.w	r8, [r4, #2]
    if(tabptr->ipaddr[0] != 0 &&
    a3f2:	f1b8 0f00 	cmp.w	r8, #0
    a3f6:	d01a      	beq.n	a42e <uip_arp_update+0xb2>
      if(ipaddr[0] == tabptr->ipaddr[0] &&
    a3f8:	f8b0 a000 	ldrh.w	sl, [r0]
    a3fc:	45ca      	cmp	sl, r9
    a3fe:	d116      	bne.n	a42e <uip_arp_update+0xb2>
    a400:	f8b0 9002 	ldrh.w	r9, [r0, #2]
    a404:	45c1      	cmp	r9, r8
    a406:	d112      	bne.n	a42e <uip_arp_update+0xb2>
    a408:	f1bc 0f00 	cmp.w	ip, #0
    a40c:	d001      	beq.n	a412 <uip_arp_update+0x96>
    a40e:	f883 e000 	strb.w	lr, [r3]
	memcpy(tabptr->ethaddr.addr, ethaddr->addr, 6);
    a412:	1d38      	adds	r0, r7, #4
    a414:	680d      	ldr	r5, [r1, #0]
    a416:	5035      	str	r5, [r6, r0]
    a418:	1834      	adds	r4, r6, r0
    a41a:	8889      	ldrh	r1, [r1, #4]
    a41c:	80a1      	strh	r1, [r4, #4]
	tabptr->time = arptime;
    a41e:	210c      	movs	r1, #12
    a420:	fb01 3202 	mla	r2, r1, r2, r3
    a424:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
    a428:	7313      	strb	r3, [r2, #12]
	return;
    a42a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a42e:	340c      	adds	r4, #12
    a430:	3201      	adds	r2, #1
    a432:	f04f 0c01 	mov.w	ip, #1
    a436:	e7ab      	b.n	a390 <uip_arp_update+0x14>
    if(tabptr->ipaddr[0] == 0 &&
    a438:	f8b7 c000 	ldrh.w	ip, [r7]
    tabptr = &arp_table[i];
    a43c:	463a      	mov	r2, r7
    if(tabptr->ipaddr[0] == 0 &&
    a43e:	f1bc 0f00 	cmp.w	ip, #0
    a442:	d115      	bne.n	a470 <uip_arp_update+0xf4>
    a444:	f8b7 c002 	ldrh.w	ip, [r7, #2]
    a448:	f1bc 0f00 	cmp.w	ip, #0
    a44c:	d110      	bne.n	a470 <uip_arp_update+0xf4>
    a44e:	f1be 0f00 	cmp.w	lr, #0
    a452:	d000      	beq.n	a456 <uip_arp_update+0xda>
    a454:	701c      	strb	r4, [r3, #0]
  }

  /* Now, i is the ARP table entry which we will fill with the new
     information. */
  memcpy(tabptr->ipaddr, ipaddr, 4);
    a456:	6804      	ldr	r4, [r0, #0]
  memcpy(tabptr->ethaddr.addr, ethaddr->addr, 6);
  tabptr->time = arptime;
    a458:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
  memcpy(tabptr->ipaddr, ipaddr, 4);
    a45c:	4610      	mov	r0, r2
    a45e:	f840 4b04 	str.w	r4, [r0], #4
  memcpy(tabptr->ethaddr.addr, ethaddr->addr, 6);
    a462:	680c      	ldr	r4, [r1, #0]
    a464:	6054      	str	r4, [r2, #4]
    a466:	8889      	ldrh	r1, [r1, #4]
    a468:	8081      	strh	r1, [r0, #4]
  tabptr->time = arptime;
    a46a:	7293      	strb	r3, [r2, #10]
    a46c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a470:	3401      	adds	r4, #1
    a472:	b2e4      	uxtb	r4, r4
    a474:	370c      	adds	r7, #12
    a476:	f04f 0e01 	mov.w	lr, #1
    a47a:	e792      	b.n	a3a2 <uip_arp_update+0x26>
      if(arptime - tabptr->time > tmpage) {
    a47c:	7aac      	ldrb	r4, [r5, #10]
    a47e:	eba8 0404 	sub.w	r4, r8, r4
    a482:	4574      	cmp	r4, lr
	tmpage = arptime - tabptr->time;
    a484:	bfc4      	itt	gt
    a486:	4694      	movgt	ip, r2
    a488:	2701      	movgt	r7, #1
    a48a:	f102 0201 	add.w	r2, r2, #1
    a48e:	bfc4      	itt	gt
    a490:	fa5f fe84 	uxtbgt.w	lr, r4
    a494:	46b9      	movgt	r9, r7
    a496:	b2d2      	uxtb	r2, r2
    a498:	350c      	adds	r5, #12
    a49a:	e790      	b.n	a3be <uip_arp_update+0x42>
    a49c:	200072e8 	.word	0x200072e8

0000a4a0 <uip_arp_timer>:
{
    a4a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  ++arptime;
    a4a2:	4b12      	ldr	r3, [pc, #72]	; (a4ec <uip_arp_timer+0x4c>)
    a4a4:	f893 0062 	ldrb.w	r0, [r3, #98]	; 0x62
    a4a8:	3001      	adds	r0, #1
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    a4aa:	2200      	movs	r2, #0
  ++arptime;
    a4ac:	b2c0      	uxtb	r0, r0
    a4ae:	f883 0062 	strb.w	r0, [r3, #98]	; 0x62
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    a4b2:	701a      	strb	r2, [r3, #0]
    if((tabptr->ipaddr[0] | tabptr->ipaddr[1]) != 0 &&
    a4b4:	260c      	movs	r6, #12
      memset(tabptr->ipaddr, 0, 4);
    a4b6:	1c9f      	adds	r7, r3, #2
    a4b8:	4615      	mov	r5, r2
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    a4ba:	781a      	ldrb	r2, [r3, #0]
    a4bc:	2a07      	cmp	r2, #7
    a4be:	d900      	bls.n	a4c2 <uip_arp_timer+0x22>
}
    a4c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((tabptr->ipaddr[0] | tabptr->ipaddr[1]) != 0 &&
    a4c2:	fb06 3402 	mla	r4, r6, r2, r3
    a4c6:	8861      	ldrh	r1, [r4, #2]
    a4c8:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    a4cc:	ea41 010e 	orr.w	r1, r1, lr
    a4d0:	b289      	uxth	r1, r1
    a4d2:	b139      	cbz	r1, a4e4 <uip_arp_timer+0x44>
       arptime - tabptr->time >= UIP_ARP_MAXAGE) {
    a4d4:	7b21      	ldrb	r1, [r4, #12]
    a4d6:	1a41      	subs	r1, r0, r1
    if((tabptr->ipaddr[0] | tabptr->ipaddr[1]) != 0 &&
    a4d8:	2977      	cmp	r1, #119	; 0x77
      memset(tabptr->ipaddr, 0, 4);
    a4da:	bfc4      	itt	gt
    a4dc:	eb02 0142 	addgt.w	r1, r2, r2, lsl #1
    a4e0:	f847 5021 	strgt.w	r5, [r7, r1, lsl #2]
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    a4e4:	3201      	adds	r2, #1
    a4e6:	701a      	strb	r2, [r3, #0]
    a4e8:	e7e7      	b.n	a4ba <uip_arp_timer+0x1a>
    a4ea:	bf00      	nop
    a4ec:	200072e8 	.word	0x200072e8

0000a4f0 <uip_arp_ipin>:
 */
/*-----------------------------------------------------------------------------------*/
void
uip_arp_ipin(void)
{
  uip_len -= sizeof(struct uip_eth_hdr);
    a4f0:	4a0d      	ldr	r2, [pc, #52]	; (a528 <uip_arp_ipin+0x38>)
	  
  /* Only insert/update an entry if the source IP address of the
     incoming IP packet comes from a host on the local network. */
  if((IPBUF->srcipaddr[0] & uip_netmask[0]) !=
    a4f2:	480e      	ldr	r0, [pc, #56]	; (a52c <uip_arp_ipin+0x3c>)
  uip_len -= sizeof(struct uip_eth_hdr);
    a4f4:	8813      	ldrh	r3, [r2, #0]
     (uip_hostaddr[0] & uip_netmask[0])) {
    a4f6:	490e      	ldr	r1, [pc, #56]	; (a530 <uip_arp_ipin+0x40>)
{
    a4f8:	b410      	push	{r4}
  uip_len -= sizeof(struct uip_eth_hdr);
    a4fa:	3b0e      	subs	r3, #14
    a4fc:	8013      	strh	r3, [r2, #0]
  if((IPBUF->srcipaddr[0] & uip_netmask[0]) !=
    a4fe:	8b43      	ldrh	r3, [r0, #26]
    a500:	880a      	ldrh	r2, [r1, #0]
    a502:	4053      	eors	r3, r2
    a504:	4a0b      	ldr	r2, [pc, #44]	; (a534 <uip_arp_ipin+0x44>)
    a506:	8814      	ldrh	r4, [r2, #0]
    a508:	4223      	tst	r3, r4
    a50a:	d10a      	bne.n	a522 <uip_arp_ipin+0x32>

    return;
  }
  if((IPBUF->srcipaddr[1] & uip_netmask[1]) !=
    a50c:	8b83      	ldrh	r3, [r0, #28]
    a50e:	8849      	ldrh	r1, [r1, #2]
    a510:	8852      	ldrh	r2, [r2, #2]
    a512:	404b      	eors	r3, r1
    a514:	4213      	tst	r3, r2
    a516:	d104      	bne.n	a522 <uip_arp_ipin+0x32>
     (uip_hostaddr[1] & uip_netmask[1])) {

    return;
  }

  uip_arp_update(IPBUF->srcipaddr, &(IPBUF->ethhdr.src));
    a518:	1d81      	adds	r1, r0, #6
    a51a:	4b07      	ldr	r3, [pc, #28]	; (a538 <uip_arp_ipin+0x48>)
  return;
}
    a51c:	bc10      	pop	{r4}
  uip_arp_update(IPBUF->srcipaddr, &(IPBUF->ethhdr.src));
    a51e:	301a      	adds	r0, #26
    a520:	4718      	bx	r3
}
    a522:	bc10      	pop	{r4}
    a524:	4770      	bx	lr
    a526:	bf00      	nop
    a528:	20008ac4 	.word	0x20008ac4
    a52c:	20008b96 	.word	0x20008b96
    a530:	20008b92 	.word	0x20008b92
    a534:	20008b8e 	.word	0x20008b8e
    a538:	0000a37d 	.word	0x0000a37d

0000a53c <uip_arp_arpin>:
 * global variable uip_len.
 */
/*-----------------------------------------------------------------------------------*/
void
uip_arp_arpin(void)
{
    a53c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  
  if(uip_len < sizeof(struct arp_hdr)) {
    a540:	4d2e      	ldr	r5, [pc, #184]	; (a5fc <uip_arp_arpin+0xc0>)
    a542:	882b      	ldrh	r3, [r5, #0]
    a544:	f04f 0800 	mov.w	r8, #0
    a548:	2b29      	cmp	r3, #41	; 0x29
    uip_len = 0;
    a54a:	f8a5 8000 	strh.w	r8, [r5]
  if(uip_len < sizeof(struct arp_hdr)) {
    a54e:	d801      	bhi.n	a554 <uip_arp_arpin+0x18>
    return;
    a550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  uip_len = 0;
  
  switch(BUF->opcode) {
    a554:	4c2a      	ldr	r4, [pc, #168]	; (a600 <uip_arp_arpin+0xc4>)
    a556:	8aa3      	ldrh	r3, [r4, #20]
    a558:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    a55c:	d004      	beq.n	a568 <uip_arp_arpin+0x2c>
    a55e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    a562:	d037      	beq.n	a5d4 <uip_arp_arpin+0x98>
    a564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  case HTONS(ARP_REQUEST):
    /* ARP request. If it asked for our address, we send out a
       reply. */
    if(uip_ipaddr_cmp(BUF->dipaddr, uip_hostaddr)) {
    a568:	4e26      	ldr	r6, [pc, #152]	; (a604 <uip_arp_arpin+0xc8>)
    a56a:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
    a56c:	8833      	ldrh	r3, [r6, #0]
    a56e:	429a      	cmp	r2, r3
    a570:	d141      	bne.n	a5f6 <uip_arp_arpin+0xba>
    a572:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    a574:	8873      	ldrh	r3, [r6, #2]
    a576:	429a      	cmp	r2, r3
    a578:	d13d      	bne.n	a5f6 <uip_arp_arpin+0xba>
      /* First, we register the one who made the request in our ARP
	 table, since it is likely that we will do more communication
	 with this host in the future. */
      uip_arp_update(BUF->sipaddr, &BUF->shwaddr);
    a57a:	f104 0716 	add.w	r7, r4, #22
    a57e:	4639      	mov	r1, r7
    a580:	4b21      	ldr	r3, [pc, #132]	; (a608 <uip_arp_arpin+0xcc>)
    a582:	f104 001c 	add.w	r0, r4, #28
    a586:	4798      	blx	r3
      
      /* The reply opcode is 2. */
      BUF->opcode = HTONS(2);

      memcpy(BUF->dhwaddr.addr, BUF->shwaddr.addr, 6);
    a588:	f8d4 2016 	ldr.w	r2, [r4, #22]
    a58c:	6222      	str	r2, [r4, #32]
    a58e:	8b62      	ldrh	r2, [r4, #26]
    a590:	84a2      	strh	r2, [r4, #36]	; 0x24
      BUF->opcode = HTONS(2);
    a592:	2302      	movs	r3, #2
    a594:	7563      	strb	r3, [r4, #21]
      memcpy(BUF->shwaddr.addr, uip_ethaddr.addr, 6);
      memcpy(BUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
      memcpy(BUF->ethhdr.dest.addr, BUF->dhwaddr.addr, 6);
    a596:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    a598:	80a3      	strh	r3, [r4, #4]
      
      BUF->dipaddr[0] = BUF->sipaddr[0];
    a59a:	8ba3      	ldrh	r3, [r4, #28]
    a59c:	84e3      	strh	r3, [r4, #38]	; 0x26
      BUF->dipaddr[1] = BUF->sipaddr[1];
    a59e:	8be3      	ldrh	r3, [r4, #30]
      memcpy(BUF->shwaddr.addr, uip_ethaddr.addr, 6);
    a5a0:	4a1a      	ldr	r2, [pc, #104]	; (a60c <uip_arp_arpin+0xd0>)
      BUF->dipaddr[1] = BUF->sipaddr[1];
    a5a2:	8523      	strh	r3, [r4, #40]	; 0x28
      BUF->sipaddr[0] = uip_hostaddr[0];
    a5a4:	8833      	ldrh	r3, [r6, #0]
    a5a6:	83a3      	strh	r3, [r4, #28]
      BUF->sipaddr[1] = uip_hostaddr[1];
    a5a8:	8873      	ldrh	r3, [r6, #2]
      memcpy(BUF->shwaddr.addr, uip_ethaddr.addr, 6);
    a5aa:	6811      	ldr	r1, [r2, #0]
      BUF->sipaddr[1] = uip_hostaddr[1];
    a5ac:	83e3      	strh	r3, [r4, #30]
      memcpy(BUF->shwaddr.addr, uip_ethaddr.addr, 6);
    a5ae:	8892      	ldrh	r2, [r2, #4]
    a5b0:	8362      	strh	r2, [r4, #26]

      BUF->ethhdr.type = HTONS(UIP_ETHTYPE_ARP);
    a5b2:	2308      	movs	r3, #8
      memcpy(BUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
    a5b4:	8162      	strh	r2, [r4, #10]
      BUF->ethhdr.type = HTONS(UIP_ETHTYPE_ARP);
    a5b6:	7323      	strb	r3, [r4, #12]
      memcpy(BUF->ethhdr.dest.addr, BUF->dhwaddr.addr, 6);
    a5b8:	6a22      	ldr	r2, [r4, #32]
      memcpy(BUF->shwaddr.addr, uip_ethaddr.addr, 6);
    a5ba:	f8c4 1016 	str.w	r1, [r4, #22]
      BUF->ethhdr.type = HTONS(UIP_ETHTYPE_ARP);
    a5be:	2306      	movs	r3, #6
    a5c0:	7363      	strb	r3, [r4, #13]
      memcpy(BUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
    a5c2:	f8c4 1006 	str.w	r1, [r4, #6]
      uip_len = sizeof(struct arp_hdr);
    a5c6:	232a      	movs	r3, #42	; 0x2a
      memcpy(BUF->ethhdr.dest.addr, BUF->dhwaddr.addr, 6);
    a5c8:	6022      	str	r2, [r4, #0]
      BUF->opcode = HTONS(2);
    a5ca:	f884 8014 	strb.w	r8, [r4, #20]
      uip_len = sizeof(struct arp_hdr);
    a5ce:	802b      	strh	r3, [r5, #0]
    a5d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    break;
  case HTONS(ARP_REPLY):
    /* ARP reply. We insert or update the ARP table if it was meant
       for us. */
    if(uip_ipaddr_cmp(BUF->dipaddr, uip_hostaddr)) {
    a5d4:	4b0b      	ldr	r3, [pc, #44]	; (a604 <uip_arp_arpin+0xc8>)
    a5d6:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
    a5d8:	881a      	ldrh	r2, [r3, #0]
    a5da:	4291      	cmp	r1, r2
    a5dc:	d10b      	bne.n	a5f6 <uip_arp_arpin+0xba>
    a5de:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    a5e0:	885b      	ldrh	r3, [r3, #2]
    a5e2:	429a      	cmp	r2, r3
    a5e4:	d107      	bne.n	a5f6 <uip_arp_arpin+0xba>
      uip_arp_update(BUF->sipaddr, &BUF->shwaddr);
    a5e6:	f104 0116 	add.w	r1, r4, #22
    a5ea:	f104 001c 	add.w	r0, r4, #28
    a5ee:	4b06      	ldr	r3, [pc, #24]	; (a608 <uip_arp_arpin+0xcc>)
    }
    break;
  }

  return;
}
    a5f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      uip_arp_update(BUF->sipaddr, &BUF->shwaddr);
    a5f4:	4718      	bx	r3
    a5f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a5fa:	bf00      	nop
    a5fc:	20008ac4 	.word	0x20008ac4
    a600:	20008b96 	.word	0x20008b96
    a604:	20008b92 	.word	0x20008b92
    a608:	0000a37d 	.word	0x0000a37d
    a60c:	200072e2 	.word	0x200072e2

0000a610 <uip_arp_out>:

     If not ARP table entry is found, we overwrite the original IP
     packet with an ARP request for the IP address. */

  /* First check if destination is a local broadcast. */
  if(uip_ipaddr_cmp(IPBUF->destipaddr, broadcast_ipaddr)) {
    a610:	4b43      	ldr	r3, [pc, #268]	; (a720 <uip_arp_out+0x110>)
    a612:	8bda      	ldrh	r2, [r3, #30]
    a614:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a618:	428a      	cmp	r2, r1
{
    a61a:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(uip_ipaddr_cmp(IPBUF->destipaddr, broadcast_ipaddr)) {
    a61c:	d117      	bne.n	a64e <uip_arp_out+0x3e>
    a61e:	8c19      	ldrh	r1, [r3, #32]
    a620:	4291      	cmp	r1, r2
    a622:	d114      	bne.n	a64e <uip_arp_out+0x3e>
    memcpy(IPBUF->ethhdr.dest.addr, broadcast_ethaddr.addr, 6);
    a624:	4a3f      	ldr	r2, [pc, #252]	; (a724 <uip_arp_out+0x114>)
    a626:	6811      	ldr	r1, [r2, #0]
    a628:	8892      	ldrh	r2, [r2, #4]
    a62a:	6019      	str	r1, [r3, #0]
      uip_len = sizeof(struct arp_hdr);
      return;
    }

    /* Build an ethernet header. */
    memcpy(IPBUF->ethhdr.dest.addr, tabptr->ethaddr.addr, 6);
    a62c:	809a      	strh	r2, [r3, #4]
  }
  memcpy(IPBUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
    a62e:	4a3e      	ldr	r2, [pc, #248]	; (a728 <uip_arp_out+0x118>)
    a630:	6811      	ldr	r1, [r2, #0]
    a632:	f8c3 1006 	str.w	r1, [r3, #6]
    a636:	8891      	ldrh	r1, [r2, #4]
    a638:	4a3c      	ldr	r2, [pc, #240]	; (a72c <uip_arp_out+0x11c>)
    a63a:	8091      	strh	r1, [r2, #4]
  
  IPBUF->ethhdr.type = HTONS(UIP_ETHTYPE_IP);
    a63c:	2208      	movs	r2, #8
    a63e:	731a      	strb	r2, [r3, #12]
    a640:	2200      	movs	r2, #0
    a642:	735a      	strb	r2, [r3, #13]

  uip_len += sizeof(struct uip_eth_hdr);
    a644:	4a3a      	ldr	r2, [pc, #232]	; (a730 <uip_arp_out+0x120>)
    a646:	8813      	ldrh	r3, [r2, #0]
    a648:	330e      	adds	r3, #14
    a64a:	8013      	strh	r3, [r2, #0]
    a64c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(!uip_ipaddr_maskcmp(IPBUF->destipaddr, uip_hostaddr, uip_netmask)) {
    a64e:	4c39      	ldr	r4, [pc, #228]	; (a734 <uip_arp_out+0x124>)
    a650:	4e39      	ldr	r6, [pc, #228]	; (a738 <uip_arp_out+0x128>)
    a652:	8821      	ldrh	r1, [r4, #0]
    a654:	8830      	ldrh	r0, [r6, #0]
    a656:	4051      	eors	r1, r2
    a658:	4201      	tst	r1, r0
    a65a:	4838      	ldr	r0, [pc, #224]	; (a73c <uip_arp_out+0x12c>)
    a65c:	d105      	bne.n	a66a <uip_arp_out+0x5a>
    a65e:	8c1d      	ldrh	r5, [r3, #32]
    a660:	8861      	ldrh	r1, [r4, #2]
    a662:	8876      	ldrh	r6, [r6, #2]
    a664:	4069      	eors	r1, r5
    a666:	4231      	tst	r1, r6
    a668:	d040      	beq.n	a6ec <uip_arp_out+0xdc>
      uip_ipaddr_copy(ipaddr, uip_draddr);
    a66a:	4a35      	ldr	r2, [pc, #212]	; (a740 <uip_arp_out+0x130>)
    a66c:	8811      	ldrh	r1, [r2, #0]
    a66e:	8852      	ldrh	r2, [r2, #2]
    a670:	f8a0 1066 	strh.w	r1, [r0, #102]	; 0x66
    a674:	f8a0 2068 	strh.w	r2, [r0, #104]	; 0x68
    for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    a678:	2200      	movs	r2, #0
      if(uip_ipaddr_cmp(ipaddr, tabptr->ipaddr)) {
    a67a:	f8b0 7066 	ldrh.w	r7, [r0, #102]	; 0x66
    a67e:	f8b0 6068 	ldrh.w	r6, [r0, #104]	; 0x68
    a682:	4930      	ldr	r1, [pc, #192]	; (a744 <uip_arp_out+0x134>)
    for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    a684:	7002      	strb	r2, [r0, #0]
    a686:	4615      	mov	r5, r2
    a688:	2a08      	cmp	r2, #8
    a68a:	d134      	bne.n	a6f6 <uip_arp_out+0xe6>
    a68c:	b105      	cbz	r5, a690 <uip_arp_out+0x80>
    a68e:	7002      	strb	r2, [r0, #0]
      memset(BUF->ethhdr.dest.addr, 0xff, 6);
    a690:	f04f 32ff 	mov.w	r2, #4294967295
      memcpy(BUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
    a694:	4824      	ldr	r0, [pc, #144]	; (a728 <uip_arp_out+0x118>)
      memset(BUF->ethhdr.dest.addr, 0xff, 6);
    a696:	601a      	str	r2, [r3, #0]
    a698:	809a      	strh	r2, [r3, #4]
      memset(BUF->dhwaddr.addr, 0x00, 6);
    a69a:	4a2b      	ldr	r2, [pc, #172]	; (a748 <uip_arp_out+0x138>)
      memcpy(BUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
    a69c:	6805      	ldr	r5, [r0, #0]
    a69e:	8880      	ldrh	r0, [r0, #4]
    a6a0:	f8c3 5006 	str.w	r5, [r3, #6]
      memcpy(BUF->shwaddr.addr, uip_ethaddr.addr, 6);
    a6a4:	f8c3 5016 	str.w	r5, [r3, #22]
      memcpy(BUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
    a6a8:	f822 0c16 	strh.w	r0, [r2, #-22]
      memcpy(BUF->shwaddr.addr, uip_ethaddr.addr, 6);
    a6ac:	f822 0c06 	strh.w	r0, [r2, #-6]
      uip_ipaddr_copy(BUF->sipaddr, uip_hostaddr);
    a6b0:	8820      	ldrh	r0, [r4, #0]
    a6b2:	8398      	strh	r0, [r3, #28]
    a6b4:	8860      	ldrh	r0, [r4, #2]
    a6b6:	83d8      	strh	r0, [r3, #30]
      memset(BUF->dhwaddr.addr, 0x00, 6);
    a6b8:	2100      	movs	r1, #0
      BUF->opcode = HTONS(ARP_REQUEST); /* ARP request. */
    a6ba:	2001      	movs	r0, #1
      memset(BUF->dhwaddr.addr, 0x00, 6);
    a6bc:	6219      	str	r1, [r3, #32]
      BUF->opcode = HTONS(ARP_REQUEST); /* ARP request. */
    a6be:	7519      	strb	r1, [r3, #20]
      memset(BUF->dhwaddr.addr, 0x00, 6);
    a6c0:	8091      	strh	r1, [r2, #4]
      BUF->opcode = HTONS(ARP_REQUEST); /* ARP request. */
    a6c2:	7558      	strb	r0, [r3, #21]
      BUF->hwtype = HTONS(ARP_HWTYPE_ETH);
    a6c4:	7399      	strb	r1, [r3, #14]
    a6c6:	73d8      	strb	r0, [r3, #15]
      BUF->protocol = HTONS(UIP_ETHTYPE_IP);
    a6c8:	7459      	strb	r1, [r3, #17]
    a6ca:	2008      	movs	r0, #8
      BUF->hwlen = 6;
    a6cc:	2106      	movs	r1, #6
      BUF->protolen = 4;
    a6ce:	2404      	movs	r4, #4
      uip_ipaddr_copy(BUF->dipaddr, ipaddr);
    a6d0:	84df      	strh	r7, [r3, #38]	; 0x26
    a6d2:	851e      	strh	r6, [r3, #40]	; 0x28
      BUF->protocol = HTONS(UIP_ETHTYPE_IP);
    a6d4:	7418      	strb	r0, [r3, #16]
      BUF->hwlen = 6;
    a6d6:	7499      	strb	r1, [r3, #18]
      BUF->protolen = 4;
    a6d8:	74dc      	strb	r4, [r3, #19]
      BUF->ethhdr.type = HTONS(UIP_ETHTYPE_ARP);
    a6da:	7318      	strb	r0, [r3, #12]
    a6dc:	7359      	strb	r1, [r3, #13]
      uip_appdata = &uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN];
    a6de:	4b1b      	ldr	r3, [pc, #108]	; (a74c <uip_arp_out+0x13c>)
    a6e0:	3216      	adds	r2, #22
    a6e2:	601a      	str	r2, [r3, #0]
      uip_len = sizeof(struct arp_hdr);
    a6e4:	4b12      	ldr	r3, [pc, #72]	; (a730 <uip_arp_out+0x120>)
    a6e6:	222a      	movs	r2, #42	; 0x2a
    a6e8:	801a      	strh	r2, [r3, #0]
      return;
    a6ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
      uip_ipaddr_copy(ipaddr, IPBUF->destipaddr);
    a6ec:	f8a0 2066 	strh.w	r2, [r0, #102]	; 0x66
    a6f0:	f8a0 5068 	strh.w	r5, [r0, #104]	; 0x68
    a6f4:	e7c0      	b.n	a678 <uip_arp_out+0x68>
      if(uip_ipaddr_cmp(ipaddr, tabptr->ipaddr)) {
    a6f6:	f8b1 e000 	ldrh.w	lr, [r1]
    a6fa:	45be      	cmp	lr, r7
    a6fc:	d103      	bne.n	a706 <uip_arp_out+0xf6>
    a6fe:	f8b1 e002 	ldrh.w	lr, [r1, #2]
    a702:	45b6      	cmp	lr, r6
    a704:	d004      	beq.n	a710 <uip_arp_out+0x100>
    a706:	3201      	adds	r2, #1
    a708:	b2d2      	uxtb	r2, r2
    a70a:	310c      	adds	r1, #12
    a70c:	2501      	movs	r5, #1
    a70e:	e7bb      	b.n	a688 <uip_arp_out+0x78>
    a710:	b105      	cbz	r5, a714 <uip_arp_out+0x104>
    a712:	7002      	strb	r2, [r0, #0]
    memcpy(IPBUF->ethhdr.dest.addr, tabptr->ethaddr.addr, 6);
    a714:	f851 2f04 	ldr.w	r2, [r1, #4]!
    a718:	601a      	str	r2, [r3, #0]
    a71a:	888a      	ldrh	r2, [r1, #4]
    a71c:	e786      	b.n	a62c <uip_arp_out+0x1c>
    a71e:	bf00      	nop
    a720:	20008b96 	.word	0x20008b96
    a724:	0000f2f8 	.word	0x0000f2f8
    a728:	200072e2 	.word	0x200072e2
    a72c:	20008b9c 	.word	0x20008b9c
    a730:	20008ac4 	.word	0x20008ac4
    a734:	20008b92 	.word	0x20008b92
    a738:	20008b8e 	.word	0x20008b8e
    a73c:	200072e8 	.word	0x200072e8
    a740:	20008b56 	.word	0x20008b56
    a744:	200072ea 	.word	0x200072ea
    a748:	20008bb6 	.word	0x20008bb6
    a74c:	20008ad8 	.word	0x20008ad8

0000a750 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    a750:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    a754:	4616      	mov	r6, r2
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    a756:	780a      	ldrb	r2, [r1, #0]
    a758:	f3c2 1341 	ubfx	r3, r2, #5, #2
    a75c:	2b01      	cmp	r3, #1
{
    a75e:	4607      	mov	r7, r0
    a760:	460c      	mov	r4, r1
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    a762:	d155      	bne.n	a810 <cdcdf_acm_req+0xc0>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    a764:	4b2d      	ldr	r3, [pc, #180]	; (a81c <cdcdf_acm_req+0xcc>)
    a766:	8889      	ldrh	r1, [r1, #4]
    a768:	7818      	ldrb	r0, [r3, #0]
    a76a:	4288      	cmp	r0, r1
    a76c:	461d      	mov	r5, r3
    a76e:	d002      	beq.n	a776 <cdcdf_acm_req+0x26>
    a770:	785b      	ldrb	r3, [r3, #1]
    a772:	428b      	cmp	r3, r1
    a774:	d14c      	bne.n	a810 <cdcdf_acm_req+0xc0>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    a776:	0613      	lsls	r3, r2, #24
    a778:	d50f      	bpl.n	a79a <cdcdf_acm_req+0x4a>
	if (USB_DATA_STAGE == stage) {
    a77a:	2e01      	cmp	r6, #1
    a77c:	d035      	beq.n	a7ea <cdcdf_acm_req+0x9a>
	switch (req->bRequest) {
    a77e:	7863      	ldrb	r3, [r4, #1]
    a780:	2b21      	cmp	r3, #33	; 0x21
    a782:	d114      	bne.n	a7ae <cdcdf_acm_req+0x5e>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    a784:	88e2      	ldrh	r2, [r4, #6]
    a786:	2a07      	cmp	r2, #7
    a788:	d145      	bne.n	a816 <cdcdf_acm_req+0xc6>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    a78a:	4925      	ldr	r1, [pc, #148]	; (a820 <cdcdf_acm_req+0xd0>)
    a78c:	2300      	movs	r3, #0
			return usbdc_xfer(ep, ctrl_buf, len, false);
    a78e:	4638      	mov	r0, r7
    a790:	4c24      	ldr	r4, [pc, #144]	; (a824 <cdcdf_acm_req+0xd4>)
    a792:	47a0      	blx	r4
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    a794:	b002      	add	sp, #8
    a796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    a79a:	4b23      	ldr	r3, [pc, #140]	; (a828 <cdcdf_acm_req+0xd8>)
	uint16_t                   len      = req->wLength;
    a79c:	f8b4 8006 	ldrh.w	r8, [r4, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    a7a0:	4798      	blx	r3
	switch (req->bRequest) {
    a7a2:	7863      	ldrb	r3, [r4, #1]
    a7a4:	2b20      	cmp	r3, #32
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    a7a6:	4601      	mov	r1, r0
	switch (req->bRequest) {
    a7a8:	d004      	beq.n	a7b4 <cdcdf_acm_req+0x64>
    a7aa:	2b22      	cmp	r3, #34	; 0x22
    a7ac:	d024      	beq.n	a7f8 <cdcdf_acm_req+0xa8>
		return ERR_INVALID_ARG;
    a7ae:	f06f 000c 	mvn.w	r0, #12
    a7b2:	e7ef      	b.n	a794 <cdcdf_acm_req+0x44>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    a7b4:	f1b8 0f07 	cmp.w	r8, #7
    a7b8:	d12d      	bne.n	a816 <cdcdf_acm_req+0xc6>
		if (USB_SETUP_STAGE == stage) {
    a7ba:	b916      	cbnz	r6, a7c2 <cdcdf_acm_req+0x72>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    a7bc:	4633      	mov	r3, r6
    a7be:	4642      	mov	r2, r8
    a7c0:	e7e5      	b.n	a78e <cdcdf_acm_req+0x3e>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    a7c2:	6800      	ldr	r0, [r0, #0]
    a7c4:	9000      	str	r0, [sp, #0]
    a7c6:	798b      	ldrb	r3, [r1, #6]
    a7c8:	888a      	ldrh	r2, [r1, #4]
    a7ca:	f88d 3006 	strb.w	r3, [sp, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    a7ce:	692b      	ldr	r3, [r5, #16]
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    a7d0:	f8ad 2004 	strh.w	r2, [sp, #4]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    a7d4:	b95b      	cbnz	r3, a7ee <cdcdf_acm_req+0x9e>
				usbd_cdc_line_coding = line_coding_tmp;
    a7d6:	4b12      	ldr	r3, [pc, #72]	; (a820 <cdcdf_acm_req+0xd0>)
    a7d8:	9800      	ldr	r0, [sp, #0]
    a7da:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    a7de:	f89d 2006 	ldrb.w	r2, [sp, #6]
    a7e2:	f8c5 0006 	str.w	r0, [r5, #6]
    a7e6:	8099      	strh	r1, [r3, #4]
    a7e8:	719a      	strb	r2, [r3, #6]
		return ERR_NONE;
    a7ea:	2000      	movs	r0, #0
    a7ec:	e7d2      	b.n	a794 <cdcdf_acm_req+0x44>
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    a7ee:	4668      	mov	r0, sp
    a7f0:	4798      	blx	r3
    a7f2:	2800      	cmp	r0, #0
    a7f4:	d1ef      	bne.n	a7d6 <cdcdf_acm_req+0x86>
    a7f6:	e7f8      	b.n	a7ea <cdcdf_acm_req+0x9a>
		usbdc_xfer(0, NULL, 0, 0);
    a7f8:	2300      	movs	r3, #0
    a7fa:	461a      	mov	r2, r3
    a7fc:	4619      	mov	r1, r3
    a7fe:	4618      	mov	r0, r3
    a800:	4e08      	ldr	r6, [pc, #32]	; (a824 <cdcdf_acm_req+0xd4>)
    a802:	47b0      	blx	r6
		if (NULL != cdcdf_acm_notify_state) {
    a804:	696b      	ldr	r3, [r5, #20]
    a806:	2b00      	cmp	r3, #0
    a808:	d0ef      	beq.n	a7ea <cdcdf_acm_req+0x9a>
			cdcdf_acm_notify_state(req->wValue);
    a80a:	8860      	ldrh	r0, [r4, #2]
    a80c:	4798      	blx	r3
    a80e:	e7ec      	b.n	a7ea <cdcdf_acm_req+0x9a>
		return ERR_NOT_FOUND;
    a810:	f06f 0009 	mvn.w	r0, #9
    a814:	e7be      	b.n	a794 <cdcdf_acm_req+0x44>
			return ERR_INVALID_DATA;
    a816:	f04f 30ff 	mov.w	r0, #4294967295
    a81a:	e7bb      	b.n	a794 <cdcdf_acm_req+0x44>
    a81c:	20007354 	.word	0x20007354
    a820:	2000735a 	.word	0x2000735a
    a824:	0000aba1 	.word	0x0000aba1
    a828:	0000afbd 	.word	0x0000afbd

0000a82c <cdcdf_acm_ctrl>:
	switch (ctrl) {
    a82c:	2901      	cmp	r1, #1
{
    a82e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a832:	4615      	mov	r5, r2
	switch (ctrl) {
    a834:	d054      	beq.n	a8e0 <cdcdf_acm_ctrl+0xb4>
    a836:	d307      	bcc.n	a848 <cdcdf_acm_ctrl+0x1c>
		return ERR_INVALID_ARG;
    a838:	2902      	cmp	r1, #2
    a83a:	bf0c      	ite	eq
    a83c:	f06f 001a 	mvneq.w	r0, #26
    a840:	f06f 000c 	mvnne.w	r0, #12
    a844:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a848:	6887      	ldr	r7, [r0, #8]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    a84a:	f8df 8110 	ldr.w	r8, [pc, #272]	; a95c <cdcdf_acm_ctrl+0x130>
	ifc = desc->sod;
    a84e:	6810      	ldr	r0, [r2, #0]
    a850:	1e7e      	subs	r6, r7, #1
    a852:	f107 0a01 	add.w	sl, r7, #1
		if (NULL == ifc) {
    a856:	b918      	cbnz	r0, a860 <cdcdf_acm_ctrl+0x34>
			return ERR_NOT_FOUND;
    a858:	f06f 0009 	mvn.w	r0, #9
    a85c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    a860:	7943      	ldrb	r3, [r0, #5]
		ifc_desc.bInterfaceNumber = ifc[2];
    a862:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    a864:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    a868:	2b02      	cmp	r3, #2
    a86a:	d1f5      	bne.n	a858 <cdcdf_acm_ctrl+0x2c>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    a86c:	f816 3f01 	ldrb.w	r3, [r6, #1]!
    a870:	429a      	cmp	r2, r3
    a872:	d05f      	beq.n	a934 <cdcdf_acm_ctrl+0x108>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    a874:	2bff      	cmp	r3, #255	; 0xff
    a876:	d161      	bne.n	a93c <cdcdf_acm_ctrl+0x110>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    a878:	7032      	strb	r2, [r6, #0]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    a87a:	6869      	ldr	r1, [r5, #4]
    a87c:	f8df 90e0 	ldr.w	r9, [pc, #224]	; a960 <cdcdf_acm_ctrl+0x134>
    a880:	2205      	movs	r2, #5
    a882:	47c0      	blx	r8
    a884:	4604      	mov	r4, r0
		while (NULL != ep) {
    a886:	b96c      	cbnz	r4, a8a4 <cdcdf_acm_ctrl+0x78>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    a888:	682b      	ldr	r3, [r5, #0]
    a88a:	6869      	ldr	r1, [r5, #4]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    a88c:	7818      	ldrb	r0, [r3, #0]
    a88e:	2204      	movs	r2, #4
    a890:	4418      	add	r0, r3
    a892:	47c0      	blx	r8
	for (i = 0; i < 2; i++) {
    a894:	45b2      	cmp	sl, r6
    a896:	d1de      	bne.n	a856 <cdcdf_acm_ctrl+0x2a>
	_cdcdf_acm_funcd.enabled = true;
    a898:	4b2c      	ldr	r3, [pc, #176]	; (a94c <cdcdf_acm_ctrl+0x120>)
    a89a:	2201      	movs	r2, #1
    a89c:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    a89e:	4620      	mov	r0, r4
    a8a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (ptr[0] + (ptr[1] << 8));
    a8a4:	7961      	ldrb	r1, [r4, #5]
    a8a6:	7922      	ldrb	r2, [r4, #4]
			ep_desc.bEndpointAddress = ep[2];
    a8a8:	f894 b002 	ldrb.w	fp, [r4, #2]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    a8ac:	4b28      	ldr	r3, [pc, #160]	; (a950 <cdcdf_acm_ctrl+0x124>)
    a8ae:	eb02 2201 	add.w	r2, r2, r1, lsl #8
    a8b2:	b292      	uxth	r2, r2
    a8b4:	78e1      	ldrb	r1, [r4, #3]
    a8b6:	4658      	mov	r0, fp
    a8b8:	4798      	blx	r3
    a8ba:	2800      	cmp	r0, #0
    a8bc:	d142      	bne.n	a944 <cdcdf_acm_ctrl+0x118>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    a8be:	f01b 0f80 	tst.w	fp, #128	; 0x80
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    a8c2:	bf14      	ite	ne
    a8c4:	f886 b002 	strbne.w	fp, [r6, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    a8c8:	f887 b004 	strbeq.w	fp, [r7, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    a8cc:	4658      	mov	r0, fp
    a8ce:	47c8      	blx	r9
			desc->sod = ep;
    a8d0:	602c      	str	r4, [r5, #0]
	return (desc + usb_desc_len(desc));
    a8d2:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    a8d4:	6869      	ldr	r1, [r5, #4]
    a8d6:	4b1f      	ldr	r3, [pc, #124]	; (a954 <cdcdf_acm_ctrl+0x128>)
    a8d8:	4420      	add	r0, r4
    a8da:	4798      	blx	r3
    a8dc:	4604      	mov	r4, r0
    a8de:	e7d2      	b.n	a886 <cdcdf_acm_ctrl+0x5a>
    a8e0:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    a8e2:	b12a      	cbz	r2, a8f0 <cdcdf_acm_ctrl+0xc4>
		ifc_desc.bInterfaceClass = desc->sod[5];
    a8e4:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    a8e6:	795b      	ldrb	r3, [r3, #5]
    a8e8:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    a8ec:	2b02      	cmp	r3, #2
    a8ee:	d1b3      	bne.n	a858 <cdcdf_acm_ctrl+0x2c>
		if (func_data->func_iface[i] == 0xFF) {
    a8f0:	7823      	ldrb	r3, [r4, #0]
    a8f2:	2bff      	cmp	r3, #255	; 0xff
    a8f4:	d007      	beq.n	a906 <cdcdf_acm_ctrl+0xda>
			if (func_data->func_ep_in[i] != 0xFF) {
    a8f6:	78a0      	ldrb	r0, [r4, #2]
			func_data->func_iface[i] = 0xFF;
    a8f8:	25ff      	movs	r5, #255	; 0xff
			if (func_data->func_ep_in[i] != 0xFF) {
    a8fa:	42a8      	cmp	r0, r5
			func_data->func_iface[i] = 0xFF;
    a8fc:	7025      	strb	r5, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    a8fe:	d002      	beq.n	a906 <cdcdf_acm_ctrl+0xda>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    a900:	4b15      	ldr	r3, [pc, #84]	; (a958 <cdcdf_acm_ctrl+0x12c>)
    a902:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    a904:	70a5      	strb	r5, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    a906:	7863      	ldrb	r3, [r4, #1]
    a908:	2bff      	cmp	r3, #255	; 0xff
    a90a:	d007      	beq.n	a91c <cdcdf_acm_ctrl+0xf0>
			if (func_data->func_ep_in[i] != 0xFF) {
    a90c:	78e0      	ldrb	r0, [r4, #3]
			func_data->func_iface[i] = 0xFF;
    a90e:	25ff      	movs	r5, #255	; 0xff
			if (func_data->func_ep_in[i] != 0xFF) {
    a910:	42a8      	cmp	r0, r5
			func_data->func_iface[i] = 0xFF;
    a912:	7065      	strb	r5, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    a914:	d002      	beq.n	a91c <cdcdf_acm_ctrl+0xf0>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    a916:	4b10      	ldr	r3, [pc, #64]	; (a958 <cdcdf_acm_ctrl+0x12c>)
    a918:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    a91a:	70e5      	strb	r5, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    a91c:	7920      	ldrb	r0, [r4, #4]
    a91e:	28ff      	cmp	r0, #255	; 0xff
    a920:	d003      	beq.n	a92a <cdcdf_acm_ctrl+0xfe>
		usb_d_ep_deinit(func_data->func_ep_out);
    a922:	4b0d      	ldr	r3, [pc, #52]	; (a958 <cdcdf_acm_ctrl+0x12c>)
    a924:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    a926:	23ff      	movs	r3, #255	; 0xff
    a928:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    a92a:	4b08      	ldr	r3, [pc, #32]	; (a94c <cdcdf_acm_ctrl+0x120>)
    a92c:	2000      	movs	r0, #0
    a92e:	7158      	strb	r0, [r3, #5]
    a930:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				return ERR_ALREADY_INITIALIZED;
    a934:	f06f 0011 	mvn.w	r0, #17
    a938:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				return ERR_NO_RESOURCE;
    a93c:	f06f 001b 	mvn.w	r0, #27
    a940:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				return ERR_NOT_INITIALIZED;
    a944:	f06f 0013 	mvn.w	r0, #19
}
    a948:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a94c:	20007354 	.word	0x20007354
    a950:	00001d95 	.word	0x00001d95
    a954:	0000aff7 	.word	0x0000aff7
    a958:	00001df5 	.word	0x00001df5
    a95c:	0000afdd 	.word	0x0000afdd
    a960:	00001e21 	.word	0x00001e21

0000a964 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    a964:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    a966:	4b0a      	ldr	r3, [pc, #40]	; (a990 <cdcdf_acm_init+0x2c>)
    a968:	4798      	blx	r3
    a96a:	2801      	cmp	r0, #1
    a96c:	d80c      	bhi.n	a988 <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    a96e:	4809      	ldr	r0, [pc, #36]	; (a994 <cdcdf_acm_init+0x30>)
    a970:	4b09      	ldr	r3, [pc, #36]	; (a998 <cdcdf_acm_init+0x34>)
    a972:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    a974:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    a976:	4b09      	ldr	r3, [pc, #36]	; (a99c <cdcdf_acm_init+0x38>)
    a978:	3018      	adds	r0, #24
    a97a:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    a97c:	4908      	ldr	r1, [pc, #32]	; (a9a0 <cdcdf_acm_init+0x3c>)
    a97e:	4b09      	ldr	r3, [pc, #36]	; (a9a4 <cdcdf_acm_init+0x40>)
    a980:	2001      	movs	r0, #1
    a982:	4798      	blx	r3
	return ERR_NONE;
    a984:	2000      	movs	r0, #0
    a986:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    a988:	f06f 0010 	mvn.w	r0, #16
}
    a98c:	bd08      	pop	{r3, pc}
    a98e:	bf00      	nop
    a990:	0000afc9 	.word	0x0000afc9
    a994:	20007354 	.word	0x20007354
    a998:	0000a82d 	.word	0x0000a82d
    a99c:	0000af71 	.word	0x0000af71
    a9a0:	20000014 	.word	0x20000014
    a9a4:	0000aee9 	.word	0x0000aee9

0000a9a8 <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    a9a8:	b410      	push	{r4}
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    a9aa:	4c07      	ldr	r4, [pc, #28]	; (a9c8 <cdcdf_acm_read+0x20>)
	if (!cdcdf_acm_is_enabled()) {
    a9ac:	7963      	ldrb	r3, [r4, #5]
{
    a9ae:	460a      	mov	r2, r1
	if (!cdcdf_acm_is_enabled()) {
    a9b0:	b133      	cbz	r3, a9c0 <cdcdf_acm_read+0x18>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    a9b2:	4601      	mov	r1, r0
    a9b4:	7920      	ldrb	r0, [r4, #4]
    a9b6:	4c05      	ldr	r4, [pc, #20]	; (a9cc <cdcdf_acm_read+0x24>)
    a9b8:	2300      	movs	r3, #0
    a9ba:	46a4      	mov	ip, r4
}
    a9bc:	bc10      	pop	{r4}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    a9be:	4760      	bx	ip
}
    a9c0:	f06f 0010 	mvn.w	r0, #16
    a9c4:	bc10      	pop	{r4}
    a9c6:	4770      	bx	lr
    a9c8:	20007354 	.word	0x20007354
    a9cc:	0000aba1 	.word	0x0000aba1

0000a9d0 <cdcdf_acm_write>:
{
    a9d0:	b410      	push	{r4}
	return _cdcdf_acm_funcd.enabled;
    a9d2:	4c07      	ldr	r4, [pc, #28]	; (a9f0 <cdcdf_acm_write+0x20>)
	if (!cdcdf_acm_is_enabled()) {
    a9d4:	7963      	ldrb	r3, [r4, #5]
{
    a9d6:	460a      	mov	r2, r1
	if (!cdcdf_acm_is_enabled()) {
    a9d8:	b133      	cbz	r3, a9e8 <cdcdf_acm_write+0x18>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    a9da:	4601      	mov	r1, r0
    a9dc:	78e0      	ldrb	r0, [r4, #3]
    a9de:	4c05      	ldr	r4, [pc, #20]	; (a9f4 <cdcdf_acm_write+0x24>)
    a9e0:	2301      	movs	r3, #1
    a9e2:	46a4      	mov	ip, r4
}
    a9e4:	bc10      	pop	{r4}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    a9e6:	4760      	bx	ip
}
    a9e8:	f06f 0010 	mvn.w	r0, #16
    a9ec:	bc10      	pop	{r4}
    a9ee:	4770      	bx	lr
    a9f0:	20007354 	.word	0x20007354
    a9f4:	0000aba1 	.word	0x0000aba1

0000a9f8 <cdcdf_acm_register_callback>:
{
    a9f8:	b508      	push	{r3, lr}
    a9fa:	460a      	mov	r2, r1
	switch (cb_type) {
    a9fc:	2803      	cmp	r0, #3
    a9fe:	d814      	bhi.n	aa2a <cdcdf_acm_register_callback+0x32>
    aa00:	e8df f000 	tbb	[pc, r0]
    aa04:	100d0902 	.word	0x100d0902
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    aa08:	4b09      	ldr	r3, [pc, #36]	; (aa30 <cdcdf_acm_register_callback+0x38>)
    aa0a:	7918      	ldrb	r0, [r3, #4]
    aa0c:	2102      	movs	r1, #2
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    aa0e:	4b09      	ldr	r3, [pc, #36]	; (aa34 <cdcdf_acm_register_callback+0x3c>)
    aa10:	4798      	blx	r3
	return ERR_NONE;
    aa12:	2000      	movs	r0, #0
		break;
    aa14:	bd08      	pop	{r3, pc}
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    aa16:	4b06      	ldr	r3, [pc, #24]	; (aa30 <cdcdf_acm_register_callback+0x38>)
    aa18:	2102      	movs	r1, #2
    aa1a:	78d8      	ldrb	r0, [r3, #3]
    aa1c:	e7f7      	b.n	aa0e <cdcdf_acm_register_callback+0x16>
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    aa1e:	4b04      	ldr	r3, [pc, #16]	; (aa30 <cdcdf_acm_register_callback+0x38>)
    aa20:	6119      	str	r1, [r3, #16]
    aa22:	e7f6      	b.n	aa12 <cdcdf_acm_register_callback+0x1a>
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    aa24:	4b02      	ldr	r3, [pc, #8]	; (aa30 <cdcdf_acm_register_callback+0x38>)
    aa26:	6159      	str	r1, [r3, #20]
    aa28:	e7f3      	b.n	aa12 <cdcdf_acm_register_callback+0x1a>
		return ERR_INVALID_ARG;
    aa2a:	f06f 000c 	mvn.w	r0, #12
}
    aa2e:	bd08      	pop	{r3, pc}
    aa30:	20007354 	.word	0x20007354
    aa34:	00001fbd 	.word	0x00001fbd

0000aa38 <usbdc_unconfig>:
/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    aa38:	4b05      	ldr	r3, [pc, #20]	; (aa50 <usbdc_unconfig+0x18>)
{
    aa3a:	b510      	push	{r4, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    aa3c:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    aa3e:	b904      	cbnz	r4, aa42 <usbdc_unconfig+0xa>
		func->ctrl(func, USBDF_DISABLE, NULL);
		func = func->next;
	}
}
    aa40:	bd10      	pop	{r4, pc}
		func->ctrl(func, USBDF_DISABLE, NULL);
    aa42:	6863      	ldr	r3, [r4, #4]
    aa44:	4620      	mov	r0, r4
    aa46:	2200      	movs	r2, #0
    aa48:	2101      	movs	r1, #1
    aa4a:	4798      	blx	r3
		func = func->next;
    aa4c:	6824      	ldr	r4, [r4, #0]
    aa4e:	e7f6      	b.n	aa3e <usbdc_unconfig+0x6>
    aa50:	20007378 	.word	0x20007378

0000aa54 <usbdc_change_notify>:
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    aa54:	4b06      	ldr	r3, [pc, #24]	; (aa70 <usbdc_change_notify+0x1c>)
{
    aa56:	b570      	push	{r4, r5, r6, lr}
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    aa58:	68dc      	ldr	r4, [r3, #12]
{
    aa5a:	4605      	mov	r5, r0
    aa5c:	460e      	mov	r6, r1

	while (cg != NULL) {
    aa5e:	b904      	cbnz	r4, aa62 <usbdc_change_notify+0xe>
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
	}
}
    aa60:	bd70      	pop	{r4, r5, r6, pc}
		if (NULL != cg->cb) {
    aa62:	6863      	ldr	r3, [r4, #4]
    aa64:	b113      	cbz	r3, aa6c <usbdc_change_notify+0x18>
			cg->cb(change, value);
    aa66:	4631      	mov	r1, r6
    aa68:	4628      	mov	r0, r5
    aa6a:	4798      	blx	r3
		cg = cg->next;
    aa6c:	6824      	ldr	r4, [r4, #0]
    aa6e:	e7f6      	b.n	aa5e <usbdc_change_notify+0xa>
    aa70:	20007378 	.word	0x20007378

0000aa74 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    aa74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    aa76:	4b0c      	ldr	r3, [pc, #48]	; (aaa8 <usbdc_request_handler+0x34>)
    aa78:	689c      	ldr	r4, [r3, #8]
{
    aa7a:	4605      	mov	r5, r0
    aa7c:	460e      	mov	r6, r1
    aa7e:	4617      	mov	r7, r2
	int32_t                   rc;

	while (h != NULL) {
    aa80:	b90c      	cbnz	r4, aa86 <usbdc_request_handler+0x12>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    aa82:	4620      	mov	r0, r4
    aa84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (NULL != h->cb) {
    aa86:	6863      	ldr	r3, [r4, #4]
    aa88:	b90b      	cbnz	r3, aa8e <usbdc_request_handler+0x1a>
		h = h->next;
    aa8a:	6824      	ldr	r4, [r4, #0]
    aa8c:	e7f8      	b.n	aa80 <usbdc_request_handler+0xc>
			rc = h->cb(ep, req, stage);
    aa8e:	463a      	mov	r2, r7
    aa90:	4631      	mov	r1, r6
    aa92:	4628      	mov	r0, r5
    aa94:	4798      	blx	r3
			if (0 == rc) {
    aa96:	b120      	cbz	r0, aaa2 <usbdc_request_handler+0x2e>
			} else if (ERR_NOT_FOUND != rc) {
    aa98:	300a      	adds	r0, #10
    aa9a:	d0f6      	beq.n	aa8a <usbdc_request_handler+0x16>
				return -1;
    aa9c:	f04f 30ff 	mov.w	r0, #4294967295
}
    aaa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    aaa2:	2001      	movs	r0, #1
    aaa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    aaa6:	bf00      	nop
    aaa8:	20007378 	.word	0x20007378

0000aaac <usbd_sof_cb>:
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    aaac:	4b04      	ldr	r3, [pc, #16]	; (aac0 <usbd_sof_cb+0x14>)

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    aaae:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    aab0:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    aab2:	b904      	cbnz	r4, aab6 <usbd_sof_cb+0xa>
	usbdc_sof_notify();
}
    aab4:	bd10      	pop	{r4, pc}
		if (NULL != sof->cb) {
    aab6:	6863      	ldr	r3, [r4, #4]
    aab8:	b103      	cbz	r3, aabc <usbd_sof_cb+0x10>
			sof->cb();
    aaba:	4798      	blx	r3
		sof = sof->next;
    aabc:	6824      	ldr	r4, [r4, #0]
    aabe:	e7f8      	b.n	aab2 <usbd_sof_cb+0x6>
    aac0:	20007378 	.word	0x20007378

0000aac4 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    aac4:	b510      	push	{r4, lr}
    aac6:	4614      	mov	r4, r2
	(void)ep;

	switch (code) {
    aac8:	460a      	mov	r2, r1
    aaca:	b119      	cbz	r1, aad4 <usbdc_cb_ctl_done+0x10>
    aacc:	2901      	cmp	r1, #1
    aace:	d020      	beq.n	ab12 <usbdc_cb_ctl_done+0x4e>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    aad0:	2000      	movs	r0, #0
    aad2:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    aad4:	7823      	ldrb	r3, [r4, #0]
    aad6:	2b00      	cmp	r3, #0
    aad8:	d1fa      	bne.n	aad0 <usbdc_cb_ctl_done+0xc>
	switch (req->bRequest) {
    aada:	7863      	ldrb	r3, [r4, #1]
    aadc:	2b05      	cmp	r3, #5
    aade:	d00d      	beq.n	aafc <usbdc_cb_ctl_done+0x38>
    aae0:	2b09      	cmp	r3, #9
    aae2:	d1f5      	bne.n	aad0 <usbdc_cb_ctl_done+0xc>
		usbdc.cfg_value = req->wValue;
    aae4:	8862      	ldrh	r2, [r4, #2]
    aae6:	4b0d      	ldr	r3, [pc, #52]	; (ab1c <usbdc_cb_ctl_done+0x58>)
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    aae8:	2a00      	cmp	r2, #0
		usbdc.cfg_value = req->wValue;
    aaea:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    aaec:	bf14      	ite	ne
    aaee:	2104      	movne	r1, #4
    aaf0:	2103      	moveq	r1, #3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    aaf2:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    aaf4:	2001      	movs	r0, #1
    aaf6:	4b0a      	ldr	r3, [pc, #40]	; (ab20 <usbdc_cb_ctl_done+0x5c>)
    aaf8:	4798      	blx	r3
    aafa:	e7e9      	b.n	aad0 <usbdc_cb_ctl_done+0xc>
		usbdc_set_address(req->wValue);
    aafc:	8860      	ldrh	r0, [r4, #2]
	usb_d_set_address(addr);
    aafe:	4b09      	ldr	r3, [pc, #36]	; (ab24 <usbdc_cb_ctl_done+0x60>)
    ab00:	b2c0      	uxtb	r0, r0
    ab02:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    ab04:	8863      	ldrh	r3, [r4, #2]
    ab06:	2b00      	cmp	r3, #0
    ab08:	bf14      	ite	ne
    ab0a:	2103      	movne	r1, #3
    ab0c:	2102      	moveq	r1, #2
    ab0e:	4b03      	ldr	r3, [pc, #12]	; (ab1c <usbdc_cb_ctl_done+0x58>)
    ab10:	e7ef      	b.n	aaf2 <usbdc_cb_ctl_done+0x2e>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    ab12:	4621      	mov	r1, r4
    ab14:	4b04      	ldr	r3, [pc, #16]	; (ab28 <usbdc_cb_ctl_done+0x64>)
    ab16:	2000      	movs	r0, #0
    ab18:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    ab1a:	e7d9      	b.n	aad0 <usbdc_cb_ctl_done+0xc>
    ab1c:	20007378 	.word	0x20007378
    ab20:	0000aa55 	.word	0x0000aa55
    ab24:	00001d8d 	.word	0x00001d8d
    ab28:	0000aa75 	.word	0x0000aa75

0000ab2c <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    ab2c:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();
    ab2e:	4b0e      	ldr	r3, [pc, #56]	; (ab68 <usbdc_reset+0x3c>)

	usbdc.state       = USBD_S_DEFAULT;
    ab30:	4d0e      	ldr	r5, [pc, #56]	; (ab6c <usbdc_reset+0x40>)
	usbdc.cfg_value   = 0;
    ab32:	2400      	movs	r4, #0
	usbdc_unconfig();
    ab34:	4798      	blx	r3
	usbdc.state       = USBD_S_DEFAULT;
    ab36:	2602      	movs	r6, #2
	usbdc.ifc_alt_map = 0;

	// Setup EP0
	usb_d_ep_deinit(0);
    ab38:	4620      	mov	r0, r4
    ab3a:	4b0d      	ldr	r3, [pc, #52]	; (ab70 <usbdc_reset+0x44>)
	usbdc.state       = USBD_S_DEFAULT;
    ab3c:	76ae      	strb	r6, [r5, #26]
	usbdc.cfg_value   = 0;
    ab3e:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    ab40:	776c      	strb	r4, [r5, #29]
	usb_d_ep_deinit(0);
    ab42:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    ab44:	4b0b      	ldr	r3, [pc, #44]	; (ab74 <usbdc_reset+0x48>)
    ab46:	7f28      	ldrb	r0, [r5, #28]
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    ab48:	4d0b      	ldr	r5, [pc, #44]	; (ab78 <usbdc_reset+0x4c>)
	usb_d_ep0_init(usbdc.ctrl_size);
    ab4a:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    ab4c:	4621      	mov	r1, r4
    ab4e:	4620      	mov	r0, r4
    ab50:	4a0a      	ldr	r2, [pc, #40]	; (ab7c <usbdc_reset+0x50>)
    ab52:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    ab54:	4620      	mov	r0, r4
    ab56:	4631      	mov	r1, r6
    ab58:	4a09      	ldr	r2, [pc, #36]	; (ab80 <usbdc_reset+0x54>)
    ab5a:	47a8      	blx	r5
	usb_d_ep_enable(0);
    ab5c:	4620      	mov	r0, r4
    ab5e:	4b09      	ldr	r3, [pc, #36]	; (ab84 <usbdc_reset+0x58>)
}
    ab60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	usb_d_ep_enable(0);
    ab64:	4718      	bx	r3
    ab66:	bf00      	nop
    ab68:	0000aa39 	.word	0x0000aa39
    ab6c:	20007378 	.word	0x20007378
    ab70:	00001df5 	.word	0x00001df5
    ab74:	00001de5 	.word	0x00001de5
    ab78:	00001fbd 	.word	0x00001fbd
    ab7c:	0000abc1 	.word	0x0000abc1
    ab80:	0000aac5 	.word	0x0000aac5
    ab84:	00001e21 	.word	0x00001e21

0000ab88 <usbd_event_cb>:
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
	(void)param;

	switch (ev) {
    ab88:	b110      	cbz	r0, ab90 <usbd_event_cb+0x8>
    ab8a:	2801      	cmp	r0, #1
    ab8c:	d002      	beq.n	ab94 <usbd_event_cb+0xc>
    ab8e:	4770      	bx	lr
	case USB_EV_VBUS:
		usbdc_change_notify(USBDC_C_CONN, param);
    ab90:	4b01      	ldr	r3, [pc, #4]	; (ab98 <usbd_event_cb+0x10>)
    ab92:	4718      	bx	r3
		break;

	case USB_EV_RESET:
		usbdc_reset();
    ab94:	4b01      	ldr	r3, [pc, #4]	; (ab9c <usbd_event_cb+0x14>)
    ab96:	4718      	bx	r3
    ab98:	0000aa55 	.word	0x0000aa55
    ab9c:	0000ab2d 	.word	0x0000ab2d

0000aba0 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    aba0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    aba2:	f88d 000c 	strb.w	r0, [sp, #12]
    aba6:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    abaa:	a801      	add	r0, sp, #4
    abac:	4b03      	ldr	r3, [pc, #12]	; (abbc <usbdc_xfer+0x1c>)
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    abae:	9101      	str	r1, [sp, #4]
    abb0:	9202      	str	r2, [sp, #8]
	return usb_d_ep_transfer(&xfer);
    abb2:	4798      	blx	r3
}
    abb4:	b005      	add	sp, #20
    abb6:	f85d fb04 	ldr.w	pc, [sp], #4
    abba:	bf00      	nop
    abbc:	00001e61 	.word	0x00001e61

0000abc0 <usbdc_cb_ctl_req>:
{
    abc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    abc4:	4baa      	ldr	r3, [pc, #680]	; (ae70 <usbdc_cb_ctl_req+0x2b0>)
    abc6:	2200      	movs	r2, #0
{
    abc8:	4605      	mov	r5, r0
    abca:	460c      	mov	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    abcc:	4798      	blx	r3
    abce:	1c43      	adds	r3, r0, #1
    abd0:	d008      	beq.n	abe4 <usbdc_cb_ctl_req+0x24>
    abd2:	2801      	cmp	r0, #1
    abd4:	d075      	beq.n	acc2 <usbdc_cb_ctl_req+0x102>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    abd6:	7821      	ldrb	r1, [r4, #0]
    abd8:	f011 03e0 	ands.w	r3, r1, #224	; 0xe0
    abdc:	d004      	beq.n	abe8 <usbdc_cb_ctl_req+0x28>
    abde:	2b80      	cmp	r3, #128	; 0x80
    abe0:	f000 80c4 	beq.w	ad6c <usbdc_cb_ctl_req+0x1ac>
	return false;
    abe4:	2000      	movs	r0, #0
    abe6:	e06c      	b.n	acc2 <usbdc_cb_ctl_req+0x102>
	switch (req->bRequest) {
    abe8:	7863      	ldrb	r3, [r4, #1]
    abea:	3b01      	subs	r3, #1
    abec:	2b0a      	cmp	r3, #10
    abee:	d8f9      	bhi.n	abe4 <usbdc_cb_ctl_req+0x24>
    abf0:	a201      	add	r2, pc, #4	; (adr r2, abf8 <usbdc_cb_ctl_req+0x38>)
    abf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    abf6:	bf00      	nop
    abf8:	0000aca1 	.word	0x0000aca1
    abfc:	0000abe5 	.word	0x0000abe5
    ac00:	0000acc9 	.word	0x0000acc9
    ac04:	0000abe5 	.word	0x0000abe5
    ac08:	0000ac2f 	.word	0x0000ac2f
    ac0c:	0000abe5 	.word	0x0000abe5
    ac10:	0000abe5 	.word	0x0000abe5
    ac14:	0000abe5 	.word	0x0000abe5
    ac18:	0000ac25 	.word	0x0000ac25
    ac1c:	0000abe5 	.word	0x0000abe5
    ac20:	0000acd9 	.word	0x0000acd9
		if (!usbdc_set_config(req->wValue)) {
    ac24:	8862      	ldrh	r2, [r4, #2]
    ac26:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    ac28:	b92a      	cbnz	r2, ac36 <usbdc_cb_ctl_req+0x76>
		usbdc_unconfig();
    ac2a:	4b92      	ldr	r3, [pc, #584]	; (ae74 <usbdc_cb_ctl_req+0x2b4>)
    ac2c:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    ac2e:	2200      	movs	r2, #0
    ac30:	2301      	movs	r3, #1
    ac32:	4611      	mov	r1, r2
    ac34:	e0ec      	b.n	ae10 <usbdc_cb_ctl_req+0x250>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    ac36:	4c90      	ldr	r4, [pc, #576]	; (ae78 <usbdc_cb_ctl_req+0x2b8>)
    ac38:	6823      	ldr	r3, [r4, #0]
    ac3a:	e893 0003 	ldmia.w	r3, {r0, r1}
    ac3e:	4b8f      	ldr	r3, [pc, #572]	; (ae7c <usbdc_cb_ctl_req+0x2bc>)
    ac40:	4798      	blx	r3
	if (NULL == cfg_desc) {
    ac42:	2800      	cmp	r0, #0
    ac44:	d0ce      	beq.n	abe4 <usbdc_cb_ctl_req+0x24>
	return (ptr[0] + (ptr[1] << 8));
    ac46:	78c2      	ldrb	r2, [r0, #3]
    ac48:	7883      	ldrb	r3, [r0, #2]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    ac4a:	4f8d      	ldr	r7, [pc, #564]	; (ae80 <usbdc_cb_ctl_req+0x2c0>)
    ac4c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
	desc.eod  = cfg_desc + total_len;
    ac50:	fa10 f183 	uxtah	r1, r0, r3
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    ac54:	2204      	movs	r2, #4
	desc.eod  = cfg_desc + total_len;
    ac56:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    ac58:	47b8      	blx	r7
    ac5a:	f10d 0808 	add.w	r8, sp, #8
	uint8_t                 last_iface = 0xFF;
    ac5e:	23ff      	movs	r3, #255	; 0xff
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    ac60:	f848 0d08 	str.w	r0, [r8, #-8]!
	while (NULL != desc.sod) {
    ac64:	9a00      	ldr	r2, [sp, #0]
    ac66:	2a00      	cmp	r2, #0
    ac68:	d0e1      	beq.n	ac2e <usbdc_cb_ctl_req+0x6e>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    ac6a:	f892 9002 	ldrb.w	r9, [r2, #2]
    ac6e:	4599      	cmp	r9, r3
    ac70:	d014      	beq.n	ac9c <usbdc_cb_ctl_req+0xdc>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    ac72:	6926      	ldr	r6, [r4, #16]
			while (NULL != func) {
    ac74:	b94e      	cbnz	r6, ac8a <usbdc_cb_ctl_req+0xca>
		desc.sod = usb_desc_next(desc.sod);
    ac76:	9800      	ldr	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    ac78:	9901      	ldr	r1, [sp, #4]
	return (desc + usb_desc_len(desc));
    ac7a:	7803      	ldrb	r3, [r0, #0]
    ac7c:	2204      	movs	r2, #4
    ac7e:	4418      	add	r0, r3
		desc.sod = usb_desc_next(desc.sod);
    ac80:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    ac82:	47b8      	blx	r7
    ac84:	464b      	mov	r3, r9
    ac86:	9000      	str	r0, [sp, #0]
    ac88:	e7ec      	b.n	ac64 <usbdc_cb_ctl_req+0xa4>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    ac8a:	6873      	ldr	r3, [r6, #4]
    ac8c:	4642      	mov	r2, r8
    ac8e:	2100      	movs	r1, #0
    ac90:	4630      	mov	r0, r6
    ac92:	4798      	blx	r3
    ac94:	2800      	cmp	r0, #0
    ac96:	d0ee      	beq.n	ac76 <usbdc_cb_ctl_req+0xb6>
					func = func->next;
    ac98:	6836      	ldr	r6, [r6, #0]
    ac9a:	e7eb      	b.n	ac74 <usbdc_cb_ctl_req+0xb4>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    ac9c:	4699      	mov	r9, r3
    ac9e:	e7ea      	b.n	ac76 <usbdc_cb_ctl_req+0xb6>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    aca0:	2902      	cmp	r1, #2
    aca2:	d19f      	bne.n	abe4 <usbdc_cb_ctl_req+0x24>
		if (req->wLength != 0) {
    aca4:	88e6      	ldrh	r6, [r4, #6]
    aca6:	2e00      	cmp	r6, #0
    aca8:	d19c      	bne.n	abe4 <usbdc_cb_ctl_req+0x24>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    acaa:	88a0      	ldrh	r0, [r4, #4]
    acac:	4631      	mov	r1, r6
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    acae:	4b75      	ldr	r3, [pc, #468]	; (ae84 <usbdc_cb_ctl_req+0x2c4>)
    acb0:	b2c0      	uxtb	r0, r0
    acb2:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    acb4:	2301      	movs	r3, #1
    acb6:	4632      	mov	r2, r6
    acb8:	4631      	mov	r1, r6
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    acba:	4628      	mov	r0, r5
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    acbc:	4c72      	ldr	r4, [pc, #456]	; (ae88 <usbdc_cb_ctl_req+0x2c8>)
    acbe:	47a0      	blx	r4
			return true;
    acc0:	2001      	movs	r0, #1
}
    acc2:	b003      	add	sp, #12
    acc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    acc8:	2902      	cmp	r1, #2
    acca:	d18b      	bne.n	abe4 <usbdc_cb_ctl_req+0x24>
		if (req->wLength != 0) {
    accc:	88e6      	ldrh	r6, [r4, #6]
    acce:	2e00      	cmp	r6, #0
    acd0:	d188      	bne.n	abe4 <usbdc_cb_ctl_req+0x24>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    acd2:	88a0      	ldrh	r0, [r4, #4]
    acd4:	2101      	movs	r1, #1
    acd6:	e7ea      	b.n	acae <usbdc_cb_ctl_req+0xee>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    acd8:	4d67      	ldr	r5, [pc, #412]	; (ae78 <usbdc_cb_ctl_req+0x2b8>)
		return usbdc_set_interface(req->wValue, req->wIndex);
    acda:	8866      	ldrh	r6, [r4, #2]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    acdc:	682b      	ldr	r3, [r5, #0]
    acde:	7eea      	ldrb	r2, [r5, #27]
		return usbdc_set_interface(req->wValue, req->wIndex);
    ace0:	88a7      	ldrh	r7, [r4, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    ace2:	e893 0003 	ldmia.w	r3, {r0, r1}
    ace6:	4b65      	ldr	r3, [pc, #404]	; (ae7c <usbdc_cb_ctl_req+0x2bc>)
    ace8:	4798      	blx	r3
	if (NULL == ifc) {
    acea:	2800      	cmp	r0, #0
    acec:	f43f af7a 	beq.w	abe4 <usbdc_cb_ctl_req+0x24>
	desc.sod = ifc;
    acf0:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    acf2:	78c2      	ldrb	r2, [r0, #3]
    acf4:	7881      	ldrb	r1, [r0, #2]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    acf6:	4c62      	ldr	r4, [pc, #392]	; (ae80 <usbdc_cb_ctl_req+0x2c0>)
    acf8:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    acfc:	fa10 f181 	uxtah	r1, r0, r1
    ad00:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    ad02:	2204      	movs	r2, #4
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    ad04:	47a0      	blx	r4
		if (NULL == ifc) {
    ad06:	2800      	cmp	r0, #0
    ad08:	f43f af6c 	beq.w	abe4 <usbdc_cb_ctl_req+0x24>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    ad0c:	7883      	ldrb	r3, [r0, #2]
    ad0e:	42bb      	cmp	r3, r7
    ad10:	d113      	bne.n	ad3a <usbdc_cb_ctl_req+0x17a>
    ad12:	78c3      	ldrb	r3, [r0, #3]
    ad14:	42b3      	cmp	r3, r6
    ad16:	d110      	bne.n	ad3a <usbdc_cb_ctl_req+0x17a>
	desc.sod = ifc;
    ad18:	f10d 0808 	add.w	r8, sp, #8
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    ad1c:	692c      	ldr	r4, [r5, #16]
	desc.sod = ifc;
    ad1e:	f848 0d08 	str.w	r0, [r8, #-8]!
	while (NULL != func) {
    ad22:	2c00      	cmp	r4, #0
    ad24:	f43f af5e 	beq.w	abe4 <usbdc_cb_ctl_req+0x24>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    ad28:	2101      	movs	r1, #1
    ad2a:	6863      	ldr	r3, [r4, #4]
    ad2c:	4642      	mov	r2, r8
    ad2e:	4620      	mov	r0, r4
    ad30:	4798      	blx	r3
    ad32:	4601      	mov	r1, r0
    ad34:	b140      	cbz	r0, ad48 <usbdc_cb_ctl_req+0x188>
			func = func->next;
    ad36:	6824      	ldr	r4, [r4, #0]
    ad38:	e7f3      	b.n	ad22 <usbdc_cb_ctl_req+0x162>
		desc.sod = usb_desc_next(desc.sod);
    ad3a:	9800      	ldr	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    ad3c:	9901      	ldr	r1, [sp, #4]
	return (desc + usb_desc_len(desc));
    ad3e:	7803      	ldrb	r3, [r0, #0]
    ad40:	4418      	add	r0, r3
		desc.sod = usb_desc_next(desc.sod);
    ad42:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    ad44:	2204      	movs	r2, #4
    ad46:	e7dd      	b.n	ad04 <usbdc_cb_ctl_req+0x144>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    ad48:	6863      	ldr	r3, [r4, #4]
    ad4a:	4642      	mov	r2, r8
    ad4c:	4620      	mov	r0, r4
    ad4e:	4798      	blx	r3
    ad50:	2800      	cmp	r0, #0
    ad52:	f47f af47 	bne.w	abe4 <usbdc_cb_ctl_req+0x24>
			if (alt_set) {
    ad56:	b126      	cbz	r6, ad62 <usbdc_cb_ctl_req+0x1a2>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    ad58:	2301      	movs	r3, #1
    ad5a:	40bb      	lsls	r3, r7
    ad5c:	7f6f      	ldrb	r7, [r5, #29]
    ad5e:	431f      	orrs	r7, r3
    ad60:	776f      	strb	r7, [r5, #29]
			usbdc_xfer(0, NULL, 0, 0);
    ad62:	2300      	movs	r3, #0
    ad64:	461a      	mov	r2, r3
    ad66:	4619      	mov	r1, r3
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    ad68:	4618      	mov	r0, r3
    ad6a:	e7a7      	b.n	acbc <usbdc_cb_ctl_req+0xfc>
	switch (req->bRequest) {
    ad6c:	7863      	ldrb	r3, [r4, #1]
    ad6e:	2b0a      	cmp	r3, #10
    ad70:	f63f af38 	bhi.w	abe4 <usbdc_cb_ctl_req+0x24>
    ad74:	a201      	add	r2, pc, #4	; (adr r2, ad7c <usbdc_cb_ctl_req+0x1bc>)
    ad76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ad7a:	bf00      	nop
    ad7c:	0000ae4b 	.word	0x0000ae4b
    ad80:	0000abe5 	.word	0x0000abe5
    ad84:	0000abe5 	.word	0x0000abe5
    ad88:	0000abe5 	.word	0x0000abe5
    ad8c:	0000abe5 	.word	0x0000abe5
    ad90:	0000abe5 	.word	0x0000abe5
    ad94:	0000ada9 	.word	0x0000ada9
    ad98:	0000abe5 	.word	0x0000abe5
    ad9c:	0000ae3b 	.word	0x0000ae3b
    ada0:	0000abe5 	.word	0x0000abe5
    ada4:	0000aea5 	.word	0x0000aea5
	uint8_t type = (uint8_t)(req->wValue >> 8);
    ada8:	8863      	ldrh	r3, [r4, #2]
	switch (type) {
    adaa:	0a1a      	lsrs	r2, r3, #8
    adac:	2a02      	cmp	r2, #2
    adae:	d014      	beq.n	adda <usbdc_cb_ctl_req+0x21a>
    adb0:	2a03      	cmp	r2, #3
    adb2:	d034      	beq.n	ae1e <usbdc_cb_ctl_req+0x25e>
    adb4:	2a01      	cmp	r2, #1
    adb6:	f47f af15 	bne.w	abe4 <usbdc_cb_ctl_req+0x24>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    adba:	4b2f      	ldr	r3, [pc, #188]	; (ae78 <usbdc_cb_ctl_req+0x2b8>)
	uint16_t length   = req->wLength;
    adbc:	88e4      	ldrh	r4, [r4, #6]
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    adbe:	681b      	ldr	r3, [r3, #0]
    adc0:	2c12      	cmp	r4, #18
    adc2:	e893 0003 	ldmia.w	r3, {r0, r1}
    adc6:	4b2e      	ldr	r3, [pc, #184]	; (ae80 <usbdc_cb_ctl_req+0x2c0>)
    adc8:	bf28      	it	cs
    adca:	2412      	movcs	r4, #18
    adcc:	4798      	blx	r3
	if (!dev_desc) {
    adce:	4601      	mov	r1, r0
    add0:	2800      	cmp	r0, #0
    add2:	f43f af07 	beq.w	abe4 <usbdc_cb_ctl_req+0x24>
		need_zlp = false;
    add6:	2300      	movs	r3, #0
    add8:	e019      	b.n	ae0e <usbdc_cb_ctl_req+0x24e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    adda:	4a27      	ldr	r2, [pc, #156]	; (ae78 <usbdc_cb_ctl_req+0x2b8>)
	uint16_t length   = req->wLength;
    addc:	88e4      	ldrh	r4, [r4, #6]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    adde:	6810      	ldr	r0, [r2, #0]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    ade0:	7f16      	ldrb	r6, [r2, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    ade2:	1c5a      	adds	r2, r3, #1
    ade4:	c803      	ldmia	r0, {r0, r1}
    ade6:	b2d2      	uxtb	r2, r2
    ade8:	4b24      	ldr	r3, [pc, #144]	; (ae7c <usbdc_cb_ctl_req+0x2bc>)
    adea:	4798      	blx	r3
	if (NULL == cfg_desc) {
    adec:	4601      	mov	r1, r0
    adee:	2800      	cmp	r0, #0
    adf0:	f43f aef8 	beq.w	abe4 <usbdc_cb_ctl_req+0x24>
	return (ptr[0] + (ptr[1] << 8));
    adf4:	78c3      	ldrb	r3, [r0, #3]
    adf6:	7882      	ldrb	r2, [r0, #2]
    adf8:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    adfc:	b292      	uxth	r2, r2
	if (length <= str_desc[0]) {
    adfe:	4294      	cmp	r4, r2
    ae00:	d9e9      	bls.n	add6 <usbdc_cb_ctl_req+0x216>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    ae02:	3e01      	subs	r6, #1
    ae04:	4226      	tst	r6, r4
    ae06:	bf0c      	ite	eq
    ae08:	2301      	moveq	r3, #1
    ae0a:	2300      	movne	r3, #0
    ae0c:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    ae0e:	4622      	mov	r2, r4
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    ae10:	4628      	mov	r0, r5
    ae12:	4c1d      	ldr	r4, [pc, #116]	; (ae88 <usbdc_cb_ctl_req+0x2c8>)
    ae14:	47a0      	blx	r4
    ae16:	fab0 f080 	clz	r0, r0
    ae1a:	0940      	lsrs	r0, r0, #5
    ae1c:	e751      	b.n	acc2 <usbdc_cb_ctl_req+0x102>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    ae1e:	4a16      	ldr	r2, [pc, #88]	; (ae78 <usbdc_cb_ctl_req+0x2b8>)
	uint16_t length   = req->wLength;
    ae20:	88e4      	ldrh	r4, [r4, #6]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    ae22:	6810      	ldr	r0, [r2, #0]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    ae24:	7f16      	ldrb	r6, [r2, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    ae26:	c803      	ldmia	r0, {r0, r1}
    ae28:	b2da      	uxtb	r2, r3
    ae2a:	4b18      	ldr	r3, [pc, #96]	; (ae8c <usbdc_cb_ctl_req+0x2cc>)
    ae2c:	4798      	blx	r3
	if (NULL == str_desc) {
    ae2e:	4601      	mov	r1, r0
    ae30:	2800      	cmp	r0, #0
    ae32:	f43f aed7 	beq.w	abe4 <usbdc_cb_ctl_req+0x24>
	if (length <= str_desc[0]) {
    ae36:	7802      	ldrb	r2, [r0, #0]
    ae38:	e7e1      	b.n	adfe <usbdc_cb_ctl_req+0x23e>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    ae3a:	490f      	ldr	r1, [pc, #60]	; (ae78 <usbdc_cb_ctl_req+0x2b8>)
    ae3c:	694b      	ldr	r3, [r1, #20]
    ae3e:	7eca      	ldrb	r2, [r1, #27]
    ae40:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    ae42:	2300      	movs	r3, #0
    ae44:	2201      	movs	r2, #1
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    ae46:	6949      	ldr	r1, [r1, #20]
    ae48:	e737      	b.n	acba <usbdc_cb_ctl_req+0xfa>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    ae4a:	f001 011f 	and.w	r1, r1, #31
    ae4e:	2901      	cmp	r1, #1
    ae50:	d91e      	bls.n	ae90 <usbdc_cb_ctl_req+0x2d0>
    ae52:	2902      	cmp	r1, #2
    ae54:	f47f aec6 	bne.w	abe4 <usbdc_cb_ctl_req+0x24>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    ae58:	88a0      	ldrh	r0, [r4, #4]
    ae5a:	4b0a      	ldr	r3, [pc, #40]	; (ae84 <usbdc_cb_ctl_req+0x2c4>)
    ae5c:	b2c0      	uxtb	r0, r0
    ae5e:	4798      	blx	r3
		if (st < 0) {
    ae60:	2800      	cmp	r0, #0
    ae62:	f6ff aebf 	blt.w	abe4 <usbdc_cb_ctl_req+0x24>
		st = st & 0x1;
    ae66:	f000 0001 	and.w	r0, r0, #1
    ae6a:	9000      	str	r0, [sp, #0]
    ae6c:	e012      	b.n	ae94 <usbdc_cb_ctl_req+0x2d4>
    ae6e:	bf00      	nop
    ae70:	0000aa75 	.word	0x0000aa75
    ae74:	0000aa39 	.word	0x0000aa39
    ae78:	20007378 	.word	0x20007378
    ae7c:	0000b015 	.word	0x0000b015
    ae80:	0000afdd 	.word	0x0000afdd
    ae84:	00001f59 	.word	0x00001f59
    ae88:	0000aba1 	.word	0x0000aba1
    ae8c:	0000b051 	.word	0x0000b051
		st = 0;
    ae90:	2300      	movs	r3, #0
    ae92:	9300      	str	r3, [sp, #0]
	memcpy(usbdc.ctrl_buf, &st, 2);
    ae94:	4913      	ldr	r1, [pc, #76]	; (aee4 <usbdc_cb_ctl_req+0x324>)
    ae96:	f8bd 2000 	ldrh.w	r2, [sp]
    ae9a:	694b      	ldr	r3, [r1, #20]
    ae9c:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    ae9e:	2300      	movs	r3, #0
    aea0:	2202      	movs	r2, #2
    aea2:	e7d0      	b.n	ae46 <usbdc_cb_ctl_req+0x286>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    aea4:	490f      	ldr	r1, [pc, #60]	; (aee4 <usbdc_cb_ctl_req+0x324>)
    aea6:	88a2      	ldrh	r2, [r4, #4]
    aea8:	7f4b      	ldrb	r3, [r1, #29]
    aeaa:	4113      	asrs	r3, r2
    aeac:	f013 0301 	ands.w	r3, r3, #1
    aeb0:	460e      	mov	r6, r1
    aeb2:	d115      	bne.n	aee0 <usbdc_cb_ctl_req+0x320>
		usbdc.ctrl_buf[0] = 0;
    aeb4:	694a      	ldr	r2, [r1, #20]
    aeb6:	7013      	strb	r3, [r2, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    aeb8:	6949      	ldr	r1, [r1, #20]
    aeba:	2201      	movs	r2, #1
    aebc:	e754      	b.n	ad68 <usbdc_cb_ctl_req+0x1a8>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    aebe:	686b      	ldr	r3, [r5, #4]
    aec0:	4622      	mov	r2, r4
    aec2:	2102      	movs	r1, #2
    aec4:	4628      	mov	r0, r5
    aec6:	4798      	blx	r3
    aec8:	2800      	cmp	r0, #0
    aeca:	da03      	bge.n	aed4 <usbdc_cb_ctl_req+0x314>
			func = func->next;
    aecc:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    aece:	2d00      	cmp	r5, #0
    aed0:	d1f5      	bne.n	aebe <usbdc_cb_ctl_req+0x2fe>
    aed2:	e687      	b.n	abe4 <usbdc_cb_ctl_req+0x24>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    aed4:	6973      	ldr	r3, [r6, #20]
    aed6:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    aed8:	2201      	movs	r2, #1
    aeda:	2300      	movs	r3, #0
    aedc:	6971      	ldr	r1, [r6, #20]
    aede:	e743      	b.n	ad68 <usbdc_cb_ctl_req+0x1a8>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    aee0:	690d      	ldr	r5, [r1, #16]
    aee2:	e7f4      	b.n	aece <usbdc_cb_ctl_req+0x30e>
    aee4:	20007378 	.word	0x20007378

0000aee8 <usbdc_register_handler>:
/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
	switch (type) {
    aee8:	2801      	cmp	r0, #1
    aeea:	d006      	beq.n	aefa <usbdc_register_handler+0x12>
    aeec:	d302      	bcc.n	aef4 <usbdc_register_handler+0xc>
    aeee:	2802      	cmp	r0, #2
    aef0:	d005      	beq.n	aefe <usbdc_register_handler+0x16>
    aef2:	4770      	bx	lr
	case USBDC_HDL_SOF:
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    aef4:	4803      	ldr	r0, [pc, #12]	; (af04 <usbdc_register_handler+0x1c>)
		break;
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    aef6:	4b04      	ldr	r3, [pc, #16]	; (af08 <usbdc_register_handler+0x20>)
    aef8:	4718      	bx	r3
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    aefa:	4804      	ldr	r0, [pc, #16]	; (af0c <usbdc_register_handler+0x24>)
    aefc:	e7fb      	b.n	aef6 <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    aefe:	4804      	ldr	r0, [pc, #16]	; (af10 <usbdc_register_handler+0x28>)
    af00:	e7f9      	b.n	aef6 <usbdc_register_handler+0xe>
    af02:	bf00      	nop
    af04:	2000737c 	.word	0x2000737c
    af08:	00002051 	.word	0x00002051
    af0c:	20007380 	.word	0x20007380
    af10:	20007384 	.word	0x20007384

0000af14 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    af14:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
    af16:	4605      	mov	r5, r0
    af18:	3000      	adds	r0, #0
    af1a:	bf18      	it	ne
    af1c:	2001      	movne	r0, #1
    af1e:	f240 3255 	movw	r2, #853	; 0x355
    af22:	490b      	ldr	r1, [pc, #44]	; (af50 <usbdc_init+0x3c>)
    af24:	4b0b      	ldr	r3, [pc, #44]	; (af54 <usbdc_init+0x40>)
    af26:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    af28:	4b0b      	ldr	r3, [pc, #44]	; (af58 <usbdc_init+0x44>)
    af2a:	4798      	blx	r3
	if (rc < 0) {
    af2c:	2800      	cmp	r0, #0
    af2e:	db0e      	blt.n	af4e <usbdc_init+0x3a>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    af30:	4c0a      	ldr	r4, [pc, #40]	; (af5c <usbdc_init+0x48>)
    af32:	4b0b      	ldr	r3, [pc, #44]	; (af60 <usbdc_init+0x4c>)
    af34:	2220      	movs	r2, #32
    af36:	2100      	movs	r1, #0
    af38:	4620      	mov	r0, r4
    af3a:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    af3c:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    af3e:	4909      	ldr	r1, [pc, #36]	; (af64 <usbdc_init+0x50>)
    af40:	4c09      	ldr	r4, [pc, #36]	; (af68 <usbdc_init+0x54>)
    af42:	2000      	movs	r0, #0
    af44:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    af46:	2001      	movs	r0, #1
    af48:	4908      	ldr	r1, [pc, #32]	; (af6c <usbdc_init+0x58>)
    af4a:	47a0      	blx	r4

	return 0;
    af4c:	2000      	movs	r0, #0
}
    af4e:	bd38      	pop	{r3, r4, r5, pc}
    af50:	0000f2fe 	.word	0x0000f2fe
    af54:	00002009 	.word	0x00002009
    af58:	00001d11 	.word	0x00001d11
    af5c:	20007378 	.word	0x20007378
    af60:	0000b385 	.word	0x0000b385
    af64:	0000aaad 	.word	0x0000aaad
    af68:	00001d75 	.word	0x00001d75
    af6c:	0000ab89 	.word	0x0000ab89

0000af70 <usbdc_register_function>:
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
	list_insert_at_end(&usbdc.func_list, func);
    af70:	4601      	mov	r1, r0
    af72:	4b01      	ldr	r3, [pc, #4]	; (af78 <usbdc_register_function+0x8>)
    af74:	4801      	ldr	r0, [pc, #4]	; (af7c <usbdc_register_function+0xc>)
    af76:	4718      	bx	r3
    af78:	00002051 	.word	0x00002051
    af7c:	20007388 	.word	0x20007388

0000af80 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    af80:	b510      	push	{r4, lr}
	if (usbdc.state >= USBD_S_POWER) {
    af82:	4b0a      	ldr	r3, [pc, #40]	; (afac <usbdc_start+0x2c>)
    af84:	7e9c      	ldrb	r4, [r3, #26]
    af86:	b954      	cbnz	r4, af9e <usbdc_start+0x1e>
		return ERR_BUSY;
	}

	if (desces) {
    af88:	b160      	cbz	r0, afa4 <usbdc_start+0x24>
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    af8a:	6802      	ldr	r2, [r0, #0]
		usbdc.desces.ls_fs = desces;
    af8c:	6018      	str	r0, [r3, #0]
	usbdc.ctrl_size = desces->sod[7];
    af8e:	79d2      	ldrb	r2, [r2, #7]
    af90:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    af92:	2201      	movs	r2, #1
    af94:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    af96:	4b06      	ldr	r3, [pc, #24]	; (afb0 <usbdc_start+0x30>)
    af98:	4798      	blx	r3
	return ERR_NONE;
    af9a:	4620      	mov	r0, r4
    af9c:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    af9e:	f06f 0003 	mvn.w	r0, #3
    afa2:	bd10      	pop	{r4, pc}
		return ERR_BAD_DATA;
    afa4:	f06f 0008 	mvn.w	r0, #8
}
    afa8:	bd10      	pop	{r4, pc}
    afaa:	bf00      	nop
    afac:	20007378 	.word	0x20007378
    afb0:	00001d7d 	.word	0x00001d7d

0000afb4 <usbdc_attach>:
/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
	usb_d_attach();
    afb4:	4b00      	ldr	r3, [pc, #0]	; (afb8 <usbdc_attach+0x4>)
    afb6:	4718      	bx	r3
    afb8:	00001d85 	.word	0x00001d85

0000afbc <usbdc_get_ctrl_buffer>:
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
}
    afbc:	4b01      	ldr	r3, [pc, #4]	; (afc4 <usbdc_get_ctrl_buffer+0x8>)
    afbe:	6958      	ldr	r0, [r3, #20]
    afc0:	4770      	bx	lr
    afc2:	bf00      	nop
    afc4:	20007378 	.word	0x20007378

0000afc8 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    afc8:	4b03      	ldr	r3, [pc, #12]	; (afd8 <usbdc_get_state+0x10>)
    afca:	7e98      	ldrb	r0, [r3, #26]
    afcc:	f010 0f10 	tst.w	r0, #16
		return USBD_S_SUSPEND;
	}
	return usbdc.state;
}
    afd0:	bf18      	it	ne
    afd2:	2010      	movne	r0, #16
    afd4:	4770      	bx	lr
    afd6:	bf00      	nop
    afd8:	20007378 	.word	0x20007378

0000afdc <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    afdc:	b510      	push	{r4, lr}
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    afde:	4288      	cmp	r0, r1
    afe0:	d301      	bcc.n	afe6 <usb_find_desc+0xa>
		_desc_len_check();
    afe2:	2000      	movs	r0, #0
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
}
    afe4:	bd10      	pop	{r4, pc}
    afe6:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    afe8:	2b01      	cmp	r3, #1
    afea:	d9fa      	bls.n	afe2 <usb_find_desc+0x6>
		if (type == usb_desc_type(desc)) {
    afec:	7844      	ldrb	r4, [r0, #1]
    afee:	4294      	cmp	r4, r2
    aff0:	d0f8      	beq.n	afe4 <usb_find_desc+0x8>
	return (desc + usb_desc_len(desc));
    aff2:	4418      	add	r0, r3
    aff4:	e7f3      	b.n	afde <usb_find_desc+0x2>

0000aff6 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    aff6:	4288      	cmp	r0, r1
    aff8:	d301      	bcc.n	affe <usb_find_ep_desc+0x8>
		_desc_len_check();
    affa:	2000      	movs	r0, #0
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
}
    affc:	4770      	bx	lr
    affe:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    b000:	2b01      	cmp	r3, #1
    b002:	d9fa      	bls.n	affa <usb_find_ep_desc+0x4>
	return desc[1];
    b004:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    b006:	2a04      	cmp	r2, #4
    b008:	d0f7      	beq.n	affa <usb_find_ep_desc+0x4>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    b00a:	2a05      	cmp	r2, #5
    b00c:	d0f6      	beq.n	affc <usb_find_ep_desc+0x6>
	return (desc + usb_desc_len(desc));
    b00e:	4418      	add	r0, r3
    b010:	e7f1      	b.n	aff6 <usb_find_ep_desc>
	...

0000b014 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    b014:	b538      	push	{r3, r4, r5, lr}
    b016:	4615      	mov	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    b018:	4b0c      	ldr	r3, [pc, #48]	; (b04c <usb_find_cfg_desc+0x38>)
    b01a:	2202      	movs	r2, #2
{
    b01c:	460c      	mov	r4, r1
	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    b01e:	4798      	blx	r3
	if (!desc) {
    b020:	b978      	cbnz	r0, b042 <usb_find_cfg_desc+0x2e>
    b022:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
	}
	while (desc < eof) {
		_desc_len_check();
    b024:	7803      	ldrb	r3, [r0, #0]
    b026:	2b01      	cmp	r3, #1
    b028:	d90d      	bls.n	b046 <usb_find_cfg_desc+0x32>
		if (desc[1] != USB_DT_CONFIG) {
    b02a:	7843      	ldrb	r3, [r0, #1]
    b02c:	2b02      	cmp	r3, #2
    b02e:	d10a      	bne.n	b046 <usb_find_cfg_desc+0x32>
			break;
		}
		if (desc[5] == cfg_value) {
    b030:	7943      	ldrb	r3, [r0, #5]
    b032:	42ab      	cmp	r3, r5
    b034:	d008      	beq.n	b048 <usb_find_cfg_desc+0x34>
	return (ptr[0] + (ptr[1] << 8));
    b036:	78c2      	ldrb	r2, [r0, #3]
    b038:	7883      	ldrb	r3, [r0, #2]
    b03a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    b03e:	fa10 f083 	uxtah	r0, r0, r3
	while (desc < eof) {
    b042:	42a0      	cmp	r0, r4
    b044:	d3ee      	bcc.n	b024 <usb_find_cfg_desc+0x10>
		return NULL;
    b046:	2000      	movs	r0, #0
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
}
    b048:	bd38      	pop	{r3, r4, r5, pc}
    b04a:	bf00      	nop
    b04c:	0000afdd 	.word	0x0000afdd

0000b050 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    b050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    b052:	4f0a      	ldr	r7, [pc, #40]	; (b07c <usb_find_str_desc+0x2c>)
{
    b054:	460d      	mov	r5, r1
    b056:	4616      	mov	r6, r2
	for (i = 0; desc < eof;) {
    b058:	2400      	movs	r4, #0
    b05a:	42a8      	cmp	r0, r5
    b05c:	d301      	bcc.n	b062 <usb_find_str_desc+0x12>
				return desc;
			}
			i++;
			desc = usb_desc_next(desc);
		} else {
			return NULL;
    b05e:	2000      	movs	r0, #0
		}
	}
	return NULL;
}
    b060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    b062:	2203      	movs	r2, #3
    b064:	4629      	mov	r1, r5
    b066:	47b8      	blx	r7
		if (desc) {
    b068:	2800      	cmp	r0, #0
    b06a:	d0f9      	beq.n	b060 <usb_find_str_desc+0x10>
    b06c:	7803      	ldrb	r3, [r0, #0]
			_desc_len_check();
    b06e:	2b01      	cmp	r3, #1
    b070:	d9f5      	bls.n	b05e <usb_find_str_desc+0xe>
			if (i == str_index) {
    b072:	42b4      	cmp	r4, r6
    b074:	d0f4      	beq.n	b060 <usb_find_str_desc+0x10>
	return (desc + usb_desc_len(desc));
    b076:	4418      	add	r0, r3
    b078:	3401      	adds	r4, #1
    b07a:	e7ee      	b.n	b05a <usb_find_str_desc+0xa>
    b07c:	0000afdd 	.word	0x0000afdd

0000b080 <usb_device_cb_bulk_in>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool usb_device_cb_bulk_in(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    b080:	b508      	push	{r3, lr}
	/* Echo data. */
	cdcdf_acm_read((uint8_t *)usbd_cdc_buffer, sizeof(usbd_cdc_buffer));
    b082:	2140      	movs	r1, #64	; 0x40
    b084:	4b02      	ldr	r3, [pc, #8]	; (b090 <usb_device_cb_bulk_in+0x10>)
    b086:	4803      	ldr	r0, [pc, #12]	; (b094 <usb_device_cb_bulk_in+0x14>)
    b088:	4798      	blx	r3

	/* No error. */
	return false;
}
    b08a:	2000      	movs	r0, #0
    b08c:	bd08      	pop	{r3, pc}
    b08e:	bf00      	nop
    b090:	0000a9a9 	.word	0x0000a9a9
    b094:	20007398 	.word	0x20007398

0000b098 <usb_device_cb_bulk_out>:
{
    b098:	b508      	push	{r3, lr}
	cdcdf_acm_write((uint8_t *)usbd_cdc_buffer, count);
    b09a:	4611      	mov	r1, r2
    b09c:	4b02      	ldr	r3, [pc, #8]	; (b0a8 <usb_device_cb_bulk_out+0x10>)
    b09e:	4803      	ldr	r0, [pc, #12]	; (b0ac <usb_device_cb_bulk_out+0x14>)
    b0a0:	4798      	blx	r3
}
    b0a2:	2000      	movs	r0, #0
    b0a4:	bd08      	pop	{r3, pc}
    b0a6:	bf00      	nop
    b0a8:	0000a9d1 	.word	0x0000a9d1
    b0ac:	20007398 	.word	0x20007398

0000b0b0 <usb_device_cb_state_c>:

/**
 * \brief Callback invoked when Line State Change
 */
bool usb_device_cb_state_c(usb_cdc_control_signal_t state)
{
    b0b0:	b513      	push	{r0, r1, r4, lr}
	if (state.rs232.DTR) {
    b0b2:	07c3      	lsls	r3, r0, #31
{
    b0b4:	f8ad 0004 	strh.w	r0, [sp, #4]
	if (state.rs232.DTR) {
    b0b8:	d50a      	bpl.n	b0d0 <usb_device_cb_state_c+0x20>
		/* Callbacks must be registered after endpoint allocation */
		cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)usb_device_cb_bulk_out);
    b0ba:	4907      	ldr	r1, [pc, #28]	; (b0d8 <usb_device_cb_state_c+0x28>)
    b0bc:	4c07      	ldr	r4, [pc, #28]	; (b0dc <usb_device_cb_state_c+0x2c>)
    b0be:	2000      	movs	r0, #0
    b0c0:	47a0      	blx	r4
		cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)usb_device_cb_bulk_in);
    b0c2:	4907      	ldr	r1, [pc, #28]	; (b0e0 <usb_device_cb_state_c+0x30>)
    b0c4:	2001      	movs	r0, #1
    b0c6:	47a0      	blx	r4
		/* Start Rx */
		cdcdf_acm_read((uint8_t *)usbd_cdc_buffer, sizeof(usbd_cdc_buffer));
    b0c8:	2140      	movs	r1, #64	; 0x40
    b0ca:	4806      	ldr	r0, [pc, #24]	; (b0e4 <usb_device_cb_state_c+0x34>)
    b0cc:	4b06      	ldr	r3, [pc, #24]	; (b0e8 <usb_device_cb_state_c+0x38>)
    b0ce:	4798      	blx	r3
	}

	/* No error. */
	return false;
}
    b0d0:	2000      	movs	r0, #0
    b0d2:	b002      	add	sp, #8
    b0d4:	bd10      	pop	{r4, pc}
    b0d6:	bf00      	nop
    b0d8:	0000b099 	.word	0x0000b099
    b0dc:	0000a9f9 	.word	0x0000a9f9
    b0e0:	0000b081 	.word	0x0000b081
    b0e4:	20007398 	.word	0x20007398
    b0e8:	0000a9a9 	.word	0x0000a9a9

0000b0ec <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    b0ec:	b510      	push	{r4, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    b0ee:	4b06      	ldr	r3, [pc, #24]	; (b108 <cdc_device_acm_init+0x1c>)
    b0f0:	4806      	ldr	r0, [pc, #24]	; (b10c <cdc_device_acm_init+0x20>)
    b0f2:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    b0f4:	4b06      	ldr	r3, [pc, #24]	; (b110 <cdc_device_acm_init+0x24>)
    b0f6:	4798      	blx	r3

	usbdc_start(single_desc);
    b0f8:	4b06      	ldr	r3, [pc, #24]	; (b114 <cdc_device_acm_init+0x28>)
    b0fa:	4807      	ldr	r0, [pc, #28]	; (b118 <cdc_device_acm_init+0x2c>)
    b0fc:	4798      	blx	r3
	usbdc_attach();
    b0fe:	4b07      	ldr	r3, [pc, #28]	; (b11c <cdc_device_acm_init+0x30>)
}
    b100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	usbdc_attach();
    b104:	4718      	bx	r3
    b106:	bf00      	nop
    b108:	0000af15 	.word	0x0000af15
    b10c:	200073d8 	.word	0x200073d8
    b110:	0000a965 	.word	0x0000a965
    b114:	0000af81 	.word	0x0000af81
    b118:	2000001c 	.word	0x2000001c
    b11c:	0000afb5 	.word	0x0000afb5

0000b120 <usb_init>:
}

void usb_init(void)
{

	cdc_device_acm_init();
    b120:	4b00      	ldr	r3, [pc, #0]	; (b124 <usb_init+0x4>)
    b122:	4718      	bx	r3
    b124:	0000b0ed 	.word	0x0000b0ed

0000b128 <bash_spi_transfer.constprop.0>:
// Function:    bash_spi_transfer(unsigned char *tx, unsigned char *rx, int size)
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: rolls round the push-pull MOSI/MISO of the SPI bus for [size] bytes of 8-bits, MSB
// Returns:     Nothing
// *****************************************************************************************************************************************************************
static void inline bash_spi_transfer(unsigned char *tx, unsigned char *rx, int size)
    b128:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    b12c:	4e1e      	ldr	r6, [pc, #120]	; (b1a8 <bash_spi_transfer.constprop.0+0x80>)
    b12e:	4d1f      	ldr	r5, [pc, #124]	; (b1ac <bash_spi_transfer.constprop.0+0x84>)
{
	int count, loop;
	
	for (count = 0; count < size; count++) {
    b130:	f04f 0800 	mov.w	r8, #0
    b134:	f44f 4900 	mov.w	r9, #32768	; 0x8000
		rx[count] = 0;
		
		for (loop = 8; loop; loop--) {
			gpio_set_pin_level(PB12_SPI_MOSI, (tx[count] & (1 << (loop - 1))) ? 1 : 0);
    b138:	f106 0a04 	add.w	sl, r6, #4
		rx[count] = 0;
    b13c:	2300      	movs	r3, #0
    b13e:	7033      	strb	r3, [r6, #0]
		for (loop = 8; loop; loop--) {
    b140:	2708      	movs	r7, #8
			gpio_set_pin_level(PB12_SPI_MOSI, (tx[count] & (1 << (loop - 1))) ? 1 : 0);
    b142:	f818 300a 	ldrb.w	r3, [r8, sl]
    b146:	3f01      	subs	r7, #1
    b148:	413b      	asrs	r3, r7
	if (level) {
    b14a:	f013 0f01 	tst.w	r3, #1
    b14e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    b152:	bf14      	ite	ne
    b154:	f8c5 3098 	strne.w	r3, [r5, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    b158:	f8c5 3094 	streq.w	r3, [r5, #148]	; 0x94
	CRITICAL_SECTION_ENTER();
    b15c:	a801      	add	r0, sp, #4
    b15e:	f8c5 9094 	str.w	r9, [r5, #148]	; 0x94
    b162:	4b13      	ldr	r3, [pc, #76]	; (b1b0 <bash_spi_transfer.constprop.0+0x88>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    b164:	f8c5 9098 	str.w	r9, [r5, #152]	; 0x98
    b168:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    b16a:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    b16e:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    b172:	f8d5 4090 	ldr.w	r4, [r5, #144]	; 0x90
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    b176:	405c      	eors	r4, r3
    b178:	4014      	ands	r4, r2
    b17a:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    b17c:	a801      	add	r0, sp, #4
    b17e:	4b0d      	ldr	r3, [pc, #52]	; (b1b4 <bash_spi_transfer.constprop.0+0x8c>)
    b180:	4798      	blx	r3
    b182:	f3c4 3440 	ubfx	r4, r4, #13, #1
			gpio_set_pin_level(PB15_SPI_CLK, 0);
			gpio_set_pin_level(PB15_SPI_CLK, 1);
			
			rx[count] |= (gpio_get_pin_level(PB13_SPI_MISO) << (loop - 1));
    b186:	7833      	ldrb	r3, [r6, #0]
    b188:	40bc      	lsls	r4, r7
    b18a:	431c      	orrs	r4, r3
    b18c:	7034      	strb	r4, [r6, #0]
		for (loop = 8; loop; loop--) {
    b18e:	2f00      	cmp	r7, #0
    b190:	d1d7      	bne.n	b142 <bash_spi_transfer.constprop.0+0x1a>
	for (count = 0; count < size; count++) {
    b192:	f108 0801 	add.w	r8, r8, #1
    b196:	f1b8 0f03 	cmp.w	r8, #3
    b19a:	f106 0601 	add.w	r6, r6, #1
    b19e:	d1cd      	bne.n	b13c <bash_spi_transfer.constprop.0+0x14>
		}
	}
}
    b1a0:	b002      	add	sp, #8
    b1a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b1a6:	bf00      	nop
    b1a8:	20007418 	.word	0x20007418
    b1ac:	41008000 	.word	0x41008000
    b1b0:	000011d1 	.word	0x000011d1
    b1b4:	000011df 	.word	0x000011df

0000b1b8 <EEprom_settings>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: when requiring EEprom configuration data to be read or written to/from the non-volatile area, this facilitates the [NV] access
// Returns:     Nothing
// *****************************************************************************************************************************************************************
int EEprom_settings(unsigned char *data, unsigned int size, unsigned char write_notread)
{
    b1b8:	b410      	push	{r4}
    b1ba:	460b      	mov	r3, r1
	/* If we have a write flag set, then write the setting configuration overlay image into NV ram */
	if (write_notread) {
    b1bc:	b13a      	cbz	r2, b1ce <EEprom_settings+0x16>
		return flash_write(&FLASH_0, 256 * 1024, data, size);
    b1be:	4602      	mov	r2, r0
    b1c0:	4c06      	ldr	r4, [pc, #24]	; (b1dc <EEprom_settings+0x24>)
    b1c2:	4807      	ldr	r0, [pc, #28]	; (b1e0 <EEprom_settings+0x28>)
    b1c4:	f44f 2180 	mov.w	r1, #262144	; 0x40000
	}
	
	/* else, if we have a read flag set, then read the setting configuration overlay image from the NV ram into the "data" pointer"*/
	return flash_read(&FLASH_0, 256 * 1024, data, size);
    b1c8:	46a4      	mov	ip, r4
}
    b1ca:	bc10      	pop	{r4}
	return flash_read(&FLASH_0, 256 * 1024, data, size);
    b1cc:	4760      	bx	ip
    b1ce:	4602      	mov	r2, r0
    b1d0:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    b1d4:	4802      	ldr	r0, [pc, #8]	; (b1e0 <EEprom_settings+0x28>)
    b1d6:	4c03      	ldr	r4, [pc, #12]	; (b1e4 <EEprom_settings+0x2c>)
    b1d8:	e7f6      	b.n	b1c8 <EEprom_settings+0x10>
    b1da:	bf00      	nop
    b1dc:	0000136d 	.word	0x0000136d
    b1e0:	20007428 	.word	0x20007428
    b1e4:	000012fd 	.word	0x000012fd

0000b1e8 <checkKSZreg>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: check a value in an SPI register of the KSZ-Micrel Ethernet SWITCH
// Returns:     does the register value match the check value? True: False
// *****************************************************************************************************************************************************************
bool checkKSZreg(uint16_t reg, unsigned char verify)
{
    b1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Lower the nCS line for this SPI device */	
	gpio_set_pin_level(PB07_SPInCS_KSZ8974, 0);	
	
    /* Setup the 3 control bytes to perform a register read operation */		
	command_dataw[0] = 0x40 + REG_SPI_READ + (unsigned char)(reg >> 7);
    b1ea:	4c0b      	ldr	r4, [pc, #44]	; (b218 <checkKSZreg+0x30>)
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    b1ec:	4d0b      	ldr	r5, [pc, #44]	; (b21c <checkKSZreg+0x34>)
    b1ee:	09c3      	lsrs	r3, r0, #7
    b1f0:	2680      	movs	r6, #128	; 0x80
    b1f2:	3360      	adds	r3, #96	; 0x60
    b1f4:	f8c5 6094 	str.w	r6, [r5, #148]	; 0x94
    b1f8:	7123      	strb	r3, [r4, #4]
	command_dataw[1] = (unsigned char)(reg & 0x7F) << 1;
	command_dataw[2] = 0x00;
    b1fa:	2300      	movs	r3, #0
	command_dataw[1] = (unsigned char)(reg & 0x7F) << 1;
    b1fc:	0040      	lsls	r0, r0, #1
	command_dataw[2] = 0x00;
    b1fe:	71a3      	strb	r3, [r4, #6]
	
	/* Perform the actual 3-byte push/pull SPI operation */
	bash_spi_transfer(command_dataw, command_datar, 3);
    b200:	4b07      	ldr	r3, [pc, #28]	; (b220 <checkKSZreg+0x38>)
	command_dataw[1] = (unsigned char)(reg & 0x7F) << 1;
    b202:	7160      	strb	r0, [r4, #5]
{
    b204:	460f      	mov	r7, r1
	bash_spi_transfer(command_dataw, command_datar, 3);
    b206:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    b208:	f8c5 6098 	str.w	r6, [r5, #152]	; 0x98

	/* Raise the nCS line for this SPI device */	
	gpio_set_pin_level(PB07_SPInCS_KSZ8974, 1);
	
	/* Check to see if the read data byte from the SPI end-point register matches the "verify" parameter and return the result as a boolean */
	return (command_datar[2] == verify) ? 1 : 0;
    b20c:	78a0      	ldrb	r0, [r4, #2]
}
    b20e:	1bc3      	subs	r3, r0, r7
    b210:	4258      	negs	r0, r3
    b212:	4158      	adcs	r0, r3
    b214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b216:	bf00      	nop
    b218:	20007418 	.word	0x20007418
    b21c:	41008000 	.word	0x41008000
    b220:	0000b129 	.word	0x0000b129

0000b224 <readKSZreg>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: read an SPI register of the KSZ-Micrel Ethernet SWITCH
// Returns:     value of register of KSZ Ethernet SWITCH SPI read
// *****************************************************************************************************************************************************************
unsigned char readKSZreg(uint16_t reg)
{
    b224:	b570      	push	{r4, r5, r6, lr}
	/* Lower the nCS line for this SPI device */	
	gpio_set_pin_level(PB07_SPInCS_KSZ8974, 0);
	
	/* Setup the 3 control bytes to perform a register read operation */
	command_dataw[0] = 0x40 + REG_SPI_READ + (unsigned char)(reg >> 7);
    b226:	09c3      	lsrs	r3, r0, #7
    b228:	4c08      	ldr	r4, [pc, #32]	; (b24c <readKSZreg+0x28>)
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    b22a:	4d09      	ldr	r5, [pc, #36]	; (b250 <readKSZreg+0x2c>)
    b22c:	2680      	movs	r6, #128	; 0x80
    b22e:	3360      	adds	r3, #96	; 0x60
    b230:	f8c5 6094 	str.w	r6, [r5, #148]	; 0x94
    b234:	7123      	strb	r3, [r4, #4]
	command_dataw[1] = (unsigned char)(reg & 0x7F) << 1;
	command_dataw[2] = 0x00;
    b236:	2300      	movs	r3, #0
	command_dataw[1] = (unsigned char)(reg & 0x7F) << 1;
    b238:	0040      	lsls	r0, r0, #1
	command_dataw[2] = 0x00;
    b23a:	71a3      	strb	r3, [r4, #6]
	
	/* Perform the actual 3-byte push/pull SPI operation */
	bash_spi_transfer(command_dataw, command_datar, 3);
    b23c:	4b05      	ldr	r3, [pc, #20]	; (b254 <readKSZreg+0x30>)
	command_dataw[1] = (unsigned char)(reg & 0x7F) << 1;
    b23e:	7160      	strb	r0, [r4, #5]
	bash_spi_transfer(command_dataw, command_datar, 3);
    b240:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    b242:	f8c5 6098 	str.w	r6, [r5, #152]	; 0x98
	/* Raise the nCS line for this SPI device */
	gpio_set_pin_level(PB07_SPInCS_KSZ8974, 1);
	
	/* Just return the actual far-end register data value */
	return (command_datar[2]);
}
    b246:	78a0      	ldrb	r0, [r4, #2]
    b248:	bd70      	pop	{r4, r5, r6, pc}
    b24a:	bf00      	nop
    b24c:	20007418 	.word	0x20007418
    b250:	41008000 	.word	0x41008000
    b254:	0000b129 	.word	0x0000b129

0000b258 <writeKSZreg>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    b258:	4b14      	ldr	r3, [pc, #80]	; (b2ac <writeKSZreg+0x54>)
    b25a:	2280      	movs	r2, #128	; 0x80
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: write to a SPI register of the KSZ-Micrel Ethernet SWITCH
// Returns:     nothing
// *****************************************************************************************************************************************************************
void writeKSZreg(uint16_t reg, unsigned char value)
{
    b25c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b25e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			
	/* Lower the nCS line for this SPI device */
	gpio_set_pin_level(PB07_SPInCS_KSZ8974, 0);
	
	/* Setup the 3 control bytes to perform a register write operation */
	command_dataw[0] = 0x40 + REG_SPI_WRITE + (unsigned char)(reg >> 7);
    b262:	09c4      	lsrs	r4, r0, #7
    b264:	4a12      	ldr	r2, [pc, #72]	; (b2b0 <writeKSZreg+0x58>)
    b266:	3440      	adds	r4, #64	; 0x40
	command_dataw[1] = (unsigned char)(reg & 0x7F) << 1;
    b268:	0040      	lsls	r0, r0, #1
	command_dataw[0] = 0x40 + REG_SPI_WRITE + (unsigned char)(reg >> 7);
    b26a:	7114      	strb	r4, [r2, #4]
	command_dataw[1] = (unsigned char)(reg & 0x7F) << 1;
    b26c:	7150      	strb	r0, [r2, #5]
	command_dataw[2] = value;
    b26e:	7191      	strb	r1, [r2, #6]
	
	for (count = 0; count < 3; count++) {
    b270:	2000      	movs	r0, #0
		for (loop = 8; loop; loop--) {
			gpio_set_pin_level(PB12_SPI_MOSI, (command_dataw[count] & (1 << (loop - 1))) ? 1 : 0);
    b272:	3204      	adds	r2, #4
    b274:	f44f 5480 	mov.w	r4, #4096	; 0x1000
    b278:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    b27c:	5c86      	ldrb	r6, [r0, r2]
    b27e:	2108      	movs	r1, #8
    b280:	3901      	subs	r1, #1
    b282:	fa46 f701 	asr.w	r7, r6, r1
	if (level) {
    b286:	07ff      	lsls	r7, r7, #31
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    b288:	bf4c      	ite	mi
    b28a:	f8c3 4098 	strmi.w	r4, [r3, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    b28e:	f8c3 4094 	strpl.w	r4, [r3, #148]	; 0x94
    b292:	f8c3 5094 	str.w	r5, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    b296:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
		for (loop = 8; loop; loop--) {
    b29a:	2900      	cmp	r1, #0
    b29c:	d1f0      	bne.n	b280 <writeKSZreg+0x28>
	for (count = 0; count < 3; count++) {
    b29e:	3001      	adds	r0, #1
    b2a0:	2803      	cmp	r0, #3
    b2a2:	d1eb      	bne.n	b27c <writeKSZreg+0x24>
    b2a4:	2280      	movs	r2, #128	; 0x80
    b2a6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    b2aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b2ac:	41008000 	.word	0x41008000
    b2b0:	20007418 	.word	0x20007418

0000b2b4 <application_appcall>:
// Returns:     Nothing (NULL)
// *****************************************************************************************************************************************************************
void application_appcall(void)
{
	/* This is a stub function. It should not ever get called */
	xprintf("MultiSense application_appcall()\r\n");
    b2b4:	4801      	ldr	r0, [pc, #4]	; (b2bc <application_appcall+0x8>)
    b2b6:	4b02      	ldr	r3, [pc, #8]	; (b2c0 <application_appcall+0xc>)
    b2b8:	4718      	bx	r3
    b2ba:	bf00      	nop
    b2bc:	0000f314 	.word	0x0000f314
    b2c0:	00000395 	.word	0x00000395

0000b2c4 <uip_log>:
// Returns:     Nothing (NULL)
// *****************************************************************************************************************************************************************
void uip_log(char *msg)
{
	/* Print out the messages from the uIP stack */
	xprintf("MultiSense uIP log --> [%s]\r\n", msg);
    b2c4:	4601      	mov	r1, r0
    b2c6:	4b01      	ldr	r3, [pc, #4]	; (b2cc <uip_log+0x8>)
    b2c8:	4801      	ldr	r0, [pc, #4]	; (b2d0 <uip_log+0xc>)
    b2ca:	4718      	bx	r3
    b2cc:	00000395 	.word	0x00000395
    b2d0:	0000f373 	.word	0x0000f373

0000b2d4 <__libc_init_array>:
    b2d4:	b570      	push	{r4, r5, r6, lr}
    b2d6:	4e0d      	ldr	r6, [pc, #52]	; (b30c <__libc_init_array+0x38>)
    b2d8:	4c0d      	ldr	r4, [pc, #52]	; (b310 <__libc_init_array+0x3c>)
    b2da:	1ba4      	subs	r4, r4, r6
    b2dc:	10a4      	asrs	r4, r4, #2
    b2de:	2500      	movs	r5, #0
    b2e0:	42a5      	cmp	r5, r4
    b2e2:	d109      	bne.n	b2f8 <__libc_init_array+0x24>
    b2e4:	4e0b      	ldr	r6, [pc, #44]	; (b314 <__libc_init_array+0x40>)
    b2e6:	4c0c      	ldr	r4, [pc, #48]	; (b318 <__libc_init_array+0x44>)
    b2e8:	f004 f91e 	bl	f528 <_init>
    b2ec:	1ba4      	subs	r4, r4, r6
    b2ee:	10a4      	asrs	r4, r4, #2
    b2f0:	2500      	movs	r5, #0
    b2f2:	42a5      	cmp	r5, r4
    b2f4:	d105      	bne.n	b302 <__libc_init_array+0x2e>
    b2f6:	bd70      	pop	{r4, r5, r6, pc}
    b2f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    b2fc:	4798      	blx	r3
    b2fe:	3501      	adds	r5, #1
    b300:	e7ee      	b.n	b2e0 <__libc_init_array+0xc>
    b302:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    b306:	4798      	blx	r3
    b308:	3501      	adds	r5, #1
    b30a:	e7f2      	b.n	b2f2 <__libc_init_array+0x1e>
    b30c:	0000f534 	.word	0x0000f534
    b310:	0000f534 	.word	0x0000f534
    b314:	0000f534 	.word	0x0000f534
    b318:	0000f538 	.word	0x0000f538

0000b31c <memcmp>:
    b31c:	b510      	push	{r4, lr}
    b31e:	3901      	subs	r1, #1
    b320:	4402      	add	r2, r0
    b322:	4290      	cmp	r0, r2
    b324:	d101      	bne.n	b32a <memcmp+0xe>
    b326:	2000      	movs	r0, #0
    b328:	bd10      	pop	{r4, pc}
    b32a:	f810 3b01 	ldrb.w	r3, [r0], #1
    b32e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    b332:	42a3      	cmp	r3, r4
    b334:	d0f5      	beq.n	b322 <memcmp+0x6>
    b336:	1b18      	subs	r0, r3, r4
    b338:	bd10      	pop	{r4, pc}

0000b33a <memcpy>:
    b33a:	b510      	push	{r4, lr}
    b33c:	1e43      	subs	r3, r0, #1
    b33e:	440a      	add	r2, r1
    b340:	4291      	cmp	r1, r2
    b342:	d100      	bne.n	b346 <memcpy+0xc>
    b344:	bd10      	pop	{r4, pc}
    b346:	f811 4b01 	ldrb.w	r4, [r1], #1
    b34a:	f803 4f01 	strb.w	r4, [r3, #1]!
    b34e:	e7f7      	b.n	b340 <memcpy+0x6>

0000b350 <memmove>:
    b350:	4288      	cmp	r0, r1
    b352:	b510      	push	{r4, lr}
    b354:	eb01 0302 	add.w	r3, r1, r2
    b358:	d803      	bhi.n	b362 <memmove+0x12>
    b35a:	1e42      	subs	r2, r0, #1
    b35c:	4299      	cmp	r1, r3
    b35e:	d10c      	bne.n	b37a <memmove+0x2a>
    b360:	bd10      	pop	{r4, pc}
    b362:	4298      	cmp	r0, r3
    b364:	d2f9      	bcs.n	b35a <memmove+0xa>
    b366:	1881      	adds	r1, r0, r2
    b368:	1ad2      	subs	r2, r2, r3
    b36a:	42d3      	cmn	r3, r2
    b36c:	d100      	bne.n	b370 <memmove+0x20>
    b36e:	bd10      	pop	{r4, pc}
    b370:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    b374:	f801 4d01 	strb.w	r4, [r1, #-1]!
    b378:	e7f7      	b.n	b36a <memmove+0x1a>
    b37a:	f811 4b01 	ldrb.w	r4, [r1], #1
    b37e:	f802 4f01 	strb.w	r4, [r2, #1]!
    b382:	e7eb      	b.n	b35c <memmove+0xc>

0000b384 <memset>:
    b384:	4402      	add	r2, r0
    b386:	4603      	mov	r3, r0
    b388:	4293      	cmp	r3, r2
    b38a:	d100      	bne.n	b38e <memset+0xa>
    b38c:	4770      	bx	lr
    b38e:	f803 1b01 	strb.w	r1, [r3], #1
    b392:	e7f9      	b.n	b388 <memset+0x4>

0000b394 <siscanf>:
    b394:	b40e      	push	{r1, r2, r3}
    b396:	b530      	push	{r4, r5, lr}
    b398:	b09c      	sub	sp, #112	; 0x70
    b39a:	ac1f      	add	r4, sp, #124	; 0x7c
    b39c:	f44f 7201 	mov.w	r2, #516	; 0x204
    b3a0:	f854 5b04 	ldr.w	r5, [r4], #4
    b3a4:	f8ad 2014 	strh.w	r2, [sp, #20]
    b3a8:	9002      	str	r0, [sp, #8]
    b3aa:	9006      	str	r0, [sp, #24]
    b3ac:	f000 f81e 	bl	b3ec <strlen>
    b3b0:	4b0b      	ldr	r3, [pc, #44]	; (b3e0 <siscanf+0x4c>)
    b3b2:	9003      	str	r0, [sp, #12]
    b3b4:	9007      	str	r0, [sp, #28]
    b3b6:	930b      	str	r3, [sp, #44]	; 0x2c
    b3b8:	480a      	ldr	r0, [pc, #40]	; (b3e4 <siscanf+0x50>)
    b3ba:	9401      	str	r4, [sp, #4]
    b3bc:	2300      	movs	r3, #0
    b3be:	930f      	str	r3, [sp, #60]	; 0x3c
    b3c0:	9314      	str	r3, [sp, #80]	; 0x50
    b3c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b3c6:	f8ad 3016 	strh.w	r3, [sp, #22]
    b3ca:	462a      	mov	r2, r5
    b3cc:	4623      	mov	r3, r4
    b3ce:	a902      	add	r1, sp, #8
    b3d0:	6800      	ldr	r0, [r0, #0]
    b3d2:	f000 f8e1 	bl	b598 <__ssvfiscanf_r>
    b3d6:	b01c      	add	sp, #112	; 0x70
    b3d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    b3dc:	b003      	add	sp, #12
    b3de:	4770      	bx	lr
    b3e0:	0000b3e9 	.word	0x0000b3e9
    b3e4:	200000e0 	.word	0x200000e0

0000b3e8 <__seofread>:
    b3e8:	2000      	movs	r0, #0
    b3ea:	4770      	bx	lr

0000b3ec <strlen>:
    b3ec:	4603      	mov	r3, r0
    b3ee:	f813 2b01 	ldrb.w	r2, [r3], #1
    b3f2:	2a00      	cmp	r2, #0
    b3f4:	d1fb      	bne.n	b3ee <strlen+0x2>
    b3f6:	1a18      	subs	r0, r3, r0
    b3f8:	3801      	subs	r0, #1
    b3fa:	4770      	bx	lr

0000b3fc <strncpy>:
    b3fc:	b570      	push	{r4, r5, r6, lr}
    b3fe:	4604      	mov	r4, r0
    b400:	b902      	cbnz	r2, b404 <strncpy+0x8>
    b402:	bd70      	pop	{r4, r5, r6, pc}
    b404:	4623      	mov	r3, r4
    b406:	f811 5b01 	ldrb.w	r5, [r1], #1
    b40a:	f803 5b01 	strb.w	r5, [r3], #1
    b40e:	1e56      	subs	r6, r2, #1
    b410:	b91d      	cbnz	r5, b41a <strncpy+0x1e>
    b412:	4414      	add	r4, r2
    b414:	42a3      	cmp	r3, r4
    b416:	d103      	bne.n	b420 <strncpy+0x24>
    b418:	bd70      	pop	{r4, r5, r6, pc}
    b41a:	461c      	mov	r4, r3
    b41c:	4632      	mov	r2, r6
    b41e:	e7ef      	b.n	b400 <strncpy+0x4>
    b420:	f803 5b01 	strb.w	r5, [r3], #1
    b424:	e7f6      	b.n	b414 <strncpy+0x18>
	...

0000b428 <_malloc_r>:
    b428:	b570      	push	{r4, r5, r6, lr}
    b42a:	1ccd      	adds	r5, r1, #3
    b42c:	f025 0503 	bic.w	r5, r5, #3
    b430:	3508      	adds	r5, #8
    b432:	2d0c      	cmp	r5, #12
    b434:	bf38      	it	cc
    b436:	250c      	movcc	r5, #12
    b438:	2d00      	cmp	r5, #0
    b43a:	4606      	mov	r6, r0
    b43c:	db01      	blt.n	b442 <_malloc_r+0x1a>
    b43e:	42a9      	cmp	r1, r5
    b440:	d903      	bls.n	b44a <_malloc_r+0x22>
    b442:	230c      	movs	r3, #12
    b444:	6033      	str	r3, [r6, #0]
    b446:	2000      	movs	r0, #0
    b448:	bd70      	pop	{r4, r5, r6, pc}
    b44a:	f000 fd61 	bl	bf10 <__malloc_lock>
    b44e:	4a23      	ldr	r2, [pc, #140]	; (b4dc <_malloc_r+0xb4>)
    b450:	6814      	ldr	r4, [r2, #0]
    b452:	4621      	mov	r1, r4
    b454:	b991      	cbnz	r1, b47c <_malloc_r+0x54>
    b456:	4c22      	ldr	r4, [pc, #136]	; (b4e0 <_malloc_r+0xb8>)
    b458:	6823      	ldr	r3, [r4, #0]
    b45a:	b91b      	cbnz	r3, b464 <_malloc_r+0x3c>
    b45c:	4630      	mov	r0, r6
    b45e:	f000 fb47 	bl	baf0 <_sbrk_r>
    b462:	6020      	str	r0, [r4, #0]
    b464:	4629      	mov	r1, r5
    b466:	4630      	mov	r0, r6
    b468:	f000 fb42 	bl	baf0 <_sbrk_r>
    b46c:	1c43      	adds	r3, r0, #1
    b46e:	d126      	bne.n	b4be <_malloc_r+0x96>
    b470:	230c      	movs	r3, #12
    b472:	6033      	str	r3, [r6, #0]
    b474:	4630      	mov	r0, r6
    b476:	f000 fd4c 	bl	bf12 <__malloc_unlock>
    b47a:	e7e4      	b.n	b446 <_malloc_r+0x1e>
    b47c:	680b      	ldr	r3, [r1, #0]
    b47e:	1b5b      	subs	r3, r3, r5
    b480:	d41a      	bmi.n	b4b8 <_malloc_r+0x90>
    b482:	2b0b      	cmp	r3, #11
    b484:	d90f      	bls.n	b4a6 <_malloc_r+0x7e>
    b486:	600b      	str	r3, [r1, #0]
    b488:	50cd      	str	r5, [r1, r3]
    b48a:	18cc      	adds	r4, r1, r3
    b48c:	4630      	mov	r0, r6
    b48e:	f000 fd40 	bl	bf12 <__malloc_unlock>
    b492:	f104 000b 	add.w	r0, r4, #11
    b496:	1d23      	adds	r3, r4, #4
    b498:	f020 0007 	bic.w	r0, r0, #7
    b49c:	1ac3      	subs	r3, r0, r3
    b49e:	d01b      	beq.n	b4d8 <_malloc_r+0xb0>
    b4a0:	425a      	negs	r2, r3
    b4a2:	50e2      	str	r2, [r4, r3]
    b4a4:	bd70      	pop	{r4, r5, r6, pc}
    b4a6:	428c      	cmp	r4, r1
    b4a8:	bf0d      	iteet	eq
    b4aa:	6863      	ldreq	r3, [r4, #4]
    b4ac:	684b      	ldrne	r3, [r1, #4]
    b4ae:	6063      	strne	r3, [r4, #4]
    b4b0:	6013      	streq	r3, [r2, #0]
    b4b2:	bf18      	it	ne
    b4b4:	460c      	movne	r4, r1
    b4b6:	e7e9      	b.n	b48c <_malloc_r+0x64>
    b4b8:	460c      	mov	r4, r1
    b4ba:	6849      	ldr	r1, [r1, #4]
    b4bc:	e7ca      	b.n	b454 <_malloc_r+0x2c>
    b4be:	1cc4      	adds	r4, r0, #3
    b4c0:	f024 0403 	bic.w	r4, r4, #3
    b4c4:	42a0      	cmp	r0, r4
    b4c6:	d005      	beq.n	b4d4 <_malloc_r+0xac>
    b4c8:	1a21      	subs	r1, r4, r0
    b4ca:	4630      	mov	r0, r6
    b4cc:	f000 fb10 	bl	baf0 <_sbrk_r>
    b4d0:	3001      	adds	r0, #1
    b4d2:	d0cd      	beq.n	b470 <_malloc_r+0x48>
    b4d4:	6025      	str	r5, [r4, #0]
    b4d6:	e7d9      	b.n	b48c <_malloc_r+0x64>
    b4d8:	bd70      	pop	{r4, r5, r6, pc}
    b4da:	bf00      	nop
    b4dc:	20007420 	.word	0x20007420
    b4e0:	20007424 	.word	0x20007424

0000b4e4 <_sungetc_r>:
    b4e4:	b538      	push	{r3, r4, r5, lr}
    b4e6:	1c4b      	adds	r3, r1, #1
    b4e8:	4614      	mov	r4, r2
    b4ea:	d103      	bne.n	b4f4 <_sungetc_r+0x10>
    b4ec:	f04f 35ff 	mov.w	r5, #4294967295
    b4f0:	4628      	mov	r0, r5
    b4f2:	bd38      	pop	{r3, r4, r5, pc}
    b4f4:	8993      	ldrh	r3, [r2, #12]
    b4f6:	f023 0320 	bic.w	r3, r3, #32
    b4fa:	8193      	strh	r3, [r2, #12]
    b4fc:	6b53      	ldr	r3, [r2, #52]	; 0x34
    b4fe:	6852      	ldr	r2, [r2, #4]
    b500:	b2cd      	uxtb	r5, r1
    b502:	b18b      	cbz	r3, b528 <_sungetc_r+0x44>
    b504:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    b506:	429a      	cmp	r2, r3
    b508:	da08      	bge.n	b51c <_sungetc_r+0x38>
    b50a:	6823      	ldr	r3, [r4, #0]
    b50c:	1e5a      	subs	r2, r3, #1
    b50e:	6022      	str	r2, [r4, #0]
    b510:	f803 5c01 	strb.w	r5, [r3, #-1]
    b514:	6863      	ldr	r3, [r4, #4]
    b516:	3301      	adds	r3, #1
    b518:	6063      	str	r3, [r4, #4]
    b51a:	e7e9      	b.n	b4f0 <_sungetc_r+0xc>
    b51c:	4621      	mov	r1, r4
    b51e:	f000 fc49 	bl	bdb4 <__submore>
    b522:	2800      	cmp	r0, #0
    b524:	d0f1      	beq.n	b50a <_sungetc_r+0x26>
    b526:	e7e1      	b.n	b4ec <_sungetc_r+0x8>
    b528:	6921      	ldr	r1, [r4, #16]
    b52a:	6823      	ldr	r3, [r4, #0]
    b52c:	b151      	cbz	r1, b544 <_sungetc_r+0x60>
    b52e:	4299      	cmp	r1, r3
    b530:	d208      	bcs.n	b544 <_sungetc_r+0x60>
    b532:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    b536:	428d      	cmp	r5, r1
    b538:	d104      	bne.n	b544 <_sungetc_r+0x60>
    b53a:	3b01      	subs	r3, #1
    b53c:	3201      	adds	r2, #1
    b53e:	6023      	str	r3, [r4, #0]
    b540:	6062      	str	r2, [r4, #4]
    b542:	e7d5      	b.n	b4f0 <_sungetc_r+0xc>
    b544:	63e3      	str	r3, [r4, #60]	; 0x3c
    b546:	f104 0344 	add.w	r3, r4, #68	; 0x44
    b54a:	6363      	str	r3, [r4, #52]	; 0x34
    b54c:	2303      	movs	r3, #3
    b54e:	63a3      	str	r3, [r4, #56]	; 0x38
    b550:	4623      	mov	r3, r4
    b552:	6422      	str	r2, [r4, #64]	; 0x40
    b554:	f803 5f46 	strb.w	r5, [r3, #70]!
    b558:	6023      	str	r3, [r4, #0]
    b55a:	2301      	movs	r3, #1
    b55c:	e7dc      	b.n	b518 <_sungetc_r+0x34>

0000b55e <__ssrefill_r>:
    b55e:	b510      	push	{r4, lr}
    b560:	460c      	mov	r4, r1
    b562:	6b49      	ldr	r1, [r1, #52]	; 0x34
    b564:	b169      	cbz	r1, b582 <__ssrefill_r+0x24>
    b566:	f104 0344 	add.w	r3, r4, #68	; 0x44
    b56a:	4299      	cmp	r1, r3
    b56c:	d001      	beq.n	b572 <__ssrefill_r+0x14>
    b56e:	f000 fcd1 	bl	bf14 <_free_r>
    b572:	6c23      	ldr	r3, [r4, #64]	; 0x40
    b574:	6063      	str	r3, [r4, #4]
    b576:	2000      	movs	r0, #0
    b578:	6360      	str	r0, [r4, #52]	; 0x34
    b57a:	b113      	cbz	r3, b582 <__ssrefill_r+0x24>
    b57c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    b57e:	6023      	str	r3, [r4, #0]
    b580:	bd10      	pop	{r4, pc}
    b582:	6923      	ldr	r3, [r4, #16]
    b584:	6023      	str	r3, [r4, #0]
    b586:	2300      	movs	r3, #0
    b588:	6063      	str	r3, [r4, #4]
    b58a:	89a3      	ldrh	r3, [r4, #12]
    b58c:	f043 0320 	orr.w	r3, r3, #32
    b590:	81a3      	strh	r3, [r4, #12]
    b592:	f04f 30ff 	mov.w	r0, #4294967295
    b596:	bd10      	pop	{r4, pc}

0000b598 <__ssvfiscanf_r>:
    b598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b59c:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
    b5a0:	f10d 080c 	add.w	r8, sp, #12
    b5a4:	9301      	str	r3, [sp, #4]
    b5a6:	2300      	movs	r3, #0
    b5a8:	9346      	str	r3, [sp, #280]	; 0x118
    b5aa:	9347      	str	r3, [sp, #284]	; 0x11c
    b5ac:	4ba0      	ldr	r3, [pc, #640]	; (b830 <__ssvfiscanf_r+0x298>)
    b5ae:	93a2      	str	r3, [sp, #648]	; 0x288
    b5b0:	f8df 9284 	ldr.w	r9, [pc, #644]	; b838 <__ssvfiscanf_r+0x2a0>
    b5b4:	4b9f      	ldr	r3, [pc, #636]	; (b834 <__ssvfiscanf_r+0x29c>)
    b5b6:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
    b5ba:	4606      	mov	r6, r0
    b5bc:	460c      	mov	r4, r1
    b5be:	93a3      	str	r3, [sp, #652]	; 0x28c
    b5c0:	4692      	mov	sl, r2
    b5c2:	270a      	movs	r7, #10
    b5c4:	f89a 3000 	ldrb.w	r3, [sl]
    b5c8:	2b00      	cmp	r3, #0
    b5ca:	f000 812f 	beq.w	b82c <__ssvfiscanf_r+0x294>
    b5ce:	f000 fc2f 	bl	be30 <__locale_ctype_ptr>
    b5d2:	f89a b000 	ldrb.w	fp, [sl]
    b5d6:	4458      	add	r0, fp
    b5d8:	7843      	ldrb	r3, [r0, #1]
    b5da:	f013 0308 	ands.w	r3, r3, #8
    b5de:	d143      	bne.n	b668 <__ssvfiscanf_r+0xd0>
    b5e0:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
    b5e4:	f10a 0501 	add.w	r5, sl, #1
    b5e8:	f040 8099 	bne.w	b71e <__ssvfiscanf_r+0x186>
    b5ec:	9345      	str	r3, [sp, #276]	; 0x114
    b5ee:	9343      	str	r3, [sp, #268]	; 0x10c
    b5f0:	f89a 3001 	ldrb.w	r3, [sl, #1]
    b5f4:	2b2a      	cmp	r3, #42	; 0x2a
    b5f6:	d103      	bne.n	b600 <__ssvfiscanf_r+0x68>
    b5f8:	2310      	movs	r3, #16
    b5fa:	9343      	str	r3, [sp, #268]	; 0x10c
    b5fc:	f10a 0502 	add.w	r5, sl, #2
    b600:	7829      	ldrb	r1, [r5, #0]
    b602:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
    b606:	2a09      	cmp	r2, #9
    b608:	46aa      	mov	sl, r5
    b60a:	f105 0501 	add.w	r5, r5, #1
    b60e:	d941      	bls.n	b694 <__ssvfiscanf_r+0xfc>
    b610:	2203      	movs	r2, #3
    b612:	4889      	ldr	r0, [pc, #548]	; (b838 <__ssvfiscanf_r+0x2a0>)
    b614:	f000 fc2c 	bl	be70 <memchr>
    b618:	b138      	cbz	r0, b62a <__ssvfiscanf_r+0x92>
    b61a:	eba0 0309 	sub.w	r3, r0, r9
    b61e:	2001      	movs	r0, #1
    b620:	4098      	lsls	r0, r3
    b622:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    b624:	4318      	orrs	r0, r3
    b626:	9043      	str	r0, [sp, #268]	; 0x10c
    b628:	46aa      	mov	sl, r5
    b62a:	f89a 3000 	ldrb.w	r3, [sl]
    b62e:	2b67      	cmp	r3, #103	; 0x67
    b630:	f10a 0501 	add.w	r5, sl, #1
    b634:	d84a      	bhi.n	b6cc <__ssvfiscanf_r+0x134>
    b636:	2b65      	cmp	r3, #101	; 0x65
    b638:	f080 80b7 	bcs.w	b7aa <__ssvfiscanf_r+0x212>
    b63c:	2b47      	cmp	r3, #71	; 0x47
    b63e:	d82f      	bhi.n	b6a0 <__ssvfiscanf_r+0x108>
    b640:	2b45      	cmp	r3, #69	; 0x45
    b642:	f080 80b2 	bcs.w	b7aa <__ssvfiscanf_r+0x212>
    b646:	2b00      	cmp	r3, #0
    b648:	f000 8082 	beq.w	b750 <__ssvfiscanf_r+0x1b8>
    b64c:	2b25      	cmp	r3, #37	; 0x25
    b64e:	d066      	beq.n	b71e <__ssvfiscanf_r+0x186>
    b650:	2303      	movs	r3, #3
    b652:	9349      	str	r3, [sp, #292]	; 0x124
    b654:	9744      	str	r7, [sp, #272]	; 0x110
    b656:	e045      	b.n	b6e4 <__ssvfiscanf_r+0x14c>
    b658:	9947      	ldr	r1, [sp, #284]	; 0x11c
    b65a:	3101      	adds	r1, #1
    b65c:	9147      	str	r1, [sp, #284]	; 0x11c
    b65e:	6861      	ldr	r1, [r4, #4]
    b660:	3301      	adds	r3, #1
    b662:	3901      	subs	r1, #1
    b664:	6061      	str	r1, [r4, #4]
    b666:	6023      	str	r3, [r4, #0]
    b668:	6863      	ldr	r3, [r4, #4]
    b66a:	2b00      	cmp	r3, #0
    b66c:	dd0b      	ble.n	b686 <__ssvfiscanf_r+0xee>
    b66e:	f000 fbdf 	bl	be30 <__locale_ctype_ptr>
    b672:	6823      	ldr	r3, [r4, #0]
    b674:	7819      	ldrb	r1, [r3, #0]
    b676:	4408      	add	r0, r1
    b678:	7841      	ldrb	r1, [r0, #1]
    b67a:	070d      	lsls	r5, r1, #28
    b67c:	d4ec      	bmi.n	b658 <__ssvfiscanf_r+0xc0>
    b67e:	f10a 0501 	add.w	r5, sl, #1
    b682:	46aa      	mov	sl, r5
    b684:	e79e      	b.n	b5c4 <__ssvfiscanf_r+0x2c>
    b686:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    b688:	4621      	mov	r1, r4
    b68a:	4630      	mov	r0, r6
    b68c:	4798      	blx	r3
    b68e:	2800      	cmp	r0, #0
    b690:	d0ed      	beq.n	b66e <__ssvfiscanf_r+0xd6>
    b692:	e7f4      	b.n	b67e <__ssvfiscanf_r+0xe6>
    b694:	9b45      	ldr	r3, [sp, #276]	; 0x114
    b696:	fb07 1303 	mla	r3, r7, r3, r1
    b69a:	3b30      	subs	r3, #48	; 0x30
    b69c:	9345      	str	r3, [sp, #276]	; 0x114
    b69e:	e7af      	b.n	b600 <__ssvfiscanf_r+0x68>
    b6a0:	2b5b      	cmp	r3, #91	; 0x5b
    b6a2:	d061      	beq.n	b768 <__ssvfiscanf_r+0x1d0>
    b6a4:	d80c      	bhi.n	b6c0 <__ssvfiscanf_r+0x128>
    b6a6:	2b58      	cmp	r3, #88	; 0x58
    b6a8:	d1d2      	bne.n	b650 <__ssvfiscanf_r+0xb8>
    b6aa:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    b6ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    b6b0:	9243      	str	r2, [sp, #268]	; 0x10c
    b6b2:	2210      	movs	r2, #16
    b6b4:	9244      	str	r2, [sp, #272]	; 0x110
    b6b6:	2b6f      	cmp	r3, #111	; 0x6f
    b6b8:	bfb4      	ite	lt
    b6ba:	2303      	movlt	r3, #3
    b6bc:	2304      	movge	r3, #4
    b6be:	e010      	b.n	b6e2 <__ssvfiscanf_r+0x14a>
    b6c0:	2b63      	cmp	r3, #99	; 0x63
    b6c2:	d05c      	beq.n	b77e <__ssvfiscanf_r+0x1e6>
    b6c4:	2b64      	cmp	r3, #100	; 0x64
    b6c6:	d1c3      	bne.n	b650 <__ssvfiscanf_r+0xb8>
    b6c8:	9744      	str	r7, [sp, #272]	; 0x110
    b6ca:	e7f4      	b.n	b6b6 <__ssvfiscanf_r+0x11e>
    b6cc:	2b70      	cmp	r3, #112	; 0x70
    b6ce:	d042      	beq.n	b756 <__ssvfiscanf_r+0x1be>
    b6d0:	d81d      	bhi.n	b70e <__ssvfiscanf_r+0x176>
    b6d2:	2b6e      	cmp	r3, #110	; 0x6e
    b6d4:	d059      	beq.n	b78a <__ssvfiscanf_r+0x1f2>
    b6d6:	d843      	bhi.n	b760 <__ssvfiscanf_r+0x1c8>
    b6d8:	2b69      	cmp	r3, #105	; 0x69
    b6da:	d1b9      	bne.n	b650 <__ssvfiscanf_r+0xb8>
    b6dc:	2300      	movs	r3, #0
    b6de:	9344      	str	r3, [sp, #272]	; 0x110
    b6e0:	2303      	movs	r3, #3
    b6e2:	9349      	str	r3, [sp, #292]	; 0x124
    b6e4:	6863      	ldr	r3, [r4, #4]
    b6e6:	2b00      	cmp	r3, #0
    b6e8:	dd61      	ble.n	b7ae <__ssvfiscanf_r+0x216>
    b6ea:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    b6ec:	0659      	lsls	r1, r3, #25
    b6ee:	d56f      	bpl.n	b7d0 <__ssvfiscanf_r+0x238>
    b6f0:	9b49      	ldr	r3, [sp, #292]	; 0x124
    b6f2:	2b02      	cmp	r3, #2
    b6f4:	dc7c      	bgt.n	b7f0 <__ssvfiscanf_r+0x258>
    b6f6:	ab01      	add	r3, sp, #4
    b6f8:	4622      	mov	r2, r4
    b6fa:	a943      	add	r1, sp, #268	; 0x10c
    b6fc:	4630      	mov	r0, r6
    b6fe:	f000 f89f 	bl	b840 <_scanf_chars>
    b702:	2801      	cmp	r0, #1
    b704:	f000 8092 	beq.w	b82c <__ssvfiscanf_r+0x294>
    b708:	2802      	cmp	r0, #2
    b70a:	d1ba      	bne.n	b682 <__ssvfiscanf_r+0xea>
    b70c:	e01d      	b.n	b74a <__ssvfiscanf_r+0x1b2>
    b70e:	2b75      	cmp	r3, #117	; 0x75
    b710:	d0da      	beq.n	b6c8 <__ssvfiscanf_r+0x130>
    b712:	2b78      	cmp	r3, #120	; 0x78
    b714:	d0c9      	beq.n	b6aa <__ssvfiscanf_r+0x112>
    b716:	2b73      	cmp	r3, #115	; 0x73
    b718:	d19a      	bne.n	b650 <__ssvfiscanf_r+0xb8>
    b71a:	2302      	movs	r3, #2
    b71c:	e7e1      	b.n	b6e2 <__ssvfiscanf_r+0x14a>
    b71e:	6863      	ldr	r3, [r4, #4]
    b720:	2b00      	cmp	r3, #0
    b722:	dd0c      	ble.n	b73e <__ssvfiscanf_r+0x1a6>
    b724:	6823      	ldr	r3, [r4, #0]
    b726:	781a      	ldrb	r2, [r3, #0]
    b728:	4593      	cmp	fp, r2
    b72a:	d17f      	bne.n	b82c <__ssvfiscanf_r+0x294>
    b72c:	3301      	adds	r3, #1
    b72e:	6862      	ldr	r2, [r4, #4]
    b730:	6023      	str	r3, [r4, #0]
    b732:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    b734:	3a01      	subs	r2, #1
    b736:	3301      	adds	r3, #1
    b738:	6062      	str	r2, [r4, #4]
    b73a:	9347      	str	r3, [sp, #284]	; 0x11c
    b73c:	e7a1      	b.n	b682 <__ssvfiscanf_r+0xea>
    b73e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    b740:	4621      	mov	r1, r4
    b742:	4630      	mov	r0, r6
    b744:	4798      	blx	r3
    b746:	2800      	cmp	r0, #0
    b748:	d0ec      	beq.n	b724 <__ssvfiscanf_r+0x18c>
    b74a:	9846      	ldr	r0, [sp, #280]	; 0x118
    b74c:	2800      	cmp	r0, #0
    b74e:	d163      	bne.n	b818 <__ssvfiscanf_r+0x280>
    b750:	f04f 30ff 	mov.w	r0, #4294967295
    b754:	e066      	b.n	b824 <__ssvfiscanf_r+0x28c>
    b756:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    b758:	f042 0220 	orr.w	r2, r2, #32
    b75c:	9243      	str	r2, [sp, #268]	; 0x10c
    b75e:	e7a4      	b.n	b6aa <__ssvfiscanf_r+0x112>
    b760:	2308      	movs	r3, #8
    b762:	9344      	str	r3, [sp, #272]	; 0x110
    b764:	2304      	movs	r3, #4
    b766:	e7bc      	b.n	b6e2 <__ssvfiscanf_r+0x14a>
    b768:	4629      	mov	r1, r5
    b76a:	4640      	mov	r0, r8
    b76c:	f000 f9d0 	bl	bb10 <__sccl>
    b770:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    b772:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b776:	9343      	str	r3, [sp, #268]	; 0x10c
    b778:	4605      	mov	r5, r0
    b77a:	2301      	movs	r3, #1
    b77c:	e7b1      	b.n	b6e2 <__ssvfiscanf_r+0x14a>
    b77e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    b780:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b784:	9343      	str	r3, [sp, #268]	; 0x10c
    b786:	2300      	movs	r3, #0
    b788:	e7ab      	b.n	b6e2 <__ssvfiscanf_r+0x14a>
    b78a:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    b78c:	06d0      	lsls	r0, r2, #27
    b78e:	f53f af78 	bmi.w	b682 <__ssvfiscanf_r+0xea>
    b792:	f012 0f01 	tst.w	r2, #1
    b796:	9a01      	ldr	r2, [sp, #4]
    b798:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    b79a:	f102 0104 	add.w	r1, r2, #4
    b79e:	9101      	str	r1, [sp, #4]
    b7a0:	6812      	ldr	r2, [r2, #0]
    b7a2:	bf14      	ite	ne
    b7a4:	8013      	strhne	r3, [r2, #0]
    b7a6:	6013      	streq	r3, [r2, #0]
    b7a8:	e76b      	b.n	b682 <__ssvfiscanf_r+0xea>
    b7aa:	2305      	movs	r3, #5
    b7ac:	e799      	b.n	b6e2 <__ssvfiscanf_r+0x14a>
    b7ae:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    b7b0:	4621      	mov	r1, r4
    b7b2:	4630      	mov	r0, r6
    b7b4:	4798      	blx	r3
    b7b6:	2800      	cmp	r0, #0
    b7b8:	d097      	beq.n	b6ea <__ssvfiscanf_r+0x152>
    b7ba:	e7c6      	b.n	b74a <__ssvfiscanf_r+0x1b2>
    b7bc:	9a47      	ldr	r2, [sp, #284]	; 0x11c
    b7be:	3201      	adds	r2, #1
    b7c0:	9247      	str	r2, [sp, #284]	; 0x11c
    b7c2:	6862      	ldr	r2, [r4, #4]
    b7c4:	3a01      	subs	r2, #1
    b7c6:	2a00      	cmp	r2, #0
    b7c8:	6062      	str	r2, [r4, #4]
    b7ca:	dd0a      	ble.n	b7e2 <__ssvfiscanf_r+0x24a>
    b7cc:	3301      	adds	r3, #1
    b7ce:	6023      	str	r3, [r4, #0]
    b7d0:	f000 fb2e 	bl	be30 <__locale_ctype_ptr>
    b7d4:	6823      	ldr	r3, [r4, #0]
    b7d6:	781a      	ldrb	r2, [r3, #0]
    b7d8:	4410      	add	r0, r2
    b7da:	7842      	ldrb	r2, [r0, #1]
    b7dc:	0712      	lsls	r2, r2, #28
    b7de:	d4ed      	bmi.n	b7bc <__ssvfiscanf_r+0x224>
    b7e0:	e786      	b.n	b6f0 <__ssvfiscanf_r+0x158>
    b7e2:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    b7e4:	4621      	mov	r1, r4
    b7e6:	4630      	mov	r0, r6
    b7e8:	4798      	blx	r3
    b7ea:	2800      	cmp	r0, #0
    b7ec:	d0f0      	beq.n	b7d0 <__ssvfiscanf_r+0x238>
    b7ee:	e7ac      	b.n	b74a <__ssvfiscanf_r+0x1b2>
    b7f0:	2b04      	cmp	r3, #4
    b7f2:	dc06      	bgt.n	b802 <__ssvfiscanf_r+0x26a>
    b7f4:	ab01      	add	r3, sp, #4
    b7f6:	4622      	mov	r2, r4
    b7f8:	a943      	add	r1, sp, #268	; 0x10c
    b7fa:	4630      	mov	r0, r6
    b7fc:	f000 f884 	bl	b908 <_scanf_i>
    b800:	e77f      	b.n	b702 <__ssvfiscanf_r+0x16a>
    b802:	4b0e      	ldr	r3, [pc, #56]	; (b83c <__ssvfiscanf_r+0x2a4>)
    b804:	2b00      	cmp	r3, #0
    b806:	f43f af3c 	beq.w	b682 <__ssvfiscanf_r+0xea>
    b80a:	ab01      	add	r3, sp, #4
    b80c:	4622      	mov	r2, r4
    b80e:	a943      	add	r1, sp, #268	; 0x10c
    b810:	4630      	mov	r0, r6
    b812:	f3af 8000 	nop.w
    b816:	e774      	b.n	b702 <__ssvfiscanf_r+0x16a>
    b818:	89a3      	ldrh	r3, [r4, #12]
    b81a:	f013 0f40 	tst.w	r3, #64	; 0x40
    b81e:	bf18      	it	ne
    b820:	f04f 30ff 	movne.w	r0, #4294967295
    b824:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
    b828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b82c:	9846      	ldr	r0, [sp, #280]	; 0x118
    b82e:	e7f9      	b.n	b824 <__ssvfiscanf_r+0x28c>
    b830:	0000b4e5 	.word	0x0000b4e5
    b834:	0000b55f 	.word	0x0000b55f
    b838:	0000f3f4 	.word	0x0000f3f4
    b83c:	00000000 	.word	0x00000000

0000b840 <_scanf_chars>:
    b840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b844:	4615      	mov	r5, r2
    b846:	688a      	ldr	r2, [r1, #8]
    b848:	4680      	mov	r8, r0
    b84a:	460c      	mov	r4, r1
    b84c:	b932      	cbnz	r2, b85c <_scanf_chars+0x1c>
    b84e:	698a      	ldr	r2, [r1, #24]
    b850:	2a00      	cmp	r2, #0
    b852:	bf0c      	ite	eq
    b854:	2201      	moveq	r2, #1
    b856:	f04f 32ff 	movne.w	r2, #4294967295
    b85a:	608a      	str	r2, [r1, #8]
    b85c:	6822      	ldr	r2, [r4, #0]
    b85e:	06d1      	lsls	r1, r2, #27
    b860:	bf5f      	itttt	pl
    b862:	681a      	ldrpl	r2, [r3, #0]
    b864:	1d11      	addpl	r1, r2, #4
    b866:	6019      	strpl	r1, [r3, #0]
    b868:	6817      	ldrpl	r7, [r2, #0]
    b86a:	2600      	movs	r6, #0
    b86c:	69a3      	ldr	r3, [r4, #24]
    b86e:	b1db      	cbz	r3, b8a8 <_scanf_chars+0x68>
    b870:	2b01      	cmp	r3, #1
    b872:	d107      	bne.n	b884 <_scanf_chars+0x44>
    b874:	682b      	ldr	r3, [r5, #0]
    b876:	6962      	ldr	r2, [r4, #20]
    b878:	781b      	ldrb	r3, [r3, #0]
    b87a:	5cd3      	ldrb	r3, [r2, r3]
    b87c:	b9a3      	cbnz	r3, b8a8 <_scanf_chars+0x68>
    b87e:	2e00      	cmp	r6, #0
    b880:	d132      	bne.n	b8e8 <_scanf_chars+0xa8>
    b882:	e006      	b.n	b892 <_scanf_chars+0x52>
    b884:	2b02      	cmp	r3, #2
    b886:	d007      	beq.n	b898 <_scanf_chars+0x58>
    b888:	2e00      	cmp	r6, #0
    b88a:	d12d      	bne.n	b8e8 <_scanf_chars+0xa8>
    b88c:	69a3      	ldr	r3, [r4, #24]
    b88e:	2b01      	cmp	r3, #1
    b890:	d12a      	bne.n	b8e8 <_scanf_chars+0xa8>
    b892:	2001      	movs	r0, #1
    b894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b898:	f000 faca 	bl	be30 <__locale_ctype_ptr>
    b89c:	682b      	ldr	r3, [r5, #0]
    b89e:	781b      	ldrb	r3, [r3, #0]
    b8a0:	4418      	add	r0, r3
    b8a2:	7843      	ldrb	r3, [r0, #1]
    b8a4:	071b      	lsls	r3, r3, #28
    b8a6:	d4ef      	bmi.n	b888 <_scanf_chars+0x48>
    b8a8:	6823      	ldr	r3, [r4, #0]
    b8aa:	06da      	lsls	r2, r3, #27
    b8ac:	bf5e      	ittt	pl
    b8ae:	682b      	ldrpl	r3, [r5, #0]
    b8b0:	781b      	ldrbpl	r3, [r3, #0]
    b8b2:	703b      	strbpl	r3, [r7, #0]
    b8b4:	682a      	ldr	r2, [r5, #0]
    b8b6:	686b      	ldr	r3, [r5, #4]
    b8b8:	f102 0201 	add.w	r2, r2, #1
    b8bc:	602a      	str	r2, [r5, #0]
    b8be:	68a2      	ldr	r2, [r4, #8]
    b8c0:	f103 33ff 	add.w	r3, r3, #4294967295
    b8c4:	f102 32ff 	add.w	r2, r2, #4294967295
    b8c8:	606b      	str	r3, [r5, #4]
    b8ca:	f106 0601 	add.w	r6, r6, #1
    b8ce:	bf58      	it	pl
    b8d0:	3701      	addpl	r7, #1
    b8d2:	60a2      	str	r2, [r4, #8]
    b8d4:	b142      	cbz	r2, b8e8 <_scanf_chars+0xa8>
    b8d6:	2b00      	cmp	r3, #0
    b8d8:	dcc8      	bgt.n	b86c <_scanf_chars+0x2c>
    b8da:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    b8de:	4629      	mov	r1, r5
    b8e0:	4640      	mov	r0, r8
    b8e2:	4798      	blx	r3
    b8e4:	2800      	cmp	r0, #0
    b8e6:	d0c1      	beq.n	b86c <_scanf_chars+0x2c>
    b8e8:	6823      	ldr	r3, [r4, #0]
    b8ea:	f013 0310 	ands.w	r3, r3, #16
    b8ee:	d105      	bne.n	b8fc <_scanf_chars+0xbc>
    b8f0:	68e2      	ldr	r2, [r4, #12]
    b8f2:	3201      	adds	r2, #1
    b8f4:	60e2      	str	r2, [r4, #12]
    b8f6:	69a2      	ldr	r2, [r4, #24]
    b8f8:	b102      	cbz	r2, b8fc <_scanf_chars+0xbc>
    b8fa:	703b      	strb	r3, [r7, #0]
    b8fc:	6923      	ldr	r3, [r4, #16]
    b8fe:	441e      	add	r6, r3
    b900:	6126      	str	r6, [r4, #16]
    b902:	2000      	movs	r0, #0
    b904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000b908 <_scanf_i>:
    b908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b90c:	469a      	mov	sl, r3
    b90e:	4b74      	ldr	r3, [pc, #464]	; (bae0 <_scanf_i+0x1d8>)
    b910:	460c      	mov	r4, r1
    b912:	4683      	mov	fp, r0
    b914:	4616      	mov	r6, r2
    b916:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    b91a:	b087      	sub	sp, #28
    b91c:	ab03      	add	r3, sp, #12
    b91e:	68a7      	ldr	r7, [r4, #8]
    b920:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    b924:	4b6f      	ldr	r3, [pc, #444]	; (bae4 <_scanf_i+0x1dc>)
    b926:	69a1      	ldr	r1, [r4, #24]
    b928:	4a6f      	ldr	r2, [pc, #444]	; (bae8 <_scanf_i+0x1e0>)
    b92a:	2903      	cmp	r1, #3
    b92c:	bf18      	it	ne
    b92e:	461a      	movne	r2, r3
    b930:	1e7b      	subs	r3, r7, #1
    b932:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
    b936:	bf84      	itt	hi
    b938:	f240 135d 	movwhi	r3, #349	; 0x15d
    b93c:	60a3      	strhi	r3, [r4, #8]
    b93e:	6823      	ldr	r3, [r4, #0]
    b940:	9200      	str	r2, [sp, #0]
    b942:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
    b946:	bf88      	it	hi
    b948:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
    b94c:	f104 091c 	add.w	r9, r4, #28
    b950:	6023      	str	r3, [r4, #0]
    b952:	bf8c      	ite	hi
    b954:	197f      	addhi	r7, r7, r5
    b956:	2700      	movls	r7, #0
    b958:	464b      	mov	r3, r9
    b95a:	f04f 0800 	mov.w	r8, #0
    b95e:	9301      	str	r3, [sp, #4]
    b960:	6831      	ldr	r1, [r6, #0]
    b962:	ab03      	add	r3, sp, #12
    b964:	2202      	movs	r2, #2
    b966:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
    b96a:	7809      	ldrb	r1, [r1, #0]
    b96c:	f000 fa80 	bl	be70 <memchr>
    b970:	9b01      	ldr	r3, [sp, #4]
    b972:	b328      	cbz	r0, b9c0 <_scanf_i+0xb8>
    b974:	f1b8 0f01 	cmp.w	r8, #1
    b978:	d156      	bne.n	ba28 <_scanf_i+0x120>
    b97a:	6862      	ldr	r2, [r4, #4]
    b97c:	b92a      	cbnz	r2, b98a <_scanf_i+0x82>
    b97e:	2208      	movs	r2, #8
    b980:	6062      	str	r2, [r4, #4]
    b982:	6822      	ldr	r2, [r4, #0]
    b984:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    b988:	6022      	str	r2, [r4, #0]
    b98a:	6822      	ldr	r2, [r4, #0]
    b98c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
    b990:	6022      	str	r2, [r4, #0]
    b992:	68a2      	ldr	r2, [r4, #8]
    b994:	1e51      	subs	r1, r2, #1
    b996:	60a1      	str	r1, [r4, #8]
    b998:	b192      	cbz	r2, b9c0 <_scanf_i+0xb8>
    b99a:	6832      	ldr	r2, [r6, #0]
    b99c:	1c51      	adds	r1, r2, #1
    b99e:	6031      	str	r1, [r6, #0]
    b9a0:	7812      	ldrb	r2, [r2, #0]
    b9a2:	701a      	strb	r2, [r3, #0]
    b9a4:	1c5d      	adds	r5, r3, #1
    b9a6:	6873      	ldr	r3, [r6, #4]
    b9a8:	3b01      	subs	r3, #1
    b9aa:	2b00      	cmp	r3, #0
    b9ac:	6073      	str	r3, [r6, #4]
    b9ae:	dc06      	bgt.n	b9be <_scanf_i+0xb6>
    b9b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    b9b4:	4631      	mov	r1, r6
    b9b6:	4658      	mov	r0, fp
    b9b8:	4798      	blx	r3
    b9ba:	2800      	cmp	r0, #0
    b9bc:	d176      	bne.n	baac <_scanf_i+0x1a4>
    b9be:	462b      	mov	r3, r5
    b9c0:	f108 0801 	add.w	r8, r8, #1
    b9c4:	f1b8 0f03 	cmp.w	r8, #3
    b9c8:	d1c9      	bne.n	b95e <_scanf_i+0x56>
    b9ca:	6862      	ldr	r2, [r4, #4]
    b9cc:	b90a      	cbnz	r2, b9d2 <_scanf_i+0xca>
    b9ce:	220a      	movs	r2, #10
    b9d0:	6062      	str	r2, [r4, #4]
    b9d2:	6862      	ldr	r2, [r4, #4]
    b9d4:	4945      	ldr	r1, [pc, #276]	; (baec <_scanf_i+0x1e4>)
    b9d6:	6960      	ldr	r0, [r4, #20]
    b9d8:	9301      	str	r3, [sp, #4]
    b9da:	1a89      	subs	r1, r1, r2
    b9dc:	f000 f898 	bl	bb10 <__sccl>
    b9e0:	9b01      	ldr	r3, [sp, #4]
    b9e2:	f04f 0800 	mov.w	r8, #0
    b9e6:	461d      	mov	r5, r3
    b9e8:	68a3      	ldr	r3, [r4, #8]
    b9ea:	2b00      	cmp	r3, #0
    b9ec:	d038      	beq.n	ba60 <_scanf_i+0x158>
    b9ee:	6831      	ldr	r1, [r6, #0]
    b9f0:	6960      	ldr	r0, [r4, #20]
    b9f2:	780a      	ldrb	r2, [r1, #0]
    b9f4:	5c80      	ldrb	r0, [r0, r2]
    b9f6:	2800      	cmp	r0, #0
    b9f8:	d032      	beq.n	ba60 <_scanf_i+0x158>
    b9fa:	2a30      	cmp	r2, #48	; 0x30
    b9fc:	6822      	ldr	r2, [r4, #0]
    b9fe:	d121      	bne.n	ba44 <_scanf_i+0x13c>
    ba00:	0510      	lsls	r0, r2, #20
    ba02:	d51f      	bpl.n	ba44 <_scanf_i+0x13c>
    ba04:	f108 0801 	add.w	r8, r8, #1
    ba08:	b117      	cbz	r7, ba10 <_scanf_i+0x108>
    ba0a:	3301      	adds	r3, #1
    ba0c:	3f01      	subs	r7, #1
    ba0e:	60a3      	str	r3, [r4, #8]
    ba10:	6873      	ldr	r3, [r6, #4]
    ba12:	3b01      	subs	r3, #1
    ba14:	2b00      	cmp	r3, #0
    ba16:	6073      	str	r3, [r6, #4]
    ba18:	dd1b      	ble.n	ba52 <_scanf_i+0x14a>
    ba1a:	6833      	ldr	r3, [r6, #0]
    ba1c:	3301      	adds	r3, #1
    ba1e:	6033      	str	r3, [r6, #0]
    ba20:	68a3      	ldr	r3, [r4, #8]
    ba22:	3b01      	subs	r3, #1
    ba24:	60a3      	str	r3, [r4, #8]
    ba26:	e7df      	b.n	b9e8 <_scanf_i+0xe0>
    ba28:	f1b8 0f02 	cmp.w	r8, #2
    ba2c:	d1b1      	bne.n	b992 <_scanf_i+0x8a>
    ba2e:	6822      	ldr	r2, [r4, #0]
    ba30:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
    ba34:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    ba38:	d1c2      	bne.n	b9c0 <_scanf_i+0xb8>
    ba3a:	2110      	movs	r1, #16
    ba3c:	6061      	str	r1, [r4, #4]
    ba3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    ba42:	e7a5      	b.n	b990 <_scanf_i+0x88>
    ba44:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
    ba48:	6022      	str	r2, [r4, #0]
    ba4a:	780b      	ldrb	r3, [r1, #0]
    ba4c:	702b      	strb	r3, [r5, #0]
    ba4e:	3501      	adds	r5, #1
    ba50:	e7de      	b.n	ba10 <_scanf_i+0x108>
    ba52:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    ba56:	4631      	mov	r1, r6
    ba58:	4658      	mov	r0, fp
    ba5a:	4798      	blx	r3
    ba5c:	2800      	cmp	r0, #0
    ba5e:	d0df      	beq.n	ba20 <_scanf_i+0x118>
    ba60:	6823      	ldr	r3, [r4, #0]
    ba62:	05d9      	lsls	r1, r3, #23
    ba64:	d50c      	bpl.n	ba80 <_scanf_i+0x178>
    ba66:	454d      	cmp	r5, r9
    ba68:	d908      	bls.n	ba7c <_scanf_i+0x174>
    ba6a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
    ba6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
    ba72:	4632      	mov	r2, r6
    ba74:	4658      	mov	r0, fp
    ba76:	4798      	blx	r3
    ba78:	1e6f      	subs	r7, r5, #1
    ba7a:	463d      	mov	r5, r7
    ba7c:	454d      	cmp	r5, r9
    ba7e:	d02c      	beq.n	bada <_scanf_i+0x1d2>
    ba80:	6822      	ldr	r2, [r4, #0]
    ba82:	f012 0210 	ands.w	r2, r2, #16
    ba86:	d11e      	bne.n	bac6 <_scanf_i+0x1be>
    ba88:	702a      	strb	r2, [r5, #0]
    ba8a:	6863      	ldr	r3, [r4, #4]
    ba8c:	9e00      	ldr	r6, [sp, #0]
    ba8e:	4649      	mov	r1, r9
    ba90:	4658      	mov	r0, fp
    ba92:	47b0      	blx	r6
    ba94:	6822      	ldr	r2, [r4, #0]
    ba96:	f8da 3000 	ldr.w	r3, [sl]
    ba9a:	f012 0f20 	tst.w	r2, #32
    ba9e:	d008      	beq.n	bab2 <_scanf_i+0x1aa>
    baa0:	1d1a      	adds	r2, r3, #4
    baa2:	f8ca 2000 	str.w	r2, [sl]
    baa6:	681b      	ldr	r3, [r3, #0]
    baa8:	6018      	str	r0, [r3, #0]
    baaa:	e009      	b.n	bac0 <_scanf_i+0x1b8>
    baac:	f04f 0800 	mov.w	r8, #0
    bab0:	e7d6      	b.n	ba60 <_scanf_i+0x158>
    bab2:	07d2      	lsls	r2, r2, #31
    bab4:	d5f4      	bpl.n	baa0 <_scanf_i+0x198>
    bab6:	1d1a      	adds	r2, r3, #4
    bab8:	f8ca 2000 	str.w	r2, [sl]
    babc:	681b      	ldr	r3, [r3, #0]
    babe:	8018      	strh	r0, [r3, #0]
    bac0:	68e3      	ldr	r3, [r4, #12]
    bac2:	3301      	adds	r3, #1
    bac4:	60e3      	str	r3, [r4, #12]
    bac6:	eba5 0509 	sub.w	r5, r5, r9
    baca:	44a8      	add	r8, r5
    bacc:	6925      	ldr	r5, [r4, #16]
    bace:	4445      	add	r5, r8
    bad0:	6125      	str	r5, [r4, #16]
    bad2:	2000      	movs	r0, #0
    bad4:	b007      	add	sp, #28
    bad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bada:	2001      	movs	r0, #1
    badc:	e7fa      	b.n	bad4 <_scanf_i+0x1cc>
    bade:	bf00      	nop
    bae0:	0000f3f8 	.word	0x0000f3f8
    bae4:	0000bd91 	.word	0x0000bd91
    bae8:	0000bc71 	.word	0x0000bc71
    baec:	0000f414 	.word	0x0000f414

0000baf0 <_sbrk_r>:
    baf0:	b538      	push	{r3, r4, r5, lr}
    baf2:	4c06      	ldr	r4, [pc, #24]	; (bb0c <_sbrk_r+0x1c>)
    baf4:	2300      	movs	r3, #0
    baf6:	4605      	mov	r5, r0
    baf8:	4608      	mov	r0, r1
    bafa:	6023      	str	r3, [r4, #0]
    bafc:	f7f6 fb42 	bl	2184 <_sbrk>
    bb00:	1c43      	adds	r3, r0, #1
    bb02:	d102      	bne.n	bb0a <_sbrk_r+0x1a>
    bb04:	6823      	ldr	r3, [r4, #0]
    bb06:	b103      	cbz	r3, bb0a <_sbrk_r+0x1a>
    bb08:	602b      	str	r3, [r5, #0]
    bb0a:	bd38      	pop	{r3, r4, r5, pc}
    bb0c:	20009628 	.word	0x20009628

0000bb10 <__sccl>:
    bb10:	b570      	push	{r4, r5, r6, lr}
    bb12:	780b      	ldrb	r3, [r1, #0]
    bb14:	2b5e      	cmp	r3, #94	; 0x5e
    bb16:	bf13      	iteet	ne
    bb18:	1c4a      	addne	r2, r1, #1
    bb1a:	1c8a      	addeq	r2, r1, #2
    bb1c:	784b      	ldrbeq	r3, [r1, #1]
    bb1e:	2100      	movne	r1, #0
    bb20:	bf08      	it	eq
    bb22:	2101      	moveq	r1, #1
    bb24:	1e44      	subs	r4, r0, #1
    bb26:	f100 05ff 	add.w	r5, r0, #255	; 0xff
    bb2a:	f804 1f01 	strb.w	r1, [r4, #1]!
    bb2e:	42a5      	cmp	r5, r4
    bb30:	d1fb      	bne.n	bb2a <__sccl+0x1a>
    bb32:	b913      	cbnz	r3, bb3a <__sccl+0x2a>
    bb34:	3a01      	subs	r2, #1
    bb36:	4610      	mov	r0, r2
    bb38:	bd70      	pop	{r4, r5, r6, pc}
    bb3a:	f081 0401 	eor.w	r4, r1, #1
    bb3e:	54c4      	strb	r4, [r0, r3]
    bb40:	4611      	mov	r1, r2
    bb42:	780d      	ldrb	r5, [r1, #0]
    bb44:	2d2d      	cmp	r5, #45	; 0x2d
    bb46:	f101 0201 	add.w	r2, r1, #1
    bb4a:	d006      	beq.n	bb5a <__sccl+0x4a>
    bb4c:	2d5d      	cmp	r5, #93	; 0x5d
    bb4e:	d0f2      	beq.n	bb36 <__sccl+0x26>
    bb50:	b90d      	cbnz	r5, bb56 <__sccl+0x46>
    bb52:	460a      	mov	r2, r1
    bb54:	e7ef      	b.n	bb36 <__sccl+0x26>
    bb56:	462b      	mov	r3, r5
    bb58:	e7f1      	b.n	bb3e <__sccl+0x2e>
    bb5a:	784e      	ldrb	r6, [r1, #1]
    bb5c:	2e5d      	cmp	r6, #93	; 0x5d
    bb5e:	d0fa      	beq.n	bb56 <__sccl+0x46>
    bb60:	42b3      	cmp	r3, r6
    bb62:	dcf8      	bgt.n	bb56 <__sccl+0x46>
    bb64:	3102      	adds	r1, #2
    bb66:	3301      	adds	r3, #1
    bb68:	429e      	cmp	r6, r3
    bb6a:	54c4      	strb	r4, [r0, r3]
    bb6c:	dcfb      	bgt.n	bb66 <__sccl+0x56>
    bb6e:	e7e8      	b.n	bb42 <__sccl+0x32>

0000bb70 <_strtol_l.isra.0>:
    bb70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bb74:	4680      	mov	r8, r0
    bb76:	4689      	mov	r9, r1
    bb78:	4692      	mov	sl, r2
    bb7a:	461f      	mov	r7, r3
    bb7c:	468b      	mov	fp, r1
    bb7e:	465d      	mov	r5, fp
    bb80:	980a      	ldr	r0, [sp, #40]	; 0x28
    bb82:	f815 4b01 	ldrb.w	r4, [r5], #1
    bb86:	f000 f950 	bl	be2a <__locale_ctype_ptr_l>
    bb8a:	4420      	add	r0, r4
    bb8c:	7846      	ldrb	r6, [r0, #1]
    bb8e:	f016 0608 	ands.w	r6, r6, #8
    bb92:	d10b      	bne.n	bbac <_strtol_l.isra.0+0x3c>
    bb94:	2c2d      	cmp	r4, #45	; 0x2d
    bb96:	d10b      	bne.n	bbb0 <_strtol_l.isra.0+0x40>
    bb98:	782c      	ldrb	r4, [r5, #0]
    bb9a:	2601      	movs	r6, #1
    bb9c:	f10b 0502 	add.w	r5, fp, #2
    bba0:	b167      	cbz	r7, bbbc <_strtol_l.isra.0+0x4c>
    bba2:	2f10      	cmp	r7, #16
    bba4:	d114      	bne.n	bbd0 <_strtol_l.isra.0+0x60>
    bba6:	2c30      	cmp	r4, #48	; 0x30
    bba8:	d00a      	beq.n	bbc0 <_strtol_l.isra.0+0x50>
    bbaa:	e011      	b.n	bbd0 <_strtol_l.isra.0+0x60>
    bbac:	46ab      	mov	fp, r5
    bbae:	e7e6      	b.n	bb7e <_strtol_l.isra.0+0xe>
    bbb0:	2c2b      	cmp	r4, #43	; 0x2b
    bbb2:	bf04      	itt	eq
    bbb4:	782c      	ldrbeq	r4, [r5, #0]
    bbb6:	f10b 0502 	addeq.w	r5, fp, #2
    bbba:	e7f1      	b.n	bba0 <_strtol_l.isra.0+0x30>
    bbbc:	2c30      	cmp	r4, #48	; 0x30
    bbbe:	d127      	bne.n	bc10 <_strtol_l.isra.0+0xa0>
    bbc0:	782b      	ldrb	r3, [r5, #0]
    bbc2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    bbc6:	2b58      	cmp	r3, #88	; 0x58
    bbc8:	d14b      	bne.n	bc62 <_strtol_l.isra.0+0xf2>
    bbca:	786c      	ldrb	r4, [r5, #1]
    bbcc:	2710      	movs	r7, #16
    bbce:	3502      	adds	r5, #2
    bbd0:	2e00      	cmp	r6, #0
    bbd2:	bf0c      	ite	eq
    bbd4:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
    bbd8:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
    bbdc:	2200      	movs	r2, #0
    bbde:	fbb1 fef7 	udiv	lr, r1, r7
    bbe2:	4610      	mov	r0, r2
    bbe4:	fb07 1c1e 	mls	ip, r7, lr, r1
    bbe8:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    bbec:	2b09      	cmp	r3, #9
    bbee:	d811      	bhi.n	bc14 <_strtol_l.isra.0+0xa4>
    bbf0:	461c      	mov	r4, r3
    bbf2:	42a7      	cmp	r7, r4
    bbf4:	dd1d      	ble.n	bc32 <_strtol_l.isra.0+0xc2>
    bbf6:	1c53      	adds	r3, r2, #1
    bbf8:	d007      	beq.n	bc0a <_strtol_l.isra.0+0x9a>
    bbfa:	4586      	cmp	lr, r0
    bbfc:	d316      	bcc.n	bc2c <_strtol_l.isra.0+0xbc>
    bbfe:	d101      	bne.n	bc04 <_strtol_l.isra.0+0x94>
    bc00:	45a4      	cmp	ip, r4
    bc02:	db13      	blt.n	bc2c <_strtol_l.isra.0+0xbc>
    bc04:	fb00 4007 	mla	r0, r0, r7, r4
    bc08:	2201      	movs	r2, #1
    bc0a:	f815 4b01 	ldrb.w	r4, [r5], #1
    bc0e:	e7eb      	b.n	bbe8 <_strtol_l.isra.0+0x78>
    bc10:	270a      	movs	r7, #10
    bc12:	e7dd      	b.n	bbd0 <_strtol_l.isra.0+0x60>
    bc14:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
    bc18:	2b19      	cmp	r3, #25
    bc1a:	d801      	bhi.n	bc20 <_strtol_l.isra.0+0xb0>
    bc1c:	3c37      	subs	r4, #55	; 0x37
    bc1e:	e7e8      	b.n	bbf2 <_strtol_l.isra.0+0x82>
    bc20:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
    bc24:	2b19      	cmp	r3, #25
    bc26:	d804      	bhi.n	bc32 <_strtol_l.isra.0+0xc2>
    bc28:	3c57      	subs	r4, #87	; 0x57
    bc2a:	e7e2      	b.n	bbf2 <_strtol_l.isra.0+0x82>
    bc2c:	f04f 32ff 	mov.w	r2, #4294967295
    bc30:	e7eb      	b.n	bc0a <_strtol_l.isra.0+0x9a>
    bc32:	1c53      	adds	r3, r2, #1
    bc34:	d108      	bne.n	bc48 <_strtol_l.isra.0+0xd8>
    bc36:	2322      	movs	r3, #34	; 0x22
    bc38:	f8c8 3000 	str.w	r3, [r8]
    bc3c:	4608      	mov	r0, r1
    bc3e:	f1ba 0f00 	cmp.w	sl, #0
    bc42:	d107      	bne.n	bc54 <_strtol_l.isra.0+0xe4>
    bc44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bc48:	b106      	cbz	r6, bc4c <_strtol_l.isra.0+0xdc>
    bc4a:	4240      	negs	r0, r0
    bc4c:	f1ba 0f00 	cmp.w	sl, #0
    bc50:	d00c      	beq.n	bc6c <_strtol_l.isra.0+0xfc>
    bc52:	b122      	cbz	r2, bc5e <_strtol_l.isra.0+0xee>
    bc54:	3d01      	subs	r5, #1
    bc56:	f8ca 5000 	str.w	r5, [sl]
    bc5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bc5e:	464d      	mov	r5, r9
    bc60:	e7f9      	b.n	bc56 <_strtol_l.isra.0+0xe6>
    bc62:	2430      	movs	r4, #48	; 0x30
    bc64:	2f00      	cmp	r7, #0
    bc66:	d1b3      	bne.n	bbd0 <_strtol_l.isra.0+0x60>
    bc68:	2708      	movs	r7, #8
    bc6a:	e7b1      	b.n	bbd0 <_strtol_l.isra.0+0x60>
    bc6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000bc70 <_strtol_r>:
    bc70:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bc72:	4c06      	ldr	r4, [pc, #24]	; (bc8c <_strtol_r+0x1c>)
    bc74:	4d06      	ldr	r5, [pc, #24]	; (bc90 <_strtol_r+0x20>)
    bc76:	6824      	ldr	r4, [r4, #0]
    bc78:	6a24      	ldr	r4, [r4, #32]
    bc7a:	2c00      	cmp	r4, #0
    bc7c:	bf08      	it	eq
    bc7e:	462c      	moveq	r4, r5
    bc80:	9400      	str	r4, [sp, #0]
    bc82:	f7ff ff75 	bl	bb70 <_strtol_l.isra.0>
    bc86:	b003      	add	sp, #12
    bc88:	bd30      	pop	{r4, r5, pc}
    bc8a:	bf00      	nop
    bc8c:	200000e0 	.word	0x200000e0
    bc90:	20000144 	.word	0x20000144

0000bc94 <_strtoul_l.isra.0>:
    bc94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bc98:	4680      	mov	r8, r0
    bc9a:	4689      	mov	r9, r1
    bc9c:	4692      	mov	sl, r2
    bc9e:	461e      	mov	r6, r3
    bca0:	460f      	mov	r7, r1
    bca2:	463d      	mov	r5, r7
    bca4:	9808      	ldr	r0, [sp, #32]
    bca6:	f815 4b01 	ldrb.w	r4, [r5], #1
    bcaa:	f000 f8be 	bl	be2a <__locale_ctype_ptr_l>
    bcae:	4420      	add	r0, r4
    bcb0:	7843      	ldrb	r3, [r0, #1]
    bcb2:	f013 0308 	ands.w	r3, r3, #8
    bcb6:	d10a      	bne.n	bcce <_strtoul_l.isra.0+0x3a>
    bcb8:	2c2d      	cmp	r4, #45	; 0x2d
    bcba:	d10a      	bne.n	bcd2 <_strtoul_l.isra.0+0x3e>
    bcbc:	782c      	ldrb	r4, [r5, #0]
    bcbe:	2301      	movs	r3, #1
    bcc0:	1cbd      	adds	r5, r7, #2
    bcc2:	b15e      	cbz	r6, bcdc <_strtoul_l.isra.0+0x48>
    bcc4:	2e10      	cmp	r6, #16
    bcc6:	d113      	bne.n	bcf0 <_strtoul_l.isra.0+0x5c>
    bcc8:	2c30      	cmp	r4, #48	; 0x30
    bcca:	d009      	beq.n	bce0 <_strtoul_l.isra.0+0x4c>
    bccc:	e010      	b.n	bcf0 <_strtoul_l.isra.0+0x5c>
    bcce:	462f      	mov	r7, r5
    bcd0:	e7e7      	b.n	bca2 <_strtoul_l.isra.0+0xe>
    bcd2:	2c2b      	cmp	r4, #43	; 0x2b
    bcd4:	bf04      	itt	eq
    bcd6:	782c      	ldrbeq	r4, [r5, #0]
    bcd8:	1cbd      	addeq	r5, r7, #2
    bcda:	e7f2      	b.n	bcc2 <_strtoul_l.isra.0+0x2e>
    bcdc:	2c30      	cmp	r4, #48	; 0x30
    bcde:	d125      	bne.n	bd2c <_strtoul_l.isra.0+0x98>
    bce0:	782a      	ldrb	r2, [r5, #0]
    bce2:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    bce6:	2a58      	cmp	r2, #88	; 0x58
    bce8:	d14a      	bne.n	bd80 <_strtoul_l.isra.0+0xec>
    bcea:	786c      	ldrb	r4, [r5, #1]
    bcec:	2610      	movs	r6, #16
    bcee:	3502      	adds	r5, #2
    bcf0:	f04f 31ff 	mov.w	r1, #4294967295
    bcf4:	2700      	movs	r7, #0
    bcf6:	fbb1 f1f6 	udiv	r1, r1, r6
    bcfa:	fb06 fe01 	mul.w	lr, r6, r1
    bcfe:	ea6f 0e0e 	mvn.w	lr, lr
    bd02:	4638      	mov	r0, r7
    bd04:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
    bd08:	2a09      	cmp	r2, #9
    bd0a:	d811      	bhi.n	bd30 <_strtoul_l.isra.0+0x9c>
    bd0c:	4614      	mov	r4, r2
    bd0e:	42a6      	cmp	r6, r4
    bd10:	dd1d      	ble.n	bd4e <_strtoul_l.isra.0+0xba>
    bd12:	2f00      	cmp	r7, #0
    bd14:	db18      	blt.n	bd48 <_strtoul_l.isra.0+0xb4>
    bd16:	4281      	cmp	r1, r0
    bd18:	d316      	bcc.n	bd48 <_strtoul_l.isra.0+0xb4>
    bd1a:	d101      	bne.n	bd20 <_strtoul_l.isra.0+0x8c>
    bd1c:	45a6      	cmp	lr, r4
    bd1e:	db13      	blt.n	bd48 <_strtoul_l.isra.0+0xb4>
    bd20:	fb00 4006 	mla	r0, r0, r6, r4
    bd24:	2701      	movs	r7, #1
    bd26:	f815 4b01 	ldrb.w	r4, [r5], #1
    bd2a:	e7eb      	b.n	bd04 <_strtoul_l.isra.0+0x70>
    bd2c:	260a      	movs	r6, #10
    bd2e:	e7df      	b.n	bcf0 <_strtoul_l.isra.0+0x5c>
    bd30:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
    bd34:	2a19      	cmp	r2, #25
    bd36:	d801      	bhi.n	bd3c <_strtoul_l.isra.0+0xa8>
    bd38:	3c37      	subs	r4, #55	; 0x37
    bd3a:	e7e8      	b.n	bd0e <_strtoul_l.isra.0+0x7a>
    bd3c:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
    bd40:	2a19      	cmp	r2, #25
    bd42:	d804      	bhi.n	bd4e <_strtoul_l.isra.0+0xba>
    bd44:	3c57      	subs	r4, #87	; 0x57
    bd46:	e7e2      	b.n	bd0e <_strtoul_l.isra.0+0x7a>
    bd48:	f04f 37ff 	mov.w	r7, #4294967295
    bd4c:	e7eb      	b.n	bd26 <_strtoul_l.isra.0+0x92>
    bd4e:	2f00      	cmp	r7, #0
    bd50:	da09      	bge.n	bd66 <_strtoul_l.isra.0+0xd2>
    bd52:	2322      	movs	r3, #34	; 0x22
    bd54:	f8c8 3000 	str.w	r3, [r8]
    bd58:	f04f 30ff 	mov.w	r0, #4294967295
    bd5c:	f1ba 0f00 	cmp.w	sl, #0
    bd60:	d107      	bne.n	bd72 <_strtoul_l.isra.0+0xde>
    bd62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bd66:	b103      	cbz	r3, bd6a <_strtoul_l.isra.0+0xd6>
    bd68:	4240      	negs	r0, r0
    bd6a:	f1ba 0f00 	cmp.w	sl, #0
    bd6e:	d00c      	beq.n	bd8a <_strtoul_l.isra.0+0xf6>
    bd70:	b127      	cbz	r7, bd7c <_strtoul_l.isra.0+0xe8>
    bd72:	3d01      	subs	r5, #1
    bd74:	f8ca 5000 	str.w	r5, [sl]
    bd78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bd7c:	464d      	mov	r5, r9
    bd7e:	e7f9      	b.n	bd74 <_strtoul_l.isra.0+0xe0>
    bd80:	2430      	movs	r4, #48	; 0x30
    bd82:	2e00      	cmp	r6, #0
    bd84:	d1b4      	bne.n	bcf0 <_strtoul_l.isra.0+0x5c>
    bd86:	2608      	movs	r6, #8
    bd88:	e7b2      	b.n	bcf0 <_strtoul_l.isra.0+0x5c>
    bd8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0000bd90 <_strtoul_r>:
    bd90:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bd92:	4c06      	ldr	r4, [pc, #24]	; (bdac <_strtoul_r+0x1c>)
    bd94:	4d06      	ldr	r5, [pc, #24]	; (bdb0 <_strtoul_r+0x20>)
    bd96:	6824      	ldr	r4, [r4, #0]
    bd98:	6a24      	ldr	r4, [r4, #32]
    bd9a:	2c00      	cmp	r4, #0
    bd9c:	bf08      	it	eq
    bd9e:	462c      	moveq	r4, r5
    bda0:	9400      	str	r4, [sp, #0]
    bda2:	f7ff ff77 	bl	bc94 <_strtoul_l.isra.0>
    bda6:	b003      	add	sp, #12
    bda8:	bd30      	pop	{r4, r5, pc}
    bdaa:	bf00      	nop
    bdac:	200000e0 	.word	0x200000e0
    bdb0:	20000144 	.word	0x20000144

0000bdb4 <__submore>:
    bdb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bdb8:	460c      	mov	r4, r1
    bdba:	6b49      	ldr	r1, [r1, #52]	; 0x34
    bdbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
    bdc0:	4299      	cmp	r1, r3
    bdc2:	d11e      	bne.n	be02 <__submore+0x4e>
    bdc4:	f44f 6180 	mov.w	r1, #1024	; 0x400
    bdc8:	f7ff fb2e 	bl	b428 <_malloc_r>
    bdcc:	b918      	cbnz	r0, bdd6 <__submore+0x22>
    bdce:	f04f 30ff 	mov.w	r0, #4294967295
    bdd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bdd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
    bdda:	63a3      	str	r3, [r4, #56]	; 0x38
    bddc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
    bde0:	6360      	str	r0, [r4, #52]	; 0x34
    bde2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
    bde6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    bdea:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
    bdee:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    bdf2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
    bdf6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
    bdfa:	6020      	str	r0, [r4, #0]
    bdfc:	2000      	movs	r0, #0
    bdfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    be02:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    be04:	0077      	lsls	r7, r6, #1
    be06:	463a      	mov	r2, r7
    be08:	f000 f8d2 	bl	bfb0 <_realloc_r>
    be0c:	4605      	mov	r5, r0
    be0e:	2800      	cmp	r0, #0
    be10:	d0dd      	beq.n	bdce <__submore+0x1a>
    be12:	eb00 0806 	add.w	r8, r0, r6
    be16:	4601      	mov	r1, r0
    be18:	4632      	mov	r2, r6
    be1a:	4640      	mov	r0, r8
    be1c:	f7ff fa8d 	bl	b33a <memcpy>
    be20:	f8c4 8000 	str.w	r8, [r4]
    be24:	6365      	str	r5, [r4, #52]	; 0x34
    be26:	63a7      	str	r7, [r4, #56]	; 0x38
    be28:	e7e8      	b.n	bdfc <__submore+0x48>

0000be2a <__locale_ctype_ptr_l>:
    be2a:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
    be2e:	4770      	bx	lr

0000be30 <__locale_ctype_ptr>:
    be30:	4b04      	ldr	r3, [pc, #16]	; (be44 <__locale_ctype_ptr+0x14>)
    be32:	4a05      	ldr	r2, [pc, #20]	; (be48 <__locale_ctype_ptr+0x18>)
    be34:	681b      	ldr	r3, [r3, #0]
    be36:	6a1b      	ldr	r3, [r3, #32]
    be38:	2b00      	cmp	r3, #0
    be3a:	bf08      	it	eq
    be3c:	4613      	moveq	r3, r2
    be3e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
    be42:	4770      	bx	lr
    be44:	200000e0 	.word	0x200000e0
    be48:	20000144 	.word	0x20000144

0000be4c <__ascii_mbtowc>:
    be4c:	b082      	sub	sp, #8
    be4e:	b901      	cbnz	r1, be52 <__ascii_mbtowc+0x6>
    be50:	a901      	add	r1, sp, #4
    be52:	b142      	cbz	r2, be66 <__ascii_mbtowc+0x1a>
    be54:	b14b      	cbz	r3, be6a <__ascii_mbtowc+0x1e>
    be56:	7813      	ldrb	r3, [r2, #0]
    be58:	600b      	str	r3, [r1, #0]
    be5a:	7812      	ldrb	r2, [r2, #0]
    be5c:	1c10      	adds	r0, r2, #0
    be5e:	bf18      	it	ne
    be60:	2001      	movne	r0, #1
    be62:	b002      	add	sp, #8
    be64:	4770      	bx	lr
    be66:	4610      	mov	r0, r2
    be68:	e7fb      	b.n	be62 <__ascii_mbtowc+0x16>
    be6a:	f06f 0001 	mvn.w	r0, #1
    be6e:	e7f8      	b.n	be62 <__ascii_mbtowc+0x16>

0000be70 <memchr>:
    be70:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    be74:	2a10      	cmp	r2, #16
    be76:	db2b      	blt.n	bed0 <memchr+0x60>
    be78:	f010 0f07 	tst.w	r0, #7
    be7c:	d008      	beq.n	be90 <memchr+0x20>
    be7e:	f810 3b01 	ldrb.w	r3, [r0], #1
    be82:	3a01      	subs	r2, #1
    be84:	428b      	cmp	r3, r1
    be86:	d02d      	beq.n	bee4 <memchr+0x74>
    be88:	f010 0f07 	tst.w	r0, #7
    be8c:	b342      	cbz	r2, bee0 <memchr+0x70>
    be8e:	d1f6      	bne.n	be7e <memchr+0xe>
    be90:	b4f0      	push	{r4, r5, r6, r7}
    be92:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    be96:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    be9a:	f022 0407 	bic.w	r4, r2, #7
    be9e:	f07f 0700 	mvns.w	r7, #0
    bea2:	2300      	movs	r3, #0
    bea4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    bea8:	3c08      	subs	r4, #8
    beaa:	ea85 0501 	eor.w	r5, r5, r1
    beae:	ea86 0601 	eor.w	r6, r6, r1
    beb2:	fa85 f547 	uadd8	r5, r5, r7
    beb6:	faa3 f587 	sel	r5, r3, r7
    beba:	fa86 f647 	uadd8	r6, r6, r7
    bebe:	faa5 f687 	sel	r6, r5, r7
    bec2:	b98e      	cbnz	r6, bee8 <memchr+0x78>
    bec4:	d1ee      	bne.n	bea4 <memchr+0x34>
    bec6:	bcf0      	pop	{r4, r5, r6, r7}
    bec8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    becc:	f002 0207 	and.w	r2, r2, #7
    bed0:	b132      	cbz	r2, bee0 <memchr+0x70>
    bed2:	f810 3b01 	ldrb.w	r3, [r0], #1
    bed6:	3a01      	subs	r2, #1
    bed8:	ea83 0301 	eor.w	r3, r3, r1
    bedc:	b113      	cbz	r3, bee4 <memchr+0x74>
    bede:	d1f8      	bne.n	bed2 <memchr+0x62>
    bee0:	2000      	movs	r0, #0
    bee2:	4770      	bx	lr
    bee4:	3801      	subs	r0, #1
    bee6:	4770      	bx	lr
    bee8:	2d00      	cmp	r5, #0
    beea:	bf06      	itte	eq
    beec:	4635      	moveq	r5, r6
    beee:	3803      	subeq	r0, #3
    bef0:	3807      	subne	r0, #7
    bef2:	f015 0f01 	tst.w	r5, #1
    bef6:	d107      	bne.n	bf08 <memchr+0x98>
    bef8:	3001      	adds	r0, #1
    befa:	f415 7f80 	tst.w	r5, #256	; 0x100
    befe:	bf02      	ittt	eq
    bf00:	3001      	addeq	r0, #1
    bf02:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    bf06:	3001      	addeq	r0, #1
    bf08:	bcf0      	pop	{r4, r5, r6, r7}
    bf0a:	3801      	subs	r0, #1
    bf0c:	4770      	bx	lr
    bf0e:	bf00      	nop

0000bf10 <__malloc_lock>:
    bf10:	4770      	bx	lr

0000bf12 <__malloc_unlock>:
    bf12:	4770      	bx	lr

0000bf14 <_free_r>:
    bf14:	b538      	push	{r3, r4, r5, lr}
    bf16:	4605      	mov	r5, r0
    bf18:	2900      	cmp	r1, #0
    bf1a:	d045      	beq.n	bfa8 <_free_r+0x94>
    bf1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
    bf20:	1f0c      	subs	r4, r1, #4
    bf22:	2b00      	cmp	r3, #0
    bf24:	bfb8      	it	lt
    bf26:	18e4      	addlt	r4, r4, r3
    bf28:	f7ff fff2 	bl	bf10 <__malloc_lock>
    bf2c:	4a1f      	ldr	r2, [pc, #124]	; (bfac <_free_r+0x98>)
    bf2e:	6813      	ldr	r3, [r2, #0]
    bf30:	4610      	mov	r0, r2
    bf32:	b933      	cbnz	r3, bf42 <_free_r+0x2e>
    bf34:	6063      	str	r3, [r4, #4]
    bf36:	6014      	str	r4, [r2, #0]
    bf38:	4628      	mov	r0, r5
    bf3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    bf3e:	f7ff bfe8 	b.w	bf12 <__malloc_unlock>
    bf42:	42a3      	cmp	r3, r4
    bf44:	d90c      	bls.n	bf60 <_free_r+0x4c>
    bf46:	6821      	ldr	r1, [r4, #0]
    bf48:	1862      	adds	r2, r4, r1
    bf4a:	4293      	cmp	r3, r2
    bf4c:	bf04      	itt	eq
    bf4e:	681a      	ldreq	r2, [r3, #0]
    bf50:	685b      	ldreq	r3, [r3, #4]
    bf52:	6063      	str	r3, [r4, #4]
    bf54:	bf04      	itt	eq
    bf56:	1852      	addeq	r2, r2, r1
    bf58:	6022      	streq	r2, [r4, #0]
    bf5a:	6004      	str	r4, [r0, #0]
    bf5c:	e7ec      	b.n	bf38 <_free_r+0x24>
    bf5e:	4613      	mov	r3, r2
    bf60:	685a      	ldr	r2, [r3, #4]
    bf62:	b10a      	cbz	r2, bf68 <_free_r+0x54>
    bf64:	42a2      	cmp	r2, r4
    bf66:	d9fa      	bls.n	bf5e <_free_r+0x4a>
    bf68:	6819      	ldr	r1, [r3, #0]
    bf6a:	1858      	adds	r0, r3, r1
    bf6c:	42a0      	cmp	r0, r4
    bf6e:	d10b      	bne.n	bf88 <_free_r+0x74>
    bf70:	6820      	ldr	r0, [r4, #0]
    bf72:	4401      	add	r1, r0
    bf74:	1858      	adds	r0, r3, r1
    bf76:	4282      	cmp	r2, r0
    bf78:	6019      	str	r1, [r3, #0]
    bf7a:	d1dd      	bne.n	bf38 <_free_r+0x24>
    bf7c:	6810      	ldr	r0, [r2, #0]
    bf7e:	6852      	ldr	r2, [r2, #4]
    bf80:	605a      	str	r2, [r3, #4]
    bf82:	4401      	add	r1, r0
    bf84:	6019      	str	r1, [r3, #0]
    bf86:	e7d7      	b.n	bf38 <_free_r+0x24>
    bf88:	d902      	bls.n	bf90 <_free_r+0x7c>
    bf8a:	230c      	movs	r3, #12
    bf8c:	602b      	str	r3, [r5, #0]
    bf8e:	e7d3      	b.n	bf38 <_free_r+0x24>
    bf90:	6820      	ldr	r0, [r4, #0]
    bf92:	1821      	adds	r1, r4, r0
    bf94:	428a      	cmp	r2, r1
    bf96:	bf04      	itt	eq
    bf98:	6811      	ldreq	r1, [r2, #0]
    bf9a:	6852      	ldreq	r2, [r2, #4]
    bf9c:	6062      	str	r2, [r4, #4]
    bf9e:	bf04      	itt	eq
    bfa0:	1809      	addeq	r1, r1, r0
    bfa2:	6021      	streq	r1, [r4, #0]
    bfa4:	605c      	str	r4, [r3, #4]
    bfa6:	e7c7      	b.n	bf38 <_free_r+0x24>
    bfa8:	bd38      	pop	{r3, r4, r5, pc}
    bfaa:	bf00      	nop
    bfac:	20007420 	.word	0x20007420

0000bfb0 <_realloc_r>:
    bfb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bfb2:	4607      	mov	r7, r0
    bfb4:	4614      	mov	r4, r2
    bfb6:	460e      	mov	r6, r1
    bfb8:	b921      	cbnz	r1, bfc4 <_realloc_r+0x14>
    bfba:	4611      	mov	r1, r2
    bfbc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    bfc0:	f7ff ba32 	b.w	b428 <_malloc_r>
    bfc4:	b922      	cbnz	r2, bfd0 <_realloc_r+0x20>
    bfc6:	f7ff ffa5 	bl	bf14 <_free_r>
    bfca:	4625      	mov	r5, r4
    bfcc:	4628      	mov	r0, r5
    bfce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bfd0:	f000 f821 	bl	c016 <_malloc_usable_size_r>
    bfd4:	4284      	cmp	r4, r0
    bfd6:	d90f      	bls.n	bff8 <_realloc_r+0x48>
    bfd8:	4621      	mov	r1, r4
    bfda:	4638      	mov	r0, r7
    bfdc:	f7ff fa24 	bl	b428 <_malloc_r>
    bfe0:	4605      	mov	r5, r0
    bfe2:	2800      	cmp	r0, #0
    bfe4:	d0f2      	beq.n	bfcc <_realloc_r+0x1c>
    bfe6:	4631      	mov	r1, r6
    bfe8:	4622      	mov	r2, r4
    bfea:	f7ff f9a6 	bl	b33a <memcpy>
    bfee:	4631      	mov	r1, r6
    bff0:	4638      	mov	r0, r7
    bff2:	f7ff ff8f 	bl	bf14 <_free_r>
    bff6:	e7e9      	b.n	bfcc <_realloc_r+0x1c>
    bff8:	4635      	mov	r5, r6
    bffa:	e7e7      	b.n	bfcc <_realloc_r+0x1c>

0000bffc <__ascii_wctomb>:
    bffc:	b149      	cbz	r1, c012 <STACK_SIZE+0x12>
    bffe:	2aff      	cmp	r2, #255	; 0xff
    c000:	bf85      	ittet	hi
    c002:	238a      	movhi	r3, #138	; 0x8a
    c004:	6003      	strhi	r3, [r0, #0]
    c006:	700a      	strbls	r2, [r1, #0]
    c008:	f04f 30ff 	movhi.w	r0, #4294967295
    c00c:	bf98      	it	ls
    c00e:	2001      	movls	r0, #1
    c010:	4770      	bx	lr
    c012:	4608      	mov	r0, r1
    c014:	4770      	bx	lr

0000c016 <_malloc_usable_size_r>:
    c016:	f851 0c04 	ldr.w	r0, [r1, #-4]
    c01a:	2800      	cmp	r0, #0
    c01c:	f1a0 0004 	sub.w	r0, r0, #4
    c020:	bfbc      	itt	lt
    c022:	580b      	ldrlt	r3, [r1, r0]
    c024:	18c0      	addlt	r0, r0, r3
    c026:	4770      	bx	lr

0000c028 <Representation.78639>:
    c028:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
    c038:	2e00 2f2e 6168 2f6c 6e69 6c63 6475 2f65     .../hal/include/
    c048:	6168 5f6c 6477 2e74 0068 4f47 444f 4100     hal_wdt.h.GOOD.A
    c058:	5443 5649 0045 494c 4b4e 4f44 4e57 4300     CTIVE.LINKDOWN.C
    c068:	756f 646c 4e20 544f 7220 6165 2064 7266     ould NOT read fr
    c078:	6d6f 7420 6568 7720 7461 7265 6420 7465     om the water det
    c088:	6365 6f74 2072 0d31 000a 6f43 6c75 2064     ector 1...Could 
    c098:	4f4e 2054 6572 6461 6620 6f72 206d 6874     NOT read from th
    c0a8:	2065 6177 6574 2072 6564 6574 7463 726f     e water detector
    c0b8:	3220 0a0d 4300 756f 646c 4e20 544f 7220      2...Could NOT r
    c0c8:	6165 2064 7266 6d6f 7420 6568 4820 2056     ead from the HV 
    c0d8:	6964 6976 6564 0d72 000a 6f43 6c75 2064     divider...Could 
    c0e8:	4f4e 2054 6572 6461 6620 6f72 206d 6874     NOT read from th
    c0f8:	2065 6f6d 7369 7574 6572 2620 7420 6d65     e moisture & tem
    c108:	2070 6573 736e 726f 6f20 206e 4143 4452     p sensor on CARD
    c118:	3a42 3249 2043 255b 5d69 0a0d 4c00 6469     B:I2C [%i]...Lid
    c128:	5420 4d41 4550 2052 255b 5d73 0a0d 4c00      TAMPER [%s]...L
    c138:	6665 2074 7445 6568 6e72 7465 5b20 7325     eft Ethernet [%s
    c148:	0d5d 000a 6952 6867 2074 7445 6568 6e72     ]...Right Ethern
    c158:	7465 5b20 7325 0d5d 000a 6f50 6577 2072     et [%s]...Power 
    c168:	2026 7445 6568 6e72 7465 3c20 6f43 6d6d     & Ethernet <Comm
    c178:	2073 694c 6b6e 203e 255b 5d73 0a0d 4300     s Link> [%s]...C
    c188:	756f 646c 6e20 746f 7220 6165 2064 3249     ould not read I2
    c198:	2043 7562 2073 6e6f 4320 5241 4144 6620     C bus on CARDA f
    c1a8:	726f 4920 4332 635f 6568 6b63 645f 7665     or I2C_check_dev
    c1b8:	6369 4965 2844 2029 255b 5d69 0a0d 4300     iceID() [%i]...C
    c1c8:	5241 4144 6920 736e 7265 6574 2064 7562     ARDA inserted bu
    c1d8:	2074 6f6e 2074 6469 6e65 6974 6966 6465     t not identified
    c1e8:	0a0d 4300 5241 4144 6920 2073 2061 414d     ...CARDA is a MA
    c1f8:	4958 4920 0d4f 000a 6f43 6c75 2064 4f4e     XI IO...Could NO
    c208:	2054 7277 7469 2065 6f74 7420 6568 4d20     T write to the M
    c218:	6e69 2d69 4f49 4520 7078 6e61 6564 2072     ini-IO Expander 
    c228:	6e6f 4320 5241 4144 493a 4332 5b20 6925     on CARDA:I2C [%i
    c238:	0d5d 000a 4143 4452 2041 7369 6120 4d20     ]...CARDA is a M
    c248:	4e49 2049 4f49 0a0d 4300 5241 4144 6920     INI IO...CARDA i
    c258:	2073 2061 4956 5242 5041 494f 544e 0a0d     s a VIBRAPOINT..
    c268:	4300 756f 646c 4e20 544f 7720 6972 6574     .Could NOT write
    c278:	7420 206f 6874 2065 4144 2043 6147 6e69      to the DAC Gain
    c288:	6320 6e6f 7274 6c6f 656c 2072 6e6f 4320      controller on C
    c298:	5241 4144 493a 4332 5b20 6925 0d5d 000a     ARDA:I2C [%i]...
    c2a8:	4143 4452 2041 7369 6120 5620 4249 4152     CARDA is a VIBRA
    c2b8:	4554 0d4b 000a 535b 4950 4b5f 5a53 3738     TEK...[SPI_KSZ87
    c2c8:	3439 505f 524f 3354 4f43 544e 4f52 324c     94_PORT3CONTROL2
    c2d8:	205d 6f6e 2074 6f63 7272 6365 0d74 000a     ] not correct...
    c2e8:	4143 4452 2041 7369 6120 5020 776f 7265     CARDA is a Power
    c2f8:	2620 4520 6874 7265 656e 2074 6144 6775      & Ethernet Daug
    c308:	7468 7265 432d 7261 0d64 000a 4143 4452     hter-Card...CARD
    c318:	2041 6168 2073 6562 6e65 5220 4d45 564f     A has been REMOV
    c328:	4445 0a0d 4300 756f 646c 6e20 746f 7220     ED...Could not r
    c338:	6165 2064 3249 2043 7562 2073 6e6f 4320     ead I2C bus on C
    c348:	5241 4244 6620 726f 4920 4332 635f 6568     ARDB for I2C_che
    c358:	6b63 645f 7665 6369 4965 2844 2029 255b     ck_deviceID() [%
    c368:	5d69 0a0d 4300 5241 4244 6920 736e 7265     i]...CARDB inser
    c378:	6574 2064 7562 2074 6f6e 2074 6469 6e65     ted but not iden
    c388:	6974 6966 6465 0a0d 4300 5241 4244 6920     tified...CARDB i
    c398:	2073 2061 414d 4958 4920 0d4f 000a 6f43     s a MAXI IO...Co
    c3a8:	6c75 2064 4f4e 2054 7277 7469 2065 6f74     uld NOT write to
    c3b8:	7420 6568 4d20 6e69 2d69 4f49 4520 7078      the Mini-IO Exp
    c3c8:	6e61 6564 2072 6e6f 4320 5241 4244 493a     ander on CARDB:I
    c3d8:	4332 5b20 6925 0d5d 000a 4143 4452 2042     2C [%i]...CARDB 
    c3e8:	7369 6120 4d20 4e49 2049 4f49 0a0d 4300     is a MINI IO...C
    c3f8:	5241 4244 6920 2073 2061 4956 5242 5041     ARDB is a VIBRAP
    c408:	494f 544e 0a0d 4300 756f 646c 4e20 544f     OINT...Could NOT
    c418:	7720 6972 6574 7420 206f 6874 2065 4144      write to the DA
    c428:	2043 6147 6e69 6320 6e6f 7274 6c6f 656c     C Gain controlle
    c438:	2072 6e6f 4320 5241 4244 493a 4332 5b20     r on CARDB:I2C [
    c448:	6925 0d5d 000a 4143 4452 2042 7369 6120     %i]...CARDB is a
    c458:	5620 4249 4152 4554 0d4b 000a 4143 4452      VIBRATEK...CARD
    c468:	2042 6168 2073 6562 6e65 5220 4d45 564f     B has been REMOV
    c478:	4445 0a0d 2e00 2f2e 6168 2f6c 7273 2f63     ED...../hal/src/
    c488:	6168 5f6c 6461 5f63 7973 636e 632e 2e00     hal_adc_sync.c..
    c498:	2f2e 6168 2f6c 7273 2f63 6168 5f6c 6561     ./hal/src/hal_ae
    c4a8:	5f73 7973 636e 632e 2e00 2f2e 6168 2f6c     s_sync.c.../hal/
    c4b8:	7273 2f63 6168 5f6c 7263 5f63 7973 636e     src/hal_crc_sync
    c4c8:	632e 2e00 2f2e 6168 2f6c 7273 2f63 6168     .c.../hal/src/ha
    c4d8:	5f6c 6c66 7361 2e68 0063 2e2e 682f 6c61     l_flash.c.../hal
    c4e8:	732f 6372 682f 6c61 695f 2e6f 0063 2e2e     /src/hal_io.c...
    c4f8:	682f 6c61 732f 6372 682f 6c61 6d5f 6361     /hal/src/hal_mac
    c508:	615f 7973 636e 632e 2e00 2f2e 6168 2f6c     _async.c.../hal/
    c518:	7273 2f63 6168 5f6c 6873 5f61 7973 636e     src/hal_sha_sync
    c528:	632e 2e00 2f2e 6168 2f6c 7273 2f63 6168     .c.../hal/src/ha
    c538:	5f6c 6974 656d 2e72 0063 2e2e 682f 6c61     l_timer.c.../hal
    c548:	732f 6372 682f 6c61 755f 6173 7472 615f     /src/hal_usart_a
    c558:	7973 636e 632e 2e00 2f2e 6168 2f6c 7475     sync.c.../hal/ut
    c568:	6c69 2f73 7273 2f63 7475 6c69 5f73 696c     ils/src/utils_li
    c578:	7473 632e 2e00 2f2e 6168 2f6c 7475 6c69     st.c.../hal/util
    c588:	2f73 7273 2f63 7475 6c69 5f73 6972 676e     s/src/utils_ring
    c598:	7562 6666 7265 632e 0000                    buffer.c..

0000c5a2 <_adcs>:
    c5a2:	0000 0340 0018 0003 1800 0000 0000 0000     ..@.............
    c5b2:	0000 0000 0000 2e2e 682f 6c70 612f 6364     ......../hpl/adc
    c5c2:	682f 6c70 615f 6364 632e 0000 0000          /hpl_adc.c....

0000c5d0 <_cfgs>:
    c5d0:	4500 0000 0000 1600 0000 0000 0000 0000     .E..............
	...
    c6d0:	2e2e 682f 6c70 6e2f 6d76 7463 6c72 682f     ../hpl/nvmctrl/h
    c6e0:	6c70 6e5f 6d76 7463 6c72 632e 0000 0000     pl_nvmctrl.c....
    c6f0:	3000 4000 3400 4000 2000 4101 4000 4101     .0.@.4.@. .A.@.A
    c700:	0000 4300 0400 4300 0800 4300 0c00 4300     ...C...C...C...C

0000c710 <_usarts>:
    c710:	0000 0000 0084 4010 0000 0003 0002 0070     .......@......p.
    c720:	f4bc 0000 0000 0000 0005 0000 0084 4010     ...............@
    c730:	0000 0003 0002 0070 f4bc 0000 0000 0000     ......p.........

0000c740 <_i2cms>:
	...

0000c758 <sercomspi_regs>:
    c758:	018c 0013 0000 0002 0000 0000 001d 01ff     ................
    c768:	2e04 2f2e 7068 2f6c 6573 6372 6d6f 682f     .../hpl/sercom/h
    c778:	6c70 735f 7265 6f63 2e6d 0063 3800 4000     pl_sercom.c..8.@
    c788:	3c00 4000 a000 4101 c000 4101 1400 4200     .<.@...A...A...B
    c798:	1800 4200 1400 4300 1800 4300               ...B...C...C

0000c7a4 <_tcs>:
    c7a4:	0000 006b 07d8 0000 0000 0001 002e 0000     ..k.............
    c7b4:	0000 0000 2e2e 682f 6c70 742f 2f63 7068     ....../hpl/tc/hp
    c7c4:	5f6c 6374 632e 0000                         l_tc.c..

0000c7cc <_usb_ep_cfgs>:
    c7cc:	71fc 2000 0000 0000 0040 0000 71bc 2000     .q. ....@....q. 
    c7dc:	0000 0000 0040 0000 717c 2000 0000 0000     ....@...|q. ....
    c7ec:	0040 0000 2e2e 682f 6c70 772f 7464 682f     @...../hpl/wdt/h
    c7fc:	6c70 775f 7464 632e 2e00 2f2e 7068 2f6c     pl_wdt.c.../hpl/
    c80c:	6f70 7472 682f 6c70 675f 6970 5f6f 6162     port/hpl_gpio_ba
    c81c:	6573 682e 5500 4253 6920 696e 2f74 6e65     se.h.USB init/en
    c82c:	6261 656c 4520 5252 524f 2121 2121 2121     able ERROR!!!!!!
    c83c:	0d21 000a 7375 5f62 6e69 7469 2928 0a0d     !...usb_init()..
    c84c:	6300 6364 645f 7665 6369 5f65 6361 5f6d     .cdc_device_acm_
    c85c:	6e69 7469 2928 0a0d 6300 6364 6664 615f     init()...cdcdf_a
    c86c:	6d63 725f 6765 7369 6574 5f72 6163 6c6c     cm_register_call
    c87c:	6162 6b63 4328 4344 4644 415f 4d43 435f     back(CDCDF_ACM_C
    c88c:	5f42 5453 5441 5f45 2c43 2820 5546 434e     B_STATE_C, (FUNC
    c89c:	505f 5254 7529 6273 645f 7665 6369 5f65     _PTR)usb_device_
    c8ac:	6263 735f 6174 6574 635f 0d29 000a 6f43     cb_state_c)...Co
    c8bc:	666e 6769 7275 6e69 2067 6e61 2064 6863     nfiguring and ch
    c8cc:	6365 696b 676e 7420 6568 5320 4950 4b20     ecking the SPI K
    c8dc:	5a53 3738 3439 4520 6874 7265 656e 2074     SZ8794 Ethernet 
    c8ec:	5753 5449 4843 7220 6765 7369 6574 7372     SWITCH registers
    c8fc:	2e2e 0d2e 000a 535b 4950 4b5f 5a53 3738     ......[SPI_KSZ87
    c90c:	3439 465f 4d41 4c49 5f59 4449 205d 6f6e     94_FAMILY_ID] no
    c91c:	2074 6f63 7272 6365 0d74 000a 535b 4950     t correct...[SPI
    c92c:	4b5f 5a53 3738 3439 535f 4154 5452 6620     _KSZ8794_START f
    c93c:	7269 7473 205d 6f6e 2074 6f63 7272 6365     irst] not correc
    c94c:	0d74 000a 535b 4950 4b5f 5a53 3738 3439     t...[SPI_KSZ8794
    c95c:	475f 4f4c 4142 304c 205d 6f6e 2074 6f63     _GLOBAL0] not co
    c96c:	7272 6365 0d74 000a 535b 4950 4b5f 5a53     rrect...[SPI_KSZ
    c97c:	3738 3439 475f 4f4c 4142 314c 205d 6f6e     8794_GLOBAL1] no
    c98c:	2074 6f63 7272 6365 0d74 000a 535b 4950     t correct...[SPI
    c99c:	4b5f 5a53 3738 3439 475f 4f4c 4142 324c     _KSZ8794_GLOBAL2
    c9ac:	205d 6f6e 2074 6f63 7272 6365 0d74 000a     ] not correct...
    c9bc:	535b 4950 4b5f 5a53 3738 3439 475f 4f4c     [SPI_KSZ8794_GLO
    c9cc:	4142 334c 205d 6f6e 2074 6f63 7272 6365     BAL3] not correc
    c9dc:	0d74 000a 535b 4950 4b5f 5a53 3738 3439     t...[SPI_KSZ8794
    c9ec:	475f 4f4c 4142 344c 205d 6f6e 2074 6f63     _GLOBAL4] not co
    c9fc:	7272 6365 0d74 000a 535b 4950 4b5f 5a53     rrect...[SPI_KSZ
    ca0c:	3738 3439 475f 4f4c 4142 354c 205d 6f6e     8794_GLOBAL5] no
    ca1c:	2074 6f63 7272 6365 0d74 000a 535b 4950     t correct...[SPI
    ca2c:	4b5f 5a53 3738 3439 475f 4f4c 4142 364c     _KSZ8794_GLOBAL6
    ca3c:	205d 6f6e 2074 6f63 7272 6365 0d74 000a     ] not correct...
    ca4c:	535b 4950 4b5f 5a53 3738 3439 475f 4f4c     [SPI_KSZ8794_GLO
    ca5c:	4142 394c 205d 6f6e 2074 6f63 7272 6365     BAL9] not correc
    ca6c:	0d74 000a 535b 4950 4b5f 5a53 3738 3439     t...[SPI_KSZ8794
    ca7c:	475f 4f4c 4142 314c 5d30 6e20 746f 6320     _GLOBAL10] not c
    ca8c:	726f 6572 7463 0a0d 5b00 5053 5f49 534b     orrect...[SPI_KS
    ca9c:	385a 3937 5f34 4450 434d 5d31 6e20 746f     Z8794_PDMC1] not
    caac:	6320 726f 6572 7463 0a0d 5b00 5053 5f49      correct...[SPI_
    cabc:	534b 385a 3937 5f34 4450 434d 5d32 6e20     KSZ8794_PDMC2] n
    cacc:	746f 6320 726f 6572 7463 0a0d 5b00 5053     ot correct...[SP
    cadc:	5f49 534b 385a 3937 5f34 4f50 5452 4331     I_KSZ8794_PORT1C
    caec:	4e4f 5254 4c4f 5d30 6e20 746f 6320 726f     ONTROL0] not cor
    cafc:	6572 7463 0a0d 5b00 5053 5f49 534b 385a     rect...[SPI_KSZ8
    cb0c:	3937 5f34 4f50 5452 4332 4e4f 5254 4c4f     794_PORT2CONTROL
    cb1c:	5d30 6e20 746f 6320 726f 6572 7463 0a0d     0] not correct..
    cb2c:	5b00 5053 5f49 534b 385a 3937 5f34 4f50     .[SPI_KSZ8794_PO
    cb3c:	5452 4333 4e4f 5254 4c4f 5d30 6e20 746f     RT3CONTROL0] not
    cb4c:	6320 726f 6572 7463 0a0d 5b00 5053 5f49      correct...[SPI_
    cb5c:	534b 385a 3937 5f34 4f50 5452 4334 4e4f     KSZ8794_PORT4CON
    cb6c:	5254 4c4f 5d30 6e20 746f 6320 726f 6572     TROL0] not corre
    cb7c:	7463 0a0d 5b00 5053 5f49 534b 385a 3937     ct...[SPI_KSZ879
    cb8c:	5f34 4f50 5452 4331 4e4f 5254 4c4f 5d31     4_PORT1CONTROL1]
    cb9c:	6e20 746f 6320 726f 6572 7463 0a0d 5b00      not correct...[
    cbac:	5053 5f49 534b 385a 3937 5f34 4f50 5452     SPI_KSZ8794_PORT
    cbbc:	4332 4e4f 5254 4c4f 5d31 6e20 746f 6320     2CONTROL1] not c
    cbcc:	726f 6572 7463 0a0d 5b00 5053 5f49 534b     orrect...[SPI_KS
    cbdc:	385a 3937 5f34 4f50 5452 4333 4e4f 5254     Z8794_PORT3CONTR
    cbec:	4c4f 5d31 6e20 746f 6320 726f 6572 7463     OL1] not correct
    cbfc:	0a0d 5b00 5053 5f49 534b 385a 3937 5f34     ...[SPI_KSZ8794_
    cc0c:	4f50 5452 4334 4e4f 5254 4c4f 5d31 6e20     PORT4CONTROL1] n
    cc1c:	746f 6320 726f 6572 7463 0a0d 5b00 5053     ot correct...[SP
    cc2c:	5f49 534b 385a 3937 5f34 4f50 5452 4331     I_KSZ8794_PORT1C
    cc3c:	4e4f 5254 4c4f 5d32 6e20 746f 6320 726f     ONTROL2] not cor
    cc4c:	6572 7463 0a0d 5b00 5053 5f49 534b 385a     rect...[SPI_KSZ8
    cc5c:	3937 5f34 4f50 5452 4332 4e4f 5254 4c4f     794_PORT2CONTROL
    cc6c:	5d32 6e20 746f 6320 726f 6572 7463 0a0d     2] not correct..
    cc7c:	5b00 5053 5f49 534b 385a 3937 5f34 4f50     .[SPI_KSZ8794_PO
    cc8c:	5452 4334 4e4f 5254 4c4f 5d32 6e20 746f     RT4CONTROL2] not
    cc9c:	6320 726f 6572 7463 0a0d 5b00 5053 5f49      correct...[SPI_
    ccac:	534b 385a 3937 5f34 4f50 5452 4331 4e4f     KSZ8794_PORT1CON
    ccbc:	5254 4c4f 5d33 6e20 746f 6320 726f 6572     TROL3] not corre
    cccc:	7463 0a0d 5b00 5053 5f49 534b 385a 3937     ct...[SPI_KSZ879
    ccdc:	5f34 4f50 5452 4332 4e4f 5254 4c4f 5d33     4_PORT2CONTROL3]
    ccec:	6e20 746f 6320 726f 6572 7463 0a0d 5b00      not correct...[
    ccfc:	5053 5f49 534b 385a 3937 5f34 4f50 5452     SPI_KSZ8794_PORT
    cd0c:	4333 4e4f 5254 4c4f 5d33 6e20 746f 6320     3CONTROL3] not c
    cd1c:	726f 6572 7463 0a0d 5b00 5053 5f49 534b     orrect...[SPI_KS
    cd2c:	385a 3937 5f34 4f50 5452 4334 4e4f 5254     Z8794_PORT4CONTR
    cd3c:	4c4f 5d33 6e20 746f 6320 726f 6572 7463     OL3] not correct
    cd4c:	0a0d 5b00 5053 5f49 534b 385a 3937 5f34     ...[SPI_KSZ8794_
    cd5c:	4f50 5452 4331 4e4f 5254 4c4f 5d34 6e20     PORT1CONTROL4] n
    cd6c:	746f 6320 726f 6572 7463 0a0d 5b00 5053     ot correct...[SP
    cd7c:	5f49 534b 385a 3937 5f34 4f50 5452 4332     I_KSZ8794_PORT2C
    cd8c:	4e4f 5254 4c4f 5d34 6e20 746f 6320 726f     ONTROL4] not cor
    cd9c:	6572 7463 0a0d 5b00 5053 5f49 534b 385a     rect...[SPI_KSZ8
    cdac:	3937 5f34 4f50 5452 4333 4e4f 5254 4c4f     794_PORT3CONTROL
    cdbc:	5d34 6e20 746f 6320 726f 6572 7463 0a0d     4] not correct..
    cdcc:	5b00 5053 5f49 534b 385a 3937 5f34 4f50     .[SPI_KSZ8794_PO
    cddc:	5452 4334 4e4f 5254 4c4f 5d34 6e20 746f     RT4CONTROL4] not
    cdec:	6320 726f 6572 7463 0a0d 5b00 5053 5f49      correct...[SPI_
    cdfc:	534b 385a 3937 5f34 4f50 5452 4331 4e4f     KSZ8794_PORT1CON
    ce0c:	5254 4c4f 5d35 6e20 746f 6320 726f 6572     TROL5] not corre
    ce1c:	7463 0a0d 5b00 5053 5f49 534b 385a 3937     ct...[SPI_KSZ879
    ce2c:	5f34 4f50 5452 4332 4e4f 5254 4c4f 5d35     4_PORT2CONTROL5]
    ce3c:	6e20 746f 6320 726f 6572 7463 0a0d 5b00      not correct...[
    ce4c:	5053 5f49 534b 385a 3937 5f34 4f50 5452     SPI_KSZ8794_PORT
    ce5c:	4333 4e4f 5254 4c4f 5d35 6e20 746f 6320     3CONTROL5] not c
    ce6c:	726f 6572 7463 0a0d 5b00 5053 5f49 534b     orrect...[SPI_KS
    ce7c:	385a 3937 5f34 4f50 5452 4334 4e4f 5254     Z8794_PORT4CONTR
    ce8c:	4c4f 5d35 6e20 746f 6320 726f 6572 7463     OL5] not correct
    ce9c:	0a0d 5b00 5053 5f49 534b 385a 3937 5f34     ...[SPI_KSZ8794_
    ceac:	4f50 5452 4334 4e4f 5254 4c4f 5d36 6e20     PORT4CONTROL6] n
    cebc:	746f 6320 726f 6572 7463 0a0d 5b00 5053     ot correct...[SP
    cecc:	5f49 534b 385a 3937 5f34 4f50 5452 4331     I_KSZ8794_PORT1C
    cedc:	4e4f 5254 4c4f 5d37 6e20 746f 6320 726f     ONTROL7] not cor
    ceec:	6572 7463 0a0d 5b00 5053 5f49 534b 385a     rect...[SPI_KSZ8
    cefc:	3937 5f34 4f50 5452 4332 4e4f 5254 4c4f     794_PORT2CONTROL
    cf0c:	5d37 6e20 746f 6320 726f 6572 7463 0a0d     7] not correct..
    cf1c:	5b00 5053 5f49 534b 385a 3937 5f34 4f50     .[SPI_KSZ8794_PO
    cf2c:	5452 4333 4e4f 5254 4c4f 5d37 6e20 746f     RT3CONTROL7] not
    cf3c:	6320 726f 6572 7463 0a0d 5b00 5053 5f49      correct...[SPI_
    cf4c:	534b 385a 3937 5f34 4f50 5452 4331 4e4f     KSZ8794_PORT1CON
    cf5c:	5254 4c4f 5d38 6e20 746f 6320 726f 6572     TROL8] not corre
    cf6c:	7463 0a0d 5b00 5053 5f49 534b 385a 3937     ct...[SPI_KSZ879
    cf7c:	5f34 4f50 5452 4332 4e4f 5254 4c4f 5d38     4_PORT2CONTROL8]
    cf8c:	6e20 746f 6320 726f 6572 7463 0a0d 5b00      not correct...[
    cf9c:	5053 5f49 534b 385a 3937 5f34 4f50 5452     SPI_KSZ8794_PORT
    cfac:	4333 4e4f 5254 4c4f 5d38 6e20 746f 6320     3CONTROL8] not c
    cfbc:	726f 6572 7463 0a0d 5b00 5053 5f49 534b     orrect...[SPI_KS
    cfcc:	385a 3937 5f34 4f50 5452 4c31 4e49 4d4b     Z8794_PORT1LINKM
    cfdc:	5d44 6e20 746f 6320 726f 6572 7463 0a0d     D] not correct..
    cfec:	5b00 5053 5f49 534b 385a 3937 5f34 4f50     .[SPI_KSZ8794_PO
    cffc:	5452 4c32 4e49 4d4b 5d44 6e20 746f 6320     RT2LINKMD] not c
    d00c:	726f 6572 7463 0a0d 5b00 5053 5f49 534b     orrect...[SPI_KS
    d01c:	385a 3937 5f34 4f50 5452 4c33 4e49 4d4b     Z8794_PORT3LINKM
    d02c:	5d44 6e20 746f 6320 726f 6572 7463 0a0d     D] not correct..
    d03c:	5b00 5053 5f49 534b 385a 3937 5f34 4f50     .[SPI_KSZ8794_PO
    d04c:	5452 4331 4e4f 5254 4c4f 5d39 6e20 746f     RT1CONTROL9] not
    d05c:	6320 726f 6572 7463 0a0d 5b00 5053 5f49      correct...[SPI_
    d06c:	534b 385a 3937 5f34 4f50 5452 4332 4e4f     KSZ8794_PORT2CON
    d07c:	5254 4c4f 5d39 6e20 746f 6320 726f 6572     TROL9] not corre
    d08c:	7463 0a0d 5b00 5053 5f49 534b 385a 3937     ct...[SPI_KSZ879
    d09c:	5f34 4f50 5452 4333 4e4f 5254 4c4f 5d39     4_PORT3CONTROL9]
    d0ac:	6e20 746f 6320 726f 6572 7463 0a0d 5b00      not correct...[
    d0bc:	5053 5f49 534b 385a 3937 5f34 4f50 5452     SPI_KSZ8794_PORT
    d0cc:	4331 4e4f 5254 4c4f 3031 205d 6f6e 2074     1CONTROL10] not 
    d0dc:	6f63 7272 6365 0d74 000a 535b 4950 4b5f     correct...[SPI_K
    d0ec:	5a53 3738 3439 505f 524f 3254 4f43 544e     SZ8794_PORT2CONT
    d0fc:	4f52 314c 5d30 6e20 746f 6320 726f 6572     ROL10] not corre
    d10c:	7463 0a0d 5b00 5053 5f49 534b 385a 3937     ct...[SPI_KSZ879
    d11c:	5f34 4f50 5452 4333 4e4f 5254 4c4f 3031     4_PORT3CONTROL10
    d12c:	205d 6f6e 2074 6f63 7272 6365 0d74 000a     ] not correct...
    d13c:	535b 4950 4b5f 5a53 3738 3439 505f 524f     [SPI_KSZ8794_POR
    d14c:	3254 4f43 544e 4f52 324c 5d30 6e20 746f     T2CONTROL20] not
    d15c:	6320 726f 6572 7463 0a0d 5b00 5053 5f49      correct...[SPI_
    d16c:	534b 385a 3937 5f34 4f50 5452 4331 4e4f     KSZ8794_PORT1CON
    d17c:	5254 4c4f 3231 205d 6f6e 2074 6f63 7272     TROL12] not corr
    d18c:	6365 0d74 000a 535b 4950 4b5f 5a53 3738     ect...[SPI_KSZ87
    d19c:	3439 505f 524f 3254 4f43 544e 4f52 314c     94_PORT2CONTROL1
    d1ac:	5d32 6e20 746f 6320 726f 6572 7463 0a0d     2] not correct..
    d1bc:	5b00 5053 5f49 534b 385a 3937 5f34 4f50     .[SPI_KSZ8794_PO
    d1cc:	5452 4333 4e4f 5254 4c4f 3231 205d 6f6e     RT3CONTROL12] no
    d1dc:	2074 6f63 7272 6365 0d74 000a 535b 4950     t correct...[SPI
    d1ec:	4b5f 5a53 3738 3439 505f 524f 3454 4f43     _KSZ8794_PORT4CO
    d1fc:	544e 4f52 314c 5d32 6e20 746f 6320 726f     NTROL12] not cor
    d20c:	6572 7463 0a0d 5b00 5053 5f49 534b 385a     rect...[SPI_KSZ8
    d21c:	3937 5f34 4f50 5452 4331 4e4f 5254 4c4f     794_PORT1CONTROL
    d22c:	3331 205d 6f6e 2074 6f63 7272 6365 0d74     13] not correct.
    d23c:	000a 535b 4950 4b5f 5a53 3738 3439 505f     ..[SPI_KSZ8794_P
    d24c:	524f 3254 4f43 544e 4f52 314c 5d33 6e20     ORT2CONTROL13] n
    d25c:	746f 6320 726f 6572 7463 0a0d 5b00 5053     ot correct...[SP
    d26c:	5f49 534b 385a 3937 5f34 4f50 5452 4333     I_KSZ8794_PORT3C
    d27c:	4e4f 5254 4c4f 3331 205d 6f6e 2074 6f63     ONTROL13] not co
    d28c:	7272 6365 0d74 000a 535b 4950 4b5f 5a53     rrect...[SPI_KSZ
    d29c:	3738 3439 505f 524f 3454 4f43 544e 4f52     8794_PORT4CONTRO
    d2ac:	314c 5d33 6e20 746f 6320 726f 6572 7463     L13] not correct
    d2bc:	0a0d 5b00 5053 5f49 534b 385a 3937 5f34     ...[SPI_KSZ8794_
    d2cc:	4f50 5452 4331 4e4f 5254 4c4f 3431 205d     PORT1CONTROL14] 
    d2dc:	6f6e 2074 6f63 7272 6365 0d74 000a 535b     not correct...[S
    d2ec:	4950 4b5f 5a53 3738 3439 505f 524f 3254     PI_KSZ8794_PORT2
    d2fc:	4f43 544e 4f52 314c 5d34 6e20 746f 6320     CONTROL14] not c
    d30c:	726f 6572 7463 0a0d 5b00 5053 5f49 534b     orrect...[SPI_KS
    d31c:	385a 3937 5f34 4f50 5452 4333 4e4f 5254     Z8794_PORT3CONTR
    d32c:	4c4f 3431 205d 6f6e 2074 6f63 7272 6365     OL14] not correc
    d33c:	0d74 000a 535b 4950 4b5f 5a53 3738 3439     t...[SPI_KSZ8794
    d34c:	505f 524f 3454 4f43 544e 4f52 314c 5d34     _PORT4CONTROL14]
    d35c:	6e20 746f 6320 726f 6572 7463 0a0d 5b00      not correct...[
    d36c:	5053 5f49 534b 385a 3937 5f34 4f50 5452     SPI_KSZ8794_PORT
    d37c:	4331 4e4f 5254 4c4f 3531 205d 6f6e 2074     1CONTROL15] not 
    d38c:	6f63 7272 6365 0d74 000a 535b 4950 4b5f     correct...[SPI_K
    d39c:	5a53 3738 3439 505f 524f 3254 4f43 544e     SZ8794_PORT2CONT
    d3ac:	4f52 314c 5d35 6e20 746f 6320 726f 6572     ROL15] not corre
    d3bc:	7463 0a0d 5b00 5053 5f49 534b 385a 3937     ct...[SPI_KSZ879
    d3cc:	5f34 4f50 5452 4333 4e4f 5254 4c4f 3531     4_PORT3CONTROL15
    d3dc:	205d 6f6e 2074 6f63 7272 6365 0d74 000a     ] not correct...
    d3ec:	535b 4950 4b5f 5a53 3738 3439 505f 524f     [SPI_KSZ8794_POR
    d3fc:	3454 4f43 544e 4f52 314c 5d35 6e20 746f     T4CONTROL15] not
    d40c:	6320 726f 6572 7463 0a0d 5b00 5053 5f49      correct...[SPI_
    d41c:	534b 385a 3937 5f34 4f50 5452 4331 4e4f     KSZ8794_PORT1CON
    d42c:	5254 4c4f 3631 205d 6f6e 2074 6f63 7272     TROL16] not corr
    d43c:	6365 0d74 000a 535b 4950 4b5f 5a53 3738     ect...[SPI_KSZ87
    d44c:	3439 505f 524f 3254 4f43 544e 4f52 314c     94_PORT2CONTROL1
    d45c:	5d36 6e20 746f 6320 726f 6572 7463 0a0d     6] not correct..
    d46c:	5b00 5053 5f49 534b 385a 3937 5f34 4f50     .[SPI_KSZ8794_PO
    d47c:	5452 4333 4e4f 5254 4c4f 3631 205d 6f6e     RT3CONTROL16] no
    d48c:	2074 6f63 7272 6365 0d74 000a 535b 4950     t correct...[SPI
    d49c:	4b5f 5a53 3738 3439 505f 524f 3454 4f43     _KSZ8794_PORT4CO
    d4ac:	544e 4f52 314c 5d36 6e20 746f 6320 726f     NTROL16] not cor
    d4bc:	6572 7463 0a0d 5b00 5053 5f49 534b 385a     rect...[SPI_KSZ8
    d4cc:	3937 5f34 4f50 5452 4331 4e4f 5254 4c4f     794_PORT1CONTROL
    d4dc:	3731 205d 6f6e 2074 6f63 7272 6365 0d74     17] not correct.
    d4ec:	000a 535b 4950 4b5f 5a53 3738 3439 505f     ..[SPI_KSZ8794_P
    d4fc:	524f 3254 4f43 544e 4f52 314c 5d37 6e20     ORT2CONTROL17] n
    d50c:	746f 6320 726f 6572 7463 0a0d 5b00 5053     ot correct...[SP
    d51c:	5f49 534b 385a 3937 5f34 4f50 5452 4333     I_KSZ8794_PORT3C
    d52c:	4e4f 5254 4c4f 3731 205d 6f6e 2074 6f63     ONTROL17] not co
    d53c:	7272 6365 0d74 000a 535b 4950 4b5f 5a53     rrect...[SPI_KSZ
    d54c:	3738 3439 505f 524f 3454 4f43 544e 4f52     8794_PORT4CONTRO
    d55c:	314c 5d37 6e20 746f 6320 726f 6572 7463     L17] not correct
    d56c:	0a0d 5b00 5053 5f49 534b 385a 3937 5f34     ...[SPI_KSZ8794_
    d57c:	5453 5241 2054 6966 616e 5d6c 6e20 746f     START final] not
    d58c:	6320 726f 6572 7463 0a0d 4d00 4341 6120      correct...MAC a
    d59c:	6464 6572 7373 6120 646e 4920 2050 6373     ddress and IP sc
    d5ac:	6568 656d 6e20 746f 6920 696e 6974 6c61     heme not initial
    d5bc:	7a69 6465 6120 2073 6874 7265 2065 7369     ized as there is
    d5cc:	6e20 206f 495b 5d44 7320 7465 2e2e 0d2e      no [ID] set....
    d5dc:	000a 754d 746c 5369 6e65 6573 5b20 6e69     ..MultiSense [in
    d5ec:	7469 4d20 4341 492f 2050 6176 756c 7365     it MAC/IP values
    d5fc:	205d 7825 253a 3a78 7825 253a 3a78 7825     ] %x:%x:%x:%x:%x
    d60c:	253a 2078 6425 252e 2e64 6425 252e 0d64     :%x %d.%d.%d.%d.
    d61c:	000a 614d 6e69 5520 5044 7320 636f 656b     ..Main UDP socke
    d62c:	2074 7263 6165 6574 2e64 2e2e 0a0d 4d00     t created......M
    d63c:	6961 206e 4455 2050 6f73 6b63 7465 4520     ain UDP socket E
    d64c:	5252 524f 2121 2121 2121 0d21 000a 6143     RROR!!!!!!!...Ca
    d65c:	6472 5b20 5d41 5520 5044 7320 636f 656b     rd [A] UDP socke
    d66c:	2074 7263 6165 6574 2e64 2e2e 0a0d 4300     t created......C
    d67c:	7261 2064 415b 205d 4455 2050 6f73 6b63     ard [A] UDP sock
    d68c:	7465 4520 5252 524f 2121 2121 2121 0d21     et ERROR!!!!!!!.
    d69c:	000a 6143 6472 5b20 5d42 5520 5044 7320     ..Card [B] UDP s
    d6ac:	636f 656b 2074 7263 6165 6574 2e64 2e2e     ocket created...
    d6bc:	0a0d 4300 7261 2064 425b 205d 4455 2050     ...Card [B] UDP 
    d6cc:	6f73 6b63 7465 4520 5252 524f 2121 2121     socket ERROR!!!!
    d6dc:	2121 0d21 000a 6952 676e 4d20 6e61 6761     !!!...Ring Manag
    d6ec:	6d65 6e65 2074 4455 2050 6f73 6b63 7465     ement UDP socket
    d6fc:	6320 6572 7461 6465 2e2e 0d2e 000a 6952      created......Ri
    d70c:	676e 4d20 6e61 6761 6d65 6e65 2074 4455     ng Management UD
    d71c:	2050 6f73 6b63 7465 4520 5252 524f 2121     P socket ERROR!!
    d72c:	2121 2121 0d21 000a 754d 746c 5369 6e65     !!!!!...MultiSen
    d73c:	6573 5b20 6f63 666e 6769 7275 7461 6f69     se [configuratio
    d74c:	206e 5245 4f52 2052 4552 4441 4e49 5d47     n ERROR READING]
    d75c:	0a0d 4d00 6c75 6974 6553 736e 2065 635b     ...MultiSense [c
    d76c:	6e6f 6966 7567 6172 6974 6e6f 4920 564e     onfiguration INV
    d77c:	4c41 4449 0d5d 000a 554d 544c 5349 4e45     ALID]...MULTISEN
    d78c:	4553 4e20 4545 5344 4320 4e4f 4946 5547     SE NEEDS CONFIGU
    d79c:	4952 474e 2e2e 002e 754d 746c 5369 6e65     RING....MultiSen
    d7ac:	6573 5b20 6f63 666e 6769 7275 7461 6f69     se [configuratio
    d7bc:	206e 4f46 4d52 5441 4554 5d44 0a0d 4d00     n FORMATTED]...M
    d7cc:	6c75 6974 6553 736e 2065 635b 6e6f 6966     ultiSense [confi
    d7dc:	7567 6172 6974 6e6f 4520 5252 524f 5720     guration ERROR W
    d7ec:	4952 4954 474e 0d5d 000a 754d 746c 5369     RITING]...MultiS
    d7fc:	6e65 6573 5b20 6f63 666e 6769 7275 7461     ense [configurat
    d80c:	6f69 206e 5257 5449 4554 5d4e 0a0d 4d00     ion WRITTEN]...M
    d81c:	6c75 6974 6553 736e 2065 555b 4450 5441     ultiSense [UPDAT
    d82c:	4445 3c20 4449 203e 6f63 666e 6769 7275     ED <ID> configur
    d83c:	7461 6f69 206e 5257 5449 4554 5d4e 0a0d     ation WRITTEN]..
    d84c:	4700 6f6c 6162 206c 6573 7474 6e69 7367     .Global settings
    d85c:	7020 6361 656b 2074 6572 6563 7669 6465      packet received
    d86c:	2e2e 0d2e 000a 6143 6472 2041 694d 696e     ......CardA Mini
    d87c:	492d 204f 6170 6b63 7465 7220 6365 6965     -IO packet recei
    d88c:	6576 2e64 2e2e 0a0d 4300 7261 4264 4d20     ved......CardB M
    d89c:	6e69 2d69 4f49 7020 6361 656b 2074 6572     ini-IO packet re
    d8ac:	6563 7669 6465 2e2e 0d2e 000a 7242 616f     ceived......Broa
    d8bc:	6364 7361 2074 6154 6c62 2065 465b 554c     dcast Table [FLU
    d8cc:	4853 205d 4455 2050 6170 6b63 7465 6120     SH] UDP packet a
    d8dc:	7272 7669 6465 2e2e 0d2e 000a 6148 6472     rrived......Hard
    d8ec:	6177 6572 7020 6361 656b 2074 6573 646e     ware packet send
    d8fc:	2e2e 0d2e 000a 6143 6472 2041 694d 696e     ......CardA Mini
    d90c:	492d 204f 6170 6b63 7465 7320 6e65 2e64     -IO packet send.
    d91c:	2e2e 0a0d 4300 7261 4164 5620 6269 6172     .....CardA Vibra
    d92c:	6554 206b 6170 6b63 7465 7320 6e65 2e64     Tek packet send.
    d93c:	2e2e 0a0d 4300 7261 4264 4d20 6e69 2d69     .....CardB Mini-
    d94c:	4f49 7020 6361 656b 2074 6573 646e 2e2e     IO packet send..
    d95c:	0d2e 000a 6143 6472 2042 6956 7262 5461     ....CardB VibraT
    d96c:	6b65 7020 6361 656b 2074 6573 646e 2e2e     ek packet send..
    d97c:	0d2e 000a 6f54 6f70 6f6c 7967 7520 6470     ....Topology upd
    d98c:	7461 2065 6170 6b63 7465 7320 6e65 2e64     ate packet send.
    d99c:	2e2e 0a0d 4200 5341 5345 4154 4954 4e4f     .....BASESTATION
    d9ac:	5000 5341 2d53 4854 4f52 4755 0048 5055     .PASS-THROUGH.UP
    d9bc:	4c00 4e49 204b 4b4f 4c00 4e49 204b 4f44     .LINK OK.LINK DO
    d9cc:	4e57 5600 6269 6172 6f50 6e69 0074 4f4e     WN.VibraPoint.NO
    d9dc:	2054 4946 5454 4445 5600 6269 6172 6554     T FITTED.VibraTe
    d9ec:	006b 614d 6978 4920 004f 694d 696e 4920     k.Maxi IO.Mini I
    d9fc:	004f 6e55 6e6b 776f 006e 2650 0045 2f4e     O.Unknown.P&E.N/
    da0c:	0041 5242 4b4f 4e45 4c00 4f4f 0050 6572     A.BROKEN.LOOP.re
    da1c:	6461 6e69 2067 4e49 3c20 2d2d 202d 6425     ading IN <--- %d
    da2c:	2520 2c78 7825 252c 2c78 7825 252c 2c78      %x,%x,%x,%x,%x,
    da3c:	7825 2520 2c78 7825 252c 2c78 7825 252c     %x %x,%x,%x,%x,%
    da4c:	2c78 7825 2520 2c78 7825 0a0d 7700 6972     x,%x %x,%x...wri
    da5c:	6974 676e 4f20 5455 2d20 2d2d 203e 6425     ting OUT ---> %d
    da6c:	2520 2c78 7825 252c 2c78 7825 252c 2c78      %x,%x,%x,%x,%x,
    da7c:	7825 2520 2c78 7825 252c 2c78 7825 252c     %x %x,%x,%x,%x,%
    da8c:	2c78 7825 2520 2c78 7825 0a0d 4500 4854     x,%x %x,%x...ETH
    da9c:	5245 454e 3a54 5b20 7262 616f 6364 7361     ERNET: [broadcas
    daac:	2074 7473 726f 5d6d 2120 2121 2121 2121     t storm] !!!!!!!
    dabc:	2121 2121 2121 2121 2121 2121 2121 2121     !!!!!!!!!!!!!!!!
    dacc:	2121 2121 2121 2121 2121 2121 2121 2121     !!!!!!!!!!!!!!!!
    dadc:	2121 2121 2121 2121 2121 2121 2121 0a0d     !!!!!!!!!!!!!!..
    daec:	4500 4854 5245 454e 3a54 5320 7568 7474     .ETHERNET: Shutt
    dafc:	6e69 2067 4f5b 4646 205d 6c66 776f 2e2e     ing [OFF] flow..
    db0c:	0d2e 000a 7257 7469 2065 4441 2043 6167     ....Write ADC ga
    db1c:	6e69 7320 7465 6974 676e 2073 6f66 2072     in settings for 
    db2c:	6956 7262 5461 6b65 4320 7261 4164 0a0d     VibraTek CardA..
    db3c:	5700 6972 6574 4120 4344 6720 6961 206e     .Write ADC gain 
    db4c:	6573 7474 6e69 7367 6620 726f 5620 6269     settings for Vib
    db5c:	6172 6554 206b 6143 6472 0d42 000a 6f43     raTek CardB...Co
    db6c:	6c75 2064 4f4e 2054 6572 6461 6620 6f72     uld NOT read fro
    db7c:	206d 6874 2065 694d 696e 492d 204f 4441     m the Mini-IO AD
    db8c:	2043 6e6f 4320 5241 4144 493a 4332 5b20     C on CARDA:I2C [
    db9c:	6925 0d5d 000a 6f43 6c75 2064 4f4e 2054     %i]...Could NOT 
    dbac:	7277 7469 2065 6f74 7420 6568 4d20 6e69     write to the Min
    dbbc:	2d69 4f49 4120 4344 6320 6e6f 7274 6c6f     i-IO ADC control
    dbcc:	656c 2072 6e6f 4320 5241 4144 493a 4332     ler on CARDA:I2C
    dbdc:	5b20 6925 0d5d 000a 6f43 6c75 2064 4f4e      [%i]...Could NO
    dbec:	2054 7277 7469 2065 6f74 7420 6568 4d20     T write to the M
    dbfc:	6e69 2d69 4f49 4520 5058 4e41 4544 2052     ini-IO EXPANDER 
    dc0c:	6e6f 4320 5241 4144 493a 4332 5b20 6925     on CARDA:I2C [%i
    dc1c:	0d5d 000a 6f43 6c75 2064 4f4e 2054 6572     ]...Could NOT re
    dc2c:	6461 6620 6f72 206d 6874 2065 694d 696e     ad from the Mini
    dc3c:	492d 204f 5845 4150 444e 5245 6f20 206e     -IO EXPANDER on 
    dc4c:	4143 4452 3a41 3249 2043 255b 5d69 0a0d     CARDA:I2C [%i]..
    dc5c:	4300 756f 646c 4e20 544f 7220 6165 2064     .Could NOT read 
    dc6c:	7266 6d6f 7420 6568 4d20 6e69 2d69 4f49     from the Mini-IO
    dc7c:	4120 4344 6f20 206e 4143 4452 3a42 3249      ADC on CARDB:I2
    dc8c:	2043 255b 5d69 0a0d 4300 756f 646c 4e20     C [%i]...Could N
    dc9c:	544f 7720 6972 6574 7420 206f 6874 2065     OT write to the 
    dcac:	694d 696e 492d 204f 4441 2043 6f63 746e     Mini-IO ADC cont
    dcbc:	6f72 6c6c 7265 6f20 206e 4143 4452 3a42     roller on CARDB:
    dccc:	3249 2043 255b 5d69 0a0d 4300 756f 646c     I2C [%i]...Could
    dcdc:	4e20 544f 7720 6972 6574 7420 206f 6874      NOT write to th
    dcec:	2065 694d 696e 492d 204f 5845 4150 444e     e Mini-IO EXPAND
    dcfc:	5245 6f20 206e 4143 4452 3a42 3249 2043     ER on CARDB:I2C 
    dd0c:	255b 5d69 0a0d 4300 756f 646c 4e20 544f     [%i]...Could NOT
    dd1c:	7220 6165 2064 7266 6d6f 7420 6568 4d20      read from the M
    dd2c:	6e69 2d69 4f49 4520 5058 4e41 4544 2052     ini-IO EXPANDER 
    dd3c:	6e6f 4320 5241 4244 493a 4332 5b20 6925     on CARDB:I2C [%i
    dd4c:	0d5d 000a 0a0d 202e 202e 202e 202e 202e     ]...... . . . . 
    dd5c:	202e 202e 202e 202e 202e 202e 202e 202e     . . . . . . . . 
    dd6c:	202e 202e 202e 202e 202e 202e 202e 202e     . . . . . . . . 
    dd7c:	202e 202e 202e 202e 202e 202e 202e 202e     . . . . . . . . 
    dd8c:	202e 202e 202e 202e 202e 202e 0d2e 000a     . . . . . . ....
    dd9c:	433c 494c 4420 4245 4755 203e 525b 4245     <CLI DEBUG> [REB
    ddac:	4f4f 5d54 6320 6d6f 616d 646e 0a0d 2e00     OOT] command....
    ddbc:	2e20 2e20 2e20 2e20 2e20 2e20 2e20 2e20      . . . . . . . .
    ddcc:	2e20 2e20 2e20 2e20 2e20 2e20 2e20 2e20      . . . . . . . .
    dddc:	2e20 2e20 2e20 2e20 2e20 2e20 2e20 2e20      . . . . . . . .
    ddec:	2e20 2e20 2e20 2e20 2e20 2e20 2e20 2e20      . . . . . . . .
    ddfc:	2e20 2e20 2e20 0a0d 0a0d 3c00 4c43 2049      . . ......<CLI 
    de0c:	4544 5542 3e47 5b20 4f43 464e 4749 5255     DEBUG> [CONFIGUR
    de1c:	5441 4f49 204e 4544 4146 4c55 5d54 6320     ATION DEFAULT] c
    de2c:	6d6f 616d 646e 0a0d 3c00 4c43 2049 4544     ommand...<CLI DE
    de3c:	5542 3e47 5b20 4449 5220 5345 5445 205d     BUG> [ID RESET] 
    de4c:	6f63 6d6d 6e61 0d64 000a 0d0d 520d 6265     command......Reb
    de5c:	6f6f 6974 676e 2e2e 0d2e 000a 433c 494c     ooting......<CLI
    de6c:	4420 4245 4755 203e 425b 5341 5345 4154      DEBUG> [BASESTA
    de7c:	4954 4e4f 205d 6f63 6d6d 6e61 0d64 000a     TION] command...
    de8c:	433c 494c 4420 4245 4755 203e 505b 5341     <CLI DEBUG> [PAS
    de9c:	2053 4854 4f52 4755 5d48 6320 6d6f 616d     S THROUGH] comma
    deac:	646e 0a0d 0d00 2e0a 2e20 2e20 2e20 2e20     nd...... . . . .
    debc:	2e20 2e20 2e20 2e20 2e20 2e20 2e20 2e20      . . . . . . . .
    decc:	2e20 2e20 2e20 2e20 2e20 2e20 2e20 2e20      . . . . . . . .
    dedc:	2e20 2e20 2e20 2e20 2e20 2e20 2e20 2e20      . . . . . . . .
    deec:	2e20 2e20 2e20 2e20 2e20 2e20 2e20 3c00      . . . . . . ..<
    defc:	4c43 2049 4544 5542 3e47 5b20 494c 4556     CLI DEBUG> [LIVE
    df0c:	4220 414f 4452 5020 4952 544e 205d 6f63      BOARD PRINT] co
    df1c:	6d6d 6e61 0064 433c 494c 4420 4245 4755     mmand.<CLI DEBUG
    df2c:	203e 4449 2020 2020 2020 2020 2020 2020     > ID            
    df3c:	2020 3d20 2520 0064 433c 494c 4420 4245        = %d.<CLI DEB
    df4c:	4755 203e 614e 656d 2020 2020 2020 2020     UG> Name        
    df5c:	2020 2020 3d20 2520 0073 0d0d 0d0d 0a0d          = %s.......
    df6c:	3c00 4c43 2049 4544 5542 3e47 6720 6961     .<CLI DEBUG> gai
    df7c:	416e 2020 2020 2020 2020 2020 2020 203d     nA            = 
    df8c:	6425 3c00 4c43 2049 4544 5542 3e47 6720     %d.<CLI DEBUG> g
    df9c:	6961 426e 2020 2020 2020 2020 2020 2020     ainB            
    dfac:	203d 6425 3c00 4c43 2049 4544 5542 3e47     = %d.<CLI DEBUG>
    dfbc:	4d20 646f 2065 2020 2020 2020 2020 2020      Mode           
    dfcc:	2020 203d 7325 3c00 4c43 2049 4544 5542       = %s.<CLI DEBU
    dfdc:	3e47 5720 7461 7265 2031 2020 2020 2020     G> Water1       
    dfec:	2020 2020 203d 6425 3c00 4c43 2049 4544         = %d.<CLI DE
    dffc:	5542 3e47 5720 7461 7265 2032 2020 2020     BUG> Water2     
    e00c:	2020 2020 2020 203d 6425 3c00 4c43 2049           = %d.<CLI 
    e01c:	4544 5542 3e47 4820 2056 2020 2020 2020     DEBUG> HV       
    e02c:	2020 2020 2020 2020 203d 6425 3c00 4c43             = %d.<CL
    e03c:	2049 4544 5542 3e47 5420 6d65 2070 2020     I DEBUG> Temp   
    e04c:	2020 2020 2020 2020 2020 203d 5245 4f52               = ERRO
    e05c:	0052 433c 494c 4420 4245 4755 203e 6554     R.<CLI DEBUG> Te
    e06c:	706d 2020 2020 2020 2020 2020 2020 3d20     mp             =
    e07c:	2520 4364 3c00 4c43 2049 4544 5542 3e47      %dC.<CLI DEBUG>
    e08c:	5420 6d65 2070 2020 2020 2020 2020 2020      Temp           
    e09c:	2020 203d 252d 4364 3c00 4c43 2049 4544       = -%dC.<CLI DE
    e0ac:	5542 3e47 4820 6d75 6469 7469 2079 2020     BUG> Humidity   
    e0bc:	2020 2020 2020 203d 5245 4f52 0052 433c           = ERROR.<C
    e0cc:	494c 4420 4245 4755 203e 7548 696d 6964     LI DEBUG> Humidi
    e0dc:	7974 2020 2020 2020 2020 3d20 2520 2564     ty         = %d%
    e0ec:	0063 433c 494c 4420 4245 4755 203e 6154     c.<CLI DEBUG> Ta
    e0fc:	706d 7265 2020 2020 2020 2020 2020 3d20     mper           =
    e10c:	2520 0073 433c 494c 4420 4245 4755 203e      %s.<CLI DEBUG> 
    e11c:	6f50 7472 2031 2020 2020 2020 2020 2020     Port1           
    e12c:	3d20 2520 0073 433c 494c 4420 4245 4755      = %s.<CLI DEBUG
    e13c:	203e 6f50 7472 2032 2020 2020 2020 2020     > Port2         
    e14c:	2020 3d20 2520 0073 433c 494c 4420 4245        = %s.<CLI DEB
    e15c:	4755 203e 6f50 7472 2033 2020 2020 2020     UG> Port3       
    e16c:	2020 2020 3d20 2520 0073 433c 494c 4420          = %s.<CLI D
    e17c:	4245 4755 203e 6143 6472 2041 2020 2020     EBUG> CardA     
    e18c:	2020 2020 2020 3d20 2520 0073 433c 494c            = %s.<CLI
    e19c:	4420 4245 4755 203e 6143 6472 2042 2020      DEBUG> CardB   
    e1ac:	2020 2020 2020 2020 3d20 2520 0073 433c              = %s.<C
    e1bc:	494c 4420 4245 4755 203e 6952 676e 5420     LI DEBUG> Ring T
    e1cc:	706f 6c6f 676f 2079 2020 3d20 2520 0073     opology    = %s.
    e1dc:	433c 494c 4420 4245 4755 203e 7055 6974     <CLI DEBUG> Upti
    e1ec:	656d 2020 2020 2020 2020 2020 3d20 2520     me           = %
    e1fc:	2064 6573 6f63 646e 0073 433c 494c 4420     d seconds.<CLI D
    e20c:	4245 4755 203e 6946 6d72 6177 6572 2020     EBUG> Firmware  
    e21c:	2020 2020 2020 3d20 5620 6425 252e 0064            = V%d.%d.
    e22c:	433c 494c 4420 4245 4755 203e 495b 2050     <CLI DEBUG> [IP 
    e23c:	4353 4548 454d 2f20 4e20 5445 4f57 4b52     SCHEME / NETWORK
    e24c:	205d 6f63 6d6d 6e61 0d64 000a 433c 494c     ] command...<CLI
    e25c:	4420 4245 4755 203e 5049 2020 2020 2020      DEBUG> IP      
    e26c:	2020 2020 2020 2020 3d20 2520 2e64 6425              = %d.%d
    e27c:	252e 2e64 6425 0a0d 3c00 4c43 2049 4544     .%d.%d...<CLI DE
    e28c:	5542 3e47 4e20 7465 616d 6b73 2020 2020     BUG> Netmask    
    e29c:	2020 2020 2020 203d 6425 252e 2e64 6425           = %d.%d.%d
    e2ac:	252e 0d64 000a 433c 494c 4420 4245 4755     .%d...<CLI DEBUG
    e2bc:	203e 6147 6574 6177 2079 2020 2020 2020     > Gateway       
    e2cc:	2020 3d20 2520 2e64 6425 252e 2e64 6425        = %d.%d.%d.%d
    e2dc:	0a0d 3c00 4c43 2049 4544 5542 3e47 4d20     ...<CLI DEBUG> M
    e2ec:	4341 2020 2020 2020 2020 2020 2020 2020     AC              
    e2fc:	203d 7825 253a 3a78 7825 253a 3a78 7825     = %x:%x:%x:%x:%x
    e30c:	253a 0d78 000a 433c 494c 4420 4245 4755     :%x...<CLI DEBUG
    e31c:	203e 535b 4550 4445 4d20 4941 4c4e 4f4f     > [SPEED MAINLOO
    e32c:	5d50 6320 6d6f 616d 646e 0a0d 3c00 4c43     P] command...<CL
    e33c:	2049 4544 5542 3e47 4d20 6961 2d6e 6f6c     I DEBUG> Main-lo
    e34c:	706f 532f 6d61 6c70 6e69 2067 203d 6425     op/Sampling = %d
    e35c:	0a0d 3c00 4c43 2049 4544 5542 3e47 5b20     ...<CLI DEBUG> [
    e36c:	4552 4441 4d20 4349 4552 204c 4552 4947     READ MICREL REGI
    e37c:	5453 5245 5d53 6320 6d6f 616d 646e 4600     STERS] command.F
    e38c:	4d41 4c49 5f59 4449 3d20 2520 0d78 000a     AMILY_ID = %x...
    e39c:	5453 5241 2054 203d 7825 0a0d 4700 4f4c     START = %x...GLO
    e3ac:	4142 304c 3d20 2520 0d78 000a 4c47 424f     BAL0 = %x...GLOB
    e3bc:	4c41 2031 203d 7825 0a0d 4700 4f4c 4142     AL1 = %x...GLOBA
    e3cc:	324c 3d20 2520 0d78 000a 4c47 424f 4c41     L2 = %x...GLOBAL
    e3dc:	2033 203d 7825 0a0d 4700 4f4c 4142 344c     3 = %x...GLOBAL4
    e3ec:	3d20 2520 0d78 000a 4c47 424f 4c41 2035      = %x...GLOBAL5 
    e3fc:	203d 7825 0a0d 4700 4f4c 4142 364c 3d20     = %x...GLOBAL6 =
    e40c:	2520 0d78 000a 4c47 424f 4c41 2039 203d      %x...GLOBAL9 = 
    e41c:	7825 0a0d 4700 4f4c 4142 314c 2030 203d     %x...GLOBAL10 = 
    e42c:	7825 0a0d 5000 4d44 3143 3d20 2520 0d78     %x...PDMC1 = %x.
    e43c:	000a 4450 434d 2032 203d 7825 0a0d 5000     ..PDMC2 = %x...P
    e44c:	524f 3154 4f43 544e 4f52 304c 3d20 2520     ORT1CONTROL0 = %
    e45c:	0d78 000a 4f50 5452 4332 4e4f 5254 4c4f     x...PORT2CONTROL
    e46c:	2030 203d 7825 0a0d 5000 524f 3354 4f43     0 = %x...PORT3CO
    e47c:	544e 4f52 304c 3d20 2520 0d78 000a 4f50     NTROL0 = %x...PO
    e48c:	5452 4334 4e4f 5254 4c4f 2030 203d 7825     RT4CONTROL0 = %x
    e49c:	0a0d 5000 524f 3154 4f43 544e 4f52 314c     ...PORT1CONTROL1
    e4ac:	3d20 2520 0d78 000a 4f50 5452 4332 4e4f      = %x...PORT2CON
    e4bc:	5254 4c4f 2031 203d 7825 0a0d 5000 524f     TROL1 = %x...POR
    e4cc:	3354 4f43 544e 4f52 314c 3d20 2520 0d78     T3CONTROL1 = %x.
    e4dc:	000a 4f50 5452 4334 4e4f 5254 4c4f 2031     ..PORT4CONTROL1 
    e4ec:	203d 7825 0a0d 5000 524f 3154 4f43 544e     = %x...PORT1CONT
    e4fc:	4f52 324c 3d20 2520 0d78 000a 4f50 5452     ROL2 = %x...PORT
    e50c:	4332 4e4f 5254 4c4f 2032 203d 7825 0a0d     2CONTROL2 = %x..
    e51c:	5000 524f 3354 4f43 544e 4f52 324c 3d20     .PORT3CONTROL2 =
    e52c:	2520 0d78 000a 4f50 5452 4334 4e4f 5254      %x...PORT4CONTR
    e53c:	4c4f 2032 203d 7825 0a0d 5000 524f 3154     OL2 = %x...PORT1
    e54c:	4f43 544e 4f52 334c 3d20 2520 0d78 000a     CONTROL3 = %x...
    e55c:	4f50 5452 4332 4e4f 5254 4c4f 2033 203d     PORT2CONTROL3 = 
    e56c:	7825 0a0d 5000 524f 3354 4f43 544e 4f52     %x...PORT3CONTRO
    e57c:	334c 3d20 2520 0d78 000a 4f50 5452 4334     L3 = %x...PORT4C
    e58c:	4e4f 5254 4c4f 2033 203d 7825 0a0d 5000     ONTROL3 = %x...P
    e59c:	524f 3154 4f43 544e 4f52 344c 3d20 2520     ORT1CONTROL4 = %
    e5ac:	0d78 000a 4f50 5452 4332 4e4f 5254 4c4f     x...PORT2CONTROL
    e5bc:	2034 203d 7825 0a0d 5000 524f 3354 4f43     4 = %x...PORT3CO
    e5cc:	544e 4f52 344c 3d20 2520 0d78 000a 4f50     NTROL4 = %x...PO
    e5dc:	5452 4334 4e4f 5254 4c4f 2034 203d 7825     RT4CONTROL4 = %x
    e5ec:	0a0d 5000 524f 3154 4f43 544e 4f52 354c     ...PORT1CONTROL5
    e5fc:	3d20 2520 0d78 000a 4f50 5452 4332 4e4f      = %x...PORT2CON
    e60c:	5254 4c4f 2035 203d 7825 0a0d 5000 524f     TROL5 = %x...POR
    e61c:	3354 4f43 544e 4f52 354c 3d20 2520 0d78     T3CONTROL5 = %x.
    e62c:	000a 4f50 5452 4334 4e4f 5254 4c4f 2035     ..PORT4CONTROL5 
    e63c:	203d 7825 0a0d 5000 524f 3454 4f43 544e     = %x...PORT4CONT
    e64c:	4f52 364c 3d20 2520 0d78 000a 4f50 5452     ROL6 = %x...PORT
    e65c:	4331 4e4f 5254 4c4f 2037 203d 7825 0a0d     1CONTROL7 = %x..
    e66c:	5000 524f 3254 4f43 544e 4f52 374c 3d20     .PORT2CONTROL7 =
    e67c:	2520 0d78 000a 4f50 5452 4333 4e4f 5254      %x...PORT3CONTR
    e68c:	4c4f 2037 203d 7825 0a0d 5000 524f 3154     OL7 = %x...PORT1
    e69c:	4f43 544e 4f52 384c 3d20 2520 0d78 000a     CONTROL8 = %x...
    e6ac:	4f50 5452 4332 4e4f 5254 4c4f 2038 203d     PORT2CONTROL8 = 
    e6bc:	7825 0a0d 5000 524f 3354 4f43 544e 4f52     %x...PORT3CONTRO
    e6cc:	384c 3d20 2520 0d78 000a 4f50 5452 5331     L8 = %x...PORT1S
    e6dc:	4154 5554 3053 3d20 2520 0d78 000a 4f50     TATUS0 = %x...PO
    e6ec:	5452 5332 4154 5554 3053 3d20 2520 0d78     RT2STATUS0 = %x.
    e6fc:	000a 4f50 5452 5333 4154 5554 3053 3d20     ..PORT3STATUS0 =
    e70c:	2520 0d78 000a 4f50 5452 5331 4154 5554      %x...PORT1STATU
    e71c:	3153 3d20 2520 0d78 000a 4f50 5452 5332     S1 = %x...PORT2S
    e72c:	4154 5554 3153 3d20 2520 0d78 000a 4f50     TATUS1 = %x...PO
    e73c:	5452 5333 4154 5554 3153 3d20 2520 0d78     RT3STATUS1 = %x.
    e74c:	000a 4f50 5452 5331 4154 5554 3253 3d20     ..PORT1STATUS2 =
    e75c:	2520 0d78 000a 4f50 5452 5332 4154 5554      %x...PORT2STATU
    e76c:	3253 3d20 2520 0d78 000a 4f50 5452 5333     S2 = %x...PORT3S
    e77c:	4154 5554 3253 3d20 2520 0d78 000a 4f50     TATUS2 = %x...PO
    e78c:	5452 5331 4154 5554 3353 3d20 2520 0d78     RT1STATUS3 = %x.
    e79c:	000a 4f50 5452 5332 4154 5554 3353 3d20     ..PORT2STATUS3 =
    e7ac:	2520 0d78 000a 4f50 5452 5333 4154 5554      %x...PORT3STATU
    e7bc:	3353 3d20 2520 0d78 000a 4f50 5452 4c31     S3 = %x...PORT1L
    e7cc:	4e49 4d4b 2044 203d 7825 0a0d 5000 524f     INKMD = %x...POR
    e7dc:	3254 494c 4b4e 444d 3d20 2520 0d78 000a     T2LINKMD = %x...
    e7ec:	4f50 5452 4c33 4e49 4d4b 2044 203d 7825     PORT3LINKMD = %x
    e7fc:	0a0d 5000 524f 3154 4f43 544e 4f52 394c     ...PORT1CONTROL9
    e80c:	3d20 2520 0d78 000a 4f50 5452 4332 4e4f      = %x...PORT2CON
    e81c:	5254 4c4f 2039 203d 7825 0a0d 5000 524f     TROL9 = %x...POR
    e82c:	3354 4f43 544e 4f52 394c 3d20 2520 0d78     T3CONTROL9 = %x.
    e83c:	000a 4f50 5452 4331 4e4f 5254 4c4f 3031     ..PORT1CONTROL10
    e84c:	3d20 2520 0d78 000a 4f50 5452 4332 4e4f      = %x...PORT2CON
    e85c:	5254 4c4f 3031 3d20 2520 0d78 000a 4f50     TROL10 = %x...PO
    e86c:	5452 4333 4e4f 5254 4c4f 3031 3d20 2520     RT3CONTROL10 = %
    e87c:	0d78 000a 4f50 5452 4332 4e4f 5254 4c4f     x...PORT2CONTROL
    e88c:	3032 3d20 2520 0d78 000a 4f50 5452 4331     20 = %x...PORT1C
    e89c:	4e4f 5254 4c4f 3231 3d20 2520 0d78 000a     ONTROL12 = %x...
    e8ac:	4f50 5452 4332 4e4f 5254 4c4f 3231 3d20     PORT2CONTROL12 =
    e8bc:	2520 0d78 000a 4f50 5452 4333 4e4f 5254      %x...PORT3CONTR
    e8cc:	4c4f 3231 3d20 2520 0d78 000a 4f50 5452     OL12 = %x...PORT
    e8dc:	4334 4e4f 5254 4c4f 3231 3d20 2520 0d78     4CONTROL12 = %x.
    e8ec:	000a 4f50 5452 4331 4e4f 5254 4c4f 3331     ..PORT1CONTROL13
    e8fc:	3d20 2520 0d78 000a 4f50 5452 4332 4e4f      = %x...PORT2CON
    e90c:	5254 4c4f 3331 3d20 2520 0d78 000a 4f50     TROL13 = %x...PO
    e91c:	5452 4333 4e4f 5254 4c4f 3331 3d20 2520     RT3CONTROL13 = %
    e92c:	0d78 000a 4f50 5452 4334 4e4f 5254 4c4f     x...PORT4CONTROL
    e93c:	3331 3d20 2520 0d78 000a 4f50 5452 4331     13 = %x...PORT1C
    e94c:	4e4f 5254 4c4f 3431 3d20 2520 0d78 000a     ONTROL14 = %x...
    e95c:	4f50 5452 4332 4e4f 5254 4c4f 3431 3d20     PORT2CONTROL14 =
    e96c:	2520 0d78 000a 4f50 5452 4333 4e4f 5254      %x...PORT3CONTR
    e97c:	4c4f 3431 3d20 2520 0d78 000a 4f50 5452     OL14 = %x...PORT
    e98c:	4334 4e4f 5254 4c4f 3431 3d20 2520 0d78     4CONTROL14 = %x.
    e99c:	000a 4f50 5452 4331 4e4f 5254 4c4f 3531     ..PORT1CONTROL15
    e9ac:	3d20 2520 0d78 000a 4f50 5452 4332 4e4f      = %x...PORT2CON
    e9bc:	5254 4c4f 3531 3d20 2520 0d78 000a 4f50     TROL15 = %x...PO
    e9cc:	5452 4333 4e4f 5254 4c4f 3531 3d20 2520     RT3CONTROL15 = %
    e9dc:	0d78 000a 4f50 5452 4334 4e4f 5254 4c4f     x...PORT4CONTROL
    e9ec:	3531 3d20 2520 0d78 000a 4f50 5452 4331     15 = %x...PORT1C
    e9fc:	4e4f 5254 4c4f 3631 3d20 2520 0d78 000a     ONTROL16 = %x...
    ea0c:	4f50 5452 4332 4e4f 5254 4c4f 3631 3d20     PORT2CONTROL16 =
    ea1c:	2520 0d78 000a 4f50 5452 4333 4e4f 5254      %x...PORT3CONTR
    ea2c:	4c4f 3631 3d20 2520 0d78 000a 4f50 5452     OL16 = %x...PORT
    ea3c:	4334 4e4f 5254 4c4f 3631 3d20 2520 0d78     4CONTROL16 = %x.
    ea4c:	000a 4f50 5452 4331 4e4f 5254 4c4f 3731     ..PORT1CONTROL17
    ea5c:	3d20 2520 0d78 000a 4f50 5452 4332 4e4f      = %x...PORT2CON
    ea6c:	5254 4c4f 3731 3d20 2520 0d78 000a 4f50     TROL17 = %x...PO
    ea7c:	5452 4333 4e4f 5254 4c4f 3731 3d20 2520     RT3CONTROL17 = %
    ea8c:	0d78 000a 4f50 5452 4334 4e4f 5254 4c4f     x...PORT4CONTROL
    ea9c:	3731 3d20 2520 0d78 000a 433c 494c 4420     17 = %x...<CLI D
    eaac:	4245 4755 203e 6e55 6e6b 776f 206e 6f63     EBUG> Unknown co
    eabc:	6d6d 6e61 0d64 0d0a 480a 6c65 2070 6353     mmand....Help Sc
    eacc:	6572 6e65 0d3a 0d0a 000a 2052 2020 2020     reen:.....R     
    eadc:	2020 2020 525b 4245 4f4f 5d54 6320 6d6f         [REBOOT] com
    eaec:	616d 646e 0a0d 4400 2020 2020 2020 2020     mand...D        
    eafc:	5b20 4f43 464e 4749 5255 5441 4f49 204e      [CONFIGURATION 
    eb0c:	4544 4146 4c55 5d54 6320 6d6f 616d 646e     DEFAULT] command
    eb1c:	0a0d 5800 2020 2020 2020 2020 5b20 4449     ...X         [ID
    eb2c:	5220 5345 5445 205d 6f63 6d6d 6e61 0d64      RESET] command.
    eb3c:	000a 2042 2020 2020 2020 2020 425b 5341     ..B         [BAS
    eb4c:	5345 4154 4954 4e4f 205d 6f63 6d6d 6e61     ESTATION] comman
    eb5c:	0d64 000a 2050 2020 2020 2020 2020 505b     d...P         [P
    eb6c:	5341 2053 4854 4f52 4755 5d48 6320 6d6f     ASS THROUGH] com
    eb7c:	616d 646e 0a0d 4c00 2020 2020 2020 2020     mand...L        
    eb8c:	5b20 494c 4556 4220 414f 4452 5020 4952      [LIVE BOARD PRI
    eb9c:	544e 205d 6f63 6d6d 6e61 0d64 000a 204d     NT] command...M 
    ebac:	2020 2020 2020 2020 525b 4145 2044 494d             [READ MI
    ebbc:	5243 4c45 5220 4745 5349 4554 5352 205d     CREL REGISTERS] 
    ebcc:	6f63 6d6d 6e61 0d64 000a 2049 2020 2020     command...I     
    ebdc:	2020 2020 495b 2050 4353 4548 454d 2f20         [IP SCHEME /
    ebec:	4e20 5445 4f57 4b52 205d 6f63 6d6d 6e61      NETWORK] comman
    ebfc:	0d64 000a 2053 2020 2020 2020 2020 535b     d...S         [S
    ec0c:	4550 4445 4d20 4941 4c4e 4f4f 5d50 6320     PEED MAINLOOP] c
    ec1c:	6d6f 616d 646e 0a0d 0a0d 0d00 0d0a 0d0a     ommand..........
    ec2c:	2d0a 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     .---------------
    ec3c:	2d2d 2d2d 2d2d 0a0d 4f42 544f 552d 0d50     ------..BOOT-UP.
    ec4c:	2d0a 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     .---------------
    ec5c:	2d2d 2d2d 2d2d 0a0d 0a0d 0d00 0d0a 2a0a     ------.........*
    ec6c:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
    ec7c:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
    ec8c:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
    ec9c:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
    ecac:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
    ecbc:	2a2a 2a2a 2a2a 2a2a 2a2a 0d2a 000a 202a     ***********...* 
    eccc:	4854 2045 554d 544c 2d49 4553 534e 2045     THE MULTI-SENSE 
    ecdc:	4544 4956 4543 5b20 4449 205d 4148 2053     DEVICE [ID] HAS 
    ecec:	4f4e 2054 4542 4e45 5320 5445 202e 4854     NOT BEEN SET. TH
    ecfc:	5349 4420 4645 4349 2045 4957 4c4c 4e20     IS DEFICE WILL N
    ed0c:	544f 4620 4e55 5443 4f49 204e 524f 5220     OT FUNCTION OR R
    ed1c:	4e55 4120 2053 2020 2a20 0a0d 2a00 4e20     UN AS    *...* N
    ed2c:	524f 414d 204c 4e55 4954 204c 4854 2045     ORMAL UNTIL THE 
    ed3c:	495b 5d44 4e20 4d55 4542 2052 4148 2053     [ID] NUMBER HAS 
    ed4c:	4542 4e45 4520 544e 5245 4445 4220 2059     BEEN ENTERED BY 
    ed5c:	4854 5349 5420 5245 494d 414e 204c 4146     THIS TERMINAL FA
    ed6c:	4943 494c 5954 202e 2020 2020 2020 2020     CILITY.         
    ed7c:	2020 2020 2020 2020 0d2a 000a 202a 202d             *...* - 
    ed8c:	202d 202d 202d 202d 202d 202d 202d 202d     - - - - - - - - 
    ed9c:	202d 202d 202d 202d 202d 202d 202d 202d     - - - - - - - - 
    edac:	202d 202d 202d 202d 202d 202d 202d 202d     - - - - - - - - 
    edbc:	202d 202d 202d 202d 202d 202d 202d 202d     - - - - - - - - 
    edcc:	202d 202d 202d 202d 202d 202d 202d 202d     - - - - - - - - 
    eddc:	202d 202d 202d 2a20 0a0d 2a00 5020 454c     - - -  *...* PLE
    edec:	5341 2045 4e45 4554 2052 4854 2045 3233     ASE ENTER THE 32
    edfc:	422d 5449 4420 5645 4349 2045 495b 5d44     -BIT DEVICE [ID]
    ee0c:	4220 4c45 574f 2020 2020 2020 2020 2020      BELOW          
    ee1c:	2020 2020 2020 2020 2020 2020 2020 2020                     
    ee2c:	2020 2020 2020 2020 2020 2020 2020 2020                     
    ee3c:	2020 2020 2020 0d2a 000a 754d 746c 5369           *...MultiS
    ee4c:	6e65 6573 5b20 6f62 746f 752d 2070 2026     ense [boot-up & 
    ee5c:	6e69 7469 6320 6d6f 6c70 7465 6465 4920     init completed I
    ee6c:	2044 203d 6425 0d5d 000a 202d 202d 202d     D = %d]...- - - 
    ee7c:	202d 202d 202d 202d 202d 202d 202d 202d     - - - - - - - - 
    ee8c:	202d 202d 202d 202d 202d 202d 202d 202d     - - - - - - - - 
    ee9c:	202d 202d 202d 202d 202d 202d 202d 202d     - - - - - - - - 
    eeac:	202d 202d 202d 202d 202d 202d 202d 202d     - - - - - - - - 
    eebc:	202d 202d 202d 202d 202d 202d 202d 202d     - - - - - - - - 
    eecc:	202d 202d 202d 202d 202d 202d 202d 202d     - - - - - - - - 
    eedc:	202d 202d 202d 202d 202d 202d 202d 0d2d     - - - - - - - -.
    eeec:	000a 0a0d 6e45 6574 2072 656e 2077 495b     ....Enter new [I
    eefc:	5d44 6e20 776f 203a 4900 2044 6e65 6574     D] now: .ID ente
    ef0c:	6572 3a64 2520 0d73 000a 0a0d 7349 7420     red: %s.....Is t
    ef1c:	6968 2073 6f63 7272 6365 2074 2f59 3f4e     his correct Y/N?
    ef2c:	0a0d 2500 0075 0a0d 5245 4f52 2052 4449     ...%u...ERROR ID
    ef3c:	6320 6e61 6f6e 2074 6562 3c20 455a 4f52      cannot be <ZERO
    ef4c:	213e 2121 2121 0a0d 0d00 0d0a 0d0d 6552     >!!!!!........Re
    ef5c:	6f62 746f 6e69 2e67 2e2e 7028 656c 7361     booting...(pleas
    ef6c:	2065 6177 7469 0d29 0d0a 000a 2e2e 702f     e wait)......./p
    ef7c:	7265 6973 7473 6e65 5f74 7473 726f 6761     ersistent_storag
    ef8c:	2f65 766e 695f 746e 7265 616e 5f6c 6c66     e/nv_internal_fl
    ef9c:	7361 5f68 6c75 7274 2e61 0063 5453 524f     ash_ultra.c.STOR
    efac:	4741 0045 2e2e 702f 7265 6973 7473 6e65     AGE.../persisten
    efbc:	5f74 7473 726f 6761 2f65 766e 735f 6f74     t_storage/nv_sto
    efcc:	6172 6567 632e 4500 4854 5245 454e 3a54     rage.c.ETHERNET:
    efdc:	5320 7465 6120 2073 2061 6162 6573 732d      Set as a base-s
    efec:	6174 6974 6e6f 7420 206f 616d 616e 6567     tation to manage
    effc:	4520 6874 7265 656e 2074 6f74 6f70 6f6c      Ethernet topolo
    f00c:	7967 2e2e 0d2e 000a 5445 4548 4e52 5445     gy......ETHERNET
    f01c:	203a 6f6e 6d72 6c61 6e20 6e6f 2d65 616d     : normal none-ma
    f02c:	616e 6567 2064 6170 7373 742d 7268 756f     naged pass-throu
    f03c:	6867 6e20 646f 2e65 2e2e 0a0d 4500 4854     gh node......ETH
    f04c:	5245 454e 3a54 4320 6d6f 6c70 7465 6465     ERNET: Completed
    f05c:	5220 4e49 2047 616d 616e 6567 656d 746e      RING management
    f06c:	6920 696e 2e74 2e2e 0a0d 4500 4854 5245      init......ETHER
    f07c:	454e 3a54 5320 6e65 2074 6966 7372 2074     NET: Sent first 
    f08c:	5042 5544 2e2e 0d2e 000a 5445 4548 4e52     BPDU......ETHERN
    f09c:	5445 203a 2128 7473 726f 5f6d 7473 7461     ET: (!storm_stat
    f0ac:	2965 4520 5252 524f 0a0d 4500 4854 5245     e) ERROR...ETHER
    f0bc:	454e 3a54 2820 7221 6e69 6267 6572 6b61     NET: (!ringbreak
    f0cc:	2029 5245 4f52 0d52 000a 5445 4548 4e52     ) ERROR...ETHERN
    f0dc:	5445 203a 745b 7275 696e 676e 4520 6874     ET: [turning Eth
    f0ec:	7265 656e 2074 423c 203e 4e4f 2d20 5220     ernet <B> ON - R
    f0fc:	4e49 2047 5242 4b4f 4e45 2e5d 2e2e 0a0d     ING BROKEN].....
    f10c:	4500 4854 5245 454e 3a54 5b20 7574 6e72     .ETHERNET: [turn
    f11c:	6e69 2067 7445 6568 6e72 7465 3c20 3e42     ing Ethernet <B>
    f12c:	4f20 4646 2d20 5220 4e49 2047 4e49 4154      OFF - RING INTA
    f13c:	5443 2e5d 2e2e 0a0d 4500 4854 5245 454e     CT]......ETHERNE
    f14c:	3a54 5b20 7473 726f 206d 7573 7362 6469     T: [storm subsid
    f15c:	6465 2e5d 2e2e 0a0d 6900 3a70 6920 766e     ed]......ip: inv
    f16c:	6c61 6469 7620 7265 6973 6e6f 6f20 2072     alid version or 
    f17c:	6568 6461 7265 6c20 6e65 7467 2e68 6900     header length..i
    f18c:	3a70 7020 6361 656b 2074 6873 726f 6574     p: packet shorte
    f19c:	2072 6874 6e61 7220 7065 726f 6574 2064     r than reported 
    f1ac:	6e69 4920 2050 6568 6461 7265 002e 7069     in IP header..ip
    f1bc:	203a 7266 6761 656d 746e 6420 6f72 7070     : fragment dropp
    f1cc:	6465 002e 7069 203a 6f70 7373 6269 656c     ed..ip: possible
    f1dc:	7020 6e69 2067 6f63 666e 6769 7020 6361      ping config pac
    f1ec:	656b 2074 6572 6563 7669 6465 002e 7069     ket received..ip
    f1fc:	203a 6170 6b63 7465 6420 6f72 7070 6465     : packet dropped
    f20c:	7320 6e69 6563 6e20 206f 6461 7264 7365      since no addres
    f21c:	2073 7361 6973 6e67 6465 002e 7069 203a     s assigned..ip: 
    f22c:	6162 2064 6863 6365 736b 6d75 002e 7069     bad checksum..ip
    f23c:	203a 656e 7469 6568 2072 6374 2070 6f6e     : neither tcp no
    f24c:	2072 6369 706d 002e 6369 706d 203a 6f6e     r icmp..icmp: no
    f25c:	2074 6369 706d 6520 6863 2e6f 7500 7064     t icmp echo..udp
    f26c:	203a 6162 2064 6863 6365 736b 6d75 002e     : bad checksum..
    f27c:	6475 3a70 6e20 206f 616d 6374 6968 676e     udp: no matching
    f28c:	6320 6e6f 656e 7463 6f69 206e 6f66 6e75      connection foun
    f29c:	0064 6374 3a70 6220 6461 6320 6568 6b63     d.tcp: bad check
    f2ac:	7573 2e6d 7400 7063 203a 6f66 6e75 2064     sum..tcp: found 
    f2bc:	6f6e 7520 756e 6573 2064 6f63 6e6e 6365     no unused connec
    f2cc:	6974 6e6f 2e73 7400 7063 203a 6f67 2074     tions..tcp: got 
    f2dc:	6572 6573 2c74 6120 6f62 7472 6e69 2067     reset, aborting 
    f2ec:	6f63 6e6e 6365 6974 6e6f 002e               connection..

0000f2f8 <broadcast_ethaddr>:
    f2f8:	ffff ffff ffff 2e2e 752f 6273 642f 7665     ......../usb/dev
    f308:	6369 2f65 7375 6462 2e63 0063 754d 746c     ice/usbdc.c.Mult
    f318:	5369 6e65 6573 6120 7070 696c 6163 6974     iSense applicati
    f328:	6e6f 615f 7070 6163 6c6c 2928 0a0d 4d00     on_appcall()...M
    f338:	6c75 6974 6553 736e 2065 7061 6c70 6369     ultiSense applic
    f348:	7461 6f69 5f6e 6e69 7469 2928 0a0d 4d00     ation_init()...M
    f358:	6c75 6974 6553 736e 2065 6374 6970 5f70     ultiSense tcpip_
    f368:	756f 7074 7475 2928 0a0d 4d00 6c75 6974     output()...Multi
    f378:	6553 736e 2065 4975 2050 6f6c 2067 2d2d     Sense uIP log --
    f388:	203e 255b 5d73 0a0d 0000 0000               > [%s]......

0000f394 <__sf_fake_stderr>:
	...

0000f3b4 <__sf_fake_stdin>:
	...

0000f3d4 <__sf_fake_stdout>:
	...
    f3f4:	6c68 004c f416 0000 f419 0000 f41c 0000     hlL.............
    f404:	2d41 6146 662d 3938 3130 3332 3534 3736     A-Fa-f8901234567
    f414:	005d 2d2b 3000 0030 5878 5000 534f 5849     ].+-.00.xX.POSIX
	...

0000f425 <_ctype_>:
    f425:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
    f435:	2020 2020 2020 2020 2020 2020 2020 2020                     
    f445:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
    f455:	0410 0404 0404 0404 0404 1004 1010 1010     ................
    f465:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
    f475:	0101 0101 0101 0101 0101 0101 1010 1010     ................
    f485:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
    f495:	0202 0202 0202 0202 0202 0202 1010 1010     ................
    f4a5:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0000f528 <_init>:
    f528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f52a:	bf00      	nop
    f52c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    f52e:	bc08      	pop	{r3}
    f530:	469e      	mov	lr, r3
    f532:	4770      	bx	lr

0000f534 <__init_array_start>:
    f534:	00000289 	.word	0x00000289

0000f538 <_fini>:
    f538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f53a:	bf00      	nop
    f53c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    f53e:	bc08      	pop	{r3}
    f540:	469e      	mov	lr, r3
    f542:	4770      	bx	lr

0000f544 <__fini_array_start>:
    f544:	00000265 	.word	0x00000265
