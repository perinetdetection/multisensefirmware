
MultiSense.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000e824  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000002b0  20000000  0000e824  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  000202b0  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  000202b0  2**0
                  CONTENTS
  4 .bss          00008df8  200002c0  0000eb00  000202c0  2**5
                  ALLOC
  5 .stack        0000c000  200090b8  000178f8  000202c0  2**0
                  ALLOC
  6 .ARM.attributes 0000002a  00000000  00000000  000202b0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000202da  2**0
                  CONTENTS, READONLY
  8 .debug_info   00079471  00000000  00000000  00020333  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000a57b  00000000  00000000  000997a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00024c7d  00000000  00000000  000a3d1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001ca0  00000000  00000000  000c899c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000039d0  00000000  00000000  000ca63c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00041c49  00000000  00000000  000ce00c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00033920  00000000  00000000  0010fc55  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0011a489  00000000  00000000  00143575  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005b30  00000000  00000000  0025da00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	b8 50 01 20 69 0a 00 00 65 0a 00 00 65 0a 00 00     .P. i...e...e...
      10:	65 0a 00 00 65 0a 00 00 65 0a 00 00 00 00 00 00     e...e...e.......
	...
      2c:	65 0a 00 00 65 0a 00 00 00 00 00 00 65 0a 00 00     e...e.......e...
      3c:	65 0a 00 00 65 0a 00 00 65 0a 00 00 65 0a 00 00     e...e...e...e...
      4c:	65 0a 00 00 65 0a 00 00 65 0a 00 00 65 0a 00 00     e...e...e...e...
      5c:	65 0a 00 00 65 0a 00 00 65 0a 00 00 65 0a 00 00     e...e...e...e...
      6c:	65 0a 00 00 65 0a 00 00 65 0a 00 00 65 0a 00 00     e...e...e...e...
      7c:	65 0a 00 00 65 0a 00 00 65 0a 00 00 65 0a 00 00     e...e...e...e...
      8c:	65 0a 00 00 65 0a 00 00 65 0a 00 00 65 0a 00 00     e...e...e...e...
      9c:	65 0a 00 00 65 0a 00 00 65 0a 00 00 65 0a 00 00     e...e...e...e...
      ac:	65 0a 00 00 65 0a 00 00 75 2d 00 00 49 2d 00 00     e...e...u-..I-..
      bc:	dd 25 00 00 e5 25 00 00 ed 25 00 00 f5 25 00 00     .%...%...%...%..
      cc:	fd 25 00 00 65 0a 00 00 65 0a 00 00 65 0a 00 00     .%..e...e...e...
      dc:	65 0a 00 00 65 0a 00 00 65 0a 00 00 65 0a 00 00     e...e...e...e...
      ec:	65 0a 00 00 00 00 00 00 3d 2e 00 00 99 31 00 00     e.......=....1..
      fc:	91 31 00 00 89 31 00 00 79 31 00 00 65 0a 00 00     .1...1..y1..e...
     10c:	65 0a 00 00 65 0a 00 00 65 0a 00 00 65 0a 00 00     e...e...e...e...
     11c:	65 0a 00 00 65 0a 00 00 65 0a 00 00 65 0a 00 00     e...e...e...e...
     12c:	65 0a 00 00 65 0a 00 00 65 0a 00 00 65 0a 00 00     e...e...e...e...
     13c:	65 0a 00 00 65 0a 00 00 65 0a 00 00 c1 31 00 00     e...e...e....1..
     14c:	b9 31 00 00 b1 31 00 00 a1 31 00 00 65 0a 00 00     .1...1...1..e...
     15c:	65 0a 00 00 65 0a 00 00 65 0a 00 00 65 0a 00 00     e...e...e...e...
     16c:	65 0a 00 00 65 0a 00 00 65 0a 00 00 00 00 00 00     e...e...e.......
     17c:	00 00 00 00 55 42 00 00 5d 42 00 00 65 42 00 00     ....UB..]B..eB..
     18c:	6d 42 00 00 31 26 00 00 65 0a 00 00 65 0a 00 00     mB..1&..e...e...
     19c:	65 0a 00 00 65 0a 00 00 65 0a 00 00 65 0a 00 00     e...e...e...e...
     1ac:	65 0a 00 00 65 0a 00 00 65 0a 00 00 65 0a 00 00     e...e...e...e...
     1bc:	65 0a 00 00 65 0a 00 00 65 0a 00 00 65 0a 00 00     e...e...e...e...
     1cc:	65 0a 00 00 65 0a 00 00 65 0a 00 00 65 0a 00 00     e...e...e...e...
     1dc:	65 0a 00 00 65 0a 00 00 65 0a 00 00 65 0a 00 00     e...e...e...e...
     1ec:	ed 33 00 00 65 0a 00 00 65 0a 00 00 65 0a 00 00     .3..e...e...e...
     1fc:	65 0a 00 00 65 0a 00 00 65 0a 00 00 65 0a 00 00     e...e...e...e...
     20c:	65 0a 00 00 65 0a 00 00 65 0a 00 00 65 0a 00 00     e...e...e...e...
     21c:	65 0a 00 00 65 0a 00 00 65 0a 00 00 65 0a 00 00     e...e...e...e...
     22c:	65 0a 00 00 65 0a 00 00 65 0a 00 00 65 0a 00 00     e...e...e...e...
     23c:	65 0a 00 00 65 0a 00 00 65 0a 00 00 65 0a 00 00     e...e...e...e...
     24c:	65 0a 00 00 65 0a 00 00 65 0a 00 00 65 0a 00 00     e...e...e...e...
     25c:	65 0a 00 00 65 0a 00 00                             e...e...

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	200002c0 	.word	0x200002c0
     280:	00000000 	.word	0x00000000
     284:	0000e824 	.word	0x0000e824

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0000e824 	.word	0x0000e824
     2c4:	200002c4 	.word	0x200002c4
     2c8:	0000e824 	.word	0x0000e824
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b510      	push	{r4, lr}
	system_init();
     2d2:	4b04      	ldr	r3, [pc, #16]	; (2e4 <atmel_start_init+0x14>)
     2d4:	4798      	blx	r3
	usb_init();
     2d6:	4b04      	ldr	r3, [pc, #16]	; (2e8 <atmel_start_init+0x18>)
     2d8:	4798      	blx	r3
	persistent_storage_init();
     2da:	4b04      	ldr	r3, [pc, #16]	; (2ec <atmel_start_init+0x1c>)
}
     2dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	persistent_storage_init();
     2e0:	4718      	bx	r3
     2e2:	bf00      	nop
     2e4:	00000f9d 	.word	0x00000f9d
     2e8:	0000ab89 	.word	0x0000ab89
     2ec:	00008bfd 	.word	0x00008bfd

000002f0 <convert>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: Function to format [vargs]
// Returns:     formatted string ptr
// *****************************************************************************************************************************************************************
static char *convert(unsigned int num, int base)
{
     2f0:	4603      	mov	r3, r0
	static char		Representation[]= "0123456789ABCDEF";
	static char		buffer[50];
	char		   *ptr;
	
	ptr = &buffer[49];
	*ptr = '\0';
     2f2:	4808      	ldr	r0, [pc, #32]	; (314 <convert+0x24>)
     2f4:	2200      	movs	r2, #0
{
     2f6:	b510      	push	{r4, lr}
	*ptr = '\0';
     2f8:	f800 2f31 	strb.w	r2, [r0, #49]!
	
	do {
		*--ptr = Representation[num%base];
     2fc:	4c06      	ldr	r4, [pc, #24]	; (318 <convert+0x28>)
     2fe:	fbb3 f2f1 	udiv	r2, r3, r1
     302:	fb01 3312 	mls	r3, r1, r2, r3
     306:	5ce3      	ldrb	r3, [r4, r3]
     308:	f800 3d01 	strb.w	r3, [r0, #-1]!
		num /= base;
	} while(num != 0);
     30c:	4613      	mov	r3, r2
     30e:	2a00      	cmp	r2, #0
     310:	d1f5      	bne.n	2fe <convert+0xe>
	
	return ptr;
}
     312:	bd10      	pop	{r4, pc}
     314:	200002dc 	.word	0x200002dc
     318:	0000ba68 	.word	0x0000ba68

0000031c <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
     31c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
     31e:	4b0e      	ldr	r3, [pc, #56]	; (358 <gpio_get_pin_level+0x3c>)
     320:	4605      	mov	r5, r0
     322:	a801      	add	r0, sp, #4
     324:	4798      	blx	r3
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
     326:	096b      	lsrs	r3, r5, #5
     328:	490c      	ldr	r1, [pc, #48]	; (35c <gpio_get_pin_level+0x40>)
     32a:	01db      	lsls	r3, r3, #7
     32c:	18ca      	adds	r2, r1, r3
     32e:	58c9      	ldr	r1, [r1, r3]
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Port *)hw)->Group[submodule_index].IN.reg;
     330:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
     332:	6914      	ldr	r4, [r2, #16]

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
     334:	405c      	eors	r4, r3
     336:	400c      	ands	r4, r1

	CRITICAL_SECTION_LEAVE();
     338:	a801      	add	r0, sp, #4
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
     33a:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
     33c:	4b08      	ldr	r3, [pc, #32]	; (360 <gpio_get_pin_level+0x44>)
     33e:	4798      	blx	r3
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
     340:	f005 051f 	and.w	r5, r5, #31
     344:	2301      	movs	r3, #1
     346:	fa03 f505 	lsl.w	r5, r3, r5
     34a:	4225      	tst	r5, r4
}
     34c:	bf14      	ite	ne
     34e:	4618      	movne	r0, r3
     350:	2000      	moveq	r0, #0
     352:	b003      	add	sp, #12
     354:	bd30      	pop	{r4, r5, pc}
     356:	bf00      	nop
     358:	000011cd 	.word	0x000011cd
     35c:	41008000 	.word	0x41008000
     360:	000011db 	.word	0x000011db

00000364 <wdt_feed.constprop.0>:
 *
 * \param[in] wdt The pointer to the HAL WDT instance.
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 */
static inline int32_t wdt_feed(struct wdt_descriptor *const wdt)
     364:	b510      	push	{r4, lr}
{
	ASSERT(wdt && wdt->dev.hw);
     366:	4c07      	ldr	r4, [pc, #28]	; (384 <wdt_feed.constprop.0+0x20>)
     368:	4b07      	ldr	r3, [pc, #28]	; (388 <wdt_feed.constprop.0+0x24>)
     36a:	6820      	ldr	r0, [r4, #0]
     36c:	4907      	ldr	r1, [pc, #28]	; (38c <wdt_feed.constprop.0+0x28>)
     36e:	3000      	adds	r0, #0
     370:	bf18      	it	ne
     372:	2001      	movne	r0, #1
     374:	22a9      	movs	r2, #169	; 0xa9
     376:	4798      	blx	r3

	return _wdt_feed(&wdt->dev);
     378:	4620      	mov	r0, r4
     37a:	4b05      	ldr	r3, [pc, #20]	; (390 <wdt_feed.constprop.0+0x2c>)
}
     37c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return _wdt_feed(&wdt->dev);
     380:	4718      	bx	r3
     382:	bf00      	nop
     384:	20007470 	.word	0x20007470
     388:	00002035 	.word	0x00002035
     38c:	0000ba79 	.word	0x0000ba79
     390:	00004401 	.word	0x00004401

00000394 <xprintf>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: Function to format and write the debug/info to the standard stream IO
// Returns:     Nothing
// *****************************************************************************************************************************************************************
void xprintf(char* format, ...) 
{ 
     394:	b40f      	push	{r0, r1, r2, r3}
     396:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     398:	ab08      	add	r3, sp, #32
	va_start(arg, format); 
	
	for (traverse = format; *traverse; traverse++) 
	{ 
	    if (*traverse != '%') {
			while (!usart_async_is_tx_empty(&USART_1)) {}
     39a:	4c53      	ldr	r4, [pc, #332]	; (4e8 <xprintf+0x154>)
{ 
     39c:	f853 6b04 	ldr.w	r6, [r3], #4
			while (!usart_async_is_tx_empty(&USART_1)) {}
     3a0:	4d52      	ldr	r5, [pc, #328]	; (4ec <xprintf+0x158>)
	va_start(arg, format); 
     3a2:	9301      	str	r3, [sp, #4]
	for (traverse = format; *traverse; traverse++) 
     3a4:	7833      	ldrb	r3, [r6, #0]
     3a6:	b923      	cbnz	r3, 3b2 <xprintf+0x1e>
			}	
		}
	} 
	
	va_end(arg); 
} 
     3a8:	b003      	add	sp, #12
     3aa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
     3ae:	b004      	add	sp, #16
     3b0:	4770      	bx	lr
	    if (*traverse != '%') {
     3b2:	2b25      	cmp	r3, #37	; 0x25
     3b4:	d010      	beq.n	3d8 <xprintf+0x44>
			while (!usart_async_is_tx_empty(&USART_1)) {}
     3b6:	4620      	mov	r0, r4
     3b8:	47a8      	blx	r5
     3ba:	2800      	cmp	r0, #0
     3bc:	d0fb      	beq.n	3b6 <xprintf+0x22>
			io_write((struct io_descriptor *const)io, (const uint8_t *const)traverse, 1);
     3be:	4b4c      	ldr	r3, [pc, #304]	; (4f0 <xprintf+0x15c>)
     3c0:	2201      	movs	r2, #1
     3c2:	6818      	ldr	r0, [r3, #0]
     3c4:	4b4b      	ldr	r3, [pc, #300]	; (4f4 <xprintf+0x160>)
     3c6:	4631      	mov	r1, r6
     3c8:	4798      	blx	r3
			while (!usart_async_is_tx_empty(&USART_1)) {}
     3ca:	4620      	mov	r0, r4
     3cc:	47a8      	blx	r5
     3ce:	2800      	cmp	r0, #0
     3d0:	d0fb      	beq.n	3ca <xprintf+0x36>
     3d2:	4637      	mov	r7, r6
	for (traverse = format; *traverse; traverse++) 
     3d4:	1c7e      	adds	r6, r7, #1
     3d6:	e7e5      	b.n	3a4 <xprintf+0x10>
			switch (*traverse)  { 
     3d8:	7873      	ldrb	r3, [r6, #1]
     3da:	2b6f      	cmp	r3, #111	; 0x6f
			traverse++; 
     3dc:	f106 0701 	add.w	r7, r6, #1
			switch (*traverse)  { 
     3e0:	d052      	beq.n	488 <xprintf+0xf4>
     3e2:	d81d      	bhi.n	420 <xprintf+0x8c>
     3e4:	2b63      	cmp	r3, #99	; 0x63
     3e6:	d039      	beq.n	45c <xprintf+0xc8>
     3e8:	2b64      	cmp	r3, #100	; 0x64
     3ea:	d1f3      	bne.n	3d4 <xprintf+0x40>
				case 'd' : i = va_arg(arg,int);
     3ec:	9b01      	ldr	r3, [sp, #4]
						s = convert(i, 10);
     3ee:	210a      	movs	r1, #10
				case 'd' : i = va_arg(arg,int);
     3f0:	1d1a      	adds	r2, r3, #4
						s = convert(i, 10);
     3f2:	6818      	ldr	r0, [r3, #0]
     3f4:	4b40      	ldr	r3, [pc, #256]	; (4f8 <xprintf+0x164>)
				case 'd' : i = va_arg(arg,int);
     3f6:	9201      	str	r2, [sp, #4]
						s = convert(i, 10);
     3f8:	4798      	blx	r3
     3fa:	4606      	mov	r6, r0
						while (!usart_async_is_tx_empty(&USART_1)) {}
     3fc:	4620      	mov	r0, r4
     3fe:	47a8      	blx	r5
     400:	2800      	cmp	r0, #0
     402:	d0fb      	beq.n	3fc <xprintf+0x68>
						io_write((struct io_descriptor *const)io, (const uint8_t *const)s, strlen(s));
     404:	4b3d      	ldr	r3, [pc, #244]	; (4fc <xprintf+0x168>)
     406:	4630      	mov	r0, r6
     408:	4798      	blx	r3
     40a:	4b39      	ldr	r3, [pc, #228]	; (4f0 <xprintf+0x15c>)
     40c:	b282      	uxth	r2, r0
     40e:	4631      	mov	r1, r6
     410:	6818      	ldr	r0, [r3, #0]
     412:	4b38      	ldr	r3, [pc, #224]	; (4f4 <xprintf+0x160>)
     414:	4798      	blx	r3
						while (!usart_async_is_tx_empty(&USART_1)) {}
     416:	4620      	mov	r0, r4
     418:	47a8      	blx	r5
     41a:	2800      	cmp	r0, #0
     41c:	d0fb      	beq.n	416 <xprintf+0x82>
     41e:	e7d9      	b.n	3d4 <xprintf+0x40>
			switch (*traverse)  { 
     420:	2b73      	cmp	r3, #115	; 0x73
     422:	d04b      	beq.n	4bc <xprintf+0x128>
     424:	2b78      	cmp	r3, #120	; 0x78
     426:	d1d5      	bne.n	3d4 <xprintf+0x40>
				case 'x': i = va_arg(arg,unsigned int);
     428:	9b01      	ldr	r3, [sp, #4]
						s = convert(i, 16);
     42a:	2110      	movs	r1, #16
				case 'x': i = va_arg(arg,unsigned int);
     42c:	1d1a      	adds	r2, r3, #4
						s = convert(i, 16);
     42e:	6818      	ldr	r0, [r3, #0]
     430:	4b31      	ldr	r3, [pc, #196]	; (4f8 <xprintf+0x164>)
				case 'x': i = va_arg(arg,unsigned int);
     432:	9201      	str	r2, [sp, #4]
						s = convert(i, 16);
     434:	4798      	blx	r3
     436:	4606      	mov	r6, r0
						while (!usart_async_is_tx_empty(&USART_1)) {}
     438:	4620      	mov	r0, r4
     43a:	47a8      	blx	r5
     43c:	2800      	cmp	r0, #0
     43e:	d0fb      	beq.n	438 <xprintf+0xa4>
						io_write((struct io_descriptor *const)io, (const uint8_t *const)s, strlen(s));
     440:	4b2e      	ldr	r3, [pc, #184]	; (4fc <xprintf+0x168>)
     442:	4630      	mov	r0, r6
     444:	4798      	blx	r3
     446:	4b2a      	ldr	r3, [pc, #168]	; (4f0 <xprintf+0x15c>)
     448:	b282      	uxth	r2, r0
     44a:	4631      	mov	r1, r6
     44c:	6818      	ldr	r0, [r3, #0]
     44e:	4b29      	ldr	r3, [pc, #164]	; (4f4 <xprintf+0x160>)
     450:	4798      	blx	r3
						while (!usart_async_is_tx_empty(&USART_1)) {}
     452:	4620      	mov	r0, r4
     454:	47a8      	blx	r5
     456:	2800      	cmp	r0, #0
     458:	d0fb      	beq.n	452 <xprintf+0xbe>
     45a:	e7bb      	b.n	3d4 <xprintf+0x40>
				case 'c' : i = va_arg(arg, int);
     45c:	9b01      	ldr	r3, [sp, #4]
     45e:	1d1a      	adds	r2, r3, #4
						temp = (char)i;
     460:	681b      	ldr	r3, [r3, #0]
				case 'c' : i = va_arg(arg, int);
     462:	9201      	str	r2, [sp, #4]
						temp = (char)i;
     464:	f88d 3003 	strb.w	r3, [sp, #3]
						while (!usart_async_is_tx_empty(&USART_1)) {}
     468:	4620      	mov	r0, r4
     46a:	47a8      	blx	r5
     46c:	2800      	cmp	r0, #0
     46e:	d0fb      	beq.n	468 <xprintf+0xd4>
						io_write((struct io_descriptor *const)io, (const uint8_t *const)&temp, 1);
     470:	4b1f      	ldr	r3, [pc, #124]	; (4f0 <xprintf+0x15c>)
     472:	2201      	movs	r2, #1
     474:	6818      	ldr	r0, [r3, #0]
     476:	4b1f      	ldr	r3, [pc, #124]	; (4f4 <xprintf+0x160>)
     478:	f10d 0103 	add.w	r1, sp, #3
     47c:	4798      	blx	r3
						while (!usart_async_is_tx_empty(&USART_1)) {}
     47e:	4620      	mov	r0, r4
     480:	47a8      	blx	r5
     482:	2800      	cmp	r0, #0
     484:	d0fb      	beq.n	47e <xprintf+0xea>
     486:	e7a5      	b.n	3d4 <xprintf+0x40>
				case 'o': i = va_arg(arg,unsigned int);
     488:	9b01      	ldr	r3, [sp, #4]
						s = convert(i, 8);
     48a:	2108      	movs	r1, #8
				case 'o': i = va_arg(arg,unsigned int);
     48c:	1d1a      	adds	r2, r3, #4
						s = convert(i, 8);
     48e:	6818      	ldr	r0, [r3, #0]
     490:	4b19      	ldr	r3, [pc, #100]	; (4f8 <xprintf+0x164>)
				case 'o': i = va_arg(arg,unsigned int);
     492:	9201      	str	r2, [sp, #4]
						s = convert(i, 8);
     494:	4798      	blx	r3
     496:	4606      	mov	r6, r0
						while (!usart_async_is_tx_empty(&USART_1)) {}
     498:	4620      	mov	r0, r4
     49a:	47a8      	blx	r5
     49c:	2800      	cmp	r0, #0
     49e:	d0fb      	beq.n	498 <xprintf+0x104>
						io_write((struct io_descriptor *const)io, (const uint8_t *const)s, strlen(s));
     4a0:	4b16      	ldr	r3, [pc, #88]	; (4fc <xprintf+0x168>)
     4a2:	4630      	mov	r0, r6
     4a4:	4798      	blx	r3
     4a6:	4b12      	ldr	r3, [pc, #72]	; (4f0 <xprintf+0x15c>)
     4a8:	b282      	uxth	r2, r0
     4aa:	4631      	mov	r1, r6
     4ac:	6818      	ldr	r0, [r3, #0]
     4ae:	4b11      	ldr	r3, [pc, #68]	; (4f4 <xprintf+0x160>)
     4b0:	4798      	blx	r3
						while (!usart_async_is_tx_empty(&USART_1)) {}
     4b2:	4620      	mov	r0, r4
     4b4:	47a8      	blx	r5
     4b6:	2800      	cmp	r0, #0
     4b8:	d0fb      	beq.n	4b2 <xprintf+0x11e>
     4ba:	e78b      	b.n	3d4 <xprintf+0x40>
				case 's': s = va_arg(arg,char *);
     4bc:	9b01      	ldr	r3, [sp, #4]
     4be:	1d1a      	adds	r2, r3, #4
     4c0:	681e      	ldr	r6, [r3, #0]
     4c2:	9201      	str	r2, [sp, #4]
						while (!usart_async_is_tx_empty(&USART_1)) {}
     4c4:	4620      	mov	r0, r4
     4c6:	47a8      	blx	r5
     4c8:	2800      	cmp	r0, #0
     4ca:	d0fb      	beq.n	4c4 <xprintf+0x130>
						io_write((struct io_descriptor *const)io, (const uint8_t *const)s, strlen(s));
     4cc:	4b0b      	ldr	r3, [pc, #44]	; (4fc <xprintf+0x168>)
     4ce:	4630      	mov	r0, r6
     4d0:	4798      	blx	r3
     4d2:	4b07      	ldr	r3, [pc, #28]	; (4f0 <xprintf+0x15c>)
     4d4:	b282      	uxth	r2, r0
     4d6:	4631      	mov	r1, r6
     4d8:	6818      	ldr	r0, [r3, #0]
     4da:	4b06      	ldr	r3, [pc, #24]	; (4f4 <xprintf+0x160>)
     4dc:	4798      	blx	r3
						while (!usart_async_is_tx_empty(&USART_1)) {}
     4de:	4620      	mov	r0, r4
     4e0:	47a8      	blx	r5
     4e2:	2800      	cmp	r0, #0
     4e4:	d0fb      	beq.n	4de <xprintf+0x14a>
     4e6:	e775      	b.n	3d4 <xprintf+0x40>
     4e8:	200074d8 	.word	0x200074d8
     4ec:	00001b1d 	.word	0x00001b1d
     4f0:	20007f08 	.word	0x20007f08
     4f4:	00001515 	.word	0x00001515
     4f8:	000002f1 	.word	0x000002f1
     4fc:	0000ae29 	.word	0x0000ae29

00000500 <read_boardvalues>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: read and access all main board hardware such as I2C and GPIO to collate a live snapshot of plugged-in cards and sensors
// Returns:     Nothing
// *****************************************************************************************************************************************************************
void read_boardvalues(void)
{
     500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int		err, counter_det;
	
	if (read_hardware_index == 0) {
     504:	4da1      	ldr	r5, [pc, #644]	; (78c <read_boardvalues+0x28c>)
     506:	782e      	ldrb	r6, [r5, #0]
{
     508:	b08b      	sub	sp, #44	; 0x2c
	if (read_hardware_index == 0) {
     50a:	2e00      	cmp	r6, #0
     50c:	f040 80ab 	bne.w	666 <read_boardvalues+0x166>
}

static inline void hri_adc_write_INPUTCTRL_reg(const void *const hw, hri_adc_inputctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->INPUTCTRL.reg = data;
     510:	4b9f      	ldr	r3, [pc, #636]	; (790 <read_boardvalues+0x290>)
		hri_adc_write_INPUTCTRL_reg(ADC0, 0x1800 + 0);	/* Select AIN<0> - [Water 1] Analogue Input */
		delay_ms(2);
	
		/* Read the ADC value of the first water sensor. If bad result write error debug and set variable to 0xFF */
		err = adc_sync_read_channel(&ADC_0, 0, (uint8_t *const)&readdata_water1, 1);
     512:	4fa0      	ldr	r7, [pc, #640]	; (794 <read_boardvalues+0x294>)
     514:	4ca0      	ldr	r4, [pc, #640]	; (798 <read_boardvalues+0x298>)
     516:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
     51a:	809a      	strh	r2, [r3, #4]
		delay_ms(2);
     51c:	2002      	movs	r0, #2
     51e:	4b9f      	ldr	r3, [pc, #636]	; (79c <read_boardvalues+0x29c>)
     520:	4798      	blx	r3
		err = adc_sync_read_channel(&ADC_0, 0, (uint8_t *const)&readdata_water1, 1);
     522:	2301      	movs	r3, #1
     524:	463a      	mov	r2, r7
     526:	4631      	mov	r1, r6
     528:	489d      	ldr	r0, [pc, #628]	; (7a0 <read_boardvalues+0x2a0>)
     52a:	47a0      	blx	r4
		if (err != 1) {
     52c:	2801      	cmp	r0, #1
		err = adc_sync_read_channel(&ADC_0, 0, (uint8_t *const)&readdata_water1, 1);
     52e:	4604      	mov	r4, r0
		if (err != 1) {
     530:	d003      	beq.n	53a <read_boardvalues+0x3a>
			xprintf("Could NOT read from the water detector 1\r\n");
     532:	489c      	ldr	r0, [pc, #624]	; (7a4 <read_boardvalues+0x2a4>)
     534:	4b9c      	ldr	r3, [pc, #624]	; (7a8 <read_boardvalues+0x2a8>)
     536:	4798      	blx	r3
	
			readdata_water1 = 0;
     538:	703e      	strb	r6, [r7, #0]
		}
		
		read_hardware_index = 1;
     53a:	2301      	movs	r3, #1
			xprintf("Could NOT read from the moisture & temp sensor on CARDB:I2C [%i]\r\n", err);
		
			memset(&readdata_tempmoisture, 0xFF, 4);
		}
		
		read_hardware_index = 0;
     53c:	702b      	strb	r3, [r5, #0]
	}

	/* Read the main simple GPIO inputs for determining the status of tamper, daughter cards */ 
	tamper = (gpio_get_pin_level(PB02_TAMP_OP)) ? 1 : 0;
     53e:	2022      	movs	r0, #34	; 0x22
     540:	4d9a      	ldr	r5, [pc, #616]	; (7ac <read_boardvalues+0x2ac>)
     542:	4f9b      	ldr	r7, [pc, #620]	; (7b0 <read_boardvalues+0x2b0>)
	cardA_present = (gpio_get_pin_level(PC00_CARDA_PRESENT)) ? 0 : 1;
     544:	4e9b      	ldr	r6, [pc, #620]	; (7b4 <read_boardvalues+0x2b4>)
	tamper = (gpio_get_pin_level(PB02_TAMP_OP)) ? 1 : 0;
     546:	47a8      	blx	r5
     548:	7038      	strb	r0, [r7, #0]
	cardA_present = (gpio_get_pin_level(PC00_CARDA_PRESENT)) ? 0 : 1;
     54a:	2040      	movs	r0, #64	; 0x40
     54c:	47a8      	blx	r5
     54e:	f080 0001 	eor.w	r0, r0, #1
     552:	7030      	strb	r0, [r6, #0]
	cardB_present = (gpio_get_pin_level(PC01_CARDB_PRESENT)) ? 0 : 1;
     554:	2041      	movs	r0, #65	; 0x41
     556:	47a8      	blx	r5
     558:	4d97      	ldr	r5, [pc, #604]	; (7b8 <read_boardvalues+0x2b8>)

	/* If tamper switch is closed and the enclosure lid is correct, then the LEDs do not illuminate. Else show the ETH and PWR LEDs according to the system state */
	if (tamper) {
     55a:	783b      	ldrb	r3, [r7, #0]
     55c:	9702      	str	r7, [sp, #8]
	cardB_present = (gpio_get_pin_level(PC01_CARDB_PRESENT)) ? 0 : 1;
     55e:	f080 0001 	eor.w	r0, r0, #1
     562:	7028      	strb	r0, [r5, #0]
     564:	4a95      	ldr	r2, [pc, #596]	; (7bc <read_boardvalues+0x2bc>)
	if (tamper) {
     566:	2b00      	cmp	r3, #0
     568:	f000 80d4 	beq.w	714 <read_boardvalues+0x214>
		if (ring_broken == RING_BROKEN) {
     56c:	4b94      	ldr	r3, [pc, #592]	; (7c0 <read_boardvalues+0x2c0>)
     56e:	781b      	ldrb	r3, [r3, #0]
     570:	2b01      	cmp	r3, #1
     572:	f040 80c5 	bne.w	700 <read_boardvalues+0x200>
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
     576:	2308      	movs	r3, #8
     578:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     57c:	2310      	movs	r3, #16
     57e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
		gpio_set_pin_level(PB03_LED_ETH, 0);
		gpio_set_pin_level(PB04_LED_PWR, 0);
	}

	/* Read the status of the two LEFT and RIGHT main Ethernet ports, along with the T-junction Power & Ethernet adapter channel */
	link_port1 = (readKSZreg(SPI_KSZ8794_PORT1STATUS2) & 0x20) ? 1 : 0;
     582:	4f90      	ldr	r7, [pc, #576]	; (7c4 <read_boardvalues+0x2c4>)
     584:	f8df 92a4 	ldr.w	r9, [pc, #676]	; 82c <read_boardvalues+0x32c>
	link_port2 = (readKSZreg(SPI_KSZ8794_PORT2STATUS2) & 0x20) ? 1 : 0;
     588:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 830 <read_boardvalues+0x330>
	link_port1 = (readKSZreg(SPI_KSZ8794_PORT1STATUS2) & 0x20) ? 1 : 0;
     58c:	201e      	movs	r0, #30
     58e:	47b8      	blx	r7
     590:	f3c0 1040 	ubfx	r0, r0, #5, #1
     594:	f889 0000 	strb.w	r0, [r9]
	link_port2 = (readKSZreg(SPI_KSZ8794_PORT2STATUS2) & 0x20) ? 1 : 0;
     598:	202e      	movs	r0, #46	; 0x2e
     59a:	47b8      	blx	r7
     59c:	f3c0 1040 	ubfx	r0, r0, #5, #1
     5a0:	f888 0000 	strb.w	r0, [r8]
	link_port3 = (readKSZreg(SPI_KSZ8794_PORT3STATUS2) & 0x20) ? 1 : 0;
     5a4:	203e      	movs	r0, #62	; 0x3e
     5a6:	47b8      	blx	r7
     5a8:	4a87      	ldr	r2, [pc, #540]	; (7c8 <read_boardvalues+0x2c8>)

	/* Detect change of status for debug */
	if (tamper != old_tamper) {
     5aa:	9b02      	ldr	r3, [sp, #8]
     5ac:	f8cd 900c 	str.w	r9, [sp, #12]
	link_port3 = (readKSZreg(SPI_KSZ8794_PORT3STATUS2) & 0x20) ? 1 : 0;
     5b0:	f3c0 1040 	ubfx	r0, r0, #5, #1
     5b4:	7010      	strb	r0, [r2, #0]
	if (tamper != old_tamper) {
     5b6:	7818      	ldrb	r0, [r3, #0]
     5b8:	4b84      	ldr	r3, [pc, #528]	; (7cc <read_boardvalues+0x2cc>)
     5ba:	f8cd 8010 	str.w	r8, [sp, #16]
     5be:	7819      	ldrb	r1, [r3, #0]
     5c0:	9205      	str	r2, [sp, #20]
     5c2:	4281      	cmp	r1, r0
     5c4:	9306      	str	r3, [sp, #24]
     5c6:	d007      	beq.n	5d8 <read_boardvalues+0xd8>
		xprintf("Lid TAMPER [%s]\r\n", (!tamper) ? "GOOD" : "ACTIVE");
     5c8:	4b81      	ldr	r3, [pc, #516]	; (7d0 <read_boardvalues+0x2d0>)
     5ca:	4982      	ldr	r1, [pc, #520]	; (7d4 <read_boardvalues+0x2d4>)
     5cc:	2800      	cmp	r0, #0
     5ce:	bf18      	it	ne
     5d0:	4619      	movne	r1, r3
     5d2:	4881      	ldr	r0, [pc, #516]	; (7d8 <read_boardvalues+0x2d8>)
     5d4:	4b74      	ldr	r3, [pc, #464]	; (7a8 <read_boardvalues+0x2a8>)
     5d6:	4798      	blx	r3
	}

	/* Detect change of status for debug */
	if (link_port1 != old_link_port1) {
     5d8:	4a80      	ldr	r2, [pc, #512]	; (7dc <read_boardvalues+0x2dc>)
     5da:	9b03      	ldr	r3, [sp, #12]
     5dc:	7811      	ldrb	r1, [r2, #0]
     5de:	781b      	ldrb	r3, [r3, #0]
     5e0:	9207      	str	r2, [sp, #28]
     5e2:	4299      	cmp	r1, r3
     5e4:	d007      	beq.n	5f6 <read_boardvalues+0xf6>
		xprintf("Left Ethernet [%s]\r\n", (link_port1) ? "GOOD" : "LINKDOWN");
     5e6:	4a7e      	ldr	r2, [pc, #504]	; (7e0 <read_boardvalues+0x2e0>)
     5e8:	497a      	ldr	r1, [pc, #488]	; (7d4 <read_boardvalues+0x2d4>)
     5ea:	487e      	ldr	r0, [pc, #504]	; (7e4 <read_boardvalues+0x2e4>)
     5ec:	2b00      	cmp	r3, #0
     5ee:	bf08      	it	eq
     5f0:	4611      	moveq	r1, r2
     5f2:	4b6d      	ldr	r3, [pc, #436]	; (7a8 <read_boardvalues+0x2a8>)
     5f4:	4798      	blx	r3
	}

	/* Detect change of status for debug */
	if (link_port2 != old_link_port2) {
     5f6:	4a7c      	ldr	r2, [pc, #496]	; (7e8 <read_boardvalues+0x2e8>)
     5f8:	9b04      	ldr	r3, [sp, #16]
     5fa:	7811      	ldrb	r1, [r2, #0]
     5fc:	781b      	ldrb	r3, [r3, #0]
     5fe:	9208      	str	r2, [sp, #32]
     600:	4299      	cmp	r1, r3
     602:	d007      	beq.n	614 <read_boardvalues+0x114>
		xprintf("Right Ethernet [%s]\r\n", (link_port2) ? "GOOD" : "LINKDOWN");
     604:	4a76      	ldr	r2, [pc, #472]	; (7e0 <read_boardvalues+0x2e0>)
     606:	4973      	ldr	r1, [pc, #460]	; (7d4 <read_boardvalues+0x2d4>)
     608:	4878      	ldr	r0, [pc, #480]	; (7ec <read_boardvalues+0x2ec>)
     60a:	2b00      	cmp	r3, #0
     60c:	bf08      	it	eq
     60e:	4611      	moveq	r1, r2
     610:	4b65      	ldr	r3, [pc, #404]	; (7a8 <read_boardvalues+0x2a8>)
     612:	4798      	blx	r3
	}

	/* Detect change of status for debug */
	if (link_port3 != old_link_port3) {
     614:	9b05      	ldr	r3, [sp, #20]
     616:	4a76      	ldr	r2, [pc, #472]	; (7f0 <read_boardvalues+0x2f0>)
     618:	781b      	ldrb	r3, [r3, #0]
     61a:	7812      	ldrb	r2, [r2, #0]
     61c:	429a      	cmp	r2, r3
     61e:	d007      	beq.n	630 <read_boardvalues+0x130>
		xprintf("Power & Ethernet <Comms Link> [%s]\r\n", (link_port3) ? "GOOD" : "DOWN");
     620:	4a74      	ldr	r2, [pc, #464]	; (7f4 <read_boardvalues+0x2f4>)
     622:	496c      	ldr	r1, [pc, #432]	; (7d4 <read_boardvalues+0x2d4>)
     624:	4874      	ldr	r0, [pc, #464]	; (7f8 <read_boardvalues+0x2f8>)
     626:	2b00      	cmp	r3, #0
     628:	bf08      	it	eq
     62a:	4611      	moveq	r1, r2
     62c:	4b5e      	ldr	r3, [pc, #376]	; (7a8 <read_boardvalues+0x2a8>)
     62e:	4798      	blx	r3
	}

	/* Detect change of status of Slot [A] daughter-card */
	if ((!cardA_old) && (cardA_present)) {
     630:	4a72      	ldr	r2, [pc, #456]	; (7fc <read_boardvalues+0x2fc>)
     632:	9209      	str	r2, [sp, #36]	; 0x24
     634:	7813      	ldrb	r3, [r2, #0]
     636:	2b00      	cmp	r3, #0
     638:	f040 814c 	bne.w	8d4 <read_boardvalues+0x3d4>
     63c:	7832      	ldrb	r2, [r6, #0]
     63e:	2a00      	cmp	r2, #0
     640:	f000 8148 	beq.w	8d4 <read_boardvalues+0x3d4>
		/* Read the I2C device address on the card to establish type of card */
		
		counter_det = 10;
		while (counter_det--) {
			delay_ms(500);
     644:	f8df a154 	ldr.w	sl, [pc, #340]	; 79c <read_boardvalues+0x29c>
			
			/* Kick the watchdog time-out facility */
			wdt_feed(&WDT_0);
     648:	f8df b1e8 	ldr.w	fp, [pc, #488]	; 834 <read_boardvalues+0x334>
			
			if (!(err = I2C_check_deviceID(PC27_CARDA_I2C_SDA, PC28_CARDA_I2C_CLK, 0x60))) {
     64c:	4f6c      	ldr	r7, [pc, #432]	; (800 <read_boardvalues+0x300>)
     64e:	f04f 090b 	mov.w	r9, #11
		while (counter_det--) {
     652:	f1b9 0901 	subs.w	r9, r9, #1
     656:	d164      	bne.n	722 <read_boardvalues+0x222>
			} else {
				cardA_type = CARD_NOTFITTED;
			}
		}

		if (err < 0) {
     658:	2c00      	cmp	r4, #0
     65a:	da71      	bge.n	740 <read_boardvalues+0x240>
			xprintf("Could not read I2C bus on CARDA for I2C_check_deviceID() [%i]\r\n", err);
     65c:	4621      	mov	r1, r4
     65e:	4869      	ldr	r0, [pc, #420]	; (804 <read_boardvalues+0x304>)
     660:	4b51      	ldr	r3, [pc, #324]	; (7a8 <read_boardvalues+0x2a8>)
     662:	4798      	blx	r3
     664:	e06c      	b.n	740 <read_boardvalues+0x240>
	} else if (read_hardware_index == 1) {
     666:	2e01      	cmp	r6, #1
     668:	d117      	bne.n	69a <read_boardvalues+0x19a>
     66a:	4b49      	ldr	r3, [pc, #292]	; (790 <read_boardvalues+0x290>)
		err = adc_sync_read_channel(&ADC_0, 0, (uint8_t *const)&readdata_water2, 1);
     66c:	4f66      	ldr	r7, [pc, #408]	; (808 <read_boardvalues+0x308>)
     66e:	4c4a      	ldr	r4, [pc, #296]	; (798 <read_boardvalues+0x298>)
     670:	f641 0202 	movw	r2, #6146	; 0x1802
     674:	809a      	strh	r2, [r3, #4]
		delay_ms(2);
     676:	2002      	movs	r0, #2
     678:	4b48      	ldr	r3, [pc, #288]	; (79c <read_boardvalues+0x29c>)
     67a:	4798      	blx	r3
		err = adc_sync_read_channel(&ADC_0, 0, (uint8_t *const)&readdata_water2, 1);
     67c:	4633      	mov	r3, r6
     67e:	463a      	mov	r2, r7
     680:	2100      	movs	r1, #0
     682:	4847      	ldr	r0, [pc, #284]	; (7a0 <read_boardvalues+0x2a0>)
     684:	47a0      	blx	r4
		if (err != 1) {
     686:	2801      	cmp	r0, #1
		err = adc_sync_read_channel(&ADC_0, 0, (uint8_t *const)&readdata_water2, 1);
     688:	4604      	mov	r4, r0
		if (err != 1) {
     68a:	d004      	beq.n	696 <read_boardvalues+0x196>
			xprintf("Could NOT read from the water detector 2\r\n");
     68c:	4b46      	ldr	r3, [pc, #280]	; (7a8 <read_boardvalues+0x2a8>)
     68e:	485f      	ldr	r0, [pc, #380]	; (80c <read_boardvalues+0x30c>)
     690:	4798      	blx	r3
			readdata_water2 = 0;
     692:	2300      	movs	r3, #0
     694:	703b      	strb	r3, [r7, #0]
		read_hardware_index = 2;
     696:	2302      	movs	r3, #2
     698:	e750      	b.n	53c <read_boardvalues+0x3c>
	} else if (read_hardware_index == 2) {
     69a:	2e02      	cmp	r6, #2
     69c:	d117      	bne.n	6ce <read_boardvalues+0x1ce>
     69e:	4b3c      	ldr	r3, [pc, #240]	; (790 <read_boardvalues+0x290>)
		err = adc_sync_read_channel(&ADC_0, 0, (uint8_t *const)&highvoltage, 1);
     6a0:	4c3d      	ldr	r4, [pc, #244]	; (798 <read_boardvalues+0x298>)
     6a2:	f641 0201 	movw	r2, #6145	; 0x1801
		delay_ms(2);
     6a6:	4630      	mov	r0, r6
		err = adc_sync_read_channel(&ADC_0, 0, (uint8_t *const)&highvoltage, 1);
     6a8:	4e59      	ldr	r6, [pc, #356]	; (810 <read_boardvalues+0x310>)
     6aa:	809a      	strh	r2, [r3, #4]
		delay_ms(2);
     6ac:	4b3b      	ldr	r3, [pc, #236]	; (79c <read_boardvalues+0x29c>)
     6ae:	4798      	blx	r3
		err = adc_sync_read_channel(&ADC_0, 0, (uint8_t *const)&highvoltage, 1);
     6b0:	2301      	movs	r3, #1
     6b2:	4632      	mov	r2, r6
     6b4:	2100      	movs	r1, #0
     6b6:	483a      	ldr	r0, [pc, #232]	; (7a0 <read_boardvalues+0x2a0>)
     6b8:	47a0      	blx	r4
		if (err != 1) {
     6ba:	2801      	cmp	r0, #1
		err = adc_sync_read_channel(&ADC_0, 0, (uint8_t *const)&highvoltage, 1);
     6bc:	4604      	mov	r4, r0
		if (err != 1) {
     6be:	d004      	beq.n	6ca <read_boardvalues+0x1ca>
			xprintf("Could NOT read from the HV divider\r\n");
     6c0:	4b39      	ldr	r3, [pc, #228]	; (7a8 <read_boardvalues+0x2a8>)
     6c2:	4854      	ldr	r0, [pc, #336]	; (814 <read_boardvalues+0x314>)
     6c4:	4798      	blx	r3
			highvoltage = 0;
     6c6:	2300      	movs	r3, #0
     6c8:	7033      	strb	r3, [r6, #0]
		read_hardware_index = 3;
     6ca:	2303      	movs	r3, #3
     6cc:	e736      	b.n	53c <read_boardvalues+0x3c>
		if ((err = I2C_getTEMPandMOISTURE(PB24_CARDB_I2C_SDA,  PB25_CARDB_I2C_CLK, &readdata_tempmoisture[0], &readdata_tempmoisture[1], &readdata_tempmoisture[2], &readdata_tempmoisture[3]) < 0)) {
     6ce:	4e52      	ldr	r6, [pc, #328]	; (818 <read_boardvalues+0x318>)
     6d0:	4c52      	ldr	r4, [pc, #328]	; (81c <read_boardvalues+0x31c>)
     6d2:	1cb3      	adds	r3, r6, #2
     6d4:	9301      	str	r3, [sp, #4]
     6d6:	1c73      	adds	r3, r6, #1
     6d8:	9300      	str	r3, [sp, #0]
     6da:	1e72      	subs	r2, r6, #1
     6dc:	4633      	mov	r3, r6
     6de:	2139      	movs	r1, #57	; 0x39
     6e0:	2038      	movs	r0, #56	; 0x38
     6e2:	47a0      	blx	r4
     6e4:	2800      	cmp	r0, #0
     6e6:	ea4f 74d0 	mov.w	r4, r0, lsr #31
     6ea:	da07      	bge.n	6fc <read_boardvalues+0x1fc>
			xprintf("Could NOT read from the moisture & temp sensor on CARDB:I2C [%i]\r\n", err);
     6ec:	4b2e      	ldr	r3, [pc, #184]	; (7a8 <read_boardvalues+0x2a8>)
     6ee:	484c      	ldr	r0, [pc, #304]	; (820 <read_boardvalues+0x320>)
     6f0:	2101      	movs	r1, #1
     6f2:	4798      	blx	r3
			memset(&readdata_tempmoisture, 0xFF, 4);
     6f4:	f04f 33ff 	mov.w	r3, #4294967295
     6f8:	f846 3c01 	str.w	r3, [r6, #-1]
		read_hardware_index = 0;
     6fc:	2300      	movs	r3, #0
     6fe:	e71d      	b.n	53c <read_boardvalues+0x3c>
			gpio_set_pin_level(PB03_LED_ETH, (good_ethernet) ? 1 : 0);
     700:	4b48      	ldr	r3, [pc, #288]	; (824 <read_boardvalues+0x324>)
	if (level) {
     702:	7819      	ldrb	r1, [r3, #0]
     704:	2308      	movs	r3, #8
     706:	b111      	cbz	r1, 70e <read_boardvalues+0x20e>
     708:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
     70c:	e736      	b.n	57c <read_boardvalues+0x7c>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     70e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
     712:	e733      	b.n	57c <read_boardvalues+0x7c>
     714:	2308      	movs	r3, #8
     716:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
     71a:	2310      	movs	r3, #16
     71c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
     720:	e72f      	b.n	582 <read_boardvalues+0x82>
			delay_ms(500);
     722:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     726:	47d0      	blx	sl
			wdt_feed(&WDT_0);
     728:	47d8      	blx	fp
			if (!(err = I2C_check_deviceID(PC27_CARDA_I2C_SDA, PC28_CARDA_I2C_CLK, 0x60))) {
     72a:	2260      	movs	r2, #96	; 0x60
     72c:	215c      	movs	r1, #92	; 0x5c
     72e:	205b      	movs	r0, #91	; 0x5b
     730:	47b8      	blx	r7
     732:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 828 <read_boardvalues+0x328>
     736:	4604      	mov	r4, r0
     738:	b968      	cbnz	r0, 756 <read_boardvalues+0x256>
				cardA_type = CARD_VIBRATEK;
     73a:	2301      	movs	r3, #1
				cardA_type = CARD_PE;
     73c:	f888 3000 	strb.w	r3, [r8]
		}
		
		/* Actions to be taken for each different card type */
		switch (cardA_type) {
     740:	4b39      	ldr	r3, [pc, #228]	; (828 <read_boardvalues+0x328>)
     742:	4f19      	ldr	r7, [pc, #100]	; (7a8 <read_boardvalues+0x2a8>)
     744:	781b      	ldrb	r3, [r3, #0]
     746:	3b01      	subs	r3, #1
     748:	2b04      	cmp	r3, #4
     74a:	d875      	bhi.n	838 <read_boardvalues+0x338>
     74c:	e8df f003 	tbb	[pc, r3]
     750:	9e8f91a0 	.word	0x9e8f91a0
     754:	b1          	.byte	0xb1
     755:	00          	.byte	0x00
			} else if (!(err = I2C_check_deviceID(PC27_CARDA_I2C_SDA, PC28_CARDA_I2C_CLK, 0x50))) {
     756:	2250      	movs	r2, #80	; 0x50
     758:	215c      	movs	r1, #92	; 0x5c
     75a:	205b      	movs	r0, #91	; 0x5b
     75c:	47b8      	blx	r7
     75e:	4604      	mov	r4, r0
     760:	b908      	cbnz	r0, 766 <read_boardvalues+0x266>
				cardA_type = CARD_PE;
     762:	2305      	movs	r3, #5
     764:	e7ea      	b.n	73c <read_boardvalues+0x23c>
			} else if ((!(err = I2C_check_deviceID(PC27_CARDA_I2C_SDA, PC28_CARDA_I2C_CLK, 0x41))) && (!(err = I2C_check_deviceID(PC27_CARDA_I2C_SDA, PC28_CARDA_I2C_CLK, 0x68)))) {
     766:	2241      	movs	r2, #65	; 0x41
     768:	215c      	movs	r1, #92	; 0x5c
     76a:	205b      	movs	r0, #91	; 0x5b
     76c:	47b8      	blx	r7
     76e:	4604      	mov	r4, r0
     770:	b938      	cbnz	r0, 782 <read_boardvalues+0x282>
     772:	2268      	movs	r2, #104	; 0x68
     774:	215c      	movs	r1, #92	; 0x5c
     776:	205b      	movs	r0, #91	; 0x5b
     778:	47b8      	blx	r7
     77a:	4604      	mov	r4, r0
     77c:	b908      	cbnz	r0, 782 <read_boardvalues+0x282>
				cardA_type = CARD_MINI_IO;
     77e:	2302      	movs	r3, #2
     780:	e7dc      	b.n	73c <read_boardvalues+0x23c>
				cardA_type = CARD_NOTFITTED;
     782:	2300      	movs	r3, #0
     784:	f888 3000 	strb.w	r3, [r8]
     788:	e763      	b.n	652 <read_boardvalues+0x152>
     78a:	bf00      	nop
     78c:	2000757a 	.word	0x2000757a
     790:	43001c00 	.word	0x43001c00
     794:	2000853e 	.word	0x2000853e
     798:	00001099 	.word	0x00001099
     79c:	0000124d 	.word	0x0000124d
     7a0:	2000746c 	.word	0x2000746c
     7a4:	0000baa7 	.word	0x0000baa7
     7a8:	00000395 	.word	0x00000395
     7ac:	0000031d 	.word	0x0000031d
     7b0:	20007f9b 	.word	0x20007f9b
     7b4:	2000854c 	.word	0x2000854c
     7b8:	2000757b 	.word	0x2000757b
     7bc:	41008000 	.word	0x41008000
     7c0:	20008251 	.word	0x20008251
     7c4:	0000ac8d 	.word	0x0000ac8d
     7c8:	20007575 	.word	0x20007575
     7cc:	2000852c 	.word	0x2000852c
     7d0:	0000ba97 	.word	0x0000ba97
     7d4:	0000ba92 	.word	0x0000ba92
     7d8:	0000bb65 	.word	0x0000bb65
     7dc:	2000757f 	.word	0x2000757f
     7e0:	0000ba9e 	.word	0x0000ba9e
     7e4:	0000bb77 	.word	0x0000bb77
     7e8:	20007570 	.word	0x20007570
     7ec:	0000bb8c 	.word	0x0000bb8c
     7f0:	2000825c 	.word	0x2000825c
     7f4:	0000d40a 	.word	0x0000d40a
     7f8:	0000bba2 	.word	0x0000bba2
     7fc:	20007573 	.word	0x20007573
     800:	000060dd 	.word	0x000060dd
     804:	0000bbc7 	.word	0x0000bbc7
     808:	2000852d 	.word	0x2000852d
     80c:	0000bad2 	.word	0x0000bad2
     810:	20008535 	.word	0x20008535
     814:	0000bafd 	.word	0x0000bafd
     818:	20007f9e 	.word	0x20007f9e
     81c:	00005515 	.word	0x00005515
     820:	0000bb22 	.word	0x0000bb22
     824:	20007579 	.word	0x20007579
     828:	20007c57 	.word	0x20007c57
     82c:	20007571 	.word	0x20007571
     830:	20008274 	.word	0x20008274
     834:	00000365 	.word	0x00000365
			case CARD_NOTFITTED:
			default:
			xprintf("CARDA inserted but not identified\r\n");
     838:	4869      	ldr	r0, [pc, #420]	; (9e0 <read_boardvalues+0x4e0>)
			writeKSZreg(SPI_KSZ8794_PORT3CONTROL2, 0x00);
			delay_us(50);
			
			if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL2, 0x00))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL2] not correct\r\n"); }
				
			xprintf("CARDA has been REMOVED\r\n");
     83a:	47b8      	blx	r7
		}
	}

	/* Detect change of status of Slot [B] daughter-card */
	if ((!cardB_old) && (cardB_present)) {
     83c:	4f69      	ldr	r7, [pc, #420]	; (9e4 <read_boardvalues+0x4e4>)
     83e:	783b      	ldrb	r3, [r7, #0]
     840:	2b00      	cmp	r3, #0
     842:	f040 80c2 	bne.w	9ca <read_boardvalues+0x4ca>
     846:	782a      	ldrb	r2, [r5, #0]
     848:	2a00      	cmp	r2, #0
     84a:	f000 80be 	beq.w	9ca <read_boardvalues+0x4ca>
		/* Read the I2C device address on the card to establish type of card */
		
		counter_det = 10;
		while (counter_det--) {
			delay_ms(500);
     84e:	f8df a20c 	ldr.w	sl, [pc, #524]	; a5c <read_boardvalues+0x55c>
			
			/* Kick the watchdog time-out facility */
			wdt_feed(&WDT_0);
			
			if (!(err = I2C_check_deviceID(PB24_CARDB_I2C_SDA, PB25_CARDB_I2C_CLK, 0x60))) {
     852:	f8df 920c 	ldr.w	r9, [pc, #524]	; a60 <read_boardvalues+0x560>
     856:	f04f 080b 	mov.w	r8, #11
		while (counter_det--) {
     85a:	f1b8 0801 	subs.w	r8, r8, #1
     85e:	d151      	bne.n	904 <read_boardvalues+0x404>
			} else {
				cardB_type = CARD_NOTFITTED;
			}
		}
		
		if (err < 0) {
     860:	2c00      	cmp	r4, #0
     862:	da5e      	bge.n	922 <read_boardvalues+0x422>
			xprintf("Could not read I2C bus on CARDB for I2C_check_deviceID() [%i]\r\n", err);
     864:	4621      	mov	r1, r4
     866:	4860      	ldr	r0, [pc, #384]	; (9e8 <read_boardvalues+0x4e8>)
     868:	4b60      	ldr	r3, [pc, #384]	; (9ec <read_boardvalues+0x4ec>)
     86a:	4798      	blx	r3
     86c:	e059      	b.n	922 <read_boardvalues+0x422>
			xprintf("CARDA is a MAXI IO\r\n");
     86e:	4860      	ldr	r0, [pc, #384]	; (9f0 <read_boardvalues+0x4f0>)
     870:	e7e3      	b.n	83a <read_boardvalues+0x33a>
			if ((err = I2C_configEXPANDER(PC27_CARDA_I2C_SDA,  PC28_CARDA_I2C_CLK) < 0)) {
     872:	215c      	movs	r1, #92	; 0x5c
     874:	205b      	movs	r0, #91	; 0x5b
     876:	4b5f      	ldr	r3, [pc, #380]	; (9f4 <read_boardvalues+0x4f4>)
     878:	4798      	blx	r3
     87a:	2800      	cmp	r0, #0
     87c:	ea4f 74d0 	mov.w	r4, r0, lsr #31
     880:	da02      	bge.n	888 <read_boardvalues+0x388>
				xprintf("Could NOT write to the Mini-IO Expander on CARDA:I2C [%i]\r\n", err);
     882:	2101      	movs	r1, #1
     884:	485c      	ldr	r0, [pc, #368]	; (9f8 <read_boardvalues+0x4f8>)
     886:	47b8      	blx	r7
			xprintf("CARDA is a MINI IO\r\n");
     888:	485c      	ldr	r0, [pc, #368]	; (9fc <read_boardvalues+0x4fc>)
     88a:	e7d6      	b.n	83a <read_boardvalues+0x33a>
			xprintf("CARDA is a VIBRAPOINT\r\n");
     88c:	485c      	ldr	r0, [pc, #368]	; (a00 <read_boardvalues+0x500>)
     88e:	e7d4      	b.n	83a <read_boardvalues+0x33a>
			if ((err = I2C_setGAIN(PC27_CARDA_I2C_SDA,  PC28_CARDA_I2C_CLK, ((CONFIG *)&settings_buffer)->gain_cardA) < 0)) {
     890:	4b5c      	ldr	r3, [pc, #368]	; (a04 <read_boardvalues+0x504>)
     892:	4f56      	ldr	r7, [pc, #344]	; (9ec <read_boardvalues+0x4ec>)
     894:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
     898:	4b5b      	ldr	r3, [pc, #364]	; (a08 <read_boardvalues+0x508>)
     89a:	215c      	movs	r1, #92	; 0x5c
     89c:	205b      	movs	r0, #91	; 0x5b
     89e:	4798      	blx	r3
     8a0:	2800      	cmp	r0, #0
     8a2:	ea4f 74d0 	mov.w	r4, r0, lsr #31
     8a6:	da02      	bge.n	8ae <read_boardvalues+0x3ae>
				xprintf("Could NOT write to the DAC Gain controller on CARDA:I2C [%i]\r\n", err);
     8a8:	2101      	movs	r1, #1
     8aa:	4858      	ldr	r0, [pc, #352]	; (a0c <read_boardvalues+0x50c>)
     8ac:	47b8      	blx	r7
			xprintf("CARDA is a VIBRATEK\r\n");
     8ae:	4858      	ldr	r0, [pc, #352]	; (a10 <read_boardvalues+0x510>)
     8b0:	e7c3      	b.n	83a <read_boardvalues+0x33a>
			writeKSZreg(SPI_KSZ8794_PORT3CONTROL2, 0x06);
     8b2:	2106      	movs	r1, #6
     8b4:	2032      	movs	r0, #50	; 0x32
     8b6:	4b57      	ldr	r3, [pc, #348]	; (a14 <read_boardvalues+0x514>)
     8b8:	4f4c      	ldr	r7, [pc, #304]	; (9ec <read_boardvalues+0x4ec>)
     8ba:	4798      	blx	r3
			delay_us(50);
     8bc:	2032      	movs	r0, #50	; 0x32
     8be:	4b56      	ldr	r3, [pc, #344]	; (a18 <read_boardvalues+0x518>)
     8c0:	4798      	blx	r3
			if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL2, 0x06))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL2] not correct\r\n"); }
     8c2:	2106      	movs	r1, #6
     8c4:	2032      	movs	r0, #50	; 0x32
     8c6:	4b55      	ldr	r3, [pc, #340]	; (a1c <read_boardvalues+0x51c>)
     8c8:	4798      	blx	r3
     8ca:	b908      	cbnz	r0, 8d0 <read_boardvalues+0x3d0>
     8cc:	4854      	ldr	r0, [pc, #336]	; (a20 <read_boardvalues+0x520>)
     8ce:	47b8      	blx	r7
			xprintf("CARDA is a Power & Ethernet Daughter-Card\r\n");
     8d0:	4854      	ldr	r0, [pc, #336]	; (a24 <read_boardvalues+0x524>)
     8d2:	e7b2      	b.n	83a <read_boardvalues+0x33a>
	} else if (!cardA_present) {
     8d4:	7837      	ldrb	r7, [r6, #0]
     8d6:	2f00      	cmp	r7, #0
     8d8:	d1b0      	bne.n	83c <read_boardvalues+0x33c>
		cardA_type = CARD_NOTFITTED;
     8da:	4a53      	ldr	r2, [pc, #332]	; (a28 <read_boardvalues+0x528>)
     8dc:	7017      	strb	r7, [r2, #0]
		if (cardA_old) {
     8de:	2b00      	cmp	r3, #0
     8e0:	d0ac      	beq.n	83c <read_boardvalues+0x33c>
			writeKSZreg(SPI_KSZ8794_PORT3CONTROL2, 0x00);
     8e2:	4639      	mov	r1, r7
     8e4:	2032      	movs	r0, #50	; 0x32
     8e6:	4b4b      	ldr	r3, [pc, #300]	; (a14 <read_boardvalues+0x514>)
     8e8:	4798      	blx	r3
			delay_us(50);
     8ea:	2032      	movs	r0, #50	; 0x32
     8ec:	4b4a      	ldr	r3, [pc, #296]	; (a18 <read_boardvalues+0x518>)
     8ee:	4798      	blx	r3
			if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL2, 0x00))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL2] not correct\r\n"); }
     8f0:	4639      	mov	r1, r7
     8f2:	2032      	movs	r0, #50	; 0x32
     8f4:	4b49      	ldr	r3, [pc, #292]	; (a1c <read_boardvalues+0x51c>)
     8f6:	4f3d      	ldr	r7, [pc, #244]	; (9ec <read_boardvalues+0x4ec>)
     8f8:	4798      	blx	r3
     8fa:	b908      	cbnz	r0, 900 <read_boardvalues+0x400>
     8fc:	4848      	ldr	r0, [pc, #288]	; (a20 <read_boardvalues+0x520>)
     8fe:	47b8      	blx	r7
			xprintf("CARDA has been REMOVED\r\n");
     900:	484a      	ldr	r0, [pc, #296]	; (a2c <read_boardvalues+0x52c>)
     902:	e79a      	b.n	83a <read_boardvalues+0x33a>
			delay_ms(500);
     904:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     908:	47d0      	blx	sl
			wdt_feed(&WDT_0);
     90a:	4b49      	ldr	r3, [pc, #292]	; (a30 <read_boardvalues+0x530>)
     90c:	f8df b124 	ldr.w	fp, [pc, #292]	; a34 <read_boardvalues+0x534>
     910:	4798      	blx	r3
			if (!(err = I2C_check_deviceID(PB24_CARDB_I2C_SDA, PB25_CARDB_I2C_CLK, 0x60))) {
     912:	2260      	movs	r2, #96	; 0x60
     914:	2139      	movs	r1, #57	; 0x39
     916:	2038      	movs	r0, #56	; 0x38
     918:	47c8      	blx	r9
     91a:	b960      	cbnz	r0, 936 <read_boardvalues+0x436>
				cardB_type = CARD_VIBRATEK;
     91c:	2201      	movs	r2, #1
				cardB_type = CARD_MINI_IO;
     91e:	f88b 2000 	strb.w	r2, [fp]
		}
		
		/* Actions to be taken for each different card type */
		switch (cardB_type) {
     922:	4b44      	ldr	r3, [pc, #272]	; (a34 <read_boardvalues+0x534>)
     924:	4c31      	ldr	r4, [pc, #196]	; (9ec <read_boardvalues+0x4ec>)
     926:	781b      	ldrb	r3, [r3, #0]
     928:	3b01      	subs	r3, #1
     92a:	2b03      	cmp	r3, #3
     92c:	d815      	bhi.n	95a <read_boardvalues+0x45a>
     92e:	e8df f003 	tbb	[pc, r3]
     932:	303e      	.short	0x303e
     934:	3c2e      	.short	0x3c2e
			} else if ((!(err = I2C_check_deviceID(PB24_CARDB_I2C_SDA, PB25_CARDB_I2C_CLK, 0x41))) && (!(err = I2C_check_deviceID(PB24_CARDB_I2C_SDA, PB25_CARDB_I2C_CLK, 0x68)))) {
     936:	2241      	movs	r2, #65	; 0x41
     938:	2139      	movs	r1, #57	; 0x39
     93a:	2038      	movs	r0, #56	; 0x38
     93c:	47c8      	blx	r9
     93e:	4604      	mov	r4, r0
     940:	b938      	cbnz	r0, 952 <read_boardvalues+0x452>
     942:	2268      	movs	r2, #104	; 0x68
     944:	2139      	movs	r1, #57	; 0x39
     946:	2038      	movs	r0, #56	; 0x38
     948:	47c8      	blx	r9
     94a:	4604      	mov	r4, r0
     94c:	b908      	cbnz	r0, 952 <read_boardvalues+0x452>
				cardB_type = CARD_MINI_IO;
     94e:	2202      	movs	r2, #2
     950:	e7e5      	b.n	91e <read_boardvalues+0x41e>
				cardB_type = CARD_NOTFITTED;
     952:	2200      	movs	r2, #0
     954:	f88b 2000 	strb.w	r2, [fp]
     958:	e77f      	b.n	85a <read_boardvalues+0x35a>
			case CARD_NOTFITTED:
			default:
			xprintf("CARDB inserted but not identified\r\n");
     95a:	4837      	ldr	r0, [pc, #220]	; (a38 <read_boardvalues+0x538>)
			break;
			
			case CARD_MAXI_IO:
			xprintf("CARDB is a MAXI IO\r\n");
     95c:	47a0      	blx	r4
			xprintf("CARDB has been REMOVED\r\n");
		}
	}

	/* Update the old live states so that next time round, we can detect any changes since this time */
	cardA_old = cardA_present;
     95e:	9a09      	ldr	r2, [sp, #36]	; 0x24
     960:	7833      	ldrb	r3, [r6, #0]
     962:	7013      	strb	r3, [r2, #0]
	cardB_old = cardB_present;
     964:	782b      	ldrb	r3, [r5, #0]
     966:	703b      	strb	r3, [r7, #0]
	old_tamper = tamper;
     968:	9b02      	ldr	r3, [sp, #8]
     96a:	9a06      	ldr	r2, [sp, #24]
     96c:	781b      	ldrb	r3, [r3, #0]
     96e:	7013      	strb	r3, [r2, #0]
	old_link_port1 = link_port1;
     970:	9b03      	ldr	r3, [sp, #12]
     972:	9a07      	ldr	r2, [sp, #28]
     974:	781b      	ldrb	r3, [r3, #0]
     976:	7013      	strb	r3, [r2, #0]
	old_link_port2 = link_port2;
     978:	9b04      	ldr	r3, [sp, #16]
     97a:	9a08      	ldr	r2, [sp, #32]
     97c:	781b      	ldrb	r3, [r3, #0]
     97e:	7013      	strb	r3, [r2, #0]
	old_link_port3 = link_port3;
     980:	9b05      	ldr	r3, [sp, #20]
     982:	781a      	ldrb	r2, [r3, #0]
     984:	4b2d      	ldr	r3, [pc, #180]	; (a3c <read_boardvalues+0x53c>)
     986:	701a      	strb	r2, [r3, #0]
     988:	b00b      	add	sp, #44	; 0x2c
     98a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xprintf("CARDB is a MAXI IO\r\n");
     98e:	482c      	ldr	r0, [pc, #176]	; (a40 <read_boardvalues+0x540>)
     990:	e7e4      	b.n	95c <read_boardvalues+0x45c>
			if ((err = I2C_configEXPANDER(PB24_CARDB_I2C_SDA,  PB25_CARDB_I2C_CLK) < 0)) {
     992:	2139      	movs	r1, #57	; 0x39
     994:	2038      	movs	r0, #56	; 0x38
     996:	4b17      	ldr	r3, [pc, #92]	; (9f4 <read_boardvalues+0x4f4>)
     998:	4798      	blx	r3
     99a:	2800      	cmp	r0, #0
     99c:	da03      	bge.n	9a6 <read_boardvalues+0x4a6>
				xprintf("Could NOT write to the Mini-IO Expander on CARDB:I2C [%i]\r\n", err);
     99e:	2101      	movs	r1, #1
     9a0:	4828      	ldr	r0, [pc, #160]	; (a44 <read_boardvalues+0x544>)
     9a2:	4b12      	ldr	r3, [pc, #72]	; (9ec <read_boardvalues+0x4ec>)
     9a4:	4798      	blx	r3
			xprintf("CARDB is a MINI IO\r\n");
     9a6:	4828      	ldr	r0, [pc, #160]	; (a48 <read_boardvalues+0x548>)
     9a8:	e7d8      	b.n	95c <read_boardvalues+0x45c>
			xprintf("CARDB is a VIBRAPOINT\r\n");
     9aa:	4828      	ldr	r0, [pc, #160]	; (a4c <read_boardvalues+0x54c>)
     9ac:	e7d6      	b.n	95c <read_boardvalues+0x45c>
			if ((err = I2C_setGAIN(PB24_CARDB_I2C_SDA,  PB25_CARDB_I2C_CLK, ((CONFIG *)&settings_buffer)->gain_cardB)) < 0) {
     9ae:	4b15      	ldr	r3, [pc, #84]	; (a04 <read_boardvalues+0x504>)
     9b0:	4c0e      	ldr	r4, [pc, #56]	; (9ec <read_boardvalues+0x4ec>)
     9b2:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
     9b6:	4b14      	ldr	r3, [pc, #80]	; (a08 <read_boardvalues+0x508>)
     9b8:	2139      	movs	r1, #57	; 0x39
     9ba:	2038      	movs	r0, #56	; 0x38
     9bc:	4798      	blx	r3
     9be:	1e01      	subs	r1, r0, #0
     9c0:	da01      	bge.n	9c6 <read_boardvalues+0x4c6>
				xprintf("Could NOT write to the DAC Gain controller on CARDB:I2C [%i]\r\n", err);
     9c2:	4823      	ldr	r0, [pc, #140]	; (a50 <read_boardvalues+0x550>)
     9c4:	47a0      	blx	r4
			xprintf("CARDB is a VIBRATEK\r\n");
     9c6:	4823      	ldr	r0, [pc, #140]	; (a54 <read_boardvalues+0x554>)
     9c8:	e7c8      	b.n	95c <read_boardvalues+0x45c>
	} else if (!cardB_present) {
     9ca:	782a      	ldrb	r2, [r5, #0]
     9cc:	2a00      	cmp	r2, #0
     9ce:	d1c6      	bne.n	95e <read_boardvalues+0x45e>
		cardB_type = CARD_NOTFITTED;
     9d0:	4918      	ldr	r1, [pc, #96]	; (a34 <read_boardvalues+0x534>)
     9d2:	700a      	strb	r2, [r1, #0]
		if (cardB_old) {
     9d4:	2b00      	cmp	r3, #0
     9d6:	d0c2      	beq.n	95e <read_boardvalues+0x45e>
			xprintf("CARDB has been REMOVED\r\n");
     9d8:	481f      	ldr	r0, [pc, #124]	; (a58 <read_boardvalues+0x558>)
     9da:	4b04      	ldr	r3, [pc, #16]	; (9ec <read_boardvalues+0x4ec>)
     9dc:	4798      	blx	r3
     9de:	e7be      	b.n	95e <read_boardvalues+0x45e>
     9e0:	0000bc07 	.word	0x0000bc07
     9e4:	20007841 	.word	0x20007841
     9e8:	0000bd6d 	.word	0x0000bd6d
     9ec:	00000395 	.word	0x00000395
     9f0:	0000bc2b 	.word	0x0000bc2b
     9f4:	000048d9 	.word	0x000048d9
     9f8:	0000bc40 	.word	0x0000bc40
     9fc:	0000bc7c 	.word	0x0000bc7c
     a00:	0000bc91 	.word	0x0000bc91
     a04:	20007f14 	.word	0x20007f14
     a08:	00005311 	.word	0x00005311
     a0c:	0000bca9 	.word	0x0000bca9
     a10:	0000bce8 	.word	0x0000bce8
     a14:	0000acc1 	.word	0x0000acc1
     a18:	00001229 	.word	0x00001229
     a1c:	0000ac51 	.word	0x0000ac51
     a20:	0000bcfe 	.word	0x0000bcfe
     a24:	0000bd28 	.word	0x0000bd28
     a28:	20007c57 	.word	0x20007c57
     a2c:	0000bd54 	.word	0x0000bd54
     a30:	00000365 	.word	0x00000365
     a34:	20008540 	.word	0x20008540
     a38:	0000bdad 	.word	0x0000bdad
     a3c:	2000825c 	.word	0x2000825c
     a40:	0000bdd1 	.word	0x0000bdd1
     a44:	0000bde6 	.word	0x0000bde6
     a48:	0000be22 	.word	0x0000be22
     a4c:	0000be37 	.word	0x0000be37
     a50:	0000be4f 	.word	0x0000be4f
     a54:	0000be8e 	.word	0x0000be8e
     a58:	0000bea4 	.word	0x0000bea4
     a5c:	0000124d 	.word	0x0000124d
     a60:	000060dd 	.word	0x000060dd

00000a64 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     a64:	4770      	bx	lr
	...

00000a68 <Reset_Handler>:
{
     a68:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     a6a:	4a0f      	ldr	r2, [pc, #60]	; (aa8 <Reset_Handler+0x40>)
     a6c:	4b0f      	ldr	r3, [pc, #60]	; (aac <Reset_Handler+0x44>)
     a6e:	429a      	cmp	r2, r3
     a70:	d10e      	bne.n	a90 <Reset_Handler+0x28>
{
     a72:	4b0f      	ldr	r3, [pc, #60]	; (ab0 <Reset_Handler+0x48>)
        for (pDest = &_szero; pDest < &_ezero;) {
     a74:	4a0f      	ldr	r2, [pc, #60]	; (ab4 <Reset_Handler+0x4c>)
                *pDest++ = 0;
     a76:	2100      	movs	r1, #0
        for (pDest = &_szero; pDest < &_ezero;) {
     a78:	4293      	cmp	r3, r2
     a7a:	d312      	bcc.n	aa2 <Reset_Handler+0x3a>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     a7c:	4b0e      	ldr	r3, [pc, #56]	; (ab8 <Reset_Handler+0x50>)
     a7e:	4a0f      	ldr	r2, [pc, #60]	; (abc <Reset_Handler+0x54>)
     a80:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     a84:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     a86:	4b0e      	ldr	r3, [pc, #56]	; (ac0 <Reset_Handler+0x58>)
     a88:	4798      	blx	r3
        main();
     a8a:	4b0e      	ldr	r3, [pc, #56]	; (ac4 <Reset_Handler+0x5c>)
     a8c:	4798      	blx	r3
     a8e:	e7fe      	b.n	a8e <Reset_Handler+0x26>
                for (; pDest < &_erelocate;) {
     a90:	490d      	ldr	r1, [pc, #52]	; (ac8 <Reset_Handler+0x60>)
     a92:	3a04      	subs	r2, #4
     a94:	428b      	cmp	r3, r1
     a96:	d2ec      	bcs.n	a72 <Reset_Handler+0xa>
                        *pDest++ = *pSrc++;
     a98:	f852 0f04 	ldr.w	r0, [r2, #4]!
     a9c:	f843 0b04 	str.w	r0, [r3], #4
     aa0:	e7f8      	b.n	a94 <Reset_Handler+0x2c>
                *pDest++ = 0;
     aa2:	f843 1b04 	str.w	r1, [r3], #4
     aa6:	e7e7      	b.n	a78 <Reset_Handler+0x10>
     aa8:	0000e824 	.word	0x0000e824
     aac:	20000000 	.word	0x20000000
     ab0:	200002c0 	.word	0x200002c0
     ab4:	200090b8 	.word	0x200090b8
     ab8:	00000000 	.word	0x00000000
     abc:	e000ed00 	.word	0xe000ed00
     ac0:	0000ad11 	.word	0x0000ad11
     ac4:	00008445 	.word	0x00008445
     ac8:	200002b0 	.word	0x200002b0

00000acc <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
     acc:	b530      	push	{r4, r5, lr}
	uint8_t port = GPIO_PORT(gpio);
	uint8_t pin  = GPIO_PIN(gpio);

	if (function == GPIO_PIN_FUNCTION_OFF) {
     ace:	1c4a      	adds	r2, r1, #1
	uint8_t pin  = GPIO_PIN(gpio);
     ad0:	b2c4      	uxtb	r4, r0
     ad2:	f3c0 1247 	ubfx	r2, r0, #5, #8
     ad6:	4816      	ldr	r0, [pc, #88]	; (b30 <_gpio_set_pin_function+0x64>)
     ad8:	f004 031f 	and.w	r3, r4, #31
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     adc:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
	if (function == GPIO_PIN_FUNCTION_OFF) {
     ae0:	d107      	bne.n	af2 <_gpio_set_pin_function+0x26>
     ae2:	4418      	add	r0, r3
     ae4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
	tmp &= ~PORT_PINCFG_PMUXEN;
     ae8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     aec:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
     af0:	bd30      	pop	{r4, r5, pc}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     af2:	18c5      	adds	r5, r0, r3
     af4:	085b      	lsrs	r3, r3, #1
     af6:	f895 2040 	ldrb.w	r2, [r5, #64]	; 0x40
	tmp &= ~PORT_PINCFG_PMUXEN;
     afa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     afe:	4418      	add	r0, r3
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b00:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b04:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b08:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);

	} else {
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);

		if (pin & 1) {
     b0c:	f014 0f01 	tst.w	r4, #1
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     b10:	bf19      	ittee	ne
     b12:	f003 030f 	andne.w	r3, r3, #15
	tmp |= PORT_PMUX_PMUXO(data);
     b16:	ea43 1101 	orrne.w	r1, r3, r1, lsl #4
	tmp |= PORT_PMUX_PMUXE(data);
     b1a:	f001 010f 	andeq.w	r1, r1, #15
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     b1e:	f003 03f0 	andeq.w	r3, r3, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXO(data);
     b22:	bf14      	ite	ne
     b24:	b2c9      	uxtbne	r1, r1
	tmp |= PORT_PMUX_PMUXE(data);
     b26:	4319      	orreq	r1, r3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b28:	f880 1030 	strb.w	r1, [r0, #48]	; 0x30
     b2c:	bd30      	pop	{r4, r5, pc}
     b2e:	bf00      	nop
     b30:	41008000 	.word	0x41008000

00000b34 <ADC_0_PORT_init>:
struct wdt_descriptor WDT_0;

struct mac_async_descriptor ETHERNET_MAC_0;

void ADC_0_PORT_init(void)
{
     b34:	b570      	push	{r4, r5, r6, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     b36:	4c13      	ldr	r4, [pc, #76]	; (b84 <ADC_0_PORT_init+0x50>)
	_gpio_set_pin_function(pin, function);
     b38:	4d13      	ldr	r5, [pc, #76]	; (b88 <ADC_0_PORT_init+0x54>)
     b3a:	4914      	ldr	r1, [pc, #80]	; (b8c <ADC_0_PORT_init+0x58>)
     b3c:	2304      	movs	r3, #4
     b3e:	6063      	str	r3, [r4, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b40:	f04f 4640 	mov.w	r6, #3221225472	; 0xc0000000
     b44:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     b48:	62a3      	str	r3, [r4, #40]	; 0x28
     b4a:	2002      	movs	r0, #2
     b4c:	62a6      	str	r6, [r4, #40]	; 0x28
     b4e:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     b50:	2308      	movs	r3, #8
     b52:	6063      	str	r3, [r4, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b54:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     b58:	62a3      	str	r3, [r4, #40]	; 0x28
     b5a:	490d      	ldr	r1, [pc, #52]	; (b90 <ADC_0_PORT_init+0x5c>)
     b5c:	62a6      	str	r6, [r4, #40]	; 0x28
     b5e:	2003      	movs	r0, #3
     b60:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     b62:	f44f 7380 	mov.w	r3, #256	; 0x100
     b66:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b6a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     b6e:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
     b72:	f8c4 60a8 	str.w	r6, [r4, #168]	; 0xa8
     b76:	462b      	mov	r3, r5
     b78:	4906      	ldr	r1, [pc, #24]	; (b94 <ADC_0_PORT_init+0x60>)
     b7a:	2028      	movs	r0, #40	; 0x28
	gpio_set_pin_function(PA03, PINMUX_PA03B_ADC0_AIN1);

	// Disable digital pin circuitry
	gpio_set_pin_direction(PB08, GPIO_DIRECTION_OFF);
	gpio_set_pin_function(PB08, PINMUX_PB08B_ADC0_AIN2);
}
     b7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     b80:	4718      	bx	r3
     b82:	bf00      	nop
     b84:	41008000 	.word	0x41008000
     b88:	00000acd 	.word	0x00000acd
     b8c:	00020001 	.word	0x00020001
     b90:	00030001 	.word	0x00030001
     b94:	00280001 	.word	0x00280001

00000b98 <ADC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
     b98:	4a04      	ldr	r2, [pc, #16]	; (bac <ADC_0_CLOCK_init+0x14>)
     b9a:	6a13      	ldr	r3, [r2, #32]
     b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     ba0:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     ba2:	4b03      	ldr	r3, [pc, #12]	; (bb0 <ADC_0_CLOCK_init+0x18>)
     ba4:	2240      	movs	r2, #64	; 0x40
     ba6:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
     baa:	4770      	bx	lr
     bac:	40000800 	.word	0x40000800
     bb0:	40001c00 	.word	0x40001c00

00000bb4 <ADC_0_init>:
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void ADC_0_init(void)
{
     bb4:	b510      	push	{r4, lr}
	ADC_0_CLOCK_init();
     bb6:	4b05      	ldr	r3, [pc, #20]	; (bcc <ADC_0_init+0x18>)
     bb8:	4798      	blx	r3
	ADC_0_PORT_init();
     bba:	4b05      	ldr	r3, [pc, #20]	; (bd0 <ADC_0_init+0x1c>)
     bbc:	4798      	blx	r3
	adc_sync_init(&ADC_0, ADC0, (void *)NULL);
     bbe:	2200      	movs	r2, #0
     bc0:	4904      	ldr	r1, [pc, #16]	; (bd4 <ADC_0_init+0x20>)
     bc2:	4805      	ldr	r0, [pc, #20]	; (bd8 <ADC_0_init+0x24>)
     bc4:	4b05      	ldr	r3, [pc, #20]	; (bdc <ADC_0_init+0x28>)
}
     bc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	adc_sync_init(&ADC_0, ADC0, (void *)NULL);
     bca:	4718      	bx	r3
     bcc:	00000b99 	.word	0x00000b99
     bd0:	00000b35 	.word	0x00000b35
     bd4:	43001c00 	.word	0x43001c00
     bd8:	2000746c 	.word	0x2000746c
     bdc:	0000103d 	.word	0x0000103d

00000be0 <CRYPTOGRAPHY_0_init>:
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_AES;
     be0:	4a04      	ldr	r2, [pc, #16]	; (bf4 <CRYPTOGRAPHY_0_init+0x14>)
 * Enables AES peripheral, clocks and initializes AES driver
 */
void CRYPTOGRAPHY_0_init(void)
{
	hri_mclk_set_APBCMASK_AES_bit(MCLK);
	aes_sync_init(&CRYPTOGRAPHY_0, AES);
     be2:	4905      	ldr	r1, [pc, #20]	; (bf8 <CRYPTOGRAPHY_0_init+0x18>)
     be4:	69d3      	ldr	r3, [r2, #28]
     be6:	4805      	ldr	r0, [pc, #20]	; (bfc <CRYPTOGRAPHY_0_init+0x1c>)
     be8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     bec:	61d3      	str	r3, [r2, #28]
     bee:	4b04      	ldr	r3, [pc, #16]	; (c00 <CRYPTOGRAPHY_0_init+0x20>)
     bf0:	4718      	bx	r3
     bf2:	bf00      	nop
     bf4:	40000800 	.word	0x40000800
     bf8:	42002400 	.word	0x42002400
     bfc:	20007424 	.word	0x20007424
     c00:	00001141 	.word	0x00001141

00000c04 <CRC_0_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     c04:	4a04      	ldr	r2, [pc, #16]	; (c18 <CRC_0_init+0x14>)
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_0_init(void)
{
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
	crc_sync_init(&CRC_0, DSU);
     c06:	4905      	ldr	r1, [pc, #20]	; (c1c <CRC_0_init+0x18>)
     c08:	6993      	ldr	r3, [r2, #24]
     c0a:	4805      	ldr	r0, [pc, #20]	; (c20 <CRC_0_init+0x1c>)
     c0c:	f043 0302 	orr.w	r3, r3, #2
     c10:	6193      	str	r3, [r2, #24]
     c12:	4b04      	ldr	r3, [pc, #16]	; (c24 <CRC_0_init+0x20>)
     c14:	4718      	bx	r3
     c16:	bf00      	nop
     c18:	40000800 	.word	0x40000800
     c1c:	41002000 	.word	0x41002000
     c20:	20007460 	.word	0x20007460
     c24:	000011e9 	.word	0x000011e9

00000c28 <HASH_ALGORITHM_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_ICM;
     c28:	4b04      	ldr	r3, [pc, #16]	; (c3c <HASH_ALGORITHM_0_CLOCK_init+0x14>)
     c2a:	691a      	ldr	r2, [r3, #16]
     c2c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
     c30:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_ICM;
     c32:	69da      	ldr	r2, [r3, #28]
     c34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
     c38:	61da      	str	r2, [r3, #28]
     c3a:	4770      	bx	lr
     c3c:	40000800 	.word	0x40000800

00000c40 <HASH_ALGORITHM_0_init>:
 * \brief SHA initialization function
 *
 * Enables SHA peripheral, clocks and initializes SHA driver
 */
void HASH_ALGORITHM_0_init(void)
{
     c40:	b510      	push	{r4, lr}
	HASH_ALGORITHM_0_CLOCK_init();
     c42:	4b04      	ldr	r3, [pc, #16]	; (c54 <HASH_ALGORITHM_0_init+0x14>)
     c44:	4798      	blx	r3
	sha_sync_init(&HASH_ALGORITHM_0, ICM);
     c46:	4904      	ldr	r1, [pc, #16]	; (c58 <HASH_ALGORITHM_0_init+0x18>)
     c48:	4804      	ldr	r0, [pc, #16]	; (c5c <HASH_ALGORITHM_0_init+0x1c>)
     c4a:	4b05      	ldr	r3, [pc, #20]	; (c60 <HASH_ALGORITHM_0_init+0x20>)
}
     c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	sha_sync_init(&HASH_ALGORITHM_0, ICM);
     c50:	4718      	bx	r3
     c52:	bf00      	nop
     c54:	00000c29 	.word	0x00000c29
     c58:	42002c00 	.word	0x42002c00
     c5c:	20007464 	.word	0x20007464
     c60:	00001695 	.word	0x00001695

00000c64 <FLASH_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
     c64:	4a02      	ldr	r2, [pc, #8]	; (c70 <FLASH_0_CLOCK_init+0xc>)
     c66:	6913      	ldr	r3, [r2, #16]
     c68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     c6c:	6113      	str	r3, [r2, #16]
     c6e:	4770      	bx	lr
     c70:	40000800 	.word	0x40000800

00000c74 <FLASH_0_init>:

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}

void FLASH_0_init(void)
{
     c74:	b510      	push	{r4, lr}
	FLASH_0_CLOCK_init();
     c76:	4b04      	ldr	r3, [pc, #16]	; (c88 <FLASH_0_init+0x14>)
     c78:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
     c7a:	4904      	ldr	r1, [pc, #16]	; (c8c <FLASH_0_init+0x18>)
     c7c:	4804      	ldr	r0, [pc, #16]	; (c90 <FLASH_0_init+0x1c>)
     c7e:	4b05      	ldr	r3, [pc, #20]	; (c94 <FLASH_0_init+0x20>)
}
     c80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	flash_init(&FLASH_0, NVMCTRL);
     c84:	4718      	bx	r3
     c86:	bf00      	nop
     c88:	00000c65 	.word	0x00000c65
     c8c:	41004000 	.word	0x41004000
     c90:	20007408 	.word	0x20007408
     c94:	000012b9 	.word	0x000012b9

00000c98 <USART_0_CLOCK_init>:
     c98:	4b05      	ldr	r3, [pc, #20]	; (cb0 <USART_0_CLOCK_init+0x18>)
     c9a:	2240      	movs	r2, #64	; 0x40
     c9c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     ca0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     ca4:	4a03      	ldr	r2, [pc, #12]	; (cb4 <USART_0_CLOCK_init+0x1c>)
     ca6:	6953      	ldr	r3, [r2, #20]
     ca8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     cac:	6153      	str	r3, [r2, #20]
     cae:	4770      	bx	lr
     cb0:	40001c00 	.word	0x40001c00
     cb4:	40000800 	.word	0x40000800

00000cb8 <USART_0_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void USART_0_PORT_init()
{
     cb8:	b510      	push	{r4, lr}
     cba:	4c05      	ldr	r4, [pc, #20]	; (cd0 <USART_0_PORT_init+0x18>)
     cbc:	4905      	ldr	r1, [pc, #20]	; (cd4 <USART_0_PORT_init+0x1c>)
     cbe:	2008      	movs	r0, #8
     cc0:	47a0      	blx	r4
     cc2:	4623      	mov	r3, r4
     cc4:	4904      	ldr	r1, [pc, #16]	; (cd8 <USART_0_PORT_init+0x20>)
     cc6:	2009      	movs	r0, #9

	gpio_set_pin_function(PA08, PINMUX_PA08C_SERCOM0_PAD0);

	gpio_set_pin_function(PA09, PINMUX_PA09C_SERCOM0_PAD1);
}
     cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     ccc:	4718      	bx	r3
     cce:	bf00      	nop
     cd0:	00000acd 	.word	0x00000acd
     cd4:	00080002 	.word	0x00080002
     cd8:	00090002 	.word	0x00090002

00000cdc <USART_0_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_0_init(void)
{
     cdc:	b513      	push	{r0, r1, r4, lr}
	USART_0_CLOCK_init();
     cde:	4b07      	ldr	r3, [pc, #28]	; (cfc <USART_0_init+0x20>)
	usart_async_init(&USART_0, SERCOM0, USART_0_buffer, USART_0_BUFFER_SIZE, (void *)NULL);
     ce0:	4c07      	ldr	r4, [pc, #28]	; (d00 <USART_0_init+0x24>)
	USART_0_CLOCK_init();
     ce2:	4798      	blx	r3
	usart_async_init(&USART_0, SERCOM0, USART_0_buffer, USART_0_BUFFER_SIZE, (void *)NULL);
     ce4:	2300      	movs	r3, #0
     ce6:	9300      	str	r3, [sp, #0]
     ce8:	4a06      	ldr	r2, [pc, #24]	; (d04 <USART_0_init+0x28>)
     cea:	4907      	ldr	r1, [pc, #28]	; (d08 <USART_0_init+0x2c>)
     cec:	4807      	ldr	r0, [pc, #28]	; (d0c <USART_0_init+0x30>)
     cee:	2310      	movs	r3, #16
     cf0:	47a0      	blx	r4
	USART_0_PORT_init();
     cf2:	4b07      	ldr	r3, [pc, #28]	; (d10 <USART_0_init+0x34>)
}
     cf4:	b002      	add	sp, #8
     cf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	USART_0_PORT_init();
     cfa:	4718      	bx	r3
     cfc:	00000c99 	.word	0x00000c99
     d00:	000019dd 	.word	0x000019dd
     d04:	2000030e 	.word	0x2000030e
     d08:	40003000 	.word	0x40003000
     d0c:	20007488 	.word	0x20007488
     d10:	00000cb9 	.word	0x00000cb9

00000d14 <USART_1_CLOCK_init>:
     d14:	4b05      	ldr	r3, [pc, #20]	; (d2c <USART_1_CLOCK_init+0x18>)
     d16:	2240      	movs	r2, #64	; 0x40
     d18:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     d1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     d20:	4a03      	ldr	r2, [pc, #12]	; (d30 <USART_1_CLOCK_init+0x1c>)
     d22:	6a13      	ldr	r3, [r2, #32]
     d24:	f043 0302 	orr.w	r3, r3, #2
     d28:	6213      	str	r3, [r2, #32]
     d2a:	4770      	bx	lr
     d2c:	40001c00 	.word	0x40001c00
     d30:	40000800 	.word	0x40000800

00000d34 <USART_1_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void USART_1_PORT_init()
{
     d34:	b510      	push	{r4, lr}
     d36:	4c05      	ldr	r4, [pc, #20]	; (d4c <USART_1_PORT_init+0x18>)
     d38:	4905      	ldr	r1, [pc, #20]	; (d50 <USART_1_PORT_init+0x1c>)
     d3a:	2030      	movs	r0, #48	; 0x30
     d3c:	47a0      	blx	r4
     d3e:	4623      	mov	r3, r4
     d40:	4904      	ldr	r1, [pc, #16]	; (d54 <USART_1_PORT_init+0x20>)
     d42:	2031      	movs	r0, #49	; 0x31

	gpio_set_pin_function(PB16, PINMUX_PB16C_SERCOM5_PAD0);

	gpio_set_pin_function(PB17, PINMUX_PB17C_SERCOM5_PAD1);
}
     d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     d48:	4718      	bx	r3
     d4a:	bf00      	nop
     d4c:	00000acd 	.word	0x00000acd
     d50:	00300002 	.word	0x00300002
     d54:	00310002 	.word	0x00310002

00000d58 <USART_1_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_1_init(void)
{
     d58:	b513      	push	{r0, r1, r4, lr}
	USART_1_CLOCK_init();
     d5a:	4b07      	ldr	r3, [pc, #28]	; (d78 <USART_1_init+0x20>)
	usart_async_init(&USART_1, SERCOM5, USART_1_buffer, USART_1_BUFFER_SIZE, (void *)NULL);
     d5c:	4c07      	ldr	r4, [pc, #28]	; (d7c <USART_1_init+0x24>)
	USART_1_CLOCK_init();
     d5e:	4798      	blx	r3
	usart_async_init(&USART_1, SERCOM5, USART_1_buffer, USART_1_BUFFER_SIZE, (void *)NULL);
     d60:	2300      	movs	r3, #0
     d62:	9300      	str	r3, [sp, #0]
     d64:	4a06      	ldr	r2, [pc, #24]	; (d80 <USART_1_init+0x28>)
     d66:	4907      	ldr	r1, [pc, #28]	; (d84 <USART_1_init+0x2c>)
     d68:	4807      	ldr	r0, [pc, #28]	; (d88 <USART_1_init+0x30>)
     d6a:	2310      	movs	r3, #16
     d6c:	47a0      	blx	r4
	USART_1_PORT_init();
     d6e:	4b07      	ldr	r3, [pc, #28]	; (d8c <USART_1_init+0x34>)
}
     d70:	b002      	add	sp, #8
     d72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	USART_1_PORT_init();
     d76:	4718      	bx	r3
     d78:	00000d15 	.word	0x00000d15
     d7c:	000019dd 	.word	0x000019dd
     d80:	2000031e 	.word	0x2000031e
     d84:	43000400 	.word	0x43000400
     d88:	200074d8 	.word	0x200074d8
     d8c:	00000d35 	.word	0x00000d35

00000d90 <delay_driver_init>:

void delay_driver_init(void)
{
	delay_init(SysTick);
     d90:	4801      	ldr	r0, [pc, #4]	; (d98 <delay_driver_init+0x8>)
     d92:	4b02      	ldr	r3, [pc, #8]	; (d9c <delay_driver_init+0xc>)
     d94:	4718      	bx	r3
     d96:	bf00      	nop
     d98:	e000e010 	.word	0xe000e010
     d9c:	00001219 	.word	0x00001219

00000da0 <USB_0_PORT_init>:

	timer_init(&TIMER_0, TC0, _tc_get_timer());
}

void USB_0_PORT_init(void)
{
     da0:	b570      	push	{r4, r5, r6, lr}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     da2:	4c13      	ldr	r4, [pc, #76]	; (df0 <USB_0_PORT_init+0x50>)
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     da4:	4a13      	ldr	r2, [pc, #76]	; (df4 <USB_0_PORT_init+0x54>)
     da6:	4d14      	ldr	r5, [pc, #80]	; (df8 <USB_0_PORT_init+0x58>)
     da8:	4914      	ldr	r1, [pc, #80]	; (dfc <USB_0_PORT_init+0x5c>)
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     daa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     dae:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     db2:	60a3      	str	r3, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     db4:	62a6      	str	r6, [r4, #40]	; 0x28
     db6:	62a2      	str	r2, [r4, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     db8:	6163      	str	r3, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     dba:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
     dbe:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
     dc2:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     dc6:	2018      	movs	r0, #24
     dc8:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     dca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     dce:	4a0c      	ldr	r2, [pc, #48]	; (e00 <USB_0_PORT_init+0x60>)
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     dd0:	60a3      	str	r3, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     dd2:	62a6      	str	r6, [r4, #40]	; 0x28
     dd4:	62a2      	str	r2, [r4, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     dd6:	6163      	str	r3, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     dd8:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
     ddc:	4909      	ldr	r1, [pc, #36]	; (e04 <USB_0_PORT_init+0x64>)
     dde:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
     de2:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
     de6:	2019      	movs	r0, #25
     de8:	462b      	mov	r3, r5
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
     dea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     dee:	4718      	bx	r3
     df0:	41008000 	.word	0x41008000
     df4:	c0000100 	.word	0xc0000100
     df8:	00000acd 	.word	0x00000acd
     dfc:	00180007 	.word	0x00180007
     e00:	c0000200 	.word	0xc0000200
     e04:	00190007 	.word	0x00190007

00000e08 <USB_0_CLOCK_init>:
     e08:	4b07      	ldr	r3, [pc, #28]	; (e28 <USB_0_CLOCK_init+0x20>)
     e0a:	2240      	movs	r2, #64	; 0x40
     e0c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     e10:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
     e14:	691a      	ldr	r2, [r3, #16]
     e16:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     e1a:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     e1c:	699a      	ldr	r2, [r3, #24]
     e1e:	f042 0201 	orr.w	r2, r2, #1
     e22:	619a      	str	r2, [r3, #24]
     e24:	4770      	bx	lr
     e26:	bf00      	nop
     e28:	40001c00 	.word	0x40001c00

00000e2c <USB_0_init>:
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}

void USB_0_init(void)
{
     e2c:	b510      	push	{r4, lr}
	USB_0_CLOCK_init();
     e2e:	4b04      	ldr	r3, [pc, #16]	; (e40 <USB_0_init+0x14>)
     e30:	4798      	blx	r3
	usb_d_init();
     e32:	4b04      	ldr	r3, [pc, #16]	; (e44 <USB_0_init+0x18>)
     e34:	4798      	blx	r3
	USB_0_PORT_init();
     e36:	4b04      	ldr	r3, [pc, #16]	; (e48 <USB_0_init+0x1c>)
}
     e38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	USB_0_PORT_init();
     e3c:	4718      	bx	r3
     e3e:	bf00      	nop
     e40:	00000e09 	.word	0x00000e09
     e44:	00001d3d 	.word	0x00001d3d
     e48:	00000da1 	.word	0x00000da1

00000e4c <WDT_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     e4c:	4a02      	ldr	r2, [pc, #8]	; (e58 <WDT_0_CLOCK_init+0xc>)
     e4e:	6953      	ldr	r3, [r2, #20]
     e50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     e54:	6153      	str	r3, [r2, #20]
     e56:	4770      	bx	lr
     e58:	40000800 	.word	0x40000800

00000e5c <WDT_0_init>:
{
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
}

void WDT_0_init(void)
{
     e5c:	b510      	push	{r4, lr}
	WDT_0_CLOCK_init();
     e5e:	4b07      	ldr	r3, [pc, #28]	; (e7c <WDT_0_init+0x20>)
     e60:	4798      	blx	r3
	ASSERT(wdt && hw);
     e62:	2001      	movs	r0, #1
     e64:	4b06      	ldr	r3, [pc, #24]	; (e80 <WDT_0_init+0x24>)
     e66:	4907      	ldr	r1, [pc, #28]	; (e84 <WDT_0_init+0x28>)
     e68:	2248      	movs	r2, #72	; 0x48
     e6a:	4798      	blx	r3
	wdt->dev.hw = (void *)hw;
     e6c:	4806      	ldr	r0, [pc, #24]	; (e88 <WDT_0_init+0x2c>)
     e6e:	4b07      	ldr	r3, [pc, #28]	; (e8c <WDT_0_init+0x30>)
     e70:	6003      	str	r3, [r0, #0]
	wdt_init(&WDT_0, WDT);
}
     e72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return _wdt_init(&wdt->dev);
     e76:	4b06      	ldr	r3, [pc, #24]	; (e90 <WDT_0_init+0x34>)
     e78:	4718      	bx	r3
     e7a:	bf00      	nop
     e7c:	00000e4d 	.word	0x00000e4d
     e80:	00002035 	.word	0x00002035
     e84:	0000ba79 	.word	0x0000ba79
     e88:	20007470 	.word	0x20007470
     e8c:	40002000 	.word	0x40002000
     e90:	00004285 	.word	0x00004285

00000e94 <ETHERNET_MAC_0_PORT_init>:

void ETHERNET_MAC_0_PORT_init(void)
{
     e94:	b510      	push	{r4, lr}
     e96:	491d      	ldr	r1, [pc, #116]	; (f0c <ETHERNET_MAC_0_PORT_init+0x78>)
     e98:	4c1d      	ldr	r4, [pc, #116]	; (f10 <ETHERNET_MAC_0_PORT_init+0x7c>)
     e9a:	2055      	movs	r0, #85	; 0x55
     e9c:	47a0      	blx	r4
     e9e:	491d      	ldr	r1, [pc, #116]	; (f14 <ETHERNET_MAC_0_PORT_init+0x80>)
     ea0:	2010      	movs	r0, #16
     ea2:	47a0      	blx	r4
     ea4:	491c      	ldr	r1, [pc, #112]	; (f18 <ETHERNET_MAC_0_PORT_init+0x84>)
     ea6:	204b      	movs	r0, #75	; 0x4b
     ea8:	47a0      	blx	r4
     eaa:	491c      	ldr	r1, [pc, #112]	; (f1c <ETHERNET_MAC_0_PORT_init+0x88>)
     eac:	204c      	movs	r0, #76	; 0x4c
     eae:	47a0      	blx	r4
     eb0:	491b      	ldr	r1, [pc, #108]	; (f20 <ETHERNET_MAC_0_PORT_init+0x8c>)
     eb2:	200d      	movs	r0, #13
     eb4:	47a0      	blx	r4
     eb6:	491b      	ldr	r1, [pc, #108]	; (f24 <ETHERNET_MAC_0_PORT_init+0x90>)
     eb8:	200c      	movs	r0, #12
     eba:	47a0      	blx	r4
     ebc:	491a      	ldr	r1, [pc, #104]	; (f28 <ETHERNET_MAC_0_PORT_init+0x94>)
     ebe:	204f      	movs	r0, #79	; 0x4f
     ec0:	47a0      	blx	r4
     ec2:	491a      	ldr	r1, [pc, #104]	; (f2c <ETHERNET_MAC_0_PORT_init+0x98>)
     ec4:	204e      	movs	r0, #78	; 0x4e
     ec6:	47a0      	blx	r4
     ec8:	4919      	ldr	r1, [pc, #100]	; (f30 <ETHERNET_MAC_0_PORT_init+0x9c>)
     eca:	2052      	movs	r0, #82	; 0x52
     ecc:	47a0      	blx	r4
     ece:	4919      	ldr	r1, [pc, #100]	; (f34 <ETHERNET_MAC_0_PORT_init+0xa0>)
     ed0:	2054      	movs	r0, #84	; 0x54
     ed2:	47a0      	blx	r4
     ed4:	4918      	ldr	r1, [pc, #96]	; (f38 <ETHERNET_MAC_0_PORT_init+0xa4>)
     ed6:	200f      	movs	r0, #15
     ed8:	47a0      	blx	r4
     eda:	4918      	ldr	r1, [pc, #96]	; (f3c <ETHERNET_MAC_0_PORT_init+0xa8>)
     edc:	2012      	movs	r0, #18
     ede:	47a0      	blx	r4
     ee0:	4917      	ldr	r1, [pc, #92]	; (f40 <ETHERNET_MAC_0_PORT_init+0xac>)
     ee2:	2013      	movs	r0, #19
     ee4:	47a0      	blx	r4
     ee6:	4917      	ldr	r1, [pc, #92]	; (f44 <ETHERNET_MAC_0_PORT_init+0xb0>)
     ee8:	2050      	movs	r0, #80	; 0x50
     eea:	47a0      	blx	r4
     eec:	4916      	ldr	r1, [pc, #88]	; (f48 <ETHERNET_MAC_0_PORT_init+0xb4>)
     eee:	2051      	movs	r0, #81	; 0x51
     ef0:	47a0      	blx	r4
     ef2:	4916      	ldr	r1, [pc, #88]	; (f4c <ETHERNET_MAC_0_PORT_init+0xb8>)
     ef4:	200e      	movs	r0, #14
     ef6:	47a0      	blx	r4
     ef8:	4915      	ldr	r1, [pc, #84]	; (f50 <ETHERNET_MAC_0_PORT_init+0xbc>)
     efa:	2011      	movs	r0, #17
     efc:	47a0      	blx	r4
     efe:	4623      	mov	r3, r4
     f00:	4914      	ldr	r1, [pc, #80]	; (f54 <ETHERNET_MAC_0_PORT_init+0xc0>)
     f02:	2053      	movs	r0, #83	; 0x53
	gpio_set_pin_function(PC16, PINMUX_PC16L_GMAC_GTX2);
	gpio_set_pin_function(PC17, PINMUX_PC17L_GMAC_GTX3);
	gpio_set_pin_function(PA14, PINMUX_PA14L_GMAC_GTXCK);
	gpio_set_pin_function(PA17, PINMUX_PA17L_GMAC_GTXEN);
	gpio_set_pin_function(PC19, PINMUX_PC19L_GMAC_GTXER);
}
     f04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     f08:	4718      	bx	r3
     f0a:	bf00      	nop
     f0c:	0055000b 	.word	0x0055000b
     f10:	00000acd 	.word	0x00000acd
     f14:	0010000b 	.word	0x0010000b
     f18:	004b000b 	.word	0x004b000b
     f1c:	004c000b 	.word	0x004c000b
     f20:	000d000b 	.word	0x000d000b
     f24:	000c000b 	.word	0x000c000b
     f28:	004f000b 	.word	0x004f000b
     f2c:	004e000b 	.word	0x004e000b
     f30:	0052000b 	.word	0x0052000b
     f34:	0054000b 	.word	0x0054000b
     f38:	000f000b 	.word	0x000f000b
     f3c:	0012000b 	.word	0x0012000b
     f40:	0013000b 	.word	0x0013000b
     f44:	0050000b 	.word	0x0050000b
     f48:	0051000b 	.word	0x0051000b
     f4c:	000e000b 	.word	0x000e000b
     f50:	0011000b 	.word	0x0011000b
     f54:	0053000b 	.word	0x0053000b

00000f58 <ETHERNET_MAC_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_GMAC;
     f58:	4b04      	ldr	r3, [pc, #16]	; (f6c <ETHERNET_MAC_0_CLOCK_init+0x14>)
     f5a:	691a      	ldr	r2, [r3, #16]
     f5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
     f60:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_GMAC;
     f62:	69da      	ldr	r2, [r3, #28]
     f64:	f042 0204 	orr.w	r2, r2, #4
     f68:	61da      	str	r2, [r3, #28]
     f6a:	4770      	bx	lr
     f6c:	40000800 	.word	0x40000800

00000f70 <ETHERNET_MAC_0_init>:
	hri_mclk_set_AHBMASK_GMAC_bit(MCLK);
	hri_mclk_set_APBCMASK_GMAC_bit(MCLK);
}

void ETHERNET_MAC_0_init(void)
{
     f70:	b510      	push	{r4, lr}
	ETHERNET_MAC_0_CLOCK_init();
     f72:	4b05      	ldr	r3, [pc, #20]	; (f88 <ETHERNET_MAC_0_init+0x18>)
     f74:	4798      	blx	r3
	mac_async_init(&ETHERNET_MAC_0, GMAC);
     f76:	4b05      	ldr	r3, [pc, #20]	; (f8c <ETHERNET_MAC_0_init+0x1c>)
     f78:	4905      	ldr	r1, [pc, #20]	; (f90 <ETHERNET_MAC_0_init+0x20>)
     f7a:	4806      	ldr	r0, [pc, #24]	; (f94 <ETHERNET_MAC_0_init+0x24>)
     f7c:	4798      	blx	r3
	ETHERNET_MAC_0_PORT_init();
     f7e:	4b06      	ldr	r3, [pc, #24]	; (f98 <ETHERNET_MAC_0_init+0x28>)
}
     f80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ETHERNET_MAC_0_PORT_init();
     f84:	4718      	bx	r3
     f86:	bf00      	nop
     f88:	00000f59 	.word	0x00000f59
     f8c:	00001575 	.word	0x00001575
     f90:	42000800 	.word	0x42000800
     f94:	20007528 	.word	0x20007528
     f98:	00000e95 	.word	0x00000e95

00000f9c <system_init>:

void system_init(void)
{
     f9c:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     f9e:	4b15      	ldr	r3, [pc, #84]	; (ff4 <system_init+0x58>)
     fa0:	4798      	blx	r3
	init_mcu();
	ADC_0_init();
     fa2:	4b15      	ldr	r3, [pc, #84]	; (ff8 <system_init+0x5c>)
     fa4:	4798      	blx	r3
	CRYPTOGRAPHY_0_init();
     fa6:	4b15      	ldr	r3, [pc, #84]	; (ffc <system_init+0x60>)
     fa8:	4798      	blx	r3
	CRC_0_init();
     faa:	4b15      	ldr	r3, [pc, #84]	; (1000 <system_init+0x64>)
     fac:	4798      	blx	r3
	HASH_ALGORITHM_0_init();
     fae:	4b15      	ldr	r3, [pc, #84]	; (1004 <system_init+0x68>)
     fb0:	4798      	blx	r3
	FLASH_0_init();
     fb2:	4b15      	ldr	r3, [pc, #84]	; (1008 <system_init+0x6c>)
     fb4:	4798      	blx	r3
	USART_0_init();
     fb6:	4b15      	ldr	r3, [pc, #84]	; (100c <system_init+0x70>)
     fb8:	4798      	blx	r3
	USART_1_init();
     fba:	4b15      	ldr	r3, [pc, #84]	; (1010 <system_init+0x74>)
     fbc:	4798      	blx	r3
	delay_driver_init();
     fbe:	4b15      	ldr	r3, [pc, #84]	; (1014 <system_init+0x78>)
     fc0:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     fc2:	4a15      	ldr	r2, [pc, #84]	; (1018 <system_init+0x7c>)
     fc4:	6953      	ldr	r3, [r2, #20]
     fc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     fca:	6153      	str	r3, [r2, #20]
     fcc:	4b13      	ldr	r3, [pc, #76]	; (101c <system_init+0x80>)
     fce:	2240      	movs	r2, #64	; 0x40
     fd0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	timer_init(&TIMER_0, TC0, _tc_get_timer());
     fd4:	4b12      	ldr	r3, [pc, #72]	; (1020 <system_init+0x84>)
     fd6:	4798      	blx	r3
     fd8:	4912      	ldr	r1, [pc, #72]	; (1024 <system_init+0x88>)
     fda:	4b13      	ldr	r3, [pc, #76]	; (1028 <system_init+0x8c>)
     fdc:	4602      	mov	r2, r0
     fde:	4813      	ldr	r0, [pc, #76]	; (102c <system_init+0x90>)
     fe0:	4798      	blx	r3
	TIMER_0_init();
	USB_0_init();
     fe2:	4b13      	ldr	r3, [pc, #76]	; (1030 <system_init+0x94>)
     fe4:	4798      	blx	r3
	WDT_0_init();
     fe6:	4b13      	ldr	r3, [pc, #76]	; (1034 <system_init+0x98>)
     fe8:	4798      	blx	r3
	ETHERNET_MAC_0_init();
     fea:	4b13      	ldr	r3, [pc, #76]	; (1038 <system_init+0x9c>)
}
     fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ETHERNET_MAC_0_init();
     ff0:	4718      	bx	r3
     ff2:	bf00      	nop
     ff4:	000023b5 	.word	0x000023b5
     ff8:	00000bb5 	.word	0x00000bb5
     ffc:	00000be1 	.word	0x00000be1
    1000:	00000c05 	.word	0x00000c05
    1004:	00000c41 	.word	0x00000c41
    1008:	00000c75 	.word	0x00000c75
    100c:	00000cdd 	.word	0x00000cdd
    1010:	00000d59 	.word	0x00000d59
    1014:	00000d91 	.word	0x00000d91
    1018:	40000800 	.word	0x40000800
    101c:	40001c00 	.word	0x40001c00
    1020:	000033a7 	.word	0x000033a7
    1024:	40003800 	.word	0x40003800
    1028:	0000177d 	.word	0x0000177d
    102c:	20007544 	.word	0x20007544
    1030:	00000e2d 	.word	0x00000e2d
    1034:	00000e5d 	.word	0x00000e5d
    1038:	00000f71 	.word	0x00000f71

0000103c <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
    103c:	b570      	push	{r4, r5, r6, lr}
    103e:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    1040:	4604      	mov	r4, r0
    1042:	b160      	cbz	r0, 105e <adc_sync_init+0x22>
    1044:	1c08      	adds	r0, r1, #0
    1046:	bf18      	it	ne
    1048:	2001      	movne	r0, #1
    104a:	4905      	ldr	r1, [pc, #20]	; (1060 <adc_sync_init+0x24>)
    104c:	4b05      	ldr	r3, [pc, #20]	; (1064 <adc_sync_init+0x28>)
    104e:	2239      	movs	r2, #57	; 0x39
    1050:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
    1052:	4629      	mov	r1, r5
    1054:	4620      	mov	r0, r4
    1056:	4b04      	ldr	r3, [pc, #16]	; (1068 <adc_sync_init+0x2c>)
}
    1058:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return _adc_sync_init(&descr->device, hw);
    105c:	4718      	bx	r3
    105e:	e7f4      	b.n	104a <adc_sync_init+0xe>
    1060:	0000bebd 	.word	0x0000bebd
    1064:	00002035 	.word	0x00002035
    1068:	000022a1 	.word	0x000022a1

0000106c <adc_sync_enable_channel>:

/**
 * \brief Enable ADC
 */
int32_t adc_sync_enable_channel(struct adc_sync_descriptor *const descr, const uint8_t channel)
{
    106c:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr);
    106e:	4604      	mov	r4, r0
    1070:	3000      	adds	r0, #0
    1072:	bf18      	it	ne
    1074:	2001      	movne	r0, #1
{
    1076:	460d      	mov	r5, r1
	ASSERT(descr);
    1078:	224e      	movs	r2, #78	; 0x4e
    107a:	4904      	ldr	r1, [pc, #16]	; (108c <adc_sync_enable_channel+0x20>)
    107c:	4b04      	ldr	r3, [pc, #16]	; (1090 <adc_sync_enable_channel+0x24>)
    107e:	4798      	blx	r3
	_adc_sync_enable_channel(&descr->device, channel);
    1080:	4620      	mov	r0, r4
    1082:	4629      	mov	r1, r5
    1084:	4b03      	ldr	r3, [pc, #12]	; (1094 <adc_sync_enable_channel+0x28>)
    1086:	4798      	blx	r3

	return ERR_NONE;
}
    1088:	2000      	movs	r0, #0
    108a:	bd38      	pop	{r3, r4, r5, pc}
    108c:	0000bebd 	.word	0x0000bebd
    1090:	00002035 	.word	0x00002035
    1094:	000022d9 	.word	0x000022d9

00001098 <adc_sync_read_channel>:
/*
 * \brief Read data from ADC
 */
int32_t adc_sync_read_channel(struct adc_sync_descriptor *const descr, const uint8_t channel, uint8_t *const buffer,
                              const uint16_t length)
{
    1098:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    109c:	4688      	mov	r8, r1
    109e:	4617      	mov	r7, r2
    10a0:	461d      	mov	r5, r3
	uint8_t  data_size;
	uint16_t offset = 0;

	ASSERT(descr && buffer && length);
    10a2:	4604      	mov	r4, r0
    10a4:	2800      	cmp	r0, #0
    10a6:	d03b      	beq.n	1120 <adc_sync_read_channel+0x88>
    10a8:	2a00      	cmp	r2, #0
    10aa:	d03a      	beq.n	1122 <adc_sync_read_channel+0x8a>
    10ac:	1c18      	adds	r0, r3, #0
    10ae:	bf18      	it	ne
    10b0:	2001      	movne	r0, #1
    10b2:	2267      	movs	r2, #103	; 0x67
    10b4:	491c      	ldr	r1, [pc, #112]	; (1128 <adc_sync_read_channel+0x90>)
    10b6:	f8df 907c 	ldr.w	r9, [pc, #124]	; 1134 <adc_sync_read_channel+0x9c>
		_adc_sync_convert(&descr->device);

		while (!_adc_sync_is_channel_conversion_done(&descr->device, channel))
			;

		result         = _adc_sync_read_channel_data(&descr->device, channel);
    10ba:	f8df b07c 	ldr.w	fp, [pc, #124]	; 1138 <adc_sync_read_channel+0xa0>
	ASSERT(descr && buffer && length);
    10be:	47c8      	blx	r9
	data_size = _adc_sync_get_data_size(&descr->device);
    10c0:	4b1a      	ldr	r3, [pc, #104]	; (112c <adc_sync_read_channel+0x94>)
    10c2:	4620      	mov	r0, r4
    10c4:	4798      	blx	r3
    10c6:	4606      	mov	r6, r0
	ASSERT(!(length % data_size));
    10c8:	fb95 f0f0 	sdiv	r0, r5, r0
    10cc:	fb06 5010 	mls	r0, r6, r0, r5
    10d0:	fab0 f080 	clz	r0, r0
    10d4:	2269      	movs	r2, #105	; 0x69
    10d6:	4914      	ldr	r1, [pc, #80]	; (1128 <adc_sync_read_channel+0x90>)
    10d8:	0940      	lsrs	r0, r0, #5
    10da:	47c8      	blx	r9
		_adc_sync_convert(&descr->device);
    10dc:	f8df 905c 	ldr.w	r9, [pc, #92]	; 113c <adc_sync_read_channel+0xa4>
	uint16_t offset = 0;
    10e0:	f04f 0a00 	mov.w	sl, #0
		_adc_sync_convert(&descr->device);
    10e4:	4620      	mov	r0, r4
    10e6:	47c8      	blx	r9
		while (!_adc_sync_is_channel_conversion_done(&descr->device, channel))
    10e8:	4641      	mov	r1, r8
    10ea:	4620      	mov	r0, r4
    10ec:	4b10      	ldr	r3, [pc, #64]	; (1130 <adc_sync_read_channel+0x98>)
    10ee:	4798      	blx	r3
    10f0:	2800      	cmp	r0, #0
    10f2:	d0f9      	beq.n	10e8 <adc_sync_read_channel+0x50>
		result         = _adc_sync_read_channel_data(&descr->device, channel);
    10f4:	4641      	mov	r1, r8
    10f6:	4620      	mov	r0, r4
    10f8:	47d8      	blx	fp
		buffer[offset] = result;
		if (1 < data_size) {
    10fa:	2e01      	cmp	r6, #1
			buffer[offset + 1] = result >> 8;
    10fc:	bf88      	it	hi
    10fe:	eb07 020a 	addhi.w	r2, r7, sl
    1102:	eb0a 0306 	add.w	r3, sl, r6
		buffer[offset] = result;
    1106:	f807 000a 	strb.w	r0, [r7, sl]
			buffer[offset + 1] = result >> 8;
    110a:	bf88      	it	hi
    110c:	0a00      	lsrhi	r0, r0, #8
    110e:	fa1f fa83 	uxth.w	sl, r3
    1112:	bf88      	it	hi
    1114:	7050      	strbhi	r0, [r2, #1]
		}
		offset += data_size;
	} while (offset < length);
    1116:	4555      	cmp	r5, sl
    1118:	d8e4      	bhi.n	10e4 <adc_sync_read_channel+0x4c>

	return offset;
}
    111a:	4650      	mov	r0, sl
    111c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1120:	e7c7      	b.n	10b2 <adc_sync_read_channel+0x1a>
	ASSERT(descr && buffer && length);
    1122:	4610      	mov	r0, r2
    1124:	e7c5      	b.n	10b2 <adc_sync_read_channel+0x1a>
    1126:	bf00      	nop
    1128:	0000bebd 	.word	0x0000bebd
    112c:	000022e5 	.word	0x000022e5
    1130:	000022f7 	.word	0x000022f7
    1134:	00002035 	.word	0x00002035
    1138:	00002321 	.word	0x00002321
    113c:	00002305 	.word	0x00002305

00001140 <aes_sync_init>:
                                                          uint8_t *iv, uint32_t *iv_ofst);
/**
 * \brief Initialize AES.
 */
int32_t aes_sync_init(struct aes_sync_descriptor *descr, void *const hw)
{
    1140:	b570      	push	{r4, r5, r6, lr}
    1142:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    1144:	4604      	mov	r4, r0
    1146:	b160      	cbz	r0, 1162 <aes_sync_init+0x22>
    1148:	1c08      	adds	r0, r1, #0
    114a:	bf18      	it	ne
    114c:	2001      	movne	r0, #1
    114e:	4905      	ldr	r1, [pc, #20]	; (1164 <aes_sync_init+0x24>)
    1150:	4b05      	ldr	r3, [pc, #20]	; (1168 <aes_sync_init+0x28>)
    1152:	2232      	movs	r2, #50	; 0x32
    1154:	4798      	blx	r3

	return _aes_sync_init(&descr->dev, hw);
    1156:	4629      	mov	r1, r5
    1158:	4620      	mov	r0, r4
    115a:	4b04      	ldr	r3, [pc, #16]	; (116c <aes_sync_init+0x2c>)
}
    115c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return _aes_sync_init(&descr->dev, hw);
    1160:	4718      	bx	r3
    1162:	e7f4      	b.n	114e <aes_sync_init+0xe>
    1164:	0000bed7 	.word	0x0000bed7
    1168:	00002035 	.word	0x00002035
    116c:	0000232b 	.word	0x0000232b

00001170 <aes_sync_enable>:

/**
 * \brief Enable AES
 */
int32_t aes_sync_enable(struct aes_sync_descriptor *descr)
{
    1170:	b510      	push	{r4, lr}
	ASSERT(descr);
    1172:	4604      	mov	r4, r0
    1174:	3000      	adds	r0, #0
    1176:	bf18      	it	ne
    1178:	2001      	movne	r0, #1
    117a:	4b04      	ldr	r3, [pc, #16]	; (118c <aes_sync_enable+0x1c>)
    117c:	4904      	ldr	r1, [pc, #16]	; (1190 <aes_sync_enable+0x20>)
    117e:	2246      	movs	r2, #70	; 0x46
    1180:	4798      	blx	r3

	return _aes_sync_enable(&descr->dev);
    1182:	4620      	mov	r0, r4
    1184:	4b03      	ldr	r3, [pc, #12]	; (1194 <aes_sync_enable+0x24>)
}
    1186:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return _aes_sync_enable(&descr->dev);
    118a:	4718      	bx	r3
    118c:	00002035 	.word	0x00002035
    1190:	0000bed7 	.word	0x0000bed7
    1194:	0000233b 	.word	0x0000233b

00001198 <aes_sync_set_encrypt_key>:

/**
 * \brief              Set AES Key (encryption)
 */
int32_t aes_sync_set_encrypt_key(struct aes_sync_descriptor *descr, const uint8_t *key, const enum aes_keysize size)
{
    1198:	b570      	push	{r4, r5, r6, lr}
    119a:	460d      	mov	r5, r1
    119c:	4616      	mov	r6, r2
	ASSERT(descr && key);
    119e:	4604      	mov	r4, r0
    11a0:	b168      	cbz	r0, 11be <aes_sync_set_encrypt_key+0x26>
    11a2:	1c08      	adds	r0, r1, #0
    11a4:	bf18      	it	ne
    11a6:	2001      	movne	r0, #1
    11a8:	225a      	movs	r2, #90	; 0x5a
    11aa:	4905      	ldr	r1, [pc, #20]	; (11c0 <aes_sync_set_encrypt_key+0x28>)
    11ac:	4b05      	ldr	r3, [pc, #20]	; (11c4 <aes_sync_set_encrypt_key+0x2c>)
    11ae:	4798      	blx	r3
	return _aes_sync_set_key(&descr->dev, key, size);
    11b0:	4632      	mov	r2, r6
    11b2:	4629      	mov	r1, r5
    11b4:	4620      	mov	r0, r4
    11b6:	4b04      	ldr	r3, [pc, #16]	; (11c8 <aes_sync_set_encrypt_key+0x30>)
}
    11b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return _aes_sync_set_key(&descr->dev, key, size);
    11bc:	4718      	bx	r3
    11be:	e7f3      	b.n	11a8 <aes_sync_set_encrypt_key+0x10>
    11c0:	0000bed7 	.word	0x0000bed7
    11c4:	00002035 	.word	0x00002035
    11c8:	00002341 	.word	0x00002341

000011cc <atomic_enter_critical>:
 */
__attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    11cc:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    11d0:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    11d2:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    11d4:	f3bf 8f5f 	dmb	sy
    11d8:	4770      	bx	lr

000011da <atomic_leave_critical>:
    11da:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    11de:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    11e0:	f383 8810 	msr	PRIMASK, r3
    11e4:	4770      	bx	lr
	...

000011e8 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    11e8:	b570      	push	{r4, r5, r6, lr}
    11ea:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    11ec:	4604      	mov	r4, r0
    11ee:	b160      	cbz	r0, 120a <crc_sync_init+0x22>
    11f0:	1c08      	adds	r0, r1, #0
    11f2:	bf18      	it	ne
    11f4:	2001      	movne	r0, #1
    11f6:	4905      	ldr	r1, [pc, #20]	; (120c <crc_sync_init+0x24>)
    11f8:	4b05      	ldr	r3, [pc, #20]	; (1210 <crc_sync_init+0x28>)
    11fa:	222b      	movs	r2, #43	; 0x2b
    11fc:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    11fe:	4629      	mov	r1, r5
    1200:	4620      	mov	r0, r4
    1202:	4b04      	ldr	r3, [pc, #16]	; (1214 <crc_sync_init+0x2c>)
}
    1204:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return _crc_sync_init(&descr->dev, hw);
    1208:	4718      	bx	r3
    120a:	e7f4      	b.n	11f6 <crc_sync_init+0xe>
    120c:	0000bef1 	.word	0x0000bef1
    1210:	00002035 	.word	0x00002035
    1214:	00002605 	.word	0x00002605

00001218 <delay_init>:
/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
	_delay_init(hardware = hw);
    1218:	4b01      	ldr	r3, [pc, #4]	; (1220 <delay_init+0x8>)
    121a:	6018      	str	r0, [r3, #0]
    121c:	4b01      	ldr	r3, [pc, #4]	; (1224 <delay_init+0xc>)
    121e:	4718      	bx	r3
    1220:	20000330 	.word	0x20000330
    1224:	000031c9 	.word	0x000031c9

00001228 <delay_us>:
/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
	_delay_cycles(hardware, _get_cycles_for_us(us));
    1228:	4b05      	ldr	r3, [pc, #20]	; (1240 <delay_us+0x18>)
{
    122a:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
    122c:	681c      	ldr	r4, [r3, #0]
    122e:	4b05      	ldr	r3, [pc, #20]	; (1244 <delay_us+0x1c>)
    1230:	4798      	blx	r3
    1232:	4b05      	ldr	r3, [pc, #20]	; (1248 <delay_us+0x20>)
    1234:	4601      	mov	r1, r0
    1236:	4620      	mov	r0, r4
}
    1238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
    123c:	4718      	bx	r3
    123e:	bf00      	nop
    1240:	20000330 	.word	0x20000330
    1244:	00002399 	.word	0x00002399
    1248:	000031dd 	.word	0x000031dd

0000124c <delay_ms>:
/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    124c:	4b05      	ldr	r3, [pc, #20]	; (1264 <delay_ms+0x18>)
{
    124e:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    1250:	681c      	ldr	r4, [r3, #0]
    1252:	4b05      	ldr	r3, [pc, #20]	; (1268 <delay_ms+0x1c>)
    1254:	4798      	blx	r3
    1256:	4b05      	ldr	r3, [pc, #20]	; (126c <delay_ms+0x20>)
    1258:	4601      	mov	r1, r0
    125a:	4620      	mov	r0, r4
}
    125c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    1260:	4718      	bx	r3
    1262:	bf00      	nop
    1264:	20000330 	.word	0x20000330
    1268:	000023ab 	.word	0x000023ab
    126c:	000031dd 	.word	0x000031dd

00001270 <flash_ready>:
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
    1270:	6943      	ldr	r3, [r0, #20]
    1272:	b103      	cbz	r3, 1276 <flash_ready+0x6>
		descr->callbacks.cb_ready(descr);
    1274:	4718      	bx	r3
    1276:	4770      	bx	lr

00001278 <flash_error>:
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
    1278:	6983      	ldr	r3, [r0, #24]
    127a:	b103      	cbz	r3, 127e <flash_error+0x6>
		descr->callbacks.cb_error(descr);
    127c:	4718      	bx	r3
    127e:	4770      	bx	lr

00001280 <flash_is_address_aligned>:
{
    1280:	b538      	push	{r3, r4, r5, lr}
	ASSERT(flash);
    1282:	4605      	mov	r5, r0
    1284:	3000      	adds	r0, #0
    1286:	bf18      	it	ne
    1288:	2001      	movne	r0, #1
{
    128a:	460c      	mov	r4, r1
	ASSERT(flash);
    128c:	f240 1217 	movw	r2, #279	; 0x117
    1290:	4906      	ldr	r1, [pc, #24]	; (12ac <flash_is_address_aligned+0x2c>)
    1292:	4b07      	ldr	r3, [pc, #28]	; (12b0 <flash_is_address_aligned+0x30>)
    1294:	4798      	blx	r3
	uint32_t page_size = _flash_get_page_size(&flash->dev);
    1296:	4628      	mov	r0, r5
    1298:	4b06      	ldr	r3, [pc, #24]	; (12b4 <flash_is_address_aligned+0x34>)
    129a:	4798      	blx	r3
	if (flash_addr & (page_size - 1)) {
    129c:	3801      	subs	r0, #1
    129e:	4220      	tst	r0, r4
}
    12a0:	bf14      	ite	ne
    12a2:	f06f 000d 	mvnne.w	r0, #13
    12a6:	2000      	moveq	r0, #0
    12a8:	bd38      	pop	{r3, r4, r5, pc}
    12aa:	bf00      	nop
    12ac:	0000bf0b 	.word	0x0000bf0b
    12b0:	00002035 	.word	0x00002035
    12b4:	00002b25 	.word	0x00002b25

000012b8 <flash_init>:
{
    12b8:	b538      	push	{r3, r4, r5, lr}
    12ba:	460d      	mov	r5, r1
	ASSERT(flash && hw);
    12bc:	4604      	mov	r4, r0
    12be:	b180      	cbz	r0, 12e2 <flash_init+0x2a>
    12c0:	1c08      	adds	r0, r1, #0
    12c2:	bf18      	it	ne
    12c4:	2001      	movne	r0, #1
    12c6:	4907      	ldr	r1, [pc, #28]	; (12e4 <flash_init+0x2c>)
    12c8:	4b07      	ldr	r3, [pc, #28]	; (12e8 <flash_init+0x30>)
    12ca:	2238      	movs	r2, #56	; 0x38
    12cc:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
    12ce:	4629      	mov	r1, r5
    12d0:	4620      	mov	r0, r4
    12d2:	4b06      	ldr	r3, [pc, #24]	; (12ec <flash_init+0x34>)
    12d4:	4798      	blx	r3
	if (rc) {
    12d6:	b918      	cbnz	r0, 12e0 <flash_init+0x28>
	flash->dev.flash_cb.ready_cb = flash_ready;
    12d8:	4b05      	ldr	r3, [pc, #20]	; (12f0 <flash_init+0x38>)
    12da:	6023      	str	r3, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
    12dc:	4b05      	ldr	r3, [pc, #20]	; (12f4 <flash_init+0x3c>)
    12de:	6063      	str	r3, [r4, #4]
}
    12e0:	bd38      	pop	{r3, r4, r5, pc}
    12e2:	e7f0      	b.n	12c6 <flash_init+0xe>
    12e4:	0000bf0b 	.word	0x0000bf0b
    12e8:	00002035 	.word	0x00002035
    12ec:	00002aa9 	.word	0x00002aa9
    12f0:	00001271 	.word	0x00001271
    12f4:	00001279 	.word	0x00001279

000012f8 <flash_read>:
{
    12f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    12fc:	460e      	mov	r6, r1
    12fe:	4617      	mov	r7, r2
    1300:	4698      	mov	r8, r3
	ASSERT(flash && buffer && length);
    1302:	4604      	mov	r4, r0
    1304:	b1f0      	cbz	r0, 1344 <flash_read+0x4c>
    1306:	b1f2      	cbz	r2, 1346 <flash_read+0x4e>
    1308:	1c18      	adds	r0, r3, #0
    130a:	bf18      	it	ne
    130c:	2001      	movne	r0, #1
    130e:	2256      	movs	r2, #86	; 0x56
    1310:	4910      	ldr	r1, [pc, #64]	; (1354 <flash_read+0x5c>)
    1312:	4b11      	ldr	r3, [pc, #68]	; (1358 <flash_read+0x60>)
    1314:	4798      	blx	r3
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    1316:	4b11      	ldr	r3, [pc, #68]	; (135c <flash_read+0x64>)
    1318:	4620      	mov	r0, r4
    131a:	4798      	blx	r3
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    131c:	4b10      	ldr	r3, [pc, #64]	; (1360 <flash_read+0x68>)
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    131e:	4605      	mov	r5, r0
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    1320:	4620      	mov	r0, r4
    1322:	4798      	blx	r3
	if ((src_addr > page_size * total_pages) || (src_addr + length > page_size * total_pages)) {
    1324:	4368      	muls	r0, r5
    1326:	42b0      	cmp	r0, r6
    1328:	d30f      	bcc.n	134a <flash_read+0x52>
    132a:	eb08 0306 	add.w	r3, r8, r6
    132e:	4298      	cmp	r0, r3
    1330:	d30b      	bcc.n	134a <flash_read+0x52>
	_flash_read(&flash->dev, src_addr, buffer, length);
    1332:	4620      	mov	r0, r4
    1334:	4643      	mov	r3, r8
    1336:	463a      	mov	r2, r7
    1338:	4631      	mov	r1, r6
    133a:	4c0a      	ldr	r4, [pc, #40]	; (1364 <flash_read+0x6c>)
    133c:	47a0      	blx	r4
	return ERR_NONE;
    133e:	2000      	movs	r0, #0
    1340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1344:	e7e3      	b.n	130e <flash_read+0x16>
	ASSERT(flash && buffer && length);
    1346:	4610      	mov	r0, r2
    1348:	e7e1      	b.n	130e <flash_read+0x16>
		return ERR_BAD_ADDRESS;
    134a:	f06f 000d 	mvn.w	r0, #13
}
    134e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1352:	bf00      	nop
    1354:	0000bf0b 	.word	0x0000bf0b
    1358:	00002035 	.word	0x00002035
    135c:	00002b25 	.word	0x00002b25
    1360:	00002b2b 	.word	0x00002b2b
    1364:	00002b33 	.word	0x00002b33

00001368 <flash_write>:
{
    1368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    136c:	460e      	mov	r6, r1
    136e:	4617      	mov	r7, r2
    1370:	4698      	mov	r8, r3
	ASSERT(flash && buffer && length);
    1372:	4605      	mov	r5, r0
    1374:	b320      	cbz	r0, 13c0 <flash_write+0x58>
    1376:	b322      	cbz	r2, 13c2 <flash_write+0x5a>
    1378:	1c18      	adds	r0, r3, #0
    137a:	bf18      	it	ne
    137c:	2001      	movne	r0, #1
    137e:	226a      	movs	r2, #106	; 0x6a
    1380:	4915      	ldr	r1, [pc, #84]	; (13d8 <flash_write+0x70>)
    1382:	4b16      	ldr	r3, [pc, #88]	; (13dc <flash_write+0x74>)
    1384:	4798      	blx	r3
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    1386:	4b16      	ldr	r3, [pc, #88]	; (13e0 <flash_write+0x78>)
    1388:	4628      	mov	r0, r5
    138a:	4798      	blx	r3
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    138c:	4b15      	ldr	r3, [pc, #84]	; (13e4 <flash_write+0x7c>)
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    138e:	4604      	mov	r4, r0
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    1390:	4628      	mov	r0, r5
    1392:	4798      	blx	r3
	if ((dst_addr > page_size * total_pages) || (dst_addr + length > page_size * total_pages)) {
    1394:	4360      	muls	r0, r4
    1396:	42b0      	cmp	r0, r6
    1398:	d315      	bcc.n	13c6 <flash_write+0x5e>
    139a:	eb08 0306 	add.w	r3, r8, r6
    139e:	4298      	cmp	r0, r3
    13a0:	d311      	bcc.n	13c6 <flash_write+0x5e>
	if (_flash_is_locked(&flash->dev, dst_addr)) {
    13a2:	4631      	mov	r1, r6
    13a4:	4628      	mov	r0, r5
    13a6:	4b10      	ldr	r3, [pc, #64]	; (13e8 <flash_write+0x80>)
    13a8:	4798      	blx	r3
    13aa:	4604      	mov	r4, r0
    13ac:	b978      	cbnz	r0, 13ce <flash_write+0x66>
	_flash_write(&flash->dev, dst_addr, buffer, length);
    13ae:	4628      	mov	r0, r5
    13b0:	4643      	mov	r3, r8
    13b2:	463a      	mov	r2, r7
    13b4:	4631      	mov	r1, r6
    13b6:	4d0d      	ldr	r5, [pc, #52]	; (13ec <flash_write+0x84>)
    13b8:	47a8      	blx	r5
	return ERR_NONE;
    13ba:	4620      	mov	r0, r4
    13bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    13c0:	e7dd      	b.n	137e <flash_write+0x16>
	ASSERT(flash && buffer && length);
    13c2:	4610      	mov	r0, r2
    13c4:	e7db      	b.n	137e <flash_write+0x16>
		return ERR_BAD_ADDRESS;
    13c6:	f06f 000d 	mvn.w	r0, #13
    13ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_DENIED;
    13ce:	f06f 0010 	mvn.w	r0, #16
}
    13d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    13d6:	bf00      	nop
    13d8:	0000bf0b 	.word	0x0000bf0b
    13dc:	00002035 	.word	0x00002035
    13e0:	00002b25 	.word	0x00002b25
    13e4:	00002b2b 	.word	0x00002b2b
    13e8:	00002d31 	.word	0x00002d31
    13ec:	00002b51 	.word	0x00002b51

000013f0 <flash_append>:
{
    13f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    13f4:	460e      	mov	r6, r1
    13f6:	4617      	mov	r7, r2
    13f8:	4698      	mov	r8, r3
	ASSERT(flash && buffer && length);
    13fa:	4605      	mov	r5, r0
    13fc:	b320      	cbz	r0, 1448 <flash_append+0x58>
    13fe:	b322      	cbz	r2, 144a <flash_append+0x5a>
    1400:	1c18      	adds	r0, r3, #0
    1402:	bf18      	it	ne
    1404:	2001      	movne	r0, #1
    1406:	2282      	movs	r2, #130	; 0x82
    1408:	4915      	ldr	r1, [pc, #84]	; (1460 <flash_append+0x70>)
    140a:	4b16      	ldr	r3, [pc, #88]	; (1464 <flash_append+0x74>)
    140c:	4798      	blx	r3
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    140e:	4b16      	ldr	r3, [pc, #88]	; (1468 <flash_append+0x78>)
    1410:	4628      	mov	r0, r5
    1412:	4798      	blx	r3
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    1414:	4b15      	ldr	r3, [pc, #84]	; (146c <flash_append+0x7c>)
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    1416:	4604      	mov	r4, r0
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    1418:	4628      	mov	r0, r5
    141a:	4798      	blx	r3
	if ((dst_addr > page_size * total_pages) || (dst_addr + length > page_size * total_pages)) {
    141c:	4360      	muls	r0, r4
    141e:	42b0      	cmp	r0, r6
    1420:	d315      	bcc.n	144e <flash_append+0x5e>
    1422:	eb08 0306 	add.w	r3, r8, r6
    1426:	4298      	cmp	r0, r3
    1428:	d311      	bcc.n	144e <flash_append+0x5e>
	if (_flash_is_locked(&flash->dev, dst_addr)) {
    142a:	4631      	mov	r1, r6
    142c:	4628      	mov	r0, r5
    142e:	4b10      	ldr	r3, [pc, #64]	; (1470 <flash_append+0x80>)
    1430:	4798      	blx	r3
    1432:	4604      	mov	r4, r0
    1434:	b978      	cbnz	r0, 1456 <flash_append+0x66>
	_flash_append(&flash->dev, dst_addr, buffer, length);
    1436:	4628      	mov	r0, r5
    1438:	4643      	mov	r3, r8
    143a:	463a      	mov	r2, r7
    143c:	4631      	mov	r1, r6
    143e:	4d0d      	ldr	r5, [pc, #52]	; (1474 <flash_append+0x84>)
    1440:	47a8      	blx	r5
	return ERR_NONE;
    1442:	4620      	mov	r0, r4
    1444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1448:	e7dd      	b.n	1406 <flash_append+0x16>
	ASSERT(flash && buffer && length);
    144a:	4610      	mov	r0, r2
    144c:	e7db      	b.n	1406 <flash_append+0x16>
		return ERR_BAD_ADDRESS;
    144e:	f06f 000d 	mvn.w	r0, #13
    1452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_DENIED;
    1456:	f06f 0010 	mvn.w	r0, #16
}
    145a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    145e:	bf00      	nop
    1460:	0000bf0b 	.word	0x0000bf0b
    1464:	00002035 	.word	0x00002035
    1468:	00002b25 	.word	0x00002b25
    146c:	00002b2b 	.word	0x00002b2b
    1470:	00002d31 	.word	0x00002d31
    1474:	00002c21 	.word	0x00002c21

00001478 <flash_erase>:
{
    1478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    147c:	4688      	mov	r8, r1
    147e:	4617      	mov	r7, r2
	ASSERT(flash && page_nums);
    1480:	4604      	mov	r4, r0
    1482:	b318      	cbz	r0, 14cc <flash_erase+0x54>
    1484:	1c10      	adds	r0, r2, #0
    1486:	bf18      	it	ne
    1488:	2001      	movne	r0, #1
    148a:	229a      	movs	r2, #154	; 0x9a
    148c:	4911      	ldr	r1, [pc, #68]	; (14d4 <flash_erase+0x5c>)
    148e:	4b12      	ldr	r3, [pc, #72]	; (14d8 <flash_erase+0x60>)
    1490:	4798      	blx	r3
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    1492:	4b12      	ldr	r3, [pc, #72]	; (14dc <flash_erase+0x64>)
    1494:	4620      	mov	r0, r4
    1496:	4798      	blx	r3
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    1498:	4b11      	ldr	r3, [pc, #68]	; (14e0 <flash_erase+0x68>)
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    149a:	4605      	mov	r5, r0
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    149c:	4620      	mov	r0, r4
    149e:	4798      	blx	r3
	rc = flash_is_address_aligned(flash, dst_addr);
    14a0:	4641      	mov	r1, r8
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    14a2:	4681      	mov	r9, r0
	rc = flash_is_address_aligned(flash, dst_addr);
    14a4:	4b0f      	ldr	r3, [pc, #60]	; (14e4 <flash_erase+0x6c>)
    14a6:	4620      	mov	r0, r4
    14a8:	4798      	blx	r3
	if (rc) {
    14aa:	4606      	mov	r6, r0
    14ac:	b958      	cbnz	r0, 14c6 <flash_erase+0x4e>
	if ((page_nums > total_pages) || (dst_addr / page_size + page_nums > total_pages)) {
    14ae:	454f      	cmp	r7, r9
    14b0:	d80d      	bhi.n	14ce <flash_erase+0x56>
    14b2:	fbb8 f5f5 	udiv	r5, r8, r5
    14b6:	443d      	add	r5, r7
    14b8:	45a9      	cmp	r9, r5
    14ba:	d308      	bcc.n	14ce <flash_erase+0x56>
	_flash_erase(&flash->dev, dst_addr, page_nums);
    14bc:	463a      	mov	r2, r7
    14be:	4641      	mov	r1, r8
    14c0:	4620      	mov	r0, r4
    14c2:	4b09      	ldr	r3, [pc, #36]	; (14e8 <flash_erase+0x70>)
    14c4:	4798      	blx	r3
}
    14c6:	4630      	mov	r0, r6
    14c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    14cc:	e7dd      	b.n	148a <flash_erase+0x12>
		return ERR_INVALID_ARG;
    14ce:	f06f 060c 	mvn.w	r6, #12
    14d2:	e7f8      	b.n	14c6 <flash_erase+0x4e>
    14d4:	0000bf0b 	.word	0x0000bf0b
    14d8:	00002035 	.word	0x00002035
    14dc:	00002b25 	.word	0x00002b25
    14e0:	00002b2b 	.word	0x00002b2b
    14e4:	00001281 	.word	0x00001281
    14e8:	00002c89 	.word	0x00002c89

000014ec <flash_get_page_size>:
{
    14ec:	b510      	push	{r4, lr}
	ASSERT(flash);
    14ee:	4604      	mov	r4, r0
    14f0:	3000      	adds	r0, #0
    14f2:	bf18      	it	ne
    14f4:	2001      	movne	r0, #1
    14f6:	4b04      	ldr	r3, [pc, #16]	; (1508 <flash_get_page_size+0x1c>)
    14f8:	4904      	ldr	r1, [pc, #16]	; (150c <flash_get_page_size+0x20>)
    14fa:	22f7      	movs	r2, #247	; 0xf7
    14fc:	4798      	blx	r3
	return _flash_get_page_size(&flash->dev);
    14fe:	4620      	mov	r0, r4
    1500:	4b03      	ldr	r3, [pc, #12]	; (1510 <flash_get_page_size+0x24>)
}
    1502:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return _flash_get_page_size(&flash->dev);
    1506:	4718      	bx	r3
    1508:	00002035 	.word	0x00002035
    150c:	0000bf0b 	.word	0x0000bf0b
    1510:	00002b25 	.word	0x00002b25

00001514 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    1514:	b570      	push	{r4, r5, r6, lr}
    1516:	460d      	mov	r5, r1
    1518:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    151a:	4604      	mov	r4, r0
    151c:	b168      	cbz	r0, 153a <io_write+0x26>
    151e:	1c08      	adds	r0, r1, #0
    1520:	bf18      	it	ne
    1522:	2001      	movne	r0, #1
    1524:	2234      	movs	r2, #52	; 0x34
    1526:	4905      	ldr	r1, [pc, #20]	; (153c <io_write+0x28>)
    1528:	4b05      	ldr	r3, [pc, #20]	; (1540 <io_write+0x2c>)
    152a:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    152c:	6823      	ldr	r3, [r4, #0]
    152e:	4632      	mov	r2, r6
    1530:	4629      	mov	r1, r5
    1532:	4620      	mov	r0, r4
}
    1534:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return io_descr->write(io_descr, buf, length);
    1538:	4718      	bx	r3
    153a:	e7f3      	b.n	1524 <io_write+0x10>
    153c:	0000bf22 	.word	0x0000bf22
    1540:	00002035 	.word	0x00002035

00001544 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    1544:	b570      	push	{r4, r5, r6, lr}
    1546:	460d      	mov	r5, r1
    1548:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    154a:	4604      	mov	r4, r0
    154c:	b168      	cbz	r0, 156a <io_read+0x26>
    154e:	1c08      	adds	r0, r1, #0
    1550:	bf18      	it	ne
    1552:	2001      	movne	r0, #1
    1554:	223d      	movs	r2, #61	; 0x3d
    1556:	4905      	ldr	r1, [pc, #20]	; (156c <io_read+0x28>)
    1558:	4b05      	ldr	r3, [pc, #20]	; (1570 <io_read+0x2c>)
    155a:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    155c:	6863      	ldr	r3, [r4, #4]
    155e:	4632      	mov	r2, r6
    1560:	4629      	mov	r1, r5
    1562:	4620      	mov	r0, r4
}
    1564:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return io_descr->read(io_descr, buf, length);
    1568:	4718      	bx	r3
    156a:	e7f3      	b.n	1554 <io_read+0x10>
    156c:	0000bf22 	.word	0x0000bf22
    1570:	00002035 	.word	0x00002035

00001574 <mac_async_init>:

/**
 * \brief Initialize the MAC driver
 */
int32_t mac_async_init(struct mac_async_descriptor *const descr, void *const hw)
{
    1574:	b570      	push	{r4, r5, r6, lr}
    1576:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    1578:	4604      	mov	r4, r0
    157a:	b160      	cbz	r0, 1596 <mac_async_init+0x22>
    157c:	1c08      	adds	r0, r1, #0
    157e:	bf18      	it	ne
    1580:	2001      	movne	r0, #1
    1582:	4905      	ldr	r1, [pc, #20]	; (1598 <mac_async_init+0x24>)
    1584:	4b05      	ldr	r3, [pc, #20]	; (159c <mac_async_init+0x28>)
    1586:	2231      	movs	r2, #49	; 0x31
    1588:	4798      	blx	r3

	return _mac_async_init(&descr->dev, hw);
    158a:	4629      	mov	r1, r5
    158c:	4620      	mov	r0, r4
    158e:	4b04      	ldr	r3, [pc, #16]	; (15a0 <mac_async_init+0x2c>)
}
    1590:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return _mac_async_init(&descr->dev, hw);
    1594:	4718      	bx	r3
    1596:	e7f4      	b.n	1582 <mac_async_init+0xe>
    1598:	0000bf36 	.word	0x0000bf36
    159c:	00002035 	.word	0x00002035
    15a0:	0000267d 	.word	0x0000267d

000015a4 <mac_async_enable>:

/**
 * \brief Enable the MAC
 */
int32_t mac_async_enable(struct mac_async_descriptor *const descr)
{
    15a4:	b510      	push	{r4, lr}
	ASSERT(descr);
    15a6:	4604      	mov	r4, r0
    15a8:	3000      	adds	r0, #0
    15aa:	bf18      	it	ne
    15ac:	2001      	movne	r0, #1
    15ae:	4b04      	ldr	r3, [pc, #16]	; (15c0 <mac_async_enable+0x1c>)
    15b0:	4904      	ldr	r1, [pc, #16]	; (15c4 <mac_async_enable+0x20>)
    15b2:	2245      	movs	r2, #69	; 0x45
    15b4:	4798      	blx	r3

	return _mac_async_enable(&descr->dev);
    15b6:	4620      	mov	r0, r4
    15b8:	4b03      	ldr	r3, [pc, #12]	; (15c8 <mac_async_enable+0x24>)
}
    15ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return _mac_async_enable(&descr->dev);
    15be:	4718      	bx	r3
    15c0:	00002035 	.word	0x00002035
    15c4:	0000bf36 	.word	0x0000bf36
    15c8:	00002761 	.word	0x00002761

000015cc <mac_async_write>:
}
/**
 * \brief Write raw data to MAC
 */
int32_t mac_async_write(struct mac_async_descriptor *const descr, uint8_t *buf, uint32_t len)
{
    15cc:	b570      	push	{r4, r5, r6, lr}
    15ce:	460d      	mov	r5, r1
    15d0:	4616      	mov	r6, r2
	ASSERT(descr && buf && len);
    15d2:	4604      	mov	r4, r0
    15d4:	b170      	cbz	r0, 15f4 <mac_async_write+0x28>
    15d6:	b171      	cbz	r1, 15f6 <mac_async_write+0x2a>
    15d8:	1c10      	adds	r0, r2, #0
    15da:	bf18      	it	ne
    15dc:	2001      	movne	r0, #1
    15de:	2257      	movs	r2, #87	; 0x57
    15e0:	4906      	ldr	r1, [pc, #24]	; (15fc <mac_async_write+0x30>)
    15e2:	4b07      	ldr	r3, [pc, #28]	; (1600 <mac_async_write+0x34>)
    15e4:	4798      	blx	r3

	return _mac_async_write(&descr->dev, buf, len);
    15e6:	4632      	mov	r2, r6
    15e8:	4629      	mov	r1, r5
    15ea:	4620      	mov	r0, r4
    15ec:	4b05      	ldr	r3, [pc, #20]	; (1604 <mac_async_write+0x38>)
}
    15ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return _mac_async_write(&descr->dev, buf, len);
    15f2:	4718      	bx	r3
    15f4:	e7f3      	b.n	15de <mac_async_write+0x12>
	ASSERT(descr && buf && len);
    15f6:	4608      	mov	r0, r1
    15f8:	e7f1      	b.n	15de <mac_async_write+0x12>
    15fa:	bf00      	nop
    15fc:	0000bf36 	.word	0x0000bf36
    1600:	00002035 	.word	0x00002035
    1604:	00002771 	.word	0x00002771

00001608 <mac_async_read>:

/**
 * \brief Read raw data from MAC
 */
uint32_t mac_async_read(struct mac_async_descriptor *const descr, uint8_t *buf, uint32_t len)
{
    1608:	b570      	push	{r4, r5, r6, lr}
	ASSERT(descr);
    160a:	4604      	mov	r4, r0
    160c:	3000      	adds	r0, #0
{
    160e:	460d      	mov	r5, r1
    1610:	4616      	mov	r6, r2
	ASSERT(descr);
    1612:	4907      	ldr	r1, [pc, #28]	; (1630 <mac_async_read+0x28>)
    1614:	4b07      	ldr	r3, [pc, #28]	; (1634 <mac_async_read+0x2c>)
    1616:	f04f 0261 	mov.w	r2, #97	; 0x61
    161a:	bf18      	it	ne
    161c:	2001      	movne	r0, #1
    161e:	4798      	blx	r3

	return _mac_async_read(&descr->dev, buf, len);
    1620:	4632      	mov	r2, r6
    1622:	4629      	mov	r1, r5
    1624:	4620      	mov	r0, r4
    1626:	4b04      	ldr	r3, [pc, #16]	; (1638 <mac_async_read+0x30>)
}
    1628:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return _mac_async_read(&descr->dev, buf, len);
    162c:	4718      	bx	r3
    162e:	bf00      	nop
    1630:	0000bf36 	.word	0x0000bf36
    1634:	00002035 	.word	0x00002035
    1638:	000028a5 	.word	0x000028a5

0000163c <mac_async_read_len>:

/**
 * \brief Get next valid package length
 */
uint32_t mac_async_read_len(struct mac_async_descriptor *const descr)
{
    163c:	b510      	push	{r4, lr}
	ASSERT(descr);
    163e:	4604      	mov	r4, r0
    1640:	3000      	adds	r0, #0
    1642:	bf18      	it	ne
    1644:	2001      	movne	r0, #1
    1646:	4b04      	ldr	r3, [pc, #16]	; (1658 <mac_async_read_len+0x1c>)
    1648:	4904      	ldr	r1, [pc, #16]	; (165c <mac_async_read_len+0x20>)
    164a:	226b      	movs	r2, #107	; 0x6b
    164c:	4798      	blx	r3

	return _mac_async_read_len(&descr->dev);
    164e:	4620      	mov	r0, r4
    1650:	4b03      	ldr	r3, [pc, #12]	; (1660 <mac_async_read_len+0x24>)
}
    1652:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return _mac_async_read_len(&descr->dev);
    1656:	4718      	bx	r3
    1658:	00002035 	.word	0x00002035
    165c:	0000bf36 	.word	0x0000bf36
    1660:	00002999 	.word	0x00002999

00001664 <mac_async_set_filter_ex>:

/**
 * \brief Set MAC filter (expaneded)
 */
int32_t mac_async_set_filter_ex(struct mac_async_descriptor *const descr, uint8_t mac[6])
{
    1664:	b570      	push	{r4, r5, r6, lr}
    1666:	460d      	mov	r5, r1
	ASSERT(descr && mac);
    1668:	4604      	mov	r4, r0
    166a:	b160      	cbz	r0, 1686 <mac_async_set_filter_ex+0x22>
    166c:	1c08      	adds	r0, r1, #0
    166e:	bf18      	it	ne
    1670:	2001      	movne	r0, #1
    1672:	4905      	ldr	r1, [pc, #20]	; (1688 <mac_async_set_filter_ex+0x24>)
    1674:	4b05      	ldr	r3, [pc, #20]	; (168c <mac_async_set_filter_ex+0x28>)
    1676:	22a5      	movs	r2, #165	; 0xa5
    1678:	4798      	blx	r3

	return _mac_async_set_filter_ex(&descr->dev, mac);
    167a:	4629      	mov	r1, r5
    167c:	4620      	mov	r0, r4
    167e:	4b04      	ldr	r3, [pc, #16]	; (1690 <mac_async_set_filter_ex+0x2c>)
}
    1680:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return _mac_async_set_filter_ex(&descr->dev, mac);
    1684:	4718      	bx	r3
    1686:	e7f4      	b.n	1672 <mac_async_set_filter_ex+0xe>
    1688:	0000bf36 	.word	0x0000bf36
    168c:	00002035 	.word	0x00002035
    1690:	000029f5 	.word	0x000029f5

00001694 <sha_sync_init>:

/**
 * \brief              Initialize SHA.
 */
int32_t sha_sync_init(struct sha_sync_descriptor *descr, void *const hw)
{
    1694:	b570      	push	{r4, r5, r6, lr}
    1696:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    1698:	4604      	mov	r4, r0
    169a:	b160      	cbz	r0, 16b6 <sha_sync_init+0x22>
    169c:	1c08      	adds	r0, r1, #0
    169e:	bf18      	it	ne
    16a0:	2001      	movne	r0, #1
    16a2:	4905      	ldr	r1, [pc, #20]	; (16b8 <sha_sync_init+0x24>)
    16a4:	4b05      	ldr	r3, [pc, #20]	; (16bc <sha_sync_init+0x28>)
    16a6:	222c      	movs	r2, #44	; 0x2c
    16a8:	4798      	blx	r3

	return _sha_sync_init(&descr->dev, hw);
    16aa:	4629      	mov	r1, r5
    16ac:	4620      	mov	r0, r4
    16ae:	4b04      	ldr	r3, [pc, #16]	; (16c0 <sha_sync_init+0x2c>)
}
    16b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return _sha_sync_init(&descr->dev, hw);
    16b4:	4718      	bx	r3
    16b6:	e7f4      	b.n	16a2 <sha_sync_init+0xe>
    16b8:	0000bf51 	.word	0x0000bf51
    16bc:	00002035 	.word	0x00002035
    16c0:	00002a59 	.word	0x00002a59

000016c4 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    16c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    16c6:	6805      	ldr	r5, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    16c8:	b91d      	cbnz	r5, 16d2 <timer_add_timer_task+0xe>
		list_insert_as_head(list, new_task);
    16ca:	4b0f      	ldr	r3, [pc, #60]	; (1708 <timer_add_timer_task+0x44>)
	if (it == head) {
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
	}
}
    16cc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		list_insert_after(prev, new_task);
    16d0:	4718      	bx	r3
		if (time_left >= new_task->interval)
    16d2:	f8d1 e008 	ldr.w	lr, [r1, #8]
    16d6:	462c      	mov	r4, r5
    16d8:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    16da:	f1c2 0c01 	rsb	ip, r2, #1
		if (it->time_label <= time) {
    16de:	6863      	ldr	r3, [r4, #4]
    16e0:	68a7      	ldr	r7, [r4, #8]
    16e2:	4293      	cmp	r3, r2
			time_left = it->interval - (time - it->time_label);
    16e4:	bf95      	itete	ls
    16e6:	19db      	addls	r3, r3, r7
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    16e8:	4463      	addhi	r3, ip
			time_left = it->interval - (time - it->time_label);
    16ea:	1a9b      	subls	r3, r3, r2
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    16ec:	19db      	addhi	r3, r3, r7
		if (time_left >= new_task->interval)
    16ee:	4573      	cmp	r3, lr
    16f0:	d207      	bcs.n	1702 <timer_add_timer_task+0x3e>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    16f2:	6823      	ldr	r3, [r4, #0]
    16f4:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    16f6:	b913      	cbnz	r3, 16fe <timer_add_timer_task+0x3a>
		list_insert_after(prev, new_task);
    16f8:	4630      	mov	r0, r6
    16fa:	4b04      	ldr	r3, [pc, #16]	; (170c <timer_add_timer_task+0x48>)
    16fc:	e7e6      	b.n	16cc <timer_add_timer_task+0x8>
    16fe:	461c      	mov	r4, r3
    1700:	e7ed      	b.n	16de <timer_add_timer_task+0x1a>
	if (it == head) {
    1702:	42a5      	cmp	r5, r4
    1704:	d1f8      	bne.n	16f8 <timer_add_timer_task+0x34>
    1706:	e7e0      	b.n	16ca <timer_add_timer_task+0x6>
    1708:	00002049 	.word	0x00002049
    170c:	00002075 	.word	0x00002075

00001710 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    1710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    1714:	6906      	ldr	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    1716:	7e03      	ldrb	r3, [r0, #24]
	return (void *)list->head;
    1718:	6944      	ldr	r4, [r0, #20]
	uint32_t                 time  = ++timer->time;
    171a:	3601      	adds	r6, #1
	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    171c:	07da      	lsls	r2, r3, #31
{
    171e:	4605      	mov	r5, r0
	uint32_t                 time  = ++timer->time;
    1720:	6106      	str	r6, [r0, #16]
	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    1722:	d410      	bmi.n	1746 <timer_process_counted+0x36>
    1724:	7e03      	ldrb	r3, [r0, #24]
    1726:	079b      	lsls	r3, r3, #30
    1728:	d40d      	bmi.n	1746 <timer_process_counted+0x36>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    172a:	f8df 8048 	ldr.w	r8, [pc, #72]	; 1774 <timer_process_counted+0x64>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    172e:	f8df 9048 	ldr.w	r9, [pc, #72]	; 1778 <timer_process_counted+0x68>
		list_remove_head(&timer->tasks);
    1732:	f100 0714 	add.w	r7, r0, #20
	while (it && ((time - it->time_label) >= it->interval)) {
    1736:	b124      	cbz	r4, 1742 <timer_process_counted+0x32>
    1738:	6863      	ldr	r3, [r4, #4]
    173a:	68a2      	ldr	r2, [r4, #8]
    173c:	1af3      	subs	r3, r6, r3
    173e:	4293      	cmp	r3, r2
    1740:	d207      	bcs.n	1752 <timer_process_counted+0x42>
    1742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    1746:	7e2b      	ldrb	r3, [r5, #24]
    1748:	f043 0302 	orr.w	r3, r3, #2
    174c:	762b      	strb	r3, [r5, #24]
		return;
    174e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		list_remove_head(&timer->tasks);
    1752:	4638      	mov	r0, r7
    1754:	47c0      	blx	r8
		if (TIMER_TASK_REPEAT == tmp->mode) {
    1756:	7c23      	ldrb	r3, [r4, #16]
    1758:	2b01      	cmp	r3, #1
    175a:	d104      	bne.n	1766 <timer_process_counted+0x56>
			tmp->time_label = time;
    175c:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    175e:	4632      	mov	r2, r6
    1760:	4621      	mov	r1, r4
    1762:	4638      	mov	r0, r7
    1764:	47c8      	blx	r9
    1766:	f8d5 a014 	ldr.w	sl, [r5, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    176a:	68e3      	ldr	r3, [r4, #12]
    176c:	4620      	mov	r0, r4
    176e:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
    1770:	4654      	mov	r4, sl
    1772:	e7e0      	b.n	1736 <timer_process_counted+0x26>
    1774:	000020b9 	.word	0x000020b9
    1778:	000016c5 	.word	0x000016c5

0000177c <timer_init>:
{
    177c:	b538      	push	{r3, r4, r5, lr}
    177e:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    1780:	4604      	mov	r4, r0
    1782:	b178      	cbz	r0, 17a4 <timer_init+0x28>
    1784:	1c08      	adds	r0, r1, #0
    1786:	bf18      	it	ne
    1788:	2001      	movne	r0, #1
    178a:	223b      	movs	r2, #59	; 0x3b
    178c:	4906      	ldr	r1, [pc, #24]	; (17a8 <timer_init+0x2c>)
    178e:	4b07      	ldr	r3, [pc, #28]	; (17ac <timer_init+0x30>)
    1790:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    1792:	4629      	mov	r1, r5
    1794:	4620      	mov	r0, r4
    1796:	4b06      	ldr	r3, [pc, #24]	; (17b0 <timer_init+0x34>)
    1798:	4798      	blx	r3
	descr->time                           = 0;
    179a:	2000      	movs	r0, #0
	descr->device.timer_cb.period_expired = timer_process_counted;
    179c:	4b05      	ldr	r3, [pc, #20]	; (17b4 <timer_init+0x38>)
	descr->time                           = 0;
    179e:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    17a0:	6023      	str	r3, [r4, #0]
}
    17a2:	bd38      	pop	{r3, r4, r5, pc}
    17a4:	e7f1      	b.n	178a <timer_init+0xe>
    17a6:	bf00      	nop
    17a8:	0000bf6b 	.word	0x0000bf6b
    17ac:	00002035 	.word	0x00002035
    17b0:	0000329d 	.word	0x0000329d
    17b4:	00001711 	.word	0x00001711

000017b8 <timer_start>:
{
    17b8:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr);
    17ba:	4605      	mov	r5, r0
    17bc:	3000      	adds	r0, #0
    17be:	bf18      	it	ne
    17c0:	2001      	movne	r0, #1
    17c2:	2253      	movs	r2, #83	; 0x53
    17c4:	4907      	ldr	r1, [pc, #28]	; (17e4 <timer_start+0x2c>)
    17c6:	4b08      	ldr	r3, [pc, #32]	; (17e8 <timer_start+0x30>)
    17c8:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
    17ca:	4628      	mov	r0, r5
    17cc:	4b07      	ldr	r3, [pc, #28]	; (17ec <timer_start+0x34>)
    17ce:	4798      	blx	r3
    17d0:	4604      	mov	r4, r0
    17d2:	b920      	cbnz	r0, 17de <timer_start+0x26>
	_timer_start(&descr->device);
    17d4:	4628      	mov	r0, r5
    17d6:	4b06      	ldr	r3, [pc, #24]	; (17f0 <timer_start+0x38>)
    17d8:	4798      	blx	r3
	return ERR_NONE;
    17da:	4620      	mov	r0, r4
    17dc:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_DENIED;
    17de:	f06f 0010 	mvn.w	r0, #16
}
    17e2:	bd38      	pop	{r3, r4, r5, pc}
    17e4:	0000bf6b 	.word	0x0000bf6b
    17e8:	00002035 	.word	0x00002035
    17ec:	00003397 	.word	0x00003397
    17f0:	00003385 	.word	0x00003385

000017f4 <timer_add_task>:
{
    17f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    17f8:	460d      	mov	r5, r1
	ASSERT(descr && task);
    17fa:	4604      	mov	r4, r0
    17fc:	b300      	cbz	r0, 1840 <timer_add_task+0x4c>
    17fe:	1c08      	adds	r0, r1, #0
    1800:	bf18      	it	ne
    1802:	2001      	movne	r0, #1
    1804:	227a      	movs	r2, #122	; 0x7a
    1806:	491d      	ldr	r1, [pc, #116]	; (187c <timer_add_task+0x88>)
    1808:	f8df 8088 	ldr.w	r8, [pc, #136]	; 1894 <timer_add_task+0xa0>
    180c:	47c0      	blx	r8
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    180e:	7e23      	ldrb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
    1810:	f104 0714 	add.w	r7, r4, #20
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    1814:	f043 0301 	orr.w	r3, r3, #1
    1818:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
    181a:	4629      	mov	r1, r5
    181c:	4638      	mov	r0, r7
    181e:	4b18      	ldr	r3, [pc, #96]	; (1880 <timer_add_task+0x8c>)
    1820:	4798      	blx	r3
    1822:	4606      	mov	r6, r0
    1824:	b168      	cbz	r0, 1842 <timer_add_task+0x4e>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    1826:	7e23      	ldrb	r3, [r4, #24]
		ASSERT(false);
    1828:	4914      	ldr	r1, [pc, #80]	; (187c <timer_add_task+0x88>)
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    182a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
		ASSERT(false);
    182e:	2000      	movs	r0, #0
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    1830:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
    1832:	227f      	movs	r2, #127	; 0x7f
    1834:	47c0      	blx	r8
		return ERR_ALREADY_INITIALIZED;
    1836:	f06f 0011 	mvn.w	r0, #17
}
    183a:	b002      	add	sp, #8
    183c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1840:	e7e0      	b.n	1804 <timer_add_task+0x10>
	task->time_label = descr->time;
    1842:	6922      	ldr	r2, [r4, #16]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    1844:	4b0f      	ldr	r3, [pc, #60]	; (1884 <timer_add_task+0x90>)
	task->time_label = descr->time;
    1846:	606a      	str	r2, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    1848:	4638      	mov	r0, r7
    184a:	4629      	mov	r1, r5
    184c:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    184e:	7e23      	ldrb	r3, [r4, #24]
    1850:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    1854:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    1856:	7e20      	ldrb	r0, [r4, #24]
    1858:	f010 0002 	ands.w	r0, r0, #2
    185c:	d0ed      	beq.n	183a <timer_add_task+0x46>
		CRITICAL_SECTION_ENTER()
    185e:	a801      	add	r0, sp, #4
    1860:	4b09      	ldr	r3, [pc, #36]	; (1888 <timer_add_task+0x94>)
    1862:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    1864:	7e23      	ldrb	r3, [r4, #24]
    1866:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    186a:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
    186c:	4620      	mov	r0, r4
    186e:	4b07      	ldr	r3, [pc, #28]	; (188c <timer_add_task+0x98>)
    1870:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    1872:	a801      	add	r0, sp, #4
    1874:	4b06      	ldr	r3, [pc, #24]	; (1890 <timer_add_task+0x9c>)
    1876:	4798      	blx	r3
	return ERR_NONE;
    1878:	4630      	mov	r0, r6
    187a:	e7de      	b.n	183a <timer_add_task+0x46>
    187c:	0000bf6b 	.word	0x0000bf6b
    1880:	0000203b 	.word	0x0000203b
    1884:	000016c5 	.word	0x000016c5
    1888:	000011cd 	.word	0x000011cd
    188c:	000033ad 	.word	0x000033ad
    1890:	000011db 	.word	0x000011db
    1894:	00002035 	.word	0x00002035

00001898 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
    1898:	4603      	mov	r3, r0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    189a:	2200      	movs	r2, #0
    189c:	629a      	str	r2, [r3, #40]	; 0x28
	if (descr->usart_cb.tx_done) {
    189e:	69db      	ldr	r3, [r3, #28]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    18a0:	3808      	subs	r0, #8
	if (descr->usart_cb.tx_done) {
    18a2:	b103      	cbz	r3, 18a6 <usart_transmission_complete+0xe>
		descr->usart_cb.tx_done(descr);
    18a4:	4718      	bx	r3
    18a6:	4770      	bx	lr

000018a8 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
    18a8:	4603      	mov	r3, r0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    18aa:	2200      	movs	r2, #0
    18ac:	629a      	str	r2, [r3, #40]	; 0x28
	if (descr->usart_cb.error) {
    18ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    18b0:	3808      	subs	r0, #8
	if (descr->usart_cb.error) {
    18b2:	b103      	cbz	r3, 18b6 <usart_error+0xe>
		descr->usart_cb.error(descr);
    18b4:	4718      	bx	r3
    18b6:	4770      	bx	lr

000018b8 <usart_fill_rx_buffer>:
{
    18b8:	b570      	push	{r4, r5, r6, lr}
    18ba:	4604      	mov	r4, r0
	ringbuffer_put(&descr->rx, data);
    18bc:	4b05      	ldr	r3, [pc, #20]	; (18d4 <usart_fill_rx_buffer+0x1c>)
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    18be:	f1a0 0508 	sub.w	r5, r0, #8
	ringbuffer_put(&descr->rx, data);
    18c2:	302c      	adds	r0, #44	; 0x2c
    18c4:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
    18c6:	6a23      	ldr	r3, [r4, #32]
    18c8:	b11b      	cbz	r3, 18d2 <usart_fill_rx_buffer+0x1a>
		descr->usart_cb.rx_done(descr);
    18ca:	4628      	mov	r0, r5
}
    18cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		descr->usart_cb.rx_done(descr);
    18d0:	4718      	bx	r3
    18d2:	bd70      	pop	{r4, r5, r6, pc}
    18d4:	00002149 	.word	0x00002149

000018d8 <usart_async_write>:
{
    18d8:	b570      	push	{r4, r5, r6, lr}
    18da:	460e      	mov	r6, r1
    18dc:	4615      	mov	r5, r2
	ASSERT(descr && buf && length);
    18de:	4604      	mov	r4, r0
    18e0:	b1e0      	cbz	r0, 191c <usart_async_write+0x44>
    18e2:	b1e1      	cbz	r1, 191e <usart_async_write+0x46>
    18e4:	1c10      	adds	r0, r2, #0
    18e6:	bf18      	it	ne
    18e8:	2001      	movne	r0, #1
    18ea:	f240 123b 	movw	r2, #315	; 0x13b
    18ee:	4b0e      	ldr	r3, [pc, #56]	; (1928 <usart_async_write+0x50>)
    18f0:	490e      	ldr	r1, [pc, #56]	; (192c <usart_async_write+0x54>)
    18f2:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
    18f4:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
    18f8:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
    18fc:	429a      	cmp	r2, r3
    18fe:	d110      	bne.n	1922 <usart_async_write+0x4a>
	descr->tx_por           = 0;
    1900:	2300      	movs	r3, #0
    1902:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    1906:	2301      	movs	r3, #1
    1908:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    190a:	f104 0008 	add.w	r0, r4, #8
	descr->tx_buffer        = (uint8_t *)buf;
    190e:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
    1910:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
	_usart_async_enable_byte_sent_irq(&descr->device);
    1914:	4b06      	ldr	r3, [pc, #24]	; (1930 <usart_async_write+0x58>)
    1916:	4798      	blx	r3
	return (int32_t)length;
    1918:	4628      	mov	r0, r5
    191a:	bd70      	pop	{r4, r5, r6, pc}
    191c:	e7e5      	b.n	18ea <usart_async_write+0x12>
	ASSERT(descr && buf && length);
    191e:	4608      	mov	r0, r1
    1920:	e7e3      	b.n	18ea <usart_async_write+0x12>
		return ERR_NO_RESOURCE;
    1922:	f06f 001b 	mvn.w	r0, #27
}
    1926:	bd70      	pop	{r4, r5, r6, pc}
    1928:	00002035 	.word	0x00002035
    192c:	0000bf82 	.word	0x0000bf82
    1930:	00003115 	.word	0x00003115

00001934 <usart_process_byte_sent>:
	if (descr->tx_por != descr->tx_buffer_length) {
    1934:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    1936:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
    193a:	429a      	cmp	r2, r3
{
    193c:	b510      	push	{r4, lr}
    193e:	4604      	mov	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
    1940:	d00a      	beq.n	1958 <usart_process_byte_sent+0x24>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    1942:	6c02      	ldr	r2, [r0, #64]	; 0x40
    1944:	1c59      	adds	r1, r3, #1
    1946:	8781      	strh	r1, [r0, #60]	; 0x3c
    1948:	5cd1      	ldrb	r1, [r2, r3]
    194a:	4b04      	ldr	r3, [pc, #16]	; (195c <usart_process_byte_sent+0x28>)
    194c:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    194e:	4b04      	ldr	r3, [pc, #16]	; (1960 <usart_process_byte_sent+0x2c>)
    1950:	4620      	mov	r0, r4
}
    1952:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_usart_async_enable_tx_done_irq(&descr->device);
    1956:	4718      	bx	r3
    1958:	4b02      	ldr	r3, [pc, #8]	; (1964 <usart_process_byte_sent+0x30>)
    195a:	e7fa      	b.n	1952 <usart_process_byte_sent+0x1e>
    195c:	00003105 	.word	0x00003105
    1960:	00003115 	.word	0x00003115
    1964:	0000311d 	.word	0x0000311d

00001968 <usart_async_read>:
{
    1968:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    196c:	460e      	mov	r6, r1
    196e:	4617      	mov	r7, r2
	ASSERT(descr && buf && length);
    1970:	4605      	mov	r5, r0
    1972:	b1f0      	cbz	r0, 19b2 <usart_async_read+0x4a>
    1974:	b1f1      	cbz	r1, 19b4 <usart_async_read+0x4c>
    1976:	1c10      	adds	r0, r2, #0
    1978:	bf18      	it	ne
    197a:	2001      	movne	r0, #1
    197c:	f44f 72ac 	mov.w	r2, #344	; 0x158
    1980:	4910      	ldr	r1, [pc, #64]	; (19c4 <usart_async_read+0x5c>)
    1982:	4b11      	ldr	r3, [pc, #68]	; (19c8 <usart_async_read+0x60>)
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    1984:	f8df 9050 	ldr.w	r9, [pc, #80]	; 19d8 <usart_async_read+0x70>
	ASSERT(descr && buf && length);
    1988:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    198a:	3534      	adds	r5, #52	; 0x34
	CRITICAL_SECTION_ENTER()
    198c:	a801      	add	r0, sp, #4
    198e:	4b0f      	ldr	r3, [pc, #60]	; (19cc <usart_async_read+0x64>)
    1990:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    1992:	4b0f      	ldr	r3, [pc, #60]	; (19d0 <usart_async_read+0x68>)
    1994:	4628      	mov	r0, r5
    1996:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
    1998:	4b0e      	ldr	r3, [pc, #56]	; (19d4 <usart_async_read+0x6c>)
	num = ringbuffer_num(&descr->rx);
    199a:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
    199c:	a801      	add	r0, sp, #4
    199e:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    19a0:	2400      	movs	r4, #0
    19a2:	45a0      	cmp	r8, r4
    19a4:	d001      	beq.n	19aa <usart_async_read+0x42>
    19a6:	42a7      	cmp	r7, r4
    19a8:	d106      	bne.n	19b8 <usart_async_read+0x50>
	return (int32_t)was_read;
    19aa:	b2a0      	uxth	r0, r4
}
    19ac:	b003      	add	sp, #12
    19ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    19b2:	e7e3      	b.n	197c <usart_async_read+0x14>
	ASSERT(descr && buf && length);
    19b4:	4608      	mov	r0, r1
    19b6:	e7e1      	b.n	197c <usart_async_read+0x14>
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    19b8:	1931      	adds	r1, r6, r4
    19ba:	4628      	mov	r0, r5
    19bc:	47c8      	blx	r9
    19be:	3401      	adds	r4, #1
    19c0:	e7ef      	b.n	19a2 <usart_async_read+0x3a>
    19c2:	bf00      	nop
    19c4:	0000bf82 	.word	0x0000bf82
    19c8:	00002035 	.word	0x00002035
    19cc:	000011cd 	.word	0x000011cd
    19d0:	0000218d 	.word	0x0000218d
    19d4:	000011db 	.word	0x000011db
    19d8:	00002105 	.word	0x00002105

000019dc <usart_async_init>:
{
    19dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    19de:	460d      	mov	r5, r1
    19e0:	4616      	mov	r6, r2
    19e2:	461f      	mov	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    19e4:	4604      	mov	r4, r0
    19e6:	b310      	cbz	r0, 1a2e <usart_async_init+0x52>
    19e8:	b311      	cbz	r1, 1a30 <usart_async_init+0x54>
    19ea:	b31a      	cbz	r2, 1a34 <usart_async_init+0x58>
    19ec:	1c18      	adds	r0, r3, #0
    19ee:	bf18      	it	ne
    19f0:	2001      	movne	r0, #1
    19f2:	223a      	movs	r2, #58	; 0x3a
    19f4:	4912      	ldr	r1, [pc, #72]	; (1a40 <usart_async_init+0x64>)
    19f6:	4b13      	ldr	r3, [pc, #76]	; (1a44 <usart_async_init+0x68>)
    19f8:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    19fa:	463a      	mov	r2, r7
    19fc:	4631      	mov	r1, r6
    19fe:	f104 0034 	add.w	r0, r4, #52	; 0x34
    1a02:	4b11      	ldr	r3, [pc, #68]	; (1a48 <usart_async_init+0x6c>)
    1a04:	4798      	blx	r3
    1a06:	b9b8      	cbnz	r0, 1a38 <usart_async_init+0x5c>
	init_status = _usart_async_init(&descr->device, hw);
    1a08:	4629      	mov	r1, r5
    1a0a:	f104 0008 	add.w	r0, r4, #8
    1a0e:	4b0f      	ldr	r3, [pc, #60]	; (1a4c <usart_async_init+0x70>)
    1a10:	4798      	blx	r3
	if (init_status) {
    1a12:	b998      	cbnz	r0, 1a3c <usart_async_init+0x60>
	descr->io.read  = usart_async_read;
    1a14:	4b0e      	ldr	r3, [pc, #56]	; (1a50 <usart_async_init+0x74>)
    1a16:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_async_write;
    1a18:	4b0e      	ldr	r3, [pc, #56]	; (1a54 <usart_async_init+0x78>)
    1a1a:	6023      	str	r3, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    1a1c:	4b0e      	ldr	r3, [pc, #56]	; (1a58 <usart_async_init+0x7c>)
    1a1e:	60a3      	str	r3, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    1a20:	4b0e      	ldr	r3, [pc, #56]	; (1a5c <usart_async_init+0x80>)
    1a22:	60e3      	str	r3, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    1a24:	4b0e      	ldr	r3, [pc, #56]	; (1a60 <usart_async_init+0x84>)
    1a26:	6123      	str	r3, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    1a28:	4b0e      	ldr	r3, [pc, #56]	; (1a64 <usart_async_init+0x88>)
    1a2a:	6163      	str	r3, [r4, #20]
	return ERR_NONE;
    1a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1a2e:	e7e0      	b.n	19f2 <usart_async_init+0x16>
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    1a30:	4608      	mov	r0, r1
    1a32:	e7de      	b.n	19f2 <usart_async_init+0x16>
    1a34:	4610      	mov	r0, r2
    1a36:	e7dc      	b.n	19f2 <usart_async_init+0x16>
		return ERR_INVALID_ARG;
    1a38:	f06f 000c 	mvn.w	r0, #12
}
    1a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1a3e:	bf00      	nop
    1a40:	0000bf82 	.word	0x0000bf82
    1a44:	00002035 	.word	0x00002035
    1a48:	000020c5 	.word	0x000020c5
    1a4c:	0000306d 	.word	0x0000306d
    1a50:	00001969 	.word	0x00001969
    1a54:	000018d9 	.word	0x000018d9
    1a58:	00001935 	.word	0x00001935
    1a5c:	000018b9 	.word	0x000018b9
    1a60:	00001899 	.word	0x00001899
    1a64:	000018a9 	.word	0x000018a9

00001a68 <usart_async_enable>:
{
    1a68:	b510      	push	{r4, lr}
	ASSERT(descr);
    1a6a:	4604      	mov	r4, r0
    1a6c:	3000      	adds	r0, #0
    1a6e:	bf18      	it	ne
    1a70:	2001      	movne	r0, #1
    1a72:	2261      	movs	r2, #97	; 0x61
    1a74:	4904      	ldr	r1, [pc, #16]	; (1a88 <usart_async_enable+0x20>)
    1a76:	4b05      	ldr	r3, [pc, #20]	; (1a8c <usart_async_enable+0x24>)
    1a78:	4798      	blx	r3
	_usart_async_enable(&descr->device);
    1a7a:	f104 0008 	add.w	r0, r4, #8
    1a7e:	4b04      	ldr	r3, [pc, #16]	; (1a90 <usart_async_enable+0x28>)
    1a80:	4798      	blx	r3
}
    1a82:	2000      	movs	r0, #0
    1a84:	bd10      	pop	{r4, pc}
    1a86:	bf00      	nop
    1a88:	0000bf82 	.word	0x0000bf82
    1a8c:	00002035 	.word	0x00002035
    1a90:	000030e9 	.word	0x000030e9

00001a94 <usart_async_get_io_descriptor>:
{
    1a94:	b538      	push	{r3, r4, r5, lr}
    1a96:	460d      	mov	r5, r1
	ASSERT(descr && io);
    1a98:	4604      	mov	r4, r0
    1a9a:	b148      	cbz	r0, 1ab0 <usart_async_get_io_descriptor+0x1c>
    1a9c:	1c08      	adds	r0, r1, #0
    1a9e:	bf18      	it	ne
    1aa0:	2001      	movne	r0, #1
    1aa2:	2277      	movs	r2, #119	; 0x77
    1aa4:	4903      	ldr	r1, [pc, #12]	; (1ab4 <usart_async_get_io_descriptor+0x20>)
    1aa6:	4b04      	ldr	r3, [pc, #16]	; (1ab8 <usart_async_get_io_descriptor+0x24>)
    1aa8:	4798      	blx	r3
	*io = &descr->io;
    1aaa:	602c      	str	r4, [r5, #0]
}
    1aac:	2000      	movs	r0, #0
    1aae:	bd38      	pop	{r3, r4, r5, pc}
    1ab0:	e7f7      	b.n	1aa2 <usart_async_get_io_descriptor+0xe>
    1ab2:	bf00      	nop
    1ab4:	0000bf82 	.word	0x0000bf82
    1ab8:	00002035 	.word	0x00002035

00001abc <usart_async_register_callback>:
{
    1abc:	b570      	push	{r4, r5, r6, lr}
	ASSERT(descr);
    1abe:	4604      	mov	r4, r0
    1ac0:	3000      	adds	r0, #0
{
    1ac2:	460e      	mov	r6, r1
	ASSERT(descr);
    1ac4:	bf18      	it	ne
    1ac6:	2001      	movne	r0, #1
{
    1ac8:	4615      	mov	r5, r2
	ASSERT(descr);
    1aca:	4911      	ldr	r1, [pc, #68]	; (1b10 <usart_async_register_callback+0x54>)
    1acc:	4b11      	ldr	r3, [pc, #68]	; (1b14 <usart_async_register_callback+0x58>)
    1ace:	2283      	movs	r2, #131	; 0x83
    1ad0:	4798      	blx	r3
	switch (type) {
    1ad2:	2e01      	cmp	r6, #1
    1ad4:	d010      	beq.n	1af8 <usart_async_register_callback+0x3c>
    1ad6:	d304      	bcc.n	1ae2 <usart_async_register_callback+0x26>
    1ad8:	2e02      	cmp	r6, #2
    1ada:	d013      	beq.n	1b04 <usart_async_register_callback+0x48>
		return ERR_INVALID_ARG;
    1adc:	f06f 000c 	mvn.w	r0, #12
}
    1ae0:	bd70      	pop	{r4, r5, r6, pc}
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
    1ae2:	1c2a      	adds	r2, r5, #0
		descr->usart_cb.rx_done = cb;
    1ae4:	62a5      	str	r5, [r4, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
    1ae6:	bf18      	it	ne
    1ae8:	2201      	movne	r2, #1
    1aea:	2101      	movs	r1, #1
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
    1aec:	f104 0008 	add.w	r0, r4, #8
    1af0:	4b09      	ldr	r3, [pc, #36]	; (1b18 <usart_async_register_callback+0x5c>)
    1af2:	4798      	blx	r3
	return ERR_NONE;
    1af4:	2000      	movs	r0, #0
		break;
    1af6:	bd70      	pop	{r4, r5, r6, pc}
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
    1af8:	1c2a      	adds	r2, r5, #0
		descr->usart_cb.tx_done = cb;
    1afa:	6265      	str	r5, [r4, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
    1afc:	bf18      	it	ne
    1afe:	2201      	movne	r2, #1
    1b00:	2102      	movs	r1, #2
    1b02:	e7f3      	b.n	1aec <usart_async_register_callback+0x30>
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
    1b04:	1c2a      	adds	r2, r5, #0
		descr->usart_cb.error = cb;
    1b06:	62e5      	str	r5, [r4, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
    1b08:	bf18      	it	ne
    1b0a:	2201      	movne	r2, #1
    1b0c:	2103      	movs	r1, #3
    1b0e:	e7ed      	b.n	1aec <usart_async_register_callback+0x30>
    1b10:	0000bf82 	.word	0x0000bf82
    1b14:	00002035 	.word	0x00002035
    1b18:	00003125 	.word	0x00003125

00001b1c <usart_async_is_tx_empty>:
{
    1b1c:	b510      	push	{r4, lr}
	ASSERT(descr);
    1b1e:	4604      	mov	r4, r0
    1b20:	3000      	adds	r0, #0
    1b22:	bf18      	it	ne
    1b24:	2001      	movne	r0, #1
    1b26:	22f8      	movs	r2, #248	; 0xf8
    1b28:	4903      	ldr	r1, [pc, #12]	; (1b38 <usart_async_is_tx_empty+0x1c>)
    1b2a:	4b04      	ldr	r3, [pc, #16]	; (1b3c <usart_async_is_tx_empty+0x20>)
    1b2c:	4798      	blx	r3
	return _usart_async_is_byte_sent(&descr->device);
    1b2e:	f104 0008 	add.w	r0, r4, #8
    1b32:	4b03      	ldr	r3, [pc, #12]	; (1b40 <usart_async_is_tx_empty+0x24>)
    1b34:	4798      	blx	r3
}
    1b36:	bd10      	pop	{r4, pc}
    1b38:	0000bf82 	.word	0x0000bf82
    1b3c:	00002035 	.word	0x00002035
    1b40:	0000310b 	.word	0x0000310b

00001b44 <_usb_d_find_ep>:
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    1b44:	490a      	ldr	r1, [pc, #40]	; (1b70 <_usb_d_find_ep+0x2c>)
{
    1b46:	b570      	push	{r4, r5, r6, lr}
    1b48:	2300      	movs	r3, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    1b4a:	f000 060f 	and.w	r6, r0, #15
    1b4e:	015d      	lsls	r5, r3, #5
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    1b50:	194c      	adds	r4, r1, r5
    1b52:	b25a      	sxtb	r2, r3
    1b54:	7864      	ldrb	r4, [r4, #1]
    1b56:	4284      	cmp	r4, r0
    1b58:	d008      	beq.n	1b6c <_usb_d_find_ep+0x28>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    1b5a:	5c6d      	ldrb	r5, [r5, r1]
    1b5c:	b90d      	cbnz	r5, 1b62 <_usb_d_find_ep+0x1e>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    1b5e:	42a6      	cmp	r6, r4
    1b60:	d004      	beq.n	1b6c <_usb_d_find_ep+0x28>
    1b62:	3301      	adds	r3, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    1b64:	2b04      	cmp	r3, #4
    1b66:	d1f2      	bne.n	1b4e <_usb_d_find_ep+0xa>
			return i;
		}
	}
	return -1;
    1b68:	f04f 32ff 	mov.w	r2, #4294967295
}
    1b6c:	4610      	mov	r0, r2
    1b6e:	bd70      	pop	{r4, r5, r6, pc}
    1b70:	20000334 	.word	0x20000334

00001b74 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    1b74:	2000      	movs	r0, #0
    1b76:	4770      	bx	lr

00001b78 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    1b78:	b570      	push	{r4, r5, r6, lr}
	int8_t           ep_index = _usb_d_find_ep(ep);
    1b7a:	4b09      	ldr	r3, [pc, #36]	; (1ba0 <usb_d_cb_trans_more+0x28>)
{
    1b7c:	4604      	mov	r4, r0
    1b7e:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    1b80:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    1b82:	4b08      	ldr	r3, [pc, #32]	; (1ba4 <usb_d_cb_trans_more+0x2c>)
    1b84:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    1b88:	7883      	ldrb	r3, [r0, #2]
    1b8a:	2b03      	cmp	r3, #3
    1b8c:	d105      	bne.n	1b9a <usb_d_cb_trans_more+0x22>
		return ept->callbacks.more(ep, transfered);
    1b8e:	6983      	ldr	r3, [r0, #24]
    1b90:	4629      	mov	r1, r5
    1b92:	4620      	mov	r0, r4
	}
	return false;
}
    1b94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return ept->callbacks.more(ep, transfered);
    1b98:	4718      	bx	r3
}
    1b9a:	2000      	movs	r0, #0
    1b9c:	bd70      	pop	{r4, r5, r6, pc}
    1b9e:	bf00      	nop
    1ba0:	00001b45 	.word	0x00001b45
    1ba4:	20000334 	.word	0x20000334

00001ba8 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    1ba8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int8_t           ep_index = _usb_d_find_ep(ep);
    1bac:	4b3c      	ldr	r3, [pc, #240]	; (1ca0 <_usb_d_cb_trans_done+0xf8>)
    1bae:	4c3d      	ldr	r4, [pc, #244]	; (1ca4 <_usb_d_cb_trans_done+0xfc>)
{
    1bb0:	b085      	sub	sp, #20
    1bb2:	4680      	mov	r8, r0
    1bb4:	460f      	mov	r7, r1
    1bb6:	4691      	mov	r9, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    1bb8:	4798      	blx	r3
    1bba:	4603      	mov	r3, r0
    1bbc:	0146      	lsls	r6, r0, #5
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
    1bbe:	2f00      	cmp	r7, #0
    1bc0:	d149      	bne.n	1c56 <_usb_d_cb_trans_done+0xae>
		ept->xfer.hdr.status = USB_XFER_DONE;
    1bc2:	19a5      	adds	r5, r4, r6
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1bc4:	5da1      	ldrb	r1, [r4, r6]
		ept->xfer.hdr.status = USB_XFER_DONE;
    1bc6:	70ef      	strb	r7, [r5, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1bc8:	2900      	cmp	r1, #0
    1bca:	d13b      	bne.n	1c44 <_usb_d_cb_trans_done+0x9c>
	if (state == USB_EP_S_X_DATA) {
    1bcc:	78aa      	ldrb	r2, [r5, #2]
    1bce:	7868      	ldrb	r0, [r5, #1]
    1bd0:	69ee      	ldr	r6, [r5, #28]
    1bd2:	2a03      	cmp	r2, #3
    1bd4:	f04f 0e0c 	mov.w	lr, #12
    1bd8:	f04f 0220 	mov.w	r2, #32
    1bdc:	d12b      	bne.n	1c36 <_usb_d_cb_trans_done+0x8e>
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    1bde:	fb12 e203 	smlabb	r2, r2, r3, lr
    1be2:	4422      	add	r2, r4
    1be4:	2101      	movs	r1, #1
    1be6:	f995 700c 	ldrsb.w	r7, [r5, #12]
    1bea:	47b0      	blx	r6
    1bec:	786b      	ldrb	r3, [r5, #1]
		if (err) {
    1bee:	b178      	cbz	r0, 1c10 <_usb_d_cb_trans_done+0x68>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    1bf0:	2205      	movs	r2, #5
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    1bf2:	2f00      	cmp	r7, #0
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    1bf4:	70aa      	strb	r2, [r5, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    1bf6:	f04f 0202 	mov.w	r2, #2
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    1bfa:	bfb4      	ite	lt
    1bfc:	4618      	movlt	r0, r3
    1bfe:	f043 0080 	orrge.w	r0, r3, #128	; 0x80
			ept->xfer.hdr.status = USB_XFER_HALT;
    1c02:	70ea      	strb	r2, [r5, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    1c04:	2101      	movs	r1, #1
    1c06:	4b28      	ldr	r3, [pc, #160]	; (1ca8 <_usb_d_cb_trans_done+0x100>)
    1c08:	4798      	blx	r3
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
}
    1c0a:	b005      	add	sp, #20
    1c0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	struct usb_d_transfer trans
    1c10:	2f00      	cmp	r7, #0
    1c12:	bfac      	ite	ge
    1c14:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
    1c18:	f003 030f 	andlt.w	r3, r3, #15
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    1c1c:	2204      	movs	r2, #4
	struct usb_d_transfer trans
    1c1e:	f88d 300c 	strb.w	r3, [sp, #12]
    1c22:	2301      	movs	r3, #1
    1c24:	9001      	str	r0, [sp, #4]
    1c26:	9002      	str	r0, [sp, #8]
    1c28:	f88d 300d 	strb.w	r3, [sp, #13]
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    1c2c:	70aa      	strb	r2, [r5, #2]
	return _usb_d_dev_ep_trans(&trans);
    1c2e:	a801      	add	r0, sp, #4
    1c30:	4b1e      	ldr	r3, [pc, #120]	; (1cac <_usb_d_cb_trans_done+0x104>)
    1c32:	4798      	blx	r3
    1c34:	e7e9      	b.n	1c0a <_usb_d_cb_trans_done+0x62>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    1c36:	fb12 e203 	smlabb	r2, r2, r3, lr
    1c3a:	4422      	add	r2, r4
    1c3c:	47b0      	blx	r6
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    1c3e:	2302      	movs	r3, #2
    1c40:	70ab      	strb	r3, [r5, #2]
    1c42:	e7e2      	b.n	1c0a <_usb_d_cb_trans_done+0x62>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    1c44:	2301      	movs	r3, #1
    1c46:	70ab      	strb	r3, [r5, #2]
	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    1c48:	4434      	add	r4, r6
    1c4a:	464a      	mov	r2, r9
    1c4c:	69e3      	ldr	r3, [r4, #28]
    1c4e:	78e1      	ldrb	r1, [r4, #3]
    1c50:	4640      	mov	r0, r8
    1c52:	4798      	blx	r3
    1c54:	e7d9      	b.n	1c0a <_usb_d_cb_trans_done+0x62>
	} else if (code == USB_TRANS_STALL) {
    1c56:	2f01      	cmp	r7, #1
		ept->xfer.hdr.status = USB_XFER_HALT;
    1c58:	eb04 0306 	add.w	r3, r4, r6
	} else if (code == USB_TRANS_STALL) {
    1c5c:	d10b      	bne.n	1c76 <_usb_d_cb_trans_done+0xce>
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1c5e:	5da1      	ldrb	r1, [r4, r6]
		ept->xfer.hdr.status = USB_XFER_HALT;
    1c60:	2202      	movs	r2, #2
    1c62:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1c64:	b921      	cbnz	r1, 1c70 <_usb_d_cb_trans_done+0xc8>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    1c66:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1c68:	4640      	mov	r0, r8
    1c6a:	4b0f      	ldr	r3, [pc, #60]	; (1ca8 <_usb_d_cb_trans_done+0x100>)
    1c6c:	4798      	blx	r3
    1c6e:	e7eb      	b.n	1c48 <_usb_d_cb_trans_done+0xa0>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    1c70:	2205      	movs	r2, #5
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    1c72:	709a      	strb	r2, [r3, #2]
    1c74:	e7e8      	b.n	1c48 <_usb_d_cb_trans_done+0xa0>
	} else if (code == USB_TRANS_ABORT) {
    1c76:	2f02      	cmp	r7, #2
    1c78:	d107      	bne.n	1c8a <_usb_d_cb_trans_done+0xe2>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    1c7a:	2204      	movs	r2, #4
    1c7c:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1c7e:	5da2      	ldrb	r2, [r4, r6]
    1c80:	b90a      	cbnz	r2, 1c86 <_usb_d_cb_trans_done+0xde>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    1c82:	709f      	strb	r7, [r3, #2]
			return;
    1c84:	e7c1      	b.n	1c0a <_usb_d_cb_trans_done+0x62>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    1c86:	2201      	movs	r2, #1
    1c88:	e7f3      	b.n	1c72 <_usb_d_cb_trans_done+0xca>
	} else if (code == USB_TRANS_RESET) {
    1c8a:	2f03      	cmp	r7, #3
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    1c8c:	bf09      	itett	eq
    1c8e:	2200      	moveq	r2, #0
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    1c90:	2206      	movne	r2, #6
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    1c92:	709a      	strbeq	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    1c94:	2205      	moveq	r2, #5
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    1c96:	bf18      	it	ne
    1c98:	709a      	strbne	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    1c9a:	70da      	strb	r2, [r3, #3]
    1c9c:	e7d4      	b.n	1c48 <_usb_d_cb_trans_done+0xa0>
    1c9e:	bf00      	nop
    1ca0:	00001b45 	.word	0x00001b45
    1ca4:	20000334 	.word	0x20000334
    1ca8:	00003fc5 	.word	0x00003fc5
    1cac:	000040fd 	.word	0x000040fd

00001cb0 <usb_d_cb_trans_setup>:
{
    1cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int8_t           ep_index = _usb_d_find_ep(ep);
    1cb4:	4b1d      	ldr	r3, [pc, #116]	; (1d2c <usb_d_cb_trans_setup+0x7c>)
	uint8_t *        req      = ept->xfer.req;
    1cb6:	4e1e      	ldr	r6, [pc, #120]	; (1d30 <usb_d_cb_trans_setup+0x80>)
    1cb8:	4c1e      	ldr	r4, [pc, #120]	; (1d34 <usb_d_cb_trans_setup+0x84>)
{
    1cba:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1cbc:	4798      	blx	r3
	uint8_t *        req      = ept->xfer.req;
    1cbe:	2720      	movs	r7, #32
    1cc0:	230c      	movs	r3, #12
    1cc2:	fb17 3700 	smlabb	r7, r7, r0, r3
    1cc6:	4437      	add	r7, r6
	int8_t           ep_index = _usb_d_find_ep(ep);
    1cc8:	4681      	mov	r9, r0
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    1cca:	4639      	mov	r1, r7
    1ccc:	4628      	mov	r0, r5
    1cce:	4b1a      	ldr	r3, [pc, #104]	; (1d38 <usb_d_cb_trans_setup+0x88>)
    1cd0:	4798      	blx	r3
	if (n != 8) {
    1cd2:	b2c0      	uxtb	r0, r0
    1cd4:	2808      	cmp	r0, #8
    1cd6:	f065 087f 	orn	r8, r5, #127	; 0x7f
    1cda:	d009      	beq.n	1cf0 <usb_d_cb_trans_setup+0x40>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1cdc:	2101      	movs	r1, #1
    1cde:	4628      	mov	r0, r5
    1ce0:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    1ce2:	2101      	movs	r1, #1
    1ce4:	fa5f f088 	uxtb.w	r0, r8
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    1ce8:	4623      	mov	r3, r4
}
    1cea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    1cee:	4718      	bx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    1cf0:	eb06 1649 	add.w	r6, r6, r9, lsl #5
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1cf4:	2100      	movs	r1, #0
    1cf6:	4628      	mov	r0, r5
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    1cf8:	fa5f f888 	uxtb.w	r8, r8
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1cfc:	47a0      	blx	r4
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    1cfe:	f04f 0901 	mov.w	r9, #1
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    1d02:	2100      	movs	r1, #0
    1d04:	4640      	mov	r0, r8
    1d06:	47a0      	blx	r4
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    1d08:	f886 9002 	strb.w	r9, [r6, #2]
	if (!ept->callbacks.req(ep, req)) {
    1d0c:	6973      	ldr	r3, [r6, #20]
    1d0e:	4639      	mov	r1, r7
    1d10:	4628      	mov	r0, r5
    1d12:	4798      	blx	r3
    1d14:	b938      	cbnz	r0, 1d26 <usb_d_cb_trans_setup+0x76>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    1d16:	2305      	movs	r3, #5
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1d18:	4649      	mov	r1, r9
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    1d1a:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1d1c:	4628      	mov	r0, r5
    1d1e:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    1d20:	4649      	mov	r1, r9
    1d22:	4640      	mov	r0, r8
    1d24:	e7e0      	b.n	1ce8 <usb_d_cb_trans_setup+0x38>
    1d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1d2a:	bf00      	nop
    1d2c:	00001b45 	.word	0x00001b45
    1d30:	20000334 	.word	0x20000334
    1d34:	00003fc5 	.word	0x00003fc5
    1d38:	000040a9 	.word	0x000040a9

00001d3c <usb_d_init>:

int32_t usb_d_init(void)
{
    1d3c:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    1d3e:	4b10      	ldr	r3, [pc, #64]	; (1d80 <usb_d_init+0x44>)
    1d40:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    1d42:	2800      	cmp	r0, #0
    1d44:	db1b      	blt.n	1d7e <usb_d_init+0x42>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    1d46:	2280      	movs	r2, #128	; 0x80
    1d48:	2100      	movs	r1, #0
    1d4a:	4b0e      	ldr	r3, [pc, #56]	; (1d84 <usb_d_init+0x48>)
    1d4c:	480e      	ldr	r0, [pc, #56]	; (1d88 <usb_d_init+0x4c>)
    1d4e:	4798      	blx	r3
    1d50:	4b0d      	ldr	r3, [pc, #52]	; (1d88 <usb_d_init+0x4c>)
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    1d52:	4a0e      	ldr	r2, [pc, #56]	; (1d8c <usb_d_init+0x50>)
    1d54:	f103 0180 	add.w	r1, r3, #128	; 0x80
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    1d58:	20ff      	movs	r0, #255	; 0xff
    1d5a:	7058      	strb	r0, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    1d5c:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    1d5e:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    1d60:	61da      	str	r2, [r3, #28]
    1d62:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    1d64:	428b      	cmp	r3, r1
    1d66:	d1f8      	bne.n	1d5a <usb_d_init+0x1e>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    1d68:	4c09      	ldr	r4, [pc, #36]	; (1d90 <usb_d_init+0x54>)
    1d6a:	490a      	ldr	r1, [pc, #40]	; (1d94 <usb_d_init+0x58>)
    1d6c:	2000      	movs	r0, #0
    1d6e:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    1d70:	4909      	ldr	r1, [pc, #36]	; (1d98 <usb_d_init+0x5c>)
    1d72:	2001      	movs	r0, #1
    1d74:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    1d76:	2002      	movs	r0, #2
    1d78:	4908      	ldr	r1, [pc, #32]	; (1d9c <usb_d_init+0x60>)
    1d7a:	47a0      	blx	r4
	return ERR_NONE;
    1d7c:	2000      	movs	r0, #0
}
    1d7e:	bd10      	pop	{r4, pc}
    1d80:	00003bcd 	.word	0x00003bcd
    1d84:	0000adc1 	.word	0x0000adc1
    1d88:	20000334 	.word	0x20000334
    1d8c:	00001b75 	.word	0x00001b75
    1d90:	00004229 	.word	0x00004229
    1d94:	00001cb1 	.word	0x00001cb1
    1d98:	00001b79 	.word	0x00001b79
    1d9c:	00001ba9 	.word	0x00001ba9

00001da0 <usb_d_register_callback>:
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    1da0:	4b00      	ldr	r3, [pc, #0]	; (1da4 <usb_d_register_callback+0x4>)
    1da2:	4718      	bx	r3
    1da4:	00004205 	.word	0x00004205

00001da8 <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
	return _usb_d_dev_enable();
    1da8:	4b00      	ldr	r3, [pc, #0]	; (1dac <usb_d_enable+0x4>)
    1daa:	4718      	bx	r3
    1dac:	00003c99 	.word	0x00003c99

00001db0 <usb_d_attach>:
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
	_usb_d_dev_attach();
    1db0:	4b00      	ldr	r3, [pc, #0]	; (1db4 <usb_d_attach+0x4>)
    1db2:	4718      	bx	r3
    1db4:	00003ce5 	.word	0x00003ce5

00001db8 <usb_d_set_address>:
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
	_usb_d_dev_set_address(addr);
    1db8:	4b00      	ldr	r3, [pc, #0]	; (1dbc <usb_d_set_address+0x4>)
    1dba:	4718      	bx	r3
    1dbc:	00003cf7 	.word	0x00003cf7

00001dc0 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    1dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    1dc2:	4c10      	ldr	r4, [pc, #64]	; (1e04 <usb_d_ep_init+0x44>)
{
    1dc4:	4606      	mov	r6, r0
    1dc6:	460d      	mov	r5, r1
    1dc8:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    1dca:	47a0      	blx	r4
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    1dcc:	2800      	cmp	r0, #0
    1dce:	da13      	bge.n	1df8 <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    1dd0:	20ff      	movs	r0, #255	; 0xff
    1dd2:	47a0      	blx	r4
		if (ep_index < 0) {
    1dd4:	1e04      	subs	r4, r0, #0
    1dd6:	db12      	blt.n	1dfe <usb_d_ep_init+0x3e>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    1dd8:	463a      	mov	r2, r7
    1dda:	4629      	mov	r1, r5
    1ddc:	4630      	mov	r0, r6
    1dde:	4b0a      	ldr	r3, [pc, #40]	; (1e08 <usb_d_ep_init+0x48>)
    1de0:	4798      	blx	r3
	if (rc < 0) {
    1de2:	2800      	cmp	r0, #0
    1de4:	db0d      	blt.n	1e02 <usb_d_ep_init+0x42>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    1de6:	4b09      	ldr	r3, [pc, #36]	; (1e0c <usb_d_ep_init+0x4c>)
    1de8:	0160      	lsls	r0, r4, #5
    1dea:	181a      	adds	r2, r3, r0
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    1dec:	f005 0503 	and.w	r5, r5, #3
    1df0:	541d      	strb	r5, [r3, r0]
	ept->xfer.hdr.ep   = ep;
    1df2:	7056      	strb	r6, [r2, #1]
	return ERR_NONE;
    1df4:	2000      	movs	r0, #0
    1df6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    1df8:	f06f 0013 	mvn.w	r0, #19
    1dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -USB_ERR_ALLOC_FAIL;
    1dfe:	f06f 0014 	mvn.w	r0, #20
}
    1e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1e04:	00001b45 	.word	0x00001b45
    1e08:	00003d05 	.word	0x00003d05
    1e0c:	20000334 	.word	0x20000334

00001e10 <usb_d_ep0_init>:
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    1e10:	2100      	movs	r1, #0
    1e12:	4602      	mov	r2, r0
    1e14:	4b01      	ldr	r3, [pc, #4]	; (1e1c <usb_d_ep0_init+0xc>)
    1e16:	4608      	mov	r0, r1
    1e18:	4718      	bx	r3
    1e1a:	bf00      	nop
    1e1c:	00001dc1 	.word	0x00001dc1

00001e20 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    1e20:	b538      	push	{r3, r4, r5, lr}
	int8_t           ep_index = _usb_d_find_ep(ep);
    1e22:	4b07      	ldr	r3, [pc, #28]	; (1e40 <usb_d_ep_deinit+0x20>)
{
    1e24:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1e26:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    1e28:	1e04      	subs	r4, r0, #0
    1e2a:	db07      	blt.n	1e3c <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    1e2c:	4628      	mov	r0, r5
    1e2e:	4b05      	ldr	r3, [pc, #20]	; (1e44 <usb_d_ep_deinit+0x24>)
    1e30:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    1e32:	4805      	ldr	r0, [pc, #20]	; (1e48 <usb_d_ep_deinit+0x28>)
    1e34:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    1e38:	23ff      	movs	r3, #255	; 0xff
    1e3a:	7043      	strb	r3, [r0, #1]
    1e3c:	bd38      	pop	{r3, r4, r5, pc}
    1e3e:	bf00      	nop
    1e40:	00001b45 	.word	0x00001b45
    1e44:	00003dc5 	.word	0x00003dc5
    1e48:	20000334 	.word	0x20000334

00001e4c <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
    1e4c:	b538      	push	{r3, r4, r5, lr}
	int8_t           ep_index = _usb_d_find_ep(ep);
    1e4e:	4b0c      	ldr	r3, [pc, #48]	; (1e80 <usb_d_ep_enable+0x34>)
{
    1e50:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1e52:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    1e54:	2800      	cmp	r0, #0
    1e56:	db10      	blt.n	1e7a <usb_d_ep_enable+0x2e>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    1e58:	0140      	lsls	r0, r0, #5
    1e5a:	4c0a      	ldr	r4, [pc, #40]	; (1e84 <usb_d_ep_enable+0x38>)
    1e5c:	5c23      	ldrb	r3, [r4, r0]
    1e5e:	4404      	add	r4, r0
    1e60:	2b00      	cmp	r3, #0
    1e62:	bf0c      	ite	eq
    1e64:	2302      	moveq	r3, #2
    1e66:	2301      	movne	r3, #1
    1e68:	70a3      	strb	r3, [r4, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    1e6a:	4628      	mov	r0, r5
    1e6c:	4b06      	ldr	r3, [pc, #24]	; (1e88 <usb_d_ep_enable+0x3c>)
    1e6e:	4798      	blx	r3
	if (rc < 0) {
    1e70:	2800      	cmp	r0, #0
    1e72:	da04      	bge.n	1e7e <usb_d_ep_enable+0x32>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    1e74:	2300      	movs	r3, #0
    1e76:	70a3      	strb	r3, [r4, #2]
    1e78:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
    1e7a:	f06f 0011 	mvn.w	r0, #17
	}
	return rc;
}
    1e7e:	bd38      	pop	{r3, r4, r5, pc}
    1e80:	00001b45 	.word	0x00001b45
    1e84:	20000334 	.word	0x20000334
    1e88:	00003e49 	.word	0x00003e49

00001e8c <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    1e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    1e90:	f890 a008 	ldrb.w	sl, [r0, #8]
    1e94:	4b36      	ldr	r3, [pc, #216]	; (1f70 <usb_d_ep_transfer+0xe4>)
{
    1e96:	4607      	mov	r7, r0
    1e98:	b087      	sub	sp, #28
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    1e9a:	4650      	mov	r0, sl
    1e9c:	4798      	blx	r3
	uint32_t              len = xfer->size;
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    1e9e:	f1b0 0800 	subs.w	r8, r0, #0
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    1ea2:	f897 9009 	ldrb.w	r9, [r7, #9]
	uint32_t              len = xfer->size;
    1ea6:	687e      	ldr	r6, [r7, #4]
	if (ep_index < 0) {
    1ea8:	db5d      	blt.n	1f66 <usb_d_ep_transfer+0xda>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
	state = ept->xfer.hdr.state;
    1eaa:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 1f80 <usb_d_ep_transfer+0xf4>
	atomic_enter_critical(&flags);
    1eae:	4b31      	ldr	r3, [pc, #196]	; (1f74 <usb_d_ep_transfer+0xe8>)
	state = ept->xfer.hdr.state;
    1eb0:	ea4f 1848 	mov.w	r8, r8, lsl #5
    1eb4:	eb0b 0508 	add.w	r5, fp, r8
	atomic_enter_critical(&flags);
    1eb8:	a802      	add	r0, sp, #8
    1eba:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    1ebc:	78ab      	ldrb	r3, [r5, #2]
    1ebe:	f88d 3007 	strb.w	r3, [sp, #7]
	if (state == USB_EP_S_IDLE) {
    1ec2:	f89d 0007 	ldrb.w	r0, [sp, #7]
    1ec6:	4b2c      	ldr	r3, [pc, #176]	; (1f78 <usb_d_ep_transfer+0xec>)
    1ec8:	b2c4      	uxtb	r4, r0
    1eca:	2c01      	cmp	r4, #1
    1ecc:	d11c      	bne.n	1f08 <usb_d_ep_transfer+0x7c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    1ece:	2203      	movs	r2, #3
    1ed0:	70aa      	strb	r2, [r5, #2]
		atomic_leave_critical(&flags);
    1ed2:	a802      	add	r0, sp, #8
    1ed4:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1ed6:	f81b 3008 	ldrb.w	r3, [fp, r8]
    1eda:	b34b      	cbz	r3, 1f30 <usb_d_ep_transfer+0xa4>
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    1edc:	f119 0300 	adds.w	r3, r9, #0
    1ee0:	ea4f 14da 	mov.w	r4, sl, lsr #7
    1ee4:	bf18      	it	ne
    1ee6:	2301      	movne	r3, #1
	struct usb_d_transfer trans
    1ee8:	6839      	ldr	r1, [r7, #0]
				zlp = false;
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1eea:	7a3a      	ldrb	r2, [r7, #8]
	struct usb_d_transfer trans
    1eec:	9103      	str	r1, [sp, #12]
    1eee:	9604      	str	r6, [sp, #16]
    1ef0:	2c00      	cmp	r4, #0
    1ef2:	d035      	beq.n	1f60 <usb_d_ep_transfer+0xd4>
    1ef4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    1ef8:	f88d 3015 	strb.w	r3, [sp, #21]
	return _usb_d_dev_ep_trans(&trans);
    1efc:	a803      	add	r0, sp, #12
    1efe:	4b1f      	ldr	r3, [pc, #124]	; (1f7c <usb_d_ep_transfer+0xf0>)
	struct usb_d_transfer trans
    1f00:	f88d 2014 	strb.w	r2, [sp, #20]
	return _usb_d_dev_ep_trans(&trans);
    1f04:	4798      	blx	r3
	return rc;
    1f06:	e00d      	b.n	1f24 <usb_d_ep_transfer+0x98>
		atomic_leave_critical(&flags);
    1f08:	a802      	add	r0, sp, #8
    1f0a:	4798      	blx	r3
		switch (state) {
    1f0c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1f10:	b2db      	uxtb	r3, r3
    1f12:	2b05      	cmp	r3, #5
    1f14:	d02a      	beq.n	1f6c <usb_d_ep_transfer+0xe0>
    1f16:	2b06      	cmp	r3, #6
    1f18:	d007      	beq.n	1f2a <usb_d_ep_transfer+0x9e>
			return USB_BUSY;
    1f1a:	2b00      	cmp	r3, #0
    1f1c:	bf0c      	ite	eq
    1f1e:	f06f 0012 	mvneq.w	r0, #18
    1f22:	2001      	movne	r0, #1
}
    1f24:	b007      	add	sp, #28
    1f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -USB_ERROR;
    1f2a:	f06f 000f 	mvn.w	r0, #15
    1f2e:	e7f9      	b.n	1f24 <usb_d_ep_transfer+0x98>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    1f30:	7ce9      	ldrb	r1, [r5, #19]
    1f32:	7caa      	ldrb	r2, [r5, #18]
    1f34:	eb02 2201 	add.w	r2, r2, r1, lsl #8
    1f38:	b292      	uxth	r2, r2
		if (req_len == 0) {
    1f3a:	b92a      	cbnz	r2, 1f48 <usb_d_ep_transfer+0xbc>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    1f3c:	2304      	movs	r3, #4
    1f3e:	70ab      	strb	r3, [r5, #2]
			len                 = 0;
    1f40:	4616      	mov	r6, r2
			zlp                 = true;
    1f42:	4623      	mov	r3, r4
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    1f44:	461c      	mov	r4, r3
    1f46:	e7cf      	b.n	1ee8 <usb_d_ep_transfer+0x5c>
			if (dir) {
    1f48:	f995 100c 	ldrsb.w	r1, [r5, #12]
    1f4c:	4296      	cmp	r6, r2
    1f4e:	bf28      	it	cs
    1f50:	4616      	movcs	r6, r2
    1f52:	2900      	cmp	r1, #0
    1f54:	daf6      	bge.n	1f44 <usb_d_ep_transfer+0xb8>
				zlp = (req_len > len);
    1f56:	42b2      	cmp	r2, r6
    1f58:	bf94      	ite	ls
    1f5a:	2300      	movls	r3, #0
    1f5c:	2301      	movhi	r3, #1
    1f5e:	e7c3      	b.n	1ee8 <usb_d_ep_transfer+0x5c>
	struct usb_d_transfer trans
    1f60:	f002 020f 	and.w	r2, r2, #15
    1f64:	e7c8      	b.n	1ef8 <usb_d_ep_transfer+0x6c>
		return -USB_ERR_PARAM;
    1f66:	f06f 0011 	mvn.w	r0, #17
    1f6a:	e7db      	b.n	1f24 <usb_d_ep_transfer+0x98>
			return USB_HALTED;
    1f6c:	2002      	movs	r0, #2
    1f6e:	e7d9      	b.n	1f24 <usb_d_ep_transfer+0x98>
    1f70:	00001b45 	.word	0x00001b45
    1f74:	000011cd 	.word	0x000011cd
    1f78:	000011db 	.word	0x000011db
    1f7c:	000040fd 	.word	0x000040fd
    1f80:	20000334 	.word	0x20000334

00001f84 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    1f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1f88:	4605      	mov	r5, r0
	if (ctrl == USB_EP_HALT_CLR) {
    1f8a:	460c      	mov	r4, r1
    1f8c:	b9d9      	cbnz	r1, 1fc6 <usb_d_ep_halt+0x42>
	int8_t           ep_index = _usb_d_find_ep(ep);
    1f8e:	4b13      	ldr	r3, [pc, #76]	; (1fdc <usb_d_ep_halt+0x58>)
    1f90:	4798      	blx	r3
	if (ep_index < 0) {
    1f92:	1e07      	subs	r7, r0, #0
    1f94:	db1e      	blt.n	1fd4 <usb_d_ep_halt+0x50>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    1f96:	2102      	movs	r1, #2
    1f98:	4628      	mov	r0, r5
    1f9a:	4e11      	ldr	r6, [pc, #68]	; (1fe0 <usb_d_ep_halt+0x5c>)
    1f9c:	47b0      	blx	r6
    1f9e:	b1d8      	cbz	r0, 1fd8 <usb_d_ep_halt+0x54>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1fa0:	4621      	mov	r1, r4
    1fa2:	4628      	mov	r0, r5
    1fa4:	47b0      	blx	r6
		if (rc < 0) {
    1fa6:	2800      	cmp	r0, #0
    1fa8:	db16      	blt.n	1fd8 <usb_d_ep_halt+0x54>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    1faa:	480e      	ldr	r0, [pc, #56]	; (1fe4 <usb_d_ep_halt+0x60>)
    1fac:	eb00 1047 	add.w	r0, r0, r7, lsl #5
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    1fb0:	2103      	movs	r1, #3
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    1fb2:	2301      	movs	r3, #1
    1fb4:	7083      	strb	r3, [r0, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    1fb6:	70c1      	strb	r1, [r0, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    1fb8:	69c3      	ldr	r3, [r0, #28]
    1fba:	4622      	mov	r2, r4
    1fbc:	4628      	mov	r0, r5
    1fbe:	4798      	blx	r3
	return ERR_NONE;
    1fc0:	4620      	mov	r0, r4
    1fc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    1fc6:	2901      	cmp	r1, #1
    1fc8:	4b05      	ldr	r3, [pc, #20]	; (1fe0 <usb_d_ep_halt+0x5c>)
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    1fca:	bf18      	it	ne
    1fcc:	2102      	movne	r1, #2
	}
}
    1fce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    1fd2:	4718      	bx	r3
		return -USB_ERR_PARAM;
    1fd4:	f06f 0011 	mvn.w	r0, #17
}
    1fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1fdc:	00001b45 	.word	0x00001b45
    1fe0:	00003fc5 	.word	0x00003fc5
    1fe4:	20000334 	.word	0x20000334

00001fe8 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    1fe8:	b538      	push	{r3, r4, r5, lr}
	int8_t           ep_index = _usb_d_find_ep(ep);
    1fea:	4b0f      	ldr	r3, [pc, #60]	; (2028 <usb_d_ep_register_callback+0x40>)
{
    1fec:	4614      	mov	r4, r2
    1fee:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    1ff0:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    1ff2:	4a0e      	ldr	r2, [pc, #56]	; (202c <usb_d_ep_register_callback+0x44>)
    1ff4:	2c00      	cmp	r4, #0
    1ff6:	bf08      	it	eq
    1ff8:	4614      	moveq	r4, r2
	if (ep_index < 0) {
    1ffa:	2800      	cmp	r0, #0
    1ffc:	db13      	blt.n	2026 <usb_d_ep_register_callback+0x3e>
		return;
	}
	switch (type) {
    1ffe:	2d01      	cmp	r5, #1
    2000:	d008      	beq.n	2014 <usb_d_ep_register_callback+0x2c>
    2002:	d302      	bcc.n	200a <usb_d_ep_register_callback+0x22>
    2004:	2d02      	cmp	r5, #2
    2006:	d00a      	beq.n	201e <usb_d_ep_register_callback+0x36>
    2008:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    200a:	4b09      	ldr	r3, [pc, #36]	; (2030 <usb_d_ep_register_callback+0x48>)
    200c:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    2010:	6144      	str	r4, [r0, #20]
		break;
    2012:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    2014:	4b06      	ldr	r3, [pc, #24]	; (2030 <usb_d_ep_register_callback+0x48>)
    2016:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    201a:	6184      	str	r4, [r0, #24]
		break;
    201c:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    201e:	4b04      	ldr	r3, [pc, #16]	; (2030 <usb_d_ep_register_callback+0x48>)
    2020:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    2024:	61c4      	str	r4, [r0, #28]
    2026:	bd38      	pop	{r3, r4, r5, pc}
    2028:	00001b45 	.word	0x00001b45
    202c:	00001b75 	.word	0x00001b75
    2030:	20000334 	.word	0x20000334

00002034 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    2034:	b900      	cbnz	r0, 2038 <assert+0x4>
		__asm("BKPT #0");
    2036:	be00      	bkpt	0x0000
    2038:	4770      	bx	lr

0000203a <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    203a:	6800      	ldr	r0, [r0, #0]
    203c:	b900      	cbnz	r0, 2040 <is_list_element+0x6>
    203e:	4770      	bx	lr
		if (it == element) {
    2040:	4288      	cmp	r0, r1
    2042:	d1fa      	bne.n	203a <is_list_element>
			return true;
    2044:	2001      	movs	r0, #1
		}
	}

	return false;
}
    2046:	4770      	bx	lr

00002048 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    2048:	b538      	push	{r3, r4, r5, lr}
	ASSERT(!is_list_element(list, element));
    204a:	4b07      	ldr	r3, [pc, #28]	; (2068 <list_insert_as_head+0x20>)
{
    204c:	460d      	mov	r5, r1
    204e:	4604      	mov	r4, r0
	ASSERT(!is_list_element(list, element));
    2050:	4798      	blx	r3
    2052:	f080 0001 	eor.w	r0, r0, #1
    2056:	4b05      	ldr	r3, [pc, #20]	; (206c <list_insert_as_head+0x24>)
    2058:	4905      	ldr	r1, [pc, #20]	; (2070 <list_insert_as_head+0x28>)
    205a:	2239      	movs	r2, #57	; 0x39
    205c:	b2c0      	uxtb	r0, r0
    205e:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    2060:	6823      	ldr	r3, [r4, #0]
    2062:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    2064:	6025      	str	r5, [r4, #0]
    2066:	bd38      	pop	{r3, r4, r5, pc}
    2068:	0000203b 	.word	0x0000203b
    206c:	00002035 	.word	0x00002035
    2070:	0000bf9f 	.word	0x0000bf9f

00002074 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    2074:	6803      	ldr	r3, [r0, #0]
    2076:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    2078:	6001      	str	r1, [r0, #0]
    207a:	4770      	bx	lr

0000207c <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    207c:	b570      	push	{r4, r5, r6, lr}
	struct list_element *it = list->head;

	ASSERT(!is_list_element(list, element));
    207e:	4b0b      	ldr	r3, [pc, #44]	; (20ac <list_insert_at_end+0x30>)
	struct list_element *it = list->head;
    2080:	6805      	ldr	r5, [r0, #0]
{
    2082:	4606      	mov	r6, r0
    2084:	460c      	mov	r4, r1
	ASSERT(!is_list_element(list, element));
    2086:	4798      	blx	r3
    2088:	f080 0001 	eor.w	r0, r0, #1
    208c:	4b08      	ldr	r3, [pc, #32]	; (20b0 <list_insert_at_end+0x34>)
    208e:	4909      	ldr	r1, [pc, #36]	; (20b4 <list_insert_at_end+0x38>)
    2090:	224f      	movs	r2, #79	; 0x4f
    2092:	b2c0      	uxtb	r0, r0
    2094:	4798      	blx	r3

	if (!list->head) {
    2096:	6833      	ldr	r3, [r6, #0]
    2098:	b91b      	cbnz	r3, 20a2 <list_insert_at_end+0x26>
		list->head                             = (struct list_element *)element;
    209a:	6034      	str	r4, [r6, #0]

	while (it->next) {
		it = it->next;
	}
	it->next                               = (struct list_element *)element;
	((struct list_element *)element)->next = NULL;
    209c:	6023      	str	r3, [r4, #0]
    209e:	bd70      	pop	{r4, r5, r6, pc}
    20a0:	461d      	mov	r5, r3
	while (it->next) {
    20a2:	682b      	ldr	r3, [r5, #0]
    20a4:	2b00      	cmp	r3, #0
    20a6:	d1fb      	bne.n	20a0 <list_insert_at_end+0x24>
	it->next                               = (struct list_element *)element;
    20a8:	602c      	str	r4, [r5, #0]
    20aa:	e7f7      	b.n	209c <list_insert_at_end+0x20>
    20ac:	0000203b 	.word	0x0000203b
    20b0:	00002035 	.word	0x00002035
    20b4:	0000bf9f 	.word	0x0000bf9f

000020b8 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    20b8:	6803      	ldr	r3, [r0, #0]
    20ba:	b10b      	cbz	r3, 20c0 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    20bc:	681a      	ldr	r2, [r3, #0]
    20be:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    20c0:	4618      	mov	r0, r3
    20c2:	4770      	bx	lr

000020c4 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    20c4:	b570      	push	{r4, r5, r6, lr}
    20c6:	460e      	mov	r6, r1
    20c8:	4614      	mov	r4, r2
	ASSERT(rb && buf && size);
    20ca:	4605      	mov	r5, r0
    20cc:	b198      	cbz	r0, 20f6 <ringbuffer_init+0x32>
    20ce:	b199      	cbz	r1, 20f8 <ringbuffer_init+0x34>
    20d0:	1c10      	adds	r0, r2, #0
    20d2:	bf18      	it	ne
    20d4:	2001      	movne	r0, #1
    20d6:	2228      	movs	r2, #40	; 0x28
    20d8:	4908      	ldr	r1, [pc, #32]	; (20fc <ringbuffer_init+0x38>)
    20da:	4b09      	ldr	r3, [pc, #36]	; (2100 <ringbuffer_init+0x3c>)
    20dc:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    20de:	1e63      	subs	r3, r4, #1
    20e0:	ea14 0003 	ands.w	r0, r4, r3
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    20e4:	bf01      	itttt	eq
    20e6:	606b      	streq	r3, [r5, #4]
	rb->read_index  = 0;
    20e8:	60a8      	streq	r0, [r5, #8]
	rb->write_index = rb->read_index;
    20ea:	60e8      	streq	r0, [r5, #12]
	rb->buf         = (uint8_t *)buf;
    20ec:	602e      	streq	r6, [r5, #0]
		return ERR_INVALID_ARG;
    20ee:	bf18      	it	ne
    20f0:	f06f 000c 	mvnne.w	r0, #12

	return ERR_NONE;
}
    20f4:	bd70      	pop	{r4, r5, r6, pc}
    20f6:	e7ee      	b.n	20d6 <ringbuffer_init+0x12>
	ASSERT(rb && buf && size);
    20f8:	4608      	mov	r0, r1
    20fa:	e7ec      	b.n	20d6 <ringbuffer_init+0x12>
    20fc:	0000bfbd 	.word	0x0000bfbd
    2100:	00002035 	.word	0x00002035

00002104 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    2104:	b538      	push	{r3, r4, r5, lr}
    2106:	460d      	mov	r5, r1
	ASSERT(rb && data);
    2108:	4604      	mov	r4, r0
    210a:	b1a0      	cbz	r0, 2136 <ringbuffer_get+0x32>
    210c:	1c08      	adds	r0, r1, #0
    210e:	bf18      	it	ne
    2110:	2001      	movne	r0, #1
    2112:	2240      	movs	r2, #64	; 0x40
    2114:	4b0a      	ldr	r3, [pc, #40]	; (2140 <ringbuffer_get+0x3c>)
    2116:	490b      	ldr	r1, [pc, #44]	; (2144 <ringbuffer_get+0x40>)
    2118:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    211a:	68a3      	ldr	r3, [r4, #8]
    211c:	68e2      	ldr	r2, [r4, #12]
    211e:	429a      	cmp	r2, r3
    2120:	d00a      	beq.n	2138 <ringbuffer_get+0x34>
		*data = rb->buf[rb->read_index & rb->size];
    2122:	6862      	ldr	r2, [r4, #4]
    2124:	4013      	ands	r3, r2
    2126:	6822      	ldr	r2, [r4, #0]
    2128:	5cd3      	ldrb	r3, [r2, r3]
    212a:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    212c:	68a3      	ldr	r3, [r4, #8]
    212e:	3301      	adds	r3, #1
    2130:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    2132:	2000      	movs	r0, #0
    2134:	bd38      	pop	{r3, r4, r5, pc}
    2136:	e7ec      	b.n	2112 <ringbuffer_get+0xe>
	}

	return ERR_NOT_FOUND;
    2138:	f06f 0009 	mvn.w	r0, #9
}
    213c:	bd38      	pop	{r3, r4, r5, pc}
    213e:	bf00      	nop
    2140:	00002035 	.word	0x00002035
    2144:	0000bfbd 	.word	0x0000bfbd

00002148 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    2148:	b538      	push	{r3, r4, r5, lr}
	ASSERT(rb);
    214a:	4604      	mov	r4, r0
    214c:	3000      	adds	r0, #0
    214e:	bf18      	it	ne
    2150:	2001      	movne	r0, #1
{
    2152:	460d      	mov	r5, r1
	ASSERT(rb);
    2154:	2251      	movs	r2, #81	; 0x51
    2156:	490b      	ldr	r1, [pc, #44]	; (2184 <ringbuffer_put+0x3c>)
    2158:	4b0b      	ldr	r3, [pc, #44]	; (2188 <ringbuffer_put+0x40>)
    215a:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    215c:	68e3      	ldr	r3, [r4, #12]
    215e:	6862      	ldr	r2, [r4, #4]
    2160:	4013      	ands	r3, r2
    2162:	6822      	ldr	r2, [r4, #0]
    2164:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    2166:	68e3      	ldr	r3, [r4, #12]
    2168:	68a1      	ldr	r1, [r4, #8]
    216a:	6862      	ldr	r2, [r4, #4]
    216c:	1a59      	subs	r1, r3, r1
    216e:	4291      	cmp	r1, r2
		rb->read_index = rb->write_index - rb->size;
    2170:	bf88      	it	hi
    2172:	1a9a      	subhi	r2, r3, r2
	}

	rb->write_index++;
    2174:	f103 0301 	add.w	r3, r3, #1
		rb->read_index = rb->write_index - rb->size;
    2178:	bf88      	it	hi
    217a:	60a2      	strhi	r2, [r4, #8]
	rb->write_index++;
    217c:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    217e:	2000      	movs	r0, #0
    2180:	bd38      	pop	{r3, r4, r5, pc}
    2182:	bf00      	nop
    2184:	0000bfbd 	.word	0x0000bfbd
    2188:	00002035 	.word	0x00002035

0000218c <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    218c:	b510      	push	{r4, lr}
	ASSERT(rb);
    218e:	4604      	mov	r4, r0
    2190:	3000      	adds	r0, #0
    2192:	bf18      	it	ne
    2194:	2001      	movne	r0, #1
    2196:	2267      	movs	r2, #103	; 0x67
    2198:	4903      	ldr	r1, [pc, #12]	; (21a8 <ringbuffer_num+0x1c>)
    219a:	4b04      	ldr	r3, [pc, #16]	; (21ac <ringbuffer_num+0x20>)
    219c:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    219e:	68e0      	ldr	r0, [r4, #12]
    21a0:	68a3      	ldr	r3, [r4, #8]
}
    21a2:	1ac0      	subs	r0, r0, r3
    21a4:	bd10      	pop	{r4, pc}
    21a6:	bf00      	nop
    21a8:	0000bfbd 	.word	0x0000bfbd
    21ac:	00002035 	.word	0x00002035

000021b0 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    21b0:	4b04      	ldr	r3, [pc, #16]	; (21c4 <_sbrk+0x14>)
    21b2:	6819      	ldr	r1, [r3, #0]
{
    21b4:	4602      	mov	r2, r0
	if (heap == NULL) {
    21b6:	b909      	cbnz	r1, 21bc <_sbrk+0xc>
		heap = (unsigned char *)&_end;
    21b8:	4903      	ldr	r1, [pc, #12]	; (21c8 <_sbrk+0x18>)
    21ba:	6019      	str	r1, [r3, #0]
	}
	prev_heap = heap;
    21bc:	6818      	ldr	r0, [r3, #0]

	heap += incr;
    21be:	4402      	add	r2, r0
    21c0:	601a      	str	r2, [r3, #0]

	return (caddr_t)prev_heap;
}
    21c2:	4770      	bx	lr
    21c4:	200003b4 	.word	0x200003b4
    21c8:	200150b8 	.word	0x200150b8

000021cc <hri_adc_wait_for_sync>:
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    21cc:	6b03      	ldr	r3, [r0, #48]	; 0x30
    21ce:	420b      	tst	r3, r1
    21d0:	d1fc      	bne.n	21cc <hri_adc_wait_for_sync>
}
    21d2:	4770      	bx	lr

000021d4 <hri_adc_set_CTRLA_ENABLE_bit>:
{
    21d4:	b508      	push	{r3, lr}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
    21d6:	2103      	movs	r1, #3
    21d8:	4b03      	ldr	r3, [pc, #12]	; (21e8 <hri_adc_set_CTRLA_ENABLE_bit+0x14>)
    21da:	4798      	blx	r3
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
    21dc:	8803      	ldrh	r3, [r0, #0]
    21de:	b29b      	uxth	r3, r3
    21e0:	f043 0302 	orr.w	r3, r3, #2
    21e4:	8003      	strh	r3, [r0, #0]
    21e6:	bd08      	pop	{r3, pc}
    21e8:	000021cd 	.word	0x000021cd

000021ec <hri_adc_clear_CTRLA_ENABLE_bit>:
{
    21ec:	b508      	push	{r3, lr}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
    21ee:	2103      	movs	r1, #3
    21f0:	4b04      	ldr	r3, [pc, #16]	; (2204 <hri_adc_clear_CTRLA_ENABLE_bit+0x18>)
    21f2:	4798      	blx	r3
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    21f4:	8803      	ldrh	r3, [r0, #0]
    21f6:	f023 0302 	bic.w	r3, r3, #2
    21fa:	041b      	lsls	r3, r3, #16
    21fc:	0c1b      	lsrs	r3, r3, #16
    21fe:	8003      	strh	r3, [r0, #0]
    2200:	bd08      	pop	{r3, pc}
    2202:	bf00      	nop
    2204:	000021cd 	.word	0x000021cd

00002208 <_adc_init>:
 *
 * \param[in] hw The pointer to hardware instance
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{
    2208:	b538      	push	{r3, r4, r5, lr}
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
    220a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    220c:	4d17      	ldr	r5, [pc, #92]	; (226c <_adc_init+0x64>)

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
    220e:	f013 0f01 	tst.w	r3, #1
{
    2212:	4602      	mov	r2, r0
    2214:	460c      	mov	r4, r1
	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
    2216:	d108      	bne.n	222a <_adc_init+0x22>
	tmp = ((Adc *)hw)->CTRLA.reg;
    2218:	8803      	ldrh	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    221a:	079b      	lsls	r3, r3, #30
    221c:	d503      	bpl.n	2226 <_adc_init+0x1e>
			hri_adc_clear_CTRLA_ENABLE_bit(hw);
    221e:	4b14      	ldr	r3, [pc, #80]	; (2270 <_adc_init+0x68>)
    2220:	4798      	blx	r3
			hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_ENABLE);
    2222:	2102      	movs	r1, #2
    2224:	47a8      	blx	r5
	((Adc *)hw)->CTRLA.reg = data;
    2226:	2301      	movs	r3, #1
    2228:	8013      	strh	r3, [r2, #0]
		}
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);
    222a:	4610      	mov	r0, r2
    222c:	2101      	movs	r1, #1
    222e:	47a8      	blx	r5

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    2230:	4910      	ldr	r1, [pc, #64]	; (2274 <_adc_init+0x6c>)
    2232:	2316      	movs	r3, #22
    2234:	fb03 1104 	mla	r1, r3, r4, r1
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);

	return ERR_NONE;
}
    2238:	2000      	movs	r0, #0
	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    223a:	888b      	ldrh	r3, [r1, #4]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    223c:	80d3      	strh	r3, [r2, #6]
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    223e:	798b      	ldrb	r3, [r1, #6]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    2240:	7213      	strb	r3, [r2, #8]
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    2242:	79cb      	ldrb	r3, [r1, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    2244:	7093      	strb	r3, [r2, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    2246:	890b      	ldrh	r3, [r1, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    2248:	8093      	strh	r3, [r2, #4]
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    224a:	7a8b      	ldrb	r3, [r1, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    224c:	7293      	strb	r3, [r2, #10]
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    224e:	7acb      	ldrb	r3, [r1, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    2250:	72d3      	strb	r3, [r2, #11]
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    2252:	898b      	ldrh	r3, [r1, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    2254:	8193      	strh	r3, [r2, #12]
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    2256:	89cb      	ldrh	r3, [r1, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    2258:	81d3      	strh	r3, [r2, #14]
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    225a:	8a0b      	ldrh	r3, [r1, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    225c:	8213      	strh	r3, [r2, #16]
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    225e:	8a4b      	ldrh	r3, [r1, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    2260:	8253      	strh	r3, [r2, #18]
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    2262:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    2264:	70d3      	strb	r3, [r2, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    2266:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    2268:	8013      	strh	r3, [r2, #0]
}
    226a:	bd38      	pop	{r3, r4, r5, pc}
    226c:	000021cd 	.word	0x000021cd
    2270:	000021ed 	.word	0x000021ed
    2274:	0000bfe2 	.word	0x0000bfe2

00002278 <_adc_get_regs>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    2278:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    227c:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
		if (_adcs[i].number == n) {
    2280:	f3c0 2087 	ubfx	r0, r0, #10, #8
{
    2284:	b508      	push	{r3, lr}
		if (_adcs[i].number == n) {
    2286:	b120      	cbz	r0, 2292 <_adc_get_regs+0x1a>
	ASSERT(false);
    2288:	2288      	movs	r2, #136	; 0x88
    228a:	4903      	ldr	r1, [pc, #12]	; (2298 <_adc_get_regs+0x20>)
    228c:	4b03      	ldr	r3, [pc, #12]	; (229c <_adc_get_regs+0x24>)
    228e:	2000      	movs	r0, #0
    2290:	4798      	blx	r3
}
    2292:	2000      	movs	r0, #0
    2294:	bd08      	pop	{r3, pc}
    2296:	bf00      	nop
    2298:	0000bff8 	.word	0x0000bff8
    229c:	00002035 	.word	0x00002035

000022a0 <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
    22a0:	b570      	push	{r4, r5, r6, lr}
	ASSERT(device);
    22a2:	4605      	mov	r5, r0
    22a4:	3000      	adds	r0, #0
{
    22a6:	460c      	mov	r4, r1
	ASSERT(device);
    22a8:	bf18      	it	ne
    22aa:	2001      	movne	r0, #1
    22ac:	4906      	ldr	r1, [pc, #24]	; (22c8 <_adc_sync_init+0x28>)
    22ae:	4b07      	ldr	r3, [pc, #28]	; (22cc <_adc_sync_init+0x2c>)
    22b0:	22ce      	movs	r2, #206	; 0xce
    22b2:	4798      	blx	r3

	device->hw = hw;
    22b4:	602c      	str	r4, [r5, #0]

	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
    22b6:	4620      	mov	r0, r4
    22b8:	4b05      	ldr	r3, [pc, #20]	; (22d0 <_adc_sync_init+0x30>)
    22ba:	4798      	blx	r3
    22bc:	4b05      	ldr	r3, [pc, #20]	; (22d4 <_adc_sync_init+0x34>)
    22be:	4601      	mov	r1, r0
    22c0:	4620      	mov	r0, r4
}
    22c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
    22c6:	4718      	bx	r3
    22c8:	0000bff8 	.word	0x0000bff8
    22cc:	00002035 	.word	0x00002035
    22d0:	00002279 	.word	0x00002279
    22d4:	00002209 	.word	0x00002209

000022d8 <_adc_sync_enable_channel>:
 */
void _adc_sync_enable_channel(struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
    22d8:	6800      	ldr	r0, [r0, #0]
    22da:	4b01      	ldr	r3, [pc, #4]	; (22e0 <_adc_sync_enable_channel+0x8>)
    22dc:	4718      	bx	r3
    22de:	bf00      	nop
    22e0:	000021d5 	.word	0x000021d5

000022e4 <_adc_sync_get_data_size>:
/**
 * \brief Retrieve ADC conversion data size
 */
uint8_t _adc_sync_get_data_size(const struct _adc_sync_device *const device)
{
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    22e4:	6803      	ldr	r3, [r0, #0]
	tmp = ((Adc *)hw)->CTRLB.reg;
    22e6:	88db      	ldrh	r3, [r3, #6]
    22e8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    22ec:	2b03      	cmp	r3, #3
}
    22ee:	bf0c      	ite	eq
    22f0:	2001      	moveq	r0, #1
    22f2:	2002      	movne	r0, #2
    22f4:	4770      	bx	lr

000022f6 <_adc_sync_is_channel_conversion_done>:
 */
bool _adc_sync_is_channel_conversion_done(const struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	return hri_adc_get_interrupt_RESRDY_bit(device->hw);
    22f6:	6803      	ldr	r3, [r0, #0]
	return (((Adc *)hw)->INTFLAG.reg & ADC_INTFLAG_RESRDY) >> ADC_INTFLAG_RESRDY_Pos;
    22f8:	f893 002e 	ldrb.w	r0, [r3, #46]	; 0x2e
}
    22fc:	f000 0001 	and.w	r0, r0, #1
    2300:	4770      	bx	lr
	...

00002304 <_adc_sync_convert>:
/**
 * \brief Make conversion
 */
void _adc_sync_convert(struct _adc_sync_device *const device)
{
	hri_adc_set_SWTRIG_START_bit(device->hw);
    2304:	6802      	ldr	r2, [r0, #0]
{
    2306:	b508      	push	{r3, lr}
}

static inline void hri_adc_set_SWTRIG_START_bit(const void *const hw)
{
	ADC_CRITICAL_SECTION_ENTER();
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_MASK);
    2308:	f640 71ff 	movw	r1, #4095	; 0xfff
    230c:	4b03      	ldr	r3, [pc, #12]	; (231c <_adc_sync_convert+0x18>)
    230e:	4610      	mov	r0, r2
    2310:	4798      	blx	r3
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START;
    2312:	7d13      	ldrb	r3, [r2, #20]
    2314:	f043 0302 	orr.w	r3, r3, #2
    2318:	7513      	strb	r3, [r2, #20]
    231a:	bd08      	pop	{r3, pc}
    231c:	000021cd 	.word	0x000021cd

00002320 <_adc_sync_read_channel_data>:
 */
uint16_t _adc_sync_read_channel_data(const struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	return hri_adc_read_RESULT_reg(device->hw);
    2320:	6803      	ldr	r3, [r0, #0]
	return tmp;
}

static inline hri_adc_result_reg_t hri_adc_read_RESULT_reg(const void *const hw)
{
	return ((Adc *)hw)->RESULT.reg;
    2322:	f8b3 0040 	ldrh.w	r0, [r3, #64]	; 0x40
}
    2326:	b280      	uxth	r0, r0
    2328:	4770      	bx	lr

0000232a <_aes_sync_init>:
}

static inline void hri_aes_write_CTRLA_reg(const void *const hw, hri_aes_ctrla_reg_t data)
{
	AES_CRITICAL_SECTION_ENTER();
	((Aes *)hw)->CTRLA.reg = data;
    232a:	2300      	movs	r3, #0
    232c:	2201      	movs	r2, #1
    232e:	600b      	str	r3, [r1, #0]
    2330:	600a      	str	r2, [r1, #0]
int32_t _aes_sync_init(struct _aes_sync_device *const dev, void *const hw)
{
	hri_aes_write_CTRLA_reg(hw, 0);
	hri_aes_write_CTRLA_reg(hw, AES_CTRLA_SWRST);

	dev->hw = hw;
    2332:	6001      	str	r1, [r0, #0]
}

static inline void hri_aes_write_DBGCTRL_reg(const void *const hw, hri_aes_dbgctrl_reg_t data)
{
	AES_CRITICAL_SECTION_ENTER();
	((Aes *)hw)->DBGCTRL.reg = data;
    2334:	724a      	strb	r2, [r1, #9]

	hri_aes_write_DBGCTRL_reg(dev->hw, _aes.dbgctrl);

	return ERR_NONE;
}
    2336:	4618      	mov	r0, r3
    2338:	4770      	bx	lr

0000233a <_aes_sync_enable>:
    233a:	2000      	movs	r0, #0
    233c:	4770      	bx	lr
	...

00002340 <_aes_sync_set_key>:

/**
 * \brief              Set AES Key (encryption/decryption)
 */
int32_t _aes_sync_set_key(struct _aes_sync_device *const dev, const uint8_t *key, const enum aes_keysize size)
{
    2340:	b508      	push	{r3, lr}

	dev->keysize = size;
    2342:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
	memcpy(dev->key, key, (size + 2) << 3);
    2346:	3202      	adds	r2, #2
    2348:	00d2      	lsls	r2, r2, #3
    234a:	4b02      	ldr	r3, [pc, #8]	; (2354 <_aes_sync_set_key+0x14>)
    234c:	3004      	adds	r0, #4
    234e:	4798      	blx	r3
	return ERR_NONE;
}
    2350:	2000      	movs	r0, #0
    2352:	bd08      	pop	{r3, pc}
    2354:	0000ad77 	.word	0x0000ad77

00002358 <_reset_mcu>:
  __ASM volatile ("dsb 0xF":::"memory");
    2358:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    235c:	4905      	ldr	r1, [pc, #20]	; (2374 <_reset_mcu+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    235e:	4b06      	ldr	r3, [pc, #24]	; (2378 <_reset_mcu+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2360:	68ca      	ldr	r2, [r1, #12]
    2362:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2366:	4313      	orrs	r3, r2
    2368:	60cb      	str	r3, [r1, #12]
    236a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    236e:	bf00      	nop
    2370:	e7fd      	b.n	236e <_reset_mcu+0x16>
    2372:	bf00      	nop
    2374:	e000ed00 	.word	0xe000ed00
    2378:	05fa0004 	.word	0x05fa0004

0000237c <_irq_set>:
    NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    237c:	0943      	lsrs	r3, r0, #5
    237e:	2201      	movs	r2, #1
    2380:	f000 001f 	and.w	r0, r0, #31
    2384:	fa02 f000 	lsl.w	r0, r2, r0
    2388:	3340      	adds	r3, #64	; 0x40
    238a:	4a02      	ldr	r2, [pc, #8]	; (2394 <_irq_set+0x18>)
    238c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    2390:	4770      	bx	lr
    2392:	bf00      	nop
    2394:	e000e100 	.word	0xe000e100

00002398 <_get_cycles_for_us>:
{
	switch (power) {
	case 9:
		return (us * (freq / 1000000) - 1) + 1;
	case 8:
		return (us * (freq / 100000) - 1) / 10 + 1;
    2398:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
    239c:	4358      	muls	r0, r3
    239e:	3801      	subs	r0, #1
    23a0:	230a      	movs	r3, #10
    23a2:	fbb0 f0f3 	udiv	r0, r0, r3
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    23a6:	3001      	adds	r0, #1
    23a8:	4770      	bx	lr

000023aa <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    23aa:	f64b 3380 	movw	r3, #48000	; 0xbb80
    23ae:	4358      	muls	r0, r3
    23b0:	4770      	bx	lr
	...

000023b4 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    23b4:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    23b6:	4a0d      	ldr	r2, [pc, #52]	; (23ec <_init_chip+0x38>)

	_osc32kctrl_init_sources();
	_oscctrl_init_sources();
	_mclk_init();
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    23b8:	4c0d      	ldr	r4, [pc, #52]	; (23f0 <_init_chip+0x3c>)
    23ba:	8813      	ldrh	r3, [r2, #0]
    23bc:	b29b      	uxth	r3, r3
    23be:	8013      	strh	r3, [r2, #0]
	_osc32kctrl_init_sources();
    23c0:	4b0c      	ldr	r3, [pc, #48]	; (23f4 <_init_chip+0x40>)
    23c2:	4798      	blx	r3
	_oscctrl_init_sources();
    23c4:	4b0c      	ldr	r3, [pc, #48]	; (23f8 <_init_chip+0x44>)
    23c6:	4798      	blx	r3
	_mclk_init();
    23c8:	4b0c      	ldr	r3, [pc, #48]	; (23fc <_init_chip+0x48>)
    23ca:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    23cc:	2005      	movs	r0, #5
    23ce:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    23d0:	4b0b      	ldr	r3, [pc, #44]	; (2400 <_init_chip+0x4c>)
    23d2:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    23d4:	f640 70fa 	movw	r0, #4090	; 0xffa
    23d8:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    23da:	4a0a      	ldr	r2, [pc, #40]	; (2404 <_init_chip+0x50>)
    23dc:	6913      	ldr	r3, [r2, #16]
    23de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    23e2:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif
}
    23e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_dma_init();
    23e8:	4b07      	ldr	r3, [pc, #28]	; (2408 <_init_chip+0x54>)
    23ea:	4718      	bx	r3
    23ec:	41004000 	.word	0x41004000
    23f0:	0000260d 	.word	0x0000260d
    23f4:	00002d7d 	.word	0x00002d7d
    23f8:	00002d91 	.word	0x00002d91
    23fc:	00002a61 	.word	0x00002a61
    2400:	00002d95 	.word	0x00002d95
    2404:	40000800 	.word	0x40000800
    2408:	00002459 	.word	0x00002459

0000240c <_dmac_handler>:

/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    240c:	b410      	push	{r4}
}

static inline hri_dmac_intpend_reg_t hri_dmac_get_INTPEND_reg(const void *const hw, hri_dmac_intpend_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Dmac *)hw)->INTPEND.reg;
    240e:	4b10      	ldr	r3, [pc, #64]	; (2450 <_dmac_handler+0x44>)
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
	struct _dma_resource *tmp_resource = &_resources[channel];
    2410:	4c10      	ldr	r4, [pc, #64]	; (2454 <_dmac_handler+0x48>)
    2412:	8c19      	ldrh	r1, [r3, #32]
	tmp &= mask;
    2414:	f001 011f 	and.w	r1, r1, #31
	((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = mask;
}

static inline bool hri_dmac_get_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
    2418:	eb03 1301 	add.w	r3, r3, r1, lsl #4
    241c:	220c      	movs	r2, #12
    241e:	434a      	muls	r2, r1
    2420:	f893 104e 	ldrb.w	r1, [r3, #78]	; 0x4e

	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC, channel)) {
    2424:	07c9      	lsls	r1, r1, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    2426:	eb04 0002 	add.w	r0, r4, r2
	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC, channel)) {
    242a:	d505      	bpl.n	2438 <_dmac_handler+0x2c>
}

static inline void hri_dmac_clear_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    242c:	2201      	movs	r2, #1
    242e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
    2432:	6843      	ldr	r3, [r0, #4]
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
	}
}
    2434:	bc10      	pop	{r4}
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    2436:	4718      	bx	r3
}

static inline bool hri_dmac_get_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
    2438:	f893 104e 	ldrb.w	r1, [r3, #78]	; 0x4e
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
    243c:	0789      	lsls	r1, r1, #30
    243e:	d504      	bpl.n	244a <_dmac_handler+0x3e>
}

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    2440:	2102      	movs	r1, #2
    2442:	f883 104e 	strb.w	r1, [r3, #78]	; 0x4e
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    2446:	58a3      	ldr	r3, [r4, r2]
    2448:	e7f4      	b.n	2434 <_dmac_handler+0x28>
}
    244a:	bc10      	pop	{r4}
    244c:	4770      	bx	lr
    244e:	bf00      	nop
    2450:	4100a000 	.word	0x4100a000
    2454:	200003c0 	.word	0x200003c0

00002458 <_dma_init>:
{
    2458:	b530      	push	{r4, r5, lr}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    245a:	4b2e      	ldr	r3, [pc, #184]	; (2514 <_dma_init+0xbc>)
    245c:	881a      	ldrh	r2, [r3, #0]
    245e:	f022 0202 	bic.w	r2, r2, #2
    2462:	0412      	lsls	r2, r2, #16
    2464:	0c12      	lsrs	r2, r2, #16
    2466:	801a      	strh	r2, [r3, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    2468:	885a      	ldrh	r2, [r3, #2]
    246a:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
    246e:	0412      	lsls	r2, r2, #16
    2470:	0c12      	lsrs	r2, r2, #16
    2472:	805a      	strh	r2, [r3, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    2474:	881a      	ldrh	r2, [r3, #0]
    2476:	b292      	uxth	r2, r2
    2478:	f042 0201 	orr.w	r2, r2, #1
    247c:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    247e:	881a      	ldrh	r2, [r3, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    2480:	f012 0201 	ands.w	r2, r2, #1
    2484:	d1fb      	bne.n	247e <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    2486:	f44f 6170 	mov.w	r1, #3840	; 0xf00
    248a:	8019      	strh	r1, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    248c:	7b59      	ldrb	r1, [r3, #13]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    248e:	4822      	ldr	r0, [pc, #136]	; (2518 <_dma_init+0xc0>)
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    2490:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    2494:	7359      	strb	r1, [r3, #13]
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    2496:	f500 7100 	add.w	r1, r0, #512	; 0x200
	((Dmac *)hw)->PRICTRL0.reg = data;
    249a:	615a      	str	r2, [r3, #20]
	((Dmac *)hw)->BASEADDR.reg = data;
    249c:	6358      	str	r0, [r3, #52]	; 0x34
	((Dmac *)hw)->WRBADDR.reg = data;
    249e:	6399      	str	r1, [r3, #56]	; 0x38
    24a0:	491e      	ldr	r1, [pc, #120]	; (251c <_dma_init+0xc4>)
    24a2:	4613      	mov	r3, r2
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    24a4:	f5a0 70c0 	sub.w	r0, r0, #384	; 0x180
    24a8:	011c      	lsls	r4, r3, #4
    24aa:	f104 4282 	add.w	r2, r4, #1090519040	; 0x41000000
    24ae:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    24b2:	680d      	ldr	r5, [r1, #0]

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    24b4:	6415      	str	r5, [r2, #64]	; 0x40
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    24b6:	790d      	ldrb	r5, [r1, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    24b8:	f882 5045 	strb.w	r5, [r2, #69]	; 0x45
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    24bc:	794d      	ldrb	r5, [r1, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    24be:	f882 5046 	strb.w	r5, [r2, #70]	; 0x46
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    24c2:	4404      	add	r4, r0
    24c4:	3301      	adds	r3, #1
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    24c6:	88ca      	ldrh	r2, [r1, #6]
    24c8:	f8a4 2180 	strh.w	r2, [r4, #384]	; 0x180
	for (i = 0; i < DMAC_CH_NUM; i++) {
    24cc:	2b20      	cmp	r3, #32
    24ce:	f101 0108 	add.w	r1, r1, #8
    24d2:	d1e9      	bne.n	24a8 <_dma_init+0x50>
    24d4:	221f      	movs	r2, #31
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    24d6:	2001      	movs	r0, #1
    24d8:	0953      	lsrs	r3, r2, #5
    24da:	009b      	lsls	r3, r3, #2
    24dc:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    24e0:	f002 011f 	and.w	r1, r2, #31
    24e4:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    24e8:	fa00 f101 	lsl.w	r1, r0, r1
    24ec:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
    24f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    24f4:	f3bf 8f6f 	isb	sy
    24f8:	3201      	adds	r2, #1
	for (i = 0; i < 5; i++) {
    24fa:	2a24      	cmp	r2, #36	; 0x24
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    24fc:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2500:	6019      	str	r1, [r3, #0]
    2502:	d1e9      	bne.n	24d8 <_dma_init+0x80>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    2504:	4a03      	ldr	r2, [pc, #12]	; (2514 <_dma_init+0xbc>)
    2506:	8813      	ldrh	r3, [r2, #0]
    2508:	b29b      	uxth	r3, r3
    250a:	f043 0302 	orr.w	r3, r3, #2
    250e:	8013      	strh	r3, [r2, #0]
}
    2510:	2000      	movs	r0, #0
    2512:	bd30      	pop	{r4, r5, pc}
    2514:	4100a000 	.word	0x4100a000
    2518:	20000540 	.word	0x20000540
    251c:	0000c010 	.word	0x0000c010

00002520 <_dma_set_destination_address>:
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    2520:	4b03      	ldr	r3, [pc, #12]	; (2530 <_dma_set_destination_address+0x10>)
    2522:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    2526:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
}
    252a:	2000      	movs	r0, #0
    252c:	4770      	bx	lr
    252e:	bf00      	nop
    2530:	200003c0 	.word	0x200003c0

00002534 <_dma_set_source_address>:
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    2534:	4b03      	ldr	r3, [pc, #12]	; (2544 <_dma_set_source_address+0x10>)
    2536:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    253a:	f8c0 1184 	str.w	r1, [r0, #388]	; 0x184
}
    253e:	2000      	movs	r0, #0
    2540:	4770      	bx	lr
    2542:	bf00      	nop
    2544:	200003c0 	.word	0x200003c0

00002548 <_dma_set_data_amount>:
{
    2548:	b570      	push	{r4, r5, r6, lr}
	return ((DmacDescriptor *)hw)->DSTADDR.reg;
    254a:	4a12      	ldr	r2, [pc, #72]	; (2594 <_dma_set_data_amount+0x4c>)
    254c:	0100      	lsls	r0, r0, #4
    254e:	1814      	adds	r4, r2, r0
    2550:	f8d4 6188 	ldr.w	r6, [r4, #392]	; 0x188
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    2554:	f8b4 3180 	ldrh.w	r3, [r4, #384]	; 0x180
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    2558:	f8b4 5180 	ldrh.w	r5, [r4, #384]	; 0x180
	tmp = (tmp & DMAC_BTCTRL_BEATSIZE_Msk) >> DMAC_BTCTRL_BEATSIZE_Pos;
    255c:	f3c3 2301 	ubfx	r3, r3, #8, #2
	if (hri_dmacdescriptor_get_BTCTRL_DSTINC_bit(&_descriptor_section[channel])) {
    2560:	052d      	lsls	r5, r5, #20
		hri_dmacdescriptor_write_DSTADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    2562:	bf42      	ittt	mi
    2564:	fa01 f503 	lslmi.w	r5, r1, r3
    2568:	19ad      	addmi	r5, r5, r6
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    256a:	f8c4 5188 	strmi.w	r5, [r4, #392]	; 0x188
	return ((DmacDescriptor *)hw)->SRCADDR.reg;
    256e:	1814      	adds	r4, r2, r0
	((DmacDescriptor *)hw)->BTCNT.reg = data;
    2570:	4402      	add	r2, r0
	return ((DmacDescriptor *)hw)->SRCADDR.reg;
    2572:	f8d4 5184 	ldr.w	r5, [r4, #388]	; 0x184
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    2576:	f8b4 6180 	ldrh.w	r6, [r4, #384]	; 0x180
	if (hri_dmacdescriptor_get_BTCTRL_SRCINC_bit(&_descriptor_section[channel])) {
    257a:	0576      	lsls	r6, r6, #21
		hri_dmacdescriptor_write_SRCADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    257c:	bf44      	itt	mi
    257e:	fa01 f303 	lslmi.w	r3, r1, r3
    2582:	195b      	addmi	r3, r3, r5
	hri_dmacdescriptor_write_BTCNT_reg(&_descriptor_section[channel], amount);
    2584:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    2586:	bf48      	it	mi
    2588:	f8c4 3184 	strmi.w	r3, [r4, #388]	; 0x184
	((DmacDescriptor *)hw)->BTCNT.reg = data;
    258c:	f8a2 1182 	strh.w	r1, [r2, #386]	; 0x182
}
    2590:	2000      	movs	r0, #0
    2592:	bd70      	pop	{r4, r5, r6, pc}
    2594:	200003c0 	.word	0x200003c0

00002598 <_dma_enable_transaction>:
	((DmacDescriptor *)hw)->BTCTRL.reg |= DMAC_BTCTRL_VALID;
    2598:	4a0e      	ldr	r2, [pc, #56]	; (25d4 <_dma_enable_transaction+0x3c>)
    259a:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    259e:	f8b2 3180 	ldrh.w	r3, [r2, #384]	; 0x180
    25a2:	b29b      	uxth	r3, r3
    25a4:	f043 0301 	orr.w	r3, r3, #1
    25a8:	f8a2 3180 	strh.w	r3, [r2, #384]	; 0x180
    25ac:	0103      	lsls	r3, r0, #4
    25ae:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    25b2:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    25b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    25b8:	f042 0202 	orr.w	r2, r2, #2
    25bc:	641a      	str	r2, [r3, #64]	; 0x40
	if (software_trigger) {
    25be:	b131      	cbz	r1, 25ce <_dma_enable_transaction+0x36>
	((Dmac *)hw)->SWTRIGCTRL.reg |= mask;
    25c0:	4a05      	ldr	r2, [pc, #20]	; (25d8 <_dma_enable_transaction+0x40>)
		hri_dmac_set_SWTRIGCTRL_reg(DMAC, 1 << channel);
    25c2:	2301      	movs	r3, #1
    25c4:	6911      	ldr	r1, [r2, #16]
    25c6:	fa03 f000 	lsl.w	r0, r3, r0
    25ca:	4308      	orrs	r0, r1
    25cc:	6110      	str	r0, [r2, #16]
}
    25ce:	2000      	movs	r0, #0
    25d0:	4770      	bx	lr
    25d2:	bf00      	nop
    25d4:	200003c0 	.word	0x200003c0
    25d8:	4100a000 	.word	0x4100a000

000025dc <DMAC_0_Handler>:
    25dc:	4b00      	ldr	r3, [pc, #0]	; (25e0 <DMAC_0_Handler+0x4>)
    25de:	4718      	bx	r3
    25e0:	0000240d 	.word	0x0000240d

000025e4 <DMAC_1_Handler>:
    25e4:	4b00      	ldr	r3, [pc, #0]	; (25e8 <DMAC_1_Handler+0x4>)
    25e6:	4718      	bx	r3
    25e8:	0000240d 	.word	0x0000240d

000025ec <DMAC_2_Handler>:
    25ec:	4b00      	ldr	r3, [pc, #0]	; (25f0 <DMAC_2_Handler+0x4>)
    25ee:	4718      	bx	r3
    25f0:	0000240d 	.word	0x0000240d

000025f4 <DMAC_3_Handler>:
    25f4:	4b00      	ldr	r3, [pc, #0]	; (25f8 <DMAC_3_Handler+0x4>)
    25f6:	4718      	bx	r3
    25f8:	0000240d 	.word	0x0000240d

000025fc <DMAC_4_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_4_Handler(void)
{
	_dmac_handler();
    25fc:	4b00      	ldr	r3, [pc, #0]	; (2600 <DMAC_4_Handler+0x4>)
    25fe:	4718      	bx	r3
    2600:	0000240d 	.word	0x0000240d

00002604 <_crc_sync_init>:
/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
	device->hw = hw;
    2604:	6001      	str	r1, [r0, #0]

	return ERR_NONE;
}
    2606:	2000      	movs	r0, #0
    2608:	4770      	bx	lr
	...

0000260c <_gclk_init_generators_by_fref>:
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
#if CONF_GCLK_GEN_0_GENEN == 1
	if (bm & (1ul << 0)) {
    260c:	07c2      	lsls	r2, r0, #31
	((Gclk *)hw)->GENCTRL[index].reg = data;
    260e:	bf42      	ittt	mi
    2610:	4b04      	ldrmi	r3, [pc, #16]	; (2624 <_gclk_init_generators_by_fref+0x18>)
    2612:	4a05      	ldrmi	r2, [pc, #20]	; (2628 <_gclk_init_generators_by_fref+0x1c>)
    2614:	621a      	strmi	r2, [r3, #32]
		        | (CONF_GCLK_GEN_0_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_0_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GEN_0_GENEN << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_1_GENEN == 1
	if (bm & (1ul << 1)) {
    2616:	0783      	lsls	r3, r0, #30
    2618:	bf42      	ittt	mi
    261a:	4b02      	ldrmi	r3, [pc, #8]	; (2624 <_gclk_init_generators_by_fref+0x18>)
    261c:	4a03      	ldrmi	r2, [pc, #12]	; (262c <_gclk_init_generators_by_fref+0x20>)
    261e:	625a      	strmi	r2, [r3, #36]	; 0x24
    2620:	4770      	bx	lr
    2622:	bf00      	nop
    2624:	40001c00 	.word	0x40001c00
    2628:	00012f06 	.word	0x00012f06
    262c:	00012f04 	.word	0x00012f04

00002630 <GMAC_Handler>:

/*
 * \internal GMAC interrupt handler
 */
void GMAC_Handler(void)
{
    2630:	b513      	push	{r0, r1, r4, lr}
	volatile uint32_t tsr;
	volatile uint32_t rsr;

	tsr = hri_gmac_read_TSR_reg(_gmac_dev->hw);
    2632:	4c11      	ldr	r4, [pc, #68]	; (2678 <GMAC_Handler+0x48>)
    2634:	6820      	ldr	r0, [r4, #0]
    2636:	6803      	ldr	r3, [r0, #0]
	GMAC_CRITICAL_SECTION_LEAVE();
}

static inline hri_gmac_tsr_reg_t hri_gmac_read_TSR_reg(const void *const hw)
{
	return ((Gmac *)hw)->TSR.reg;
    2638:	695a      	ldr	r2, [r3, #20]
    263a:	9200      	str	r2, [sp, #0]
	GMAC_CRITICAL_SECTION_LEAVE();
}

static inline hri_gmac_rsr_reg_t hri_gmac_read_RSR_reg(const void *const hw)
{
	return ((Gmac *)hw)->RSR.reg;
    263c:	6a1a      	ldr	r2, [r3, #32]
	rsr = hri_gmac_read_RSR_reg(_gmac_dev->hw);
    263e:	9201      	str	r2, [sp, #4]
	GMAC_CRITICAL_SECTION_LEAVE();
}

static inline hri_gmac_isr_reg_t hri_gmac_read_ISR_reg(const void *const hw)
{
	return ((Gmac *)hw)->ISR.reg;
    2640:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	/* Must be Clear ISR (Clear on read) */
	hri_gmac_read_ISR_reg(_gmac_dev->hw);

	/* Frame transmited */
	if (tsr & GMAC_TSR_TXCOMP) {
    2642:	9a00      	ldr	r2, [sp, #0]
    2644:	0692      	lsls	r2, r2, #26
    2646:	d50a      	bpl.n	265e <GMAC_Handler+0x2e>
		hri_gmac_write_TSR_reg(_gmac_dev->hw, tsr);
    2648:	9a00      	ldr	r2, [sp, #0]
	((Gmac *)hw)->TSR.reg = data;
    264a:	615a      	str	r2, [r3, #20]
		if ((_txbuf_descrs[_txbuf_index].status.bm.used) && (_gmac_dev->cb.transmited != NULL)) {
    264c:	6863      	ldr	r3, [r4, #4]
    264e:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    2652:	7bdb      	ldrb	r3, [r3, #15]
    2654:	09db      	lsrs	r3, r3, #7
    2656:	d002      	beq.n	265e <GMAC_Handler+0x2e>
    2658:	6843      	ldr	r3, [r0, #4]
    265a:	b103      	cbz	r3, 265e <GMAC_Handler+0x2e>
			_gmac_dev->cb.transmited(_gmac_dev);
    265c:	4798      	blx	r3
		}
	}

	/* Frame received */
	if (rsr & GMAC_RSR_REC) {
    265e:	9b01      	ldr	r3, [sp, #4]
    2660:	079b      	lsls	r3, r3, #30
    2662:	d503      	bpl.n	266c <GMAC_Handler+0x3c>
		if (_gmac_dev->cb.received != NULL) {
    2664:	6820      	ldr	r0, [r4, #0]
    2666:	6883      	ldr	r3, [r0, #8]
    2668:	b103      	cbz	r3, 266c <GMAC_Handler+0x3c>
			_gmac_dev->cb.received(_gmac_dev);
    266a:	4798      	blx	r3
		}
	}
	hri_gmac_write_RSR_reg(_gmac_dev->hw, rsr);
    266c:	6823      	ldr	r3, [r4, #0]
    266e:	9a01      	ldr	r2, [sp, #4]
    2670:	681b      	ldr	r3, [r3, #0]
	((Gmac *)hw)->RSR.reg = data;
    2672:	621a      	str	r2, [r3, #32]
}
    2674:	b002      	add	sp, #8
    2676:	bd10      	pop	{r4, pc}
    2678:	20000940 	.word	0x20000940

0000267c <_mac_async_init>:
	((Gmac *)hw)->NCR.reg = data;
    267c:	4b31      	ldr	r3, [pc, #196]	; (2744 <_mac_async_init+0xc8>)

int32_t _mac_async_init(struct _mac_async_device *const dev, void *const hw)
{
    267e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	dev->hw = hw;
    2682:	6001      	str	r1, [r0, #0]
    2684:	600b      	str	r3, [r1, #0]
	((Gmac *)hw)->NCFGR.reg = data;
    2686:	4b30      	ldr	r3, [pc, #192]	; (2748 <_mac_async_init+0xcc>)
    2688:	604b      	str	r3, [r1, #4]
		_txbuf_descrs[i].address        = (uint32_t)_txbuf[i];
    268a:	4f30      	ldr	r7, [pc, #192]	; (274c <_mac_async_init+0xd0>)
	((Gmac *)hw)->UR.reg = data;
    268c:	2301      	movs	r3, #1
    268e:	60cb      	str	r3, [r1, #12]
	((Gmac *)hw)->DCFGR.reg = data;
    2690:	4b2f      	ldr	r3, [pc, #188]	; (2750 <_mac_async_init+0xd4>)
    2692:	610b      	str	r3, [r1, #16]
}

static inline void hri_gmac_write_IPGS_reg(const void *const hw, hri_gmac_ipgs_reg_t data)
{
	GMAC_CRITICAL_SECTION_ENTER();
	((Gmac *)hw)->IPGS.reg = data;
    2694:	f240 1201 	movw	r2, #257	; 0x101
	((Gmac *)hw)->WOL.reg = data;
    2698:	2300      	movs	r3, #0
    269a:	f107 0c08 	add.w	ip, r7, #8
    269e:	f8c1 30b8 	str.w	r3, [r1, #184]	; 0xb8
    26a2:	f107 08a0 	add.w	r8, r7, #160	; 0xa0
	((Gmac *)hw)->IPGS.reg = data;
    26a6:	f8c1 20bc 	str.w	r2, [r1, #188]	; 0xbc
    26aa:	f240 59dc 	movw	r9, #1500	; 0x5dc
		_txbuf_descrs[i].status.val     = 0;
    26ae:	469e      	mov	lr, r3
    26b0:	463d      	mov	r5, r7
    26b2:	4666      	mov	r6, ip
    26b4:	00da      	lsls	r2, r3, #3
		_txbuf_descrs[i].address        = (uint32_t)_txbuf[i];
    26b6:	fb09 8403 	mla	r4, r9, r3, r8
    26ba:	f84c 4033 	str.w	r4, [ip, r3, lsl #3]
		_txbuf_descrs[i].status.val     = 0;
    26be:	eb0c 0402 	add.w	r4, ip, r2
		_txbuf_descrs[i].status.bm.used = 1;
    26c2:	443a      	add	r2, r7
		_txbuf_descrs[i].status.val     = 0;
    26c4:	f8c4 e004 	str.w	lr, [r4, #4]
		_txbuf_descrs[i].status.bm.used = 1;
    26c8:	7bd4      	ldrb	r4, [r2, #15]
	for (i = 0; i < CONF_GMAC_TXDESCR_NUM; i++) {
    26ca:	3301      	adds	r3, #1
		_txbuf_descrs[i].status.bm.used = 1;
    26cc:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	for (i = 0; i < CONF_GMAC_TXDESCR_NUM; i++) {
    26d0:	2b10      	cmp	r3, #16
		_txbuf_descrs[i].status.bm.used = 1;
    26d2:	73d4      	strb	r4, [r2, #15]
	for (i = 0; i < CONF_GMAC_TXDESCR_NUM; i++) {
    26d4:	d1ee      	bne.n	26b4 <_mac_async_init+0x38>
	_txbuf_descrs[CONF_GMAC_TXDESCR_NUM - 1].status.bm.wrap = 1;
    26d6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
	_txbuf_index                                            = 0;
    26da:	f8c7 e004 	str.w	lr, [r7, #4]
	_txbuf_descrs[CONF_GMAC_TXDESCR_NUM - 1].status.bm.wrap = 1;
    26de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    26e2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	_last_txbuf_index                                       = 0;
    26e6:	4b1b      	ldr	r3, [pc, #108]	; (2754 <_mac_async_init+0xd8>)
    26e8:	2200      	movs	r2, #0
    26ea:	f8c3 e988 	str.w	lr, [r3, #2440]	; 0x988
		_rxbuf_descrs[i].address.val = (uint32_t)_rxbuf[i];
    26ee:	f503 6419 	add.w	r4, r3, #2448	; 0x990
    26f2:	f603 2c28 	addw	ip, r3, #2600	; 0xa28
		_rxbuf_descrs[i].status.val  = 0;
    26f6:	4617      	mov	r7, r2
		_rxbuf_descrs[i].address.val = (uint32_t)_rxbuf[i];
    26f8:	eb0c 1e02 	add.w	lr, ip, r2, lsl #4
    26fc:	f842 e004 	str.w	lr, [r2, r4]
		_rxbuf_descrs[i].status.val  = 0;
    2700:	eb04 0e02 	add.w	lr, r4, r2
    2704:	3208      	adds	r2, #8
	for (i = 0; i < CONF_GMAC_RXDESCR_NUM; i++) {
    2706:	2a80      	cmp	r2, #128	; 0x80
		_rxbuf_descrs[i].status.val  = 0;
    2708:	f8ce 7004 	str.w	r7, [lr, #4]
	for (i = 0; i < CONF_GMAC_RXDESCR_NUM; i++) {
    270c:	d1f4      	bne.n	26f8 <_mac_async_init+0x7c>
	_rxbuf_descrs[CONF_GMAC_RXDESCR_NUM - 1].address.bm.wrap = 1;
    270e:	f893 2a08 	ldrb.w	r2, [r3, #2568]	; 0xa08
	        | GMAC_DCFGR_DRBS(CONF_GMAC_DCFGR_DRBS) | (CONF_GMAC_DCFGR_DDRP ? GMAC_DCFGR_DDRP : 0));
	hri_gmac_write_WOL_reg(dev->hw, 0);
	hri_gmac_write_IPGS_reg(dev->hw, GMAC_IPGS_FL((CONF_GMAC_IPGS_FL_MUL << 8) | CONF_GMAC_IPGS_FL_DIV));
	_mac_init_bufdescr(dev);

	_gmac_dev = dev;
    2712:	6028      	str	r0, [r5, #0]
	_rxbuf_descrs[CONF_GMAC_RXDESCR_NUM - 1].address.bm.wrap = 1;
    2714:	f042 0202 	orr.w	r2, r2, #2
    2718:	f883 2a08 	strb.w	r2, [r3, #2568]	; 0xa08
	_rxbuf_index                                             = 0;
    271c:	4b0e      	ldr	r3, [pc, #56]	; (2758 <_mac_async_init+0xdc>)
    271e:	f8c3 7130 	str.w	r7, [r3, #304]	; 0x130
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2722:	4b0e      	ldr	r3, [pc, #56]	; (275c <_mac_async_init+0xe0>)
	((Gmac *)hw)->TBQB.reg = data;
    2724:	61ce      	str	r6, [r1, #28]
    2726:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
	((Gmac *)hw)->RBQB.reg = data;
    272a:	618c      	str	r4, [r1, #24]
    272c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
    2730:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2734:	f3bf 8f6f 	isb	sy
	NVIC_DisableIRQ(GMAC_IRQn);
	NVIC_ClearPendingIRQ(GMAC_IRQn);
	NVIC_EnableIRQ(GMAC_IRQn);

	return ERR_NONE;
}
    2738:	2000      	movs	r0, #0
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    273a:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    273e:	609a      	str	r2, [r3, #8]
    2740:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2744:	00030192 	.word	0x00030192
    2748:	4091211b 	.word	0x4091211b
    274c:	20000940 	.word	0x20000940
    2750:	00020704 	.word	0x00020704
    2754:	20005e18 	.word	0x20005e18
    2758:	20006f10 	.word	0x20006f10
    275c:	e000e100 	.word	0xe000e100

00002760 <_mac_async_enable>:
	return ERR_NONE;
}

int32_t _mac_async_enable(struct _mac_async_device *const dev)
{
	hri_gmac_set_NCR_reg(dev->hw, GMAC_NCR_RXEN | GMAC_NCR_TXEN);
    2760:	6802      	ldr	r2, [r0, #0]
	((Gmac *)hw)->NCR.reg |= mask;
    2762:	6813      	ldr	r3, [r2, #0]
    2764:	f043 030c 	orr.w	r3, r3, #12
    2768:	6013      	str	r3, [r2, #0]
	return ERR_NONE;
}
    276a:	2000      	movs	r0, #0
    276c:	4770      	bx	lr
	...

00002770 <_mac_async_write>:
	hri_gmac_clear_NCR_reg(dev->hw, GMAC_NCR_RXEN | GMAC_NCR_TXEN);
	return ERR_NONE;
}

int32_t _mac_async_write(struct _mac_async_device *const dev, uint8_t *buf, uint32_t len)
{
    2770:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2774:	4615      	mov	r5, r2
	uint32_t pos;
	uint32_t blen;
	uint32_t i;

	if (_txbuf_descrs[_last_txbuf_index].status.bm.used && !_txbuf_descrs[_last_txbuf_index].status.bm.last_buf) {
    2776:	4a47      	ldr	r2, [pc, #284]	; (2894 <_mac_async_write+0x124>)
    2778:	4c47      	ldr	r4, [pc, #284]	; (2898 <_mac_async_write+0x128>)
    277a:	f8d2 3988 	ldr.w	r3, [r2, #2440]	; 0x988
    277e:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
{
    2782:	4606      	mov	r6, r0
	if (_txbuf_descrs[_last_txbuf_index].status.bm.used && !_txbuf_descrs[_last_txbuf_index].status.bm.last_buf) {
    2784:	7bdb      	ldrb	r3, [r3, #15]
    2786:	09db      	lsrs	r3, r3, #7
    2788:	d108      	bne.n	279c <_mac_async_write+0x2c>
				break;
			}
		}
	}

	if (!_txbuf_descrs[_txbuf_index].status.bm.used) {
    278a:	6863      	ldr	r3, [r4, #4]
    278c:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    2790:	7bdb      	ldrb	r3, [r3, #15]
    2792:	09db      	lsrs	r3, r3, #7
    2794:	d11d      	bne.n	27d2 <_mac_async_write+0x62>
		return ERR_NO_RESOURCE;
    2796:	f06f 001b 	mvn.w	r0, #27
    279a:	e077      	b.n	288c <_mac_async_write+0x11c>
	if (_txbuf_descrs[_last_txbuf_index].status.bm.used && !_txbuf_descrs[_last_txbuf_index].status.bm.last_buf) {
    279c:	f8d2 3988 	ldr.w	r3, [r2, #2440]	; 0x988
    27a0:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    27a4:	7b5b      	ldrb	r3, [r3, #13]
    27a6:	09db      	lsrs	r3, r3, #7
    27a8:	d1ef      	bne.n	278a <_mac_async_write+0x1a>
    27aa:	2001      	movs	r0, #1
			pos = _last_txbuf_index + i;
    27ac:	f8d2 3988 	ldr.w	r3, [r2, #2440]	; 0x988
    27b0:	4403      	add	r3, r0
			if (pos >= CONF_GMAC_TXDESCR_NUM) {
    27b2:	2b0f      	cmp	r3, #15
				pos -= CONF_GMAC_TXDESCR_NUM;
    27b4:	bf88      	it	hi
    27b6:	3b10      	subhi	r3, #16
			_txbuf_descrs[pos].status.bm.used = 1;
    27b8:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    27bc:	7bdf      	ldrb	r7, [r3, #15]
    27be:	f047 0780 	orr.w	r7, r7, #128	; 0x80
    27c2:	73df      	strb	r7, [r3, #15]
			if (_txbuf_descrs[pos].status.bm.last_buf) {
    27c4:	7b5b      	ldrb	r3, [r3, #13]
    27c6:	09db      	lsrs	r3, r3, #7
    27c8:	d1df      	bne.n	278a <_mac_async_write+0x1a>
		for (i = 1; i < CONF_GMAC_TXDESCR_NUM; i++) {
    27ca:	3001      	adds	r0, #1
    27cc:	2810      	cmp	r0, #16
    27ce:	d1ed      	bne.n	27ac <_mac_async_write+0x3c>
    27d0:	e7db      	b.n	278a <_mac_async_write+0x1a>
	}

	/* Check if have enough buffers, the first buffer already checked */
	if (len > CONF_GMAC_TXBUF_SIZE) {
    27d2:	f240 53dc 	movw	r3, #1500	; 0x5dc
    27d6:	429d      	cmp	r5, r3
    27d8:	d914      	bls.n	2804 <_mac_async_write+0x94>
    27da:	2001      	movs	r0, #1

			if (!_txbuf_descrs[pos].status.bm.used) {
				return ERR_NO_RESOURCE;
			}

			if ((len - (CONF_GMAC_TXBUF_SIZE * i)) < CONF_GMAC_TXBUF_SIZE) {
    27dc:	461f      	mov	r7, r3
    27de:	f240 5edb 	movw	lr, #1499	; 0x5db
			pos = _txbuf_index + i;
    27e2:	6863      	ldr	r3, [r4, #4]
    27e4:	4403      	add	r3, r0
			if (pos >= CONF_GMAC_TXDESCR_NUM) {
    27e6:	2b0f      	cmp	r3, #15
				pos -= CONF_GMAC_TXDESCR_NUM;
    27e8:	bf88      	it	hi
    27ea:	3b10      	subhi	r3, #16
			if (!_txbuf_descrs[pos].status.bm.used) {
    27ec:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    27f0:	7bdb      	ldrb	r3, [r3, #15]
    27f2:	09db      	lsrs	r3, r3, #7
    27f4:	d0cf      	beq.n	2796 <_mac_async_write+0x26>
			if ((len - (CONF_GMAC_TXBUF_SIZE * i)) < CONF_GMAC_TXBUF_SIZE) {
    27f6:	fb07 5310 	mls	r3, r7, r0, r5
    27fa:	4573      	cmp	r3, lr
    27fc:	d902      	bls.n	2804 <_mac_async_write+0x94>
		for (i = 1; i < CONF_GMAC_TXDESCR_NUM; i++) {
    27fe:	3001      	adds	r0, #1
    2800:	2810      	cmp	r0, #16
    2802:	d1ee      	bne.n	27e2 <_mac_async_write+0x72>
				break;
			}
		}
	}
	_last_txbuf_index = _txbuf_index;
    2804:	6863      	ldr	r3, [r4, #4]
    2806:	f8c2 3988 	str.w	r3, [r2, #2440]	; 0x988
    280a:	f501 49bb 	add.w	r9, r1, #23936	; 0x5d80

	/* Write data to transmit buffer */
	for (i = 0; i < CONF_GMAC_TXDESCR_NUM; i++) {
		blen = min(len, CONF_GMAC_TXBUF_SIZE);
		memcpy(_txbuf[_txbuf_index], buf + (i * CONF_GMAC_TXBUF_SIZE), blen);
    280e:	f8df b090 	ldr.w	fp, [pc, #144]	; 28a0 <_mac_async_write+0x130>
    2812:	4b22      	ldr	r3, [pc, #136]	; (289c <_mac_async_write+0x12c>)
    2814:	460f      	mov	r7, r1
    2816:	f109 0940 	add.w	r9, r9, #64	; 0x40
		blen = min(len, CONF_GMAC_TXBUF_SIZE);
    281a:	f240 5adc 	movw	sl, #1500	; 0x5dc
    281e:	4555      	cmp	r5, sl
		memcpy(_txbuf[_txbuf_index], buf + (i * CONF_GMAC_TXBUF_SIZE), blen);
    2820:	6860      	ldr	r0, [r4, #4]
    2822:	9301      	str	r3, [sp, #4]
		blen = min(len, CONF_GMAC_TXBUF_SIZE);
    2824:	46a8      	mov	r8, r5
    2826:	bf28      	it	cs
    2828:	46d0      	movcs	r8, sl
		memcpy(_txbuf[_txbuf_index], buf + (i * CONF_GMAC_TXBUF_SIZE), blen);
    282a:	4639      	mov	r1, r7
    282c:	4642      	mov	r2, r8
    282e:	fb0a b000 	mla	r0, sl, r0, fp
    2832:	4798      	blx	r3
		len -= blen;

		if (len > 0) {
			/* Here the Used flag be set to zero */
			_txbuf_descrs[_txbuf_index].status.val = blen;
    2834:	6862      	ldr	r2, [r4, #4]
		if (len > 0) {
    2836:	9b01      	ldr	r3, [sp, #4]
			_txbuf_descrs[_txbuf_index].status.val = blen;
    2838:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
		if (len > 0) {
    283c:	ebb5 0508 	subs.w	r5, r5, r8
			_txbuf_descrs[_txbuf_index].status.val = blen;
    2840:	f8c2 800c 	str.w	r8, [r2, #12]
		} else {
			_txbuf_descrs[_txbuf_index].status.val         = blen;
			_txbuf_descrs[_txbuf_index].status.bm.last_buf = 1;
    2844:	bf01      	itttt	eq
    2846:	6862      	ldreq	r2, [r4, #4]
    2848:	eb04 02c2 	addeq.w	r2, r4, r2, lsl #3
    284c:	7b51      	ldrbeq	r1, [r2, #13]
    284e:	f041 0180 	orreq.w	r1, r1, #128	; 0x80
    2852:	bf08      	it	eq
    2854:	7351      	strbeq	r1, [r2, #13]
		}
		_txbuf_index++;
    2856:	6862      	ldr	r2, [r4, #4]
    2858:	3201      	adds	r2, #1
    285a:	6062      	str	r2, [r4, #4]
		if (_txbuf_index == CONF_GMAC_TXDESCR_NUM) {
    285c:	6862      	ldr	r2, [r4, #4]
    285e:	2a10      	cmp	r2, #16
    2860:	d107      	bne.n	2872 <_mac_async_write+0x102>
			_txbuf_index                                            = 0;
    2862:	2200      	movs	r2, #0
    2864:	6062      	str	r2, [r4, #4]
			_txbuf_descrs[CONF_GMAC_TXDESCR_NUM - 1].status.bm.wrap = 1;
    2866:	f894 2087 	ldrb.w	r2, [r4, #135]	; 0x87
    286a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    286e:	f884 2087 	strb.w	r2, [r4, #135]	; 0x87
		}
		if (len == 0) {
    2872:	b11d      	cbz	r5, 287c <_mac_async_write+0x10c>
    2874:	f207 57dc 	addw	r7, r7, #1500	; 0x5dc
	for (i = 0; i < CONF_GMAC_TXDESCR_NUM; i++) {
    2878:	45b9      	cmp	r9, r7
    287a:	d1d0      	bne.n	281e <_mac_async_write+0xae>
  __ASM volatile ("dsb 0xF":::"memory");
    287c:	f3bf 8f4f 	dsb	sy

	/* Data synchronization barrier */
	__DSB();

	/* Active Transmit */
	hri_gmac_set_NCR_reg(dev->hw, GMAC_NCR_TSTART);
    2880:	6832      	ldr	r2, [r6, #0]
    2882:	6813      	ldr	r3, [r2, #0]
    2884:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    2888:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    288a:	2000      	movs	r0, #0
}
    288c:	b003      	add	sp, #12
    288e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2892:	bf00      	nop
    2894:	20005e18 	.word	0x20005e18
    2898:	20000940 	.word	0x20000940
    289c:	0000ad77 	.word	0x0000ad77
    28a0:	200009e0 	.word	0x200009e0

000028a4 <_mac_async_read>:

uint32_t _mac_async_read(struct _mac_async_device *const dev, uint8_t *buf, uint32_t len)
{
    28a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    28a8:	460b      	mov	r3, r1
	uint32_t eof       = 0xFFFFFFFF; /* End of Frame index */
	uint32_t total_len = 0;          /* Total length of received package */

	(void)dev;
	for (i = 0; i < CONF_GMAC_RXDESCR_NUM; i++) {
		pos = _rxbuf_index + i;
    28aa:	4937      	ldr	r1, [pc, #220]	; (2988 <_mac_async_read+0xe4>)
		if (pos >= CONF_GMAC_RXDESCR_NUM) {
			pos -= CONF_GMAC_RXDESCR_NUM;
		}

		/* No more data for Ethernet package */
		if (!_rxbuf_descrs[pos].address.bm.ownership) {
    28ac:	4837      	ldr	r0, [pc, #220]	; (298c <_mac_async_read+0xe8>)
{
    28ae:	4617      	mov	r7, r2
	uint32_t sof       = 0xFFFFFFFF; /* Start of Frame index */
    28b0:	f04f 35ff 	mov.w	r5, #4294967295
	for (i = 0; i < CONF_GMAC_RXDESCR_NUM; i++) {
    28b4:	2400      	movs	r4, #0
    28b6:	4688      	mov	r8, r1
		pos = _rxbuf_index + i;
    28b8:	f8d1 2130 	ldr.w	r2, [r1, #304]	; 0x130
    28bc:	4422      	add	r2, r4
		if (pos >= CONF_GMAC_RXDESCR_NUM) {
    28be:	2a0f      	cmp	r2, #15
			pos -= CONF_GMAC_RXDESCR_NUM;
    28c0:	bf88      	it	hi
    28c2:	3a10      	subhi	r2, #16
		if (!_rxbuf_descrs[pos].address.bm.ownership) {
    28c4:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    28c8:	f892 6990 	ldrb.w	r6, [r2, #2448]	; 0x990
    28cc:	07f6      	lsls	r6, r6, #31
    28ce:	d51e      	bpl.n	290e <_mac_async_read+0x6a>
			break;
		}

		if (_rxbuf_descrs[pos].status.bm.sof) {
    28d0:	f892 6995 	ldrb.w	r6, [r2, #2453]	; 0x995
    28d4:	f016 0f40 	tst.w	r6, #64	; 0x40
    28d8:	bf18      	it	ne
    28da:	4625      	movne	r5, r4
			sof = i;
		}

		if ((_rxbuf_descrs[pos].status.bm.eof) && (sof != 0xFFFFFFFF)) {
    28dc:	09f6      	lsrs	r6, r6, #7
    28de:	f104 0601 	add.w	r6, r4, #1
    28e2:	d011      	beq.n	2908 <_mac_async_read+0x64>
    28e4:	f1b5 3fff 	cmp.w	r5, #4294967295
    28e8:	d00e      	beq.n	2908 <_mac_async_read+0x64>
			/* eof now indicate the number of bufs the frame used */
			eof = i;
			n   = _rxbuf_descrs[pos].status.bm.len;
    28ea:	f8b2 2994 	ldrh.w	r2, [r2, #2452]	; 0x994
    28ee:	f3c2 020c 	ubfx	r2, r2, #0, #13
			len = min(n, len);
    28f2:	4297      	cmp	r7, r2
    28f4:	bf28      	it	cs
    28f6:	4617      	movcs	r7, r2
	uint32_t total_len = 0;          /* Total length of received package */
    28f8:	f04f 0900 	mov.w	r9, #0
	} else {
		j = i;
	}

	/* Copy data to user buffer */
	for (i = 0; i < j; i++) {
    28fc:	46ca      	mov	sl, r9
    28fe:	45b2      	cmp	sl, r6
    2900:	d10d      	bne.n	291e <_mac_async_read+0x7a>
			_rxbuf_index = 0;
		}
	}

	return total_len;
}
    2902:	4648      	mov	r0, r9
    2904:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (i = 0; i < CONF_GMAC_RXDESCR_NUM; i++) {
    2908:	2e10      	cmp	r6, #16
    290a:	4634      	mov	r4, r6
    290c:	d1d4      	bne.n	28b8 <_mac_async_read+0x14>
	} else if (sof != 0xFFFFFFFF) {
    290e:	1c6a      	adds	r2, r5, #1
    2910:	d101      	bne.n	2916 <_mac_async_read+0x72>
    2912:	4626      	mov	r6, r4
    2914:	e000      	b.n	2918 <_mac_async_read+0x74>
    2916:	462e      	mov	r6, r5
    2918:	f04f 34ff 	mov.w	r4, #4294967295
    291c:	e7ec      	b.n	28f8 <_mac_async_read+0x54>
		if (eof != 0xFFFFFFFF && i >= sof && i <= eof && len > 0) {
    291e:	1c61      	adds	r1, r4, #1
    2920:	d017      	beq.n	2952 <_mac_async_read+0xae>
    2922:	45aa      	cmp	sl, r5
    2924:	d315      	bcc.n	2952 <_mac_async_read+0xae>
    2926:	45a2      	cmp	sl, r4
    2928:	d813      	bhi.n	2952 <_mac_async_read+0xae>
    292a:	b197      	cbz	r7, 2952 <_mac_async_read+0xae>
			n = min(len, CONF_GMAC_RXBUF_SIZE);
    292c:	2f80      	cmp	r7, #128	; 0x80
			memcpy(buf, _rxbuf[_rxbuf_index], n);
    292e:	f8d8 1130 	ldr.w	r1, [r8, #304]	; 0x130
    2932:	4817      	ldr	r0, [pc, #92]	; (2990 <_mac_async_read+0xec>)
			n = min(len, CONF_GMAC_RXBUF_SIZE);
    2934:	46bb      	mov	fp, r7
    2936:	bf28      	it	cs
    2938:	f04f 0b80 	movcs.w	fp, #128	; 0x80
			memcpy(buf, _rxbuf[_rxbuf_index], n);
    293c:	eb00 11c1 	add.w	r1, r0, r1, lsl #7
    2940:	465a      	mov	r2, fp
    2942:	4618      	mov	r0, r3
    2944:	4b13      	ldr	r3, [pc, #76]	; (2994 <_mac_async_read+0xf0>)
    2946:	4798      	blx	r3
    2948:	4603      	mov	r3, r0
			buf += n;
    294a:	445b      	add	r3, fp
			total_len += n;
    294c:	44d9      	add	r9, fp
			len -= n;
    294e:	eba7 070b 	sub.w	r7, r7, fp
		_rxbuf_descrs[_rxbuf_index].address.bm.ownership = 0;
    2952:	f8d8 2130 	ldr.w	r2, [r8, #304]	; 0x130
    2956:	490d      	ldr	r1, [pc, #52]	; (298c <_mac_async_read+0xe8>)
    2958:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
	for (i = 0; i < j; i++) {
    295c:	f10a 0a01 	add.w	sl, sl, #1
		_rxbuf_descrs[_rxbuf_index].address.bm.ownership = 0;
    2960:	f892 1990 	ldrb.w	r1, [r2, #2448]	; 0x990
    2964:	f36f 0100 	bfc	r1, #0, #1
    2968:	f882 1990 	strb.w	r1, [r2, #2448]	; 0x990
		_rxbuf_index++;
    296c:	f8d8 2130 	ldr.w	r2, [r8, #304]	; 0x130
    2970:	3201      	adds	r2, #1
    2972:	f8c8 2130 	str.w	r2, [r8, #304]	; 0x130
		if (_rxbuf_index == CONF_GMAC_RXDESCR_NUM) {
    2976:	f8d8 2130 	ldr.w	r2, [r8, #304]	; 0x130
    297a:	2a10      	cmp	r2, #16
			_rxbuf_index = 0;
    297c:	bf04      	itt	eq
    297e:	2200      	moveq	r2, #0
    2980:	f8c8 2130 	streq.w	r2, [r8, #304]	; 0x130
    2984:	e7bb      	b.n	28fe <_mac_async_read+0x5a>
    2986:	bf00      	nop
    2988:	20006f10 	.word	0x20006f10
    298c:	20005e18 	.word	0x20005e18
    2990:	20006840 	.word	0x20006840
    2994:	0000ad77 	.word	0x0000ad77

00002998 <_mac_async_read_len>:

uint32_t _mac_async_read_len(struct _mac_async_device *const dev)
{
    2998:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (pos >= CONF_GMAC_RXDESCR_NUM) {
			pos -= CONF_GMAC_RXDESCR_NUM;
		}

		/* No more data for Ethernet package */
		if (!(_rxbuf_descrs[pos].address.bm.ownership)) {
    299a:	4c14      	ldr	r4, [pc, #80]	; (29ec <_mac_async_read_len+0x54>)
		pos = _rxbuf_index + i;
    299c:	4f14      	ldr	r7, [pc, #80]	; (29f0 <_mac_async_read_len+0x58>)
	uint32_t total_len = 0;     /* Total length of received package */
    299e:	2000      	movs	r0, #0
	bool     sof       = false; /* Start of Frame */
    29a0:	4601      	mov	r1, r0
	for (i = 0; i < CONF_GMAC_RXDESCR_NUM; i++) {
    29a2:	4602      	mov	r2, r0
    29a4:	4625      	mov	r5, r4
		pos = _rxbuf_index + i;
    29a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
    29aa:	4413      	add	r3, r2
		if (pos >= CONF_GMAC_RXDESCR_NUM) {
    29ac:	2b0f      	cmp	r3, #15
			pos -= CONF_GMAC_RXDESCR_NUM;
    29ae:	bf88      	it	hi
    29b0:	3b10      	subhi	r3, #16
		if (!(_rxbuf_descrs[pos].address.bm.ownership)) {
    29b2:	00db      	lsls	r3, r3, #3
    29b4:	18e6      	adds	r6, r4, r3
    29b6:	f896 e990 	ldrb.w	lr, [r6, #2448]	; 0x990
    29ba:	f01e 0f01 	tst.w	lr, #1
    29be:	d013      	beq.n	29e8 <_mac_async_read_len+0x50>
			break;
		}

		if (_rxbuf_descrs[pos].status.bm.sof) {
    29c0:	f896 6995 	ldrb.w	r6, [r6, #2453]	; 0x995
    29c4:	0676      	lsls	r6, r6, #25
    29c6:	d400      	bmi.n	29ca <_mac_async_read_len+0x32>
			sof = true;
		}
		if (sof == true) {
    29c8:	b131      	cbz	r1, 29d8 <_mac_async_read_len+0x40>
			total_len += _rxbuf_descrs[pos].status.bm.len;
    29ca:	18e9      	adds	r1, r5, r3
    29cc:	f8b1 1994 	ldrh.w	r1, [r1, #2452]	; 0x994
    29d0:	f3c1 010c 	ubfx	r1, r1, #0, #13
    29d4:	4408      	add	r0, r1
    29d6:	2101      	movs	r1, #1
		}

		if (_rxbuf_descrs[pos].status.bm.eof) {
    29d8:	442b      	add	r3, r5
    29da:	f893 3995 	ldrb.w	r3, [r3, #2453]	; 0x995
    29de:	09db      	lsrs	r3, r3, #7
    29e0:	d102      	bne.n	29e8 <_mac_async_read_len+0x50>
	for (i = 0; i < CONF_GMAC_RXDESCR_NUM; i++) {
    29e2:	3201      	adds	r2, #1
    29e4:	2a10      	cmp	r2, #16
    29e6:	d1de      	bne.n	29a6 <_mac_async_read_len+0xe>
			break;
		}
	}

	return total_len;
}
    29e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    29ea:	bf00      	nop
    29ec:	20005e18 	.word	0x20005e18
    29f0:	20006f10 	.word	0x20006f10

000029f4 <_mac_async_set_filter_ex>:
	hri_gmac_write_TIDM_reg(dev->hw, index, GMAC_TIDM_TID(*((uint16_t *)(filter->tid)) | filter->tid_enable << 31));
	return ERR_NONE;
}

int32_t _mac_async_set_filter_ex(struct _mac_async_device *const dev, uint8_t mac[6])
{
    29f4:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t j;
	uint8_t m;
	uint8_t n;
	uint8_t k = 0;
    29f6:	2300      	movs	r3, #0

	/* Apply the hash function */
	for (j = 0; j < 48; j += 6) {
    29f8:	461a      	mov	r2, r3
		/* Calculate the shift count */
		n = j / 8;
		m = j % 8;

		/* Update hash value */
		if (!m) {
    29fa:	f012 0707 	ands.w	r7, r2, #7
		n = j / 8;
    29fe:	ea4f 06d2 	mov.w	r6, r2, lsr #3
		if (!m) {
    2a02:	d113      	bne.n	2a2c <_mac_async_set_filter_ex+0x38>
			k ^= mac[n];
    2a04:	5d8c      	ldrb	r4, [r1, r6]
    2a06:	4063      	eors	r3, r4
	for (j = 0; j < 48; j += 6) {
    2a08:	3206      	adds	r2, #6
    2a0a:	b2d2      	uxtb	r2, r2
    2a0c:	2a30      	cmp	r2, #48	; 0x30
    2a0e:	d1f4      	bne.n	29fa <_mac_async_set_filter_ex+0x6>
			k ^= (mac[n] >> m) | (mac[n + 1] << (8 - m));
		}
	}

	/* The hash value is reduced to a 6-bit index */
	k &= 0x3F;
    2a10:	f003 023f 	and.w	r2, r3, #63	; 0x3f

	if (k < 32) {
    2a14:	2a1f      	cmp	r2, #31
    2a16:	6801      	ldr	r1, [r0, #0]
    2a18:	d813      	bhi.n	2a42 <_mac_async_set_filter_ex+0x4e>
	((Gmac *)hw)->HRB.reg |= mask;
    2a1a:	f8d1 0080 	ldr.w	r0, [r1, #128]	; 0x80
		hri_gmac_set_HRB_reg(dev->hw, 1 << k);
    2a1e:	2301      	movs	r3, #1
    2a20:	4093      	lsls	r3, r2
    2a22:	4303      	orrs	r3, r0
    2a24:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	} else {
		hri_gmac_set_HRT_reg(dev->hw, 1 << (k % 32));
	}

	return ERR_NONE;
}
    2a28:	2000      	movs	r0, #0
    2a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			k ^= (mac[n] >> m) | (mac[n + 1] << (8 - m));
    2a2c:	198c      	adds	r4, r1, r6
    2a2e:	f1c7 0508 	rsb	r5, r7, #8
    2a32:	7864      	ldrb	r4, [r4, #1]
    2a34:	40ac      	lsls	r4, r5
    2a36:	5d8d      	ldrb	r5, [r1, r6]
    2a38:	413d      	asrs	r5, r7
    2a3a:	432c      	orrs	r4, r5
    2a3c:	4063      	eors	r3, r4
    2a3e:	b2db      	uxtb	r3, r3
    2a40:	e7e2      	b.n	2a08 <_mac_async_set_filter_ex+0x14>
	((Gmac *)hw)->HRT.reg |= mask;
    2a42:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
		hri_gmac_set_HRT_reg(dev->hw, 1 << (k % 32));
    2a46:	f003 031f 	and.w	r3, r3, #31
    2a4a:	2201      	movs	r2, #1
    2a4c:	fa02 f303 	lsl.w	r3, r2, r3
    2a50:	4303      	orrs	r3, r0
    2a52:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    2a56:	e7e7      	b.n	2a28 <_mac_async_set_filter_ex+0x34>

00002a58 <_sha_sync_init>:
struct icm_descriptor icm_descriptor;
COMPILER_PACK_RESET()

int32_t _sha_sync_init(struct _sha_sync_device *const dev, void *const hw)
{
	dev->hw = hw;
    2a58:	6001      	str	r1, [r0, #0]

	return ERR_NONE;
}
    2a5a:	2000      	movs	r0, #0
    2a5c:	4770      	bx	lr
	...

00002a60 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    2a60:	4b01      	ldr	r3, [pc, #4]	; (2a68 <_mclk_init+0x8>)
    2a62:	2201      	movs	r2, #1
    2a64:	715a      	strb	r2, [r3, #5]
    2a66:	4770      	bx	lr
    2a68:	40000800 	.word	0x40000800

00002a6c <_flash_program>:
 * \param[in]  buffer        Pointer to buffer where the data to
 *                           write is stored
 * \param[in] size           The size of data to write to a page
 */
static void _flash_program(void *const hw, const uint32_t dst_addr, const uint8_t *buffer, const uint16_t size)
{
    2a6c:	b570      	push	{r4, r5, r6, lr}
	uint32_t *ptr_read    = (uint32_t *)buffer;
	uint32_t  nvm_address = dst_addr / 4;
    2a6e:	088e      	lsrs	r6, r1, #2
	return ((Nvmctrl *)hw)->PARAM.reg;
}

static inline bool hri_nvmctrl_get_STATUS_READY_bit(const void *const hw)
{
	return (((Nvmctrl *)hw)->STATUS.reg & NVMCTRL_STATUS_READY) >> NVMCTRL_STATUS_READY_Pos;
    2a70:	8a44      	ldrh	r4, [r0, #18]
	uint16_t  i;

	while (!hri_nvmctrl_get_STATUS_READY_bit(hw)) {
    2a72:	07e5      	lsls	r5, r4, #31
    2a74:	d5fc      	bpl.n	2a70 <_flash_program+0x4>
	((Nvmctrl *)hw)->CTRLB.reg = data;
    2a76:	f24a 5415 	movw	r4, #42261	; 0xa515
    2a7a:	8084      	strh	r4, [r0, #4]
	return (((Nvmctrl *)hw)->STATUS.reg & NVMCTRL_STATUS_READY) >> NVMCTRL_STATUS_READY_Pos;
    2a7c:	8a44      	ldrh	r4, [r0, #18]
		/* Wait until this module isn't busy */
	}

	hri_nvmctrl_write_CTRLB_reg(hw, NVMCTRL_CTRLB_CMD_PBC | NVMCTRL_CTRLB_CMDEX_KEY);

	while (!hri_nvmctrl_get_STATUS_READY_bit(hw)) {
    2a7e:	07e4      	lsls	r4, r4, #31
    2a80:	d5fc      	bpl.n	2a7c <_flash_program+0x10>
    2a82:	ebc2 0686 	rsb	r6, r2, r6, lsl #2
    2a86:	4614      	mov	r4, r2
		/* Wait until this module isn't busy */
	}

	/* Writes to the page buffer must be 32 bits, perform manual copy
	 * to ensure alignment */
	for (i = 0; i < size; i += 4) {
    2a88:	1aa5      	subs	r5, r4, r2
    2a8a:	b2ad      	uxth	r5, r5
    2a8c:	429d      	cmp	r5, r3
    2a8e:	d307      	bcc.n	2aa0 <_flash_program+0x34>
    2a90:	8a43      	ldrh	r3, [r0, #18]
		NVM_MEMORY[nvm_address++] = *ptr_read;
		ptr_read++;
	}

	while (!hri_nvmctrl_get_STATUS_READY_bit(hw)) {
    2a92:	07db      	lsls	r3, r3, #31
    2a94:	d5fc      	bpl.n	2a90 <_flash_program+0x24>
	((Nvmctrl *)hw)->CTRLB.reg = data;
    2a96:	f24a 5303 	movw	r3, #42243	; 0xa503
	((Nvmctrl *)hw)->ADDR.reg = data;
    2a9a:	6141      	str	r1, [r0, #20]
	((Nvmctrl *)hw)->CTRLB.reg = data;
    2a9c:	8083      	strh	r3, [r0, #4]
    2a9e:	bd70      	pop	{r4, r5, r6, pc}
		NVM_MEMORY[nvm_address++] = *ptr_read;
    2aa0:	6825      	ldr	r5, [r4, #0]
    2aa2:	51a5      	str	r5, [r4, r6]
		ptr_read++;
    2aa4:	3404      	adds	r4, #4
    2aa6:	e7ef      	b.n	2a88 <_flash_program+0x1c>

00002aa8 <_flash_init>:
{
    2aa8:	b538      	push	{r3, r4, r5, lr}
    2aaa:	460d      	mov	r5, r1
	ASSERT(device && (hw == NVMCTRL));
    2aac:	4604      	mov	r4, r0
    2aae:	b368      	cbz	r0, 2b0c <_flash_init+0x64>
    2ab0:	4817      	ldr	r0, [pc, #92]	; (2b10 <_flash_init+0x68>)
    2ab2:	1a0b      	subs	r3, r1, r0
    2ab4:	4258      	negs	r0, r3
    2ab6:	4158      	adcs	r0, r3
    2ab8:	224b      	movs	r2, #75	; 0x4b
    2aba:	4916      	ldr	r1, [pc, #88]	; (2b14 <_flash_init+0x6c>)
    2abc:	4b16      	ldr	r3, [pc, #88]	; (2b18 <_flash_init+0x70>)
    2abe:	4798      	blx	r3
	device->hw = hw;
    2ac0:	6125      	str	r5, [r4, #16]
	return ((Nvmctrl *)hw)->CTRLA.reg;
    2ac2:	882b      	ldrh	r3, [r5, #0]
	ctrla &= ~(NVMCTRL_CTRLA_CACHEDIS0 | NVMCTRL_CTRLA_CACHEDIS1 | NVMCTRL_CTRLA_PRM_Msk);
    2ac4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
    2ac8:	049b      	lsls	r3, r3, #18
    2aca:	0c9b      	lsrs	r3, r3, #18
	hri_nvmctrl_write_CTRLA_reg(hw, ctrla);
    2acc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
    2ad0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
	((Nvmctrl *)hw)->CTRLA.reg = data;
    2ad4:	802b      	strh	r3, [r5, #0]
	_nvm_dev = device;
    2ad6:	4b11      	ldr	r3, [pc, #68]	; (2b1c <_flash_init+0x74>)
    2ad8:	601c      	str	r4, [r3, #0]
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2ada:	4b11      	ldr	r3, [pc, #68]	; (2b20 <_flash_init+0x78>)
    2adc:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    2ae0:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
    2ae4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2ae8:	f3bf 8f6f 	isb	sy
    2aec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2af0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    2af4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2af8:	f3bf 8f6f 	isb	sy
}
    2afc:	2000      	movs	r0, #0
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2afe:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    2b02:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2b06:	6019      	str	r1, [r3, #0]
    2b08:	601a      	str	r2, [r3, #0]
    2b0a:	bd38      	pop	{r3, r4, r5, pc}
    2b0c:	e7d4      	b.n	2ab8 <_flash_init+0x10>
    2b0e:	bf00      	nop
    2b10:	41004000 	.word	0x41004000
    2b14:	0000c110 	.word	0x0000c110
    2b18:	00002035 	.word	0x00002035
    2b1c:	20007044 	.word	0x20007044
    2b20:	e000e100 	.word	0xe000e100

00002b24 <_flash_get_page_size>:
}
    2b24:	f44f 7000 	mov.w	r0, #512	; 0x200
    2b28:	4770      	bx	lr

00002b2a <_flash_get_total_pages>:
	return (uint32_t)hri_nvmctrl_read_PARAM_NVMP_bf(device->hw);
    2b2a:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->PARAM.reg & NVMCTRL_PARAM_NVMP_Msk) >> NVMCTRL_PARAM_NVMP_Pos;
    2b2c:	6898      	ldr	r0, [r3, #8]
}
    2b2e:	b280      	uxth	r0, r0
    2b30:	4770      	bx	lr

00002b32 <_flash_read>:
{
    2b32:	b510      	push	{r4, lr}
	while (!hri_nvmctrl_get_STATUS_READY_bit(device->hw)) {
    2b34:	6904      	ldr	r4, [r0, #16]
	return (((Nvmctrl *)hw)->STATUS.reg & NVMCTRL_STATUS_READY) >> NVMCTRL_STATUS_READY_Pos;
    2b36:	8a60      	ldrh	r0, [r4, #18]
    2b38:	07c0      	lsls	r0, r0, #31
    2b3a:	d5fc      	bpl.n	2b36 <_flash_read+0x4>
    2b3c:	4413      	add	r3, r2
    2b3e:	4610      	mov	r0, r2
	for (i = 0; i < length; i++) {
    2b40:	4298      	cmp	r0, r3
    2b42:	d100      	bne.n	2b46 <_flash_read+0x14>
}
    2b44:	bd10      	pop	{r4, pc}
		buffer[i] = nvm_addr[src_addr + i];
    2b46:	1a84      	subs	r4, r0, r2
    2b48:	5c64      	ldrb	r4, [r4, r1]
    2b4a:	f800 4b01 	strb.w	r4, [r0], #1
    2b4e:	e7f7      	b.n	2b40 <_flash_read+0xe>

00002b50 <_flash_write>:
{
    2b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2b54:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
    2b58:	b083      	sub	sp, #12
    2b5a:	4681      	mov	r9, r0
    2b5c:	4692      	mov	sl, r2
    2b5e:	4698      	mov	r8, r3
	uint32_t wr_start_addr = dst_addr;
    2b60:	460e      	mov	r6, r1
		block_start_addr = wr_start_addr & ~(NVMCTRL_BLOCK_SIZE - 1);
    2b62:	f426 54ff 	bic.w	r4, r6, #8160	; 0x1fe0
    2b66:	f024 041f 	bic.w	r4, r4, #31
		block_end_addr   = block_start_addr + NVMCTRL_BLOCK_SIZE - 1;
    2b6a:	f504 53ff 	add.w	r3, r4, #8160	; 0x1fe0
    2b6e:	331f      	adds	r3, #31
    2b70:	9301      	str	r3, [sp, #4]
    2b72:	f504 5b00 	add.w	fp, r4, #8192	; 0x2000
    2b76:	4625      	mov	r5, r4
			_flash_read(device, block_start_addr + i * NVMCTRL_PAGE_SIZE, tmp_buffer[i], NVMCTRL_PAGE_SIZE);
    2b78:	1b2a      	subs	r2, r5, r4
    2b7a:	a902      	add	r1, sp, #8
    2b7c:	440a      	add	r2, r1
    2b7e:	f44f 7300 	mov.w	r3, #512	; 0x200
    2b82:	4629      	mov	r1, r5
    2b84:	4648      	mov	r0, r9
    2b86:	4f24      	ldr	r7, [pc, #144]	; (2c18 <_flash_write+0xc8>)
    2b88:	f505 7500 	add.w	r5, r5, #512	; 0x200
    2b8c:	47b8      	blx	r7
		for (i = 0; i < NVMCTRL_BLOCK_PAGES; i++) {
    2b8e:	455d      	cmp	r5, fp
    2b90:	d1f2      	bne.n	2b78 <_flash_write+0x28>
		j = (wr_start_addr - block_start_addr) / NVMCTRL_PAGE_SIZE;
    2b92:	1b33      	subs	r3, r6, r4
		while ((wr_start_addr <= block_end_addr) && (length > 0)) {
    2b94:	4652      	mov	r2, sl
		j = (wr_start_addr - block_start_addr) / NVMCTRL_PAGE_SIZE;
    2b96:	0a59      	lsrs	r1, r3, #9
    2b98:	1ab6      	subs	r6, r6, r2
    2b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
		while ((wr_start_addr <= block_end_addr) && (length > 0)) {
    2b9e:	9801      	ldr	r0, [sp, #4]
    2ba0:	eb06 0b02 	add.w	fp, r6, r2
    2ba4:	4558      	cmp	r0, fp
    2ba6:	4692      	mov	sl, r2
    2ba8:	d302      	bcc.n	2bb0 <_flash_write+0x60>
    2baa:	f1b8 0f00 	cmp.w	r8, #0
    2bae:	d123      	bne.n	2bf8 <_flash_write+0xa8>
		_flash_erase_block(device->hw, block_start_addr);
    2bb0:	f8d9 3010 	ldr.w	r3, [r9, #16]
    2bb4:	8a5a      	ldrh	r2, [r3, #18]
	while (!hri_nvmctrl_get_STATUS_READY_bit(hw)) {
    2bb6:	07d2      	lsls	r2, r2, #31
    2bb8:	d5fc      	bpl.n	2bb4 <_flash_write+0x64>
	((Nvmctrl *)hw)->CTRLB.reg = data;
    2bba:	f24a 5201 	movw	r2, #42241	; 0xa501
	((Nvmctrl *)hw)->ADDR.reg = data;
    2bbe:	615c      	str	r4, [r3, #20]
	((Nvmctrl *)hw)->CTRLB.reg = data;
    2bc0:	4626      	mov	r6, r4
    2bc2:	809a      	strh	r2, [r3, #4]
			_flash_program(device->hw, block_start_addr + i * NVMCTRL_PAGE_SIZE, tmp_buffer[i], NVMCTRL_PAGE_SIZE);
    2bc4:	1b32      	subs	r2, r6, r4
    2bc6:	a902      	add	r1, sp, #8
    2bc8:	440a      	add	r2, r1
    2bca:	f44f 7300 	mov.w	r3, #512	; 0x200
    2bce:	4631      	mov	r1, r6
    2bd0:	f8d9 0010 	ldr.w	r0, [r9, #16]
    2bd4:	4f11      	ldr	r7, [pc, #68]	; (2c1c <_flash_write+0xcc>)
    2bd6:	f506 7600 	add.w	r6, r6, #512	; 0x200
    2bda:	47b8      	blx	r7
		for (i = 0; i < NVMCTRL_BLOCK_PAGES; i++) {
    2bdc:	42ae      	cmp	r6, r5
    2bde:	d1f1      	bne.n	2bc4 <_flash_write+0x74>
	} while (block_end_addr < (wr_start_addr + length - 1));
    2be0:	eb08 030b 	add.w	r3, r8, fp
    2be4:	9a01      	ldr	r2, [sp, #4]
    2be6:	3b01      	subs	r3, #1
    2be8:	429a      	cmp	r2, r3
    2bea:	465e      	mov	r6, fp
    2bec:	d3b9      	bcc.n	2b62 <_flash_write+0x12>
}
    2bee:	f50d 5d00 	add.w	sp, sp, #8192	; 0x2000
    2bf2:	b003      	add	sp, #12
    2bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tmp_buffer[j][k] = *buffer;
    2bf8:	a802      	add	r0, sp, #8
    2bfa:	eb00 2041 	add.w	r0, r0, r1, lsl #9
    2bfe:	f89a e000 	ldrb.w	lr, [sl]
    2c02:	f800 e003 	strb.w	lr, [r0, r3]
			k                = (k + 1) % NVMCTRL_PAGE_SIZE;
    2c06:	3301      	adds	r3, #1
    2c08:	f3c3 0308 	ubfx	r3, r3, #0, #9
    2c0c:	3201      	adds	r2, #1
			if (0 == k) {
    2c0e:	b903      	cbnz	r3, 2c12 <_flash_write+0xc2>
				j++;
    2c10:	3101      	adds	r1, #1
			length--;
    2c12:	f108 38ff 	add.w	r8, r8, #4294967295
    2c16:	e7c2      	b.n	2b9e <_flash_write+0x4e>
    2c18:	00002b33 	.word	0x00002b33
    2c1c:	00002a6d 	.word	0x00002a6d

00002c20 <_flash_append>:
{
    2c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t page_start_addr = dst_addr & ~(NVMCTRL_PAGE_SIZE - 1);
    2c24:	f421 75ff 	bic.w	r5, r1, #510	; 0x1fe
    2c28:	f025 0501 	bic.w	r5, r5, #1
	if (dst_addr != page_start_addr) {
    2c2c:	42a9      	cmp	r1, r5
{
    2c2e:	4607      	mov	r7, r0
    2c30:	4690      	mov	r8, r2
    2c32:	461e      	mov	r6, r3
	if (dst_addr != page_start_addr) {
    2c34:	d012      	beq.n	2c5c <_flash_append+0x3c>
		size = min(length, NVMCTRL_PAGE_SIZE - (dst_addr - page_start_addr));
    2c36:	1a6c      	subs	r4, r5, r1
    2c38:	f504 7400 	add.w	r4, r4, #512	; 0x200
    2c3c:	429c      	cmp	r4, r3
    2c3e:	bf28      	it	cs
    2c40:	461c      	movcs	r4, r3
		_flash_program(device->hw, dst_addr, buffer, size);
    2c42:	b2a3      	uxth	r3, r4
    2c44:	6900      	ldr	r0, [r0, #16]
    2c46:	f8df 903c 	ldr.w	r9, [pc, #60]	; 2c84 <_flash_append+0x64>
    2c4a:	47c8      	blx	r9
		page_start_addr += NVMCTRL_PAGE_SIZE;
    2c4c:	f505 7500 	add.w	r5, r5, #512	; 0x200
		_flash_program(device->hw, page_start_addr, buffer + offset, size);
    2c50:	f8df a030 	ldr.w	sl, [pc, #48]	; 2c84 <_flash_append+0x64>
	while (offset < length) {
    2c54:	42b4      	cmp	r4, r6
    2c56:	d303      	bcc.n	2c60 <_flash_append+0x40>
}
    2c58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32_t offset = 0;
    2c5c:	2400      	movs	r4, #0
    2c5e:	e7f7      	b.n	2c50 <_flash_append+0x30>
		size = min(length - offset, NVMCTRL_PAGE_SIZE);
    2c60:	eba6 0904 	sub.w	r9, r6, r4
    2c64:	f5b9 7f00 	cmp.w	r9, #512	; 0x200
    2c68:	bf28      	it	cs
    2c6a:	f44f 7900 	movcs.w	r9, #512	; 0x200
		_flash_program(device->hw, page_start_addr, buffer + offset, size);
    2c6e:	eb08 0204 	add.w	r2, r8, r4
    2c72:	4629      	mov	r1, r5
    2c74:	fa1f f389 	uxth.w	r3, r9
    2c78:	6938      	ldr	r0, [r7, #16]
    2c7a:	47d0      	blx	sl
		page_start_addr += NVMCTRL_PAGE_SIZE;
    2c7c:	f505 7500 	add.w	r5, r5, #512	; 0x200
		offset += size;
    2c80:	444c      	add	r4, r9
    2c82:	e7e7      	b.n	2c54 <_flash_append+0x34>
    2c84:	00002a6d 	.word	0x00002a6d

00002c88 <_flash_erase>:
{
    2c88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	block_start_addr = dst_addr & ~(NVMCTRL_BLOCK_SIZE - 1);
    2c8c:	f421 54ff 	bic.w	r4, r1, #8160	; 0x1fe0
{
    2c90:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
    2c94:	460e      	mov	r6, r1
    2c96:	4607      	mov	r7, r0
    2c98:	4615      	mov	r5, r2
	block_start_addr = dst_addr & ~(NVMCTRL_BLOCK_SIZE - 1);
    2c9a:	f024 041f 	bic.w	r4, r4, #31
	memset(tmp_buffer, 0xFF, NVMCTRL_PAGE_SIZE);
    2c9e:	f44f 7200 	mov.w	r2, #512	; 0x200
    2ca2:	21ff      	movs	r1, #255	; 0xff
    2ca4:	4668      	mov	r0, sp
    2ca6:	4b20      	ldr	r3, [pc, #128]	; (2d28 <_flash_erase+0xa0>)
    2ca8:	4798      	blx	r3
	if (dst_addr != block_start_addr) {
    2caa:	42a6      	cmp	r6, r4
    2cac:	d11d      	bne.n	2cea <_flash_erase+0x62>
{
    2cae:	4622      	mov	r2, r4
    2cb0:	462b      	mov	r3, r5
    2cb2:	f24a 5001 	movw	r0, #42241	; 0xa501
	while (page_nums >= NVMCTRL_BLOCK_PAGES) {
    2cb6:	2b0f      	cmp	r3, #15
    2cb8:	d82c      	bhi.n	2d14 <_flash_erase+0x8c>
    2cba:	092b      	lsrs	r3, r5, #4
	if (page_nums != 0) {
    2cbc:	ebb5 1503 	subs.w	r5, r5, r3, lsl #4
    2cc0:	eb04 2443 	add.w	r4, r4, r3, lsl #9
    2cc4:	d00d      	beq.n	2ce2 <_flash_erase+0x5a>
			_flash_write(device, block_start_addr, tmp_buffer, NVMCTRL_PAGE_SIZE);
    2cc6:	f8df 8064 	ldr.w	r8, [pc, #100]	; 2d2c <_flash_erase+0xa4>
    2cca:	2600      	movs	r6, #0
    2ccc:	4621      	mov	r1, r4
    2cce:	f44f 7300 	mov.w	r3, #512	; 0x200
    2cd2:	466a      	mov	r2, sp
    2cd4:	4638      	mov	r0, r7
		for (i = 0; i < page_nums; i++) {
    2cd6:	3601      	adds	r6, #1
			_flash_write(device, block_start_addr, tmp_buffer, NVMCTRL_PAGE_SIZE);
    2cd8:	47c0      	blx	r8
		for (i = 0; i < page_nums; i++) {
    2cda:	42b5      	cmp	r5, r6
			block_start_addr += NVMCTRL_PAGE_SIZE;
    2cdc:	f504 7400 	add.w	r4, r4, #512	; 0x200
		for (i = 0; i < page_nums; i++) {
    2ce0:	d1f4      	bne.n	2ccc <_flash_erase+0x44>
}
    2ce2:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
    2ce6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			_flash_write(device, dst_addr, tmp_buffer, NVMCTRL_PAGE_SIZE);
    2cea:	f8df 9040 	ldr.w	r9, [pc, #64]	; 2d2c <_flash_erase+0xa4>
		block_start_addr += NVMCTRL_BLOCK_SIZE;
    2cee:	f504 5400 	add.w	r4, r4, #8192	; 0x2000
    2cf2:	f506 58f0 	add.w	r8, r6, #7680	; 0x1e00
			_flash_write(device, dst_addr, tmp_buffer, NVMCTRL_PAGE_SIZE);
    2cf6:	f44f 7300 	mov.w	r3, #512	; 0x200
    2cfa:	466a      	mov	r2, sp
    2cfc:	4631      	mov	r1, r6
    2cfe:	4638      	mov	r0, r7
    2d00:	47c8      	blx	r9
			if (--page_nums == 0) {
    2d02:	3d01      	subs	r5, #1
    2d04:	d0ed      	beq.n	2ce2 <_flash_erase+0x5a>
			dst_addr += NVMCTRL_PAGE_SIZE;
    2d06:	f506 7600 	add.w	r6, r6, #512	; 0x200
			if (dst_addr == block_start_addr) {
    2d0a:	42b4      	cmp	r4, r6
    2d0c:	d0cf      	beq.n	2cae <_flash_erase+0x26>
		for (i = 0; i < NVMCTRL_BLOCK_PAGES - 1; i++) {
    2d0e:	4546      	cmp	r6, r8
    2d10:	d1f1      	bne.n	2cf6 <_flash_erase+0x6e>
    2d12:	e7cc      	b.n	2cae <_flash_erase+0x26>
		_flash_erase_block(device->hw, block_start_addr);
    2d14:	6939      	ldr	r1, [r7, #16]
	return (((Nvmctrl *)hw)->STATUS.reg & NVMCTRL_STATUS_READY) >> NVMCTRL_STATUS_READY_Pos;
    2d16:	8a4e      	ldrh	r6, [r1, #18]
	while (!hri_nvmctrl_get_STATUS_READY_bit(hw)) {
    2d18:	07f6      	lsls	r6, r6, #31
    2d1a:	d5fc      	bpl.n	2d16 <_flash_erase+0x8e>
	((Nvmctrl *)hw)->ADDR.reg = data;
    2d1c:	614a      	str	r2, [r1, #20]
		page_nums -= NVMCTRL_BLOCK_PAGES;
    2d1e:	3b10      	subs	r3, #16
	((Nvmctrl *)hw)->CTRLB.reg = data;
    2d20:	8088      	strh	r0, [r1, #4]
		block_start_addr += NVMCTRL_PAGE_SIZE;
    2d22:	f502 7200 	add.w	r2, r2, #512	; 0x200
    2d26:	e7c6      	b.n	2cb6 <_flash_erase+0x2e>
    2d28:	0000adc1 	.word	0x0000adc1
    2d2c:	00002b51 	.word	0x00002b51

00002d30 <_flash_is_locked>:
	return !(hri_nvmctrl_get_RUNLOCK_reg(device->hw, 1 << region_id));
    2d30:	6903      	ldr	r3, [r0, #16]
    2d32:	f3c1 318f 	ubfx	r1, r1, #14, #16

static inline hri_nvmctrl_runlock_reg_t hri_nvmctrl_get_RUNLOCK_reg(const void *const         hw,
                                                                    hri_nvmctrl_runlock_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Nvmctrl *)hw)->RUNLOCK.reg;
    2d36:	699a      	ldr	r2, [r3, #24]
    2d38:	2301      	movs	r3, #1
    2d3a:	fa03 f101 	lsl.w	r1, r3, r1
    2d3e:	4211      	tst	r1, r2
}
    2d40:	bf0c      	ite	eq
    2d42:	4618      	moveq	r0, r3
    2d44:	2000      	movne	r0, #0
    2d46:	4770      	bx	lr

00002d48 <NVMCTRL_1_Handler>:
/**
 * \internal NVM 1 interrupt handler
 */
void NVMCTRL_1_Handler(void)
{
	_nvm_interrupt_handler(_nvm_dev);
    2d48:	4b09      	ldr	r3, [pc, #36]	; (2d70 <NVMCTRL_1_Handler+0x28>)
    2d4a:	6818      	ldr	r0, [r3, #0]
	void *const hw = device->hw;
    2d4c:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
    2d4e:	8a1a      	ldrh	r2, [r3, #16]
	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
    2d50:	07d2      	lsls	r2, r2, #31
    2d52:	d504      	bpl.n	2d5e <NVMCTRL_1_Handler+0x16>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
    2d54:	2201      	movs	r2, #1
    2d56:	821a      	strh	r2, [r3, #16]
		if (NULL != device->flash_cb.ready_cb) {
    2d58:	6803      	ldr	r3, [r0, #0]
		if (NULL != device->flash_cb.error_cb) {
    2d5a:	b143      	cbz	r3, 2d6e <NVMCTRL_1_Handler+0x26>
			device->flash_cb.error_cb(device);
    2d5c:	4718      	bx	r3
	return ((Nvmctrl *)hw)->INTFLAG.reg;
    2d5e:	8a1a      	ldrh	r2, [r3, #16]
    2d60:	b292      	uxth	r2, r2
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
    2d62:	b122      	cbz	r2, 2d6e <NVMCTRL_1_Handler+0x26>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    2d64:	f240 225e 	movw	r2, #606	; 0x25e
    2d68:	821a      	strh	r2, [r3, #16]
		if (NULL != device->flash_cb.error_cb) {
    2d6a:	6843      	ldr	r3, [r0, #4]
    2d6c:	e7f5      	b.n	2d5a <NVMCTRL_1_Handler+0x12>
    2d6e:	4770      	bx	lr
    2d70:	20007044 	.word	0x20007044

00002d74 <NVMCTRL_0_Handler>:
    2d74:	4b00      	ldr	r3, [pc, #0]	; (2d78 <NVMCTRL_0_Handler+0x4>)
    2d76:	4718      	bx	r3
    2d78:	00002d49 	.word	0x00002d49

00002d7c <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    2d7c:	4b03      	ldr	r3, [pc, #12]	; (2d8c <_osc32kctrl_init_sources+0x10>)
    2d7e:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    2d80:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    2d84:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    2d86:	2201      	movs	r2, #1
    2d88:	741a      	strb	r2, [r3, #16]
    2d8a:	4770      	bx	lr
    2d8c:	40001400 	.word	0x40001400

00002d90 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    2d90:	4770      	bx	lr
	...

00002d94 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    2d94:	4a26      	ldr	r2, [pc, #152]	; (2e30 <_oscctrl_init_referenced_generators+0x9c>)
    2d96:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    2d98:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    2d9c:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    2da0:	6213      	str	r3, [r2, #32]
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    2da2:	4b24      	ldr	r3, [pc, #144]	; (2e34 <_oscctrl_init_referenced_generators+0xa0>)
    2da4:	2200      	movs	r2, #0
    2da6:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    2da8:	4a23      	ldr	r2, [pc, #140]	; (2e38 <_oscctrl_init_referenced_generators+0xa4>)
    2daa:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2dac:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    2db0:	f012 0210 	ands.w	r2, r2, #16
    2db4:	d1fa      	bne.n	2dac <_oscctrl_init_referenced_generators+0x18>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    2db6:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2dba:	4a1e      	ldr	r2, [pc, #120]	; (2e34 <_oscctrl_init_referenced_generators+0xa0>)
    2dbc:	4613      	mov	r3, r2
    2dbe:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    2dc2:	0749      	lsls	r1, r1, #29
    2dc4:	d4fb      	bmi.n	2dbe <_oscctrl_init_referenced_generators+0x2a>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    2dc6:	2142      	movs	r1, #66	; 0x42
    2dc8:	7711      	strb	r1, [r2, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2dca:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    2dce:	0792      	lsls	r2, r2, #30
    2dd0:	d4fb      	bmi.n	2dca <_oscctrl_init_referenced_generators+0x36>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    2dd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    2dd4:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2dd6:	4b17      	ldr	r3, [pc, #92]	; (2e34 <_oscctrl_init_referenced_generators+0xa0>)
    2dd8:	461a      	mov	r2, r3
    2dda:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    2dde:	0708      	lsls	r0, r1, #28
    2de0:	d4fb      	bmi.n	2dda <_oscctrl_init_referenced_generators+0x46>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    2de2:	21aa      	movs	r1, #170	; 0xaa
    2de4:	f883 1020 	strb.w	r1, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2de8:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    2dec:	0759      	lsls	r1, r3, #29
    2dee:	d4fb      	bmi.n	2de8 <_oscctrl_init_referenced_generators+0x54>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    2df0:	f892 3020 	ldrb.w	r3, [r2, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    2df4:	f013 0f01 	tst.w	r3, #1
    2df8:	4b0e      	ldr	r3, [pc, #56]	; (2e34 <_oscctrl_init_referenced_generators+0xa0>)
    2dfa:	d014      	beq.n	2e26 <_oscctrl_init_referenced_generators+0x92>
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    2dfc:	691a      	ldr	r2, [r3, #16]
	tmp &= mask;
    2dfe:	f402 6210 	and.w	r2, r2, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    2e02:	f5b2 6f10 	cmp.w	r2, #2304	; 0x900
    2e06:	d1f9      	bne.n	2dfc <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLA.reg |= OSCCTRL_DFLLCTRLA_ONDEMAND;
    2e08:	7f1a      	ldrb	r2, [r3, #28]
    2e0a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    2e0e:	771a      	strb	r2, [r3, #28]
	return tmp;
}

static inline hri_gclk_syncbusy_reg_t hri_gclk_read_SYNCBUSY_reg(const void *const hw)
{
	return ((Gclk *)hw)->SYNCBUSY.reg;
    2e10:	4a07      	ldr	r2, [pc, #28]	; (2e30 <_oscctrl_init_referenced_generators+0x9c>)
    2e12:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    2e14:	2b00      	cmp	r3, #0
    2e16:	d1fc      	bne.n	2e12 <_oscctrl_init_referenced_generators+0x7e>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    2e18:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    2e1a:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    2e1e:	f043 0306 	orr.w	r3, r3, #6
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    2e22:	6213      	str	r3, [r2, #32]
    2e24:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    2e26:	691a      	ldr	r2, [r3, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    2e28:	05d2      	lsls	r2, r2, #23
    2e2a:	d5fc      	bpl.n	2e26 <_oscctrl_init_referenced_generators+0x92>
    2e2c:	e7ec      	b.n	2e08 <_oscctrl_init_referenced_generators+0x74>
    2e2e:	bf00      	nop
    2e30:	40001c00 	.word	0x40001c00
    2e34:	40001000 	.word	0x40001000
    2e38:	7c80bb80 	.word	0x7c80bb80

00002e3c <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    2e3c:	b507      	push	{r0, r1, r2, lr}
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    2e3e:	4a0c      	ldr	r2, [pc, #48]	; (2e70 <RAMECC_Handler+0x34>)
    2e40:	7893      	ldrb	r3, [r2, #2]
    2e42:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    2e44:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    2e46:	9b01      	ldr	r3, [sp, #4]
    2e48:	0799      	lsls	r1, r3, #30
    2e4a:	d507      	bpl.n	2e5c <RAMECC_Handler+0x20>
    2e4c:	4b09      	ldr	r3, [pc, #36]	; (2e74 <RAMECC_Handler+0x38>)
    2e4e:	681b      	ldr	r3, [r3, #0]
    2e50:	b123      	cbz	r3, 2e5c <RAMECC_Handler+0x20>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    2e52:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    2e54:	4798      	blx	r3
	} else {
		return;
	}
}
    2e56:	b003      	add	sp, #12
    2e58:	f85d fb04 	ldr.w	pc, [sp], #4
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    2e5c:	9b01      	ldr	r3, [sp, #4]
    2e5e:	07db      	lsls	r3, r3, #31
    2e60:	d5f9      	bpl.n	2e56 <RAMECC_Handler+0x1a>
    2e62:	4b04      	ldr	r3, [pc, #16]	; (2e74 <RAMECC_Handler+0x38>)
    2e64:	685b      	ldr	r3, [r3, #4]
    2e66:	2b00      	cmp	r3, #0
    2e68:	d0f5      	beq.n	2e56 <RAMECC_Handler+0x1a>
    2e6a:	4a01      	ldr	r2, [pc, #4]	; (2e70 <RAMECC_Handler+0x34>)
    2e6c:	e7f1      	b.n	2e52 <RAMECC_Handler+0x16>
    2e6e:	bf00      	nop
    2e70:	41020000 	.word	0x41020000
    2e74:	20007560 	.word	0x20007560

00002e78 <__NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
    2e78:	2800      	cmp	r0, #0
    2e7a:	db08      	blt.n	2e8e <__NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2e7c:	0942      	lsrs	r2, r0, #5
    2e7e:	2301      	movs	r3, #1
    2e80:	f000 001f 	and.w	r0, r0, #31
    2e84:	fa03 f000 	lsl.w	r0, r3, r0
    2e88:	4b01      	ldr	r3, [pc, #4]	; (2e90 <__NVIC_EnableIRQ+0x18>)
    2e8a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
    2e8e:	4770      	bx	lr
    2e90:	e000e100 	.word	0xe000e100

00002e94 <__NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
    2e94:	2800      	cmp	r0, #0
    2e96:	db0d      	blt.n	2eb4 <__NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2e98:	0943      	lsrs	r3, r0, #5
    2e9a:	2201      	movs	r2, #1
    2e9c:	f000 001f 	and.w	r0, r0, #31
    2ea0:	fa02 f000 	lsl.w	r0, r2, r0
    2ea4:	3320      	adds	r3, #32
    2ea6:	4a04      	ldr	r2, [pc, #16]	; (2eb8 <__NVIC_DisableIRQ+0x24>)
    2ea8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2eac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2eb0:	f3bf 8f6f 	isb	sy
    2eb4:	4770      	bx	lr
    2eb6:	bf00      	nop
    2eb8:	e000e100 	.word	0xe000e100

00002ebc <__NVIC_ClearPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
    2ebc:	2800      	cmp	r0, #0
    2ebe:	db09      	blt.n	2ed4 <__NVIC_ClearPendingIRQ+0x18>
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2ec0:	0943      	lsrs	r3, r0, #5
    2ec2:	2201      	movs	r2, #1
    2ec4:	f000 001f 	and.w	r0, r0, #31
    2ec8:	fa02 f000 	lsl.w	r0, r2, r0
    2ecc:	3360      	adds	r3, #96	; 0x60
    2ece:	4a02      	ldr	r2, [pc, #8]	; (2ed8 <__NVIC_ClearPendingIRQ+0x1c>)
    2ed0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    2ed4:	4770      	bx	lr
    2ed6:	bf00      	nop
    2ed8:	e000e100 	.word	0xe000e100

00002edc <hri_sercomusart_wait_for_sync>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
}

static inline void hri_sercomusart_wait_for_sync(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2edc:	69c3      	ldr	r3, [r0, #28]
    2ede:	420b      	tst	r3, r1
    2ee0:	d1fc      	bne.n	2edc <hri_sercomusart_wait_for_sync>
	};
}
    2ee2:	4770      	bx	lr

00002ee4 <hri_sercomusart_clear_CTRLA_ENABLE_bit>:
	((Sercom *)hw)->USART.CTRLA.reg = tmp;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomusart_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    2ee4:	b508      	push	{r3, lr}
	SERCOM_CRITICAL_SECTION_ENTER();
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    2ee6:	2103      	movs	r1, #3
    2ee8:	4b03      	ldr	r3, [pc, #12]	; (2ef8 <hri_sercomusart_clear_CTRLA_ENABLE_bit+0x14>)
    2eea:	4798      	blx	r3
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    2eec:	6803      	ldr	r3, [r0, #0]
    2eee:	f023 0302 	bic.w	r3, r3, #2
    2ef2:	6003      	str	r3, [r0, #0]
    2ef4:	bd08      	pop	{r3, pc}
    2ef6:	bf00      	nop
    2ef8:	00002edd 	.word	0x00002edd

00002efc <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    2efc:	b570      	push	{r4, r5, r6, lr}
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    2efe:	4d0b      	ldr	r5, [pc, #44]	; (2f2c <_sercom_get_hardware_index+0x30>)
{
    2f00:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    2f02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    2f04:	b088      	sub	sp, #32
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    2f06:	466c      	mov	r4, sp
    2f08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2f0a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2f0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2f12:	2000      	movs	r0, #0
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    2f14:	f85d 3020 	ldr.w	r3, [sp, r0, lsl #2]
    2f18:	42b3      	cmp	r3, r6
    2f1a:	d102      	bne.n	2f22 <_sercom_get_hardware_index+0x26>
			return i;
    2f1c:	b2c0      	uxtb	r0, r0
		}
	}
	return 0;
}
    2f1e:	b008      	add	sp, #32
    2f20:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2f22:	3001      	adds	r0, #1
    2f24:	2808      	cmp	r0, #8
    2f26:	d1f5      	bne.n	2f14 <_sercom_get_hardware_index+0x18>
	return 0;
    2f28:	2000      	movs	r0, #0
    2f2a:	e7f8      	b.n	2f1e <_sercom_get_hardware_index+0x22>
    2f2c:	0000c130 	.word	0x0000c130

00002f30 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    2f30:	b510      	push	{r4, lr}
	void *hw = device->hw;
    2f32:	6984      	ldr	r4, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    2f34:	7e22      	ldrb	r2, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    2f36:	07d1      	lsls	r1, r2, #31
{
    2f38:	4603      	mov	r3, r0
	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    2f3a:	d508      	bpl.n	2f4e <_sercom_usart_interrupt_handler+0x1e>
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    2f3c:	7da2      	ldrb	r2, [r4, #22]
    2f3e:	07d2      	lsls	r2, r2, #31
    2f40:	d505      	bpl.n	2f4e <_sercom_usart_interrupt_handler+0x1e>
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    2f42:	2201      	movs	r2, #1
    2f44:	7522      	strb	r2, [r4, #20]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
    2f46:	6803      	ldr	r3, [r0, #0]
		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
		status = hri_sercomusart_read_STATUS_reg(hw);
		hri_sercomusart_clear_STATUS_reg(hw, status);
	}
}
    2f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		device->usart_cb.tx_byte_sent(device);
    2f4c:	4718      	bx	r3
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    2f4e:	7e22      	ldrb	r2, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    2f50:	0790      	lsls	r0, r2, #30
    2f52:	d509      	bpl.n	2f68 <_sercom_usart_interrupt_handler+0x38>
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    2f54:	7da2      	ldrb	r2, [r4, #22]
    2f56:	0791      	lsls	r1, r2, #30
    2f58:	d506      	bpl.n	2f68 <_sercom_usart_interrupt_handler+0x38>
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    2f5a:	2202      	movs	r2, #2
    2f5c:	7522      	strb	r2, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    2f5e:	689a      	ldr	r2, [r3, #8]
    2f60:	4618      	mov	r0, r3
}
    2f62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		device->usart_cb.tx_done_cb(device);
    2f66:	4710      	bx	r2
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    2f68:	7e22      	ldrb	r2, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    2f6a:	0752      	lsls	r2, r2, #29
    2f6c:	d50d      	bpl.n	2f8a <_sercom_usart_interrupt_handler+0x5a>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    2f6e:	8b62      	ldrh	r2, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    2f70:	f002 0237 	and.w	r2, r2, #55	; 0x37
    2f74:	b112      	cbz	r2, 2f7c <_sercom_usart_interrupt_handler+0x4c>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    2f76:	23ff      	movs	r3, #255	; 0xff
    2f78:	8363      	strh	r3, [r4, #26]
    2f7a:	bd10      	pop	{r4, pc}
	return ((Sercom *)hw)->USART.DATA.reg;
    2f7c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    2f7e:	685a      	ldr	r2, [r3, #4]
    2f80:	b2c9      	uxtb	r1, r1
    2f82:	4618      	mov	r0, r3
}
    2f84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    2f88:	4710      	bx	r2
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    2f8a:	7e22      	ldrb	r2, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    2f8c:	09d2      	lsrs	r2, r2, #7
    2f8e:	d0f4      	beq.n	2f7a <_sercom_usart_interrupt_handler+0x4a>
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    2f90:	2280      	movs	r2, #128	; 0x80
    2f92:	7622      	strb	r2, [r4, #24]
		device->usart_cb.error_cb(device);
    2f94:	68da      	ldr	r2, [r3, #12]
    2f96:	4618      	mov	r0, r3
    2f98:	4790      	blx	r2
	return ((Sercom *)hw)->USART.STATUS.reg;
    2f9a:	8b63      	ldrh	r3, [r4, #26]
    2f9c:	b29b      	uxth	r3, r3
    2f9e:	e7eb      	b.n	2f78 <_sercom_usart_interrupt_handler+0x48>

00002fa0 <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM0) {
    2fa0:	4b05      	ldr	r3, [pc, #20]	; (2fb8 <_sercom_init_irq_param+0x18>)
    2fa2:	4298      	cmp	r0, r3
    2fa4:	d102      	bne.n	2fac <_sercom_init_irq_param+0xc>
		_sercom0_dev = (struct _usart_async_device *)dev;
    2fa6:	4b05      	ldr	r3, [pc, #20]	; (2fbc <_sercom_init_irq_param+0x1c>)
    2fa8:	6019      	str	r1, [r3, #0]
    2faa:	4770      	bx	lr
	}

	if (hw == SERCOM5) {
    2fac:	4b04      	ldr	r3, [pc, #16]	; (2fc0 <_sercom_init_irq_param+0x20>)
    2fae:	4298      	cmp	r0, r3
		_sercom5_dev = (struct _usart_async_device *)dev;
    2fb0:	bf04      	itt	eq
    2fb2:	4b02      	ldreq	r3, [pc, #8]	; (2fbc <_sercom_init_irq_param+0x1c>)
    2fb4:	6059      	streq	r1, [r3, #4]
    2fb6:	4770      	bx	lr
    2fb8:	40003000 	.word	0x40003000
    2fbc:	20007048 	.word	0x20007048
    2fc0:	43000400 	.word	0x43000400

00002fc4 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    2fc4:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    2fc6:	4b03      	ldr	r3, [pc, #12]	; (2fd4 <_sercom_get_irq_num+0x10>)
    2fc8:	4798      	blx	r3
    2fca:	0080      	lsls	r0, r0, #2
    2fcc:	302e      	adds	r0, #46	; 0x2e
}
    2fce:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    2fd2:	bd08      	pop	{r3, pc}
    2fd4:	00002efd 	.word	0x00002efd

00002fd8 <_usart_init>:
{
    2fd8:	b538      	push	{r3, r4, r5, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    2fda:	4b1c      	ldr	r3, [pc, #112]	; (304c <_usart_init+0x74>)
{
    2fdc:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    2fde:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    2fe0:	b138      	cbz	r0, 2ff2 <_usart_init+0x1a>
    2fe2:	2805      	cmp	r0, #5
    2fe4:	d030      	beq.n	3048 <_usart_init+0x70>
	ASSERT(false);
    2fe6:	f240 226d 	movw	r2, #621	; 0x26d
    2fea:	4919      	ldr	r1, [pc, #100]	; (3050 <_usart_init+0x78>)
    2fec:	4b19      	ldr	r3, [pc, #100]	; (3054 <_usart_init+0x7c>)
    2fee:	2000      	movs	r0, #0
    2ff0:	4798      	blx	r3
	return 0;
    2ff2:	2200      	movs	r2, #0
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    2ff4:	69e3      	ldr	r3, [r4, #28]
    2ff6:	4d18      	ldr	r5, [pc, #96]	; (3058 <_usart_init+0x80>)
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    2ff8:	f013 0f01 	tst.w	r3, #1
    2ffc:	d10a      	bne.n	3014 <_usart_init+0x3c>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    2ffe:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    3000:	079b      	lsls	r3, r3, #30
    3002:	d505      	bpl.n	3010 <_usart_init+0x38>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
    3004:	4620      	mov	r0, r4
    3006:	4b15      	ldr	r3, [pc, #84]	; (305c <_usart_init+0x84>)
    3008:	4798      	blx	r3
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
    300a:	2102      	movs	r1, #2
    300c:	4620      	mov	r0, r4
    300e:	47a8      	blx	r5
	((Sercom *)hw)->USART.CTRLA.reg = data;
    3010:	2305      	movs	r3, #5
    3012:	6023      	str	r3, [r4, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);
    3014:	4620      	mov	r0, r4
    3016:	2101      	movs	r1, #1
    3018:	47a8      	blx	r5
    301a:	4b11      	ldr	r3, [pc, #68]	; (3060 <_usart_init+0x88>)
    301c:	6023      	str	r3, [r4, #0]
	((Sercom *)hw)->USART.CTRLB.reg = data;
    301e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    3022:	6063      	str	r3, [r4, #4]
	((Sercom *)hw)->USART.CTRLC.reg = data;
    3024:	4b0f      	ldr	r3, [pc, #60]	; (3064 <_usart_init+0x8c>)
    3026:	60a3      	str	r3, [r4, #8]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    3028:	480f      	ldr	r0, [pc, #60]	; (3068 <_usart_init+0x90>)
	((Sercom *)hw)->USART.BAUD.reg = data;
    302a:	f24f 43bc 	movw	r3, #62652	; 0xf4bc
    302e:	81a3      	strh	r3, [r4, #12]
    3030:	2318      	movs	r3, #24
    3032:	fb03 0202 	mla	r2, r3, r2, r0
}
    3036:	2000      	movs	r0, #0
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    3038:	f892 3033 	ldrb.w	r3, [r2, #51]	; 0x33
	((Sercom *)hw)->USART.RXPL.reg = data;
    303c:	73a3      	strb	r3, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    303e:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    3042:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
    3046:	bd38      	pop	{r3, r4, r5, pc}
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    3048:	2201      	movs	r2, #1
    304a:	e7d3      	b.n	2ff4 <_usart_init+0x1c>
    304c:	00002efd 	.word	0x00002efd
    3050:	0000c1a9 	.word	0x0000c1a9
    3054:	00002035 	.word	0x00002035
    3058:	00002edd 	.word	0x00002edd
    305c:	00002ee5 	.word	0x00002ee5
    3060:	40100084 	.word	0x40100084
    3064:	00700002 	.word	0x00700002
    3068:	0000c130 	.word	0x0000c130

0000306c <_usart_async_init>:
{
    306c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	ASSERT(device);
    3070:	4606      	mov	r6, r0
    3072:	3000      	adds	r0, #0
    3074:	bf18      	it	ne
    3076:	2001      	movne	r0, #1
{
    3078:	460c      	mov	r4, r1
	ASSERT(device);
    307a:	22cd      	movs	r2, #205	; 0xcd
    307c:	4912      	ldr	r1, [pc, #72]	; (30c8 <_usart_async_init+0x5c>)
    307e:	4b13      	ldr	r3, [pc, #76]	; (30cc <_usart_async_init+0x60>)
    3080:	4798      	blx	r3
	init_status = _usart_init(hw);
    3082:	4620      	mov	r0, r4
    3084:	4b12      	ldr	r3, [pc, #72]	; (30d0 <_usart_async_init+0x64>)
    3086:	4798      	blx	r3
	if (init_status) {
    3088:	4605      	mov	r5, r0
    308a:	b9c8      	cbnz	r0, 30c0 <_usart_async_init+0x54>
	device->hw = hw;
    308c:	61b4      	str	r4, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
    308e:	4631      	mov	r1, r6
    3090:	4620      	mov	r0, r4
    3092:	4b10      	ldr	r3, [pc, #64]	; (30d4 <_usart_async_init+0x68>)
		NVIC_DisableIRQ((IRQn_Type)irq);
    3094:	f8df 804c 	ldr.w	r8, [pc, #76]	; 30e4 <_usart_async_init+0x78>
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    3098:	4f0f      	ldr	r7, [pc, #60]	; (30d8 <_usart_async_init+0x6c>)
		NVIC_EnableIRQ((IRQn_Type)irq);
    309a:	4e10      	ldr	r6, [pc, #64]	; (30dc <_usart_async_init+0x70>)
	_sercom_init_irq_param(hw, (void *)device);
    309c:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    309e:	4620      	mov	r0, r4
    30a0:	4b0f      	ldr	r3, [pc, #60]	; (30e0 <_usart_async_init+0x74>)
    30a2:	4798      	blx	r3
	for (uint32_t i = 0; i < 4; i++) {
    30a4:	462c      	mov	r4, r5
	uint8_t irq = _sercom_get_irq_num(hw);
    30a6:	4681      	mov	r9, r0
		NVIC_DisableIRQ((IRQn_Type)irq);
    30a8:	eb09 0104 	add.w	r1, r9, r4
    30ac:	b2c9      	uxtb	r1, r1
    30ae:	4608      	mov	r0, r1
    30b0:	47c0      	blx	r8
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    30b2:	4608      	mov	r0, r1
    30b4:	47b8      	blx	r7
	for (uint32_t i = 0; i < 4; i++) {
    30b6:	3401      	adds	r4, #1
		NVIC_EnableIRQ((IRQn_Type)irq);
    30b8:	4608      	mov	r0, r1
    30ba:	47b0      	blx	r6
	for (uint32_t i = 0; i < 4; i++) {
    30bc:	2c04      	cmp	r4, #4
    30be:	d1f3      	bne.n	30a8 <_usart_async_init+0x3c>
}
    30c0:	4628      	mov	r0, r5
    30c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    30c6:	bf00      	nop
    30c8:	0000c1a9 	.word	0x0000c1a9
    30cc:	00002035 	.word	0x00002035
    30d0:	00002fd9 	.word	0x00002fd9
    30d4:	00002fa1 	.word	0x00002fa1
    30d8:	00002ebd 	.word	0x00002ebd
    30dc:	00002e79 	.word	0x00002e79
    30e0:	00002fc5 	.word	0x00002fc5
    30e4:	00002e95 	.word	0x00002e95

000030e8 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    30e8:	6982      	ldr	r2, [r0, #24]
{
    30ea:	b508      	push	{r3, lr}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    30ec:	2103      	movs	r1, #3
    30ee:	4b04      	ldr	r3, [pc, #16]	; (3100 <_usart_async_enable+0x18>)
    30f0:	4610      	mov	r0, r2
    30f2:	4798      	blx	r3
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    30f4:	6813      	ldr	r3, [r2, #0]
    30f6:	f043 0302 	orr.w	r3, r3, #2
    30fa:	6013      	str	r3, [r2, #0]
    30fc:	bd08      	pop	{r3, pc}
    30fe:	bf00      	nop
    3100:	00002edd 	.word	0x00002edd

00003104 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    3104:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.DATA.reg = data;
    3106:	6299      	str	r1, [r3, #40]	; 0x28
    3108:	4770      	bx	lr

0000310a <_usart_async_is_byte_sent>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    310a:	6983      	ldr	r3, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    310c:	7e18      	ldrb	r0, [r3, #24]
}
    310e:	f000 0001 	and.w	r0, r0, #1
    3112:	4770      	bx	lr

00003114 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    3114:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    3116:	2201      	movs	r2, #1
    3118:	759a      	strb	r2, [r3, #22]
    311a:	4770      	bx	lr

0000311c <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    311c:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    311e:	2202      	movs	r2, #2
    3120:	759a      	strb	r2, [r3, #22]
    3122:	4770      	bx	lr

00003124 <_usart_async_set_irq_state>:
{
    3124:	b570      	push	{r4, r5, r6, lr}
	ASSERT(device);
    3126:	4605      	mov	r5, r0
    3128:	3000      	adds	r0, #0
{
    312a:	460e      	mov	r6, r1
	ASSERT(device);
    312c:	bf18      	it	ne
    312e:	2001      	movne	r0, #1
{
    3130:	4614      	mov	r4, r2
	ASSERT(device);
    3132:	490f      	ldr	r1, [pc, #60]	; (3170 <_usart_async_set_irq_state+0x4c>)
    3134:	4b0f      	ldr	r3, [pc, #60]	; (3174 <_usart_async_set_irq_state+0x50>)
    3136:	f240 222d 	movw	r2, #557	; 0x22d
    313a:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    313c:	f016 0ffd 	tst.w	r6, #253	; 0xfd
    3140:	d109      	bne.n	3156 <_usart_async_set_irq_state+0x32>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    3142:	69ab      	ldr	r3, [r5, #24]
    3144:	2101      	movs	r1, #1
    3146:	2202      	movs	r2, #2
	if (value == 0x0) {
    3148:	b914      	cbnz	r4, 3150 <_usart_async_set_irq_state+0x2c>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    314a:	7519      	strb	r1, [r3, #20]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    314c:	751a      	strb	r2, [r3, #20]
    314e:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    3150:	7599      	strb	r1, [r3, #22]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    3152:	759a      	strb	r2, [r3, #22]
    3154:	bd70      	pop	{r4, r5, r6, pc}
	} else if (USART_ASYNC_RX_DONE == type) {
    3156:	2e01      	cmp	r6, #1
    3158:	d104      	bne.n	3164 <_usart_async_set_irq_state+0x40>
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    315a:	69ab      	ldr	r3, [r5, #24]
    315c:	2204      	movs	r2, #4
	if (value == 0x0) {
    315e:	2c00      	cmp	r4, #0
    3160:	d1f7      	bne.n	3152 <_usart_async_set_irq_state+0x2e>
    3162:	e7f3      	b.n	314c <_usart_async_set_irq_state+0x28>
	} else if (USART_ASYNC_ERROR == type) {
    3164:	2e03      	cmp	r6, #3
    3166:	d1f5      	bne.n	3154 <_usart_async_set_irq_state+0x30>
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    3168:	69ab      	ldr	r3, [r5, #24]
    316a:	2280      	movs	r2, #128	; 0x80
    316c:	e7f7      	b.n	315e <_usart_async_set_irq_state+0x3a>
    316e:	bf00      	nop
    3170:	0000c1a9 	.word	0x0000c1a9
    3174:	00002035 	.word	0x00002035

00003178 <SERCOM0_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM0_3_Handler(void)
{
	_sercom_usart_interrupt_handler(_sercom0_dev);
    3178:	4b01      	ldr	r3, [pc, #4]	; (3180 <SERCOM0_3_Handler+0x8>)
    317a:	6818      	ldr	r0, [r3, #0]
    317c:	4b01      	ldr	r3, [pc, #4]	; (3184 <SERCOM0_3_Handler+0xc>)
    317e:	4718      	bx	r3
    3180:	20007048 	.word	0x20007048
    3184:	00002f31 	.word	0x00002f31

00003188 <SERCOM0_2_Handler>:
    3188:	4b00      	ldr	r3, [pc, #0]	; (318c <SERCOM0_2_Handler+0x4>)
    318a:	4718      	bx	r3
    318c:	00003179 	.word	0x00003179

00003190 <SERCOM0_1_Handler>:
    3190:	4b00      	ldr	r3, [pc, #0]	; (3194 <SERCOM0_1_Handler+0x4>)
    3192:	4718      	bx	r3
    3194:	00003179 	.word	0x00003179

00003198 <SERCOM0_0_Handler>:
    3198:	4b00      	ldr	r3, [pc, #0]	; (319c <SERCOM0_0_Handler+0x4>)
    319a:	4718      	bx	r3
    319c:	00003179 	.word	0x00003179

000031a0 <SERCOM5_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_3_Handler(void)
{
	_sercom_usart_interrupt_handler(_sercom5_dev);
    31a0:	4b01      	ldr	r3, [pc, #4]	; (31a8 <SERCOM5_3_Handler+0x8>)
    31a2:	6858      	ldr	r0, [r3, #4]
    31a4:	4b01      	ldr	r3, [pc, #4]	; (31ac <SERCOM5_3_Handler+0xc>)
    31a6:	4718      	bx	r3
    31a8:	20007048 	.word	0x20007048
    31ac:	00002f31 	.word	0x00002f31

000031b0 <SERCOM5_2_Handler>:
    31b0:	4b00      	ldr	r3, [pc, #0]	; (31b4 <SERCOM5_2_Handler+0x4>)
    31b2:	4718      	bx	r3
    31b4:	000031a1 	.word	0x000031a1

000031b8 <SERCOM5_1_Handler>:
    31b8:	4b00      	ldr	r3, [pc, #0]	; (31bc <SERCOM5_1_Handler+0x4>)
    31ba:	4718      	bx	r3
    31bc:	000031a1 	.word	0x000031a1

000031c0 <SERCOM5_0_Handler>:
    31c0:	4b00      	ldr	r3, [pc, #0]	; (31c4 <SERCOM5_0_Handler+0x4>)
    31c2:	4718      	bx	r3
    31c4:	000031a1 	.word	0x000031a1

000031c8 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    31c8:	4b03      	ldr	r3, [pc, #12]	; (31d8 <_delay_init+0x10>)
    31ca:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    31ce:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    31d0:	2205      	movs	r2, #5
    31d2:	601a      	str	r2, [r3, #0]
    31d4:	4770      	bx	lr
    31d6:	bf00      	nop
    31d8:	e000e010 	.word	0xe000e010

000031dc <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    31dc:	0e0b      	lsrs	r3, r1, #24
    31de:	4a0c      	ldr	r2, [pc, #48]	; (3210 <_delay_cycles+0x34>)
{
    31e0:	b530      	push	{r4, r5, lr}
	uint8_t  n   = cycles >> 24;
    31e2:	b2d8      	uxtb	r0, r3
	uint32_t buf = cycles;

	while (n--) {
		SysTick->LOAD = 0xFFFFFF;
    31e4:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
	while (n--) {
    31e8:	3801      	subs	r0, #1
    31ea:	b2c0      	uxtb	r0, r0
    31ec:	28ff      	cmp	r0, #255	; 0xff
    31ee:	d108      	bne.n	3202 <_delay_cycles+0x26>
    31f0:	eba3 6303 	sub.w	r3, r3, r3, lsl #24
    31f4:	4419      	add	r1, r3
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    31f6:	6051      	str	r1, [r2, #4]
	SysTick->VAL  = buf;
    31f8:	6091      	str	r1, [r2, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    31fa:	6813      	ldr	r3, [r2, #0]
    31fc:	03db      	lsls	r3, r3, #15
    31fe:	d5fc      	bpl.n	31fa <_delay_cycles+0x1e>
		;
}
    3200:	bd30      	pop	{r4, r5, pc}
		SysTick->LOAD = 0xFFFFFF;
    3202:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    3204:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    3206:	6815      	ldr	r5, [r2, #0]
    3208:	03ed      	lsls	r5, r5, #15
    320a:	d5fc      	bpl.n	3206 <_delay_cycles+0x2a>
    320c:	e7ec      	b.n	31e8 <_delay_cycles+0xc>
    320e:	bf00      	nop
    3210:	e000e010 	.word	0xe000e010

00003214 <__NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
    3214:	2800      	cmp	r0, #0
    3216:	db0d      	blt.n	3234 <__NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3218:	0943      	lsrs	r3, r0, #5
    321a:	2201      	movs	r2, #1
    321c:	f000 001f 	and.w	r0, r0, #31
    3220:	fa02 f000 	lsl.w	r0, r2, r0
    3224:	3320      	adds	r3, #32
    3226:	4a04      	ldr	r2, [pc, #16]	; (3238 <__NVIC_DisableIRQ+0x24>)
    3228:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    322c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3230:	f3bf 8f6f 	isb	sy
    3234:	4770      	bx	lr
    3236:	bf00      	nop
    3238:	e000e100 	.word	0xe000e100

0000323c <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    323c:	b570      	push	{r4, r5, r6, lr}
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    323e:	4d10      	ldr	r5, [pc, #64]	; (3280 <get_tc_index+0x44>)
{
    3240:	4606      	mov	r6, r0
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    3242:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    3244:	b088      	sub	sp, #32
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    3246:	466c      	mov	r4, sp
    3248:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    324a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    324e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    3252:	2000      	movs	r0, #0
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    3254:	f85d 3020 	ldr.w	r3, [sp, r0, lsl #2]
    3258:	42b3      	cmp	r3, r6
    325a:	d102      	bne.n	3262 <get_tc_index+0x26>
		if (_tcs[i].number == index) {
    325c:	b930      	cbnz	r0, 326c <get_tc_index+0x30>
}
    325e:	b008      	add	sp, #32
    3260:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    3262:	3001      	adds	r0, #1
    3264:	2808      	cmp	r0, #8
    3266:	d1f5      	bne.n	3254 <get_tc_index+0x18>
			return i;
    3268:	2000      	movs	r0, #0
    326a:	e7f8      	b.n	325e <get_tc_index+0x22>
	ASSERT(false);
    326c:	2000      	movs	r0, #0
    326e:	f44f 72a0 	mov.w	r2, #320	; 0x140
    3272:	4904      	ldr	r1, [pc, #16]	; (3284 <get_tc_index+0x48>)
    3274:	4b04      	ldr	r3, [pc, #16]	; (3288 <get_tc_index+0x4c>)
    3276:	4798      	blx	r3
	return -1;
    3278:	f04f 30ff 	mov.w	r0, #4294967295
    327c:	e7ef      	b.n	325e <get_tc_index+0x22>
    327e:	bf00      	nop
    3280:	0000c1c4 	.word	0x0000c1c4
    3284:	0000c1f8 	.word	0x0000c1f8
    3288:	00002035 	.word	0x00002035

0000328c <hri_tc_clear_CTRLA_ENABLE_bit>:
typedef uint8_t  hri_tc_status_reg_t;
typedef uint8_t  hri_tc_wave_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    328c:	6903      	ldr	r3, [r0, #16]
    328e:	079b      	lsls	r3, r3, #30
    3290:	d1fc      	bne.n	328c <hri_tc_clear_CTRLA_ENABLE_bit>

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	((Tc *)hw)->COUNT8.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    3292:	6803      	ldr	r3, [r0, #0]
    3294:	f023 0302 	bic.w	r3, r3, #2
    3298:	6003      	str	r3, [r0, #0]
    329a:	4770      	bx	lr

0000329c <_timer_init>:
{
    329c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    329e:	4606      	mov	r6, r0
	int8_t i = get_tc_index(hw);
    32a0:	4b30      	ldr	r3, [pc, #192]	; (3364 <_timer_init+0xc8>)
    32a2:	4608      	mov	r0, r1
{
    32a4:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    32a6:	4798      	blx	r3
	ASSERT(ARRAY_SIZE(_tcs));
    32a8:	492f      	ldr	r1, [pc, #188]	; (3368 <_timer_init+0xcc>)
    32aa:	4b30      	ldr	r3, [pc, #192]	; (336c <_timer_init+0xd0>)
	device->hw = hw;
    32ac:	60f4      	str	r4, [r6, #12]
	int8_t i = get_tc_index(hw);
    32ae:	4605      	mov	r5, r0
	ASSERT(ARRAY_SIZE(_tcs));
    32b0:	228e      	movs	r2, #142	; 0x8e
    32b2:	2001      	movs	r0, #1
    32b4:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    32b6:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    32b8:	07d9      	lsls	r1, r3, #31
    32ba:	d404      	bmi.n	32c6 <_timer_init+0x2a>
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    32bc:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    32be:	079a      	lsls	r2, r3, #30
    32c0:	d43a      	bmi.n	3338 <_timer_init+0x9c>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CTRLA.reg = data;
    32c2:	2301      	movs	r3, #1
    32c4:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    32c6:	6921      	ldr	r1, [r4, #16]
    32c8:	f011 0101 	ands.w	r1, r1, #1
    32cc:	d1fb      	bne.n	32c6 <_timer_init+0x2a>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    32ce:	4828      	ldr	r0, [pc, #160]	; (3370 <_timer_init+0xd4>)
    32d0:	2314      	movs	r3, #20
    32d2:	fb03 0305 	mla	r3, r3, r5, r0
    32d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    32d8:	f893 702a 	ldrb.w	r7, [r3, #42]	; 0x2a
	((Tc *)hw)->COUNT8.CTRLA.reg = data;
    32dc:	6022      	str	r2, [r4, #0]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.DBGCTRL.reg = data;
    32de:	73e7      	strb	r7, [r4, #15]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    32e0:	f002 020c 	and.w	r2, r2, #12
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    32e4:	8d1f      	ldrh	r7, [r3, #40]	; 0x28
	((Tc *)hw)->COUNT8.EVCTRL.reg = data;
    32e6:	80e7      	strh	r7, [r4, #6]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    32e8:	2a08      	cmp	r2, #8
	((Tc *)hw)->COUNT8.WAVE.reg = data;
    32ea:	f04f 0701 	mov.w	r7, #1
    32ee:	7327      	strb	r7, [r4, #12]
    32f0:	d129      	bne.n	3346 <_timer_init+0xaa>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    32f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    32f4:	61e3      	str	r3, [r4, #28]
    32f6:	6221      	str	r1, [r4, #32]
	((Tc *)hw)->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    32f8:	2301      	movs	r3, #1
    32fa:	7263      	strb	r3, [r4, #9]
	if (hw == TC0) {
    32fc:	4b1d      	ldr	r3, [pc, #116]	; (3374 <_timer_init+0xd8>)
    32fe:	429c      	cmp	r4, r3
		_tc0_dev = (struct _timer_device *)dev;
    3300:	bf04      	itt	eq
    3302:	4b1d      	ldreq	r3, [pc, #116]	; (3378 <_timer_init+0xdc>)
    3304:	601e      	streq	r6, [r3, #0]
	NVIC_DisableIRQ(_tcs[i].irq);
    3306:	2314      	movs	r3, #20
    3308:	fb03 0505 	mla	r5, r3, r5, r0
    330c:	4b1b      	ldr	r3, [pc, #108]	; (337c <_timer_init+0xe0>)
    330e:	f9b5 1022 	ldrsh.w	r1, [r5, #34]	; 0x22
    3312:	4608      	mov	r0, r1
    3314:	4798      	blx	r3
  if ((int32_t)(IRQn) >= 0)
    3316:	2900      	cmp	r1, #0
    3318:	db0c      	blt.n	3334 <_timer_init+0x98>
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    331a:	f001 021f 	and.w	r2, r1, #31
    331e:	0949      	lsrs	r1, r1, #5
    3320:	0089      	lsls	r1, r1, #2
    3322:	f101 4160 	add.w	r1, r1, #3758096384	; 0xe0000000
    3326:	f501 4161 	add.w	r1, r1, #57600	; 0xe100
    332a:	2301      	movs	r3, #1
    332c:	4093      	lsls	r3, r2
    332e:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3332:	600b      	str	r3, [r1, #0]
}
    3334:	2000      	movs	r0, #0
    3336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    3338:	4620      	mov	r0, r4
    333a:	4b11      	ldr	r3, [pc, #68]	; (3380 <_timer_init+0xe4>)
    333c:	4798      	blx	r3
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    333e:	6923      	ldr	r3, [r4, #16]
    3340:	079b      	lsls	r3, r3, #30
    3342:	d4fc      	bmi.n	333e <_timer_init+0xa2>
    3344:	e7bd      	b.n	32c2 <_timer_init+0x26>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    3346:	b91a      	cbnz	r2, 3350 <_timer_init+0xb4>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    3348:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    334a:	83a3      	strh	r3, [r4, #28]
    334c:	83e2      	strh	r2, [r4, #30]
    334e:	e7d3      	b.n	32f8 <_timer_init+0x5c>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    3350:	2a04      	cmp	r2, #4
    3352:	d1d1      	bne.n	32f8 <_timer_init+0x5c>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    3354:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
		hri_tc_write_PER_reg(hw, _tcs[i].per);
    3358:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tc_cc8_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    335c:	7722      	strb	r2, [r4, #28]
    335e:	7761      	strb	r1, [r4, #29]
	((Tc *)hw)->COUNT8.PER.reg = data;
    3360:	76e3      	strb	r3, [r4, #27]
    3362:	e7c9      	b.n	32f8 <_timer_init+0x5c>
    3364:	0000323d 	.word	0x0000323d
    3368:	0000c1f8 	.word	0x0000c1f8
    336c:	00002035 	.word	0x00002035
    3370:	0000c1c4 	.word	0x0000c1c4
    3374:	40003800 	.word	0x40003800
    3378:	20007050 	.word	0x20007050
    337c:	00003215 	.word	0x00003215
    3380:	0000328d 	.word	0x0000328d

00003384 <_timer_start>:
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    3384:	68c3      	ldr	r3, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3386:	691a      	ldr	r2, [r3, #16]
    3388:	0792      	lsls	r2, r2, #30
    338a:	d1fc      	bne.n	3386 <_timer_start+0x2>
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    338c:	681a      	ldr	r2, [r3, #0]
    338e:	f042 0202 	orr.w	r2, r2, #2
    3392:	601a      	str	r2, [r3, #0]
    3394:	4770      	bx	lr

00003396 <_timer_is_started>:
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    3396:	68c3      	ldr	r3, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3398:	691a      	ldr	r2, [r3, #16]
    339a:	0792      	lsls	r2, r2, #30
    339c:	d1fc      	bne.n	3398 <_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    339e:	6818      	ldr	r0, [r3, #0]
}
    33a0:	f3c0 0040 	ubfx	r0, r0, #1, #1
    33a4:	4770      	bx	lr

000033a6 <_tc_get_timer>:
}
    33a6:	2000      	movs	r0, #0
    33a8:	4770      	bx	lr
	...

000033ac <_timer_set_irq>:
{
    33ac:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    33ae:	4b0a      	ldr	r3, [pc, #40]	; (33d8 <_timer_set_irq+0x2c>)
    33b0:	68c0      	ldr	r0, [r0, #12]
    33b2:	4798      	blx	r3
	ASSERT(ARRAY_SIZE(_tcs));
    33b4:	f240 1213 	movw	r2, #275	; 0x113
	int8_t      i  = get_tc_index(hw);
    33b8:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    33ba:	4b08      	ldr	r3, [pc, #32]	; (33dc <_timer_set_irq+0x30>)
    33bc:	4908      	ldr	r1, [pc, #32]	; (33e0 <_timer_set_irq+0x34>)
    33be:	2001      	movs	r0, #1
    33c0:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    33c2:	4b08      	ldr	r3, [pc, #32]	; (33e4 <_timer_set_irq+0x38>)
    33c4:	2214      	movs	r2, #20
    33c6:	fb02 3404 	mla	r4, r2, r4, r3
    33ca:	4b07      	ldr	r3, [pc, #28]	; (33e8 <_timer_set_irq+0x3c>)
    33cc:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
}
    33d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_irq_set(_tcs[i].irq);
    33d4:	4718      	bx	r3
    33d6:	bf00      	nop
    33d8:	0000323d 	.word	0x0000323d
    33dc:	00002035 	.word	0x00002035
    33e0:	0000c1f8 	.word	0x0000c1f8
    33e4:	0000c1c4 	.word	0x0000c1c4
    33e8:	0000237d 	.word	0x0000237d

000033ec <TC0_Handler>:
	tc_interrupt_handler(_tc0_dev);
    33ec:	4b05      	ldr	r3, [pc, #20]	; (3404 <TC0_Handler+0x18>)
    33ee:	6818      	ldr	r0, [r3, #0]
	void *const hw = device->hw;
    33f0:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT8.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    33f2:	7a9a      	ldrb	r2, [r3, #10]
	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    33f4:	07d2      	lsls	r2, r2, #31
    33f6:	d503      	bpl.n	3400 <TC0_Handler+0x14>
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    33f8:	2201      	movs	r2, #1
    33fa:	729a      	strb	r2, [r3, #10]
		device->timer_cb.period_expired(device);
    33fc:	6803      	ldr	r3, [r0, #0]
    33fe:	4718      	bx	r3
    3400:	4770      	bx	lr
    3402:	bf00      	nop
    3404:	20007050 	.word	0x20007050

00003408 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    3408:	2000      	movs	r0, #0
    340a:	4770      	bx	lr

0000340c <_usb_d_dev_wait_dfll_rdy>:
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    340c:	4b07      	ldr	r3, [pc, #28]	; (342c <_usb_d_dev_wait_dfll_rdy+0x20>)
    340e:	f893 2020 	ldrb.w	r2, [r3, #32]
/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    3412:	07d1      	lsls	r1, r2, #31
    3414:	d506      	bpl.n	3424 <_usb_d_dev_wait_dfll_rdy+0x18>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    3416:	691a      	ldr	r2, [r3, #16]
	tmp &= mask;
    3418:	f402 6210 	and.w	r2, r2, #2304	; 0x900
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    341c:	f5b2 6f10 	cmp.w	r2, #2304	; 0x900
    3420:	d1f9      	bne.n	3416 <_usb_d_dev_wait_dfll_rdy+0xa>
    3422:	4770      	bx	lr
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    3424:	691a      	ldr	r2, [r3, #16]
		       != (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    3426:	05d2      	lsls	r2, r2, #23
    3428:	d5fc      	bpl.n	3424 <_usb_d_dev_wait_dfll_rdy+0x18>
    342a:	4770      	bx	lr
    342c:	40001000 	.word	0x40001000

00003430 <_usb_d_dev_ept>:
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3430:	b110      	cbz	r0, 3438 <_usb_d_dev_ept+0x8>
    3432:	b109      	cbz	r1, 3438 <_usb_d_dev_ept+0x8>
    3434:	3002      	adds	r0, #2
    3436:	b2c0      	uxtb	r0, r0
	return &dev_inst.ep[ep_index];
    3438:	2314      	movs	r3, #20
    343a:	fb00 3003 	mla	r0, r0, r3, r3
}
    343e:	4b01      	ldr	r3, [pc, #4]	; (3444 <_usb_d_dev_ept+0x14>)
    3440:	4418      	add	r0, r3
    3442:	4770      	bx	lr
    3444:	20007054 	.word	0x20007054

00003448 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    3448:	b430      	push	{r4, r5}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    344a:	7cc1      	ldrb	r1, [r0, #19]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    344c:	7c85      	ldrb	r5, [r0, #18]

	if (!is_ctrl) {
    344e:	f001 0307 	and.w	r3, r1, #7
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    3452:	f005 020f 	and.w	r2, r5, #15
	if (!is_ctrl) {
    3456:	2b01      	cmp	r3, #1
    3458:	ea4f 1442 	mov.w	r4, r2, lsl #5
    345c:	f102 0308 	add.w	r3, r2, #8
    3460:	d00a      	beq.n	3478 <_usb_d_dev_handle_setup+0x30>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3462:	015a      	lsls	r2, r3, #5
    3464:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    3468:	f104 4382 	add.w	r3, r4, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    346c:	2110      	movs	r1, #16
    346e:	71d1      	strb	r1, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    3470:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
}
    3474:	bc30      	pop	{r4, r5}
    3476:	4770      	bx	lr
	if (_usb_d_dev_ep_is_busy(ept)) {
    3478:	f011 0f40 	tst.w	r1, #64	; 0x40
    347c:	d00b      	beq.n	3496 <_usb_d_dev_handle_setup+0x4e>
    347e:	0152      	lsls	r2, r2, #5
		ept->flags.bits.is_busy = 0;
    3480:	f36f 1186 	bfc	r1, #6, #1
    3484:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    3488:	74c1      	strb	r1, [r0, #19]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    348a:	2180      	movs	r1, #128	; 0x80
    348c:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3490:	2140      	movs	r1, #64	; 0x40
    3492:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105
	ept->flags.bits.is_stalled = 0;
    3496:	7cc2      	ldrb	r2, [r0, #19]
    3498:	f36f 02c3 	bfc	r2, #3, #1
    349c:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    349e:	4a0a      	ldr	r2, [pc, #40]	; (34c8 <_usb_d_dev_handle_setup+0x80>)
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    34a0:	015b      	lsls	r3, r3, #5
    34a2:	1911      	adds	r1, r2, r4
    34a4:	2000      	movs	r0, #0
    34a6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    34aa:	f881 00d2 	strb.w	r0, [r1, #210]	; 0xd2
    34ae:	f881 00e2 	strb.w	r0, [r1, #226]	; 0xe2
    34b2:	216f      	movs	r1, #111	; 0x6f
    34b4:	71d9      	strb	r1, [r3, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    34b6:	f104 4382 	add.w	r3, r4, #1090519040	; 0x41000000
	dev_inst.ep_callbacks.setup(ept->ep);
    34ba:	4628      	mov	r0, r5
    34bc:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
    34c0:	6893      	ldr	r3, [r2, #8]
}
    34c2:	bc30      	pop	{r4, r5}
	dev_inst.ep_callbacks.setup(ept->ep);
    34c4:	4718      	bx	r3
    34c6:	bf00      	nop
    34c8:	20007054 	.word	0x20007054

000034cc <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    34cc:	4602      	mov	r2, r0
	uint8_t epn = USB_EP_GET_N(ept->ep);
    34ce:	7c80      	ldrb	r0, [r0, #18]
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    34d0:	2320      	movs	r3, #32
    34d2:	fa03 f101 	lsl.w	r1, r3, r1
    34d6:	f000 030f 	and.w	r3, r0, #15
    34da:	015b      	lsls	r3, r3, #5
    34dc:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    34e0:	b2c9      	uxtb	r1, r1
    34e2:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    34e6:	4b02      	ldr	r3, [pc, #8]	; (34f0 <_usb_d_dev_handle_stall+0x24>)
    34e8:	6892      	ldr	r2, [r2, #8]
    34ea:	691b      	ldr	r3, [r3, #16]
    34ec:	2101      	movs	r1, #1
    34ee:	4718      	bx	r3
    34f0:	20007054 	.word	0x20007054

000034f4 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    34f4:	4602      	mov	r2, r0
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    34f6:	7c80      	ldrb	r0, [r0, #18]
    34f8:	28ff      	cmp	r0, #255	; 0xff
    34fa:	d00a      	beq.n	3512 <_usb_d_dev_trans_done+0x1e>
    34fc:	7cd3      	ldrb	r3, [r2, #19]
    34fe:	f013 0f40 	tst.w	r3, #64	; 0x40
    3502:	d006      	beq.n	3512 <_usb_d_dev_trans_done+0x1e>
		return;
	}
	ept->flags.bits.is_busy = 0;
    3504:	f36f 1386 	bfc	r3, #6, #1
    3508:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    350a:	4b02      	ldr	r3, [pc, #8]	; (3514 <_usb_d_dev_trans_done+0x20>)
    350c:	6892      	ldr	r2, [r2, #8]
    350e:	691b      	ldr	r3, [r3, #16]
    3510:	4718      	bx	r3
    3512:	4770      	bx	lr
    3514:	20007054 	.word	0x20007054

00003518 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    3518:	b477      	push	{r0, r1, r2, r4, r5, r6}
	uint8_t epn = USB_EP_GET_N(ept->ep);
    351a:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    351c:	2425      	movs	r4, #37	; 0x25
    351e:	f88d 4004 	strb.w	r4, [sp, #4]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    3522:	2bff      	cmp	r3, #255	; 0xff
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    3524:	f04f 044a 	mov.w	r4, #74	; 0x4a
    3528:	f88d 4005 	strb.w	r4, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    352c:	d021      	beq.n	3572 <_usb_d_dev_trans_stop+0x5a>
    352e:	7cc4      	ldrb	r4, [r0, #19]
    3530:	0664      	lsls	r4, r4, #25
    3532:	d51e      	bpl.n	3572 <_usb_d_dev_trans_stop+0x5a>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3534:	f003 030f 	and.w	r3, r3, #15
    3538:	f103 0408 	add.w	r4, r3, #8
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    353c:	0165      	lsls	r5, r4, #5
    353e:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
		return;
	}
	/* Stop transfer */
	if (dir) {
    3542:	b199      	cbz	r1, 356c <_usb_d_dev_trans_stop+0x54>
    3544:	2680      	movs	r6, #128	; 0x80
    3546:	712e      	strb	r6, [r5, #4]
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    3548:	ad02      	add	r5, sp, #8
    354a:	440d      	add	r5, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    354c:	0164      	lsls	r4, r4, #5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    354e:	015b      	lsls	r3, r3, #5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3550:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    3554:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    3558:	f815 1c04 	ldrb.w	r1, [r5, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    355c:	71e1      	strb	r1, [r4, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    355e:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    3562:	4b05      	ldr	r3, [pc, #20]	; (3578 <_usb_d_dev_trans_stop+0x60>)
    3564:	4611      	mov	r1, r2
}
    3566:	b003      	add	sp, #12
    3568:	bc70      	pop	{r4, r5, r6}
	_usb_d_dev_trans_done(ept, code);
    356a:	4718      	bx	r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    356c:	2640      	movs	r6, #64	; 0x40
    356e:	716e      	strb	r6, [r5, #5]
    3570:	e7ea      	b.n	3548 <_usb_d_dev_trans_stop+0x30>
}
    3572:	b003      	add	sp, #12
    3574:	bc70      	pop	{r4, r5, r6}
    3576:	4770      	bx	lr
    3578:	000034f5 	.word	0x000034f5

0000357c <_usb_d_dev_handle_trfail>:
{
    357c:	b4f3      	push	{r0, r1, r4, r5, r6, r7}
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    357e:	7c86      	ldrb	r6, [r0, #18]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    3580:	2304      	movs	r3, #4
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    3582:	f006 060f 	and.w	r6, r6, #15
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    3586:	f88d 3004 	strb.w	r3, [sp, #4]
    358a:	2308      	movs	r3, #8
    358c:	f88d 3005 	strb.w	r3, [sp, #5]
    3590:	18f3      	adds	r3, r6, r3

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    3592:	015a      	lsls	r2, r3, #5
    3594:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    3598:	0175      	lsls	r5, r6, #5
    359a:	7812      	ldrb	r2, [r2, #0]
	uint8_t            eptype
    359c:	b339      	cbz	r1, 35ee <_usb_d_dev_handle_trfail+0x72>
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    359e:	f3c2 1202 	ubfx	r2, r2, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
    35a2:	4c2e      	ldr	r4, [pc, #184]	; (365c <_usb_d_dev_handle_trfail+0xe0>)
    35a4:	eb05 1501 	add.w	r5, r5, r1, lsl #4
    35a8:	4425      	add	r5, r4
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    35aa:	2a02      	cmp	r2, #2
	st.reg = bank[bank_n].STATUS_BK.reg;
    35ac:	7aac      	ldrb	r4, [r5, #10]
    35ae:	aa02      	add	r2, sp, #8
    35b0:	eb02 0701 	add.w	r7, r2, r1
    35b4:	b2e4      	uxtb	r4, r4
    35b6:	ea4f 1246 	mov.w	r2, r6, lsl #5
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    35ba:	d11b      	bne.n	35f4 <_usb_d_dev_handle_trfail+0x78>
    35bc:	f014 0f01 	tst.w	r4, #1
    35c0:	d018      	beq.n	35f4 <_usb_d_dev_handle_trfail+0x78>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    35c2:	7aac      	ldrb	r4, [r5, #10]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    35c4:	015b      	lsls	r3, r3, #5
    35c6:	f36f 0400 	bfc	r4, #0, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    35ca:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    35ce:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    35d2:	72ac      	strb	r4, [r5, #10]
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    35d4:	3100      	adds	r1, #0
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    35d6:	f817 4c04 	ldrb.w	r4, [r7, #-4]
    35da:	71dc      	strb	r4, [r3, #7]
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    35dc:	bf18      	it	ne
    35de:	2101      	movne	r1, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    35e0:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
    35e4:	2204      	movs	r2, #4
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    35e6:	4b1e      	ldr	r3, [pc, #120]	; (3660 <_usb_d_dev_handle_trfail+0xe4>)
}
    35e8:	b002      	add	sp, #8
    35ea:	bcf0      	pop	{r4, r5, r6, r7}
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    35ec:	4718      	bx	r3
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    35ee:	f002 0207 	and.w	r2, r2, #7
    35f2:	e7d6      	b.n	35a2 <_usb_d_dev_handle_trfail+0x26>
	} else if (st.bit.ERRORFLOW) {
    35f4:	f014 0402 	ands.w	r4, r4, #2
    35f8:	d01b      	beq.n	3632 <_usb_d_dev_handle_trfail+0xb6>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    35fa:	7aac      	ldrb	r4, [r5, #10]
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    35fc:	7cc6      	ldrb	r6, [r0, #19]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    35fe:	015b      	lsls	r3, r3, #5
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    3600:	f36f 0441 	bfc	r4, #1, #1
    3604:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    3608:	72ac      	strb	r4, [r5, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    360a:	f817 4c04 	ldrb.w	r4, [r7, #-4]
    360e:	71dc      	strb	r4, [r3, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    3610:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    3614:	f006 0307 	and.w	r3, r6, #7
    3618:	2b01      	cmp	r3, #1
    361a:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
    361e:	d119      	bne.n	3654 <_usb_d_dev_handle_trfail+0xd8>
    3620:	0673      	lsls	r3, r6, #25
    3622:	d517      	bpl.n	3654 <_usb_d_dev_handle_trfail+0xd8>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    3624:	7cc3      	ldrb	r3, [r0, #19]
    3626:	09db      	lsrs	r3, r3, #7
    3628:	4299      	cmp	r1, r3
    362a:	d013      	beq.n	3654 <_usb_d_dev_handle_trfail+0xd8>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    362c:	2200      	movs	r2, #0
    362e:	4619      	mov	r1, r3
    3630:	e7d9      	b.n	35e6 <_usb_d_dev_handle_trfail+0x6a>
	bank->STATUS_BK.reg     = 0;
    3632:	480c      	ldr	r0, [pc, #48]	; (3664 <_usb_d_dev_handle_trfail+0xe8>)
    3634:	eb01 0146 	add.w	r1, r1, r6, lsl #1
    3638:	eb00 1101 	add.w	r1, r0, r1, lsl #4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    363c:	015b      	lsls	r3, r3, #5
    363e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    3642:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    3646:	f881 40d2 	strb.w	r4, [r1, #210]	; 0xd2
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    364a:	f817 1c04 	ldrb.w	r1, [r7, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    364e:	71d9      	strb	r1, [r3, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    3650:	f882 1108 	strb.w	r1, [r2, #264]	; 0x108
}
    3654:	b002      	add	sp, #8
    3656:	bcf0      	pop	{r4, r5, r6, r7}
    3658:	4770      	bx	lr
    365a:	bf00      	nop
    365c:	2000711c 	.word	0x2000711c
    3660:	00003519 	.word	0x00003519
    3664:	20007054 	.word	0x20007054

00003668 <_usb_d_dev_reset_epts>:
{
    3668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    366c:	4c09      	ldr	r4, [pc, #36]	; (3694 <_usb_d_dev_reset_epts+0x2c>)
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    366e:	4f0a      	ldr	r7, [pc, #40]	; (3698 <_usb_d_dev_reset_epts+0x30>)
    3670:	f104 05b4 	add.w	r5, r4, #180	; 0xb4
		dev_inst.ep[i].ep       = 0xFF;
    3674:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    3676:	2103      	movs	r1, #3
    3678:	4620      	mov	r0, r4
    367a:	47b8      	blx	r7
		dev_inst.ep[i].flags.u8 = 0;
    367c:	2100      	movs	r1, #0
		dev_inst.ep[i].ep       = 0xFF;
    367e:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    3680:	74e1      	strb	r1, [r4, #19]
    3682:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    3684:	42ac      	cmp	r4, r5
    3686:	d1f6      	bne.n	3676 <_usb_d_dev_reset_epts+0xe>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    3688:	2260      	movs	r2, #96	; 0x60
    368a:	4804      	ldr	r0, [pc, #16]	; (369c <_usb_d_dev_reset_epts+0x34>)
    368c:	4b04      	ldr	r3, [pc, #16]	; (36a0 <_usb_d_dev_reset_epts+0x38>)
}
    368e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    3692:	4718      	bx	r3
    3694:	20007068 	.word	0x20007068
    3698:	000034f5 	.word	0x000034f5
    369c:	2000711c 	.word	0x2000711c
    36a0:	0000adc1 	.word	0x0000adc1

000036a4 <_usb_d_dev_in_next>:
{
    36a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    36a8:	4604      	mov	r4, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    36aa:	7c80      	ldrb	r0, [r0, #18]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    36ac:	4689      	mov	r9, r1
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    36ae:	f000 080f 	and.w	r8, r0, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    36b2:	2900      	cmp	r1, #0
    36b4:	d05a      	beq.n	376c <_usb_d_dev_in_next+0xc8>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    36b6:	4b4c      	ldr	r3, [pc, #304]	; (37e8 <_usb_d_dev_in_next+0x144>)
    36b8:	eb03 1348 	add.w	r3, r3, r8, lsl #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    36bc:	695e      	ldr	r6, [r3, #20]
    36be:	f3c6 060d 	ubfx	r6, r6, #0, #14
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    36c2:	f8b4 e010 	ldrh.w	lr, [r4, #16]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    36c6:	f894 c013 	ldrb.w	ip, [r4, #19]
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    36ca:	f240 33ff 	movw	r3, #1023	; 0x3ff
    36ce:	459e      	cmp	lr, r3
    36d0:	bf1a      	itte	ne
    36d2:	f10e 32ff 	addne.w	r2, lr, #4294967295
    36d6:	b292      	uxthne	r2, r2
    36d8:	4672      	moveq	r2, lr
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    36da:	f00c 0a07 	and.w	sl, ip, #7
	if (isr) {
    36de:	f1b9 0f00 	cmp.w	r9, #0
    36e2:	d006      	beq.n	36f2 <_usb_d_dev_in_next+0x4e>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    36e4:	ea4f 1348 	mov.w	r3, r8, lsl #5
    36e8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    36ec:	2102      	movs	r1, #2
    36ee:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	ept->trans_count += trans_count;
    36f2:	68a1      	ldr	r1, [r4, #8]
	if (ept->trans_count < ept->trans_size) {
    36f4:	6863      	ldr	r3, [r4, #4]
	ept->trans_count += trans_count;
    36f6:	4431      	add	r1, r6
	if (ept->trans_count < ept->trans_size) {
    36f8:	4299      	cmp	r1, r3
	ept->trans_count += trans_count;
    36fa:	60a1      	str	r1, [r4, #8]
    36fc:	ea4f 1548 	mov.w	r5, r8, lsl #5
	if (ept->trans_count < ept->trans_size) {
    3700:	d240      	bcs.n	3784 <_usb_d_dev_in_next+0xe0>
		trans_next = ept->trans_size - ept->trans_count;
    3702:	1a5b      	subs	r3, r3, r1
		if (ept->flags.bits.use_cache) {
    3704:	f01c 0f20 	tst.w	ip, #32
		trans_next = ept->trans_size - ept->trans_count;
    3708:	b29f      	uxth	r7, r3
    370a:	4e38      	ldr	r6, [pc, #224]	; (37ec <_usb_d_dev_in_next+0x148>)
    370c:	6823      	ldr	r3, [r4, #0]
		if (ept->flags.bits.use_cache) {
    370e:	d02f      	beq.n	3770 <_usb_d_dev_in_next+0xcc>
    3710:	4577      	cmp	r7, lr
    3712:	bf28      	it	cs
    3714:	4677      	movcs	r7, lr
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    3716:	463a      	mov	r2, r7
    3718:	4419      	add	r1, r3
    371a:	68e0      	ldr	r0, [r4, #12]
    371c:	4b34      	ldr	r3, [pc, #208]	; (37f0 <_usb_d_dev_in_next+0x14c>)
    371e:	4798      	blx	r3
	bank->ADDR.reg          = addr;
    3720:	1973      	adds	r3, r6, r5
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    3722:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    3724:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    3728:	1972      	adds	r2, r6, r5
    372a:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
    372e:	f367 030d 	bfi	r3, r7, #0, #14
    3732:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    3736:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
    373a:	f36f 339b 	bfc	r3, #14, #14
    373e:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
	if (!isr) {
    3742:	f1b9 0f00 	cmp.w	r9, #0
    3746:	d108      	bne.n	375a <_usb_d_dev_in_next+0xb6>
			inten = USB_D_BANK1_INT_FLAGS;
    3748:	f1ba 0f01 	cmp.w	sl, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    374c:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    3750:	bf0c      	ite	eq
    3752:	234e      	moveq	r3, #78	; 0x4e
    3754:	234a      	movne	r3, #74	; 0x4a
    3756:	f885 3109 	strb.w	r3, [r5, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    375a:	ea4f 1348 	mov.w	r3, r8, lsl #5
    375e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    3762:	2280      	movs	r2, #128	; 0x80
    3764:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
    3768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    376c:	460e      	mov	r6, r1
    376e:	e7a8      	b.n	36c2 <_usb_d_dev_in_next+0x1e>
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    3770:	4419      	add	r1, r3
	bank->ADDR.reg          = addr;
    3772:	1973      	adds	r3, r6, r5
    3774:	f5b7 5f00 	cmp.w	r7, #8192	; 0x2000
    3778:	bf28      	it	cs
    377a:	f44f 5700 	movcs.w	r7, #8192	; 0x2000
    377e:	f8c3 10d8 	str.w	r1, [r3, #216]	; 0xd8
    3782:	e7d1      	b.n	3728 <_usb_d_dev_in_next+0x84>
	} else if (ept->flags.bits.need_zlp) {
    3784:	f01c 0f10 	tst.w	ip, #16
    3788:	d00e      	beq.n	37a8 <_usb_d_dev_in_next+0x104>
		ept->flags.bits.need_zlp = 0;
    378a:	7ce3      	ldrb	r3, [r4, #19]
    378c:	f36f 1304 	bfc	r3, #4, #1
    3790:	74e3      	strb	r3, [r4, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    3792:	4b18      	ldr	r3, [pc, #96]	; (37f4 <_usb_d_dev_in_next+0x150>)
    3794:	442b      	add	r3, r5
    3796:	685a      	ldr	r2, [r3, #4]
    3798:	f36f 020d 	bfc	r2, #0, #14
    379c:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    379e:	685a      	ldr	r2, [r3, #4]
    37a0:	f36f 329b 	bfc	r2, #14, #14
    37a4:	605a      	str	r2, [r3, #4]
    37a6:	e7cc      	b.n	3742 <_usb_d_dev_in_next+0x9e>
	if (is_ctrl) {
    37a8:	f1ba 0f01 	cmp.w	sl, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    37ac:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
	if (last_pkt == ept->size) {
    37b0:	ea02 0206 	and.w	r2, r2, r6
    37b4:	bf0c      	ite	eq
    37b6:	234b      	moveq	r3, #75	; 0x4b
    37b8:	234a      	movne	r3, #74	; 0x4a
    37ba:	4596      	cmp	lr, r2
    37bc:	f885 3108 	strb.w	r3, [r5, #264]	; 0x108
    37c0:	d10c      	bne.n	37dc <_usb_d_dev_in_next+0x138>
		ept->flags.bits.is_busy = 0;
    37c2:	7ce3      	ldrb	r3, [r4, #19]
    37c4:	f36f 1386 	bfc	r3, #6, #1
    37c8:	74e3      	strb	r3, [r4, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    37ca:	4b08      	ldr	r3, [pc, #32]	; (37ec <_usb_d_dev_in_next+0x148>)
    37cc:	68db      	ldr	r3, [r3, #12]
    37ce:	4798      	blx	r3
    37d0:	2800      	cmp	r0, #0
    37d2:	d1c9      	bne.n	3768 <_usb_d_dev_in_next+0xc4>
		ept->flags.bits.is_busy = 1;
    37d4:	7ce3      	ldrb	r3, [r4, #19]
    37d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    37da:	74e3      	strb	r3, [r4, #19]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    37dc:	4620      	mov	r0, r4
    37de:	2100      	movs	r1, #0
    37e0:	4b05      	ldr	r3, [pc, #20]	; (37f8 <_usb_d_dev_in_next+0x154>)
}
    37e2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    37e6:	4718      	bx	r3
    37e8:	2000711c 	.word	0x2000711c
    37ec:	20007054 	.word	0x20007054
    37f0:	0000ad77 	.word	0x0000ad77
    37f4:	2000712c 	.word	0x2000712c
    37f8:	000034f5 	.word	0x000034f5

000037fc <_usb_d_dev_out_next>:
{
    37fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    3800:	7c86      	ldrb	r6, [r0, #18]
    3802:	f006 060f 	and.w	r6, r6, #15
{
    3806:	4604      	mov	r4, r0
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    3808:	460f      	mov	r7, r1
    380a:	0175      	lsls	r5, r6, #5
    380c:	2900      	cmp	r1, #0
    380e:	d062      	beq.n	38d6 <_usb_d_dev_out_next+0xda>
    3810:	4b61      	ldr	r3, [pc, #388]	; (3998 <_usb_d_dev_out_next+0x19c>)
    3812:	442b      	add	r3, r5
    3814:	685a      	ldr	r2, [r3, #4]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    3816:	685b      	ldr	r3, [r3, #4]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    3818:	f3c2 398d 	ubfx	r9, r2, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    381c:	f3c3 0a0d 	ubfx	sl, r3, #0, #14
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    3820:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    3824:	7ce2      	ldrb	r2, [r4, #19]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    3826:	f240 33ff 	movw	r3, #1023	; 0x3ff
    382a:	4598      	cmp	r8, r3
    382c:	bf1c      	itt	ne
    382e:	f108 38ff 	addne.w	r8, r8, #4294967295
    3832:	fa1f f888 	uxthne.w	r8, r8
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    3836:	f002 0307 	and.w	r3, r2, #7
	uint16_t           last_pkt   = last_trans & size_mask;
    383a:	ea0a 0b08 	and.w	fp, sl, r8
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    383e:	9301      	str	r3, [sp, #4]
	if (isr) {
    3840:	b12f      	cbz	r7, 384e <_usb_d_dev_out_next+0x52>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3842:	0173      	lsls	r3, r6, #5
    3844:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    3848:	2101      	movs	r1, #1
    384a:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
    384e:	0690      	lsls	r0, r2, #26
    3850:	d50c      	bpl.n	386c <_usb_d_dev_out_next+0x70>
    3852:	6862      	ldr	r2, [r4, #4]
    3854:	b152      	cbz	r2, 386c <_usb_d_dev_out_next+0x70>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    3856:	68a0      	ldr	r0, [r4, #8]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    3858:	6823      	ldr	r3, [r4, #0]
    385a:	68e1      	ldr	r1, [r4, #12]
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    385c:	1a12      	subs	r2, r2, r0
    385e:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    3860:	455a      	cmp	r2, fp
    3862:	4418      	add	r0, r3
    3864:	bf28      	it	cs
    3866:	465a      	movcs	r2, fp
    3868:	4b4c      	ldr	r3, [pc, #304]	; (399c <_usb_d_dev_out_next+0x1a0>)
    386a:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    386c:	6862      	ldr	r2, [r4, #4]
    386e:	2a00      	cmp	r2, #0
    3870:	d134      	bne.n	38dc <_usb_d_dev_out_next+0xe0>
    3872:	7ce3      	ldrb	r3, [r4, #19]
    3874:	06d9      	lsls	r1, r3, #27
    3876:	f140 8089 	bpl.w	398c <_usb_d_dev_out_next+0x190>
		ept->flags.bits.need_zlp  = 0;
    387a:	f362 1304 	bfi	r3, r2, #4, #1
	bank->ADDR.reg          = addr;
    387e:	4848      	ldr	r0, [pc, #288]	; (39a0 <_usb_d_dev_out_next+0x1a4>)
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    3880:	68e1      	ldr	r1, [r4, #12]
		ept->flags.bits.use_cache = 1;
    3882:	b2db      	uxtb	r3, r3
	bank->ADDR.reg          = addr;
    3884:	4428      	add	r0, r5
		ept->flags.bits.use_cache = 1;
    3886:	f043 0320 	orr.w	r3, r3, #32
    388a:	74e3      	strb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
    388c:	f100 03c8 	add.w	r3, r0, #200	; 0xc8
    3890:	f8c0 10c8 	str.w	r1, [r0, #200]	; 0xc8
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    3894:	6859      	ldr	r1, [r3, #4]
    3896:	8a20      	ldrh	r0, [r4, #16]
    3898:	f360 319b 	bfi	r1, r0, #14, #14
    389c:	6059      	str	r1, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    389e:	6859      	ldr	r1, [r3, #4]
    38a0:	f362 010d 	bfi	r1, r2, #0, #14
    38a4:	6059      	str	r1, [r3, #4]
	if (!isr) {
    38a6:	b96f      	cbnz	r7, 38c4 <_usb_d_dev_out_next+0xc8>
		if (is_ctrl) {
    38a8:	9b01      	ldr	r3, [sp, #4]
    38aa:	2b01      	cmp	r3, #1
	bank->STATUS_BK.reg     = 0;
    38ac:	bf04      	itt	eq
    38ae:	4b3c      	ldreq	r3, [pc, #240]	; (39a0 <_usb_d_dev_out_next+0x1a4>)
    38b0:	195b      	addeq	r3, r3, r5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    38b2:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    38b6:	bf0a      	itet	eq
    38b8:	f883 70e2 	strbeq.w	r7, [r3, #226]	; 0xe2
			inten = USB_D_BANK0_INT_FLAGS;
    38bc:	2325      	movne	r3, #37	; 0x25
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    38be:	232d      	moveq	r3, #45	; 0x2d
    38c0:	f885 3109 	strb.w	r3, [r5, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    38c4:	0176      	lsls	r6, r6, #5
    38c6:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
    38ca:	2340      	movs	r3, #64	; 0x40
    38cc:	f886 3104 	strb.w	r3, [r6, #260]	; 0x104
}
    38d0:	b003      	add	sp, #12
    38d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    38d6:	4689      	mov	r9, r1
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    38d8:	468a      	mov	sl, r1
    38da:	e7a1      	b.n	3820 <_usb_d_dev_out_next+0x24>
	} else if (isr && last_pkt < ept->size) {
    38dc:	b1f7      	cbz	r7, 391c <_usb_d_dev_out_next+0x120>
    38de:	8a23      	ldrh	r3, [r4, #16]
    38e0:	455b      	cmp	r3, fp
    38e2:	d91b      	bls.n	391c <_usb_d_dev_out_next+0x120>
		ept->flags.bits.need_zlp = 0;
    38e4:	7ce3      	ldrb	r3, [r4, #19]
    38e6:	f36f 1304 	bfc	r3, #4, #1
    38ea:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    38ec:	68a3      	ldr	r3, [r4, #8]
    38ee:	4453      	add	r3, sl
		ept->trans_count += trans_size;
    38f0:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    38f2:	9b01      	ldr	r3, [sp, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    38f4:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    38f8:	2b01      	cmp	r3, #1
    38fa:	bf0c      	ite	eq
    38fc:	232d      	moveq	r3, #45	; 0x2d
    38fe:	2325      	movne	r3, #37	; 0x25
    3900:	f885 3108 	strb.w	r3, [r5, #264]	; 0x108
	if (0 == epn) {
    3904:	b91e      	cbnz	r6, 390e <_usb_d_dev_out_next+0x112>
	bank->ADDR.reg          = addr;
    3906:	4b26      	ldr	r3, [pc, #152]	; (39a0 <_usb_d_dev_out_next+0x1a4>)
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    3908:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    390a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    390e:	4b25      	ldr	r3, [pc, #148]	; (39a4 <_usb_d_dev_out_next+0x1a8>)
    3910:	2100      	movs	r1, #0
    3912:	4620      	mov	r0, r4
}
    3914:	b003      	add	sp, #12
    3916:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    391a:	4718      	bx	r3
		ept->trans_count += trans_size;
    391c:	68a1      	ldr	r1, [r4, #8]
    391e:	4449      	add	r1, r9
		if (ept->trans_count < ept->trans_size) {
    3920:	428a      	cmp	r2, r1
		ept->trans_count += trans_size;
    3922:	60a1      	str	r1, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    3924:	d9e5      	bls.n	38f2 <_usb_d_dev_out_next+0xf6>
			if (ept->flags.bits.use_cache) {
    3926:	7ce0      	ldrb	r0, [r4, #19]
    3928:	4b1d      	ldr	r3, [pc, #116]	; (39a0 <_usb_d_dev_out_next+0x1a4>)
    392a:	f8b4 e010 	ldrh.w	lr, [r4, #16]
			trans_next = ept->trans_size - ept->trans_count;
    392e:	1a52      	subs	r2, r2, r1
			if (ept->flags.bits.use_cache) {
    3930:	f010 0f20 	tst.w	r0, #32
			trans_next = ept->trans_size - ept->trans_count;
    3934:	b292      	uxth	r2, r2
			if (ept->flags.bits.use_cache) {
    3936:	d014      	beq.n	3962 <_usb_d_dev_out_next+0x166>
	bank->ADDR.reg          = addr;
    3938:	1959      	adds	r1, r3, r5
    393a:	4572      	cmp	r2, lr
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    393c:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    393e:	f8c1 00c8 	str.w	r0, [r1, #200]	; 0xc8
    3942:	bf28      	it	cs
    3944:	4672      	movcs	r2, lr
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    3946:	442b      	add	r3, r5
    3948:	f8d3 10cc 	ldr.w	r1, [r3, #204]	; 0xcc
    394c:	f362 319b 	bfi	r1, r2, #14, #14
    3950:	f8c3 10cc 	str.w	r1, [r3, #204]	; 0xcc
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    3954:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
    3958:	f36f 020d 	bfc	r2, #0, #14
    395c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    3960:	e7a1      	b.n	38a6 <_usb_d_dev_out_next+0xaa>
				if (trans_next > ept->size) {
    3962:	4572      	cmp	r2, lr
    3964:	d90a      	bls.n	397c <_usb_d_dev_out_next+0x180>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    3966:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    396a:	d80c      	bhi.n	3986 <_usb_d_dev_out_next+0x18a>
    396c:	ea22 0208 	bic.w	r2, r2, r8
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    3970:	6820      	ldr	r0, [r4, #0]
    3972:	4401      	add	r1, r0
	bank->ADDR.reg          = addr;
    3974:	1958      	adds	r0, r3, r5
    3976:	f8c0 10c8 	str.w	r1, [r0, #200]	; 0xc8
    397a:	e7e4      	b.n	3946 <_usb_d_dev_out_next+0x14a>
				} else if (trans_next < ept->size) {
    397c:	d2f8      	bcs.n	3970 <_usb_d_dev_out_next+0x174>
					ept->flags.bits.use_cache = 1;
    397e:	f040 0020 	orr.w	r0, r0, #32
    3982:	74e0      	strb	r0, [r4, #19]
    3984:	e7f4      	b.n	3970 <_usb_d_dev_out_next+0x174>
						trans_next = USB_D_DEV_TRANS_MAX;
    3986:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    398a:	e7f1      	b.n	3970 <_usb_d_dev_out_next+0x174>
	} else if (isr && last_pkt < ept->size) {
    398c:	2f00      	cmp	r7, #0
    398e:	d1a6      	bne.n	38de <_usb_d_dev_out_next+0xe2>
		ept->trans_count += trans_size;
    3990:	68a3      	ldr	r3, [r4, #8]
    3992:	444b      	add	r3, r9
    3994:	e7ac      	b.n	38f0 <_usb_d_dev_out_next+0xf4>
    3996:	bf00      	nop
    3998:	2000711c 	.word	0x2000711c
    399c:	0000ad77 	.word	0x0000ad77
    39a0:	20007054 	.word	0x20007054
    39a4:	000034f5 	.word	0x000034f5

000039a8 <_usb_d_dev_handler>:
{
    39a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    39ac:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    39b0:	8c1d      	ldrh	r5, [r3, #32]
    39b2:	b2ad      	uxth	r5, r5
	if (0 == epint) {
    39b4:	2d00      	cmp	r5, #0
    39b6:	d16e      	bne.n	3a96 <_usb_d_dev_handler+0xee>
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    39b8:	8b99      	ldrh	r1, [r3, #28]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    39ba:	8b1a      	ldrh	r2, [r3, #24]
    39bc:	b292      	uxth	r2, r2
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    39be:	400a      	ands	r2, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    39c0:	f012 0004 	ands.w	r0, r2, #4
    39c4:	d006      	beq.n	39d4 <_usb_d_dev_handler+0x2c>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    39c6:	2204      	movs	r2, #4
    39c8:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    39ca:	4b67      	ldr	r3, [pc, #412]	; (3b68 <_usb_d_dev_handler+0x1c0>)
}
    39cc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	dev_inst.callbacks.sof();
    39d0:	681b      	ldr	r3, [r3, #0]
    39d2:	4718      	bx	r3
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    39d4:	f412 7100 	ands.w	r1, r2, #512	; 0x200
    39d8:	d025      	beq.n	3a26 <_usb_d_dev_handler+0x7e>
    39da:	f240 2201 	movw	r2, #513	; 0x201
    39de:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    39e0:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    39e2:	2270      	movs	r2, #112	; 0x70
    39e4:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    39e6:	4b60      	ldr	r3, [pc, #384]	; (3b68 <_usb_d_dev_handler+0x1c0>)
    39e8:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
    39ec:	f002 020f 	and.w	r2, r2, #15
    39f0:	2a03      	cmp	r2, #3
    39f2:	d014      	beq.n	3a1e <_usb_d_dev_handler+0x76>
    39f4:	f8b3 20f0 	ldrh.w	r2, [r3, #240]	; 0xf0
    39f8:	f002 020f 	and.w	r2, r2, #15
    39fc:	2a03      	cmp	r2, #3
    39fe:	d110      	bne.n	3a22 <_usb_d_dev_handler+0x7a>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    3a00:	2101      	movs	r1, #1
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    3a02:	eb03 1041 	add.w	r0, r3, r1, lsl #5
			bank->EXTREG.reg = 0;
    3a06:	2200      	movs	r2, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    3a08:	f8b0 10d0 	ldrh.w	r1, [r0, #208]	; 0xd0
			bank->EXTREG.reg = 0;
    3a0c:	f8a0 20d0 	strh.w	r2, [r0, #208]	; 0xd0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    3a10:	f3c1 110a 	ubfx	r1, r1, #4, #11
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    3a14:	685b      	ldr	r3, [r3, #4]
    3a16:	2003      	movs	r0, #3
}
    3a18:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    3a1c:	4718      	bx	r3
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    3a1e:	4601      	mov	r1, r0
    3a20:	e7ef      	b.n	3a02 <_usb_d_dev_handler+0x5a>
	uint32_t lpm_variable = 0;
    3a22:	4601      	mov	r1, r0
    3a24:	e7f6      	b.n	3a14 <_usb_d_dev_handler+0x6c>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    3a26:	f012 0080 	ands.w	r0, r2, #128	; 0x80
    3a2a:	d005      	beq.n	3a38 <_usb_d_dev_handler+0x90>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    3a2c:	2280      	movs	r2, #128	; 0x80
    3a2e:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    3a30:	4b4d      	ldr	r3, [pc, #308]	; (3b68 <_usb_d_dev_handler+0x1c0>)
    3a32:	2005      	movs	r0, #5
    3a34:	685b      	ldr	r3, [r3, #4]
    3a36:	e7ef      	b.n	3a18 <_usb_d_dev_handler+0x70>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    3a38:	f012 0470 	ands.w	r4, r2, #112	; 0x70
    3a3c:	d00c      	beq.n	3a58 <_usb_d_dev_handler+0xb0>
    3a3e:	2270      	movs	r2, #112	; 0x70
    3a40:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    3a42:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    3a44:	f240 2201 	movw	r2, #513	; 0x201
    3a48:	831a      	strh	r2, [r3, #24]
		_usb_d_dev_wait_dfll_rdy();
    3a4a:	4b48      	ldr	r3, [pc, #288]	; (3b6c <_usb_d_dev_handler+0x1c4>)
    3a4c:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    3a4e:	4b46      	ldr	r3, [pc, #280]	; (3b68 <_usb_d_dev_handler+0x1c0>)
    3a50:	4601      	mov	r1, r0
    3a52:	685b      	ldr	r3, [r3, #4]
    3a54:	2002      	movs	r0, #2
    3a56:	e7df      	b.n	3a18 <_usb_d_dev_handler+0x70>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    3a58:	f012 0108 	ands.w	r1, r2, #8
    3a5c:	d00f      	beq.n	3a7e <_usb_d_dev_handler+0xd6>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    3a5e:	2208      	movs	r2, #8

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    3a60:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    3a64:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    3a66:	2270      	movs	r2, #112	; 0x70
    3a68:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    3a6a:	f240 2201 	movw	r2, #513	; 0x201
    3a6e:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    3a70:	4b3f      	ldr	r3, [pc, #252]	; (3b70 <_usb_d_dev_handler+0x1c8>)
    3a72:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    3a74:	4b3c      	ldr	r3, [pc, #240]	; (3b68 <_usb_d_dev_handler+0x1c0>)
    3a76:	4621      	mov	r1, r4
    3a78:	685b      	ldr	r3, [r3, #4]
    3a7a:	2001      	movs	r0, #1
    3a7c:	e7cc      	b.n	3a18 <_usb_d_dev_handler+0x70>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    3a7e:	07d0      	lsls	r0, r2, #31
    3a80:	d509      	bpl.n	3a96 <_usb_d_dev_handler+0xee>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    3a82:	f240 2201 	movw	r2, #513	; 0x201
    3a86:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    3a88:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    3a8a:	2270      	movs	r2, #112	; 0x70
    3a8c:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    3a8e:	4b36      	ldr	r3, [pc, #216]	; (3b68 <_usb_d_dev_handler+0x1c0>)
    3a90:	2004      	movs	r0, #4
    3a92:	685b      	ldr	r3, [r3, #4]
    3a94:	e7c0      	b.n	3a18 <_usb_d_dev_handler+0x70>
    3a96:	4c37      	ldr	r4, [pc, #220]	; (3b74 <_usb_d_dev_handler+0x1cc>)
			_usb_d_dev_handle_setup(ept);
    3a98:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 3b88 <_usb_d_dev_handler+0x1e0>
			_usb_d_dev_handle_trfail(ept, 1);
    3a9c:	4f36      	ldr	r7, [pc, #216]	; (3b78 <_usb_d_dev_handler+0x1d0>)
	uint32_t lpm_variable = 0;
    3a9e:	2600      	movs	r6, #0
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    3aa0:	f1a4 0914 	sub.w	r9, r4, #20
		if (ept->ep == 0xFF) {
    3aa4:	7ca2      	ldrb	r2, [r4, #18]
    3aa6:	2aff      	cmp	r2, #255	; 0xff
    3aa8:	d029      	beq.n	3afe <_usb_d_dev_handler+0x156>
	if (!(epint & (1u << epn))) {
    3aaa:	f002 020f 	and.w	r2, r2, #15
    3aae:	2101      	movs	r1, #1
    3ab0:	fa01 f302 	lsl.w	r3, r1, r2
    3ab4:	422b      	tst	r3, r5
    3ab6:	d022      	beq.n	3afe <_usb_d_dev_handler+0x156>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    3ab8:	0153      	lsls	r3, r2, #5
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    3aba:	0152      	lsls	r2, r2, #5
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    3abc:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    3ac0:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    3ac4:	f893 0107 	ldrb.w	r0, [r3, #263]	; 0x107
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    3ac8:	f892 3109 	ldrb.w	r3, [r2, #265]	; 0x109
	if (flags) {
    3acc:	4003      	ands	r3, r0
    3ace:	d016      	beq.n	3afe <_usb_d_dev_handler+0x156>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    3ad0:	2214      	movs	r2, #20
    3ad2:	fb02 9206 	mla	r2, r2, r6, r9
    3ad6:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
    3ada:	f002 0047 	and.w	r0, r2, #71	; 0x47
    3ade:	4288      	cmp	r0, r1
    3ae0:	d114      	bne.n	3b0c <_usb_d_dev_handler+0x164>
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    3ae2:	06da      	lsls	r2, r3, #27
    3ae4:	d502      	bpl.n	3aec <_usb_d_dev_handler+0x144>
			_usb_d_dev_handle_setup(ept);
    3ae6:	4620      	mov	r0, r4
    3ae8:	47c0      	blx	r8
    3aea:	e008      	b.n	3afe <_usb_d_dev_handler+0x156>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    3aec:	f013 0140 	ands.w	r1, r3, #64	; 0x40
    3af0:	d003      	beq.n	3afa <_usb_d_dev_handler+0x152>
		_usb_d_dev_handle_stall(ept, 1);
    3af2:	4601      	mov	r1, r0
		_usb_d_dev_handle_stall(ept, 0);
    3af4:	4620      	mov	r0, r4
    3af6:	4b21      	ldr	r3, [pc, #132]	; (3b7c <_usb_d_dev_handler+0x1d4>)
    3af8:	e015      	b.n	3b26 <_usb_d_dev_handler+0x17e>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    3afa:	069b      	lsls	r3, r3, #26
    3afc:	d4fa      	bmi.n	3af4 <_usb_d_dev_handler+0x14c>
    3afe:	3601      	adds	r6, #1
	for (i = 0; i < USB_D_N_EP; i++) {
    3b00:	2e09      	cmp	r6, #9
    3b02:	f104 0414 	add.w	r4, r4, #20
    3b06:	d1cd      	bne.n	3aa4 <_usb_d_dev_handler+0xfc>
}
    3b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (_usb_d_dev_ep_is_in(ept)) {
    3b0c:	0610      	lsls	r0, r2, #24
    3b0e:	d514      	bpl.n	3b3a <_usb_d_dev_handler+0x192>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    3b10:	0658      	lsls	r0, r3, #25
    3b12:	d4ef      	bmi.n	3af4 <_usb_d_dev_handler+0x14c>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    3b14:	0718      	lsls	r0, r3, #28
    3b16:	d502      	bpl.n	3b1e <_usb_d_dev_handler+0x176>
			_usb_d_dev_handle_trfail(ept, 1);
    3b18:	4620      	mov	r0, r4
    3b1a:	47b8      	blx	r7
    3b1c:	e7ef      	b.n	3afe <_usb_d_dev_handler+0x156>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    3b1e:	0798      	lsls	r0, r3, #30
    3b20:	d503      	bpl.n	3b2a <_usb_d_dev_handler+0x182>
		_usb_d_dev_in_next(ept, true);
    3b22:	4b17      	ldr	r3, [pc, #92]	; (3b80 <_usb_d_dev_handler+0x1d8>)
    3b24:	4620      	mov	r0, r4
		_usb_d_dev_out_next(ept, true);
    3b26:	4798      	blx	r3
    3b28:	e7e9      	b.n	3afe <_usb_d_dev_handler+0x156>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    3b2a:	f002 0207 	and.w	r2, r2, #7
    3b2e:	2a01      	cmp	r2, #1
    3b30:	d1e5      	bne.n	3afe <_usb_d_dev_handler+0x156>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    3b32:	075a      	lsls	r2, r3, #29
    3b34:	d515      	bpl.n	3b62 <_usb_d_dev_handler+0x1ba>
			_usb_d_dev_handle_trfail(ept, 0);
    3b36:	2100      	movs	r1, #0
    3b38:	e7ee      	b.n	3b18 <_usb_d_dev_handler+0x170>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    3b3a:	f013 0020 	ands.w	r0, r3, #32
    3b3e:	d001      	beq.n	3b44 <_usb_d_dev_handler+0x19c>
		_usb_d_dev_handle_stall(ept, 0);
    3b40:	2100      	movs	r1, #0
    3b42:	e7d7      	b.n	3af4 <_usb_d_dev_handler+0x14c>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    3b44:	0758      	lsls	r0, r3, #29
    3b46:	d4f6      	bmi.n	3b36 <_usb_d_dev_handler+0x18e>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    3b48:	07d8      	lsls	r0, r3, #31
    3b4a:	d502      	bpl.n	3b52 <_usb_d_dev_handler+0x1aa>
		_usb_d_dev_out_next(ept, true);
    3b4c:	4620      	mov	r0, r4
    3b4e:	4b0d      	ldr	r3, [pc, #52]	; (3b84 <_usb_d_dev_handler+0x1dc>)
    3b50:	e7e9      	b.n	3b26 <_usb_d_dev_handler+0x17e>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    3b52:	f002 0207 	and.w	r2, r2, #7
    3b56:	2a01      	cmp	r2, #1
    3b58:	d1d1      	bne.n	3afe <_usb_d_dev_handler+0x156>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    3b5a:	071a      	lsls	r2, r3, #28
    3b5c:	d501      	bpl.n	3b62 <_usb_d_dev_handler+0x1ba>
			_usb_d_dev_handle_trfail(ept, 1);
    3b5e:	2101      	movs	r1, #1
    3b60:	e7da      	b.n	3b18 <_usb_d_dev_handler+0x170>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    3b62:	06db      	lsls	r3, r3, #27
    3b64:	d5cb      	bpl.n	3afe <_usb_d_dev_handler+0x156>
    3b66:	e7be      	b.n	3ae6 <_usb_d_dev_handler+0x13e>
    3b68:	20007054 	.word	0x20007054
    3b6c:	0000340d 	.word	0x0000340d
    3b70:	00003669 	.word	0x00003669
    3b74:	20007068 	.word	0x20007068
    3b78:	0000357d 	.word	0x0000357d
    3b7c:	000034cd 	.word	0x000034cd
    3b80:	000036a5 	.word	0x000036a5
    3b84:	000037fd 	.word	0x000037fd
    3b88:	00003449 	.word	0x00003449

00003b8c <_usbd_ep_pcksize_size>:
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3b8c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    3b90:	d80f      	bhi.n	3bb2 <_usbd_ep_pcksize_size+0x26>
    3b92:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    3b96:	d80e      	bhi.n	3bb6 <_usbd_ep_pcksize_size+0x2a>
    3b98:	2880      	cmp	r0, #128	; 0x80
    3b9a:	d80e      	bhi.n	3bba <_usbd_ep_pcksize_size+0x2e>
    3b9c:	2840      	cmp	r0, #64	; 0x40
    3b9e:	d80e      	bhi.n	3bbe <_usbd_ep_pcksize_size+0x32>
    3ba0:	2820      	cmp	r0, #32
    3ba2:	d80e      	bhi.n	3bc2 <_usbd_ep_pcksize_size+0x36>
    3ba4:	2810      	cmp	r0, #16
    3ba6:	d80e      	bhi.n	3bc6 <_usbd_ep_pcksize_size+0x3a>
    3ba8:	2808      	cmp	r0, #8
    3baa:	bf94      	ite	ls
    3bac:	2000      	movls	r0, #0
    3bae:	2001      	movhi	r0, #1
    3bb0:	4770      	bx	lr
    3bb2:	2007      	movs	r0, #7
    3bb4:	4770      	bx	lr
    3bb6:	2006      	movs	r0, #6
    3bb8:	4770      	bx	lr
    3bba:	2005      	movs	r0, #5
    3bbc:	4770      	bx	lr
    3bbe:	2004      	movs	r0, #4
    3bc0:	4770      	bx	lr
    3bc2:	2003      	movs	r0, #3
    3bc4:	4770      	bx	lr
    3bc6:	2002      	movs	r0, #2
}
    3bc8:	4770      	bx	lr
	...

00003bcc <_usb_d_dev_init>:
{
    3bcc:	b508      	push	{r3, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    3bce:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3bd2:	789a      	ldrb	r2, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    3bd4:	07d1      	lsls	r1, r2, #31
    3bd6:	d406      	bmi.n	3be6 <_usb_d_dev_init+0x1a>
	tmp = ((Usb *)hw)->DEVICE.CTRLA.reg;
    3bd8:	781a      	ldrb	r2, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    3bda:	0792      	lsls	r2, r2, #30
    3bdc:	d43f      	bmi.n	3c5e <_usb_d_dev_init+0x92>
	((Usb *)hw)->DEVICE.CTRLA.reg = data;
    3bde:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3be2:	2201      	movs	r2, #1
    3be4:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    3be6:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    3bea:	7893      	ldrb	r3, [r2, #2]
    3bec:	07db      	lsls	r3, r3, #31
    3bee:	d4fc      	bmi.n	3bea <_usb_d_dev_init+0x1e>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    3bf0:	4b24      	ldr	r3, [pc, #144]	; (3c84 <_usb_d_dev_init+0xb8>)
    3bf2:	4a25      	ldr	r2, [pc, #148]	; (3c88 <_usb_d_dev_init+0xbc>)
    3bf4:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    3bf6:	605a      	str	r2, [r3, #4]
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    3bf8:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    3bfa:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    3bfc:	611a      	str	r2, [r3, #16]
	_usb_d_dev_reset_epts();
    3bfe:	4b23      	ldr	r3, [pc, #140]	; (3c8c <_usb_d_dev_init+0xc0>)
    3c00:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    3c02:	4b23      	ldr	r3, [pc, #140]	; (3c90 <_usb_d_dev_init+0xc4>)
    3c04:	6819      	ldr	r1, [r3, #0]
	uint32_t pad_transp
    3c06:	f3c1 1344 	ubfx	r3, r1, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    3c0a:	f3c1 2282 	ubfx	r2, r1, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
    3c0e:	f011 011f 	ands.w	r1, r1, #31
    3c12:	d031      	beq.n	3c78 <_usb_d_dev_init+0xac>
		pad_transn = 9;
    3c14:	291f      	cmp	r1, #31
    3c16:	bf08      	it	eq
    3c18:	2109      	moveq	r1, #9
	if (pad_transp == 0 || pad_transp == 0x1F) {
    3c1a:	b37b      	cbz	r3, 3c7c <_usb_d_dev_init+0xb0>
		pad_transp = 25;
    3c1c:	2b1f      	cmp	r3, #31
    3c1e:	bf08      	it	eq
    3c20:	2319      	moveq	r3, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
    3c22:	b36a      	cbz	r2, 3c80 <_usb_d_dev_init+0xb4>
		pad_trim = 6;
    3c24:	2a07      	cmp	r2, #7
    3c26:	bf08      	it	eq
    3c28:	2206      	moveq	r2, #6
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    3c2a:	0312      	lsls	r2, r2, #12
    3c2c:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    3c30:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    3c34:	4313      	orrs	r3, r2
    3c36:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    3c3a:	b29b      	uxth	r3, r3
    3c3c:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    3c3e:	78d3      	ldrb	r3, [r2, #3]
    3c40:	f043 0303 	orr.w	r3, r3, #3
    3c44:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    3c46:	78d3      	ldrb	r3, [r2, #3]
    3c48:	f043 030c 	orr.w	r3, r3, #12
    3c4c:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->DEVICE.CTRLA.reg = data;
    3c4e:	2304      	movs	r3, #4
    3c50:	7013      	strb	r3, [r2, #0]
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    3c52:	4b10      	ldr	r3, [pc, #64]	; (3c94 <_usb_d_dev_init+0xc8>)
	((Usb *)hw)->DEVICE.DESCADD.reg = data;
    3c54:	6253      	str	r3, [r2, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    3c56:	2301      	movs	r3, #1
    3c58:	8113      	strh	r3, [r2, #8]
}
    3c5a:	2000      	movs	r0, #0
    3c5c:	bd08      	pop	{r3, pc}
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    3c5e:	789a      	ldrb	r2, [r3, #2]
    3c60:	0790      	lsls	r0, r2, #30
    3c62:	d1fc      	bne.n	3c5e <_usb_d_dev_init+0x92>
	((Usb *)hw)->DEVICE.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    3c64:	781a      	ldrb	r2, [r3, #0]
    3c66:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
    3c6a:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    3c6c:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    3c70:	7893      	ldrb	r3, [r2, #2]
    3c72:	0799      	lsls	r1, r3, #30
    3c74:	d4fc      	bmi.n	3c70 <_usb_d_dev_init+0xa4>
    3c76:	e7b2      	b.n	3bde <_usb_d_dev_init+0x12>
		pad_transn = 9;
    3c78:	2109      	movs	r1, #9
    3c7a:	e7ce      	b.n	3c1a <_usb_d_dev_init+0x4e>
		pad_transp = 25;
    3c7c:	2319      	movs	r3, #25
    3c7e:	e7d0      	b.n	3c22 <_usb_d_dev_init+0x56>
		pad_trim = 6;
    3c80:	2206      	movs	r2, #6
    3c82:	e7d2      	b.n	3c2a <_usb_d_dev_init+0x5e>
    3c84:	20007054 	.word	0x20007054
    3c88:	00003409 	.word	0x00003409
    3c8c:	00003669 	.word	0x00003669
    3c90:	00800084 	.word	0x00800084
    3c94:	2000711c 	.word	0x2000711c

00003c98 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->DEVICE.SYNCBUSY.reg;
    3c98:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    3c9c:	7893      	ldrb	r3, [r2, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    3c9e:	0798      	lsls	r0, r3, #30
    3ca0:	d11a      	bne.n	3cd8 <_usb_d_dev_enable+0x40>
	return ((Usb *)hw)->DEVICE.CTRLA.reg;
    3ca2:	7813      	ldrb	r3, [r2, #0]
    3ca4:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    3ca6:	0799      	lsls	r1, r3, #30
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    3ca8:	bf5c      	itt	pl
    3caa:	f043 0302 	orrpl.w	r3, r3, #2
	((Usb *)hw)->DEVICE.CTRLA.reg = data;
    3cae:	7013      	strbpl	r3, [r2, #0]
    3cb0:	4b0b      	ldr	r3, [pc, #44]	; (3ce0 <_usb_d_dev_enable+0x48>)
    3cb2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    3cb6:	609a      	str	r2, [r3, #8]
    3cb8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    3cbc:	609a      	str	r2, [r3, #8]
    3cbe:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    3cc2:	609a      	str	r2, [r3, #8]
    3cc4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    3cc8:	609a      	str	r2, [r3, #8]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    3cca:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3cce:	f240 228d 	movw	r2, #653	; 0x28d
    3cd2:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    3cd4:	2000      	movs	r0, #0
    3cd6:	4770      	bx	lr
		return -USB_ERR_DENIED;
    3cd8:	f06f 0010 	mvn.w	r0, #16
}
    3cdc:	4770      	bx	lr
    3cde:	bf00      	nop
    3ce0:	e000e100 	.word	0xe000e100

00003ce4 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    3ce4:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    3ce8:	8913      	ldrh	r3, [r2, #8]
    3cea:	f023 0301 	bic.w	r3, r3, #1
    3cee:	041b      	lsls	r3, r3, #16
    3cf0:	0c1b      	lsrs	r3, r3, #16
    3cf2:	8113      	strh	r3, [r2, #8]
    3cf4:	4770      	bx	lr

00003cf6 <_usb_d_dev_set_address>:
	((Usb *)hw)->DEVICE.DADD.reg = data;
    3cf6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    3cfa:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    3cfe:	7298      	strb	r0, [r3, #10]
    3d00:	4770      	bx	lr
	...

00003d04 <_usb_d_dev_ep_init>:
{
    3d04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    3d08:	f000 040f 	and.w	r4, r0, #15
    3d0c:	b247      	sxtb	r7, r0
{
    3d0e:	460d      	mov	r5, r1
    3d10:	4680      	mov	r8, r0
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    3d12:	0ff9      	lsrs	r1, r7, #31
    3d14:	4620      	mov	r0, r4
    3d16:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 3dc0 <_usb_d_dev_ep_init+0xbc>
    3d1a:	47c8      	blx	r9
	if (epn > CONF_USB_D_MAX_EP_N) {
    3d1c:	2c02      	cmp	r4, #2
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    3d1e:	4606      	mov	r6, r0
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    3d20:	f005 0503 	and.w	r5, r5, #3
	if (epn > CONF_USB_D_MAX_EP_N) {
    3d24:	d83f      	bhi.n	3da6 <_usb_d_dev_ep_init+0xa2>
	if (ept->ep != 0xFF) {
    3d26:	7c83      	ldrb	r3, [r0, #18]
    3d28:	2bff      	cmp	r3, #255	; 0xff
    3d2a:	d140      	bne.n	3dae <_usb_d_dev_ep_init+0xaa>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    3d2c:	b985      	cbnz	r5, 3d50 <_usb_d_dev_ep_init+0x4c>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    3d2e:	43f9      	mvns	r1, r7
    3d30:	0fc9      	lsrs	r1, r1, #31
    3d32:	4620      	mov	r0, r4
    3d34:	47c8      	blx	r9
		if (ept_in->ep != 0xFF) {
    3d36:	7c83      	ldrb	r3, [r0, #18]
    3d38:	2bff      	cmp	r3, #255	; 0xff
    3d3a:	d138      	bne.n	3dae <_usb_d_dev_ep_init+0xaa>
		if (pcfg->cache == NULL) {
    3d3c:	230c      	movs	r3, #12
    3d3e:	4363      	muls	r3, r4
    3d40:	491e      	ldr	r1, [pc, #120]	; (3dbc <_usb_d_dev_ep_init+0xb8>)
    3d42:	58cb      	ldr	r3, [r1, r3]
    3d44:	2b00      	cmp	r3, #0
    3d46:	d136      	bne.n	3db6 <_usb_d_dev_ep_init+0xb2>
			return -USB_ERR_FUNC;
    3d48:	f06f 0012 	mvn.w	r0, #18
    3d4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    3d50:	2f00      	cmp	r7, #0
    3d52:	da18      	bge.n	3d86 <_usb_d_dev_ep_init+0x82>
    3d54:	4919      	ldr	r1, [pc, #100]	; (3dbc <_usb_d_dev_ep_init+0xb8>)
    3d56:	230c      	movs	r3, #12
    3d58:	fb03 1304 	mla	r3, r3, r4, r1
    3d5c:	6859      	ldr	r1, [r3, #4]
    3d5e:	b9f1      	cbnz	r1, 3d9e <_usb_d_dev_ep_init+0x9a>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    3d60:	4916      	ldr	r1, [pc, #88]	; (3dbc <_usb_d_dev_ep_init+0xb8>)
	ept->ep       = ep;
    3d62:	f886 8012 	strb.w	r8, [r6, #18]
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    3d66:	230c      	movs	r3, #12
    3d68:	435c      	muls	r4, r3
    3d6a:	190b      	adds	r3, r1, r4
    3d6c:	5909      	ldr	r1, [r1, r4]
    3d6e:	685b      	ldr	r3, [r3, #4]
	ept->size     = max_pkt_siz;
    3d70:	8232      	strh	r2, [r6, #16]
	ept->flags.u8 = (ep_type + 1);
    3d72:	3501      	adds	r5, #1
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    3d74:	ea13 0327 	ands.w	r3, r3, r7, asr #32
    3d78:	bf38      	it	cc
    3d7a:	460b      	movcc	r3, r1
	ept->flags.u8 = (ep_type + 1);
    3d7c:	74f5      	strb	r5, [r6, #19]
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    3d7e:	60f3      	str	r3, [r6, #12]
	return USB_OK;
    3d80:	2000      	movs	r0, #0
    3d82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    3d86:	230c      	movs	r3, #12
    3d88:	4363      	muls	r3, r4
    3d8a:	490c      	ldr	r1, [pc, #48]	; (3dbc <_usb_d_dev_ep_init+0xb8>)
    3d8c:	58cb      	ldr	r3, [r1, r3]
    3d8e:	2b00      	cmp	r3, #0
    3d90:	d0e6      	beq.n	3d60 <_usb_d_dev_ep_init+0x5c>
    3d92:	490a      	ldr	r1, [pc, #40]	; (3dbc <_usb_d_dev_ep_init+0xb8>)
    3d94:	230c      	movs	r3, #12
    3d96:	fb03 1304 	mla	r3, r3, r4, r1
    3d9a:	891b      	ldrh	r3, [r3, #8]
    3d9c:	e000      	b.n	3da0 <_usb_d_dev_ep_init+0x9c>
    3d9e:	895b      	ldrh	r3, [r3, #10]
    3da0:	4293      	cmp	r3, r2
    3da2:	dadd      	bge.n	3d60 <_usb_d_dev_ep_init+0x5c>
    3da4:	e7d0      	b.n	3d48 <_usb_d_dev_ep_init+0x44>
		return -USB_ERR_PARAM;
    3da6:	f06f 0011 	mvn.w	r0, #17
    3daa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -USB_ERR_REDO;
    3dae:	f06f 0013 	mvn.w	r0, #19
    3db2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    3db6:	2f00      	cmp	r7, #0
    3db8:	daeb      	bge.n	3d92 <_usb_d_dev_ep_init+0x8e>
    3dba:	e7cb      	b.n	3d54 <_usb_d_dev_ep_init+0x50>
    3dbc:	0000c20c 	.word	0x0000c20c
    3dc0:	00003431 	.word	0x00003431

00003dc4 <_usb_d_dev_ep_deinit>:
{
    3dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3dc8:	b247      	sxtb	r7, r0
	uint8_t               epn = USB_EP_GET_N(ep);
    3dca:	f000 050f 	and.w	r5, r0, #15
	bool                  dir = USB_EP_GET_DIR(ep);
    3dce:	ea4f 78d7 	mov.w	r8, r7, lsr #31
{
    3dd2:	4604      	mov	r4, r0
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    3dd4:	4641      	mov	r1, r8
    3dd6:	4628      	mov	r0, r5
    3dd8:	4b19      	ldr	r3, [pc, #100]	; (3e40 <_usb_d_dev_ep_deinit+0x7c>)
    3dda:	4798      	blx	r3
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    3ddc:	2d02      	cmp	r5, #2
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    3dde:	4606      	mov	r6, r0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    3de0:	d815      	bhi.n	3e0e <_usb_d_dev_ep_deinit+0x4a>
    3de2:	7c83      	ldrb	r3, [r0, #18]
    3de4:	2bff      	cmp	r3, #255	; 0xff
    3de6:	d012      	beq.n	3e0e <_usb_d_dev_ep_deinit+0x4a>
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    3de8:	4b16      	ldr	r3, [pc, #88]	; (3e44 <_usb_d_dev_ep_deinit+0x80>)
    3dea:	2203      	movs	r2, #3
    3dec:	4641      	mov	r1, r8
    3dee:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    3df0:	7cf3      	ldrb	r3, [r6, #19]
    3df2:	f003 0307 	and.w	r3, r3, #7
    3df6:	2b01      	cmp	r3, #1
    3df8:	d10b      	bne.n	3e12 <_usb_d_dev_ep_deinit+0x4e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    3dfa:	0164      	lsls	r4, r4, #5
    3dfc:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    3e00:	2300      	movs	r3, #0
    3e02:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
	ept->flags.u8 = 0;
    3e06:	2300      	movs	r3, #0
    3e08:	74f3      	strb	r3, [r6, #19]
	ept->ep       = 0xFF;
    3e0a:	23ff      	movs	r3, #255	; 0xff
    3e0c:	74b3      	strb	r3, [r6, #18]
    3e0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (USB_EP_GET_DIR(ep)) {
    3e12:	2f00      	cmp	r7, #0
    3e14:	da09      	bge.n	3e2a <_usb_d_dev_ep_deinit+0x66>
    3e16:	0168      	lsls	r0, r5, #5
    3e18:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    3e1c:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
    3e20:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    3e24:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
    3e28:	e7ed      	b.n	3e06 <_usb_d_dev_ep_deinit+0x42>
    3e2a:	0164      	lsls	r4, r4, #5
    3e2c:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    3e30:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
    3e34:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    3e38:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
    3e3c:	e7e3      	b.n	3e06 <_usb_d_dev_ep_deinit+0x42>
    3e3e:	bf00      	nop
    3e40:	00003431 	.word	0x00003431
    3e44:	00003519 	.word	0x00003519

00003e48 <_usb_d_dev_ep_enable>:
{
    3e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint8_t               epn   = USB_EP_GET_N(ep);
    3e4c:	f000 050f 	and.w	r5, r0, #15
    3e50:	fa4f f980 	sxtb.w	r9, r0
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    3e54:	4b57      	ldr	r3, [pc, #348]	; (3fb4 <_usb_d_dev_ep_enable+0x16c>)
    3e56:	ea4f 71d9 	mov.w	r1, r9, lsr #31
    3e5a:	4628      	mov	r0, r5
    3e5c:	4798      	blx	r3
    3e5e:	016f      	lsls	r7, r5, #5
    3e60:	f107 4682 	add.w	r6, r7, #1090519040	; 0x41000000
    3e64:	4680      	mov	r8, r0
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    3e66:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    3e6a:	2d02      	cmp	r5, #2
    3e6c:	b2c3      	uxtb	r3, r0
    3e6e:	f200 8098 	bhi.w	3fa2 <_usb_d_dev_ep_enable+0x15a>
    3e72:	f898 2012 	ldrb.w	r2, [r8, #18]
    3e76:	2aff      	cmp	r2, #255	; 0xff
    3e78:	f000 8093 	beq.w	3fa2 <_usb_d_dev_ep_enable+0x15a>
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    3e7c:	4c4e      	ldr	r4, [pc, #312]	; (3fb8 <_usb_d_dev_ep_enable+0x170>)
    3e7e:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
    3e82:	440f      	add	r7, r1
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    3e84:	f898 1013 	ldrb.w	r1, [r8, #19]
    3e88:	f001 0007 	and.w	r0, r1, #7
    3e8c:	2801      	cmp	r0, #1
    3e8e:	d148      	bne.n	3f22 <_usb_d_dev_ep_enable+0xda>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    3e90:	f013 0377 	ands.w	r3, r3, #119	; 0x77
    3e94:	f040 8089 	bne.w	3faa <_usb_d_dev_ep_enable+0x162>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    3e98:	2111      	movs	r1, #17
    3e9a:	f886 1100 	strb.w	r1, [r6, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3e9e:	f8b8 1010 	ldrh.w	r1, [r8, #16]
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3ea2:	f8df 9118 	ldr.w	r9, [pc, #280]	; 3fbc <_usb_d_dev_ep_enable+0x174>
    3ea6:	4608      	mov	r0, r1
    3ea8:	47c8      	blx	r9
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3eaa:	f8df e114 	ldr.w	lr, [pc, #276]	; 3fc0 <_usb_d_dev_ep_enable+0x178>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3eae:	0700      	lsls	r0, r0, #28
    3eb0:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3eb4:	ea0e 3e81 	and.w	lr, lr, r1, lsl #14
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3eb8:	f3c1 010d 	ubfx	r1, r1, #0, #14
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3ebc:	ea4e 0e00 	orr.w	lr, lr, r0
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3ec0:	4308      	orrs	r0, r1
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3ec2:	f8c7 e004 	str.w	lr, [r7, #4]
	bank->STATUS_BK.reg     = 0;
    3ec6:	eb04 1545 	add.w	r5, r4, r5, lsl #5
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3eca:	6178      	str	r0, [r7, #20]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3ecc:	f002 020f 	and.w	r2, r2, #15
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3ed0:	2740      	movs	r7, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3ed2:	2080      	movs	r0, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3ed4:	f886 7105 	strb.w	r7, [r6, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3ed8:	f886 0104 	strb.w	r0, [r6, #260]	; 0x104
	bank->ADDR.reg          = addr;
    3edc:	0150      	lsls	r0, r2, #5
	bank->STATUS_BK.reg     = 0;
    3ede:	f885 30d2 	strb.w	r3, [r5, #210]	; 0xd2
	bank->ADDR.reg          = addr;
    3ee2:	4404      	add	r4, r0
	bank->STATUS_BK.reg     = 0;
    3ee4:	f885 30e2 	strb.w	r3, [r5, #226]	; 0xe2
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    3ee8:	f8d8 600c 	ldr.w	r6, [r8, #12]
	bank->ADDR.reg          = addr;
    3eec:	f8c4 60c8 	str.w	r6, [r4, #200]	; 0xc8
    3ef0:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    3ef4:	f8d4 40cc 	ldr.w	r4, [r4, #204]	; 0xcc
    3ef8:	f361 349b 	bfi	r4, r1, #14, #14
    3efc:	606c      	str	r4, [r5, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    3efe:	6869      	ldr	r1, [r5, #4]
    3f00:	f100 4282 	add.w	r2, r0, #1090519040	; 0x41000000
    3f04:	f363 010d 	bfi	r1, r3, #0, #14
    3f08:	6069      	str	r1, [r5, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    3f0a:	4610      	mov	r0, r2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3f0c:	21b0      	movs	r1, #176	; 0xb0
    3f0e:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3f12:	f882 7105 	strb.w	r7, [r2, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    3f16:	2210      	movs	r2, #16
    3f18:	f880 2109 	strb.w	r2, [r0, #265]	; 0x109
	return USB_OK;
    3f1c:	4618      	mov	r0, r3
    3f1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (dir) {
    3f22:	f1b9 0f00 	cmp.w	r9, #0
    3f26:	da1e      	bge.n	3f66 <_usb_d_dev_ep_enable+0x11e>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    3f28:	f013 0270 	ands.w	r2, r3, #112	; 0x70
    3f2c:	d13d      	bne.n	3faa <_usb_d_dev_ep_enable+0x162>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    3f2e:	0108      	lsls	r0, r1, #4
    3f30:	f000 0070 	and.w	r0, r0, #112	; 0x70
    3f34:	4318      	orrs	r0, r3
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3f36:	f8b8 3010 	ldrh.w	r3, [r8, #16]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    3f3a:	f886 0100 	strb.w	r0, [r6, #256]	; 0x100
    3f3e:	491f      	ldr	r1, [pc, #124]	; (3fbc <_usb_d_dev_ep_enable+0x174>)
    3f40:	4618      	mov	r0, r3
    3f42:	4788      	blx	r1
    3f44:	0700      	lsls	r0, r0, #28
    3f46:	f3c3 030d 	ubfx	r3, r3, #0, #14
    3f4a:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
	bank->STATUS_BK.reg     = 0;
    3f4e:	eb04 1445 	add.w	r4, r4, r5, lsl #5
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3f52:	4318      	orrs	r0, r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3f54:	2380      	movs	r3, #128	; 0x80
    3f56:	6178      	str	r0, [r7, #20]
    3f58:	f886 3104 	strb.w	r3, [r6, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    3f5c:	f884 20e2 	strb.w	r2, [r4, #226]	; 0xe2
	return USB_OK;
    3f60:	4610      	mov	r0, r2
    3f62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    3f66:	f013 0207 	ands.w	r2, r3, #7
    3f6a:	d11e      	bne.n	3faa <_usb_d_dev_ep_enable+0x162>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    3f6c:	f001 0107 	and.w	r1, r1, #7
    3f70:	ea41 0003 	orr.w	r0, r1, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3f74:	f8b8 1010 	ldrh.w	r1, [r8, #16]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    3f78:	f886 0100 	strb.w	r0, [r6, #256]	; 0x100
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3f7c:	4b0f      	ldr	r3, [pc, #60]	; (3fbc <_usb_d_dev_ep_enable+0x174>)
    3f7e:	4608      	mov	r0, r1
    3f80:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3f82:	4b0f      	ldr	r3, [pc, #60]	; (3fc0 <_usb_d_dev_ep_enable+0x178>)
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3f84:	0700      	lsls	r0, r0, #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3f86:	ea03 3381 	and.w	r3, r3, r1, lsl #14
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3f8a:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
    3f8e:	4303      	orrs	r3, r0
	bank->STATUS_BK.reg     = 0;
    3f90:	eb04 1445 	add.w	r4, r4, r5, lsl #5
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3f94:	607b      	str	r3, [r7, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3f96:	2340      	movs	r3, #64	; 0x40
    3f98:	f886 3105 	strb.w	r3, [r6, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
    3f9c:	f884 20d2 	strb.w	r2, [r4, #210]	; 0xd2
    3fa0:	e7de      	b.n	3f60 <_usb_d_dev_ep_enable+0x118>
		return -USB_ERR_PARAM;
    3fa2:	f06f 0011 	mvn.w	r0, #17
    3fa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -USB_ERR_REDO;
    3faa:	f06f 0013 	mvn.w	r0, #19
}
    3fae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3fb2:	bf00      	nop
    3fb4:	00003431 	.word	0x00003431
    3fb8:	20007054 	.word	0x20007054
    3fbc:	00003b8d 	.word	0x00003b8d
    3fc0:	0fffc000 	.word	0x0fffc000

00003fc4 <_usb_d_dev_ep_stall>:
{
    3fc4:	b538      	push	{r3, r4, r5, lr}
	bool                  dir = USB_EP_GET_DIR(ep);
    3fc6:	09c2      	lsrs	r2, r0, #7
	uint8_t               epn = USB_EP_GET_N(ep);
    3fc8:	f000 050f 	and.w	r5, r0, #15
{
    3fcc:	460c      	mov	r4, r1
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    3fce:	4628      	mov	r0, r5
    3fd0:	4611      	mov	r1, r2
    3fd2:	4b34      	ldr	r3, [pc, #208]	; (40a4 <_usb_d_dev_ep_stall+0xe0>)
    3fd4:	4798      	blx	r3
	if (epn > CONF_USB_D_MAX_EP_N) {
    3fd6:	2d02      	cmp	r5, #2
    3fd8:	d861      	bhi.n	409e <_usb_d_dev_ep_stall+0xda>
	if (USB_EP_STALL_SET == ctrl) {
    3fda:	2c01      	cmp	r4, #1
    3fdc:	d119      	bne.n	4012 <_usb_d_dev_ep_stall+0x4e>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3fde:	7c83      	ldrb	r3, [r0, #18]
    3fe0:	f003 030f 	and.w	r3, r3, #15
    3fe4:	0159      	lsls	r1, r3, #5
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    3fe6:	2410      	movs	r4, #16
    3fe8:	4094      	lsls	r4, r2
    3fea:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    3fee:	b2e4      	uxtb	r4, r4
    3ff0:	f881 4105 	strb.w	r4, [r1, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    3ff4:	015b      	lsls	r3, r3, #5
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    3ff6:	2120      	movs	r1, #32
    3ff8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    3ffc:	fa01 f202 	lsl.w	r2, r1, r2
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    4000:	b2d2      	uxtb	r2, r2
    4002:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    4006:	7cc3      	ldrb	r3, [r0, #19]
    4008:	f043 0308 	orr.w	r3, r3, #8
    400c:	74c3      	strb	r3, [r0, #19]
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    400e:	2000      	movs	r0, #0
    4010:	bd38      	pop	{r3, r4, r5, pc}
	} else if (USB_EP_STALL_CLR == ctrl) {
    4012:	bb9c      	cbnz	r4, 407c <_usb_d_dev_ep_stall+0xb8>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    4014:	7c81      	ldrb	r1, [r0, #18]
    4016:	f001 010f 	and.w	r1, r1, #15
    401a:	014b      	lsls	r3, r1, #5
    401c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    4020:	2410      	movs	r4, #16
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    4022:	f893 5106 	ldrb.w	r5, [r3, #262]	; 0x106
    4026:	4094      	lsls	r4, r2
	if (!is_stalled) {
    4028:	4225      	tst	r5, r4
    402a:	d0f0      	beq.n	400e <_usb_d_dev_ep_stall+0x4a>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    402c:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    402e:	f883 4104 	strb.w	r4, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    4032:	0149      	lsls	r1, r1, #5
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    4034:	2420      	movs	r4, #32
    4036:	4094      	lsls	r4, r2
    4038:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    403c:	b2e5      	uxtb	r5, r4
    403e:	f881 5108 	strb.w	r5, [r1, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    4042:	f893 1107 	ldrb.w	r1, [r3, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    4046:	4221      	tst	r1, r4
    4048:	d007      	beq.n	405a <_usb_d_dev_ep_stall+0x96>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    404a:	2101      	movs	r1, #1
    404c:	fa01 f202 	lsl.w	r2, r1, r2
    4050:	b2d2      	uxtb	r2, r2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    4052:	f883 5107 	strb.w	r5, [r3, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    4056:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    405a:	7cc2      	ldrb	r2, [r0, #19]
    405c:	f002 0107 	and.w	r1, r2, #7
    4060:	2901      	cmp	r1, #1
    4062:	d108      	bne.n	4076 <_usb_d_dev_ep_stall+0xb2>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    4064:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    4068:	f013 0330 	ands.w	r3, r3, #48	; 0x30
    406c:	d1cf      	bne.n	400e <_usb_d_dev_ep_stall+0x4a>
			ept->flags.bits.is_stalled = 0;
    406e:	f363 02c3 	bfi	r2, r3, #3, #1
		ept->flags.bits.is_stalled = 0;
    4072:	74c2      	strb	r2, [r0, #19]
    4074:	e7cb      	b.n	400e <_usb_d_dev_ep_stall+0x4a>
    4076:	f36f 02c3 	bfc	r2, #3, #1
    407a:	e7fa      	b.n	4072 <_usb_d_dev_ep_stall+0xae>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    407c:	7c83      	ldrb	r3, [r0, #18]
    407e:	f003 030f 	and.w	r3, r3, #15
    4082:	015b      	lsls	r3, r3, #5
    4084:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4088:	f503 7380 	add.w	r3, r3, #256	; 0x100
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    408c:	2010      	movs	r0, #16
    408e:	799b      	ldrb	r3, [r3, #6]
    4090:	fa00 f202 	lsl.w	r2, r0, r2
    4094:	421a      	tst	r2, r3
    4096:	bf14      	ite	ne
    4098:	2001      	movne	r0, #1
    409a:	2000      	moveq	r0, #0
    409c:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
    409e:	f06f 0011 	mvn.w	r0, #17
}
    40a2:	bd38      	pop	{r3, r4, r5, pc}
    40a4:	00003431 	.word	0x00003431

000040a8 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    40a8:	b530      	push	{r4, r5, lr}
	uint8_t            epn   = USB_EP_GET_N(ep);
    40aa:	f000 000f 	and.w	r0, r0, #15
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    40ae:	4b12      	ldr	r3, [pc, #72]	; (40f8 <_usb_d_dev_ep_read_req+0x50>)
    40b0:	0142      	lsls	r2, r0, #5
    40b2:	189c      	adds	r4, r3, r2
	uint32_t           addr  = bank[0].ADDR.reg;
    40b4:	589d      	ldr	r5, [r3, r2]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    40b6:	6864      	ldr	r4, [r4, #4]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    40b8:	2802      	cmp	r0, #2
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    40ba:	f3c4 040d 	ubfx	r4, r4, #0, #14
	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    40be:	d814      	bhi.n	40ea <_usb_d_dev_ep_read_req+0x42>
    40c0:	b199      	cbz	r1, 40ea <_usb_d_dev_ep_read_req+0x42>
    40c2:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    40c6:	f892 3100 	ldrb.w	r3, [r2, #256]	; 0x100
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    40ca:	2b11      	cmp	r3, #17
    40cc:	d110      	bne.n	40f0 <_usb_d_dev_ep_read_req+0x48>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    40ce:	f892 3107 	ldrb.w	r3, [r2, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    40d2:	f013 0010 	ands.w	r0, r3, #16
    40d6:	d00d      	beq.n	40f4 <_usb_d_dev_ep_read_req+0x4c>
		return ERR_NONE;
	}
	memcpy(req_buf, (void *)addr, 8);
    40d8:	682b      	ldr	r3, [r5, #0]
    40da:	600b      	str	r3, [r1, #0]
    40dc:	686b      	ldr	r3, [r5, #4]
    40de:	604b      	str	r3, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    40e0:	2310      	movs	r3, #16
    40e2:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
	_usbd_ep_ack_setup(epn);

	return bytes;
    40e6:	4620      	mov	r0, r4
    40e8:	bd30      	pop	{r4, r5, pc}
		return -USB_ERR_PARAM;
    40ea:	f06f 0011 	mvn.w	r0, #17
    40ee:	bd30      	pop	{r4, r5, pc}
		return -USB_ERR_FUNC;
    40f0:	f06f 0012 	mvn.w	r0, #18
}
    40f4:	bd30      	pop	{r4, r5, pc}
    40f6:	bf00      	nop
    40f8:	2000711c 	.word	0x2000711c

000040fc <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    40fc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    4100:	7a07      	ldrb	r7, [r0, #8]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    4102:	4b3a      	ldr	r3, [pc, #232]	; (41ec <_usb_d_dev_ep_trans+0xf0>)
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    4104:	f007 050f 	and.w	r5, r7, #15
    4108:	b27f      	sxtb	r7, r7
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    410a:	ea4f 79d7 	mov.w	r9, r7, lsr #31
{
    410e:	4680      	mov	r8, r0
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    4110:	4649      	mov	r1, r9
    4112:	4628      	mov	r0, r5
    4114:	4798      	blx	r3

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    4116:	8a02      	ldrh	r2, [r0, #16]
	bool     size_n_aligned = (trans->size & size_mask);
    4118:	f8d8 1004 	ldr.w	r1, [r8, #4]
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    411c:	f240 33ff 	movw	r3, #1023	; 0x3ff
    4120:	429a      	cmp	r2, r3
    4122:	bf1a      	itte	ne
    4124:	f102 33ff 	addne.w	r3, r2, #4294967295
    4128:	b29b      	uxthne	r3, r3
    412a:	4613      	moveq	r3, r2

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    412c:	2d02      	cmp	r5, #2
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    412e:	4604      	mov	r4, r0
	bool     size_n_aligned = (trans->size & size_mask);
    4130:	ea03 0601 	and.w	r6, r3, r1
	if (epn > CONF_USB_D_MAX_EP_N) {
    4134:	d828      	bhi.n	4188 <_usb_d_dev_ep_trans+0x8c>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    4136:	f8d8 5000 	ldr.w	r5, [r8]
    413a:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
    413e:	d30a      	bcc.n	4156 <_usb_d_dev_ep_trans+0x5a>
    4140:	4b2b      	ldr	r3, [pc, #172]	; (41f0 <_usb_d_dev_ep_trans+0xf4>)
    4142:	1948      	adds	r0, r1, r5
    4144:	4298      	cmp	r0, r3
    4146:	d806      	bhi.n	4156 <_usb_d_dev_ep_trans+0x5a>
    4148:	f015 0503 	ands.w	r5, r5, #3
    414c:	d103      	bne.n	4156 <_usb_d_dev_ep_trans+0x5a>
	    || (!dir && (trans->size < ept->size))) {
    414e:	2f00      	cmp	r7, #0
    4150:	db05      	blt.n	415e <_usb_d_dev_ep_trans+0x62>
    4152:	4291      	cmp	r1, r2
    4154:	d214      	bcs.n	4180 <_usb_d_dev_ep_trans+0x84>
		if (!ept->cache) {
    4156:	68e3      	ldr	r3, [r4, #12]
    4158:	2b00      	cmp	r3, #0
    415a:	d041      	beq.n	41e0 <_usb_d_dev_ep_trans+0xe4>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
    415c:	2501      	movs	r5, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    415e:	7ce3      	ldrb	r3, [r4, #19]
    4160:	071b      	lsls	r3, r3, #28
    4162:	d440      	bmi.n	41e6 <_usb_d_dev_ep_trans+0xea>
		return USB_HALTED;
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    4164:	4b23      	ldr	r3, [pc, #140]	; (41f4 <_usb_d_dev_ep_trans+0xf8>)
    4166:	a801      	add	r0, sp, #4
    4168:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    416a:	7ce3      	ldrb	r3, [r4, #19]
    416c:	4a22      	ldr	r2, [pc, #136]	; (41f8 <_usb_d_dev_ep_trans+0xfc>)
    416e:	f013 0a40 	ands.w	sl, r3, #64	; 0x40
    4172:	d00e      	beq.n	4192 <_usb_d_dev_ep_trans+0x96>
		atomic_leave_critical(&flags);
    4174:	a801      	add	r0, sp, #4
    4176:	4790      	blx	r2
		return USB_BUSY;
    4178:	2001      	movs	r0, #1
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    417a:	b002      	add	sp, #8
    417c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!dir && size_n_aligned) {
    4180:	b12e      	cbz	r6, 418e <_usb_d_dev_ep_trans+0x92>
		if (!ept->cache) {
    4182:	68e3      	ldr	r3, [r4, #12]
    4184:	2b00      	cmp	r3, #0
    4186:	d1ea      	bne.n	415e <_usb_d_dev_ep_trans+0x62>
		return -USB_ERR_PARAM;
    4188:	f06f 0011 	mvn.w	r0, #17
    418c:	e7f5      	b.n	417a <_usb_d_dev_ep_trans+0x7e>
	bool use_cache = false;
    418e:	4635      	mov	r5, r6
    4190:	e7e5      	b.n	415e <_usb_d_dev_ep_trans+0x62>
	ept->flags.bits.is_busy = 1;
    4192:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4196:	74e3      	strb	r3, [r4, #19]
	atomic_leave_critical(&flags);
    4198:	a801      	add	r0, sp, #4
    419a:	4790      	blx	r2
	ept->trans_buf   = trans->buf;
    419c:	f8d8 3000 	ldr.w	r3, [r8]
    41a0:	6023      	str	r3, [r4, #0]
	ept->trans_size  = trans->size;
    41a2:	f8d8 3004 	ldr.w	r3, [r8, #4]
    41a6:	6063      	str	r3, [r4, #4]
	ept->flags.bits.dir       = dir;
    41a8:	7ce3      	ldrb	r3, [r4, #19]
	ept->trans_count = 0;
    41aa:	f8c4 a008 	str.w	sl, [r4, #8]
	ept->flags.bits.dir       = dir;
    41ae:	f369 13c7 	bfi	r3, r9, #7, #1
	ept->flags.bits.use_cache = use_cache;
    41b2:	f365 1345 	bfi	r3, r5, #5, #1
    41b6:	74e3      	strb	r3, [r4, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    41b8:	f898 3009 	ldrb.w	r3, [r8, #9]
    41bc:	b113      	cbz	r3, 41c4 <_usb_d_dev_ep_trans+0xc8>
    41be:	fab6 f386 	clz	r3, r6
    41c2:	095b      	lsrs	r3, r3, #5
    41c4:	7ce2      	ldrb	r2, [r4, #19]
	if (dir) {
    41c6:	2f00      	cmp	r7, #0
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    41c8:	f363 1204 	bfi	r2, r3, #4, #1
		_usb_d_dev_in_next(ept, false);
    41cc:	4620      	mov	r0, r4
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    41ce:	74e2      	strb	r2, [r4, #19]
		_usb_d_dev_in_next(ept, false);
    41d0:	f04f 0100 	mov.w	r1, #0
    41d4:	bfb4      	ite	lt
    41d6:	4b09      	ldrlt	r3, [pc, #36]	; (41fc <_usb_d_dev_ep_trans+0x100>)
		_usb_d_dev_out_next(ept, false);
    41d8:	4b09      	ldrge	r3, [pc, #36]	; (4200 <_usb_d_dev_ep_trans+0x104>)
    41da:	4798      	blx	r3
	return ERR_NONE;
    41dc:	2000      	movs	r0, #0
    41de:	e7cc      	b.n	417a <_usb_d_dev_ep_trans+0x7e>
			return -USB_ERR_FUNC;
    41e0:	f06f 0012 	mvn.w	r0, #18
    41e4:	e7c9      	b.n	417a <_usb_d_dev_ep_trans+0x7e>
		return USB_HALTED;
    41e6:	2002      	movs	r0, #2
    41e8:	e7c7      	b.n	417a <_usb_d_dev_ep_trans+0x7e>
    41ea:	bf00      	nop
    41ec:	00003431 	.word	0x00003431
    41f0:	20031fff 	.word	0x20031fff
    41f4:	000011cd 	.word	0x000011cd
    41f8:	000011db 	.word	0x000011db
    41fc:	000036a5 	.word	0x000036a5
    4200:	000037fd 	.word	0x000037fd

00004204 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    4204:	4b06      	ldr	r3, [pc, #24]	; (4220 <_usb_d_dev_register_callback+0x1c>)
    4206:	2900      	cmp	r1, #0
    4208:	bf08      	it	eq
    420a:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
    420c:	2801      	cmp	r0, #1
    420e:	d102      	bne.n	4216 <_usb_d_dev_register_callback+0x12>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    4210:	4b04      	ldr	r3, [pc, #16]	; (4224 <_usb_d_dev_register_callback+0x20>)
    4212:	6059      	str	r1, [r3, #4]
    4214:	4770      	bx	lr
	} else if (type == USB_D_CB_SOF) {
    4216:	b908      	cbnz	r0, 421c <_usb_d_dev_register_callback+0x18>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    4218:	4b02      	ldr	r3, [pc, #8]	; (4224 <_usb_d_dev_register_callback+0x20>)
    421a:	6019      	str	r1, [r3, #0]
    421c:	4770      	bx	lr
    421e:	bf00      	nop
    4220:	00003409 	.word	0x00003409
    4224:	20007054 	.word	0x20007054

00004228 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    4228:	4b08      	ldr	r3, [pc, #32]	; (424c <_usb_d_dev_register_ep_callback+0x24>)
    422a:	2900      	cmp	r1, #0
    422c:	bf08      	it	eq
    422e:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
    4230:	b910      	cbnz	r0, 4238 <_usb_d_dev_register_ep_callback+0x10>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    4232:	4b07      	ldr	r3, [pc, #28]	; (4250 <_usb_d_dev_register_ep_callback+0x28>)
    4234:	6099      	str	r1, [r3, #8]
    4236:	4770      	bx	lr
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    4238:	2801      	cmp	r0, #1
    423a:	d102      	bne.n	4242 <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    423c:	4b04      	ldr	r3, [pc, #16]	; (4250 <_usb_d_dev_register_ep_callback+0x28>)
    423e:	60d9      	str	r1, [r3, #12]
    4240:	4770      	bx	lr
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    4242:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    4244:	bf04      	itt	eq
    4246:	4b02      	ldreq	r3, [pc, #8]	; (4250 <_usb_d_dev_register_ep_callback+0x28>)
    4248:	6119      	streq	r1, [r3, #16]
    424a:	4770      	bx	lr
    424c:	00003409 	.word	0x00003409
    4250:	20007054 	.word	0x20007054

00004254 <USB_0_Handler>:
    4254:	4b00      	ldr	r3, [pc, #0]	; (4258 <USB_0_Handler+0x4>)
    4256:	4718      	bx	r3
    4258:	000039a9 	.word	0x000039a9

0000425c <USB_1_Handler>:
    425c:	4b00      	ldr	r3, [pc, #0]	; (4260 <USB_1_Handler+0x4>)
    425e:	4718      	bx	r3
    4260:	000039a9 	.word	0x000039a9

00004264 <USB_2_Handler>:
    4264:	4b00      	ldr	r3, [pc, #0]	; (4268 <USB_2_Handler+0x4>)
    4266:	4718      	bx	r3
    4268:	000039a9 	.word	0x000039a9

0000426c <USB_3_Handler>:
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{

	_usb_d_dev_handler();
    426c:	4b00      	ldr	r3, [pc, #0]	; (4270 <USB_3_Handler+0x4>)
    426e:	4718      	bx	r3
    4270:	000039a9 	.word	0x000039a9

00004274 <hri_wdt_get_CTRLA_ALWAYSON_bit>:
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    4274:	6883      	ldr	r3, [r0, #8]
    4276:	f013 0f0e 	tst.w	r3, #14
    427a:	d1fb      	bne.n	4274 <hri_wdt_get_CTRLA_ALWAYSON_bit>

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	tmp = ((Wdt *)hw)->CTRLA.reg;
    427c:	7800      	ldrb	r0, [r0, #0]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
	return (bool)tmp;
}
    427e:	09c0      	lsrs	r0, r0, #7
    4280:	4770      	bx	lr
	...

00004284 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    4284:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    4286:	4604      	mov	r4, r0
    4288:	b308      	cbz	r0, 42ce <_wdt_init+0x4a>
    428a:	6800      	ldr	r0, [r0, #0]
    428c:	3000      	adds	r0, #0
    428e:	bf18      	it	ne
    4290:	2001      	movne	r0, #1
    4292:	4b11      	ldr	r3, [pc, #68]	; (42d8 <_wdt_init+0x54>)
    4294:	4911      	ldr	r1, [pc, #68]	; (42dc <_wdt_init+0x58>)
    4296:	2250      	movs	r2, #80	; 0x50
    4298:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    429a:	6820      	ldr	r0, [r4, #0]
    429c:	4b10      	ldr	r3, [pc, #64]	; (42e0 <_wdt_init+0x5c>)
    429e:	4798      	blx	r3
    42a0:	b9b0      	cbnz	r0, 42d0 <_wdt_init+0x4c>
    42a2:	6823      	ldr	r3, [r4, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    42a4:	689a      	ldr	r2, [r3, #8]
    42a6:	f012 0f0e 	tst.w	r2, #14
    42aa:	d1fb      	bne.n	42a4 <_wdt_init+0x20>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    42ac:	7818      	ldrb	r0, [r3, #0]
    42ae:	f3c0 0040 	ubfx	r0, r0, #1, #1
    42b2:	b968      	cbnz	r0, 42d0 <_wdt_init+0x4c>

static inline void hri_wdt_write_CONFIG_WINDOW_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    42b4:	785a      	ldrb	r2, [r3, #1]
	tmp &= ~WDT_CONFIG_WINDOW_Msk;
    42b6:	f002 020f 	and.w	r2, r2, #15
	tmp |= WDT_CONFIG_WINDOW(data);
    42ba:	f042 02b0 	orr.w	r2, r2, #176	; 0xb0
	((Wdt *)hw)->CONFIG.reg = tmp;
    42be:	705a      	strb	r2, [r3, #1]
	tmp = ((Wdt *)hw)->CONFIG.reg;
    42c0:	785a      	ldrb	r2, [r3, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    42c2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
    42c6:	f042 020b 	orr.w	r2, r2, #11
	((Wdt *)hw)->CONFIG.reg = tmp;
    42ca:	705a      	strb	r2, [r3, #1]
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
	}

	return ERR_NONE;
    42cc:	bd10      	pop	{r4, pc}
    42ce:	e7e0      	b.n	4292 <_wdt_init+0xe>
		return ERR_DENIED;
    42d0:	f06f 0010 	mvn.w	r0, #16
}
    42d4:	bd10      	pop	{r4, pc}
    42d6:	bf00      	nop
    42d8:	00002035 	.word	0x00002035
    42dc:	0000c230 	.word	0x0000c230
    42e0:	00004275 	.word	0x00004275

000042e4 <_wdt_set_timeout_period>:

/**
 * \brief set timeout period for WDT instance
 */
int32_t _wdt_set_timeout_period(struct wdt_dev *const dev, const uint32_t clk_rate, const uint16_t timeout_period)
{
    42e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    42e6:	460e      	mov	r6, r1
    42e8:	4614      	mov	r4, r2
	uint64_t            tmp;
	uint32_t            period_cycles;
	enum wdt_period_reg timeout_period_reg;
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    42ea:	4605      	mov	r5, r0
    42ec:	b370      	cbz	r0, 434c <_wdt_set_timeout_period+0x68>
    42ee:	6800      	ldr	r0, [r0, #0]
    42f0:	3000      	adds	r0, #0
    42f2:	bf18      	it	ne
    42f4:	2001      	movne	r0, #1
    42f6:	4b32      	ldr	r3, [pc, #200]	; (43c0 <_wdt_set_timeout_period+0xdc>)
    42f8:	4932      	ldr	r1, [pc, #200]	; (43c4 <_wdt_set_timeout_period+0xe0>)
    42fa:	227a      	movs	r2, #122	; 0x7a
    42fc:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    42fe:	6828      	ldr	r0, [r5, #0]
    4300:	4b31      	ldr	r3, [pc, #196]	; (43c8 <_wdt_set_timeout_period+0xe4>)
    4302:	4798      	blx	r3
    4304:	2800      	cmp	r0, #0
    4306:	d157      	bne.n	43b8 <_wdt_set_timeout_period+0xd4>
    4308:	682a      	ldr	r2, [r5, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    430a:	6893      	ldr	r3, [r2, #8]
    430c:	f013 0f0e 	tst.w	r3, #14
    4310:	d1fb      	bne.n	430a <_wdt_set_timeout_period+0x26>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    4312:	7813      	ldrb	r3, [r2, #0]
    4314:	f3c3 0340 	ubfx	r3, r3, #1, #1
    4318:	2b00      	cmp	r3, #0
    431a:	d14d      	bne.n	43b8 <_wdt_set_timeout_period+0xd4>
		return ERR_DENIED;
	} else {
		/* calc the period cycles corresponding to timeout period */
		tmp = (uint64_t)timeout_period * clk_rate;
    431c:	fba4 6706 	umull	r6, r7, r4, r6

		/* check whether overflow*/
		if (tmp >> 32) {
    4320:	463c      	mov	r4, r7
    4322:	461d      	mov	r5, r3
    4324:	ea54 0105 	orrs.w	r1, r4, r5
    4328:	d10d      	bne.n	4346 <_wdt_set_timeout_period+0x62>
			return ERR_INVALID_ARG;
		}

		period_cycles = (uint32_t)tmp;
		/* calc the register value corresponding to period cysles */
		switch (period_cycles) {
    432a:	f5b6 3f7a 	cmp.w	r6, #256000	; 0x3e800
    432e:	d039      	beq.n	43a4 <_wdt_set_timeout_period+0xc0>
    4330:	d815      	bhi.n	435e <_wdt_set_timeout_period+0x7a>
    4332:	f5b6 4ffa 	cmp.w	r6, #32000	; 0x7d00
    4336:	d031      	beq.n	439c <_wdt_set_timeout_period+0xb8>
    4338:	d809      	bhi.n	434e <_wdt_set_timeout_period+0x6a>
    433a:	f5b6 5ffa 	cmp.w	r6, #8000	; 0x1f40
    433e:	d026      	beq.n	438e <_wdt_set_timeout_period+0xaa>
    4340:	f5b6 5f7a 	cmp.w	r6, #16000	; 0x3e80
    4344:	d022      	beq.n	438c <_wdt_set_timeout_period+0xa8>
			break;
		case WDT_CLK_16384CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_16384CYCLE;
			break;
		default:
			return ERR_INVALID_ARG;
    4346:	f06f 000c 	mvn.w	r0, #12
	}

	hri_wdt_write_CONFIG_PER_bf(dev->hw, (uint8_t)timeout_period_reg);

	return ERR_NONE;
}
    434a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    434c:	e7d3      	b.n	42f6 <_wdt_set_timeout_period+0x12>
		switch (period_cycles) {
    434e:	f5b6 4f7a 	cmp.w	r6, #64000	; 0xfa00
    4352:	d025      	beq.n	43a0 <_wdt_set_timeout_period+0xbc>
    4354:	f5b6 3ffa 	cmp.w	r6, #128000	; 0x1f400
    4358:	d1f5      	bne.n	4346 <_wdt_set_timeout_period+0x62>
			timeout_period_reg = WDT_PERIOD_128CYCLE;
    435a:	2304      	movs	r3, #4
			break;
    435c:	e017      	b.n	438e <_wdt_set_timeout_period+0xaa>
		switch (period_cycles) {
    435e:	f5b6 1ffa 	cmp.w	r6, #2048000	; 0x1f4000
    4362:	d023      	beq.n	43ac <_wdt_set_timeout_period+0xc8>
    4364:	d807      	bhi.n	4376 <_wdt_set_timeout_period+0x92>
    4366:	f5b6 2ffa 	cmp.w	r6, #512000	; 0x7d000
    436a:	d01d      	beq.n	43a8 <_wdt_set_timeout_period+0xc4>
    436c:	f5b6 2f7a 	cmp.w	r6, #1024000	; 0xfa000
    4370:	d1e9      	bne.n	4346 <_wdt_set_timeout_period+0x62>
			timeout_period_reg = WDT_PERIOD_1024CYCLE;
    4372:	2307      	movs	r3, #7
			break;
    4374:	e00b      	b.n	438e <_wdt_set_timeout_period+0xaa>
		switch (period_cycles) {
    4376:	f5b6 0ffa 	cmp.w	r6, #8192000	; 0x7d0000
    437a:	d019      	beq.n	43b0 <_wdt_set_timeout_period+0xcc>
    437c:	f5b6 0f7a 	cmp.w	r6, #16384000	; 0xfa0000
    4380:	d018      	beq.n	43b4 <_wdt_set_timeout_period+0xd0>
    4382:	f5b6 1f7a 	cmp.w	r6, #4096000	; 0x3e8000
    4386:	d1de      	bne.n	4346 <_wdt_set_timeout_period+0x62>
			timeout_period_reg = WDT_PERIOD_4096CYCLE;
    4388:	2309      	movs	r3, #9
			break;
    438a:	e000      	b.n	438e <_wdt_set_timeout_period+0xaa>
			timeout_period_reg = WDT_PERIOD_16CYCLE;
    438c:	2301      	movs	r3, #1
	tmp = ((Wdt *)hw)->CONFIG.reg;
    438e:	7851      	ldrb	r1, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    4390:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
    4394:	430b      	orrs	r3, r1
	((Wdt *)hw)->CONFIG.reg = tmp;
    4396:	7053      	strb	r3, [r2, #1]
	return ERR_NONE;
    4398:	2000      	movs	r0, #0
    439a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			timeout_period_reg = WDT_PERIOD_32CYCLE;
    439c:	2302      	movs	r3, #2
			break;
    439e:	e7f6      	b.n	438e <_wdt_set_timeout_period+0xaa>
			timeout_period_reg = WDT_PERIOD_64CYCLE;
    43a0:	2303      	movs	r3, #3
			break;
    43a2:	e7f4      	b.n	438e <_wdt_set_timeout_period+0xaa>
			timeout_period_reg = WDT_PERIOD_256CYCLE;
    43a4:	2305      	movs	r3, #5
			break;
    43a6:	e7f2      	b.n	438e <_wdt_set_timeout_period+0xaa>
			timeout_period_reg = WDT_PERIOD_512CYCLE;
    43a8:	2306      	movs	r3, #6
			break;
    43aa:	e7f0      	b.n	438e <_wdt_set_timeout_period+0xaa>
			timeout_period_reg = WDT_PERIOD_2048CYCLE;
    43ac:	2308      	movs	r3, #8
			break;
    43ae:	e7ee      	b.n	438e <_wdt_set_timeout_period+0xaa>
			timeout_period_reg = WDT_PERIOD_8192CYCLE;
    43b0:	230a      	movs	r3, #10
			break;
    43b2:	e7ec      	b.n	438e <_wdt_set_timeout_period+0xaa>
			timeout_period_reg = WDT_PERIOD_16384CYCLE;
    43b4:	230b      	movs	r3, #11
			break;
    43b6:	e7ea      	b.n	438e <_wdt_set_timeout_period+0xaa>
		return ERR_DENIED;
    43b8:	f06f 0010 	mvn.w	r0, #16
    43bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    43be:	bf00      	nop
    43c0:	00002035 	.word	0x00002035
    43c4:	0000c230 	.word	0x0000c230
    43c8:	00004275 	.word	0x00004275

000043cc <_wdt_enable>:

/**
 * \brief enbale watchdog timer
 */
int32_t _wdt_enable(struct wdt_dev *const dev)
{
    43cc:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    43ce:	4604      	mov	r4, r0
    43d0:	b188      	cbz	r0, 43f6 <_wdt_enable+0x2a>
    43d2:	6800      	ldr	r0, [r0, #0]
    43d4:	3000      	adds	r0, #0
    43d6:	bf18      	it	ne
    43d8:	2001      	movne	r0, #1
    43da:	4b07      	ldr	r3, [pc, #28]	; (43f8 <_wdt_enable+0x2c>)
    43dc:	4907      	ldr	r1, [pc, #28]	; (43fc <_wdt_enable+0x30>)
    43de:	22fb      	movs	r2, #251	; 0xfb
    43e0:	4798      	blx	r3

	hri_wdt_set_CTRLA_ENABLE_bit(dev->hw);
    43e2:	6823      	ldr	r3, [r4, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    43e4:	6898      	ldr	r0, [r3, #8]
    43e6:	f010 000e 	ands.w	r0, r0, #14
    43ea:	d1fb      	bne.n	43e4 <_wdt_enable+0x18>
	((Wdt *)hw)->CTRLA.reg |= WDT_CTRLA_ENABLE;
    43ec:	781a      	ldrb	r2, [r3, #0]
    43ee:	f042 0202 	orr.w	r2, r2, #2
    43f2:	701a      	strb	r2, [r3, #0]

	return ERR_NONE;
}
    43f4:	bd10      	pop	{r4, pc}
    43f6:	e7f0      	b.n	43da <_wdt_enable+0xe>
    43f8:	00002035 	.word	0x00002035
    43fc:	0000c230 	.word	0x0000c230

00004400 <_wdt_feed>:

/**
 * \brief reset watchdog timer to make wdt work from start
 */
int32_t _wdt_feed(struct wdt_dev *const dev)
{
    4400:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    4402:	4604      	mov	r4, r0
    4404:	b168      	cbz	r0, 4422 <_wdt_feed+0x22>
    4406:	6800      	ldr	r0, [r0, #0]
    4408:	3000      	adds	r0, #0
    440a:	bf18      	it	ne
    440c:	2001      	movne	r0, #1
    440e:	f240 1219 	movw	r2, #281	; 0x119
    4412:	4904      	ldr	r1, [pc, #16]	; (4424 <_wdt_feed+0x24>)
    4414:	4b04      	ldr	r3, [pc, #16]	; (4428 <_wdt_feed+0x28>)
    4416:	4798      	blx	r3

	hri_wdt_write_CLEAR_reg(dev->hw, WDT_CLEAR_CLEAR_KEY);
    4418:	6823      	ldr	r3, [r4, #0]
	((Wdt *)hw)->CLEAR.reg = data;
    441a:	22a5      	movs	r2, #165	; 0xa5
    441c:	731a      	strb	r2, [r3, #12]

	return ERR_NONE;
}
    441e:	2000      	movs	r0, #0
    4420:	bd10      	pop	{r4, pc}
    4422:	e7f4      	b.n	440e <_wdt_feed+0xe>
    4424:	0000c230 	.word	0x0000c230
    4428:	00002035 	.word	0x00002035

0000442c <gpio_set_pin_level>:
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    442c:	f000 031f 	and.w	r3, r0, #31
    4430:	0942      	lsrs	r2, r0, #5
    4432:	2001      	movs	r0, #1
    4434:	4098      	lsls	r0, r3
    4436:	4b04      	ldr	r3, [pc, #16]	; (4448 <gpio_set_pin_level+0x1c>)
    4438:	01d2      	lsls	r2, r2, #7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    443a:	4413      	add	r3, r2
	if (level) {
    443c:	b109      	cbz	r1, 4442 <gpio_set_pin_level+0x16>
    443e:	6198      	str	r0, [r3, #24]
    4440:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4442:	6158      	str	r0, [r3, #20]
    4444:	4770      	bx	lr
    4446:	bf00      	nop
    4448:	41008000 	.word	0x41008000

0000444c <gpio_get_pin_level>:
{
    444c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	CRITICAL_SECTION_ENTER();
    444e:	4b0e      	ldr	r3, [pc, #56]	; (4488 <gpio_get_pin_level+0x3c>)
    4450:	4605      	mov	r5, r0
    4452:	a801      	add	r0, sp, #4
    4454:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    4456:	096b      	lsrs	r3, r5, #5
    4458:	490c      	ldr	r1, [pc, #48]	; (448c <gpio_get_pin_level+0x40>)
    445a:	01db      	lsls	r3, r3, #7
    445c:	18ca      	adds	r2, r1, r3
    445e:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    4460:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    4462:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    4464:	405c      	eors	r4, r3
    4466:	400c      	ands	r4, r1
	CRITICAL_SECTION_LEAVE();
    4468:	a801      	add	r0, sp, #4
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    446a:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    446c:	4b08      	ldr	r3, [pc, #32]	; (4490 <gpio_get_pin_level+0x44>)
    446e:	4798      	blx	r3
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    4470:	f005 051f 	and.w	r5, r5, #31
    4474:	2301      	movs	r3, #1
    4476:	fa03 f505 	lsl.w	r5, r3, r5
    447a:	4225      	tst	r5, r4
}
    447c:	bf14      	ite	ne
    447e:	4618      	movne	r0, r3
    4480:	2000      	moveq	r0, #0
    4482:	b003      	add	sp, #12
    4484:	bd30      	pop	{r4, r5, pc}
    4486:	bf00      	nop
    4488:	000011cd 	.word	0x000011cd
    448c:	41008000 	.word	0x41008000
    4490:	000011db 	.word	0x000011db

00004494 <gpio_set_pin_direction>:
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    4494:	2201      	movs	r2, #1
    4496:	0943      	lsrs	r3, r0, #5
	switch (direction) {
    4498:	4291      	cmp	r1, r2
    449a:	f000 001f 	and.w	r0, r0, #31
    449e:	fa02 f000 	lsl.w	r0, r2, r0
    44a2:	d015      	beq.n	44d0 <gpio_set_pin_direction+0x3c>
    44a4:	d306      	bcc.n	44b4 <gpio_set_pin_direction+0x20>
    44a6:	2902      	cmp	r1, #2
    44a8:	d023      	beq.n	44f2 <gpio_set_pin_direction+0x5e>
		ASSERT(false);
    44aa:	2245      	movs	r2, #69	; 0x45
    44ac:	4914      	ldr	r1, [pc, #80]	; (4500 <gpio_set_pin_direction+0x6c>)
    44ae:	4b15      	ldr	r3, [pc, #84]	; (4504 <gpio_set_pin_direction+0x70>)
    44b0:	2000      	movs	r0, #0
    44b2:	4718      	bx	r3
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    44b4:	01db      	lsls	r3, r3, #7
    44b6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    44ba:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    44be:	6058      	str	r0, [r3, #4]
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    44c0:	b282      	uxth	r2, r0
    44c2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    44c6:	0c00      	lsrs	r0, r0, #16
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    44c8:	629a      	str	r2, [r3, #40]	; 0x28
		hri_port_write_WRCONFIG_reg(
    44ca:	f040 4040 	orr.w	r0, r0, #3221225472	; 0xc0000000
    44ce:	e00e      	b.n	44ee <gpio_set_pin_direction+0x5a>
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    44d0:	01db      	lsls	r3, r3, #7
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    44d2:	b282      	uxth	r2, r0
    44d4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    44d8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    44dc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    44e0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    44e4:	6058      	str	r0, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    44e6:	629a      	str	r2, [r3, #40]	; 0x28
		hri_port_write_WRCONFIG_reg(PORT,
    44e8:	4a07      	ldr	r2, [pc, #28]	; (4508 <gpio_set_pin_direction+0x74>)
    44ea:	ea42 4010 	orr.w	r0, r2, r0, lsr #16
    44ee:	6298      	str	r0, [r3, #40]	; 0x28
    44f0:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    44f2:	01db      	lsls	r3, r3, #7
    44f4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    44f8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    44fc:	6098      	str	r0, [r3, #8]
    44fe:	e7df      	b.n	44c0 <gpio_set_pin_direction+0x2c>
    4500:	0000c245 	.word	0x0000c245
    4504:	00002035 	.word	0x00002035
    4508:	c0020000 	.word	0xc0020000

0000450c <I2C_configMONITOREDINPUTS>:
// * CALLED BY:			  main()                                                                                                       *
// * CALLS:		          No function. ALL macros defined in this function file.                                                       *
// * --------------------------------------------------------------------------------------------------------------------------------- *
int I2C_configMONITOREDINPUTS(uint8_t sda,  uint8_t clk, unsigned char channel)

{
    450c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4510:	460f      	mov	r7, r1
    4512:	4606      	mov	r6, r0
	/* Clip channel for correct assignment */
    channel &= 0x03;

	/* Open an I2C channel, send address 0x68, then send the configuration values for setting up a conversion result */
	I2C_OPEN(sda, clk);
	I2C_START(-1);
    4514:	4d67      	ldr	r5, [pc, #412]	; (46b4 <I2C_configMONITOREDINPUTS+0x1a8>)
    4516:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 46bc <I2C_configMONITOREDINPUTS+0x1b0>
    451a:	4c67      	ldr	r4, [pc, #412]	; (46b8 <I2C_configMONITOREDINPUTS+0x1ac>)
    451c:	2101      	movs	r1, #1
    451e:	4638      	mov	r0, r7
    channel &= 0x03;
    4520:	f002 0a03 	and.w	sl, r2, #3
	I2C_START(-1);
    4524:	47a8      	blx	r5
    4526:	2101      	movs	r1, #1
    4528:	4630      	mov	r0, r6
    452a:	47a8      	blx	r5
    452c:	2102      	movs	r1, #2
    452e:	4630      	mov	r0, r6
    4530:	47c0      	blx	r8
    4532:	200f      	movs	r0, #15
    4534:	47a0      	blx	r4
    4536:	200f      	movs	r0, #15
    4538:	47a0      	blx	r4
    453a:	2100      	movs	r1, #0
    453c:	4630      	mov	r0, r6
    453e:	47a8      	blx	r5
    4540:	200f      	movs	r0, #15
    4542:	47a0      	blx	r4
    4544:	2100      	movs	r1, #0
    4546:	4638      	mov	r0, r7
    4548:	47a8      	blx	r5
    454a:	200f      	movs	r0, #15
    454c:	47a0      	blx	r4
    454e:	f04f 0907 	mov.w	r9, #7
	I2C_SENDADDR(0x68, forloop);
    4552:	f04f 0b40 	mov.w	fp, #64	; 0x40
    4556:	f01b 0168 	ands.w	r1, fp, #104	; 0x68
    455a:	bf18      	it	ne
    455c:	2101      	movne	r1, #1
    455e:	4630      	mov	r0, r6
    4560:	47a8      	blx	r5
    4562:	200f      	movs	r0, #15
    4564:	47a0      	blx	r4
    4566:	2101      	movs	r1, #1
    4568:	4638      	mov	r0, r7
    456a:	47a8      	blx	r5
    456c:	200f      	movs	r0, #15
    456e:	47a0      	blx	r4
    4570:	2100      	movs	r1, #0
    4572:	4638      	mov	r0, r7
    4574:	47a8      	blx	r5
    4576:	200f      	movs	r0, #15
    4578:	47a0      	blx	r4
    457a:	f1b9 0901 	subs.w	r9, r9, #1
    457e:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
    4582:	d1e8      	bne.n	4556 <I2C_configMONITOREDINPUTS+0x4a>
	I2C_WRITE();
    4584:	4649      	mov	r1, r9
    4586:	4630      	mov	r0, r6
    4588:	47a8      	blx	r5
    458a:	200f      	movs	r0, #15
    458c:	47a0      	blx	r4
    458e:	2101      	movs	r1, #1
    4590:	4638      	mov	r0, r7
    4592:	47a8      	blx	r5
    4594:	200f      	movs	r0, #15
    4596:	47a0      	blx	r4
    4598:	4649      	mov	r1, r9
    459a:	4638      	mov	r0, r7
    459c:	47a8      	blx	r5
    459e:	200f      	movs	r0, #15
    45a0:	47a0      	blx	r4
	I2C_WAITACKOP(-2);
    45a2:	2101      	movs	r1, #1
    45a4:	4630      	mov	r0, r6
    45a6:	47c0      	blx	r8
    45a8:	200f      	movs	r0, #15
    45aa:	47a0      	blx	r4
    45ac:	2101      	movs	r1, #1
    45ae:	4638      	mov	r0, r7
    45b0:	47a8      	blx	r5
    45b2:	200f      	movs	r0, #15
    45b4:	47a0      	blx	r4
    45b6:	f8df b108 	ldr.w	fp, [pc, #264]	; 46c0 <I2C_configMONITOREDINPUTS+0x1b4>
    45ba:	4630      	mov	r0, r6
    45bc:	47d8      	blx	fp
    45be:	f8cd b004 	str.w	fp, [sp, #4]
    45c2:	b198      	cbz	r0, 45ec <I2C_configMONITOREDINPUTS+0xe0>
    45c4:	2101      	movs	r1, #1
    45c6:	4638      	mov	r0, r7
    45c8:	47a8      	blx	r5
    45ca:	200f      	movs	r0, #15
    45cc:	47a0      	blx	r4
    45ce:	2101      	movs	r1, #1
    45d0:	4630      	mov	r0, r6
    45d2:	47a8      	blx	r5
    45d4:	200f      	movs	r0, #15
    45d6:	47a0      	blx	r4
    45d8:	2102      	movs	r1, #2
    45da:	4630      	mov	r0, r6
    45dc:	47c0      	blx	r8
    45de:	200f      	movs	r0, #15
    45e0:	47a0      	blx	r4
    45e2:	f06f 0001 	mvn.w	r0, #1
	/* If successful, and code execution got here, the close the I2C channel */
	I2C_STOP();
	I2C_CLOSE();
	
	return 0;
}
    45e6:	b003      	add	sp, #12
    45e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	I2C_WAITACKOP(-2);
    45ec:	4649      	mov	r1, r9
    45ee:	4638      	mov	r0, r7
    45f0:	47a8      	blx	r5
    45f2:	200f      	movs	r0, #15
    45f4:	47a0      	blx	r4
    45f6:	2102      	movs	r1, #2
    45f8:	4630      	mov	r0, r6
    45fa:	47c0      	blx	r8
    45fc:	200f      	movs	r0, #15
    45fe:	47a0      	blx	r4
	I2C_SENDDATA(((channel << 5) + 0x80), forloop);
    4600:	ea4f 1a4a 	mov.w	sl, sl, lsl #5
    4604:	f10a 0a80 	add.w	sl, sl, #128	; 0x80
    4608:	f04f 0908 	mov.w	r9, #8
    460c:	f04f 0b80 	mov.w	fp, #128	; 0x80
    4610:	ea1b 010a 	ands.w	r1, fp, sl
    4614:	bf18      	it	ne
    4616:	2101      	movne	r1, #1
    4618:	4630      	mov	r0, r6
    461a:	47a8      	blx	r5
    461c:	200f      	movs	r0, #15
    461e:	47a0      	blx	r4
    4620:	2101      	movs	r1, #1
    4622:	4638      	mov	r0, r7
    4624:	47a8      	blx	r5
    4626:	200f      	movs	r0, #15
    4628:	47a0      	blx	r4
    462a:	2100      	movs	r1, #0
    462c:	4638      	mov	r0, r7
    462e:	47a8      	blx	r5
    4630:	200f      	movs	r0, #15
    4632:	47a0      	blx	r4
    4634:	f1b9 0901 	subs.w	r9, r9, #1
    4638:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
    463c:	d1e8      	bne.n	4610 <I2C_configMONITOREDINPUTS+0x104>
	I2C_WAITACKOP(-3);
    463e:	2101      	movs	r1, #1
    4640:	4630      	mov	r0, r6
    4642:	47c0      	blx	r8
    4644:	200f      	movs	r0, #15
    4646:	47a0      	blx	r4
    4648:	2101      	movs	r1, #1
    464a:	4638      	mov	r0, r7
    464c:	47a8      	blx	r5
    464e:	200f      	movs	r0, #15
    4650:	47a0      	blx	r4
    4652:	4630      	mov	r0, r6
    4654:	9b01      	ldr	r3, [sp, #4]
    4656:	4798      	blx	r3
    4658:	b188      	cbz	r0, 467e <I2C_configMONITOREDINPUTS+0x172>
    465a:	2101      	movs	r1, #1
    465c:	4638      	mov	r0, r7
    465e:	47a8      	blx	r5
    4660:	200f      	movs	r0, #15
    4662:	47a0      	blx	r4
    4664:	2101      	movs	r1, #1
    4666:	4630      	mov	r0, r6
    4668:	47a8      	blx	r5
    466a:	200f      	movs	r0, #15
    466c:	47a0      	blx	r4
    466e:	2102      	movs	r1, #2
    4670:	4630      	mov	r0, r6
    4672:	47c0      	blx	r8
    4674:	200f      	movs	r0, #15
    4676:	47a0      	blx	r4
    4678:	f06f 0002 	mvn.w	r0, #2
    467c:	e7b3      	b.n	45e6 <I2C_configMONITOREDINPUTS+0xda>
    467e:	4649      	mov	r1, r9
    4680:	4638      	mov	r0, r7
    4682:	47a8      	blx	r5
    4684:	200f      	movs	r0, #15
    4686:	47a0      	blx	r4
    4688:	2102      	movs	r1, #2
    468a:	4630      	mov	r0, r6
    468c:	47c0      	blx	r8
    468e:	200f      	movs	r0, #15
    4690:	47a0      	blx	r4
	I2C_STOP();
    4692:	2101      	movs	r1, #1
    4694:	4638      	mov	r0, r7
    4696:	47a8      	blx	r5
    4698:	200f      	movs	r0, #15
    469a:	47a0      	blx	r4
    469c:	2101      	movs	r1, #1
    469e:	4630      	mov	r0, r6
    46a0:	47a8      	blx	r5
    46a2:	200f      	movs	r0, #15
    46a4:	47a0      	blx	r4
    46a6:	2102      	movs	r1, #2
    46a8:	4630      	mov	r0, r6
    46aa:	47c0      	blx	r8
    46ac:	200f      	movs	r0, #15
    46ae:	47a0      	blx	r4
	return 0;
    46b0:	4648      	mov	r0, r9
    46b2:	e798      	b.n	45e6 <I2C_configMONITOREDINPUTS+0xda>
    46b4:	0000442d 	.word	0x0000442d
    46b8:	00001229 	.word	0x00001229
    46bc:	00004495 	.word	0x00004495
    46c0:	0000444d 	.word	0x0000444d

000046c4 <I2C_readMONITOREDINPUT>:
// * CALLED BY:			  main()                                                                                                       *
// * CALLS:		          No function. ALL macros defined in this function file.                                                       *
// * --------------------------------------------------------------------------------------------------------------------------------- *
int I2C_readMONITOREDINPUT(uint8_t sda,  uint8_t clk, unsigned char *inputH, unsigned char *inputL)

{
    46c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    46c8:	4606      	mov	r6, r0
    46ca:	460f      	mov	r7, r1
    46cc:	4693      	mov	fp, r2
	uint8_t     		i2csda, i2cclk;
	unsigned char		forloop;

	if ((!inputL) || (!inputH)) {
    46ce:	469a      	mov	sl, r3
    46d0:	2b00      	cmp	r3, #0
    46d2:	f000 80f6 	beq.w	48c2 <I2C_readMONITOREDINPUT+0x1fe>
    46d6:	2a00      	cmp	r2, #0
    46d8:	f000 80f3 	beq.w	48c2 <I2C_readMONITOREDINPUT+0x1fe>
		return -1;
	}

	/* Open an I2C channel, send address 0x68, then read the input value */
	I2C_OPEN(sda, clk);
	I2C_START(-2);
    46dc:	4d7a      	ldr	r5, [pc, #488]	; (48c8 <I2C_readMONITOREDINPUT+0x204>)
    46de:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 48d4 <I2C_readMONITOREDINPUT+0x210>
    46e2:	4c7a      	ldr	r4, [pc, #488]	; (48cc <I2C_readMONITOREDINPUT+0x208>)
    46e4:	2101      	movs	r1, #1
    46e6:	4638      	mov	r0, r7
    46e8:	47a8      	blx	r5
    46ea:	2101      	movs	r1, #1
    46ec:	4630      	mov	r0, r6
    46ee:	47a8      	blx	r5
    46f0:	2102      	movs	r1, #2
    46f2:	4630      	mov	r0, r6
    46f4:	47c0      	blx	r8
    46f6:	200f      	movs	r0, #15
    46f8:	47a0      	blx	r4
    46fa:	200f      	movs	r0, #15
    46fc:	47a0      	blx	r4
    46fe:	2100      	movs	r1, #0
    4700:	4630      	mov	r0, r6
    4702:	47a8      	blx	r5
    4704:	200f      	movs	r0, #15
    4706:	47a0      	blx	r4
    4708:	2100      	movs	r1, #0
    470a:	4638      	mov	r0, r7
    470c:	47a8      	blx	r5
    470e:	200f      	movs	r0, #15
    4710:	47a0      	blx	r4
	I2C_SENDADDR(0x68, forloop);
    4712:	2340      	movs	r3, #64	; 0x40
	I2C_START(-2);
    4714:	f04f 0907 	mov.w	r9, #7
	I2C_SENDADDR(0x68, forloop);
    4718:	9300      	str	r3, [sp, #0]
    471a:	9b00      	ldr	r3, [sp, #0]
    471c:	f013 0168 	ands.w	r1, r3, #104	; 0x68
    4720:	bf18      	it	ne
    4722:	2101      	movne	r1, #1
    4724:	4630      	mov	r0, r6
    4726:	47a8      	blx	r5
    4728:	200f      	movs	r0, #15
    472a:	47a0      	blx	r4
    472c:	2101      	movs	r1, #1
    472e:	4638      	mov	r0, r7
    4730:	47a8      	blx	r5
    4732:	200f      	movs	r0, #15
    4734:	47a0      	blx	r4
    4736:	2100      	movs	r1, #0
    4738:	4638      	mov	r0, r7
    473a:	47a8      	blx	r5
    473c:	200f      	movs	r0, #15
    473e:	47a0      	blx	r4
    4740:	9b00      	ldr	r3, [sp, #0]
    4742:	f1b9 0901 	subs.w	r9, r9, #1
    4746:	ea4f 0353 	mov.w	r3, r3, lsr #1
    474a:	9300      	str	r3, [sp, #0]
    474c:	d1e5      	bne.n	471a <I2C_readMONITOREDINPUT+0x56>
	I2C_READ();
    474e:	2101      	movs	r1, #1
    4750:	4630      	mov	r0, r6
    4752:	47a8      	blx	r5
    4754:	200f      	movs	r0, #15
    4756:	47a0      	blx	r4
    4758:	2101      	movs	r1, #1
    475a:	4638      	mov	r0, r7
    475c:	47a8      	blx	r5
    475e:	200f      	movs	r0, #15
    4760:	47a0      	blx	r4
    4762:	4649      	mov	r1, r9
    4764:	4638      	mov	r0, r7
    4766:	47a8      	blx	r5
    4768:	200f      	movs	r0, #15
    476a:	47a0      	blx	r4
	I2C_WAITACKIP(-3);
    476c:	2101      	movs	r1, #1
    476e:	4630      	mov	r0, r6
    4770:	47c0      	blx	r8
    4772:	200f      	movs	r0, #15
    4774:	47a0      	blx	r4
    4776:	2101      	movs	r1, #1
    4778:	4638      	mov	r0, r7
    477a:	47a8      	blx	r5
    477c:	200f      	movs	r0, #15
    477e:	47a0      	blx	r4
    4780:	4b53      	ldr	r3, [pc, #332]	; (48d0 <I2C_readMONITOREDINPUT+0x20c>)
    4782:	9300      	str	r3, [sp, #0]
    4784:	4630      	mov	r0, r6
    4786:	4798      	blx	r3
    4788:	b198      	cbz	r0, 47b2 <I2C_readMONITOREDINPUT+0xee>
    478a:	2101      	movs	r1, #1
    478c:	4638      	mov	r0, r7
    478e:	47a8      	blx	r5
    4790:	200f      	movs	r0, #15
    4792:	47a0      	blx	r4
    4794:	2101      	movs	r1, #1
    4796:	4630      	mov	r0, r6
    4798:	47a8      	blx	r5
    479a:	200f      	movs	r0, #15
    479c:	47a0      	blx	r4
    479e:	2102      	movs	r1, #2
    47a0:	4630      	mov	r0, r6
    47a2:	47c0      	blx	r8
    47a4:	200f      	movs	r0, #15
    47a6:	47a0      	blx	r4
    47a8:	f06f 0002 	mvn.w	r0, #2
	I2C_STOP();
	I2C_CLOSE();
	/* If successful, and code execution got here, the close the I2C channel */
	
	return 0;
}
    47ac:	b003      	add	sp, #12
    47ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	I2C_WAITACKIP(-3);
    47b2:	4649      	mov	r1, r9
    47b4:	4638      	mov	r0, r7
    47b6:	47a8      	blx	r5
    47b8:	200f      	movs	r0, #15
    47ba:	47a0      	blx	r4
	*inputH = 0;
    47bc:	f88b 9000 	strb.w	r9, [fp]
	for (forloop = 0x80; forloop > 0;) {
    47c0:	2380      	movs	r3, #128	; 0x80
	*inputH = 0;
    47c2:	f04f 0908 	mov.w	r9, #8
		I2C_clockhi();
    47c6:	2101      	movs	r1, #1
    47c8:	4638      	mov	r0, r7
    47ca:	9301      	str	r3, [sp, #4]
    47cc:	47a8      	blx	r5
    47ce:	200f      	movs	r0, #15
    47d0:	47a0      	blx	r4
		if (gpio_get_pin_level(i2csda)) {
    47d2:	9b00      	ldr	r3, [sp, #0]
    47d4:	4630      	mov	r0, r6
    47d6:	4798      	blx	r3
    47d8:	9b01      	ldr	r3, [sp, #4]
    47da:	b120      	cbz	r0, 47e6 <I2C_readMONITOREDINPUT+0x122>
			(*inputH) |= forloop;
    47dc:	f89b 2000 	ldrb.w	r2, [fp]
    47e0:	431a      	orrs	r2, r3
    47e2:	f88b 2000 	strb.w	r2, [fp]
		I2C_clocklo();
    47e6:	2100      	movs	r1, #0
    47e8:	4638      	mov	r0, r7
    47ea:	9301      	str	r3, [sp, #4]
    47ec:	47a8      	blx	r5
    47ee:	200f      	movs	r0, #15
    47f0:	47a0      	blx	r4
		forloop = forloop / 2;
    47f2:	9b01      	ldr	r3, [sp, #4]
	for (forloop = 0x80; forloop > 0;) {
    47f4:	f1b9 0901 	subs.w	r9, r9, #1
		forloop = forloop / 2;
    47f8:	ea4f 0353 	mov.w	r3, r3, lsr #1
	for (forloop = 0x80; forloop > 0;) {
    47fc:	d1e3      	bne.n	47c6 <I2C_readMONITOREDINPUT+0x102>
	I2C_SENDACK();
    47fe:	2102      	movs	r1, #2
    4800:	4630      	mov	r0, r6
    4802:	47c0      	blx	r8
    4804:	200f      	movs	r0, #15
    4806:	47a0      	blx	r4
    4808:	4649      	mov	r1, r9
    480a:	4630      	mov	r0, r6
    480c:	47a8      	blx	r5
    480e:	200f      	movs	r0, #15
    4810:	47a0      	blx	r4
    4812:	2101      	movs	r1, #1
    4814:	4638      	mov	r0, r7
    4816:	47a8      	blx	r5
    4818:	200f      	movs	r0, #15
    481a:	47a0      	blx	r4
    481c:	4649      	mov	r1, r9
    481e:	4638      	mov	r0, r7
    4820:	47a8      	blx	r5
    4822:	200f      	movs	r0, #15
    4824:	47a0      	blx	r4
    4826:	2101      	movs	r1, #1
    4828:	4630      	mov	r0, r6
    482a:	47c0      	blx	r8
    482c:	200f      	movs	r0, #15
    482e:	47a0      	blx	r4
	for (forloop = 0x80; forloop > 0;) {
    4830:	f04f 0b80 	mov.w	fp, #128	; 0x80
	*inputL = 0;
    4834:	f88a 9000 	strb.w	r9, [sl]
    4838:	f04f 0908 	mov.w	r9, #8
		I2C_clockhi();
    483c:	2101      	movs	r1, #1
    483e:	4638      	mov	r0, r7
    4840:	47a8      	blx	r5
    4842:	200f      	movs	r0, #15
    4844:	47a0      	blx	r4
		if (gpio_get_pin_level(i2csda)) {
    4846:	4630      	mov	r0, r6
    4848:	9b00      	ldr	r3, [sp, #0]
    484a:	4798      	blx	r3
    484c:	b128      	cbz	r0, 485a <I2C_readMONITOREDINPUT+0x196>
			(*inputL) |= forloop;
    484e:	f89a 3000 	ldrb.w	r3, [sl]
    4852:	ea4b 0303 	orr.w	r3, fp, r3
    4856:	f88a 3000 	strb.w	r3, [sl]
		I2C_clocklo();
    485a:	2100      	movs	r1, #0
    485c:	4638      	mov	r0, r7
    485e:	47a8      	blx	r5
    4860:	200f      	movs	r0, #15
    4862:	47a0      	blx	r4
	for (forloop = 0x80; forloop > 0;) {
    4864:	f1b9 0901 	subs.w	r9, r9, #1
		forloop = forloop / 2;
    4868:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
	for (forloop = 0x80; forloop > 0;) {
    486c:	d1e6      	bne.n	483c <I2C_readMONITOREDINPUT+0x178>
	I2C_SENDNACK();	
    486e:	2102      	movs	r1, #2
    4870:	4630      	mov	r0, r6
    4872:	47c0      	blx	r8
    4874:	200f      	movs	r0, #15
    4876:	47a0      	blx	r4
    4878:	2101      	movs	r1, #1
    487a:	4630      	mov	r0, r6
    487c:	47a8      	blx	r5
    487e:	200f      	movs	r0, #15
    4880:	47a0      	blx	r4
    4882:	2101      	movs	r1, #1
    4884:	4638      	mov	r0, r7
    4886:	47a8      	blx	r5
    4888:	200f      	movs	r0, #15
    488a:	47a0      	blx	r4
    488c:	4649      	mov	r1, r9
    488e:	4638      	mov	r0, r7
    4890:	47a8      	blx	r5
    4892:	200f      	movs	r0, #15
    4894:	47a0      	blx	r4
    4896:	2101      	movs	r1, #1
    4898:	4630      	mov	r0, r6
    489a:	47c0      	blx	r8
    489c:	200f      	movs	r0, #15
    489e:	47a0      	blx	r4
	I2C_STOP();
    48a0:	2101      	movs	r1, #1
    48a2:	4638      	mov	r0, r7
    48a4:	47a8      	blx	r5
    48a6:	200f      	movs	r0, #15
    48a8:	47a0      	blx	r4
    48aa:	2101      	movs	r1, #1
    48ac:	4630      	mov	r0, r6
    48ae:	47a8      	blx	r5
    48b0:	200f      	movs	r0, #15
    48b2:	47a0      	blx	r4
    48b4:	2102      	movs	r1, #2
    48b6:	4630      	mov	r0, r6
    48b8:	47c0      	blx	r8
    48ba:	200f      	movs	r0, #15
    48bc:	47a0      	blx	r4
	return 0;
    48be:	4648      	mov	r0, r9
    48c0:	e774      	b.n	47ac <I2C_readMONITOREDINPUT+0xe8>
		return -1;
    48c2:	f04f 30ff 	mov.w	r0, #4294967295
    48c6:	e771      	b.n	47ac <I2C_readMONITOREDINPUT+0xe8>
    48c8:	0000442d 	.word	0x0000442d
    48cc:	00001229 	.word	0x00001229
    48d0:	0000444d 	.word	0x0000444d
    48d4:	00004495 	.word	0x00004495

000048d8 <I2C_configEXPANDER>:
// * CALLED BY:			  main()                                                                                                       *
// * CALLS:		          No function. ALL macros defined in this function file.                                                       *
// * --------------------------------------------------------------------------------------------------------------------------------- *
int I2C_configEXPANDER(uint8_t sda,  uint8_t clk)

{
    48d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    48dc:	460f      	mov	r7, r1
    48de:	4606      	mov	r6, r0
	uint8_t     		i2csda, i2cclk;
	unsigned char		forloop;

	/* Open an I2C channel, send address 0x41, index register 0x01 then send the 3 configuration values for inversion, output default and the direction register */
	I2C_OPEN(sda, clk);
	I2C_START(-1);
    48e0:	4d76      	ldr	r5, [pc, #472]	; (4abc <I2C_configEXPANDER+0x1e4>)
    48e2:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 4ac4 <I2C_configEXPANDER+0x1ec>
    48e6:	4c76      	ldr	r4, [pc, #472]	; (4ac0 <I2C_configEXPANDER+0x1e8>)
    48e8:	2101      	movs	r1, #1
    48ea:	4638      	mov	r0, r7
    48ec:	47a8      	blx	r5
    48ee:	2101      	movs	r1, #1
    48f0:	4630      	mov	r0, r6
    48f2:	47a8      	blx	r5
    48f4:	2102      	movs	r1, #2
    48f6:	4630      	mov	r0, r6
    48f8:	47c0      	blx	r8
    48fa:	200f      	movs	r0, #15
    48fc:	47a0      	blx	r4
    48fe:	200f      	movs	r0, #15
    4900:	47a0      	blx	r4
    4902:	2100      	movs	r1, #0
    4904:	4630      	mov	r0, r6
    4906:	47a8      	blx	r5
    4908:	200f      	movs	r0, #15
    490a:	47a0      	blx	r4
    490c:	2100      	movs	r1, #0
    490e:	4638      	mov	r0, r7
    4910:	47a8      	blx	r5
    4912:	200f      	movs	r0, #15
    4914:	47a0      	blx	r4
    4916:	f04f 0907 	mov.w	r9, #7
	I2C_SENDADDR(0x41, forloop);
    491a:	f04f 0a40 	mov.w	sl, #64	; 0x40
    491e:	f01a 0141 	ands.w	r1, sl, #65	; 0x41
    4922:	bf18      	it	ne
    4924:	2101      	movne	r1, #1
    4926:	4630      	mov	r0, r6
    4928:	47a8      	blx	r5
    492a:	200f      	movs	r0, #15
    492c:	47a0      	blx	r4
    492e:	2101      	movs	r1, #1
    4930:	4638      	mov	r0, r7
    4932:	47a8      	blx	r5
    4934:	200f      	movs	r0, #15
    4936:	47a0      	blx	r4
    4938:	2100      	movs	r1, #0
    493a:	4638      	mov	r0, r7
    493c:	47a8      	blx	r5
    493e:	200f      	movs	r0, #15
    4940:	47a0      	blx	r4
    4942:	f1b9 0901 	subs.w	r9, r9, #1
    4946:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
    494a:	d1e8      	bne.n	491e <I2C_configEXPANDER+0x46>
	I2C_WRITE();
    494c:	4649      	mov	r1, r9
    494e:	4630      	mov	r0, r6
    4950:	47a8      	blx	r5
    4952:	200f      	movs	r0, #15
    4954:	47a0      	blx	r4
    4956:	2101      	movs	r1, #1
    4958:	4638      	mov	r0, r7
    495a:	47a8      	blx	r5
    495c:	200f      	movs	r0, #15
    495e:	47a0      	blx	r4
    4960:	4649      	mov	r1, r9
    4962:	4638      	mov	r0, r7
    4964:	47a8      	blx	r5
    4966:	200f      	movs	r0, #15
    4968:	47a0      	blx	r4
	I2C_WAITACKOP(-2);
    496a:	2101      	movs	r1, #1
    496c:	4630      	mov	r0, r6
    496e:	47c0      	blx	r8
    4970:	200f      	movs	r0, #15
    4972:	47a0      	blx	r4
    4974:	2101      	movs	r1, #1
    4976:	4638      	mov	r0, r7
    4978:	47a8      	blx	r5
    497a:	200f      	movs	r0, #15
    497c:	47a0      	blx	r4
    497e:	f8df a148 	ldr.w	sl, [pc, #328]	; 4ac8 <I2C_configEXPANDER+0x1f0>
    4982:	4630      	mov	r0, r6
    4984:	47d0      	blx	sl
    4986:	f8cd a000 	str.w	sl, [sp]
    498a:	b198      	cbz	r0, 49b4 <I2C_configEXPANDER+0xdc>
    498c:	2101      	movs	r1, #1
    498e:	4638      	mov	r0, r7
    4990:	47a8      	blx	r5
    4992:	200f      	movs	r0, #15
    4994:	47a0      	blx	r4
    4996:	2101      	movs	r1, #1
    4998:	4630      	mov	r0, r6
    499a:	47a8      	blx	r5
    499c:	200f      	movs	r0, #15
    499e:	47a0      	blx	r4
    49a0:	2102      	movs	r1, #2
    49a2:	4630      	mov	r0, r6
    49a4:	47c0      	blx	r8
    49a6:	200f      	movs	r0, #15
    49a8:	47a0      	blx	r4
    49aa:	f06f 0001 	mvn.w	r0, #1
	/* If successful, and code execution got here, the close the I2C channel */
	I2C_STOP();
	I2C_CLOSE();
	
	return 0;
}
    49ae:	b003      	add	sp, #12
    49b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	I2C_WAITACKOP(-2);
    49b4:	4649      	mov	r1, r9
    49b6:	4638      	mov	r0, r7
    49b8:	47a8      	blx	r5
    49ba:	200f      	movs	r0, #15
    49bc:	47a0      	blx	r4
    49be:	2102      	movs	r1, #2
    49c0:	4630      	mov	r0, r6
    49c2:	47c0      	blx	r8
    49c4:	200f      	movs	r0, #15
    49c6:	47a0      	blx	r4
    49c8:	f04f 0908 	mov.w	r9, #8
	I2C_SENDDATA(0x01, forloop);
    49cc:	f04f 0b80 	mov.w	fp, #128	; 0x80
    49d0:	f01b 0101 	ands.w	r1, fp, #1
    49d4:	bf18      	it	ne
    49d6:	2101      	movne	r1, #1
    49d8:	4630      	mov	r0, r6
    49da:	47a8      	blx	r5
    49dc:	200f      	movs	r0, #15
    49de:	47a0      	blx	r4
    49e0:	2101      	movs	r1, #1
    49e2:	4638      	mov	r0, r7
    49e4:	47a8      	blx	r5
    49e6:	200f      	movs	r0, #15
    49e8:	47a0      	blx	r4
    49ea:	2100      	movs	r1, #0
    49ec:	4638      	mov	r0, r7
    49ee:	47a8      	blx	r5
    49f0:	200f      	movs	r0, #15
    49f2:	47a0      	blx	r4
    49f4:	f1b9 0901 	subs.w	r9, r9, #1
    49f8:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
    49fc:	d1e8      	bne.n	49d0 <I2C_configEXPANDER+0xf8>
	I2C_WAITACKOP(-3);
    49fe:	2101      	movs	r1, #1
    4a00:	4630      	mov	r0, r6
    4a02:	47c0      	blx	r8
    4a04:	200f      	movs	r0, #15
    4a06:	47a0      	blx	r4
    4a08:	2101      	movs	r1, #1
    4a0a:	4638      	mov	r0, r7
    4a0c:	47a8      	blx	r5
    4a0e:	200f      	movs	r0, #15
    4a10:	47a0      	blx	r4
    4a12:	4630      	mov	r0, r6
    4a14:	9b00      	ldr	r3, [sp, #0]
    4a16:	4798      	blx	r3
    4a18:	b188      	cbz	r0, 4a3e <I2C_configEXPANDER+0x166>
    4a1a:	2101      	movs	r1, #1
    4a1c:	4638      	mov	r0, r7
    4a1e:	47a8      	blx	r5
    4a20:	200f      	movs	r0, #15
    4a22:	47a0      	blx	r4
    4a24:	2101      	movs	r1, #1
    4a26:	4630      	mov	r0, r6
    4a28:	47a8      	blx	r5
    4a2a:	200f      	movs	r0, #15
    4a2c:	47a0      	blx	r4
    4a2e:	2102      	movs	r1, #2
    4a30:	4630      	mov	r0, r6
    4a32:	47c0      	blx	r8
    4a34:	200f      	movs	r0, #15
    4a36:	47a0      	blx	r4
    4a38:	f06f 0002 	mvn.w	r0, #2
    4a3c:	e7b7      	b.n	49ae <I2C_configEXPANDER+0xd6>
    4a3e:	4649      	mov	r1, r9
    4a40:	4638      	mov	r0, r7
    4a42:	47a8      	blx	r5
    4a44:	200f      	movs	r0, #15
    4a46:	47a0      	blx	r4
    4a48:	2102      	movs	r1, #2
    4a4a:	4630      	mov	r0, r6
    4a4c:	47c0      	blx	r8
    4a4e:	200f      	movs	r0, #15
    4a50:	47a0      	blx	r4
    4a52:	f04f 0908 	mov.w	r9, #8
	I2C_SENDDATA(0x00, forloop);
    4a56:	2100      	movs	r1, #0
    4a58:	4630      	mov	r0, r6
    4a5a:	47a8      	blx	r5
    4a5c:	200f      	movs	r0, #15
    4a5e:	47a0      	blx	r4
    4a60:	2101      	movs	r1, #1
    4a62:	4638      	mov	r0, r7
    4a64:	47a8      	blx	r5
    4a66:	200f      	movs	r0, #15
    4a68:	47a0      	blx	r4
    4a6a:	2100      	movs	r1, #0
    4a6c:	4638      	mov	r0, r7
    4a6e:	47a8      	blx	r5
    4a70:	200f      	movs	r0, #15
    4a72:	47a0      	blx	r4
    4a74:	f1b9 0901 	subs.w	r9, r9, #1
    4a78:	d1ed      	bne.n	4a56 <I2C_configEXPANDER+0x17e>
	I2C_WAITACKOP(-4);
    4a7a:	2101      	movs	r1, #1
    4a7c:	4630      	mov	r0, r6
    4a7e:	47c0      	blx	r8
    4a80:	200f      	movs	r0, #15
    4a82:	47a0      	blx	r4
    4a84:	2101      	movs	r1, #1
    4a86:	4638      	mov	r0, r7
    4a88:	47a8      	blx	r5
    4a8a:	200f      	movs	r0, #15
    4a8c:	47a0      	blx	r4
    4a8e:	4630      	mov	r0, r6
    4a90:	9b00      	ldr	r3, [sp, #0]
    4a92:	4798      	blx	r3
    4a94:	b1d0      	cbz	r0, 4acc <I2C_configEXPANDER+0x1f4>
    4a96:	2101      	movs	r1, #1
    4a98:	4638      	mov	r0, r7
    4a9a:	47a8      	blx	r5
    4a9c:	200f      	movs	r0, #15
    4a9e:	47a0      	blx	r4
    4aa0:	2101      	movs	r1, #1
    4aa2:	4630      	mov	r0, r6
    4aa4:	47a8      	blx	r5
    4aa6:	200f      	movs	r0, #15
    4aa8:	47a0      	blx	r4
    4aaa:	2102      	movs	r1, #2
    4aac:	4630      	mov	r0, r6
    4aae:	47c0      	blx	r8
    4ab0:	200f      	movs	r0, #15
    4ab2:	47a0      	blx	r4
    4ab4:	f06f 0003 	mvn.w	r0, #3
    4ab8:	e779      	b.n	49ae <I2C_configEXPANDER+0xd6>
    4aba:	bf00      	nop
    4abc:	0000442d 	.word	0x0000442d
    4ac0:	00001229 	.word	0x00001229
    4ac4:	00004495 	.word	0x00004495
    4ac8:	0000444d 	.word	0x0000444d
    4acc:	4649      	mov	r1, r9
    4ace:	4638      	mov	r0, r7
    4ad0:	47a8      	blx	r5
    4ad2:	200f      	movs	r0, #15
    4ad4:	47a0      	blx	r4
    4ad6:	2102      	movs	r1, #2
    4ad8:	4630      	mov	r0, r6
    4ada:	47c0      	blx	r8
    4adc:	200f      	movs	r0, #15
    4ade:	47a0      	blx	r4
	I2C_START(-1);
    4ae0:	2101      	movs	r1, #1
    4ae2:	4638      	mov	r0, r7
    4ae4:	47a8      	blx	r5
    4ae6:	2101      	movs	r1, #1
    4ae8:	4630      	mov	r0, r6
    4aea:	47a8      	blx	r5
    4aec:	2102      	movs	r1, #2
    4aee:	4630      	mov	r0, r6
    4af0:	47c0      	blx	r8
    4af2:	200f      	movs	r0, #15
    4af4:	47a0      	blx	r4
    4af6:	200f      	movs	r0, #15
    4af8:	47a0      	blx	r4
    4afa:	4649      	mov	r1, r9
    4afc:	4630      	mov	r0, r6
    4afe:	47a8      	blx	r5
    4b00:	200f      	movs	r0, #15
    4b02:	47a0      	blx	r4
    4b04:	4649      	mov	r1, r9
    4b06:	4638      	mov	r0, r7
    4b08:	47a8      	blx	r5
    4b0a:	200f      	movs	r0, #15
    4b0c:	47a0      	blx	r4
    4b0e:	f04f 0907 	mov.w	r9, #7
	I2C_SENDADDR(0x41, forloop);
    4b12:	f04f 0b40 	mov.w	fp, #64	; 0x40
    4b16:	f01b 0141 	ands.w	r1, fp, #65	; 0x41
    4b1a:	bf18      	it	ne
    4b1c:	2101      	movne	r1, #1
    4b1e:	4630      	mov	r0, r6
    4b20:	47a8      	blx	r5
    4b22:	200f      	movs	r0, #15
    4b24:	47a0      	blx	r4
    4b26:	2101      	movs	r1, #1
    4b28:	4638      	mov	r0, r7
    4b2a:	47a8      	blx	r5
    4b2c:	200f      	movs	r0, #15
    4b2e:	47a0      	blx	r4
    4b30:	2100      	movs	r1, #0
    4b32:	4638      	mov	r0, r7
    4b34:	47a8      	blx	r5
    4b36:	200f      	movs	r0, #15
    4b38:	47a0      	blx	r4
    4b3a:	f1b9 0901 	subs.w	r9, r9, #1
    4b3e:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
    4b42:	d1e8      	bne.n	4b16 <I2C_configEXPANDER+0x23e>
	I2C_WRITE();
    4b44:	4649      	mov	r1, r9
    4b46:	4630      	mov	r0, r6
    4b48:	47a8      	blx	r5
    4b4a:	200f      	movs	r0, #15
    4b4c:	47a0      	blx	r4
    4b4e:	2101      	movs	r1, #1
    4b50:	4638      	mov	r0, r7
    4b52:	47a8      	blx	r5
    4b54:	200f      	movs	r0, #15
    4b56:	47a0      	blx	r4
    4b58:	4649      	mov	r1, r9
    4b5a:	4638      	mov	r0, r7
    4b5c:	47a8      	blx	r5
    4b5e:	200f      	movs	r0, #15
    4b60:	47a0      	blx	r4
	I2C_WAITACKOP(-2);
    4b62:	2101      	movs	r1, #1
    4b64:	4630      	mov	r0, r6
    4b66:	47c0      	blx	r8
    4b68:	200f      	movs	r0, #15
    4b6a:	47a0      	blx	r4
    4b6c:	2101      	movs	r1, #1
    4b6e:	4638      	mov	r0, r7
    4b70:	47a8      	blx	r5
    4b72:	200f      	movs	r0, #15
    4b74:	47a0      	blx	r4
    4b76:	4630      	mov	r0, r6
    4b78:	9b00      	ldr	r3, [sp, #0]
    4b7a:	4798      	blx	r3
    4b7c:	2800      	cmp	r0, #0
    4b7e:	f47f af05 	bne.w	498c <I2C_configEXPANDER+0xb4>
    4b82:	4649      	mov	r1, r9
    4b84:	4638      	mov	r0, r7
    4b86:	47a8      	blx	r5
    4b88:	200f      	movs	r0, #15
    4b8a:	47a0      	blx	r4
    4b8c:	2102      	movs	r1, #2
    4b8e:	4630      	mov	r0, r6
    4b90:	47c0      	blx	r8
    4b92:	200f      	movs	r0, #15
    4b94:	47a0      	blx	r4
    4b96:	f04f 0908 	mov.w	r9, #8
	I2C_SENDDATA(0x02, forloop);
    4b9a:	f04f 0b80 	mov.w	fp, #128	; 0x80
    4b9e:	f01b 0102 	ands.w	r1, fp, #2
    4ba2:	bf18      	it	ne
    4ba4:	2101      	movne	r1, #1
    4ba6:	4630      	mov	r0, r6
    4ba8:	47a8      	blx	r5
    4baa:	200f      	movs	r0, #15
    4bac:	47a0      	blx	r4
    4bae:	2101      	movs	r1, #1
    4bb0:	4638      	mov	r0, r7
    4bb2:	47a8      	blx	r5
    4bb4:	200f      	movs	r0, #15
    4bb6:	47a0      	blx	r4
    4bb8:	2100      	movs	r1, #0
    4bba:	4638      	mov	r0, r7
    4bbc:	47a8      	blx	r5
    4bbe:	200f      	movs	r0, #15
    4bc0:	47a0      	blx	r4
    4bc2:	f1b9 0901 	subs.w	r9, r9, #1
    4bc6:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
    4bca:	d1e8      	bne.n	4b9e <I2C_configEXPANDER+0x2c6>
	I2C_WAITACKOP(-3);
    4bcc:	2101      	movs	r1, #1
    4bce:	4630      	mov	r0, r6
    4bd0:	47c0      	blx	r8
    4bd2:	200f      	movs	r0, #15
    4bd4:	47a0      	blx	r4
    4bd6:	2101      	movs	r1, #1
    4bd8:	4638      	mov	r0, r7
    4bda:	47a8      	blx	r5
    4bdc:	200f      	movs	r0, #15
    4bde:	47a0      	blx	r4
    4be0:	4630      	mov	r0, r6
    4be2:	9b00      	ldr	r3, [sp, #0]
    4be4:	4798      	blx	r3
    4be6:	2800      	cmp	r0, #0
    4be8:	f47f af17 	bne.w	4a1a <I2C_configEXPANDER+0x142>
    4bec:	4649      	mov	r1, r9
    4bee:	4638      	mov	r0, r7
    4bf0:	47a8      	blx	r5
    4bf2:	200f      	movs	r0, #15
    4bf4:	47a0      	blx	r4
    4bf6:	2102      	movs	r1, #2
    4bf8:	4630      	mov	r0, r6
    4bfa:	47c0      	blx	r8
    4bfc:	200f      	movs	r0, #15
    4bfe:	47a0      	blx	r4
    4c00:	f04f 0908 	mov.w	r9, #8
	I2C_SENDDATA(0x00, forloop);
    4c04:	2100      	movs	r1, #0
    4c06:	4630      	mov	r0, r6
    4c08:	47a8      	blx	r5
    4c0a:	200f      	movs	r0, #15
    4c0c:	47a0      	blx	r4
    4c0e:	2101      	movs	r1, #1
    4c10:	4638      	mov	r0, r7
    4c12:	47a8      	blx	r5
    4c14:	200f      	movs	r0, #15
    4c16:	47a0      	blx	r4
    4c18:	2100      	movs	r1, #0
    4c1a:	4638      	mov	r0, r7
    4c1c:	47a8      	blx	r5
    4c1e:	200f      	movs	r0, #15
    4c20:	47a0      	blx	r4
    4c22:	f1b9 0901 	subs.w	r9, r9, #1
    4c26:	d1ed      	bne.n	4c04 <I2C_configEXPANDER+0x32c>
	I2C_WAITACKOP(-4);
    4c28:	2101      	movs	r1, #1
    4c2a:	4630      	mov	r0, r6
    4c2c:	47c0      	blx	r8
    4c2e:	200f      	movs	r0, #15
    4c30:	47a0      	blx	r4
    4c32:	2101      	movs	r1, #1
    4c34:	4638      	mov	r0, r7
    4c36:	47a8      	blx	r5
    4c38:	200f      	movs	r0, #15
    4c3a:	47a0      	blx	r4
    4c3c:	4630      	mov	r0, r6
    4c3e:	9b00      	ldr	r3, [sp, #0]
    4c40:	4798      	blx	r3
    4c42:	2800      	cmp	r0, #0
    4c44:	f47f af27 	bne.w	4a96 <I2C_configEXPANDER+0x1be>
    4c48:	4649      	mov	r1, r9
    4c4a:	4638      	mov	r0, r7
    4c4c:	47a8      	blx	r5
    4c4e:	200f      	movs	r0, #15
    4c50:	47a0      	blx	r4
    4c52:	2102      	movs	r1, #2
    4c54:	4630      	mov	r0, r6
    4c56:	47c0      	blx	r8
    4c58:	200f      	movs	r0, #15
    4c5a:	47a0      	blx	r4
	I2C_START(-1);
    4c5c:	2101      	movs	r1, #1
    4c5e:	4638      	mov	r0, r7
    4c60:	47a8      	blx	r5
    4c62:	2101      	movs	r1, #1
    4c64:	4630      	mov	r0, r6
    4c66:	47a8      	blx	r5
    4c68:	2102      	movs	r1, #2
    4c6a:	4630      	mov	r0, r6
    4c6c:	47c0      	blx	r8
    4c6e:	200f      	movs	r0, #15
    4c70:	47a0      	blx	r4
    4c72:	200f      	movs	r0, #15
    4c74:	47a0      	blx	r4
    4c76:	4649      	mov	r1, r9
    4c78:	4630      	mov	r0, r6
    4c7a:	47a8      	blx	r5
    4c7c:	200f      	movs	r0, #15
    4c7e:	47a0      	blx	r4
    4c80:	4649      	mov	r1, r9
    4c82:	4638      	mov	r0, r7
    4c84:	47a8      	blx	r5
    4c86:	200f      	movs	r0, #15
    4c88:	47a0      	blx	r4
    4c8a:	f04f 0907 	mov.w	r9, #7
	I2C_SENDADDR(0x41, forloop);
    4c8e:	f04f 0b40 	mov.w	fp, #64	; 0x40
    4c92:	f01b 0141 	ands.w	r1, fp, #65	; 0x41
    4c96:	bf18      	it	ne
    4c98:	2101      	movne	r1, #1
    4c9a:	4630      	mov	r0, r6
    4c9c:	47a8      	blx	r5
    4c9e:	200f      	movs	r0, #15
    4ca0:	47a0      	blx	r4
    4ca2:	2101      	movs	r1, #1
    4ca4:	4638      	mov	r0, r7
    4ca6:	47a8      	blx	r5
    4ca8:	200f      	movs	r0, #15
    4caa:	47a0      	blx	r4
    4cac:	2100      	movs	r1, #0
    4cae:	4638      	mov	r0, r7
    4cb0:	47a8      	blx	r5
    4cb2:	200f      	movs	r0, #15
    4cb4:	47a0      	blx	r4
    4cb6:	f1b9 0901 	subs.w	r9, r9, #1
    4cba:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
    4cbe:	d1e8      	bne.n	4c92 <I2C_configEXPANDER+0x3ba>
	I2C_WRITE();
    4cc0:	4649      	mov	r1, r9
    4cc2:	4630      	mov	r0, r6
    4cc4:	47a8      	blx	r5
    4cc6:	200f      	movs	r0, #15
    4cc8:	47a0      	blx	r4
    4cca:	2101      	movs	r1, #1
    4ccc:	4638      	mov	r0, r7
    4cce:	47a8      	blx	r5
    4cd0:	200f      	movs	r0, #15
    4cd2:	47a0      	blx	r4
    4cd4:	4649      	mov	r1, r9
    4cd6:	4638      	mov	r0, r7
    4cd8:	47a8      	blx	r5
    4cda:	200f      	movs	r0, #15
    4cdc:	47a0      	blx	r4
	I2C_WAITACKOP(-2);
    4cde:	2101      	movs	r1, #1
    4ce0:	4630      	mov	r0, r6
    4ce2:	47c0      	blx	r8
    4ce4:	200f      	movs	r0, #15
    4ce6:	47a0      	blx	r4
    4ce8:	2101      	movs	r1, #1
    4cea:	4638      	mov	r0, r7
    4cec:	47a8      	blx	r5
    4cee:	200f      	movs	r0, #15
    4cf0:	47a0      	blx	r4
    4cf2:	4630      	mov	r0, r6
    4cf4:	9b00      	ldr	r3, [sp, #0]
    4cf6:	4798      	blx	r3
    4cf8:	2800      	cmp	r0, #0
    4cfa:	f47f ae47 	bne.w	498c <I2C_configEXPANDER+0xb4>
    4cfe:	4649      	mov	r1, r9
    4d00:	4638      	mov	r0, r7
    4d02:	47a8      	blx	r5
    4d04:	200f      	movs	r0, #15
    4d06:	47a0      	blx	r4
    4d08:	2102      	movs	r1, #2
    4d0a:	4630      	mov	r0, r6
    4d0c:	47c0      	blx	r8
    4d0e:	200f      	movs	r0, #15
    4d10:	47a0      	blx	r4
    4d12:	f04f 0908 	mov.w	r9, #8
	I2C_SENDDATA(0x03, forloop);
    4d16:	f04f 0b80 	mov.w	fp, #128	; 0x80
    4d1a:	f01b 0103 	ands.w	r1, fp, #3
    4d1e:	bf18      	it	ne
    4d20:	2101      	movne	r1, #1
    4d22:	4630      	mov	r0, r6
    4d24:	47a8      	blx	r5
    4d26:	200f      	movs	r0, #15
    4d28:	47a0      	blx	r4
    4d2a:	2101      	movs	r1, #1
    4d2c:	4638      	mov	r0, r7
    4d2e:	47a8      	blx	r5
    4d30:	200f      	movs	r0, #15
    4d32:	47a0      	blx	r4
    4d34:	2100      	movs	r1, #0
    4d36:	4638      	mov	r0, r7
    4d38:	47a8      	blx	r5
    4d3a:	200f      	movs	r0, #15
    4d3c:	47a0      	blx	r4
    4d3e:	f1b9 0901 	subs.w	r9, r9, #1
    4d42:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
    4d46:	d1e8      	bne.n	4d1a <I2C_configEXPANDER+0x442>
	I2C_WAITACKOP(-3);
    4d48:	2101      	movs	r1, #1
    4d4a:	4630      	mov	r0, r6
    4d4c:	47c0      	blx	r8
    4d4e:	200f      	movs	r0, #15
    4d50:	47a0      	blx	r4
    4d52:	2101      	movs	r1, #1
    4d54:	4638      	mov	r0, r7
    4d56:	47a8      	blx	r5
    4d58:	200f      	movs	r0, #15
    4d5a:	47a0      	blx	r4
    4d5c:	4630      	mov	r0, r6
    4d5e:	9b00      	ldr	r3, [sp, #0]
    4d60:	4798      	blx	r3
    4d62:	2800      	cmp	r0, #0
    4d64:	f47f ae59 	bne.w	4a1a <I2C_configEXPANDER+0x142>
    4d68:	4649      	mov	r1, r9
    4d6a:	4638      	mov	r0, r7
    4d6c:	47a8      	blx	r5
    4d6e:	200f      	movs	r0, #15
    4d70:	47a0      	blx	r4
    4d72:	2102      	movs	r1, #2
    4d74:	4630      	mov	r0, r6
    4d76:	47c0      	blx	r8
    4d78:	200f      	movs	r0, #15
    4d7a:	47a0      	blx	r4
    4d7c:	f8df a098 	ldr.w	sl, [pc, #152]	; 4e18 <I2C_configEXPANDER+0x540>
    4d80:	f8df 9098 	ldr.w	r9, [pc, #152]	; 4e1c <I2C_configEXPANDER+0x544>
    4d84:	2308      	movs	r3, #8
    4d86:	9301      	str	r3, [sp, #4]
	I2C_SENDDATA(0xC0, forloop);
    4d88:	f04f 0b80 	mov.w	fp, #128	; 0x80
    4d8c:	f01b 01c0 	ands.w	r1, fp, #192	; 0xc0
    4d90:	bf18      	it	ne
    4d92:	2101      	movne	r1, #1
    4d94:	4630      	mov	r0, r6
    4d96:	47d0      	blx	sl
    4d98:	200f      	movs	r0, #15
    4d9a:	47c8      	blx	r9
    4d9c:	2101      	movs	r1, #1
    4d9e:	4638      	mov	r0, r7
    4da0:	47d0      	blx	sl
    4da2:	200f      	movs	r0, #15
    4da4:	47c8      	blx	r9
    4da6:	2100      	movs	r1, #0
    4da8:	4638      	mov	r0, r7
    4daa:	47d0      	blx	sl
    4dac:	200f      	movs	r0, #15
    4dae:	47c8      	blx	r9
    4db0:	9b01      	ldr	r3, [sp, #4]
    4db2:	3b01      	subs	r3, #1
    4db4:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
    4db8:	9301      	str	r3, [sp, #4]
    4dba:	d1e7      	bne.n	4d8c <I2C_configEXPANDER+0x4b4>
	I2C_WAITACKOP(-4);		
    4dbc:	2101      	movs	r1, #1
    4dbe:	4630      	mov	r0, r6
    4dc0:	f8df b05c 	ldr.w	fp, [pc, #92]	; 4e20 <I2C_configEXPANDER+0x548>
    4dc4:	47d8      	blx	fp
    4dc6:	200f      	movs	r0, #15
    4dc8:	47c8      	blx	r9
    4dca:	2101      	movs	r1, #1
    4dcc:	4638      	mov	r0, r7
    4dce:	47d0      	blx	sl
    4dd0:	200f      	movs	r0, #15
    4dd2:	47c8      	blx	r9
    4dd4:	4630      	mov	r0, r6
    4dd6:	9b00      	ldr	r3, [sp, #0]
    4dd8:	4798      	blx	r3
    4dda:	2800      	cmp	r0, #0
    4ddc:	f47f ae5b 	bne.w	4a96 <I2C_configEXPANDER+0x1be>
    4de0:	9901      	ldr	r1, [sp, #4]
    4de2:	4638      	mov	r0, r7
    4de4:	47d0      	blx	sl
    4de6:	200f      	movs	r0, #15
    4de8:	47c8      	blx	r9
    4dea:	2102      	movs	r1, #2
    4dec:	4630      	mov	r0, r6
    4dee:	47d8      	blx	fp
    4df0:	200f      	movs	r0, #15
    4df2:	47c8      	blx	r9
	I2C_STOP();
    4df4:	2101      	movs	r1, #1
    4df6:	4638      	mov	r0, r7
    4df8:	47d0      	blx	sl
    4dfa:	200f      	movs	r0, #15
    4dfc:	47c8      	blx	r9
    4dfe:	2101      	movs	r1, #1
    4e00:	4630      	mov	r0, r6
    4e02:	47d0      	blx	sl
    4e04:	200f      	movs	r0, #15
    4e06:	47c8      	blx	r9
    4e08:	2102      	movs	r1, #2
    4e0a:	4630      	mov	r0, r6
    4e0c:	47d8      	blx	fp
    4e0e:	200f      	movs	r0, #15
    4e10:	47c8      	blx	r9
	return 0;
    4e12:	9801      	ldr	r0, [sp, #4]
    4e14:	e5cb      	b.n	49ae <I2C_configEXPANDER+0xd6>
    4e16:	bf00      	nop
    4e18:	0000442d 	.word	0x0000442d
    4e1c:	00001229 	.word	0x00001229
    4e20:	00004495 	.word	0x00004495

00004e24 <I2C_setEXPANDER>:
// * CALLED BY:			  main()                                                                                                       *
// * CALLS:		          No function. ALL macros defined in this function file.                                                       *
// * --------------------------------------------------------------------------------------------------------------------------------- *
int I2C_setEXPANDER(uint8_t sda,  uint8_t clk, unsigned char relay)

{
    4e24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4e28:	460f      	mov	r7, r1
    4e2a:	4606      	mov	r6, r0
	uint8_t     		i2csda, i2cclk;
	unsigned char		forloop;

	/* Open an I2C channel, send address 0x41, index register 0x01 then send the relay output value */
	I2C_OPEN(sda, clk);
	I2C_START(-1);
    4e2c:	4d86      	ldr	r5, [pc, #536]	; (5048 <I2C_setEXPANDER+0x224>)
{
    4e2e:	9201      	str	r2, [sp, #4]
	I2C_START(-1);
    4e30:	2101      	movs	r1, #1
    4e32:	4638      	mov	r0, r7
    4e34:	47a8      	blx	r5
    4e36:	2101      	movs	r1, #1
    4e38:	4630      	mov	r0, r6
    4e3a:	47a8      	blx	r5
    4e3c:	f8df 8210 	ldr.w	r8, [pc, #528]	; 5050 <I2C_setEXPANDER+0x22c>
    4e40:	4c82      	ldr	r4, [pc, #520]	; (504c <I2C_setEXPANDER+0x228>)
    4e42:	2102      	movs	r1, #2
    4e44:	4630      	mov	r0, r6
    4e46:	47c0      	blx	r8
    4e48:	200f      	movs	r0, #15
    4e4a:	47a0      	blx	r4
    4e4c:	200f      	movs	r0, #15
    4e4e:	47a0      	blx	r4
    4e50:	2100      	movs	r1, #0
    4e52:	4630      	mov	r0, r6
    4e54:	47a8      	blx	r5
    4e56:	200f      	movs	r0, #15
    4e58:	47a0      	blx	r4
    4e5a:	2100      	movs	r1, #0
    4e5c:	4638      	mov	r0, r7
    4e5e:	47a8      	blx	r5
    4e60:	200f      	movs	r0, #15
    4e62:	47a0      	blx	r4
    4e64:	f04f 0907 	mov.w	r9, #7
	I2C_SENDADDR(0x41, forloop);
    4e68:	f04f 0a40 	mov.w	sl, #64	; 0x40
    4e6c:	f01a 0141 	ands.w	r1, sl, #65	; 0x41
    4e70:	bf18      	it	ne
    4e72:	2101      	movne	r1, #1
    4e74:	4630      	mov	r0, r6
    4e76:	47a8      	blx	r5
    4e78:	200f      	movs	r0, #15
    4e7a:	47a0      	blx	r4
    4e7c:	2101      	movs	r1, #1
    4e7e:	4638      	mov	r0, r7
    4e80:	47a8      	blx	r5
    4e82:	200f      	movs	r0, #15
    4e84:	47a0      	blx	r4
    4e86:	2100      	movs	r1, #0
    4e88:	4638      	mov	r0, r7
    4e8a:	47a8      	blx	r5
    4e8c:	200f      	movs	r0, #15
    4e8e:	47a0      	blx	r4
    4e90:	f1b9 0901 	subs.w	r9, r9, #1
    4e94:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
    4e98:	d1e8      	bne.n	4e6c <I2C_setEXPANDER+0x48>
	I2C_WRITE();
    4e9a:	4649      	mov	r1, r9
    4e9c:	4630      	mov	r0, r6
    4e9e:	47a8      	blx	r5
    4ea0:	200f      	movs	r0, #15
    4ea2:	47a0      	blx	r4
    4ea4:	2101      	movs	r1, #1
    4ea6:	4638      	mov	r0, r7
    4ea8:	47a8      	blx	r5
    4eaa:	200f      	movs	r0, #15
    4eac:	47a0      	blx	r4
    4eae:	4649      	mov	r1, r9
    4eb0:	4638      	mov	r0, r7
    4eb2:	47a8      	blx	r5
    4eb4:	200f      	movs	r0, #15
    4eb6:	47a0      	blx	r4
	I2C_WAITACKOP(-2);
    4eb8:	2101      	movs	r1, #1
    4eba:	4630      	mov	r0, r6
    4ebc:	47c0      	blx	r8
    4ebe:	200f      	movs	r0, #15
    4ec0:	47a0      	blx	r4
    4ec2:	2101      	movs	r1, #1
    4ec4:	4638      	mov	r0, r7
    4ec6:	47a8      	blx	r5
    4ec8:	200f      	movs	r0, #15
    4eca:	47a0      	blx	r4
    4ecc:	f8df a184 	ldr.w	sl, [pc, #388]	; 5054 <I2C_setEXPANDER+0x230>
    4ed0:	4630      	mov	r0, r6
    4ed2:	47d0      	blx	sl
    4ed4:	b198      	cbz	r0, 4efe <I2C_setEXPANDER+0xda>
    4ed6:	2101      	movs	r1, #1
    4ed8:	4638      	mov	r0, r7
    4eda:	47a8      	blx	r5
    4edc:	200f      	movs	r0, #15
    4ede:	47a0      	blx	r4
    4ee0:	2101      	movs	r1, #1
    4ee2:	4630      	mov	r0, r6
    4ee4:	47a8      	blx	r5
    4ee6:	200f      	movs	r0, #15
    4ee8:	47a0      	blx	r4
    4eea:	2102      	movs	r1, #2
    4eec:	4630      	mov	r0, r6
    4eee:	47c0      	blx	r8
    4ef0:	200f      	movs	r0, #15
    4ef2:	47a0      	blx	r4
    4ef4:	f06f 0001 	mvn.w	r0, #1
	/* If successful, and code execution got here, the close the I2C channel */
	I2C_STOP();
	I2C_CLOSE();
	
	return 0;
}
    4ef8:	b003      	add	sp, #12
    4efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	I2C_WAITACKOP(-2);
    4efe:	4649      	mov	r1, r9
    4f00:	4638      	mov	r0, r7
    4f02:	47a8      	blx	r5
    4f04:	200f      	movs	r0, #15
    4f06:	47a0      	blx	r4
    4f08:	2102      	movs	r1, #2
    4f0a:	4630      	mov	r0, r6
    4f0c:	47c0      	blx	r8
    4f0e:	200f      	movs	r0, #15
    4f10:	47a0      	blx	r4
    4f12:	f04f 0908 	mov.w	r9, #8
	I2C_SENDDATA(0x01, forloop);
    4f16:	f04f 0b80 	mov.w	fp, #128	; 0x80
    4f1a:	f01b 0101 	ands.w	r1, fp, #1
    4f1e:	bf18      	it	ne
    4f20:	2101      	movne	r1, #1
    4f22:	4630      	mov	r0, r6
    4f24:	47a8      	blx	r5
    4f26:	200f      	movs	r0, #15
    4f28:	47a0      	blx	r4
    4f2a:	2101      	movs	r1, #1
    4f2c:	4638      	mov	r0, r7
    4f2e:	47a8      	blx	r5
    4f30:	200f      	movs	r0, #15
    4f32:	47a0      	blx	r4
    4f34:	2100      	movs	r1, #0
    4f36:	4638      	mov	r0, r7
    4f38:	47a8      	blx	r5
    4f3a:	200f      	movs	r0, #15
    4f3c:	47a0      	blx	r4
    4f3e:	f1b9 0901 	subs.w	r9, r9, #1
    4f42:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
    4f46:	d1e8      	bne.n	4f1a <I2C_setEXPANDER+0xf6>
	I2C_WAITACKOP(-3);
    4f48:	2101      	movs	r1, #1
    4f4a:	4630      	mov	r0, r6
    4f4c:	47c0      	blx	r8
    4f4e:	200f      	movs	r0, #15
    4f50:	47a0      	blx	r4
    4f52:	2101      	movs	r1, #1
    4f54:	4638      	mov	r0, r7
    4f56:	47a8      	blx	r5
    4f58:	200f      	movs	r0, #15
    4f5a:	47a0      	blx	r4
    4f5c:	4630      	mov	r0, r6
    4f5e:	47d0      	blx	sl
    4f60:	b188      	cbz	r0, 4f86 <I2C_setEXPANDER+0x162>
    4f62:	2101      	movs	r1, #1
    4f64:	4638      	mov	r0, r7
    4f66:	47a8      	blx	r5
    4f68:	200f      	movs	r0, #15
    4f6a:	47a0      	blx	r4
    4f6c:	2101      	movs	r1, #1
    4f6e:	4630      	mov	r0, r6
    4f70:	47a8      	blx	r5
    4f72:	200f      	movs	r0, #15
    4f74:	47a0      	blx	r4
    4f76:	2102      	movs	r1, #2
    4f78:	4630      	mov	r0, r6
    4f7a:	47c0      	blx	r8
    4f7c:	200f      	movs	r0, #15
    4f7e:	47a0      	blx	r4
    4f80:	f06f 0002 	mvn.w	r0, #2
    4f84:	e7b8      	b.n	4ef8 <I2C_setEXPANDER+0xd4>
    4f86:	4649      	mov	r1, r9
    4f88:	4638      	mov	r0, r7
    4f8a:	47a8      	blx	r5
    4f8c:	200f      	movs	r0, #15
    4f8e:	47a0      	blx	r4
    4f90:	2102      	movs	r1, #2
    4f92:	4630      	mov	r0, r6
    4f94:	47c0      	blx	r8
    4f96:	200f      	movs	r0, #15
    4f98:	47a0      	blx	r4
    4f9a:	f04f 0908 	mov.w	r9, #8
	I2C_SENDDATA(relay, forloop);
    4f9e:	f04f 0b80 	mov.w	fp, #128	; 0x80
    4fa2:	9b01      	ldr	r3, [sp, #4]
    4fa4:	ea13 010b 	ands.w	r1, r3, fp
    4fa8:	bf18      	it	ne
    4faa:	2101      	movne	r1, #1
    4fac:	4630      	mov	r0, r6
    4fae:	47a8      	blx	r5
    4fb0:	200f      	movs	r0, #15
    4fb2:	47a0      	blx	r4
    4fb4:	2101      	movs	r1, #1
    4fb6:	4638      	mov	r0, r7
    4fb8:	47a8      	blx	r5
    4fba:	200f      	movs	r0, #15
    4fbc:	47a0      	blx	r4
    4fbe:	2100      	movs	r1, #0
    4fc0:	4638      	mov	r0, r7
    4fc2:	47a8      	blx	r5
    4fc4:	200f      	movs	r0, #15
    4fc6:	47a0      	blx	r4
    4fc8:	f1b9 0901 	subs.w	r9, r9, #1
    4fcc:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
    4fd0:	d1e7      	bne.n	4fa2 <I2C_setEXPANDER+0x17e>
	I2C_WAITACKOP(-4);
    4fd2:	2101      	movs	r1, #1
    4fd4:	4630      	mov	r0, r6
    4fd6:	47c0      	blx	r8
    4fd8:	200f      	movs	r0, #15
    4fda:	47a0      	blx	r4
    4fdc:	2101      	movs	r1, #1
    4fde:	4638      	mov	r0, r7
    4fe0:	47a8      	blx	r5
    4fe2:	200f      	movs	r0, #15
    4fe4:	47a0      	blx	r4
    4fe6:	4630      	mov	r0, r6
    4fe8:	47d0      	blx	sl
    4fea:	b188      	cbz	r0, 5010 <I2C_setEXPANDER+0x1ec>
    4fec:	2101      	movs	r1, #1
    4fee:	4638      	mov	r0, r7
    4ff0:	47a8      	blx	r5
    4ff2:	200f      	movs	r0, #15
    4ff4:	47a0      	blx	r4
    4ff6:	2101      	movs	r1, #1
    4ff8:	4630      	mov	r0, r6
    4ffa:	47a8      	blx	r5
    4ffc:	200f      	movs	r0, #15
    4ffe:	47a0      	blx	r4
    5000:	2102      	movs	r1, #2
    5002:	4630      	mov	r0, r6
    5004:	47c0      	blx	r8
    5006:	200f      	movs	r0, #15
    5008:	47a0      	blx	r4
    500a:	f06f 0003 	mvn.w	r0, #3
    500e:	e773      	b.n	4ef8 <I2C_setEXPANDER+0xd4>
    5010:	4649      	mov	r1, r9
    5012:	4638      	mov	r0, r7
    5014:	47a8      	blx	r5
    5016:	200f      	movs	r0, #15
    5018:	47a0      	blx	r4
    501a:	2102      	movs	r1, #2
    501c:	4630      	mov	r0, r6
    501e:	47c0      	blx	r8
    5020:	200f      	movs	r0, #15
    5022:	47a0      	blx	r4
	I2C_STOP();
    5024:	2101      	movs	r1, #1
    5026:	4638      	mov	r0, r7
    5028:	47a8      	blx	r5
    502a:	200f      	movs	r0, #15
    502c:	47a0      	blx	r4
    502e:	2101      	movs	r1, #1
    5030:	4630      	mov	r0, r6
    5032:	47a8      	blx	r5
    5034:	200f      	movs	r0, #15
    5036:	47a0      	blx	r4
    5038:	2102      	movs	r1, #2
    503a:	4630      	mov	r0, r6
    503c:	47c0      	blx	r8
    503e:	200f      	movs	r0, #15
    5040:	47a0      	blx	r4
	return 0;
    5042:	4648      	mov	r0, r9
    5044:	e758      	b.n	4ef8 <I2C_setEXPANDER+0xd4>
    5046:	bf00      	nop
    5048:	0000442d 	.word	0x0000442d
    504c:	00001229 	.word	0x00001229
    5050:	00004495 	.word	0x00004495
    5054:	0000444d 	.word	0x0000444d

00005058 <I2C_readEXPANDER>:
// * CALLED BY:			  main()                                                                                                       *
// * CALLS:		          No function. ALL macros defined in this function file.                                                       *
// * --------------------------------------------------------------------------------------------------------------------------------- *
int I2C_readEXPANDER(uint8_t sda,  uint8_t clk, unsigned char *inputs)

{
    5058:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    505c:	4606      	mov	r6, r0
    505e:	460f      	mov	r7, r1
	uint8_t     		i2csda, i2cclk;
	unsigned char		forloop;

    if (!inputs) {
    5060:	4692      	mov	sl, r2
    5062:	2a00      	cmp	r2, #0
    5064:	f000 8148 	beq.w	52f8 <I2C_readEXPANDER+0x2a0>
		return -1;	
	}

	/* Open an I2C channel, send address 0x41, index register 0x00 then read the input value */
	I2C_OPEN(sda, clk);
	I2C_START(-2);
    5068:	4da5      	ldr	r5, [pc, #660]	; (5300 <I2C_readEXPANDER+0x2a8>)
    506a:	f8df 829c 	ldr.w	r8, [pc, #668]	; 5308 <I2C_readEXPANDER+0x2b0>
    506e:	4ca5      	ldr	r4, [pc, #660]	; (5304 <I2C_readEXPANDER+0x2ac>)
    5070:	2101      	movs	r1, #1
    5072:	4638      	mov	r0, r7
    5074:	47a8      	blx	r5
    5076:	2101      	movs	r1, #1
    5078:	4630      	mov	r0, r6
    507a:	47a8      	blx	r5
    507c:	2102      	movs	r1, #2
    507e:	4630      	mov	r0, r6
    5080:	47c0      	blx	r8
    5082:	200f      	movs	r0, #15
    5084:	47a0      	blx	r4
    5086:	200f      	movs	r0, #15
    5088:	47a0      	blx	r4
    508a:	2100      	movs	r1, #0
    508c:	4630      	mov	r0, r6
    508e:	47a8      	blx	r5
    5090:	200f      	movs	r0, #15
    5092:	47a0      	blx	r4
    5094:	2100      	movs	r1, #0
    5096:	4638      	mov	r0, r7
    5098:	47a8      	blx	r5
    509a:	200f      	movs	r0, #15
    509c:	47a0      	blx	r4
    509e:	f04f 0907 	mov.w	r9, #7
	I2C_SENDADDR(0x41, forloop);
    50a2:	f04f 0b40 	mov.w	fp, #64	; 0x40
    50a6:	f01b 0141 	ands.w	r1, fp, #65	; 0x41
    50aa:	bf18      	it	ne
    50ac:	2101      	movne	r1, #1
    50ae:	4630      	mov	r0, r6
    50b0:	47a8      	blx	r5
    50b2:	200f      	movs	r0, #15
    50b4:	47a0      	blx	r4
    50b6:	2101      	movs	r1, #1
    50b8:	4638      	mov	r0, r7
    50ba:	47a8      	blx	r5
    50bc:	200f      	movs	r0, #15
    50be:	47a0      	blx	r4
    50c0:	2100      	movs	r1, #0
    50c2:	4638      	mov	r0, r7
    50c4:	47a8      	blx	r5
    50c6:	200f      	movs	r0, #15
    50c8:	47a0      	blx	r4
    50ca:	f1b9 0901 	subs.w	r9, r9, #1
    50ce:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
    50d2:	d1e8      	bne.n	50a6 <I2C_readEXPANDER+0x4e>
	I2C_WRITE();
    50d4:	4649      	mov	r1, r9
    50d6:	4630      	mov	r0, r6
    50d8:	47a8      	blx	r5
    50da:	200f      	movs	r0, #15
    50dc:	47a0      	blx	r4
    50de:	2101      	movs	r1, #1
    50e0:	4638      	mov	r0, r7
    50e2:	47a8      	blx	r5
    50e4:	200f      	movs	r0, #15
    50e6:	47a0      	blx	r4
    50e8:	4649      	mov	r1, r9
    50ea:	4638      	mov	r0, r7
    50ec:	47a8      	blx	r5
    50ee:	200f      	movs	r0, #15
    50f0:	47a0      	blx	r4
	I2C_WAITACKOP(-3);
    50f2:	2101      	movs	r1, #1
    50f4:	4630      	mov	r0, r6
    50f6:	47c0      	blx	r8
    50f8:	200f      	movs	r0, #15
    50fa:	47a0      	blx	r4
    50fc:	2101      	movs	r1, #1
    50fe:	4638      	mov	r0, r7
    5100:	47a8      	blx	r5
    5102:	200f      	movs	r0, #15
    5104:	47a0      	blx	r4
    5106:	f8df b204 	ldr.w	fp, [pc, #516]	; 530c <I2C_readEXPANDER+0x2b4>
    510a:	4630      	mov	r0, r6
    510c:	47d8      	blx	fp
    510e:	f8cd b004 	str.w	fp, [sp, #4]
    5112:	b198      	cbz	r0, 513c <I2C_readEXPANDER+0xe4>
    5114:	2101      	movs	r1, #1
    5116:	4638      	mov	r0, r7
    5118:	47a8      	blx	r5
    511a:	200f      	movs	r0, #15
    511c:	47a0      	blx	r4
    511e:	2101      	movs	r1, #1
    5120:	4630      	mov	r0, r6
    5122:	47a8      	blx	r5
    5124:	200f      	movs	r0, #15
    5126:	47a0      	blx	r4
    5128:	2102      	movs	r1, #2
    512a:	4630      	mov	r0, r6
    512c:	47c0      	blx	r8
    512e:	200f      	movs	r0, #15
    5130:	47a0      	blx	r4
    5132:	f06f 0002 	mvn.w	r0, #2
	I2C_STOP();
	I2C_CLOSE();
	/* If successful, and code execution got here, the close the I2C channel */
	
	return 0;
}
    5136:	b003      	add	sp, #12
    5138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	I2C_WAITACKOP(-3);
    513c:	4649      	mov	r1, r9
    513e:	4638      	mov	r0, r7
    5140:	47a8      	blx	r5
    5142:	200f      	movs	r0, #15
    5144:	47a0      	blx	r4
    5146:	2102      	movs	r1, #2
    5148:	4630      	mov	r0, r6
    514a:	47c0      	blx	r8
    514c:	200f      	movs	r0, #15
    514e:	47a0      	blx	r4
    5150:	f04f 0908 	mov.w	r9, #8
	I2C_SENDDATA(0x00, forloop);
    5154:	2100      	movs	r1, #0
    5156:	4630      	mov	r0, r6
    5158:	47a8      	blx	r5
    515a:	200f      	movs	r0, #15
    515c:	47a0      	blx	r4
    515e:	2101      	movs	r1, #1
    5160:	4638      	mov	r0, r7
    5162:	47a8      	blx	r5
    5164:	200f      	movs	r0, #15
    5166:	47a0      	blx	r4
    5168:	2100      	movs	r1, #0
    516a:	4638      	mov	r0, r7
    516c:	47a8      	blx	r5
    516e:	200f      	movs	r0, #15
    5170:	47a0      	blx	r4
    5172:	f1b9 0901 	subs.w	r9, r9, #1
    5176:	d1ed      	bne.n	5154 <I2C_readEXPANDER+0xfc>
	I2C_WAITACKOP(-4);
    5178:	2101      	movs	r1, #1
    517a:	4630      	mov	r0, r6
    517c:	47c0      	blx	r8
    517e:	200f      	movs	r0, #15
    5180:	47a0      	blx	r4
    5182:	2101      	movs	r1, #1
    5184:	4638      	mov	r0, r7
    5186:	47a8      	blx	r5
    5188:	200f      	movs	r0, #15
    518a:	47a0      	blx	r4
    518c:	4630      	mov	r0, r6
    518e:	9b01      	ldr	r3, [sp, #4]
    5190:	4798      	blx	r3
    5192:	b188      	cbz	r0, 51b8 <I2C_readEXPANDER+0x160>
    5194:	2101      	movs	r1, #1
    5196:	4638      	mov	r0, r7
    5198:	47a8      	blx	r5
    519a:	200f      	movs	r0, #15
    519c:	47a0      	blx	r4
    519e:	2101      	movs	r1, #1
    51a0:	4630      	mov	r0, r6
    51a2:	47a8      	blx	r5
    51a4:	200f      	movs	r0, #15
    51a6:	47a0      	blx	r4
    51a8:	2102      	movs	r1, #2
    51aa:	4630      	mov	r0, r6
    51ac:	47c0      	blx	r8
    51ae:	200f      	movs	r0, #15
    51b0:	47a0      	blx	r4
    51b2:	f06f 0003 	mvn.w	r0, #3
    51b6:	e7be      	b.n	5136 <I2C_readEXPANDER+0xde>
    51b8:	4649      	mov	r1, r9
    51ba:	4638      	mov	r0, r7
    51bc:	47a8      	blx	r5
    51be:	200f      	movs	r0, #15
    51c0:	47a0      	blx	r4
    51c2:	2102      	movs	r1, #2
    51c4:	4630      	mov	r0, r6
    51c6:	47c0      	blx	r8
    51c8:	200f      	movs	r0, #15
    51ca:	47a0      	blx	r4
	I2C_START(-5);
    51cc:	2101      	movs	r1, #1
    51ce:	4638      	mov	r0, r7
    51d0:	47a8      	blx	r5
    51d2:	2101      	movs	r1, #1
    51d4:	4630      	mov	r0, r6
    51d6:	47a8      	blx	r5
    51d8:	2102      	movs	r1, #2
    51da:	4630      	mov	r0, r6
    51dc:	47c0      	blx	r8
    51de:	200f      	movs	r0, #15
    51e0:	47a0      	blx	r4
    51e2:	200f      	movs	r0, #15
    51e4:	47a0      	blx	r4
    51e6:	4649      	mov	r1, r9
    51e8:	4630      	mov	r0, r6
    51ea:	47a8      	blx	r5
    51ec:	200f      	movs	r0, #15
    51ee:	47a0      	blx	r4
    51f0:	4649      	mov	r1, r9
    51f2:	4638      	mov	r0, r7
    51f4:	47a8      	blx	r5
    51f6:	200f      	movs	r0, #15
    51f8:	47a0      	blx	r4
    51fa:	f04f 0907 	mov.w	r9, #7
	I2C_SENDADDR(0x41, forloop);
    51fe:	f04f 0b40 	mov.w	fp, #64	; 0x40
    5202:	f01b 0141 	ands.w	r1, fp, #65	; 0x41
    5206:	bf18      	it	ne
    5208:	2101      	movne	r1, #1
    520a:	4630      	mov	r0, r6
    520c:	47a8      	blx	r5
    520e:	200f      	movs	r0, #15
    5210:	47a0      	blx	r4
    5212:	2101      	movs	r1, #1
    5214:	4638      	mov	r0, r7
    5216:	47a8      	blx	r5
    5218:	200f      	movs	r0, #15
    521a:	47a0      	blx	r4
    521c:	2100      	movs	r1, #0
    521e:	4638      	mov	r0, r7
    5220:	47a8      	blx	r5
    5222:	200f      	movs	r0, #15
    5224:	47a0      	blx	r4
    5226:	f1b9 0901 	subs.w	r9, r9, #1
    522a:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
    522e:	d1e8      	bne.n	5202 <I2C_readEXPANDER+0x1aa>
	I2C_READ();
    5230:	2101      	movs	r1, #1
    5232:	4630      	mov	r0, r6
    5234:	47a8      	blx	r5
    5236:	200f      	movs	r0, #15
    5238:	47a0      	blx	r4
    523a:	2101      	movs	r1, #1
    523c:	4638      	mov	r0, r7
    523e:	47a8      	blx	r5
    5240:	200f      	movs	r0, #15
    5242:	47a0      	blx	r4
    5244:	4649      	mov	r1, r9
    5246:	4638      	mov	r0, r7
    5248:	47a8      	blx	r5
    524a:	200f      	movs	r0, #15
    524c:	47a0      	blx	r4
	I2C_WAITACKIP(-6);
    524e:	2101      	movs	r1, #1
    5250:	4630      	mov	r0, r6
    5252:	47c0      	blx	r8
    5254:	200f      	movs	r0, #15
    5256:	47a0      	blx	r4
    5258:	2101      	movs	r1, #1
    525a:	4638      	mov	r0, r7
    525c:	47a8      	blx	r5
    525e:	200f      	movs	r0, #15
    5260:	47a0      	blx	r4
    5262:	4630      	mov	r0, r6
    5264:	9b01      	ldr	r3, [sp, #4]
    5266:	4798      	blx	r3
    5268:	b188      	cbz	r0, 528e <I2C_readEXPANDER+0x236>
    526a:	2101      	movs	r1, #1
    526c:	4638      	mov	r0, r7
    526e:	47a8      	blx	r5
    5270:	200f      	movs	r0, #15
    5272:	47a0      	blx	r4
    5274:	2101      	movs	r1, #1
    5276:	4630      	mov	r0, r6
    5278:	47a8      	blx	r5
    527a:	200f      	movs	r0, #15
    527c:	47a0      	blx	r4
    527e:	2102      	movs	r1, #2
    5280:	4630      	mov	r0, r6
    5282:	47c0      	blx	r8
    5284:	200f      	movs	r0, #15
    5286:	47a0      	blx	r4
    5288:	f06f 0005 	mvn.w	r0, #5
    528c:	e753      	b.n	5136 <I2C_readEXPANDER+0xde>
    528e:	4649      	mov	r1, r9
    5290:	4638      	mov	r0, r7
    5292:	47a8      	blx	r5
    5294:	200f      	movs	r0, #15
    5296:	47a0      	blx	r4
	for (forloop = 0x80; forloop > 0;) {
    5298:	f04f 0b80 	mov.w	fp, #128	; 0x80
	*inputs = 0;
    529c:	f88a 9000 	strb.w	r9, [sl]
    52a0:	f04f 0908 	mov.w	r9, #8
		I2C_clockhi();
    52a4:	2101      	movs	r1, #1
    52a6:	4638      	mov	r0, r7
    52a8:	47a8      	blx	r5
    52aa:	200f      	movs	r0, #15
    52ac:	47a0      	blx	r4
		if (gpio_get_pin_level(i2csda)) {
    52ae:	4630      	mov	r0, r6
    52b0:	9b01      	ldr	r3, [sp, #4]
    52b2:	4798      	blx	r3
    52b4:	b128      	cbz	r0, 52c2 <I2C_readEXPANDER+0x26a>
			(*inputs) |= forloop;
    52b6:	f89a 3000 	ldrb.w	r3, [sl]
    52ba:	ea4b 0303 	orr.w	r3, fp, r3
    52be:	f88a 3000 	strb.w	r3, [sl]
		I2C_clocklo();
    52c2:	2100      	movs	r1, #0
    52c4:	4638      	mov	r0, r7
    52c6:	47a8      	blx	r5
    52c8:	200f      	movs	r0, #15
    52ca:	47a0      	blx	r4
	for (forloop = 0x80; forloop > 0;) {
    52cc:	f1b9 0901 	subs.w	r9, r9, #1
		forloop = forloop / 2;
    52d0:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
	for (forloop = 0x80; forloop > 0;) {
    52d4:	d1e6      	bne.n	52a4 <I2C_readEXPANDER+0x24c>
	I2C_STOP();
    52d6:	2101      	movs	r1, #1
    52d8:	4638      	mov	r0, r7
    52da:	47a8      	blx	r5
    52dc:	200f      	movs	r0, #15
    52de:	47a0      	blx	r4
    52e0:	2101      	movs	r1, #1
    52e2:	4630      	mov	r0, r6
    52e4:	47a8      	blx	r5
    52e6:	200f      	movs	r0, #15
    52e8:	47a0      	blx	r4
    52ea:	2102      	movs	r1, #2
    52ec:	4630      	mov	r0, r6
    52ee:	47c0      	blx	r8
    52f0:	200f      	movs	r0, #15
    52f2:	47a0      	blx	r4
	return 0;
    52f4:	4648      	mov	r0, r9
    52f6:	e71e      	b.n	5136 <I2C_readEXPANDER+0xde>
		return -1;	
    52f8:	f04f 30ff 	mov.w	r0, #4294967295
    52fc:	e71b      	b.n	5136 <I2C_readEXPANDER+0xde>
    52fe:	bf00      	nop
    5300:	0000442d 	.word	0x0000442d
    5304:	00001229 	.word	0x00001229
    5308:	00004495 	.word	0x00004495
    530c:	0000444d 	.word	0x0000444d

00005310 <I2C_setGAIN>:
// * CALLED BY:			  main()                                                                                                       *
// * CALLS:		          No function. ALL macros defined in this function file.                                                       *
// * --------------------------------------------------------------------------------------------------------------------------------- *
int I2C_setGAIN(uint8_t sda,  uint8_t clk, unsigned char dac)

{
    5310:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5314:	460f      	mov	r7, r1
    5316:	4606      	mov	r6, r0
  	uint8_t     		i2csda, i2cclk;
    unsigned char		forloop;

	/* Open an I2C channel, send address 0x60, index register 0x00 then send the 8-bit "dac" value */
	I2C_OPEN(sda, clk);
    I2C_START(-1);
    5318:	4d7a      	ldr	r5, [pc, #488]	; (5504 <I2C_setGAIN+0x1f4>)
{
    531a:	9201      	str	r2, [sp, #4]
    I2C_START(-1);
    531c:	2101      	movs	r1, #1
    531e:	4638      	mov	r0, r7
    5320:	47a8      	blx	r5
    5322:	2101      	movs	r1, #1
    5324:	4630      	mov	r0, r6
    5326:	47a8      	blx	r5
    5328:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 550c <I2C_setGAIN+0x1fc>
    532c:	4c76      	ldr	r4, [pc, #472]	; (5508 <I2C_setGAIN+0x1f8>)
    532e:	2102      	movs	r1, #2
    5330:	4630      	mov	r0, r6
    5332:	47c0      	blx	r8
    5334:	200f      	movs	r0, #15
    5336:	47a0      	blx	r4
    5338:	200f      	movs	r0, #15
    533a:	47a0      	blx	r4
    533c:	2100      	movs	r1, #0
    533e:	4630      	mov	r0, r6
    5340:	47a8      	blx	r5
    5342:	200f      	movs	r0, #15
    5344:	47a0      	blx	r4
    5346:	2100      	movs	r1, #0
    5348:	4638      	mov	r0, r7
    534a:	47a8      	blx	r5
    534c:	200f      	movs	r0, #15
    534e:	47a0      	blx	r4
    5350:	f04f 0907 	mov.w	r9, #7
    I2C_SENDADDR(0x60, forloop);
    5354:	f04f 0a40 	mov.w	sl, #64	; 0x40
    5358:	f01a 0160 	ands.w	r1, sl, #96	; 0x60
    535c:	bf18      	it	ne
    535e:	2101      	movne	r1, #1
    5360:	4630      	mov	r0, r6
    5362:	47a8      	blx	r5
    5364:	200f      	movs	r0, #15
    5366:	47a0      	blx	r4
    5368:	2101      	movs	r1, #1
    536a:	4638      	mov	r0, r7
    536c:	47a8      	blx	r5
    536e:	200f      	movs	r0, #15
    5370:	47a0      	blx	r4
    5372:	2100      	movs	r1, #0
    5374:	4638      	mov	r0, r7
    5376:	47a8      	blx	r5
    5378:	200f      	movs	r0, #15
    537a:	47a0      	blx	r4
    537c:	f1b9 0901 	subs.w	r9, r9, #1
    5380:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
    5384:	d1e8      	bne.n	5358 <I2C_setGAIN+0x48>
    I2C_WRITE();
    5386:	4649      	mov	r1, r9
    5388:	4630      	mov	r0, r6
    538a:	47a8      	blx	r5
    538c:	200f      	movs	r0, #15
    538e:	47a0      	blx	r4
    5390:	2101      	movs	r1, #1
    5392:	4638      	mov	r0, r7
    5394:	47a8      	blx	r5
    5396:	200f      	movs	r0, #15
    5398:	47a0      	blx	r4
    539a:	4649      	mov	r1, r9
    539c:	4638      	mov	r0, r7
    539e:	47a8      	blx	r5
    53a0:	200f      	movs	r0, #15
    53a2:	47a0      	blx	r4
    I2C_WAITACKOP(-2);
    53a4:	2101      	movs	r1, #1
    53a6:	4630      	mov	r0, r6
    53a8:	47c0      	blx	r8
    53aa:	200f      	movs	r0, #15
    53ac:	47a0      	blx	r4
    53ae:	2101      	movs	r1, #1
    53b0:	4638      	mov	r0, r7
    53b2:	47a8      	blx	r5
    53b4:	200f      	movs	r0, #15
    53b6:	47a0      	blx	r4
    53b8:	f8df a154 	ldr.w	sl, [pc, #340]	; 5510 <I2C_setGAIN+0x200>
    53bc:	4630      	mov	r0, r6
    53be:	47d0      	blx	sl
    53c0:	b198      	cbz	r0, 53ea <I2C_setGAIN+0xda>
    53c2:	2101      	movs	r1, #1
    53c4:	4638      	mov	r0, r7
    53c6:	47a8      	blx	r5
    53c8:	200f      	movs	r0, #15
    53ca:	47a0      	blx	r4
    53cc:	2101      	movs	r1, #1
    53ce:	4630      	mov	r0, r6
    53d0:	47a8      	blx	r5
    53d2:	200f      	movs	r0, #15
    53d4:	47a0      	blx	r4
    53d6:	2102      	movs	r1, #2
    53d8:	4630      	mov	r0, r6
    53da:	47c0      	blx	r8
    53dc:	200f      	movs	r0, #15
    53de:	47a0      	blx	r4
    53e0:	f06f 0001 	mvn.w	r0, #1
	/* If successful, and code execution got here, the close the I2C channel */
    I2C_STOP();
	I2C_CLOSE();
	
	return 0;
}
    53e4:	b003      	add	sp, #12
    53e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    I2C_WAITACKOP(-2);
    53ea:	4649      	mov	r1, r9
    53ec:	4638      	mov	r0, r7
    53ee:	47a8      	blx	r5
    53f0:	200f      	movs	r0, #15
    53f2:	47a0      	blx	r4
    53f4:	2102      	movs	r1, #2
    53f6:	4630      	mov	r0, r6
    53f8:	47c0      	blx	r8
    53fa:	200f      	movs	r0, #15
    53fc:	47a0      	blx	r4
    53fe:	f04f 0908 	mov.w	r9, #8
    I2C_SENDDATA(0x00, forloop);
    5402:	2100      	movs	r1, #0
    5404:	4630      	mov	r0, r6
    5406:	47a8      	blx	r5
    5408:	200f      	movs	r0, #15
    540a:	47a0      	blx	r4
    540c:	2101      	movs	r1, #1
    540e:	4638      	mov	r0, r7
    5410:	47a8      	blx	r5
    5412:	200f      	movs	r0, #15
    5414:	47a0      	blx	r4
    5416:	2100      	movs	r1, #0
    5418:	4638      	mov	r0, r7
    541a:	47a8      	blx	r5
    541c:	200f      	movs	r0, #15
    541e:	47a0      	blx	r4
    5420:	f1b9 0901 	subs.w	r9, r9, #1
    5424:	d1ed      	bne.n	5402 <I2C_setGAIN+0xf2>
    I2C_WAITACKOP(-3);
    5426:	2101      	movs	r1, #1
    5428:	4630      	mov	r0, r6
    542a:	47c0      	blx	r8
    542c:	200f      	movs	r0, #15
    542e:	47a0      	blx	r4
    5430:	2101      	movs	r1, #1
    5432:	4638      	mov	r0, r7
    5434:	47a8      	blx	r5
    5436:	200f      	movs	r0, #15
    5438:	47a0      	blx	r4
    543a:	4630      	mov	r0, r6
    543c:	47d0      	blx	sl
    543e:	b188      	cbz	r0, 5464 <I2C_setGAIN+0x154>
    5440:	2101      	movs	r1, #1
    5442:	4638      	mov	r0, r7
    5444:	47a8      	blx	r5
    5446:	200f      	movs	r0, #15
    5448:	47a0      	blx	r4
    544a:	2101      	movs	r1, #1
    544c:	4630      	mov	r0, r6
    544e:	47a8      	blx	r5
    5450:	200f      	movs	r0, #15
    5452:	47a0      	blx	r4
    5454:	2102      	movs	r1, #2
    5456:	4630      	mov	r0, r6
    5458:	47c0      	blx	r8
    545a:	200f      	movs	r0, #15
    545c:	47a0      	blx	r4
    545e:	f06f 0002 	mvn.w	r0, #2
    5462:	e7bf      	b.n	53e4 <I2C_setGAIN+0xd4>
    5464:	4649      	mov	r1, r9
    5466:	4638      	mov	r0, r7
    5468:	47a8      	blx	r5
    546a:	200f      	movs	r0, #15
    546c:	47a0      	blx	r4
    546e:	2102      	movs	r1, #2
    5470:	4630      	mov	r0, r6
    5472:	47c0      	blx	r8
    5474:	200f      	movs	r0, #15
    5476:	47a0      	blx	r4
    5478:	f04f 0908 	mov.w	r9, #8
	I2C_SENDDATA(dac, forloop);
    547c:	f04f 0b80 	mov.w	fp, #128	; 0x80
    5480:	9b01      	ldr	r3, [sp, #4]
    5482:	ea13 010b 	ands.w	r1, r3, fp
    5486:	bf18      	it	ne
    5488:	2101      	movne	r1, #1
    548a:	4630      	mov	r0, r6
    548c:	47a8      	blx	r5
    548e:	200f      	movs	r0, #15
    5490:	47a0      	blx	r4
    5492:	2101      	movs	r1, #1
    5494:	4638      	mov	r0, r7
    5496:	47a8      	blx	r5
    5498:	200f      	movs	r0, #15
    549a:	47a0      	blx	r4
    549c:	2100      	movs	r1, #0
    549e:	4638      	mov	r0, r7
    54a0:	47a8      	blx	r5
    54a2:	200f      	movs	r0, #15
    54a4:	47a0      	blx	r4
    54a6:	f1b9 0901 	subs.w	r9, r9, #1
    54aa:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
    54ae:	d1e7      	bne.n	5480 <I2C_setGAIN+0x170>
	I2C_WAITACKOP(-3);
    54b0:	2101      	movs	r1, #1
    54b2:	4630      	mov	r0, r6
    54b4:	47c0      	blx	r8
    54b6:	200f      	movs	r0, #15
    54b8:	47a0      	blx	r4
    54ba:	2101      	movs	r1, #1
    54bc:	4638      	mov	r0, r7
    54be:	47a8      	blx	r5
    54c0:	200f      	movs	r0, #15
    54c2:	47a0      	blx	r4
    54c4:	4630      	mov	r0, r6
    54c6:	47d0      	blx	sl
    54c8:	2800      	cmp	r0, #0
    54ca:	d1b9      	bne.n	5440 <I2C_setGAIN+0x130>
    54cc:	4649      	mov	r1, r9
    54ce:	4638      	mov	r0, r7
    54d0:	47a8      	blx	r5
    54d2:	200f      	movs	r0, #15
    54d4:	47a0      	blx	r4
    54d6:	2102      	movs	r1, #2
    54d8:	4630      	mov	r0, r6
    54da:	47c0      	blx	r8
    54dc:	200f      	movs	r0, #15
    54de:	47a0      	blx	r4
    I2C_STOP();
    54e0:	2101      	movs	r1, #1
    54e2:	4638      	mov	r0, r7
    54e4:	47a8      	blx	r5
    54e6:	200f      	movs	r0, #15
    54e8:	47a0      	blx	r4
    54ea:	2101      	movs	r1, #1
    54ec:	4630      	mov	r0, r6
    54ee:	47a8      	blx	r5
    54f0:	200f      	movs	r0, #15
    54f2:	47a0      	blx	r4
    54f4:	2102      	movs	r1, #2
    54f6:	4630      	mov	r0, r6
    54f8:	47c0      	blx	r8
    54fa:	200f      	movs	r0, #15
    54fc:	47a0      	blx	r4
	return 0;
    54fe:	4648      	mov	r0, r9
    5500:	e770      	b.n	53e4 <I2C_setGAIN+0xd4>
    5502:	bf00      	nop
    5504:	0000442d 	.word	0x0000442d
    5508:	00001229 	.word	0x00001229
    550c:	00004495 	.word	0x00004495
    5510:	0000444d 	.word	0x0000444d

00005514 <I2C_getTEMPandMOISTURE>:
// * CALLED BY:			  main()                                                                                                                         *
// * CALLS:		          No function. ALL macros defined in this function file.                                                                         *
// * --------------------------------------------------------------------------------------------------------------------------------------------------- *
int I2C_getTEMPandMOISTURE(uint8_t sda,  uint8_t clk, unsigned char *th, unsigned char *tl, unsigned char *hh, unsigned char *hl)

{
    5514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5518:	b085      	sub	sp, #20
    551a:	4604      	mov	r4, r0
    551c:	460d      	mov	r5, r1
    551e:	469a      	mov	sl, r3
	uint8_t     		i2csda, i2cclk;
	unsigned char		forloop;
	
	/* Assert and bounds check the return parameter variables */
	if ((!th) || (!tl) || (!hh) || (!hl)) {
    5520:	9203      	str	r2, [sp, #12]
    5522:	2a00      	cmp	r2, #0
    5524:	f000 85ce 	beq.w	60c4 <I2C_getTEMPandMOISTURE+0xbb0>
    5528:	f1ba 0f00 	cmp.w	sl, #0
    552c:	f000 85ca 	beq.w	60c4 <I2C_getTEMPandMOISTURE+0xbb0>
    5530:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5532:	2b00      	cmp	r3, #0
    5534:	f000 85c6 	beq.w	60c4 <I2C_getTEMPandMOISTURE+0xbb0>
    5538:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    553a:	2b00      	cmp	r3, #0
    553c:	f000 85c2 	beq.w	60c4 <I2C_getTEMPandMOISTURE+0xbb0>
		return -1;
	}

	/* Open an I2C channel, send address 0x40, index register 0x0F to trigger-conversion */
	I2C_OPEN(sda, clk);
	I2C_START(-2);
    5540:	4f5a      	ldr	r7, [pc, #360]	; (56ac <I2C_getTEMPandMOISTURE+0x198>)
    5542:	f8df b174 	ldr.w	fp, [pc, #372]	; 56b8 <I2C_getTEMPandMOISTURE+0x1a4>
    5546:	4e5a      	ldr	r6, [pc, #360]	; (56b0 <I2C_getTEMPandMOISTURE+0x19c>)
    5548:	2101      	movs	r1, #1
    554a:	4628      	mov	r0, r5
    554c:	47b8      	blx	r7
    554e:	2101      	movs	r1, #1
    5550:	4620      	mov	r0, r4
    5552:	47b8      	blx	r7
    5554:	2102      	movs	r1, #2
    5556:	4620      	mov	r0, r4
    5558:	47d8      	blx	fp
    555a:	200f      	movs	r0, #15
    555c:	47b0      	blx	r6
    555e:	200f      	movs	r0, #15
    5560:	47b0      	blx	r6
    5562:	2100      	movs	r1, #0
    5564:	4620      	mov	r0, r4
    5566:	47b8      	blx	r7
    5568:	200f      	movs	r0, #15
    556a:	47b0      	blx	r6
    556c:	2100      	movs	r1, #0
    556e:	4628      	mov	r0, r5
    5570:	47b8      	blx	r7
    5572:	200f      	movs	r0, #15
    5574:	47b0      	blx	r6
    5576:	f04f 0807 	mov.w	r8, #7
	I2C_SENDADDR(0x40, forloop);
    557a:	f04f 0940 	mov.w	r9, #64	; 0x40
    557e:	f8cd b004 	str.w	fp, [sp, #4]
    5582:	f019 0140 	ands.w	r1, r9, #64	; 0x40
    5586:	bf18      	it	ne
    5588:	2101      	movne	r1, #1
    558a:	4620      	mov	r0, r4
    558c:	47b8      	blx	r7
    558e:	200f      	movs	r0, #15
    5590:	47b0      	blx	r6
    5592:	2101      	movs	r1, #1
    5594:	4628      	mov	r0, r5
    5596:	47b8      	blx	r7
    5598:	200f      	movs	r0, #15
    559a:	47b0      	blx	r6
    559c:	2100      	movs	r1, #0
    559e:	4628      	mov	r0, r5
    55a0:	47b8      	blx	r7
    55a2:	200f      	movs	r0, #15
    55a4:	47b0      	blx	r6
    55a6:	f1b8 0801 	subs.w	r8, r8, #1
    55aa:	ea4f 0959 	mov.w	r9, r9, lsr #1
    55ae:	d1e8      	bne.n	5582 <I2C_getTEMPandMOISTURE+0x6e>
	I2C_WRITE();
    55b0:	4641      	mov	r1, r8
    55b2:	4620      	mov	r0, r4
    55b4:	47b8      	blx	r7
    55b6:	200f      	movs	r0, #15
    55b8:	47b0      	blx	r6
    55ba:	2101      	movs	r1, #1
    55bc:	4628      	mov	r0, r5
    55be:	47b8      	blx	r7
    55c0:	200f      	movs	r0, #15
    55c2:	47b0      	blx	r6
    55c4:	4641      	mov	r1, r8
    55c6:	4628      	mov	r0, r5
    55c8:	47b8      	blx	r7
    55ca:	200f      	movs	r0, #15
    55cc:	47b0      	blx	r6
	I2C_WAITACKOP(-3);
    55ce:	9b01      	ldr	r3, [sp, #4]
    55d0:	2101      	movs	r1, #1
    55d2:	4620      	mov	r0, r4
    55d4:	4798      	blx	r3
    55d6:	200f      	movs	r0, #15
    55d8:	47b0      	blx	r6
    55da:	2101      	movs	r1, #1
    55dc:	4628      	mov	r0, r5
    55de:	47b8      	blx	r7
    55e0:	200f      	movs	r0, #15
    55e2:	47b0      	blx	r6
    55e4:	4620      	mov	r0, r4
    55e6:	4b33      	ldr	r3, [pc, #204]	; (56b4 <I2C_getTEMPandMOISTURE+0x1a0>)
    55e8:	4798      	blx	r3
    55ea:	b1a8      	cbz	r0, 5618 <I2C_getTEMPandMOISTURE+0x104>
    55ec:	2101      	movs	r1, #1
    55ee:	4628      	mov	r0, r5
    55f0:	47b8      	blx	r7
    55f2:	4d2f      	ldr	r5, [pc, #188]	; (56b0 <I2C_getTEMPandMOISTURE+0x19c>)
    55f4:	200f      	movs	r0, #15
    55f6:	47a8      	blx	r5
    55f8:	2101      	movs	r1, #1
    55fa:	4620      	mov	r0, r4
    55fc:	47b8      	blx	r7
    55fe:	200f      	movs	r0, #15
    5600:	47a8      	blx	r5
    5602:	2102      	movs	r1, #2
    5604:	4620      	mov	r0, r4
    5606:	9b01      	ldr	r3, [sp, #4]
    5608:	4798      	blx	r3
    560a:	200f      	movs	r0, #15
    560c:	47a8      	blx	r5
    560e:	f06f 0002 	mvn.w	r0, #2
	I2C_STOP();
	I2C_CLOSE();
	/* If successful, and code execution got here, the close the I2C channel */
	
	return 0;
}
    5612:	b005      	add	sp, #20
    5614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	I2C_WAITACKOP(-3);
    5618:	4641      	mov	r1, r8
    561a:	4628      	mov	r0, r5
    561c:	47b8      	blx	r7
    561e:	200f      	movs	r0, #15
    5620:	47b0      	blx	r6
    5622:	2102      	movs	r1, #2
    5624:	4620      	mov	r0, r4
    5626:	9b01      	ldr	r3, [sp, #4]
    5628:	4798      	blx	r3
    562a:	200f      	movs	r0, #15
    562c:	47b0      	blx	r6
    562e:	4e20      	ldr	r6, [pc, #128]	; (56b0 <I2C_getTEMPandMOISTURE+0x19c>)
    5630:	f04f 0808 	mov.w	r8, #8
	I2C_SENDDATA(0x0F, forloop);
    5634:	f04f 0980 	mov.w	r9, #128	; 0x80
    5638:	f019 010f 	ands.w	r1, r9, #15
    563c:	bf18      	it	ne
    563e:	2101      	movne	r1, #1
    5640:	4620      	mov	r0, r4
    5642:	47b8      	blx	r7
    5644:	200f      	movs	r0, #15
    5646:	47b0      	blx	r6
    5648:	2101      	movs	r1, #1
    564a:	4628      	mov	r0, r5
    564c:	47b8      	blx	r7
    564e:	200f      	movs	r0, #15
    5650:	47b0      	blx	r6
    5652:	2100      	movs	r1, #0
    5654:	4628      	mov	r0, r5
    5656:	47b8      	blx	r7
    5658:	200f      	movs	r0, #15
    565a:	47b0      	blx	r6
    565c:	f1b8 0801 	subs.w	r8, r8, #1
    5660:	ea4f 0959 	mov.w	r9, r9, lsr #1
    5664:	d1e8      	bne.n	5638 <I2C_getTEMPandMOISTURE+0x124>
	I2C_WAITACKOP(-4);
    5666:	9b01      	ldr	r3, [sp, #4]
    5668:	2101      	movs	r1, #1
    566a:	4620      	mov	r0, r4
    566c:	4798      	blx	r3
    566e:	200f      	movs	r0, #15
    5670:	47b0      	blx	r6
    5672:	2101      	movs	r1, #1
    5674:	4628      	mov	r0, r5
    5676:	47b8      	blx	r7
    5678:	200f      	movs	r0, #15
    567a:	47b0      	blx	r6
    567c:	4620      	mov	r0, r4
    567e:	4b0d      	ldr	r3, [pc, #52]	; (56b4 <I2C_getTEMPandMOISTURE+0x1a0>)
    5680:	4798      	blx	r3
    5682:	b1d8      	cbz	r0, 56bc <I2C_getTEMPandMOISTURE+0x1a8>
    5684:	2101      	movs	r1, #1
    5686:	4628      	mov	r0, r5
    5688:	47b8      	blx	r7
    568a:	4d09      	ldr	r5, [pc, #36]	; (56b0 <I2C_getTEMPandMOISTURE+0x19c>)
    568c:	200f      	movs	r0, #15
    568e:	47a8      	blx	r5
    5690:	2101      	movs	r1, #1
    5692:	4620      	mov	r0, r4
    5694:	47b8      	blx	r7
    5696:	200f      	movs	r0, #15
    5698:	47a8      	blx	r5
    569a:	2102      	movs	r1, #2
    569c:	4620      	mov	r0, r4
    569e:	9b01      	ldr	r3, [sp, #4]
    56a0:	4798      	blx	r3
    56a2:	200f      	movs	r0, #15
    56a4:	47a8      	blx	r5
    56a6:	f06f 0003 	mvn.w	r0, #3
    56aa:	e7b2      	b.n	5612 <I2C_getTEMPandMOISTURE+0xfe>
    56ac:	0000442d 	.word	0x0000442d
    56b0:	00001229 	.word	0x00001229
    56b4:	0000444d 	.word	0x0000444d
    56b8:	00004495 	.word	0x00004495
    56bc:	4641      	mov	r1, r8
    56be:	4628      	mov	r0, r5
    56c0:	47b8      	blx	r7
    56c2:	200f      	movs	r0, #15
    56c4:	47b0      	blx	r6
    56c6:	2102      	movs	r1, #2
    56c8:	4620      	mov	r0, r4
    56ca:	9b01      	ldr	r3, [sp, #4]
    56cc:	4798      	blx	r3
    56ce:	200f      	movs	r0, #15
    56d0:	47b0      	blx	r6
    56d2:	4e9e      	ldr	r6, [pc, #632]	; (594c <I2C_getTEMPandMOISTURE+0x438>)
    56d4:	f04f 0808 	mov.w	r8, #8
	I2C_SENDDATA(0x01, forloop);
    56d8:	f04f 0980 	mov.w	r9, #128	; 0x80
    56dc:	f019 0101 	ands.w	r1, r9, #1
    56e0:	bf18      	it	ne
    56e2:	2101      	movne	r1, #1
    56e4:	4620      	mov	r0, r4
    56e6:	47b8      	blx	r7
    56e8:	200f      	movs	r0, #15
    56ea:	47b0      	blx	r6
    56ec:	2101      	movs	r1, #1
    56ee:	4628      	mov	r0, r5
    56f0:	47b8      	blx	r7
    56f2:	200f      	movs	r0, #15
    56f4:	47b0      	blx	r6
    56f6:	2100      	movs	r1, #0
    56f8:	4628      	mov	r0, r5
    56fa:	47b8      	blx	r7
    56fc:	200f      	movs	r0, #15
    56fe:	47b0      	blx	r6
    5700:	f1b8 0801 	subs.w	r8, r8, #1
    5704:	ea4f 0959 	mov.w	r9, r9, lsr #1
    5708:	d1e8      	bne.n	56dc <I2C_getTEMPandMOISTURE+0x1c8>
	I2C_WAITACKOP(-4);
    570a:	9b01      	ldr	r3, [sp, #4]
    570c:	2101      	movs	r1, #1
    570e:	4620      	mov	r0, r4
    5710:	4798      	blx	r3
    5712:	200f      	movs	r0, #15
    5714:	47b0      	blx	r6
    5716:	2101      	movs	r1, #1
    5718:	4628      	mov	r0, r5
    571a:	47b8      	blx	r7
    571c:	200f      	movs	r0, #15
    571e:	47b0      	blx	r6
    5720:	4620      	mov	r0, r4
    5722:	4b8b      	ldr	r3, [pc, #556]	; (5950 <I2C_getTEMPandMOISTURE+0x43c>)
    5724:	4798      	blx	r3
    5726:	2800      	cmp	r0, #0
    5728:	d1ac      	bne.n	5684 <I2C_getTEMPandMOISTURE+0x170>
    572a:	4641      	mov	r1, r8
    572c:	4628      	mov	r0, r5
    572e:	47b8      	blx	r7
    5730:	200f      	movs	r0, #15
    5732:	47b0      	blx	r6
    5734:	9b01      	ldr	r3, [sp, #4]
    5736:	2102      	movs	r1, #2
    5738:	4620      	mov	r0, r4
    573a:	4798      	blx	r3
    573c:	200f      	movs	r0, #15
    573e:	47b0      	blx	r6
	I2C_STOP();
    5740:	2101      	movs	r1, #1
    5742:	4628      	mov	r0, r5
    5744:	47b8      	blx	r7
    5746:	200f      	movs	r0, #15
    5748:	47b0      	blx	r6
    574a:	2101      	movs	r1, #1
    574c:	4620      	mov	r0, r4
    574e:	47b8      	blx	r7
    5750:	200f      	movs	r0, #15
    5752:	47b0      	blx	r6
    5754:	9b01      	ldr	r3, [sp, #4]
    5756:	2102      	movs	r1, #2
    5758:	4620      	mov	r0, r4
    575a:	4798      	blx	r3
    575c:	200f      	movs	r0, #15
    575e:	47b0      	blx	r6
	I2C_START(-2);
    5760:	2101      	movs	r1, #1
    5762:	4628      	mov	r0, r5
    5764:	47b8      	blx	r7
    5766:	2101      	movs	r1, #1
    5768:	4620      	mov	r0, r4
    576a:	47b8      	blx	r7
    576c:	9b01      	ldr	r3, [sp, #4]
    576e:	2102      	movs	r1, #2
    5770:	4620      	mov	r0, r4
    5772:	4798      	blx	r3
    5774:	200f      	movs	r0, #15
    5776:	47b0      	blx	r6
    5778:	200f      	movs	r0, #15
    577a:	47b0      	blx	r6
    577c:	4641      	mov	r1, r8
    577e:	4620      	mov	r0, r4
    5780:	47b8      	blx	r7
    5782:	200f      	movs	r0, #15
    5784:	47b0      	blx	r6
    5786:	4641      	mov	r1, r8
    5788:	4628      	mov	r0, r5
    578a:	47b8      	blx	r7
    578c:	200f      	movs	r0, #15
    578e:	47b0      	blx	r6
    5790:	4e6e      	ldr	r6, [pc, #440]	; (594c <I2C_getTEMPandMOISTURE+0x438>)
    5792:	f04f 0807 	mov.w	r8, #7
	I2C_SENDADDR(0x40, forloop);
    5796:	f04f 0940 	mov.w	r9, #64	; 0x40
    579a:	f019 0140 	ands.w	r1, r9, #64	; 0x40
    579e:	bf18      	it	ne
    57a0:	2101      	movne	r1, #1
    57a2:	4620      	mov	r0, r4
    57a4:	47b8      	blx	r7
    57a6:	200f      	movs	r0, #15
    57a8:	47b0      	blx	r6
    57aa:	2101      	movs	r1, #1
    57ac:	4628      	mov	r0, r5
    57ae:	47b8      	blx	r7
    57b0:	200f      	movs	r0, #15
    57b2:	47b0      	blx	r6
    57b4:	2100      	movs	r1, #0
    57b6:	4628      	mov	r0, r5
    57b8:	47b8      	blx	r7
    57ba:	200f      	movs	r0, #15
    57bc:	47b0      	blx	r6
    57be:	f1b8 0801 	subs.w	r8, r8, #1
    57c2:	ea4f 0959 	mov.w	r9, r9, lsr #1
    57c6:	d1e8      	bne.n	579a <I2C_getTEMPandMOISTURE+0x286>
	I2C_WRITE();
    57c8:	4641      	mov	r1, r8
    57ca:	4620      	mov	r0, r4
    57cc:	47b8      	blx	r7
    57ce:	200f      	movs	r0, #15
    57d0:	47b0      	blx	r6
    57d2:	2101      	movs	r1, #1
    57d4:	4628      	mov	r0, r5
    57d6:	47b8      	blx	r7
    57d8:	200f      	movs	r0, #15
    57da:	47b0      	blx	r6
    57dc:	4641      	mov	r1, r8
    57de:	4628      	mov	r0, r5
    57e0:	47b8      	blx	r7
    57e2:	200f      	movs	r0, #15
    57e4:	47b0      	blx	r6
	I2C_WAITACKOP(-3);
    57e6:	9b01      	ldr	r3, [sp, #4]
    57e8:	2101      	movs	r1, #1
    57ea:	4620      	mov	r0, r4
    57ec:	4798      	blx	r3
    57ee:	200f      	movs	r0, #15
    57f0:	47b0      	blx	r6
    57f2:	2101      	movs	r1, #1
    57f4:	4628      	mov	r0, r5
    57f6:	47b8      	blx	r7
    57f8:	200f      	movs	r0, #15
    57fa:	47b0      	blx	r6
    57fc:	4620      	mov	r0, r4
    57fe:	4b54      	ldr	r3, [pc, #336]	; (5950 <I2C_getTEMPandMOISTURE+0x43c>)
    5800:	4798      	blx	r3
    5802:	2800      	cmp	r0, #0
    5804:	f47f aef2 	bne.w	55ec <I2C_getTEMPandMOISTURE+0xd8>
    5808:	4641      	mov	r1, r8
    580a:	4628      	mov	r0, r5
    580c:	47b8      	blx	r7
    580e:	200f      	movs	r0, #15
    5810:	47b0      	blx	r6
    5812:	2102      	movs	r1, #2
    5814:	4620      	mov	r0, r4
    5816:	9b01      	ldr	r3, [sp, #4]
    5818:	4798      	blx	r3
    581a:	200f      	movs	r0, #15
    581c:	47b0      	blx	r6
    581e:	f04f 0808 	mov.w	r8, #8
	I2C_SENDDATA(0x00, forloop);
    5822:	2100      	movs	r1, #0
    5824:	4620      	mov	r0, r4
    5826:	47b8      	blx	r7
    5828:	200f      	movs	r0, #15
    582a:	47b0      	blx	r6
    582c:	2101      	movs	r1, #1
    582e:	4628      	mov	r0, r5
    5830:	47b8      	blx	r7
    5832:	200f      	movs	r0, #15
    5834:	47b0      	blx	r6
    5836:	2100      	movs	r1, #0
    5838:	4628      	mov	r0, r5
    583a:	47b8      	blx	r7
    583c:	200f      	movs	r0, #15
    583e:	47b0      	blx	r6
    5840:	f1b8 0801 	subs.w	r8, r8, #1
    5844:	d1ed      	bne.n	5822 <I2C_getTEMPandMOISTURE+0x30e>
	I2C_WAITACKOP(-4);
    5846:	9b01      	ldr	r3, [sp, #4]
    5848:	2101      	movs	r1, #1
    584a:	4620      	mov	r0, r4
    584c:	4798      	blx	r3
    584e:	200f      	movs	r0, #15
    5850:	47b0      	blx	r6
    5852:	2101      	movs	r1, #1
    5854:	4628      	mov	r0, r5
    5856:	47b8      	blx	r7
    5858:	200f      	movs	r0, #15
    585a:	47b0      	blx	r6
    585c:	4620      	mov	r0, r4
    585e:	4b3c      	ldr	r3, [pc, #240]	; (5950 <I2C_getTEMPandMOISTURE+0x43c>)
    5860:	4798      	blx	r3
    5862:	2800      	cmp	r0, #0
    5864:	f47f af0e 	bne.w	5684 <I2C_getTEMPandMOISTURE+0x170>
    5868:	4641      	mov	r1, r8
    586a:	4628      	mov	r0, r5
    586c:	47b8      	blx	r7
    586e:	200f      	movs	r0, #15
    5870:	47b0      	blx	r6
    5872:	9b01      	ldr	r3, [sp, #4]
    5874:	2102      	movs	r1, #2
    5876:	4620      	mov	r0, r4
    5878:	4798      	blx	r3
    587a:	200f      	movs	r0, #15
    587c:	47b0      	blx	r6
	I2C_START(-5);
    587e:	2101      	movs	r1, #1
    5880:	4628      	mov	r0, r5
    5882:	47b8      	blx	r7
    5884:	2101      	movs	r1, #1
    5886:	4620      	mov	r0, r4
    5888:	47b8      	blx	r7
    588a:	9b01      	ldr	r3, [sp, #4]
    588c:	2102      	movs	r1, #2
    588e:	4620      	mov	r0, r4
    5890:	4798      	blx	r3
    5892:	200f      	movs	r0, #15
    5894:	47b0      	blx	r6
    5896:	200f      	movs	r0, #15
    5898:	47b0      	blx	r6
    589a:	4641      	mov	r1, r8
    589c:	4620      	mov	r0, r4
    589e:	47b8      	blx	r7
    58a0:	200f      	movs	r0, #15
    58a2:	47b0      	blx	r6
    58a4:	4641      	mov	r1, r8
    58a6:	4628      	mov	r0, r5
    58a8:	47b8      	blx	r7
    58aa:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 594c <I2C_getTEMPandMOISTURE+0x438>
    58ae:	200f      	movs	r0, #15
    58b0:	47b0      	blx	r6
    58b2:	f04f 0907 	mov.w	r9, #7
	I2C_SENDADDR(0x40, forloop);
    58b6:	2640      	movs	r6, #64	; 0x40
    58b8:	f016 0140 	ands.w	r1, r6, #64	; 0x40
    58bc:	bf18      	it	ne
    58be:	2101      	movne	r1, #1
    58c0:	4620      	mov	r0, r4
    58c2:	47b8      	blx	r7
    58c4:	200f      	movs	r0, #15
    58c6:	47c0      	blx	r8
    58c8:	2101      	movs	r1, #1
    58ca:	4628      	mov	r0, r5
    58cc:	47b8      	blx	r7
    58ce:	200f      	movs	r0, #15
    58d0:	47c0      	blx	r8
    58d2:	2100      	movs	r1, #0
    58d4:	4628      	mov	r0, r5
    58d6:	47b8      	blx	r7
    58d8:	200f      	movs	r0, #15
    58da:	47c0      	blx	r8
    58dc:	f1b9 0901 	subs.w	r9, r9, #1
    58e0:	ea4f 0656 	mov.w	r6, r6, lsr #1
    58e4:	d1e8      	bne.n	58b8 <I2C_getTEMPandMOISTURE+0x3a4>
	I2C_READ();
    58e6:	2101      	movs	r1, #1
    58e8:	4620      	mov	r0, r4
    58ea:	47b8      	blx	r7
    58ec:	200f      	movs	r0, #15
    58ee:	47c0      	blx	r8
    58f0:	2101      	movs	r1, #1
    58f2:	4628      	mov	r0, r5
    58f4:	47b8      	blx	r7
    58f6:	200f      	movs	r0, #15
    58f8:	47c0      	blx	r8
    58fa:	4649      	mov	r1, r9
    58fc:	4628      	mov	r0, r5
    58fe:	47b8      	blx	r7
    5900:	200f      	movs	r0, #15
    5902:	47c0      	blx	r8
	I2C_WAITACKIP(-6);
    5904:	9b01      	ldr	r3, [sp, #4]
    5906:	f8df b048 	ldr.w	fp, [pc, #72]	; 5950 <I2C_getTEMPandMOISTURE+0x43c>
    590a:	4e10      	ldr	r6, [pc, #64]	; (594c <I2C_getTEMPandMOISTURE+0x438>)
    590c:	2101      	movs	r1, #1
    590e:	4620      	mov	r0, r4
    5910:	4798      	blx	r3
    5912:	200f      	movs	r0, #15
    5914:	47c0      	blx	r8
    5916:	2101      	movs	r1, #1
    5918:	4628      	mov	r0, r5
    591a:	47b8      	blx	r7
    591c:	200f      	movs	r0, #15
    591e:	47c0      	blx	r8
    5920:	4620      	mov	r0, r4
    5922:	47d8      	blx	fp
    5924:	b1b0      	cbz	r0, 5954 <I2C_getTEMPandMOISTURE+0x440>
    5926:	2101      	movs	r1, #1
    5928:	4628      	mov	r0, r5
    592a:	47b8      	blx	r7
    592c:	200f      	movs	r0, #15
    592e:	47b0      	blx	r6
    5930:	2101      	movs	r1, #1
    5932:	4620      	mov	r0, r4
    5934:	47b8      	blx	r7
    5936:	200f      	movs	r0, #15
    5938:	47b0      	blx	r6
    593a:	2102      	movs	r1, #2
    593c:	4620      	mov	r0, r4
    593e:	9b01      	ldr	r3, [sp, #4]
    5940:	4798      	blx	r3
    5942:	200f      	movs	r0, #15
    5944:	47b0      	blx	r6
    5946:	f06f 0005 	mvn.w	r0, #5
    594a:	e662      	b.n	5612 <I2C_getTEMPandMOISTURE+0xfe>
    594c:	00001229 	.word	0x00001229
    5950:	0000444d 	.word	0x0000444d
    5954:	4649      	mov	r1, r9
    5956:	4628      	mov	r0, r5
    5958:	47b8      	blx	r7
    595a:	200f      	movs	r0, #15
    595c:	47c0      	blx	r8
	*tl = 0;
    595e:	f88a 9000 	strb.w	r9, [sl]
    5962:	f04f 0808 	mov.w	r8, #8
	for (forloop = 0x80; forloop > 0;) {
    5966:	f04f 0980 	mov.w	r9, #128	; 0x80
		I2C_clockhi();
    596a:	2101      	movs	r1, #1
    596c:	4628      	mov	r0, r5
    596e:	47b8      	blx	r7
    5970:	200f      	movs	r0, #15
    5972:	47b0      	blx	r6
	    if (gpio_get_pin_level(i2csda)) {
    5974:	4620      	mov	r0, r4
    5976:	47d8      	blx	fp
    5978:	b128      	cbz	r0, 5986 <I2C_getTEMPandMOISTURE+0x472>
			(*tl) |= forloop;
    597a:	f89a 3000 	ldrb.w	r3, [sl]
    597e:	ea49 0303 	orr.w	r3, r9, r3
    5982:	f88a 3000 	strb.w	r3, [sl]
		I2C_clocklo();
    5986:	2100      	movs	r1, #0
    5988:	4628      	mov	r0, r5
    598a:	47b8      	blx	r7
    598c:	200f      	movs	r0, #15
    598e:	47b0      	blx	r6
	for (forloop = 0x80; forloop > 0;) {
    5990:	f1b8 0801 	subs.w	r8, r8, #1
		forloop = forloop / 2;
    5994:	ea4f 0959 	mov.w	r9, r9, lsr #1
	for (forloop = 0x80; forloop > 0;) {
    5998:	d1e7      	bne.n	596a <I2C_getTEMPandMOISTURE+0x456>
	I2C_STOP();
    599a:	2101      	movs	r1, #1
    599c:	4628      	mov	r0, r5
    599e:	47b8      	blx	r7
    59a0:	200f      	movs	r0, #15
    59a2:	47b0      	blx	r6
    59a4:	2101      	movs	r1, #1
    59a6:	4620      	mov	r0, r4
    59a8:	47b8      	blx	r7
    59aa:	200f      	movs	r0, #15
    59ac:	47b0      	blx	r6
    59ae:	9b01      	ldr	r3, [sp, #4]
    59b0:	2102      	movs	r1, #2
    59b2:	4620      	mov	r0, r4
    59b4:	4798      	blx	r3
    59b6:	200f      	movs	r0, #15
    59b8:	47b0      	blx	r6
	I2C_START(-2);
    59ba:	2101      	movs	r1, #1
    59bc:	4628      	mov	r0, r5
    59be:	47b8      	blx	r7
    59c0:	2101      	movs	r1, #1
    59c2:	4620      	mov	r0, r4
    59c4:	47b8      	blx	r7
    59c6:	9b01      	ldr	r3, [sp, #4]
    59c8:	2102      	movs	r1, #2
    59ca:	4620      	mov	r0, r4
    59cc:	4798      	blx	r3
    59ce:	200f      	movs	r0, #15
    59d0:	47b0      	blx	r6
    59d2:	200f      	movs	r0, #15
    59d4:	47b0      	blx	r6
    59d6:	4641      	mov	r1, r8
    59d8:	4620      	mov	r0, r4
    59da:	47b8      	blx	r7
    59dc:	200f      	movs	r0, #15
    59de:	47b0      	blx	r6
    59e0:	4641      	mov	r1, r8
    59e2:	4628      	mov	r0, r5
    59e4:	47b8      	blx	r7
    59e6:	200f      	movs	r0, #15
    59e8:	47b0      	blx	r6
    59ea:	f04f 0807 	mov.w	r8, #7
	I2C_SENDADDR(0x40, forloop);
    59ee:	f04f 0940 	mov.w	r9, #64	; 0x40
    59f2:	f019 0140 	ands.w	r1, r9, #64	; 0x40
    59f6:	bf18      	it	ne
    59f8:	2101      	movne	r1, #1
    59fa:	4620      	mov	r0, r4
    59fc:	47b8      	blx	r7
    59fe:	200f      	movs	r0, #15
    5a00:	47b0      	blx	r6
    5a02:	2101      	movs	r1, #1
    5a04:	4628      	mov	r0, r5
    5a06:	47b8      	blx	r7
    5a08:	200f      	movs	r0, #15
    5a0a:	47b0      	blx	r6
    5a0c:	2100      	movs	r1, #0
    5a0e:	4628      	mov	r0, r5
    5a10:	47b8      	blx	r7
    5a12:	200f      	movs	r0, #15
    5a14:	47b0      	blx	r6
    5a16:	f1b8 0801 	subs.w	r8, r8, #1
    5a1a:	ea4f 0959 	mov.w	r9, r9, lsr #1
    5a1e:	d1e8      	bne.n	59f2 <I2C_getTEMPandMOISTURE+0x4de>
	I2C_WRITE();
    5a20:	4641      	mov	r1, r8
    5a22:	4620      	mov	r0, r4
    5a24:	47b8      	blx	r7
    5a26:	200f      	movs	r0, #15
    5a28:	47b0      	blx	r6
    5a2a:	2101      	movs	r1, #1
    5a2c:	4628      	mov	r0, r5
    5a2e:	47b8      	blx	r7
    5a30:	200f      	movs	r0, #15
    5a32:	47b0      	blx	r6
    5a34:	4641      	mov	r1, r8
    5a36:	4628      	mov	r0, r5
    5a38:	47b8      	blx	r7
    5a3a:	200f      	movs	r0, #15
    5a3c:	47b0      	blx	r6
	I2C_WAITACKOP(-3);
    5a3e:	9b01      	ldr	r3, [sp, #4]
    5a40:	2101      	movs	r1, #1
    5a42:	4620      	mov	r0, r4
    5a44:	4798      	blx	r3
    5a46:	200f      	movs	r0, #15
    5a48:	47b0      	blx	r6
    5a4a:	2101      	movs	r1, #1
    5a4c:	4628      	mov	r0, r5
    5a4e:	47b8      	blx	r7
    5a50:	200f      	movs	r0, #15
    5a52:	47b0      	blx	r6
    5a54:	4620      	mov	r0, r4
    5a56:	4bb3      	ldr	r3, [pc, #716]	; (5d24 <I2C_getTEMPandMOISTURE+0x810>)
    5a58:	4798      	blx	r3
    5a5a:	2800      	cmp	r0, #0
    5a5c:	f47f adc6 	bne.w	55ec <I2C_getTEMPandMOISTURE+0xd8>
    5a60:	4641      	mov	r1, r8
    5a62:	4628      	mov	r0, r5
    5a64:	47b8      	blx	r7
    5a66:	200f      	movs	r0, #15
    5a68:	47b0      	blx	r6
    5a6a:	2102      	movs	r1, #2
    5a6c:	4620      	mov	r0, r4
    5a6e:	9b01      	ldr	r3, [sp, #4]
    5a70:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 5d28 <I2C_getTEMPandMOISTURE+0x814>
    5a74:	4798      	blx	r3
    5a76:	200f      	movs	r0, #15
    5a78:	47b0      	blx	r6
    5a7a:	f04f 0908 	mov.w	r9, #8
	I2C_SENDDATA(0x01, forloop);
    5a7e:	f04f 0a80 	mov.w	sl, #128	; 0x80
    5a82:	f01a 0101 	ands.w	r1, sl, #1
    5a86:	bf18      	it	ne
    5a88:	2101      	movne	r1, #1
    5a8a:	4620      	mov	r0, r4
    5a8c:	47c0      	blx	r8
    5a8e:	200f      	movs	r0, #15
    5a90:	47b0      	blx	r6
    5a92:	2101      	movs	r1, #1
    5a94:	4628      	mov	r0, r5
    5a96:	47c0      	blx	r8
    5a98:	200f      	movs	r0, #15
    5a9a:	47b0      	blx	r6
    5a9c:	2100      	movs	r1, #0
    5a9e:	4628      	mov	r0, r5
    5aa0:	47c0      	blx	r8
    5aa2:	200f      	movs	r0, #15
    5aa4:	47b0      	blx	r6
    5aa6:	f1b9 0901 	subs.w	r9, r9, #1
    5aaa:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
    5aae:	d1e8      	bne.n	5a82 <I2C_getTEMPandMOISTURE+0x56e>
	I2C_WAITACKOP(-4);
    5ab0:	2101      	movs	r1, #1
    5ab2:	4620      	mov	r0, r4
    5ab4:	f8df a274 	ldr.w	sl, [pc, #628]	; 5d2c <I2C_getTEMPandMOISTURE+0x818>
    5ab8:	47d0      	blx	sl
    5aba:	200f      	movs	r0, #15
    5abc:	47b0      	blx	r6
    5abe:	2101      	movs	r1, #1
    5ac0:	4628      	mov	r0, r5
    5ac2:	47c0      	blx	r8
    5ac4:	200f      	movs	r0, #15
    5ac6:	47b0      	blx	r6
    5ac8:	4620      	mov	r0, r4
    5aca:	4b96      	ldr	r3, [pc, #600]	; (5d24 <I2C_getTEMPandMOISTURE+0x810>)
    5acc:	4798      	blx	r3
    5ace:	2800      	cmp	r0, #0
    5ad0:	f47f add8 	bne.w	5684 <I2C_getTEMPandMOISTURE+0x170>
    5ad4:	4649      	mov	r1, r9
    5ad6:	4628      	mov	r0, r5
    5ad8:	47c0      	blx	r8
    5ada:	200f      	movs	r0, #15
    5adc:	47b0      	blx	r6
    5ade:	2102      	movs	r1, #2
    5ae0:	4620      	mov	r0, r4
    5ae2:	47d0      	blx	sl
    5ae4:	200f      	movs	r0, #15
    5ae6:	47b0      	blx	r6
	I2C_START(-5);
    5ae8:	2101      	movs	r1, #1
    5aea:	4628      	mov	r0, r5
    5aec:	47c0      	blx	r8
    5aee:	2101      	movs	r1, #1
    5af0:	4620      	mov	r0, r4
    5af2:	47c0      	blx	r8
    5af4:	2102      	movs	r1, #2
    5af6:	4620      	mov	r0, r4
    5af8:	47d0      	blx	sl
    5afa:	200f      	movs	r0, #15
    5afc:	47b0      	blx	r6
    5afe:	200f      	movs	r0, #15
    5b00:	47b0      	blx	r6
    5b02:	4649      	mov	r1, r9
    5b04:	4620      	mov	r0, r4
    5b06:	47c0      	blx	r8
    5b08:	200f      	movs	r0, #15
    5b0a:	47b0      	blx	r6
    5b0c:	4649      	mov	r1, r9
    5b0e:	4628      	mov	r0, r5
    5b10:	47c0      	blx	r8
    5b12:	200f      	movs	r0, #15
    5b14:	47b0      	blx	r6
    5b16:	f8df 8210 	ldr.w	r8, [pc, #528]	; 5d28 <I2C_getTEMPandMOISTURE+0x814>
    5b1a:	f04f 0907 	mov.w	r9, #7
	I2C_SENDADDR(0x40, forloop);
    5b1e:	f04f 0a40 	mov.w	sl, #64	; 0x40
    5b22:	f01a 0140 	ands.w	r1, sl, #64	; 0x40
    5b26:	bf18      	it	ne
    5b28:	2101      	movne	r1, #1
    5b2a:	4620      	mov	r0, r4
    5b2c:	47c0      	blx	r8
    5b2e:	200f      	movs	r0, #15
    5b30:	47b0      	blx	r6
    5b32:	2101      	movs	r1, #1
    5b34:	4628      	mov	r0, r5
    5b36:	47c0      	blx	r8
    5b38:	200f      	movs	r0, #15
    5b3a:	47b0      	blx	r6
    5b3c:	2100      	movs	r1, #0
    5b3e:	4628      	mov	r0, r5
    5b40:	47c0      	blx	r8
    5b42:	200f      	movs	r0, #15
    5b44:	47b0      	blx	r6
    5b46:	f1b9 0901 	subs.w	r9, r9, #1
    5b4a:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
    5b4e:	d1e8      	bne.n	5b22 <I2C_getTEMPandMOISTURE+0x60e>
	I2C_READ();
    5b50:	2101      	movs	r1, #1
    5b52:	4620      	mov	r0, r4
    5b54:	47c0      	blx	r8
    5b56:	200f      	movs	r0, #15
    5b58:	47b0      	blx	r6
    5b5a:	2101      	movs	r1, #1
    5b5c:	4628      	mov	r0, r5
    5b5e:	47c0      	blx	r8
    5b60:	200f      	movs	r0, #15
    5b62:	47b0      	blx	r6
    5b64:	4649      	mov	r1, r9
    5b66:	4628      	mov	r0, r5
    5b68:	47c0      	blx	r8
    5b6a:	200f      	movs	r0, #15
    5b6c:	47b0      	blx	r6
	I2C_WAITACKIP(-6);
    5b6e:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 5d2c <I2C_getTEMPandMOISTURE+0x818>
    5b72:	2101      	movs	r1, #1
    5b74:	4620      	mov	r0, r4
    5b76:	47d0      	blx	sl
    5b78:	200f      	movs	r0, #15
    5b7a:	47b0      	blx	r6
    5b7c:	2101      	movs	r1, #1
    5b7e:	4628      	mov	r0, r5
    5b80:	47c0      	blx	r8
    5b82:	200f      	movs	r0, #15
    5b84:	47b0      	blx	r6
    5b86:	4620      	mov	r0, r4
    5b88:	4b66      	ldr	r3, [pc, #408]	; (5d24 <I2C_getTEMPandMOISTURE+0x810>)
    5b8a:	4798      	blx	r3
    5b8c:	f8cd a008 	str.w	sl, [sp, #8]
    5b90:	2800      	cmp	r0, #0
    5b92:	f47f aec8 	bne.w	5926 <I2C_getTEMPandMOISTURE+0x412>
    5b96:	4649      	mov	r1, r9
    5b98:	4628      	mov	r0, r5
    5b9a:	47c0      	blx	r8
    5b9c:	200f      	movs	r0, #15
    5b9e:	47b0      	blx	r6
		I2C_clockhi();
    5ba0:	f8df a184 	ldr.w	sl, [pc, #388]	; 5d28 <I2C_getTEMPandMOISTURE+0x814>
	*th = 0;
    5ba4:	9b03      	ldr	r3, [sp, #12]
	for (forloop = 0x80; forloop > 0;) {
    5ba6:	f04f 0b80 	mov.w	fp, #128	; 0x80
	*th = 0;
    5baa:	f883 9000 	strb.w	r9, [r3]
    5bae:	46d0      	mov	r8, sl
    5bb0:	f04f 0908 	mov.w	r9, #8
		I2C_clockhi();
    5bb4:	2101      	movs	r1, #1
    5bb6:	4628      	mov	r0, r5
    5bb8:	47d0      	blx	sl
    5bba:	200f      	movs	r0, #15
    5bbc:	47b0      	blx	r6
		if (gpio_get_pin_level(i2csda)) {
    5bbe:	4620      	mov	r0, r4
    5bc0:	4b58      	ldr	r3, [pc, #352]	; (5d24 <I2C_getTEMPandMOISTURE+0x810>)
    5bc2:	4798      	blx	r3
    5bc4:	b128      	cbz	r0, 5bd2 <I2C_getTEMPandMOISTURE+0x6be>
			(*th) |= forloop;
    5bc6:	9b03      	ldr	r3, [sp, #12]
    5bc8:	9a03      	ldr	r2, [sp, #12]
    5bca:	781b      	ldrb	r3, [r3, #0]
    5bcc:	ea4b 0303 	orr.w	r3, fp, r3
    5bd0:	7013      	strb	r3, [r2, #0]
		I2C_clocklo();
    5bd2:	2100      	movs	r1, #0
    5bd4:	4628      	mov	r0, r5
    5bd6:	47c0      	blx	r8
    5bd8:	200f      	movs	r0, #15
    5bda:	47b0      	blx	r6
	for (forloop = 0x80; forloop > 0;) {
    5bdc:	f1b9 0901 	subs.w	r9, r9, #1
		forloop = forloop / 2;
    5be0:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
	for (forloop = 0x80; forloop > 0;) {
    5be4:	d1e6      	bne.n	5bb4 <I2C_getTEMPandMOISTURE+0x6a0>
	I2C_STOP();
    5be6:	2101      	movs	r1, #1
    5be8:	4628      	mov	r0, r5
    5bea:	47c0      	blx	r8
    5bec:	200f      	movs	r0, #15
    5bee:	47b0      	blx	r6
    5bf0:	2101      	movs	r1, #1
    5bf2:	4620      	mov	r0, r4
    5bf4:	47c0      	blx	r8
    5bf6:	200f      	movs	r0, #15
    5bf8:	47b0      	blx	r6
    5bfa:	9b02      	ldr	r3, [sp, #8]
    5bfc:	2102      	movs	r1, #2
    5bfe:	4620      	mov	r0, r4
    5c00:	4798      	blx	r3
    5c02:	200f      	movs	r0, #15
    5c04:	47b0      	blx	r6
	I2C_START(-2);
    5c06:	2101      	movs	r1, #1
    5c08:	4628      	mov	r0, r5
    5c0a:	47c0      	blx	r8
    5c0c:	2101      	movs	r1, #1
    5c0e:	4620      	mov	r0, r4
    5c10:	47c0      	blx	r8
    5c12:	9b02      	ldr	r3, [sp, #8]
    5c14:	2102      	movs	r1, #2
    5c16:	4620      	mov	r0, r4
    5c18:	4798      	blx	r3
    5c1a:	200f      	movs	r0, #15
    5c1c:	47b0      	blx	r6
    5c1e:	200f      	movs	r0, #15
    5c20:	47b0      	blx	r6
    5c22:	4649      	mov	r1, r9
    5c24:	4620      	mov	r0, r4
    5c26:	47c0      	blx	r8
    5c28:	200f      	movs	r0, #15
    5c2a:	47b0      	blx	r6
    5c2c:	4649      	mov	r1, r9
    5c2e:	4628      	mov	r0, r5
    5c30:	47c0      	blx	r8
    5c32:	200f      	movs	r0, #15
    5c34:	47b0      	blx	r6
    5c36:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 5d28 <I2C_getTEMPandMOISTURE+0x814>
    5c3a:	f04f 0907 	mov.w	r9, #7
	I2C_SENDADDR(0x40, forloop);
    5c3e:	f04f 0a40 	mov.w	sl, #64	; 0x40
    5c42:	f01a 0140 	ands.w	r1, sl, #64	; 0x40
    5c46:	bf18      	it	ne
    5c48:	2101      	movne	r1, #1
    5c4a:	4620      	mov	r0, r4
    5c4c:	47c0      	blx	r8
    5c4e:	200f      	movs	r0, #15
    5c50:	47b0      	blx	r6
    5c52:	2101      	movs	r1, #1
    5c54:	4628      	mov	r0, r5
    5c56:	47c0      	blx	r8
    5c58:	200f      	movs	r0, #15
    5c5a:	47b0      	blx	r6
    5c5c:	2100      	movs	r1, #0
    5c5e:	4628      	mov	r0, r5
    5c60:	47c0      	blx	r8
    5c62:	200f      	movs	r0, #15
    5c64:	47b0      	blx	r6
    5c66:	f1b9 0901 	subs.w	r9, r9, #1
    5c6a:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
    5c6e:	d1e8      	bne.n	5c42 <I2C_getTEMPandMOISTURE+0x72e>
	I2C_WRITE();
    5c70:	4649      	mov	r1, r9
    5c72:	4620      	mov	r0, r4
    5c74:	47c0      	blx	r8
    5c76:	200f      	movs	r0, #15
    5c78:	47b0      	blx	r6
    5c7a:	2101      	movs	r1, #1
    5c7c:	4628      	mov	r0, r5
    5c7e:	47c0      	blx	r8
    5c80:	200f      	movs	r0, #15
    5c82:	47b0      	blx	r6
    5c84:	4649      	mov	r1, r9
    5c86:	4628      	mov	r0, r5
    5c88:	47c0      	blx	r8
    5c8a:	200f      	movs	r0, #15
    5c8c:	47b0      	blx	r6
	I2C_WAITACKOP(-3);
    5c8e:	9b02      	ldr	r3, [sp, #8]
    5c90:	2101      	movs	r1, #1
    5c92:	4620      	mov	r0, r4
    5c94:	4798      	blx	r3
    5c96:	200f      	movs	r0, #15
    5c98:	47b0      	blx	r6
    5c9a:	2101      	movs	r1, #1
    5c9c:	4628      	mov	r0, r5
    5c9e:	47c0      	blx	r8
    5ca0:	200f      	movs	r0, #15
    5ca2:	47b0      	blx	r6
    5ca4:	4620      	mov	r0, r4
    5ca6:	4b1f      	ldr	r3, [pc, #124]	; (5d24 <I2C_getTEMPandMOISTURE+0x810>)
    5ca8:	4798      	blx	r3
    5caa:	2800      	cmp	r0, #0
    5cac:	f47f ac9e 	bne.w	55ec <I2C_getTEMPandMOISTURE+0xd8>
    5cb0:	4649      	mov	r1, r9
    5cb2:	4628      	mov	r0, r5
    5cb4:	47c0      	blx	r8
    5cb6:	200f      	movs	r0, #15
    5cb8:	47b0      	blx	r6
    5cba:	2102      	movs	r1, #2
    5cbc:	4620      	mov	r0, r4
    5cbe:	9b02      	ldr	r3, [sp, #8]
    5cc0:	f8df 8064 	ldr.w	r8, [pc, #100]	; 5d28 <I2C_getTEMPandMOISTURE+0x814>
    5cc4:	4798      	blx	r3
    5cc6:	200f      	movs	r0, #15
    5cc8:	47b0      	blx	r6
    5cca:	f04f 0908 	mov.w	r9, #8
	I2C_SENDDATA(0x02, forloop);
    5cce:	f04f 0a80 	mov.w	sl, #128	; 0x80
    5cd2:	f01a 0102 	ands.w	r1, sl, #2
    5cd6:	bf18      	it	ne
    5cd8:	2101      	movne	r1, #1
    5cda:	4620      	mov	r0, r4
    5cdc:	47c0      	blx	r8
    5cde:	200f      	movs	r0, #15
    5ce0:	47b0      	blx	r6
    5ce2:	2101      	movs	r1, #1
    5ce4:	4628      	mov	r0, r5
    5ce6:	47c0      	blx	r8
    5ce8:	200f      	movs	r0, #15
    5cea:	47b0      	blx	r6
    5cec:	2100      	movs	r1, #0
    5cee:	4628      	mov	r0, r5
    5cf0:	47c0      	blx	r8
    5cf2:	200f      	movs	r0, #15
    5cf4:	47b0      	blx	r6
    5cf6:	f1b9 0901 	subs.w	r9, r9, #1
    5cfa:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
    5cfe:	d1e8      	bne.n	5cd2 <I2C_getTEMPandMOISTURE+0x7be>
	I2C_WAITACKOP(-4);
    5d00:	9b02      	ldr	r3, [sp, #8]
    5d02:	2101      	movs	r1, #1
    5d04:	4620      	mov	r0, r4
    5d06:	4798      	blx	r3
    5d08:	200f      	movs	r0, #15
    5d0a:	47b0      	blx	r6
    5d0c:	2101      	movs	r1, #1
    5d0e:	4628      	mov	r0, r5
    5d10:	47c0      	blx	r8
    5d12:	200f      	movs	r0, #15
    5d14:	47b0      	blx	r6
    5d16:	4620      	mov	r0, r4
    5d18:	4b02      	ldr	r3, [pc, #8]	; (5d24 <I2C_getTEMPandMOISTURE+0x810>)
    5d1a:	4798      	blx	r3
    5d1c:	2800      	cmp	r0, #0
    5d1e:	f47f acb1 	bne.w	5684 <I2C_getTEMPandMOISTURE+0x170>
    5d22:	e005      	b.n	5d30 <I2C_getTEMPandMOISTURE+0x81c>
    5d24:	0000444d 	.word	0x0000444d
    5d28:	0000442d 	.word	0x0000442d
    5d2c:	00004495 	.word	0x00004495
    5d30:	4649      	mov	r1, r9
    5d32:	4628      	mov	r0, r5
    5d34:	47c0      	blx	r8
    5d36:	200f      	movs	r0, #15
    5d38:	47b0      	blx	r6
    5d3a:	9b02      	ldr	r3, [sp, #8]
    5d3c:	2102      	movs	r1, #2
    5d3e:	4620      	mov	r0, r4
    5d40:	4798      	blx	r3
    5d42:	200f      	movs	r0, #15
    5d44:	47b0      	blx	r6
	I2C_START(-5);
    5d46:	2101      	movs	r1, #1
    5d48:	4628      	mov	r0, r5
    5d4a:	47c0      	blx	r8
    5d4c:	2101      	movs	r1, #1
    5d4e:	4620      	mov	r0, r4
    5d50:	47c0      	blx	r8
    5d52:	9b02      	ldr	r3, [sp, #8]
    5d54:	2102      	movs	r1, #2
    5d56:	4620      	mov	r0, r4
    5d58:	4798      	blx	r3
    5d5a:	200f      	movs	r0, #15
    5d5c:	47b0      	blx	r6
    5d5e:	200f      	movs	r0, #15
    5d60:	47b0      	blx	r6
    5d62:	4649      	mov	r1, r9
    5d64:	4620      	mov	r0, r4
    5d66:	47c0      	blx	r8
    5d68:	200f      	movs	r0, #15
    5d6a:	47b0      	blx	r6
    5d6c:	4649      	mov	r1, r9
    5d6e:	4628      	mov	r0, r5
    5d70:	47c0      	blx	r8
    5d72:	200f      	movs	r0, #15
    5d74:	47b0      	blx	r6
    5d76:	f8df 8354 	ldr.w	r8, [pc, #852]	; 60cc <I2C_getTEMPandMOISTURE+0xbb8>
    5d7a:	f04f 0907 	mov.w	r9, #7
	I2C_SENDADDR(0x40, forloop);
    5d7e:	f04f 0a40 	mov.w	sl, #64	; 0x40
    5d82:	f01a 0140 	ands.w	r1, sl, #64	; 0x40
    5d86:	bf18      	it	ne
    5d88:	2101      	movne	r1, #1
    5d8a:	4620      	mov	r0, r4
    5d8c:	47c0      	blx	r8
    5d8e:	200f      	movs	r0, #15
    5d90:	47b0      	blx	r6
    5d92:	2101      	movs	r1, #1
    5d94:	4628      	mov	r0, r5
    5d96:	47c0      	blx	r8
    5d98:	200f      	movs	r0, #15
    5d9a:	47b0      	blx	r6
    5d9c:	2100      	movs	r1, #0
    5d9e:	4628      	mov	r0, r5
    5da0:	47c0      	blx	r8
    5da2:	200f      	movs	r0, #15
    5da4:	47b0      	blx	r6
    5da6:	f1b9 0901 	subs.w	r9, r9, #1
    5daa:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
    5dae:	d1e8      	bne.n	5d82 <I2C_getTEMPandMOISTURE+0x86e>
	I2C_READ();
    5db0:	2101      	movs	r1, #1
    5db2:	4620      	mov	r0, r4
    5db4:	47c0      	blx	r8
    5db6:	200f      	movs	r0, #15
    5db8:	47b0      	blx	r6
    5dba:	2101      	movs	r1, #1
    5dbc:	4628      	mov	r0, r5
    5dbe:	47c0      	blx	r8
    5dc0:	200f      	movs	r0, #15
    5dc2:	47b0      	blx	r6
    5dc4:	4649      	mov	r1, r9
    5dc6:	4628      	mov	r0, r5
    5dc8:	47c0      	blx	r8
    5dca:	200f      	movs	r0, #15
    5dcc:	47b0      	blx	r6
	I2C_WAITACKIP(-6);
    5dce:	9b02      	ldr	r3, [sp, #8]
    5dd0:	f8df a304 	ldr.w	sl, [pc, #772]	; 60d8 <I2C_getTEMPandMOISTURE+0xbc4>
    5dd4:	2101      	movs	r1, #1
    5dd6:	4620      	mov	r0, r4
    5dd8:	4798      	blx	r3
    5dda:	200f      	movs	r0, #15
    5ddc:	47b0      	blx	r6
    5dde:	2101      	movs	r1, #1
    5de0:	4628      	mov	r0, r5
    5de2:	47c0      	blx	r8
    5de4:	200f      	movs	r0, #15
    5de6:	47b0      	blx	r6
    5de8:	4620      	mov	r0, r4
    5dea:	47d0      	blx	sl
    5dec:	f8cd a00c 	str.w	sl, [sp, #12]
    5df0:	2800      	cmp	r0, #0
    5df2:	f47f ad98 	bne.w	5926 <I2C_getTEMPandMOISTURE+0x412>
    5df6:	4649      	mov	r1, r9
    5df8:	4628      	mov	r0, r5
    5dfa:	47c0      	blx	r8
    5dfc:	200f      	movs	r0, #15
    5dfe:	47b0      	blx	r6
	*hl = 0;
    5e00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5e02:	f883 9000 	strb.w	r9, [r3]
    5e06:	f8df 92c4 	ldr.w	r9, [pc, #708]	; 60cc <I2C_getTEMPandMOISTURE+0xbb8>
    5e0a:	f04f 0a08 	mov.w	sl, #8
	for (forloop = 0x80; forloop > 0;) {
    5e0e:	f04f 0b80 	mov.w	fp, #128	; 0x80
		I2C_clockhi();
    5e12:	4bae      	ldr	r3, [pc, #696]	; (60cc <I2C_getTEMPandMOISTURE+0xbb8>)
    5e14:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 60d0 <I2C_getTEMPandMOISTURE+0xbbc>
    5e18:	2101      	movs	r1, #1
    5e1a:	4628      	mov	r0, r5
    5e1c:	4798      	blx	r3
    5e1e:	200f      	movs	r0, #15
    5e20:	47c0      	blx	r8
		if (gpio_get_pin_level(i2csda)) {
    5e22:	4620      	mov	r0, r4
    5e24:	9b03      	ldr	r3, [sp, #12]
    5e26:	4798      	blx	r3
    5e28:	b120      	cbz	r0, 5e34 <I2C_getTEMPandMOISTURE+0x920>
			(*hl) |= forloop;
    5e2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5e2c:	781a      	ldrb	r2, [r3, #0]
    5e2e:	ea4b 0202 	orr.w	r2, fp, r2
    5e32:	701a      	strb	r2, [r3, #0]
		I2C_clocklo();
    5e34:	2100      	movs	r1, #0
    5e36:	4628      	mov	r0, r5
    5e38:	47c8      	blx	r9
    5e3a:	200f      	movs	r0, #15
    5e3c:	47c0      	blx	r8
	for (forloop = 0x80; forloop > 0;) {
    5e3e:	f1ba 0a01 	subs.w	sl, sl, #1
		forloop = forloop / 2;
    5e42:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
	for (forloop = 0x80; forloop > 0;) {
    5e46:	d1e4      	bne.n	5e12 <I2C_getTEMPandMOISTURE+0x8fe>
	I2C_STOP();
    5e48:	2101      	movs	r1, #1
    5e4a:	4628      	mov	r0, r5
    5e4c:	47c8      	blx	r9
    5e4e:	200f      	movs	r0, #15
    5e50:	47c0      	blx	r8
    5e52:	2101      	movs	r1, #1
    5e54:	4620      	mov	r0, r4
    5e56:	47c8      	blx	r9
    5e58:	200f      	movs	r0, #15
    5e5a:	47c0      	blx	r8
    5e5c:	9b02      	ldr	r3, [sp, #8]
    5e5e:	2102      	movs	r1, #2
    5e60:	4620      	mov	r0, r4
    5e62:	4798      	blx	r3
    5e64:	200f      	movs	r0, #15
    5e66:	47c0      	blx	r8
	I2C_START(-2);
    5e68:	2101      	movs	r1, #1
    5e6a:	4628      	mov	r0, r5
    5e6c:	47c8      	blx	r9
    5e6e:	2101      	movs	r1, #1
    5e70:	4620      	mov	r0, r4
    5e72:	47c8      	blx	r9
    5e74:	9b02      	ldr	r3, [sp, #8]
    5e76:	2102      	movs	r1, #2
    5e78:	4620      	mov	r0, r4
    5e7a:	4798      	blx	r3
    5e7c:	200f      	movs	r0, #15
    5e7e:	47c0      	blx	r8
    5e80:	200f      	movs	r0, #15
    5e82:	47c0      	blx	r8
    5e84:	4651      	mov	r1, sl
    5e86:	4620      	mov	r0, r4
    5e88:	47c8      	blx	r9
    5e8a:	200f      	movs	r0, #15
    5e8c:	47c0      	blx	r8
    5e8e:	4651      	mov	r1, sl
    5e90:	4628      	mov	r0, r5
    5e92:	47c8      	blx	r9
    5e94:	200f      	movs	r0, #15
    5e96:	47c0      	blx	r8
    5e98:	f8df 9230 	ldr.w	r9, [pc, #560]	; 60cc <I2C_getTEMPandMOISTURE+0xbb8>
    5e9c:	f8df 8230 	ldr.w	r8, [pc, #560]	; 60d0 <I2C_getTEMPandMOISTURE+0xbbc>
    5ea0:	f04f 0a07 	mov.w	sl, #7
	I2C_SENDADDR(0x40, forloop);
    5ea4:	f04f 0b40 	mov.w	fp, #64	; 0x40
    5ea8:	f01b 0140 	ands.w	r1, fp, #64	; 0x40
    5eac:	bf18      	it	ne
    5eae:	2101      	movne	r1, #1
    5eb0:	4620      	mov	r0, r4
    5eb2:	47c8      	blx	r9
    5eb4:	200f      	movs	r0, #15
    5eb6:	47c0      	blx	r8
    5eb8:	2101      	movs	r1, #1
    5eba:	4628      	mov	r0, r5
    5ebc:	47c8      	blx	r9
    5ebe:	200f      	movs	r0, #15
    5ec0:	47c0      	blx	r8
    5ec2:	2100      	movs	r1, #0
    5ec4:	4628      	mov	r0, r5
    5ec6:	47c8      	blx	r9
    5ec8:	200f      	movs	r0, #15
    5eca:	47c0      	blx	r8
    5ecc:	f1ba 0a01 	subs.w	sl, sl, #1
    5ed0:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
    5ed4:	d1e8      	bne.n	5ea8 <I2C_getTEMPandMOISTURE+0x994>
	I2C_WRITE();
    5ed6:	4651      	mov	r1, sl
    5ed8:	4620      	mov	r0, r4
    5eda:	47c8      	blx	r9
    5edc:	200f      	movs	r0, #15
    5ede:	47c0      	blx	r8
    5ee0:	2101      	movs	r1, #1
    5ee2:	4628      	mov	r0, r5
    5ee4:	47c8      	blx	r9
    5ee6:	200f      	movs	r0, #15
    5ee8:	47c0      	blx	r8
    5eea:	4651      	mov	r1, sl
    5eec:	4628      	mov	r0, r5
    5eee:	47c8      	blx	r9
    5ef0:	200f      	movs	r0, #15
    5ef2:	47c0      	blx	r8
	I2C_WAITACKOP(-3);
    5ef4:	9b02      	ldr	r3, [sp, #8]
    5ef6:	2101      	movs	r1, #1
    5ef8:	4620      	mov	r0, r4
    5efa:	4798      	blx	r3
    5efc:	200f      	movs	r0, #15
    5efe:	47c0      	blx	r8
    5f00:	2101      	movs	r1, #1
    5f02:	4628      	mov	r0, r5
    5f04:	47c8      	blx	r9
    5f06:	200f      	movs	r0, #15
    5f08:	47c0      	blx	r8
    5f0a:	4620      	mov	r0, r4
    5f0c:	9b03      	ldr	r3, [sp, #12]
    5f0e:	4798      	blx	r3
    5f10:	2800      	cmp	r0, #0
    5f12:	f47f ab6b 	bne.w	55ec <I2C_getTEMPandMOISTURE+0xd8>
    5f16:	4651      	mov	r1, sl
    5f18:	4628      	mov	r0, r5
    5f1a:	47c8      	blx	r9
    5f1c:	200f      	movs	r0, #15
    5f1e:	47c0      	blx	r8
    5f20:	2102      	movs	r1, #2
    5f22:	4620      	mov	r0, r4
    5f24:	9b02      	ldr	r3, [sp, #8]
    5f26:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 60cc <I2C_getTEMPandMOISTURE+0xbb8>
    5f2a:	4798      	blx	r3
    5f2c:	200f      	movs	r0, #15
    5f2e:	47c0      	blx	r8
    5f30:	f8df 819c 	ldr.w	r8, [pc, #412]	; 60d0 <I2C_getTEMPandMOISTURE+0xbbc>
    5f34:	f04f 0a08 	mov.w	sl, #8
	I2C_SENDDATA(0x03, forloop);
    5f38:	f04f 0b80 	mov.w	fp, #128	; 0x80
    5f3c:	f01b 0103 	ands.w	r1, fp, #3
    5f40:	bf18      	it	ne
    5f42:	2101      	movne	r1, #1
    5f44:	4620      	mov	r0, r4
    5f46:	47c8      	blx	r9
    5f48:	200f      	movs	r0, #15
    5f4a:	47c0      	blx	r8
    5f4c:	2101      	movs	r1, #1
    5f4e:	4628      	mov	r0, r5
    5f50:	47c8      	blx	r9
    5f52:	200f      	movs	r0, #15
    5f54:	47c0      	blx	r8
    5f56:	2100      	movs	r1, #0
    5f58:	4628      	mov	r0, r5
    5f5a:	47c8      	blx	r9
    5f5c:	200f      	movs	r0, #15
    5f5e:	47c0      	blx	r8
    5f60:	f1ba 0a01 	subs.w	sl, sl, #1
    5f64:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
    5f68:	d1e8      	bne.n	5f3c <I2C_getTEMPandMOISTURE+0xa28>
	I2C_WAITACKOP(-4);
    5f6a:	9b02      	ldr	r3, [sp, #8]
    5f6c:	2101      	movs	r1, #1
    5f6e:	4620      	mov	r0, r4
    5f70:	4798      	blx	r3
    5f72:	200f      	movs	r0, #15
    5f74:	47c0      	blx	r8
    5f76:	2101      	movs	r1, #1
    5f78:	4628      	mov	r0, r5
    5f7a:	47c8      	blx	r9
    5f7c:	200f      	movs	r0, #15
    5f7e:	47c0      	blx	r8
    5f80:	4620      	mov	r0, r4
    5f82:	9b03      	ldr	r3, [sp, #12]
    5f84:	4798      	blx	r3
    5f86:	2800      	cmp	r0, #0
    5f88:	f47f ab7c 	bne.w	5684 <I2C_getTEMPandMOISTURE+0x170>
    5f8c:	4651      	mov	r1, sl
    5f8e:	4628      	mov	r0, r5
    5f90:	47c8      	blx	r9
    5f92:	200f      	movs	r0, #15
    5f94:	47c0      	blx	r8
    5f96:	9b02      	ldr	r3, [sp, #8]
    5f98:	2102      	movs	r1, #2
    5f9a:	4620      	mov	r0, r4
    5f9c:	4798      	blx	r3
    5f9e:	200f      	movs	r0, #15
    5fa0:	47c0      	blx	r8
	I2C_START(-5);
    5fa2:	2101      	movs	r1, #1
    5fa4:	4628      	mov	r0, r5
    5fa6:	47c8      	blx	r9
    5fa8:	2101      	movs	r1, #1
    5faa:	4620      	mov	r0, r4
    5fac:	47c8      	blx	r9
    5fae:	9b02      	ldr	r3, [sp, #8]
    5fb0:	2102      	movs	r1, #2
    5fb2:	4620      	mov	r0, r4
    5fb4:	4798      	blx	r3
    5fb6:	200f      	movs	r0, #15
    5fb8:	47c0      	blx	r8
    5fba:	200f      	movs	r0, #15
    5fbc:	47c0      	blx	r8
    5fbe:	4651      	mov	r1, sl
    5fc0:	4620      	mov	r0, r4
    5fc2:	47c8      	blx	r9
    5fc4:	200f      	movs	r0, #15
    5fc6:	47c0      	blx	r8
    5fc8:	4651      	mov	r1, sl
    5fca:	4628      	mov	r0, r5
    5fcc:	47c8      	blx	r9
    5fce:	200f      	movs	r0, #15
    5fd0:	47c0      	blx	r8
    5fd2:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 60cc <I2C_getTEMPandMOISTURE+0xbb8>
    5fd6:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 60d0 <I2C_getTEMPandMOISTURE+0xbbc>
    5fda:	f04f 0a07 	mov.w	sl, #7
	I2C_SENDADDR(0x40, forloop);
    5fde:	f04f 0b40 	mov.w	fp, #64	; 0x40
    5fe2:	f01b 0140 	ands.w	r1, fp, #64	; 0x40
    5fe6:	bf18      	it	ne
    5fe8:	2101      	movne	r1, #1
    5fea:	4620      	mov	r0, r4
    5fec:	47c8      	blx	r9
    5fee:	200f      	movs	r0, #15
    5ff0:	47c0      	blx	r8
    5ff2:	2101      	movs	r1, #1
    5ff4:	4628      	mov	r0, r5
    5ff6:	47c8      	blx	r9
    5ff8:	200f      	movs	r0, #15
    5ffa:	47c0      	blx	r8
    5ffc:	2100      	movs	r1, #0
    5ffe:	4628      	mov	r0, r5
    6000:	47c8      	blx	r9
    6002:	200f      	movs	r0, #15
    6004:	47c0      	blx	r8
    6006:	f1ba 0a01 	subs.w	sl, sl, #1
    600a:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
    600e:	d1e8      	bne.n	5fe2 <I2C_getTEMPandMOISTURE+0xace>
	I2C_READ();
    6010:	2101      	movs	r1, #1
    6012:	4620      	mov	r0, r4
    6014:	47c8      	blx	r9
    6016:	200f      	movs	r0, #15
    6018:	47c0      	blx	r8
    601a:	2101      	movs	r1, #1
    601c:	4628      	mov	r0, r5
    601e:	47c8      	blx	r9
    6020:	200f      	movs	r0, #15
    6022:	47c0      	blx	r8
    6024:	4651      	mov	r1, sl
    6026:	4628      	mov	r0, r5
    6028:	47c8      	blx	r9
    602a:	200f      	movs	r0, #15
    602c:	47c0      	blx	r8
	I2C_WAITACKIP(-6);
    602e:	9b02      	ldr	r3, [sp, #8]
    6030:	2101      	movs	r1, #1
    6032:	4620      	mov	r0, r4
    6034:	4798      	blx	r3
    6036:	200f      	movs	r0, #15
    6038:	47c0      	blx	r8
    603a:	2101      	movs	r1, #1
    603c:	4628      	mov	r0, r5
    603e:	47c8      	blx	r9
    6040:	200f      	movs	r0, #15
    6042:	47c0      	blx	r8
    6044:	4620      	mov	r0, r4
    6046:	9b03      	ldr	r3, [sp, #12]
    6048:	4798      	blx	r3
    604a:	2800      	cmp	r0, #0
    604c:	f47f ac6b 	bne.w	5926 <I2C_getTEMPandMOISTURE+0x412>
    6050:	4651      	mov	r1, sl
    6052:	4628      	mov	r0, r5
    6054:	47c8      	blx	r9
    6056:	200f      	movs	r0, #15
    6058:	47c0      	blx	r8
		I2C_clockhi();
    605a:	f8df 9070 	ldr.w	r9, [pc, #112]	; 60cc <I2C_getTEMPandMOISTURE+0xbb8>
	*hh = 0;
    605e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6060:	2608      	movs	r6, #8
    6062:	f883 a000 	strb.w	sl, [r3]
    6066:	46c8      	mov	r8, r9
	for (forloop = 0x80; forloop > 0;) {
    6068:	f04f 0a80 	mov.w	sl, #128	; 0x80
		I2C_clockhi();
    606c:	2101      	movs	r1, #1
    606e:	4628      	mov	r0, r5
    6070:	47c8      	blx	r9
    6072:	4f17      	ldr	r7, [pc, #92]	; (60d0 <I2C_getTEMPandMOISTURE+0xbbc>)
    6074:	200f      	movs	r0, #15
    6076:	47b8      	blx	r7
		if (gpio_get_pin_level(i2csda)) {
    6078:	4620      	mov	r0, r4
    607a:	9b03      	ldr	r3, [sp, #12]
    607c:	4798      	blx	r3
    607e:	b128      	cbz	r0, 608c <I2C_getTEMPandMOISTURE+0xb78>
			(*hh) |= forloop;
    6080:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6082:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    6084:	781b      	ldrb	r3, [r3, #0]
    6086:	ea4a 0303 	orr.w	r3, sl, r3
    608a:	7013      	strb	r3, [r2, #0]
		I2C_clocklo();
    608c:	2100      	movs	r1, #0
    608e:	4628      	mov	r0, r5
    6090:	47c0      	blx	r8
    6092:	200f      	movs	r0, #15
    6094:	47b8      	blx	r7
	for (forloop = 0x80; forloop > 0;) {
    6096:	3e01      	subs	r6, #1
		forloop = forloop / 2;
    6098:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
	for (forloop = 0x80; forloop > 0;) {
    609c:	d1e6      	bne.n	606c <I2C_getTEMPandMOISTURE+0xb58>
	I2C_STOP();
    609e:	2101      	movs	r1, #1
    60a0:	4628      	mov	r0, r5
    60a2:	47c0      	blx	r8
    60a4:	200f      	movs	r0, #15
    60a6:	47b8      	blx	r7
    60a8:	2101      	movs	r1, #1
    60aa:	4620      	mov	r0, r4
    60ac:	47c0      	blx	r8
    60ae:	200f      	movs	r0, #15
    60b0:	47b8      	blx	r7
    60b2:	2102      	movs	r1, #2
    60b4:	4620      	mov	r0, r4
    60b6:	4b07      	ldr	r3, [pc, #28]	; (60d4 <I2C_getTEMPandMOISTURE+0xbc0>)
    60b8:	4798      	blx	r3
    60ba:	200f      	movs	r0, #15
    60bc:	47b8      	blx	r7
	return 0;
    60be:	4630      	mov	r0, r6
    60c0:	f7ff baa7 	b.w	5612 <I2C_getTEMPandMOISTURE+0xfe>
		return -1;
    60c4:	f04f 30ff 	mov.w	r0, #4294967295
    60c8:	f7ff baa3 	b.w	5612 <I2C_getTEMPandMOISTURE+0xfe>
    60cc:	0000442d 	.word	0x0000442d
    60d0:	00001229 	.word	0x00001229
    60d4:	00004495 	.word	0x00004495
    60d8:	0000444d 	.word	0x0000444d

000060dc <I2C_check_deviceID>:
// * CALLED BY:			  main()                                                                                                       *
// * CALLS:		          No function. ALL macros defined in this function file.                                                       *
// * --------------------------------------------------------------------------------------------------------------------------------- *
int I2C_check_deviceID(uint8_t sda,  uint8_t clk, unsigned char deviceID)

{
    60dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    60e0:	460f      	mov	r7, r1
    60e2:	4606      	mov	r6, r0
	uint8_t     		i2csda, i2cclk;
    unsigned char		forloop;

    /* Open an I2C channel, send address held in parameter variable "deviceID" */
	I2C_OPEN(sda, clk);
	I2C_START(-1);
    60e4:	4d41      	ldr	r5, [pc, #260]	; (61ec <I2C_check_deviceID+0x110>)
    60e6:	f8df 9110 	ldr.w	r9, [pc, #272]	; 61f8 <I2C_check_deviceID+0x11c>
    60ea:	4c41      	ldr	r4, [pc, #260]	; (61f0 <I2C_check_deviceID+0x114>)
    60ec:	2101      	movs	r1, #1
    60ee:	4638      	mov	r0, r7
{
    60f0:	4693      	mov	fp, r2
	I2C_START(-1);
    60f2:	47a8      	blx	r5
    60f4:	2101      	movs	r1, #1
    60f6:	4630      	mov	r0, r6
    60f8:	47a8      	blx	r5
    60fa:	2102      	movs	r1, #2
    60fc:	4630      	mov	r0, r6
    60fe:	47c8      	blx	r9
    6100:	200f      	movs	r0, #15
    6102:	47a0      	blx	r4
    6104:	200f      	movs	r0, #15
    6106:	47a0      	blx	r4
    6108:	2100      	movs	r1, #0
    610a:	4630      	mov	r0, r6
    610c:	47a8      	blx	r5
    610e:	200f      	movs	r0, #15
    6110:	47a0      	blx	r4
    6112:	2100      	movs	r1, #0
    6114:	4638      	mov	r0, r7
    6116:	47a8      	blx	r5
    6118:	200f      	movs	r0, #15
    611a:	47a0      	blx	r4
    611c:	f04f 0807 	mov.w	r8, #7
	I2C_SENDADDR(deviceID, forloop);
    6120:	f04f 0a40 	mov.w	sl, #64	; 0x40
    6124:	ea1b 010a 	ands.w	r1, fp, sl
    6128:	bf18      	it	ne
    612a:	2101      	movne	r1, #1
    612c:	4630      	mov	r0, r6
    612e:	47a8      	blx	r5
    6130:	200f      	movs	r0, #15
    6132:	47a0      	blx	r4
    6134:	2101      	movs	r1, #1
    6136:	4638      	mov	r0, r7
    6138:	47a8      	blx	r5
    613a:	200f      	movs	r0, #15
    613c:	47a0      	blx	r4
    613e:	2100      	movs	r1, #0
    6140:	4638      	mov	r0, r7
    6142:	47a8      	blx	r5
    6144:	200f      	movs	r0, #15
    6146:	47a0      	blx	r4
    6148:	f1b8 0801 	subs.w	r8, r8, #1
    614c:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
    6150:	d1e8      	bne.n	6124 <I2C_check_deviceID+0x48>
	I2C_READ();
    6152:	2101      	movs	r1, #1
    6154:	4630      	mov	r0, r6
    6156:	47a8      	blx	r5
    6158:	200f      	movs	r0, #15
    615a:	47a0      	blx	r4
    615c:	2101      	movs	r1, #1
    615e:	4638      	mov	r0, r7
    6160:	47a8      	blx	r5
    6162:	200f      	movs	r0, #15
    6164:	47a0      	blx	r4
    6166:	4641      	mov	r1, r8
    6168:	4638      	mov	r0, r7
    616a:	47a8      	blx	r5
    616c:	200f      	movs	r0, #15
    616e:	47a0      	blx	r4
	I2C_WAITACKOP(-2);
    6170:	2101      	movs	r1, #1
    6172:	4630      	mov	r0, r6
    6174:	47c8      	blx	r9
    6176:	200f      	movs	r0, #15
    6178:	47a0      	blx	r4
    617a:	2101      	movs	r1, #1
    617c:	4638      	mov	r0, r7
    617e:	47a8      	blx	r5
    6180:	200f      	movs	r0, #15
    6182:	47a0      	blx	r4
    6184:	4630      	mov	r0, r6
    6186:	4b1b      	ldr	r3, [pc, #108]	; (61f4 <I2C_check_deviceID+0x118>)
    6188:	4798      	blx	r3
    618a:	b190      	cbz	r0, 61b2 <I2C_check_deviceID+0xd6>
    618c:	2101      	movs	r1, #1
    618e:	4638      	mov	r0, r7
    6190:	47a8      	blx	r5
    6192:	200f      	movs	r0, #15
    6194:	47a0      	blx	r4
    6196:	2101      	movs	r1, #1
    6198:	4630      	mov	r0, r6
    619a:	47a8      	blx	r5
    619c:	200f      	movs	r0, #15
    619e:	47a0      	blx	r4
    61a0:	2102      	movs	r1, #2
    61a2:	4630      	mov	r0, r6
    61a4:	47c8      	blx	r9
    61a6:	200f      	movs	r0, #15
    61a8:	47a0      	blx	r4
    61aa:	f06f 0001 	mvn.w	r0, #1
    61ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    61b2:	4641      	mov	r1, r8
    61b4:	4638      	mov	r0, r7
    61b6:	47a8      	blx	r5
    61b8:	200f      	movs	r0, #15
    61ba:	47a0      	blx	r4
    61bc:	2102      	movs	r1, #2
    61be:	4630      	mov	r0, r6
    61c0:	47c8      	blx	r9
    61c2:	200f      	movs	r0, #15
    61c4:	47a0      	blx	r4
	/* If not successful, then function will return with < 0 value if adddress not found */
	
	I2C_STOP();
    61c6:	2101      	movs	r1, #1
    61c8:	4638      	mov	r0, r7
    61ca:	47a8      	blx	r5
    61cc:	200f      	movs	r0, #15
    61ce:	47a0      	blx	r4
    61d0:	2101      	movs	r1, #1
    61d2:	4630      	mov	r0, r6
    61d4:	47a8      	blx	r5
    61d6:	200f      	movs	r0, #15
    61d8:	47a0      	blx	r4
    61da:	2102      	movs	r1, #2
    61dc:	4630      	mov	r0, r6
    61de:	47c8      	blx	r9
    61e0:	200f      	movs	r0, #15
    61e2:	47a0      	blx	r4
	I2C_CLOSE();
	
	/* If successful, and code execution got here, the close the I2C channel and return with ZERO value if address found */
	return 0;
    61e4:	4640      	mov	r0, r8
    61e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    61ea:	bf00      	nop
    61ec:	0000442d 	.word	0x0000442d
    61f0:	00001229 	.word	0x00001229
    61f4:	0000444d 	.word	0x0000444d
    61f8:	00004495 	.word	0x00004495

000061fc <gpio_set_pin_direction>:
    61fc:	2201      	movs	r2, #1
    61fe:	0943      	lsrs	r3, r0, #5
	switch (direction) {
    6200:	4291      	cmp	r1, r2
    6202:	f000 001f 	and.w	r0, r0, #31
    6206:	fa02 f000 	lsl.w	r0, r2, r0
    620a:	d015      	beq.n	6238 <gpio_set_pin_direction+0x3c>
    620c:	d306      	bcc.n	621c <gpio_set_pin_direction+0x20>
    620e:	2902      	cmp	r1, #2
    6210:	d023      	beq.n	625a <gpio_set_pin_direction+0x5e>
		ASSERT(false);
    6212:	2245      	movs	r2, #69	; 0x45
    6214:	4914      	ldr	r1, [pc, #80]	; (6268 <gpio_set_pin_direction+0x6c>)
    6216:	4b15      	ldr	r3, [pc, #84]	; (626c <gpio_set_pin_direction+0x70>)
    6218:	2000      	movs	r0, #0
    621a:	4718      	bx	r3
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    621c:	01db      	lsls	r3, r3, #7
    621e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    6222:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    6226:	6058      	str	r0, [r3, #4]
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    6228:	b282      	uxth	r2, r0
    622a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    622e:	0c00      	lsrs	r0, r0, #16
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6230:	629a      	str	r2, [r3, #40]	; 0x28
		hri_port_write_WRCONFIG_reg(
    6232:	f040 4040 	orr.w	r0, r0, #3221225472	; 0xc0000000
    6236:	e00e      	b.n	6256 <gpio_set_pin_direction+0x5a>
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    6238:	01db      	lsls	r3, r3, #7
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    623a:	b282      	uxth	r2, r0
    623c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    6240:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    6244:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    6248:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    624c:	6058      	str	r0, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    624e:	629a      	str	r2, [r3, #40]	; 0x28
		hri_port_write_WRCONFIG_reg(PORT,
    6250:	4a07      	ldr	r2, [pc, #28]	; (6270 <gpio_set_pin_direction+0x74>)
    6252:	ea42 4010 	orr.w	r0, r2, r0, lsr #16
    6256:	6298      	str	r0, [r3, #40]	; 0x28
    6258:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    625a:	01db      	lsls	r3, r3, #7
    625c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    6260:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    6264:	6098      	str	r0, [r3, #8]
    6266:	e7df      	b.n	6228 <gpio_set_pin_direction+0x2c>
    6268:	0000c245 	.word	0x0000c245
    626c:	00002035 	.word	0x00002035
    6270:	c0020000 	.word	0xc0020000

00006274 <gpio_set_pin_pull_mode>:
	switch (pull_mode) {
    6274:	2901      	cmp	r1, #1
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    6276:	ea4f 1350 	mov.w	r3, r0, lsr #5
    627a:	f000 001f 	and.w	r0, r0, #31
    627e:	d014      	beq.n	62aa <gpio_set_pin_pull_mode+0x36>
    6280:	d306      	bcc.n	6290 <gpio_set_pin_pull_mode+0x1c>
    6282:	2902      	cmp	r1, #2
    6284:	d021      	beq.n	62ca <gpio_set_pin_pull_mode+0x56>
		ASSERT(false);
    6286:	2288      	movs	r2, #136	; 0x88
    6288:	4918      	ldr	r1, [pc, #96]	; (62ec <gpio_set_pin_pull_mode+0x78>)
    628a:	4b19      	ldr	r3, [pc, #100]	; (62f0 <gpio_set_pin_pull_mode+0x7c>)
    628c:	2000      	movs	r0, #0
    628e:	4718      	bx	r3
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    6290:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
    6294:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    6298:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
    629c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
    62a0:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    62a4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    62a8:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    62aa:	01db      	lsls	r3, r3, #7
    62ac:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    62b0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    62b4:	4081      	lsls	r1, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    62b6:	4418      	add	r0, r3
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    62b8:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    62ba:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
    62be:	f042 0204 	orr.w	r2, r2, #4
    62c2:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    62c6:	6199      	str	r1, [r3, #24]
    62c8:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    62ca:	01db      	lsls	r3, r3, #7
    62cc:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    62d0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    62d4:	2201      	movs	r2, #1
    62d6:	4082      	lsls	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    62d8:	4418      	add	r0, r3
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    62da:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    62dc:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    62e0:	f041 0104 	orr.w	r1, r1, #4
    62e4:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    62e8:	615a      	str	r2, [r3, #20]
    62ea:	4770      	bx	lr
    62ec:	0000c245 	.word	0x0000c245
    62f0:	00002035 	.word	0x00002035

000062f4 <timer_setup>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: initializes and starts the main 10 times per second global timer
// Returns:     Nothing
// *****************************************************************************************************************************************************************
void timer_setup(void)
{
    62f4:	b510      	push	{r4, lr}
	/* Setup and start the main 1/10th of a second timer expiration callback routine */
	TIMER_0_task1.interval = 100;
    62f6:	4908      	ldr	r1, [pc, #32]	; (6318 <timer_setup+0x24>)
	TIMER_0_task1.cb       = TIMER_0_task1_cb;
	TIMER_0_task1.mode     = TIMER_TASK_REPEAT;

	/* Start the repeatable timer feature */
	timer_add_task(&TIMER_0, &TIMER_0_task1);
    62f8:	4c08      	ldr	r4, [pc, #32]	; (631c <timer_setup+0x28>)
	TIMER_0_task1.interval = 100;
    62fa:	2364      	movs	r3, #100	; 0x64
    62fc:	608b      	str	r3, [r1, #8]
	TIMER_0_task1.cb       = TIMER_0_task1_cb;
    62fe:	4b08      	ldr	r3, [pc, #32]	; (6320 <timer_setup+0x2c>)
    6300:	60cb      	str	r3, [r1, #12]
	TIMER_0_task1.mode     = TIMER_TASK_REPEAT;
    6302:	2301      	movs	r3, #1
    6304:	740b      	strb	r3, [r1, #16]
	timer_add_task(&TIMER_0, &TIMER_0_task1);
    6306:	4620      	mov	r0, r4
    6308:	4b06      	ldr	r3, [pc, #24]	; (6324 <timer_setup+0x30>)
    630a:	4798      	blx	r3
	timer_start(&TIMER_0);
    630c:	4620      	mov	r0, r4
    630e:	4b06      	ldr	r3, [pc, #24]	; (6328 <timer_setup+0x34>)
}
    6310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	timer_start(&TIMER_0);
    6314:	4718      	bx	r3
    6316:	bf00      	nop
    6318:	20008260 	.word	0x20008260
    631c:	20007544 	.word	0x20007544
    6320:	00007125 	.word	0x00007125
    6324:	000017f5 	.word	0x000017f5
    6328:	000017b9 	.word	0x000017b9

0000632c <ADC_init>:
// Returns:     Nothing
// *****************************************************************************************************************************************************************
void ADC_init(void)
{
	/* Setup the two internal water detection analogue inputs BOTH on "ADC_0" channels and also the HIGH-VOLTAGE ADC [0|1|2]*/
	adc_sync_enable_channel(&ADC_0, 0);
    632c:	2100      	movs	r1, #0
    632e:	4801      	ldr	r0, [pc, #4]	; (6334 <ADC_init+0x8>)
    6330:	4b01      	ldr	r3, [pc, #4]	; (6338 <ADC_init+0xc>)
    6332:	4718      	bx	r3
    6334:	2000746c 	.word	0x2000746c
    6338:	0000106d 	.word	0x0000106d

0000633c <comms_init>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: setup the SPI and the USB
// Returns:     Nothing
// *****************************************************************************************************************************************************************
void comms_init(void)
{
    633c:	b510      	push	{r4, lr}
	/* Global initialization of main USB mechanism */
	if (usb_d_enable() < 0) {
    633e:	4b0c      	ldr	r3, [pc, #48]	; (6370 <comms_init+0x34>)
    6340:	4c0c      	ldr	r4, [pc, #48]	; (6374 <comms_init+0x38>)
    6342:	4798      	blx	r3
    6344:	2800      	cmp	r0, #0
    6346:	da04      	bge.n	6352 <comms_init+0x16>
		xprintf("USB init/enable ERROR!!!!!!!\r\n");
    6348:	480b      	ldr	r0, [pc, #44]	; (6378 <comms_init+0x3c>)
		cdc_device_acm_init();
		xprintf("cdc_device_acm_init()\r\n");
		
		/* Register the read callback function */
		cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)usb_device_cb_state_c);
		xprintf("cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)usb_device_cb_state_c)\r\n");
    634a:	4623      	mov	r3, r4
	}
}
    634c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		xprintf("cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)usb_device_cb_state_c)\r\n");
    6350:	4718      	bx	r3
		usb_init();
    6352:	4b0a      	ldr	r3, [pc, #40]	; (637c <comms_init+0x40>)
    6354:	4798      	blx	r3
		xprintf("usb_init()\r\n");
    6356:	480a      	ldr	r0, [pc, #40]	; (6380 <comms_init+0x44>)
    6358:	47a0      	blx	r4
		cdc_device_acm_init();
    635a:	4b0a      	ldr	r3, [pc, #40]	; (6384 <comms_init+0x48>)
    635c:	4798      	blx	r3
		xprintf("cdc_device_acm_init()\r\n");
    635e:	480a      	ldr	r0, [pc, #40]	; (6388 <comms_init+0x4c>)
    6360:	47a0      	blx	r4
		cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)usb_device_cb_state_c);
    6362:	490a      	ldr	r1, [pc, #40]	; (638c <comms_init+0x50>)
    6364:	4b0a      	ldr	r3, [pc, #40]	; (6390 <comms_init+0x54>)
    6366:	2003      	movs	r0, #3
    6368:	4798      	blx	r3
		xprintf("cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)usb_device_cb_state_c)\r\n");
    636a:	480a      	ldr	r0, [pc, #40]	; (6394 <comms_init+0x58>)
    636c:	e7ed      	b.n	634a <comms_init+0xe>
    636e:	bf00      	nop
    6370:	00001da9 	.word	0x00001da9
    6374:	00000395 	.word	0x00000395
    6378:	0000c261 	.word	0x0000c261
    637c:	0000ab89 	.word	0x0000ab89
    6380:	0000c280 	.word	0x0000c280
    6384:	0000ab55 	.word	0x0000ab55
    6388:	0000c28d 	.word	0x0000c28d
    638c:	0000ab19 	.word	0x0000ab19
    6390:	0000a461 	.word	0x0000a461
    6394:	0000c2a5 	.word	0x0000c2a5

00006398 <crypto_init>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: initialize the AES encryption-engine in the CPU core
// Returns:     Nothing
// *****************************************************************************************************************************************************************
void crypto_init(void)
{
    6398:	b510      	push	{r4, lr}
	/* Initialize and start the crypt hardware block. Insert and program the private AES key for this device-node also */
	aes_sync_enable(&CRYPTOGRAPHY_0);
    639a:	4c05      	ldr	r4, [pc, #20]	; (63b0 <crypto_init+0x18>)
    639c:	4b05      	ldr	r3, [pc, #20]	; (63b4 <crypto_init+0x1c>)
    639e:	4620      	mov	r0, r4
    63a0:	4798      	blx	r3
	aes_sync_set_encrypt_key(&CRYPTOGRAPHY_0, aes_key, AES_KEY_128);
    63a2:	4620      	mov	r0, r4
    63a4:	2200      	movs	r2, #0
    63a6:	4904      	ldr	r1, [pc, #16]	; (63b8 <crypto_init+0x20>)
    63a8:	4b04      	ldr	r3, [pc, #16]	; (63bc <crypto_init+0x24>)
}
    63aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	aes_sync_set_encrypt_key(&CRYPTOGRAPHY_0, aes_key, AES_KEY_128);
    63ae:	4718      	bx	r3
    63b0:	20007424 	.word	0x20007424
    63b4:	00001171 	.word	0x00001171
    63b8:	20000004 	.word	0x20000004
    63bc:	00001199 	.word	0x00001199

000063c0 <switch_init>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: reset and start the Ethernet SWITCH IC
// Returns:     Nothing
// *****************************************************************************************************************************************************************
void switch_init(void)
{
    63c0:	b570      	push	{r4, r5, r6, lr}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    63c2:	4c07      	ldr	r4, [pc, #28]	; (63e0 <switch_init+0x20>)
	/* Go through the reset sequence of the GPIO for the Micrel Ethernet-SWITCH */
	gpio_set_pin_level(PB00_KSZ_RESET, 1);
	delay_ms(10);
    63c4:	4e07      	ldr	r6, [pc, #28]	; (63e4 <switch_init+0x24>)
    63c6:	2501      	movs	r5, #1
    63c8:	200a      	movs	r0, #10
    63ca:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
    63ce:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    63d0:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
	gpio_set_pin_level(PB00_KSZ_RESET, 0);
	delay_ms(10);
    63d4:	200a      	movs	r0, #10
    63d6:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    63d8:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
    63dc:	bd70      	pop	{r4, r5, r6, pc}
    63de:	bf00      	nop
    63e0:	41008000 	.word	0x41008000
    63e4:	0000124d 	.word	0x0000124d

000063e8 <switch_configure>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: check all default register settings in the Ethernet SWITCH and also change relevant settings to suit the MultiSense operation
// Returns:     Nothing
// *****************************************************************************************************************************************************************
void switch_configure(void)
{
    63e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	xprintf("Configuring and checking the SPI KSZ8794 Ethernet SWITCH registers...\r\n");
    63ec:	4886      	ldr	r0, [pc, #536]	; (6608 <switch_configure+0x220>)
    63ee:	4d87      	ldr	r5, [pc, #540]	; (660c <switch_configure+0x224>)
	/* Write set-up commands to the KSZ Ethernet SWITCH via SPI bus */
	if (!checkKSZreg(SPI_KSZ8794_FAMILY_ID, 0x87))		{ xprintf("[SPI_KSZ8794_FAMILY_ID] not correct\r\n"); }
    63f0:	4c87      	ldr	r4, [pc, #540]	; (6610 <switch_configure+0x228>)
	xprintf("Configuring and checking the SPI KSZ8794 Ethernet SWITCH registers...\r\n");
    63f2:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_FAMILY_ID, 0x87))		{ xprintf("[SPI_KSZ8794_FAMILY_ID] not correct\r\n"); }
    63f4:	2187      	movs	r1, #135	; 0x87
    63f6:	2000      	movs	r0, #0
    63f8:	47a0      	blx	r4
    63fa:	b908      	cbnz	r0, 6400 <switch_configure+0x18>
    63fc:	4885      	ldr	r0, [pc, #532]	; (6614 <switch_configure+0x22c>)
    63fe:	47a8      	blx	r5
		
	/* Stop the Ethernet SWITCH operation */
	writeKSZreg(SPI_KSZ8794_START, 0x00);
    6400:	2100      	movs	r1, #0
    6402:	2001      	movs	r0, #1
    6404:	4f84      	ldr	r7, [pc, #528]	; (6618 <switch_configure+0x230>)
	delay_us(50);
    6406:	4e85      	ldr	r6, [pc, #532]	; (661c <switch_configure+0x234>)
	writeKSZreg(SPI_KSZ8794_START, 0x00);
    6408:	47b8      	blx	r7
	delay_us(50);
    640a:	2032      	movs	r0, #50	; 0x32
    640c:	47b0      	blx	r6
	
	if (!checkKSZreg(SPI_KSZ8794_START, 0x60))			{ xprintf("[SPI_KSZ8794_START first] not correct\r\n"); }
    640e:	2160      	movs	r1, #96	; 0x60
    6410:	2001      	movs	r0, #1
    6412:	47a0      	blx	r4
    6414:	b908      	cbnz	r0, 641a <switch_configure+0x32>
    6416:	4882      	ldr	r0, [pc, #520]	; (6620 <switch_configure+0x238>)
    6418:	47a8      	blx	r5
	
	writeKSZreg(SPI_KSZ8794_GLOBAL0, 0x0D);
    641a:	210d      	movs	r1, #13
    641c:	2002      	movs	r0, #2
    641e:	47b8      	blx	r7
	delay_us(50);
    6420:	2032      	movs	r0, #50	; 0x32
    6422:	47b0      	blx	r6
	
	if (!checkKSZreg(SPI_KSZ8794_GLOBAL0, 0x0D))		{ xprintf("[SPI_KSZ8794_GLOBAL0] not correct\r\n"); }
    6424:	210d      	movs	r1, #13
    6426:	2002      	movs	r0, #2
    6428:	47a0      	blx	r4
    642a:	b908      	cbnz	r0, 6430 <switch_configure+0x48>
    642c:	487d      	ldr	r0, [pc, #500]	; (6624 <switch_configure+0x23c>)
    642e:	47a8      	blx	r5
	
	writeKSZreg(SPI_KSZ8794_GLOBAL1, 0x0C);
    6430:	210c      	movs	r1, #12
    6432:	2003      	movs	r0, #3
    6434:	47b8      	blx	r7
	delay_us(50);
    6436:	2032      	movs	r0, #50	; 0x32
    6438:	47b0      	blx	r6
	
	if (!checkKSZreg(SPI_KSZ8794_GLOBAL1, 0x0C))		{ xprintf("[SPI_KSZ8794_GLOBAL1] not correct\r\n"); }
    643a:	210c      	movs	r1, #12
    643c:	2003      	movs	r0, #3
    643e:	47a0      	blx	r4
    6440:	b908      	cbnz	r0, 6446 <switch_configure+0x5e>
    6442:	4879      	ldr	r0, [pc, #484]	; (6628 <switch_configure+0x240>)
    6444:	47a8      	blx	r5
	
	writeKSZreg(SPI_KSZ8794_GLOBAL2, 0xB2);
    6446:	21b2      	movs	r1, #178	; 0xb2
    6448:	2004      	movs	r0, #4
    644a:	47b8      	blx	r7
	delay_us(50);
    644c:	2032      	movs	r0, #50	; 0x32
    644e:	47b0      	blx	r6
	
	if (!checkKSZreg(SPI_KSZ8794_GLOBAL2, 0xB2))		{ xprintf("[SPI_KSZ8794_GLOBAL2] not correct\r\n"); }
    6450:	21b2      	movs	r1, #178	; 0xb2
    6452:	2004      	movs	r0, #4
    6454:	47a0      	blx	r4
    6456:	b908      	cbnz	r0, 645c <switch_configure+0x74>
    6458:	4874      	ldr	r0, [pc, #464]	; (662c <switch_configure+0x244>)
    645a:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_GLOBAL3, 0x00))		{ xprintf("[SPI_KSZ8794_GLOBAL3] not correct\r\n"); }
    645c:	2100      	movs	r1, #0
    645e:	2005      	movs	r0, #5
    6460:	47a0      	blx	r4
    6462:	b908      	cbnz	r0, 6468 <switch_configure+0x80>
    6464:	4872      	ldr	r0, [pc, #456]	; (6630 <switch_configure+0x248>)
    6466:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_GLOBAL4, 0x00))		{ xprintf("[SPI_KSZ8794_GLOBAL4] not correct\r\n"); }
    6468:	2100      	movs	r1, #0
    646a:	2006      	movs	r0, #6
    646c:	47a0      	blx	r4
    646e:	b908      	cbnz	r0, 6474 <switch_configure+0x8c>
    6470:	4870      	ldr	r0, [pc, #448]	; (6634 <switch_configure+0x24c>)
    6472:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_GLOBAL5, 0x4A))		{ xprintf("[SPI_KSZ8794_GLOBAL5] not correct\r\n"); }
    6474:	214a      	movs	r1, #74	; 0x4a
    6476:	2007      	movs	r0, #7
    6478:	47a0      	blx	r4
    647a:	b908      	cbnz	r0, 6480 <switch_configure+0x98>
    647c:	486e      	ldr	r0, [pc, #440]	; (6638 <switch_configure+0x250>)
    647e:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_GLOBAL6, 0x00))		{ xprintf("[SPI_KSZ8794_GLOBAL6] not correct\r\n"); }
    6480:	2100      	movs	r1, #0
    6482:	2008      	movs	r0, #8
    6484:	47a0      	blx	r4
    6486:	b908      	cbnz	r0, 648c <switch_configure+0xa4>
    6488:	486c      	ldr	r0, [pc, #432]	; (663c <switch_configure+0x254>)
    648a:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_GLOBAL9, 0x00))		{ xprintf("[SPI_KSZ8794_GLOBAL9] not correct\r\n"); }
    648c:	2100      	movs	r1, #0
    648e:	200b      	movs	r0, #11
    6490:	47a0      	blx	r4
    6492:	b908      	cbnz	r0, 6498 <switch_configure+0xb0>
    6494:	486a      	ldr	r0, [pc, #424]	; (6640 <switch_configure+0x258>)
    6496:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_GLOBAL10, 0x44))		{ xprintf("[SPI_KSZ8794_GLOBAL10] not correct\r\n"); }
    6498:	2144      	movs	r1, #68	; 0x44
    649a:	200c      	movs	r0, #12
    649c:	47a0      	blx	r4
    649e:	b908      	cbnz	r0, 64a4 <switch_configure+0xbc>
    64a0:	4868      	ldr	r0, [pc, #416]	; (6644 <switch_configure+0x25c>)
    64a2:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_PDMC1, 0x00))			{ xprintf("[SPI_KSZ8794_PDMC1] not correct\r\n"); }
    64a4:	2100      	movs	r1, #0
    64a6:	200e      	movs	r0, #14
    64a8:	47a0      	blx	r4
    64aa:	b908      	cbnz	r0, 64b0 <switch_configure+0xc8>
    64ac:	4866      	ldr	r0, [pc, #408]	; (6648 <switch_configure+0x260>)
    64ae:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_PDMC2, 0x50))			{ xprintf("[SPI_KSZ8794_PDMC2] not correct\r\n"); }
    64b0:	2150      	movs	r1, #80	; 0x50
    64b2:	200f      	movs	r0, #15
    64b4:	47a0      	blx	r4
    64b6:	b908      	cbnz	r0, 64bc <switch_configure+0xd4>
    64b8:	4864      	ldr	r0, [pc, #400]	; (664c <switch_configure+0x264>)
    64ba:	47a8      	blx	r5
	
	writeKSZreg(SPI_KSZ8794_PORT1CONTROL0, 0x80);
    64bc:	2180      	movs	r1, #128	; 0x80
    64be:	2010      	movs	r0, #16
    64c0:	47b8      	blx	r7
	delay_us(50);
    64c2:	2032      	movs	r0, #50	; 0x32
    64c4:	47b0      	blx	r6
	
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL0, 0x80))	{ xprintf("[SPI_KSZ8794_PORT1CONTROL0] not correct\r\n"); }
    64c6:	2180      	movs	r1, #128	; 0x80
    64c8:	2010      	movs	r0, #16
    64ca:	47a0      	blx	r4
    64cc:	b908      	cbnz	r0, 64d2 <switch_configure+0xea>
    64ce:	4860      	ldr	r0, [pc, #384]	; (6650 <switch_configure+0x268>)
    64d0:	47a8      	blx	r5
	
	writeKSZreg(SPI_KSZ8794_PORT2CONTROL0, 0x80);
    64d2:	2180      	movs	r1, #128	; 0x80
    64d4:	2020      	movs	r0, #32
    64d6:	47b8      	blx	r7
	delay_us(50);
    64d8:	2032      	movs	r0, #50	; 0x32
    64da:	47b0      	blx	r6
	
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL0, 0x80))	{ xprintf("[SPI_KSZ8794_PORT2CONTROL0] not correct\r\n"); }
    64dc:	2180      	movs	r1, #128	; 0x80
    64de:	2020      	movs	r0, #32
    64e0:	47a0      	blx	r4
    64e2:	b908      	cbnz	r0, 64e8 <switch_configure+0x100>
    64e4:	485b      	ldr	r0, [pc, #364]	; (6654 <switch_configure+0x26c>)
    64e6:	47a8      	blx	r5
	
	writeKSZreg(SPI_KSZ8794_PORT3CONTROL0, 0x80);
    64e8:	2180      	movs	r1, #128	; 0x80
    64ea:	2030      	movs	r0, #48	; 0x30
    64ec:	47b8      	blx	r7
	delay_us(50);
    64ee:	2032      	movs	r0, #50	; 0x32
    64f0:	47b0      	blx	r6
	
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL0, 0x80))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL0] not correct\r\n"); }
    64f2:	2180      	movs	r1, #128	; 0x80
    64f4:	2030      	movs	r0, #48	; 0x30
    64f6:	47a0      	blx	r4
    64f8:	b908      	cbnz	r0, 64fe <switch_configure+0x116>
    64fa:	4857      	ldr	r0, [pc, #348]	; (6658 <switch_configure+0x270>)
    64fc:	47a8      	blx	r5
	
	writeKSZreg(SPI_KSZ8794_PORT4CONTROL0, 0x80);
    64fe:	2180      	movs	r1, #128	; 0x80
    6500:	2050      	movs	r0, #80	; 0x50
    6502:	47b8      	blx	r7
	delay_us(50);
    6504:	2032      	movs	r0, #50	; 0x32
    6506:	47b0      	blx	r6
	
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL0, 0x80))	{ xprintf("[SPI_KSZ8794_PORT4CONTROL0] not correct\r\n"); }
    6508:	2180      	movs	r1, #128	; 0x80
    650a:	2050      	movs	r0, #80	; 0x50
    650c:	47a0      	blx	r4
    650e:	b908      	cbnz	r0, 6514 <switch_configure+0x12c>
    6510:	4852      	ldr	r0, [pc, #328]	; (665c <switch_configure+0x274>)
    6512:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL1, 0x1F))	{ xprintf("[SPI_KSZ8794_PORT1CONTROL1] not correct\r\n"); }
    6514:	211f      	movs	r1, #31
    6516:	2011      	movs	r0, #17
    6518:	47a0      	blx	r4
    651a:	b908      	cbnz	r0, 6520 <switch_configure+0x138>
    651c:	4850      	ldr	r0, [pc, #320]	; (6660 <switch_configure+0x278>)
    651e:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL1, 0x1F))	{ xprintf("[SPI_KSZ8794_PORT2CONTROL1] not correct\r\n"); }
    6520:	211f      	movs	r1, #31
    6522:	2021      	movs	r0, #33	; 0x21
    6524:	47a0      	blx	r4
    6526:	b908      	cbnz	r0, 652c <switch_configure+0x144>
    6528:	484e      	ldr	r0, [pc, #312]	; (6664 <switch_configure+0x27c>)
    652a:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL1, 0x1F))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL1] not correct\r\n"); }
    652c:	211f      	movs	r1, #31
    652e:	2031      	movs	r0, #49	; 0x31
    6530:	47a0      	blx	r4
    6532:	b908      	cbnz	r0, 6538 <switch_configure+0x150>
    6534:	484c      	ldr	r0, [pc, #304]	; (6668 <switch_configure+0x280>)
    6536:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL1, 0x1F))	{ xprintf("[SPI_KSZ8794_PORT4CONTROL1] not correct\r\n"); }
    6538:	211f      	movs	r1, #31
    653a:	2051      	movs	r0, #81	; 0x51
    653c:	47a0      	blx	r4
    653e:	b908      	cbnz	r0, 6544 <switch_configure+0x15c>
    6540:	484a      	ldr	r0, [pc, #296]	; (666c <switch_configure+0x284>)
    6542:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL2, 0x06))	{ xprintf("[SPI_KSZ8794_PORT1CONTROL2] not correct\r\n"); }
    6544:	2106      	movs	r1, #6
    6546:	2012      	movs	r0, #18
    6548:	47a0      	blx	r4
    654a:	b908      	cbnz	r0, 6550 <switch_configure+0x168>
    654c:	4848      	ldr	r0, [pc, #288]	; (6670 <switch_configure+0x288>)
    654e:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL2, 0x06))	{ xprintf("[SPI_KSZ8794_PORT2CONTROL2] not correct\r\n"); }
    6550:	2106      	movs	r1, #6
    6552:	2022      	movs	r0, #34	; 0x22
    6554:	47a0      	blx	r4
    6556:	b908      	cbnz	r0, 655c <switch_configure+0x174>
    6558:	4846      	ldr	r0, [pc, #280]	; (6674 <switch_configure+0x28c>)
    655a:	47a8      	blx	r5
	
	/* For now, turn off the T-junction port 3 to the Power & Ethernet board attachment */
	writeKSZreg(SPI_KSZ8794_PORT3CONTROL2, 0x00);
    655c:	2100      	movs	r1, #0
    655e:	2032      	movs	r0, #50	; 0x32
    6560:	47b8      	blx	r7
	delay_us(50);
    6562:	2032      	movs	r0, #50	; 0x32
    6564:	47b0      	blx	r6
	
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL2, 0x00))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL2] not correct\r\n"); }
    6566:	2100      	movs	r1, #0
    6568:	2032      	movs	r0, #50	; 0x32
    656a:	47a0      	blx	r4
    656c:	b908      	cbnz	r0, 6572 <switch_configure+0x18a>
    656e:	4842      	ldr	r0, [pc, #264]	; (6678 <switch_configure+0x290>)
    6570:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL2, 0x06))	{ xprintf("[SPI_KSZ8794_PORT4CONTROL2] not correct\r\n"); }
    6572:	2106      	movs	r1, #6
    6574:	2052      	movs	r0, #82	; 0x52
    6576:	47a0      	blx	r4
    6578:	b908      	cbnz	r0, 657e <switch_configure+0x196>
    657a:	4840      	ldr	r0, [pc, #256]	; (667c <switch_configure+0x294>)
    657c:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL3, 0x00))	{ xprintf("[SPI_KSZ8794_PORT1CONTROL3] not correct\r\n"); }
    657e:	2100      	movs	r1, #0
    6580:	2013      	movs	r0, #19
    6582:	47a0      	blx	r4
    6584:	b908      	cbnz	r0, 658a <switch_configure+0x1a2>
    6586:	483e      	ldr	r0, [pc, #248]	; (6680 <switch_configure+0x298>)
    6588:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL3, 0x00))	{ xprintf("[SPI_KSZ8794_PORT2CONTROL3] not correct\r\n"); }
    658a:	2100      	movs	r1, #0
    658c:	2023      	movs	r0, #35	; 0x23
    658e:	47a0      	blx	r4
    6590:	b908      	cbnz	r0, 6596 <switch_configure+0x1ae>
    6592:	483c      	ldr	r0, [pc, #240]	; (6684 <switch_configure+0x29c>)
    6594:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL3, 0x00))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL3] not correct\r\n"); }
    6596:	2100      	movs	r1, #0
    6598:	2033      	movs	r0, #51	; 0x33
    659a:	47a0      	blx	r4
    659c:	b908      	cbnz	r0, 65a2 <switch_configure+0x1ba>
    659e:	483a      	ldr	r0, [pc, #232]	; (6688 <switch_configure+0x2a0>)
    65a0:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL3, 0x00))	{ xprintf("[SPI_KSZ8794_PORT4CONTROL3] not correct\r\n"); }
    65a2:	2100      	movs	r1, #0
    65a4:	2053      	movs	r0, #83	; 0x53
    65a6:	47a0      	blx	r4
    65a8:	b908      	cbnz	r0, 65ae <switch_configure+0x1c6>
    65aa:	4838      	ldr	r0, [pc, #224]	; (668c <switch_configure+0x2a4>)
    65ac:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL4, 0x01))	{ xprintf("[SPI_KSZ8794_PORT1CONTROL4] not correct\r\n"); }
    65ae:	2101      	movs	r1, #1
    65b0:	2014      	movs	r0, #20
    65b2:	47a0      	blx	r4
    65b4:	b908      	cbnz	r0, 65ba <switch_configure+0x1d2>
    65b6:	4836      	ldr	r0, [pc, #216]	; (6690 <switch_configure+0x2a8>)
    65b8:	47a8      	blx	r5
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL4, 0x01))	{ xprintf("[SPI_KSZ8794_PORT2CONTROL4] not correct\r\n"); }
    65ba:	2101      	movs	r1, #1
    65bc:	2024      	movs	r0, #36	; 0x24
    65be:	47a0      	blx	r4
    65c0:	b910      	cbnz	r0, 65c8 <switch_configure+0x1e0>
    65c2:	4834      	ldr	r0, [pc, #208]	; (6694 <switch_configure+0x2ac>)
    65c4:	4b11      	ldr	r3, [pc, #68]	; (660c <switch_configure+0x224>)
    65c6:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL4, 0x01))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL4] not correct\r\n"); }
    65c8:	2101      	movs	r1, #1
    65ca:	2034      	movs	r0, #52	; 0x34
    65cc:	4c10      	ldr	r4, [pc, #64]	; (6610 <switch_configure+0x228>)
    65ce:	47a0      	blx	r4
    65d0:	b910      	cbnz	r0, 65d8 <switch_configure+0x1f0>
    65d2:	4831      	ldr	r0, [pc, #196]	; (6698 <switch_configure+0x2b0>)
    65d4:	4b0d      	ldr	r3, [pc, #52]	; (660c <switch_configure+0x224>)
    65d6:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL4, 0x01))	{ xprintf("[SPI_KSZ8794_PORT4CONTROL4] not correct\r\n"); }
    65d8:	2101      	movs	r1, #1
    65da:	2054      	movs	r0, #84	; 0x54
    65dc:	47a0      	blx	r4
    65de:	b910      	cbnz	r0, 65e6 <switch_configure+0x1fe>
    65e0:	482e      	ldr	r0, [pc, #184]	; (669c <switch_configure+0x2b4>)
    65e2:	4b0a      	ldr	r3, [pc, #40]	; (660c <switch_configure+0x224>)
    65e4:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL5, 0x00))	{ xprintf("[SPI_KSZ8794_PORT1CONTROL5] not correct\r\n"); }
    65e6:	2100      	movs	r1, #0
    65e8:	2015      	movs	r0, #21
    65ea:	47a0      	blx	r4
    65ec:	b910      	cbnz	r0, 65f4 <switch_configure+0x20c>
    65ee:	482c      	ldr	r0, [pc, #176]	; (66a0 <switch_configure+0x2b8>)
    65f0:	4b06      	ldr	r3, [pc, #24]	; (660c <switch_configure+0x224>)
    65f2:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL5, 0x00))	{ xprintf("[SPI_KSZ8794_PORT2CONTROL5] not correct\r\n"); }
    65f4:	2100      	movs	r1, #0
    65f6:	2025      	movs	r0, #37	; 0x25
    65f8:	47a0      	blx	r4
    65fa:	2800      	cmp	r0, #0
    65fc:	d154      	bne.n	66a8 <switch_configure+0x2c0>
    65fe:	4829      	ldr	r0, [pc, #164]	; (66a4 <switch_configure+0x2bc>)
    6600:	4b02      	ldr	r3, [pc, #8]	; (660c <switch_configure+0x224>)
    6602:	4798      	blx	r3
    6604:	e050      	b.n	66a8 <switch_configure+0x2c0>
    6606:	bf00      	nop
    6608:	0000c2fa 	.word	0x0000c2fa
    660c:	00000395 	.word	0x00000395
    6610:	0000ac51 	.word	0x0000ac51
    6614:	0000c342 	.word	0x0000c342
    6618:	0000acc1 	.word	0x0000acc1
    661c:	00001229 	.word	0x00001229
    6620:	0000c368 	.word	0x0000c368
    6624:	0000c390 	.word	0x0000c390
    6628:	0000c3b4 	.word	0x0000c3b4
    662c:	0000c3d8 	.word	0x0000c3d8
    6630:	0000c3fc 	.word	0x0000c3fc
    6634:	0000c420 	.word	0x0000c420
    6638:	0000c444 	.word	0x0000c444
    663c:	0000c468 	.word	0x0000c468
    6640:	0000c48c 	.word	0x0000c48c
    6644:	0000c4b0 	.word	0x0000c4b0
    6648:	0000c4d5 	.word	0x0000c4d5
    664c:	0000c4f7 	.word	0x0000c4f7
    6650:	0000c519 	.word	0x0000c519
    6654:	0000c543 	.word	0x0000c543
    6658:	0000c56d 	.word	0x0000c56d
    665c:	0000c597 	.word	0x0000c597
    6660:	0000c5c1 	.word	0x0000c5c1
    6664:	0000c5eb 	.word	0x0000c5eb
    6668:	0000c615 	.word	0x0000c615
    666c:	0000c63f 	.word	0x0000c63f
    6670:	0000c669 	.word	0x0000c669
    6674:	0000c693 	.word	0x0000c693
    6678:	0000bcfe 	.word	0x0000bcfe
    667c:	0000c6bd 	.word	0x0000c6bd
    6680:	0000c6e7 	.word	0x0000c6e7
    6684:	0000c711 	.word	0x0000c711
    6688:	0000c73b 	.word	0x0000c73b
    668c:	0000c765 	.word	0x0000c765
    6690:	0000c78f 	.word	0x0000c78f
    6694:	0000c7b9 	.word	0x0000c7b9
    6698:	0000c7e3 	.word	0x0000c7e3
    669c:	0000c80d 	.word	0x0000c80d
    66a0:	0000c837 	.word	0x0000c837
    66a4:	0000c861 	.word	0x0000c861
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL5, 0x00))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL5] not correct\r\n"); }
    66a8:	2100      	movs	r1, #0
    66aa:	2035      	movs	r0, #53	; 0x35
    66ac:	47a0      	blx	r4
    66ae:	b910      	cbnz	r0, 66b6 <switch_configure+0x2ce>
    66b0:	487d      	ldr	r0, [pc, #500]	; (68a8 <switch_configure+0x4c0>)
    66b2:	4b7e      	ldr	r3, [pc, #504]	; (68ac <switch_configure+0x4c4>)
    66b4:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL5, 0x00))	{ xprintf("[SPI_KSZ8794_PORT4CONTROL5] not correct\r\n"); }
    66b6:	2100      	movs	r1, #0
    66b8:	2055      	movs	r0, #85	; 0x55
    66ba:	47a0      	blx	r4
    66bc:	b910      	cbnz	r0, 66c4 <switch_configure+0x2dc>
    66be:	487c      	ldr	r0, [pc, #496]	; (68b0 <switch_configure+0x4c8>)
    66c0:	4b7a      	ldr	r3, [pc, #488]	; (68ac <switch_configure+0x4c4>)
    66c2:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL6, 0x28))	{ xprintf("[SPI_KSZ8794_PORT4CONTROL6] not correct\r\n"); }
    66c4:	2128      	movs	r1, #40	; 0x28
    66c6:	2056      	movs	r0, #86	; 0x56
    66c8:	47a0      	blx	r4
    66ca:	b910      	cbnz	r0, 66d2 <switch_configure+0x2ea>
    66cc:	4879      	ldr	r0, [pc, #484]	; (68b4 <switch_configure+0x4cc>)
    66ce:	4b77      	ldr	r3, [pc, #476]	; (68ac <switch_configure+0x4c4>)
    66d0:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL7, 0x3F))	{ xprintf("[SPI_KSZ8794_PORT1CONTROL7] not correct\r\n"); }
    66d2:	213f      	movs	r1, #63	; 0x3f
    66d4:	2017      	movs	r0, #23
    66d6:	47a0      	blx	r4
    66d8:	b910      	cbnz	r0, 66e0 <switch_configure+0x2f8>
    66da:	4877      	ldr	r0, [pc, #476]	; (68b8 <switch_configure+0x4d0>)
    66dc:	4b73      	ldr	r3, [pc, #460]	; (68ac <switch_configure+0x4c4>)
    66de:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL7, 0x3F))	{ xprintf("[SPI_KSZ8794_PORT2CONTROL7] not correct\r\n"); }
    66e0:	213f      	movs	r1, #63	; 0x3f
    66e2:	2027      	movs	r0, #39	; 0x27
    66e4:	47a0      	blx	r4
    66e6:	b910      	cbnz	r0, 66ee <switch_configure+0x306>
    66e8:	4874      	ldr	r0, [pc, #464]	; (68bc <switch_configure+0x4d4>)
    66ea:	4b70      	ldr	r3, [pc, #448]	; (68ac <switch_configure+0x4c4>)
    66ec:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL7, 0x3F))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL7] not correct\r\n"); }
    66ee:	213f      	movs	r1, #63	; 0x3f
    66f0:	2037      	movs	r0, #55	; 0x37
    66f2:	47a0      	blx	r4
    66f4:	b910      	cbnz	r0, 66fc <switch_configure+0x314>
    66f6:	4872      	ldr	r0, [pc, #456]	; (68c0 <switch_configure+0x4d8>)
    66f8:	4b6c      	ldr	r3, [pc, #432]	; (68ac <switch_configure+0x4c4>)
    66fa:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL8, 0x00))	{ xprintf("[SPI_KSZ8794_PORT1CONTROL8] not correct\r\n"); }
    66fc:	2100      	movs	r1, #0
    66fe:	201a      	movs	r0, #26
    6700:	47a0      	blx	r4
    6702:	b910      	cbnz	r0, 670a <switch_configure+0x322>
    6704:	486f      	ldr	r0, [pc, #444]	; (68c4 <switch_configure+0x4dc>)
    6706:	4b69      	ldr	r3, [pc, #420]	; (68ac <switch_configure+0x4c4>)
    6708:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL8, 0x00))	{ xprintf("[SPI_KSZ8794_PORT2CONTROL8] not correct\r\n"); }
    670a:	2100      	movs	r1, #0
    670c:	202a      	movs	r0, #42	; 0x2a
    670e:	47a0      	blx	r4
    6710:	b910      	cbnz	r0, 6718 <switch_configure+0x330>
    6712:	486d      	ldr	r0, [pc, #436]	; (68c8 <switch_configure+0x4e0>)
    6714:	4b65      	ldr	r3, [pc, #404]	; (68ac <switch_configure+0x4c4>)
    6716:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL8, 0x00))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL8] not correct\r\n"); }
    6718:	2100      	movs	r1, #0
    671a:	203a      	movs	r0, #58	; 0x3a
    671c:	47a0      	blx	r4
    671e:	b910      	cbnz	r0, 6726 <switch_configure+0x33e>
    6720:	486a      	ldr	r0, [pc, #424]	; (68cc <switch_configure+0x4e4>)
    6722:	4b62      	ldr	r3, [pc, #392]	; (68ac <switch_configure+0x4c4>)
    6724:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT1LINKMD, 0x00))	{ xprintf("[SPI_KSZ8794_PORT1LINKMD] not correct\r\n"); }
    6726:	2100      	movs	r1, #0
    6728:	201b      	movs	r0, #27
    672a:	47a0      	blx	r4
    672c:	b910      	cbnz	r0, 6734 <switch_configure+0x34c>
    672e:	4868      	ldr	r0, [pc, #416]	; (68d0 <switch_configure+0x4e8>)
    6730:	4b5e      	ldr	r3, [pc, #376]	; (68ac <switch_configure+0x4c4>)
    6732:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT2LINKMD, 0x00))	{ xprintf("[SPI_KSZ8794_PORT2LINKMD] not correct\r\n"); }
    6734:	2100      	movs	r1, #0
    6736:	202b      	movs	r0, #43	; 0x2b
    6738:	47a0      	blx	r4
    673a:	b910      	cbnz	r0, 6742 <switch_configure+0x35a>
    673c:	4865      	ldr	r0, [pc, #404]	; (68d4 <switch_configure+0x4ec>)
    673e:	4b5b      	ldr	r3, [pc, #364]	; (68ac <switch_configure+0x4c4>)
    6740:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT3LINKMD, 0x00))	{ xprintf("[SPI_KSZ8794_PORT3LINKMD] not correct\r\n"); }
    6742:	2100      	movs	r1, #0
    6744:	203b      	movs	r0, #59	; 0x3b
    6746:	47a0      	blx	r4
    6748:	b910      	cbnz	r0, 6750 <switch_configure+0x368>
    674a:	4863      	ldr	r0, [pc, #396]	; (68d8 <switch_configure+0x4f0>)
    674c:	4b57      	ldr	r3, [pc, #348]	; (68ac <switch_configure+0x4c4>)
    674e:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL9, 0x5F))	{ xprintf("[SPI_KSZ8794_PORT1CONTROL9] not correct\r\n"); }
    6750:	215f      	movs	r1, #95	; 0x5f
    6752:	201c      	movs	r0, #28
    6754:	47a0      	blx	r4
    6756:	b910      	cbnz	r0, 675e <switch_configure+0x376>
    6758:	4860      	ldr	r0, [pc, #384]	; (68dc <switch_configure+0x4f4>)
    675a:	4b54      	ldr	r3, [pc, #336]	; (68ac <switch_configure+0x4c4>)
    675c:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL9, 0x5F))	{ xprintf("[SPI_KSZ8794_PORT2CONTROL9] not correct\r\n"); }
    675e:	215f      	movs	r1, #95	; 0x5f
    6760:	202c      	movs	r0, #44	; 0x2c
    6762:	47a0      	blx	r4
    6764:	b910      	cbnz	r0, 676c <switch_configure+0x384>
    6766:	485e      	ldr	r0, [pc, #376]	; (68e0 <switch_configure+0x4f8>)
    6768:	4b50      	ldr	r3, [pc, #320]	; (68ac <switch_configure+0x4c4>)
    676a:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL9, 0x5F))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL9] not correct\r\n"); }
    676c:	215f      	movs	r1, #95	; 0x5f
    676e:	203c      	movs	r0, #60	; 0x3c
    6770:	47a0      	blx	r4
    6772:	b910      	cbnz	r0, 677a <switch_configure+0x392>
    6774:	485b      	ldr	r0, [pc, #364]	; (68e4 <switch_configure+0x4fc>)
    6776:	4b4d      	ldr	r3, [pc, #308]	; (68ac <switch_configure+0x4c4>)
    6778:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL10, 0x00)) { xprintf("[SPI_KSZ8794_PORT1CONTROL10] not correct\r\n"); }
    677a:	2100      	movs	r1, #0
    677c:	201d      	movs	r0, #29
    677e:	47a0      	blx	r4
    6780:	b910      	cbnz	r0, 6788 <switch_configure+0x3a0>
    6782:	4859      	ldr	r0, [pc, #356]	; (68e8 <switch_configure+0x500>)
    6784:	4b49      	ldr	r3, [pc, #292]	; (68ac <switch_configure+0x4c4>)
    6786:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL10, 0x00)) { xprintf("[SPI_KSZ8794_PORT2CONTROL10] not correct\r\n"); }
    6788:	2100      	movs	r1, #0
    678a:	202d      	movs	r0, #45	; 0x2d
    678c:	47a0      	blx	r4
    678e:	b910      	cbnz	r0, 6796 <switch_configure+0x3ae>
    6790:	4856      	ldr	r0, [pc, #344]	; (68ec <switch_configure+0x504>)
    6792:	4b46      	ldr	r3, [pc, #280]	; (68ac <switch_configure+0x4c4>)
    6794:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL10, 0x00)) { xprintf("[SPI_KSZ8794_PORT3CONTROL10] not correct\r\n"); }
    6796:	2100      	movs	r1, #0
    6798:	203d      	movs	r0, #61	; 0x3d
    679a:	47a0      	blx	r4
    679c:	b910      	cbnz	r0, 67a4 <switch_configure+0x3bc>
    679e:	4854      	ldr	r0, [pc, #336]	; (68f0 <switch_configure+0x508>)
    67a0:	4b42      	ldr	r3, [pc, #264]	; (68ac <switch_configure+0x4c4>)
    67a2:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL20, 0x62)) { xprintf("[SPI_KSZ8794_PORT2CONTROL20] not correct\r\n"); }
    67a4:	2162      	movs	r1, #98	; 0x62
    67a6:	20a3      	movs	r0, #163	; 0xa3
    67a8:	47a0      	blx	r4
    67aa:	b910      	cbnz	r0, 67b2 <switch_configure+0x3ca>
    67ac:	4851      	ldr	r0, [pc, #324]	; (68f4 <switch_configure+0x50c>)
    67ae:	4b3f      	ldr	r3, [pc, #252]	; (68ac <switch_configure+0x4c4>)
    67b0:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL12, 0x80)) { xprintf("[SPI_KSZ8794_PORT1CONTROL12] not correct\r\n"); }
    67b2:	2180      	movs	r1, #128	; 0x80
    67b4:	20b0      	movs	r0, #176	; 0xb0
    67b6:	47a0      	blx	r4
    67b8:	b910      	cbnz	r0, 67c0 <switch_configure+0x3d8>
    67ba:	484f      	ldr	r0, [pc, #316]	; (68f8 <switch_configure+0x510>)
    67bc:	4b3b      	ldr	r3, [pc, #236]	; (68ac <switch_configure+0x4c4>)
    67be:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL12, 0x80)) { xprintf("[SPI_KSZ8794_PORT2CONTROL12] not correct\r\n"); }
    67c0:	2180      	movs	r1, #128	; 0x80
    67c2:	20c0      	movs	r0, #192	; 0xc0
    67c4:	47a0      	blx	r4
    67c6:	b910      	cbnz	r0, 67ce <switch_configure+0x3e6>
    67c8:	484c      	ldr	r0, [pc, #304]	; (68fc <switch_configure+0x514>)
    67ca:	4b38      	ldr	r3, [pc, #224]	; (68ac <switch_configure+0x4c4>)
    67cc:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL12, 0x80)) { xprintf("[SPI_KSZ8794_PORT3CONTROL12] not correct\r\n"); }
    67ce:	2180      	movs	r1, #128	; 0x80
    67d0:	20d0      	movs	r0, #208	; 0xd0
    67d2:	47a0      	blx	r4
    67d4:	b910      	cbnz	r0, 67dc <switch_configure+0x3f4>
    67d6:	484a      	ldr	r0, [pc, #296]	; (6900 <switch_configure+0x518>)
    67d8:	4b34      	ldr	r3, [pc, #208]	; (68ac <switch_configure+0x4c4>)
    67da:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL12, 0x80)) { xprintf("[SPI_KSZ8794_PORT4CONTROL12] not correct\r\n"); }
    67dc:	2180      	movs	r1, #128	; 0x80
    67de:	20f0      	movs	r0, #240	; 0xf0
    67e0:	47a0      	blx	r4
    67e2:	b910      	cbnz	r0, 67ea <switch_configure+0x402>
    67e4:	4847      	ldr	r0, [pc, #284]	; (6904 <switch_configure+0x51c>)
    67e6:	4b31      	ldr	r3, [pc, #196]	; (68ac <switch_configure+0x4c4>)
    67e8:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL13, 0x00)) { xprintf("[SPI_KSZ8794_PORT1CONTROL13] not correct\r\n"); }
    67ea:	2100      	movs	r1, #0
    67ec:	20b1      	movs	r0, #177	; 0xb1
    67ee:	47a0      	blx	r4
    67f0:	b910      	cbnz	r0, 67f8 <switch_configure+0x410>
    67f2:	4845      	ldr	r0, [pc, #276]	; (6908 <switch_configure+0x520>)
    67f4:	4b2d      	ldr	r3, [pc, #180]	; (68ac <switch_configure+0x4c4>)
    67f6:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL13, 0x00)) { xprintf("[SPI_KSZ8794_PORT2CONTROL13] not correct\r\n"); }
    67f8:	2100      	movs	r1, #0
    67fa:	20c1      	movs	r0, #193	; 0xc1
    67fc:	47a0      	blx	r4
    67fe:	b910      	cbnz	r0, 6806 <switch_configure+0x41e>
    6800:	4842      	ldr	r0, [pc, #264]	; (690c <switch_configure+0x524>)
    6802:	4b2a      	ldr	r3, [pc, #168]	; (68ac <switch_configure+0x4c4>)
    6804:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL13, 0x00)) { xprintf("[SPI_KSZ8794_PORT3CONTROL13] not correct\r\n"); }
    6806:	2100      	movs	r1, #0
    6808:	20d1      	movs	r0, #209	; 0xd1
    680a:	47a0      	blx	r4
    680c:	b910      	cbnz	r0, 6814 <switch_configure+0x42c>
    680e:	4840      	ldr	r0, [pc, #256]	; (6910 <switch_configure+0x528>)
    6810:	4b26      	ldr	r3, [pc, #152]	; (68ac <switch_configure+0x4c4>)
    6812:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL13, 0x00)) { xprintf("[SPI_KSZ8794_PORT4CONTROL13] not correct\r\n"); }
    6814:	2100      	movs	r1, #0
    6816:	20f1      	movs	r0, #241	; 0xf1
    6818:	47a0      	blx	r4
    681a:	b910      	cbnz	r0, 6822 <switch_configure+0x43a>
    681c:	483d      	ldr	r0, [pc, #244]	; (6914 <switch_configure+0x52c>)
    681e:	4b23      	ldr	r3, [pc, #140]	; (68ac <switch_configure+0x4c4>)
    6820:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL14, 0x88)) { xprintf("[SPI_KSZ8794_PORT1CONTROL14] not correct\r\n"); }
    6822:	2188      	movs	r1, #136	; 0x88
    6824:	20b2      	movs	r0, #178	; 0xb2
    6826:	4c3c      	ldr	r4, [pc, #240]	; (6918 <switch_configure+0x530>)
    6828:	47a0      	blx	r4
    682a:	b910      	cbnz	r0, 6832 <switch_configure+0x44a>
    682c:	483b      	ldr	r0, [pc, #236]	; (691c <switch_configure+0x534>)
    682e:	4b1f      	ldr	r3, [pc, #124]	; (68ac <switch_configure+0x4c4>)
    6830:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL14, 0x88)) { xprintf("[SPI_KSZ8794_PORT2CONTROL14] not correct\r\n"); }
    6832:	2188      	movs	r1, #136	; 0x88
    6834:	20c2      	movs	r0, #194	; 0xc2
    6836:	47a0      	blx	r4
    6838:	b910      	cbnz	r0, 6840 <switch_configure+0x458>
    683a:	4839      	ldr	r0, [pc, #228]	; (6920 <switch_configure+0x538>)
    683c:	4b1b      	ldr	r3, [pc, #108]	; (68ac <switch_configure+0x4c4>)
    683e:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL14, 0x88)) { xprintf("[SPI_KSZ8794_PORT3CONTROL14] not correct\r\n"); }
    6840:	2188      	movs	r1, #136	; 0x88
    6842:	20d2      	movs	r0, #210	; 0xd2
    6844:	47a0      	blx	r4
    6846:	b910      	cbnz	r0, 684e <switch_configure+0x466>
    6848:	4836      	ldr	r0, [pc, #216]	; (6924 <switch_configure+0x53c>)
    684a:	4b18      	ldr	r3, [pc, #96]	; (68ac <switch_configure+0x4c4>)
    684c:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL14, 0x88)) { xprintf("[SPI_KSZ8794_PORT4CONTROL14] not correct\r\n"); }
    684e:	2188      	movs	r1, #136	; 0x88
    6850:	20f2      	movs	r0, #242	; 0xf2
    6852:	47a0      	blx	r4
    6854:	b910      	cbnz	r0, 685c <switch_configure+0x474>
    6856:	4834      	ldr	r0, [pc, #208]	; (6928 <switch_configure+0x540>)
    6858:	4b14      	ldr	r3, [pc, #80]	; (68ac <switch_configure+0x4c4>)
    685a:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL15, 0x84)) { xprintf("[SPI_KSZ8794_PORT1CONTROL15] not correct\r\n"); }
    685c:	2184      	movs	r1, #132	; 0x84
    685e:	20b3      	movs	r0, #179	; 0xb3
    6860:	47a0      	blx	r4
    6862:	b910      	cbnz	r0, 686a <switch_configure+0x482>
    6864:	4831      	ldr	r0, [pc, #196]	; (692c <switch_configure+0x544>)
    6866:	4b11      	ldr	r3, [pc, #68]	; (68ac <switch_configure+0x4c4>)
    6868:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL15, 0x84)) { xprintf("[SPI_KSZ8794_PORT2CONTROL15] not correct\r\n"); }
    686a:	2184      	movs	r1, #132	; 0x84
    686c:	20c3      	movs	r0, #195	; 0xc3
    686e:	47a0      	blx	r4
    6870:	b910      	cbnz	r0, 6878 <switch_configure+0x490>
    6872:	482f      	ldr	r0, [pc, #188]	; (6930 <switch_configure+0x548>)
    6874:	4b0d      	ldr	r3, [pc, #52]	; (68ac <switch_configure+0x4c4>)
    6876:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL15, 0x84)) { xprintf("[SPI_KSZ8794_PORT3CONTROL15] not correct\r\n"); }
    6878:	2184      	movs	r1, #132	; 0x84
    687a:	20d3      	movs	r0, #211	; 0xd3
    687c:	47a0      	blx	r4
    687e:	b910      	cbnz	r0, 6886 <switch_configure+0x49e>
    6880:	482c      	ldr	r0, [pc, #176]	; (6934 <switch_configure+0x54c>)
    6882:	4b0a      	ldr	r3, [pc, #40]	; (68ac <switch_configure+0x4c4>)
    6884:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL15, 0x84)) { xprintf("[SPI_KSZ8794_PORT4CONTROL15] not correct\r\n"); }
    6886:	2184      	movs	r1, #132	; 0x84
    6888:	20f3      	movs	r0, #243	; 0xf3
    688a:	47a0      	blx	r4
    688c:	b910      	cbnz	r0, 6894 <switch_configure+0x4ac>
    688e:	482a      	ldr	r0, [pc, #168]	; (6938 <switch_configure+0x550>)
    6890:	4b06      	ldr	r3, [pc, #24]	; (68ac <switch_configure+0x4c4>)
    6892:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL16, 0x82)) { xprintf("[SPI_KSZ8794_PORT1CONTROL16] not correct\r\n"); }
    6894:	2182      	movs	r1, #130	; 0x82
    6896:	20b4      	movs	r0, #180	; 0xb4
    6898:	47a0      	blx	r4
    689a:	2800      	cmp	r0, #0
    689c:	d150      	bne.n	6940 <switch_configure+0x558>
    689e:	4827      	ldr	r0, [pc, #156]	; (693c <switch_configure+0x554>)
    68a0:	4b02      	ldr	r3, [pc, #8]	; (68ac <switch_configure+0x4c4>)
    68a2:	4798      	blx	r3
    68a4:	e04c      	b.n	6940 <switch_configure+0x558>
    68a6:	bf00      	nop
    68a8:	0000c88b 	.word	0x0000c88b
    68ac:	00000395 	.word	0x00000395
    68b0:	0000c8b5 	.word	0x0000c8b5
    68b4:	0000c8df 	.word	0x0000c8df
    68b8:	0000c909 	.word	0x0000c909
    68bc:	0000c933 	.word	0x0000c933
    68c0:	0000c95d 	.word	0x0000c95d
    68c4:	0000c987 	.word	0x0000c987
    68c8:	0000c9b1 	.word	0x0000c9b1
    68cc:	0000c9db 	.word	0x0000c9db
    68d0:	0000ca05 	.word	0x0000ca05
    68d4:	0000ca2d 	.word	0x0000ca2d
    68d8:	0000ca55 	.word	0x0000ca55
    68dc:	0000ca7d 	.word	0x0000ca7d
    68e0:	0000caa7 	.word	0x0000caa7
    68e4:	0000cad1 	.word	0x0000cad1
    68e8:	0000cafb 	.word	0x0000cafb
    68ec:	0000cb26 	.word	0x0000cb26
    68f0:	0000cb51 	.word	0x0000cb51
    68f4:	0000cb7c 	.word	0x0000cb7c
    68f8:	0000cba7 	.word	0x0000cba7
    68fc:	0000cbd2 	.word	0x0000cbd2
    6900:	0000cbfd 	.word	0x0000cbfd
    6904:	0000cc28 	.word	0x0000cc28
    6908:	0000cc53 	.word	0x0000cc53
    690c:	0000cc7e 	.word	0x0000cc7e
    6910:	0000cca9 	.word	0x0000cca9
    6914:	0000ccd4 	.word	0x0000ccd4
    6918:	0000ac51 	.word	0x0000ac51
    691c:	0000ccff 	.word	0x0000ccff
    6920:	0000cd2a 	.word	0x0000cd2a
    6924:	0000cd55 	.word	0x0000cd55
    6928:	0000cd80 	.word	0x0000cd80
    692c:	0000cdab 	.word	0x0000cdab
    6930:	0000cdd6 	.word	0x0000cdd6
    6934:	0000ce01 	.word	0x0000ce01
    6938:	0000ce2c 	.word	0x0000ce2c
    693c:	0000ce57 	.word	0x0000ce57
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL16, 0x82)) { xprintf("[SPI_KSZ8794_PORT2CONTROL16] not correct\r\n"); }
    6940:	2182      	movs	r1, #130	; 0x82
    6942:	20c4      	movs	r0, #196	; 0xc4
    6944:	47a0      	blx	r4
    6946:	b910      	cbnz	r0, 694e <switch_configure+0x566>
    6948:	481f      	ldr	r0, [pc, #124]	; (69c8 <switch_configure+0x5e0>)
    694a:	4b20      	ldr	r3, [pc, #128]	; (69cc <switch_configure+0x5e4>)
    694c:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL16, 0x82)) { xprintf("[SPI_KSZ8794_PORT3CONTROL16] not correct\r\n"); }
    694e:	2182      	movs	r1, #130	; 0x82
    6950:	20d4      	movs	r0, #212	; 0xd4
    6952:	47a0      	blx	r4
    6954:	b910      	cbnz	r0, 695c <switch_configure+0x574>
    6956:	481e      	ldr	r0, [pc, #120]	; (69d0 <switch_configure+0x5e8>)
    6958:	4b1c      	ldr	r3, [pc, #112]	; (69cc <switch_configure+0x5e4>)
    695a:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL16, 0x82)) { xprintf("[SPI_KSZ8794_PORT4CONTROL16] not correct\r\n"); }
    695c:	2182      	movs	r1, #130	; 0x82
    695e:	20f4      	movs	r0, #244	; 0xf4
    6960:	47a0      	blx	r4
    6962:	b910      	cbnz	r0, 696a <switch_configure+0x582>
    6964:	481b      	ldr	r0, [pc, #108]	; (69d4 <switch_configure+0x5ec>)
    6966:	4b19      	ldr	r3, [pc, #100]	; (69cc <switch_configure+0x5e4>)
    6968:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL17, 0x81)) { xprintf("[SPI_KSZ8794_PORT1CONTROL17] not correct\r\n"); }
    696a:	2181      	movs	r1, #129	; 0x81
    696c:	20b5      	movs	r0, #181	; 0xb5
    696e:	47a0      	blx	r4
    6970:	b910      	cbnz	r0, 6978 <switch_configure+0x590>
    6972:	4819      	ldr	r0, [pc, #100]	; (69d8 <switch_configure+0x5f0>)
    6974:	4b15      	ldr	r3, [pc, #84]	; (69cc <switch_configure+0x5e4>)
    6976:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL17, 0x81)) { xprintf("[SPI_KSZ8794_PORT2CONTROL17] not correct\r\n"); }
    6978:	2181      	movs	r1, #129	; 0x81
    697a:	20c5      	movs	r0, #197	; 0xc5
    697c:	47a0      	blx	r4
    697e:	b910      	cbnz	r0, 6986 <switch_configure+0x59e>
    6980:	4816      	ldr	r0, [pc, #88]	; (69dc <switch_configure+0x5f4>)
    6982:	4b12      	ldr	r3, [pc, #72]	; (69cc <switch_configure+0x5e4>)
    6984:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL17, 0x81)) { xprintf("[SPI_KSZ8794_PORT3CONTROL17] not correct\r\n"); }
    6986:	2181      	movs	r1, #129	; 0x81
    6988:	20d5      	movs	r0, #213	; 0xd5
    698a:	47a0      	blx	r4
    698c:	b910      	cbnz	r0, 6994 <switch_configure+0x5ac>
    698e:	4814      	ldr	r0, [pc, #80]	; (69e0 <switch_configure+0x5f8>)
    6990:	4b0e      	ldr	r3, [pc, #56]	; (69cc <switch_configure+0x5e4>)
    6992:	4798      	blx	r3
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL17, 0x81)) { xprintf("[SPI_KSZ8794_PORT4CONTROL17] not correct\r\n"); }
    6994:	2181      	movs	r1, #129	; 0x81
    6996:	20f5      	movs	r0, #245	; 0xf5
    6998:	47a0      	blx	r4
    699a:	b910      	cbnz	r0, 69a2 <switch_configure+0x5ba>
    699c:	4811      	ldr	r0, [pc, #68]	; (69e4 <switch_configure+0x5fc>)
    699e:	4b0b      	ldr	r3, [pc, #44]	; (69cc <switch_configure+0x5e4>)
    69a0:	4798      	blx	r3
		
	/* Start the Ethernet SWITCH operation */
	writeKSZreg(SPI_KSZ8794_START, 0x01);
    69a2:	2101      	movs	r1, #1
    69a4:	4608      	mov	r0, r1
    69a6:	4b10      	ldr	r3, [pc, #64]	; (69e8 <switch_configure+0x600>)
    69a8:	4798      	blx	r3
	delay_us(50);
    69aa:	2032      	movs	r0, #50	; 0x32
    69ac:	4b0f      	ldr	r3, [pc, #60]	; (69ec <switch_configure+0x604>)
    69ae:	4798      	blx	r3
	
	/* Check it has re-started and running */
	if (!checkKSZreg(SPI_KSZ8794_START, 0x61))			{ xprintf("[SPI_KSZ8794_START final] not correct\r\n"); }
    69b0:	2161      	movs	r1, #97	; 0x61
    69b2:	2001      	movs	r0, #1
    69b4:	47a0      	blx	r4
    69b6:	b920      	cbnz	r0, 69c2 <switch_configure+0x5da>
    69b8:	480d      	ldr	r0, [pc, #52]	; (69f0 <switch_configure+0x608>)
    69ba:	4b04      	ldr	r3, [pc, #16]	; (69cc <switch_configure+0x5e4>)
	/* Completed set-up commands to the KSZ Ethernet SWITCH via SPI bus */
}
    69bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	if (!checkKSZreg(SPI_KSZ8794_START, 0x61))			{ xprintf("[SPI_KSZ8794_START final] not correct\r\n"); }
    69c0:	4718      	bx	r3
    69c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    69c6:	bf00      	nop
    69c8:	0000ce82 	.word	0x0000ce82
    69cc:	00000395 	.word	0x00000395
    69d0:	0000cead 	.word	0x0000cead
    69d4:	0000ced8 	.word	0x0000ced8
    69d8:	0000cf03 	.word	0x0000cf03
    69dc:	0000cf2e 	.word	0x0000cf2e
    69e0:	0000cf59 	.word	0x0000cf59
    69e4:	0000cf84 	.word	0x0000cf84
    69e8:	0000acc1 	.word	0x0000acc1
    69ec:	00001229 	.word	0x00001229
    69f0:	0000cfaf 	.word	0x0000cfaf

000069f4 <address_configure>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: from the ID value, set the global IP address, IP scheme and MAC address
// Returns:     Nothing
// *****************************************************************************************************************************************************************
void address_configure(void)
{	
    69f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (((CONFIG *)&settings_buffer)->ID == 0x00000000) {
    69f8:	4f6d      	ldr	r7, [pc, #436]	; (6bb0 <address_configure+0x1bc>)
    69fa:	4d6e      	ldr	r5, [pc, #440]	; (6bb4 <address_configure+0x1c0>)
    69fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
{	
    69fe:	b08f      	sub	sp, #60	; 0x3c
	if (((CONFIG *)&settings_buffer)->ID == 0x00000000) {
    6a00:	b92b      	cbnz	r3, 6a0e <address_configure+0x1a>
		xprintf("MAC address and IP scheme not initialized as there is no [ID] set...\r\n");
    6a02:	486d      	ldr	r0, [pc, #436]	; (6bb8 <address_configure+0x1c4>)
	ring_socket = uip_udp_new(&broadcast, htons(RING_MANAGEMENT_SOCKET));
	if (ring_socket != NULL) {
		uip_udp_bind(ring_socket, htons(RING_MANAGEMENT_SOCKET));
		xprintf("Ring Management UDP socket created...\r\n");
	} else {
		xprintf("Ring Management UDP socket ERROR!!!!!!!\r\n");
    6a04:	462b      	mov	r3, r5
	}
}
    6a06:	b00f      	add	sp, #60	; 0x3c
    6a08:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		xprintf("Ring Management UDP socket ERROR!!!!!!!\r\n");
    6a0c:	4718      	bx	r3
	mac_raw[0] = macaddress.addr[0] = MAC_ADDR_00;
    6a0e:	4a6b      	ldr	r2, [pc, #428]	; (6bbc <address_configure+0x1c8>)
    6a10:	4c6b      	ldr	r4, [pc, #428]	; (6bc0 <address_configure+0x1cc>)
    6a12:	f04f 0cc2 	mov.w	ip, #194	; 0xc2
	mac_raw[1] = macaddress.addr[1] = MAC_ADDR_01;
    6a16:	f04f 0e50 	mov.w	lr, #80	; 0x50
	mac_raw[2] = macaddress.addr[2] = (uint8_t)(((((CONFIG *)&settings_buffer)->ID) >> 24 & 0x00FF));
    6a1a:	0e1e      	lsrs	r6, r3, #24
	mac_raw[3] = macaddress.addr[3] = (uint8_t)(((((CONFIG *)&settings_buffer)->ID) >> 16) & 0x00FF);
    6a1c:	f3c3 4007 	ubfx	r0, r3, #16, #8
	mac_raw[4] = macaddress.addr[4] = (uint8_t)(((((CONFIG *)&settings_buffer)->ID) >> 8) & 0x00FF);
    6a20:	f3c3 2107 	ubfx	r1, r3, #8, #8
    mac_raw[5] = macaddress.addr[5] = (uint8_t)((((CONFIG *)&settings_buffer)->ID) & 0x00FF);
    6a24:	b2db      	uxtb	r3, r3
	mac_raw[0] = macaddress.addr[0] = MAC_ADDR_00;
    6a26:	f882 c000 	strb.w	ip, [r2]
	mac_raw[1] = macaddress.addr[1] = MAC_ADDR_01;
    6a2a:	f882 e001 	strb.w	lr, [r2, #1]
	mac_raw[2] = macaddress.addr[2] = (uint8_t)(((((CONFIG *)&settings_buffer)->ID) >> 24 & 0x00FF));
    6a2e:	7096      	strb	r6, [r2, #2]
	mac_raw[3] = macaddress.addr[3] = (uint8_t)(((((CONFIG *)&settings_buffer)->ID) >> 16) & 0x00FF);
    6a30:	70d0      	strb	r0, [r2, #3]
	mac_raw[4] = macaddress.addr[4] = (uint8_t)(((((CONFIG *)&settings_buffer)->ID) >> 8) & 0x00FF);
    6a32:	7111      	strb	r1, [r2, #4]
    mac_raw[5] = macaddress.addr[5] = (uint8_t)((((CONFIG *)&settings_buffer)->ID) & 0x00FF);
    6a34:	7153      	strb	r3, [r2, #5]
	uip_setethaddr(macaddress);
    6a36:	4a63      	ldr	r2, [pc, #396]	; (6bc4 <address_configure+0x1d0>)
	mac_raw[3] = macaddress.addr[3] = (uint8_t)(((((CONFIG *)&settings_buffer)->ID) >> 16) & 0x00FF);
    6a38:	70e0      	strb	r0, [r4, #3]
	uip_setethaddr(macaddress);
    6a3a:	70d0      	strb	r0, [r2, #3]
    6a3c:	7111      	strb	r1, [r2, #4]
    6a3e:	7153      	strb	r3, [r2, #5]
	mac_raw[4] = macaddress.addr[4] = (uint8_t)(((((CONFIG *)&settings_buffer)->ID) >> 8) & 0x00FF);
    6a40:	7121      	strb	r1, [r4, #4]
    mac_raw[5] = macaddress.addr[5] = (uint8_t)((((CONFIG *)&settings_buffer)->ID) & 0x00FF);
    6a42:	7163      	strb	r3, [r4, #5]
	mac_async_set_filter_ex(&ETHERNET_MAC_0, mac_raw);
    6a44:	4621      	mov	r1, r4
    6a46:	4b60      	ldr	r3, [pc, #384]	; (6bc8 <address_configure+0x1d4>)
    6a48:	4860      	ldr	r0, [pc, #384]	; (6bcc <address_configure+0x1d8>)
	mac_raw[0] = macaddress.addr[0] = MAC_ADDR_00;
    6a4a:	f884 c000 	strb.w	ip, [r4]
	mac_raw[1] = macaddress.addr[1] = MAC_ADDR_01;
    6a4e:	f884 e001 	strb.w	lr, [r4, #1]
	uip_setethaddr(macaddress);
    6a52:	f882 c000 	strb.w	ip, [r2]
    6a56:	f882 e001 	strb.w	lr, [r2, #1]
    6a5a:	7096      	strb	r6, [r2, #2]
	mac_raw[2] = macaddress.addr[2] = (uint8_t)(((((CONFIG *)&settings_buffer)->ID) >> 24 & 0x00FF));
    6a5c:	70a6      	strb	r6, [r4, #2]
	mac_async_set_filter_ex(&ETHERNET_MAC_0, mac_raw);
    6a5e:	4798      	blx	r3
	uip_ipaddr(&ipaddr, 192, 168, (uint8_t)((((CONFIG *)&settings_buffer)->ID) / 250), 1 + (uint8_t)((((CONFIG *)&settings_buffer)->ID) % 250));
    6a60:	4e5b      	ldr	r6, [pc, #364]	; (6bd0 <address_configure+0x1dc>)
	mac_async_enable(&ETHERNET_MAC_0);
    6a62:	4b5c      	ldr	r3, [pc, #368]	; (6bd4 <address_configure+0x1e0>)
    6a64:	4859      	ldr	r0, [pc, #356]	; (6bcc <address_configure+0x1d8>)
    6a66:	4798      	blx	r3
	uip_ipaddr(&ipaddr, 192, 168, (uint8_t)((((CONFIG *)&settings_buffer)->ID) / 250), 1 + (uint8_t)((((CONFIG *)&settings_buffer)->ID) % 250));
    6a68:	f64a 00c0 	movw	r0, #43200	; 0xa8c0
    6a6c:	8030      	strh	r0, [r6, #0]
    6a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	uip_ipaddr(&netmask, 255, 255, 0, 0);
    6a70:	f8df e1b0 	ldr.w	lr, [pc, #432]	; 6c24 <address_configure+0x230>
	uip_ipaddr(&gwaddr, 192, 168, 0, 1);									// IP address of CPU Server on installation network is always "192.168.0.1". This address can NOT be held by any Multi-Sense node
    6a74:	4f58      	ldr	r7, [pc, #352]	; (6bd8 <address_configure+0x1e4>)
	xprintf("MultiSense [init MAC/IP values] %x:%x:%x:%x:%x:%x %d.%d.%d.%d\r\n", mac_raw[0], mac_raw[1], mac_raw[2], mac_raw[3], mac_raw[4], mac_raw[5], uip_ipaddr1(ipaddr), uip_ipaddr2(ipaddr), uip_ipaddr3(ipaddr), uip_ipaddr4(ipaddr));
    6a76:	f894 b002 	ldrb.w	fp, [r4, #2]
	uip_ipaddr(&gwaddr, 192, 168, 0, 1);									// IP address of CPU Server on installation network is always "192.168.0.1". This address can NOT be held by any Multi-Sense node
    6a7a:	8038      	strh	r0, [r7, #0]
	uip_ipaddr(&ipaddr, 192, 168, (uint8_t)((((CONFIG *)&settings_buffer)->ID) / 250), 1 + (uint8_t)((((CONFIG *)&settings_buffer)->ID) % 250));
    6a7c:	22fa      	movs	r2, #250	; 0xfa
    6a7e:	fbb3 f1f2 	udiv	r1, r3, r2
    6a82:	fb02 3311 	mls	r3, r2, r1, r3
    6a86:	3301      	adds	r3, #1
    6a88:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    6a8c:	b29b      	uxth	r3, r3
    6a8e:	0a1a      	lsrs	r2, r3, #8
	uip_ipaddr(&netmask, 255, 255, 0, 0);
    6a90:	f04f 0c00 	mov.w	ip, #0
	uip_ipaddr(&ipaddr, 192, 168, (uint8_t)((((CONFIG *)&settings_buffer)->ID) / 250), 1 + (uint8_t)((((CONFIG *)&settings_buffer)->ID) % 250));
    6a94:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	uip_ipaddr(&netmask, 255, 255, 0, 0);
    6a98:	f64f 72ff 	movw	r2, #65535	; 0xffff
    6a9c:	f8ae c002 	strh.w	ip, [lr, #2]
    6aa0:	f8ae 2000 	strh.w	r2, [lr]
	uip_ipaddr(&broadcast, 255, 255, 255, 255);
    6aa4:	f8df e160 	ldr.w	lr, [pc, #352]	; 6c08 <address_configure+0x214>
    6aa8:	f8ae 2000 	strh.w	r2, [lr]
    6aac:	f8ae 2002 	strh.w	r2, [lr, #2]
	uip_sethostaddr(&ipaddr);
    6ab0:	4a4a      	ldr	r2, [pc, #296]	; (6bdc <address_configure+0x1e8>)
	uip_ipaddr(&ipaddr, 192, 168, (uint8_t)((((CONFIG *)&settings_buffer)->ID) / 250), 1 + (uint8_t)((((CONFIG *)&settings_buffer)->ID) % 250));
    6ab2:	b29b      	uxth	r3, r3
    6ab4:	8073      	strh	r3, [r6, #2]
	uip_sethostaddr(&ipaddr);
    6ab6:	8053      	strh	r3, [r2, #2]
	uip_setnetmask(&gwaddr);
    6ab8:	4b49      	ldr	r3, [pc, #292]	; (6be0 <address_configure+0x1ec>)
	uip_sethostaddr(&ipaddr);
    6aba:	8010      	strh	r0, [r2, #0]
	uip_ipaddr(&gwaddr, 192, 168, 0, 1);									// IP address of CPU Server on installation network is always "192.168.0.1". This address can NOT be held by any Multi-Sense node
    6abc:	f44f 7180 	mov.w	r1, #256	; 0x100
	uip_setnetmask(&gwaddr);
    6ac0:	8059      	strh	r1, [r3, #2]
    6ac2:	8018      	strh	r0, [r3, #0]
	xprintf("MultiSense [init MAC/IP values] %x:%x:%x:%x:%x:%x %d.%d.%d.%d\r\n", mac_raw[0], mac_raw[1], mac_raw[2], mac_raw[3], mac_raw[4], mac_raw[5], uip_ipaddr1(ipaddr), uip_ipaddr2(ipaddr), uip_ipaddr3(ipaddr), uip_ipaddr4(ipaddr));
    6ac4:	78e3      	ldrb	r3, [r4, #3]
    6ac6:	930b      	str	r3, [sp, #44]	; 0x2c
    6ac8:	7923      	ldrb	r3, [r4, #4]
    6aca:	7862      	ldrb	r2, [r4, #1]
	uip_ipaddr(&gwaddr, 192, 168, 0, 1);									// IP address of CPU Server on installation network is always "192.168.0.1". This address can NOT be held by any Multi-Sense node
    6acc:	8079      	strh	r1, [r7, #2]
	xprintf("MultiSense [init MAC/IP values] %x:%x:%x:%x:%x:%x %d.%d.%d.%d\r\n", mac_raw[0], mac_raw[1], mac_raw[2], mac_raw[3], mac_raw[4], mac_raw[5], uip_ipaddr1(ipaddr), uip_ipaddr2(ipaddr), uip_ipaddr3(ipaddr), uip_ipaddr4(ipaddr));
    6ace:	9309      	str	r3, [sp, #36]	; 0x24
    6ad0:	7821      	ldrb	r1, [r4, #0]
    6ad2:	7963      	ldrb	r3, [r4, #5]
    6ad4:	4c43      	ldr	r4, [pc, #268]	; (6be4 <address_configure+0x1f0>)
    6ad6:	910d      	str	r1, [sp, #52]	; 0x34
    6ad8:	920c      	str	r2, [sp, #48]	; 0x30
    6ada:	930a      	str	r3, [sp, #40]	; 0x28
    6adc:	47a0      	blx	r4
    6ade:	4680      	mov	r8, r0
    6ae0:	8830      	ldrh	r0, [r6, #0]
    6ae2:	47a0      	blx	r4
    6ae4:	4681      	mov	r9, r0
    6ae6:	8870      	ldrh	r0, [r6, #2]
    6ae8:	47a0      	blx	r4
    6aea:	4682      	mov	sl, r0
    6aec:	8870      	ldrh	r0, [r6, #2]
	main_socket = uip_udp_new(&gwaddr, htons(MAIN_UDPSOCKET));
    6aee:	4e3e      	ldr	r6, [pc, #248]	; (6be8 <address_configure+0x1f4>)
	xprintf("MultiSense [init MAC/IP values] %x:%x:%x:%x:%x:%x %d.%d.%d.%d\r\n", mac_raw[0], mac_raw[1], mac_raw[2], mac_raw[3], mac_raw[4], mac_raw[5], uip_ipaddr1(ipaddr), uip_ipaddr2(ipaddr), uip_ipaddr3(ipaddr), uip_ipaddr4(ipaddr));
    6af0:	47a0      	blx	r4
    6af2:	b2c0      	uxtb	r0, r0
    6af4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6af6:	9006      	str	r0, [sp, #24]
    6af8:	f3ca 200f 	ubfx	r0, sl, #8, #16
    6afc:	9005      	str	r0, [sp, #20]
    6afe:	9302      	str	r3, [sp, #8]
    6b00:	fa5f f089 	uxtb.w	r0, r9
    6b04:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6b06:	9004      	str	r0, [sp, #16]
    6b08:	9301      	str	r3, [sp, #4]
    6b0a:	f3c8 200f 	ubfx	r0, r8, #8, #16
    6b0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6b10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    6b12:	990d      	ldr	r1, [sp, #52]	; 0x34
    6b14:	9003      	str	r0, [sp, #12]
    6b16:	9300      	str	r3, [sp, #0]
    6b18:	4834      	ldr	r0, [pc, #208]	; (6bec <address_configure+0x1f8>)
    6b1a:	465b      	mov	r3, fp
    6b1c:	47a8      	blx	r5
	main_socket = uip_udp_new(&gwaddr, htons(MAIN_UDPSOCKET));
    6b1e:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
    6b22:	47a0      	blx	r4
    6b24:	4601      	mov	r1, r0
    6b26:	4638      	mov	r0, r7
    6b28:	47b0      	blx	r6
    6b2a:	4b31      	ldr	r3, [pc, #196]	; (6bf0 <address_configure+0x1fc>)
    6b2c:	4607      	mov	r7, r0
    6b2e:	6018      	str	r0, [r3, #0]
	if (main_socket != NULL) {
    6b30:	2800      	cmp	r0, #0
    6b32:	d035      	beq.n	6ba0 <address_configure+0x1ac>
		uip_udp_bind(main_socket, htons(MAIN_UDPSOCKET));
    6b34:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
    6b38:	47a0      	blx	r4
    6b3a:	80b8      	strh	r0, [r7, #4]
		xprintf("Main UDP socket created...\r\n");
    6b3c:	482d      	ldr	r0, [pc, #180]	; (6bf4 <address_configure+0x200>)
		xprintf("Main UDP socket ERROR!!!!!!!\r\n");
    6b3e:	47a8      	blx	r5
	cardA_socket = uip_udp_new(&gwaddr, htons(CARDA_UDPSOCKET));
    6b40:	f640 70a1 	movw	r0, #4001	; 0xfa1
    6b44:	47a0      	blx	r4
    6b46:	4601      	mov	r1, r0
    6b48:	4823      	ldr	r0, [pc, #140]	; (6bd8 <address_configure+0x1e4>)
    6b4a:	47b0      	blx	r6
    6b4c:	4b2a      	ldr	r3, [pc, #168]	; (6bf8 <address_configure+0x204>)
    6b4e:	4607      	mov	r7, r0
    6b50:	6018      	str	r0, [r3, #0]
	if (cardA_socket != NULL) {
    6b52:	b338      	cbz	r0, 6ba4 <address_configure+0x1b0>
		uip_udp_bind(cardA_socket, htons(CARDA_UDPSOCKET));
    6b54:	f640 70a1 	movw	r0, #4001	; 0xfa1
    6b58:	47a0      	blx	r4
    6b5a:	80b8      	strh	r0, [r7, #4]
		xprintf("Card [A] UDP socket created...\r\n");
    6b5c:	4827      	ldr	r0, [pc, #156]	; (6bfc <address_configure+0x208>)
		xprintf("Card [A] UDP socket ERROR!!!!!!!\r\n");
    6b5e:	47a8      	blx	r5
	cardB_socket = uip_udp_new(&gwaddr, htons(CARDB_UDPSOCKET));
    6b60:	f640 70a2 	movw	r0, #4002	; 0xfa2
    6b64:	47a0      	blx	r4
    6b66:	4601      	mov	r1, r0
    6b68:	481b      	ldr	r0, [pc, #108]	; (6bd8 <address_configure+0x1e4>)
    6b6a:	47b0      	blx	r6
    6b6c:	4b24      	ldr	r3, [pc, #144]	; (6c00 <address_configure+0x20c>)
    6b6e:	4607      	mov	r7, r0
    6b70:	6018      	str	r0, [r3, #0]
	if (cardB_socket != NULL) {
    6b72:	b1c8      	cbz	r0, 6ba8 <address_configure+0x1b4>
		uip_udp_bind(cardB_socket, htons(CARDB_UDPSOCKET));
    6b74:	f640 70a2 	movw	r0, #4002	; 0xfa2
    6b78:	47a0      	blx	r4
    6b7a:	80b8      	strh	r0, [r7, #4]
		xprintf("Card [B] UDP socket created...\r\n");
    6b7c:	4821      	ldr	r0, [pc, #132]	; (6c04 <address_configure+0x210>)
		xprintf("Card [B] UDP socket ERROR!!!!!!!\r\n");
    6b7e:	47a8      	blx	r5
	ring_socket = uip_udp_new(&broadcast, htons(RING_MANAGEMENT_SOCKET));
    6b80:	f640 70a3 	movw	r0, #4003	; 0xfa3
    6b84:	47a0      	blx	r4
    6b86:	4601      	mov	r1, r0
    6b88:	481f      	ldr	r0, [pc, #124]	; (6c08 <address_configure+0x214>)
    6b8a:	47b0      	blx	r6
    6b8c:	4b1f      	ldr	r3, [pc, #124]	; (6c0c <address_configure+0x218>)
    6b8e:	4606      	mov	r6, r0
    6b90:	6018      	str	r0, [r3, #0]
	if (ring_socket != NULL) {
    6b92:	b158      	cbz	r0, 6bac <address_configure+0x1b8>
		uip_udp_bind(ring_socket, htons(RING_MANAGEMENT_SOCKET));
    6b94:	f640 70a3 	movw	r0, #4003	; 0xfa3
    6b98:	47a0      	blx	r4
    6b9a:	80b0      	strh	r0, [r6, #4]
		xprintf("Ring Management UDP socket created...\r\n");
    6b9c:	481c      	ldr	r0, [pc, #112]	; (6c10 <address_configure+0x21c>)
    6b9e:	e731      	b.n	6a04 <address_configure+0x10>
		xprintf("Main UDP socket ERROR!!!!!!!\r\n");
    6ba0:	481c      	ldr	r0, [pc, #112]	; (6c14 <address_configure+0x220>)
    6ba2:	e7cc      	b.n	6b3e <address_configure+0x14a>
		xprintf("Card [A] UDP socket ERROR!!!!!!!\r\n");
    6ba4:	481c      	ldr	r0, [pc, #112]	; (6c18 <address_configure+0x224>)
    6ba6:	e7da      	b.n	6b5e <address_configure+0x16a>
		xprintf("Card [B] UDP socket ERROR!!!!!!!\r\n");
    6ba8:	481c      	ldr	r0, [pc, #112]	; (6c1c <address_configure+0x228>)
    6baa:	e7e8      	b.n	6b7e <address_configure+0x18a>
		xprintf("Ring Management UDP socket ERROR!!!!!!!\r\n");
    6bac:	481c      	ldr	r0, [pc, #112]	; (6c20 <address_configure+0x22c>)
    6bae:	e729      	b.n	6a04 <address_configure+0x10>
    6bb0:	20007f14 	.word	0x20007f14
    6bb4:	00000395 	.word	0x00000395
    6bb8:	0000cfd7 	.word	0x0000cfd7
    6bbc:	2000852e 	.word	0x2000852e
    6bc0:	20007f94 	.word	0x20007f94
    6bc4:	200072c2 	.word	0x200072c2
    6bc8:	00001665 	.word	0x00001665
    6bcc:	20007528 	.word	0x20007528
    6bd0:	2000758c 	.word	0x2000758c
    6bd4:	000015a5 	.word	0x000015a5
    6bd8:	20008522 	.word	0x20008522
    6bdc:	2000861e 	.word	0x2000861e
    6be0:	2000861a 	.word	0x2000861a
    6be4:	00009e19 	.word	0x00009e19
    6be8:	00009151 	.word	0x00009151
    6bec:	0000d01e 	.word	0x0000d01e
    6bf0:	2000783c 	.word	0x2000783c
    6bf4:	0000d05e 	.word	0x0000d05e
    6bf8:	20007588 	.word	0x20007588
    6bfc:	0000d09a 	.word	0x0000d09a
    6c00:	20007f0c 	.word	0x20007f0c
    6c04:	0000d0de 	.word	0x0000d0de
    6c08:	20008542 	.word	0x20008542
    6c0c:	20008254 	.word	0x20008254
    6c10:	0000d122 	.word	0x0000d122
    6c14:	0000d07b 	.word	0x0000d07b
    6c18:	0000d0bb 	.word	0x0000d0bb
    6c1c:	0000d0ff 	.word	0x0000d0ff
    6c20:	0000d14a 	.word	0x0000d14a
    6c24:	20007f10 	.word	0x20007f10

00006c28 <gpio_init>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: define, set and configure the [GPIO] characteristics of the SAM CPU IC
// Returns:     Nothing
// *****************************************************************************************************************************************************************
void gpio_init(void)
{
    6c28:	b538      	push	{r3, r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6c2a:	4c6e      	ldr	r4, [pc, #440]	; (6de4 <gpio_init+0x1bc>)
	gpio_set_pin_function(PB12_SPI_MOSI, GPIO_PIN_FUNCTION_OFF);
	gpio_set_pin_function(PB13_SPI_MISO, GPIO_PIN_FUNCTION_OFF);
	gpio_set_pin_function(PB15_SPI_CLK, GPIO_PIN_FUNCTION_OFF);

	/* Set all GPIO MultiSense pins to their respective INPUT or OUTPUT directions */
	gpio_set_pin_direction(PB00_KSZ_RESET, GPIO_DIRECTION_OUT);
    6c2c:	4d6e      	ldr	r5, [pc, #440]	; (6de8 <gpio_init+0x1c0>)
    6c2e:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
	tmp &= ~PORT_PINCFG_PMUXEN;
    6c32:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6c36:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6c3a:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
	tmp &= ~PORT_PINCFG_PMUXEN;
    6c3e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6c42:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6c46:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
	tmp &= ~PORT_PINCFG_PMUXEN;
    6c4a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6c4e:	f884 30c3 	strb.w	r3, [r4, #195]	; 0xc3
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6c52:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
	tmp &= ~PORT_PINCFG_PMUXEN;
    6c56:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6c5a:	f884 30c4 	strb.w	r3, [r4, #196]	; 0xc4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6c5e:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
	tmp &= ~PORT_PINCFG_PMUXEN;
    6c62:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6c66:	f884 30c5 	strb.w	r3, [r4, #197]	; 0xc5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6c6a:	f894 30c6 	ldrb.w	r3, [r4, #198]	; 0xc6
	tmp &= ~PORT_PINCFG_PMUXEN;
    6c6e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6c72:	f884 30c6 	strb.w	r3, [r4, #198]	; 0xc6
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6c76:	f894 30c7 	ldrb.w	r3, [r4, #199]	; 0xc7
	tmp &= ~PORT_PINCFG_PMUXEN;
    6c7a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6c7e:	f884 30c7 	strb.w	r3, [r4, #199]	; 0xc7
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6c82:	f894 3140 	ldrb.w	r3, [r4, #320]	; 0x140
	tmp &= ~PORT_PINCFG_PMUXEN;
    6c86:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6c8a:	f884 3140 	strb.w	r3, [r4, #320]	; 0x140
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6c8e:	f894 3141 	ldrb.w	r3, [r4, #321]	; 0x141
	tmp &= ~PORT_PINCFG_PMUXEN;
    6c92:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6c96:	f884 3141 	strb.w	r3, [r4, #321]	; 0x141
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6c9a:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
	tmp &= ~PORT_PINCFG_PMUXEN;
    6c9e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6ca2:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6ca6:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
	tmp &= ~PORT_PINCFG_PMUXEN;
    6caa:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6cae:	f884 30d9 	strb.w	r3, [r4, #217]	; 0xd9
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6cb2:	f894 315b 	ldrb.w	r3, [r4, #347]	; 0x15b
	tmp &= ~PORT_PINCFG_PMUXEN;
    6cb6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6cba:	f884 315b 	strb.w	r3, [r4, #347]	; 0x15b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6cbe:	f894 315c 	ldrb.w	r3, [r4, #348]	; 0x15c
	tmp &= ~PORT_PINCFG_PMUXEN;
    6cc2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6cc6:	f884 315c 	strb.w	r3, [r4, #348]	; 0x15c
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6cca:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
	tmp &= ~PORT_PINCFG_PMUXEN;
    6cce:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6cd2:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6cd6:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
	tmp &= ~PORT_PINCFG_PMUXEN;
    6cda:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6cde:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6ce2:	f894 30cf 	ldrb.w	r3, [r4, #207]	; 0xcf
    6ce6:	2102      	movs	r1, #2
	tmp &= ~PORT_PINCFG_PMUXEN;
    6ce8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    6cec:	2020      	movs	r0, #32
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6cee:	f884 30cf 	strb.w	r3, [r4, #207]	; 0xcf
    6cf2:	47a8      	blx	r5
	gpio_set_pin_direction(PB02_TAMP_OP, GPIO_DIRECTION_IN);
    6cf4:	2101      	movs	r1, #1
    6cf6:	2022      	movs	r0, #34	; 0x22
    6cf8:	47a8      	blx	r5
	gpio_set_pin_direction(PB03_LED_ETH, GPIO_DIRECTION_OUT);
    6cfa:	2102      	movs	r1, #2
    6cfc:	2023      	movs	r0, #35	; 0x23
    6cfe:	47a8      	blx	r5
	gpio_set_pin_direction(PB04_LED_PWR, GPIO_DIRECTION_OUT);
    6d00:	2102      	movs	r1, #2
    6d02:	2024      	movs	r0, #36	; 0x24
    6d04:	47a8      	blx	r5
	gpio_set_pin_direction(PB05_SPInCS_CARDA, GPIO_DIRECTION_OUT);
    6d06:	2102      	movs	r1, #2
    6d08:	2025      	movs	r0, #37	; 0x25
    6d0a:	47a8      	blx	r5
	gpio_set_pin_direction(PB06_SPInCS_CARDB, GPIO_DIRECTION_OUT);
    6d0c:	2102      	movs	r1, #2
    6d0e:	2026      	movs	r0, #38	; 0x26
    6d10:	47a8      	blx	r5
	gpio_set_pin_direction(PB07_SPInCS_KSZ8974, GPIO_DIRECTION_OUT);
    6d12:	2102      	movs	r1, #2
    6d14:	2027      	movs	r0, #39	; 0x27
    6d16:	47a8      	blx	r5
	gpio_set_pin_direction(PC00_CARDA_PRESENT, GPIO_DIRECTION_IN);
    6d18:	2101      	movs	r1, #1
    6d1a:	2040      	movs	r0, #64	; 0x40
    6d1c:	47a8      	blx	r5
	gpio_set_pin_direction(PC01_CARDB_PRESENT, GPIO_DIRECTION_IN);
    6d1e:	2101      	movs	r1, #1
    6d20:	2041      	movs	r0, #65	; 0x41
    6d22:	47a8      	blx	r5
	gpio_set_pin_direction(PB24_CARDB_I2C_SDA, GPIO_DIRECTION_IN);
    6d24:	2101      	movs	r1, #1
    6d26:	2038      	movs	r0, #56	; 0x38
    6d28:	47a8      	blx	r5
	gpio_set_pin_direction(PB25_CARDB_I2C_CLK, GPIO_DIRECTION_OUT);
    6d2a:	2102      	movs	r1, #2
    6d2c:	2039      	movs	r0, #57	; 0x39
    6d2e:	47a8      	blx	r5
	gpio_set_pin_direction(PC27_CARDA_I2C_SDA, GPIO_DIRECTION_IN);
    6d30:	2101      	movs	r1, #1
    6d32:	205b      	movs	r0, #91	; 0x5b
    6d34:	47a8      	blx	r5
	gpio_set_pin_direction(PC28_CARDA_I2C_CLK, GPIO_DIRECTION_OUT);
    6d36:	2102      	movs	r1, #2
    6d38:	205c      	movs	r0, #92	; 0x5c
    6d3a:	47a8      	blx	r5
	gpio_set_pin_direction(PB12_SPI_MOSI, GPIO_DIRECTION_OUT);
    6d3c:	2102      	movs	r1, #2
    6d3e:	202c      	movs	r0, #44	; 0x2c
    6d40:	47a8      	blx	r5
	gpio_set_pin_direction(PB13_SPI_MISO, GPIO_DIRECTION_IN);
    6d42:	2101      	movs	r1, #1
    6d44:	202d      	movs	r0, #45	; 0x2d
    6d46:	47a8      	blx	r5
	gpio_set_pin_direction(PB15_SPI_CLK, GPIO_DIRECTION_OUT);
    6d48:	2102      	movs	r1, #2
    6d4a:	202f      	movs	r0, #47	; 0x2f
    6d4c:	47a8      	blx	r5

	/* Set all GPIO MultiSense pins to their respective internal pull-up or pull-down configurations. Most of the GPIO has external PCB resistor pull-ups or pull-downs */
	gpio_set_pin_pull_mode(PB00_KSZ_RESET, GPIO_PULL_OFF);
    6d4e:	4d27      	ldr	r5, [pc, #156]	; (6dec <gpio_init+0x1c4>)
    6d50:	2100      	movs	r1, #0
    6d52:	2020      	movs	r0, #32
    6d54:	47a8      	blx	r5
	gpio_set_pin_pull_mode(PB02_TAMP_OP, GPIO_PULL_OFF);
    6d56:	2100      	movs	r1, #0
    6d58:	2022      	movs	r0, #34	; 0x22
    6d5a:	47a8      	blx	r5
	gpio_set_pin_pull_mode(PB03_LED_ETH, GPIO_PULL_OFF);
    6d5c:	2100      	movs	r1, #0
    6d5e:	2023      	movs	r0, #35	; 0x23
    6d60:	47a8      	blx	r5
	gpio_set_pin_pull_mode(PB04_LED_PWR, GPIO_PULL_OFF);
    6d62:	2100      	movs	r1, #0
    6d64:	2024      	movs	r0, #36	; 0x24
    6d66:	47a8      	blx	r5
	gpio_set_pin_pull_mode(PB05_SPInCS_CARDA, GPIO_PULL_OFF);
    6d68:	2100      	movs	r1, #0
    6d6a:	2025      	movs	r0, #37	; 0x25
    6d6c:	47a8      	blx	r5
	gpio_set_pin_pull_mode(PB06_SPInCS_CARDB, GPIO_PULL_OFF);
    6d6e:	2100      	movs	r1, #0
    6d70:	2026      	movs	r0, #38	; 0x26
    6d72:	47a8      	blx	r5
	gpio_set_pin_pull_mode(PB07_SPInCS_KSZ8974, GPIO_PULL_OFF);
    6d74:	2100      	movs	r1, #0
    6d76:	2027      	movs	r0, #39	; 0x27
    6d78:	47a8      	blx	r5
	gpio_set_pin_pull_mode(PC00_CARDA_PRESENT, GPIO_PULL_UP);
    6d7a:	2101      	movs	r1, #1
    6d7c:	2040      	movs	r0, #64	; 0x40
    6d7e:	47a8      	blx	r5
	gpio_set_pin_pull_mode(PC01_CARDB_PRESENT, GPIO_PULL_UP);
    6d80:	2101      	movs	r1, #1
    6d82:	2041      	movs	r0, #65	; 0x41
    6d84:	47a8      	blx	r5
	gpio_set_pin_pull_mode(PB24_CARDB_I2C_SDA, GPIO_PULL_OFF);
    6d86:	2100      	movs	r1, #0
    6d88:	2038      	movs	r0, #56	; 0x38
    6d8a:	47a8      	blx	r5
	gpio_set_pin_pull_mode(PB25_CARDB_I2C_CLK, GPIO_PULL_OFF);
    6d8c:	2100      	movs	r1, #0
    6d8e:	2039      	movs	r0, #57	; 0x39
    6d90:	47a8      	blx	r5
	gpio_set_pin_pull_mode(PC27_CARDA_I2C_SDA, GPIO_PULL_OFF);
    6d92:	2100      	movs	r1, #0
    6d94:	205b      	movs	r0, #91	; 0x5b
    6d96:	47a8      	blx	r5
	gpio_set_pin_pull_mode(PC28_CARDA_I2C_CLK, GPIO_PULL_OFF);
    6d98:	2100      	movs	r1, #0
    6d9a:	205c      	movs	r0, #92	; 0x5c
    6d9c:	47a8      	blx	r5
	gpio_set_pin_pull_mode(PB13_SPI_MISO, GPIO_PULL_OFF);
    6d9e:	2100      	movs	r1, #0
    6da0:	202d      	movs	r0, #45	; 0x2d
    6da2:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6da4:	2308      	movs	r3, #8
    6da6:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    6daa:	2310      	movs	r3, #16
    6dac:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6db0:	2320      	movs	r3, #32
    6db2:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    6db6:	2340      	movs	r3, #64	; 0x40
    6db8:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    6dbc:	2380      	movs	r3, #128	; 0x80
    6dbe:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6dc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    6dc6:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    6dca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    6dce:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    6dd6:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    6dda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    6dde:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    6de2:	bd38      	pop	{r3, r4, r5, pc}
    6de4:	41008000 	.word	0x41008000
    6de8:	000061fd 	.word	0x000061fd
    6dec:	00006275 	.word	0x00006275

00006df0 <watchdog_init>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: setup, initialize and start the watchdog code timer
// Returns:     Nothing
// *****************************************************************************************************************************************************************
void watchdog_init(void)
{
    6df0:	b570      	push	{r4, r5, r6, lr}
	ASSERT(wdt && wdt->dev.hw);
    6df2:	4c0d      	ldr	r4, [pc, #52]	; (6e28 <watchdog_init+0x38>)
    6df4:	4e0d      	ldr	r6, [pc, #52]	; (6e2c <watchdog_init+0x3c>)
    6df6:	6820      	ldr	r0, [r4, #0]
    6df8:	4d0d      	ldr	r5, [pc, #52]	; (6e30 <watchdog_init+0x40>)
    6dfa:	3000      	adds	r0, #0
    6dfc:	bf18      	it	ne
    6dfe:	2001      	movne	r0, #1
    6e00:	4631      	mov	r1, r6
    6e02:	226f      	movs	r2, #111	; 0x6f
    6e04:	47a8      	blx	r5
	return _wdt_set_timeout_period(&wdt->dev, clk_rate, timeout_period);
    6e06:	4b0b      	ldr	r3, [pc, #44]	; (6e34 <watchdog_init+0x44>)
    6e08:	2219      	movs	r2, #25
    6e0a:	2164      	movs	r1, #100	; 0x64
    6e0c:	4620      	mov	r0, r4
    6e0e:	4798      	blx	r3
	ASSERT(wdt && wdt->dev.hw);
    6e10:	6820      	ldr	r0, [r4, #0]
    6e12:	3000      	adds	r0, #0
    6e14:	4631      	mov	r1, r6
    6e16:	bf18      	it	ne
    6e18:	2001      	movne	r0, #1
    6e1a:	228c      	movs	r2, #140	; 0x8c
    6e1c:	47a8      	blx	r5
	return _wdt_enable(&wdt->dev);
    6e1e:	4620      	mov	r0, r4
    6e20:	4b05      	ldr	r3, [pc, #20]	; (6e38 <watchdog_init+0x48>)
	/* Set the main watchdog to 4 seconds timeout */
	wdt_set_timeout_period(&WDT_0, 100, 25);
	
	/* Turn it on */
	wdt_enable(&WDT_0);
}
    6e22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6e26:	4718      	bx	r3
    6e28:	20007470 	.word	0x20007470
    6e2c:	0000ba79 	.word	0x0000ba79
    6e30:	00002035 	.word	0x00002035
    6e34:	000042e5 	.word	0x000042e5
    6e38:	000043cd 	.word	0x000043cd

00006e3c <var_init>:
// Returns:     Nothing
// *****************************************************************************************************************************************************************
void var_init(void)
{
	/* Set all the main global variables to zero to initialize the states before nay further code executes that relies on the initialization process at the start */
	tick_counter = 0;
    6e3c:	4b55      	ldr	r3, [pc, #340]	; (6f94 <var_init+0x158>)
	cardA_type = CARD_NOTFITTED;
	cardB_type = CARD_NOTFITTED;
	ring_broken = RING_NOTCONFIGURED;
	
	/* Also, read out the non-volatile EEprom configuration data */
	if (EEprom_settings(settings_buffer, SETTING_STRUCTURE_SIZE, 0) != ERR_NONE) {
    6e3e:	4856      	ldr	r0, [pc, #344]	; (6f98 <var_init+0x15c>)
	tick_counter = 0;
    6e40:	2200      	movs	r2, #0
{
    6e42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	tick_counter = 0;
    6e46:	601a      	str	r2, [r3, #0]
	readenvironment = 0;
    6e48:	4b54      	ldr	r3, [pc, #336]	; (6f9c <var_init+0x160>)
	if (EEprom_settings(settings_buffer, SETTING_STRUCTURE_SIZE, 0) != ERR_NONE) {
    6e4a:	4f55      	ldr	r7, [pc, #340]	; (6fa0 <var_init+0x164>)
	readenvironment = 0;
    6e4c:	701a      	strb	r2, [r3, #0]
	arp_check = 0;
    6e4e:	4b55      	ldr	r3, [pc, #340]	; (6fa4 <var_init+0x168>)
    6e50:	701a      	strb	r2, [r3, #0]
	ip_periodic_check = 0;
    6e52:	4b55      	ldr	r3, [pc, #340]	; (6fa8 <var_init+0x16c>)
    6e54:	701a      	strb	r2, [r3, #0]
	ring_timer = 0;
    6e56:	4b55      	ldr	r3, [pc, #340]	; (6fac <var_init+0x170>)
    6e58:	701a      	strb	r2, [r3, #0]
	ring = 0;
    6e5a:	4b55      	ldr	r3, [pc, #340]	; (6fb0 <var_init+0x174>)
    6e5c:	701a      	strb	r2, [r3, #0]
	sentA = 0;
    6e5e:	4b55      	ldr	r3, [pc, #340]	; (6fb4 <var_init+0x178>)
    6e60:	701a      	strb	r2, [r3, #0]
	sentB = 0;
    6e62:	4b55      	ldr	r3, [pc, #340]	; (6fb8 <var_init+0x17c>)
    6e64:	701a      	strb	r2, [r3, #0]
	send_relearn_udp = 0;
    6e66:	4b55      	ldr	r3, [pc, #340]	; (6fbc <var_init+0x180>)
    6e68:	701a      	strb	r2, [r3, #0]
	refresh_gain = 0;
    6e6a:	4b55      	ldr	r3, [pc, #340]	; (6fc0 <var_init+0x184>)
    6e6c:	701a      	strb	r2, [r3, #0]
	cardA_old = 0;
    6e6e:	4b55      	ldr	r3, [pc, #340]	; (6fc4 <var_init+0x188>)
    6e70:	701a      	strb	r2, [r3, #0]
	cardB_old = 0;
    6e72:	4b55      	ldr	r3, [pc, #340]	; (6fc8 <var_init+0x18c>)
    6e74:	701a      	strb	r2, [r3, #0]
	card_sampleindex = 0;
    6e76:	4b55      	ldr	r3, [pc, #340]	; (6fcc <var_init+0x190>)
    6e78:	601a      	str	r2, [r3, #0]
	good_ethernet = 0;
    6e7a:	4b55      	ldr	r3, [pc, #340]	; (6fd0 <var_init+0x194>)
    6e7c:	701a      	strb	r2, [r3, #0]
	stormstate = 0;
    6e7e:	4b55      	ldr	r3, [pc, #340]	; (6fd4 <var_init+0x198>)
    6e80:	701a      	strb	r2, [r3, #0]
	link_port1 = 0;
    6e82:	4b55      	ldr	r3, [pc, #340]	; (6fd8 <var_init+0x19c>)
    6e84:	701a      	strb	r2, [r3, #0]
	link_port2 = 0;
    6e86:	4b55      	ldr	r3, [pc, #340]	; (6fdc <var_init+0x1a0>)
    6e88:	701a      	strb	r2, [r3, #0]
	link_port3 = 0;
    6e8a:	4b55      	ldr	r3, [pc, #340]	; (6fe0 <var_init+0x1a4>)
    6e8c:	701a      	strb	r2, [r3, #0]
	old_tamper = 0;
    6e8e:	4b55      	ldr	r3, [pc, #340]	; (6fe4 <var_init+0x1a8>)
    6e90:	701a      	strb	r2, [r3, #0]
	old_link_port1 = 0;
    6e92:	4b55      	ldr	r3, [pc, #340]	; (6fe8 <var_init+0x1ac>)
    6e94:	701a      	strb	r2, [r3, #0]
	old_link_port2 = 0;
    6e96:	4b55      	ldr	r3, [pc, #340]	; (6fec <var_init+0x1b0>)
    6e98:	701a      	strb	r2, [r3, #0]
	old_link_port3 = 0;
    6e9a:	4b55      	ldr	r3, [pc, #340]	; (6ff0 <var_init+0x1b4>)
    6e9c:	701a      	strb	r2, [r3, #0]
	readdata_water1 = 0;
    6e9e:	4b55      	ldr	r3, [pc, #340]	; (6ff4 <var_init+0x1b8>)
    6ea0:	701a      	strb	r2, [r3, #0]
	readdata_water2 = 0;
    6ea2:	4b55      	ldr	r3, [pc, #340]	; (6ff8 <var_init+0x1bc>)
    6ea4:	701a      	strb	r2, [r3, #0]
	highvoltage = 0;
    6ea6:	4b55      	ldr	r3, [pc, #340]	; (6ffc <var_init+0x1c0>)
    6ea8:	701a      	strb	r2, [r3, #0]
	read_hardware_index = 0;
    6eaa:	4b55      	ldr	r3, [pc, #340]	; (7000 <var_init+0x1c4>)
    6eac:	701a      	strb	r2, [r3, #0]
	looprate = 0;
    6eae:	4b55      	ldr	r3, [pc, #340]	; (7004 <var_init+0x1c8>)
    6eb0:	601a      	str	r2, [r3, #0]
	loopcount = 0;
    6eb2:	4b55      	ldr	r3, [pc, #340]	; (7008 <var_init+0x1cc>)
    6eb4:	601a      	str	r2, [r3, #0]
	miniA_chan = 0;
    6eb6:	4b55      	ldr	r3, [pc, #340]	; (700c <var_init+0x1d0>)
    6eb8:	701a      	strb	r2, [r3, #0]
	miniB_chan = 0;
    6eba:	4b55      	ldr	r3, [pc, #340]	; (7010 <var_init+0x1d4>)
    6ebc:	701a      	strb	r2, [r3, #0]
	miniIO_A1_adcH = 0;
    6ebe:	4b55      	ldr	r3, [pc, #340]	; (7014 <var_init+0x1d8>)
    6ec0:	701a      	strb	r2, [r3, #0]
	miniIO_A1_adcL = 0;
    6ec2:	4b55      	ldr	r3, [pc, #340]	; (7018 <var_init+0x1dc>)
    6ec4:	701a      	strb	r2, [r3, #0]
	miniIO_A0_adcH = 0;
    6ec6:	4b55      	ldr	r3, [pc, #340]	; (701c <var_init+0x1e0>)
    6ec8:	701a      	strb	r2, [r3, #0]
	miniIO_A0_adcL = 0;
    6eca:	4b55      	ldr	r3, [pc, #340]	; (7020 <var_init+0x1e4>)
    6ecc:	701a      	strb	r2, [r3, #0]
	miniIO_A_relay = 0;
    6ece:	4b55      	ldr	r3, [pc, #340]	; (7024 <var_init+0x1e8>)
    6ed0:	701a      	strb	r2, [r3, #0]
	miniIO_A_inputs = 0;
    6ed2:	4b55      	ldr	r3, [pc, #340]	; (7028 <var_init+0x1ec>)
    6ed4:	701a      	strb	r2, [r3, #0]
	miniIO_B1_adcH = 0;
    6ed6:	4b55      	ldr	r3, [pc, #340]	; (702c <var_init+0x1f0>)
    6ed8:	701a      	strb	r2, [r3, #0]
	miniIO_B1_adcL = 0;
    6eda:	4b55      	ldr	r3, [pc, #340]	; (7030 <var_init+0x1f4>)
    6edc:	701a      	strb	r2, [r3, #0]
	miniIO_B0_adcH = 0;
    6ede:	4b55      	ldr	r3, [pc, #340]	; (7034 <var_init+0x1f8>)
    6ee0:	701a      	strb	r2, [r3, #0]
	miniIO_B0_adcL = 0;
    6ee2:	4b55      	ldr	r3, [pc, #340]	; (7038 <var_init+0x1fc>)
    6ee4:	701a      	strb	r2, [r3, #0]
	miniIO_B_relay = 0;
    6ee6:	4b55      	ldr	r3, [pc, #340]	; (703c <var_init+0x200>)
    6ee8:	701a      	strb	r2, [r3, #0]
	miniIO_B_inputs = 0;
    6eea:	4b55      	ldr	r3, [pc, #340]	; (7040 <var_init+0x204>)
    6eec:	701a      	strb	r2, [r3, #0]
	cardA_type = CARD_NOTFITTED;
    6eee:	4b55      	ldr	r3, [pc, #340]	; (7044 <var_init+0x208>)
    6ef0:	701a      	strb	r2, [r3, #0]
	cardB_type = CARD_NOTFITTED;
    6ef2:	4b55      	ldr	r3, [pc, #340]	; (7048 <var_init+0x20c>)
    6ef4:	701a      	strb	r2, [r3, #0]
	ring_broken = RING_NOTCONFIGURED;
    6ef6:	4b55      	ldr	r3, [pc, #340]	; (704c <var_init+0x210>)
    6ef8:	2102      	movs	r1, #2
    6efa:	7019      	strb	r1, [r3, #0]
	if (EEprom_settings(settings_buffer, SETTING_STRUCTURE_SIZE, 0) != ERR_NONE) {
    6efc:	2180      	movs	r1, #128	; 0x80
    6efe:	47b8      	blx	r7
    6f00:	b110      	cbz	r0, 6f08 <var_init+0xcc>
		xprintf("MultiSense [configuration ERROR READING]\r\n");
    6f02:	4853      	ldr	r0, [pc, #332]	; (7050 <var_init+0x214>)
    6f04:	4b53      	ldr	r3, [pc, #332]	; (7054 <var_init+0x218>)
    6f06:	4798      	blx	r3
	}
	
	/* Check if the configuration data is invalid and needs defaulting */
	if ((((CONFIG *)&settings_buffer)->pattern1 != CONFIG_IDENTIFIER1) || (((CONFIG *)&settings_buffer)->pattern2 != CONFIG_IDENTIFIER2)) {
    6f08:	4b23      	ldr	r3, [pc, #140]	; (6f98 <var_init+0x15c>)
    6f0a:	4a53      	ldr	r2, [pc, #332]	; (7058 <var_init+0x21c>)
    6f0c:	6819      	ldr	r1, [r3, #0]
    6f0e:	4291      	cmp	r1, r2
    6f10:	461c      	mov	r4, r3
    6f12:	d103      	bne.n	6f1c <var_init+0xe0>
    6f14:	685a      	ldr	r2, [r3, #4]
    6f16:	4b51      	ldr	r3, [pc, #324]	; (705c <var_init+0x220>)
    6f18:	429a      	cmp	r2, r3
    6f1a:	d039      	beq.n	6f90 <var_init+0x154>
		xprintf("MultiSense [configuration INVALID]\r\n");
    6f1c:	4850      	ldr	r0, [pc, #320]	; (7060 <var_init+0x224>)
    6f1e:	4e4d      	ldr	r6, [pc, #308]	; (7054 <var_init+0x218>)
    6f20:	47b0      	blx	r6
		
		/* Re-write default values ready for write-back */
		((CONFIG *)&settings_buffer)->pattern1 = CONFIG_IDENTIFIER1;
    6f22:	2376      	movs	r3, #118	; 0x76
    6f24:	7023      	strb	r3, [r4, #0]
    6f26:	2336      	movs	r3, #54	; 0x36
    6f28:	7063      	strb	r3, [r4, #1]
    6f2a:	2345      	movs	r3, #69	; 0x45
    6f2c:	70a3      	strb	r3, [r4, #2]
    6f2e:	f06f 0301 	mvn.w	r3, #1
    6f32:	70e3      	strb	r3, [r4, #3]
		((CONFIG *)&settings_buffer)->pattern2 = CONFIG_IDENTIFIER2;
    6f34:	f06f 0343 	mvn.w	r3, #67	; 0x43
    6f38:	7123      	strb	r3, [r4, #4]
    6f3a:	f06f 0315 	mvn.w	r3, #21
    6f3e:	7163      	strb	r3, [r4, #5]
    6f40:	237d      	movs	r3, #125	; 0x7d
    6f42:	71a3      	strb	r3, [r4, #6]
    6f44:	f06f 036c 	mvn.w	r3, #108	; 0x6c
		strncpy((char *__restrict)(((CONFIG *)&settings_buffer)->name), "MULTISENSE NEEDS CONFIGURING...", sizeof(((CONFIG *)&settings_buffer)->name));
    6f48:	2221      	movs	r2, #33	; 0x21
    6f4a:	4946      	ldr	r1, [pc, #280]	; (7064 <var_init+0x228>)
		((CONFIG *)&settings_buffer)->pattern2 = CONFIG_IDENTIFIER2;
    6f4c:	71e3      	strb	r3, [r4, #7]
		strncpy((char *__restrict)(((CONFIG *)&settings_buffer)->name), "MULTISENSE NEEDS CONFIGURING...", sizeof(((CONFIG *)&settings_buffer)->name));
    6f4e:	4846      	ldr	r0, [pc, #280]	; (7068 <var_init+0x22c>)
    6f50:	4b46      	ldr	r3, [pc, #280]	; (706c <var_init+0x230>)
    6f52:	4798      	blx	r3
		((CONFIG *)&settings_buffer)->pattern1 = CONFIG_IDENTIFIER1;
    6f54:	2500      	movs	r5, #0
		((CONFIG *)&settings_buffer)->ID = 0x00000000;
		((CONFIG *)&settings_buffer)->gain_cardA = 0xFF;
    6f56:	23ff      	movs	r3, #255	; 0xff
		((CONFIG *)&settings_buffer)->gain_cardB = 0xFF;
		((CONFIG *)&settings_buffer)->loop_basestation = 0;
		
		xprintf("MultiSense [configuration FORMATTED]\r\n");
    6f58:	4845      	ldr	r0, [pc, #276]	; (7070 <var_init+0x234>)
		((CONFIG *)&settings_buffer)->ID = 0x00000000;
    6f5a:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
    6f5e:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
    6f62:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
    6f66:	f884 502f 	strb.w	r5, [r4, #47]	; 0x2f
		((CONFIG *)&settings_buffer)->gain_cardA = 0xFF;
    6f6a:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
		((CONFIG *)&settings_buffer)->gain_cardB = 0xFF;
    6f6e:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
		((CONFIG *)&settings_buffer)->loop_basestation = 0;
    6f72:	f884 502b 	strb.w	r5, [r4, #43]	; 0x2b
		xprintf("MultiSense [configuration FORMATTED]\r\n");
    6f76:	47b0      	blx	r6

		/* Write these values back to the EEprom storage area */
		if (EEprom_settings(settings_buffer, SETTING_STRUCTURE_SIZE, 1) != ERR_NONE) {
    6f78:	2201      	movs	r2, #1
    6f7a:	2180      	movs	r1, #128	; 0x80
    6f7c:	4806      	ldr	r0, [pc, #24]	; (6f98 <var_init+0x15c>)
    6f7e:	47b8      	blx	r7
    6f80:	b120      	cbz	r0, 6f8c <var_init+0x150>
			xprintf("MultiSense [configuration ERROR WRITING]\r\n");
    6f82:	483c      	ldr	r0, [pc, #240]	; (7074 <var_init+0x238>)
		} else {
			xprintf("MultiSense [configuration WRITTEN]\r\n");
    6f84:	4633      	mov	r3, r6
		}
	}
    6f86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			xprintf("MultiSense [configuration WRITTEN]\r\n");
    6f8a:	4718      	bx	r3
    6f8c:	483a      	ldr	r0, [pc, #232]	; (7078 <var_init+0x23c>)
    6f8e:	e7f9      	b.n	6f84 <var_init+0x148>
    6f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6f94:	20008538 	.word	0x20008538
    6f98:	20007f14 	.word	0x20007f14
    6f9c:	20008250 	.word	0x20008250
    6fa0:	0000ac21 	.word	0x0000ac21
    6fa4:	20007fa3 	.word	0x20007fa3
    6fa8:	20007852 	.word	0x20007852
    6fac:	2000825d 	.word	0x2000825d
    6fb0:	20008536 	.word	0x20008536
    6fb4:	20007fa1 	.word	0x20007fa1
    6fb8:	2000757e 	.word	0x2000757e
    6fbc:	20008259 	.word	0x20008259
    6fc0:	2000853d 	.word	0x2000853d
    6fc4:	20007573 	.word	0x20007573
    6fc8:	20007841 	.word	0x20007841
    6fcc:	20008528 	.word	0x20008528
    6fd0:	20007579 	.word	0x20007579
    6fd4:	2000853c 	.word	0x2000853c
    6fd8:	20007571 	.word	0x20007571
    6fdc:	20008274 	.word	0x20008274
    6fe0:	20007575 	.word	0x20007575
    6fe4:	2000852c 	.word	0x2000852c
    6fe8:	2000757f 	.word	0x2000757f
    6fec:	20007570 	.word	0x20007570
    6ff0:	2000825c 	.word	0x2000825c
    6ff4:	2000853e 	.word	0x2000853e
    6ff8:	2000852d 	.word	0x2000852d
    6ffc:	20008535 	.word	0x20008535
    7000:	2000757a 	.word	0x2000757a
    7004:	20008548 	.word	0x20008548
    7008:	20007580 	.word	0x20007580
    700c:	20007576 	.word	0x20007576
    7010:	2000825a 	.word	0x2000825a
    7014:	2000825b 	.word	0x2000825b
    7018:	20007f9a 	.word	0x20007f9a
    701c:	20007c55 	.word	0x20007c55
    7020:	20008534 	.word	0x20008534
    7024:	20007f9c 	.word	0x20007f9c
    7028:	20007574 	.word	0x20007574
    702c:	20007584 	.word	0x20007584
    7030:	2000853f 	.word	0x2000853f
    7034:	20007fa2 	.word	0x20007fa2
    7038:	20007c56 	.word	0x20007c56
    703c:	20007f04 	.word	0x20007f04
    7040:	20008258 	.word	0x20008258
    7044:	20007c57 	.word	0x20007c57
    7048:	20008540 	.word	0x20008540
    704c:	20008251 	.word	0x20008251
    7050:	0000d174 	.word	0x0000d174
    7054:	00000395 	.word	0x00000395
    7058:	fe453676 	.word	0xfe453676
    705c:	937deabc 	.word	0x937deabc
    7060:	0000d19f 	.word	0x0000d19f
    7064:	0000d1c4 	.word	0x0000d1c4
    7068:	20007f1c 	.word	0x20007f1c
    706c:	0000ae39 	.word	0x0000ae39
    7070:	0000d1e4 	.word	0x0000d1e4
    7074:	0000d20b 	.word	0x0000d20b
    7078:	0000d236 	.word	0x0000d236

0000707c <rx_callb>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: INTERCEPT HOOK STUB for <UART_1>
// Returns:     Nothing (NULL)
// *****************************************************************************************************************************************************************
void rx_callb(const struct usart_async_descriptor *const descr)
{
    707c:	4770      	bx	lr
	...

00007080 <bash_spi_transfer.constprop.0>:
static void inline bash_spi_transfer(unsigned char *tx, unsigned char *rx, int size)
    7080:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7084:	4e21      	ldr	r6, [pc, #132]	; (710c <bash_spi_transfer.constprop.0+0x8c>)
			gpio_set_pin_level(PB12_SPI_MOSI, (tx[count] & (1 << (loop - 1))) ? 1 : 0);
    7086:	f8df 9090 	ldr.w	r9, [pc, #144]	; 7118 <bash_spi_transfer.constprop.0+0x98>
    708a:	4d21      	ldr	r5, [pc, #132]	; (7110 <bash_spi_transfer.constprop.0+0x90>)
	CRITICAL_SECTION_ENTER();
    708c:	f8df a08c 	ldr.w	sl, [pc, #140]	; 711c <bash_spi_transfer.constprop.0+0x9c>
	for (count = 0; count < size; count++) {
    7090:	f04f 0800 	mov.w	r8, #0
		rx[count] = 0;
    7094:	2300      	movs	r3, #0
    7096:	7033      	strb	r3, [r6, #0]
		for (loop = 8; loop; loop--) {
    7098:	2708      	movs	r7, #8
			gpio_set_pin_level(PB12_SPI_MOSI, (tx[count] & (1 << (loop - 1))) ? 1 : 0);
    709a:	eb08 0b09 	add.w	fp, r8, r9
    709e:	f89b 3000 	ldrb.w	r3, [fp]
    70a2:	3f01      	subs	r7, #1
    70a4:	413b      	asrs	r3, r7
	if (level) {
    70a6:	f013 0f01 	tst.w	r3, #1
    70aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    70ae:	bf14      	ite	ne
    70b0:	f8c5 3098 	strne.w	r3, [r5, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    70b4:	f8c5 3094 	streq.w	r3, [r5, #148]	; 0x94
    70b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    70bc:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
	CRITICAL_SECTION_ENTER();
    70c0:	a801      	add	r0, sp, #4
    70c2:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
    70c6:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    70ca:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
    70ce:	47d0      	blx	sl
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    70d0:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    70d4:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    70d8:	f8d5 4090 	ldr.w	r4, [r5, #144]	; 0x90
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    70dc:	405c      	eors	r4, r3
    70de:	4014      	ands	r4, r2
    70e0:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    70e2:	a801      	add	r0, sp, #4
    70e4:	4b0b      	ldr	r3, [pc, #44]	; (7114 <bash_spi_transfer.constprop.0+0x94>)
    70e6:	4798      	blx	r3
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    70e8:	f3c4 3440 	ubfx	r4, r4, #13, #1
			rx[count] |= (gpio_get_pin_level(PB13_SPI_MISO) << (loop - 1));
    70ec:	7833      	ldrb	r3, [r6, #0]
    70ee:	40bc      	lsls	r4, r7
    70f0:	431c      	orrs	r4, r3
    70f2:	7034      	strb	r4, [r6, #0]
		for (loop = 8; loop; loop--) {
    70f4:	2f00      	cmp	r7, #0
    70f6:	d1d2      	bne.n	709e <bash_spi_transfer.constprop.0+0x1e>
	for (count = 0; count < size; count++) {
    70f8:	f108 0801 	add.w	r8, r8, #1
    70fc:	f1b8 0f02 	cmp.w	r8, #2
    7100:	f106 0601 	add.w	r6, r6, #1
    7104:	d1c6      	bne.n	7094 <bash_spi_transfer.constprop.0+0x14>
}
    7106:	b003      	add	sp, #12
    7108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    710c:	2000757c 	.word	0x2000757c
    7110:	41008000 	.word	0x41008000
    7114:	000011db 	.word	0x000011db
    7118:	20007853 	.word	0x20007853
    711c:	000011cd 	.word	0x000011cd

00007120 <tx_callb>:
    7120:	4770      	bx	lr
	...

00007124 <TIMER_0_task1_cb>:
{
    7124:	b538      	push	{r3, r4, r5, lr}
	tick_counter++;
    7126:	4c21      	ldr	r4, [pc, #132]	; (71ac <TIMER_0_task1_cb+0x88>)
    7128:	6821      	ldr	r1, [r4, #0]
	if (!(tick_counter % 5)) {
    712a:	2305      	movs	r3, #5
	tick_counter++;
    712c:	3101      	adds	r1, #1
	if (!(tick_counter % 5)) {
    712e:	fbb1 f3f3 	udiv	r3, r1, r3
    7132:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7136:	4299      	cmp	r1, r3
	tick_counter++;
    7138:	6021      	str	r1, [r4, #0]
	if (!(tick_counter % 5)) {
    713a:	d10f      	bne.n	715c <TIMER_0_task1_cb+0x38>
	ASSERT(wdt && wdt->dev.hw);
    713c:	4d1c      	ldr	r5, [pc, #112]	; (71b0 <TIMER_0_task1_cb+0x8c>)
		readenvironment = 1;
    713e:	4b1d      	ldr	r3, [pc, #116]	; (71b4 <TIMER_0_task1_cb+0x90>)
    7140:	6828      	ldr	r0, [r5, #0]
    7142:	491d      	ldr	r1, [pc, #116]	; (71b8 <TIMER_0_task1_cb+0x94>)
    7144:	3000      	adds	r0, #0
    7146:	f04f 0201 	mov.w	r2, #1
    714a:	701a      	strb	r2, [r3, #0]
    714c:	bf18      	it	ne
    714e:	2001      	movne	r0, #1
    7150:	4b1a      	ldr	r3, [pc, #104]	; (71bc <TIMER_0_task1_cb+0x98>)
    7152:	22a9      	movs	r2, #169	; 0xa9
    7154:	4798      	blx	r3
	return _wdt_feed(&wdt->dev);
    7156:	4628      	mov	r0, r5
    7158:	4b19      	ldr	r3, [pc, #100]	; (71c0 <TIMER_0_task1_cb+0x9c>)
    715a:	4798      	blx	r3
	ip_periodic_check = 1;
    715c:	4b19      	ldr	r3, [pc, #100]	; (71c4 <TIMER_0_task1_cb+0xa0>)
    715e:	2101      	movs	r1, #1
    7160:	7019      	strb	r1, [r3, #0]
	if (!(tick_counter % 25)) {
    7162:	6823      	ldr	r3, [r4, #0]
    7164:	2019      	movs	r0, #25
    7166:	fbb3 f2f0 	udiv	r2, r3, r0
    716a:	fb00 3212 	mls	r2, r0, r2, r3
    716e:	b90a      	cbnz	r2, 7174 <TIMER_0_task1_cb+0x50>
		arp_check = 1;
    7170:	4a15      	ldr	r2, [pc, #84]	; (71c8 <TIMER_0_task1_cb+0xa4>)
    7172:	7011      	strb	r1, [r2, #0]
	if (!(tick_counter % 5)) {
    7174:	2205      	movs	r2, #5
    7176:	fbb3 f2f2 	udiv	r2, r3, r2
    717a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    717e:	4293      	cmp	r3, r2
		ring_timer = 1;
    7180:	bf02      	ittt	eq
    7182:	4a12      	ldreq	r2, [pc, #72]	; (71cc <TIMER_0_task1_cb+0xa8>)
    7184:	2101      	moveq	r1, #1
    7186:	7011      	strbeq	r1, [r2, #0]
	if (!(tick_counter % 10)) {
    7188:	210a      	movs	r1, #10
    718a:	fbb3 f2f1 	udiv	r2, r3, r1
    718e:	fb01 3312 	mls	r3, r1, r2, r3
    7192:	b923      	cbnz	r3, 719e <TIMER_0_task1_cb+0x7a>
		looprate = loopcount;
    7194:	4a0e      	ldr	r2, [pc, #56]	; (71d0 <TIMER_0_task1_cb+0xac>)
    7196:	490f      	ldr	r1, [pc, #60]	; (71d4 <TIMER_0_task1_cb+0xb0>)
    7198:	6810      	ldr	r0, [r2, #0]
    719a:	6008      	str	r0, [r1, #0]
		loopcount = 0;
    719c:	6013      	str	r3, [r2, #0]
	if (good_ethernet) {
    719e:	4a0e      	ldr	r2, [pc, #56]	; (71d8 <TIMER_0_task1_cb+0xb4>)
    71a0:	7813      	ldrb	r3, [r2, #0]
    71a2:	b10b      	cbz	r3, 71a8 <TIMER_0_task1_cb+0x84>
		good_ethernet--;
    71a4:	3b01      	subs	r3, #1
    71a6:	7013      	strb	r3, [r2, #0]
    71a8:	bd38      	pop	{r3, r4, r5, pc}
    71aa:	bf00      	nop
    71ac:	20008538 	.word	0x20008538
    71b0:	20007470 	.word	0x20007470
    71b4:	20008250 	.word	0x20008250
    71b8:	0000ba79 	.word	0x0000ba79
    71bc:	00002035 	.word	0x00002035
    71c0:	00004401 	.word	0x00004401
    71c4:	20007852 	.word	0x20007852
    71c8:	20007fa3 	.word	0x20007fa3
    71cc:	2000825d 	.word	0x2000825d
    71d0:	20007580 	.word	0x20007580
    71d4:	20008548 	.word	0x20008548
    71d8:	20007579 	.word	0x20007579

000071dc <application_udp_appcall>:
{
    71dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (uip_newdata()) {
    71e0:	4d9d      	ldr	r5, [pc, #628]	; (7458 <application_udp_appcall+0x27c>)
    71e2:	782b      	ldrb	r3, [r5, #0]
    71e4:	079b      	lsls	r3, r3, #30
    71e6:	d548      	bpl.n	727a <application_udp_appcall+0x9e>
		good_ethernet = 255;
    71e8:	4b9c      	ldr	r3, [pc, #624]	; (745c <application_udp_appcall+0x280>)
		if (uip_conn->lport == htons(MAIN_UDPSOCKET)) {
    71ea:	4f9d      	ldr	r7, [pc, #628]	; (7460 <application_udp_appcall+0x284>)
    71ec:	4e9d      	ldr	r6, [pc, #628]	; (7464 <application_udp_appcall+0x288>)
		good_ethernet = 255;
    71ee:	22ff      	movs	r2, #255	; 0xff
    71f0:	701a      	strb	r2, [r3, #0]
		len = uip_datalen();
    71f2:	4b9d      	ldr	r3, [pc, #628]	; (7468 <application_udp_appcall+0x28c>)
    71f4:	881c      	ldrh	r4, [r3, #0]
		if (uip_conn->lport == htons(MAIN_UDPSOCKET)) {
    71f6:	683b      	ldr	r3, [r7, #0]
    71f8:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
    71fc:	f8b3 8004 	ldrh.w	r8, [r3, #4]
    7200:	47b0      	blx	r6
    7202:	4580      	cmp	r8, r0
    7204:	f040 80cb 	bne.w	739e <application_udp_appcall+0x1c2>
			memmove(PLAINTEXT, CIPHERTEXT, len);																	// If no encryption compiled, then just copy over plain-text from [UDP] buffer
    7208:	4b98      	ldr	r3, [pc, #608]	; (746c <application_udp_appcall+0x290>)
    720a:	4999      	ldr	r1, [pc, #612]	; (7470 <application_udp_appcall+0x294>)
    720c:	4e99      	ldr	r6, [pc, #612]	; (7474 <application_udp_appcall+0x298>)
    720e:	6809      	ldr	r1, [r1, #0]
    7210:	4618      	mov	r0, r3
    7212:	4622      	mov	r2, r4
    7214:	47b0      	blx	r6
			if ((len == 39) && (PLAINTEXT[0] == ID_IDENT_1) && (PLAINTEXT[1] == ID_IDENT_2) && (PLAINTEXT[2] == ID_IDENT_3) && (PLAINTEXT[3] == ID_IDENT_4)) {
    7216:	2c27      	cmp	r4, #39	; 0x27
			memmove(PLAINTEXT, CIPHERTEXT, len);																	// If no encryption compiled, then just copy over plain-text from [UDP] buffer
    7218:	4603      	mov	r3, r0
			if ((len == 39) && (PLAINTEXT[0] == ID_IDENT_1) && (PLAINTEXT[1] == ID_IDENT_2) && (PLAINTEXT[2] == ID_IDENT_3) && (PLAINTEXT[3] == ID_IDENT_4)) {
    721a:	d12e      	bne.n	727a <application_udp_appcall+0x9e>
    721c:	7802      	ldrb	r2, [r0, #0]
    721e:	2a37      	cmp	r2, #55	; 0x37
    7220:	d12b      	bne.n	727a <application_udp_appcall+0x9e>
    7222:	7842      	ldrb	r2, [r0, #1]
    7224:	2a9f      	cmp	r2, #159	; 0x9f
    7226:	d128      	bne.n	727a <application_udp_appcall+0x9e>
    7228:	7882      	ldrb	r2, [r0, #2]
    722a:	2a1b      	cmp	r2, #27
    722c:	d125      	bne.n	727a <application_udp_appcall+0x9e>
    722e:	78c2      	ldrb	r2, [r0, #3]
    7230:	2a61      	cmp	r2, #97	; 0x61
    7232:	d122      	bne.n	727a <application_udp_appcall+0x9e>
				memmove(((CONFIG *)&settings_buffer)->name, &PLAINTEXT[4], 33);
    7234:	4990      	ldr	r1, [pc, #576]	; (7478 <application_udp_appcall+0x29c>)
    7236:	1d02      	adds	r2, r0, #4
    7238:	3024      	adds	r0, #36	; 0x24
    723a:	f852 4b04 	ldr.w	r4, [r2], #4
    723e:	f841 4b04 	str.w	r4, [r1], #4
    7242:	4282      	cmp	r2, r0
    7244:	d1f9      	bne.n	723a <application_udp_appcall+0x5e>
    7246:	7812      	ldrb	r2, [r2, #0]
    7248:	700a      	strb	r2, [r1, #0]
				((CONFIG *)&settings_buffer)->gain_cardA = PLAINTEXT[37];
    724a:	488c      	ldr	r0, [pc, #560]	; (747c <application_udp_appcall+0x2a0>)
    724c:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
				((CONFIG *)&settings_buffer)->gain_cardB = PLAINTEXT[38];
    7250:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
				((CONFIG *)&settings_buffer)->gain_cardA = PLAINTEXT[37];
    7254:	f880 2029 	strb.w	r2, [r0, #41]	; 0x29
				((CONFIG *)&settings_buffer)->gain_cardB = PLAINTEXT[38];
    7258:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
				if (EEprom_settings(settings_buffer, SETTING_STRUCTURE_SIZE, 1) != ERR_NONE) {
    725c:	2201      	movs	r2, #1
    725e:	2180      	movs	r1, #128	; 0x80
    7260:	4b87      	ldr	r3, [pc, #540]	; (7480 <application_udp_appcall+0x2a4>)
    7262:	4c88      	ldr	r4, [pc, #544]	; (7484 <application_udp_appcall+0x2a8>)
    7264:	4798      	blx	r3
    7266:	2800      	cmp	r0, #0
    7268:	f000 8097 	beq.w	739a <application_udp_appcall+0x1be>
					xprintf("MultiSense [configuration ERROR READING]\r\n");
    726c:	4886      	ldr	r0, [pc, #536]	; (7488 <application_udp_appcall+0x2ac>)
					xprintf("MultiSense [UPDATED <ID> configuration WRITTEN]\r\n");
    726e:	47a0      	blx	r4
				refresh_gain = 1;
    7270:	4b86      	ldr	r3, [pc, #536]	; (748c <application_udp_appcall+0x2b0>)
				xprintf("Global settings packet received...\r\n");	
    7272:	4887      	ldr	r0, [pc, #540]	; (7490 <application_udp_appcall+0x2b4>)
				refresh_gain = 1;
    7274:	2201      	movs	r2, #1
    7276:	701a      	strb	r2, [r3, #0]
				xprintf("Global settings packet received...\r\n");	
    7278:	47a0      	blx	r4
	if ((uip_rexmit()) || (uip_poll())) {
    727a:	782b      	ldrb	r3, [r5, #0]
    727c:	f013 0f0c 	tst.w	r3, #12
    7280:	f000 822a 	beq.w	76d8 <application_udp_appcall+0x4fc>
		if (uip_conn->lport == htons(MAIN_UDPSOCKET)) {
    7284:	4d76      	ldr	r5, [pc, #472]	; (7460 <application_udp_appcall+0x284>)
    7286:	4c77      	ldr	r4, [pc, #476]	; (7464 <application_udp_appcall+0x288>)
    7288:	682b      	ldr	r3, [r5, #0]
    728a:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
    728e:	889e      	ldrh	r6, [r3, #4]
    7290:	47a0      	blx	r4
    7292:	4286      	cmp	r6, r0
    7294:	f040 812a 	bne.w	74ec <application_udp_appcall+0x310>
			if (readenvironment == 2) {
    7298:	4c7e      	ldr	r4, [pc, #504]	; (7494 <application_udp_appcall+0x2b8>)
    729a:	7823      	ldrb	r3, [r4, #0]
    729c:	2b02      	cmp	r3, #2
    729e:	f040 821b 	bne.w	76d8 <application_udp_appcall+0x4fc>
				PLAINTEXT[0] = (uint8_t)(((((CONFIG *)&settings_buffer)->ID) >> 24) & 0x00FF);
    72a2:	4a76      	ldr	r2, [pc, #472]	; (747c <application_udp_appcall+0x2a0>)
    72a4:	4b71      	ldr	r3, [pc, #452]	; (746c <application_udp_appcall+0x290>)
    72a6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
				PLAINTEXT[3] = (uint8_t)((((CONFIG *)&settings_buffer)->ID) & 0x00FF);
    72a8:	70d9      	strb	r1, [r3, #3]
				PLAINTEXT[0] = (uint8_t)(((((CONFIG *)&settings_buffer)->ID) >> 24) & 0x00FF);
    72aa:	0e08      	lsrs	r0, r1, #24
    72ac:	7018      	strb	r0, [r3, #0]
				PLAINTEXT[1] = (uint8_t)(((((CONFIG *)&settings_buffer)->ID) >> 16) & 0x00FF);
    72ae:	0c08      	lsrs	r0, r1, #16
    72b0:	7058      	strb	r0, [r3, #1]
				PLAINTEXT[2] = (uint8_t)(((((CONFIG *)&settings_buffer)->ID) >> 8) & 0x00FF);
    72b2:	0a08      	lsrs	r0, r1, #8
    72b4:	7098      	strb	r0, [r3, #2]
				memmove(&PLAINTEXT[4], ((CONFIG *)&settings_buffer)->name, 33);
    72b6:	f102 0108 	add.w	r1, r2, #8
    72ba:	1d18      	adds	r0, r3, #4
    72bc:	f102 0528 	add.w	r5, r2, #40	; 0x28
    72c0:	f851 6b04 	ldr.w	r6, [r1], #4
    72c4:	f840 6b04 	str.w	r6, [r0], #4
    72c8:	42a9      	cmp	r1, r5
    72ca:	d1f9      	bne.n	72c0 <application_udp_appcall+0xe4>
    72cc:	7809      	ldrb	r1, [r1, #0]
    72ce:	7001      	strb	r1, [r0, #0]
				PLAINTEXT[37] = ((CONFIG *)&settings_buffer)->gain_cardA;
    72d0:	f892 1029 	ldrb.w	r1, [r2, #41]	; 0x29
    72d4:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
				PLAINTEXT[38] = ((CONFIG *)&settings_buffer)->gain_cardB;
    72d8:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
				PLAINTEXT[39] = ((CONFIG *)&settings_buffer)->loop_basestation;
    72dc:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
    72e0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
				PLAINTEXT[40] = readdata_water1;
    72e4:	4a6c      	ldr	r2, [pc, #432]	; (7498 <application_udp_appcall+0x2bc>)
				PLAINTEXT[38] = ((CONFIG *)&settings_buffer)->gain_cardB;
    72e6:	f883 1026 	strb.w	r1, [r3, #38]	; 0x26
				PLAINTEXT[40] = readdata_water1;
    72ea:	7812      	ldrb	r2, [r2, #0]
    72ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				PLAINTEXT[41] = readdata_water2;
    72f0:	4a6a      	ldr	r2, [pc, #424]	; (749c <application_udp_appcall+0x2c0>)
				memmove(CIPHERTEXT, PLAINTEXT, 61);														// If no encryption compiled, then just copy over plain-text into [UDP] buffer
    72f2:	4e5f      	ldr	r6, [pc, #380]	; (7470 <application_udp_appcall+0x294>)
				PLAINTEXT[41] = readdata_water2;
    72f4:	7812      	ldrb	r2, [r2, #0]
    72f6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
				PLAINTEXT[42] = highvoltage;
    72fa:	4a69      	ldr	r2, [pc, #420]	; (74a0 <application_udp_appcall+0x2c4>)
    72fc:	7812      	ldrb	r2, [r2, #0]
    72fe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				PLAINTEXT[43] = readdata_tempmoisture[0];
    7302:	4a68      	ldr	r2, [pc, #416]	; (74a4 <application_udp_appcall+0x2c8>)
    7304:	7811      	ldrb	r1, [r2, #0]
    7306:	f883 102b 	strb.w	r1, [r3, #43]	; 0x2b
				PLAINTEXT[44] = readdata_tempmoisture[1];
    730a:	7851      	ldrb	r1, [r2, #1]
    730c:	f883 102c 	strb.w	r1, [r3, #44]	; 0x2c
				PLAINTEXT[45] = readdata_tempmoisture[2];
    7310:	7891      	ldrb	r1, [r2, #2]
				PLAINTEXT[46] = readdata_tempmoisture[3];
    7312:	78d2      	ldrb	r2, [r2, #3]
    7314:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				PLAINTEXT[47] = tamper;
    7318:	4a63      	ldr	r2, [pc, #396]	; (74a8 <application_udp_appcall+0x2cc>)
				PLAINTEXT[45] = readdata_tempmoisture[2];
    731a:	f883 102d 	strb.w	r1, [r3, #45]	; 0x2d
				PLAINTEXT[47] = tamper;
    731e:	7812      	ldrb	r2, [r2, #0]
    7320:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				PLAINTEXT[48] = link_port1;
    7324:	4a61      	ldr	r2, [pc, #388]	; (74ac <application_udp_appcall+0x2d0>)
				memmove(CIPHERTEXT, PLAINTEXT, 61);														// If no encryption compiled, then just copy over plain-text into [UDP] buffer
    7326:	4951      	ldr	r1, [pc, #324]	; (746c <application_udp_appcall+0x290>)
				PLAINTEXT[48] = link_port1;
    7328:	7812      	ldrb	r2, [r2, #0]
    732a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				PLAINTEXT[49] = link_port2;
    732e:	4a60      	ldr	r2, [pc, #384]	; (74b0 <application_udp_appcall+0x2d4>)
    7330:	7812      	ldrb	r2, [r2, #0]
    7332:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				PLAINTEXT[50] = link_port3;
    7336:	4a5f      	ldr	r2, [pc, #380]	; (74b4 <application_udp_appcall+0x2d8>)
    7338:	7812      	ldrb	r2, [r2, #0]
    733a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
				PLAINTEXT[51] = cardA_type;
    733e:	4a5e      	ldr	r2, [pc, #376]	; (74b8 <application_udp_appcall+0x2dc>)
    7340:	7812      	ldrb	r2, [r2, #0]
    7342:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
				PLAINTEXT[52] = cardB_type;
    7346:	4a5d      	ldr	r2, [pc, #372]	; (74bc <application_udp_appcall+0x2e0>)
    7348:	7812      	ldrb	r2, [r2, #0]
    734a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				PLAINTEXT[53] = ring_broken;
    734e:	4a5c      	ldr	r2, [pc, #368]	; (74c0 <application_udp_appcall+0x2e4>)
				memmove(CIPHERTEXT, PLAINTEXT, 61);														// If no encryption compiled, then just copy over plain-text into [UDP] buffer
    7350:	6830      	ldr	r0, [r6, #0]
				PLAINTEXT[53] = ring_broken;
    7352:	7812      	ldrb	r2, [r2, #0]
    7354:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
				PLAINTEXT[55] = MULTISENSE_FIRMWARE_MINOR;
    7358:	2201      	movs	r2, #1
    735a:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
				PLAINTEXT[56] = ID_IDENT_1;
    735e:	2237      	movs	r2, #55	; 0x37
    7360:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
				PLAINTEXT[57] = ID_IDENT_2;
    7364:	229f      	movs	r2, #159	; 0x9f
    7366:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
				PLAINTEXT[58] = ID_IDENT_3;
    736a:	221b      	movs	r2, #27
				PLAINTEXT[54] = MULTISENSE_FIRMWARE_MAJOR;
    736c:	2500      	movs	r5, #0
				PLAINTEXT[58] = ID_IDENT_3;
    736e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				PLAINTEXT[59] = ID_IDENT_4;
    7372:	2261      	movs	r2, #97	; 0x61
    7374:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
				PLAINTEXT[54] = MULTISENSE_FIRMWARE_MAJOR;
    7378:	f883 5036 	strb.w	r5, [r3, #54]	; 0x36
				PLAINTEXT[60] = 0;
    737c:	f883 503c 	strb.w	r5, [r3, #60]	; 0x3c
				memmove(CIPHERTEXT, PLAINTEXT, 61);														// If no encryption compiled, then just copy over plain-text into [UDP] buffer
    7380:	223d      	movs	r2, #61	; 0x3d
    7382:	4b3c      	ldr	r3, [pc, #240]	; (7474 <application_udp_appcall+0x298>)
    7384:	4798      	blx	r3
				uip_udp_send(61);
    7386:	6830      	ldr	r0, [r6, #0]
    7388:	4b4e      	ldr	r3, [pc, #312]	; (74c4 <application_udp_appcall+0x2e8>)
    738a:	213d      	movs	r1, #61	; 0x3d
    738c:	4798      	blx	r3
				xprintf("Hardware packet send...\r\n");
    738e:	484e      	ldr	r0, [pc, #312]	; (74c8 <application_udp_appcall+0x2ec>)
				readenvironment = 0;
    7390:	7025      	strb	r5, [r4, #0]
				xprintf("Topology update packet send...\r\n");
    7392:	4b3c      	ldr	r3, [pc, #240]	; (7484 <application_udp_appcall+0x2a8>)
}
    7394:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
				xprintf("Topology update packet send...\r\n");
    7398:	4718      	bx	r3
					xprintf("MultiSense [UPDATED <ID> configuration WRITTEN]\r\n");
    739a:	484c      	ldr	r0, [pc, #304]	; (74cc <application_udp_appcall+0x2f0>)
    739c:	e767      	b.n	726e <application_udp_appcall+0x92>
		} else if (uip_conn->lport == htons(CARDA_UDPSOCKET)) {
    739e:	683b      	ldr	r3, [r7, #0]
    73a0:	f640 70a1 	movw	r0, #4001	; 0xfa1
    73a4:	f8b3 8004 	ldrh.w	r8, [r3, #4]
    73a8:	47b0      	blx	r6
    73aa:	4580      	cmp	r8, r0
    73ac:	d115      	bne.n	73da <application_udp_appcall+0x1fe>
			memmove(PLAINTEXT, CIPHERTEXT, len);																	// If no encryption compiled, then just copy over plain-text from [UDP] buffer
    73ae:	4b2f      	ldr	r3, [pc, #188]	; (746c <application_udp_appcall+0x290>)
    73b0:	492f      	ldr	r1, [pc, #188]	; (7470 <application_udp_appcall+0x294>)
    73b2:	4e30      	ldr	r6, [pc, #192]	; (7474 <application_udp_appcall+0x298>)
    73b4:	6809      	ldr	r1, [r1, #0]
    73b6:	4622      	mov	r2, r4
    73b8:	4618      	mov	r0, r3
    73ba:	47b0      	blx	r6
			switch (cardA_type) {
    73bc:	4a3e      	ldr	r2, [pc, #248]	; (74b8 <application_udp_appcall+0x2dc>)
    73be:	7812      	ldrb	r2, [r2, #0]
    73c0:	2a02      	cmp	r2, #2
    73c2:	f47f af5a 	bne.w	727a <application_udp_appcall+0x9e>
				if (len == 1) {
    73c6:	2c01      	cmp	r4, #1
    73c8:	f47f af57 	bne.w	727a <application_udp_appcall+0x9e>
					miniIO_A_relay = PLAINTEXT[0];
    73cc:	4b40      	ldr	r3, [pc, #256]	; (74d0 <application_udp_appcall+0x2f4>)
    73ce:	7802      	ldrb	r2, [r0, #0]
					xprintf("CardA Mini-IO packet received...\r\n");
    73d0:	4840      	ldr	r0, [pc, #256]	; (74d4 <application_udp_appcall+0x2f8>)
					miniIO_A_relay = PLAINTEXT[0];
    73d2:	701a      	strb	r2, [r3, #0]
				xprintf("Broadcast Table [FLUSH] UDP packet arrived...\r\n");
    73d4:	4b2b      	ldr	r3, [pc, #172]	; (7484 <application_udp_appcall+0x2a8>)
    73d6:	4798      	blx	r3
    73d8:	e74f      	b.n	727a <application_udp_appcall+0x9e>
		} else if (uip_conn->lport == htons(CARDB_UDPSOCKET)) {
    73da:	683b      	ldr	r3, [r7, #0]
    73dc:	f640 70a2 	movw	r0, #4002	; 0xfa2
    73e0:	f8b3 8004 	ldrh.w	r8, [r3, #4]
    73e4:	47b0      	blx	r6
    73e6:	4580      	cmp	r8, r0
    73e8:	d113      	bne.n	7412 <application_udp_appcall+0x236>
			memmove(PLAINTEXT, CIPHERTEXT, len);																	// If no encryption compiled, then just copy over plain-text from [UDP] buffer
    73ea:	4b20      	ldr	r3, [pc, #128]	; (746c <application_udp_appcall+0x290>)
    73ec:	4920      	ldr	r1, [pc, #128]	; (7470 <application_udp_appcall+0x294>)
    73ee:	4e21      	ldr	r6, [pc, #132]	; (7474 <application_udp_appcall+0x298>)
    73f0:	6809      	ldr	r1, [r1, #0]
    73f2:	4622      	mov	r2, r4
    73f4:	4618      	mov	r0, r3
    73f6:	47b0      	blx	r6
			switch (cardB_type) {
    73f8:	4a30      	ldr	r2, [pc, #192]	; (74bc <application_udp_appcall+0x2e0>)
    73fa:	7812      	ldrb	r2, [r2, #0]
    73fc:	2a02      	cmp	r2, #2
    73fe:	f47f af3c 	bne.w	727a <application_udp_appcall+0x9e>
				if (len == 1) {
    7402:	2c01      	cmp	r4, #1
    7404:	f47f af39 	bne.w	727a <application_udp_appcall+0x9e>
					miniIO_B_relay = PLAINTEXT[0];
    7408:	4b33      	ldr	r3, [pc, #204]	; (74d8 <application_udp_appcall+0x2fc>)
    740a:	7802      	ldrb	r2, [r0, #0]
    740c:	701a      	strb	r2, [r3, #0]
					xprintf("CardB Mini-IO packet received...\r\n");
    740e:	4833      	ldr	r0, [pc, #204]	; (74dc <application_udp_appcall+0x300>)
    7410:	e7e0      	b.n	73d4 <application_udp_appcall+0x1f8>
		} else if (uip_conn->lport == htons(RING_MANAGEMENT_SOCKET)) {
    7412:	683b      	ldr	r3, [r7, #0]
    7414:	f640 70a3 	movw	r0, #4003	; 0xfa3
    7418:	889c      	ldrh	r4, [r3, #4]
    741a:	47b0      	blx	r6
    741c:	4284      	cmp	r4, r0
    741e:	f47f af2c 	bne.w	727a <application_udp_appcall+0x9e>
			if (!(((CONFIG *)&settings_buffer)->loop_basestation)) {
    7422:	4b16      	ldr	r3, [pc, #88]	; (747c <application_udp_appcall+0x2a0>)
    7424:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
    7428:	2b00      	cmp	r3, #0
    742a:	f47f af26 	bne.w	727a <application_udp_appcall+0x9e>
				writeKSZreg(SPI_KSZ8794_PORT1CONTROL2, 0x07);
    742e:	4c2c      	ldr	r4, [pc, #176]	; (74e0 <application_udp_appcall+0x304>)
    7430:	2107      	movs	r1, #7
    7432:	2012      	movs	r0, #18
    7434:	47a0      	blx	r4
				writeKSZreg(SPI_KSZ8794_PORT2CONTROL2, 0x07);
    7436:	2107      	movs	r1, #7
    7438:	2022      	movs	r0, #34	; 0x22
    743a:	47a0      	blx	r4
				writeKSZreg(SPI_KSZ8794_GLOBAL0, 0x2D);
    743c:	212d      	movs	r1, #45	; 0x2d
    743e:	2002      	movs	r0, #2
    7440:	47a0      	blx	r4
				delay_us(250);
    7442:	4b28      	ldr	r3, [pc, #160]	; (74e4 <application_udp_appcall+0x308>)
    7444:	20fa      	movs	r0, #250	; 0xfa
    7446:	4798      	blx	r3
				writeKSZreg(SPI_KSZ8794_PORT1CONTROL2, 0x06);
    7448:	2106      	movs	r1, #6
    744a:	2012      	movs	r0, #18
    744c:	47a0      	blx	r4
				writeKSZreg(SPI_KSZ8794_PORT2CONTROL2, 0x06);
    744e:	2022      	movs	r0, #34	; 0x22
    7450:	2106      	movs	r1, #6
    7452:	47a0      	blx	r4
				xprintf("Broadcast Table [FLUSH] UDP packet arrived...\r\n");
    7454:	4824      	ldr	r0, [pc, #144]	; (74e8 <application_udp_appcall+0x30c>)
    7456:	e7bd      	b.n	73d4 <application_udp_appcall+0x1f8>
    7458:	2000855c 	.word	0x2000855c
    745c:	20007579 	.word	0x20007579
    7460:	20008568 	.word	0x20008568
    7464:	00009e19 	.word	0x00009e19
    7468:	20008550 	.word	0x20008550
    746c:	20007855 	.word	0x20007855
    7470:	20008564 	.word	0x20008564
    7474:	0000ad8d 	.word	0x0000ad8d
    7478:	20007f1c 	.word	0x20007f1c
    747c:	20007f14 	.word	0x20007f14
    7480:	0000ac21 	.word	0x0000ac21
    7484:	00000395 	.word	0x00000395
    7488:	0000d174 	.word	0x0000d174
    748c:	2000853d 	.word	0x2000853d
    7490:	0000d28d 	.word	0x0000d28d
    7494:	20008250 	.word	0x20008250
    7498:	2000853e 	.word	0x2000853e
    749c:	2000852d 	.word	0x2000852d
    74a0:	20008535 	.word	0x20008535
    74a4:	20007f9d 	.word	0x20007f9d
    74a8:	20007f9b 	.word	0x20007f9b
    74ac:	20007571 	.word	0x20007571
    74b0:	20008274 	.word	0x20008274
    74b4:	20007575 	.word	0x20007575
    74b8:	20007c57 	.word	0x20007c57
    74bc:	20008540 	.word	0x20008540
    74c0:	20008251 	.word	0x20008251
    74c4:	00009e21 	.word	0x00009e21
    74c8:	0000d328 	.word	0x0000d328
    74cc:	0000d25b 	.word	0x0000d25b
    74d0:	20007f9c 	.word	0x20007f9c
    74d4:	0000d2b2 	.word	0x0000d2b2
    74d8:	20007f04 	.word	0x20007f04
    74dc:	0000d2d5 	.word	0x0000d2d5
    74e0:	0000acc1 	.word	0x0000acc1
    74e4:	00001229 	.word	0x00001229
    74e8:	0000d2f8 	.word	0x0000d2f8
		} else if (uip_conn->lport == htons(CARDA_UDPSOCKET)) {
    74ec:	682b      	ldr	r3, [r5, #0]
    74ee:	f640 70a1 	movw	r0, #4001	; 0xfa1
    74f2:	889e      	ldrh	r6, [r3, #4]
    74f4:	47a0      	blx	r4
    74f6:	4286      	cmp	r6, r0
    74f8:	d167      	bne.n	75ca <application_udp_appcall+0x3ee>
			switch (cardA_type) {
    74fa:	4b78      	ldr	r3, [pc, #480]	; (76dc <application_udp_appcall+0x500>)
    74fc:	781d      	ldrb	r5, [r3, #0]
    74fe:	2d01      	cmp	r5, #1
    7500:	d01d      	beq.n	753e <application_udp_appcall+0x362>
    7502:	2d02      	cmp	r5, #2
    7504:	f040 80e8 	bne.w	76d8 <application_udp_appcall+0x4fc>
				PLAINTEXT[0] = (uint8_t)miniIO_A0_adcH;
    7508:	4b75      	ldr	r3, [pc, #468]	; (76e0 <application_udp_appcall+0x504>)
    750a:	4976      	ldr	r1, [pc, #472]	; (76e4 <application_udp_appcall+0x508>)
    750c:	781b      	ldrb	r3, [r3, #0]
    750e:	700b      	strb	r3, [r1, #0]
				PLAINTEXT[1] = (uint8_t)miniIO_A0_adcL;
    7510:	4b75      	ldr	r3, [pc, #468]	; (76e8 <application_udp_appcall+0x50c>)
				memmove(CIPHERTEXT, PLAINTEXT, 5);													// If no encryption compiled, then just copy over plain-text into [UDP] buffer
    7512:	4c76      	ldr	r4, [pc, #472]	; (76ec <application_udp_appcall+0x510>)
				PLAINTEXT[1] = (uint8_t)miniIO_A0_adcL;
    7514:	781b      	ldrb	r3, [r3, #0]
    7516:	704b      	strb	r3, [r1, #1]
				PLAINTEXT[2] = (uint8_t)miniIO_A1_adcH;
    7518:	4b75      	ldr	r3, [pc, #468]	; (76f0 <application_udp_appcall+0x514>)
				memmove(CIPHERTEXT, PLAINTEXT, 5);													// If no encryption compiled, then just copy over plain-text into [UDP] buffer
    751a:	6820      	ldr	r0, [r4, #0]
				PLAINTEXT[2] = (uint8_t)miniIO_A1_adcH;
    751c:	781b      	ldrb	r3, [r3, #0]
    751e:	708b      	strb	r3, [r1, #2]
				PLAINTEXT[3] = (uint8_t)miniIO_A1_adcL;
    7520:	4b74      	ldr	r3, [pc, #464]	; (76f4 <application_udp_appcall+0x518>)
    7522:	781b      	ldrb	r3, [r3, #0]
    7524:	70cb      	strb	r3, [r1, #3]
				PLAINTEXT[4] = (uint8_t)miniIO_A_inputs;
    7526:	4b74      	ldr	r3, [pc, #464]	; (76f8 <application_udp_appcall+0x51c>)
    7528:	781b      	ldrb	r3, [r3, #0]
    752a:	710b      	strb	r3, [r1, #4]
				memmove(CIPHERTEXT, PLAINTEXT, 5);													// If no encryption compiled, then just copy over plain-text into [UDP] buffer
    752c:	2205      	movs	r2, #5
    752e:	4b73      	ldr	r3, [pc, #460]	; (76fc <application_udp_appcall+0x520>)
    7530:	4798      	blx	r3
				uip_udp_send(3);
    7532:	6820      	ldr	r0, [r4, #0]
    7534:	4b72      	ldr	r3, [pc, #456]	; (7700 <application_udp_appcall+0x524>)
    7536:	2103      	movs	r1, #3
    7538:	4798      	blx	r3
				xprintf("CardA Mini-IO packet send...\r\n");	
    753a:	4872      	ldr	r0, [pc, #456]	; (7704 <application_udp_appcall+0x528>)
    753c:	e729      	b.n	7392 <application_udp_appcall+0x1b6>
				if ((!sentA) && (card_sampleindex == SAMPLE_BUFFER_SIZE)) {
    753e:	f8df 820c 	ldr.w	r8, [pc, #524]	; 774c <application_udp_appcall+0x570>
    7542:	f898 6000 	ldrb.w	r6, [r8]
    7546:	2e00      	cmp	r6, #0
    7548:	f040 80c6 	bne.w	76d8 <application_udp_appcall+0x4fc>
    754c:	f8df 9210 	ldr.w	r9, [pc, #528]	; 7760 <application_udp_appcall+0x584>
    7550:	f8d9 7000 	ldr.w	r7, [r9]
    7554:	f5b7 7f2b 	cmp.w	r7, #684	; 0x2ac
    7558:	f040 80be 	bne.w	76d8 <application_udp_appcall+0x4fc>
					memmove(&PLAINTEXT[0], cardAch0_samplebuffer, SAMPLE_BUFFER_SIZE);
    755c:	4c61      	ldr	r4, [pc, #388]	; (76e4 <application_udp_appcall+0x508>)
    755e:	496a      	ldr	r1, [pc, #424]	; (7708 <application_udp_appcall+0x52c>)
    7560:	f8df a200 	ldr.w	sl, [pc, #512]	; 7764 <application_udp_appcall+0x588>
    7564:	463a      	mov	r2, r7
    7566:	4620      	mov	r0, r4
    7568:	47d0      	blx	sl
					memmove(&PLAINTEXT[SAMPLE_BUFFER_SIZE], cardAch1_samplebuffer, SAMPLE_BUFFER_SIZE);
    756a:	463a      	mov	r2, r7
    756c:	4967      	ldr	r1, [pc, #412]	; (770c <application_udp_appcall+0x530>)
					memmove(CIPHERTEXT, PLAINTEXT, (SAMPLE_BUFFER_SIZE * 2) + 6);													// If no encryption compiled, then just copy over plain-text into [UDP] buffer
    756e:	4f5f      	ldr	r7, [pc, #380]	; (76ec <application_udp_appcall+0x510>)
					memmove(&PLAINTEXT[SAMPLE_BUFFER_SIZE], cardAch1_samplebuffer, SAMPLE_BUFFER_SIZE);
    7570:	f504 702b 	add.w	r0, r4, #684	; 0x2ac
    7574:	47d0      	blx	sl
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 0] = cardAch2_samplebuffer;
    7576:	4b66      	ldr	r3, [pc, #408]	; (7710 <application_udp_appcall+0x534>)
					memmove(CIPHERTEXT, PLAINTEXT, (SAMPLE_BUFFER_SIZE * 2) + 6);													// If no encryption compiled, then just copy over plain-text into [UDP] buffer
    7578:	6838      	ldr	r0, [r7, #0]
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 0] = cardAch2_samplebuffer;
    757a:	781b      	ldrb	r3, [r3, #0]
    757c:	f884 3558 	strb.w	r3, [r4, #1368]	; 0x558
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 1] = cardAch3_samplebuffer;
    7580:	4b64      	ldr	r3, [pc, #400]	; (7714 <application_udp_appcall+0x538>)
    7582:	781b      	ldrb	r3, [r3, #0]
    7584:	f884 3559 	strb.w	r3, [r4, #1369]	; 0x559
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 2] = ID_IDENT_1;
    7588:	2337      	movs	r3, #55	; 0x37
    758a:	f884 355a 	strb.w	r3, [r4, #1370]	; 0x55a
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 3] = ID_IDENT_2;
    758e:	239f      	movs	r3, #159	; 0x9f
    7590:	f884 355b 	strb.w	r3, [r4, #1371]	; 0x55b
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 4] = ID_IDENT_3;
    7594:	231b      	movs	r3, #27
    7596:	f884 355c 	strb.w	r3, [r4, #1372]	; 0x55c
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 5] = ID_IDENT_4;
    759a:	2361      	movs	r3, #97	; 0x61
					memmove(CIPHERTEXT, PLAINTEXT, (SAMPLE_BUFFER_SIZE * 2) + 6);													// If no encryption compiled, then just copy over plain-text into [UDP] buffer
    759c:	f240 525e 	movw	r2, #1374	; 0x55e
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 5] = ID_IDENT_4;
    75a0:	f884 355d 	strb.w	r3, [r4, #1373]	; 0x55d
					memmove(CIPHERTEXT, PLAINTEXT, (SAMPLE_BUFFER_SIZE * 2) + 6);													// If no encryption compiled, then just copy over plain-text into [UDP] buffer
    75a4:	4621      	mov	r1, r4
    75a6:	4b55      	ldr	r3, [pc, #340]	; (76fc <application_udp_appcall+0x520>)
    75a8:	4798      	blx	r3
					uip_udp_send((SAMPLE_BUFFER_SIZE * 2) + 6);
    75aa:	4b55      	ldr	r3, [pc, #340]	; (7700 <application_udp_appcall+0x524>)
    75ac:	6838      	ldr	r0, [r7, #0]
    75ae:	f240 515e 	movw	r1, #1374	; 0x55e
    75b2:	4798      	blx	r3
					if (sentB) {
    75b4:	4b58      	ldr	r3, [pc, #352]	; (7718 <application_udp_appcall+0x53c>)
    75b6:	781a      	ldrb	r2, [r3, #0]
    75b8:	b122      	cbz	r2, 75c4 <application_udp_appcall+0x3e8>
						sentB = 0;
    75ba:	701e      	strb	r6, [r3, #0]
						card_sampleindex = 0;
    75bc:	f8c9 6000 	str.w	r6, [r9]
					xprintf("CardA VibraTek packet send...\r\n");
    75c0:	4856      	ldr	r0, [pc, #344]	; (771c <application_udp_appcall+0x540>)
    75c2:	e6e6      	b.n	7392 <application_udp_appcall+0x1b6>
						sentA = 1;
    75c4:	f888 5000 	strb.w	r5, [r8]
    75c8:	e7fa      	b.n	75c0 <application_udp_appcall+0x3e4>
		} else if (uip_conn->lport == htons(CARDB_UDPSOCKET)) {
    75ca:	682b      	ldr	r3, [r5, #0]
    75cc:	f640 70a2 	movw	r0, #4002	; 0xfa2
    75d0:	889e      	ldrh	r6, [r3, #4]
    75d2:	47a0      	blx	r4
    75d4:	4286      	cmp	r6, r0
    75d6:	d164      	bne.n	76a2 <application_udp_appcall+0x4c6>
			switch (cardB_type) {
    75d8:	4b51      	ldr	r3, [pc, #324]	; (7720 <application_udp_appcall+0x544>)
    75da:	781d      	ldrb	r5, [r3, #0]
    75dc:	2d01      	cmp	r5, #1
    75de:	d01c      	beq.n	761a <application_udp_appcall+0x43e>
    75e0:	2d02      	cmp	r5, #2
    75e2:	d179      	bne.n	76d8 <application_udp_appcall+0x4fc>
				PLAINTEXT[0] = (uint8_t)miniIO_B0_adcH;
    75e4:	4b4f      	ldr	r3, [pc, #316]	; (7724 <application_udp_appcall+0x548>)
    75e6:	493f      	ldr	r1, [pc, #252]	; (76e4 <application_udp_appcall+0x508>)
    75e8:	781b      	ldrb	r3, [r3, #0]
    75ea:	700b      	strb	r3, [r1, #0]
				PLAINTEXT[1] = (uint8_t)miniIO_B0_adcL;
    75ec:	4b4e      	ldr	r3, [pc, #312]	; (7728 <application_udp_appcall+0x54c>)
				memmove(CIPHERTEXT, PLAINTEXT, 3);												   	// If no encryption compiled, then just copy over plain-text into [UDP] buffer
    75ee:	4c3f      	ldr	r4, [pc, #252]	; (76ec <application_udp_appcall+0x510>)
				PLAINTEXT[1] = (uint8_t)miniIO_B0_adcL;
    75f0:	781b      	ldrb	r3, [r3, #0]
    75f2:	704b      	strb	r3, [r1, #1]
				PLAINTEXT[2] = (uint8_t)miniIO_B1_adcH;
    75f4:	4b4d      	ldr	r3, [pc, #308]	; (772c <application_udp_appcall+0x550>)
				memmove(CIPHERTEXT, PLAINTEXT, 3);												   	// If no encryption compiled, then just copy over plain-text into [UDP] buffer
    75f6:	6820      	ldr	r0, [r4, #0]
				PLAINTEXT[2] = (uint8_t)miniIO_B1_adcH;
    75f8:	781b      	ldrb	r3, [r3, #0]
    75fa:	708b      	strb	r3, [r1, #2]
				PLAINTEXT[3] = (uint8_t)miniIO_B1_adcL;
    75fc:	4b4c      	ldr	r3, [pc, #304]	; (7730 <application_udp_appcall+0x554>)
    75fe:	781b      	ldrb	r3, [r3, #0]
    7600:	70cb      	strb	r3, [r1, #3]
				PLAINTEXT[4] = (uint8_t)miniIO_B_inputs;
    7602:	4b4c      	ldr	r3, [pc, #304]	; (7734 <application_udp_appcall+0x558>)
    7604:	781b      	ldrb	r3, [r3, #0]
    7606:	710b      	strb	r3, [r1, #4]
				memmove(CIPHERTEXT, PLAINTEXT, 3);												   	// If no encryption compiled, then just copy over plain-text into [UDP] buffer
    7608:	2203      	movs	r2, #3
    760a:	4b3c      	ldr	r3, [pc, #240]	; (76fc <application_udp_appcall+0x520>)
    760c:	4798      	blx	r3
				uip_udp_send(5);
    760e:	6820      	ldr	r0, [r4, #0]
    7610:	4b3b      	ldr	r3, [pc, #236]	; (7700 <application_udp_appcall+0x524>)
    7612:	2105      	movs	r1, #5
    7614:	4798      	blx	r3
				xprintf("CardB Mini-IO packet send...\r\n");
    7616:	4848      	ldr	r0, [pc, #288]	; (7738 <application_udp_appcall+0x55c>)
    7618:	e6bb      	b.n	7392 <application_udp_appcall+0x1b6>
				if ((!sentB) && (card_sampleindex == SAMPLE_BUFFER_SIZE)) {
    761a:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 7718 <application_udp_appcall+0x53c>
    761e:	f898 6000 	ldrb.w	r6, [r8]
    7622:	2e00      	cmp	r6, #0
    7624:	d158      	bne.n	76d8 <application_udp_appcall+0x4fc>
    7626:	f8df 9138 	ldr.w	r9, [pc, #312]	; 7760 <application_udp_appcall+0x584>
    762a:	f8d9 7000 	ldr.w	r7, [r9]
    762e:	f5b7 7f2b 	cmp.w	r7, #684	; 0x2ac
    7632:	d151      	bne.n	76d8 <application_udp_appcall+0x4fc>
					memmove(&PLAINTEXT[0], cardBch0_samplebuffer, SAMPLE_BUFFER_SIZE);
    7634:	4c2b      	ldr	r4, [pc, #172]	; (76e4 <application_udp_appcall+0x508>)
    7636:	4941      	ldr	r1, [pc, #260]	; (773c <application_udp_appcall+0x560>)
    7638:	f8df a128 	ldr.w	sl, [pc, #296]	; 7764 <application_udp_appcall+0x588>
    763c:	463a      	mov	r2, r7
    763e:	4620      	mov	r0, r4
    7640:	47d0      	blx	sl
					memmove(&PLAINTEXT[SAMPLE_BUFFER_SIZE], cardBch1_samplebuffer, SAMPLE_BUFFER_SIZE);
    7642:	463a      	mov	r2, r7
    7644:	493e      	ldr	r1, [pc, #248]	; (7740 <application_udp_appcall+0x564>)
					memmove(CIPHERTEXT, PLAINTEXT, (SAMPLE_BUFFER_SIZE * 2) + 6);													// If no encryption compiled, then just copy over plain-text into [UDP] buffer
    7646:	4f29      	ldr	r7, [pc, #164]	; (76ec <application_udp_appcall+0x510>)
					memmove(&PLAINTEXT[SAMPLE_BUFFER_SIZE], cardBch1_samplebuffer, SAMPLE_BUFFER_SIZE);
    7648:	f504 702b 	add.w	r0, r4, #684	; 0x2ac
    764c:	47d0      	blx	sl
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 0] = cardBch2_samplebuffer;
    764e:	4b3d      	ldr	r3, [pc, #244]	; (7744 <application_udp_appcall+0x568>)
					memmove(CIPHERTEXT, PLAINTEXT, (SAMPLE_BUFFER_SIZE * 2) + 6);													// If no encryption compiled, then just copy over plain-text into [UDP] buffer
    7650:	6838      	ldr	r0, [r7, #0]
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 0] = cardBch2_samplebuffer;
    7652:	781b      	ldrb	r3, [r3, #0]
    7654:	f884 3558 	strb.w	r3, [r4, #1368]	; 0x558
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 1] = cardBch3_samplebuffer;
    7658:	4b3b      	ldr	r3, [pc, #236]	; (7748 <application_udp_appcall+0x56c>)
    765a:	781b      	ldrb	r3, [r3, #0]
    765c:	f884 3559 	strb.w	r3, [r4, #1369]	; 0x559
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 2] = ID_IDENT_1;
    7660:	2337      	movs	r3, #55	; 0x37
    7662:	f884 355a 	strb.w	r3, [r4, #1370]	; 0x55a
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 3] = ID_IDENT_2;
    7666:	239f      	movs	r3, #159	; 0x9f
    7668:	f884 355b 	strb.w	r3, [r4, #1371]	; 0x55b
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 4] = ID_IDENT_3;
    766c:	231b      	movs	r3, #27
    766e:	f884 355c 	strb.w	r3, [r4, #1372]	; 0x55c
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 5] = ID_IDENT_4;
    7672:	2361      	movs	r3, #97	; 0x61
					memmove(CIPHERTEXT, PLAINTEXT, (SAMPLE_BUFFER_SIZE * 2) + 6);													// If no encryption compiled, then just copy over plain-text into [UDP] buffer
    7674:	f240 525e 	movw	r2, #1374	; 0x55e
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 5] = ID_IDENT_4;
    7678:	f884 355d 	strb.w	r3, [r4, #1373]	; 0x55d
					memmove(CIPHERTEXT, PLAINTEXT, (SAMPLE_BUFFER_SIZE * 2) + 6);													// If no encryption compiled, then just copy over plain-text into [UDP] buffer
    767c:	4621      	mov	r1, r4
    767e:	4b1f      	ldr	r3, [pc, #124]	; (76fc <application_udp_appcall+0x520>)
    7680:	4798      	blx	r3
					uip_udp_send((SAMPLE_BUFFER_SIZE * 2) + 6);
    7682:	4b1f      	ldr	r3, [pc, #124]	; (7700 <application_udp_appcall+0x524>)
    7684:	6838      	ldr	r0, [r7, #0]
    7686:	f240 515e 	movw	r1, #1374	; 0x55e
    768a:	4798      	blx	r3
					if (sentA) {
    768c:	4b2f      	ldr	r3, [pc, #188]	; (774c <application_udp_appcall+0x570>)
    768e:	781a      	ldrb	r2, [r3, #0]
    7690:	b122      	cbz	r2, 769c <application_udp_appcall+0x4c0>
						sentA = 0;
    7692:	701e      	strb	r6, [r3, #0]
						card_sampleindex = 0;
    7694:	f8c9 6000 	str.w	r6, [r9]
					xprintf("CardB VibraTek packet send...\r\n");
    7698:	482d      	ldr	r0, [pc, #180]	; (7750 <application_udp_appcall+0x574>)
    769a:	e67a      	b.n	7392 <application_udp_appcall+0x1b6>
						sentB = 1;
    769c:	f888 5000 	strb.w	r5, [r8]
    76a0:	e7fa      	b.n	7698 <application_udp_appcall+0x4bc>
		} else if (uip_conn->lport == htons(RING_MANAGEMENT_SOCKET)) {
    76a2:	682b      	ldr	r3, [r5, #0]
    76a4:	f640 70a3 	movw	r0, #4003	; 0xfa3
    76a8:	889d      	ldrh	r5, [r3, #4]
    76aa:	47a0      	blx	r4
    76ac:	4285      	cmp	r5, r0
    76ae:	d113      	bne.n	76d8 <application_udp_appcall+0x4fc>
			if ((send_relearn_udp) && (((CONFIG *)&settings_buffer)->loop_basestation)) {
    76b0:	4d28      	ldr	r5, [pc, #160]	; (7754 <application_udp_appcall+0x578>)
    76b2:	782b      	ldrb	r3, [r5, #0]
    76b4:	b183      	cbz	r3, 76d8 <application_udp_appcall+0x4fc>
    76b6:	4b28      	ldr	r3, [pc, #160]	; (7758 <application_udp_appcall+0x57c>)
    76b8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
    76bc:	b163      	cbz	r3, 76d8 <application_udp_appcall+0x4fc>
				PLAINTEXT[0] = 0;
    76be:	4b09      	ldr	r3, [pc, #36]	; (76e4 <application_udp_appcall+0x508>)
    76c0:	2400      	movs	r4, #0
    76c2:	701c      	strb	r4, [r3, #0]
				memmove(CIPHERTEXT, PLAINTEXT, 1);
    76c4:	4b09      	ldr	r3, [pc, #36]	; (76ec <application_udp_appcall+0x510>)
    76c6:	681a      	ldr	r2, [r3, #0]
    76c8:	7014      	strb	r4, [r2, #0]
				uip_udp_send(1);
    76ca:	6818      	ldr	r0, [r3, #0]
    76cc:	4b0c      	ldr	r3, [pc, #48]	; (7700 <application_udp_appcall+0x524>)
    76ce:	2101      	movs	r1, #1
    76d0:	4798      	blx	r3
				send_relearn_udp = 0;
    76d2:	702c      	strb	r4, [r5, #0]
				xprintf("Topology update packet send...\r\n");
    76d4:	4821      	ldr	r0, [pc, #132]	; (775c <application_udp_appcall+0x580>)
    76d6:	e65c      	b.n	7392 <application_udp_appcall+0x1b6>
    76d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    76dc:	20007c57 	.word	0x20007c57
    76e0:	20007c55 	.word	0x20007c55
    76e4:	20007855 	.word	0x20007855
    76e8:	20008534 	.word	0x20008534
    76ec:	20008564 	.word	0x20008564
    76f0:	2000825b 	.word	0x2000825b
    76f4:	20007f9a 	.word	0x20007f9a
    76f8:	20007574 	.word	0x20007574
    76fc:	0000ad8d 	.word	0x0000ad8d
    7700:	00009e21 	.word	0x00009e21
    7704:	0000d342 	.word	0x0000d342
    7708:	20008275 	.word	0x20008275
    770c:	20007c58 	.word	0x20007c58
    7710:	20007840 	.word	0x20007840
    7714:	20007572 	.word	0x20007572
    7718:	2000757e 	.word	0x2000757e
    771c:	0000d361 	.word	0x0000d361
    7720:	20008540 	.word	0x20008540
    7724:	20007fa2 	.word	0x20007fa2
    7728:	20007c56 	.word	0x20007c56
    772c:	20007584 	.word	0x20007584
    7730:	2000853f 	.word	0x2000853f
    7734:	20008258 	.word	0x20008258
    7738:	0000d381 	.word	0x0000d381
    773c:	20007fa4 	.word	0x20007fa4
    7740:	20007590 	.word	0x20007590
    7744:	20007577 	.word	0x20007577
    7748:	20007578 	.word	0x20007578
    774c:	20007fa1 	.word	0x20007fa1
    7750:	0000d3a0 	.word	0x0000d3a0
    7754:	20008259 	.word	0x20008259
    7758:	20007f14 	.word	0x20007f14
    775c:	0000d3c0 	.word	0x0000d3c0
    7760:	20008528 	.word	0x20008528
    7764:	0000ad77 	.word	0x0000ad77

00007768 <main_loop>:
{
    7768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	command_dataw[1] = 0x00;
    776c:	4b45      	ldr	r3, [pc, #276]	; (7884 <main_loop+0x11c>)
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    776e:	4d46      	ldr	r5, [pc, #280]	; (7888 <main_loop+0x120>)
{
    7770:	b08b      	sub	sp, #44	; 0x2c
	command_dataw[1] = 0x00;
    7772:	2200      	movs	r2, #0
    7774:	705a      	strb	r2, [r3, #1]
	command_dataw[2] = 0x00;
    7776:	709a      	strb	r2, [r3, #2]
	broadcast_storm = 0;
    7778:	9206      	str	r2, [sp, #24]
	key_check = 0;
    777a:	4614      	mov	r4, r2
	eth_check = 0;
    777c:	4616      	mov	r6, r2
    777e:	9305      	str	r3, [sp, #20]
		loopcount++;
    7780:	4a42      	ldr	r2, [pc, #264]	; (788c <main_loop+0x124>)
    7782:	6813      	ldr	r3, [r2, #0]
		if (eth_check == 1000) {
    7784:	f5b6 7f7a 	cmp.w	r6, #1000	; 0x3e8
		loopcount++;
    7788:	f103 0301 	add.w	r3, r3, #1
    778c:	6013      	str	r3, [r2, #0]
		if (eth_check == 1000) {
    778e:	f040 830c 	bne.w	7daa <main_loop+0x642>
				if (mac_async_read_len(&ETHERNET_MAC_0) > 0) {
    7792:	4f3f      	ldr	r7, [pc, #252]	; (7890 <main_loop+0x128>)
					uip_len = mac_async_read(&ETHERNET_MAC_0, (uint8_t *)&uip_buf[0], sizeof(uip_buf));
    7794:	f8df 811c 	ldr.w	r8, [pc, #284]	; 78b4 <main_loop+0x14c>
    7798:	f04f 0905 	mov.w	r9, #5
    779c:	f04f 0b00 	mov.w	fp, #0
				if (mac_async_read_len(&ETHERNET_MAC_0) > 0) {
    77a0:	4638      	mov	r0, r7
    77a2:	4b3c      	ldr	r3, [pc, #240]	; (7894 <main_loop+0x12c>)
    77a4:	4798      	blx	r3
    77a6:	2800      	cmp	r0, #0
    77a8:	f000 861c 	beq.w	83e4 <main_loop+0xc7c>
					uip_len = mac_async_read(&ETHERNET_MAC_0, (uint8_t *)&uip_buf[0], sizeof(uip_buf));
    77ac:	4e3a      	ldr	r6, [pc, #232]	; (7898 <main_loop+0x130>)
    77ae:	4b3b      	ldr	r3, [pc, #236]	; (789c <main_loop+0x134>)
    77b0:	f240 62a6 	movw	r2, #1702	; 0x6a6
    77b4:	4631      	mov	r1, r6
    77b6:	4638      	mov	r0, r7
    77b8:	4798      	blx	r3
    77ba:	b280      	uxth	r0, r0
				if ((uip_len == 68) && (uip_buf[0] == 0x01) && (uip_buf[1] == 0x80) && (uip_buf[2] == 0xC2) && (uip_buf[3] == 0x00) && (uip_buf[4] == 0x00) && (uip_buf[5] == 0x00) && (uip_buf[6] == 0x01) &&
    77bc:	2844      	cmp	r0, #68	; 0x44
					uip_len = mac_async_read(&ETHERNET_MAC_0, (uint8_t *)&uip_buf[0], sizeof(uip_buf));
    77be:	f8a8 0000 	strh.w	r0, [r8]
    77c2:	46b2      	mov	sl, r6
				if ((uip_len == 68) && (uip_buf[0] == 0x01) && (uip_buf[1] == 0x80) && (uip_buf[2] == 0xC2) && (uip_buf[3] == 0x00) && (uip_buf[4] == 0x00) && (uip_buf[5] == 0x00) && (uip_buf[6] == 0x01) &&
    77c4:	d142      	bne.n	784c <main_loop+0xe4>
    77c6:	7833      	ldrb	r3, [r6, #0]
    77c8:	2b01      	cmp	r3, #1
    77ca:	d13f      	bne.n	784c <main_loop+0xe4>
    77cc:	7873      	ldrb	r3, [r6, #1]
    77ce:	2b80      	cmp	r3, #128	; 0x80
    77d0:	d13c      	bne.n	784c <main_loop+0xe4>
    77d2:	78b3      	ldrb	r3, [r6, #2]
    77d4:	2bc2      	cmp	r3, #194	; 0xc2
    77d6:	d139      	bne.n	784c <main_loop+0xe4>
    77d8:	78f3      	ldrb	r3, [r6, #3]
    77da:	2b00      	cmp	r3, #0
    77dc:	d136      	bne.n	784c <main_loop+0xe4>
    77de:	7933      	ldrb	r3, [r6, #4]
    77e0:	2b00      	cmp	r3, #0
    77e2:	d133      	bne.n	784c <main_loop+0xe4>
    77e4:	7973      	ldrb	r3, [r6, #5]
    77e6:	2b00      	cmp	r3, #0
    77e8:	d130      	bne.n	784c <main_loop+0xe4>
    77ea:	79b3      	ldrb	r3, [r6, #6]
    77ec:	2b01      	cmp	r3, #1
    77ee:	d12d      	bne.n	784c <main_loop+0xe4>
    77f0:	79f3      	ldrb	r3, [r6, #7]
    77f2:	2b80      	cmp	r3, #128	; 0x80
    77f4:	d12a      	bne.n	784c <main_loop+0xe4>
				(uip_buf[7] == 0x80) && (uip_buf[8] == 0xC2) && (uip_buf[9] == 0x00) && (uip_buf[10] == 0x00) && (uip_buf[11] == 0x01) && (*((unsigned short int *)&(uip_buf[12])) == 0x01E0) &&
    77f6:	7a33      	ldrb	r3, [r6, #8]
    77f8:	2bc2      	cmp	r3, #194	; 0xc2
    77fa:	d127      	bne.n	784c <main_loop+0xe4>
    77fc:	7a73      	ldrb	r3, [r6, #9]
    77fe:	bb2b      	cbnz	r3, 784c <main_loop+0xe4>
    7800:	7ab3      	ldrb	r3, [r6, #10]
    7802:	bb1b      	cbnz	r3, 784c <main_loop+0xe4>
    7804:	7af3      	ldrb	r3, [r6, #11]
    7806:	2b01      	cmp	r3, #1
    7808:	d120      	bne.n	784c <main_loop+0xe4>
    780a:	89b3      	ldrh	r3, [r6, #12]
    780c:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
    7810:	d11c      	bne.n	784c <main_loop+0xe4>
				(uip_buf[29] == mac_raw[0]) && (uip_buf[30] == mac_raw[1]) && (uip_buf[31] == mac_raw[2]) && (uip_buf[32] == mac_raw[3]) && (uip_buf[33] == mac_raw[4]) && (uip_buf[34] == mac_raw[5])) {
    7812:	4b23      	ldr	r3, [pc, #140]	; (78a0 <main_loop+0x138>)
				(uip_buf[7] == 0x80) && (uip_buf[8] == 0xC2) && (uip_buf[9] == 0x00) && (uip_buf[10] == 0x00) && (uip_buf[11] == 0x01) && (*((unsigned short int *)&(uip_buf[12])) == 0x01E0) &&
    7814:	7f71      	ldrb	r1, [r6, #29]
    7816:	781a      	ldrb	r2, [r3, #0]
    7818:	4291      	cmp	r1, r2
    781a:	d117      	bne.n	784c <main_loop+0xe4>
				(uip_buf[29] == mac_raw[0]) && (uip_buf[30] == mac_raw[1]) && (uip_buf[31] == mac_raw[2]) && (uip_buf[32] == mac_raw[3]) && (uip_buf[33] == mac_raw[4]) && (uip_buf[34] == mac_raw[5])) {
    781c:	7fb1      	ldrb	r1, [r6, #30]
    781e:	785a      	ldrb	r2, [r3, #1]
    7820:	4291      	cmp	r1, r2
    7822:	d113      	bne.n	784c <main_loop+0xe4>
    7824:	7ff1      	ldrb	r1, [r6, #31]
    7826:	789a      	ldrb	r2, [r3, #2]
    7828:	4291      	cmp	r1, r2
    782a:	d10f      	bne.n	784c <main_loop+0xe4>
    782c:	f896 1020 	ldrb.w	r1, [r6, #32]
    7830:	78da      	ldrb	r2, [r3, #3]
    7832:	4291      	cmp	r1, r2
    7834:	d10a      	bne.n	784c <main_loop+0xe4>
    7836:	f896 1021 	ldrb.w	r1, [r6, #33]	; 0x21
    783a:	791a      	ldrb	r2, [r3, #4]
    783c:	4291      	cmp	r1, r2
    783e:	d105      	bne.n	784c <main_loop+0xe4>
    7840:	f896 2022 	ldrb.w	r2, [r6, #34]	; 0x22
    7844:	795b      	ldrb	r3, [r3, #5]
    7846:	429a      	cmp	r2, r3
    7848:	f000 8270 	beq.w	7d2c <main_loop+0x5c4>
					if (ETH_BUF->type == htons(UIP_ETHTYPE_IP)) {
    784c:	f8ba 300c 	ldrh.w	r3, [sl, #12]
    7850:	4e14      	ldr	r6, [pc, #80]	; (78a4 <main_loop+0x13c>)
    7852:	9307      	str	r3, [sp, #28]
    7854:	f44f 6000 	mov.w	r0, #2048	; 0x800
    7858:	47b0      	blx	r6
    785a:	9b07      	ldr	r3, [sp, #28]
    785c:	4283      	cmp	r3, r0
    785e:	d12b      	bne.n	78b8 <main_loop+0x150>
						uip_input();
    7860:	4b11      	ldr	r3, [pc, #68]	; (78a8 <main_loop+0x140>)
    7862:	2001      	movs	r0, #1
    7864:	4798      	blx	r3
						if (uip_len > 0) {
    7866:	f8b8 3000 	ldrh.w	r3, [r8]
    786a:	b393      	cbz	r3, 78d2 <main_loop+0x16a>
							uip_arp_out();
    786c:	4b0f      	ldr	r3, [pc, #60]	; (78ac <main_loop+0x144>)
    786e:	4798      	blx	r3
							mac_async_write(&ETHERNET_MAC_0, (uint8_t *)&uip_buf[0], uip_len);
    7870:	f8b8 2000 	ldrh.w	r2, [r8]
							mac_async_write(&ETHERNET_MAC_0, (uint8_t *)&uip_buf[0], uip_len);
    7874:	4908      	ldr	r1, [pc, #32]	; (7898 <main_loop+0x130>)
    7876:	4b0e      	ldr	r3, [pc, #56]	; (78b0 <main_loop+0x148>)
    7878:	4638      	mov	r0, r7
    787a:	4798      	blx	r3
    787c:	e029      	b.n	78d2 <main_loop+0x16a>
		key_check = 0;
    787e:	4604      	mov	r4, r0
    7880:	e77e      	b.n	7780 <main_loop+0x18>
    7882:	bf00      	nop
    7884:	20007853 	.word	0x20007853
    7888:	41008000 	.word	0x41008000
    788c:	20007580 	.word	0x20007580
    7890:	20007528 	.word	0x20007528
    7894:	0000163d 	.word	0x0000163d
    7898:	20008622 	.word	0x20008622
    789c:	00001609 	.word	0x00001609
    78a0:	20007f94 	.word	0x20007f94
    78a4:	00009e19 	.word	0x00009e19
    78a8:	000091f1 	.word	0x000091f1
    78ac:	0000a079 	.word	0x0000a079
    78b0:	000015cd 	.word	0x000015cd
    78b4:	20008550 	.word	0x20008550
					} else if (ETH_BUF->type == htons (UIP_ETHTYPE_ARP)) {
    78b8:	f640 0006 	movw	r0, #2054	; 0x806
    78bc:	f8ba a00c 	ldrh.w	sl, [sl, #12]
    78c0:	47b0      	blx	r6
    78c2:	4582      	cmp	sl, r0
    78c4:	d105      	bne.n	78d2 <main_loop+0x16a>
						uip_arp_arpin();
    78c6:	4ba6      	ldr	r3, [pc, #664]	; (7b60 <main_loop+0x3f8>)
    78c8:	4798      	blx	r3
						if (uip_len > 0) {
    78ca:	f8b8 2000 	ldrh.w	r2, [r8]
    78ce:	2a00      	cmp	r2, #0
    78d0:	d1d0      	bne.n	7874 <main_loop+0x10c>
			for (etherloop = 0; etherloop < 5; etherloop++) {
    78d2:	f1b9 0901 	subs.w	r9, r9, #1
    78d6:	f47f af63 	bne.w	77a0 <main_loop+0x38>
				if (!broadcast_storm) {
    78da:	9b06      	ldr	r3, [sp, #24]
    78dc:	b953      	cbnz	r3, 78f4 <main_loop+0x18c>
					xprintf("ETHERNET: [broadcast storm] !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n");
    78de:	48a1      	ldr	r0, [pc, #644]	; (7b64 <main_loop+0x3fc>)
    78e0:	4ba1      	ldr	r3, [pc, #644]	; (7b68 <main_loop+0x400>)
    78e2:	4798      	blx	r3
					writeKSZreg(SPI_KSZ8794_PORT4CONTROL2, 0x00);
    78e4:	4ba1      	ldr	r3, [pc, #644]	; (7b6c <main_loop+0x404>)
    78e6:	9906      	ldr	r1, [sp, #24]
    78e8:	2052      	movs	r0, #82	; 0x52
    78ea:	4798      	blx	r3
					stormstate = 1;
    78ec:	4aa0      	ldr	r2, [pc, #640]	; (7b70 <main_loop+0x408>)
    78ee:	2301      	movs	r3, #1
    78f0:	7013      	strb	r3, [r2, #0]
					broadcast_storm = 1;
    78f2:	9306      	str	r3, [sp, #24]
			if (ip_periodic_check) {
    78f4:	4b9f      	ldr	r3, [pc, #636]	; (7b74 <main_loop+0x40c>)
    78f6:	781a      	ldrb	r2, [r3, #0]
    78f8:	2a00      	cmp	r2, #0
    78fa:	f040 821a 	bne.w	7d32 <main_loop+0x5ca>
			if (arp_check) {
    78fe:	4b9e      	ldr	r3, [pc, #632]	; (7b78 <main_loop+0x410>)
    7900:	781a      	ldrb	r2, [r3, #0]
    7902:	2600      	movs	r6, #0
    7904:	2a00      	cmp	r2, #0
    7906:	f040 824c 	bne.w	7da2 <main_loop+0x63a>
			eth_check = 0;
    790a:	4616      	mov	r6, r2
		if (refresh_gain) {
    790c:	f8df 92f0 	ldr.w	r9, [pc, #752]	; 7c00 <main_loop+0x498>
    7910:	f8df 82f0 	ldr.w	r8, [pc, #752]	; 7c04 <main_loop+0x49c>
    7914:	f899 3000 	ldrb.w	r3, [r9]
    7918:	4f98      	ldr	r7, [pc, #608]	; (7b7c <main_loop+0x414>)
    791a:	b33b      	cbz	r3, 796c <main_loop+0x204>
			if (cardA_type == CARD_VIBRATEK) {
    791c:	f898 3000 	ldrb.w	r3, [r8]
    7920:	2b01      	cmp	r3, #1
    7922:	d10e      	bne.n	7942 <main_loop+0x1da>
				xprintf("Write ADC gain settings for VibraTek CardA\r\n");
    7924:	4896      	ldr	r0, [pc, #600]	; (7b80 <main_loop+0x418>)
    7926:	f8df a240 	ldr.w	sl, [pc, #576]	; 7b68 <main_loop+0x400>
    792a:	47d0      	blx	sl
				if ((err = I2C_setGAIN(PC27_CARDA_I2C_SDA,  PC28_CARDA_I2C_CLK, ((CONFIG *)&settings_buffer)->gain_cardA)) < 0) {
    792c:	4b95      	ldr	r3, [pc, #596]	; (7b84 <main_loop+0x41c>)
    792e:	215c      	movs	r1, #92	; 0x5c
    7930:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
    7934:	4b94      	ldr	r3, [pc, #592]	; (7b88 <main_loop+0x420>)
    7936:	205b      	movs	r0, #91	; 0x5b
    7938:	4798      	blx	r3
    793a:	1e01      	subs	r1, r0, #0
    793c:	da01      	bge.n	7942 <main_loop+0x1da>
					xprintf("Could NOT write to the DAC Gain controller on CARDA:I2C [%i]\r\n", err);
    793e:	4893      	ldr	r0, [pc, #588]	; (7b8c <main_loop+0x424>)
    7940:	47d0      	blx	sl
			if (cardB_type == CARD_VIBRATEK) {
    7942:	783b      	ldrb	r3, [r7, #0]
    7944:	2b01      	cmp	r3, #1
    7946:	d10e      	bne.n	7966 <main_loop+0x1fe>
				xprintf("Write ADC gain settings for VibraTek CardB\r\n");
    7948:	4891      	ldr	r0, [pc, #580]	; (7b90 <main_loop+0x428>)
    794a:	f8df a21c 	ldr.w	sl, [pc, #540]	; 7b68 <main_loop+0x400>
    794e:	47d0      	blx	sl
				if (( err = I2C_setGAIN(PB24_CARDB_I2C_SDA,  PB25_CARDB_I2C_CLK, ((CONFIG *)&settings_buffer)->gain_cardB)) < 0) {
    7950:	4b8c      	ldr	r3, [pc, #560]	; (7b84 <main_loop+0x41c>)
    7952:	2139      	movs	r1, #57	; 0x39
    7954:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
    7958:	4b8b      	ldr	r3, [pc, #556]	; (7b88 <main_loop+0x420>)
    795a:	2038      	movs	r0, #56	; 0x38
    795c:	4798      	blx	r3
    795e:	1e01      	subs	r1, r0, #0
    7960:	da01      	bge.n	7966 <main_loop+0x1fe>
					xprintf("Could NOT write to the DAC Gain controller on CARDB:I2C [%i]\r\n", err);
    7962:	488c      	ldr	r0, [pc, #560]	; (7b94 <main_loop+0x42c>)
    7964:	47d0      	blx	sl
			refresh_gain = 0;
    7966:	2300      	movs	r3, #0
    7968:	f889 3000 	strb.w	r3, [r9]
    796c:	f04f 0920 	mov.w	r9, #32
    7970:	f8c5 9094 	str.w	r9, [r5, #148]	; 0x94
		command_dataw[0] = 0x60 + (ADC_CH0 << 2);
    7974:	9a05      	ldr	r2, [sp, #20]
    7976:	2360      	movs	r3, #96	; 0x60
    7978:	7013      	strb	r3, [r2, #0]
		bash_spi_transfer(command_dataw, command_datar, 2);
    797a:	4b87      	ldr	r3, [pc, #540]	; (7b98 <main_loop+0x430>)
    797c:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    797e:	f8c5 9098 	str.w	r9, [r5, #152]	; 0x98
		if (((cardA_type == CARD_VIBRATEK) || (cardA_type == CARD_VIBRAPOINT)) && (card_sampleindex < SAMPLE_BUFFER_SIZE)) {
    7982:	f898 3000 	ldrb.w	r3, [r8]
    7986:	2b01      	cmp	r3, #1
    7988:	d001      	beq.n	798e <main_loop+0x226>
    798a:	2b04      	cmp	r3, #4
    798c:	d108      	bne.n	79a0 <main_loop+0x238>
    798e:	4b83      	ldr	r3, [pc, #524]	; (7b9c <main_loop+0x434>)
    7990:	681b      	ldr	r3, [r3, #0]
    7992:	f5b3 7f2b 	cmp.w	r3, #684	; 0x2ac
			cardAch0_samplebuffer[card_sampleindex] = command_datar[1];
    7996:	bf3f      	itttt	cc
    7998:	4a81      	ldrcc	r2, [pc, #516]	; (7ba0 <main_loop+0x438>)
    799a:	7851      	ldrbcc	r1, [r2, #1]
    799c:	4a81      	ldrcc	r2, [pc, #516]	; (7ba4 <main_loop+0x43c>)
    799e:	54d1      	strbcc	r1, [r2, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    79a0:	4b81      	ldr	r3, [pc, #516]	; (7ba8 <main_loop+0x440>)
    79a2:	f04f 0920 	mov.w	r9, #32
    79a6:	f8c3 9094 	str.w	r9, [r3, #148]	; 0x94
		command_dataw[0] = 0x60 + (ADC_CH1 << 2);
    79aa:	9a05      	ldr	r2, [sp, #20]
    79ac:	2364      	movs	r3, #100	; 0x64
    79ae:	7013      	strb	r3, [r2, #0]
		bash_spi_transfer(command_dataw, command_datar, 2);
    79b0:	4b79      	ldr	r3, [pc, #484]	; (7b98 <main_loop+0x430>)
    79b2:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    79b4:	4b7c      	ldr	r3, [pc, #496]	; (7ba8 <main_loop+0x440>)
    79b6:	f8c3 9098 	str.w	r9, [r3, #152]	; 0x98
		if (((cardA_type == CARD_VIBRATEK) || (cardA_type == CARD_VIBRAPOINT)) && (card_sampleindex < SAMPLE_BUFFER_SIZE)) {
    79ba:	f898 3000 	ldrb.w	r3, [r8]
    79be:	2b01      	cmp	r3, #1
    79c0:	d001      	beq.n	79c6 <main_loop+0x25e>
    79c2:	2b04      	cmp	r3, #4
    79c4:	d12b      	bne.n	7a1e <main_loop+0x2b6>
    79c6:	4a75      	ldr	r2, [pc, #468]	; (7b9c <main_loop+0x434>)
    79c8:	6812      	ldr	r2, [r2, #0]
    79ca:	f5b2 7f2b 	cmp.w	r2, #684	; 0x2ac
			cardAch1_samplebuffer[card_sampleindex] = command_datar[1];
    79ce:	bf3f      	itttt	cc
    79d0:	4973      	ldrcc	r1, [pc, #460]	; (7ba0 <main_loop+0x438>)
    79d2:	7848      	ldrbcc	r0, [r1, #1]
    79d4:	4975      	ldrcc	r1, [pc, #468]	; (7bac <main_loop+0x444>)
    79d6:	5488      	strbcc	r0, [r1, r2]
		if (((cardA_type == CARD_VIBRATEK) || (cardA_type == CARD_VIBRAPOINT)) && (!card_sampleindex)) {
    79d8:	2b01      	cmp	r3, #1
    79da:	d001      	beq.n	79e0 <main_loop+0x278>
    79dc:	2b04      	cmp	r3, #4
    79de:	d11e      	bne.n	7a1e <main_loop+0x2b6>
    79e0:	b9ea      	cbnz	r2, 7a1e <main_loop+0x2b6>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    79e2:	f04f 0920 	mov.w	r9, #32
    79e6:	f8c5 9094 	str.w	r9, [r5, #148]	; 0x94
			command_dataw[0] = 0x60 + (ADC_CH2 << 2);
    79ea:	9a05      	ldr	r2, [sp, #20]
			cardAch2_samplebuffer = command_datar[1];
    79ec:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 7ba0 <main_loop+0x438>
			command_dataw[0] = 0x60 + (ADC_CH2 << 2);
    79f0:	2368      	movs	r3, #104	; 0x68
    79f2:	7013      	strb	r3, [r2, #0]
			bash_spi_transfer(command_dataw, command_datar, 2);
    79f4:	4b68      	ldr	r3, [pc, #416]	; (7b98 <main_loop+0x430>)
    79f6:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    79f8:	f8c5 9098 	str.w	r9, [r5, #152]	; 0x98
			cardAch2_samplebuffer = command_datar[1];
    79fc:	4b6c      	ldr	r3, [pc, #432]	; (7bb0 <main_loop+0x448>)
    79fe:	f89a 2001 	ldrb.w	r2, [sl, #1]
    7a02:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7a04:	f8c5 9094 	str.w	r9, [r5, #148]	; 0x94
			command_dataw[0] = 0x60 + (ADC_CH3 << 2);
    7a08:	9a05      	ldr	r2, [sp, #20]
    7a0a:	236c      	movs	r3, #108	; 0x6c
    7a0c:	7013      	strb	r3, [r2, #0]
			bash_spi_transfer(command_dataw, command_datar, 2);
    7a0e:	4b62      	ldr	r3, [pc, #392]	; (7b98 <main_loop+0x430>)
    7a10:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7a12:	f8c5 9098 	str.w	r9, [r5, #152]	; 0x98
			cardAch3_samplebuffer = command_datar[1];
    7a16:	4b67      	ldr	r3, [pc, #412]	; (7bb4 <main_loop+0x44c>)
    7a18:	f89a 2001 	ldrb.w	r2, [sl, #1]
    7a1c:	701a      	strb	r2, [r3, #0]
		} else if (cardA_type == CARD_MINI_IO)  {
    7a1e:	f898 3000 	ldrb.w	r3, [r8]
    7a22:	2b02      	cmp	r3, #2
    7a24:	d130      	bne.n	7a88 <main_loop+0x320>
			if (miniA_chan) {
    7a26:	4b64      	ldr	r3, [pc, #400]	; (7bb8 <main_loop+0x450>)
    7a28:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 7c08 <main_loop+0x4a0>
    7a2c:	781b      	ldrb	r3, [r3, #0]
    7a2e:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 7c0c <main_loop+0x4a4>
    7a32:	2b00      	cmp	r3, #0
    7a34:	f000 81bd 	beq.w	7db2 <main_loop+0x64a>
				if ((err = I2C_readMONITOREDINPUT(PC27_CARDA_I2C_SDA,  PC28_CARDA_I2C_CLK, &miniIO_A1_adcH,  &miniIO_A1_adcL))) {
    7a38:	215c      	movs	r1, #92	; 0x5c
    7a3a:	4b60      	ldr	r3, [pc, #384]	; (7bbc <main_loop+0x454>)
    7a3c:	4a60      	ldr	r2, [pc, #384]	; (7bc0 <main_loop+0x458>)
    7a3e:	205b      	movs	r0, #91	; 0x5b
    7a40:	47d0      	blx	sl
    7a42:	4601      	mov	r1, r0
    7a44:	b110      	cbz	r0, 7a4c <main_loop+0x2e4>
					xprintf("Could NOT read from the Mini-IO ADC on CARDA:I2C [%i]\r\n", err);
    7a46:	485f      	ldr	r0, [pc, #380]	; (7bc4 <main_loop+0x45c>)
    7a48:	4b47      	ldr	r3, [pc, #284]	; (7b68 <main_loop+0x400>)
    7a4a:	4798      	blx	r3
				if ((err = I2C_configMONITOREDINPUTS(PC27_CARDA_I2C_SDA,  PC28_CARDA_I2C_CLK, 0))) {
    7a4c:	2200      	movs	r2, #0
				if ((err = I2C_configMONITOREDINPUTS(PC27_CARDA_I2C_SDA,  PC28_CARDA_I2C_CLK, 1))) {
    7a4e:	215c      	movs	r1, #92	; 0x5c
    7a50:	205b      	movs	r0, #91	; 0x5b
    7a52:	47c8      	blx	r9
    7a54:	4601      	mov	r1, r0
    7a56:	b110      	cbz	r0, 7a5e <main_loop+0x2f6>
					xprintf("Could NOT write to the Mini-IO ADC controller on CARDA:I2C [%i]\r\n", err);
    7a58:	485b      	ldr	r0, [pc, #364]	; (7bc8 <main_loop+0x460>)
    7a5a:	4b43      	ldr	r3, [pc, #268]	; (7b68 <main_loop+0x400>)
    7a5c:	4798      	blx	r3
			if ((err = I2C_setEXPANDER(PC27_CARDA_I2C_SDA,  PC28_CARDA_I2C_CLK, miniIO_A_relay))) {
    7a5e:	4b5b      	ldr	r3, [pc, #364]	; (7bcc <main_loop+0x464>)
    7a60:	215c      	movs	r1, #92	; 0x5c
    7a62:	781a      	ldrb	r2, [r3, #0]
    7a64:	4b5a      	ldr	r3, [pc, #360]	; (7bd0 <main_loop+0x468>)
    7a66:	205b      	movs	r0, #91	; 0x5b
    7a68:	4798      	blx	r3
    7a6a:	4601      	mov	r1, r0
    7a6c:	b110      	cbz	r0, 7a74 <main_loop+0x30c>
				xprintf("Could NOT write to the Mini-IO EXPANDER on CARDA:I2C [%i]\r\n", err);
    7a6e:	4859      	ldr	r0, [pc, #356]	; (7bd4 <main_loop+0x46c>)
    7a70:	4b3d      	ldr	r3, [pc, #244]	; (7b68 <main_loop+0x400>)
    7a72:	4798      	blx	r3
			if ((err = I2C_readEXPANDER(PC27_CARDA_I2C_SDA,  PC28_CARDA_I2C_CLK, &miniIO_A_inputs))) {
    7a74:	215c      	movs	r1, #92	; 0x5c
    7a76:	4a58      	ldr	r2, [pc, #352]	; (7bd8 <main_loop+0x470>)
    7a78:	4b58      	ldr	r3, [pc, #352]	; (7bdc <main_loop+0x474>)
    7a7a:	205b      	movs	r0, #91	; 0x5b
    7a7c:	4798      	blx	r3
    7a7e:	4601      	mov	r1, r0
    7a80:	b110      	cbz	r0, 7a88 <main_loop+0x320>
				xprintf("Could NOT read from the Mini-IO EXPANDER on CARDA:I2C [%i]\r\n", err);
    7a82:	4857      	ldr	r0, [pc, #348]	; (7be0 <main_loop+0x478>)
    7a84:	4b38      	ldr	r3, [pc, #224]	; (7b68 <main_loop+0x400>)
    7a86:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7a88:	f04f 0940 	mov.w	r9, #64	; 0x40
    7a8c:	f8c5 9094 	str.w	r9, [r5, #148]	; 0x94
		command_dataw[0] = 0x60 + (ADC_CH0 << 2);
    7a90:	9a05      	ldr	r2, [sp, #20]
    7a92:	2360      	movs	r3, #96	; 0x60
    7a94:	7013      	strb	r3, [r2, #0]
		bash_spi_transfer(command_dataw, command_datar, 2);
    7a96:	4b40      	ldr	r3, [pc, #256]	; (7b98 <main_loop+0x430>)
    7a98:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7a9a:	f8c5 9098 	str.w	r9, [r5, #152]	; 0x98
		if (((cardB_type == CARD_VIBRATEK) || (cardB_type == CARD_VIBRAPOINT)) && (card_sampleindex < SAMPLE_BUFFER_SIZE)) {
    7a9e:	783b      	ldrb	r3, [r7, #0]
    7aa0:	2b01      	cmp	r3, #1
    7aa2:	d001      	beq.n	7aa8 <main_loop+0x340>
    7aa4:	2b04      	cmp	r3, #4
    7aa6:	d108      	bne.n	7aba <main_loop+0x352>
    7aa8:	4b3c      	ldr	r3, [pc, #240]	; (7b9c <main_loop+0x434>)
    7aaa:	681b      	ldr	r3, [r3, #0]
    7aac:	f5b3 7f2b 	cmp.w	r3, #684	; 0x2ac
			cardBch0_samplebuffer[card_sampleindex] = command_datar[1];
    7ab0:	bf3f      	itttt	cc
    7ab2:	4a3b      	ldrcc	r2, [pc, #236]	; (7ba0 <main_loop+0x438>)
    7ab4:	7851      	ldrbcc	r1, [r2, #1]
    7ab6:	4a4b      	ldrcc	r2, [pc, #300]	; (7be4 <main_loop+0x47c>)
    7ab8:	54d1      	strbcc	r1, [r2, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7aba:	4b3b      	ldr	r3, [pc, #236]	; (7ba8 <main_loop+0x440>)
    7abc:	f04f 0940 	mov.w	r9, #64	; 0x40
    7ac0:	f8c3 9094 	str.w	r9, [r3, #148]	; 0x94
		command_dataw[0] = 0x60 + (ADC_CH1 << 2);
    7ac4:	9a05      	ldr	r2, [sp, #20]
    7ac6:	2364      	movs	r3, #100	; 0x64
    7ac8:	7013      	strb	r3, [r2, #0]
		bash_spi_transfer(command_dataw, command_datar, 2);
    7aca:	4b33      	ldr	r3, [pc, #204]	; (7b98 <main_loop+0x430>)
    7acc:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7ace:	4b36      	ldr	r3, [pc, #216]	; (7ba8 <main_loop+0x440>)
    7ad0:	f8c3 9098 	str.w	r9, [r3, #152]	; 0x98
		if (((cardB_type == CARD_VIBRATEK) || (cardB_type == CARD_VIBRAPOINT)) && (card_sampleindex < SAMPLE_BUFFER_SIZE)) {
    7ad4:	783b      	ldrb	r3, [r7, #0]
    7ad6:	2b01      	cmp	r3, #1
    7ad8:	d001      	beq.n	7ade <main_loop+0x376>
    7ada:	2b04      	cmp	r3, #4
    7adc:	d12b      	bne.n	7b36 <main_loop+0x3ce>
    7ade:	4a2f      	ldr	r2, [pc, #188]	; (7b9c <main_loop+0x434>)
    7ae0:	6812      	ldr	r2, [r2, #0]
    7ae2:	f5b2 7f2b 	cmp.w	r2, #684	; 0x2ac
			cardBch1_samplebuffer[card_sampleindex] = command_datar[1];
    7ae6:	bf3f      	itttt	cc
    7ae8:	492d      	ldrcc	r1, [pc, #180]	; (7ba0 <main_loop+0x438>)
    7aea:	7848      	ldrbcc	r0, [r1, #1]
    7aec:	493e      	ldrcc	r1, [pc, #248]	; (7be8 <main_loop+0x480>)
    7aee:	5488      	strbcc	r0, [r1, r2]
		if (((cardB_type == CARD_VIBRATEK) || (cardB_type == CARD_VIBRAPOINT)) && (!card_sampleindex)) {
    7af0:	2b01      	cmp	r3, #1
    7af2:	d001      	beq.n	7af8 <main_loop+0x390>
    7af4:	2b04      	cmp	r3, #4
    7af6:	d11e      	bne.n	7b36 <main_loop+0x3ce>
    7af8:	b9ea      	cbnz	r2, 7b36 <main_loop+0x3ce>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7afa:	f04f 0940 	mov.w	r9, #64	; 0x40
    7afe:	f8c5 9094 	str.w	r9, [r5, #148]	; 0x94
			command_dataw[0] = 0x60 + (ADC_CH2 << 2);
    7b02:	9a05      	ldr	r2, [sp, #20]
			cardBch2_samplebuffer = command_datar[1];
    7b04:	f8df a098 	ldr.w	sl, [pc, #152]	; 7ba0 <main_loop+0x438>
			command_dataw[0] = 0x60 + (ADC_CH2 << 2);
    7b08:	2368      	movs	r3, #104	; 0x68
    7b0a:	7013      	strb	r3, [r2, #0]
			bash_spi_transfer(command_dataw, command_datar, 2);
    7b0c:	4b22      	ldr	r3, [pc, #136]	; (7b98 <main_loop+0x430>)
    7b0e:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7b10:	f8c5 9098 	str.w	r9, [r5, #152]	; 0x98
			cardBch2_samplebuffer = command_datar[1];
    7b14:	4b35      	ldr	r3, [pc, #212]	; (7bec <main_loop+0x484>)
    7b16:	f89a 2001 	ldrb.w	r2, [sl, #1]
    7b1a:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7b1c:	f8c5 9094 	str.w	r9, [r5, #148]	; 0x94
			command_dataw[0] = 0x60 + (ADC_CH3 << 2);
    7b20:	9a05      	ldr	r2, [sp, #20]
    7b22:	236c      	movs	r3, #108	; 0x6c
    7b24:	7013      	strb	r3, [r2, #0]
			bash_spi_transfer(command_dataw, command_datar, 2);
    7b26:	4b1c      	ldr	r3, [pc, #112]	; (7b98 <main_loop+0x430>)
    7b28:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7b2a:	f8c5 9098 	str.w	r9, [r5, #152]	; 0x98
			cardBch3_samplebuffer = command_datar[1];
    7b2e:	4b30      	ldr	r3, [pc, #192]	; (7bf0 <main_loop+0x488>)
    7b30:	f89a 2001 	ldrb.w	r2, [sl, #1]
    7b34:	701a      	strb	r2, [r3, #0]
		} else if (cardB_type == CARD_MINI_IO)  {
    7b36:	783b      	ldrb	r3, [r7, #0]
    7b38:	2b02      	cmp	r3, #2
    7b3a:	f040 808b 	bne.w	7c54 <main_loop+0x4ec>
			if (miniB_chan) {
    7b3e:	4b2d      	ldr	r3, [pc, #180]	; (7bf4 <main_loop+0x48c>)
    7b40:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 7c08 <main_loop+0x4a0>
    7b44:	781b      	ldrb	r3, [r3, #0]
    7b46:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 7c0c <main_loop+0x4a4>
    7b4a:	2b00      	cmp	r3, #0
    7b4c:	f000 813d 	beq.w	7dca <main_loop+0x662>
				if ((err = I2C_readMONITOREDINPUT(PB24_CARDB_I2C_SDA,  PB25_CARDB_I2C_CLK, &miniIO_B1_adcH,  &miniIO_B1_adcL))) {
    7b50:	2139      	movs	r1, #57	; 0x39
    7b52:	4b29      	ldr	r3, [pc, #164]	; (7bf8 <main_loop+0x490>)
    7b54:	4a29      	ldr	r2, [pc, #164]	; (7bfc <main_loop+0x494>)
    7b56:	2038      	movs	r0, #56	; 0x38
    7b58:	47d0      	blx	sl
    7b5a:	4601      	mov	r1, r0
    7b5c:	e058      	b.n	7c10 <main_loop+0x4a8>
    7b5e:	bf00      	nop
    7b60:	00009fbd 	.word	0x00009fbd
    7b64:	0000d45a 	.word	0x0000d45a
    7b68:	00000395 	.word	0x00000395
    7b6c:	0000acc1 	.word	0x0000acc1
    7b70:	2000853c 	.word	0x2000853c
    7b74:	20007852 	.word	0x20007852
    7b78:	20007fa3 	.word	0x20007fa3
    7b7c:	20008540 	.word	0x20008540
    7b80:	0000d4ae 	.word	0x0000d4ae
    7b84:	20007f14 	.word	0x20007f14
    7b88:	00005311 	.word	0x00005311
    7b8c:	0000bca9 	.word	0x0000bca9
    7b90:	0000d4db 	.word	0x0000d4db
    7b94:	0000be4f 	.word	0x0000be4f
    7b98:	00007081 	.word	0x00007081
    7b9c:	20008528 	.word	0x20008528
    7ba0:	2000757c 	.word	0x2000757c
    7ba4:	20008275 	.word	0x20008275
    7ba8:	41008000 	.word	0x41008000
    7bac:	20007c58 	.word	0x20007c58
    7bb0:	20007840 	.word	0x20007840
    7bb4:	20007572 	.word	0x20007572
    7bb8:	20007576 	.word	0x20007576
    7bbc:	20007f9a 	.word	0x20007f9a
    7bc0:	2000825b 	.word	0x2000825b
    7bc4:	0000d508 	.word	0x0000d508
    7bc8:	0000d540 	.word	0x0000d540
    7bcc:	20007f9c 	.word	0x20007f9c
    7bd0:	00004e25 	.word	0x00004e25
    7bd4:	0000d582 	.word	0x0000d582
    7bd8:	20007574 	.word	0x20007574
    7bdc:	00005059 	.word	0x00005059
    7be0:	0000d5be 	.word	0x0000d5be
    7be4:	20007fa4 	.word	0x20007fa4
    7be8:	20007590 	.word	0x20007590
    7bec:	20007577 	.word	0x20007577
    7bf0:	20007578 	.word	0x20007578
    7bf4:	2000825a 	.word	0x2000825a
    7bf8:	2000853f 	.word	0x2000853f
    7bfc:	20007584 	.word	0x20007584
    7c00:	2000853d 	.word	0x2000853d
    7c04:	20007c57 	.word	0x20007c57
    7c08:	000046c5 	.word	0x000046c5
    7c0c:	0000450d 	.word	0x0000450d
    7c10:	b110      	cbz	r0, 7c18 <main_loop+0x4b0>
					xprintf("Could NOT read from the Mini-IO ADC on CARDB:I2C [%i]\r\n", err);
    7c12:	48a5      	ldr	r0, [pc, #660]	; (7ea8 <main_loop+0x740>)
    7c14:	4ba5      	ldr	r3, [pc, #660]	; (7eac <main_loop+0x744>)
    7c16:	4798      	blx	r3
				if ((err = I2C_configMONITOREDINPUTS(PB24_CARDB_I2C_SDA,  PB25_CARDB_I2C_CLK, 0))) {
    7c18:	2200      	movs	r2, #0
				if ((err = I2C_configMONITOREDINPUTS(PB24_CARDB_I2C_SDA,  PB25_CARDB_I2C_CLK, 1))) {
    7c1a:	2139      	movs	r1, #57	; 0x39
    7c1c:	2038      	movs	r0, #56	; 0x38
    7c1e:	47c8      	blx	r9
    7c20:	4601      	mov	r1, r0
    7c22:	b110      	cbz	r0, 7c2a <main_loop+0x4c2>
					xprintf("Could NOT write to the Mini-IO ADC controller on CARDB:I2C [%i]\r\n", err);
    7c24:	48a2      	ldr	r0, [pc, #648]	; (7eb0 <main_loop+0x748>)
    7c26:	4ba1      	ldr	r3, [pc, #644]	; (7eac <main_loop+0x744>)
    7c28:	4798      	blx	r3
			if ((err = I2C_setEXPANDER(PB24_CARDB_I2C_SDA,  PB25_CARDB_I2C_CLK, miniIO_B_relay))) {
    7c2a:	4ba2      	ldr	r3, [pc, #648]	; (7eb4 <main_loop+0x74c>)
    7c2c:	2139      	movs	r1, #57	; 0x39
    7c2e:	781a      	ldrb	r2, [r3, #0]
    7c30:	4ba1      	ldr	r3, [pc, #644]	; (7eb8 <main_loop+0x750>)
    7c32:	2038      	movs	r0, #56	; 0x38
    7c34:	4798      	blx	r3
    7c36:	4601      	mov	r1, r0
    7c38:	b110      	cbz	r0, 7c40 <main_loop+0x4d8>
				xprintf("Could NOT write to the Mini-IO EXPANDER on CARDB:I2C [%i]\r\n", err);
    7c3a:	48a0      	ldr	r0, [pc, #640]	; (7ebc <main_loop+0x754>)
    7c3c:	4b9b      	ldr	r3, [pc, #620]	; (7eac <main_loop+0x744>)
    7c3e:	4798      	blx	r3
			if ((err = I2C_readEXPANDER(PB24_CARDB_I2C_SDA,  PB25_CARDB_I2C_CLK, &miniIO_B_inputs))) {
    7c40:	2139      	movs	r1, #57	; 0x39
    7c42:	4a9f      	ldr	r2, [pc, #636]	; (7ec0 <main_loop+0x758>)
    7c44:	4b9f      	ldr	r3, [pc, #636]	; (7ec4 <main_loop+0x75c>)
    7c46:	2038      	movs	r0, #56	; 0x38
    7c48:	4798      	blx	r3
    7c4a:	4601      	mov	r1, r0
    7c4c:	b110      	cbz	r0, 7c54 <main_loop+0x4ec>
				xprintf("Could NOT read from the Mini-IO EXPANDER on CARDB:I2C [%i]\r\n", err);
    7c4e:	489e      	ldr	r0, [pc, #632]	; (7ec8 <main_loop+0x760>)
    7c50:	4b96      	ldr	r3, [pc, #600]	; (7eac <main_loop+0x744>)
    7c52:	4798      	blx	r3
		if ((cardA_type == CARD_VIBRATEK) || (cardB_type == CARD_VIBRATEK) || (cardA_type == CARD_VIBRAPOINT) || (cardB_type == CARD_VIBRAPOINT)) {
    7c54:	f898 2000 	ldrb.w	r2, [r8]
    7c58:	2a01      	cmp	r2, #1
    7c5a:	d006      	beq.n	7c6a <main_loop+0x502>
    7c5c:	783b      	ldrb	r3, [r7, #0]
    7c5e:	2b01      	cmp	r3, #1
    7c60:	d003      	beq.n	7c6a <main_loop+0x502>
    7c62:	2a04      	cmp	r2, #4
    7c64:	d001      	beq.n	7c6a <main_loop+0x502>
    7c66:	2b04      	cmp	r3, #4
    7c68:	d106      	bne.n	7c78 <main_loop+0x510>
			card_sampleindex++;
    7c6a:	4a98      	ldr	r2, [pc, #608]	; (7ecc <main_loop+0x764>)
    7c6c:	6813      	ldr	r3, [r2, #0]
    7c6e:	3301      	adds	r3, #1
			if ((card_sampleindex == SAMPLE_BUFFER_SIZE) && (readenvironment == 1)) {
    7c70:	f5b3 7f2b 	cmp.w	r3, #684	; 0x2ac
			card_sampleindex++;
    7c74:	6013      	str	r3, [r2, #0]
			if ((card_sampleindex == SAMPLE_BUFFER_SIZE) && (readenvironment == 1)) {
    7c76:	d108      	bne.n	7c8a <main_loop+0x522>
    7c78:	4b95      	ldr	r3, [pc, #596]	; (7ed0 <main_loop+0x768>)
    7c7a:	781b      	ldrb	r3, [r3, #0]
    7c7c:	2b01      	cmp	r3, #1
    7c7e:	d104      	bne.n	7c8a <main_loop+0x522>
				readenvironment = 2;
    7c80:	4b93      	ldr	r3, [pc, #588]	; (7ed0 <main_loop+0x768>)
    7c82:	2202      	movs	r2, #2
    7c84:	701a      	strb	r2, [r3, #0]
				read_boardvalues();
    7c86:	4b93      	ldr	r3, [pc, #588]	; (7ed4 <main_loop+0x76c>)
    7c88:	4798      	blx	r3
		if (ring_timer) {
    7c8a:	f8df 92e4 	ldr.w	r9, [pc, #740]	; 7f70 <main_loop+0x808>
    7c8e:	f899 3000 	ldrb.w	r3, [r9]
    7c92:	b1c3      	cbz	r3, 7cc6 <main_loop+0x55e>
			if (ring_check(bpdu_arrived, &stormstate, &ring)) {
    7c94:	4a90      	ldr	r2, [pc, #576]	; (7ed8 <main_loop+0x770>)
    7c96:	4991      	ldr	r1, [pc, #580]	; (7edc <main_loop+0x774>)
    7c98:	4b91      	ldr	r3, [pc, #580]	; (7ee0 <main_loop+0x778>)
    7c9a:	4658      	mov	r0, fp
    7c9c:	4798      	blx	r3
    7c9e:	b110      	cbz	r0, 7ca6 <main_loop+0x53e>
				send_relearn_udp = 1;
    7ca0:	4b90      	ldr	r3, [pc, #576]	; (7ee4 <main_loop+0x77c>)
    7ca2:	2201      	movs	r2, #1
    7ca4:	701a      	strb	r2, [r3, #0]
			ring_timer = 0;
    7ca6:	2300      	movs	r3, #0
    7ca8:	f889 3000 	strb.w	r3, [r9]
			if (((CONFIG *)&settings_buffer)->loop_basestation) {
    7cac:	4b8e      	ldr	r3, [pc, #568]	; (7ee8 <main_loop+0x780>)
    7cae:	4a8f      	ldr	r2, [pc, #572]	; (7eec <main_loop+0x784>)
    7cb0:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
    7cb4:	2b00      	cmp	r3, #0
    7cb6:	f000 8094 	beq.w	7de2 <main_loop+0x67a>
				ring_broken = (ring) ? RING_BROKEN : RING_CLOSED;
    7cba:	4b87      	ldr	r3, [pc, #540]	; (7ed8 <main_loop+0x770>)
    7cbc:	781b      	ldrb	r3, [r3, #0]
    7cbe:	3300      	adds	r3, #0
    7cc0:	bf18      	it	ne
    7cc2:	2301      	movne	r3, #1
				ring_broken = RING_NOTCONFIGURED;
    7cc4:	7013      	strb	r3, [r2, #0]
		key_check++;
    7cc6:	3401      	adds	r4, #1
		if (key_check < 3000) {
    7cc8:	f640 33b7 	movw	r3, #2999	; 0xbb7
    7ccc:	429c      	cmp	r4, r3
    7cce:	f77f ad57 	ble.w	7780 <main_loop+0x18>
		if (io_read((struct io_descriptor *const)io, (uint8_t *const)&ch, 1)) {
    7cd2:	4b87      	ldr	r3, [pc, #540]	; (7ef0 <main_loop+0x788>)
    7cd4:	2201      	movs	r2, #1
    7cd6:	6818      	ldr	r0, [r3, #0]
    7cd8:	4b86      	ldr	r3, [pc, #536]	; (7ef4 <main_loop+0x78c>)
    7cda:	f10d 0127 	add.w	r1, sp, #39	; 0x27
    7cde:	4798      	blx	r3
    7ce0:	2800      	cmp	r0, #0
    7ce2:	f43f adcc 	beq.w	787e <main_loop+0x116>
			key = (unsigned char)ch;
    7ce6:	f89d 9027 	ldrb.w	r9, [sp, #39]	; 0x27
    7cea:	4c70      	ldr	r4, [pc, #448]	; (7eac <main_loop+0x744>)
			switch (key) {
    7cec:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
    7cf0:	f000 80b6 	beq.w	7e60 <main_loop+0x6f8>
    7cf4:	f200 8096 	bhi.w	7e24 <main_loop+0x6bc>
    7cf8:	f1b9 0f4c 	cmp.w	r9, #76	; 0x4c
    7cfc:	f000 818b 	beq.w	8016 <main_loop+0x8ae>
    7d00:	d871      	bhi.n	7de6 <main_loop+0x67e>
    7d02:	f1b9 0f44 	cmp.w	r9, #68	; 0x44
    7d06:	f000 813d 	beq.w	7f84 <main_loop+0x81c>
    7d0a:	f1b9 0f49 	cmp.w	r9, #73	; 0x49
    7d0e:	f000 82fb 	beq.w	8308 <main_loop+0xba0>
    7d12:	f1b9 0f42 	cmp.w	r9, #66	; 0x42
    7d16:	d171      	bne.n	7dfc <main_loop+0x694>
				xprintf("\r\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n");
    7d18:	4877      	ldr	r0, [pc, #476]	; (7ef8 <main_loop+0x790>)
    7d1a:	47a0      	blx	r4
				xprintf("<CLI DEBUG> [BASESTATION] command\r\n");
    7d1c:	4877      	ldr	r0, [pc, #476]	; (7efc <main_loop+0x794>)
    7d1e:	47a0      	blx	r4
				((CONFIG *)&settings_buffer)->loop_basestation = 1;
    7d20:	4871      	ldr	r0, [pc, #452]	; (7ee8 <main_loop+0x780>)
    7d22:	2201      	movs	r2, #1
    7d24:	f880 202b 	strb.w	r2, [r0, #43]	; 0x2b
				if (EEprom_settings(settings_buffer, SETTING_STRUCTURE_SIZE, 1) != ERR_NONE) {
    7d28:	2180      	movs	r1, #128	; 0x80
    7d2a:	e160      	b.n	7fee <main_loop+0x886>
					bpdu_arrived = 1;
    7d2c:	f04f 0b01 	mov.w	fp, #1
    7d30:	e5cf      	b.n	78d2 <main_loop+0x16a>
					if (uip_len > 0) {
    7d32:	f8df 9240 	ldr.w	r9, [pc, #576]	; 7f74 <main_loop+0x80c>
					uip_periodic(loop);
    7d36:	f8df a240 	ldr.w	sl, [pc, #576]	; 7f78 <main_loop+0x810>
				ip_periodic_check = 0;
    7d3a:	2600      	movs	r6, #0
    7d3c:	701e      	strb	r6, [r3, #0]
    7d3e:	46c8      	mov	r8, r9
					uip_periodic(loop);
    7d40:	4b6f      	ldr	r3, [pc, #444]	; (7f00 <main_loop+0x798>)
    7d42:	4f70      	ldr	r7, [pc, #448]	; (7f04 <main_loop+0x79c>)
    7d44:	4433      	add	r3, r6
    7d46:	2002      	movs	r0, #2
    7d48:	f8ca 3000 	str.w	r3, [sl]
    7d4c:	47b8      	blx	r7
					if (uip_len > 0) {
    7d4e:	f8b9 3000 	ldrh.w	r3, [r9]
    7d52:	b13b      	cbz	r3, 7d64 <main_loop+0x5fc>
						uip_arp_out();
    7d54:	4b6c      	ldr	r3, [pc, #432]	; (7f08 <main_loop+0x7a0>)
    7d56:	4798      	blx	r3
						mac_async_write(&ETHERNET_MAC_0, (uint8_t *)&uip_buf[0], uip_len);
    7d58:	f8b9 2000 	ldrh.w	r2, [r9]
    7d5c:	496b      	ldr	r1, [pc, #428]	; (7f0c <main_loop+0x7a4>)
    7d5e:	486c      	ldr	r0, [pc, #432]	; (7f10 <main_loop+0x7a8>)
    7d60:	4b6c      	ldr	r3, [pc, #432]	; (7f14 <main_loop+0x7ac>)
    7d62:	4798      	blx	r3
    7d64:	3674      	adds	r6, #116	; 0x74
				for (loop = 0; loop < UIP_UDP_CONNS; loop++) {
    7d66:	f5b6 6f91 	cmp.w	r6, #1160	; 0x488
    7d6a:	d1e9      	bne.n	7d40 <main_loop+0x5d8>
					uip_udp_periodic(loop);
    7d6c:	f8df 920c 	ldr.w	r9, [pc, #524]	; 7f7c <main_loop+0x814>
    7d70:	f8df a20c 	ldr.w	sl, [pc, #524]	; 7f80 <main_loop+0x818>
    7d74:	2600      	movs	r6, #0
    7d76:	eb06 030a 	add.w	r3, r6, sl
    7d7a:	2005      	movs	r0, #5
    7d7c:	f8c9 3000 	str.w	r3, [r9]
    7d80:	47b8      	blx	r7
					if (uip_len > 0) {
    7d82:	f8b8 3000 	ldrh.w	r3, [r8]
    7d86:	b13b      	cbz	r3, 7d98 <main_loop+0x630>
						uip_arp_out();
    7d88:	4b5f      	ldr	r3, [pc, #380]	; (7f08 <main_loop+0x7a0>)
    7d8a:	4798      	blx	r3
						mac_async_write(&ETHERNET_MAC_0, (uint8_t *)&uip_buf[0], uip_len);
    7d8c:	f8b8 2000 	ldrh.w	r2, [r8]
    7d90:	495e      	ldr	r1, [pc, #376]	; (7f0c <main_loop+0x7a4>)
    7d92:	485f      	ldr	r0, [pc, #380]	; (7f10 <main_loop+0x7a8>)
    7d94:	4b5f      	ldr	r3, [pc, #380]	; (7f14 <main_loop+0x7ac>)
    7d96:	4798      	blx	r3
    7d98:	3664      	adds	r6, #100	; 0x64
				for (loop = 0; loop < UIP_UDP_CONNS; loop++) {
    7d9a:	f5b6 7f7a 	cmp.w	r6, #1000	; 0x3e8
    7d9e:	d1ea      	bne.n	7d76 <main_loop+0x60e>
    7da0:	e5ad      	b.n	78fe <main_loop+0x196>
				arp_check = 0;
    7da2:	701e      	strb	r6, [r3, #0]
				uip_arp_timer();
    7da4:	4b5c      	ldr	r3, [pc, #368]	; (7f18 <main_loop+0x7b0>)
    7da6:	4798      	blx	r3
    7da8:	e5b0      	b.n	790c <main_loop+0x1a4>
			eth_check++;
    7daa:	3601      	adds	r6, #1
		bpdu_arrived = 0;
    7dac:	f04f 0b00 	mov.w	fp, #0
    7db0:	e5ac      	b.n	790c <main_loop+0x1a4>
				if ((err = I2C_readMONITOREDINPUT(PC27_CARDA_I2C_SDA,  PC28_CARDA_I2C_CLK, &miniIO_A0_adcH,  &miniIO_A0_adcL))) {
    7db2:	215c      	movs	r1, #92	; 0x5c
    7db4:	4b59      	ldr	r3, [pc, #356]	; (7f1c <main_loop+0x7b4>)
    7db6:	4a5a      	ldr	r2, [pc, #360]	; (7f20 <main_loop+0x7b8>)
    7db8:	205b      	movs	r0, #91	; 0x5b
    7dba:	47d0      	blx	sl
    7dbc:	4601      	mov	r1, r0
    7dbe:	b110      	cbz	r0, 7dc6 <main_loop+0x65e>
					xprintf("Could NOT read from the Mini-IO ADC on CARDA:I2C [%i]\r\n", err);
    7dc0:	4858      	ldr	r0, [pc, #352]	; (7f24 <main_loop+0x7bc>)
    7dc2:	4b3a      	ldr	r3, [pc, #232]	; (7eac <main_loop+0x744>)
    7dc4:	4798      	blx	r3
				if ((err = I2C_configMONITOREDINPUTS(PC27_CARDA_I2C_SDA,  PC28_CARDA_I2C_CLK, 1))) {
    7dc6:	2201      	movs	r2, #1
    7dc8:	e641      	b.n	7a4e <main_loop+0x2e6>
				if ((err = I2C_readMONITOREDINPUT(PB24_CARDB_I2C_SDA,  PB25_CARDB_I2C_CLK, &miniIO_B0_adcH,  &miniIO_B0_adcL))) {
    7dca:	2139      	movs	r1, #57	; 0x39
    7dcc:	4b56      	ldr	r3, [pc, #344]	; (7f28 <main_loop+0x7c0>)
    7dce:	4a57      	ldr	r2, [pc, #348]	; (7f2c <main_loop+0x7c4>)
    7dd0:	2038      	movs	r0, #56	; 0x38
    7dd2:	47d0      	blx	sl
    7dd4:	4601      	mov	r1, r0
    7dd6:	b110      	cbz	r0, 7dde <main_loop+0x676>
					xprintf("Could NOT read from the Mini-IO ADC on CARDB:I2C [%i]\r\n", err);
    7dd8:	4833      	ldr	r0, [pc, #204]	; (7ea8 <main_loop+0x740>)
    7dda:	4b34      	ldr	r3, [pc, #208]	; (7eac <main_loop+0x744>)
    7ddc:	4798      	blx	r3
				if ((err = I2C_configMONITOREDINPUTS(PB24_CARDB_I2C_SDA,  PB25_CARDB_I2C_CLK, 1))) {
    7dde:	2201      	movs	r2, #1
    7de0:	e71b      	b.n	7c1a <main_loop+0x4b2>
				ring_broken = RING_NOTCONFIGURED;
    7de2:	2302      	movs	r3, #2
    7de4:	e76e      	b.n	7cc4 <main_loop+0x55c>
			switch (key) {
    7de6:	f1b9 0f52 	cmp.w	r9, #82	; 0x52
    7dea:	d053      	beq.n	7e94 <main_loop+0x72c>
    7dec:	f1b9 0f53 	cmp.w	r9, #83	; 0x53
    7df0:	f000 82ef 	beq.w	83d2 <main_loop+0xc6a>
    7df4:	f1b9 0f50 	cmp.w	r9, #80	; 0x50
    7df8:	f000 8103 	beq.w	8002 <main_loop+0x89a>
				xprintf("\r\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n");
    7dfc:	483e      	ldr	r0, [pc, #248]	; (7ef8 <main_loop+0x790>)
    7dfe:	47a0      	blx	r4
				xprintf("<CLI DEBUG> Unknown command\r\n\r\nHelp Screen:\r\n\r\n");
    7e00:	484b      	ldr	r0, [pc, #300]	; (7f30 <main_loop+0x7c8>)
    7e02:	47a0      	blx	r4
				xprintf("R         [REBOOT] command\r\n");
    7e04:	484b      	ldr	r0, [pc, #300]	; (7f34 <main_loop+0x7cc>)
    7e06:	47a0      	blx	r4
				xprintf("D         [CONFIGURATION DEFAULT] command\r\n");
    7e08:	484b      	ldr	r0, [pc, #300]	; (7f38 <main_loop+0x7d0>)
    7e0a:	47a0      	blx	r4
				xprintf("X         [ID RESET] command\r\n");
    7e0c:	484b      	ldr	r0, [pc, #300]	; (7f3c <main_loop+0x7d4>)
    7e0e:	47a0      	blx	r4
				xprintf("B         [BASESTATION] command\r\n");
    7e10:	484b      	ldr	r0, [pc, #300]	; (7f40 <main_loop+0x7d8>)
    7e12:	47a0      	blx	r4
				xprintf("P         [PASS THROUGH] command\r\n");
    7e14:	484b      	ldr	r0, [pc, #300]	; (7f44 <main_loop+0x7dc>)
    7e16:	47a0      	blx	r4
				xprintf("L         [LIVE BOARD PRINT] command\r\n");
    7e18:	484b      	ldr	r0, [pc, #300]	; (7f48 <main_loop+0x7e0>)
    7e1a:	47a0      	blx	r4
				xprintf("I         [IP SCHEME / NETWORK] command\r\n");
    7e1c:	484b      	ldr	r0, [pc, #300]	; (7f4c <main_loop+0x7e4>)
    7e1e:	47a0      	blx	r4
				xprintf("S         [SPEED MAINLOOP] command\r\n\r\n");
    7e20:	484b      	ldr	r0, [pc, #300]	; (7f50 <main_loop+0x7e8>)
    7e22:	e0e8      	b.n	7ff6 <main_loop+0x88e>
			switch (key) {
    7e24:	f1b9 0f6c 	cmp.w	r9, #108	; 0x6c
    7e28:	f000 80f5 	beq.w	8016 <main_loop+0x8ae>
    7e2c:	d80a      	bhi.n	7e44 <main_loop+0x6dc>
    7e2e:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
    7e32:	f000 80a7 	beq.w	7f84 <main_loop+0x81c>
    7e36:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
    7e3a:	f000 8265 	beq.w	8308 <main_loop+0xba0>
    7e3e:	f1b9 0f62 	cmp.w	r9, #98	; 0x62
    7e42:	e768      	b.n	7d16 <main_loop+0x5ae>
    7e44:	f1b9 0f72 	cmp.w	r9, #114	; 0x72
    7e48:	d024      	beq.n	7e94 <main_loop+0x72c>
    7e4a:	d802      	bhi.n	7e52 <main_loop+0x6ea>
    7e4c:	f1b9 0f70 	cmp.w	r9, #112	; 0x70
    7e50:	e7d2      	b.n	7df8 <main_loop+0x690>
    7e52:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
    7e56:	f000 82bc 	beq.w	83d2 <main_loop+0xc6a>
    7e5a:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
    7e5e:	d1cd      	bne.n	7dfc <main_loop+0x694>
				xprintf("\r\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n");
    7e60:	4825      	ldr	r0, [pc, #148]	; (7ef8 <main_loop+0x790>)
    7e62:	47a0      	blx	r4
				xprintf("<CLI DEBUG> [ID RESET] command\r\n", key);
    7e64:	4649      	mov	r1, r9
    7e66:	483b      	ldr	r0, [pc, #236]	; (7f54 <main_loop+0x7ec>)
    7e68:	47a0      	blx	r4
				((CONFIG *)&settings_buffer)->ID = 0x00000000;
    7e6a:	481f      	ldr	r0, [pc, #124]	; (7ee8 <main_loop+0x780>)
    7e6c:	2300      	movs	r3, #0
    7e6e:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
    7e72:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    7e76:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
    7e7a:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
				if (EEprom_settings(settings_buffer, SETTING_STRUCTURE_SIZE, 1) != ERR_NONE) {
    7e7e:	2201      	movs	r2, #1
    7e80:	2180      	movs	r1, #128	; 0x80
    7e82:	4b35      	ldr	r3, [pc, #212]	; (7f58 <main_loop+0x7f0>)
    7e84:	4798      	blx	r3
    7e86:	2800      	cmp	r0, #0
    7e88:	f000 80b9 	beq.w	7ffe <main_loop+0x896>
					xprintf("MultiSense [configuration ERROR WRITING]\r\n");
    7e8c:	4833      	ldr	r0, [pc, #204]	; (7f5c <main_loop+0x7f4>)
					xprintf("MultiSense [configuration WRITTEN]\r\n");
    7e8e:	47a0      	blx	r4
				xprintf("Rebooting...\r\n");
    7e90:	4833      	ldr	r0, [pc, #204]	; (7f60 <main_loop+0x7f8>)
    7e92:	e004      	b.n	7e9e <main_loop+0x736>
				xprintf("\r\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n");
    7e94:	4818      	ldr	r0, [pc, #96]	; (7ef8 <main_loop+0x790>)
    7e96:	47a0      	blx	r4
				xprintf("<CLI DEBUG> [REBOOT] command\r\n");
    7e98:	4832      	ldr	r0, [pc, #200]	; (7f64 <main_loop+0x7fc>)
    7e9a:	47a0      	blx	r4
				xprintf(". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n\r\n");
    7e9c:	4832      	ldr	r0, [pc, #200]	; (7f68 <main_loop+0x800>)
				xprintf("Rebooting...\r\n");
    7e9e:	47a0      	blx	r4
				_reset_mcu();
    7ea0:	4b32      	ldr	r3, [pc, #200]	; (7f6c <main_loop+0x804>)
    7ea2:	4798      	blx	r3
		key_check = 0;
    7ea4:	2400      	movs	r4, #0
				break;
    7ea6:	e46b      	b.n	7780 <main_loop+0x18>
    7ea8:	0000d5fb 	.word	0x0000d5fb
    7eac:	00000395 	.word	0x00000395
    7eb0:	0000d633 	.word	0x0000d633
    7eb4:	20007f04 	.word	0x20007f04
    7eb8:	00004e25 	.word	0x00004e25
    7ebc:	0000d675 	.word	0x0000d675
    7ec0:	20008258 	.word	0x20008258
    7ec4:	00005059 	.word	0x00005059
    7ec8:	0000d6b1 	.word	0x0000d6b1
    7ecc:	20008528 	.word	0x20008528
    7ed0:	20008250 	.word	0x20008250
    7ed4:	00000501 	.word	0x00000501
    7ed8:	20008536 	.word	0x20008536
    7edc:	2000853c 	.word	0x2000853c
    7ee0:	00008e9d 	.word	0x00008e9d
    7ee4:	20008259 	.word	0x20008259
    7ee8:	20007f14 	.word	0x20007f14
    7eec:	20008251 	.word	0x20008251
    7ef0:	20007f08 	.word	0x20007f08
    7ef4:	00001545 	.word	0x00001545
    7ef8:	0000d6ee 	.word	0x0000d6ee
    7efc:	0000d803 	.word	0x0000d803
    7f00:	2000856c 	.word	0x2000856c
    7f04:	000091f1 	.word	0x000091f1
    7f08:	0000a079 	.word	0x0000a079
    7f0c:	20008622 	.word	0x20008622
    7f10:	20007528 	.word	0x20007528
    7f14:	000015cd 	.word	0x000015cd
    7f18:	00009f6d 	.word	0x00009f6d
    7f1c:	20008534 	.word	0x20008534
    7f20:	20007c55 	.word	0x20007c55
    7f24:	0000d508 	.word	0x0000d508
    7f28:	20007c56 	.word	0x20007c56
    7f2c:	20007fa2 	.word	0x20007fa2
    7f30:	0000dccf 	.word	0x0000dccf
    7f34:	0000dcff 	.word	0x0000dcff
    7f38:	0000dd1c 	.word	0x0000dd1c
    7f3c:	0000dd48 	.word	0x0000dd48
    7f40:	0000dd67 	.word	0x0000dd67
    7f44:	0000dd89 	.word	0x0000dd89
    7f48:	0000ddac 	.word	0x0000ddac
    7f4c:	0000ddd3 	.word	0x0000ddd3
    7f50:	0000ddfd 	.word	0x0000ddfd
    7f54:	0000d7d3 	.word	0x0000d7d3
    7f58:	0000ac21 	.word	0x0000ac21
    7f5c:	0000d20b 	.word	0x0000d20b
    7f60:	0000d7f4 	.word	0x0000d7f4
    7f64:	0000d73a 	.word	0x0000d73a
    7f68:	0000d759 	.word	0x0000d759
    7f6c:	00002359 	.word	0x00002359
    7f70:	2000825d 	.word	0x2000825d
    7f74:	20008550 	.word	0x20008550
    7f78:	20008568 	.word	0x20008568
    7f7c:	20008560 	.word	0x20008560
    7f80:	20008ccc 	.word	0x20008ccc
				xprintf("\r\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n");
    7f84:	48a0      	ldr	r0, [pc, #640]	; (8208 <main_loop+0xaa0>)
				((CONFIG *)&settings_buffer)->pattern1 = CONFIG_IDENTIFIER1;
    7f86:	4fa1      	ldr	r7, [pc, #644]	; (820c <main_loop+0xaa4>)
				xprintf("\r\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n");
    7f88:	47a0      	blx	r4
				xprintf("<CLI DEBUG> [CONFIGURATION DEFAULT] command\r\n");
    7f8a:	48a1      	ldr	r0, [pc, #644]	; (8210 <main_loop+0xaa8>)
    7f8c:	47a0      	blx	r4
				((CONFIG *)&settings_buffer)->pattern1 = CONFIG_IDENTIFIER1;
    7f8e:	2376      	movs	r3, #118	; 0x76
    7f90:	703b      	strb	r3, [r7, #0]
    7f92:	2336      	movs	r3, #54	; 0x36
    7f94:	707b      	strb	r3, [r7, #1]
    7f96:	2345      	movs	r3, #69	; 0x45
    7f98:	70bb      	strb	r3, [r7, #2]
    7f9a:	f06f 0301 	mvn.w	r3, #1
    7f9e:	70fb      	strb	r3, [r7, #3]
				((CONFIG *)&settings_buffer)->pattern2 = CONFIG_IDENTIFIER2;
    7fa0:	f06f 0343 	mvn.w	r3, #67	; 0x43
    7fa4:	713b      	strb	r3, [r7, #4]
    7fa6:	f06f 0315 	mvn.w	r3, #21
    7faa:	717b      	strb	r3, [r7, #5]
    7fac:	237d      	movs	r3, #125	; 0x7d
    7fae:	71bb      	strb	r3, [r7, #6]
    7fb0:	f06f 036c 	mvn.w	r3, #108	; 0x6c
				strncpy((char *__restrict)(((CONFIG *)&settings_buffer)->name), "MULTISENSE NEEDS CONFIGURING...", sizeof(((CONFIG *)&settings_buffer)->name));
    7fb4:	2221      	movs	r2, #33	; 0x21
    7fb6:	4997      	ldr	r1, [pc, #604]	; (8214 <main_loop+0xaac>)
				((CONFIG *)&settings_buffer)->pattern2 = CONFIG_IDENTIFIER2;
    7fb8:	71fb      	strb	r3, [r7, #7]
				strncpy((char *__restrict)(((CONFIG *)&settings_buffer)->name), "MULTISENSE NEEDS CONFIGURING...", sizeof(((CONFIG *)&settings_buffer)->name));
    7fba:	f107 0008 	add.w	r0, r7, #8
    7fbe:	4b96      	ldr	r3, [pc, #600]	; (8218 <main_loop+0xab0>)
    7fc0:	4798      	blx	r3
				((CONFIG *)&settings_buffer)->pattern1 = CONFIG_IDENTIFIER1;
    7fc2:	f04f 0800 	mov.w	r8, #0
				((CONFIG *)&settings_buffer)->gain_cardA = 0xFF;
    7fc6:	23ff      	movs	r3, #255	; 0xff
				xprintf("MultiSense [configuration FORMATTED]\r\n");
    7fc8:	4894      	ldr	r0, [pc, #592]	; (821c <main_loop+0xab4>)
				((CONFIG *)&settings_buffer)->ID = 0x00000000;
    7fca:	f887 802c 	strb.w	r8, [r7, #44]	; 0x2c
    7fce:	f887 802d 	strb.w	r8, [r7, #45]	; 0x2d
    7fd2:	f887 802e 	strb.w	r8, [r7, #46]	; 0x2e
    7fd6:	f887 802f 	strb.w	r8, [r7, #47]	; 0x2f
				((CONFIG *)&settings_buffer)->gain_cardA = 0xFF;
    7fda:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
				((CONFIG *)&settings_buffer)->gain_cardB = 0xFF;
    7fde:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				((CONFIG *)&settings_buffer)->loop_basestation = 0;
    7fe2:	f887 802b 	strb.w	r8, [r7, #43]	; 0x2b
				xprintf("MultiSense [configuration FORMATTED]\r\n");
    7fe6:	47a0      	blx	r4
				if (EEprom_settings(settings_buffer, SETTING_STRUCTURE_SIZE, 1) != ERR_NONE) {
    7fe8:	2201      	movs	r2, #1
    7fea:	2180      	movs	r1, #128	; 0x80
    7fec:	4638      	mov	r0, r7
    7fee:	4b8c      	ldr	r3, [pc, #560]	; (8220 <main_loop+0xab8>)
    7ff0:	4798      	blx	r3
    7ff2:	b110      	cbz	r0, 7ffa <main_loop+0x892>
					xprintf("MultiSense [configuration ERROR WRITING]\r\n");
    7ff4:	488b      	ldr	r0, [pc, #556]	; (8224 <main_loop+0xabc>)
				xprintf("S         [SPEED MAINLOOP] command\r\n\r\n");
    7ff6:	47a0      	blx	r4
    7ff8:	e1e8      	b.n	83cc <main_loop+0xc64>
					xprintf("MultiSense [configuration WRITTEN]\r\n");
    7ffa:	488b      	ldr	r0, [pc, #556]	; (8228 <main_loop+0xac0>)
    7ffc:	e7fb      	b.n	7ff6 <main_loop+0x88e>
					xprintf("MultiSense [configuration WRITTEN]\r\n");
    7ffe:	488a      	ldr	r0, [pc, #552]	; (8228 <main_loop+0xac0>)
    8000:	e745      	b.n	7e8e <main_loop+0x726>
				xprintf("\r\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n");
    8002:	4881      	ldr	r0, [pc, #516]	; (8208 <main_loop+0xaa0>)
    8004:	47a0      	blx	r4
				xprintf("<CLI DEBUG> [PASS THROUGH] command\r\n");
    8006:	4889      	ldr	r0, [pc, #548]	; (822c <main_loop+0xac4>)
    8008:	47a0      	blx	r4
				((CONFIG *)&settings_buffer)->loop_basestation = 0;
    800a:	4880      	ldr	r0, [pc, #512]	; (820c <main_loop+0xaa4>)
    800c:	2300      	movs	r3, #0
    800e:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
				if (EEprom_settings(settings_buffer, SETTING_STRUCTURE_SIZE, 1) != ERR_NONE) {
    8012:	2201      	movs	r2, #1
    8014:	e688      	b.n	7d28 <main_loop+0x5c0>
				xprintf("\r\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .");
    8016:	4886      	ldr	r0, [pc, #536]	; (8230 <main_loop+0xac8>)
				xprintf("<CLI DEBUG> ID               = %d", ((CONFIG *)&settings_buffer)->ID);
    8018:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 820c <main_loop+0xaa4>
				xprintf("\r\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .");
    801c:	47a0      	blx	r4
				xprintf("\r\n");
    801e:	4885      	ldr	r0, [pc, #532]	; (8234 <main_loop+0xacc>)
    8020:	47a0      	blx	r4
				xprintf("<CLI DEBUG> [LIVE BOARD PRINT] command");
    8022:	4885      	ldr	r0, [pc, #532]	; (8238 <main_loop+0xad0>)
    8024:	47a0      	blx	r4
				xprintf("\r\n");
    8026:	4883      	ldr	r0, [pc, #524]	; (8234 <main_loop+0xacc>)
    8028:	47a0      	blx	r4
				xprintf("<CLI DEBUG> ID               = %d", ((CONFIG *)&settings_buffer)->ID);
    802a:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
    802e:	4883      	ldr	r0, [pc, #524]	; (823c <main_loop+0xad4>)
    8030:	47a0      	blx	r4
				xprintf("\r\n");
    8032:	4880      	ldr	r0, [pc, #512]	; (8234 <main_loop+0xacc>)
    8034:	47a0      	blx	r4
				xprintf("<CLI DEBUG> Name             = %s", ((CONFIG *)&settings_buffer)->name);
    8036:	f109 0108 	add.w	r1, r9, #8
    803a:	4881      	ldr	r0, [pc, #516]	; (8240 <main_loop+0xad8>)
    803c:	47a0      	blx	r4
				xprintf("\r\r\r\r\r\n");
    803e:	4881      	ldr	r0, [pc, #516]	; (8244 <main_loop+0xadc>)
    8040:	47a0      	blx	r4
				xprintf("<CLI DEBUG> gainA            = %d", ((CONFIG *)&settings_buffer)->gain_cardA);
    8042:	f899 1029 	ldrb.w	r1, [r9, #41]	; 0x29
    8046:	4880      	ldr	r0, [pc, #512]	; (8248 <main_loop+0xae0>)
    8048:	47a0      	blx	r4
				xprintf("\r\n");
    804a:	487a      	ldr	r0, [pc, #488]	; (8234 <main_loop+0xacc>)
    804c:	47a0      	blx	r4
				xprintf("<CLI DEBUG> gainB            = %d", ((CONFIG *)&settings_buffer)->gain_cardB);
    804e:	f899 102a 	ldrb.w	r1, [r9, #42]	; 0x2a
    8052:	487e      	ldr	r0, [pc, #504]	; (824c <main_loop+0xae4>)
    8054:	47a0      	blx	r4
				xprintf("\r\n");
    8056:	4877      	ldr	r0, [pc, #476]	; (8234 <main_loop+0xacc>)
    8058:	47a0      	blx	r4
				xprintf("<CLI DEBUG> Mode             = %s", (((CONFIG *)&settings_buffer)->loop_basestation) ? "BASESTATION" : "PASS-THROUGH");
    805a:	4a7d      	ldr	r2, [pc, #500]	; (8250 <main_loop+0xae8>)
    805c:	4b7d      	ldr	r3, [pc, #500]	; (8254 <main_loop+0xaec>)
    805e:	f899 102b 	ldrb.w	r1, [r9, #43]	; 0x2b
    8062:	487d      	ldr	r0, [pc, #500]	; (8258 <main_loop+0xaf0>)
				if ((readdata_tempmoisture[1] == 0xFF) && (readdata_tempmoisture[0] == 0xFF)) {
    8064:	f8df 9284 	ldr.w	r9, [pc, #644]	; 82ec <main_loop+0xb84>
				xprintf("<CLI DEBUG> Mode             = %s", (((CONFIG *)&settings_buffer)->loop_basestation) ? "BASESTATION" : "PASS-THROUGH");
    8068:	2900      	cmp	r1, #0
    806a:	bf0c      	ite	eq
    806c:	4611      	moveq	r1, r2
    806e:	4619      	movne	r1, r3
    8070:	47a0      	blx	r4
				xprintf("\r\r\r\r\r\n");
    8072:	4874      	ldr	r0, [pc, #464]	; (8244 <main_loop+0xadc>)
    8074:	47a0      	blx	r4
				xprintf("<CLI DEBUG> Water1           = %d", (int)readdata_water1);
    8076:	4b79      	ldr	r3, [pc, #484]	; (825c <main_loop+0xaf4>)
    8078:	4879      	ldr	r0, [pc, #484]	; (8260 <main_loop+0xaf8>)
    807a:	7819      	ldrb	r1, [r3, #0]
    807c:	47a0      	blx	r4
				xprintf("\r\n");
    807e:	486d      	ldr	r0, [pc, #436]	; (8234 <main_loop+0xacc>)
    8080:	47a0      	blx	r4
				xprintf("<CLI DEBUG> Water2           = %d", (int)readdata_water2);
    8082:	4b78      	ldr	r3, [pc, #480]	; (8264 <main_loop+0xafc>)
    8084:	4878      	ldr	r0, [pc, #480]	; (8268 <main_loop+0xb00>)
    8086:	7819      	ldrb	r1, [r3, #0]
    8088:	47a0      	blx	r4
				xprintf("\r\n");
    808a:	486a      	ldr	r0, [pc, #424]	; (8234 <main_loop+0xacc>)
    808c:	47a0      	blx	r4
				xprintf("<CLI DEBUG> HV               = %d", (int)highvoltage);
    808e:	4b77      	ldr	r3, [pc, #476]	; (826c <main_loop+0xb04>)
    8090:	4877      	ldr	r0, [pc, #476]	; (8270 <main_loop+0xb08>)
    8092:	7819      	ldrb	r1, [r3, #0]
    8094:	47a0      	blx	r4
				xprintf("\r\n");
    8096:	4867      	ldr	r0, [pc, #412]	; (8234 <main_loop+0xacc>)
    8098:	47a0      	blx	r4
				if ((readdata_tempmoisture[1] == 0xFF) && (readdata_tempmoisture[0] == 0xFF)) {
    809a:	f899 1001 	ldrb.w	r1, [r9, #1]
    809e:	29ff      	cmp	r1, #255	; 0xff
    80a0:	f040 8082 	bne.w	81a8 <main_loop+0xa40>
    80a4:	f899 3000 	ldrb.w	r3, [r9]
    80a8:	2bff      	cmp	r3, #255	; 0xff
    80aa:	d17d      	bne.n	81a8 <main_loop+0xa40>
					xprintf("<CLI DEBUG> Temp             = ERROR");
    80ac:	4871      	ldr	r0, [pc, #452]	; (8274 <main_loop+0xb0c>)
    80ae:	47a0      	blx	r4
				xprintf("\r\n");
    80b0:	4860      	ldr	r0, [pc, #384]	; (8234 <main_loop+0xacc>)
    80b2:	47a0      	blx	r4
				if ((readdata_tempmoisture[3] == 0xFF) && (readdata_tempmoisture[2] == 0xFF)) {
    80b4:	f899 1003 	ldrb.w	r1, [r9, #3]
    80b8:	29ff      	cmp	r1, #255	; 0xff
    80ba:	f040 808d 	bne.w	81d8 <main_loop+0xa70>
    80be:	f899 3002 	ldrb.w	r3, [r9, #2]
    80c2:	2bff      	cmp	r3, #255	; 0xff
    80c4:	f040 8088 	bne.w	81d8 <main_loop+0xa70>
					xprintf("<CLI DEBUG> Humidity         = ERROR");
    80c8:	486b      	ldr	r0, [pc, #428]	; (8278 <main_loop+0xb10>)
    80ca:	47a0      	blx	r4
				xprintf("\r\n");
    80cc:	4859      	ldr	r0, [pc, #356]	; (8234 <main_loop+0xacc>)
				xprintf("<CLI DEBUG> Port1            = %s", (link_port1) ? "LINK OK" : "LINK DOWN");
    80ce:	f8df a220 	ldr.w	sl, [pc, #544]	; 82f0 <main_loop+0xb88>
    80d2:	f8df 9220 	ldr.w	r9, [pc, #544]	; 82f4 <main_loop+0xb8c>
				xprintf("\r\n");
    80d6:	47a0      	blx	r4
				xprintf("<CLI DEBUG> Tamper           = %s", (tamper) ? "UP" : "DOWN");
    80d8:	4b68      	ldr	r3, [pc, #416]	; (827c <main_loop+0xb14>)
    80da:	4a69      	ldr	r2, [pc, #420]	; (8280 <main_loop+0xb18>)
    80dc:	7819      	ldrb	r1, [r3, #0]
    80de:	4b69      	ldr	r3, [pc, #420]	; (8284 <main_loop+0xb1c>)
    80e0:	4869      	ldr	r0, [pc, #420]	; (8288 <main_loop+0xb20>)
    80e2:	2900      	cmp	r1, #0
    80e4:	bf0c      	ite	eq
    80e6:	4611      	moveq	r1, r2
    80e8:	4619      	movne	r1, r3
    80ea:	47a0      	blx	r4
				xprintf("\r\r\r\r\n");
    80ec:	4867      	ldr	r0, [pc, #412]	; (828c <main_loop+0xb24>)
    80ee:	47a0      	blx	r4
				xprintf("<CLI DEBUG> Port1            = %s", (link_port1) ? "LINK OK" : "LINK DOWN");
    80f0:	4b67      	ldr	r3, [pc, #412]	; (8290 <main_loop+0xb28>)
    80f2:	4868      	ldr	r0, [pc, #416]	; (8294 <main_loop+0xb2c>)
    80f4:	7819      	ldrb	r1, [r3, #0]
    80f6:	2900      	cmp	r1, #0
    80f8:	bf0c      	ite	eq
    80fa:	4651      	moveq	r1, sl
    80fc:	4649      	movne	r1, r9
    80fe:	47a0      	blx	r4
				xprintf("\r\r\r\r\n");
    8100:	4862      	ldr	r0, [pc, #392]	; (828c <main_loop+0xb24>)
    8102:	47a0      	blx	r4
				xprintf("<CLI DEBUG> Port2            = %s", (link_port2) ? "LINK OK" : "LINK DOWN");
    8104:	4b64      	ldr	r3, [pc, #400]	; (8298 <main_loop+0xb30>)
    8106:	4865      	ldr	r0, [pc, #404]	; (829c <main_loop+0xb34>)
    8108:	7819      	ldrb	r1, [r3, #0]
    810a:	2900      	cmp	r1, #0
    810c:	bf0c      	ite	eq
    810e:	4651      	moveq	r1, sl
    8110:	4649      	movne	r1, r9
    8112:	47a0      	blx	r4
				xprintf("\r\r\r\r\n");
    8114:	485d      	ldr	r0, [pc, #372]	; (828c <main_loop+0xb24>)
    8116:	47a0      	blx	r4
				xprintf("<CLI DEBUG> Port3            = %s", (link_port3) ? "LINK OK" : "LINK DOWN");
    8118:	4b61      	ldr	r3, [pc, #388]	; (82a0 <main_loop+0xb38>)
    811a:	4862      	ldr	r0, [pc, #392]	; (82a4 <main_loop+0xb3c>)
    811c:	7819      	ldrb	r1, [r3, #0]
    811e:	2900      	cmp	r1, #0
    8120:	bf0c      	ite	eq
    8122:	4651      	moveq	r1, sl
    8124:	4649      	movne	r1, r9
    8126:	47a0      	blx	r4
				xprintf("\r\r\r\r\n");
    8128:	4858      	ldr	r0, [pc, #352]	; (828c <main_loop+0xb24>)
    812a:	47a0      	blx	r4
				xprintf("<CLI DEBUG> CardA            = %s", (cardA_type == CARD_NOTFITTED) ? "NOT FITTED" : (cardA_type == CARD_VIBRAPOINT) ? "VibraPoint" : (cardA_type == CARD_VIBRATEK) ? "VibraTek" :
    812c:	f898 3000 	ldrb.w	r3, [r8]
    8130:	2b00      	cmp	r3, #0
    8132:	d05c      	beq.n	81ee <main_loop+0xa86>
    8134:	2b04      	cmp	r3, #4
    8136:	d05c      	beq.n	81f2 <main_loop+0xa8a>
    8138:	2b01      	cmp	r3, #1
    813a:	d05c      	beq.n	81f6 <main_loop+0xa8e>
					                                             (cardA_type == CARD_MAXI_IO) ? "Maxi IO" : (cardA_type == CARD_MINI_IO) ? "Mini IO" : (cardA_type == CARD_PE) ? "P&E" : "Unknown");
    813c:	2b03      	cmp	r3, #3
    813e:	d05c      	beq.n	81fa <main_loop+0xa92>
    8140:	2b02      	cmp	r3, #2
    8142:	d05c      	beq.n	81fe <main_loop+0xa96>
    8144:	4a58      	ldr	r2, [pc, #352]	; (82a8 <main_loop+0xb40>)
    8146:	4959      	ldr	r1, [pc, #356]	; (82ac <main_loop+0xb44>)
    8148:	2b05      	cmp	r3, #5
    814a:	bf08      	it	eq
    814c:	4611      	moveq	r1, r2
				xprintf("<CLI DEBUG> CardA            = %s", (cardA_type == CARD_NOTFITTED) ? "NOT FITTED" : (cardA_type == CARD_VIBRAPOINT) ? "VibraPoint" : (cardA_type == CARD_VIBRATEK) ? "VibraTek" :
    814e:	4858      	ldr	r0, [pc, #352]	; (82b0 <main_loop+0xb48>)
    8150:	47a0      	blx	r4
				xprintf("\r\r\r\r\r\n");
    8152:	483c      	ldr	r0, [pc, #240]	; (8244 <main_loop+0xadc>)
    8154:	47a0      	blx	r4
				xprintf("<CLI DEBUG> CardB            = %s", (cardB_type == CARD_NOTFITTED) ? "NOT FITTED" : (cardB_type == CARD_VIBRAPOINT) ? "VibraPoint" : (cardB_type == CARD_VIBRATEK) ? "VibraTek" :
    8156:	783b      	ldrb	r3, [r7, #0]
    8158:	2b00      	cmp	r3, #0
    815a:	d052      	beq.n	8202 <main_loop+0xa9a>
    815c:	2b04      	cmp	r3, #4
    815e:	f000 80cb 	beq.w	82f8 <main_loop+0xb90>
    8162:	2b01      	cmp	r3, #1
    8164:	f000 80ca 	beq.w	82fc <main_loop+0xb94>
																 (cardB_type == CARD_MAXI_IO) ? "Maxi IO" : (cardB_type == CARD_MINI_IO) ? "Mini IO" : "Unknown");
    8168:	2b03      	cmp	r3, #3
    816a:	f000 80c9 	beq.w	8300 <main_loop+0xb98>
    816e:	4a51      	ldr	r2, [pc, #324]	; (82b4 <main_loop+0xb4c>)
    8170:	494e      	ldr	r1, [pc, #312]	; (82ac <main_loop+0xb44>)
    8172:	2b02      	cmp	r3, #2
    8174:	bf08      	it	eq
    8176:	4611      	moveq	r1, r2
				xprintf("<CLI DEBUG> CardB            = %s", (cardB_type == CARD_NOTFITTED) ? "NOT FITTED" : (cardB_type == CARD_VIBRAPOINT) ? "VibraPoint" : (cardB_type == CARD_VIBRATEK) ? "VibraTek" :
    8178:	484f      	ldr	r0, [pc, #316]	; (82b8 <main_loop+0xb50>)
    817a:	47a0      	blx	r4
				xprintf("\r\r\r\r\r\n");
    817c:	4831      	ldr	r0, [pc, #196]	; (8244 <main_loop+0xadc>)
    817e:	47a0      	blx	r4
				xprintf("<CLI DEBUG> Ring Topology    = %s", (ring_broken == RING_BROKEN) ? "BROKEN" : (ring_broken == RING_CLOSED) ? "LOOP" : "N/A");
    8180:	4b4e      	ldr	r3, [pc, #312]	; (82bc <main_loop+0xb54>)
    8182:	781b      	ldrb	r3, [r3, #0]
    8184:	2b01      	cmp	r3, #1
    8186:	f000 80bd 	beq.w	8304 <main_loop+0xb9c>
    818a:	4a4d      	ldr	r2, [pc, #308]	; (82c0 <main_loop+0xb58>)
    818c:	494d      	ldr	r1, [pc, #308]	; (82c4 <main_loop+0xb5c>)
    818e:	2b00      	cmp	r3, #0
    8190:	bf08      	it	eq
    8192:	4611      	moveq	r1, r2
    8194:	484c      	ldr	r0, [pc, #304]	; (82c8 <main_loop+0xb60>)
    8196:	47a0      	blx	r4
				xprintf("\r\r\r\r\r\n");
    8198:	482a      	ldr	r0, [pc, #168]	; (8244 <main_loop+0xadc>)
    819a:	47a0      	blx	r4
				xprintf("<CLI DEBUG> Firmware         = %d.%d", MULTISENSE_FIRMWARE_MAJOR, MULTISENSE_FIRMWARE_MINOR);
    819c:	484b      	ldr	r0, [pc, #300]	; (82cc <main_loop+0xb64>)
    819e:	2201      	movs	r2, #1
    81a0:	2100      	movs	r1, #0
    81a2:	47a0      	blx	r4
				xprintf("\r\n");
    81a4:	4823      	ldr	r0, [pc, #140]	; (8234 <main_loop+0xacc>)
    81a6:	e726      	b.n	7ff6 <main_loop+0x88e>
				} else if ((((((((int)readdata_tempmoisture[0] * 256)) + ((int)readdata_tempmoisture[1])) * 165) / 65536) - 40) >= 0) {
    81a8:	f899 3000 	ldrb.w	r3, [r9]
    81ac:	eb01 2303 	add.w	r3, r1, r3, lsl #8
    81b0:	21a5      	movs	r1, #165	; 0xa5
    81b2:	4359      	muls	r1, r3
    81b4:	f5b1 1f20 	cmp.w	r1, #2621440	; 0x280000
    81b8:	db04      	blt.n	81c4 <main_loop+0xa5c>
					xprintf("<CLI DEBUG> Temp             = %dC", ((((((int)readdata_tempmoisture[0] * 256)) + ((int)readdata_tempmoisture[1])) * 165) / 65536) - 40);
    81ba:	1409      	asrs	r1, r1, #16
    81bc:	4844      	ldr	r0, [pc, #272]	; (82d0 <main_loop+0xb68>)
    81be:	3928      	subs	r1, #40	; 0x28
					xprintf("<CLI DEBUG> Temp             = -%dC", -(((((((int)readdata_tempmoisture[0] * 256)) + ((int)readdata_tempmoisture[1])) * 165) / 65536) - 40));
    81c0:	47a0      	blx	r4
    81c2:	e775      	b.n	80b0 <main_loop+0x948>
    81c4:	f06f 01a4 	mvn.w	r1, #164	; 0xa4
    81c8:	4359      	muls	r1, r3
    81ca:	4842      	ldr	r0, [pc, #264]	; (82d4 <main_loop+0xb6c>)
    81cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    81d0:	fb91 f1f3 	sdiv	r1, r1, r3
    81d4:	3128      	adds	r1, #40	; 0x28
    81d6:	e7f3      	b.n	81c0 <main_loop+0xa58>
					xprintf("<CLI DEBUG> Humidity         = %d%c", ((int)((((int)readdata_tempmoisture[2] * 256)) + ((int)readdata_tempmoisture[3])) * 100) / 65536, '%');
    81d8:	f899 3002 	ldrb.w	r3, [r9, #2]
    81dc:	483e      	ldr	r0, [pc, #248]	; (82d8 <main_loop+0xb70>)
    81de:	eb01 2103 	add.w	r1, r1, r3, lsl #8
    81e2:	2364      	movs	r3, #100	; 0x64
    81e4:	4359      	muls	r1, r3
    81e6:	2225      	movs	r2, #37	; 0x25
    81e8:	1409      	asrs	r1, r1, #16
    81ea:	47a0      	blx	r4
    81ec:	e76e      	b.n	80cc <main_loop+0x964>
				xprintf("<CLI DEBUG> CardA            = %s", (cardA_type == CARD_NOTFITTED) ? "NOT FITTED" : (cardA_type == CARD_VIBRAPOINT) ? "VibraPoint" : (cardA_type == CARD_VIBRATEK) ? "VibraTek" :
    81ee:	493b      	ldr	r1, [pc, #236]	; (82dc <main_loop+0xb74>)
    81f0:	e7ad      	b.n	814e <main_loop+0x9e6>
    81f2:	493b      	ldr	r1, [pc, #236]	; (82e0 <main_loop+0xb78>)
    81f4:	e7ab      	b.n	814e <main_loop+0x9e6>
    81f6:	493b      	ldr	r1, [pc, #236]	; (82e4 <main_loop+0xb7c>)
    81f8:	e7a9      	b.n	814e <main_loop+0x9e6>
					                                             (cardA_type == CARD_MAXI_IO) ? "Maxi IO" : (cardA_type == CARD_MINI_IO) ? "Mini IO" : (cardA_type == CARD_PE) ? "P&E" : "Unknown");
    81fa:	493b      	ldr	r1, [pc, #236]	; (82e8 <main_loop+0xb80>)
    81fc:	e7a7      	b.n	814e <main_loop+0x9e6>
    81fe:	492d      	ldr	r1, [pc, #180]	; (82b4 <main_loop+0xb4c>)
    8200:	e7a5      	b.n	814e <main_loop+0x9e6>
				xprintf("<CLI DEBUG> CardB            = %s", (cardB_type == CARD_NOTFITTED) ? "NOT FITTED" : (cardB_type == CARD_VIBRAPOINT) ? "VibraPoint" : (cardB_type == CARD_VIBRATEK) ? "VibraTek" :
    8202:	4936      	ldr	r1, [pc, #216]	; (82dc <main_loop+0xb74>)
    8204:	e7b8      	b.n	8178 <main_loop+0xa10>
    8206:	bf00      	nop
    8208:	0000d6ee 	.word	0x0000d6ee
    820c:	20007f14 	.word	0x20007f14
    8210:	0000d7a5 	.word	0x0000d7a5
    8214:	0000d1c4 	.word	0x0000d1c4
    8218:	0000ae39 	.word	0x0000ae39
    821c:	0000d1e4 	.word	0x0000d1e4
    8220:	0000ac21 	.word	0x0000ac21
    8224:	0000d20b 	.word	0x0000d20b
    8228:	0000d236 	.word	0x0000d236
    822c:	0000d827 	.word	0x0000d827
    8230:	0000d84c 	.word	0x0000d84c
    8234:	0000e16b 	.word	0x0000e16b
    8238:	0000d896 	.word	0x0000d896
    823c:	0000d8bd 	.word	0x0000d8bd
    8240:	0000d8df 	.word	0x0000d8df
    8244:	0000d901 	.word	0x0000d901
    8248:	0000d908 	.word	0x0000d908
    824c:	0000d92a 	.word	0x0000d92a
    8250:	0000d3ed 	.word	0x0000d3ed
    8254:	0000d3e1 	.word	0x0000d3e1
    8258:	0000d94c 	.word	0x0000d94c
    825c:	2000853e 	.word	0x2000853e
    8260:	0000d96e 	.word	0x0000d96e
    8264:	2000852d 	.word	0x2000852d
    8268:	0000d990 	.word	0x0000d990
    826c:	20008535 	.word	0x20008535
    8270:	0000d9b2 	.word	0x0000d9b2
    8274:	0000d9d4 	.word	0x0000d9d4
    8278:	0000da40 	.word	0x0000da40
    827c:	20007f9b 	.word	0x20007f9b
    8280:	0000d40a 	.word	0x0000d40a
    8284:	0000d3fa 	.word	0x0000d3fa
    8288:	0000da89 	.word	0x0000da89
    828c:	0000d902 	.word	0x0000d902
    8290:	20007571 	.word	0x20007571
    8294:	0000daab 	.word	0x0000daab
    8298:	20008274 	.word	0x20008274
    829c:	0000dacd 	.word	0x0000dacd
    82a0:	20007575 	.word	0x20007575
    82a4:	0000daef 	.word	0x0000daef
    82a8:	0000d446 	.word	0x0000d446
    82ac:	0000d43e 	.word	0x0000d43e
    82b0:	0000db11 	.word	0x0000db11
    82b4:	0000d436 	.word	0x0000d436
    82b8:	0000db33 	.word	0x0000db33
    82bc:	20008251 	.word	0x20008251
    82c0:	0000d455 	.word	0x0000d455
    82c4:	0000d44a 	.word	0x0000d44a
    82c8:	0000db55 	.word	0x0000db55
    82cc:	0000db77 	.word	0x0000db77
    82d0:	0000d9f9 	.word	0x0000d9f9
    82d4:	0000da1c 	.word	0x0000da1c
    82d8:	0000da65 	.word	0x0000da65
    82dc:	0000d41a 	.word	0x0000d41a
    82e0:	0000d40f 	.word	0x0000d40f
    82e4:	0000d425 	.word	0x0000d425
    82e8:	0000d42e 	.word	0x0000d42e
    82ec:	20007f9d 	.word	0x20007f9d
    82f0:	0000d405 	.word	0x0000d405
    82f4:	0000d3fd 	.word	0x0000d3fd
    82f8:	493e      	ldr	r1, [pc, #248]	; (83f4 <main_loop+0xc8c>)
    82fa:	e73d      	b.n	8178 <main_loop+0xa10>
    82fc:	493e      	ldr	r1, [pc, #248]	; (83f8 <main_loop+0xc90>)
    82fe:	e73b      	b.n	8178 <main_loop+0xa10>
																 (cardB_type == CARD_MAXI_IO) ? "Maxi IO" : (cardB_type == CARD_MINI_IO) ? "Mini IO" : "Unknown");
    8300:	493e      	ldr	r1, [pc, #248]	; (83fc <main_loop+0xc94>)
    8302:	e739      	b.n	8178 <main_loop+0xa10>
				xprintf("<CLI DEBUG> Ring Topology    = %s", (ring_broken == RING_BROKEN) ? "BROKEN" : (ring_broken == RING_CLOSED) ? "LOOP" : "N/A");
    8304:	493e      	ldr	r1, [pc, #248]	; (8400 <main_loop+0xc98>)
    8306:	e745      	b.n	8194 <main_loop+0xa2c>
				xprintf("<CLI DEBUG> IP               = %d.%d.%d.%d\r\n", uip_ipaddr1(ipaddr), uip_ipaddr2(ipaddr), uip_ipaddr3(ipaddr), uip_ipaddr4(ipaddr));
    8308:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8438 <main_loop+0xcd0>
				xprintf("\r\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n");
    830c:	483d      	ldr	r0, [pc, #244]	; (8404 <main_loop+0xc9c>)
				xprintf("<CLI DEBUG> IP               = %d.%d.%d.%d\r\n", uip_ipaddr1(ipaddr), uip_ipaddr2(ipaddr), uip_ipaddr3(ipaddr), uip_ipaddr4(ipaddr));
    830e:	4f3e      	ldr	r7, [pc, #248]	; (8408 <main_loop+0xca0>)
				xprintf("\r\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n");
    8310:	47a0      	blx	r4
				xprintf("<CLI DEBUG> [IP SCHEME / NETWORK] command\r\n");
    8312:	483e      	ldr	r0, [pc, #248]	; (840c <main_loop+0xca4>)
    8314:	47a0      	blx	r4
				xprintf("<CLI DEBUG> IP               = %d.%d.%d.%d\r\n", uip_ipaddr1(ipaddr), uip_ipaddr2(ipaddr), uip_ipaddr3(ipaddr), uip_ipaddr4(ipaddr));
    8316:	f8b8 0000 	ldrh.w	r0, [r8]
    831a:	47b8      	blx	r7
    831c:	4681      	mov	r9, r0
    831e:	f8b8 0000 	ldrh.w	r0, [r8]
    8322:	47b8      	blx	r7
    8324:	4682      	mov	sl, r0
    8326:	f8b8 0002 	ldrh.w	r0, [r8, #2]
    832a:	47b8      	blx	r7
    832c:	4683      	mov	fp, r0
    832e:	f8b8 0002 	ldrh.w	r0, [r8, #2]
				xprintf("<CLI DEBUG> Netmask          = %d.%d.%d.%d\r\n", uip_ipaddr1(netmask), uip_ipaddr2(netmask), uip_ipaddr3(netmask), uip_ipaddr4(netmask));
    8332:	f8df 8108 	ldr.w	r8, [pc, #264]	; 843c <main_loop+0xcd4>
				xprintf("<CLI DEBUG> IP               = %d.%d.%d.%d\r\n", uip_ipaddr1(ipaddr), uip_ipaddr2(ipaddr), uip_ipaddr3(ipaddr), uip_ipaddr4(ipaddr));
    8336:	47b8      	blx	r7
    8338:	b2c0      	uxtb	r0, r0
    833a:	f3cb 230f 	ubfx	r3, fp, #8, #16
    833e:	fa5f f28a 	uxtb.w	r2, sl
    8342:	f3c9 210f 	ubfx	r1, r9, #8, #16
    8346:	9000      	str	r0, [sp, #0]
    8348:	4831      	ldr	r0, [pc, #196]	; (8410 <main_loop+0xca8>)
    834a:	47a0      	blx	r4
				xprintf("<CLI DEBUG> Netmask          = %d.%d.%d.%d\r\n", uip_ipaddr1(netmask), uip_ipaddr2(netmask), uip_ipaddr3(netmask), uip_ipaddr4(netmask));
    834c:	f8b8 0000 	ldrh.w	r0, [r8]
    8350:	47b8      	blx	r7
    8352:	4681      	mov	r9, r0
    8354:	f8b8 0000 	ldrh.w	r0, [r8]
    8358:	47b8      	blx	r7
    835a:	4682      	mov	sl, r0
    835c:	f8b8 0002 	ldrh.w	r0, [r8, #2]
    8360:	47b8      	blx	r7
    8362:	4683      	mov	fp, r0
    8364:	f8b8 0002 	ldrh.w	r0, [r8, #2]
				xprintf("<CLI DEBUG> Gateway          = %d.%d.%d.%d\r\n", uip_ipaddr1(gwaddr), uip_ipaddr2(gwaddr), uip_ipaddr3(gwaddr), uip_ipaddr4(gwaddr));
    8368:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8440 <main_loop+0xcd8>
				xprintf("<CLI DEBUG> Netmask          = %d.%d.%d.%d\r\n", uip_ipaddr1(netmask), uip_ipaddr2(netmask), uip_ipaddr3(netmask), uip_ipaddr4(netmask));
    836c:	47b8      	blx	r7
    836e:	b2c0      	uxtb	r0, r0
    8370:	f3cb 230f 	ubfx	r3, fp, #8, #16
    8374:	fa5f f28a 	uxtb.w	r2, sl
    8378:	f3c9 210f 	ubfx	r1, r9, #8, #16
    837c:	9000      	str	r0, [sp, #0]
    837e:	4825      	ldr	r0, [pc, #148]	; (8414 <main_loop+0xcac>)
    8380:	47a0      	blx	r4
				xprintf("<CLI DEBUG> Gateway          = %d.%d.%d.%d\r\n", uip_ipaddr1(gwaddr), uip_ipaddr2(gwaddr), uip_ipaddr3(gwaddr), uip_ipaddr4(gwaddr));
    8382:	f8b8 0000 	ldrh.w	r0, [r8]
    8386:	47b8      	blx	r7
    8388:	4681      	mov	r9, r0
    838a:	f8b8 0000 	ldrh.w	r0, [r8]
    838e:	47b8      	blx	r7
    8390:	4682      	mov	sl, r0
    8392:	f8b8 0002 	ldrh.w	r0, [r8, #2]
    8396:	47b8      	blx	r7
    8398:	4683      	mov	fp, r0
    839a:	f8b8 0002 	ldrh.w	r0, [r8, #2]
    839e:	47b8      	blx	r7
    83a0:	b2c0      	uxtb	r0, r0
    83a2:	9000      	str	r0, [sp, #0]
    83a4:	f3cb 230f 	ubfx	r3, fp, #8, #16
    83a8:	fa5f f28a 	uxtb.w	r2, sl
    83ac:	f3c9 210f 	ubfx	r1, r9, #8, #16
    83b0:	4819      	ldr	r0, [pc, #100]	; (8418 <main_loop+0xcb0>)
    83b2:	47a0      	blx	r4
				xprintf("<CLI DEBUG> MAC              = %x:%x:%x:%x:%x:%x\r\n", mac_raw[0], mac_raw[1], mac_raw[2], mac_raw[3], mac_raw[4], mac_raw[5]);
    83b4:	4819      	ldr	r0, [pc, #100]	; (841c <main_loop+0xcb4>)
    83b6:	7947      	ldrb	r7, [r0, #5]
    83b8:	7883      	ldrb	r3, [r0, #2]
    83ba:	7842      	ldrb	r2, [r0, #1]
    83bc:	7801      	ldrb	r1, [r0, #0]
    83be:	9702      	str	r7, [sp, #8]
    83c0:	7907      	ldrb	r7, [r0, #4]
    83c2:	9701      	str	r7, [sp, #4]
    83c4:	78c0      	ldrb	r0, [r0, #3]
    83c6:	9000      	str	r0, [sp, #0]
    83c8:	4815      	ldr	r0, [pc, #84]	; (8420 <main_loop+0xcb8>)
    83ca:	47a0      	blx	r4
				xprintf(". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n\r\n");
    83cc:	4815      	ldr	r0, [pc, #84]	; (8424 <main_loop+0xcbc>)
    83ce:	47a0      	blx	r4
    83d0:	e568      	b.n	7ea4 <main_loop+0x73c>
				xprintf("\r\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n");
    83d2:	480c      	ldr	r0, [pc, #48]	; (8404 <main_loop+0xc9c>)
    83d4:	47a0      	blx	r4
				xprintf("<CLI DEBUG> [SPEED MAINLOOP] command\r\n");
    83d6:	4814      	ldr	r0, [pc, #80]	; (8428 <main_loop+0xcc0>)
    83d8:	47a0      	blx	r4
				xprintf("<CLI DEBUG> Main-loop/Sampling = %d\r\n", looprate);
    83da:	4b14      	ldr	r3, [pc, #80]	; (842c <main_loop+0xcc4>)
    83dc:	4814      	ldr	r0, [pc, #80]	; (8430 <main_loop+0xcc8>)
    83de:	6819      	ldr	r1, [r3, #0]
    83e0:	47a0      	blx	r4
    83e2:	e7f3      	b.n	83cc <main_loop+0xc64>
			else if (!stormstate) {
    83e4:	4b13      	ldr	r3, [pc, #76]	; (8434 <main_loop+0xccc>)
    83e6:	781b      	ldrb	r3, [r3, #0]
				broadcast_storm = 0;
    83e8:	2b00      	cmp	r3, #0
    83ea:	9b06      	ldr	r3, [sp, #24]
    83ec:	bf08      	it	eq
    83ee:	2300      	moveq	r3, #0
    83f0:	f7ff ba7f 	b.w	78f2 <main_loop+0x18a>
    83f4:	0000d40f 	.word	0x0000d40f
    83f8:	0000d425 	.word	0x0000d425
    83fc:	0000d42e 	.word	0x0000d42e
    8400:	0000d44e 	.word	0x0000d44e
    8404:	0000d6ee 	.word	0x0000d6ee
    8408:	00009e19 	.word	0x00009e19
    840c:	0000db9c 	.word	0x0000db9c
    8410:	0000dbc8 	.word	0x0000dbc8
    8414:	0000dbf5 	.word	0x0000dbf5
    8418:	0000dc22 	.word	0x0000dc22
    841c:	20007f94 	.word	0x20007f94
    8420:	0000dc4f 	.word	0x0000dc4f
    8424:	0000d759 	.word	0x0000d759
    8428:	0000dc82 	.word	0x0000dc82
    842c:	20008548 	.word	0x20008548
    8430:	0000dca9 	.word	0x0000dca9
    8434:	2000853c 	.word	0x2000853c
    8438:	2000758c 	.word	0x2000758c
    843c:	20007f10 	.word	0x20007f10
    8440:	20008522 	.word	0x20008522

00008444 <main>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: Main start-point of whole application code
// Returns:     Nothing (NULL)
// *****************************************************************************************************************************************************************
int main(void)
{
    8444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned char	ID_index;
	unsigned char	ID_string[9];
	unsigned int	new_id;
			
	/* Initialize the lower-level Atmel drivers, hardware and HAL interface */
	atmel_start_init();
    8448:	4b64      	ldr	r3, [pc, #400]	; (85dc <main+0x198>)

	usart_async_get_io_descriptor(&USART_1, &io);
	usart_async_register_callback(&USART_1, USART_ASYNC_TXC_CB, tx_callb);
    844a:	4c65      	ldr	r4, [pc, #404]	; (85e0 <main+0x19c>)
{
    844c:	b087      	sub	sp, #28
	atmel_start_init();
    844e:	4798      	blx	r3
	usart_async_get_io_descriptor(&USART_1, &io);
    8450:	4b64      	ldr	r3, [pc, #400]	; (85e4 <main+0x1a0>)
    8452:	4965      	ldr	r1, [pc, #404]	; (85e8 <main+0x1a4>)
    8454:	4865      	ldr	r0, [pc, #404]	; (85ec <main+0x1a8>)
    8456:	4798      	blx	r3
	usart_async_register_callback(&USART_1, USART_ASYNC_TXC_CB, tx_callb);
    8458:	4a65      	ldr	r2, [pc, #404]	; (85f0 <main+0x1ac>)
    845a:	4864      	ldr	r0, [pc, #400]	; (85ec <main+0x1a8>)
    845c:	2101      	movs	r1, #1
    845e:	47a0      	blx	r4
	usart_async_register_callback(&USART_1, USART_ASYNC_RXC_CB, rx_callb);
    8460:	4a64      	ldr	r2, [pc, #400]	; (85f4 <main+0x1b0>)
    8462:	4862      	ldr	r0, [pc, #392]	; (85ec <main+0x1a8>)
    8464:	2100      	movs	r1, #0
    8466:	47a0      	blx	r4
	usart_async_enable(&USART_1);
    8468:	4b63      	ldr	r3, [pc, #396]	; (85f8 <main+0x1b4>)
    846a:	4860      	ldr	r0, [pc, #384]	; (85ec <main+0x1a8>)
    846c:	4798      	blx	r3
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    846e:	4b63      	ldr	r3, [pc, #396]	; (85fc <main+0x1b8>)
    8470:	f240 72fc 	movw	r2, #2044	; 0x7fc
    8474:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    8476:	4014      	ands	r4, r2
    8478:	d1fc      	bne.n	8474 <main+0x30>
	((Adc *)hw)->DSEQCTRL.reg |= ADC_DSEQCTRL_INPUTCTRL;
    847a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	
	hri_adc_set_DSEQCTRL_INPUTCTRL_bit(ADC0);
	_dma_set_source_address(DMA_CHANNEL_0, (const void *const)inputctrl_buff);
    847c:	4960      	ldr	r1, [pc, #384]	; (8600 <main+0x1bc>)
	uip_init();																									// initialize the IP stack

	/* Set the board MAC and IP address along with the network schemes */
	address_configure();
	
	if (((CONFIG *)&settings_buffer)->ID > 0x00000000) {
    847e:	4d61      	ldr	r5, [pc, #388]	; (8604 <main+0x1c0>)
    8480:	f042 0201 	orr.w	r2, r2, #1
    8484:	639a      	str	r2, [r3, #56]	; 0x38
	_dma_set_source_address(DMA_CHANNEL_0, (const void *const)inputctrl_buff);
    8486:	4620      	mov	r0, r4
    8488:	4b5f      	ldr	r3, [pc, #380]	; (8608 <main+0x1c4>)
    848a:	4798      	blx	r3
	_dma_set_destination_address(DMA_CHANNEL_0, (void *)(uint32_t) &(ADC0->DSEQDATA.reg));
    848c:	495f      	ldr	r1, [pc, #380]	; (860c <main+0x1c8>)
    848e:	4b60      	ldr	r3, [pc, #384]	; (8610 <main+0x1cc>)
    8490:	4620      	mov	r0, r4
    8492:	4798      	blx	r3
	_dma_set_data_amount(DMA_CHANNEL_0, SEQ_LENGTH);
    8494:	210a      	movs	r1, #10
    8496:	4620      	mov	r0, r4
    8498:	4b5e      	ldr	r3, [pc, #376]	; (8614 <main+0x1d0>)
    849a:	4798      	blx	r3
	_dma_enable_transaction(DMA_CHANNEL_0, false);
    849c:	4621      	mov	r1, r4
    849e:	4b5e      	ldr	r3, [pc, #376]	; (8618 <main+0x1d4>)
    84a0:	4620      	mov	r0, r4
    84a2:	4798      	blx	r3
	xprintf("\r\n\r\n\r\n---------------------\r\nBOOT-UP\r\n---------------------\r\n\r\n");
    84a4:	4c5d      	ldr	r4, [pc, #372]	; (861c <main+0x1d8>)
    84a6:	485e      	ldr	r0, [pc, #376]	; (8620 <main+0x1dc>)
    84a8:	47a0      	blx	r4
	var_init();
    84aa:	4b5e      	ldr	r3, [pc, #376]	; (8624 <main+0x1e0>)
    84ac:	4798      	blx	r3
	gpio_init();
    84ae:	4b5e      	ldr	r3, [pc, #376]	; (8628 <main+0x1e4>)
    84b0:	4798      	blx	r3
	comms_init();
    84b2:	4b5e      	ldr	r3, [pc, #376]	; (862c <main+0x1e8>)
    84b4:	4798      	blx	r3
	switch_init();
    84b6:	4b5e      	ldr	r3, [pc, #376]	; (8630 <main+0x1ec>)
    84b8:	4798      	blx	r3
	switch_configure();
    84ba:	4b5e      	ldr	r3, [pc, #376]	; (8634 <main+0x1f0>)
    84bc:	4798      	blx	r3
	timer_setup();
    84be:	4b5e      	ldr	r3, [pc, #376]	; (8638 <main+0x1f4>)
    84c0:	4798      	blx	r3
	ADC_init();
    84c2:	4b5e      	ldr	r3, [pc, #376]	; (863c <main+0x1f8>)
    84c4:	4798      	blx	r3
	crypto_init();
    84c6:	4b5e      	ldr	r3, [pc, #376]	; (8640 <main+0x1fc>)
    84c8:	4798      	blx	r3
	uip_init();																									// initialize the IP stack
    84ca:	4b5e      	ldr	r3, [pc, #376]	; (8644 <main+0x200>)
    84cc:	4798      	blx	r3
	address_configure();
    84ce:	4b5e      	ldr	r3, [pc, #376]	; (8648 <main+0x204>)
    84d0:	4798      	blx	r3
	if (((CONFIG *)&settings_buffer)->ID > 0x00000000) {
    84d2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    84d4:	2b00      	cmp	r3, #0
    84d6:	d031      	beq.n	853c <main+0xf8>
		/* Initialize the ring loop topology function */
		ring_init((unsigned char)(((CONFIG *)&settings_buffer)->loop_basestation), (unsigned char *)&mac_raw);
    84d8:	495c      	ldr	r1, [pc, #368]	; (864c <main+0x208>)
    84da:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    84de:	4b5c      	ldr	r3, [pc, #368]	; (8650 <main+0x20c>)
    84e0:	4798      	blx	r3
		xprintf("* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  *\r\n");
		xprintf("* PLEASE ENTER THE 32-BIT DEVICE [ID] BELOW                                                *\r\n");
		xprintf("********************************************************************************************\r\n");
	}
	
	if (((CONFIG *)&settings_buffer)->ID > 0x00000000) {
    84e2:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    84e4:	2900      	cmp	r1, #0
    84e6:	d136      	bne.n	8556 <main+0x112>
			ID_index = 0;
					
			while (1) {
				delay_ms(100);
				
				if (io_read((struct io_descriptor *const)io, (uint8_t *const)&ch, 1)) {
    84e8:	4f3f      	ldr	r7, [pc, #252]	; (85e8 <main+0x1a4>)
    84ea:	46b8      	mov	r8, r7
			xprintf("\r\nEnter new [ID] now: ");
    84ec:	4859      	ldr	r0, [pc, #356]	; (8654 <main+0x210>)
				delay_ms(100);
    84ee:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 86a4 <main+0x260>
			xprintf("\r\nEnter new [ID] now: ");
    84f2:	47a0      	blx	r4
			ID_index = 0;
    84f4:	f04f 0900 	mov.w	r9, #0
				delay_ms(100);
    84f8:	2064      	movs	r0, #100	; 0x64
    84fa:	47d0      	blx	sl
				if (io_read((struct io_descriptor *const)io, (uint8_t *const)&ch, 1)) {
    84fc:	4e56      	ldr	r6, [pc, #344]	; (8658 <main+0x214>)
    84fe:	6838      	ldr	r0, [r7, #0]
    8500:	2201      	movs	r2, #1
    8502:	f10d 0107 	add.w	r1, sp, #7
    8506:	47b0      	blx	r6
    8508:	2800      	cmp	r0, #0
    850a:	d0f5      	beq.n	84f8 <main+0xb4>
					/* If so, then read and get the character pressed */
				
					if ((unsigned char)ch == 10) {
    850c:	f89d 1007 	ldrb.w	r1, [sp, #7]
    8510:	290a      	cmp	r1, #10
    8512:	d0f1      	beq.n	84f8 <main+0xb4>
						continue;
					}
				
					if ((unsigned char)ch == 13) {
    8514:	290d      	cmp	r1, #13
    8516:	d026      	beq.n	8566 <main+0x122>
						break;
					}
				
					if ((unsigned char)ch < '0') {
    8518:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    851c:	2b09      	cmp	r3, #9
    851e:	d8eb      	bhi.n	84f8 <main+0xb4>
				
					if ((unsigned char)ch > '9') {
						continue;
					}
				
					if (ID_index == 8) {
    8520:	f1b9 0f08 	cmp.w	r9, #8
    8524:	d0e8      	beq.n	84f8 <main+0xb4>
						continue;
					}
				
					ID_string[ID_index++] = (unsigned char)ch;
    8526:	ab06      	add	r3, sp, #24
    8528:	f109 0601 	add.w	r6, r9, #1
    852c:	4499      	add	r9, r3
    852e:	b2f6      	uxtb	r6, r6
					xprintf("%c", ch);
    8530:	484a      	ldr	r0, [pc, #296]	; (865c <main+0x218>)
					ID_string[ID_index++] = (unsigned char)ch;
    8532:	f809 1c0c 	strb.w	r1, [r9, #-12]
					xprintf("%c", ch);
    8536:	47a0      	blx	r4
					ID_string[ID_index++] = (unsigned char)ch;
    8538:	46b1      	mov	r9, r6
    853a:	e7dd      	b.n	84f8 <main+0xb4>
		xprintf("********************************************************************************************\r\n");
    853c:	4848      	ldr	r0, [pc, #288]	; (8660 <main+0x21c>)
    853e:	47a0      	blx	r4
		xprintf("* THE MULTI-SENSE DEVICE [ID] HAS NOT BEEN SET. THIS DEFICE WILL NOT FUNCTION OR RUN AS    *\r\n");
    8540:	4848      	ldr	r0, [pc, #288]	; (8664 <main+0x220>)
    8542:	47a0      	blx	r4
		xprintf("* NORMAL UNTIL THE [ID] NUMBER HAS BEEN ENTERED BY THIS TERMINAL FACILITY.                 *\r\n");
    8544:	4848      	ldr	r0, [pc, #288]	; (8668 <main+0x224>)
    8546:	47a0      	blx	r4
		xprintf("* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  *\r\n");
    8548:	4848      	ldr	r0, [pc, #288]	; (866c <main+0x228>)
    854a:	47a0      	blx	r4
		xprintf("* PLEASE ENTER THE 32-BIT DEVICE [ID] BELOW                                                *\r\n");
    854c:	4848      	ldr	r0, [pc, #288]	; (8670 <main+0x22c>)
    854e:	47a0      	blx	r4
		xprintf("********************************************************************************************\r\n");
    8550:	4843      	ldr	r0, [pc, #268]	; (8660 <main+0x21c>)
    8552:	47a0      	blx	r4
    8554:	e7c5      	b.n	84e2 <main+0x9e>
		xprintf("MultiSense [boot-up & init completed ID = %d]\r\n", ((CONFIG *)&settings_buffer)->ID);
    8556:	4847      	ldr	r0, [pc, #284]	; (8674 <main+0x230>)
    8558:	47a0      	blx	r4
		xprintf("- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\r\n");
    855a:	4847      	ldr	r0, [pc, #284]	; (8678 <main+0x234>)
    855c:	47a0      	blx	r4
		}
		while (1);
	}
	
	/* Create, enable and start the system watchdog (4 seconds timeout period) */
	watchdog_init();
    855e:	4b47      	ldr	r3, [pc, #284]	; (867c <main+0x238>)
    8560:	4798      	blx	r3
	
	/* Run the main-loop */
	main_loop();
    8562:	4b47      	ldr	r3, [pc, #284]	; (8680 <main+0x23c>)
    8564:	4798      	blx	r3
			ID_string[ID_index] = 0;
    8566:	ab06      	add	r3, sp, #24
    8568:	4499      	add	r9, r3
			xprintf("ID entered: %s\r\n", ID_string);
    856a:	a903      	add	r1, sp, #12
			ID_string[ID_index] = 0;
    856c:	2300      	movs	r3, #0
			xprintf("ID entered: %s\r\n", ID_string);
    856e:	4845      	ldr	r0, [pc, #276]	; (8684 <main+0x240>)
			ID_string[ID_index] = 0;
    8570:	f809 3c0c 	strb.w	r3, [r9, #-12]
			xprintf("ID entered: %s\r\n", ID_string);
    8574:	47a0      	blx	r4
			xprintf("\r\nIs this correct Y/N?\r\n");
    8576:	4844      	ldr	r0, [pc, #272]	; (8688 <main+0x244>)
						sscanf((char *)ID_string, "%u", &new_id);
    8578:	f8df 912c 	ldr.w	r9, [pc, #300]	; 86a8 <main+0x264>
    857c:	f8df a12c 	ldr.w	sl, [pc, #300]	; 86ac <main+0x268>
						if (EEprom_settings(settings_buffer, SETTING_STRUCTURE_SIZE, 1) != ERR_NONE) {
    8580:	f8df b080 	ldr.w	fp, [pc, #128]	; 8604 <main+0x1c0>
			xprintf("\r\nIs this correct Y/N?\r\n");
    8584:	47a0      	blx	r4
				if (io_read((struct io_descriptor *const)io, (uint8_t *const)&ch, 1)) {
    8586:	2201      	movs	r2, #1
    8588:	f10d 0107 	add.w	r1, sp, #7
    858c:	f8d8 0000 	ldr.w	r0, [r8]
    8590:	47b0      	blx	r6
    8592:	2800      	cmp	r0, #0
    8594:	d0f7      	beq.n	8586 <main+0x142>
					if (((unsigned char)ch == 'y') || ((unsigned char)ch == 'Y')) {
    8596:	f89d 3007 	ldrb.w	r3, [sp, #7]
    859a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    859e:	2b59      	cmp	r3, #89	; 0x59
    85a0:	d118      	bne.n	85d4 <main+0x190>
						sscanf((char *)ID_string, "%u", &new_id);
    85a2:	aa02      	add	r2, sp, #8
    85a4:	4649      	mov	r1, r9
    85a6:	a803      	add	r0, sp, #12
    85a8:	47d0      	blx	sl
						if (!new_id) {
    85aa:	9b02      	ldr	r3, [sp, #8]
    85ac:	b913      	cbnz	r3, 85b4 <main+0x170>
							xprintf("\r\nERROR ID cannot be <ZERO>!!!!!\r\n");
    85ae:	4837      	ldr	r0, [pc, #220]	; (868c <main+0x248>)
    85b0:	47a0      	blx	r4
							break;
    85b2:	e79b      	b.n	84ec <main+0xa8>
						((CONFIG *)&settings_buffer)->ID = new_id;
    85b4:	62eb      	str	r3, [r5, #44]	; 0x2c
						if (EEprom_settings(settings_buffer, SETTING_STRUCTURE_SIZE, 1) != ERR_NONE) {
    85b6:	2201      	movs	r2, #1
    85b8:	2180      	movs	r1, #128	; 0x80
    85ba:	4658      	mov	r0, fp
    85bc:	4b34      	ldr	r3, [pc, #208]	; (8690 <main+0x24c>)
    85be:	4798      	blx	r3
    85c0:	b130      	cbz	r0, 85d0 <main+0x18c>
							xprintf("MultiSense [configuration ERROR WRITING]\r\n");
    85c2:	4834      	ldr	r0, [pc, #208]	; (8694 <main+0x250>)
							xprintf("MultiSense [configuration WRITTEN]\r\n");
    85c4:	47a0      	blx	r4
						xprintf("\r\nRebooting...(please wait)\r\n\r\n");
    85c6:	4834      	ldr	r0, [pc, #208]	; (8698 <main+0x254>)
    85c8:	47a0      	blx	r4
					   _reset_mcu();
    85ca:	4b34      	ldr	r3, [pc, #208]	; (869c <main+0x258>)
    85cc:	4798      	blx	r3
    85ce:	e7da      	b.n	8586 <main+0x142>
							xprintf("MultiSense [configuration WRITTEN]\r\n");
    85d0:	4833      	ldr	r0, [pc, #204]	; (86a0 <main+0x25c>)
    85d2:	e7f7      	b.n	85c4 <main+0x180>
					} else if (((unsigned char)ch == 'n') || ((unsigned char)ch == 'N')) {
    85d4:	2b4e      	cmp	r3, #78	; 0x4e
    85d6:	d1d6      	bne.n	8586 <main+0x142>
    85d8:	e788      	b.n	84ec <main+0xa8>
    85da:	bf00      	nop
    85dc:	000002d1 	.word	0x000002d1
    85e0:	00001abd 	.word	0x00001abd
    85e4:	00001a95 	.word	0x00001a95
    85e8:	20007f08 	.word	0x20007f08
    85ec:	200074d8 	.word	0x200074d8
    85f0:	00007121 	.word	0x00007121
    85f4:	0000707d 	.word	0x0000707d
    85f8:	00001a69 	.word	0x00001a69
    85fc:	43001c00 	.word	0x43001c00
    8600:	20000000 	.word	0x20000000
    8604:	20007f14 	.word	0x20007f14
    8608:	00002535 	.word	0x00002535
    860c:	43001c34 	.word	0x43001c34
    8610:	00002521 	.word	0x00002521
    8614:	00002549 	.word	0x00002549
    8618:	00002599 	.word	0x00002599
    861c:	00000395 	.word	0x00000395
    8620:	0000de24 	.word	0x0000de24
    8624:	00006e3d 	.word	0x00006e3d
    8628:	00006c29 	.word	0x00006c29
    862c:	0000633d 	.word	0x0000633d
    8630:	000063c1 	.word	0x000063c1
    8634:	000063e9 	.word	0x000063e9
    8638:	000062f5 	.word	0x000062f5
    863c:	0000632d 	.word	0x0000632d
    8640:	00006399 	.word	0x00006399
    8644:	000090fd 	.word	0x000090fd
    8648:	000069f5 	.word	0x000069f5
    864c:	20007f94 	.word	0x20007f94
    8650:	00008c19 	.word	0x00008c19
    8654:	0000e0e7 	.word	0x0000e0e7
    8658:	00001545 	.word	0x00001545
    865c:	0000da86 	.word	0x0000da86
    8660:	0000de64 	.word	0x0000de64
    8664:	0000dec3 	.word	0x0000dec3
    8668:	0000df22 	.word	0x0000df22
    866c:	0000df81 	.word	0x0000df81
    8670:	0000dfe0 	.word	0x0000dfe0
    8674:	0000e03f 	.word	0x0000e03f
    8678:	0000e06f 	.word	0x0000e06f
    867c:	00006df1 	.word	0x00006df1
    8680:	00007769 	.word	0x00007769
    8684:	0000e0fe 	.word	0x0000e0fe
    8688:	0000e10f 	.word	0x0000e10f
    868c:	0000e12b 	.word	0x0000e12b
    8690:	0000ac21 	.word	0x0000ac21
    8694:	0000d20b 	.word	0x0000d20b
    8698:	0000e14e 	.word	0x0000e14e
    869c:	00002359 	.word	0x00002359
    86a0:	0000d236 	.word	0x0000d236
    86a4:	0000124d 	.word	0x0000124d
    86a8:	0000e128 	.word	0x0000e128
    86ac:	0000add1 	.word	0x0000add1

000086b0 <nv_init>:

/**
 * \brief Initialize non-volatile storage
 */
void nv_init(void *descr)
{
    86b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	flash = (struct flash_descriptor *)descr;
    86b4:	4f12      	ldr	r7, [pc, #72]	; (8700 <nv_init+0x50>)

	/* Storage must start at row start */
	ASSERT((CONF_STORAGE_MEMORY_START % (flash_get_page_size(flash) * 4)) == 0);
    86b6:	4e13      	ldr	r6, [pc, #76]	; (8704 <nv_init+0x54>)
	flash = (struct flash_descriptor *)descr;
    86b8:	6038      	str	r0, [r7, #0]
	ASSERT((CONF_STORAGE_MEMORY_START % (flash_get_page_size(flash) * 4)) == 0);
    86ba:	47b0      	blx	r6
    86bc:	0080      	lsls	r0, r0, #2
    86be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    86c2:	fbb3 f3f0 	udiv	r3, r3, r0
    86c6:	4358      	muls	r0, r3
    86c8:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
    86cc:	4c0e      	ldr	r4, [pc, #56]	; (8708 <nv_init+0x58>)
    86ce:	4d0f      	ldr	r5, [pc, #60]	; (870c <nv_init+0x5c>)
    86d0:	4258      	negs	r0, r3
    86d2:	4158      	adcs	r0, r3
    86d4:	4621      	mov	r1, r4
    86d6:	2235      	movs	r2, #53	; 0x35
    86d8:	47a8      	blx	r5
	/* Sector must be of integer number of rows */
	ASSERT((CONF_SECTOR_SIZE % ((flash_get_page_size(flash) * 4)) == 0));
    86da:	6838      	ldr	r0, [r7, #0]
    86dc:	47b0      	blx	r6
    86de:	0080      	lsls	r0, r0, #2
    86e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    86e4:	fbb3 f3f0 	udiv	r3, r3, r0
    86e8:	4358      	muls	r0, r3
    86ea:	4621      	mov	r1, r4
    86ec:	f5a0 5480 	sub.w	r4, r0, #4096	; 0x1000
    86f0:	4260      	negs	r0, r4
    86f2:	4160      	adcs	r0, r4
    86f4:	462b      	mov	r3, r5
    86f6:	2237      	movs	r2, #55	; 0x37
}
    86f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	ASSERT((CONF_SECTOR_SIZE % ((flash_get_page_size(flash) * 4)) == 0));
    86fc:	4718      	bx	r3
    86fe:	bf00      	nop
    8700:	2000723c 	.word	0x2000723c
    8704:	000014ed 	.word	0x000014ed
    8708:	0000e16e 	.word	0x0000e16e
    870c:	00002035 	.word	0x00002035

00008710 <nv_write>:
/**
 * \brief Write data to non-volatile storage
 */
void nv_write(const uint8_t sector, const uint16_t offset, const uint8_t *const data, const uint16_t size)
{
	uint32_t address = CONF_STORAGE_MEMORY_START + sector * CONF_SECTOR_SIZE + offset;
    8710:	3010      	adds	r0, #16
{
    8712:	b570      	push	{r4, r5, r6, lr}
	uint32_t address = CONF_STORAGE_MEMORY_START + sector * CONF_SECTOR_SIZE + offset;
    8714:	eb01 3400 	add.w	r4, r1, r0, lsl #12

	/* Write access must start and end within the storage and must not write
	   more than a sector. */
	ASSERT((address <= NV_MEMORY_END) && ((address + size) <= (NV_MEMORY_END + 1))
    8718:	f5b4 3f90 	cmp.w	r4, #73728	; 0x12000
{
    871c:	4616      	mov	r6, r2
    871e:	461d      	mov	r5, r3
	ASSERT((address <= NV_MEMORY_END) && ((address + size) <= (NV_MEMORY_END + 1))
    8720:	da17      	bge.n	8752 <nv_write+0x42>
    8722:	4423      	add	r3, r4
    8724:	f5b3 3f90 	cmp.w	r3, #73728	; 0x12000
    8728:	d813      	bhi.n	8752 <nv_write+0x42>
    872a:	1868      	adds	r0, r5, r1
    872c:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    8730:	bfcc      	ite	gt
    8732:	2000      	movgt	r0, #0
    8734:	2001      	movle	r0, #1
    8736:	2244      	movs	r2, #68	; 0x44
    8738:	4907      	ldr	r1, [pc, #28]	; (8758 <nv_write+0x48>)
    873a:	4b08      	ldr	r3, [pc, #32]	; (875c <nv_write+0x4c>)
    873c:	4798      	blx	r3
	       && ((offset + size) <= CONF_SECTOR_SIZE));

	flash_append(flash, address, (uint8_t *)data, size);
    873e:	4621      	mov	r1, r4
    8740:	4807      	ldr	r0, [pc, #28]	; (8760 <nv_write+0x50>)
    8742:	4c08      	ldr	r4, [pc, #32]	; (8764 <nv_write+0x54>)
    8744:	6800      	ldr	r0, [r0, #0]
    8746:	462b      	mov	r3, r5
    8748:	4632      	mov	r2, r6
    874a:	46a4      	mov	ip, r4
}
    874c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	flash_append(flash, address, (uint8_t *)data, size);
    8750:	4760      	bx	ip
	ASSERT((address <= NV_MEMORY_END) && ((address + size) <= (NV_MEMORY_END + 1))
    8752:	2000      	movs	r0, #0
    8754:	e7ef      	b.n	8736 <nv_write+0x26>
    8756:	bf00      	nop
    8758:	0000e16e 	.word	0x0000e16e
    875c:	00002035 	.word	0x00002035
    8760:	2000723c 	.word	0x2000723c
    8764:	000013f1 	.word	0x000013f1

00008768 <nv_read>:
/**
 * \brief Read data from non-volatile storage
 */
void nv_read(const uint8_t sector, const uint16_t offset, uint8_t *const data, const uint16_t size)
{
	uint32_t address = CONF_STORAGE_MEMORY_START + sector * CONF_SECTOR_SIZE + offset;
    8768:	3010      	adds	r0, #16
{
    876a:	b570      	push	{r4, r5, r6, lr}
	uint32_t address = CONF_STORAGE_MEMORY_START + sector * CONF_SECTOR_SIZE + offset;
    876c:	eb01 3400 	add.w	r4, r1, r0, lsl #12

	/* Read access must start and end within the storage and must not read more
	   than a sector. */
	ASSERT((address <= NV_MEMORY_END) && ((address + size) <= (NV_MEMORY_END + 1))
    8770:	f5b4 3f90 	cmp.w	r4, #73728	; 0x12000
{
    8774:	4616      	mov	r6, r2
    8776:	461d      	mov	r5, r3
	ASSERT((address <= NV_MEMORY_END) && ((address + size) <= (NV_MEMORY_END + 1))
    8778:	da17      	bge.n	87aa <nv_read+0x42>
    877a:	4423      	add	r3, r4
    877c:	f5b3 3f90 	cmp.w	r3, #73728	; 0x12000
    8780:	d813      	bhi.n	87aa <nv_read+0x42>
    8782:	1868      	adds	r0, r5, r1
    8784:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    8788:	bfcc      	ite	gt
    878a:	2000      	movgt	r0, #0
    878c:	2001      	movle	r0, #1
    878e:	2253      	movs	r2, #83	; 0x53
    8790:	4907      	ldr	r1, [pc, #28]	; (87b0 <nv_read+0x48>)
    8792:	4b08      	ldr	r3, [pc, #32]	; (87b4 <nv_read+0x4c>)
    8794:	4798      	blx	r3
	       && ((offset + size) <= CONF_SECTOR_SIZE));

	flash_read(flash, address, data, size);
    8796:	4621      	mov	r1, r4
    8798:	4807      	ldr	r0, [pc, #28]	; (87b8 <nv_read+0x50>)
    879a:	4c08      	ldr	r4, [pc, #32]	; (87bc <nv_read+0x54>)
    879c:	6800      	ldr	r0, [r0, #0]
    879e:	462b      	mov	r3, r5
    87a0:	4632      	mov	r2, r6
    87a2:	46a4      	mov	ip, r4
}
    87a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	flash_read(flash, address, data, size);
    87a8:	4760      	bx	ip
	ASSERT((address <= NV_MEMORY_END) && ((address + size) <= (NV_MEMORY_END + 1))
    87aa:	2000      	movs	r0, #0
    87ac:	e7ef      	b.n	878e <nv_read+0x26>
    87ae:	bf00      	nop
    87b0:	0000e16e 	.word	0x0000e16e
    87b4:	00002035 	.word	0x00002035
    87b8:	2000723c 	.word	0x2000723c
    87bc:	000012f9 	.word	0x000012f9

000087c0 <nv_erase_sector>:
/**
 * \brief Erase a sector
 */
void nv_erase_sector(uint8_t sector)
{
	uint32_t address = CONF_STORAGE_MEMORY_START + sector * CONF_SECTOR_SIZE;
    87c0:	3010      	adds	r0, #16
{
    87c2:	b570      	push	{r4, r5, r6, lr}
	uint32_t address = CONF_STORAGE_MEMORY_START + sector * CONF_SECTOR_SIZE;
    87c4:	0304      	lsls	r4, r0, #12

	ASSERT(address <= NV_MEMORY_END);
    87c6:	f5b4 3f90 	cmp.w	r4, #73728	; 0x12000
    87ca:	f04f 025f 	mov.w	r2, #95	; 0x5f
    87ce:	490a      	ldr	r1, [pc, #40]	; (87f8 <nv_erase_sector+0x38>)
    87d0:	4b0a      	ldr	r3, [pc, #40]	; (87fc <nv_erase_sector+0x3c>)
    87d2:	bf2c      	ite	cs
    87d4:	2000      	movcs	r0, #0
    87d6:	2001      	movcc	r0, #1
    87d8:	4798      	blx	r3

	flash_erase(flash, address, CONF_SECTOR_SIZE / flash_get_page_size(flash));
    87da:	4b09      	ldr	r3, [pc, #36]	; (8800 <nv_erase_sector+0x40>)
    87dc:	681d      	ldr	r5, [r3, #0]
    87de:	4b09      	ldr	r3, [pc, #36]	; (8804 <nv_erase_sector+0x44>)
    87e0:	4628      	mov	r0, r5
    87e2:	4798      	blx	r3
    87e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    87e8:	4621      	mov	r1, r4
    87ea:	fbb2 f2f0 	udiv	r2, r2, r0
    87ee:	4b06      	ldr	r3, [pc, #24]	; (8808 <nv_erase_sector+0x48>)
    87f0:	4628      	mov	r0, r5
}
    87f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	flash_erase(flash, address, CONF_SECTOR_SIZE / flash_get_page_size(flash));
    87f6:	4718      	bx	r3
    87f8:	0000e16e 	.word	0x0000e16e
    87fc:	00002035 	.word	0x00002035
    8800:	2000723c 	.word	0x2000723c
    8804:	000014ed 	.word	0x000014ed
    8808:	00001479 	.word	0x00001479

0000880c <nv_is_equal>:

/**
 * \brief Compare given data and data stored in non-volatile storage
 */
bool nv_is_equal(const uint8_t sector, const uint16_t offset, const uint8_t *const data, const uint16_t size)
{
    880c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t  tmp[64];
	uint16_t pos     = 0;
	uint32_t address = CONF_STORAGE_MEMORY_START + sector * CONF_SECTOR_SIZE + offset;
    8810:	3010      	adds	r0, #16
    8812:	eb01 3700 	add.w	r7, r1, r0, lsl #12

	/* Read access must start and end within the storage and must not read more
	   than a sector. There must be at least one byte to compare to. */
	ASSERT((address <= NV_MEMORY_END) && ((address + size) <= (NV_MEMORY_END + 1))
    8816:	f5b7 3f90 	cmp.w	r7, #73728	; 0x12000
{
    881a:	b091      	sub	sp, #68	; 0x44
    881c:	4690      	mov	r8, r2
    881e:	461e      	mov	r6, r3
	ASSERT((address <= NV_MEMORY_END) && ((address + size) <= (NV_MEMORY_END + 1))
    8820:	da1b      	bge.n	885a <nv_is_equal+0x4e>
    8822:	443b      	add	r3, r7
    8824:	f5b3 3f90 	cmp.w	r3, #73728	; 0x12000
    8828:	d817      	bhi.n	885a <nv_is_equal+0x4e>
    882a:	4431      	add	r1, r6
    882c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    8830:	dc13      	bgt.n	885a <nv_is_equal+0x4e>
    8832:	1c30      	adds	r0, r6, #0
    8834:	bf18      	it	ne
    8836:	2001      	movne	r0, #1
    8838:	2270      	movs	r2, #112	; 0x70
    883a:	4914      	ldr	r1, [pc, #80]	; (888c <nv_is_equal+0x80>)
    883c:	4b14      	ldr	r3, [pc, #80]	; (8890 <nv_is_equal+0x84>)
	       && ((offset + size) <= CONF_SECTOR_SIZE) && size);

	while (pos != size) {
		uint8_t cur_size = min(64, size - pos);

		flash_read(flash, address + pos, tmp, cur_size);
    883e:	f8df 9054 	ldr.w	r9, [pc, #84]	; 8894 <nv_is_equal+0x88>
    8842:	f8df a054 	ldr.w	sl, [pc, #84]	; 8898 <nv_is_equal+0x8c>
		if (memcmp(data + pos, tmp, cur_size)) {
    8846:	f8df b054 	ldr.w	fp, [pc, #84]	; 889c <nv_is_equal+0x90>
	ASSERT((address <= NV_MEMORY_END) && ((address + size) <= (NV_MEMORY_END + 1))
    884a:	4798      	blx	r3
	uint16_t pos     = 0;
    884c:	2500      	movs	r5, #0
	while (pos != size) {
    884e:	42b5      	cmp	r5, r6
    8850:	d105      	bne.n	885e <nv_is_equal+0x52>
		}

		pos += cur_size;
	}

	return true;
    8852:	2001      	movs	r0, #1
}
    8854:	b011      	add	sp, #68	; 0x44
    8856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ASSERT((address <= NV_MEMORY_END) && ((address + size) <= (NV_MEMORY_END + 1))
    885a:	2000      	movs	r0, #0
    885c:	e7ec      	b.n	8838 <nv_is_equal+0x2c>
		uint8_t cur_size = min(64, size - pos);
    885e:	1b74      	subs	r4, r6, r5
    8860:	2c40      	cmp	r4, #64	; 0x40
    8862:	bfa8      	it	ge
    8864:	2440      	movge	r4, #64	; 0x40
    8866:	b2e4      	uxtb	r4, r4
		flash_read(flash, address + pos, tmp, cur_size);
    8868:	466a      	mov	r2, sp
    886a:	1979      	adds	r1, r7, r5
    886c:	4623      	mov	r3, r4
    886e:	f8d9 0000 	ldr.w	r0, [r9]
    8872:	47d0      	blx	sl
		if (memcmp(data + pos, tmp, cur_size)) {
    8874:	4622      	mov	r2, r4
    8876:	4669      	mov	r1, sp
    8878:	eb08 0005 	add.w	r0, r8, r5
    887c:	47d8      	blx	fp
    887e:	b910      	cbnz	r0, 8886 <nv_is_equal+0x7a>
		pos += cur_size;
    8880:	4425      	add	r5, r4
    8882:	b2ad      	uxth	r5, r5
    8884:	e7e3      	b.n	884e <nv_is_equal+0x42>
			return false;
    8886:	2000      	movs	r0, #0
    8888:	e7e4      	b.n	8854 <nv_is_equal+0x48>
    888a:	bf00      	nop
    888c:	0000e16e 	.word	0x0000e16e
    8890:	00002035 	.word	0x00002035
    8894:	2000723c 	.word	0x2000723c
    8898:	000012f9 	.word	0x000012f9
    889c:	0000ad59 	.word	0x0000ad59

000088a0 <nv_is_empty>:

/**
 * \brief Check if given area is empty
 */
bool nv_is_empty(const uint8_t sector, const uint16_t offset, const uint16_t size)
{
    88a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint8_t  tmp[64];
	uint16_t pos     = 0;
	uint32_t address = CONF_STORAGE_MEMORY_START + sector * CONF_SECTOR_SIZE + offset;
    88a4:	3010      	adds	r0, #16
    88a6:	eb01 3700 	add.w	r7, r1, r0, lsl #12

	/* Read access must start and end within the storage and must not read more
	   than a sector. There must be at least one byte to compare to. */
	ASSERT((address <= NV_MEMORY_END) && ((address + size) <= (NV_MEMORY_END + 1))
    88aa:	f5b7 3f90 	cmp.w	r7, #73728	; 0x12000
{
    88ae:	b091      	sub	sp, #68	; 0x44
    88b0:	4615      	mov	r5, r2
	ASSERT((address <= NV_MEMORY_END) && ((address + size) <= (NV_MEMORY_END + 1))
    88b2:	da1e      	bge.n	88f2 <nv_is_empty+0x52>
    88b4:	19d3      	adds	r3, r2, r7
    88b6:	f5b3 3f90 	cmp.w	r3, #73728	; 0x12000
    88ba:	d81a      	bhi.n	88f2 <nv_is_empty+0x52>
    88bc:	4411      	add	r1, r2
    88be:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    88c2:	dc16      	bgt.n	88f2 <nv_is_empty+0x52>
    88c4:	1c10      	adds	r0, r2, #0
    88c6:	bf18      	it	ne
    88c8:	2001      	movne	r0, #1
    88ca:	228c      	movs	r2, #140	; 0x8c
    88cc:	4916      	ldr	r1, [pc, #88]	; (8928 <nv_is_empty+0x88>)
    88ce:	4b17      	ldr	r3, [pc, #92]	; (892c <nv_is_empty+0x8c>)

	while (pos != size) {
		uint8_t cur_size = min(64, size - pos);
		uint8_t i        = 0;

		flash_read(flash, address + pos, tmp, cur_size);
    88d0:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8934 <nv_is_empty+0x94>
    88d4:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8938 <nv_is_empty+0x98>
	ASSERT((address <= NV_MEMORY_END) && ((address + size) <= (NV_MEMORY_END + 1))
    88d8:	4798      	blx	r3
	memset(tmp, 0xFF, 64);
    88da:	2240      	movs	r2, #64	; 0x40
    88dc:	21ff      	movs	r1, #255	; 0xff
    88de:	4668      	mov	r0, sp
    88e0:	4b13      	ldr	r3, [pc, #76]	; (8930 <nv_is_empty+0x90>)
    88e2:	4798      	blx	r3
	uint16_t pos     = 0;
    88e4:	2600      	movs	r6, #0
	while (pos != size) {
    88e6:	42ae      	cmp	r6, r5
    88e8:	d105      	bne.n	88f6 <nv_is_empty+0x56>
		}

		pos += cur_size;
	}

	return true;
    88ea:	2001      	movs	r0, #1
}
    88ec:	b011      	add	sp, #68	; 0x44
    88ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ASSERT((address <= NV_MEMORY_END) && ((address + size) <= (NV_MEMORY_END + 1))
    88f2:	2000      	movs	r0, #0
    88f4:	e7e9      	b.n	88ca <nv_is_empty+0x2a>
		uint8_t cur_size = min(64, size - pos);
    88f6:	1bab      	subs	r3, r5, r6
    88f8:	2b40      	cmp	r3, #64	; 0x40
    88fa:	bfa8      	it	ge
    88fc:	2340      	movge	r3, #64	; 0x40
		flash_read(flash, address + pos, tmp, cur_size);
    88fe:	b2dc      	uxtb	r4, r3
    8900:	4623      	mov	r3, r4
    8902:	466a      	mov	r2, sp
    8904:	19f1      	adds	r1, r6, r7
    8906:	f8d8 0000 	ldr.w	r0, [r8]
    890a:	47c8      	blx	r9
    890c:	2300      	movs	r3, #0
			if (tmp[i] != 0xFF) {
    890e:	f81d 2003 	ldrb.w	r2, [sp, r3]
    8912:	2aff      	cmp	r2, #255	; 0xff
    8914:	d105      	bne.n	8922 <nv_is_empty+0x82>
    8916:	3301      	adds	r3, #1
		for (; i < 64; i++) {
    8918:	2b40      	cmp	r3, #64	; 0x40
    891a:	d1f8      	bne.n	890e <nv_is_empty+0x6e>
		pos += cur_size;
    891c:	1933      	adds	r3, r6, r4
    891e:	b29e      	uxth	r6, r3
    8920:	e7e1      	b.n	88e6 <nv_is_empty+0x46>
				return false;
    8922:	2000      	movs	r0, #0
    8924:	e7e2      	b.n	88ec <nv_is_empty+0x4c>
    8926:	bf00      	nop
    8928:	0000e16e 	.word	0x0000e16e
    892c:	00002035 	.word	0x00002035
    8930:	0000adc1 	.word	0x0000adc1
    8934:	2000723c 	.word	0x2000723c
    8938:	000012f9 	.word	0x000012f9

0000893c <nv_align_next_access_address>:
/**
 * \brief Align current point of write to actual based on type of previous write
 *        access
 */
uint16_t nv_align_next_access_address(const uint16_t address, const enum nv_alignment_type type)
{
    893c:	b510      	push	{r4, lr}
    893e:	4604      	mov	r4, r0
	switch (type) {
    8940:	b129      	cbz	r1, 894e <nv_align_next_access_address+0x12>
    8942:	2901      	cmp	r1, #1
    8944:	d105      	bne.n	8952 <nv_align_next_access_address+0x16>
	case SECTOR_HEADER_ALIGNMENT:
		return address;

	case BLOCK_WITH_DATA_ALIGNMENT:
		return (address + 127) & 0xFF80;
    8946:	347f      	adds	r4, #127	; 0x7f
    8948:	f024 047f 	bic.w	r4, r4, #127	; 0x7f
    894c:	b2a4      	uxth	r4, r4

	default:
		ASSERT(false);
		return address;
	}
}
    894e:	4620      	mov	r0, r4
    8950:	bd10      	pop	{r4, pc}
		ASSERT(false);
    8952:	22af      	movs	r2, #175	; 0xaf
    8954:	4902      	ldr	r1, [pc, #8]	; (8960 <nv_align_next_access_address+0x24>)
    8956:	4b03      	ldr	r3, [pc, #12]	; (8964 <nv_align_next_access_address+0x28>)
    8958:	2000      	movs	r0, #0
    895a:	4798      	blx	r3
		return address;
    895c:	e7f7      	b.n	894e <nv_align_next_access_address+0x12>
    895e:	bf00      	nop
    8960:	0000e16e 	.word	0x0000e16e
    8964:	00002035 	.word	0x00002035

00008968 <find_item>:
 */
static struct nv_item *find_item(const uint16_t id)
{
	uint16_t i = 0;

	for (; i < mem.items_amount; i++) {
    8968:	4b0a      	ldr	r3, [pc, #40]	; (8994 <find_item+0x2c>)
{
    896a:	b530      	push	{r4, r5, lr}
	for (; i < mem.items_amount; i++) {
    896c:	8d5c      	ldrh	r4, [r3, #42]	; 0x2a
    896e:	2200      	movs	r2, #0
    8970:	b291      	uxth	r1, r2
    8972:	428c      	cmp	r4, r1
    8974:	d801      	bhi.n	897a <find_item+0x12>
		if (mem.items[i].id == id) {
			return &mem.items[i];
		}
	}
	return NULL;
    8976:	2000      	movs	r0, #0
}
    8978:	bd30      	pop	{r4, r5, pc}
    897a:	1c51      	adds	r1, r2, #1
		if (mem.items[i].id == id) {
    897c:	eb03 0581 	add.w	r5, r3, r1, lsl #2
    8980:	f835 5c02 	ldrh.w	r5, [r5, #-2]
    8984:	4285      	cmp	r5, r0
    8986:	d103      	bne.n	8990 <find_item+0x28>
			return &mem.items[i];
    8988:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    898c:	3002      	adds	r0, #2
    898e:	bd30      	pop	{r4, r5, pc}
    8990:	460a      	mov	r2, r1
    8992:	e7ed      	b.n	8970 <find_item+0x8>
    8994:	20007240 	.word	0x20007240

00008998 <calculate_block_header_checksum>:
 * \param[in] header The pointer to block header to calculate checksum of
 *
 * \return Checksum of a block header
 */
static uint16_t calculate_block_header_checksum(struct block_header *header)
{
    8998:	1c41      	adds	r1, r0, #1
    899a:	f100 020b 	add.w	r2, r0, #11
	uint8_t *tmp = (uint8_t *)header + sizeof(header->active);
	uint16_t crc = 0xFFFF;
    899e:	f64f 70ff 	movw	r0, #65535	; 0xffff
	uint8_t  i   = 0;

	for (; i < sizeof(struct block_header) - sizeof(header->active) - sizeof(header->checksum); i++) {
		uint8_t value;

		value = (uint8_t)((crc >> 8) ^ tmp[i]);
    89a2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    89a6:	ea83 2310 	eor.w	r3, r3, r0, lsr #8
		value = value ^ (value >> 4);
    89aa:	ea83 1313 	eor.w	r3, r3, r3, lsr #4
		crc   = (crc << 8) ^ ((uint16_t)value << 12) ^ ((uint16_t)value << 5) ^ (uint16_t)value;
    89ae:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    89b2:	ea80 3003 	eor.w	r0, r0, r3, lsl #12
    89b6:	ea80 1043 	eor.w	r0, r0, r3, lsl #5
	for (; i < sizeof(struct block_header) - sizeof(header->active) - sizeof(header->checksum); i++) {
    89ba:	428a      	cmp	r2, r1
		crc   = (crc << 8) ^ ((uint16_t)value << 12) ^ ((uint16_t)value << 5) ^ (uint16_t)value;
    89bc:	b280      	uxth	r0, r0
	for (; i < sizeof(struct block_header) - sizeof(header->active) - sizeof(header->checksum); i++) {
    89be:	d1f0      	bne.n	89a2 <calculate_block_header_checksum+0xa>
	}
	return crc;
}
    89c0:	4770      	bx	lr
	...

000089c4 <write_and_verify>:
{
    89c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    89c8:	4604      	mov	r4, r0
	nv_write(sector, offset, data, size);
    89ca:	f8df 8020 	ldr.w	r8, [pc, #32]	; 89ec <write_and_verify+0x28>
{
    89ce:	460d      	mov	r5, r1
    89d0:	4616      	mov	r6, r2
    89d2:	461f      	mov	r7, r3
	nv_write(sector, offset, data, size);
    89d4:	47c0      	blx	r8
	if (!nv_is_equal(sector, offset, data, size)) {
    89d6:	4620      	mov	r0, r4
    89d8:	4c03      	ldr	r4, [pc, #12]	; (89e8 <write_and_verify+0x24>)
    89da:	463b      	mov	r3, r7
    89dc:	4632      	mov	r2, r6
    89de:	4629      	mov	r1, r5
    89e0:	46a4      	mov	ip, r4
}
    89e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	if (!nv_is_equal(sector, offset, data, size)) {
    89e6:	4760      	bx	ip
    89e8:	0000880d 	.word	0x0000880d
    89ec:	00008711 	.word	0x00008711

000089f0 <create_sector>:
{
    89f0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    89f4:	4688      	mov	r8, r1
    89f6:	4617      	mov	r7, r2
	uint8_t              active = 0;
    89f8:	2100      	movs	r1, #0
	if (!nv_is_empty(sector, 0, CONF_SECTOR_SIZE)) {
    89fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    89fe:	4c21      	ldr	r4, [pc, #132]	; (8a84 <create_sector+0x94>)
	uint8_t              active = 0;
    8a00:	f88d 1003 	strb.w	r1, [sp, #3]
{
    8a04:	4605      	mov	r5, r0
	if (!nv_is_empty(sector, 0, CONF_SECTOR_SIZE)) {
    8a06:	47a0      	blx	r4
    8a08:	4606      	mov	r6, r0
    8a0a:	b1d8      	cbz	r0, 8a44 <create_sector+0x54>
	memcpy(header.signature, SECTOR_SIGNATURE, 7);
    8a0c:	4b1e      	ldr	r3, [pc, #120]	; (8a88 <create_sector+0x98>)
	if (!write_and_verify(sector, 0, (uint8_t *)&header, sizeof(struct sector_header))) {
    8a0e:	4e1f      	ldr	r6, [pc, #124]	; (8a8c <create_sector+0x9c>)
	memcpy(header.signature, SECTOR_SIGNATURE, 7);
    8a10:	681a      	ldr	r2, [r3, #0]
    8a12:	f8cd 2009 	str.w	r2, [sp, #9]
    8a16:	889a      	ldrh	r2, [r3, #4]
    8a18:	799b      	ldrb	r3, [r3, #6]
    8a1a:	f88d 300f 	strb.w	r3, [sp, #15]
	header.active = 0xFF;
    8a1e:	23ff      	movs	r3, #255	; 0xff
	memcpy(header.signature, SECTOR_SIGNATURE, 7);
    8a20:	f8ad 200d 	strh.w	r2, [sp, #13]
	header.active = 0xFF;
    8a24:	f88d 3004 	strb.w	r3, [sp, #4]
	if (!write_and_verify(sector, 0, (uint8_t *)&header, sizeof(struct sector_header))) {
    8a28:	aa01      	add	r2, sp, #4
    8a2a:	230c      	movs	r3, #12
    8a2c:	2100      	movs	r1, #0
    8a2e:	4628      	mov	r0, r5
	header.number = number;
    8a30:	f8cd 8005 	str.w	r8, [sp, #5]
	if (!write_and_verify(sector, 0, (uint8_t *)&header, sizeof(struct sector_header))) {
    8a34:	47b0      	blx	r6
    8a36:	4604      	mov	r4, r0
    8a38:	b978      	cbnz	r0, 8a5a <create_sector+0x6a>
			return false;
    8a3a:	2400      	movs	r4, #0
}
    8a3c:	4620      	mov	r0, r4
    8a3e:	b004      	add	sp, #16
    8a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nv_erase_sector(sector);
    8a44:	4628      	mov	r0, r5
    8a46:	4b12      	ldr	r3, [pc, #72]	; (8a90 <create_sector+0xa0>)
    8a48:	4798      	blx	r3
		if (!nv_is_empty(sector, 0, CONF_SECTOR_SIZE)) {
    8a4a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    8a4e:	4631      	mov	r1, r6
    8a50:	4628      	mov	r0, r5
    8a52:	47a0      	blx	r4
    8a54:	2800      	cmp	r0, #0
    8a56:	d1d9      	bne.n	8a0c <create_sector+0x1c>
    8a58:	e7ef      	b.n	8a3a <create_sector+0x4a>
	if (activate) {
    8a5a:	2f00      	cmp	r7, #0
    8a5c:	d0ee      	beq.n	8a3c <create_sector+0x4c>
		if (!write_and_verify(sector, 0, &active, sizeof(active))) {
    8a5e:	2301      	movs	r3, #1
    8a60:	f10d 0203 	add.w	r2, sp, #3
    8a64:	2100      	movs	r1, #0
    8a66:	4628      	mov	r0, r5
    8a68:	47b0      	blx	r6
    8a6a:	4604      	mov	r4, r0
    8a6c:	2800      	cmp	r0, #0
    8a6e:	d0e4      	beq.n	8a3a <create_sector+0x4a>
		mem.pow           = sizeof(struct sector_header);
    8a70:	4e08      	ldr	r6, [pc, #32]	; (8a94 <create_sector+0xa4>)
		mem.pow           = nv_align_next_access_address(mem.pow, SECTOR_HEADER_ALIGNMENT);
    8a72:	4b09      	ldr	r3, [pc, #36]	; (8a98 <create_sector+0xa8>)
		mem.pow           = sizeof(struct sector_header);
    8a74:	200c      	movs	r0, #12
		mem.pow           = nv_align_next_access_address(mem.pow, SECTOR_HEADER_ALIGNMENT);
    8a76:	2100      	movs	r1, #0
		mem.pow           = sizeof(struct sector_header);
    8a78:	8030      	strh	r0, [r6, #0]
		mem.pow           = nv_align_next_access_address(mem.pow, SECTOR_HEADER_ALIGNMENT);
    8a7a:	4798      	blx	r3
		mem.active_sector = sector;
    8a7c:	f886 502c 	strb.w	r5, [r6, #44]	; 0x2c
		mem.pow           = nv_align_next_access_address(mem.pow, SECTOR_HEADER_ALIGNMENT);
    8a80:	8030      	strh	r0, [r6, #0]
    8a82:	e7db      	b.n	8a3c <create_sector+0x4c>
    8a84:	000088a1 	.word	0x000088a1
    8a88:	0000e19e 	.word	0x0000e19e
    8a8c:	000089c5 	.word	0x000089c5
    8a90:	000087c1 	.word	0x000087c1
    8a94:	20007240 	.word	0x20007240
    8a98:	0000893d 	.word	0x0000893d

00008a9c <nv_storage_init>:
{
    8a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		nv_read(sector, 0, (uint8_t *)&header, sizeof(struct sector_header));
    8aa0:	4f4c      	ldr	r7, [pc, #304]	; (8bd4 <nv_storage_init+0x138>)
		if ((header.active == 0) && (memcmp(header.signature, SECTOR_SIGNATURE, 7) == 0)) {
    8aa2:	f8df a154 	ldr.w	sl, [pc, #340]	; 8bf8 <nv_storage_init+0x15c>
{
    8aa6:	2500      	movs	r5, #0
    8aa8:	b089      	sub	sp, #36	; 0x24
	uint32_t             last_sector_number = 0;
    8aaa:	462c      	mov	r4, r5
	uint8_t              sector = 0, last_sector = 0xFF;
    8aac:	26ff      	movs	r6, #255	; 0xff
    8aae:	46b9      	mov	r9, r7
    8ab0:	fa5f f885 	uxtb.w	r8, r5
		nv_read(sector, 0, (uint8_t *)&header, sizeof(struct sector_header));
    8ab4:	230c      	movs	r3, #12
    8ab6:	aa01      	add	r2, sp, #4
    8ab8:	2100      	movs	r1, #0
    8aba:	4640      	mov	r0, r8
    8abc:	47b8      	blx	r7
		if ((header.active == 0) && (memcmp(header.signature, SECTOR_SIGNATURE, 7) == 0)) {
    8abe:	f89d 3004 	ldrb.w	r3, [sp, #4]
    8ac2:	b963      	cbnz	r3, 8ade <nv_storage_init+0x42>
    8ac4:	2207      	movs	r2, #7
    8ac6:	4651      	mov	r1, sl
    8ac8:	f10d 0009 	add.w	r0, sp, #9
    8acc:	4b42      	ldr	r3, [pc, #264]	; (8bd8 <nv_storage_init+0x13c>)
    8ace:	4798      	blx	r3
    8ad0:	b928      	cbnz	r0, 8ade <nv_storage_init+0x42>
			if (header.number >= last_sector_number) {
    8ad2:	f8dd 3005 	ldr.w	r3, [sp, #5]
    8ad6:	42a3      	cmp	r3, r4
    8ad8:	bf24      	itt	cs
    8ada:	461c      	movcs	r4, r3
    8adc:	4646      	movcs	r6, r8
    8ade:	3501      	adds	r5, #1
	for (; sector < SECTOR_AMOUNT; sector++) {
    8ae0:	2d02      	cmp	r5, #2
    8ae2:	d1e5      	bne.n	8ab0 <nv_storage_init+0x14>
	if (last_sector == 0xFF) {
    8ae4:	2eff      	cmp	r6, #255	; 0xff
    8ae6:	d112      	bne.n	8b0e <nv_storage_init+0x72>
			if (create_sector(sector, last_sector_number + 1, true)) {
    8ae8:	3401      	adds	r4, #1
    8aea:	2201      	movs	r2, #1
    8aec:	4621      	mov	r1, r4
    8aee:	2000      	movs	r0, #0
    8af0:	4d3a      	ldr	r5, [pc, #232]	; (8bdc <nv_storage_init+0x140>)
    8af2:	47a8      	blx	r5
    8af4:	b940      	cbnz	r0, 8b08 <nv_storage_init+0x6c>
    8af6:	2201      	movs	r2, #1
    8af8:	4621      	mov	r1, r4
    8afa:	4610      	mov	r0, r2
    8afc:	47a8      	blx	r5
    8afe:	b918      	cbnz	r0, 8b08 <nv_storage_init+0x6c>
			ASSERT(false);
    8b00:	2297      	movs	r2, #151	; 0x97
    8b02:	4937      	ldr	r1, [pc, #220]	; (8be0 <nv_storage_init+0x144>)
    8b04:	4b37      	ldr	r3, [pc, #220]	; (8be4 <nv_storage_init+0x148>)
    8b06:	4798      	blx	r3
}
    8b08:	b009      	add	sp, #36	; 0x24
    8b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	mem.active_sector = last_sector;
    8b0e:	4c36      	ldr	r4, [pc, #216]	; (8be8 <nv_storage_init+0x14c>)
	mem.pow = nv_align_next_access_address(sizeof(struct sector_header), SECTOR_HEADER_ALIGNMENT);
    8b10:	4d36      	ldr	r5, [pc, #216]	; (8bec <nv_storage_init+0x150>)
	mem.active_sector = last_sector;
    8b12:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
	mem.pow = nv_align_next_access_address(sizeof(struct sector_header), SECTOR_HEADER_ALIGNMENT);
    8b16:	2100      	movs	r1, #0
    8b18:	200c      	movs	r0, #12
    8b1a:	47a8      	blx	r5
			address = CONF_STORAGE_MEMORY_START + number * CONF_SECTOR_SIZE + mem.pow;
    8b1c:	f106 0710 	add.w	r7, r6, #16
    8b20:	033f      	lsls	r7, r7, #12
	mem.pow = nv_align_next_access_address(sizeof(struct sector_header), SECTOR_HEADER_ALIGNMENT);
    8b22:	8020      	strh	r0, [r4, #0]
			if (address >= NV_SECTOR_END(number)) {
    8b24:	f607 7aff 	addw	sl, r7, #4095	; 0xfff
		nv_read(number, mem.pow, (uint8_t *)&header, sizeof(struct block_header));
    8b28:	f10d 0810 	add.w	r8, sp, #16
    8b2c:	230e      	movs	r3, #14
    8b2e:	4642      	mov	r2, r8
    8b30:	8821      	ldrh	r1, [r4, #0]
    8b32:	4630      	mov	r0, r6
    8b34:	47c8      	blx	r9
    8b36:	2300      	movs	r3, #0
			if (((uint8_t *)&header)[i] != 0xFF) {
    8b38:	f818 2003 	ldrb.w	r2, [r8, r3]
    8b3c:	2aff      	cmp	r2, #255	; 0xff
    8b3e:	d134      	bne.n	8baa <nv_storage_init+0x10e>
    8b40:	3301      	adds	r3, #1
		for (i = 0; i < sizeof(struct block_header); i++) {
    8b42:	2b0e      	cmp	r3, #14
    8b44:	d1f8      	bne.n	8b38 <nv_storage_init+0x9c>
    8b46:	e7df      	b.n	8b08 <nv_storage_init+0x6c>
			mem.pow = nv_align_next_access_address(mem.pow + sizeof(struct block_header), BLOCK_WITH_DATA_ALIGNMENT);
    8b48:	8820      	ldrh	r0, [r4, #0]
    8b4a:	300e      	adds	r0, #14
    8b4c:	2101      	movs	r1, #1
    8b4e:	b280      	uxth	r0, r0
			mem.pow = nv_align_next_access_address(mem.pow, BLOCK_WITH_DATA_ALIGNMENT);
    8b50:	47a8      	blx	r5
    8b52:	8020      	strh	r0, [r4, #0]
    8b54:	e7ea      	b.n	8b2c <nv_storage_init+0x90>
			struct nv_item *item = find_item(header.id);
    8b56:	f8bd b012 	ldrh.w	fp, [sp, #18]
    8b5a:	4b25      	ldr	r3, [pc, #148]	; (8bf0 <nv_storage_init+0x154>)
    8b5c:	4658      	mov	r0, fp
    8b5e:	4798      	blx	r3
			if (!item) {
    8b60:	b940      	cbnz	r0, 8b74 <nv_storage_init+0xd8>
				item     = &mem.items[mem.items_amount++];
    8b62:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    8b64:	1c59      	adds	r1, r3, #1
    8b66:	009b      	lsls	r3, r3, #2
    8b68:	1c98      	adds	r0, r3, #2
				item->id = header.id;
    8b6a:	4423      	add	r3, r4
				item     = &mem.items[mem.items_amount++];
    8b6c:	8561      	strh	r1, [r4, #42]	; 0x2a
    8b6e:	4420      	add	r0, r4
				item->id = header.id;
    8b70:	f8a3 b002 	strh.w	fp, [r3, #2]
			if (header.item_size == 0) {
    8b74:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    8b78:	b943      	cbnz	r3, 8b8c <nv_storage_init+0xf0>
				*item = mem.items[--mem.items_amount];
    8b7a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    8b7c:	3b01      	subs	r3, #1
    8b7e:	b29b      	uxth	r3, r3
    8b80:	8563      	strh	r3, [r4, #42]	; 0x2a
    8b82:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    8b86:	f8d3 3002 	ldr.w	r3, [r3, #2]
    8b8a:	6003      	str	r3, [r0, #0]
			item->last_block = mem.pow;
    8b8c:	8823      	ldrh	r3, [r4, #0]
    8b8e:	8043      	strh	r3, [r0, #2]
			mem.pow += sizeof(struct block_header) + header.block_size;
    8b90:	f8bd 0016 	ldrh.w	r0, [sp, #22]
    8b94:	4418      	add	r0, r3
    8b96:	300e      	adds	r0, #14
    8b98:	b280      	uxth	r0, r0
			mem.pow = nv_align_next_access_address(mem.pow, BLOCK_WITH_DATA_ALIGNMENT);
    8b9a:	2101      	movs	r1, #1
			mem.pow += sizeof(struct block_header) + header.block_size;
    8b9c:	8020      	strh	r0, [r4, #0]
			mem.pow = nv_align_next_access_address(mem.pow, BLOCK_WITH_DATA_ALIGNMENT);
    8b9e:	47a8      	blx	r5
    8ba0:	8020      	strh	r0, [r4, #0]
			address = CONF_STORAGE_MEMORY_START + number * CONF_SECTOR_SIZE + mem.pow;
    8ba2:	4438      	add	r0, r7
			if (address >= NV_SECTOR_END(number)) {
    8ba4:	4550      	cmp	r0, sl
    8ba6:	d3c1      	bcc.n	8b2c <nv_storage_init+0x90>
    8ba8:	e7ae      	b.n	8b08 <nv_storage_init+0x6c>
		} else if (header.checksum != calculate_block_header_checksum(&header)) {
    8baa:	4640      	mov	r0, r8
    8bac:	4b11      	ldr	r3, [pc, #68]	; (8bf4 <nv_storage_init+0x158>)
    8bae:	f8bd b01c 	ldrh.w	fp, [sp, #28]
    8bb2:	4798      	blx	r3
    8bb4:	4583      	cmp	fp, r0
    8bb6:	d1c7      	bne.n	8b48 <nv_storage_init+0xac>
		} else if (header.active) {
    8bb8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    8bbc:	2b00      	cmp	r3, #0
    8bbe:	d0ca      	beq.n	8b56 <nv_storage_init+0xba>
			mem.pow += sizeof(struct block_header) + header.block_size;
    8bc0:	8820      	ldrh	r0, [r4, #0]
    8bc2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    8bc6:	4418      	add	r0, r3
    8bc8:	300e      	adds	r0, #14
    8bca:	b280      	uxth	r0, r0
    8bcc:	8020      	strh	r0, [r4, #0]
			mem.pow = nv_align_next_access_address(mem.pow, BLOCK_WITH_DATA_ALIGNMENT);
    8bce:	2101      	movs	r1, #1
    8bd0:	e7be      	b.n	8b50 <nv_storage_init+0xb4>
    8bd2:	bf00      	nop
    8bd4:	00008769 	.word	0x00008769
    8bd8:	0000ad59 	.word	0x0000ad59
    8bdc:	000089f1 	.word	0x000089f1
    8be0:	0000e1a6 	.word	0x0000e1a6
    8be4:	00002035 	.word	0x00002035
    8be8:	20007240 	.word	0x20007240
    8bec:	0000893d 	.word	0x0000893d
    8bf0:	00008969 	.word	0x00008969
    8bf4:	00008999 	.word	0x00008999
    8bf8:	0000e19e 	.word	0x0000e19e

00008bfc <persistent_storage_init>:

/**
 * \brief Initialize Persistent Storage
 */
void persistent_storage_init(void)
{
    8bfc:	b510      	push	{r4, lr}
	nv_init(&FLASH_0);
    8bfe:	4b03      	ldr	r3, [pc, #12]	; (8c0c <persistent_storage_init+0x10>)
    8c00:	4803      	ldr	r0, [pc, #12]	; (8c10 <persistent_storage_init+0x14>)
    8c02:	4798      	blx	r3
	nv_storage_init();
    8c04:	4b03      	ldr	r3, [pc, #12]	; (8c14 <persistent_storage_init+0x18>)
}
    8c06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	nv_storage_init();
    8c0a:	4718      	bx	r3
    8c0c:	000086b1 	.word	0x000086b1
    8c10:	20007408 	.word	0x20007408
    8c14:	00008a9d 	.word	0x00008a9d

00008c18 <ring_init>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: Called by the main code application to setup and initialize the BPDU ring topology management
// Returns:     Nothing (NULL)
// *****************************************************************************************************************************************************************
void ring_init(unsigned char basestation, unsigned char *mac_raw)
{
    8c18:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int				loop;
	
	/* set flags to indicate first time boot-up */
	first = 1;
    8c1c:	4c91      	ldr	r4, [pc, #580]	; (8e64 <ring_init+0x24c>)
    8c1e:	f8df 8274 	ldr.w	r8, [pc, #628]	; 8e94 <ring_init+0x27c>
    8c22:	4d91      	ldr	r5, [pc, #580]	; (8e68 <ring_init+0x250>)
    8c24:	f8df b270 	ldr.w	fp, [pc, #624]	; 8e98 <ring_init+0x280>
    8c28:	4e90      	ldr	r6, [pc, #576]	; (8e6c <ring_init+0x254>)
    8c2a:	f04f 0a01 	mov.w	sl, #1
{
    8c2e:	4689      	mov	r9, r1
	first = 1;
    8c30:	f884 a000 	strb.w	sl, [r4]
	storm_holdoff = 0;

	/* "basestation" parameter determines if this MultiSense unit is a base-station or simple pass-through... */
	if (basestation) {
    8c34:	4607      	mov	r7, r0
    8c36:	2800      	cmp	r0, #0
    8c38:	f000 80b2 	beq.w	8da0 <ring_init+0x188>
		xprintf("ETHERNET: Set as a base-station to manage Ethernet topology...\r\n");
    8c3c:	488c      	ldr	r0, [pc, #560]	; (8e70 <ring_init+0x258>)
    8c3e:	47c0      	blx	r8
		
		/* Enable BPDU tags */
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA8, 0x00);
    8c40:	2100      	movs	r1, #0
    8c42:	2070      	movs	r0, #112	; 0x70
    8c44:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA7, 0x00);
    8c46:	2100      	movs	r1, #0
    8c48:	2071      	movs	r0, #113	; 0x71
    8c4a:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA6, 0x71);
    8c4c:	2171      	movs	r1, #113	; 0x71
    8c4e:	2072      	movs	r0, #114	; 0x72
    8c50:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA5, 0x01);
    8c52:	4651      	mov	r1, sl
    8c54:	2073      	movs	r0, #115	; 0x73
    8c56:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA4, 0x80);
    8c58:	2180      	movs	r1, #128	; 0x80
    8c5a:	2074      	movs	r0, #116	; 0x74
    8c5c:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA3, 0xC2);
    8c5e:	21c2      	movs	r1, #194	; 0xc2
    8c60:	2075      	movs	r0, #117	; 0x75
    8c62:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA2, 0x00);
    8c64:	2100      	movs	r1, #0
    8c66:	2076      	movs	r0, #118	; 0x76
    8c68:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA1, 0x00);
    8c6a:	2100      	movs	r1, #0
    8c6c:	2077      	movs	r0, #119	; 0x77
    8c6e:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA0, 0x00);
    8c70:	2100      	movs	r1, #0
    8c72:	2078      	movs	r0, #120	; 0x78
    8c74:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_CONTROL0, 0x00);
    8c76:	2100      	movs	r1, #0
    8c78:	206e      	movs	r0, #110	; 0x6e
    8c7a:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_CONTROL1, 0x00);
    8c7c:	2100      	movs	r1, #0
    8c7e:	206f      	movs	r0, #111	; 0x6f
    8c80:	47a8      	blx	r5
		delay_us(250);
    8c82:	20fa      	movs	r0, #250	; 0xfa
    8c84:	47d8      	blx	fp
		
		/* Read back the static MAC table and check that the BPDU enabling is in operation? */
		writeKSZreg(SPI_KSZ8794_ACCESS_CONTROL0, 0x10);
    8c86:	2110      	movs	r1, #16
    8c88:	206e      	movs	r0, #110	; 0x6e
    8c8a:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_CONTROL1, 0x00);
    8c8c:	2100      	movs	r1, #0
    8c8e:	206f      	movs	r0, #111	; 0x6f
    8c90:	47a8      	blx	r5
		delay_us(50);
    8c92:	2032      	movs	r0, #50	; 0x32
    8c94:	47d8      	blx	fp

		/* Check the individual registers from the SPI bus */
		if ((!checkKSZreg(SPI_KSZ8794_ACCESS_DATA8, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA7, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA6, 0x71)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA5, 0x01)) ||
    8c96:	2100      	movs	r1, #0
    8c98:	2070      	movs	r0, #112	; 0x70
    8c9a:	47b0      	blx	r6
    8c9c:	2800      	cmp	r0, #0
    8c9e:	d156      	bne.n	8d4e <ring_init+0x136>
	        (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA4, 0x80)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA3, 0xC2)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA2, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA1, 0x00)) ||
		    (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA0, 0x00))) { xprintf("ERROR setting the STATIC MAC table with BPDU for Base-station...\r\n"); }
    8ca0:	4874      	ldr	r0, [pc, #464]	; (8e74 <ring_init+0x25c>)
    8ca2:	47c0      	blx	r8
				
		/* Set the local context "mode" to indicate this is in fact a base-station */		
		mode = 1;
    8ca4:	2301      	movs	r3, #1
		/* Set the local context "mode" to indicate this is in fact a pass-though un-configured node */		
		mode = 0;
	}
	
	/* Bridge DST MAC */
	wbuf[0] = 0x01;
    8ca6:	2201      	movs	r2, #1
    8ca8:	70a2      	strb	r2, [r4, #2]
	wbuf[3] = 0x00;
	wbuf[4] = 0x00;
	wbuf[5] = 0x00;

	/* Bridge SRC MAC */
	wbuf[6] = 0x01;
    8caa:	7222      	strb	r2, [r4, #8]
	wbuf[7] = 0x80;
	wbuf[8] = 0xC2;
	wbuf[9] = 0x00;
	wbuf[10] = 0x00;
	wbuf[11] = 0x01;
    8cac:	7362      	strb	r2, [r4, #13]
	wbuf[14] = 0x00;
	wbuf[15] = 0x07;
	wbuf[16] = 0x00;
	wbuf[17] = 0x00;
	wbuf[18] = 0x00;
	wbuf[19] = 0x01;
    8cae:	7562      	strb	r2, [r4, #21]
	wbuf[2] = 0xC2;
    8cb0:	21c2      	movs	r1, #194	; 0xc2

	/* BPDU Length/Type */
	wbuf[20] = 0x00;
	wbuf[21] = 0x27;
    8cb2:	2227      	movs	r2, #39	; 0x27
	wbuf[2] = 0xC2;
    8cb4:	7121      	strb	r1, [r4, #4]
	wbuf[8] = 0xC2;
    8cb6:	72a1      	strb	r1, [r4, #10]
	wbuf[21] = 0x27;
    8cb8:	75e2      	strb	r2, [r4, #23]
	*((unsigned short int *)&wbuf[12]) = 0x01E0;
    8cba:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
	wbuf[22] = 0x42;
    8cbe:	2242      	movs	r2, #66	; 0x42
	*((unsigned short int *)&wbuf[12]) = 0x01E0;
    8cc0:	81e1      	strh	r1, [r4, #14]
	wbuf[22] = 0x42;
    8cc2:	7622      	strb	r2, [r4, #24]
	wbuf[23] = 0x42;
    8cc4:	7662      	strb	r2, [r4, #25]
		mode = 0;
    8cc6:	7063      	strb	r3, [r4, #1]
	wbuf[1] = 0x80;
    8cc8:	2080      	movs	r0, #128	; 0x80
	wbuf[3] = 0x00;
    8cca:	2300      	movs	r3, #0
    wbuf[24] = 0x03;
    8ccc:	2203      	movs	r2, #3
	wbuf[15] = 0x07;
    8cce:	2107      	movs	r1, #7
	wbuf[1] = 0x80;
    8cd0:	70e0      	strb	r0, [r4, #3]
	wbuf[3] = 0x00;
    8cd2:	7163      	strb	r3, [r4, #5]
	wbuf[4] = 0x00;
    8cd4:	71a3      	strb	r3, [r4, #6]
	wbuf[5] = 0x00;
    8cd6:	71e3      	strb	r3, [r4, #7]
	wbuf[7] = 0x80;
    8cd8:	7260      	strb	r0, [r4, #9]
	wbuf[9] = 0x00;
    8cda:	72e3      	strb	r3, [r4, #11]
	wbuf[10] = 0x00;
    8cdc:	7323      	strb	r3, [r4, #12]
	wbuf[14] = 0x00;
    8cde:	7423      	strb	r3, [r4, #16]
	wbuf[15] = 0x07;
    8ce0:	7461      	strb	r1, [r4, #17]
	wbuf[16] = 0x00;
    8ce2:	74a3      	strb	r3, [r4, #18]
	wbuf[17] = 0x00;
    8ce4:	74e3      	strb	r3, [r4, #19]
	wbuf[18] = 0x00;
    8ce6:	7523      	strb	r3, [r4, #20]
	wbuf[20] = 0x00;
    8ce8:	75a3      	strb	r3, [r4, #22]
    wbuf[24] = 0x03;
    8cea:	76a2      	strb	r2, [r4, #26]

	/* BPDU Header */
	wbuf[25] = 0x00;
    8cec:	76e3      	strb	r3, [r4, #27]
	wbuf[26] = 0x00;
    8cee:	7723      	strb	r3, [r4, #28]
	wbuf[27] = 0x00;
    8cf0:	7763      	strb	r3, [r4, #29]
	wbuf[28] = 0x00;
    8cf2:	77a3      	strb	r3, [r4, #30]

	/* BPDU data payload */
	wbuf[29] = mac_raw[0];
    8cf4:	f899 2000 	ldrb.w	r2, [r9]
    8cf8:	77e2      	strb	r2, [r4, #31]
	wbuf[30] = mac_raw[1];
    8cfa:	f899 2001 	ldrb.w	r2, [r9, #1]
    8cfe:	f884 2020 	strb.w	r2, [r4, #32]
	wbuf[31] = mac_raw[2];
    8d02:	f899 2002 	ldrb.w	r2, [r9, #2]
    8d06:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
	wbuf[32] = mac_raw[3];
    8d0a:	f899 2003 	ldrb.w	r2, [r9, #3]
    8d0e:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
	wbuf[33] = mac_raw[4];
    8d12:	f899 2004 	ldrb.w	r2, [r9, #4]
    8d16:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
	wbuf[34] = mac_raw[5];
    8d1a:	f899 2005 	ldrb.w	r2, [r9, #5]
    8d1e:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24

	/* BPDU Padding ZEROs */
	for (loop = 35; loop < 68; loop++) {
		wbuf[loop] = 0x00;
    8d22:	4a55      	ldr	r2, [pc, #340]	; (8e78 <ring_init+0x260>)
	for (loop = 35; loop < 68; loop++) {
    8d24:	2423      	movs	r4, #35	; 0x23
		wbuf[loop] = 0x00;
    8d26:	54a3      	strb	r3, [r4, r2]
	for (loop = 35; loop < 68; loop++) {
    8d28:	3401      	adds	r4, #1
    8d2a:	2c44      	cmp	r4, #68	; 0x44
    8d2c:	d1fb      	bne.n	8d26 <ring_init+0x10e>
	}
	
	xprintf("ETHERNET: Completed RING management init...\r\n");
    8d2e:	4853      	ldr	r0, [pc, #332]	; (8e7c <ring_init+0x264>)
    8d30:	47c0      	blx	r8
	
	/* If we are a base-station, then send out the first BPDU frame now upon start-up */
	if (basestation) {																						/* When [BS] switched selected, we are a base-station */
    8d32:	2f00      	cmp	r7, #0
    8d34:	f000 8092 	beq.w	8e5c <ring_init+0x244>
		mac_async_write(&ETHERNET_MAC_0, (uint8_t *)&wbuf[0], 68);
    8d38:	4622      	mov	r2, r4
    8d3a:	494f      	ldr	r1, [pc, #316]	; (8e78 <ring_init+0x260>)
    8d3c:	4b50      	ldr	r3, [pc, #320]	; (8e80 <ring_init+0x268>)
    8d3e:	4851      	ldr	r0, [pc, #324]	; (8e84 <ring_init+0x26c>)
    8d40:	4798      	blx	r3
		xprintf("ETHERNET: Sent first BPDU...\r\n");
    8d42:	4851      	ldr	r0, [pc, #324]	; (8e88 <ring_init+0x270>)
    8d44:	4643      	mov	r3, r8
	}
}
    8d46:	b001      	add	sp, #4
    8d48:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		xprintf("ETHERNET: Sent first BPDU...\r\n");
    8d4c:	4718      	bx	r3
		if ((!checkKSZreg(SPI_KSZ8794_ACCESS_DATA8, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA7, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA6, 0x71)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA5, 0x01)) ||
    8d4e:	2100      	movs	r1, #0
    8d50:	2071      	movs	r0, #113	; 0x71
    8d52:	47b0      	blx	r6
    8d54:	2800      	cmp	r0, #0
    8d56:	d0a3      	beq.n	8ca0 <ring_init+0x88>
    8d58:	2171      	movs	r1, #113	; 0x71
    8d5a:	2072      	movs	r0, #114	; 0x72
    8d5c:	47b0      	blx	r6
    8d5e:	2800      	cmp	r0, #0
    8d60:	d09e      	beq.n	8ca0 <ring_init+0x88>
    8d62:	4651      	mov	r1, sl
    8d64:	2073      	movs	r0, #115	; 0x73
    8d66:	47b0      	blx	r6
    8d68:	2800      	cmp	r0, #0
    8d6a:	d099      	beq.n	8ca0 <ring_init+0x88>
	        (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA4, 0x80)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA3, 0xC2)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA2, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA1, 0x00)) ||
    8d6c:	2180      	movs	r1, #128	; 0x80
    8d6e:	2074      	movs	r0, #116	; 0x74
    8d70:	47b0      	blx	r6
		if ((!checkKSZreg(SPI_KSZ8794_ACCESS_DATA8, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA7, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA6, 0x71)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA5, 0x01)) ||
    8d72:	2800      	cmp	r0, #0
    8d74:	d094      	beq.n	8ca0 <ring_init+0x88>
	        (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA4, 0x80)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA3, 0xC2)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA2, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA1, 0x00)) ||
    8d76:	21c2      	movs	r1, #194	; 0xc2
    8d78:	2075      	movs	r0, #117	; 0x75
    8d7a:	47b0      	blx	r6
    8d7c:	2800      	cmp	r0, #0
    8d7e:	d08f      	beq.n	8ca0 <ring_init+0x88>
    8d80:	2100      	movs	r1, #0
    8d82:	2076      	movs	r0, #118	; 0x76
    8d84:	47b0      	blx	r6
    8d86:	2800      	cmp	r0, #0
    8d88:	d08a      	beq.n	8ca0 <ring_init+0x88>
    8d8a:	2100      	movs	r1, #0
    8d8c:	2077      	movs	r0, #119	; 0x77
    8d8e:	47b0      	blx	r6
    8d90:	2800      	cmp	r0, #0
    8d92:	d085      	beq.n	8ca0 <ring_init+0x88>
		    (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA0, 0x00))) { xprintf("ERROR setting the STATIC MAC table with BPDU for Base-station...\r\n"); }
    8d94:	2100      	movs	r1, #0
    8d96:	2078      	movs	r0, #120	; 0x78
    8d98:	47b0      	blx	r6
	        (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA4, 0x80)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA3, 0xC2)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA2, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA1, 0x00)) ||
    8d9a:	2800      	cmp	r0, #0
    8d9c:	d080      	beq.n	8ca0 <ring_init+0x88>
    8d9e:	e781      	b.n	8ca4 <ring_init+0x8c>
		xprintf("ETHERNET: normal none-managed pass-through node...\r\n");
    8da0:	483a      	ldr	r0, [pc, #232]	; (8e8c <ring_init+0x274>)
    8da2:	47c0      	blx	r8
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA8, 0x00);
    8da4:	4639      	mov	r1, r7
    8da6:	2070      	movs	r0, #112	; 0x70
    8da8:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA7, 0x00);
    8daa:	4639      	mov	r1, r7
    8dac:	2071      	movs	r0, #113	; 0x71
    8dae:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA6, 0x61);
    8db0:	2161      	movs	r1, #97	; 0x61
    8db2:	2072      	movs	r0, #114	; 0x72
    8db4:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA5, 0x01);
    8db6:	4651      	mov	r1, sl
    8db8:	2073      	movs	r0, #115	; 0x73
    8dba:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA4, 0x80);
    8dbc:	2180      	movs	r1, #128	; 0x80
    8dbe:	2074      	movs	r0, #116	; 0x74
    8dc0:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA3, 0xC2);
    8dc2:	21c2      	movs	r1, #194	; 0xc2
    8dc4:	2075      	movs	r0, #117	; 0x75
    8dc6:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA2, 0x00);
    8dc8:	4639      	mov	r1, r7
    8dca:	2076      	movs	r0, #118	; 0x76
    8dcc:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA1, 0x00);
    8dce:	4639      	mov	r1, r7
    8dd0:	2077      	movs	r0, #119	; 0x77
    8dd2:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA0, 0x00);
    8dd4:	4639      	mov	r1, r7
    8dd6:	2078      	movs	r0, #120	; 0x78
    8dd8:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_CONTROL0, 0x00);
    8dda:	4639      	mov	r1, r7
    8ddc:	206e      	movs	r0, #110	; 0x6e
    8dde:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_CONTROL1, 0x00);
    8de0:	4639      	mov	r1, r7
    8de2:	206f      	movs	r0, #111	; 0x6f
    8de4:	47a8      	blx	r5
		delay_us(250);
    8de6:	20fa      	movs	r0, #250	; 0xfa
    8de8:	47d8      	blx	fp
		writeKSZreg(SPI_KSZ8794_ACCESS_CONTROL0, 0x10);
    8dea:	2110      	movs	r1, #16
    8dec:	206e      	movs	r0, #110	; 0x6e
    8dee:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_CONTROL1, 0x00);
    8df0:	4639      	mov	r1, r7
    8df2:	206f      	movs	r0, #111	; 0x6f
    8df4:	47a8      	blx	r5
		delay_us(50);
    8df6:	2032      	movs	r0, #50	; 0x32
    8df8:	47d8      	blx	fp
		if ((!checkKSZreg(SPI_KSZ8794_ACCESS_DATA8, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA7, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA6, 0x61)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA5, 0x01)) ||
    8dfa:	4639      	mov	r1, r7
    8dfc:	2070      	movs	r0, #112	; 0x70
    8dfe:	47b0      	blx	r6
    8e00:	b918      	cbnz	r0, 8e0a <ring_init+0x1f2>
			(!checkKSZreg(SPI_KSZ8794_ACCESS_DATA0, 0x00))) { xprintf("ERROR setting the STATIC MAC table with BPDU for pass-through node...\r\n"); }
    8e02:	4823      	ldr	r0, [pc, #140]	; (8e90 <ring_init+0x278>)
    8e04:	47c0      	blx	r8
		mode = 0;
    8e06:	2300      	movs	r3, #0
    8e08:	e74d      	b.n	8ca6 <ring_init+0x8e>
		if ((!checkKSZreg(SPI_KSZ8794_ACCESS_DATA8, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA7, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA6, 0x61)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA5, 0x01)) ||
    8e0a:	4639      	mov	r1, r7
    8e0c:	2071      	movs	r0, #113	; 0x71
    8e0e:	47b0      	blx	r6
    8e10:	2800      	cmp	r0, #0
    8e12:	d0f6      	beq.n	8e02 <ring_init+0x1ea>
    8e14:	2161      	movs	r1, #97	; 0x61
    8e16:	2072      	movs	r0, #114	; 0x72
    8e18:	47b0      	blx	r6
    8e1a:	2800      	cmp	r0, #0
    8e1c:	d0f1      	beq.n	8e02 <ring_init+0x1ea>
    8e1e:	4651      	mov	r1, sl
    8e20:	2073      	movs	r0, #115	; 0x73
    8e22:	47b0      	blx	r6
    8e24:	2800      	cmp	r0, #0
    8e26:	d0ec      	beq.n	8e02 <ring_init+0x1ea>
			(!checkKSZreg(SPI_KSZ8794_ACCESS_DATA4, 0x80)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA3, 0xC2)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA2, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA1, 0x00)) ||
    8e28:	2180      	movs	r1, #128	; 0x80
    8e2a:	2074      	movs	r0, #116	; 0x74
    8e2c:	47b0      	blx	r6
		if ((!checkKSZreg(SPI_KSZ8794_ACCESS_DATA8, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA7, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA6, 0x61)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA5, 0x01)) ||
    8e2e:	2800      	cmp	r0, #0
    8e30:	d0e7      	beq.n	8e02 <ring_init+0x1ea>
			(!checkKSZreg(SPI_KSZ8794_ACCESS_DATA4, 0x80)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA3, 0xC2)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA2, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA1, 0x00)) ||
    8e32:	21c2      	movs	r1, #194	; 0xc2
    8e34:	2075      	movs	r0, #117	; 0x75
    8e36:	47b0      	blx	r6
    8e38:	2800      	cmp	r0, #0
    8e3a:	d0e2      	beq.n	8e02 <ring_init+0x1ea>
    8e3c:	4639      	mov	r1, r7
    8e3e:	2076      	movs	r0, #118	; 0x76
    8e40:	47b0      	blx	r6
    8e42:	2800      	cmp	r0, #0
    8e44:	d0dd      	beq.n	8e02 <ring_init+0x1ea>
    8e46:	4639      	mov	r1, r7
    8e48:	2077      	movs	r0, #119	; 0x77
    8e4a:	47b0      	blx	r6
    8e4c:	2800      	cmp	r0, #0
    8e4e:	d0d8      	beq.n	8e02 <ring_init+0x1ea>
			(!checkKSZreg(SPI_KSZ8794_ACCESS_DATA0, 0x00))) { xprintf("ERROR setting the STATIC MAC table with BPDU for pass-through node...\r\n"); }
    8e50:	4639      	mov	r1, r7
    8e52:	2078      	movs	r0, #120	; 0x78
    8e54:	47b0      	blx	r6
			(!checkKSZreg(SPI_KSZ8794_ACCESS_DATA4, 0x80)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA3, 0xC2)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA2, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA1, 0x00)) ||
    8e56:	2800      	cmp	r0, #0
    8e58:	d0d3      	beq.n	8e02 <ring_init+0x1ea>
    8e5a:	e7d4      	b.n	8e06 <ring_init+0x1ee>
}
    8e5c:	b001      	add	sp, #4
    8e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8e62:	bf00      	nop
    8e64:	2000726e 	.word	0x2000726e
    8e68:	0000acc1 	.word	0x0000acc1
    8e6c:	0000ac51 	.word	0x0000ac51
    8e70:	0000e1c9 	.word	0x0000e1c9
    8e74:	0000e20a 	.word	0x0000e20a
    8e78:	20007270 	.word	0x20007270
    8e7c:	0000e2ca 	.word	0x0000e2ca
    8e80:	000015cd 	.word	0x000015cd
    8e84:	20007528 	.word	0x20007528
    8e88:	0000e2f8 	.word	0x0000e2f8
    8e8c:	0000e24d 	.word	0x0000e24d
    8e90:	0000e282 	.word	0x0000e282
    8e94:	00000395 	.word	0x00000395
    8e98:	00001229 	.word	0x00001229

00008e9c <ring_check>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: Called by the main loop execution and checks every time to see if if storms and BPDUs arrive. This manages the storm until it subsides
// Returns:     Nothing (NULL)
// *****************************************************************************************************************************************************************
unsigned char ring_check(unsigned char bpdu_arrived, unsigned char *storm_state, unsigned char *ringbreak)
{
    8e9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8ea0:	4616      	mov	r6, r2
	unsigned char	sendrelearn;
	
	/* Bound-checks and assertions */
	if (!storm_state) {
    8ea2:	460f      	mov	r7, r1
    8ea4:	b931      	cbnz	r1, 8eb4 <ring_check+0x18>
		xprintf("ETHERNET: (!storm_state) ERROR\r\n");
    8ea6:	4836      	ldr	r0, [pc, #216]	; (8f80 <ring_check+0xe4>)
    8ea8:	4b36      	ldr	r3, [pc, #216]	; (8f84 <ring_check+0xe8>)
    8eaa:	4798      	blx	r3
		return 0;
    8eac:	463c      	mov	r4, r7
	}

	first = 0;
	
	return sendrelearn;
    8eae:	4620      	mov	r0, r4
    8eb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!ringbreak) {
    8eb4:	b922      	cbnz	r2, 8ec0 <ring_check+0x24>
		xprintf("ETHERNET: (!ringbreak) ERROR\r\n");
    8eb6:	4834      	ldr	r0, [pc, #208]	; (8f88 <ring_check+0xec>)
    8eb8:	4b32      	ldr	r3, [pc, #200]	; (8f84 <ring_check+0xe8>)
    8eba:	4798      	blx	r3
		return 0;
    8ebc:	4634      	mov	r4, r6
    8ebe:	e7f6      	b.n	8eae <ring_check+0x12>
	if (mode) {
    8ec0:	4d32      	ldr	r5, [pc, #200]	; (8f8c <ring_check+0xf0>)
    8ec2:	786c      	ldrb	r4, [r5, #1]
    8ec4:	b1ec      	cbz	r4, 8f02 <ring_check+0x66>
    8ec6:	782c      	ldrb	r4, [r5, #0]
		if (!bpdu_arrived) {
    8ec8:	2800      	cmp	r0, #0
    8eca:	d135      	bne.n	8f38 <ring_check+0x9c>
			if ((first) || (!(*ringbreak))) {
    8ecc:	b90c      	cbnz	r4, 8ed2 <ring_check+0x36>
    8ece:	7813      	ldrb	r3, [r2, #0]
    8ed0:	b9bb      	cbnz	r3, 8f02 <ring_check+0x66>
				writeKSZreg(SPI_KSZ8794_PORT1CONTROL2, 0x07);
    8ed2:	4c2f      	ldr	r4, [pc, #188]	; (8f90 <ring_check+0xf4>)
    8ed4:	2107      	movs	r1, #7
    8ed6:	2012      	movs	r0, #18
    8ed8:	47a0      	blx	r4
				writeKSZreg(SPI_KSZ8794_PORT2CONTROL2, 0x07);
    8eda:	2107      	movs	r1, #7
    8edc:	2022      	movs	r0, #34	; 0x22
    8ede:	47a0      	blx	r4
				writeKSZreg(SPI_KSZ8794_GLOBAL0, 0x2D);
    8ee0:	212d      	movs	r1, #45	; 0x2d
    8ee2:	2002      	movs	r0, #2
    8ee4:	47a0      	blx	r4
				delay_us(250);
    8ee6:	4b2b      	ldr	r3, [pc, #172]	; (8f94 <ring_check+0xf8>)
    8ee8:	20fa      	movs	r0, #250	; 0xfa
    8eea:	4798      	blx	r3
				writeKSZreg(SPI_KSZ8794_PORT1CONTROL2, 0x06);
    8eec:	2106      	movs	r1, #6
    8eee:	2012      	movs	r0, #18
    8ef0:	47a0      	blx	r4
				writeKSZreg(SPI_KSZ8794_PORT2CONTROL2, 0x06);
    8ef2:	2022      	movs	r0, #34	; 0x22
    8ef4:	2106      	movs	r1, #6
    8ef6:	47a0      	blx	r4
				*ringbreak = 1;
    8ef8:	2401      	movs	r4, #1
    8efa:	7034      	strb	r4, [r6, #0]
				xprintf("ETHERNET: [turning Ethernet <B> ON - RING BROKEN]...\r\n");
    8efc:	4826      	ldr	r0, [pc, #152]	; (8f98 <ring_check+0xfc>)
    8efe:	4b21      	ldr	r3, [pc, #132]	; (8f84 <ring_check+0xe8>)
    8f00:	4798      	blx	r3
	if (*storm_state) {
    8f02:	783b      	ldrb	r3, [r7, #0]
    8f04:	2b00      	cmp	r3, #0
    8f06:	d032      	beq.n	8f6e <ring_check+0xd2>
		xprintf("ETHERNET: [storm subsided]...\r\n");
    8f08:	4824      	ldr	r0, [pc, #144]	; (8f9c <ring_check+0x100>)
    8f0a:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8f84 <ring_check+0xe8>
		*storm_state = 0;
    8f0e:	f04f 0800 	mov.w	r8, #0
		xprintf("ETHERNET: [storm subsided]...\r\n");
    8f12:	47c8      	blx	r9
		*storm_state = 0;
    8f14:	f887 8000 	strb.w	r8, [r7]
		writeKSZreg(SPI_KSZ8794_PORT4CONTROL2, 0x06);
    8f18:	2106      	movs	r1, #6
    8f1a:	2052      	movs	r0, #82	; 0x52
    8f1c:	4f1c      	ldr	r7, [pc, #112]	; (8f90 <ring_check+0xf4>)
    8f1e:	47b8      	blx	r7
		if (mode) {
    8f20:	786b      	ldrb	r3, [r5, #1]
    8f22:	b133      	cbz	r3, 8f32 <ring_check+0x96>
			xprintf("ETHERNET: turning Ethernet <B> OFF because of storm - RING HEALING POSSIBILITY]...\r\n");
    8f24:	481e      	ldr	r0, [pc, #120]	; (8fa0 <ring_check+0x104>)
    8f26:	47c8      	blx	r9
			writeKSZreg(SPI_KSZ8794_PORT2CONTROL2, 0x01);
    8f28:	2101      	movs	r1, #1
    8f2a:	2022      	movs	r0, #34	; 0x22
    8f2c:	47b8      	blx	r7
			*ringbreak = 0;
    8f2e:	f886 8000 	strb.w	r8, [r6]
	first = 0;
    8f32:	2300      	movs	r3, #0
    8f34:	702b      	strb	r3, [r5, #0]
	return sendrelearn;
    8f36:	e7ba      	b.n	8eae <ring_check+0x12>
			if ((first) || (*ringbreak)) {
    8f38:	b914      	cbnz	r4, 8f40 <ring_check+0xa4>
    8f3a:	7814      	ldrb	r4, [r2, #0]
    8f3c:	2c00      	cmp	r4, #0
    8f3e:	d0e0      	beq.n	8f02 <ring_check+0x66>
				writeKSZreg(SPI_KSZ8794_PORT1CONTROL2, 0x07);
    8f40:	4c13      	ldr	r4, [pc, #76]	; (8f90 <ring_check+0xf4>)
    8f42:	2107      	movs	r1, #7
    8f44:	2012      	movs	r0, #18
    8f46:	47a0      	blx	r4
				writeKSZreg(SPI_KSZ8794_PORT2CONTROL2, 0x01);
    8f48:	2101      	movs	r1, #1
    8f4a:	2022      	movs	r0, #34	; 0x22
    8f4c:	47a0      	blx	r4
				writeKSZreg(SPI_KSZ8794_GLOBAL0, 0x2D);
    8f4e:	212d      	movs	r1, #45	; 0x2d
    8f50:	2002      	movs	r0, #2
    8f52:	47a0      	blx	r4
				delay_us(250);
    8f54:	4b0f      	ldr	r3, [pc, #60]	; (8f94 <ring_check+0xf8>)
    8f56:	20fa      	movs	r0, #250	; 0xfa
    8f58:	4798      	blx	r3
				writeKSZreg(SPI_KSZ8794_PORT1CONTROL2, 0x06);
    8f5a:	2106      	movs	r1, #6
    8f5c:	2012      	movs	r0, #18
    8f5e:	47a0      	blx	r4
				*ringbreak = 0;
    8f60:	2300      	movs	r3, #0
    8f62:	7033      	strb	r3, [r6, #0]
				xprintf("ETHERNET: [turning Ethernet <B> OFF - RING HEALED]...\r\n");
    8f64:	480f      	ldr	r0, [pc, #60]	; (8fa4 <ring_check+0x108>)
    8f66:	4b07      	ldr	r3, [pc, #28]	; (8f84 <ring_check+0xe8>)
    8f68:	4798      	blx	r3
				sendrelearn = 1;
    8f6a:	2401      	movs	r4, #1
    8f6c:	e7c9      	b.n	8f02 <ring_check+0x66>
		if (mode) {																										
    8f6e:	786b      	ldrb	r3, [r5, #1]
    8f70:	2b00      	cmp	r3, #0
    8f72:	d0de      	beq.n	8f32 <ring_check+0x96>
			mac_async_write(&ETHERNET_MAC_0, (uint8_t *)&wbuf[0], 68);
    8f74:	2244      	movs	r2, #68	; 0x44
    8f76:	490c      	ldr	r1, [pc, #48]	; (8fa8 <ring_check+0x10c>)
    8f78:	4b0c      	ldr	r3, [pc, #48]	; (8fac <ring_check+0x110>)
    8f7a:	480d      	ldr	r0, [pc, #52]	; (8fb0 <ring_check+0x114>)
    8f7c:	4798      	blx	r3
    8f7e:	e7d8      	b.n	8f32 <ring_check+0x96>
    8f80:	0000e317 	.word	0x0000e317
    8f84:	00000395 	.word	0x00000395
    8f88:	0000e338 	.word	0x0000e338
    8f8c:	2000726e 	.word	0x2000726e
    8f90:	0000acc1 	.word	0x0000acc1
    8f94:	00001229 	.word	0x00001229
    8f98:	0000e357 	.word	0x0000e357
    8f9c:	0000e3c6 	.word	0x0000e3c6
    8fa0:	0000e3e6 	.word	0x0000e3e6
    8fa4:	0000e38e 	.word	0x0000e38e
    8fa8:	20007270 	.word	0x20007270
    8fac:	000015cd 	.word	0x000015cd
    8fb0:	20007528 	.word	0x20007528

00008fb4 <chksum>:

#if ! UIP_ARCH_CHKSUM
/*---------------------------------------------------------------------------*/
static u16_t
chksum(u16_t sum, const u8_t *data, u16_t len)
{
    8fb4:	b510      	push	{r4, lr}
  u16_t t;
  const u8_t *dataptr;
  const u8_t *last_byte;

  dataptr = data;
  last_byte = data + len - 1;
    8fb6:	3a01      	subs	r2, #1
    8fb8:	440a      	add	r2, r1
  
  while(dataptr < last_byte) {	/* At least two more bytes */
    8fba:	4291      	cmp	r1, r2
    8fbc:	d309      	bcc.n	8fd2 <chksum+0x1e>
      sum++;		/* carry */
    }
    dataptr += 2;
  }
  
  if(dataptr == last_byte) {
    8fbe:	d107      	bne.n	8fd0 <chksum+0x1c>
    t = (dataptr[0] << 8) + 0;
    8fc0:	780b      	ldrb	r3, [r1, #0]
    8fc2:	021b      	lsls	r3, r3, #8
    sum += t;
    8fc4:	4418      	add	r0, r3
    8fc6:	b280      	uxth	r0, r0
    if(sum < t) {
    8fc8:	4283      	cmp	r3, r0
      sum++;		/* carry */
    8fca:	bf84      	itt	hi
    8fcc:	3001      	addhi	r0, #1
    8fce:	b280      	uxthhi	r0, r0
    }
  }

  /* Return sum in host byte order. */
  return sum;
}
    8fd0:	bd10      	pop	{r4, pc}
    t = (dataptr[0] << 8) + dataptr[1];
    8fd2:	780c      	ldrb	r4, [r1, #0]
    8fd4:	784b      	ldrb	r3, [r1, #1]
    8fd6:	eb03 2304 	add.w	r3, r3, r4, lsl #8
    8fda:	b29b      	uxth	r3, r3
    sum += t;
    8fdc:	4418      	add	r0, r3
    8fde:	b280      	uxth	r0, r0
    if(sum < t) {
    8fe0:	4283      	cmp	r3, r0
      sum++;		/* carry */
    8fe2:	bf84      	itt	hi
    8fe4:	3001      	addhi	r0, #1
    8fe6:	b280      	uxthhi	r0, r0
    dataptr += 2;
    8fe8:	3102      	adds	r1, #2
    8fea:	e7e6      	b.n	8fba <chksum+0x6>

00008fec <upper_layer_chksum>:
}
#endif
/*---------------------------------------------------------------------------*/
static u16_t
upper_layer_chksum(u8_t proto)
{
    8fec:	b570      	push	{r4, r5, r6, lr}
  u16_t sum;
  
#if UIP_CONF_IPV6
  upper_layer_len = (((u16_t)(BUF->len[0]) << 8) + BUF->len[1]);
#else /* UIP_CONF_IPV6 */
  upper_layer_len = (((u16_t)(BUF->len[0]) << 8) + BUF->len[1]) - UIP_IPH_LEN;
    8fee:	4d0c      	ldr	r5, [pc, #48]	; (9020 <upper_layer_chksum+0x34>)
  /* First sum pseudoheader. */
  
  /* IP protocol and length fields. This addition cannot carry. */
  sum = upper_layer_len + proto;
  /* Sum IP source and destination addresses. */
  sum = chksum(sum, (u8_t *)&BUF->srcipaddr[0], 2 * sizeof(uip_ipaddr_t));
    8ff0:	4e0c      	ldr	r6, [pc, #48]	; (9024 <upper_layer_chksum+0x38>)
  upper_layer_len = (((u16_t)(BUF->len[0]) << 8) + BUF->len[1]) - UIP_IPH_LEN;
    8ff2:	7c6c      	ldrb	r4, [r5, #17]
    8ff4:	7c2b      	ldrb	r3, [r5, #16]
    8ff6:	3c14      	subs	r4, #20
    8ff8:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    8ffc:	b2a4      	uxth	r4, r4
  sum = upper_layer_len + proto;
    8ffe:	4420      	add	r0, r4
  sum = chksum(sum, (u8_t *)&BUF->srcipaddr[0], 2 * sizeof(uip_ipaddr_t));
    9000:	2208      	movs	r2, #8
    9002:	f105 011a 	add.w	r1, r5, #26
    9006:	b280      	uxth	r0, r0
    9008:	47b0      	blx	r6

  /* Sum TCP header and data. */
  sum = chksum(sum, &uip_buf[UIP_IPH_LEN + UIP_LLH_LEN],
    900a:	4622      	mov	r2, r4
    900c:	f105 0122 	add.w	r1, r5, #34	; 0x22
    9010:	47b0      	blx	r6
	       upper_layer_len);
    
  return (sum == 0) ? 0xffff : htons(sum);
    9012:	b110      	cbz	r0, 901a <upper_layer_chksum+0x2e>
    9014:	ba40      	rev16	r0, r0
    9016:	b280      	uxth	r0, r0
    9018:	bd70      	pop	{r4, r5, r6, pc}
    901a:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
    901e:	bd70      	pop	{r4, r5, r6, pc}
    9020:	20008622 	.word	0x20008622
    9024:	00008fb5 	.word	0x00008fb5

00009028 <uip_add32>:
{
    9028:	b5f0      	push	{r4, r5, r6, r7, lr}
  uip_acc32[3] = op32[3] + (op16 & 0xff);
    902a:	78c5      	ldrb	r5, [r0, #3]
    902c:	4b12      	ldr	r3, [pc, #72]	; (9078 <uip_add32+0x50>)
    902e:	440d      	add	r5, r1
    9030:	b2ed      	uxtb	r5, r5
    9032:	70dd      	strb	r5, [r3, #3]
  uip_acc32[2] = op32[2] + (op16 >> 8);
    9034:	7882      	ldrb	r2, [r0, #2]
    9036:	0a0f      	lsrs	r7, r1, #8
    9038:	443a      	add	r2, r7
    903a:	b2d2      	uxtb	r2, r2
    903c:	709a      	strb	r2, [r3, #2]
  uip_acc32[1] = op32[1];
    903e:	7844      	ldrb	r4, [r0, #1]
    9040:	705c      	strb	r4, [r3, #1]
  uip_acc32[0] = op32[0];
    9042:	7806      	ldrb	r6, [r0, #0]
    9044:	701e      	strb	r6, [r3, #0]
  if(uip_acc32[2] < (op16 >> 8)) {
    9046:	4297      	cmp	r7, r2
    9048:	d905      	bls.n	9056 <uip_add32+0x2e>
    ++uip_acc32[1];
    904a:	1c60      	adds	r0, r4, #1
    904c:	b2c0      	uxtb	r0, r0
    904e:	7058      	strb	r0, [r3, #1]
    if(uip_acc32[1] == 0) {
    9050:	b908      	cbnz	r0, 9056 <uip_add32+0x2e>
      ++uip_acc32[0];
    9052:	3601      	adds	r6, #1
    9054:	701e      	strb	r6, [r3, #0]
  if(uip_acc32[3] < (op16 & 0xff)) {
    9056:	b2c9      	uxtb	r1, r1
    9058:	428d      	cmp	r5, r1
    905a:	da0b      	bge.n	9074 <uip_add32+0x4c>
    ++uip_acc32[2];
    905c:	3201      	adds	r2, #1
    905e:	b2d2      	uxtb	r2, r2
    9060:	709a      	strb	r2, [r3, #2]
    if(uip_acc32[2] == 0) {
    9062:	b93a      	cbnz	r2, 9074 <uip_add32+0x4c>
      ++uip_acc32[1];
    9064:	785a      	ldrb	r2, [r3, #1]
    9066:	3201      	adds	r2, #1
    9068:	b2d2      	uxtb	r2, r2
    906a:	705a      	strb	r2, [r3, #1]
      if(uip_acc32[1] == 0) {
    906c:	b912      	cbnz	r2, 9074 <uip_add32+0x4c>
	++uip_acc32[0];
    906e:	781a      	ldrb	r2, [r3, #0]
    9070:	3201      	adds	r2, #1
    9072:	701a      	strb	r2, [r3, #0]
    9074:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9076:	bf00      	nop
    9078:	20008558 	.word	0x20008558

0000907c <uip_add_rcv_nxt>:
}
#endif /* UIP_REASSEMBLY */
/*---------------------------------------------------------------------------*/
static void
uip_add_rcv_nxt(u16_t n)
{
    907c:	b510      	push	{r4, lr}
  uip_add32(uip_conn->rcv_nxt, n);
    907e:	4c09      	ldr	r4, [pc, #36]	; (90a4 <uip_add_rcv_nxt+0x28>)
    9080:	6823      	ldr	r3, [r4, #0]
    9082:	4601      	mov	r1, r0
    9084:	f103 0008 	add.w	r0, r3, #8
    9088:	4b07      	ldr	r3, [pc, #28]	; (90a8 <uip_add_rcv_nxt+0x2c>)
    908a:	4798      	blx	r3
  uip_conn->rcv_nxt[0] = uip_acc32[0];
    908c:	4a07      	ldr	r2, [pc, #28]	; (90ac <uip_add_rcv_nxt+0x30>)
    908e:	6823      	ldr	r3, [r4, #0]
    9090:	7811      	ldrb	r1, [r2, #0]
    9092:	7219      	strb	r1, [r3, #8]
  uip_conn->rcv_nxt[1] = uip_acc32[1];
    9094:	7851      	ldrb	r1, [r2, #1]
    9096:	7259      	strb	r1, [r3, #9]
  uip_conn->rcv_nxt[2] = uip_acc32[2];
    9098:	7891      	ldrb	r1, [r2, #2]
  uip_conn->rcv_nxt[3] = uip_acc32[3];
    909a:	78d2      	ldrb	r2, [r2, #3]
  uip_conn->rcv_nxt[2] = uip_acc32[2];
    909c:	7299      	strb	r1, [r3, #10]
  uip_conn->rcv_nxt[3] = uip_acc32[3];
    909e:	72da      	strb	r2, [r3, #11]
    90a0:	bd10      	pop	{r4, pc}
    90a2:	bf00      	nop
    90a4:	20008568 	.word	0x20008568
    90a8:	00009029 	.word	0x00009029
    90ac:	20008558 	.word	0x20008558

000090b0 <uip_ipchksum>:
{
    90b0:	b510      	push	{r4, lr}
  sum = chksum(0, &uip_buf[UIP_LLH_LEN], UIP_IPH_LEN);
    90b2:	4908      	ldr	r1, [pc, #32]	; (90d4 <uip_ipchksum+0x24>)
    90b4:	4b08      	ldr	r3, [pc, #32]	; (90d8 <uip_ipchksum+0x28>)
    90b6:	2214      	movs	r2, #20
    90b8:	2000      	movs	r0, #0
    90ba:	4798      	blx	r3
  DEBUG_PRINTF("uip_ipchksum: sum 0x%04x\n", sum);
    90bc:	4b07      	ldr	r3, [pc, #28]	; (90dc <uip_ipchksum+0x2c>)
  sum = chksum(0, &uip_buf[UIP_LLH_LEN], UIP_IPH_LEN);
    90be:	4604      	mov	r4, r0
  DEBUG_PRINTF("uip_ipchksum: sum 0x%04x\n", sum);
    90c0:	4601      	mov	r1, r0
    90c2:	4807      	ldr	r0, [pc, #28]	; (90e0 <uip_ipchksum+0x30>)
    90c4:	4798      	blx	r3
  return (sum == 0) ? 0xffff : htons(sum);
    90c6:	b114      	cbz	r4, 90ce <uip_ipchksum+0x1e>
    90c8:	ba60      	rev16	r0, r4
    90ca:	b280      	uxth	r0, r0
    90cc:	bd10      	pop	{r4, pc}
    90ce:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
    90d2:	bd10      	pop	{r4, pc}
    90d4:	20008630 	.word	0x20008630
    90d8:	00008fb5 	.word	0x00008fb5
    90dc:	00000395 	.word	0x00000395
    90e0:	0000e43b 	.word	0x0000e43b

000090e4 <uip_tcpchksum>:
  return upper_layer_chksum(UIP_PROTO_TCP);
    90e4:	2006      	movs	r0, #6
    90e6:	4b01      	ldr	r3, [pc, #4]	; (90ec <uip_tcpchksum+0x8>)
    90e8:	4718      	bx	r3
    90ea:	bf00      	nop
    90ec:	00008fed 	.word	0x00008fed

000090f0 <uip_udpchksum>:
  return upper_layer_chksum(UIP_PROTO_UDP);
    90f0:	2011      	movs	r0, #17
    90f2:	4b01      	ldr	r3, [pc, #4]	; (90f8 <uip_udpchksum+0x8>)
    90f4:	4718      	bx	r3
    90f6:	bf00      	nop
    90f8:	00008fed 	.word	0x00008fed

000090fc <uip_init>:
{
    90fc:	b530      	push	{r4, r5, lr}
    90fe:	4b10      	ldr	r3, [pc, #64]	; (9140 <uip_init+0x44>)
    9100:	4810      	ldr	r0, [pc, #64]	; (9144 <uip_init+0x48>)
    9102:	2200      	movs	r2, #0
    9104:	801a      	strh	r2, [r3, #0]
    9106:	4b10      	ldr	r3, [pc, #64]	; (9148 <uip_init+0x4c>)
    9108:	7e5c      	ldrb	r4, [r3, #25]
    910a:	2501      	movs	r5, #1
  for(c = 0; c < UIP_CONNS; ++c) {
    910c:	4611      	mov	r1, r2
    910e:	b169      	cbz	r1, 912c <uip_init+0x30>
    9110:	b102      	cbz	r2, 9114 <uip_init+0x18>
    9112:	765c      	strb	r4, [r3, #25]
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
    9114:	2300      	movs	r3, #0
    9116:	490d      	ldr	r1, [pc, #52]	; (914c <uip_init+0x50>)
    9118:	7083      	strb	r3, [r0, #2]
    911a:	461a      	mov	r2, r3
    uip_udp_conns[c].lport = 0;
    911c:	461c      	mov	r4, r3
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
    911e:	2a0a      	cmp	r2, #10
    9120:	f101 0164 	add.w	r1, r1, #100	; 0x64
    9124:	d106      	bne.n	9134 <uip_init+0x38>
    9126:	b103      	cbz	r3, 912a <uip_init+0x2e>
    9128:	7082      	strb	r2, [r0, #2]
    912a:	bd30      	pop	{r4, r5, pc}
    uip_conns[c].tcpstateflags = UIP_CLOSED;
    912c:	460c      	mov	r4, r1
    912e:	2201      	movs	r2, #1
  for(c = 0; c < UIP_CONNS; ++c) {
    9130:	4629      	mov	r1, r5
    9132:	e7ec      	b.n	910e <uip_init+0x12>
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
    9134:	3201      	adds	r2, #1
    uip_udp_conns[c].lport = 0;
    9136:	f821 4c64 	strh.w	r4, [r1, #-100]
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
    913a:	b2d2      	uxtb	r2, r2
    913c:	2301      	movs	r3, #1
    913e:	e7ee      	b.n	911e <uip_init+0x22>
    9140:	200085e0 	.word	0x200085e0
    9144:	200072b6 	.word	0x200072b6
    9148:	2000856c 	.word	0x2000856c
    914c:	20008cd0 	.word	0x20008cd0

00009150 <uip_udp_new>:
{
    9150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9154:	4c24      	ldr	r4, [pc, #144]	; (91e8 <uip_udp_new+0x98>)
    9156:	4e25      	ldr	r6, [pc, #148]	; (91ec <uip_udp_new+0x9c>)
    9158:	88a2      	ldrh	r2, [r4, #4]
    if(uip_udp_conns[c].lport == htons(lastport)) {
    915a:	2764      	movs	r7, #100	; 0x64
  ++lastport;
    915c:	3201      	adds	r2, #1
    915e:	b292      	uxth	r2, r2
    lastport = 4096;
    9160:	f5b2 4ffa 	cmp.w	r2, #32000	; 0x7d00
    9164:	bf28      	it	cs
    9166:	f44f 5280 	movcs.w	r2, #4096	; 0x1000
}
/*---------------------------------------------------------------------------*/
u16_t
htons(u16_t val)
{
  return HTONS(val);
    916a:	0a15      	lsrs	r5, r2, #8
    916c:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
    9170:	b2ad      	uxth	r5, r5
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
    9172:	2300      	movs	r3, #0
    9174:	2b0a      	cmp	r3, #10
    9176:	d10e      	bne.n	9196 <uip_udp_new+0x46>
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
    9178:	2300      	movs	r3, #0
    917a:	f8df e070 	ldr.w	lr, [pc, #112]	; 91ec <uip_udp_new+0x9c>
    917e:	80a2      	strh	r2, [r4, #4]
    9180:	70a3      	strb	r3, [r4, #2]
    9182:	461f      	mov	r7, r3
    9184:	b2da      	uxtb	r2, r3
    9186:	2a0a      	cmp	r2, #10
    9188:	d10d      	bne.n	91a6 <uip_udp_new+0x56>
    918a:	b107      	cbz	r7, 918e <uip_udp_new+0x3e>
    918c:	70a2      	strb	r2, [r4, #2]
    return 0;
    918e:	2200      	movs	r2, #0
}
    9190:	4610      	mov	r0, r2
    9192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9196:	3301      	adds	r3, #1
    if(uip_udp_conns[c].lport == htons(lastport)) {
    9198:	fb07 6e03 	mla	lr, r7, r3, r6
    919c:	f83e ec60 	ldrh.w	lr, [lr, #-96]
    91a0:	45ae      	cmp	lr, r5
    91a2:	d1e7      	bne.n	9174 <uip_udp_new+0x24>
    91a4:	e7da      	b.n	915c <uip_udp_new+0xc>
    if(uip_udp_conns[c].lport == 0) {
    91a6:	f8be 8004 	ldrh.w	r8, [lr, #4]
    91aa:	f103 0c01 	add.w	ip, r3, #1
    91ae:	f10e 0e64 	add.w	lr, lr, #100	; 0x64
    91b2:	f1b8 0f00 	cmp.w	r8, #0
    91b6:	d10e      	bne.n	91d6 <uip_udp_new+0x86>
    91b8:	b107      	cbz	r7, 91bc <uip_udp_new+0x6c>
    91ba:	70a2      	strb	r2, [r4, #2]
      conn = &uip_udp_conns[c];
    91bc:	2464      	movs	r4, #100	; 0x64
    91be:	435c      	muls	r4, r3
    91c0:	19a2      	adds	r2, r4, r6
  conn->lport = HTONS(lastport);
    91c2:	8095      	strh	r5, [r2, #4]
  conn->rport = rport;
    91c4:	80d1      	strh	r1, [r2, #6]
  if(ripaddr == NULL) {
    91c6:	b948      	cbnz	r0, 91dc <uip_udp_new+0x8c>
    memset(conn->ripaddr, 0, sizeof(uip_ipaddr_t));
    91c8:	51a0      	str	r0, [r4, r6]
  conn->ttl = UIP_TTL;
    91ca:	2164      	movs	r1, #100	; 0x64
    91cc:	fb01 6303 	mla	r3, r1, r3, r6
    91d0:	2140      	movs	r1, #64	; 0x40
    91d2:	7219      	strb	r1, [r3, #8]
  return conn;
    91d4:	e7dc      	b.n	9190 <uip_udp_new+0x40>
    91d6:	4663      	mov	r3, ip
    91d8:	2701      	movs	r7, #1
    91da:	e7d3      	b.n	9184 <uip_udp_new+0x34>
    uip_ipaddr_copy(&conn->ripaddr, ripaddr);
    91dc:	8801      	ldrh	r1, [r0, #0]
    91de:	5331      	strh	r1, [r6, r4]
    91e0:	8841      	ldrh	r1, [r0, #2]
    91e2:	8051      	strh	r1, [r2, #2]
    91e4:	e7f1      	b.n	91ca <uip_udp_new+0x7a>
    91e6:	bf00      	nop
    91e8:	200072b6 	.word	0x200072b6
    91ec:	20008ccc 	.word	0x20008ccc

000091f0 <uip_process>:
  if(flag == UIP_UDP_SEND_CONN) {
    91f0:	2804      	cmp	r0, #4
{
    91f2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    91f6:	4cac      	ldr	r4, [pc, #688]	; (94a8 <uip_process+0x2b8>)
  if(flag == UIP_UDP_SEND_CONN) {
    91f8:	f000 80d6 	beq.w	93a8 <uip_process+0x1b8>
  register struct uip_conn *uip_connr = uip_conn;
    91fc:	f8df e2fc 	ldr.w	lr, [pc, #764]	; 94fc <uip_process+0x30c>
  uip_sappdata = uip_appdata = &uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN];
    9200:	49aa      	ldr	r1, [pc, #680]	; (94ac <uip_process+0x2bc>)
    9202:	4aab      	ldr	r2, [pc, #684]	; (94b0 <uip_process+0x2c0>)
    9204:	4fab      	ldr	r7, [pc, #684]	; (94b4 <uip_process+0x2c4>)
  register struct uip_conn *uip_connr = uip_conn;
    9206:	f8de 8000 	ldr.w	r8, [lr]
  uip_sappdata = uip_appdata = &uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN];
    920a:	600f      	str	r7, [r1, #0]
  if(flag == UIP_POLL_REQUEST) {
    920c:	2803      	cmp	r0, #3
  uip_sappdata = uip_appdata = &uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN];
    920e:	6017      	str	r7, [r2, #0]
    9210:	4675      	mov	r5, lr
    9212:	468a      	mov	sl, r1
    9214:	4616      	mov	r6, r2
  if(flag == UIP_POLL_REQUEST) {
    9216:	d11a      	bne.n	924e <uip_process+0x5e>
    if((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_ESTABLISHED &&
    9218:	f898 3019 	ldrb.w	r3, [r8, #25]
    921c:	f003 030f 	and.w	r3, r3, #15
    9220:	2b03      	cmp	r3, #3
    9222:	d13e      	bne.n	92a2 <uip_process+0xb2>
    9224:	f8b8 3010 	ldrh.w	r3, [r8, #16]
    9228:	2b00      	cmp	r3, #0
    922a:	d13a      	bne.n	92a2 <uip_process+0xb2>
	uip_flags = UIP_POLL;
    922c:	4ba2      	ldr	r3, [pc, #648]	; (94b8 <uip_process+0x2c8>)
    922e:	2208      	movs	r2, #8
    9230:	701a      	strb	r2, [r3, #0]
	UIP_APPCALL();
    9232:	4ba2      	ldr	r3, [pc, #648]	; (94bc <uip_process+0x2cc>)
    9234:	4798      	blx	r3
      if(uip_flags & UIP_ABORT) {
    9236:	4ba0      	ldr	r3, [pc, #640]	; (94b8 <uip_process+0x2c8>)
    9238:	781a      	ldrb	r2, [r3, #0]
    923a:	4ba1      	ldr	r3, [pc, #644]	; (94c0 <uip_process+0x2d0>)
    923c:	f012 0120 	ands.w	r1, r2, #32
    9240:	f000 854c 	beq.w	9cdc <uip_process+0xaec>
	uip_slen = 0;
    9244:	2200      	movs	r2, #0
    9246:	801a      	strh	r2, [r3, #0]
	uip_connr->tcpstateflags = UIP_CLOSED;
    9248:	f888 2019 	strb.w	r2, [r8, #25]
    924c:	e04c      	b.n	92e8 <uip_process+0xf8>
  } else if(flag == UIP_TIMER) {
    924e:	2802      	cmp	r0, #2
    9250:	f040 8095 	bne.w	937e <uip_process+0x18e>
    if(++iss[3] == 0) {
    9254:	4a9b      	ldr	r2, [pc, #620]	; (94c4 <uip_process+0x2d4>)
    9256:	7a53      	ldrb	r3, [r2, #9]
    9258:	3301      	adds	r3, #1
    925a:	b2db      	uxtb	r3, r3
    925c:	7253      	strb	r3, [r2, #9]
    925e:	b963      	cbnz	r3, 927a <uip_process+0x8a>
      if(++iss[2] == 0) {
    9260:	7a13      	ldrb	r3, [r2, #8]
    9262:	3301      	adds	r3, #1
    9264:	b2db      	uxtb	r3, r3
    9266:	7213      	strb	r3, [r2, #8]
    9268:	b93b      	cbnz	r3, 927a <uip_process+0x8a>
	if(++iss[1] == 0) {
    926a:	79d3      	ldrb	r3, [r2, #7]
    926c:	3301      	adds	r3, #1
    926e:	b2db      	uxtb	r3, r3
    9270:	71d3      	strb	r3, [r2, #7]
    9272:	b913      	cbnz	r3, 927a <uip_process+0x8a>
	  ++iss[0];
    9274:	7993      	ldrb	r3, [r2, #6]
    9276:	3301      	adds	r3, #1
    9278:	7193      	strb	r3, [r2, #6]
    uip_slen = 0;
    927a:	4b91      	ldr	r3, [pc, #580]	; (94c0 <uip_process+0x2d0>)
    uip_len = 0;
    927c:	2200      	movs	r2, #0
    uip_slen = 0;
    927e:	801a      	strh	r2, [r3, #0]
    if(uip_connr->tcpstateflags == UIP_TIME_WAIT ||
    9280:	f898 3019 	ldrb.w	r3, [r8, #25]
    uip_len = 0;
    9284:	8022      	strh	r2, [r4, #0]
    if(uip_connr->tcpstateflags == UIP_TIME_WAIT ||
    9286:	f003 01fd 	and.w	r1, r3, #253	; 0xfd
    928a:	2905      	cmp	r1, #5
    928c:	d10e      	bne.n	92ac <uip_process+0xbc>
      ++(uip_connr->timer);
    928e:	f898 301a 	ldrb.w	r3, [r8, #26]
    9292:	3301      	adds	r3, #1
    9294:	b2db      	uxtb	r3, r3
      if(uip_connr->timer == UIP_TIME_WAIT_TIMEOUT) {
    9296:	2b78      	cmp	r3, #120	; 0x78
      ++(uip_connr->timer);
    9298:	f888 301a 	strb.w	r3, [r8, #26]
      if(uip_connr->timer == UIP_TIME_WAIT_TIMEOUT) {
    929c:	d101      	bne.n	92a2 <uip_process+0xb2>
	uip_connr->tcpstateflags = UIP_CLOSED;
    929e:	f888 2019 	strb.w	r2, [r8, #25]
  uip_flags = 0;
    92a2:	4a85      	ldr	r2, [pc, #532]	; (94b8 <uip_process+0x2c8>)
  uip_len = 0;
    92a4:	2300      	movs	r3, #0
    92a6:	8023      	strh	r3, [r4, #0]
  uip_flags = 0;
    92a8:	7013      	strb	r3, [r2, #0]
  return;
    92aa:	e1a6      	b.n	95fa <uip_process+0x40a>
    } else if(uip_connr->tcpstateflags != UIP_CLOSED) {
    92ac:	2b00      	cmp	r3, #0
    92ae:	d0f8      	beq.n	92a2 <uip_process+0xb2>
      if(uip_outstanding(uip_connr)) {
    92b0:	f8b8 2010 	ldrh.w	r2, [r8, #16]
    92b4:	4880      	ldr	r0, [pc, #512]	; (94b8 <uip_process+0x2c8>)
    92b6:	2a00      	cmp	r2, #0
    92b8:	d05a      	beq.n	9370 <uip_process+0x180>
	if(uip_connr->timer-- == 0) {
    92ba:	f898 201a 	ldrb.w	r2, [r8, #26]
    92be:	1e51      	subs	r1, r2, #1
    92c0:	f888 101a 	strb.w	r1, [r8, #26]
    92c4:	2a00      	cmp	r2, #0
    92c6:	d1ec      	bne.n	92a2 <uip_process+0xb2>
	  if(uip_connr->nrtx == UIP_MAXRTX ||
    92c8:	f898 201b 	ldrb.w	r2, [r8, #27]
    92cc:	2a08      	cmp	r2, #8
    92ce:	d004      	beq.n	92da <uip_process+0xea>
    92d0:	1e59      	subs	r1, r3, #1
    92d2:	2901      	cmp	r1, #1
    92d4:	d80b      	bhi.n	92ee <uip_process+0xfe>
	       uip_connr->tcpstateflags == UIP_SYN_RCVD) &&
    92d6:	2a05      	cmp	r2, #5
    92d8:	d109      	bne.n	92ee <uip_process+0xfe>
	    uip_connr->tcpstateflags = UIP_CLOSED;
    92da:	2300      	movs	r3, #0
    92dc:	f888 3019 	strb.w	r3, [r8, #25]
	    uip_flags = UIP_TIMEDOUT;
    92e0:	2380      	movs	r3, #128	; 0x80
    92e2:	7003      	strb	r3, [r0, #0]
	    UIP_APPCALL();
    92e4:	4b75      	ldr	r3, [pc, #468]	; (94bc <uip_process+0x2cc>)
    92e6:	4798      	blx	r3
	BUF->flags = TCP_RST | TCP_ACK;
    92e8:	2214      	movs	r2, #20
    92ea:	f000 bcbd 	b.w	9c68 <uip_process+0xa78>
	  uip_connr->timer = UIP_RTO << (uip_connr->nrtx > 4?
    92ee:	2a04      	cmp	r2, #4
    92f0:	bf9a      	itte	ls
    92f2:	2103      	movls	r1, #3
    92f4:	4091      	lslls	r1, r2
    92f6:	2130      	movhi	r1, #48	; 0x30
    92f8:	f888 101a 	strb.w	r1, [r8, #26]
	  ++(uip_connr->nrtx);
    92fc:	3201      	adds	r2, #1
	  UIP_STAT(++uip_stat.tcp.rexmit);
    92fe:	4972      	ldr	r1, [pc, #456]	; (94c8 <uip_process+0x2d8>)
	  ++(uip_connr->nrtx);
    9300:	f888 201b 	strb.w	r2, [r8, #27]
	  UIP_STAT(++uip_stat.tcp.rexmit);
    9304:	8cca      	ldrh	r2, [r1, #38]	; 0x26
	  switch(uip_connr->tcpstateflags & UIP_TS_MASK) {
    9306:	f003 030f 	and.w	r3, r3, #15
	  UIP_STAT(++uip_stat.tcp.rexmit);
    930a:	3201      	adds	r2, #1
	  switch(uip_connr->tcpstateflags & UIP_TS_MASK) {
    930c:	3b01      	subs	r3, #1
	  UIP_STAT(++uip_stat.tcp.rexmit);
    930e:	84ca      	strh	r2, [r1, #38]	; 0x26
	  switch(uip_connr->tcpstateflags & UIP_TS_MASK) {
    9310:	2b07      	cmp	r3, #7
    9312:	d8c6      	bhi.n	92a2 <uip_process+0xb2>
    9314:	a201      	add	r2, pc, #4	; (adr r2, 931c <uip_process+0x12c>)
    9316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    931a:	bf00      	nop
    931c:	000099a3 	.word	0x000099a3
    9320:	000092a3 	.word	0x000092a3
    9324:	0000933d 	.word	0x0000933d
    9328:	00009c67 	.word	0x00009c67
    932c:	000092a3 	.word	0x000092a3
    9330:	00009c67 	.word	0x00009c67
    9334:	000092a3 	.word	0x000092a3
    9338:	00009c67 	.word	0x00009c67
	    uip_flags = UIP_REXMIT;
    933c:	2304      	movs	r3, #4
    933e:	7003      	strb	r3, [r0, #0]
	    UIP_APPCALL();
    9340:	4b5e      	ldr	r3, [pc, #376]	; (94bc <uip_process+0x2cc>)
    9342:	4798      	blx	r3
      uip_appdata = uip_sappdata;
    9344:	6833      	ldr	r3, [r6, #0]
    9346:	f8ca 3000 	str.w	r3, [sl]
      if(uip_slen > 0 && uip_connr->len > 0) {
    934a:	4b5d      	ldr	r3, [pc, #372]	; (94c0 <uip_process+0x2d0>)
    934c:	881b      	ldrh	r3, [r3, #0]
    934e:	2b00      	cmp	r3, #0
    9350:	f000 84e9 	beq.w	9d26 <uip_process+0xb36>
    9354:	f8b8 3010 	ldrh.w	r3, [r8, #16]
    9358:	2b00      	cmp	r3, #0
    935a:	f000 84e4 	beq.w	9d26 <uip_process+0xb36>
	uip_len = uip_connr->len + UIP_TCPIP_HLEN;
    935e:	3328      	adds	r3, #40	; 0x28
    9360:	8023      	strh	r3, [r4, #0]
	BUF->flags = TCP_ACK | TCP_PSH;
    9362:	2218      	movs	r2, #24
	BUF->flags = TCP_ACK;
    9364:	4b59      	ldr	r3, [pc, #356]	; (94cc <uip_process+0x2dc>)
    9366:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  BUF->tcpoffset = (UIP_TCPH_LEN / 4) << 4;
    936a:	2250      	movs	r2, #80	; 0x50
    936c:	4b57      	ldr	r3, [pc, #348]	; (94cc <uip_process+0x2dc>)
    936e:	e32b      	b.n	99c8 <uip_process+0x7d8>
      } else if((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_ESTABLISHED) {
    9370:	f003 030f 	and.w	r3, r3, #15
    9374:	2b03      	cmp	r3, #3
    9376:	d194      	bne.n	92a2 <uip_process+0xb2>
	uip_flags = UIP_POLL;
    9378:	2308      	movs	r3, #8
    937a:	7003      	strb	r3, [r0, #0]
    937c:	e759      	b.n	9232 <uip_process+0x42>
  if(flag == UIP_UDP_TIMER) {
    937e:	2805      	cmp	r0, #5
    9380:	d165      	bne.n	944e <uip_process+0x25e>
    if(uip_udp_conn->lport != 0) {
    9382:	4b53      	ldr	r3, [pc, #332]	; (94d0 <uip_process+0x2e0>)
    9384:	681b      	ldr	r3, [r3, #0]
    9386:	889b      	ldrh	r3, [r3, #4]
    9388:	2b00      	cmp	r3, #0
    938a:	d08a      	beq.n	92a2 <uip_process+0xb2>
      uip_sappdata = uip_appdata = &uip_buf[UIP_LLH_LEN + UIP_IPUDPH_LEN];
    938c:	3f0c      	subs	r7, #12
    938e:	6017      	str	r7, [r2, #0]
      uip_len = uip_slen = 0;
    9390:	4a4b      	ldr	r2, [pc, #300]	; (94c0 <uip_process+0x2d0>)
      uip_sappdata = uip_appdata = &uip_buf[UIP_LLH_LEN + UIP_IPUDPH_LEN];
    9392:	600f      	str	r7, [r1, #0]
      uip_conn = NULL;
    9394:	2300      	movs	r3, #0
      uip_len = uip_slen = 0;
    9396:	8013      	strh	r3, [r2, #0]
      uip_conn = NULL;
    9398:	f8ce 3000 	str.w	r3, [lr]
      uip_len = uip_slen = 0;
    939c:	8023      	strh	r3, [r4, #0]
      uip_flags = UIP_POLL;
    939e:	4b46      	ldr	r3, [pc, #280]	; (94b8 <uip_process+0x2c8>)
    93a0:	2208      	movs	r2, #8
    93a2:	701a      	strb	r2, [r3, #0]
  UIP_UDP_APPCALL();
    93a4:	4b4b      	ldr	r3, [pc, #300]	; (94d4 <uip_process+0x2e4>)
    93a6:	4798      	blx	r3
  if(uip_slen == 0) {
    93a8:	4b45      	ldr	r3, [pc, #276]	; (94c0 <uip_process+0x2d0>)
    93aa:	881b      	ldrh	r3, [r3, #0]
    93ac:	2b00      	cmp	r3, #0
    93ae:	f43f af78 	beq.w	92a2 <uip_process+0xb2>
  BUF->len[0] = (uip_len >> 8);
    93b2:	4d46      	ldr	r5, [pc, #280]	; (94cc <uip_process+0x2dc>)
  uip_len = uip_slen + UIP_IPUDPH_LEN;
    93b4:	f103 021c 	add.w	r2, r3, #28
    93b8:	b292      	uxth	r2, r2
  BUF->len[1] = (uip_len & 0xff);
    93ba:	746a      	strb	r2, [r5, #17]
  BUF->len[0] = (uip_len >> 8);
    93bc:	0a11      	lsrs	r1, r2, #8
  uip_len = uip_slen + UIP_IPUDPH_LEN;
    93be:	8022      	strh	r2, [r4, #0]
  BUF->ttl = uip_udp_conn->ttl;
    93c0:	4a43      	ldr	r2, [pc, #268]	; (94d0 <uip_process+0x2e0>)
  BUF->len[0] = (uip_len >> 8);
    93c2:	7429      	strb	r1, [r5, #16]
  BUF->ttl = uip_udp_conn->ttl;
    93c4:	6812      	ldr	r2, [r2, #0]
  UDPBUF->udplen = HTONS(uip_slen + UIP_UDPH_LEN);
    93c6:	3308      	adds	r3, #8
  BUF->ttl = uip_udp_conn->ttl;
    93c8:	7a11      	ldrb	r1, [r2, #8]
    93ca:	75a9      	strb	r1, [r5, #22]
  UDPBUF->udplen = HTONS(uip_slen + UIP_UDPH_LEN);
    93cc:	ba5b      	rev16	r3, r3
  BUF->proto = UIP_PROTO_UDP;
    93ce:	2111      	movs	r1, #17
    93d0:	75e9      	strb	r1, [r5, #23]
  UDPBUF->udplen = HTONS(uip_slen + UIP_UDPH_LEN);
    93d2:	84eb      	strh	r3, [r5, #38]	; 0x26
  UDPBUF->udpchksum = 0;
    93d4:	2300      	movs	r3, #0
    93d6:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
    93da:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
  BUF->srcport  = uip_udp_conn->lport;
    93de:	8893      	ldrh	r3, [r2, #4]
    93e0:	846b      	strh	r3, [r5, #34]	; 0x22
  BUF->destport = uip_udp_conn->rport;
    93e2:	88d3      	ldrh	r3, [r2, #6]
    93e4:	84ab      	strh	r3, [r5, #36]	; 0x24
  uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
    93e6:	4b3c      	ldr	r3, [pc, #240]	; (94d8 <uip_process+0x2e8>)
    93e8:	8819      	ldrh	r1, [r3, #0]
    93ea:	885b      	ldrh	r3, [r3, #2]
    93ec:	8369      	strh	r1, [r5, #26]
    93ee:	83ab      	strh	r3, [r5, #28]
  uip_ipaddr_copy(BUF->destipaddr, uip_udp_conn->ripaddr);
    93f0:	8813      	ldrh	r3, [r2, #0]
    93f2:	83eb      	strh	r3, [r5, #30]
    93f4:	8853      	ldrh	r3, [r2, #2]
    93f6:	842b      	strh	r3, [r5, #32]
  uip_appdata = &uip_buf[UIP_LLH_LEN + UIP_IPTCPH_LEN];
    93f8:	4b2c      	ldr	r3, [pc, #176]	; (94ac <uip_process+0x2bc>)
    93fa:	f105 0236 	add.w	r2, r5, #54	; 0x36
    93fe:	601a      	str	r2, [r3, #0]
  UDPBUF->udpchksum = ~(uip_udpchksum());
    9400:	4b36      	ldr	r3, [pc, #216]	; (94dc <uip_process+0x2ec>)
    9402:	4798      	blx	r3
    9404:	43c0      	mvns	r0, r0
    9406:	b280      	uxth	r0, r0
  if(UDPBUF->udpchksum == 0) {
    9408:	2800      	cmp	r0, #0
    940a:	f000 8151 	beq.w	96b0 <uip_process+0x4c0>
  UDPBUF->udpchksum = ~(uip_udpchksum());
    940e:	8528      	strh	r0, [r5, #40]	; 0x28
  BUF->vhl = 0x45;
    9410:	4d2e      	ldr	r5, [pc, #184]	; (94cc <uip_process+0x2dc>)
  ++ipid;
    9412:	492c      	ldr	r1, [pc, #176]	; (94c4 <uip_process+0x2d4>)
  BUF->ipchksum = ~(uip_ipchksum());
    9414:	4e32      	ldr	r6, [pc, #200]	; (94e0 <uip_process+0x2f0>)
  BUF->vhl = 0x45;
    9416:	2345      	movs	r3, #69	; 0x45
    9418:	73ab      	strb	r3, [r5, #14]
  ++ipid;
    941a:	880b      	ldrh	r3, [r1, #0]
    941c:	3301      	adds	r3, #1
    941e:	b29b      	uxth	r3, r3
  BUF->tos = 0;
    9420:	2200      	movs	r2, #0
  ++ipid;
    9422:	800b      	strh	r3, [r1, #0]
  BUF->ipid[0] = ipid >> 8;
    9424:	0a19      	lsrs	r1, r3, #8
  BUF->tos = 0;
    9426:	73ea      	strb	r2, [r5, #15]
  BUF->ipoffset[0] = BUF->ipoffset[1] = 0;
    9428:	756a      	strb	r2, [r5, #21]
    942a:	752a      	strb	r2, [r5, #20]
  BUF->ipchksum = 0;
    942c:	762a      	strb	r2, [r5, #24]
    942e:	766a      	strb	r2, [r5, #25]
  BUF->ipid[0] = ipid >> 8;
    9430:	74a9      	strb	r1, [r5, #18]
  BUF->ipid[1] = ipid & 0xff;
    9432:	74eb      	strb	r3, [r5, #19]
  BUF->ipchksum = ~(uip_ipchksum());
    9434:	47b0      	blx	r6
    9436:	43c0      	mvns	r0, r0
    9438:	8328      	strh	r0, [r5, #24]
  DEBUG_PRINTF("uip ip_send_nolen: chkecum 0x%04x\n", uip_ipchksum());
    943a:	47b0      	blx	r6
    943c:	4b29      	ldr	r3, [pc, #164]	; (94e4 <uip_process+0x2f4>)
    943e:	4601      	mov	r1, r0
    9440:	4829      	ldr	r0, [pc, #164]	; (94e8 <uip_process+0x2f8>)
    9442:	4798      	blx	r3
  UIP_STAT(++uip_stat.tcp.sent);
    9444:	4a20      	ldr	r2, [pc, #128]	; (94c8 <uip_process+0x2d8>)
    9446:	8bd3      	ldrh	r3, [r2, #30]
    9448:	3301      	adds	r3, #1
    944a:	83d3      	strh	r3, [r2, #30]
    944c:	e0c5      	b.n	95da <uip_process+0x3ea>
  UIP_STAT(++uip_stat.ip.recv);
    944e:	4b1e      	ldr	r3, [pc, #120]	; (94c8 <uip_process+0x2d8>)
    9450:	885a      	ldrh	r2, [r3, #2]
  if(BUF->vhl != 0x45)  { /* IP version and header length. */
    9452:	3f36      	subs	r7, #54	; 0x36
  UIP_STAT(++uip_stat.ip.recv);
    9454:	3201      	adds	r2, #1
    9456:	805a      	strh	r2, [r3, #2]
  if(BUF->vhl != 0x45)  { /* IP version and header length. */
    9458:	7bba      	ldrb	r2, [r7, #14]
    945a:	2a45      	cmp	r2, #69	; 0x45
    945c:	4699      	mov	r9, r3
    945e:	d009      	beq.n	9474 <uip_process+0x284>
    UIP_STAT(++uip_stat.ip.drop);
    9460:	881a      	ldrh	r2, [r3, #0]
    UIP_LOG("ip: invalid version or header length.");
    9462:	4822      	ldr	r0, [pc, #136]	; (94ec <uip_process+0x2fc>)
    UIP_STAT(++uip_stat.ip.drop);
    9464:	3201      	adds	r2, #1
    9466:	801a      	strh	r2, [r3, #0]
    UIP_STAT(++uip_stat.ip.vhlerr);
    9468:	88da      	ldrh	r2, [r3, #6]
    946a:	3201      	adds	r2, #1
    946c:	80da      	strh	r2, [r3, #6]
    UIP_LOG("ip: packet shorter than reported in IP header.");
    946e:	4b20      	ldr	r3, [pc, #128]	; (94f0 <uip_process+0x300>)
    9470:	4798      	blx	r3
    goto drop;
    9472:	e716      	b.n	92a2 <uip_process+0xb2>
  if((BUF->len[0] << 8) + BUF->len[1] <= uip_len) {
    9474:	7c3a      	ldrb	r2, [r7, #16]
    9476:	7c7b      	ldrb	r3, [r7, #17]
    9478:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    947c:	8822      	ldrh	r2, [r4, #0]
    947e:	4293      	cmp	r3, r2
    9480:	dc0f      	bgt.n	94a2 <uip_process+0x2b2>
    uip_len = (BUF->len[0] << 8) + BUF->len[1];
    9482:	8023      	strh	r3, [r4, #0]
  if((BUF->ipoffset[0] & 0x3f) != 0 ||
    9484:	7d3b      	ldrb	r3, [r7, #20]
    9486:	0699      	lsls	r1, r3, #26
    9488:	d03a      	beq.n	9500 <uip_process+0x310>
    UIP_STAT(++uip_stat.ip.drop);
    948a:	f8b9 3000 	ldrh.w	r3, [r9]
    UIP_LOG("ip: fragment dropped.");
    948e:	4819      	ldr	r0, [pc, #100]	; (94f4 <uip_process+0x304>)
    UIP_STAT(++uip_stat.ip.drop);
    9490:	3301      	adds	r3, #1
    9492:	f8a9 3000 	strh.w	r3, [r9]
    UIP_STAT(++uip_stat.ip.fragerr);
    9496:	f8b9 300c 	ldrh.w	r3, [r9, #12]
    949a:	3301      	adds	r3, #1
    949c:	f8a9 300c 	strh.w	r3, [r9, #12]
    94a0:	e7e5      	b.n	946e <uip_process+0x27e>
    UIP_LOG("ip: packet shorter than reported in IP header.");
    94a2:	4815      	ldr	r0, [pc, #84]	; (94f8 <uip_process+0x308>)
    94a4:	e7e3      	b.n	946e <uip_process+0x27e>
    94a6:	bf00      	nop
    94a8:	20008550 	.word	0x20008550
    94ac:	20008564 	.word	0x20008564
    94b0:	20008554 	.word	0x20008554
    94b4:	20008658 	.word	0x20008658
    94b8:	2000855c 	.word	0x2000855c
    94bc:	0000acf1 	.word	0x0000acf1
    94c0:	20008cc8 	.word	0x20008cc8
    94c4:	200072b6 	.word	0x200072b6
    94c8:	200085e6 	.word	0x200085e6
    94cc:	20008622 	.word	0x20008622
    94d0:	20008560 	.word	0x20008560
    94d4:	000071dd 	.word	0x000071dd
    94d8:	2000861e 	.word	0x2000861e
    94dc:	000090f1 	.word	0x000090f1
    94e0:	000090b1 	.word	0x000090b1
    94e4:	00000395 	.word	0x00000395
    94e8:	0000e590 	.word	0x0000e590
    94ec:	0000e455 	.word	0x0000e455
    94f0:	0000ad01 	.word	0x0000ad01
    94f4:	0000e4aa 	.word	0x0000e4aa
    94f8:	0000e47b 	.word	0x0000e47b
    94fc:	20008568 	.word	0x20008568
     BUF->ipoffset[1] != 0) {
    9500:	f897 b015 	ldrb.w	fp, [r7, #21]
  if((BUF->ipoffset[0] & 0x3f) != 0 ||
    9504:	f1bb 0f00 	cmp.w	fp, #0
    9508:	d1bf      	bne.n	948a <uip_process+0x29a>
  if(uip_ipaddr_cmp(uip_hostaddr, all_zeroes_addr)) {
    950a:	4bba      	ldr	r3, [pc, #744]	; (97f4 <uip_process+0x604>)
    950c:	881a      	ldrh	r2, [r3, #0]
    950e:	b90a      	cbnz	r2, 9514 <uip_process+0x324>
    9510:	8859      	ldrh	r1, [r3, #2]
    9512:	b161      	cbz	r1, 952e <uip_process+0x33e>
    if(!uip_ipaddr_cmp(BUF->destipaddr, uip_hostaddr)) {
    9514:	8bf9      	ldrh	r1, [r7, #30]
    9516:	4291      	cmp	r1, r2
    9518:	d103      	bne.n	9522 <uip_process+0x332>
    951a:	8c39      	ldrh	r1, [r7, #32]
    951c:	885a      	ldrh	r2, [r3, #2]
    951e:	4291      	cmp	r1, r2
    9520:	d005      	beq.n	952e <uip_process+0x33e>
      UIP_STAT(++uip_stat.ip.drop);
    9522:	f8b9 3000 	ldrh.w	r3, [r9]
    9526:	3301      	adds	r3, #1
    9528:	f8a9 3000 	strh.w	r3, [r9]
      goto drop;
    952c:	e6b9      	b.n	92a2 <uip_process+0xb2>
  if(uip_ipchksum() != 0xffff) { /* Compute and check the IP header
    952e:	4ab2      	ldr	r2, [pc, #712]	; (97f8 <uip_process+0x608>)
    9530:	9301      	str	r3, [sp, #4]
    9532:	4790      	blx	r2
    9534:	f64f 72ff 	movw	r2, #65535	; 0xffff
    9538:	4290      	cmp	r0, r2
    953a:	4680      	mov	r8, r0
    953c:	9b01      	ldr	r3, [sp, #4]
    953e:	d00b      	beq.n	9558 <uip_process+0x368>
    UIP_STAT(++uip_stat.ip.drop);
    9540:	f8b9 3000 	ldrh.w	r3, [r9]
    UIP_LOG("ip: bad checksum.");
    9544:	48ad      	ldr	r0, [pc, #692]	; (97fc <uip_process+0x60c>)
    UIP_STAT(++uip_stat.ip.drop);
    9546:	3301      	adds	r3, #1
    9548:	f8a9 3000 	strh.w	r3, [r9]
    UIP_STAT(++uip_stat.ip.chkerr);
    954c:	f8b9 300e 	ldrh.w	r3, [r9, #14]
    9550:	3301      	adds	r3, #1
    9552:	f8a9 300e 	strh.w	r3, [r9, #14]
    9556:	e78a      	b.n	946e <uip_process+0x27e>
  if(BUF->proto == UIP_PROTO_TCP) { /* Check for TCP packet. If so,
    9558:	7dfa      	ldrb	r2, [r7, #23]
    955a:	2a06      	cmp	r2, #6
    955c:	f000 80af 	beq.w	96be <uip_process+0x4ce>
  if(BUF->proto == UIP_PROTO_UDP) {
    9560:	2a11      	cmp	r2, #17
    9562:	d04d      	beq.n	9600 <uip_process+0x410>
  if(BUF->proto != UIP_PROTO_ICMP) { /* We only allow ICMP packets from
    9564:	2a01      	cmp	r2, #1
    9566:	d00b      	beq.n	9580 <uip_process+0x390>
    UIP_STAT(++uip_stat.ip.drop);
    9568:	f8b9 3000 	ldrh.w	r3, [r9]
    UIP_LOG("ip: neither tcp nor icmp.");
    956c:	48a4      	ldr	r0, [pc, #656]	; (9800 <uip_process+0x610>)
    UIP_STAT(++uip_stat.ip.drop);
    956e:	3301      	adds	r3, #1
    9570:	f8a9 3000 	strh.w	r3, [r9]
    UIP_STAT(++uip_stat.ip.protoerr);
    9574:	f8b9 3010 	ldrh.w	r3, [r9, #16]
    9578:	3301      	adds	r3, #1
    957a:	f8a9 3010 	strh.w	r3, [r9, #16]
    957e:	e776      	b.n	946e <uip_process+0x27e>
  UIP_STAT(++uip_stat.icmp.recv);
    9580:	f8b9 2014 	ldrh.w	r2, [r9, #20]
    9584:	3201      	adds	r2, #1
    9586:	f8a9 2014 	strh.w	r2, [r9, #20]
  if(ICMPBUF->type != ICMP_ECHO) {
    958a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
    958e:	2a08      	cmp	r2, #8
    9590:	d00b      	beq.n	95aa <uip_process+0x3ba>
    UIP_STAT(++uip_stat.icmp.drop);
    9592:	f8b9 3012 	ldrh.w	r3, [r9, #18]
    UIP_LOG("icmp: not icmp echo.");
    9596:	489b      	ldr	r0, [pc, #620]	; (9804 <uip_process+0x614>)
    UIP_STAT(++uip_stat.icmp.drop);
    9598:	3301      	adds	r3, #1
    959a:	f8a9 3012 	strh.w	r3, [r9, #18]
    UIP_STAT(++uip_stat.icmp.typeerr);
    959e:	f8b9 3018 	ldrh.w	r3, [r9, #24]
    95a2:	3301      	adds	r3, #1
    95a4:	f8a9 3018 	strh.w	r3, [r9, #24]
    95a8:	e761      	b.n	946e <uip_process+0x27e>
  ICMPBUF->type = ICMP_ECHO_REPLY;
    95aa:	2200      	movs	r2, #0
    95ac:	f887 2022 	strb.w	r2, [r7, #34]	; 0x22
  if(ICMPBUF->icmpchksum >= HTONS(0xffff - (ICMP_ECHO << 8))) {
    95b0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
    95b2:	f64f 71f6 	movw	r1, #65526	; 0xfff6
    95b6:	428a      	cmp	r2, r1
    ICMPBUF->icmpchksum += HTONS(ICMP_ECHO << 8) + 1;
    95b8:	bf8c      	ite	hi
    95ba:	3209      	addhi	r2, #9
    ICMPBUF->icmpchksum += HTONS(ICMP_ECHO << 8);
    95bc:	3208      	addls	r2, #8
    95be:	84ba      	strh	r2, [r7, #36]	; 0x24
  uip_ipaddr_copy(BUF->destipaddr, BUF->srcipaddr);
    95c0:	8b7a      	ldrh	r2, [r7, #26]
    95c2:	83fa      	strh	r2, [r7, #30]
    95c4:	8bba      	ldrh	r2, [r7, #28]
    95c6:	843a      	strh	r2, [r7, #32]
  uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
    95c8:	881a      	ldrh	r2, [r3, #0]
    95ca:	885b      	ldrh	r3, [r3, #2]
    95cc:	83bb      	strh	r3, [r7, #28]
  UIP_STAT(++uip_stat.icmp.sent);
    95ce:	f8b9 3016 	ldrh.w	r3, [r9, #22]
  uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
    95d2:	837a      	strh	r2, [r7, #26]
  UIP_STAT(++uip_stat.icmp.sent);
    95d4:	3301      	adds	r3, #1
    95d6:	f8a9 3016 	strh.w	r3, [r9, #22]
  DEBUG_PRINTF("Sending packet with length %d (%d)\n", uip_len,
    95da:	4b8b      	ldr	r3, [pc, #556]	; (9808 <uip_process+0x618>)
    95dc:	8821      	ldrh	r1, [r4, #0]
    95de:	7c1a      	ldrb	r2, [r3, #16]
    95e0:	7c5b      	ldrb	r3, [r3, #17]
    95e2:	488a      	ldr	r0, [pc, #552]	; (980c <uip_process+0x61c>)
    95e4:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
    95e8:	4b89      	ldr	r3, [pc, #548]	; (9810 <uip_process+0x620>)
    95ea:	4798      	blx	r3
  UIP_STAT(++uip_stat.ip.sent);
    95ec:	4a89      	ldr	r2, [pc, #548]	; (9814 <uip_process+0x624>)
    95ee:	8893      	ldrh	r3, [r2, #4]
    95f0:	3301      	adds	r3, #1
    95f2:	8093      	strh	r3, [r2, #4]
  uip_flags = 0;
    95f4:	4b88      	ldr	r3, [pc, #544]	; (9818 <uip_process+0x628>)
    95f6:	2200      	movs	r2, #0
    95f8:	701a      	strb	r2, [r3, #0]
}
    95fa:	b003      	add	sp, #12
    95fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uip_len = uip_len - UIP_IPUDPH_LEN;
    9600:	8823      	ldrh	r3, [r4, #0]
    9602:	3b1c      	subs	r3, #28
    9604:	8023      	strh	r3, [r4, #0]
  uip_appdata = &uip_buf[UIP_LLH_LEN + UIP_IPUDPH_LEN];
    9606:	4b85      	ldr	r3, [pc, #532]	; (981c <uip_process+0x62c>)
    9608:	f8ca 3000 	str.w	r3, [sl]
  if(UDPBUF->udpchksum != 0 && uip_udpchksum() != 0xffff) {
    960c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
    960e:	9301      	str	r3, [sp, #4]
    9610:	b17a      	cbz	r2, 9632 <uip_process+0x442>
    9612:	4b83      	ldr	r3, [pc, #524]	; (9820 <uip_process+0x630>)
    9614:	4798      	blx	r3
    9616:	4540      	cmp	r0, r8
    9618:	d00b      	beq.n	9632 <uip_process+0x442>
    UIP_STAT(++uip_stat.udp.drop);
    961a:	f8b9 302c 	ldrh.w	r3, [r9, #44]	; 0x2c
    UIP_LOG("udp: bad checksum.");
    961e:	4881      	ldr	r0, [pc, #516]	; (9824 <uip_process+0x634>)
    UIP_STAT(++uip_stat.udp.drop);
    9620:	3301      	adds	r3, #1
    9622:	f8a9 302c 	strh.w	r3, [r9, #44]	; 0x2c
    UIP_STAT(++uip_stat.udp.chkerr);
    9626:	f8b9 3032 	ldrh.w	r3, [r9, #50]	; 0x32
    962a:	3301      	adds	r3, #1
    962c:	f8a9 3032 	strh.w	r3, [r9, #50]	; 0x32
    9630:	e71d      	b.n	946e <uip_process+0x27e>
  for(uip_udp_conn = &uip_udp_conns[0];
    9632:	4a7d      	ldr	r2, [pc, #500]	; (9828 <uip_process+0x638>)
    9634:	4b7d      	ldr	r3, [pc, #500]	; (982c <uip_process+0x63c>)
    9636:	6013      	str	r3, [r2, #0]
       UDPBUF->destport == uip_udp_conn->lport &&
    9638:	f8b7 c024 	ldrh.w	ip, [r7, #36]	; 0x24
        UDPBUF->srcport == uip_udp_conn->rport) &&
    963c:	f8b7 8022 	ldrh.w	r8, [r7, #34]	; 0x22
	uip_ipaddr_cmp(BUF->srcipaddr, uip_udp_conn->ripaddr))) {
    9640:	f8b7 901a 	ldrh.w	r9, [r7, #26]
    9644:	f8b7 a01c 	ldrh.w	sl, [r7, #28]
  for(uip_udp_conn = &uip_udp_conns[0];
    9648:	2100      	movs	r1, #0
    964a:	f503 7e7a 	add.w	lr, r3, #1000	; 0x3e8
       (uip_ipaddr_cmp(uip_udp_conn->ripaddr, all_zeroes_addr) ||
    964e:	f64f 77ff 	movw	r7, #65535	; 0xffff
  for(uip_udp_conn = &uip_udp_conns[0];
    9652:	4573      	cmp	r3, lr
    9654:	d303      	bcc.n	965e <uip_process+0x46e>
    9656:	b101      	cbz	r1, 965a <uip_process+0x46a>
    9658:	6013      	str	r3, [r2, #0]
  UIP_LOG("udp: no matching connection found");
    965a:	4875      	ldr	r0, [pc, #468]	; (9830 <uip_process+0x640>)
    965c:	e707      	b.n	946e <uip_process+0x27e>
    if(uip_udp_conn->lport != 0 &&
    965e:	8898      	ldrh	r0, [r3, #4]
    9660:	b318      	cbz	r0, 96aa <uip_process+0x4ba>
    9662:	4560      	cmp	r0, ip
    9664:	d121      	bne.n	96aa <uip_process+0x4ba>
       (uip_udp_conn->rport == 0 ||
    9666:	88d8      	ldrh	r0, [r3, #6]
       UDPBUF->destport == uip_udp_conn->lport &&
    9668:	b108      	cbz	r0, 966e <uip_process+0x47e>
       (uip_udp_conn->rport == 0 ||
    966a:	4540      	cmp	r0, r8
    966c:	d11d      	bne.n	96aa <uip_process+0x4ba>
       (uip_ipaddr_cmp(uip_udp_conn->ripaddr, all_zeroes_addr) ||
    966e:	8818      	ldrh	r0, [r3, #0]
        UDPBUF->srcport == uip_udp_conn->rport) &&
    9670:	b980      	cbnz	r0, 9694 <uip_process+0x4a4>
       (uip_ipaddr_cmp(uip_udp_conn->ripaddr, all_zeroes_addr) ||
    9672:	f8b3 b002 	ldrh.w	fp, [r3, #2]
    9676:	f1bb 0f00 	cmp.w	fp, #0
    967a:	d111      	bne.n	96a0 <uip_process+0x4b0>
    967c:	b101      	cbz	r1, 9680 <uip_process+0x490>
    967e:	6013      	str	r3, [r2, #0]
  uip_flags = UIP_NEWDATA;
    9680:	4a65      	ldr	r2, [pc, #404]	; (9818 <uip_process+0x628>)
    9682:	2102      	movs	r1, #2
    9684:	7011      	strb	r1, [r2, #0]
  uip_sappdata = uip_appdata = &uip_buf[UIP_LLH_LEN + UIP_IPUDPH_LEN];
    9686:	9a01      	ldr	r2, [sp, #4]
    9688:	6032      	str	r2, [r6, #0]
  uip_slen = 0;
    968a:	4a6a      	ldr	r2, [pc, #424]	; (9834 <uip_process+0x644>)
  uip_conn = NULL;
    968c:	2300      	movs	r3, #0
    968e:	602b      	str	r3, [r5, #0]
  uip_slen = 0;
    9690:	8013      	strh	r3, [r2, #0]
    9692:	e687      	b.n	93a4 <uip_process+0x1b4>
       (uip_ipaddr_cmp(uip_udp_conn->ripaddr, all_zeroes_addr) ||
    9694:	42b8      	cmp	r0, r7
    9696:	d103      	bne.n	96a0 <uip_process+0x4b0>
	uip_ipaddr_cmp(uip_udp_conn->ripaddr, all_ones_addr) ||
    9698:	f8b3 b002 	ldrh.w	fp, [r3, #2]
    969c:	45bb      	cmp	fp, r7
    969e:	d0ed      	beq.n	967c <uip_process+0x48c>
    96a0:	4548      	cmp	r0, r9
    96a2:	d102      	bne.n	96aa <uip_process+0x4ba>
	uip_ipaddr_cmp(BUF->srcipaddr, uip_udp_conn->ripaddr))) {
    96a4:	8858      	ldrh	r0, [r3, #2]
    96a6:	4550      	cmp	r0, sl
    96a8:	d0e8      	beq.n	967c <uip_process+0x48c>
    96aa:	3364      	adds	r3, #100	; 0x64
    96ac:	2101      	movs	r1, #1
    96ae:	e7d0      	b.n	9652 <uip_process+0x462>
    UDPBUF->udpchksum = 0xffff;
    96b0:	f04f 33ff 	mov.w	r3, #4294967295
    96b4:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
    96b8:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
    96bc:	e6a8      	b.n	9410 <uip_process+0x220>
  UIP_STAT(++uip_stat.tcp.recv);
    96be:	f8b9 201c 	ldrh.w	r2, [r9, #28]
    96c2:	9301      	str	r3, [sp, #4]
    96c4:	3201      	adds	r2, #1
    96c6:	f8a9 201c 	strh.w	r2, [r9, #28]
  if(uip_tcpchksum() != 0xffff) {   /* Compute and check the TCP
    96ca:	4a5b      	ldr	r2, [pc, #364]	; (9838 <uip_process+0x648>)
    96cc:	4790      	blx	r2
    96ce:	4540      	cmp	r0, r8
    96d0:	f040 80bc 	bne.w	984c <uip_process+0x65c>
    if(uip_connr->tcpstateflags != UIP_CLOSED &&
    96d4:	4859      	ldr	r0, [pc, #356]	; (983c <uip_process+0x64c>)
    96d6:	9b01      	ldr	r3, [sp, #4]
    96d8:	7e42      	ldrb	r2, [r0, #25]
    96da:	4680      	mov	r8, r0
    96dc:	b1a2      	cbz	r2, 9708 <uip_process+0x518>
    96de:	f8b7 e024 	ldrh.w	lr, [r7, #36]	; 0x24
    96e2:	8881      	ldrh	r1, [r0, #4]
    96e4:	458e      	cmp	lr, r1
    96e6:	d10f      	bne.n	9708 <uip_process+0x518>
       BUF->destport == uip_connr->lport &&
    96e8:	f8b7 e022 	ldrh.w	lr, [r7, #34]	; 0x22
    96ec:	88c1      	ldrh	r1, [r0, #6]
    96ee:	458e      	cmp	lr, r1
    96f0:	d10a      	bne.n	9708 <uip_process+0x518>
       BUF->srcport == uip_connr->rport &&
    96f2:	f8b7 e01a 	ldrh.w	lr, [r7, #26]
    96f6:	8801      	ldrh	r1, [r0, #0]
    96f8:	458e      	cmp	lr, r1
    96fa:	d105      	bne.n	9708 <uip_process+0x518>
       uip_ipaddr_cmp(BUF->srcipaddr, uip_connr->ripaddr)) {
    96fc:	f8b7 e01c 	ldrh.w	lr, [r7, #28]
    9700:	8841      	ldrh	r1, [r0, #2]
    9702:	458e      	cmp	lr, r1
    9704:	f000 81af 	beq.w	9a66 <uip_process+0x876>
  if((BUF->flags & TCP_CTL) != TCP_SYN) {
    9708:	f897 c02f 	ldrb.w	ip, [r7, #47]	; 0x2f
    970c:	f00c 013f 	and.w	r1, ip, #63	; 0x3f
    9710:	2902      	cmp	r1, #2
    9712:	f040 80ae 	bne.w	9872 <uip_process+0x682>
    if(tmp16 == uip_listenports[c])
    9716:	4e4a      	ldr	r6, [pc, #296]	; (9840 <uip_process+0x650>)
  tmp16 = BUF->destport;
    9718:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
    if(tmp16 == uip_listenports[c])
    971a:	8836      	ldrh	r6, [r6, #0]
  tmp16 = BUF->destport;
    971c:	4849      	ldr	r0, [pc, #292]	; (9844 <uip_process+0x654>)
  for(c = 0; c < UIP_LISTENPORTS; ++c) {
    971e:	f04f 0800 	mov.w	r8, #0
    if(tmp16 == uip_listenports[c])
    9722:	42b1      	cmp	r1, r6
  tmp16 = BUF->destport;
    9724:	468e      	mov	lr, r1
    9726:	8141      	strh	r1, [r0, #10]
  for(c = 0; c < UIP_LISTENPORTS; ++c) {
    9728:	f880 8002 	strb.w	r8, [r0, #2]
    972c:	4606      	mov	r6, r0
    if(tmp16 == uip_listenports[c])
    972e:	f040 8099 	bne.w	9864 <uip_process+0x674>
    if(uip_conns[c].tcpstateflags == UIP_CLOSED) {
    9732:	2a00      	cmp	r2, #0
    9734:	f040 8102 	bne.w	993c <uip_process+0x74c>
      uip_connr = &uip_conns[c];
    9738:	f8df 8100 	ldr.w	r8, [pc, #256]	; 983c <uip_process+0x64c>
  uip_conn = uip_connr;
    973c:	f8c5 8000 	str.w	r8, [r5]
  uip_connr->rto = uip_connr->timer = UIP_RTO;
    9740:	2303      	movs	r3, #3
    9742:	f888 301a 	strb.w	r3, [r8, #26]
    9746:	f888 3018 	strb.w	r3, [r8, #24]
  uip_connr->sa = 0;
    974a:	2500      	movs	r5, #0
  uip_connr->sv = 4;
    974c:	2304      	movs	r3, #4
  uip_connr->sa = 0;
    974e:	f888 5016 	strb.w	r5, [r8, #22]
  uip_connr->sv = 4;
    9752:	f888 3017 	strb.w	r3, [r8, #23]
  uip_connr->nrtx = 0;
    9756:	f888 501b 	strb.w	r5, [r8, #27]
  uip_connr->lport = BUF->destport;
    975a:	f8a8 e004 	strh.w	lr, [r8, #4]
  uip_connr->rport = BUF->srcport;
    975e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    9762:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
    9766:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    976a:	f8a8 3006 	strh.w	r3, [r8, #6]
  uip_ipaddr_copy(uip_connr->ripaddr, BUF->srcipaddr);
    976e:	8b7b      	ldrh	r3, [r7, #26]
    9770:	f8a8 3000 	strh.w	r3, [r8]
    9774:	8bbb      	ldrh	r3, [r7, #28]
    9776:	f8a8 3002 	strh.w	r3, [r8, #2]
  uip_connr->snd_nxt[0] = iss[0];
    977a:	79b3      	ldrb	r3, [r6, #6]
    977c:	f888 300c 	strb.w	r3, [r8, #12]
  uip_connr->snd_nxt[1] = iss[1];
    9780:	79f3      	ldrb	r3, [r6, #7]
    9782:	f888 300d 	strb.w	r3, [r8, #13]
  uip_connr->snd_nxt[2] = iss[2];
    9786:	7a33      	ldrb	r3, [r6, #8]
    9788:	f888 300e 	strb.w	r3, [r8, #14]
  uip_connr->snd_nxt[3] = iss[3];
    978c:	7a73      	ldrb	r3, [r6, #9]
    978e:	f888 300f 	strb.w	r3, [r8, #15]
  uip_connr->rcv_nxt[3] = BUF->seqno[3];
    9792:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
    9796:	f888 300b 	strb.w	r3, [r8, #11]
  uip_connr->rcv_nxt[2] = BUF->seqno[2];
    979a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    979e:	f888 300a 	strb.w	r3, [r8, #10]
  uip_connr->rcv_nxt[1] = BUF->seqno[1];
    97a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    97a6:	f888 3009 	strb.w	r3, [r8, #9]
  uip_connr->tcpstateflags = UIP_SYN_RCVD;
    97aa:	2001      	movs	r0, #1
  uip_connr->rcv_nxt[0] = BUF->seqno[0];
    97ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    97b0:	f888 3008 	strb.w	r3, [r8, #8]
  uip_connr->tcpstateflags = UIP_SYN_RCVD;
    97b4:	f888 0019 	strb.w	r0, [r8, #25]
  uip_add_rcv_nxt(1);
    97b8:	4b23      	ldr	r3, [pc, #140]	; (9848 <uip_process+0x658>)
  uip_connr->len = 1;
    97ba:	f8a8 0010 	strh.w	r0, [r8, #16]
  uip_add_rcv_nxt(1);
    97be:	4798      	blx	r3
  if((BUF->tcpoffset & 0xf0) > 0x50) {
    97c0:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
    97c4:	f002 03f0 	and.w	r3, r2, #240	; 0xf0
    97c8:	2b50      	cmp	r3, #80	; 0x50
    97ca:	f240 80ea 	bls.w	99a2 <uip_process+0x7b2>
    for(c = 0; c < ((BUF->tcpoffset >> 4) - 5) << 2 ;) {
    97ce:	0912      	lsrs	r2, r2, #4
    97d0:	3a05      	subs	r2, #5
    97d2:	70b5      	strb	r5, [r6, #2]
    97d4:	0092      	lsls	r2, r2, #2
    97d6:	4593      	cmp	fp, r2
    97d8:	da06      	bge.n	97e8 <uip_process+0x5f8>
      opt = uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + c];
    97da:	eb07 000b 	add.w	r0, r7, fp
    97de:	f890 1036 	ldrb.w	r1, [r0, #54]	; 0x36
      if(opt == TCP_OPT_END) {
    97e2:	2900      	cmp	r1, #0
    97e4:	f040 80bb 	bne.w	995e <uip_process+0x76e>
    97e8:	2d00      	cmp	r5, #0
    97ea:	f000 80da 	beq.w	99a2 <uip_process+0x7b2>
    97ee:	f886 b002 	strb.w	fp, [r6, #2]
    97f2:	e0d6      	b.n	99a2 <uip_process+0x7b2>
    97f4:	2000861e 	.word	0x2000861e
    97f8:	000090b1 	.word	0x000090b1
    97fc:	0000e4c0 	.word	0x0000e4c0
    9800:	0000e4d2 	.word	0x0000e4d2
    9804:	0000e4ec 	.word	0x0000e4ec
    9808:	20008622 	.word	0x20008622
    980c:	0000e5b3 	.word	0x0000e5b3
    9810:	00000395 	.word	0x00000395
    9814:	200085e6 	.word	0x200085e6
    9818:	2000855c 	.word	0x2000855c
    981c:	2000864c 	.word	0x2000864c
    9820:	000090f1 	.word	0x000090f1
    9824:	0000e501 	.word	0x0000e501
    9828:	20008560 	.word	0x20008560
    982c:	20008ccc 	.word	0x20008ccc
    9830:	0000e514 	.word	0x0000e514
    9834:	20008cc8 	.word	0x20008cc8
    9838:	000090e5 	.word	0x000090e5
    983c:	2000856c 	.word	0x2000856c
    9840:	200085e0 	.word	0x200085e0
    9844:	200072b6 	.word	0x200072b6
    9848:	0000907d 	.word	0x0000907d
    UIP_STAT(++uip_stat.tcp.drop);
    984c:	f8b9 301a 	ldrh.w	r3, [r9, #26]
    UIP_LOG("tcp: bad checksum.");
    9850:	4890      	ldr	r0, [pc, #576]	; (9a94 <uip_process+0x8a4>)
    UIP_STAT(++uip_stat.tcp.drop);
    9852:	3301      	adds	r3, #1
    9854:	f8a9 301a 	strh.w	r3, [r9, #26]
    UIP_STAT(++uip_stat.tcp.chkerr);
    9858:	f8b9 3020 	ldrh.w	r3, [r9, #32]
    985c:	3301      	adds	r3, #1
    985e:	f8a9 3020 	strh.w	r3, [r9, #32]
    9862:	e604      	b.n	946e <uip_process+0x27e>
    9864:	2201      	movs	r2, #1
    9866:	7082      	strb	r2, [r0, #2]
  UIP_STAT(++uip_stat.tcp.synrst);
    9868:	f8b9 202a 	ldrh.w	r2, [r9, #42]	; 0x2a
    986c:	3201      	adds	r2, #1
    986e:	f8a9 202a 	strh.w	r2, [r9, #42]	; 0x2a
  if(BUF->flags & TCP_RST) {
    9872:	f01c 0f04 	tst.w	ip, #4
    9876:	f47f ad14 	bne.w	92a2 <uip_process+0xb2>
  UIP_STAT(++uip_stat.tcp.rst);
    987a:	f8b9 2024 	ldrh.w	r2, [r9, #36]	; 0x24
  c = BUF->seqno[3];
    987e:	f897 0029 	ldrb.w	r0, [r7, #41]	; 0x29
  BUF->seqno[1] = BUF->ackno[1];
    9882:	f897 502b 	ldrb.w	r5, [r7, #43]	; 0x2b
  c = BUF->seqno[2];
    9886:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
  c = BUF->seqno[0];
    988a:	f897 6026 	ldrb.w	r6, [r7, #38]	; 0x26
  BUF->seqno[0] = BUF->ackno[0];
    988e:	f897 e02a 	ldrb.w	lr, [r7, #42]	; 0x2a
    9892:	f887 e026 	strb.w	lr, [r7, #38]	; 0x26
  UIP_STAT(++uip_stat.tcp.rst);
    9896:	3201      	adds	r2, #1
    9898:	f8a9 2024 	strh.w	r2, [r9, #36]	; 0x24
  BUF->flags = TCP_RST | TCP_ACK;
    989c:	2214      	movs	r2, #20
    989e:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
  uip_len = UIP_IPTCPH_LEN;
    98a2:	2228      	movs	r2, #40	; 0x28
    98a4:	8022      	strh	r2, [r4, #0]
  BUF->tcpoffset = 5 << 4;
    98a6:	2250      	movs	r2, #80	; 0x50
    98a8:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
  BUF->seqno[3] = BUF->ackno[3];
    98ac:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
    98b0:	f887 2029 	strb.w	r2, [r7, #41]	; 0x29
  BUF->seqno[2] = BUF->ackno[2];
    98b4:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
    98b8:	f887 2028 	strb.w	r2, [r7, #40]	; 0x28
  if(++BUF->ackno[3] == 0) {
    98bc:	3001      	adds	r0, #1
  c = BUF->seqno[1];
    98be:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
  BUF->seqno[1] = BUF->ackno[1];
    98c2:	f887 5027 	strb.w	r5, [r7, #39]	; 0x27
  c = BUF->seqno[0];
    98c6:	4d74      	ldr	r5, [pc, #464]	; (9a98 <uip_process+0x8a8>)
  BUF->ackno[2] = c;
    98c8:	f887 102c 	strb.w	r1, [r7, #44]	; 0x2c
  if(++BUF->ackno[3] == 0) {
    98cc:	b2c0      	uxtb	r0, r0
  BUF->ackno[1] = c;
    98ce:	f887 202b 	strb.w	r2, [r7, #43]	; 0x2b
  c = BUF->seqno[0];
    98d2:	70ae      	strb	r6, [r5, #2]
  BUF->ackno[0] = c;
    98d4:	f887 602a 	strb.w	r6, [r7, #42]	; 0x2a
  if(++BUF->ackno[3] == 0) {
    98d8:	f887 002d 	strb.w	r0, [r7, #45]	; 0x2d
    98dc:	b960      	cbnz	r0, 98f8 <uip_process+0x708>
    if(++BUF->ackno[2] == 0) {
    98de:	3101      	adds	r1, #1
    98e0:	b2c9      	uxtb	r1, r1
    98e2:	f887 102c 	strb.w	r1, [r7, #44]	; 0x2c
    98e6:	b939      	cbnz	r1, 98f8 <uip_process+0x708>
      if(++BUF->ackno[1] == 0) {
    98e8:	3201      	adds	r2, #1
    98ea:	b2d2      	uxtb	r2, r2
    98ec:	f887 202b 	strb.w	r2, [r7, #43]	; 0x2b
    98f0:	b912      	cbnz	r2, 98f8 <uip_process+0x708>
	++BUF->ackno[0];
    98f2:	1c72      	adds	r2, r6, #1
    98f4:	f887 202a 	strb.w	r2, [r7, #42]	; 0x2a
  tmp16 = BUF->srcport;
    98f8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
    98fa:	816a      	strh	r2, [r5, #10]
  BUF->srcport = BUF->destport;
    98fc:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
  BUF->destport = tmp16;
    98fe:	84ba      	strh	r2, [r7, #36]	; 0x24
  uip_ipaddr_copy(BUF->destipaddr, BUF->srcipaddr);
    9900:	8b7a      	ldrh	r2, [r7, #26]
    9902:	83fa      	strh	r2, [r7, #30]
    9904:	8bba      	ldrh	r2, [r7, #28]
    9906:	843a      	strh	r2, [r7, #32]
  uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
    9908:	881a      	ldrh	r2, [r3, #0]
    990a:	885b      	ldrh	r3, [r3, #2]
  BUF->srcport = BUF->destport;
    990c:	8479      	strh	r1, [r7, #34]	; 0x22
  uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
    990e:	837a      	strh	r2, [r7, #26]
    9910:	83bb      	strh	r3, [r7, #28]
  BUF->ttl = UIP_TTL;
    9912:	4d62      	ldr	r5, [pc, #392]	; (9a9c <uip_process+0x8ac>)
    9914:	2340      	movs	r3, #64	; 0x40
    9916:	75ab      	strb	r3, [r5, #22]
  BUF->len[0] = (uip_len >> 8);
    9918:	8823      	ldrh	r3, [r4, #0]
  BUF->len[1] = (uip_len & 0xff);
    991a:	746b      	strb	r3, [r5, #17]
  BUF->len[0] = (uip_len >> 8);
    991c:	0a1a      	lsrs	r2, r3, #8
  BUF->urgp[0] = BUF->urgp[1] = 0;
    991e:	2300      	movs	r3, #0
    9920:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
    9924:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
  BUF->tcpchksum = 0;
    9928:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
    992c:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
  BUF->len[0] = (uip_len >> 8);
    9930:	742a      	strb	r2, [r5, #16]
  BUF->tcpchksum = ~(uip_tcpchksum());
    9932:	4b5b      	ldr	r3, [pc, #364]	; (9aa0 <uip_process+0x8b0>)
    9934:	4798      	blx	r3
    9936:	43c0      	mvns	r0, r0
    9938:	8668      	strh	r0, [r5, #50]	; 0x32
    993a:	e569      	b.n	9410 <uip_process+0x220>
	uip_connr = &uip_conns[c];
    993c:	4b59      	ldr	r3, [pc, #356]	; (9aa4 <uip_process+0x8b4>)
    if(uip_conns[c].tcpstateflags == UIP_TIME_WAIT) {
    993e:	2a07      	cmp	r2, #7
	uip_connr = &uip_conns[c];
    9940:	bf08      	it	eq
    9942:	4698      	moveq	r8, r3
  for(c = 0; c < UIP_CONNS; ++c) {
    9944:	2301      	movs	r3, #1
    9946:	7083      	strb	r3, [r0, #2]
  if(uip_connr == 0) {
    9948:	f1b8 0f00 	cmp.w	r8, #0
    994c:	f47f aef6 	bne.w	973c <uip_process+0x54c>
    UIP_STAT(++uip_stat.tcp.syndrop);
    9950:	f8b9 3028 	ldrh.w	r3, [r9, #40]	; 0x28
    UIP_LOG("tcp: found no unused connections.");
    9954:	4854      	ldr	r0, [pc, #336]	; (9aa8 <uip_process+0x8b8>)
    UIP_STAT(++uip_stat.tcp.syndrop);
    9956:	3301      	adds	r3, #1
    9958:	f8a9 3028 	strh.w	r3, [r9, #40]	; 0x28
    995c:	e587      	b.n	946e <uip_process+0x27e>
      } else if(opt == TCP_OPT_NOOP) {
    995e:	2901      	cmp	r1, #1
    9960:	d105      	bne.n	996e <uip_process+0x77e>
	++c;
    9962:	f10b 0b01 	add.w	fp, fp, #1
	c += uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c];
    9966:	fa5f fb8b 	uxtb.w	fp, fp
    996a:	2501      	movs	r5, #1
    996c:	e733      	b.n	97d6 <uip_process+0x5e6>
      } else if(opt == TCP_OPT_MSS &&
    996e:	2902      	cmp	r1, #2
    9970:	d170      	bne.n	9a54 <uip_process+0x864>
    9972:	f890 1037 	ldrb.w	r1, [r0, #55]	; 0x37
    9976:	2904      	cmp	r1, #4
    9978:	d16c      	bne.n	9a54 <uip_process+0x864>
    997a:	b10d      	cbz	r5, 9980 <uip_process+0x790>
    997c:	f886 b002 	strb.w	fp, [r6, #2]
	tmp16 = ((u16_t)uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 2 + c] << 8) |
    9980:	445f      	add	r7, fp
    9982:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
	  (u16_t)uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN + 3 + c];
    9986:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
	tmp16 = ((u16_t)uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 2 + c] << 8) |
    998a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	uip_connr->initialmss = uip_connr->mss =
    998e:	f240 626e 	movw	r2, #1646	; 0x66e
    9992:	4293      	cmp	r3, r2
	tmp16 = ((u16_t)uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 2 + c] << 8) |
    9994:	8173      	strh	r3, [r6, #10]
	uip_connr->initialmss = uip_connr->mss =
    9996:	bf28      	it	cs
    9998:	4613      	movcs	r3, r2
    999a:	f8a8 3012 	strh.w	r3, [r8, #18]
    999e:	f8a8 3014 	strh.w	r3, [r8, #20]
  BUF->flags = TCP_SYN | TCP_ACK;
    99a2:	4b3e      	ldr	r3, [pc, #248]	; (9a9c <uip_process+0x8ac>)
    99a4:	2212      	movs	r2, #18
    99a6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  BUF->optdata[0] = TCP_OPT_MSS;
    99aa:	2202      	movs	r2, #2
    99ac:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  BUF->optdata[1] = TCP_OPT_MSS_LEN;
    99b0:	2204      	movs	r2, #4
    99b2:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
  BUF->optdata[2] = (UIP_TCP_MSS) / 256;
    99b6:	2206      	movs	r2, #6
    99b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  BUF->optdata[3] = (UIP_TCP_MSS) & 255;
    99bc:	226e      	movs	r2, #110	; 0x6e
    99be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  uip_len = UIP_IPTCPH_LEN + TCP_OPT_MSS_LEN;
    99c2:	222c      	movs	r2, #44	; 0x2c
    99c4:	8022      	strh	r2, [r4, #0]
  BUF->tcpoffset = ((UIP_TCPH_LEN + TCP_OPT_MSS_LEN) / 4) << 4;
    99c6:	2260      	movs	r2, #96	; 0x60
  BUF->tcpoffset = (UIP_TCPH_LEN / 4) << 4;
    99c8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  BUF->ackno[0] = uip_connr->rcv_nxt[0];
    99cc:	4b33      	ldr	r3, [pc, #204]	; (9a9c <uip_process+0x8ac>)
    99ce:	f898 2008 	ldrb.w	r2, [r8, #8]
    99d2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  BUF->ackno[1] = uip_connr->rcv_nxt[1];
    99d6:	f898 2009 	ldrb.w	r2, [r8, #9]
    99da:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  BUF->ackno[2] = uip_connr->rcv_nxt[2];
    99de:	f898 200a 	ldrb.w	r2, [r8, #10]
    99e2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  BUF->ackno[3] = uip_connr->rcv_nxt[3];
    99e6:	f898 200b 	ldrb.w	r2, [r8, #11]
    99ea:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  BUF->seqno[0] = uip_connr->snd_nxt[0];
    99ee:	f898 200c 	ldrb.w	r2, [r8, #12]
    99f2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  BUF->seqno[1] = uip_connr->snd_nxt[1];
    99f6:	f898 200d 	ldrb.w	r2, [r8, #13]
    99fa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  BUF->seqno[2] = uip_connr->snd_nxt[2];
    99fe:	f898 200e 	ldrb.w	r2, [r8, #14]
    9a02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  BUF->seqno[3] = uip_connr->snd_nxt[3];
    9a06:	f898 200f 	ldrb.w	r2, [r8, #15]
    9a0a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  BUF->proto = UIP_PROTO_TCP;
    9a0e:	2206      	movs	r2, #6
    9a10:	75da      	strb	r2, [r3, #23]
  BUF->srcport  = uip_connr->lport;
    9a12:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    9a16:	8459      	strh	r1, [r3, #34]	; 0x22
  BUF->destport = uip_connr->rport;
    9a18:	f8b8 1006 	ldrh.w	r1, [r8, #6]
    9a1c:	8499      	strh	r1, [r3, #36]	; 0x24
  uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
    9a1e:	4923      	ldr	r1, [pc, #140]	; (9aac <uip_process+0x8bc>)
    9a20:	8808      	ldrh	r0, [r1, #0]
    9a22:	8849      	ldrh	r1, [r1, #2]
    9a24:	8358      	strh	r0, [r3, #26]
    9a26:	8399      	strh	r1, [r3, #28]
  uip_ipaddr_copy(BUF->destipaddr, uip_connr->ripaddr);
    9a28:	f8b8 1000 	ldrh.w	r1, [r8]
    9a2c:	83d9      	strh	r1, [r3, #30]
    9a2e:	f8b8 1002 	ldrh.w	r1, [r8, #2]
    9a32:	8419      	strh	r1, [r3, #32]
  if(uip_connr->tcpstateflags & UIP_STOPPED) {
    9a34:	f898 1019 	ldrb.w	r1, [r8, #25]
    9a38:	06c9      	lsls	r1, r1, #27
    BUF->wnd[0] = BUF->wnd[1] = 0;
    9a3a:	bf43      	ittte	mi
    9a3c:	2200      	movmi	r2, #0
    9a3e:	f883 2031 	strbmi.w	r2, [r3, #49]	; 0x31
    9a42:	f883 2030 	strbmi.w	r2, [r3, #48]	; 0x30
    BUF->wnd[0] = ((UIP_RECEIVE_WINDOW) >> 8);
    9a46:	f883 2030 	strbpl.w	r2, [r3, #48]	; 0x30
    BUF->wnd[1] = ((UIP_RECEIVE_WINDOW) & 0xff);
    9a4a:	bf5c      	itt	pl
    9a4c:	226e      	movpl	r2, #110	; 0x6e
    9a4e:	f883 2031 	strbpl.w	r2, [r3, #49]	; 0x31
    9a52:	e75e      	b.n	9912 <uip_process+0x722>
	if(uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == 0) {
    9a54:	eb07 010b 	add.w	r1, r7, fp
    9a58:	f891 1037 	ldrb.w	r1, [r1, #55]	; 0x37
    9a5c:	2900      	cmp	r1, #0
    9a5e:	f43f aec3 	beq.w	97e8 <uip_process+0x5f8>
	c += uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c];
    9a62:	448b      	add	fp, r1
    9a64:	e77f      	b.n	9966 <uip_process+0x776>
  if(BUF->flags & TCP_RST) {
    9a66:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
  uip_flags = 0;
    9a6a:	f8df 9050 	ldr.w	r9, [pc, #80]	; 9abc <uip_process+0x8cc>
  uip_conn = uip_connr;
    9a6e:	6028      	str	r0, [r5, #0]
  uip_flags = 0;
    9a70:	2300      	movs	r3, #0
  if(BUF->flags & TCP_RST) {
    9a72:	f011 0f04 	tst.w	r1, #4
  uip_flags = 0;
    9a76:	f889 3000 	strb.w	r3, [r9]
    9a7a:	464d      	mov	r5, r9
  if(BUF->flags & TCP_RST) {
    9a7c:	d020      	beq.n	9ac0 <uip_process+0x8d0>
    uip_connr->tcpstateflags = UIP_CLOSED;
    9a7e:	7643      	strb	r3, [r0, #25]
    UIP_LOG("tcp: got reset, aborting connection.");
    9a80:	4b0b      	ldr	r3, [pc, #44]	; (9ab0 <uip_process+0x8c0>)
    9a82:	480c      	ldr	r0, [pc, #48]	; (9ab4 <uip_process+0x8c4>)
    9a84:	4798      	blx	r3
    uip_flags = UIP_ABORT;
    9a86:	2320      	movs	r3, #32
    9a88:	f889 3000 	strb.w	r3, [r9]
      UIP_APPCALL();
    9a8c:	4b0a      	ldr	r3, [pc, #40]	; (9ab8 <uip_process+0x8c8>)
    9a8e:	4798      	blx	r3
    9a90:	e407      	b.n	92a2 <uip_process+0xb2>
    9a92:	bf00      	nop
    9a94:	0000e536 	.word	0x0000e536
    9a98:	200072b6 	.word	0x200072b6
    9a9c:	20008622 	.word	0x20008622
    9aa0:	000090e5 	.word	0x000090e5
    9aa4:	2000856c 	.word	0x2000856c
    9aa8:	0000e549 	.word	0x0000e549
    9aac:	2000861e 	.word	0x2000861e
    9ab0:	0000ad01 	.word	0x0000ad01
    9ab4:	0000e56b 	.word	0x0000e56b
    9ab8:	0000acf1 	.word	0x0000acf1
    9abc:	2000855c 	.word	0x2000855c
  c = (BUF->tcpoffset >> 4) << 2;
    9ac0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    9ac4:	48b4      	ldr	r0, [pc, #720]	; (9d98 <uip_process+0xba8>)
    9ac6:	091b      	lsrs	r3, r3, #4
    9ac8:	ea4f 0e83 	mov.w	lr, r3, lsl #2
  uip_len = uip_len - c - UIP_IPH_LEN;
    9acc:	8823      	ldrh	r3, [r4, #0]
  c = (BUF->tcpoffset >> 4) << 2;
    9ace:	f880 e002 	strb.w	lr, [r0, #2]
  uip_len = uip_len - c - UIP_IPH_LEN;
    9ad2:	3b14      	subs	r3, #20
    9ad4:	eba3 030e 	sub.w	r3, r3, lr
  if(!(((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_SYN_SENT) &&
    9ad8:	f002 020f 	and.w	r2, r2, #15
  uip_len = uip_len - c - UIP_IPH_LEN;
    9adc:	b29b      	uxth	r3, r3
  if(!(((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_SYN_SENT) &&
    9ade:	2a02      	cmp	r2, #2
  uip_len = uip_len - c - UIP_IPH_LEN;
    9ae0:	8023      	strh	r3, [r4, #0]
    9ae2:	4681      	mov	r9, r0
  if(!(((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_SYN_SENT) &&
    9ae4:	d103      	bne.n	9aee <uip_process+0x8fe>
    9ae6:	f001 023f 	and.w	r2, r1, #63	; 0x3f
    9aea:	2a12      	cmp	r2, #18
    9aec:	d00e      	beq.n	9b0c <uip_process+0x91c>
    if((uip_len > 0 || ((BUF->flags & (TCP_SYN | TCP_FIN)) != 0)) &&
    9aee:	b90b      	cbnz	r3, 9af4 <uip_process+0x904>
    9af0:	078a      	lsls	r2, r1, #30
    9af2:	d00b      	beq.n	9b0c <uip_process+0x91c>
    9af4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9af6:	f8b8 3008 	ldrh.w	r3, [r8, #8]
    9afa:	429a      	cmp	r2, r3
    9afc:	f040 8146 	bne.w	9d8c <uip_process+0xb9c>
	BUF->seqno[2] != uip_connr->rcv_nxt[2] ||
    9b00:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
    9b02:	f8b8 300a 	ldrh.w	r3, [r8, #10]
    9b06:	429a      	cmp	r2, r3
    9b08:	f040 8140 	bne.w	9d8c <uip_process+0xb9c>
  if((BUF->flags & TCP_ACK) && uip_outstanding(uip_connr)) {
    9b0c:	06cb      	lsls	r3, r1, #27
    9b0e:	d54e      	bpl.n	9bae <uip_process+0x9be>
    9b10:	f8b8 1010 	ldrh.w	r1, [r8, #16]
    9b14:	2900      	cmp	r1, #0
    9b16:	d04a      	beq.n	9bae <uip_process+0x9be>
    uip_add32(uip_connr->snd_nxt, uip_connr->len);
    9b18:	48a0      	ldr	r0, [pc, #640]	; (9d9c <uip_process+0xbac>)
    9b1a:	4ba1      	ldr	r3, [pc, #644]	; (9da0 <uip_process+0xbb0>)
    9b1c:	4798      	blx	r3
    if(BUF->ackno[0] == uip_acc32[0] &&
    9b1e:	4ba1      	ldr	r3, [pc, #644]	; (9da4 <uip_process+0xbb4>)
    9b20:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
    9b24:	7818      	ldrb	r0, [r3, #0]
    9b26:	4290      	cmp	r0, r2
    9b28:	d141      	bne.n	9bae <uip_process+0x9be>
       BUF->ackno[1] == uip_acc32[1] &&
    9b2a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
    if(BUF->ackno[0] == uip_acc32[0] &&
    9b2e:	7859      	ldrb	r1, [r3, #1]
    9b30:	4291      	cmp	r1, r2
    9b32:	d13c      	bne.n	9bae <uip_process+0x9be>
       BUF->ackno[2] == uip_acc32[2] &&
    9b34:	f897 e02c 	ldrb.w	lr, [r7, #44]	; 0x2c
       BUF->ackno[1] == uip_acc32[1] &&
    9b38:	789a      	ldrb	r2, [r3, #2]
    9b3a:	4572      	cmp	r2, lr
    9b3c:	d137      	bne.n	9bae <uip_process+0x9be>
       BUF->ackno[3] == uip_acc32[3]) {
    9b3e:	f897 e02d 	ldrb.w	lr, [r7, #45]	; 0x2d
       BUF->ackno[2] == uip_acc32[2] &&
    9b42:	78db      	ldrb	r3, [r3, #3]
    9b44:	4573      	cmp	r3, lr
    9b46:	d132      	bne.n	9bae <uip_process+0x9be>
      uip_connr->snd_nxt[3] = uip_acc32[3];
    9b48:	f888 300f 	strb.w	r3, [r8, #15]
      if(uip_connr->nrtx == 0) {
    9b4c:	f898 301b 	ldrb.w	r3, [r8, #27]
      uip_connr->snd_nxt[0] = uip_acc32[0];
    9b50:	f888 000c 	strb.w	r0, [r8, #12]
      uip_connr->snd_nxt[1] = uip_acc32[1];
    9b54:	f888 100d 	strb.w	r1, [r8, #13]
      uip_connr->snd_nxt[2] = uip_acc32[2];
    9b58:	f888 200e 	strb.w	r2, [r8, #14]
      if(uip_connr->nrtx == 0) {
    9b5c:	b9f3      	cbnz	r3, 9b9c <uip_process+0x9ac>
	m = uip_connr->rto - uip_connr->timer;
    9b5e:	f898 1018 	ldrb.w	r1, [r8, #24]
    9b62:	f898 301a 	ldrb.w	r3, [r8, #26]
	m = m - (uip_connr->sa >> 3);
    9b66:	f898 0016 	ldrb.w	r0, [r8, #22]
	m = m - (uip_connr->sv >> 2);
    9b6a:	f898 2017 	ldrb.w	r2, [r8, #23]
	m = uip_connr->rto - uip_connr->timer;
    9b6e:	1ac9      	subs	r1, r1, r3
	m = m - (uip_connr->sa >> 3);
    9b70:	eba1 01d0 	sub.w	r1, r1, r0, lsr #3
    9b74:	b2c9      	uxtb	r1, r1
    9b76:	b24b      	sxtb	r3, r1
	if(m < 0) {
    9b78:	2b00      	cmp	r3, #0
	uip_connr->sa += m;
    9b7a:	4408      	add	r0, r1
	  m = -m;
    9b7c:	bfbc      	itt	lt
    9b7e:	4249      	neglt	r1, r1
    9b80:	b24b      	sxtblt	r3, r1
	uip_connr->sv += m;
    9b82:	eba2 0292 	sub.w	r2, r2, r2, lsr #2
    9b86:	4413      	add	r3, r2
	uip_connr->sa += m;
    9b88:	b2c0      	uxtb	r0, r0
	uip_connr->sv += m;
    9b8a:	b2db      	uxtb	r3, r3
    9b8c:	f888 3017 	strb.w	r3, [r8, #23]
	uip_connr->rto = (uip_connr->sa >> 3) + uip_connr->sv;
    9b90:	eb03 03d0 	add.w	r3, r3, r0, lsr #3
	uip_connr->sa += m;
    9b94:	f888 0016 	strb.w	r0, [r8, #22]
	uip_connr->rto = (uip_connr->sa >> 3) + uip_connr->sv;
    9b98:	f888 3018 	strb.w	r3, [r8, #24]
      uip_flags = UIP_ACKDATA;
    9b9c:	2301      	movs	r3, #1
    9b9e:	702b      	strb	r3, [r5, #0]
      uip_connr->timer = uip_connr->rto;
    9ba0:	f898 3018 	ldrb.w	r3, [r8, #24]
    9ba4:	f888 301a 	strb.w	r3, [r8, #26]
      uip_connr->len = 0;
    9ba8:	2300      	movs	r3, #0
    9baa:	f8a8 3010 	strh.w	r3, [r8, #16]
  switch(uip_connr->tcpstateflags & UIP_TS_MASK) {
    9bae:	f898 1019 	ldrb.w	r1, [r8, #25]
    9bb2:	f001 030f 	and.w	r3, r1, #15
    9bb6:	3b01      	subs	r3, #1
    9bb8:	2b07      	cmp	r3, #7
    9bba:	f63f ab72 	bhi.w	92a2 <uip_process+0xb2>
    9bbe:	a201      	add	r2, pc, #4	; (adr r2, 9bc4 <uip_process+0x9d4>)
    9bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    9bc4:	00009be5 	.word	0x00009be5
    9bc8:	000092a3 	.word	0x000092a3
    9bcc:	00009c1b 	.word	0x00009c1b
    9bd0:	00009d4f 	.word	0x00009d4f
    9bd4:	00009dd5 	.word	0x00009dd5
    9bd8:	00009dfd 	.word	0x00009dfd
    9bdc:	00009d8d 	.word	0x00009d8d
    9be0:	00009d3b 	.word	0x00009d3b
    if(uip_flags & UIP_ACKDATA) {
    9be4:	782b      	ldrb	r3, [r5, #0]
    9be6:	07df      	lsls	r7, r3, #31
    9be8:	f57f ab5b 	bpl.w	92a2 <uip_process+0xb2>
      uip_connr->tcpstateflags = UIP_ESTABLISHED;
    9bec:	2303      	movs	r3, #3
    9bee:	f888 3019 	strb.w	r3, [r8, #25]
      if(uip_len > 0) {
    9bf2:	8820      	ldrh	r0, [r4, #0]
      uip_flags = UIP_CONNECTED;
    9bf4:	2340      	movs	r3, #64	; 0x40
    9bf6:	702b      	strb	r3, [r5, #0]
      uip_connr->len = 0;
    9bf8:	2300      	movs	r3, #0
    9bfa:	f8a8 3010 	strh.w	r3, [r8, #16]
      if(uip_len > 0) {
    9bfe:	b118      	cbz	r0, 9c08 <uip_process+0xa18>
        uip_flags |= UIP_NEWDATA;
    9c00:	2342      	movs	r3, #66	; 0x42
    9c02:	702b      	strb	r3, [r5, #0]
        uip_add_rcv_nxt(uip_len);
    9c04:	4b68      	ldr	r3, [pc, #416]	; (9da8 <uip_process+0xbb8>)
    9c06:	4798      	blx	r3
      uip_slen = 0;
    9c08:	4b68      	ldr	r3, [pc, #416]	; (9dac <uip_process+0xbbc>)
      goto appsend;
    9c0a:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 9dbc <uip_process+0xbcc>
      uip_slen = 0;
    9c0e:	2200      	movs	r2, #0
    9c10:	801a      	strh	r2, [r3, #0]
      UIP_APPCALL();
    9c12:	4b67      	ldr	r3, [pc, #412]	; (9db0 <uip_process+0xbc0>)
    9c14:	4798      	blx	r3
      goto appsend;
    9c16:	f7ff bb0e 	b.w	9236 <uip_process+0x46>
    if(BUF->flags & TCP_FIN && !(uip_connr->tcpstateflags & UIP_STOPPED)) {
    9c1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    9c1e:	07d8      	lsls	r0, r3, #31
    9c20:	d529      	bpl.n	9c76 <uip_process+0xa86>
    9c22:	06ca      	lsls	r2, r1, #27
    9c24:	d427      	bmi.n	9c76 <uip_process+0xa86>
      if(uip_outstanding(uip_connr)) {
    9c26:	f8b8 3010 	ldrh.w	r3, [r8, #16]
    9c2a:	2b00      	cmp	r3, #0
    9c2c:	f47f ab39 	bne.w	92a2 <uip_process+0xb2>
      uip_add_rcv_nxt(1 + uip_len);
    9c30:	8820      	ldrh	r0, [r4, #0]
    9c32:	4b5d      	ldr	r3, [pc, #372]	; (9da8 <uip_process+0xbb8>)
    9c34:	3001      	adds	r0, #1
    9c36:	b280      	uxth	r0, r0
    9c38:	4798      	blx	r3
      uip_flags |= UIP_CLOSE;
    9c3a:	782b      	ldrb	r3, [r5, #0]
    9c3c:	f043 0210 	orr.w	r2, r3, #16
    9c40:	702a      	strb	r2, [r5, #0]
      if(uip_len > 0) {
    9c42:	8822      	ldrh	r2, [r4, #0]
    9c44:	b112      	cbz	r2, 9c4c <uip_process+0xa5c>
	uip_flags |= UIP_NEWDATA;
    9c46:	f043 0312 	orr.w	r3, r3, #18
    9c4a:	702b      	strb	r3, [r5, #0]
      UIP_APPCALL();
    9c4c:	4b58      	ldr	r3, [pc, #352]	; (9db0 <uip_process+0xbc0>)
    9c4e:	4798      	blx	r3
      uip_connr->len = 1;
    9c50:	2301      	movs	r3, #1
    9c52:	f8a8 3010 	strh.w	r3, [r8, #16]
      uip_connr->tcpstateflags = UIP_LAST_ACK;
    9c56:	2308      	movs	r3, #8
    9c58:	f888 3019 	strb.w	r3, [r8, #25]
      uip_connr->nrtx = 0;
    9c5c:	2300      	movs	r3, #0
    9c5e:	f888 301b 	strb.w	r3, [r8, #27]
    9c62:	f8df 8158 	ldr.w	r8, [pc, #344]	; 9dbc <uip_process+0xbcc>
      BUF->flags = TCP_FIN | TCP_ACK;
    9c66:	2211      	movs	r2, #17
    9c68:	4b52      	ldr	r3, [pc, #328]	; (9db4 <uip_process+0xbc4>)
    9c6a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  uip_len = UIP_IPTCPH_LEN;
    9c6e:	2328      	movs	r3, #40	; 0x28
    9c70:	8023      	strh	r3, [r4, #0]
    9c72:	f7ff bb7a 	b.w	936a <uip_process+0x17a>
    if((BUF->flags & TCP_URG) != 0) {
    9c76:	0698      	lsls	r0, r3, #26
    9c78:	d50d      	bpl.n	9c96 <uip_process+0xaa6>
      uip_appdata = ((char *)uip_appdata) + ((BUF->urgp[0] << 8) | BUF->urgp[1]);
    9c7a:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
    9c7e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
    9c82:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    9c86:	f8da 2000 	ldr.w	r2, [sl]
    9c8a:	441a      	add	r2, r3
    9c8c:	f8ca 2000 	str.w	r2, [sl]
      uip_len -= (BUF->urgp[0] << 8) | BUF->urgp[1];
    9c90:	8822      	ldrh	r2, [r4, #0]
    9c92:	1ad3      	subs	r3, r2, r3
    9c94:	8023      	strh	r3, [r4, #0]
    if(uip_len > 0 && !(uip_connr->tcpstateflags & UIP_STOPPED)) {
    9c96:	8820      	ldrh	r0, [r4, #0]
    9c98:	b138      	cbz	r0, 9caa <uip_process+0xaba>
    9c9a:	06ca      	lsls	r2, r1, #27
    9c9c:	d405      	bmi.n	9caa <uip_process+0xaba>
      uip_flags |= UIP_NEWDATA;
    9c9e:	782b      	ldrb	r3, [r5, #0]
    9ca0:	f043 0302 	orr.w	r3, r3, #2
    9ca4:	702b      	strb	r3, [r5, #0]
      uip_add_rcv_nxt(uip_len);
    9ca6:	4b40      	ldr	r3, [pc, #256]	; (9da8 <uip_process+0xbb8>)
    9ca8:	4798      	blx	r3
    tmp16 = ((u16_t)BUF->wnd[0] << 8) + (u16_t)BUF->wnd[1];
    9caa:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
    9cae:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
    9cb2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    if(tmp16 > uip_connr->initialmss ||
    9cb6:	f8b8 2014 	ldrh.w	r2, [r8, #20]
    tmp16 = ((u16_t)BUF->wnd[0] << 8) + (u16_t)BUF->wnd[1];
    9cba:	b29b      	uxth	r3, r3
    if(tmp16 > uip_connr->initialmss ||
    9cbc:	4293      	cmp	r3, r2
    tmp16 = ((u16_t)BUF->wnd[0] << 8) + (u16_t)BUF->wnd[1];
    9cbe:	f8a9 300a 	strh.w	r3, [r9, #10]
    if(tmp16 > uip_connr->initialmss ||
    9cc2:	d800      	bhi.n	9cc6 <uip_process+0xad6>
    9cc4:	b90b      	cbnz	r3, 9cca <uip_process+0xada>
      tmp16 = uip_connr->initialmss;
    9cc6:	f8a9 200a 	strh.w	r2, [r9, #10]
    uip_connr->mss = tmp16;
    9cca:	f8b9 300a 	ldrh.w	r3, [r9, #10]
    9cce:	f8a8 3012 	strh.w	r3, [r8, #18]
    if(uip_flags & (UIP_NEWDATA | UIP_ACKDATA)) {
    9cd2:	782b      	ldrb	r3, [r5, #0]
    9cd4:	079b      	lsls	r3, r3, #30
    9cd6:	f43f aae4 	beq.w	92a2 <uip_process+0xb2>
    9cda:	e795      	b.n	9c08 <uip_process+0xa18>
      if(uip_flags & UIP_CLOSE) {
    9cdc:	f012 0010 	ands.w	r0, r2, #16
    9ce0:	d009      	beq.n	9cf6 <uip_process+0xb06>
	uip_slen = 0;
    9ce2:	8019      	strh	r1, [r3, #0]
	uip_connr->len = 1;
    9ce4:	2301      	movs	r3, #1
    9ce6:	f8a8 3010 	strh.w	r3, [r8, #16]
	uip_connr->tcpstateflags = UIP_FIN_WAIT_1;
    9cea:	2304      	movs	r3, #4
    9cec:	f888 3019 	strb.w	r3, [r8, #25]
	uip_connr->nrtx = 0;
    9cf0:	f888 101b 	strb.w	r1, [r8, #27]
    9cf4:	e7b7      	b.n	9c66 <uip_process+0xa76>
      if(uip_slen > 0) {
    9cf6:	8819      	ldrh	r1, [r3, #0]
    9cf8:	b171      	cbz	r1, 9d18 <uip_process+0xb28>
	if((uip_flags & UIP_ACKDATA) != 0) {
    9cfa:	07d7      	lsls	r7, r2, #31
	  uip_connr->len = 0;
    9cfc:	bf48      	it	mi
    9cfe:	f8a8 0010 	strhmi.w	r0, [r8, #16]
	if(uip_connr->len == 0) {
    9d02:	f8b8 2010 	ldrh.w	r2, [r8, #16]
    9d06:	b962      	cbnz	r2, 9d22 <uip_process+0xb32>
	  if(uip_slen > uip_connr->mss) {
    9d08:	f8b8 2012 	ldrh.w	r2, [r8, #18]
    9d0c:	4291      	cmp	r1, r2
	    uip_slen = uip_connr->mss;
    9d0e:	bf88      	it	hi
    9d10:	801a      	strhhi	r2, [r3, #0]
	  uip_connr->len = uip_slen;
    9d12:	881b      	ldrh	r3, [r3, #0]
    9d14:	f8a8 3010 	strh.w	r3, [r8, #16]
      uip_connr->nrtx = 0;
    9d18:	2300      	movs	r3, #0
    9d1a:	f888 301b 	strb.w	r3, [r8, #27]
    9d1e:	f7ff bb11 	b.w	9344 <uip_process+0x154>
	  uip_slen = uip_connr->len;
    9d22:	801a      	strh	r2, [r3, #0]
    9d24:	e7f8      	b.n	9d18 <uip_process+0xb28>
      if(uip_flags & UIP_NEWDATA) {
    9d26:	4b24      	ldr	r3, [pc, #144]	; (9db8 <uip_process+0xbc8>)
    9d28:	781b      	ldrb	r3, [r3, #0]
    9d2a:	079d      	lsls	r5, r3, #30
    9d2c:	f57f aab9 	bpl.w	92a2 <uip_process+0xb2>
	uip_len = UIP_TCPIP_HLEN;
    9d30:	2328      	movs	r3, #40	; 0x28
    9d32:	8023      	strh	r3, [r4, #0]
	BUF->flags = TCP_ACK;
    9d34:	2210      	movs	r2, #16
    9d36:	f7ff bb15 	b.w	9364 <uip_process+0x174>
    if(uip_flags & UIP_ACKDATA) {
    9d3a:	782b      	ldrb	r3, [r5, #0]
    9d3c:	07d8      	lsls	r0, r3, #31
    9d3e:	f57f aab0 	bpl.w	92a2 <uip_process+0xb2>
      uip_connr->tcpstateflags = UIP_CLOSED;
    9d42:	2300      	movs	r3, #0
    9d44:	f888 3019 	strb.w	r3, [r8, #25]
      uip_flags = UIP_CLOSE;
    9d48:	2310      	movs	r3, #16
    9d4a:	702b      	strb	r3, [r5, #0]
    9d4c:	e69e      	b.n	9a8c <uip_process+0x89c>
    if(uip_len > 0) {
    9d4e:	8820      	ldrh	r0, [r4, #0]
    9d50:	b108      	cbz	r0, 9d56 <uip_process+0xb66>
      uip_add_rcv_nxt(uip_len);
    9d52:	4b15      	ldr	r3, [pc, #84]	; (9da8 <uip_process+0xbb8>)
    9d54:	4798      	blx	r3
    if(BUF->flags & TCP_FIN) {
    9d56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    9d5a:	f013 0301 	ands.w	r3, r3, #1
    9d5e:	d02f      	beq.n	9dc0 <uip_process+0xbd0>
      if(uip_flags & UIP_ACKDATA) {
    9d60:	782b      	ldrb	r3, [r5, #0]
    9d62:	07d9      	lsls	r1, r3, #31
	uip_connr->tcpstateflags = UIP_TIME_WAIT;
    9d64:	bf45      	ittet	mi
    9d66:	2307      	movmi	r3, #7
    9d68:	f888 3019 	strbmi.w	r3, [r8, #25]
	uip_connr->tcpstateflags = UIP_CLOSING;
    9d6c:	2306      	movpl	r3, #6
	uip_connr->timer = 0;
    9d6e:	2300      	movmi	r3, #0
    9d70:	bf46      	itte	mi
    9d72:	f888 301a 	strbmi.w	r3, [r8, #26]
	uip_connr->len = 0;
    9d76:	f8a8 3010 	strhmi.w	r3, [r8, #16]
	uip_connr->tcpstateflags = UIP_CLOSING;
    9d7a:	f888 3019 	strbpl.w	r3, [r8, #25]
      uip_add_rcv_nxt(1);
    9d7e:	4b0a      	ldr	r3, [pc, #40]	; (9da8 <uip_process+0xbb8>)
    9d80:	2001      	movs	r0, #1
    9d82:	4798      	blx	r3
      uip_flags = UIP_CLOSE;
    9d84:	2310      	movs	r3, #16
    9d86:	702b      	strb	r3, [r5, #0]
      UIP_APPCALL();
    9d88:	4b09      	ldr	r3, [pc, #36]	; (9db0 <uip_process+0xbc0>)
    9d8a:	4798      	blx	r3
  BUF->flags = TCP_ACK;
    9d8c:	2310      	movs	r3, #16
    9d8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    9d92:	f8df 8028 	ldr.w	r8, [pc, #40]	; 9dbc <uip_process+0xbcc>
    9d96:	e76a      	b.n	9c6e <uip_process+0xa7e>
    9d98:	200072b6 	.word	0x200072b6
    9d9c:	20008578 	.word	0x20008578
    9da0:	00009029 	.word	0x00009029
    9da4:	20008558 	.word	0x20008558
    9da8:	0000907d 	.word	0x0000907d
    9dac:	20008cc8 	.word	0x20008cc8
    9db0:	0000acf1 	.word	0x0000acf1
    9db4:	20008622 	.word	0x20008622
    9db8:	2000855c 	.word	0x2000855c
    9dbc:	2000856c 	.word	0x2000856c
    } else if(uip_flags & UIP_ACKDATA) {
    9dc0:	782a      	ldrb	r2, [r5, #0]
    9dc2:	07d2      	lsls	r2, r2, #31
    9dc4:	d515      	bpl.n	9df2 <uip_process+0xc02>
      uip_connr->tcpstateflags = UIP_FIN_WAIT_2;
    9dc6:	2205      	movs	r2, #5
    9dc8:	f888 2019 	strb.w	r2, [r8, #25]
      uip_connr->len = 0;
    9dcc:	f8a8 3010 	strh.w	r3, [r8, #16]
      goto drop;
    9dd0:	f7ff ba67 	b.w	92a2 <uip_process+0xb2>
    if(uip_len > 0) {
    9dd4:	8820      	ldrh	r0, [r4, #0]
    9dd6:	b108      	cbz	r0, 9ddc <uip_process+0xbec>
      uip_add_rcv_nxt(uip_len);
    9dd8:	4b0e      	ldr	r3, [pc, #56]	; (9e14 <uip_process+0xc24>)
    9dda:	4798      	blx	r3
    if(BUF->flags & TCP_FIN) {
    9ddc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    9de0:	07de      	lsls	r6, r3, #31
    9de2:	d506      	bpl.n	9df2 <uip_process+0xc02>
      uip_connr->tcpstateflags = UIP_TIME_WAIT;
    9de4:	2307      	movs	r3, #7
    9de6:	f888 3019 	strb.w	r3, [r8, #25]
      uip_connr->timer = 0;
    9dea:	2300      	movs	r3, #0
    9dec:	f888 301a 	strb.w	r3, [r8, #26]
    9df0:	e7c5      	b.n	9d7e <uip_process+0xb8e>
    if(uip_len > 0) {
    9df2:	8823      	ldrh	r3, [r4, #0]
    9df4:	2b00      	cmp	r3, #0
    9df6:	d1c9      	bne.n	9d8c <uip_process+0xb9c>
    9df8:	f7ff ba53 	b.w	92a2 <uip_process+0xb2>
    if(uip_flags & UIP_ACKDATA) {
    9dfc:	782b      	ldrb	r3, [r5, #0]
    9dfe:	07d8      	lsls	r0, r3, #31
    9e00:	f57f aa4f 	bpl.w	92a2 <uip_process+0xb2>
      uip_connr->tcpstateflags = UIP_TIME_WAIT;
    9e04:	2307      	movs	r3, #7
    9e06:	f888 3019 	strb.w	r3, [r8, #25]
      uip_connr->timer = 0;
    9e0a:	2300      	movs	r3, #0
    9e0c:	f888 301a 	strb.w	r3, [r8, #26]
    9e10:	f7ff ba47 	b.w	92a2 <uip_process+0xb2>
    9e14:	0000907d 	.word	0x0000907d

00009e18 <htons>:
  return HTONS(val);
    9e18:	ba40      	rev16	r0, r0
}
    9e1a:	b280      	uxth	r0, r0
    9e1c:	4770      	bx	lr
	...

00009e20 <uip_send>:
/*---------------------------------------------------------------------------*/
void
uip_send(const void *data, int len)
{
  if(len > 0) {
    9e20:	1e0a      	subs	r2, r1, #0
    9e22:	dd0a      	ble.n	9e3a <uip_send+0x1a>
    uip_slen = len;
    9e24:	4b05      	ldr	r3, [pc, #20]	; (9e3c <uip_send+0x1c>)
    9e26:	801a      	strh	r2, [r3, #0]
    if(data != uip_sappdata) {
    9e28:	4b05      	ldr	r3, [pc, #20]	; (9e40 <uip_send+0x20>)
    9e2a:	681b      	ldr	r3, [r3, #0]
    9e2c:	4283      	cmp	r3, r0
    9e2e:	d004      	beq.n	9e3a <uip_send+0x1a>
      memcpy(uip_sappdata, (data), uip_slen);
    9e30:	4601      	mov	r1, r0
    9e32:	b292      	uxth	r2, r2
    9e34:	4618      	mov	r0, r3
    9e36:	4b03      	ldr	r3, [pc, #12]	; (9e44 <uip_send+0x24>)
    9e38:	4718      	bx	r3
    9e3a:	4770      	bx	lr
    9e3c:	20008cc8 	.word	0x20008cc8
    9e40:	20008554 	.word	0x20008554
    9e44:	0000ad77 	.word	0x0000ad77

00009e48 <uip_arp_update.constprop.0>:
{
  register struct arp_entry *tabptr;
  /* Walk through the ARP mapping table and try to find an entry to
     update. If none is found, the IP -> MAC address mapping is
     inserted in the ARP table. */
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    9e48:	4b45      	ldr	r3, [pc, #276]	; (9f60 <uip_arp_update.constprop.0+0x118>)
    9e4a:	4618      	mov	r0, r3
uip_arp_update(u16_t *ipaddr, struct uip_eth_addr *ethaddr)
    9e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    9e50:	2200      	movs	r2, #0
    if(tabptr->ipaddr[0] != 0 &&
       tabptr->ipaddr[1] != 0) {

      /* Check if the source IP address of the incoming packet matches
         the IP address in this ARP table entry. */
      if(ipaddr[0] == tabptr->ipaddr[0] &&
    9e52:	4c44      	ldr	r4, [pc, #272]	; (9f64 <uip_arp_update.constprop.0+0x11c>)
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    9e54:	f800 2b02 	strb.w	r2, [r0], #2
      if(ipaddr[0] == tabptr->ipaddr[0] &&
    9e58:	f8b4 901c 	ldrh.w	r9, [r4, #28]
	 ipaddr[1] == tabptr->ipaddr[1]) {
    9e5c:	f8b4 a01e 	ldrh.w	sl, [r4, #30]
    9e60:	4601      	mov	r1, r0
    9e62:	4696      	mov	lr, r2
    9e64:	4605      	mov	r5, r0
    9e66:	b2d7      	uxtb	r7, r2
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    9e68:	2f08      	cmp	r7, #8
    9e6a:	d123      	bne.n	9eb4 <uip_arp_update.constprop.0+0x6c>

  /* If we get here, no existing ARP table entry was found, so we
     create one. */

  /* First, we try to find an unused entry in the ARP table. */
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    9e6c:	2100      	movs	r1, #0
    9e6e:	7019      	strb	r1, [r3, #0]
    9e70:	4606      	mov	r6, r0
    9e72:	460f      	mov	r7, r1
    9e74:	2908      	cmp	r1, #8
    9e76:	d144      	bne.n	9f02 <uip_arp_update.constprop.0+0xba>
  }

  /* If no unused entry is found, we try to find the oldest entry and
     throw it away. */
  if(i == UIP_ARPTAB_SIZE) {
    tmpage = 0;
    9e78:	2200      	movs	r2, #0
    c = 0;
    for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
      tabptr = &arp_table[i];
      if(arptime - tabptr->time > tmpage) {
    9e7a:	f893 8062 	ldrb.w	r8, [r3, #98]	; 0x62
    tmpage = 0;
    9e7e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
    c = 0;
    9e82:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    9e86:	701a      	strb	r2, [r3, #0]
      if(arptime - tabptr->time > tmpage) {
    9e88:	4616      	mov	r6, r2
    9e8a:	4696      	mov	lr, r2
    9e8c:	4694      	mov	ip, r2
    9e8e:	4617      	mov	r7, r2
    for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    9e90:	2a08      	cmp	r2, #8
    9e92:	d156      	bne.n	9f42 <uip_arp_update.constprop.0+0xfa>
    9e94:	f1bc 0f00 	cmp.w	ip, #0
    9e98:	d001      	beq.n	9e9e <uip_arp_update.constprop.0+0x56>
    9e9a:	f883 7063 	strb.w	r7, [r3, #99]	; 0x63
    9e9e:	b10e      	cbz	r6, 9ea4 <uip_arp_update.constprop.0+0x5c>
    9ea0:	f883 e064 	strb.w	lr, [r3, #100]	; 0x64
	tmpage = arptime - tabptr->time;
	c = i;
      }
    }
    i = c;
    9ea4:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
    9ea8:	701a      	strb	r2, [r3, #0]
    tabptr = &arp_table[i];
    9eaa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    9eae:	eb05 0282 	add.w	r2, r5, r2, lsl #2
    9eb2:	e033      	b.n	9f1c <uip_arp_update.constprop.0+0xd4>
    if(tabptr->ipaddr[0] != 0 &&
    9eb4:	f8b1 8000 	ldrh.w	r8, [r1]
    9eb8:	1a0e      	subs	r6, r1, r0
    9eba:	f1b8 0f00 	cmp.w	r8, #0
    9ebe:	d01b      	beq.n	9ef8 <uip_arp_update.constprop.0+0xb0>
       tabptr->ipaddr[1] != 0) {
    9ec0:	f8b1 c002 	ldrh.w	ip, [r1, #2]
    if(tabptr->ipaddr[0] != 0 &&
    9ec4:	f1bc 0f00 	cmp.w	ip, #0
    9ec8:	d016      	beq.n	9ef8 <uip_arp_update.constprop.0+0xb0>
      if(ipaddr[0] == tabptr->ipaddr[0] &&
    9eca:	45c8      	cmp	r8, r9
    9ecc:	d114      	bne.n	9ef8 <uip_arp_update.constprop.0+0xb0>
    9ece:	45d4      	cmp	ip, sl
    9ed0:	d112      	bne.n	9ef8 <uip_arp_update.constprop.0+0xb0>
    9ed2:	f1be 0f00 	cmp.w	lr, #0
    9ed6:	d000      	beq.n	9eda <uip_arp_update.constprop.0+0x92>
    9ed8:	701f      	strb	r7, [r3, #0]
	memcpy(tabptr->ethaddr.addr, ethaddr->addr, 6);
    9eda:	4823      	ldr	r0, [pc, #140]	; (9f68 <uip_arp_update.constprop.0+0x120>)
    9edc:	1d31      	adds	r1, r6, #4
    9ede:	186c      	adds	r4, r5, r1
    9ee0:	6806      	ldr	r6, [r0, #0]
    9ee2:	506e      	str	r6, [r5, r1]
    9ee4:	8881      	ldrh	r1, [r0, #4]
    9ee6:	80a1      	strh	r1, [r4, #4]
	tabptr->time = arptime;
    9ee8:	210c      	movs	r1, #12
    9eea:	fb01 3202 	mla	r2, r1, r2, r3
    9eee:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
    9ef2:	7313      	strb	r3, [r2, #12]
    9ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9ef8:	310c      	adds	r1, #12
    9efa:	3201      	adds	r2, #1
    9efc:	f04f 0e01 	mov.w	lr, #1
    9f00:	e7b1      	b.n	9e66 <uip_arp_update.constprop.0+0x1e>
    if(tabptr->ipaddr[0] == 0 &&
    9f02:	f8b6 e000 	ldrh.w	lr, [r6]
    tabptr = &arp_table[i];
    9f06:	4632      	mov	r2, r6
    if(tabptr->ipaddr[0] == 0 &&
    9f08:	f1be 0f00 	cmp.w	lr, #0
    9f0c:	d114      	bne.n	9f38 <uip_arp_update.constprop.0+0xf0>
    9f0e:	f8b6 e002 	ldrh.w	lr, [r6, #2]
    9f12:	f1be 0f00 	cmp.w	lr, #0
    9f16:	d10f      	bne.n	9f38 <uip_arp_update.constprop.0+0xf0>
    9f18:	b107      	cbz	r7, 9f1c <uip_arp_update.constprop.0+0xd4>
    9f1a:	7019      	strb	r1, [r3, #0]
  }

  /* Now, i is the ARP table entry which we will fill with the new
     information. */
  memcpy(tabptr->ipaddr, ipaddr, 4);
    9f1c:	4611      	mov	r1, r2
    9f1e:	69e0      	ldr	r0, [r4, #28]
    9f20:	f841 0b04 	str.w	r0, [r1], #4
  memcpy(tabptr->ethaddr.addr, ethaddr->addr, 6);
    9f24:	4810      	ldr	r0, [pc, #64]	; (9f68 <uip_arp_update.constprop.0+0x120>)
  tabptr->time = arptime;
    9f26:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
  memcpy(tabptr->ethaddr.addr, ethaddr->addr, 6);
    9f2a:	6804      	ldr	r4, [r0, #0]
    9f2c:	8880      	ldrh	r0, [r0, #4]
    9f2e:	6054      	str	r4, [r2, #4]
    9f30:	8088      	strh	r0, [r1, #4]
  tabptr->time = arptime;
    9f32:	7293      	strb	r3, [r2, #10]
    9f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9f38:	3101      	adds	r1, #1
    9f3a:	b2c9      	uxtb	r1, r1
    9f3c:	360c      	adds	r6, #12
    9f3e:	2701      	movs	r7, #1
    9f40:	e798      	b.n	9e74 <uip_arp_update.constprop.0+0x2c>
      if(arptime - tabptr->time > tmpage) {
    9f42:	7a81      	ldrb	r1, [r0, #10]
    9f44:	eba8 0101 	sub.w	r1, r8, r1
    9f48:	42b9      	cmp	r1, r7
	tmpage = arptime - tabptr->time;
    9f4a:	bfc4      	itt	gt
    9f4c:	4696      	movgt	lr, r2
    9f4e:	2601      	movgt	r6, #1
    9f50:	f102 0201 	add.w	r2, r2, #1
    9f54:	bfc4      	itt	gt
    9f56:	b2cf      	uxtbgt	r7, r1
    9f58:	46b4      	movgt	ip, r6
    9f5a:	b2d2      	uxtb	r2, r2
    9f5c:	300c      	adds	r0, #12
    9f5e:	e797      	b.n	9e90 <uip_arp_update.constprop.0+0x48>
    9f60:	200072c8 	.word	0x200072c8
    9f64:	20008622 	.word	0x20008622
    9f68:	20008638 	.word	0x20008638

00009f6c <uip_arp_timer>:
{
    9f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
  ++arptime;
    9f6e:	4b12      	ldr	r3, [pc, #72]	; (9fb8 <uip_arp_timer+0x4c>)
    9f70:	f893 0062 	ldrb.w	r0, [r3, #98]	; 0x62
    9f74:	3001      	adds	r0, #1
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    9f76:	2200      	movs	r2, #0
  ++arptime;
    9f78:	b2c0      	uxtb	r0, r0
    9f7a:	f883 0062 	strb.w	r0, [r3, #98]	; 0x62
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    9f7e:	701a      	strb	r2, [r3, #0]
    if((tabptr->ipaddr[0] | tabptr->ipaddr[1]) != 0 &&
    9f80:	260c      	movs	r6, #12
      memset(tabptr->ipaddr, 0, 4);
    9f82:	1c9f      	adds	r7, r3, #2
    9f84:	4615      	mov	r5, r2
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    9f86:	781a      	ldrb	r2, [r3, #0]
    9f88:	2a07      	cmp	r2, #7
    9f8a:	d900      	bls.n	9f8e <uip_arp_timer+0x22>
}
    9f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((tabptr->ipaddr[0] | tabptr->ipaddr[1]) != 0 &&
    9f8e:	fb06 3402 	mla	r4, r6, r2, r3
    9f92:	8861      	ldrh	r1, [r4, #2]
    9f94:	f8b4 e004 	ldrh.w	lr, [r4, #4]
    9f98:	ea41 010e 	orr.w	r1, r1, lr
    9f9c:	b289      	uxth	r1, r1
    9f9e:	b139      	cbz	r1, 9fb0 <uip_arp_timer+0x44>
       arptime - tabptr->time >= UIP_ARP_MAXAGE) {
    9fa0:	7b21      	ldrb	r1, [r4, #12]
    9fa2:	1a41      	subs	r1, r0, r1
    if((tabptr->ipaddr[0] | tabptr->ipaddr[1]) != 0 &&
    9fa4:	2977      	cmp	r1, #119	; 0x77
      memset(tabptr->ipaddr, 0, 4);
    9fa6:	bfc4      	itt	gt
    9fa8:	eb02 0142 	addgt.w	r1, r2, r2, lsl #1
    9fac:	f847 5021 	strgt.w	r5, [r7, r1, lsl #2]
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    9fb0:	3201      	adds	r2, #1
    9fb2:	701a      	strb	r2, [r3, #0]
    9fb4:	e7e7      	b.n	9f86 <uip_arp_timer+0x1a>
    9fb6:	bf00      	nop
    9fb8:	200072c8 	.word	0x200072c8

00009fbc <uip_arp_arpin>:
 * global variable uip_len.
 */
/*-----------------------------------------------------------------------------------*/
void
uip_arp_arpin(void)
{
    9fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  
  if(uip_len < sizeof(struct arp_hdr)) {
    9fc0:	4d28      	ldr	r5, [pc, #160]	; (a064 <uip_arp_arpin+0xa8>)
    9fc2:	882b      	ldrh	r3, [r5, #0]
    9fc4:	2700      	movs	r7, #0
    9fc6:	2b29      	cmp	r3, #41	; 0x29
    uip_len = 0;
    9fc8:	802f      	strh	r7, [r5, #0]
  if(uip_len < sizeof(struct arp_hdr)) {
    9fca:	d801      	bhi.n	9fd0 <uip_arp_arpin+0x14>
    return;
    9fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  uip_len = 0;
  
  switch(BUF->opcode) {
    9fd0:	4c25      	ldr	r4, [pc, #148]	; (a068 <uip_arp_arpin+0xac>)
    9fd2:	8aa3      	ldrh	r3, [r4, #20]
    9fd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    9fd8:	d004      	beq.n	9fe4 <uip_arp_arpin+0x28>
    9fda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    9fde:	d032      	beq.n	a046 <uip_arp_arpin+0x8a>
    9fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  case HTONS(ARP_REQUEST):
    /* ARP request. If it asked for our address, we send out a
       reply. */
    if(uip_ipaddr_cmp(BUF->dipaddr, uip_hostaddr)) {
    9fe4:	4e21      	ldr	r6, [pc, #132]	; (a06c <uip_arp_arpin+0xb0>)
    9fe6:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
    9fe8:	8833      	ldrh	r3, [r6, #0]
    9fea:	429a      	cmp	r2, r3
    9fec:	d138      	bne.n	a060 <uip_arp_arpin+0xa4>
    9fee:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    9ff0:	8873      	ldrh	r3, [r6, #2]
    9ff2:	429a      	cmp	r2, r3
    9ff4:	d134      	bne.n	a060 <uip_arp_arpin+0xa4>
      /* First, we register the one who made the request in our ARP
	 table, since it is likely that we will do more communication
	 with this host in the future. */
      uip_arp_update(BUF->sipaddr, &BUF->shwaddr);
    9ff6:	4b1e      	ldr	r3, [pc, #120]	; (a070 <uip_arp_arpin+0xb4>)
    9ff8:	4798      	blx	r3
      
      /* The reply opcode is 2. */
      BUF->opcode = HTONS(2);
    9ffa:	2302      	movs	r3, #2
    9ffc:	7563      	strb	r3, [r4, #21]

      memcpy(BUF->dhwaddr.addr, BUF->shwaddr.addr, 6);
    9ffe:	4623      	mov	r3, r4
      BUF->opcode = HTONS(2);
    a000:	7527      	strb	r7, [r4, #20]
      memcpy(BUF->dhwaddr.addr, BUF->shwaddr.addr, 6);
    a002:	f853 1f16 	ldr.w	r1, [r3, #22]!
    a006:	6221      	str	r1, [r4, #32]
    a008:	8899      	ldrh	r1, [r3, #4]
    a00a:	84a1      	strh	r1, [r4, #36]	; 0x24
      memcpy(BUF->shwaddr.addr, uip_ethaddr.addr, 6);
    a00c:	4919      	ldr	r1, [pc, #100]	; (a074 <uip_arp_arpin+0xb8>)
    a00e:	6808      	ldr	r0, [r1, #0]
    a010:	8889      	ldrh	r1, [r1, #4]
    a012:	f8c4 0016 	str.w	r0, [r4, #22]
    a016:	8099      	strh	r1, [r3, #4]
      memcpy(BUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
      memcpy(BUF->ethhdr.dest.addr, BUF->dhwaddr.addr, 6);
    a018:	6a23      	ldr	r3, [r4, #32]
    a01a:	6023      	str	r3, [r4, #0]
    a01c:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    a01e:	80a3      	strh	r3, [r4, #4]
      
      BUF->dipaddr[0] = BUF->sipaddr[0];
    a020:	8ba3      	ldrh	r3, [r4, #28]
    a022:	84e3      	strh	r3, [r4, #38]	; 0x26
      BUF->dipaddr[1] = BUF->sipaddr[1];
    a024:	8be3      	ldrh	r3, [r4, #30]
    a026:	8523      	strh	r3, [r4, #40]	; 0x28
      BUF->sipaddr[0] = uip_hostaddr[0];
    a028:	8833      	ldrh	r3, [r6, #0]
    a02a:	83a3      	strh	r3, [r4, #28]
      BUF->sipaddr[1] = uip_hostaddr[1];
    a02c:	8873      	ldrh	r3, [r6, #2]
    a02e:	83e3      	strh	r3, [r4, #30]

      BUF->ethhdr.type = HTONS(UIP_ETHTYPE_ARP);
    a030:	2308      	movs	r3, #8
    a032:	7323      	strb	r3, [r4, #12]
    a034:	2306      	movs	r3, #6
    a036:	7363      	strb	r3, [r4, #13]
      memcpy(BUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
    a038:	f8c4 0006 	str.w	r0, [r4, #6]
      uip_len = sizeof(struct arp_hdr);
    a03c:	232a      	movs	r3, #42	; 0x2a
      memcpy(BUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
    a03e:	8161      	strh	r1, [r4, #10]
      uip_len = sizeof(struct arp_hdr);
    a040:	802b      	strh	r3, [r5, #0]
    a042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    break;
  case HTONS(ARP_REPLY):
    /* ARP reply. We insert or update the ARP table if it was meant
       for us. */
    if(uip_ipaddr_cmp(BUF->dipaddr, uip_hostaddr)) {
    a046:	4b09      	ldr	r3, [pc, #36]	; (a06c <uip_arp_arpin+0xb0>)
    a048:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
    a04a:	881a      	ldrh	r2, [r3, #0]
    a04c:	4291      	cmp	r1, r2
    a04e:	d107      	bne.n	a060 <uip_arp_arpin+0xa4>
    a050:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    a052:	885b      	ldrh	r3, [r3, #2]
    a054:	429a      	cmp	r2, r3
    a056:	d103      	bne.n	a060 <uip_arp_arpin+0xa4>
      uip_arp_update(BUF->sipaddr, &BUF->shwaddr);
    a058:	4b05      	ldr	r3, [pc, #20]	; (a070 <uip_arp_arpin+0xb4>)
    }
    break;
  }

  return;
}
    a05a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      uip_arp_update(BUF->sipaddr, &BUF->shwaddr);
    a05e:	4718      	bx	r3
    a060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a064:	20008550 	.word	0x20008550
    a068:	20008622 	.word	0x20008622
    a06c:	2000861e 	.word	0x2000861e
    a070:	00009e49 	.word	0x00009e49
    a074:	200072c2 	.word	0x200072c2

0000a078 <uip_arp_out>:

     If not ARP table entry is found, we overwrite the original IP
     packet with an ARP request for the IP address. */

  /* First check if destination is a local broadcast. */
  if(uip_ipaddr_cmp(IPBUF->destipaddr, broadcast_ipaddr)) {
    a078:	4b43      	ldr	r3, [pc, #268]	; (a188 <uip_arp_out+0x110>)
    a07a:	8bda      	ldrh	r2, [r3, #30]
    a07c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a080:	428a      	cmp	r2, r1
{
    a082:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(uip_ipaddr_cmp(IPBUF->destipaddr, broadcast_ipaddr)) {
    a084:	d117      	bne.n	a0b6 <uip_arp_out+0x3e>
    a086:	8c19      	ldrh	r1, [r3, #32]
    a088:	4291      	cmp	r1, r2
    a08a:	d114      	bne.n	a0b6 <uip_arp_out+0x3e>
    memcpy(IPBUF->ethhdr.dest.addr, broadcast_ethaddr.addr, 6);
    a08c:	4a3f      	ldr	r2, [pc, #252]	; (a18c <uip_arp_out+0x114>)
    a08e:	6811      	ldr	r1, [r2, #0]
    a090:	8892      	ldrh	r2, [r2, #4]
    a092:	6019      	str	r1, [r3, #0]
      uip_len = sizeof(struct arp_hdr);
      return;
    }

    /* Build an ethernet header. */
    memcpy(IPBUF->ethhdr.dest.addr, tabptr->ethaddr.addr, 6);
    a094:	809a      	strh	r2, [r3, #4]
  }
  memcpy(IPBUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
    a096:	4a3e      	ldr	r2, [pc, #248]	; (a190 <uip_arp_out+0x118>)
    a098:	6811      	ldr	r1, [r2, #0]
    a09a:	f8c3 1006 	str.w	r1, [r3, #6]
    a09e:	8891      	ldrh	r1, [r2, #4]
    a0a0:	4a3c      	ldr	r2, [pc, #240]	; (a194 <uip_arp_out+0x11c>)
    a0a2:	8091      	strh	r1, [r2, #4]
  
  IPBUF->ethhdr.type = HTONS(UIP_ETHTYPE_IP);
    a0a4:	2208      	movs	r2, #8
    a0a6:	731a      	strb	r2, [r3, #12]
    a0a8:	2200      	movs	r2, #0
    a0aa:	735a      	strb	r2, [r3, #13]

  uip_len += sizeof(struct uip_eth_hdr);
    a0ac:	4a3a      	ldr	r2, [pc, #232]	; (a198 <uip_arp_out+0x120>)
    a0ae:	8813      	ldrh	r3, [r2, #0]
    a0b0:	330e      	adds	r3, #14
    a0b2:	8013      	strh	r3, [r2, #0]
    a0b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(!uip_ipaddr_maskcmp(IPBUF->destipaddr, uip_hostaddr, uip_netmask)) {
    a0b6:	4c39      	ldr	r4, [pc, #228]	; (a19c <uip_arp_out+0x124>)
    a0b8:	4e39      	ldr	r6, [pc, #228]	; (a1a0 <uip_arp_out+0x128>)
    a0ba:	8821      	ldrh	r1, [r4, #0]
    a0bc:	8830      	ldrh	r0, [r6, #0]
    a0be:	4051      	eors	r1, r2
    a0c0:	4201      	tst	r1, r0
    a0c2:	4838      	ldr	r0, [pc, #224]	; (a1a4 <uip_arp_out+0x12c>)
    a0c4:	d105      	bne.n	a0d2 <uip_arp_out+0x5a>
    a0c6:	8c1d      	ldrh	r5, [r3, #32]
    a0c8:	8861      	ldrh	r1, [r4, #2]
    a0ca:	8876      	ldrh	r6, [r6, #2]
    a0cc:	4069      	eors	r1, r5
    a0ce:	4231      	tst	r1, r6
    a0d0:	d040      	beq.n	a154 <uip_arp_out+0xdc>
      uip_ipaddr_copy(ipaddr, uip_draddr);
    a0d2:	4a35      	ldr	r2, [pc, #212]	; (a1a8 <uip_arp_out+0x130>)
    a0d4:	8811      	ldrh	r1, [r2, #0]
    a0d6:	8852      	ldrh	r2, [r2, #2]
    a0d8:	f8a0 1066 	strh.w	r1, [r0, #102]	; 0x66
    a0dc:	f8a0 2068 	strh.w	r2, [r0, #104]	; 0x68
    for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    a0e0:	2200      	movs	r2, #0
      if(uip_ipaddr_cmp(ipaddr, tabptr->ipaddr)) {
    a0e2:	f8b0 7066 	ldrh.w	r7, [r0, #102]	; 0x66
    a0e6:	f8b0 6068 	ldrh.w	r6, [r0, #104]	; 0x68
    a0ea:	4930      	ldr	r1, [pc, #192]	; (a1ac <uip_arp_out+0x134>)
    for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    a0ec:	7002      	strb	r2, [r0, #0]
    a0ee:	4615      	mov	r5, r2
    a0f0:	2a08      	cmp	r2, #8
    a0f2:	d134      	bne.n	a15e <uip_arp_out+0xe6>
    a0f4:	b105      	cbz	r5, a0f8 <uip_arp_out+0x80>
    a0f6:	7002      	strb	r2, [r0, #0]
      memset(BUF->ethhdr.dest.addr, 0xff, 6);
    a0f8:	f04f 32ff 	mov.w	r2, #4294967295
      memcpy(BUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
    a0fc:	4824      	ldr	r0, [pc, #144]	; (a190 <uip_arp_out+0x118>)
      memset(BUF->ethhdr.dest.addr, 0xff, 6);
    a0fe:	601a      	str	r2, [r3, #0]
    a100:	809a      	strh	r2, [r3, #4]
      memset(BUF->dhwaddr.addr, 0x00, 6);
    a102:	4a2b      	ldr	r2, [pc, #172]	; (a1b0 <uip_arp_out+0x138>)
      memcpy(BUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
    a104:	6805      	ldr	r5, [r0, #0]
    a106:	8880      	ldrh	r0, [r0, #4]
    a108:	f8c3 5006 	str.w	r5, [r3, #6]
      memcpy(BUF->shwaddr.addr, uip_ethaddr.addr, 6);
    a10c:	f8c3 5016 	str.w	r5, [r3, #22]
      memcpy(BUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
    a110:	f822 0c16 	strh.w	r0, [r2, #-22]
      memcpy(BUF->shwaddr.addr, uip_ethaddr.addr, 6);
    a114:	f822 0c06 	strh.w	r0, [r2, #-6]
      uip_ipaddr_copy(BUF->sipaddr, uip_hostaddr);
    a118:	8820      	ldrh	r0, [r4, #0]
    a11a:	8398      	strh	r0, [r3, #28]
    a11c:	8860      	ldrh	r0, [r4, #2]
    a11e:	83d8      	strh	r0, [r3, #30]
      memset(BUF->dhwaddr.addr, 0x00, 6);
    a120:	2100      	movs	r1, #0
      BUF->opcode = HTONS(ARP_REQUEST); /* ARP request. */
    a122:	2001      	movs	r0, #1
      memset(BUF->dhwaddr.addr, 0x00, 6);
    a124:	6219      	str	r1, [r3, #32]
      BUF->opcode = HTONS(ARP_REQUEST); /* ARP request. */
    a126:	7519      	strb	r1, [r3, #20]
      memset(BUF->dhwaddr.addr, 0x00, 6);
    a128:	8091      	strh	r1, [r2, #4]
      BUF->opcode = HTONS(ARP_REQUEST); /* ARP request. */
    a12a:	7558      	strb	r0, [r3, #21]
      BUF->hwtype = HTONS(ARP_HWTYPE_ETH);
    a12c:	7399      	strb	r1, [r3, #14]
    a12e:	73d8      	strb	r0, [r3, #15]
      BUF->protocol = HTONS(UIP_ETHTYPE_IP);
    a130:	7459      	strb	r1, [r3, #17]
    a132:	2008      	movs	r0, #8
      BUF->hwlen = 6;
    a134:	2106      	movs	r1, #6
      BUF->protolen = 4;
    a136:	2404      	movs	r4, #4
      uip_ipaddr_copy(BUF->dipaddr, ipaddr);
    a138:	84df      	strh	r7, [r3, #38]	; 0x26
    a13a:	851e      	strh	r6, [r3, #40]	; 0x28
      BUF->protocol = HTONS(UIP_ETHTYPE_IP);
    a13c:	7418      	strb	r0, [r3, #16]
      BUF->hwlen = 6;
    a13e:	7499      	strb	r1, [r3, #18]
      BUF->protolen = 4;
    a140:	74dc      	strb	r4, [r3, #19]
      BUF->ethhdr.type = HTONS(UIP_ETHTYPE_ARP);
    a142:	7318      	strb	r0, [r3, #12]
    a144:	7359      	strb	r1, [r3, #13]
      uip_appdata = &uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN];
    a146:	4b1b      	ldr	r3, [pc, #108]	; (a1b4 <uip_arp_out+0x13c>)
    a148:	3216      	adds	r2, #22
    a14a:	601a      	str	r2, [r3, #0]
      uip_len = sizeof(struct arp_hdr);
    a14c:	4b12      	ldr	r3, [pc, #72]	; (a198 <uip_arp_out+0x120>)
    a14e:	222a      	movs	r2, #42	; 0x2a
    a150:	801a      	strh	r2, [r3, #0]
      return;
    a152:	bdf0      	pop	{r4, r5, r6, r7, pc}
      uip_ipaddr_copy(ipaddr, IPBUF->destipaddr);
    a154:	f8a0 2066 	strh.w	r2, [r0, #102]	; 0x66
    a158:	f8a0 5068 	strh.w	r5, [r0, #104]	; 0x68
    a15c:	e7c0      	b.n	a0e0 <uip_arp_out+0x68>
      if(uip_ipaddr_cmp(ipaddr, tabptr->ipaddr)) {
    a15e:	f8b1 e000 	ldrh.w	lr, [r1]
    a162:	45be      	cmp	lr, r7
    a164:	d103      	bne.n	a16e <uip_arp_out+0xf6>
    a166:	f8b1 e002 	ldrh.w	lr, [r1, #2]
    a16a:	45b6      	cmp	lr, r6
    a16c:	d004      	beq.n	a178 <uip_arp_out+0x100>
    a16e:	3201      	adds	r2, #1
    a170:	b2d2      	uxtb	r2, r2
    a172:	310c      	adds	r1, #12
    a174:	2501      	movs	r5, #1
    a176:	e7bb      	b.n	a0f0 <uip_arp_out+0x78>
    a178:	b105      	cbz	r5, a17c <uip_arp_out+0x104>
    a17a:	7002      	strb	r2, [r0, #0]
    memcpy(IPBUF->ethhdr.dest.addr, tabptr->ethaddr.addr, 6);
    a17c:	f851 2f04 	ldr.w	r2, [r1, #4]!
    a180:	601a      	str	r2, [r3, #0]
    a182:	888a      	ldrh	r2, [r1, #4]
    a184:	e786      	b.n	a094 <uip_arp_out+0x1c>
    a186:	bf00      	nop
    a188:	20008622 	.word	0x20008622
    a18c:	0000e5d7 	.word	0x0000e5d7
    a190:	200072c2 	.word	0x200072c2
    a194:	20008628 	.word	0x20008628
    a198:	20008550 	.word	0x20008550
    a19c:	2000861e 	.word	0x2000861e
    a1a0:	2000861a 	.word	0x2000861a
    a1a4:	200072c8 	.word	0x200072c8
    a1a8:	200085e2 	.word	0x200085e2
    a1ac:	200072ca 	.word	0x200072ca
    a1b0:	20008642 	.word	0x20008642
    a1b4:	20008564 	.word	0x20008564

0000a1b8 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    a1b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    a1bc:	4616      	mov	r6, r2
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    a1be:	780a      	ldrb	r2, [r1, #0]
    a1c0:	f3c2 1341 	ubfx	r3, r2, #5, #2
    a1c4:	2b01      	cmp	r3, #1
{
    a1c6:	4607      	mov	r7, r0
    a1c8:	460c      	mov	r4, r1
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    a1ca:	d155      	bne.n	a278 <cdcdf_acm_req+0xc0>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    a1cc:	4b2d      	ldr	r3, [pc, #180]	; (a284 <cdcdf_acm_req+0xcc>)
    a1ce:	8889      	ldrh	r1, [r1, #4]
    a1d0:	7818      	ldrb	r0, [r3, #0]
    a1d2:	4288      	cmp	r0, r1
    a1d4:	461d      	mov	r5, r3
    a1d6:	d002      	beq.n	a1de <cdcdf_acm_req+0x26>
    a1d8:	785b      	ldrb	r3, [r3, #1]
    a1da:	428b      	cmp	r3, r1
    a1dc:	d14c      	bne.n	a278 <cdcdf_acm_req+0xc0>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    a1de:	0613      	lsls	r3, r2, #24
    a1e0:	d50f      	bpl.n	a202 <cdcdf_acm_req+0x4a>
	if (USB_DATA_STAGE == stage) {
    a1e2:	2e01      	cmp	r6, #1
    a1e4:	d035      	beq.n	a252 <cdcdf_acm_req+0x9a>
	switch (req->bRequest) {
    a1e6:	7863      	ldrb	r3, [r4, #1]
    a1e8:	2b21      	cmp	r3, #33	; 0x21
    a1ea:	d114      	bne.n	a216 <cdcdf_acm_req+0x5e>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    a1ec:	88e2      	ldrh	r2, [r4, #6]
    a1ee:	2a07      	cmp	r2, #7
    a1f0:	d145      	bne.n	a27e <cdcdf_acm_req+0xc6>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    a1f2:	4925      	ldr	r1, [pc, #148]	; (a288 <cdcdf_acm_req+0xd0>)
    a1f4:	2300      	movs	r3, #0
			return usbdc_xfer(ep, ctrl_buf, len, false);
    a1f6:	4638      	mov	r0, r7
    a1f8:	4c24      	ldr	r4, [pc, #144]	; (a28c <cdcdf_acm_req+0xd4>)
    a1fa:	47a0      	blx	r4
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    a1fc:	b002      	add	sp, #8
    a1fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    a202:	4b23      	ldr	r3, [pc, #140]	; (a290 <cdcdf_acm_req+0xd8>)
	uint16_t                   len      = req->wLength;
    a204:	f8b4 8006 	ldrh.w	r8, [r4, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    a208:	4798      	blx	r3
	switch (req->bRequest) {
    a20a:	7863      	ldrb	r3, [r4, #1]
    a20c:	2b20      	cmp	r3, #32
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    a20e:	4601      	mov	r1, r0
	switch (req->bRequest) {
    a210:	d004      	beq.n	a21c <cdcdf_acm_req+0x64>
    a212:	2b22      	cmp	r3, #34	; 0x22
    a214:	d024      	beq.n	a260 <cdcdf_acm_req+0xa8>
		return ERR_INVALID_ARG;
    a216:	f06f 000c 	mvn.w	r0, #12
    a21a:	e7ef      	b.n	a1fc <cdcdf_acm_req+0x44>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    a21c:	f1b8 0f07 	cmp.w	r8, #7
    a220:	d12d      	bne.n	a27e <cdcdf_acm_req+0xc6>
		if (USB_SETUP_STAGE == stage) {
    a222:	b916      	cbnz	r6, a22a <cdcdf_acm_req+0x72>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    a224:	4633      	mov	r3, r6
    a226:	4642      	mov	r2, r8
    a228:	e7e5      	b.n	a1f6 <cdcdf_acm_req+0x3e>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    a22a:	6800      	ldr	r0, [r0, #0]
    a22c:	9000      	str	r0, [sp, #0]
    a22e:	798b      	ldrb	r3, [r1, #6]
    a230:	888a      	ldrh	r2, [r1, #4]
    a232:	f88d 3006 	strb.w	r3, [sp, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    a236:	692b      	ldr	r3, [r5, #16]
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    a238:	f8ad 2004 	strh.w	r2, [sp, #4]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    a23c:	b95b      	cbnz	r3, a256 <cdcdf_acm_req+0x9e>
				usbd_cdc_line_coding = line_coding_tmp;
    a23e:	4b12      	ldr	r3, [pc, #72]	; (a288 <cdcdf_acm_req+0xd0>)
    a240:	9800      	ldr	r0, [sp, #0]
    a242:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    a246:	f89d 2006 	ldrb.w	r2, [sp, #6]
    a24a:	f8c5 0006 	str.w	r0, [r5, #6]
    a24e:	8099      	strh	r1, [r3, #4]
    a250:	719a      	strb	r2, [r3, #6]
		return ERR_NONE;
    a252:	2000      	movs	r0, #0
    a254:	e7d2      	b.n	a1fc <cdcdf_acm_req+0x44>
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    a256:	4668      	mov	r0, sp
    a258:	4798      	blx	r3
    a25a:	2800      	cmp	r0, #0
    a25c:	d1ef      	bne.n	a23e <cdcdf_acm_req+0x86>
    a25e:	e7f8      	b.n	a252 <cdcdf_acm_req+0x9a>
		usbdc_xfer(0, NULL, 0, 0);
    a260:	2300      	movs	r3, #0
    a262:	461a      	mov	r2, r3
    a264:	4619      	mov	r1, r3
    a266:	4618      	mov	r0, r3
    a268:	4e08      	ldr	r6, [pc, #32]	; (a28c <cdcdf_acm_req+0xd4>)
    a26a:	47b0      	blx	r6
		if (NULL != cdcdf_acm_notify_state) {
    a26c:	696b      	ldr	r3, [r5, #20]
    a26e:	2b00      	cmp	r3, #0
    a270:	d0ef      	beq.n	a252 <cdcdf_acm_req+0x9a>
			cdcdf_acm_notify_state(req->wValue);
    a272:	8860      	ldrh	r0, [r4, #2]
    a274:	4798      	blx	r3
    a276:	e7ec      	b.n	a252 <cdcdf_acm_req+0x9a>
		return ERR_NOT_FOUND;
    a278:	f06f 0009 	mvn.w	r0, #9
    a27c:	e7be      	b.n	a1fc <cdcdf_acm_req+0x44>
			return ERR_INVALID_DATA;
    a27e:	f04f 30ff 	mov.w	r0, #4294967295
    a282:	e7bb      	b.n	a1fc <cdcdf_acm_req+0x44>
    a284:	20007334 	.word	0x20007334
    a288:	2000733a 	.word	0x2000733a
    a28c:	0000a609 	.word	0x0000a609
    a290:	0000aa25 	.word	0x0000aa25

0000a294 <cdcdf_acm_ctrl>:
	switch (ctrl) {
    a294:	2901      	cmp	r1, #1
{
    a296:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a29a:	4615      	mov	r5, r2
	switch (ctrl) {
    a29c:	d054      	beq.n	a348 <cdcdf_acm_ctrl+0xb4>
    a29e:	d307      	bcc.n	a2b0 <cdcdf_acm_ctrl+0x1c>
		return ERR_INVALID_ARG;
    a2a0:	2902      	cmp	r1, #2
    a2a2:	bf0c      	ite	eq
    a2a4:	f06f 001a 	mvneq.w	r0, #26
    a2a8:	f06f 000c 	mvnne.w	r0, #12
    a2ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a2b0:	6887      	ldr	r7, [r0, #8]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    a2b2:	f8df 8110 	ldr.w	r8, [pc, #272]	; a3c4 <cdcdf_acm_ctrl+0x130>
	ifc = desc->sod;
    a2b6:	6810      	ldr	r0, [r2, #0]
    a2b8:	1e7e      	subs	r6, r7, #1
    a2ba:	f107 0a01 	add.w	sl, r7, #1
		if (NULL == ifc) {
    a2be:	b918      	cbnz	r0, a2c8 <cdcdf_acm_ctrl+0x34>
			return ERR_NOT_FOUND;
    a2c0:	f06f 0009 	mvn.w	r0, #9
    a2c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    a2c8:	7943      	ldrb	r3, [r0, #5]
		ifc_desc.bInterfaceNumber = ifc[2];
    a2ca:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    a2cc:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    a2d0:	2b02      	cmp	r3, #2
    a2d2:	d1f5      	bne.n	a2c0 <cdcdf_acm_ctrl+0x2c>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    a2d4:	f816 3f01 	ldrb.w	r3, [r6, #1]!
    a2d8:	429a      	cmp	r2, r3
    a2da:	d05f      	beq.n	a39c <cdcdf_acm_ctrl+0x108>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    a2dc:	2bff      	cmp	r3, #255	; 0xff
    a2de:	d161      	bne.n	a3a4 <cdcdf_acm_ctrl+0x110>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    a2e0:	7032      	strb	r2, [r6, #0]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    a2e2:	6869      	ldr	r1, [r5, #4]
    a2e4:	f8df 90e0 	ldr.w	r9, [pc, #224]	; a3c8 <cdcdf_acm_ctrl+0x134>
    a2e8:	2205      	movs	r2, #5
    a2ea:	47c0      	blx	r8
    a2ec:	4604      	mov	r4, r0
		while (NULL != ep) {
    a2ee:	b96c      	cbnz	r4, a30c <cdcdf_acm_ctrl+0x78>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    a2f0:	682b      	ldr	r3, [r5, #0]
    a2f2:	6869      	ldr	r1, [r5, #4]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    a2f4:	7818      	ldrb	r0, [r3, #0]
    a2f6:	2204      	movs	r2, #4
    a2f8:	4418      	add	r0, r3
    a2fa:	47c0      	blx	r8
	for (i = 0; i < 2; i++) {
    a2fc:	45b2      	cmp	sl, r6
    a2fe:	d1de      	bne.n	a2be <cdcdf_acm_ctrl+0x2a>
	_cdcdf_acm_funcd.enabled = true;
    a300:	4b2c      	ldr	r3, [pc, #176]	; (a3b4 <cdcdf_acm_ctrl+0x120>)
    a302:	2201      	movs	r2, #1
    a304:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    a306:	4620      	mov	r0, r4
    a308:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (ptr[0] + (ptr[1] << 8));
    a30c:	7961      	ldrb	r1, [r4, #5]
    a30e:	7922      	ldrb	r2, [r4, #4]
			ep_desc.bEndpointAddress = ep[2];
    a310:	f894 b002 	ldrb.w	fp, [r4, #2]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    a314:	4b28      	ldr	r3, [pc, #160]	; (a3b8 <cdcdf_acm_ctrl+0x124>)
    a316:	eb02 2201 	add.w	r2, r2, r1, lsl #8
    a31a:	b292      	uxth	r2, r2
    a31c:	78e1      	ldrb	r1, [r4, #3]
    a31e:	4658      	mov	r0, fp
    a320:	4798      	blx	r3
    a322:	2800      	cmp	r0, #0
    a324:	d142      	bne.n	a3ac <cdcdf_acm_ctrl+0x118>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    a326:	f01b 0f80 	tst.w	fp, #128	; 0x80
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    a32a:	bf14      	ite	ne
    a32c:	f886 b002 	strbne.w	fp, [r6, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    a330:	f887 b004 	strbeq.w	fp, [r7, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    a334:	4658      	mov	r0, fp
    a336:	47c8      	blx	r9
			desc->sod = ep;
    a338:	602c      	str	r4, [r5, #0]
	return (desc + usb_desc_len(desc));
    a33a:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    a33c:	6869      	ldr	r1, [r5, #4]
    a33e:	4b1f      	ldr	r3, [pc, #124]	; (a3bc <cdcdf_acm_ctrl+0x128>)
    a340:	4420      	add	r0, r4
    a342:	4798      	blx	r3
    a344:	4604      	mov	r4, r0
    a346:	e7d2      	b.n	a2ee <cdcdf_acm_ctrl+0x5a>
    a348:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    a34a:	b12a      	cbz	r2, a358 <cdcdf_acm_ctrl+0xc4>
		ifc_desc.bInterfaceClass = desc->sod[5];
    a34c:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    a34e:	795b      	ldrb	r3, [r3, #5]
    a350:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    a354:	2b02      	cmp	r3, #2
    a356:	d1b3      	bne.n	a2c0 <cdcdf_acm_ctrl+0x2c>
		if (func_data->func_iface[i] == 0xFF) {
    a358:	7823      	ldrb	r3, [r4, #0]
    a35a:	2bff      	cmp	r3, #255	; 0xff
    a35c:	d007      	beq.n	a36e <cdcdf_acm_ctrl+0xda>
			if (func_data->func_ep_in[i] != 0xFF) {
    a35e:	78a0      	ldrb	r0, [r4, #2]
			func_data->func_iface[i] = 0xFF;
    a360:	25ff      	movs	r5, #255	; 0xff
			if (func_data->func_ep_in[i] != 0xFF) {
    a362:	42a8      	cmp	r0, r5
			func_data->func_iface[i] = 0xFF;
    a364:	7025      	strb	r5, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    a366:	d002      	beq.n	a36e <cdcdf_acm_ctrl+0xda>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    a368:	4b15      	ldr	r3, [pc, #84]	; (a3c0 <cdcdf_acm_ctrl+0x12c>)
    a36a:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    a36c:	70a5      	strb	r5, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    a36e:	7863      	ldrb	r3, [r4, #1]
    a370:	2bff      	cmp	r3, #255	; 0xff
    a372:	d007      	beq.n	a384 <cdcdf_acm_ctrl+0xf0>
			if (func_data->func_ep_in[i] != 0xFF) {
    a374:	78e0      	ldrb	r0, [r4, #3]
			func_data->func_iface[i] = 0xFF;
    a376:	25ff      	movs	r5, #255	; 0xff
			if (func_data->func_ep_in[i] != 0xFF) {
    a378:	42a8      	cmp	r0, r5
			func_data->func_iface[i] = 0xFF;
    a37a:	7065      	strb	r5, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    a37c:	d002      	beq.n	a384 <cdcdf_acm_ctrl+0xf0>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    a37e:	4b10      	ldr	r3, [pc, #64]	; (a3c0 <cdcdf_acm_ctrl+0x12c>)
    a380:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    a382:	70e5      	strb	r5, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    a384:	7920      	ldrb	r0, [r4, #4]
    a386:	28ff      	cmp	r0, #255	; 0xff
    a388:	d003      	beq.n	a392 <cdcdf_acm_ctrl+0xfe>
		usb_d_ep_deinit(func_data->func_ep_out);
    a38a:	4b0d      	ldr	r3, [pc, #52]	; (a3c0 <cdcdf_acm_ctrl+0x12c>)
    a38c:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    a38e:	23ff      	movs	r3, #255	; 0xff
    a390:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    a392:	4b08      	ldr	r3, [pc, #32]	; (a3b4 <cdcdf_acm_ctrl+0x120>)
    a394:	2000      	movs	r0, #0
    a396:	7158      	strb	r0, [r3, #5]
    a398:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				return ERR_ALREADY_INITIALIZED;
    a39c:	f06f 0011 	mvn.w	r0, #17
    a3a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				return ERR_NO_RESOURCE;
    a3a4:	f06f 001b 	mvn.w	r0, #27
    a3a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				return ERR_NOT_INITIALIZED;
    a3ac:	f06f 0013 	mvn.w	r0, #19
}
    a3b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a3b4:	20007334 	.word	0x20007334
    a3b8:	00001dc1 	.word	0x00001dc1
    a3bc:	0000aa5f 	.word	0x0000aa5f
    a3c0:	00001e21 	.word	0x00001e21
    a3c4:	0000aa45 	.word	0x0000aa45
    a3c8:	00001e4d 	.word	0x00001e4d

0000a3cc <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    a3cc:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    a3ce:	4b0a      	ldr	r3, [pc, #40]	; (a3f8 <cdcdf_acm_init+0x2c>)
    a3d0:	4798      	blx	r3
    a3d2:	2801      	cmp	r0, #1
    a3d4:	d80c      	bhi.n	a3f0 <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    a3d6:	4809      	ldr	r0, [pc, #36]	; (a3fc <cdcdf_acm_init+0x30>)
    a3d8:	4b09      	ldr	r3, [pc, #36]	; (a400 <cdcdf_acm_init+0x34>)
    a3da:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    a3dc:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    a3de:	4b09      	ldr	r3, [pc, #36]	; (a404 <cdcdf_acm_init+0x38>)
    a3e0:	3018      	adds	r0, #24
    a3e2:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    a3e4:	4908      	ldr	r1, [pc, #32]	; (a408 <cdcdf_acm_init+0x3c>)
    a3e6:	4b09      	ldr	r3, [pc, #36]	; (a40c <cdcdf_acm_init+0x40>)
    a3e8:	2001      	movs	r0, #1
    a3ea:	4798      	blx	r3
	return ERR_NONE;
    a3ec:	2000      	movs	r0, #0
    a3ee:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    a3f0:	f06f 0010 	mvn.w	r0, #16
}
    a3f4:	bd08      	pop	{r3, pc}
    a3f6:	bf00      	nop
    a3f8:	0000aa31 	.word	0x0000aa31
    a3fc:	20007334 	.word	0x20007334
    a400:	0000a295 	.word	0x0000a295
    a404:	0000a9d9 	.word	0x0000a9d9
    a408:	20000014 	.word	0x20000014
    a40c:	0000a951 	.word	0x0000a951

0000a410 <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    a410:	b410      	push	{r4}
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    a412:	4c07      	ldr	r4, [pc, #28]	; (a430 <cdcdf_acm_read+0x20>)
	if (!cdcdf_acm_is_enabled()) {
    a414:	7963      	ldrb	r3, [r4, #5]
{
    a416:	460a      	mov	r2, r1
	if (!cdcdf_acm_is_enabled()) {
    a418:	b133      	cbz	r3, a428 <cdcdf_acm_read+0x18>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    a41a:	4601      	mov	r1, r0
    a41c:	7920      	ldrb	r0, [r4, #4]
    a41e:	4c05      	ldr	r4, [pc, #20]	; (a434 <cdcdf_acm_read+0x24>)
    a420:	2300      	movs	r3, #0
    a422:	46a4      	mov	ip, r4
}
    a424:	bc10      	pop	{r4}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    a426:	4760      	bx	ip
}
    a428:	f06f 0010 	mvn.w	r0, #16
    a42c:	bc10      	pop	{r4}
    a42e:	4770      	bx	lr
    a430:	20007334 	.word	0x20007334
    a434:	0000a609 	.word	0x0000a609

0000a438 <cdcdf_acm_write>:
{
    a438:	b410      	push	{r4}
	return _cdcdf_acm_funcd.enabled;
    a43a:	4c07      	ldr	r4, [pc, #28]	; (a458 <cdcdf_acm_write+0x20>)
	if (!cdcdf_acm_is_enabled()) {
    a43c:	7963      	ldrb	r3, [r4, #5]
{
    a43e:	460a      	mov	r2, r1
	if (!cdcdf_acm_is_enabled()) {
    a440:	b133      	cbz	r3, a450 <cdcdf_acm_write+0x18>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    a442:	4601      	mov	r1, r0
    a444:	78e0      	ldrb	r0, [r4, #3]
    a446:	4c05      	ldr	r4, [pc, #20]	; (a45c <cdcdf_acm_write+0x24>)
    a448:	2301      	movs	r3, #1
    a44a:	46a4      	mov	ip, r4
}
    a44c:	bc10      	pop	{r4}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    a44e:	4760      	bx	ip
}
    a450:	f06f 0010 	mvn.w	r0, #16
    a454:	bc10      	pop	{r4}
    a456:	4770      	bx	lr
    a458:	20007334 	.word	0x20007334
    a45c:	0000a609 	.word	0x0000a609

0000a460 <cdcdf_acm_register_callback>:
{
    a460:	b508      	push	{r3, lr}
    a462:	460a      	mov	r2, r1
	switch (cb_type) {
    a464:	2803      	cmp	r0, #3
    a466:	d814      	bhi.n	a492 <cdcdf_acm_register_callback+0x32>
    a468:	e8df f000 	tbb	[pc, r0]
    a46c:	100d0902 	.word	0x100d0902
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    a470:	4b09      	ldr	r3, [pc, #36]	; (a498 <cdcdf_acm_register_callback+0x38>)
    a472:	7918      	ldrb	r0, [r3, #4]
    a474:	2102      	movs	r1, #2
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    a476:	4b09      	ldr	r3, [pc, #36]	; (a49c <cdcdf_acm_register_callback+0x3c>)
    a478:	4798      	blx	r3
	return ERR_NONE;
    a47a:	2000      	movs	r0, #0
		break;
    a47c:	bd08      	pop	{r3, pc}
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    a47e:	4b06      	ldr	r3, [pc, #24]	; (a498 <cdcdf_acm_register_callback+0x38>)
    a480:	2102      	movs	r1, #2
    a482:	78d8      	ldrb	r0, [r3, #3]
    a484:	e7f7      	b.n	a476 <cdcdf_acm_register_callback+0x16>
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    a486:	4b04      	ldr	r3, [pc, #16]	; (a498 <cdcdf_acm_register_callback+0x38>)
    a488:	6119      	str	r1, [r3, #16]
    a48a:	e7f6      	b.n	a47a <cdcdf_acm_register_callback+0x1a>
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    a48c:	4b02      	ldr	r3, [pc, #8]	; (a498 <cdcdf_acm_register_callback+0x38>)
    a48e:	6159      	str	r1, [r3, #20]
    a490:	e7f3      	b.n	a47a <cdcdf_acm_register_callback+0x1a>
		return ERR_INVALID_ARG;
    a492:	f06f 000c 	mvn.w	r0, #12
}
    a496:	bd08      	pop	{r3, pc}
    a498:	20007334 	.word	0x20007334
    a49c:	00001fe9 	.word	0x00001fe9

0000a4a0 <usbdc_unconfig>:
/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    a4a0:	4b05      	ldr	r3, [pc, #20]	; (a4b8 <usbdc_unconfig+0x18>)
{
    a4a2:	b510      	push	{r4, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    a4a4:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    a4a6:	b904      	cbnz	r4, a4aa <usbdc_unconfig+0xa>
		func->ctrl(func, USBDF_DISABLE, NULL);
		func = func->next;
	}
}
    a4a8:	bd10      	pop	{r4, pc}
		func->ctrl(func, USBDF_DISABLE, NULL);
    a4aa:	6863      	ldr	r3, [r4, #4]
    a4ac:	4620      	mov	r0, r4
    a4ae:	2200      	movs	r2, #0
    a4b0:	2101      	movs	r1, #1
    a4b2:	4798      	blx	r3
		func = func->next;
    a4b4:	6824      	ldr	r4, [r4, #0]
    a4b6:	e7f6      	b.n	a4a6 <usbdc_unconfig+0x6>
    a4b8:	20007358 	.word	0x20007358

0000a4bc <usbdc_change_notify>:
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    a4bc:	4b06      	ldr	r3, [pc, #24]	; (a4d8 <usbdc_change_notify+0x1c>)
{
    a4be:	b570      	push	{r4, r5, r6, lr}
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    a4c0:	68dc      	ldr	r4, [r3, #12]
{
    a4c2:	4605      	mov	r5, r0
    a4c4:	460e      	mov	r6, r1

	while (cg != NULL) {
    a4c6:	b904      	cbnz	r4, a4ca <usbdc_change_notify+0xe>
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
	}
}
    a4c8:	bd70      	pop	{r4, r5, r6, pc}
		if (NULL != cg->cb) {
    a4ca:	6863      	ldr	r3, [r4, #4]
    a4cc:	b113      	cbz	r3, a4d4 <usbdc_change_notify+0x18>
			cg->cb(change, value);
    a4ce:	4631      	mov	r1, r6
    a4d0:	4628      	mov	r0, r5
    a4d2:	4798      	blx	r3
		cg = cg->next;
    a4d4:	6824      	ldr	r4, [r4, #0]
    a4d6:	e7f6      	b.n	a4c6 <usbdc_change_notify+0xa>
    a4d8:	20007358 	.word	0x20007358

0000a4dc <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    a4dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    a4de:	4b0c      	ldr	r3, [pc, #48]	; (a510 <usbdc_request_handler+0x34>)
    a4e0:	689c      	ldr	r4, [r3, #8]
{
    a4e2:	4605      	mov	r5, r0
    a4e4:	460e      	mov	r6, r1
    a4e6:	4617      	mov	r7, r2
	int32_t                   rc;

	while (h != NULL) {
    a4e8:	b90c      	cbnz	r4, a4ee <usbdc_request_handler+0x12>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    a4ea:	4620      	mov	r0, r4
    a4ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (NULL != h->cb) {
    a4ee:	6863      	ldr	r3, [r4, #4]
    a4f0:	b90b      	cbnz	r3, a4f6 <usbdc_request_handler+0x1a>
		h = h->next;
    a4f2:	6824      	ldr	r4, [r4, #0]
    a4f4:	e7f8      	b.n	a4e8 <usbdc_request_handler+0xc>
			rc = h->cb(ep, req, stage);
    a4f6:	463a      	mov	r2, r7
    a4f8:	4631      	mov	r1, r6
    a4fa:	4628      	mov	r0, r5
    a4fc:	4798      	blx	r3
			if (0 == rc) {
    a4fe:	b120      	cbz	r0, a50a <usbdc_request_handler+0x2e>
			} else if (ERR_NOT_FOUND != rc) {
    a500:	300a      	adds	r0, #10
    a502:	d0f6      	beq.n	a4f2 <usbdc_request_handler+0x16>
				return -1;
    a504:	f04f 30ff 	mov.w	r0, #4294967295
}
    a508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    a50a:	2001      	movs	r0, #1
    a50c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a50e:	bf00      	nop
    a510:	20007358 	.word	0x20007358

0000a514 <usbd_sof_cb>:
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    a514:	4b04      	ldr	r3, [pc, #16]	; (a528 <usbd_sof_cb+0x14>)

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    a516:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    a518:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    a51a:	b904      	cbnz	r4, a51e <usbd_sof_cb+0xa>
	usbdc_sof_notify();
}
    a51c:	bd10      	pop	{r4, pc}
		if (NULL != sof->cb) {
    a51e:	6863      	ldr	r3, [r4, #4]
    a520:	b103      	cbz	r3, a524 <usbd_sof_cb+0x10>
			sof->cb();
    a522:	4798      	blx	r3
		sof = sof->next;
    a524:	6824      	ldr	r4, [r4, #0]
    a526:	e7f8      	b.n	a51a <usbd_sof_cb+0x6>
    a528:	20007358 	.word	0x20007358

0000a52c <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    a52c:	b510      	push	{r4, lr}
    a52e:	4614      	mov	r4, r2
	(void)ep;

	switch (code) {
    a530:	460a      	mov	r2, r1
    a532:	b119      	cbz	r1, a53c <usbdc_cb_ctl_done+0x10>
    a534:	2901      	cmp	r1, #1
    a536:	d020      	beq.n	a57a <usbdc_cb_ctl_done+0x4e>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    a538:	2000      	movs	r0, #0
    a53a:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    a53c:	7823      	ldrb	r3, [r4, #0]
    a53e:	2b00      	cmp	r3, #0
    a540:	d1fa      	bne.n	a538 <usbdc_cb_ctl_done+0xc>
	switch (req->bRequest) {
    a542:	7863      	ldrb	r3, [r4, #1]
    a544:	2b05      	cmp	r3, #5
    a546:	d00d      	beq.n	a564 <usbdc_cb_ctl_done+0x38>
    a548:	2b09      	cmp	r3, #9
    a54a:	d1f5      	bne.n	a538 <usbdc_cb_ctl_done+0xc>
		usbdc.cfg_value = req->wValue;
    a54c:	8862      	ldrh	r2, [r4, #2]
    a54e:	4b0d      	ldr	r3, [pc, #52]	; (a584 <usbdc_cb_ctl_done+0x58>)
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    a550:	2a00      	cmp	r2, #0
		usbdc.cfg_value = req->wValue;
    a552:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    a554:	bf14      	ite	ne
    a556:	2104      	movne	r1, #4
    a558:	2103      	moveq	r1, #3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    a55a:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    a55c:	2001      	movs	r0, #1
    a55e:	4b0a      	ldr	r3, [pc, #40]	; (a588 <usbdc_cb_ctl_done+0x5c>)
    a560:	4798      	blx	r3
    a562:	e7e9      	b.n	a538 <usbdc_cb_ctl_done+0xc>
		usbdc_set_address(req->wValue);
    a564:	8860      	ldrh	r0, [r4, #2]
	usb_d_set_address(addr);
    a566:	4b09      	ldr	r3, [pc, #36]	; (a58c <usbdc_cb_ctl_done+0x60>)
    a568:	b2c0      	uxtb	r0, r0
    a56a:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    a56c:	8863      	ldrh	r3, [r4, #2]
    a56e:	2b00      	cmp	r3, #0
    a570:	bf14      	ite	ne
    a572:	2103      	movne	r1, #3
    a574:	2102      	moveq	r1, #2
    a576:	4b03      	ldr	r3, [pc, #12]	; (a584 <usbdc_cb_ctl_done+0x58>)
    a578:	e7ef      	b.n	a55a <usbdc_cb_ctl_done+0x2e>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    a57a:	4621      	mov	r1, r4
    a57c:	4b04      	ldr	r3, [pc, #16]	; (a590 <usbdc_cb_ctl_done+0x64>)
    a57e:	2000      	movs	r0, #0
    a580:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    a582:	e7d9      	b.n	a538 <usbdc_cb_ctl_done+0xc>
    a584:	20007358 	.word	0x20007358
    a588:	0000a4bd 	.word	0x0000a4bd
    a58c:	00001db9 	.word	0x00001db9
    a590:	0000a4dd 	.word	0x0000a4dd

0000a594 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    a594:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();
    a596:	4b0e      	ldr	r3, [pc, #56]	; (a5d0 <usbdc_reset+0x3c>)

	usbdc.state       = USBD_S_DEFAULT;
    a598:	4d0e      	ldr	r5, [pc, #56]	; (a5d4 <usbdc_reset+0x40>)
	usbdc.cfg_value   = 0;
    a59a:	2400      	movs	r4, #0
	usbdc_unconfig();
    a59c:	4798      	blx	r3
	usbdc.state       = USBD_S_DEFAULT;
    a59e:	2602      	movs	r6, #2
	usbdc.ifc_alt_map = 0;

	// Setup EP0
	usb_d_ep_deinit(0);
    a5a0:	4620      	mov	r0, r4
    a5a2:	4b0d      	ldr	r3, [pc, #52]	; (a5d8 <usbdc_reset+0x44>)
	usbdc.state       = USBD_S_DEFAULT;
    a5a4:	76ae      	strb	r6, [r5, #26]
	usbdc.cfg_value   = 0;
    a5a6:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    a5a8:	776c      	strb	r4, [r5, #29]
	usb_d_ep_deinit(0);
    a5aa:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    a5ac:	4b0b      	ldr	r3, [pc, #44]	; (a5dc <usbdc_reset+0x48>)
    a5ae:	7f28      	ldrb	r0, [r5, #28]
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    a5b0:	4d0b      	ldr	r5, [pc, #44]	; (a5e0 <usbdc_reset+0x4c>)
	usb_d_ep0_init(usbdc.ctrl_size);
    a5b2:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    a5b4:	4621      	mov	r1, r4
    a5b6:	4620      	mov	r0, r4
    a5b8:	4a0a      	ldr	r2, [pc, #40]	; (a5e4 <usbdc_reset+0x50>)
    a5ba:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    a5bc:	4620      	mov	r0, r4
    a5be:	4631      	mov	r1, r6
    a5c0:	4a09      	ldr	r2, [pc, #36]	; (a5e8 <usbdc_reset+0x54>)
    a5c2:	47a8      	blx	r5
	usb_d_ep_enable(0);
    a5c4:	4620      	mov	r0, r4
    a5c6:	4b09      	ldr	r3, [pc, #36]	; (a5ec <usbdc_reset+0x58>)
}
    a5c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	usb_d_ep_enable(0);
    a5cc:	4718      	bx	r3
    a5ce:	bf00      	nop
    a5d0:	0000a4a1 	.word	0x0000a4a1
    a5d4:	20007358 	.word	0x20007358
    a5d8:	00001e21 	.word	0x00001e21
    a5dc:	00001e11 	.word	0x00001e11
    a5e0:	00001fe9 	.word	0x00001fe9
    a5e4:	0000a629 	.word	0x0000a629
    a5e8:	0000a52d 	.word	0x0000a52d
    a5ec:	00001e4d 	.word	0x00001e4d

0000a5f0 <usbd_event_cb>:
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
	(void)param;

	switch (ev) {
    a5f0:	b110      	cbz	r0, a5f8 <usbd_event_cb+0x8>
    a5f2:	2801      	cmp	r0, #1
    a5f4:	d002      	beq.n	a5fc <usbd_event_cb+0xc>
    a5f6:	4770      	bx	lr
	case USB_EV_VBUS:
		usbdc_change_notify(USBDC_C_CONN, param);
    a5f8:	4b01      	ldr	r3, [pc, #4]	; (a600 <usbd_event_cb+0x10>)
    a5fa:	4718      	bx	r3
		break;

	case USB_EV_RESET:
		usbdc_reset();
    a5fc:	4b01      	ldr	r3, [pc, #4]	; (a604 <usbd_event_cb+0x14>)
    a5fe:	4718      	bx	r3
    a600:	0000a4bd 	.word	0x0000a4bd
    a604:	0000a595 	.word	0x0000a595

0000a608 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    a608:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    a60a:	f88d 000c 	strb.w	r0, [sp, #12]
    a60e:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    a612:	a801      	add	r0, sp, #4
    a614:	4b03      	ldr	r3, [pc, #12]	; (a624 <usbdc_xfer+0x1c>)
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    a616:	9101      	str	r1, [sp, #4]
    a618:	9202      	str	r2, [sp, #8]
	return usb_d_ep_transfer(&xfer);
    a61a:	4798      	blx	r3
}
    a61c:	b005      	add	sp, #20
    a61e:	f85d fb04 	ldr.w	pc, [sp], #4
    a622:	bf00      	nop
    a624:	00001e8d 	.word	0x00001e8d

0000a628 <usbdc_cb_ctl_req>:
{
    a628:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    a62c:	4baa      	ldr	r3, [pc, #680]	; (a8d8 <usbdc_cb_ctl_req+0x2b0>)
    a62e:	2200      	movs	r2, #0
{
    a630:	4605      	mov	r5, r0
    a632:	460c      	mov	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    a634:	4798      	blx	r3
    a636:	1c43      	adds	r3, r0, #1
    a638:	d008      	beq.n	a64c <usbdc_cb_ctl_req+0x24>
    a63a:	2801      	cmp	r0, #1
    a63c:	d075      	beq.n	a72a <usbdc_cb_ctl_req+0x102>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    a63e:	7821      	ldrb	r1, [r4, #0]
    a640:	f011 03e0 	ands.w	r3, r1, #224	; 0xe0
    a644:	d004      	beq.n	a650 <usbdc_cb_ctl_req+0x28>
    a646:	2b80      	cmp	r3, #128	; 0x80
    a648:	f000 80c4 	beq.w	a7d4 <usbdc_cb_ctl_req+0x1ac>
	return false;
    a64c:	2000      	movs	r0, #0
    a64e:	e06c      	b.n	a72a <usbdc_cb_ctl_req+0x102>
	switch (req->bRequest) {
    a650:	7863      	ldrb	r3, [r4, #1]
    a652:	3b01      	subs	r3, #1
    a654:	2b0a      	cmp	r3, #10
    a656:	d8f9      	bhi.n	a64c <usbdc_cb_ctl_req+0x24>
    a658:	a201      	add	r2, pc, #4	; (adr r2, a660 <usbdc_cb_ctl_req+0x38>)
    a65a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    a65e:	bf00      	nop
    a660:	0000a709 	.word	0x0000a709
    a664:	0000a64d 	.word	0x0000a64d
    a668:	0000a731 	.word	0x0000a731
    a66c:	0000a64d 	.word	0x0000a64d
    a670:	0000a697 	.word	0x0000a697
    a674:	0000a64d 	.word	0x0000a64d
    a678:	0000a64d 	.word	0x0000a64d
    a67c:	0000a64d 	.word	0x0000a64d
    a680:	0000a68d 	.word	0x0000a68d
    a684:	0000a64d 	.word	0x0000a64d
    a688:	0000a741 	.word	0x0000a741
		if (!usbdc_set_config(req->wValue)) {
    a68c:	8862      	ldrh	r2, [r4, #2]
    a68e:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    a690:	b92a      	cbnz	r2, a69e <usbdc_cb_ctl_req+0x76>
		usbdc_unconfig();
    a692:	4b92      	ldr	r3, [pc, #584]	; (a8dc <usbdc_cb_ctl_req+0x2b4>)
    a694:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    a696:	2200      	movs	r2, #0
    a698:	2301      	movs	r3, #1
    a69a:	4611      	mov	r1, r2
    a69c:	e0ec      	b.n	a878 <usbdc_cb_ctl_req+0x250>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    a69e:	4c90      	ldr	r4, [pc, #576]	; (a8e0 <usbdc_cb_ctl_req+0x2b8>)
    a6a0:	6823      	ldr	r3, [r4, #0]
    a6a2:	e893 0003 	ldmia.w	r3, {r0, r1}
    a6a6:	4b8f      	ldr	r3, [pc, #572]	; (a8e4 <usbdc_cb_ctl_req+0x2bc>)
    a6a8:	4798      	blx	r3
	if (NULL == cfg_desc) {
    a6aa:	2800      	cmp	r0, #0
    a6ac:	d0ce      	beq.n	a64c <usbdc_cb_ctl_req+0x24>
	return (ptr[0] + (ptr[1] << 8));
    a6ae:	78c2      	ldrb	r2, [r0, #3]
    a6b0:	7883      	ldrb	r3, [r0, #2]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    a6b2:	4f8d      	ldr	r7, [pc, #564]	; (a8e8 <usbdc_cb_ctl_req+0x2c0>)
    a6b4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
	desc.eod  = cfg_desc + total_len;
    a6b8:	fa10 f183 	uxtah	r1, r0, r3
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    a6bc:	2204      	movs	r2, #4
	desc.eod  = cfg_desc + total_len;
    a6be:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    a6c0:	47b8      	blx	r7
    a6c2:	f10d 0808 	add.w	r8, sp, #8
	uint8_t                 last_iface = 0xFF;
    a6c6:	23ff      	movs	r3, #255	; 0xff
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    a6c8:	f848 0d08 	str.w	r0, [r8, #-8]!
	while (NULL != desc.sod) {
    a6cc:	9a00      	ldr	r2, [sp, #0]
    a6ce:	2a00      	cmp	r2, #0
    a6d0:	d0e1      	beq.n	a696 <usbdc_cb_ctl_req+0x6e>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    a6d2:	f892 9002 	ldrb.w	r9, [r2, #2]
    a6d6:	4599      	cmp	r9, r3
    a6d8:	d014      	beq.n	a704 <usbdc_cb_ctl_req+0xdc>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    a6da:	6926      	ldr	r6, [r4, #16]
			while (NULL != func) {
    a6dc:	b94e      	cbnz	r6, a6f2 <usbdc_cb_ctl_req+0xca>
		desc.sod = usb_desc_next(desc.sod);
    a6de:	9800      	ldr	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    a6e0:	9901      	ldr	r1, [sp, #4]
	return (desc + usb_desc_len(desc));
    a6e2:	7803      	ldrb	r3, [r0, #0]
    a6e4:	2204      	movs	r2, #4
    a6e6:	4418      	add	r0, r3
		desc.sod = usb_desc_next(desc.sod);
    a6e8:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    a6ea:	47b8      	blx	r7
    a6ec:	464b      	mov	r3, r9
    a6ee:	9000      	str	r0, [sp, #0]
    a6f0:	e7ec      	b.n	a6cc <usbdc_cb_ctl_req+0xa4>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    a6f2:	6873      	ldr	r3, [r6, #4]
    a6f4:	4642      	mov	r2, r8
    a6f6:	2100      	movs	r1, #0
    a6f8:	4630      	mov	r0, r6
    a6fa:	4798      	blx	r3
    a6fc:	2800      	cmp	r0, #0
    a6fe:	d0ee      	beq.n	a6de <usbdc_cb_ctl_req+0xb6>
					func = func->next;
    a700:	6836      	ldr	r6, [r6, #0]
    a702:	e7eb      	b.n	a6dc <usbdc_cb_ctl_req+0xb4>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    a704:	4699      	mov	r9, r3
    a706:	e7ea      	b.n	a6de <usbdc_cb_ctl_req+0xb6>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    a708:	2902      	cmp	r1, #2
    a70a:	d19f      	bne.n	a64c <usbdc_cb_ctl_req+0x24>
		if (req->wLength != 0) {
    a70c:	88e6      	ldrh	r6, [r4, #6]
    a70e:	2e00      	cmp	r6, #0
    a710:	d19c      	bne.n	a64c <usbdc_cb_ctl_req+0x24>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    a712:	88a0      	ldrh	r0, [r4, #4]
    a714:	4631      	mov	r1, r6
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    a716:	4b75      	ldr	r3, [pc, #468]	; (a8ec <usbdc_cb_ctl_req+0x2c4>)
    a718:	b2c0      	uxtb	r0, r0
    a71a:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    a71c:	2301      	movs	r3, #1
    a71e:	4632      	mov	r2, r6
    a720:	4631      	mov	r1, r6
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    a722:	4628      	mov	r0, r5
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    a724:	4c72      	ldr	r4, [pc, #456]	; (a8f0 <usbdc_cb_ctl_req+0x2c8>)
    a726:	47a0      	blx	r4
			return true;
    a728:	2001      	movs	r0, #1
}
    a72a:	b003      	add	sp, #12
    a72c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    a730:	2902      	cmp	r1, #2
    a732:	d18b      	bne.n	a64c <usbdc_cb_ctl_req+0x24>
		if (req->wLength != 0) {
    a734:	88e6      	ldrh	r6, [r4, #6]
    a736:	2e00      	cmp	r6, #0
    a738:	d188      	bne.n	a64c <usbdc_cb_ctl_req+0x24>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    a73a:	88a0      	ldrh	r0, [r4, #4]
    a73c:	2101      	movs	r1, #1
    a73e:	e7ea      	b.n	a716 <usbdc_cb_ctl_req+0xee>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    a740:	4d67      	ldr	r5, [pc, #412]	; (a8e0 <usbdc_cb_ctl_req+0x2b8>)
		return usbdc_set_interface(req->wValue, req->wIndex);
    a742:	8866      	ldrh	r6, [r4, #2]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    a744:	682b      	ldr	r3, [r5, #0]
    a746:	7eea      	ldrb	r2, [r5, #27]
		return usbdc_set_interface(req->wValue, req->wIndex);
    a748:	88a7      	ldrh	r7, [r4, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    a74a:	e893 0003 	ldmia.w	r3, {r0, r1}
    a74e:	4b65      	ldr	r3, [pc, #404]	; (a8e4 <usbdc_cb_ctl_req+0x2bc>)
    a750:	4798      	blx	r3
	if (NULL == ifc) {
    a752:	2800      	cmp	r0, #0
    a754:	f43f af7a 	beq.w	a64c <usbdc_cb_ctl_req+0x24>
	desc.sod = ifc;
    a758:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    a75a:	78c2      	ldrb	r2, [r0, #3]
    a75c:	7881      	ldrb	r1, [r0, #2]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    a75e:	4c62      	ldr	r4, [pc, #392]	; (a8e8 <usbdc_cb_ctl_req+0x2c0>)
    a760:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    a764:	fa10 f181 	uxtah	r1, r0, r1
    a768:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    a76a:	2204      	movs	r2, #4
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    a76c:	47a0      	blx	r4
		if (NULL == ifc) {
    a76e:	2800      	cmp	r0, #0
    a770:	f43f af6c 	beq.w	a64c <usbdc_cb_ctl_req+0x24>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    a774:	7883      	ldrb	r3, [r0, #2]
    a776:	42bb      	cmp	r3, r7
    a778:	d113      	bne.n	a7a2 <usbdc_cb_ctl_req+0x17a>
    a77a:	78c3      	ldrb	r3, [r0, #3]
    a77c:	42b3      	cmp	r3, r6
    a77e:	d110      	bne.n	a7a2 <usbdc_cb_ctl_req+0x17a>
	desc.sod = ifc;
    a780:	f10d 0808 	add.w	r8, sp, #8
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    a784:	692c      	ldr	r4, [r5, #16]
	desc.sod = ifc;
    a786:	f848 0d08 	str.w	r0, [r8, #-8]!
	while (NULL != func) {
    a78a:	2c00      	cmp	r4, #0
    a78c:	f43f af5e 	beq.w	a64c <usbdc_cb_ctl_req+0x24>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    a790:	2101      	movs	r1, #1
    a792:	6863      	ldr	r3, [r4, #4]
    a794:	4642      	mov	r2, r8
    a796:	4620      	mov	r0, r4
    a798:	4798      	blx	r3
    a79a:	4601      	mov	r1, r0
    a79c:	b140      	cbz	r0, a7b0 <usbdc_cb_ctl_req+0x188>
			func = func->next;
    a79e:	6824      	ldr	r4, [r4, #0]
    a7a0:	e7f3      	b.n	a78a <usbdc_cb_ctl_req+0x162>
		desc.sod = usb_desc_next(desc.sod);
    a7a2:	9800      	ldr	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    a7a4:	9901      	ldr	r1, [sp, #4]
	return (desc + usb_desc_len(desc));
    a7a6:	7803      	ldrb	r3, [r0, #0]
    a7a8:	4418      	add	r0, r3
		desc.sod = usb_desc_next(desc.sod);
    a7aa:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    a7ac:	2204      	movs	r2, #4
    a7ae:	e7dd      	b.n	a76c <usbdc_cb_ctl_req+0x144>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    a7b0:	6863      	ldr	r3, [r4, #4]
    a7b2:	4642      	mov	r2, r8
    a7b4:	4620      	mov	r0, r4
    a7b6:	4798      	blx	r3
    a7b8:	2800      	cmp	r0, #0
    a7ba:	f47f af47 	bne.w	a64c <usbdc_cb_ctl_req+0x24>
			if (alt_set) {
    a7be:	b126      	cbz	r6, a7ca <usbdc_cb_ctl_req+0x1a2>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    a7c0:	2301      	movs	r3, #1
    a7c2:	40bb      	lsls	r3, r7
    a7c4:	7f6f      	ldrb	r7, [r5, #29]
    a7c6:	431f      	orrs	r7, r3
    a7c8:	776f      	strb	r7, [r5, #29]
			usbdc_xfer(0, NULL, 0, 0);
    a7ca:	2300      	movs	r3, #0
    a7cc:	461a      	mov	r2, r3
    a7ce:	4619      	mov	r1, r3
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    a7d0:	4618      	mov	r0, r3
    a7d2:	e7a7      	b.n	a724 <usbdc_cb_ctl_req+0xfc>
	switch (req->bRequest) {
    a7d4:	7863      	ldrb	r3, [r4, #1]
    a7d6:	2b0a      	cmp	r3, #10
    a7d8:	f63f af38 	bhi.w	a64c <usbdc_cb_ctl_req+0x24>
    a7dc:	a201      	add	r2, pc, #4	; (adr r2, a7e4 <usbdc_cb_ctl_req+0x1bc>)
    a7de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    a7e2:	bf00      	nop
    a7e4:	0000a8b3 	.word	0x0000a8b3
    a7e8:	0000a64d 	.word	0x0000a64d
    a7ec:	0000a64d 	.word	0x0000a64d
    a7f0:	0000a64d 	.word	0x0000a64d
    a7f4:	0000a64d 	.word	0x0000a64d
    a7f8:	0000a64d 	.word	0x0000a64d
    a7fc:	0000a811 	.word	0x0000a811
    a800:	0000a64d 	.word	0x0000a64d
    a804:	0000a8a3 	.word	0x0000a8a3
    a808:	0000a64d 	.word	0x0000a64d
    a80c:	0000a90d 	.word	0x0000a90d
	uint8_t type = (uint8_t)(req->wValue >> 8);
    a810:	8863      	ldrh	r3, [r4, #2]
	switch (type) {
    a812:	0a1a      	lsrs	r2, r3, #8
    a814:	2a02      	cmp	r2, #2
    a816:	d014      	beq.n	a842 <usbdc_cb_ctl_req+0x21a>
    a818:	2a03      	cmp	r2, #3
    a81a:	d034      	beq.n	a886 <usbdc_cb_ctl_req+0x25e>
    a81c:	2a01      	cmp	r2, #1
    a81e:	f47f af15 	bne.w	a64c <usbdc_cb_ctl_req+0x24>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    a822:	4b2f      	ldr	r3, [pc, #188]	; (a8e0 <usbdc_cb_ctl_req+0x2b8>)
	uint16_t length   = req->wLength;
    a824:	88e4      	ldrh	r4, [r4, #6]
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    a826:	681b      	ldr	r3, [r3, #0]
    a828:	2c12      	cmp	r4, #18
    a82a:	e893 0003 	ldmia.w	r3, {r0, r1}
    a82e:	4b2e      	ldr	r3, [pc, #184]	; (a8e8 <usbdc_cb_ctl_req+0x2c0>)
    a830:	bf28      	it	cs
    a832:	2412      	movcs	r4, #18
    a834:	4798      	blx	r3
	if (!dev_desc) {
    a836:	4601      	mov	r1, r0
    a838:	2800      	cmp	r0, #0
    a83a:	f43f af07 	beq.w	a64c <usbdc_cb_ctl_req+0x24>
		need_zlp = false;
    a83e:	2300      	movs	r3, #0
    a840:	e019      	b.n	a876 <usbdc_cb_ctl_req+0x24e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    a842:	4a27      	ldr	r2, [pc, #156]	; (a8e0 <usbdc_cb_ctl_req+0x2b8>)
	uint16_t length   = req->wLength;
    a844:	88e4      	ldrh	r4, [r4, #6]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    a846:	6810      	ldr	r0, [r2, #0]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    a848:	7f16      	ldrb	r6, [r2, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    a84a:	1c5a      	adds	r2, r3, #1
    a84c:	c803      	ldmia	r0, {r0, r1}
    a84e:	b2d2      	uxtb	r2, r2
    a850:	4b24      	ldr	r3, [pc, #144]	; (a8e4 <usbdc_cb_ctl_req+0x2bc>)
    a852:	4798      	blx	r3
	if (NULL == cfg_desc) {
    a854:	4601      	mov	r1, r0
    a856:	2800      	cmp	r0, #0
    a858:	f43f aef8 	beq.w	a64c <usbdc_cb_ctl_req+0x24>
	return (ptr[0] + (ptr[1] << 8));
    a85c:	78c3      	ldrb	r3, [r0, #3]
    a85e:	7882      	ldrb	r2, [r0, #2]
    a860:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    a864:	b292      	uxth	r2, r2
	if (length <= str_desc[0]) {
    a866:	4294      	cmp	r4, r2
    a868:	d9e9      	bls.n	a83e <usbdc_cb_ctl_req+0x216>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    a86a:	3e01      	subs	r6, #1
    a86c:	4226      	tst	r6, r4
    a86e:	bf0c      	ite	eq
    a870:	2301      	moveq	r3, #1
    a872:	2300      	movne	r3, #0
    a874:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    a876:	4622      	mov	r2, r4
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    a878:	4628      	mov	r0, r5
    a87a:	4c1d      	ldr	r4, [pc, #116]	; (a8f0 <usbdc_cb_ctl_req+0x2c8>)
    a87c:	47a0      	blx	r4
    a87e:	fab0 f080 	clz	r0, r0
    a882:	0940      	lsrs	r0, r0, #5
    a884:	e751      	b.n	a72a <usbdc_cb_ctl_req+0x102>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    a886:	4a16      	ldr	r2, [pc, #88]	; (a8e0 <usbdc_cb_ctl_req+0x2b8>)
	uint16_t length   = req->wLength;
    a888:	88e4      	ldrh	r4, [r4, #6]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    a88a:	6810      	ldr	r0, [r2, #0]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    a88c:	7f16      	ldrb	r6, [r2, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    a88e:	c803      	ldmia	r0, {r0, r1}
    a890:	b2da      	uxtb	r2, r3
    a892:	4b18      	ldr	r3, [pc, #96]	; (a8f4 <usbdc_cb_ctl_req+0x2cc>)
    a894:	4798      	blx	r3
	if (NULL == str_desc) {
    a896:	4601      	mov	r1, r0
    a898:	2800      	cmp	r0, #0
    a89a:	f43f aed7 	beq.w	a64c <usbdc_cb_ctl_req+0x24>
	if (length <= str_desc[0]) {
    a89e:	7802      	ldrb	r2, [r0, #0]
    a8a0:	e7e1      	b.n	a866 <usbdc_cb_ctl_req+0x23e>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    a8a2:	490f      	ldr	r1, [pc, #60]	; (a8e0 <usbdc_cb_ctl_req+0x2b8>)
    a8a4:	694b      	ldr	r3, [r1, #20]
    a8a6:	7eca      	ldrb	r2, [r1, #27]
    a8a8:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    a8aa:	2300      	movs	r3, #0
    a8ac:	2201      	movs	r2, #1
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    a8ae:	6949      	ldr	r1, [r1, #20]
    a8b0:	e737      	b.n	a722 <usbdc_cb_ctl_req+0xfa>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    a8b2:	f001 011f 	and.w	r1, r1, #31
    a8b6:	2901      	cmp	r1, #1
    a8b8:	d91e      	bls.n	a8f8 <usbdc_cb_ctl_req+0x2d0>
    a8ba:	2902      	cmp	r1, #2
    a8bc:	f47f aec6 	bne.w	a64c <usbdc_cb_ctl_req+0x24>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    a8c0:	88a0      	ldrh	r0, [r4, #4]
    a8c2:	4b0a      	ldr	r3, [pc, #40]	; (a8ec <usbdc_cb_ctl_req+0x2c4>)
    a8c4:	b2c0      	uxtb	r0, r0
    a8c6:	4798      	blx	r3
		if (st < 0) {
    a8c8:	2800      	cmp	r0, #0
    a8ca:	f6ff aebf 	blt.w	a64c <usbdc_cb_ctl_req+0x24>
		st = st & 0x1;
    a8ce:	f000 0001 	and.w	r0, r0, #1
    a8d2:	9000      	str	r0, [sp, #0]
    a8d4:	e012      	b.n	a8fc <usbdc_cb_ctl_req+0x2d4>
    a8d6:	bf00      	nop
    a8d8:	0000a4dd 	.word	0x0000a4dd
    a8dc:	0000a4a1 	.word	0x0000a4a1
    a8e0:	20007358 	.word	0x20007358
    a8e4:	0000aa7d 	.word	0x0000aa7d
    a8e8:	0000aa45 	.word	0x0000aa45
    a8ec:	00001f85 	.word	0x00001f85
    a8f0:	0000a609 	.word	0x0000a609
    a8f4:	0000aab9 	.word	0x0000aab9
		st = 0;
    a8f8:	2300      	movs	r3, #0
    a8fa:	9300      	str	r3, [sp, #0]
	memcpy(usbdc.ctrl_buf, &st, 2);
    a8fc:	4913      	ldr	r1, [pc, #76]	; (a94c <usbdc_cb_ctl_req+0x324>)
    a8fe:	f8bd 2000 	ldrh.w	r2, [sp]
    a902:	694b      	ldr	r3, [r1, #20]
    a904:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    a906:	2300      	movs	r3, #0
    a908:	2202      	movs	r2, #2
    a90a:	e7d0      	b.n	a8ae <usbdc_cb_ctl_req+0x286>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    a90c:	490f      	ldr	r1, [pc, #60]	; (a94c <usbdc_cb_ctl_req+0x324>)
    a90e:	88a2      	ldrh	r2, [r4, #4]
    a910:	7f4b      	ldrb	r3, [r1, #29]
    a912:	4113      	asrs	r3, r2
    a914:	f013 0301 	ands.w	r3, r3, #1
    a918:	460e      	mov	r6, r1
    a91a:	d115      	bne.n	a948 <usbdc_cb_ctl_req+0x320>
		usbdc.ctrl_buf[0] = 0;
    a91c:	694a      	ldr	r2, [r1, #20]
    a91e:	7013      	strb	r3, [r2, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    a920:	6949      	ldr	r1, [r1, #20]
    a922:	2201      	movs	r2, #1
    a924:	e754      	b.n	a7d0 <usbdc_cb_ctl_req+0x1a8>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    a926:	686b      	ldr	r3, [r5, #4]
    a928:	4622      	mov	r2, r4
    a92a:	2102      	movs	r1, #2
    a92c:	4628      	mov	r0, r5
    a92e:	4798      	blx	r3
    a930:	2800      	cmp	r0, #0
    a932:	da03      	bge.n	a93c <usbdc_cb_ctl_req+0x314>
			func = func->next;
    a934:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    a936:	2d00      	cmp	r5, #0
    a938:	d1f5      	bne.n	a926 <usbdc_cb_ctl_req+0x2fe>
    a93a:	e687      	b.n	a64c <usbdc_cb_ctl_req+0x24>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    a93c:	6973      	ldr	r3, [r6, #20]
    a93e:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    a940:	2201      	movs	r2, #1
    a942:	2300      	movs	r3, #0
    a944:	6971      	ldr	r1, [r6, #20]
    a946:	e743      	b.n	a7d0 <usbdc_cb_ctl_req+0x1a8>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    a948:	690d      	ldr	r5, [r1, #16]
    a94a:	e7f4      	b.n	a936 <usbdc_cb_ctl_req+0x30e>
    a94c:	20007358 	.word	0x20007358

0000a950 <usbdc_register_handler>:
/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
	switch (type) {
    a950:	2801      	cmp	r0, #1
    a952:	d006      	beq.n	a962 <usbdc_register_handler+0x12>
    a954:	d302      	bcc.n	a95c <usbdc_register_handler+0xc>
    a956:	2802      	cmp	r0, #2
    a958:	d005      	beq.n	a966 <usbdc_register_handler+0x16>
    a95a:	4770      	bx	lr
	case USBDC_HDL_SOF:
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    a95c:	4803      	ldr	r0, [pc, #12]	; (a96c <usbdc_register_handler+0x1c>)
		break;
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    a95e:	4b04      	ldr	r3, [pc, #16]	; (a970 <usbdc_register_handler+0x20>)
    a960:	4718      	bx	r3
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    a962:	4804      	ldr	r0, [pc, #16]	; (a974 <usbdc_register_handler+0x24>)
    a964:	e7fb      	b.n	a95e <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    a966:	4804      	ldr	r0, [pc, #16]	; (a978 <usbdc_register_handler+0x28>)
    a968:	e7f9      	b.n	a95e <usbdc_register_handler+0xe>
    a96a:	bf00      	nop
    a96c:	2000735c 	.word	0x2000735c
    a970:	0000207d 	.word	0x0000207d
    a974:	20007360 	.word	0x20007360
    a978:	20007364 	.word	0x20007364

0000a97c <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    a97c:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
    a97e:	4605      	mov	r5, r0
    a980:	3000      	adds	r0, #0
    a982:	bf18      	it	ne
    a984:	2001      	movne	r0, #1
    a986:	f240 3255 	movw	r2, #853	; 0x355
    a98a:	490b      	ldr	r1, [pc, #44]	; (a9b8 <usbdc_init+0x3c>)
    a98c:	4b0b      	ldr	r3, [pc, #44]	; (a9bc <usbdc_init+0x40>)
    a98e:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    a990:	4b0b      	ldr	r3, [pc, #44]	; (a9c0 <usbdc_init+0x44>)
    a992:	4798      	blx	r3
	if (rc < 0) {
    a994:	2800      	cmp	r0, #0
    a996:	db0e      	blt.n	a9b6 <usbdc_init+0x3a>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    a998:	4c0a      	ldr	r4, [pc, #40]	; (a9c4 <usbdc_init+0x48>)
    a99a:	4b0b      	ldr	r3, [pc, #44]	; (a9c8 <usbdc_init+0x4c>)
    a99c:	2220      	movs	r2, #32
    a99e:	2100      	movs	r1, #0
    a9a0:	4620      	mov	r0, r4
    a9a2:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    a9a4:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    a9a6:	4909      	ldr	r1, [pc, #36]	; (a9cc <usbdc_init+0x50>)
    a9a8:	4c09      	ldr	r4, [pc, #36]	; (a9d0 <usbdc_init+0x54>)
    a9aa:	2000      	movs	r0, #0
    a9ac:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    a9ae:	2001      	movs	r0, #1
    a9b0:	4908      	ldr	r1, [pc, #32]	; (a9d4 <usbdc_init+0x58>)
    a9b2:	47a0      	blx	r4

	return 0;
    a9b4:	2000      	movs	r0, #0
}
    a9b6:	bd38      	pop	{r3, r4, r5, pc}
    a9b8:	0000e5dd 	.word	0x0000e5dd
    a9bc:	00002035 	.word	0x00002035
    a9c0:	00001d3d 	.word	0x00001d3d
    a9c4:	20007358 	.word	0x20007358
    a9c8:	0000adc1 	.word	0x0000adc1
    a9cc:	0000a515 	.word	0x0000a515
    a9d0:	00001da1 	.word	0x00001da1
    a9d4:	0000a5f1 	.word	0x0000a5f1

0000a9d8 <usbdc_register_function>:
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
	list_insert_at_end(&usbdc.func_list, func);
    a9d8:	4601      	mov	r1, r0
    a9da:	4b01      	ldr	r3, [pc, #4]	; (a9e0 <usbdc_register_function+0x8>)
    a9dc:	4801      	ldr	r0, [pc, #4]	; (a9e4 <usbdc_register_function+0xc>)
    a9de:	4718      	bx	r3
    a9e0:	0000207d 	.word	0x0000207d
    a9e4:	20007368 	.word	0x20007368

0000a9e8 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    a9e8:	b510      	push	{r4, lr}
	if (usbdc.state >= USBD_S_POWER) {
    a9ea:	4b0a      	ldr	r3, [pc, #40]	; (aa14 <usbdc_start+0x2c>)
    a9ec:	7e9c      	ldrb	r4, [r3, #26]
    a9ee:	b954      	cbnz	r4, aa06 <usbdc_start+0x1e>
		return ERR_BUSY;
	}

	if (desces) {
    a9f0:	b160      	cbz	r0, aa0c <usbdc_start+0x24>
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    a9f2:	6802      	ldr	r2, [r0, #0]
		usbdc.desces.ls_fs = desces;
    a9f4:	6018      	str	r0, [r3, #0]
	usbdc.ctrl_size = desces->sod[7];
    a9f6:	79d2      	ldrb	r2, [r2, #7]
    a9f8:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    a9fa:	2201      	movs	r2, #1
    a9fc:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    a9fe:	4b06      	ldr	r3, [pc, #24]	; (aa18 <usbdc_start+0x30>)
    aa00:	4798      	blx	r3
	return ERR_NONE;
    aa02:	4620      	mov	r0, r4
    aa04:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    aa06:	f06f 0003 	mvn.w	r0, #3
    aa0a:	bd10      	pop	{r4, pc}
		return ERR_BAD_DATA;
    aa0c:	f06f 0008 	mvn.w	r0, #8
}
    aa10:	bd10      	pop	{r4, pc}
    aa12:	bf00      	nop
    aa14:	20007358 	.word	0x20007358
    aa18:	00001da9 	.word	0x00001da9

0000aa1c <usbdc_attach>:
/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
	usb_d_attach();
    aa1c:	4b00      	ldr	r3, [pc, #0]	; (aa20 <usbdc_attach+0x4>)
    aa1e:	4718      	bx	r3
    aa20:	00001db1 	.word	0x00001db1

0000aa24 <usbdc_get_ctrl_buffer>:
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
}
    aa24:	4b01      	ldr	r3, [pc, #4]	; (aa2c <usbdc_get_ctrl_buffer+0x8>)
    aa26:	6958      	ldr	r0, [r3, #20]
    aa28:	4770      	bx	lr
    aa2a:	bf00      	nop
    aa2c:	20007358 	.word	0x20007358

0000aa30 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    aa30:	4b03      	ldr	r3, [pc, #12]	; (aa40 <usbdc_get_state+0x10>)
    aa32:	7e98      	ldrb	r0, [r3, #26]
    aa34:	f010 0f10 	tst.w	r0, #16
		return USBD_S_SUSPEND;
	}
	return usbdc.state;
}
    aa38:	bf18      	it	ne
    aa3a:	2010      	movne	r0, #16
    aa3c:	4770      	bx	lr
    aa3e:	bf00      	nop
    aa40:	20007358 	.word	0x20007358

0000aa44 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    aa44:	b510      	push	{r4, lr}
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    aa46:	4288      	cmp	r0, r1
    aa48:	d301      	bcc.n	aa4e <usb_find_desc+0xa>
		_desc_len_check();
    aa4a:	2000      	movs	r0, #0
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
}
    aa4c:	bd10      	pop	{r4, pc}
    aa4e:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    aa50:	2b01      	cmp	r3, #1
    aa52:	d9fa      	bls.n	aa4a <usb_find_desc+0x6>
		if (type == usb_desc_type(desc)) {
    aa54:	7844      	ldrb	r4, [r0, #1]
    aa56:	4294      	cmp	r4, r2
    aa58:	d0f8      	beq.n	aa4c <usb_find_desc+0x8>
	return (desc + usb_desc_len(desc));
    aa5a:	4418      	add	r0, r3
    aa5c:	e7f3      	b.n	aa46 <usb_find_desc+0x2>

0000aa5e <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    aa5e:	4288      	cmp	r0, r1
    aa60:	d301      	bcc.n	aa66 <usb_find_ep_desc+0x8>
		_desc_len_check();
    aa62:	2000      	movs	r0, #0
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
}
    aa64:	4770      	bx	lr
    aa66:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    aa68:	2b01      	cmp	r3, #1
    aa6a:	d9fa      	bls.n	aa62 <usb_find_ep_desc+0x4>
	return desc[1];
    aa6c:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    aa6e:	2a04      	cmp	r2, #4
    aa70:	d0f7      	beq.n	aa62 <usb_find_ep_desc+0x4>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    aa72:	2a05      	cmp	r2, #5
    aa74:	d0f6      	beq.n	aa64 <usb_find_ep_desc+0x6>
	return (desc + usb_desc_len(desc));
    aa76:	4418      	add	r0, r3
    aa78:	e7f1      	b.n	aa5e <usb_find_ep_desc>
	...

0000aa7c <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    aa7c:	b538      	push	{r3, r4, r5, lr}
    aa7e:	4615      	mov	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    aa80:	4b0c      	ldr	r3, [pc, #48]	; (aab4 <usb_find_cfg_desc+0x38>)
    aa82:	2202      	movs	r2, #2
{
    aa84:	460c      	mov	r4, r1
	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    aa86:	4798      	blx	r3
	if (!desc) {
    aa88:	b978      	cbnz	r0, aaaa <usb_find_cfg_desc+0x2e>
    aa8a:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
	}
	while (desc < eof) {
		_desc_len_check();
    aa8c:	7803      	ldrb	r3, [r0, #0]
    aa8e:	2b01      	cmp	r3, #1
    aa90:	d90d      	bls.n	aaae <usb_find_cfg_desc+0x32>
		if (desc[1] != USB_DT_CONFIG) {
    aa92:	7843      	ldrb	r3, [r0, #1]
    aa94:	2b02      	cmp	r3, #2
    aa96:	d10a      	bne.n	aaae <usb_find_cfg_desc+0x32>
			break;
		}
		if (desc[5] == cfg_value) {
    aa98:	7943      	ldrb	r3, [r0, #5]
    aa9a:	42ab      	cmp	r3, r5
    aa9c:	d008      	beq.n	aab0 <usb_find_cfg_desc+0x34>
	return (ptr[0] + (ptr[1] << 8));
    aa9e:	78c2      	ldrb	r2, [r0, #3]
    aaa0:	7883      	ldrb	r3, [r0, #2]
    aaa2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    aaa6:	fa10 f083 	uxtah	r0, r0, r3
	while (desc < eof) {
    aaaa:	42a0      	cmp	r0, r4
    aaac:	d3ee      	bcc.n	aa8c <usb_find_cfg_desc+0x10>
		return NULL;
    aaae:	2000      	movs	r0, #0
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
}
    aab0:	bd38      	pop	{r3, r4, r5, pc}
    aab2:	bf00      	nop
    aab4:	0000aa45 	.word	0x0000aa45

0000aab8 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    aab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    aaba:	4f0a      	ldr	r7, [pc, #40]	; (aae4 <usb_find_str_desc+0x2c>)
{
    aabc:	460d      	mov	r5, r1
    aabe:	4616      	mov	r6, r2
	for (i = 0; desc < eof;) {
    aac0:	2400      	movs	r4, #0
    aac2:	42a8      	cmp	r0, r5
    aac4:	d301      	bcc.n	aaca <usb_find_str_desc+0x12>
				return desc;
			}
			i++;
			desc = usb_desc_next(desc);
		} else {
			return NULL;
    aac6:	2000      	movs	r0, #0
		}
	}
	return NULL;
}
    aac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    aaca:	2203      	movs	r2, #3
    aacc:	4629      	mov	r1, r5
    aace:	47b8      	blx	r7
		if (desc) {
    aad0:	2800      	cmp	r0, #0
    aad2:	d0f9      	beq.n	aac8 <usb_find_str_desc+0x10>
    aad4:	7803      	ldrb	r3, [r0, #0]
			_desc_len_check();
    aad6:	2b01      	cmp	r3, #1
    aad8:	d9f5      	bls.n	aac6 <usb_find_str_desc+0xe>
			if (i == str_index) {
    aada:	42b4      	cmp	r4, r6
    aadc:	d0f4      	beq.n	aac8 <usb_find_str_desc+0x10>
	return (desc + usb_desc_len(desc));
    aade:	4418      	add	r0, r3
    aae0:	3401      	adds	r4, #1
    aae2:	e7ee      	b.n	aac2 <usb_find_str_desc+0xa>
    aae4:	0000aa45 	.word	0x0000aa45

0000aae8 <usb_device_cb_bulk_in>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool usb_device_cb_bulk_in(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    aae8:	b508      	push	{r3, lr}
	/* Echo data. */
	cdcdf_acm_read((uint8_t *)usbd_cdc_buffer, sizeof(usbd_cdc_buffer));
    aaea:	2140      	movs	r1, #64	; 0x40
    aaec:	4b02      	ldr	r3, [pc, #8]	; (aaf8 <usb_device_cb_bulk_in+0x10>)
    aaee:	4803      	ldr	r0, [pc, #12]	; (aafc <usb_device_cb_bulk_in+0x14>)
    aaf0:	4798      	blx	r3

	/* No error. */
	return false;
}
    aaf2:	2000      	movs	r0, #0
    aaf4:	bd08      	pop	{r3, pc}
    aaf6:	bf00      	nop
    aaf8:	0000a411 	.word	0x0000a411
    aafc:	20007378 	.word	0x20007378

0000ab00 <usb_device_cb_bulk_out>:
{
    ab00:	b508      	push	{r3, lr}
	cdcdf_acm_write((uint8_t *)usbd_cdc_buffer, count);
    ab02:	4611      	mov	r1, r2
    ab04:	4b02      	ldr	r3, [pc, #8]	; (ab10 <usb_device_cb_bulk_out+0x10>)
    ab06:	4803      	ldr	r0, [pc, #12]	; (ab14 <usb_device_cb_bulk_out+0x14>)
    ab08:	4798      	blx	r3
}
    ab0a:	2000      	movs	r0, #0
    ab0c:	bd08      	pop	{r3, pc}
    ab0e:	bf00      	nop
    ab10:	0000a439 	.word	0x0000a439
    ab14:	20007378 	.word	0x20007378

0000ab18 <usb_device_cb_state_c>:

/**
 * \brief Callback invoked when Line State Change
 */
bool usb_device_cb_state_c(usb_cdc_control_signal_t state)
{
    ab18:	b513      	push	{r0, r1, r4, lr}
	if (state.rs232.DTR) {
    ab1a:	07c3      	lsls	r3, r0, #31
{
    ab1c:	f8ad 0004 	strh.w	r0, [sp, #4]
	if (state.rs232.DTR) {
    ab20:	d50a      	bpl.n	ab38 <usb_device_cb_state_c+0x20>
		/* Callbacks must be registered after endpoint allocation */
		cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)usb_device_cb_bulk_out);
    ab22:	4907      	ldr	r1, [pc, #28]	; (ab40 <usb_device_cb_state_c+0x28>)
    ab24:	4c07      	ldr	r4, [pc, #28]	; (ab44 <usb_device_cb_state_c+0x2c>)
    ab26:	2000      	movs	r0, #0
    ab28:	47a0      	blx	r4
		cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)usb_device_cb_bulk_in);
    ab2a:	4907      	ldr	r1, [pc, #28]	; (ab48 <usb_device_cb_state_c+0x30>)
    ab2c:	2001      	movs	r0, #1
    ab2e:	47a0      	blx	r4
		/* Start Rx */
		cdcdf_acm_read((uint8_t *)usbd_cdc_buffer, sizeof(usbd_cdc_buffer));
    ab30:	2140      	movs	r1, #64	; 0x40
    ab32:	4806      	ldr	r0, [pc, #24]	; (ab4c <usb_device_cb_state_c+0x34>)
    ab34:	4b06      	ldr	r3, [pc, #24]	; (ab50 <usb_device_cb_state_c+0x38>)
    ab36:	4798      	blx	r3
	}

	/* No error. */
	return false;
}
    ab38:	2000      	movs	r0, #0
    ab3a:	b002      	add	sp, #8
    ab3c:	bd10      	pop	{r4, pc}
    ab3e:	bf00      	nop
    ab40:	0000ab01 	.word	0x0000ab01
    ab44:	0000a461 	.word	0x0000a461
    ab48:	0000aae9 	.word	0x0000aae9
    ab4c:	20007378 	.word	0x20007378
    ab50:	0000a411 	.word	0x0000a411

0000ab54 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    ab54:	b510      	push	{r4, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    ab56:	4b06      	ldr	r3, [pc, #24]	; (ab70 <cdc_device_acm_init+0x1c>)
    ab58:	4806      	ldr	r0, [pc, #24]	; (ab74 <cdc_device_acm_init+0x20>)
    ab5a:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    ab5c:	4b06      	ldr	r3, [pc, #24]	; (ab78 <cdc_device_acm_init+0x24>)
    ab5e:	4798      	blx	r3

	usbdc_start(single_desc);
    ab60:	4b06      	ldr	r3, [pc, #24]	; (ab7c <cdc_device_acm_init+0x28>)
    ab62:	4807      	ldr	r0, [pc, #28]	; (ab80 <cdc_device_acm_init+0x2c>)
    ab64:	4798      	blx	r3
	usbdc_attach();
    ab66:	4b07      	ldr	r3, [pc, #28]	; (ab84 <cdc_device_acm_init+0x30>)
}
    ab68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	usbdc_attach();
    ab6c:	4718      	bx	r3
    ab6e:	bf00      	nop
    ab70:	0000a97d 	.word	0x0000a97d
    ab74:	200073b8 	.word	0x200073b8
    ab78:	0000a3cd 	.word	0x0000a3cd
    ab7c:	0000a9e9 	.word	0x0000a9e9
    ab80:	2000001c 	.word	0x2000001c
    ab84:	0000aa1d 	.word	0x0000aa1d

0000ab88 <usb_init>:
}

void usb_init(void)
{

	cdc_device_acm_init();
    ab88:	4b00      	ldr	r3, [pc, #0]	; (ab8c <usb_init+0x4>)
    ab8a:	4718      	bx	r3
    ab8c:	0000ab55 	.word	0x0000ab55

0000ab90 <bash_spi_transfer.constprop.0>:
// Function:    bash_spi_transfer(unsigned char *tx, unsigned char *rx, int size)
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: rolls round the push-pull MOSI/MISO of the SPI bus for [size] bytes of 8-bits, MSB
// Returns:     Nothing
// *****************************************************************************************************************************************************************
static void inline bash_spi_transfer(unsigned char *tx, unsigned char *rx, int size)
    ab90:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    ab94:	4e1e      	ldr	r6, [pc, #120]	; (ac10 <bash_spi_transfer.constprop.0+0x80>)
    ab96:	4d1f      	ldr	r5, [pc, #124]	; (ac14 <bash_spi_transfer.constprop.0+0x84>)
{
	int count, loop;
	
	for (count = 0; count < size; count++) {
    ab98:	f04f 0800 	mov.w	r8, #0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    ab9c:	f44f 4900 	mov.w	r9, #32768	; 0x8000
		rx[count] = 0;
		
		for (loop = 8; loop; loop--) {
			gpio_set_pin_level(PB12_SPI_MOSI, (tx[count] & (1 << (loop - 1))) ? 1 : 0);
    aba0:	f106 0a04 	add.w	sl, r6, #4
		rx[count] = 0;
    aba4:	2300      	movs	r3, #0
    aba6:	7033      	strb	r3, [r6, #0]
		for (loop = 8; loop; loop--) {
    aba8:	2708      	movs	r7, #8
			gpio_set_pin_level(PB12_SPI_MOSI, (tx[count] & (1 << (loop - 1))) ? 1 : 0);
    abaa:	f818 300a 	ldrb.w	r3, [r8, sl]
    abae:	3f01      	subs	r7, #1
    abb0:	413b      	asrs	r3, r7
	if (level) {
    abb2:	f013 0f01 	tst.w	r3, #1
    abb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    abba:	bf14      	ite	ne
    abbc:	f8c5 3098 	strne.w	r3, [r5, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    abc0:	f8c5 3094 	streq.w	r3, [r5, #148]	; 0x94
	CRITICAL_SECTION_ENTER();
    abc4:	a801      	add	r0, sp, #4
    abc6:	f8c5 9094 	str.w	r9, [r5, #148]	; 0x94
    abca:	4b13      	ldr	r3, [pc, #76]	; (ac18 <bash_spi_transfer.constprop.0+0x88>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    abcc:	f8c5 9098 	str.w	r9, [r5, #152]	; 0x98
    abd0:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    abd2:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    abd6:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    abda:	f8d5 4090 	ldr.w	r4, [r5, #144]	; 0x90
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    abde:	405c      	eors	r4, r3
    abe0:	4014      	ands	r4, r2
    abe2:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    abe4:	a801      	add	r0, sp, #4
    abe6:	4b0d      	ldr	r3, [pc, #52]	; (ac1c <bash_spi_transfer.constprop.0+0x8c>)
    abe8:	4798      	blx	r3
    abea:	f3c4 3440 	ubfx	r4, r4, #13, #1
			gpio_set_pin_level(PB15_SPI_CLK, 0);
			gpio_set_pin_level(PB15_SPI_CLK, 1);
			
			rx[count] |= (gpio_get_pin_level(PB13_SPI_MISO) << (loop - 1));
    abee:	7833      	ldrb	r3, [r6, #0]
    abf0:	40bc      	lsls	r4, r7
    abf2:	431c      	orrs	r4, r3
    abf4:	7034      	strb	r4, [r6, #0]
		for (loop = 8; loop; loop--) {
    abf6:	2f00      	cmp	r7, #0
    abf8:	d1d7      	bne.n	abaa <bash_spi_transfer.constprop.0+0x1a>
	for (count = 0; count < size; count++) {
    abfa:	f108 0801 	add.w	r8, r8, #1
    abfe:	f1b8 0f03 	cmp.w	r8, #3
    ac02:	f106 0601 	add.w	r6, r6, #1
    ac06:	d1cd      	bne.n	aba4 <bash_spi_transfer.constprop.0+0x14>
		}
	}
}
    ac08:	b002      	add	sp, #8
    ac0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ac0e:	bf00      	nop
    ac10:	200073f8 	.word	0x200073f8
    ac14:	41008000 	.word	0x41008000
    ac18:	000011cd 	.word	0x000011cd
    ac1c:	000011db 	.word	0x000011db

0000ac20 <EEprom_settings>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: when requiring EEprom configuration data to be read or written to/from the non-volatile area, this facilitates the [NV] access
// Returns:     Nothing
// *****************************************************************************************************************************************************************
int EEprom_settings(unsigned char *data, unsigned int size, unsigned char write_notread)
{
    ac20:	b410      	push	{r4}
    ac22:	460b      	mov	r3, r1
	/* If we have a write flag set, then write the setting configuration overlay image into NV ram */
	if (write_notread) {
    ac24:	b13a      	cbz	r2, ac36 <EEprom_settings+0x16>
		return flash_write(&FLASH_0, 256 * 1024, data, size);
    ac26:	4602      	mov	r2, r0
    ac28:	4c06      	ldr	r4, [pc, #24]	; (ac44 <EEprom_settings+0x24>)
    ac2a:	4807      	ldr	r0, [pc, #28]	; (ac48 <EEprom_settings+0x28>)
    ac2c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
	}
	
	/* else, if we have a read flag set, then read the setting configuration overlay image from the NV ram into the "data" pointer"*/
	return flash_read(&FLASH_0, 256 * 1024, data, size);
    ac30:	46a4      	mov	ip, r4
}
    ac32:	bc10      	pop	{r4}
	return flash_read(&FLASH_0, 256 * 1024, data, size);
    ac34:	4760      	bx	ip
    ac36:	4602      	mov	r2, r0
    ac38:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    ac3c:	4802      	ldr	r0, [pc, #8]	; (ac48 <EEprom_settings+0x28>)
    ac3e:	4c03      	ldr	r4, [pc, #12]	; (ac4c <EEprom_settings+0x2c>)
    ac40:	e7f6      	b.n	ac30 <EEprom_settings+0x10>
    ac42:	bf00      	nop
    ac44:	00001369 	.word	0x00001369
    ac48:	20007408 	.word	0x20007408
    ac4c:	000012f9 	.word	0x000012f9

0000ac50 <checkKSZreg>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: check a value in an SPI register of the KSZ-Micrel Ethernet SWITCH
// Returns:     does the register value match the check value? True: False
// *****************************************************************************************************************************************************************
bool checkKSZreg(uint16_t reg, unsigned char verify)
{
    ac50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Lower the nCS line for this SPI device */	
	gpio_set_pin_level(PB07_SPInCS_KSZ8974, 0);	
	
    /* Setup the 3 control bytes to perform a register read operation */		
	command_dataw[0] = 0x40 + REG_SPI_READ + (unsigned char)(reg >> 7);
    ac52:	4c0b      	ldr	r4, [pc, #44]	; (ac80 <checkKSZreg+0x30>)
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    ac54:	4d0b      	ldr	r5, [pc, #44]	; (ac84 <checkKSZreg+0x34>)
    ac56:	09c3      	lsrs	r3, r0, #7
    ac58:	2680      	movs	r6, #128	; 0x80
    ac5a:	3360      	adds	r3, #96	; 0x60
    ac5c:	f8c5 6094 	str.w	r6, [r5, #148]	; 0x94
    ac60:	7123      	strb	r3, [r4, #4]
	command_dataw[1] = (unsigned char)(reg & 0x7F) << 1;
	command_dataw[2] = 0x00;
    ac62:	2300      	movs	r3, #0
	command_dataw[1] = (unsigned char)(reg & 0x7F) << 1;
    ac64:	0040      	lsls	r0, r0, #1
	command_dataw[2] = 0x00;
    ac66:	71a3      	strb	r3, [r4, #6]
	
	/* Perform the actual 3-byte push/pull SPI operation */
	bash_spi_transfer(command_dataw, command_datar, 3);
    ac68:	4b07      	ldr	r3, [pc, #28]	; (ac88 <checkKSZreg+0x38>)
	command_dataw[1] = (unsigned char)(reg & 0x7F) << 1;
    ac6a:	7160      	strb	r0, [r4, #5]
{
    ac6c:	460f      	mov	r7, r1
	bash_spi_transfer(command_dataw, command_datar, 3);
    ac6e:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    ac70:	f8c5 6098 	str.w	r6, [r5, #152]	; 0x98

	/* Raise the nCS line for this SPI device */	
	gpio_set_pin_level(PB07_SPInCS_KSZ8974, 1);
	
	/* Check to see if the read data byte from the SPI end-point register matches the "verify" parameter and return the result as a boolean */
	return (command_datar[2] == verify) ? 1 : 0;
    ac74:	78a0      	ldrb	r0, [r4, #2]
}
    ac76:	1bc3      	subs	r3, r0, r7
    ac78:	4258      	negs	r0, r3
    ac7a:	4158      	adcs	r0, r3
    ac7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ac7e:	bf00      	nop
    ac80:	200073f8 	.word	0x200073f8
    ac84:	41008000 	.word	0x41008000
    ac88:	0000ab91 	.word	0x0000ab91

0000ac8c <readKSZreg>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: read an SPI register of the KSZ-Micrel Ethernet SWITCH
// Returns:     value of register of KSZ Ethernet SWITCH SPI read
// *****************************************************************************************************************************************************************
unsigned char readKSZreg(uint16_t reg)
{
    ac8c:	b570      	push	{r4, r5, r6, lr}
	/* Lower the nCS line for this SPI device */	
	gpio_set_pin_level(PB07_SPInCS_KSZ8974, 0);
	
	/* Setup the 3 control bytes to perform a register read operation */
	command_dataw[0] = 0x40 + REG_SPI_READ + (unsigned char)(reg >> 7);
    ac8e:	09c3      	lsrs	r3, r0, #7
    ac90:	4c08      	ldr	r4, [pc, #32]	; (acb4 <readKSZreg+0x28>)
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    ac92:	4d09      	ldr	r5, [pc, #36]	; (acb8 <readKSZreg+0x2c>)
    ac94:	2680      	movs	r6, #128	; 0x80
    ac96:	3360      	adds	r3, #96	; 0x60
    ac98:	f8c5 6094 	str.w	r6, [r5, #148]	; 0x94
    ac9c:	7123      	strb	r3, [r4, #4]
	command_dataw[1] = (unsigned char)(reg & 0x7F) << 1;
	command_dataw[2] = 0x00;
    ac9e:	2300      	movs	r3, #0
	command_dataw[1] = (unsigned char)(reg & 0x7F) << 1;
    aca0:	0040      	lsls	r0, r0, #1
	command_dataw[2] = 0x00;
    aca2:	71a3      	strb	r3, [r4, #6]
	
	/* Perform the actual 3-byte push/pull SPI operation */
	bash_spi_transfer(command_dataw, command_datar, 3);
    aca4:	4b05      	ldr	r3, [pc, #20]	; (acbc <readKSZreg+0x30>)
	command_dataw[1] = (unsigned char)(reg & 0x7F) << 1;
    aca6:	7160      	strb	r0, [r4, #5]
	bash_spi_transfer(command_dataw, command_datar, 3);
    aca8:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    acaa:	f8c5 6098 	str.w	r6, [r5, #152]	; 0x98
	/* Raise the nCS line for this SPI device */
	gpio_set_pin_level(PB07_SPInCS_KSZ8974, 1);
	
	/* Just return the actual far-end register data value */
	return (command_datar[2]);
}
    acae:	78a0      	ldrb	r0, [r4, #2]
    acb0:	bd70      	pop	{r4, r5, r6, pc}
    acb2:	bf00      	nop
    acb4:	200073f8 	.word	0x200073f8
    acb8:	41008000 	.word	0x41008000
    acbc:	0000ab91 	.word	0x0000ab91

0000acc0 <writeKSZreg>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: write to a SPI register of the KSZ-Micrel Ethernet SWITCH
// Returns:     nothing
// *****************************************************************************************************************************************************************
void writeKSZreg(uint16_t reg, unsigned char value)
{
    acc0:	b538      	push	{r3, r4, r5, lr}
	/* Lower the nCS line for this SPI device */
	gpio_set_pin_level(PB07_SPInCS_KSZ8974, 0);
	
	/* Setup the 3 control bytes to perform a register write operation */
	command_dataw[0] = 0x40 + REG_SPI_WRITE + (unsigned char)(reg >> 7);
    acc2:	09c2      	lsrs	r2, r0, #7
    acc4:	4b07      	ldr	r3, [pc, #28]	; (ace4 <writeKSZreg+0x24>)
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    acc6:	4c08      	ldr	r4, [pc, #32]	; (ace8 <writeKSZreg+0x28>)
    acc8:	2580      	movs	r5, #128	; 0x80
    acca:	3240      	adds	r2, #64	; 0x40
	command_dataw[1] = (unsigned char)(reg & 0x7F) << 1;
    accc:	0040      	lsls	r0, r0, #1
    acce:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
	command_dataw[0] = 0x40 + REG_SPI_WRITE + (unsigned char)(reg >> 7);
    acd2:	711a      	strb	r2, [r3, #4]
	command_dataw[1] = (unsigned char)(reg & 0x7F) << 1;
    acd4:	7158      	strb	r0, [r3, #5]
	command_dataw[2] = value;
    acd6:	7199      	strb	r1, [r3, #6]
	
	/* Perform the actual 3-byte push/pull SPI operation */
	bash_spi_transfer(command_dataw, command_datar, 3);
    acd8:	4b04      	ldr	r3, [pc, #16]	; (acec <writeKSZreg+0x2c>)
    acda:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    acdc:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
    ace0:	bd38      	pop	{r3, r4, r5, pc}
    ace2:	bf00      	nop
    ace4:	200073f8 	.word	0x200073f8
    ace8:	41008000 	.word	0x41008000
    acec:	0000ab91 	.word	0x0000ab91

0000acf0 <application_appcall>:
// Returns:     Nothing (NULL)
// *****************************************************************************************************************************************************************
void application_appcall(void)
{
	/* This is a stub function. It should not ever get called */
	xprintf("MultiSense application_appcall()\r\n");
    acf0:	4801      	ldr	r0, [pc, #4]	; (acf8 <application_appcall+0x8>)
    acf2:	4b02      	ldr	r3, [pc, #8]	; (acfc <application_appcall+0xc>)
    acf4:	4718      	bx	r3
    acf6:	bf00      	nop
    acf8:	0000e5f3 	.word	0x0000e5f3
    acfc:	00000395 	.word	0x00000395

0000ad00 <uip_log>:
// Returns:     Nothing (NULL)
// *****************************************************************************************************************************************************************
void uip_log(char *msg)
{
	/* Print out the messages from the uIP stack */
	xprintf("MultiSense uIP log --> [%s]\r\n", msg);
    ad00:	4601      	mov	r1, r0
    ad02:	4b01      	ldr	r3, [pc, #4]	; (ad08 <uip_log+0x8>)
    ad04:	4801      	ldr	r0, [pc, #4]	; (ad0c <uip_log+0xc>)
    ad06:	4718      	bx	r3
    ad08:	00000395 	.word	0x00000395
    ad0c:	0000e652 	.word	0x0000e652

0000ad10 <__libc_init_array>:
    ad10:	b570      	push	{r4, r5, r6, lr}
    ad12:	4e0d      	ldr	r6, [pc, #52]	; (ad48 <__libc_init_array+0x38>)
    ad14:	4c0d      	ldr	r4, [pc, #52]	; (ad4c <__libc_init_array+0x3c>)
    ad16:	1ba4      	subs	r4, r4, r6
    ad18:	10a4      	asrs	r4, r4, #2
    ad1a:	2500      	movs	r5, #0
    ad1c:	42a5      	cmp	r5, r4
    ad1e:	d109      	bne.n	ad34 <__libc_init_array+0x24>
    ad20:	4e0b      	ldr	r6, [pc, #44]	; (ad50 <__libc_init_array+0x40>)
    ad22:	4c0c      	ldr	r4, [pc, #48]	; (ad54 <__libc_init_array+0x44>)
    ad24:	f003 fd6e 	bl	e804 <_init>
    ad28:	1ba4      	subs	r4, r4, r6
    ad2a:	10a4      	asrs	r4, r4, #2
    ad2c:	2500      	movs	r5, #0
    ad2e:	42a5      	cmp	r5, r4
    ad30:	d105      	bne.n	ad3e <__libc_init_array+0x2e>
    ad32:	bd70      	pop	{r4, r5, r6, pc}
    ad34:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    ad38:	4798      	blx	r3
    ad3a:	3501      	adds	r5, #1
    ad3c:	e7ee      	b.n	ad1c <__libc_init_array+0xc>
    ad3e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    ad42:	4798      	blx	r3
    ad44:	3501      	adds	r5, #1
    ad46:	e7f2      	b.n	ad2e <__libc_init_array+0x1e>
    ad48:	0000e810 	.word	0x0000e810
    ad4c:	0000e810 	.word	0x0000e810
    ad50:	0000e810 	.word	0x0000e810
    ad54:	0000e814 	.word	0x0000e814

0000ad58 <memcmp>:
    ad58:	b510      	push	{r4, lr}
    ad5a:	3901      	subs	r1, #1
    ad5c:	4402      	add	r2, r0
    ad5e:	4290      	cmp	r0, r2
    ad60:	d101      	bne.n	ad66 <memcmp+0xe>
    ad62:	2000      	movs	r0, #0
    ad64:	bd10      	pop	{r4, pc}
    ad66:	f810 3b01 	ldrb.w	r3, [r0], #1
    ad6a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    ad6e:	42a3      	cmp	r3, r4
    ad70:	d0f5      	beq.n	ad5e <memcmp+0x6>
    ad72:	1b18      	subs	r0, r3, r4
    ad74:	bd10      	pop	{r4, pc}

0000ad76 <memcpy>:
    ad76:	b510      	push	{r4, lr}
    ad78:	1e43      	subs	r3, r0, #1
    ad7a:	440a      	add	r2, r1
    ad7c:	4291      	cmp	r1, r2
    ad7e:	d100      	bne.n	ad82 <memcpy+0xc>
    ad80:	bd10      	pop	{r4, pc}
    ad82:	f811 4b01 	ldrb.w	r4, [r1], #1
    ad86:	f803 4f01 	strb.w	r4, [r3, #1]!
    ad8a:	e7f7      	b.n	ad7c <memcpy+0x6>

0000ad8c <memmove>:
    ad8c:	4288      	cmp	r0, r1
    ad8e:	b510      	push	{r4, lr}
    ad90:	eb01 0302 	add.w	r3, r1, r2
    ad94:	d803      	bhi.n	ad9e <memmove+0x12>
    ad96:	1e42      	subs	r2, r0, #1
    ad98:	4299      	cmp	r1, r3
    ad9a:	d10c      	bne.n	adb6 <memmove+0x2a>
    ad9c:	bd10      	pop	{r4, pc}
    ad9e:	4298      	cmp	r0, r3
    ada0:	d2f9      	bcs.n	ad96 <memmove+0xa>
    ada2:	1881      	adds	r1, r0, r2
    ada4:	1ad2      	subs	r2, r2, r3
    ada6:	42d3      	cmn	r3, r2
    ada8:	d100      	bne.n	adac <memmove+0x20>
    adaa:	bd10      	pop	{r4, pc}
    adac:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    adb0:	f801 4d01 	strb.w	r4, [r1, #-1]!
    adb4:	e7f7      	b.n	ada6 <memmove+0x1a>
    adb6:	f811 4b01 	ldrb.w	r4, [r1], #1
    adba:	f802 4f01 	strb.w	r4, [r2, #1]!
    adbe:	e7eb      	b.n	ad98 <memmove+0xc>

0000adc0 <memset>:
    adc0:	4402      	add	r2, r0
    adc2:	4603      	mov	r3, r0
    adc4:	4293      	cmp	r3, r2
    adc6:	d100      	bne.n	adca <memset+0xa>
    adc8:	4770      	bx	lr
    adca:	f803 1b01 	strb.w	r1, [r3], #1
    adce:	e7f9      	b.n	adc4 <memset+0x4>

0000add0 <siscanf>:
    add0:	b40e      	push	{r1, r2, r3}
    add2:	b530      	push	{r4, r5, lr}
    add4:	b09c      	sub	sp, #112	; 0x70
    add6:	ac1f      	add	r4, sp, #124	; 0x7c
    add8:	f44f 7201 	mov.w	r2, #516	; 0x204
    addc:	f854 5b04 	ldr.w	r5, [r4], #4
    ade0:	f8ad 2014 	strh.w	r2, [sp, #20]
    ade4:	9002      	str	r0, [sp, #8]
    ade6:	9006      	str	r0, [sp, #24]
    ade8:	f000 f81e 	bl	ae28 <strlen>
    adec:	4b0b      	ldr	r3, [pc, #44]	; (ae1c <siscanf+0x4c>)
    adee:	9003      	str	r0, [sp, #12]
    adf0:	9007      	str	r0, [sp, #28]
    adf2:	930b      	str	r3, [sp, #44]	; 0x2c
    adf4:	480a      	ldr	r0, [pc, #40]	; (ae20 <siscanf+0x50>)
    adf6:	9401      	str	r4, [sp, #4]
    adf8:	2300      	movs	r3, #0
    adfa:	930f      	str	r3, [sp, #60]	; 0x3c
    adfc:	9314      	str	r3, [sp, #80]	; 0x50
    adfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ae02:	f8ad 3016 	strh.w	r3, [sp, #22]
    ae06:	462a      	mov	r2, r5
    ae08:	4623      	mov	r3, r4
    ae0a:	a902      	add	r1, sp, #8
    ae0c:	6800      	ldr	r0, [r0, #0]
    ae0e:	f000 f8e1 	bl	afd4 <__ssvfiscanf_r>
    ae12:	b01c      	add	sp, #112	; 0x70
    ae14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    ae18:	b003      	add	sp, #12
    ae1a:	4770      	bx	lr
    ae1c:	0000ae25 	.word	0x0000ae25
    ae20:	200000e0 	.word	0x200000e0

0000ae24 <__seofread>:
    ae24:	2000      	movs	r0, #0
    ae26:	4770      	bx	lr

0000ae28 <strlen>:
    ae28:	4603      	mov	r3, r0
    ae2a:	f813 2b01 	ldrb.w	r2, [r3], #1
    ae2e:	2a00      	cmp	r2, #0
    ae30:	d1fb      	bne.n	ae2a <strlen+0x2>
    ae32:	1a18      	subs	r0, r3, r0
    ae34:	3801      	subs	r0, #1
    ae36:	4770      	bx	lr

0000ae38 <strncpy>:
    ae38:	b570      	push	{r4, r5, r6, lr}
    ae3a:	4604      	mov	r4, r0
    ae3c:	b902      	cbnz	r2, ae40 <strncpy+0x8>
    ae3e:	bd70      	pop	{r4, r5, r6, pc}
    ae40:	4623      	mov	r3, r4
    ae42:	f811 5b01 	ldrb.w	r5, [r1], #1
    ae46:	f803 5b01 	strb.w	r5, [r3], #1
    ae4a:	1e56      	subs	r6, r2, #1
    ae4c:	b91d      	cbnz	r5, ae56 <strncpy+0x1e>
    ae4e:	4414      	add	r4, r2
    ae50:	42a3      	cmp	r3, r4
    ae52:	d103      	bne.n	ae5c <strncpy+0x24>
    ae54:	bd70      	pop	{r4, r5, r6, pc}
    ae56:	461c      	mov	r4, r3
    ae58:	4632      	mov	r2, r6
    ae5a:	e7ef      	b.n	ae3c <strncpy+0x4>
    ae5c:	f803 5b01 	strb.w	r5, [r3], #1
    ae60:	e7f6      	b.n	ae50 <strncpy+0x18>
	...

0000ae64 <_malloc_r>:
    ae64:	b570      	push	{r4, r5, r6, lr}
    ae66:	1ccd      	adds	r5, r1, #3
    ae68:	f025 0503 	bic.w	r5, r5, #3
    ae6c:	3508      	adds	r5, #8
    ae6e:	2d0c      	cmp	r5, #12
    ae70:	bf38      	it	cc
    ae72:	250c      	movcc	r5, #12
    ae74:	2d00      	cmp	r5, #0
    ae76:	4606      	mov	r6, r0
    ae78:	db01      	blt.n	ae7e <_malloc_r+0x1a>
    ae7a:	42a9      	cmp	r1, r5
    ae7c:	d903      	bls.n	ae86 <_malloc_r+0x22>
    ae7e:	230c      	movs	r3, #12
    ae80:	6033      	str	r3, [r6, #0]
    ae82:	2000      	movs	r0, #0
    ae84:	bd70      	pop	{r4, r5, r6, pc}
    ae86:	f000 fd63 	bl	b950 <__malloc_lock>
    ae8a:	4a23      	ldr	r2, [pc, #140]	; (af18 <_malloc_r+0xb4>)
    ae8c:	6814      	ldr	r4, [r2, #0]
    ae8e:	4621      	mov	r1, r4
    ae90:	b991      	cbnz	r1, aeb8 <_malloc_r+0x54>
    ae92:	4c22      	ldr	r4, [pc, #136]	; (af1c <_malloc_r+0xb8>)
    ae94:	6823      	ldr	r3, [r4, #0]
    ae96:	b91b      	cbnz	r3, aea0 <_malloc_r+0x3c>
    ae98:	4630      	mov	r0, r6
    ae9a:	f000 fb47 	bl	b52c <_sbrk_r>
    ae9e:	6020      	str	r0, [r4, #0]
    aea0:	4629      	mov	r1, r5
    aea2:	4630      	mov	r0, r6
    aea4:	f000 fb42 	bl	b52c <_sbrk_r>
    aea8:	1c43      	adds	r3, r0, #1
    aeaa:	d126      	bne.n	aefa <_malloc_r+0x96>
    aeac:	230c      	movs	r3, #12
    aeae:	6033      	str	r3, [r6, #0]
    aeb0:	4630      	mov	r0, r6
    aeb2:	f000 fd4e 	bl	b952 <__malloc_unlock>
    aeb6:	e7e4      	b.n	ae82 <_malloc_r+0x1e>
    aeb8:	680b      	ldr	r3, [r1, #0]
    aeba:	1b5b      	subs	r3, r3, r5
    aebc:	d41a      	bmi.n	aef4 <_malloc_r+0x90>
    aebe:	2b0b      	cmp	r3, #11
    aec0:	d90f      	bls.n	aee2 <_malloc_r+0x7e>
    aec2:	600b      	str	r3, [r1, #0]
    aec4:	50cd      	str	r5, [r1, r3]
    aec6:	18cc      	adds	r4, r1, r3
    aec8:	4630      	mov	r0, r6
    aeca:	f000 fd42 	bl	b952 <__malloc_unlock>
    aece:	f104 000b 	add.w	r0, r4, #11
    aed2:	1d23      	adds	r3, r4, #4
    aed4:	f020 0007 	bic.w	r0, r0, #7
    aed8:	1ac3      	subs	r3, r0, r3
    aeda:	d01b      	beq.n	af14 <_malloc_r+0xb0>
    aedc:	425a      	negs	r2, r3
    aede:	50e2      	str	r2, [r4, r3]
    aee0:	bd70      	pop	{r4, r5, r6, pc}
    aee2:	428c      	cmp	r4, r1
    aee4:	bf0d      	iteet	eq
    aee6:	6863      	ldreq	r3, [r4, #4]
    aee8:	684b      	ldrne	r3, [r1, #4]
    aeea:	6063      	strne	r3, [r4, #4]
    aeec:	6013      	streq	r3, [r2, #0]
    aeee:	bf18      	it	ne
    aef0:	460c      	movne	r4, r1
    aef2:	e7e9      	b.n	aec8 <_malloc_r+0x64>
    aef4:	460c      	mov	r4, r1
    aef6:	6849      	ldr	r1, [r1, #4]
    aef8:	e7ca      	b.n	ae90 <_malloc_r+0x2c>
    aefa:	1cc4      	adds	r4, r0, #3
    aefc:	f024 0403 	bic.w	r4, r4, #3
    af00:	42a0      	cmp	r0, r4
    af02:	d005      	beq.n	af10 <_malloc_r+0xac>
    af04:	1a21      	subs	r1, r4, r0
    af06:	4630      	mov	r0, r6
    af08:	f000 fb10 	bl	b52c <_sbrk_r>
    af0c:	3001      	adds	r0, #1
    af0e:	d0cd      	beq.n	aeac <_malloc_r+0x48>
    af10:	6025      	str	r5, [r4, #0]
    af12:	e7d9      	b.n	aec8 <_malloc_r+0x64>
    af14:	bd70      	pop	{r4, r5, r6, pc}
    af16:	bf00      	nop
    af18:	20007400 	.word	0x20007400
    af1c:	20007404 	.word	0x20007404

0000af20 <_sungetc_r>:
    af20:	b538      	push	{r3, r4, r5, lr}
    af22:	1c4b      	adds	r3, r1, #1
    af24:	4614      	mov	r4, r2
    af26:	d103      	bne.n	af30 <_sungetc_r+0x10>
    af28:	f04f 35ff 	mov.w	r5, #4294967295
    af2c:	4628      	mov	r0, r5
    af2e:	bd38      	pop	{r3, r4, r5, pc}
    af30:	8993      	ldrh	r3, [r2, #12]
    af32:	f023 0320 	bic.w	r3, r3, #32
    af36:	8193      	strh	r3, [r2, #12]
    af38:	6b53      	ldr	r3, [r2, #52]	; 0x34
    af3a:	6852      	ldr	r2, [r2, #4]
    af3c:	b2cd      	uxtb	r5, r1
    af3e:	b18b      	cbz	r3, af64 <_sungetc_r+0x44>
    af40:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    af42:	429a      	cmp	r2, r3
    af44:	da08      	bge.n	af58 <_sungetc_r+0x38>
    af46:	6823      	ldr	r3, [r4, #0]
    af48:	1e5a      	subs	r2, r3, #1
    af4a:	6022      	str	r2, [r4, #0]
    af4c:	f803 5c01 	strb.w	r5, [r3, #-1]
    af50:	6863      	ldr	r3, [r4, #4]
    af52:	3301      	adds	r3, #1
    af54:	6063      	str	r3, [r4, #4]
    af56:	e7e9      	b.n	af2c <_sungetc_r+0xc>
    af58:	4621      	mov	r1, r4
    af5a:	f000 fc49 	bl	b7f0 <__submore>
    af5e:	2800      	cmp	r0, #0
    af60:	d0f1      	beq.n	af46 <_sungetc_r+0x26>
    af62:	e7e1      	b.n	af28 <_sungetc_r+0x8>
    af64:	6921      	ldr	r1, [r4, #16]
    af66:	6823      	ldr	r3, [r4, #0]
    af68:	b151      	cbz	r1, af80 <_sungetc_r+0x60>
    af6a:	4299      	cmp	r1, r3
    af6c:	d208      	bcs.n	af80 <_sungetc_r+0x60>
    af6e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    af72:	428d      	cmp	r5, r1
    af74:	d104      	bne.n	af80 <_sungetc_r+0x60>
    af76:	3b01      	subs	r3, #1
    af78:	3201      	adds	r2, #1
    af7a:	6023      	str	r3, [r4, #0]
    af7c:	6062      	str	r2, [r4, #4]
    af7e:	e7d5      	b.n	af2c <_sungetc_r+0xc>
    af80:	63e3      	str	r3, [r4, #60]	; 0x3c
    af82:	f104 0344 	add.w	r3, r4, #68	; 0x44
    af86:	6363      	str	r3, [r4, #52]	; 0x34
    af88:	2303      	movs	r3, #3
    af8a:	63a3      	str	r3, [r4, #56]	; 0x38
    af8c:	4623      	mov	r3, r4
    af8e:	6422      	str	r2, [r4, #64]	; 0x40
    af90:	f803 5f46 	strb.w	r5, [r3, #70]!
    af94:	6023      	str	r3, [r4, #0]
    af96:	2301      	movs	r3, #1
    af98:	e7dc      	b.n	af54 <_sungetc_r+0x34>

0000af9a <__ssrefill_r>:
    af9a:	b510      	push	{r4, lr}
    af9c:	460c      	mov	r4, r1
    af9e:	6b49      	ldr	r1, [r1, #52]	; 0x34
    afa0:	b169      	cbz	r1, afbe <__ssrefill_r+0x24>
    afa2:	f104 0344 	add.w	r3, r4, #68	; 0x44
    afa6:	4299      	cmp	r1, r3
    afa8:	d001      	beq.n	afae <__ssrefill_r+0x14>
    afaa:	f000 fcd3 	bl	b954 <_free_r>
    afae:	6c23      	ldr	r3, [r4, #64]	; 0x40
    afb0:	6063      	str	r3, [r4, #4]
    afb2:	2000      	movs	r0, #0
    afb4:	6360      	str	r0, [r4, #52]	; 0x34
    afb6:	b113      	cbz	r3, afbe <__ssrefill_r+0x24>
    afb8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    afba:	6023      	str	r3, [r4, #0]
    afbc:	bd10      	pop	{r4, pc}
    afbe:	6923      	ldr	r3, [r4, #16]
    afc0:	6023      	str	r3, [r4, #0]
    afc2:	2300      	movs	r3, #0
    afc4:	6063      	str	r3, [r4, #4]
    afc6:	89a3      	ldrh	r3, [r4, #12]
    afc8:	f043 0320 	orr.w	r3, r3, #32
    afcc:	81a3      	strh	r3, [r4, #12]
    afce:	f04f 30ff 	mov.w	r0, #4294967295
    afd2:	bd10      	pop	{r4, pc}

0000afd4 <__ssvfiscanf_r>:
    afd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    afd8:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
    afdc:	f10d 080c 	add.w	r8, sp, #12
    afe0:	9301      	str	r3, [sp, #4]
    afe2:	2300      	movs	r3, #0
    afe4:	9346      	str	r3, [sp, #280]	; 0x118
    afe6:	9347      	str	r3, [sp, #284]	; 0x11c
    afe8:	4ba0      	ldr	r3, [pc, #640]	; (b26c <__ssvfiscanf_r+0x298>)
    afea:	93a2      	str	r3, [sp, #648]	; 0x288
    afec:	f8df 9284 	ldr.w	r9, [pc, #644]	; b274 <__ssvfiscanf_r+0x2a0>
    aff0:	4b9f      	ldr	r3, [pc, #636]	; (b270 <__ssvfiscanf_r+0x29c>)
    aff2:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
    aff6:	4606      	mov	r6, r0
    aff8:	460c      	mov	r4, r1
    affa:	93a3      	str	r3, [sp, #652]	; 0x28c
    affc:	4692      	mov	sl, r2
    affe:	270a      	movs	r7, #10
    b000:	f89a 3000 	ldrb.w	r3, [sl]
    b004:	2b00      	cmp	r3, #0
    b006:	f000 812f 	beq.w	b268 <__ssvfiscanf_r+0x294>
    b00a:	f000 fc2f 	bl	b86c <__locale_ctype_ptr>
    b00e:	f89a b000 	ldrb.w	fp, [sl]
    b012:	4458      	add	r0, fp
    b014:	7843      	ldrb	r3, [r0, #1]
    b016:	f013 0308 	ands.w	r3, r3, #8
    b01a:	d143      	bne.n	b0a4 <__ssvfiscanf_r+0xd0>
    b01c:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
    b020:	f10a 0501 	add.w	r5, sl, #1
    b024:	f040 8099 	bne.w	b15a <__ssvfiscanf_r+0x186>
    b028:	9345      	str	r3, [sp, #276]	; 0x114
    b02a:	9343      	str	r3, [sp, #268]	; 0x10c
    b02c:	f89a 3001 	ldrb.w	r3, [sl, #1]
    b030:	2b2a      	cmp	r3, #42	; 0x2a
    b032:	d103      	bne.n	b03c <__ssvfiscanf_r+0x68>
    b034:	2310      	movs	r3, #16
    b036:	9343      	str	r3, [sp, #268]	; 0x10c
    b038:	f10a 0502 	add.w	r5, sl, #2
    b03c:	7829      	ldrb	r1, [r5, #0]
    b03e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
    b042:	2a09      	cmp	r2, #9
    b044:	46aa      	mov	sl, r5
    b046:	f105 0501 	add.w	r5, r5, #1
    b04a:	d941      	bls.n	b0d0 <__ssvfiscanf_r+0xfc>
    b04c:	2203      	movs	r2, #3
    b04e:	4889      	ldr	r0, [pc, #548]	; (b274 <__ssvfiscanf_r+0x2a0>)
    b050:	f000 fc2e 	bl	b8b0 <memchr>
    b054:	b138      	cbz	r0, b066 <__ssvfiscanf_r+0x92>
    b056:	eba0 0309 	sub.w	r3, r0, r9
    b05a:	2001      	movs	r0, #1
    b05c:	4098      	lsls	r0, r3
    b05e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    b060:	4318      	orrs	r0, r3
    b062:	9043      	str	r0, [sp, #268]	; 0x10c
    b064:	46aa      	mov	sl, r5
    b066:	f89a 3000 	ldrb.w	r3, [sl]
    b06a:	2b67      	cmp	r3, #103	; 0x67
    b06c:	f10a 0501 	add.w	r5, sl, #1
    b070:	d84a      	bhi.n	b108 <__ssvfiscanf_r+0x134>
    b072:	2b65      	cmp	r3, #101	; 0x65
    b074:	f080 80b7 	bcs.w	b1e6 <__ssvfiscanf_r+0x212>
    b078:	2b47      	cmp	r3, #71	; 0x47
    b07a:	d82f      	bhi.n	b0dc <__ssvfiscanf_r+0x108>
    b07c:	2b45      	cmp	r3, #69	; 0x45
    b07e:	f080 80b2 	bcs.w	b1e6 <__ssvfiscanf_r+0x212>
    b082:	2b00      	cmp	r3, #0
    b084:	f000 8082 	beq.w	b18c <__ssvfiscanf_r+0x1b8>
    b088:	2b25      	cmp	r3, #37	; 0x25
    b08a:	d066      	beq.n	b15a <__ssvfiscanf_r+0x186>
    b08c:	2303      	movs	r3, #3
    b08e:	9349      	str	r3, [sp, #292]	; 0x124
    b090:	9744      	str	r7, [sp, #272]	; 0x110
    b092:	e045      	b.n	b120 <__ssvfiscanf_r+0x14c>
    b094:	9947      	ldr	r1, [sp, #284]	; 0x11c
    b096:	3101      	adds	r1, #1
    b098:	9147      	str	r1, [sp, #284]	; 0x11c
    b09a:	6861      	ldr	r1, [r4, #4]
    b09c:	3301      	adds	r3, #1
    b09e:	3901      	subs	r1, #1
    b0a0:	6061      	str	r1, [r4, #4]
    b0a2:	6023      	str	r3, [r4, #0]
    b0a4:	6863      	ldr	r3, [r4, #4]
    b0a6:	2b00      	cmp	r3, #0
    b0a8:	dd0b      	ble.n	b0c2 <__ssvfiscanf_r+0xee>
    b0aa:	f000 fbdf 	bl	b86c <__locale_ctype_ptr>
    b0ae:	6823      	ldr	r3, [r4, #0]
    b0b0:	7819      	ldrb	r1, [r3, #0]
    b0b2:	4408      	add	r0, r1
    b0b4:	7841      	ldrb	r1, [r0, #1]
    b0b6:	070d      	lsls	r5, r1, #28
    b0b8:	d4ec      	bmi.n	b094 <__ssvfiscanf_r+0xc0>
    b0ba:	f10a 0501 	add.w	r5, sl, #1
    b0be:	46aa      	mov	sl, r5
    b0c0:	e79e      	b.n	b000 <__ssvfiscanf_r+0x2c>
    b0c2:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    b0c4:	4621      	mov	r1, r4
    b0c6:	4630      	mov	r0, r6
    b0c8:	4798      	blx	r3
    b0ca:	2800      	cmp	r0, #0
    b0cc:	d0ed      	beq.n	b0aa <__ssvfiscanf_r+0xd6>
    b0ce:	e7f4      	b.n	b0ba <__ssvfiscanf_r+0xe6>
    b0d0:	9b45      	ldr	r3, [sp, #276]	; 0x114
    b0d2:	fb07 1303 	mla	r3, r7, r3, r1
    b0d6:	3b30      	subs	r3, #48	; 0x30
    b0d8:	9345      	str	r3, [sp, #276]	; 0x114
    b0da:	e7af      	b.n	b03c <__ssvfiscanf_r+0x68>
    b0dc:	2b5b      	cmp	r3, #91	; 0x5b
    b0de:	d061      	beq.n	b1a4 <__ssvfiscanf_r+0x1d0>
    b0e0:	d80c      	bhi.n	b0fc <__ssvfiscanf_r+0x128>
    b0e2:	2b58      	cmp	r3, #88	; 0x58
    b0e4:	d1d2      	bne.n	b08c <__ssvfiscanf_r+0xb8>
    b0e6:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    b0e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    b0ec:	9243      	str	r2, [sp, #268]	; 0x10c
    b0ee:	2210      	movs	r2, #16
    b0f0:	9244      	str	r2, [sp, #272]	; 0x110
    b0f2:	2b6f      	cmp	r3, #111	; 0x6f
    b0f4:	bfb4      	ite	lt
    b0f6:	2303      	movlt	r3, #3
    b0f8:	2304      	movge	r3, #4
    b0fa:	e010      	b.n	b11e <__ssvfiscanf_r+0x14a>
    b0fc:	2b63      	cmp	r3, #99	; 0x63
    b0fe:	d05c      	beq.n	b1ba <__ssvfiscanf_r+0x1e6>
    b100:	2b64      	cmp	r3, #100	; 0x64
    b102:	d1c3      	bne.n	b08c <__ssvfiscanf_r+0xb8>
    b104:	9744      	str	r7, [sp, #272]	; 0x110
    b106:	e7f4      	b.n	b0f2 <__ssvfiscanf_r+0x11e>
    b108:	2b70      	cmp	r3, #112	; 0x70
    b10a:	d042      	beq.n	b192 <__ssvfiscanf_r+0x1be>
    b10c:	d81d      	bhi.n	b14a <__ssvfiscanf_r+0x176>
    b10e:	2b6e      	cmp	r3, #110	; 0x6e
    b110:	d059      	beq.n	b1c6 <__ssvfiscanf_r+0x1f2>
    b112:	d843      	bhi.n	b19c <__ssvfiscanf_r+0x1c8>
    b114:	2b69      	cmp	r3, #105	; 0x69
    b116:	d1b9      	bne.n	b08c <__ssvfiscanf_r+0xb8>
    b118:	2300      	movs	r3, #0
    b11a:	9344      	str	r3, [sp, #272]	; 0x110
    b11c:	2303      	movs	r3, #3
    b11e:	9349      	str	r3, [sp, #292]	; 0x124
    b120:	6863      	ldr	r3, [r4, #4]
    b122:	2b00      	cmp	r3, #0
    b124:	dd61      	ble.n	b1ea <__ssvfiscanf_r+0x216>
    b126:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    b128:	0659      	lsls	r1, r3, #25
    b12a:	d56f      	bpl.n	b20c <__ssvfiscanf_r+0x238>
    b12c:	9b49      	ldr	r3, [sp, #292]	; 0x124
    b12e:	2b02      	cmp	r3, #2
    b130:	dc7c      	bgt.n	b22c <__ssvfiscanf_r+0x258>
    b132:	ab01      	add	r3, sp, #4
    b134:	4622      	mov	r2, r4
    b136:	a943      	add	r1, sp, #268	; 0x10c
    b138:	4630      	mov	r0, r6
    b13a:	f000 f89f 	bl	b27c <_scanf_chars>
    b13e:	2801      	cmp	r0, #1
    b140:	f000 8092 	beq.w	b268 <__ssvfiscanf_r+0x294>
    b144:	2802      	cmp	r0, #2
    b146:	d1ba      	bne.n	b0be <__ssvfiscanf_r+0xea>
    b148:	e01d      	b.n	b186 <__ssvfiscanf_r+0x1b2>
    b14a:	2b75      	cmp	r3, #117	; 0x75
    b14c:	d0da      	beq.n	b104 <__ssvfiscanf_r+0x130>
    b14e:	2b78      	cmp	r3, #120	; 0x78
    b150:	d0c9      	beq.n	b0e6 <__ssvfiscanf_r+0x112>
    b152:	2b73      	cmp	r3, #115	; 0x73
    b154:	d19a      	bne.n	b08c <__ssvfiscanf_r+0xb8>
    b156:	2302      	movs	r3, #2
    b158:	e7e1      	b.n	b11e <__ssvfiscanf_r+0x14a>
    b15a:	6863      	ldr	r3, [r4, #4]
    b15c:	2b00      	cmp	r3, #0
    b15e:	dd0c      	ble.n	b17a <__ssvfiscanf_r+0x1a6>
    b160:	6823      	ldr	r3, [r4, #0]
    b162:	781a      	ldrb	r2, [r3, #0]
    b164:	4593      	cmp	fp, r2
    b166:	d17f      	bne.n	b268 <__ssvfiscanf_r+0x294>
    b168:	3301      	adds	r3, #1
    b16a:	6862      	ldr	r2, [r4, #4]
    b16c:	6023      	str	r3, [r4, #0]
    b16e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    b170:	3a01      	subs	r2, #1
    b172:	3301      	adds	r3, #1
    b174:	6062      	str	r2, [r4, #4]
    b176:	9347      	str	r3, [sp, #284]	; 0x11c
    b178:	e7a1      	b.n	b0be <__ssvfiscanf_r+0xea>
    b17a:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    b17c:	4621      	mov	r1, r4
    b17e:	4630      	mov	r0, r6
    b180:	4798      	blx	r3
    b182:	2800      	cmp	r0, #0
    b184:	d0ec      	beq.n	b160 <__ssvfiscanf_r+0x18c>
    b186:	9846      	ldr	r0, [sp, #280]	; 0x118
    b188:	2800      	cmp	r0, #0
    b18a:	d163      	bne.n	b254 <__ssvfiscanf_r+0x280>
    b18c:	f04f 30ff 	mov.w	r0, #4294967295
    b190:	e066      	b.n	b260 <__ssvfiscanf_r+0x28c>
    b192:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    b194:	f042 0220 	orr.w	r2, r2, #32
    b198:	9243      	str	r2, [sp, #268]	; 0x10c
    b19a:	e7a4      	b.n	b0e6 <__ssvfiscanf_r+0x112>
    b19c:	2308      	movs	r3, #8
    b19e:	9344      	str	r3, [sp, #272]	; 0x110
    b1a0:	2304      	movs	r3, #4
    b1a2:	e7bc      	b.n	b11e <__ssvfiscanf_r+0x14a>
    b1a4:	4629      	mov	r1, r5
    b1a6:	4640      	mov	r0, r8
    b1a8:	f000 f9d0 	bl	b54c <__sccl>
    b1ac:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    b1ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b1b2:	9343      	str	r3, [sp, #268]	; 0x10c
    b1b4:	4605      	mov	r5, r0
    b1b6:	2301      	movs	r3, #1
    b1b8:	e7b1      	b.n	b11e <__ssvfiscanf_r+0x14a>
    b1ba:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    b1bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b1c0:	9343      	str	r3, [sp, #268]	; 0x10c
    b1c2:	2300      	movs	r3, #0
    b1c4:	e7ab      	b.n	b11e <__ssvfiscanf_r+0x14a>
    b1c6:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    b1c8:	06d0      	lsls	r0, r2, #27
    b1ca:	f53f af78 	bmi.w	b0be <__ssvfiscanf_r+0xea>
    b1ce:	f012 0f01 	tst.w	r2, #1
    b1d2:	9a01      	ldr	r2, [sp, #4]
    b1d4:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    b1d6:	f102 0104 	add.w	r1, r2, #4
    b1da:	9101      	str	r1, [sp, #4]
    b1dc:	6812      	ldr	r2, [r2, #0]
    b1de:	bf14      	ite	ne
    b1e0:	8013      	strhne	r3, [r2, #0]
    b1e2:	6013      	streq	r3, [r2, #0]
    b1e4:	e76b      	b.n	b0be <__ssvfiscanf_r+0xea>
    b1e6:	2305      	movs	r3, #5
    b1e8:	e799      	b.n	b11e <__ssvfiscanf_r+0x14a>
    b1ea:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    b1ec:	4621      	mov	r1, r4
    b1ee:	4630      	mov	r0, r6
    b1f0:	4798      	blx	r3
    b1f2:	2800      	cmp	r0, #0
    b1f4:	d097      	beq.n	b126 <__ssvfiscanf_r+0x152>
    b1f6:	e7c6      	b.n	b186 <__ssvfiscanf_r+0x1b2>
    b1f8:	9a47      	ldr	r2, [sp, #284]	; 0x11c
    b1fa:	3201      	adds	r2, #1
    b1fc:	9247      	str	r2, [sp, #284]	; 0x11c
    b1fe:	6862      	ldr	r2, [r4, #4]
    b200:	3a01      	subs	r2, #1
    b202:	2a00      	cmp	r2, #0
    b204:	6062      	str	r2, [r4, #4]
    b206:	dd0a      	ble.n	b21e <__ssvfiscanf_r+0x24a>
    b208:	3301      	adds	r3, #1
    b20a:	6023      	str	r3, [r4, #0]
    b20c:	f000 fb2e 	bl	b86c <__locale_ctype_ptr>
    b210:	6823      	ldr	r3, [r4, #0]
    b212:	781a      	ldrb	r2, [r3, #0]
    b214:	4410      	add	r0, r2
    b216:	7842      	ldrb	r2, [r0, #1]
    b218:	0712      	lsls	r2, r2, #28
    b21a:	d4ed      	bmi.n	b1f8 <__ssvfiscanf_r+0x224>
    b21c:	e786      	b.n	b12c <__ssvfiscanf_r+0x158>
    b21e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    b220:	4621      	mov	r1, r4
    b222:	4630      	mov	r0, r6
    b224:	4798      	blx	r3
    b226:	2800      	cmp	r0, #0
    b228:	d0f0      	beq.n	b20c <__ssvfiscanf_r+0x238>
    b22a:	e7ac      	b.n	b186 <__ssvfiscanf_r+0x1b2>
    b22c:	2b04      	cmp	r3, #4
    b22e:	dc06      	bgt.n	b23e <__ssvfiscanf_r+0x26a>
    b230:	ab01      	add	r3, sp, #4
    b232:	4622      	mov	r2, r4
    b234:	a943      	add	r1, sp, #268	; 0x10c
    b236:	4630      	mov	r0, r6
    b238:	f000 f884 	bl	b344 <_scanf_i>
    b23c:	e77f      	b.n	b13e <__ssvfiscanf_r+0x16a>
    b23e:	4b0e      	ldr	r3, [pc, #56]	; (b278 <__ssvfiscanf_r+0x2a4>)
    b240:	2b00      	cmp	r3, #0
    b242:	f43f af3c 	beq.w	b0be <__ssvfiscanf_r+0xea>
    b246:	ab01      	add	r3, sp, #4
    b248:	4622      	mov	r2, r4
    b24a:	a943      	add	r1, sp, #268	; 0x10c
    b24c:	4630      	mov	r0, r6
    b24e:	f3af 8000 	nop.w
    b252:	e774      	b.n	b13e <__ssvfiscanf_r+0x16a>
    b254:	89a3      	ldrh	r3, [r4, #12]
    b256:	f013 0f40 	tst.w	r3, #64	; 0x40
    b25a:	bf18      	it	ne
    b25c:	f04f 30ff 	movne.w	r0, #4294967295
    b260:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
    b264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b268:	9846      	ldr	r0, [sp, #280]	; 0x118
    b26a:	e7f9      	b.n	b260 <__ssvfiscanf_r+0x28c>
    b26c:	0000af21 	.word	0x0000af21
    b270:	0000af9b 	.word	0x0000af9b
    b274:	0000e6d0 	.word	0x0000e6d0
    b278:	00000000 	.word	0x00000000

0000b27c <_scanf_chars>:
    b27c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b280:	4615      	mov	r5, r2
    b282:	688a      	ldr	r2, [r1, #8]
    b284:	4680      	mov	r8, r0
    b286:	460c      	mov	r4, r1
    b288:	b932      	cbnz	r2, b298 <_scanf_chars+0x1c>
    b28a:	698a      	ldr	r2, [r1, #24]
    b28c:	2a00      	cmp	r2, #0
    b28e:	bf0c      	ite	eq
    b290:	2201      	moveq	r2, #1
    b292:	f04f 32ff 	movne.w	r2, #4294967295
    b296:	608a      	str	r2, [r1, #8]
    b298:	6822      	ldr	r2, [r4, #0]
    b29a:	06d1      	lsls	r1, r2, #27
    b29c:	bf5f      	itttt	pl
    b29e:	681a      	ldrpl	r2, [r3, #0]
    b2a0:	1d11      	addpl	r1, r2, #4
    b2a2:	6019      	strpl	r1, [r3, #0]
    b2a4:	6817      	ldrpl	r7, [r2, #0]
    b2a6:	2600      	movs	r6, #0
    b2a8:	69a3      	ldr	r3, [r4, #24]
    b2aa:	b1db      	cbz	r3, b2e4 <_scanf_chars+0x68>
    b2ac:	2b01      	cmp	r3, #1
    b2ae:	d107      	bne.n	b2c0 <_scanf_chars+0x44>
    b2b0:	682b      	ldr	r3, [r5, #0]
    b2b2:	6962      	ldr	r2, [r4, #20]
    b2b4:	781b      	ldrb	r3, [r3, #0]
    b2b6:	5cd3      	ldrb	r3, [r2, r3]
    b2b8:	b9a3      	cbnz	r3, b2e4 <_scanf_chars+0x68>
    b2ba:	2e00      	cmp	r6, #0
    b2bc:	d132      	bne.n	b324 <_scanf_chars+0xa8>
    b2be:	e006      	b.n	b2ce <_scanf_chars+0x52>
    b2c0:	2b02      	cmp	r3, #2
    b2c2:	d007      	beq.n	b2d4 <_scanf_chars+0x58>
    b2c4:	2e00      	cmp	r6, #0
    b2c6:	d12d      	bne.n	b324 <_scanf_chars+0xa8>
    b2c8:	69a3      	ldr	r3, [r4, #24]
    b2ca:	2b01      	cmp	r3, #1
    b2cc:	d12a      	bne.n	b324 <_scanf_chars+0xa8>
    b2ce:	2001      	movs	r0, #1
    b2d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b2d4:	f000 faca 	bl	b86c <__locale_ctype_ptr>
    b2d8:	682b      	ldr	r3, [r5, #0]
    b2da:	781b      	ldrb	r3, [r3, #0]
    b2dc:	4418      	add	r0, r3
    b2de:	7843      	ldrb	r3, [r0, #1]
    b2e0:	071b      	lsls	r3, r3, #28
    b2e2:	d4ef      	bmi.n	b2c4 <_scanf_chars+0x48>
    b2e4:	6823      	ldr	r3, [r4, #0]
    b2e6:	06da      	lsls	r2, r3, #27
    b2e8:	bf5e      	ittt	pl
    b2ea:	682b      	ldrpl	r3, [r5, #0]
    b2ec:	781b      	ldrbpl	r3, [r3, #0]
    b2ee:	703b      	strbpl	r3, [r7, #0]
    b2f0:	682a      	ldr	r2, [r5, #0]
    b2f2:	686b      	ldr	r3, [r5, #4]
    b2f4:	f102 0201 	add.w	r2, r2, #1
    b2f8:	602a      	str	r2, [r5, #0]
    b2fa:	68a2      	ldr	r2, [r4, #8]
    b2fc:	f103 33ff 	add.w	r3, r3, #4294967295
    b300:	f102 32ff 	add.w	r2, r2, #4294967295
    b304:	606b      	str	r3, [r5, #4]
    b306:	f106 0601 	add.w	r6, r6, #1
    b30a:	bf58      	it	pl
    b30c:	3701      	addpl	r7, #1
    b30e:	60a2      	str	r2, [r4, #8]
    b310:	b142      	cbz	r2, b324 <_scanf_chars+0xa8>
    b312:	2b00      	cmp	r3, #0
    b314:	dcc8      	bgt.n	b2a8 <_scanf_chars+0x2c>
    b316:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    b31a:	4629      	mov	r1, r5
    b31c:	4640      	mov	r0, r8
    b31e:	4798      	blx	r3
    b320:	2800      	cmp	r0, #0
    b322:	d0c1      	beq.n	b2a8 <_scanf_chars+0x2c>
    b324:	6823      	ldr	r3, [r4, #0]
    b326:	f013 0310 	ands.w	r3, r3, #16
    b32a:	d105      	bne.n	b338 <_scanf_chars+0xbc>
    b32c:	68e2      	ldr	r2, [r4, #12]
    b32e:	3201      	adds	r2, #1
    b330:	60e2      	str	r2, [r4, #12]
    b332:	69a2      	ldr	r2, [r4, #24]
    b334:	b102      	cbz	r2, b338 <_scanf_chars+0xbc>
    b336:	703b      	strb	r3, [r7, #0]
    b338:	6923      	ldr	r3, [r4, #16]
    b33a:	441e      	add	r6, r3
    b33c:	6126      	str	r6, [r4, #16]
    b33e:	2000      	movs	r0, #0
    b340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000b344 <_scanf_i>:
    b344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b348:	469a      	mov	sl, r3
    b34a:	4b74      	ldr	r3, [pc, #464]	; (b51c <_scanf_i+0x1d8>)
    b34c:	460c      	mov	r4, r1
    b34e:	4683      	mov	fp, r0
    b350:	4616      	mov	r6, r2
    b352:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    b356:	b087      	sub	sp, #28
    b358:	ab03      	add	r3, sp, #12
    b35a:	68a7      	ldr	r7, [r4, #8]
    b35c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    b360:	4b6f      	ldr	r3, [pc, #444]	; (b520 <_scanf_i+0x1dc>)
    b362:	69a1      	ldr	r1, [r4, #24]
    b364:	4a6f      	ldr	r2, [pc, #444]	; (b524 <_scanf_i+0x1e0>)
    b366:	2903      	cmp	r1, #3
    b368:	bf18      	it	ne
    b36a:	461a      	movne	r2, r3
    b36c:	1e7b      	subs	r3, r7, #1
    b36e:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
    b372:	bf84      	itt	hi
    b374:	f240 135d 	movwhi	r3, #349	; 0x15d
    b378:	60a3      	strhi	r3, [r4, #8]
    b37a:	6823      	ldr	r3, [r4, #0]
    b37c:	9200      	str	r2, [sp, #0]
    b37e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
    b382:	bf88      	it	hi
    b384:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
    b388:	f104 091c 	add.w	r9, r4, #28
    b38c:	6023      	str	r3, [r4, #0]
    b38e:	bf8c      	ite	hi
    b390:	197f      	addhi	r7, r7, r5
    b392:	2700      	movls	r7, #0
    b394:	464b      	mov	r3, r9
    b396:	f04f 0800 	mov.w	r8, #0
    b39a:	9301      	str	r3, [sp, #4]
    b39c:	6831      	ldr	r1, [r6, #0]
    b39e:	ab03      	add	r3, sp, #12
    b3a0:	2202      	movs	r2, #2
    b3a2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
    b3a6:	7809      	ldrb	r1, [r1, #0]
    b3a8:	f000 fa82 	bl	b8b0 <memchr>
    b3ac:	9b01      	ldr	r3, [sp, #4]
    b3ae:	b328      	cbz	r0, b3fc <_scanf_i+0xb8>
    b3b0:	f1b8 0f01 	cmp.w	r8, #1
    b3b4:	d156      	bne.n	b464 <_scanf_i+0x120>
    b3b6:	6862      	ldr	r2, [r4, #4]
    b3b8:	b92a      	cbnz	r2, b3c6 <_scanf_i+0x82>
    b3ba:	2208      	movs	r2, #8
    b3bc:	6062      	str	r2, [r4, #4]
    b3be:	6822      	ldr	r2, [r4, #0]
    b3c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    b3c4:	6022      	str	r2, [r4, #0]
    b3c6:	6822      	ldr	r2, [r4, #0]
    b3c8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
    b3cc:	6022      	str	r2, [r4, #0]
    b3ce:	68a2      	ldr	r2, [r4, #8]
    b3d0:	1e51      	subs	r1, r2, #1
    b3d2:	60a1      	str	r1, [r4, #8]
    b3d4:	b192      	cbz	r2, b3fc <_scanf_i+0xb8>
    b3d6:	6832      	ldr	r2, [r6, #0]
    b3d8:	1c51      	adds	r1, r2, #1
    b3da:	6031      	str	r1, [r6, #0]
    b3dc:	7812      	ldrb	r2, [r2, #0]
    b3de:	701a      	strb	r2, [r3, #0]
    b3e0:	1c5d      	adds	r5, r3, #1
    b3e2:	6873      	ldr	r3, [r6, #4]
    b3e4:	3b01      	subs	r3, #1
    b3e6:	2b00      	cmp	r3, #0
    b3e8:	6073      	str	r3, [r6, #4]
    b3ea:	dc06      	bgt.n	b3fa <_scanf_i+0xb6>
    b3ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    b3f0:	4631      	mov	r1, r6
    b3f2:	4658      	mov	r0, fp
    b3f4:	4798      	blx	r3
    b3f6:	2800      	cmp	r0, #0
    b3f8:	d176      	bne.n	b4e8 <_scanf_i+0x1a4>
    b3fa:	462b      	mov	r3, r5
    b3fc:	f108 0801 	add.w	r8, r8, #1
    b400:	f1b8 0f03 	cmp.w	r8, #3
    b404:	d1c9      	bne.n	b39a <_scanf_i+0x56>
    b406:	6862      	ldr	r2, [r4, #4]
    b408:	b90a      	cbnz	r2, b40e <_scanf_i+0xca>
    b40a:	220a      	movs	r2, #10
    b40c:	6062      	str	r2, [r4, #4]
    b40e:	6862      	ldr	r2, [r4, #4]
    b410:	4945      	ldr	r1, [pc, #276]	; (b528 <_scanf_i+0x1e4>)
    b412:	6960      	ldr	r0, [r4, #20]
    b414:	9301      	str	r3, [sp, #4]
    b416:	1a89      	subs	r1, r1, r2
    b418:	f000 f898 	bl	b54c <__sccl>
    b41c:	9b01      	ldr	r3, [sp, #4]
    b41e:	f04f 0800 	mov.w	r8, #0
    b422:	461d      	mov	r5, r3
    b424:	68a3      	ldr	r3, [r4, #8]
    b426:	2b00      	cmp	r3, #0
    b428:	d038      	beq.n	b49c <_scanf_i+0x158>
    b42a:	6831      	ldr	r1, [r6, #0]
    b42c:	6960      	ldr	r0, [r4, #20]
    b42e:	780a      	ldrb	r2, [r1, #0]
    b430:	5c80      	ldrb	r0, [r0, r2]
    b432:	2800      	cmp	r0, #0
    b434:	d032      	beq.n	b49c <_scanf_i+0x158>
    b436:	2a30      	cmp	r2, #48	; 0x30
    b438:	6822      	ldr	r2, [r4, #0]
    b43a:	d121      	bne.n	b480 <_scanf_i+0x13c>
    b43c:	0510      	lsls	r0, r2, #20
    b43e:	d51f      	bpl.n	b480 <_scanf_i+0x13c>
    b440:	f108 0801 	add.w	r8, r8, #1
    b444:	b117      	cbz	r7, b44c <_scanf_i+0x108>
    b446:	3301      	adds	r3, #1
    b448:	3f01      	subs	r7, #1
    b44a:	60a3      	str	r3, [r4, #8]
    b44c:	6873      	ldr	r3, [r6, #4]
    b44e:	3b01      	subs	r3, #1
    b450:	2b00      	cmp	r3, #0
    b452:	6073      	str	r3, [r6, #4]
    b454:	dd1b      	ble.n	b48e <_scanf_i+0x14a>
    b456:	6833      	ldr	r3, [r6, #0]
    b458:	3301      	adds	r3, #1
    b45a:	6033      	str	r3, [r6, #0]
    b45c:	68a3      	ldr	r3, [r4, #8]
    b45e:	3b01      	subs	r3, #1
    b460:	60a3      	str	r3, [r4, #8]
    b462:	e7df      	b.n	b424 <_scanf_i+0xe0>
    b464:	f1b8 0f02 	cmp.w	r8, #2
    b468:	d1b1      	bne.n	b3ce <_scanf_i+0x8a>
    b46a:	6822      	ldr	r2, [r4, #0]
    b46c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
    b470:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    b474:	d1c2      	bne.n	b3fc <_scanf_i+0xb8>
    b476:	2110      	movs	r1, #16
    b478:	6061      	str	r1, [r4, #4]
    b47a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    b47e:	e7a5      	b.n	b3cc <_scanf_i+0x88>
    b480:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
    b484:	6022      	str	r2, [r4, #0]
    b486:	780b      	ldrb	r3, [r1, #0]
    b488:	702b      	strb	r3, [r5, #0]
    b48a:	3501      	adds	r5, #1
    b48c:	e7de      	b.n	b44c <_scanf_i+0x108>
    b48e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    b492:	4631      	mov	r1, r6
    b494:	4658      	mov	r0, fp
    b496:	4798      	blx	r3
    b498:	2800      	cmp	r0, #0
    b49a:	d0df      	beq.n	b45c <_scanf_i+0x118>
    b49c:	6823      	ldr	r3, [r4, #0]
    b49e:	05d9      	lsls	r1, r3, #23
    b4a0:	d50c      	bpl.n	b4bc <_scanf_i+0x178>
    b4a2:	454d      	cmp	r5, r9
    b4a4:	d908      	bls.n	b4b8 <_scanf_i+0x174>
    b4a6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
    b4aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
    b4ae:	4632      	mov	r2, r6
    b4b0:	4658      	mov	r0, fp
    b4b2:	4798      	blx	r3
    b4b4:	1e6f      	subs	r7, r5, #1
    b4b6:	463d      	mov	r5, r7
    b4b8:	454d      	cmp	r5, r9
    b4ba:	d02c      	beq.n	b516 <_scanf_i+0x1d2>
    b4bc:	6822      	ldr	r2, [r4, #0]
    b4be:	f012 0210 	ands.w	r2, r2, #16
    b4c2:	d11e      	bne.n	b502 <_scanf_i+0x1be>
    b4c4:	702a      	strb	r2, [r5, #0]
    b4c6:	6863      	ldr	r3, [r4, #4]
    b4c8:	9e00      	ldr	r6, [sp, #0]
    b4ca:	4649      	mov	r1, r9
    b4cc:	4658      	mov	r0, fp
    b4ce:	47b0      	blx	r6
    b4d0:	6822      	ldr	r2, [r4, #0]
    b4d2:	f8da 3000 	ldr.w	r3, [sl]
    b4d6:	f012 0f20 	tst.w	r2, #32
    b4da:	d008      	beq.n	b4ee <_scanf_i+0x1aa>
    b4dc:	1d1a      	adds	r2, r3, #4
    b4de:	f8ca 2000 	str.w	r2, [sl]
    b4e2:	681b      	ldr	r3, [r3, #0]
    b4e4:	6018      	str	r0, [r3, #0]
    b4e6:	e009      	b.n	b4fc <_scanf_i+0x1b8>
    b4e8:	f04f 0800 	mov.w	r8, #0
    b4ec:	e7d6      	b.n	b49c <_scanf_i+0x158>
    b4ee:	07d2      	lsls	r2, r2, #31
    b4f0:	d5f4      	bpl.n	b4dc <_scanf_i+0x198>
    b4f2:	1d1a      	adds	r2, r3, #4
    b4f4:	f8ca 2000 	str.w	r2, [sl]
    b4f8:	681b      	ldr	r3, [r3, #0]
    b4fa:	8018      	strh	r0, [r3, #0]
    b4fc:	68e3      	ldr	r3, [r4, #12]
    b4fe:	3301      	adds	r3, #1
    b500:	60e3      	str	r3, [r4, #12]
    b502:	eba5 0509 	sub.w	r5, r5, r9
    b506:	44a8      	add	r8, r5
    b508:	6925      	ldr	r5, [r4, #16]
    b50a:	4445      	add	r5, r8
    b50c:	6125      	str	r5, [r4, #16]
    b50e:	2000      	movs	r0, #0
    b510:	b007      	add	sp, #28
    b512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b516:	2001      	movs	r0, #1
    b518:	e7fa      	b.n	b510 <_scanf_i+0x1cc>
    b51a:	bf00      	nop
    b51c:	0000e6d4 	.word	0x0000e6d4
    b520:	0000b7cd 	.word	0x0000b7cd
    b524:	0000b6ad 	.word	0x0000b6ad
    b528:	0000e6f0 	.word	0x0000e6f0

0000b52c <_sbrk_r>:
    b52c:	b538      	push	{r3, r4, r5, lr}
    b52e:	4c06      	ldr	r4, [pc, #24]	; (b548 <_sbrk_r+0x1c>)
    b530:	2300      	movs	r3, #0
    b532:	4605      	mov	r5, r0
    b534:	4608      	mov	r0, r1
    b536:	6023      	str	r3, [r4, #0]
    b538:	f7f6 fe3a 	bl	21b0 <_sbrk>
    b53c:	1c43      	adds	r3, r0, #1
    b53e:	d102      	bne.n	b546 <_sbrk_r+0x1a>
    b540:	6823      	ldr	r3, [r4, #0]
    b542:	b103      	cbz	r3, b546 <_sbrk_r+0x1a>
    b544:	602b      	str	r3, [r5, #0]
    b546:	bd38      	pop	{r3, r4, r5, pc}
    b548:	200090b4 	.word	0x200090b4

0000b54c <__sccl>:
    b54c:	b570      	push	{r4, r5, r6, lr}
    b54e:	780b      	ldrb	r3, [r1, #0]
    b550:	2b5e      	cmp	r3, #94	; 0x5e
    b552:	bf13      	iteet	ne
    b554:	1c4a      	addne	r2, r1, #1
    b556:	1c8a      	addeq	r2, r1, #2
    b558:	784b      	ldrbeq	r3, [r1, #1]
    b55a:	2100      	movne	r1, #0
    b55c:	bf08      	it	eq
    b55e:	2101      	moveq	r1, #1
    b560:	1e44      	subs	r4, r0, #1
    b562:	f100 05ff 	add.w	r5, r0, #255	; 0xff
    b566:	f804 1f01 	strb.w	r1, [r4, #1]!
    b56a:	42a5      	cmp	r5, r4
    b56c:	d1fb      	bne.n	b566 <__sccl+0x1a>
    b56e:	b913      	cbnz	r3, b576 <__sccl+0x2a>
    b570:	3a01      	subs	r2, #1
    b572:	4610      	mov	r0, r2
    b574:	bd70      	pop	{r4, r5, r6, pc}
    b576:	f081 0401 	eor.w	r4, r1, #1
    b57a:	54c4      	strb	r4, [r0, r3]
    b57c:	4611      	mov	r1, r2
    b57e:	780d      	ldrb	r5, [r1, #0]
    b580:	2d2d      	cmp	r5, #45	; 0x2d
    b582:	f101 0201 	add.w	r2, r1, #1
    b586:	d006      	beq.n	b596 <__sccl+0x4a>
    b588:	2d5d      	cmp	r5, #93	; 0x5d
    b58a:	d0f2      	beq.n	b572 <__sccl+0x26>
    b58c:	b90d      	cbnz	r5, b592 <__sccl+0x46>
    b58e:	460a      	mov	r2, r1
    b590:	e7ef      	b.n	b572 <__sccl+0x26>
    b592:	462b      	mov	r3, r5
    b594:	e7f1      	b.n	b57a <__sccl+0x2e>
    b596:	784e      	ldrb	r6, [r1, #1]
    b598:	2e5d      	cmp	r6, #93	; 0x5d
    b59a:	d0fa      	beq.n	b592 <__sccl+0x46>
    b59c:	42b3      	cmp	r3, r6
    b59e:	dcf8      	bgt.n	b592 <__sccl+0x46>
    b5a0:	3102      	adds	r1, #2
    b5a2:	3301      	adds	r3, #1
    b5a4:	429e      	cmp	r6, r3
    b5a6:	54c4      	strb	r4, [r0, r3]
    b5a8:	dcfb      	bgt.n	b5a2 <__sccl+0x56>
    b5aa:	e7e8      	b.n	b57e <__sccl+0x32>

0000b5ac <_strtol_l.isra.0>:
    b5ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b5b0:	4680      	mov	r8, r0
    b5b2:	4689      	mov	r9, r1
    b5b4:	4692      	mov	sl, r2
    b5b6:	461f      	mov	r7, r3
    b5b8:	468b      	mov	fp, r1
    b5ba:	465d      	mov	r5, fp
    b5bc:	980a      	ldr	r0, [sp, #40]	; 0x28
    b5be:	f815 4b01 	ldrb.w	r4, [r5], #1
    b5c2:	f000 f950 	bl	b866 <__locale_ctype_ptr_l>
    b5c6:	4420      	add	r0, r4
    b5c8:	7846      	ldrb	r6, [r0, #1]
    b5ca:	f016 0608 	ands.w	r6, r6, #8
    b5ce:	d10b      	bne.n	b5e8 <_strtol_l.isra.0+0x3c>
    b5d0:	2c2d      	cmp	r4, #45	; 0x2d
    b5d2:	d10b      	bne.n	b5ec <_strtol_l.isra.0+0x40>
    b5d4:	782c      	ldrb	r4, [r5, #0]
    b5d6:	2601      	movs	r6, #1
    b5d8:	f10b 0502 	add.w	r5, fp, #2
    b5dc:	b167      	cbz	r7, b5f8 <_strtol_l.isra.0+0x4c>
    b5de:	2f10      	cmp	r7, #16
    b5e0:	d114      	bne.n	b60c <_strtol_l.isra.0+0x60>
    b5e2:	2c30      	cmp	r4, #48	; 0x30
    b5e4:	d00a      	beq.n	b5fc <_strtol_l.isra.0+0x50>
    b5e6:	e011      	b.n	b60c <_strtol_l.isra.0+0x60>
    b5e8:	46ab      	mov	fp, r5
    b5ea:	e7e6      	b.n	b5ba <_strtol_l.isra.0+0xe>
    b5ec:	2c2b      	cmp	r4, #43	; 0x2b
    b5ee:	bf04      	itt	eq
    b5f0:	782c      	ldrbeq	r4, [r5, #0]
    b5f2:	f10b 0502 	addeq.w	r5, fp, #2
    b5f6:	e7f1      	b.n	b5dc <_strtol_l.isra.0+0x30>
    b5f8:	2c30      	cmp	r4, #48	; 0x30
    b5fa:	d127      	bne.n	b64c <_strtol_l.isra.0+0xa0>
    b5fc:	782b      	ldrb	r3, [r5, #0]
    b5fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    b602:	2b58      	cmp	r3, #88	; 0x58
    b604:	d14b      	bne.n	b69e <_strtol_l.isra.0+0xf2>
    b606:	786c      	ldrb	r4, [r5, #1]
    b608:	2710      	movs	r7, #16
    b60a:	3502      	adds	r5, #2
    b60c:	2e00      	cmp	r6, #0
    b60e:	bf0c      	ite	eq
    b610:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
    b614:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
    b618:	2200      	movs	r2, #0
    b61a:	fbb1 fef7 	udiv	lr, r1, r7
    b61e:	4610      	mov	r0, r2
    b620:	fb07 1c1e 	mls	ip, r7, lr, r1
    b624:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    b628:	2b09      	cmp	r3, #9
    b62a:	d811      	bhi.n	b650 <_strtol_l.isra.0+0xa4>
    b62c:	461c      	mov	r4, r3
    b62e:	42a7      	cmp	r7, r4
    b630:	dd1d      	ble.n	b66e <_strtol_l.isra.0+0xc2>
    b632:	1c53      	adds	r3, r2, #1
    b634:	d007      	beq.n	b646 <_strtol_l.isra.0+0x9a>
    b636:	4586      	cmp	lr, r0
    b638:	d316      	bcc.n	b668 <_strtol_l.isra.0+0xbc>
    b63a:	d101      	bne.n	b640 <_strtol_l.isra.0+0x94>
    b63c:	45a4      	cmp	ip, r4
    b63e:	db13      	blt.n	b668 <_strtol_l.isra.0+0xbc>
    b640:	fb00 4007 	mla	r0, r0, r7, r4
    b644:	2201      	movs	r2, #1
    b646:	f815 4b01 	ldrb.w	r4, [r5], #1
    b64a:	e7eb      	b.n	b624 <_strtol_l.isra.0+0x78>
    b64c:	270a      	movs	r7, #10
    b64e:	e7dd      	b.n	b60c <_strtol_l.isra.0+0x60>
    b650:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
    b654:	2b19      	cmp	r3, #25
    b656:	d801      	bhi.n	b65c <_strtol_l.isra.0+0xb0>
    b658:	3c37      	subs	r4, #55	; 0x37
    b65a:	e7e8      	b.n	b62e <_strtol_l.isra.0+0x82>
    b65c:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
    b660:	2b19      	cmp	r3, #25
    b662:	d804      	bhi.n	b66e <_strtol_l.isra.0+0xc2>
    b664:	3c57      	subs	r4, #87	; 0x57
    b666:	e7e2      	b.n	b62e <_strtol_l.isra.0+0x82>
    b668:	f04f 32ff 	mov.w	r2, #4294967295
    b66c:	e7eb      	b.n	b646 <_strtol_l.isra.0+0x9a>
    b66e:	1c53      	adds	r3, r2, #1
    b670:	d108      	bne.n	b684 <_strtol_l.isra.0+0xd8>
    b672:	2322      	movs	r3, #34	; 0x22
    b674:	f8c8 3000 	str.w	r3, [r8]
    b678:	4608      	mov	r0, r1
    b67a:	f1ba 0f00 	cmp.w	sl, #0
    b67e:	d107      	bne.n	b690 <_strtol_l.isra.0+0xe4>
    b680:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b684:	b106      	cbz	r6, b688 <_strtol_l.isra.0+0xdc>
    b686:	4240      	negs	r0, r0
    b688:	f1ba 0f00 	cmp.w	sl, #0
    b68c:	d00c      	beq.n	b6a8 <_strtol_l.isra.0+0xfc>
    b68e:	b122      	cbz	r2, b69a <_strtol_l.isra.0+0xee>
    b690:	3d01      	subs	r5, #1
    b692:	f8ca 5000 	str.w	r5, [sl]
    b696:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b69a:	464d      	mov	r5, r9
    b69c:	e7f9      	b.n	b692 <_strtol_l.isra.0+0xe6>
    b69e:	2430      	movs	r4, #48	; 0x30
    b6a0:	2f00      	cmp	r7, #0
    b6a2:	d1b3      	bne.n	b60c <_strtol_l.isra.0+0x60>
    b6a4:	2708      	movs	r7, #8
    b6a6:	e7b1      	b.n	b60c <_strtol_l.isra.0+0x60>
    b6a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000b6ac <_strtol_r>:
    b6ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
    b6ae:	4c06      	ldr	r4, [pc, #24]	; (b6c8 <_strtol_r+0x1c>)
    b6b0:	4d06      	ldr	r5, [pc, #24]	; (b6cc <_strtol_r+0x20>)
    b6b2:	6824      	ldr	r4, [r4, #0]
    b6b4:	6a24      	ldr	r4, [r4, #32]
    b6b6:	2c00      	cmp	r4, #0
    b6b8:	bf08      	it	eq
    b6ba:	462c      	moveq	r4, r5
    b6bc:	9400      	str	r4, [sp, #0]
    b6be:	f7ff ff75 	bl	b5ac <_strtol_l.isra.0>
    b6c2:	b003      	add	sp, #12
    b6c4:	bd30      	pop	{r4, r5, pc}
    b6c6:	bf00      	nop
    b6c8:	200000e0 	.word	0x200000e0
    b6cc:	20000144 	.word	0x20000144

0000b6d0 <_strtoul_l.isra.0>:
    b6d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b6d4:	4680      	mov	r8, r0
    b6d6:	4689      	mov	r9, r1
    b6d8:	4692      	mov	sl, r2
    b6da:	461e      	mov	r6, r3
    b6dc:	460f      	mov	r7, r1
    b6de:	463d      	mov	r5, r7
    b6e0:	9808      	ldr	r0, [sp, #32]
    b6e2:	f815 4b01 	ldrb.w	r4, [r5], #1
    b6e6:	f000 f8be 	bl	b866 <__locale_ctype_ptr_l>
    b6ea:	4420      	add	r0, r4
    b6ec:	7843      	ldrb	r3, [r0, #1]
    b6ee:	f013 0308 	ands.w	r3, r3, #8
    b6f2:	d10a      	bne.n	b70a <_strtoul_l.isra.0+0x3a>
    b6f4:	2c2d      	cmp	r4, #45	; 0x2d
    b6f6:	d10a      	bne.n	b70e <_strtoul_l.isra.0+0x3e>
    b6f8:	782c      	ldrb	r4, [r5, #0]
    b6fa:	2301      	movs	r3, #1
    b6fc:	1cbd      	adds	r5, r7, #2
    b6fe:	b15e      	cbz	r6, b718 <_strtoul_l.isra.0+0x48>
    b700:	2e10      	cmp	r6, #16
    b702:	d113      	bne.n	b72c <_strtoul_l.isra.0+0x5c>
    b704:	2c30      	cmp	r4, #48	; 0x30
    b706:	d009      	beq.n	b71c <_strtoul_l.isra.0+0x4c>
    b708:	e010      	b.n	b72c <_strtoul_l.isra.0+0x5c>
    b70a:	462f      	mov	r7, r5
    b70c:	e7e7      	b.n	b6de <_strtoul_l.isra.0+0xe>
    b70e:	2c2b      	cmp	r4, #43	; 0x2b
    b710:	bf04      	itt	eq
    b712:	782c      	ldrbeq	r4, [r5, #0]
    b714:	1cbd      	addeq	r5, r7, #2
    b716:	e7f2      	b.n	b6fe <_strtoul_l.isra.0+0x2e>
    b718:	2c30      	cmp	r4, #48	; 0x30
    b71a:	d125      	bne.n	b768 <_strtoul_l.isra.0+0x98>
    b71c:	782a      	ldrb	r2, [r5, #0]
    b71e:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    b722:	2a58      	cmp	r2, #88	; 0x58
    b724:	d14a      	bne.n	b7bc <_strtoul_l.isra.0+0xec>
    b726:	786c      	ldrb	r4, [r5, #1]
    b728:	2610      	movs	r6, #16
    b72a:	3502      	adds	r5, #2
    b72c:	f04f 31ff 	mov.w	r1, #4294967295
    b730:	2700      	movs	r7, #0
    b732:	fbb1 f1f6 	udiv	r1, r1, r6
    b736:	fb06 fe01 	mul.w	lr, r6, r1
    b73a:	ea6f 0e0e 	mvn.w	lr, lr
    b73e:	4638      	mov	r0, r7
    b740:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
    b744:	2a09      	cmp	r2, #9
    b746:	d811      	bhi.n	b76c <_strtoul_l.isra.0+0x9c>
    b748:	4614      	mov	r4, r2
    b74a:	42a6      	cmp	r6, r4
    b74c:	dd1d      	ble.n	b78a <_strtoul_l.isra.0+0xba>
    b74e:	2f00      	cmp	r7, #0
    b750:	db18      	blt.n	b784 <_strtoul_l.isra.0+0xb4>
    b752:	4281      	cmp	r1, r0
    b754:	d316      	bcc.n	b784 <_strtoul_l.isra.0+0xb4>
    b756:	d101      	bne.n	b75c <_strtoul_l.isra.0+0x8c>
    b758:	45a6      	cmp	lr, r4
    b75a:	db13      	blt.n	b784 <_strtoul_l.isra.0+0xb4>
    b75c:	fb00 4006 	mla	r0, r0, r6, r4
    b760:	2701      	movs	r7, #1
    b762:	f815 4b01 	ldrb.w	r4, [r5], #1
    b766:	e7eb      	b.n	b740 <_strtoul_l.isra.0+0x70>
    b768:	260a      	movs	r6, #10
    b76a:	e7df      	b.n	b72c <_strtoul_l.isra.0+0x5c>
    b76c:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
    b770:	2a19      	cmp	r2, #25
    b772:	d801      	bhi.n	b778 <_strtoul_l.isra.0+0xa8>
    b774:	3c37      	subs	r4, #55	; 0x37
    b776:	e7e8      	b.n	b74a <_strtoul_l.isra.0+0x7a>
    b778:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
    b77c:	2a19      	cmp	r2, #25
    b77e:	d804      	bhi.n	b78a <_strtoul_l.isra.0+0xba>
    b780:	3c57      	subs	r4, #87	; 0x57
    b782:	e7e2      	b.n	b74a <_strtoul_l.isra.0+0x7a>
    b784:	f04f 37ff 	mov.w	r7, #4294967295
    b788:	e7eb      	b.n	b762 <_strtoul_l.isra.0+0x92>
    b78a:	2f00      	cmp	r7, #0
    b78c:	da09      	bge.n	b7a2 <_strtoul_l.isra.0+0xd2>
    b78e:	2322      	movs	r3, #34	; 0x22
    b790:	f8c8 3000 	str.w	r3, [r8]
    b794:	f04f 30ff 	mov.w	r0, #4294967295
    b798:	f1ba 0f00 	cmp.w	sl, #0
    b79c:	d107      	bne.n	b7ae <_strtoul_l.isra.0+0xde>
    b79e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b7a2:	b103      	cbz	r3, b7a6 <_strtoul_l.isra.0+0xd6>
    b7a4:	4240      	negs	r0, r0
    b7a6:	f1ba 0f00 	cmp.w	sl, #0
    b7aa:	d00c      	beq.n	b7c6 <_strtoul_l.isra.0+0xf6>
    b7ac:	b127      	cbz	r7, b7b8 <_strtoul_l.isra.0+0xe8>
    b7ae:	3d01      	subs	r5, #1
    b7b0:	f8ca 5000 	str.w	r5, [sl]
    b7b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b7b8:	464d      	mov	r5, r9
    b7ba:	e7f9      	b.n	b7b0 <_strtoul_l.isra.0+0xe0>
    b7bc:	2430      	movs	r4, #48	; 0x30
    b7be:	2e00      	cmp	r6, #0
    b7c0:	d1b4      	bne.n	b72c <_strtoul_l.isra.0+0x5c>
    b7c2:	2608      	movs	r6, #8
    b7c4:	e7b2      	b.n	b72c <_strtoul_l.isra.0+0x5c>
    b7c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0000b7cc <_strtoul_r>:
    b7cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    b7ce:	4c06      	ldr	r4, [pc, #24]	; (b7e8 <_strtoul_r+0x1c>)
    b7d0:	4d06      	ldr	r5, [pc, #24]	; (b7ec <_strtoul_r+0x20>)
    b7d2:	6824      	ldr	r4, [r4, #0]
    b7d4:	6a24      	ldr	r4, [r4, #32]
    b7d6:	2c00      	cmp	r4, #0
    b7d8:	bf08      	it	eq
    b7da:	462c      	moveq	r4, r5
    b7dc:	9400      	str	r4, [sp, #0]
    b7de:	f7ff ff77 	bl	b6d0 <_strtoul_l.isra.0>
    b7e2:	b003      	add	sp, #12
    b7e4:	bd30      	pop	{r4, r5, pc}
    b7e6:	bf00      	nop
    b7e8:	200000e0 	.word	0x200000e0
    b7ec:	20000144 	.word	0x20000144

0000b7f0 <__submore>:
    b7f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b7f4:	460c      	mov	r4, r1
    b7f6:	6b49      	ldr	r1, [r1, #52]	; 0x34
    b7f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
    b7fc:	4299      	cmp	r1, r3
    b7fe:	d11e      	bne.n	b83e <__submore+0x4e>
    b800:	f44f 6180 	mov.w	r1, #1024	; 0x400
    b804:	f7ff fb2e 	bl	ae64 <_malloc_r>
    b808:	b918      	cbnz	r0, b812 <__submore+0x22>
    b80a:	f04f 30ff 	mov.w	r0, #4294967295
    b80e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b812:	f44f 6380 	mov.w	r3, #1024	; 0x400
    b816:	63a3      	str	r3, [r4, #56]	; 0x38
    b818:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
    b81c:	6360      	str	r0, [r4, #52]	; 0x34
    b81e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
    b822:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    b826:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
    b82a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    b82e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
    b832:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
    b836:	6020      	str	r0, [r4, #0]
    b838:	2000      	movs	r0, #0
    b83a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b83e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    b840:	0077      	lsls	r7, r6, #1
    b842:	463a      	mov	r2, r7
    b844:	f000 f8d4 	bl	b9f0 <_realloc_r>
    b848:	4605      	mov	r5, r0
    b84a:	2800      	cmp	r0, #0
    b84c:	d0dd      	beq.n	b80a <__submore+0x1a>
    b84e:	eb00 0806 	add.w	r8, r0, r6
    b852:	4601      	mov	r1, r0
    b854:	4632      	mov	r2, r6
    b856:	4640      	mov	r0, r8
    b858:	f7ff fa8d 	bl	ad76 <memcpy>
    b85c:	f8c4 8000 	str.w	r8, [r4]
    b860:	6365      	str	r5, [r4, #52]	; 0x34
    b862:	63a7      	str	r7, [r4, #56]	; 0x38
    b864:	e7e8      	b.n	b838 <__submore+0x48>

0000b866 <__locale_ctype_ptr_l>:
    b866:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
    b86a:	4770      	bx	lr

0000b86c <__locale_ctype_ptr>:
    b86c:	4b04      	ldr	r3, [pc, #16]	; (b880 <__locale_ctype_ptr+0x14>)
    b86e:	4a05      	ldr	r2, [pc, #20]	; (b884 <__locale_ctype_ptr+0x18>)
    b870:	681b      	ldr	r3, [r3, #0]
    b872:	6a1b      	ldr	r3, [r3, #32]
    b874:	2b00      	cmp	r3, #0
    b876:	bf08      	it	eq
    b878:	4613      	moveq	r3, r2
    b87a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
    b87e:	4770      	bx	lr
    b880:	200000e0 	.word	0x200000e0
    b884:	20000144 	.word	0x20000144

0000b888 <__ascii_mbtowc>:
    b888:	b082      	sub	sp, #8
    b88a:	b901      	cbnz	r1, b88e <__ascii_mbtowc+0x6>
    b88c:	a901      	add	r1, sp, #4
    b88e:	b142      	cbz	r2, b8a2 <__ascii_mbtowc+0x1a>
    b890:	b14b      	cbz	r3, b8a6 <__ascii_mbtowc+0x1e>
    b892:	7813      	ldrb	r3, [r2, #0]
    b894:	600b      	str	r3, [r1, #0]
    b896:	7812      	ldrb	r2, [r2, #0]
    b898:	1c10      	adds	r0, r2, #0
    b89a:	bf18      	it	ne
    b89c:	2001      	movne	r0, #1
    b89e:	b002      	add	sp, #8
    b8a0:	4770      	bx	lr
    b8a2:	4610      	mov	r0, r2
    b8a4:	e7fb      	b.n	b89e <__ascii_mbtowc+0x16>
    b8a6:	f06f 0001 	mvn.w	r0, #1
    b8aa:	e7f8      	b.n	b89e <__ascii_mbtowc+0x16>
    b8ac:	0000      	movs	r0, r0
	...

0000b8b0 <memchr>:
    b8b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    b8b4:	2a10      	cmp	r2, #16
    b8b6:	db2b      	blt.n	b910 <memchr+0x60>
    b8b8:	f010 0f07 	tst.w	r0, #7
    b8bc:	d008      	beq.n	b8d0 <memchr+0x20>
    b8be:	f810 3b01 	ldrb.w	r3, [r0], #1
    b8c2:	3a01      	subs	r2, #1
    b8c4:	428b      	cmp	r3, r1
    b8c6:	d02d      	beq.n	b924 <memchr+0x74>
    b8c8:	f010 0f07 	tst.w	r0, #7
    b8cc:	b342      	cbz	r2, b920 <memchr+0x70>
    b8ce:	d1f6      	bne.n	b8be <memchr+0xe>
    b8d0:	b4f0      	push	{r4, r5, r6, r7}
    b8d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    b8d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    b8da:	f022 0407 	bic.w	r4, r2, #7
    b8de:	f07f 0700 	mvns.w	r7, #0
    b8e2:	2300      	movs	r3, #0
    b8e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    b8e8:	3c08      	subs	r4, #8
    b8ea:	ea85 0501 	eor.w	r5, r5, r1
    b8ee:	ea86 0601 	eor.w	r6, r6, r1
    b8f2:	fa85 f547 	uadd8	r5, r5, r7
    b8f6:	faa3 f587 	sel	r5, r3, r7
    b8fa:	fa86 f647 	uadd8	r6, r6, r7
    b8fe:	faa5 f687 	sel	r6, r5, r7
    b902:	b98e      	cbnz	r6, b928 <memchr+0x78>
    b904:	d1ee      	bne.n	b8e4 <memchr+0x34>
    b906:	bcf0      	pop	{r4, r5, r6, r7}
    b908:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    b90c:	f002 0207 	and.w	r2, r2, #7
    b910:	b132      	cbz	r2, b920 <memchr+0x70>
    b912:	f810 3b01 	ldrb.w	r3, [r0], #1
    b916:	3a01      	subs	r2, #1
    b918:	ea83 0301 	eor.w	r3, r3, r1
    b91c:	b113      	cbz	r3, b924 <memchr+0x74>
    b91e:	d1f8      	bne.n	b912 <memchr+0x62>
    b920:	2000      	movs	r0, #0
    b922:	4770      	bx	lr
    b924:	3801      	subs	r0, #1
    b926:	4770      	bx	lr
    b928:	2d00      	cmp	r5, #0
    b92a:	bf06      	itte	eq
    b92c:	4635      	moveq	r5, r6
    b92e:	3803      	subeq	r0, #3
    b930:	3807      	subne	r0, #7
    b932:	f015 0f01 	tst.w	r5, #1
    b936:	d107      	bne.n	b948 <memchr+0x98>
    b938:	3001      	adds	r0, #1
    b93a:	f415 7f80 	tst.w	r5, #256	; 0x100
    b93e:	bf02      	ittt	eq
    b940:	3001      	addeq	r0, #1
    b942:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    b946:	3001      	addeq	r0, #1
    b948:	bcf0      	pop	{r4, r5, r6, r7}
    b94a:	3801      	subs	r0, #1
    b94c:	4770      	bx	lr
    b94e:	bf00      	nop

0000b950 <__malloc_lock>:
    b950:	4770      	bx	lr

0000b952 <__malloc_unlock>:
    b952:	4770      	bx	lr

0000b954 <_free_r>:
    b954:	b538      	push	{r3, r4, r5, lr}
    b956:	4605      	mov	r5, r0
    b958:	2900      	cmp	r1, #0
    b95a:	d045      	beq.n	b9e8 <_free_r+0x94>
    b95c:	f851 3c04 	ldr.w	r3, [r1, #-4]
    b960:	1f0c      	subs	r4, r1, #4
    b962:	2b00      	cmp	r3, #0
    b964:	bfb8      	it	lt
    b966:	18e4      	addlt	r4, r4, r3
    b968:	f7ff fff2 	bl	b950 <__malloc_lock>
    b96c:	4a1f      	ldr	r2, [pc, #124]	; (b9ec <_free_r+0x98>)
    b96e:	6813      	ldr	r3, [r2, #0]
    b970:	4610      	mov	r0, r2
    b972:	b933      	cbnz	r3, b982 <_free_r+0x2e>
    b974:	6063      	str	r3, [r4, #4]
    b976:	6014      	str	r4, [r2, #0]
    b978:	4628      	mov	r0, r5
    b97a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    b97e:	f7ff bfe8 	b.w	b952 <__malloc_unlock>
    b982:	42a3      	cmp	r3, r4
    b984:	d90c      	bls.n	b9a0 <_free_r+0x4c>
    b986:	6821      	ldr	r1, [r4, #0]
    b988:	1862      	adds	r2, r4, r1
    b98a:	4293      	cmp	r3, r2
    b98c:	bf04      	itt	eq
    b98e:	681a      	ldreq	r2, [r3, #0]
    b990:	685b      	ldreq	r3, [r3, #4]
    b992:	6063      	str	r3, [r4, #4]
    b994:	bf04      	itt	eq
    b996:	1852      	addeq	r2, r2, r1
    b998:	6022      	streq	r2, [r4, #0]
    b99a:	6004      	str	r4, [r0, #0]
    b99c:	e7ec      	b.n	b978 <_free_r+0x24>
    b99e:	4613      	mov	r3, r2
    b9a0:	685a      	ldr	r2, [r3, #4]
    b9a2:	b10a      	cbz	r2, b9a8 <_free_r+0x54>
    b9a4:	42a2      	cmp	r2, r4
    b9a6:	d9fa      	bls.n	b99e <_free_r+0x4a>
    b9a8:	6819      	ldr	r1, [r3, #0]
    b9aa:	1858      	adds	r0, r3, r1
    b9ac:	42a0      	cmp	r0, r4
    b9ae:	d10b      	bne.n	b9c8 <_free_r+0x74>
    b9b0:	6820      	ldr	r0, [r4, #0]
    b9b2:	4401      	add	r1, r0
    b9b4:	1858      	adds	r0, r3, r1
    b9b6:	4282      	cmp	r2, r0
    b9b8:	6019      	str	r1, [r3, #0]
    b9ba:	d1dd      	bne.n	b978 <_free_r+0x24>
    b9bc:	6810      	ldr	r0, [r2, #0]
    b9be:	6852      	ldr	r2, [r2, #4]
    b9c0:	605a      	str	r2, [r3, #4]
    b9c2:	4401      	add	r1, r0
    b9c4:	6019      	str	r1, [r3, #0]
    b9c6:	e7d7      	b.n	b978 <_free_r+0x24>
    b9c8:	d902      	bls.n	b9d0 <_free_r+0x7c>
    b9ca:	230c      	movs	r3, #12
    b9cc:	602b      	str	r3, [r5, #0]
    b9ce:	e7d3      	b.n	b978 <_free_r+0x24>
    b9d0:	6820      	ldr	r0, [r4, #0]
    b9d2:	1821      	adds	r1, r4, r0
    b9d4:	428a      	cmp	r2, r1
    b9d6:	bf04      	itt	eq
    b9d8:	6811      	ldreq	r1, [r2, #0]
    b9da:	6852      	ldreq	r2, [r2, #4]
    b9dc:	6062      	str	r2, [r4, #4]
    b9de:	bf04      	itt	eq
    b9e0:	1809      	addeq	r1, r1, r0
    b9e2:	6021      	streq	r1, [r4, #0]
    b9e4:	605c      	str	r4, [r3, #4]
    b9e6:	e7c7      	b.n	b978 <_free_r+0x24>
    b9e8:	bd38      	pop	{r3, r4, r5, pc}
    b9ea:	bf00      	nop
    b9ec:	20007400 	.word	0x20007400

0000b9f0 <_realloc_r>:
    b9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b9f2:	4607      	mov	r7, r0
    b9f4:	4614      	mov	r4, r2
    b9f6:	460e      	mov	r6, r1
    b9f8:	b921      	cbnz	r1, ba04 <_realloc_r+0x14>
    b9fa:	4611      	mov	r1, r2
    b9fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    ba00:	f7ff ba30 	b.w	ae64 <_malloc_r>
    ba04:	b922      	cbnz	r2, ba10 <_realloc_r+0x20>
    ba06:	f7ff ffa5 	bl	b954 <_free_r>
    ba0a:	4625      	mov	r5, r4
    ba0c:	4628      	mov	r0, r5
    ba0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ba10:	f000 f821 	bl	ba56 <_malloc_usable_size_r>
    ba14:	4284      	cmp	r4, r0
    ba16:	d90f      	bls.n	ba38 <_realloc_r+0x48>
    ba18:	4621      	mov	r1, r4
    ba1a:	4638      	mov	r0, r7
    ba1c:	f7ff fa22 	bl	ae64 <_malloc_r>
    ba20:	4605      	mov	r5, r0
    ba22:	2800      	cmp	r0, #0
    ba24:	d0f2      	beq.n	ba0c <_realloc_r+0x1c>
    ba26:	4631      	mov	r1, r6
    ba28:	4622      	mov	r2, r4
    ba2a:	f7ff f9a4 	bl	ad76 <memcpy>
    ba2e:	4631      	mov	r1, r6
    ba30:	4638      	mov	r0, r7
    ba32:	f7ff ff8f 	bl	b954 <_free_r>
    ba36:	e7e9      	b.n	ba0c <_realloc_r+0x1c>
    ba38:	4635      	mov	r5, r6
    ba3a:	e7e7      	b.n	ba0c <_realloc_r+0x1c>

0000ba3c <__ascii_wctomb>:
    ba3c:	b149      	cbz	r1, ba52 <__ascii_wctomb+0x16>
    ba3e:	2aff      	cmp	r2, #255	; 0xff
    ba40:	bf85      	ittet	hi
    ba42:	238a      	movhi	r3, #138	; 0x8a
    ba44:	6003      	strhi	r3, [r0, #0]
    ba46:	700a      	strbls	r2, [r1, #0]
    ba48:	f04f 30ff 	movhi.w	r0, #4294967295
    ba4c:	bf98      	it	ls
    ba4e:	2001      	movls	r0, #1
    ba50:	4770      	bx	lr
    ba52:	4608      	mov	r0, r1
    ba54:	4770      	bx	lr

0000ba56 <_malloc_usable_size_r>:
    ba56:	f851 0c04 	ldr.w	r0, [r1, #-4]
    ba5a:	2800      	cmp	r0, #0
    ba5c:	f1a0 0004 	sub.w	r0, r0, #4
    ba60:	bfbc      	itt	lt
    ba62:	580b      	ldrlt	r3, [r1, r0]
    ba64:	18c0      	addlt	r0, r0, r3
    ba66:	4770      	bx	lr

0000ba68 <Representation.78635>:
    ba68:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
    ba78:	2e00 2f2e 6168 2f6c 6e69 6c63 6475 2f65     .../hal/include/
    ba88:	6168 5f6c 6477 2e74 0068 4f47 444f 4100     hal_wdt.h.GOOD.A
    ba98:	5443 5649 0045 494c 4b4e 4f44 4e57 4300     CTIVE.LINKDOWN.C
    baa8:	756f 646c 4e20 544f 7220 6165 2064 7266     ould NOT read fr
    bab8:	6d6f 7420 6568 7720 7461 7265 6420 7465     om the water det
    bac8:	6365 6f74 2072 0d31 000a 6f43 6c75 2064     ector 1...Could 
    bad8:	4f4e 2054 6572 6461 6620 6f72 206d 6874     NOT read from th
    bae8:	2065 6177 6574 2072 6564 6574 7463 726f     e water detector
    baf8:	3220 0a0d 4300 756f 646c 4e20 544f 7220      2...Could NOT r
    bb08:	6165 2064 7266 6d6f 7420 6568 4820 2056     ead from the HV 
    bb18:	6964 6976 6564 0d72 000a 6f43 6c75 2064     divider...Could 
    bb28:	4f4e 2054 6572 6461 6620 6f72 206d 6874     NOT read from th
    bb38:	2065 6f6d 7369 7574 6572 2620 7420 6d65     e moisture & tem
    bb48:	2070 6573 736e 726f 6f20 206e 4143 4452     p sensor on CARD
    bb58:	3a42 3249 2043 255b 5d69 0a0d 4c00 6469     B:I2C [%i]...Lid
    bb68:	5420 4d41 4550 2052 255b 5d73 0a0d 4c00      TAMPER [%s]...L
    bb78:	6665 2074 7445 6568 6e72 7465 5b20 7325     eft Ethernet [%s
    bb88:	0d5d 000a 6952 6867 2074 7445 6568 6e72     ]...Right Ethern
    bb98:	7465 5b20 7325 0d5d 000a 6f50 6577 2072     et [%s]...Power 
    bba8:	2026 7445 6568 6e72 7465 3c20 6f43 6d6d     & Ethernet <Comm
    bbb8:	2073 694c 6b6e 203e 255b 5d73 0a0d 4300     s Link> [%s]...C
    bbc8:	756f 646c 6e20 746f 7220 6165 2064 3249     ould not read I2
    bbd8:	2043 7562 2073 6e6f 4320 5241 4144 6620     C bus on CARDA f
    bbe8:	726f 4920 4332 635f 6568 6b63 645f 7665     or I2C_check_dev
    bbf8:	6369 4965 2844 2029 255b 5d69 0a0d 4300     iceID() [%i]...C
    bc08:	5241 4144 6920 736e 7265 6574 2064 7562     ARDA inserted bu
    bc18:	2074 6f6e 2074 6469 6e65 6974 6966 6465     t not identified
    bc28:	0a0d 4300 5241 4144 6920 2073 2061 414d     ...CARDA is a MA
    bc38:	4958 4920 0d4f 000a 6f43 6c75 2064 4f4e     XI IO...Could NO
    bc48:	2054 7277 7469 2065 6f74 7420 6568 4d20     T write to the M
    bc58:	6e69 2d69 4f49 4520 7078 6e61 6564 2072     ini-IO Expander 
    bc68:	6e6f 4320 5241 4144 493a 4332 5b20 6925     on CARDA:I2C [%i
    bc78:	0d5d 000a 4143 4452 2041 7369 6120 4d20     ]...CARDA is a M
    bc88:	4e49 2049 4f49 0a0d 4300 5241 4144 6920     INI IO...CARDA i
    bc98:	2073 2061 4956 5242 5041 494f 544e 0a0d     s a VIBRAPOINT..
    bca8:	4300 756f 646c 4e20 544f 7720 6972 6574     .Could NOT write
    bcb8:	7420 206f 6874 2065 4144 2043 6147 6e69      to the DAC Gain
    bcc8:	6320 6e6f 7274 6c6f 656c 2072 6e6f 4320      controller on C
    bcd8:	5241 4144 493a 4332 5b20 6925 0d5d 000a     ARDA:I2C [%i]...
    bce8:	4143 4452 2041 7369 6120 5620 4249 4152     CARDA is a VIBRA
    bcf8:	4554 0d4b 000a 535b 4950 4b5f 5a53 3738     TEK...[SPI_KSZ87
    bd08:	3439 505f 524f 3354 4f43 544e 4f52 324c     94_PORT3CONTROL2
    bd18:	205d 6f6e 2074 6f63 7272 6365 0d74 000a     ] not correct...
    bd28:	4143 4452 2041 7369 6120 5020 776f 7265     CARDA is a Power
    bd38:	2620 4520 6874 7265 656e 2074 6144 6775      & Ethernet Daug
    bd48:	7468 7265 432d 7261 0d64 000a 4143 4452     hter-Card...CARD
    bd58:	2041 6168 2073 6562 6e65 5220 4d45 564f     A has been REMOV
    bd68:	4445 0a0d 4300 756f 646c 6e20 746f 7220     ED...Could not r
    bd78:	6165 2064 3249 2043 7562 2073 6e6f 4320     ead I2C bus on C
    bd88:	5241 4244 6620 726f 4920 4332 635f 6568     ARDB for I2C_che
    bd98:	6b63 645f 7665 6369 4965 2844 2029 255b     ck_deviceID() [%
    bda8:	5d69 0a0d 4300 5241 4244 6920 736e 7265     i]...CARDB inser
    bdb8:	6574 2064 7562 2074 6f6e 2074 6469 6e65     ted but not iden
    bdc8:	6974 6966 6465 0a0d 4300 5241 4244 6920     tified...CARDB i
    bdd8:	2073 2061 414d 4958 4920 0d4f 000a 6f43     s a MAXI IO...Co
    bde8:	6c75 2064 4f4e 2054 7277 7469 2065 6f74     uld NOT write to
    bdf8:	7420 6568 4d20 6e69 2d69 4f49 4520 7078      the Mini-IO Exp
    be08:	6e61 6564 2072 6e6f 4320 5241 4244 493a     ander on CARDB:I
    be18:	4332 5b20 6925 0d5d 000a 4143 4452 2042     2C [%i]...CARDB 
    be28:	7369 6120 4d20 4e49 2049 4f49 0a0d 4300     is a MINI IO...C
    be38:	5241 4244 6920 2073 2061 4956 5242 5041     ARDB is a VIBRAP
    be48:	494f 544e 0a0d 4300 756f 646c 4e20 544f     OINT...Could NOT
    be58:	7720 6972 6574 7420 206f 6874 2065 4144      write to the DA
    be68:	2043 6147 6e69 6320 6e6f 7274 6c6f 656c     C Gain controlle
    be78:	2072 6e6f 4320 5241 4244 493a 4332 5b20     r on CARDB:I2C [
    be88:	6925 0d5d 000a 4143 4452 2042 7369 6120     %i]...CARDB is a
    be98:	5620 4249 4152 4554 0d4b 000a 4143 4452      VIBRATEK...CARD
    bea8:	2042 6168 2073 6562 6e65 5220 4d45 564f     B has been REMOV
    beb8:	4445 0a0d 2e00 2f2e 6168 2f6c 7273 2f63     ED...../hal/src/
    bec8:	6168 5f6c 6461 5f63 7973 636e 632e 2e00     hal_adc_sync.c..
    bed8:	2f2e 6168 2f6c 7273 2f63 6168 5f6c 6561     ./hal/src/hal_ae
    bee8:	5f73 7973 636e 632e 2e00 2f2e 6168 2f6c     s_sync.c.../hal/
    bef8:	7273 2f63 6168 5f6c 7263 5f63 7973 636e     src/hal_crc_sync
    bf08:	632e 2e00 2f2e 6168 2f6c 7273 2f63 6168     .c.../hal/src/ha
    bf18:	5f6c 6c66 7361 2e68 0063 2e2e 682f 6c61     l_flash.c.../hal
    bf28:	732f 6372 682f 6c61 695f 2e6f 0063 2e2e     /src/hal_io.c...
    bf38:	682f 6c61 732f 6372 682f 6c61 6d5f 6361     /hal/src/hal_mac
    bf48:	615f 7973 636e 632e 2e00 2f2e 6168 2f6c     _async.c.../hal/
    bf58:	7273 2f63 6168 5f6c 6873 5f61 7973 636e     src/hal_sha_sync
    bf68:	632e 2e00 2f2e 6168 2f6c 7273 2f63 6168     .c.../hal/src/ha
    bf78:	5f6c 6974 656d 2e72 0063 2e2e 682f 6c61     l_timer.c.../hal
    bf88:	732f 6372 682f 6c61 755f 6173 7472 615f     /src/hal_usart_a
    bf98:	7973 636e 632e 2e00 2f2e 6168 2f6c 7475     sync.c.../hal/ut
    bfa8:	6c69 2f73 7273 2f63 7475 6c69 5f73 696c     ils/src/utils_li
    bfb8:	7473 632e 2e00 2f2e 6168 2f6c 7475 6c69     st.c.../hal/util
    bfc8:	2f73 7273 2f63 7475 6c69 5f73 6972 676e     s/src/utils_ring
    bfd8:	7562 6666 7265 632e 0000                    buffer.c..

0000bfe2 <_adcs>:
    bfe2:	0000 0340 0018 0003 1800 0000 0000 0000     ..@.............
    bff2:	0000 0000 0000 2e2e 682f 6c70 612f 6364     ......../hpl/adc
    c002:	682f 6c70 615f 6364 632e 0000 0000          /hpl_adc.c....

0000c010 <_cfgs>:
    c010:	4500 0000 0000 1600 0000 0000 0000 0000     .E..............
	...
    c110:	2e2e 682f 6c70 6e2f 6d76 7463 6c72 682f     ../hpl/nvmctrl/h
    c120:	6c70 6e5f 6d76 7463 6c72 632e 0000 0000     pl_nvmctrl.c....
    c130:	3000 4000 3400 4000 2000 4101 4000 4101     .0.@.4.@. .A.@.A
    c140:	0000 4300 0400 4300 0800 4300 0c00 4300     ...C...C...C...C

0000c150 <_usarts>:
    c150:	0000 0000 0084 4010 0000 0003 0002 0070     .......@......p.
    c160:	f4bc 0000 0000 0000 0005 0000 0084 4010     ...............@
    c170:	0000 0003 0002 0070 f4bc 0000 0000 0000     ......p.........

0000c180 <_i2cms>:
	...

0000c198 <sercomspi_regs>:
    c198:	018c 0013 0000 0002 0000 0000 001d 01ff     ................
    c1a8:	2e04 2f2e 7068 2f6c 6573 6372 6d6f 682f     .../hpl/sercom/h
    c1b8:	6c70 735f 7265 6f63 2e6d 0063 3800 4000     pl_sercom.c..8.@
    c1c8:	3c00 4000 a000 4101 c000 4101 1400 4200     .<.@...A...A...B
    c1d8:	1800 4200 1400 4300 1800 4300               ...B...C...C

0000c1e4 <_tcs>:
    c1e4:	0000 006b 07d8 0000 0000 0001 002e 0000     ..k.............
    c1f4:	0000 0000 2e2e 682f 6c70 742f 2f63 7068     ....../hpl/tc/hp
    c204:	5f6c 6374 632e 0000                         l_tc.c..

0000c20c <_usb_ep_cfgs>:
    c20c:	71fc 2000 0000 0000 0040 0000 71bc 2000     .q. ....@....q. 
    c21c:	0000 0000 0040 0000 717c 2000 0000 0000     ....@...|q. ....
    c22c:	0040 0000 2e2e 682f 6c70 772f 7464 682f     @...../hpl/wdt/h
    c23c:	6c70 775f 7464 632e 2e00 2f2e 7068 2f6c     pl_wdt.c.../hpl/
    c24c:	6f70 7472 682f 6c70 675f 6970 5f6f 6162     port/hpl_gpio_ba
    c25c:	6573 682e 5500 4253 6920 696e 2f74 6e65     se.h.USB init/en
    c26c:	6261 656c 4520 5252 524f 2121 2121 2121     able ERROR!!!!!!
    c27c:	0d21 000a 7375 5f62 6e69 7469 2928 0a0d     !...usb_init()..
    c28c:	6300 6364 645f 7665 6369 5f65 6361 5f6d     .cdc_device_acm_
    c29c:	6e69 7469 2928 0a0d 6300 6364 6664 615f     init()...cdcdf_a
    c2ac:	6d63 725f 6765 7369 6574 5f72 6163 6c6c     cm_register_call
    c2bc:	6162 6b63 4328 4344 4644 415f 4d43 435f     back(CDCDF_ACM_C
    c2cc:	5f42 5453 5441 5f45 2c43 2820 5546 434e     B_STATE_C, (FUNC
    c2dc:	505f 5254 7529 6273 645f 7665 6369 5f65     _PTR)usb_device_
    c2ec:	6263 735f 6174 6574 635f 0d29 000a 6f43     cb_state_c)...Co
    c2fc:	666e 6769 7275 6e69 2067 6e61 2064 6863     nfiguring and ch
    c30c:	6365 696b 676e 7420 6568 5320 4950 4b20     ecking the SPI K
    c31c:	5a53 3738 3439 4520 6874 7265 656e 2074     SZ8794 Ethernet 
    c32c:	5753 5449 4843 7220 6765 7369 6574 7372     SWITCH registers
    c33c:	2e2e 0d2e 000a 535b 4950 4b5f 5a53 3738     ......[SPI_KSZ87
    c34c:	3439 465f 4d41 4c49 5f59 4449 205d 6f6e     94_FAMILY_ID] no
    c35c:	2074 6f63 7272 6365 0d74 000a 535b 4950     t correct...[SPI
    c36c:	4b5f 5a53 3738 3439 535f 4154 5452 6620     _KSZ8794_START f
    c37c:	7269 7473 205d 6f6e 2074 6f63 7272 6365     irst] not correc
    c38c:	0d74 000a 535b 4950 4b5f 5a53 3738 3439     t...[SPI_KSZ8794
    c39c:	475f 4f4c 4142 304c 205d 6f6e 2074 6f63     _GLOBAL0] not co
    c3ac:	7272 6365 0d74 000a 535b 4950 4b5f 5a53     rrect...[SPI_KSZ
    c3bc:	3738 3439 475f 4f4c 4142 314c 205d 6f6e     8794_GLOBAL1] no
    c3cc:	2074 6f63 7272 6365 0d74 000a 535b 4950     t correct...[SPI
    c3dc:	4b5f 5a53 3738 3439 475f 4f4c 4142 324c     _KSZ8794_GLOBAL2
    c3ec:	205d 6f6e 2074 6f63 7272 6365 0d74 000a     ] not correct...
    c3fc:	535b 4950 4b5f 5a53 3738 3439 475f 4f4c     [SPI_KSZ8794_GLO
    c40c:	4142 334c 205d 6f6e 2074 6f63 7272 6365     BAL3] not correc
    c41c:	0d74 000a 535b 4950 4b5f 5a53 3738 3439     t...[SPI_KSZ8794
    c42c:	475f 4f4c 4142 344c 205d 6f6e 2074 6f63     _GLOBAL4] not co
    c43c:	7272 6365 0d74 000a 535b 4950 4b5f 5a53     rrect...[SPI_KSZ
    c44c:	3738 3439 475f 4f4c 4142 354c 205d 6f6e     8794_GLOBAL5] no
    c45c:	2074 6f63 7272 6365 0d74 000a 535b 4950     t correct...[SPI
    c46c:	4b5f 5a53 3738 3439 475f 4f4c 4142 364c     _KSZ8794_GLOBAL6
    c47c:	205d 6f6e 2074 6f63 7272 6365 0d74 000a     ] not correct...
    c48c:	535b 4950 4b5f 5a53 3738 3439 475f 4f4c     [SPI_KSZ8794_GLO
    c49c:	4142 394c 205d 6f6e 2074 6f63 7272 6365     BAL9] not correc
    c4ac:	0d74 000a 535b 4950 4b5f 5a53 3738 3439     t...[SPI_KSZ8794
    c4bc:	475f 4f4c 4142 314c 5d30 6e20 746f 6320     _GLOBAL10] not c
    c4cc:	726f 6572 7463 0a0d 5b00 5053 5f49 534b     orrect...[SPI_KS
    c4dc:	385a 3937 5f34 4450 434d 5d31 6e20 746f     Z8794_PDMC1] not
    c4ec:	6320 726f 6572 7463 0a0d 5b00 5053 5f49      correct...[SPI_
    c4fc:	534b 385a 3937 5f34 4450 434d 5d32 6e20     KSZ8794_PDMC2] n
    c50c:	746f 6320 726f 6572 7463 0a0d 5b00 5053     ot correct...[SP
    c51c:	5f49 534b 385a 3937 5f34 4f50 5452 4331     I_KSZ8794_PORT1C
    c52c:	4e4f 5254 4c4f 5d30 6e20 746f 6320 726f     ONTROL0] not cor
    c53c:	6572 7463 0a0d 5b00 5053 5f49 534b 385a     rect...[SPI_KSZ8
    c54c:	3937 5f34 4f50 5452 4332 4e4f 5254 4c4f     794_PORT2CONTROL
    c55c:	5d30 6e20 746f 6320 726f 6572 7463 0a0d     0] not correct..
    c56c:	5b00 5053 5f49 534b 385a 3937 5f34 4f50     .[SPI_KSZ8794_PO
    c57c:	5452 4333 4e4f 5254 4c4f 5d30 6e20 746f     RT3CONTROL0] not
    c58c:	6320 726f 6572 7463 0a0d 5b00 5053 5f49      correct...[SPI_
    c59c:	534b 385a 3937 5f34 4f50 5452 4334 4e4f     KSZ8794_PORT4CON
    c5ac:	5254 4c4f 5d30 6e20 746f 6320 726f 6572     TROL0] not corre
    c5bc:	7463 0a0d 5b00 5053 5f49 534b 385a 3937     ct...[SPI_KSZ879
    c5cc:	5f34 4f50 5452 4331 4e4f 5254 4c4f 5d31     4_PORT1CONTROL1]
    c5dc:	6e20 746f 6320 726f 6572 7463 0a0d 5b00      not correct...[
    c5ec:	5053 5f49 534b 385a 3937 5f34 4f50 5452     SPI_KSZ8794_PORT
    c5fc:	4332 4e4f 5254 4c4f 5d31 6e20 746f 6320     2CONTROL1] not c
    c60c:	726f 6572 7463 0a0d 5b00 5053 5f49 534b     orrect...[SPI_KS
    c61c:	385a 3937 5f34 4f50 5452 4333 4e4f 5254     Z8794_PORT3CONTR
    c62c:	4c4f 5d31 6e20 746f 6320 726f 6572 7463     OL1] not correct
    c63c:	0a0d 5b00 5053 5f49 534b 385a 3937 5f34     ...[SPI_KSZ8794_
    c64c:	4f50 5452 4334 4e4f 5254 4c4f 5d31 6e20     PORT4CONTROL1] n
    c65c:	746f 6320 726f 6572 7463 0a0d 5b00 5053     ot correct...[SP
    c66c:	5f49 534b 385a 3937 5f34 4f50 5452 4331     I_KSZ8794_PORT1C
    c67c:	4e4f 5254 4c4f 5d32 6e20 746f 6320 726f     ONTROL2] not cor
    c68c:	6572 7463 0a0d 5b00 5053 5f49 534b 385a     rect...[SPI_KSZ8
    c69c:	3937 5f34 4f50 5452 4332 4e4f 5254 4c4f     794_PORT2CONTROL
    c6ac:	5d32 6e20 746f 6320 726f 6572 7463 0a0d     2] not correct..
    c6bc:	5b00 5053 5f49 534b 385a 3937 5f34 4f50     .[SPI_KSZ8794_PO
    c6cc:	5452 4334 4e4f 5254 4c4f 5d32 6e20 746f     RT4CONTROL2] not
    c6dc:	6320 726f 6572 7463 0a0d 5b00 5053 5f49      correct...[SPI_
    c6ec:	534b 385a 3937 5f34 4f50 5452 4331 4e4f     KSZ8794_PORT1CON
    c6fc:	5254 4c4f 5d33 6e20 746f 6320 726f 6572     TROL3] not corre
    c70c:	7463 0a0d 5b00 5053 5f49 534b 385a 3937     ct...[SPI_KSZ879
    c71c:	5f34 4f50 5452 4332 4e4f 5254 4c4f 5d33     4_PORT2CONTROL3]
    c72c:	6e20 746f 6320 726f 6572 7463 0a0d 5b00      not correct...[
    c73c:	5053 5f49 534b 385a 3937 5f34 4f50 5452     SPI_KSZ8794_PORT
    c74c:	4333 4e4f 5254 4c4f 5d33 6e20 746f 6320     3CONTROL3] not c
    c75c:	726f 6572 7463 0a0d 5b00 5053 5f49 534b     orrect...[SPI_KS
    c76c:	385a 3937 5f34 4f50 5452 4334 4e4f 5254     Z8794_PORT4CONTR
    c77c:	4c4f 5d33 6e20 746f 6320 726f 6572 7463     OL3] not correct
    c78c:	0a0d 5b00 5053 5f49 534b 385a 3937 5f34     ...[SPI_KSZ8794_
    c79c:	4f50 5452 4331 4e4f 5254 4c4f 5d34 6e20     PORT1CONTROL4] n
    c7ac:	746f 6320 726f 6572 7463 0a0d 5b00 5053     ot correct...[SP
    c7bc:	5f49 534b 385a 3937 5f34 4f50 5452 4332     I_KSZ8794_PORT2C
    c7cc:	4e4f 5254 4c4f 5d34 6e20 746f 6320 726f     ONTROL4] not cor
    c7dc:	6572 7463 0a0d 5b00 5053 5f49 534b 385a     rect...[SPI_KSZ8
    c7ec:	3937 5f34 4f50 5452 4333 4e4f 5254 4c4f     794_PORT3CONTROL
    c7fc:	5d34 6e20 746f 6320 726f 6572 7463 0a0d     4] not correct..
    c80c:	5b00 5053 5f49 534b 385a 3937 5f34 4f50     .[SPI_KSZ8794_PO
    c81c:	5452 4334 4e4f 5254 4c4f 5d34 6e20 746f     RT4CONTROL4] not
    c82c:	6320 726f 6572 7463 0a0d 5b00 5053 5f49      correct...[SPI_
    c83c:	534b 385a 3937 5f34 4f50 5452 4331 4e4f     KSZ8794_PORT1CON
    c84c:	5254 4c4f 5d35 6e20 746f 6320 726f 6572     TROL5] not corre
    c85c:	7463 0a0d 5b00 5053 5f49 534b 385a 3937     ct...[SPI_KSZ879
    c86c:	5f34 4f50 5452 4332 4e4f 5254 4c4f 5d35     4_PORT2CONTROL5]
    c87c:	6e20 746f 6320 726f 6572 7463 0a0d 5b00      not correct...[
    c88c:	5053 5f49 534b 385a 3937 5f34 4f50 5452     SPI_KSZ8794_PORT
    c89c:	4333 4e4f 5254 4c4f 5d35 6e20 746f 6320     3CONTROL5] not c
    c8ac:	726f 6572 7463 0a0d 5b00 5053 5f49 534b     orrect...[SPI_KS
    c8bc:	385a 3937 5f34 4f50 5452 4334 4e4f 5254     Z8794_PORT4CONTR
    c8cc:	4c4f 5d35 6e20 746f 6320 726f 6572 7463     OL5] not correct
    c8dc:	0a0d 5b00 5053 5f49 534b 385a 3937 5f34     ...[SPI_KSZ8794_
    c8ec:	4f50 5452 4334 4e4f 5254 4c4f 5d36 6e20     PORT4CONTROL6] n
    c8fc:	746f 6320 726f 6572 7463 0a0d 5b00 5053     ot correct...[SP
    c90c:	5f49 534b 385a 3937 5f34 4f50 5452 4331     I_KSZ8794_PORT1C
    c91c:	4e4f 5254 4c4f 5d37 6e20 746f 6320 726f     ONTROL7] not cor
    c92c:	6572 7463 0a0d 5b00 5053 5f49 534b 385a     rect...[SPI_KSZ8
    c93c:	3937 5f34 4f50 5452 4332 4e4f 5254 4c4f     794_PORT2CONTROL
    c94c:	5d37 6e20 746f 6320 726f 6572 7463 0a0d     7] not correct..
    c95c:	5b00 5053 5f49 534b 385a 3937 5f34 4f50     .[SPI_KSZ8794_PO
    c96c:	5452 4333 4e4f 5254 4c4f 5d37 6e20 746f     RT3CONTROL7] not
    c97c:	6320 726f 6572 7463 0a0d 5b00 5053 5f49      correct...[SPI_
    c98c:	534b 385a 3937 5f34 4f50 5452 4331 4e4f     KSZ8794_PORT1CON
    c99c:	5254 4c4f 5d38 6e20 746f 6320 726f 6572     TROL8] not corre
    c9ac:	7463 0a0d 5b00 5053 5f49 534b 385a 3937     ct...[SPI_KSZ879
    c9bc:	5f34 4f50 5452 4332 4e4f 5254 4c4f 5d38     4_PORT2CONTROL8]
    c9cc:	6e20 746f 6320 726f 6572 7463 0a0d 5b00      not correct...[
    c9dc:	5053 5f49 534b 385a 3937 5f34 4f50 5452     SPI_KSZ8794_PORT
    c9ec:	4333 4e4f 5254 4c4f 5d38 6e20 746f 6320     3CONTROL8] not c
    c9fc:	726f 6572 7463 0a0d 5b00 5053 5f49 534b     orrect...[SPI_KS
    ca0c:	385a 3937 5f34 4f50 5452 4c31 4e49 4d4b     Z8794_PORT1LINKM
    ca1c:	5d44 6e20 746f 6320 726f 6572 7463 0a0d     D] not correct..
    ca2c:	5b00 5053 5f49 534b 385a 3937 5f34 4f50     .[SPI_KSZ8794_PO
    ca3c:	5452 4c32 4e49 4d4b 5d44 6e20 746f 6320     RT2LINKMD] not c
    ca4c:	726f 6572 7463 0a0d 5b00 5053 5f49 534b     orrect...[SPI_KS
    ca5c:	385a 3937 5f34 4f50 5452 4c33 4e49 4d4b     Z8794_PORT3LINKM
    ca6c:	5d44 6e20 746f 6320 726f 6572 7463 0a0d     D] not correct..
    ca7c:	5b00 5053 5f49 534b 385a 3937 5f34 4f50     .[SPI_KSZ8794_PO
    ca8c:	5452 4331 4e4f 5254 4c4f 5d39 6e20 746f     RT1CONTROL9] not
    ca9c:	6320 726f 6572 7463 0a0d 5b00 5053 5f49      correct...[SPI_
    caac:	534b 385a 3937 5f34 4f50 5452 4332 4e4f     KSZ8794_PORT2CON
    cabc:	5254 4c4f 5d39 6e20 746f 6320 726f 6572     TROL9] not corre
    cacc:	7463 0a0d 5b00 5053 5f49 534b 385a 3937     ct...[SPI_KSZ879
    cadc:	5f34 4f50 5452 4333 4e4f 5254 4c4f 5d39     4_PORT3CONTROL9]
    caec:	6e20 746f 6320 726f 6572 7463 0a0d 5b00      not correct...[
    cafc:	5053 5f49 534b 385a 3937 5f34 4f50 5452     SPI_KSZ8794_PORT
    cb0c:	4331 4e4f 5254 4c4f 3031 205d 6f6e 2074     1CONTROL10] not 
    cb1c:	6f63 7272 6365 0d74 000a 535b 4950 4b5f     correct...[SPI_K
    cb2c:	5a53 3738 3439 505f 524f 3254 4f43 544e     SZ8794_PORT2CONT
    cb3c:	4f52 314c 5d30 6e20 746f 6320 726f 6572     ROL10] not corre
    cb4c:	7463 0a0d 5b00 5053 5f49 534b 385a 3937     ct...[SPI_KSZ879
    cb5c:	5f34 4f50 5452 4333 4e4f 5254 4c4f 3031     4_PORT3CONTROL10
    cb6c:	205d 6f6e 2074 6f63 7272 6365 0d74 000a     ] not correct...
    cb7c:	535b 4950 4b5f 5a53 3738 3439 505f 524f     [SPI_KSZ8794_POR
    cb8c:	3254 4f43 544e 4f52 324c 5d30 6e20 746f     T2CONTROL20] not
    cb9c:	6320 726f 6572 7463 0a0d 5b00 5053 5f49      correct...[SPI_
    cbac:	534b 385a 3937 5f34 4f50 5452 4331 4e4f     KSZ8794_PORT1CON
    cbbc:	5254 4c4f 3231 205d 6f6e 2074 6f63 7272     TROL12] not corr
    cbcc:	6365 0d74 000a 535b 4950 4b5f 5a53 3738     ect...[SPI_KSZ87
    cbdc:	3439 505f 524f 3254 4f43 544e 4f52 314c     94_PORT2CONTROL1
    cbec:	5d32 6e20 746f 6320 726f 6572 7463 0a0d     2] not correct..
    cbfc:	5b00 5053 5f49 534b 385a 3937 5f34 4f50     .[SPI_KSZ8794_PO
    cc0c:	5452 4333 4e4f 5254 4c4f 3231 205d 6f6e     RT3CONTROL12] no
    cc1c:	2074 6f63 7272 6365 0d74 000a 535b 4950     t correct...[SPI
    cc2c:	4b5f 5a53 3738 3439 505f 524f 3454 4f43     _KSZ8794_PORT4CO
    cc3c:	544e 4f52 314c 5d32 6e20 746f 6320 726f     NTROL12] not cor
    cc4c:	6572 7463 0a0d 5b00 5053 5f49 534b 385a     rect...[SPI_KSZ8
    cc5c:	3937 5f34 4f50 5452 4331 4e4f 5254 4c4f     794_PORT1CONTROL
    cc6c:	3331 205d 6f6e 2074 6f63 7272 6365 0d74     13] not correct.
    cc7c:	000a 535b 4950 4b5f 5a53 3738 3439 505f     ..[SPI_KSZ8794_P
    cc8c:	524f 3254 4f43 544e 4f52 314c 5d33 6e20     ORT2CONTROL13] n
    cc9c:	746f 6320 726f 6572 7463 0a0d 5b00 5053     ot correct...[SP
    ccac:	5f49 534b 385a 3937 5f34 4f50 5452 4333     I_KSZ8794_PORT3C
    ccbc:	4e4f 5254 4c4f 3331 205d 6f6e 2074 6f63     ONTROL13] not co
    cccc:	7272 6365 0d74 000a 535b 4950 4b5f 5a53     rrect...[SPI_KSZ
    ccdc:	3738 3439 505f 524f 3454 4f43 544e 4f52     8794_PORT4CONTRO
    ccec:	314c 5d33 6e20 746f 6320 726f 6572 7463     L13] not correct
    ccfc:	0a0d 5b00 5053 5f49 534b 385a 3937 5f34     ...[SPI_KSZ8794_
    cd0c:	4f50 5452 4331 4e4f 5254 4c4f 3431 205d     PORT1CONTROL14] 
    cd1c:	6f6e 2074 6f63 7272 6365 0d74 000a 535b     not correct...[S
    cd2c:	4950 4b5f 5a53 3738 3439 505f 524f 3254     PI_KSZ8794_PORT2
    cd3c:	4f43 544e 4f52 314c 5d34 6e20 746f 6320     CONTROL14] not c
    cd4c:	726f 6572 7463 0a0d 5b00 5053 5f49 534b     orrect...[SPI_KS
    cd5c:	385a 3937 5f34 4f50 5452 4333 4e4f 5254     Z8794_PORT3CONTR
    cd6c:	4c4f 3431 205d 6f6e 2074 6f63 7272 6365     OL14] not correc
    cd7c:	0d74 000a 535b 4950 4b5f 5a53 3738 3439     t...[SPI_KSZ8794
    cd8c:	505f 524f 3454 4f43 544e 4f52 314c 5d34     _PORT4CONTROL14]
    cd9c:	6e20 746f 6320 726f 6572 7463 0a0d 5b00      not correct...[
    cdac:	5053 5f49 534b 385a 3937 5f34 4f50 5452     SPI_KSZ8794_PORT
    cdbc:	4331 4e4f 5254 4c4f 3531 205d 6f6e 2074     1CONTROL15] not 
    cdcc:	6f63 7272 6365 0d74 000a 535b 4950 4b5f     correct...[SPI_K
    cddc:	5a53 3738 3439 505f 524f 3254 4f43 544e     SZ8794_PORT2CONT
    cdec:	4f52 314c 5d35 6e20 746f 6320 726f 6572     ROL15] not corre
    cdfc:	7463 0a0d 5b00 5053 5f49 534b 385a 3937     ct...[SPI_KSZ879
    ce0c:	5f34 4f50 5452 4333 4e4f 5254 4c4f 3531     4_PORT3CONTROL15
    ce1c:	205d 6f6e 2074 6f63 7272 6365 0d74 000a     ] not correct...
    ce2c:	535b 4950 4b5f 5a53 3738 3439 505f 524f     [SPI_KSZ8794_POR
    ce3c:	3454 4f43 544e 4f52 314c 5d35 6e20 746f     T4CONTROL15] not
    ce4c:	6320 726f 6572 7463 0a0d 5b00 5053 5f49      correct...[SPI_
    ce5c:	534b 385a 3937 5f34 4f50 5452 4331 4e4f     KSZ8794_PORT1CON
    ce6c:	5254 4c4f 3631 205d 6f6e 2074 6f63 7272     TROL16] not corr
    ce7c:	6365 0d74 000a 535b 4950 4b5f 5a53 3738     ect...[SPI_KSZ87
    ce8c:	3439 505f 524f 3254 4f43 544e 4f52 314c     94_PORT2CONTROL1
    ce9c:	5d36 6e20 746f 6320 726f 6572 7463 0a0d     6] not correct..
    ceac:	5b00 5053 5f49 534b 385a 3937 5f34 4f50     .[SPI_KSZ8794_PO
    cebc:	5452 4333 4e4f 5254 4c4f 3631 205d 6f6e     RT3CONTROL16] no
    cecc:	2074 6f63 7272 6365 0d74 000a 535b 4950     t correct...[SPI
    cedc:	4b5f 5a53 3738 3439 505f 524f 3454 4f43     _KSZ8794_PORT4CO
    ceec:	544e 4f52 314c 5d36 6e20 746f 6320 726f     NTROL16] not cor
    cefc:	6572 7463 0a0d 5b00 5053 5f49 534b 385a     rect...[SPI_KSZ8
    cf0c:	3937 5f34 4f50 5452 4331 4e4f 5254 4c4f     794_PORT1CONTROL
    cf1c:	3731 205d 6f6e 2074 6f63 7272 6365 0d74     17] not correct.
    cf2c:	000a 535b 4950 4b5f 5a53 3738 3439 505f     ..[SPI_KSZ8794_P
    cf3c:	524f 3254 4f43 544e 4f52 314c 5d37 6e20     ORT2CONTROL17] n
    cf4c:	746f 6320 726f 6572 7463 0a0d 5b00 5053     ot correct...[SP
    cf5c:	5f49 534b 385a 3937 5f34 4f50 5452 4333     I_KSZ8794_PORT3C
    cf6c:	4e4f 5254 4c4f 3731 205d 6f6e 2074 6f63     ONTROL17] not co
    cf7c:	7272 6365 0d74 000a 535b 4950 4b5f 5a53     rrect...[SPI_KSZ
    cf8c:	3738 3439 505f 524f 3454 4f43 544e 4f52     8794_PORT4CONTRO
    cf9c:	314c 5d37 6e20 746f 6320 726f 6572 7463     L17] not correct
    cfac:	0a0d 5b00 5053 5f49 534b 385a 3937 5f34     ...[SPI_KSZ8794_
    cfbc:	5453 5241 2054 6966 616e 5d6c 6e20 746f     START final] not
    cfcc:	6320 726f 6572 7463 0a0d 4d00 4341 6120      correct...MAC a
    cfdc:	6464 6572 7373 6120 646e 4920 2050 6373     ddress and IP sc
    cfec:	6568 656d 6e20 746f 6920 696e 6974 6c61     heme not initial
    cffc:	7a69 6465 6120 2073 6874 7265 2065 7369     ized as there is
    d00c:	6e20 206f 495b 5d44 7320 7465 2e2e 0d2e      no [ID] set....
    d01c:	000a 754d 746c 5369 6e65 6573 5b20 6e69     ..MultiSense [in
    d02c:	7469 4d20 4341 492f 2050 6176 756c 7365     it MAC/IP values
    d03c:	205d 7825 253a 3a78 7825 253a 3a78 7825     ] %x:%x:%x:%x:%x
    d04c:	253a 2078 6425 252e 2e64 6425 252e 0d64     :%x %d.%d.%d.%d.
    d05c:	000a 614d 6e69 5520 5044 7320 636f 656b     ..Main UDP socke
    d06c:	2074 7263 6165 6574 2e64 2e2e 0a0d 4d00     t created......M
    d07c:	6961 206e 4455 2050 6f73 6b63 7465 4520     ain UDP socket E
    d08c:	5252 524f 2121 2121 2121 0d21 000a 6143     RROR!!!!!!!...Ca
    d09c:	6472 5b20 5d41 5520 5044 7320 636f 656b     rd [A] UDP socke
    d0ac:	2074 7263 6165 6574 2e64 2e2e 0a0d 4300     t created......C
    d0bc:	7261 2064 415b 205d 4455 2050 6f73 6b63     ard [A] UDP sock
    d0cc:	7465 4520 5252 524f 2121 2121 2121 0d21     et ERROR!!!!!!!.
    d0dc:	000a 6143 6472 5b20 5d42 5520 5044 7320     ..Card [B] UDP s
    d0ec:	636f 656b 2074 7263 6165 6574 2e64 2e2e     ocket created...
    d0fc:	0a0d 4300 7261 2064 425b 205d 4455 2050     ...Card [B] UDP 
    d10c:	6f73 6b63 7465 4520 5252 524f 2121 2121     socket ERROR!!!!
    d11c:	2121 0d21 000a 6952 676e 4d20 6e61 6761     !!!...Ring Manag
    d12c:	6d65 6e65 2074 4455 2050 6f73 6b63 7465     ement UDP socket
    d13c:	6320 6572 7461 6465 2e2e 0d2e 000a 6952      created......Ri
    d14c:	676e 4d20 6e61 6761 6d65 6e65 2074 4455     ng Management UD
    d15c:	2050 6f73 6b63 7465 4520 5252 524f 2121     P socket ERROR!!
    d16c:	2121 2121 0d21 000a 754d 746c 5369 6e65     !!!!!...MultiSen
    d17c:	6573 5b20 6f63 666e 6769 7275 7461 6f69     se [configuratio
    d18c:	206e 5245 4f52 2052 4552 4441 4e49 5d47     n ERROR READING]
    d19c:	0a0d 4d00 6c75 6974 6553 736e 2065 635b     ...MultiSense [c
    d1ac:	6e6f 6966 7567 6172 6974 6e6f 4920 564e     onfiguration INV
    d1bc:	4c41 4449 0d5d 000a 554d 544c 5349 4e45     ALID]...MULTISEN
    d1cc:	4553 4e20 4545 5344 4320 4e4f 4946 5547     SE NEEDS CONFIGU
    d1dc:	4952 474e 2e2e 002e 754d 746c 5369 6e65     RING....MultiSen
    d1ec:	6573 5b20 6f63 666e 6769 7275 7461 6f69     se [configuratio
    d1fc:	206e 4f46 4d52 5441 4554 5d44 0a0d 4d00     n FORMATTED]...M
    d20c:	6c75 6974 6553 736e 2065 635b 6e6f 6966     ultiSense [confi
    d21c:	7567 6172 6974 6e6f 4520 5252 524f 5720     guration ERROR W
    d22c:	4952 4954 474e 0d5d 000a 754d 746c 5369     RITING]...MultiS
    d23c:	6e65 6573 5b20 6f63 666e 6769 7275 7461     ense [configurat
    d24c:	6f69 206e 5257 5449 4554 5d4e 0a0d 4d00     ion WRITTEN]...M
    d25c:	6c75 6974 6553 736e 2065 555b 4450 5441     ultiSense [UPDAT
    d26c:	4445 3c20 4449 203e 6f63 666e 6769 7275     ED <ID> configur
    d27c:	7461 6f69 206e 5257 5449 4554 5d4e 0a0d     ation WRITTEN]..
    d28c:	4700 6f6c 6162 206c 6573 7474 6e69 7367     .Global settings
    d29c:	7020 6361 656b 2074 6572 6563 7669 6465      packet received
    d2ac:	2e2e 0d2e 000a 6143 6472 2041 694d 696e     ......CardA Mini
    d2bc:	492d 204f 6170 6b63 7465 7220 6365 6965     -IO packet recei
    d2cc:	6576 2e64 2e2e 0a0d 4300 7261 4264 4d20     ved......CardB M
    d2dc:	6e69 2d69 4f49 7020 6361 656b 2074 6572     ini-IO packet re
    d2ec:	6563 7669 6465 2e2e 0d2e 000a 7242 616f     ceived......Broa
    d2fc:	6364 7361 2074 6154 6c62 2065 465b 554c     dcast Table [FLU
    d30c:	4853 205d 4455 2050 6170 6b63 7465 6120     SH] UDP packet a
    d31c:	7272 7669 6465 2e2e 0d2e 000a 6148 6472     rrived......Hard
    d32c:	6177 6572 7020 6361 656b 2074 6573 646e     ware packet send
    d33c:	2e2e 0d2e 000a 6143 6472 2041 694d 696e     ......CardA Mini
    d34c:	492d 204f 6170 6b63 7465 7320 6e65 2e64     -IO packet send.
    d35c:	2e2e 0a0d 4300 7261 4164 5620 6269 6172     .....CardA Vibra
    d36c:	6554 206b 6170 6b63 7465 7320 6e65 2e64     Tek packet send.
    d37c:	2e2e 0a0d 4300 7261 4264 4d20 6e69 2d69     .....CardB Mini-
    d38c:	4f49 7020 6361 656b 2074 6573 646e 2e2e     IO packet send..
    d39c:	0d2e 000a 6143 6472 2042 6956 7262 5461     ....CardB VibraT
    d3ac:	6b65 7020 6361 656b 2074 6573 646e 2e2e     ek packet send..
    d3bc:	0d2e 000a 6f54 6f70 6f6c 7967 7520 6470     ....Topology upd
    d3cc:	7461 2065 6170 6b63 7465 7320 6e65 2e64     ate packet send.
    d3dc:	2e2e 0a0d 4200 5341 5345 4154 4954 4e4f     .....BASESTATION
    d3ec:	5000 5341 2d53 4854 4f52 4755 0048 5055     .PASS-THROUGH.UP
    d3fc:	4c00 4e49 204b 4b4f 4c00 4e49 204b 4f44     .LINK OK.LINK DO
    d40c:	4e57 5600 6269 6172 6f50 6e69 0074 4f4e     WN.VibraPoint.NO
    d41c:	2054 4946 5454 4445 5600 6269 6172 6554     T FITTED.VibraTe
    d42c:	006b 614d 6978 4920 004f 694d 696e 4920     k.Maxi IO.Mini I
    d43c:	004f 6e55 6e6b 776f 006e 2650 0045 2f4e     O.Unknown.P&E.N/
    d44c:	0041 5242 4b4f 4e45 4c00 4f4f 0050 5445     A.BROKEN.LOOP.ET
    d45c:	4548 4e52 5445 203a 625b 6f72 6461 6163     HERNET: [broadca
    d46c:	7473 7320 6f74 6d72 205d 2121 2121 2121     st storm] !!!!!!
    d47c:	2121 2121 2121 2121 2121 2121 2121 2121     !!!!!!!!!!!!!!!!
    d48c:	2121 2121 2121 2121 2121 2121 2121 2121     !!!!!!!!!!!!!!!!
    d49c:	2121 2121 2121 2121 2121 2121 2121 0d21     !!!!!!!!!!!!!!!.
    d4ac:	000a 7257 7469 2065 4441 2043 6167 6e69     ..Write ADC gain
    d4bc:	7320 7465 6974 676e 2073 6f66 2072 6956      settings for Vi
    d4cc:	7262 5461 6b65 4320 7261 4164 0a0d 5700     braTek CardA...W
    d4dc:	6972 6574 4120 4344 6720 6961 206e 6573     rite ADC gain se
    d4ec:	7474 6e69 7367 6620 726f 5620 6269 6172     ttings for Vibra
    d4fc:	6554 206b 6143 6472 0d42 000a 6f43 6c75     Tek CardB...Coul
    d50c:	2064 4f4e 2054 6572 6461 6620 6f72 206d     d NOT read from 
    d51c:	6874 2065 694d 696e 492d 204f 4441 2043     the Mini-IO ADC 
    d52c:	6e6f 4320 5241 4144 493a 4332 5b20 6925     on CARDA:I2C [%i
    d53c:	0d5d 000a 6f43 6c75 2064 4f4e 2054 7277     ]...Could NOT wr
    d54c:	7469 2065 6f74 7420 6568 4d20 6e69 2d69     ite to the Mini-
    d55c:	4f49 4120 4344 6320 6e6f 7274 6c6f 656c     IO ADC controlle
    d56c:	2072 6e6f 4320 5241 4144 493a 4332 5b20     r on CARDA:I2C [
    d57c:	6925 0d5d 000a 6f43 6c75 2064 4f4e 2054     %i]...Could NOT 
    d58c:	7277 7469 2065 6f74 7420 6568 4d20 6e69     write to the Min
    d59c:	2d69 4f49 4520 5058 4e41 4544 2052 6e6f     i-IO EXPANDER on
    d5ac:	4320 5241 4144 493a 4332 5b20 6925 0d5d      CARDA:I2C [%i].
    d5bc:	000a 6f43 6c75 2064 4f4e 2054 6572 6461     ..Could NOT read
    d5cc:	6620 6f72 206d 6874 2065 694d 696e 492d      from the Mini-I
    d5dc:	204f 5845 4150 444e 5245 6f20 206e 4143     O EXPANDER on CA
    d5ec:	4452 3a41 3249 2043 255b 5d69 0a0d 4300     RDA:I2C [%i]...C
    d5fc:	756f 646c 4e20 544f 7220 6165 2064 7266     ould NOT read fr
    d60c:	6d6f 7420 6568 4d20 6e69 2d69 4f49 4120     om the Mini-IO A
    d61c:	4344 6f20 206e 4143 4452 3a42 3249 2043     DC on CARDB:I2C 
    d62c:	255b 5d69 0a0d 4300 756f 646c 4e20 544f     [%i]...Could NOT
    d63c:	7720 6972 6574 7420 206f 6874 2065 694d      write to the Mi
    d64c:	696e 492d 204f 4441 2043 6f63 746e 6f72     ni-IO ADC contro
    d65c:	6c6c 7265 6f20 206e 4143 4452 3a42 3249     ller on CARDB:I2
    d66c:	2043 255b 5d69 0a0d 4300 756f 646c 4e20     C [%i]...Could N
    d67c:	544f 7720 6972 6574 7420 206f 6874 2065     OT write to the 
    d68c:	694d 696e 492d 204f 5845 4150 444e 5245     Mini-IO EXPANDER
    d69c:	6f20 206e 4143 4452 3a42 3249 2043 255b      on CARDB:I2C [%
    d6ac:	5d69 0a0d 4300 756f 646c 4e20 544f 7220     i]...Could NOT r
    d6bc:	6165 2064 7266 6d6f 7420 6568 4d20 6e69     ead from the Min
    d6cc:	2d69 4f49 4520 5058 4e41 4544 2052 6e6f     i-IO EXPANDER on
    d6dc:	4320 5241 4244 493a 4332 5b20 6925 0d5d      CARDB:I2C [%i].
    d6ec:	000a 0a0d 202e 202e 202e 202e 202e 202e     ..... . . . . . 
    d6fc:	202e 202e 202e 202e 202e 202e 202e 202e     . . . . . . . . 
    d70c:	202e 202e 202e 202e 202e 202e 202e 202e     . . . . . . . . 
    d71c:	202e 202e 202e 202e 202e 202e 202e 202e     . . . . . . . . 
    d72c:	202e 202e 202e 202e 202e 0d2e 000a 433c     . . . . . ....<C
    d73c:	494c 4420 4245 4755 203e 525b 4245 4f4f     LI DEBUG> [REBOO
    d74c:	5d54 6320 6d6f 616d 646e 0a0d 2e00 2e20     T] command.... .
    d75c:	2e20 2e20 2e20 2e20 2e20 2e20 2e20 2e20      . . . . . . . .
    d76c:	2e20 2e20 2e20 2e20 2e20 2e20 2e20 2e20      . . . . . . . .
    d77c:	2e20 2e20 2e20 2e20 2e20 2e20 2e20 2e20      . . . . . . . .
    d78c:	2e20 2e20 2e20 2e20 2e20 2e20 2e20 2e20      . . . . . . . .
    d79c:	2e20 2e20 0a0d 0a0d 3c00 4c43 2049 4544      . ......<CLI DE
    d7ac:	5542 3e47 5b20 4f43 464e 4749 5255 5441     BUG> [CONFIGURAT
    d7bc:	4f49 204e 4544 4146 4c55 5d54 6320 6d6f     ION DEFAULT] com
    d7cc:	616d 646e 0a0d 3c00 4c43 2049 4544 5542     mand...<CLI DEBU
    d7dc:	3e47 5b20 4449 5220 5345 5445 205d 6f63     G> [ID RESET] co
    d7ec:	6d6d 6e61 0d64 000a 6552 6f62 746f 6e69     mmand...Rebootin
    d7fc:	2e67 2e2e 0a0d 3c00 4c43 2049 4544 5542     g......<CLI DEBU
    d80c:	3e47 5b20 4142 4553 5453 5441 4f49 5d4e     G> [BASESTATION]
    d81c:	6320 6d6f 616d 646e 0a0d 3c00 4c43 2049      command...<CLI 
    d82c:	4544 5542 3e47 5b20 4150 5353 5420 5248     DEBUG> [PASS THR
    d83c:	554f 4847 205d 6f63 6d6d 6e61 0d64 000a     OUGH] command...
    d84c:	0a0d 202e 202e 202e 202e 202e 202e 202e     ... . . . . . . 
    d85c:	202e 202e 202e 202e 202e 202e 202e 202e     . . . . . . . . 
    d86c:	202e 202e 202e 202e 202e 202e 202e 202e     . . . . . . . . 
    d87c:	202e 202e 202e 202e 202e 202e 202e 202e     . . . . . . . . 
    d88c:	202e 202e 202e 202e 002e 433c 494c 4420     . . . . ..<CLI D
    d89c:	4245 4755 203e 4c5b 5649 2045 4f42 5241     EBUG> [LIVE BOAR
    d8ac:	2044 5250 4e49 5d54 6320 6d6f 616d 646e     D PRINT] command
    d8bc:	3c00 4c43 2049 4544 5542 3e47 4920 2044     .<CLI DEBUG> ID 
    d8cc:	2020 2020 2020 2020 2020 2020 2020 203d                   = 
    d8dc:	6425 3c00 4c43 2049 4544 5542 3e47 4e20     %d.<CLI DEBUG> N
    d8ec:	6d61 2065 2020 2020 2020 2020 2020 2020     ame             
    d8fc:	203d 7325 0d00 0d0d 0d0d 000a 433c 494c     = %s........<CLI
    d90c:	4420 4245 4755 203e 6167 6e69 2041 2020      DEBUG> gainA   
    d91c:	2020 2020 2020 2020 3d20 2520 0064 433c              = %d.<C
    d92c:	494c 4420 4245 4755 203e 6167 6e69 2042     LI DEBUG> gainB 
    d93c:	2020 2020 2020 2020 2020 3d20 2520 0064                = %d.
    d94c:	433c 494c 4420 4245 4755 203e 6f4d 6564     <CLI DEBUG> Mode
    d95c:	2020 2020 2020 2020 2020 2020 3d20 2520                  = %
    d96c:	0073 433c 494c 4420 4245 4755 203e 6157     s.<CLI DEBUG> Wa
    d97c:	6574 3172 2020 2020 2020 2020 2020 3d20     ter1           =
    d98c:	2520 0064 433c 494c 4420 4245 4755 203e      %d.<CLI DEBUG> 
    d99c:	6157 6574 3272 2020 2020 2020 2020 2020     Water2          
    d9ac:	3d20 2520 0064 433c 494c 4420 4245 4755      = %d.<CLI DEBUG
    d9bc:	203e 5648 2020 2020 2020 2020 2020 2020     > HV            
    d9cc:	2020 3d20 2520 0064 433c 494c 4420 4245        = %d.<CLI DEB
    d9dc:	4755 203e 6554 706d 2020 2020 2020 2020     UG> Temp        
    d9ec:	2020 2020 3d20 4520 5252 524f 3c00 4c43          = ERROR.<CL
    d9fc:	2049 4544 5542 3e47 5420 6d65 2070 2020     I DEBUG> Temp   
    da0c:	2020 2020 2020 2020 2020 203d 6425 0043               = %dC.
    da1c:	433c 494c 4420 4245 4755 203e 6554 706d     <CLI DEBUG> Temp
    da2c:	2020 2020 2020 2020 2020 2020 3d20 2d20                  = -
    da3c:	6425 0043 433c 494c 4420 4245 4755 203e     %dC.<CLI DEBUG> 
    da4c:	7548 696d 6964 7974 2020 2020 2020 2020     Humidity        
    da5c:	3d20 4520 5252 524f 3c00 4c43 2049 4544      = ERROR.<CLI DE
    da6c:	5542 3e47 4820 6d75 6469 7469 2079 2020     BUG> Humidity   
    da7c:	2020 2020 2020 203d 6425 6325 3c00 4c43           = %d%c.<CL
    da8c:	2049 4544 5542 3e47 5420 6d61 6570 2072     I DEBUG> Tamper 
    da9c:	2020 2020 2020 2020 2020 203d 7325 3c00               = %s.<
    daac:	4c43 2049 4544 5542 3e47 5020 726f 3174     CLI DEBUG> Port1
    dabc:	2020 2020 2020 2020 2020 2020 203d 7325                 = %s
    dacc:	3c00 4c43 2049 4544 5542 3e47 5020 726f     .<CLI DEBUG> Por
    dadc:	3274 2020 2020 2020 2020 2020 2020 203d     t2            = 
    daec:	7325 3c00 4c43 2049 4544 5542 3e47 5020     %s.<CLI DEBUG> P
    dafc:	726f 3374 2020 2020 2020 2020 2020 2020     ort3            
    db0c:	203d 7325 3c00 4c43 2049 4544 5542 3e47     = %s.<CLI DEBUG>
    db1c:	4320 7261 4164 2020 2020 2020 2020 2020      CardA          
    db2c:	2020 203d 7325 3c00 4c43 2049 4544 5542       = %s.<CLI DEBU
    db3c:	3e47 4320 7261 4264 2020 2020 2020 2020     G> CardB        
    db4c:	2020 2020 203d 7325 3c00 4c43 2049 4544         = %s.<CLI DE
    db5c:	5542 3e47 5220 6e69 2067 6f54 6f70 6f6c     BUG> Ring Topolo
    db6c:	7967 2020 2020 203d 7325 3c00 4c43 2049     gy    = %s.<CLI 
    db7c:	4544 5542 3e47 4620 7269 776d 7261 2065     DEBUG> Firmware 
    db8c:	2020 2020 2020 2020 203d 6425 252e 0064             = %d.%d.
    db9c:	433c 494c 4420 4245 4755 203e 495b 2050     <CLI DEBUG> [IP 
    dbac:	4353 4548 454d 2f20 4e20 5445 4f57 4b52     SCHEME / NETWORK
    dbbc:	205d 6f63 6d6d 6e61 0d64 000a 433c 494c     ] command...<CLI
    dbcc:	4420 4245 4755 203e 5049 2020 2020 2020      DEBUG> IP      
    dbdc:	2020 2020 2020 2020 3d20 2520 2e64 6425              = %d.%d
    dbec:	252e 2e64 6425 0a0d 3c00 4c43 2049 4544     .%d.%d...<CLI DE
    dbfc:	5542 3e47 4e20 7465 616d 6b73 2020 2020     BUG> Netmask    
    dc0c:	2020 2020 2020 203d 6425 252e 2e64 6425           = %d.%d.%d
    dc1c:	252e 0d64 000a 433c 494c 4420 4245 4755     .%d...<CLI DEBUG
    dc2c:	203e 6147 6574 6177 2079 2020 2020 2020     > Gateway       
    dc3c:	2020 3d20 2520 2e64 6425 252e 2e64 6425        = %d.%d.%d.%d
    dc4c:	0a0d 3c00 4c43 2049 4544 5542 3e47 4d20     ...<CLI DEBUG> M
    dc5c:	4341 2020 2020 2020 2020 2020 2020 2020     AC              
    dc6c:	203d 7825 253a 3a78 7825 253a 3a78 7825     = %x:%x:%x:%x:%x
    dc7c:	253a 0d78 000a 433c 494c 4420 4245 4755     :%x...<CLI DEBUG
    dc8c:	203e 535b 4550 4445 4d20 4941 4c4e 4f4f     > [SPEED MAINLOO
    dc9c:	5d50 6320 6d6f 616d 646e 0a0d 3c00 4c43     P] command...<CL
    dcac:	2049 4544 5542 3e47 4d20 6961 2d6e 6f6c     I DEBUG> Main-lo
    dcbc:	706f 532f 6d61 6c70 6e69 2067 203d 6425     op/Sampling = %d
    dccc:	0a0d 3c00 4c43 2049 4544 5542 3e47 5520     ...<CLI DEBUG> U
    dcdc:	6b6e 6f6e 6e77 6320 6d6f 616d 646e 0a0d     nknown command..
    dcec:	0a0d 6548 706c 5320 7263 6565 3a6e 0a0d     ..Help Screen:..
    dcfc:	0a0d 5200 2020 2020 2020 2020 5b20 4552     ...R         [RE
    dd0c:	4f42 544f 205d 6f63 6d6d 6e61 0d64 000a     BOOT] command...
    dd1c:	2044 2020 2020 2020 2020 435b 4e4f 4946     D         [CONFI
    dd2c:	5547 4152 4954 4e4f 4420 4645 5541 544c     GURATION DEFAULT
    dd3c:	205d 6f63 6d6d 6e61 0d64 000a 2058 2020     ] command...X   
    dd4c:	2020 2020 2020 495b 2044 4552 4553 5d54           [ID RESET]
    dd5c:	6320 6d6f 616d 646e 0a0d 4200 2020 2020      command...B    
    dd6c:	2020 2020 5b20 4142 4553 5453 5441 4f49          [BASESTATIO
    dd7c:	5d4e 6320 6d6f 616d 646e 0a0d 5000 2020     N] command...P  
    dd8c:	2020 2020 2020 5b20 4150 5353 5420 5248            [PASS THR
    dd9c:	554f 4847 205d 6f63 6d6d 6e61 0d64 000a     OUGH] command...
    ddac:	204c 2020 2020 2020 2020 4c5b 5649 2045     L         [LIVE 
    ddbc:	4f42 5241 2044 5250 4e49 5d54 6320 6d6f     BOARD PRINT] com
    ddcc:	616d 646e 0a0d 4900 2020 2020 2020 2020     mand...I        
    dddc:	5b20 5049 5320 4843 4d45 2045 202f 454e      [IP SCHEME / NE
    ddec:	5754 524f 5d4b 6320 6d6f 616d 646e 0a0d     TWORK] command..
    ddfc:	5300 2020 2020 2020 2020 5b20 5053 4545     .S         [SPEE
    de0c:	2044 414d 4e49 4f4c 504f 205d 6f63 6d6d     D MAINLOOP] comm
    de1c:	6e61 0d64 0d0a 000a 0a0d 0a0d 0a0d 2d2d     and...........--
    de2c:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
    de3c:	2d2d 0d2d 420a 4f4f 2d54 5055 0a0d 2d2d     ---..BOOT-UP..--
    de4c:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
    de5c:	2d2d 0d2d 0d0a 000a 2a2a 2a2a 2a2a 2a2a     ---.....********
    de6c:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
    de7c:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
    de8c:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
    de9c:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
    deac:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
    debc:	2a2a 2a2a 0a0d 2a00 5420 4548 4d20 4c55     ****...* THE MUL
    decc:	4954 532d 4e45 4553 4420 5645 4349 2045     TI-SENSE DEVICE 
    dedc:	495b 5d44 4820 5341 4e20 544f 4220 4545     [ID] HAS NOT BEE
    deec:	204e 4553 2e54 5420 4948 2053 4544 4946     N SET. THIS DEFI
    defc:	4543 5720 4c49 204c 4f4e 2054 5546 434e     CE WILL NOT FUNC
    df0c:	4954 4e4f 4f20 2052 5552 204e 5341 2020     TION OR RUN AS  
    df1c:	2020 0d2a 000a 202a 4f4e 4d52 4c41 5520       *...* NORMAL U
    df2c:	544e 4c49 5420 4548 5b20 4449 205d 554e     NTIL THE [ID] NU
    df3c:	424d 5245 4820 5341 4220 4545 204e 4e45     MBER HAS BEEN EN
    df4c:	4554 4552 2044 5942 5420 4948 2053 4554     TERED BY THIS TE
    df5c:	4d52 4e49 4c41 4620 4341 4c49 5449 2e59     RMINAL FACILITY.
    df6c:	2020 2020 2020 2020 2020 2020 2020 2020                     
    df7c:	2a20 0a0d 2a00 2d20 2d20 2d20 2d20 2d20      *...* - - - - -
    df8c:	2d20 2d20 2d20 2d20 2d20 2d20 2d20 2d20      - - - - - - - -
    df9c:	2d20 2d20 2d20 2d20 2d20 2d20 2d20 2d20      - - - - - - - -
    dfac:	2d20 2d20 2d20 2d20 2d20 2d20 2d20 2d20      - - - - - - - -
    dfbc:	2d20 2d20 2d20 2d20 2d20 2d20 2d20 2d20      - - - - - - - -
    dfcc:	2d20 2d20 2d20 2d20 2d20 2d20 2d20 2020      - - - - - - -  
    dfdc:	0d2a 000a 202a 4c50 4145 4553 4520 544e     *...* PLEASE ENT
    dfec:	5245 5420 4548 3320 2d32 4942 2054 4544     ER THE 32-BIT DE
    dffc:	4956 4543 5b20 4449 205d 4542 4f4c 2057     VICE [ID] BELOW 
    e00c:	2020 2020 2020 2020 2020 2020 2020 2020                     
    e01c:	2020 2020 2020 2020 2020 2020 2020 2020                     
    e02c:	2020 2020 2020 2020 2020 2020 2020 2a20                    *
    e03c:	0a0d 4d00 6c75 6974 6553 736e 2065 625b     ...MultiSense [b
    e04c:	6f6f 2d74 7075 2620 6920 696e 2074 6f63     oot-up & init co
    e05c:	706d 656c 6574 2064 4449 3d20 2520 5d64     mpleted ID = %d]
    e06c:	0a0d 2d00 2d20 2d20 2d20 2d20 2d20 2d20     ...- - - - - - -
    e07c:	2d20 2d20 2d20 2d20 2d20 2d20 2d20 2d20      - - - - - - - -
    e08c:	2d20 2d20 2d20 2d20 2d20 2d20 2d20 2d20      - - - - - - - -
    e09c:	2d20 2d20 2d20 2d20 2d20 2d20 2d20 2d20      - - - - - - - -
    e0ac:	2d20 2d20 2d20 2d20 2d20 2d20 2d20 2d20      - - - - - - - -
    e0bc:	2d20 2d20 2d20 2d20 2d20 2d20 2d20 2d20      - - - - - - - -
    e0cc:	2d20 2d20 2d20 2d20 2d20 2d20 2d20 2d20      - - - - - - - -
    e0dc:	2d20 2d20 2d20 2d20 0a0d 0d00 450a 746e      - - - -.....Ent
    e0ec:	7265 6e20 7765 5b20 4449 205d 6f6e 3a77     er new [ID] now:
    e0fc:	0020 4449 6520 746e 7265 6465 203a 7325      .ID entered: %s
    e10c:	0a0d 0d00 490a 2073 6874 7369 6320 726f     .....Is this cor
    e11c:	6572 7463 5920 4e2f 0d3f 000a 7525 0d00     rect Y/N?...%u..
    e12c:	450a 5252 524f 4920 2044 6163 6e6e 746f     .ERROR ID cannot
    e13c:	6220 2065 5a3c 5245 3e4f 2121 2121 0d21      be <ZERO>!!!!!.
    e14c:	000a 0a0d 6552 6f62 746f 6e69 2e67 2e2e     ....Rebooting...
    e15c:	7028 656c 7361 2065 6177 7469 0d29 0d0a     (please wait)...
    e16c:	000a 2e2e 702f 7265 6973 7473 6e65 5f74     ..../persistent_
    e17c:	7473 726f 6761 2f65 766e 695f 746e 7265     storage/nv_inter
    e18c:	616e 5f6c 6c66 7361 5f68 6c75 7274 2e61     nal_flash_ultra.
    e19c:	0063 5453 524f 4741 0045 2e2e 702f 7265     c.STORAGE.../per
    e1ac:	6973 7473 6e65 5f74 7473 726f 6761 2f65     sistent_storage/
    e1bc:	766e 735f 6f74 6172 6567 632e 4500 4854     nv_storage.c.ETH
    e1cc:	5245 454e 3a54 5320 7465 6120 2073 2061     ERNET: Set as a 
    e1dc:	6162 6573 732d 6174 6974 6e6f 7420 206f     base-station to 
    e1ec:	616d 616e 6567 4520 6874 7265 656e 2074     manage Ethernet 
    e1fc:	6f74 6f70 6f6c 7967 2e2e 0d2e 000a 5245     topology......ER
    e20c:	4f52 2052 6573 7474 6e69 2067 6874 2065     ROR setting the 
    e21c:	5453 5441 4349 4d20 4341 7420 6261 656c     STATIC MAC table
    e22c:	7720 7469 2068 5042 5544 6620 726f 4220      with BPDU for B
    e23c:	7361 2d65 7473 7461 6f69 2e6e 2e2e 0a0d     ase-station.....
    e24c:	4500 4854 5245 454e 3a54 6e20 726f 616d     .ETHERNET: norma
    e25c:	206c 6f6e 656e 6d2d 6e61 6761 6465 7020     l none-managed p
    e26c:	7361 2d73 6874 6f72 6775 2068 6f6e 6564     ass-through node
    e27c:	2e2e 0d2e 000a 5245 4f52 2052 6573 7474     ......ERROR sett
    e28c:	6e69 2067 6874 2065 5453 5441 4349 4d20     ing the STATIC M
    e29c:	4341 7420 6261 656c 7720 7469 2068 5042     AC table with BP
    e2ac:	5544 6620 726f 7020 7361 2d73 6874 6f72     DU for pass-thro
    e2bc:	6775 2068 6f6e 6564 2e2e 0d2e 000a 5445     ugh node......ET
    e2cc:	4548 4e52 5445 203a 6f43 706d 656c 6574     HERNET: Complete
    e2dc:	2064 4952 474e 6d20 6e61 6761 6d65 6e65     d RING managemen
    e2ec:	2074 6e69 7469 2e2e 0d2e 000a 5445 4548     t init......ETHE
    e2fc:	4e52 5445 203a 6553 746e 6620 7269 7473     RNET: Sent first
    e30c:	4220 4450 2e55 2e2e 0a0d 4500 4854 5245      BPDU......ETHER
    e31c:	454e 3a54 2820 7321 6f74 6d72 735f 6174     NET: (!storm_sta
    e32c:	6574 2029 5245 4f52 0d52 000a 5445 4548     te) ERROR...ETHE
    e33c:	4e52 5445 203a 2128 6972 676e 7262 6165     RNET: (!ringbrea
    e34c:	296b 4520 5252 524f 0a0d 4500 4854 5245     k) ERROR...ETHER
    e35c:	454e 3a54 5b20 7574 6e72 6e69 2067 7445     NET: [turning Et
    e36c:	6568 6e72 7465 3c20 3e42 4f20 204e 202d     hernet <B> ON - 
    e37c:	4952 474e 4220 4f52 454b 5d4e 2e2e 0d2e     RING BROKEN]....
    e38c:	000a 5445 4548 4e52 5445 203a 745b 7275     ..ETHERNET: [tur
    e39c:	696e 676e 4520 6874 7265 656e 2074 423c     ning Ethernet <B
    e3ac:	203e 464f 2046 202d 4952 474e 4820 4145     > OFF - RING HEA
    e3bc:	454c 5d44 2e2e 0d2e 000a 5445 4548 4e52     LED]......ETHERN
    e3cc:	5445 203a 735b 6f74 6d72 7320 6275 6973     ET: [storm subsi
    e3dc:	6564 5d64 2e2e 0d2e 000a 5445 4548 4e52     ded]......ETHERN
    e3ec:	5445 203a 7574 6e72 6e69 2067 7445 6568     ET: turning Ethe
    e3fc:	6e72 7465 3c20 3e42 4f20 4646 6220 6365     rnet <B> OFF bec
    e40c:	7561 6573 6f20 2066 7473 726f 206d 202d     ause of storm - 
    e41c:	4952 474e 4820 4145 494c 474e 5020 534f     RING HEALING POS
    e42c:	4953 4942 494c 5954 2e5d 2e2e 0a0d 7500     SIBILITY]......u
    e43c:	7069 695f 6370 6b68 7573 3a6d 7320 6d75     ip_ipchksum: sum
    e44c:	3020 2578 3430 0a78 6900 3a70 6920 766e      0x%04x..ip: inv
    e45c:	6c61 6469 7620 7265 6973 6e6f 6f20 2072     alid version or 
    e46c:	6568 6461 7265 6c20 6e65 7467 2e68 6900     header length..i
    e47c:	3a70 7020 6361 656b 2074 6873 726f 6574     p: packet shorte
    e48c:	2072 6874 6e61 7220 7065 726f 6574 2064     r than reported 
    e49c:	6e69 4920 2050 6568 6461 7265 002e 7069     in IP header..ip
    e4ac:	203a 7266 6761 656d 746e 6420 6f72 7070     : fragment dropp
    e4bc:	6465 002e 7069 203a 6162 2064 6863 6365     ed..ip: bad chec
    e4cc:	736b 6d75 002e 7069 203a 656e 7469 6568     ksum..ip: neithe
    e4dc:	2072 6374 2070 6f6e 2072 6369 706d 002e     r tcp nor icmp..
    e4ec:	6369 706d 203a 6f6e 2074 6369 706d 6520     icmp: not icmp e
    e4fc:	6863 2e6f 7500 7064 203a 6162 2064 6863     cho..udp: bad ch
    e50c:	6365 736b 6d75 002e 6475 3a70 6e20 206f     ecksum..udp: no 
    e51c:	616d 6374 6968 676e 6320 6e6f 656e 7463     matching connect
    e52c:	6f69 206e 6f66 6e75 0064 6374 3a70 6220     ion found.tcp: b
    e53c:	6461 6320 6568 6b63 7573 2e6d 7400 7063     ad checksum..tcp
    e54c:	203a 6f66 6e75 2064 6f6e 7520 756e 6573     : found no unuse
    e55c:	2064 6f63 6e6e 6365 6974 6e6f 2e73 7400     d connections..t
    e56c:	7063 203a 6f67 2074 6572 6573 2c74 6120     cp: got reset, a
    e57c:	6f62 7472 6e69 2067 6f63 6e6e 6365 6974     borting connecti
    e58c:	6e6f 002e 6975 2070 7069 735f 6e65 5f64     on..uip ip_send_
    e59c:	6f6e 656c 3a6e 6320 6b68 6365 6d75 3020     nolen: chkecum 0
    e5ac:	2578 3430 0a78 5300 6e65 6964 676e 7020     x%04x..Sending p
    e5bc:	6361 656b 2074 6977 6874 6c20 6e65 7467     acket with lengt
    e5cc:	2068 6425 2820 6425 0a29 ff00                    h %d (%d)..

0000e5d7 <broadcast_ethaddr>:
    e5d7:	ffff ffff ffff 2e2e 752f 6273 642f 7665     ......../usb/dev
    e5e7:	6369 2f65 7375 6462 2e63 0063 754d 746c     ice/usbdc.c.Mult
    e5f7:	5369 6e65 6573 6120 7070 696c 6163 6974     iSense applicati
    e607:	6e6f 615f 7070 6163 6c6c 2928 0a0d 4d00     on_appcall()...M
    e617:	6c75 6974 6553 736e 2065 7061 6c70 6369     ultiSense applic
    e627:	7461 6f69 5f6e 6e69 7469 2928 0a0d 4d00     ation_init()...M
    e637:	6c75 6974 6553 736e 2065 6374 6970 5f70     ultiSense tcpip_
    e647:	756f 7074 7475 2928 0a0d 4d00 6c75 6974     output()...Multi
    e657:	6553 736e 2065 4975 2050 6f6c 2067 2d2d     Sense uIP log --
    e667:	203e 255b 5d73 0a0d 0000                         > [%s]...

0000e670 <__sf_fake_stderr>:
	...

0000e690 <__sf_fake_stdin>:
	...

0000e6b0 <__sf_fake_stdout>:
	...
    e6d0:	6c68 004c e6f2 0000 e6f5 0000 e6f8 0000     hlL.............
    e6e0:	2d41 6146 662d 3938 3130 3332 3534 3736     A-Fa-f8901234567
    e6f0:	005d 2d2b 3000 0030 5878 5000 534f 5849     ].+-.00.xX.POSIX
	...

0000e701 <_ctype_>:
    e701:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
    e711:	2020 2020 2020 2020 2020 2020 2020 2020                     
    e721:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
    e731:	0410 0404 0404 0404 0404 1004 1010 1010     ................
    e741:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
    e751:	0101 0101 0101 0101 0101 0101 1010 1010     ................
    e761:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
    e771:	0202 0202 0202 0202 0202 0202 1010 1010     ................
    e781:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0000e804 <_init>:
    e804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e806:	bf00      	nop
    e808:	bcf8      	pop	{r3, r4, r5, r6, r7}
    e80a:	bc08      	pop	{r3}
    e80c:	469e      	mov	lr, r3
    e80e:	4770      	bx	lr

0000e810 <__init_array_start>:
    e810:	00000289 	.word	0x00000289

0000e814 <_fini>:
    e814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e816:	bf00      	nop
    e818:	bcf8      	pop	{r3, r4, r5, r6, r7}
    e81a:	bc08      	pop	{r3}
    e81c:	469e      	mov	lr, r3
    e81e:	4770      	bx	lr

0000e820 <__fini_array_start>:
    e820:	00000265 	.word	0x00000265
