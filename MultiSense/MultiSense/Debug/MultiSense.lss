
MultiSense.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000117f4  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000002b0  20000000  000117f4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  000302b0  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  000302b0  2**0
                  CONTENTS
  4 .bss          00008e28  200002c0  00011ac0  000302c0  2**5
                  ALLOC
  5 .stack        0000c000  200090e8  0001a8e8  000302c0  2**0
                  ALLOC
  6 .ARM.attributes 0000002a  00000000  00000000  000302b0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000302da  2**0
                  CONTENTS, READONLY
  8 .debug_info   00090edb  00000000  00000000  00030333  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00009d8b  00000000  00000000  000c120e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0003e62e  00000000  00000000  000caf99  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001cd0  00000000  00000000  001095c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003170  00000000  00000000  0010b297  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000422eb  00000000  00000000  0010e407  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00036f42  00000000  00000000  001506f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0011a526  00000000  00000000  00187634  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000057a4  00000000  00000000  002a1b5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	e8 50 01 20 8d 0a 00 00 89 0a 00 00 89 0a 00 00     .P. ............
      10:	89 0a 00 00 89 0a 00 00 89 0a 00 00 00 00 00 00     ................
	...
      2c:	89 0a 00 00 89 0a 00 00 00 00 00 00 89 0a 00 00     ................
      3c:	89 0a 00 00 89 0a 00 00 89 0a 00 00 89 0a 00 00     ................
      4c:	89 0a 00 00 89 0a 00 00 89 0a 00 00 89 0a 00 00     ................
      5c:	89 0a 00 00 89 0a 00 00 89 0a 00 00 89 0a 00 00     ................
      6c:	89 0a 00 00 89 0a 00 00 89 0a 00 00 89 0a 00 00     ................
      7c:	89 0a 00 00 89 0a 00 00 89 0a 00 00 89 0a 00 00     ................
      8c:	89 0a 00 00 89 0a 00 00 89 0a 00 00 89 0a 00 00     ................
      9c:	89 0a 00 00 89 0a 00 00 89 0a 00 00 89 0a 00 00     ................
      ac:	89 0a 00 00 89 0a 00 00 3d 35 00 00 51 35 00 00     ........=5..Q5..
      bc:	91 2c 00 00 9d 2c 00 00 a9 2c 00 00 b5 2c 00 00     .,...,...,...,..
      cc:	c1 2c 00 00 89 0a 00 00 89 0a 00 00 89 0a 00 00     .,..............
      dc:	89 0a 00 00 89 0a 00 00 89 0a 00 00 89 0a 00 00     ................
      ec:	89 0a 00 00 00 00 00 00 45 36 00 00 1d 3a 00 00     ........E6...:..
      fc:	31 3a 00 00 45 3a 00 00 59 3a 00 00 89 0a 00 00     1:..E:..Y:......
     10c:	89 0a 00 00 89 0a 00 00 89 0a 00 00 89 0a 00 00     ................
     11c:	89 0a 00 00 89 0a 00 00 89 0a 00 00 89 0a 00 00     ................
     12c:	89 0a 00 00 89 0a 00 00 89 0a 00 00 89 0a 00 00     ................
     13c:	89 0a 00 00 89 0a 00 00 89 0a 00 00 6d 3a 00 00     ............m:..
     14c:	81 3a 00 00 95 3a 00 00 a9 3a 00 00 89 0a 00 00     .:...:...:......
     15c:	89 0a 00 00 89 0a 00 00 89 0a 00 00 89 0a 00 00     ................
     16c:	89 0a 00 00 89 0a 00 00 89 0a 00 00 00 00 00 00     ................
     17c:	00 00 00 00 45 52 00 00 51 52 00 00 5d 52 00 00     ....ER..QR..]R..
     18c:	69 52 00 00 fd 2c 00 00 89 0a 00 00 89 0a 00 00     iR...,..........
     19c:	89 0a 00 00 89 0a 00 00 89 0a 00 00 89 0a 00 00     ................
     1ac:	89 0a 00 00 89 0a 00 00 89 0a 00 00 89 0a 00 00     ................
     1bc:	89 0a 00 00 89 0a 00 00 89 0a 00 00 89 0a 00 00     ................
     1cc:	89 0a 00 00 89 0a 00 00 89 0a 00 00 89 0a 00 00     ................
     1dc:	89 0a 00 00 89 0a 00 00 89 0a 00 00 89 0a 00 00     ................
     1ec:	fd 3f 00 00 89 0a 00 00 89 0a 00 00 89 0a 00 00     .?..............
     1fc:	89 0a 00 00 89 0a 00 00 89 0a 00 00 89 0a 00 00     ................
     20c:	89 0a 00 00 89 0a 00 00 89 0a 00 00 89 0a 00 00     ................
     21c:	89 0a 00 00 89 0a 00 00 89 0a 00 00 89 0a 00 00     ................
     22c:	89 0a 00 00 89 0a 00 00 89 0a 00 00 89 0a 00 00     ................
     23c:	89 0a 00 00 89 0a 00 00 89 0a 00 00 89 0a 00 00     ................
     24c:	89 0a 00 00 89 0a 00 00 89 0a 00 00 89 0a 00 00     ................
     25c:	89 0a 00 00 89 0a 00 00                             ........

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	200002c0 	.word	0x200002c0
     280:	00000000 	.word	0x00000000
     284:	000117f4 	.word	0x000117f4

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	000117f4 	.word	0x000117f4
     2c4:	200002c4 	.word	0x200002c4
     2c8:	000117f4 	.word	0x000117f4
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b03      	ldr	r3, [pc, #12]	; (2e0 <atmel_start_init+0x10>)
     2d4:	4798      	blx	r3
	usb_init();
     2d6:	4b03      	ldr	r3, [pc, #12]	; (2e4 <atmel_start_init+0x14>)
     2d8:	4798      	blx	r3
	persistent_storage_init();
     2da:	4b03      	ldr	r3, [pc, #12]	; (2e8 <atmel_start_init+0x18>)
     2dc:	4798      	blx	r3
     2de:	bd08      	pop	{r3, pc}
     2e0:	000012a1 	.word	0x000012a1
     2e4:	0000d8bd 	.word	0x0000d8bd
     2e8:	0000b499 	.word	0x0000b499

000002ec <convert>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: Function to format [vargs]
// Returns:     formatted string ptr
// *****************************************************************************************************************************************************************
static char *convert(unsigned int num, int base)
{
     2ec:	b410      	push	{r4}
     2ee:	4603      	mov	r3, r0
	static char		Representation[]= "0123456789ABCDEF";
	static char		buffer[50];
	char		   *ptr;
	
	ptr = &buffer[49];
	*ptr = '\0';
     2f0:	4808      	ldr	r0, [pc, #32]	; (314 <convert+0x28>)
     2f2:	2200      	movs	r2, #0
     2f4:	f800 2f31 	strb.w	r2, [r0, #49]!
	
	do {
		*--ptr = Representation[num%base];
     2f8:	4c07      	ldr	r4, [pc, #28]	; (318 <convert+0x2c>)
     2fa:	fbb3 f2f1 	udiv	r2, r3, r1
     2fe:	fb01 3312 	mls	r3, r1, r2, r3
     302:	5ce3      	ldrb	r3, [r4, r3]
     304:	f800 3d01 	strb.w	r3, [r0, #-1]!
		num /= base;
     308:	4613      	mov	r3, r2
	} while(num != 0);
     30a:	2a00      	cmp	r2, #0
     30c:	d1f5      	bne.n	2fa <convert+0xe>
	
	return ptr;
}
     30e:	bc10      	pop	{r4}
     310:	4770      	bx	lr
     312:	bf00      	nop
     314:	200002dc 	.word	0x200002dc
     318:	0000e758 	.word	0x0000e758

0000031c <xprintf>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: Function to format and write the debug/info to the standard stream IO
// Returns:     Nothing
// *****************************************************************************************************************************************************************
void xprintf(char* format, ...) 
{ 
     31c:	b40f      	push	{r0, r1, r2, r3}
     31e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     322:	b082      	sub	sp, #8
     324:	ab08      	add	r3, sp, #32
     326:	f853 6b04 	ldr.w	r6, [r3], #4
	unsigned int     i;
	char			 temp;
	char            *s; 
	
	va_list arg; 
	va_start(arg, format); 
     32a:	9300      	str	r3, [sp, #0]
	
	for (traverse = format; *traverse; traverse++) 
     32c:	7833      	ldrb	r3, [r6, #0]
     32e:	2b00      	cmp	r3, #0
     330:	f000 80a6 	beq.w	480 <xprintf+0x164>
	{ 
	    if (*traverse != '%') {
			while (!usart_async_is_tx_empty(&USART_1)) {}
     334:	4d55      	ldr	r5, [pc, #340]	; (48c <xprintf+0x170>)
     336:	4c56      	ldr	r4, [pc, #344]	; (490 <xprintf+0x174>)
			io_write((struct io_descriptor *const)io, (const uint8_t *const)traverse, 1);
     338:	f8df 8164 	ldr.w	r8, [pc, #356]	; 4a0 <xprintf+0x184>
     33c:	e02a      	b.n	394 <xprintf+0x78>
			while (!usart_async_is_tx_empty(&USART_1)) {}
		} else {
			traverse++; 
     33e:	1c77      	adds	r7, r6, #1
			switch (*traverse)  { 
     340:	7873      	ldrb	r3, [r6, #1]
     342:	3b63      	subs	r3, #99	; 0x63
     344:	2b15      	cmp	r3, #21
     346:	d821      	bhi.n	38c <xprintf+0x70>
     348:	e8df f003 	tbb	[pc, r3]
     34c:	2020360b 	.word	0x2020360b
     350:	20202020 	.word	0x20202020
     354:	20202020 	.word	0x20202020
     358:	20202050 	.word	0x20202050
     35c:	2020206a 	.word	0x2020206a
     360:	8020      	.short	0x8020
				case 'c' : i = va_arg(arg, int);
     362:	9b00      	ldr	r3, [sp, #0]
     364:	1d1a      	adds	r2, r3, #4
     366:	9200      	str	r2, [sp, #0]
						temp = (char)i;
     368:	681b      	ldr	r3, [r3, #0]
     36a:	f88d 3007 	strb.w	r3, [sp, #7]
						while (!usart_async_is_tx_empty(&USART_1)) {}
     36e:	4628      	mov	r0, r5
     370:	47a0      	blx	r4
     372:	2800      	cmp	r0, #0
     374:	d0fb      	beq.n	36e <xprintf+0x52>
						io_write((struct io_descriptor *const)io, (const uint8_t *const)&temp, 1);
     376:	2201      	movs	r2, #1
     378:	f10d 0107 	add.w	r1, sp, #7
     37c:	f8d8 0000 	ldr.w	r0, [r8]
     380:	4b44      	ldr	r3, [pc, #272]	; (494 <xprintf+0x178>)
     382:	4798      	blx	r3
						while (!usart_async_is_tx_empty(&USART_1)) {}
     384:	4628      	mov	r0, r5
     386:	47a0      	blx	r4
     388:	2800      	cmp	r0, #0
     38a:	d0fb      	beq.n	384 <xprintf+0x68>
	for (traverse = format; *traverse; traverse++) 
     38c:	1c7e      	adds	r6, r7, #1
     38e:	787b      	ldrb	r3, [r7, #1]
     390:	2b00      	cmp	r3, #0
     392:	d075      	beq.n	480 <xprintf+0x164>
	    if (*traverse != '%') {
     394:	2b25      	cmp	r3, #37	; 0x25
     396:	d0d2      	beq.n	33e <xprintf+0x22>
			while (!usart_async_is_tx_empty(&USART_1)) {}
     398:	4628      	mov	r0, r5
     39a:	47a0      	blx	r4
     39c:	2800      	cmp	r0, #0
     39e:	d0fb      	beq.n	398 <xprintf+0x7c>
			io_write((struct io_descriptor *const)io, (const uint8_t *const)traverse, 1);
     3a0:	2201      	movs	r2, #1
     3a2:	4631      	mov	r1, r6
     3a4:	f8d8 0000 	ldr.w	r0, [r8]
     3a8:	4b3a      	ldr	r3, [pc, #232]	; (494 <xprintf+0x178>)
     3aa:	4798      	blx	r3
			while (!usart_async_is_tx_empty(&USART_1)) {}
     3ac:	4628      	mov	r0, r5
     3ae:	47a0      	blx	r4
     3b0:	2800      	cmp	r0, #0
     3b2:	d0fb      	beq.n	3ac <xprintf+0x90>
     3b4:	4637      	mov	r7, r6
     3b6:	e7e9      	b.n	38c <xprintf+0x70>
				break; 
						
				case 'd' : i = va_arg(arg,int);
     3b8:	9b00      	ldr	r3, [sp, #0]
     3ba:	1d1a      	adds	r2, r3, #4
     3bc:	9200      	str	r2, [sp, #0]
							while (!usart_async_is_tx_empty(&USART_1)) {}
							io_write((struct io_descriptor *const)io, (const uint8_t *const)'-', 1);
							while (!usart_async_is_tx_empty(&USART_1)) {}
						} 
						
						s = convert(i, 10);
     3be:	210a      	movs	r1, #10
     3c0:	6818      	ldr	r0, [r3, #0]
     3c2:	4b35      	ldr	r3, [pc, #212]	; (498 <xprintf+0x17c>)
     3c4:	4798      	blx	r3
     3c6:	4606      	mov	r6, r0
						
						while (!usart_async_is_tx_empty(&USART_1)) {}
     3c8:	4628      	mov	r0, r5
     3ca:	47a0      	blx	r4
     3cc:	2800      	cmp	r0, #0
     3ce:	d0fb      	beq.n	3c8 <xprintf+0xac>
						io_write((struct io_descriptor *const)io, (const uint8_t *const)s, strlen(s));
     3d0:	4630      	mov	r0, r6
     3d2:	4b32      	ldr	r3, [pc, #200]	; (49c <xprintf+0x180>)
     3d4:	4798      	blx	r3
     3d6:	b282      	uxth	r2, r0
     3d8:	4631      	mov	r1, r6
     3da:	f8d8 0000 	ldr.w	r0, [r8]
     3de:	4b2d      	ldr	r3, [pc, #180]	; (494 <xprintf+0x178>)
     3e0:	4798      	blx	r3
						while (!usart_async_is_tx_empty(&USART_1)) {}
     3e2:	4628      	mov	r0, r5
     3e4:	47a0      	blx	r4
     3e6:	2800      	cmp	r0, #0
     3e8:	d0fb      	beq.n	3e2 <xprintf+0xc6>
     3ea:	e7cf      	b.n	38c <xprintf+0x70>
				break; 
						
				case 'o': i = va_arg(arg,unsigned int);
     3ec:	9b00      	ldr	r3, [sp, #0]
     3ee:	1d1a      	adds	r2, r3, #4
     3f0:	9200      	str	r2, [sp, #0]
						s = convert(i, 8);
     3f2:	2108      	movs	r1, #8
     3f4:	6818      	ldr	r0, [r3, #0]
     3f6:	4b28      	ldr	r3, [pc, #160]	; (498 <xprintf+0x17c>)
     3f8:	4798      	blx	r3
     3fa:	4606      	mov	r6, r0
						
						while (!usart_async_is_tx_empty(&USART_1)) {}
     3fc:	4628      	mov	r0, r5
     3fe:	47a0      	blx	r4
     400:	2800      	cmp	r0, #0
     402:	d0fb      	beq.n	3fc <xprintf+0xe0>
						io_write((struct io_descriptor *const)io, (const uint8_t *const)s, strlen(s));
     404:	4630      	mov	r0, r6
     406:	4b25      	ldr	r3, [pc, #148]	; (49c <xprintf+0x180>)
     408:	4798      	blx	r3
     40a:	b282      	uxth	r2, r0
     40c:	4631      	mov	r1, r6
     40e:	f8d8 0000 	ldr.w	r0, [r8]
     412:	4b20      	ldr	r3, [pc, #128]	; (494 <xprintf+0x178>)
     414:	4798      	blx	r3
						while (!usart_async_is_tx_empty(&USART_1)) {}
     416:	4628      	mov	r0, r5
     418:	47a0      	blx	r4
     41a:	2800      	cmp	r0, #0
     41c:	d0fb      	beq.n	416 <xprintf+0xfa>
     41e:	e7b5      	b.n	38c <xprintf+0x70>
				break; 
						
				case 's': s = va_arg(arg,char *);
     420:	9b00      	ldr	r3, [sp, #0]
     422:	1d1a      	adds	r2, r3, #4
     424:	9200      	str	r2, [sp, #0]
     426:	681e      	ldr	r6, [r3, #0]
						while (!usart_async_is_tx_empty(&USART_1)) {}
     428:	4628      	mov	r0, r5
     42a:	47a0      	blx	r4
     42c:	2800      	cmp	r0, #0
     42e:	d0fb      	beq.n	428 <xprintf+0x10c>
						io_write((struct io_descriptor *const)io, (const uint8_t *const)s, strlen(s));
     430:	4630      	mov	r0, r6
     432:	4b1a      	ldr	r3, [pc, #104]	; (49c <xprintf+0x180>)
     434:	4798      	blx	r3
     436:	b282      	uxth	r2, r0
     438:	4631      	mov	r1, r6
     43a:	f8d8 0000 	ldr.w	r0, [r8]
     43e:	4b15      	ldr	r3, [pc, #84]	; (494 <xprintf+0x178>)
     440:	4798      	blx	r3
						while (!usart_async_is_tx_empty(&USART_1)) {}
     442:	4628      	mov	r0, r5
     444:	47a0      	blx	r4
     446:	2800      	cmp	r0, #0
     448:	d0fb      	beq.n	442 <xprintf+0x126>
     44a:	e79f      	b.n	38c <xprintf+0x70>
				break; 
						
				case 'x': i = va_arg(arg,unsigned int);
     44c:	9b00      	ldr	r3, [sp, #0]
     44e:	1d1a      	adds	r2, r3, #4
     450:	9200      	str	r2, [sp, #0]
						s = convert(i, 16);
     452:	2110      	movs	r1, #16
     454:	6818      	ldr	r0, [r3, #0]
     456:	4b10      	ldr	r3, [pc, #64]	; (498 <xprintf+0x17c>)
     458:	4798      	blx	r3
     45a:	4606      	mov	r6, r0
						
						while (!usart_async_is_tx_empty(&USART_1)) {}
     45c:	4628      	mov	r0, r5
     45e:	47a0      	blx	r4
     460:	2800      	cmp	r0, #0
     462:	d0fb      	beq.n	45c <xprintf+0x140>
						io_write((struct io_descriptor *const)io, (const uint8_t *const)s, strlen(s));
     464:	4630      	mov	r0, r6
     466:	4b0d      	ldr	r3, [pc, #52]	; (49c <xprintf+0x180>)
     468:	4798      	blx	r3
     46a:	b282      	uxth	r2, r0
     46c:	4631      	mov	r1, r6
     46e:	f8d8 0000 	ldr.w	r0, [r8]
     472:	4b08      	ldr	r3, [pc, #32]	; (494 <xprintf+0x178>)
     474:	4798      	blx	r3
						while (!usart_async_is_tx_empty(&USART_1)) {}
     476:	4628      	mov	r0, r5
     478:	47a0      	blx	r4
     47a:	2800      	cmp	r0, #0
     47c:	d0fb      	beq.n	476 <xprintf+0x15a>
     47e:	e785      	b.n	38c <xprintf+0x70>
			}	
		}
	} 
	
	va_end(arg); 
} 
     480:	b002      	add	sp, #8
     482:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
     486:	b004      	add	sp, #16
     488:	4770      	bx	lr
     48a:	bf00      	nop
     48c:	200074dc 	.word	0x200074dc
     490:	000020e9 	.word	0x000020e9
     494:	00001831 	.word	0x00001831
     498:	000002ed 	.word	0x000002ed
     49c:	0000db1d 	.word	0x0000db1d
     4a0:	20007f20 	.word	0x20007f20

000004a4 <read_boardvalues>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: read and access all main board hardware such as I2C and GPIO to collate a live snapshot of plugged-in cards and sensors
// Returns:     Nothing
// *****************************************************************************************************************************************************************
void read_boardvalues(void)
{
     4a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     4a8:	b087      	sub	sp, #28
	int		err;
	
	if (read_hardware_index == 0) {
     4aa:	4ba4      	ldr	r3, [pc, #656]	; (73c <read_boardvalues+0x298>)
     4ac:	781b      	ldrb	r3, [r3, #0]
     4ae:	2b00      	cmp	r3, #0
     4b0:	f000 80e1 	beq.w	676 <read_boardvalues+0x1d2>
	
			readdata_water1 = 0;
		}
		
		read_hardware_index = 1;
	} else if (read_hardware_index == 1) {
     4b4:	2b01      	cmp	r3, #1
     4b6:	f000 80fc 	beq.w	6b2 <read_boardvalues+0x20e>
			
			readdata_water2 = 0;
		}
		
		read_hardware_index = 2;
	} else if (read_hardware_index == 2) {
     4ba:	2b02      	cmp	r3, #2
     4bc:	f000 8117 	beq.w	6ee <read_boardvalues+0x24a>
		}
		
		read_hardware_index = 3;
	} else {
		/* Read the I2C for the dual temp & moisture IC. If bad result(s) write error debug and set variables to 0xFF */
		if ((err = I2C_getTEMPandMOISTURE(PB24_CARDB_I2C_SDA,  PB25_CARDB_I2C_CLK, &readdata_tempmoisture[0], &readdata_tempmoisture[1], &readdata_tempmoisture[2], &readdata_tempmoisture[3]) < 0)) {
     4c0:	4b9f      	ldr	r3, [pc, #636]	; (740 <read_boardvalues+0x29c>)
     4c2:	1e5a      	subs	r2, r3, #1
     4c4:	1cd1      	adds	r1, r2, #3
     4c6:	9101      	str	r1, [sp, #4]
     4c8:	1c91      	adds	r1, r2, #2
     4ca:	9100      	str	r1, [sp, #0]
     4cc:	2139      	movs	r1, #57	; 0x39
     4ce:	2038      	movs	r0, #56	; 0x38
     4d0:	4c9c      	ldr	r4, [pc, #624]	; (744 <read_boardvalues+0x2a0>)
     4d2:	47a0      	blx	r4
     4d4:	0fc6      	lsrs	r6, r0, #31
     4d6:	2800      	cmp	r0, #0
     4d8:	f2c0 8127 	blt.w	72a <read_boardvalues+0x286>
			xprintf("Could NOT read from the moisture & temp sensor on CARDB:I2C [%i]\r\n", err);
		
			memset(&readdata_tempmoisture, 0xFF, 4);
		}
		
		read_hardware_index = 0;
     4dc:	2200      	movs	r2, #0
     4de:	4b97      	ldr	r3, [pc, #604]	; (73c <read_boardvalues+0x298>)
     4e0:	701a      	strb	r2, [r3, #0]
	}

 xprintf("0 = %x\r\n", readdata_tempmoisture[0]);
     4e2:	4d99      	ldr	r5, [pc, #612]	; (748 <read_boardvalues+0x2a4>)
     4e4:	7829      	ldrb	r1, [r5, #0]
     4e6:	4899      	ldr	r0, [pc, #612]	; (74c <read_boardvalues+0x2a8>)
     4e8:	4c99      	ldr	r4, [pc, #612]	; (750 <read_boardvalues+0x2ac>)
     4ea:	47a0      	blx	r4
 xprintf("1 = %x\r\n", readdata_tempmoisture[1]);
     4ec:	7869      	ldrb	r1, [r5, #1]
     4ee:	4899      	ldr	r0, [pc, #612]	; (754 <read_boardvalues+0x2b0>)
     4f0:	47a0      	blx	r4
 xprintf("2 = %x\r\n", readdata_tempmoisture[2]);
     4f2:	78a9      	ldrb	r1, [r5, #2]
     4f4:	4898      	ldr	r0, [pc, #608]	; (758 <read_boardvalues+0x2b4>)
     4f6:	47a0      	blx	r4
 xprintf("3 = %x\r\n", readdata_tempmoisture[3]);
     4f8:	78e9      	ldrb	r1, [r5, #3]
     4fa:	4898      	ldr	r0, [pc, #608]	; (75c <read_boardvalues+0x2b8>)
     4fc:	47a0      	blx	r4
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
     4fe:	a805      	add	r0, sp, #20
     500:	f8df 9304 	ldr.w	r9, [pc, #772]	; 808 <read_boardvalues+0x364>
     504:	47c8      	blx	r9
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
     506:	f8df 8270 	ldr.w	r8, [pc, #624]	; 778 <read_boardvalues+0x2d4>
     50a:	f8d8 2080 	ldr.w	r2, [r8, #128]	; 0x80
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Port *)hw)->Group[submodule_index].IN.reg;
     50e:	f8d8 30a0 	ldr.w	r3, [r8, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
     512:	f8d8 4090 	ldr.w	r4, [r8, #144]	; 0x90

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
     516:	405c      	eors	r4, r3
     518:	4014      	ands	r4, r2
     51a:	405c      	eors	r4, r3

	CRITICAL_SECTION_LEAVE();
     51c:	a805      	add	r0, sp, #20
     51e:	4f90      	ldr	r7, [pc, #576]	; (760 <read_boardvalues+0x2bc>)
     520:	47b8      	blx	r7

	/* Read the main simple GPIO inputs for determining the status of tamper, daughter cards */ 
	tamper = (gpio_get_pin_level(PB02_TAMP_OP)) ? 1 : 0;
     522:	4d90      	ldr	r5, [pc, #576]	; (764 <read_boardvalues+0x2c0>)
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
     524:	f3c4 0480 	ubfx	r4, r4, #2, #1
     528:	702c      	strb	r4, [r5, #0]
	CRITICAL_SECTION_ENTER();
     52a:	a804      	add	r0, sp, #16
     52c:	47c8      	blx	r9
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
     52e:	f8d8 2100 	ldr.w	r2, [r8, #256]	; 0x100
	return ((Port *)hw)->Group[submodule_index].IN.reg;
     532:	f8d8 3120 	ldr.w	r3, [r8, #288]	; 0x120
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
     536:	f8d8 4110 	ldr.w	r4, [r8, #272]	; 0x110
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
     53a:	405c      	eors	r4, r3
     53c:	4014      	ands	r4, r2
     53e:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
     540:	a804      	add	r0, sp, #16
     542:	47b8      	blx	r7
	cardA_present = (gpio_get_pin_level(PC00_CARDA_PRESENT)) ? 0 : 1;
     544:	f084 0401 	eor.w	r4, r4, #1
     548:	f004 0401 	and.w	r4, r4, #1
     54c:	4b86      	ldr	r3, [pc, #536]	; (768 <read_boardvalues+0x2c4>)
     54e:	701c      	strb	r4, [r3, #0]
	CRITICAL_SECTION_ENTER();
     550:	a803      	add	r0, sp, #12
     552:	47c8      	blx	r9
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
     554:	f8d8 2100 	ldr.w	r2, [r8, #256]	; 0x100
	return ((Port *)hw)->Group[submodule_index].IN.reg;
     558:	f8d8 3120 	ldr.w	r3, [r8, #288]	; 0x120
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
     55c:	f8d8 4110 	ldr.w	r4, [r8, #272]	; 0x110
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
     560:	405c      	eors	r4, r3
     562:	4014      	ands	r4, r2
     564:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
     566:	a803      	add	r0, sp, #12
     568:	47b8      	blx	r7
	cardB_present = (gpio_get_pin_level(PC01_CARDB_PRESENT)) ? 0 : 1;
     56a:	f084 0402 	eor.w	r4, r4, #2
     56e:	f3c4 0440 	ubfx	r4, r4, #1, #1
     572:	4b7e      	ldr	r3, [pc, #504]	; (76c <read_boardvalues+0x2c8>)
     574:	701c      	strb	r4, [r3, #0]

	/* If tamper switch is closed and the enclosure lid is correct, then the LEDs do not illuminate. Else show the ETH and PWR LEDs according to the system state */
	if (tamper) {
     576:	782b      	ldrb	r3, [r5, #0]
     578:	2b00      	cmp	r3, #0
     57a:	f000 8150 	beq.w	81e <read_boardvalues+0x37a>
		if (ring_broken == RING_BROKEN) {
     57e:	4b7c      	ldr	r3, [pc, #496]	; (770 <read_boardvalues+0x2cc>)
     580:	781b      	ldrb	r3, [r3, #0]
     582:	2b01      	cmp	r3, #1
     584:	f000 8142 	beq.w	80c <read_boardvalues+0x368>
			gpio_toggle_pin_level(PB03_LED_ETH);
			} else {
			gpio_set_pin_level(PB03_LED_ETH, (good_ethernet) ? 1 : 0);
     588:	4b7a      	ldr	r3, [pc, #488]	; (774 <read_boardvalues+0x2d0>)
	if (level) {
     58a:	781b      	ldrb	r3, [r3, #0]
     58c:	2b00      	cmp	r3, #0
     58e:	f000 8141 	beq.w	814 <read_boardvalues+0x370>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     592:	2208      	movs	r2, #8
     594:	4b78      	ldr	r3, [pc, #480]	; (778 <read_boardvalues+0x2d4>)
     596:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
     59a:	2210      	movs	r2, #16
     59c:	4b76      	ldr	r3, [pc, #472]	; (778 <read_boardvalues+0x2d4>)
     59e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		gpio_set_pin_level(PB03_LED_ETH, 0);
		gpio_set_pin_level(PB04_LED_PWR, 0);
	}

	/* Read the status of the two LEFT and RIGHT main Ethernet ports, along with the T-junction Power & Ethernet adapter channel */
	link_port1 = (readKSZreg(SPI_KSZ8794_PORT1STATUS2) & 0x20) ? 1 : 0;
     5a2:	201e      	movs	r0, #30
     5a4:	4c75      	ldr	r4, [pc, #468]	; (77c <read_boardvalues+0x2d8>)
     5a6:	47a0      	blx	r4
     5a8:	f3c0 1040 	ubfx	r0, r0, #5, #1
     5ac:	4b74      	ldr	r3, [pc, #464]	; (780 <read_boardvalues+0x2dc>)
     5ae:	7018      	strb	r0, [r3, #0]
	link_port2 = (readKSZreg(SPI_KSZ8794_PORT2STATUS2) & 0x20) ? 1 : 0;
     5b0:	202e      	movs	r0, #46	; 0x2e
     5b2:	47a0      	blx	r4
     5b4:	f3c0 1040 	ubfx	r0, r0, #5, #1
     5b8:	4b72      	ldr	r3, [pc, #456]	; (784 <read_boardvalues+0x2e0>)
     5ba:	7018      	strb	r0, [r3, #0]
	link_port3 = (readKSZreg(SPI_KSZ8794_PORT3STATUS2) & 0x20) ? 1 : 0;
     5bc:	203e      	movs	r0, #62	; 0x3e
     5be:	47a0      	blx	r4
     5c0:	f3c0 1040 	ubfx	r0, r0, #5, #1
     5c4:	4b70      	ldr	r3, [pc, #448]	; (788 <read_boardvalues+0x2e4>)
     5c6:	7018      	strb	r0, [r3, #0]

	/* Detect change of status for debug */
	if (tamper != old_tamper) {
     5c8:	4b66      	ldr	r3, [pc, #408]	; (764 <read_boardvalues+0x2c0>)
     5ca:	781b      	ldrb	r3, [r3, #0]
     5cc:	4a6f      	ldr	r2, [pc, #444]	; (78c <read_boardvalues+0x2e8>)
     5ce:	7812      	ldrb	r2, [r2, #0]
     5d0:	429a      	cmp	r2, r3
     5d2:	d007      	beq.n	5e4 <read_boardvalues+0x140>
		xprintf("Lid TAMPER [%s]\r\n", (!tamper) ? "GOOD" : "ACTIVE");
     5d4:	4a6e      	ldr	r2, [pc, #440]	; (790 <read_boardvalues+0x2ec>)
     5d6:	496f      	ldr	r1, [pc, #444]	; (794 <read_boardvalues+0x2f0>)
     5d8:	2b00      	cmp	r3, #0
     5da:	bf18      	it	ne
     5dc:	4611      	movne	r1, r2
     5de:	486e      	ldr	r0, [pc, #440]	; (798 <read_boardvalues+0x2f4>)
     5e0:	4b5b      	ldr	r3, [pc, #364]	; (750 <read_boardvalues+0x2ac>)
     5e2:	4798      	blx	r3
	}

	/* Detect change of status for debug */
	if (link_port1 != old_link_port1) {
     5e4:	4b66      	ldr	r3, [pc, #408]	; (780 <read_boardvalues+0x2dc>)
     5e6:	781b      	ldrb	r3, [r3, #0]
     5e8:	4a6c      	ldr	r2, [pc, #432]	; (79c <read_boardvalues+0x2f8>)
     5ea:	7812      	ldrb	r2, [r2, #0]
     5ec:	429a      	cmp	r2, r3
     5ee:	d007      	beq.n	600 <read_boardvalues+0x15c>
		xprintf("Left Ethernet [%s]\r\n", (link_port1) ? "GOOD" : "LINKDOWN");
     5f0:	4a6b      	ldr	r2, [pc, #428]	; (7a0 <read_boardvalues+0x2fc>)
     5f2:	4968      	ldr	r1, [pc, #416]	; (794 <read_boardvalues+0x2f0>)
     5f4:	2b00      	cmp	r3, #0
     5f6:	bf08      	it	eq
     5f8:	4611      	moveq	r1, r2
     5fa:	486a      	ldr	r0, [pc, #424]	; (7a4 <read_boardvalues+0x300>)
     5fc:	4b54      	ldr	r3, [pc, #336]	; (750 <read_boardvalues+0x2ac>)
     5fe:	4798      	blx	r3
	}

	/* Detect change of status for debug */
	if (link_port2 != old_link_port2) {
     600:	4b60      	ldr	r3, [pc, #384]	; (784 <read_boardvalues+0x2e0>)
     602:	781b      	ldrb	r3, [r3, #0]
     604:	4a68      	ldr	r2, [pc, #416]	; (7a8 <read_boardvalues+0x304>)
     606:	7812      	ldrb	r2, [r2, #0]
     608:	429a      	cmp	r2, r3
     60a:	d007      	beq.n	61c <read_boardvalues+0x178>
		xprintf("Right Ethernet [%s]\r\n", (link_port2) ? "GOOD" : "LINKDOWN");
     60c:	4a64      	ldr	r2, [pc, #400]	; (7a0 <read_boardvalues+0x2fc>)
     60e:	4961      	ldr	r1, [pc, #388]	; (794 <read_boardvalues+0x2f0>)
     610:	2b00      	cmp	r3, #0
     612:	bf08      	it	eq
     614:	4611      	moveq	r1, r2
     616:	4865      	ldr	r0, [pc, #404]	; (7ac <read_boardvalues+0x308>)
     618:	4b4d      	ldr	r3, [pc, #308]	; (750 <read_boardvalues+0x2ac>)
     61a:	4798      	blx	r3
	}

	/* Detect change of status for debug */
	if (link_port3 != old_link_port3) {
     61c:	4b5a      	ldr	r3, [pc, #360]	; (788 <read_boardvalues+0x2e4>)
     61e:	781b      	ldrb	r3, [r3, #0]
     620:	4a63      	ldr	r2, [pc, #396]	; (7b0 <read_boardvalues+0x30c>)
     622:	7812      	ldrb	r2, [r2, #0]
     624:	429a      	cmp	r2, r3
     626:	d007      	beq.n	638 <read_boardvalues+0x194>
		xprintf("Power & Ethernet <Comms Link> [%s]\r\n", (link_port3) ? "GOOD" : "DOWN");
     628:	4a62      	ldr	r2, [pc, #392]	; (7b4 <read_boardvalues+0x310>)
     62a:	495a      	ldr	r1, [pc, #360]	; (794 <read_boardvalues+0x2f0>)
     62c:	2b00      	cmp	r3, #0
     62e:	bf08      	it	eq
     630:	4611      	moveq	r1, r2
     632:	4861      	ldr	r0, [pc, #388]	; (7b8 <read_boardvalues+0x314>)
     634:	4b46      	ldr	r3, [pc, #280]	; (750 <read_boardvalues+0x2ac>)
     636:	4798      	blx	r3
	}

	/* Detect change of status of Slot [A] daughter-card */
	if ((!cardA_old) && (cardA_present)) {
     638:	4b60      	ldr	r3, [pc, #384]	; (7bc <read_boardvalues+0x318>)
     63a:	781b      	ldrb	r3, [r3, #0]
     63c:	2b00      	cmp	r3, #0
     63e:	f040 81b3 	bne.w	9a8 <read_boardvalues+0x504>
     642:	4b49      	ldr	r3, [pc, #292]	; (768 <read_boardvalues+0x2c4>)
     644:	781b      	ldrb	r3, [r3, #0]
     646:	2b00      	cmp	r3, #0
     648:	f000 8196 	beq.w	978 <read_boardvalues+0x4d4>
		/* Read the I2C device address on the card to establish type of card */
#ifdef FORCE_CARD_TO_BE_VIBRATEK
			cardA_type = CARD_VIBRATEK;
     64c:	2201      	movs	r2, #1
     64e:	4b5c      	ldr	r3, [pc, #368]	; (7c0 <read_boardvalues+0x31c>)
     650:	701a      	strb	r2, [r3, #0]
			cardA_type = CARD_MINI_IO;
		} else {
			cardA_type = CARD_NOTFITTED;
		}
#endif	
		if (err < 0) {
     652:	2e00      	cmp	r6, #0
     654:	f2c0 80eb 	blt.w	82e <read_boardvalues+0x38a>
			xprintf("CARDA is a VIBRAPOINT\r\n");
			break;
			
			case CARD_VIBRATEK:
			/* Set the gain for the VibraTek card on the ADC reference voltage */
			if ((err = I2C_setGAIN(PC27_CARDA_I2C_SDA,  PC28_CARDA_I2C_CLK, ((CONFIG *)&settings_buffer)->gain_cardA) < 0)) {
     658:	4b5a      	ldr	r3, [pc, #360]	; (7c4 <read_boardvalues+0x320>)
     65a:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
     65e:	215c      	movs	r1, #92	; 0x5c
     660:	205b      	movs	r0, #91	; 0x5b
     662:	4b59      	ldr	r3, [pc, #356]	; (7c8 <read_boardvalues+0x324>)
     664:	4798      	blx	r3
     666:	0fc6      	lsrs	r6, r0, #31
     668:	2800      	cmp	r0, #0
     66a:	f2c0 8113 	blt.w	894 <read_boardvalues+0x3f0>
				xprintf("Could NOT write to the DAC Gain controller on CARDA:I2C [%i]\r\n", err);
			}
			
			xprintf("CARDA is a VIBRATEK\r\n");
     66e:	4857      	ldr	r0, [pc, #348]	; (7cc <read_boardvalues+0x328>)
     670:	4b37      	ldr	r3, [pc, #220]	; (750 <read_boardvalues+0x2ac>)
     672:	4798      	blx	r3
			break;
     674:	e19c      	b.n	9b0 <read_boardvalues+0x50c>
}

static inline void hri_adc_write_INPUTCTRL_reg(const void *const hw, hri_adc_inputctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->INPUTCTRL.reg = data;
     676:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
     67a:	4b55      	ldr	r3, [pc, #340]	; (7d0 <read_boardvalues+0x32c>)
     67c:	809a      	strh	r2, [r3, #4]
		delay_ms(2);
     67e:	2002      	movs	r0, #2
     680:	4b54      	ldr	r3, [pc, #336]	; (7d4 <read_boardvalues+0x330>)
     682:	4798      	blx	r3
		err = adc_sync_read_channel(&ADC_0, 0, (uint8_t *const)&readdata_water1, 1);
     684:	2301      	movs	r3, #1
     686:	4a54      	ldr	r2, [pc, #336]	; (7d8 <read_boardvalues+0x334>)
     688:	2100      	movs	r1, #0
     68a:	4854      	ldr	r0, [pc, #336]	; (7dc <read_boardvalues+0x338>)
     68c:	4c54      	ldr	r4, [pc, #336]	; (7e0 <read_boardvalues+0x33c>)
     68e:	47a0      	blx	r4
     690:	4606      	mov	r6, r0
		xprintf("err water 1 = %d\r\n", err);
     692:	4601      	mov	r1, r0
     694:	4853      	ldr	r0, [pc, #332]	; (7e4 <read_boardvalues+0x340>)
     696:	4b2e      	ldr	r3, [pc, #184]	; (750 <read_boardvalues+0x2ac>)
     698:	4798      	blx	r3
		if (err != 1) {
     69a:	2e01      	cmp	r6, #1
     69c:	d005      	beq.n	6aa <read_boardvalues+0x206>
			xprintf("Could NOT read from the water detector 1\r\n");
     69e:	4852      	ldr	r0, [pc, #328]	; (7e8 <read_boardvalues+0x344>)
     6a0:	4b2b      	ldr	r3, [pc, #172]	; (750 <read_boardvalues+0x2ac>)
     6a2:	4798      	blx	r3
			readdata_water1 = 0;
     6a4:	2200      	movs	r2, #0
     6a6:	4b4c      	ldr	r3, [pc, #304]	; (7d8 <read_boardvalues+0x334>)
     6a8:	701a      	strb	r2, [r3, #0]
		read_hardware_index = 1;
     6aa:	2201      	movs	r2, #1
     6ac:	4b23      	ldr	r3, [pc, #140]	; (73c <read_boardvalues+0x298>)
     6ae:	701a      	strb	r2, [r3, #0]
     6b0:	e717      	b.n	4e2 <read_boardvalues+0x3e>
     6b2:	f641 0202 	movw	r2, #6146	; 0x1802
     6b6:	4b46      	ldr	r3, [pc, #280]	; (7d0 <read_boardvalues+0x32c>)
     6b8:	809a      	strh	r2, [r3, #4]
		delay_ms(2);
     6ba:	2002      	movs	r0, #2
     6bc:	4b45      	ldr	r3, [pc, #276]	; (7d4 <read_boardvalues+0x330>)
     6be:	4798      	blx	r3
		err = adc_sync_read_channel(&ADC_0, 0, (uint8_t *const)&readdata_water2, 1);
     6c0:	2301      	movs	r3, #1
     6c2:	4a4a      	ldr	r2, [pc, #296]	; (7ec <read_boardvalues+0x348>)
     6c4:	2100      	movs	r1, #0
     6c6:	4845      	ldr	r0, [pc, #276]	; (7dc <read_boardvalues+0x338>)
     6c8:	4c45      	ldr	r4, [pc, #276]	; (7e0 <read_boardvalues+0x33c>)
     6ca:	47a0      	blx	r4
     6cc:	4606      	mov	r6, r0
		xprintf("err water 2 = %d\r\n", err);
     6ce:	4601      	mov	r1, r0
     6d0:	4847      	ldr	r0, [pc, #284]	; (7f0 <read_boardvalues+0x34c>)
     6d2:	4b1f      	ldr	r3, [pc, #124]	; (750 <read_boardvalues+0x2ac>)
     6d4:	4798      	blx	r3
		if (err != 1) {
     6d6:	2e01      	cmp	r6, #1
     6d8:	d005      	beq.n	6e6 <read_boardvalues+0x242>
			xprintf("Could NOT read from the water detector 2\r\n");
     6da:	4846      	ldr	r0, [pc, #280]	; (7f4 <read_boardvalues+0x350>)
     6dc:	4b1c      	ldr	r3, [pc, #112]	; (750 <read_boardvalues+0x2ac>)
     6de:	4798      	blx	r3
			readdata_water2 = 0;
     6e0:	2200      	movs	r2, #0
     6e2:	4b42      	ldr	r3, [pc, #264]	; (7ec <read_boardvalues+0x348>)
     6e4:	701a      	strb	r2, [r3, #0]
		read_hardware_index = 2;
     6e6:	2202      	movs	r2, #2
     6e8:	4b14      	ldr	r3, [pc, #80]	; (73c <read_boardvalues+0x298>)
     6ea:	701a      	strb	r2, [r3, #0]
     6ec:	e6f9      	b.n	4e2 <read_boardvalues+0x3e>
     6ee:	f641 0201 	movw	r2, #6145	; 0x1801
     6f2:	4b37      	ldr	r3, [pc, #220]	; (7d0 <read_boardvalues+0x32c>)
     6f4:	809a      	strh	r2, [r3, #4]
		delay_ms(2);
     6f6:	2002      	movs	r0, #2
     6f8:	4b36      	ldr	r3, [pc, #216]	; (7d4 <read_boardvalues+0x330>)
     6fa:	4798      	blx	r3
		err = adc_sync_read_channel(&ADC_0, 0, (uint8_t *const)&highvoltage, 1);
     6fc:	2301      	movs	r3, #1
     6fe:	4a3e      	ldr	r2, [pc, #248]	; (7f8 <read_boardvalues+0x354>)
     700:	2100      	movs	r1, #0
     702:	4836      	ldr	r0, [pc, #216]	; (7dc <read_boardvalues+0x338>)
     704:	4c36      	ldr	r4, [pc, #216]	; (7e0 <read_boardvalues+0x33c>)
     706:	47a0      	blx	r4
     708:	4606      	mov	r6, r0
		xprintf("err HV = %d\r\n", err);
     70a:	4601      	mov	r1, r0
     70c:	483b      	ldr	r0, [pc, #236]	; (7fc <read_boardvalues+0x358>)
     70e:	4b10      	ldr	r3, [pc, #64]	; (750 <read_boardvalues+0x2ac>)
     710:	4798      	blx	r3
		if (err != 1) {
     712:	2e01      	cmp	r6, #1
     714:	d005      	beq.n	722 <read_boardvalues+0x27e>
			xprintf("Could NOT read from the HV divider\r\n");
     716:	483a      	ldr	r0, [pc, #232]	; (800 <read_boardvalues+0x35c>)
     718:	4b0d      	ldr	r3, [pc, #52]	; (750 <read_boardvalues+0x2ac>)
     71a:	4798      	blx	r3
			highvoltage = 0;
     71c:	2200      	movs	r2, #0
     71e:	4b36      	ldr	r3, [pc, #216]	; (7f8 <read_boardvalues+0x354>)
     720:	701a      	strb	r2, [r3, #0]
		read_hardware_index = 3;
     722:	2203      	movs	r2, #3
     724:	4b05      	ldr	r3, [pc, #20]	; (73c <read_boardvalues+0x298>)
     726:	701a      	strb	r2, [r3, #0]
     728:	e6db      	b.n	4e2 <read_boardvalues+0x3e>
			xprintf("Could NOT read from the moisture & temp sensor on CARDB:I2C [%i]\r\n", err);
     72a:	2101      	movs	r1, #1
     72c:	4835      	ldr	r0, [pc, #212]	; (804 <read_boardvalues+0x360>)
     72e:	4b08      	ldr	r3, [pc, #32]	; (750 <read_boardvalues+0x2ac>)
     730:	4798      	blx	r3
			memset(&readdata_tempmoisture, 0xFF, 4);
     732:	f04f 32ff 	mov.w	r2, #4294967295
     736:	4b04      	ldr	r3, [pc, #16]	; (748 <read_boardvalues+0x2a4>)
     738:	601a      	str	r2, [r3, #0]
     73a:	e6cf      	b.n	4dc <read_boardvalues+0x38>
     73c:	2000757e 	.word	0x2000757e
     740:	20007fb9 	.word	0x20007fb9
     744:	00006ee5 	.word	0x00006ee5
     748:	20007fb8 	.word	0x20007fb8
     74c:	0000e884 	.word	0x0000e884
     750:	0000031d 	.word	0x0000031d
     754:	0000e890 	.word	0x0000e890
     758:	0000e89c 	.word	0x0000e89c
     75c:	0000e8a8 	.word	0x0000e8a8
     760:	000014db 	.word	0x000014db
     764:	20007fb3 	.word	0x20007fb3
     768:	2000857c 	.word	0x2000857c
     76c:	2000757f 	.word	0x2000757f
     770:	2000826d 	.word	0x2000826d
     774:	2000757d 	.word	0x2000757d
     778:	41008000 	.word	0x41008000
     77c:	0000d949 	.word	0x0000d949
     780:	20007575 	.word	0x20007575
     784:	20008294 	.word	0x20008294
     788:	20007579 	.word	0x20007579
     78c:	2000854c 	.word	0x2000854c
     790:	0000e774 	.word	0x0000e774
     794:	0000e76c 	.word	0x0000e76c
     798:	0000e8b4 	.word	0x0000e8b4
     79c:	20007589 	.word	0x20007589
     7a0:	0000e77c 	.word	0x0000e77c
     7a4:	0000e8c8 	.word	0x0000e8c8
     7a8:	20007574 	.word	0x20007574
     7ac:	0000e8e0 	.word	0x0000e8e0
     7b0:	20008278 	.word	0x20008278
     7b4:	0000e780 	.word	0x0000e780
     7b8:	0000e8f8 	.word	0x0000e8f8
     7bc:	20007577 	.word	0x20007577
     7c0:	20007c6e 	.word	0x20007c6e
     7c4:	20007f2c 	.word	0x20007f2c
     7c8:	00006b95 	.word	0x00006b95
     7cc:	0000ea48 	.word	0x0000ea48
     7d0:	43001c00 	.word	0x43001c00
     7d4:	0000154d 	.word	0x0000154d
     7d8:	20008562 	.word	0x20008562
     7dc:	20007470 	.word	0x20007470
     7e0:	000013a1 	.word	0x000013a1
     7e4:	0000e788 	.word	0x0000e788
     7e8:	0000e79c 	.word	0x0000e79c
     7ec:	2000854d 	.word	0x2000854d
     7f0:	0000e7c8 	.word	0x0000e7c8
     7f4:	0000e7dc 	.word	0x0000e7dc
     7f8:	20008557 	.word	0x20008557
     7fc:	0000e808 	.word	0x0000e808
     800:	0000e818 	.word	0x0000e818
     804:	0000e840 	.word	0x0000e840
     808:	000014cd 	.word	0x000014cd
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
     80c:	2208      	movs	r2, #8
     80e:	f8c8 209c 	str.w	r2, [r8, #156]	; 0x9c
     812:	e6c2      	b.n	59a <read_boardvalues+0xf6>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     814:	2208      	movs	r2, #8
     816:	4b73      	ldr	r3, [pc, #460]	; (9e4 <read_boardvalues+0x540>)
     818:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
     81c:	e6bd      	b.n	59a <read_boardvalues+0xf6>
     81e:	4b71      	ldr	r3, [pc, #452]	; (9e4 <read_boardvalues+0x540>)
     820:	2208      	movs	r2, #8
     822:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
     826:	2210      	movs	r2, #16
     828:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
     82c:	e6b9      	b.n	5a2 <read_boardvalues+0xfe>
			xprintf("Could not read I2C bus on CARDA for I2C_check_deviceID() [%i]\r\n", err);
     82e:	4631      	mov	r1, r6
     830:	486d      	ldr	r0, [pc, #436]	; (9e8 <read_boardvalues+0x544>)
     832:	4b6e      	ldr	r3, [pc, #440]	; (9ec <read_boardvalues+0x548>)
     834:	4798      	blx	r3
		switch (cardA_type) {
     836:	4b6e      	ldr	r3, [pc, #440]	; (9f0 <read_boardvalues+0x54c>)
     838:	781b      	ldrb	r3, [r3, #0]
     83a:	3b01      	subs	r3, #1
     83c:	2b04      	cmp	r3, #4
     83e:	d80d      	bhi.n	85c <read_boardvalues+0x3b8>
     840:	a201      	add	r2, pc, #4	; (adr r2, 848 <read_boardvalues+0x3a4>)
     842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     846:	bf00      	nop
     848:	00000659 	.word	0x00000659
     84c:	0000086d 	.word	0x0000086d
     850:	00000865 	.word	0x00000865
     854:	0000088d 	.word	0x0000088d
     858:	0000089f 	.word	0x0000089f
			xprintf("CARDA inserted but not identified\r\n");
     85c:	4865      	ldr	r0, [pc, #404]	; (9f4 <read_boardvalues+0x550>)
     85e:	4b63      	ldr	r3, [pc, #396]	; (9ec <read_boardvalues+0x548>)
     860:	4798      	blx	r3
			break;
     862:	e0a5      	b.n	9b0 <read_boardvalues+0x50c>
			xprintf("CARDA is a MAXI IO\r\n");
     864:	4864      	ldr	r0, [pc, #400]	; (9f8 <read_boardvalues+0x554>)
     866:	4b61      	ldr	r3, [pc, #388]	; (9ec <read_boardvalues+0x548>)
     868:	4798      	blx	r3
			break;
     86a:	e0a1      	b.n	9b0 <read_boardvalues+0x50c>
			if ((err = I2C_configEXPANDER(PC27_CARDA_I2C_SDA,  PC28_CARDA_I2C_CLK) < 0)) {
     86c:	215c      	movs	r1, #92	; 0x5c
     86e:	205b      	movs	r0, #91	; 0x5b
     870:	4b62      	ldr	r3, [pc, #392]	; (9fc <read_boardvalues+0x558>)
     872:	4798      	blx	r3
     874:	0fc6      	lsrs	r6, r0, #31
     876:	2800      	cmp	r0, #0
     878:	db03      	blt.n	882 <read_boardvalues+0x3de>
			xprintf("CARDA is a MINI IO\r\n");
     87a:	4861      	ldr	r0, [pc, #388]	; (a00 <read_boardvalues+0x55c>)
     87c:	4b5b      	ldr	r3, [pc, #364]	; (9ec <read_boardvalues+0x548>)
     87e:	4798      	blx	r3
			break;
     880:	e096      	b.n	9b0 <read_boardvalues+0x50c>
				xprintf("Could NOT write to the Mini-IO Expander on CARDA:I2C [%i]\r\n", err);
     882:	2101      	movs	r1, #1
     884:	485f      	ldr	r0, [pc, #380]	; (a04 <read_boardvalues+0x560>)
     886:	4b59      	ldr	r3, [pc, #356]	; (9ec <read_boardvalues+0x548>)
     888:	4798      	blx	r3
     88a:	e7f6      	b.n	87a <read_boardvalues+0x3d6>
			xprintf("CARDA is a VIBRAPOINT\r\n");
     88c:	485e      	ldr	r0, [pc, #376]	; (a08 <read_boardvalues+0x564>)
     88e:	4b57      	ldr	r3, [pc, #348]	; (9ec <read_boardvalues+0x548>)
     890:	4798      	blx	r3
			break;
     892:	e08d      	b.n	9b0 <read_boardvalues+0x50c>
				xprintf("Could NOT write to the DAC Gain controller on CARDA:I2C [%i]\r\n", err);
     894:	2101      	movs	r1, #1
     896:	485d      	ldr	r0, [pc, #372]	; (a0c <read_boardvalues+0x568>)
     898:	4b54      	ldr	r3, [pc, #336]	; (9ec <read_boardvalues+0x548>)
     89a:	4798      	blx	r3
     89c:	e6e7      	b.n	66e <read_boardvalues+0x1ca>
			
			case CARD_PE:
			/* Turn on the T-junction port 3 to the Power & Ethernet board attachment */
			writeKSZreg(SPI_KSZ8794_PORT3CONTROL2, 0x06);
     89e:	2106      	movs	r1, #6
     8a0:	2032      	movs	r0, #50	; 0x32
     8a2:	4b5b      	ldr	r3, [pc, #364]	; (a10 <read_boardvalues+0x56c>)
     8a4:	4798      	blx	r3
			delay_us(50);
     8a6:	2032      	movs	r0, #50	; 0x32
     8a8:	4b5a      	ldr	r3, [pc, #360]	; (a14 <read_boardvalues+0x570>)
     8aa:	4798      	blx	r3
			
			if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL2, 0x06))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL2] not correct\r\n"); }
     8ac:	2106      	movs	r1, #6
     8ae:	2032      	movs	r0, #50	; 0x32
     8b0:	4b59      	ldr	r3, [pc, #356]	; (a18 <read_boardvalues+0x574>)
     8b2:	4798      	blx	r3
     8b4:	b118      	cbz	r0, 8be <read_boardvalues+0x41a>
				
			xprintf("CARDA is a Power & Ethernet Daughter-Card\r\n");
     8b6:	4859      	ldr	r0, [pc, #356]	; (a1c <read_boardvalues+0x578>)
     8b8:	4b4c      	ldr	r3, [pc, #304]	; (9ec <read_boardvalues+0x548>)
     8ba:	4798      	blx	r3
			break;
     8bc:	e078      	b.n	9b0 <read_boardvalues+0x50c>
			if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL2, 0x06))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL2] not correct\r\n"); }
     8be:	4858      	ldr	r0, [pc, #352]	; (a20 <read_boardvalues+0x57c>)
     8c0:	4b4a      	ldr	r3, [pc, #296]	; (9ec <read_boardvalues+0x548>)
     8c2:	4798      	blx	r3
     8c4:	e7f7      	b.n	8b6 <read_boardvalues+0x412>
		if (cardA_old) {
			/* Turn off the T-junction port 3 to the Power & Ethernet board attachment */
			writeKSZreg(SPI_KSZ8794_PORT3CONTROL2, 0x00);
			delay_us(50);
			
			if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL2, 0x00))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL2] not correct\r\n"); }
     8c6:	4856      	ldr	r0, [pc, #344]	; (a20 <read_boardvalues+0x57c>)
     8c8:	4b48      	ldr	r3, [pc, #288]	; (9ec <read_boardvalues+0x548>)
     8ca:	4798      	blx	r3
     8cc:	e068      	b.n	9a0 <read_boardvalues+0x4fc>
			cardB_type = CARD_NOTFITTED;
		}
#endif
		
		if (err < 0) {
			xprintf("Could not read I2C bus on CARDB for I2C_check_deviceID() [%i]\r\n", err);
     8ce:	4631      	mov	r1, r6
     8d0:	4854      	ldr	r0, [pc, #336]	; (a24 <read_boardvalues+0x580>)
     8d2:	4b46      	ldr	r3, [pc, #280]	; (9ec <read_boardvalues+0x548>)
     8d4:	4798      	blx	r3
		}
		
		/* Actions to be taken for each different card type */
		switch (cardB_type) {
     8d6:	4b54      	ldr	r3, [pc, #336]	; (a28 <read_boardvalues+0x584>)
     8d8:	781b      	ldrb	r3, [r3, #0]
     8da:	3b01      	subs	r3, #1
     8dc:	2b03      	cmp	r3, #3
     8de:	d803      	bhi.n	8e8 <read_boardvalues+0x444>
     8e0:	e8df f003 	tbb	[pc, r3]
     8e4:	19060a73 	.word	0x19060a73
			case CARD_NOTFITTED:
			default:
			xprintf("CARDB inserted but not identified\r\n");
     8e8:	4850      	ldr	r0, [pc, #320]	; (a2c <read_boardvalues+0x588>)
     8ea:	4b40      	ldr	r3, [pc, #256]	; (9ec <read_boardvalues+0x548>)
     8ec:	4798      	blx	r3
			break;
     8ee:	e01d      	b.n	92c <read_boardvalues+0x488>
			
			case CARD_MAXI_IO:
			xprintf("CARDB is a MAXI IO\r\n");
     8f0:	484f      	ldr	r0, [pc, #316]	; (a30 <read_boardvalues+0x58c>)
     8f2:	4b3e      	ldr	r3, [pc, #248]	; (9ec <read_boardvalues+0x548>)
     8f4:	4798      	blx	r3
			break;
     8f6:	e019      	b.n	92c <read_boardvalues+0x488>
			
			case CARD_MINI_IO:
			/* Set the configuration on the Mini-IO card */
			if ((err = I2C_configEXPANDER(PB24_CARDB_I2C_SDA,  PB25_CARDB_I2C_CLK) < 0)) {
     8f8:	2139      	movs	r1, #57	; 0x39
     8fa:	2038      	movs	r0, #56	; 0x38
     8fc:	4b3f      	ldr	r3, [pc, #252]	; (9fc <read_boardvalues+0x558>)
     8fe:	4798      	blx	r3
     900:	2800      	cmp	r0, #0
     902:	db03      	blt.n	90c <read_boardvalues+0x468>
				xprintf("Could NOT write to the Mini-IO Expander on CARDB:I2C [%i]\r\n", err);
			}
			
			xprintf("CARDB is a MINI IO\r\n");
     904:	484b      	ldr	r0, [pc, #300]	; (a34 <read_boardvalues+0x590>)
     906:	4b39      	ldr	r3, [pc, #228]	; (9ec <read_boardvalues+0x548>)
     908:	4798      	blx	r3
			break;
     90a:	e00f      	b.n	92c <read_boardvalues+0x488>
				xprintf("Could NOT write to the Mini-IO Expander on CARDB:I2C [%i]\r\n", err);
     90c:	2101      	movs	r1, #1
     90e:	484a      	ldr	r0, [pc, #296]	; (a38 <read_boardvalues+0x594>)
     910:	4b36      	ldr	r3, [pc, #216]	; (9ec <read_boardvalues+0x548>)
     912:	4798      	blx	r3
     914:	e7f6      	b.n	904 <read_boardvalues+0x460>
			
			case CARD_VIBRAPOINT:
			xprintf("CARDB is a VIBRAPOINT\r\n");
     916:	4849      	ldr	r0, [pc, #292]	; (a3c <read_boardvalues+0x598>)
     918:	4b34      	ldr	r3, [pc, #208]	; (9ec <read_boardvalues+0x548>)
     91a:	4798      	blx	r3
			break;
     91c:	e006      	b.n	92c <read_boardvalues+0x488>
			
			case CARD_VIBRATEK:
			/* Set the gain for the VibraTek card on the ADC reference voltage */
			if ((err = I2C_setGAIN(PB24_CARDB_I2C_SDA,  PB25_CARDB_I2C_CLK, ((CONFIG *)&settings_buffer)->gain_cardB)) < 0) {
				xprintf("Could NOT write to the DAC Gain controller on CARDB:I2C [%i]\r\n", err);
     91e:	4848      	ldr	r0, [pc, #288]	; (a40 <read_boardvalues+0x59c>)
     920:	4b32      	ldr	r3, [pc, #200]	; (9ec <read_boardvalues+0x548>)
     922:	4798      	blx	r3
     924:	e05a      	b.n	9dc <read_boardvalues+0x538>
			}
			
			xprintf("CARDB is a VIBRATEK\r\n");
			break;
		}
	} else if (!cardB_present) {
     926:	4b47      	ldr	r3, [pc, #284]	; (a44 <read_boardvalues+0x5a0>)
     928:	781b      	ldrb	r3, [r3, #0]
     92a:	b1d3      	cbz	r3, 962 <read_boardvalues+0x4be>
			xprintf("CARDB has been REMOVED\r\n");
		}
	}

	/* Update the old live states so that next time round, we can detect any changes since this time */
	cardA_old = cardA_present;
     92c:	4b46      	ldr	r3, [pc, #280]	; (a48 <read_boardvalues+0x5a4>)
     92e:	781a      	ldrb	r2, [r3, #0]
     930:	4b46      	ldr	r3, [pc, #280]	; (a4c <read_boardvalues+0x5a8>)
     932:	701a      	strb	r2, [r3, #0]
	cardB_old = cardB_present;
     934:	4b43      	ldr	r3, [pc, #268]	; (a44 <read_boardvalues+0x5a0>)
     936:	781a      	ldrb	r2, [r3, #0]
     938:	4b45      	ldr	r3, [pc, #276]	; (a50 <read_boardvalues+0x5ac>)
     93a:	701a      	strb	r2, [r3, #0]
	old_tamper = tamper;
     93c:	4b45      	ldr	r3, [pc, #276]	; (a54 <read_boardvalues+0x5b0>)
     93e:	781a      	ldrb	r2, [r3, #0]
     940:	4b45      	ldr	r3, [pc, #276]	; (a58 <read_boardvalues+0x5b4>)
     942:	701a      	strb	r2, [r3, #0]
	old_link_port1 = link_port1;
     944:	4b45      	ldr	r3, [pc, #276]	; (a5c <read_boardvalues+0x5b8>)
     946:	781a      	ldrb	r2, [r3, #0]
     948:	4b45      	ldr	r3, [pc, #276]	; (a60 <read_boardvalues+0x5bc>)
     94a:	701a      	strb	r2, [r3, #0]
	old_link_port2 = link_port2;
     94c:	4b45      	ldr	r3, [pc, #276]	; (a64 <read_boardvalues+0x5c0>)
     94e:	781a      	ldrb	r2, [r3, #0]
     950:	4b45      	ldr	r3, [pc, #276]	; (a68 <read_boardvalues+0x5c4>)
     952:	701a      	strb	r2, [r3, #0]
	old_link_port3 = link_port3;
     954:	4b45      	ldr	r3, [pc, #276]	; (a6c <read_boardvalues+0x5c8>)
     956:	781a      	ldrb	r2, [r3, #0]
     958:	4b45      	ldr	r3, [pc, #276]	; (a70 <read_boardvalues+0x5cc>)
     95a:	701a      	strb	r2, [r3, #0]
     95c:	b007      	add	sp, #28
     95e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cardB_type = CARD_NOTFITTED;
     962:	2200      	movs	r2, #0
     964:	4b30      	ldr	r3, [pc, #192]	; (a28 <read_boardvalues+0x584>)
     966:	701a      	strb	r2, [r3, #0]
		if (cardA_old) {
     968:	4b38      	ldr	r3, [pc, #224]	; (a4c <read_boardvalues+0x5a8>)
     96a:	781b      	ldrb	r3, [r3, #0]
     96c:	2b00      	cmp	r3, #0
     96e:	d0dd      	beq.n	92c <read_boardvalues+0x488>
			xprintf("CARDB has been REMOVED\r\n");
     970:	4840      	ldr	r0, [pc, #256]	; (a74 <read_boardvalues+0x5d0>)
     972:	4b1e      	ldr	r3, [pc, #120]	; (9ec <read_boardvalues+0x548>)
     974:	4798      	blx	r3
     976:	e7d9      	b.n	92c <read_boardvalues+0x488>
		cardA_type = CARD_NOTFITTED;
     978:	2200      	movs	r2, #0
     97a:	4b1d      	ldr	r3, [pc, #116]	; (9f0 <read_boardvalues+0x54c>)
     97c:	701a      	strb	r2, [r3, #0]
     97e:	e017      	b.n	9b0 <read_boardvalues+0x50c>
     980:	2400      	movs	r4, #0
     982:	4b1b      	ldr	r3, [pc, #108]	; (9f0 <read_boardvalues+0x54c>)
     984:	701c      	strb	r4, [r3, #0]
			writeKSZreg(SPI_KSZ8794_PORT3CONTROL2, 0x00);
     986:	4621      	mov	r1, r4
     988:	2032      	movs	r0, #50	; 0x32
     98a:	4b21      	ldr	r3, [pc, #132]	; (a10 <read_boardvalues+0x56c>)
     98c:	4798      	blx	r3
			delay_us(50);
     98e:	2032      	movs	r0, #50	; 0x32
     990:	4b20      	ldr	r3, [pc, #128]	; (a14 <read_boardvalues+0x570>)
     992:	4798      	blx	r3
			if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL2, 0x00))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL2] not correct\r\n"); }
     994:	4621      	mov	r1, r4
     996:	2032      	movs	r0, #50	; 0x32
     998:	4b1f      	ldr	r3, [pc, #124]	; (a18 <read_boardvalues+0x574>)
     99a:	4798      	blx	r3
     99c:	2800      	cmp	r0, #0
     99e:	d092      	beq.n	8c6 <read_boardvalues+0x422>
			xprintf("CARDA has been REMOVED\r\n");
     9a0:	4835      	ldr	r0, [pc, #212]	; (a78 <read_boardvalues+0x5d4>)
     9a2:	4b12      	ldr	r3, [pc, #72]	; (9ec <read_boardvalues+0x548>)
     9a4:	4798      	blx	r3
     9a6:	e003      	b.n	9b0 <read_boardvalues+0x50c>
		} else if (!cardA_present) {
     9a8:	4b27      	ldr	r3, [pc, #156]	; (a48 <read_boardvalues+0x5a4>)
     9aa:	781b      	ldrb	r3, [r3, #0]
     9ac:	2b00      	cmp	r3, #0
     9ae:	d0e7      	beq.n	980 <read_boardvalues+0x4dc>
	if ((!cardB_old) && (cardB_present)) {
     9b0:	4b27      	ldr	r3, [pc, #156]	; (a50 <read_boardvalues+0x5ac>)
     9b2:	781b      	ldrb	r3, [r3, #0]
     9b4:	2b00      	cmp	r3, #0
     9b6:	d1b6      	bne.n	926 <read_boardvalues+0x482>
     9b8:	4b22      	ldr	r3, [pc, #136]	; (a44 <read_boardvalues+0x5a0>)
     9ba:	781b      	ldrb	r3, [r3, #0]
     9bc:	2b00      	cmp	r3, #0
     9be:	d0d0      	beq.n	962 <read_boardvalues+0x4be>
		cardB_type = CARD_VIBRATEK;
     9c0:	2201      	movs	r2, #1
     9c2:	4b19      	ldr	r3, [pc, #100]	; (a28 <read_boardvalues+0x584>)
     9c4:	701a      	strb	r2, [r3, #0]
		if (err < 0) {
     9c6:	2e00      	cmp	r6, #0
     9c8:	db81      	blt.n	8ce <read_boardvalues+0x42a>
			if ((err = I2C_setGAIN(PB24_CARDB_I2C_SDA,  PB25_CARDB_I2C_CLK, ((CONFIG *)&settings_buffer)->gain_cardB)) < 0) {
     9ca:	4b2c      	ldr	r3, [pc, #176]	; (a7c <read_boardvalues+0x5d8>)
     9cc:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
     9d0:	2139      	movs	r1, #57	; 0x39
     9d2:	2038      	movs	r0, #56	; 0x38
     9d4:	4b2a      	ldr	r3, [pc, #168]	; (a80 <read_boardvalues+0x5dc>)
     9d6:	4798      	blx	r3
     9d8:	1e01      	subs	r1, r0, #0
     9da:	dba0      	blt.n	91e <read_boardvalues+0x47a>
			xprintf("CARDB is a VIBRATEK\r\n");
     9dc:	4829      	ldr	r0, [pc, #164]	; (a84 <read_boardvalues+0x5e0>)
     9de:	4b03      	ldr	r3, [pc, #12]	; (9ec <read_boardvalues+0x548>)
     9e0:	4798      	blx	r3
			break;
     9e2:	e7a3      	b.n	92c <read_boardvalues+0x488>
     9e4:	41008000 	.word	0x41008000
     9e8:	0000e920 	.word	0x0000e920
     9ec:	0000031d 	.word	0x0000031d
     9f0:	20007c6e 	.word	0x20007c6e
     9f4:	0000e960 	.word	0x0000e960
     9f8:	0000e984 	.word	0x0000e984
     9fc:	00005a5d 	.word	0x00005a5d
     a00:	0000e9d8 	.word	0x0000e9d8
     a04:	0000e99c 	.word	0x0000e99c
     a08:	0000e9f0 	.word	0x0000e9f0
     a0c:	0000ea08 	.word	0x0000ea08
     a10:	0000d995 	.word	0x0000d995
     a14:	0000152d 	.word	0x0000152d
     a18:	0000d8f1 	.word	0x0000d8f1
     a1c:	0000ea8c 	.word	0x0000ea8c
     a20:	0000ea60 	.word	0x0000ea60
     a24:	0000ead4 	.word	0x0000ead4
     a28:	20008564 	.word	0x20008564
     a2c:	0000eb14 	.word	0x0000eb14
     a30:	0000eb38 	.word	0x0000eb38
     a34:	0000eb8c 	.word	0x0000eb8c
     a38:	0000eb50 	.word	0x0000eb50
     a3c:	0000eba4 	.word	0x0000eba4
     a40:	0000ebbc 	.word	0x0000ebbc
     a44:	2000757f 	.word	0x2000757f
     a48:	2000857c 	.word	0x2000857c
     a4c:	20007577 	.word	0x20007577
     a50:	2000784d 	.word	0x2000784d
     a54:	20007fb3 	.word	0x20007fb3
     a58:	2000854c 	.word	0x2000854c
     a5c:	20007575 	.word	0x20007575
     a60:	20007589 	.word	0x20007589
     a64:	20008294 	.word	0x20008294
     a68:	20007574 	.word	0x20007574
     a6c:	20007579 	.word	0x20007579
     a70:	20008278 	.word	0x20008278
     a74:	0000ec14 	.word	0x0000ec14
     a78:	0000eab8 	.word	0x0000eab8
     a7c:	20007f2c 	.word	0x20007f2c
     a80:	00006b95 	.word	0x00006b95
     a84:	0000ebfc 	.word	0x0000ebfc

00000a88 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     a88:	e7fe      	b.n	a88 <Dummy_Handler>
	...

00000a8c <Reset_Handler>:
{
     a8c:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     a8e:	4b17      	ldr	r3, [pc, #92]	; (aec <Reset_Handler+0x60>)
     a90:	4a17      	ldr	r2, [pc, #92]	; (af0 <Reset_Handler+0x64>)
     a92:	429a      	cmp	r2, r3
     a94:	d010      	beq.n	ab8 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     a96:	4b17      	ldr	r3, [pc, #92]	; (af4 <Reset_Handler+0x68>)
     a98:	4a14      	ldr	r2, [pc, #80]	; (aec <Reset_Handler+0x60>)
     a9a:	429a      	cmp	r2, r3
     a9c:	d20c      	bcs.n	ab8 <Reset_Handler+0x2c>
     a9e:	3b01      	subs	r3, #1
     aa0:	1a9b      	subs	r3, r3, r2
     aa2:	f023 0303 	bic.w	r3, r3, #3
     aa6:	3304      	adds	r3, #4
     aa8:	4413      	add	r3, r2
     aaa:	4911      	ldr	r1, [pc, #68]	; (af0 <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
     aac:	f851 0b04 	ldr.w	r0, [r1], #4
     ab0:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     ab4:	429a      	cmp	r2, r3
     ab6:	d1f9      	bne.n	aac <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     ab8:	4b0f      	ldr	r3, [pc, #60]	; (af8 <Reset_Handler+0x6c>)
     aba:	4a10      	ldr	r2, [pc, #64]	; (afc <Reset_Handler+0x70>)
     abc:	429a      	cmp	r2, r3
     abe:	d20a      	bcs.n	ad6 <Reset_Handler+0x4a>
     ac0:	3b01      	subs	r3, #1
     ac2:	1a9b      	subs	r3, r3, r2
     ac4:	f023 0303 	bic.w	r3, r3, #3
     ac8:	3304      	adds	r3, #4
     aca:	4413      	add	r3, r2
                *pDest++ = 0;
     acc:	2100      	movs	r1, #0
     ace:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     ad2:	4293      	cmp	r3, r2
     ad4:	d1fb      	bne.n	ace <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     ad6:	4a0a      	ldr	r2, [pc, #40]	; (b00 <Reset_Handler+0x74>)
     ad8:	4b0a      	ldr	r3, [pc, #40]	; (b04 <Reset_Handler+0x78>)
     ada:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     ade:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     ae0:	4b09      	ldr	r3, [pc, #36]	; (b08 <Reset_Handler+0x7c>)
     ae2:	4798      	blx	r3
        main();
     ae4:	4b09      	ldr	r3, [pc, #36]	; (b0c <Reset_Handler+0x80>)
     ae6:	4798      	blx	r3
     ae8:	e7fe      	b.n	ae8 <Reset_Handler+0x5c>
     aea:	bf00      	nop
     aec:	20000000 	.word	0x20000000
     af0:	000117f4 	.word	0x000117f4
     af4:	200002b0 	.word	0x200002b0
     af8:	200090e8 	.word	0x200090e8
     afc:	200002c0 	.word	0x200002c0
     b00:	e000ed00 	.word	0xe000ed00
     b04:	00000000 	.word	0x00000000
     b08:	0000da05 	.word	0x0000da05
     b0c:	0000a6bd 	.word	0x0000a6bd

00000b10 <ADC_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     b10:	4b24      	ldr	r3, [pc, #144]	; (ba4 <ADC_0_PORT_init+0x94>)
     b12:	2204      	movs	r2, #4
     b14:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b16:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     b1a:	629a      	str	r2, [r3, #40]	; 0x28
     b1c:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     b20:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b22:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
	tmp &= ~PORT_PINCFG_PMUXEN;
     b26:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b2a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b32:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     b36:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     b3a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b3e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     b42:	2208      	movs	r2, #8
     b44:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b46:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     b4a:	629a      	str	r2, [r3, #40]	; 0x28
     b4c:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b4e:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
	tmp &= ~PORT_PINCFG_PMUXEN;
     b52:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b56:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b5e:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     b62:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     b66:	f042 0210 	orr.w	r2, r2, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b6a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     b6e:	f44f 7280 	mov.w	r2, #256	; 0x100
     b72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b76:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     b7a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     b7e:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b82:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
     b86:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b8a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b8e:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b92:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     b96:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     b9a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b9e:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
     ba2:	4770      	bx	lr
     ba4:	41008000 	.word	0x41008000

00000ba8 <ADC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
     ba8:	4a04      	ldr	r2, [pc, #16]	; (bbc <ADC_0_CLOCK_init+0x14>)
     baa:	6a13      	ldr	r3, [r2, #32]
     bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     bb0:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     bb2:	2240      	movs	r2, #64	; 0x40
     bb4:	4b02      	ldr	r3, [pc, #8]	; (bc0 <ADC_0_CLOCK_init+0x18>)
     bb6:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
     bba:	4770      	bx	lr
     bbc:	40000800 	.word	0x40000800
     bc0:	40001c00 	.word	0x40001c00

00000bc4 <ADC_0_init>:
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void ADC_0_init(void)
{
     bc4:	b508      	push	{r3, lr}
	ADC_0_CLOCK_init();
     bc6:	4b05      	ldr	r3, [pc, #20]	; (bdc <ADC_0_init+0x18>)
     bc8:	4798      	blx	r3
	ADC_0_PORT_init();
     bca:	4b05      	ldr	r3, [pc, #20]	; (be0 <ADC_0_init+0x1c>)
     bcc:	4798      	blx	r3
	adc_sync_init(&ADC_0, ADC0, (void *)NULL);
     bce:	2200      	movs	r2, #0
     bd0:	4904      	ldr	r1, [pc, #16]	; (be4 <ADC_0_init+0x20>)
     bd2:	4805      	ldr	r0, [pc, #20]	; (be8 <ADC_0_init+0x24>)
     bd4:	4b05      	ldr	r3, [pc, #20]	; (bec <ADC_0_init+0x28>)
     bd6:	4798      	blx	r3
     bd8:	bd08      	pop	{r3, pc}
     bda:	bf00      	nop
     bdc:	00000ba9 	.word	0x00000ba9
     be0:	00000b11 	.word	0x00000b11
     be4:	43001c00 	.word	0x43001c00
     be8:	20007470 	.word	0x20007470
     bec:	00001345 	.word	0x00001345

00000bf0 <CRYPTOGRAPHY_0_init>:
 * \brief AES initialization function
 *
 * Enables AES peripheral, clocks and initializes AES driver
 */
void CRYPTOGRAPHY_0_init(void)
{
     bf0:	b508      	push	{r3, lr}
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_AES;
     bf2:	4a05      	ldr	r2, [pc, #20]	; (c08 <CRYPTOGRAPHY_0_init+0x18>)
     bf4:	69d3      	ldr	r3, [r2, #28]
     bf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     bfa:	61d3      	str	r3, [r2, #28]
	hri_mclk_set_APBCMASK_AES_bit(MCLK);
	aes_sync_init(&CRYPTOGRAPHY_0, AES);
     bfc:	4903      	ldr	r1, [pc, #12]	; (c0c <CRYPTOGRAPHY_0_init+0x1c>)
     bfe:	4804      	ldr	r0, [pc, #16]	; (c10 <CRYPTOGRAPHY_0_init+0x20>)
     c00:	4b04      	ldr	r3, [pc, #16]	; (c14 <CRYPTOGRAPHY_0_init+0x24>)
     c02:	4798      	blx	r3
     c04:	bd08      	pop	{r3, pc}
     c06:	bf00      	nop
     c08:	40000800 	.word	0x40000800
     c0c:	42002400 	.word	0x42002400
     c10:	20007428 	.word	0x20007428
     c14:	00001441 	.word	0x00001441

00000c18 <CRC_0_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_0_init(void)
{
     c18:	b508      	push	{r3, lr}
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     c1a:	4a05      	ldr	r2, [pc, #20]	; (c30 <CRC_0_init+0x18>)
     c1c:	6993      	ldr	r3, [r2, #24]
     c1e:	f043 0302 	orr.w	r3, r3, #2
     c22:	6193      	str	r3, [r2, #24]
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
	crc_sync_init(&CRC_0, DSU);
     c24:	4903      	ldr	r1, [pc, #12]	; (c34 <CRC_0_init+0x1c>)
     c26:	4804      	ldr	r0, [pc, #16]	; (c38 <CRC_0_init+0x20>)
     c28:	4b04      	ldr	r3, [pc, #16]	; (c3c <CRC_0_init+0x24>)
     c2a:	4798      	blx	r3
     c2c:	bd08      	pop	{r3, pc}
     c2e:	bf00      	nop
     c30:	40000800 	.word	0x40000800
     c34:	41002000 	.word	0x41002000
     c38:	20007464 	.word	0x20007464
     c3c:	000014e9 	.word	0x000014e9

00000c40 <HASH_ALGORITHM_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_ICM;
     c40:	4b04      	ldr	r3, [pc, #16]	; (c54 <HASH_ALGORITHM_0_CLOCK_init+0x14>)
     c42:	691a      	ldr	r2, [r3, #16]
     c44:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
     c48:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_ICM;
     c4a:	69da      	ldr	r2, [r3, #28]
     c4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
     c50:	61da      	str	r2, [r3, #28]
     c52:	4770      	bx	lr
     c54:	40000800 	.word	0x40000800

00000c58 <HASH_ALGORITHM_0_init>:
 * \brief SHA initialization function
 *
 * Enables SHA peripheral, clocks and initializes SHA driver
 */
void HASH_ALGORITHM_0_init(void)
{
     c58:	b508      	push	{r3, lr}
	HASH_ALGORITHM_0_CLOCK_init();
     c5a:	4b03      	ldr	r3, [pc, #12]	; (c68 <HASH_ALGORITHM_0_init+0x10>)
     c5c:	4798      	blx	r3
	sha_sync_init(&HASH_ALGORITHM_0, ICM);
     c5e:	4903      	ldr	r1, [pc, #12]	; (c6c <HASH_ALGORITHM_0_init+0x14>)
     c60:	4803      	ldr	r0, [pc, #12]	; (c70 <HASH_ALGORITHM_0_init+0x18>)
     c62:	4b04      	ldr	r3, [pc, #16]	; (c74 <HASH_ALGORITHM_0_init+0x1c>)
     c64:	4798      	blx	r3
     c66:	bd08      	pop	{r3, pc}
     c68:	00000c41 	.word	0x00000c41
     c6c:	42002c00 	.word	0x42002c00
     c70:	20007468 	.word	0x20007468
     c74:	000019ad 	.word	0x000019ad

00000c78 <FLASH_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
     c78:	4a02      	ldr	r2, [pc, #8]	; (c84 <FLASH_0_CLOCK_init+0xc>)
     c7a:	6913      	ldr	r3, [r2, #16]
     c7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     c80:	6113      	str	r3, [r2, #16]
     c82:	4770      	bx	lr
     c84:	40000800 	.word	0x40000800

00000c88 <FLASH_0_init>:

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}

void FLASH_0_init(void)
{
     c88:	b508      	push	{r3, lr}
	FLASH_0_CLOCK_init();
     c8a:	4b03      	ldr	r3, [pc, #12]	; (c98 <FLASH_0_init+0x10>)
     c8c:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
     c8e:	4903      	ldr	r1, [pc, #12]	; (c9c <FLASH_0_init+0x14>)
     c90:	4803      	ldr	r0, [pc, #12]	; (ca0 <FLASH_0_init+0x18>)
     c92:	4b04      	ldr	r3, [pc, #16]	; (ca4 <FLASH_0_init+0x1c>)
     c94:	4798      	blx	r3
     c96:	bd08      	pop	{r3, pc}
     c98:	00000c79 	.word	0x00000c79
     c9c:	41004000 	.word	0x41004000
     ca0:	2000740c 	.word	0x2000740c
     ca4:	000015b9 	.word	0x000015b9

00000ca8 <USART_0_CLOCK_init>:
     ca8:	4b05      	ldr	r3, [pc, #20]	; (cc0 <USART_0_CLOCK_init+0x18>)
     caa:	2240      	movs	r2, #64	; 0x40
     cac:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     cb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     cb4:	4a03      	ldr	r2, [pc, #12]	; (cc4 <USART_0_CLOCK_init+0x1c>)
     cb6:	6953      	ldr	r3, [r2, #20]
     cb8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     cbc:	6153      	str	r3, [r2, #20]
     cbe:	4770      	bx	lr
     cc0:	40001c00 	.word	0x40001c00
     cc4:	40000800 	.word	0x40000800

00000cc8 <USART_0_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     cc8:	4b10      	ldr	r3, [pc, #64]	; (d0c <USART_0_PORT_init+0x44>)
     cca:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
	tmp &= ~PORT_PINCFG_PMUXEN;
     cce:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     cd2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     cd6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     cda:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     cde:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     ce2:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ce6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     cea:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
	tmp &= ~PORT_PINCFG_PMUXEN;
     cee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     cf2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     cf6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     cfa:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     cfe:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     d02:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
     d0a:	4770      	bx	lr
     d0c:	41008000 	.word	0x41008000

00000d10 <USART_0_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_0_init(void)
{
     d10:	b510      	push	{r4, lr}
     d12:	b082      	sub	sp, #8
	USART_0_CLOCK_init();
     d14:	4b06      	ldr	r3, [pc, #24]	; (d30 <USART_0_init+0x20>)
     d16:	4798      	blx	r3
	usart_async_init(&USART_0, SERCOM0, USART_0_buffer, USART_0_BUFFER_SIZE, (void *)NULL);
     d18:	2300      	movs	r3, #0
     d1a:	9300      	str	r3, [sp, #0]
     d1c:	2310      	movs	r3, #16
     d1e:	4a05      	ldr	r2, [pc, #20]	; (d34 <USART_0_init+0x24>)
     d20:	4905      	ldr	r1, [pc, #20]	; (d38 <USART_0_init+0x28>)
     d22:	4806      	ldr	r0, [pc, #24]	; (d3c <USART_0_init+0x2c>)
     d24:	4c06      	ldr	r4, [pc, #24]	; (d40 <USART_0_init+0x30>)
     d26:	47a0      	blx	r4
	USART_0_PORT_init();
     d28:	4b06      	ldr	r3, [pc, #24]	; (d44 <USART_0_init+0x34>)
     d2a:	4798      	blx	r3
}
     d2c:	b002      	add	sp, #8
     d2e:	bd10      	pop	{r4, pc}
     d30:	00000ca9 	.word	0x00000ca9
     d34:	20000310 	.word	0x20000310
     d38:	40003000 	.word	0x40003000
     d3c:	2000748c 	.word	0x2000748c
     d40:	00001f91 	.word	0x00001f91
     d44:	00000cc9 	.word	0x00000cc9

00000d48 <SPI_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d48:	4b2c      	ldr	r3, [pc, #176]	; (dfc <SPI_0_PORT_init+0xb4>)
     d4a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     d4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d52:	492b      	ldr	r1, [pc, #172]	; (e00 <SPI_0_PORT_init+0xb8>)
     d54:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     d58:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     d5c:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d60:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d64:	f893 20cc 	ldrb.w	r2, [r3, #204]	; 0xcc
	tmp &= ~PORT_PINCFG_PMUXEN;
     d68:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     d6c:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d70:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     d74:	f893 20b6 	ldrb.w	r2, [r3, #182]	; 0xb6
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     d78:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     d7c:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d80:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     d84:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     d88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d8c:	4a1d      	ldr	r2, [pc, #116]	; (e04 <SPI_0_PORT_init+0xbc>)
     d8e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     d92:	4a1d      	ldr	r2, [pc, #116]	; (e08 <SPI_0_PORT_init+0xc0>)
     d94:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     d98:	f893 20cd 	ldrb.w	r2, [r3, #205]	; 0xcd
     d9c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     da0:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     da4:	f893 20cd 	ldrb.w	r2, [r3, #205]	; 0xcd
	tmp &= ~PORT_PINCFG_PMUXEN;
     da8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     dac:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     db0:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     db4:	f893 20b6 	ldrb.w	r2, [r3, #182]	; 0xb6
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     db8:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     dbc:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     dc0:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     dc4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
     dc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     dcc:	480f      	ldr	r0, [pc, #60]	; (e0c <SPI_0_PORT_init+0xc4>)
     dce:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     dd2:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     dd6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     dda:	f893 20cf 	ldrb.w	r2, [r3, #207]	; 0xcf
	tmp &= ~PORT_PINCFG_PMUXEN;
     dde:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     de2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     de6:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     dea:	f893 20b7 	ldrb.w	r2, [r3, #183]	; 0xb7
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     dee:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     df2:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     df6:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
     dfa:	4770      	bx	lr
     dfc:	41008000 	.word	0x41008000
     e00:	40001000 	.word	0x40001000
     e04:	40022000 	.word	0x40022000
     e08:	c0020000 	.word	0xc0020000
     e0c:	40008000 	.word	0x40008000

00000e10 <SPI_0_CLOCK_init>:
     e10:	4b05      	ldr	r3, [pc, #20]	; (e28 <SPI_0_CLOCK_init+0x18>)
     e12:	2240      	movs	r2, #64	; 0x40
     e14:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
     e18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     e1c:	4a03      	ldr	r2, [pc, #12]	; (e2c <SPI_0_CLOCK_init+0x1c>)
     e1e:	6a13      	ldr	r3, [r2, #32]
     e20:	f043 0301 	orr.w	r3, r3, #1
     e24:	6213      	str	r3, [r2, #32]
     e26:	4770      	bx	lr
     e28:	40001c00 	.word	0x40001c00
     e2c:	40000800 	.word	0x40000800

00000e30 <SPI_0_init>:

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
}

void SPI_0_init(void)
{
     e30:	b508      	push	{r3, lr}
	SPI_0_CLOCK_init();
     e32:	4b05      	ldr	r3, [pc, #20]	; (e48 <SPI_0_init+0x18>)
     e34:	4798      	blx	r3
	spi_m_sync_init(&SPI_0, SERCOM4);
     e36:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
     e3a:	4804      	ldr	r0, [pc, #16]	; (e4c <SPI_0_init+0x1c>)
     e3c:	4b04      	ldr	r3, [pc, #16]	; (e50 <SPI_0_init+0x20>)
     e3e:	4798      	blx	r3
	SPI_0_PORT_init();
     e40:	4b04      	ldr	r3, [pc, #16]	; (e54 <SPI_0_init+0x24>)
     e42:	4798      	blx	r3
     e44:	bd08      	pop	{r3, pc}
     e46:	bf00      	nop
     e48:	00000e11 	.word	0x00000e11
     e4c:	20007478 	.word	0x20007478
     e50:	000019dd 	.word	0x000019dd
     e54:	00000d49 	.word	0x00000d49

00000e58 <USART_1_CLOCK_init>:
     e58:	4b05      	ldr	r3, [pc, #20]	; (e70 <USART_1_CLOCK_init+0x18>)
     e5a:	2240      	movs	r2, #64	; 0x40
     e5c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     e60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     e64:	4a03      	ldr	r2, [pc, #12]	; (e74 <USART_1_CLOCK_init+0x1c>)
     e66:	6a13      	ldr	r3, [r2, #32]
     e68:	f043 0302 	orr.w	r3, r3, #2
     e6c:	6213      	str	r3, [r2, #32]
     e6e:	4770      	bx	lr
     e70:	40001c00 	.word	0x40001c00
     e74:	40000800 	.word	0x40000800

00000e78 <USART_1_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e78:	4b10      	ldr	r3, [pc, #64]	; (ebc <USART_1_PORT_init+0x44>)
     e7a:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
	tmp &= ~PORT_PINCFG_PMUXEN;
     e7e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     e82:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e86:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     e8a:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     e8e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     e92:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     e96:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e9a:	f893 20d1 	ldrb.w	r2, [r3, #209]	; 0xd1
	tmp &= ~PORT_PINCFG_PMUXEN;
     e9e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     ea2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ea6:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     eaa:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     eae:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     eb2:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     eb6:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
     eba:	4770      	bx	lr
     ebc:	41008000 	.word	0x41008000

00000ec0 <USART_1_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_1_init(void)
{
     ec0:	b510      	push	{r4, lr}
     ec2:	b082      	sub	sp, #8
	USART_1_CLOCK_init();
     ec4:	4b06      	ldr	r3, [pc, #24]	; (ee0 <USART_1_init+0x20>)
     ec6:	4798      	blx	r3
	usart_async_init(&USART_1, SERCOM5, USART_1_buffer, USART_1_BUFFER_SIZE, (void *)NULL);
     ec8:	2300      	movs	r3, #0
     eca:	9300      	str	r3, [sp, #0]
     ecc:	2310      	movs	r3, #16
     ece:	4a05      	ldr	r2, [pc, #20]	; (ee4 <USART_1_init+0x24>)
     ed0:	4905      	ldr	r1, [pc, #20]	; (ee8 <USART_1_init+0x28>)
     ed2:	4806      	ldr	r0, [pc, #24]	; (eec <USART_1_init+0x2c>)
     ed4:	4c06      	ldr	r4, [pc, #24]	; (ef0 <USART_1_init+0x30>)
     ed6:	47a0      	blx	r4
	USART_1_PORT_init();
     ed8:	4b06      	ldr	r3, [pc, #24]	; (ef4 <USART_1_init+0x34>)
     eda:	4798      	blx	r3
}
     edc:	b002      	add	sp, #8
     ede:	bd10      	pop	{r4, pc}
     ee0:	00000e59 	.word	0x00000e59
     ee4:	20000320 	.word	0x20000320
     ee8:	43000400 	.word	0x43000400
     eec:	200074dc 	.word	0x200074dc
     ef0:	00001f91 	.word	0x00001f91
     ef4:	00000e79 	.word	0x00000e79

00000ef8 <delay_driver_init>:

void delay_driver_init(void)
{
     ef8:	b508      	push	{r3, lr}
	delay_init(SysTick);
     efa:	4802      	ldr	r0, [pc, #8]	; (f04 <delay_driver_init+0xc>)
     efc:	4b02      	ldr	r3, [pc, #8]	; (f08 <delay_driver_init+0x10>)
     efe:	4798      	blx	r3
     f00:	bd08      	pop	{r3, pc}
     f02:	bf00      	nop
     f04:	e000e010 	.word	0xe000e010
     f08:	00001519 	.word	0x00001519

00000f0c <USB_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     f0c:	4b1e      	ldr	r3, [pc, #120]	; (f88 <USB_0_PORT_init+0x7c>)
     f0e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     f12:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f14:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     f18:	6299      	str	r1, [r3, #40]	; 0x28
     f1a:	481c      	ldr	r0, [pc, #112]	; (f8c <USB_0_PORT_init+0x80>)
     f1c:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     f1e:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     f20:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
     f24:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     f28:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f2c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
     f30:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     f34:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f38:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     f3c:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     f40:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     f44:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     f4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     f50:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f52:	6299      	str	r1, [r3, #40]	; 0x28
     f54:	490e      	ldr	r1, [pc, #56]	; (f90 <USB_0_PORT_init+0x84>)
     f56:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     f58:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     f5a:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
     f5e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     f62:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f66:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
     f6a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     f6e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f72:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     f76:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     f7a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     f7e:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
     f86:	4770      	bx	lr
     f88:	41008000 	.word	0x41008000
     f8c:	c0000100 	.word	0xc0000100
     f90:	c0000200 	.word	0xc0000200

00000f94 <USB_0_CLOCK_init>:
     f94:	2240      	movs	r2, #64	; 0x40
     f96:	4b07      	ldr	r3, [pc, #28]	; (fb4 <USB_0_CLOCK_init+0x20>)
     f98:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     f9c:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
     fa0:	691a      	ldr	r2, [r3, #16]
     fa2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     fa6:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     fa8:	699a      	ldr	r2, [r3, #24]
     faa:	f042 0201 	orr.w	r2, r2, #1
     fae:	619a      	str	r2, [r3, #24]
     fb0:	4770      	bx	lr
     fb2:	bf00      	nop
     fb4:	40001c00 	.word	0x40001c00

00000fb8 <USB_0_init>:
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}

void USB_0_init(void)
{
     fb8:	b508      	push	{r3, lr}
	USB_0_CLOCK_init();
     fba:	4b03      	ldr	r3, [pc, #12]	; (fc8 <USB_0_init+0x10>)
     fbc:	4798      	blx	r3
	usb_d_init();
     fbe:	4b03      	ldr	r3, [pc, #12]	; (fcc <USB_0_init+0x14>)
     fc0:	4798      	blx	r3
	USB_0_PORT_init();
     fc2:	4b03      	ldr	r3, [pc, #12]	; (fd0 <USB_0_init+0x18>)
     fc4:	4798      	blx	r3
     fc6:	bd08      	pop	{r3, pc}
     fc8:	00000f95 	.word	0x00000f95
     fcc:	00002365 	.word	0x00002365
     fd0:	00000f0d 	.word	0x00000f0d

00000fd4 <WDT_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     fd4:	4a02      	ldr	r2, [pc, #8]	; (fe0 <WDT_0_CLOCK_init+0xc>)
     fd6:	6953      	ldr	r3, [r2, #20]
     fd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     fdc:	6153      	str	r3, [r2, #20]
     fde:	4770      	bx	lr
     fe0:	40000800 	.word	0x40000800

00000fe4 <WDT_0_init>:
{
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
}

void WDT_0_init(void)
{
     fe4:	b508      	push	{r3, lr}
	WDT_0_CLOCK_init();
     fe6:	4b06      	ldr	r3, [pc, #24]	; (1000 <WDT_0_init+0x1c>)
     fe8:	4798      	blx	r3
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
	ASSERT(wdt && hw);
     fea:	2248      	movs	r2, #72	; 0x48
     fec:	4905      	ldr	r1, [pc, #20]	; (1004 <WDT_0_init+0x20>)
     fee:	2001      	movs	r0, #1
     ff0:	4b05      	ldr	r3, [pc, #20]	; (1008 <WDT_0_init+0x24>)
     ff2:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
     ff4:	4805      	ldr	r0, [pc, #20]	; (100c <WDT_0_init+0x28>)
     ff6:	4b06      	ldr	r3, [pc, #24]	; (1010 <WDT_0_init+0x2c>)
     ff8:	6003      	str	r3, [r0, #0]

	return _wdt_init(&wdt->dev);
     ffa:	4b06      	ldr	r3, [pc, #24]	; (1014 <WDT_0_init+0x30>)
     ffc:	4798      	blx	r3
     ffe:	bd08      	pop	{r3, pc}
    1000:	00000fd5 	.word	0x00000fd5
    1004:	0000ec30 	.word	0x0000ec30
    1008:	000026b1 	.word	0x000026b1
    100c:	20007474 	.word	0x20007474
    1010:	40002000 	.word	0x40002000
    1014:	00005275 	.word	0x00005275

00001018 <ETHERNET_MAC_0_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1018:	4b90      	ldr	r3, [pc, #576]	; (125c <ETHERNET_MAC_0_PORT_init+0x244>)
    101a:	f893 2155 	ldrb.w	r2, [r3, #341]	; 0x155
	tmp &= ~PORT_PINCFG_PMUXEN;
    101e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1022:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1026:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    102a:	f893 213a 	ldrb.w	r2, [r3, #314]	; 0x13a
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    102e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    1032:	f042 02b0 	orr.w	r2, r2, #176	; 0xb0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1036:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    103a:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
	tmp &= ~PORT_PINCFG_PMUXEN;
    103e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1042:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1046:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    104a:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    104e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    1052:	f042 020b 	orr.w	r2, r2, #11
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1056:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    105a:	f893 214b 	ldrb.w	r2, [r3, #331]	; 0x14b
	tmp &= ~PORT_PINCFG_PMUXEN;
    105e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1062:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1066:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    106a:	f893 2135 	ldrb.w	r2, [r3, #309]	; 0x135
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    106e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    1072:	f042 02b0 	orr.w	r2, r2, #176	; 0xb0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1076:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    107a:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
	tmp &= ~PORT_PINCFG_PMUXEN;
    107e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1082:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1086:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    108a:	f893 2136 	ldrb.w	r2, [r3, #310]	; 0x136
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    108e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    1092:	f042 020b 	orr.w	r2, r2, #11
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1096:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    109a:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
	tmp &= ~PORT_PINCFG_PMUXEN;
    109e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    10a2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    10a6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    10aa:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    10ae:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    10b2:	f042 02b0 	orr.w	r2, r2, #176	; 0xb0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    10b6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    10ba:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
	tmp &= ~PORT_PINCFG_PMUXEN;
    10be:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    10c2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    10c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    10ca:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    10ce:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    10d2:	f042 020b 	orr.w	r2, r2, #11
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    10d6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    10da:	f893 214f 	ldrb.w	r2, [r3, #335]	; 0x14f
	tmp &= ~PORT_PINCFG_PMUXEN;
    10de:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    10e2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    10e6:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    10ea:	f893 2137 	ldrb.w	r2, [r3, #311]	; 0x137
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    10ee:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    10f2:	f042 02b0 	orr.w	r2, r2, #176	; 0xb0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    10f6:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    10fa:	f893 214e 	ldrb.w	r2, [r3, #334]	; 0x14e
	tmp &= ~PORT_PINCFG_PMUXEN;
    10fe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1102:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1106:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    110a:	f893 2137 	ldrb.w	r2, [r3, #311]	; 0x137
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    110e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    1112:	f042 020b 	orr.w	r2, r2, #11
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1116:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    111a:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
    111e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1122:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1126:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    112a:	f893 2139 	ldrb.w	r2, [r3, #313]	; 0x139
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    112e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    1132:	f042 020b 	orr.w	r2, r2, #11
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1136:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    113a:	f893 2154 	ldrb.w	r2, [r3, #340]	; 0x154
	tmp &= ~PORT_PINCFG_PMUXEN;
    113e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1142:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1146:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    114a:	f893 213a 	ldrb.w	r2, [r3, #314]	; 0x13a
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    114e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    1152:	f042 020b 	orr.w	r2, r2, #11
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1156:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    115a:	f893 204f 	ldrb.w	r2, [r3, #79]	; 0x4f
	tmp &= ~PORT_PINCFG_PMUXEN;
    115e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1162:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1166:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    116a:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    116e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    1172:	f042 02b0 	orr.w	r2, r2, #176	; 0xb0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1176:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    117a:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
	tmp &= ~PORT_PINCFG_PMUXEN;
    117e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1182:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1186:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    118a:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    118e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    1192:	f042 020b 	orr.w	r2, r2, #11
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1196:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    119a:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
    119e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    11a2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    11a6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    11aa:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    11ae:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    11b2:	f042 02b0 	orr.w	r2, r2, #176	; 0xb0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    11b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    11ba:	f893 2150 	ldrb.w	r2, [r3, #336]	; 0x150
	tmp &= ~PORT_PINCFG_PMUXEN;
    11be:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    11c2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    11c6:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    11ca:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    11ce:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    11d2:	f042 020b 	orr.w	r2, r2, #11
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    11d6:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    11da:	f893 2151 	ldrb.w	r2, [r3, #337]	; 0x151
	tmp &= ~PORT_PINCFG_PMUXEN;
    11de:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    11e2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    11e6:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    11ea:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    11ee:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    11f2:	f042 02b0 	orr.w	r2, r2, #176	; 0xb0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    11f6:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    11fa:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
	tmp &= ~PORT_PINCFG_PMUXEN;
    11fe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1202:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1206:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    120a:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    120e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    1212:	f042 020b 	orr.w	r2, r2, #11
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1216:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    121a:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
	tmp &= ~PORT_PINCFG_PMUXEN;
    121e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1222:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1226:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    122a:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    122e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    1232:	f042 02b0 	orr.w	r2, r2, #176	; 0xb0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1236:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    123a:	f893 2153 	ldrb.w	r2, [r3, #339]	; 0x153
	tmp &= ~PORT_PINCFG_PMUXEN;
    123e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1242:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1246:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    124a:	f893 2139 	ldrb.w	r2, [r3, #313]	; 0x139
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    124e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    1252:	f042 02b0 	orr.w	r2, r2, #176	; 0xb0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1256:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
    125a:	4770      	bx	lr
    125c:	41008000 	.word	0x41008000

00001260 <ETHERNET_MAC_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_GMAC;
    1260:	4b04      	ldr	r3, [pc, #16]	; (1274 <ETHERNET_MAC_0_CLOCK_init+0x14>)
    1262:	691a      	ldr	r2, [r3, #16]
    1264:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    1268:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_GMAC;
    126a:	69da      	ldr	r2, [r3, #28]
    126c:	f042 0204 	orr.w	r2, r2, #4
    1270:	61da      	str	r2, [r3, #28]
    1272:	4770      	bx	lr
    1274:	40000800 	.word	0x40000800

00001278 <ETHERNET_MAC_0_init>:
	hri_mclk_set_AHBMASK_GMAC_bit(MCLK);
	hri_mclk_set_APBCMASK_GMAC_bit(MCLK);
}

void ETHERNET_MAC_0_init(void)
{
    1278:	b508      	push	{r3, lr}
	ETHERNET_MAC_0_CLOCK_init();
    127a:	4b04      	ldr	r3, [pc, #16]	; (128c <ETHERNET_MAC_0_init+0x14>)
    127c:	4798      	blx	r3
	mac_async_init(&ETHERNET_MAC_0, GMAC);
    127e:	4904      	ldr	r1, [pc, #16]	; (1290 <ETHERNET_MAC_0_init+0x18>)
    1280:	4804      	ldr	r0, [pc, #16]	; (1294 <ETHERNET_MAC_0_init+0x1c>)
    1282:	4b05      	ldr	r3, [pc, #20]	; (1298 <ETHERNET_MAC_0_init+0x20>)
    1284:	4798      	blx	r3
	ETHERNET_MAC_0_PORT_init();
    1286:	4b05      	ldr	r3, [pc, #20]	; (129c <ETHERNET_MAC_0_init+0x24>)
    1288:	4798      	blx	r3
    128a:	bd08      	pop	{r3, pc}
    128c:	00001261 	.word	0x00001261
    1290:	42000800 	.word	0x42000800
    1294:	2000752c 	.word	0x2000752c
    1298:	00001891 	.word	0x00001891
    129c:	00001019 	.word	0x00001019

000012a0 <system_init>:
	mac_async_enable(&ETHERNET_MAC_0);
	mac_async_write(&ETHERNET_MAC_0, (uint8_t *)"Hello World!", 12);
}

void system_init(void)
{
    12a0:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
    12a2:	4b15      	ldr	r3, [pc, #84]	; (12f8 <system_init+0x58>)
    12a4:	4798      	blx	r3
	init_mcu();
	ADC_0_init();
    12a6:	4b15      	ldr	r3, [pc, #84]	; (12fc <system_init+0x5c>)
    12a8:	4798      	blx	r3
	CRYPTOGRAPHY_0_init();
    12aa:	4b15      	ldr	r3, [pc, #84]	; (1300 <system_init+0x60>)
    12ac:	4798      	blx	r3
	CRC_0_init();
    12ae:	4b15      	ldr	r3, [pc, #84]	; (1304 <system_init+0x64>)
    12b0:	4798      	blx	r3
	HASH_ALGORITHM_0_init();
    12b2:	4b15      	ldr	r3, [pc, #84]	; (1308 <system_init+0x68>)
    12b4:	4798      	blx	r3
	FLASH_0_init();
    12b6:	4b15      	ldr	r3, [pc, #84]	; (130c <system_init+0x6c>)
    12b8:	4798      	blx	r3
	USART_0_init();
    12ba:	4b15      	ldr	r3, [pc, #84]	; (1310 <system_init+0x70>)
    12bc:	4798      	blx	r3
	SPI_0_init();
    12be:	4b15      	ldr	r3, [pc, #84]	; (1314 <system_init+0x74>)
    12c0:	4798      	blx	r3
	USART_1_init();
    12c2:	4b15      	ldr	r3, [pc, #84]	; (1318 <system_init+0x78>)
    12c4:	4798      	blx	r3
	delay_driver_init();
    12c6:	4b15      	ldr	r3, [pc, #84]	; (131c <system_init+0x7c>)
    12c8:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    12ca:	4a15      	ldr	r2, [pc, #84]	; (1320 <system_init+0x80>)
    12cc:	6953      	ldr	r3, [r2, #20]
    12ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    12d2:	6153      	str	r3, [r2, #20]
    12d4:	2240      	movs	r2, #64	; 0x40
    12d6:	4b13      	ldr	r3, [pc, #76]	; (1324 <system_init+0x84>)
    12d8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	timer_init(&TIMER_0, TC0, _tc_get_timer());
    12dc:	4b12      	ldr	r3, [pc, #72]	; (1328 <system_init+0x88>)
    12de:	4798      	blx	r3
    12e0:	4602      	mov	r2, r0
    12e2:	4912      	ldr	r1, [pc, #72]	; (132c <system_init+0x8c>)
    12e4:	4812      	ldr	r0, [pc, #72]	; (1330 <system_init+0x90>)
    12e6:	4b13      	ldr	r3, [pc, #76]	; (1334 <system_init+0x94>)
    12e8:	4798      	blx	r3
	TIMER_0_init();
	USB_0_init();
    12ea:	4b13      	ldr	r3, [pc, #76]	; (1338 <system_init+0x98>)
    12ec:	4798      	blx	r3
	WDT_0_init();
    12ee:	4b13      	ldr	r3, [pc, #76]	; (133c <system_init+0x9c>)
    12f0:	4798      	blx	r3
	ETHERNET_MAC_0_init();
    12f2:	4b13      	ldr	r3, [pc, #76]	; (1340 <system_init+0xa0>)
    12f4:	4798      	blx	r3
    12f6:	bd08      	pop	{r3, pc}
    12f8:	00002a11 	.word	0x00002a11
    12fc:	00000bc5 	.word	0x00000bc5
    1300:	00000bf1 	.word	0x00000bf1
    1304:	00000c19 	.word	0x00000c19
    1308:	00000c59 	.word	0x00000c59
    130c:	00000c89 	.word	0x00000c89
    1310:	00000d11 	.word	0x00000d11
    1314:	00000e31 	.word	0x00000e31
    1318:	00000ec1 	.word	0x00000ec1
    131c:	00000ef9 	.word	0x00000ef9
    1320:	40000800 	.word	0x40000800
    1324:	40001c00 	.word	0x40001c00
    1328:	00003fb7 	.word	0x00003fb7
    132c:	40003800 	.word	0x40003800
    1330:	20007548 	.word	0x20007548
    1334:	00001cc1 	.word	0x00001cc1
    1338:	00000fb9 	.word	0x00000fb9
    133c:	00000fe5 	.word	0x00000fe5
    1340:	00001279 	.word	0x00001279

00001344 <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
    1344:	b538      	push	{r3, r4, r5, lr}
    1346:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    1348:	4605      	mov	r5, r0
    134a:	b158      	cbz	r0, 1364 <adc_sync_init+0x20>
    134c:	1c08      	adds	r0, r1, #0
    134e:	bf18      	it	ne
    1350:	2001      	movne	r0, #1
    1352:	2239      	movs	r2, #57	; 0x39
    1354:	4904      	ldr	r1, [pc, #16]	; (1368 <adc_sync_init+0x24>)
    1356:	4b05      	ldr	r3, [pc, #20]	; (136c <adc_sync_init+0x28>)
    1358:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
    135a:	4621      	mov	r1, r4
    135c:	4628      	mov	r0, r5
    135e:	4b04      	ldr	r3, [pc, #16]	; (1370 <adc_sync_init+0x2c>)
    1360:	4798      	blx	r3
}
    1362:	bd38      	pop	{r3, r4, r5, pc}
    1364:	2000      	movs	r0, #0
    1366:	e7f4      	b.n	1352 <adc_sync_init+0xe>
    1368:	0000ec5c 	.word	0x0000ec5c
    136c:	000026b1 	.word	0x000026b1
    1370:	00002919 	.word	0x00002919

00001374 <adc_sync_enable_channel>:

/**
 * \brief Enable ADC
 */
int32_t adc_sync_enable_channel(struct adc_sync_descriptor *const descr, const uint8_t channel)
{
    1374:	b538      	push	{r3, r4, r5, lr}
    1376:	460d      	mov	r5, r1
	ASSERT(descr);
    1378:	4604      	mov	r4, r0
    137a:	224e      	movs	r2, #78	; 0x4e
    137c:	4905      	ldr	r1, [pc, #20]	; (1394 <adc_sync_enable_channel+0x20>)
    137e:	3000      	adds	r0, #0
    1380:	bf18      	it	ne
    1382:	2001      	movne	r0, #1
    1384:	4b04      	ldr	r3, [pc, #16]	; (1398 <adc_sync_enable_channel+0x24>)
    1386:	4798      	blx	r3
	_adc_sync_enable_channel(&descr->device, channel);
    1388:	4629      	mov	r1, r5
    138a:	4620      	mov	r0, r4
    138c:	4b03      	ldr	r3, [pc, #12]	; (139c <adc_sync_enable_channel+0x28>)
    138e:	4798      	blx	r3

	return ERR_NONE;
}
    1390:	2000      	movs	r0, #0
    1392:	bd38      	pop	{r3, r4, r5, pc}
    1394:	0000ec5c 	.word	0x0000ec5c
    1398:	000026b1 	.word	0x000026b1
    139c:	00002951 	.word	0x00002951

000013a0 <adc_sync_read_channel>:
/*
 * \brief Read data from ADC
 */
int32_t adc_sync_read_channel(struct adc_sync_descriptor *const descr, const uint8_t channel, uint8_t *const buffer,
                              const uint16_t length)
{
    13a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    13a4:	460d      	mov	r5, r1
    13a6:	4691      	mov	r9, r2
    13a8:	469a      	mov	sl, r3
	uint8_t  data_size;
	uint16_t offset = 0;

	ASSERT(descr && buffer && length);
    13aa:	4680      	mov	r8, r0
    13ac:	b1e0      	cbz	r0, 13e8 <adc_sync_read_channel+0x48>
    13ae:	b1ea      	cbz	r2, 13ec <adc_sync_read_channel+0x4c>
    13b0:	1c18      	adds	r0, r3, #0
    13b2:	bf18      	it	ne
    13b4:	2001      	movne	r0, #1
    13b6:	4f1c      	ldr	r7, [pc, #112]	; (1428 <adc_sync_read_channel+0x88>)
    13b8:	2267      	movs	r2, #103	; 0x67
    13ba:	4639      	mov	r1, r7
    13bc:	4e1b      	ldr	r6, [pc, #108]	; (142c <adc_sync_read_channel+0x8c>)
    13be:	47b0      	blx	r6
	data_size = _adc_sync_get_data_size(&descr->device);
    13c0:	4644      	mov	r4, r8
    13c2:	4640      	mov	r0, r8
    13c4:	4b1a      	ldr	r3, [pc, #104]	; (1430 <adc_sync_read_channel+0x90>)
    13c6:	4798      	blx	r3
    13c8:	4680      	mov	r8, r0
	ASSERT(!(length % data_size));
    13ca:	fb9a f0f0 	sdiv	r0, sl, r0
    13ce:	fb08 a010 	mls	r0, r8, r0, sl
    13d2:	2269      	movs	r2, #105	; 0x69
    13d4:	4639      	mov	r1, r7
    13d6:	fab0 f080 	clz	r0, r0
    13da:	0940      	lsrs	r0, r0, #5
    13dc:	47b0      	blx	r6
	uint16_t offset = 0;
    13de:	2700      	movs	r7, #0

	do {
		uint16_t result;
		_adc_sync_convert(&descr->device);
    13e0:	f8df b058 	ldr.w	fp, [pc, #88]	; 143c <adc_sync_read_channel+0x9c>

		while (!_adc_sync_is_channel_conversion_done(&descr->device, channel))
    13e4:	4e13      	ldr	r6, [pc, #76]	; (1434 <adc_sync_read_channel+0x94>)
    13e6:	e007      	b.n	13f8 <adc_sync_read_channel+0x58>
	ASSERT(descr && buffer && length);
    13e8:	2000      	movs	r0, #0
    13ea:	e7e4      	b.n	13b6 <adc_sync_read_channel+0x16>
    13ec:	2000      	movs	r0, #0
    13ee:	e7e2      	b.n	13b6 <adc_sync_read_channel+0x16>
    13f0:	4447      	add	r7, r8
    13f2:	b2bf      	uxth	r7, r7
		buffer[offset] = result;
		if (1 < data_size) {
			buffer[offset + 1] = result >> 8;
		}
		offset += data_size;
	} while (offset < length);
    13f4:	45ba      	cmp	sl, r7
    13f6:	d914      	bls.n	1422 <adc_sync_read_channel+0x82>
		_adc_sync_convert(&descr->device);
    13f8:	4620      	mov	r0, r4
    13fa:	47d8      	blx	fp
		while (!_adc_sync_is_channel_conversion_done(&descr->device, channel))
    13fc:	4629      	mov	r1, r5
    13fe:	4620      	mov	r0, r4
    1400:	47b0      	blx	r6
    1402:	2800      	cmp	r0, #0
    1404:	d0fa      	beq.n	13fc <adc_sync_read_channel+0x5c>
		result         = _adc_sync_read_channel_data(&descr->device, channel);
    1406:	4629      	mov	r1, r5
    1408:	4620      	mov	r0, r4
    140a:	4b0b      	ldr	r3, [pc, #44]	; (1438 <adc_sync_read_channel+0x98>)
    140c:	4798      	blx	r3
		buffer[offset] = result;
    140e:	f809 0007 	strb.w	r0, [r9, r7]
		if (1 < data_size) {
    1412:	f1b8 0f01 	cmp.w	r8, #1
    1416:	d9eb      	bls.n	13f0 <adc_sync_read_channel+0x50>
			buffer[offset + 1] = result >> 8;
    1418:	eb09 0307 	add.w	r3, r9, r7
    141c:	0a00      	lsrs	r0, r0, #8
    141e:	7058      	strb	r0, [r3, #1]
    1420:	e7e6      	b.n	13f0 <adc_sync_read_channel+0x50>

	return offset;
}
    1422:	4638      	mov	r0, r7
    1424:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1428:	0000ec5c 	.word	0x0000ec5c
    142c:	000026b1 	.word	0x000026b1
    1430:	00002967 	.word	0x00002967
    1434:	00002979 	.word	0x00002979
    1438:	0000299b 	.word	0x0000299b
    143c:	00002985 	.word	0x00002985

00001440 <aes_sync_init>:
                                                          uint8_t *iv, uint32_t *iv_ofst);
/**
 * \brief Initialize AES.
 */
int32_t aes_sync_init(struct aes_sync_descriptor *descr, void *const hw)
{
    1440:	b538      	push	{r3, r4, r5, lr}
    1442:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    1444:	4605      	mov	r5, r0
    1446:	b158      	cbz	r0, 1460 <aes_sync_init+0x20>
    1448:	1c08      	adds	r0, r1, #0
    144a:	bf18      	it	ne
    144c:	2001      	movne	r0, #1
    144e:	2232      	movs	r2, #50	; 0x32
    1450:	4904      	ldr	r1, [pc, #16]	; (1464 <aes_sync_init+0x24>)
    1452:	4b05      	ldr	r3, [pc, #20]	; (1468 <aes_sync_init+0x28>)
    1454:	4798      	blx	r3

	return _aes_sync_init(&descr->dev, hw);
    1456:	4621      	mov	r1, r4
    1458:	4628      	mov	r0, r5
    145a:	4b04      	ldr	r3, [pc, #16]	; (146c <aes_sync_init+0x2c>)
    145c:	4798      	blx	r3
}
    145e:	bd38      	pop	{r3, r4, r5, pc}
    1460:	2000      	movs	r0, #0
    1462:	e7f4      	b.n	144e <aes_sync_init+0xe>
    1464:	0000ec78 	.word	0x0000ec78
    1468:	000026b1 	.word	0x000026b1
    146c:	000029a5 	.word	0x000029a5

00001470 <aes_sync_enable>:

/**
 * \brief Enable AES
 */
int32_t aes_sync_enable(struct aes_sync_descriptor *descr)
{
    1470:	b510      	push	{r4, lr}
	ASSERT(descr);
    1472:	4604      	mov	r4, r0
    1474:	2246      	movs	r2, #70	; 0x46
    1476:	4905      	ldr	r1, [pc, #20]	; (148c <aes_sync_enable+0x1c>)
    1478:	3000      	adds	r0, #0
    147a:	bf18      	it	ne
    147c:	2001      	movne	r0, #1
    147e:	4b04      	ldr	r3, [pc, #16]	; (1490 <aes_sync_enable+0x20>)
    1480:	4798      	blx	r3

	return _aes_sync_enable(&descr->dev);
    1482:	4620      	mov	r0, r4
    1484:	4b03      	ldr	r3, [pc, #12]	; (1494 <aes_sync_enable+0x24>)
    1486:	4798      	blx	r3
}
    1488:	bd10      	pop	{r4, pc}
    148a:	bf00      	nop
    148c:	0000ec78 	.word	0x0000ec78
    1490:	000026b1 	.word	0x000026b1
    1494:	000029b5 	.word	0x000029b5

00001498 <aes_sync_set_encrypt_key>:

/**
 * \brief              Set AES Key (encryption)
 */
int32_t aes_sync_set_encrypt_key(struct aes_sync_descriptor *descr, const uint8_t *key, const enum aes_keysize size)
{
    1498:	b570      	push	{r4, r5, r6, lr}
    149a:	460c      	mov	r4, r1
    149c:	4616      	mov	r6, r2
	ASSERT(descr && key);
    149e:	4605      	mov	r5, r0
    14a0:	b160      	cbz	r0, 14bc <aes_sync_set_encrypt_key+0x24>
    14a2:	1c08      	adds	r0, r1, #0
    14a4:	bf18      	it	ne
    14a6:	2001      	movne	r0, #1
    14a8:	225a      	movs	r2, #90	; 0x5a
    14aa:	4905      	ldr	r1, [pc, #20]	; (14c0 <aes_sync_set_encrypt_key+0x28>)
    14ac:	4b05      	ldr	r3, [pc, #20]	; (14c4 <aes_sync_set_encrypt_key+0x2c>)
    14ae:	4798      	blx	r3
	return _aes_sync_set_key(&descr->dev, key, size);
    14b0:	4632      	mov	r2, r6
    14b2:	4621      	mov	r1, r4
    14b4:	4628      	mov	r0, r5
    14b6:	4b04      	ldr	r3, [pc, #16]	; (14c8 <aes_sync_set_encrypt_key+0x30>)
    14b8:	4798      	blx	r3
}
    14ba:	bd70      	pop	{r4, r5, r6, pc}
    14bc:	2000      	movs	r0, #0
    14be:	e7f3      	b.n	14a8 <aes_sync_set_encrypt_key+0x10>
    14c0:	0000ec78 	.word	0x0000ec78
    14c4:	000026b1 	.word	0x000026b1
    14c8:	000029b9 	.word	0x000029b9

000014cc <atomic_enter_critical>:
 */
__attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    14cc:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    14d0:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    14d2:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    14d4:	f3bf 8f5f 	dmb	sy
    14d8:	4770      	bx	lr

000014da <atomic_leave_critical>:
    14da:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    14de:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    14e0:	f383 8810 	msr	PRIMASK, r3
    14e4:	4770      	bx	lr
	...

000014e8 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    14e8:	b538      	push	{r3, r4, r5, lr}
    14ea:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    14ec:	4605      	mov	r5, r0
    14ee:	b158      	cbz	r0, 1508 <crc_sync_init+0x20>
    14f0:	1c08      	adds	r0, r1, #0
    14f2:	bf18      	it	ne
    14f4:	2001      	movne	r0, #1
    14f6:	222b      	movs	r2, #43	; 0x2b
    14f8:	4904      	ldr	r1, [pc, #16]	; (150c <crc_sync_init+0x24>)
    14fa:	4b05      	ldr	r3, [pc, #20]	; (1510 <crc_sync_init+0x28>)
    14fc:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    14fe:	4621      	mov	r1, r4
    1500:	4628      	mov	r0, r5
    1502:	4b04      	ldr	r3, [pc, #16]	; (1514 <crc_sync_init+0x2c>)
    1504:	4798      	blx	r3
}
    1506:	bd38      	pop	{r3, r4, r5, pc}
    1508:	2000      	movs	r0, #0
    150a:	e7f4      	b.n	14f6 <crc_sync_init+0xe>
    150c:	0000ec94 	.word	0x0000ec94
    1510:	000026b1 	.word	0x000026b1
    1514:	00002ccd 	.word	0x00002ccd

00001518 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    1518:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
    151a:	4b02      	ldr	r3, [pc, #8]	; (1524 <delay_init+0xc>)
    151c:	6018      	str	r0, [r3, #0]
    151e:	4b02      	ldr	r3, [pc, #8]	; (1528 <delay_init+0x10>)
    1520:	4798      	blx	r3
    1522:	bd08      	pop	{r3, pc}
    1524:	20000330 	.word	0x20000330
    1528:	00003d7d 	.word	0x00003d7d

0000152c <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    152c:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
    152e:	4b04      	ldr	r3, [pc, #16]	; (1540 <delay_us+0x14>)
    1530:	681c      	ldr	r4, [r3, #0]
    1532:	4b04      	ldr	r3, [pc, #16]	; (1544 <delay_us+0x18>)
    1534:	4798      	blx	r3
    1536:	4601      	mov	r1, r0
    1538:	4620      	mov	r0, r4
    153a:	4b03      	ldr	r3, [pc, #12]	; (1548 <delay_us+0x1c>)
    153c:	4798      	blx	r3
    153e:	bd10      	pop	{r4, pc}
    1540:	20000330 	.word	0x20000330
    1544:	000029ed 	.word	0x000029ed
    1548:	00003d91 	.word	0x00003d91

0000154c <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    154c:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    154e:	4b04      	ldr	r3, [pc, #16]	; (1560 <delay_ms+0x14>)
    1550:	681c      	ldr	r4, [r3, #0]
    1552:	4b04      	ldr	r3, [pc, #16]	; (1564 <delay_ms+0x18>)
    1554:	4798      	blx	r3
    1556:	4601      	mov	r1, r0
    1558:	4620      	mov	r0, r4
    155a:	4b03      	ldr	r3, [pc, #12]	; (1568 <delay_ms+0x1c>)
    155c:	4798      	blx	r3
    155e:	bd10      	pop	{r4, pc}
    1560:	20000330 	.word	0x20000330
    1564:	00002a05 	.word	0x00002a05
    1568:	00003d91 	.word	0x00003d91

0000156c <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
    156c:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
    156e:	6943      	ldr	r3, [r0, #20]
    1570:	b103      	cbz	r3, 1574 <flash_ready+0x8>
		descr->callbacks.cb_ready(descr);
    1572:	4798      	blx	r3
    1574:	bd08      	pop	{r3, pc}

00001576 <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
    1576:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
    1578:	6983      	ldr	r3, [r0, #24]
    157a:	b103      	cbz	r3, 157e <flash_error+0x8>
		descr->callbacks.cb_error(descr);
    157c:	4798      	blx	r3
    157e:	bd08      	pop	{r3, pc}

00001580 <flash_is_address_aligned>:
{
    1580:	b538      	push	{r3, r4, r5, lr}
    1582:	460c      	mov	r4, r1
	ASSERT(flash);
    1584:	4605      	mov	r5, r0
    1586:	f240 1217 	movw	r2, #279	; 0x117
    158a:	4908      	ldr	r1, [pc, #32]	; (15ac <flash_is_address_aligned+0x2c>)
    158c:	3000      	adds	r0, #0
    158e:	bf18      	it	ne
    1590:	2001      	movne	r0, #1
    1592:	4b07      	ldr	r3, [pc, #28]	; (15b0 <flash_is_address_aligned+0x30>)
    1594:	4798      	blx	r3
	uint32_t page_size = _flash_get_page_size(&flash->dev);
    1596:	4628      	mov	r0, r5
    1598:	4b06      	ldr	r3, [pc, #24]	; (15b4 <flash_is_address_aligned+0x34>)
    159a:	4798      	blx	r3
	if (flash_addr & (page_size - 1)) {
    159c:	3801      	subs	r0, #1
    159e:	4020      	ands	r0, r4
	return ERR_NONE;
    15a0:	2800      	cmp	r0, #0
}
    15a2:	bf14      	ite	ne
    15a4:	f06f 000d 	mvnne.w	r0, #13
    15a8:	2000      	moveq	r0, #0
    15aa:	bd38      	pop	{r3, r4, r5, pc}
    15ac:	0000ecb0 	.word	0x0000ecb0
    15b0:	000026b1 	.word	0x000026b1
    15b4:	000032d5 	.word	0x000032d5

000015b8 <flash_init>:
{
    15b8:	b538      	push	{r3, r4, r5, lr}
    15ba:	460d      	mov	r5, r1
	ASSERT(flash && hw);
    15bc:	4604      	mov	r4, r0
    15be:	b190      	cbz	r0, 15e6 <flash_init+0x2e>
    15c0:	1c08      	adds	r0, r1, #0
    15c2:	bf18      	it	ne
    15c4:	2001      	movne	r0, #1
    15c6:	2238      	movs	r2, #56	; 0x38
    15c8:	4908      	ldr	r1, [pc, #32]	; (15ec <flash_init+0x34>)
    15ca:	4b09      	ldr	r3, [pc, #36]	; (15f0 <flash_init+0x38>)
    15cc:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
    15ce:	4629      	mov	r1, r5
    15d0:	4620      	mov	r0, r4
    15d2:	4b08      	ldr	r3, [pc, #32]	; (15f4 <flash_init+0x3c>)
    15d4:	4798      	blx	r3
	if (rc) {
    15d6:	4603      	mov	r3, r0
    15d8:	b918      	cbnz	r0, 15e2 <flash_init+0x2a>
	flash->dev.flash_cb.ready_cb = flash_ready;
    15da:	4a07      	ldr	r2, [pc, #28]	; (15f8 <flash_init+0x40>)
    15dc:	6022      	str	r2, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
    15de:	4a07      	ldr	r2, [pc, #28]	; (15fc <flash_init+0x44>)
    15e0:	6062      	str	r2, [r4, #4]
}
    15e2:	4618      	mov	r0, r3
    15e4:	bd38      	pop	{r3, r4, r5, pc}
    15e6:	2000      	movs	r0, #0
    15e8:	e7ed      	b.n	15c6 <flash_init+0xe>
    15ea:	bf00      	nop
    15ec:	0000ecb0 	.word	0x0000ecb0
    15f0:	000026b1 	.word	0x000026b1
    15f4:	00003259 	.word	0x00003259
    15f8:	0000156d 	.word	0x0000156d
    15fc:	00001577 	.word	0x00001577

00001600 <flash_read>:
{
    1600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1604:	460d      	mov	r5, r1
    1606:	4690      	mov	r8, r2
    1608:	461e      	mov	r6, r3
	ASSERT(flash && buffer && length);
    160a:	4604      	mov	r4, r0
    160c:	b1f0      	cbz	r0, 164c <flash_read+0x4c>
    160e:	b1fa      	cbz	r2, 1650 <flash_read+0x50>
    1610:	b343      	cbz	r3, 1664 <flash_read+0x64>
    1612:	2001      	movs	r0, #1
    1614:	2256      	movs	r2, #86	; 0x56
    1616:	491e      	ldr	r1, [pc, #120]	; (1690 <flash_read+0x90>)
    1618:	4b1e      	ldr	r3, [pc, #120]	; (1694 <flash_read+0x94>)
    161a:	4798      	blx	r3
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    161c:	46a1      	mov	r9, r4
    161e:	4620      	mov	r0, r4
    1620:	4b1d      	ldr	r3, [pc, #116]	; (1698 <flash_read+0x98>)
    1622:	4798      	blx	r3
    1624:	4607      	mov	r7, r0
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    1626:	4620      	mov	r0, r4
    1628:	4b1c      	ldr	r3, [pc, #112]	; (169c <flash_read+0x9c>)
    162a:	4798      	blx	r3
	if ((src_addr > page_size * total_pages) || (src_addr + length > page_size * total_pages)) {
    162c:	fb00 f007 	mul.w	r0, r0, r7
    1630:	42a8      	cmp	r0, r5
    1632:	d30f      	bcc.n	1654 <flash_read+0x54>
    1634:	1973      	adds	r3, r6, r5
    1636:	4298      	cmp	r0, r3
    1638:	d310      	bcc.n	165c <flash_read+0x5c>
	_flash_read(&flash->dev, src_addr, buffer, length);
    163a:	4633      	mov	r3, r6
    163c:	4642      	mov	r2, r8
    163e:	4629      	mov	r1, r5
    1640:	4648      	mov	r0, r9
    1642:	4c17      	ldr	r4, [pc, #92]	; (16a0 <flash_read+0xa0>)
    1644:	47a0      	blx	r4
	return ERR_NONE;
    1646:	2000      	movs	r0, #0
    1648:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(flash && buffer && length);
    164c:	2000      	movs	r0, #0
    164e:	e7e1      	b.n	1614 <flash_read+0x14>
    1650:	2000      	movs	r0, #0
    1652:	e7df      	b.n	1614 <flash_read+0x14>
		return ERR_BAD_ADDRESS;
    1654:	f06f 000d 	mvn.w	r0, #13
    1658:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    165c:	f06f 000d 	mvn.w	r0, #13
    1660:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(flash && buffer && length);
    1664:	2256      	movs	r2, #86	; 0x56
    1666:	490a      	ldr	r1, [pc, #40]	; (1690 <flash_read+0x90>)
    1668:	2000      	movs	r0, #0
    166a:	4b0a      	ldr	r3, [pc, #40]	; (1694 <flash_read+0x94>)
    166c:	4798      	blx	r3
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    166e:	46a1      	mov	r9, r4
    1670:	4620      	mov	r0, r4
    1672:	4b09      	ldr	r3, [pc, #36]	; (1698 <flash_read+0x98>)
    1674:	4798      	blx	r3
    1676:	4607      	mov	r7, r0
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    1678:	4620      	mov	r0, r4
    167a:	4b08      	ldr	r3, [pc, #32]	; (169c <flash_read+0x9c>)
    167c:	4798      	blx	r3
	if ((src_addr > page_size * total_pages) || (src_addr + length > page_size * total_pages)) {
    167e:	fb00 f007 	mul.w	r0, r0, r7
    1682:	4285      	cmp	r5, r0
    1684:	d9d9      	bls.n	163a <flash_read+0x3a>
		return ERR_BAD_ADDRESS;
    1686:	f06f 000d 	mvn.w	r0, #13
    168a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    168e:	bf00      	nop
    1690:	0000ecb0 	.word	0x0000ecb0
    1694:	000026b1 	.word	0x000026b1
    1698:	000032d5 	.word	0x000032d5
    169c:	000032db 	.word	0x000032db
    16a0:	000032e3 	.word	0x000032e3

000016a4 <flash_append>:
{
    16a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    16a8:	460c      	mov	r4, r1
    16aa:	4691      	mov	r9, r2
    16ac:	461f      	mov	r7, r3
	ASSERT(flash && buffer && length);
    16ae:	4605      	mov	r5, r0
    16b0:	b318      	cbz	r0, 16fa <flash_append+0x56>
    16b2:	b322      	cbz	r2, 16fe <flash_append+0x5a>
    16b4:	b38b      	cbz	r3, 171a <flash_append+0x76>
    16b6:	2001      	movs	r0, #1
    16b8:	2282      	movs	r2, #130	; 0x82
    16ba:	4922      	ldr	r1, [pc, #136]	; (1744 <flash_append+0xa0>)
    16bc:	4b22      	ldr	r3, [pc, #136]	; (1748 <flash_append+0xa4>)
    16be:	4798      	blx	r3
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    16c0:	46a8      	mov	r8, r5
    16c2:	4628      	mov	r0, r5
    16c4:	4b21      	ldr	r3, [pc, #132]	; (174c <flash_append+0xa8>)
    16c6:	4798      	blx	r3
    16c8:	4606      	mov	r6, r0
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    16ca:	4628      	mov	r0, r5
    16cc:	4b20      	ldr	r3, [pc, #128]	; (1750 <flash_append+0xac>)
    16ce:	4798      	blx	r3
	if ((dst_addr > page_size * total_pages) || (dst_addr + length > page_size * total_pages)) {
    16d0:	fb00 f006 	mul.w	r0, r0, r6
    16d4:	42a0      	cmp	r0, r4
    16d6:	d314      	bcc.n	1702 <flash_append+0x5e>
    16d8:	193b      	adds	r3, r7, r4
    16da:	4298      	cmp	r0, r3
    16dc:	d315      	bcc.n	170a <flash_append+0x66>
	if (_flash_is_locked(&flash->dev, dst_addr)) {
    16de:	4621      	mov	r1, r4
    16e0:	4640      	mov	r0, r8
    16e2:	4b1c      	ldr	r3, [pc, #112]	; (1754 <flash_append+0xb0>)
    16e4:	4798      	blx	r3
    16e6:	b9a0      	cbnz	r0, 1712 <flash_append+0x6e>
	_flash_append(&flash->dev, dst_addr, buffer, length);
    16e8:	463b      	mov	r3, r7
    16ea:	464a      	mov	r2, r9
    16ec:	4621      	mov	r1, r4
    16ee:	4640      	mov	r0, r8
    16f0:	4c19      	ldr	r4, [pc, #100]	; (1758 <flash_append+0xb4>)
    16f2:	47a0      	blx	r4
	return ERR_NONE;
    16f4:	2000      	movs	r0, #0
    16f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(flash && buffer && length);
    16fa:	2000      	movs	r0, #0
    16fc:	e7dc      	b.n	16b8 <flash_append+0x14>
    16fe:	2000      	movs	r0, #0
    1700:	e7da      	b.n	16b8 <flash_append+0x14>
		return ERR_BAD_ADDRESS;
    1702:	f06f 000d 	mvn.w	r0, #13
    1706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    170a:	f06f 000d 	mvn.w	r0, #13
    170e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ERR_DENIED;
    1712:	f06f 0010 	mvn.w	r0, #16
    1716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(flash && buffer && length);
    171a:	2282      	movs	r2, #130	; 0x82
    171c:	4909      	ldr	r1, [pc, #36]	; (1744 <flash_append+0xa0>)
    171e:	2000      	movs	r0, #0
    1720:	4b09      	ldr	r3, [pc, #36]	; (1748 <flash_append+0xa4>)
    1722:	4798      	blx	r3
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    1724:	46a8      	mov	r8, r5
    1726:	4628      	mov	r0, r5
    1728:	4b08      	ldr	r3, [pc, #32]	; (174c <flash_append+0xa8>)
    172a:	4798      	blx	r3
    172c:	4606      	mov	r6, r0
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    172e:	4628      	mov	r0, r5
    1730:	4b07      	ldr	r3, [pc, #28]	; (1750 <flash_append+0xac>)
    1732:	4798      	blx	r3
	if ((dst_addr > page_size * total_pages) || (dst_addr + length > page_size * total_pages)) {
    1734:	fb00 f006 	mul.w	r0, r0, r6
    1738:	4284      	cmp	r4, r0
    173a:	d9d0      	bls.n	16de <flash_append+0x3a>
		return ERR_BAD_ADDRESS;
    173c:	f06f 000d 	mvn.w	r0, #13
    1740:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1744:	0000ecb0 	.word	0x0000ecb0
    1748:	000026b1 	.word	0x000026b1
    174c:	000032d5 	.word	0x000032d5
    1750:	000032db 	.word	0x000032db
    1754:	00003525 	.word	0x00003525
    1758:	000033f9 	.word	0x000033f9

0000175c <flash_erase>:
{
    175c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1760:	460f      	mov	r7, r1
    1762:	4616      	mov	r6, r2
	ASSERT(flash && page_nums);
    1764:	4604      	mov	r4, r0
    1766:	b320      	cbz	r0, 17b2 <flash_erase+0x56>
    1768:	b35a      	cbz	r2, 17c2 <flash_erase+0x66>
    176a:	2001      	movs	r0, #1
    176c:	229a      	movs	r2, #154	; 0x9a
    176e:	4920      	ldr	r1, [pc, #128]	; (17f0 <flash_erase+0x94>)
    1770:	4b20      	ldr	r3, [pc, #128]	; (17f4 <flash_erase+0x98>)
    1772:	4798      	blx	r3
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    1774:	46a1      	mov	r9, r4
    1776:	4620      	mov	r0, r4
    1778:	4b1f      	ldr	r3, [pc, #124]	; (17f8 <flash_erase+0x9c>)
    177a:	4798      	blx	r3
    177c:	4605      	mov	r5, r0
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    177e:	4620      	mov	r0, r4
    1780:	4b1e      	ldr	r3, [pc, #120]	; (17fc <flash_erase+0xa0>)
    1782:	4798      	blx	r3
    1784:	4680      	mov	r8, r0
	rc = flash_is_address_aligned(flash, dst_addr);
    1786:	4639      	mov	r1, r7
    1788:	4620      	mov	r0, r4
    178a:	4b1d      	ldr	r3, [pc, #116]	; (1800 <flash_erase+0xa4>)
    178c:	4798      	blx	r3
	if (rc) {
    178e:	4603      	mov	r3, r0
    1790:	b960      	cbnz	r0, 17ac <flash_erase+0x50>
	if ((page_nums > total_pages) || (dst_addr / page_size + page_nums > total_pages)) {
    1792:	4546      	cmp	r6, r8
    1794:	d80f      	bhi.n	17b6 <flash_erase+0x5a>
    1796:	fbb7 f5f5 	udiv	r5, r7, r5
    179a:	4435      	add	r5, r6
    179c:	4545      	cmp	r5, r8
    179e:	d80d      	bhi.n	17bc <flash_erase+0x60>
	_flash_erase(&flash->dev, dst_addr, page_nums);
    17a0:	4632      	mov	r2, r6
    17a2:	4639      	mov	r1, r7
    17a4:	4648      	mov	r0, r9
    17a6:	4b17      	ldr	r3, [pc, #92]	; (1804 <flash_erase+0xa8>)
    17a8:	4798      	blx	r3
	return ERR_NONE;
    17aa:	2300      	movs	r3, #0
}
    17ac:	4618      	mov	r0, r3
    17ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(flash && page_nums);
    17b2:	2000      	movs	r0, #0
    17b4:	e7da      	b.n	176c <flash_erase+0x10>
		return ERR_INVALID_ARG;
    17b6:	f06f 030c 	mvn.w	r3, #12
    17ba:	e7f7      	b.n	17ac <flash_erase+0x50>
    17bc:	f06f 030c 	mvn.w	r3, #12
    17c0:	e7f4      	b.n	17ac <flash_erase+0x50>
	ASSERT(flash && page_nums);
    17c2:	229a      	movs	r2, #154	; 0x9a
    17c4:	490a      	ldr	r1, [pc, #40]	; (17f0 <flash_erase+0x94>)
    17c6:	2000      	movs	r0, #0
    17c8:	4b0a      	ldr	r3, [pc, #40]	; (17f4 <flash_erase+0x98>)
    17ca:	4798      	blx	r3
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    17cc:	46a1      	mov	r9, r4
    17ce:	4620      	mov	r0, r4
    17d0:	4b09      	ldr	r3, [pc, #36]	; (17f8 <flash_erase+0x9c>)
    17d2:	4798      	blx	r3
    17d4:	4605      	mov	r5, r0
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    17d6:	4620      	mov	r0, r4
    17d8:	4b08      	ldr	r3, [pc, #32]	; (17fc <flash_erase+0xa0>)
    17da:	4798      	blx	r3
    17dc:	4680      	mov	r8, r0
	rc = flash_is_address_aligned(flash, dst_addr);
    17de:	4639      	mov	r1, r7
    17e0:	4620      	mov	r0, r4
    17e2:	4b07      	ldr	r3, [pc, #28]	; (1800 <flash_erase+0xa4>)
    17e4:	4798      	blx	r3
	if (rc) {
    17e6:	4603      	mov	r3, r0
    17e8:	2800      	cmp	r0, #0
    17ea:	d0d4      	beq.n	1796 <flash_erase+0x3a>
    17ec:	e7de      	b.n	17ac <flash_erase+0x50>
    17ee:	bf00      	nop
    17f0:	0000ecb0 	.word	0x0000ecb0
    17f4:	000026b1 	.word	0x000026b1
    17f8:	000032d5 	.word	0x000032d5
    17fc:	000032db 	.word	0x000032db
    1800:	00001581 	.word	0x00001581
    1804:	00003461 	.word	0x00003461

00001808 <flash_get_page_size>:
{
    1808:	b510      	push	{r4, lr}
	ASSERT(flash);
    180a:	4604      	mov	r4, r0
    180c:	22f7      	movs	r2, #247	; 0xf7
    180e:	4905      	ldr	r1, [pc, #20]	; (1824 <flash_get_page_size+0x1c>)
    1810:	3000      	adds	r0, #0
    1812:	bf18      	it	ne
    1814:	2001      	movne	r0, #1
    1816:	4b04      	ldr	r3, [pc, #16]	; (1828 <flash_get_page_size+0x20>)
    1818:	4798      	blx	r3
	return _flash_get_page_size(&flash->dev);
    181a:	4620      	mov	r0, r4
    181c:	4b03      	ldr	r3, [pc, #12]	; (182c <flash_get_page_size+0x24>)
    181e:	4798      	blx	r3
}
    1820:	bd10      	pop	{r4, pc}
    1822:	bf00      	nop
    1824:	0000ecb0 	.word	0x0000ecb0
    1828:	000026b1 	.word	0x000026b1
    182c:	000032d5 	.word	0x000032d5

00001830 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    1830:	b570      	push	{r4, r5, r6, lr}
    1832:	460d      	mov	r5, r1
    1834:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    1836:	4604      	mov	r4, r0
    1838:	b160      	cbz	r0, 1854 <io_write+0x24>
    183a:	1c08      	adds	r0, r1, #0
    183c:	bf18      	it	ne
    183e:	2001      	movne	r0, #1
    1840:	2234      	movs	r2, #52	; 0x34
    1842:	4905      	ldr	r1, [pc, #20]	; (1858 <io_write+0x28>)
    1844:	4b05      	ldr	r3, [pc, #20]	; (185c <io_write+0x2c>)
    1846:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    1848:	6823      	ldr	r3, [r4, #0]
    184a:	4632      	mov	r2, r6
    184c:	4629      	mov	r1, r5
    184e:	4620      	mov	r0, r4
    1850:	4798      	blx	r3
}
    1852:	bd70      	pop	{r4, r5, r6, pc}
    1854:	2000      	movs	r0, #0
    1856:	e7f3      	b.n	1840 <io_write+0x10>
    1858:	0000ecc8 	.word	0x0000ecc8
    185c:	000026b1 	.word	0x000026b1

00001860 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    1860:	b570      	push	{r4, r5, r6, lr}
    1862:	460d      	mov	r5, r1
    1864:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    1866:	4604      	mov	r4, r0
    1868:	b160      	cbz	r0, 1884 <io_read+0x24>
    186a:	1c08      	adds	r0, r1, #0
    186c:	bf18      	it	ne
    186e:	2001      	movne	r0, #1
    1870:	223d      	movs	r2, #61	; 0x3d
    1872:	4905      	ldr	r1, [pc, #20]	; (1888 <io_read+0x28>)
    1874:	4b05      	ldr	r3, [pc, #20]	; (188c <io_read+0x2c>)
    1876:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    1878:	6863      	ldr	r3, [r4, #4]
    187a:	4632      	mov	r2, r6
    187c:	4629      	mov	r1, r5
    187e:	4620      	mov	r0, r4
    1880:	4798      	blx	r3
}
    1882:	bd70      	pop	{r4, r5, r6, pc}
    1884:	2000      	movs	r0, #0
    1886:	e7f3      	b.n	1870 <io_read+0x10>
    1888:	0000ecc8 	.word	0x0000ecc8
    188c:	000026b1 	.word	0x000026b1

00001890 <mac_async_init>:

/**
 * \brief Initialize the MAC driver
 */
int32_t mac_async_init(struct mac_async_descriptor *const descr, void *const hw)
{
    1890:	b538      	push	{r3, r4, r5, lr}
    1892:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    1894:	4605      	mov	r5, r0
    1896:	b158      	cbz	r0, 18b0 <mac_async_init+0x20>
    1898:	1c08      	adds	r0, r1, #0
    189a:	bf18      	it	ne
    189c:	2001      	movne	r0, #1
    189e:	2231      	movs	r2, #49	; 0x31
    18a0:	4904      	ldr	r1, [pc, #16]	; (18b4 <mac_async_init+0x24>)
    18a2:	4b05      	ldr	r3, [pc, #20]	; (18b8 <mac_async_init+0x28>)
    18a4:	4798      	blx	r3

	return _mac_async_init(&descr->dev, hw);
    18a6:	4621      	mov	r1, r4
    18a8:	4628      	mov	r0, r5
    18aa:	4b04      	ldr	r3, [pc, #16]	; (18bc <mac_async_init+0x2c>)
    18ac:	4798      	blx	r3
}
    18ae:	bd38      	pop	{r3, r4, r5, pc}
    18b0:	2000      	movs	r0, #0
    18b2:	e7f4      	b.n	189e <mac_async_init+0xe>
    18b4:	0000ecdc 	.word	0x0000ecdc
    18b8:	000026b1 	.word	0x000026b1
    18bc:	00002d59 	.word	0x00002d59

000018c0 <mac_async_enable>:

/**
 * \brief Enable the MAC
 */
int32_t mac_async_enable(struct mac_async_descriptor *const descr)
{
    18c0:	b510      	push	{r4, lr}
	ASSERT(descr);
    18c2:	4604      	mov	r4, r0
    18c4:	2245      	movs	r2, #69	; 0x45
    18c6:	4905      	ldr	r1, [pc, #20]	; (18dc <mac_async_enable+0x1c>)
    18c8:	3000      	adds	r0, #0
    18ca:	bf18      	it	ne
    18cc:	2001      	movne	r0, #1
    18ce:	4b04      	ldr	r3, [pc, #16]	; (18e0 <mac_async_enable+0x20>)
    18d0:	4798      	blx	r3

	return _mac_async_enable(&descr->dev);
    18d2:	4620      	mov	r0, r4
    18d4:	4b03      	ldr	r3, [pc, #12]	; (18e4 <mac_async_enable+0x24>)
    18d6:	4798      	blx	r3
}
    18d8:	bd10      	pop	{r4, pc}
    18da:	bf00      	nop
    18dc:	0000ecdc 	.word	0x0000ecdc
    18e0:	000026b1 	.word	0x000026b1
    18e4:	00002e49 	.word	0x00002e49

000018e8 <mac_async_write>:
}
/**
 * \brief Write raw data to MAC
 */
int32_t mac_async_write(struct mac_async_descriptor *const descr, uint8_t *buf, uint32_t len)
{
    18e8:	b570      	push	{r4, r5, r6, lr}
    18ea:	460c      	mov	r4, r1
    18ec:	4615      	mov	r5, r2
	ASSERT(descr && buf && len);
    18ee:	4606      	mov	r6, r0
    18f0:	b168      	cbz	r0, 190e <mac_async_write+0x26>
    18f2:	b171      	cbz	r1, 1912 <mac_async_write+0x2a>
    18f4:	1c10      	adds	r0, r2, #0
    18f6:	bf18      	it	ne
    18f8:	2001      	movne	r0, #1
    18fa:	2257      	movs	r2, #87	; 0x57
    18fc:	4906      	ldr	r1, [pc, #24]	; (1918 <mac_async_write+0x30>)
    18fe:	4b07      	ldr	r3, [pc, #28]	; (191c <mac_async_write+0x34>)
    1900:	4798      	blx	r3

	return _mac_async_write(&descr->dev, buf, len);
    1902:	462a      	mov	r2, r5
    1904:	4621      	mov	r1, r4
    1906:	4630      	mov	r0, r6
    1908:	4b05      	ldr	r3, [pc, #20]	; (1920 <mac_async_write+0x38>)
    190a:	4798      	blx	r3
}
    190c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && len);
    190e:	2000      	movs	r0, #0
    1910:	e7f3      	b.n	18fa <mac_async_write+0x12>
    1912:	2000      	movs	r0, #0
    1914:	e7f1      	b.n	18fa <mac_async_write+0x12>
    1916:	bf00      	nop
    1918:	0000ecdc 	.word	0x0000ecdc
    191c:	000026b1 	.word	0x000026b1
    1920:	00002e59 	.word	0x00002e59

00001924 <mac_async_read>:

/**
 * \brief Read raw data from MAC
 */
uint32_t mac_async_read(struct mac_async_descriptor *const descr, uint8_t *buf, uint32_t len)
{
    1924:	b570      	push	{r4, r5, r6, lr}
    1926:	460d      	mov	r5, r1
    1928:	4616      	mov	r6, r2
	ASSERT(descr);
    192a:	4604      	mov	r4, r0
    192c:	2261      	movs	r2, #97	; 0x61
    192e:	4906      	ldr	r1, [pc, #24]	; (1948 <mac_async_read+0x24>)
    1930:	3000      	adds	r0, #0
    1932:	bf18      	it	ne
    1934:	2001      	movne	r0, #1
    1936:	4b05      	ldr	r3, [pc, #20]	; (194c <mac_async_read+0x28>)
    1938:	4798      	blx	r3

	return _mac_async_read(&descr->dev, buf, len);
    193a:	4632      	mov	r2, r6
    193c:	4629      	mov	r1, r5
    193e:	4620      	mov	r0, r4
    1940:	4b03      	ldr	r3, [pc, #12]	; (1950 <mac_async_read+0x2c>)
    1942:	4798      	blx	r3
}
    1944:	bd70      	pop	{r4, r5, r6, pc}
    1946:	bf00      	nop
    1948:	0000ecdc 	.word	0x0000ecdc
    194c:	000026b1 	.word	0x000026b1
    1950:	00002fd1 	.word	0x00002fd1

00001954 <mac_async_read_len>:

/**
 * \brief Get next valid package length
 */
uint32_t mac_async_read_len(struct mac_async_descriptor *const descr)
{
    1954:	b510      	push	{r4, lr}
	ASSERT(descr);
    1956:	4604      	mov	r4, r0
    1958:	226b      	movs	r2, #107	; 0x6b
    195a:	4905      	ldr	r1, [pc, #20]	; (1970 <mac_async_read_len+0x1c>)
    195c:	3000      	adds	r0, #0
    195e:	bf18      	it	ne
    1960:	2001      	movne	r0, #1
    1962:	4b04      	ldr	r3, [pc, #16]	; (1974 <mac_async_read_len+0x20>)
    1964:	4798      	blx	r3

	return _mac_async_read_len(&descr->dev);
    1966:	4620      	mov	r0, r4
    1968:	4b03      	ldr	r3, [pc, #12]	; (1978 <mac_async_read_len+0x24>)
    196a:	4798      	blx	r3
}
    196c:	bd10      	pop	{r4, pc}
    196e:	bf00      	nop
    1970:	0000ecdc 	.word	0x0000ecdc
    1974:	000026b1 	.word	0x000026b1
    1978:	00003105 	.word	0x00003105

0000197c <mac_async_set_filter_ex>:

/**
 * \brief Set MAC filter (expaneded)
 */
int32_t mac_async_set_filter_ex(struct mac_async_descriptor *const descr, uint8_t mac[6])
{
    197c:	b538      	push	{r3, r4, r5, lr}
    197e:	460c      	mov	r4, r1
	ASSERT(descr && mac);
    1980:	4605      	mov	r5, r0
    1982:	b158      	cbz	r0, 199c <mac_async_set_filter_ex+0x20>
    1984:	1c08      	adds	r0, r1, #0
    1986:	bf18      	it	ne
    1988:	2001      	movne	r0, #1
    198a:	22a5      	movs	r2, #165	; 0xa5
    198c:	4904      	ldr	r1, [pc, #16]	; (19a0 <mac_async_set_filter_ex+0x24>)
    198e:	4b05      	ldr	r3, [pc, #20]	; (19a4 <mac_async_set_filter_ex+0x28>)
    1990:	4798      	blx	r3

	return _mac_async_set_filter_ex(&descr->dev, mac);
    1992:	4621      	mov	r1, r4
    1994:	4628      	mov	r0, r5
    1996:	4b04      	ldr	r3, [pc, #16]	; (19a8 <mac_async_set_filter_ex+0x2c>)
    1998:	4798      	blx	r3
}
    199a:	bd38      	pop	{r3, r4, r5, pc}
    199c:	2000      	movs	r0, #0
    199e:	e7f4      	b.n	198a <mac_async_set_filter_ex+0xe>
    19a0:	0000ecdc 	.word	0x0000ecdc
    19a4:	000026b1 	.word	0x000026b1
    19a8:	0000316d 	.word	0x0000316d

000019ac <sha_sync_init>:

/**
 * \brief              Initialize SHA.
 */
int32_t sha_sync_init(struct sha_sync_descriptor *descr, void *const hw)
{
    19ac:	b538      	push	{r3, r4, r5, lr}
    19ae:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    19b0:	4605      	mov	r5, r0
    19b2:	b158      	cbz	r0, 19cc <sha_sync_init+0x20>
    19b4:	1c08      	adds	r0, r1, #0
    19b6:	bf18      	it	ne
    19b8:	2001      	movne	r0, #1
    19ba:	222c      	movs	r2, #44	; 0x2c
    19bc:	4904      	ldr	r1, [pc, #16]	; (19d0 <sha_sync_init+0x24>)
    19be:	4b05      	ldr	r3, [pc, #20]	; (19d4 <sha_sync_init+0x28>)
    19c0:	4798      	blx	r3

	return _sha_sync_init(&descr->dev, hw);
    19c2:	4621      	mov	r1, r4
    19c4:	4628      	mov	r0, r5
    19c6:	4b04      	ldr	r3, [pc, #16]	; (19d8 <sha_sync_init+0x2c>)
    19c8:	4798      	blx	r3
}
    19ca:	bd38      	pop	{r3, r4, r5, pc}
    19cc:	2000      	movs	r0, #0
    19ce:	e7f4      	b.n	19ba <sha_sync_init+0xe>
    19d0:	0000ecf8 	.word	0x0000ecf8
    19d4:	000026b1 	.word	0x000026b1
    19d8:	000031d7 	.word	0x000031d7

000019dc <spi_m_sync_init>:

static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length);
static int32_t _spi_m_sync_io_read(struct io_descriptor *const io, uint8_t *const buf, const uint16_t length);

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    19dc:	b538      	push	{r3, r4, r5, lr}
    19de:	460d      	mov	r5, r1
	int32_t rc = 0;

	ASSERT(spi && hw);
    19e0:	4604      	mov	r4, r0
    19e2:	b1b0      	cbz	r0, 1a12 <spi_m_sync_init+0x36>
    19e4:	1c08      	adds	r0, r1, #0
    19e6:	bf18      	it	ne
    19e8:	2001      	movne	r0, #1
    19ea:	2238      	movs	r2, #56	; 0x38
    19ec:	490a      	ldr	r1, [pc, #40]	; (1a18 <spi_m_sync_init+0x3c>)
    19ee:	4b0b      	ldr	r3, [pc, #44]	; (1a1c <spi_m_sync_init+0x40>)
    19f0:	4798      	blx	r3

	spi->dev.prvt = (void *)hw;
    19f2:	6025      	str	r5, [r4, #0]

	rc = _spi_m_sync_init(&spi->dev, hw);
    19f4:	4629      	mov	r1, r5
    19f6:	4620      	mov	r0, r4
    19f8:	4b09      	ldr	r3, [pc, #36]	; (1a20 <spi_m_sync_init+0x44>)
    19fa:	4798      	blx	r3
	if (rc < 0) {
    19fc:	2800      	cmp	r0, #0
    19fe:	db07      	blt.n	1a10 <spi_m_sync_init+0x34>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    1a00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    1a04:	8223      	strh	r3, [r4, #16]
	spi->io.read  = _spi_m_sync_io_read;
    1a06:	4b07      	ldr	r3, [pc, #28]	; (1a24 <spi_m_sync_init+0x48>)
    1a08:	60e3      	str	r3, [r4, #12]
	spi->io.write = _spi_m_sync_io_write;
    1a0a:	4b07      	ldr	r3, [pc, #28]	; (1a28 <spi_m_sync_init+0x4c>)
    1a0c:	60a3      	str	r3, [r4, #8]

	return ERR_NONE;
    1a0e:	2000      	movs	r0, #0
}
    1a10:	bd38      	pop	{r3, r4, r5, pc}
    1a12:	2000      	movs	r0, #0
    1a14:	e7e9      	b.n	19ea <spi_m_sync_init+0xe>
    1a16:	bf00      	nop
    1a18:	0000ed14 	.word	0x0000ed14
    1a1c:	000026b1 	.word	0x000026b1
    1a20:	00003abd 	.word	0x00003abd
    1a24:	00001b81 	.word	0x00001b81
    1a28:	00001b45 	.word	0x00001b45

00001a2c <spi_m_sync_enable>:

	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
    1a2c:	b510      	push	{r4, lr}
	ASSERT(spi);
    1a2e:	4604      	mov	r4, r0
    1a30:	2251      	movs	r2, #81	; 0x51
    1a32:	4905      	ldr	r1, [pc, #20]	; (1a48 <spi_m_sync_enable+0x1c>)
    1a34:	3000      	adds	r0, #0
    1a36:	bf18      	it	ne
    1a38:	2001      	movne	r0, #1
    1a3a:	4b04      	ldr	r3, [pc, #16]	; (1a4c <spi_m_sync_enable+0x20>)
    1a3c:	4798      	blx	r3

	_spi_m_sync_enable(&spi->dev);
    1a3e:	4620      	mov	r0, r4
    1a40:	4b03      	ldr	r3, [pc, #12]	; (1a50 <spi_m_sync_enable+0x24>)
    1a42:	4798      	blx	r3
    1a44:	bd10      	pop	{r4, pc}
    1a46:	bf00      	nop
    1a48:	0000ed14 	.word	0x0000ed14
    1a4c:	000026b1 	.word	0x000026b1
    1a50:	00003b91 	.word	0x00003b91

00001a54 <spi_m_sync_set_baudrate>:

	_spi_m_sync_disable(&spi->dev);
}

int32_t spi_m_sync_set_baudrate(struct spi_m_sync_descriptor *spi, const uint32_t baud_val)
{
    1a54:	b538      	push	{r3, r4, r5, lr}
    1a56:	460d      	mov	r5, r1
	ASSERT(spi);
    1a58:	4604      	mov	r4, r0
    1a5a:	225f      	movs	r2, #95	; 0x5f
    1a5c:	4905      	ldr	r1, [pc, #20]	; (1a74 <spi_m_sync_set_baudrate+0x20>)
    1a5e:	3000      	adds	r0, #0
    1a60:	bf18      	it	ne
    1a62:	2001      	movne	r0, #1
    1a64:	4b04      	ldr	r3, [pc, #16]	; (1a78 <spi_m_sync_set_baudrate+0x24>)
    1a66:	4798      	blx	r3

	return _spi_m_sync_set_baudrate(&spi->dev, baud_val);
    1a68:	4629      	mov	r1, r5
    1a6a:	4620      	mov	r0, r4
    1a6c:	4b03      	ldr	r3, [pc, #12]	; (1a7c <spi_m_sync_set_baudrate+0x28>)
    1a6e:	4798      	blx	r3
}
    1a70:	bd38      	pop	{r3, r4, r5, pc}
    1a72:	bf00      	nop
    1a74:	0000ed14 	.word	0x0000ed14
    1a78:	000026b1 	.word	0x000026b1
    1a7c:	00003bf5 	.word	0x00003bf5

00001a80 <spi_m_sync_set_mode>:

int32_t spi_m_sync_set_mode(struct spi_m_sync_descriptor *spi, const enum spi_transfer_mode mode)
{
    1a80:	b538      	push	{r3, r4, r5, lr}
    1a82:	460d      	mov	r5, r1
	ASSERT(spi);
    1a84:	4604      	mov	r4, r0
    1a86:	2266      	movs	r2, #102	; 0x66
    1a88:	4905      	ldr	r1, [pc, #20]	; (1aa0 <spi_m_sync_set_mode+0x20>)
    1a8a:	3000      	adds	r0, #0
    1a8c:	bf18      	it	ne
    1a8e:	2001      	movne	r0, #1
    1a90:	4b04      	ldr	r3, [pc, #16]	; (1aa4 <spi_m_sync_set_mode+0x24>)
    1a92:	4798      	blx	r3

	return _spi_m_sync_set_mode(&spi->dev, mode);
    1a94:	4629      	mov	r1, r5
    1a96:	4620      	mov	r0, r4
    1a98:	4b03      	ldr	r3, [pc, #12]	; (1aa8 <spi_m_sync_set_mode+0x28>)
    1a9a:	4798      	blx	r3
}
    1a9c:	bd38      	pop	{r3, r4, r5, pc}
    1a9e:	bf00      	nop
    1aa0:	0000ed14 	.word	0x0000ed14
    1aa4:	000026b1 	.word	0x000026b1
    1aa8:	00003bc1 	.word	0x00003bc1

00001aac <spi_m_sync_set_char_size>:

int32_t spi_m_sync_set_char_size(struct spi_m_sync_descriptor *spi, const enum spi_char_size char_size)
{
    1aac:	b538      	push	{r3, r4, r5, lr}
    1aae:	460d      	mov	r5, r1
	ASSERT(spi);
    1ab0:	4604      	mov	r4, r0
    1ab2:	226d      	movs	r2, #109	; 0x6d
    1ab4:	4905      	ldr	r1, [pc, #20]	; (1acc <spi_m_sync_set_char_size+0x20>)
    1ab6:	3000      	adds	r0, #0
    1ab8:	bf18      	it	ne
    1aba:	2001      	movne	r0, #1
    1abc:	4b04      	ldr	r3, [pc, #16]	; (1ad0 <spi_m_sync_set_char_size+0x24>)
    1abe:	4798      	blx	r3

	return _spi_m_sync_set_char_size(&spi->dev, char_size);
    1ac0:	4629      	mov	r1, r5
    1ac2:	4620      	mov	r0, r4
    1ac4:	4b03      	ldr	r3, [pc, #12]	; (1ad4 <spi_m_sync_set_char_size+0x28>)
    1ac6:	4798      	blx	r3
}
    1ac8:	bd38      	pop	{r3, r4, r5, pc}
    1aca:	bf00      	nop
    1acc:	0000ed14 	.word	0x0000ed14
    1ad0:	000026b1 	.word	0x000026b1
    1ad4:	00003c31 	.word	0x00003c31

00001ad8 <spi_m_sync_set_data_order>:

int32_t spi_m_sync_set_data_order(struct spi_m_sync_descriptor *spi, const enum spi_data_order dord)
{
    1ad8:	b538      	push	{r3, r4, r5, lr}
    1ada:	460d      	mov	r5, r1
	ASSERT(spi);
    1adc:	4604      	mov	r4, r0
    1ade:	2274      	movs	r2, #116	; 0x74
    1ae0:	4905      	ldr	r1, [pc, #20]	; (1af8 <spi_m_sync_set_data_order+0x20>)
    1ae2:	3000      	adds	r0, #0
    1ae4:	bf18      	it	ne
    1ae6:	2001      	movne	r0, #1
    1ae8:	4b04      	ldr	r3, [pc, #16]	; (1afc <spi_m_sync_set_data_order+0x24>)
    1aea:	4798      	blx	r3

	return _spi_m_sync_set_data_order(&spi->dev, dord);
    1aec:	4629      	mov	r1, r5
    1aee:	4620      	mov	r0, r4
    1af0:	4b03      	ldr	r3, [pc, #12]	; (1b00 <spi_m_sync_set_data_order+0x28>)
    1af2:	4798      	blx	r3
}
    1af4:	bd38      	pop	{r3, r4, r5, pc}
    1af6:	bf00      	nop
    1af8:	0000ed14 	.word	0x0000ed14
    1afc:	000026b1 	.word	0x000026b1
    1b00:	00003c69 	.word	0x00003c69

00001b04 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    1b04:	b530      	push	{r4, r5, lr}
    1b06:	b085      	sub	sp, #20
    1b08:	460c      	mov	r4, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    1b0a:	4605      	mov	r5, r0
    1b0c:	b190      	cbz	r0, 1b34 <spi_m_sync_transfer+0x30>
    1b0e:	1c08      	adds	r0, r1, #0
    1b10:	bf18      	it	ne
    1b12:	2001      	movne	r0, #1
    1b14:	22b3      	movs	r2, #179	; 0xb3
    1b16:	4908      	ldr	r1, [pc, #32]	; (1b38 <spi_m_sync_transfer+0x34>)
    1b18:	4b08      	ldr	r3, [pc, #32]	; (1b3c <spi_m_sync_transfer+0x38>)
    1b1a:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    1b1c:	6823      	ldr	r3, [r4, #0]
    1b1e:	9301      	str	r3, [sp, #4]
	msg.rxbuf = p_xfer->rxbuf;
    1b20:	6863      	ldr	r3, [r4, #4]
    1b22:	9302      	str	r3, [sp, #8]
	msg.size  = p_xfer->size;
    1b24:	68a3      	ldr	r3, [r4, #8]
    1b26:	9303      	str	r3, [sp, #12]

	return _spi_m_sync_trans(&spi->dev, &msg);
    1b28:	a901      	add	r1, sp, #4
    1b2a:	4628      	mov	r0, r5
    1b2c:	4b04      	ldr	r3, [pc, #16]	; (1b40 <spi_m_sync_transfer+0x3c>)
    1b2e:	4798      	blx	r3
}
    1b30:	b005      	add	sp, #20
    1b32:	bd30      	pop	{r4, r5, pc}
    1b34:	2000      	movs	r0, #0
    1b36:	e7ed      	b.n	1b14 <spi_m_sync_transfer+0x10>
    1b38:	0000ed14 	.word	0x0000ed14
    1b3c:	000026b1 	.word	0x000026b1
    1b40:	00003c9d 	.word	0x00003c9d

00001b44 <_spi_m_sync_io_write>:
{
    1b44:	b570      	push	{r4, r5, r6, lr}
    1b46:	b084      	sub	sp, #16
    1b48:	460e      	mov	r6, r1
    1b4a:	4615      	mov	r5, r2
	ASSERT(io);
    1b4c:	4604      	mov	r4, r0
    1b4e:	22a3      	movs	r2, #163	; 0xa3
    1b50:	4908      	ldr	r1, [pc, #32]	; (1b74 <_spi_m_sync_io_write+0x30>)
    1b52:	3000      	adds	r0, #0
    1b54:	bf18      	it	ne
    1b56:	2001      	movne	r0, #1
    1b58:	4b07      	ldr	r3, [pc, #28]	; (1b78 <_spi_m_sync_io_write+0x34>)
    1b5a:	4798      	blx	r3
	xfer.rxbuf = 0;
    1b5c:	2300      	movs	r3, #0
    1b5e:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
    1b60:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
    1b62:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    1b64:	a901      	add	r1, sp, #4
    1b66:	f1a4 0008 	sub.w	r0, r4, #8
    1b6a:	4b04      	ldr	r3, [pc, #16]	; (1b7c <_spi_m_sync_io_write+0x38>)
    1b6c:	4798      	blx	r3
}
    1b6e:	b004      	add	sp, #16
    1b70:	bd70      	pop	{r4, r5, r6, pc}
    1b72:	bf00      	nop
    1b74:	0000ed14 	.word	0x0000ed14
    1b78:	000026b1 	.word	0x000026b1
    1b7c:	00001b05 	.word	0x00001b05

00001b80 <_spi_m_sync_io_read>:
{
    1b80:	b570      	push	{r4, r5, r6, lr}
    1b82:	b084      	sub	sp, #16
    1b84:	460e      	mov	r6, r1
    1b86:	4615      	mov	r5, r2
	ASSERT(io);
    1b88:	4604      	mov	r4, r0
    1b8a:	2287      	movs	r2, #135	; 0x87
    1b8c:	4908      	ldr	r1, [pc, #32]	; (1bb0 <_spi_m_sync_io_read+0x30>)
    1b8e:	3000      	adds	r0, #0
    1b90:	bf18      	it	ne
    1b92:	2001      	movne	r0, #1
    1b94:	4b07      	ldr	r3, [pc, #28]	; (1bb4 <_spi_m_sync_io_read+0x34>)
    1b96:	4798      	blx	r3
	xfer.rxbuf = buf;
    1b98:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
    1b9a:	2300      	movs	r3, #0
    1b9c:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
    1b9e:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    1ba0:	a901      	add	r1, sp, #4
    1ba2:	f1a4 0008 	sub.w	r0, r4, #8
    1ba6:	4b04      	ldr	r3, [pc, #16]	; (1bb8 <_spi_m_sync_io_read+0x38>)
    1ba8:	4798      	blx	r3
}
    1baa:	b004      	add	sp, #16
    1bac:	bd70      	pop	{r4, r5, r6, pc}
    1bae:	bf00      	nop
    1bb0:	0000ed14 	.word	0x0000ed14
    1bb4:	000026b1 	.word	0x000026b1
    1bb8:	00001b05 	.word	0x00001b05

00001bbc <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
    1bbc:	b538      	push	{r3, r4, r5, lr}
    1bbe:	460d      	mov	r5, r1
	ASSERT(spi && io);
    1bc0:	4604      	mov	r4, r0
    1bc2:	b150      	cbz	r0, 1bda <spi_m_sync_get_io_descriptor+0x1e>
    1bc4:	1c08      	adds	r0, r1, #0
    1bc6:	bf18      	it	ne
    1bc8:	2001      	movne	r0, #1
    1bca:	22be      	movs	r2, #190	; 0xbe
    1bcc:	4904      	ldr	r1, [pc, #16]	; (1be0 <spi_m_sync_get_io_descriptor+0x24>)
    1bce:	4b05      	ldr	r3, [pc, #20]	; (1be4 <spi_m_sync_get_io_descriptor+0x28>)
    1bd0:	4798      	blx	r3
	*io = &spi->io;
    1bd2:	3408      	adds	r4, #8
    1bd4:	602c      	str	r4, [r5, #0]
	return 0;
}
    1bd6:	2000      	movs	r0, #0
    1bd8:	bd38      	pop	{r3, r4, r5, pc}
    1bda:	2000      	movs	r0, #0
    1bdc:	e7f5      	b.n	1bca <spi_m_sync_get_io_descriptor+0xe>
    1bde:	bf00      	nop
    1be0:	0000ed14 	.word	0x0000ed14
    1be4:	000026b1 	.word	0x000026b1

00001be8 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    1be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1bea:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    1bec:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    1bee:	b12f      	cbz	r7, 1bfc <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    1bf0:	688d      	ldr	r5, [r1, #8]
    1bf2:	463c      	mov	r4, r7
    1bf4:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    1bf6:	f1c2 0e01 	rsb	lr, r2, #1
    1bfa:	e00b      	b.n	1c14 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
    1bfc:	4b0e      	ldr	r3, [pc, #56]	; (1c38 <timer_add_timer_task+0x50>)
    1bfe:	4798      	blx	r3
		return;
    1c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    1c02:	4473      	add	r3, lr
    1c04:	68a0      	ldr	r0, [r4, #8]
    1c06:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
    1c08:	42ab      	cmp	r3, r5
    1c0a:	d20a      	bcs.n	1c22 <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    1c0c:	6823      	ldr	r3, [r4, #0]
    1c0e:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    1c10:	b153      	cbz	r3, 1c28 <timer_add_timer_task+0x40>
    1c12:	461c      	mov	r4, r3
		if (it->time_label <= time) {
    1c14:	6863      	ldr	r3, [r4, #4]
    1c16:	4293      	cmp	r3, r2
    1c18:	d8f3      	bhi.n	1c02 <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
    1c1a:	68a0      	ldr	r0, [r4, #8]
    1c1c:	4403      	add	r3, r0
    1c1e:	1a9b      	subs	r3, r3, r2
    1c20:	e7f2      	b.n	1c08 <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
    1c22:	42a7      	cmp	r7, r4
    1c24:	d004      	beq.n	1c30 <timer_add_timer_task+0x48>
    1c26:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    1c28:	4620      	mov	r0, r4
    1c2a:	4b04      	ldr	r3, [pc, #16]	; (1c3c <timer_add_timer_task+0x54>)
    1c2c:	4798      	blx	r3
    1c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    1c30:	4660      	mov	r0, ip
    1c32:	4b01      	ldr	r3, [pc, #4]	; (1c38 <timer_add_timer_task+0x50>)
    1c34:	4798      	blx	r3
    1c36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1c38:	000026d9 	.word	0x000026d9
    1c3c:	00002705 	.word	0x00002705

00001c40 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    1c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
    1c44:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    1c46:	6907      	ldr	r7, [r0, #16]
    1c48:	3701      	adds	r7, #1
    1c4a:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    1c4c:	7e03      	ldrb	r3, [r0, #24]
    1c4e:	f013 0f01 	tst.w	r3, #1
    1c52:	d113      	bne.n	1c7c <timer_process_counted+0x3c>
    1c54:	7e03      	ldrb	r3, [r0, #24]
    1c56:	f013 0f02 	tst.w	r3, #2
    1c5a:	d10f      	bne.n	1c7c <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    1c5c:	b354      	cbz	r4, 1cb4 <timer_process_counted+0x74>
    1c5e:	6863      	ldr	r3, [r4, #4]
    1c60:	1afb      	subs	r3, r7, r3
    1c62:	68a2      	ldr	r2, [r4, #8]
    1c64:	4293      	cmp	r3, r2
    1c66:	d307      	bcc.n	1c78 <timer_process_counted+0x38>
    1c68:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    1c6a:	f100 0814 	add.w	r8, r0, #20
    1c6e:	f8df 9048 	ldr.w	r9, [pc, #72]	; 1cb8 <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    1c72:	f8df a048 	ldr.w	sl, [pc, #72]	; 1cbc <timer_process_counted+0x7c>
    1c76:	e012      	b.n	1c9e <timer_process_counted+0x5e>
    1c78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    1c7c:	7e03      	ldrb	r3, [r0, #24]
    1c7e:	f043 0302 	orr.w	r3, r3, #2
    1c82:	7603      	strb	r3, [r0, #24]
		return;
    1c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1c88:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    1c8a:	68e3      	ldr	r3, [r4, #12]
    1c8c:	4620      	mov	r0, r4
    1c8e:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    1c90:	b185      	cbz	r5, 1cb4 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    1c92:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    1c94:	686b      	ldr	r3, [r5, #4]
    1c96:	1afb      	subs	r3, r7, r3
    1c98:	68aa      	ldr	r2, [r5, #8]
    1c9a:	4293      	cmp	r3, r2
    1c9c:	d30a      	bcc.n	1cb4 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
    1c9e:	4640      	mov	r0, r8
    1ca0:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
    1ca2:	7c23      	ldrb	r3, [r4, #16]
    1ca4:	2b01      	cmp	r3, #1
    1ca6:	d1ef      	bne.n	1c88 <timer_process_counted+0x48>
			tmp->time_label = time;
    1ca8:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    1caa:	463a      	mov	r2, r7
    1cac:	4621      	mov	r1, r4
    1cae:	4640      	mov	r0, r8
    1cb0:	47d0      	blx	sl
    1cb2:	e7e9      	b.n	1c88 <timer_process_counted+0x48>
    1cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1cb8:	0000274d 	.word	0x0000274d
    1cbc:	00001be9 	.word	0x00001be9

00001cc0 <timer_init>:
{
    1cc0:	b538      	push	{r3, r4, r5, lr}
    1cc2:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    1cc4:	4604      	mov	r4, r0
    1cc6:	b178      	cbz	r0, 1ce8 <timer_init+0x28>
    1cc8:	1c08      	adds	r0, r1, #0
    1cca:	bf18      	it	ne
    1ccc:	2001      	movne	r0, #1
    1cce:	223b      	movs	r2, #59	; 0x3b
    1cd0:	4906      	ldr	r1, [pc, #24]	; (1cec <timer_init+0x2c>)
    1cd2:	4b07      	ldr	r3, [pc, #28]	; (1cf0 <timer_init+0x30>)
    1cd4:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    1cd6:	4629      	mov	r1, r5
    1cd8:	4620      	mov	r0, r4
    1cda:	4b06      	ldr	r3, [pc, #24]	; (1cf4 <timer_init+0x34>)
    1cdc:	4798      	blx	r3
	descr->time                           = 0;
    1cde:	2000      	movs	r0, #0
    1ce0:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    1ce2:	4b05      	ldr	r3, [pc, #20]	; (1cf8 <timer_init+0x38>)
    1ce4:	6023      	str	r3, [r4, #0]
}
    1ce6:	bd38      	pop	{r3, r4, r5, pc}
    1ce8:	2000      	movs	r0, #0
    1cea:	e7f0      	b.n	1cce <timer_init+0xe>
    1cec:	0000ed30 	.word	0x0000ed30
    1cf0:	000026b1 	.word	0x000026b1
    1cf4:	00003e4d 	.word	0x00003e4d
    1cf8:	00001c41 	.word	0x00001c41

00001cfc <timer_start>:
{
    1cfc:	b510      	push	{r4, lr}
	ASSERT(descr);
    1cfe:	4604      	mov	r4, r0
    1d00:	2253      	movs	r2, #83	; 0x53
    1d02:	4909      	ldr	r1, [pc, #36]	; (1d28 <timer_start+0x2c>)
    1d04:	3000      	adds	r0, #0
    1d06:	bf18      	it	ne
    1d08:	2001      	movne	r0, #1
    1d0a:	4b08      	ldr	r3, [pc, #32]	; (1d2c <timer_start+0x30>)
    1d0c:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
    1d0e:	4620      	mov	r0, r4
    1d10:	4b07      	ldr	r3, [pc, #28]	; (1d30 <timer_start+0x34>)
    1d12:	4798      	blx	r3
    1d14:	b920      	cbnz	r0, 1d20 <timer_start+0x24>
	_timer_start(&descr->device);
    1d16:	4620      	mov	r0, r4
    1d18:	4b06      	ldr	r3, [pc, #24]	; (1d34 <timer_start+0x38>)
    1d1a:	4798      	blx	r3
	return ERR_NONE;
    1d1c:	2000      	movs	r0, #0
    1d1e:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    1d20:	f06f 0010 	mvn.w	r0, #16
}
    1d24:	bd10      	pop	{r4, pc}
    1d26:	bf00      	nop
    1d28:	0000ed30 	.word	0x0000ed30
    1d2c:	000026b1 	.word	0x000026b1
    1d30:	00003fa5 	.word	0x00003fa5
    1d34:	00003f91 	.word	0x00003f91

00001d38 <timer_add_task>:
{
    1d38:	b570      	push	{r4, r5, r6, lr}
    1d3a:	b082      	sub	sp, #8
    1d3c:	460d      	mov	r5, r1
	ASSERT(descr && task);
    1d3e:	4604      	mov	r4, r0
    1d40:	b318      	cbz	r0, 1d8a <timer_add_task+0x52>
    1d42:	1c08      	adds	r0, r1, #0
    1d44:	bf18      	it	ne
    1d46:	2001      	movne	r0, #1
    1d48:	227a      	movs	r2, #122	; 0x7a
    1d4a:	491e      	ldr	r1, [pc, #120]	; (1dc4 <timer_add_task+0x8c>)
    1d4c:	4b1e      	ldr	r3, [pc, #120]	; (1dc8 <timer_add_task+0x90>)
    1d4e:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    1d50:	7e23      	ldrb	r3, [r4, #24]
    1d52:	f043 0301 	orr.w	r3, r3, #1
    1d56:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
    1d58:	f104 0614 	add.w	r6, r4, #20
    1d5c:	4629      	mov	r1, r5
    1d5e:	4630      	mov	r0, r6
    1d60:	4b1a      	ldr	r3, [pc, #104]	; (1dcc <timer_add_task+0x94>)
    1d62:	4798      	blx	r3
    1d64:	b998      	cbnz	r0, 1d8e <timer_add_task+0x56>
	task->time_label = descr->time;
    1d66:	6923      	ldr	r3, [r4, #16]
    1d68:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    1d6a:	6922      	ldr	r2, [r4, #16]
    1d6c:	4629      	mov	r1, r5
    1d6e:	4630      	mov	r0, r6
    1d70:	4b17      	ldr	r3, [pc, #92]	; (1dd0 <timer_add_task+0x98>)
    1d72:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    1d74:	7e23      	ldrb	r3, [r4, #24]
    1d76:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    1d7a:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    1d7c:	7e23      	ldrb	r3, [r4, #24]
    1d7e:	f013 0f02 	tst.w	r3, #2
    1d82:	d110      	bne.n	1da6 <timer_add_task+0x6e>
	return ERR_NONE;
    1d84:	2000      	movs	r0, #0
}
    1d86:	b002      	add	sp, #8
    1d88:	bd70      	pop	{r4, r5, r6, pc}
    1d8a:	2000      	movs	r0, #0
    1d8c:	e7dc      	b.n	1d48 <timer_add_task+0x10>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    1d8e:	7e23      	ldrb	r3, [r4, #24]
    1d90:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    1d94:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
    1d96:	227f      	movs	r2, #127	; 0x7f
    1d98:	490a      	ldr	r1, [pc, #40]	; (1dc4 <timer_add_task+0x8c>)
    1d9a:	2000      	movs	r0, #0
    1d9c:	4b0a      	ldr	r3, [pc, #40]	; (1dc8 <timer_add_task+0x90>)
    1d9e:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    1da0:	f06f 0011 	mvn.w	r0, #17
    1da4:	e7ef      	b.n	1d86 <timer_add_task+0x4e>
		CRITICAL_SECTION_ENTER()
    1da6:	a801      	add	r0, sp, #4
    1da8:	4b0a      	ldr	r3, [pc, #40]	; (1dd4 <timer_add_task+0x9c>)
    1daa:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    1dac:	7e23      	ldrb	r3, [r4, #24]
    1dae:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    1db2:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
    1db4:	4620      	mov	r0, r4
    1db6:	4b08      	ldr	r3, [pc, #32]	; (1dd8 <timer_add_task+0xa0>)
    1db8:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    1dba:	a801      	add	r0, sp, #4
    1dbc:	4b07      	ldr	r3, [pc, #28]	; (1ddc <timer_add_task+0xa4>)
    1dbe:	4798      	blx	r3
	return ERR_NONE;
    1dc0:	2000      	movs	r0, #0
    1dc2:	e7e0      	b.n	1d86 <timer_add_task+0x4e>
    1dc4:	0000ed30 	.word	0x0000ed30
    1dc8:	000026b1 	.word	0x000026b1
    1dcc:	000026b7 	.word	0x000026b7
    1dd0:	00001be9 	.word	0x00001be9
    1dd4:	000014cd 	.word	0x000014cd
    1dd8:	00003fbd 	.word	0x00003fbd
    1ddc:	000014db 	.word	0x000014db

00001de0 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
    1de0:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    1de2:	2300      	movs	r3, #0
    1de4:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.tx_done) {
    1de6:	69c3      	ldr	r3, [r0, #28]
    1de8:	b11b      	cbz	r3, 1df2 <usart_transmission_complete+0x12>
    1dea:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.tx_done(descr);
    1dee:	4610      	mov	r0, r2
    1df0:	4798      	blx	r3
    1df2:	bd08      	pop	{r3, pc}

00001df4 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
    1df4:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    1df6:	2300      	movs	r3, #0
    1df8:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.error) {
    1dfa:	6a43      	ldr	r3, [r0, #36]	; 0x24
    1dfc:	b11b      	cbz	r3, 1e06 <usart_error+0x12>
    1dfe:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.error(descr);
    1e02:	4610      	mov	r0, r2
    1e04:	4798      	blx	r3
    1e06:	bd08      	pop	{r3, pc}

00001e08 <usart_fill_rx_buffer>:
{
    1e08:	b538      	push	{r3, r4, r5, lr}
    1e0a:	4604      	mov	r4, r0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    1e0c:	f1a0 0508 	sub.w	r5, r0, #8
	ringbuffer_put(&descr->rx, data);
    1e10:	302c      	adds	r0, #44	; 0x2c
    1e12:	4b03      	ldr	r3, [pc, #12]	; (1e20 <usart_fill_rx_buffer+0x18>)
    1e14:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
    1e16:	6a23      	ldr	r3, [r4, #32]
    1e18:	b10b      	cbz	r3, 1e1e <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
    1e1a:	4628      	mov	r0, r5
    1e1c:	4798      	blx	r3
    1e1e:	bd38      	pop	{r3, r4, r5, pc}
    1e20:	000027ed 	.word	0x000027ed

00001e24 <usart_async_write>:
{
    1e24:	b570      	push	{r4, r5, r6, lr}
    1e26:	460e      	mov	r6, r1
    1e28:	4615      	mov	r5, r2
	ASSERT(descr && buf && length);
    1e2a:	4604      	mov	r4, r0
    1e2c:	b1e0      	cbz	r0, 1e68 <usart_async_write+0x44>
    1e2e:	b1e9      	cbz	r1, 1e6c <usart_async_write+0x48>
    1e30:	1c10      	adds	r0, r2, #0
    1e32:	bf18      	it	ne
    1e34:	2001      	movne	r0, #1
    1e36:	f240 123b 	movw	r2, #315	; 0x13b
    1e3a:	490f      	ldr	r1, [pc, #60]	; (1e78 <usart_async_write+0x54>)
    1e3c:	4b0f      	ldr	r3, [pc, #60]	; (1e7c <usart_async_write+0x58>)
    1e3e:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
    1e40:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
    1e44:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
    1e48:	429a      	cmp	r2, r3
    1e4a:	d111      	bne.n	1e70 <usart_async_write+0x4c>
	descr->tx_buffer        = (uint8_t *)buf;
    1e4c:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
    1e4e:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
	descr->tx_por           = 0;
    1e52:	2300      	movs	r3, #0
    1e54:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    1e58:	2301      	movs	r3, #1
    1e5a:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    1e5c:	f104 0008 	add.w	r0, r4, #8
    1e60:	4b07      	ldr	r3, [pc, #28]	; (1e80 <usart_async_write+0x5c>)
    1e62:	4798      	blx	r3
	return (int32_t)length;
    1e64:	4628      	mov	r0, r5
    1e66:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
    1e68:	2000      	movs	r0, #0
    1e6a:	e7e4      	b.n	1e36 <usart_async_write+0x12>
    1e6c:	2000      	movs	r0, #0
    1e6e:	e7e2      	b.n	1e36 <usart_async_write+0x12>
		return ERR_NO_RESOURCE;
    1e70:	f06f 001b 	mvn.w	r0, #27
}
    1e74:	bd70      	pop	{r4, r5, r6, pc}
    1e76:	bf00      	nop
    1e78:	0000ed48 	.word	0x0000ed48
    1e7c:	000026b1 	.word	0x000026b1
    1e80:	000039a1 	.word	0x000039a1

00001e84 <usart_process_byte_sent>:
{
    1e84:	b510      	push	{r4, lr}
    1e86:	4604      	mov	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
    1e88:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    1e8a:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
    1e8e:	429a      	cmp	r2, r3
    1e90:	d009      	beq.n	1ea6 <usart_process_byte_sent+0x22>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    1e92:	6c02      	ldr	r2, [r0, #64]	; 0x40
    1e94:	1c59      	adds	r1, r3, #1
    1e96:	8781      	strh	r1, [r0, #60]	; 0x3c
    1e98:	5cd1      	ldrb	r1, [r2, r3]
    1e9a:	4b04      	ldr	r3, [pc, #16]	; (1eac <usart_process_byte_sent+0x28>)
    1e9c:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    1e9e:	4620      	mov	r0, r4
    1ea0:	4b03      	ldr	r3, [pc, #12]	; (1eb0 <usart_process_byte_sent+0x2c>)
    1ea2:	4798      	blx	r3
    1ea4:	bd10      	pop	{r4, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
    1ea6:	4b03      	ldr	r3, [pc, #12]	; (1eb4 <usart_process_byte_sent+0x30>)
    1ea8:	4798      	blx	r3
    1eaa:	bd10      	pop	{r4, pc}
    1eac:	00003991 	.word	0x00003991
    1eb0:	000039a1 	.word	0x000039a1
    1eb4:	000039a9 	.word	0x000039a9

00001eb8 <usart_async_read>:
{
    1eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1ebc:	b082      	sub	sp, #8
    1ebe:	460f      	mov	r7, r1
    1ec0:	4690      	mov	r8, r2
	ASSERT(descr && buf && length);
    1ec2:	4606      	mov	r6, r0
    1ec4:	b1a0      	cbz	r0, 1ef0 <usart_async_read+0x38>
    1ec6:	b199      	cbz	r1, 1ef0 <usart_async_read+0x38>
    1ec8:	2a00      	cmp	r2, #0
    1eca:	d12d      	bne.n	1f28 <usart_async_read+0x70>
    1ecc:	f44f 72ac 	mov.w	r2, #344	; 0x158
    1ed0:	4929      	ldr	r1, [pc, #164]	; (1f78 <usart_async_read+0xc0>)
    1ed2:	2000      	movs	r0, #0
    1ed4:	4b29      	ldr	r3, [pc, #164]	; (1f7c <usart_async_read+0xc4>)
    1ed6:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    1ed8:	a801      	add	r0, sp, #4
    1eda:	4b29      	ldr	r3, [pc, #164]	; (1f80 <usart_async_read+0xc8>)
    1edc:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    1ede:	f106 0034 	add.w	r0, r6, #52	; 0x34
    1ee2:	4b28      	ldr	r3, [pc, #160]	; (1f84 <usart_async_read+0xcc>)
    1ee4:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
    1ee6:	a801      	add	r0, sp, #4
    1ee8:	4b27      	ldr	r3, [pc, #156]	; (1f88 <usart_async_read+0xd0>)
    1eea:	4798      	blx	r3
	uint16_t                       was_read = 0;
    1eec:	2500      	movs	r5, #0
	return (int32_t)was_read;
    1eee:	e03e      	b.n	1f6e <usart_async_read+0xb6>
	ASSERT(descr && buf && length);
    1ef0:	f44f 72ac 	mov.w	r2, #344	; 0x158
    1ef4:	4920      	ldr	r1, [pc, #128]	; (1f78 <usart_async_read+0xc0>)
    1ef6:	2000      	movs	r0, #0
    1ef8:	4b20      	ldr	r3, [pc, #128]	; (1f7c <usart_async_read+0xc4>)
    1efa:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    1efc:	a801      	add	r0, sp, #4
    1efe:	4b20      	ldr	r3, [pc, #128]	; (1f80 <usart_async_read+0xc8>)
    1f00:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    1f02:	f106 0a34 	add.w	sl, r6, #52	; 0x34
    1f06:	4650      	mov	r0, sl
    1f08:	4b1e      	ldr	r3, [pc, #120]	; (1f84 <usart_async_read+0xcc>)
    1f0a:	4798      	blx	r3
    1f0c:	4681      	mov	r9, r0
	CRITICAL_SECTION_LEAVE()
    1f0e:	a801      	add	r0, sp, #4
    1f10:	4b1d      	ldr	r3, [pc, #116]	; (1f88 <usart_async_read+0xd0>)
    1f12:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    1f14:	f1b9 0f00 	cmp.w	r9, #0
    1f18:	d004      	beq.n	1f24 <usart_async_read+0x6c>
    1f1a:	f1b8 0f00 	cmp.w	r8, #0
    1f1e:	d119      	bne.n	1f54 <usart_async_read+0x9c>
	uint16_t                       was_read = 0;
    1f20:	2500      	movs	r5, #0
    1f22:	e024      	b.n	1f6e <usart_async_read+0xb6>
    1f24:	2500      	movs	r5, #0
    1f26:	e022      	b.n	1f6e <usart_async_read+0xb6>
	ASSERT(descr && buf && length);
    1f28:	f44f 72ac 	mov.w	r2, #344	; 0x158
    1f2c:	4912      	ldr	r1, [pc, #72]	; (1f78 <usart_async_read+0xc0>)
    1f2e:	2001      	movs	r0, #1
    1f30:	4b12      	ldr	r3, [pc, #72]	; (1f7c <usart_async_read+0xc4>)
    1f32:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    1f34:	a801      	add	r0, sp, #4
    1f36:	4b12      	ldr	r3, [pc, #72]	; (1f80 <usart_async_read+0xc8>)
    1f38:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    1f3a:	f106 0a34 	add.w	sl, r6, #52	; 0x34
    1f3e:	4650      	mov	r0, sl
    1f40:	4b10      	ldr	r3, [pc, #64]	; (1f84 <usart_async_read+0xcc>)
    1f42:	4798      	blx	r3
    1f44:	4681      	mov	r9, r0
	CRITICAL_SECTION_LEAVE()
    1f46:	a801      	add	r0, sp, #4
    1f48:	4b0f      	ldr	r3, [pc, #60]	; (1f88 <usart_async_read+0xd0>)
    1f4a:	4798      	blx	r3
	uint16_t                       was_read = 0;
    1f4c:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
    1f4e:	f1b9 0f00 	cmp.w	r9, #0
    1f52:	d00c      	beq.n	1f6e <usart_async_read+0xb6>
{
    1f54:	2400      	movs	r4, #0
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    1f56:	4e0d      	ldr	r6, [pc, #52]	; (1f8c <usart_async_read+0xd4>)
    1f58:	1c60      	adds	r0, r4, #1
    1f5a:	b285      	uxth	r5, r0
    1f5c:	1939      	adds	r1, r7, r4
    1f5e:	4650      	mov	r0, sl
    1f60:	47b0      	blx	r6
    1f62:	3401      	adds	r4, #1
	while ((was_read < num) && (was_read < length)) {
    1f64:	454c      	cmp	r4, r9
    1f66:	d202      	bcs.n	1f6e <usart_async_read+0xb6>
    1f68:	b2a3      	uxth	r3, r4
    1f6a:	4598      	cmp	r8, r3
    1f6c:	d8f4      	bhi.n	1f58 <usart_async_read+0xa0>
}
    1f6e:	4628      	mov	r0, r5
    1f70:	b002      	add	sp, #8
    1f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1f76:	bf00      	nop
    1f78:	0000ed48 	.word	0x0000ed48
    1f7c:	000026b1 	.word	0x000026b1
    1f80:	000014cd 	.word	0x000014cd
    1f84:	0000282d 	.word	0x0000282d
    1f88:	000014db 	.word	0x000014db
    1f8c:	000027a9 	.word	0x000027a9

00001f90 <usart_async_init>:
{
    1f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f92:	460d      	mov	r5, r1
    1f94:	4616      	mov	r6, r2
    1f96:	461f      	mov	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    1f98:	4604      	mov	r4, r0
    1f9a:	b320      	cbz	r0, 1fe6 <usart_async_init+0x56>
    1f9c:	b329      	cbz	r1, 1fea <usart_async_init+0x5a>
    1f9e:	b332      	cbz	r2, 1fee <usart_async_init+0x5e>
    1fa0:	1c18      	adds	r0, r3, #0
    1fa2:	bf18      	it	ne
    1fa4:	2001      	movne	r0, #1
    1fa6:	223a      	movs	r2, #58	; 0x3a
    1fa8:	4913      	ldr	r1, [pc, #76]	; (1ff8 <usart_async_init+0x68>)
    1faa:	4b14      	ldr	r3, [pc, #80]	; (1ffc <usart_async_init+0x6c>)
    1fac:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    1fae:	463a      	mov	r2, r7
    1fb0:	4631      	mov	r1, r6
    1fb2:	f104 0034 	add.w	r0, r4, #52	; 0x34
    1fb6:	4b12      	ldr	r3, [pc, #72]	; (2000 <usart_async_init+0x70>)
    1fb8:	4798      	blx	r3
    1fba:	b9d0      	cbnz	r0, 1ff2 <usart_async_init+0x62>
	init_status = _usart_async_init(&descr->device, hw);
    1fbc:	4629      	mov	r1, r5
    1fbe:	f104 0008 	add.w	r0, r4, #8
    1fc2:	4b10      	ldr	r3, [pc, #64]	; (2004 <usart_async_init+0x74>)
    1fc4:	4798      	blx	r3
	if (init_status) {
    1fc6:	4603      	mov	r3, r0
    1fc8:	b958      	cbnz	r0, 1fe2 <usart_async_init+0x52>
	descr->io.read  = usart_async_read;
    1fca:	4a0f      	ldr	r2, [pc, #60]	; (2008 <usart_async_init+0x78>)
    1fcc:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_async_write;
    1fce:	4a0f      	ldr	r2, [pc, #60]	; (200c <usart_async_init+0x7c>)
    1fd0:	6022      	str	r2, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    1fd2:	4a0f      	ldr	r2, [pc, #60]	; (2010 <usart_async_init+0x80>)
    1fd4:	60a2      	str	r2, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    1fd6:	4a0f      	ldr	r2, [pc, #60]	; (2014 <usart_async_init+0x84>)
    1fd8:	60e2      	str	r2, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    1fda:	4a0f      	ldr	r2, [pc, #60]	; (2018 <usart_async_init+0x88>)
    1fdc:	6122      	str	r2, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    1fde:	4a0f      	ldr	r2, [pc, #60]	; (201c <usart_async_init+0x8c>)
    1fe0:	6162      	str	r2, [r4, #20]
}
    1fe2:	4618      	mov	r0, r3
    1fe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    1fe6:	2000      	movs	r0, #0
    1fe8:	e7dd      	b.n	1fa6 <usart_async_init+0x16>
    1fea:	2000      	movs	r0, #0
    1fec:	e7db      	b.n	1fa6 <usart_async_init+0x16>
    1fee:	2000      	movs	r0, #0
    1ff0:	e7d9      	b.n	1fa6 <usart_async_init+0x16>
		return ERR_INVALID_ARG;
    1ff2:	f06f 030c 	mvn.w	r3, #12
    1ff6:	e7f4      	b.n	1fe2 <usart_async_init+0x52>
    1ff8:	0000ed48 	.word	0x0000ed48
    1ffc:	000026b1 	.word	0x000026b1
    2000:	00002759 	.word	0x00002759
    2004:	00003901 	.word	0x00003901
    2008:	00001eb9 	.word	0x00001eb9
    200c:	00001e25 	.word	0x00001e25
    2010:	00001e85 	.word	0x00001e85
    2014:	00001e09 	.word	0x00001e09
    2018:	00001de1 	.word	0x00001de1
    201c:	00001df5 	.word	0x00001df5

00002020 <usart_async_enable>:
{
    2020:	b510      	push	{r4, lr}
	ASSERT(descr);
    2022:	4604      	mov	r4, r0
    2024:	2261      	movs	r2, #97	; 0x61
    2026:	4906      	ldr	r1, [pc, #24]	; (2040 <usart_async_enable+0x20>)
    2028:	3000      	adds	r0, #0
    202a:	bf18      	it	ne
    202c:	2001      	movne	r0, #1
    202e:	4b05      	ldr	r3, [pc, #20]	; (2044 <usart_async_enable+0x24>)
    2030:	4798      	blx	r3
	_usart_async_enable(&descr->device);
    2032:	f104 0008 	add.w	r0, r4, #8
    2036:	4b04      	ldr	r3, [pc, #16]	; (2048 <usart_async_enable+0x28>)
    2038:	4798      	blx	r3
}
    203a:	2000      	movs	r0, #0
    203c:	bd10      	pop	{r4, pc}
    203e:	bf00      	nop
    2040:	0000ed48 	.word	0x0000ed48
    2044:	000026b1 	.word	0x000026b1
    2048:	0000397d 	.word	0x0000397d

0000204c <usart_async_get_io_descriptor>:
{
    204c:	b538      	push	{r3, r4, r5, lr}
    204e:	460c      	mov	r4, r1
	ASSERT(descr && io);
    2050:	4605      	mov	r5, r0
    2052:	b148      	cbz	r0, 2068 <usart_async_get_io_descriptor+0x1c>
    2054:	1c08      	adds	r0, r1, #0
    2056:	bf18      	it	ne
    2058:	2001      	movne	r0, #1
    205a:	2277      	movs	r2, #119	; 0x77
    205c:	4903      	ldr	r1, [pc, #12]	; (206c <usart_async_get_io_descriptor+0x20>)
    205e:	4b04      	ldr	r3, [pc, #16]	; (2070 <usart_async_get_io_descriptor+0x24>)
    2060:	4798      	blx	r3
	*io = &descr->io;
    2062:	6025      	str	r5, [r4, #0]
}
    2064:	2000      	movs	r0, #0
    2066:	bd38      	pop	{r3, r4, r5, pc}
    2068:	2000      	movs	r0, #0
    206a:	e7f6      	b.n	205a <usart_async_get_io_descriptor+0xe>
    206c:	0000ed48 	.word	0x0000ed48
    2070:	000026b1 	.word	0x000026b1

00002074 <usart_async_register_callback>:
{
    2074:	b570      	push	{r4, r5, r6, lr}
    2076:	460c      	mov	r4, r1
    2078:	4616      	mov	r6, r2
	ASSERT(descr);
    207a:	4605      	mov	r5, r0
    207c:	2283      	movs	r2, #131	; 0x83
    207e:	4917      	ldr	r1, [pc, #92]	; (20dc <usart_async_register_callback+0x68>)
    2080:	3000      	adds	r0, #0
    2082:	bf18      	it	ne
    2084:	2001      	movne	r0, #1
    2086:	4b16      	ldr	r3, [pc, #88]	; (20e0 <usart_async_register_callback+0x6c>)
    2088:	4798      	blx	r3
	switch (type) {
    208a:	2c01      	cmp	r4, #1
    208c:	d010      	beq.n	20b0 <usart_async_register_callback+0x3c>
    208e:	b124      	cbz	r4, 209a <usart_async_register_callback+0x26>
    2090:	2c02      	cmp	r4, #2
    2092:	d018      	beq.n	20c6 <usart_async_register_callback+0x52>
		return ERR_INVALID_ARG;
    2094:	f06f 000c 	mvn.w	r0, #12
}
    2098:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.rx_done = cb;
    209a:	62ae      	str	r6, [r5, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
    209c:	1c32      	adds	r2, r6, #0
    209e:	bf18      	it	ne
    20a0:	2201      	movne	r2, #1
    20a2:	2101      	movs	r1, #1
    20a4:	f105 0008 	add.w	r0, r5, #8
    20a8:	4b0e      	ldr	r3, [pc, #56]	; (20e4 <usart_async_register_callback+0x70>)
    20aa:	4798      	blx	r3
	return ERR_NONE;
    20ac:	2000      	movs	r0, #0
		break;
    20ae:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.tx_done = cb;
    20b0:	626e      	str	r6, [r5, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
    20b2:	1c32      	adds	r2, r6, #0
    20b4:	bf18      	it	ne
    20b6:	2201      	movne	r2, #1
    20b8:	2102      	movs	r1, #2
    20ba:	f105 0008 	add.w	r0, r5, #8
    20be:	4b09      	ldr	r3, [pc, #36]	; (20e4 <usart_async_register_callback+0x70>)
    20c0:	4798      	blx	r3
	return ERR_NONE;
    20c2:	2000      	movs	r0, #0
		break;
    20c4:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.error = cb;
    20c6:	62ee      	str	r6, [r5, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
    20c8:	1c32      	adds	r2, r6, #0
    20ca:	bf18      	it	ne
    20cc:	2201      	movne	r2, #1
    20ce:	2103      	movs	r1, #3
    20d0:	f105 0008 	add.w	r0, r5, #8
    20d4:	4b03      	ldr	r3, [pc, #12]	; (20e4 <usart_async_register_callback+0x70>)
    20d6:	4798      	blx	r3
	return ERR_NONE;
    20d8:	2000      	movs	r0, #0
		break;
    20da:	bd70      	pop	{r4, r5, r6, pc}
    20dc:	0000ed48 	.word	0x0000ed48
    20e0:	000026b1 	.word	0x000026b1
    20e4:	000039b1 	.word	0x000039b1

000020e8 <usart_async_is_tx_empty>:
{
    20e8:	b510      	push	{r4, lr}
	ASSERT(descr);
    20ea:	4604      	mov	r4, r0
    20ec:	22f8      	movs	r2, #248	; 0xf8
    20ee:	4905      	ldr	r1, [pc, #20]	; (2104 <usart_async_is_tx_empty+0x1c>)
    20f0:	3000      	adds	r0, #0
    20f2:	bf18      	it	ne
    20f4:	2001      	movne	r0, #1
    20f6:	4b04      	ldr	r3, [pc, #16]	; (2108 <usart_async_is_tx_empty+0x20>)
    20f8:	4798      	blx	r3
	return _usart_async_is_byte_sent(&descr->device);
    20fa:	f104 0008 	add.w	r0, r4, #8
    20fe:	4b03      	ldr	r3, [pc, #12]	; (210c <usart_async_is_tx_empty+0x24>)
    2100:	4798      	blx	r3
}
    2102:	bd10      	pop	{r4, pc}
    2104:	0000ed48 	.word	0x0000ed48
    2108:	000026b1 	.word	0x000026b1
    210c:	00003997 	.word	0x00003997

00002110 <_usb_d_find_ep>:
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    2110:	4b0f      	ldr	r3, [pc, #60]	; (2150 <_usb_d_find_ep+0x40>)
    2112:	7859      	ldrb	r1, [r3, #1]
    2114:	4288      	cmp	r0, r1
    2116:	d018      	beq.n	214a <_usb_d_find_ep+0x3a>
{
    2118:	b430      	push	{r4, r5}
    211a:	461a      	mov	r2, r3
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    211c:	2300      	movs	r3, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    211e:	f000 050f 	and.w	r5, r0, #15
    2122:	e007      	b.n	2134 <_usb_d_find_ep+0x24>
    2124:	3301      	adds	r3, #1
    2126:	b25b      	sxtb	r3, r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2128:	2b04      	cmp	r3, #4
    212a:	d009      	beq.n	2140 <_usb_d_find_ep+0x30>
    212c:	3220      	adds	r2, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    212e:	7851      	ldrb	r1, [r2, #1]
    2130:	4281      	cmp	r1, r0
    2132:	d007      	beq.n	2144 <_usb_d_find_ep+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    2134:	7814      	ldrb	r4, [r2, #0]
    2136:	2c00      	cmp	r4, #0
    2138:	d1f4      	bne.n	2124 <_usb_d_find_ep+0x14>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    213a:	428d      	cmp	r5, r1
    213c:	d1f2      	bne.n	2124 <_usb_d_find_ep+0x14>
    213e:	e001      	b.n	2144 <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
    2140:	f04f 33ff 	mov.w	r3, #4294967295
}
    2144:	4618      	mov	r0, r3
    2146:	bc30      	pop	{r4, r5}
    2148:	4770      	bx	lr
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    214a:	2300      	movs	r3, #0
}
    214c:	4618      	mov	r0, r3
    214e:	4770      	bx	lr
    2150:	20000334 	.word	0x20000334

00002154 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    2154:	2000      	movs	r0, #0
    2156:	4770      	bx	lr

00002158 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    2158:	b538      	push	{r3, r4, r5, lr}
    215a:	4604      	mov	r4, r0
    215c:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    215e:	4b09      	ldr	r3, [pc, #36]	; (2184 <usb_d_cb_trans_more+0x2c>)
    2160:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    2162:	4b09      	ldr	r3, [pc, #36]	; (2188 <usb_d_cb_trans_more+0x30>)
    2164:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    2168:	789b      	ldrb	r3, [r3, #2]
    216a:	2b03      	cmp	r3, #3
    216c:	d001      	beq.n	2172 <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
    216e:	2000      	movs	r0, #0
}
    2170:	bd38      	pop	{r3, r4, r5, pc}
		return ept->callbacks.more(ep, transfered);
    2172:	4b05      	ldr	r3, [pc, #20]	; (2188 <usb_d_cb_trans_more+0x30>)
    2174:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    2178:	6983      	ldr	r3, [r0, #24]
    217a:	4629      	mov	r1, r5
    217c:	4620      	mov	r0, r4
    217e:	4798      	blx	r3
    2180:	bd38      	pop	{r3, r4, r5, pc}
    2182:	bf00      	nop
    2184:	00002111 	.word	0x00002111
    2188:	20000334 	.word	0x20000334

0000218c <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    218c:	b5f0      	push	{r4, r5, r6, r7, lr}
    218e:	b085      	sub	sp, #20
    2190:	4606      	mov	r6, r0
    2192:	460d      	mov	r5, r1
    2194:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    2196:	4b4d      	ldr	r3, [pc, #308]	; (22cc <_usb_d_cb_trans_done+0x140>)
    2198:	4798      	blx	r3
    219a:	4604      	mov	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
    219c:	2d00      	cmp	r5, #0
    219e:	d15b      	bne.n	2258 <_usb_d_cb_trans_done+0xcc>
		ept->xfer.hdr.status = USB_XFER_DONE;
    21a0:	4a4b      	ldr	r2, [pc, #300]	; (22d0 <_usb_d_cb_trans_done+0x144>)
    21a2:	0143      	lsls	r3, r0, #5
    21a4:	18d1      	adds	r1, r2, r3
    21a6:	2000      	movs	r0, #0
    21a8:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    21aa:	5cd3      	ldrb	r3, [r2, r3]
    21ac:	b173      	cbz	r3, 21cc <_usb_d_cb_trans_done+0x40>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    21ae:	4b48      	ldr	r3, [pc, #288]	; (22d0 <_usb_d_cb_trans_done+0x144>)
    21b0:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    21b4:	2201      	movs	r2, #1
    21b6:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    21b8:	4845      	ldr	r0, [pc, #276]	; (22d0 <_usb_d_cb_trans_done+0x144>)
    21ba:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    21be:	69c3      	ldr	r3, [r0, #28]
    21c0:	463a      	mov	r2, r7
    21c2:	78c1      	ldrb	r1, [r0, #3]
    21c4:	4630      	mov	r0, r6
    21c6:	4798      	blx	r3
}
    21c8:	b005      	add	sp, #20
    21ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
    21cc:	788b      	ldrb	r3, [r1, #2]
    21ce:	2b03      	cmp	r3, #3
    21d0:	d00b      	beq.n	21ea <_usb_d_cb_trans_done+0x5e>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    21d2:	483f      	ldr	r0, [pc, #252]	; (22d0 <_usb_d_cb_trans_done+0x144>)
    21d4:	eb00 1244 	add.w	r2, r0, r4, lsl #5
    21d8:	4614      	mov	r4, r2
    21da:	69d3      	ldr	r3, [r2, #28]
    21dc:	320c      	adds	r2, #12
    21de:	2100      	movs	r1, #0
    21e0:	7860      	ldrb	r0, [r4, #1]
    21e2:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    21e4:	2302      	movs	r3, #2
    21e6:	70a3      	strb	r3, [r4, #2]
    21e8:	e7ee      	b.n	21c8 <_usb_d_cb_trans_done+0x3c>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    21ea:	460b      	mov	r3, r1
    21ec:	f991 500c 	ldrsb.w	r5, [r1, #12]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    21f0:	460a      	mov	r2, r1
    21f2:	69ce      	ldr	r6, [r1, #28]
    21f4:	320c      	adds	r2, #12
    21f6:	2101      	movs	r1, #1
    21f8:	7858      	ldrb	r0, [r3, #1]
    21fa:	47b0      	blx	r6
		if (err) {
    21fc:	b1a0      	cbz	r0, 2228 <_usb_d_cb_trans_done+0x9c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    21fe:	4b34      	ldr	r3, [pc, #208]	; (22d0 <_usb_d_cb_trans_done+0x144>)
    2200:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    2204:	2205      	movs	r2, #5
    2206:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    2208:	2202      	movs	r2, #2
    220a:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    220c:	2d00      	cmp	r5, #0
    220e:	db09      	blt.n	2224 <_usb_d_cb_trans_done+0x98>
    2210:	482f      	ldr	r0, [pc, #188]	; (22d0 <_usb_d_cb_trans_done+0x144>)
    2212:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    2216:	7840      	ldrb	r0, [r0, #1]
    2218:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    221c:	2101      	movs	r1, #1
    221e:	4b2d      	ldr	r3, [pc, #180]	; (22d4 <_usb_d_cb_trans_done+0x148>)
    2220:	4798      	blx	r3
    2222:	e7d1      	b.n	21c8 <_usb_d_cb_trans_done+0x3c>
    2224:	7858      	ldrb	r0, [r3, #1]
    2226:	e7f9      	b.n	221c <_usb_d_cb_trans_done+0x90>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    2228:	4829      	ldr	r0, [pc, #164]	; (22d0 <_usb_d_cb_trans_done+0x144>)
    222a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    222e:	2304      	movs	r3, #4
    2230:	7083      	strb	r3, [r0, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    2232:	7843      	ldrb	r3, [r0, #1]
	struct usb_d_transfer trans
    2234:	2200      	movs	r2, #0
    2236:	9201      	str	r2, [sp, #4]
    2238:	9202      	str	r2, [sp, #8]
    223a:	4295      	cmp	r5, r2
    223c:	bfac      	ite	ge
    223e:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
    2242:	f003 030f 	andlt.w	r3, r3, #15
    2246:	f88d 300c 	strb.w	r3, [sp, #12]
    224a:	2301      	movs	r3, #1
    224c:	f88d 300d 	strb.w	r3, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    2250:	a801      	add	r0, sp, #4
    2252:	4b21      	ldr	r3, [pc, #132]	; (22d8 <_usb_d_cb_trans_done+0x14c>)
    2254:	4798      	blx	r3
    2256:	e7b7      	b.n	21c8 <_usb_d_cb_trans_done+0x3c>
	} else if (code == USB_TRANS_STALL) {
    2258:	2d01      	cmp	r5, #1
    225a:	d00a      	beq.n	2272 <_usb_d_cb_trans_done+0xe6>
	} else if (code == USB_TRANS_ABORT) {
    225c:	2d02      	cmp	r5, #2
    225e:	d01c      	beq.n	229a <_usb_d_cb_trans_done+0x10e>
	} else if (code == USB_TRANS_RESET) {
    2260:	2d03      	cmp	r5, #3
    2262:	d02a      	beq.n	22ba <_usb_d_cb_trans_done+0x12e>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    2264:	4b1a      	ldr	r3, [pc, #104]	; (22d0 <_usb_d_cb_trans_done+0x144>)
    2266:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    226a:	2206      	movs	r2, #6
    226c:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    226e:	70da      	strb	r2, [r3, #3]
    2270:	e7a2      	b.n	21b8 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_HALT;
    2272:	4a17      	ldr	r2, [pc, #92]	; (22d0 <_usb_d_cb_trans_done+0x144>)
    2274:	0143      	lsls	r3, r0, #5
    2276:	18d1      	adds	r1, r2, r3
    2278:	2002      	movs	r0, #2
    227a:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    227c:	5cd3      	ldrb	r3, [r2, r3]
    227e:	b12b      	cbz	r3, 228c <_usb_d_cb_trans_done+0x100>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    2280:	4b13      	ldr	r3, [pc, #76]	; (22d0 <_usb_d_cb_trans_done+0x144>)
    2282:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    2286:	2205      	movs	r2, #5
    2288:	709a      	strb	r2, [r3, #2]
    228a:	e795      	b.n	21b8 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    228c:	460b      	mov	r3, r1
    228e:	7098      	strb	r0, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2290:	2100      	movs	r1, #0
    2292:	4630      	mov	r0, r6
    2294:	4b0f      	ldr	r3, [pc, #60]	; (22d4 <_usb_d_cb_trans_done+0x148>)
    2296:	4798      	blx	r3
    2298:	e78e      	b.n	21b8 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    229a:	4a0d      	ldr	r2, [pc, #52]	; (22d0 <_usb_d_cb_trans_done+0x144>)
    229c:	0143      	lsls	r3, r0, #5
    229e:	18d1      	adds	r1, r2, r3
    22a0:	2004      	movs	r0, #4
    22a2:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    22a4:	5cd3      	ldrb	r3, [r2, r3]
    22a6:	b12b      	cbz	r3, 22b4 <_usb_d_cb_trans_done+0x128>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    22a8:	4b09      	ldr	r3, [pc, #36]	; (22d0 <_usb_d_cb_trans_done+0x144>)
    22aa:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    22ae:	2201      	movs	r2, #1
    22b0:	709a      	strb	r2, [r3, #2]
    22b2:	e781      	b.n	21b8 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    22b4:	2302      	movs	r3, #2
    22b6:	708b      	strb	r3, [r1, #2]
			return;
    22b8:	e786      	b.n	21c8 <_usb_d_cb_trans_done+0x3c>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    22ba:	4b05      	ldr	r3, [pc, #20]	; (22d0 <_usb_d_cb_trans_done+0x144>)
    22bc:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    22c0:	2200      	movs	r2, #0
    22c2:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    22c4:	2205      	movs	r2, #5
    22c6:	70da      	strb	r2, [r3, #3]
    22c8:	e776      	b.n	21b8 <_usb_d_cb_trans_done+0x2c>
    22ca:	bf00      	nop
    22cc:	00002111 	.word	0x00002111
    22d0:	20000334 	.word	0x20000334
    22d4:	00004e69 	.word	0x00004e69
    22d8:	00005011 	.word	0x00005011

000022dc <usb_d_cb_trans_setup>:
{
    22dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    22e0:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    22e2:	4b1c      	ldr	r3, [pc, #112]	; (2354 <usb_d_cb_trans_setup+0x78>)
    22e4:	4798      	blx	r3
    22e6:	4606      	mov	r6, r0
	uint8_t *        req      = ept->xfer.req;
    22e8:	4c1b      	ldr	r4, [pc, #108]	; (2358 <usb_d_cb_trans_setup+0x7c>)
    22ea:	eb04 1440 	add.w	r4, r4, r0, lsl #5
    22ee:	340c      	adds	r4, #12
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    22f0:	4621      	mov	r1, r4
    22f2:	4628      	mov	r0, r5
    22f4:	4b19      	ldr	r3, [pc, #100]	; (235c <usb_d_cb_trans_setup+0x80>)
    22f6:	4798      	blx	r3
	if (n != 8) {
    22f8:	b2c0      	uxtb	r0, r0
    22fa:	2808      	cmp	r0, #8
    22fc:	d009      	beq.n	2312 <usb_d_cb_trans_setup+0x36>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    22fe:	2101      	movs	r1, #1
    2300:	4628      	mov	r0, r5
    2302:	4c17      	ldr	r4, [pc, #92]	; (2360 <usb_d_cb_trans_setup+0x84>)
    2304:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    2306:	2101      	movs	r1, #1
    2308:	f045 0080 	orr.w	r0, r5, #128	; 0x80
    230c:	47a0      	blx	r4
		return;
    230e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2312:	2100      	movs	r1, #0
    2314:	4628      	mov	r0, r5
    2316:	4f12      	ldr	r7, [pc, #72]	; (2360 <usb_d_cb_trans_setup+0x84>)
    2318:	47b8      	blx	r7
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    231a:	f045 0880 	orr.w	r8, r5, #128	; 0x80
    231e:	2100      	movs	r1, #0
    2320:	4640      	mov	r0, r8
    2322:	47b8      	blx	r7
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    2324:	4b0c      	ldr	r3, [pc, #48]	; (2358 <usb_d_cb_trans_setup+0x7c>)
    2326:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    232a:	2201      	movs	r2, #1
    232c:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    232e:	695b      	ldr	r3, [r3, #20]
    2330:	4621      	mov	r1, r4
    2332:	4628      	mov	r0, r5
    2334:	4798      	blx	r3
    2336:	b108      	cbz	r0, 233c <usb_d_cb_trans_setup+0x60>
    2338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    233c:	4b06      	ldr	r3, [pc, #24]	; (2358 <usb_d_cb_trans_setup+0x7c>)
    233e:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    2342:	2305      	movs	r3, #5
    2344:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2346:	2101      	movs	r1, #1
    2348:	4628      	mov	r0, r5
    234a:	47b8      	blx	r7
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    234c:	2101      	movs	r1, #1
    234e:	4640      	mov	r0, r8
    2350:	47b8      	blx	r7
    2352:	e7f1      	b.n	2338 <usb_d_cb_trans_setup+0x5c>
    2354:	00002111 	.word	0x00002111
    2358:	20000334 	.word	0x20000334
    235c:	00004fb1 	.word	0x00004fb1
    2360:	00004e69 	.word	0x00004e69

00002364 <usb_d_init>:

int32_t usb_d_init(void)
{
    2364:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    2366:	4b11      	ldr	r3, [pc, #68]	; (23ac <usb_d_init+0x48>)
    2368:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    236a:	2800      	cmp	r0, #0
    236c:	db1c      	blt.n	23a8 <usb_d_init+0x44>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    236e:	4c10      	ldr	r4, [pc, #64]	; (23b0 <usb_d_init+0x4c>)
    2370:	2280      	movs	r2, #128	; 0x80
    2372:	2100      	movs	r1, #0
    2374:	4620      	mov	r0, r4
    2376:	4b0f      	ldr	r3, [pc, #60]	; (23b4 <usb_d_init+0x50>)
    2378:	4798      	blx	r3
    237a:	4623      	mov	r3, r4
    237c:	f104 0080 	add.w	r0, r4, #128	; 0x80
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    2380:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    2382:	4a0d      	ldr	r2, [pc, #52]	; (23b8 <usb_d_init+0x54>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    2384:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    2386:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    2388:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    238a:	61da      	str	r2, [r3, #28]
    238c:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    238e:	4283      	cmp	r3, r0
    2390:	d1f8      	bne.n	2384 <usb_d_init+0x20>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    2392:	490a      	ldr	r1, [pc, #40]	; (23bc <usb_d_init+0x58>)
    2394:	2000      	movs	r0, #0
    2396:	4c0a      	ldr	r4, [pc, #40]	; (23c0 <usb_d_init+0x5c>)
    2398:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    239a:	490a      	ldr	r1, [pc, #40]	; (23c4 <usb_d_init+0x60>)
    239c:	2001      	movs	r0, #1
    239e:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    23a0:	4909      	ldr	r1, [pc, #36]	; (23c8 <usb_d_init+0x64>)
    23a2:	2002      	movs	r0, #2
    23a4:	47a0      	blx	r4
	return ERR_NONE;
    23a6:	2000      	movs	r0, #0
}
    23a8:	bd10      	pop	{r4, pc}
    23aa:	bf00      	nop
    23ac:	00004891 	.word	0x00004891
    23b0:	20000334 	.word	0x20000334
    23b4:	0000dab5 	.word	0x0000dab5
    23b8:	00002155 	.word	0x00002155
    23bc:	000022dd 	.word	0x000022dd
    23c0:	00005215 	.word	0x00005215
    23c4:	00002159 	.word	0x00002159
    23c8:	0000218d 	.word	0x0000218d

000023cc <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    23cc:	b508      	push	{r3, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    23ce:	4b01      	ldr	r3, [pc, #4]	; (23d4 <usb_d_register_callback+0x8>)
    23d0:	4798      	blx	r3
    23d2:	bd08      	pop	{r3, pc}
    23d4:	000051f1 	.word	0x000051f1

000023d8 <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
    23d8:	b508      	push	{r3, lr}
	return _usb_d_dev_enable();
    23da:	4b01      	ldr	r3, [pc, #4]	; (23e0 <usb_d_enable+0x8>)
    23dc:	4798      	blx	r3
}
    23de:	bd08      	pop	{r3, pc}
    23e0:	0000496d 	.word	0x0000496d

000023e4 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    23e4:	b508      	push	{r3, lr}
	_usb_d_dev_attach();
    23e6:	4b01      	ldr	r3, [pc, #4]	; (23ec <usb_d_attach+0x8>)
    23e8:	4798      	blx	r3
    23ea:	bd08      	pop	{r3, pc}
    23ec:	000049c5 	.word	0x000049c5

000023f0 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    23f0:	b508      	push	{r3, lr}
	_usb_d_dev_set_address(addr);
    23f2:	4b01      	ldr	r3, [pc, #4]	; (23f8 <usb_d_set_address+0x8>)
    23f4:	4798      	blx	r3
    23f6:	bd08      	pop	{r3, pc}
    23f8:	000049d7 	.word	0x000049d7

000023fc <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    23fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    23fe:	4606      	mov	r6, r0
    2400:	460c      	mov	r4, r1
    2402:	4617      	mov	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    2404:	4b0f      	ldr	r3, [pc, #60]	; (2444 <usb_d_ep_init+0x48>)
    2406:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    2408:	2800      	cmp	r0, #0
    240a:	da14      	bge.n	2436 <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    240c:	20ff      	movs	r0, #255	; 0xff
    240e:	4b0d      	ldr	r3, [pc, #52]	; (2444 <usb_d_ep_init+0x48>)
    2410:	4798      	blx	r3
		if (ep_index < 0) {
    2412:	1e05      	subs	r5, r0, #0
    2414:	db12      	blt.n	243c <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    2416:	463a      	mov	r2, r7
    2418:	4621      	mov	r1, r4
    241a:	4630      	mov	r0, r6
    241c:	4b0a      	ldr	r3, [pc, #40]	; (2448 <usb_d_ep_init+0x4c>)
    241e:	4798      	blx	r3
	if (rc < 0) {
    2420:	2800      	cmp	r0, #0
    2422:	db0d      	blt.n	2440 <usb_d_ep_init+0x44>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    2424:	4b09      	ldr	r3, [pc, #36]	; (244c <usb_d_ep_init+0x50>)
    2426:	0168      	lsls	r0, r5, #5
    2428:	181a      	adds	r2, r3, r0
    242a:	7056      	strb	r6, [r2, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    242c:	f004 0403 	and.w	r4, r4, #3
    2430:	541c      	strb	r4, [r3, r0]
	return ERR_NONE;
    2432:	2000      	movs	r0, #0
    2434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    2436:	f06f 0013 	mvn.w	r0, #19
    243a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -USB_ERR_ALLOC_FAIL;
    243c:	f06f 0014 	mvn.w	r0, #20
}
    2440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2442:	bf00      	nop
    2444:	00002111 	.word	0x00002111
    2448:	000049e5 	.word	0x000049e5
    244c:	20000334 	.word	0x20000334

00002450 <usb_d_ep0_init>:
{
    2450:	b508      	push	{r3, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    2452:	4602      	mov	r2, r0
    2454:	2100      	movs	r1, #0
    2456:	4608      	mov	r0, r1
    2458:	4b01      	ldr	r3, [pc, #4]	; (2460 <usb_d_ep0_init+0x10>)
    245a:	4798      	blx	r3
}
    245c:	bd08      	pop	{r3, pc}
    245e:	bf00      	nop
    2460:	000023fd 	.word	0x000023fd

00002464 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    2464:	b538      	push	{r3, r4, r5, lr}
    2466:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    2468:	4b06      	ldr	r3, [pc, #24]	; (2484 <usb_d_ep_deinit+0x20>)
    246a:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    246c:	1e04      	subs	r4, r0, #0
    246e:	db07      	blt.n	2480 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    2470:	4628      	mov	r0, r5
    2472:	4b05      	ldr	r3, [pc, #20]	; (2488 <usb_d_ep_deinit+0x24>)
    2474:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    2476:	4805      	ldr	r0, [pc, #20]	; (248c <usb_d_ep_deinit+0x28>)
    2478:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    247c:	23ff      	movs	r3, #255	; 0xff
    247e:	7043      	strb	r3, [r0, #1]
    2480:	bd38      	pop	{r3, r4, r5, pc}
    2482:	bf00      	nop
    2484:	00002111 	.word	0x00002111
    2488:	00004afd 	.word	0x00004afd
    248c:	20000334 	.word	0x20000334

00002490 <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
    2490:	b538      	push	{r3, r4, r5, lr}
    2492:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    2494:	4b0e      	ldr	r3, [pc, #56]	; (24d0 <usb_d_ep_enable+0x40>)
    2496:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    2498:	1e04      	subs	r4, r0, #0
    249a:	db16      	blt.n	24ca <usb_d_ep_enable+0x3a>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    249c:	0163      	lsls	r3, r4, #5
    249e:	4a0d      	ldr	r2, [pc, #52]	; (24d4 <usb_d_ep_enable+0x44>)
    24a0:	5cd3      	ldrb	r3, [r2, r3]
    24a2:	2b00      	cmp	r3, #0
    24a4:	bf0c      	ite	eq
    24a6:	2202      	moveq	r2, #2
    24a8:	2201      	movne	r2, #1
    24aa:	4b0a      	ldr	r3, [pc, #40]	; (24d4 <usb_d_ep_enable+0x44>)
    24ac:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    24b0:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    24b2:	4628      	mov	r0, r5
    24b4:	4b08      	ldr	r3, [pc, #32]	; (24d8 <usb_d_ep_enable+0x48>)
    24b6:	4798      	blx	r3
	if (rc < 0) {
    24b8:	2800      	cmp	r0, #0
    24ba:	db00      	blt.n	24be <usb_d_ep_enable+0x2e>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    24bc:	bd38      	pop	{r3, r4, r5, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    24be:	4b05      	ldr	r3, [pc, #20]	; (24d4 <usb_d_ep_enable+0x44>)
    24c0:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    24c4:	2300      	movs	r3, #0
    24c6:	70a3      	strb	r3, [r4, #2]
    24c8:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
    24ca:	f06f 0011 	mvn.w	r0, #17
    24ce:	e7f5      	b.n	24bc <usb_d_ep_enable+0x2c>
    24d0:	00002111 	.word	0x00002111
    24d4:	20000334 	.word	0x20000334
    24d8:	00004bc1 	.word	0x00004bc1

000024dc <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    24dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    24e0:	b086      	sub	sp, #24
    24e2:	4604      	mov	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    24e4:	7a07      	ldrb	r7, [r0, #8]
    24e6:	4638      	mov	r0, r7
    24e8:	4b3f      	ldr	r3, [pc, #252]	; (25e8 <usb_d_ep_transfer+0x10c>)
    24ea:	4798      	blx	r3
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    24ec:	7a65      	ldrb	r5, [r4, #9]
	uint32_t              len = xfer->size;
    24ee:	f8d4 8004 	ldr.w	r8, [r4, #4]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    24f2:	1e06      	subs	r6, r0, #0
    24f4:	db72      	blt.n	25dc <usb_d_ep_transfer+0x100>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    24f6:	a804      	add	r0, sp, #16
    24f8:	4b3c      	ldr	r3, [pc, #240]	; (25ec <usb_d_ep_transfer+0x110>)
    24fa:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    24fc:	4b3c      	ldr	r3, [pc, #240]	; (25f0 <usb_d_ep_transfer+0x114>)
    24fe:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    2502:	789b      	ldrb	r3, [r3, #2]
    2504:	f88d 3017 	strb.w	r3, [sp, #23]
	if (state == USB_EP_S_IDLE) {
    2508:	f89d 3017 	ldrb.w	r3, [sp, #23]
    250c:	b2db      	uxtb	r3, r3
    250e:	2b01      	cmp	r3, #1
    2510:	d011      	beq.n	2536 <usb_d_ep_transfer+0x5a>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    2512:	a804      	add	r0, sp, #16
    2514:	4b37      	ldr	r3, [pc, #220]	; (25f4 <usb_d_ep_transfer+0x118>)
    2516:	4798      	blx	r3
		switch (state) {
    2518:	f89d 3017 	ldrb.w	r3, [sp, #23]
    251c:	b2db      	uxtb	r3, r3
    251e:	2b05      	cmp	r3, #5
    2520:	d05f      	beq.n	25e2 <usb_d_ep_transfer+0x106>
    2522:	2b06      	cmp	r3, #6
    2524:	d023      	beq.n	256e <usb_d_ep_transfer+0x92>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    2526:	2b00      	cmp	r3, #0
    2528:	bf0c      	ite	eq
    252a:	f06f 0012 	mvneq.w	r0, #18
    252e:	2001      	movne	r0, #1
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
    2530:	b006      	add	sp, #24
    2532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    2536:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 25f0 <usb_d_ep_transfer+0x114>
    253a:	ea4f 1946 	mov.w	r9, r6, lsl #5
    253e:	eb0a 0309 	add.w	r3, sl, r9
    2542:	2203      	movs	r2, #3
    2544:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    2546:	a804      	add	r0, sp, #16
    2548:	4b2a      	ldr	r3, [pc, #168]	; (25f4 <usb_d_ep_transfer+0x118>)
    254a:	4798      	blx	r3
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    254c:	f81a 3009 	ldrb.w	r3, [sl, r9]
    2550:	b183      	cbz	r3, 2574 <usb_d_ep_transfer+0x98>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    2552:	7a22      	ldrb	r2, [r4, #8]
    2554:	3500      	adds	r5, #0
    2556:	bf18      	it	ne
    2558:	2501      	movne	r5, #1
	struct usb_d_transfer trans
    255a:	6823      	ldr	r3, [r4, #0]
    255c:	9301      	str	r3, [sp, #4]
    255e:	f8cd 8008 	str.w	r8, [sp, #8]
    2562:	f017 0f80 	tst.w	r7, #128	; 0x80
    2566:	d119      	bne.n	259c <usb_d_ep_transfer+0xc0>
    2568:	f002 030f 	and.w	r3, r2, #15
    256c:	e018      	b.n	25a0 <usb_d_ep_transfer+0xc4>
			return -USB_ERROR;
    256e:	f06f 000f 	mvn.w	r0, #15
    2572:	e7dd      	b.n	2530 <usb_d_ep_transfer+0x54>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    2574:	4b1e      	ldr	r3, [pc, #120]	; (25f0 <usb_d_ep_transfer+0x114>)
    2576:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    257a:	7cda      	ldrb	r2, [r3, #19]
    257c:	7c9d      	ldrb	r5, [r3, #18]
    257e:	eb05 2502 	add.w	r5, r5, r2, lsl #8
    2582:	b2ad      	uxth	r5, r5
		if (req_len == 0) {
    2584:	b9a5      	cbnz	r5, 25b0 <usb_d_ep_transfer+0xd4>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    2586:	4b1a      	ldr	r3, [pc, #104]	; (25f0 <usb_d_ep_transfer+0x114>)
    2588:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    258c:	2304      	movs	r3, #4
    258e:	70b3      	strb	r3, [r6, #2]
			len                 = 0;
    2590:	2300      	movs	r3, #0
			zlp                 = true;
    2592:	2501      	movs	r5, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    2594:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    2596:	6821      	ldr	r1, [r4, #0]
    2598:	9101      	str	r1, [sp, #4]
    259a:	9302      	str	r3, [sp, #8]
    259c:	f042 0380 	orr.w	r3, r2, #128	; 0x80
    25a0:	f88d 300c 	strb.w	r3, [sp, #12]
    25a4:	f88d 500d 	strb.w	r5, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    25a8:	a801      	add	r0, sp, #4
    25aa:	4b13      	ldr	r3, [pc, #76]	; (25f8 <usb_d_ep_transfer+0x11c>)
    25ac:	4798      	blx	r3
	return rc;
    25ae:	e7bf      	b.n	2530 <usb_d_ep_transfer+0x54>
    25b0:	4643      	mov	r3, r8
    25b2:	45a8      	cmp	r8, r5
    25b4:	bf28      	it	cs
    25b6:	462b      	movcs	r3, r5
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    25b8:	4a0d      	ldr	r2, [pc, #52]	; (25f0 <usb_d_ep_transfer+0x114>)
    25ba:	eb02 1646 	add.w	r6, r2, r6, lsl #5
			if (dir) {
    25be:	f996 200c 	ldrsb.w	r2, [r6, #12]
    25c2:	2a00      	cmp	r2, #0
    25c4:	db05      	blt.n	25d2 <usb_d_ep_transfer+0xf6>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    25c6:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    25c8:	6821      	ldr	r1, [r4, #0]
    25ca:	9101      	str	r1, [sp, #4]
    25cc:	9302      	str	r3, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    25ce:	2500      	movs	r5, #0
    25d0:	e7ca      	b.n	2568 <usb_d_ep_transfer+0x8c>
				zlp = (req_len > len);
    25d2:	429d      	cmp	r5, r3
    25d4:	bf94      	ite	ls
    25d6:	2500      	movls	r5, #0
    25d8:	2501      	movhi	r5, #1
    25da:	e7db      	b.n	2594 <usb_d_ep_transfer+0xb8>
		return -USB_ERR_PARAM;
    25dc:	f06f 0011 	mvn.w	r0, #17
    25e0:	e7a6      	b.n	2530 <usb_d_ep_transfer+0x54>
			return USB_HALTED;
    25e2:	2002      	movs	r0, #2
    25e4:	e7a4      	b.n	2530 <usb_d_ep_transfer+0x54>
    25e6:	bf00      	nop
    25e8:	00002111 	.word	0x00002111
    25ec:	000014cd 	.word	0x000014cd
    25f0:	20000334 	.word	0x20000334
    25f4:	000014db 	.word	0x000014db
    25f8:	00005011 	.word	0x00005011

000025fc <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    25fc:	b538      	push	{r3, r4, r5, lr}
    25fe:	4604      	mov	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    2600:	b141      	cbz	r1, 2614 <usb_d_ep_halt+0x18>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    2602:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2604:	bf0c      	ite	eq
    2606:	2101      	moveq	r1, #1
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    2608:	2102      	movne	r1, #2
    260a:	4b13      	ldr	r3, [pc, #76]	; (2658 <usb_d_ep_halt+0x5c>)
    260c:	4798      	blx	r3
    260e:	4603      	mov	r3, r0
	}
}
    2610:	4618      	mov	r0, r3
    2612:	bd38      	pop	{r3, r4, r5, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    2614:	4b11      	ldr	r3, [pc, #68]	; (265c <usb_d_ep_halt+0x60>)
    2616:	4798      	blx	r3
	if (ep_index < 0) {
    2618:	1e05      	subs	r5, r0, #0
    261a:	db19      	blt.n	2650 <usb_d_ep_halt+0x54>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    261c:	2102      	movs	r1, #2
    261e:	4620      	mov	r0, r4
    2620:	4b0d      	ldr	r3, [pc, #52]	; (2658 <usb_d_ep_halt+0x5c>)
    2622:	4798      	blx	r3
    2624:	4603      	mov	r3, r0
    2626:	2800      	cmp	r0, #0
    2628:	d0f2      	beq.n	2610 <usb_d_ep_halt+0x14>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    262a:	2100      	movs	r1, #0
    262c:	4620      	mov	r0, r4
    262e:	4b0a      	ldr	r3, [pc, #40]	; (2658 <usb_d_ep_halt+0x5c>)
    2630:	4798      	blx	r3
		if (rc < 0) {
    2632:	1e03      	subs	r3, r0, #0
    2634:	dbec      	blt.n	2610 <usb_d_ep_halt+0x14>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    2636:	4b0a      	ldr	r3, [pc, #40]	; (2660 <usb_d_ep_halt+0x64>)
    2638:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    263c:	2201      	movs	r2, #1
    263e:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    2640:	2103      	movs	r1, #3
    2642:	70d9      	strb	r1, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    2644:	69db      	ldr	r3, [r3, #28]
    2646:	2200      	movs	r2, #0
    2648:	4620      	mov	r0, r4
    264a:	4798      	blx	r3
	return ERR_NONE;
    264c:	2300      	movs	r3, #0
    264e:	e7df      	b.n	2610 <usb_d_ep_halt+0x14>
		return -USB_ERR_PARAM;
    2650:	f06f 0311 	mvn.w	r3, #17
    2654:	e7dc      	b.n	2610 <usb_d_ep_halt+0x14>
    2656:	bf00      	nop
    2658:	00004e69 	.word	0x00004e69
    265c:	00002111 	.word	0x00002111
    2660:	20000334 	.word	0x20000334

00002664 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    2664:	b538      	push	{r3, r4, r5, lr}
    2666:	460d      	mov	r5, r1
    2668:	4614      	mov	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    266a:	4b0e      	ldr	r3, [pc, #56]	; (26a4 <usb_d_ep_register_callback+0x40>)
    266c:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    266e:	4b0e      	ldr	r3, [pc, #56]	; (26a8 <usb_d_ep_register_callback+0x44>)
    2670:	2c00      	cmp	r4, #0
    2672:	bf08      	it	eq
    2674:	461c      	moveq	r4, r3
	if (ep_index < 0) {
    2676:	2800      	cmp	r0, #0
    2678:	db13      	blt.n	26a2 <usb_d_ep_register_callback+0x3e>
		return;
	}
	switch (type) {
    267a:	2d01      	cmp	r5, #1
    267c:	d008      	beq.n	2690 <usb_d_ep_register_callback+0x2c>
    267e:	b115      	cbz	r5, 2686 <usb_d_ep_register_callback+0x22>
    2680:	2d02      	cmp	r5, #2
    2682:	d00a      	beq.n	269a <usb_d_ep_register_callback+0x36>
    2684:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    2686:	4b09      	ldr	r3, [pc, #36]	; (26ac <usb_d_ep_register_callback+0x48>)
    2688:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    268c:	6144      	str	r4, [r0, #20]
		break;
    268e:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    2690:	4b06      	ldr	r3, [pc, #24]	; (26ac <usb_d_ep_register_callback+0x48>)
    2692:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    2696:	6184      	str	r4, [r0, #24]
		break;
    2698:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    269a:	4b04      	ldr	r3, [pc, #16]	; (26ac <usb_d_ep_register_callback+0x48>)
    269c:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    26a0:	61c4      	str	r4, [r0, #28]
    26a2:	bd38      	pop	{r3, r4, r5, pc}
    26a4:	00002111 	.word	0x00002111
    26a8:	00002155 	.word	0x00002155
    26ac:	20000334 	.word	0x20000334

000026b0 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    26b0:	b900      	cbnz	r0, 26b4 <assert+0x4>
		__asm("BKPT #0");
    26b2:	be00      	bkpt	0x0000
    26b4:	4770      	bx	lr

000026b6 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    26b6:	6803      	ldr	r3, [r0, #0]
    26b8:	b14b      	cbz	r3, 26ce <is_list_element+0x18>
		if (it == element) {
    26ba:	428b      	cmp	r3, r1
    26bc:	d009      	beq.n	26d2 <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    26be:	681b      	ldr	r3, [r3, #0]
    26c0:	b11b      	cbz	r3, 26ca <is_list_element+0x14>
		if (it == element) {
    26c2:	4299      	cmp	r1, r3
    26c4:	d1fb      	bne.n	26be <is_list_element+0x8>
			return true;
    26c6:	2001      	movs	r0, #1
		}
	}

	return false;
}
    26c8:	4770      	bx	lr
	return false;
    26ca:	2000      	movs	r0, #0
    26cc:	4770      	bx	lr
    26ce:	2000      	movs	r0, #0
    26d0:	4770      	bx	lr
			return true;
    26d2:	2001      	movs	r0, #1
    26d4:	4770      	bx	lr
	...

000026d8 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    26d8:	b538      	push	{r3, r4, r5, lr}
    26da:	4604      	mov	r4, r0
    26dc:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    26de:	4b06      	ldr	r3, [pc, #24]	; (26f8 <list_insert_as_head+0x20>)
    26e0:	4798      	blx	r3
    26e2:	f080 0001 	eor.w	r0, r0, #1
    26e6:	2239      	movs	r2, #57	; 0x39
    26e8:	4904      	ldr	r1, [pc, #16]	; (26fc <list_insert_as_head+0x24>)
    26ea:	b2c0      	uxtb	r0, r0
    26ec:	4b04      	ldr	r3, [pc, #16]	; (2700 <list_insert_as_head+0x28>)
    26ee:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    26f0:	6823      	ldr	r3, [r4, #0]
    26f2:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    26f4:	6025      	str	r5, [r4, #0]
    26f6:	bd38      	pop	{r3, r4, r5, pc}
    26f8:	000026b7 	.word	0x000026b7
    26fc:	0000ed68 	.word	0x0000ed68
    2700:	000026b1 	.word	0x000026b1

00002704 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    2704:	6803      	ldr	r3, [r0, #0]
    2706:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    2708:	6001      	str	r1, [r0, #0]
    270a:	4770      	bx	lr

0000270c <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    270c:	b570      	push	{r4, r5, r6, lr}
    270e:	4605      	mov	r5, r0
    2710:	460e      	mov	r6, r1
	struct list_element *it = list->head;
    2712:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    2714:	4b0a      	ldr	r3, [pc, #40]	; (2740 <list_insert_at_end+0x34>)
    2716:	4798      	blx	r3
    2718:	f080 0001 	eor.w	r0, r0, #1
    271c:	224f      	movs	r2, #79	; 0x4f
    271e:	4909      	ldr	r1, [pc, #36]	; (2744 <list_insert_at_end+0x38>)
    2720:	b2c0      	uxtb	r0, r0
    2722:	4b09      	ldr	r3, [pc, #36]	; (2748 <list_insert_at_end+0x3c>)
    2724:	4798      	blx	r3

	if (!list->head) {
    2726:	682b      	ldr	r3, [r5, #0]
    2728:	b91b      	cbnz	r3, 2732 <list_insert_at_end+0x26>
		list->head                             = (struct list_element *)element;
    272a:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    272c:	6033      	str	r3, [r6, #0]
		return;
    272e:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (it->next) {
		it = it->next;
    2730:	461c      	mov	r4, r3
	while (it->next) {
    2732:	6823      	ldr	r3, [r4, #0]
    2734:	2b00      	cmp	r3, #0
    2736:	d1fb      	bne.n	2730 <list_insert_at_end+0x24>
	}
	it->next                               = (struct list_element *)element;
    2738:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    273a:	6033      	str	r3, [r6, #0]
    273c:	bd70      	pop	{r4, r5, r6, pc}
    273e:	bf00      	nop
    2740:	000026b7 	.word	0x000026b7
    2744:	0000ed68 	.word	0x0000ed68
    2748:	000026b1 	.word	0x000026b1

0000274c <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    274c:	6803      	ldr	r3, [r0, #0]
    274e:	b10b      	cbz	r3, 2754 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    2750:	681a      	ldr	r2, [r3, #0]
    2752:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    2754:	4618      	mov	r0, r3
    2756:	4770      	bx	lr

00002758 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    2758:	b570      	push	{r4, r5, r6, lr}
    275a:	460e      	mov	r6, r1
    275c:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
    275e:	4604      	mov	r4, r0
    2760:	b178      	cbz	r0, 2782 <ringbuffer_init+0x2a>
    2762:	b181      	cbz	r1, 2786 <ringbuffer_init+0x2e>
    2764:	b1a2      	cbz	r2, 2790 <ringbuffer_init+0x38>
    2766:	2001      	movs	r0, #1
    2768:	2228      	movs	r2, #40	; 0x28
    276a:	490d      	ldr	r1, [pc, #52]	; (27a0 <ringbuffer_init+0x48>)
    276c:	4b0d      	ldr	r3, [pc, #52]	; (27a4 <ringbuffer_init+0x4c>)
    276e:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    2770:	1e6b      	subs	r3, r5, #1
    2772:	421d      	tst	r5, r3
    2774:	d109      	bne.n	278a <ringbuffer_init+0x32>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    2776:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    2778:	2000      	movs	r0, #0
    277a:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
    277c:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    277e:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    2780:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    2782:	2000      	movs	r0, #0
    2784:	e7f0      	b.n	2768 <ringbuffer_init+0x10>
    2786:	2000      	movs	r0, #0
    2788:	e7ee      	b.n	2768 <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
    278a:	f06f 000c 	mvn.w	r0, #12
    278e:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    2790:	2228      	movs	r2, #40	; 0x28
    2792:	4903      	ldr	r1, [pc, #12]	; (27a0 <ringbuffer_init+0x48>)
    2794:	2000      	movs	r0, #0
    2796:	4b03      	ldr	r3, [pc, #12]	; (27a4 <ringbuffer_init+0x4c>)
    2798:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
    279a:	1e6b      	subs	r3, r5, #1
    279c:	e7eb      	b.n	2776 <ringbuffer_init+0x1e>
    279e:	bf00      	nop
    27a0:	0000ed88 	.word	0x0000ed88
    27a4:	000026b1 	.word	0x000026b1

000027a8 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    27a8:	b538      	push	{r3, r4, r5, lr}
    27aa:	460d      	mov	r5, r1
	ASSERT(rb && data);
    27ac:	4604      	mov	r4, r0
    27ae:	b1a0      	cbz	r0, 27da <ringbuffer_get+0x32>
    27b0:	1c08      	adds	r0, r1, #0
    27b2:	bf18      	it	ne
    27b4:	2001      	movne	r0, #1
    27b6:	2240      	movs	r2, #64	; 0x40
    27b8:	490a      	ldr	r1, [pc, #40]	; (27e4 <ringbuffer_get+0x3c>)
    27ba:	4b0b      	ldr	r3, [pc, #44]	; (27e8 <ringbuffer_get+0x40>)
    27bc:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    27be:	68a3      	ldr	r3, [r4, #8]
    27c0:	68e2      	ldr	r2, [r4, #12]
    27c2:	429a      	cmp	r2, r3
    27c4:	d00b      	beq.n	27de <ringbuffer_get+0x36>
		*data = rb->buf[rb->read_index & rb->size];
    27c6:	6862      	ldr	r2, [r4, #4]
    27c8:	4013      	ands	r3, r2
    27ca:	6822      	ldr	r2, [r4, #0]
    27cc:	5cd3      	ldrb	r3, [r2, r3]
    27ce:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    27d0:	68a3      	ldr	r3, [r4, #8]
    27d2:	3301      	adds	r3, #1
    27d4:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    27d6:	2000      	movs	r0, #0
    27d8:	bd38      	pop	{r3, r4, r5, pc}
    27da:	2000      	movs	r0, #0
    27dc:	e7eb      	b.n	27b6 <ringbuffer_get+0xe>
	}

	return ERR_NOT_FOUND;
    27de:	f06f 0009 	mvn.w	r0, #9
}
    27e2:	bd38      	pop	{r3, r4, r5, pc}
    27e4:	0000ed88 	.word	0x0000ed88
    27e8:	000026b1 	.word	0x000026b1

000027ec <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    27ec:	b538      	push	{r3, r4, r5, lr}
    27ee:	460d      	mov	r5, r1
	ASSERT(rb);
    27f0:	4604      	mov	r4, r0
    27f2:	2251      	movs	r2, #81	; 0x51
    27f4:	490b      	ldr	r1, [pc, #44]	; (2824 <ringbuffer_put+0x38>)
    27f6:	3000      	adds	r0, #0
    27f8:	bf18      	it	ne
    27fa:	2001      	movne	r0, #1
    27fc:	4b0a      	ldr	r3, [pc, #40]	; (2828 <ringbuffer_put+0x3c>)
    27fe:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    2800:	68e3      	ldr	r3, [r4, #12]
    2802:	6862      	ldr	r2, [r4, #4]
    2804:	4013      	ands	r3, r2
    2806:	6822      	ldr	r2, [r4, #0]
    2808:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    280a:	68e3      	ldr	r3, [r4, #12]
    280c:	6861      	ldr	r1, [r4, #4]
    280e:	68a2      	ldr	r2, [r4, #8]
    2810:	1a9a      	subs	r2, r3, r2
    2812:	428a      	cmp	r2, r1
		rb->read_index = rb->write_index - rb->size;
    2814:	bf84      	itt	hi
    2816:	1a59      	subhi	r1, r3, r1
    2818:	60a1      	strhi	r1, [r4, #8]
	}

	rb->write_index++;
    281a:	3301      	adds	r3, #1
    281c:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    281e:	2000      	movs	r0, #0
    2820:	bd38      	pop	{r3, r4, r5, pc}
    2822:	bf00      	nop
    2824:	0000ed88 	.word	0x0000ed88
    2828:	000026b1 	.word	0x000026b1

0000282c <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    282c:	b510      	push	{r4, lr}
	ASSERT(rb);
    282e:	4604      	mov	r4, r0
    2830:	2267      	movs	r2, #103	; 0x67
    2832:	4905      	ldr	r1, [pc, #20]	; (2848 <ringbuffer_num+0x1c>)
    2834:	3000      	adds	r0, #0
    2836:	bf18      	it	ne
    2838:	2001      	movne	r0, #1
    283a:	4b04      	ldr	r3, [pc, #16]	; (284c <ringbuffer_num+0x20>)
    283c:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    283e:	68e0      	ldr	r0, [r4, #12]
    2840:	68a3      	ldr	r3, [r4, #8]
}
    2842:	1ac0      	subs	r0, r0, r3
    2844:	bd10      	pop	{r4, pc}
    2846:	bf00      	nop
    2848:	0000ed88 	.word	0x0000ed88
    284c:	000026b1 	.word	0x000026b1

00002850 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    2850:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    2852:	4a06      	ldr	r2, [pc, #24]	; (286c <_sbrk+0x1c>)
    2854:	6812      	ldr	r2, [r2, #0]
    2856:	b122      	cbz	r2, 2862 <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    2858:	4a04      	ldr	r2, [pc, #16]	; (286c <_sbrk+0x1c>)
    285a:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    285c:	4403      	add	r3, r0
    285e:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    2860:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    2862:	4903      	ldr	r1, [pc, #12]	; (2870 <_sbrk+0x20>)
    2864:	4a01      	ldr	r2, [pc, #4]	; (286c <_sbrk+0x1c>)
    2866:	6011      	str	r1, [r2, #0]
    2868:	e7f6      	b.n	2858 <_sbrk+0x8>
    286a:	bf00      	nop
    286c:	200003b4 	.word	0x200003b4
    2870:	200150e8 	.word	0x200150e8

00002874 <_adc_init>:
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
    2874:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
    2876:	f013 0f01 	tst.w	r3, #1
    287a:	d113      	bne.n	28a4 <_adc_init+0x30>
	tmp = ((Adc *)hw)->CTRLA.reg;
    287c:	8803      	ldrh	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    287e:	f013 0f02 	tst.w	r3, #2
    2882:	d00d      	beq.n	28a0 <_adc_init+0x2c>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    2884:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2886:	f013 0f03 	tst.w	r3, #3
    288a:	d1fb      	bne.n	2884 <_adc_init+0x10>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    288c:	8803      	ldrh	r3, [r0, #0]
    288e:	f023 0302 	bic.w	r3, r3, #2
    2892:	041b      	lsls	r3, r3, #16
    2894:	0c1b      	lsrs	r3, r3, #16
    2896:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    2898:	6b03      	ldr	r3, [r0, #48]	; 0x30
    289a:	f013 0f02 	tst.w	r3, #2
    289e:	d1fb      	bne.n	2898 <_adc_init+0x24>
	((Adc *)hw)->CTRLA.reg = data;
    28a0:	2301      	movs	r3, #1
    28a2:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    28a4:	6b03      	ldr	r3, [r0, #48]	; 0x30
    28a6:	f013 0f01 	tst.w	r3, #1
    28aa:	d1fb      	bne.n	28a4 <_adc_init+0x30>
		}
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    28ac:	2216      	movs	r2, #22
    28ae:	4b0e      	ldr	r3, [pc, #56]	; (28e8 <_adc_init+0x74>)
    28b0:	fb02 3101 	mla	r1, r2, r1, r3
    28b4:	888b      	ldrh	r3, [r1, #4]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    28b6:	80c3      	strh	r3, [r0, #6]
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    28b8:	798b      	ldrb	r3, [r1, #6]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    28ba:	7203      	strb	r3, [r0, #8]
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    28bc:	79cb      	ldrb	r3, [r1, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    28be:	7083      	strb	r3, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    28c0:	890b      	ldrh	r3, [r1, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    28c2:	8083      	strh	r3, [r0, #4]
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    28c4:	7a8b      	ldrb	r3, [r1, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    28c6:	7283      	strb	r3, [r0, #10]
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    28c8:	7acb      	ldrb	r3, [r1, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    28ca:	72c3      	strb	r3, [r0, #11]
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    28cc:	898b      	ldrh	r3, [r1, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    28ce:	8183      	strh	r3, [r0, #12]
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    28d0:	89cb      	ldrh	r3, [r1, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    28d2:	81c3      	strh	r3, [r0, #14]
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    28d4:	8a0b      	ldrh	r3, [r1, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    28d6:	8203      	strh	r3, [r0, #16]
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    28d8:	8a4b      	ldrh	r3, [r1, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    28da:	8243      	strh	r3, [r0, #18]
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    28dc:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    28de:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    28e0:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    28e2:	8003      	strh	r3, [r0, #0]

	return ERR_NONE;
}
    28e4:	2000      	movs	r0, #0
    28e6:	4770      	bx	lr
    28e8:	0000edac 	.word	0x0000edac

000028ec <_adc_get_regs>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    28ec:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    28f0:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
		if (_adcs[i].number == n) {
    28f4:	f3c0 2087 	ubfx	r0, r0, #10, #8
    28f8:	b138      	cbz	r0, 290a <_adc_get_regs+0x1e>
{
    28fa:	b508      	push	{r3, lr}
	ASSERT(false);
    28fc:	2288      	movs	r2, #136	; 0x88
    28fe:	4904      	ldr	r1, [pc, #16]	; (2910 <_adc_get_regs+0x24>)
    2900:	2000      	movs	r0, #0
    2902:	4b04      	ldr	r3, [pc, #16]	; (2914 <_adc_get_regs+0x28>)
    2904:	4798      	blx	r3
}
    2906:	2000      	movs	r0, #0
    2908:	bd08      	pop	{r3, pc}
    290a:	2000      	movs	r0, #0
    290c:	4770      	bx	lr
    290e:	bf00      	nop
    2910:	0000edc4 	.word	0x0000edc4
    2914:	000026b1 	.word	0x000026b1

00002918 <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
    2918:	b538      	push	{r3, r4, r5, lr}
    291a:	460c      	mov	r4, r1
	ASSERT(device);
    291c:	4605      	mov	r5, r0
    291e:	22ce      	movs	r2, #206	; 0xce
    2920:	4907      	ldr	r1, [pc, #28]	; (2940 <_adc_sync_init+0x28>)
    2922:	3000      	adds	r0, #0
    2924:	bf18      	it	ne
    2926:	2001      	movne	r0, #1
    2928:	4b06      	ldr	r3, [pc, #24]	; (2944 <_adc_sync_init+0x2c>)
    292a:	4798      	blx	r3

	device->hw = hw;
    292c:	602c      	str	r4, [r5, #0]

	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
    292e:	4620      	mov	r0, r4
    2930:	4b05      	ldr	r3, [pc, #20]	; (2948 <_adc_sync_init+0x30>)
    2932:	4798      	blx	r3
    2934:	4601      	mov	r1, r0
    2936:	4620      	mov	r0, r4
    2938:	4b04      	ldr	r3, [pc, #16]	; (294c <_adc_sync_init+0x34>)
    293a:	4798      	blx	r3
}
    293c:	bd38      	pop	{r3, r4, r5, pc}
    293e:	bf00      	nop
    2940:	0000edc4 	.word	0x0000edc4
    2944:	000026b1 	.word	0x000026b1
    2948:	000028ed 	.word	0x000028ed
    294c:	00002875 	.word	0x00002875

00002950 <_adc_sync_enable_channel>:
 */
void _adc_sync_enable_channel(struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
    2950:	6802      	ldr	r2, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    2952:	6b13      	ldr	r3, [r2, #48]	; 0x30
    2954:	f013 0f03 	tst.w	r3, #3
    2958:	d1fb      	bne.n	2952 <_adc_sync_enable_channel+0x2>
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
    295a:	8813      	ldrh	r3, [r2, #0]
    295c:	b29b      	uxth	r3, r3
    295e:	f043 0302 	orr.w	r3, r3, #2
    2962:	8013      	strh	r3, [r2, #0]
    2964:	4770      	bx	lr

00002966 <_adc_sync_get_data_size>:
/**
 * \brief Retrieve ADC conversion data size
 */
uint8_t _adc_sync_get_data_size(const struct _adc_sync_device *const device)
{
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    2966:	6803      	ldr	r3, [r0, #0]
	tmp = ((Adc *)hw)->CTRLB.reg;
    2968:	88db      	ldrh	r3, [r3, #6]
    296a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    296e:	2b03      	cmp	r3, #3
}
    2970:	bf0c      	ite	eq
    2972:	2001      	moveq	r0, #1
    2974:	2002      	movne	r0, #2
    2976:	4770      	bx	lr

00002978 <_adc_sync_is_channel_conversion_done>:
 */
bool _adc_sync_is_channel_conversion_done(const struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	return hri_adc_get_interrupt_RESRDY_bit(device->hw);
    2978:	6803      	ldr	r3, [r0, #0]
	return (((Adc *)hw)->INTFLAG.reg & ADC_INTFLAG_RESRDY) >> ADC_INTFLAG_RESRDY_Pos;
    297a:	f893 002e 	ldrb.w	r0, [r3, #46]	; 0x2e
}
    297e:	f000 0001 	and.w	r0, r0, #1
    2982:	4770      	bx	lr

00002984 <_adc_sync_convert>:
/**
 * \brief Make conversion
 */
void _adc_sync_convert(struct _adc_sync_device *const device)
{
	hri_adc_set_SWTRIG_START_bit(device->hw);
    2984:	6802      	ldr	r2, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    2986:	6b13      	ldr	r3, [r2, #48]	; 0x30
    2988:	f3c3 030b 	ubfx	r3, r3, #0, #12
    298c:	2b00      	cmp	r3, #0
    298e:	d1fa      	bne.n	2986 <_adc_sync_convert+0x2>

static inline void hri_adc_set_SWTRIG_START_bit(const void *const hw)
{
	ADC_CRITICAL_SECTION_ENTER();
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_MASK);
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START;
    2990:	7d13      	ldrb	r3, [r2, #20]
    2992:	f043 0302 	orr.w	r3, r3, #2
    2996:	7513      	strb	r3, [r2, #20]
    2998:	4770      	bx	lr

0000299a <_adc_sync_read_channel_data>:
 */
uint16_t _adc_sync_read_channel_data(const struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	return hri_adc_read_RESULT_reg(device->hw);
    299a:	6803      	ldr	r3, [r0, #0]
	return tmp;
}

static inline hri_adc_result_reg_t hri_adc_read_RESULT_reg(const void *const hw)
{
	return ((Adc *)hw)->RESULT.reg;
    299c:	f8b3 0040 	ldrh.w	r0, [r3, #64]	; 0x40
}
    29a0:	b280      	uxth	r0, r0
    29a2:	4770      	bx	lr

000029a4 <_aes_sync_init>:
}

static inline void hri_aes_write_CTRLA_reg(const void *const hw, hri_aes_ctrla_reg_t data)
{
	AES_CRITICAL_SECTION_ENTER();
	((Aes *)hw)->CTRLA.reg = data;
    29a4:	2300      	movs	r3, #0
    29a6:	600b      	str	r3, [r1, #0]
    29a8:	2201      	movs	r2, #1
    29aa:	600a      	str	r2, [r1, #0]
int32_t _aes_sync_init(struct _aes_sync_device *const dev, void *const hw)
{
	hri_aes_write_CTRLA_reg(hw, 0);
	hri_aes_write_CTRLA_reg(hw, AES_CTRLA_SWRST);

	dev->hw = hw;
    29ac:	6001      	str	r1, [r0, #0]
}

static inline void hri_aes_write_DBGCTRL_reg(const void *const hw, hri_aes_dbgctrl_reg_t data)
{
	AES_CRITICAL_SECTION_ENTER();
	((Aes *)hw)->DBGCTRL.reg = data;
    29ae:	724a      	strb	r2, [r1, #9]

	hri_aes_write_DBGCTRL_reg(dev->hw, _aes.dbgctrl);

	return ERR_NONE;
}
    29b0:	4618      	mov	r0, r3
    29b2:	4770      	bx	lr

000029b4 <_aes_sync_enable>:
 */
int32_t _aes_sync_enable(struct _aes_sync_device *const dev)
{
	(void)dev;
	return ERR_NONE;
}
    29b4:	2000      	movs	r0, #0
    29b6:	4770      	bx	lr

000029b8 <_aes_sync_set_key>:

/**
 * \brief              Set AES Key (encryption/decryption)
 */
int32_t _aes_sync_set_key(struct _aes_sync_device *const dev, const uint8_t *key, const enum aes_keysize size)
{
    29b8:	b508      	push	{r3, lr}

	dev->keysize = size;
    29ba:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
	memcpy(dev->key, key, (size + 2) << 3);
    29be:	3202      	adds	r2, #2
    29c0:	00d2      	lsls	r2, r2, #3
    29c2:	3004      	adds	r0, #4
    29c4:	4b01      	ldr	r3, [pc, #4]	; (29cc <_aes_sync_set_key+0x14>)
    29c6:	4798      	blx	r3
	return ERR_NONE;
}
    29c8:	2000      	movs	r0, #0
    29ca:	bd08      	pop	{r3, pc}
    29cc:	0000da6b 	.word	0x0000da6b

000029d0 <_irq_set>:
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    29d0:	0943      	lsrs	r3, r0, #5
    29d2:	f000 001f 	and.w	r0, r0, #31
    29d6:	2201      	movs	r2, #1
    29d8:	fa02 f000 	lsl.w	r0, r2, r0
    29dc:	3340      	adds	r3, #64	; 0x40
    29de:	4a02      	ldr	r2, [pc, #8]	; (29e8 <_irq_set+0x18>)
    29e0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    29e4:	4770      	bx	lr
    29e6:	bf00      	nop
    29e8:	e000e100 	.word	0xe000e100

000029ec <_get_cycles_for_us>:
{
	switch (power) {
	case 9:
		return (us * (freq / 1000000) - 1) + 1;
	case 8:
		return (us * (freq / 100000) - 1) / 10 + 1;
    29ec:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    29f0:	0140      	lsls	r0, r0, #5
    29f2:	3801      	subs	r0, #1
    29f4:	4b02      	ldr	r3, [pc, #8]	; (2a00 <_get_cycles_for_us+0x14>)
    29f6:	fba3 3000 	umull	r3, r0, r3, r0
    29fa:	08c0      	lsrs	r0, r0, #3
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    29fc:	3001      	adds	r0, #1
    29fe:	4770      	bx	lr
    2a00:	cccccccd 	.word	0xcccccccd

00002a04 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    2a04:	f64b 3380 	movw	r3, #48000	; 0xbb80
    2a08:	fb03 f000 	mul.w	r0, r3, r0
    2a0c:	4770      	bx	lr
	...

00002a10 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    2a10:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    2a12:	4a0d      	ldr	r2, [pc, #52]	; (2a48 <_init_chip+0x38>)
    2a14:	8813      	ldrh	r3, [r2, #0]
    2a16:	b29b      	uxth	r3, r3
    2a18:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    2a1a:	4b0c      	ldr	r3, [pc, #48]	; (2a4c <_init_chip+0x3c>)
    2a1c:	4798      	blx	r3
	_oscctrl_init_sources();
    2a1e:	4b0c      	ldr	r3, [pc, #48]	; (2a50 <_init_chip+0x40>)
    2a20:	4798      	blx	r3
	_mclk_init();
    2a22:	4b0c      	ldr	r3, [pc, #48]	; (2a54 <_init_chip+0x44>)
    2a24:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    2a26:	2005      	movs	r0, #5
    2a28:	4c0b      	ldr	r4, [pc, #44]	; (2a58 <_init_chip+0x48>)
    2a2a:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    2a2c:	4b0b      	ldr	r3, [pc, #44]	; (2a5c <_init_chip+0x4c>)
    2a2e:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    2a30:	f640 70fa 	movw	r0, #4090	; 0xffa
    2a34:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    2a36:	4a0a      	ldr	r2, [pc, #40]	; (2a60 <_init_chip+0x50>)
    2a38:	6913      	ldr	r3, [r2, #16]
    2a3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    2a3e:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    2a40:	4b08      	ldr	r3, [pc, #32]	; (2a64 <_init_chip+0x54>)
    2a42:	4798      	blx	r3
    2a44:	bd10      	pop	{r4, pc}
    2a46:	bf00      	nop
    2a48:	41004000 	.word	0x41004000
    2a4c:	00003565 	.word	0x00003565
    2a50:	00003579 	.word	0x00003579
    2a54:	000031dd 	.word	0x000031dd
    2a58:	00002cd5 	.word	0x00002cd5
    2a5c:	0000357d 	.word	0x0000357d
    2a60:	40000800 	.word	0x40000800
    2a64:	00002add 	.word	0x00002add

00002a68 <_dmac_handler>:

/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    2a68:	b508      	push	{r3, lr}
}

static inline hri_dmac_intpend_reg_t hri_dmac_get_INTPEND_reg(const void *const hw, hri_dmac_intpend_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Dmac *)hw)->INTPEND.reg;
    2a6a:	4a1a      	ldr	r2, [pc, #104]	; (2ad4 <_dmac_handler+0x6c>)
    2a6c:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    2a6e:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    2a72:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    2a76:	4818      	ldr	r0, [pc, #96]	; (2ad8 <_dmac_handler+0x70>)
    2a78:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = mask;
}

static inline bool hri_dmac_get_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
    2a7c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    2a80:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e

	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC, channel)) {
    2a84:	f012 0f01 	tst.w	r2, #1
    2a88:	d10a      	bne.n	2aa0 <_dmac_handler+0x38>
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
}

static inline bool hri_dmac_get_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
    2a8a:	011a      	lsls	r2, r3, #4
    2a8c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2a90:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    2a94:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
    2a98:	f012 0f02 	tst.w	r2, #2
    2a9c:	d10b      	bne.n	2ab6 <_dmac_handler+0x4e>
    2a9e:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    2aa0:	011a      	lsls	r2, r3, #4
    2aa2:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2aa6:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    2aaa:	2101      	movs	r1, #1
    2aac:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    2ab0:	6843      	ldr	r3, [r0, #4]
    2ab2:	4798      	blx	r3
    2ab4:	bd08      	pop	{r3, pc}
}

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    2ab6:	011a      	lsls	r2, r3, #4
    2ab8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2abc:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    2ac0:	2102      	movs	r1, #2
    2ac2:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    2ac6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2aca:	4a03      	ldr	r2, [pc, #12]	; (2ad8 <_dmac_handler+0x70>)
    2acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2ad0:	4798      	blx	r3
	}
}
    2ad2:	e7e4      	b.n	2a9e <_dmac_handler+0x36>
    2ad4:	4100a000 	.word	0x4100a000
    2ad8:	200003c0 	.word	0x200003c0

00002adc <_dma_init>:
{
    2adc:	b430      	push	{r4, r5}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    2ade:	4a33      	ldr	r2, [pc, #204]	; (2bac <_dma_init+0xd0>)
    2ae0:	8813      	ldrh	r3, [r2, #0]
    2ae2:	f023 0302 	bic.w	r3, r3, #2
    2ae6:	041b      	lsls	r3, r3, #16
    2ae8:	0c1b      	lsrs	r3, r3, #16
    2aea:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    2aec:	8853      	ldrh	r3, [r2, #2]
    2aee:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    2af2:	041b      	lsls	r3, r3, #16
    2af4:	0c1b      	lsrs	r3, r3, #16
    2af6:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    2af8:	8813      	ldrh	r3, [r2, #0]
    2afa:	b29b      	uxth	r3, r3
    2afc:	f043 0301 	orr.w	r3, r3, #1
    2b00:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    2b02:	8813      	ldrh	r3, [r2, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    2b04:	f013 0f01 	tst.w	r3, #1
    2b08:	d1fb      	bne.n	2b02 <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    2b0a:	4b28      	ldr	r3, [pc, #160]	; (2bac <_dma_init+0xd0>)
    2b0c:	f44f 6270 	mov.w	r2, #3840	; 0xf00
    2b10:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    2b12:	7b5a      	ldrb	r2, [r3, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    2b14:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    2b18:	735a      	strb	r2, [r3, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    2b1a:	2000      	movs	r0, #0
    2b1c:	6158      	str	r0, [r3, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    2b1e:	4a24      	ldr	r2, [pc, #144]	; (2bb0 <_dma_init+0xd4>)
    2b20:	f502 71c0 	add.w	r1, r2, #384	; 0x180
	((Dmac *)hw)->BASEADDR.reg = data;
    2b24:	6359      	str	r1, [r3, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    2b26:	f502 7260 	add.w	r2, r2, #896	; 0x380
	((Dmac *)hw)->WRBADDR.reg = data;
    2b2a:	639a      	str	r2, [r3, #56]	; 0x38
    2b2c:	4b21      	ldr	r3, [pc, #132]	; (2bb4 <_dma_init+0xd8>)
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    2b2e:	f5a1 75c0 	sub.w	r5, r1, #384	; 0x180
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    2b32:	681c      	ldr	r4, [r3, #0]
    2b34:	0101      	lsls	r1, r0, #4
    2b36:	f101 4282 	add.w	r2, r1, #1090519040	; 0x41000000
    2b3a:	f502 4220 	add.w	r2, r2, #40960	; 0xa000

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    2b3e:	6414      	str	r4, [r2, #64]	; 0x40
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    2b40:	791c      	ldrb	r4, [r3, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    2b42:	f882 4045 	strb.w	r4, [r2, #69]	; 0x45
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    2b46:	795c      	ldrb	r4, [r3, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    2b48:	f882 4046 	strb.w	r4, [r2, #70]	; 0x46
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    2b4c:	88da      	ldrh	r2, [r3, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    2b4e:	4429      	add	r1, r5
    2b50:	f8a1 2180 	strh.w	r2, [r1, #384]	; 0x180
    2b54:	3001      	adds	r0, #1
    2b56:	3308      	adds	r3, #8
	for (i = 0; i < DMAC_CH_NUM; i++) {
    2b58:	2820      	cmp	r0, #32
    2b5a:	d1ea      	bne.n	2b32 <_dma_init+0x56>
    2b5c:	231f      	movs	r3, #31
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2b5e:	2001      	movs	r0, #1
    2b60:	4915      	ldr	r1, [pc, #84]	; (2bb8 <_dma_init+0xdc>)
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    2b62:	b29a      	uxth	r2, r3
  if ((int32_t)(IRQn) >= 0)
    2b64:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    2b68:	d00b      	beq.n	2b82 <_dma_init+0xa6>
    2b6a:	3301      	adds	r3, #1
	for (i = 0; i < 5; i++) {
    2b6c:	2b24      	cmp	r3, #36	; 0x24
    2b6e:	d1f8      	bne.n	2b62 <_dma_init+0x86>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    2b70:	4a0e      	ldr	r2, [pc, #56]	; (2bac <_dma_init+0xd0>)
    2b72:	8813      	ldrh	r3, [r2, #0]
    2b74:	b29b      	uxth	r3, r3
    2b76:	f043 0302 	orr.w	r3, r3, #2
    2b7a:	8013      	strh	r3, [r2, #0]
}
    2b7c:	2000      	movs	r0, #0
    2b7e:	bc30      	pop	{r4, r5}
    2b80:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2b82:	095c      	lsrs	r4, r3, #5
    2b84:	f002 021f 	and.w	r2, r2, #31
    2b88:	fa00 f202 	lsl.w	r2, r0, r2
    2b8c:	f104 0520 	add.w	r5, r4, #32
    2b90:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2b94:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2b98:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2b9c:	f104 0560 	add.w	r5, r4, #96	; 0x60
    2ba0:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2ba4:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
    2ba8:	e7df      	b.n	2b6a <_dma_init+0x8e>
    2baa:	bf00      	nop
    2bac:	4100a000 	.word	0x4100a000
    2bb0:	200003c0 	.word	0x200003c0
    2bb4:	0000eddc 	.word	0x0000eddc
    2bb8:	e000e100 	.word	0xe000e100

00002bbc <_dma_set_destination_address>:
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    2bbc:	4b03      	ldr	r3, [pc, #12]	; (2bcc <_dma_set_destination_address+0x10>)
    2bbe:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    2bc2:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
}
    2bc6:	2000      	movs	r0, #0
    2bc8:	4770      	bx	lr
    2bca:	bf00      	nop
    2bcc:	200003c0 	.word	0x200003c0

00002bd0 <_dma_set_source_address>:
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    2bd0:	4b03      	ldr	r3, [pc, #12]	; (2be0 <_dma_set_source_address+0x10>)
    2bd2:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    2bd6:	f8c0 1184 	str.w	r1, [r0, #388]	; 0x184
}
    2bda:	2000      	movs	r0, #0
    2bdc:	4770      	bx	lr
    2bde:	bf00      	nop
    2be0:	200003c0 	.word	0x200003c0

00002be4 <_dma_set_data_amount>:
{
    2be4:	b430      	push	{r4, r5}
	return ((DmacDescriptor *)hw)->DSTADDR.reg;
    2be6:	4a18      	ldr	r2, [pc, #96]	; (2c48 <_dma_set_data_amount+0x64>)
    2be8:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    2bec:	f8d2 5188 	ldr.w	r5, [r2, #392]	; 0x188
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    2bf0:	f8b2 3180 	ldrh.w	r3, [r2, #384]	; 0x180
	uint8_t  beat_size = hri_dmacdescriptor_read_BTCTRL_BEATSIZE_bf(&_descriptor_section[channel]);
    2bf4:	f3c3 2301 	ubfx	r3, r3, #8, #2
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    2bf8:	f8b2 2180 	ldrh.w	r2, [r2, #384]	; 0x180
	if (hri_dmacdescriptor_get_BTCTRL_DSTINC_bit(&_descriptor_section[channel])) {
    2bfc:	f412 6f00 	tst.w	r2, #2048	; 0x800
    2c00:	d007      	beq.n	2c12 <_dma_set_data_amount+0x2e>
		hri_dmacdescriptor_write_DSTADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    2c02:	fa01 f403 	lsl.w	r4, r1, r3
    2c06:	442c      	add	r4, r5
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    2c08:	4a0f      	ldr	r2, [pc, #60]	; (2c48 <_dma_set_data_amount+0x64>)
    2c0a:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    2c0e:	f8c2 4188 	str.w	r4, [r2, #392]	; 0x188
	return ((DmacDescriptor *)hw)->SRCADDR.reg;
    2c12:	4a0d      	ldr	r2, [pc, #52]	; (2c48 <_dma_set_data_amount+0x64>)
    2c14:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    2c18:	f8d2 4184 	ldr.w	r4, [r2, #388]	; 0x184
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    2c1c:	f8b2 2180 	ldrh.w	r2, [r2, #384]	; 0x180
	if (hri_dmacdescriptor_get_BTCTRL_SRCINC_bit(&_descriptor_section[channel])) {
    2c20:	f412 6f80 	tst.w	r2, #1024	; 0x400
    2c24:	d007      	beq.n	2c36 <_dma_set_data_amount+0x52>
		hri_dmacdescriptor_write_SRCADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    2c26:	fa01 f303 	lsl.w	r3, r1, r3
    2c2a:	4423      	add	r3, r4
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    2c2c:	4a06      	ldr	r2, [pc, #24]	; (2c48 <_dma_set_data_amount+0x64>)
    2c2e:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    2c32:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
	hri_dmacdescriptor_write_BTCNT_reg(&_descriptor_section[channel], amount);
    2c36:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCNT.reg = data;
    2c38:	4b03      	ldr	r3, [pc, #12]	; (2c48 <_dma_set_data_amount+0x64>)
    2c3a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    2c3e:	f8a0 1182 	strh.w	r1, [r0, #386]	; 0x182
}
    2c42:	2000      	movs	r0, #0
    2c44:	bc30      	pop	{r4, r5}
    2c46:	4770      	bx	lr
    2c48:	200003c0 	.word	0x200003c0

00002c4c <_dma_enable_transaction>:
{
    2c4c:	b410      	push	{r4}
	((DmacDescriptor *)hw)->BTCTRL.reg |= DMAC_BTCTRL_VALID;
    2c4e:	0103      	lsls	r3, r0, #4
    2c50:	4c0d      	ldr	r4, [pc, #52]	; (2c88 <_dma_enable_transaction+0x3c>)
    2c52:	441c      	add	r4, r3
    2c54:	f8b4 2180 	ldrh.w	r2, [r4, #384]	; 0x180
    2c58:	b292      	uxth	r2, r2
    2c5a:	f042 0201 	orr.w	r2, r2, #1
    2c5e:	f8a4 2180 	strh.w	r2, [r4, #384]	; 0x180
    2c62:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2c66:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    2c6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    2c6c:	f042 0202 	orr.w	r2, r2, #2
    2c70:	641a      	str	r2, [r3, #64]	; 0x40
	if (software_trigger) {
    2c72:	b131      	cbz	r1, 2c82 <_dma_enable_transaction+0x36>
	((Dmac *)hw)->SWTRIGCTRL.reg |= mask;
    2c74:	4a05      	ldr	r2, [pc, #20]	; (2c8c <_dma_enable_transaction+0x40>)
    2c76:	6911      	ldr	r1, [r2, #16]
		hri_dmac_set_SWTRIGCTRL_reg(DMAC, 1 << channel);
    2c78:	2301      	movs	r3, #1
    2c7a:	fa03 f000 	lsl.w	r0, r3, r0
    2c7e:	4308      	orrs	r0, r1
    2c80:	6110      	str	r0, [r2, #16]
}
    2c82:	2000      	movs	r0, #0
    2c84:	bc10      	pop	{r4}
    2c86:	4770      	bx	lr
    2c88:	200003c0 	.word	0x200003c0
    2c8c:	4100a000 	.word	0x4100a000

00002c90 <DMAC_0_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_0_Handler(void)
{
    2c90:	b508      	push	{r3, lr}
	_dmac_handler();
    2c92:	4b01      	ldr	r3, [pc, #4]	; (2c98 <DMAC_0_Handler+0x8>)
    2c94:	4798      	blx	r3
    2c96:	bd08      	pop	{r3, pc}
    2c98:	00002a69 	.word	0x00002a69

00002c9c <DMAC_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_1_Handler(void)
{
    2c9c:	b508      	push	{r3, lr}
	_dmac_handler();
    2c9e:	4b01      	ldr	r3, [pc, #4]	; (2ca4 <DMAC_1_Handler+0x8>)
    2ca0:	4798      	blx	r3
    2ca2:	bd08      	pop	{r3, pc}
    2ca4:	00002a69 	.word	0x00002a69

00002ca8 <DMAC_2_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_2_Handler(void)
{
    2ca8:	b508      	push	{r3, lr}
	_dmac_handler();
    2caa:	4b01      	ldr	r3, [pc, #4]	; (2cb0 <DMAC_2_Handler+0x8>)
    2cac:	4798      	blx	r3
    2cae:	bd08      	pop	{r3, pc}
    2cb0:	00002a69 	.word	0x00002a69

00002cb4 <DMAC_3_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_3_Handler(void)
{
    2cb4:	b508      	push	{r3, lr}
	_dmac_handler();
    2cb6:	4b01      	ldr	r3, [pc, #4]	; (2cbc <DMAC_3_Handler+0x8>)
    2cb8:	4798      	blx	r3
    2cba:	bd08      	pop	{r3, pc}
    2cbc:	00002a69 	.word	0x00002a69

00002cc0 <DMAC_4_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_4_Handler(void)
{
    2cc0:	b508      	push	{r3, lr}
	_dmac_handler();
    2cc2:	4b01      	ldr	r3, [pc, #4]	; (2cc8 <DMAC_4_Handler+0x8>)
    2cc4:	4798      	blx	r3
    2cc6:	bd08      	pop	{r3, pc}
    2cc8:	00002a69 	.word	0x00002a69

00002ccc <_crc_sync_init>:
/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
	device->hw = hw;
    2ccc:	6001      	str	r1, [r0, #0]

	return ERR_NONE;
}
    2cce:	2000      	movs	r0, #0
    2cd0:	4770      	bx	lr
	...

00002cd4 <_gclk_init_generators_by_fref>:
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
#if CONF_GCLK_GEN_0_GENEN == 1
	if (bm & (1ul << 0)) {
    2cd4:	f010 0f01 	tst.w	r0, #1
    2cd8:	d002      	beq.n	2ce0 <_gclk_init_generators_by_fref+0xc>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    2cda:	4a05      	ldr	r2, [pc, #20]	; (2cf0 <_gclk_init_generators_by_fref+0x1c>)
    2cdc:	4b05      	ldr	r3, [pc, #20]	; (2cf4 <_gclk_init_generators_by_fref+0x20>)
    2cde:	621a      	str	r2, [r3, #32]
		        | (CONF_GCLK_GEN_0_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_0_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GEN_0_GENEN << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_1_GENEN == 1
	if (bm & (1ul << 1)) {
    2ce0:	f010 0f02 	tst.w	r0, #2
    2ce4:	d002      	beq.n	2cec <_gclk_init_generators_by_fref+0x18>
    2ce6:	4a04      	ldr	r2, [pc, #16]	; (2cf8 <_gclk_init_generators_by_fref+0x24>)
    2ce8:	4b02      	ldr	r3, [pc, #8]	; (2cf4 <_gclk_init_generators_by_fref+0x20>)
    2cea:	625a      	str	r2, [r3, #36]	; 0x24
    2cec:	4770      	bx	lr
    2cee:	bf00      	nop
    2cf0:	00012f06 	.word	0x00012f06
    2cf4:	40001c00 	.word	0x40001c00
    2cf8:	00012f04 	.word	0x00012f04

00002cfc <GMAC_Handler>:

/*
 * \internal GMAC interrupt handler
 */
void GMAC_Handler(void)
{
    2cfc:	b500      	push	{lr}
    2cfe:	b083      	sub	sp, #12
	volatile uint32_t tsr;
	volatile uint32_t rsr;

	tsr = hri_gmac_read_TSR_reg(_gmac_dev->hw);
    2d00:	4b14      	ldr	r3, [pc, #80]	; (2d54 <GMAC_Handler+0x58>)
    2d02:	6818      	ldr	r0, [r3, #0]
    2d04:	6803      	ldr	r3, [r0, #0]
	GMAC_CRITICAL_SECTION_LEAVE();
}

static inline hri_gmac_tsr_reg_t hri_gmac_read_TSR_reg(const void *const hw)
{
	return ((Gmac *)hw)->TSR.reg;
    2d06:	695a      	ldr	r2, [r3, #20]
    2d08:	9201      	str	r2, [sp, #4]
	GMAC_CRITICAL_SECTION_LEAVE();
}

static inline hri_gmac_rsr_reg_t hri_gmac_read_RSR_reg(const void *const hw)
{
	return ((Gmac *)hw)->RSR.reg;
    2d0a:	6a1a      	ldr	r2, [r3, #32]
	rsr = hri_gmac_read_RSR_reg(_gmac_dev->hw);
    2d0c:	9200      	str	r2, [sp, #0]
	GMAC_CRITICAL_SECTION_LEAVE();
}

static inline hri_gmac_isr_reg_t hri_gmac_read_ISR_reg(const void *const hw)
{
	return ((Gmac *)hw)->ISR.reg;
    2d0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	/* Must be Clear ISR (Clear on read) */
	hri_gmac_read_ISR_reg(_gmac_dev->hw);

	/* Frame transmited */
	if (tsr & GMAC_TSR_TXCOMP) {
    2d10:	9a01      	ldr	r2, [sp, #4]
    2d12:	f012 0f20 	tst.w	r2, #32
    2d16:	d00b      	beq.n	2d30 <GMAC_Handler+0x34>
		hri_gmac_write_TSR_reg(_gmac_dev->hw, tsr);
    2d18:	9a01      	ldr	r2, [sp, #4]
	((Gmac *)hw)->TSR.reg = data;
    2d1a:	615a      	str	r2, [r3, #20]
		if ((_txbuf_descrs[_txbuf_index].status.bm.used) && (_gmac_dev->cb.transmited != NULL)) {
    2d1c:	4b0d      	ldr	r3, [pc, #52]	; (2d54 <GMAC_Handler+0x58>)
    2d1e:	685a      	ldr	r2, [r3, #4]
    2d20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    2d24:	7bdb      	ldrb	r3, [r3, #15]
    2d26:	09db      	lsrs	r3, r3, #7
    2d28:	d002      	beq.n	2d30 <GMAC_Handler+0x34>
    2d2a:	6843      	ldr	r3, [r0, #4]
    2d2c:	b103      	cbz	r3, 2d30 <GMAC_Handler+0x34>
			_gmac_dev->cb.transmited(_gmac_dev);
    2d2e:	4798      	blx	r3
		}
	}

	/* Frame received */
	if (rsr & GMAC_RSR_REC) {
    2d30:	9b00      	ldr	r3, [sp, #0]
    2d32:	f013 0f02 	tst.w	r3, #2
    2d36:	d004      	beq.n	2d42 <GMAC_Handler+0x46>
		if (_gmac_dev->cb.received != NULL) {
    2d38:	4b06      	ldr	r3, [pc, #24]	; (2d54 <GMAC_Handler+0x58>)
    2d3a:	6818      	ldr	r0, [r3, #0]
    2d3c:	6883      	ldr	r3, [r0, #8]
    2d3e:	b103      	cbz	r3, 2d42 <GMAC_Handler+0x46>
			_gmac_dev->cb.received(_gmac_dev);
    2d40:	4798      	blx	r3
		}
	}
	hri_gmac_write_RSR_reg(_gmac_dev->hw, rsr);
    2d42:	4b04      	ldr	r3, [pc, #16]	; (2d54 <GMAC_Handler+0x58>)
    2d44:	681b      	ldr	r3, [r3, #0]
    2d46:	681b      	ldr	r3, [r3, #0]
    2d48:	9a00      	ldr	r2, [sp, #0]
	((Gmac *)hw)->RSR.reg = data;
    2d4a:	621a      	str	r2, [r3, #32]
}
    2d4c:	b003      	add	sp, #12
    2d4e:	f85d fb04 	ldr.w	pc, [sp], #4
    2d52:	bf00      	nop
    2d54:	20000940 	.word	0x20000940

00002d58 <_mac_async_init>:

int32_t _mac_async_init(struct _mac_async_device *const dev, void *const hw)
{
    2d58:	b5f0      	push	{r4, r5, r6, r7, lr}
	dev->hw = hw;
    2d5a:	6001      	str	r1, [r0, #0]
	((Gmac *)hw)->NCR.reg = data;
    2d5c:	4b32      	ldr	r3, [pc, #200]	; (2e28 <_mac_async_init+0xd0>)
    2d5e:	600b      	str	r3, [r1, #0]
	                       (CONF_GMAC_NCR_LBL ? GMAC_NCR_LBL : 0) | (CONF_GMAC_NCR_MPE ? GMAC_NCR_MPE : 0)
	                           | (CONF_GMAC_NCR_WESTAT ? GMAC_NCR_WESTAT : 0) | (CONF_GMAC_NCR_BP ? GMAC_NCR_BP : 0)
	                           | (CONF_GMAC_NCR_ENPBPR ? GMAC_NCR_ENPBPR : 0)
	                           | (CONF_GMAC_NCR_TXPBPF ? GMAC_NCR_TXPBPF : 0));
	hri_gmac_write_NCFGR_reg(
	    dev->hw,
    2d60:	6803      	ldr	r3, [r0, #0]
	((Gmac *)hw)->NCFGR.reg = data;
    2d62:	4a32      	ldr	r2, [pc, #200]	; (2e2c <_mac_async_init+0xd4>)
    2d64:	605a      	str	r2, [r3, #4]
	        | (CONF_GMAC_NCFGR_LFERD ? GMAC_NCFGR_LFERD : 0) | (CONF_GMAC_NCFGR_RFCS ? GMAC_NCFGR_RFCS : 0)
	        | GMAC_NCFGR_CLK(CONF_GMAC_NCFGR_CLK) | (CONF_GMAC_NCFGR_DCPF ? GMAC_NCFGR_DCPF : 0)
	        | (CONF_GMAC_NCFGR_RXCOEN ? GMAC_NCFGR_RXCOEN : 0) | (CONF_GMAC_NCFGR_EFRHD ? GMAC_NCFGR_EFRHD : 0)
	        | (CONF_GMAC_NCFGR_IRXFCS ? GMAC_NCFGR_IRXFCS : 0) | (CONF_GMAC_NCFGR_IPGSEN ? GMAC_NCFGR_IPGSEN : 0)
	        | (CONF_GMAC_NCFGR_RXBP ? GMAC_NCFGR_RXBP : 0) | (CONF_GMAC_NCFGR_IRXER ? GMAC_NCFGR_IRXER : 0));
	hri_gmac_write_UR_reg(dev->hw, (CONF_GMAC_UR_MII ? GMAC_UR_MII : 0));
    2d66:	6803      	ldr	r3, [r0, #0]
	((Gmac *)hw)->UR.reg = data;
    2d68:	2201      	movs	r2, #1
    2d6a:	60da      	str	r2, [r3, #12]
	hri_gmac_write_DCFGR_reg(
	    dev->hw,
    2d6c:	6803      	ldr	r3, [r0, #0]
	((Gmac *)hw)->DCFGR.reg = data;
    2d6e:	4a30      	ldr	r2, [pc, #192]	; (2e30 <_mac_async_init+0xd8>)
    2d70:	611a      	str	r2, [r3, #16]
	    GMAC_DCFGR_FBLDO(CONF_GMAC_DCFGR_FBLDO) | (CONF_GMAC_DCFGR_ESMA ? GMAC_DCFGR_ESMA : 0)
	        | (CONF_GMAC_DCFGR_ESPA ? GMAC_DCFGR_ESPA : 0) | GMAC_DCFGR_RXBMS(CONF_GMAC_DCFGR_RXBMS)
	        | (CONF_GMAC_DCFGR_TXPBMS ? GMAC_DCFGR_TXPBMS : 0) | (CONF_GMAC_DCFGR_TXCOEN ? GMAC_DCFGR_TXCOEN : 0)
	        | GMAC_DCFGR_DRBS(CONF_GMAC_DCFGR_DRBS) | (CONF_GMAC_DCFGR_DDRP ? GMAC_DCFGR_DDRP : 0));
	hri_gmac_write_WOL_reg(dev->hw, 0);
    2d72:	6802      	ldr	r2, [r0, #0]
}

static inline void hri_gmac_write_WOL_reg(const void *const hw, hri_gmac_wol_reg_t data)
{
	GMAC_CRITICAL_SECTION_ENTER();
	((Gmac *)hw)->WOL.reg = data;
    2d74:	2300      	movs	r3, #0
    2d76:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
	hri_gmac_write_IPGS_reg(dev->hw, GMAC_IPGS_FL((CONF_GMAC_IPGS_FL_MUL << 8) | CONF_GMAC_IPGS_FL_DIV));
    2d7a:	6802      	ldr	r2, [r0, #0]
}

static inline void hri_gmac_write_IPGS_reg(const void *const hw, hri_gmac_ipgs_reg_t data)
{
	GMAC_CRITICAL_SECTION_ENTER();
	((Gmac *)hw)->IPGS.reg = data;
    2d7c:	f240 1101 	movw	r1, #257	; 0x101
    2d80:	f8c2 10bc 	str.w	r1, [r2, #188]	; 0xbc
    2d84:	4f2b      	ldr	r7, [pc, #172]	; (2e34 <_mac_async_init+0xdc>)
    2d86:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
    2d8a:	f107 0e08 	add.w	lr, r7, #8
    2d8e:	4671      	mov	r1, lr
		_txbuf_descrs[i].address        = (uint32_t)_txbuf[i];
    2d90:	463e      	mov	r6, r7
    2d92:	46f4      	mov	ip, lr
		_txbuf_descrs[i].status.val     = 0;
    2d94:	461f      	mov	r7, r3
		_txbuf_descrs[i].address        = (uint32_t)_txbuf[i];
    2d96:	f84c 4033 	str.w	r4, [ip, r3, lsl #3]
		_txbuf_descrs[i].status.val     = 0;
    2d9a:	604f      	str	r7, [r1, #4]
		_txbuf_descrs[i].status.bm.used = 1;
    2d9c:	eb06 05c3 	add.w	r5, r6, r3, lsl #3
    2da0:	7bea      	ldrb	r2, [r5, #15]
    2da2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    2da6:	73ea      	strb	r2, [r5, #15]
	for (i = 0; i < CONF_GMAC_TXDESCR_NUM; i++) {
    2da8:	3301      	adds	r3, #1
    2daa:	f204 54dc 	addw	r4, r4, #1500	; 0x5dc
    2dae:	3108      	adds	r1, #8
    2db0:	2b10      	cmp	r3, #16
    2db2:	d1f0      	bne.n	2d96 <_mac_async_init+0x3e>
	_txbuf_descrs[CONF_GMAC_TXDESCR_NUM - 1].status.bm.wrap = 1;
    2db4:	4b1f      	ldr	r3, [pc, #124]	; (2e34 <_mac_async_init+0xdc>)
    2db6:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    2dba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    2dbe:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
	_txbuf_index                                            = 0;
    2dc2:	2200      	movs	r2, #0
    2dc4:	605a      	str	r2, [r3, #4]
	_last_txbuf_index                                       = 0;
    2dc6:	4b1c      	ldr	r3, [pc, #112]	; (2e38 <_mac_async_init+0xe0>)
    2dc8:	f8c3 2988 	str.w	r2, [r3, #2440]	; 0x988
    2dcc:	f603 13a8 	addw	r3, r3, #2472	; 0x9a8
    2dd0:	4a1a      	ldr	r2, [pc, #104]	; (2e3c <_mac_async_init+0xe4>)
    2dd2:	f503 6400 	add.w	r4, r3, #2048	; 0x800
		_rxbuf_descrs[i].status.val  = 0;
    2dd6:	2100      	movs	r1, #0
		_rxbuf_descrs[i].address.val = (uint32_t)_rxbuf[i];
    2dd8:	f842 3c04 	str.w	r3, [r2, #-4]
		_rxbuf_descrs[i].status.val  = 0;
    2ddc:	f842 1b08 	str.w	r1, [r2], #8
    2de0:	3380      	adds	r3, #128	; 0x80
	for (i = 0; i < CONF_GMAC_RXDESCR_NUM; i++) {
    2de2:	42a3      	cmp	r3, r4
    2de4:	d1f8      	bne.n	2dd8 <_mac_async_init+0x80>
	_rxbuf_descrs[CONF_GMAC_RXDESCR_NUM - 1].address.bm.wrap = 1;
    2de6:	4b16      	ldr	r3, [pc, #88]	; (2e40 <_mac_async_init+0xe8>)
    2de8:	f893 2128 	ldrb.w	r2, [r3, #296]	; 0x128
    2dec:	f042 0202 	orr.w	r2, r2, #2
    2df0:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
	_rxbuf_index                                             = 0;
    2df4:	2100      	movs	r1, #0
    2df6:	f8c3 1130 	str.w	r1, [r3, #304]	; 0x130
	hri_gmac_write_TBQB_reg(dev->hw, (uint32_t)_txbuf_descrs);
    2dfa:	6802      	ldr	r2, [r0, #0]
	((Gmac *)hw)->TBQB.reg = data;
    2dfc:	f8c2 e01c 	str.w	lr, [r2, #28]
	hri_gmac_write_RBQB_reg(dev->hw, (uint32_t)_rxbuf_descrs);
    2e00:	6802      	ldr	r2, [r0, #0]
    2e02:	33b0      	adds	r3, #176	; 0xb0
	((Gmac *)hw)->RBQB.reg = data;
    2e04:	6193      	str	r3, [r2, #24]
	_mac_init_bufdescr(dev);

	_gmac_dev = dev;
    2e06:	4b0b      	ldr	r3, [pc, #44]	; (2e34 <_mac_async_init+0xdc>)
    2e08:	6018      	str	r0, [r3, #0]
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2e0a:	4b0e      	ldr	r3, [pc, #56]	; (2e44 <_mac_async_init+0xec>)
    2e0c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    2e10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
    2e14:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2e18:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2e1c:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2e20:	609a      	str	r2, [r3, #8]
	NVIC_DisableIRQ(GMAC_IRQn);
	NVIC_ClearPendingIRQ(GMAC_IRQn);
	NVIC_EnableIRQ(GMAC_IRQn);

	return ERR_NONE;
}
    2e22:	4608      	mov	r0, r1
    2e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e26:	bf00      	nop
    2e28:	00030192 	.word	0x00030192
    2e2c:	4091211b 	.word	0x4091211b
    2e30:	00020704 	.word	0x00020704
    2e34:	20000940 	.word	0x20000940
    2e38:	20005e18 	.word	0x20005e18
    2e3c:	20006fc4 	.word	0x20006fc4
    2e40:	20006f10 	.word	0x20006f10
    2e44:	e000e100 	.word	0xe000e100

00002e48 <_mac_async_enable>:
	return ERR_NONE;
}

int32_t _mac_async_enable(struct _mac_async_device *const dev)
{
	hri_gmac_set_NCR_reg(dev->hw, GMAC_NCR_RXEN | GMAC_NCR_TXEN);
    2e48:	6802      	ldr	r2, [r0, #0]
	((Gmac *)hw)->NCR.reg |= mask;
    2e4a:	6813      	ldr	r3, [r2, #0]
    2e4c:	f043 030c 	orr.w	r3, r3, #12
    2e50:	6013      	str	r3, [r2, #0]
	return ERR_NONE;
}
    2e52:	2000      	movs	r0, #0
    2e54:	4770      	bx	lr
	...

00002e58 <_mac_async_write>:
	hri_gmac_clear_NCR_reg(dev->hw, GMAC_NCR_RXEN | GMAC_NCR_TXEN);
	return ERR_NONE;
}

int32_t _mac_async_write(struct _mac_async_device *const dev, uint8_t *buf, uint32_t len)
{
    2e58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2e5c:	4682      	mov	sl, r0
    2e5e:	4615      	mov	r5, r2
	uint32_t pos;
	uint32_t blen;
	uint32_t i;

	if (_txbuf_descrs[_last_txbuf_index].status.bm.used && !_txbuf_descrs[_last_txbuf_index].status.bm.last_buf) {
    2e60:	4b58      	ldr	r3, [pc, #352]	; (2fc4 <_mac_async_write+0x16c>)
    2e62:	f8d3 2988 	ldr.w	r2, [r3, #2440]	; 0x988
    2e66:	4b58      	ldr	r3, [pc, #352]	; (2fc8 <_mac_async_write+0x170>)
    2e68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    2e6c:	7bdb      	ldrb	r3, [r3, #15]
    2e6e:	09db      	lsrs	r3, r3, #7
    2e70:	d01d      	beq.n	2eae <_mac_async_write+0x56>
    2e72:	4b54      	ldr	r3, [pc, #336]	; (2fc4 <_mac_async_write+0x16c>)
    2e74:	f8d3 2988 	ldr.w	r2, [r3, #2440]	; 0x988
    2e78:	4b53      	ldr	r3, [pc, #332]	; (2fc8 <_mac_async_write+0x170>)
    2e7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    2e7e:	7b5b      	ldrb	r3, [r3, #13]
    2e80:	09db      	lsrs	r3, r3, #7
    2e82:	d114      	bne.n	2eae <_mac_async_write+0x56>
    2e84:	2001      	movs	r0, #1
		/* Set used flag from first descriptor to last descriptor,
		 * as DMA olny set the first used flag */
		for (i = 1; i < CONF_GMAC_TXDESCR_NUM; i++) {
			pos = _last_txbuf_index + i;
    2e86:	4e4f      	ldr	r6, [pc, #316]	; (2fc4 <_mac_async_write+0x16c>)
			if (pos >= CONF_GMAC_TXDESCR_NUM) {
				pos -= CONF_GMAC_TXDESCR_NUM;
			}
			_txbuf_descrs[pos].status.bm.used = 1;
    2e88:	4c4f      	ldr	r4, [pc, #316]	; (2fc8 <_mac_async_write+0x170>)
			pos = _last_txbuf_index + i;
    2e8a:	f8d6 3988 	ldr.w	r3, [r6, #2440]	; 0x988
    2e8e:	4403      	add	r3, r0
			if (pos >= CONF_GMAC_TXDESCR_NUM) {
    2e90:	2b0f      	cmp	r3, #15
				pos -= CONF_GMAC_TXDESCR_NUM;
    2e92:	bf88      	it	hi
    2e94:	3b10      	subhi	r3, #16
			_txbuf_descrs[pos].status.bm.used = 1;
    2e96:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    2e9a:	7bda      	ldrb	r2, [r3, #15]
    2e9c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    2ea0:	73da      	strb	r2, [r3, #15]

			if (_txbuf_descrs[pos].status.bm.last_buf) {
    2ea2:	7b5b      	ldrb	r3, [r3, #13]
    2ea4:	09db      	lsrs	r3, r3, #7
    2ea6:	d102      	bne.n	2eae <_mac_async_write+0x56>
		for (i = 1; i < CONF_GMAC_TXDESCR_NUM; i++) {
    2ea8:	3001      	adds	r0, #1
    2eaa:	2810      	cmp	r0, #16
    2eac:	d1ed      	bne.n	2e8a <_mac_async_write+0x32>
				break;
			}
		}
	}

	if (!_txbuf_descrs[_txbuf_index].status.bm.used) {
    2eae:	4b46      	ldr	r3, [pc, #280]	; (2fc8 <_mac_async_write+0x170>)
    2eb0:	685a      	ldr	r2, [r3, #4]
    2eb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    2eb6:	7bdb      	ldrb	r3, [r3, #15]
    2eb8:	09db      	lsrs	r3, r3, #7
    2eba:	d07b      	beq.n	2fb4 <_mac_async_write+0x15c>
		return ERR_NO_RESOURCE;
	}

	/* Check if have enough buffers, the first buffer already checked */
	if (len > CONF_GMAC_TXBUF_SIZE) {
    2ebc:	f240 53dc 	movw	r3, #1500	; 0x5dc
    2ec0:	429d      	cmp	r5, r3
    2ec2:	d916      	bls.n	2ef2 <_mac_async_write+0x9a>
    2ec4:	f2a5 50dc 	subw	r0, r5, #1500	; 0x5dc
    2ec8:	2201      	movs	r2, #1
		for (i = 1; i < CONF_GMAC_TXDESCR_NUM; i++) {
			pos = _txbuf_index + i;
    2eca:	4c3f      	ldr	r4, [pc, #252]	; (2fc8 <_mac_async_write+0x170>)

			if (!_txbuf_descrs[pos].status.bm.used) {
				return ERR_NO_RESOURCE;
			}

			if ((len - (CONF_GMAC_TXBUF_SIZE * i)) < CONF_GMAC_TXBUF_SIZE) {
    2ecc:	f240 56db 	movw	r6, #1499	; 0x5db
			pos = _txbuf_index + i;
    2ed0:	6863      	ldr	r3, [r4, #4]
    2ed2:	4413      	add	r3, r2
			if (pos >= CONF_GMAC_TXDESCR_NUM) {
    2ed4:	2b0f      	cmp	r3, #15
				pos -= CONF_GMAC_TXDESCR_NUM;
    2ed6:	bf88      	it	hi
    2ed8:	3b10      	subhi	r3, #16
			if (!_txbuf_descrs[pos].status.bm.used) {
    2eda:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    2ede:	7bdb      	ldrb	r3, [r3, #15]
    2ee0:	09db      	lsrs	r3, r3, #7
    2ee2:	d06b      	beq.n	2fbc <_mac_async_write+0x164>
			if ((len - (CONF_GMAC_TXBUF_SIZE * i)) < CONF_GMAC_TXBUF_SIZE) {
    2ee4:	42b0      	cmp	r0, r6
    2ee6:	d904      	bls.n	2ef2 <_mac_async_write+0x9a>
		for (i = 1; i < CONF_GMAC_TXDESCR_NUM; i++) {
    2ee8:	3201      	adds	r2, #1
    2eea:	f2a0 50dc 	subw	r0, r0, #1500	; 0x5dc
    2eee:	2a10      	cmp	r2, #16
    2ef0:	d1ee      	bne.n	2ed0 <_mac_async_write+0x78>
				break;
			}
		}
	}
	_last_txbuf_index = _txbuf_index;
    2ef2:	4b35      	ldr	r3, [pc, #212]	; (2fc8 <_mac_async_write+0x170>)
    2ef4:	685a      	ldr	r2, [r3, #4]
    2ef6:	4b33      	ldr	r3, [pc, #204]	; (2fc4 <_mac_async_write+0x16c>)
    2ef8:	f8c3 2988 	str.w	r2, [r3, #2440]	; 0x988
    2efc:	460e      	mov	r6, r1
    2efe:	f501 49bb 	add.w	r9, r1, #23936	; 0x5d80
    2f02:	f109 0940 	add.w	r9, r9, #64	; 0x40

	/* Write data to transmit buffer */
	for (i = 0; i < CONF_GMAC_TXDESCR_NUM; i++) {
		blen = min(len, CONF_GMAC_TXBUF_SIZE);
		memcpy(_txbuf[_txbuf_index], buf + (i * CONF_GMAC_TXBUF_SIZE), blen);
    2f06:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 2fc8 <_mac_async_write+0x170>
    2f0a:	f108 0ba0 	add.w	fp, r8, #160	; 0xa0
    2f0e:	4f2f      	ldr	r7, [pc, #188]	; (2fcc <_mac_async_write+0x174>)
    2f10:	e029      	b.n	2f66 <_mac_async_write+0x10e>

		if (len > 0) {
			/* Here the Used flag be set to zero */
			_txbuf_descrs[_txbuf_index].status.val = blen;
		} else {
			_txbuf_descrs[_txbuf_index].status.val         = blen;
    2f12:	4b2d      	ldr	r3, [pc, #180]	; (2fc8 <_mac_async_write+0x170>)
    2f14:	685a      	ldr	r2, [r3, #4]
    2f16:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    2f1a:	60d4      	str	r4, [r2, #12]
			_txbuf_descrs[_txbuf_index].status.bm.last_buf = 1;
    2f1c:	685a      	ldr	r2, [r3, #4]
    2f1e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    2f22:	7b51      	ldrb	r1, [r2, #13]
    2f24:	f041 0180 	orr.w	r1, r1, #128	; 0x80
    2f28:	7351      	strb	r1, [r2, #13]
		}
		_txbuf_index++;
    2f2a:	685a      	ldr	r2, [r3, #4]
    2f2c:	3201      	adds	r2, #1
    2f2e:	605a      	str	r2, [r3, #4]
		if (_txbuf_index == CONF_GMAC_TXDESCR_NUM) {
    2f30:	685b      	ldr	r3, [r3, #4]
    2f32:	2b10      	cmp	r3, #16
    2f34:	d108      	bne.n	2f48 <_mac_async_write+0xf0>
			_txbuf_index                                            = 0;
    2f36:	4b24      	ldr	r3, [pc, #144]	; (2fc8 <_mac_async_write+0x170>)
    2f38:	2200      	movs	r2, #0
    2f3a:	605a      	str	r2, [r3, #4]
			_txbuf_descrs[CONF_GMAC_TXDESCR_NUM - 1].status.bm.wrap = 1;
    2f3c:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    2f40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    2f44:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
  __ASM volatile ("dsb 0xF":::"memory");
    2f48:	f3bf 8f4f 	dsb	sy

	/* Data synchronization barrier */
	__DSB();

	/* Active Transmit */
	hri_gmac_set_NCR_reg(dev->hw, GMAC_NCR_TSTART);
    2f4c:	f8da 2000 	ldr.w	r2, [sl]
    2f50:	6813      	ldr	r3, [r2, #0]
    2f52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    2f56:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    2f58:	2000      	movs	r0, #0
    2f5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2f5e:	f206 56dc 	addw	r6, r6, #1500	; 0x5dc
	for (i = 0; i < CONF_GMAC_TXDESCR_NUM; i++) {
    2f62:	45b1      	cmp	r9, r6
    2f64:	d0f0      	beq.n	2f48 <_mac_async_write+0xf0>
		blen = min(len, CONF_GMAC_TXBUF_SIZE);
    2f66:	f240 53dc 	movw	r3, #1500	; 0x5dc
    2f6a:	462c      	mov	r4, r5
    2f6c:	429d      	cmp	r5, r3
    2f6e:	bf28      	it	cs
    2f70:	461c      	movcs	r4, r3
		memcpy(_txbuf[_txbuf_index], buf + (i * CONF_GMAC_TXBUF_SIZE), blen);
    2f72:	f8d8 0004 	ldr.w	r0, [r8, #4]
    2f76:	4622      	mov	r2, r4
    2f78:	4631      	mov	r1, r6
    2f7a:	fb03 b000 	mla	r0, r3, r0, fp
    2f7e:	47b8      	blx	r7
		if (len > 0) {
    2f80:	1b2d      	subs	r5, r5, r4
    2f82:	d0c6      	beq.n	2f12 <_mac_async_write+0xba>
			_txbuf_descrs[_txbuf_index].status.val = blen;
    2f84:	f8d8 3004 	ldr.w	r3, [r8, #4]
    2f88:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
    2f8c:	60dc      	str	r4, [r3, #12]
		_txbuf_index++;
    2f8e:	f8d8 3004 	ldr.w	r3, [r8, #4]
    2f92:	3301      	adds	r3, #1
    2f94:	f8c8 3004 	str.w	r3, [r8, #4]
		if (_txbuf_index == CONF_GMAC_TXDESCR_NUM) {
    2f98:	f8d8 3004 	ldr.w	r3, [r8, #4]
    2f9c:	2b10      	cmp	r3, #16
    2f9e:	d1de      	bne.n	2f5e <_mac_async_write+0x106>
			_txbuf_index                                            = 0;
    2fa0:	2300      	movs	r3, #0
    2fa2:	f8c8 3004 	str.w	r3, [r8, #4]
			_txbuf_descrs[CONF_GMAC_TXDESCR_NUM - 1].status.bm.wrap = 1;
    2fa6:	f898 3087 	ldrb.w	r3, [r8, #135]	; 0x87
    2faa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2fae:	f888 3087 	strb.w	r3, [r8, #135]	; 0x87
    2fb2:	e7d4      	b.n	2f5e <_mac_async_write+0x106>
		return ERR_NO_RESOURCE;
    2fb4:	f06f 001b 	mvn.w	r0, #27
    2fb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				return ERR_NO_RESOURCE;
    2fbc:	f06f 001b 	mvn.w	r0, #27
    2fc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2fc4:	20005e18 	.word	0x20005e18
    2fc8:	20000940 	.word	0x20000940
    2fcc:	0000da6b 	.word	0x0000da6b

00002fd0 <_mac_async_read>:
}

uint32_t _mac_async_read(struct _mac_async_device *const dev, uint8_t *buf, uint32_t len)
{
    2fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2fd4:	b083      	sub	sp, #12
    2fd6:	9101      	str	r1, [sp, #4]
    2fd8:	4691      	mov	r9, r2
	uint32_t i;
	uint32_t j;
	uint32_t pos;
	uint32_t n;
	uint32_t sof       = 0xFFFFFFFF; /* Start of Frame index */
    2fda:	f04f 37ff 	mov.w	r7, #4294967295
	uint32_t eof       = 0xFFFFFFFF; /* End of Frame index */
	uint32_t total_len = 0;          /* Total length of received package */

	(void)dev;
	for (i = 0; i < CONF_GMAC_RXDESCR_NUM; i++) {
    2fde:	2400      	movs	r4, #0
		pos = _rxbuf_index + i;
    2fe0:	4a45      	ldr	r2, [pc, #276]	; (30f8 <_mac_async_read+0x128>)
    2fe2:	e002      	b.n	2fea <_mac_async_read+0x1a>
	for (i = 0; i < CONF_GMAC_RXDESCR_NUM; i++) {
    2fe4:	3401      	adds	r4, #1
    2fe6:	2c10      	cmp	r4, #16
    2fe8:	d074      	beq.n	30d4 <_mac_async_read+0x104>
		pos = _rxbuf_index + i;
    2fea:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
    2fee:	4423      	add	r3, r4

		if (pos >= CONF_GMAC_RXDESCR_NUM) {
    2ff0:	2b0f      	cmp	r3, #15
			pos -= CONF_GMAC_RXDESCR_NUM;
    2ff2:	bf88      	it	hi
    2ff4:	3b10      	subhi	r3, #16
		}

		/* No more data for Ethernet package */
		if (!_rxbuf_descrs[pos].address.bm.ownership) {
    2ff6:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    2ffa:	f891 10b0 	ldrb.w	r1, [r1, #176]	; 0xb0
    2ffe:	f011 0f01 	tst.w	r1, #1
    3002:	d061      	beq.n	30c8 <_mac_async_read+0xf8>
			break;
		}

		if (_rxbuf_descrs[pos].status.bm.sof) {
    3004:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    3008:	f891 10b5 	ldrb.w	r1, [r1, #181]	; 0xb5
    300c:	f3c1 1180 	ubfx	r1, r1, #6, #1
    3010:	2900      	cmp	r1, #0
    3012:	bf18      	it	ne
    3014:	4627      	movne	r7, r4
			sof = i;
		}

		if ((_rxbuf_descrs[pos].status.bm.eof) && (sof != 0xFFFFFFFF)) {
    3016:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    301a:	f891 10b5 	ldrb.w	r1, [r1, #181]	; 0xb5
    301e:	09c9      	lsrs	r1, r1, #7
    3020:	d0e0      	beq.n	2fe4 <_mac_async_read+0x14>
    3022:	f1b7 3fff 	cmp.w	r7, #4294967295
    3026:	d0dd      	beq.n	2fe4 <_mac_async_read+0x14>
			/* eof now indicate the number of bufs the frame used */
			eof = i;
			n   = _rxbuf_descrs[pos].status.bm.len;
    3028:	4a33      	ldr	r2, [pc, #204]	; (30f8 <_mac_async_read+0x128>)
    302a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    302e:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
    3032:	f3c3 030c 	ubfx	r3, r3, #0, #13
			len = min(n, len);
    3036:	4599      	cmp	r9, r3
    3038:	bf28      	it	cs
    303a:	4699      	movcs	r9, r3
			/* Break process since the last data has been found */
			break;
		}
	}

	if (eof != 0xFFFFFFFF) {
    303c:	f1b4 3fff 	cmp.w	r4, #4294967295
		j = eof + 1;
    3040:	bf18      	it	ne
    3042:	f104 0801 	addne.w	r8, r4, #1
	if (eof != 0xFFFFFFFF) {
    3046:	d14b      	bne.n	30e0 <_mac_async_read+0x110>
    3048:	46b8      	mov	r8, r7
    304a:	e049      	b.n	30e0 <_mac_async_read+0x110>
			buf += n;
			total_len += n;
			len -= n;
		}

		_rxbuf_descrs[_rxbuf_index].address.bm.ownership = 0;
    304c:	f8d5 3130 	ldr.w	r3, [r5, #304]	; 0x130
    3050:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    3054:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
    3058:	f36f 0200 	bfc	r2, #0, #1
    305c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		_rxbuf_index++;
    3060:	f8d5 3130 	ldr.w	r3, [r5, #304]	; 0x130
    3064:	3301      	adds	r3, #1
    3066:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130

		if (_rxbuf_index == CONF_GMAC_RXDESCR_NUM) {
    306a:	f8d5 3130 	ldr.w	r3, [r5, #304]	; 0x130
    306e:	2b10      	cmp	r3, #16
			_rxbuf_index = 0;
    3070:	bf04      	itt	eq
    3072:	2300      	moveq	r3, #0
    3074:	f8c5 3130 	streq.w	r3, [r5, #304]	; 0x130
	for (i = 0; i < j; i++) {
    3078:	3601      	adds	r6, #1
    307a:	4546      	cmp	r6, r8
    307c:	d020      	beq.n	30c0 <_mac_async_read+0xf0>
		if (eof != 0xFFFFFFFF && i >= sof && i <= eof && len > 0) {
    307e:	f1b4 3fff 	cmp.w	r4, #4294967295
    3082:	d0e3      	beq.n	304c <_mac_async_read+0x7c>
    3084:	42be      	cmp	r6, r7
    3086:	d3e1      	bcc.n	304c <_mac_async_read+0x7c>
    3088:	42a6      	cmp	r6, r4
    308a:	d8df      	bhi.n	304c <_mac_async_read+0x7c>
    308c:	f1b9 0f00 	cmp.w	r9, #0
    3090:	d0dc      	beq.n	304c <_mac_async_read+0x7c>
			n = min(len, CONF_GMAC_RXBUF_SIZE);
    3092:	46cb      	mov	fp, r9
    3094:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
    3098:	bf28      	it	cs
    309a:	f04f 0b80 	movcs.w	fp, #128	; 0x80
			memcpy(buf, _rxbuf[_rxbuf_index], n);
    309e:	f8d5 1130 	ldr.w	r1, [r5, #304]	; 0x130
    30a2:	465a      	mov	r2, fp
    30a4:	4b15      	ldr	r3, [pc, #84]	; (30fc <_mac_async_read+0x12c>)
    30a6:	eb03 11c1 	add.w	r1, r3, r1, lsl #7
    30aa:	9801      	ldr	r0, [sp, #4]
    30ac:	4b14      	ldr	r3, [pc, #80]	; (3100 <_mac_async_read+0x130>)
    30ae:	4798      	blx	r3
			buf += n;
    30b0:	9b01      	ldr	r3, [sp, #4]
    30b2:	445b      	add	r3, fp
    30b4:	9301      	str	r3, [sp, #4]
			total_len += n;
    30b6:	44da      	add	sl, fp
			len -= n;
    30b8:	eba9 090b 	sub.w	r9, r9, fp
    30bc:	e7c6      	b.n	304c <_mac_async_read+0x7c>
	uint32_t total_len = 0;          /* Total length of received package */
    30be:	46c2      	mov	sl, r8
		}
	}

	return total_len;
}
    30c0:	4650      	mov	r0, sl
    30c2:	b003      	add	sp, #12
    30c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (sof != 0xFFFFFFFF) {
    30c8:	f1b7 3fff 	cmp.w	r7, #4294967295
    30cc:	d105      	bne.n	30da <_mac_async_read+0x10a>
    30ce:	46a0      	mov	r8, r4
    30d0:	463c      	mov	r4, r7
    30d2:	e005      	b.n	30e0 <_mac_async_read+0x110>
    30d4:	f1b7 3fff 	cmp.w	r7, #4294967295
    30d8:	d00a      	beq.n	30f0 <_mac_async_read+0x120>
		if (_rxbuf_descrs[pos].status.bm.sof) {
    30da:	46b8      	mov	r8, r7
    30dc:	f04f 34ff 	mov.w	r4, #4294967295
	for (i = 0; i < j; i++) {
    30e0:	f1b8 0f00 	cmp.w	r8, #0
    30e4:	d0eb      	beq.n	30be <_mac_async_read+0xee>
	} else if (sof != 0xFFFFFFFF) {
    30e6:	f04f 0a00 	mov.w	sl, #0
    30ea:	4656      	mov	r6, sl
			memcpy(buf, _rxbuf[_rxbuf_index], n);
    30ec:	4d02      	ldr	r5, [pc, #8]	; (30f8 <_mac_async_read+0x128>)
    30ee:	e7c6      	b.n	307e <_mac_async_read+0xae>
	for (i = 0; i < CONF_GMAC_RXDESCR_NUM; i++) {
    30f0:	46a0      	mov	r8, r4
	} else if (sof != 0xFFFFFFFF) {
    30f2:	463c      	mov	r4, r7
    30f4:	e7f7      	b.n	30e6 <_mac_async_read+0x116>
    30f6:	bf00      	nop
    30f8:	20006f10 	.word	0x20006f10
    30fc:	200067c0 	.word	0x200067c0
    3100:	0000da6b 	.word	0x0000da6b

00003104 <_mac_async_read_len>:

uint32_t _mac_async_read_len(struct _mac_async_device *const dev)
{
    3104:	b470      	push	{r4, r5, r6}
	uint32_t i;
	uint32_t pos;
	bool     sof       = false; /* Start of Frame */
	uint32_t total_len = 0;     /* Total length of received package */
    3106:	2000      	movs	r0, #0
	bool     sof       = false; /* Start of Frame */
    3108:	4606      	mov	r6, r0

	(void)dev;

	for (i = 0; i < CONF_GMAC_RXDESCR_NUM; i++) {
    310a:	4601      	mov	r1, r0
		pos = _rxbuf_index + i;
    310c:	4a16      	ldr	r2, [pc, #88]	; (3168 <_mac_async_read_len+0x64>)

		if (_rxbuf_descrs[pos].status.bm.sof) {
			sof = true;
		}
		if (sof == true) {
			total_len += _rxbuf_descrs[pos].status.bm.len;
    310e:	2501      	movs	r5, #1
    3110:	e010      	b.n	3134 <_mac_async_read_len+0x30>
    3112:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
    3116:	f8b4 40b4 	ldrh.w	r4, [r4, #180]	; 0xb4
    311a:	f3c4 040c 	ubfx	r4, r4, #0, #13
    311e:	4420      	add	r0, r4
    3120:	462e      	mov	r6, r5
		}

		if (_rxbuf_descrs[pos].status.bm.eof) {
    3122:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    3126:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
    312a:	09db      	lsrs	r3, r3, #7
    312c:	d119      	bne.n	3162 <_mac_async_read_len+0x5e>
	for (i = 0; i < CONF_GMAC_RXDESCR_NUM; i++) {
    312e:	3101      	adds	r1, #1
    3130:	2910      	cmp	r1, #16
    3132:	d016      	beq.n	3162 <_mac_async_read_len+0x5e>
		pos = _rxbuf_index + i;
    3134:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
    3138:	440b      	add	r3, r1
		if (pos >= CONF_GMAC_RXDESCR_NUM) {
    313a:	2b0f      	cmp	r3, #15
			pos -= CONF_GMAC_RXDESCR_NUM;
    313c:	bf88      	it	hi
    313e:	3b10      	subhi	r3, #16
		if (!(_rxbuf_descrs[pos].address.bm.ownership)) {
    3140:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
    3144:	f894 40b0 	ldrb.w	r4, [r4, #176]	; 0xb0
    3148:	f014 0f01 	tst.w	r4, #1
    314c:	d009      	beq.n	3162 <_mac_async_read_len+0x5e>
		if (_rxbuf_descrs[pos].status.bm.sof) {
    314e:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
    3152:	f894 40b5 	ldrb.w	r4, [r4, #181]	; 0xb5
    3156:	f014 0f40 	tst.w	r4, #64	; 0x40
    315a:	d1da      	bne.n	3112 <_mac_async_read_len+0xe>
		if (sof == true) {
    315c:	2e00      	cmp	r6, #0
    315e:	d0e0      	beq.n	3122 <_mac_async_read_len+0x1e>
    3160:	e7d7      	b.n	3112 <_mac_async_read_len+0xe>
			break;
		}
	}

	return total_len;
}
    3162:	bc70      	pop	{r4, r5, r6}
    3164:	4770      	bx	lr
    3166:	bf00      	nop
    3168:	20006f10 	.word	0x20006f10

0000316c <_mac_async_set_filter_ex>:
	hri_gmac_write_TIDM_reg(dev->hw, index, GMAC_TIDM_TID(*((uint16_t *)(filter->tid)) | filter->tid_enable << 31));
	return ERR_NONE;
}

int32_t _mac_async_set_filter_ex(struct _mac_async_device *const dev, uint8_t mac[6])
{
    316c:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t j;
	uint8_t m;
	uint8_t n;
	uint8_t k = 0;
    316e:	2400      	movs	r4, #0

	/* Apply the hash function */
	for (j = 0; j < 48; j += 6) {
    3170:	4623      	mov	r3, r4
    3172:	e00d      	b.n	3190 <_mac_async_set_filter_ex+0x24>

		/* Update hash value */
		if (!m) {
			k ^= mac[n];
		} else {
			k ^= (mac[n] >> m) | (mac[n + 1] << (8 - m));
    3174:	194a      	adds	r2, r1, r5
    3176:	7852      	ldrb	r2, [r2, #1]
    3178:	f1c6 0708 	rsb	r7, r6, #8
    317c:	40ba      	lsls	r2, r7
    317e:	5d4d      	ldrb	r5, [r1, r5]
    3180:	4135      	asrs	r5, r6
    3182:	432a      	orrs	r2, r5
    3184:	4062      	eors	r2, r4
    3186:	b2d4      	uxtb	r4, r2
	for (j = 0; j < 48; j += 6) {
    3188:	3306      	adds	r3, #6
    318a:	b2db      	uxtb	r3, r3
    318c:	2b30      	cmp	r3, #48	; 0x30
    318e:	d006      	beq.n	319e <_mac_async_set_filter_ex+0x32>
		n = j / 8;
    3190:	08dd      	lsrs	r5, r3, #3
		if (!m) {
    3192:	f013 0607 	ands.w	r6, r3, #7
    3196:	d1ed      	bne.n	3174 <_mac_async_set_filter_ex+0x8>
			k ^= mac[n];
    3198:	5d4a      	ldrb	r2, [r1, r5]
    319a:	4054      	eors	r4, r2
    319c:	e7f4      	b.n	3188 <_mac_async_set_filter_ex+0x1c>
		}
	}

	/* The hash value is reduced to a 6-bit index */
	k &= 0x3F;
    319e:	f004 033f 	and.w	r3, r4, #63	; 0x3f

	if (k < 32) {
    31a2:	2b1f      	cmp	r3, #31
    31a4:	d90d      	bls.n	31c2 <_mac_async_set_filter_ex+0x56>
		hri_gmac_set_HRB_reg(dev->hw, 1 << k);
	} else {
		hri_gmac_set_HRT_reg(dev->hw, 1 << (k % 32));
    31a6:	6803      	ldr	r3, [r0, #0]
	((Gmac *)hw)->HRT.reg |= mask;
    31a8:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
    31ac:	f004 021f 	and.w	r2, r4, #31
    31b0:	2401      	movs	r4, #1
    31b2:	fa04 f202 	lsl.w	r2, r4, r2
    31b6:	430a      	orrs	r2, r1
    31b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	}

	return ERR_NONE;
}
    31bc:	2000      	movs	r0, #0
    31be:	bcf0      	pop	{r4, r5, r6, r7}
    31c0:	4770      	bx	lr
		hri_gmac_set_HRB_reg(dev->hw, 1 << k);
    31c2:	6801      	ldr	r1, [r0, #0]
	((Gmac *)hw)->HRB.reg |= mask;
    31c4:	f8d1 0080 	ldr.w	r0, [r1, #128]	; 0x80
    31c8:	2201      	movs	r2, #1
    31ca:	fa02 f303 	lsl.w	r3, r2, r3
    31ce:	4303      	orrs	r3, r0
    31d0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
    31d4:	e7f2      	b.n	31bc <_mac_async_set_filter_ex+0x50>

000031d6 <_sha_sync_init>:
struct icm_descriptor icm_descriptor;
COMPILER_PACK_RESET()

int32_t _sha_sync_init(struct _sha_sync_device *const dev, void *const hw)
{
	dev->hw = hw;
    31d6:	6001      	str	r1, [r0, #0]

	return ERR_NONE;
}
    31d8:	2000      	movs	r0, #0
    31da:	4770      	bx	lr

000031dc <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    31dc:	2201      	movs	r2, #1
    31de:	4b01      	ldr	r3, [pc, #4]	; (31e4 <_mclk_init+0x8>)
    31e0:	715a      	strb	r2, [r3, #5]
    31e2:	4770      	bx	lr
    31e4:	40000800 	.word	0x40000800

000031e8 <_flash_program>:
 * \param[in]  buffer        Pointer to buffer where the data to
 *                           write is stored
 * \param[in] size           The size of data to write to a page
 */
static void _flash_program(void *const hw, const uint32_t dst_addr, const uint8_t *buffer, const uint16_t size)
{
    31e8:	b470      	push	{r4, r5, r6}
	return ((Nvmctrl *)hw)->PARAM.reg;
}

static inline bool hri_nvmctrl_get_STATUS_READY_bit(const void *const hw)
{
	return (((Nvmctrl *)hw)->STATUS.reg & NVMCTRL_STATUS_READY) >> NVMCTRL_STATUS_READY_Pos;
    31ea:	8a44      	ldrh	r4, [r0, #18]
	uint32_t *ptr_read    = (uint32_t *)buffer;
	uint32_t  nvm_address = dst_addr / 4;
	uint16_t  i;

	while (!hri_nvmctrl_get_STATUS_READY_bit(hw)) {
    31ec:	f014 0f01 	tst.w	r4, #1
    31f0:	d0fb      	beq.n	31ea <_flash_program+0x2>
	((Nvmctrl *)hw)->CTRLB.reg = data;
    31f2:	f24a 5415 	movw	r4, #42261	; 0xa515
    31f6:	8084      	strh	r4, [r0, #4]
	return (((Nvmctrl *)hw)->STATUS.reg & NVMCTRL_STATUS_READY) >> NVMCTRL_STATUS_READY_Pos;
    31f8:	8a44      	ldrh	r4, [r0, #18]
		/* Wait until this module isn't busy */
	}

	hri_nvmctrl_write_CTRLB_reg(hw, NVMCTRL_CTRLB_CMD_PBC | NVMCTRL_CTRLB_CMDEX_KEY);

	while (!hri_nvmctrl_get_STATUS_READY_bit(hw)) {
    31fa:	f014 0f01 	tst.w	r4, #1
    31fe:	d0fb      	beq.n	31f8 <_flash_program+0x10>
		/* Wait until this module isn't busy */
	}

	/* Writes to the page buffer must be 32 bits, perform manual copy
	 * to ensure alignment */
	for (i = 0; i < size; i += 4) {
    3200:	b153      	cbz	r3, 3218 <_flash_program+0x30>
    3202:	f021 0603 	bic.w	r6, r1, #3
    3206:	1ab6      	subs	r6, r6, r2
    3208:	4614      	mov	r4, r2
		NVM_MEMORY[nvm_address++] = *ptr_read;
    320a:	6825      	ldr	r5, [r4, #0]
    320c:	51a5      	str	r5, [r4, r6]
		ptr_read++;
    320e:	3404      	adds	r4, #4
	for (i = 0; i < size; i += 4) {
    3210:	1aa5      	subs	r5, r4, r2
    3212:	b2ad      	uxth	r5, r5
    3214:	42ab      	cmp	r3, r5
    3216:	d8f8      	bhi.n	320a <_flash_program+0x22>
    3218:	8a43      	ldrh	r3, [r0, #18]
	}

	while (!hri_nvmctrl_get_STATUS_READY_bit(hw)) {
    321a:	f013 0f01 	tst.w	r3, #1
    321e:	d0fb      	beq.n	3218 <_flash_program+0x30>
	((Nvmctrl *)hw)->ADDR.reg = data;
    3220:	6141      	str	r1, [r0, #20]
	((Nvmctrl *)hw)->CTRLB.reg = data;
    3222:	f24a 5303 	movw	r3, #42243	; 0xa503
    3226:	8083      	strh	r3, [r0, #4]
		/* Wait until this module isn't busy */
	}

	hri_nvmctrl_write_ADDR_reg(hw, dst_addr);
	hri_nvmctrl_write_CTRLB_reg(hw, NVMCTRL_CTRLB_CMD_WP | NVMCTRL_CTRLB_CMDEX_KEY);
}
    3228:	bc70      	pop	{r4, r5, r6}
    322a:	4770      	bx	lr

0000322c <_nvm_interrupt_handler>:
 * \internal NVM interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _nvm_interrupt_handler(struct _flash_device *device)
{
    322c:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    322e:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
    3230:	8a1a      	ldrh	r2, [r3, #16]

	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
    3232:	f012 0f01 	tst.w	r2, #1
    3236:	d005      	beq.n	3244 <_nvm_interrupt_handler+0x18>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
    3238:	2201      	movs	r2, #1
    323a:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_DONE_bit(hw);

		if (NULL != device->flash_cb.ready_cb) {
    323c:	6803      	ldr	r3, [r0, #0]
    323e:	b153      	cbz	r3, 3256 <_nvm_interrupt_handler+0x2a>
			device->flash_cb.ready_cb(device);
    3240:	4798      	blx	r3
    3242:	bd08      	pop	{r3, pc}
	return ((Nvmctrl *)hw)->INTFLAG.reg;
    3244:	8a1a      	ldrh	r2, [r3, #16]
    3246:	b292      	uxth	r2, r2
		}
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
    3248:	b12a      	cbz	r2, 3256 <_nvm_interrupt_handler+0x2a>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    324a:	f240 225e 	movw	r2, #606	; 0x25e
    324e:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_reg(hw, NVMCTRL_INTFLAG_ERR);

		if (NULL != device->flash_cb.error_cb) {
    3250:	6843      	ldr	r3, [r0, #4]
    3252:	b103      	cbz	r3, 3256 <_nvm_interrupt_handler+0x2a>
			device->flash_cb.error_cb(device);
    3254:	4798      	blx	r3
    3256:	bd08      	pop	{r3, pc}

00003258 <_flash_init>:
{
    3258:	b538      	push	{r3, r4, r5, lr}
    325a:	460c      	mov	r4, r1
	ASSERT(device && (hw == NVMCTRL));
    325c:	4605      	mov	r5, r0
    325e:	b360      	cbz	r0, 32ba <_flash_init+0x62>
    3260:	4817      	ldr	r0, [pc, #92]	; (32c0 <_flash_init+0x68>)
    3262:	4281      	cmp	r1, r0
    3264:	bf14      	ite	ne
    3266:	2000      	movne	r0, #0
    3268:	2001      	moveq	r0, #1
    326a:	224b      	movs	r2, #75	; 0x4b
    326c:	4915      	ldr	r1, [pc, #84]	; (32c4 <_flash_init+0x6c>)
    326e:	4b16      	ldr	r3, [pc, #88]	; (32c8 <_flash_init+0x70>)
    3270:	4798      	blx	r3
	device->hw = hw;
    3272:	612c      	str	r4, [r5, #16]
	return ((Nvmctrl *)hw)->CTRLA.reg;
    3274:	8823      	ldrh	r3, [r4, #0]
	ctrla &= ~(NVMCTRL_CTRLA_CACHEDIS0 | NVMCTRL_CTRLA_CACHEDIS1 | NVMCTRL_CTRLA_PRM_Msk);
    3276:	f3c3 030d 	ubfx	r3, r3, #0, #14
	hri_nvmctrl_write_CTRLA_reg(hw, ctrla);
    327a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
    327e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
	((Nvmctrl *)hw)->CTRLA.reg = data;
    3282:	8023      	strh	r3, [r4, #0]
	_nvm_dev = device;
    3284:	4b11      	ldr	r3, [pc, #68]	; (32cc <_flash_init+0x74>)
    3286:	601d      	str	r5, [r3, #0]
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3288:	4b11      	ldr	r3, [pc, #68]	; (32d0 <_flash_init+0x78>)
    328a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    328e:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
    3292:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3296:	f3bf 8f6f 	isb	sy
    329a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    329e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    32a2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    32a6:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    32aa:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    32ae:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    32b2:	6019      	str	r1, [r3, #0]
    32b4:	601a      	str	r2, [r3, #0]
}
    32b6:	2000      	movs	r0, #0
    32b8:	bd38      	pop	{r3, r4, r5, pc}
    32ba:	2000      	movs	r0, #0
    32bc:	e7d5      	b.n	326a <_flash_init+0x12>
    32be:	bf00      	nop
    32c0:	41004000 	.word	0x41004000
    32c4:	0000eedc 	.word	0x0000eedc
    32c8:	000026b1 	.word	0x000026b1
    32cc:	20007044 	.word	0x20007044
    32d0:	e000e100 	.word	0xe000e100

000032d4 <_flash_get_page_size>:
}
    32d4:	f44f 7000 	mov.w	r0, #512	; 0x200
    32d8:	4770      	bx	lr

000032da <_flash_get_total_pages>:
	return (uint32_t)hri_nvmctrl_read_PARAM_NVMP_bf(device->hw);
    32da:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->PARAM.reg & NVMCTRL_PARAM_NVMP_Msk) >> NVMCTRL_PARAM_NVMP_Pos;
    32dc:	6898      	ldr	r0, [r3, #8]
}
    32de:	b280      	uxth	r0, r0
    32e0:	4770      	bx	lr

000032e2 <_flash_read>:
{
    32e2:	b410      	push	{r4}
	while (!hri_nvmctrl_get_STATUS_READY_bit(device->hw)) {
    32e4:	6904      	ldr	r4, [r0, #16]
	return (((Nvmctrl *)hw)->STATUS.reg & NVMCTRL_STATUS_READY) >> NVMCTRL_STATUS_READY_Pos;
    32e6:	8a60      	ldrh	r0, [r4, #18]
    32e8:	f010 0f01 	tst.w	r0, #1
    32ec:	d0fb      	beq.n	32e6 <_flash_read+0x4>
	for (i = 0; i < length; i++) {
    32ee:	b143      	cbz	r3, 3302 <_flash_read+0x20>
    32f0:	3901      	subs	r1, #1
    32f2:	4610      	mov	r0, r2
    32f4:	4413      	add	r3, r2
		buffer[i] = nvm_addr[src_addr + i];
    32f6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    32fa:	f800 4b01 	strb.w	r4, [r0], #1
	for (i = 0; i < length; i++) {
    32fe:	4298      	cmp	r0, r3
    3300:	d1f9      	bne.n	32f6 <_flash_read+0x14>
}
    3302:	bc10      	pop	{r4}
    3304:	4770      	bx	lr
	...

00003308 <_flash_write>:
{
    3308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    330c:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
    3310:	b085      	sub	sp, #20
    3312:	4682      	mov	sl, r0
    3314:	9203      	str	r2, [sp, #12]
    3316:	4698      	mov	r8, r3
	uint32_t wr_start_addr = dst_addr;
    3318:	460e      	mov	r6, r1
			_flash_program(device->hw, block_start_addr + i * NVMCTRL_PAGE_SIZE, tmp_buffer[i], NVMCTRL_PAGE_SIZE);
    331a:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 33f4 <_flash_write+0xec>
    331e:	e034      	b.n	338a <_flash_write+0x82>
			wr_start_addr++;
    3320:	3601      	adds	r6, #1
			length--;
    3322:	3801      	subs	r0, #1
		while ((wr_start_addr <= block_end_addr) && (length > 0)) {
    3324:	45b0      	cmp	r8, r6
    3326:	d312      	bcc.n	334e <_flash_write+0x46>
    3328:	b170      	cbz	r0, 3348 <_flash_write+0x40>
			tmp_buffer[j][k] = *buffer;
    332a:	f812 cb01 	ldrb.w	ip, [r2], #1
    332e:	f10d 0e10 	add.w	lr, sp, #16
    3332:	eb0e 2e41 	add.w	lr, lr, r1, lsl #9
    3336:	f80e c003 	strb.w	ip, [lr, r3]
			k                = (k + 1) % NVMCTRL_PAGE_SIZE;
    333a:	3301      	adds	r3, #1
    333c:	f3c3 0308 	ubfx	r3, r3, #0, #9
			if (0 == k) {
    3340:	2b00      	cmp	r3, #0
    3342:	d1ed      	bne.n	3320 <_flash_write+0x18>
				j++;
    3344:	3101      	adds	r1, #1
    3346:	e7eb      	b.n	3320 <_flash_write+0x18>
    3348:	9203      	str	r2, [sp, #12]
    334a:	4680      	mov	r8, r0
    334c:	e001      	b.n	3352 <_flash_write+0x4a>
    334e:	9203      	str	r2, [sp, #12]
    3350:	4680      	mov	r8, r0
		_flash_erase_block(device->hw, block_start_addr);
    3352:	f8da 2010 	ldr.w	r2, [sl, #16]
    3356:	8a53      	ldrh	r3, [r2, #18]
	while (!hri_nvmctrl_get_STATUS_READY_bit(hw)) {
    3358:	f013 0f01 	tst.w	r3, #1
    335c:	d0fb      	beq.n	3356 <_flash_write+0x4e>
	((Nvmctrl *)hw)->ADDR.reg = data;
    335e:	9b01      	ldr	r3, [sp, #4]
    3360:	6153      	str	r3, [r2, #20]
	((Nvmctrl *)hw)->CTRLB.reg = data;
    3362:	f24a 5301 	movw	r3, #42241	; 0xa501
    3366:	8093      	strh	r3, [r2, #4]
			_flash_program(device->hw, block_start_addr + i * NVMCTRL_PAGE_SIZE, tmp_buffer[i], NVMCTRL_PAGE_SIZE);
    3368:	f44f 7300 	mov.w	r3, #512	; 0x200
    336c:	462a      	mov	r2, r5
    336e:	19e9      	adds	r1, r5, r7
    3370:	f8da 0010 	ldr.w	r0, [sl, #16]
    3374:	47d8      	blx	fp
    3376:	f505 7500 	add.w	r5, r5, #512	; 0x200
		for (i = 0; i < NVMCTRL_BLOCK_PAGES; i++) {
    337a:	42a5      	cmp	r5, r4
    337c:	d1f4      	bne.n	3368 <_flash_write+0x60>
	} while (block_end_addr < (wr_start_addr + length - 1));
    337e:	eb08 0306 	add.w	r3, r8, r6
    3382:	3b01      	subs	r3, #1
    3384:	9a00      	ldr	r2, [sp, #0]
    3386:	429a      	cmp	r2, r3
    3388:	d22c      	bcs.n	33e4 <_flash_write+0xdc>
		block_start_addr = wr_start_addr & ~(NVMCTRL_BLOCK_SIZE - 1);
    338a:	f426 53ff 	bic.w	r3, r6, #8160	; 0x1fe0
    338e:	f023 031f 	bic.w	r3, r3, #31
    3392:	9301      	str	r3, [sp, #4]
		block_end_addr   = block_start_addr + NVMCTRL_BLOCK_SIZE - 1;
    3394:	f503 52ff 	add.w	r2, r3, #8160	; 0x1fe0
    3398:	321f      	adds	r2, #31
    339a:	9200      	str	r2, [sp, #0]
    339c:	ad04      	add	r5, sp, #16
    339e:	f50d 5900 	add.w	r9, sp, #8192	; 0x2000
    33a2:	f109 0910 	add.w	r9, r9, #16
    33a6:	462c      	mov	r4, r5
    33a8:	1b5f      	subs	r7, r3, r5
    33aa:	9502      	str	r5, [sp, #8]
			_flash_read(device, block_start_addr + i * NVMCTRL_PAGE_SIZE, tmp_buffer[i], NVMCTRL_PAGE_SIZE);
    33ac:	f44f 7300 	mov.w	r3, #512	; 0x200
    33b0:	4622      	mov	r2, r4
    33b2:	19e1      	adds	r1, r4, r7
    33b4:	4650      	mov	r0, sl
    33b6:	4d0e      	ldr	r5, [pc, #56]	; (33f0 <_flash_write+0xe8>)
    33b8:	47a8      	blx	r5
    33ba:	f504 7400 	add.w	r4, r4, #512	; 0x200
		for (i = 0; i < NVMCTRL_BLOCK_PAGES; i++) {
    33be:	454c      	cmp	r4, r9
    33c0:	d1f4      	bne.n	33ac <_flash_write+0xa4>
    33c2:	9d02      	ldr	r5, [sp, #8]
		j = (wr_start_addr - block_start_addr) / NVMCTRL_PAGE_SIZE;
    33c4:	9b01      	ldr	r3, [sp, #4]
    33c6:	1af3      	subs	r3, r6, r3
    33c8:	0a59      	lsrs	r1, r3, #9
    33ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
		while ((wr_start_addr <= block_end_addr) && (length > 0)) {
    33ce:	9a00      	ldr	r2, [sp, #0]
    33d0:	4296      	cmp	r6, r2
    33d2:	d8be      	bhi.n	3352 <_flash_write+0x4a>
    33d4:	f1b8 0f00 	cmp.w	r8, #0
    33d8:	d0bb      	beq.n	3352 <_flash_write+0x4a>
    33da:	9a03      	ldr	r2, [sp, #12]
			tmp_buffer[j][k] = *buffer;
    33dc:	4640      	mov	r0, r8
    33de:	f8dd 8000 	ldr.w	r8, [sp]
    33e2:	e7a2      	b.n	332a <_flash_write+0x22>
}
    33e4:	f50d 5d00 	add.w	sp, sp, #8192	; 0x2000
    33e8:	b005      	add	sp, #20
    33ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    33ee:	bf00      	nop
    33f0:	000032e3 	.word	0x000032e3
    33f4:	000031e9 	.word	0x000031e9

000033f8 <_flash_append>:
{
    33f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    33fc:	4680      	mov	r8, r0
    33fe:	4691      	mov	r9, r2
    3400:	461f      	mov	r7, r3
	uint32_t page_start_addr = dst_addr & ~(NVMCTRL_PAGE_SIZE - 1);
    3402:	f421 76ff 	bic.w	r6, r1, #510	; 0x1fe
    3406:	f026 0601 	bic.w	r6, r6, #1
	if (dst_addr != page_start_addr) {
    340a:	42b1      	cmp	r1, r6
    340c:	d023      	beq.n	3456 <_flash_append+0x5e>
		size = min(length, NVMCTRL_PAGE_SIZE - (dst_addr - page_start_addr));
    340e:	1a74      	subs	r4, r6, r1
    3410:	f504 7400 	add.w	r4, r4, #512	; 0x200
    3414:	429c      	cmp	r4, r3
    3416:	bf28      	it	cs
    3418:	461c      	movcs	r4, r3
		_flash_program(device->hw, dst_addr, buffer, size);
    341a:	b2a3      	uxth	r3, r4
    341c:	6900      	ldr	r0, [r0, #16]
    341e:	4d0f      	ldr	r5, [pc, #60]	; (345c <_flash_append+0x64>)
    3420:	47a8      	blx	r5
		page_start_addr += NVMCTRL_PAGE_SIZE;
    3422:	f506 7600 	add.w	r6, r6, #512	; 0x200
	while (offset < length) {
    3426:	42a7      	cmp	r7, r4
    3428:	d913      	bls.n	3452 <_flash_append+0x5a>
		_flash_program(device->hw, page_start_addr, buffer + offset, size);
    342a:	f8df a030 	ldr.w	sl, [pc, #48]	; 345c <_flash_append+0x64>
		size = min(length - offset, NVMCTRL_PAGE_SIZE);
    342e:	1b3d      	subs	r5, r7, r4
    3430:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
    3434:	bf28      	it	cs
    3436:	f44f 7500 	movcs.w	r5, #512	; 0x200
		_flash_program(device->hw, page_start_addr, buffer + offset, size);
    343a:	b2ab      	uxth	r3, r5
    343c:	eb09 0204 	add.w	r2, r9, r4
    3440:	4631      	mov	r1, r6
    3442:	f8d8 0010 	ldr.w	r0, [r8, #16]
    3446:	47d0      	blx	sl
		page_start_addr += NVMCTRL_PAGE_SIZE;
    3448:	f506 7600 	add.w	r6, r6, #512	; 0x200
		offset += size;
    344c:	442c      	add	r4, r5
	while (offset < length) {
    344e:	42a7      	cmp	r7, r4
    3450:	d8ed      	bhi.n	342e <_flash_append+0x36>
    3452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32_t offset = 0;
    3456:	2400      	movs	r4, #0
    3458:	e7e5      	b.n	3426 <_flash_append+0x2e>
    345a:	bf00      	nop
    345c:	000031e9 	.word	0x000031e9

00003460 <_flash_erase>:
{
    3460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3464:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
    3468:	4607      	mov	r7, r0
    346a:	460c      	mov	r4, r1
    346c:	4616      	mov	r6, r2
	block_start_addr = dst_addr & ~(NVMCTRL_BLOCK_SIZE - 1);
    346e:	f421 55ff 	bic.w	r5, r1, #8160	; 0x1fe0
    3472:	f025 051f 	bic.w	r5, r5, #31
	memset(tmp_buffer, 0xFF, NVMCTRL_PAGE_SIZE);
    3476:	f44f 7200 	mov.w	r2, #512	; 0x200
    347a:	21ff      	movs	r1, #255	; 0xff
    347c:	4668      	mov	r0, sp
    347e:	4b27      	ldr	r3, [pc, #156]	; (351c <_flash_erase+0xbc>)
    3480:	4798      	blx	r3
	if (dst_addr != block_start_addr) {
    3482:	42ac      	cmp	r4, r5
    3484:	d043      	beq.n	350e <_flash_erase+0xae>
		block_start_addr += NVMCTRL_BLOCK_SIZE;
    3486:	f505 5500 	add.w	r5, r5, #8192	; 0x2000
    348a:	f504 5af0 	add.w	sl, r4, #7680	; 0x1e00
			_flash_write(device, dst_addr, tmp_buffer, NVMCTRL_PAGE_SIZE);
    348e:	f44f 7900 	mov.w	r9, #512	; 0x200
    3492:	f8df 808c 	ldr.w	r8, [pc, #140]	; 3520 <_flash_erase+0xc0>
    3496:	464b      	mov	r3, r9
    3498:	466a      	mov	r2, sp
    349a:	4621      	mov	r1, r4
    349c:	4638      	mov	r0, r7
    349e:	47c0      	blx	r8
			if (--page_nums == 0) {
    34a0:	3e01      	subs	r6, #1
    34a2:	d030      	beq.n	3506 <_flash_erase+0xa6>
			dst_addr += NVMCTRL_PAGE_SIZE;
    34a4:	f504 7400 	add.w	r4, r4, #512	; 0x200
			if (dst_addr == block_start_addr) {
    34a8:	42a5      	cmp	r5, r4
    34aa:	d001      	beq.n	34b0 <_flash_erase+0x50>
		for (i = 0; i < NVMCTRL_BLOCK_PAGES - 1; i++) {
    34ac:	4554      	cmp	r4, sl
    34ae:	d1f2      	bne.n	3496 <_flash_erase+0x36>
	while (page_nums >= NVMCTRL_BLOCK_PAGES) {
    34b0:	2e0f      	cmp	r6, #15
    34b2:	d919      	bls.n	34e8 <_flash_erase+0x88>
	block_start_addr = dst_addr & ~(NVMCTRL_BLOCK_SIZE - 1);
    34b4:	4628      	mov	r0, r5
    34b6:	4631      	mov	r1, r6
    34b8:	f24a 5401 	movw	r4, #42241	; 0xa501
		_flash_erase_block(device->hw, block_start_addr);
    34bc:	693a      	ldr	r2, [r7, #16]
	return (((Nvmctrl *)hw)->STATUS.reg & NVMCTRL_STATUS_READY) >> NVMCTRL_STATUS_READY_Pos;
    34be:	8a53      	ldrh	r3, [r2, #18]
	while (!hri_nvmctrl_get_STATUS_READY_bit(hw)) {
    34c0:	f013 0f01 	tst.w	r3, #1
    34c4:	d0fb      	beq.n	34be <_flash_erase+0x5e>
	((Nvmctrl *)hw)->ADDR.reg = data;
    34c6:	6150      	str	r0, [r2, #20]
	((Nvmctrl *)hw)->CTRLB.reg = data;
    34c8:	8094      	strh	r4, [r2, #4]
		block_start_addr += NVMCTRL_PAGE_SIZE;
    34ca:	f500 7000 	add.w	r0, r0, #512	; 0x200
		page_nums -= NVMCTRL_BLOCK_PAGES;
    34ce:	3910      	subs	r1, #16
	while (page_nums >= NVMCTRL_BLOCK_PAGES) {
    34d0:	290f      	cmp	r1, #15
    34d2:	d8f3      	bhi.n	34bc <_flash_erase+0x5c>
    34d4:	f505 7500 	add.w	r5, r5, #512	; 0x200
    34d8:	f1a6 0310 	sub.w	r3, r6, #16
    34dc:	091b      	lsrs	r3, r3, #4
    34de:	eb05 2543 	add.w	r5, r5, r3, lsl #9
    34e2:	f006 060f 	and.w	r6, r6, #15
	if (page_nums != 0) {
    34e6:	b176      	cbz	r6, 3506 <_flash_erase+0xa6>
	block_start_addr = dst_addr & ~(NVMCTRL_BLOCK_SIZE - 1);
    34e8:	2400      	movs	r4, #0
			_flash_write(device, block_start_addr, tmp_buffer, NVMCTRL_PAGE_SIZE);
    34ea:	f44f 7900 	mov.w	r9, #512	; 0x200
    34ee:	f8df 8030 	ldr.w	r8, [pc, #48]	; 3520 <_flash_erase+0xc0>
    34f2:	464b      	mov	r3, r9
    34f4:	466a      	mov	r2, sp
    34f6:	4629      	mov	r1, r5
    34f8:	4638      	mov	r0, r7
    34fa:	47c0      	blx	r8
			block_start_addr += NVMCTRL_PAGE_SIZE;
    34fc:	f505 7500 	add.w	r5, r5, #512	; 0x200
		for (i = 0; i < page_nums; i++) {
    3500:	3401      	adds	r4, #1
    3502:	42a6      	cmp	r6, r4
    3504:	d8f5      	bhi.n	34f2 <_flash_erase+0x92>
}
    3506:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    350a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	while (page_nums >= NVMCTRL_BLOCK_PAGES) {
    350e:	2e0f      	cmp	r6, #15
	block_start_addr = dst_addr & ~(NVMCTRL_BLOCK_SIZE - 1);
    3510:	bf98      	it	ls
    3512:	4625      	movls	r5, r4
	while (page_nums >= NVMCTRL_BLOCK_PAGES) {
    3514:	d9e7      	bls.n	34e6 <_flash_erase+0x86>
	block_start_addr = dst_addr & ~(NVMCTRL_BLOCK_SIZE - 1);
    3516:	4625      	mov	r5, r4
    3518:	e7cc      	b.n	34b4 <_flash_erase+0x54>
    351a:	bf00      	nop
    351c:	0000dab5 	.word	0x0000dab5
    3520:	00003309 	.word	0x00003309

00003524 <_flash_is_locked>:
	return !(hri_nvmctrl_get_RUNLOCK_reg(device->hw, 1 << region_id));
    3524:	6903      	ldr	r3, [r0, #16]

static inline hri_nvmctrl_runlock_reg_t hri_nvmctrl_get_RUNLOCK_reg(const void *const         hw,
                                                                    hri_nvmctrl_runlock_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Nvmctrl *)hw)->RUNLOCK.reg;
    3526:	699a      	ldr	r2, [r3, #24]
    3528:	f3c1 318f 	ubfx	r1, r1, #14, #16
    352c:	2301      	movs	r3, #1
    352e:	fa03 f101 	lsl.w	r1, r3, r1
    3532:	4211      	tst	r1, r2
}
    3534:	bf0c      	ite	eq
    3536:	4618      	moveq	r0, r3
    3538:	2000      	movne	r0, #0
    353a:	4770      	bx	lr

0000353c <NVMCTRL_0_Handler>:

/**
 * \internal NVM 0 interrupt handler
 */
void NVMCTRL_0_Handler(void)
{
    353c:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    353e:	4b02      	ldr	r3, [pc, #8]	; (3548 <NVMCTRL_0_Handler+0xc>)
    3540:	6818      	ldr	r0, [r3, #0]
    3542:	4b02      	ldr	r3, [pc, #8]	; (354c <NVMCTRL_0_Handler+0x10>)
    3544:	4798      	blx	r3
    3546:	bd08      	pop	{r3, pc}
    3548:	20007044 	.word	0x20007044
    354c:	0000322d 	.word	0x0000322d

00003550 <NVMCTRL_1_Handler>:

/**
 * \internal NVM 1 interrupt handler
 */
void NVMCTRL_1_Handler(void)
{
    3550:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    3552:	4b02      	ldr	r3, [pc, #8]	; (355c <NVMCTRL_1_Handler+0xc>)
    3554:	6818      	ldr	r0, [r3, #0]
    3556:	4b02      	ldr	r3, [pc, #8]	; (3560 <NVMCTRL_1_Handler+0x10>)
    3558:	4798      	blx	r3
    355a:	bd08      	pop	{r3, pc}
    355c:	20007044 	.word	0x20007044
    3560:	0000322d 	.word	0x0000322d

00003564 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    3564:	4b03      	ldr	r3, [pc, #12]	; (3574 <_osc32kctrl_init_sources+0x10>)
    3566:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    3568:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    356c:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    356e:	2201      	movs	r2, #1
    3570:	741a      	strb	r2, [r3, #16]
    3572:	4770      	bx	lr
    3574:	40001400 	.word	0x40001400

00003578 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    3578:	4770      	bx	lr
	...

0000357c <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    357c:	4a2e      	ldr	r2, [pc, #184]	; (3638 <_oscctrl_init_referenced_generators+0xbc>)
    357e:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    3580:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    3584:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    3588:	6213      	str	r3, [r2, #32]
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    358a:	4b2c      	ldr	r3, [pc, #176]	; (363c <_oscctrl_init_referenced_generators+0xc0>)
    358c:	2200      	movs	r2, #0
    358e:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    3590:	4a2b      	ldr	r2, [pc, #172]	; (3640 <_oscctrl_init_referenced_generators+0xc4>)
    3592:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    3594:	461a      	mov	r2, r3
    3596:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    359a:	f013 0f10 	tst.w	r3, #16
    359e:	d1fa      	bne.n	3596 <_oscctrl_init_referenced_generators+0x1a>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    35a0:	2200      	movs	r2, #0
    35a2:	4b26      	ldr	r3, [pc, #152]	; (363c <_oscctrl_init_referenced_generators+0xc0>)
    35a4:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    35a8:	461a      	mov	r2, r3
    35aa:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    35ae:	f013 0f04 	tst.w	r3, #4
    35b2:	d1fa      	bne.n	35aa <_oscctrl_init_referenced_generators+0x2e>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    35b4:	2242      	movs	r2, #66	; 0x42
    35b6:	4b21      	ldr	r3, [pc, #132]	; (363c <_oscctrl_init_referenced_generators+0xc0>)
    35b8:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    35ba:	461a      	mov	r2, r3
    35bc:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    35c0:	f013 0f02 	tst.w	r3, #2
    35c4:	d1fa      	bne.n	35bc <_oscctrl_init_referenced_generators+0x40>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    35c6:	4b1d      	ldr	r3, [pc, #116]	; (363c <_oscctrl_init_referenced_generators+0xc0>)
    35c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    35ca:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    35cc:	461a      	mov	r2, r3
    35ce:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    35d2:	f013 0f08 	tst.w	r3, #8
    35d6:	d1fa      	bne.n	35ce <_oscctrl_init_referenced_generators+0x52>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    35d8:	22aa      	movs	r2, #170	; 0xaa
    35da:	4b18      	ldr	r3, [pc, #96]	; (363c <_oscctrl_init_referenced_generators+0xc0>)
    35dc:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    35e0:	461a      	mov	r2, r3
    35e2:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    35e6:	f013 0f04 	tst.w	r3, #4
    35ea:	d1fa      	bne.n	35e2 <_oscctrl_init_referenced_generators+0x66>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    35ec:	4b13      	ldr	r3, [pc, #76]	; (363c <_oscctrl_init_referenced_generators+0xc0>)
    35ee:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    35f2:	f013 0f01 	tst.w	r3, #1
    35f6:	d018      	beq.n	362a <_oscctrl_init_referenced_generators+0xae>
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    35f8:	4a10      	ldr	r2, [pc, #64]	; (363c <_oscctrl_init_referenced_generators+0xc0>)
    35fa:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    35fc:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    3600:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    3604:	d1f9      	bne.n	35fa <_oscctrl_init_referenced_generators+0x7e>
	((Oscctrl *)hw)->DFLLCTRLA.reg |= OSCCTRL_DFLLCTRLA_ONDEMAND;
    3606:	4a0d      	ldr	r2, [pc, #52]	; (363c <_oscctrl_init_referenced_generators+0xc0>)
    3608:	7f13      	ldrb	r3, [r2, #28]
    360a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    360e:	7713      	strb	r3, [r2, #28]
	return tmp;
}

static inline hri_gclk_syncbusy_reg_t hri_gclk_read_SYNCBUSY_reg(const void *const hw)
{
	return ((Gclk *)hw)->SYNCBUSY.reg;
    3610:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
    3614:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    3616:	2b00      	cmp	r3, #0
    3618:	d1fc      	bne.n	3614 <_oscctrl_init_referenced_generators+0x98>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    361a:	4a07      	ldr	r2, [pc, #28]	; (3638 <_oscctrl_init_referenced_generators+0xbc>)
    361c:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    361e:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    3622:	f043 0306 	orr.w	r3, r3, #6
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    3626:	6213      	str	r3, [r2, #32]
    3628:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    362a:	4a04      	ldr	r2, [pc, #16]	; (363c <_oscctrl_init_referenced_generators+0xc0>)
    362c:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    362e:	f413 7f80 	tst.w	r3, #256	; 0x100
    3632:	d0fb      	beq.n	362c <_oscctrl_init_referenced_generators+0xb0>
    3634:	e7e7      	b.n	3606 <_oscctrl_init_referenced_generators+0x8a>
    3636:	bf00      	nop
    3638:	40001c00 	.word	0x40001c00
    363c:	40001000 	.word	0x40001000
    3640:	7c80bb80 	.word	0x7c80bb80

00003644 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    3644:	b500      	push	{lr}
    3646:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    3648:	4b0d      	ldr	r3, [pc, #52]	; (3680 <RAMECC_Handler+0x3c>)
    364a:	789b      	ldrb	r3, [r3, #2]
    364c:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    364e:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    3650:	9b01      	ldr	r3, [sp, #4]
    3652:	f013 0f02 	tst.w	r3, #2
    3656:	d006      	beq.n	3666 <RAMECC_Handler+0x22>
    3658:	4b0a      	ldr	r3, [pc, #40]	; (3684 <RAMECC_Handler+0x40>)
    365a:	681b      	ldr	r3, [r3, #0]
    365c:	b11b      	cbz	r3, 3666 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    365e:	4a08      	ldr	r2, [pc, #32]	; (3680 <RAMECC_Handler+0x3c>)
    3660:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    3662:	4798      	blx	r3
    3664:	e009      	b.n	367a <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    3666:	9b01      	ldr	r3, [sp, #4]
    3668:	f013 0f01 	tst.w	r3, #1
    366c:	d005      	beq.n	367a <RAMECC_Handler+0x36>
    366e:	4b05      	ldr	r3, [pc, #20]	; (3684 <RAMECC_Handler+0x40>)
    3670:	685b      	ldr	r3, [r3, #4]
    3672:	b113      	cbz	r3, 367a <RAMECC_Handler+0x36>
    3674:	4a02      	ldr	r2, [pc, #8]	; (3680 <RAMECC_Handler+0x3c>)
    3676:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    3678:	4798      	blx	r3
	} else {
		return;
	}
}
    367a:	b003      	add	sp, #12
    367c:	f85d fb04 	ldr.w	pc, [sp], #4
    3680:	41020000 	.word	0x41020000
    3684:	20007564 	.word	0x20007564

00003688 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    3688:	b470      	push	{r4, r5, r6}
    368a:	b089      	sub	sp, #36	; 0x24
    368c:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    368e:	466c      	mov	r4, sp
    3690:	4d0d      	ldr	r5, [pc, #52]	; (36c8 <_sercom_get_hardware_index+0x40>)
    3692:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    3694:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    3696:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    369a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    369e:	9b00      	ldr	r3, [sp, #0]
    36a0:	42b3      	cmp	r3, r6
    36a2:	d00d      	beq.n	36c0 <_sercom_get_hardware_index+0x38>
    36a4:	4631      	mov	r1, r6
    36a6:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    36a8:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    36aa:	f853 2b04 	ldr.w	r2, [r3], #4
    36ae:	428a      	cmp	r2, r1
    36b0:	d007      	beq.n	36c2 <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    36b2:	3001      	adds	r0, #1
    36b4:	2808      	cmp	r0, #8
    36b6:	d1f8      	bne.n	36aa <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    36b8:	2000      	movs	r0, #0
}
    36ba:	b009      	add	sp, #36	; 0x24
    36bc:	bc70      	pop	{r4, r5, r6}
    36be:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    36c0:	2000      	movs	r0, #0
			return i;
    36c2:	b2c0      	uxtb	r0, r0
    36c4:	e7f9      	b.n	36ba <_sercom_get_hardware_index+0x32>
    36c6:	bf00      	nop
    36c8:	0000eefc 	.word	0x0000eefc

000036cc <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    36cc:	b510      	push	{r4, lr}
	void *hw = device->hw;
    36ce:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    36d0:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    36d2:	f013 0f01 	tst.w	r3, #1
    36d6:	d003      	beq.n	36e0 <_sercom_usart_interrupt_handler+0x14>
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    36d8:	7da3      	ldrb	r3, [r4, #22]
    36da:	f013 0f01 	tst.w	r3, #1
    36de:	d112      	bne.n	3706 <_sercom_usart_interrupt_handler+0x3a>
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
}

static inline bool hri_sercomusart_get_interrupt_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    36e0:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    36e2:	f013 0f02 	tst.w	r3, #2
    36e6:	d003      	beq.n	36f0 <_sercom_usart_interrupt_handler+0x24>
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    36e8:	7da3      	ldrb	r3, [r4, #22]
    36ea:	f013 0f02 	tst.w	r3, #2
    36ee:	d10f      	bne.n	3710 <_sercom_usart_interrupt_handler+0x44>
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
}

static inline bool hri_sercomusart_get_interrupt_RXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    36f0:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    36f2:	f013 0f04 	tst.w	r3, #4
    36f6:	d015      	beq.n	3724 <_sercom_usart_interrupt_handler+0x58>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    36f8:	8b63      	ldrh	r3, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    36fa:	f003 0337 	and.w	r3, r3, #55	; 0x37
    36fe:	b163      	cbz	r3, 371a <_sercom_usart_interrupt_handler+0x4e>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    3700:	23ff      	movs	r3, #255	; 0xff
    3702:	8363      	strh	r3, [r4, #26]
    3704:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    3706:	2301      	movs	r3, #1
    3708:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    370a:	6803      	ldr	r3, [r0, #0]
    370c:	4798      	blx	r3
    370e:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    3710:	2302      	movs	r3, #2
    3712:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    3714:	6883      	ldr	r3, [r0, #8]
    3716:	4798      	blx	r3
    3718:	bd10      	pop	{r4, pc}
	return ((Sercom *)hw)->USART.DATA.reg;
    371a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
		       | SERCOM_USART_STATUS_ISF | SERCOM_USART_STATUS_COLL)) {
			hri_sercomusart_clear_STATUS_reg(hw, SERCOM_USART_STATUS_MASK);
			return;
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    371c:	6843      	ldr	r3, [r0, #4]
    371e:	b2c9      	uxtb	r1, r1
    3720:	4798      	blx	r3
    3722:	bd10      	pop	{r4, pc}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    3724:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    3726:	09db      	lsrs	r3, r3, #7
    3728:	d100      	bne.n	372c <_sercom_usart_interrupt_handler+0x60>
    372a:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    372c:	2380      	movs	r3, #128	; 0x80
    372e:	7623      	strb	r3, [r4, #24]
		uint32_t status;

		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
    3730:	68c3      	ldr	r3, [r0, #12]
    3732:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    3734:	8b63      	ldrh	r3, [r4, #26]
    3736:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    3738:	8363      	strh	r3, [r4, #26]
    373a:	e7f6      	b.n	372a <_sercom_usart_interrupt_handler+0x5e>

0000373c <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM0) {
    373c:	4b05      	ldr	r3, [pc, #20]	; (3754 <_sercom_init_irq_param+0x18>)
    373e:	4298      	cmp	r0, r3
    3740:	d005      	beq.n	374e <_sercom_init_irq_param+0x12>
		_sercom0_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM5) {
    3742:	4b05      	ldr	r3, [pc, #20]	; (3758 <_sercom_init_irq_param+0x1c>)
    3744:	4298      	cmp	r0, r3
		_sercom5_dev = (struct _usart_async_device *)dev;
    3746:	bf04      	itt	eq
    3748:	4b04      	ldreq	r3, [pc, #16]	; (375c <_sercom_init_irq_param+0x20>)
    374a:	6059      	streq	r1, [r3, #4]
    374c:	4770      	bx	lr
		_sercom0_dev = (struct _usart_async_device *)dev;
    374e:	4b03      	ldr	r3, [pc, #12]	; (375c <_sercom_init_irq_param+0x20>)
    3750:	6019      	str	r1, [r3, #0]
    3752:	4770      	bx	lr
    3754:	40003000 	.word	0x40003000
    3758:	43000400 	.word	0x43000400
    375c:	20007048 	.word	0x20007048

00003760 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    3760:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    3762:	4b03      	ldr	r3, [pc, #12]	; (3770 <_sercom_get_irq_num+0x10>)
    3764:	4798      	blx	r3
    3766:	0080      	lsls	r0, r0, #2
    3768:	302e      	adds	r0, #46	; 0x2e
}
    376a:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    376e:	bd08      	pop	{r3, pc}
    3770:	00003689 	.word	0x00003689

00003774 <_spi_sync_enable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    3774:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    3776:	f013 0f01 	tst.w	r3, #1
    377a:	d109      	bne.n	3790 <_spi_sync_enable+0x1c>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    377c:	69c3      	ldr	r3, [r0, #28]
    377e:	f013 0f03 	tst.w	r3, #3
    3782:	d1fb      	bne.n	377c <_spi_sync_enable+0x8>
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    3784:	6803      	ldr	r3, [r0, #0]
    3786:	f043 0302 	orr.w	r3, r3, #2
    378a:	6003      	str	r3, [r0, #0]
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    378c:	2000      	movs	r0, #0
    378e:	4770      	bx	lr
		return ERR_BUSY;
    3790:	f06f 0003 	mvn.w	r0, #3
}
    3794:	4770      	bx	lr

00003796 <_spi_set_mode>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    3796:	69c3      	ldr	r3, [r0, #28]
 */
static int32_t _spi_set_mode(void *const hw, const enum spi_transfer_mode mode)
{
	uint32_t ctrla;

	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE)) {
    3798:	f013 0f03 	tst.w	r3, #3
    379c:	d109      	bne.n	37b2 <_spi_set_mode+0x1c>
	return ((Sercom *)hw)->SPI.CTRLA.reg;
    379e:	6803      	ldr	r3, [r0, #0]
		return ERR_BUSY;
	}

	ctrla = hri_sercomspi_read_CTRLA_reg(hw);
	ctrla &= ~(SERCOM_SPI_CTRLA_CPOL | SERCOM_SPI_CTRLA_CPHA);
    37a0:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
	ctrla |= (mode & 0x3u) << SERCOM_SPI_CTRLA_CPHA_Pos;
    37a4:	0709      	lsls	r1, r1, #28
    37a6:	f001 5140 	and.w	r1, r1, #805306368	; 0x30000000
    37aa:	4319      	orrs	r1, r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    37ac:	6001      	str	r1, [r0, #0]
	hri_sercomspi_write_CTRLA_reg(hw, ctrla);

	return ERR_NONE;
    37ae:	2000      	movs	r0, #0
    37b0:	4770      	bx	lr
		return ERR_BUSY;
    37b2:	f06f 0003 	mvn.w	r0, #3
}
    37b6:	4770      	bx	lr

000037b8 <_spi_set_char_size>:
 * \return Setting char size status
 */
static int32_t _spi_set_char_size(void *const hw, const enum spi_char_size char_size, uint8_t *const size)
{
	/* Only 8-bit or 9-bit accepted */
	if (!(char_size == SPI_CHAR_SIZE_8 || char_size == SPI_CHAR_SIZE_9)) {
    37b8:	2901      	cmp	r1, #1
    37ba:	d813      	bhi.n	37e4 <_spi_set_char_size+0x2c>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    37bc:	69c3      	ldr	r3, [r0, #28]
		return ERR_INVALID_ARG;
	}

	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_CTRLB)) {
    37be:	f013 0f05 	tst.w	r3, #5
    37c2:	d112      	bne.n	37ea <_spi_set_char_size+0x32>
{
    37c4:	b410      	push	{r4}
	tmp = ((Sercom *)hw)->SPI.CTRLB.reg;
    37c6:	6844      	ldr	r4, [r0, #4]
	tmp &= ~SERCOM_SPI_CTRLB_CHSIZE_Msk;
    37c8:	f024 0407 	bic.w	r4, r4, #7
	tmp |= SERCOM_SPI_CTRLB_CHSIZE(data);
    37cc:	f001 0307 	and.w	r3, r1, #7
    37d0:	4323      	orrs	r3, r4
	((Sercom *)hw)->SPI.CTRLB.reg = tmp;
    37d2:	6043      	str	r3, [r0, #4]
		return ERR_BUSY;
	}

	hri_sercomspi_write_CTRLB_CHSIZE_bf(hw, char_size);
	*size = (char_size == SPI_CHAR_SIZE_8) ? 1 : 2;
    37d4:	2900      	cmp	r1, #0
    37d6:	bf0c      	ite	eq
    37d8:	2301      	moveq	r3, #1
    37da:	2302      	movne	r3, #2
    37dc:	7013      	strb	r3, [r2, #0]

	return ERR_NONE;
    37de:	2000      	movs	r0, #0
}
    37e0:	bc10      	pop	{r4}
    37e2:	4770      	bx	lr
		return ERR_INVALID_ARG;
    37e4:	f06f 000c 	mvn.w	r0, #12
    37e8:	4770      	bx	lr
		return ERR_BUSY;
    37ea:	f06f 0003 	mvn.w	r0, #3
    37ee:	4770      	bx	lr

000037f0 <_spi_set_data_order>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    37f0:	69c3      	ldr	r3, [r0, #28]
 */
static int32_t _spi_set_data_order(void *const hw, const enum spi_data_order dord)
{
	uint32_t ctrla;

	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    37f2:	f013 0f01 	tst.w	r3, #1
    37f6:	d109      	bne.n	380c <_spi_set_data_order+0x1c>
	return ((Sercom *)hw)->SPI.CTRLA.reg;
    37f8:	6803      	ldr	r3, [r0, #0]
		return ERR_BUSY;
	}

	ctrla = hri_sercomspi_read_CTRLA_reg(hw);

	if (dord == SPI_DATA_ORDER_LSB_1ST) {
    37fa:	2901      	cmp	r1, #1
		ctrla |= SERCOM_SPI_CTRLA_DORD;
    37fc:	bf0c      	ite	eq
    37fe:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
	} else {
		ctrla &= ~SERCOM_SPI_CTRLA_DORD;
    3802:	f023 4380 	bicne.w	r3, r3, #1073741824	; 0x40000000
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    3806:	6003      	str	r3, [r0, #0]
	}
	hri_sercomspi_write_CTRLA_reg(hw, ctrla);

	return ERR_NONE;
    3808:	2000      	movs	r0, #0
    380a:	4770      	bx	lr
		return ERR_BUSY;
    380c:	f06f 0003 	mvn.w	r0, #3
}
    3810:	4770      	bx	lr
	...

00003814 <_usart_init>:
{
    3814:	b538      	push	{r3, r4, r5, lr}
    3816:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    3818:	4b35      	ldr	r3, [pc, #212]	; (38f0 <_usart_init+0xdc>)
    381a:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    381c:	2800      	cmp	r0, #0
    381e:	d042      	beq.n	38a6 <_usart_init+0x92>
    3820:	2805      	cmp	r0, #5
    3822:	d042      	beq.n	38aa <_usart_init+0x96>
	ASSERT(false);
    3824:	f240 226d 	movw	r2, #621	; 0x26d
    3828:	4932      	ldr	r1, [pc, #200]	; (38f4 <_usart_init+0xe0>)
    382a:	2000      	movs	r0, #0
    382c:	4b32      	ldr	r3, [pc, #200]	; (38f8 <_usart_init+0xe4>)
    382e:	4798      	blx	r3
	return 0;
    3830:	2200      	movs	r2, #0
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    3832:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    3834:	f013 0f01 	tst.w	r3, #1
    3838:	d11a      	bne.n	3870 <_usart_init+0x5c>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    383a:	0053      	lsls	r3, r2, #1
    383c:	1899      	adds	r1, r3, r2
    383e:	4b2f      	ldr	r3, [pc, #188]	; (38fc <_usart_init+0xe8>)
    3840:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    3844:	6a59      	ldr	r1, [r3, #36]	; 0x24
    3846:	f001 011c 	and.w	r1, r1, #28
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    384a:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    384c:	f013 0f02 	tst.w	r3, #2
    3850:	d00b      	beq.n	386a <_usart_init+0x56>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    3852:	69e3      	ldr	r3, [r4, #28]
    3854:	f013 0f03 	tst.w	r3, #3
    3858:	d1fb      	bne.n	3852 <_usart_init+0x3e>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    385a:	6823      	ldr	r3, [r4, #0]
    385c:	f023 0302 	bic.w	r3, r3, #2
    3860:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    3862:	69e3      	ldr	r3, [r4, #28]
    3864:	f013 0f02 	tst.w	r3, #2
    3868:	d1fb      	bne.n	3862 <_usart_init+0x4e>
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    386a:	f041 0101 	orr.w	r1, r1, #1
	((Sercom *)hw)->USART.CTRLA.reg = data;
    386e:	6021      	str	r1, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    3870:	69e3      	ldr	r3, [r4, #28]
    3872:	f013 0f01 	tst.w	r3, #1
    3876:	d1fb      	bne.n	3870 <_usart_init+0x5c>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    3878:	4611      	mov	r1, r2
    387a:	0053      	lsls	r3, r2, #1
    387c:	1898      	adds	r0, r3, r2
    387e:	4b1f      	ldr	r3, [pc, #124]	; (38fc <_usart_init+0xe8>)
    3880:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    3884:	6a58      	ldr	r0, [r3, #36]	; 0x24
	((Sercom *)hw)->USART.CTRLA.reg = data;
    3886:	6020      	str	r0, [r4, #0]
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    3888:	6a9d      	ldr	r5, [r3, #40]	; 0x28
	((Sercom *)hw)->USART.CTRLB.reg = data;
    388a:	6065      	str	r5, [r4, #4]
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    388c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Sercom *)hw)->USART.CTRLC.reg = data;
    388e:	60a3      	str	r3, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    3890:	f410 4fc0 	tst.w	r0, #24576	; 0x6000
    3894:	d10b      	bne.n	38ae <_usart_init+0x9a>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    3896:	0053      	lsls	r3, r2, #1
    3898:	4413      	add	r3, r2
    389a:	4a18      	ldr	r2, [pc, #96]	; (38fc <_usart_init+0xe8>)
    389c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    38a0:	8e13      	ldrh	r3, [r2, #48]	; 0x30
	((Sercom *)hw)->USART.BAUD.reg = data;
    38a2:	81a3      	strh	r3, [r4, #12]
    38a4:	e013      	b.n	38ce <_usart_init+0xba>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    38a6:	2200      	movs	r2, #0
    38a8:	e7c3      	b.n	3832 <_usart_init+0x1e>
		if (_usarts[i].number == sercom_offset) {
    38aa:	2201      	movs	r2, #1
    38ac:	e7c1      	b.n	3832 <_usart_init+0x1e>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    38ae:	0053      	lsls	r3, r2, #1
    38b0:	4413      	add	r3, r2
    38b2:	4a12      	ldr	r2, [pc, #72]	; (38fc <_usart_init+0xe8>)
    38b4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    38b8:	8e10      	ldrh	r0, [r2, #48]	; 0x30
    38ba:	89a3      	ldrh	r3, [r4, #12]
    38bc:	f360 030c 	bfi	r3, r0, #0, #13
    38c0:	81a3      	strh	r3, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    38c2:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
    38c6:	89a3      	ldrh	r3, [r4, #12]
    38c8:	f362 334f 	bfi	r3, r2, #13, #3
    38cc:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    38ce:	4b0b      	ldr	r3, [pc, #44]	; (38fc <_usart_init+0xe8>)
    38d0:	004a      	lsls	r2, r1, #1
    38d2:	1850      	adds	r0, r2, r1
    38d4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    38d8:	f890 0033 	ldrb.w	r0, [r0, #51]	; 0x33
	((Sercom *)hw)->USART.RXPL.reg = data;
    38dc:	73a0      	strb	r0, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    38de:	440a      	add	r2, r1
    38e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    38e4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    38e8:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
    38ec:	2000      	movs	r0, #0
    38ee:	bd38      	pop	{r3, r4, r5, pc}
    38f0:	00003689 	.word	0x00003689
    38f4:	0000ef64 	.word	0x0000ef64
    38f8:	000026b1 	.word	0x000026b1
    38fc:	0000eefc 	.word	0x0000eefc

00003900 <_usart_async_init>:
{
    3900:	b570      	push	{r4, r5, r6, lr}
    3902:	460d      	mov	r5, r1
	ASSERT(device);
    3904:	4606      	mov	r6, r0
    3906:	22cd      	movs	r2, #205	; 0xcd
    3908:	4917      	ldr	r1, [pc, #92]	; (3968 <_usart_async_init+0x68>)
    390a:	3000      	adds	r0, #0
    390c:	bf18      	it	ne
    390e:	2001      	movne	r0, #1
    3910:	4b16      	ldr	r3, [pc, #88]	; (396c <_usart_async_init+0x6c>)
    3912:	4798      	blx	r3
	init_status = _usart_init(hw);
    3914:	4628      	mov	r0, r5
    3916:	4b16      	ldr	r3, [pc, #88]	; (3970 <_usart_async_init+0x70>)
    3918:	4798      	blx	r3
	if (init_status) {
    391a:	4604      	mov	r4, r0
    391c:	b108      	cbz	r0, 3922 <_usart_async_init+0x22>
}
    391e:	4620      	mov	r0, r4
    3920:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    3922:	61b5      	str	r5, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
    3924:	4631      	mov	r1, r6
    3926:	4628      	mov	r0, r5
    3928:	4b12      	ldr	r3, [pc, #72]	; (3974 <_usart_async_init+0x74>)
    392a:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    392c:	4628      	mov	r0, r5
    392e:	4b12      	ldr	r3, [pc, #72]	; (3978 <_usart_async_init+0x78>)
    3930:	4798      	blx	r3
    3932:	1d01      	adds	r1, r0, #4
    3934:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3936:	2501      	movs	r5, #1
    3938:	f000 021f 	and.w	r2, r0, #31
    393c:	fa05 f202 	lsl.w	r2, r5, r2
    3940:	0943      	lsrs	r3, r0, #5
    3942:	009b      	lsls	r3, r3, #2
    3944:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    3948:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    394c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    3950:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3954:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3958:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    395c:	601a      	str	r2, [r3, #0]
		irq++;
    395e:	3001      	adds	r0, #1
    3960:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    3962:	4281      	cmp	r1, r0
    3964:	d1e8      	bne.n	3938 <_usart_async_init+0x38>
    3966:	e7da      	b.n	391e <_usart_async_init+0x1e>
    3968:	0000ef64 	.word	0x0000ef64
    396c:	000026b1 	.word	0x000026b1
    3970:	00003815 	.word	0x00003815
    3974:	0000373d 	.word	0x0000373d
    3978:	00003761 	.word	0x00003761

0000397c <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    397c:	6982      	ldr	r2, [r0, #24]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    397e:	69d3      	ldr	r3, [r2, #28]
    3980:	f013 0f03 	tst.w	r3, #3
    3984:	d1fb      	bne.n	397e <_usart_async_enable+0x2>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    3986:	6813      	ldr	r3, [r2, #0]
    3988:	f043 0302 	orr.w	r3, r3, #2
    398c:	6013      	str	r3, [r2, #0]
    398e:	4770      	bx	lr

00003990 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    3990:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.DATA.reg = data;
    3992:	6299      	str	r1, [r3, #40]	; 0x28
    3994:	4770      	bx	lr

00003996 <_usart_async_is_byte_sent>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    3996:	6983      	ldr	r3, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    3998:	7e18      	ldrb	r0, [r3, #24]
}
    399a:	f000 0001 	and.w	r0, r0, #1
    399e:	4770      	bx	lr

000039a0 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    39a0:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    39a2:	2201      	movs	r2, #1
    39a4:	759a      	strb	r2, [r3, #22]
    39a6:	4770      	bx	lr

000039a8 <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    39a8:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    39aa:	2202      	movs	r2, #2
    39ac:	759a      	strb	r2, [r3, #22]
    39ae:	4770      	bx	lr

000039b0 <_usart_async_set_irq_state>:
{
    39b0:	b570      	push	{r4, r5, r6, lr}
    39b2:	460c      	mov	r4, r1
    39b4:	4616      	mov	r6, r2
	ASSERT(device);
    39b6:	4605      	mov	r5, r0
    39b8:	f240 222d 	movw	r2, #557	; 0x22d
    39bc:	4915      	ldr	r1, [pc, #84]	; (3a14 <_usart_async_set_irq_state+0x64>)
    39be:	3000      	adds	r0, #0
    39c0:	bf18      	it	ne
    39c2:	2001      	movne	r0, #1
    39c4:	4b14      	ldr	r3, [pc, #80]	; (3a18 <_usart_async_set_irq_state+0x68>)
    39c6:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    39c8:	f014 0ffd 	tst.w	r4, #253	; 0xfd
    39cc:	d10d      	bne.n	39ea <_usart_async_set_irq_state+0x3a>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    39ce:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    39d0:	b92e      	cbnz	r6, 39de <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    39d2:	2201      	movs	r2, #1
    39d4:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    39d6:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    39d8:	2202      	movs	r2, #2
    39da:	751a      	strb	r2, [r3, #20]
    39dc:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    39de:	2201      	movs	r2, #1
    39e0:	759a      	strb	r2, [r3, #22]
    39e2:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    39e4:	2202      	movs	r2, #2
    39e6:	759a      	strb	r2, [r3, #22]
    39e8:	bd70      	pop	{r4, r5, r6, pc}
	} else if (USART_ASYNC_RX_DONE == type) {
    39ea:	2c01      	cmp	r4, #1
    39ec:	d002      	beq.n	39f4 <_usart_async_set_irq_state+0x44>
	} else if (USART_ASYNC_ERROR == type) {
    39ee:	2c03      	cmp	r4, #3
    39f0:	d008      	beq.n	3a04 <_usart_async_set_irq_state+0x54>
    39f2:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    39f4:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    39f6:	b916      	cbnz	r6, 39fe <_usart_async_set_irq_state+0x4e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    39f8:	2204      	movs	r2, #4
    39fa:	751a      	strb	r2, [r3, #20]
    39fc:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    39fe:	2204      	movs	r2, #4
    3a00:	759a      	strb	r2, [r3, #22]
    3a02:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    3a04:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    3a06:	b116      	cbz	r6, 3a0e <_usart_async_set_irq_state+0x5e>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    3a08:	2280      	movs	r2, #128	; 0x80
    3a0a:	759a      	strb	r2, [r3, #22]
}
    3a0c:	e7f1      	b.n	39f2 <_usart_async_set_irq_state+0x42>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    3a0e:	2280      	movs	r2, #128	; 0x80
    3a10:	751a      	strb	r2, [r3, #20]
    3a12:	bd70      	pop	{r4, r5, r6, pc}
    3a14:	0000ef64 	.word	0x0000ef64
    3a18:	000026b1 	.word	0x000026b1

00003a1c <SERCOM0_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM0_0_Handler(void)
{
    3a1c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    3a1e:	4b02      	ldr	r3, [pc, #8]	; (3a28 <SERCOM0_0_Handler+0xc>)
    3a20:	6818      	ldr	r0, [r3, #0]
    3a22:	4b02      	ldr	r3, [pc, #8]	; (3a2c <SERCOM0_0_Handler+0x10>)
    3a24:	4798      	blx	r3
    3a26:	bd08      	pop	{r3, pc}
    3a28:	20007048 	.word	0x20007048
    3a2c:	000036cd 	.word	0x000036cd

00003a30 <SERCOM0_1_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM0_1_Handler(void)
{
    3a30:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    3a32:	4b02      	ldr	r3, [pc, #8]	; (3a3c <SERCOM0_1_Handler+0xc>)
    3a34:	6818      	ldr	r0, [r3, #0]
    3a36:	4b02      	ldr	r3, [pc, #8]	; (3a40 <SERCOM0_1_Handler+0x10>)
    3a38:	4798      	blx	r3
    3a3a:	bd08      	pop	{r3, pc}
    3a3c:	20007048 	.word	0x20007048
    3a40:	000036cd 	.word	0x000036cd

00003a44 <SERCOM0_2_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM0_2_Handler(void)
{
    3a44:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    3a46:	4b02      	ldr	r3, [pc, #8]	; (3a50 <SERCOM0_2_Handler+0xc>)
    3a48:	6818      	ldr	r0, [r3, #0]
    3a4a:	4b02      	ldr	r3, [pc, #8]	; (3a54 <SERCOM0_2_Handler+0x10>)
    3a4c:	4798      	blx	r3
    3a4e:	bd08      	pop	{r3, pc}
    3a50:	20007048 	.word	0x20007048
    3a54:	000036cd 	.word	0x000036cd

00003a58 <SERCOM0_3_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM0_3_Handler(void)
{
    3a58:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    3a5a:	4b02      	ldr	r3, [pc, #8]	; (3a64 <SERCOM0_3_Handler+0xc>)
    3a5c:	6818      	ldr	r0, [r3, #0]
    3a5e:	4b02      	ldr	r3, [pc, #8]	; (3a68 <SERCOM0_3_Handler+0x10>)
    3a60:	4798      	blx	r3
    3a62:	bd08      	pop	{r3, pc}
    3a64:	20007048 	.word	0x20007048
    3a68:	000036cd 	.word	0x000036cd

00003a6c <SERCOM5_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_0_Handler(void)
{
    3a6c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom5_dev);
    3a6e:	4b02      	ldr	r3, [pc, #8]	; (3a78 <SERCOM5_0_Handler+0xc>)
    3a70:	6858      	ldr	r0, [r3, #4]
    3a72:	4b02      	ldr	r3, [pc, #8]	; (3a7c <SERCOM5_0_Handler+0x10>)
    3a74:	4798      	blx	r3
    3a76:	bd08      	pop	{r3, pc}
    3a78:	20007048 	.word	0x20007048
    3a7c:	000036cd 	.word	0x000036cd

00003a80 <SERCOM5_1_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_1_Handler(void)
{
    3a80:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom5_dev);
    3a82:	4b02      	ldr	r3, [pc, #8]	; (3a8c <SERCOM5_1_Handler+0xc>)
    3a84:	6858      	ldr	r0, [r3, #4]
    3a86:	4b02      	ldr	r3, [pc, #8]	; (3a90 <SERCOM5_1_Handler+0x10>)
    3a88:	4798      	blx	r3
    3a8a:	bd08      	pop	{r3, pc}
    3a8c:	20007048 	.word	0x20007048
    3a90:	000036cd 	.word	0x000036cd

00003a94 <SERCOM5_2_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_2_Handler(void)
{
    3a94:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom5_dev);
    3a96:	4b02      	ldr	r3, [pc, #8]	; (3aa0 <SERCOM5_2_Handler+0xc>)
    3a98:	6858      	ldr	r0, [r3, #4]
    3a9a:	4b02      	ldr	r3, [pc, #8]	; (3aa4 <SERCOM5_2_Handler+0x10>)
    3a9c:	4798      	blx	r3
    3a9e:	bd08      	pop	{r3, pc}
    3aa0:	20007048 	.word	0x20007048
    3aa4:	000036cd 	.word	0x000036cd

00003aa8 <SERCOM5_3_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_3_Handler(void)
{
    3aa8:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom5_dev);
    3aaa:	4b02      	ldr	r3, [pc, #8]	; (3ab4 <SERCOM5_3_Handler+0xc>)
    3aac:	6858      	ldr	r0, [r3, #4]
    3aae:	4b02      	ldr	r3, [pc, #8]	; (3ab8 <SERCOM5_3_Handler+0x10>)
    3ab0:	4798      	blx	r3
    3ab2:	bd08      	pop	{r3, pc}
    3ab4:	20007048 	.word	0x20007048
    3ab8:	000036cd 	.word	0x000036cd

00003abc <_spi_m_sync_init>:
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    3abc:	b538      	push	{r3, r4, r5, lr}
    3abe:	4605      	mov	r5, r0
    3ac0:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    3ac2:	4608      	mov	r0, r1
    3ac4:	4b2e      	ldr	r3, [pc, #184]	; (3b80 <_spi_m_sync_init+0xc4>)
    3ac6:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    3ac8:	2804      	cmp	r0, #4
    3aca:	d00c      	beq.n	3ae6 <_spi_m_sync_init+0x2a>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    3acc:	2d00      	cmp	r5, #0
    3ace:	d045      	beq.n	3b5c <_spi_m_sync_init+0xa0>
    3ad0:	f640 128e 	movw	r2, #2446	; 0x98e
    3ad4:	492b      	ldr	r1, [pc, #172]	; (3b84 <_spi_m_sync_init+0xc8>)
    3ad6:	1c20      	adds	r0, r4, #0
    3ad8:	bf18      	it	ne
    3ada:	2001      	movne	r0, #1
    3adc:	4b2a      	ldr	r3, [pc, #168]	; (3b88 <_spi_m_sync_init+0xcc>)
    3ade:	4798      	blx	r3

	if (regs == NULL) {
		return ERR_INVALID_ARG;
    3ae0:	f06f 000c 	mvn.w	r0, #12
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;

	dev->dummy_byte = regs->dummy_byte;

	return ERR_NONE;
}
    3ae4:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    3ae6:	2d00      	cmp	r5, #0
    3ae8:	d141      	bne.n	3b6e <_spi_m_sync_init+0xb2>
    3aea:	f640 128e 	movw	r2, #2446	; 0x98e
    3aee:	4925      	ldr	r1, [pc, #148]	; (3b84 <_spi_m_sync_init+0xc8>)
    3af0:	2000      	movs	r0, #0
    3af2:	4b25      	ldr	r3, [pc, #148]	; (3b88 <_spi_m_sync_init+0xcc>)
    3af4:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    3af6:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    3af8:	f013 0f01 	tst.w	r3, #1
    3afc:	d111      	bne.n	3b22 <_spi_m_sync_init+0x66>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    3afe:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    3b00:	f013 0f02 	tst.w	r3, #2
    3b04:	d00b      	beq.n	3b1e <_spi_m_sync_init+0x62>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3b06:	69e3      	ldr	r3, [r4, #28]
    3b08:	f013 0f03 	tst.w	r3, #3
    3b0c:	d1fb      	bne.n	3b06 <_spi_m_sync_init+0x4a>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    3b0e:	6823      	ldr	r3, [r4, #0]
    3b10:	f023 0302 	bic.w	r3, r3, #2
    3b14:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3b16:	69e3      	ldr	r3, [r4, #28]
    3b18:	f013 0f02 	tst.w	r3, #2
    3b1c:	d1fb      	bne.n	3b16 <_spi_m_sync_init+0x5a>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    3b1e:	230d      	movs	r3, #13
    3b20:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3b22:	69e3      	ldr	r3, [r4, #28]
    3b24:	f013 0f01 	tst.w	r3, #1
    3b28:	d1fb      	bne.n	3b22 <_spi_m_sync_init+0x66>
	dev->prvt = hw;
    3b2a:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    3b2c:	f640 121e 	movw	r2, #2334	; 0x91e
    3b30:	4914      	ldr	r1, [pc, #80]	; (3b84 <_spi_m_sync_init+0xc8>)
    3b32:	1c20      	adds	r0, r4, #0
    3b34:	bf18      	it	ne
    3b36:	2001      	movne	r0, #1
    3b38:	4b13      	ldr	r3, [pc, #76]	; (3b88 <_spi_m_sync_init+0xcc>)
    3b3a:	4798      	blx	r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    3b3c:	4b13      	ldr	r3, [pc, #76]	; (3b8c <_spi_m_sync_init+0xd0>)
    3b3e:	6023      	str	r3, [r4, #0]
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    3b40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    3b44:	6063      	str	r3, [r4, #4]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    3b46:	231d      	movs	r3, #29
    3b48:	7323      	strb	r3, [r4, #12]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    3b4a:	2000      	movs	r0, #0
    3b4c:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    3b50:	2301      	movs	r3, #1
    3b52:	712b      	strb	r3, [r5, #4]
	dev->dummy_byte = regs->dummy_byte;
    3b54:	f240 13ff 	movw	r3, #511	; 0x1ff
    3b58:	80eb      	strh	r3, [r5, #6]
	return ERR_NONE;
    3b5a:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    3b5c:	f640 128e 	movw	r2, #2446	; 0x98e
    3b60:	4908      	ldr	r1, [pc, #32]	; (3b84 <_spi_m_sync_init+0xc8>)
    3b62:	2000      	movs	r0, #0
    3b64:	4b08      	ldr	r3, [pc, #32]	; (3b88 <_spi_m_sync_init+0xcc>)
    3b66:	4798      	blx	r3
		return ERR_INVALID_ARG;
    3b68:	f06f 000c 	mvn.w	r0, #12
    3b6c:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    3b6e:	f640 128e 	movw	r2, #2446	; 0x98e
    3b72:	4904      	ldr	r1, [pc, #16]	; (3b84 <_spi_m_sync_init+0xc8>)
    3b74:	1c20      	adds	r0, r4, #0
    3b76:	bf18      	it	ne
    3b78:	2001      	movne	r0, #1
    3b7a:	4b03      	ldr	r3, [pc, #12]	; (3b88 <_spi_m_sync_init+0xcc>)
    3b7c:	4798      	blx	r3
    3b7e:	e7ba      	b.n	3af6 <_spi_m_sync_init+0x3a>
    3b80:	00003689 	.word	0x00003689
    3b84:	0000ef64 	.word	0x0000ef64
    3b88:	000026b1 	.word	0x000026b1
    3b8c:	0013008c 	.word	0x0013008c

00003b90 <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    3b90:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    3b92:	4604      	mov	r4, r0
    3b94:	b160      	cbz	r0, 3bb0 <_spi_m_sync_enable+0x20>
    3b96:	6800      	ldr	r0, [r0, #0]
    3b98:	3000      	adds	r0, #0
    3b9a:	bf18      	it	ne
    3b9c:	2001      	movne	r0, #1
    3b9e:	f640 12ed 	movw	r2, #2541	; 0x9ed
    3ba2:	4904      	ldr	r1, [pc, #16]	; (3bb4 <_spi_m_sync_enable+0x24>)
    3ba4:	4b04      	ldr	r3, [pc, #16]	; (3bb8 <_spi_m_sync_enable+0x28>)
    3ba6:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    3ba8:	6820      	ldr	r0, [r4, #0]
    3baa:	4b04      	ldr	r3, [pc, #16]	; (3bbc <_spi_m_sync_enable+0x2c>)
    3bac:	4798      	blx	r3
}
    3bae:	bd10      	pop	{r4, pc}
    3bb0:	2000      	movs	r0, #0
    3bb2:	e7f4      	b.n	3b9e <_spi_m_sync_enable+0xe>
    3bb4:	0000ef64 	.word	0x0000ef64
    3bb8:	000026b1 	.word	0x000026b1
    3bbc:	00003775 	.word	0x00003775

00003bc0 <_spi_m_sync_set_mode>:

	return _spi_async_disable(dev->prvt);
}

int32_t _spi_m_sync_set_mode(struct _spi_m_sync_dev *dev, const enum spi_transfer_mode mode)
{
    3bc0:	b538      	push	{r3, r4, r5, lr}
    3bc2:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    3bc4:	4604      	mov	r4, r0
    3bc6:	b168      	cbz	r0, 3be4 <_spi_m_sync_set_mode+0x24>
    3bc8:	6800      	ldr	r0, [r0, #0]
    3bca:	3000      	adds	r0, #0
    3bcc:	bf18      	it	ne
    3bce:	2001      	movne	r0, #1
    3bd0:	f640 2225 	movw	r2, #2597	; 0xa25
    3bd4:	4904      	ldr	r1, [pc, #16]	; (3be8 <_spi_m_sync_set_mode+0x28>)
    3bd6:	4b05      	ldr	r3, [pc, #20]	; (3bec <_spi_m_sync_set_mode+0x2c>)
    3bd8:	4798      	blx	r3

	return _spi_set_mode(dev->prvt, mode);
    3bda:	4629      	mov	r1, r5
    3bdc:	6820      	ldr	r0, [r4, #0]
    3bde:	4b04      	ldr	r3, [pc, #16]	; (3bf0 <_spi_m_sync_set_mode+0x30>)
    3be0:	4798      	blx	r3
}
    3be2:	bd38      	pop	{r3, r4, r5, pc}
    3be4:	2000      	movs	r0, #0
    3be6:	e7f3      	b.n	3bd0 <_spi_m_sync_set_mode+0x10>
    3be8:	0000ef64 	.word	0x0000ef64
    3bec:	000026b1 	.word	0x000026b1
    3bf0:	00003797 	.word	0x00003797

00003bf4 <_spi_m_sync_set_baudrate>:
	rc = ((clk >> 1) / baud) - 1;
	return rc;
}

int32_t _spi_m_sync_set_baudrate(struct _spi_m_sync_dev *dev, const uint32_t baud_val)
{
    3bf4:	b538      	push	{r3, r4, r5, lr}
    3bf6:	460c      	mov	r4, r1
	ASSERT(dev && dev->prvt);
    3bf8:	4605      	mov	r5, r0
    3bfa:	b198      	cbz	r0, 3c24 <_spi_m_sync_set_baudrate+0x30>
    3bfc:	6800      	ldr	r0, [r0, #0]
    3bfe:	3000      	adds	r0, #0
    3c00:	bf18      	it	ne
    3c02:	2001      	movne	r0, #1
    3c04:	f640 2254 	movw	r2, #2644	; 0xa54
    3c08:	4907      	ldr	r1, [pc, #28]	; (3c28 <_spi_m_sync_set_baudrate+0x34>)
    3c0a:	4b08      	ldr	r3, [pc, #32]	; (3c2c <_spi_m_sync_set_baudrate+0x38>)
    3c0c:	4798      	blx	r3

	return _spi_set_baudrate(dev->prvt, baud_val);
    3c0e:	682b      	ldr	r3, [r5, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    3c10:	69da      	ldr	r2, [r3, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    3c12:	f012 0f01 	tst.w	r2, #1
	hri_sercomspi_write_BAUD_reg(hw, baud_val);
    3c16:	bf03      	ittte	eq
    3c18:	b2e4      	uxtbeq	r4, r4
	((Sercom *)hw)->SPI.BAUD.reg = data;
    3c1a:	731c      	strbeq	r4, [r3, #12]
	return ERR_NONE;
    3c1c:	2000      	moveq	r0, #0
		return ERR_BUSY;
    3c1e:	f06f 0003 	mvnne.w	r0, #3
}
    3c22:	bd38      	pop	{r3, r4, r5, pc}
    3c24:	2000      	movs	r0, #0
    3c26:	e7ed      	b.n	3c04 <_spi_m_sync_set_baudrate+0x10>
    3c28:	0000ef64 	.word	0x0000ef64
    3c2c:	000026b1 	.word	0x000026b1

00003c30 <_spi_m_sync_set_char_size>:

	return _spi_set_baudrate(dev->prvt, baud_val);
}

int32_t _spi_m_sync_set_char_size(struct _spi_m_sync_dev *dev, const enum spi_char_size char_size)
{
    3c30:	b538      	push	{r3, r4, r5, lr}
    3c32:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    3c34:	4604      	mov	r4, r0
    3c36:	b170      	cbz	r0, 3c56 <_spi_m_sync_set_char_size+0x26>
    3c38:	6800      	ldr	r0, [r0, #0]
    3c3a:	3000      	adds	r0, #0
    3c3c:	bf18      	it	ne
    3c3e:	2001      	movne	r0, #1
    3c40:	f640 2262 	movw	r2, #2658	; 0xa62
    3c44:	4905      	ldr	r1, [pc, #20]	; (3c5c <_spi_m_sync_set_char_size+0x2c>)
    3c46:	4b06      	ldr	r3, [pc, #24]	; (3c60 <_spi_m_sync_set_char_size+0x30>)
    3c48:	4798      	blx	r3

	return _spi_set_char_size(dev->prvt, char_size, &dev->char_size);
    3c4a:	1d22      	adds	r2, r4, #4
    3c4c:	4629      	mov	r1, r5
    3c4e:	6820      	ldr	r0, [r4, #0]
    3c50:	4b04      	ldr	r3, [pc, #16]	; (3c64 <_spi_m_sync_set_char_size+0x34>)
    3c52:	4798      	blx	r3
}
    3c54:	bd38      	pop	{r3, r4, r5, pc}
    3c56:	2000      	movs	r0, #0
    3c58:	e7f2      	b.n	3c40 <_spi_m_sync_set_char_size+0x10>
    3c5a:	bf00      	nop
    3c5c:	0000ef64 	.word	0x0000ef64
    3c60:	000026b1 	.word	0x000026b1
    3c64:	000037b9 	.word	0x000037b9

00003c68 <_spi_m_sync_set_data_order>:

	return _spi_set_char_size(dev->prvt, char_size, &dev->char_size);
}

int32_t _spi_m_sync_set_data_order(struct _spi_m_sync_dev *dev, const enum spi_data_order dord)
{
    3c68:	b538      	push	{r3, r4, r5, lr}
    3c6a:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    3c6c:	4604      	mov	r4, r0
    3c6e:	b168      	cbz	r0, 3c8c <_spi_m_sync_set_data_order+0x24>
    3c70:	6800      	ldr	r0, [r0, #0]
    3c72:	3000      	adds	r0, #0
    3c74:	bf18      	it	ne
    3c76:	2001      	movne	r0, #1
    3c78:	f640 227e 	movw	r2, #2686	; 0xa7e
    3c7c:	4904      	ldr	r1, [pc, #16]	; (3c90 <_spi_m_sync_set_data_order+0x28>)
    3c7e:	4b05      	ldr	r3, [pc, #20]	; (3c94 <_spi_m_sync_set_data_order+0x2c>)
    3c80:	4798      	blx	r3

	return _spi_set_data_order(dev->prvt, dord);
    3c82:	4629      	mov	r1, r5
    3c84:	6820      	ldr	r0, [r4, #0]
    3c86:	4b04      	ldr	r3, [pc, #16]	; (3c98 <_spi_m_sync_set_data_order+0x30>)
    3c88:	4798      	blx	r3
}
    3c8a:	bd38      	pop	{r3, r4, r5, pc}
    3c8c:	2000      	movs	r0, #0
    3c8e:	e7f3      	b.n	3c78 <_spi_m_sync_set_data_order+0x10>
    3c90:	0000ef64 	.word	0x0000ef64
    3c94:	000026b1 	.word	0x000026b1
    3c98:	000037f1 	.word	0x000037f1

00003c9c <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    3c9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3ca0:	4681      	mov	r9, r0
    3ca2:	460e      	mov	r6, r1
	void *                 hw   = dev->prvt;
    3ca4:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    3ca6:	f8d1 8000 	ldr.w	r8, [r1]
    3caa:	684d      	ldr	r5, [r1, #4]
    3cac:	7907      	ldrb	r7, [r0, #4]

	ASSERT(dev && hw);
    3cae:	b1a8      	cbz	r0, 3cdc <_spi_m_sync_trans+0x40>
    3cb0:	1c20      	adds	r0, r4, #0
    3cb2:	bf18      	it	ne
    3cb4:	2001      	movne	r0, #1
    3cb6:	f640 22f2 	movw	r2, #2802	; 0xaf2
    3cba:	492e      	ldr	r1, [pc, #184]	; (3d74 <_spi_m_sync_trans+0xd8>)
    3cbc:	4b2e      	ldr	r3, [pc, #184]	; (3d78 <_spi_m_sync_trans+0xdc>)
    3cbe:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    3cc0:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    3cc2:	f013 0f07 	tst.w	r3, #7
    3cc6:	d134      	bne.n	3d32 <_spi_m_sync_trans+0x96>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3cc8:	69e0      	ldr	r0, [r4, #28]
    3cca:	f010 0003 	ands.w	r0, r0, #3
    3cce:	d1fb      	bne.n	3cc8 <_spi_m_sync_trans+0x2c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    3cd0:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    3cd2:	f013 0f02 	tst.w	r3, #2
    3cd6:	d030      	beq.n	3d3a <_spi_m_sync_trans+0x9e>
    3cd8:	4602      	mov	r2, r0
    3cda:	e008      	b.n	3cee <_spi_m_sync_trans+0x52>
    3cdc:	2000      	movs	r0, #0
    3cde:	e7ea      	b.n	3cb6 <_spi_m_sync_trans+0x1a>
	ctrl->rxcnt++;
    3ce0:	3201      	adds	r2, #1
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    3ce2:	f013 0f80 	tst.w	r3, #128	; 0x80
    3ce6:	d112      	bne.n	3d0e <_spi_m_sync_trans+0x72>
		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    3ce8:	68b3      	ldr	r3, [r6, #8]
    3cea:	4283      	cmp	r3, r0
    3cec:	d91e      	bls.n	3d2c <_spi_m_sync_trans+0x90>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    3cee:	7e23      	ldrb	r3, [r4, #24]
    3cf0:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    3cf2:	f013 0f04 	tst.w	r3, #4
    3cf6:	d024      	beq.n	3d42 <_spi_m_sync_trans+0xa6>
	return ((Sercom *)hw)->SPI.DATA.reg;
    3cf8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    3cfa:	2d00      	cmp	r5, #0
    3cfc:	d0f0      	beq.n	3ce0 <_spi_m_sync_trans+0x44>
		*ctrl->rxbuf++ = (uint8_t)data;
    3cfe:	7029      	strb	r1, [r5, #0]
		if (ctrl->char_size > 1) {
    3d00:	2f01      	cmp	r7, #1
		*ctrl->rxbuf++ = (uint8_t)data;
    3d02:	bf91      	iteee	ls
    3d04:	3501      	addls	r5, #1
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    3d06:	0a09      	lsrhi	r1, r1, #8
    3d08:	7069      	strbhi	r1, [r5, #1]
    3d0a:	3502      	addhi	r5, #2
    3d0c:	e7e8      	b.n	3ce0 <_spi_m_sync_trans+0x44>
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    3d0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    3d12:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    3d14:	2380      	movs	r3, #128	; 0x80
    3d16:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    3d18:	f06f 0012 	mvn.w	r0, #18
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    3d1c:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    3d1e:	f013 0f03 	tst.w	r3, #3
    3d22:	d0fb      	beq.n	3d1c <_spi_m_sync_trans+0x80>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    3d24:	2303      	movs	r3, #3
    3d26:	7623      	strb	r3, [r4, #24]
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
    3d28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    3d2c:	4293      	cmp	r3, r2
    3d2e:	d8de      	bhi.n	3cee <_spi_m_sync_trans+0x52>
    3d30:	e7f4      	b.n	3d1c <_spi_m_sync_trans+0x80>
		return ERR_BUSY;
    3d32:	f06f 0003 	mvn.w	r0, #3
    3d36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ERR_NOT_INITIALIZED;
    3d3a:	f06f 0013 	mvn.w	r0, #19
    3d3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ctrl.rxcnt >= ctrl.txcnt) {
    3d42:	4290      	cmp	r0, r2
    3d44:	d8cd      	bhi.n	3ce2 <_spi_m_sync_trans+0x46>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    3d46:	f013 0f01 	tst.w	r3, #1
    3d4a:	d0ca      	beq.n	3ce2 <_spi_m_sync_trans+0x46>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    3d4c:	f8b9 1006 	ldrh.w	r1, [r9, #6]
	if (ctrl->txbuf) {
    3d50:	f1b8 0f00 	cmp.w	r8, #0
    3d54:	d00b      	beq.n	3d6e <_spi_m_sync_trans+0xd2>
		data = *ctrl->txbuf++;
    3d56:	f898 1000 	ldrb.w	r1, [r8]
		if (ctrl->char_size > 1) {
    3d5a:	2f01      	cmp	r7, #1
		data = *ctrl->txbuf++;
    3d5c:	bf91      	iteee	ls
    3d5e:	f108 0801 	addls.w	r8, r8, #1
			data |= (*ctrl->txbuf) << 8;
    3d62:	f898 e001 	ldrbhi.w	lr, [r8, #1]
    3d66:	ea41 210e 	orrhi.w	r1, r1, lr, lsl #8
			ctrl->txbuf++;
    3d6a:	f108 0802 	addhi.w	r8, r8, #2
	ctrl->txcnt++;
    3d6e:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
    3d70:	62a1      	str	r1, [r4, #40]	; 0x28
    3d72:	e7b6      	b.n	3ce2 <_spi_m_sync_trans+0x46>
    3d74:	0000ef64 	.word	0x0000ef64
    3d78:	000026b1 	.word	0x000026b1

00003d7c <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    3d7c:	4b03      	ldr	r3, [pc, #12]	; (3d8c <_delay_init+0x10>)
    3d7e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    3d82:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    3d84:	2205      	movs	r2, #5
    3d86:	601a      	str	r2, [r3, #0]
    3d88:	4770      	bx	lr
    3d8a:	bf00      	nop
    3d8c:	e000e010 	.word	0xe000e010

00003d90 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    3d90:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    3d92:	b303      	cbz	r3, 3dd6 <_delay_cycles+0x46>
{
    3d94:	b430      	push	{r4, r5}
    3d96:	1e5d      	subs	r5, r3, #1
    3d98:	b2ed      	uxtb	r5, r5
	while (n--) {
    3d9a:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    3d9c:	4a12      	ldr	r2, [pc, #72]	; (3de8 <_delay_cycles+0x58>)
    3d9e:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    3da2:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    3da4:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    3da6:	6813      	ldr	r3, [r2, #0]
    3da8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    3dac:	d0fb      	beq.n	3da6 <_delay_cycles+0x16>
	while (n--) {
    3dae:	3801      	subs	r0, #1
    3db0:	b2c0      	uxtb	r0, r0
    3db2:	28ff      	cmp	r0, #255	; 0xff
    3db4:	d1f5      	bne.n	3da2 <_delay_cycles+0x12>
    3db6:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    3dba:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    3dbe:	3101      	adds	r1, #1
    3dc0:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    3dc2:	4b09      	ldr	r3, [pc, #36]	; (3de8 <_delay_cycles+0x58>)
    3dc4:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    3dc6:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    3dc8:	461a      	mov	r2, r3
    3dca:	6813      	ldr	r3, [r2, #0]
    3dcc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    3dd0:	d0fb      	beq.n	3dca <_delay_cycles+0x3a>
		;
}
    3dd2:	bc30      	pop	{r4, r5}
    3dd4:	4770      	bx	lr
	SysTick->LOAD = buf;
    3dd6:	4b04      	ldr	r3, [pc, #16]	; (3de8 <_delay_cycles+0x58>)
    3dd8:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    3dda:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    3ddc:	461a      	mov	r2, r3
    3dde:	6813      	ldr	r3, [r2, #0]
    3de0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    3de4:	d0fb      	beq.n	3dde <_delay_cycles+0x4e>
    3de6:	4770      	bx	lr
    3de8:	e000e010 	.word	0xe000e010

00003dec <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    3dec:	b570      	push	{r4, r5, r6, lr}
    3dee:	b088      	sub	sp, #32
    3df0:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    3df2:	466c      	mov	r4, sp
    3df4:	4d12      	ldr	r5, [pc, #72]	; (3e40 <get_tc_index+0x54>)
    3df6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    3df8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    3dfa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    3dfe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    3e02:	9b00      	ldr	r3, [sp, #0]
    3e04:	42b3      	cmp	r3, r6
    3e06:	d00b      	beq.n	3e20 <get_tc_index+0x34>
    3e08:	4630      	mov	r0, r6
    3e0a:	aa01      	add	r2, sp, #4
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    3e0c:	2301      	movs	r3, #1
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    3e0e:	f852 1b04 	ldr.w	r1, [r2], #4
    3e12:	4281      	cmp	r1, r0
    3e14:	d005      	beq.n	3e22 <get_tc_index+0x36>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    3e16:	3301      	adds	r3, #1
    3e18:	2b08      	cmp	r3, #8
    3e1a:	d1f8      	bne.n	3e0e <get_tc_index+0x22>
			return i;
    3e1c:	2000      	movs	r0, #0
    3e1e:	e00b      	b.n	3e38 <get_tc_index+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    3e20:	2300      	movs	r3, #0
		if (_tcs[i].number == index) {
    3e22:	f013 0fff 	tst.w	r3, #255	; 0xff
    3e26:	d009      	beq.n	3e3c <get_tc_index+0x50>
	ASSERT(false);
    3e28:	f44f 72a0 	mov.w	r2, #320	; 0x140
    3e2c:	4905      	ldr	r1, [pc, #20]	; (3e44 <get_tc_index+0x58>)
    3e2e:	2000      	movs	r0, #0
    3e30:	4b05      	ldr	r3, [pc, #20]	; (3e48 <get_tc_index+0x5c>)
    3e32:	4798      	blx	r3
	return -1;
    3e34:	f04f 30ff 	mov.w	r0, #4294967295
}
    3e38:	b008      	add	sp, #32
    3e3a:	bd70      	pop	{r4, r5, r6, pc}
			return i;
    3e3c:	2000      	movs	r0, #0
    3e3e:	e7fb      	b.n	3e38 <get_tc_index+0x4c>
    3e40:	0000ef80 	.word	0x0000ef80
    3e44:	0000efb4 	.word	0x0000efb4
    3e48:	000026b1 	.word	0x000026b1

00003e4c <_timer_init>:
{
    3e4c:	b570      	push	{r4, r5, r6, lr}
    3e4e:	4606      	mov	r6, r0
    3e50:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    3e52:	4608      	mov	r0, r1
    3e54:	4b47      	ldr	r3, [pc, #284]	; (3f74 <_timer_init+0x128>)
    3e56:	4798      	blx	r3
    3e58:	4605      	mov	r5, r0
	device->hw = hw;
    3e5a:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    3e5c:	228e      	movs	r2, #142	; 0x8e
    3e5e:	4946      	ldr	r1, [pc, #280]	; (3f78 <_timer_init+0x12c>)
    3e60:	2001      	movs	r0, #1
    3e62:	4b46      	ldr	r3, [pc, #280]	; (3f7c <_timer_init+0x130>)
    3e64:	4798      	blx	r3
	};
}

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    3e66:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    3e68:	f013 0f01 	tst.w	r3, #1
    3e6c:	d111      	bne.n	3e92 <_timer_init+0x46>
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    3e6e:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    3e70:	f013 0f02 	tst.w	r3, #2
    3e74:	d00b      	beq.n	3e8e <_timer_init+0x42>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3e76:	6923      	ldr	r3, [r4, #16]
    3e78:	f013 0f03 	tst.w	r3, #3
    3e7c:	d1fb      	bne.n	3e76 <_timer_init+0x2a>
	((Tc *)hw)->COUNT8.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    3e7e:	6823      	ldr	r3, [r4, #0]
    3e80:	f023 0302 	bic.w	r3, r3, #2
    3e84:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3e86:	6923      	ldr	r3, [r4, #16]
    3e88:	f013 0f02 	tst.w	r3, #2
    3e8c:	d1fb      	bne.n	3e86 <_timer_init+0x3a>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CTRLA.reg = data;
    3e8e:	2301      	movs	r3, #1
    3e90:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3e92:	6923      	ldr	r3, [r4, #16]
    3e94:	f013 0f01 	tst.w	r3, #1
    3e98:	d1fb      	bne.n	3e92 <_timer_init+0x46>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    3e9a:	eb05 0285 	add.w	r2, r5, r5, lsl #2
    3e9e:	4b38      	ldr	r3, [pc, #224]	; (3f80 <_timer_init+0x134>)
    3ea0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    3ea4:	6a53      	ldr	r3, [r2, #36]	; 0x24
	((Tc *)hw)->COUNT8.CTRLA.reg = data;
    3ea6:	6023      	str	r3, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    3ea8:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.DBGCTRL.reg = data;
    3eac:	73e1      	strb	r1, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    3eae:	8d12      	ldrh	r2, [r2, #40]	; 0x28
	((Tc *)hw)->COUNT8.EVCTRL.reg = data;
    3eb0:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT8.WAVE.reg = data;
    3eb2:	2201      	movs	r2, #1
    3eb4:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    3eb6:	f003 030c 	and.w	r3, r3, #12
    3eba:	2b08      	cmp	r3, #8
    3ebc:	d040      	beq.n	3f40 <_timer_init+0xf4>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    3ebe:	2b00      	cmp	r3, #0
    3ec0:	d148      	bne.n	3f54 <_timer_init+0x108>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    3ec2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    3ec6:	4a2e      	ldr	r2, [pc, #184]	; (3f80 <_timer_init+0x134>)
    3ec8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3ecc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    3ece:	83a3      	strh	r3, [r4, #28]
    3ed0:	2300      	movs	r3, #0
    3ed2:	83e3      	strh	r3, [r4, #30]
	((Tc *)hw)->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    3ed4:	2301      	movs	r3, #1
    3ed6:	7263      	strb	r3, [r4, #9]
	if (hw == TC0) {
    3ed8:	4b2a      	ldr	r3, [pc, #168]	; (3f84 <_timer_init+0x138>)
    3eda:	429c      	cmp	r4, r3
		_tc0_dev = (struct _timer_device *)dev;
    3edc:	bf04      	itt	eq
    3ede:	4b2a      	ldreq	r3, [pc, #168]	; (3f88 <_timer_init+0x13c>)
    3ee0:	601e      	streq	r6, [r3, #0]
	NVIC_DisableIRQ(_tcs[i].irq);
    3ee2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    3ee6:	4a26      	ldr	r2, [pc, #152]	; (3f80 <_timer_init+0x134>)
    3ee8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3eec:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    3ef0:	2b00      	cmp	r3, #0
    3ef2:	db23      	blt.n	3f3c <_timer_init+0xf0>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3ef4:	095a      	lsrs	r2, r3, #5
    3ef6:	f003 031f 	and.w	r3, r3, #31
    3efa:	2101      	movs	r1, #1
    3efc:	fa01 f303 	lsl.w	r3, r1, r3
    3f00:	3220      	adds	r2, #32
    3f02:	4922      	ldr	r1, [pc, #136]	; (3f8c <_timer_init+0x140>)
    3f04:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    3f08:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3f0c:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    3f10:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    3f14:	4b1a      	ldr	r3, [pc, #104]	; (3f80 <_timer_init+0x134>)
    3f16:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    3f1a:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    3f1e:	2b00      	cmp	r3, #0
    3f20:	db0c      	blt.n	3f3c <_timer_init+0xf0>
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3f22:	0959      	lsrs	r1, r3, #5
    3f24:	f003 031f 	and.w	r3, r3, #31
    3f28:	2201      	movs	r2, #1
    3f2a:	fa02 f303 	lsl.w	r3, r2, r3
    3f2e:	4a17      	ldr	r2, [pc, #92]	; (3f8c <_timer_init+0x140>)
    3f30:	f101 0060 	add.w	r0, r1, #96	; 0x60
    3f34:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3f38:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    3f3c:	2000      	movs	r0, #0
    3f3e:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    3f40:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    3f44:	4a0e      	ldr	r2, [pc, #56]	; (3f80 <_timer_init+0x134>)
    3f46:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    3f4c:	61e3      	str	r3, [r4, #28]
    3f4e:	2300      	movs	r3, #0
    3f50:	6223      	str	r3, [r4, #32]
    3f52:	e7bf      	b.n	3ed4 <_timer_init+0x88>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    3f54:	2b04      	cmp	r3, #4
    3f56:	d1bd      	bne.n	3ed4 <_timer_init+0x88>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    3f58:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    3f5c:	4a08      	ldr	r2, [pc, #32]	; (3f80 <_timer_init+0x134>)
    3f5e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3f62:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tc_cc8_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    3f66:	7722      	strb	r2, [r4, #28]
    3f68:	2200      	movs	r2, #0
    3f6a:	7762      	strb	r2, [r4, #29]
		hri_tc_write_PER_reg(hw, _tcs[i].per);
    3f6c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	((Tc *)hw)->COUNT8.PER.reg = data;
    3f70:	76e3      	strb	r3, [r4, #27]
    3f72:	e7af      	b.n	3ed4 <_timer_init+0x88>
    3f74:	00003ded 	.word	0x00003ded
    3f78:	0000efb4 	.word	0x0000efb4
    3f7c:	000026b1 	.word	0x000026b1
    3f80:	0000ef80 	.word	0x0000ef80
    3f84:	40003800 	.word	0x40003800
    3f88:	20007050 	.word	0x20007050
    3f8c:	e000e100 	.word	0xe000e100

00003f90 <_timer_start>:
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    3f90:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3f92:	6913      	ldr	r3, [r2, #16]
    3f94:	f013 0f03 	tst.w	r3, #3
    3f98:	d1fb      	bne.n	3f92 <_timer_start+0x2>
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    3f9a:	6813      	ldr	r3, [r2, #0]
    3f9c:	f043 0302 	orr.w	r3, r3, #2
    3fa0:	6013      	str	r3, [r2, #0]
    3fa2:	4770      	bx	lr

00003fa4 <_timer_is_started>:
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    3fa4:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3fa6:	6913      	ldr	r3, [r2, #16]
    3fa8:	f013 0f03 	tst.w	r3, #3
    3fac:	d1fb      	bne.n	3fa6 <_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    3fae:	6810      	ldr	r0, [r2, #0]
}
    3fb0:	f3c0 0040 	ubfx	r0, r0, #1, #1
    3fb4:	4770      	bx	lr

00003fb6 <_tc_get_timer>:
}
    3fb6:	2000      	movs	r0, #0
    3fb8:	4770      	bx	lr
	...

00003fbc <_timer_set_irq>:
{
    3fbc:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    3fbe:	68c0      	ldr	r0, [r0, #12]
    3fc0:	4b09      	ldr	r3, [pc, #36]	; (3fe8 <_timer_set_irq+0x2c>)
    3fc2:	4798      	blx	r3
    3fc4:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    3fc6:	f240 1213 	movw	r2, #275	; 0x113
    3fca:	4908      	ldr	r1, [pc, #32]	; (3fec <_timer_set_irq+0x30>)
    3fcc:	2001      	movs	r0, #1
    3fce:	4b08      	ldr	r3, [pc, #32]	; (3ff0 <_timer_set_irq+0x34>)
    3fd0:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    3fd2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    3fd6:	4b07      	ldr	r3, [pc, #28]	; (3ff4 <_timer_set_irq+0x38>)
    3fd8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    3fdc:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
    3fe0:	4b05      	ldr	r3, [pc, #20]	; (3ff8 <_timer_set_irq+0x3c>)
    3fe2:	4798      	blx	r3
    3fe4:	bd10      	pop	{r4, pc}
    3fe6:	bf00      	nop
    3fe8:	00003ded 	.word	0x00003ded
    3fec:	0000efb4 	.word	0x0000efb4
    3ff0:	000026b1 	.word	0x000026b1
    3ff4:	0000ef80 	.word	0x0000ef80
    3ff8:	000029d1 	.word	0x000029d1

00003ffc <TC0_Handler>:
{
    3ffc:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
    3ffe:	4b06      	ldr	r3, [pc, #24]	; (4018 <TC0_Handler+0x1c>)
    4000:	6818      	ldr	r0, [r3, #0]
	void *const hw = device->hw;
    4002:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT8.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    4004:	7a9a      	ldrb	r2, [r3, #10]
	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    4006:	f012 0f01 	tst.w	r2, #1
    400a:	d100      	bne.n	400e <TC0_Handler+0x12>
    400c:	bd08      	pop	{r3, pc}
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    400e:	2201      	movs	r2, #1
    4010:	729a      	strb	r2, [r3, #10]
		device->timer_cb.period_expired(device);
    4012:	6803      	ldr	r3, [r0, #0]
    4014:	4798      	blx	r3
}
    4016:	e7f9      	b.n	400c <TC0_Handler+0x10>
    4018:	20007050 	.word	0x20007050

0000401c <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    401c:	2000      	movs	r0, #0
    401e:	4770      	bx	lr

00004020 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    4020:	b538      	push	{r3, r4, r5, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    4022:	7c83      	ldrb	r3, [r0, #18]
    4024:	f003 030f 	and.w	r3, r3, #15
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    4028:	7cc2      	ldrb	r2, [r0, #19]

	if (!is_ctrl) {
    402a:	f002 0107 	and.w	r1, r2, #7
    402e:	2901      	cmp	r1, #1
    4030:	d00b      	beq.n	404a <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    4032:	015a      	lsls	r2, r3, #5
    4034:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    4038:	2110      	movs	r1, #16
    403a:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    403e:	015b      	lsls	r3, r3, #5
    4040:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4044:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
    4048:	bd38      	pop	{r3, r4, r5, pc}
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    404a:	f012 0f40 	tst.w	r2, #64	; 0x40
    404e:	d00c      	beq.n	406a <_usb_d_dev_handle_setup+0x4a>
		ept->flags.bits.is_busy = 0;
    4050:	7cc2      	ldrb	r2, [r0, #19]
    4052:	f36f 1286 	bfc	r2, #6, #1
    4056:	74c2      	strb	r2, [r0, #19]
    4058:	015a      	lsls	r2, r3, #5
    405a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    405e:	2180      	movs	r1, #128	; 0x80
    4060:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    4064:	2140      	movs	r1, #64	; 0x40
    4066:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	ept->flags.bits.is_stalled = 0;
    406a:	7cc2      	ldrb	r2, [r0, #19]
    406c:	f36f 02c3 	bfc	r2, #3, #1
    4070:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    4072:	4909      	ldr	r1, [pc, #36]	; (4098 <_usb_d_dev_handle_setup+0x78>)
    4074:	015a      	lsls	r2, r3, #5
    4076:	188c      	adds	r4, r1, r2
    4078:	2500      	movs	r5, #0
    407a:	72a5      	strb	r5, [r4, #10]
    407c:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    407e:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    4082:	246f      	movs	r4, #111	; 0x6f
    4084:	f883 4107 	strb.w	r4, [r3, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    4088:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    408c:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
	_usbd_ep_clear_bank_status(epn, 0);
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    4090:	6e8b      	ldr	r3, [r1, #104]	; 0x68
    4092:	7c80      	ldrb	r0, [r0, #18]
    4094:	4798      	blx	r3
    4096:	bd38      	pop	{r3, r4, r5, pc}
    4098:	20007054 	.word	0x20007054

0000409c <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    409c:	b508      	push	{r3, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    409e:	2320      	movs	r3, #32
    40a0:	fa03 f101 	lsl.w	r1, r3, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    40a4:	b2c9      	uxtb	r1, r1
	uint8_t epn = USB_EP_GET_N(ept->ep);
    40a6:	7c83      	ldrb	r3, [r0, #18]
    40a8:	f003 030f 	and.w	r3, r3, #15
    40ac:	015b      	lsls	r3, r3, #5
    40ae:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    40b2:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    40b6:	4b03      	ldr	r3, [pc, #12]	; (40c4 <_usb_d_dev_handle_stall+0x28>)
    40b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    40ba:	6882      	ldr	r2, [r0, #8]
    40bc:	2101      	movs	r1, #1
    40be:	7c80      	ldrb	r0, [r0, #18]
    40c0:	4798      	blx	r3
    40c2:	bd08      	pop	{r3, pc}
    40c4:	20007054 	.word	0x20007054

000040c8 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    40c8:	b538      	push	{r3, r4, r5, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    40ca:	7c84      	ldrb	r4, [r0, #18]
    40cc:	2cff      	cmp	r4, #255	; 0xff
    40ce:	d003      	beq.n	40d8 <_usb_d_dev_trans_done+0x10>
    40d0:	7cc3      	ldrb	r3, [r0, #19]
    40d2:	f013 0f40 	tst.w	r3, #64	; 0x40
    40d6:	d100      	bne.n	40da <_usb_d_dev_trans_done+0x12>
    40d8:	bd38      	pop	{r3, r4, r5, pc}
		return;
	}
	ept->flags.bits.is_busy = 0;
    40da:	7cc2      	ldrb	r2, [r0, #19]
    40dc:	f36f 1286 	bfc	r2, #6, #1
    40e0:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    40e2:	4a03      	ldr	r2, [pc, #12]	; (40f0 <_usb_d_dev_trans_done+0x28>)
    40e4:	6f15      	ldr	r5, [r2, #112]	; 0x70
    40e6:	6882      	ldr	r2, [r0, #8]
    40e8:	4620      	mov	r0, r4
    40ea:	47a8      	blx	r5
    40ec:	e7f4      	b.n	40d8 <_usb_d_dev_trans_done+0x10>
    40ee:	bf00      	nop
    40f0:	20007054 	.word	0x20007054

000040f4 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    40f4:	b530      	push	{r4, r5, lr}
    40f6:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    40f8:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    40fa:	2425      	movs	r4, #37	; 0x25
    40fc:	f88d 4004 	strb.w	r4, [sp, #4]
    4100:	244a      	movs	r4, #74	; 0x4a
    4102:	f88d 4005 	strb.w	r4, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    4106:	2bff      	cmp	r3, #255	; 0xff
    4108:	d01e      	beq.n	4148 <_usb_d_dev_trans_stop+0x54>
    410a:	7cc4      	ldrb	r4, [r0, #19]
    410c:	f014 0f40 	tst.w	r4, #64	; 0x40
    4110:	d01a      	beq.n	4148 <_usb_d_dev_trans_stop+0x54>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    4112:	f003 040f 	and.w	r4, r3, #15
		return;
	}
	/* Stop transfer */
	if (dir) {
    4116:	b1c9      	cbz	r1, 414c <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    4118:	0163      	lsls	r3, r4, #5
    411a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    411e:	2580      	movs	r5, #128	; 0x80
    4120:	f883 5104 	strb.w	r5, [r3, #260]	; 0x104
    4124:	460b      	mov	r3, r1
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    4126:	a902      	add	r1, sp, #8
    4128:	440b      	add	r3, r1
    412a:	f813 1c04 	ldrb.w	r1, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    412e:	0163      	lsls	r3, r4, #5
    4130:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4134:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    4138:	0163      	lsls	r3, r4, #5
    413a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    413e:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    4142:	4611      	mov	r1, r2
    4144:	4b05      	ldr	r3, [pc, #20]	; (415c <_usb_d_dev_trans_stop+0x68>)
    4146:	4798      	blx	r3
}
    4148:	b003      	add	sp, #12
    414a:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    414c:	0163      	lsls	r3, r4, #5
    414e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4152:	2540      	movs	r5, #64	; 0x40
    4154:	f883 5105 	strb.w	r5, [r3, #261]	; 0x105
    4158:	e7e4      	b.n	4124 <_usb_d_dev_trans_stop+0x30>
    415a:	bf00      	nop
    415c:	000040c9 	.word	0x000040c9

00004160 <_usb_d_dev_handle_trfail>:
{
    4160:	b530      	push	{r4, r5, lr}
    4162:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    4164:	7c83      	ldrb	r3, [r0, #18]
    4166:	f003 030f 	and.w	r3, r3, #15
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    416a:	2204      	movs	r2, #4
    416c:	f88d 2004 	strb.w	r2, [sp, #4]
    4170:	2208      	movs	r2, #8
    4172:	f88d 2005 	strb.w	r2, [sp, #5]
    4176:	015a      	lsls	r2, r3, #5
	uint8_t            eptype
    4178:	460c      	mov	r4, r1
    417a:	b391      	cbz	r1, 41e2 <_usb_d_dev_handle_trfail+0x82>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    417c:	f102 4182 	add.w	r1, r2, #1090519040	; 0x41000000
    4180:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    4184:	f3c5 1502 	ubfx	r5, r5, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
    4188:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    418c:	4a32      	ldr	r2, [pc, #200]	; (4258 <_usb_d_dev_handle_trfail+0xf8>)
    418e:	440a      	add	r2, r1
    4190:	7a91      	ldrb	r1, [r2, #10]
    4192:	b2c9      	uxtb	r1, r1
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    4194:	2d02      	cmp	r5, #2
    4196:	d02c      	beq.n	41f2 <_usb_d_dev_handle_trfail+0x92>
	} else if (st.bit.ERRORFLOW) {
    4198:	f011 0f02 	tst.w	r1, #2
    419c:	d045      	beq.n	422a <_usb_d_dev_handle_trfail+0xca>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    419e:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    41a0:	7a91      	ldrb	r1, [r2, #10]
    41a2:	f36f 0141 	bfc	r1, #1, #1
    41a6:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    41a8:	aa02      	add	r2, sp, #8
    41aa:	4422      	add	r2, r4
    41ac:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    41b0:	015a      	lsls	r2, r3, #5
    41b2:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    41b6:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    41ba:	015b      	lsls	r3, r3, #5
    41bc:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    41c0:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    41c4:	f005 0307 	and.w	r3, r5, #7
    41c8:	2b01      	cmp	r3, #1
    41ca:	d143      	bne.n	4254 <_usb_d_dev_handle_trfail+0xf4>
    41cc:	7cc3      	ldrb	r3, [r0, #19]
    41ce:	f013 0f40 	tst.w	r3, #64	; 0x40
    41d2:	d03f      	beq.n	4254 <_usb_d_dev_handle_trfail+0xf4>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    41d4:	09d9      	lsrs	r1, r3, #7
    41d6:	428c      	cmp	r4, r1
    41d8:	d03c      	beq.n	4254 <_usb_d_dev_handle_trfail+0xf4>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    41da:	2200      	movs	r2, #0
    41dc:	4b1f      	ldr	r3, [pc, #124]	; (425c <_usb_d_dev_handle_trfail+0xfc>)
    41de:	4798      	blx	r3
    41e0:	e038      	b.n	4254 <_usb_d_dev_handle_trfail+0xf4>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    41e2:	0159      	lsls	r1, r3, #5
    41e4:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    41e8:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    41ec:	f005 0507 	and.w	r5, r5, #7
    41f0:	e7ca      	b.n	4188 <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    41f2:	f011 0f01 	tst.w	r1, #1
    41f6:	d0cf      	beq.n	4198 <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    41f8:	7a91      	ldrb	r1, [r2, #10]
    41fa:	f36f 0100 	bfc	r1, #0, #1
    41fe:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    4200:	aa02      	add	r2, sp, #8
    4202:	4422      	add	r2, r4
    4204:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    4208:	015a      	lsls	r2, r3, #5
    420a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    420e:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    4212:	015b      	lsls	r3, r3, #5
    4214:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4218:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    421c:	2204      	movs	r2, #4
    421e:	1c21      	adds	r1, r4, #0
    4220:	bf18      	it	ne
    4222:	2101      	movne	r1, #1
    4224:	4b0d      	ldr	r3, [pc, #52]	; (425c <_usb_d_dev_handle_trfail+0xfc>)
    4226:	4798      	blx	r3
    4228:	e014      	b.n	4254 <_usb_d_dev_handle_trfail+0xf4>
	bank->STATUS_BK.reg     = 0;
    422a:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    422e:	4a0a      	ldr	r2, [pc, #40]	; (4258 <_usb_d_dev_handle_trfail+0xf8>)
    4230:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    4234:	2100      	movs	r1, #0
    4236:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    4238:	aa02      	add	r2, sp, #8
    423a:	4414      	add	r4, r2
    423c:	f814 1c04 	ldrb.w	r1, [r4, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    4240:	015a      	lsls	r2, r3, #5
    4242:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    4246:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    424a:	015b      	lsls	r3, r3, #5
    424c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4250:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
}
    4254:	b003      	add	sp, #12
    4256:	bd30      	pop	{r4, r5, pc}
    4258:	20007054 	.word	0x20007054
    425c:	000040f5 	.word	0x000040f5

00004260 <_usb_d_dev_reset_epts>:
{
    4260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4264:	4d0c      	ldr	r5, [pc, #48]	; (4298 <_usb_d_dev_reset_epts+0x38>)
    4266:	f105 0474 	add.w	r4, r5, #116	; 0x74
    426a:	f505 7594 	add.w	r5, r5, #296	; 0x128
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    426e:	f04f 0803 	mov.w	r8, #3
    4272:	4f0a      	ldr	r7, [pc, #40]	; (429c <_usb_d_dev_reset_epts+0x3c>)
		dev_inst.ep[i].ep       = 0xFF;
    4274:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    4276:	4641      	mov	r1, r8
    4278:	4620      	mov	r0, r4
    427a:	47b8      	blx	r7
		dev_inst.ep[i].ep       = 0xFF;
    427c:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    427e:	2300      	movs	r3, #0
    4280:	74e3      	strb	r3, [r4, #19]
    4282:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    4284:	42ac      	cmp	r4, r5
    4286:	d1f6      	bne.n	4276 <_usb_d_dev_reset_epts+0x16>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    4288:	2260      	movs	r2, #96	; 0x60
    428a:	4619      	mov	r1, r3
    428c:	4802      	ldr	r0, [pc, #8]	; (4298 <_usb_d_dev_reset_epts+0x38>)
    428e:	4b04      	ldr	r3, [pc, #16]	; (42a0 <_usb_d_dev_reset_epts+0x40>)
    4290:	4798      	blx	r3
    4292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4296:	bf00      	nop
    4298:	20007054 	.word	0x20007054
    429c:	000040c9 	.word	0x000040c9
    42a0:	0000dab5 	.word	0x0000dab5

000042a4 <_usb_d_dev_in_next>:
{
    42a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    42a8:	4605      	mov	r5, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    42aa:	7c84      	ldrb	r4, [r0, #18]
    42ac:	f004 040f 	and.w	r4, r4, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    42b0:	4688      	mov	r8, r1
    42b2:	2900      	cmp	r1, #0
    42b4:	f000 809f 	beq.w	43f6 <_usb_d_dev_in_next+0x152>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    42b8:	4b58      	ldr	r3, [pc, #352]	; (441c <_usb_d_dev_in_next+0x178>)
    42ba:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    42be:	6958      	ldr	r0, [r3, #20]
    42c0:	f3c0 0e0d 	ubfx	lr, r0, #0, #14
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    42c4:	8a2b      	ldrh	r3, [r5, #16]
    42c6:	f240 32ff 	movw	r2, #1023	; 0x3ff
    42ca:	4293      	cmp	r3, r2
    42cc:	f000 808d 	beq.w	43ea <_usb_d_dev_in_next+0x146>
    42d0:	3b01      	subs	r3, #1
    42d2:	b298      	uxth	r0, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    42d4:	7cef      	ldrb	r7, [r5, #19]
    42d6:	f007 0707 	and.w	r7, r7, #7
	if (isr) {
    42da:	f1b8 0f00 	cmp.w	r8, #0
    42de:	d005      	beq.n	42ec <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    42e0:	0162      	lsls	r2, r4, #5
    42e2:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    42e6:	2302      	movs	r3, #2
    42e8:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
	ept->trans_count += trans_count;
    42ec:	68a9      	ldr	r1, [r5, #8]
    42ee:	eb0e 0301 	add.w	r3, lr, r1
    42f2:	60ab      	str	r3, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    42f4:	686e      	ldr	r6, [r5, #4]
    42f6:	42b3      	cmp	r3, r6
    42f8:	d23f      	bcs.n	437a <_usb_d_dev_in_next+0xd6>
		trans_next = ept->trans_size - ept->trans_count;
    42fa:	1af6      	subs	r6, r6, r3
    42fc:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
    42fe:	7cea      	ldrb	r2, [r5, #19]
    4300:	f012 0f20 	tst.w	r2, #32
    4304:	d02d      	beq.n	4362 <_usb_d_dev_in_next+0xbe>
    4306:	8a2a      	ldrh	r2, [r5, #16]
    4308:	4296      	cmp	r6, r2
    430a:	bf28      	it	cs
    430c:	4616      	movcs	r6, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    430e:	6829      	ldr	r1, [r5, #0]
    4310:	4632      	mov	r2, r6
    4312:	4419      	add	r1, r3
    4314:	68e8      	ldr	r0, [r5, #12]
    4316:	4b42      	ldr	r3, [pc, #264]	; (4420 <_usb_d_dev_in_next+0x17c>)
    4318:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    431a:	68ea      	ldr	r2, [r5, #12]
	bank->ADDR.reg          = addr;
    431c:	4b3f      	ldr	r3, [pc, #252]	; (441c <_usb_d_dev_in_next+0x178>)
    431e:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    4322:	611a      	str	r2, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    4324:	4b3d      	ldr	r3, [pc, #244]	; (441c <_usb_d_dev_in_next+0x178>)
    4326:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    432a:	695a      	ldr	r2, [r3, #20]
    432c:	f366 020d 	bfi	r2, r6, #0, #14
    4330:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    4332:	695a      	ldr	r2, [r3, #20]
    4334:	f36f 329b 	bfc	r2, #14, #14
    4338:	615a      	str	r2, [r3, #20]
	if (!isr) {
    433a:	f1b8 0f00 	cmp.w	r8, #0
    433e:	d108      	bne.n	4352 <_usb_d_dev_in_next+0xae>
			inten = USB_D_BANK1_INT_FLAGS;
    4340:	2f01      	cmp	r7, #1
    4342:	bf0c      	ite	eq
    4344:	224e      	moveq	r2, #78	; 0x4e
    4346:	224a      	movne	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    4348:	0163      	lsls	r3, r4, #5
    434a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    434e:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    4352:	0164      	lsls	r4, r4, #5
    4354:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    4358:	2380      	movs	r3, #128	; 0x80
    435a:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
    435e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4362:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    4366:	bf28      	it	cs
    4368:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    436c:	6829      	ldr	r1, [r5, #0]
    436e:	440b      	add	r3, r1
	bank->ADDR.reg          = addr;
    4370:	4a2a      	ldr	r2, [pc, #168]	; (441c <_usb_d_dev_in_next+0x178>)
    4372:	eb02 1244 	add.w	r2, r2, r4, lsl #5
    4376:	6113      	str	r3, [r2, #16]
    4378:	e7d4      	b.n	4324 <_usb_d_dev_in_next+0x80>
	} else if (ept->flags.bits.need_zlp) {
    437a:	7ceb      	ldrb	r3, [r5, #19]
    437c:	f013 0f10 	tst.w	r3, #16
    4380:	d00f      	beq.n	43a2 <_usb_d_dev_in_next+0xfe>
		ept->flags.bits.need_zlp = 0;
    4382:	7ceb      	ldrb	r3, [r5, #19]
    4384:	f36f 1304 	bfc	r3, #4, #1
    4388:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    438a:	4b24      	ldr	r3, [pc, #144]	; (441c <_usb_d_dev_in_next+0x178>)
    438c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    4390:	695a      	ldr	r2, [r3, #20]
    4392:	f36f 020d 	bfc	r2, #0, #14
    4396:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    4398:	695a      	ldr	r2, [r3, #20]
    439a:	f36f 329b 	bfc	r2, #14, #14
    439e:	615a      	str	r2, [r3, #20]
    43a0:	e7cb      	b.n	433a <_usb_d_dev_in_next+0x96>
	if (is_ctrl) {
    43a2:	2f01      	cmp	r7, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    43a4:	ea4f 1444 	mov.w	r4, r4, lsl #5
    43a8:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    43ac:	bf0c      	ite	eq
    43ae:	234b      	moveq	r3, #75	; 0x4b
    43b0:	234a      	movne	r3, #74	; 0x4a
    43b2:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
	if (last_pkt == ept->size) {
    43b6:	8a2a      	ldrh	r2, [r5, #16]
    43b8:	ea00 030e 	and.w	r3, r0, lr
    43bc:	429a      	cmp	r2, r3
    43be:	d005      	beq.n	43cc <_usb_d_dev_in_next+0x128>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    43c0:	2100      	movs	r1, #0
    43c2:	4628      	mov	r0, r5
    43c4:	4b17      	ldr	r3, [pc, #92]	; (4424 <_usb_d_dev_in_next+0x180>)
    43c6:	4798      	blx	r3
	return;
    43c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
    43cc:	7ceb      	ldrb	r3, [r5, #19]
    43ce:	f36f 1386 	bfc	r3, #6, #1
    43d2:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    43d4:	4b11      	ldr	r3, [pc, #68]	; (441c <_usb_d_dev_in_next+0x178>)
    43d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    43d8:	68a9      	ldr	r1, [r5, #8]
    43da:	7ca8      	ldrb	r0, [r5, #18]
    43dc:	4798      	blx	r3
    43de:	b9d0      	cbnz	r0, 4416 <_usb_d_dev_in_next+0x172>
		ept->flags.bits.is_busy = 1;
    43e0:	7ceb      	ldrb	r3, [r5, #19]
    43e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    43e6:	74eb      	strb	r3, [r5, #19]
    43e8:	e7ea      	b.n	43c0 <_usb_d_dev_in_next+0x11c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    43ea:	7cef      	ldrb	r7, [r5, #19]
    43ec:	f007 0707 	and.w	r7, r7, #7
    43f0:	f240 30ff 	movw	r0, #1023	; 0x3ff
    43f4:	e774      	b.n	42e0 <_usb_d_dev_in_next+0x3c>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    43f6:	8a03      	ldrh	r3, [r0, #16]
    43f8:	f240 32ff 	movw	r2, #1023	; 0x3ff
    43fc:	4293      	cmp	r3, r2
    43fe:	d107      	bne.n	4410 <_usb_d_dev_in_next+0x16c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    4400:	7cef      	ldrb	r7, [r5, #19]
    4402:	f007 0707 	and.w	r7, r7, #7
    4406:	f04f 0e00 	mov.w	lr, #0
    440a:	f240 30ff 	movw	r0, #1023	; 0x3ff
    440e:	e76d      	b.n	42ec <_usb_d_dev_in_next+0x48>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    4410:	f04f 0e00 	mov.w	lr, #0
    4414:	e75c      	b.n	42d0 <_usb_d_dev_in_next+0x2c>
    4416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    441a:	bf00      	nop
    441c:	20007054 	.word	0x20007054
    4420:	0000da6b 	.word	0x0000da6b
    4424:	000040c9 	.word	0x000040c9

00004428 <_usb_d_dev_out_next>:
{
    4428:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    442c:	4604      	mov	r4, r0
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    442e:	7c85      	ldrb	r5, [r0, #18]
    4430:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    4434:	4689      	mov	r9, r1
    4436:	2900      	cmp	r1, #0
    4438:	d056      	beq.n	44e8 <_usb_d_dev_out_next+0xc0>
    443a:	4b74      	ldr	r3, [pc, #464]	; (460c <_usb_d_dev_out_next+0x1e4>)
    443c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    4440:	685a      	ldr	r2, [r3, #4]
    4442:	f3c2 3a8d 	ubfx	sl, r2, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    4446:	685f      	ldr	r7, [r3, #4]
    4448:	f3c7 070d 	ubfx	r7, r7, #0, #14
    444c:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    444e:	8a06      	ldrh	r6, [r0, #16]
    4450:	f240 33ff 	movw	r3, #1023	; 0x3ff
    4454:	429e      	cmp	r6, r3
    4456:	f000 80ba 	beq.w	45ce <_usb_d_dev_out_next+0x1a6>
    445a:	3e01      	subs	r6, #1
    445c:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    445e:	ea06 070b 	and.w	r7, r6, fp
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    4462:	f894 8013 	ldrb.w	r8, [r4, #19]
    4466:	f008 0807 	and.w	r8, r8, #7
	if (isr) {
    446a:	f1b9 0f00 	cmp.w	r9, #0
    446e:	d005      	beq.n	447c <_usb_d_dev_out_next+0x54>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    4470:	016b      	lsls	r3, r5, #5
    4472:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4476:	2201      	movs	r2, #1
    4478:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
    447c:	7ce3      	ldrb	r3, [r4, #19]
    447e:	f013 0f20 	tst.w	r3, #32
    4482:	d00d      	beq.n	44a0 <_usb_d_dev_out_next+0x78>
    4484:	6862      	ldr	r2, [r4, #4]
    4486:	2a00      	cmp	r2, #0
    4488:	d037      	beq.n	44fa <_usb_d_dev_out_next+0xd2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    448a:	68a0      	ldr	r0, [r4, #8]
    448c:	1a12      	subs	r2, r2, r0
    448e:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    4490:	6823      	ldr	r3, [r4, #0]
    4492:	42ba      	cmp	r2, r7
    4494:	bf28      	it	cs
    4496:	463a      	movcs	r2, r7
    4498:	68e1      	ldr	r1, [r4, #12]
    449a:	4418      	add	r0, r3
    449c:	4b5c      	ldr	r3, [pc, #368]	; (4610 <_usb_d_dev_out_next+0x1e8>)
    449e:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    44a0:	6863      	ldr	r3, [r4, #4]
    44a2:	b353      	cbz	r3, 44fa <_usb_d_dev_out_next+0xd2>
	} else if (isr && last_pkt < ept->size) {
    44a4:	f1b9 0f00 	cmp.w	r9, #0
    44a8:	d040      	beq.n	452c <_usb_d_dev_out_next+0x104>
    44aa:	8a22      	ldrh	r2, [r4, #16]
    44ac:	42ba      	cmp	r2, r7
    44ae:	d93d      	bls.n	452c <_usb_d_dev_out_next+0x104>
		ept->flags.bits.need_zlp = 0;
    44b0:	7ce3      	ldrb	r3, [r4, #19]
    44b2:	f36f 1304 	bfc	r3, #4, #1
    44b6:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    44b8:	68a3      	ldr	r3, [r4, #8]
    44ba:	445b      	add	r3, fp
    44bc:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    44be:	f1b8 0f01 	cmp.w	r8, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    44c2:	ea4f 1345 	mov.w	r3, r5, lsl #5
    44c6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    44ca:	bf0c      	ite	eq
    44cc:	222d      	moveq	r2, #45	; 0x2d
    44ce:	2225      	movne	r2, #37	; 0x25
    44d0:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (0 == epn) {
    44d4:	b915      	cbnz	r5, 44dc <_usb_d_dev_out_next+0xb4>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    44d6:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    44d8:	4b4c      	ldr	r3, [pc, #304]	; (460c <_usb_d_dev_out_next+0x1e4>)
    44da:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    44dc:	2100      	movs	r1, #0
    44de:	4620      	mov	r0, r4
    44e0:	4b4c      	ldr	r3, [pc, #304]	; (4614 <_usb_d_dev_out_next+0x1ec>)
    44e2:	4798      	blx	r3
	return;
    44e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    44e8:	8a06      	ldrh	r6, [r0, #16]
    44ea:	f240 33ff 	movw	r3, #1023	; 0x3ff
    44ee:	429e      	cmp	r6, r3
    44f0:	d07b      	beq.n	45ea <_usb_d_dev_out_next+0x1c2>
    44f2:	f04f 0b00 	mov.w	fp, #0
    44f6:	46da      	mov	sl, fp
    44f8:	e7af      	b.n	445a <_usb_d_dev_out_next+0x32>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    44fa:	7ce3      	ldrb	r3, [r4, #19]
    44fc:	f013 0f10 	tst.w	r3, #16
    4500:	d06c      	beq.n	45dc <_usb_d_dev_out_next+0x1b4>
		ept->flags.bits.need_zlp  = 0;
    4502:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    4504:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    4508:	f043 0320 	orr.w	r3, r3, #32
    450c:	74e3      	strb	r3, [r4, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    450e:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    4510:	493e      	ldr	r1, [pc, #248]	; (460c <_usb_d_dev_out_next+0x1e4>)
    4512:	016a      	lsls	r2, r5, #5
    4514:	188b      	adds	r3, r1, r2
    4516:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    4518:	8a21      	ldrh	r1, [r4, #16]
    451a:	685a      	ldr	r2, [r3, #4]
    451c:	f361 329b 	bfi	r2, r1, #14, #14
    4520:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    4522:	685a      	ldr	r2, [r3, #4]
    4524:	f36f 020d 	bfc	r2, #0, #14
    4528:	605a      	str	r2, [r3, #4]
    452a:	e01d      	b.n	4568 <_usb_d_dev_out_next+0x140>
		ept->trans_count += trans_size;
    452c:	68a2      	ldr	r2, [r4, #8]
    452e:	4452      	add	r2, sl
    4530:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    4532:	4293      	cmp	r3, r2
    4534:	d9c3      	bls.n	44be <_usb_d_dev_out_next+0x96>
			trans_next = ept->trans_size - ept->trans_count;
    4536:	1a9b      	subs	r3, r3, r2
    4538:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    453a:	7ce1      	ldrb	r1, [r4, #19]
    453c:	f011 0f20 	tst.w	r1, #32
    4540:	d026      	beq.n	4590 <_usb_d_dev_out_next+0x168>
    4542:	8a22      	ldrh	r2, [r4, #16]
    4544:	4293      	cmp	r3, r2
    4546:	bf28      	it	cs
    4548:	4613      	movcs	r3, r2
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    454a:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    454c:	016a      	lsls	r2, r5, #5
    454e:	492f      	ldr	r1, [pc, #188]	; (460c <_usb_d_dev_out_next+0x1e4>)
    4550:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    4552:	4a2e      	ldr	r2, [pc, #184]	; (460c <_usb_d_dev_out_next+0x1e4>)
    4554:	eb02 1245 	add.w	r2, r2, r5, lsl #5
    4558:	6851      	ldr	r1, [r2, #4]
    455a:	f363 319b 	bfi	r1, r3, #14, #14
    455e:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    4560:	6853      	ldr	r3, [r2, #4]
    4562:	f36f 030d 	bfc	r3, #0, #14
    4566:	6053      	str	r3, [r2, #4]
	if (!isr) {
    4568:	f1b9 0f00 	cmp.w	r9, #0
    456c:	d108      	bne.n	4580 <_usb_d_dev_out_next+0x158>
		if (is_ctrl) {
    456e:	f1b8 0f01 	cmp.w	r8, #1
    4572:	d025      	beq.n	45c0 <_usb_d_dev_out_next+0x198>
			inten = USB_D_BANK0_INT_FLAGS;
    4574:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    4576:	016b      	lsls	r3, r5, #5
    4578:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    457c:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    4580:	016d      	lsls	r5, r5, #5
    4582:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    4586:	2340      	movs	r3, #64	; 0x40
    4588:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
    458c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (trans_next > ept->size) {
    4590:	8a21      	ldrh	r1, [r4, #16]
    4592:	428b      	cmp	r3, r1
    4594:	d90a      	bls.n	45ac <_usb_d_dev_out_next+0x184>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    4596:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    459a:	d80e      	bhi.n	45ba <_usb_d_dev_out_next+0x192>
    459c:	ea23 0306 	bic.w	r3, r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    45a0:	6821      	ldr	r1, [r4, #0]
    45a2:	440a      	add	r2, r1
	bank->ADDR.reg          = addr;
    45a4:	0169      	lsls	r1, r5, #5
    45a6:	4819      	ldr	r0, [pc, #100]	; (460c <_usb_d_dev_out_next+0x1e4>)
    45a8:	5042      	str	r2, [r0, r1]
    45aa:	e7d2      	b.n	4552 <_usb_d_dev_out_next+0x12a>
				} else if (trans_next < ept->size) {
    45ac:	428b      	cmp	r3, r1
    45ae:	d2f7      	bcs.n	45a0 <_usb_d_dev_out_next+0x178>
					ept->flags.bits.use_cache = 1;
    45b0:	7ce1      	ldrb	r1, [r4, #19]
    45b2:	f041 0120 	orr.w	r1, r1, #32
    45b6:	74e1      	strb	r1, [r4, #19]
    45b8:	e7f2      	b.n	45a0 <_usb_d_dev_out_next+0x178>
						trans_next = USB_D_DEV_TRANS_MAX;
    45ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    45be:	e7ef      	b.n	45a0 <_usb_d_dev_out_next+0x178>
	bank->STATUS_BK.reg     = 0;
    45c0:	4b12      	ldr	r3, [pc, #72]	; (460c <_usb_d_dev_out_next+0x1e4>)
    45c2:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    45c6:	2200      	movs	r2, #0
    45c8:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    45ca:	222d      	movs	r2, #45	; 0x2d
    45cc:	e7d3      	b.n	4576 <_usb_d_dev_out_next+0x14e>
	uint16_t           last_pkt   = last_trans & size_mask;
    45ce:	f3c7 0709 	ubfx	r7, r7, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    45d2:	f890 8013 	ldrb.w	r8, [r0, #19]
    45d6:	f008 0807 	and.w	r8, r8, #7
    45da:	e749      	b.n	4470 <_usb_d_dev_out_next+0x48>
	} else if (isr && last_pkt < ept->size) {
    45dc:	f1b9 0f00 	cmp.w	r9, #0
    45e0:	d10b      	bne.n	45fa <_usb_d_dev_out_next+0x1d2>
		ept->trans_count += trans_size;
    45e2:	68a3      	ldr	r3, [r4, #8]
    45e4:	4453      	add	r3, sl
    45e6:	60a3      	str	r3, [r4, #8]
    45e8:	e769      	b.n	44be <_usb_d_dev_out_next+0x96>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    45ea:	f890 8013 	ldrb.w	r8, [r0, #19]
    45ee:	f008 0807 	and.w	r8, r8, #7
	uint16_t           last_pkt   = last_trans & size_mask;
    45f2:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    45f4:	46bb      	mov	fp, r7
    45f6:	46ba      	mov	sl, r7
    45f8:	e740      	b.n	447c <_usb_d_dev_out_next+0x54>
	} else if (isr && last_pkt < ept->size) {
    45fa:	8a23      	ldrh	r3, [r4, #16]
    45fc:	42bb      	cmp	r3, r7
    45fe:	f63f af57 	bhi.w	44b0 <_usb_d_dev_out_next+0x88>
		ept->trans_count += trans_size;
    4602:	68a3      	ldr	r3, [r4, #8]
    4604:	4453      	add	r3, sl
    4606:	60a3      	str	r3, [r4, #8]
    4608:	e759      	b.n	44be <_usb_d_dev_out_next+0x96>
    460a:	bf00      	nop
    460c:	20007054 	.word	0x20007054
    4610:	0000da6b 	.word	0x0000da6b
    4614:	000040c9 	.word	0x000040c9

00004618 <_usb_d_dev_handler>:
{
    4618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    461c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4620:	8c1e      	ldrh	r6, [r3, #32]
    4622:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    4624:	b146      	cbz	r6, 4638 <_usb_d_dev_handler+0x20>
    4626:	4d91      	ldr	r5, [pc, #580]	; (486c <_usb_d_dev_handler+0x254>)
	uint32_t lpm_variable = 0;
    4628:	2400      	movs	r4, #0
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    462a:	f1a5 0774 	sub.w	r7, r5, #116	; 0x74
			_usb_d_dev_handle_setup(ept);
    462e:	f8df 9258 	ldr.w	r9, [pc, #600]	; 4888 <_usb_d_dev_handler+0x270>
			_usb_d_dev_handle_trfail(ept, 1);
    4632:	f8df 8258 	ldr.w	r8, [pc, #600]	; 488c <_usb_d_dev_handler+0x274>
    4636:	e0d3      	b.n	47e0 <_usb_d_dev_handler+0x1c8>
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    4638:	8b99      	ldrh	r1, [r3, #28]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    463a:	8b1b      	ldrh	r3, [r3, #24]
    463c:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    463e:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    4640:	f013 0f04 	tst.w	r3, #4
    4644:	d11d      	bne.n	4682 <_usb_d_dev_handler+0x6a>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    4646:	f413 7f00 	tst.w	r3, #512	; 0x200
    464a:	d123      	bne.n	4694 <_usb_d_dev_handler+0x7c>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    464c:	f013 0f80 	tst.w	r3, #128	; 0x80
    4650:	d147      	bne.n	46e2 <_usb_d_dev_handler+0xca>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    4652:	f013 0f70 	tst.w	r3, #112	; 0x70
    4656:	d14f      	bne.n	46f8 <_usb_d_dev_handler+0xe0>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    4658:	f013 0f08 	tst.w	r3, #8
    465c:	d16e      	bne.n	473c <_usb_d_dev_handler+0x124>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    465e:	f013 0f01 	tst.w	r3, #1
    4662:	d0e0      	beq.n	4626 <_usb_d_dev_handler+0xe>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    4664:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4668:	f240 2201 	movw	r2, #513	; 0x201
    466c:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    466e:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    4670:	2270      	movs	r2, #112	; 0x70
    4672:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    4674:	4b7e      	ldr	r3, [pc, #504]	; (4870 <_usb_d_dev_handler+0x258>)
    4676:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    4678:	2100      	movs	r1, #0
    467a:	2004      	movs	r0, #4
    467c:	4798      	blx	r3
    467e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    4682:	2204      	movs	r2, #4
    4684:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4688:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    468a:	4b79      	ldr	r3, [pc, #484]	; (4870 <_usb_d_dev_handler+0x258>)
    468c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    468e:	4798      	blx	r3
    4690:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4694:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4698:	f240 2201 	movw	r2, #513	; 0x201
    469c:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    469e:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    46a0:	2270      	movs	r2, #112	; 0x70
    46a2:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    46a4:	4b72      	ldr	r3, [pc, #456]	; (4870 <_usb_d_dev_handler+0x258>)
    46a6:	891b      	ldrh	r3, [r3, #8]
    46a8:	f003 030f 	and.w	r3, r3, #15
    46ac:	2b03      	cmp	r3, #3
    46ae:	d00e      	beq.n	46ce <_usb_d_dev_handler+0xb6>
    46b0:	4b6f      	ldr	r3, [pc, #444]	; (4870 <_usb_d_dev_handler+0x258>)
    46b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    46b4:	f003 030f 	and.w	r3, r3, #15
    46b8:	2b03      	cmp	r3, #3
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    46ba:	bf08      	it	eq
    46bc:	2201      	moveq	r2, #1
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    46be:	d007      	beq.n	46d0 <_usb_d_dev_handler+0xb8>
	uint32_t lpm_variable = 0;
    46c0:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    46c2:	4b6b      	ldr	r3, [pc, #428]	; (4870 <_usb_d_dev_handler+0x258>)
    46c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    46c6:	2003      	movs	r0, #3
    46c8:	4798      	blx	r3
    46ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    46ce:	2200      	movs	r2, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    46d0:	4b67      	ldr	r3, [pc, #412]	; (4870 <_usb_d_dev_handler+0x258>)
    46d2:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    46d6:	8919      	ldrh	r1, [r3, #8]
    46d8:	f3c1 110a 	ubfx	r1, r1, #4, #11
			bank->EXTREG.reg = 0;
    46dc:	2200      	movs	r2, #0
    46de:	811a      	strh	r2, [r3, #8]
    46e0:	e7ef      	b.n	46c2 <_usb_d_dev_handler+0xaa>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    46e2:	2280      	movs	r2, #128	; 0x80
    46e4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    46e8:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    46ea:	4b61      	ldr	r3, [pc, #388]	; (4870 <_usb_d_dev_handler+0x258>)
    46ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    46ee:	2100      	movs	r1, #0
    46f0:	2005      	movs	r0, #5
    46f2:	4798      	blx	r3
    46f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    46f8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    46fc:	2270      	movs	r2, #112	; 0x70
    46fe:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    4700:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    4702:	f240 2201 	movw	r2, #513	; 0x201
    4706:	831a      	strh	r2, [r3, #24]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    4708:	4b5a      	ldr	r3, [pc, #360]	; (4874 <_usb_d_dev_handler+0x25c>)
    470a:	f893 3020 	ldrb.w	r3, [r3, #32]
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    470e:	f013 0f01 	tst.w	r3, #1
    4712:	d00d      	beq.n	4730 <_usb_d_dev_handler+0x118>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    4714:	4a57      	ldr	r2, [pc, #348]	; (4874 <_usb_d_dev_handler+0x25c>)
    4716:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    4718:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    471c:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    4720:	d1f9      	bne.n	4716 <_usb_d_dev_handler+0xfe>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    4722:	4b53      	ldr	r3, [pc, #332]	; (4870 <_usb_d_dev_handler+0x258>)
    4724:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    4726:	2100      	movs	r1, #0
    4728:	2002      	movs	r0, #2
    472a:	4798      	blx	r3
    472c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    4730:	4a50      	ldr	r2, [pc, #320]	; (4874 <_usb_d_dev_handler+0x25c>)
    4732:	6913      	ldr	r3, [r2, #16]
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    4734:	f413 7f80 	tst.w	r3, #256	; 0x100
    4738:	d0fb      	beq.n	4732 <_usb_d_dev_handler+0x11a>
    473a:	e7f2      	b.n	4722 <_usb_d_dev_handler+0x10a>

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    473c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4740:	2400      	movs	r4, #0
    4742:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    4746:	2208      	movs	r2, #8
    4748:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    474a:	2270      	movs	r2, #112	; 0x70
    474c:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    474e:	f240 2201 	movw	r2, #513	; 0x201
    4752:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    4754:	4b48      	ldr	r3, [pc, #288]	; (4878 <_usb_d_dev_handler+0x260>)
    4756:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    4758:	4b45      	ldr	r3, [pc, #276]	; (4870 <_usb_d_dev_handler+0x258>)
    475a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    475c:	4621      	mov	r1, r4
    475e:	2001      	movs	r0, #1
    4760:	4798      	blx	r3
    4762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    4766:	f011 0f10 	tst.w	r1, #16
    476a:	d109      	bne.n	4780 <_usb_d_dev_handler+0x168>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    476c:	f011 0f40 	tst.w	r1, #64	; 0x40
    4770:	d108      	bne.n	4784 <_usb_d_dev_handler+0x16c>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    4772:	f011 0f20 	tst.w	r1, #32
    4776:	d02f      	beq.n	47d8 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 0);
    4778:	2100      	movs	r1, #0
    477a:	4b40      	ldr	r3, [pc, #256]	; (487c <_usb_d_dev_handler+0x264>)
    477c:	4798      	blx	r3
    477e:	e02b      	b.n	47d8 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_setup(ept);
    4780:	47c8      	blx	r9
    4782:	e029      	b.n	47d8 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 1);
    4784:	2101      	movs	r1, #1
    4786:	4b3d      	ldr	r3, [pc, #244]	; (487c <_usb_d_dev_handler+0x264>)
    4788:	4798      	blx	r3
    478a:	e025      	b.n	47d8 <_usb_d_dev_handler+0x1c0>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    478c:	f011 0f40 	tst.w	r1, #64	; 0x40
    4790:	d111      	bne.n	47b6 <_usb_d_dev_handler+0x19e>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    4792:	f011 0f08 	tst.w	r1, #8
    4796:	d112      	bne.n	47be <_usb_d_dev_handler+0x1a6>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    4798:	f011 0f02 	tst.w	r1, #2
    479c:	d112      	bne.n	47c4 <_usb_d_dev_handler+0x1ac>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    479e:	f003 0307 	and.w	r3, r3, #7
    47a2:	2b01      	cmp	r3, #1
    47a4:	d118      	bne.n	47d8 <_usb_d_dev_handler+0x1c0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    47a6:	f011 0f04 	tst.w	r1, #4
    47aa:	d10f      	bne.n	47cc <_usb_d_dev_handler+0x1b4>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    47ac:	f011 0f10 	tst.w	r1, #16
    47b0:	d012      	beq.n	47d8 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_setup(ept);
    47b2:	47c8      	blx	r9
    47b4:	e010      	b.n	47d8 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 1);
    47b6:	2101      	movs	r1, #1
    47b8:	4b30      	ldr	r3, [pc, #192]	; (487c <_usb_d_dev_handler+0x264>)
    47ba:	4798      	blx	r3
    47bc:	e00c      	b.n	47d8 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_trfail(ept, 1);
    47be:	2101      	movs	r1, #1
    47c0:	47c0      	blx	r8
    47c2:	e009      	b.n	47d8 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_in_next(ept, true);
    47c4:	2101      	movs	r1, #1
    47c6:	4b2e      	ldr	r3, [pc, #184]	; (4880 <_usb_d_dev_handler+0x268>)
    47c8:	4798      	blx	r3
    47ca:	e005      	b.n	47d8 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_trfail(ept, 0);
    47cc:	2100      	movs	r1, #0
    47ce:	47c0      	blx	r8
    47d0:	e002      	b.n	47d8 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 0);
    47d2:	2100      	movs	r1, #0
    47d4:	4b29      	ldr	r3, [pc, #164]	; (487c <_usb_d_dev_handler+0x264>)
    47d6:	4798      	blx	r3
    47d8:	3401      	adds	r4, #1
    47da:	3514      	adds	r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    47dc:	2c09      	cmp	r4, #9
    47de:	d042      	beq.n	4866 <_usb_d_dev_handler+0x24e>
    47e0:	4628      	mov	r0, r5
		if (ept->ep == 0xFF) {
    47e2:	7cab      	ldrb	r3, [r5, #18]
    47e4:	2bff      	cmp	r3, #255	; 0xff
    47e6:	d0f7      	beq.n	47d8 <_usb_d_dev_handler+0x1c0>
	if (!(epint & (1u << epn))) {
    47e8:	f003 030f 	and.w	r3, r3, #15
    47ec:	2101      	movs	r1, #1
    47ee:	4099      	lsls	r1, r3
    47f0:	4231      	tst	r1, r6
    47f2:	d0f1      	beq.n	47d8 <_usb_d_dev_handler+0x1c0>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    47f4:	0159      	lsls	r1, r3, #5
    47f6:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    47fa:	f501 7180 	add.w	r1, r1, #256	; 0x100
    47fe:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    4800:	015b      	lsls	r3, r3, #5
    4802:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4806:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
	if (flags) {
    480a:	4019      	ands	r1, r3
    480c:	d0e4      	beq.n	47d8 <_usb_d_dev_handler+0x1c0>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    480e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    4812:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    4816:	f892 3087 	ldrb.w	r3, [r2, #135]	; 0x87
    481a:	f003 0247 	and.w	r2, r3, #71	; 0x47
    481e:	2a01      	cmp	r2, #1
    4820:	d0a1      	beq.n	4766 <_usb_d_dev_handler+0x14e>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    4822:	f013 0f80 	tst.w	r3, #128	; 0x80
    4826:	d1b1      	bne.n	478c <_usb_d_dev_handler+0x174>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    4828:	f011 0f20 	tst.w	r1, #32
    482c:	d1d1      	bne.n	47d2 <_usb_d_dev_handler+0x1ba>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    482e:	f011 0f04 	tst.w	r1, #4
    4832:	d10e      	bne.n	4852 <_usb_d_dev_handler+0x23a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    4834:	f011 0f01 	tst.w	r1, #1
    4838:	d10e      	bne.n	4858 <_usb_d_dev_handler+0x240>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    483a:	f003 0307 	and.w	r3, r3, #7
    483e:	2b01      	cmp	r3, #1
    4840:	d1ca      	bne.n	47d8 <_usb_d_dev_handler+0x1c0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    4842:	f011 0f08 	tst.w	r1, #8
    4846:	d10b      	bne.n	4860 <_usb_d_dev_handler+0x248>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    4848:	f011 0f10 	tst.w	r1, #16
    484c:	d0c4      	beq.n	47d8 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_setup(ept);
    484e:	47c8      	blx	r9
    4850:	e7c2      	b.n	47d8 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_trfail(ept, 0);
    4852:	2100      	movs	r1, #0
    4854:	47c0      	blx	r8
    4856:	e7bf      	b.n	47d8 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_out_next(ept, true);
    4858:	2101      	movs	r1, #1
    485a:	4b0a      	ldr	r3, [pc, #40]	; (4884 <_usb_d_dev_handler+0x26c>)
    485c:	4798      	blx	r3
    485e:	e7bb      	b.n	47d8 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_trfail(ept, 1);
    4860:	2101      	movs	r1, #1
    4862:	47c0      	blx	r8
    4864:	e7b8      	b.n	47d8 <_usb_d_dev_handler+0x1c0>
    4866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    486a:	bf00      	nop
    486c:	200070c8 	.word	0x200070c8
    4870:	20007054 	.word	0x20007054
    4874:	40001000 	.word	0x40001000
    4878:	00004261 	.word	0x00004261
    487c:	0000409d 	.word	0x0000409d
    4880:	000042a5 	.word	0x000042a5
    4884:	00004429 	.word	0x00004429
    4888:	00004021 	.word	0x00004021
    488c:	00004161 	.word	0x00004161

00004890 <_usb_d_dev_init>:
{
    4890:	b508      	push	{r3, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    4892:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4896:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    4898:	f013 0f01 	tst.w	r3, #1
    489c:	d119      	bne.n	48d2 <_usb_d_dev_init+0x42>
	tmp = ((Usb *)hw)->DEVICE.CTRLA.reg;
    489e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    48a2:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    48a4:	f013 0f02 	tst.w	r3, #2
    48a8:	d00f      	beq.n	48ca <_usb_d_dev_init+0x3a>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    48aa:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    48ae:	7893      	ldrb	r3, [r2, #2]
    48b0:	f013 0f03 	tst.w	r3, #3
    48b4:	d1fb      	bne.n	48ae <_usb_d_dev_init+0x1e>
	((Usb *)hw)->DEVICE.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    48b6:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    48ba:	7813      	ldrb	r3, [r2, #0]
    48bc:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    48c0:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    48c2:	7893      	ldrb	r3, [r2, #2]
    48c4:	f013 0f02 	tst.w	r3, #2
    48c8:	d1fb      	bne.n	48c2 <_usb_d_dev_init+0x32>
	((Usb *)hw)->DEVICE.CTRLA.reg = data;
    48ca:	2201      	movs	r2, #1
    48cc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    48d0:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    48d2:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    48d6:	7893      	ldrb	r3, [r2, #2]
    48d8:	f013 0f01 	tst.w	r3, #1
    48dc:	d1fb      	bne.n	48d6 <_usb_d_dev_init+0x46>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    48de:	4b1f      	ldr	r3, [pc, #124]	; (495c <_usb_d_dev_init+0xcc>)
    48e0:	4a1f      	ldr	r2, [pc, #124]	; (4960 <_usb_d_dev_init+0xd0>)
    48e2:	661a      	str	r2, [r3, #96]	; 0x60
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    48e4:	665a      	str	r2, [r3, #100]	; 0x64
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    48e6:	669a      	str	r2, [r3, #104]	; 0x68
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    48e8:	66da      	str	r2, [r3, #108]	; 0x6c
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    48ea:	671a      	str	r2, [r3, #112]	; 0x70
	_usb_d_dev_reset_epts();
    48ec:	4b1d      	ldr	r3, [pc, #116]	; (4964 <_usb_d_dev_init+0xd4>)
    48ee:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    48f0:	4b1d      	ldr	r3, [pc, #116]	; (4968 <_usb_d_dev_init+0xd8>)
    48f2:	6819      	ldr	r1, [r3, #0]
	uint32_t pad_transp
    48f4:	f3c1 1344 	ubfx	r3, r1, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    48f8:	f3c1 2282 	ubfx	r2, r1, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
    48fc:	f011 011f 	ands.w	r1, r1, #31
    4900:	d025      	beq.n	494e <_usb_d_dev_init+0xbe>
		pad_transn = 9;
    4902:	291f      	cmp	r1, #31
    4904:	bf08      	it	eq
    4906:	2109      	moveq	r1, #9
	if (pad_transp == 0 || pad_transp == 0x1F) {
    4908:	b31b      	cbz	r3, 4952 <_usb_d_dev_init+0xc2>
		pad_transp = 25;
    490a:	2b1f      	cmp	r3, #31
    490c:	bf08      	it	eq
    490e:	2319      	moveq	r3, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
    4910:	b30a      	cbz	r2, 4956 <_usb_d_dev_init+0xc6>
		pad_trim = 6;
    4912:	2a07      	cmp	r2, #7
    4914:	bf08      	it	eq
    4916:	2206      	moveq	r2, #6
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    4918:	f003 031f 	and.w	r3, r3, #31
    491c:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    4920:	0312      	lsls	r2, r2, #12
    4922:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    4926:	4313      	orrs	r3, r2
    4928:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    492c:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    492e:	78d3      	ldrb	r3, [r2, #3]
    4930:	f043 0303 	orr.w	r3, r3, #3
    4934:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    4936:	78d3      	ldrb	r3, [r2, #3]
    4938:	f043 030c 	orr.w	r3, r3, #12
    493c:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->DEVICE.CTRLA.reg = data;
    493e:	2304      	movs	r3, #4
    4940:	7013      	strb	r3, [r2, #0]
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    4942:	4b06      	ldr	r3, [pc, #24]	; (495c <_usb_d_dev_init+0xcc>)
	((Usb *)hw)->DEVICE.DESCADD.reg = data;
    4944:	6253      	str	r3, [r2, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    4946:	2301      	movs	r3, #1
    4948:	8113      	strh	r3, [r2, #8]
}
    494a:	2000      	movs	r0, #0
    494c:	bd08      	pop	{r3, pc}
		pad_transn = 9;
    494e:	2109      	movs	r1, #9
    4950:	e7da      	b.n	4908 <_usb_d_dev_init+0x78>
		pad_transp = 25;
    4952:	2319      	movs	r3, #25
    4954:	e7dc      	b.n	4910 <_usb_d_dev_init+0x80>
		pad_trim = 6;
    4956:	2206      	movs	r2, #6
    4958:	e7de      	b.n	4918 <_usb_d_dev_init+0x88>
    495a:	bf00      	nop
    495c:	20007054 	.word	0x20007054
    4960:	0000401d 	.word	0x0000401d
    4964:	00004261 	.word	0x00004261
    4968:	00800084 	.word	0x00800084

0000496c <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->DEVICE.SYNCBUSY.reg;
    496c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4970:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    4972:	f013 0f03 	tst.w	r3, #3
    4976:	d11f      	bne.n	49b8 <_usb_d_dev_enable+0x4c>
	return ((Usb *)hw)->DEVICE.CTRLA.reg;
    4978:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    497c:	781b      	ldrb	r3, [r3, #0]
    497e:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    4980:	f013 0f02 	tst.w	r3, #2
    4984:	d104      	bne.n	4990 <_usb_d_dev_enable+0x24>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    4986:	f043 0302 	orr.w	r3, r3, #2
	((Usb *)hw)->DEVICE.CTRLA.reg = data;
    498a:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    498e:	7013      	strb	r3, [r2, #0]
    4990:	4b0b      	ldr	r3, [pc, #44]	; (49c0 <_usb_d_dev_enable+0x54>)
    4992:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    4996:	609a      	str	r2, [r3, #8]
    4998:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    499c:	609a      	str	r2, [r3, #8]
    499e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    49a2:	609a      	str	r2, [r3, #8]
    49a4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    49a8:	609a      	str	r2, [r3, #8]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    49aa:	f240 228d 	movw	r2, #653	; 0x28d
    49ae:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    49b2:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    49b4:	2000      	movs	r0, #0
    49b6:	4770      	bx	lr
		return -USB_ERR_DENIED;
    49b8:	f06f 0010 	mvn.w	r0, #16
}
    49bc:	4770      	bx	lr
    49be:	bf00      	nop
    49c0:	e000e100 	.word	0xe000e100

000049c4 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    49c4:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    49c8:	8913      	ldrh	r3, [r2, #8]
    49ca:	f023 0301 	bic.w	r3, r3, #1
    49ce:	041b      	lsls	r3, r3, #16
    49d0:	0c1b      	lsrs	r3, r3, #16
    49d2:	8113      	strh	r3, [r2, #8]
    49d4:	4770      	bx	lr

000049d6 <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    49d6:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	((Usb *)hw)->DEVICE.DADD.reg = data;
    49da:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    49de:	7298      	strb	r0, [r3, #10]
    49e0:	4770      	bx	lr
	...

000049e4 <_usb_d_dev_ep_init>:
{
    49e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    49e6:	fa4f fe80 	sxtb.w	lr, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    49ea:	f010 050f 	ands.w	r5, r0, #15
    49ee:	d04d      	beq.n	4a8c <_usb_d_dev_ep_init+0xa8>
    49f0:	f1be 0f00 	cmp.w	lr, #0
    49f4:	bfb4      	ite	lt
    49f6:	1cac      	addlt	r4, r5, #2
    49f8:	462c      	movge	r4, r5
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    49fa:	f001 0103 	and.w	r1, r1, #3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    49fe:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
    4a00:	2d02      	cmp	r5, #2
    4a02:	d947      	bls.n	4a94 <_usb_d_dev_ep_init+0xb0>
		return -USB_ERR_PARAM;
    4a04:	f06f 0011 	mvn.w	r0, #17
    4a08:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    4a0a:	f1be 0f00 	cmp.w	lr, #0
    4a0e:	db1b      	blt.n	4a48 <_usb_d_dev_ep_init+0x64>
    4a10:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    4a14:	4e37      	ldr	r6, [pc, #220]	; (4af4 <_usb_d_dev_ep_init+0x110>)
    4a16:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    4a1a:	2d00      	cmp	r5, #0
    4a1c:	d15e      	bne.n	4adc <_usb_d_dev_ep_init+0xf8>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    4a1e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4a22:	4d34      	ldr	r5, [pc, #208]	; (4af4 <_usb_d_dev_ep_init+0x110>)
    4a24:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
    4a28:	4d33      	ldr	r5, [pc, #204]	; (4af8 <_usb_d_dev_ep_init+0x114>)
    4a2a:	00a6      	lsls	r6, r4, #2
    4a2c:	1933      	adds	r3, r6, r4
    4a2e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    4a32:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
	ept->size     = max_pkt_siz;
    4a36:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	ept->flags.u8 = (ep_type + 1);
    4a3a:	3101      	adds	r1, #1
    4a3c:	f883 1087 	strb.w	r1, [r3, #135]	; 0x87
	ept->ep       = ep;
    4a40:	f883 0086 	strb.w	r0, [r3, #134]	; 0x86
	return USB_OK;
    4a44:	2000      	movs	r0, #0
    4a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    4a48:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    4a4c:	4e29      	ldr	r6, [pc, #164]	; (4af4 <_usb_d_dev_ep_init+0x110>)
    4a4e:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    4a52:	686d      	ldr	r5, [r5, #4]
    4a54:	b935      	cbnz	r5, 4a64 <_usb_d_dev_ep_init+0x80>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    4a56:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4a5a:	4d26      	ldr	r5, [pc, #152]	; (4af4 <_usb_d_dev_ep_init+0x110>)
    4a5c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    4a60:	685f      	ldr	r7, [r3, #4]
    4a62:	e7e1      	b.n	4a28 <_usb_d_dev_ep_init+0x44>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    4a64:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    4a68:	4e22      	ldr	r6, [pc, #136]	; (4af4 <_usb_d_dev_ep_init+0x110>)
    4a6a:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    4a6e:	896d      	ldrh	r5, [r5, #10]
    4a70:	4295      	cmp	r5, r2
    4a72:	daf0      	bge.n	4a56 <_usb_d_dev_ep_init+0x72>
		return -USB_ERR_FUNC;
    4a74:	f06f 0012 	mvn.w	r0, #18
    4a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    4a7a:	f06f 0013 	mvn.w	r0, #19
    4a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    4a80:	f06f 0013 	mvn.w	r0, #19
    4a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_FUNC;
    4a86:	f06f 0012 	mvn.w	r0, #18
    4a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    4a8c:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
    4a90:	2400      	movs	r4, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    4a92:	4623      	mov	r3, r4
	if (ept->ep != 0xFF) {
    4a94:	eb04 0684 	add.w	r6, r4, r4, lsl #2
    4a98:	4f17      	ldr	r7, [pc, #92]	; (4af8 <_usb_d_dev_ep_init+0x114>)
    4a9a:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    4a9e:	f896 6086 	ldrb.w	r6, [r6, #134]	; 0x86
    4aa2:	2eff      	cmp	r6, #255	; 0xff
    4aa4:	d1e9      	bne.n	4a7a <_usb_d_dev_ep_init+0x96>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    4aa6:	2900      	cmp	r1, #0
    4aa8:	d1af      	bne.n	4a0a <_usb_d_dev_ep_init+0x26>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    4aaa:	b125      	cbz	r5, 4ab6 <_usb_d_dev_ep_init+0xd2>
    4aac:	f1be 0f00 	cmp.w	lr, #0
    4ab0:	bfa4      	itt	ge
    4ab2:	3502      	addge	r5, #2
    4ab4:	b2ed      	uxtbge	r5, r5
		if (ept_in->ep != 0xFF) {
    4ab6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    4aba:	4e0f      	ldr	r6, [pc, #60]	; (4af8 <_usb_d_dev_ep_init+0x114>)
    4abc:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    4ac0:	f895 5086 	ldrb.w	r5, [r5, #134]	; 0x86
    4ac4:	2dff      	cmp	r5, #255	; 0xff
    4ac6:	d1db      	bne.n	4a80 <_usb_d_dev_ep_init+0x9c>
		if (pcfg->cache == NULL) {
    4ac8:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    4acc:	4e09      	ldr	r6, [pc, #36]	; (4af4 <_usb_d_dev_ep_init+0x110>)
    4ace:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    4ad2:	2d00      	cmp	r5, #0
    4ad4:	d0d7      	beq.n	4a86 <_usb_d_dev_ep_init+0xa2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    4ad6:	f1be 0f00 	cmp.w	lr, #0
    4ada:	dbb5      	blt.n	4a48 <_usb_d_dev_ep_init+0x64>
    4adc:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    4ae0:	4e04      	ldr	r6, [pc, #16]	; (4af4 <_usb_d_dev_ep_init+0x110>)
    4ae2:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    4ae6:	892d      	ldrh	r5, [r5, #8]
    4ae8:	4295      	cmp	r5, r2
    4aea:	da98      	bge.n	4a1e <_usb_d_dev_ep_init+0x3a>
		return -USB_ERR_FUNC;
    4aec:	f06f 0012 	mvn.w	r0, #18
    4af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4af2:	bf00      	nop
    4af4:	0000efc8 	.word	0x0000efc8
    4af8:	20007054 	.word	0x20007054

00004afc <_usb_d_dev_ep_deinit>:
{
    4afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4afe:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    4b00:	f010 060f 	ands.w	r6, r0, #15
    4b04:	d00e      	beq.n	4b24 <_usb_d_dev_ep_deinit+0x28>
    4b06:	2f00      	cmp	r7, #0
    4b08:	bfb4      	ite	lt
    4b0a:	1cb3      	addlt	r3, r6, #2
    4b0c:	4633      	movge	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    4b0e:	2e02      	cmp	r6, #2
    4b10:	d900      	bls.n	4b14 <_usb_d_dev_ep_deinit+0x18>
    4b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return &dev_inst.ep[ep_index];
    4b14:	461d      	mov	r5, r3
    4b16:	3301      	adds	r3, #1
    4b18:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    4b1c:	4a24      	ldr	r2, [pc, #144]	; (4bb0 <_usb_d_dev_ep_deinit+0xb4>)
    4b1e:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    4b22:	e002      	b.n	4b2a <_usb_d_dev_ep_deinit+0x2e>
    4b24:	f8df e094 	ldr.w	lr, [pc, #148]	; 4bbc <_usb_d_dev_ep_deinit+0xc0>
    4b28:	2500      	movs	r5, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    4b2a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    4b2e:	4a21      	ldr	r2, [pc, #132]	; (4bb4 <_usb_d_dev_ep_deinit+0xb8>)
    4b30:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4b34:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
    4b38:	2aff      	cmp	r2, #255	; 0xff
    4b3a:	d0ea      	beq.n	4b12 <_usb_d_dev_ep_deinit+0x16>
    4b3c:	4604      	mov	r4, r0
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    4b3e:	2203      	movs	r2, #3
    4b40:	0ff9      	lsrs	r1, r7, #31
    4b42:	4670      	mov	r0, lr
    4b44:	4b1c      	ldr	r3, [pc, #112]	; (4bb8 <_usb_d_dev_ep_deinit+0xbc>)
    4b46:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    4b48:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    4b4c:	4a19      	ldr	r2, [pc, #100]	; (4bb4 <_usb_d_dev_ep_deinit+0xb8>)
    4b4e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4b52:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    4b56:	f003 0307 	and.w	r3, r3, #7
    4b5a:	2b01      	cmp	r3, #1
    4b5c:	d016      	beq.n	4b8c <_usb_d_dev_ep_deinit+0x90>
	} else if (USB_EP_GET_DIR(ep)) {
    4b5e:	2f00      	cmp	r7, #0
    4b60:	db1b      	blt.n	4b9a <_usb_d_dev_ep_deinit+0x9e>
    4b62:	0160      	lsls	r0, r4, #5
    4b64:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    4b68:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
    4b6c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    4b70:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
    4b74:	4b0f      	ldr	r3, [pc, #60]	; (4bb4 <_usb_d_dev_ep_deinit+0xb8>)
    4b76:	00aa      	lsls	r2, r5, #2
    4b78:	1951      	adds	r1, r2, r5
    4b7a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    4b7e:	2000      	movs	r0, #0
    4b80:	f881 0087 	strb.w	r0, [r1, #135]	; 0x87
	ept->ep       = 0xFF;
    4b84:	22ff      	movs	r2, #255	; 0xff
    4b86:	f881 2086 	strb.w	r2, [r1, #134]	; 0x86
    4b8a:	e7c2      	b.n	4b12 <_usb_d_dev_ep_deinit+0x16>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    4b8c:	0160      	lsls	r0, r4, #5
    4b8e:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    4b92:	2300      	movs	r3, #0
    4b94:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
    4b98:	e7ec      	b.n	4b74 <_usb_d_dev_ep_deinit+0x78>
    4b9a:	0176      	lsls	r6, r6, #5
    4b9c:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    4ba0:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
    4ba4:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    4ba8:	f886 3100 	strb.w	r3, [r6, #256]	; 0x100
    4bac:	e7e2      	b.n	4b74 <_usb_d_dev_ep_deinit+0x78>
    4bae:	bf00      	nop
    4bb0:	200070b4 	.word	0x200070b4
    4bb4:	20007054 	.word	0x20007054
    4bb8:	000040f5 	.word	0x000040f5
    4bbc:	200070c8 	.word	0x200070c8

00004bc0 <_usb_d_dev_ep_enable>:
{
    4bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4bc2:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    4bc4:	f010 000f 	ands.w	r0, r0, #15
    4bc8:	f000 80a6 	beq.w	4d18 <_usb_d_dev_ep_enable+0x158>
    4bcc:	2f00      	cmp	r7, #0
    4bce:	bfb4      	ite	lt
    4bd0:	1c83      	addlt	r3, r0, #2
    4bd2:	4603      	movge	r3, r0
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    4bd4:	4606      	mov	r6, r0
    4bd6:	0142      	lsls	r2, r0, #5
    4bd8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    4bdc:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
    4be0:	b2e4      	uxtb	r4, r4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    4be2:	2802      	cmp	r0, #2
    4be4:	f240 809f 	bls.w	4d26 <_usb_d_dev_ep_enable+0x166>
		return -USB_ERR_PARAM;
    4be8:	f06f 0011 	mvn.w	r0, #17
    4bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    4bee:	f014 0f77 	tst.w	r4, #119	; 0x77
    4bf2:	f040 8088 	bne.w	4d06 <_usb_d_dev_ep_enable+0x146>
    4bf6:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    4bfa:	2111      	movs	r1, #17
    4bfc:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    4c00:	4c97      	ldr	r4, [pc, #604]	; (4e60 <_usb_d_dev_ep_enable+0x2a0>)
    4c02:	eb04 018e 	add.w	r1, r4, lr, lsl #2
    4c06:	f8b1 4084 	ldrh.w	r4, [r1, #132]	; 0x84
    4c0a:	4996      	ldr	r1, [pc, #600]	; (4e64 <_usb_d_dev_ep_enable+0x2a4>)
    4c0c:	ea01 3184 	and.w	r1, r1, r4, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    4c10:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    4c14:	f200 80cc 	bhi.w	4db0 <_usb_d_dev_ep_enable+0x1f0>
    4c18:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    4c1c:	f200 810a 	bhi.w	4e34 <_usb_d_dev_ep_enable+0x274>
    4c20:	2c80      	cmp	r4, #128	; 0x80
    4c22:	f200 80f9 	bhi.w	4e18 <_usb_d_dev_ep_enable+0x258>
    4c26:	2c40      	cmp	r4, #64	; 0x40
    4c28:	f200 810b 	bhi.w	4e42 <_usb_d_dev_ep_enable+0x282>
    4c2c:	2c20      	cmp	r4, #32
    4c2e:	f200 80fa 	bhi.w	4e26 <_usb_d_dev_ep_enable+0x266>
    4c32:	2c10      	cmp	r4, #16
    4c34:	f200 810c 	bhi.w	4e50 <_usb_d_dev_ep_enable+0x290>
    4c38:	2c08      	cmp	r4, #8
    4c3a:	bf94      	ite	ls
    4c3c:	2700      	movls	r7, #0
    4c3e:	2701      	movhi	r7, #1
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4c40:	ea41 7107 	orr.w	r1, r1, r7, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    4c44:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4c46:	f3c4 010d 	ubfx	r1, r4, #0, #14
    4c4a:	e0b7      	b.n	4dbc <_usb_d_dev_ep_enable+0x1fc>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    4c4c:	f014 0f70 	tst.w	r4, #112	; 0x70
    4c50:	d15c      	bne.n	4d0c <_usb_d_dev_ep_enable+0x14c>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    4c52:	4d83      	ldr	r5, [pc, #524]	; (4e60 <_usb_d_dev_ep_enable+0x2a0>)
    4c54:	009f      	lsls	r7, r3, #2
    4c56:	18f9      	adds	r1, r7, r3
    4c58:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    4c5c:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    4c60:	0109      	lsls	r1, r1, #4
    4c62:	f001 0170 	and.w	r1, r1, #112	; 0x70
    4c66:	430c      	orrs	r4, r1
    4c68:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    4c6c:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4c70:	443b      	add	r3, r7
    4c72:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    4c76:	f8b5 3084 	ldrh.w	r3, [r5, #132]	; 0x84
    4c7a:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    4c7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    4c82:	d80f      	bhi.n	4ca4 <_usb_d_dev_ep_enable+0xe4>
    4c84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    4c88:	d819      	bhi.n	4cbe <_usb_d_dev_ep_enable+0xfe>
    4c8a:	2b80      	cmp	r3, #128	; 0x80
    4c8c:	d819      	bhi.n	4cc2 <_usb_d_dev_ep_enable+0x102>
    4c8e:	2b40      	cmp	r3, #64	; 0x40
    4c90:	d819      	bhi.n	4cc6 <_usb_d_dev_ep_enable+0x106>
    4c92:	2b20      	cmp	r3, #32
    4c94:	d819      	bhi.n	4cca <_usb_d_dev_ep_enable+0x10a>
    4c96:	2b10      	cmp	r3, #16
    4c98:	d819      	bhi.n	4cce <_usb_d_dev_ep_enable+0x10e>
    4c9a:	2b08      	cmp	r3, #8
    4c9c:	bf94      	ite	ls
    4c9e:	2300      	movls	r3, #0
    4ca0:	2301      	movhi	r3, #1
    4ca2:	e000      	b.n	4ca6 <_usb_d_dev_ep_enable+0xe6>
    4ca4:	2307      	movs	r3, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4ca6:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
    4caa:	6143      	str	r3, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    4cac:	2380      	movs	r3, #128	; 0x80
    4cae:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    4cb2:	4b6b      	ldr	r3, [pc, #428]	; (4e60 <_usb_d_dev_ep_enable+0x2a0>)
    4cb4:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    4cb8:	2000      	movs	r0, #0
    4cba:	76b0      	strb	r0, [r6, #26]
    4cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    4cbe:	2306      	movs	r3, #6
    4cc0:	e7f1      	b.n	4ca6 <_usb_d_dev_ep_enable+0xe6>
    4cc2:	2305      	movs	r3, #5
    4cc4:	e7ef      	b.n	4ca6 <_usb_d_dev_ep_enable+0xe6>
    4cc6:	2304      	movs	r3, #4
    4cc8:	e7ed      	b.n	4ca6 <_usb_d_dev_ep_enable+0xe6>
    4cca:	2303      	movs	r3, #3
    4ccc:	e7eb      	b.n	4ca6 <_usb_d_dev_ep_enable+0xe6>
    4cce:	2302      	movs	r3, #2
    4cd0:	e7e9      	b.n	4ca6 <_usb_d_dev_ep_enable+0xe6>
    4cd2:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4cd4:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    4cd8:	6043      	str	r3, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    4cda:	2340      	movs	r3, #64	; 0x40
    4cdc:	f882 3105 	strb.w	r3, [r2, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
    4ce0:	4b5f      	ldr	r3, [pc, #380]	; (4e60 <_usb_d_dev_ep_enable+0x2a0>)
    4ce2:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    4ce6:	2000      	movs	r0, #0
    4ce8:	72b0      	strb	r0, [r6, #10]
    4cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    4cec:	2106      	movs	r1, #6
    4cee:	e7f1      	b.n	4cd4 <_usb_d_dev_ep_enable+0x114>
    4cf0:	2105      	movs	r1, #5
    4cf2:	e7ef      	b.n	4cd4 <_usb_d_dev_ep_enable+0x114>
    4cf4:	2104      	movs	r1, #4
    4cf6:	e7ed      	b.n	4cd4 <_usb_d_dev_ep_enable+0x114>
    4cf8:	2103      	movs	r1, #3
    4cfa:	e7eb      	b.n	4cd4 <_usb_d_dev_ep_enable+0x114>
    4cfc:	2102      	movs	r1, #2
    4cfe:	e7e9      	b.n	4cd4 <_usb_d_dev_ep_enable+0x114>
		return -USB_ERR_PARAM;
    4d00:	f06f 0011 	mvn.w	r0, #17
    4d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    4d06:	f06f 0013 	mvn.w	r0, #19
    4d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    4d0c:	f06f 0013 	mvn.w	r0, #19
    4d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    4d12:	f06f 0013 	mvn.w	r0, #19
    4d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    4d18:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    4d1c:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
    4d20:	b2e4      	uxtb	r4, r4
    4d22:	2600      	movs	r6, #0
	return &dev_inst.ep[ep_index];
    4d24:	4633      	mov	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    4d26:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    4d2a:	494d      	ldr	r1, [pc, #308]	; (4e60 <_usb_d_dev_ep_enable+0x2a0>)
    4d2c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    4d30:	f892 5086 	ldrb.w	r5, [r2, #134]	; 0x86
    4d34:	2dff      	cmp	r5, #255	; 0xff
    4d36:	d0e3      	beq.n	4d00 <_usb_d_dev_ep_enable+0x140>
    4d38:	0172      	lsls	r2, r6, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    4d3a:	1888      	adds	r0, r1, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    4d3c:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
    4d40:	eb01 018e 	add.w	r1, r1, lr, lsl #2
    4d44:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    4d48:	f001 0107 	and.w	r1, r1, #7
    4d4c:	2901      	cmp	r1, #1
    4d4e:	f43f af4e 	beq.w	4bee <_usb_d_dev_ep_enable+0x2e>
	} else if (dir) {
    4d52:	2f00      	cmp	r7, #0
    4d54:	f6ff af7a 	blt.w	4c4c <_usb_d_dev_ep_enable+0x8c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    4d58:	f014 0f07 	tst.w	r4, #7
    4d5c:	d1d9      	bne.n	4d12 <_usb_d_dev_ep_enable+0x152>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    4d5e:	4d40      	ldr	r5, [pc, #256]	; (4e60 <_usb_d_dev_ep_enable+0x2a0>)
    4d60:	009f      	lsls	r7, r3, #2
    4d62:	18f9      	adds	r1, r7, r3
    4d64:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    4d68:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    4d6c:	f001 0107 	and.w	r1, r1, #7
    4d70:	430c      	orrs	r4, r1
    4d72:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    4d76:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    4d7a:	443b      	add	r3, r7
    4d7c:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    4d80:	f8b5 1084 	ldrh.w	r1, [r5, #132]	; 0x84
    4d84:	4b37      	ldr	r3, [pc, #220]	; (4e64 <_usb_d_dev_ep_enable+0x2a4>)
    4d86:	ea03 3381 	and.w	r3, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    4d8a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    4d8e:	d8a0      	bhi.n	4cd2 <_usb_d_dev_ep_enable+0x112>
    4d90:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    4d94:	d8aa      	bhi.n	4cec <_usb_d_dev_ep_enable+0x12c>
    4d96:	2980      	cmp	r1, #128	; 0x80
    4d98:	d8aa      	bhi.n	4cf0 <_usb_d_dev_ep_enable+0x130>
    4d9a:	2940      	cmp	r1, #64	; 0x40
    4d9c:	d8aa      	bhi.n	4cf4 <_usb_d_dev_ep_enable+0x134>
    4d9e:	2920      	cmp	r1, #32
    4da0:	d8aa      	bhi.n	4cf8 <_usb_d_dev_ep_enable+0x138>
    4da2:	2910      	cmp	r1, #16
    4da4:	d8aa      	bhi.n	4cfc <_usb_d_dev_ep_enable+0x13c>
    4da6:	2908      	cmp	r1, #8
    4da8:	bf94      	ite	ls
    4daa:	2100      	movls	r1, #0
    4dac:	2101      	movhi	r1, #1
    4dae:	e791      	b.n	4cd4 <_usb_d_dev_ep_enable+0x114>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4db0:	f041 41e0 	orr.w	r1, r1, #1879048192	; 0x70000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    4db4:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4db6:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    4dba:	2707      	movs	r7, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4dbc:	ea41 7107 	orr.w	r1, r1, r7, lsl #28
    4dc0:	6141      	str	r1, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    4dc2:	2140      	movs	r1, #64	; 0x40
    4dc4:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    4dc8:	2080      	movs	r0, #128	; 0x80
    4dca:	f882 0104 	strb.w	r0, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    4dce:	4a24      	ldr	r2, [pc, #144]	; (4e60 <_usb_d_dev_ep_enable+0x2a0>)
    4dd0:	eb02 1646 	add.w	r6, r2, r6, lsl #5
    4dd4:	2000      	movs	r0, #0
    4dd6:	72b0      	strb	r0, [r6, #10]
    4dd8:	76b0      	strb	r0, [r6, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    4dda:	f005 050f 	and.w	r5, r5, #15
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    4dde:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    4de2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4de6:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
	bank->ADDR.reg          = addr;
    4dea:	016d      	lsls	r5, r5, #5
    4dec:	1953      	adds	r3, r2, r5
    4dee:	5156      	str	r6, [r2, r5]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    4df0:	685a      	ldr	r2, [r3, #4]
    4df2:	f364 329b 	bfi	r2, r4, #14, #14
    4df6:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    4df8:	685a      	ldr	r2, [r3, #4]
    4dfa:	f360 020d 	bfi	r2, r0, #0, #14
    4dfe:	605a      	str	r2, [r3, #4]
    4e00:	f105 4382 	add.w	r3, r5, #1090519040	; 0x41000000
    4e04:	22b0      	movs	r2, #176	; 0xb0
    4e06:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    4e0a:	f883 1105 	strb.w	r1, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    4e0e:	461d      	mov	r5, r3
    4e10:	2310      	movs	r3, #16
    4e12:	f885 3109 	strb.w	r3, [r5, #265]	; 0x109
    4e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4e18:	f041 41a0 	orr.w	r1, r1, #1342177280	; 0x50000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    4e1c:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4e1e:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    4e22:	2705      	movs	r7, #5
    4e24:	e7ca      	b.n	4dbc <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4e26:	f041 5140 	orr.w	r1, r1, #805306368	; 0x30000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    4e2a:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4e2c:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    4e30:	2703      	movs	r7, #3
    4e32:	e7c3      	b.n	4dbc <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4e34:	f041 41c0 	orr.w	r1, r1, #1610612736	; 0x60000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    4e38:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4e3a:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    4e3e:	2706      	movs	r7, #6
    4e40:	e7bc      	b.n	4dbc <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4e42:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    4e46:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4e48:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    4e4c:	2704      	movs	r7, #4
    4e4e:	e7b5      	b.n	4dbc <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4e50:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    4e54:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4e56:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    4e5a:	2702      	movs	r7, #2
    4e5c:	e7ae      	b.n	4dbc <_usb_d_dev_ep_enable+0x1fc>
    4e5e:	bf00      	nop
    4e60:	20007054 	.word	0x20007054
    4e64:	0fffc000 	.word	0x0fffc000

00004e68 <_usb_d_dev_ep_stall>:
{
    4e68:	b470      	push	{r4, r5, r6}
    4e6a:	b243      	sxtb	r3, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    4e6c:	0fdc      	lsrs	r4, r3, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    4e6e:	f010 000f 	ands.w	r0, r0, #15
    4e72:	d008      	beq.n	4e86 <_usb_d_dev_ep_stall+0x1e>
    4e74:	2b00      	cmp	r3, #0
    4e76:	bfb4      	ite	lt
    4e78:	1c83      	addlt	r3, r0, #2
    4e7a:	4603      	movge	r3, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
    4e7c:	2802      	cmp	r0, #2
    4e7e:	d903      	bls.n	4e88 <_usb_d_dev_ep_stall+0x20>
		return -USB_ERR_PARAM;
    4e80:	f06f 0011 	mvn.w	r0, #17
    4e84:	e018      	b.n	4eb8 <_usb_d_dev_ep_stall+0x50>
	return &dev_inst.ep[ep_index];
    4e86:	2300      	movs	r3, #0
	if (USB_EP_STALL_SET == ctrl) {
    4e88:	2901      	cmp	r1, #1
    4e8a:	d017      	beq.n	4ebc <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    4e8c:	2900      	cmp	r1, #0
    4e8e:	d03a      	beq.n	4f06 <_usb_d_dev_ep_stall+0x9e>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    4e90:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    4e94:	4a45      	ldr	r2, [pc, #276]	; (4fac <_usb_d_dev_ep_stall+0x144>)
    4e96:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4e9a:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    4e9e:	f003 030f 	and.w	r3, r3, #15
    4ea2:	015b      	lsls	r3, r3, #5
    4ea4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4ea8:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    4eac:	2310      	movs	r3, #16
    4eae:	40a3      	lsls	r3, r4
    4eb0:	421a      	tst	r2, r3
    4eb2:	bf14      	ite	ne
    4eb4:	2001      	movne	r0, #1
    4eb6:	2000      	moveq	r0, #0
}
    4eb8:	bc70      	pop	{r4, r5, r6}
    4eba:	4770      	bx	lr
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    4ebc:	2510      	movs	r5, #16
    4ebe:	40a5      	lsls	r5, r4
    4ec0:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    4ec2:	493a      	ldr	r1, [pc, #232]	; (4fac <_usb_d_dev_ep_stall+0x144>)
    4ec4:	009e      	lsls	r6, r3, #2
    4ec6:	18f2      	adds	r2, r6, r3
    4ec8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    4ecc:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    4ed0:	f002 020f 	and.w	r2, r2, #15
    4ed4:	0150      	lsls	r0, r2, #5
    4ed6:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    4eda:	f880 5105 	strb.w	r5, [r0, #261]	; 0x105
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    4ede:	2020      	movs	r0, #32
    4ee0:	fa00 f404 	lsl.w	r4, r0, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    4ee4:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    4ee6:	0152      	lsls	r2, r2, #5
    4ee8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    4eec:	f882 4109 	strb.w	r4, [r2, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    4ef0:	4433      	add	r3, r6
    4ef2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    4ef6:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    4efa:	f042 0208 	orr.w	r2, r2, #8
    4efe:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    4f02:	2000      	movs	r0, #0
    4f04:	e7d8      	b.n	4eb8 <_usb_d_dev_ep_stall+0x50>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    4f06:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    4f0a:	4928      	ldr	r1, [pc, #160]	; (4fac <_usb_d_dev_ep_stall+0x144>)
    4f0c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    4f10:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
    4f14:	f002 020f 	and.w	r2, r2, #15
    4f18:	0151      	lsls	r1, r2, #5
    4f1a:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    4f1e:	f891 5106 	ldrb.w	r5, [r1, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    4f22:	2010      	movs	r0, #16
    4f24:	40a0      	lsls	r0, r4
	if (!is_stalled) {
    4f26:	4205      	tst	r5, r0
    4f28:	d03c      	beq.n	4fa4 <_usb_d_dev_ep_stall+0x13c>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    4f2a:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    4f2c:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    4f30:	2020      	movs	r0, #32
    4f32:	40a0      	lsls	r0, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    4f34:	b2c5      	uxtb	r5, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    4f36:	f881 5108 	strb.w	r5, [r1, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    4f3a:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    4f3e:	4202      	tst	r2, r0
    4f40:	d007      	beq.n	4f52 <_usb_d_dev_ep_stall+0xea>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    4f42:	f881 5107 	strb.w	r5, [r1, #263]	; 0x107
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    4f46:	2201      	movs	r2, #1
    4f48:	fa02 f404 	lsl.w	r4, r2, r4
    4f4c:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    4f4e:	f881 4104 	strb.w	r4, [r1, #260]	; 0x104
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    4f52:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    4f56:	4815      	ldr	r0, [pc, #84]	; (4fac <_usb_d_dev_ep_stall+0x144>)
    4f58:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    4f5c:	f892 2087 	ldrb.w	r2, [r2, #135]	; 0x87
    4f60:	f002 0207 	and.w	r2, r2, #7
    4f64:	2a01      	cmp	r2, #1
    4f66:	d00c      	beq.n	4f82 <_usb_d_dev_ep_stall+0x11a>
		ept->flags.bits.is_stalled = 0;
    4f68:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    4f6c:	4a0f      	ldr	r2, [pc, #60]	; (4fac <_usb_d_dev_ep_stall+0x144>)
    4f6e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4f72:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    4f76:	f36f 02c3 	bfc	r2, #3, #1
    4f7a:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    4f7e:	2000      	movs	r0, #0
    4f80:	e79a      	b.n	4eb8 <_usb_d_dev_ep_stall+0x50>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    4f82:	f891 2106 	ldrb.w	r2, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    4f86:	f012 0f30 	tst.w	r2, #48	; 0x30
    4f8a:	d10d      	bne.n	4fa8 <_usb_d_dev_ep_stall+0x140>
			ept->flags.bits.is_stalled = 0;
    4f8c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    4f90:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    4f94:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    4f98:	f36f 02c3 	bfc	r2, #3, #1
    4f9c:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    4fa0:	2000      	movs	r0, #0
    4fa2:	e789      	b.n	4eb8 <_usb_d_dev_ep_stall+0x50>
    4fa4:	2000      	movs	r0, #0
    4fa6:	e787      	b.n	4eb8 <_usb_d_dev_ep_stall+0x50>
    4fa8:	2000      	movs	r0, #0
    4faa:	e785      	b.n	4eb8 <_usb_d_dev_ep_stall+0x50>
    4fac:	20007054 	.word	0x20007054

00004fb0 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    4fb0:	b430      	push	{r4, r5}
	uint8_t            epn   = USB_EP_GET_N(ep);
    4fb2:	f000 040f 	and.w	r4, r0, #15
    4fb6:	0163      	lsls	r3, r4, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    4fb8:	4a14      	ldr	r2, [pc, #80]	; (500c <_usb_d_dev_ep_read_req+0x5c>)
    4fba:	18d0      	adds	r0, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
    4fbc:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    4fbe:	6840      	ldr	r0, [r0, #4]
    4fc0:	f3c0 000d 	ubfx	r0, r0, #0, #14

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    4fc4:	2c02      	cmp	r4, #2
    4fc6:	d817      	bhi.n	4ff8 <_usb_d_dev_ep_read_req+0x48>
    4fc8:	b1c9      	cbz	r1, 4ffe <_usb_d_dev_ep_read_req+0x4e>
    4fca:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    4fce:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
    4fd2:	b2d2      	uxtb	r2, r2
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    4fd4:	2a11      	cmp	r2, #17
    4fd6:	d115      	bne.n	5004 <_usb_d_dev_ep_read_req+0x54>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    4fd8:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    4fdc:	f012 0f10 	tst.w	r2, #16
    4fe0:	d102      	bne.n	4fe8 <_usb_d_dev_ep_read_req+0x38>
		return ERR_NONE;
    4fe2:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    4fe4:	bc30      	pop	{r4, r5}
    4fe6:	4770      	bx	lr
	memcpy(req_buf, (void *)addr, 8);
    4fe8:	682c      	ldr	r4, [r5, #0]
    4fea:	686a      	ldr	r2, [r5, #4]
    4fec:	600c      	str	r4, [r1, #0]
    4fee:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    4ff0:	2210      	movs	r2, #16
    4ff2:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	return bytes;
    4ff6:	e7f5      	b.n	4fe4 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_PARAM;
    4ff8:	f06f 0011 	mvn.w	r0, #17
    4ffc:	e7f2      	b.n	4fe4 <_usb_d_dev_ep_read_req+0x34>
    4ffe:	f06f 0011 	mvn.w	r0, #17
    5002:	e7ef      	b.n	4fe4 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_FUNC;
    5004:	f06f 0012 	mvn.w	r0, #18
    5008:	e7ec      	b.n	4fe4 <_usb_d_dev_ep_read_req+0x34>
    500a:	bf00      	nop
    500c:	20007054 	.word	0x20007054

00005010 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    5010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5014:	b083      	sub	sp, #12
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    5016:	7a03      	ldrb	r3, [r0, #8]
    5018:	b25e      	sxtb	r6, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    501a:	f013 030f 	ands.w	r3, r3, #15
    501e:	f000 80c2 	beq.w	51a6 <_usb_d_dev_ep_trans+0x196>
    5022:	2e00      	cmp	r6, #0
    5024:	bfb4      	ite	lt
    5026:	1c9a      	addlt	r2, r3, #2
    5028:	461a      	movge	r2, r3
	return &dev_inst.ep[ep_index];
    502a:	4614      	mov	r4, r2
    502c:	4969      	ldr	r1, [pc, #420]	; (51d4 <_usb_d_dev_ep_trans+0x1c4>)
    502e:	f101 0760 	add.w	r7, r1, #96	; 0x60
    5032:	1c55      	adds	r5, r2, #1
    5034:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    5038:	eb07 0785 	add.w	r7, r7, r5, lsl #2
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    503c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    5040:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    5044:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
    5048:	f240 31ff 	movw	r1, #1023	; 0x3ff
    504c:	428a      	cmp	r2, r1
    504e:	d025      	beq.n	509c <_usb_d_dev_ep_trans+0x8c>
    5050:	1e55      	subs	r5, r2, #1
    5052:	b2ad      	uxth	r5, r5
	bool     size_n_aligned = (trans->size & size_mask);
    5054:	6841      	ldr	r1, [r0, #4]
    5056:	400d      	ands	r5, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    5058:	2b02      	cmp	r3, #2
    505a:	f200 8092 	bhi.w	5182 <_usb_d_dev_ep_trans+0x172>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    505e:	6803      	ldr	r3, [r0, #0]
    5060:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    5064:	d31c      	bcc.n	50a0 <_usb_d_dev_ep_trans+0x90>
    5066:	eb03 0c01 	add.w	ip, r3, r1
    506a:	f8df e180 	ldr.w	lr, [pc, #384]	; 51ec <_usb_d_dev_ep_trans+0x1dc>
    506e:	45f4      	cmp	ip, lr
    5070:	d816      	bhi.n	50a0 <_usb_d_dev_ep_trans+0x90>
    5072:	f013 0f03 	tst.w	r3, #3
    5076:	d113      	bne.n	50a0 <_usb_d_dev_ep_trans+0x90>
	    || (!dir && (trans->size < ept->size))) {
    5078:	2e00      	cmp	r6, #0
    507a:	db2a      	blt.n	50d2 <_usb_d_dev_ep_trans+0xc2>
    507c:	428a      	cmp	r2, r1
    507e:	f200 809c 	bhi.w	51ba <_usb_d_dev_ep_trans+0x1aa>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    5082:	b34d      	cbz	r5, 50d8 <_usb_d_dev_ep_trans+0xc8>
		if (!ept->cache) {
    5084:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    5088:	4a52      	ldr	r2, [pc, #328]	; (51d4 <_usb_d_dev_ep_trans+0x1c4>)
    508a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    508e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    5092:	2b00      	cmp	r3, #0
    5094:	d07b      	beq.n	518e <_usb_d_dev_ep_trans+0x17e>
	bool use_cache = false;
    5096:	f04f 0800 	mov.w	r8, #0
    509a:	e00c      	b.n	50b6 <_usb_d_dev_ep_trans+0xa6>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    509c:	4615      	mov	r5, r2
    509e:	e7d9      	b.n	5054 <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    50a0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    50a4:	4a4b      	ldr	r2, [pc, #300]	; (51d4 <_usb_d_dev_ep_trans+0x1c4>)
    50a6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    50aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    50ae:	2b00      	cmp	r3, #0
    50b0:	d06a      	beq.n	5188 <_usb_d_dev_ep_trans+0x178>
		use_cache = true;
    50b2:	f04f 0801 	mov.w	r8, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    50b6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    50ba:	4a46      	ldr	r2, [pc, #280]	; (51d4 <_usb_d_dev_ep_trans+0x1c4>)
    50bc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    50c0:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    50c4:	f013 0f08 	tst.w	r3, #8
    50c8:	d009      	beq.n	50de <_usb_d_dev_ep_trans+0xce>
		return USB_HALTED;
    50ca:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    50cc:	b003      	add	sp, #12
    50ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool use_cache = false;
    50d2:	f04f 0800 	mov.w	r8, #0
    50d6:	e7ee      	b.n	50b6 <_usb_d_dev_ep_trans+0xa6>
    50d8:	f04f 0800 	mov.w	r8, #0
    50dc:	e7eb      	b.n	50b6 <_usb_d_dev_ep_trans+0xa6>
    50de:	4682      	mov	sl, r0
	atomic_enter_critical(&flags);
    50e0:	a801      	add	r0, sp, #4
    50e2:	4b3d      	ldr	r3, [pc, #244]	; (51d8 <_usb_d_dev_ep_trans+0x1c8>)
    50e4:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    50e6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    50ea:	4a3a      	ldr	r2, [pc, #232]	; (51d4 <_usb_d_dev_ep_trans+0x1c4>)
    50ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    50f0:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    50f4:	f013 0f40 	tst.w	r3, #64	; 0x40
    50f8:	d13c      	bne.n	5174 <_usb_d_dev_ep_trans+0x164>
	ept->flags.bits.is_busy = 1;
    50fa:	eb04 0984 	add.w	r9, r4, r4, lsl #2
    50fe:	4b35      	ldr	r3, [pc, #212]	; (51d4 <_usb_d_dev_ep_trans+0x1c4>)
    5100:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    5104:	f899 3087 	ldrb.w	r3, [r9, #135]	; 0x87
    5108:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    510c:	f889 3087 	strb.w	r3, [r9, #135]	; 0x87
	atomic_leave_critical(&flags);
    5110:	a801      	add	r0, sp, #4
    5112:	4b32      	ldr	r3, [pc, #200]	; (51dc <_usb_d_dev_ep_trans+0x1cc>)
    5114:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    5116:	f8da 3000 	ldr.w	r3, [sl]
    511a:	f8c9 3074 	str.w	r3, [r9, #116]	; 0x74
	ept->trans_size  = trans->size;
    511e:	f8da 3004 	ldr.w	r3, [sl, #4]
    5122:	f8c9 3078 	str.w	r3, [r9, #120]	; 0x78
	ept->trans_count = 0;
    5126:	2300      	movs	r3, #0
    5128:	f8c9 307c 	str.w	r3, [r9, #124]	; 0x7c
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    512c:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    512e:	f899 3087 	ldrb.w	r3, [r9, #135]	; 0x87
    5132:	f362 13c7 	bfi	r3, r2, #7, #1
	ept->flags.bits.use_cache = use_cache;
    5136:	f368 1345 	bfi	r3, r8, #5, #1
    513a:	f889 3087 	strb.w	r3, [r9, #135]	; 0x87
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    513e:	f89a 3009 	ldrb.w	r3, [sl, #9]
    5142:	b1e3      	cbz	r3, 517e <_usb_d_dev_ep_trans+0x16e>
    5144:	fab5 f585 	clz	r5, r5
    5148:	096d      	lsrs	r5, r5, #5
    514a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    514e:	4b21      	ldr	r3, [pc, #132]	; (51d4 <_usb_d_dev_ep_trans+0x1c4>)
    5150:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    5154:	f894 3087 	ldrb.w	r3, [r4, #135]	; 0x87
    5158:	f365 1304 	bfi	r3, r5, #4, #1
    515c:	f884 3087 	strb.w	r3, [r4, #135]	; 0x87
	if (dir) {
    5160:	2e00      	cmp	r6, #0
		_usb_d_dev_in_next(ept, false);
    5162:	f04f 0100 	mov.w	r1, #0
    5166:	4638      	mov	r0, r7
    5168:	bfb4      	ite	lt
    516a:	4b1d      	ldrlt	r3, [pc, #116]	; (51e0 <_usb_d_dev_ep_trans+0x1d0>)
		_usb_d_dev_out_next(ept, false);
    516c:	4b1d      	ldrge	r3, [pc, #116]	; (51e4 <_usb_d_dev_ep_trans+0x1d4>)
    516e:	4798      	blx	r3
	return ERR_NONE;
    5170:	2000      	movs	r0, #0
    5172:	e7ab      	b.n	50cc <_usb_d_dev_ep_trans+0xbc>
		atomic_leave_critical(&flags);
    5174:	a801      	add	r0, sp, #4
    5176:	4b19      	ldr	r3, [pc, #100]	; (51dc <_usb_d_dev_ep_trans+0x1cc>)
    5178:	4798      	blx	r3
		return USB_BUSY;
    517a:	2001      	movs	r0, #1
    517c:	e7a6      	b.n	50cc <_usb_d_dev_ep_trans+0xbc>
    517e:	2500      	movs	r5, #0
    5180:	e7e3      	b.n	514a <_usb_d_dev_ep_trans+0x13a>
		return -USB_ERR_PARAM;
    5182:	f06f 0011 	mvn.w	r0, #17
    5186:	e7a1      	b.n	50cc <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    5188:	f06f 0012 	mvn.w	r0, #18
    518c:	e79e      	b.n	50cc <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_PARAM;
    518e:	f06f 0011 	mvn.w	r0, #17
    5192:	e79b      	b.n	50cc <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    5194:	f06f 0012 	mvn.w	r0, #18
    5198:	e798      	b.n	50cc <_usb_d_dev_ep_trans+0xbc>
	bool     size_n_aligned = (trans->size & size_mask);
    519a:	6841      	ldr	r1, [r0, #4]
    519c:	f3c1 0509 	ubfx	r5, r1, #0, #10
	return &dev_inst.ep[ep_index];
    51a0:	4f11      	ldr	r7, [pc, #68]	; (51e8 <_usb_d_dev_ep_trans+0x1d8>)
    51a2:	2400      	movs	r4, #0
    51a4:	e75b      	b.n	505e <_usb_d_dev_ep_trans+0x4e>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    51a6:	4a0b      	ldr	r2, [pc, #44]	; (51d4 <_usb_d_dev_ep_trans+0x1c4>)
    51a8:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
    51ac:	f240 31ff 	movw	r1, #1023	; 0x3ff
    51b0:	428a      	cmp	r2, r1
    51b2:	d0f2      	beq.n	519a <_usb_d_dev_ep_trans+0x18a>
	return &dev_inst.ep[ep_index];
    51b4:	4f0c      	ldr	r7, [pc, #48]	; (51e8 <_usb_d_dev_ep_trans+0x1d8>)
    51b6:	2400      	movs	r4, #0
    51b8:	e74a      	b.n	5050 <_usb_d_dev_ep_trans+0x40>
		if (!ept->cache) {
    51ba:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    51be:	4a05      	ldr	r2, [pc, #20]	; (51d4 <_usb_d_dev_ep_trans+0x1c4>)
    51c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    51c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    51c8:	2b00      	cmp	r3, #0
    51ca:	d0e3      	beq.n	5194 <_usb_d_dev_ep_trans+0x184>
    51cc:	f04f 0801 	mov.w	r8, #1
    51d0:	e771      	b.n	50b6 <_usb_d_dev_ep_trans+0xa6>
    51d2:	bf00      	nop
    51d4:	20007054 	.word	0x20007054
    51d8:	000014cd 	.word	0x000014cd
    51dc:	000014db 	.word	0x000014db
    51e0:	000042a5 	.word	0x000042a5
    51e4:	00004429 	.word	0x00004429
    51e8:	200070c8 	.word	0x200070c8
    51ec:	20031fff 	.word	0x20031fff

000051f0 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    51f0:	4b06      	ldr	r3, [pc, #24]	; (520c <_usb_d_dev_register_callback+0x1c>)
    51f2:	2900      	cmp	r1, #0
    51f4:	bf08      	it	eq
    51f6:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
    51f8:	2801      	cmp	r0, #1
    51fa:	d003      	beq.n	5204 <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    51fc:	b908      	cbnz	r0, 5202 <_usb_d_dev_register_callback+0x12>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    51fe:	4b04      	ldr	r3, [pc, #16]	; (5210 <_usb_d_dev_register_callback+0x20>)
    5200:	6619      	str	r1, [r3, #96]	; 0x60
    5202:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    5204:	4b02      	ldr	r3, [pc, #8]	; (5210 <_usb_d_dev_register_callback+0x20>)
    5206:	6659      	str	r1, [r3, #100]	; 0x64
    5208:	4770      	bx	lr
    520a:	bf00      	nop
    520c:	0000401d 	.word	0x0000401d
    5210:	20007054 	.word	0x20007054

00005214 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    5214:	4b09      	ldr	r3, [pc, #36]	; (523c <_usb_d_dev_register_ep_callback+0x28>)
    5216:	2900      	cmp	r1, #0
    5218:	bf08      	it	eq
    521a:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
    521c:	4603      	mov	r3, r0
    521e:	b130      	cbz	r0, 522e <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    5220:	2801      	cmp	r0, #1
    5222:	d007      	beq.n	5234 <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    5224:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    5226:	bf04      	itt	eq
    5228:	4b05      	ldreq	r3, [pc, #20]	; (5240 <_usb_d_dev_register_ep_callback+0x2c>)
    522a:	6719      	streq	r1, [r3, #112]	; 0x70
    522c:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    522e:	4b04      	ldr	r3, [pc, #16]	; (5240 <_usb_d_dev_register_ep_callback+0x2c>)
    5230:	6699      	str	r1, [r3, #104]	; 0x68
    5232:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    5234:	4b02      	ldr	r3, [pc, #8]	; (5240 <_usb_d_dev_register_ep_callback+0x2c>)
    5236:	66d9      	str	r1, [r3, #108]	; 0x6c
    5238:	4770      	bx	lr
    523a:	bf00      	nop
    523c:	0000401d 	.word	0x0000401d
    5240:	20007054 	.word	0x20007054

00005244 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    5244:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    5246:	4b01      	ldr	r3, [pc, #4]	; (524c <USB_0_Handler+0x8>)
    5248:	4798      	blx	r3
    524a:	bd08      	pop	{r3, pc}
    524c:	00004619 	.word	0x00004619

00005250 <USB_1_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    5250:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    5252:	4b01      	ldr	r3, [pc, #4]	; (5258 <USB_1_Handler+0x8>)
    5254:	4798      	blx	r3
    5256:	bd08      	pop	{r3, pc}
    5258:	00004619 	.word	0x00004619

0000525c <USB_2_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    525c:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    525e:	4b01      	ldr	r3, [pc, #4]	; (5264 <USB_2_Handler+0x8>)
    5260:	4798      	blx	r3
    5262:	bd08      	pop	{r3, pc}
    5264:	00004619 	.word	0x00004619

00005268 <USB_3_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    5268:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    526a:	4b01      	ldr	r3, [pc, #4]	; (5270 <USB_3_Handler+0x8>)
    526c:	4798      	blx	r3
    526e:	bd08      	pop	{r3, pc}
    5270:	00004619 	.word	0x00004619

00005274 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    5274:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    5276:	4604      	mov	r4, r0
    5278:	b330      	cbz	r0, 52c8 <_wdt_init+0x54>
    527a:	6800      	ldr	r0, [r0, #0]
    527c:	3000      	adds	r0, #0
    527e:	bf18      	it	ne
    5280:	2001      	movne	r0, #1
    5282:	2250      	movs	r2, #80	; 0x50
    5284:	4914      	ldr	r1, [pc, #80]	; (52d8 <_wdt_init+0x64>)
    5286:	4b15      	ldr	r3, [pc, #84]	; (52dc <_wdt_init+0x68>)
    5288:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    528a:	6823      	ldr	r3, [r4, #0]
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    528c:	689a      	ldr	r2, [r3, #8]
    528e:	f012 0f0e 	tst.w	r2, #14
    5292:	d1fb      	bne.n	528c <_wdt_init+0x18>

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	tmp = ((Wdt *)hw)->CTRLA.reg;
    5294:	781a      	ldrb	r2, [r3, #0]
    5296:	09d2      	lsrs	r2, r2, #7
    5298:	d118      	bne.n	52cc <_wdt_init+0x58>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    529a:	689a      	ldr	r2, [r3, #8]
    529c:	f012 0f0e 	tst.w	r2, #14
    52a0:	d1fb      	bne.n	529a <_wdt_init+0x26>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    52a2:	781a      	ldrb	r2, [r3, #0]
    52a4:	f012 0f02 	tst.w	r2, #2
    52a8:	d113      	bne.n	52d2 <_wdt_init+0x5e>

static inline void hri_wdt_write_CONFIG_WINDOW_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    52aa:	785a      	ldrb	r2, [r3, #1]
	tmp &= ~WDT_CONFIG_WINDOW_Msk;
    52ac:	f002 020f 	and.w	r2, r2, #15
	tmp |= WDT_CONFIG_WINDOW(data);
    52b0:	f042 02b0 	orr.w	r2, r2, #176	; 0xb0
	((Wdt *)hw)->CONFIG.reg = tmp;
    52b4:	705a      	strb	r2, [r3, #1]
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    52b6:	6822      	ldr	r2, [r4, #0]
	tmp = ((Wdt *)hw)->CONFIG.reg;
    52b8:	7853      	ldrb	r3, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    52ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
    52be:	f043 030b 	orr.w	r3, r3, #11
	((Wdt *)hw)->CONFIG.reg = tmp;
    52c2:	7053      	strb	r3, [r2, #1]
	}

	return ERR_NONE;
    52c4:	2000      	movs	r0, #0
    52c6:	bd10      	pop	{r4, pc}
    52c8:	2000      	movs	r0, #0
    52ca:	e7da      	b.n	5282 <_wdt_init+0xe>
		return ERR_DENIED;
    52cc:	f06f 0010 	mvn.w	r0, #16
    52d0:	bd10      	pop	{r4, pc}
    52d2:	f06f 0010 	mvn.w	r0, #16
}
    52d6:	bd10      	pop	{r4, pc}
    52d8:	0000efec 	.word	0x0000efec
    52dc:	000026b1 	.word	0x000026b1

000052e0 <_wdt_set_timeout_period>:

/**
 * \brief set timeout period for WDT instance
 */
int32_t _wdt_set_timeout_period(struct wdt_dev *const dev, const uint32_t clk_rate, const uint16_t timeout_period)
{
    52e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    52e2:	460e      	mov	r6, r1
    52e4:	4614      	mov	r4, r2
	uint64_t            tmp;
	uint32_t            period_cycles;
	enum wdt_period_reg timeout_period_reg;
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    52e6:	4605      	mov	r5, r0
    52e8:	b390      	cbz	r0, 5350 <_wdt_set_timeout_period+0x70>
    52ea:	6800      	ldr	r0, [r0, #0]
    52ec:	3000      	adds	r0, #0
    52ee:	bf18      	it	ne
    52f0:	2001      	movne	r0, #1
    52f2:	227a      	movs	r2, #122	; 0x7a
    52f4:	4936      	ldr	r1, [pc, #216]	; (53d0 <_wdt_set_timeout_period+0xf0>)
    52f6:	4b37      	ldr	r3, [pc, #220]	; (53d4 <_wdt_set_timeout_period+0xf4>)
    52f8:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    52fa:	682b      	ldr	r3, [r5, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    52fc:	6899      	ldr	r1, [r3, #8]
    52fe:	f011 0f0e 	tst.w	r1, #14
    5302:	d1fb      	bne.n	52fc <_wdt_set_timeout_period+0x1c>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    5304:	781a      	ldrb	r2, [r3, #0]
    5306:	09d2      	lsrs	r2, r2, #7
    5308:	d158      	bne.n	53bc <_wdt_set_timeout_period+0xdc>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    530a:	6899      	ldr	r1, [r3, #8]
    530c:	f011 0f0e 	tst.w	r1, #14
    5310:	d1fb      	bne.n	530a <_wdt_set_timeout_period+0x2a>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    5312:	781a      	ldrb	r2, [r3, #0]
    5314:	f012 0f02 	tst.w	r2, #2
    5318:	d153      	bne.n	53c2 <_wdt_set_timeout_period+0xe2>
		return ERR_DENIED;
	} else {
		/* calc the period cycles corresponding to timeout period */
		tmp = (uint64_t)timeout_period * clk_rate;
    531a:	fba4 6706 	umull	r6, r7, r4, r6

		/* check whether overflow*/
		if (tmp >> 32) {
    531e:	463c      	mov	r4, r7
    5320:	2500      	movs	r5, #0
    5322:	ea54 0205 	orrs.w	r2, r4, r5
    5326:	d14f      	bne.n	53c8 <_wdt_set_timeout_period+0xe8>
			return ERR_INVALID_ARG;
		}

		period_cycles = (uint32_t)tmp;
		/* calc the register value corresponding to period cysles */
		switch (period_cycles) {
    5328:	f5b6 3f7a 	cmp.w	r6, #256000	; 0x3e800
    532c:	d038      	beq.n	53a0 <_wdt_set_timeout_period+0xc0>
    532e:	d911      	bls.n	5354 <_wdt_set_timeout_period+0x74>
    5330:	f5b6 1ffa 	cmp.w	r6, #2048000	; 0x1f4000
    5334:	d038      	beq.n	53a8 <_wdt_set_timeout_period+0xc8>
    5336:	d927      	bls.n	5388 <_wdt_set_timeout_period+0xa8>
    5338:	f5b6 0ffa 	cmp.w	r6, #8192000	; 0x7d0000
    533c:	d038      	beq.n	53b0 <_wdt_set_timeout_period+0xd0>
    533e:	f5b6 0f7a 	cmp.w	r6, #16384000	; 0xfa0000
    5342:	d037      	beq.n	53b4 <_wdt_set_timeout_period+0xd4>
    5344:	f5b6 1f7a 	cmp.w	r6, #4096000	; 0x3e8000
    5348:	d030      	beq.n	53ac <_wdt_set_timeout_period+0xcc>
			break;
		case WDT_CLK_16384CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_16384CYCLE;
			break;
		default:
			return ERR_INVALID_ARG;
    534a:	f06f 000c 	mvn.w	r0, #12
	}

	hri_wdt_write_CONFIG_PER_bf(dev->hw, (uint8_t)timeout_period_reg);

	return ERR_NONE;
}
    534e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5350:	2000      	movs	r0, #0
    5352:	e7ce      	b.n	52f2 <_wdt_set_timeout_period+0x12>
		switch (period_cycles) {
    5354:	f5b6 4ffa 	cmp.w	r6, #32000	; 0x7d00
    5358:	d01e      	beq.n	5398 <_wdt_set_timeout_period+0xb8>
    535a:	d80d      	bhi.n	5378 <_wdt_set_timeout_period+0x98>
    535c:	f5b6 5ffa 	cmp.w	r6, #8000	; 0x1f40
    5360:	d02a      	beq.n	53b8 <_wdt_set_timeout_period+0xd8>
    5362:	f5b6 5f7a 	cmp.w	r6, #16000	; 0x3e80
    5366:	d1f0      	bne.n	534a <_wdt_set_timeout_period+0x6a>
			timeout_period_reg = WDT_PERIOD_16CYCLE;
    5368:	2101      	movs	r1, #1
	tmp = ((Wdt *)hw)->CONFIG.reg;
    536a:	785a      	ldrb	r2, [r3, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    536c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
    5370:	430a      	orrs	r2, r1
	((Wdt *)hw)->CONFIG.reg = tmp;
    5372:	705a      	strb	r2, [r3, #1]
	return ERR_NONE;
    5374:	2000      	movs	r0, #0
    5376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		switch (period_cycles) {
    5378:	f5b6 4f7a 	cmp.w	r6, #64000	; 0xfa00
    537c:	d00e      	beq.n	539c <_wdt_set_timeout_period+0xbc>
    537e:	f5b6 3ffa 	cmp.w	r6, #128000	; 0x1f400
    5382:	d1e2      	bne.n	534a <_wdt_set_timeout_period+0x6a>
			timeout_period_reg = WDT_PERIOD_128CYCLE;
    5384:	2104      	movs	r1, #4
			break;
    5386:	e7f0      	b.n	536a <_wdt_set_timeout_period+0x8a>
		switch (period_cycles) {
    5388:	f5b6 2ffa 	cmp.w	r6, #512000	; 0x7d000
    538c:	d00a      	beq.n	53a4 <_wdt_set_timeout_period+0xc4>
    538e:	f5b6 2f7a 	cmp.w	r6, #1024000	; 0xfa000
    5392:	d1da      	bne.n	534a <_wdt_set_timeout_period+0x6a>
			timeout_period_reg = WDT_PERIOD_1024CYCLE;
    5394:	2107      	movs	r1, #7
			break;
    5396:	e7e8      	b.n	536a <_wdt_set_timeout_period+0x8a>
			timeout_period_reg = WDT_PERIOD_32CYCLE;
    5398:	2102      	movs	r1, #2
			break;
    539a:	e7e6      	b.n	536a <_wdt_set_timeout_period+0x8a>
			timeout_period_reg = WDT_PERIOD_64CYCLE;
    539c:	2103      	movs	r1, #3
			break;
    539e:	e7e4      	b.n	536a <_wdt_set_timeout_period+0x8a>
			timeout_period_reg = WDT_PERIOD_256CYCLE;
    53a0:	2105      	movs	r1, #5
			break;
    53a2:	e7e2      	b.n	536a <_wdt_set_timeout_period+0x8a>
			timeout_period_reg = WDT_PERIOD_512CYCLE;
    53a4:	2106      	movs	r1, #6
			break;
    53a6:	e7e0      	b.n	536a <_wdt_set_timeout_period+0x8a>
			timeout_period_reg = WDT_PERIOD_2048CYCLE;
    53a8:	2108      	movs	r1, #8
			break;
    53aa:	e7de      	b.n	536a <_wdt_set_timeout_period+0x8a>
			timeout_period_reg = WDT_PERIOD_4096CYCLE;
    53ac:	2109      	movs	r1, #9
			break;
    53ae:	e7dc      	b.n	536a <_wdt_set_timeout_period+0x8a>
			timeout_period_reg = WDT_PERIOD_8192CYCLE;
    53b0:	210a      	movs	r1, #10
			break;
    53b2:	e7da      	b.n	536a <_wdt_set_timeout_period+0x8a>
			timeout_period_reg = WDT_PERIOD_16384CYCLE;
    53b4:	210b      	movs	r1, #11
			break;
    53b6:	e7d8      	b.n	536a <_wdt_set_timeout_period+0x8a>
			timeout_period_reg = WDT_PERIOD_8CYCLE;
    53b8:	2100      	movs	r1, #0
    53ba:	e7d6      	b.n	536a <_wdt_set_timeout_period+0x8a>
		return ERR_DENIED;
    53bc:	f06f 0010 	mvn.w	r0, #16
    53c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    53c2:	f06f 0010 	mvn.w	r0, #16
    53c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return ERR_INVALID_ARG;
    53c8:	f06f 000c 	mvn.w	r0, #12
    53cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    53ce:	bf00      	nop
    53d0:	0000efec 	.word	0x0000efec
    53d4:	000026b1 	.word	0x000026b1

000053d8 <_wdt_enable>:

/**
 * \brief enbale watchdog timer
 */
int32_t _wdt_enable(struct wdt_dev *const dev)
{
    53d8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    53da:	4604      	mov	r4, r0
    53dc:	b190      	cbz	r0, 5404 <_wdt_enable+0x2c>
    53de:	6800      	ldr	r0, [r0, #0]
    53e0:	3000      	adds	r0, #0
    53e2:	bf18      	it	ne
    53e4:	2001      	movne	r0, #1
    53e6:	22fb      	movs	r2, #251	; 0xfb
    53e8:	4907      	ldr	r1, [pc, #28]	; (5408 <_wdt_enable+0x30>)
    53ea:	4b08      	ldr	r3, [pc, #32]	; (540c <_wdt_enable+0x34>)
    53ec:	4798      	blx	r3

	hri_wdt_set_CTRLA_ENABLE_bit(dev->hw);
    53ee:	6822      	ldr	r2, [r4, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    53f0:	6893      	ldr	r3, [r2, #8]
    53f2:	f013 0f0e 	tst.w	r3, #14
    53f6:	d1fb      	bne.n	53f0 <_wdt_enable+0x18>
	((Wdt *)hw)->CTRLA.reg |= WDT_CTRLA_ENABLE;
    53f8:	7813      	ldrb	r3, [r2, #0]
    53fa:	f043 0302 	orr.w	r3, r3, #2
    53fe:	7013      	strb	r3, [r2, #0]

	return ERR_NONE;
}
    5400:	2000      	movs	r0, #0
    5402:	bd10      	pop	{r4, pc}
    5404:	2000      	movs	r0, #0
    5406:	e7ee      	b.n	53e6 <_wdt_enable+0xe>
    5408:	0000efec 	.word	0x0000efec
    540c:	000026b1 	.word	0x000026b1

00005410 <_wdt_disable>:

/**
 * \brief disable watchdog timer
 */
int32_t _wdt_disable(struct wdt_dev *const dev)
{
    5410:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    5412:	4604      	mov	r4, r0
    5414:	b1d0      	cbz	r0, 544c <_wdt_disable+0x3c>
    5416:	6800      	ldr	r0, [r0, #0]
    5418:	3000      	adds	r0, #0
    541a:	bf18      	it	ne
    541c:	2001      	movne	r0, #1
    541e:	f44f 7284 	mov.w	r2, #264	; 0x108
    5422:	490d      	ldr	r1, [pc, #52]	; (5458 <_wdt_disable+0x48>)
    5424:	4b0d      	ldr	r3, [pc, #52]	; (545c <_wdt_disable+0x4c>)
    5426:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw)) {
    5428:	6823      	ldr	r3, [r4, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    542a:	689a      	ldr	r2, [r3, #8]
    542c:	f012 0f0e 	tst.w	r2, #14
    5430:	d1fb      	bne.n	542a <_wdt_disable+0x1a>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    5432:	781a      	ldrb	r2, [r3, #0]
    5434:	09d2      	lsrs	r2, r2, #7
    5436:	d10b      	bne.n	5450 <_wdt_disable+0x40>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    5438:	689a      	ldr	r2, [r3, #8]
    543a:	f012 0f0e 	tst.w	r2, #14
    543e:	d1fb      	bne.n	5438 <_wdt_disable+0x28>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_ENABLE;
    5440:	781a      	ldrb	r2, [r3, #0]
    5442:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
    5446:	701a      	strb	r2, [r3, #0]
		return ERR_DENIED;
	} else {
		hri_wdt_clear_CTRLA_ENABLE_bit(dev->hw);
	}

	return ERR_NONE;
    5448:	2000      	movs	r0, #0
    544a:	bd10      	pop	{r4, pc}
    544c:	2000      	movs	r0, #0
    544e:	e7e6      	b.n	541e <_wdt_disable+0xe>
		return ERR_DENIED;
    5450:	f06f 0010 	mvn.w	r0, #16
}
    5454:	bd10      	pop	{r4, pc}
    5456:	bf00      	nop
    5458:	0000efec 	.word	0x0000efec
    545c:	000026b1 	.word	0x000026b1

00005460 <_wdt_feed>:

/**
 * \brief reset watchdog timer to make wdt work from start
 */
int32_t _wdt_feed(struct wdt_dev *const dev)
{
    5460:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    5462:	4604      	mov	r4, r0
    5464:	b168      	cbz	r0, 5482 <_wdt_feed+0x22>
    5466:	6800      	ldr	r0, [r0, #0]
    5468:	3000      	adds	r0, #0
    546a:	bf18      	it	ne
    546c:	2001      	movne	r0, #1
    546e:	f240 1219 	movw	r2, #281	; 0x119
    5472:	4905      	ldr	r1, [pc, #20]	; (5488 <_wdt_feed+0x28>)
    5474:	4b05      	ldr	r3, [pc, #20]	; (548c <_wdt_feed+0x2c>)
    5476:	4798      	blx	r3

	hri_wdt_write_CLEAR_reg(dev->hw, WDT_CLEAR_CLEAR_KEY);
    5478:	6823      	ldr	r3, [r4, #0]
	((Wdt *)hw)->CLEAR.reg = data;
    547a:	22a5      	movs	r2, #165	; 0xa5
    547c:	731a      	strb	r2, [r3, #12]

	return ERR_NONE;
}
    547e:	2000      	movs	r0, #0
    5480:	bd10      	pop	{r4, pc}
    5482:	2000      	movs	r0, #0
    5484:	e7f3      	b.n	546e <_wdt_feed+0xe>
    5486:	bf00      	nop
    5488:	0000efec 	.word	0x0000efec
    548c:	000026b1 	.word	0x000026b1

00005490 <I2C_configMONITOREDINPUTS>:
// * CALLED BY:			  main()                                                                                                       *
// * CALLS:		          No function. ALL macros defined in this function file.                                                       *
// * --------------------------------------------------------------------------------------------------------------------------------- *
int I2C_configMONITOREDINPUTS(uint8_t sda,  uint8_t clk, unsigned char channel)

{
    5490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5494:	b08d      	sub	sp, #52	; 0x34
	uint8_t     		i2csda, i2cclk;
	unsigned char		forloop;

	/* Clip channel for correct assignment */
    channel &= 0x03;
    5496:	f002 0303 	and.w	r3, r2, #3
    549a:	9309      	str	r3, [sp, #36]	; 0x24
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    549c:	f001 041f 	and.w	r4, r1, #31
    54a0:	2301      	movs	r3, #1
    54a2:	fa03 f404 	lsl.w	r4, r3, r4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    54a6:	094a      	lsrs	r2, r1, #5
    54a8:	4da3      	ldr	r5, [pc, #652]	; (5738 <I2C_configMONITOREDINPUTS+0x2a8>)
    54aa:	9202      	str	r2, [sp, #8]
    54ac:	eb05 17c2 	add.w	r7, r5, r2, lsl #7
    54b0:	61bc      	str	r4, [r7, #24]
    54b2:	0942      	lsrs	r2, r0, #5
    54b4:	9203      	str	r2, [sp, #12]
    54b6:	f000 001f 	and.w	r0, r0, #31
    54ba:	fa03 fa00 	lsl.w	sl, r3, r0
    54be:	9201      	str	r2, [sp, #4]
    54c0:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    54c4:	f8c5 a018 	str.w	sl, [r5, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    54c8:	f8c5 a008 	str.w	sl, [r5, #8]
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    54cc:	fa1f f38a 	uxth.w	r3, sl
    54d0:	9307      	str	r3, [sp, #28]
    54d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    54d6:	9305      	str	r3, [sp, #20]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    54d8:	62ab      	str	r3, [r5, #40]	; 0x28
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    54da:	ea4f 431a 	mov.w	r3, sl, lsr #16
    54de:	9308      	str	r3, [sp, #32]
		hri_port_write_WRCONFIG_reg(
    54e0:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    54e4:	9306      	str	r3, [sp, #24]
    54e6:	62ab      	str	r3, [r5, #40]	; 0x28

	/* Open an I2C channel, send address 0x68, then send the configuration values for setting up a conversion result */
	I2C_OPEN(sda, clk);
	I2C_START(-1);
    54e8:	2005      	movs	r0, #5
    54ea:	4e94      	ldr	r6, [pc, #592]	; (573c <I2C_configMONITOREDINPUTS+0x2ac>)
    54ec:	47b0      	blx	r6
    54ee:	2005      	movs	r0, #5
    54f0:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    54f2:	f8c5 a014 	str.w	sl, [r5, #20]
    54f6:	2005      	movs	r0, #5
    54f8:	47b0      	blx	r6
    54fa:	617c      	str	r4, [r7, #20]
    54fc:	2005      	movs	r0, #5
    54fe:	47b0      	blx	r6
    5500:	2707      	movs	r7, #7
	I2C_SENDADDR(0x68, forloop);
    5502:	2640      	movs	r6, #64	; 0x40
    5504:	f8df 9230 	ldr.w	r9, [pc, #560]	; 5738 <I2C_configMONITOREDINPUTS+0x2a8>
    5508:	9a01      	ldr	r2, [sp, #4]
    550a:	eb09 1bc2 	add.w	fp, r9, r2, lsl #7
    550e:	4d8b      	ldr	r5, [pc, #556]	; (573c <I2C_configMONITOREDINPUTS+0x2ac>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5510:	9902      	ldr	r1, [sp, #8]
    5512:	fa01 f307 	lsl.w	r3, r1, r7
    5516:	9300      	str	r3, [sp, #0]
    5518:	f016 0f68 	tst.w	r6, #104	; 0x68
    551c:	bf14      	ite	ne
    551e:	f8cb a018 	strne.w	sl, [fp, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5522:	f8cb a014 	streq.w	sl, [fp, #20]
    5526:	2005      	movs	r0, #5
    5528:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    552a:	9b00      	ldr	r3, [sp, #0]
    552c:	eb09 0803 	add.w	r8, r9, r3
    5530:	f8c8 4018 	str.w	r4, [r8, #24]
    5534:	2005      	movs	r0, #5
    5536:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5538:	f8c8 4014 	str.w	r4, [r8, #20]
    553c:	2005      	movs	r0, #5
    553e:	47a8      	blx	r5
    5540:	0876      	lsrs	r6, r6, #1
    5542:	3f01      	subs	r7, #1
    5544:	d1e8      	bne.n	5518 <I2C_configMONITOREDINPUTS+0x88>
    5546:	4d7c      	ldr	r5, [pc, #496]	; (5738 <I2C_configMONITOREDINPUTS+0x2a8>)
    5548:	9b03      	ldr	r3, [sp, #12]
    554a:	eb05 16c3 	add.w	r6, r5, r3, lsl #7
    554e:	f8c6 a014 	str.w	sl, [r6, #20]
	I2C_WRITE();
    5552:	2005      	movs	r0, #5
    5554:	4f79      	ldr	r7, [pc, #484]	; (573c <I2C_configMONITOREDINPUTS+0x2ac>)
    5556:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5558:	9a02      	ldr	r2, [sp, #8]
    555a:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    555e:	61ac      	str	r4, [r5, #24]
    5560:	2005      	movs	r0, #5
    5562:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5564:	616c      	str	r4, [r5, #20]
    5566:	2005      	movs	r0, #5
    5568:	47b8      	blx	r7
    556a:	9b03      	ldr	r3, [sp, #12]
    556c:	01db      	lsls	r3, r3, #7
    556e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    5572:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    5576:	9304      	str	r3, [sp, #16]
    5578:	f8c3 a004 	str.w	sl, [r3, #4]
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    557c:	9907      	ldr	r1, [sp, #28]
    557e:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    5582:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
    5586:	9107      	str	r1, [sp, #28]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    5588:	62b1      	str	r1, [r6, #40]	; 0x28
		hri_port_write_WRCONFIG_reg(PORT,
    558a:	9908      	ldr	r1, [sp, #32]
    558c:	f041 4140 	orr.w	r1, r1, #3221225472	; 0xc0000000
    5590:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
    5594:	9108      	str	r1, [sp, #32]
    5596:	62b1      	str	r1, [r6, #40]	; 0x28
	I2C_WAITACKOP(-2);
    5598:	2005      	movs	r0, #5
    559a:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    559c:	61ac      	str	r4, [r5, #24]
    559e:	2005      	movs	r0, #5
    55a0:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    55a2:	a80a      	add	r0, sp, #40	; 0x28
    55a4:	4b66      	ldr	r3, [pc, #408]	; (5740 <I2C_configMONITOREDINPUTS+0x2b0>)
    55a6:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    55a8:	9a04      	ldr	r2, [sp, #16]
    55aa:	6812      	ldr	r2, [r2, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    55ac:	6a33      	ldr	r3, [r6, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    55ae:	6935      	ldr	r5, [r6, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    55b0:	405d      	eors	r5, r3
    55b2:	4015      	ands	r5, r2
    55b4:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    55b6:	a80a      	add	r0, sp, #40	; 0x28
    55b8:	4b62      	ldr	r3, [pc, #392]	; (5744 <I2C_configMONITOREDINPUTS+0x2b4>)
    55ba:	4798      	blx	r3
    55bc:	ea1a 0f05 	tst.w	sl, r5
    55c0:	f040 8087 	bne.w	56d2 <I2C_configMONITOREDINPUTS+0x242>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    55c4:	4d5c      	ldr	r5, [pc, #368]	; (5738 <I2C_configMONITOREDINPUTS+0x2a8>)
    55c6:	9b02      	ldr	r3, [sp, #8]
    55c8:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    55cc:	615c      	str	r4, [r3, #20]
    55ce:	2005      	movs	r0, #5
    55d0:	4e5a      	ldr	r6, [pc, #360]	; (573c <I2C_configMONITOREDINPUTS+0x2ac>)
    55d2:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    55d4:	9a03      	ldr	r2, [sp, #12]
    55d6:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    55da:	f8c5 a008 	str.w	sl, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    55de:	9a05      	ldr	r2, [sp, #20]
    55e0:	62aa      	str	r2, [r5, #40]	; 0x28
    55e2:	9a06      	ldr	r2, [sp, #24]
    55e4:	62aa      	str	r2, [r5, #40]	; 0x28
    55e6:	2005      	movs	r0, #5
    55e8:	47b0      	blx	r6
	I2C_SENDDATA(((channel << 5) + 0x80), forloop);
    55ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
    55ec:	0153      	lsls	r3, r2, #5
    55ee:	f103 0280 	add.w	r2, r3, #128	; 0x80
    55f2:	9200      	str	r2, [sp, #0]
    55f4:	2508      	movs	r5, #8
    55f6:	2780      	movs	r7, #128	; 0x80
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    55f8:	f8df b13c 	ldr.w	fp, [pc, #316]	; 5738 <I2C_configMONITOREDINPUTS+0x2a8>
    55fc:	9a01      	ldr	r2, [sp, #4]
    55fe:	eb0b 12c2 	add.w	r2, fp, r2, lsl #7
    5602:	9201      	str	r2, [sp, #4]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5604:	9b02      	ldr	r3, [sp, #8]
    5606:	ea4f 19c3 	mov.w	r9, r3, lsl #7
    560a:	46d0      	mov	r8, sl
    560c:	46a2      	mov	sl, r4
    560e:	9b00      	ldr	r3, [sp, #0]
    5610:	421f      	tst	r7, r3
    5612:	9b01      	ldr	r3, [sp, #4]
    5614:	bf14      	ite	ne
    5616:	f8c3 8018 	strne.w	r8, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    561a:	f8c3 8014 	streq.w	r8, [r3, #20]
    561e:	2005      	movs	r0, #5
    5620:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5622:	eb0b 0409 	add.w	r4, fp, r9
    5626:	f8c4 a018 	str.w	sl, [r4, #24]
    562a:	2005      	movs	r0, #5
    562c:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    562e:	f8c4 a014 	str.w	sl, [r4, #20]
    5632:	2005      	movs	r0, #5
    5634:	47b0      	blx	r6
    5636:	087f      	lsrs	r7, r7, #1
    5638:	3d01      	subs	r5, #1
    563a:	d1e8      	bne.n	560e <I2C_configMONITOREDINPUTS+0x17e>
    563c:	4654      	mov	r4, sl
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    563e:	9b04      	ldr	r3, [sp, #16]
    5640:	f8c3 8004 	str.w	r8, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    5644:	4e3c      	ldr	r6, [pc, #240]	; (5738 <I2C_configMONITOREDINPUTS+0x2a8>)
    5646:	9a03      	ldr	r2, [sp, #12]
    5648:	eb06 15c2 	add.w	r5, r6, r2, lsl #7
    564c:	9a07      	ldr	r2, [sp, #28]
    564e:	62aa      	str	r2, [r5, #40]	; 0x28
    5650:	9a08      	ldr	r2, [sp, #32]
    5652:	62aa      	str	r2, [r5, #40]	; 0x28
	I2C_WAITACKOP(-3);
    5654:	2005      	movs	r0, #5
    5656:	4f39      	ldr	r7, [pc, #228]	; (573c <I2C_configMONITOREDINPUTS+0x2ac>)
    5658:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    565a:	9a02      	ldr	r2, [sp, #8]
    565c:	eb06 16c2 	add.w	r6, r6, r2, lsl #7
    5660:	61b4      	str	r4, [r6, #24]
    5662:	2005      	movs	r0, #5
    5664:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    5666:	a80b      	add	r0, sp, #44	; 0x2c
    5668:	4b35      	ldr	r3, [pc, #212]	; (5740 <I2C_configMONITOREDINPUTS+0x2b0>)
    566a:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    566c:	9b04      	ldr	r3, [sp, #16]
    566e:	681a      	ldr	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    5670:	6a2b      	ldr	r3, [r5, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    5672:	692d      	ldr	r5, [r5, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    5674:	405d      	eors	r5, r3
    5676:	4015      	ands	r5, r2
    5678:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    567a:	a80b      	add	r0, sp, #44	; 0x2c
    567c:	4b31      	ldr	r3, [pc, #196]	; (5744 <I2C_configMONITOREDINPUTS+0x2b4>)
    567e:	4798      	blx	r3
    5680:	ea18 0f05 	tst.w	r8, r5
    5684:	d13e      	bne.n	5704 <I2C_configMONITOREDINPUTS+0x274>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5686:	4d2c      	ldr	r5, [pc, #176]	; (5738 <I2C_configMONITOREDINPUTS+0x2a8>)
    5688:	9b02      	ldr	r3, [sp, #8]
    568a:	eb05 17c3 	add.w	r7, r5, r3, lsl #7
    568e:	617c      	str	r4, [r7, #20]
    5690:	2005      	movs	r0, #5
    5692:	4e2a      	ldr	r6, [pc, #168]	; (573c <I2C_configMONITOREDINPUTS+0x2ac>)
    5694:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    5696:	9b03      	ldr	r3, [sp, #12]
    5698:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    569c:	f8c5 8008 	str.w	r8, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    56a0:	9b05      	ldr	r3, [sp, #20]
    56a2:	62ab      	str	r3, [r5, #40]	; 0x28
    56a4:	9a06      	ldr	r2, [sp, #24]
    56a6:	62aa      	str	r2, [r5, #40]	; 0x28
    56a8:	2005      	movs	r0, #5
    56aa:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    56ac:	61bc      	str	r4, [r7, #24]
	
	/* If successful, and code execution got here, the close the I2C channel */
	I2C_STOP();
    56ae:	2005      	movs	r0, #5
    56b0:	47b0      	blx	r6
    56b2:	f8c5 8018 	str.w	r8, [r5, #24]
    56b6:	2005      	movs	r0, #5
    56b8:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    56ba:	f8c5 8008 	str.w	r8, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    56be:	9b05      	ldr	r3, [sp, #20]
    56c0:	62ab      	str	r3, [r5, #40]	; 0x28
    56c2:	9a06      	ldr	r2, [sp, #24]
    56c4:	62aa      	str	r2, [r5, #40]	; 0x28
    56c6:	2005      	movs	r0, #5
    56c8:	47b0      	blx	r6
	I2C_CLOSE();
	
	return 0;
    56ca:	2000      	movs	r0, #0
}
    56cc:	b00d      	add	sp, #52	; 0x34
    56ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    56d2:	4d19      	ldr	r5, [pc, #100]	; (5738 <I2C_configMONITOREDINPUTS+0x2a8>)
    56d4:	9b02      	ldr	r3, [sp, #8]
    56d6:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    56da:	619c      	str	r4, [r3, #24]
	I2C_WAITACKOP(-2);
    56dc:	2005      	movs	r0, #5
    56de:	47b8      	blx	r7
    56e0:	9b03      	ldr	r3, [sp, #12]
    56e2:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    56e6:	f8c5 a018 	str.w	sl, [r5, #24]
    56ea:	2005      	movs	r0, #5
    56ec:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    56ee:	f8c5 a008 	str.w	sl, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    56f2:	9b05      	ldr	r3, [sp, #20]
    56f4:	62ab      	str	r3, [r5, #40]	; 0x28
    56f6:	9b06      	ldr	r3, [sp, #24]
    56f8:	62ab      	str	r3, [r5, #40]	; 0x28
    56fa:	2005      	movs	r0, #5
    56fc:	47b8      	blx	r7
    56fe:	f06f 0001 	mvn.w	r0, #1
    5702:	e7e3      	b.n	56cc <I2C_configMONITOREDINPUTS+0x23c>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5704:	4d0c      	ldr	r5, [pc, #48]	; (5738 <I2C_configMONITOREDINPUTS+0x2a8>)
    5706:	9b02      	ldr	r3, [sp, #8]
    5708:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    570c:	619c      	str	r4, [r3, #24]
	I2C_WAITACKOP(-3);
    570e:	2005      	movs	r0, #5
    5710:	47b8      	blx	r7
    5712:	9b03      	ldr	r3, [sp, #12]
    5714:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    5718:	f8c5 8018 	str.w	r8, [r5, #24]
    571c:	2005      	movs	r0, #5
    571e:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    5720:	f8c5 8008 	str.w	r8, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    5724:	9b05      	ldr	r3, [sp, #20]
    5726:	62ab      	str	r3, [r5, #40]	; 0x28
    5728:	9b06      	ldr	r3, [sp, #24]
    572a:	62ab      	str	r3, [r5, #40]	; 0x28
    572c:	2005      	movs	r0, #5
    572e:	47b8      	blx	r7
    5730:	f06f 0002 	mvn.w	r0, #2
    5734:	e7ca      	b.n	56cc <I2C_configMONITOREDINPUTS+0x23c>
    5736:	bf00      	nop
    5738:	41008000 	.word	0x41008000
    573c:	0000152d 	.word	0x0000152d
    5740:	000014cd 	.word	0x000014cd
    5744:	000014db 	.word	0x000014db

00005748 <I2C_readMONITOREDINPUT>:

{
	uint8_t     		i2csda, i2cclk;
	unsigned char		forloop;

	if ((!inputL) || (!inputH)) {
    5748:	2b00      	cmp	r3, #0
    574a:	f000 817c 	beq.w	5a46 <I2C_readMONITOREDINPUT+0x2fe>
{
    574e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5752:	b08f      	sub	sp, #60	; 0x3c
	if ((!inputL) || (!inputH)) {
    5754:	2a00      	cmp	r2, #0
    5756:	f000 8179 	beq.w	5a4c <I2C_readMONITOREDINPUT+0x304>
    575a:	9304      	str	r3, [sp, #16]
    575c:	9203      	str	r2, [sp, #12]
    575e:	f001 041f 	and.w	r4, r1, #31
    5762:	2301      	movs	r3, #1
    5764:	fa03 f404 	lsl.w	r4, r3, r4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5768:	094a      	lsrs	r2, r1, #5
    576a:	4d98      	ldr	r5, [pc, #608]	; (59cc <I2C_readMONITOREDINPUT+0x284>)
    576c:	9202      	str	r2, [sp, #8]
    576e:	eb05 17c2 	add.w	r7, r5, r2, lsl #7
    5772:	61bc      	str	r4, [r7, #24]
    5774:	0942      	lsrs	r2, r0, #5
    5776:	9205      	str	r2, [sp, #20]
    5778:	f000 001f 	and.w	r0, r0, #31
    577c:	fa03 fa00 	lsl.w	sl, r3, r0
    5780:	9200      	str	r2, [sp, #0]
    5782:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    5786:	f8c5 a018 	str.w	sl, [r5, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    578a:	f8c5 a008 	str.w	sl, [r5, #8]
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    578e:	fa1f f38a 	uxth.w	r3, sl
    5792:	9308      	str	r3, [sp, #32]
    5794:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    5798:	9306      	str	r3, [sp, #24]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    579a:	62ab      	str	r3, [r5, #40]	; 0x28
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    579c:	ea4f 431a 	mov.w	r3, sl, lsr #16
    57a0:	9309      	str	r3, [sp, #36]	; 0x24
		hri_port_write_WRCONFIG_reg(
    57a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    57a6:	9307      	str	r3, [sp, #28]
    57a8:	62ab      	str	r3, [r5, #40]	; 0x28
		return -1;
	}

	/* Open an I2C channel, send address 0x68, then read the input value */
	I2C_OPEN(sda, clk);
	I2C_START(-2);
    57aa:	2005      	movs	r0, #5
    57ac:	4e88      	ldr	r6, [pc, #544]	; (59d0 <I2C_readMONITOREDINPUT+0x288>)
    57ae:	47b0      	blx	r6
    57b0:	2005      	movs	r0, #5
    57b2:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    57b4:	f8c5 a014 	str.w	sl, [r5, #20]
    57b8:	2005      	movs	r0, #5
    57ba:	47b0      	blx	r6
    57bc:	617c      	str	r4, [r7, #20]
    57be:	2005      	movs	r0, #5
    57c0:	47b0      	blx	r6
    57c2:	2707      	movs	r7, #7
	I2C_SENDADDR(0x68, forloop);
    57c4:	2640      	movs	r6, #64	; 0x40
    57c6:	f8df 9204 	ldr.w	r9, [pc, #516]	; 59cc <I2C_readMONITOREDINPUT+0x284>
    57ca:	9a00      	ldr	r2, [sp, #0]
    57cc:	eb09 1bc2 	add.w	fp, r9, r2, lsl #7
    57d0:	4d7f      	ldr	r5, [pc, #508]	; (59d0 <I2C_readMONITOREDINPUT+0x288>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    57d2:	9902      	ldr	r1, [sp, #8]
    57d4:	fa01 f307 	lsl.w	r3, r1, r7
    57d8:	9301      	str	r3, [sp, #4]
    57da:	f016 0f68 	tst.w	r6, #104	; 0x68
    57de:	bf14      	ite	ne
    57e0:	f8cb a018 	strne.w	sl, [fp, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    57e4:	f8cb a014 	streq.w	sl, [fp, #20]
    57e8:	2005      	movs	r0, #5
    57ea:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    57ec:	9b01      	ldr	r3, [sp, #4]
    57ee:	eb09 0803 	add.w	r8, r9, r3
    57f2:	f8c8 4018 	str.w	r4, [r8, #24]
    57f6:	2005      	movs	r0, #5
    57f8:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    57fa:	f8c8 4014 	str.w	r4, [r8, #20]
    57fe:	2005      	movs	r0, #5
    5800:	47a8      	blx	r5
    5802:	0876      	lsrs	r6, r6, #1
    5804:	3f01      	subs	r7, #1
    5806:	d1e8      	bne.n	57da <I2C_readMONITOREDINPUT+0x92>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5808:	4d70      	ldr	r5, [pc, #448]	; (59cc <I2C_readMONITOREDINPUT+0x284>)
    580a:	9b05      	ldr	r3, [sp, #20]
    580c:	eb05 16c3 	add.w	r6, r5, r3, lsl #7
    5810:	f8c6 a018 	str.w	sl, [r6, #24]
	I2C_READ();
    5814:	2005      	movs	r0, #5
    5816:	4f6e      	ldr	r7, [pc, #440]	; (59d0 <I2C_readMONITOREDINPUT+0x288>)
    5818:	47b8      	blx	r7
    581a:	9a02      	ldr	r2, [sp, #8]
    581c:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    5820:	61ac      	str	r4, [r5, #24]
    5822:	2005      	movs	r0, #5
    5824:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5826:	616c      	str	r4, [r5, #20]
    5828:	2005      	movs	r0, #5
    582a:	47b8      	blx	r7
    582c:	9b05      	ldr	r3, [sp, #20]
    582e:	01db      	lsls	r3, r3, #7
    5830:	f103 4b82 	add.w	fp, r3, #1090519040	; 0x41000000
    5834:	f50b 4b00 	add.w	fp, fp, #32768	; 0x8000
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    5838:	f8cb a004 	str.w	sl, [fp, #4]
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    583c:	9b08      	ldr	r3, [sp, #32]
    583e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    5842:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    5846:	9301      	str	r3, [sp, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    5848:	62b3      	str	r3, [r6, #40]	; 0x28
		hri_port_write_WRCONFIG_reg(PORT,
    584a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    584c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    5850:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    5854:	9308      	str	r3, [sp, #32]
    5856:	62b3      	str	r3, [r6, #40]	; 0x28
	I2C_WAITACKIP(-3);
    5858:	2005      	movs	r0, #5
    585a:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    585c:	61ac      	str	r4, [r5, #24]
    585e:	2005      	movs	r0, #5
    5860:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    5862:	a80b      	add	r0, sp, #44	; 0x2c
    5864:	4b5b      	ldr	r3, [pc, #364]	; (59d4 <I2C_readMONITOREDINPUT+0x28c>)
    5866:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    5868:	f8db 2000 	ldr.w	r2, [fp]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    586c:	6a33      	ldr	r3, [r6, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    586e:	6935      	ldr	r5, [r6, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    5870:	405d      	eors	r5, r3
    5872:	4015      	ands	r5, r2
    5874:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    5876:	a80b      	add	r0, sp, #44	; 0x2c
    5878:	4b57      	ldr	r3, [pc, #348]	; (59d8 <I2C_readMONITOREDINPUT+0x290>)
    587a:	4798      	blx	r3
    587c:	ea1a 0f05 	tst.w	sl, r5
    5880:	d114      	bne.n	58ac <I2C_readMONITOREDINPUT+0x164>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5882:	9d02      	ldr	r5, [sp, #8]
    5884:	01eb      	lsls	r3, r5, #7
    5886:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    588a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    588e:	615c      	str	r4, [r3, #20]
    5890:	2005      	movs	r0, #5
    5892:	4b4f      	ldr	r3, [pc, #316]	; (59d0 <I2C_readMONITOREDINPUT+0x288>)
    5894:	4798      	blx	r3

	*inputH = 0;
    5896:	2300      	movs	r3, #0
    5898:	9a03      	ldr	r2, [sp, #12]
    589a:	7013      	strb	r3, [r2, #0]
    589c:	2608      	movs	r6, #8

	/* Beginning of the for-loops that captures data and read the upper 8-bits of the input value */
	for (forloop = 0x80; forloop > 0;) {
    589e:	2780      	movs	r7, #128	; 0x80
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    58a0:	4a4a      	ldr	r2, [pc, #296]	; (59cc <I2C_readMONITOREDINPUT+0x284>)
    58a2:	eb02 19c5 	add.w	r9, r2, r5, lsl #7
		I2C_clockhi();
    58a6:	f8df 8128 	ldr.w	r8, [pc, #296]	; 59d0 <I2C_readMONITOREDINPUT+0x288>
    58aa:	e01f      	b.n	58ec <I2C_readMONITOREDINPUT+0x1a4>
    58ac:	4d47      	ldr	r5, [pc, #284]	; (59cc <I2C_readMONITOREDINPUT+0x284>)
    58ae:	9b02      	ldr	r3, [sp, #8]
    58b0:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    58b4:	619c      	str	r4, [r3, #24]
	I2C_WAITACKIP(-3);
    58b6:	2005      	movs	r0, #5
    58b8:	47b8      	blx	r7
    58ba:	9b05      	ldr	r3, [sp, #20]
    58bc:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    58c0:	f8c5 a018 	str.w	sl, [r5, #24]
    58c4:	2005      	movs	r0, #5
    58c6:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    58c8:	f8c5 a008 	str.w	sl, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    58cc:	9b06      	ldr	r3, [sp, #24]
    58ce:	62ab      	str	r3, [r5, #40]	; 0x28
    58d0:	9b07      	ldr	r3, [sp, #28]
    58d2:	62ab      	str	r3, [r5, #40]	; 0x28
    58d4:	2005      	movs	r0, #5
    58d6:	47b8      	blx	r7
    58d8:	f06f 0002 	mvn.w	r0, #2
    58dc:	e0b0      	b.n	5a40 <I2C_readMONITOREDINPUT+0x2f8>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    58de:	f8c9 4014 	str.w	r4, [r9, #20]
		if (gpio_get_pin_level(i2csda)) {
			(*inputH) |= forloop;
		}

		I2C_clocklo();
    58e2:	2005      	movs	r0, #5
    58e4:	47c0      	blx	r8
		forloop = forloop / 2;
    58e6:	087f      	lsrs	r7, r7, #1
	for (forloop = 0x80; forloop > 0;) {
    58e8:	3e01      	subs	r6, #1
    58ea:	d01c      	beq.n	5926 <I2C_readMONITOREDINPUT+0x1de>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    58ec:	f8c9 4018 	str.w	r4, [r9, #24]
		I2C_clockhi();
    58f0:	2005      	movs	r0, #5
    58f2:	47c0      	blx	r8
	CRITICAL_SECTION_ENTER();
    58f4:	a80c      	add	r0, sp, #48	; 0x30
    58f6:	4b37      	ldr	r3, [pc, #220]	; (59d4 <I2C_readMONITOREDINPUT+0x28c>)
    58f8:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    58fa:	f8db 1000 	ldr.w	r1, [fp]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    58fe:	4b33      	ldr	r3, [pc, #204]	; (59cc <I2C_readMONITOREDINPUT+0x284>)
    5900:	9a00      	ldr	r2, [sp, #0]
    5902:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
    5906:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    5908:	6915      	ldr	r5, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    590a:	405d      	eors	r5, r3
    590c:	400d      	ands	r5, r1
    590e:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    5910:	a80c      	add	r0, sp, #48	; 0x30
    5912:	4b31      	ldr	r3, [pc, #196]	; (59d8 <I2C_readMONITOREDINPUT+0x290>)
    5914:	4798      	blx	r3
		if (gpio_get_pin_level(i2csda)) {
    5916:	ea1a 0f05 	tst.w	sl, r5
    591a:	d0e0      	beq.n	58de <I2C_readMONITOREDINPUT+0x196>
			(*inputH) |= forloop;
    591c:	9a03      	ldr	r2, [sp, #12]
    591e:	7813      	ldrb	r3, [r2, #0]
    5920:	433b      	orrs	r3, r7
    5922:	7013      	strb	r3, [r2, #0]
    5924:	e7db      	b.n	58de <I2C_readMONITOREDINPUT+0x196>
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    5926:	4f29      	ldr	r7, [pc, #164]	; (59cc <I2C_readMONITOREDINPUT+0x284>)
    5928:	9b05      	ldr	r3, [sp, #20]
    592a:	eb07 15c3 	add.w	r5, r7, r3, lsl #7
    592e:	f8c5 a008 	str.w	sl, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    5932:	9b06      	ldr	r3, [sp, #24]
    5934:	62ab      	str	r3, [r5, #40]	; 0x28
    5936:	9b07      	ldr	r3, [sp, #28]
    5938:	62ab      	str	r3, [r5, #40]	; 0x28
	}
	
	I2C_SENDACK();
    593a:	2005      	movs	r0, #5
    593c:	4e24      	ldr	r6, [pc, #144]	; (59d0 <I2C_readMONITOREDINPUT+0x288>)
    593e:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5940:	f8c5 a014 	str.w	sl, [r5, #20]
    5944:	2005      	movs	r0, #5
    5946:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5948:	9b02      	ldr	r3, [sp, #8]
    594a:	eb07 17c3 	add.w	r7, r7, r3, lsl #7
    594e:	61bc      	str	r4, [r7, #24]
    5950:	2005      	movs	r0, #5
    5952:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5954:	617c      	str	r4, [r7, #20]
    5956:	2005      	movs	r0, #5
    5958:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    595a:	f8cb a004 	str.w	sl, [fp, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    595e:	9a01      	ldr	r2, [sp, #4]
    5960:	62aa      	str	r2, [r5, #40]	; 0x28
    5962:	9a08      	ldr	r2, [sp, #32]
    5964:	62aa      	str	r2, [r5, #40]	; 0x28
    5966:	2005      	movs	r0, #5
    5968:	47b0      	blx	r6
	*inputL = 0;
    596a:	2300      	movs	r3, #0
    596c:	9a04      	ldr	r2, [sp, #16]
    596e:	7013      	strb	r3, [r2, #0]
    5970:	2608      	movs	r6, #8

	/* Beginning of the for-loops that captures data and read the lower 8-bits of the input value */
	for (forloop = 0x80; forloop > 0;) {
    5972:	2780      	movs	r7, #128	; 0x80
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5974:	4a15      	ldr	r2, [pc, #84]	; (59cc <I2C_readMONITOREDINPUT+0x284>)
    5976:	9b02      	ldr	r3, [sp, #8]
    5978:	eb02 19c3 	add.w	r9, r2, r3, lsl #7
		I2C_clockhi();
    597c:	f8df 8050 	ldr.w	r8, [pc, #80]	; 59d0 <I2C_readMONITOREDINPUT+0x288>
    5980:	e006      	b.n	5990 <I2C_readMONITOREDINPUT+0x248>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5982:	f8c9 4014 	str.w	r4, [r9, #20]
		if (gpio_get_pin_level(i2csda)) {
			(*inputL) |= forloop;
		}

		I2C_clocklo();
    5986:	2005      	movs	r0, #5
    5988:	47c0      	blx	r8
		forloop = forloop / 2;
    598a:	087f      	lsrs	r7, r7, #1
	for (forloop = 0x80; forloop > 0;) {
    598c:	3e01      	subs	r6, #1
    598e:	d025      	beq.n	59dc <I2C_readMONITOREDINPUT+0x294>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5990:	f8c9 4018 	str.w	r4, [r9, #24]
		I2C_clockhi();
    5994:	2005      	movs	r0, #5
    5996:	47c0      	blx	r8
	CRITICAL_SECTION_ENTER();
    5998:	a80d      	add	r0, sp, #52	; 0x34
    599a:	4b0e      	ldr	r3, [pc, #56]	; (59d4 <I2C_readMONITOREDINPUT+0x28c>)
    599c:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    599e:	f8db 1000 	ldr.w	r1, [fp]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    59a2:	4b0a      	ldr	r3, [pc, #40]	; (59cc <I2C_readMONITOREDINPUT+0x284>)
    59a4:	9a00      	ldr	r2, [sp, #0]
    59a6:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
    59aa:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    59ac:	6915      	ldr	r5, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    59ae:	405d      	eors	r5, r3
    59b0:	400d      	ands	r5, r1
    59b2:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    59b4:	a80d      	add	r0, sp, #52	; 0x34
    59b6:	4b08      	ldr	r3, [pc, #32]	; (59d8 <I2C_readMONITOREDINPUT+0x290>)
    59b8:	4798      	blx	r3
		if (gpio_get_pin_level(i2csda)) {
    59ba:	ea1a 0f05 	tst.w	sl, r5
    59be:	d0e0      	beq.n	5982 <I2C_readMONITOREDINPUT+0x23a>
			(*inputL) |= forloop;
    59c0:	9a04      	ldr	r2, [sp, #16]
    59c2:	7813      	ldrb	r3, [r2, #0]
    59c4:	433b      	orrs	r3, r7
    59c6:	7013      	strb	r3, [r2, #0]
    59c8:	e7db      	b.n	5982 <I2C_readMONITOREDINPUT+0x23a>
    59ca:	bf00      	nop
    59cc:	41008000 	.word	0x41008000
    59d0:	0000152d 	.word	0x0000152d
    59d4:	000014cd 	.word	0x000014cd
    59d8:	000014db 	.word	0x000014db
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    59dc:	4f1d      	ldr	r7, [pc, #116]	; (5a54 <I2C_readMONITOREDINPUT+0x30c>)
    59de:	9b05      	ldr	r3, [sp, #20]
    59e0:	eb07 15c3 	add.w	r5, r7, r3, lsl #7
    59e4:	f8c5 a008 	str.w	sl, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    59e8:	9b06      	ldr	r3, [sp, #24]
    59ea:	62ab      	str	r3, [r5, #40]	; 0x28
    59ec:	9a07      	ldr	r2, [sp, #28]
    59ee:	62aa      	str	r2, [r5, #40]	; 0x28
	}
	
	I2C_SENDNACK();	
    59f0:	2005      	movs	r0, #5
    59f2:	4e19      	ldr	r6, [pc, #100]	; (5a58 <I2C_readMONITOREDINPUT+0x310>)
    59f4:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    59f6:	f8c5 a018 	str.w	sl, [r5, #24]
    59fa:	2005      	movs	r0, #5
    59fc:	47b0      	blx	r6
    59fe:	9902      	ldr	r1, [sp, #8]
    5a00:	eb07 17c1 	add.w	r7, r7, r1, lsl #7
    5a04:	61bc      	str	r4, [r7, #24]
    5a06:	2005      	movs	r0, #5
    5a08:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5a0a:	617c      	str	r4, [r7, #20]
    5a0c:	2005      	movs	r0, #5
    5a0e:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    5a10:	f8cb a004 	str.w	sl, [fp, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    5a14:	9901      	ldr	r1, [sp, #4]
    5a16:	62a9      	str	r1, [r5, #40]	; 0x28
    5a18:	9908      	ldr	r1, [sp, #32]
    5a1a:	62a9      	str	r1, [r5, #40]	; 0x28
    5a1c:	2005      	movs	r0, #5
    5a1e:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5a20:	61bc      	str	r4, [r7, #24]
	I2C_STOP();
    5a22:	2005      	movs	r0, #5
    5a24:	47b0      	blx	r6
    5a26:	f8c5 a018 	str.w	sl, [r5, #24]
    5a2a:	2005      	movs	r0, #5
    5a2c:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    5a2e:	f8c5 a008 	str.w	sl, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    5a32:	9b06      	ldr	r3, [sp, #24]
    5a34:	62ab      	str	r3, [r5, #40]	; 0x28
    5a36:	9a07      	ldr	r2, [sp, #28]
    5a38:	62aa      	str	r2, [r5, #40]	; 0x28
    5a3a:	2005      	movs	r0, #5
    5a3c:	47b0      	blx	r6
	I2C_CLOSE();
	/* If successful, and code execution got here, the close the I2C channel */
	
	return 0;
    5a3e:	2000      	movs	r0, #0
}
    5a40:	b00f      	add	sp, #60	; 0x3c
    5a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -1;
    5a46:	f04f 30ff 	mov.w	r0, #4294967295
    5a4a:	4770      	bx	lr
    5a4c:	f04f 30ff 	mov.w	r0, #4294967295
    5a50:	e7f6      	b.n	5a40 <I2C_readMONITOREDINPUT+0x2f8>
    5a52:	bf00      	nop
    5a54:	41008000 	.word	0x41008000
    5a58:	0000152d 	.word	0x0000152d

00005a5c <I2C_configEXPANDER>:
// * CALLED BY:			  main()                                                                                                       *
// * CALLS:		          No function. ALL macros defined in this function file.                                                       *
// * --------------------------------------------------------------------------------------------------------------------------------- *
int I2C_configEXPANDER(uint8_t sda,  uint8_t clk)

{
    5a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5a60:	b095      	sub	sp, #84	; 0x54
    5a62:	f001 041f 	and.w	r4, r1, #31
    5a66:	2301      	movs	r3, #1
    5a68:	fa03 f404 	lsl.w	r4, r3, r4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5a6c:	094a      	lsrs	r2, r1, #5
    5a6e:	4dae      	ldr	r5, [pc, #696]	; (5d28 <I2C_configEXPANDER+0x2cc>)
    5a70:	9201      	str	r2, [sp, #4]
    5a72:	eb05 17c2 	add.w	r7, r5, r2, lsl #7
    5a76:	61bc      	str	r4, [r7, #24]
    5a78:	0942      	lsrs	r2, r0, #5
    5a7a:	9202      	str	r2, [sp, #8]
    5a7c:	f000 001f 	and.w	r0, r0, #31
    5a80:	fa03 fb00 	lsl.w	fp, r3, r0
    5a84:	9206      	str	r2, [sp, #24]
    5a86:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    5a8a:	f8c5 b018 	str.w	fp, [r5, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    5a8e:	f8c5 b008 	str.w	fp, [r5, #8]
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    5a92:	fa1f f38b 	uxth.w	r3, fp
    5a96:	9307      	str	r3, [sp, #28]
    5a98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    5a9c:	9304      	str	r3, [sp, #16]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    5a9e:	62ab      	str	r3, [r5, #40]	; 0x28
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    5aa0:	ea4f 431b 	mov.w	r3, fp, lsr #16
    5aa4:	9309      	str	r3, [sp, #36]	; 0x24
		hri_port_write_WRCONFIG_reg(
    5aa6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    5aaa:	9305      	str	r3, [sp, #20]
    5aac:	62ab      	str	r3, [r5, #40]	; 0x28
	uint8_t     		i2csda, i2cclk;
	unsigned char		forloop;

	/* Open an I2C channel, send address 0x41, index register 0x01 then send the 3 configuration values for inversion, output default and the direction register */
	I2C_OPEN(sda, clk);
	I2C_START(-1);
    5aae:	2005      	movs	r0, #5
    5ab0:	4e9e      	ldr	r6, [pc, #632]	; (5d2c <I2C_configEXPANDER+0x2d0>)
    5ab2:	47b0      	blx	r6
    5ab4:	2005      	movs	r0, #5
    5ab6:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5ab8:	f8c5 b014 	str.w	fp, [r5, #20]
    5abc:	2005      	movs	r0, #5
    5abe:	47b0      	blx	r6
    5ac0:	617c      	str	r4, [r7, #20]
    5ac2:	2005      	movs	r0, #5
    5ac4:	47b0      	blx	r6
    5ac6:	2707      	movs	r7, #7
	I2C_SENDADDR(0x41, forloop);
    5ac8:	2640      	movs	r6, #64	; 0x40
    5aca:	f8df 925c 	ldr.w	r9, [pc, #604]	; 5d28 <I2C_configEXPANDER+0x2cc>
    5ace:	9a06      	ldr	r2, [sp, #24]
    5ad0:	eb09 13c2 	add.w	r3, r9, r2, lsl #7
    5ad4:	9303      	str	r3, [sp, #12]
    5ad6:	4d95      	ldr	r5, [pc, #596]	; (5d2c <I2C_configEXPANDER+0x2d0>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5ad8:	9901      	ldr	r1, [sp, #4]
    5ada:	fa01 fa07 	lsl.w	sl, r1, r7
    5ade:	f016 0f41 	tst.w	r6, #65	; 0x41
    5ae2:	9b03      	ldr	r3, [sp, #12]
    5ae4:	bf14      	ite	ne
    5ae6:	f8c3 b018 	strne.w	fp, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5aea:	f8c3 b014 	streq.w	fp, [r3, #20]
    5aee:	2005      	movs	r0, #5
    5af0:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5af2:	eb09 080a 	add.w	r8, r9, sl
    5af6:	f8c8 4018 	str.w	r4, [r8, #24]
    5afa:	2005      	movs	r0, #5
    5afc:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5afe:	f8c8 4014 	str.w	r4, [r8, #20]
    5b02:	2005      	movs	r0, #5
    5b04:	47a8      	blx	r5
    5b06:	0876      	lsrs	r6, r6, #1
    5b08:	3f01      	subs	r7, #1
    5b0a:	d1e8      	bne.n	5ade <I2C_configEXPANDER+0x82>
    5b0c:	4d86      	ldr	r5, [pc, #536]	; (5d28 <I2C_configEXPANDER+0x2cc>)
    5b0e:	9b02      	ldr	r3, [sp, #8]
    5b10:	eb05 16c3 	add.w	r6, r5, r3, lsl #7
    5b14:	f8c6 b014 	str.w	fp, [r6, #20]
	I2C_WRITE();
    5b18:	2005      	movs	r0, #5
    5b1a:	4f84      	ldr	r7, [pc, #528]	; (5d2c <I2C_configEXPANDER+0x2d0>)
    5b1c:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5b1e:	9a01      	ldr	r2, [sp, #4]
    5b20:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    5b24:	61ac      	str	r4, [r5, #24]
    5b26:	2005      	movs	r0, #5
    5b28:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5b2a:	616c      	str	r4, [r5, #20]
    5b2c:	2005      	movs	r0, #5
    5b2e:	47b8      	blx	r7
    5b30:	9b02      	ldr	r3, [sp, #8]
    5b32:	01db      	lsls	r3, r3, #7
    5b34:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    5b38:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    5b3c:	9303      	str	r3, [sp, #12]
    5b3e:	f8c3 b004 	str.w	fp, [r3, #4]
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    5b42:	9907      	ldr	r1, [sp, #28]
    5b44:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    5b48:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
    5b4c:	9108      	str	r1, [sp, #32]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    5b4e:	62b1      	str	r1, [r6, #40]	; 0x28
		hri_port_write_WRCONFIG_reg(PORT,
    5b50:	9909      	ldr	r1, [sp, #36]	; 0x24
    5b52:	f041 4140 	orr.w	r1, r1, #3221225472	; 0xc0000000
    5b56:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
    5b5a:	9109      	str	r1, [sp, #36]	; 0x24
    5b5c:	62b1      	str	r1, [r6, #40]	; 0x28
	I2C_WAITACKOP(-2);
    5b5e:	2005      	movs	r0, #5
    5b60:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5b62:	61ac      	str	r4, [r5, #24]
    5b64:	2005      	movs	r0, #5
    5b66:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    5b68:	a80b      	add	r0, sp, #44	; 0x2c
    5b6a:	4b71      	ldr	r3, [pc, #452]	; (5d30 <I2C_configEXPANDER+0x2d4>)
    5b6c:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    5b6e:	9a03      	ldr	r2, [sp, #12]
    5b70:	6812      	ldr	r2, [r2, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    5b72:	6a33      	ldr	r3, [r6, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    5b74:	6935      	ldr	r5, [r6, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    5b76:	405d      	eors	r5, r3
    5b78:	4015      	ands	r5, r2
    5b7a:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    5b7c:	a80b      	add	r0, sp, #44	; 0x2c
    5b7e:	4b6d      	ldr	r3, [pc, #436]	; (5d34 <I2C_configEXPANDER+0x2d8>)
    5b80:	4798      	blx	r3
    5b82:	ea1b 0f05 	tst.w	fp, r5
    5b86:	f040 8334 	bne.w	61f2 <I2C_configEXPANDER+0x796>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5b8a:	4d67      	ldr	r5, [pc, #412]	; (5d28 <I2C_configEXPANDER+0x2cc>)
    5b8c:	9b01      	ldr	r3, [sp, #4]
    5b8e:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    5b92:	615c      	str	r4, [r3, #20]
    5b94:	2005      	movs	r0, #5
    5b96:	4e65      	ldr	r6, [pc, #404]	; (5d2c <I2C_configEXPANDER+0x2d0>)
    5b98:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    5b9a:	9a02      	ldr	r2, [sp, #8]
    5b9c:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    5ba0:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    5ba4:	9a04      	ldr	r2, [sp, #16]
    5ba6:	62aa      	str	r2, [r5, #40]	; 0x28
    5ba8:	9a05      	ldr	r2, [sp, #20]
    5baa:	62aa      	str	r2, [r5, #40]	; 0x28
    5bac:	2005      	movs	r0, #5
    5bae:	47b0      	blx	r6
    5bb0:	2508      	movs	r5, #8
	I2C_SENDDATA(0x01, forloop);
    5bb2:	2780      	movs	r7, #128	; 0x80
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5bb4:	f8df 9170 	ldr.w	r9, [pc, #368]	; 5d28 <I2C_configEXPANDER+0x2cc>
    5bb8:	9a06      	ldr	r2, [sp, #24]
    5bba:	eb09 12c2 	add.w	r2, r9, r2, lsl #7
    5bbe:	9207      	str	r2, [sp, #28]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5bc0:	9b01      	ldr	r3, [sp, #4]
    5bc2:	ea4f 1ac3 	mov.w	sl, r3, lsl #7
    5bc6:	f017 0f01 	tst.w	r7, #1
    5bca:	9b07      	ldr	r3, [sp, #28]
    5bcc:	bf14      	ite	ne
    5bce:	f8c3 b018 	strne.w	fp, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5bd2:	f8c3 b014 	streq.w	fp, [r3, #20]
    5bd6:	2005      	movs	r0, #5
    5bd8:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5bda:	eb09 080a 	add.w	r8, r9, sl
    5bde:	f8c8 4018 	str.w	r4, [r8, #24]
    5be2:	2005      	movs	r0, #5
    5be4:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5be6:	f8c8 4014 	str.w	r4, [r8, #20]
    5bea:	2005      	movs	r0, #5
    5bec:	47b0      	blx	r6
    5bee:	087f      	lsrs	r7, r7, #1
    5bf0:	3d01      	subs	r5, #1
    5bf2:	d1e8      	bne.n	5bc6 <I2C_configEXPANDER+0x16a>
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    5bf4:	9b03      	ldr	r3, [sp, #12]
    5bf6:	f8c3 b004 	str.w	fp, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    5bfa:	4e4b      	ldr	r6, [pc, #300]	; (5d28 <I2C_configEXPANDER+0x2cc>)
    5bfc:	9a02      	ldr	r2, [sp, #8]
    5bfe:	eb06 15c2 	add.w	r5, r6, r2, lsl #7
    5c02:	9a08      	ldr	r2, [sp, #32]
    5c04:	62aa      	str	r2, [r5, #40]	; 0x28
    5c06:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5c08:	62aa      	str	r2, [r5, #40]	; 0x28
	I2C_WAITACKOP(-3);
    5c0a:	2005      	movs	r0, #5
    5c0c:	4f47      	ldr	r7, [pc, #284]	; (5d2c <I2C_configEXPANDER+0x2d0>)
    5c0e:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5c10:	9a01      	ldr	r2, [sp, #4]
    5c12:	eb06 16c2 	add.w	r6, r6, r2, lsl #7
    5c16:	61b4      	str	r4, [r6, #24]
    5c18:	2005      	movs	r0, #5
    5c1a:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    5c1c:	a80c      	add	r0, sp, #48	; 0x30
    5c1e:	4b44      	ldr	r3, [pc, #272]	; (5d30 <I2C_configEXPANDER+0x2d4>)
    5c20:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    5c22:	9b03      	ldr	r3, [sp, #12]
    5c24:	681a      	ldr	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    5c26:	6a2b      	ldr	r3, [r5, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    5c28:	692d      	ldr	r5, [r5, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    5c2a:	405d      	eors	r5, r3
    5c2c:	4015      	ands	r5, r2
    5c2e:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    5c30:	a80c      	add	r0, sp, #48	; 0x30
    5c32:	4b40      	ldr	r3, [pc, #256]	; (5d34 <I2C_configEXPANDER+0x2d8>)
    5c34:	4798      	blx	r3
    5c36:	ea1b 0f05 	tst.w	fp, r5
    5c3a:	f040 82f3 	bne.w	6224 <I2C_configEXPANDER+0x7c8>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5c3e:	4d3a      	ldr	r5, [pc, #232]	; (5d28 <I2C_configEXPANDER+0x2cc>)
    5c40:	9f01      	ldr	r7, [sp, #4]
    5c42:	eb05 13c7 	add.w	r3, r5, r7, lsl #7
    5c46:	615c      	str	r4, [r3, #20]
    5c48:	2005      	movs	r0, #5
    5c4a:	4e38      	ldr	r6, [pc, #224]	; (5d2c <I2C_configEXPANDER+0x2d0>)
    5c4c:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    5c4e:	9b02      	ldr	r3, [sp, #8]
    5c50:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    5c54:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    5c58:	9b04      	ldr	r3, [sp, #16]
    5c5a:	62ab      	str	r3, [r5, #40]	; 0x28
    5c5c:	9b05      	ldr	r3, [sp, #20]
    5c5e:	62ab      	str	r3, [r5, #40]	; 0x28
    5c60:	2005      	movs	r0, #5
    5c62:	47b0      	blx	r6
    5c64:	2608      	movs	r6, #8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5c66:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 5d28 <I2C_configEXPANDER+0x2cc>
    5c6a:	9b06      	ldr	r3, [sp, #24]
    5c6c:	eb08 1ac3 	add.w	sl, r8, r3, lsl #7
	I2C_SENDDATA(0x00, forloop);
    5c70:	4d2e      	ldr	r5, [pc, #184]	; (5d2c <I2C_configEXPANDER+0x2d0>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5c72:	ea4f 19c7 	mov.w	r9, r7, lsl #7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5c76:	f8ca b014 	str.w	fp, [sl, #20]
    5c7a:	2005      	movs	r0, #5
    5c7c:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5c7e:	eb08 0709 	add.w	r7, r8, r9
    5c82:	61bc      	str	r4, [r7, #24]
    5c84:	2005      	movs	r0, #5
    5c86:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5c88:	617c      	str	r4, [r7, #20]
    5c8a:	2005      	movs	r0, #5
    5c8c:	47a8      	blx	r5
    5c8e:	3e01      	subs	r6, #1
    5c90:	d1f1      	bne.n	5c76 <I2C_configEXPANDER+0x21a>
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    5c92:	9b03      	ldr	r3, [sp, #12]
    5c94:	f8c3 b004 	str.w	fp, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    5c98:	4e23      	ldr	r6, [pc, #140]	; (5d28 <I2C_configEXPANDER+0x2cc>)
    5c9a:	9a02      	ldr	r2, [sp, #8]
    5c9c:	eb06 15c2 	add.w	r5, r6, r2, lsl #7
    5ca0:	9a08      	ldr	r2, [sp, #32]
    5ca2:	62aa      	str	r2, [r5, #40]	; 0x28
    5ca4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5ca6:	62aa      	str	r2, [r5, #40]	; 0x28
	I2C_WAITACKOP(-4);
    5ca8:	2005      	movs	r0, #5
    5caa:	4f20      	ldr	r7, [pc, #128]	; (5d2c <I2C_configEXPANDER+0x2d0>)
    5cac:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5cae:	9a01      	ldr	r2, [sp, #4]
    5cb0:	eb06 16c2 	add.w	r6, r6, r2, lsl #7
    5cb4:	61b4      	str	r4, [r6, #24]
    5cb6:	2005      	movs	r0, #5
    5cb8:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    5cba:	a80d      	add	r0, sp, #52	; 0x34
    5cbc:	4b1c      	ldr	r3, [pc, #112]	; (5d30 <I2C_configEXPANDER+0x2d4>)
    5cbe:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    5cc0:	9b03      	ldr	r3, [sp, #12]
    5cc2:	681a      	ldr	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    5cc4:	6a2b      	ldr	r3, [r5, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    5cc6:	692d      	ldr	r5, [r5, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    5cc8:	405d      	eors	r5, r3
    5cca:	4015      	ands	r5, r2
    5ccc:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    5cce:	a80d      	add	r0, sp, #52	; 0x34
    5cd0:	4b18      	ldr	r3, [pc, #96]	; (5d34 <I2C_configEXPANDER+0x2d8>)
    5cd2:	4798      	blx	r3
    5cd4:	ea1b 0f05 	tst.w	fp, r5
    5cd8:	f040 82bd 	bne.w	6256 <I2C_configEXPANDER+0x7fa>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5cdc:	4d12      	ldr	r5, [pc, #72]	; (5d28 <I2C_configEXPANDER+0x2cc>)
    5cde:	9b01      	ldr	r3, [sp, #4]
    5ce0:	eb05 17c3 	add.w	r7, r5, r3, lsl #7
    5ce4:	617c      	str	r4, [r7, #20]
    5ce6:	2005      	movs	r0, #5
    5ce8:	4e10      	ldr	r6, [pc, #64]	; (5d2c <I2C_configEXPANDER+0x2d0>)
    5cea:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    5cec:	9a02      	ldr	r2, [sp, #8]
    5cee:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    5cf2:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    5cf6:	9a04      	ldr	r2, [sp, #16]
    5cf8:	62aa      	str	r2, [r5, #40]	; 0x28
    5cfa:	9905      	ldr	r1, [sp, #20]
    5cfc:	62a9      	str	r1, [r5, #40]	; 0x28
    5cfe:	2005      	movs	r0, #5
    5d00:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5d02:	61bc      	str	r4, [r7, #24]
    5d04:	f8c5 b018 	str.w	fp, [r5, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    5d08:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    5d0c:	9a04      	ldr	r2, [sp, #16]
    5d0e:	62aa      	str	r2, [r5, #40]	; 0x28
    5d10:	9905      	ldr	r1, [sp, #20]
    5d12:	62a9      	str	r1, [r5, #40]	; 0x28

	I2C_START(-1);
    5d14:	2005      	movs	r0, #5
    5d16:	47b0      	blx	r6
    5d18:	2005      	movs	r0, #5
    5d1a:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5d1c:	f8c5 b014 	str.w	fp, [r5, #20]
    5d20:	2005      	movs	r0, #5
    5d22:	47b0      	blx	r6
    5d24:	617c      	str	r4, [r7, #20]
    5d26:	e007      	b.n	5d38 <I2C_configEXPANDER+0x2dc>
    5d28:	41008000 	.word	0x41008000
    5d2c:	0000152d 	.word	0x0000152d
    5d30:	000014cd 	.word	0x000014cd
    5d34:	000014db 	.word	0x000014db
    5d38:	2005      	movs	r0, #5
    5d3a:	47b0      	blx	r6
    5d3c:	2707      	movs	r7, #7
	I2C_SENDADDR(0x41, forloop);
    5d3e:	2640      	movs	r6, #64	; 0x40
    5d40:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 6004 <I2C_configEXPANDER+0x5a8>
    5d44:	9a06      	ldr	r2, [sp, #24]
    5d46:	eb09 12c2 	add.w	r2, r9, r2, lsl #7
    5d4a:	9207      	str	r2, [sp, #28]
    5d4c:	4dac      	ldr	r5, [pc, #688]	; (6000 <I2C_configEXPANDER+0x5a4>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5d4e:	9b01      	ldr	r3, [sp, #4]
    5d50:	fa03 fa07 	lsl.w	sl, r3, r7
    5d54:	f016 0f41 	tst.w	r6, #65	; 0x41
    5d58:	9b07      	ldr	r3, [sp, #28]
    5d5a:	bf14      	ite	ne
    5d5c:	f8c3 b018 	strne.w	fp, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5d60:	f8c3 b014 	streq.w	fp, [r3, #20]
    5d64:	2005      	movs	r0, #5
    5d66:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5d68:	eb09 080a 	add.w	r8, r9, sl
    5d6c:	f8c8 4018 	str.w	r4, [r8, #24]
    5d70:	2005      	movs	r0, #5
    5d72:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5d74:	f8c8 4014 	str.w	r4, [r8, #20]
    5d78:	2005      	movs	r0, #5
    5d7a:	47a8      	blx	r5
    5d7c:	0876      	lsrs	r6, r6, #1
    5d7e:	3f01      	subs	r7, #1
    5d80:	d1e8      	bne.n	5d54 <I2C_configEXPANDER+0x2f8>
    5d82:	4da0      	ldr	r5, [pc, #640]	; (6004 <I2C_configEXPANDER+0x5a8>)
    5d84:	9b02      	ldr	r3, [sp, #8]
    5d86:	eb05 16c3 	add.w	r6, r5, r3, lsl #7
    5d8a:	f8c6 b014 	str.w	fp, [r6, #20]
	I2C_WRITE();
    5d8e:	2005      	movs	r0, #5
    5d90:	4f9b      	ldr	r7, [pc, #620]	; (6000 <I2C_configEXPANDER+0x5a4>)
    5d92:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5d94:	9b01      	ldr	r3, [sp, #4]
    5d96:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    5d9a:	61ac      	str	r4, [r5, #24]
    5d9c:	2005      	movs	r0, #5
    5d9e:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5da0:	616c      	str	r4, [r5, #20]
    5da2:	2005      	movs	r0, #5
    5da4:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    5da6:	9b03      	ldr	r3, [sp, #12]
    5da8:	f8c3 b004 	str.w	fp, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    5dac:	9a08      	ldr	r2, [sp, #32]
    5dae:	62b2      	str	r2, [r6, #40]	; 0x28
    5db0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5db2:	62b2      	str	r2, [r6, #40]	; 0x28
	I2C_WAITACKOP(-2);
    5db4:	2005      	movs	r0, #5
    5db6:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5db8:	61ac      	str	r4, [r5, #24]
    5dba:	2005      	movs	r0, #5
    5dbc:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    5dbe:	a80e      	add	r0, sp, #56	; 0x38
    5dc0:	4b91      	ldr	r3, [pc, #580]	; (6008 <I2C_configEXPANDER+0x5ac>)
    5dc2:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    5dc4:	9b03      	ldr	r3, [sp, #12]
    5dc6:	681a      	ldr	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    5dc8:	6a33      	ldr	r3, [r6, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    5dca:	6935      	ldr	r5, [r6, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    5dcc:	405d      	eors	r5, r3
    5dce:	4015      	ands	r5, r2
    5dd0:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    5dd2:	a80e      	add	r0, sp, #56	; 0x38
    5dd4:	4b8d      	ldr	r3, [pc, #564]	; (600c <I2C_configEXPANDER+0x5b0>)
    5dd6:	4798      	blx	r3
    5dd8:	ea1b 0f05 	tst.w	fp, r5
    5ddc:	f040 8254 	bne.w	6288 <I2C_configEXPANDER+0x82c>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5de0:	4d88      	ldr	r5, [pc, #544]	; (6004 <I2C_configEXPANDER+0x5a8>)
    5de2:	9b01      	ldr	r3, [sp, #4]
    5de4:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    5de8:	615c      	str	r4, [r3, #20]
    5dea:	2005      	movs	r0, #5
    5dec:	4e84      	ldr	r6, [pc, #528]	; (6000 <I2C_configEXPANDER+0x5a4>)
    5dee:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    5df0:	9a02      	ldr	r2, [sp, #8]
    5df2:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    5df6:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    5dfa:	9a04      	ldr	r2, [sp, #16]
    5dfc:	62aa      	str	r2, [r5, #40]	; 0x28
    5dfe:	9a05      	ldr	r2, [sp, #20]
    5e00:	62aa      	str	r2, [r5, #40]	; 0x28
    5e02:	2005      	movs	r0, #5
    5e04:	47b0      	blx	r6
    5e06:	2708      	movs	r7, #8
	I2C_SENDDATA(0x02, forloop);
    5e08:	2680      	movs	r6, #128	; 0x80
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5e0a:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 6004 <I2C_configEXPANDER+0x5a8>
    5e0e:	9a06      	ldr	r2, [sp, #24]
    5e10:	eb09 12c2 	add.w	r2, r9, r2, lsl #7
    5e14:	9207      	str	r2, [sp, #28]
    5e16:	4d7a      	ldr	r5, [pc, #488]	; (6000 <I2C_configEXPANDER+0x5a4>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5e18:	9b01      	ldr	r3, [sp, #4]
    5e1a:	ea4f 1ac3 	mov.w	sl, r3, lsl #7
    5e1e:	f016 0f02 	tst.w	r6, #2
    5e22:	9b07      	ldr	r3, [sp, #28]
    5e24:	bf14      	ite	ne
    5e26:	f8c3 b018 	strne.w	fp, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5e2a:	f8c3 b014 	streq.w	fp, [r3, #20]
    5e2e:	2005      	movs	r0, #5
    5e30:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5e32:	eb09 080a 	add.w	r8, r9, sl
    5e36:	f8c8 4018 	str.w	r4, [r8, #24]
    5e3a:	2005      	movs	r0, #5
    5e3c:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5e3e:	f8c8 4014 	str.w	r4, [r8, #20]
    5e42:	2005      	movs	r0, #5
    5e44:	47a8      	blx	r5
    5e46:	0876      	lsrs	r6, r6, #1
    5e48:	3f01      	subs	r7, #1
    5e4a:	d1e8      	bne.n	5e1e <I2C_configEXPANDER+0x3c2>
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    5e4c:	9b03      	ldr	r3, [sp, #12]
    5e4e:	f8c3 b004 	str.w	fp, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    5e52:	4e6c      	ldr	r6, [pc, #432]	; (6004 <I2C_configEXPANDER+0x5a8>)
    5e54:	9a02      	ldr	r2, [sp, #8]
    5e56:	eb06 15c2 	add.w	r5, r6, r2, lsl #7
    5e5a:	9a08      	ldr	r2, [sp, #32]
    5e5c:	62aa      	str	r2, [r5, #40]	; 0x28
    5e5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5e60:	62aa      	str	r2, [r5, #40]	; 0x28
	I2C_WAITACKOP(-3);
    5e62:	2005      	movs	r0, #5
    5e64:	4f66      	ldr	r7, [pc, #408]	; (6000 <I2C_configEXPANDER+0x5a4>)
    5e66:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5e68:	9a01      	ldr	r2, [sp, #4]
    5e6a:	eb06 16c2 	add.w	r6, r6, r2, lsl #7
    5e6e:	61b4      	str	r4, [r6, #24]
    5e70:	2005      	movs	r0, #5
    5e72:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    5e74:	a80f      	add	r0, sp, #60	; 0x3c
    5e76:	4b64      	ldr	r3, [pc, #400]	; (6008 <I2C_configEXPANDER+0x5ac>)
    5e78:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    5e7a:	9b03      	ldr	r3, [sp, #12]
    5e7c:	681a      	ldr	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    5e7e:	6a2b      	ldr	r3, [r5, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    5e80:	692d      	ldr	r5, [r5, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    5e82:	405d      	eors	r5, r3
    5e84:	4015      	ands	r5, r2
    5e86:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    5e88:	a80f      	add	r0, sp, #60	; 0x3c
    5e8a:	4b60      	ldr	r3, [pc, #384]	; (600c <I2C_configEXPANDER+0x5b0>)
    5e8c:	4798      	blx	r3
    5e8e:	ea1b 0f05 	tst.w	fp, r5
    5e92:	f040 821b 	bne.w	62cc <I2C_configEXPANDER+0x870>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5e96:	4d5b      	ldr	r5, [pc, #364]	; (6004 <I2C_configEXPANDER+0x5a8>)
    5e98:	9f01      	ldr	r7, [sp, #4]
    5e9a:	eb05 13c7 	add.w	r3, r5, r7, lsl #7
    5e9e:	615c      	str	r4, [r3, #20]
    5ea0:	2005      	movs	r0, #5
    5ea2:	4e57      	ldr	r6, [pc, #348]	; (6000 <I2C_configEXPANDER+0x5a4>)
    5ea4:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    5ea6:	9b02      	ldr	r3, [sp, #8]
    5ea8:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    5eac:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    5eb0:	9b04      	ldr	r3, [sp, #16]
    5eb2:	62ab      	str	r3, [r5, #40]	; 0x28
    5eb4:	9b05      	ldr	r3, [sp, #20]
    5eb6:	62ab      	str	r3, [r5, #40]	; 0x28
    5eb8:	2005      	movs	r0, #5
    5eba:	47b0      	blx	r6
    5ebc:	2608      	movs	r6, #8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5ebe:	f8df 8144 	ldr.w	r8, [pc, #324]	; 6004 <I2C_configEXPANDER+0x5a8>
    5ec2:	9b06      	ldr	r3, [sp, #24]
    5ec4:	eb08 1ac3 	add.w	sl, r8, r3, lsl #7
	I2C_SENDDATA(0x00, forloop);
    5ec8:	4d4d      	ldr	r5, [pc, #308]	; (6000 <I2C_configEXPANDER+0x5a4>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5eca:	ea4f 19c7 	mov.w	r9, r7, lsl #7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5ece:	f8ca b014 	str.w	fp, [sl, #20]
    5ed2:	2005      	movs	r0, #5
    5ed4:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5ed6:	eb08 0709 	add.w	r7, r8, r9
    5eda:	61bc      	str	r4, [r7, #24]
    5edc:	2005      	movs	r0, #5
    5ede:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5ee0:	617c      	str	r4, [r7, #20]
    5ee2:	2005      	movs	r0, #5
    5ee4:	47a8      	blx	r5
    5ee6:	3e01      	subs	r6, #1
    5ee8:	d1f1      	bne.n	5ece <I2C_configEXPANDER+0x472>
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    5eea:	9b03      	ldr	r3, [sp, #12]
    5eec:	f8c3 b004 	str.w	fp, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    5ef0:	4e44      	ldr	r6, [pc, #272]	; (6004 <I2C_configEXPANDER+0x5a8>)
    5ef2:	9a02      	ldr	r2, [sp, #8]
    5ef4:	eb06 15c2 	add.w	r5, r6, r2, lsl #7
    5ef8:	9a08      	ldr	r2, [sp, #32]
    5efa:	62aa      	str	r2, [r5, #40]	; 0x28
    5efc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5efe:	62aa      	str	r2, [r5, #40]	; 0x28
	I2C_WAITACKOP(-4);
    5f00:	2005      	movs	r0, #5
    5f02:	4f3f      	ldr	r7, [pc, #252]	; (6000 <I2C_configEXPANDER+0x5a4>)
    5f04:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5f06:	9a01      	ldr	r2, [sp, #4]
    5f08:	eb06 16c2 	add.w	r6, r6, r2, lsl #7
    5f0c:	61b4      	str	r4, [r6, #24]
    5f0e:	2005      	movs	r0, #5
    5f10:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    5f12:	a810      	add	r0, sp, #64	; 0x40
    5f14:	4b3c      	ldr	r3, [pc, #240]	; (6008 <I2C_configEXPANDER+0x5ac>)
    5f16:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    5f18:	9b03      	ldr	r3, [sp, #12]
    5f1a:	681a      	ldr	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    5f1c:	6a2b      	ldr	r3, [r5, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    5f1e:	692d      	ldr	r5, [r5, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    5f20:	405d      	eors	r5, r3
    5f22:	4015      	ands	r5, r2
    5f24:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    5f26:	a810      	add	r0, sp, #64	; 0x40
    5f28:	4b38      	ldr	r3, [pc, #224]	; (600c <I2C_configEXPANDER+0x5b0>)
    5f2a:	4798      	blx	r3
    5f2c:	ea1b 0f05 	tst.w	fp, r5
    5f30:	f040 81e5 	bne.w	62fe <I2C_configEXPANDER+0x8a2>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5f34:	4d33      	ldr	r5, [pc, #204]	; (6004 <I2C_configEXPANDER+0x5a8>)
    5f36:	9b01      	ldr	r3, [sp, #4]
    5f38:	eb05 17c3 	add.w	r7, r5, r3, lsl #7
    5f3c:	617c      	str	r4, [r7, #20]
    5f3e:	2005      	movs	r0, #5
    5f40:	4e2f      	ldr	r6, [pc, #188]	; (6000 <I2C_configEXPANDER+0x5a4>)
    5f42:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    5f44:	9a02      	ldr	r2, [sp, #8]
    5f46:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    5f4a:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    5f4e:	9a04      	ldr	r2, [sp, #16]
    5f50:	62aa      	str	r2, [r5, #40]	; 0x28
    5f52:	9905      	ldr	r1, [sp, #20]
    5f54:	62a9      	str	r1, [r5, #40]	; 0x28
    5f56:	2005      	movs	r0, #5
    5f58:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5f5a:	61bc      	str	r4, [r7, #24]
    5f5c:	f8c5 b018 	str.w	fp, [r5, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    5f60:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    5f64:	9a04      	ldr	r2, [sp, #16]
    5f66:	62aa      	str	r2, [r5, #40]	; 0x28
    5f68:	9905      	ldr	r1, [sp, #20]
    5f6a:	62a9      	str	r1, [r5, #40]	; 0x28
	
	I2C_START(-1);
    5f6c:	2005      	movs	r0, #5
    5f6e:	47b0      	blx	r6
    5f70:	2005      	movs	r0, #5
    5f72:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5f74:	f8c5 b014 	str.w	fp, [r5, #20]
    5f78:	2005      	movs	r0, #5
    5f7a:	47b0      	blx	r6
    5f7c:	617c      	str	r4, [r7, #20]
    5f7e:	2005      	movs	r0, #5
    5f80:	47b0      	blx	r6
    5f82:	2707      	movs	r7, #7
	I2C_SENDADDR(0x41, forloop);
    5f84:	2640      	movs	r6, #64	; 0x40
    5f86:	f8df 907c 	ldr.w	r9, [pc, #124]	; 6004 <I2C_configEXPANDER+0x5a8>
    5f8a:	9a06      	ldr	r2, [sp, #24]
    5f8c:	eb09 12c2 	add.w	r2, r9, r2, lsl #7
    5f90:	9207      	str	r2, [sp, #28]
    5f92:	4d1b      	ldr	r5, [pc, #108]	; (6000 <I2C_configEXPANDER+0x5a4>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5f94:	9b01      	ldr	r3, [sp, #4]
    5f96:	fa03 fa07 	lsl.w	sl, r3, r7
    5f9a:	f016 0f41 	tst.w	r6, #65	; 0x41
    5f9e:	9b07      	ldr	r3, [sp, #28]
    5fa0:	bf14      	ite	ne
    5fa2:	f8c3 b018 	strne.w	fp, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5fa6:	f8c3 b014 	streq.w	fp, [r3, #20]
    5faa:	2005      	movs	r0, #5
    5fac:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5fae:	eb09 080a 	add.w	r8, r9, sl
    5fb2:	f8c8 4018 	str.w	r4, [r8, #24]
    5fb6:	2005      	movs	r0, #5
    5fb8:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5fba:	f8c8 4014 	str.w	r4, [r8, #20]
    5fbe:	2005      	movs	r0, #5
    5fc0:	47a8      	blx	r5
    5fc2:	0876      	lsrs	r6, r6, #1
    5fc4:	3f01      	subs	r7, #1
    5fc6:	d1e8      	bne.n	5f9a <I2C_configEXPANDER+0x53e>
    5fc8:	4d0e      	ldr	r5, [pc, #56]	; (6004 <I2C_configEXPANDER+0x5a8>)
    5fca:	9b02      	ldr	r3, [sp, #8]
    5fcc:	eb05 16c3 	add.w	r6, r5, r3, lsl #7
    5fd0:	f8c6 b014 	str.w	fp, [r6, #20]
	I2C_WRITE();
    5fd4:	2005      	movs	r0, #5
    5fd6:	4f0a      	ldr	r7, [pc, #40]	; (6000 <I2C_configEXPANDER+0x5a4>)
    5fd8:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5fda:	9b01      	ldr	r3, [sp, #4]
    5fdc:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    5fe0:	61ac      	str	r4, [r5, #24]
    5fe2:	2005      	movs	r0, #5
    5fe4:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5fe6:	616c      	str	r4, [r5, #20]
    5fe8:	2005      	movs	r0, #5
    5fea:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    5fec:	9b03      	ldr	r3, [sp, #12]
    5fee:	f8c3 b004 	str.w	fp, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    5ff2:	9a08      	ldr	r2, [sp, #32]
    5ff4:	62b2      	str	r2, [r6, #40]	; 0x28
    5ff6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5ff8:	62b2      	str	r2, [r6, #40]	; 0x28
	I2C_WAITACKOP(-2);
    5ffa:	2005      	movs	r0, #5
    5ffc:	e008      	b.n	6010 <I2C_configEXPANDER+0x5b4>
    5ffe:	bf00      	nop
    6000:	0000152d 	.word	0x0000152d
    6004:	41008000 	.word	0x41008000
    6008:	000014cd 	.word	0x000014cd
    600c:	000014db 	.word	0x000014db
    6010:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6012:	61ac      	str	r4, [r5, #24]
    6014:	2005      	movs	r0, #5
    6016:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    6018:	a811      	add	r0, sp, #68	; 0x44
    601a:	4ba8      	ldr	r3, [pc, #672]	; (62bc <I2C_configEXPANDER+0x860>)
    601c:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    601e:	9b03      	ldr	r3, [sp, #12]
    6020:	681a      	ldr	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    6022:	6a33      	ldr	r3, [r6, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    6024:	6935      	ldr	r5, [r6, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    6026:	405d      	eors	r5, r3
    6028:	4015      	ands	r5, r2
    602a:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    602c:	a811      	add	r0, sp, #68	; 0x44
    602e:	4ba4      	ldr	r3, [pc, #656]	; (62c0 <I2C_configEXPANDER+0x864>)
    6030:	4798      	blx	r3
    6032:	ea1b 0f05 	tst.w	fp, r5
    6036:	f040 817b 	bne.w	6330 <I2C_configEXPANDER+0x8d4>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    603a:	4da2      	ldr	r5, [pc, #648]	; (62c4 <I2C_configEXPANDER+0x868>)
    603c:	9b01      	ldr	r3, [sp, #4]
    603e:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    6042:	615c      	str	r4, [r3, #20]
    6044:	2005      	movs	r0, #5
    6046:	4ea0      	ldr	r6, [pc, #640]	; (62c8 <I2C_configEXPANDER+0x86c>)
    6048:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    604a:	9a02      	ldr	r2, [sp, #8]
    604c:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    6050:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6054:	9a04      	ldr	r2, [sp, #16]
    6056:	62aa      	str	r2, [r5, #40]	; 0x28
    6058:	9a05      	ldr	r2, [sp, #20]
    605a:	62aa      	str	r2, [r5, #40]	; 0x28
    605c:	2005      	movs	r0, #5
    605e:	47b0      	blx	r6
    6060:	2608      	movs	r6, #8
	I2C_SENDDATA(0x03, forloop);
    6062:	2580      	movs	r5, #128	; 0x80
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6064:	f8df 925c 	ldr.w	r9, [pc, #604]	; 62c4 <I2C_configEXPANDER+0x868>
    6068:	9a06      	ldr	r2, [sp, #24]
    606a:	eb09 12c2 	add.w	r2, r9, r2, lsl #7
    606e:	9207      	str	r2, [sp, #28]
    6070:	4f95      	ldr	r7, [pc, #596]	; (62c8 <I2C_configEXPANDER+0x86c>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6072:	9b01      	ldr	r3, [sp, #4]
    6074:	ea4f 1ac3 	mov.w	sl, r3, lsl #7
    6078:	f015 0f03 	tst.w	r5, #3
    607c:	9b07      	ldr	r3, [sp, #28]
    607e:	bf14      	ite	ne
    6080:	f8c3 b018 	strne.w	fp, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6084:	f8c3 b014 	streq.w	fp, [r3, #20]
    6088:	2005      	movs	r0, #5
    608a:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    608c:	eb09 080a 	add.w	r8, r9, sl
    6090:	f8c8 4018 	str.w	r4, [r8, #24]
    6094:	2005      	movs	r0, #5
    6096:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6098:	f8c8 4014 	str.w	r4, [r8, #20]
    609c:	2005      	movs	r0, #5
    609e:	47b8      	blx	r7
    60a0:	086d      	lsrs	r5, r5, #1
    60a2:	3e01      	subs	r6, #1
    60a4:	d1e8      	bne.n	6078 <I2C_configEXPANDER+0x61c>
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    60a6:	9b03      	ldr	r3, [sp, #12]
    60a8:	f8c3 b004 	str.w	fp, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    60ac:	4e85      	ldr	r6, [pc, #532]	; (62c4 <I2C_configEXPANDER+0x868>)
    60ae:	9a02      	ldr	r2, [sp, #8]
    60b0:	eb06 15c2 	add.w	r5, r6, r2, lsl #7
    60b4:	9a08      	ldr	r2, [sp, #32]
    60b6:	62aa      	str	r2, [r5, #40]	; 0x28
    60b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    60ba:	62aa      	str	r2, [r5, #40]	; 0x28
	I2C_WAITACKOP(-3);
    60bc:	2005      	movs	r0, #5
    60be:	4f82      	ldr	r7, [pc, #520]	; (62c8 <I2C_configEXPANDER+0x86c>)
    60c0:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    60c2:	9a01      	ldr	r2, [sp, #4]
    60c4:	eb06 16c2 	add.w	r6, r6, r2, lsl #7
    60c8:	61b4      	str	r4, [r6, #24]
    60ca:	2005      	movs	r0, #5
    60cc:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    60ce:	a812      	add	r0, sp, #72	; 0x48
    60d0:	4b7a      	ldr	r3, [pc, #488]	; (62bc <I2C_configEXPANDER+0x860>)
    60d2:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    60d4:	9b03      	ldr	r3, [sp, #12]
    60d6:	681a      	ldr	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    60d8:	6a2b      	ldr	r3, [r5, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    60da:	692d      	ldr	r5, [r5, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    60dc:	405d      	eors	r5, r3
    60de:	4015      	ands	r5, r2
    60e0:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    60e2:	a812      	add	r0, sp, #72	; 0x48
    60e4:	4b76      	ldr	r3, [pc, #472]	; (62c0 <I2C_configEXPANDER+0x864>)
    60e6:	4798      	blx	r3
    60e8:	ea1b 0f05 	tst.w	fp, r5
    60ec:	f040 8139 	bne.w	6362 <I2C_configEXPANDER+0x906>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    60f0:	4d74      	ldr	r5, [pc, #464]	; (62c4 <I2C_configEXPANDER+0x868>)
    60f2:	9b01      	ldr	r3, [sp, #4]
    60f4:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    60f8:	615c      	str	r4, [r3, #20]
    60fa:	2005      	movs	r0, #5
    60fc:	4e72      	ldr	r6, [pc, #456]	; (62c8 <I2C_configEXPANDER+0x86c>)
    60fe:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6100:	9a02      	ldr	r2, [sp, #8]
    6102:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    6106:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    610a:	9a04      	ldr	r2, [sp, #16]
    610c:	62aa      	str	r2, [r5, #40]	; 0x28
    610e:	9a05      	ldr	r2, [sp, #20]
    6110:	62aa      	str	r2, [r5, #40]	; 0x28
    6112:	2005      	movs	r0, #5
    6114:	47b0      	blx	r6
    6116:	2708      	movs	r7, #8
	I2C_SENDDATA(0xC0, forloop);
    6118:	2680      	movs	r6, #128	; 0x80
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    611a:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 62c4 <I2C_configEXPANDER+0x868>
    611e:	9a06      	ldr	r2, [sp, #24]
    6120:	eb09 12c2 	add.w	r2, r9, r2, lsl #7
    6124:	9206      	str	r2, [sp, #24]
    6126:	4d68      	ldr	r5, [pc, #416]	; (62c8 <I2C_configEXPANDER+0x86c>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6128:	9b01      	ldr	r3, [sp, #4]
    612a:	ea4f 1ac3 	mov.w	sl, r3, lsl #7
    612e:	f016 0fc0 	tst.w	r6, #192	; 0xc0
    6132:	9b06      	ldr	r3, [sp, #24]
    6134:	bf14      	ite	ne
    6136:	f8c3 b018 	strne.w	fp, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    613a:	f8c3 b014 	streq.w	fp, [r3, #20]
    613e:	2005      	movs	r0, #5
    6140:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6142:	eb09 080a 	add.w	r8, r9, sl
    6146:	f8c8 4018 	str.w	r4, [r8, #24]
    614a:	2005      	movs	r0, #5
    614c:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    614e:	f8c8 4014 	str.w	r4, [r8, #20]
    6152:	2005      	movs	r0, #5
    6154:	47a8      	blx	r5
    6156:	0876      	lsrs	r6, r6, #1
    6158:	3f01      	subs	r7, #1
    615a:	d1e8      	bne.n	612e <I2C_configEXPANDER+0x6d2>
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    615c:	9b03      	ldr	r3, [sp, #12]
    615e:	f8c3 b004 	str.w	fp, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6162:	4e58      	ldr	r6, [pc, #352]	; (62c4 <I2C_configEXPANDER+0x868>)
    6164:	9a02      	ldr	r2, [sp, #8]
    6166:	eb06 15c2 	add.w	r5, r6, r2, lsl #7
    616a:	9a08      	ldr	r2, [sp, #32]
    616c:	62aa      	str	r2, [r5, #40]	; 0x28
    616e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6170:	62aa      	str	r2, [r5, #40]	; 0x28
	I2C_WAITACKOP(-4);		
    6172:	2005      	movs	r0, #5
    6174:	4f54      	ldr	r7, [pc, #336]	; (62c8 <I2C_configEXPANDER+0x86c>)
    6176:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6178:	9a01      	ldr	r2, [sp, #4]
    617a:	eb06 16c2 	add.w	r6, r6, r2, lsl #7
    617e:	61b4      	str	r4, [r6, #24]
    6180:	2005      	movs	r0, #5
    6182:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    6184:	a813      	add	r0, sp, #76	; 0x4c
    6186:	4b4d      	ldr	r3, [pc, #308]	; (62bc <I2C_configEXPANDER+0x860>)
    6188:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    618a:	9b03      	ldr	r3, [sp, #12]
    618c:	681a      	ldr	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    618e:	6a2b      	ldr	r3, [r5, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    6190:	692d      	ldr	r5, [r5, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    6192:	405d      	eors	r5, r3
    6194:	4015      	ands	r5, r2
    6196:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    6198:	a813      	add	r0, sp, #76	; 0x4c
    619a:	4b49      	ldr	r3, [pc, #292]	; (62c0 <I2C_configEXPANDER+0x864>)
    619c:	4798      	blx	r3
    619e:	ea1b 0f05 	tst.w	fp, r5
    61a2:	f040 80f7 	bne.w	6394 <I2C_configEXPANDER+0x938>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    61a6:	4d47      	ldr	r5, [pc, #284]	; (62c4 <I2C_configEXPANDER+0x868>)
    61a8:	9b01      	ldr	r3, [sp, #4]
    61aa:	eb05 17c3 	add.w	r7, r5, r3, lsl #7
    61ae:	617c      	str	r4, [r7, #20]
    61b0:	2005      	movs	r0, #5
    61b2:	4e45      	ldr	r6, [pc, #276]	; (62c8 <I2C_configEXPANDER+0x86c>)
    61b4:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    61b6:	9b02      	ldr	r3, [sp, #8]
    61b8:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    61bc:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    61c0:	9b04      	ldr	r3, [sp, #16]
    61c2:	62ab      	str	r3, [r5, #40]	; 0x28
    61c4:	9a05      	ldr	r2, [sp, #20]
    61c6:	62aa      	str	r2, [r5, #40]	; 0x28
    61c8:	2005      	movs	r0, #5
    61ca:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    61cc:	61bc      	str	r4, [r7, #24]
	
	/* If successful, and code execution got here, the close the I2C channel */
	I2C_STOP();
    61ce:	2005      	movs	r0, #5
    61d0:	47b0      	blx	r6
    61d2:	f8c5 b018 	str.w	fp, [r5, #24]
    61d6:	2005      	movs	r0, #5
    61d8:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    61da:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    61de:	9b04      	ldr	r3, [sp, #16]
    61e0:	62ab      	str	r3, [r5, #40]	; 0x28
    61e2:	9a05      	ldr	r2, [sp, #20]
    61e4:	62aa      	str	r2, [r5, #40]	; 0x28
    61e6:	2005      	movs	r0, #5
    61e8:	47b0      	blx	r6
	I2C_CLOSE();
	
	return 0;
    61ea:	2000      	movs	r0, #0
}
    61ec:	b015      	add	sp, #84	; 0x54
    61ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    61f2:	4d34      	ldr	r5, [pc, #208]	; (62c4 <I2C_configEXPANDER+0x868>)
    61f4:	9b01      	ldr	r3, [sp, #4]
    61f6:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    61fa:	619c      	str	r4, [r3, #24]
	I2C_WAITACKOP(-2);
    61fc:	2005      	movs	r0, #5
    61fe:	47b8      	blx	r7
    6200:	9b02      	ldr	r3, [sp, #8]
    6202:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    6206:	f8c5 b018 	str.w	fp, [r5, #24]
    620a:	2005      	movs	r0, #5
    620c:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    620e:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6212:	9b04      	ldr	r3, [sp, #16]
    6214:	62ab      	str	r3, [r5, #40]	; 0x28
    6216:	9b05      	ldr	r3, [sp, #20]
    6218:	62ab      	str	r3, [r5, #40]	; 0x28
    621a:	2005      	movs	r0, #5
    621c:	47b8      	blx	r7
    621e:	f06f 0001 	mvn.w	r0, #1
    6222:	e7e3      	b.n	61ec <I2C_configEXPANDER+0x790>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6224:	4d27      	ldr	r5, [pc, #156]	; (62c4 <I2C_configEXPANDER+0x868>)
    6226:	9b01      	ldr	r3, [sp, #4]
    6228:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    622c:	619c      	str	r4, [r3, #24]
	I2C_WAITACKOP(-3);
    622e:	2005      	movs	r0, #5
    6230:	47b8      	blx	r7
    6232:	9b02      	ldr	r3, [sp, #8]
    6234:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    6238:	f8c5 b018 	str.w	fp, [r5, #24]
    623c:	2005      	movs	r0, #5
    623e:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6240:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6244:	9b04      	ldr	r3, [sp, #16]
    6246:	62ab      	str	r3, [r5, #40]	; 0x28
    6248:	9b05      	ldr	r3, [sp, #20]
    624a:	62ab      	str	r3, [r5, #40]	; 0x28
    624c:	2005      	movs	r0, #5
    624e:	47b8      	blx	r7
    6250:	f06f 0002 	mvn.w	r0, #2
    6254:	e7ca      	b.n	61ec <I2C_configEXPANDER+0x790>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6256:	4d1b      	ldr	r5, [pc, #108]	; (62c4 <I2C_configEXPANDER+0x868>)
    6258:	9b01      	ldr	r3, [sp, #4]
    625a:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    625e:	619c      	str	r4, [r3, #24]
	I2C_WAITACKOP(-4);
    6260:	2005      	movs	r0, #5
    6262:	47b8      	blx	r7
    6264:	9b02      	ldr	r3, [sp, #8]
    6266:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    626a:	f8c5 b018 	str.w	fp, [r5, #24]
    626e:	2005      	movs	r0, #5
    6270:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6272:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6276:	9b04      	ldr	r3, [sp, #16]
    6278:	62ab      	str	r3, [r5, #40]	; 0x28
    627a:	9b05      	ldr	r3, [sp, #20]
    627c:	62ab      	str	r3, [r5, #40]	; 0x28
    627e:	2005      	movs	r0, #5
    6280:	47b8      	blx	r7
    6282:	f06f 0003 	mvn.w	r0, #3
    6286:	e7b1      	b.n	61ec <I2C_configEXPANDER+0x790>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6288:	4d0e      	ldr	r5, [pc, #56]	; (62c4 <I2C_configEXPANDER+0x868>)
    628a:	9b01      	ldr	r3, [sp, #4]
    628c:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    6290:	619c      	str	r4, [r3, #24]
	I2C_WAITACKOP(-2);
    6292:	2005      	movs	r0, #5
    6294:	47b8      	blx	r7
    6296:	9b02      	ldr	r3, [sp, #8]
    6298:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    629c:	f8c5 b018 	str.w	fp, [r5, #24]
    62a0:	2005      	movs	r0, #5
    62a2:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    62a4:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    62a8:	9b04      	ldr	r3, [sp, #16]
    62aa:	62ab      	str	r3, [r5, #40]	; 0x28
    62ac:	9b05      	ldr	r3, [sp, #20]
    62ae:	62ab      	str	r3, [r5, #40]	; 0x28
    62b0:	2005      	movs	r0, #5
    62b2:	47b8      	blx	r7
    62b4:	f06f 0001 	mvn.w	r0, #1
    62b8:	e798      	b.n	61ec <I2C_configEXPANDER+0x790>
    62ba:	bf00      	nop
    62bc:	000014cd 	.word	0x000014cd
    62c0:	000014db 	.word	0x000014db
    62c4:	41008000 	.word	0x41008000
    62c8:	0000152d 	.word	0x0000152d
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    62cc:	4d3e      	ldr	r5, [pc, #248]	; (63c8 <I2C_configEXPANDER+0x96c>)
    62ce:	9b01      	ldr	r3, [sp, #4]
    62d0:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    62d4:	619c      	str	r4, [r3, #24]
	I2C_WAITACKOP(-3);
    62d6:	2005      	movs	r0, #5
    62d8:	47b8      	blx	r7
    62da:	9b02      	ldr	r3, [sp, #8]
    62dc:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    62e0:	f8c5 b018 	str.w	fp, [r5, #24]
    62e4:	2005      	movs	r0, #5
    62e6:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    62e8:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    62ec:	9b04      	ldr	r3, [sp, #16]
    62ee:	62ab      	str	r3, [r5, #40]	; 0x28
    62f0:	9b05      	ldr	r3, [sp, #20]
    62f2:	62ab      	str	r3, [r5, #40]	; 0x28
    62f4:	2005      	movs	r0, #5
    62f6:	47b8      	blx	r7
    62f8:	f06f 0002 	mvn.w	r0, #2
    62fc:	e776      	b.n	61ec <I2C_configEXPANDER+0x790>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    62fe:	4d32      	ldr	r5, [pc, #200]	; (63c8 <I2C_configEXPANDER+0x96c>)
    6300:	9b01      	ldr	r3, [sp, #4]
    6302:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    6306:	619c      	str	r4, [r3, #24]
	I2C_WAITACKOP(-4);
    6308:	2005      	movs	r0, #5
    630a:	47b8      	blx	r7
    630c:	9b02      	ldr	r3, [sp, #8]
    630e:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    6312:	f8c5 b018 	str.w	fp, [r5, #24]
    6316:	2005      	movs	r0, #5
    6318:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    631a:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    631e:	9b04      	ldr	r3, [sp, #16]
    6320:	62ab      	str	r3, [r5, #40]	; 0x28
    6322:	9b05      	ldr	r3, [sp, #20]
    6324:	62ab      	str	r3, [r5, #40]	; 0x28
    6326:	2005      	movs	r0, #5
    6328:	47b8      	blx	r7
    632a:	f06f 0003 	mvn.w	r0, #3
    632e:	e75d      	b.n	61ec <I2C_configEXPANDER+0x790>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6330:	4d25      	ldr	r5, [pc, #148]	; (63c8 <I2C_configEXPANDER+0x96c>)
    6332:	9b01      	ldr	r3, [sp, #4]
    6334:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    6338:	619c      	str	r4, [r3, #24]
	I2C_WAITACKOP(-2);
    633a:	2005      	movs	r0, #5
    633c:	47b8      	blx	r7
    633e:	9b02      	ldr	r3, [sp, #8]
    6340:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    6344:	f8c5 b018 	str.w	fp, [r5, #24]
    6348:	2005      	movs	r0, #5
    634a:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    634c:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6350:	9b04      	ldr	r3, [sp, #16]
    6352:	62ab      	str	r3, [r5, #40]	; 0x28
    6354:	9b05      	ldr	r3, [sp, #20]
    6356:	62ab      	str	r3, [r5, #40]	; 0x28
    6358:	2005      	movs	r0, #5
    635a:	47b8      	blx	r7
    635c:	f06f 0001 	mvn.w	r0, #1
    6360:	e744      	b.n	61ec <I2C_configEXPANDER+0x790>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6362:	4d19      	ldr	r5, [pc, #100]	; (63c8 <I2C_configEXPANDER+0x96c>)
    6364:	9b01      	ldr	r3, [sp, #4]
    6366:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    636a:	619c      	str	r4, [r3, #24]
	I2C_WAITACKOP(-3);
    636c:	2005      	movs	r0, #5
    636e:	47b8      	blx	r7
    6370:	9b02      	ldr	r3, [sp, #8]
    6372:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    6376:	f8c5 b018 	str.w	fp, [r5, #24]
    637a:	2005      	movs	r0, #5
    637c:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    637e:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6382:	9b04      	ldr	r3, [sp, #16]
    6384:	62ab      	str	r3, [r5, #40]	; 0x28
    6386:	9b05      	ldr	r3, [sp, #20]
    6388:	62ab      	str	r3, [r5, #40]	; 0x28
    638a:	2005      	movs	r0, #5
    638c:	47b8      	blx	r7
    638e:	f06f 0002 	mvn.w	r0, #2
    6392:	e72b      	b.n	61ec <I2C_configEXPANDER+0x790>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6394:	4d0c      	ldr	r5, [pc, #48]	; (63c8 <I2C_configEXPANDER+0x96c>)
    6396:	9b01      	ldr	r3, [sp, #4]
    6398:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    639c:	619c      	str	r4, [r3, #24]
	I2C_WAITACKOP(-4);		
    639e:	2005      	movs	r0, #5
    63a0:	47b8      	blx	r7
    63a2:	9b02      	ldr	r3, [sp, #8]
    63a4:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    63a8:	f8c5 b018 	str.w	fp, [r5, #24]
    63ac:	2005      	movs	r0, #5
    63ae:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    63b0:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    63b4:	9b04      	ldr	r3, [sp, #16]
    63b6:	62ab      	str	r3, [r5, #40]	; 0x28
    63b8:	9b05      	ldr	r3, [sp, #20]
    63ba:	62ab      	str	r3, [r5, #40]	; 0x28
    63bc:	2005      	movs	r0, #5
    63be:	47b8      	blx	r7
    63c0:	f06f 0003 	mvn.w	r0, #3
    63c4:	e712      	b.n	61ec <I2C_configEXPANDER+0x790>
    63c6:	bf00      	nop
    63c8:	41008000 	.word	0x41008000

000063cc <I2C_setEXPANDER>:
// * CALLED BY:			  main()                                                                                                       *
// * CALLS:		          No function. ALL macros defined in this function file.                                                       *
// * --------------------------------------------------------------------------------------------------------------------------------- *
int I2C_setEXPANDER(uint8_t sda,  uint8_t clk, unsigned char relay)

{
    63cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    63d0:	b08f      	sub	sp, #60	; 0x3c
    63d2:	9202      	str	r2, [sp, #8]
    63d4:	f001 041f 	and.w	r4, r1, #31
    63d8:	2301      	movs	r3, #1
    63da:	fa03 f404 	lsl.w	r4, r3, r4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    63de:	094a      	lsrs	r2, r1, #5
    63e0:	4db0      	ldr	r5, [pc, #704]	; (66a4 <I2C_setEXPANDER+0x2d8>)
    63e2:	9200      	str	r2, [sp, #0]
    63e4:	eb05 17c2 	add.w	r7, r5, r2, lsl #7
    63e8:	61bc      	str	r4, [r7, #24]
    63ea:	0942      	lsrs	r2, r0, #5
    63ec:	9203      	str	r2, [sp, #12]
    63ee:	f000 001f 	and.w	r0, r0, #31
    63f2:	fa03 fa00 	lsl.w	sl, r3, r0
    63f6:	9207      	str	r2, [sp, #28]
    63f8:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    63fc:	f8c5 a018 	str.w	sl, [r5, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6400:	f8c5 a008 	str.w	sl, [r5, #8]
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    6404:	fa1f f38a 	uxth.w	r3, sl
    6408:	9308      	str	r3, [sp, #32]
    640a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    640e:	9305      	str	r3, [sp, #20]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6410:	62ab      	str	r3, [r5, #40]	; 0x28
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    6412:	ea4f 431a 	mov.w	r3, sl, lsr #16
    6416:	9309      	str	r3, [sp, #36]	; 0x24
		hri_port_write_WRCONFIG_reg(
    6418:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    641c:	9306      	str	r3, [sp, #24]
    641e:	62ab      	str	r3, [r5, #40]	; 0x28
	uint8_t     		i2csda, i2cclk;
	unsigned char		forloop;

	/* Open an I2C channel, send address 0x41, index register 0x01 then send the relay output value */
	I2C_OPEN(sda, clk);
	I2C_START(-1);
    6420:	2005      	movs	r0, #5
    6422:	4ea1      	ldr	r6, [pc, #644]	; (66a8 <I2C_setEXPANDER+0x2dc>)
    6424:	47b0      	blx	r6
    6426:	2005      	movs	r0, #5
    6428:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    642a:	f8c5 a014 	str.w	sl, [r5, #20]
    642e:	2005      	movs	r0, #5
    6430:	47b0      	blx	r6
    6432:	617c      	str	r4, [r7, #20]
    6434:	2005      	movs	r0, #5
    6436:	47b0      	blx	r6
    6438:	2707      	movs	r7, #7
	I2C_SENDADDR(0x41, forloop);
    643a:	2640      	movs	r6, #64	; 0x40
    643c:	f8df 9264 	ldr.w	r9, [pc, #612]	; 66a4 <I2C_setEXPANDER+0x2d8>
    6440:	9a07      	ldr	r2, [sp, #28]
    6442:	eb09 1bc2 	add.w	fp, r9, r2, lsl #7
    6446:	4d98      	ldr	r5, [pc, #608]	; (66a8 <I2C_setEXPANDER+0x2dc>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6448:	9900      	ldr	r1, [sp, #0]
    644a:	fa01 f307 	lsl.w	r3, r1, r7
    644e:	9301      	str	r3, [sp, #4]
    6450:	f016 0f41 	tst.w	r6, #65	; 0x41
    6454:	bf14      	ite	ne
    6456:	f8cb a018 	strne.w	sl, [fp, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    645a:	f8cb a014 	streq.w	sl, [fp, #20]
    645e:	2005      	movs	r0, #5
    6460:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6462:	9b01      	ldr	r3, [sp, #4]
    6464:	eb09 0803 	add.w	r8, r9, r3
    6468:	f8c8 4018 	str.w	r4, [r8, #24]
    646c:	2005      	movs	r0, #5
    646e:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6470:	f8c8 4014 	str.w	r4, [r8, #20]
    6474:	2005      	movs	r0, #5
    6476:	47a8      	blx	r5
    6478:	0876      	lsrs	r6, r6, #1
    647a:	3f01      	subs	r7, #1
    647c:	d1e8      	bne.n	6450 <I2C_setEXPANDER+0x84>
    647e:	4d89      	ldr	r5, [pc, #548]	; (66a4 <I2C_setEXPANDER+0x2d8>)
    6480:	9b03      	ldr	r3, [sp, #12]
    6482:	eb05 16c3 	add.w	r6, r5, r3, lsl #7
    6486:	f8c6 a014 	str.w	sl, [r6, #20]
	I2C_WRITE();
    648a:	2005      	movs	r0, #5
    648c:	4f86      	ldr	r7, [pc, #536]	; (66a8 <I2C_setEXPANDER+0x2dc>)
    648e:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6490:	9a00      	ldr	r2, [sp, #0]
    6492:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    6496:	61ac      	str	r4, [r5, #24]
    6498:	2005      	movs	r0, #5
    649a:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    649c:	616c      	str	r4, [r5, #20]
    649e:	2005      	movs	r0, #5
    64a0:	47b8      	blx	r7
    64a2:	9b03      	ldr	r3, [sp, #12]
    64a4:	01db      	lsls	r3, r3, #7
    64a6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    64aa:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    64ae:	9304      	str	r3, [sp, #16]
    64b0:	f8c3 a004 	str.w	sl, [r3, #4]
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    64b4:	9908      	ldr	r1, [sp, #32]
    64b6:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    64ba:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
    64be:	9108      	str	r1, [sp, #32]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    64c0:	62b1      	str	r1, [r6, #40]	; 0x28
		hri_port_write_WRCONFIG_reg(PORT,
    64c2:	9909      	ldr	r1, [sp, #36]	; 0x24
    64c4:	f041 4140 	orr.w	r1, r1, #3221225472	; 0xc0000000
    64c8:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
    64cc:	9109      	str	r1, [sp, #36]	; 0x24
    64ce:	62b1      	str	r1, [r6, #40]	; 0x28
	I2C_WAITACKOP(-2);
    64d0:	2005      	movs	r0, #5
    64d2:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    64d4:	61ac      	str	r4, [r5, #24]
    64d6:	2005      	movs	r0, #5
    64d8:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    64da:	a80b      	add	r0, sp, #44	; 0x2c
    64dc:	4b73      	ldr	r3, [pc, #460]	; (66ac <I2C_setEXPANDER+0x2e0>)
    64de:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    64e0:	9a04      	ldr	r2, [sp, #16]
    64e2:	6812      	ldr	r2, [r2, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    64e4:	6a33      	ldr	r3, [r6, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    64e6:	6935      	ldr	r5, [r6, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    64e8:	405d      	eors	r5, r3
    64ea:	4015      	ands	r5, r2
    64ec:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    64ee:	a80b      	add	r0, sp, #44	; 0x2c
    64f0:	4b6f      	ldr	r3, [pc, #444]	; (66b0 <I2C_setEXPANDER+0x2e4>)
    64f2:	4798      	blx	r3
    64f4:	ea1a 0f05 	tst.w	sl, r5
    64f8:	f040 80e8 	bne.w	66cc <I2C_setEXPANDER+0x300>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    64fc:	4d69      	ldr	r5, [pc, #420]	; (66a4 <I2C_setEXPANDER+0x2d8>)
    64fe:	9b00      	ldr	r3, [sp, #0]
    6500:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    6504:	615c      	str	r4, [r3, #20]
    6506:	2005      	movs	r0, #5
    6508:	4e67      	ldr	r6, [pc, #412]	; (66a8 <I2C_setEXPANDER+0x2dc>)
    650a:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    650c:	9a03      	ldr	r2, [sp, #12]
    650e:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    6512:	f8c5 a008 	str.w	sl, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6516:	9a05      	ldr	r2, [sp, #20]
    6518:	62aa      	str	r2, [r5, #40]	; 0x28
    651a:	9a06      	ldr	r2, [sp, #24]
    651c:	62aa      	str	r2, [r5, #40]	; 0x28
    651e:	2005      	movs	r0, #5
    6520:	47b0      	blx	r6
    6522:	2508      	movs	r5, #8
	I2C_SENDDATA(0x01, forloop);
    6524:	2780      	movs	r7, #128	; 0x80
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6526:	f8df 917c 	ldr.w	r9, [pc, #380]	; 66a4 <I2C_setEXPANDER+0x2d8>
    652a:	9a07      	ldr	r2, [sp, #28]
    652c:	eb09 12c2 	add.w	r2, r9, r2, lsl #7
    6530:	9201      	str	r2, [sp, #4]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6532:	9b00      	ldr	r3, [sp, #0]
    6534:	ea4f 1bc3 	mov.w	fp, r3, lsl #7
    6538:	f017 0f01 	tst.w	r7, #1
    653c:	9b01      	ldr	r3, [sp, #4]
    653e:	bf14      	ite	ne
    6540:	f8c3 a018 	strne.w	sl, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6544:	f8c3 a014 	streq.w	sl, [r3, #20]
    6548:	2005      	movs	r0, #5
    654a:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    654c:	eb09 080b 	add.w	r8, r9, fp
    6550:	f8c8 4018 	str.w	r4, [r8, #24]
    6554:	2005      	movs	r0, #5
    6556:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6558:	f8c8 4014 	str.w	r4, [r8, #20]
    655c:	2005      	movs	r0, #5
    655e:	47b0      	blx	r6
    6560:	087f      	lsrs	r7, r7, #1
    6562:	3d01      	subs	r5, #1
    6564:	d1e8      	bne.n	6538 <I2C_setEXPANDER+0x16c>
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    6566:	9b04      	ldr	r3, [sp, #16]
    6568:	f8c3 a004 	str.w	sl, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    656c:	4e4d      	ldr	r6, [pc, #308]	; (66a4 <I2C_setEXPANDER+0x2d8>)
    656e:	9a03      	ldr	r2, [sp, #12]
    6570:	eb06 15c2 	add.w	r5, r6, r2, lsl #7
    6574:	9a08      	ldr	r2, [sp, #32]
    6576:	62aa      	str	r2, [r5, #40]	; 0x28
    6578:	9a09      	ldr	r2, [sp, #36]	; 0x24
    657a:	62aa      	str	r2, [r5, #40]	; 0x28
	I2C_WAITACKOP(-3);
    657c:	2005      	movs	r0, #5
    657e:	4f4a      	ldr	r7, [pc, #296]	; (66a8 <I2C_setEXPANDER+0x2dc>)
    6580:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6582:	9a00      	ldr	r2, [sp, #0]
    6584:	eb06 16c2 	add.w	r6, r6, r2, lsl #7
    6588:	61b4      	str	r4, [r6, #24]
    658a:	2005      	movs	r0, #5
    658c:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    658e:	a80c      	add	r0, sp, #48	; 0x30
    6590:	4b46      	ldr	r3, [pc, #280]	; (66ac <I2C_setEXPANDER+0x2e0>)
    6592:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    6594:	9b04      	ldr	r3, [sp, #16]
    6596:	681a      	ldr	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    6598:	6a2b      	ldr	r3, [r5, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    659a:	692d      	ldr	r5, [r5, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    659c:	405d      	eors	r5, r3
    659e:	4015      	ands	r5, r2
    65a0:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    65a2:	a80c      	add	r0, sp, #48	; 0x30
    65a4:	4b42      	ldr	r3, [pc, #264]	; (66b0 <I2C_setEXPANDER+0x2e4>)
    65a6:	4798      	blx	r3
    65a8:	ea1a 0f05 	tst.w	sl, r5
    65ac:	f040 80a7 	bne.w	66fe <I2C_setEXPANDER+0x332>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    65b0:	4d3c      	ldr	r5, [pc, #240]	; (66a4 <I2C_setEXPANDER+0x2d8>)
    65b2:	9b00      	ldr	r3, [sp, #0]
    65b4:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    65b8:	615c      	str	r4, [r3, #20]
    65ba:	2005      	movs	r0, #5
    65bc:	4e3a      	ldr	r6, [pc, #232]	; (66a8 <I2C_setEXPANDER+0x2dc>)
    65be:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    65c0:	9a03      	ldr	r2, [sp, #12]
    65c2:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    65c6:	f8c5 a008 	str.w	sl, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    65ca:	9a05      	ldr	r2, [sp, #20]
    65cc:	62aa      	str	r2, [r5, #40]	; 0x28
    65ce:	9a06      	ldr	r2, [sp, #24]
    65d0:	62aa      	str	r2, [r5, #40]	; 0x28
    65d2:	2005      	movs	r0, #5
    65d4:	47b0      	blx	r6
    65d6:	2608      	movs	r6, #8
	I2C_SENDDATA(relay, forloop);
    65d8:	2580      	movs	r5, #128	; 0x80
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    65da:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 66a4 <I2C_setEXPANDER+0x2d8>
    65de:	9a07      	ldr	r2, [sp, #28]
    65e0:	eb0b 12c2 	add.w	r2, fp, r2, lsl #7
    65e4:	9201      	str	r2, [sp, #4]
    65e6:	4f30      	ldr	r7, [pc, #192]	; (66a8 <I2C_setEXPANDER+0x2dc>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    65e8:	9b00      	ldr	r3, [sp, #0]
    65ea:	ea4f 19c3 	mov.w	r9, r3, lsl #7
    65ee:	46a0      	mov	r8, r4
    65f0:	9b02      	ldr	r3, [sp, #8]
    65f2:	422b      	tst	r3, r5
    65f4:	9b01      	ldr	r3, [sp, #4]
    65f6:	bf14      	ite	ne
    65f8:	f8c3 a018 	strne.w	sl, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    65fc:	f8c3 a014 	streq.w	sl, [r3, #20]
    6600:	2005      	movs	r0, #5
    6602:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6604:	eb0b 0409 	add.w	r4, fp, r9
    6608:	f8c4 8018 	str.w	r8, [r4, #24]
    660c:	2005      	movs	r0, #5
    660e:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6610:	f8c4 8014 	str.w	r8, [r4, #20]
    6614:	2005      	movs	r0, #5
    6616:	47b8      	blx	r7
    6618:	086d      	lsrs	r5, r5, #1
    661a:	3e01      	subs	r6, #1
    661c:	d1e8      	bne.n	65f0 <I2C_setEXPANDER+0x224>
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    661e:	9b04      	ldr	r3, [sp, #16]
    6620:	f8c3 a004 	str.w	sl, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6624:	4e1f      	ldr	r6, [pc, #124]	; (66a4 <I2C_setEXPANDER+0x2d8>)
    6626:	9a03      	ldr	r2, [sp, #12]
    6628:	eb06 15c2 	add.w	r5, r6, r2, lsl #7
    662c:	9a08      	ldr	r2, [sp, #32]
    662e:	62aa      	str	r2, [r5, #40]	; 0x28
    6630:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6632:	62aa      	str	r2, [r5, #40]	; 0x28
	I2C_WAITACKOP(-4);
    6634:	2005      	movs	r0, #5
    6636:	4f1c      	ldr	r7, [pc, #112]	; (66a8 <I2C_setEXPANDER+0x2dc>)
    6638:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    663a:	9a00      	ldr	r2, [sp, #0]
    663c:	eb06 16c2 	add.w	r6, r6, r2, lsl #7
    6640:	f8c6 8018 	str.w	r8, [r6, #24]
    6644:	2005      	movs	r0, #5
    6646:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    6648:	a80d      	add	r0, sp, #52	; 0x34
    664a:	4b18      	ldr	r3, [pc, #96]	; (66ac <I2C_setEXPANDER+0x2e0>)
    664c:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    664e:	9b04      	ldr	r3, [sp, #16]
    6650:	681a      	ldr	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    6652:	6a2b      	ldr	r3, [r5, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    6654:	692d      	ldr	r5, [r5, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    6656:	405d      	eors	r5, r3
    6658:	4015      	ands	r5, r2
    665a:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    665c:	a80d      	add	r0, sp, #52	; 0x34
    665e:	4b14      	ldr	r3, [pc, #80]	; (66b0 <I2C_setEXPANDER+0x2e4>)
    6660:	4798      	blx	r3
    6662:	ea1a 0f05 	tst.w	sl, r5
    6666:	d163      	bne.n	6730 <I2C_setEXPANDER+0x364>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6668:	4d0e      	ldr	r5, [pc, #56]	; (66a4 <I2C_setEXPANDER+0x2d8>)
    666a:	9b00      	ldr	r3, [sp, #0]
    666c:	eb05 17c3 	add.w	r7, r5, r3, lsl #7
    6670:	f8c7 8014 	str.w	r8, [r7, #20]
    6674:	2005      	movs	r0, #5
    6676:	4e0c      	ldr	r6, [pc, #48]	; (66a8 <I2C_setEXPANDER+0x2dc>)
    6678:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    667a:	9b03      	ldr	r3, [sp, #12]
    667c:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    6680:	f8c5 a008 	str.w	sl, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6684:	9b05      	ldr	r3, [sp, #20]
    6686:	62ab      	str	r3, [r5, #40]	; 0x28
    6688:	9a06      	ldr	r2, [sp, #24]
    668a:	62aa      	str	r2, [r5, #40]	; 0x28
    668c:	2005      	movs	r0, #5
    668e:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6690:	f8c7 8018 	str.w	r8, [r7, #24]
	
	/* If successful, and code execution got here, the close the I2C channel */
	I2C_STOP();
    6694:	2005      	movs	r0, #5
    6696:	47b0      	blx	r6
    6698:	f8c5 a018 	str.w	sl, [r5, #24]
    669c:	2005      	movs	r0, #5
    669e:	47b0      	blx	r6
    66a0:	e008      	b.n	66b4 <I2C_setEXPANDER+0x2e8>
    66a2:	bf00      	nop
    66a4:	41008000 	.word	0x41008000
    66a8:	0000152d 	.word	0x0000152d
    66ac:	000014cd 	.word	0x000014cd
    66b0:	000014db 	.word	0x000014db
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    66b4:	f8c5 a008 	str.w	sl, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    66b8:	9b05      	ldr	r3, [sp, #20]
    66ba:	62ab      	str	r3, [r5, #40]	; 0x28
    66bc:	9a06      	ldr	r2, [sp, #24]
    66be:	62aa      	str	r2, [r5, #40]	; 0x28
    66c0:	2005      	movs	r0, #5
    66c2:	47b0      	blx	r6
	I2C_CLOSE();
	
	return 0;
    66c4:	2000      	movs	r0, #0
}
    66c6:	b00f      	add	sp, #60	; 0x3c
    66c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    66cc:	4d25      	ldr	r5, [pc, #148]	; (6764 <I2C_setEXPANDER+0x398>)
    66ce:	9b00      	ldr	r3, [sp, #0]
    66d0:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    66d4:	619c      	str	r4, [r3, #24]
	I2C_WAITACKOP(-2);
    66d6:	2005      	movs	r0, #5
    66d8:	47b8      	blx	r7
    66da:	9b03      	ldr	r3, [sp, #12]
    66dc:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    66e0:	f8c5 a018 	str.w	sl, [r5, #24]
    66e4:	2005      	movs	r0, #5
    66e6:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    66e8:	f8c5 a008 	str.w	sl, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    66ec:	9b05      	ldr	r3, [sp, #20]
    66ee:	62ab      	str	r3, [r5, #40]	; 0x28
    66f0:	9b06      	ldr	r3, [sp, #24]
    66f2:	62ab      	str	r3, [r5, #40]	; 0x28
    66f4:	2005      	movs	r0, #5
    66f6:	47b8      	blx	r7
    66f8:	f06f 0001 	mvn.w	r0, #1
    66fc:	e7e3      	b.n	66c6 <I2C_setEXPANDER+0x2fa>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    66fe:	4d19      	ldr	r5, [pc, #100]	; (6764 <I2C_setEXPANDER+0x398>)
    6700:	9b00      	ldr	r3, [sp, #0]
    6702:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    6706:	619c      	str	r4, [r3, #24]
	I2C_WAITACKOP(-3);
    6708:	2005      	movs	r0, #5
    670a:	47b8      	blx	r7
    670c:	9b03      	ldr	r3, [sp, #12]
    670e:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    6712:	f8c5 a018 	str.w	sl, [r5, #24]
    6716:	2005      	movs	r0, #5
    6718:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    671a:	f8c5 a008 	str.w	sl, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    671e:	9b05      	ldr	r3, [sp, #20]
    6720:	62ab      	str	r3, [r5, #40]	; 0x28
    6722:	9b06      	ldr	r3, [sp, #24]
    6724:	62ab      	str	r3, [r5, #40]	; 0x28
    6726:	2005      	movs	r0, #5
    6728:	47b8      	blx	r7
    672a:	f06f 0002 	mvn.w	r0, #2
    672e:	e7ca      	b.n	66c6 <I2C_setEXPANDER+0x2fa>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6730:	4d0c      	ldr	r5, [pc, #48]	; (6764 <I2C_setEXPANDER+0x398>)
    6732:	9b00      	ldr	r3, [sp, #0]
    6734:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    6738:	f8c3 8018 	str.w	r8, [r3, #24]
	I2C_WAITACKOP(-4);
    673c:	2005      	movs	r0, #5
    673e:	47b8      	blx	r7
    6740:	9b03      	ldr	r3, [sp, #12]
    6742:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    6746:	f8c5 a018 	str.w	sl, [r5, #24]
    674a:	2005      	movs	r0, #5
    674c:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    674e:	f8c5 a008 	str.w	sl, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6752:	9b05      	ldr	r3, [sp, #20]
    6754:	62ab      	str	r3, [r5, #40]	; 0x28
    6756:	9b06      	ldr	r3, [sp, #24]
    6758:	62ab      	str	r3, [r5, #40]	; 0x28
    675a:	2005      	movs	r0, #5
    675c:	47b8      	blx	r7
    675e:	f06f 0003 	mvn.w	r0, #3
    6762:	e7b0      	b.n	66c6 <I2C_setEXPANDER+0x2fa>
    6764:	41008000 	.word	0x41008000

00006768 <I2C_readEXPANDER>:

{
	uint8_t     		i2csda, i2cclk;
	unsigned char		forloop;

    if (!inputs) {
    6768:	2a00      	cmp	r2, #0
    676a:	f000 8208 	beq.w	6b7e <I2C_readEXPANDER+0x416>
{
    676e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6772:	b08f      	sub	sp, #60	; 0x3c
    6774:	9205      	str	r2, [sp, #20]
    6776:	f001 041f 	and.w	r4, r1, #31
    677a:	2301      	movs	r3, #1
    677c:	fa03 f404 	lsl.w	r4, r3, r4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6780:	094a      	lsrs	r2, r1, #5
    6782:	4dab      	ldr	r5, [pc, #684]	; (6a30 <I2C_readEXPANDER+0x2c8>)
    6784:	9202      	str	r2, [sp, #8]
    6786:	eb05 17c2 	add.w	r7, r5, r2, lsl #7
    678a:	61bc      	str	r4, [r7, #24]
    678c:	0942      	lsrs	r2, r0, #5
    678e:	9203      	str	r2, [sp, #12]
    6790:	f000 001f 	and.w	r0, r0, #31
    6794:	fa03 fb00 	lsl.w	fp, r3, r0
    6798:	9201      	str	r2, [sp, #4]
    679a:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    679e:	f8c5 b018 	str.w	fp, [r5, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    67a2:	f8c5 b008 	str.w	fp, [r5, #8]
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    67a6:	fa1f f38b 	uxth.w	r3, fp
    67aa:	9304      	str	r3, [sp, #16]
    67ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    67b0:	9306      	str	r3, [sp, #24]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    67b2:	62ab      	str	r3, [r5, #40]	; 0x28
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    67b4:	ea4f 431b 	mov.w	r3, fp, lsr #16
    67b8:	9309      	str	r3, [sp, #36]	; 0x24
		hri_port_write_WRCONFIG_reg(
    67ba:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    67be:	9307      	str	r3, [sp, #28]
    67c0:	62ab      	str	r3, [r5, #40]	; 0x28
		return -1;	
	}

	/* Open an I2C channel, send address 0x41, index register 0x00 then read the input value */
	I2C_OPEN(sda, clk);
	I2C_START(-2);
    67c2:	2005      	movs	r0, #5
    67c4:	4e9b      	ldr	r6, [pc, #620]	; (6a34 <I2C_readEXPANDER+0x2cc>)
    67c6:	47b0      	blx	r6
    67c8:	2005      	movs	r0, #5
    67ca:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    67cc:	f8c5 b014 	str.w	fp, [r5, #20]
    67d0:	2005      	movs	r0, #5
    67d2:	47b0      	blx	r6
    67d4:	617c      	str	r4, [r7, #20]
    67d6:	2005      	movs	r0, #5
    67d8:	47b0      	blx	r6
    67da:	2707      	movs	r7, #7
	I2C_SENDADDR(0x41, forloop);
    67dc:	2640      	movs	r6, #64	; 0x40
    67de:	f8df 9250 	ldr.w	r9, [pc, #592]	; 6a30 <I2C_readEXPANDER+0x2c8>
    67e2:	9a01      	ldr	r2, [sp, #4]
    67e4:	eb09 13c2 	add.w	r3, r9, r2, lsl #7
    67e8:	9300      	str	r3, [sp, #0]
    67ea:	4d92      	ldr	r5, [pc, #584]	; (6a34 <I2C_readEXPANDER+0x2cc>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    67ec:	9902      	ldr	r1, [sp, #8]
    67ee:	fa01 fa07 	lsl.w	sl, r1, r7
    67f2:	f016 0f41 	tst.w	r6, #65	; 0x41
    67f6:	9b00      	ldr	r3, [sp, #0]
    67f8:	bf14      	ite	ne
    67fa:	f8c3 b018 	strne.w	fp, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    67fe:	f8c3 b014 	streq.w	fp, [r3, #20]
    6802:	2005      	movs	r0, #5
    6804:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6806:	eb09 080a 	add.w	r8, r9, sl
    680a:	f8c8 4018 	str.w	r4, [r8, #24]
    680e:	2005      	movs	r0, #5
    6810:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6812:	f8c8 4014 	str.w	r4, [r8, #20]
    6816:	2005      	movs	r0, #5
    6818:	47a8      	blx	r5
    681a:	0876      	lsrs	r6, r6, #1
    681c:	3f01      	subs	r7, #1
    681e:	d1e8      	bne.n	67f2 <I2C_readEXPANDER+0x8a>
    6820:	4d83      	ldr	r5, [pc, #524]	; (6a30 <I2C_readEXPANDER+0x2c8>)
    6822:	9b03      	ldr	r3, [sp, #12]
    6824:	eb05 16c3 	add.w	r6, r5, r3, lsl #7
    6828:	f8c6 b014 	str.w	fp, [r6, #20]
	I2C_WRITE();
    682c:	2005      	movs	r0, #5
    682e:	4f81      	ldr	r7, [pc, #516]	; (6a34 <I2C_readEXPANDER+0x2cc>)
    6830:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6832:	9a02      	ldr	r2, [sp, #8]
    6834:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    6838:	61ac      	str	r4, [r5, #24]
    683a:	2005      	movs	r0, #5
    683c:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    683e:	616c      	str	r4, [r5, #20]
    6840:	2005      	movs	r0, #5
    6842:	47b8      	blx	r7
    6844:	9b03      	ldr	r3, [sp, #12]
    6846:	01db      	lsls	r3, r3, #7
    6848:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    684c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    6850:	9300      	str	r3, [sp, #0]
    6852:	f8c3 b004 	str.w	fp, [r3, #4]
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    6856:	9904      	ldr	r1, [sp, #16]
    6858:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    685c:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
    6860:	9108      	str	r1, [sp, #32]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6862:	62b1      	str	r1, [r6, #40]	; 0x28
		hri_port_write_WRCONFIG_reg(PORT,
    6864:	9909      	ldr	r1, [sp, #36]	; 0x24
    6866:	f041 4140 	orr.w	r1, r1, #3221225472	; 0xc0000000
    686a:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
    686e:	9109      	str	r1, [sp, #36]	; 0x24
    6870:	62b1      	str	r1, [r6, #40]	; 0x28
	I2C_WAITACKOP(-3);
    6872:	2005      	movs	r0, #5
    6874:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6876:	61ac      	str	r4, [r5, #24]
    6878:	2005      	movs	r0, #5
    687a:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    687c:	a80a      	add	r0, sp, #40	; 0x28
    687e:	4b6e      	ldr	r3, [pc, #440]	; (6a38 <I2C_readEXPANDER+0x2d0>)
    6880:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    6882:	9a00      	ldr	r2, [sp, #0]
    6884:	6812      	ldr	r2, [r2, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    6886:	6a33      	ldr	r3, [r6, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    6888:	6935      	ldr	r5, [r6, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    688a:	405d      	eors	r5, r3
    688c:	4015      	ands	r5, r2
    688e:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    6890:	a80a      	add	r0, sp, #40	; 0x28
    6892:	4b6a      	ldr	r3, [pc, #424]	; (6a3c <I2C_readEXPANDER+0x2d4>)
    6894:	4798      	blx	r3
    6896:	ea1b 0f05 	tst.w	fp, r5
    689a:	f040 80e7 	bne.w	6a6c <I2C_readEXPANDER+0x304>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    689e:	4d64      	ldr	r5, [pc, #400]	; (6a30 <I2C_readEXPANDER+0x2c8>)
    68a0:	9f02      	ldr	r7, [sp, #8]
    68a2:	eb05 13c7 	add.w	r3, r5, r7, lsl #7
    68a6:	615c      	str	r4, [r3, #20]
    68a8:	2005      	movs	r0, #5
    68aa:	4e62      	ldr	r6, [pc, #392]	; (6a34 <I2C_readEXPANDER+0x2cc>)
    68ac:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    68ae:	9b03      	ldr	r3, [sp, #12]
    68b0:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    68b4:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    68b8:	9b06      	ldr	r3, [sp, #24]
    68ba:	62ab      	str	r3, [r5, #40]	; 0x28
    68bc:	9b07      	ldr	r3, [sp, #28]
    68be:	62ab      	str	r3, [r5, #40]	; 0x28
    68c0:	2005      	movs	r0, #5
    68c2:	47b0      	blx	r6
    68c4:	2608      	movs	r6, #8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    68c6:	f8df 8168 	ldr.w	r8, [pc, #360]	; 6a30 <I2C_readEXPANDER+0x2c8>
    68ca:	9b01      	ldr	r3, [sp, #4]
    68cc:	eb08 1ac3 	add.w	sl, r8, r3, lsl #7
	I2C_SENDDATA(0x00, forloop);
    68d0:	4d58      	ldr	r5, [pc, #352]	; (6a34 <I2C_readEXPANDER+0x2cc>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    68d2:	ea4f 19c7 	mov.w	r9, r7, lsl #7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    68d6:	f8ca b014 	str.w	fp, [sl, #20]
    68da:	2005      	movs	r0, #5
    68dc:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    68de:	eb08 0709 	add.w	r7, r8, r9
    68e2:	61bc      	str	r4, [r7, #24]
    68e4:	2005      	movs	r0, #5
    68e6:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    68e8:	617c      	str	r4, [r7, #20]
    68ea:	2005      	movs	r0, #5
    68ec:	47a8      	blx	r5
    68ee:	3e01      	subs	r6, #1
    68f0:	d1f1      	bne.n	68d6 <I2C_readEXPANDER+0x16e>
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    68f2:	9b00      	ldr	r3, [sp, #0]
    68f4:	f8c3 b004 	str.w	fp, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    68f8:	4e4d      	ldr	r6, [pc, #308]	; (6a30 <I2C_readEXPANDER+0x2c8>)
    68fa:	9a03      	ldr	r2, [sp, #12]
    68fc:	eb06 15c2 	add.w	r5, r6, r2, lsl #7
    6900:	9a08      	ldr	r2, [sp, #32]
    6902:	62aa      	str	r2, [r5, #40]	; 0x28
    6904:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6906:	62aa      	str	r2, [r5, #40]	; 0x28
	I2C_WAITACKOP(-4);
    6908:	2005      	movs	r0, #5
    690a:	4f4a      	ldr	r7, [pc, #296]	; (6a34 <I2C_readEXPANDER+0x2cc>)
    690c:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    690e:	9a02      	ldr	r2, [sp, #8]
    6910:	eb06 16c2 	add.w	r6, r6, r2, lsl #7
    6914:	61b4      	str	r4, [r6, #24]
    6916:	2005      	movs	r0, #5
    6918:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    691a:	a80b      	add	r0, sp, #44	; 0x2c
    691c:	4b46      	ldr	r3, [pc, #280]	; (6a38 <I2C_readEXPANDER+0x2d0>)
    691e:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    6920:	9b00      	ldr	r3, [sp, #0]
    6922:	681a      	ldr	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    6924:	6a2b      	ldr	r3, [r5, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    6926:	692d      	ldr	r5, [r5, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    6928:	405d      	eors	r5, r3
    692a:	4015      	ands	r5, r2
    692c:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    692e:	a80b      	add	r0, sp, #44	; 0x2c
    6930:	4b42      	ldr	r3, [pc, #264]	; (6a3c <I2C_readEXPANDER+0x2d4>)
    6932:	4798      	blx	r3
    6934:	ea1b 0f05 	tst.w	fp, r5
    6938:	f040 80b1 	bne.w	6a9e <I2C_readEXPANDER+0x336>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    693c:	4d3c      	ldr	r5, [pc, #240]	; (6a30 <I2C_readEXPANDER+0x2c8>)
    693e:	9b02      	ldr	r3, [sp, #8]
    6940:	eb05 17c3 	add.w	r7, r5, r3, lsl #7
    6944:	617c      	str	r4, [r7, #20]
    6946:	2005      	movs	r0, #5
    6948:	4e3a      	ldr	r6, [pc, #232]	; (6a34 <I2C_readEXPANDER+0x2cc>)
    694a:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    694c:	9a03      	ldr	r2, [sp, #12]
    694e:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    6952:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6956:	9a06      	ldr	r2, [sp, #24]
    6958:	62aa      	str	r2, [r5, #40]	; 0x28
    695a:	9907      	ldr	r1, [sp, #28]
    695c:	62a9      	str	r1, [r5, #40]	; 0x28
    695e:	2005      	movs	r0, #5
    6960:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6962:	61bc      	str	r4, [r7, #24]
    6964:	f8c5 b018 	str.w	fp, [r5, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6968:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    696c:	9a06      	ldr	r2, [sp, #24]
    696e:	62aa      	str	r2, [r5, #40]	; 0x28
    6970:	9907      	ldr	r1, [sp, #28]
    6972:	62a9      	str	r1, [r5, #40]	; 0x28
	
	/* Then restart comms and send address 0x40 */
	I2C_START(-5);
    6974:	2005      	movs	r0, #5
    6976:	47b0      	blx	r6
    6978:	2005      	movs	r0, #5
    697a:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    697c:	f8c5 b014 	str.w	fp, [r5, #20]
    6980:	2005      	movs	r0, #5
    6982:	47b0      	blx	r6
    6984:	617c      	str	r4, [r7, #20]
    6986:	2005      	movs	r0, #5
    6988:	47b0      	blx	r6
    698a:	2707      	movs	r7, #7
	I2C_SENDADDR(0x41, forloop);
    698c:	2640      	movs	r6, #64	; 0x40
    698e:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 6a30 <I2C_readEXPANDER+0x2c8>
    6992:	9a01      	ldr	r2, [sp, #4]
    6994:	eb09 12c2 	add.w	r2, r9, r2, lsl #7
    6998:	9204      	str	r2, [sp, #16]
    699a:	4d26      	ldr	r5, [pc, #152]	; (6a34 <I2C_readEXPANDER+0x2cc>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    699c:	9b02      	ldr	r3, [sp, #8]
    699e:	fa03 fa07 	lsl.w	sl, r3, r7
    69a2:	f016 0f41 	tst.w	r6, #65	; 0x41
    69a6:	9b04      	ldr	r3, [sp, #16]
    69a8:	bf14      	ite	ne
    69aa:	f8c3 b018 	strne.w	fp, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    69ae:	f8c3 b014 	streq.w	fp, [r3, #20]
    69b2:	2005      	movs	r0, #5
    69b4:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    69b6:	eb09 080a 	add.w	r8, r9, sl
    69ba:	f8c8 4018 	str.w	r4, [r8, #24]
    69be:	2005      	movs	r0, #5
    69c0:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    69c2:	f8c8 4014 	str.w	r4, [r8, #20]
    69c6:	2005      	movs	r0, #5
    69c8:	47a8      	blx	r5
    69ca:	0876      	lsrs	r6, r6, #1
    69cc:	3f01      	subs	r7, #1
    69ce:	d1e8      	bne.n	69a2 <I2C_readEXPANDER+0x23a>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    69d0:	4d17      	ldr	r5, [pc, #92]	; (6a30 <I2C_readEXPANDER+0x2c8>)
    69d2:	9b03      	ldr	r3, [sp, #12]
    69d4:	eb05 16c3 	add.w	r6, r5, r3, lsl #7
    69d8:	f8c6 b018 	str.w	fp, [r6, #24]
	I2C_READ();
    69dc:	2005      	movs	r0, #5
    69de:	4f15      	ldr	r7, [pc, #84]	; (6a34 <I2C_readEXPANDER+0x2cc>)
    69e0:	47b8      	blx	r7
    69e2:	9b02      	ldr	r3, [sp, #8]
    69e4:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    69e8:	61ac      	str	r4, [r5, #24]
    69ea:	2005      	movs	r0, #5
    69ec:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    69ee:	616c      	str	r4, [r5, #20]
    69f0:	2005      	movs	r0, #5
    69f2:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    69f4:	9b00      	ldr	r3, [sp, #0]
    69f6:	f8c3 b004 	str.w	fp, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    69fa:	9a08      	ldr	r2, [sp, #32]
    69fc:	62b2      	str	r2, [r6, #40]	; 0x28
    69fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6a00:	62b2      	str	r2, [r6, #40]	; 0x28
	I2C_WAITACKIP(-6);
    6a02:	2005      	movs	r0, #5
    6a04:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6a06:	61ac      	str	r4, [r5, #24]
    6a08:	2005      	movs	r0, #5
    6a0a:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    6a0c:	a80c      	add	r0, sp, #48	; 0x30
    6a0e:	4b0a      	ldr	r3, [pc, #40]	; (6a38 <I2C_readEXPANDER+0x2d0>)
    6a10:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    6a12:	9b00      	ldr	r3, [sp, #0]
    6a14:	681a      	ldr	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    6a16:	6a33      	ldr	r3, [r6, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    6a18:	6935      	ldr	r5, [r6, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    6a1a:	405d      	eors	r5, r3
    6a1c:	4015      	ands	r5, r2
    6a1e:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    6a20:	a80c      	add	r0, sp, #48	; 0x30
    6a22:	4b06      	ldr	r3, [pc, #24]	; (6a3c <I2C_readEXPANDER+0x2d4>)
    6a24:	4798      	blx	r3
    6a26:	ea1b 0f05 	tst.w	fp, r5
    6a2a:	d151      	bne.n	6ad0 <I2C_readEXPANDER+0x368>
    6a2c:	e008      	b.n	6a40 <I2C_readEXPANDER+0x2d8>
    6a2e:	bf00      	nop
    6a30:	41008000 	.word	0x41008000
    6a34:	0000152d 	.word	0x0000152d
    6a38:	000014cd 	.word	0x000014cd
    6a3c:	000014db 	.word	0x000014db
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6a40:	9d02      	ldr	r5, [sp, #8]
    6a42:	01eb      	lsls	r3, r5, #7
    6a44:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    6a48:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    6a4c:	615c      	str	r4, [r3, #20]
    6a4e:	2005      	movs	r0, #5
    6a50:	4b4c      	ldr	r3, [pc, #304]	; (6b84 <I2C_readEXPANDER+0x41c>)
    6a52:	4798      	blx	r3

	*inputs = 0;
    6a54:	2300      	movs	r3, #0
    6a56:	9a05      	ldr	r2, [sp, #20]
    6a58:	7013      	strb	r3, [r2, #0]
    6a5a:	2608      	movs	r6, #8

	/* Beginning of the for-loops that captures data and read the lower 8-bits of the input values */
	for (forloop = 0x80; forloop > 0;) {
    6a5c:	2780      	movs	r7, #128	; 0x80
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6a5e:	f8df a128 	ldr.w	sl, [pc, #296]	; 6b88 <I2C_readEXPANDER+0x420>
    6a62:	eb0a 19c5 	add.w	r9, sl, r5, lsl #7
		I2C_clockhi();
    6a66:	f8df 811c 	ldr.w	r8, [pc, #284]	; 6b84 <I2C_readEXPANDER+0x41c>
    6a6a:	e051      	b.n	6b10 <I2C_readEXPANDER+0x3a8>
    6a6c:	4d46      	ldr	r5, [pc, #280]	; (6b88 <I2C_readEXPANDER+0x420>)
    6a6e:	9b02      	ldr	r3, [sp, #8]
    6a70:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    6a74:	619c      	str	r4, [r3, #24]
	I2C_WAITACKOP(-3);
    6a76:	2005      	movs	r0, #5
    6a78:	47b8      	blx	r7
    6a7a:	9b03      	ldr	r3, [sp, #12]
    6a7c:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    6a80:	f8c5 b018 	str.w	fp, [r5, #24]
    6a84:	2005      	movs	r0, #5
    6a86:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6a88:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6a8c:	9b06      	ldr	r3, [sp, #24]
    6a8e:	62ab      	str	r3, [r5, #40]	; 0x28
    6a90:	9b07      	ldr	r3, [sp, #28]
    6a92:	62ab      	str	r3, [r5, #40]	; 0x28
    6a94:	2005      	movs	r0, #5
    6a96:	47b8      	blx	r7
    6a98:	f06f 0002 	mvn.w	r0, #2
    6a9c:	e06c      	b.n	6b78 <I2C_readEXPANDER+0x410>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6a9e:	4d3a      	ldr	r5, [pc, #232]	; (6b88 <I2C_readEXPANDER+0x420>)
    6aa0:	9b02      	ldr	r3, [sp, #8]
    6aa2:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    6aa6:	619c      	str	r4, [r3, #24]
	I2C_WAITACKOP(-4);
    6aa8:	2005      	movs	r0, #5
    6aaa:	47b8      	blx	r7
    6aac:	9b03      	ldr	r3, [sp, #12]
    6aae:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    6ab2:	f8c5 b018 	str.w	fp, [r5, #24]
    6ab6:	2005      	movs	r0, #5
    6ab8:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6aba:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6abe:	9b06      	ldr	r3, [sp, #24]
    6ac0:	62ab      	str	r3, [r5, #40]	; 0x28
    6ac2:	9b07      	ldr	r3, [sp, #28]
    6ac4:	62ab      	str	r3, [r5, #40]	; 0x28
    6ac6:	2005      	movs	r0, #5
    6ac8:	47b8      	blx	r7
    6aca:	f06f 0003 	mvn.w	r0, #3
    6ace:	e053      	b.n	6b78 <I2C_readEXPANDER+0x410>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6ad0:	4d2d      	ldr	r5, [pc, #180]	; (6b88 <I2C_readEXPANDER+0x420>)
    6ad2:	9b02      	ldr	r3, [sp, #8]
    6ad4:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    6ad8:	619c      	str	r4, [r3, #24]
	I2C_WAITACKIP(-6);
    6ada:	2005      	movs	r0, #5
    6adc:	47b8      	blx	r7
    6ade:	9b03      	ldr	r3, [sp, #12]
    6ae0:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    6ae4:	f8c5 b018 	str.w	fp, [r5, #24]
    6ae8:	2005      	movs	r0, #5
    6aea:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6aec:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6af0:	9b06      	ldr	r3, [sp, #24]
    6af2:	62ab      	str	r3, [r5, #40]	; 0x28
    6af4:	9b07      	ldr	r3, [sp, #28]
    6af6:	62ab      	str	r3, [r5, #40]	; 0x28
    6af8:	2005      	movs	r0, #5
    6afa:	47b8      	blx	r7
    6afc:	f06f 0005 	mvn.w	r0, #5
    6b00:	e03a      	b.n	6b78 <I2C_readEXPANDER+0x410>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6b02:	f8c9 4014 	str.w	r4, [r9, #20]
		if (gpio_get_pin_level(i2csda)) {
			(*inputs) |= forloop;
		}

		I2C_clocklo();
    6b06:	2005      	movs	r0, #5
    6b08:	47c0      	blx	r8
		forloop = forloop / 2;
    6b0a:	087f      	lsrs	r7, r7, #1
	for (forloop = 0x80; forloop > 0;) {
    6b0c:	3e01      	subs	r6, #1
    6b0e:	d01b      	beq.n	6b48 <I2C_readEXPANDER+0x3e0>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6b10:	f8c9 4018 	str.w	r4, [r9, #24]
		I2C_clockhi();
    6b14:	2005      	movs	r0, #5
    6b16:	47c0      	blx	r8
	CRITICAL_SECTION_ENTER();
    6b18:	a80d      	add	r0, sp, #52	; 0x34
    6b1a:	4b1c      	ldr	r3, [pc, #112]	; (6b8c <I2C_readEXPANDER+0x424>)
    6b1c:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    6b1e:	9b00      	ldr	r3, [sp, #0]
    6b20:	6819      	ldr	r1, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    6b22:	9b01      	ldr	r3, [sp, #4]
    6b24:	eb0a 12c3 	add.w	r2, sl, r3, lsl #7
    6b28:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    6b2a:	6915      	ldr	r5, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    6b2c:	405d      	eors	r5, r3
    6b2e:	400d      	ands	r5, r1
    6b30:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    6b32:	a80d      	add	r0, sp, #52	; 0x34
    6b34:	4b16      	ldr	r3, [pc, #88]	; (6b90 <I2C_readEXPANDER+0x428>)
    6b36:	4798      	blx	r3
		if (gpio_get_pin_level(i2csda)) {
    6b38:	ea1b 0f05 	tst.w	fp, r5
    6b3c:	d0e1      	beq.n	6b02 <I2C_readEXPANDER+0x39a>
			(*inputs) |= forloop;
    6b3e:	9a05      	ldr	r2, [sp, #20]
    6b40:	7813      	ldrb	r3, [r2, #0]
    6b42:	433b      	orrs	r3, r7
    6b44:	7013      	strb	r3, [r2, #0]
    6b46:	e7dc      	b.n	6b02 <I2C_readEXPANDER+0x39a>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6b48:	4d0f      	ldr	r5, [pc, #60]	; (6b88 <I2C_readEXPANDER+0x420>)
    6b4a:	9b02      	ldr	r3, [sp, #8]
    6b4c:	eb05 11c3 	add.w	r1, r5, r3, lsl #7
    6b50:	618c      	str	r4, [r1, #24]
	}

	I2C_STOP();
    6b52:	2005      	movs	r0, #5
    6b54:	4e0b      	ldr	r6, [pc, #44]	; (6b84 <I2C_readEXPANDER+0x41c>)
    6b56:	47b0      	blx	r6
    6b58:	9b03      	ldr	r3, [sp, #12]
    6b5a:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    6b5e:	f8c5 b018 	str.w	fp, [r5, #24]
    6b62:	2005      	movs	r0, #5
    6b64:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6b66:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6b6a:	9b06      	ldr	r3, [sp, #24]
    6b6c:	62ab      	str	r3, [r5, #40]	; 0x28
    6b6e:	9b07      	ldr	r3, [sp, #28]
    6b70:	62ab      	str	r3, [r5, #40]	; 0x28
    6b72:	2005      	movs	r0, #5
    6b74:	47b0      	blx	r6
	I2C_CLOSE();
	/* If successful, and code execution got here, the close the I2C channel */
	
	return 0;
    6b76:	2000      	movs	r0, #0
}
    6b78:	b00f      	add	sp, #60	; 0x3c
    6b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -1;	
    6b7e:	f04f 30ff 	mov.w	r0, #4294967295
    6b82:	4770      	bx	lr
    6b84:	0000152d 	.word	0x0000152d
    6b88:	41008000 	.word	0x41008000
    6b8c:	000014cd 	.word	0x000014cd
    6b90:	000014db 	.word	0x000014db

00006b94 <I2C_setGAIN>:
// * CALLED BY:			  main()                                                                                                       *
// * CALLS:		          No function. ALL macros defined in this function file.                                                       *
// * --------------------------------------------------------------------------------------------------------------------------------- *
int I2C_setGAIN(uint8_t sda,  uint8_t clk, unsigned char dac)

{
    6b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6b98:	b08d      	sub	sp, #52	; 0x34
    6b9a:	f001 041f 	and.w	r4, r1, #31
    6b9e:	2501      	movs	r5, #1
    6ba0:	fa05 f404 	lsl.w	r4, r5, r4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6ba4:	094b      	lsrs	r3, r1, #5
    6ba6:	4ea7      	ldr	r6, [pc, #668]	; (6e44 <I2C_setGAIN+0x2b0>)
    6ba8:	9300      	str	r3, [sp, #0]
    6baa:	eb06 18c3 	add.w	r8, r6, r3, lsl #7
    6bae:	f8c8 4018 	str.w	r4, [r8, #24]
    6bb2:	0943      	lsrs	r3, r0, #5
    6bb4:	9302      	str	r3, [sp, #8]
    6bb6:	f000 001f 	and.w	r0, r0, #31
    6bba:	4085      	lsls	r5, r0
    6bbc:	9305      	str	r3, [sp, #20]
    6bbe:	eb06 16c3 	add.w	r6, r6, r3, lsl #7
    6bc2:	61b5      	str	r5, [r6, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6bc4:	60b5      	str	r5, [r6, #8]
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    6bc6:	b2a9      	uxth	r1, r5
    6bc8:	9106      	str	r1, [sp, #24]
    6bca:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    6bce:	9103      	str	r1, [sp, #12]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6bd0:	62b1      	str	r1, [r6, #40]	; 0x28
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    6bd2:	0c29      	lsrs	r1, r5, #16
    6bd4:	9107      	str	r1, [sp, #28]
		hri_port_write_WRCONFIG_reg(
    6bd6:	f041 4140 	orr.w	r1, r1, #3221225472	; 0xc0000000
    6bda:	9104      	str	r1, [sp, #16]
    6bdc:	62b1      	str	r1, [r6, #40]	; 0x28
  	uint8_t     		i2csda, i2cclk;
    unsigned char		forloop;

	/* Open an I2C channel, send address 0x60, index register 0x00 then send the 8-bit "dac" value */
	I2C_OPEN(sda, clk);
    I2C_START(-1);
    6bde:	2005      	movs	r0, #5
    6be0:	4f99      	ldr	r7, [pc, #612]	; (6e48 <I2C_setGAIN+0x2b4>)
    6be2:	47b8      	blx	r7
    6be4:	2005      	movs	r0, #5
    6be6:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6be8:	6175      	str	r5, [r6, #20]
    6bea:	2005      	movs	r0, #5
    6bec:	47b8      	blx	r7
    6bee:	f8c8 4014 	str.w	r4, [r8, #20]
    6bf2:	2005      	movs	r0, #5
    6bf4:	47b8      	blx	r7
    6bf6:	f04f 0a07 	mov.w	sl, #7
    I2C_SENDADDR(0x60, forloop);
    6bfa:	2740      	movs	r7, #64	; 0x40
    6bfc:	f8df 9244 	ldr.w	r9, [pc, #580]	; 6e44 <I2C_setGAIN+0x2b0>
    6c00:	9b05      	ldr	r3, [sp, #20]
    6c02:	eb09 1bc3 	add.w	fp, r9, r3, lsl #7
    6c06:	4e90      	ldr	r6, [pc, #576]	; (6e48 <I2C_setGAIN+0x2b4>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6c08:	9a00      	ldr	r2, [sp, #0]
    6c0a:	fa02 f30a 	lsl.w	r3, r2, sl
    6c0e:	9301      	str	r3, [sp, #4]
    6c10:	46a8      	mov	r8, r5
    6c12:	f017 0f60 	tst.w	r7, #96	; 0x60
    6c16:	bf14      	ite	ne
    6c18:	f8cb 8018 	strne.w	r8, [fp, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6c1c:	f8cb 8014 	streq.w	r8, [fp, #20]
    6c20:	2005      	movs	r0, #5
    6c22:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6c24:	9b01      	ldr	r3, [sp, #4]
    6c26:	eb09 0503 	add.w	r5, r9, r3
    6c2a:	61ac      	str	r4, [r5, #24]
    6c2c:	2005      	movs	r0, #5
    6c2e:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6c30:	616c      	str	r4, [r5, #20]
    6c32:	2005      	movs	r0, #5
    6c34:	47b0      	blx	r6
    6c36:	087f      	lsrs	r7, r7, #1
    6c38:	f1ba 0a01 	subs.w	sl, sl, #1
    6c3c:	d1e9      	bne.n	6c12 <I2C_setGAIN+0x7e>
    6c3e:	4645      	mov	r5, r8
    6c40:	4e80      	ldr	r6, [pc, #512]	; (6e44 <I2C_setGAIN+0x2b0>)
    6c42:	9b02      	ldr	r3, [sp, #8]
    6c44:	eb06 17c3 	add.w	r7, r6, r3, lsl #7
    6c48:	f8c7 8014 	str.w	r8, [r7, #20]
    I2C_WRITE();
    6c4c:	2005      	movs	r0, #5
    6c4e:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 6e48 <I2C_setGAIN+0x2b4>
    6c52:	47c0      	blx	r8
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6c54:	9a00      	ldr	r2, [sp, #0]
    6c56:	eb06 16c2 	add.w	r6, r6, r2, lsl #7
    6c5a:	61b4      	str	r4, [r6, #24]
    6c5c:	2005      	movs	r0, #5
    6c5e:	47c0      	blx	r8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6c60:	6174      	str	r4, [r6, #20]
    6c62:	2005      	movs	r0, #5
    6c64:	47c0      	blx	r8
    6c66:	9b02      	ldr	r3, [sp, #8]
    6c68:	01db      	lsls	r3, r3, #7
    6c6a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    6c6e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    6c72:	9301      	str	r3, [sp, #4]
    6c74:	605d      	str	r5, [r3, #4]
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    6c76:	9906      	ldr	r1, [sp, #24]
    6c78:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    6c7c:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
    6c80:	9106      	str	r1, [sp, #24]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6c82:	62b9      	str	r1, [r7, #40]	; 0x28
		hri_port_write_WRCONFIG_reg(PORT,
    6c84:	9907      	ldr	r1, [sp, #28]
    6c86:	f041 4140 	orr.w	r1, r1, #3221225472	; 0xc0000000
    6c8a:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
    6c8e:	9107      	str	r1, [sp, #28]
    6c90:	62b9      	str	r1, [r7, #40]	; 0x28
    I2C_WAITACKOP(-2);
    6c92:	2005      	movs	r0, #5
    6c94:	47c0      	blx	r8
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6c96:	61b4      	str	r4, [r6, #24]
    6c98:	2005      	movs	r0, #5
    6c9a:	47c0      	blx	r8
	CRITICAL_SECTION_ENTER();
    6c9c:	a809      	add	r0, sp, #36	; 0x24
    6c9e:	4b6b      	ldr	r3, [pc, #428]	; (6e4c <I2C_setGAIN+0x2b8>)
    6ca0:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    6ca2:	9a01      	ldr	r2, [sp, #4]
    6ca4:	6812      	ldr	r2, [r2, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    6ca6:	6a3b      	ldr	r3, [r7, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    6ca8:	693e      	ldr	r6, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    6caa:	405e      	eors	r6, r3
    6cac:	4016      	ands	r6, r2
    6cae:	405e      	eors	r6, r3
	CRITICAL_SECTION_LEAVE();
    6cb0:	a809      	add	r0, sp, #36	; 0x24
    6cb2:	4b67      	ldr	r3, [pc, #412]	; (6e50 <I2C_setGAIN+0x2bc>)
    6cb4:	4798      	blx	r3
    6cb6:	4235      	tst	r5, r6
    6cb8:	f040 80cc 	bne.w	6e54 <I2C_setGAIN+0x2c0>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6cbc:	4e61      	ldr	r6, [pc, #388]	; (6e44 <I2C_setGAIN+0x2b0>)
    6cbe:	9b00      	ldr	r3, [sp, #0]
    6cc0:	eb06 13c3 	add.w	r3, r6, r3, lsl #7
    6cc4:	615c      	str	r4, [r3, #20]
    6cc6:	2005      	movs	r0, #5
    6cc8:	4f5f      	ldr	r7, [pc, #380]	; (6e48 <I2C_setGAIN+0x2b4>)
    6cca:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6ccc:	9a02      	ldr	r2, [sp, #8]
    6cce:	eb06 16c2 	add.w	r6, r6, r2, lsl #7
    6cd2:	60b5      	str	r5, [r6, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6cd4:	9a03      	ldr	r2, [sp, #12]
    6cd6:	62b2      	str	r2, [r6, #40]	; 0x28
    6cd8:	9a04      	ldr	r2, [sp, #16]
    6cda:	62b2      	str	r2, [r6, #40]	; 0x28
    6cdc:	2005      	movs	r0, #5
    6cde:	47b8      	blx	r7
    6ce0:	2708      	movs	r7, #8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6ce2:	f8df 9160 	ldr.w	r9, [pc, #352]	; 6e44 <I2C_setGAIN+0x2b0>
    6ce6:	9a05      	ldr	r2, [sp, #20]
    6ce8:	eb09 1bc2 	add.w	fp, r9, r2, lsl #7
    I2C_SENDDATA(0x00, forloop);
    6cec:	4e56      	ldr	r6, [pc, #344]	; (6e48 <I2C_setGAIN+0x2b4>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6cee:	9b00      	ldr	r3, [sp, #0]
    6cf0:	ea4f 1ac3 	mov.w	sl, r3, lsl #7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6cf4:	f8cb 5014 	str.w	r5, [fp, #20]
    6cf8:	2005      	movs	r0, #5
    6cfa:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6cfc:	eb09 080a 	add.w	r8, r9, sl
    6d00:	f8c8 4018 	str.w	r4, [r8, #24]
    6d04:	2005      	movs	r0, #5
    6d06:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6d08:	f8c8 4014 	str.w	r4, [r8, #20]
    6d0c:	2005      	movs	r0, #5
    6d0e:	47b0      	blx	r6
    6d10:	3f01      	subs	r7, #1
    6d12:	d1ef      	bne.n	6cf4 <I2C_setGAIN+0x160>
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    6d14:	9b01      	ldr	r3, [sp, #4]
    6d16:	605d      	str	r5, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6d18:	4f4a      	ldr	r7, [pc, #296]	; (6e44 <I2C_setGAIN+0x2b0>)
    6d1a:	9a02      	ldr	r2, [sp, #8]
    6d1c:	eb07 16c2 	add.w	r6, r7, r2, lsl #7
    6d20:	9a06      	ldr	r2, [sp, #24]
    6d22:	62b2      	str	r2, [r6, #40]	; 0x28
    6d24:	9a07      	ldr	r2, [sp, #28]
    6d26:	62b2      	str	r2, [r6, #40]	; 0x28
    I2C_WAITACKOP(-3);
    6d28:	2005      	movs	r0, #5
    6d2a:	f8df 811c 	ldr.w	r8, [pc, #284]	; 6e48 <I2C_setGAIN+0x2b4>
    6d2e:	47c0      	blx	r8
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6d30:	9a00      	ldr	r2, [sp, #0]
    6d32:	eb07 17c2 	add.w	r7, r7, r2, lsl #7
    6d36:	61bc      	str	r4, [r7, #24]
    6d38:	2005      	movs	r0, #5
    6d3a:	47c0      	blx	r8
	CRITICAL_SECTION_ENTER();
    6d3c:	a80a      	add	r0, sp, #40	; 0x28
    6d3e:	4b43      	ldr	r3, [pc, #268]	; (6e4c <I2C_setGAIN+0x2b8>)
    6d40:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    6d42:	9b01      	ldr	r3, [sp, #4]
    6d44:	681a      	ldr	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    6d46:	6a33      	ldr	r3, [r6, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    6d48:	6936      	ldr	r6, [r6, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    6d4a:	405e      	eors	r6, r3
    6d4c:	4016      	ands	r6, r2
    6d4e:	405e      	eors	r6, r3
	CRITICAL_SECTION_LEAVE();
    6d50:	a80a      	add	r0, sp, #40	; 0x28
    6d52:	4b3f      	ldr	r3, [pc, #252]	; (6e50 <I2C_setGAIN+0x2bc>)
    6d54:	4798      	blx	r3
    6d56:	4235      	tst	r5, r6
    6d58:	f040 8093 	bne.w	6e82 <I2C_setGAIN+0x2ee>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6d5c:	4e39      	ldr	r6, [pc, #228]	; (6e44 <I2C_setGAIN+0x2b0>)
    6d5e:	9b00      	ldr	r3, [sp, #0]
    6d60:	eb06 13c3 	add.w	r3, r6, r3, lsl #7
    6d64:	615c      	str	r4, [r3, #20]
    6d66:	2005      	movs	r0, #5
    6d68:	4f37      	ldr	r7, [pc, #220]	; (6e48 <I2C_setGAIN+0x2b4>)
    6d6a:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6d6c:	9a02      	ldr	r2, [sp, #8]
    6d6e:	eb06 16c2 	add.w	r6, r6, r2, lsl #7
    6d72:	60b5      	str	r5, [r6, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6d74:	9a03      	ldr	r2, [sp, #12]
    6d76:	62b2      	str	r2, [r6, #40]	; 0x28
    6d78:	9a04      	ldr	r2, [sp, #16]
    6d7a:	62b2      	str	r2, [r6, #40]	; 0x28
    6d7c:	2005      	movs	r0, #5
    6d7e:	47b8      	blx	r7
    6d80:	2708      	movs	r7, #8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6d82:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 6e44 <I2C_setGAIN+0x2b0>
    6d86:	9a05      	ldr	r2, [sp, #20]
    6d88:	eb0a 19c2 	add.w	r9, sl, r2, lsl #7
	I2C_SENDDATA(0x00, forloop);
    6d8c:	4e2e      	ldr	r6, [pc, #184]	; (6e48 <I2C_setGAIN+0x2b4>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6d8e:	9b00      	ldr	r3, [sp, #0]
    6d90:	ea4f 1bc3 	mov.w	fp, r3, lsl #7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6d94:	f8c9 5014 	str.w	r5, [r9, #20]
    6d98:	2005      	movs	r0, #5
    6d9a:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6d9c:	eb0a 080b 	add.w	r8, sl, fp
    6da0:	f8c8 4018 	str.w	r4, [r8, #24]
    6da4:	2005      	movs	r0, #5
    6da6:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6da8:	f8c8 4014 	str.w	r4, [r8, #20]
    6dac:	2005      	movs	r0, #5
    6dae:	47b0      	blx	r6
    6db0:	3f01      	subs	r7, #1
    6db2:	d1ef      	bne.n	6d94 <I2C_setGAIN+0x200>
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    6db4:	9b01      	ldr	r3, [sp, #4]
    6db6:	605d      	str	r5, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6db8:	4f22      	ldr	r7, [pc, #136]	; (6e44 <I2C_setGAIN+0x2b0>)
    6dba:	9a02      	ldr	r2, [sp, #8]
    6dbc:	eb07 16c2 	add.w	r6, r7, r2, lsl #7
    6dc0:	9a06      	ldr	r2, [sp, #24]
    6dc2:	62b2      	str	r2, [r6, #40]	; 0x28
    6dc4:	9a07      	ldr	r2, [sp, #28]
    6dc6:	62b2      	str	r2, [r6, #40]	; 0x28
	I2C_WAITACKOP(-3);
    6dc8:	2005      	movs	r0, #5
    6dca:	f8df 807c 	ldr.w	r8, [pc, #124]	; 6e48 <I2C_setGAIN+0x2b4>
    6dce:	47c0      	blx	r8
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6dd0:	9a00      	ldr	r2, [sp, #0]
    6dd2:	eb07 17c2 	add.w	r7, r7, r2, lsl #7
    6dd6:	61bc      	str	r4, [r7, #24]
    6dd8:	2005      	movs	r0, #5
    6dda:	47c0      	blx	r8
	CRITICAL_SECTION_ENTER();
    6ddc:	a80b      	add	r0, sp, #44	; 0x2c
    6dde:	4b1b      	ldr	r3, [pc, #108]	; (6e4c <I2C_setGAIN+0x2b8>)
    6de0:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    6de2:	9b01      	ldr	r3, [sp, #4]
    6de4:	681a      	ldr	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    6de6:	6a33      	ldr	r3, [r6, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    6de8:	6936      	ldr	r6, [r6, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    6dea:	405e      	eors	r6, r3
    6dec:	4016      	ands	r6, r2
    6dee:	405e      	eors	r6, r3
	CRITICAL_SECTION_LEAVE();
    6df0:	a80b      	add	r0, sp, #44	; 0x2c
    6df2:	4b17      	ldr	r3, [pc, #92]	; (6e50 <I2C_setGAIN+0x2bc>)
    6df4:	4798      	blx	r3
    6df6:	4235      	tst	r5, r6
    6df8:	d15a      	bne.n	6eb0 <I2C_setGAIN+0x31c>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6dfa:	4e12      	ldr	r6, [pc, #72]	; (6e44 <I2C_setGAIN+0x2b0>)
    6dfc:	9b00      	ldr	r3, [sp, #0]
    6dfe:	eb06 18c3 	add.w	r8, r6, r3, lsl #7
    6e02:	f8c8 4014 	str.w	r4, [r8, #20]
    6e06:	2005      	movs	r0, #5
    6e08:	4f0f      	ldr	r7, [pc, #60]	; (6e48 <I2C_setGAIN+0x2b4>)
    6e0a:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6e0c:	9b02      	ldr	r3, [sp, #8]
    6e0e:	eb06 16c3 	add.w	r6, r6, r3, lsl #7
    6e12:	60b5      	str	r5, [r6, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6e14:	9b03      	ldr	r3, [sp, #12]
    6e16:	62b3      	str	r3, [r6, #40]	; 0x28
    6e18:	9a04      	ldr	r2, [sp, #16]
    6e1a:	62b2      	str	r2, [r6, #40]	; 0x28
    6e1c:	2005      	movs	r0, #5
    6e1e:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6e20:	f8c8 4018 	str.w	r4, [r8, #24]
	
	/* If successful, and code execution got here, the close the I2C channel */
    I2C_STOP();
    6e24:	2005      	movs	r0, #5
    6e26:	47b8      	blx	r7
    6e28:	61b5      	str	r5, [r6, #24]
    6e2a:	2005      	movs	r0, #5
    6e2c:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6e2e:	60b5      	str	r5, [r6, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6e30:	9b03      	ldr	r3, [sp, #12]
    6e32:	62b3      	str	r3, [r6, #40]	; 0x28
    6e34:	9a04      	ldr	r2, [sp, #16]
    6e36:	62b2      	str	r2, [r6, #40]	; 0x28
    6e38:	2005      	movs	r0, #5
    6e3a:	47b8      	blx	r7
	I2C_CLOSE();
	
	return 0;
    6e3c:	2000      	movs	r0, #0
}
    6e3e:	b00d      	add	sp, #52	; 0x34
    6e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6e44:	41008000 	.word	0x41008000
    6e48:	0000152d 	.word	0x0000152d
    6e4c:	000014cd 	.word	0x000014cd
    6e50:	000014db 	.word	0x000014db
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6e54:	4e22      	ldr	r6, [pc, #136]	; (6ee0 <I2C_setGAIN+0x34c>)
    6e56:	9b00      	ldr	r3, [sp, #0]
    6e58:	eb06 13c3 	add.w	r3, r6, r3, lsl #7
    6e5c:	619c      	str	r4, [r3, #24]
    I2C_WAITACKOP(-2);
    6e5e:	2005      	movs	r0, #5
    6e60:	47c0      	blx	r8
    6e62:	9b02      	ldr	r3, [sp, #8]
    6e64:	eb06 16c3 	add.w	r6, r6, r3, lsl #7
    6e68:	61b5      	str	r5, [r6, #24]
    6e6a:	2005      	movs	r0, #5
    6e6c:	47c0      	blx	r8
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6e6e:	60b5      	str	r5, [r6, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6e70:	9b03      	ldr	r3, [sp, #12]
    6e72:	62b3      	str	r3, [r6, #40]	; 0x28
    6e74:	9b04      	ldr	r3, [sp, #16]
    6e76:	62b3      	str	r3, [r6, #40]	; 0x28
    6e78:	2005      	movs	r0, #5
    6e7a:	47c0      	blx	r8
    6e7c:	f06f 0001 	mvn.w	r0, #1
    6e80:	e7dd      	b.n	6e3e <I2C_setGAIN+0x2aa>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6e82:	4e17      	ldr	r6, [pc, #92]	; (6ee0 <I2C_setGAIN+0x34c>)
    6e84:	9b00      	ldr	r3, [sp, #0]
    6e86:	eb06 13c3 	add.w	r3, r6, r3, lsl #7
    6e8a:	619c      	str	r4, [r3, #24]
    I2C_WAITACKOP(-3);
    6e8c:	2005      	movs	r0, #5
    6e8e:	47c0      	blx	r8
    6e90:	9b02      	ldr	r3, [sp, #8]
    6e92:	eb06 16c3 	add.w	r6, r6, r3, lsl #7
    6e96:	61b5      	str	r5, [r6, #24]
    6e98:	2005      	movs	r0, #5
    6e9a:	47c0      	blx	r8
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6e9c:	60b5      	str	r5, [r6, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6e9e:	9b03      	ldr	r3, [sp, #12]
    6ea0:	62b3      	str	r3, [r6, #40]	; 0x28
    6ea2:	9b04      	ldr	r3, [sp, #16]
    6ea4:	62b3      	str	r3, [r6, #40]	; 0x28
    6ea6:	2005      	movs	r0, #5
    6ea8:	47c0      	blx	r8
    6eaa:	f06f 0002 	mvn.w	r0, #2
    6eae:	e7c6      	b.n	6e3e <I2C_setGAIN+0x2aa>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6eb0:	4e0b      	ldr	r6, [pc, #44]	; (6ee0 <I2C_setGAIN+0x34c>)
    6eb2:	9b00      	ldr	r3, [sp, #0]
    6eb4:	eb06 13c3 	add.w	r3, r6, r3, lsl #7
    6eb8:	619c      	str	r4, [r3, #24]
	I2C_WAITACKOP(-3);
    6eba:	2005      	movs	r0, #5
    6ebc:	47c0      	blx	r8
    6ebe:	9b02      	ldr	r3, [sp, #8]
    6ec0:	eb06 16c3 	add.w	r6, r6, r3, lsl #7
    6ec4:	61b5      	str	r5, [r6, #24]
    6ec6:	2005      	movs	r0, #5
    6ec8:	47c0      	blx	r8
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6eca:	60b5      	str	r5, [r6, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6ecc:	9b03      	ldr	r3, [sp, #12]
    6ece:	62b3      	str	r3, [r6, #40]	; 0x28
    6ed0:	9b04      	ldr	r3, [sp, #16]
    6ed2:	62b3      	str	r3, [r6, #40]	; 0x28
    6ed4:	2005      	movs	r0, #5
    6ed6:	47c0      	blx	r8
    6ed8:	f06f 0002 	mvn.w	r0, #2
    6edc:	e7af      	b.n	6e3e <I2C_setGAIN+0x2aa>
    6ede:	bf00      	nop
    6ee0:	41008000 	.word	0x41008000

00006ee4 <I2C_getTEMPandMOISTURE>:
{
	uint8_t     		i2csda, i2cclk;
	unsigned char		forloop;
	
	/* Assert and bounds check the return parameter variables */
	if ((!th) || (!tl) || (!hh) || (!hl)) {
    6ee4:	2a00      	cmp	r2, #0
    6ee6:	f000 87d1 	beq.w	7e8c <I2C_getTEMPandMOISTURE+0xfa8>
{
    6eea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6eee:	b09d      	sub	sp, #116	; 0x74
    6ef0:	4614      	mov	r4, r2
	if ((!th) || (!tl) || (!hh) || (!hl)) {
    6ef2:	2b00      	cmp	r3, #0
    6ef4:	f000 87cd 	beq.w	7e92 <I2C_getTEMPandMOISTURE+0xfae>
    6ef8:	9a26      	ldr	r2, [sp, #152]	; 0x98
    6efa:	2a00      	cmp	r2, #0
    6efc:	f000 87cc 	beq.w	7e98 <I2C_getTEMPandMOISTURE+0xfb4>
    6f00:	9a27      	ldr	r2, [sp, #156]	; 0x9c
    6f02:	2a00      	cmp	r2, #0
    6f04:	f000 87cb 	beq.w	7e9e <I2C_getTEMPandMOISTURE+0xfba>
    6f08:	940b      	str	r4, [sp, #44]	; 0x2c
    6f0a:	930a      	str	r3, [sp, #40]	; 0x28
    6f0c:	f001 041f 	and.w	r4, r1, #31
    6f10:	2301      	movs	r3, #1
    6f12:	fa03 f404 	lsl.w	r4, r3, r4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6f16:	094a      	lsrs	r2, r1, #5
    6f18:	4daa      	ldr	r5, [pc, #680]	; (71c4 <I2C_getTEMPandMOISTURE+0x2e0>)
    6f1a:	9203      	str	r2, [sp, #12]
    6f1c:	eb05 17c2 	add.w	r7, r5, r2, lsl #7
    6f20:	61bc      	str	r4, [r7, #24]
    6f22:	0942      	lsrs	r2, r0, #5
    6f24:	9204      	str	r2, [sp, #16]
    6f26:	f000 001f 	and.w	r0, r0, #31
    6f2a:	fa03 fb00 	lsl.w	fp, r3, r0
    6f2e:	9202      	str	r2, [sp, #8]
    6f30:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    6f34:	f8c5 b018 	str.w	fp, [r5, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6f38:	f8c5 b008 	str.w	fp, [r5, #8]
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    6f3c:	fa1f f38b 	uxth.w	r3, fp
    6f40:	9307      	str	r3, [sp, #28]
    6f42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    6f46:	9305      	str	r3, [sp, #20]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6f48:	62ab      	str	r3, [r5, #40]	; 0x28
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    6f4a:	ea4f 431b 	mov.w	r3, fp, lsr #16
    6f4e:	9308      	str	r3, [sp, #32]
		hri_port_write_WRCONFIG_reg(
    6f50:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    6f54:	9306      	str	r3, [sp, #24]
    6f56:	62ab      	str	r3, [r5, #40]	; 0x28
		return -1;
	}

	/* Open an I2C channel, send address 0x40, index register 0x00 */
	I2C_OPEN(sda, clk);
	I2C_START(-2);
    6f58:	2005      	movs	r0, #5
    6f5a:	4e9b      	ldr	r6, [pc, #620]	; (71c8 <I2C_getTEMPandMOISTURE+0x2e4>)
    6f5c:	47b0      	blx	r6
    6f5e:	2005      	movs	r0, #5
    6f60:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6f62:	f8c5 b014 	str.w	fp, [r5, #20]
    6f66:	2005      	movs	r0, #5
    6f68:	47b0      	blx	r6
    6f6a:	617c      	str	r4, [r7, #20]
    6f6c:	2005      	movs	r0, #5
    6f6e:	47b0      	blx	r6
    6f70:	2707      	movs	r7, #7
	I2C_SENDADDR(0x40, forloop);
    6f72:	2640      	movs	r6, #64	; 0x40
    6f74:	f8df 924c 	ldr.w	r9, [pc, #588]	; 71c4 <I2C_getTEMPandMOISTURE+0x2e0>
    6f78:	9a02      	ldr	r2, [sp, #8]
    6f7a:	eb09 13c2 	add.w	r3, r9, r2, lsl #7
    6f7e:	9301      	str	r3, [sp, #4]
    6f80:	4d91      	ldr	r5, [pc, #580]	; (71c8 <I2C_getTEMPandMOISTURE+0x2e4>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6f82:	9903      	ldr	r1, [sp, #12]
    6f84:	fa01 fa07 	lsl.w	sl, r1, r7
    6f88:	f016 0f40 	tst.w	r6, #64	; 0x40
    6f8c:	9b01      	ldr	r3, [sp, #4]
    6f8e:	bf14      	ite	ne
    6f90:	f8c3 b018 	strne.w	fp, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6f94:	f8c3 b014 	streq.w	fp, [r3, #20]
    6f98:	2005      	movs	r0, #5
    6f9a:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6f9c:	eb09 080a 	add.w	r8, r9, sl
    6fa0:	f8c8 4018 	str.w	r4, [r8, #24]
    6fa4:	2005      	movs	r0, #5
    6fa6:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6fa8:	f8c8 4014 	str.w	r4, [r8, #20]
    6fac:	2005      	movs	r0, #5
    6fae:	47a8      	blx	r5
    6fb0:	0876      	lsrs	r6, r6, #1
    6fb2:	3f01      	subs	r7, #1
    6fb4:	d1e8      	bne.n	6f88 <I2C_getTEMPandMOISTURE+0xa4>
    6fb6:	4d83      	ldr	r5, [pc, #524]	; (71c4 <I2C_getTEMPandMOISTURE+0x2e0>)
    6fb8:	9b04      	ldr	r3, [sp, #16]
    6fba:	eb05 16c3 	add.w	r6, r5, r3, lsl #7
    6fbe:	f8c6 b014 	str.w	fp, [r6, #20]
	I2C_WRITE();
    6fc2:	2005      	movs	r0, #5
    6fc4:	4f80      	ldr	r7, [pc, #512]	; (71c8 <I2C_getTEMPandMOISTURE+0x2e4>)
    6fc6:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6fc8:	9a03      	ldr	r2, [sp, #12]
    6fca:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    6fce:	61ac      	str	r4, [r5, #24]
    6fd0:	2005      	movs	r0, #5
    6fd2:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6fd4:	616c      	str	r4, [r5, #20]
    6fd6:	2005      	movs	r0, #5
    6fd8:	47b8      	blx	r7
    6fda:	9b04      	ldr	r3, [sp, #16]
    6fdc:	01db      	lsls	r3, r3, #7
    6fde:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    6fe2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    6fe6:	9301      	str	r3, [sp, #4]
    6fe8:	f8c3 b004 	str.w	fp, [r3, #4]
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    6fec:	9907      	ldr	r1, [sp, #28]
    6fee:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    6ff2:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
    6ff6:	9107      	str	r1, [sp, #28]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6ff8:	62b1      	str	r1, [r6, #40]	; 0x28
		hri_port_write_WRCONFIG_reg(PORT,
    6ffa:	9908      	ldr	r1, [sp, #32]
    6ffc:	f041 4140 	orr.w	r1, r1, #3221225472	; 0xc0000000
    7000:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
    7004:	9108      	str	r1, [sp, #32]
    7006:	62b1      	str	r1, [r6, #40]	; 0x28
	I2C_WAITACKOP(-3);
    7008:	2005      	movs	r0, #5
    700a:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    700c:	61ac      	str	r4, [r5, #24]
    700e:	2005      	movs	r0, #5
    7010:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    7012:	a80c      	add	r0, sp, #48	; 0x30
    7014:	4b6d      	ldr	r3, [pc, #436]	; (71cc <I2C_getTEMPandMOISTURE+0x2e8>)
    7016:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    7018:	9a01      	ldr	r2, [sp, #4]
    701a:	6812      	ldr	r2, [r2, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    701c:	6a33      	ldr	r3, [r6, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    701e:	6935      	ldr	r5, [r6, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    7020:	405d      	eors	r5, r3
    7022:	4015      	ands	r5, r2
    7024:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    7026:	a80c      	add	r0, sp, #48	; 0x30
    7028:	4b69      	ldr	r3, [pc, #420]	; (71d0 <I2C_getTEMPandMOISTURE+0x2ec>)
    702a:	4798      	blx	r3
    702c:	ea1b 0f05 	tst.w	fp, r5
    7030:	f040 80e6 	bne.w	7200 <I2C_getTEMPandMOISTURE+0x31c>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7034:	4d63      	ldr	r5, [pc, #396]	; (71c4 <I2C_getTEMPandMOISTURE+0x2e0>)
    7036:	9f03      	ldr	r7, [sp, #12]
    7038:	eb05 13c7 	add.w	r3, r5, r7, lsl #7
    703c:	615c      	str	r4, [r3, #20]
    703e:	2005      	movs	r0, #5
    7040:	4e61      	ldr	r6, [pc, #388]	; (71c8 <I2C_getTEMPandMOISTURE+0x2e4>)
    7042:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    7044:	9b04      	ldr	r3, [sp, #16]
    7046:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    704a:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    704e:	9b05      	ldr	r3, [sp, #20]
    7050:	62ab      	str	r3, [r5, #40]	; 0x28
    7052:	9b06      	ldr	r3, [sp, #24]
    7054:	62ab      	str	r3, [r5, #40]	; 0x28
    7056:	2005      	movs	r0, #5
    7058:	47b0      	blx	r6
    705a:	2608      	movs	r6, #8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    705c:	f8df 8164 	ldr.w	r8, [pc, #356]	; 71c4 <I2C_getTEMPandMOISTURE+0x2e0>
    7060:	9b02      	ldr	r3, [sp, #8]
    7062:	eb08 1ac3 	add.w	sl, r8, r3, lsl #7
	I2C_SENDDATA(0x00, forloop);
    7066:	4d58      	ldr	r5, [pc, #352]	; (71c8 <I2C_getTEMPandMOISTURE+0x2e4>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7068:	ea4f 19c7 	mov.w	r9, r7, lsl #7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    706c:	f8ca b014 	str.w	fp, [sl, #20]
    7070:	2005      	movs	r0, #5
    7072:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7074:	eb08 0709 	add.w	r7, r8, r9
    7078:	61bc      	str	r4, [r7, #24]
    707a:	2005      	movs	r0, #5
    707c:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    707e:	617c      	str	r4, [r7, #20]
    7080:	2005      	movs	r0, #5
    7082:	47a8      	blx	r5
    7084:	3e01      	subs	r6, #1
    7086:	d1f1      	bne.n	706c <I2C_getTEMPandMOISTURE+0x188>
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    7088:	9b01      	ldr	r3, [sp, #4]
    708a:	f8c3 b004 	str.w	fp, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    708e:	4e4d      	ldr	r6, [pc, #308]	; (71c4 <I2C_getTEMPandMOISTURE+0x2e0>)
    7090:	9a04      	ldr	r2, [sp, #16]
    7092:	eb06 15c2 	add.w	r5, r6, r2, lsl #7
    7096:	9a07      	ldr	r2, [sp, #28]
    7098:	62aa      	str	r2, [r5, #40]	; 0x28
    709a:	9a08      	ldr	r2, [sp, #32]
    709c:	62aa      	str	r2, [r5, #40]	; 0x28
	I2C_WAITACKOP(-4);
    709e:	2005      	movs	r0, #5
    70a0:	4f49      	ldr	r7, [pc, #292]	; (71c8 <I2C_getTEMPandMOISTURE+0x2e4>)
    70a2:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    70a4:	9a03      	ldr	r2, [sp, #12]
    70a6:	eb06 16c2 	add.w	r6, r6, r2, lsl #7
    70aa:	61b4      	str	r4, [r6, #24]
    70ac:	2005      	movs	r0, #5
    70ae:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    70b0:	a80d      	add	r0, sp, #52	; 0x34
    70b2:	4b46      	ldr	r3, [pc, #280]	; (71cc <I2C_getTEMPandMOISTURE+0x2e8>)
    70b4:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    70b6:	9b01      	ldr	r3, [sp, #4]
    70b8:	681a      	ldr	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    70ba:	6a2b      	ldr	r3, [r5, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    70bc:	692d      	ldr	r5, [r5, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    70be:	405d      	eors	r5, r3
    70c0:	4015      	ands	r5, r2
    70c2:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    70c4:	a80d      	add	r0, sp, #52	; 0x34
    70c6:	4b42      	ldr	r3, [pc, #264]	; (71d0 <I2C_getTEMPandMOISTURE+0x2ec>)
    70c8:	4798      	blx	r3
    70ca:	ea1b 0f05 	tst.w	fp, r5
    70ce:	f040 80b1 	bne.w	7234 <I2C_getTEMPandMOISTURE+0x350>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    70d2:	4d3c      	ldr	r5, [pc, #240]	; (71c4 <I2C_getTEMPandMOISTURE+0x2e0>)
    70d4:	9b03      	ldr	r3, [sp, #12]
    70d6:	eb05 17c3 	add.w	r7, r5, r3, lsl #7
    70da:	617c      	str	r4, [r7, #20]
    70dc:	2005      	movs	r0, #5
    70de:	4e3a      	ldr	r6, [pc, #232]	; (71c8 <I2C_getTEMPandMOISTURE+0x2e4>)
    70e0:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    70e2:	9a04      	ldr	r2, [sp, #16]
    70e4:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    70e8:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    70ec:	9a05      	ldr	r2, [sp, #20]
    70ee:	62aa      	str	r2, [r5, #40]	; 0x28
    70f0:	9906      	ldr	r1, [sp, #24]
    70f2:	62a9      	str	r1, [r5, #40]	; 0x28
    70f4:	2005      	movs	r0, #5
    70f6:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    70f8:	61bc      	str	r4, [r7, #24]
    70fa:	f8c5 b018 	str.w	fp, [r5, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    70fe:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7102:	9a05      	ldr	r2, [sp, #20]
    7104:	62aa      	str	r2, [r5, #40]	; 0x28
    7106:	9906      	ldr	r1, [sp, #24]
    7108:	62a9      	str	r1, [r5, #40]	; 0x28
	
	/* Then restart comms and send address 0x40 */
	I2C_START(-5);
    710a:	2005      	movs	r0, #5
    710c:	47b0      	blx	r6
    710e:	2005      	movs	r0, #5
    7110:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7112:	f8c5 b014 	str.w	fp, [r5, #20]
    7116:	2005      	movs	r0, #5
    7118:	47b0      	blx	r6
    711a:	617c      	str	r4, [r7, #20]
    711c:	2005      	movs	r0, #5
    711e:	47b0      	blx	r6
    7120:	2707      	movs	r7, #7
	I2C_SENDADDR(0x40, forloop);
    7122:	2640      	movs	r6, #64	; 0x40
    7124:	f8df 909c 	ldr.w	r9, [pc, #156]	; 71c4 <I2C_getTEMPandMOISTURE+0x2e0>
    7128:	9a02      	ldr	r2, [sp, #8]
    712a:	eb09 12c2 	add.w	r2, r9, r2, lsl #7
    712e:	9209      	str	r2, [sp, #36]	; 0x24
    7130:	4d25      	ldr	r5, [pc, #148]	; (71c8 <I2C_getTEMPandMOISTURE+0x2e4>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7132:	9b03      	ldr	r3, [sp, #12]
    7134:	fa03 fa07 	lsl.w	sl, r3, r7
    7138:	f016 0f40 	tst.w	r6, #64	; 0x40
    713c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    713e:	bf14      	ite	ne
    7140:	f8c3 b018 	strne.w	fp, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7144:	f8c3 b014 	streq.w	fp, [r3, #20]
    7148:	2005      	movs	r0, #5
    714a:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    714c:	eb09 080a 	add.w	r8, r9, sl
    7150:	f8c8 4018 	str.w	r4, [r8, #24]
    7154:	2005      	movs	r0, #5
    7156:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7158:	f8c8 4014 	str.w	r4, [r8, #20]
    715c:	2005      	movs	r0, #5
    715e:	47a8      	blx	r5
    7160:	0876      	lsrs	r6, r6, #1
    7162:	3f01      	subs	r7, #1
    7164:	d1e8      	bne.n	7138 <I2C_getTEMPandMOISTURE+0x254>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7166:	4d17      	ldr	r5, [pc, #92]	; (71c4 <I2C_getTEMPandMOISTURE+0x2e0>)
    7168:	9b04      	ldr	r3, [sp, #16]
    716a:	eb05 16c3 	add.w	r6, r5, r3, lsl #7
    716e:	f8c6 b018 	str.w	fp, [r6, #24]
	I2C_READ();
    7172:	2005      	movs	r0, #5
    7174:	4f14      	ldr	r7, [pc, #80]	; (71c8 <I2C_getTEMPandMOISTURE+0x2e4>)
    7176:	47b8      	blx	r7
    7178:	9b03      	ldr	r3, [sp, #12]
    717a:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    717e:	61ac      	str	r4, [r5, #24]
    7180:	2005      	movs	r0, #5
    7182:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7184:	616c      	str	r4, [r5, #20]
    7186:	2005      	movs	r0, #5
    7188:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    718a:	9b01      	ldr	r3, [sp, #4]
    718c:	f8c3 b004 	str.w	fp, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7190:	9a07      	ldr	r2, [sp, #28]
    7192:	62b2      	str	r2, [r6, #40]	; 0x28
    7194:	9a08      	ldr	r2, [sp, #32]
    7196:	62b2      	str	r2, [r6, #40]	; 0x28
	I2C_WAITACKIP(-6);
    7198:	2005      	movs	r0, #5
    719a:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    719c:	61ac      	str	r4, [r5, #24]
    719e:	2005      	movs	r0, #5
    71a0:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    71a2:	a80e      	add	r0, sp, #56	; 0x38
    71a4:	4b09      	ldr	r3, [pc, #36]	; (71cc <I2C_getTEMPandMOISTURE+0x2e8>)
    71a6:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    71a8:	9b01      	ldr	r3, [sp, #4]
    71aa:	681a      	ldr	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    71ac:	6a33      	ldr	r3, [r6, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    71ae:	6935      	ldr	r5, [r6, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    71b0:	405d      	eors	r5, r3
    71b2:	4015      	ands	r5, r2
    71b4:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    71b6:	a80e      	add	r0, sp, #56	; 0x38
    71b8:	4b05      	ldr	r3, [pc, #20]	; (71d0 <I2C_getTEMPandMOISTURE+0x2ec>)
    71ba:	4798      	blx	r3
    71bc:	ea1b 0f05 	tst.w	fp, r5
    71c0:	d152      	bne.n	7268 <I2C_getTEMPandMOISTURE+0x384>
    71c2:	e007      	b.n	71d4 <I2C_getTEMPandMOISTURE+0x2f0>
    71c4:	41008000 	.word	0x41008000
    71c8:	0000152d 	.word	0x0000152d
    71cc:	000014cd 	.word	0x000014cd
    71d0:	000014db 	.word	0x000014db
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    71d4:	9d03      	ldr	r5, [sp, #12]
    71d6:	01eb      	lsls	r3, r5, #7
    71d8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    71dc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    71e0:	615c      	str	r4, [r3, #20]
    71e2:	2005      	movs	r0, #5
    71e4:	4b3f      	ldr	r3, [pc, #252]	; (72e4 <I2C_getTEMPandMOISTURE+0x400>)
    71e6:	4798      	blx	r3

	*tl = 0;
    71e8:	2300      	movs	r3, #0
    71ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    71ec:	7013      	strb	r3, [r2, #0]
    71ee:	2608      	movs	r6, #8

	/* Beginning of the for-loops that captures data and read the lower 8-bits of the temperature */
	for (forloop = 0x80; forloop > 0;) {
    71f0:	2780      	movs	r7, #128	; 0x80
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    71f2:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 72e8 <I2C_getTEMPandMOISTURE+0x404>
    71f6:	eb0a 19c5 	add.w	r9, sl, r5, lsl #7
		I2C_clockhi();
    71fa:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 72e4 <I2C_getTEMPandMOISTURE+0x400>
    71fe:	e054      	b.n	72aa <I2C_getTEMPandMOISTURE+0x3c6>
    7200:	4d39      	ldr	r5, [pc, #228]	; (72e8 <I2C_getTEMPandMOISTURE+0x404>)
    7202:	9b03      	ldr	r3, [sp, #12]
    7204:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    7208:	619c      	str	r4, [r3, #24]
	I2C_WAITACKOP(-3);
    720a:	2005      	movs	r0, #5
    720c:	47b8      	blx	r7
    720e:	9b04      	ldr	r3, [sp, #16]
    7210:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    7214:	f8c5 b018 	str.w	fp, [r5, #24]
    7218:	2005      	movs	r0, #5
    721a:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    721c:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7220:	9b05      	ldr	r3, [sp, #20]
    7222:	62ab      	str	r3, [r5, #40]	; 0x28
    7224:	9b06      	ldr	r3, [sp, #24]
    7226:	62ab      	str	r3, [r5, #40]	; 0x28
    7228:	2005      	movs	r0, #5
    722a:	47b8      	blx	r7
    722c:	f06f 0002 	mvn.w	r0, #2
    7230:	f000 be29 	b.w	7e86 <I2C_getTEMPandMOISTURE+0xfa2>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7234:	4d2c      	ldr	r5, [pc, #176]	; (72e8 <I2C_getTEMPandMOISTURE+0x404>)
    7236:	9b03      	ldr	r3, [sp, #12]
    7238:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    723c:	619c      	str	r4, [r3, #24]
	I2C_WAITACKOP(-4);
    723e:	2005      	movs	r0, #5
    7240:	47b8      	blx	r7
    7242:	9b04      	ldr	r3, [sp, #16]
    7244:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    7248:	f8c5 b018 	str.w	fp, [r5, #24]
    724c:	2005      	movs	r0, #5
    724e:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    7250:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7254:	9b05      	ldr	r3, [sp, #20]
    7256:	62ab      	str	r3, [r5, #40]	; 0x28
    7258:	9b06      	ldr	r3, [sp, #24]
    725a:	62ab      	str	r3, [r5, #40]	; 0x28
    725c:	2005      	movs	r0, #5
    725e:	47b8      	blx	r7
    7260:	f06f 0003 	mvn.w	r0, #3
    7264:	f000 be0f 	b.w	7e86 <I2C_getTEMPandMOISTURE+0xfa2>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7268:	4d1f      	ldr	r5, [pc, #124]	; (72e8 <I2C_getTEMPandMOISTURE+0x404>)
    726a:	9b03      	ldr	r3, [sp, #12]
    726c:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    7270:	619c      	str	r4, [r3, #24]
	I2C_WAITACKIP(-6);
    7272:	2005      	movs	r0, #5
    7274:	47b8      	blx	r7
    7276:	9b04      	ldr	r3, [sp, #16]
    7278:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    727c:	f8c5 b018 	str.w	fp, [r5, #24]
    7280:	2005      	movs	r0, #5
    7282:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    7284:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7288:	9b05      	ldr	r3, [sp, #20]
    728a:	62ab      	str	r3, [r5, #40]	; 0x28
    728c:	9b06      	ldr	r3, [sp, #24]
    728e:	62ab      	str	r3, [r5, #40]	; 0x28
    7290:	2005      	movs	r0, #5
    7292:	47b8      	blx	r7
    7294:	f06f 0005 	mvn.w	r0, #5
    7298:	f000 bdf5 	b.w	7e86 <I2C_getTEMPandMOISTURE+0xfa2>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    729c:	f8c9 4014 	str.w	r4, [r9, #20]
	    if (gpio_get_pin_level(i2csda)) {
			(*tl) |= forloop;
		}

		I2C_clocklo();
    72a0:	2005      	movs	r0, #5
    72a2:	47c0      	blx	r8
		forloop = forloop / 2;
    72a4:	087f      	lsrs	r7, r7, #1
	for (forloop = 0x80; forloop > 0;) {
    72a6:	3e01      	subs	r6, #1
    72a8:	d024      	beq.n	72f4 <I2C_getTEMPandMOISTURE+0x410>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    72aa:	f8c9 4018 	str.w	r4, [r9, #24]
		I2C_clockhi();
    72ae:	2005      	movs	r0, #5
    72b0:	47c0      	blx	r8
	CRITICAL_SECTION_ENTER();
    72b2:	a80f      	add	r0, sp, #60	; 0x3c
    72b4:	4b0d      	ldr	r3, [pc, #52]	; (72ec <I2C_getTEMPandMOISTURE+0x408>)
    72b6:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    72b8:	9b01      	ldr	r3, [sp, #4]
    72ba:	6819      	ldr	r1, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    72bc:	9b02      	ldr	r3, [sp, #8]
    72be:	eb0a 12c3 	add.w	r2, sl, r3, lsl #7
    72c2:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    72c4:	6915      	ldr	r5, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    72c6:	405d      	eors	r5, r3
    72c8:	400d      	ands	r5, r1
    72ca:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    72cc:	a80f      	add	r0, sp, #60	; 0x3c
    72ce:	4b08      	ldr	r3, [pc, #32]	; (72f0 <I2C_getTEMPandMOISTURE+0x40c>)
    72d0:	4798      	blx	r3
	    if (gpio_get_pin_level(i2csda)) {
    72d2:	ea1b 0f05 	tst.w	fp, r5
    72d6:	d0e1      	beq.n	729c <I2C_getTEMPandMOISTURE+0x3b8>
			(*tl) |= forloop;
    72d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    72da:	7813      	ldrb	r3, [r2, #0]
    72dc:	433b      	orrs	r3, r7
    72de:	7013      	strb	r3, [r2, #0]
    72e0:	e7dc      	b.n	729c <I2C_getTEMPandMOISTURE+0x3b8>
    72e2:	bf00      	nop
    72e4:	0000152d 	.word	0x0000152d
    72e8:	41008000 	.word	0x41008000
    72ec:	000014cd 	.word	0x000014cd
    72f0:	000014db 	.word	0x000014db
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    72f4:	4da8      	ldr	r5, [pc, #672]	; (7598 <I2C_getTEMPandMOISTURE+0x6b4>)
    72f6:	9b03      	ldr	r3, [sp, #12]
    72f8:	eb05 17c3 	add.w	r7, r5, r3, lsl #7
    72fc:	61bc      	str	r4, [r7, #24]
	}

	I2C_STOP();
    72fe:	2005      	movs	r0, #5
    7300:	4ea6      	ldr	r6, [pc, #664]	; (759c <I2C_getTEMPandMOISTURE+0x6b8>)
    7302:	47b0      	blx	r6
    7304:	9a04      	ldr	r2, [sp, #16]
    7306:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    730a:	f8c5 b018 	str.w	fp, [r5, #24]
    730e:	2005      	movs	r0, #5
    7310:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    7312:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7316:	9a05      	ldr	r2, [sp, #20]
    7318:	62aa      	str	r2, [r5, #40]	; 0x28
    731a:	9906      	ldr	r1, [sp, #24]
    731c:	62a9      	str	r1, [r5, #40]	; 0x28
    731e:	2005      	movs	r0, #5
    7320:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7322:	61bc      	str	r4, [r7, #24]
    7324:	f8c5 b018 	str.w	fp, [r5, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    7328:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    732c:	9a05      	ldr	r2, [sp, #20]
    732e:	62aa      	str	r2, [r5, #40]	; 0x28
    7330:	9906      	ldr	r1, [sp, #24]
    7332:	62a9      	str	r1, [r5, #40]	; 0x28
	I2C_CLOSE();
	/* If successful, and code execution got here, the close the I2C channel */
	
	/* Open an I2C channel, send address 0x40, index register 0x01 */
	I2C_OPEN(sda, clk);
	I2C_START(-2);
    7334:	2005      	movs	r0, #5
    7336:	47b0      	blx	r6
    7338:	2005      	movs	r0, #5
    733a:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    733c:	f8c5 b014 	str.w	fp, [r5, #20]
    7340:	2005      	movs	r0, #5
    7342:	47b0      	blx	r6
    7344:	617c      	str	r4, [r7, #20]
    7346:	2005      	movs	r0, #5
    7348:	47b0      	blx	r6
    734a:	2707      	movs	r7, #7
	I2C_SENDADDR(0x40, forloop);
    734c:	2640      	movs	r6, #64	; 0x40
    734e:	f8df 9248 	ldr.w	r9, [pc, #584]	; 7598 <I2C_getTEMPandMOISTURE+0x6b4>
    7352:	9a02      	ldr	r2, [sp, #8]
    7354:	eb09 12c2 	add.w	r2, r9, r2, lsl #7
    7358:	9209      	str	r2, [sp, #36]	; 0x24
    735a:	4d90      	ldr	r5, [pc, #576]	; (759c <I2C_getTEMPandMOISTURE+0x6b8>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    735c:	9b03      	ldr	r3, [sp, #12]
    735e:	fa03 fa07 	lsl.w	sl, r3, r7
    7362:	f016 0f40 	tst.w	r6, #64	; 0x40
    7366:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7368:	bf14      	ite	ne
    736a:	f8c3 b018 	strne.w	fp, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    736e:	f8c3 b014 	streq.w	fp, [r3, #20]
    7372:	2005      	movs	r0, #5
    7374:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7376:	eb09 080a 	add.w	r8, r9, sl
    737a:	f8c8 4018 	str.w	r4, [r8, #24]
    737e:	2005      	movs	r0, #5
    7380:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7382:	f8c8 4014 	str.w	r4, [r8, #20]
    7386:	2005      	movs	r0, #5
    7388:	47a8      	blx	r5
    738a:	0876      	lsrs	r6, r6, #1
    738c:	3f01      	subs	r7, #1
    738e:	d1e8      	bne.n	7362 <I2C_getTEMPandMOISTURE+0x47e>
    7390:	4d81      	ldr	r5, [pc, #516]	; (7598 <I2C_getTEMPandMOISTURE+0x6b4>)
    7392:	9b04      	ldr	r3, [sp, #16]
    7394:	eb05 16c3 	add.w	r6, r5, r3, lsl #7
    7398:	f8c6 b014 	str.w	fp, [r6, #20]
	I2C_WRITE();
    739c:	2005      	movs	r0, #5
    739e:	4f7f      	ldr	r7, [pc, #508]	; (759c <I2C_getTEMPandMOISTURE+0x6b8>)
    73a0:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    73a2:	9b03      	ldr	r3, [sp, #12]
    73a4:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    73a8:	61ac      	str	r4, [r5, #24]
    73aa:	2005      	movs	r0, #5
    73ac:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    73ae:	616c      	str	r4, [r5, #20]
    73b0:	2005      	movs	r0, #5
    73b2:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    73b4:	9b01      	ldr	r3, [sp, #4]
    73b6:	f8c3 b004 	str.w	fp, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    73ba:	9a07      	ldr	r2, [sp, #28]
    73bc:	62b2      	str	r2, [r6, #40]	; 0x28
    73be:	9a08      	ldr	r2, [sp, #32]
    73c0:	62b2      	str	r2, [r6, #40]	; 0x28
	I2C_WAITACKOP(-3);
    73c2:	2005      	movs	r0, #5
    73c4:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    73c6:	61ac      	str	r4, [r5, #24]
    73c8:	2005      	movs	r0, #5
    73ca:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    73cc:	a810      	add	r0, sp, #64	; 0x40
    73ce:	4b74      	ldr	r3, [pc, #464]	; (75a0 <I2C_getTEMPandMOISTURE+0x6bc>)
    73d0:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    73d2:	9b01      	ldr	r3, [sp, #4]
    73d4:	681a      	ldr	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    73d6:	6a33      	ldr	r3, [r6, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    73d8:	6935      	ldr	r5, [r6, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    73da:	405d      	eors	r5, r3
    73dc:	4015      	ands	r5, r2
    73de:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    73e0:	a810      	add	r0, sp, #64	; 0x40
    73e2:	4b70      	ldr	r3, [pc, #448]	; (75a4 <I2C_getTEMPandMOISTURE+0x6c0>)
    73e4:	4798      	blx	r3
    73e6:	ea1b 0f05 	tst.w	fp, r5
    73ea:	f040 80f3 	bne.w	75d4 <I2C_getTEMPandMOISTURE+0x6f0>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    73ee:	4d6a      	ldr	r5, [pc, #424]	; (7598 <I2C_getTEMPandMOISTURE+0x6b4>)
    73f0:	9b03      	ldr	r3, [sp, #12]
    73f2:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    73f6:	615c      	str	r4, [r3, #20]
    73f8:	2005      	movs	r0, #5
    73fa:	4e68      	ldr	r6, [pc, #416]	; (759c <I2C_getTEMPandMOISTURE+0x6b8>)
    73fc:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    73fe:	9a04      	ldr	r2, [sp, #16]
    7400:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    7404:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7408:	9a05      	ldr	r2, [sp, #20]
    740a:	62aa      	str	r2, [r5, #40]	; 0x28
    740c:	9a06      	ldr	r2, [sp, #24]
    740e:	62aa      	str	r2, [r5, #40]	; 0x28
    7410:	2005      	movs	r0, #5
    7412:	47b0      	blx	r6
    7414:	2708      	movs	r7, #8
	I2C_SENDDATA(0x01, forloop);
    7416:	2680      	movs	r6, #128	; 0x80
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7418:	f8df 917c 	ldr.w	r9, [pc, #380]	; 7598 <I2C_getTEMPandMOISTURE+0x6b4>
    741c:	9a02      	ldr	r2, [sp, #8]
    741e:	eb09 12c2 	add.w	r2, r9, r2, lsl #7
    7422:	9209      	str	r2, [sp, #36]	; 0x24
    7424:	4d5d      	ldr	r5, [pc, #372]	; (759c <I2C_getTEMPandMOISTURE+0x6b8>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7426:	9b03      	ldr	r3, [sp, #12]
    7428:	ea4f 1ac3 	mov.w	sl, r3, lsl #7
    742c:	f016 0f01 	tst.w	r6, #1
    7430:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7432:	bf14      	ite	ne
    7434:	f8c3 b018 	strne.w	fp, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7438:	f8c3 b014 	streq.w	fp, [r3, #20]
    743c:	2005      	movs	r0, #5
    743e:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7440:	eb09 080a 	add.w	r8, r9, sl
    7444:	f8c8 4018 	str.w	r4, [r8, #24]
    7448:	2005      	movs	r0, #5
    744a:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    744c:	f8c8 4014 	str.w	r4, [r8, #20]
    7450:	2005      	movs	r0, #5
    7452:	47a8      	blx	r5
    7454:	0876      	lsrs	r6, r6, #1
    7456:	3f01      	subs	r7, #1
    7458:	d1e8      	bne.n	742c <I2C_getTEMPandMOISTURE+0x548>
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    745a:	9b01      	ldr	r3, [sp, #4]
    745c:	f8c3 b004 	str.w	fp, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7460:	4e4d      	ldr	r6, [pc, #308]	; (7598 <I2C_getTEMPandMOISTURE+0x6b4>)
    7462:	9a04      	ldr	r2, [sp, #16]
    7464:	eb06 15c2 	add.w	r5, r6, r2, lsl #7
    7468:	9a07      	ldr	r2, [sp, #28]
    746a:	62aa      	str	r2, [r5, #40]	; 0x28
    746c:	9a08      	ldr	r2, [sp, #32]
    746e:	62aa      	str	r2, [r5, #40]	; 0x28
	I2C_WAITACKOP(-4);
    7470:	2005      	movs	r0, #5
    7472:	4f4a      	ldr	r7, [pc, #296]	; (759c <I2C_getTEMPandMOISTURE+0x6b8>)
    7474:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7476:	9a03      	ldr	r2, [sp, #12]
    7478:	eb06 16c2 	add.w	r6, r6, r2, lsl #7
    747c:	61b4      	str	r4, [r6, #24]
    747e:	2005      	movs	r0, #5
    7480:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    7482:	a811      	add	r0, sp, #68	; 0x44
    7484:	4b46      	ldr	r3, [pc, #280]	; (75a0 <I2C_getTEMPandMOISTURE+0x6bc>)
    7486:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    7488:	9b01      	ldr	r3, [sp, #4]
    748a:	681a      	ldr	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    748c:	6a2b      	ldr	r3, [r5, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    748e:	692d      	ldr	r5, [r5, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    7490:	405d      	eors	r5, r3
    7492:	4015      	ands	r5, r2
    7494:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    7496:	a811      	add	r0, sp, #68	; 0x44
    7498:	4b42      	ldr	r3, [pc, #264]	; (75a4 <I2C_getTEMPandMOISTURE+0x6c0>)
    749a:	4798      	blx	r3
    749c:	ea1b 0f05 	tst.w	fp, r5
    74a0:	f040 80b2 	bne.w	7608 <I2C_getTEMPandMOISTURE+0x724>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    74a4:	4d3c      	ldr	r5, [pc, #240]	; (7598 <I2C_getTEMPandMOISTURE+0x6b4>)
    74a6:	9b03      	ldr	r3, [sp, #12]
    74a8:	eb05 17c3 	add.w	r7, r5, r3, lsl #7
    74ac:	617c      	str	r4, [r7, #20]
    74ae:	2005      	movs	r0, #5
    74b0:	4e3a      	ldr	r6, [pc, #232]	; (759c <I2C_getTEMPandMOISTURE+0x6b8>)
    74b2:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    74b4:	9a04      	ldr	r2, [sp, #16]
    74b6:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    74ba:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    74be:	9a05      	ldr	r2, [sp, #20]
    74c0:	62aa      	str	r2, [r5, #40]	; 0x28
    74c2:	9906      	ldr	r1, [sp, #24]
    74c4:	62a9      	str	r1, [r5, #40]	; 0x28
    74c6:	2005      	movs	r0, #5
    74c8:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    74ca:	61bc      	str	r4, [r7, #24]
    74cc:	f8c5 b018 	str.w	fp, [r5, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    74d0:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    74d4:	9a05      	ldr	r2, [sp, #20]
    74d6:	62aa      	str	r2, [r5, #40]	; 0x28
    74d8:	9906      	ldr	r1, [sp, #24]
    74da:	62a9      	str	r1, [r5, #40]	; 0x28
	
	/* Then restart comms and send address 0x40 */
	I2C_START(-5);
    74dc:	2005      	movs	r0, #5
    74de:	47b0      	blx	r6
    74e0:	2005      	movs	r0, #5
    74e2:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    74e4:	f8c5 b014 	str.w	fp, [r5, #20]
    74e8:	2005      	movs	r0, #5
    74ea:	47b0      	blx	r6
    74ec:	617c      	str	r4, [r7, #20]
    74ee:	2005      	movs	r0, #5
    74f0:	47b0      	blx	r6
    74f2:	2707      	movs	r7, #7
	I2C_SENDADDR(0x40, forloop);
    74f4:	2640      	movs	r6, #64	; 0x40
    74f6:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 7598 <I2C_getTEMPandMOISTURE+0x6b4>
    74fa:	9a02      	ldr	r2, [sp, #8]
    74fc:	eb09 12c2 	add.w	r2, r9, r2, lsl #7
    7500:	9209      	str	r2, [sp, #36]	; 0x24
    7502:	4d26      	ldr	r5, [pc, #152]	; (759c <I2C_getTEMPandMOISTURE+0x6b8>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7504:	9b03      	ldr	r3, [sp, #12]
    7506:	fa03 fa07 	lsl.w	sl, r3, r7
    750a:	f016 0f40 	tst.w	r6, #64	; 0x40
    750e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7510:	bf14      	ite	ne
    7512:	f8c3 b018 	strne.w	fp, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7516:	f8c3 b014 	streq.w	fp, [r3, #20]
    751a:	2005      	movs	r0, #5
    751c:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    751e:	eb09 080a 	add.w	r8, r9, sl
    7522:	f8c8 4018 	str.w	r4, [r8, #24]
    7526:	2005      	movs	r0, #5
    7528:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    752a:	f8c8 4014 	str.w	r4, [r8, #20]
    752e:	2005      	movs	r0, #5
    7530:	47a8      	blx	r5
    7532:	0876      	lsrs	r6, r6, #1
    7534:	3f01      	subs	r7, #1
    7536:	d1e8      	bne.n	750a <I2C_getTEMPandMOISTURE+0x626>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7538:	4d17      	ldr	r5, [pc, #92]	; (7598 <I2C_getTEMPandMOISTURE+0x6b4>)
    753a:	9b04      	ldr	r3, [sp, #16]
    753c:	eb05 16c3 	add.w	r6, r5, r3, lsl #7
    7540:	f8c6 b018 	str.w	fp, [r6, #24]
	I2C_READ();
    7544:	2005      	movs	r0, #5
    7546:	4f15      	ldr	r7, [pc, #84]	; (759c <I2C_getTEMPandMOISTURE+0x6b8>)
    7548:	47b8      	blx	r7
    754a:	9b03      	ldr	r3, [sp, #12]
    754c:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    7550:	61ac      	str	r4, [r5, #24]
    7552:	2005      	movs	r0, #5
    7554:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7556:	616c      	str	r4, [r5, #20]
    7558:	2005      	movs	r0, #5
    755a:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    755c:	9b01      	ldr	r3, [sp, #4]
    755e:	f8c3 b004 	str.w	fp, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7562:	9a07      	ldr	r2, [sp, #28]
    7564:	62b2      	str	r2, [r6, #40]	; 0x28
    7566:	9a08      	ldr	r2, [sp, #32]
    7568:	62b2      	str	r2, [r6, #40]	; 0x28
	I2C_WAITACKIP(-6);
    756a:	2005      	movs	r0, #5
    756c:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    756e:	61ac      	str	r4, [r5, #24]
    7570:	2005      	movs	r0, #5
    7572:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    7574:	a812      	add	r0, sp, #72	; 0x48
    7576:	4b0a      	ldr	r3, [pc, #40]	; (75a0 <I2C_getTEMPandMOISTURE+0x6bc>)
    7578:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    757a:	9b01      	ldr	r3, [sp, #4]
    757c:	681a      	ldr	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    757e:	6a33      	ldr	r3, [r6, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    7580:	6935      	ldr	r5, [r6, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    7582:	405d      	eors	r5, r3
    7584:	4015      	ands	r5, r2
    7586:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    7588:	a812      	add	r0, sp, #72	; 0x48
    758a:	4b06      	ldr	r3, [pc, #24]	; (75a4 <I2C_getTEMPandMOISTURE+0x6c0>)
    758c:	4798      	blx	r3
    758e:	ea1b 0f05 	tst.w	fp, r5
    7592:	d153      	bne.n	763c <I2C_getTEMPandMOISTURE+0x758>
    7594:	e008      	b.n	75a8 <I2C_getTEMPandMOISTURE+0x6c4>
    7596:	bf00      	nop
    7598:	41008000 	.word	0x41008000
    759c:	0000152d 	.word	0x0000152d
    75a0:	000014cd 	.word	0x000014cd
    75a4:	000014db 	.word	0x000014db
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    75a8:	9d03      	ldr	r5, [sp, #12]
    75aa:	01eb      	lsls	r3, r5, #7
    75ac:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    75b0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    75b4:	615c      	str	r4, [r3, #20]
    75b6:	2005      	movs	r0, #5
    75b8:	4b3f      	ldr	r3, [pc, #252]	; (76b8 <I2C_getTEMPandMOISTURE+0x7d4>)
    75ba:	4798      	blx	r3

	*th = 0;
    75bc:	2300      	movs	r3, #0
    75be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    75c0:	7013      	strb	r3, [r2, #0]
    75c2:	2608      	movs	r6, #8
	
	/* Beginning of the for-loops that captures data and read the upper 8-bits of the temperature */
	for (forloop = 0x80; forloop > 0;) {
    75c4:	2780      	movs	r7, #128	; 0x80
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    75c6:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 76bc <I2C_getTEMPandMOISTURE+0x7d8>
    75ca:	eb0a 19c5 	add.w	r9, sl, r5, lsl #7
		I2C_clockhi();
    75ce:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 76b8 <I2C_getTEMPandMOISTURE+0x7d4>
    75d2:	e054      	b.n	767e <I2C_getTEMPandMOISTURE+0x79a>
    75d4:	4d39      	ldr	r5, [pc, #228]	; (76bc <I2C_getTEMPandMOISTURE+0x7d8>)
    75d6:	9b03      	ldr	r3, [sp, #12]
    75d8:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    75dc:	619c      	str	r4, [r3, #24]
	I2C_WAITACKOP(-3);
    75de:	2005      	movs	r0, #5
    75e0:	47b8      	blx	r7
    75e2:	9b04      	ldr	r3, [sp, #16]
    75e4:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    75e8:	f8c5 b018 	str.w	fp, [r5, #24]
    75ec:	2005      	movs	r0, #5
    75ee:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    75f0:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    75f4:	9b05      	ldr	r3, [sp, #20]
    75f6:	62ab      	str	r3, [r5, #40]	; 0x28
    75f8:	9b06      	ldr	r3, [sp, #24]
    75fa:	62ab      	str	r3, [r5, #40]	; 0x28
    75fc:	2005      	movs	r0, #5
    75fe:	47b8      	blx	r7
    7600:	f06f 0002 	mvn.w	r0, #2
    7604:	f000 bc3f 	b.w	7e86 <I2C_getTEMPandMOISTURE+0xfa2>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7608:	4d2c      	ldr	r5, [pc, #176]	; (76bc <I2C_getTEMPandMOISTURE+0x7d8>)
    760a:	9b03      	ldr	r3, [sp, #12]
    760c:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    7610:	619c      	str	r4, [r3, #24]
	I2C_WAITACKOP(-4);
    7612:	2005      	movs	r0, #5
    7614:	47b8      	blx	r7
    7616:	9b04      	ldr	r3, [sp, #16]
    7618:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    761c:	f8c5 b018 	str.w	fp, [r5, #24]
    7620:	2005      	movs	r0, #5
    7622:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    7624:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7628:	9b05      	ldr	r3, [sp, #20]
    762a:	62ab      	str	r3, [r5, #40]	; 0x28
    762c:	9b06      	ldr	r3, [sp, #24]
    762e:	62ab      	str	r3, [r5, #40]	; 0x28
    7630:	2005      	movs	r0, #5
    7632:	47b8      	blx	r7
    7634:	f06f 0003 	mvn.w	r0, #3
    7638:	f000 bc25 	b.w	7e86 <I2C_getTEMPandMOISTURE+0xfa2>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    763c:	4d1f      	ldr	r5, [pc, #124]	; (76bc <I2C_getTEMPandMOISTURE+0x7d8>)
    763e:	9b03      	ldr	r3, [sp, #12]
    7640:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    7644:	619c      	str	r4, [r3, #24]
	I2C_WAITACKIP(-6);
    7646:	2005      	movs	r0, #5
    7648:	47b8      	blx	r7
    764a:	9b04      	ldr	r3, [sp, #16]
    764c:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    7650:	f8c5 b018 	str.w	fp, [r5, #24]
    7654:	2005      	movs	r0, #5
    7656:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    7658:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    765c:	9b05      	ldr	r3, [sp, #20]
    765e:	62ab      	str	r3, [r5, #40]	; 0x28
    7660:	9b06      	ldr	r3, [sp, #24]
    7662:	62ab      	str	r3, [r5, #40]	; 0x28
    7664:	2005      	movs	r0, #5
    7666:	47b8      	blx	r7
    7668:	f06f 0005 	mvn.w	r0, #5
    766c:	f000 bc0b 	b.w	7e86 <I2C_getTEMPandMOISTURE+0xfa2>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7670:	f8c9 4014 	str.w	r4, [r9, #20]
		if (gpio_get_pin_level(i2csda)) {
			(*th) |= forloop;
		}

		I2C_clocklo();
    7674:	2005      	movs	r0, #5
    7676:	47c0      	blx	r8
		forloop = forloop / 2;
    7678:	087f      	lsrs	r7, r7, #1
	for (forloop = 0x80; forloop > 0;) {
    767a:	3e01      	subs	r6, #1
    767c:	d024      	beq.n	76c8 <I2C_getTEMPandMOISTURE+0x7e4>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    767e:	f8c9 4018 	str.w	r4, [r9, #24]
		I2C_clockhi();
    7682:	2005      	movs	r0, #5
    7684:	47c0      	blx	r8
	CRITICAL_SECTION_ENTER();
    7686:	a813      	add	r0, sp, #76	; 0x4c
    7688:	4b0d      	ldr	r3, [pc, #52]	; (76c0 <I2C_getTEMPandMOISTURE+0x7dc>)
    768a:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    768c:	9b01      	ldr	r3, [sp, #4]
    768e:	6819      	ldr	r1, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    7690:	9b02      	ldr	r3, [sp, #8]
    7692:	eb0a 12c3 	add.w	r2, sl, r3, lsl #7
    7696:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    7698:	6915      	ldr	r5, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    769a:	405d      	eors	r5, r3
    769c:	400d      	ands	r5, r1
    769e:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    76a0:	a813      	add	r0, sp, #76	; 0x4c
    76a2:	4b08      	ldr	r3, [pc, #32]	; (76c4 <I2C_getTEMPandMOISTURE+0x7e0>)
    76a4:	4798      	blx	r3
		if (gpio_get_pin_level(i2csda)) {
    76a6:	ea1b 0f05 	tst.w	fp, r5
    76aa:	d0e1      	beq.n	7670 <I2C_getTEMPandMOISTURE+0x78c>
			(*th) |= forloop;
    76ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    76ae:	7813      	ldrb	r3, [r2, #0]
    76b0:	433b      	orrs	r3, r7
    76b2:	7013      	strb	r3, [r2, #0]
    76b4:	e7dc      	b.n	7670 <I2C_getTEMPandMOISTURE+0x78c>
    76b6:	bf00      	nop
    76b8:	0000152d 	.word	0x0000152d
    76bc:	41008000 	.word	0x41008000
    76c0:	000014cd 	.word	0x000014cd
    76c4:	000014db 	.word	0x000014db
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    76c8:	4da8      	ldr	r5, [pc, #672]	; (796c <I2C_getTEMPandMOISTURE+0xa88>)
    76ca:	9b03      	ldr	r3, [sp, #12]
    76cc:	eb05 17c3 	add.w	r7, r5, r3, lsl #7
    76d0:	61bc      	str	r4, [r7, #24]
	}

	I2C_STOP();
    76d2:	2005      	movs	r0, #5
    76d4:	4ea6      	ldr	r6, [pc, #664]	; (7970 <I2C_getTEMPandMOISTURE+0xa8c>)
    76d6:	47b0      	blx	r6
    76d8:	9a04      	ldr	r2, [sp, #16]
    76da:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    76de:	f8c5 b018 	str.w	fp, [r5, #24]
    76e2:	2005      	movs	r0, #5
    76e4:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    76e6:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    76ea:	9a05      	ldr	r2, [sp, #20]
    76ec:	62aa      	str	r2, [r5, #40]	; 0x28
    76ee:	9906      	ldr	r1, [sp, #24]
    76f0:	62a9      	str	r1, [r5, #40]	; 0x28
    76f2:	2005      	movs	r0, #5
    76f4:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    76f6:	61bc      	str	r4, [r7, #24]
    76f8:	f8c5 b018 	str.w	fp, [r5, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    76fc:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7700:	9a05      	ldr	r2, [sp, #20]
    7702:	62aa      	str	r2, [r5, #40]	; 0x28
    7704:	9906      	ldr	r1, [sp, #24]
    7706:	62a9      	str	r1, [r5, #40]	; 0x28
	I2C_CLOSE();
	/* If successful, and code execution got here, the close the I2C channel */
	
	/* Open an I2C channel, send address 0x40, index register 0x02 */
	I2C_OPEN(sda, clk);
	I2C_START(-2);
    7708:	2005      	movs	r0, #5
    770a:	47b0      	blx	r6
    770c:	2005      	movs	r0, #5
    770e:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7710:	f8c5 b014 	str.w	fp, [r5, #20]
    7714:	2005      	movs	r0, #5
    7716:	47b0      	blx	r6
    7718:	617c      	str	r4, [r7, #20]
    771a:	2005      	movs	r0, #5
    771c:	47b0      	blx	r6
    771e:	2707      	movs	r7, #7
	I2C_SENDADDR(0x40, forloop);
    7720:	2640      	movs	r6, #64	; 0x40
    7722:	f8df 9248 	ldr.w	r9, [pc, #584]	; 796c <I2C_getTEMPandMOISTURE+0xa88>
    7726:	9a02      	ldr	r2, [sp, #8]
    7728:	eb09 12c2 	add.w	r2, r9, r2, lsl #7
    772c:	9209      	str	r2, [sp, #36]	; 0x24
    772e:	4d90      	ldr	r5, [pc, #576]	; (7970 <I2C_getTEMPandMOISTURE+0xa8c>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7730:	9b03      	ldr	r3, [sp, #12]
    7732:	fa03 fa07 	lsl.w	sl, r3, r7
    7736:	f016 0f40 	tst.w	r6, #64	; 0x40
    773a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    773c:	bf14      	ite	ne
    773e:	f8c3 b018 	strne.w	fp, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7742:	f8c3 b014 	streq.w	fp, [r3, #20]
    7746:	2005      	movs	r0, #5
    7748:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    774a:	eb09 080a 	add.w	r8, r9, sl
    774e:	f8c8 4018 	str.w	r4, [r8, #24]
    7752:	2005      	movs	r0, #5
    7754:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7756:	f8c8 4014 	str.w	r4, [r8, #20]
    775a:	2005      	movs	r0, #5
    775c:	47a8      	blx	r5
    775e:	0876      	lsrs	r6, r6, #1
    7760:	3f01      	subs	r7, #1
    7762:	d1e8      	bne.n	7736 <I2C_getTEMPandMOISTURE+0x852>
    7764:	4d81      	ldr	r5, [pc, #516]	; (796c <I2C_getTEMPandMOISTURE+0xa88>)
    7766:	9b04      	ldr	r3, [sp, #16]
    7768:	eb05 16c3 	add.w	r6, r5, r3, lsl #7
    776c:	f8c6 b014 	str.w	fp, [r6, #20]
	I2C_WRITE();
    7770:	2005      	movs	r0, #5
    7772:	4f7f      	ldr	r7, [pc, #508]	; (7970 <I2C_getTEMPandMOISTURE+0xa8c>)
    7774:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7776:	9b03      	ldr	r3, [sp, #12]
    7778:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    777c:	61ac      	str	r4, [r5, #24]
    777e:	2005      	movs	r0, #5
    7780:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7782:	616c      	str	r4, [r5, #20]
    7784:	2005      	movs	r0, #5
    7786:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    7788:	9b01      	ldr	r3, [sp, #4]
    778a:	f8c3 b004 	str.w	fp, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    778e:	9a07      	ldr	r2, [sp, #28]
    7790:	62b2      	str	r2, [r6, #40]	; 0x28
    7792:	9a08      	ldr	r2, [sp, #32]
    7794:	62b2      	str	r2, [r6, #40]	; 0x28
	I2C_WAITACKOP(-3);
    7796:	2005      	movs	r0, #5
    7798:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    779a:	61ac      	str	r4, [r5, #24]
    779c:	2005      	movs	r0, #5
    779e:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    77a0:	a814      	add	r0, sp, #80	; 0x50
    77a2:	4b74      	ldr	r3, [pc, #464]	; (7974 <I2C_getTEMPandMOISTURE+0xa90>)
    77a4:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    77a6:	9b01      	ldr	r3, [sp, #4]
    77a8:	681a      	ldr	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    77aa:	6a33      	ldr	r3, [r6, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    77ac:	6935      	ldr	r5, [r6, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    77ae:	405d      	eors	r5, r3
    77b0:	4015      	ands	r5, r2
    77b2:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    77b4:	a814      	add	r0, sp, #80	; 0x50
    77b6:	4b70      	ldr	r3, [pc, #448]	; (7978 <I2C_getTEMPandMOISTURE+0xa94>)
    77b8:	4798      	blx	r3
    77ba:	ea1b 0f05 	tst.w	fp, r5
    77be:	f040 80f3 	bne.w	79a8 <I2C_getTEMPandMOISTURE+0xac4>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    77c2:	4d6a      	ldr	r5, [pc, #424]	; (796c <I2C_getTEMPandMOISTURE+0xa88>)
    77c4:	9b03      	ldr	r3, [sp, #12]
    77c6:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    77ca:	615c      	str	r4, [r3, #20]
    77cc:	2005      	movs	r0, #5
    77ce:	4e68      	ldr	r6, [pc, #416]	; (7970 <I2C_getTEMPandMOISTURE+0xa8c>)
    77d0:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    77d2:	9a04      	ldr	r2, [sp, #16]
    77d4:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    77d8:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    77dc:	9a05      	ldr	r2, [sp, #20]
    77de:	62aa      	str	r2, [r5, #40]	; 0x28
    77e0:	9a06      	ldr	r2, [sp, #24]
    77e2:	62aa      	str	r2, [r5, #40]	; 0x28
    77e4:	2005      	movs	r0, #5
    77e6:	47b0      	blx	r6
    77e8:	2608      	movs	r6, #8
	I2C_SENDDATA(0x02, forloop);
    77ea:	2580      	movs	r5, #128	; 0x80
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    77ec:	f8df 917c 	ldr.w	r9, [pc, #380]	; 796c <I2C_getTEMPandMOISTURE+0xa88>
    77f0:	9a02      	ldr	r2, [sp, #8]
    77f2:	eb09 12c2 	add.w	r2, r9, r2, lsl #7
    77f6:	9209      	str	r2, [sp, #36]	; 0x24
    77f8:	4f5d      	ldr	r7, [pc, #372]	; (7970 <I2C_getTEMPandMOISTURE+0xa8c>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    77fa:	9b03      	ldr	r3, [sp, #12]
    77fc:	ea4f 1ac3 	mov.w	sl, r3, lsl #7
    7800:	f015 0f02 	tst.w	r5, #2
    7804:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7806:	bf14      	ite	ne
    7808:	f8c3 b018 	strne.w	fp, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    780c:	f8c3 b014 	streq.w	fp, [r3, #20]
    7810:	2005      	movs	r0, #5
    7812:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7814:	eb09 080a 	add.w	r8, r9, sl
    7818:	f8c8 4018 	str.w	r4, [r8, #24]
    781c:	2005      	movs	r0, #5
    781e:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7820:	f8c8 4014 	str.w	r4, [r8, #20]
    7824:	2005      	movs	r0, #5
    7826:	47b8      	blx	r7
    7828:	086d      	lsrs	r5, r5, #1
    782a:	3e01      	subs	r6, #1
    782c:	d1e8      	bne.n	7800 <I2C_getTEMPandMOISTURE+0x91c>
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    782e:	9b01      	ldr	r3, [sp, #4]
    7830:	f8c3 b004 	str.w	fp, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7834:	4e4d      	ldr	r6, [pc, #308]	; (796c <I2C_getTEMPandMOISTURE+0xa88>)
    7836:	9a04      	ldr	r2, [sp, #16]
    7838:	eb06 15c2 	add.w	r5, r6, r2, lsl #7
    783c:	9a07      	ldr	r2, [sp, #28]
    783e:	62aa      	str	r2, [r5, #40]	; 0x28
    7840:	9a08      	ldr	r2, [sp, #32]
    7842:	62aa      	str	r2, [r5, #40]	; 0x28
	I2C_WAITACKOP(-4);
    7844:	2005      	movs	r0, #5
    7846:	4f4a      	ldr	r7, [pc, #296]	; (7970 <I2C_getTEMPandMOISTURE+0xa8c>)
    7848:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    784a:	9a03      	ldr	r2, [sp, #12]
    784c:	eb06 16c2 	add.w	r6, r6, r2, lsl #7
    7850:	61b4      	str	r4, [r6, #24]
    7852:	2005      	movs	r0, #5
    7854:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    7856:	a815      	add	r0, sp, #84	; 0x54
    7858:	4b46      	ldr	r3, [pc, #280]	; (7974 <I2C_getTEMPandMOISTURE+0xa90>)
    785a:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    785c:	9b01      	ldr	r3, [sp, #4]
    785e:	681a      	ldr	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    7860:	6a2b      	ldr	r3, [r5, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    7862:	692d      	ldr	r5, [r5, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    7864:	405d      	eors	r5, r3
    7866:	4015      	ands	r5, r2
    7868:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    786a:	a815      	add	r0, sp, #84	; 0x54
    786c:	4b42      	ldr	r3, [pc, #264]	; (7978 <I2C_getTEMPandMOISTURE+0xa94>)
    786e:	4798      	blx	r3
    7870:	ea1b 0f05 	tst.w	fp, r5
    7874:	f040 80b1 	bne.w	79da <I2C_getTEMPandMOISTURE+0xaf6>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7878:	4d3c      	ldr	r5, [pc, #240]	; (796c <I2C_getTEMPandMOISTURE+0xa88>)
    787a:	9b03      	ldr	r3, [sp, #12]
    787c:	eb05 17c3 	add.w	r7, r5, r3, lsl #7
    7880:	617c      	str	r4, [r7, #20]
    7882:	2005      	movs	r0, #5
    7884:	4e3a      	ldr	r6, [pc, #232]	; (7970 <I2C_getTEMPandMOISTURE+0xa8c>)
    7886:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    7888:	9a04      	ldr	r2, [sp, #16]
    788a:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    788e:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7892:	9a05      	ldr	r2, [sp, #20]
    7894:	62aa      	str	r2, [r5, #40]	; 0x28
    7896:	9906      	ldr	r1, [sp, #24]
    7898:	62a9      	str	r1, [r5, #40]	; 0x28
    789a:	2005      	movs	r0, #5
    789c:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    789e:	61bc      	str	r4, [r7, #24]
    78a0:	f8c5 b018 	str.w	fp, [r5, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    78a4:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    78a8:	9a05      	ldr	r2, [sp, #20]
    78aa:	62aa      	str	r2, [r5, #40]	; 0x28
    78ac:	9906      	ldr	r1, [sp, #24]
    78ae:	62a9      	str	r1, [r5, #40]	; 0x28
	
	/* Then restart comms and send address 0x40 */
	I2C_START(-5);
    78b0:	2005      	movs	r0, #5
    78b2:	47b0      	blx	r6
    78b4:	2005      	movs	r0, #5
    78b6:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    78b8:	f8c5 b014 	str.w	fp, [r5, #20]
    78bc:	2005      	movs	r0, #5
    78be:	47b0      	blx	r6
    78c0:	617c      	str	r4, [r7, #20]
    78c2:	2005      	movs	r0, #5
    78c4:	47b0      	blx	r6
    78c6:	2707      	movs	r7, #7
	I2C_SENDADDR(0x40, forloop);
    78c8:	2640      	movs	r6, #64	; 0x40
    78ca:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 796c <I2C_getTEMPandMOISTURE+0xa88>
    78ce:	9a02      	ldr	r2, [sp, #8]
    78d0:	eb09 12c2 	add.w	r2, r9, r2, lsl #7
    78d4:	9209      	str	r2, [sp, #36]	; 0x24
    78d6:	4d26      	ldr	r5, [pc, #152]	; (7970 <I2C_getTEMPandMOISTURE+0xa8c>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    78d8:	9b03      	ldr	r3, [sp, #12]
    78da:	fa03 fa07 	lsl.w	sl, r3, r7
    78de:	f016 0f40 	tst.w	r6, #64	; 0x40
    78e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    78e4:	bf14      	ite	ne
    78e6:	f8c3 b018 	strne.w	fp, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    78ea:	f8c3 b014 	streq.w	fp, [r3, #20]
    78ee:	2005      	movs	r0, #5
    78f0:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    78f2:	eb09 080a 	add.w	r8, r9, sl
    78f6:	f8c8 4018 	str.w	r4, [r8, #24]
    78fa:	2005      	movs	r0, #5
    78fc:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    78fe:	f8c8 4014 	str.w	r4, [r8, #20]
    7902:	2005      	movs	r0, #5
    7904:	47a8      	blx	r5
    7906:	0876      	lsrs	r6, r6, #1
    7908:	3f01      	subs	r7, #1
    790a:	d1e8      	bne.n	78de <I2C_getTEMPandMOISTURE+0x9fa>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    790c:	4d17      	ldr	r5, [pc, #92]	; (796c <I2C_getTEMPandMOISTURE+0xa88>)
    790e:	9b04      	ldr	r3, [sp, #16]
    7910:	eb05 16c3 	add.w	r6, r5, r3, lsl #7
    7914:	f8c6 b018 	str.w	fp, [r6, #24]
	I2C_READ();
    7918:	2005      	movs	r0, #5
    791a:	4f15      	ldr	r7, [pc, #84]	; (7970 <I2C_getTEMPandMOISTURE+0xa8c>)
    791c:	47b8      	blx	r7
    791e:	9b03      	ldr	r3, [sp, #12]
    7920:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    7924:	61ac      	str	r4, [r5, #24]
    7926:	2005      	movs	r0, #5
    7928:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    792a:	616c      	str	r4, [r5, #20]
    792c:	2005      	movs	r0, #5
    792e:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    7930:	9b01      	ldr	r3, [sp, #4]
    7932:	f8c3 b004 	str.w	fp, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7936:	9a07      	ldr	r2, [sp, #28]
    7938:	62b2      	str	r2, [r6, #40]	; 0x28
    793a:	9a08      	ldr	r2, [sp, #32]
    793c:	62b2      	str	r2, [r6, #40]	; 0x28
	I2C_WAITACKIP(-6);
    793e:	2005      	movs	r0, #5
    7940:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7942:	61ac      	str	r4, [r5, #24]
    7944:	2005      	movs	r0, #5
    7946:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    7948:	a816      	add	r0, sp, #88	; 0x58
    794a:	4b0a      	ldr	r3, [pc, #40]	; (7974 <I2C_getTEMPandMOISTURE+0xa90>)
    794c:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    794e:	9b01      	ldr	r3, [sp, #4]
    7950:	681a      	ldr	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    7952:	6a33      	ldr	r3, [r6, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    7954:	6935      	ldr	r5, [r6, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    7956:	405d      	eors	r5, r3
    7958:	4015      	ands	r5, r2
    795a:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    795c:	a816      	add	r0, sp, #88	; 0x58
    795e:	4b06      	ldr	r3, [pc, #24]	; (7978 <I2C_getTEMPandMOISTURE+0xa94>)
    7960:	4798      	blx	r3
    7962:	ea1b 0f05 	tst.w	fp, r5
    7966:	d151      	bne.n	7a0c <I2C_getTEMPandMOISTURE+0xb28>
    7968:	e008      	b.n	797c <I2C_getTEMPandMOISTURE+0xa98>
    796a:	bf00      	nop
    796c:	41008000 	.word	0x41008000
    7970:	0000152d 	.word	0x0000152d
    7974:	000014cd 	.word	0x000014cd
    7978:	000014db 	.word	0x000014db
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    797c:	9d03      	ldr	r5, [sp, #12]
    797e:	01eb      	lsls	r3, r5, #7
    7980:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    7984:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    7988:	615c      	str	r4, [r3, #20]
    798a:	2005      	movs	r0, #5
    798c:	4b3e      	ldr	r3, [pc, #248]	; (7a88 <I2C_getTEMPandMOISTURE+0xba4>)
    798e:	4798      	blx	r3

	*hl = 0;
    7990:	2300      	movs	r3, #0
    7992:	9a27      	ldr	r2, [sp, #156]	; 0x9c
    7994:	7013      	strb	r3, [r2, #0]
    7996:	2608      	movs	r6, #8
	
	/* Beginning of the for-loops that captures data and read the lower 8-bits of the humidity */
	for (forloop = 0x80; forloop > 0;) {
    7998:	2780      	movs	r7, #128	; 0x80
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    799a:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 7a8c <I2C_getTEMPandMOISTURE+0xba8>
    799e:	eb0a 19c5 	add.w	r9, sl, r5, lsl #7
		I2C_clockhi();
    79a2:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 7a88 <I2C_getTEMPandMOISTURE+0xba4>
    79a6:	e051      	b.n	7a4c <I2C_getTEMPandMOISTURE+0xb68>
    79a8:	4d38      	ldr	r5, [pc, #224]	; (7a8c <I2C_getTEMPandMOISTURE+0xba8>)
    79aa:	9b03      	ldr	r3, [sp, #12]
    79ac:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    79b0:	619c      	str	r4, [r3, #24]
	I2C_WAITACKOP(-3);
    79b2:	2005      	movs	r0, #5
    79b4:	47b8      	blx	r7
    79b6:	9b04      	ldr	r3, [sp, #16]
    79b8:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    79bc:	f8c5 b018 	str.w	fp, [r5, #24]
    79c0:	2005      	movs	r0, #5
    79c2:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    79c4:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    79c8:	9b05      	ldr	r3, [sp, #20]
    79ca:	62ab      	str	r3, [r5, #40]	; 0x28
    79cc:	9b06      	ldr	r3, [sp, #24]
    79ce:	62ab      	str	r3, [r5, #40]	; 0x28
    79d0:	2005      	movs	r0, #5
    79d2:	47b8      	blx	r7
    79d4:	f06f 0002 	mvn.w	r0, #2
    79d8:	e255      	b.n	7e86 <I2C_getTEMPandMOISTURE+0xfa2>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    79da:	4d2c      	ldr	r5, [pc, #176]	; (7a8c <I2C_getTEMPandMOISTURE+0xba8>)
    79dc:	9b03      	ldr	r3, [sp, #12]
    79de:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    79e2:	619c      	str	r4, [r3, #24]
	I2C_WAITACKOP(-4);
    79e4:	2005      	movs	r0, #5
    79e6:	47b8      	blx	r7
    79e8:	9b04      	ldr	r3, [sp, #16]
    79ea:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    79ee:	f8c5 b018 	str.w	fp, [r5, #24]
    79f2:	2005      	movs	r0, #5
    79f4:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    79f6:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    79fa:	9b05      	ldr	r3, [sp, #20]
    79fc:	62ab      	str	r3, [r5, #40]	; 0x28
    79fe:	9b06      	ldr	r3, [sp, #24]
    7a00:	62ab      	str	r3, [r5, #40]	; 0x28
    7a02:	2005      	movs	r0, #5
    7a04:	47b8      	blx	r7
    7a06:	f06f 0003 	mvn.w	r0, #3
    7a0a:	e23c      	b.n	7e86 <I2C_getTEMPandMOISTURE+0xfa2>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7a0c:	4d1f      	ldr	r5, [pc, #124]	; (7a8c <I2C_getTEMPandMOISTURE+0xba8>)
    7a0e:	9b03      	ldr	r3, [sp, #12]
    7a10:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    7a14:	619c      	str	r4, [r3, #24]
	I2C_WAITACKIP(-6);
    7a16:	2005      	movs	r0, #5
    7a18:	47b8      	blx	r7
    7a1a:	9b04      	ldr	r3, [sp, #16]
    7a1c:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    7a20:	f8c5 b018 	str.w	fp, [r5, #24]
    7a24:	2005      	movs	r0, #5
    7a26:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    7a28:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7a2c:	9b05      	ldr	r3, [sp, #20]
    7a2e:	62ab      	str	r3, [r5, #40]	; 0x28
    7a30:	9b06      	ldr	r3, [sp, #24]
    7a32:	62ab      	str	r3, [r5, #40]	; 0x28
    7a34:	2005      	movs	r0, #5
    7a36:	47b8      	blx	r7
    7a38:	f06f 0005 	mvn.w	r0, #5
    7a3c:	e223      	b.n	7e86 <I2C_getTEMPandMOISTURE+0xfa2>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7a3e:	f8c9 4014 	str.w	r4, [r9, #20]
		if (gpio_get_pin_level(i2csda)) {
			(*hl) |= forloop;
		}

		I2C_clocklo();
    7a42:	2005      	movs	r0, #5
    7a44:	47c0      	blx	r8
		forloop = forloop / 2;
    7a46:	087f      	lsrs	r7, r7, #1
	for (forloop = 0x80; forloop > 0;) {
    7a48:	3e01      	subs	r6, #1
    7a4a:	d025      	beq.n	7a98 <I2C_getTEMPandMOISTURE+0xbb4>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7a4c:	f8c9 4018 	str.w	r4, [r9, #24]
		I2C_clockhi();
    7a50:	2005      	movs	r0, #5
    7a52:	47c0      	blx	r8
	CRITICAL_SECTION_ENTER();
    7a54:	a817      	add	r0, sp, #92	; 0x5c
    7a56:	4b0e      	ldr	r3, [pc, #56]	; (7a90 <I2C_getTEMPandMOISTURE+0xbac>)
    7a58:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    7a5a:	9b01      	ldr	r3, [sp, #4]
    7a5c:	6819      	ldr	r1, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    7a5e:	9b02      	ldr	r3, [sp, #8]
    7a60:	eb0a 12c3 	add.w	r2, sl, r3, lsl #7
    7a64:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    7a66:	6915      	ldr	r5, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    7a68:	405d      	eors	r5, r3
    7a6a:	400d      	ands	r5, r1
    7a6c:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    7a6e:	a817      	add	r0, sp, #92	; 0x5c
    7a70:	4b08      	ldr	r3, [pc, #32]	; (7a94 <I2C_getTEMPandMOISTURE+0xbb0>)
    7a72:	4798      	blx	r3
		if (gpio_get_pin_level(i2csda)) {
    7a74:	ea1b 0f05 	tst.w	fp, r5
    7a78:	d0e1      	beq.n	7a3e <I2C_getTEMPandMOISTURE+0xb5a>
			(*hl) |= forloop;
    7a7a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    7a7c:	781b      	ldrb	r3, [r3, #0]
    7a7e:	433b      	orrs	r3, r7
    7a80:	9a27      	ldr	r2, [sp, #156]	; 0x9c
    7a82:	7013      	strb	r3, [r2, #0]
    7a84:	e7db      	b.n	7a3e <I2C_getTEMPandMOISTURE+0xb5a>
    7a86:	bf00      	nop
    7a88:	0000152d 	.word	0x0000152d
    7a8c:	41008000 	.word	0x41008000
    7a90:	000014cd 	.word	0x000014cd
    7a94:	000014db 	.word	0x000014db
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7a98:	4da8      	ldr	r5, [pc, #672]	; (7d3c <I2C_getTEMPandMOISTURE+0xe58>)
    7a9a:	9b03      	ldr	r3, [sp, #12]
    7a9c:	eb05 17c3 	add.w	r7, r5, r3, lsl #7
    7aa0:	61bc      	str	r4, [r7, #24]
	}

	I2C_STOP();
    7aa2:	2005      	movs	r0, #5
    7aa4:	4ea6      	ldr	r6, [pc, #664]	; (7d40 <I2C_getTEMPandMOISTURE+0xe5c>)
    7aa6:	47b0      	blx	r6
    7aa8:	9a04      	ldr	r2, [sp, #16]
    7aaa:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    7aae:	f8c5 b018 	str.w	fp, [r5, #24]
    7ab2:	2005      	movs	r0, #5
    7ab4:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    7ab6:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7aba:	9a05      	ldr	r2, [sp, #20]
    7abc:	62aa      	str	r2, [r5, #40]	; 0x28
    7abe:	9906      	ldr	r1, [sp, #24]
    7ac0:	62a9      	str	r1, [r5, #40]	; 0x28
    7ac2:	2005      	movs	r0, #5
    7ac4:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7ac6:	61bc      	str	r4, [r7, #24]
    7ac8:	f8c5 b018 	str.w	fp, [r5, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    7acc:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7ad0:	9a05      	ldr	r2, [sp, #20]
    7ad2:	62aa      	str	r2, [r5, #40]	; 0x28
    7ad4:	9906      	ldr	r1, [sp, #24]
    7ad6:	62a9      	str	r1, [r5, #40]	; 0x28
	I2C_CLOSE();
	/* If successful, and code execution got here, the close the I2C channel */
	
	/* Open an I2C channel, send address 0x40, index register 0x03 */
	I2C_OPEN(sda, clk);
	I2C_START(-2);
    7ad8:	2005      	movs	r0, #5
    7ada:	47b0      	blx	r6
    7adc:	2005      	movs	r0, #5
    7ade:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7ae0:	f8c5 b014 	str.w	fp, [r5, #20]
    7ae4:	2005      	movs	r0, #5
    7ae6:	47b0      	blx	r6
    7ae8:	617c      	str	r4, [r7, #20]
    7aea:	2005      	movs	r0, #5
    7aec:	47b0      	blx	r6
    7aee:	2607      	movs	r6, #7
	I2C_SENDADDR(0x40, forloop);
    7af0:	2540      	movs	r5, #64	; 0x40
    7af2:	f8df 9248 	ldr.w	r9, [pc, #584]	; 7d3c <I2C_getTEMPandMOISTURE+0xe58>
    7af6:	9a02      	ldr	r2, [sp, #8]
    7af8:	eb09 12c2 	add.w	r2, r9, r2, lsl #7
    7afc:	9209      	str	r2, [sp, #36]	; 0x24
    7afe:	4f90      	ldr	r7, [pc, #576]	; (7d40 <I2C_getTEMPandMOISTURE+0xe5c>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7b00:	9b03      	ldr	r3, [sp, #12]
    7b02:	fa03 fa06 	lsl.w	sl, r3, r6
    7b06:	f015 0f40 	tst.w	r5, #64	; 0x40
    7b0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7b0c:	bf14      	ite	ne
    7b0e:	f8c3 b018 	strne.w	fp, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7b12:	f8c3 b014 	streq.w	fp, [r3, #20]
    7b16:	2005      	movs	r0, #5
    7b18:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7b1a:	eb09 080a 	add.w	r8, r9, sl
    7b1e:	f8c8 4018 	str.w	r4, [r8, #24]
    7b22:	2005      	movs	r0, #5
    7b24:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7b26:	f8c8 4014 	str.w	r4, [r8, #20]
    7b2a:	2005      	movs	r0, #5
    7b2c:	47b8      	blx	r7
    7b2e:	086d      	lsrs	r5, r5, #1
    7b30:	3e01      	subs	r6, #1
    7b32:	d1e8      	bne.n	7b06 <I2C_getTEMPandMOISTURE+0xc22>
    7b34:	4d81      	ldr	r5, [pc, #516]	; (7d3c <I2C_getTEMPandMOISTURE+0xe58>)
    7b36:	9b04      	ldr	r3, [sp, #16]
    7b38:	eb05 16c3 	add.w	r6, r5, r3, lsl #7
    7b3c:	f8c6 b014 	str.w	fp, [r6, #20]
	I2C_WRITE();
    7b40:	2005      	movs	r0, #5
    7b42:	4f7f      	ldr	r7, [pc, #508]	; (7d40 <I2C_getTEMPandMOISTURE+0xe5c>)
    7b44:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7b46:	9b03      	ldr	r3, [sp, #12]
    7b48:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    7b4c:	61ac      	str	r4, [r5, #24]
    7b4e:	2005      	movs	r0, #5
    7b50:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7b52:	616c      	str	r4, [r5, #20]
    7b54:	2005      	movs	r0, #5
    7b56:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    7b58:	9b01      	ldr	r3, [sp, #4]
    7b5a:	f8c3 b004 	str.w	fp, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7b5e:	9a07      	ldr	r2, [sp, #28]
    7b60:	62b2      	str	r2, [r6, #40]	; 0x28
    7b62:	9a08      	ldr	r2, [sp, #32]
    7b64:	62b2      	str	r2, [r6, #40]	; 0x28
	I2C_WAITACKOP(-3);
    7b66:	2005      	movs	r0, #5
    7b68:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7b6a:	61ac      	str	r4, [r5, #24]
    7b6c:	2005      	movs	r0, #5
    7b6e:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    7b70:	a818      	add	r0, sp, #96	; 0x60
    7b72:	4b74      	ldr	r3, [pc, #464]	; (7d44 <I2C_getTEMPandMOISTURE+0xe60>)
    7b74:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    7b76:	9b01      	ldr	r3, [sp, #4]
    7b78:	681a      	ldr	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    7b7a:	6a33      	ldr	r3, [r6, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    7b7c:	6935      	ldr	r5, [r6, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    7b7e:	405d      	eors	r5, r3
    7b80:	4015      	ands	r5, r2
    7b82:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    7b84:	a818      	add	r0, sp, #96	; 0x60
    7b86:	4b70      	ldr	r3, [pc, #448]	; (7d48 <I2C_getTEMPandMOISTURE+0xe64>)
    7b88:	4798      	blx	r3
    7b8a:	ea1b 0f05 	tst.w	fp, r5
    7b8e:	f040 80f3 	bne.w	7d78 <I2C_getTEMPandMOISTURE+0xe94>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7b92:	4d6a      	ldr	r5, [pc, #424]	; (7d3c <I2C_getTEMPandMOISTURE+0xe58>)
    7b94:	9b03      	ldr	r3, [sp, #12]
    7b96:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    7b9a:	615c      	str	r4, [r3, #20]
    7b9c:	2005      	movs	r0, #5
    7b9e:	4e68      	ldr	r6, [pc, #416]	; (7d40 <I2C_getTEMPandMOISTURE+0xe5c>)
    7ba0:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    7ba2:	9a04      	ldr	r2, [sp, #16]
    7ba4:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    7ba8:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7bac:	9a05      	ldr	r2, [sp, #20]
    7bae:	62aa      	str	r2, [r5, #40]	; 0x28
    7bb0:	9a06      	ldr	r2, [sp, #24]
    7bb2:	62aa      	str	r2, [r5, #40]	; 0x28
    7bb4:	2005      	movs	r0, #5
    7bb6:	47b0      	blx	r6
    7bb8:	2608      	movs	r6, #8
	I2C_SENDDATA(0x03, forloop);
    7bba:	2580      	movs	r5, #128	; 0x80
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7bbc:	f8df 917c 	ldr.w	r9, [pc, #380]	; 7d3c <I2C_getTEMPandMOISTURE+0xe58>
    7bc0:	9a02      	ldr	r2, [sp, #8]
    7bc2:	eb09 12c2 	add.w	r2, r9, r2, lsl #7
    7bc6:	9209      	str	r2, [sp, #36]	; 0x24
    7bc8:	4f5d      	ldr	r7, [pc, #372]	; (7d40 <I2C_getTEMPandMOISTURE+0xe5c>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7bca:	9b03      	ldr	r3, [sp, #12]
    7bcc:	ea4f 1ac3 	mov.w	sl, r3, lsl #7
    7bd0:	f015 0f03 	tst.w	r5, #3
    7bd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7bd6:	bf14      	ite	ne
    7bd8:	f8c3 b018 	strne.w	fp, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7bdc:	f8c3 b014 	streq.w	fp, [r3, #20]
    7be0:	2005      	movs	r0, #5
    7be2:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7be4:	eb09 080a 	add.w	r8, r9, sl
    7be8:	f8c8 4018 	str.w	r4, [r8, #24]
    7bec:	2005      	movs	r0, #5
    7bee:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7bf0:	f8c8 4014 	str.w	r4, [r8, #20]
    7bf4:	2005      	movs	r0, #5
    7bf6:	47b8      	blx	r7
    7bf8:	086d      	lsrs	r5, r5, #1
    7bfa:	3e01      	subs	r6, #1
    7bfc:	d1e8      	bne.n	7bd0 <I2C_getTEMPandMOISTURE+0xcec>
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    7bfe:	9b01      	ldr	r3, [sp, #4]
    7c00:	f8c3 b004 	str.w	fp, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7c04:	4e4d      	ldr	r6, [pc, #308]	; (7d3c <I2C_getTEMPandMOISTURE+0xe58>)
    7c06:	9a04      	ldr	r2, [sp, #16]
    7c08:	eb06 15c2 	add.w	r5, r6, r2, lsl #7
    7c0c:	9a07      	ldr	r2, [sp, #28]
    7c0e:	62aa      	str	r2, [r5, #40]	; 0x28
    7c10:	9a08      	ldr	r2, [sp, #32]
    7c12:	62aa      	str	r2, [r5, #40]	; 0x28
	I2C_WAITACKOP(-4);
    7c14:	2005      	movs	r0, #5
    7c16:	4f4a      	ldr	r7, [pc, #296]	; (7d40 <I2C_getTEMPandMOISTURE+0xe5c>)
    7c18:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7c1a:	9a03      	ldr	r2, [sp, #12]
    7c1c:	eb06 16c2 	add.w	r6, r6, r2, lsl #7
    7c20:	61b4      	str	r4, [r6, #24]
    7c22:	2005      	movs	r0, #5
    7c24:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    7c26:	a819      	add	r0, sp, #100	; 0x64
    7c28:	4b46      	ldr	r3, [pc, #280]	; (7d44 <I2C_getTEMPandMOISTURE+0xe60>)
    7c2a:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    7c2c:	9b01      	ldr	r3, [sp, #4]
    7c2e:	681a      	ldr	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    7c30:	6a2b      	ldr	r3, [r5, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    7c32:	692d      	ldr	r5, [r5, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    7c34:	405d      	eors	r5, r3
    7c36:	4015      	ands	r5, r2
    7c38:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    7c3a:	a819      	add	r0, sp, #100	; 0x64
    7c3c:	4b42      	ldr	r3, [pc, #264]	; (7d48 <I2C_getTEMPandMOISTURE+0xe64>)
    7c3e:	4798      	blx	r3
    7c40:	ea1b 0f05 	tst.w	fp, r5
    7c44:	f040 80b1 	bne.w	7daa <I2C_getTEMPandMOISTURE+0xec6>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7c48:	4d3c      	ldr	r5, [pc, #240]	; (7d3c <I2C_getTEMPandMOISTURE+0xe58>)
    7c4a:	9b03      	ldr	r3, [sp, #12]
    7c4c:	eb05 17c3 	add.w	r7, r5, r3, lsl #7
    7c50:	617c      	str	r4, [r7, #20]
    7c52:	2005      	movs	r0, #5
    7c54:	4e3a      	ldr	r6, [pc, #232]	; (7d40 <I2C_getTEMPandMOISTURE+0xe5c>)
    7c56:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    7c58:	9a04      	ldr	r2, [sp, #16]
    7c5a:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    7c5e:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7c62:	9a05      	ldr	r2, [sp, #20]
    7c64:	62aa      	str	r2, [r5, #40]	; 0x28
    7c66:	9906      	ldr	r1, [sp, #24]
    7c68:	62a9      	str	r1, [r5, #40]	; 0x28
    7c6a:	2005      	movs	r0, #5
    7c6c:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7c6e:	61bc      	str	r4, [r7, #24]
    7c70:	f8c5 b018 	str.w	fp, [r5, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    7c74:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7c78:	9a05      	ldr	r2, [sp, #20]
    7c7a:	62aa      	str	r2, [r5, #40]	; 0x28
    7c7c:	9906      	ldr	r1, [sp, #24]
    7c7e:	62a9      	str	r1, [r5, #40]	; 0x28
	
	/* Then restart comms and send address 0x40 */
	I2C_START(-5);
    7c80:	2005      	movs	r0, #5
    7c82:	47b0      	blx	r6
    7c84:	2005      	movs	r0, #5
    7c86:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7c88:	f8c5 b014 	str.w	fp, [r5, #20]
    7c8c:	2005      	movs	r0, #5
    7c8e:	47b0      	blx	r6
    7c90:	617c      	str	r4, [r7, #20]
    7c92:	2005      	movs	r0, #5
    7c94:	47b0      	blx	r6
    7c96:	2607      	movs	r6, #7
	I2C_SENDADDR(0x40, forloop);
    7c98:	2540      	movs	r5, #64	; 0x40
    7c9a:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 7d3c <I2C_getTEMPandMOISTURE+0xe58>
    7c9e:	9a02      	ldr	r2, [sp, #8]
    7ca0:	eb09 12c2 	add.w	r2, r9, r2, lsl #7
    7ca4:	9209      	str	r2, [sp, #36]	; 0x24
    7ca6:	4f26      	ldr	r7, [pc, #152]	; (7d40 <I2C_getTEMPandMOISTURE+0xe5c>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7ca8:	9b03      	ldr	r3, [sp, #12]
    7caa:	fa03 fa06 	lsl.w	sl, r3, r6
    7cae:	f015 0f40 	tst.w	r5, #64	; 0x40
    7cb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7cb4:	bf14      	ite	ne
    7cb6:	f8c3 b018 	strne.w	fp, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7cba:	f8c3 b014 	streq.w	fp, [r3, #20]
    7cbe:	2005      	movs	r0, #5
    7cc0:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7cc2:	eb09 080a 	add.w	r8, r9, sl
    7cc6:	f8c8 4018 	str.w	r4, [r8, #24]
    7cca:	2005      	movs	r0, #5
    7ccc:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7cce:	f8c8 4014 	str.w	r4, [r8, #20]
    7cd2:	2005      	movs	r0, #5
    7cd4:	47b8      	blx	r7
    7cd6:	086d      	lsrs	r5, r5, #1
    7cd8:	3e01      	subs	r6, #1
    7cda:	d1e8      	bne.n	7cae <I2C_getTEMPandMOISTURE+0xdca>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7cdc:	4d17      	ldr	r5, [pc, #92]	; (7d3c <I2C_getTEMPandMOISTURE+0xe58>)
    7cde:	9b04      	ldr	r3, [sp, #16]
    7ce0:	eb05 16c3 	add.w	r6, r5, r3, lsl #7
    7ce4:	f8c6 b018 	str.w	fp, [r6, #24]
	I2C_READ();
    7ce8:	2005      	movs	r0, #5
    7cea:	4f15      	ldr	r7, [pc, #84]	; (7d40 <I2C_getTEMPandMOISTURE+0xe5c>)
    7cec:	47b8      	blx	r7
    7cee:	9b03      	ldr	r3, [sp, #12]
    7cf0:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    7cf4:	61ac      	str	r4, [r5, #24]
    7cf6:	2005      	movs	r0, #5
    7cf8:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7cfa:	616c      	str	r4, [r5, #20]
    7cfc:	2005      	movs	r0, #5
    7cfe:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    7d00:	9b01      	ldr	r3, [sp, #4]
    7d02:	f8c3 b004 	str.w	fp, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7d06:	9a07      	ldr	r2, [sp, #28]
    7d08:	62b2      	str	r2, [r6, #40]	; 0x28
    7d0a:	9a08      	ldr	r2, [sp, #32]
    7d0c:	62b2      	str	r2, [r6, #40]	; 0x28
	I2C_WAITACKIP(-6);
    7d0e:	2005      	movs	r0, #5
    7d10:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7d12:	61ac      	str	r4, [r5, #24]
    7d14:	2005      	movs	r0, #5
    7d16:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    7d18:	a81a      	add	r0, sp, #104	; 0x68
    7d1a:	4b0a      	ldr	r3, [pc, #40]	; (7d44 <I2C_getTEMPandMOISTURE+0xe60>)
    7d1c:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    7d1e:	9b01      	ldr	r3, [sp, #4]
    7d20:	681a      	ldr	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    7d22:	6a33      	ldr	r3, [r6, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    7d24:	6935      	ldr	r5, [r6, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    7d26:	405d      	eors	r5, r3
    7d28:	4015      	ands	r5, r2
    7d2a:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    7d2c:	a81a      	add	r0, sp, #104	; 0x68
    7d2e:	4b06      	ldr	r3, [pc, #24]	; (7d48 <I2C_getTEMPandMOISTURE+0xe64>)
    7d30:	4798      	blx	r3
    7d32:	ea1b 0f05 	tst.w	fp, r5
    7d36:	d151      	bne.n	7ddc <I2C_getTEMPandMOISTURE+0xef8>
    7d38:	e008      	b.n	7d4c <I2C_getTEMPandMOISTURE+0xe68>
    7d3a:	bf00      	nop
    7d3c:	41008000 	.word	0x41008000
    7d40:	0000152d 	.word	0x0000152d
    7d44:	000014cd 	.word	0x000014cd
    7d48:	000014db 	.word	0x000014db
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7d4c:	9d03      	ldr	r5, [sp, #12]
    7d4e:	01eb      	lsls	r3, r5, #7
    7d50:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    7d54:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    7d58:	615c      	str	r4, [r3, #20]
    7d5a:	2005      	movs	r0, #5
    7d5c:	4b51      	ldr	r3, [pc, #324]	; (7ea4 <I2C_getTEMPandMOISTURE+0xfc0>)
    7d5e:	4798      	blx	r3

	*hh = 0;
    7d60:	2300      	movs	r3, #0
    7d62:	9a26      	ldr	r2, [sp, #152]	; 0x98
    7d64:	7013      	strb	r3, [r2, #0]
    7d66:	2608      	movs	r6, #8
	
	/* Beginning of the for-loops that captures data and read the upper 8-bits of the humidity */
	for (forloop = 0x80; forloop > 0;) {
    7d68:	2780      	movs	r7, #128	; 0x80
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7d6a:	f8df a13c 	ldr.w	sl, [pc, #316]	; 7ea8 <I2C_getTEMPandMOISTURE+0xfc4>
    7d6e:	eb0a 19c5 	add.w	r9, sl, r5, lsl #7
		I2C_clockhi();
    7d72:	f8df 8130 	ldr.w	r8, [pc, #304]	; 7ea4 <I2C_getTEMPandMOISTURE+0xfc0>
    7d76:	e051      	b.n	7e1c <I2C_getTEMPandMOISTURE+0xf38>
    7d78:	4d4b      	ldr	r5, [pc, #300]	; (7ea8 <I2C_getTEMPandMOISTURE+0xfc4>)
    7d7a:	9b03      	ldr	r3, [sp, #12]
    7d7c:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    7d80:	619c      	str	r4, [r3, #24]
	I2C_WAITACKOP(-3);
    7d82:	2005      	movs	r0, #5
    7d84:	47b8      	blx	r7
    7d86:	9b04      	ldr	r3, [sp, #16]
    7d88:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    7d8c:	f8c5 b018 	str.w	fp, [r5, #24]
    7d90:	2005      	movs	r0, #5
    7d92:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    7d94:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7d98:	9b05      	ldr	r3, [sp, #20]
    7d9a:	62ab      	str	r3, [r5, #40]	; 0x28
    7d9c:	9b06      	ldr	r3, [sp, #24]
    7d9e:	62ab      	str	r3, [r5, #40]	; 0x28
    7da0:	2005      	movs	r0, #5
    7da2:	47b8      	blx	r7
    7da4:	f06f 0002 	mvn.w	r0, #2
    7da8:	e06d      	b.n	7e86 <I2C_getTEMPandMOISTURE+0xfa2>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7daa:	4d3f      	ldr	r5, [pc, #252]	; (7ea8 <I2C_getTEMPandMOISTURE+0xfc4>)
    7dac:	9b03      	ldr	r3, [sp, #12]
    7dae:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    7db2:	619c      	str	r4, [r3, #24]
	I2C_WAITACKOP(-4);
    7db4:	2005      	movs	r0, #5
    7db6:	47b8      	blx	r7
    7db8:	9b04      	ldr	r3, [sp, #16]
    7dba:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    7dbe:	f8c5 b018 	str.w	fp, [r5, #24]
    7dc2:	2005      	movs	r0, #5
    7dc4:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    7dc6:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7dca:	9b05      	ldr	r3, [sp, #20]
    7dcc:	62ab      	str	r3, [r5, #40]	; 0x28
    7dce:	9b06      	ldr	r3, [sp, #24]
    7dd0:	62ab      	str	r3, [r5, #40]	; 0x28
    7dd2:	2005      	movs	r0, #5
    7dd4:	47b8      	blx	r7
    7dd6:	f06f 0003 	mvn.w	r0, #3
    7dda:	e054      	b.n	7e86 <I2C_getTEMPandMOISTURE+0xfa2>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7ddc:	4d32      	ldr	r5, [pc, #200]	; (7ea8 <I2C_getTEMPandMOISTURE+0xfc4>)
    7dde:	9b03      	ldr	r3, [sp, #12]
    7de0:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
    7de4:	619c      	str	r4, [r3, #24]
	I2C_WAITACKIP(-6);
    7de6:	2005      	movs	r0, #5
    7de8:	47b8      	blx	r7
    7dea:	9b04      	ldr	r3, [sp, #16]
    7dec:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    7df0:	f8c5 b018 	str.w	fp, [r5, #24]
    7df4:	2005      	movs	r0, #5
    7df6:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    7df8:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7dfc:	9b05      	ldr	r3, [sp, #20]
    7dfe:	62ab      	str	r3, [r5, #40]	; 0x28
    7e00:	9b06      	ldr	r3, [sp, #24]
    7e02:	62ab      	str	r3, [r5, #40]	; 0x28
    7e04:	2005      	movs	r0, #5
    7e06:	47b8      	blx	r7
    7e08:	f06f 0005 	mvn.w	r0, #5
    7e0c:	e03b      	b.n	7e86 <I2C_getTEMPandMOISTURE+0xfa2>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7e0e:	f8c9 4014 	str.w	r4, [r9, #20]
		if (gpio_get_pin_level(i2csda)) {
			(*hh) |= forloop;
		}

		I2C_clocklo();
    7e12:	2005      	movs	r0, #5
    7e14:	47c0      	blx	r8
		forloop = forloop / 2;
    7e16:	087f      	lsrs	r7, r7, #1
	for (forloop = 0x80; forloop > 0;) {
    7e18:	3e01      	subs	r6, #1
    7e1a:	d01c      	beq.n	7e56 <I2C_getTEMPandMOISTURE+0xf72>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7e1c:	f8c9 4018 	str.w	r4, [r9, #24]
		I2C_clockhi();
    7e20:	2005      	movs	r0, #5
    7e22:	47c0      	blx	r8
	CRITICAL_SECTION_ENTER();
    7e24:	a81b      	add	r0, sp, #108	; 0x6c
    7e26:	4b21      	ldr	r3, [pc, #132]	; (7eac <I2C_getTEMPandMOISTURE+0xfc8>)
    7e28:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    7e2a:	9b01      	ldr	r3, [sp, #4]
    7e2c:	6819      	ldr	r1, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    7e2e:	9b02      	ldr	r3, [sp, #8]
    7e30:	eb0a 12c3 	add.w	r2, sl, r3, lsl #7
    7e34:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    7e36:	6915      	ldr	r5, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    7e38:	405d      	eors	r5, r3
    7e3a:	400d      	ands	r5, r1
    7e3c:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    7e3e:	a81b      	add	r0, sp, #108	; 0x6c
    7e40:	4b1b      	ldr	r3, [pc, #108]	; (7eb0 <I2C_getTEMPandMOISTURE+0xfcc>)
    7e42:	4798      	blx	r3
		if (gpio_get_pin_level(i2csda)) {
    7e44:	ea1b 0f05 	tst.w	fp, r5
    7e48:	d0e1      	beq.n	7e0e <I2C_getTEMPandMOISTURE+0xf2a>
			(*hh) |= forloop;
    7e4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
    7e4c:	781b      	ldrb	r3, [r3, #0]
    7e4e:	433b      	orrs	r3, r7
    7e50:	9a26      	ldr	r2, [sp, #152]	; 0x98
    7e52:	7013      	strb	r3, [r2, #0]
    7e54:	e7db      	b.n	7e0e <I2C_getTEMPandMOISTURE+0xf2a>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7e56:	4d14      	ldr	r5, [pc, #80]	; (7ea8 <I2C_getTEMPandMOISTURE+0xfc4>)
    7e58:	9b03      	ldr	r3, [sp, #12]
    7e5a:	eb05 11c3 	add.w	r1, r5, r3, lsl #7
    7e5e:	618c      	str	r4, [r1, #24]
	}

	I2C_STOP();
    7e60:	2005      	movs	r0, #5
    7e62:	4e10      	ldr	r6, [pc, #64]	; (7ea4 <I2C_getTEMPandMOISTURE+0xfc0>)
    7e64:	47b0      	blx	r6
    7e66:	9b04      	ldr	r3, [sp, #16]
    7e68:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    7e6c:	f8c5 b018 	str.w	fp, [r5, #24]
    7e70:	2005      	movs	r0, #5
    7e72:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    7e74:	f8c5 b008 	str.w	fp, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7e78:	9b05      	ldr	r3, [sp, #20]
    7e7a:	62ab      	str	r3, [r5, #40]	; 0x28
    7e7c:	9b06      	ldr	r3, [sp, #24]
    7e7e:	62ab      	str	r3, [r5, #40]	; 0x28
    7e80:	2005      	movs	r0, #5
    7e82:	47b0      	blx	r6
	I2C_CLOSE();
	/* If successful, and code execution got here, the close the I2C channel */
	
	return 0;
    7e84:	2000      	movs	r0, #0
}
    7e86:	b01d      	add	sp, #116	; 0x74
    7e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -1;
    7e8c:	f04f 30ff 	mov.w	r0, #4294967295
    7e90:	4770      	bx	lr
    7e92:	f04f 30ff 	mov.w	r0, #4294967295
    7e96:	e7f6      	b.n	7e86 <I2C_getTEMPandMOISTURE+0xfa2>
    7e98:	f04f 30ff 	mov.w	r0, #4294967295
    7e9c:	e7f3      	b.n	7e86 <I2C_getTEMPandMOISTURE+0xfa2>
    7e9e:	f04f 30ff 	mov.w	r0, #4294967295
    7ea2:	e7f0      	b.n	7e86 <I2C_getTEMPandMOISTURE+0xfa2>
    7ea4:	0000152d 	.word	0x0000152d
    7ea8:	41008000 	.word	0x41008000
    7eac:	000014cd 	.word	0x000014cd
    7eb0:	000014db 	.word	0x000014db

00007eb4 <timer_setup>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: initializes and starts the main 10 times per second global timer
// Returns:     Nothing
// *****************************************************************************************************************************************************************
void timer_setup(void)
{
    7eb4:	b510      	push	{r4, lr}
	/* Setup and start the main 1/10th of a second timer expiration callback routine */
	TIMER_0_task1.interval = 100;
    7eb6:	4907      	ldr	r1, [pc, #28]	; (7ed4 <timer_setup+0x20>)
    7eb8:	2364      	movs	r3, #100	; 0x64
    7eba:	608b      	str	r3, [r1, #8]
	TIMER_0_task1.cb       = TIMER_0_task1_cb;
    7ebc:	4b06      	ldr	r3, [pc, #24]	; (7ed8 <timer_setup+0x24>)
    7ebe:	60cb      	str	r3, [r1, #12]
	TIMER_0_task1.mode     = TIMER_TASK_REPEAT;
    7ec0:	2301      	movs	r3, #1
    7ec2:	740b      	strb	r3, [r1, #16]

	/* Start the repeatable timer feature */
	timer_add_task(&TIMER_0, &TIMER_0_task1);
    7ec4:	4c05      	ldr	r4, [pc, #20]	; (7edc <timer_setup+0x28>)
    7ec6:	4620      	mov	r0, r4
    7ec8:	4b05      	ldr	r3, [pc, #20]	; (7ee0 <timer_setup+0x2c>)
    7eca:	4798      	blx	r3
	timer_start(&TIMER_0);
    7ecc:	4620      	mov	r0, r4
    7ece:	4b05      	ldr	r3, [pc, #20]	; (7ee4 <timer_setup+0x30>)
    7ed0:	4798      	blx	r3
    7ed2:	bd10      	pop	{r4, pc}
    7ed4:	2000827c 	.word	0x2000827c
    7ed8:	00009105 	.word	0x00009105
    7edc:	20007548 	.word	0x20007548
    7ee0:	00001d39 	.word	0x00001d39
    7ee4:	00001cfd 	.word	0x00001cfd

00007ee8 <ADC_init>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: initializes and starts the two internal ADC features for reading the water detection mechanism
// Returns:     Nothing
// *****************************************************************************************************************************************************************
void ADC_init(void)
{
    7ee8:	b508      	push	{r3, lr}
	/* Setup the two internal water detection analogue inputs BOTH on "ADC_0" channels and also the HIGH-VOLTAGE ADC [0|1|2]*/
	adc_sync_enable_channel(&ADC_0, 0);
    7eea:	2100      	movs	r1, #0
    7eec:	4801      	ldr	r0, [pc, #4]	; (7ef4 <ADC_init+0xc>)
    7eee:	4b02      	ldr	r3, [pc, #8]	; (7ef8 <ADC_init+0x10>)
    7ef0:	4798      	blx	r3
    7ef2:	bd08      	pop	{r3, pc}
    7ef4:	20007470 	.word	0x20007470
    7ef8:	00001375 	.word	0x00001375

00007efc <comms_init>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: setup the SPI and the USB
// Returns:     Nothing
// *****************************************************************************************************************************************************************
void comms_init(void)
{
    7efc:	b510      	push	{r4, lr}
	/* Global initialization of main USB mechanism */
	if (usb_d_enable() < 0) {
    7efe:	4b18      	ldr	r3, [pc, #96]	; (7f60 <comms_init+0x64>)
    7f00:	4798      	blx	r3
    7f02:	2800      	cmp	r0, #0
    7f04:	db27      	blt.n	7f56 <comms_init+0x5a>
		xprintf("USB init/enable ERROR!!!!!!!\r\n");
	} else {
		usb_init();
    7f06:	4b17      	ldr	r3, [pc, #92]	; (7f64 <comms_init+0x68>)
    7f08:	4798      	blx	r3
		xprintf("usb_init()\r\n");
    7f0a:	4817      	ldr	r0, [pc, #92]	; (7f68 <comms_init+0x6c>)
    7f0c:	4c17      	ldr	r4, [pc, #92]	; (7f6c <comms_init+0x70>)
    7f0e:	47a0      	blx	r4
		
		cdc_device_acm_init();
    7f10:	4b17      	ldr	r3, [pc, #92]	; (7f70 <comms_init+0x74>)
    7f12:	4798      	blx	r3
		xprintf("cdc_device_acm_init()\r\n");
    7f14:	4817      	ldr	r0, [pc, #92]	; (7f74 <comms_init+0x78>)
    7f16:	47a0      	blx	r4
		
		/* Register the read callback function */
		cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)usb_device_cb_state_c);
    7f18:	4917      	ldr	r1, [pc, #92]	; (7f78 <comms_init+0x7c>)
    7f1a:	2003      	movs	r0, #3
    7f1c:	4b17      	ldr	r3, [pc, #92]	; (7f7c <comms_init+0x80>)
    7f1e:	4798      	blx	r3
		xprintf("cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)usb_device_cb_state_c)\r\n");
    7f20:	4817      	ldr	r0, [pc, #92]	; (7f80 <comms_init+0x84>)
    7f22:	47a0      	blx	r4
	}

	/* Setup the main SPI bus, 100 kHz, negative-edge triggered, 8-bit, MSB first */
	spi_m_sync_set_baudrate(&SPI_0, 800000);
    7f24:	4c17      	ldr	r4, [pc, #92]	; (7f84 <comms_init+0x88>)
    7f26:	4918      	ldr	r1, [pc, #96]	; (7f88 <comms_init+0x8c>)
    7f28:	4620      	mov	r0, r4
    7f2a:	4b18      	ldr	r3, [pc, #96]	; (7f8c <comms_init+0x90>)
    7f2c:	4798      	blx	r3
	spi_m_sync_set_mode(&SPI_0, SPI_MODE_3);
    7f2e:	2103      	movs	r1, #3
    7f30:	4620      	mov	r0, r4
    7f32:	4b17      	ldr	r3, [pc, #92]	; (7f90 <comms_init+0x94>)
    7f34:	4798      	blx	r3
	spi_m_sync_set_char_size(&SPI_0, SPI_CHAR_SIZE_8);
    7f36:	2100      	movs	r1, #0
    7f38:	4620      	mov	r0, r4
    7f3a:	4b16      	ldr	r3, [pc, #88]	; (7f94 <comms_init+0x98>)
    7f3c:	4798      	blx	r3
	spi_m_sync_set_data_order(&SPI_0, SPI_DATA_ORDER_MSB_1ST);
    7f3e:	2100      	movs	r1, #0
    7f40:	4620      	mov	r0, r4
    7f42:	4b15      	ldr	r3, [pc, #84]	; (7f98 <comms_init+0x9c>)
    7f44:	4798      	blx	r3
	spi_m_sync_get_io_descriptor(&SPI_0, &spio);
    7f46:	4915      	ldr	r1, [pc, #84]	; (7f9c <comms_init+0xa0>)
    7f48:	4620      	mov	r0, r4
    7f4a:	4b15      	ldr	r3, [pc, #84]	; (7fa0 <comms_init+0xa4>)
    7f4c:	4798      	blx	r3
	
	/* Start the SPI bus running */
	spi_m_sync_enable(&SPI_0);
    7f4e:	4620      	mov	r0, r4
    7f50:	4b14      	ldr	r3, [pc, #80]	; (7fa4 <comms_init+0xa8>)
    7f52:	4798      	blx	r3
    7f54:	bd10      	pop	{r4, pc}
		xprintf("USB init/enable ERROR!!!!!!!\r\n");
    7f56:	4814      	ldr	r0, [pc, #80]	; (7fa8 <comms_init+0xac>)
    7f58:	4b04      	ldr	r3, [pc, #16]	; (7f6c <comms_init+0x70>)
    7f5a:	4798      	blx	r3
    7f5c:	e7e2      	b.n	7f24 <comms_init+0x28>
    7f5e:	bf00      	nop
    7f60:	000023d9 	.word	0x000023d9
    7f64:	0000d8bd 	.word	0x0000d8bd
    7f68:	0000f024 	.word	0x0000f024
    7f6c:	0000031d 	.word	0x0000031d
    7f70:	0000d88d 	.word	0x0000d88d
    7f74:	0000f034 	.word	0x0000f034
    7f78:	0000d81d 	.word	0x0000d81d
    7f7c:	0000cfc5 	.word	0x0000cfc5
    7f80:	0000f04c 	.word	0x0000f04c
    7f84:	20007478 	.word	0x20007478
    7f88:	000c3500 	.word	0x000c3500
    7f8c:	00001a55 	.word	0x00001a55
    7f90:	00001a81 	.word	0x00001a81
    7f94:	00001aad 	.word	0x00001aad
    7f98:	00001ad9 	.word	0x00001ad9
    7f9c:	20008290 	.word	0x20008290
    7fa0:	00001bbd 	.word	0x00001bbd
    7fa4:	00001a2d 	.word	0x00001a2d
    7fa8:	0000f004 	.word	0x0000f004

00007fac <crypto_init>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: initialize the AES encryption-engine in the CPU core
// Returns:     Nothing
// *****************************************************************************************************************************************************************
void crypto_init(void)
{
    7fac:	b510      	push	{r4, lr}
	/* Initialize and start the crypt hardware block. Insert and program the private AES key for this device-node also */
	aes_sync_enable(&CRYPTOGRAPHY_0);
    7fae:	4c05      	ldr	r4, [pc, #20]	; (7fc4 <crypto_init+0x18>)
    7fb0:	4620      	mov	r0, r4
    7fb2:	4b05      	ldr	r3, [pc, #20]	; (7fc8 <crypto_init+0x1c>)
    7fb4:	4798      	blx	r3
	aes_sync_set_encrypt_key(&CRYPTOGRAPHY_0, aes_key, AES_KEY_128);
    7fb6:	2200      	movs	r2, #0
    7fb8:	4904      	ldr	r1, [pc, #16]	; (7fcc <crypto_init+0x20>)
    7fba:	4620      	mov	r0, r4
    7fbc:	4b04      	ldr	r3, [pc, #16]	; (7fd0 <crypto_init+0x24>)
    7fbe:	4798      	blx	r3
    7fc0:	bd10      	pop	{r4, pc}
    7fc2:	bf00      	nop
    7fc4:	20007428 	.word	0x20007428
    7fc8:	00001471 	.word	0x00001471
    7fcc:	20000004 	.word	0x20000004
    7fd0:	00001499 	.word	0x00001499

00007fd4 <switch_init>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: reset and start the Ethernet SWITCH IC
// Returns:     Nothing
// *****************************************************************************************************************************************************************
void switch_init(void)
{
    7fd4:	b570      	push	{r4, r5, r6, lr}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7fd6:	4d07      	ldr	r5, [pc, #28]	; (7ff4 <switch_init+0x20>)
    7fd8:	2401      	movs	r4, #1
    7fda:	f8c5 4098 	str.w	r4, [r5, #152]	; 0x98
	/* Go through the reset sequence of the GPIO for the Micrel Ethernet SWITCH */
	gpio_set_pin_level(PB00_KSZ_RESET, 1);
	delay_ms(1);
    7fde:	4620      	mov	r0, r4
    7fe0:	4e05      	ldr	r6, [pc, #20]	; (7ff8 <switch_init+0x24>)
    7fe2:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7fe4:	f8c5 4094 	str.w	r4, [r5, #148]	; 0x94
	gpio_set_pin_level(PB00_KSZ_RESET, 0);
	delay_ms(1);
    7fe8:	4620      	mov	r0, r4
    7fea:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7fec:	f8c5 4098 	str.w	r4, [r5, #152]	; 0x98
    7ff0:	bd70      	pop	{r4, r5, r6, pc}
    7ff2:	bf00      	nop
    7ff4:	41008000 	.word	0x41008000
    7ff8:	0000154d 	.word	0x0000154d

00007ffc <switch_configure>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: check all default register settings in the Ethernet SWITCH and also change relevant settings to suit the MultiSense operation
// Returns:     Nothing
// *****************************************************************************************************************************************************************
void switch_configure(void)
{
    7ffc:	b508      	push	{r3, lr}
	xprintf("Configuring and checking the SPI KSZ8794 Ethernet SWITCH registers...\r\n");
    7ffe:	48ad      	ldr	r0, [pc, #692]	; (82b4 <switch_configure+0x2b8>)
    8000:	4bad      	ldr	r3, [pc, #692]	; (82b8 <switch_configure+0x2bc>)
    8002:	4798      	blx	r3
	/* Write set-up commands to the KSZ Ethernet SWITCH via SPI bus */
	if (!checkKSZreg(SPI_KSZ8794_FAMILY_ID, 0x87))		{ xprintf("[SPI_KSZ8794_FAMILY_ID] not correct\r\n"); }
    8004:	2187      	movs	r1, #135	; 0x87
    8006:	2000      	movs	r0, #0
    8008:	4bac      	ldr	r3, [pc, #688]	; (82bc <switch_configure+0x2c0>)
    800a:	4798      	blx	r3
    800c:	2800      	cmp	r0, #0
    800e:	f000 8274 	beq.w	84fa <switch_configure+0x4fe>
		
	/* Stop the Ethernet SWITCH operation */
	writeKSZreg(SPI_KSZ8794_START, 0x00);
    8012:	2100      	movs	r1, #0
    8014:	2001      	movs	r0, #1
    8016:	4baa      	ldr	r3, [pc, #680]	; (82c0 <switch_configure+0x2c4>)
    8018:	4798      	blx	r3
	delay_us(50);
    801a:	2032      	movs	r0, #50	; 0x32
    801c:	4ba9      	ldr	r3, [pc, #676]	; (82c4 <switch_configure+0x2c8>)
    801e:	4798      	blx	r3
	
	if (!checkKSZreg(SPI_KSZ8794_START, 0x60))			{ xprintf("[SPI_KSZ8794_START first] not correct\r\n"); }
    8020:	2160      	movs	r1, #96	; 0x60
    8022:	2001      	movs	r0, #1
    8024:	4ba5      	ldr	r3, [pc, #660]	; (82bc <switch_configure+0x2c0>)
    8026:	4798      	blx	r3
    8028:	2800      	cmp	r0, #0
    802a:	f000 826a 	beq.w	8502 <switch_configure+0x506>
	
	writeKSZreg(SPI_KSZ8794_GLOBAL0, 0x0D);
    802e:	210d      	movs	r1, #13
    8030:	2002      	movs	r0, #2
    8032:	4ba3      	ldr	r3, [pc, #652]	; (82c0 <switch_configure+0x2c4>)
    8034:	4798      	blx	r3
	delay_us(50);
    8036:	2032      	movs	r0, #50	; 0x32
    8038:	4ba2      	ldr	r3, [pc, #648]	; (82c4 <switch_configure+0x2c8>)
    803a:	4798      	blx	r3
	
	if (!checkKSZreg(SPI_KSZ8794_GLOBAL0, 0x0D))		{ xprintf("[SPI_KSZ8794_GLOBAL0] not correct\r\n"); }
    803c:	210d      	movs	r1, #13
    803e:	2002      	movs	r0, #2
    8040:	4b9e      	ldr	r3, [pc, #632]	; (82bc <switch_configure+0x2c0>)
    8042:	4798      	blx	r3
    8044:	2800      	cmp	r0, #0
    8046:	f000 8260 	beq.w	850a <switch_configure+0x50e>
	
	writeKSZreg(SPI_KSZ8794_GLOBAL1, 0x0C);
    804a:	210c      	movs	r1, #12
    804c:	2003      	movs	r0, #3
    804e:	4b9c      	ldr	r3, [pc, #624]	; (82c0 <switch_configure+0x2c4>)
    8050:	4798      	blx	r3
	delay_us(50);
    8052:	2032      	movs	r0, #50	; 0x32
    8054:	4b9b      	ldr	r3, [pc, #620]	; (82c4 <switch_configure+0x2c8>)
    8056:	4798      	blx	r3
	
	if (!checkKSZreg(SPI_KSZ8794_GLOBAL1, 0x0C))		{ xprintf("[SPI_KSZ8794_GLOBAL1] not correct\r\n"); }
    8058:	210c      	movs	r1, #12
    805a:	2003      	movs	r0, #3
    805c:	4b97      	ldr	r3, [pc, #604]	; (82bc <switch_configure+0x2c0>)
    805e:	4798      	blx	r3
    8060:	2800      	cmp	r0, #0
    8062:	f000 8256 	beq.w	8512 <switch_configure+0x516>
	
	writeKSZreg(SPI_KSZ8794_GLOBAL2, 0xB2);
    8066:	21b2      	movs	r1, #178	; 0xb2
    8068:	2004      	movs	r0, #4
    806a:	4b95      	ldr	r3, [pc, #596]	; (82c0 <switch_configure+0x2c4>)
    806c:	4798      	blx	r3
	delay_us(50);
    806e:	2032      	movs	r0, #50	; 0x32
    8070:	4b94      	ldr	r3, [pc, #592]	; (82c4 <switch_configure+0x2c8>)
    8072:	4798      	blx	r3
	
	if (!checkKSZreg(SPI_KSZ8794_GLOBAL2, 0xB2))		{ xprintf("[SPI_KSZ8794_GLOBAL2] not correct\r\n"); }
    8074:	21b2      	movs	r1, #178	; 0xb2
    8076:	2004      	movs	r0, #4
    8078:	4b90      	ldr	r3, [pc, #576]	; (82bc <switch_configure+0x2c0>)
    807a:	4798      	blx	r3
    807c:	2800      	cmp	r0, #0
    807e:	f000 824c 	beq.w	851a <switch_configure+0x51e>
	if (!checkKSZreg(SPI_KSZ8794_GLOBAL3, 0x00))		{ xprintf("[SPI_KSZ8794_GLOBAL3] not correct\r\n"); }
    8082:	2100      	movs	r1, #0
    8084:	2005      	movs	r0, #5
    8086:	4b8d      	ldr	r3, [pc, #564]	; (82bc <switch_configure+0x2c0>)
    8088:	4798      	blx	r3
    808a:	2800      	cmp	r0, #0
    808c:	f000 8249 	beq.w	8522 <switch_configure+0x526>
	if (!checkKSZreg(SPI_KSZ8794_GLOBAL4, 0x00))		{ xprintf("[SPI_KSZ8794_GLOBAL4] not correct\r\n"); }
    8090:	2100      	movs	r1, #0
    8092:	2006      	movs	r0, #6
    8094:	4b89      	ldr	r3, [pc, #548]	; (82bc <switch_configure+0x2c0>)
    8096:	4798      	blx	r3
    8098:	2800      	cmp	r0, #0
    809a:	f000 8246 	beq.w	852a <switch_configure+0x52e>
	if (!checkKSZreg(SPI_KSZ8794_GLOBAL5, 0x4A))		{ xprintf("[SPI_KSZ8794_GLOBAL5] not correct\r\n"); }
    809e:	214a      	movs	r1, #74	; 0x4a
    80a0:	2007      	movs	r0, #7
    80a2:	4b86      	ldr	r3, [pc, #536]	; (82bc <switch_configure+0x2c0>)
    80a4:	4798      	blx	r3
    80a6:	2800      	cmp	r0, #0
    80a8:	f000 8243 	beq.w	8532 <switch_configure+0x536>
	if (!checkKSZreg(SPI_KSZ8794_GLOBAL6, 0x00))		{ xprintf("[SPI_KSZ8794_GLOBAL6] not correct\r\n"); }
    80ac:	2100      	movs	r1, #0
    80ae:	2008      	movs	r0, #8
    80b0:	4b82      	ldr	r3, [pc, #520]	; (82bc <switch_configure+0x2c0>)
    80b2:	4798      	blx	r3
    80b4:	2800      	cmp	r0, #0
    80b6:	f000 8240 	beq.w	853a <switch_configure+0x53e>
	if (!checkKSZreg(SPI_KSZ8794_GLOBAL9, 0x00))		{ xprintf("[SPI_KSZ8794_GLOBAL9] not correct\r\n"); }
    80ba:	2100      	movs	r1, #0
    80bc:	200b      	movs	r0, #11
    80be:	4b7f      	ldr	r3, [pc, #508]	; (82bc <switch_configure+0x2c0>)
    80c0:	4798      	blx	r3
    80c2:	2800      	cmp	r0, #0
    80c4:	f000 823d 	beq.w	8542 <switch_configure+0x546>
	if (!checkKSZreg(SPI_KSZ8794_GLOBAL10, 0x44))		{ xprintf("[SPI_KSZ8794_GLOBAL10] not correct\r\n"); }
    80c8:	2144      	movs	r1, #68	; 0x44
    80ca:	200c      	movs	r0, #12
    80cc:	4b7b      	ldr	r3, [pc, #492]	; (82bc <switch_configure+0x2c0>)
    80ce:	4798      	blx	r3
    80d0:	2800      	cmp	r0, #0
    80d2:	f000 823a 	beq.w	854a <switch_configure+0x54e>
	if (!checkKSZreg(SPI_KSZ8794_PDMC1, 0x00))			{ xprintf("[SPI_KSZ8794_PDMC1] not correct\r\n"); }
    80d6:	2100      	movs	r1, #0
    80d8:	200e      	movs	r0, #14
    80da:	4b78      	ldr	r3, [pc, #480]	; (82bc <switch_configure+0x2c0>)
    80dc:	4798      	blx	r3
    80de:	2800      	cmp	r0, #0
    80e0:	f000 8237 	beq.w	8552 <switch_configure+0x556>
	if (!checkKSZreg(SPI_KSZ8794_PDMC2, 0x50))			{ xprintf("[SPI_KSZ8794_PDMC2] not correct\r\n"); }
    80e4:	2150      	movs	r1, #80	; 0x50
    80e6:	200f      	movs	r0, #15
    80e8:	4b74      	ldr	r3, [pc, #464]	; (82bc <switch_configure+0x2c0>)
    80ea:	4798      	blx	r3
    80ec:	2800      	cmp	r0, #0
    80ee:	f000 8234 	beq.w	855a <switch_configure+0x55e>
	
	writeKSZreg(SPI_KSZ8794_PORT1CONTROL0, 0x80);
    80f2:	2180      	movs	r1, #128	; 0x80
    80f4:	2010      	movs	r0, #16
    80f6:	4b72      	ldr	r3, [pc, #456]	; (82c0 <switch_configure+0x2c4>)
    80f8:	4798      	blx	r3
	delay_us(50);
    80fa:	2032      	movs	r0, #50	; 0x32
    80fc:	4b71      	ldr	r3, [pc, #452]	; (82c4 <switch_configure+0x2c8>)
    80fe:	4798      	blx	r3
	
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL0, 0x80))	{ xprintf("[SPI_KSZ8794_PORT1CONTROL0] not correct\r\n"); }
    8100:	2180      	movs	r1, #128	; 0x80
    8102:	2010      	movs	r0, #16
    8104:	4b6d      	ldr	r3, [pc, #436]	; (82bc <switch_configure+0x2c0>)
    8106:	4798      	blx	r3
    8108:	2800      	cmp	r0, #0
    810a:	f000 824d 	beq.w	85a8 <switch_configure+0x5ac>
	
	writeKSZreg(SPI_KSZ8794_PORT2CONTROL0, 0x80);
    810e:	2180      	movs	r1, #128	; 0x80
    8110:	2020      	movs	r0, #32
    8112:	4b6b      	ldr	r3, [pc, #428]	; (82c0 <switch_configure+0x2c4>)
    8114:	4798      	blx	r3
	delay_us(50);
    8116:	2032      	movs	r0, #50	; 0x32
    8118:	4b6a      	ldr	r3, [pc, #424]	; (82c4 <switch_configure+0x2c8>)
    811a:	4798      	blx	r3
	
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL0, 0x80))	{ xprintf("[SPI_KSZ8794_PORT2CONTROL0] not correct\r\n"); }
    811c:	2180      	movs	r1, #128	; 0x80
    811e:	2020      	movs	r0, #32
    8120:	4b66      	ldr	r3, [pc, #408]	; (82bc <switch_configure+0x2c0>)
    8122:	4798      	blx	r3
    8124:	2800      	cmp	r0, #0
    8126:	f000 8243 	beq.w	85b0 <switch_configure+0x5b4>
	
	writeKSZreg(SPI_KSZ8794_PORT3CONTROL0, 0x80);
    812a:	2180      	movs	r1, #128	; 0x80
    812c:	2030      	movs	r0, #48	; 0x30
    812e:	4b64      	ldr	r3, [pc, #400]	; (82c0 <switch_configure+0x2c4>)
    8130:	4798      	blx	r3
	delay_us(50);
    8132:	2032      	movs	r0, #50	; 0x32
    8134:	4b63      	ldr	r3, [pc, #396]	; (82c4 <switch_configure+0x2c8>)
    8136:	4798      	blx	r3
	
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL0, 0x80))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL0] not correct\r\n"); }
    8138:	2180      	movs	r1, #128	; 0x80
    813a:	2030      	movs	r0, #48	; 0x30
    813c:	4b5f      	ldr	r3, [pc, #380]	; (82bc <switch_configure+0x2c0>)
    813e:	4798      	blx	r3
    8140:	2800      	cmp	r0, #0
    8142:	f000 8239 	beq.w	85b8 <switch_configure+0x5bc>
	
	writeKSZreg(SPI_KSZ8794_PORT4CONTROL0, 0x80);
    8146:	2180      	movs	r1, #128	; 0x80
    8148:	2050      	movs	r0, #80	; 0x50
    814a:	4b5d      	ldr	r3, [pc, #372]	; (82c0 <switch_configure+0x2c4>)
    814c:	4798      	blx	r3
	delay_us(50);
    814e:	2032      	movs	r0, #50	; 0x32
    8150:	4b5c      	ldr	r3, [pc, #368]	; (82c4 <switch_configure+0x2c8>)
    8152:	4798      	blx	r3
	
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL0, 0x80))	{ xprintf("[SPI_KSZ8794_PORT4CONTROL0] not correct\r\n"); }
    8154:	2180      	movs	r1, #128	; 0x80
    8156:	2050      	movs	r0, #80	; 0x50
    8158:	4b58      	ldr	r3, [pc, #352]	; (82bc <switch_configure+0x2c0>)
    815a:	4798      	blx	r3
    815c:	2800      	cmp	r0, #0
    815e:	f000 822f 	beq.w	85c0 <switch_configure+0x5c4>
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL1, 0x1F))	{ xprintf("[SPI_KSZ8794_PORT1CONTROL1] not correct\r\n"); }
    8162:	211f      	movs	r1, #31
    8164:	2011      	movs	r0, #17
    8166:	4b55      	ldr	r3, [pc, #340]	; (82bc <switch_configure+0x2c0>)
    8168:	4798      	blx	r3
    816a:	2800      	cmp	r0, #0
    816c:	f000 822c 	beq.w	85c8 <switch_configure+0x5cc>
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL1, 0x1F))	{ xprintf("[SPI_KSZ8794_PORT2CONTROL1] not correct\r\n"); }
    8170:	211f      	movs	r1, #31
    8172:	2021      	movs	r0, #33	; 0x21
    8174:	4b51      	ldr	r3, [pc, #324]	; (82bc <switch_configure+0x2c0>)
    8176:	4798      	blx	r3
    8178:	2800      	cmp	r0, #0
    817a:	f000 8229 	beq.w	85d0 <switch_configure+0x5d4>
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL1, 0x1F))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL1] not correct\r\n"); }
    817e:	211f      	movs	r1, #31
    8180:	2031      	movs	r0, #49	; 0x31
    8182:	4b4e      	ldr	r3, [pc, #312]	; (82bc <switch_configure+0x2c0>)
    8184:	4798      	blx	r3
    8186:	2800      	cmp	r0, #0
    8188:	f000 8226 	beq.w	85d8 <switch_configure+0x5dc>
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL1, 0x1F))	{ xprintf("[SPI_KSZ8794_PORT4CONTROL1] not correct\r\n"); }
    818c:	211f      	movs	r1, #31
    818e:	2051      	movs	r0, #81	; 0x51
    8190:	4b4a      	ldr	r3, [pc, #296]	; (82bc <switch_configure+0x2c0>)
    8192:	4798      	blx	r3
    8194:	2800      	cmp	r0, #0
    8196:	f000 8223 	beq.w	85e0 <switch_configure+0x5e4>
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL2, 0x06))	{ xprintf("[SPI_KSZ8794_PORT1CONTROL2] not correct\r\n"); }
    819a:	2106      	movs	r1, #6
    819c:	2012      	movs	r0, #18
    819e:	4b47      	ldr	r3, [pc, #284]	; (82bc <switch_configure+0x2c0>)
    81a0:	4798      	blx	r3
    81a2:	2800      	cmp	r0, #0
    81a4:	f000 8220 	beq.w	85e8 <switch_configure+0x5ec>
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL2, 0x06))	{ xprintf("[SPI_KSZ8794_PORT2CONTROL2] not correct\r\n"); }
    81a8:	2106      	movs	r1, #6
    81aa:	2022      	movs	r0, #34	; 0x22
    81ac:	4b43      	ldr	r3, [pc, #268]	; (82bc <switch_configure+0x2c0>)
    81ae:	4798      	blx	r3
    81b0:	2800      	cmp	r0, #0
    81b2:	f000 821d 	beq.w	85f0 <switch_configure+0x5f4>
	
	/* For now, turn off the T-junction port 3 to the Power & Ethernet board attachment */
	writeKSZreg(SPI_KSZ8794_PORT3CONTROL2, 0x00);
    81b6:	2100      	movs	r1, #0
    81b8:	2032      	movs	r0, #50	; 0x32
    81ba:	4b41      	ldr	r3, [pc, #260]	; (82c0 <switch_configure+0x2c4>)
    81bc:	4798      	blx	r3
	delay_us(50);
    81be:	2032      	movs	r0, #50	; 0x32
    81c0:	4b40      	ldr	r3, [pc, #256]	; (82c4 <switch_configure+0x2c8>)
    81c2:	4798      	blx	r3
	
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL2, 0x00))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL2] not correct\r\n"); }
    81c4:	2100      	movs	r1, #0
    81c6:	2032      	movs	r0, #50	; 0x32
    81c8:	4b3c      	ldr	r3, [pc, #240]	; (82bc <switch_configure+0x2c0>)
    81ca:	4798      	blx	r3
    81cc:	2800      	cmp	r0, #0
    81ce:	f000 8213 	beq.w	85f8 <switch_configure+0x5fc>
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL2, 0x06))	{ xprintf("[SPI_KSZ8794_PORT4CONTROL2] not correct\r\n"); }
    81d2:	2106      	movs	r1, #6
    81d4:	2052      	movs	r0, #82	; 0x52
    81d6:	4b39      	ldr	r3, [pc, #228]	; (82bc <switch_configure+0x2c0>)
    81d8:	4798      	blx	r3
    81da:	2800      	cmp	r0, #0
    81dc:	f000 8210 	beq.w	8600 <switch_configure+0x604>
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL3, 0x00))	{ xprintf("[SPI_KSZ8794_PORT1CONTROL3] not correct\r\n"); }
    81e0:	2100      	movs	r1, #0
    81e2:	2013      	movs	r0, #19
    81e4:	4b35      	ldr	r3, [pc, #212]	; (82bc <switch_configure+0x2c0>)
    81e6:	4798      	blx	r3
    81e8:	2800      	cmp	r0, #0
    81ea:	f000 820d 	beq.w	8608 <switch_configure+0x60c>
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL3, 0x00))	{ xprintf("[SPI_KSZ8794_PORT2CONTROL3] not correct\r\n"); }
    81ee:	2100      	movs	r1, #0
    81f0:	2023      	movs	r0, #35	; 0x23
    81f2:	4b32      	ldr	r3, [pc, #200]	; (82bc <switch_configure+0x2c0>)
    81f4:	4798      	blx	r3
    81f6:	2800      	cmp	r0, #0
    81f8:	f000 820a 	beq.w	8610 <switch_configure+0x614>
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL3, 0x00))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL3] not correct\r\n"); }
    81fc:	2100      	movs	r1, #0
    81fe:	2033      	movs	r0, #51	; 0x33
    8200:	4b2e      	ldr	r3, [pc, #184]	; (82bc <switch_configure+0x2c0>)
    8202:	4798      	blx	r3
    8204:	2800      	cmp	r0, #0
    8206:	f000 8207 	beq.w	8618 <switch_configure+0x61c>
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL3, 0x00))	{ xprintf("[SPI_KSZ8794_PORT4CONTROL3] not correct\r\n"); }
    820a:	2100      	movs	r1, #0
    820c:	2053      	movs	r0, #83	; 0x53
    820e:	4b2b      	ldr	r3, [pc, #172]	; (82bc <switch_configure+0x2c0>)
    8210:	4798      	blx	r3
    8212:	2800      	cmp	r0, #0
    8214:	f000 8204 	beq.w	8620 <switch_configure+0x624>
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL4, 0x01))	{ xprintf("[SPI_KSZ8794_PORT1CONTROL4] not correct\r\n"); }
    8218:	2101      	movs	r1, #1
    821a:	2014      	movs	r0, #20
    821c:	4b27      	ldr	r3, [pc, #156]	; (82bc <switch_configure+0x2c0>)
    821e:	4798      	blx	r3
    8220:	2800      	cmp	r0, #0
    8222:	f000 8201 	beq.w	8628 <switch_configure+0x62c>
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL4, 0x01))	{ xprintf("[SPI_KSZ8794_PORT2CONTROL4] not correct\r\n"); }
    8226:	2101      	movs	r1, #1
    8228:	2024      	movs	r0, #36	; 0x24
    822a:	4b24      	ldr	r3, [pc, #144]	; (82bc <switch_configure+0x2c0>)
    822c:	4798      	blx	r3
    822e:	2800      	cmp	r0, #0
    8230:	f000 81fe 	beq.w	8630 <switch_configure+0x634>
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL4, 0x01))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL4] not correct\r\n"); }
    8234:	2101      	movs	r1, #1
    8236:	2034      	movs	r0, #52	; 0x34
    8238:	4b20      	ldr	r3, [pc, #128]	; (82bc <switch_configure+0x2c0>)
    823a:	4798      	blx	r3
    823c:	2800      	cmp	r0, #0
    823e:	f000 81fb 	beq.w	8638 <switch_configure+0x63c>
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL4, 0x01))	{ xprintf("[SPI_KSZ8794_PORT4CONTROL4] not correct\r\n"); }
    8242:	2101      	movs	r1, #1
    8244:	2054      	movs	r0, #84	; 0x54
    8246:	4b1d      	ldr	r3, [pc, #116]	; (82bc <switch_configure+0x2c0>)
    8248:	4798      	blx	r3
    824a:	2800      	cmp	r0, #0
    824c:	f000 81f8 	beq.w	8640 <switch_configure+0x644>
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL5, 0x00))	{ xprintf("[SPI_KSZ8794_PORT1CONTROL5] not correct\r\n"); }
    8250:	2100      	movs	r1, #0
    8252:	2015      	movs	r0, #21
    8254:	4b19      	ldr	r3, [pc, #100]	; (82bc <switch_configure+0x2c0>)
    8256:	4798      	blx	r3
    8258:	2800      	cmp	r0, #0
    825a:	f000 81f5 	beq.w	8648 <switch_configure+0x64c>
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL5, 0x00))	{ xprintf("[SPI_KSZ8794_PORT2CONTROL5] not correct\r\n"); }
    825e:	2100      	movs	r1, #0
    8260:	2025      	movs	r0, #37	; 0x25
    8262:	4b16      	ldr	r3, [pc, #88]	; (82bc <switch_configure+0x2c0>)
    8264:	4798      	blx	r3
    8266:	2800      	cmp	r0, #0
    8268:	f000 81f2 	beq.w	8650 <switch_configure+0x654>
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL5, 0x00))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL5] not correct\r\n"); }
    826c:	2100      	movs	r1, #0
    826e:	2035      	movs	r0, #53	; 0x35
    8270:	4b12      	ldr	r3, [pc, #72]	; (82bc <switch_configure+0x2c0>)
    8272:	4798      	blx	r3
    8274:	2800      	cmp	r0, #0
    8276:	f000 81ef 	beq.w	8658 <switch_configure+0x65c>
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL5, 0x00))	{ xprintf("[SPI_KSZ8794_PORT4CONTROL5] not correct\r\n"); }
    827a:	2100      	movs	r1, #0
    827c:	2055      	movs	r0, #85	; 0x55
    827e:	4b0f      	ldr	r3, [pc, #60]	; (82bc <switch_configure+0x2c0>)
    8280:	4798      	blx	r3
    8282:	2800      	cmp	r0, #0
    8284:	f000 81ec 	beq.w	8660 <switch_configure+0x664>
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL6, 0x28))	{ xprintf("[SPI_KSZ8794_PORT4CONTROL6] not correct\r\n"); }
    8288:	2128      	movs	r1, #40	; 0x28
    828a:	2056      	movs	r0, #86	; 0x56
    828c:	4b0b      	ldr	r3, [pc, #44]	; (82bc <switch_configure+0x2c0>)
    828e:	4798      	blx	r3
    8290:	2800      	cmp	r0, #0
    8292:	f000 81e9 	beq.w	8668 <switch_configure+0x66c>
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL7, 0x3F))	{ xprintf("[SPI_KSZ8794_PORT1CONTROL7] not correct\r\n"); }
    8296:	213f      	movs	r1, #63	; 0x3f
    8298:	2017      	movs	r0, #23
    829a:	4b08      	ldr	r3, [pc, #32]	; (82bc <switch_configure+0x2c0>)
    829c:	4798      	blx	r3
    829e:	2800      	cmp	r0, #0
    82a0:	f000 81e6 	beq.w	8670 <switch_configure+0x674>
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL7, 0x3F))	{ xprintf("[SPI_KSZ8794_PORT2CONTROL7] not correct\r\n"); }
    82a4:	213f      	movs	r1, #63	; 0x3f
    82a6:	2027      	movs	r0, #39	; 0x27
    82a8:	4b04      	ldr	r3, [pc, #16]	; (82bc <switch_configure+0x2c0>)
    82aa:	4798      	blx	r3
    82ac:	2800      	cmp	r0, #0
    82ae:	f000 81e3 	beq.w	8678 <switch_configure+0x67c>
    82b2:	e009      	b.n	82c8 <switch_configure+0x2cc>
    82b4:	0000f0a4 	.word	0x0000f0a4
    82b8:	0000031d 	.word	0x0000031d
    82bc:	0000d8f1 	.word	0x0000d8f1
    82c0:	0000d995 	.word	0x0000d995
    82c4:	0000152d 	.word	0x0000152d
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL7, 0x3F))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL7] not correct\r\n"); }
    82c8:	213f      	movs	r1, #63	; 0x3f
    82ca:	2037      	movs	r0, #55	; 0x37
    82cc:	4ba5      	ldr	r3, [pc, #660]	; (8564 <switch_configure+0x568>)
    82ce:	4798      	blx	r3
    82d0:	2800      	cmp	r0, #0
    82d2:	f000 81d5 	beq.w	8680 <switch_configure+0x684>
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL8, 0x00))	{ xprintf("[SPI_KSZ8794_PORT1CONTROL8] not correct\r\n"); }
    82d6:	2100      	movs	r1, #0
    82d8:	201a      	movs	r0, #26
    82da:	4ba2      	ldr	r3, [pc, #648]	; (8564 <switch_configure+0x568>)
    82dc:	4798      	blx	r3
    82de:	2800      	cmp	r0, #0
    82e0:	f000 81d2 	beq.w	8688 <switch_configure+0x68c>
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL8, 0x00))	{ xprintf("[SPI_KSZ8794_PORT2CONTROL8] not correct\r\n"); }
    82e4:	2100      	movs	r1, #0
    82e6:	202a      	movs	r0, #42	; 0x2a
    82e8:	4b9e      	ldr	r3, [pc, #632]	; (8564 <switch_configure+0x568>)
    82ea:	4798      	blx	r3
    82ec:	2800      	cmp	r0, #0
    82ee:	f000 81cf 	beq.w	8690 <switch_configure+0x694>
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL8, 0x00))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL8] not correct\r\n"); }
    82f2:	2100      	movs	r1, #0
    82f4:	203a      	movs	r0, #58	; 0x3a
    82f6:	4b9b      	ldr	r3, [pc, #620]	; (8564 <switch_configure+0x568>)
    82f8:	4798      	blx	r3
    82fa:	2800      	cmp	r0, #0
    82fc:	f000 81cc 	beq.w	8698 <switch_configure+0x69c>
	if (!checkKSZreg(SPI_KSZ8794_PORT1LINKMD, 0x00))	{ xprintf("[SPI_KSZ8794_PORT1LINKMD] not correct\r\n"); }
    8300:	2100      	movs	r1, #0
    8302:	201b      	movs	r0, #27
    8304:	4b97      	ldr	r3, [pc, #604]	; (8564 <switch_configure+0x568>)
    8306:	4798      	blx	r3
    8308:	2800      	cmp	r0, #0
    830a:	f000 81c9 	beq.w	86a0 <switch_configure+0x6a4>
	if (!checkKSZreg(SPI_KSZ8794_PORT2LINKMD, 0x00))	{ xprintf("[SPI_KSZ8794_PORT2LINKMD] not correct\r\n"); }
    830e:	2100      	movs	r1, #0
    8310:	202b      	movs	r0, #43	; 0x2b
    8312:	4b94      	ldr	r3, [pc, #592]	; (8564 <switch_configure+0x568>)
    8314:	4798      	blx	r3
    8316:	2800      	cmp	r0, #0
    8318:	f000 81c6 	beq.w	86a8 <switch_configure+0x6ac>
	if (!checkKSZreg(SPI_KSZ8794_PORT3LINKMD, 0x00))	{ xprintf("[SPI_KSZ8794_PORT3LINKMD] not correct\r\n"); }
    831c:	2100      	movs	r1, #0
    831e:	203b      	movs	r0, #59	; 0x3b
    8320:	4b90      	ldr	r3, [pc, #576]	; (8564 <switch_configure+0x568>)
    8322:	4798      	blx	r3
    8324:	2800      	cmp	r0, #0
    8326:	f000 81c3 	beq.w	86b0 <switch_configure+0x6b4>
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL9, 0x5F))	{ xprintf("[SPI_KSZ8794_PORT1CONTROL9] not correct\r\n"); }
    832a:	215f      	movs	r1, #95	; 0x5f
    832c:	201c      	movs	r0, #28
    832e:	4b8d      	ldr	r3, [pc, #564]	; (8564 <switch_configure+0x568>)
    8330:	4798      	blx	r3
    8332:	2800      	cmp	r0, #0
    8334:	f000 81c0 	beq.w	86b8 <switch_configure+0x6bc>
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL9, 0x5F))	{ xprintf("[SPI_KSZ8794_PORT2CONTROL9] not correct\r\n"); }
    8338:	215f      	movs	r1, #95	; 0x5f
    833a:	202c      	movs	r0, #44	; 0x2c
    833c:	4b89      	ldr	r3, [pc, #548]	; (8564 <switch_configure+0x568>)
    833e:	4798      	blx	r3
    8340:	2800      	cmp	r0, #0
    8342:	f000 81bd 	beq.w	86c0 <switch_configure+0x6c4>
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL9, 0x5F))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL9] not correct\r\n"); }
    8346:	215f      	movs	r1, #95	; 0x5f
    8348:	203c      	movs	r0, #60	; 0x3c
    834a:	4b86      	ldr	r3, [pc, #536]	; (8564 <switch_configure+0x568>)
    834c:	4798      	blx	r3
    834e:	2800      	cmp	r0, #0
    8350:	f000 81ba 	beq.w	86c8 <switch_configure+0x6cc>
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL10, 0x00)) { xprintf("[SPI_KSZ8794_PORT1CONTROL10] not correct\r\n"); }
    8354:	2100      	movs	r1, #0
    8356:	201d      	movs	r0, #29
    8358:	4b82      	ldr	r3, [pc, #520]	; (8564 <switch_configure+0x568>)
    835a:	4798      	blx	r3
    835c:	2800      	cmp	r0, #0
    835e:	f000 81b7 	beq.w	86d0 <switch_configure+0x6d4>
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL10, 0x00)) { xprintf("[SPI_KSZ8794_PORT2CONTROL10] not correct\r\n"); }
    8362:	2100      	movs	r1, #0
    8364:	202d      	movs	r0, #45	; 0x2d
    8366:	4b7f      	ldr	r3, [pc, #508]	; (8564 <switch_configure+0x568>)
    8368:	4798      	blx	r3
    836a:	2800      	cmp	r0, #0
    836c:	f000 81b4 	beq.w	86d8 <switch_configure+0x6dc>
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL10, 0x00)) { xprintf("[SPI_KSZ8794_PORT3CONTROL10] not correct\r\n"); }
    8370:	2100      	movs	r1, #0
    8372:	203d      	movs	r0, #61	; 0x3d
    8374:	4b7b      	ldr	r3, [pc, #492]	; (8564 <switch_configure+0x568>)
    8376:	4798      	blx	r3
    8378:	2800      	cmp	r0, #0
    837a:	f000 81b1 	beq.w	86e0 <switch_configure+0x6e4>
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL20, 0x62)) { xprintf("[SPI_KSZ8794_PORT2CONTROL20] not correct\r\n"); }
    837e:	2162      	movs	r1, #98	; 0x62
    8380:	20a3      	movs	r0, #163	; 0xa3
    8382:	4b78      	ldr	r3, [pc, #480]	; (8564 <switch_configure+0x568>)
    8384:	4798      	blx	r3
    8386:	2800      	cmp	r0, #0
    8388:	f000 81ae 	beq.w	86e8 <switch_configure+0x6ec>
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL12, 0x80)) { xprintf("[SPI_KSZ8794_PORT1CONTROL12] not correct\r\n"); }
    838c:	2180      	movs	r1, #128	; 0x80
    838e:	20b0      	movs	r0, #176	; 0xb0
    8390:	4b74      	ldr	r3, [pc, #464]	; (8564 <switch_configure+0x568>)
    8392:	4798      	blx	r3
    8394:	2800      	cmp	r0, #0
    8396:	f000 81ab 	beq.w	86f0 <switch_configure+0x6f4>
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL12, 0x80)) { xprintf("[SPI_KSZ8794_PORT2CONTROL12] not correct\r\n"); }
    839a:	2180      	movs	r1, #128	; 0x80
    839c:	20c0      	movs	r0, #192	; 0xc0
    839e:	4b71      	ldr	r3, [pc, #452]	; (8564 <switch_configure+0x568>)
    83a0:	4798      	blx	r3
    83a2:	2800      	cmp	r0, #0
    83a4:	f000 81a8 	beq.w	86f8 <switch_configure+0x6fc>
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL12, 0x80)) { xprintf("[SPI_KSZ8794_PORT3CONTROL12] not correct\r\n"); }
    83a8:	2180      	movs	r1, #128	; 0x80
    83aa:	20d0      	movs	r0, #208	; 0xd0
    83ac:	4b6d      	ldr	r3, [pc, #436]	; (8564 <switch_configure+0x568>)
    83ae:	4798      	blx	r3
    83b0:	2800      	cmp	r0, #0
    83b2:	f000 81a5 	beq.w	8700 <switch_configure+0x704>
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL12, 0x80)) { xprintf("[SPI_KSZ8794_PORT4CONTROL12] not correct\r\n"); }
    83b6:	2180      	movs	r1, #128	; 0x80
    83b8:	20f0      	movs	r0, #240	; 0xf0
    83ba:	4b6a      	ldr	r3, [pc, #424]	; (8564 <switch_configure+0x568>)
    83bc:	4798      	blx	r3
    83be:	2800      	cmp	r0, #0
    83c0:	f000 81a2 	beq.w	8708 <switch_configure+0x70c>
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL13, 0x00)) { xprintf("[SPI_KSZ8794_PORT1CONTROL13] not correct\r\n"); }
    83c4:	2100      	movs	r1, #0
    83c6:	20b1      	movs	r0, #177	; 0xb1
    83c8:	4b66      	ldr	r3, [pc, #408]	; (8564 <switch_configure+0x568>)
    83ca:	4798      	blx	r3
    83cc:	2800      	cmp	r0, #0
    83ce:	f000 819f 	beq.w	8710 <switch_configure+0x714>
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL13, 0x00)) { xprintf("[SPI_KSZ8794_PORT2CONTROL13] not correct\r\n"); }
    83d2:	2100      	movs	r1, #0
    83d4:	20c1      	movs	r0, #193	; 0xc1
    83d6:	4b63      	ldr	r3, [pc, #396]	; (8564 <switch_configure+0x568>)
    83d8:	4798      	blx	r3
    83da:	2800      	cmp	r0, #0
    83dc:	f000 819c 	beq.w	8718 <switch_configure+0x71c>
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL13, 0x00)) { xprintf("[SPI_KSZ8794_PORT3CONTROL13] not correct\r\n"); }
    83e0:	2100      	movs	r1, #0
    83e2:	20d1      	movs	r0, #209	; 0xd1
    83e4:	4b5f      	ldr	r3, [pc, #380]	; (8564 <switch_configure+0x568>)
    83e6:	4798      	blx	r3
    83e8:	2800      	cmp	r0, #0
    83ea:	f000 8199 	beq.w	8720 <switch_configure+0x724>
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL13, 0x00)) { xprintf("[SPI_KSZ8794_PORT4CONTROL13] not correct\r\n"); }
    83ee:	2100      	movs	r1, #0
    83f0:	20f1      	movs	r0, #241	; 0xf1
    83f2:	4b5c      	ldr	r3, [pc, #368]	; (8564 <switch_configure+0x568>)
    83f4:	4798      	blx	r3
    83f6:	2800      	cmp	r0, #0
    83f8:	f000 8196 	beq.w	8728 <switch_configure+0x72c>
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL14, 0x88)) { xprintf("[SPI_KSZ8794_PORT1CONTROL14] not correct\r\n"); }
    83fc:	2188      	movs	r1, #136	; 0x88
    83fe:	20b2      	movs	r0, #178	; 0xb2
    8400:	4b58      	ldr	r3, [pc, #352]	; (8564 <switch_configure+0x568>)
    8402:	4798      	blx	r3
    8404:	2800      	cmp	r0, #0
    8406:	f000 8193 	beq.w	8730 <switch_configure+0x734>
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL14, 0x88)) { xprintf("[SPI_KSZ8794_PORT2CONTROL14] not correct\r\n"); }
    840a:	2188      	movs	r1, #136	; 0x88
    840c:	20c2      	movs	r0, #194	; 0xc2
    840e:	4b55      	ldr	r3, [pc, #340]	; (8564 <switch_configure+0x568>)
    8410:	4798      	blx	r3
    8412:	2800      	cmp	r0, #0
    8414:	f000 8190 	beq.w	8738 <switch_configure+0x73c>
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL14, 0x88)) { xprintf("[SPI_KSZ8794_PORT3CONTROL14] not correct\r\n"); }
    8418:	2188      	movs	r1, #136	; 0x88
    841a:	20d2      	movs	r0, #210	; 0xd2
    841c:	4b51      	ldr	r3, [pc, #324]	; (8564 <switch_configure+0x568>)
    841e:	4798      	blx	r3
    8420:	2800      	cmp	r0, #0
    8422:	f000 818d 	beq.w	8740 <switch_configure+0x744>
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL14, 0x88)) { xprintf("[SPI_KSZ8794_PORT4CONTROL14] not correct\r\n"); }
    8426:	2188      	movs	r1, #136	; 0x88
    8428:	20f2      	movs	r0, #242	; 0xf2
    842a:	4b4e      	ldr	r3, [pc, #312]	; (8564 <switch_configure+0x568>)
    842c:	4798      	blx	r3
    842e:	2800      	cmp	r0, #0
    8430:	f000 818a 	beq.w	8748 <switch_configure+0x74c>
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL15, 0x84)) { xprintf("[SPI_KSZ8794_PORT1CONTROL15] not correct\r\n"); }
    8434:	2184      	movs	r1, #132	; 0x84
    8436:	20b3      	movs	r0, #179	; 0xb3
    8438:	4b4a      	ldr	r3, [pc, #296]	; (8564 <switch_configure+0x568>)
    843a:	4798      	blx	r3
    843c:	2800      	cmp	r0, #0
    843e:	f000 8187 	beq.w	8750 <switch_configure+0x754>
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL15, 0x84)) { xprintf("[SPI_KSZ8794_PORT2CONTROL15] not correct\r\n"); }
    8442:	2184      	movs	r1, #132	; 0x84
    8444:	20c3      	movs	r0, #195	; 0xc3
    8446:	4b47      	ldr	r3, [pc, #284]	; (8564 <switch_configure+0x568>)
    8448:	4798      	blx	r3
    844a:	2800      	cmp	r0, #0
    844c:	f000 8184 	beq.w	8758 <switch_configure+0x75c>
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL15, 0x84)) { xprintf("[SPI_KSZ8794_PORT3CONTROL15] not correct\r\n"); }
    8450:	2184      	movs	r1, #132	; 0x84
    8452:	20d3      	movs	r0, #211	; 0xd3
    8454:	4b43      	ldr	r3, [pc, #268]	; (8564 <switch_configure+0x568>)
    8456:	4798      	blx	r3
    8458:	2800      	cmp	r0, #0
    845a:	f000 8181 	beq.w	8760 <switch_configure+0x764>
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL15, 0x84)) { xprintf("[SPI_KSZ8794_PORT4CONTROL15] not correct\r\n"); }
    845e:	2184      	movs	r1, #132	; 0x84
    8460:	20f3      	movs	r0, #243	; 0xf3
    8462:	4b40      	ldr	r3, [pc, #256]	; (8564 <switch_configure+0x568>)
    8464:	4798      	blx	r3
    8466:	2800      	cmp	r0, #0
    8468:	f000 817e 	beq.w	8768 <switch_configure+0x76c>
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL16, 0x82)) { xprintf("[SPI_KSZ8794_PORT1CONTROL16] not correct\r\n"); }
    846c:	2182      	movs	r1, #130	; 0x82
    846e:	20b4      	movs	r0, #180	; 0xb4
    8470:	4b3c      	ldr	r3, [pc, #240]	; (8564 <switch_configure+0x568>)
    8472:	4798      	blx	r3
    8474:	2800      	cmp	r0, #0
    8476:	f000 817b 	beq.w	8770 <switch_configure+0x774>
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL16, 0x82)) { xprintf("[SPI_KSZ8794_PORT2CONTROL16] not correct\r\n"); }
    847a:	2182      	movs	r1, #130	; 0x82
    847c:	20c4      	movs	r0, #196	; 0xc4
    847e:	4b39      	ldr	r3, [pc, #228]	; (8564 <switch_configure+0x568>)
    8480:	4798      	blx	r3
    8482:	2800      	cmp	r0, #0
    8484:	f000 8178 	beq.w	8778 <switch_configure+0x77c>
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL16, 0x82)) { xprintf("[SPI_KSZ8794_PORT3CONTROL16] not correct\r\n"); }
    8488:	2182      	movs	r1, #130	; 0x82
    848a:	20d4      	movs	r0, #212	; 0xd4
    848c:	4b35      	ldr	r3, [pc, #212]	; (8564 <switch_configure+0x568>)
    848e:	4798      	blx	r3
    8490:	2800      	cmp	r0, #0
    8492:	f000 8175 	beq.w	8780 <switch_configure+0x784>
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL16, 0x82)) { xprintf("[SPI_KSZ8794_PORT4CONTROL16] not correct\r\n"); }
    8496:	2182      	movs	r1, #130	; 0x82
    8498:	20f4      	movs	r0, #244	; 0xf4
    849a:	4b32      	ldr	r3, [pc, #200]	; (8564 <switch_configure+0x568>)
    849c:	4798      	blx	r3
    849e:	2800      	cmp	r0, #0
    84a0:	f000 8172 	beq.w	8788 <switch_configure+0x78c>
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL17, 0x81)) { xprintf("[SPI_KSZ8794_PORT1CONTROL17] not correct\r\n"); }
    84a4:	2181      	movs	r1, #129	; 0x81
    84a6:	20b5      	movs	r0, #181	; 0xb5
    84a8:	4b2e      	ldr	r3, [pc, #184]	; (8564 <switch_configure+0x568>)
    84aa:	4798      	blx	r3
    84ac:	2800      	cmp	r0, #0
    84ae:	f000 816f 	beq.w	8790 <switch_configure+0x794>
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL17, 0x81)) { xprintf("[SPI_KSZ8794_PORT2CONTROL17] not correct\r\n"); }
    84b2:	2181      	movs	r1, #129	; 0x81
    84b4:	20c5      	movs	r0, #197	; 0xc5
    84b6:	4b2b      	ldr	r3, [pc, #172]	; (8564 <switch_configure+0x568>)
    84b8:	4798      	blx	r3
    84ba:	2800      	cmp	r0, #0
    84bc:	f000 816c 	beq.w	8798 <switch_configure+0x79c>
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL17, 0x81)) { xprintf("[SPI_KSZ8794_PORT3CONTROL17] not correct\r\n"); }
    84c0:	2181      	movs	r1, #129	; 0x81
    84c2:	20d5      	movs	r0, #213	; 0xd5
    84c4:	4b27      	ldr	r3, [pc, #156]	; (8564 <switch_configure+0x568>)
    84c6:	4798      	blx	r3
    84c8:	2800      	cmp	r0, #0
    84ca:	f000 81e9 	beq.w	88a0 <switch_configure+0x8a4>
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL17, 0x81)) { xprintf("[SPI_KSZ8794_PORT4CONTROL17] not correct\r\n"); }
    84ce:	2181      	movs	r1, #129	; 0x81
    84d0:	20f5      	movs	r0, #245	; 0xf5
    84d2:	4b24      	ldr	r3, [pc, #144]	; (8564 <switch_configure+0x568>)
    84d4:	4798      	blx	r3
    84d6:	2800      	cmp	r0, #0
    84d8:	f000 81e6 	beq.w	88a8 <switch_configure+0x8ac>
		
	/* Start the Ethernet SWITCH operation */
	writeKSZreg(SPI_KSZ8794_START, 0x01);
    84dc:	2101      	movs	r1, #1
    84de:	4608      	mov	r0, r1
    84e0:	4b21      	ldr	r3, [pc, #132]	; (8568 <switch_configure+0x56c>)
    84e2:	4798      	blx	r3
	delay_us(50);
    84e4:	2032      	movs	r0, #50	; 0x32
    84e6:	4b21      	ldr	r3, [pc, #132]	; (856c <switch_configure+0x570>)
    84e8:	4798      	blx	r3
	
	/* Check it has re-started and running */
	if (!checkKSZreg(SPI_KSZ8794_START, 0x61))			{ xprintf("[SPI_KSZ8794_START final] not correct\r\n"); }
    84ea:	2161      	movs	r1, #97	; 0x61
    84ec:	2001      	movs	r0, #1
    84ee:	4b1d      	ldr	r3, [pc, #116]	; (8564 <switch_configure+0x568>)
    84f0:	4798      	blx	r3
    84f2:	2800      	cmp	r0, #0
    84f4:	f000 81dc 	beq.w	88b0 <switch_configure+0x8b4>
    84f8:	bd08      	pop	{r3, pc}
	if (!checkKSZreg(SPI_KSZ8794_FAMILY_ID, 0x87))		{ xprintf("[SPI_KSZ8794_FAMILY_ID] not correct\r\n"); }
    84fa:	481d      	ldr	r0, [pc, #116]	; (8570 <switch_configure+0x574>)
    84fc:	4b1d      	ldr	r3, [pc, #116]	; (8574 <switch_configure+0x578>)
    84fe:	4798      	blx	r3
    8500:	e587      	b.n	8012 <switch_configure+0x16>
	if (!checkKSZreg(SPI_KSZ8794_START, 0x60))			{ xprintf("[SPI_KSZ8794_START first] not correct\r\n"); }
    8502:	481d      	ldr	r0, [pc, #116]	; (8578 <switch_configure+0x57c>)
    8504:	4b1b      	ldr	r3, [pc, #108]	; (8574 <switch_configure+0x578>)
    8506:	4798      	blx	r3
    8508:	e591      	b.n	802e <switch_configure+0x32>
	if (!checkKSZreg(SPI_KSZ8794_GLOBAL0, 0x0D))		{ xprintf("[SPI_KSZ8794_GLOBAL0] not correct\r\n"); }
    850a:	481c      	ldr	r0, [pc, #112]	; (857c <switch_configure+0x580>)
    850c:	4b19      	ldr	r3, [pc, #100]	; (8574 <switch_configure+0x578>)
    850e:	4798      	blx	r3
    8510:	e59b      	b.n	804a <switch_configure+0x4e>
	if (!checkKSZreg(SPI_KSZ8794_GLOBAL1, 0x0C))		{ xprintf("[SPI_KSZ8794_GLOBAL1] not correct\r\n"); }
    8512:	481b      	ldr	r0, [pc, #108]	; (8580 <switch_configure+0x584>)
    8514:	4b17      	ldr	r3, [pc, #92]	; (8574 <switch_configure+0x578>)
    8516:	4798      	blx	r3
    8518:	e5a5      	b.n	8066 <switch_configure+0x6a>
	if (!checkKSZreg(SPI_KSZ8794_GLOBAL2, 0xB2))		{ xprintf("[SPI_KSZ8794_GLOBAL2] not correct\r\n"); }
    851a:	481a      	ldr	r0, [pc, #104]	; (8584 <switch_configure+0x588>)
    851c:	4b15      	ldr	r3, [pc, #84]	; (8574 <switch_configure+0x578>)
    851e:	4798      	blx	r3
    8520:	e5af      	b.n	8082 <switch_configure+0x86>
	if (!checkKSZreg(SPI_KSZ8794_GLOBAL3, 0x00))		{ xprintf("[SPI_KSZ8794_GLOBAL3] not correct\r\n"); }
    8522:	4819      	ldr	r0, [pc, #100]	; (8588 <switch_configure+0x58c>)
    8524:	4b13      	ldr	r3, [pc, #76]	; (8574 <switch_configure+0x578>)
    8526:	4798      	blx	r3
    8528:	e5b2      	b.n	8090 <switch_configure+0x94>
	if (!checkKSZreg(SPI_KSZ8794_GLOBAL4, 0x00))		{ xprintf("[SPI_KSZ8794_GLOBAL4] not correct\r\n"); }
    852a:	4818      	ldr	r0, [pc, #96]	; (858c <switch_configure+0x590>)
    852c:	4b11      	ldr	r3, [pc, #68]	; (8574 <switch_configure+0x578>)
    852e:	4798      	blx	r3
    8530:	e5b5      	b.n	809e <switch_configure+0xa2>
	if (!checkKSZreg(SPI_KSZ8794_GLOBAL5, 0x4A))		{ xprintf("[SPI_KSZ8794_GLOBAL5] not correct\r\n"); }
    8532:	4817      	ldr	r0, [pc, #92]	; (8590 <switch_configure+0x594>)
    8534:	4b0f      	ldr	r3, [pc, #60]	; (8574 <switch_configure+0x578>)
    8536:	4798      	blx	r3
    8538:	e5b8      	b.n	80ac <switch_configure+0xb0>
	if (!checkKSZreg(SPI_KSZ8794_GLOBAL6, 0x00))		{ xprintf("[SPI_KSZ8794_GLOBAL6] not correct\r\n"); }
    853a:	4816      	ldr	r0, [pc, #88]	; (8594 <switch_configure+0x598>)
    853c:	4b0d      	ldr	r3, [pc, #52]	; (8574 <switch_configure+0x578>)
    853e:	4798      	blx	r3
    8540:	e5bb      	b.n	80ba <switch_configure+0xbe>
	if (!checkKSZreg(SPI_KSZ8794_GLOBAL9, 0x00))		{ xprintf("[SPI_KSZ8794_GLOBAL9] not correct\r\n"); }
    8542:	4815      	ldr	r0, [pc, #84]	; (8598 <switch_configure+0x59c>)
    8544:	4b0b      	ldr	r3, [pc, #44]	; (8574 <switch_configure+0x578>)
    8546:	4798      	blx	r3
    8548:	e5be      	b.n	80c8 <switch_configure+0xcc>
	if (!checkKSZreg(SPI_KSZ8794_GLOBAL10, 0x44))		{ xprintf("[SPI_KSZ8794_GLOBAL10] not correct\r\n"); }
    854a:	4814      	ldr	r0, [pc, #80]	; (859c <switch_configure+0x5a0>)
    854c:	4b09      	ldr	r3, [pc, #36]	; (8574 <switch_configure+0x578>)
    854e:	4798      	blx	r3
    8550:	e5c1      	b.n	80d6 <switch_configure+0xda>
	if (!checkKSZreg(SPI_KSZ8794_PDMC1, 0x00))			{ xprintf("[SPI_KSZ8794_PDMC1] not correct\r\n"); }
    8552:	4813      	ldr	r0, [pc, #76]	; (85a0 <switch_configure+0x5a4>)
    8554:	4b07      	ldr	r3, [pc, #28]	; (8574 <switch_configure+0x578>)
    8556:	4798      	blx	r3
    8558:	e5c4      	b.n	80e4 <switch_configure+0xe8>
	if (!checkKSZreg(SPI_KSZ8794_PDMC2, 0x50))			{ xprintf("[SPI_KSZ8794_PDMC2] not correct\r\n"); }
    855a:	4812      	ldr	r0, [pc, #72]	; (85a4 <switch_configure+0x5a8>)
    855c:	4b05      	ldr	r3, [pc, #20]	; (8574 <switch_configure+0x578>)
    855e:	4798      	blx	r3
    8560:	e5c7      	b.n	80f2 <switch_configure+0xf6>
    8562:	bf00      	nop
    8564:	0000d8f1 	.word	0x0000d8f1
    8568:	0000d995 	.word	0x0000d995
    856c:	0000152d 	.word	0x0000152d
    8570:	0000f0ec 	.word	0x0000f0ec
    8574:	0000031d 	.word	0x0000031d
    8578:	0000f114 	.word	0x0000f114
    857c:	0000f13c 	.word	0x0000f13c
    8580:	0000f160 	.word	0x0000f160
    8584:	0000f184 	.word	0x0000f184
    8588:	0000f1a8 	.word	0x0000f1a8
    858c:	0000f1cc 	.word	0x0000f1cc
    8590:	0000f1f0 	.word	0x0000f1f0
    8594:	0000f214 	.word	0x0000f214
    8598:	0000f238 	.word	0x0000f238
    859c:	0000f25c 	.word	0x0000f25c
    85a0:	0000f284 	.word	0x0000f284
    85a4:	0000f2a8 	.word	0x0000f2a8
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL0, 0x80))	{ xprintf("[SPI_KSZ8794_PORT1CONTROL0] not correct\r\n"); }
    85a8:	487d      	ldr	r0, [pc, #500]	; (87a0 <switch_configure+0x7a4>)
    85aa:	4b7e      	ldr	r3, [pc, #504]	; (87a4 <switch_configure+0x7a8>)
    85ac:	4798      	blx	r3
    85ae:	e5ae      	b.n	810e <switch_configure+0x112>
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL0, 0x80))	{ xprintf("[SPI_KSZ8794_PORT2CONTROL0] not correct\r\n"); }
    85b0:	487d      	ldr	r0, [pc, #500]	; (87a8 <switch_configure+0x7ac>)
    85b2:	4b7c      	ldr	r3, [pc, #496]	; (87a4 <switch_configure+0x7a8>)
    85b4:	4798      	blx	r3
    85b6:	e5b8      	b.n	812a <switch_configure+0x12e>
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL0, 0x80))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL0] not correct\r\n"); }
    85b8:	487c      	ldr	r0, [pc, #496]	; (87ac <switch_configure+0x7b0>)
    85ba:	4b7a      	ldr	r3, [pc, #488]	; (87a4 <switch_configure+0x7a8>)
    85bc:	4798      	blx	r3
    85be:	e5c2      	b.n	8146 <switch_configure+0x14a>
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL0, 0x80))	{ xprintf("[SPI_KSZ8794_PORT4CONTROL0] not correct\r\n"); }
    85c0:	487b      	ldr	r0, [pc, #492]	; (87b0 <switch_configure+0x7b4>)
    85c2:	4b78      	ldr	r3, [pc, #480]	; (87a4 <switch_configure+0x7a8>)
    85c4:	4798      	blx	r3
    85c6:	e5cc      	b.n	8162 <switch_configure+0x166>
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL1, 0x1F))	{ xprintf("[SPI_KSZ8794_PORT1CONTROL1] not correct\r\n"); }
    85c8:	487a      	ldr	r0, [pc, #488]	; (87b4 <switch_configure+0x7b8>)
    85ca:	4b76      	ldr	r3, [pc, #472]	; (87a4 <switch_configure+0x7a8>)
    85cc:	4798      	blx	r3
    85ce:	e5cf      	b.n	8170 <switch_configure+0x174>
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL1, 0x1F))	{ xprintf("[SPI_KSZ8794_PORT2CONTROL1] not correct\r\n"); }
    85d0:	4879      	ldr	r0, [pc, #484]	; (87b8 <switch_configure+0x7bc>)
    85d2:	4b74      	ldr	r3, [pc, #464]	; (87a4 <switch_configure+0x7a8>)
    85d4:	4798      	blx	r3
    85d6:	e5d2      	b.n	817e <switch_configure+0x182>
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL1, 0x1F))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL1] not correct\r\n"); }
    85d8:	4878      	ldr	r0, [pc, #480]	; (87bc <switch_configure+0x7c0>)
    85da:	4b72      	ldr	r3, [pc, #456]	; (87a4 <switch_configure+0x7a8>)
    85dc:	4798      	blx	r3
    85de:	e5d5      	b.n	818c <switch_configure+0x190>
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL1, 0x1F))	{ xprintf("[SPI_KSZ8794_PORT4CONTROL1] not correct\r\n"); }
    85e0:	4877      	ldr	r0, [pc, #476]	; (87c0 <switch_configure+0x7c4>)
    85e2:	4b70      	ldr	r3, [pc, #448]	; (87a4 <switch_configure+0x7a8>)
    85e4:	4798      	blx	r3
    85e6:	e5d8      	b.n	819a <switch_configure+0x19e>
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL2, 0x06))	{ xprintf("[SPI_KSZ8794_PORT1CONTROL2] not correct\r\n"); }
    85e8:	4876      	ldr	r0, [pc, #472]	; (87c4 <switch_configure+0x7c8>)
    85ea:	4b6e      	ldr	r3, [pc, #440]	; (87a4 <switch_configure+0x7a8>)
    85ec:	4798      	blx	r3
    85ee:	e5db      	b.n	81a8 <switch_configure+0x1ac>
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL2, 0x06))	{ xprintf("[SPI_KSZ8794_PORT2CONTROL2] not correct\r\n"); }
    85f0:	4875      	ldr	r0, [pc, #468]	; (87c8 <switch_configure+0x7cc>)
    85f2:	4b6c      	ldr	r3, [pc, #432]	; (87a4 <switch_configure+0x7a8>)
    85f4:	4798      	blx	r3
    85f6:	e5de      	b.n	81b6 <switch_configure+0x1ba>
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL2, 0x00))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL2] not correct\r\n"); }
    85f8:	4874      	ldr	r0, [pc, #464]	; (87cc <switch_configure+0x7d0>)
    85fa:	4b6a      	ldr	r3, [pc, #424]	; (87a4 <switch_configure+0x7a8>)
    85fc:	4798      	blx	r3
    85fe:	e5e8      	b.n	81d2 <switch_configure+0x1d6>
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL2, 0x06))	{ xprintf("[SPI_KSZ8794_PORT4CONTROL2] not correct\r\n"); }
    8600:	4873      	ldr	r0, [pc, #460]	; (87d0 <switch_configure+0x7d4>)
    8602:	4b68      	ldr	r3, [pc, #416]	; (87a4 <switch_configure+0x7a8>)
    8604:	4798      	blx	r3
    8606:	e5eb      	b.n	81e0 <switch_configure+0x1e4>
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL3, 0x00))	{ xprintf("[SPI_KSZ8794_PORT1CONTROL3] not correct\r\n"); }
    8608:	4872      	ldr	r0, [pc, #456]	; (87d4 <switch_configure+0x7d8>)
    860a:	4b66      	ldr	r3, [pc, #408]	; (87a4 <switch_configure+0x7a8>)
    860c:	4798      	blx	r3
    860e:	e5ee      	b.n	81ee <switch_configure+0x1f2>
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL3, 0x00))	{ xprintf("[SPI_KSZ8794_PORT2CONTROL3] not correct\r\n"); }
    8610:	4871      	ldr	r0, [pc, #452]	; (87d8 <switch_configure+0x7dc>)
    8612:	4b64      	ldr	r3, [pc, #400]	; (87a4 <switch_configure+0x7a8>)
    8614:	4798      	blx	r3
    8616:	e5f1      	b.n	81fc <switch_configure+0x200>
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL3, 0x00))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL3] not correct\r\n"); }
    8618:	4870      	ldr	r0, [pc, #448]	; (87dc <switch_configure+0x7e0>)
    861a:	4b62      	ldr	r3, [pc, #392]	; (87a4 <switch_configure+0x7a8>)
    861c:	4798      	blx	r3
    861e:	e5f4      	b.n	820a <switch_configure+0x20e>
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL3, 0x00))	{ xprintf("[SPI_KSZ8794_PORT4CONTROL3] not correct\r\n"); }
    8620:	486f      	ldr	r0, [pc, #444]	; (87e0 <switch_configure+0x7e4>)
    8622:	4b60      	ldr	r3, [pc, #384]	; (87a4 <switch_configure+0x7a8>)
    8624:	4798      	blx	r3
    8626:	e5f7      	b.n	8218 <switch_configure+0x21c>
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL4, 0x01))	{ xprintf("[SPI_KSZ8794_PORT1CONTROL4] not correct\r\n"); }
    8628:	486e      	ldr	r0, [pc, #440]	; (87e4 <switch_configure+0x7e8>)
    862a:	4b5e      	ldr	r3, [pc, #376]	; (87a4 <switch_configure+0x7a8>)
    862c:	4798      	blx	r3
    862e:	e5fa      	b.n	8226 <switch_configure+0x22a>
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL4, 0x01))	{ xprintf("[SPI_KSZ8794_PORT2CONTROL4] not correct\r\n"); }
    8630:	486d      	ldr	r0, [pc, #436]	; (87e8 <switch_configure+0x7ec>)
    8632:	4b5c      	ldr	r3, [pc, #368]	; (87a4 <switch_configure+0x7a8>)
    8634:	4798      	blx	r3
    8636:	e5fd      	b.n	8234 <switch_configure+0x238>
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL4, 0x01))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL4] not correct\r\n"); }
    8638:	486c      	ldr	r0, [pc, #432]	; (87ec <switch_configure+0x7f0>)
    863a:	4b5a      	ldr	r3, [pc, #360]	; (87a4 <switch_configure+0x7a8>)
    863c:	4798      	blx	r3
    863e:	e600      	b.n	8242 <switch_configure+0x246>
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL4, 0x01))	{ xprintf("[SPI_KSZ8794_PORT4CONTROL4] not correct\r\n"); }
    8640:	486b      	ldr	r0, [pc, #428]	; (87f0 <switch_configure+0x7f4>)
    8642:	4b58      	ldr	r3, [pc, #352]	; (87a4 <switch_configure+0x7a8>)
    8644:	4798      	blx	r3
    8646:	e603      	b.n	8250 <switch_configure+0x254>
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL5, 0x00))	{ xprintf("[SPI_KSZ8794_PORT1CONTROL5] not correct\r\n"); }
    8648:	486a      	ldr	r0, [pc, #424]	; (87f4 <switch_configure+0x7f8>)
    864a:	4b56      	ldr	r3, [pc, #344]	; (87a4 <switch_configure+0x7a8>)
    864c:	4798      	blx	r3
    864e:	e606      	b.n	825e <switch_configure+0x262>
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL5, 0x00))	{ xprintf("[SPI_KSZ8794_PORT2CONTROL5] not correct\r\n"); }
    8650:	4869      	ldr	r0, [pc, #420]	; (87f8 <switch_configure+0x7fc>)
    8652:	4b54      	ldr	r3, [pc, #336]	; (87a4 <switch_configure+0x7a8>)
    8654:	4798      	blx	r3
    8656:	e609      	b.n	826c <switch_configure+0x270>
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL5, 0x00))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL5] not correct\r\n"); }
    8658:	4868      	ldr	r0, [pc, #416]	; (87fc <switch_configure+0x800>)
    865a:	4b52      	ldr	r3, [pc, #328]	; (87a4 <switch_configure+0x7a8>)
    865c:	4798      	blx	r3
    865e:	e60c      	b.n	827a <switch_configure+0x27e>
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL5, 0x00))	{ xprintf("[SPI_KSZ8794_PORT4CONTROL5] not correct\r\n"); }
    8660:	4867      	ldr	r0, [pc, #412]	; (8800 <switch_configure+0x804>)
    8662:	4b50      	ldr	r3, [pc, #320]	; (87a4 <switch_configure+0x7a8>)
    8664:	4798      	blx	r3
    8666:	e60f      	b.n	8288 <switch_configure+0x28c>
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL6, 0x28))	{ xprintf("[SPI_KSZ8794_PORT4CONTROL6] not correct\r\n"); }
    8668:	4866      	ldr	r0, [pc, #408]	; (8804 <switch_configure+0x808>)
    866a:	4b4e      	ldr	r3, [pc, #312]	; (87a4 <switch_configure+0x7a8>)
    866c:	4798      	blx	r3
    866e:	e612      	b.n	8296 <switch_configure+0x29a>
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL7, 0x3F))	{ xprintf("[SPI_KSZ8794_PORT1CONTROL7] not correct\r\n"); }
    8670:	4865      	ldr	r0, [pc, #404]	; (8808 <switch_configure+0x80c>)
    8672:	4b4c      	ldr	r3, [pc, #304]	; (87a4 <switch_configure+0x7a8>)
    8674:	4798      	blx	r3
    8676:	e615      	b.n	82a4 <switch_configure+0x2a8>
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL7, 0x3F))	{ xprintf("[SPI_KSZ8794_PORT2CONTROL7] not correct\r\n"); }
    8678:	4864      	ldr	r0, [pc, #400]	; (880c <switch_configure+0x810>)
    867a:	4b4a      	ldr	r3, [pc, #296]	; (87a4 <switch_configure+0x7a8>)
    867c:	4798      	blx	r3
    867e:	e623      	b.n	82c8 <switch_configure+0x2cc>
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL7, 0x3F))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL7] not correct\r\n"); }
    8680:	4863      	ldr	r0, [pc, #396]	; (8810 <switch_configure+0x814>)
    8682:	4b48      	ldr	r3, [pc, #288]	; (87a4 <switch_configure+0x7a8>)
    8684:	4798      	blx	r3
    8686:	e626      	b.n	82d6 <switch_configure+0x2da>
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL8, 0x00))	{ xprintf("[SPI_KSZ8794_PORT1CONTROL8] not correct\r\n"); }
    8688:	4862      	ldr	r0, [pc, #392]	; (8814 <switch_configure+0x818>)
    868a:	4b46      	ldr	r3, [pc, #280]	; (87a4 <switch_configure+0x7a8>)
    868c:	4798      	blx	r3
    868e:	e629      	b.n	82e4 <switch_configure+0x2e8>
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL8, 0x00))	{ xprintf("[SPI_KSZ8794_PORT2CONTROL8] not correct\r\n"); }
    8690:	4861      	ldr	r0, [pc, #388]	; (8818 <switch_configure+0x81c>)
    8692:	4b44      	ldr	r3, [pc, #272]	; (87a4 <switch_configure+0x7a8>)
    8694:	4798      	blx	r3
    8696:	e62c      	b.n	82f2 <switch_configure+0x2f6>
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL8, 0x00))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL8] not correct\r\n"); }
    8698:	4860      	ldr	r0, [pc, #384]	; (881c <switch_configure+0x820>)
    869a:	4b42      	ldr	r3, [pc, #264]	; (87a4 <switch_configure+0x7a8>)
    869c:	4798      	blx	r3
    869e:	e62f      	b.n	8300 <switch_configure+0x304>
	if (!checkKSZreg(SPI_KSZ8794_PORT1LINKMD, 0x00))	{ xprintf("[SPI_KSZ8794_PORT1LINKMD] not correct\r\n"); }
    86a0:	485f      	ldr	r0, [pc, #380]	; (8820 <switch_configure+0x824>)
    86a2:	4b40      	ldr	r3, [pc, #256]	; (87a4 <switch_configure+0x7a8>)
    86a4:	4798      	blx	r3
    86a6:	e632      	b.n	830e <switch_configure+0x312>
	if (!checkKSZreg(SPI_KSZ8794_PORT2LINKMD, 0x00))	{ xprintf("[SPI_KSZ8794_PORT2LINKMD] not correct\r\n"); }
    86a8:	485e      	ldr	r0, [pc, #376]	; (8824 <switch_configure+0x828>)
    86aa:	4b3e      	ldr	r3, [pc, #248]	; (87a4 <switch_configure+0x7a8>)
    86ac:	4798      	blx	r3
    86ae:	e635      	b.n	831c <switch_configure+0x320>
	if (!checkKSZreg(SPI_KSZ8794_PORT3LINKMD, 0x00))	{ xprintf("[SPI_KSZ8794_PORT3LINKMD] not correct\r\n"); }
    86b0:	485d      	ldr	r0, [pc, #372]	; (8828 <switch_configure+0x82c>)
    86b2:	4b3c      	ldr	r3, [pc, #240]	; (87a4 <switch_configure+0x7a8>)
    86b4:	4798      	blx	r3
    86b6:	e638      	b.n	832a <switch_configure+0x32e>
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL9, 0x5F))	{ xprintf("[SPI_KSZ8794_PORT1CONTROL9] not correct\r\n"); }
    86b8:	485c      	ldr	r0, [pc, #368]	; (882c <switch_configure+0x830>)
    86ba:	4b3a      	ldr	r3, [pc, #232]	; (87a4 <switch_configure+0x7a8>)
    86bc:	4798      	blx	r3
    86be:	e63b      	b.n	8338 <switch_configure+0x33c>
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL9, 0x5F))	{ xprintf("[SPI_KSZ8794_PORT2CONTROL9] not correct\r\n"); }
    86c0:	485b      	ldr	r0, [pc, #364]	; (8830 <switch_configure+0x834>)
    86c2:	4b38      	ldr	r3, [pc, #224]	; (87a4 <switch_configure+0x7a8>)
    86c4:	4798      	blx	r3
    86c6:	e63e      	b.n	8346 <switch_configure+0x34a>
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL9, 0x5F))	{ xprintf("[SPI_KSZ8794_PORT3CONTROL9] not correct\r\n"); }
    86c8:	485a      	ldr	r0, [pc, #360]	; (8834 <switch_configure+0x838>)
    86ca:	4b36      	ldr	r3, [pc, #216]	; (87a4 <switch_configure+0x7a8>)
    86cc:	4798      	blx	r3
    86ce:	e641      	b.n	8354 <switch_configure+0x358>
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL10, 0x00)) { xprintf("[SPI_KSZ8794_PORT1CONTROL10] not correct\r\n"); }
    86d0:	4859      	ldr	r0, [pc, #356]	; (8838 <switch_configure+0x83c>)
    86d2:	4b34      	ldr	r3, [pc, #208]	; (87a4 <switch_configure+0x7a8>)
    86d4:	4798      	blx	r3
    86d6:	e644      	b.n	8362 <switch_configure+0x366>
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL10, 0x00)) { xprintf("[SPI_KSZ8794_PORT2CONTROL10] not correct\r\n"); }
    86d8:	4858      	ldr	r0, [pc, #352]	; (883c <switch_configure+0x840>)
    86da:	4b32      	ldr	r3, [pc, #200]	; (87a4 <switch_configure+0x7a8>)
    86dc:	4798      	blx	r3
    86de:	e647      	b.n	8370 <switch_configure+0x374>
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL10, 0x00)) { xprintf("[SPI_KSZ8794_PORT3CONTROL10] not correct\r\n"); }
    86e0:	4857      	ldr	r0, [pc, #348]	; (8840 <switch_configure+0x844>)
    86e2:	4b30      	ldr	r3, [pc, #192]	; (87a4 <switch_configure+0x7a8>)
    86e4:	4798      	blx	r3
    86e6:	e64a      	b.n	837e <switch_configure+0x382>
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL20, 0x62)) { xprintf("[SPI_KSZ8794_PORT2CONTROL20] not correct\r\n"); }
    86e8:	4856      	ldr	r0, [pc, #344]	; (8844 <switch_configure+0x848>)
    86ea:	4b2e      	ldr	r3, [pc, #184]	; (87a4 <switch_configure+0x7a8>)
    86ec:	4798      	blx	r3
    86ee:	e64d      	b.n	838c <switch_configure+0x390>
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL12, 0x80)) { xprintf("[SPI_KSZ8794_PORT1CONTROL12] not correct\r\n"); }
    86f0:	4855      	ldr	r0, [pc, #340]	; (8848 <switch_configure+0x84c>)
    86f2:	4b2c      	ldr	r3, [pc, #176]	; (87a4 <switch_configure+0x7a8>)
    86f4:	4798      	blx	r3
    86f6:	e650      	b.n	839a <switch_configure+0x39e>
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL12, 0x80)) { xprintf("[SPI_KSZ8794_PORT2CONTROL12] not correct\r\n"); }
    86f8:	4854      	ldr	r0, [pc, #336]	; (884c <switch_configure+0x850>)
    86fa:	4b2a      	ldr	r3, [pc, #168]	; (87a4 <switch_configure+0x7a8>)
    86fc:	4798      	blx	r3
    86fe:	e653      	b.n	83a8 <switch_configure+0x3ac>
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL12, 0x80)) { xprintf("[SPI_KSZ8794_PORT3CONTROL12] not correct\r\n"); }
    8700:	4853      	ldr	r0, [pc, #332]	; (8850 <switch_configure+0x854>)
    8702:	4b28      	ldr	r3, [pc, #160]	; (87a4 <switch_configure+0x7a8>)
    8704:	4798      	blx	r3
    8706:	e656      	b.n	83b6 <switch_configure+0x3ba>
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL12, 0x80)) { xprintf("[SPI_KSZ8794_PORT4CONTROL12] not correct\r\n"); }
    8708:	4852      	ldr	r0, [pc, #328]	; (8854 <switch_configure+0x858>)
    870a:	4b26      	ldr	r3, [pc, #152]	; (87a4 <switch_configure+0x7a8>)
    870c:	4798      	blx	r3
    870e:	e659      	b.n	83c4 <switch_configure+0x3c8>
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL13, 0x00)) { xprintf("[SPI_KSZ8794_PORT1CONTROL13] not correct\r\n"); }
    8710:	4851      	ldr	r0, [pc, #324]	; (8858 <switch_configure+0x85c>)
    8712:	4b24      	ldr	r3, [pc, #144]	; (87a4 <switch_configure+0x7a8>)
    8714:	4798      	blx	r3
    8716:	e65c      	b.n	83d2 <switch_configure+0x3d6>
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL13, 0x00)) { xprintf("[SPI_KSZ8794_PORT2CONTROL13] not correct\r\n"); }
    8718:	4850      	ldr	r0, [pc, #320]	; (885c <switch_configure+0x860>)
    871a:	4b22      	ldr	r3, [pc, #136]	; (87a4 <switch_configure+0x7a8>)
    871c:	4798      	blx	r3
    871e:	e65f      	b.n	83e0 <switch_configure+0x3e4>
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL13, 0x00)) { xprintf("[SPI_KSZ8794_PORT3CONTROL13] not correct\r\n"); }
    8720:	484f      	ldr	r0, [pc, #316]	; (8860 <switch_configure+0x864>)
    8722:	4b20      	ldr	r3, [pc, #128]	; (87a4 <switch_configure+0x7a8>)
    8724:	4798      	blx	r3
    8726:	e662      	b.n	83ee <switch_configure+0x3f2>
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL13, 0x00)) { xprintf("[SPI_KSZ8794_PORT4CONTROL13] not correct\r\n"); }
    8728:	484e      	ldr	r0, [pc, #312]	; (8864 <switch_configure+0x868>)
    872a:	4b1e      	ldr	r3, [pc, #120]	; (87a4 <switch_configure+0x7a8>)
    872c:	4798      	blx	r3
    872e:	e665      	b.n	83fc <switch_configure+0x400>
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL14, 0x88)) { xprintf("[SPI_KSZ8794_PORT1CONTROL14] not correct\r\n"); }
    8730:	484d      	ldr	r0, [pc, #308]	; (8868 <switch_configure+0x86c>)
    8732:	4b1c      	ldr	r3, [pc, #112]	; (87a4 <switch_configure+0x7a8>)
    8734:	4798      	blx	r3
    8736:	e668      	b.n	840a <switch_configure+0x40e>
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL14, 0x88)) { xprintf("[SPI_KSZ8794_PORT2CONTROL14] not correct\r\n"); }
    8738:	484c      	ldr	r0, [pc, #304]	; (886c <switch_configure+0x870>)
    873a:	4b1a      	ldr	r3, [pc, #104]	; (87a4 <switch_configure+0x7a8>)
    873c:	4798      	blx	r3
    873e:	e66b      	b.n	8418 <switch_configure+0x41c>
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL14, 0x88)) { xprintf("[SPI_KSZ8794_PORT3CONTROL14] not correct\r\n"); }
    8740:	484b      	ldr	r0, [pc, #300]	; (8870 <switch_configure+0x874>)
    8742:	4b18      	ldr	r3, [pc, #96]	; (87a4 <switch_configure+0x7a8>)
    8744:	4798      	blx	r3
    8746:	e66e      	b.n	8426 <switch_configure+0x42a>
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL14, 0x88)) { xprintf("[SPI_KSZ8794_PORT4CONTROL14] not correct\r\n"); }
    8748:	484a      	ldr	r0, [pc, #296]	; (8874 <switch_configure+0x878>)
    874a:	4b16      	ldr	r3, [pc, #88]	; (87a4 <switch_configure+0x7a8>)
    874c:	4798      	blx	r3
    874e:	e671      	b.n	8434 <switch_configure+0x438>
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL15, 0x84)) { xprintf("[SPI_KSZ8794_PORT1CONTROL15] not correct\r\n"); }
    8750:	4849      	ldr	r0, [pc, #292]	; (8878 <switch_configure+0x87c>)
    8752:	4b14      	ldr	r3, [pc, #80]	; (87a4 <switch_configure+0x7a8>)
    8754:	4798      	blx	r3
    8756:	e674      	b.n	8442 <switch_configure+0x446>
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL15, 0x84)) { xprintf("[SPI_KSZ8794_PORT2CONTROL15] not correct\r\n"); }
    8758:	4848      	ldr	r0, [pc, #288]	; (887c <switch_configure+0x880>)
    875a:	4b12      	ldr	r3, [pc, #72]	; (87a4 <switch_configure+0x7a8>)
    875c:	4798      	blx	r3
    875e:	e677      	b.n	8450 <switch_configure+0x454>
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL15, 0x84)) { xprintf("[SPI_KSZ8794_PORT3CONTROL15] not correct\r\n"); }
    8760:	4847      	ldr	r0, [pc, #284]	; (8880 <switch_configure+0x884>)
    8762:	4b10      	ldr	r3, [pc, #64]	; (87a4 <switch_configure+0x7a8>)
    8764:	4798      	blx	r3
    8766:	e67a      	b.n	845e <switch_configure+0x462>
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL15, 0x84)) { xprintf("[SPI_KSZ8794_PORT4CONTROL15] not correct\r\n"); }
    8768:	4846      	ldr	r0, [pc, #280]	; (8884 <switch_configure+0x888>)
    876a:	4b0e      	ldr	r3, [pc, #56]	; (87a4 <switch_configure+0x7a8>)
    876c:	4798      	blx	r3
    876e:	e67d      	b.n	846c <switch_configure+0x470>
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL16, 0x82)) { xprintf("[SPI_KSZ8794_PORT1CONTROL16] not correct\r\n"); }
    8770:	4845      	ldr	r0, [pc, #276]	; (8888 <switch_configure+0x88c>)
    8772:	4b0c      	ldr	r3, [pc, #48]	; (87a4 <switch_configure+0x7a8>)
    8774:	4798      	blx	r3
    8776:	e680      	b.n	847a <switch_configure+0x47e>
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL16, 0x82)) { xprintf("[SPI_KSZ8794_PORT2CONTROL16] not correct\r\n"); }
    8778:	4844      	ldr	r0, [pc, #272]	; (888c <switch_configure+0x890>)
    877a:	4b0a      	ldr	r3, [pc, #40]	; (87a4 <switch_configure+0x7a8>)
    877c:	4798      	blx	r3
    877e:	e683      	b.n	8488 <switch_configure+0x48c>
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL16, 0x82)) { xprintf("[SPI_KSZ8794_PORT3CONTROL16] not correct\r\n"); }
    8780:	4843      	ldr	r0, [pc, #268]	; (8890 <switch_configure+0x894>)
    8782:	4b08      	ldr	r3, [pc, #32]	; (87a4 <switch_configure+0x7a8>)
    8784:	4798      	blx	r3
    8786:	e686      	b.n	8496 <switch_configure+0x49a>
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL16, 0x82)) { xprintf("[SPI_KSZ8794_PORT4CONTROL16] not correct\r\n"); }
    8788:	4842      	ldr	r0, [pc, #264]	; (8894 <switch_configure+0x898>)
    878a:	4b06      	ldr	r3, [pc, #24]	; (87a4 <switch_configure+0x7a8>)
    878c:	4798      	blx	r3
    878e:	e689      	b.n	84a4 <switch_configure+0x4a8>
	if (!checkKSZreg(SPI_KSZ8794_PORT1CONTROL17, 0x81)) { xprintf("[SPI_KSZ8794_PORT1CONTROL17] not correct\r\n"); }
    8790:	4841      	ldr	r0, [pc, #260]	; (8898 <switch_configure+0x89c>)
    8792:	4b04      	ldr	r3, [pc, #16]	; (87a4 <switch_configure+0x7a8>)
    8794:	4798      	blx	r3
    8796:	e68c      	b.n	84b2 <switch_configure+0x4b6>
	if (!checkKSZreg(SPI_KSZ8794_PORT2CONTROL17, 0x81)) { xprintf("[SPI_KSZ8794_PORT2CONTROL17] not correct\r\n"); }
    8798:	4840      	ldr	r0, [pc, #256]	; (889c <switch_configure+0x8a0>)
    879a:	4b02      	ldr	r3, [pc, #8]	; (87a4 <switch_configure+0x7a8>)
    879c:	4798      	blx	r3
    879e:	e68f      	b.n	84c0 <switch_configure+0x4c4>
    87a0:	0000f2cc 	.word	0x0000f2cc
    87a4:	0000031d 	.word	0x0000031d
    87a8:	0000f2f8 	.word	0x0000f2f8
    87ac:	0000f324 	.word	0x0000f324
    87b0:	0000f350 	.word	0x0000f350
    87b4:	0000f37c 	.word	0x0000f37c
    87b8:	0000f3a8 	.word	0x0000f3a8
    87bc:	0000f3d4 	.word	0x0000f3d4
    87c0:	0000f400 	.word	0x0000f400
    87c4:	0000f42c 	.word	0x0000f42c
    87c8:	0000f458 	.word	0x0000f458
    87cc:	0000ea60 	.word	0x0000ea60
    87d0:	0000f484 	.word	0x0000f484
    87d4:	0000f4b0 	.word	0x0000f4b0
    87d8:	0000f4dc 	.word	0x0000f4dc
    87dc:	0000f508 	.word	0x0000f508
    87e0:	0000f534 	.word	0x0000f534
    87e4:	0000f560 	.word	0x0000f560
    87e8:	0000f58c 	.word	0x0000f58c
    87ec:	0000f5b8 	.word	0x0000f5b8
    87f0:	0000f5e4 	.word	0x0000f5e4
    87f4:	0000f610 	.word	0x0000f610
    87f8:	0000f63c 	.word	0x0000f63c
    87fc:	0000f668 	.word	0x0000f668
    8800:	0000f694 	.word	0x0000f694
    8804:	0000f6c0 	.word	0x0000f6c0
    8808:	0000f6ec 	.word	0x0000f6ec
    880c:	0000f718 	.word	0x0000f718
    8810:	0000f744 	.word	0x0000f744
    8814:	0000f770 	.word	0x0000f770
    8818:	0000f79c 	.word	0x0000f79c
    881c:	0000f7c8 	.word	0x0000f7c8
    8820:	0000f7f4 	.word	0x0000f7f4
    8824:	0000f81c 	.word	0x0000f81c
    8828:	0000f844 	.word	0x0000f844
    882c:	0000f86c 	.word	0x0000f86c
    8830:	0000f898 	.word	0x0000f898
    8834:	0000f8c4 	.word	0x0000f8c4
    8838:	0000f8f0 	.word	0x0000f8f0
    883c:	0000f91c 	.word	0x0000f91c
    8840:	0000f948 	.word	0x0000f948
    8844:	0000f974 	.word	0x0000f974
    8848:	0000f9a0 	.word	0x0000f9a0
    884c:	0000f9cc 	.word	0x0000f9cc
    8850:	0000f9f8 	.word	0x0000f9f8
    8854:	0000fa24 	.word	0x0000fa24
    8858:	0000fa50 	.word	0x0000fa50
    885c:	0000fa7c 	.word	0x0000fa7c
    8860:	0000faa8 	.word	0x0000faa8
    8864:	0000fad4 	.word	0x0000fad4
    8868:	0000fb00 	.word	0x0000fb00
    886c:	0000fb2c 	.word	0x0000fb2c
    8870:	0000fb58 	.word	0x0000fb58
    8874:	0000fb84 	.word	0x0000fb84
    8878:	0000fbb0 	.word	0x0000fbb0
    887c:	0000fbdc 	.word	0x0000fbdc
    8880:	0000fc08 	.word	0x0000fc08
    8884:	0000fc34 	.word	0x0000fc34
    8888:	0000fc60 	.word	0x0000fc60
    888c:	0000fc8c 	.word	0x0000fc8c
    8890:	0000fcb8 	.word	0x0000fcb8
    8894:	0000fce4 	.word	0x0000fce4
    8898:	0000fd10 	.word	0x0000fd10
    889c:	0000fd3c 	.word	0x0000fd3c
	if (!checkKSZreg(SPI_KSZ8794_PORT3CONTROL17, 0x81)) { xprintf("[SPI_KSZ8794_PORT3CONTROL17] not correct\r\n"); }
    88a0:	4805      	ldr	r0, [pc, #20]	; (88b8 <switch_configure+0x8bc>)
    88a2:	4b06      	ldr	r3, [pc, #24]	; (88bc <switch_configure+0x8c0>)
    88a4:	4798      	blx	r3
    88a6:	e612      	b.n	84ce <switch_configure+0x4d2>
	if (!checkKSZreg(SPI_KSZ8794_PORT4CONTROL17, 0x81)) { xprintf("[SPI_KSZ8794_PORT4CONTROL17] not correct\r\n"); }
    88a8:	4805      	ldr	r0, [pc, #20]	; (88c0 <switch_configure+0x8c4>)
    88aa:	4b04      	ldr	r3, [pc, #16]	; (88bc <switch_configure+0x8c0>)
    88ac:	4798      	blx	r3
    88ae:	e615      	b.n	84dc <switch_configure+0x4e0>
	if (!checkKSZreg(SPI_KSZ8794_START, 0x61))			{ xprintf("[SPI_KSZ8794_START final] not correct\r\n"); }
    88b0:	4804      	ldr	r0, [pc, #16]	; (88c4 <switch_configure+0x8c8>)
    88b2:	4b02      	ldr	r3, [pc, #8]	; (88bc <switch_configure+0x8c0>)
    88b4:	4798      	blx	r3
	/* Completed set-up commands to the KSZ Ethernet SWITCH via SPI bus */
}
    88b6:	e61f      	b.n	84f8 <switch_configure+0x4fc>
    88b8:	0000fd68 	.word	0x0000fd68
    88bc:	0000031d 	.word	0x0000031d
    88c0:	0000fd94 	.word	0x0000fd94
    88c4:	0000fdc0 	.word	0x0000fdc0

000088c8 <address_configure>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: from the ID value, set the global IP address, IP scheme and MAC address
// Returns:     Nothing
// *****************************************************************************************************************************************************************
void address_configure(void)
{	
    88c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    88cc:	b08d      	sub	sp, #52	; 0x34
	if (((CONFIG *)&settings_buffer)->ID == 0x00000000) {
    88ce:	4b77      	ldr	r3, [pc, #476]	; (8aac <address_configure+0x1e4>)
    88d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    88d2:	2b00      	cmp	r3, #0
    88d4:	f000 80d5 	beq.w	8a82 <address_configure+0x1ba>
		xprintf("MAC address and IP scheme not initialized as there is no [ID] set...\r\n");
		return;
	}
	
	/* Set the first 4-octets of the "MAC_PREFIX" for all the MultiSense boards */
	mac_raw[0] = macaddress.addr[0] = MAC_ADDR_00;
    88d8:	4a75      	ldr	r2, [pc, #468]	; (8ab0 <address_configure+0x1e8>)
    88da:	27c2      	movs	r7, #194	; 0xc2
    88dc:	7017      	strb	r7, [r2, #0]
    88de:	4c75      	ldr	r4, [pc, #468]	; (8ab4 <address_configure+0x1ec>)
    88e0:	7027      	strb	r7, [r4, #0]
	mac_raw[1] = macaddress.addr[1] = MAC_ADDR_01;
    88e2:	2650      	movs	r6, #80	; 0x50
    88e4:	7056      	strb	r6, [r2, #1]
    88e6:	7066      	strb	r6, [r4, #1]
	mac_raw[2] = macaddress.addr[2] = (uint8_t)(((((CONFIG *)&settings_buffer)->ID) >> 24 & 0x00FF));
    88e8:	0e1d      	lsrs	r5, r3, #24
    88ea:	7095      	strb	r5, [r2, #2]
    88ec:	70a5      	strb	r5, [r4, #2]
	mac_raw[3] = macaddress.addr[3] = (uint8_t)(((((CONFIG *)&settings_buffer)->ID) >> 16) & 0x00FF);
    88ee:	f3c3 4007 	ubfx	r0, r3, #16, #8
    88f2:	70d0      	strb	r0, [r2, #3]
    88f4:	70e0      	strb	r0, [r4, #3]
	mac_raw[4] = macaddress.addr[4] = (uint8_t)(((((CONFIG *)&settings_buffer)->ID) >> 8) & 0x00FF);
    88f6:	f3c3 2107 	ubfx	r1, r3, #8, #8
    88fa:	7111      	strb	r1, [r2, #4]
    88fc:	7121      	strb	r1, [r4, #4]
    mac_raw[5] = macaddress.addr[5] = (uint8_t)((((CONFIG *)&settings_buffer)->ID) & 0x00FF);
    88fe:	b2db      	uxtb	r3, r3
    8900:	7153      	strb	r3, [r2, #5]
    8902:	7163      	strb	r3, [r4, #5]
	
	/* Update the uIP stack with these values */
	uip_setethaddr(macaddress);
    8904:	4a6c      	ldr	r2, [pc, #432]	; (8ab8 <address_configure+0x1f0>)
    8906:	7017      	strb	r7, [r2, #0]
    8908:	7056      	strb	r6, [r2, #1]
    890a:	7095      	strb	r5, [r2, #2]
    890c:	70d0      	strb	r0, [r2, #3]
    890e:	7111      	strb	r1, [r2, #4]
    8910:	7153      	strb	r3, [r2, #5]
		
	/* Start the main internal on-chip Ethernet MAC for the frames */
	mac_async_set_filter_ex(&ETHERNET_MAC_0, mac_raw);
    8912:	4d6a      	ldr	r5, [pc, #424]	; (8abc <address_configure+0x1f4>)
    8914:	4621      	mov	r1, r4
    8916:	4628      	mov	r0, r5
    8918:	4b69      	ldr	r3, [pc, #420]	; (8ac0 <address_configure+0x1f8>)
    891a:	4798      	blx	r3
	mac_async_enable(&ETHERNET_MAC_0);
    891c:	4628      	mov	r0, r5
    891e:	4b69      	ldr	r3, [pc, #420]	; (8ac4 <address_configure+0x1fc>)
    8920:	4798      	blx	r3
	
	uip_ipaddr(&ipaddr, 192, 168, (uint8_t)((((CONFIG *)&settings_buffer)->ID) / 250), 1 + (uint8_t)((((CONFIG *)&settings_buffer)->ID) % 250));
    8922:	4d69      	ldr	r5, [pc, #420]	; (8ac8 <address_configure+0x200>)
    8924:	f64a 00c0 	movw	r0, #43200	; 0xa8c0
    8928:	8028      	strh	r0, [r5, #0]
    892a:	4b60      	ldr	r3, [pc, #384]	; (8aac <address_configure+0x1e4>)
    892c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    892e:	4b67      	ldr	r3, [pc, #412]	; (8acc <address_configure+0x204>)
    8930:	fba3 2301 	umull	r2, r3, r3, r1
    8934:	091a      	lsrs	r2, r3, #4
    8936:	23fa      	movs	r3, #250	; 0xfa
    8938:	fb03 1312 	mls	r3, r3, r2, r1
    893c:	b2db      	uxtb	r3, r3
    893e:	3301      	adds	r3, #1
    8940:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    8944:	b29b      	uxth	r3, r3
    8946:	0a1a      	lsrs	r2, r3, #8
    8948:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    894c:	b29b      	uxth	r3, r3
    894e:	806b      	strh	r3, [r5, #2]

	/* Update the uIP stack with these values */
	uip_ipaddr(&gwaddr, 192, 168, 0, 1);									// IP address of CPU Server on installation network is always "192.168.0.1". This address can NOT be held by any Multi-Sense node
    8950:	4e5f      	ldr	r6, [pc, #380]	; (8ad0 <address_configure+0x208>)
    8952:	8030      	strh	r0, [r6, #0]
    8954:	f44f 7180 	mov.w	r1, #256	; 0x100
    8958:	8071      	strh	r1, [r6, #2]
	uip_ipaddr(&netmask, 255, 255, 0, 0);
    895a:	4f5e      	ldr	r7, [pc, #376]	; (8ad4 <address_configure+0x20c>)
    895c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    8960:	803a      	strh	r2, [r7, #0]
    8962:	f04f 0e00 	mov.w	lr, #0
    8966:	f8a7 e002 	strh.w	lr, [r7, #2]
	uip_ipaddr(&broadcast, 255, 255, 255, 255);
    896a:	4f5b      	ldr	r7, [pc, #364]	; (8ad8 <address_configure+0x210>)
    896c:	803a      	strh	r2, [r7, #0]
    896e:	807a      	strh	r2, [r7, #2]
	uip_sethostaddr(&ipaddr);
    8970:	4a5a      	ldr	r2, [pc, #360]	; (8adc <address_configure+0x214>)
    8972:	8010      	strh	r0, [r2, #0]
    8974:	8053      	strh	r3, [r2, #2]
	uip_setnetmask(&netmask);
	uip_setnetmask(&gwaddr);
    8976:	4b5a      	ldr	r3, [pc, #360]	; (8ae0 <address_configure+0x218>)
    8978:	8018      	strh	r0, [r3, #0]
    897a:	8059      	strh	r1, [r3, #2]
	
	xprintf("MultiSense [init MAC/IP values] %x:%x:%x:%x:%x:%x %d.%d.%d.%d\r\n", mac_raw[0], mac_raw[1], mac_raw[2], mac_raw[3], mac_raw[4], mac_raw[5], uip_ipaddr2(ipaddr), uip_ipaddr1(ipaddr), uip_ipaddr4(ipaddr), uip_ipaddr3(ipaddr));
    897c:	7823      	ldrb	r3, [r4, #0]
    897e:	9308      	str	r3, [sp, #32]
    8980:	7862      	ldrb	r2, [r4, #1]
    8982:	9209      	str	r2, [sp, #36]	; 0x24
    8984:	f894 8002 	ldrb.w	r8, [r4, #2]
    8988:	f894 9003 	ldrb.w	r9, [r4, #3]
    898c:	f894 a004 	ldrb.w	sl, [r4, #4]
    8990:	f894 b005 	ldrb.w	fp, [r4, #5]
    8994:	4c53      	ldr	r4, [pc, #332]	; (8ae4 <address_configure+0x21c>)
    8996:	47a0      	blx	r4
    8998:	900a      	str	r0, [sp, #40]	; 0x28
    899a:	8828      	ldrh	r0, [r5, #0]
    899c:	47a0      	blx	r4
    899e:	4607      	mov	r7, r0
    89a0:	8868      	ldrh	r0, [r5, #2]
    89a2:	47a0      	blx	r4
    89a4:	900b      	str	r0, [sp, #44]	; 0x2c
    89a6:	8868      	ldrh	r0, [r5, #2]
    89a8:	47a0      	blx	r4
    89aa:	f3c0 200f 	ubfx	r0, r0, #8, #16
    89ae:	9006      	str	r0, [sp, #24]
    89b0:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    89b4:	9305      	str	r3, [sp, #20]
    89b6:	f3c7 270f 	ubfx	r7, r7, #8, #16
    89ba:	9704      	str	r7, [sp, #16]
    89bc:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    89c0:	9303      	str	r3, [sp, #12]
    89c2:	f8cd b008 	str.w	fp, [sp, #8]
    89c6:	f8cd a004 	str.w	sl, [sp, #4]
    89ca:	f8cd 9000 	str.w	r9, [sp]
    89ce:	4643      	mov	r3, r8
    89d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    89d2:	9908      	ldr	r1, [sp, #32]
    89d4:	4844      	ldr	r0, [pc, #272]	; (8ae8 <address_configure+0x220>)
    89d6:	4d45      	ldr	r5, [pc, #276]	; (8aec <address_configure+0x224>)
    89d8:	47a8      	blx	r5
	
	/* Create and bind the main UDP socket for the MultiSense board */
	main_socket = uip_udp_new(&gwaddr, htons(MAIN_UDPSOCKET));
    89da:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
    89de:	47a0      	blx	r4
    89e0:	4601      	mov	r1, r0
    89e2:	4630      	mov	r0, r6
    89e4:	4b42      	ldr	r3, [pc, #264]	; (8af0 <address_configure+0x228>)
    89e6:	4798      	blx	r3
    89e8:	4604      	mov	r4, r0
    89ea:	4b42      	ldr	r3, [pc, #264]	; (8af4 <address_configure+0x22c>)
    89ec:	6018      	str	r0, [r3, #0]
	if (main_socket != NULL) {
    89ee:	2800      	cmp	r0, #0
    89f0:	d04b      	beq.n	8a8a <address_configure+0x1c2>
		uip_udp_bind(main_socket, htons(MAIN_UDPSOCKET));
    89f2:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
    89f6:	4b3b      	ldr	r3, [pc, #236]	; (8ae4 <address_configure+0x21c>)
    89f8:	4798      	blx	r3
    89fa:	80a0      	strh	r0, [r4, #4]
		xprintf("Main UDP socket created...\r\n");
    89fc:	483e      	ldr	r0, [pc, #248]	; (8af8 <address_configure+0x230>)
    89fe:	47a8      	blx	r5
	} else {
		xprintf("Main UDP socket ERROR!!!!!!!\r\n");
	}
	
	/* Create and bind the main UDP socket for the daughter-card on Slot [A] */
	cardA_socket = uip_udp_new(&gwaddr, htons(CARDA_UDPSOCKET));
    8a00:	f640 70a1 	movw	r0, #4001	; 0xfa1
    8a04:	4b37      	ldr	r3, [pc, #220]	; (8ae4 <address_configure+0x21c>)
    8a06:	4798      	blx	r3
    8a08:	4601      	mov	r1, r0
    8a0a:	4831      	ldr	r0, [pc, #196]	; (8ad0 <address_configure+0x208>)
    8a0c:	4b38      	ldr	r3, [pc, #224]	; (8af0 <address_configure+0x228>)
    8a0e:	4798      	blx	r3
    8a10:	4604      	mov	r4, r0
    8a12:	4b3a      	ldr	r3, [pc, #232]	; (8afc <address_configure+0x234>)
    8a14:	6018      	str	r0, [r3, #0]
	if (cardA_socket != NULL) {
    8a16:	2800      	cmp	r0, #0
    8a18:	d03b      	beq.n	8a92 <address_configure+0x1ca>
		uip_udp_bind(cardA_socket, htons(CARDA_UDPSOCKET));
    8a1a:	f640 70a1 	movw	r0, #4001	; 0xfa1
    8a1e:	4b31      	ldr	r3, [pc, #196]	; (8ae4 <address_configure+0x21c>)
    8a20:	4798      	blx	r3
    8a22:	80a0      	strh	r0, [r4, #4]
		xprintf("Card [A] UDP socket created...\r\n");
    8a24:	4836      	ldr	r0, [pc, #216]	; (8b00 <address_configure+0x238>)
    8a26:	4b31      	ldr	r3, [pc, #196]	; (8aec <address_configure+0x224>)
    8a28:	4798      	blx	r3
	} else {
		xprintf("Card [A] UDP socket ERROR!!!!!!!\r\n");
	}
	
	/* Create and bind the main UDP socket for the daughter-card on Slot [B] */
	cardB_socket = uip_udp_new(&gwaddr, htons(CARDB_UDPSOCKET));
    8a2a:	f640 70a2 	movw	r0, #4002	; 0xfa2
    8a2e:	4b2d      	ldr	r3, [pc, #180]	; (8ae4 <address_configure+0x21c>)
    8a30:	4798      	blx	r3
    8a32:	4601      	mov	r1, r0
    8a34:	4826      	ldr	r0, [pc, #152]	; (8ad0 <address_configure+0x208>)
    8a36:	4b2e      	ldr	r3, [pc, #184]	; (8af0 <address_configure+0x228>)
    8a38:	4798      	blx	r3
    8a3a:	4604      	mov	r4, r0
    8a3c:	4b31      	ldr	r3, [pc, #196]	; (8b04 <address_configure+0x23c>)
    8a3e:	6018      	str	r0, [r3, #0]
	if (cardB_socket != NULL) {
    8a40:	2800      	cmp	r0, #0
    8a42:	d02a      	beq.n	8a9a <address_configure+0x1d2>
		uip_udp_bind(cardB_socket, htons(CARDB_UDPSOCKET));
    8a44:	f640 70a2 	movw	r0, #4002	; 0xfa2
    8a48:	4b26      	ldr	r3, [pc, #152]	; (8ae4 <address_configure+0x21c>)
    8a4a:	4798      	blx	r3
    8a4c:	80a0      	strh	r0, [r4, #4]
		xprintf("Card [B] UDP socket created...\r\n");
    8a4e:	482e      	ldr	r0, [pc, #184]	; (8b08 <address_configure+0x240>)
    8a50:	4b26      	ldr	r3, [pc, #152]	; (8aec <address_configure+0x224>)
    8a52:	4798      	blx	r3
	} else {
		xprintf("Card [B] UDP socket ERROR!!!!!!!\r\n");
	}
	
	/* Create and bind the main UDP socket for the MAC address table FLUSH broadcast when controlling the network loop-topology */
	ring_socket = uip_udp_new(&broadcast, htons(RING_MANAGEMENT_SOCKET));
    8a54:	f640 70a3 	movw	r0, #4003	; 0xfa3
    8a58:	4b22      	ldr	r3, [pc, #136]	; (8ae4 <address_configure+0x21c>)
    8a5a:	4798      	blx	r3
    8a5c:	4601      	mov	r1, r0
    8a5e:	481e      	ldr	r0, [pc, #120]	; (8ad8 <address_configure+0x210>)
    8a60:	4b23      	ldr	r3, [pc, #140]	; (8af0 <address_configure+0x228>)
    8a62:	4798      	blx	r3
    8a64:	4604      	mov	r4, r0
    8a66:	4b29      	ldr	r3, [pc, #164]	; (8b0c <address_configure+0x244>)
    8a68:	6018      	str	r0, [r3, #0]
	if (ring_socket != NULL) {
    8a6a:	b1d0      	cbz	r0, 8aa2 <address_configure+0x1da>
		uip_udp_bind(ring_socket, htons(RING_MANAGEMENT_SOCKET));
    8a6c:	f640 70a3 	movw	r0, #4003	; 0xfa3
    8a70:	4b1c      	ldr	r3, [pc, #112]	; (8ae4 <address_configure+0x21c>)
    8a72:	4798      	blx	r3
    8a74:	80a0      	strh	r0, [r4, #4]
		xprintf("Ring Management UDP socket created...\r\n");
    8a76:	4826      	ldr	r0, [pc, #152]	; (8b10 <address_configure+0x248>)
    8a78:	4b1c      	ldr	r3, [pc, #112]	; (8aec <address_configure+0x224>)
    8a7a:	4798      	blx	r3
	} else {
		xprintf("Ring Management UDP socket ERROR!!!!!!!\r\n");
	}
}
    8a7c:	b00d      	add	sp, #52	; 0x34
    8a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xprintf("MAC address and IP scheme not initialized as there is no [ID] set...\r\n");
    8a82:	4824      	ldr	r0, [pc, #144]	; (8b14 <address_configure+0x24c>)
    8a84:	4b19      	ldr	r3, [pc, #100]	; (8aec <address_configure+0x224>)
    8a86:	4798      	blx	r3
		return;
    8a88:	e7f8      	b.n	8a7c <address_configure+0x1b4>
		xprintf("Main UDP socket ERROR!!!!!!!\r\n");
    8a8a:	4823      	ldr	r0, [pc, #140]	; (8b18 <address_configure+0x250>)
    8a8c:	4b17      	ldr	r3, [pc, #92]	; (8aec <address_configure+0x224>)
    8a8e:	4798      	blx	r3
    8a90:	e7b6      	b.n	8a00 <address_configure+0x138>
		xprintf("Card [A] UDP socket ERROR!!!!!!!\r\n");
    8a92:	4822      	ldr	r0, [pc, #136]	; (8b1c <address_configure+0x254>)
    8a94:	4b15      	ldr	r3, [pc, #84]	; (8aec <address_configure+0x224>)
    8a96:	4798      	blx	r3
    8a98:	e7c7      	b.n	8a2a <address_configure+0x162>
		xprintf("Card [B] UDP socket ERROR!!!!!!!\r\n");
    8a9a:	4821      	ldr	r0, [pc, #132]	; (8b20 <address_configure+0x258>)
    8a9c:	4b13      	ldr	r3, [pc, #76]	; (8aec <address_configure+0x224>)
    8a9e:	4798      	blx	r3
    8aa0:	e7d8      	b.n	8a54 <address_configure+0x18c>
		xprintf("Ring Management UDP socket ERROR!!!!!!!\r\n");
    8aa2:	4820      	ldr	r0, [pc, #128]	; (8b24 <address_configure+0x25c>)
    8aa4:	4b11      	ldr	r3, [pc, #68]	; (8aec <address_configure+0x224>)
    8aa6:	4798      	blx	r3
    8aa8:	e7e8      	b.n	8a7c <address_configure+0x1b4>
    8aaa:	bf00      	nop
    8aac:	20007f2c 	.word	0x20007f2c
    8ab0:	20008550 	.word	0x20008550
    8ab4:	20007fac 	.word	0x20007fac
    8ab8:	200072cc 	.word	0x200072cc
    8abc:	2000752c 	.word	0x2000752c
    8ac0:	0000197d 	.word	0x0000197d
    8ac4:	000018c1 	.word	0x000018c1
    8ac8:	20007598 	.word	0x20007598
    8acc:	10624dd3 	.word	0x10624dd3
    8ad0:	20008544 	.word	0x20008544
    8ad4:	20007f28 	.word	0x20007f28
    8ad8:	20008574 	.word	0x20008574
    8adc:	20008650 	.word	0x20008650
    8ae0:	2000864c 	.word	0x2000864c
    8ae4:	0000c889 	.word	0x0000c889
    8ae8:	0000fe30 	.word	0x0000fe30
    8aec:	0000031d 	.word	0x0000031d
    8af0:	0000ba41 	.word	0x0000ba41
    8af4:	20007848 	.word	0x20007848
    8af8:	0000fe70 	.word	0x0000fe70
    8afc:	20007594 	.word	0x20007594
    8b00:	0000feb0 	.word	0x0000feb0
    8b04:	20007f24 	.word	0x20007f24
    8b08:	0000fef8 	.word	0x0000fef8
    8b0c:	20008270 	.word	0x20008270
    8b10:	0000ff40 	.word	0x0000ff40
    8b14:	0000fde8 	.word	0x0000fde8
    8b18:	0000fe90 	.word	0x0000fe90
    8b1c:	0000fed4 	.word	0x0000fed4
    8b20:	0000ff1c 	.word	0x0000ff1c
    8b24:	0000ff68 	.word	0x0000ff68

00008b28 <gpio_init>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: define, set and configure the [GPIO] characteristics of the SAM CPU IC
// Returns:     Nothing
// *****************************************************************************************************************************************************************
void gpio_init(void)
{
    8b28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    8b2c:	4b98      	ldr	r3, [pc, #608]	; (8d90 <gpio_init+0x268>)
    8b2e:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
	tmp &= ~PORT_PINCFG_PMUXEN;
    8b32:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    8b36:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    8b3a:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
	tmp &= ~PORT_PINCFG_PMUXEN;
    8b3e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    8b42:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    8b46:	f893 20c3 	ldrb.w	r2, [r3, #195]	; 0xc3
	tmp &= ~PORT_PINCFG_PMUXEN;
    8b4a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    8b4e:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    8b52:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
	tmp &= ~PORT_PINCFG_PMUXEN;
    8b56:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    8b5a:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    8b5e:	f893 20c5 	ldrb.w	r2, [r3, #197]	; 0xc5
	tmp &= ~PORT_PINCFG_PMUXEN;
    8b62:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    8b66:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    8b6a:	f893 20c6 	ldrb.w	r2, [r3, #198]	; 0xc6
	tmp &= ~PORT_PINCFG_PMUXEN;
    8b6e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    8b72:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    8b76:	f893 20c7 	ldrb.w	r2, [r3, #199]	; 0xc7
	tmp &= ~PORT_PINCFG_PMUXEN;
    8b7a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    8b7e:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    8b82:	f893 2140 	ldrb.w	r2, [r3, #320]	; 0x140
	tmp &= ~PORT_PINCFG_PMUXEN;
    8b86:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    8b8a:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    8b8e:	f893 2141 	ldrb.w	r2, [r3, #321]	; 0x141
	tmp &= ~PORT_PINCFG_PMUXEN;
    8b92:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    8b96:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    8b9a:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
	tmp &= ~PORT_PINCFG_PMUXEN;
    8b9e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    8ba2:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    8ba6:	f893 20d9 	ldrb.w	r2, [r3, #217]	; 0xd9
	tmp &= ~PORT_PINCFG_PMUXEN;
    8baa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    8bae:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    8bb2:	f893 215b 	ldrb.w	r2, [r3, #347]	; 0x15b
	tmp &= ~PORT_PINCFG_PMUXEN;
    8bb6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    8bba:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    8bbe:	f893 215c 	ldrb.w	r2, [r3, #348]	; 0x15c
	tmp &= ~PORT_PINCFG_PMUXEN;
    8bc2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    8bc6:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    8bca:	2101      	movs	r1, #1
    8bcc:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    8bd0:	4a70      	ldr	r2, [pc, #448]	; (8d94 <gpio_init+0x26c>)
    8bd2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    8bd6:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    8bda:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    8bde:	2004      	movs	r0, #4
    8be0:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    8be4:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    8be8:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
    8bec:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
    8bf0:	4869      	ldr	r0, [pc, #420]	; (8d98 <gpio_init+0x270>)
    8bf2:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    8bf6:	f04f 0e08 	mov.w	lr, #8
    8bfa:	f8c3 e088 	str.w	lr, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    8bfe:	4c67      	ldr	r4, [pc, #412]	; (8d9c <gpio_init+0x274>)
    8c00:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
    8c04:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    8c08:	2710      	movs	r7, #16
    8c0a:	f8c3 7088 	str.w	r7, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    8c0e:	3408      	adds	r4, #8
    8c10:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
    8c14:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    8c18:	2620      	movs	r6, #32
    8c1a:	f8c3 6088 	str.w	r6, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    8c1e:	3410      	adds	r4, #16
    8c20:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
    8c24:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    8c28:	2540      	movs	r5, #64	; 0x40
    8c2a:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    8c2e:	3420      	adds	r4, #32
    8c30:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
    8c34:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    8c38:	2480      	movs	r4, #128	; 0x80
    8c3a:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    8c3e:	f8df c16c 	ldr.w	ip, [pc, #364]	; 8dac <gpio_init+0x284>
    8c42:	f8c3 c0a8 	str.w	ip, [r3, #168]	; 0xa8
    8c46:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    8c4a:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    8c4e:	4a54      	ldr	r2, [pc, #336]	; (8da0 <gpio_init+0x278>)
    8c50:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    8c54:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    8c58:	2202      	movs	r2, #2
    8c5a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    8c5e:	f8df c150 	ldr.w	ip, [pc, #336]	; 8db0 <gpio_init+0x288>
    8c62:	f8c3 c128 	str.w	ip, [r3, #296]	; 0x128
    8c66:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    8c6a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    8c6e:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    8c72:	484c      	ldr	r0, [pc, #304]	; (8da4 <gpio_init+0x27c>)
    8c74:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
    8c78:	f10c 4c00 	add.w	ip, ip, #2147483648	; 0x80000000
    8c7c:	f10c 0cfe 	add.w	ip, ip, #254	; 0xfe
    8c80:	f8c3 c0a8 	str.w	ip, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    8c84:	f04f 7c00 	mov.w	ip, #33554432	; 0x2000000
    8c88:	f8c3 c088 	str.w	ip, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    8c8c:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    8c90:	f8c3 80a8 	str.w	r8, [r3, #168]	; 0xa8
    8c94:	f8df 911c 	ldr.w	r9, [pc, #284]	; 8db4 <gpio_init+0x28c>
    8c98:	f8c3 90a8 	str.w	r9, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    8c9c:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
    8ca0:	f8c3 9104 	str.w	r9, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    8ca4:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
    8ca8:	483f      	ldr	r0, [pc, #252]	; (8da8 <gpio_init+0x280>)
    8caa:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    8cae:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    8cb2:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    8cb6:	f8c3 8128 	str.w	r8, [r3, #296]	; 0x128
    8cba:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8db8 <gpio_init+0x290>
    8cbe:	f8c3 8128 	str.w	r8, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    8cc2:	f893 80c0 	ldrb.w	r8, [r3, #192]	; 0xc0
    8cc6:	f008 08fb 	and.w	r8, r8, #251	; 0xfb
    8cca:	f883 80c0 	strb.w	r8, [r3, #192]	; 0xc0
    8cce:	f893 80c2 	ldrb.w	r8, [r3, #194]	; 0xc2
    8cd2:	f008 08fb 	and.w	r8, r8, #251	; 0xfb
    8cd6:	f883 80c2 	strb.w	r8, [r3, #194]	; 0xc2
    8cda:	f893 80c3 	ldrb.w	r8, [r3, #195]	; 0xc3
    8cde:	f008 08fb 	and.w	r8, r8, #251	; 0xfb
    8ce2:	f883 80c3 	strb.w	r8, [r3, #195]	; 0xc3
    8ce6:	f893 80c4 	ldrb.w	r8, [r3, #196]	; 0xc4
    8cea:	f008 08fb 	and.w	r8, r8, #251	; 0xfb
    8cee:	f883 80c4 	strb.w	r8, [r3, #196]	; 0xc4
    8cf2:	f893 80c5 	ldrb.w	r8, [r3, #197]	; 0xc5
    8cf6:	f008 08fb 	and.w	r8, r8, #251	; 0xfb
    8cfa:	f883 80c5 	strb.w	r8, [r3, #197]	; 0xc5
    8cfe:	f893 80c6 	ldrb.w	r8, [r3, #198]	; 0xc6
    8d02:	f008 08fb 	and.w	r8, r8, #251	; 0xfb
    8d06:	f883 80c6 	strb.w	r8, [r3, #198]	; 0xc6
    8d0a:	f893 80c7 	ldrb.w	r8, [r3, #199]	; 0xc7
    8d0e:	f008 08fb 	and.w	r8, r8, #251	; 0xfb
    8d12:	f883 80c7 	strb.w	r8, [r3, #199]	; 0xc7
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    8d16:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    8d1a:	f893 8140 	ldrb.w	r8, [r3, #320]	; 0x140
    8d1e:	f048 0804 	orr.w	r8, r8, #4
    8d22:	f883 8140 	strb.w	r8, [r3, #320]	; 0x140
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    8d26:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    8d2a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    8d2e:	f893 1141 	ldrb.w	r1, [r3, #321]	; 0x141
    8d32:	f041 0104 	orr.w	r1, r1, #4
    8d36:	f883 1141 	strb.w	r1, [r3, #321]	; 0x141
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    8d3a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    8d3e:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
    8d42:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    8d46:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
    8d4a:	f893 20d9 	ldrb.w	r2, [r3, #217]	; 0xd9
    8d4e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    8d52:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
    8d56:	f893 215b 	ldrb.w	r2, [r3, #347]	; 0x15b
    8d5a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    8d5e:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
    8d62:	f893 215c 	ldrb.w	r2, [r3, #348]	; 0x15c
    8d66:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    8d6a:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    8d6e:	f8c3 e094 	str.w	lr, [r3, #148]	; 0x94
    8d72:	f8c3 7094 	str.w	r7, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    8d76:	f8c3 6098 	str.w	r6, [r3, #152]	; 0x98
    8d7a:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
    8d7e:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    8d82:	f8c3 c094 	str.w	ip, [r3, #148]	; 0x94
    8d86:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
    8d8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    8d8e:	bf00      	nop
    8d90:	41008000 	.word	0x41008000
    8d94:	40000001 	.word	0x40000001
    8d98:	c0020000 	.word	0xc0020000
    8d9c:	40000008 	.word	0x40000008
    8da0:	40020001 	.word	0x40020001
    8da4:	40020000 	.word	0x40020000
    8da8:	c0020800 	.word	0xc0020800
    8dac:	40000080 	.word	0x40000080
    8db0:	40020002 	.word	0x40020002
    8db4:	c0000200 	.word	0xc0000200
    8db8:	c0001000 	.word	0xc0001000

00008dbc <watchdog_init>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: setup, initialize and start the watchdog code timer
// Returns:     Nothing
// *****************************************************************************************************************************************************************
void watchdog_init(void)
{	
    8dbc:	b570      	push	{r4, r5, r6, lr}
 * \retval -2 Invalid timeout period.
 */
static inline int32_t wdt_set_timeout_period(struct wdt_descriptor *const wdt, const uint32_t clk_rate,
                                             const uint16_t timeout_period)
{
	ASSERT(wdt && wdt->dev.hw);
    8dbe:	4e0e      	ldr	r6, [pc, #56]	; (8df8 <watchdog_init+0x3c>)
    8dc0:	4c0e      	ldr	r4, [pc, #56]	; (8dfc <watchdog_init+0x40>)
    8dc2:	6820      	ldr	r0, [r4, #0]
    8dc4:	226f      	movs	r2, #111	; 0x6f
    8dc6:	4631      	mov	r1, r6
    8dc8:	3000      	adds	r0, #0
    8dca:	bf18      	it	ne
    8dcc:	2001      	movne	r0, #1
    8dce:	4d0c      	ldr	r5, [pc, #48]	; (8e00 <watchdog_init+0x44>)
    8dd0:	47a8      	blx	r5

	return _wdt_set_timeout_period(&wdt->dev, clk_rate, timeout_period);
    8dd2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    8dd6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    8dda:	4620      	mov	r0, r4
    8ddc:	4b09      	ldr	r3, [pc, #36]	; (8e04 <watchdog_init+0x48>)
    8dde:	4798      	blx	r3
 * \return Operation status of init
 * \retval 0  Completed sucessfully.
 */
static inline int32_t wdt_enable(struct wdt_descriptor *const wdt)
{
	ASSERT(wdt && wdt->dev.hw);
    8de0:	6820      	ldr	r0, [r4, #0]
    8de2:	228c      	movs	r2, #140	; 0x8c
    8de4:	4631      	mov	r1, r6
    8de6:	3000      	adds	r0, #0
    8de8:	bf18      	it	ne
    8dea:	2001      	movne	r0, #1
    8dec:	47a8      	blx	r5

	return _wdt_enable(&wdt->dev);
    8dee:	4620      	mov	r0, r4
    8df0:	4b05      	ldr	r3, [pc, #20]	; (8e08 <watchdog_init+0x4c>)
    8df2:	4798      	blx	r3
    8df4:	bd70      	pop	{r4, r5, r6, pc}
    8df6:	bf00      	nop
    8df8:	0000ec30 	.word	0x0000ec30
    8dfc:	20007474 	.word	0x20007474
    8e00:	000026b1 	.word	0x000026b1
    8e04:	000052e1 	.word	0x000052e1
    8e08:	000053d9 	.word	0x000053d9

00008e0c <var_init>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: reset all global variables
// Returns:     Nothing
// *****************************************************************************************************************************************************************
void var_init(void)
{
    8e0c:	b570      	push	{r4, r5, r6, lr}
	/* Set all the main global variables to zero to initialize the states before nay further code executes that relies on the initialization process at the start */
	tick_counter = 0;
    8e0e:	2200      	movs	r2, #0
    8e10:	4b5b      	ldr	r3, [pc, #364]	; (8f80 <var_init+0x174>)
    8e12:	601a      	str	r2, [r3, #0]
	readenvironment = 0;
    8e14:	4b5b      	ldr	r3, [pc, #364]	; (8f84 <var_init+0x178>)
    8e16:	701a      	strb	r2, [r3, #0]
	arp_check = 0;
    8e18:	4b5b      	ldr	r3, [pc, #364]	; (8f88 <var_init+0x17c>)
    8e1a:	701a      	strb	r2, [r3, #0]
	ip_periodic_check = 0;
    8e1c:	4b5b      	ldr	r3, [pc, #364]	; (8f8c <var_init+0x180>)
    8e1e:	701a      	strb	r2, [r3, #0]
	ring_timer = 0;
    8e20:	4b5b      	ldr	r3, [pc, #364]	; (8f90 <var_init+0x184>)
    8e22:	701a      	strb	r2, [r3, #0]
	ring = 0;
    8e24:	4b5b      	ldr	r3, [pc, #364]	; (8f94 <var_init+0x188>)
    8e26:	701a      	strb	r2, [r3, #0]

	sentA = 0;
    8e28:	4b5b      	ldr	r3, [pc, #364]	; (8f98 <var_init+0x18c>)
    8e2a:	701a      	strb	r2, [r3, #0]
	sentB = 0;
    8e2c:	4b5b      	ldr	r3, [pc, #364]	; (8f9c <var_init+0x190>)
    8e2e:	701a      	strb	r2, [r3, #0]
	reboot_actioned = 0;
    8e30:	4b5b      	ldr	r3, [pc, #364]	; (8fa0 <var_init+0x194>)
    8e32:	701a      	strb	r2, [r3, #0]
	send_relearn_udp = 0;
    8e34:	4b5b      	ldr	r3, [pc, #364]	; (8fa4 <var_init+0x198>)
    8e36:	701a      	strb	r2, [r3, #0]
	refresh_gain = 0;
    8e38:	4b5b      	ldr	r3, [pc, #364]	; (8fa8 <var_init+0x19c>)
    8e3a:	701a      	strb	r2, [r3, #0]
	
	cardA_old = 0;
    8e3c:	4b5b      	ldr	r3, [pc, #364]	; (8fac <var_init+0x1a0>)
    8e3e:	701a      	strb	r2, [r3, #0]
	cardB_old = 0;
    8e40:	4b5b      	ldr	r3, [pc, #364]	; (8fb0 <var_init+0x1a4>)
    8e42:	701a      	strb	r2, [r3, #0]
	card_sampleindex = 0;
    8e44:	4b5b      	ldr	r3, [pc, #364]	; (8fb4 <var_init+0x1a8>)
    8e46:	601a      	str	r2, [r3, #0]
	good_ethernet = 0;
    8e48:	4b5b      	ldr	r3, [pc, #364]	; (8fb8 <var_init+0x1ac>)
    8e4a:	701a      	strb	r2, [r3, #0]
	stormstate = 0;
    8e4c:	4b5b      	ldr	r3, [pc, #364]	; (8fbc <var_init+0x1b0>)
    8e4e:	701a      	strb	r2, [r3, #0]
	link_port1 = 0;
    8e50:	4b5b      	ldr	r3, [pc, #364]	; (8fc0 <var_init+0x1b4>)
    8e52:	701a      	strb	r2, [r3, #0]
	link_port2 = 0;
    8e54:	4b5b      	ldr	r3, [pc, #364]	; (8fc4 <var_init+0x1b8>)
    8e56:	701a      	strb	r2, [r3, #0]
	link_port3 = 0;
    8e58:	4b5b      	ldr	r3, [pc, #364]	; (8fc8 <var_init+0x1bc>)
    8e5a:	701a      	strb	r2, [r3, #0]
	old_tamper = 0;
    8e5c:	4b5b      	ldr	r3, [pc, #364]	; (8fcc <var_init+0x1c0>)
    8e5e:	701a      	strb	r2, [r3, #0]
	old_link_port1 = 0;
    8e60:	4b5b      	ldr	r3, [pc, #364]	; (8fd0 <var_init+0x1c4>)
    8e62:	701a      	strb	r2, [r3, #0]
	old_link_port2 = 0;
    8e64:	4b5b      	ldr	r3, [pc, #364]	; (8fd4 <var_init+0x1c8>)
    8e66:	701a      	strb	r2, [r3, #0]
	old_link_port3 = 0;
    8e68:	4b5b      	ldr	r3, [pc, #364]	; (8fd8 <var_init+0x1cc>)
    8e6a:	701a      	strb	r2, [r3, #0]
	readdata_water1 = 0;
    8e6c:	4b5b      	ldr	r3, [pc, #364]	; (8fdc <var_init+0x1d0>)
    8e6e:	701a      	strb	r2, [r3, #0]
	readdata_water2 = 0;
    8e70:	4b5b      	ldr	r3, [pc, #364]	; (8fe0 <var_init+0x1d4>)
    8e72:	701a      	strb	r2, [r3, #0]
	highvoltage = 0;
    8e74:	4b5b      	ldr	r3, [pc, #364]	; (8fe4 <var_init+0x1d8>)
    8e76:	701a      	strb	r2, [r3, #0]
	read_hardware_index = 0;
    8e78:	4b5b      	ldr	r3, [pc, #364]	; (8fe8 <var_init+0x1dc>)
    8e7a:	701a      	strb	r2, [r3, #0]
	looprate = 0;
    8e7c:	4b5b      	ldr	r3, [pc, #364]	; (8fec <var_init+0x1e0>)
    8e7e:	601a      	str	r2, [r3, #0]
	loopcount = 0;
    8e80:	4b5b      	ldr	r3, [pc, #364]	; (8ff0 <var_init+0x1e4>)
    8e82:	601a      	str	r2, [r3, #0]
	miniA_chan = 0;
    8e84:	4b5b      	ldr	r3, [pc, #364]	; (8ff4 <var_init+0x1e8>)
    8e86:	701a      	strb	r2, [r3, #0]
	miniB_chan = 0;
    8e88:	4b5b      	ldr	r3, [pc, #364]	; (8ff8 <var_init+0x1ec>)
    8e8a:	701a      	strb	r2, [r3, #0]
	miniIO_A1_adcH = 0;
    8e8c:	4b5b      	ldr	r3, [pc, #364]	; (8ffc <var_init+0x1f0>)
    8e8e:	701a      	strb	r2, [r3, #0]
	miniIO_A1_adcL = 0;
    8e90:	4b5b      	ldr	r3, [pc, #364]	; (9000 <var_init+0x1f4>)
    8e92:	701a      	strb	r2, [r3, #0]
	miniIO_A0_adcH = 0;
    8e94:	4b5b      	ldr	r3, [pc, #364]	; (9004 <var_init+0x1f8>)
    8e96:	701a      	strb	r2, [r3, #0]
	miniIO_A0_adcL = 0;
    8e98:	4b5b      	ldr	r3, [pc, #364]	; (9008 <var_init+0x1fc>)
    8e9a:	701a      	strb	r2, [r3, #0]
	miniIO_A_relay = 0;
    8e9c:	4b5b      	ldr	r3, [pc, #364]	; (900c <var_init+0x200>)
    8e9e:	701a      	strb	r2, [r3, #0]
	miniIO_A_inputs = 0;
    8ea0:	4b5b      	ldr	r3, [pc, #364]	; (9010 <var_init+0x204>)
    8ea2:	701a      	strb	r2, [r3, #0]
	miniIO_B1_adcH = 0;
    8ea4:	4b5b      	ldr	r3, [pc, #364]	; (9014 <var_init+0x208>)
    8ea6:	701a      	strb	r2, [r3, #0]
	miniIO_B1_adcL = 0;
    8ea8:	4b5b      	ldr	r3, [pc, #364]	; (9018 <var_init+0x20c>)
    8eaa:	701a      	strb	r2, [r3, #0]
	miniIO_B0_adcH = 0;
    8eac:	4b5b      	ldr	r3, [pc, #364]	; (901c <var_init+0x210>)
    8eae:	701a      	strb	r2, [r3, #0]
	miniIO_B0_adcL = 0;
    8eb0:	4b5b      	ldr	r3, [pc, #364]	; (9020 <var_init+0x214>)
    8eb2:	701a      	strb	r2, [r3, #0]
	miniIO_B_relay = 0;
    8eb4:	4b5b      	ldr	r3, [pc, #364]	; (9024 <var_init+0x218>)
    8eb6:	701a      	strb	r2, [r3, #0]
	miniIO_B_inputs = 0;
    8eb8:	4b5b      	ldr	r3, [pc, #364]	; (9028 <var_init+0x21c>)
    8eba:	701a      	strb	r2, [r3, #0]
	
	/* Set the enumerated type variables such as the daughter card types and the network loop ring-topology management state */
	cardA_type = CARD_NOTFITTED;
    8ebc:	4b5b      	ldr	r3, [pc, #364]	; (902c <var_init+0x220>)
    8ebe:	701a      	strb	r2, [r3, #0]
	cardB_type = CARD_NOTFITTED;
    8ec0:	4b5b      	ldr	r3, [pc, #364]	; (9030 <var_init+0x224>)
    8ec2:	701a      	strb	r2, [r3, #0]
	ring_broken = RING_NOTCONFIGURED;
    8ec4:	2102      	movs	r1, #2
    8ec6:	4b5b      	ldr	r3, [pc, #364]	; (9034 <var_init+0x228>)
    8ec8:	7019      	strb	r1, [r3, #0]
	
	/* Also, read out the non-volatile EEprom configuration data */
	if (EEprom_settings(settings_buffer, SETTING_STRUCTURE_SIZE, 0) != ERR_NONE) {
    8eca:	2180      	movs	r1, #128	; 0x80
    8ecc:	485a      	ldr	r0, [pc, #360]	; (9038 <var_init+0x22c>)
    8ece:	4b5b      	ldr	r3, [pc, #364]	; (903c <var_init+0x230>)
    8ed0:	4798      	blx	r3
    8ed2:	2800      	cmp	r0, #0
    8ed4:	d140      	bne.n	8f58 <var_init+0x14c>
		xprintf("MultiSense [configuration ERROR READING]\r\n");
	}
	
	/* Check if the configuration data is invalid and needs defaulting */
	if ((((CONFIG *)&settings_buffer)->pattern1 != CONFIG_IDENTIFIER1) || (((CONFIG *)&settings_buffer)->pattern2 != CONFIG_IDENTIFIER2) || (!(((CONFIG *)&settings_buffer)->ID)) || (((CONFIG *)&settings_buffer)->ID > 0x8000)) {
    8ed6:	4b58      	ldr	r3, [pc, #352]	; (9038 <var_init+0x22c>)
    8ed8:	681a      	ldr	r2, [r3, #0]
    8eda:	4b59      	ldr	r3, [pc, #356]	; (9040 <var_init+0x234>)
    8edc:	429a      	cmp	r2, r3
    8ede:	d03f      	beq.n	8f60 <var_init+0x154>
		xprintf("MultiSense [configuration INVALID]\r\n");
    8ee0:	4858      	ldr	r0, [pc, #352]	; (9044 <var_init+0x238>)
    8ee2:	4e59      	ldr	r6, [pc, #356]	; (9048 <var_init+0x23c>)
    8ee4:	47b0      	blx	r6
		
		/* Re-write default values ready for write-back */
		((CONFIG *)&settings_buffer)->pattern1 = CONFIG_IDENTIFIER1;
    8ee6:	4c54      	ldr	r4, [pc, #336]	; (9038 <var_init+0x22c>)
    8ee8:	2500      	movs	r5, #0
    8eea:	2376      	movs	r3, #118	; 0x76
    8eec:	7023      	strb	r3, [r4, #0]
    8eee:	2336      	movs	r3, #54	; 0x36
    8ef0:	7063      	strb	r3, [r4, #1]
    8ef2:	2345      	movs	r3, #69	; 0x45
    8ef4:	70a3      	strb	r3, [r4, #2]
    8ef6:	f06f 0301 	mvn.w	r3, #1
    8efa:	70e3      	strb	r3, [r4, #3]
		((CONFIG *)&settings_buffer)->pattern2 = CONFIG_IDENTIFIER2;
    8efc:	f06f 0343 	mvn.w	r3, #67	; 0x43
    8f00:	7123      	strb	r3, [r4, #4]
    8f02:	f06f 0315 	mvn.w	r3, #21
    8f06:	7163      	strb	r3, [r4, #5]
    8f08:	237d      	movs	r3, #125	; 0x7d
    8f0a:	71a3      	strb	r3, [r4, #6]
    8f0c:	f06f 036c 	mvn.w	r3, #108	; 0x6c
    8f10:	71e3      	strb	r3, [r4, #7]
		strncpy((char *__restrict)(((CONFIG *)&settings_buffer)->name), "MULTISENSE NEEDS CONFIGURING...", sizeof(((CONFIG *)&settings_buffer)->name));
    8f12:	2221      	movs	r2, #33	; 0x21
    8f14:	494d      	ldr	r1, [pc, #308]	; (904c <var_init+0x240>)
    8f16:	f104 0008 	add.w	r0, r4, #8
    8f1a:	4b4d      	ldr	r3, [pc, #308]	; (9050 <var_init+0x244>)
    8f1c:	4798      	blx	r3
		((CONFIG *)&settings_buffer)->ID = 0x8000;
    8f1e:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
    8f22:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    8f26:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    8f2a:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
    8f2e:	f884 502f 	strb.w	r5, [r4, #47]	; 0x2f
		((CONFIG *)&settings_buffer)->gain_cardA = 0xFF;
    8f32:	23ff      	movs	r3, #255	; 0xff
    8f34:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
		((CONFIG *)&settings_buffer)->gain_cardB = 0xFF;
    8f38:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
		((CONFIG *)&settings_buffer)->loop_basestation = 0;
    8f3c:	f884 502b 	strb.w	r5, [r4, #43]	; 0x2b
		
		xprintf("MultiSense [configuration FORMATTED]\r\n");
    8f40:	4844      	ldr	r0, [pc, #272]	; (9054 <var_init+0x248>)
    8f42:	47b0      	blx	r6
		
		/* Write these values back to the EEprom storage area */
		if (EEprom_settings(settings_buffer, SETTING_STRUCTURE_SIZE, 1) != ERR_NONE) {
    8f44:	2201      	movs	r2, #1
    8f46:	2180      	movs	r1, #128	; 0x80
    8f48:	4620      	mov	r0, r4
    8f4a:	4b3c      	ldr	r3, [pc, #240]	; (903c <var_init+0x230>)
    8f4c:	4798      	blx	r3
    8f4e:	b998      	cbnz	r0, 8f78 <var_init+0x16c>
			xprintf("MultiSense [configuration ERROR WRITING]\r\n");
		} else {
			xprintf("MultiSense [configuration WRITTEN]\r\n");
    8f50:	4841      	ldr	r0, [pc, #260]	; (9058 <var_init+0x24c>)
    8f52:	4b3d      	ldr	r3, [pc, #244]	; (9048 <var_init+0x23c>)
    8f54:	4798      	blx	r3
    8f56:	bd70      	pop	{r4, r5, r6, pc}
		xprintf("MultiSense [configuration ERROR READING]\r\n");
    8f58:	4840      	ldr	r0, [pc, #256]	; (905c <var_init+0x250>)
    8f5a:	4b3b      	ldr	r3, [pc, #236]	; (9048 <var_init+0x23c>)
    8f5c:	4798      	blx	r3
    8f5e:	e7ba      	b.n	8ed6 <var_init+0xca>
	if ((((CONFIG *)&settings_buffer)->pattern1 != CONFIG_IDENTIFIER1) || (((CONFIG *)&settings_buffer)->pattern2 != CONFIG_IDENTIFIER2) || (!(((CONFIG *)&settings_buffer)->ID)) || (((CONFIG *)&settings_buffer)->ID > 0x8000)) {
    8f60:	4b35      	ldr	r3, [pc, #212]	; (9038 <var_init+0x22c>)
    8f62:	685a      	ldr	r2, [r3, #4]
    8f64:	4b3e      	ldr	r3, [pc, #248]	; (9060 <var_init+0x254>)
    8f66:	429a      	cmp	r2, r3
    8f68:	d1ba      	bne.n	8ee0 <var_init+0xd4>
    8f6a:	4b33      	ldr	r3, [pc, #204]	; (9038 <var_init+0x22c>)
    8f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8f6e:	3b01      	subs	r3, #1
    8f70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    8f74:	d3ef      	bcc.n	8f56 <var_init+0x14a>
    8f76:	e7b3      	b.n	8ee0 <var_init+0xd4>
			xprintf("MultiSense [configuration ERROR WRITING]\r\n");
    8f78:	483a      	ldr	r0, [pc, #232]	; (9064 <var_init+0x258>)
    8f7a:	47b0      	blx	r6
    8f7c:	bd70      	pop	{r4, r5, r6, pc}
    8f7e:	bf00      	nop
    8f80:	2000855c 	.word	0x2000855c
    8f84:	2000826c 	.word	0x2000826c
    8f88:	20007fbe 	.word	0x20007fbe
    8f8c:	20007860 	.word	0x20007860
    8f90:	20008279 	.word	0x20008279
    8f94:	20008558 	.word	0x20008558
    8f98:	20007fbc 	.word	0x20007fbc
    8f9c:	20007588 	.word	0x20007588
    8fa0:	20007fbf 	.word	0x20007fbf
    8fa4:	20008275 	.word	0x20008275
    8fa8:	20008561 	.word	0x20008561
    8fac:	20007577 	.word	0x20007577
    8fb0:	2000784d 	.word	0x2000784d
    8fb4:	20008548 	.word	0x20008548
    8fb8:	2000757d 	.word	0x2000757d
    8fbc:	20008560 	.word	0x20008560
    8fc0:	20007575 	.word	0x20007575
    8fc4:	20008294 	.word	0x20008294
    8fc8:	20007579 	.word	0x20007579
    8fcc:	2000854c 	.word	0x2000854c
    8fd0:	20007589 	.word	0x20007589
    8fd4:	20007574 	.word	0x20007574
    8fd8:	20008278 	.word	0x20008278
    8fdc:	20008562 	.word	0x20008562
    8fe0:	2000854d 	.word	0x2000854d
    8fe4:	20008557 	.word	0x20008557
    8fe8:	2000757e 	.word	0x2000757e
    8fec:	20008578 	.word	0x20008578
    8ff0:	2000758c 	.word	0x2000758c
    8ff4:	2000757a 	.word	0x2000757a
    8ff8:	20008276 	.word	0x20008276
    8ffc:	20008277 	.word	0x20008277
    9000:	20007fb2 	.word	0x20007fb2
    9004:	20007c6c 	.word	0x20007c6c
    9008:	20008556 	.word	0x20008556
    900c:	20007fb4 	.word	0x20007fb4
    9010:	20007578 	.word	0x20007578
    9014:	20007590 	.word	0x20007590
    9018:	20008563 	.word	0x20008563
    901c:	20007fbd 	.word	0x20007fbd
    9020:	20007c6d 	.word	0x20007c6d
    9024:	20007f1c 	.word	0x20007f1c
    9028:	20008274 	.word	0x20008274
    902c:	20007c6e 	.word	0x20007c6e
    9030:	20008564 	.word	0x20008564
    9034:	2000826d 	.word	0x2000826d
    9038:	20007f2c 	.word	0x20007f2c
    903c:	0000d8c9 	.word	0x0000d8c9
    9040:	fe453676 	.word	0xfe453676
    9044:	0000ffc0 	.word	0x0000ffc0
    9048:	0000031d 	.word	0x0000031d
    904c:	0000ffe8 	.word	0x0000ffe8
    9050:	0000db2d 	.word	0x0000db2d
    9054:	00010008 	.word	0x00010008
    9058:	0001005c 	.word	0x0001005c
    905c:	0000ff94 	.word	0x0000ff94
    9060:	937deabc 	.word	0x937deabc
    9064:	00010030 	.word	0x00010030

00009068 <tx_callb>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: INTERCEPT HOOK STUB for <UART_1>
// Returns:     Nothing (NULL)
// *****************************************************************************************************************************************************************
void tx_callb(const struct usart_async_descriptor *const descr)
{
    9068:	4770      	bx	lr

0000906a <rx_callb>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: INTERCEPT HOOK STUB for <UART_1>
// Returns:     Nothing (NULL)
// *****************************************************************************************************************************************************************
void rx_callb(const struct usart_async_descriptor *const descr)
{
    906a:	4770      	bx	lr

0000906c <wdt_disable>:
 * \return Operation status of init
 * \retval 0  Completed sucessfully.
 * \retval -1 Always on, can't disable.
 */
static inline int32_t wdt_disable(struct wdt_descriptor *const wdt)
{
    906c:	b510      	push	{r4, lr}
	ASSERT(wdt && wdt->dev.hw);
    906e:	4604      	mov	r4, r0
    9070:	b158      	cbz	r0, 908a <wdt_disable+0x1e>
    9072:	6800      	ldr	r0, [r0, #0]
    9074:	3000      	adds	r0, #0
    9076:	bf18      	it	ne
    9078:	2001      	movne	r0, #1
    907a:	229b      	movs	r2, #155	; 0x9b
    907c:	4904      	ldr	r1, [pc, #16]	; (9090 <wdt_disable+0x24>)
    907e:	4b05      	ldr	r3, [pc, #20]	; (9094 <wdt_disable+0x28>)
    9080:	4798      	blx	r3

	return _wdt_disable(&wdt->dev);
    9082:	4620      	mov	r0, r4
    9084:	4b04      	ldr	r3, [pc, #16]	; (9098 <wdt_disable+0x2c>)
    9086:	4798      	blx	r3
}
    9088:	bd10      	pop	{r4, pc}
    908a:	2000      	movs	r0, #0
    908c:	e7f5      	b.n	907a <wdt_disable+0xe>
    908e:	bf00      	nop
    9090:	0000ec30 	.word	0x0000ec30
    9094:	000026b1 	.word	0x000026b1
    9098:	00005411 	.word	0x00005411

0000909c <wdt_set_timeout_period>:
{
    909c:	b570      	push	{r4, r5, r6, lr}
    909e:	460d      	mov	r5, r1
    90a0:	4616      	mov	r6, r2
	ASSERT(wdt && wdt->dev.hw);
    90a2:	4604      	mov	r4, r0
    90a4:	b168      	cbz	r0, 90c2 <wdt_set_timeout_period+0x26>
    90a6:	6800      	ldr	r0, [r0, #0]
    90a8:	3000      	adds	r0, #0
    90aa:	bf18      	it	ne
    90ac:	2001      	movne	r0, #1
    90ae:	226f      	movs	r2, #111	; 0x6f
    90b0:	4905      	ldr	r1, [pc, #20]	; (90c8 <wdt_set_timeout_period+0x2c>)
    90b2:	4b06      	ldr	r3, [pc, #24]	; (90cc <wdt_set_timeout_period+0x30>)
    90b4:	4798      	blx	r3
	return _wdt_set_timeout_period(&wdt->dev, clk_rate, timeout_period);
    90b6:	4632      	mov	r2, r6
    90b8:	4629      	mov	r1, r5
    90ba:	4620      	mov	r0, r4
    90bc:	4b04      	ldr	r3, [pc, #16]	; (90d0 <wdt_set_timeout_period+0x34>)
    90be:	4798      	blx	r3
}
    90c0:	bd70      	pop	{r4, r5, r6, pc}
    90c2:	2000      	movs	r0, #0
    90c4:	e7f3      	b.n	90ae <wdt_set_timeout_period+0x12>
    90c6:	bf00      	nop
    90c8:	0000ec30 	.word	0x0000ec30
    90cc:	000026b1 	.word	0x000026b1
    90d0:	000052e1 	.word	0x000052e1

000090d4 <wdt_enable>:
{
    90d4:	b510      	push	{r4, lr}
	ASSERT(wdt && wdt->dev.hw);
    90d6:	4604      	mov	r4, r0
    90d8:	b158      	cbz	r0, 90f2 <wdt_enable+0x1e>
    90da:	6800      	ldr	r0, [r0, #0]
    90dc:	3000      	adds	r0, #0
    90de:	bf18      	it	ne
    90e0:	2001      	movne	r0, #1
    90e2:	228c      	movs	r2, #140	; 0x8c
    90e4:	4904      	ldr	r1, [pc, #16]	; (90f8 <wdt_enable+0x24>)
    90e6:	4b05      	ldr	r3, [pc, #20]	; (90fc <wdt_enable+0x28>)
    90e8:	4798      	blx	r3
	return _wdt_enable(&wdt->dev);
    90ea:	4620      	mov	r0, r4
    90ec:	4b04      	ldr	r3, [pc, #16]	; (9100 <wdt_enable+0x2c>)
    90ee:	4798      	blx	r3
}
    90f0:	bd10      	pop	{r4, pc}
    90f2:	2000      	movs	r0, #0
    90f4:	e7f5      	b.n	90e2 <wdt_enable+0xe>
    90f6:	bf00      	nop
    90f8:	0000ec30 	.word	0x0000ec30
    90fc:	000026b1 	.word	0x000026b1
    9100:	000053d9 	.word	0x000053d9

00009104 <TIMER_0_task1_cb>:
	tick_counter++;
    9104:	4a24      	ldr	r2, [pc, #144]	; (9198 <TIMER_0_task1_cb+0x94>)
    9106:	6813      	ldr	r3, [r2, #0]
    9108:	3301      	adds	r3, #1
    910a:	6013      	str	r3, [r2, #0]
	if (!(tick_counter % 5)) {
    910c:	4a23      	ldr	r2, [pc, #140]	; (919c <TIMER_0_task1_cb+0x98>)
    910e:	fba2 1203 	umull	r1, r2, r2, r3
    9112:	0892      	lsrs	r2, r2, #2
    9114:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    9118:	4293      	cmp	r3, r2
    911a:	d12a      	bne.n	9172 <TIMER_0_task1_cb+0x6e>
		readenvironment = 1;
    911c:	2201      	movs	r2, #1
    911e:	4920      	ldr	r1, [pc, #128]	; (91a0 <TIMER_0_task1_cb+0x9c>)
    9120:	700a      	strb	r2, [r1, #0]
	ip_periodic_check = 1;
    9122:	4920      	ldr	r1, [pc, #128]	; (91a4 <TIMER_0_task1_cb+0xa0>)
    9124:	700a      	strb	r2, [r1, #0]
	if (!(tick_counter % 25)) {
    9126:	4a20      	ldr	r2, [pc, #128]	; (91a8 <TIMER_0_task1_cb+0xa4>)
    9128:	fba2 1203 	umull	r1, r2, r2, r3
    912c:	08d2      	lsrs	r2, r2, #3
    912e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    9132:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    9136:	4293      	cmp	r3, r2
    9138:	d102      	bne.n	9140 <TIMER_0_task1_cb+0x3c>
		arp_check = 1;
    913a:	2101      	movs	r1, #1
    913c:	4a1b      	ldr	r2, [pc, #108]	; (91ac <TIMER_0_task1_cb+0xa8>)
    913e:	7011      	strb	r1, [r2, #0]
		ring_timer = 1;
    9140:	2101      	movs	r1, #1
    9142:	4a1b      	ldr	r2, [pc, #108]	; (91b0 <TIMER_0_task1_cb+0xac>)
    9144:	7011      	strb	r1, [r2, #0]
	if (!(tick_counter % 10)) {
    9146:	4a15      	ldr	r2, [pc, #84]	; (919c <TIMER_0_task1_cb+0x98>)
    9148:	fba2 1203 	umull	r1, r2, r2, r3
    914c:	08d2      	lsrs	r2, r2, #3
    914e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    9152:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
    9156:	d105      	bne.n	9164 <TIMER_0_task1_cb+0x60>
		looprate = loopcount;
    9158:	4b16      	ldr	r3, [pc, #88]	; (91b4 <TIMER_0_task1_cb+0xb0>)
    915a:	6819      	ldr	r1, [r3, #0]
    915c:	4a16      	ldr	r2, [pc, #88]	; (91b8 <TIMER_0_task1_cb+0xb4>)
    915e:	6011      	str	r1, [r2, #0]
		loopcount = 0;
    9160:	2200      	movs	r2, #0
    9162:	601a      	str	r2, [r3, #0]
	if (good_ethernet) {
    9164:	4b15      	ldr	r3, [pc, #84]	; (91bc <TIMER_0_task1_cb+0xb8>)
    9166:	781b      	ldrb	r3, [r3, #0]
    9168:	b1a3      	cbz	r3, 9194 <TIMER_0_task1_cb+0x90>
		good_ethernet--;
    916a:	3b01      	subs	r3, #1
    916c:	4a13      	ldr	r2, [pc, #76]	; (91bc <TIMER_0_task1_cb+0xb8>)
    916e:	7013      	strb	r3, [r2, #0]
}
    9170:	4770      	bx	lr
	ip_periodic_check = 1;
    9172:	2101      	movs	r1, #1
    9174:	4a0b      	ldr	r2, [pc, #44]	; (91a4 <TIMER_0_task1_cb+0xa0>)
    9176:	7011      	strb	r1, [r2, #0]
	if (!(tick_counter % 25)) {
    9178:	4a0b      	ldr	r2, [pc, #44]	; (91a8 <TIMER_0_task1_cb+0xa4>)
    917a:	fba2 1203 	umull	r1, r2, r2, r3
    917e:	08d2      	lsrs	r2, r2, #3
    9180:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    9184:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    9188:	4293      	cmp	r3, r2
    918a:	d1dc      	bne.n	9146 <TIMER_0_task1_cb+0x42>
		arp_check = 1;
    918c:	2101      	movs	r1, #1
    918e:	4a07      	ldr	r2, [pc, #28]	; (91ac <TIMER_0_task1_cb+0xa8>)
    9190:	7011      	strb	r1, [r2, #0]
    9192:	e7d8      	b.n	9146 <TIMER_0_task1_cb+0x42>
    9194:	4770      	bx	lr
    9196:	bf00      	nop
    9198:	2000855c 	.word	0x2000855c
    919c:	cccccccd 	.word	0xcccccccd
    91a0:	2000826c 	.word	0x2000826c
    91a4:	20007860 	.word	0x20007860
    91a8:	51eb851f 	.word	0x51eb851f
    91ac:	20007fbe 	.word	0x20007fbe
    91b0:	20008279 	.word	0x20008279
    91b4:	2000758c 	.word	0x2000758c
    91b8:	20008578 	.word	0x20008578
    91bc:	2000757d 	.word	0x2000757d

000091c0 <application_udp_appcall>:
	if (reboot_actioned) {																							// if the MultiSense node is rebooting, then return
    91c0:	4b88      	ldr	r3, [pc, #544]	; (93e4 <application_udp_appcall+0x224>)
    91c2:	781b      	ldrb	r3, [r3, #0]
    91c4:	2b00      	cmp	r3, #0
    91c6:	f040 82f6 	bne.w	97b6 <application_udp_appcall+0x5f6>
{
    91ca:	b570      	push	{r4, r5, r6, lr}
	if (uip_newdata()) {
    91cc:	4b86      	ldr	r3, [pc, #536]	; (93e8 <application_udp_appcall+0x228>)
    91ce:	781b      	ldrb	r3, [r3, #0]
    91d0:	f013 0f02 	tst.w	r3, #2
    91d4:	d106      	bne.n	91e4 <application_udp_appcall+0x24>
	if ((uip_rexmit()) || (uip_poll())) {
    91d6:	4b84      	ldr	r3, [pc, #528]	; (93e8 <application_udp_appcall+0x228>)
    91d8:	781b      	ldrb	r3, [r3, #0]
    91da:	f013 0f0c 	tst.w	r3, #12
    91de:	f040 80be 	bne.w	935e <application_udp_appcall+0x19e>
    91e2:	bd70      	pop	{r4, r5, r6, pc}
		good_ethernet = 255;
    91e4:	22ff      	movs	r2, #255	; 0xff
    91e6:	4b81      	ldr	r3, [pc, #516]	; (93ec <application_udp_appcall+0x22c>)
    91e8:	701a      	strb	r2, [r3, #0]
		len = uip_datalen();
    91ea:	4b81      	ldr	r3, [pc, #516]	; (93f0 <application_udp_appcall+0x230>)
    91ec:	881c      	ldrh	r4, [r3, #0]
		if (uip_conn->lport == htons(MAIN_UDPSOCKET)) {
    91ee:	4b81      	ldr	r3, [pc, #516]	; (93f4 <application_udp_appcall+0x234>)
    91f0:	681b      	ldr	r3, [r3, #0]
    91f2:	889d      	ldrh	r5, [r3, #4]
    91f4:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
    91f8:	4b7f      	ldr	r3, [pc, #508]	; (93f8 <application_udp_appcall+0x238>)
    91fa:	4798      	blx	r3
    91fc:	4285      	cmp	r5, r0
    91fe:	d037      	beq.n	9270 <application_udp_appcall+0xb0>
		} else if (uip_conn->lport == htons(CARDA_UDPSOCKET)) {
    9200:	4b7c      	ldr	r3, [pc, #496]	; (93f4 <application_udp_appcall+0x234>)
    9202:	681b      	ldr	r3, [r3, #0]
    9204:	889d      	ldrh	r5, [r3, #4]
    9206:	f640 70a1 	movw	r0, #4001	; 0xfa1
    920a:	4b7b      	ldr	r3, [pc, #492]	; (93f8 <application_udp_appcall+0x238>)
    920c:	4798      	blx	r3
    920e:	4285      	cmp	r5, r0
    9210:	d079      	beq.n	9306 <application_udp_appcall+0x146>
		} else if (uip_conn->lport == htons(CARDB_UDPSOCKET)) {
    9212:	4b78      	ldr	r3, [pc, #480]	; (93f4 <application_udp_appcall+0x234>)
    9214:	681b      	ldr	r3, [r3, #0]
    9216:	889d      	ldrh	r5, [r3, #4]
    9218:	f640 70a2 	movw	r0, #4002	; 0xfa2
    921c:	4b76      	ldr	r3, [pc, #472]	; (93f8 <application_udp_appcall+0x238>)
    921e:	4798      	blx	r3
    9220:	4285      	cmp	r5, r0
    9222:	f000 8086 	beq.w	9332 <application_udp_appcall+0x172>
		} else if (uip_conn->lport == htons(RING_MANAGEMENT_SOCKET)) {
    9226:	4b73      	ldr	r3, [pc, #460]	; (93f4 <application_udp_appcall+0x234>)
    9228:	681b      	ldr	r3, [r3, #0]
    922a:	889c      	ldrh	r4, [r3, #4]
    922c:	f640 70a3 	movw	r0, #4003	; 0xfa3
    9230:	4b71      	ldr	r3, [pc, #452]	; (93f8 <application_udp_appcall+0x238>)
    9232:	4798      	blx	r3
    9234:	4284      	cmp	r4, r0
    9236:	d1ce      	bne.n	91d6 <application_udp_appcall+0x16>
			if (!(((CONFIG *)&settings_buffer)->loop_basestation)) {
    9238:	4b70      	ldr	r3, [pc, #448]	; (93fc <application_udp_appcall+0x23c>)
    923a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
    923e:	2b00      	cmp	r3, #0
    9240:	d1c9      	bne.n	91d6 <application_udp_appcall+0x16>
				writeKSZreg(SPI_KSZ8794_PORT1CONTROL2, 0x07);
    9242:	2107      	movs	r1, #7
    9244:	2012      	movs	r0, #18
    9246:	4c6e      	ldr	r4, [pc, #440]	; (9400 <application_udp_appcall+0x240>)
    9248:	47a0      	blx	r4
				writeKSZreg(SPI_KSZ8794_PORT2CONTROL2, 0x07);
    924a:	2107      	movs	r1, #7
    924c:	2022      	movs	r0, #34	; 0x22
    924e:	47a0      	blx	r4
				writeKSZreg(SPI_KSZ8794_GLOBAL0, 0x2D);
    9250:	212d      	movs	r1, #45	; 0x2d
    9252:	2002      	movs	r0, #2
    9254:	47a0      	blx	r4
				delay_us(250);
    9256:	20fa      	movs	r0, #250	; 0xfa
    9258:	4b6a      	ldr	r3, [pc, #424]	; (9404 <application_udp_appcall+0x244>)
    925a:	4798      	blx	r3
				writeKSZreg(SPI_KSZ8794_PORT1CONTROL2, 0x06);
    925c:	2106      	movs	r1, #6
    925e:	2012      	movs	r0, #18
    9260:	47a0      	blx	r4
				writeKSZreg(SPI_KSZ8794_PORT2CONTROL2, 0x06);
    9262:	2106      	movs	r1, #6
    9264:	2022      	movs	r0, #34	; 0x22
    9266:	47a0      	blx	r4
				xprintf("Broadcast Table [FLUSH] UDP packet arrived...\r\n");
    9268:	4867      	ldr	r0, [pc, #412]	; (9408 <application_udp_appcall+0x248>)
    926a:	4b68      	ldr	r3, [pc, #416]	; (940c <application_udp_appcall+0x24c>)
    926c:	4798      	blx	r3
    926e:	e7b2      	b.n	91d6 <application_udp_appcall+0x16>
			memmove(PLAINTEXT, CIPHERTEXT, len);																	// If no encryption compiled, then just copy over plain-text from [UDP] buffer
    9270:	4622      	mov	r2, r4
    9272:	4b67      	ldr	r3, [pc, #412]	; (9410 <application_udp_appcall+0x250>)
    9274:	6819      	ldr	r1, [r3, #0]
    9276:	4867      	ldr	r0, [pc, #412]	; (9414 <application_udp_appcall+0x254>)
    9278:	4b67      	ldr	r3, [pc, #412]	; (9418 <application_udp_appcall+0x258>)
    927a:	4798      	blx	r3
			if ((len == 40) && (PLAINTEXT[0] == ID_IDENT_1) && (PLAINTEXT[1] == ID_IDENT_2) && (PLAINTEXT[2] == ID_IDENT_3) && (PLAINTEXT[3] == ID_IDENT_4)) {
    927c:	2c28      	cmp	r4, #40	; 0x28
    927e:	d1aa      	bne.n	91d6 <application_udp_appcall+0x16>
    9280:	4b64      	ldr	r3, [pc, #400]	; (9414 <application_udp_appcall+0x254>)
    9282:	781b      	ldrb	r3, [r3, #0]
    9284:	2b37      	cmp	r3, #55	; 0x37
    9286:	d1a6      	bne.n	91d6 <application_udp_appcall+0x16>
    9288:	4b62      	ldr	r3, [pc, #392]	; (9414 <application_udp_appcall+0x254>)
    928a:	785b      	ldrb	r3, [r3, #1]
    928c:	2b9f      	cmp	r3, #159	; 0x9f
    928e:	d1a2      	bne.n	91d6 <application_udp_appcall+0x16>
    9290:	4b60      	ldr	r3, [pc, #384]	; (9414 <application_udp_appcall+0x254>)
    9292:	789b      	ldrb	r3, [r3, #2]
    9294:	2b1b      	cmp	r3, #27
    9296:	d19e      	bne.n	91d6 <application_udp_appcall+0x16>
    9298:	4b5e      	ldr	r3, [pc, #376]	; (9414 <application_udp_appcall+0x254>)
    929a:	78db      	ldrb	r3, [r3, #3]
    929c:	2b61      	cmp	r3, #97	; 0x61
    929e:	d19a      	bne.n	91d6 <application_udp_appcall+0x16>
				memmove(((CONFIG *)&settings_buffer)->name, &PLAINTEXT[4], 33);
    92a0:	4b5e      	ldr	r3, [pc, #376]	; (941c <application_udp_appcall+0x25c>)
    92a2:	4a5f      	ldr	r2, [pc, #380]	; (9420 <application_udp_appcall+0x260>)
    92a4:	f103 0120 	add.w	r1, r3, #32
    92a8:	681e      	ldr	r6, [r3, #0]
    92aa:	685d      	ldr	r5, [r3, #4]
    92ac:	689c      	ldr	r4, [r3, #8]
    92ae:	68d8      	ldr	r0, [r3, #12]
    92b0:	6016      	str	r6, [r2, #0]
    92b2:	6055      	str	r5, [r2, #4]
    92b4:	6094      	str	r4, [r2, #8]
    92b6:	60d0      	str	r0, [r2, #12]
    92b8:	3310      	adds	r3, #16
    92ba:	3210      	adds	r2, #16
    92bc:	428b      	cmp	r3, r1
    92be:	d1f3      	bne.n	92a8 <application_udp_appcall+0xe8>
    92c0:	781b      	ldrb	r3, [r3, #0]
    92c2:	7013      	strb	r3, [r2, #0]
				((CONFIG *)&settings_buffer)->gain_cardA = PLAINTEXT[37];
    92c4:	484d      	ldr	r0, [pc, #308]	; (93fc <application_udp_appcall+0x23c>)
    92c6:	4b53      	ldr	r3, [pc, #332]	; (9414 <application_udp_appcall+0x254>)
    92c8:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
    92cc:	f880 2029 	strb.w	r2, [r0, #41]	; 0x29
				((CONFIG *)&settings_buffer)->gain_cardB = PLAINTEXT[38];
    92d0:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
    92d4:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
				((CONFIG *)&settings_buffer)->loop_basestation = PLAINTEXT[39];
    92d8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
    92dc:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
				if (EEprom_settings(settings_buffer, SETTING_STRUCTURE_SIZE, 1) != ERR_NONE) {
    92e0:	2201      	movs	r2, #1
    92e2:	2180      	movs	r1, #128	; 0x80
    92e4:	4b4f      	ldr	r3, [pc, #316]	; (9424 <application_udp_appcall+0x264>)
    92e6:	4798      	blx	r3
    92e8:	b148      	cbz	r0, 92fe <application_udp_appcall+0x13e>
					xprintf("MultiSense [configuration ERROR READING]\r\n");
    92ea:	484f      	ldr	r0, [pc, #316]	; (9428 <application_udp_appcall+0x268>)
    92ec:	4b47      	ldr	r3, [pc, #284]	; (940c <application_udp_appcall+0x24c>)
    92ee:	4798      	blx	r3
				refresh_gain = 1;
    92f0:	2201      	movs	r2, #1
    92f2:	4b4e      	ldr	r3, [pc, #312]	; (942c <application_udp_appcall+0x26c>)
    92f4:	701a      	strb	r2, [r3, #0]
				xprintf("Global settings packet received...\r\n");	
    92f6:	484e      	ldr	r0, [pc, #312]	; (9430 <application_udp_appcall+0x270>)
    92f8:	4b44      	ldr	r3, [pc, #272]	; (940c <application_udp_appcall+0x24c>)
    92fa:	4798      	blx	r3
    92fc:	e76b      	b.n	91d6 <application_udp_appcall+0x16>
					xprintf("MultiSense [UPDATED <ID> configuration WRITTEN]\r\n");
    92fe:	484d      	ldr	r0, [pc, #308]	; (9434 <application_udp_appcall+0x274>)
    9300:	4b42      	ldr	r3, [pc, #264]	; (940c <application_udp_appcall+0x24c>)
    9302:	4798      	blx	r3
    9304:	e7f4      	b.n	92f0 <application_udp_appcall+0x130>
			memmove(PLAINTEXT, CIPHERTEXT, len);																	// If no encryption compiled, then just copy over plain-text from [UDP] buffer
    9306:	4622      	mov	r2, r4
    9308:	4b41      	ldr	r3, [pc, #260]	; (9410 <application_udp_appcall+0x250>)
    930a:	6819      	ldr	r1, [r3, #0]
    930c:	4841      	ldr	r0, [pc, #260]	; (9414 <application_udp_appcall+0x254>)
    930e:	4b42      	ldr	r3, [pc, #264]	; (9418 <application_udp_appcall+0x258>)
    9310:	4798      	blx	r3
			switch (cardA_type) {
    9312:	4b49      	ldr	r3, [pc, #292]	; (9438 <application_udp_appcall+0x278>)
    9314:	781b      	ldrb	r3, [r3, #0]
    9316:	2b02      	cmp	r3, #2
    9318:	f47f af5d 	bne.w	91d6 <application_udp_appcall+0x16>
				if (len == 1) {
    931c:	2c01      	cmp	r4, #1
    931e:	f47f af5a 	bne.w	91d6 <application_udp_appcall+0x16>
					miniIO_A_relay = PLAINTEXT[0];
    9322:	4b3c      	ldr	r3, [pc, #240]	; (9414 <application_udp_appcall+0x254>)
    9324:	781a      	ldrb	r2, [r3, #0]
    9326:	4b45      	ldr	r3, [pc, #276]	; (943c <application_udp_appcall+0x27c>)
    9328:	701a      	strb	r2, [r3, #0]
					xprintf("CardA Mini-IO packet received...\r\n");
    932a:	4845      	ldr	r0, [pc, #276]	; (9440 <application_udp_appcall+0x280>)
    932c:	4b37      	ldr	r3, [pc, #220]	; (940c <application_udp_appcall+0x24c>)
    932e:	4798      	blx	r3
    9330:	e751      	b.n	91d6 <application_udp_appcall+0x16>
			memmove(PLAINTEXT, CIPHERTEXT, len);																	// If no encryption compiled, then just copy over plain-text from [UDP] buffer
    9332:	4622      	mov	r2, r4
    9334:	4b36      	ldr	r3, [pc, #216]	; (9410 <application_udp_appcall+0x250>)
    9336:	6819      	ldr	r1, [r3, #0]
    9338:	4836      	ldr	r0, [pc, #216]	; (9414 <application_udp_appcall+0x254>)
    933a:	4b37      	ldr	r3, [pc, #220]	; (9418 <application_udp_appcall+0x258>)
    933c:	4798      	blx	r3
			switch (cardB_type) {
    933e:	4b41      	ldr	r3, [pc, #260]	; (9444 <application_udp_appcall+0x284>)
    9340:	781b      	ldrb	r3, [r3, #0]
    9342:	2b02      	cmp	r3, #2
    9344:	f47f af47 	bne.w	91d6 <application_udp_appcall+0x16>
				if (len == 1) {
    9348:	2c01      	cmp	r4, #1
    934a:	f47f af44 	bne.w	91d6 <application_udp_appcall+0x16>
					miniIO_B_relay = PLAINTEXT[0];
    934e:	4b31      	ldr	r3, [pc, #196]	; (9414 <application_udp_appcall+0x254>)
    9350:	781a      	ldrb	r2, [r3, #0]
    9352:	4b3d      	ldr	r3, [pc, #244]	; (9448 <application_udp_appcall+0x288>)
    9354:	701a      	strb	r2, [r3, #0]
					xprintf("CardB Mini-IO packet received...\r\n");
    9356:	483d      	ldr	r0, [pc, #244]	; (944c <application_udp_appcall+0x28c>)
    9358:	4b2c      	ldr	r3, [pc, #176]	; (940c <application_udp_appcall+0x24c>)
    935a:	4798      	blx	r3
    935c:	e73b      	b.n	91d6 <application_udp_appcall+0x16>
		if (uip_conn->lport == htons(MAIN_UDPSOCKET)) {
    935e:	4b25      	ldr	r3, [pc, #148]	; (93f4 <application_udp_appcall+0x234>)
    9360:	681b      	ldr	r3, [r3, #0]
    9362:	889c      	ldrh	r4, [r3, #4]
    9364:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
    9368:	4b23      	ldr	r3, [pc, #140]	; (93f8 <application_udp_appcall+0x238>)
    936a:	4798      	blx	r3
    936c:	4284      	cmp	r4, r0
    936e:	d075      	beq.n	945c <application_udp_appcall+0x29c>
		} else if (uip_conn->lport == htons(CARDA_UDPSOCKET)) {
    9370:	4b20      	ldr	r3, [pc, #128]	; (93f4 <application_udp_appcall+0x234>)
    9372:	681b      	ldr	r3, [r3, #0]
    9374:	889c      	ldrh	r4, [r3, #4]
    9376:	f640 70a1 	movw	r0, #4001	; 0xfa1
    937a:	4b1f      	ldr	r3, [pc, #124]	; (93f8 <application_udp_appcall+0x238>)
    937c:	4798      	blx	r3
    937e:	4284      	cmp	r4, r0
    9380:	f000 80f3 	beq.w	956a <application_udp_appcall+0x3aa>
		} else if (uip_conn->lport == htons(CARDB_UDPSOCKET)) {
    9384:	4b1b      	ldr	r3, [pc, #108]	; (93f4 <application_udp_appcall+0x234>)
    9386:	681b      	ldr	r3, [r3, #0]
    9388:	889c      	ldrh	r4, [r3, #4]
    938a:	f640 70a2 	movw	r0, #4002	; 0xfa2
    938e:	4b1a      	ldr	r3, [pc, #104]	; (93f8 <application_udp_appcall+0x238>)
    9390:	4798      	blx	r3
    9392:	4284      	cmp	r4, r0
    9394:	f000 8154 	beq.w	9640 <application_udp_appcall+0x480>
		} else if (uip_conn->lport == htons(RING_MANAGEMENT_SOCKET)) {
    9398:	4b16      	ldr	r3, [pc, #88]	; (93f4 <application_udp_appcall+0x234>)
    939a:	681b      	ldr	r3, [r3, #0]
    939c:	889c      	ldrh	r4, [r3, #4]
    939e:	f640 70a3 	movw	r0, #4003	; 0xfa3
    93a2:	4b15      	ldr	r3, [pc, #84]	; (93f8 <application_udp_appcall+0x238>)
    93a4:	4798      	blx	r3
    93a6:	4284      	cmp	r4, r0
    93a8:	f47f af1b 	bne.w	91e2 <application_udp_appcall+0x22>
			if ((send_relearn_udp) && (((CONFIG *)&settings_buffer)->loop_basestation)) {
    93ac:	4b28      	ldr	r3, [pc, #160]	; (9450 <application_udp_appcall+0x290>)
    93ae:	781b      	ldrb	r3, [r3, #0]
    93b0:	2b00      	cmp	r3, #0
    93b2:	f43f af16 	beq.w	91e2 <application_udp_appcall+0x22>
    93b6:	4b11      	ldr	r3, [pc, #68]	; (93fc <application_udp_appcall+0x23c>)
    93b8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
    93bc:	2b00      	cmp	r3, #0
    93be:	f43f af10 	beq.w	91e2 <application_udp_appcall+0x22>
				PLAINTEXT[0] = 0;
    93c2:	2400      	movs	r4, #0
    93c4:	4b13      	ldr	r3, [pc, #76]	; (9414 <application_udp_appcall+0x254>)
    93c6:	701c      	strb	r4, [r3, #0]
				memmove(CIPHERTEXT, PLAINTEXT, 1);
    93c8:	4b11      	ldr	r3, [pc, #68]	; (9410 <application_udp_appcall+0x250>)
    93ca:	681a      	ldr	r2, [r3, #0]
    93cc:	7014      	strb	r4, [r2, #0]
				uip_udp_send(1);
    93ce:	2101      	movs	r1, #1
    93d0:	6818      	ldr	r0, [r3, #0]
    93d2:	4b20      	ldr	r3, [pc, #128]	; (9454 <application_udp_appcall+0x294>)
    93d4:	4798      	blx	r3
				send_relearn_udp = 0;
    93d6:	4b1e      	ldr	r3, [pc, #120]	; (9450 <application_udp_appcall+0x290>)
    93d8:	701c      	strb	r4, [r3, #0]
				xprintf("Topology update packet send...\r\n");
    93da:	481f      	ldr	r0, [pc, #124]	; (9458 <application_udp_appcall+0x298>)
    93dc:	4b0b      	ldr	r3, [pc, #44]	; (940c <application_udp_appcall+0x24c>)
    93de:	4798      	blx	r3
    93e0:	e6ff      	b.n	91e2 <application_udp_appcall+0x22>
    93e2:	bf00      	nop
    93e4:	20007fbf 	.word	0x20007fbf
    93e8:	2000858c 	.word	0x2000858c
    93ec:	2000757d 	.word	0x2000757d
    93f0:	20008580 	.word	0x20008580
    93f4:	20008598 	.word	0x20008598
    93f8:	0000c889 	.word	0x0000c889
    93fc:	20007f2c 	.word	0x20007f2c
    9400:	0000d995 	.word	0x0000d995
    9404:	0000152d 	.word	0x0000152d
    9408:	00010128 	.word	0x00010128
    940c:	0000031d 	.word	0x0000031d
    9410:	20008594 	.word	0x20008594
    9414:	2000786c 	.word	0x2000786c
    9418:	0000da81 	.word	0x0000da81
    941c:	20007870 	.word	0x20007870
    9420:	20007f34 	.word	0x20007f34
    9424:	0000d8c9 	.word	0x0000d8c9
    9428:	0000ff94 	.word	0x0000ff94
    942c:	20008561 	.word	0x20008561
    9430:	000100b8 	.word	0x000100b8
    9434:	00010084 	.word	0x00010084
    9438:	20007c6e 	.word	0x20007c6e
    943c:	20007fb4 	.word	0x20007fb4
    9440:	000100e0 	.word	0x000100e0
    9444:	20008564 	.word	0x20008564
    9448:	20007f1c 	.word	0x20007f1c
    944c:	00010104 	.word	0x00010104
    9450:	20008275 	.word	0x20008275
    9454:	0000c895 	.word	0x0000c895
    9458:	000101f4 	.word	0x000101f4
			if (readenvironment == 2) {
    945c:	4b8a      	ldr	r3, [pc, #552]	; (9688 <application_udp_appcall+0x4c8>)
    945e:	781b      	ldrb	r3, [r3, #0]
    9460:	2b02      	cmp	r3, #2
    9462:	f47f aebe 	bne.w	91e2 <application_udp_appcall+0x22>
				PLAINTEXT[0] = (uint8_t)(((((CONFIG *)&settings_buffer)->ID) >> 24) & 0x00FF);
    9466:	4989      	ldr	r1, [pc, #548]	; (968c <application_udp_appcall+0x4cc>)
    9468:	6aca      	ldr	r2, [r1, #44]	; 0x2c
    946a:	4b89      	ldr	r3, [pc, #548]	; (9690 <application_udp_appcall+0x4d0>)
    946c:	0e10      	lsrs	r0, r2, #24
    946e:	7018      	strb	r0, [r3, #0]
				PLAINTEXT[1] = (uint8_t)(((((CONFIG *)&settings_buffer)->ID) >> 16) & 0x00FF);
    9470:	0c10      	lsrs	r0, r2, #16
    9472:	7058      	strb	r0, [r3, #1]
				PLAINTEXT[2] = (uint8_t)(((((CONFIG *)&settings_buffer)->ID) >> 8) & 0x00FF);
    9474:	0a10      	lsrs	r0, r2, #8
    9476:	7098      	strb	r0, [r3, #2]
				PLAINTEXT[3] = (uint8_t)((((CONFIG *)&settings_buffer)->ID) & 0x00FF);
    9478:	70da      	strb	r2, [r3, #3]
				memmove(&PLAINTEXT[4], ((CONFIG *)&settings_buffer)->name, 33);
    947a:	f101 0208 	add.w	r2, r1, #8
    947e:	3304      	adds	r3, #4
    9480:	3128      	adds	r1, #40	; 0x28
    9482:	6816      	ldr	r6, [r2, #0]
    9484:	6855      	ldr	r5, [r2, #4]
    9486:	6894      	ldr	r4, [r2, #8]
    9488:	68d0      	ldr	r0, [r2, #12]
    948a:	601e      	str	r6, [r3, #0]
    948c:	605d      	str	r5, [r3, #4]
    948e:	609c      	str	r4, [r3, #8]
    9490:	60d8      	str	r0, [r3, #12]
    9492:	3210      	adds	r2, #16
    9494:	3310      	adds	r3, #16
    9496:	428a      	cmp	r2, r1
    9498:	d1f3      	bne.n	9482 <application_udp_appcall+0x2c2>
    949a:	7812      	ldrb	r2, [r2, #0]
    949c:	701a      	strb	r2, [r3, #0]
				PLAINTEXT[37] = ((CONFIG *)&settings_buffer)->gain_cardA;
    949e:	497c      	ldr	r1, [pc, #496]	; (9690 <application_udp_appcall+0x4d0>)
    94a0:	4b7a      	ldr	r3, [pc, #488]	; (968c <application_udp_appcall+0x4cc>)
    94a2:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
    94a6:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
				PLAINTEXT[38] = ((CONFIG *)&settings_buffer)->gain_cardB;
    94aa:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
    94ae:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
				PLAINTEXT[39] = ((CONFIG *)&settings_buffer)->loop_basestation;
    94b2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
    94b6:	f881 3027 	strb.w	r3, [r1, #39]	; 0x27
				PLAINTEXT[40] = readdata_water1;
    94ba:	4b76      	ldr	r3, [pc, #472]	; (9694 <application_udp_appcall+0x4d4>)
    94bc:	781b      	ldrb	r3, [r3, #0]
    94be:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
				PLAINTEXT[41] = readdata_water2;
    94c2:	4b75      	ldr	r3, [pc, #468]	; (9698 <application_udp_appcall+0x4d8>)
    94c4:	781b      	ldrb	r3, [r3, #0]
    94c6:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
				PLAINTEXT[42] = highvoltage;
    94ca:	4b74      	ldr	r3, [pc, #464]	; (969c <application_udp_appcall+0x4dc>)
    94cc:	781b      	ldrb	r3, [r3, #0]
    94ce:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
				PLAINTEXT[43] = readdata_tempmoisture[0];
    94d2:	4b73      	ldr	r3, [pc, #460]	; (96a0 <application_udp_appcall+0x4e0>)
    94d4:	781a      	ldrb	r2, [r3, #0]
    94d6:	f881 202b 	strb.w	r2, [r1, #43]	; 0x2b
				PLAINTEXT[44] = readdata_tempmoisture[1];
    94da:	785a      	ldrb	r2, [r3, #1]
    94dc:	f881 202c 	strb.w	r2, [r1, #44]	; 0x2c
				PLAINTEXT[45] = readdata_tempmoisture[2];
    94e0:	789a      	ldrb	r2, [r3, #2]
    94e2:	f881 202d 	strb.w	r2, [r1, #45]	; 0x2d
				PLAINTEXT[46] = readdata_tempmoisture[3];
    94e6:	78db      	ldrb	r3, [r3, #3]
    94e8:	f881 302e 	strb.w	r3, [r1, #46]	; 0x2e
				PLAINTEXT[47] = tamper;
    94ec:	4b6d      	ldr	r3, [pc, #436]	; (96a4 <application_udp_appcall+0x4e4>)
    94ee:	781b      	ldrb	r3, [r3, #0]
    94f0:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
				PLAINTEXT[48] = link_port1;
    94f4:	4b6c      	ldr	r3, [pc, #432]	; (96a8 <application_udp_appcall+0x4e8>)
    94f6:	781b      	ldrb	r3, [r3, #0]
    94f8:	f881 3030 	strb.w	r3, [r1, #48]	; 0x30
				PLAINTEXT[49] = link_port2;
    94fc:	4b6b      	ldr	r3, [pc, #428]	; (96ac <application_udp_appcall+0x4ec>)
    94fe:	781b      	ldrb	r3, [r3, #0]
    9500:	f881 3031 	strb.w	r3, [r1, #49]	; 0x31
				PLAINTEXT[50] = link_port3;
    9504:	4b6a      	ldr	r3, [pc, #424]	; (96b0 <application_udp_appcall+0x4f0>)
    9506:	781b      	ldrb	r3, [r3, #0]
    9508:	f881 3032 	strb.w	r3, [r1, #50]	; 0x32
				PLAINTEXT[51] = cardA_type;
    950c:	4b69      	ldr	r3, [pc, #420]	; (96b4 <application_udp_appcall+0x4f4>)
    950e:	781b      	ldrb	r3, [r3, #0]
    9510:	f881 3033 	strb.w	r3, [r1, #51]	; 0x33
				PLAINTEXT[52] = cardB_type;
    9514:	4b68      	ldr	r3, [pc, #416]	; (96b8 <application_udp_appcall+0x4f8>)
    9516:	781b      	ldrb	r3, [r3, #0]
    9518:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
				PLAINTEXT[53] = ring_broken;
    951c:	4b67      	ldr	r3, [pc, #412]	; (96bc <application_udp_appcall+0x4fc>)
    951e:	781b      	ldrb	r3, [r3, #0]
    9520:	f881 3035 	strb.w	r3, [r1, #53]	; 0x35
				PLAINTEXT[54] = MULTISENSE_FIRMWARE_MAJOR;
    9524:	2400      	movs	r4, #0
    9526:	f881 4036 	strb.w	r4, [r1, #54]	; 0x36
				PLAINTEXT[55] = MULTISENSE_FIRMWARE_MINOR;
    952a:	2301      	movs	r3, #1
    952c:	f881 3037 	strb.w	r3, [r1, #55]	; 0x37
				PLAINTEXT[56] = ID_IDENT_1;
    9530:	2337      	movs	r3, #55	; 0x37
    9532:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
				PLAINTEXT[57] = ID_IDENT_2;
    9536:	239f      	movs	r3, #159	; 0x9f
    9538:	f881 3039 	strb.w	r3, [r1, #57]	; 0x39
				PLAINTEXT[58] = ID_IDENT_3;
    953c:	231b      	movs	r3, #27
    953e:	f881 303a 	strb.w	r3, [r1, #58]	; 0x3a
				PLAINTEXT[59] = ID_IDENT_4;
    9542:	2361      	movs	r3, #97	; 0x61
    9544:	f881 303b 	strb.w	r3, [r1, #59]	; 0x3b
				PLAINTEXT[60] = 0;
    9548:	f881 403c 	strb.w	r4, [r1, #60]	; 0x3c
				memmove(CIPHERTEXT, PLAINTEXT, 61);														// If no encryption compiled, then just copy over plain-text into [UDP] buffer
    954c:	4d5c      	ldr	r5, [pc, #368]	; (96c0 <application_udp_appcall+0x500>)
    954e:	223d      	movs	r2, #61	; 0x3d
    9550:	6828      	ldr	r0, [r5, #0]
    9552:	4b5c      	ldr	r3, [pc, #368]	; (96c4 <application_udp_appcall+0x504>)
    9554:	4798      	blx	r3
				uip_udp_send(61);
    9556:	213d      	movs	r1, #61	; 0x3d
    9558:	6828      	ldr	r0, [r5, #0]
    955a:	4b5b      	ldr	r3, [pc, #364]	; (96c8 <application_udp_appcall+0x508>)
    955c:	4798      	blx	r3
				readenvironment = 0;
    955e:	4b4a      	ldr	r3, [pc, #296]	; (9688 <application_udp_appcall+0x4c8>)
    9560:	701c      	strb	r4, [r3, #0]
				xprintf("Hardware packet send...\r\n");
    9562:	485a      	ldr	r0, [pc, #360]	; (96cc <application_udp_appcall+0x50c>)
    9564:	4b5a      	ldr	r3, [pc, #360]	; (96d0 <application_udp_appcall+0x510>)
    9566:	4798      	blx	r3
    9568:	bd70      	pop	{r4, r5, r6, pc}
			switch (cardA_type) {
    956a:	4b52      	ldr	r3, [pc, #328]	; (96b4 <application_udp_appcall+0x4f4>)
    956c:	781b      	ldrb	r3, [r3, #0]
    956e:	2b01      	cmp	r3, #1
    9570:	d01f      	beq.n	95b2 <application_udp_appcall+0x3f2>
    9572:	2b02      	cmp	r3, #2
    9574:	f47f ae35 	bne.w	91e2 <application_udp_appcall+0x22>
				PLAINTEXT[0] = (uint8_t)miniIO_A0_adcH;
    9578:	4945      	ldr	r1, [pc, #276]	; (9690 <application_udp_appcall+0x4d0>)
    957a:	4b56      	ldr	r3, [pc, #344]	; (96d4 <application_udp_appcall+0x514>)
    957c:	781b      	ldrb	r3, [r3, #0]
    957e:	700b      	strb	r3, [r1, #0]
				PLAINTEXT[1] = (uint8_t)miniIO_A0_adcL;
    9580:	4b55      	ldr	r3, [pc, #340]	; (96d8 <application_udp_appcall+0x518>)
    9582:	781b      	ldrb	r3, [r3, #0]
    9584:	704b      	strb	r3, [r1, #1]
				PLAINTEXT[2] = (uint8_t)miniIO_A1_adcH;
    9586:	4b55      	ldr	r3, [pc, #340]	; (96dc <application_udp_appcall+0x51c>)
    9588:	781b      	ldrb	r3, [r3, #0]
    958a:	708b      	strb	r3, [r1, #2]
				PLAINTEXT[3] = (uint8_t)miniIO_A1_adcL;
    958c:	4b54      	ldr	r3, [pc, #336]	; (96e0 <application_udp_appcall+0x520>)
    958e:	781b      	ldrb	r3, [r3, #0]
    9590:	70cb      	strb	r3, [r1, #3]
				PLAINTEXT[4] = (uint8_t)miniIO_A_inputs;
    9592:	4b54      	ldr	r3, [pc, #336]	; (96e4 <application_udp_appcall+0x524>)
    9594:	781b      	ldrb	r3, [r3, #0]
    9596:	710b      	strb	r3, [r1, #4]
				memmove(CIPHERTEXT, PLAINTEXT, 5);													// If no encryption compiled, then just copy over plain-text into [UDP] buffer
    9598:	4c49      	ldr	r4, [pc, #292]	; (96c0 <application_udp_appcall+0x500>)
    959a:	2205      	movs	r2, #5
    959c:	6820      	ldr	r0, [r4, #0]
    959e:	4b49      	ldr	r3, [pc, #292]	; (96c4 <application_udp_appcall+0x504>)
    95a0:	4798      	blx	r3
				uip_udp_send(3);
    95a2:	2103      	movs	r1, #3
    95a4:	6820      	ldr	r0, [r4, #0]
    95a6:	4b48      	ldr	r3, [pc, #288]	; (96c8 <application_udp_appcall+0x508>)
    95a8:	4798      	blx	r3
				xprintf("CardA Mini-IO packet send...\r\n");	
    95aa:	484f      	ldr	r0, [pc, #316]	; (96e8 <application_udp_appcall+0x528>)
    95ac:	4b48      	ldr	r3, [pc, #288]	; (96d0 <application_udp_appcall+0x510>)
    95ae:	4798      	blx	r3
				break;
    95b0:	bd70      	pop	{r4, r5, r6, pc}
				if ((!sentA) && (card_sampleindex == SAMPLE_BUFFER_SIZE)) {
    95b2:	4b4e      	ldr	r3, [pc, #312]	; (96ec <application_udp_appcall+0x52c>)
    95b4:	781b      	ldrb	r3, [r3, #0]
    95b6:	2b00      	cmp	r3, #0
    95b8:	f47f ae13 	bne.w	91e2 <application_udp_appcall+0x22>
    95bc:	4b4c      	ldr	r3, [pc, #304]	; (96f0 <application_udp_appcall+0x530>)
    95be:	681b      	ldr	r3, [r3, #0]
    95c0:	f5b3 7f2b 	cmp.w	r3, #684	; 0x2ac
    95c4:	f47f ae0d 	bne.w	91e2 <application_udp_appcall+0x22>
					memmove(&PLAINTEXT[0], cardAch0_samplebuffer, SAMPLE_BUFFER_SIZE);
    95c8:	4c31      	ldr	r4, [pc, #196]	; (9690 <application_udp_appcall+0x4d0>)
    95ca:	f44f 762b 	mov.w	r6, #684	; 0x2ac
    95ce:	4632      	mov	r2, r6
    95d0:	4948      	ldr	r1, [pc, #288]	; (96f4 <application_udp_appcall+0x534>)
    95d2:	4620      	mov	r0, r4
    95d4:	4d48      	ldr	r5, [pc, #288]	; (96f8 <application_udp_appcall+0x538>)
    95d6:	47a8      	blx	r5
					memmove(&PLAINTEXT[SAMPLE_BUFFER_SIZE], cardAch1_samplebuffer, SAMPLE_BUFFER_SIZE);
    95d8:	4632      	mov	r2, r6
    95da:	4948      	ldr	r1, [pc, #288]	; (96fc <application_udp_appcall+0x53c>)
    95dc:	19a0      	adds	r0, r4, r6
    95de:	47a8      	blx	r5
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 0] = cardAch2_samplebuffer;
    95e0:	4b47      	ldr	r3, [pc, #284]	; (9700 <application_udp_appcall+0x540>)
    95e2:	781b      	ldrb	r3, [r3, #0]
    95e4:	f884 3558 	strb.w	r3, [r4, #1368]	; 0x558
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 1] = cardAch3_samplebuffer;
    95e8:	4b46      	ldr	r3, [pc, #280]	; (9704 <application_udp_appcall+0x544>)
    95ea:	781b      	ldrb	r3, [r3, #0]
    95ec:	f884 3559 	strb.w	r3, [r4, #1369]	; 0x559
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 2] = ID_IDENT_1;
    95f0:	2337      	movs	r3, #55	; 0x37
    95f2:	f884 355a 	strb.w	r3, [r4, #1370]	; 0x55a
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 3] = ID_IDENT_2;
    95f6:	239f      	movs	r3, #159	; 0x9f
    95f8:	f884 355b 	strb.w	r3, [r4, #1371]	; 0x55b
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 4] = ID_IDENT_3;
    95fc:	231b      	movs	r3, #27
    95fe:	f884 355c 	strb.w	r3, [r4, #1372]	; 0x55c
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 5] = ID_IDENT_4;
    9602:	2361      	movs	r3, #97	; 0x61
    9604:	f884 355d 	strb.w	r3, [r4, #1373]	; 0x55d
					memmove(CIPHERTEXT, PLAINTEXT, (SAMPLE_BUFFER_SIZE * 2) + 6);													// If no encryption compiled, then just copy over plain-text into [UDP] buffer
    9608:	4d2d      	ldr	r5, [pc, #180]	; (96c0 <application_udp_appcall+0x500>)
    960a:	f240 525e 	movw	r2, #1374	; 0x55e
    960e:	4621      	mov	r1, r4
    9610:	6828      	ldr	r0, [r5, #0]
    9612:	4b2c      	ldr	r3, [pc, #176]	; (96c4 <application_udp_appcall+0x504>)
    9614:	4798      	blx	r3
					uip_udp_send((SAMPLE_BUFFER_SIZE * 2) + 6);
    9616:	f240 515e 	movw	r1, #1374	; 0x55e
    961a:	6828      	ldr	r0, [r5, #0]
    961c:	4b2a      	ldr	r3, [pc, #168]	; (96c8 <application_udp_appcall+0x508>)
    961e:	4798      	blx	r3
					if (sentB) {
    9620:	4b39      	ldr	r3, [pc, #228]	; (9708 <application_udp_appcall+0x548>)
    9622:	781b      	ldrb	r3, [r3, #0]
    9624:	b143      	cbz	r3, 9638 <application_udp_appcall+0x478>
						sentB = 0;
    9626:	2300      	movs	r3, #0
    9628:	4a37      	ldr	r2, [pc, #220]	; (9708 <application_udp_appcall+0x548>)
    962a:	7013      	strb	r3, [r2, #0]
						card_sampleindex = 0;
    962c:	4a30      	ldr	r2, [pc, #192]	; (96f0 <application_udp_appcall+0x530>)
    962e:	6013      	str	r3, [r2, #0]
					xprintf("CardA VibraTek packet send...\r\n");
    9630:	4836      	ldr	r0, [pc, #216]	; (970c <application_udp_appcall+0x54c>)
    9632:	4b27      	ldr	r3, [pc, #156]	; (96d0 <application_udp_appcall+0x510>)
    9634:	4798      	blx	r3
    9636:	bd70      	pop	{r4, r5, r6, pc}
						sentA = 1;
    9638:	2201      	movs	r2, #1
    963a:	4b2c      	ldr	r3, [pc, #176]	; (96ec <application_udp_appcall+0x52c>)
    963c:	701a      	strb	r2, [r3, #0]
    963e:	e7f7      	b.n	9630 <application_udp_appcall+0x470>
			switch (cardB_type) {
    9640:	4b1d      	ldr	r3, [pc, #116]	; (96b8 <application_udp_appcall+0x4f8>)
    9642:	781b      	ldrb	r3, [r3, #0]
    9644:	2b01      	cmp	r3, #1
    9646:	d06f      	beq.n	9728 <application_udp_appcall+0x568>
    9648:	2b02      	cmp	r3, #2
    964a:	f47f adca 	bne.w	91e2 <application_udp_appcall+0x22>
				PLAINTEXT[0] = (uint8_t)miniIO_B0_adcH;
    964e:	4910      	ldr	r1, [pc, #64]	; (9690 <application_udp_appcall+0x4d0>)
    9650:	4b2f      	ldr	r3, [pc, #188]	; (9710 <application_udp_appcall+0x550>)
    9652:	781b      	ldrb	r3, [r3, #0]
    9654:	700b      	strb	r3, [r1, #0]
				PLAINTEXT[1] = (uint8_t)miniIO_B0_adcL;
    9656:	4b2f      	ldr	r3, [pc, #188]	; (9714 <application_udp_appcall+0x554>)
    9658:	781b      	ldrb	r3, [r3, #0]
    965a:	704b      	strb	r3, [r1, #1]
				PLAINTEXT[2] = (uint8_t)miniIO_B1_adcH;
    965c:	4b2e      	ldr	r3, [pc, #184]	; (9718 <application_udp_appcall+0x558>)
    965e:	781b      	ldrb	r3, [r3, #0]
    9660:	708b      	strb	r3, [r1, #2]
				PLAINTEXT[3] = (uint8_t)miniIO_B1_adcL;
    9662:	4b2e      	ldr	r3, [pc, #184]	; (971c <application_udp_appcall+0x55c>)
    9664:	781b      	ldrb	r3, [r3, #0]
    9666:	70cb      	strb	r3, [r1, #3]
				PLAINTEXT[4] = (uint8_t)miniIO_B_inputs;
    9668:	4b2d      	ldr	r3, [pc, #180]	; (9720 <application_udp_appcall+0x560>)
    966a:	781b      	ldrb	r3, [r3, #0]
    966c:	710b      	strb	r3, [r1, #4]
				memmove(CIPHERTEXT, PLAINTEXT, 3);												   	// If no encryption compiled, then just copy over plain-text into [UDP] buffer
    966e:	4c14      	ldr	r4, [pc, #80]	; (96c0 <application_udp_appcall+0x500>)
    9670:	2203      	movs	r2, #3
    9672:	6820      	ldr	r0, [r4, #0]
    9674:	4b13      	ldr	r3, [pc, #76]	; (96c4 <application_udp_appcall+0x504>)
    9676:	4798      	blx	r3
				uip_udp_send(5);
    9678:	2105      	movs	r1, #5
    967a:	6820      	ldr	r0, [r4, #0]
    967c:	4b12      	ldr	r3, [pc, #72]	; (96c8 <application_udp_appcall+0x508>)
    967e:	4798      	blx	r3
				xprintf("CardB Mini-IO packet send...\r\n");
    9680:	4828      	ldr	r0, [pc, #160]	; (9724 <application_udp_appcall+0x564>)
    9682:	4b13      	ldr	r3, [pc, #76]	; (96d0 <application_udp_appcall+0x510>)
    9684:	4798      	blx	r3
				break;
    9686:	bd70      	pop	{r4, r5, r6, pc}
    9688:	2000826c 	.word	0x2000826c
    968c:	20007f2c 	.word	0x20007f2c
    9690:	2000786c 	.word	0x2000786c
    9694:	20008562 	.word	0x20008562
    9698:	2000854d 	.word	0x2000854d
    969c:	20008557 	.word	0x20008557
    96a0:	20007fb8 	.word	0x20007fb8
    96a4:	20007fb3 	.word	0x20007fb3
    96a8:	20007575 	.word	0x20007575
    96ac:	20008294 	.word	0x20008294
    96b0:	20007579 	.word	0x20007579
    96b4:	20007c6e 	.word	0x20007c6e
    96b8:	20008564 	.word	0x20008564
    96bc:	2000826d 	.word	0x2000826d
    96c0:	20008594 	.word	0x20008594
    96c4:	0000da81 	.word	0x0000da81
    96c8:	0000c895 	.word	0x0000c895
    96cc:	00010158 	.word	0x00010158
    96d0:	0000031d 	.word	0x0000031d
    96d4:	20007c6c 	.word	0x20007c6c
    96d8:	20008556 	.word	0x20008556
    96dc:	20008277 	.word	0x20008277
    96e0:	20007fb2 	.word	0x20007fb2
    96e4:	20007578 	.word	0x20007578
    96e8:	00010174 	.word	0x00010174
    96ec:	20007fbc 	.word	0x20007fbc
    96f0:	20008548 	.word	0x20008548
    96f4:	20008298 	.word	0x20008298
    96f8:	0000da6b 	.word	0x0000da6b
    96fc:	20007c70 	.word	0x20007c70
    9700:	2000784c 	.word	0x2000784c
    9704:	20007576 	.word	0x20007576
    9708:	20007588 	.word	0x20007588
    970c:	00010194 	.word	0x00010194
    9710:	20007fbd 	.word	0x20007fbd
    9714:	20007c6d 	.word	0x20007c6d
    9718:	20007590 	.word	0x20007590
    971c:	20008563 	.word	0x20008563
    9720:	20008274 	.word	0x20008274
    9724:	000101b4 	.word	0x000101b4
				if ((!sentB) && (card_sampleindex == SAMPLE_BUFFER_SIZE)) {
    9728:	4b23      	ldr	r3, [pc, #140]	; (97b8 <application_udp_appcall+0x5f8>)
    972a:	781b      	ldrb	r3, [r3, #0]
    972c:	2b00      	cmp	r3, #0
    972e:	f47f ad58 	bne.w	91e2 <application_udp_appcall+0x22>
    9732:	4b22      	ldr	r3, [pc, #136]	; (97bc <application_udp_appcall+0x5fc>)
    9734:	681b      	ldr	r3, [r3, #0]
    9736:	f5b3 7f2b 	cmp.w	r3, #684	; 0x2ac
    973a:	f47f ad52 	bne.w	91e2 <application_udp_appcall+0x22>
					memmove(&PLAINTEXT[0], cardBch0_samplebuffer, SAMPLE_BUFFER_SIZE);
    973e:	4c20      	ldr	r4, [pc, #128]	; (97c0 <application_udp_appcall+0x600>)
    9740:	f44f 762b 	mov.w	r6, #684	; 0x2ac
    9744:	4632      	mov	r2, r6
    9746:	491f      	ldr	r1, [pc, #124]	; (97c4 <application_udp_appcall+0x604>)
    9748:	4620      	mov	r0, r4
    974a:	4d1f      	ldr	r5, [pc, #124]	; (97c8 <application_udp_appcall+0x608>)
    974c:	47a8      	blx	r5
					memmove(&PLAINTEXT[SAMPLE_BUFFER_SIZE], cardBch1_samplebuffer, SAMPLE_BUFFER_SIZE);
    974e:	4632      	mov	r2, r6
    9750:	491e      	ldr	r1, [pc, #120]	; (97cc <application_udp_appcall+0x60c>)
    9752:	19a0      	adds	r0, r4, r6
    9754:	47a8      	blx	r5
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 0] = cardBch2_samplebuffer;
    9756:	4b1e      	ldr	r3, [pc, #120]	; (97d0 <application_udp_appcall+0x610>)
    9758:	781b      	ldrb	r3, [r3, #0]
    975a:	f884 3558 	strb.w	r3, [r4, #1368]	; 0x558
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 1] = cardBch3_samplebuffer;
    975e:	4b1d      	ldr	r3, [pc, #116]	; (97d4 <application_udp_appcall+0x614>)
    9760:	781b      	ldrb	r3, [r3, #0]
    9762:	f884 3559 	strb.w	r3, [r4, #1369]	; 0x559
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 2] = ID_IDENT_1;
    9766:	2337      	movs	r3, #55	; 0x37
    9768:	f884 355a 	strb.w	r3, [r4, #1370]	; 0x55a
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 3] = ID_IDENT_2;
    976c:	239f      	movs	r3, #159	; 0x9f
    976e:	f884 355b 	strb.w	r3, [r4, #1371]	; 0x55b
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 4] = ID_IDENT_3;
    9772:	231b      	movs	r3, #27
    9774:	f884 355c 	strb.w	r3, [r4, #1372]	; 0x55c
					PLAINTEXT[(SAMPLE_BUFFER_SIZE * 2) + 5] = ID_IDENT_4;
    9778:	2361      	movs	r3, #97	; 0x61
    977a:	f884 355d 	strb.w	r3, [r4, #1373]	; 0x55d
					memmove(CIPHERTEXT, PLAINTEXT, (SAMPLE_BUFFER_SIZE * 2) + 6);													// If no encryption compiled, then just copy over plain-text into [UDP] buffer
    977e:	4d16      	ldr	r5, [pc, #88]	; (97d8 <application_udp_appcall+0x618>)
    9780:	f240 525e 	movw	r2, #1374	; 0x55e
    9784:	4621      	mov	r1, r4
    9786:	6828      	ldr	r0, [r5, #0]
    9788:	4b14      	ldr	r3, [pc, #80]	; (97dc <application_udp_appcall+0x61c>)
    978a:	4798      	blx	r3
					uip_udp_send((SAMPLE_BUFFER_SIZE * 2) + 6);
    978c:	f240 515e 	movw	r1, #1374	; 0x55e
    9790:	6828      	ldr	r0, [r5, #0]
    9792:	4b13      	ldr	r3, [pc, #76]	; (97e0 <application_udp_appcall+0x620>)
    9794:	4798      	blx	r3
					if (sentA) {
    9796:	4b13      	ldr	r3, [pc, #76]	; (97e4 <application_udp_appcall+0x624>)
    9798:	781b      	ldrb	r3, [r3, #0]
    979a:	b143      	cbz	r3, 97ae <application_udp_appcall+0x5ee>
						sentA = 0;
    979c:	2300      	movs	r3, #0
    979e:	4a11      	ldr	r2, [pc, #68]	; (97e4 <application_udp_appcall+0x624>)
    97a0:	7013      	strb	r3, [r2, #0]
						card_sampleindex = 0;
    97a2:	4a06      	ldr	r2, [pc, #24]	; (97bc <application_udp_appcall+0x5fc>)
    97a4:	6013      	str	r3, [r2, #0]
					xprintf("CardB VibraTek packet send...\r\n");
    97a6:	4810      	ldr	r0, [pc, #64]	; (97e8 <application_udp_appcall+0x628>)
    97a8:	4b10      	ldr	r3, [pc, #64]	; (97ec <application_udp_appcall+0x62c>)
    97aa:	4798      	blx	r3
    97ac:	bd70      	pop	{r4, r5, r6, pc}
						sentB = 1;
    97ae:	2201      	movs	r2, #1
    97b0:	4b01      	ldr	r3, [pc, #4]	; (97b8 <application_udp_appcall+0x5f8>)
    97b2:	701a      	strb	r2, [r3, #0]
    97b4:	e7f7      	b.n	97a6 <application_udp_appcall+0x5e6>
    97b6:	4770      	bx	lr
    97b8:	20007588 	.word	0x20007588
    97bc:	20008548 	.word	0x20008548
    97c0:	2000786c 	.word	0x2000786c
    97c4:	20007fc0 	.word	0x20007fc0
    97c8:	0000da6b 	.word	0x0000da6b
    97cc:	2000759c 	.word	0x2000759c
    97d0:	2000757b 	.word	0x2000757b
    97d4:	2000757c 	.word	0x2000757c
    97d8:	20008594 	.word	0x20008594
    97dc:	0000da81 	.word	0x0000da81
    97e0:	0000c895 	.word	0x0000c895
    97e4:	20007fbc 	.word	0x20007fbc
    97e8:	000101d4 	.word	0x000101d4
    97ec:	0000031d 	.word	0x0000031d

000097f0 <main_loop>:
{
    97f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    97f4:	b08b      	sub	sp, #44	; 0x2c
	broadcast_storm = 0;
    97f6:	2300      	movs	r3, #0
    97f8:	9306      	str	r3, [sp, #24]
	eth_check = 0;
    97fa:	9304      	str	r3, [sp, #16]
					if (uip_len > 0) {
    97fc:	f8df b290 	ldr.w	fp, [pc, #656]	; 9a90 <main_loop+0x2a0>
				xprintf("<CLI DEBUG> ID               = %u\r\n", ((CONFIG *)&settings_buffer)->ID);
    9800:	4f89      	ldr	r7, [pc, #548]	; (9a28 <main_loop+0x238>)
				xprintf("<CLI DEBUG> Name             = %s\r\n", ((CONFIG *)&settings_buffer)->name);
    9802:	f107 0308 	add.w	r3, r7, #8
    9806:	9307      	str	r3, [sp, #28]
    9808:	f000 bc67 	b.w	a0da <main_loop+0x8ea>
    980c:	2300      	movs	r3, #0
    980e:	9305      	str	r3, [sp, #20]
    9810:	461d      	mov	r5, r3
				if (mac_async_read_len(&ETHERNET_MAC_0) > 0) {
    9812:	f8df 8280 	ldr.w	r8, [pc, #640]	; 9a94 <main_loop+0x2a4>
					uip_len = mac_async_read(&ETHERNET_MAC_0, (uint8_t *)&uip_buf[0], sizeof(uip_buf));
    9816:	4c85      	ldr	r4, [pc, #532]	; (9a2c <main_loop+0x23c>)
    9818:	e011      	b.n	983e <main_loop+0x4e>
					if (ETH_BUF->type == htons(UIP_ETHTYPE_IP)) {
    981a:	89a6      	ldrh	r6, [r4, #12]
    981c:	f44f 6000 	mov.w	r0, #2048	; 0x800
    9820:	4b83      	ldr	r3, [pc, #524]	; (9a30 <main_loop+0x240>)
    9822:	4798      	blx	r3
    9824:	4286      	cmp	r6, r0
    9826:	d065      	beq.n	98f4 <main_loop+0x104>
					} else if (ETH_BUF->type == htons (UIP_ETHTYPE_ARP)) {
    9828:	89a6      	ldrh	r6, [r4, #12]
    982a:	f640 0006 	movw	r0, #2054	; 0x806
    982e:	4b80      	ldr	r3, [pc, #512]	; (9a30 <main_loop+0x240>)
    9830:	4798      	blx	r3
    9832:	4286      	cmp	r6, r0
    9834:	d06e      	beq.n	9914 <main_loop+0x124>
			for (etherloop = 0; etherloop < 5; etherloop++) {
    9836:	3501      	adds	r5, #1
    9838:	2d05      	cmp	r5, #5
    983a:	f000 808c 	beq.w	9956 <main_loop+0x166>
				if (mac_async_read_len(&ETHERNET_MAC_0) > 0) {
    983e:	487d      	ldr	r0, [pc, #500]	; (9a34 <main_loop+0x244>)
    9840:	47c0      	blx	r8
    9842:	2800      	cmp	r0, #0
    9844:	d071      	beq.n	992a <main_loop+0x13a>
					uip_len = mac_async_read(&ETHERNET_MAC_0, (uint8_t *)&uip_buf[0], sizeof(uip_buf));
    9846:	f240 62a6 	movw	r2, #1702	; 0x6a6
    984a:	4621      	mov	r1, r4
    984c:	4879      	ldr	r0, [pc, #484]	; (9a34 <main_loop+0x244>)
    984e:	4b7a      	ldr	r3, [pc, #488]	; (9a38 <main_loop+0x248>)
    9850:	4798      	blx	r3
    9852:	b280      	uxth	r0, r0
    9854:	f8ab 0000 	strh.w	r0, [fp]
				if ((uip_len == 68) && (uip_buf[0] == 0x01) && (uip_buf[1] == 0x80) && (uip_buf[2] == 0xC2) && (uip_buf[3] == 0x00) && (uip_buf[4] == 0x00) && (uip_buf[5] == 0x00) && (uip_buf[6] == 0x01) &&
    9858:	2844      	cmp	r0, #68	; 0x44
    985a:	d1de      	bne.n	981a <main_loop+0x2a>
    985c:	7823      	ldrb	r3, [r4, #0]
    985e:	2b01      	cmp	r3, #1
    9860:	d1db      	bne.n	981a <main_loop+0x2a>
    9862:	7863      	ldrb	r3, [r4, #1]
    9864:	2b80      	cmp	r3, #128	; 0x80
    9866:	d1d8      	bne.n	981a <main_loop+0x2a>
    9868:	78a3      	ldrb	r3, [r4, #2]
    986a:	2bc2      	cmp	r3, #194	; 0xc2
    986c:	d1d5      	bne.n	981a <main_loop+0x2a>
    986e:	78e3      	ldrb	r3, [r4, #3]
    9870:	2b00      	cmp	r3, #0
    9872:	d1d2      	bne.n	981a <main_loop+0x2a>
    9874:	7923      	ldrb	r3, [r4, #4]
    9876:	2b00      	cmp	r3, #0
    9878:	d1cf      	bne.n	981a <main_loop+0x2a>
    987a:	7963      	ldrb	r3, [r4, #5]
    987c:	2b00      	cmp	r3, #0
    987e:	d1cc      	bne.n	981a <main_loop+0x2a>
    9880:	79a3      	ldrb	r3, [r4, #6]
    9882:	2b01      	cmp	r3, #1
    9884:	d1c9      	bne.n	981a <main_loop+0x2a>
    9886:	79e3      	ldrb	r3, [r4, #7]
    9888:	2b80      	cmp	r3, #128	; 0x80
    988a:	d1c6      	bne.n	981a <main_loop+0x2a>
				(uip_buf[7] == 0x80) && (uip_buf[8] == 0xC2) && (uip_buf[9] == 0x00) && (uip_buf[10] == 0x00) && (uip_buf[11] == 0x01) && (*((unsigned short int *)&(uip_buf[12])) == 0x01E0) &&
    988c:	7a23      	ldrb	r3, [r4, #8]
    988e:	2bc2      	cmp	r3, #194	; 0xc2
    9890:	d1c3      	bne.n	981a <main_loop+0x2a>
    9892:	7a63      	ldrb	r3, [r4, #9]
    9894:	2b00      	cmp	r3, #0
    9896:	d1c0      	bne.n	981a <main_loop+0x2a>
    9898:	7aa3      	ldrb	r3, [r4, #10]
    989a:	2b00      	cmp	r3, #0
    989c:	d1bd      	bne.n	981a <main_loop+0x2a>
    989e:	7ae3      	ldrb	r3, [r4, #11]
    98a0:	2b01      	cmp	r3, #1
    98a2:	d1ba      	bne.n	981a <main_loop+0x2a>
    98a4:	89a3      	ldrh	r3, [r4, #12]
    98a6:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
    98aa:	d1b6      	bne.n	981a <main_loop+0x2a>
    98ac:	7f62      	ldrb	r2, [r4, #29]
    98ae:	4b63      	ldr	r3, [pc, #396]	; (9a3c <main_loop+0x24c>)
    98b0:	781b      	ldrb	r3, [r3, #0]
    98b2:	429a      	cmp	r2, r3
    98b4:	d1b1      	bne.n	981a <main_loop+0x2a>
				(uip_buf[29] == mac_raw[0]) && (uip_buf[30] == mac_raw[1]) && (uip_buf[31] == mac_raw[2]) && (uip_buf[32] == mac_raw[3]) && (uip_buf[33] == mac_raw[4]) && (uip_buf[34] == mac_raw[5])) {
    98b6:	7fa2      	ldrb	r2, [r4, #30]
    98b8:	4b60      	ldr	r3, [pc, #384]	; (9a3c <main_loop+0x24c>)
    98ba:	785b      	ldrb	r3, [r3, #1]
    98bc:	429a      	cmp	r2, r3
    98be:	d1ac      	bne.n	981a <main_loop+0x2a>
    98c0:	7fe2      	ldrb	r2, [r4, #31]
    98c2:	4b5e      	ldr	r3, [pc, #376]	; (9a3c <main_loop+0x24c>)
    98c4:	789b      	ldrb	r3, [r3, #2]
    98c6:	429a      	cmp	r2, r3
    98c8:	d1a7      	bne.n	981a <main_loop+0x2a>
    98ca:	f894 2020 	ldrb.w	r2, [r4, #32]
    98ce:	4b5b      	ldr	r3, [pc, #364]	; (9a3c <main_loop+0x24c>)
    98d0:	78db      	ldrb	r3, [r3, #3]
    98d2:	429a      	cmp	r2, r3
    98d4:	d1a1      	bne.n	981a <main_loop+0x2a>
    98d6:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    98da:	4b58      	ldr	r3, [pc, #352]	; (9a3c <main_loop+0x24c>)
    98dc:	791b      	ldrb	r3, [r3, #4]
    98de:	429a      	cmp	r2, r3
    98e0:	d19b      	bne.n	981a <main_loop+0x2a>
    98e2:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
    98e6:	4b55      	ldr	r3, [pc, #340]	; (9a3c <main_loop+0x24c>)
    98e8:	795b      	ldrb	r3, [r3, #5]
    98ea:	429a      	cmp	r2, r3
    98ec:	d195      	bne.n	981a <main_loop+0x2a>
					bpdu_arrived = 1;
    98ee:	2301      	movs	r3, #1
    98f0:	9305      	str	r3, [sp, #20]
    98f2:	e7a0      	b.n	9836 <main_loop+0x46>
						uip_input();
    98f4:	2001      	movs	r0, #1
    98f6:	4b52      	ldr	r3, [pc, #328]	; (9a40 <main_loop+0x250>)
    98f8:	4798      	blx	r3
						if (uip_len > 0) {
    98fa:	f8bb 3000 	ldrh.w	r3, [fp]
    98fe:	2b00      	cmp	r3, #0
    9900:	d099      	beq.n	9836 <main_loop+0x46>
							uip_arp_out();
    9902:	4b50      	ldr	r3, [pc, #320]	; (9a44 <main_loop+0x254>)
    9904:	4798      	blx	r3
							mac_async_write(&ETHERNET_MAC_0, (uint8_t *)&uip_buf[0], uip_len);
    9906:	f8bb 2000 	ldrh.w	r2, [fp]
    990a:	4621      	mov	r1, r4
    990c:	4849      	ldr	r0, [pc, #292]	; (9a34 <main_loop+0x244>)
    990e:	4b4e      	ldr	r3, [pc, #312]	; (9a48 <main_loop+0x258>)
    9910:	4798      	blx	r3
    9912:	e790      	b.n	9836 <main_loop+0x46>
						uip_arp_arpin();
    9914:	4b4d      	ldr	r3, [pc, #308]	; (9a4c <main_loop+0x25c>)
    9916:	4798      	blx	r3
						if (uip_len > 0) {
    9918:	f8bb 2000 	ldrh.w	r2, [fp]
    991c:	2a00      	cmp	r2, #0
    991e:	d08a      	beq.n	9836 <main_loop+0x46>
							mac_async_write(&ETHERNET_MAC_0, (uint8_t *)&uip_buf[0], uip_len);
    9920:	4621      	mov	r1, r4
    9922:	4844      	ldr	r0, [pc, #272]	; (9a34 <main_loop+0x244>)
    9924:	4b48      	ldr	r3, [pc, #288]	; (9a48 <main_loop+0x258>)
    9926:	4798      	blx	r3
    9928:	e785      	b.n	9836 <main_loop+0x46>
			if (etherloop == 5) {
    992a:	2d05      	cmp	r5, #5
    992c:	d013      	beq.n	9956 <main_loop+0x166>
			else if (!stormstate) {
    992e:	4b48      	ldr	r3, [pc, #288]	; (9a50 <main_loop+0x260>)
    9930:	781b      	ldrb	r3, [r3, #0]
				broadcast_storm = 0;
    9932:	2b00      	cmp	r3, #0
    9934:	9a06      	ldr	r2, [sp, #24]
    9936:	bf08      	it	eq
    9938:	461a      	moveq	r2, r3
    993a:	9206      	str	r2, [sp, #24]
			if (ip_periodic_check) {
    993c:	4b45      	ldr	r3, [pc, #276]	; (9a54 <main_loop+0x264>)
    993e:	781b      	ldrb	r3, [r3, #0]
    9940:	2b00      	cmp	r3, #0
    9942:	d043      	beq.n	99cc <main_loop+0x1dc>
				ip_periodic_check = 0;
    9944:	2200      	movs	r2, #0
    9946:	4b43      	ldr	r3, [pc, #268]	; (9a54 <main_loop+0x264>)
    9948:	701a      	strb	r2, [r3, #0]
    994a:	4c43      	ldr	r4, [pc, #268]	; (9a58 <main_loop+0x268>)
    994c:	f504 6891 	add.w	r8, r4, #1160	; 0x488
					uip_periodic(loop);
    9950:	4e42      	ldr	r6, [pc, #264]	; (9a5c <main_loop+0x26c>)
    9952:	4d3b      	ldr	r5, [pc, #236]	; (9a40 <main_loop+0x250>)
    9954:	e011      	b.n	997a <main_loop+0x18a>
				if (!broadcast_storm) {
    9956:	9b06      	ldr	r3, [sp, #24]
    9958:	2b00      	cmp	r3, #0
    995a:	d1ef      	bne.n	993c <main_loop+0x14c>
					xprintf("ETHERNET: [broadcast storm] !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n");
    995c:	4840      	ldr	r0, [pc, #256]	; (9a60 <main_loop+0x270>)
    995e:	4b41      	ldr	r3, [pc, #260]	; (9a64 <main_loop+0x274>)
    9960:	4798      	blx	r3
					writeKSZreg(SPI_KSZ8794_PORT4CONTROL2, 0x00);
    9962:	2100      	movs	r1, #0
    9964:	2052      	movs	r0, #82	; 0x52
    9966:	4b40      	ldr	r3, [pc, #256]	; (9a68 <main_loop+0x278>)
    9968:	4798      	blx	r3
					stormstate = 1;
    996a:	2301      	movs	r3, #1
    996c:	4a38      	ldr	r2, [pc, #224]	; (9a50 <main_loop+0x260>)
    996e:	7013      	strb	r3, [r2, #0]
					broadcast_storm = 1;
    9970:	9306      	str	r3, [sp, #24]
    9972:	e7e3      	b.n	993c <main_loop+0x14c>
    9974:	3474      	adds	r4, #116	; 0x74
				for (loop = 0; loop < UIP_UDP_CONNS; loop++) {
    9976:	4544      	cmp	r4, r8
    9978:	d00f      	beq.n	999a <main_loop+0x1aa>
					uip_periodic(loop);
    997a:	6034      	str	r4, [r6, #0]
    997c:	2002      	movs	r0, #2
    997e:	47a8      	blx	r5
					if (uip_len > 0) {
    9980:	f8bb 3000 	ldrh.w	r3, [fp]
    9984:	2b00      	cmp	r3, #0
    9986:	d0f5      	beq.n	9974 <main_loop+0x184>
						uip_arp_out();
    9988:	4b2e      	ldr	r3, [pc, #184]	; (9a44 <main_loop+0x254>)
    998a:	4798      	blx	r3
						mac_async_write(&ETHERNET_MAC_0, (uint8_t *)&uip_buf[0], uip_len);
    998c:	f8bb 2000 	ldrh.w	r2, [fp]
    9990:	4926      	ldr	r1, [pc, #152]	; (9a2c <main_loop+0x23c>)
    9992:	4828      	ldr	r0, [pc, #160]	; (9a34 <main_loop+0x244>)
    9994:	4b2c      	ldr	r3, [pc, #176]	; (9a48 <main_loop+0x258>)
    9996:	4798      	blx	r3
    9998:	e7ec      	b.n	9974 <main_loop+0x184>
    999a:	4c34      	ldr	r4, [pc, #208]	; (9a6c <main_loop+0x27c>)
    999c:	f504 787a 	add.w	r8, r4, #1000	; 0x3e8
					uip_udp_periodic(loop);
    99a0:	4e33      	ldr	r6, [pc, #204]	; (9a70 <main_loop+0x280>)
    99a2:	4d27      	ldr	r5, [pc, #156]	; (9a40 <main_loop+0x250>)
    99a4:	e002      	b.n	99ac <main_loop+0x1bc>
    99a6:	3464      	adds	r4, #100	; 0x64
				for (loop = 0; loop < UIP_UDP_CONNS; loop++) {
    99a8:	45a0      	cmp	r8, r4
    99aa:	d00f      	beq.n	99cc <main_loop+0x1dc>
					uip_udp_periodic(loop);
    99ac:	6034      	str	r4, [r6, #0]
    99ae:	2005      	movs	r0, #5
    99b0:	47a8      	blx	r5
					if (uip_len > 0) {
    99b2:	f8bb 3000 	ldrh.w	r3, [fp]
    99b6:	2b00      	cmp	r3, #0
    99b8:	d0f5      	beq.n	99a6 <main_loop+0x1b6>
						uip_arp_out();
    99ba:	4b22      	ldr	r3, [pc, #136]	; (9a44 <main_loop+0x254>)
    99bc:	4798      	blx	r3
						mac_async_write(&ETHERNET_MAC_0, (uint8_t *)&uip_buf[0], uip_len);
    99be:	f8bb 2000 	ldrh.w	r2, [fp]
    99c2:	491a      	ldr	r1, [pc, #104]	; (9a2c <main_loop+0x23c>)
    99c4:	481b      	ldr	r0, [pc, #108]	; (9a34 <main_loop+0x244>)
    99c6:	4b20      	ldr	r3, [pc, #128]	; (9a48 <main_loop+0x258>)
    99c8:	4798      	blx	r3
    99ca:	e7ec      	b.n	99a6 <main_loop+0x1b6>
			if (arp_check) {
    99cc:	4b29      	ldr	r3, [pc, #164]	; (9a74 <main_loop+0x284>)
    99ce:	781b      	ldrb	r3, [r3, #0]
    99d0:	b913      	cbnz	r3, 99d8 <main_loop+0x1e8>
			eth_check = 0;
    99d2:	2300      	movs	r3, #0
    99d4:	9304      	str	r3, [sp, #16]
    99d6:	e38e      	b.n	a0f6 <main_loop+0x906>
				arp_check = 0;
    99d8:	2400      	movs	r4, #0
    99da:	4b26      	ldr	r3, [pc, #152]	; (9a74 <main_loop+0x284>)
    99dc:	701c      	strb	r4, [r3, #0]
				uip_arp_timer();
    99de:	4b26      	ldr	r3, [pc, #152]	; (9a78 <main_loop+0x288>)
    99e0:	4798      	blx	r3
			eth_check = 0;
    99e2:	9404      	str	r4, [sp, #16]
    99e4:	e387      	b.n	a0f6 <main_loop+0x906>
				xprintf("Write ADC gain settings for VibraTek CardA\r\n");
    99e6:	4825      	ldr	r0, [pc, #148]	; (9a7c <main_loop+0x28c>)
    99e8:	4b1e      	ldr	r3, [pc, #120]	; (9a64 <main_loop+0x274>)
    99ea:	4798      	blx	r3
				if ((err = I2C_setGAIN(PC27_CARDA_I2C_SDA,  PC28_CARDA_I2C_CLK, ((CONFIG *)&settings_buffer)->gain_cardA)) < 0) {
    99ec:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
    99f0:	215c      	movs	r1, #92	; 0x5c
    99f2:	205b      	movs	r0, #91	; 0x5b
    99f4:	4b22      	ldr	r3, [pc, #136]	; (9a80 <main_loop+0x290>)
    99f6:	4798      	blx	r3
    99f8:	1e01      	subs	r1, r0, #0
    99fa:	f280 8388 	bge.w	a10e <main_loop+0x91e>
					xprintf("Could NOT write to the DAC Gain controller on CARDA:I2C [%i]\r\n", err);
    99fe:	4821      	ldr	r0, [pc, #132]	; (9a84 <main_loop+0x294>)
    9a00:	4b18      	ldr	r3, [pc, #96]	; (9a64 <main_loop+0x274>)
    9a02:	4798      	blx	r3
    9a04:	e383      	b.n	a10e <main_loop+0x91e>
				xprintf("Write ADC gain settings for VibraTek CardB\r\n");
    9a06:	4820      	ldr	r0, [pc, #128]	; (9a88 <main_loop+0x298>)
    9a08:	4b16      	ldr	r3, [pc, #88]	; (9a64 <main_loop+0x274>)
    9a0a:	4798      	blx	r3
				if (( err = I2C_setGAIN(PB24_CARDB_I2C_SDA,  PB25_CARDB_I2C_CLK, ((CONFIG *)&settings_buffer)->gain_cardB)) < 0) {
    9a0c:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
    9a10:	2139      	movs	r1, #57	; 0x39
    9a12:	2038      	movs	r0, #56	; 0x38
    9a14:	4b1a      	ldr	r3, [pc, #104]	; (9a80 <main_loop+0x290>)
    9a16:	4798      	blx	r3
    9a18:	1e01      	subs	r1, r0, #0
    9a1a:	f280 837d 	bge.w	a118 <main_loop+0x928>
					xprintf("Could NOT write to the DAC Gain controller on CARDB:I2C [%i]\r\n", err);
    9a1e:	481b      	ldr	r0, [pc, #108]	; (9a8c <main_loop+0x29c>)
    9a20:	4b10      	ldr	r3, [pc, #64]	; (9a64 <main_loop+0x274>)
    9a22:	4798      	blx	r3
    9a24:	e378      	b.n	a118 <main_loop+0x928>
    9a26:	bf00      	nop
    9a28:	20007f2c 	.word	0x20007f2c
    9a2c:	20008654 	.word	0x20008654
    9a30:	0000c889 	.word	0x0000c889
    9a34:	2000752c 	.word	0x2000752c
    9a38:	00001925 	.word	0x00001925
    9a3c:	20007fac 	.word	0x20007fac
    9a40:	0000bb0d 	.word	0x0000bb0d
    9a44:	0000cb59 	.word	0x0000cb59
    9a48:	000018e9 	.word	0x000018e9
    9a4c:	0000ca71 	.word	0x0000ca71
    9a50:	20008560 	.word	0x20008560
    9a54:	20007860 	.word	0x20007860
    9a58:	2000859c 	.word	0x2000859c
    9a5c:	20008598 	.word	0x20008598
    9a60:	000102a0 	.word	0x000102a0
    9a64:	0000031d 	.word	0x0000031d
    9a68:	0000d995 	.word	0x0000d995
    9a6c:	20008cfc 	.word	0x20008cfc
    9a70:	20008590 	.word	0x20008590
    9a74:	20007fbe 	.word	0x20007fbe
    9a78:	0000ca29 	.word	0x0000ca29
    9a7c:	000102f4 	.word	0x000102f4
    9a80:	00006b95 	.word	0x00006b95
    9a84:	0000ea08 	.word	0x0000ea08
    9a88:	00010324 	.word	0x00010324
    9a8c:	0000ebbc 	.word	0x0000ebbc
    9a90:	20008580 	.word	0x20008580
    9a94:	00001955 	.word	0x00001955
    9a98:	f8df a2b0 	ldr.w	sl, [pc, #688]	; 9d4c <main_loop+0x55c>
    9a9c:	f04f 0820 	mov.w	r8, #32
    9aa0:	f8ca 8094 	str.w	r8, [sl, #148]	; 0x94
			command_dataw[0] = 0x30 + (ADC_CH0 << 1);
    9aa4:	4e85      	ldr	r6, [pc, #532]	; (9cbc <main_loop+0x4cc>)
    9aa6:	2330      	movs	r3, #48	; 0x30
    9aa8:	7033      	strb	r3, [r6, #0]
			command_dataw[1] = 0x00;
    9aaa:	f04f 0900 	mov.w	r9, #0
    9aae:	f886 9001 	strb.w	r9, [r6, #1]
			command_dataw[2] = 0x00;
    9ab2:	f886 9002 	strb.w	r9, [r6, #2]
			p_xfer.txbuf = (uint8_t *)&command_dataw;
    9ab6:	4d82      	ldr	r5, [pc, #520]	; (9cc0 <main_loop+0x4d0>)
    9ab8:	602e      	str	r6, [r5, #0]
			p_xfer.rxbuf = (uint8_t *)&command_datar;
    9aba:	4c82      	ldr	r4, [pc, #520]	; (9cc4 <main_loop+0x4d4>)
    9abc:	606c      	str	r4, [r5, #4]
			p_xfer.size = 3;
    9abe:	2303      	movs	r3, #3
    9ac0:	60ab      	str	r3, [r5, #8]
			spi_m_sync_transfer(&SPI_0, &p_xfer);
    9ac2:	4629      	mov	r1, r5
    9ac4:	4880      	ldr	r0, [pc, #512]	; (9cc8 <main_loop+0x4d8>)
    9ac6:	4b81      	ldr	r3, [pc, #516]	; (9ccc <main_loop+0x4dc>)
    9ac8:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    9aca:	f8ca 8098 	str.w	r8, [sl, #152]	; 0x98
			command_datar[2] = 0x80 + ((command_datar[2] >> 1) & 0x7C);
    9ace:	78a3      	ldrb	r3, [r4, #2]
    9ad0:	085b      	lsrs	r3, r3, #1
    9ad2:	f003 037c 	and.w	r3, r3, #124	; 0x7c
    9ad6:	3b80      	subs	r3, #128	; 0x80
    9ad8:	70a3      	strb	r3, [r4, #2]
			cardAch0_samplebuffer[card_sampleindex] = command_datar[1];
    9ada:	4b7d      	ldr	r3, [pc, #500]	; (9cd0 <main_loop+0x4e0>)
    9adc:	681b      	ldr	r3, [r3, #0]
    9ade:	7861      	ldrb	r1, [r4, #1]
    9ae0:	4a7c      	ldr	r2, [pc, #496]	; (9cd4 <main_loop+0x4e4>)
    9ae2:	54d1      	strb	r1, [r2, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    9ae4:	f8ca 8094 	str.w	r8, [sl, #148]	; 0x94
			command_dataw[0] = 0x30 + (ADC_CH1 << 1);
    9ae8:	2332      	movs	r3, #50	; 0x32
    9aea:	7033      	strb	r3, [r6, #0]
			command_dataw[1] = 0x00;
    9aec:	f886 9001 	strb.w	r9, [r6, #1]
			command_dataw[2] = 0x00;
    9af0:	f886 9002 	strb.w	r9, [r6, #2]
			p_xfer.txbuf = (uint8_t *)&command_dataw;
    9af4:	602e      	str	r6, [r5, #0]
			p_xfer.rxbuf = (uint8_t *)&command_datar;
    9af6:	606c      	str	r4, [r5, #4]
			p_xfer.size = 3;
    9af8:	2303      	movs	r3, #3
    9afa:	60ab      	str	r3, [r5, #8]
			spi_m_sync_transfer(&SPI_0, &p_xfer);
    9afc:	4629      	mov	r1, r5
    9afe:	4872      	ldr	r0, [pc, #456]	; (9cc8 <main_loop+0x4d8>)
    9b00:	4b72      	ldr	r3, [pc, #456]	; (9ccc <main_loop+0x4dc>)
    9b02:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    9b04:	f8ca 8098 	str.w	r8, [sl, #152]	; 0x98
			command_datar[2] = 0x80 + ((command_datar[2] >> 1) & 0x7C);
    9b08:	78a3      	ldrb	r3, [r4, #2]
    9b0a:	085b      	lsrs	r3, r3, #1
    9b0c:	f003 037c 	and.w	r3, r3, #124	; 0x7c
    9b10:	3b80      	subs	r3, #128	; 0x80
    9b12:	70a3      	strb	r3, [r4, #2]
			cardAch1_samplebuffer[card_sampleindex] = command_datar[1];
    9b14:	4b6e      	ldr	r3, [pc, #440]	; (9cd0 <main_loop+0x4e0>)
    9b16:	681b      	ldr	r3, [r3, #0]
    9b18:	7861      	ldrb	r1, [r4, #1]
    9b1a:	4a6f      	ldr	r2, [pc, #444]	; (9cd8 <main_loop+0x4e8>)
    9b1c:	54d1      	strb	r1, [r2, r3]
			if (!card_sampleindex) {
    9b1e:	2b00      	cmp	r3, #0
    9b20:	d169      	bne.n	9bf6 <main_loop+0x406>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    9b22:	46d0      	mov	r8, sl
    9b24:	f04f 0920 	mov.w	r9, #32
    9b28:	f8ca 9094 	str.w	r9, [sl, #148]	; 0x94
				command_dataw[0] = 0x30 + (ADC_CH2 << 1);
    9b2c:	2334      	movs	r3, #52	; 0x34
    9b2e:	7033      	strb	r3, [r6, #0]
				command_dataw[1] = 0x00;
    9b30:	f04f 0a00 	mov.w	sl, #0
    9b34:	f886 a001 	strb.w	sl, [r6, #1]
				command_dataw[2] = 0x00;
    9b38:	f886 a002 	strb.w	sl, [r6, #2]
				p_xfer.txbuf = (uint8_t *)&command_dataw;
    9b3c:	602e      	str	r6, [r5, #0]
				p_xfer.rxbuf = (uint8_t *)&command_datar;
    9b3e:	606c      	str	r4, [r5, #4]
				p_xfer.size = 3;
    9b40:	2303      	movs	r3, #3
    9b42:	60ab      	str	r3, [r5, #8]
				spi_m_sync_transfer(&SPI_0, &p_xfer);
    9b44:	4629      	mov	r1, r5
    9b46:	4860      	ldr	r0, [pc, #384]	; (9cc8 <main_loop+0x4d8>)
    9b48:	4b60      	ldr	r3, [pc, #384]	; (9ccc <main_loop+0x4dc>)
    9b4a:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    9b4c:	f8c8 9098 	str.w	r9, [r8, #152]	; 0x98
				command_datar[2] = 0x80 + ((command_datar[2] >> 1) & 0x7C);
    9b50:	78a3      	ldrb	r3, [r4, #2]
    9b52:	085b      	lsrs	r3, r3, #1
    9b54:	f003 037c 	and.w	r3, r3, #124	; 0x7c
    9b58:	3b80      	subs	r3, #128	; 0x80
    9b5a:	70a3      	strb	r3, [r4, #2]
				cardAch2_samplebuffer = command_datar[1];
    9b5c:	7862      	ldrb	r2, [r4, #1]
    9b5e:	4b5f      	ldr	r3, [pc, #380]	; (9cdc <main_loop+0x4ec>)
    9b60:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    9b62:	f8c8 9094 	str.w	r9, [r8, #148]	; 0x94
				command_dataw[0] = 0x30 + (ADC_CH3 << 1);
    9b66:	2336      	movs	r3, #54	; 0x36
    9b68:	7033      	strb	r3, [r6, #0]
				command_dataw[1] = 0x00;
    9b6a:	f886 a001 	strb.w	sl, [r6, #1]
				command_dataw[2] = 0x00;
    9b6e:	f886 a002 	strb.w	sl, [r6, #2]
				p_xfer.txbuf = (uint8_t *)&command_dataw;
    9b72:	602e      	str	r6, [r5, #0]
				p_xfer.rxbuf = (uint8_t *)&command_datar;
    9b74:	606c      	str	r4, [r5, #4]
				p_xfer.size = 3;
    9b76:	2303      	movs	r3, #3
    9b78:	60ab      	str	r3, [r5, #8]
				spi_m_sync_transfer(&SPI_0, &p_xfer);
    9b7a:	4629      	mov	r1, r5
    9b7c:	4852      	ldr	r0, [pc, #328]	; (9cc8 <main_loop+0x4d8>)
    9b7e:	4b53      	ldr	r3, [pc, #332]	; (9ccc <main_loop+0x4dc>)
    9b80:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    9b82:	f8c8 9098 	str.w	r9, [r8, #152]	; 0x98
				command_datar[2] = 0x80 + ((command_datar[2] >> 1) & 0x7C);
    9b86:	78a3      	ldrb	r3, [r4, #2]
    9b88:	085b      	lsrs	r3, r3, #1
    9b8a:	f003 037c 	and.w	r3, r3, #124	; 0x7c
    9b8e:	3b80      	subs	r3, #128	; 0x80
    9b90:	70a3      	strb	r3, [r4, #2]
				cardAch3_samplebuffer = command_datar[1];
    9b92:	7862      	ldrb	r2, [r4, #1]
    9b94:	4b52      	ldr	r3, [pc, #328]	; (9ce0 <main_loop+0x4f0>)
    9b96:	701a      	strb	r2, [r3, #0]
    9b98:	e02d      	b.n	9bf6 <main_loop+0x406>
			delay_us(50);
    9b9a:	2032      	movs	r0, #50	; 0x32
    9b9c:	4b51      	ldr	r3, [pc, #324]	; (9ce4 <main_loop+0x4f4>)
    9b9e:	4798      	blx	r3
    9ba0:	e029      	b.n	9bf6 <main_loop+0x406>
			if (miniA_chan) {
    9ba2:	4b51      	ldr	r3, [pc, #324]	; (9ce8 <main_loop+0x4f8>)
    9ba4:	781b      	ldrb	r3, [r3, #0]
    9ba6:	2b00      	cmp	r3, #0
    9ba8:	d065      	beq.n	9c76 <main_loop+0x486>
				if ((err = I2C_readMONITOREDINPUT(PC27_CARDA_I2C_SDA,  PC28_CARDA_I2C_CLK, &miniIO_A1_adcH,  &miniIO_A1_adcL))) {
    9baa:	4b50      	ldr	r3, [pc, #320]	; (9cec <main_loop+0x4fc>)
    9bac:	4a50      	ldr	r2, [pc, #320]	; (9cf0 <main_loop+0x500>)
    9bae:	215c      	movs	r1, #92	; 0x5c
    9bb0:	205b      	movs	r0, #91	; 0x5b
    9bb2:	4c50      	ldr	r4, [pc, #320]	; (9cf4 <main_loop+0x504>)
    9bb4:	47a0      	blx	r4
    9bb6:	4601      	mov	r1, r0
    9bb8:	b110      	cbz	r0, 9bc0 <main_loop+0x3d0>
					xprintf("Could NOT read from the Mini-IO ADC on CARDA:I2C [%i]\r\n", err);
    9bba:	484f      	ldr	r0, [pc, #316]	; (9cf8 <main_loop+0x508>)
    9bbc:	4b4f      	ldr	r3, [pc, #316]	; (9cfc <main_loop+0x50c>)
    9bbe:	4798      	blx	r3
				if ((err = I2C_configMONITOREDINPUTS(PC27_CARDA_I2C_SDA,  PC28_CARDA_I2C_CLK, 0))) {
    9bc0:	2200      	movs	r2, #0
    9bc2:	215c      	movs	r1, #92	; 0x5c
    9bc4:	205b      	movs	r0, #91	; 0x5b
    9bc6:	4b4e      	ldr	r3, [pc, #312]	; (9d00 <main_loop+0x510>)
    9bc8:	4798      	blx	r3
    9bca:	4601      	mov	r1, r0
    9bcc:	b110      	cbz	r0, 9bd4 <main_loop+0x3e4>
					xprintf("Could NOT write to the Mini-IO ADC controller on CARDA:I2C [%i]\r\n", err);
    9bce:	484d      	ldr	r0, [pc, #308]	; (9d04 <main_loop+0x514>)
    9bd0:	4b4a      	ldr	r3, [pc, #296]	; (9cfc <main_loop+0x50c>)
    9bd2:	4798      	blx	r3
			if ((err = I2C_setEXPANDER(PC27_CARDA_I2C_SDA,  PC28_CARDA_I2C_CLK, miniIO_A_relay))) {
    9bd4:	4b4c      	ldr	r3, [pc, #304]	; (9d08 <main_loop+0x518>)
    9bd6:	781a      	ldrb	r2, [r3, #0]
    9bd8:	215c      	movs	r1, #92	; 0x5c
    9bda:	205b      	movs	r0, #91	; 0x5b
    9bdc:	4b4b      	ldr	r3, [pc, #300]	; (9d0c <main_loop+0x51c>)
    9bde:	4798      	blx	r3
    9be0:	4601      	mov	r1, r0
    9be2:	2800      	cmp	r0, #0
    9be4:	d15e      	bne.n	9ca4 <main_loop+0x4b4>
			if ((err = I2C_readEXPANDER(PC27_CARDA_I2C_SDA,  PC28_CARDA_I2C_CLK, &miniIO_A_inputs))) {
    9be6:	4a4a      	ldr	r2, [pc, #296]	; (9d10 <main_loop+0x520>)
    9be8:	215c      	movs	r1, #92	; 0x5c
    9bea:	205b      	movs	r0, #91	; 0x5b
    9bec:	4b49      	ldr	r3, [pc, #292]	; (9d14 <main_loop+0x524>)
    9bee:	4798      	blx	r3
    9bf0:	4601      	mov	r1, r0
    9bf2:	2800      	cmp	r0, #0
    9bf4:	d15a      	bne.n	9cac <main_loop+0x4bc>
		if (((cardB_type == CARD_VIBRATEK) || (cardB_type == CARD_VIBRAPOINT)) && (card_sampleindex < SAMPLE_BUFFER_SIZE)) {
    9bf6:	4b48      	ldr	r3, [pc, #288]	; (9d18 <main_loop+0x528>)
    9bf8:	781b      	ldrb	r3, [r3, #0]
    9bfa:	2b01      	cmp	r3, #1
    9bfc:	f000 8509 	beq.w	a612 <main_loop+0xe22>
    9c00:	2b04      	cmp	r3, #4
    9c02:	f000 8506 	beq.w	a612 <main_loop+0xe22>
		} else if (cardB_type == CARD_MAXI_IO)  {
    9c06:	2b03      	cmp	r3, #3
    9c08:	f000 8124 	beq.w	9e54 <main_loop+0x664>
		} else if (cardB_type == CARD_MINI_IO)  {
    9c0c:	2b02      	cmp	r3, #2
    9c0e:	f040 8141 	bne.w	9e94 <main_loop+0x6a4>
			if (miniB_chan) {
    9c12:	4b42      	ldr	r3, [pc, #264]	; (9d1c <main_loop+0x52c>)
    9c14:	781b      	ldrb	r3, [r3, #0]
    9c16:	2b00      	cmp	r3, #0
    9c18:	f000 8120 	beq.w	9e5c <main_loop+0x66c>
				if ((err = I2C_readMONITOREDINPUT(PB24_CARDB_I2C_SDA,  PB25_CARDB_I2C_CLK, &miniIO_B1_adcH,  &miniIO_B1_adcL))) {
    9c1c:	4b40      	ldr	r3, [pc, #256]	; (9d20 <main_loop+0x530>)
    9c1e:	4a41      	ldr	r2, [pc, #260]	; (9d24 <main_loop+0x534>)
    9c20:	2139      	movs	r1, #57	; 0x39
    9c22:	2038      	movs	r0, #56	; 0x38
    9c24:	4c33      	ldr	r4, [pc, #204]	; (9cf4 <main_loop+0x504>)
    9c26:	47a0      	blx	r4
    9c28:	4601      	mov	r1, r0
    9c2a:	b110      	cbz	r0, 9c32 <main_loop+0x442>
					xprintf("Could NOT read from the Mini-IO ADC on CARDB:I2C [%i]\r\n", err);
    9c2c:	483e      	ldr	r0, [pc, #248]	; (9d28 <main_loop+0x538>)
    9c2e:	4b33      	ldr	r3, [pc, #204]	; (9cfc <main_loop+0x50c>)
    9c30:	4798      	blx	r3
				if ((err = I2C_configMONITOREDINPUTS(PB24_CARDB_I2C_SDA,  PB25_CARDB_I2C_CLK, 0))) {
    9c32:	2200      	movs	r2, #0
    9c34:	2139      	movs	r1, #57	; 0x39
    9c36:	2038      	movs	r0, #56	; 0x38
    9c38:	4b31      	ldr	r3, [pc, #196]	; (9d00 <main_loop+0x510>)
    9c3a:	4798      	blx	r3
    9c3c:	4601      	mov	r1, r0
    9c3e:	b110      	cbz	r0, 9c46 <main_loop+0x456>
					xprintf("Could NOT write to the Mini-IO ADC controller on CARDB:I2C [%i]\r\n", err);
    9c40:	483a      	ldr	r0, [pc, #232]	; (9d2c <main_loop+0x53c>)
    9c42:	4b2e      	ldr	r3, [pc, #184]	; (9cfc <main_loop+0x50c>)
    9c44:	4798      	blx	r3
			if ((err = I2C_setEXPANDER(PB24_CARDB_I2C_SDA,  PB25_CARDB_I2C_CLK, miniIO_B_relay))) {
    9c46:	4b3a      	ldr	r3, [pc, #232]	; (9d30 <main_loop+0x540>)
    9c48:	781a      	ldrb	r2, [r3, #0]
    9c4a:	2139      	movs	r1, #57	; 0x39
    9c4c:	2038      	movs	r0, #56	; 0x38
    9c4e:	4b2f      	ldr	r3, [pc, #188]	; (9d0c <main_loop+0x51c>)
    9c50:	4798      	blx	r3
    9c52:	4601      	mov	r1, r0
    9c54:	2800      	cmp	r0, #0
    9c56:	f040 8119 	bne.w	9e8c <main_loop+0x69c>
			if ((err = I2C_readEXPANDER(PB24_CARDB_I2C_SDA,  PB25_CARDB_I2C_CLK, &miniIO_B_inputs))) {
    9c5a:	4a36      	ldr	r2, [pc, #216]	; (9d34 <main_loop+0x544>)
    9c5c:	2139      	movs	r1, #57	; 0x39
    9c5e:	2038      	movs	r0, #56	; 0x38
    9c60:	4b2c      	ldr	r3, [pc, #176]	; (9d14 <main_loop+0x524>)
    9c62:	4798      	blx	r3
    9c64:	4601      	mov	r1, r0
    9c66:	2800      	cmp	r0, #0
    9c68:	f000 84d9 	beq.w	a61e <main_loop+0xe2e>
				xprintf("Could NOT read from the Mini-IO EXPANDER on CARDB:I2C [%i]\r\n", err);
    9c6c:	4832      	ldr	r0, [pc, #200]	; (9d38 <main_loop+0x548>)
    9c6e:	4b23      	ldr	r3, [pc, #140]	; (9cfc <main_loop+0x50c>)
    9c70:	4798      	blx	r3
    9c72:	f000 bcd4 	b.w	a61e <main_loop+0xe2e>
				if ((err = I2C_readMONITOREDINPUT(PC27_CARDA_I2C_SDA,  PC28_CARDA_I2C_CLK, &miniIO_A0_adcH,  &miniIO_A0_adcL))) {
    9c76:	4b31      	ldr	r3, [pc, #196]	; (9d3c <main_loop+0x54c>)
    9c78:	4a31      	ldr	r2, [pc, #196]	; (9d40 <main_loop+0x550>)
    9c7a:	215c      	movs	r1, #92	; 0x5c
    9c7c:	205b      	movs	r0, #91	; 0x5b
    9c7e:	4c1d      	ldr	r4, [pc, #116]	; (9cf4 <main_loop+0x504>)
    9c80:	47a0      	blx	r4
    9c82:	4601      	mov	r1, r0
    9c84:	b110      	cbz	r0, 9c8c <main_loop+0x49c>
					xprintf("Could NOT read from the Mini-IO ADC on CARDA:I2C [%i]\r\n", err);
    9c86:	481c      	ldr	r0, [pc, #112]	; (9cf8 <main_loop+0x508>)
    9c88:	4b1c      	ldr	r3, [pc, #112]	; (9cfc <main_loop+0x50c>)
    9c8a:	4798      	blx	r3
				if ((err = I2C_configMONITOREDINPUTS(PC27_CARDA_I2C_SDA,  PC28_CARDA_I2C_CLK, 1))) {
    9c8c:	2201      	movs	r2, #1
    9c8e:	215c      	movs	r1, #92	; 0x5c
    9c90:	205b      	movs	r0, #91	; 0x5b
    9c92:	4b1b      	ldr	r3, [pc, #108]	; (9d00 <main_loop+0x510>)
    9c94:	4798      	blx	r3
    9c96:	4601      	mov	r1, r0
    9c98:	2800      	cmp	r0, #0
    9c9a:	d09b      	beq.n	9bd4 <main_loop+0x3e4>
					xprintf("Could NOT write to the Mini-IO ADC controller on CARDA:I2C [%i]\r\n", err);
    9c9c:	4819      	ldr	r0, [pc, #100]	; (9d04 <main_loop+0x514>)
    9c9e:	4b17      	ldr	r3, [pc, #92]	; (9cfc <main_loop+0x50c>)
    9ca0:	4798      	blx	r3
    9ca2:	e797      	b.n	9bd4 <main_loop+0x3e4>
				xprintf("Could NOT write to the Mini-IO EXPANDER on CARDA:I2C [%i]\r\n", err);
    9ca4:	4827      	ldr	r0, [pc, #156]	; (9d44 <main_loop+0x554>)
    9ca6:	4b15      	ldr	r3, [pc, #84]	; (9cfc <main_loop+0x50c>)
    9ca8:	4798      	blx	r3
    9caa:	e79c      	b.n	9be6 <main_loop+0x3f6>
				xprintf("Could NOT read from the Mini-IO EXPANDER on CARDA:I2C [%i]\r\n", err);
    9cac:	4826      	ldr	r0, [pc, #152]	; (9d48 <main_loop+0x558>)
    9cae:	4b13      	ldr	r3, [pc, #76]	; (9cfc <main_loop+0x50c>)
    9cb0:	4798      	blx	r3
    9cb2:	e7a0      	b.n	9bf6 <main_loop+0x406>
		delay_us(50);
    9cb4:	2032      	movs	r0, #50	; 0x32
    9cb6:	4b0b      	ldr	r3, [pc, #44]	; (9ce4 <main_loop+0x4f4>)
    9cb8:	4798      	blx	r3
    9cba:	e79c      	b.n	9bf6 <main_loop+0x406>
    9cbc:	20007864 	.word	0x20007864
    9cc0:	20008568 	.word	0x20008568
    9cc4:	20007580 	.word	0x20007580
    9cc8:	20007478 	.word	0x20007478
    9ccc:	00001b05 	.word	0x00001b05
    9cd0:	20008548 	.word	0x20008548
    9cd4:	20008298 	.word	0x20008298
    9cd8:	20007c70 	.word	0x20007c70
    9cdc:	2000784c 	.word	0x2000784c
    9ce0:	20007576 	.word	0x20007576
    9ce4:	0000152d 	.word	0x0000152d
    9ce8:	2000757a 	.word	0x2000757a
    9cec:	20007fb2 	.word	0x20007fb2
    9cf0:	20008277 	.word	0x20008277
    9cf4:	00005749 	.word	0x00005749
    9cf8:	00010354 	.word	0x00010354
    9cfc:	0000031d 	.word	0x0000031d
    9d00:	00005491 	.word	0x00005491
    9d04:	0001038c 	.word	0x0001038c
    9d08:	20007fb4 	.word	0x20007fb4
    9d0c:	000063cd 	.word	0x000063cd
    9d10:	20007578 	.word	0x20007578
    9d14:	00006769 	.word	0x00006769
    9d18:	20008564 	.word	0x20008564
    9d1c:	20008276 	.word	0x20008276
    9d20:	20008563 	.word	0x20008563
    9d24:	20007590 	.word	0x20007590
    9d28:	0001044c 	.word	0x0001044c
    9d2c:	00010484 	.word	0x00010484
    9d30:	20007f1c 	.word	0x20007f1c
    9d34:	20008274 	.word	0x20008274
    9d38:	00010504 	.word	0x00010504
    9d3c:	20008556 	.word	0x20008556
    9d40:	20007c6c 	.word	0x20007c6c
    9d44:	000103d0 	.word	0x000103d0
    9d48:	0001040c 	.word	0x0001040c
    9d4c:	41008000 	.word	0x41008000
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    9d50:	f8df a300 	ldr.w	sl, [pc, #768]	; a054 <main_loop+0x864>
    9d54:	f04f 0840 	mov.w	r8, #64	; 0x40
    9d58:	f8ca 8094 	str.w	r8, [sl, #148]	; 0x94
			command_dataw[0] = 0x30 + (ADC_CH0 << 1);
    9d5c:	4e98      	ldr	r6, [pc, #608]	; (9fc0 <main_loop+0x7d0>)
    9d5e:	2330      	movs	r3, #48	; 0x30
    9d60:	7033      	strb	r3, [r6, #0]
			command_dataw[1] = 0x00;
    9d62:	f04f 0900 	mov.w	r9, #0
    9d66:	f886 9001 	strb.w	r9, [r6, #1]
			command_dataw[2] = 0x00;
    9d6a:	f886 9002 	strb.w	r9, [r6, #2]
			p_xfer.txbuf = (uint8_t *)&command_dataw;
    9d6e:	4d95      	ldr	r5, [pc, #596]	; (9fc4 <main_loop+0x7d4>)
    9d70:	602e      	str	r6, [r5, #0]
			p_xfer.rxbuf = (uint8_t *)&command_datar;
    9d72:	4c95      	ldr	r4, [pc, #596]	; (9fc8 <main_loop+0x7d8>)
    9d74:	606c      	str	r4, [r5, #4]
			p_xfer.size = 3;
    9d76:	2303      	movs	r3, #3
    9d78:	60ab      	str	r3, [r5, #8]
			spi_m_sync_transfer(&SPI_0, &p_xfer);
    9d7a:	4629      	mov	r1, r5
    9d7c:	4893      	ldr	r0, [pc, #588]	; (9fcc <main_loop+0x7dc>)
    9d7e:	4b94      	ldr	r3, [pc, #592]	; (9fd0 <main_loop+0x7e0>)
    9d80:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    9d82:	f8ca 8098 	str.w	r8, [sl, #152]	; 0x98
			command_datar[2] = 0x80 + ((command_datar[2] >> 1) & 0x7C);
    9d86:	78a3      	ldrb	r3, [r4, #2]
    9d88:	085b      	lsrs	r3, r3, #1
    9d8a:	f003 037c 	and.w	r3, r3, #124	; 0x7c
    9d8e:	3b80      	subs	r3, #128	; 0x80
    9d90:	70a3      	strb	r3, [r4, #2]
			cardBch0_samplebuffer[card_sampleindex] = command_datar[1];
    9d92:	4b90      	ldr	r3, [pc, #576]	; (9fd4 <main_loop+0x7e4>)
    9d94:	681b      	ldr	r3, [r3, #0]
    9d96:	7861      	ldrb	r1, [r4, #1]
    9d98:	4a8f      	ldr	r2, [pc, #572]	; (9fd8 <main_loop+0x7e8>)
    9d9a:	54d1      	strb	r1, [r2, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    9d9c:	f8ca 8094 	str.w	r8, [sl, #148]	; 0x94
			command_dataw[0] = 0x30 + (ADC_CH1 << 1);
    9da0:	2332      	movs	r3, #50	; 0x32
    9da2:	7033      	strb	r3, [r6, #0]
			command_dataw[1] = 0x00;
    9da4:	f886 9001 	strb.w	r9, [r6, #1]
			command_dataw[2] = 0x00;
    9da8:	f886 9002 	strb.w	r9, [r6, #2]
			p_xfer.txbuf = (uint8_t *)&command_dataw;
    9dac:	602e      	str	r6, [r5, #0]
			p_xfer.rxbuf = (uint8_t *)&command_datar;
    9dae:	606c      	str	r4, [r5, #4]
			p_xfer.size = 3;
    9db0:	2303      	movs	r3, #3
    9db2:	60ab      	str	r3, [r5, #8]
			spi_m_sync_transfer(&SPI_0, &p_xfer);
    9db4:	4629      	mov	r1, r5
    9db6:	4885      	ldr	r0, [pc, #532]	; (9fcc <main_loop+0x7dc>)
    9db8:	4b85      	ldr	r3, [pc, #532]	; (9fd0 <main_loop+0x7e0>)
    9dba:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    9dbc:	f8ca 8098 	str.w	r8, [sl, #152]	; 0x98
			command_datar[2] = 0x80 + ((command_datar[2] >> 1) & 0x7C);
    9dc0:	78a3      	ldrb	r3, [r4, #2]
    9dc2:	085b      	lsrs	r3, r3, #1
    9dc4:	f003 037c 	and.w	r3, r3, #124	; 0x7c
    9dc8:	3b80      	subs	r3, #128	; 0x80
    9dca:	70a3      	strb	r3, [r4, #2]
			cardBch1_samplebuffer[card_sampleindex] = command_datar[1];
    9dcc:	4b81      	ldr	r3, [pc, #516]	; (9fd4 <main_loop+0x7e4>)
    9dce:	681b      	ldr	r3, [r3, #0]
    9dd0:	7861      	ldrb	r1, [r4, #1]
    9dd2:	4a82      	ldr	r2, [pc, #520]	; (9fdc <main_loop+0x7ec>)
    9dd4:	54d1      	strb	r1, [r2, r3]
			if (!card_sampleindex) {
    9dd6:	2b00      	cmp	r3, #0
    9dd8:	f040 8421 	bne.w	a61e <main_loop+0xe2e>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    9ddc:	46d0      	mov	r8, sl
    9dde:	f04f 0940 	mov.w	r9, #64	; 0x40
    9de2:	f8ca 9094 	str.w	r9, [sl, #148]	; 0x94
				command_dataw[0] = 0x30 + (ADC_CH2 << 1);
    9de6:	2334      	movs	r3, #52	; 0x34
    9de8:	7033      	strb	r3, [r6, #0]
				command_dataw[1] = 0x00;
    9dea:	f04f 0a00 	mov.w	sl, #0
    9dee:	f886 a001 	strb.w	sl, [r6, #1]
				command_dataw[2] = 0x00;
    9df2:	f886 a002 	strb.w	sl, [r6, #2]
				p_xfer.txbuf = (uint8_t *)&command_dataw;
    9df6:	602e      	str	r6, [r5, #0]
				p_xfer.rxbuf = (uint8_t *)&command_datar;
    9df8:	606c      	str	r4, [r5, #4]
				p_xfer.size = 3;
    9dfa:	2303      	movs	r3, #3
    9dfc:	60ab      	str	r3, [r5, #8]
				spi_m_sync_transfer(&SPI_0, &p_xfer);
    9dfe:	4629      	mov	r1, r5
    9e00:	4872      	ldr	r0, [pc, #456]	; (9fcc <main_loop+0x7dc>)
    9e02:	4b73      	ldr	r3, [pc, #460]	; (9fd0 <main_loop+0x7e0>)
    9e04:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    9e06:	f8c8 9098 	str.w	r9, [r8, #152]	; 0x98
				command_datar[2] = 0x80 + ((command_datar[2] >> 1) & 0x7C);
    9e0a:	78a3      	ldrb	r3, [r4, #2]
    9e0c:	085b      	lsrs	r3, r3, #1
    9e0e:	f003 037c 	and.w	r3, r3, #124	; 0x7c
    9e12:	3b80      	subs	r3, #128	; 0x80
    9e14:	70a3      	strb	r3, [r4, #2]
				cardBch2_samplebuffer = command_datar[1];
    9e16:	7862      	ldrb	r2, [r4, #1]
    9e18:	4b71      	ldr	r3, [pc, #452]	; (9fe0 <main_loop+0x7f0>)
    9e1a:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    9e1c:	f8c8 9094 	str.w	r9, [r8, #148]	; 0x94
				command_dataw[0] = 0x30 + (ADC_CH3 << 1);
    9e20:	2336      	movs	r3, #54	; 0x36
    9e22:	7033      	strb	r3, [r6, #0]
				command_dataw[1] = 0x00;
    9e24:	f886 a001 	strb.w	sl, [r6, #1]
				command_dataw[2] = 0x00;
    9e28:	f886 a002 	strb.w	sl, [r6, #2]
				p_xfer.txbuf = (uint8_t *)&command_dataw;
    9e2c:	602e      	str	r6, [r5, #0]
				p_xfer.rxbuf = (uint8_t *)&command_datar;
    9e2e:	606c      	str	r4, [r5, #4]
				p_xfer.size = 3;
    9e30:	2303      	movs	r3, #3
    9e32:	60ab      	str	r3, [r5, #8]
				spi_m_sync_transfer(&SPI_0, &p_xfer);
    9e34:	4629      	mov	r1, r5
    9e36:	4865      	ldr	r0, [pc, #404]	; (9fcc <main_loop+0x7dc>)
    9e38:	4b65      	ldr	r3, [pc, #404]	; (9fd0 <main_loop+0x7e0>)
    9e3a:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    9e3c:	f8c8 9098 	str.w	r9, [r8, #152]	; 0x98
				command_datar[2] = 0x80 + ((command_datar[2] >> 1) & 0x7C);
    9e40:	78a3      	ldrb	r3, [r4, #2]
    9e42:	085b      	lsrs	r3, r3, #1
    9e44:	f003 037c 	and.w	r3, r3, #124	; 0x7c
    9e48:	3b80      	subs	r3, #128	; 0x80
    9e4a:	70a3      	strb	r3, [r4, #2]
				cardBch3_samplebuffer = command_datar[1];
    9e4c:	7862      	ldrb	r2, [r4, #1]
    9e4e:	4b65      	ldr	r3, [pc, #404]	; (9fe4 <main_loop+0x7f4>)
    9e50:	701a      	strb	r2, [r3, #0]
    9e52:	e3e4      	b.n	a61e <main_loop+0xe2e>
			delay_us(50);
    9e54:	2032      	movs	r0, #50	; 0x32
    9e56:	4b64      	ldr	r3, [pc, #400]	; (9fe8 <main_loop+0x7f8>)
    9e58:	4798      	blx	r3
    9e5a:	e3e0      	b.n	a61e <main_loop+0xe2e>
				if ((err = I2C_readMONITOREDINPUT(PB24_CARDB_I2C_SDA,  PB25_CARDB_I2C_CLK, &miniIO_B0_adcH,  &miniIO_B0_adcL))) {
    9e5c:	4b63      	ldr	r3, [pc, #396]	; (9fec <main_loop+0x7fc>)
    9e5e:	4a64      	ldr	r2, [pc, #400]	; (9ff0 <main_loop+0x800>)
    9e60:	2139      	movs	r1, #57	; 0x39
    9e62:	2038      	movs	r0, #56	; 0x38
    9e64:	4c63      	ldr	r4, [pc, #396]	; (9ff4 <main_loop+0x804>)
    9e66:	47a0      	blx	r4
    9e68:	4601      	mov	r1, r0
    9e6a:	b110      	cbz	r0, 9e72 <main_loop+0x682>
					xprintf("Could NOT read from the Mini-IO ADC on CARDB:I2C [%i]\r\n", err);
    9e6c:	4862      	ldr	r0, [pc, #392]	; (9ff8 <main_loop+0x808>)
    9e6e:	4b63      	ldr	r3, [pc, #396]	; (9ffc <main_loop+0x80c>)
    9e70:	4798      	blx	r3
				if ((err = I2C_configMONITOREDINPUTS(PB24_CARDB_I2C_SDA,  PB25_CARDB_I2C_CLK, 1))) {
    9e72:	2201      	movs	r2, #1
    9e74:	2139      	movs	r1, #57	; 0x39
    9e76:	2038      	movs	r0, #56	; 0x38
    9e78:	4b61      	ldr	r3, [pc, #388]	; (a000 <main_loop+0x810>)
    9e7a:	4798      	blx	r3
    9e7c:	4601      	mov	r1, r0
    9e7e:	2800      	cmp	r0, #0
    9e80:	f43f aee1 	beq.w	9c46 <main_loop+0x456>
					xprintf("Could NOT write to the Mini-IO ADC controller on CARDB:I2C [%i]\r\n", err);
    9e84:	485f      	ldr	r0, [pc, #380]	; (a004 <main_loop+0x814>)
    9e86:	4b5d      	ldr	r3, [pc, #372]	; (9ffc <main_loop+0x80c>)
    9e88:	4798      	blx	r3
    9e8a:	e6dc      	b.n	9c46 <main_loop+0x456>
				xprintf("Could NOT write to the Mini-IO EXPANDER on CARDB:I2C [%i]\r\n", err);
    9e8c:	485e      	ldr	r0, [pc, #376]	; (a008 <main_loop+0x818>)
    9e8e:	4b5b      	ldr	r3, [pc, #364]	; (9ffc <main_loop+0x80c>)
    9e90:	4798      	blx	r3
    9e92:	e6e2      	b.n	9c5a <main_loop+0x46a>
		} else if (cardB_type == CARD_NOTFITTED)  {
    9e94:	2b00      	cmp	r3, #0
    9e96:	f040 83db 	bne.w	a650 <main_loop+0xe60>
			delay_us(50);
    9e9a:	2032      	movs	r0, #50	; 0x32
    9e9c:	4b52      	ldr	r3, [pc, #328]	; (9fe8 <main_loop+0x7f8>)
    9e9e:	4798      	blx	r3
    9ea0:	e3bd      	b.n	a61e <main_loop+0xe2e>
			card_sampleindex++;
    9ea2:	4a4c      	ldr	r2, [pc, #304]	; (9fd4 <main_loop+0x7e4>)
    9ea4:	6813      	ldr	r3, [r2, #0]
    9ea6:	3301      	adds	r3, #1
    9ea8:	6013      	str	r3, [r2, #0]
			if ((card_sampleindex == SAMPLE_BUFFER_SIZE) && (readenvironment == 1)) {
    9eaa:	f5b3 7f2b 	cmp.w	r3, #684	; 0x2ac
    9eae:	d04f      	beq.n	9f50 <main_loop+0x760>
			read_boardvalues();
    9eb0:	4b56      	ldr	r3, [pc, #344]	; (a00c <main_loop+0x81c>)
    9eb2:	4798      	blx	r3
		if (ring_timer) {
    9eb4:	4b56      	ldr	r3, [pc, #344]	; (a010 <main_loop+0x820>)
    9eb6:	781b      	ldrb	r3, [r3, #0]
    9eb8:	2b00      	cmp	r3, #0
    9eba:	d151      	bne.n	9f60 <main_loop+0x770>
		if (io_read((struct io_descriptor *const)io, (uint8_t *const)&ch, 1)) {
    9ebc:	2201      	movs	r2, #1
    9ebe:	f10d 0127 	add.w	r1, sp, #39	; 0x27
    9ec2:	4b54      	ldr	r3, [pc, #336]	; (a014 <main_loop+0x824>)
    9ec4:	6818      	ldr	r0, [r3, #0]
    9ec6:	4b54      	ldr	r3, [pc, #336]	; (a018 <main_loop+0x828>)
    9ec8:	4798      	blx	r3
    9eca:	2800      	cmp	r0, #0
    9ecc:	f000 8100 	beq.w	a0d0 <main_loop+0x8e0>
			key = (unsigned char)ch;
    9ed0:	f89d 4027 	ldrb.w	r4, [sp, #39]	; 0x27
			switch (key) {
    9ed4:	f1a4 0342 	sub.w	r3, r4, #66	; 0x42
    9ed8:	2b36      	cmp	r3, #54	; 0x36
    9eda:	f200 8369 	bhi.w	a5b0 <main_loop+0xdc0>
    9ede:	e8df f013 	tbh	[pc, r3, lsl #1]
    9ee2:	0165      	.short	0x0165
    9ee4:	00bb0367 	.word	0x00bb0367
    9ee8:	03670367 	.word	0x03670367
    9eec:	03670367 	.word	0x03670367
    9ef0:	0367028b 	.word	0x0367028b
    9ef4:	01c70367 	.word	0x01c70367
    9ef8:	03670367 	.word	0x03670367
    9efc:	017c0367 	.word	0x017c0367
    9f00:	00570367 	.word	0x00570367
    9f04:	0367035b 	.word	0x0367035b
    9f08:	03670367 	.word	0x03670367
    9f0c:	013a0367 	.word	0x013a0367
    9f10:	03670367 	.word	0x03670367
    9f14:	03670367 	.word	0x03670367
    9f18:	03670367 	.word	0x03670367
    9f1c:	03670367 	.word	0x03670367
    9f20:	01650367 	.word	0x01650367
    9f24:	00bb0367 	.word	0x00bb0367
    9f28:	03670367 	.word	0x03670367
    9f2c:	03670367 	.word	0x03670367
    9f30:	0367028b 	.word	0x0367028b
    9f34:	01c70367 	.word	0x01c70367
    9f38:	03670367 	.word	0x03670367
    9f3c:	017c0367 	.word	0x017c0367
    9f40:	00570367 	.word	0x00570367
    9f44:	0367035b 	.word	0x0367035b
    9f48:	03670367 	.word	0x03670367
    9f4c:	013a0367 	.word	0x013a0367
			if ((card_sampleindex == SAMPLE_BUFFER_SIZE) && (readenvironment == 1)) {
    9f50:	4b32      	ldr	r3, [pc, #200]	; (a01c <main_loop+0x82c>)
    9f52:	781b      	ldrb	r3, [r3, #0]
    9f54:	2b01      	cmp	r3, #1
    9f56:	d1ab      	bne.n	9eb0 <main_loop+0x6c0>
				readenvironment = 2;
    9f58:	2202      	movs	r2, #2
    9f5a:	4b30      	ldr	r3, [pc, #192]	; (a01c <main_loop+0x82c>)
    9f5c:	701a      	strb	r2, [r3, #0]
    9f5e:	e7a7      	b.n	9eb0 <main_loop+0x6c0>
			if (ring_check(bpdu_arrived, &stormstate, &ring)) {
    9f60:	4a2f      	ldr	r2, [pc, #188]	; (a020 <main_loop+0x830>)
    9f62:	4930      	ldr	r1, [pc, #192]	; (a024 <main_loop+0x834>)
    9f64:	9805      	ldr	r0, [sp, #20]
    9f66:	4b30      	ldr	r3, [pc, #192]	; (a028 <main_loop+0x838>)
    9f68:	4798      	blx	r3
    9f6a:	b110      	cbz	r0, 9f72 <main_loop+0x782>
				send_relearn_udp = 1;
    9f6c:	2201      	movs	r2, #1
    9f6e:	4b2f      	ldr	r3, [pc, #188]	; (a02c <main_loop+0x83c>)
    9f70:	701a      	strb	r2, [r3, #0]
			ring_timer = 0;
    9f72:	2200      	movs	r2, #0
    9f74:	4b26      	ldr	r3, [pc, #152]	; (a010 <main_loop+0x820>)
    9f76:	701a      	strb	r2, [r3, #0]
			if (((CONFIG *)&settings_buffer)->loop_basestation) {
    9f78:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    9f7c:	2b00      	cmp	r3, #0
    9f7e:	d09d      	beq.n	9ebc <main_loop+0x6cc>
				ring_broken = (ring) ? RING_BROKEN : RING_CLOSED;
    9f80:	4b27      	ldr	r3, [pc, #156]	; (a020 <main_loop+0x830>)
    9f82:	781b      	ldrb	r3, [r3, #0]
    9f84:	1a9b      	subs	r3, r3, r2
    9f86:	bf18      	it	ne
    9f88:	2301      	movne	r3, #1
    9f8a:	4a29      	ldr	r2, [pc, #164]	; (a030 <main_loop+0x840>)
    9f8c:	7013      	strb	r3, [r2, #0]
    9f8e:	e795      	b.n	9ebc <main_loop+0x6cc>
				wdt_disable(&WDT_0);
    9f90:	4c28      	ldr	r4, [pc, #160]	; (a034 <main_loop+0x844>)
    9f92:	4620      	mov	r0, r4
    9f94:	4b28      	ldr	r3, [pc, #160]	; (a038 <main_loop+0x848>)
    9f96:	4798      	blx	r3
				wdt_set_timeout_period(&WDT_0, 100, 25);
    9f98:	2219      	movs	r2, #25
    9f9a:	2164      	movs	r1, #100	; 0x64
    9f9c:	4620      	mov	r0, r4
    9f9e:	4b27      	ldr	r3, [pc, #156]	; (a03c <main_loop+0x84c>)
    9fa0:	4798      	blx	r3
				wdt_enable(&WDT_0);
    9fa2:	4620      	mov	r0, r4
    9fa4:	4b26      	ldr	r3, [pc, #152]	; (a040 <main_loop+0x850>)
    9fa6:	4798      	blx	r3
				xprintf("\r\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n");
    9fa8:	4826      	ldr	r0, [pc, #152]	; (a044 <main_loop+0x854>)
    9faa:	4c14      	ldr	r4, [pc, #80]	; (9ffc <main_loop+0x80c>)
    9fac:	47a0      	blx	r4
				xprintf("<CLI DEBUG> [REBOOT] command\r\n");
    9fae:	4826      	ldr	r0, [pc, #152]	; (a048 <main_loop+0x858>)
    9fb0:	47a0      	blx	r4
				xprintf(". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n\r\n");
    9fb2:	4826      	ldr	r0, [pc, #152]	; (a04c <main_loop+0x85c>)
    9fb4:	47a0      	blx	r4
				reboot_actioned = 1;
    9fb6:	2201      	movs	r2, #1
    9fb8:	4b25      	ldr	r3, [pc, #148]	; (a050 <main_loop+0x860>)
    9fba:	701a      	strb	r2, [r3, #0]
    9fbc:	e08d      	b.n	a0da <main_loop+0x8ea>
    9fbe:	bf00      	nop
    9fc0:	20007864 	.word	0x20007864
    9fc4:	20008568 	.word	0x20008568
    9fc8:	20007580 	.word	0x20007580
    9fcc:	20007478 	.word	0x20007478
    9fd0:	00001b05 	.word	0x00001b05
    9fd4:	20008548 	.word	0x20008548
    9fd8:	20007fc0 	.word	0x20007fc0
    9fdc:	2000759c 	.word	0x2000759c
    9fe0:	2000757b 	.word	0x2000757b
    9fe4:	2000757c 	.word	0x2000757c
    9fe8:	0000152d 	.word	0x0000152d
    9fec:	20007c6d 	.word	0x20007c6d
    9ff0:	20007fbd 	.word	0x20007fbd
    9ff4:	00005749 	.word	0x00005749
    9ff8:	0001044c 	.word	0x0001044c
    9ffc:	0000031d 	.word	0x0000031d
    a000:	00005491 	.word	0x00005491
    a004:	00010484 	.word	0x00010484
    a008:	000104c8 	.word	0x000104c8
    a00c:	000004a5 	.word	0x000004a5
    a010:	20008279 	.word	0x20008279
    a014:	20007f20 	.word	0x20007f20
    a018:	00001861 	.word	0x00001861
    a01c:	2000826c 	.word	0x2000826c
    a020:	20008558 	.word	0x20008558
    a024:	20008560 	.word	0x20008560
    a028:	0000b751 	.word	0x0000b751
    a02c:	20008275 	.word	0x20008275
    a030:	2000826d 	.word	0x2000826d
    a034:	20007474 	.word	0x20007474
    a038:	0000906d 	.word	0x0000906d
    a03c:	0000909d 	.word	0x0000909d
    a040:	000090d5 	.word	0x000090d5
    a044:	00010544 	.word	0x00010544
    a048:	00010590 	.word	0x00010590
    a04c:	000105b0 	.word	0x000105b0
    a050:	20007fbf 	.word	0x20007fbf
    a054:	41008000 	.word	0x41008000
				xprintf("\r\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n");
    a058:	486c      	ldr	r0, [pc, #432]	; (a20c <main_loop+0xa1c>)
    a05a:	4d6d      	ldr	r5, [pc, #436]	; (a210 <main_loop+0xa20>)
    a05c:	47a8      	blx	r5
				xprintf("<CLI DEBUG> [CONFIGURATION DEFAULT] command\r\n");
    a05e:	486d      	ldr	r0, [pc, #436]	; (a214 <main_loop+0xa24>)
    a060:	47a8      	blx	r5
				((CONFIG *)&settings_buffer)->pattern1 = CONFIG_IDENTIFIER1;
    a062:	2400      	movs	r4, #0
    a064:	2376      	movs	r3, #118	; 0x76
    a066:	703b      	strb	r3, [r7, #0]
    a068:	2336      	movs	r3, #54	; 0x36
    a06a:	707b      	strb	r3, [r7, #1]
    a06c:	2345      	movs	r3, #69	; 0x45
    a06e:	70bb      	strb	r3, [r7, #2]
    a070:	f06f 0301 	mvn.w	r3, #1
    a074:	70fb      	strb	r3, [r7, #3]
				((CONFIG *)&settings_buffer)->pattern2 = CONFIG_IDENTIFIER2;
    a076:	f06f 0343 	mvn.w	r3, #67	; 0x43
    a07a:	713b      	strb	r3, [r7, #4]
    a07c:	f06f 0315 	mvn.w	r3, #21
    a080:	717b      	strb	r3, [r7, #5]
    a082:	237d      	movs	r3, #125	; 0x7d
    a084:	71bb      	strb	r3, [r7, #6]
    a086:	f06f 036c 	mvn.w	r3, #108	; 0x6c
    a08a:	71fb      	strb	r3, [r7, #7]
				strncpy((char *__restrict)(((CONFIG *)&settings_buffer)->name), "MULTISENSE NEEDS CONFIGURING...", sizeof(((CONFIG *)&settings_buffer)->name));
    a08c:	2221      	movs	r2, #33	; 0x21
    a08e:	4962      	ldr	r1, [pc, #392]	; (a218 <main_loop+0xa28>)
    a090:	9807      	ldr	r0, [sp, #28]
    a092:	4b62      	ldr	r3, [pc, #392]	; (a21c <main_loop+0xa2c>)
    a094:	4798      	blx	r3
				((CONFIG *)&settings_buffer)->ID = 0x00000000;
    a096:	f887 402c 	strb.w	r4, [r7, #44]	; 0x2c
    a09a:	f887 402d 	strb.w	r4, [r7, #45]	; 0x2d
    a09e:	f887 402e 	strb.w	r4, [r7, #46]	; 0x2e
    a0a2:	f887 402f 	strb.w	r4, [r7, #47]	; 0x2f
				((CONFIG *)&settings_buffer)->gain_cardA = 0xFF;
    a0a6:	23ff      	movs	r3, #255	; 0xff
    a0a8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
				((CONFIG *)&settings_buffer)->gain_cardB = 0xFF;
    a0ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				((CONFIG *)&settings_buffer)->loop_basestation = 0;
    a0b0:	f887 402b 	strb.w	r4, [r7, #43]	; 0x2b
				xprintf("MultiSense [configuration FORMATTED]\r\n");
    a0b4:	485a      	ldr	r0, [pc, #360]	; (a220 <main_loop+0xa30>)
    a0b6:	47a8      	blx	r5
				if (EEprom_settings(settings_buffer, SETTING_STRUCTURE_SIZE, 1) != ERR_NONE) {
    a0b8:	2201      	movs	r2, #1
    a0ba:	2180      	movs	r1, #128	; 0x80
    a0bc:	4638      	mov	r0, r7
    a0be:	4b59      	ldr	r3, [pc, #356]	; (a224 <main_loop+0xa34>)
    a0c0:	4798      	blx	r3
    a0c2:	2800      	cmp	r0, #0
    a0c4:	d043      	beq.n	a14e <main_loop+0x95e>
					xprintf("MultiSense [configuration ERROR WRITING]\r\n");
    a0c6:	4858      	ldr	r0, [pc, #352]	; (a228 <main_loop+0xa38>)
    a0c8:	47a8      	blx	r5
				xprintf(". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n\r\n");
    a0ca:	4858      	ldr	r0, [pc, #352]	; (a22c <main_loop+0xa3c>)
    a0cc:	4b50      	ldr	r3, [pc, #320]	; (a210 <main_loop+0xa20>)
    a0ce:	4798      	blx	r3
		if (!reboot_actioned) {
    a0d0:	4b57      	ldr	r3, [pc, #348]	; (a230 <main_loop+0xa40>)
    a0d2:	781b      	ldrb	r3, [r3, #0]
    a0d4:	2b00      	cmp	r3, #0
    a0d6:	f000 8283 	beq.w	a5e0 <main_loop+0xdf0>
		loopcount++;
    a0da:	4b56      	ldr	r3, [pc, #344]	; (a234 <main_loop+0xa44>)
    a0dc:	681b      	ldr	r3, [r3, #0]
    a0de:	3301      	adds	r3, #1
    a0e0:	4a54      	ldr	r2, [pc, #336]	; (a234 <main_loop+0xa44>)
    a0e2:	6013      	str	r3, [r2, #0]
		if (eth_check == 250) {
    a0e4:	9b04      	ldr	r3, [sp, #16]
    a0e6:	2bfa      	cmp	r3, #250	; 0xfa
    a0e8:	f43f ab90 	beq.w	980c <main_loop+0x1c>
			eth_check++;
    a0ec:	9b04      	ldr	r3, [sp, #16]
    a0ee:	3301      	adds	r3, #1
    a0f0:	9304      	str	r3, [sp, #16]
		bpdu_arrived = 0;
    a0f2:	2300      	movs	r3, #0
    a0f4:	9305      	str	r3, [sp, #20]
		if (reboot_actioned) {
    a0f6:	4b4e      	ldr	r3, [pc, #312]	; (a230 <main_loop+0xa40>)
    a0f8:	781b      	ldrb	r3, [r3, #0]
    a0fa:	2b00      	cmp	r3, #0
    a0fc:	d1ed      	bne.n	a0da <main_loop+0x8ea>
		if (refresh_gain) {
    a0fe:	4b4e      	ldr	r3, [pc, #312]	; (a238 <main_loop+0xa48>)
    a100:	781b      	ldrb	r3, [r3, #0]
    a102:	b163      	cbz	r3, a11e <main_loop+0x92e>
			if (cardA_type == CARD_VIBRATEK) {
    a104:	4b4d      	ldr	r3, [pc, #308]	; (a23c <main_loop+0xa4c>)
    a106:	781b      	ldrb	r3, [r3, #0]
    a108:	2b01      	cmp	r3, #1
    a10a:	f43f ac6c 	beq.w	99e6 <main_loop+0x1f6>
			if (cardB_type == CARD_VIBRATEK) {
    a10e:	4b4c      	ldr	r3, [pc, #304]	; (a240 <main_loop+0xa50>)
    a110:	781b      	ldrb	r3, [r3, #0]
    a112:	2b01      	cmp	r3, #1
    a114:	f43f ac77 	beq.w	9a06 <main_loop+0x216>
			refresh_gain = 0;
    a118:	2200      	movs	r2, #0
    a11a:	4b47      	ldr	r3, [pc, #284]	; (a238 <main_loop+0xa48>)
    a11c:	701a      	strb	r2, [r3, #0]
		if (((cardA_type == CARD_VIBRATEK) || (cardA_type == CARD_VIBRAPOINT)) && (card_sampleindex < SAMPLE_BUFFER_SIZE)) {
    a11e:	4b47      	ldr	r3, [pc, #284]	; (a23c <main_loop+0xa4c>)
    a120:	781b      	ldrb	r3, [r3, #0]
    a122:	2b01      	cmp	r3, #1
    a124:	f000 8269 	beq.w	a5fa <main_loop+0xe0a>
    a128:	2b04      	cmp	r3, #4
    a12a:	f000 8266 	beq.w	a5fa <main_loop+0xe0a>
		} else if (cardA_type == CARD_MAXI_IO)  {
    a12e:	2b03      	cmp	r3, #3
    a130:	f43f ad33 	beq.w	9b9a <main_loop+0x3aa>
		} else if (cardA_type == CARD_MINI_IO)  {
    a134:	2b02      	cmp	r3, #2
    a136:	f43f ad34 	beq.w	9ba2 <main_loop+0x3b2>
		} else if (cardA_type == CARD_PE)  {
    a13a:	2b05      	cmp	r3, #5
    a13c:	f43f adba 	beq.w	9cb4 <main_loop+0x4c4>
		} else if (cardA_type == CARD_NOTFITTED)  {
    a140:	2b00      	cmp	r3, #0
    a142:	f47f ad58 	bne.w	9bf6 <main_loop+0x406>
			delay_us(50);
    a146:	2032      	movs	r0, #50	; 0x32
    a148:	4b3e      	ldr	r3, [pc, #248]	; (a244 <main_loop+0xa54>)
    a14a:	4798      	blx	r3
    a14c:	e553      	b.n	9bf6 <main_loop+0x406>
					xprintf("MultiSense [configuration WRITTEN]\r\n");
    a14e:	483e      	ldr	r0, [pc, #248]	; (a248 <main_loop+0xa58>)
    a150:	4b2f      	ldr	r3, [pc, #188]	; (a210 <main_loop+0xa20>)
    a152:	4798      	blx	r3
    a154:	e7b9      	b.n	a0ca <main_loop+0x8da>
				xprintf("\r\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n");
    a156:	482d      	ldr	r0, [pc, #180]	; (a20c <main_loop+0xa1c>)
    a158:	4d2d      	ldr	r5, [pc, #180]	; (a210 <main_loop+0xa20>)
    a15a:	47a8      	blx	r5
				xprintf("<CLI DEBUG> [ID RESET] command\r\n", key);
    a15c:	4621      	mov	r1, r4
    a15e:	483b      	ldr	r0, [pc, #236]	; (a24c <main_loop+0xa5c>)
    a160:	47a8      	blx	r5
				((CONFIG *)&settings_buffer)->ID = 0x00000000;
    a162:	483b      	ldr	r0, [pc, #236]	; (a250 <main_loop+0xa60>)
    a164:	2300      	movs	r3, #0
    a166:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
    a16a:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    a16e:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
    a172:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
				if (EEprom_settings(settings_buffer, SETTING_STRUCTURE_SIZE, 1) != ERR_NONE) {
    a176:	2201      	movs	r2, #1
    a178:	2180      	movs	r1, #128	; 0x80
    a17a:	4b2a      	ldr	r3, [pc, #168]	; (a224 <main_loop+0xa34>)
    a17c:	4798      	blx	r3
    a17e:	b188      	cbz	r0, a1a4 <main_loop+0x9b4>
					xprintf("MultiSense [configuration ERROR WRITING]\r\n");
    a180:	4829      	ldr	r0, [pc, #164]	; (a228 <main_loop+0xa38>)
    a182:	47a8      	blx	r5
				wdt_disable(&WDT_0);
    a184:	4c33      	ldr	r4, [pc, #204]	; (a254 <main_loop+0xa64>)
    a186:	4620      	mov	r0, r4
    a188:	4b33      	ldr	r3, [pc, #204]	; (a258 <main_loop+0xa68>)
    a18a:	4798      	blx	r3
				wdt_set_timeout_period(&WDT_0, 100, 25);
    a18c:	2219      	movs	r2, #25
    a18e:	2164      	movs	r1, #100	; 0x64
    a190:	4620      	mov	r0, r4
    a192:	4b32      	ldr	r3, [pc, #200]	; (a25c <main_loop+0xa6c>)
    a194:	4798      	blx	r3
				wdt_enable(&WDT_0);
    a196:	4620      	mov	r0, r4
    a198:	4b31      	ldr	r3, [pc, #196]	; (a260 <main_loop+0xa70>)
    a19a:	4798      	blx	r3
				xprintf("Rebooting...\r\n");
    a19c:	4831      	ldr	r0, [pc, #196]	; (a264 <main_loop+0xa74>)
    a19e:	4b1c      	ldr	r3, [pc, #112]	; (a210 <main_loop+0xa20>)
    a1a0:	4798      	blx	r3
    a1a2:	e7fe      	b.n	a1a2 <main_loop+0x9b2>
					xprintf("MultiSense [configuration WRITTEN]\r\n");
    a1a4:	4828      	ldr	r0, [pc, #160]	; (a248 <main_loop+0xa58>)
    a1a6:	4b1a      	ldr	r3, [pc, #104]	; (a210 <main_loop+0xa20>)
    a1a8:	4798      	blx	r3
    a1aa:	e7eb      	b.n	a184 <main_loop+0x994>
				xprintf("\r\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n");
    a1ac:	4817      	ldr	r0, [pc, #92]	; (a20c <main_loop+0xa1c>)
    a1ae:	4c18      	ldr	r4, [pc, #96]	; (a210 <main_loop+0xa20>)
    a1b0:	47a0      	blx	r4
				xprintf("<CLI DEBUG> [BASESTATION] command\r\n");
    a1b2:	482d      	ldr	r0, [pc, #180]	; (a268 <main_loop+0xa78>)
    a1b4:	47a0      	blx	r4
				((CONFIG *)&settings_buffer)->loop_basestation = 1;
    a1b6:	2201      	movs	r2, #1
    a1b8:	f887 202b 	strb.w	r2, [r7, #43]	; 0x2b
				if (EEprom_settings(settings_buffer, SETTING_STRUCTURE_SIZE, 1) != ERR_NONE) {
    a1bc:	2180      	movs	r1, #128	; 0x80
    a1be:	4638      	mov	r0, r7
    a1c0:	4b18      	ldr	r3, [pc, #96]	; (a224 <main_loop+0xa34>)
    a1c2:	4798      	blx	r3
    a1c4:	b128      	cbz	r0, a1d2 <main_loop+0x9e2>
					xprintf("MultiSense [configuration ERROR WRITING]\r\n");
    a1c6:	4818      	ldr	r0, [pc, #96]	; (a228 <main_loop+0xa38>)
    a1c8:	47a0      	blx	r4
				xprintf(". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n\r\n");
    a1ca:	4818      	ldr	r0, [pc, #96]	; (a22c <main_loop+0xa3c>)
    a1cc:	4b10      	ldr	r3, [pc, #64]	; (a210 <main_loop+0xa20>)
    a1ce:	4798      	blx	r3
				break;
    a1d0:	e77e      	b.n	a0d0 <main_loop+0x8e0>
					xprintf("MultiSense [configuration WRITTEN]\r\n");
    a1d2:	481d      	ldr	r0, [pc, #116]	; (a248 <main_loop+0xa58>)
    a1d4:	4b0e      	ldr	r3, [pc, #56]	; (a210 <main_loop+0xa20>)
    a1d6:	4798      	blx	r3
    a1d8:	e7f7      	b.n	a1ca <main_loop+0x9da>
				xprintf("\r\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n");
    a1da:	480c      	ldr	r0, [pc, #48]	; (a20c <main_loop+0xa1c>)
    a1dc:	4c0c      	ldr	r4, [pc, #48]	; (a210 <main_loop+0xa20>)
    a1de:	47a0      	blx	r4
				xprintf("<CLI DEBUG> [PASS THROUGH] command\r\n");
    a1e0:	4822      	ldr	r0, [pc, #136]	; (a26c <main_loop+0xa7c>)
    a1e2:	47a0      	blx	r4
				((CONFIG *)&settings_buffer)->loop_basestation = 0;
    a1e4:	2300      	movs	r3, #0
    a1e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				if (EEprom_settings(settings_buffer, SETTING_STRUCTURE_SIZE, 1) != ERR_NONE) {
    a1ea:	2201      	movs	r2, #1
    a1ec:	2180      	movs	r1, #128	; 0x80
    a1ee:	4638      	mov	r0, r7
    a1f0:	4b0c      	ldr	r3, [pc, #48]	; (a224 <main_loop+0xa34>)
    a1f2:	4798      	blx	r3
    a1f4:	b128      	cbz	r0, a202 <main_loop+0xa12>
					xprintf("MultiSense [configuration ERROR WRITING]\r\n");
    a1f6:	480c      	ldr	r0, [pc, #48]	; (a228 <main_loop+0xa38>)
    a1f8:	47a0      	blx	r4
				xprintf(". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n\r\n");
    a1fa:	480c      	ldr	r0, [pc, #48]	; (a22c <main_loop+0xa3c>)
    a1fc:	4b04      	ldr	r3, [pc, #16]	; (a210 <main_loop+0xa20>)
    a1fe:	4798      	blx	r3
				break;
    a200:	e766      	b.n	a0d0 <main_loop+0x8e0>
					xprintf("MultiSense [configuration WRITTEN]\r\n");
    a202:	4811      	ldr	r0, [pc, #68]	; (a248 <main_loop+0xa58>)
    a204:	4b02      	ldr	r3, [pc, #8]	; (a210 <main_loop+0xa20>)
    a206:	4798      	blx	r3
    a208:	e7f7      	b.n	a1fa <main_loop+0xa0a>
    a20a:	bf00      	nop
    a20c:	00010544 	.word	0x00010544
    a210:	0000031d 	.word	0x0000031d
    a214:	000105fc 	.word	0x000105fc
    a218:	0000ffe8 	.word	0x0000ffe8
    a21c:	0000db2d 	.word	0x0000db2d
    a220:	00010008 	.word	0x00010008
    a224:	0000d8c9 	.word	0x0000d8c9
    a228:	00010030 	.word	0x00010030
    a22c:	000105b0 	.word	0x000105b0
    a230:	20007fbf 	.word	0x20007fbf
    a234:	2000758c 	.word	0x2000758c
    a238:	20008561 	.word	0x20008561
    a23c:	20007c6e 	.word	0x20007c6e
    a240:	20008564 	.word	0x20008564
    a244:	0000152d 	.word	0x0000152d
    a248:	0001005c 	.word	0x0001005c
    a24c:	0001062c 	.word	0x0001062c
    a250:	20007f2c 	.word	0x20007f2c
    a254:	20007474 	.word	0x20007474
    a258:	0000906d 	.word	0x0000906d
    a25c:	0000909d 	.word	0x0000909d
    a260:	000090d5 	.word	0x000090d5
    a264:	00010650 	.word	0x00010650
    a268:	00010660 	.word	0x00010660
    a26c:	00010684 	.word	0x00010684
				xprintf("\r\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n");
    a270:	488e      	ldr	r0, [pc, #568]	; (a4ac <main_loop+0xcbc>)
    a272:	4c8f      	ldr	r4, [pc, #572]	; (a4b0 <main_loop+0xcc0>)
    a274:	47a0      	blx	r4
				xprintf("<CLI DEBUG> [LIVE BOARD PRINT] command\r\n");
    a276:	488f      	ldr	r0, [pc, #572]	; (a4b4 <main_loop+0xcc4>)
    a278:	47a0      	blx	r4
				xprintf("<CLI DEBUG> ID               = %u\r\n", ((CONFIG *)&settings_buffer)->ID);
    a27a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    a27c:	488e      	ldr	r0, [pc, #568]	; (a4b8 <main_loop+0xcc8>)
    a27e:	47a0      	blx	r4
				xprintf("<CLI DEBUG> Name             = %s\r\n", ((CONFIG *)&settings_buffer)->name);
    a280:	9907      	ldr	r1, [sp, #28]
    a282:	488e      	ldr	r0, [pc, #568]	; (a4bc <main_loop+0xccc>)
    a284:	47a0      	blx	r4
				xprintf("<CLI DEBUG> gainA            = %d\r\n", ((CONFIG *)&settings_buffer)->gain_cardA);
    a286:	f897 1029 	ldrb.w	r1, [r7, #41]	; 0x29
    a28a:	488d      	ldr	r0, [pc, #564]	; (a4c0 <main_loop+0xcd0>)
    a28c:	47a0      	blx	r4
				xprintf("<CLI DEBUG> gainB            = %d\r\n", ((CONFIG *)&settings_buffer)->gain_cardB);
    a28e:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
    a292:	488c      	ldr	r0, [pc, #560]	; (a4c4 <main_loop+0xcd4>)
    a294:	47a0      	blx	r4
				xprintf("<CLI DEBUG> Mode             = %s\r\n", (((CONFIG *)&settings_buffer)->loop_basestation) ? "BASESTATION" : "PASS-THROUGH");
    a296:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
    a29a:	4b8b      	ldr	r3, [pc, #556]	; (a4c8 <main_loop+0xcd8>)
    a29c:	4a8b      	ldr	r2, [pc, #556]	; (a4cc <main_loop+0xcdc>)
    a29e:	2900      	cmp	r1, #0
    a2a0:	bf14      	ite	ne
    a2a2:	4611      	movne	r1, r2
    a2a4:	4619      	moveq	r1, r3
    a2a6:	488a      	ldr	r0, [pc, #552]	; (a4d0 <main_loop+0xce0>)
    a2a8:	47a0      	blx	r4
				xprintf("<CLI DEBUG> Water1           = %d\r\n", (int)readdata_water1);
    a2aa:	4b8a      	ldr	r3, [pc, #552]	; (a4d4 <main_loop+0xce4>)
    a2ac:	7819      	ldrb	r1, [r3, #0]
    a2ae:	488a      	ldr	r0, [pc, #552]	; (a4d8 <main_loop+0xce8>)
    a2b0:	47a0      	blx	r4
				xprintf("<CLI DEBUG> Water2           = %d\r\n", (int)readdata_water2);
    a2b2:	4b8a      	ldr	r3, [pc, #552]	; (a4dc <main_loop+0xcec>)
    a2b4:	7819      	ldrb	r1, [r3, #0]
    a2b6:	488a      	ldr	r0, [pc, #552]	; (a4e0 <main_loop+0xcf0>)
    a2b8:	47a0      	blx	r4
				xprintf("<CLI DEBUG> HV               = %d\r\n", (int)highvoltage);
    a2ba:	4b8a      	ldr	r3, [pc, #552]	; (a4e4 <main_loop+0xcf4>)
    a2bc:	7819      	ldrb	r1, [r3, #0]
    a2be:	488a      	ldr	r0, [pc, #552]	; (a4e8 <main_loop+0xcf8>)
    a2c0:	47a0      	blx	r4
				xprintf("<CLI DEBUG> Temp             = %d\r\n", ((((((int)readdata_tempmoisture[1] * 256)) + ((int)readdata_tempmoisture[0])) * 165) / 65536) - 40);
    a2c2:	4b8a      	ldr	r3, [pc, #552]	; (a4ec <main_loop+0xcfc>)
    a2c4:	785a      	ldrb	r2, [r3, #1]
    a2c6:	781b      	ldrb	r3, [r3, #0]
    a2c8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    a2cc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    a2d0:	eb13 1343 	adds.w	r3, r3, r3, lsl #5
    a2d4:	bf44      	itt	mi
    a2d6:	f503 437f 	addmi.w	r3, r3, #65280	; 0xff00
    a2da:	33ff      	addmi	r3, #255	; 0xff
    a2dc:	141b      	asrs	r3, r3, #16
    a2de:	f1a3 0128 	sub.w	r1, r3, #40	; 0x28
    a2e2:	4883      	ldr	r0, [pc, #524]	; (a4f0 <main_loop+0xd00>)
    a2e4:	4b72      	ldr	r3, [pc, #456]	; (a4b0 <main_loop+0xcc0>)
    a2e6:	4798      	blx	r3
				xprintf("<CLI DEBUG> Humidity         = %d\r\n", ((int)((((int)readdata_tempmoisture[3] * 256)) + ((int)readdata_tempmoisture[2])) * 100) / 65536);
    a2e8:	4b80      	ldr	r3, [pc, #512]	; (a4ec <main_loop+0xcfc>)
    a2ea:	78d9      	ldrb	r1, [r3, #3]
    a2ec:	789b      	ldrb	r3, [r3, #2]
    a2ee:	eb03 2301 	add.w	r3, r3, r1, lsl #8
    a2f2:	2164      	movs	r1, #100	; 0x64
    a2f4:	fb01 f103 	mul.w	r1, r1, r3
    a2f8:	2900      	cmp	r1, #0
    a2fa:	bfbc      	itt	lt
    a2fc:	f501 417f 	addlt.w	r1, r1, #65280	; 0xff00
    a300:	31ff      	addlt	r1, #255	; 0xff
    a302:	1409      	asrs	r1, r1, #16
    a304:	487b      	ldr	r0, [pc, #492]	; (a4f4 <main_loop+0xd04>)
    a306:	4b6a      	ldr	r3, [pc, #424]	; (a4b0 <main_loop+0xcc0>)
    a308:	4798      	blx	r3
				xprintf("<CLI DEBUG> Tamper           = %s\r\n", (tamper) ? "UP" : "DOWN");
    a30a:	4b7b      	ldr	r3, [pc, #492]	; (a4f8 <main_loop+0xd08>)
    a30c:	7819      	ldrb	r1, [r3, #0]
    a30e:	4b7b      	ldr	r3, [pc, #492]	; (a4fc <main_loop+0xd0c>)
    a310:	4a7b      	ldr	r2, [pc, #492]	; (a500 <main_loop+0xd10>)
    a312:	2900      	cmp	r1, #0
    a314:	bf14      	ite	ne
    a316:	4611      	movne	r1, r2
    a318:	4619      	moveq	r1, r3
    a31a:	487a      	ldr	r0, [pc, #488]	; (a504 <main_loop+0xd14>)
    a31c:	4b64      	ldr	r3, [pc, #400]	; (a4b0 <main_loop+0xcc0>)
    a31e:	4798      	blx	r3
				xprintf("<CLI DEBUG> Port1            = %s\r\n", (link_port1) ? "LINK OK" : "LINK DOWN");
    a320:	4b79      	ldr	r3, [pc, #484]	; (a508 <main_loop+0xd18>)
    a322:	7819      	ldrb	r1, [r3, #0]
    a324:	4b79      	ldr	r3, [pc, #484]	; (a50c <main_loop+0xd1c>)
    a326:	4a7a      	ldr	r2, [pc, #488]	; (a510 <main_loop+0xd20>)
    a328:	2900      	cmp	r1, #0
    a32a:	bf14      	ite	ne
    a32c:	4611      	movne	r1, r2
    a32e:	4619      	moveq	r1, r3
    a330:	4878      	ldr	r0, [pc, #480]	; (a514 <main_loop+0xd24>)
    a332:	4b5f      	ldr	r3, [pc, #380]	; (a4b0 <main_loop+0xcc0>)
    a334:	4798      	blx	r3
				xprintf("<CLI DEBUG> Port2            = %s\r\n", (link_port2) ? "LINK OK" : "LINK DOWN");
    a336:	4b78      	ldr	r3, [pc, #480]	; (a518 <main_loop+0xd28>)
    a338:	7819      	ldrb	r1, [r3, #0]
    a33a:	4b74      	ldr	r3, [pc, #464]	; (a50c <main_loop+0xd1c>)
    a33c:	4a74      	ldr	r2, [pc, #464]	; (a510 <main_loop+0xd20>)
    a33e:	2900      	cmp	r1, #0
    a340:	bf14      	ite	ne
    a342:	4611      	movne	r1, r2
    a344:	4619      	moveq	r1, r3
    a346:	4875      	ldr	r0, [pc, #468]	; (a51c <main_loop+0xd2c>)
    a348:	4b59      	ldr	r3, [pc, #356]	; (a4b0 <main_loop+0xcc0>)
    a34a:	4798      	blx	r3
				xprintf("<CLI DEBUG> Port3            = %s\r\n", (link_port3) ? "LINK OK" : "LINK DOWN");
    a34c:	4b74      	ldr	r3, [pc, #464]	; (a520 <main_loop+0xd30>)
    a34e:	7819      	ldrb	r1, [r3, #0]
    a350:	4b6e      	ldr	r3, [pc, #440]	; (a50c <main_loop+0xd1c>)
    a352:	4a6f      	ldr	r2, [pc, #444]	; (a510 <main_loop+0xd20>)
    a354:	2900      	cmp	r1, #0
    a356:	bf14      	ite	ne
    a358:	4611      	movne	r1, r2
    a35a:	4619      	moveq	r1, r3
    a35c:	4871      	ldr	r0, [pc, #452]	; (a524 <main_loop+0xd34>)
    a35e:	4b54      	ldr	r3, [pc, #336]	; (a4b0 <main_loop+0xcc0>)
    a360:	4798      	blx	r3
				xprintf("<CLI DEBUG> CardA            = %s\r\n", (cardA_type == CARD_NOTFITTED) ? "NOT FITTED" : (cardA_type == CARD_VIBRAPOINT) ? "VibraPoint" : (cardA_type == CARD_VIBRATEK) ? "VibraTek" :
    a362:	4b71      	ldr	r3, [pc, #452]	; (a528 <main_loop+0xd38>)
    a364:	781b      	ldrb	r3, [r3, #0]
    a366:	b16b      	cbz	r3, a384 <main_loop+0xb94>
    a368:	2b04      	cmp	r3, #4
    a36a:	d01e      	beq.n	a3aa <main_loop+0xbba>
    a36c:	2b01      	cmp	r3, #1
    a36e:	d01e      	beq.n	a3ae <main_loop+0xbbe>
					                                             (cardA_type == CARD_MAXI_IO) ? "Maxi IO" : (cardA_type == CARD_MINI_IO) ? "Mini IO" : (cardA_type == CARD_PE) ? "P&E" : "Unknown");
    a370:	2b03      	cmp	r3, #3
    a372:	d01e      	beq.n	a3b2 <main_loop+0xbc2>
    a374:	2b02      	cmp	r3, #2
    a376:	d01e      	beq.n	a3b6 <main_loop+0xbc6>
    a378:	4a6c      	ldr	r2, [pc, #432]	; (a52c <main_loop+0xd3c>)
    a37a:	496d      	ldr	r1, [pc, #436]	; (a530 <main_loop+0xd40>)
    a37c:	2b05      	cmp	r3, #5
    a37e:	bf18      	it	ne
    a380:	4611      	movne	r1, r2
    a382:	e000      	b.n	a386 <main_loop+0xb96>
				xprintf("<CLI DEBUG> CardA            = %s\r\n", (cardA_type == CARD_NOTFITTED) ? "NOT FITTED" : (cardA_type == CARD_VIBRAPOINT) ? "VibraPoint" : (cardA_type == CARD_VIBRATEK) ? "VibraTek" :
    a384:	496b      	ldr	r1, [pc, #428]	; (a534 <main_loop+0xd44>)
    a386:	486c      	ldr	r0, [pc, #432]	; (a538 <main_loop+0xd48>)
    a388:	4b49      	ldr	r3, [pc, #292]	; (a4b0 <main_loop+0xcc0>)
    a38a:	4798      	blx	r3
				xprintf("<CLI DEBUG> CardB            = %s\r\n", (cardB_type == CARD_NOTFITTED) ? "NOT FITTED" : (cardB_type == CARD_VIBRAPOINT) ? "VibraPoint" : (cardB_type == CARD_VIBRATEK) ? "VibraTek" :
    a38c:	4b6b      	ldr	r3, [pc, #428]	; (a53c <main_loop+0xd4c>)
    a38e:	781b      	ldrb	r3, [r3, #0]
    a390:	b19b      	cbz	r3, a3ba <main_loop+0xbca>
    a392:	2b04      	cmp	r3, #4
    a394:	d028      	beq.n	a3e8 <main_loop+0xbf8>
    a396:	2b01      	cmp	r3, #1
    a398:	d028      	beq.n	a3ec <main_loop+0xbfc>
																 (cardB_type == CARD_MAXI_IO) ? "Maxi IO" : (cardB_type == CARD_MINI_IO) ? "Mini IO" : "Unknown");
    a39a:	2b03      	cmp	r3, #3
    a39c:	d028      	beq.n	a3f0 <main_loop+0xc00>
    a39e:	4a63      	ldr	r2, [pc, #396]	; (a52c <main_loop+0xd3c>)
    a3a0:	4967      	ldr	r1, [pc, #412]	; (a540 <main_loop+0xd50>)
    a3a2:	2b02      	cmp	r3, #2
    a3a4:	bf18      	it	ne
    a3a6:	4611      	movne	r1, r2
    a3a8:	e008      	b.n	a3bc <main_loop+0xbcc>
				xprintf("<CLI DEBUG> CardA            = %s\r\n", (cardA_type == CARD_NOTFITTED) ? "NOT FITTED" : (cardA_type == CARD_VIBRAPOINT) ? "VibraPoint" : (cardA_type == CARD_VIBRATEK) ? "VibraTek" :
    a3aa:	4966      	ldr	r1, [pc, #408]	; (a544 <main_loop+0xd54>)
    a3ac:	e7eb      	b.n	a386 <main_loop+0xb96>
    a3ae:	4966      	ldr	r1, [pc, #408]	; (a548 <main_loop+0xd58>)
    a3b0:	e7e9      	b.n	a386 <main_loop+0xb96>
					                                             (cardA_type == CARD_MAXI_IO) ? "Maxi IO" : (cardA_type == CARD_MINI_IO) ? "Mini IO" : (cardA_type == CARD_PE) ? "P&E" : "Unknown");
    a3b2:	4966      	ldr	r1, [pc, #408]	; (a54c <main_loop+0xd5c>)
    a3b4:	e7e7      	b.n	a386 <main_loop+0xb96>
    a3b6:	4962      	ldr	r1, [pc, #392]	; (a540 <main_loop+0xd50>)
    a3b8:	e7e5      	b.n	a386 <main_loop+0xb96>
				xprintf("<CLI DEBUG> CardB            = %s\r\n", (cardB_type == CARD_NOTFITTED) ? "NOT FITTED" : (cardB_type == CARD_VIBRAPOINT) ? "VibraPoint" : (cardB_type == CARD_VIBRATEK) ? "VibraTek" :
    a3ba:	495e      	ldr	r1, [pc, #376]	; (a534 <main_loop+0xd44>)
    a3bc:	4864      	ldr	r0, [pc, #400]	; (a550 <main_loop+0xd60>)
    a3be:	4b3c      	ldr	r3, [pc, #240]	; (a4b0 <main_loop+0xcc0>)
    a3c0:	4798      	blx	r3
				xprintf("<CLI DEBUG> Ring Topology    = %s\r\n", (ring_broken == RING_BROKEN) ? "BROKEN" : (ring_broken == RING_CLOSED) ? "LOOP" : "N/A");
    a3c2:	4b64      	ldr	r3, [pc, #400]	; (a554 <main_loop+0xd64>)
    a3c4:	781b      	ldrb	r3, [r3, #0]
    a3c6:	2b01      	cmp	r3, #1
    a3c8:	d014      	beq.n	a3f4 <main_loop+0xc04>
    a3ca:	4a63      	ldr	r2, [pc, #396]	; (a558 <main_loop+0xd68>)
    a3cc:	4963      	ldr	r1, [pc, #396]	; (a55c <main_loop+0xd6c>)
    a3ce:	2b00      	cmp	r3, #0
    a3d0:	bf18      	it	ne
    a3d2:	4611      	movne	r1, r2
    a3d4:	4862      	ldr	r0, [pc, #392]	; (a560 <main_loop+0xd70>)
    a3d6:	4c36      	ldr	r4, [pc, #216]	; (a4b0 <main_loop+0xcc0>)
    a3d8:	47a0      	blx	r4
				xprintf("<CLI DEBUG> Firmware         = %d.%d\r\n", MULTISENSE_FIRMWARE_MAJOR, MULTISENSE_FIRMWARE_MINOR);
    a3da:	2201      	movs	r2, #1
    a3dc:	2100      	movs	r1, #0
    a3de:	4861      	ldr	r0, [pc, #388]	; (a564 <main_loop+0xd74>)
    a3e0:	47a0      	blx	r4
				xprintf(". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n\r\n");
    a3e2:	4861      	ldr	r0, [pc, #388]	; (a568 <main_loop+0xd78>)
    a3e4:	47a0      	blx	r4
				break;
    a3e6:	e673      	b.n	a0d0 <main_loop+0x8e0>
				xprintf("<CLI DEBUG> CardB            = %s\r\n", (cardB_type == CARD_NOTFITTED) ? "NOT FITTED" : (cardB_type == CARD_VIBRAPOINT) ? "VibraPoint" : (cardB_type == CARD_VIBRATEK) ? "VibraTek" :
    a3e8:	4956      	ldr	r1, [pc, #344]	; (a544 <main_loop+0xd54>)
    a3ea:	e7e7      	b.n	a3bc <main_loop+0xbcc>
    a3ec:	4956      	ldr	r1, [pc, #344]	; (a548 <main_loop+0xd58>)
    a3ee:	e7e5      	b.n	a3bc <main_loop+0xbcc>
																 (cardB_type == CARD_MAXI_IO) ? "Maxi IO" : (cardB_type == CARD_MINI_IO) ? "Mini IO" : "Unknown");
    a3f0:	4956      	ldr	r1, [pc, #344]	; (a54c <main_loop+0xd5c>)
    a3f2:	e7e3      	b.n	a3bc <main_loop+0xbcc>
				xprintf("<CLI DEBUG> Ring Topology    = %s\r\n", (ring_broken == RING_BROKEN) ? "BROKEN" : (ring_broken == RING_CLOSED) ? "LOOP" : "N/A");
    a3f4:	495d      	ldr	r1, [pc, #372]	; (a56c <main_loop+0xd7c>)
    a3f6:	e7ed      	b.n	a3d4 <main_loop+0xbe4>
				xprintf("\r\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n");
    a3f8:	482c      	ldr	r0, [pc, #176]	; (a4ac <main_loop+0xcbc>)
    a3fa:	4d2d      	ldr	r5, [pc, #180]	; (a4b0 <main_loop+0xcc0>)
    a3fc:	47a8      	blx	r5
				xprintf("<CLI DEBUG> [IP SCHEME / NETWORK] command\r\n");
    a3fe:	485c      	ldr	r0, [pc, #368]	; (a570 <main_loop+0xd80>)
    a400:	47a8      	blx	r5
				xprintf("<CLI DEBUG> IP               = %d.%d.%d.%d\r\n", uip_ipaddr2(ipaddr), uip_ipaddr1(ipaddr), uip_ipaddr4(ipaddr), uip_ipaddr3(ipaddr));
    a402:	4e5c      	ldr	r6, [pc, #368]	; (a574 <main_loop+0xd84>)
    a404:	8830      	ldrh	r0, [r6, #0]
    a406:	4c5c      	ldr	r4, [pc, #368]	; (a578 <main_loop+0xd88>)
    a408:	47a0      	blx	r4
    a40a:	4680      	mov	r8, r0
    a40c:	8830      	ldrh	r0, [r6, #0]
    a40e:	47a0      	blx	r4
    a410:	4681      	mov	r9, r0
    a412:	8870      	ldrh	r0, [r6, #2]
    a414:	47a0      	blx	r4
    a416:	4682      	mov	sl, r0
    a418:	8870      	ldrh	r0, [r6, #2]
    a41a:	47a0      	blx	r4
    a41c:	f3c0 200f 	ubfx	r0, r0, #8, #16
    a420:	9000      	str	r0, [sp, #0]
    a422:	fa5f f38a 	uxtb.w	r3, sl
    a426:	f3c9 220f 	ubfx	r2, r9, #8, #16
    a42a:	fa5f f188 	uxtb.w	r1, r8
    a42e:	4853      	ldr	r0, [pc, #332]	; (a57c <main_loop+0xd8c>)
    a430:	47a8      	blx	r5
				xprintf("<CLI DEBUG> Netmask          = %d.%d.%d.%d\r\n", uip_ipaddr2(netmask), uip_ipaddr1(netmask), uip_ipaddr4(netmask), uip_ipaddr3(netmask));
    a432:	4e53      	ldr	r6, [pc, #332]	; (a580 <main_loop+0xd90>)
    a434:	8830      	ldrh	r0, [r6, #0]
    a436:	47a0      	blx	r4
    a438:	4680      	mov	r8, r0
    a43a:	8830      	ldrh	r0, [r6, #0]
    a43c:	47a0      	blx	r4
    a43e:	4681      	mov	r9, r0
    a440:	8870      	ldrh	r0, [r6, #2]
    a442:	47a0      	blx	r4
    a444:	4682      	mov	sl, r0
    a446:	8870      	ldrh	r0, [r6, #2]
    a448:	47a0      	blx	r4
    a44a:	f3c0 200f 	ubfx	r0, r0, #8, #16
    a44e:	9000      	str	r0, [sp, #0]
    a450:	fa5f f38a 	uxtb.w	r3, sl
    a454:	f3c9 220f 	ubfx	r2, r9, #8, #16
    a458:	fa5f f188 	uxtb.w	r1, r8
    a45c:	4849      	ldr	r0, [pc, #292]	; (a584 <main_loop+0xd94>)
    a45e:	47a8      	blx	r5
				xprintf("<CLI DEBUG> Gateway          = %d.%d.%d.%d\r\n", uip_ipaddr2(gwaddr), uip_ipaddr1(gwaddr), uip_ipaddr4(gwaddr), uip_ipaddr3(gwaddr));
    a460:	4e49      	ldr	r6, [pc, #292]	; (a588 <main_loop+0xd98>)
    a462:	8830      	ldrh	r0, [r6, #0]
    a464:	47a0      	blx	r4
    a466:	4680      	mov	r8, r0
    a468:	8830      	ldrh	r0, [r6, #0]
    a46a:	47a0      	blx	r4
    a46c:	4681      	mov	r9, r0
    a46e:	8870      	ldrh	r0, [r6, #2]
    a470:	47a0      	blx	r4
    a472:	4682      	mov	sl, r0
    a474:	8870      	ldrh	r0, [r6, #2]
    a476:	47a0      	blx	r4
    a478:	f3c0 200f 	ubfx	r0, r0, #8, #16
    a47c:	9000      	str	r0, [sp, #0]
    a47e:	fa5f f38a 	uxtb.w	r3, sl
    a482:	f3c9 220f 	ubfx	r2, r9, #8, #16
    a486:	fa5f f188 	uxtb.w	r1, r8
    a48a:	4840      	ldr	r0, [pc, #256]	; (a58c <main_loop+0xd9c>)
    a48c:	47a8      	blx	r5
				xprintf("<CLI DEBUG> MAC              = %x:%x:%x:%x:%x:%x\r\n", mac_raw[0], mac_raw[1], mac_raw[2], mac_raw[3], mac_raw[4], mac_raw[5]);
    a48e:	4840      	ldr	r0, [pc, #256]	; (a590 <main_loop+0xda0>)
    a490:	7883      	ldrb	r3, [r0, #2]
    a492:	7842      	ldrb	r2, [r0, #1]
    a494:	7801      	ldrb	r1, [r0, #0]
    a496:	7944      	ldrb	r4, [r0, #5]
    a498:	9402      	str	r4, [sp, #8]
    a49a:	7904      	ldrb	r4, [r0, #4]
    a49c:	9401      	str	r4, [sp, #4]
    a49e:	78c0      	ldrb	r0, [r0, #3]
    a4a0:	9000      	str	r0, [sp, #0]
    a4a2:	483c      	ldr	r0, [pc, #240]	; (a594 <main_loop+0xda4>)
    a4a4:	47a8      	blx	r5
				xprintf(". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n\r\n");
    a4a6:	4830      	ldr	r0, [pc, #192]	; (a568 <main_loop+0xd78>)
    a4a8:	47a8      	blx	r5
				break;
    a4aa:	e611      	b.n	a0d0 <main_loop+0x8e0>
    a4ac:	00010544 	.word	0x00010544
    a4b0:	0000031d 	.word	0x0000031d
    a4b4:	000106ac 	.word	0x000106ac
    a4b8:	000106d8 	.word	0x000106d8
    a4bc:	000106fc 	.word	0x000106fc
    a4c0:	00010720 	.word	0x00010720
    a4c4:	00010744 	.word	0x00010744
    a4c8:	00010224 	.word	0x00010224
    a4cc:	00010218 	.word	0x00010218
    a4d0:	00010768 	.word	0x00010768
    a4d4:	20008562 	.word	0x20008562
    a4d8:	0001078c 	.word	0x0001078c
    a4dc:	2000854d 	.word	0x2000854d
    a4e0:	000107b0 	.word	0x000107b0
    a4e4:	20008557 	.word	0x20008557
    a4e8:	000107d4 	.word	0x000107d4
    a4ec:	20007fb8 	.word	0x20007fb8
    a4f0:	000107f8 	.word	0x000107f8
    a4f4:	0001081c 	.word	0x0001081c
    a4f8:	20007fb3 	.word	0x20007fb3
    a4fc:	0000e780 	.word	0x0000e780
    a500:	00010234 	.word	0x00010234
    a504:	00010840 	.word	0x00010840
    a508:	20007575 	.word	0x20007575
    a50c:	00010240 	.word	0x00010240
    a510:	00010238 	.word	0x00010238
    a514:	00010864 	.word	0x00010864
    a518:	20008294 	.word	0x20008294
    a51c:	00010888 	.word	0x00010888
    a520:	20007579 	.word	0x20007579
    a524:	000108ac 	.word	0x000108ac
    a528:	20007c6e 	.word	0x20007c6e
    a52c:	00010280 	.word	0x00010280
    a530:	00010288 	.word	0x00010288
    a534:	00010258 	.word	0x00010258
    a538:	000108d0 	.word	0x000108d0
    a53c:	20008564 	.word	0x20008564
    a540:	00010278 	.word	0x00010278
    a544:	0001024c 	.word	0x0001024c
    a548:	00010264 	.word	0x00010264
    a54c:	00010270 	.word	0x00010270
    a550:	000108f4 	.word	0x000108f4
    a554:	2000826d 	.word	0x2000826d
    a558:	0001028c 	.word	0x0001028c
    a55c:	00010298 	.word	0x00010298
    a560:	00010918 	.word	0x00010918
    a564:	0001093c 	.word	0x0001093c
    a568:	000105b0 	.word	0x000105b0
    a56c:	00010290 	.word	0x00010290
    a570:	00010964 	.word	0x00010964
    a574:	20007598 	.word	0x20007598
    a578:	0000c889 	.word	0x0000c889
    a57c:	00010990 	.word	0x00010990
    a580:	20007f28 	.word	0x20007f28
    a584:	000109c0 	.word	0x000109c0
    a588:	20008544 	.word	0x20008544
    a58c:	000109f0 	.word	0x000109f0
    a590:	20007fac 	.word	0x20007fac
    a594:	00010a20 	.word	0x00010a20
				xprintf("\r\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n");
    a598:	4831      	ldr	r0, [pc, #196]	; (a660 <main_loop+0xe70>)
    a59a:	4c32      	ldr	r4, [pc, #200]	; (a664 <main_loop+0xe74>)
    a59c:	47a0      	blx	r4
				xprintf("<CLI DEBUG> [SPEED MAINLOOP] command\r\n");
    a59e:	4832      	ldr	r0, [pc, #200]	; (a668 <main_loop+0xe78>)
    a5a0:	47a0      	blx	r4
				xprintf("<CLI DEBUG> Main-loop/Sampling = %d\r\n", looprate);
    a5a2:	4b32      	ldr	r3, [pc, #200]	; (a66c <main_loop+0xe7c>)
    a5a4:	6819      	ldr	r1, [r3, #0]
    a5a6:	4832      	ldr	r0, [pc, #200]	; (a670 <main_loop+0xe80>)
    a5a8:	47a0      	blx	r4
				xprintf(". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n\r\n");
    a5aa:	4832      	ldr	r0, [pc, #200]	; (a674 <main_loop+0xe84>)
    a5ac:	47a0      	blx	r4
				break;
    a5ae:	e58f      	b.n	a0d0 <main_loop+0x8e0>
				xprintf("\r\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n");
    a5b0:	482b      	ldr	r0, [pc, #172]	; (a660 <main_loop+0xe70>)
    a5b2:	4c2c      	ldr	r4, [pc, #176]	; (a664 <main_loop+0xe74>)
    a5b4:	47a0      	blx	r4
				xprintf("<CLI DEBUG> Unknown command\r\n\r\nHelp Screen:\r\n\r\n");
    a5b6:	4830      	ldr	r0, [pc, #192]	; (a678 <main_loop+0xe88>)
    a5b8:	47a0      	blx	r4
				xprintf("R         [REBOOT] command\r\n");
    a5ba:	4830      	ldr	r0, [pc, #192]	; (a67c <main_loop+0xe8c>)
    a5bc:	47a0      	blx	r4
				xprintf("D         [CONFIGURATION DEFAULT] command\r\n");
    a5be:	4830      	ldr	r0, [pc, #192]	; (a680 <main_loop+0xe90>)
    a5c0:	47a0      	blx	r4
				xprintf("X         [ID RESET] command\r\n");
    a5c2:	4830      	ldr	r0, [pc, #192]	; (a684 <main_loop+0xe94>)
    a5c4:	47a0      	blx	r4
				xprintf("B         [BASESTATION] command\r\n");
    a5c6:	4830      	ldr	r0, [pc, #192]	; (a688 <main_loop+0xe98>)
    a5c8:	47a0      	blx	r4
				xprintf("P         [PASS THROUGH] command\r\n");
    a5ca:	4830      	ldr	r0, [pc, #192]	; (a68c <main_loop+0xe9c>)
    a5cc:	47a0      	blx	r4
				xprintf("L         [LIVE BOARD PRINT] command\r\n");
    a5ce:	4830      	ldr	r0, [pc, #192]	; (a690 <main_loop+0xea0>)
    a5d0:	47a0      	blx	r4
				xprintf("I         [IP SCHEME / NETWORK] command\r\n");
    a5d2:	4830      	ldr	r0, [pc, #192]	; (a694 <main_loop+0xea4>)
    a5d4:	47a0      	blx	r4
				xprintf("S         [SPEED MAINLOOP] command\r\n\r\n");
    a5d6:	4830      	ldr	r0, [pc, #192]	; (a698 <main_loop+0xea8>)
    a5d8:	47a0      	blx	r4
				xprintf(". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n\r\n");
    a5da:	4826      	ldr	r0, [pc, #152]	; (a674 <main_loop+0xe84>)
    a5dc:	47a0      	blx	r4
				break;
    a5de:	e577      	b.n	a0d0 <main_loop+0x8e0>
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 */
static inline int32_t wdt_feed(struct wdt_descriptor *const wdt)
{
	ASSERT(wdt && wdt->dev.hw);
    a5e0:	4c2e      	ldr	r4, [pc, #184]	; (a69c <main_loop+0xeac>)
    a5e2:	6820      	ldr	r0, [r4, #0]
    a5e4:	22a9      	movs	r2, #169	; 0xa9
    a5e6:	492e      	ldr	r1, [pc, #184]	; (a6a0 <main_loop+0xeb0>)
    a5e8:	3000      	adds	r0, #0
    a5ea:	bf18      	it	ne
    a5ec:	2001      	movne	r0, #1
    a5ee:	4b2d      	ldr	r3, [pc, #180]	; (a6a4 <main_loop+0xeb4>)
    a5f0:	4798      	blx	r3

	return _wdt_feed(&wdt->dev);
    a5f2:	4620      	mov	r0, r4
    a5f4:	4b2c      	ldr	r3, [pc, #176]	; (a6a8 <main_loop+0xeb8>)
    a5f6:	4798      	blx	r3
    a5f8:	e56f      	b.n	a0da <main_loop+0x8ea>
		if (((cardA_type == CARD_VIBRATEK) || (cardA_type == CARD_VIBRAPOINT)) && (card_sampleindex < SAMPLE_BUFFER_SIZE)) {
    a5fa:	4b2c      	ldr	r3, [pc, #176]	; (a6ac <main_loop+0xebc>)
    a5fc:	681b      	ldr	r3, [r3, #0]
    a5fe:	f5b3 7f2b 	cmp.w	r3, #684	; 0x2ac
    a602:	f4ff aa49 	bcc.w	9a98 <main_loop+0x2a8>
		if (((cardB_type == CARD_VIBRATEK) || (cardB_type == CARD_VIBRAPOINT)) && (card_sampleindex < SAMPLE_BUFFER_SIZE)) {
    a606:	4b2a      	ldr	r3, [pc, #168]	; (a6b0 <main_loop+0xec0>)
    a608:	781b      	ldrb	r3, [r3, #0]
    a60a:	2b01      	cmp	r3, #1
    a60c:	f47f aaf8 	bne.w	9c00 <main_loop+0x410>
    a610:	e005      	b.n	a61e <main_loop+0xe2e>
    a612:	4b26      	ldr	r3, [pc, #152]	; (a6ac <main_loop+0xebc>)
    a614:	681b      	ldr	r3, [r3, #0]
    a616:	f5b3 7f2b 	cmp.w	r3, #684	; 0x2ac
    a61a:	f4ff ab99 	bcc.w	9d50 <main_loop+0x560>
		if ((cardA_type == CARD_VIBRATEK) || (cardB_type == CARD_VIBRATEK) || (cardA_type == CARD_VIBRAPOINT) || (cardB_type == CARD_VIBRAPOINT)) {
    a61e:	4b25      	ldr	r3, [pc, #148]	; (a6b4 <main_loop+0xec4>)
    a620:	781b      	ldrb	r3, [r3, #0]
    a622:	2b01      	cmp	r3, #1
    a624:	f43f ac3d 	beq.w	9ea2 <main_loop+0x6b2>
    a628:	4a21      	ldr	r2, [pc, #132]	; (a6b0 <main_loop+0xec0>)
    a62a:	7812      	ldrb	r2, [r2, #0]
    a62c:	2a01      	cmp	r2, #1
    a62e:	f43f ac38 	beq.w	9ea2 <main_loop+0x6b2>
    a632:	2b04      	cmp	r3, #4
    a634:	f43f ac35 	beq.w	9ea2 <main_loop+0x6b2>
    a638:	2a04      	cmp	r2, #4
    a63a:	f43f ac32 	beq.w	9ea2 <main_loop+0x6b2>
		} else if (readenvironment == 1) {
    a63e:	4b1e      	ldr	r3, [pc, #120]	; (a6b8 <main_loop+0xec8>)
    a640:	781b      	ldrb	r3, [r3, #0]
    a642:	2b01      	cmp	r3, #1
    a644:	f47f ac34 	bne.w	9eb0 <main_loop+0x6c0>
			readenvironment = 2;
    a648:	2202      	movs	r2, #2
    a64a:	4b1b      	ldr	r3, [pc, #108]	; (a6b8 <main_loop+0xec8>)
    a64c:	701a      	strb	r2, [r3, #0]
    a64e:	e42f      	b.n	9eb0 <main_loop+0x6c0>
		if ((cardA_type == CARD_VIBRATEK) || (cardB_type == CARD_VIBRATEK) || (cardA_type == CARD_VIBRAPOINT) || (cardB_type == CARD_VIBRAPOINT)) {
    a650:	4b18      	ldr	r3, [pc, #96]	; (a6b4 <main_loop+0xec4>)
    a652:	781b      	ldrb	r3, [r3, #0]
    a654:	2b01      	cmp	r3, #1
    a656:	f43f ac24 	beq.w	9ea2 <main_loop+0x6b2>
    a65a:	4a15      	ldr	r2, [pc, #84]	; (a6b0 <main_loop+0xec0>)
    a65c:	7812      	ldrb	r2, [r2, #0]
    a65e:	e7e8      	b.n	a632 <main_loop+0xe42>
    a660:	00010544 	.word	0x00010544
    a664:	0000031d 	.word	0x0000031d
    a668:	00010a54 	.word	0x00010a54
    a66c:	20008578 	.word	0x20008578
    a670:	00010a7c 	.word	0x00010a7c
    a674:	000105b0 	.word	0x000105b0
    a678:	00010aa4 	.word	0x00010aa4
    a67c:	00010ad4 	.word	0x00010ad4
    a680:	00010af4 	.word	0x00010af4
    a684:	00010b20 	.word	0x00010b20
    a688:	00010b40 	.word	0x00010b40
    a68c:	00010b64 	.word	0x00010b64
    a690:	00010b88 	.word	0x00010b88
    a694:	00010bb0 	.word	0x00010bb0
    a698:	00010bdc 	.word	0x00010bdc
    a69c:	20007474 	.word	0x20007474
    a6a0:	0000ec30 	.word	0x0000ec30
    a6a4:	000026b1 	.word	0x000026b1
    a6a8:	00005461 	.word	0x00005461
    a6ac:	20008548 	.word	0x20008548
    a6b0:	20008564 	.word	0x20008564
    a6b4:	20007c6e 	.word	0x20007c6e
    a6b8:	2000826c 	.word	0x2000826c

0000a6bc <main>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: Main start-point of whole application code
// Returns:     Nothing (NULL)
// *****************************************************************************************************************************************************************
int main(void)
{
    a6bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a6c0:	b084      	sub	sp, #16
	unsigned char	ID_index;
	unsigned char	ID_string[9];
	unsigned int	new_id;
			
	/* Initialize the lower-level Atmel drivers, hardware and HAL interface */
	atmel_start_init();
    a6c2:	4b81      	ldr	r3, [pc, #516]	; (a8c8 <main+0x20c>)
    a6c4:	4798      	blx	r3
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    a6c6:	4a81      	ldr	r2, [pc, #516]	; (a8cc <main+0x210>)
    a6c8:	f240 73fc 	movw	r3, #2044	; 0x7fc
    a6cc:	6b11      	ldr	r1, [r2, #48]	; 0x30
    a6ce:	4219      	tst	r1, r3
    a6d0:	d1fc      	bne.n	a6cc <main+0x10>
	((Adc *)hw)->DSEQCTRL.reg |= ADC_DSEQCTRL_INPUTCTRL;
    a6d2:	4a7e      	ldr	r2, [pc, #504]	; (a8cc <main+0x210>)
    a6d4:	6b93      	ldr	r3, [r2, #56]	; 0x38
    a6d6:	f043 0301 	orr.w	r3, r3, #1
    a6da:	6393      	str	r3, [r2, #56]	; 0x38
	hri_adc_set_DSEQCTRL_INPUTCTRL_bit(ADC0);    //enable DMA update of the Input Control register
	// Similar to above call, other functions like CTRLB reg REFCTRL etc.. can be added to
	// DMA update sequence by writing the respective DSEQCTRL bit

	/* Set DMA source and destination */
	_dma_set_source_address(DMA_CHANNEL_0, (const void *const)inputctrl_buff);
    a6dc:	497c      	ldr	r1, [pc, #496]	; (a8d0 <main+0x214>)
    a6de:	2000      	movs	r0, #0
    a6e0:	4b7c      	ldr	r3, [pc, #496]	; (a8d4 <main+0x218>)
    a6e2:	4798      	blx	r3
	_dma_set_destination_address(DMA_CHANNEL_0, (void *)(uint32_t) &(ADC0->DSEQDATA.reg));
    a6e4:	497c      	ldr	r1, [pc, #496]	; (a8d8 <main+0x21c>)
    a6e6:	2000      	movs	r0, #0
    a6e8:	4b7c      	ldr	r3, [pc, #496]	; (a8dc <main+0x220>)
    a6ea:	4798      	blx	r3
	_dma_set_data_amount(DMA_CHANNEL_0, SEQ_LENGTH);
    a6ec:	210a      	movs	r1, #10
    a6ee:	2000      	movs	r0, #0
    a6f0:	4b7b      	ldr	r3, [pc, #492]	; (a8e0 <main+0x224>)
    a6f2:	4798      	blx	r3
	_dma_enable_transaction(DMA_CHANNEL_0, false);
    a6f4:	2100      	movs	r1, #0
    a6f6:	4608      	mov	r0, r1
    a6f8:	4b7a      	ldr	r3, [pc, #488]	; (a8e4 <main+0x228>)
    a6fa:	4798      	blx	r3
	
	usart_async_get_io_descriptor(&USART_1, &io);
    a6fc:	4c7a      	ldr	r4, [pc, #488]	; (a8e8 <main+0x22c>)
    a6fe:	497b      	ldr	r1, [pc, #492]	; (a8ec <main+0x230>)
    a700:	4620      	mov	r0, r4
    a702:	4b7b      	ldr	r3, [pc, #492]	; (a8f0 <main+0x234>)
    a704:	4798      	blx	r3
	usart_async_register_callback(&USART_1, USART_ASYNC_TXC_CB, tx_callb);
    a706:	4a7b      	ldr	r2, [pc, #492]	; (a8f4 <main+0x238>)
    a708:	2101      	movs	r1, #1
    a70a:	4620      	mov	r0, r4
    a70c:	4d7a      	ldr	r5, [pc, #488]	; (a8f8 <main+0x23c>)
    a70e:	47a8      	blx	r5
	usart_async_register_callback(&USART_1, USART_ASYNC_RXC_CB, rx_callb);
    a710:	4a7a      	ldr	r2, [pc, #488]	; (a8fc <main+0x240>)
    a712:	2100      	movs	r1, #0
    a714:	4620      	mov	r0, r4
    a716:	47a8      	blx	r5
	usart_async_enable(&USART_1);
    a718:	4620      	mov	r0, r4
    a71a:	4b79      	ldr	r3, [pc, #484]	; (a900 <main+0x244>)
    a71c:	4798      	blx	r3
	
	xprintf("\n\n\n\n\n\n\n\n\n\n\n\n---------------------------------------------------------------------------------------------------------------------\r\n");
    a71e:	4879      	ldr	r0, [pc, #484]	; (a904 <main+0x248>)
    a720:	4c79      	ldr	r4, [pc, #484]	; (a908 <main+0x24c>)
    a722:	47a0      	blx	r4
	xprintf("MultiSense [START]\r\n");
    a724:	4879      	ldr	r0, [pc, #484]	; (a90c <main+0x250>)
    a726:	47a0      	blx	r4
	xprintf("---------------------------------------------------------------------------------------------------------------------\r\n");
    a728:	4879      	ldr	r0, [pc, #484]	; (a910 <main+0x254>)
    a72a:	47a0      	blx	r4

	/* Clear and initialize the global variables */
	var_init();
    a72c:	4b79      	ldr	r3, [pc, #484]	; (a914 <main+0x258>)
    a72e:	4798      	blx	r3
	xprintf("MultiSense [init global-variables done]\r\n");
    a730:	4879      	ldr	r0, [pc, #484]	; (a918 <main+0x25c>)
    a732:	47a0      	blx	r4

	/* Set-up the none-hardware utilized GPIO pins */
	gpio_init();
    a734:	4b79      	ldr	r3, [pc, #484]	; (a91c <main+0x260>)
    a736:	4798      	blx	r3
	xprintf("MultiSense [init I/O done]\r\n");
    a738:	4879      	ldr	r0, [pc, #484]	; (a920 <main+0x264>)
    a73a:	47a0      	blx	r4

	/* Set-up the SPI bus and the USB host stack */
	comms_init();
    a73c:	4b79      	ldr	r3, [pc, #484]	; (a924 <main+0x268>)
    a73e:	4798      	blx	r3
	xprintf("MultiSense [init SPI & USB done]\r\n");
    a740:	4879      	ldr	r0, [pc, #484]	; (a928 <main+0x26c>)
    a742:	47a0      	blx	r4

	/* Reset the Ethernet SWITCH IC via GPIO reset line */
	switch_init();
    a744:	4b79      	ldr	r3, [pc, #484]	; (a92c <main+0x270>)
    a746:	4798      	blx	r3
	xprintf("MultiSense [Ethernet SWITCH reset]\r\n");
    a748:	4879      	ldr	r0, [pc, #484]	; (a930 <main+0x274>)
    a74a:	47a0      	blx	r4

	/* Initialize the Ethernet SWITCH IC via the SPI bus */
	switch_configure();
    a74c:	4b79      	ldr	r3, [pc, #484]	; (a934 <main+0x278>)
    a74e:	4798      	blx	r3
	xprintf("MultiSense [init SWITCH done]\r\n");
    a750:	4879      	ldr	r0, [pc, #484]	; (a938 <main+0x27c>)
    a752:	47a0      	blx	r4

	/* Define and start the main timer as 1/10th of a second ticker */
	timer_setup();
    a754:	4b79      	ldr	r3, [pc, #484]	; (a93c <main+0x280>)
    a756:	4798      	blx	r3
	xprintf("MultiSense [init TIMER done]\r\n");
    a758:	4879      	ldr	r0, [pc, #484]	; (a940 <main+0x284>)
    a75a:	47a0      	blx	r4

	/* Internal on-chip ADC feature initialization, used for the water detection feature */
	ADC_init();
    a75c:	4b79      	ldr	r3, [pc, #484]	; (a944 <main+0x288>)
    a75e:	4798      	blx	r3
	xprintf("MultiSense [init ADC done]\r\n");
    a760:	4879      	ldr	r0, [pc, #484]	; (a948 <main+0x28c>)
    a762:	47a0      	blx	r4

	/* Enable and configure the Cryptography on-chip engine with the AES 128-bit private-key */
	crypto_init();
    a764:	4b79      	ldr	r3, [pc, #484]	; (a94c <main+0x290>)
    a766:	4798      	blx	r3
	xprintf("MultiSense [init CRYPTO done]\r\n");
    a768:	4879      	ldr	r0, [pc, #484]	; (a950 <main+0x294>)
    a76a:	47a0      	blx	r4

	/* IP stack initialization */
	uip_init();																									// initialize the IP stack
    a76c:	4b79      	ldr	r3, [pc, #484]	; (a954 <main+0x298>)
    a76e:	4798      	blx	r3
	xprintf("MultiSense [init uIP done]\r\n");
    a770:	4879      	ldr	r0, [pc, #484]	; (a958 <main+0x29c>)
    a772:	47a0      	blx	r4

	/* Set the board MAC and IP address along with the network schemes */
	address_configure();
    a774:	4b79      	ldr	r3, [pc, #484]	; (a95c <main+0x2a0>)
    a776:	4798      	blx	r3

	if (((CONFIG *)&settings_buffer)->ID > 0x00000000) {
    a778:	4b79      	ldr	r3, [pc, #484]	; (a960 <main+0x2a4>)
    a77a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    a77c:	b1ab      	cbz	r3, a7aa <main+0xee>
		/* Initialize the ring loop topology function */
		ring_init((unsigned char)(((CONFIG *)&settings_buffer)->loop_basestation), (unsigned char *)&mac_raw);
    a77e:	4979      	ldr	r1, [pc, #484]	; (a964 <main+0x2a8>)
    a780:	4b77      	ldr	r3, [pc, #476]	; (a960 <main+0x2a4>)
    a782:	f893 002b 	ldrb.w	r0, [r3, #43]	; 0x2b
    a786:	4b78      	ldr	r3, [pc, #480]	; (a968 <main+0x2ac>)
    a788:	4798      	blx	r3
		xprintf("********************************************************************************************\r\n\r\n");
	}
	
	/* Create, enable and start the system watchdog (4 seconds timeout period) */
	
	watchdog_init();
    a78a:	4b78      	ldr	r3, [pc, #480]	; (a96c <main+0x2b0>)
    a78c:	4798      	blx	r3
	
	if (((CONFIG *)&settings_buffer)->ID > 0x00000000) {
    a78e:	4b74      	ldr	r3, [pc, #464]	; (a960 <main+0x2a4>)
    a790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    a792:	b9c3      	cbnz	r3, a7c6 <main+0x10a>
		xprintf("MultiSense [boot-up & init completed]\r\n");
		xprintf("- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\r\n");
	} else {
		do {
			xprintf("\r\nEnter new [ID] now:\r\n");
    a794:	f8df 923c 	ldr.w	r9, [pc, #572]	; a9d4 <main+0x318>
    a798:	f8df 816c 	ldr.w	r8, [pc, #364]	; a908 <main+0x24c>
			/* check for a character being pressed on the CLI keyboard */
					
			ID_index = 0;
					
			while (1) {
				if (io_read((struct io_descriptor *const)io, (uint8_t *const)&ch, 1)) {
    a79c:	4e53      	ldr	r6, [pc, #332]	; (a8ec <main+0x230>)
    a79e:	4d74      	ldr	r5, [pc, #464]	; (a970 <main+0x2b4>)
	ASSERT(wdt && wdt->dev.hw);
    a7a0:	4f74      	ldr	r7, [pc, #464]	; (a974 <main+0x2b8>)
			xprintf("\r\nEnter new [ID] now:\r\n");
    a7a2:	4648      	mov	r0, r9
    a7a4:	47c0      	blx	r8
			ID_index = 0;
    a7a6:	2400      	movs	r4, #0
    a7a8:	e026      	b.n	a7f8 <main+0x13c>
		xprintf("********************************************************************************************\r\n");
    a7aa:	4873      	ldr	r0, [pc, #460]	; (a978 <main+0x2bc>)
    a7ac:	4c56      	ldr	r4, [pc, #344]	; (a908 <main+0x24c>)
    a7ae:	47a0      	blx	r4
		xprintf("* THE MULTI-SENSE DEVICE [ID] HAS NOT BEEN SET. THIS DEFICE WILL NOT FUNCTION OR RUN AS    *\r\n");
    a7b0:	4872      	ldr	r0, [pc, #456]	; (a97c <main+0x2c0>)
    a7b2:	47a0      	blx	r4
		xprintf("* NORMAL UNTIL THE [ID] NUMBER HAS BEEN ENTERED BY THIS TERMINAL FACILITY.                 *\r\n");
    a7b4:	4872      	ldr	r0, [pc, #456]	; (a980 <main+0x2c4>)
    a7b6:	47a0      	blx	r4
		xprintf("* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  *\r\n");
    a7b8:	4872      	ldr	r0, [pc, #456]	; (a984 <main+0x2c8>)
    a7ba:	47a0      	blx	r4
		xprintf("* PLEASE ENTER THE 32-BIT DEVICE [ID] BELOW:                                               *\r\n");
    a7bc:	4872      	ldr	r0, [pc, #456]	; (a988 <main+0x2cc>)
    a7be:	47a0      	blx	r4
		xprintf("********************************************************************************************\r\n\r\n");
    a7c0:	4872      	ldr	r0, [pc, #456]	; (a98c <main+0x2d0>)
    a7c2:	47a0      	blx	r4
    a7c4:	e7e1      	b.n	a78a <main+0xce>
		xprintf("MultiSense [boot-up & init completed]\r\n");
    a7c6:	4872      	ldr	r0, [pc, #456]	; (a990 <main+0x2d4>)
    a7c8:	4c4f      	ldr	r4, [pc, #316]	; (a908 <main+0x24c>)
    a7ca:	47a0      	blx	r4
		xprintf("- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\r\n");
    a7cc:	4871      	ldr	r0, [pc, #452]	; (a994 <main+0x2d8>)
    a7ce:	47a0      	blx	r4
		}
		while (1);
	}
	
	/* Run the main-loop */
	main_loop();
    a7d0:	4b71      	ldr	r3, [pc, #452]	; (a998 <main+0x2dc>)
    a7d2:	4798      	blx	r3
						if (ID_index) {
    a7d4:	b184      	cbz	r4, a7f8 <main+0x13c>
							ID_index--;
    a7d6:	3c01      	subs	r4, #1
    a7d8:	b2e4      	uxtb	r4, r4
    a7da:	e00d      	b.n	a7f8 <main+0x13c>
    a7dc:	f8df a1dc 	ldr.w	sl, [pc, #476]	; a9bc <main+0x300>
    a7e0:	f8da 0000 	ldr.w	r0, [sl]
    a7e4:	22a9      	movs	r2, #169	; 0xa9
    a7e6:	4639      	mov	r1, r7
    a7e8:	3000      	adds	r0, #0
    a7ea:	bf18      	it	ne
    a7ec:	2001      	movne	r0, #1
    a7ee:	4b6b      	ldr	r3, [pc, #428]	; (a99c <main+0x2e0>)
    a7f0:	4798      	blx	r3
	return _wdt_feed(&wdt->dev);
    a7f2:	4650      	mov	r0, sl
    a7f4:	4b6a      	ldr	r3, [pc, #424]	; (a9a0 <main+0x2e4>)
    a7f6:	4798      	blx	r3
				if (io_read((struct io_descriptor *const)io, (uint8_t *const)&ch, 1)) {
    a7f8:	2201      	movs	r2, #1
    a7fa:	f10d 010f 	add.w	r1, sp, #15
    a7fe:	6830      	ldr	r0, [r6, #0]
    a800:	47a8      	blx	r5
    a802:	2800      	cmp	r0, #0
    a804:	d0ea      	beq.n	a7dc <main+0x120>
					if ((unsigned char)ch == 10) {
    a806:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a80a:	2b0a      	cmp	r3, #10
    a80c:	d0f4      	beq.n	a7f8 <main+0x13c>
					if ((unsigned char)ch == 8) {
    a80e:	2b08      	cmp	r3, #8
    a810:	d0e0      	beq.n	a7d4 <main+0x118>
					if ((unsigned char)ch == 13) {
    a812:	2b0d      	cmp	r3, #13
    a814:	d00d      	beq.n	a832 <main+0x176>
					if ((unsigned char)ch < '0') {
    a816:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    a81a:	b2d2      	uxtb	r2, r2
    a81c:	2a09      	cmp	r2, #9
    a81e:	d8eb      	bhi.n	a7f8 <main+0x13c>
					if (ID_index == 8) {
    a820:	2c08      	cmp	r4, #8
    a822:	d0e9      	beq.n	a7f8 <main+0x13c>
					ID_string[ID_index++] = (unsigned char)ch;
    a824:	1c62      	adds	r2, r4, #1
    a826:	a904      	add	r1, sp, #16
    a828:	440c      	add	r4, r1
    a82a:	f804 3c0c 	strb.w	r3, [r4, #-12]
    a82e:	b2d4      	uxtb	r4, r2
    a830:	e7d4      	b.n	a7dc <main+0x120>
			ID_string[ID_index] = 0;
    a832:	ab04      	add	r3, sp, #16
    a834:	441c      	add	r4, r3
    a836:	2300      	movs	r3, #0
    a838:	f804 3c0c 	strb.w	r3, [r4, #-12]
			xprintf("ID entered: %s\r\n", ID_string);
    a83c:	a901      	add	r1, sp, #4
    a83e:	4859      	ldr	r0, [pc, #356]	; (a9a4 <main+0x2e8>)
    a840:	47c0      	blx	r8
			xprintf("\r\nIs this correct Y/N?\r\n");
    a842:	4859      	ldr	r0, [pc, #356]	; (a9a8 <main+0x2ec>)
    a844:	47c0      	blx	r8
    a846:	e02f      	b.n	a8a8 <main+0x1ec>
						sscanf((char *)ID_string, "%u", &new_id);
    a848:	466a      	mov	r2, sp
    a84a:	4958      	ldr	r1, [pc, #352]	; (a9ac <main+0x2f0>)
    a84c:	a801      	add	r0, sp, #4
    a84e:	4b58      	ldr	r3, [pc, #352]	; (a9b0 <main+0x2f4>)
    a850:	4798      	blx	r3
						((CONFIG *)&settings_buffer)->ID = new_id;
    a852:	4843      	ldr	r0, [pc, #268]	; (a960 <main+0x2a4>)
    a854:	9b00      	ldr	r3, [sp, #0]
    a856:	62c3      	str	r3, [r0, #44]	; 0x2c
						if (EEprom_settings(settings_buffer, SETTING_STRUCTURE_SIZE, 1) != ERR_NONE) {
    a858:	2201      	movs	r2, #1
    a85a:	2180      	movs	r1, #128	; 0x80
    a85c:	4b55      	ldr	r3, [pc, #340]	; (a9b4 <main+0x2f8>)
    a85e:	4798      	blx	r3
    a860:	b190      	cbz	r0, a888 <main+0x1cc>
							xprintf("MultiSense [configuration ERROR WRITING]\r\n");
    a862:	4855      	ldr	r0, [pc, #340]	; (a9b8 <main+0x2fc>)
    a864:	4b28      	ldr	r3, [pc, #160]	; (a908 <main+0x24c>)
    a866:	4798      	blx	r3
						wdt_disable(&WDT_0);
    a868:	4c54      	ldr	r4, [pc, #336]	; (a9bc <main+0x300>)
    a86a:	4620      	mov	r0, r4
    a86c:	4b54      	ldr	r3, [pc, #336]	; (a9c0 <main+0x304>)
    a86e:	4798      	blx	r3
						wdt_set_timeout_period(&WDT_0, 100, 25);
    a870:	2219      	movs	r2, #25
    a872:	2164      	movs	r1, #100	; 0x64
    a874:	4620      	mov	r0, r4
    a876:	4b53      	ldr	r3, [pc, #332]	; (a9c4 <main+0x308>)
    a878:	4798      	blx	r3
						wdt_enable(&WDT_0);
    a87a:	4620      	mov	r0, r4
    a87c:	4b52      	ldr	r3, [pc, #328]	; (a9c8 <main+0x30c>)
    a87e:	4798      	blx	r3
						xprintf("Rebooting...\r\n");
    a880:	4852      	ldr	r0, [pc, #328]	; (a9cc <main+0x310>)
    a882:	4b21      	ldr	r3, [pc, #132]	; (a908 <main+0x24c>)
    a884:	4798      	blx	r3
    a886:	e7fe      	b.n	a886 <main+0x1ca>
							xprintf("MultiSense [configuration WRITTEN]\r\n");
    a888:	4851      	ldr	r0, [pc, #324]	; (a9d0 <main+0x314>)
    a88a:	4b1f      	ldr	r3, [pc, #124]	; (a908 <main+0x24c>)
    a88c:	4798      	blx	r3
    a88e:	e7eb      	b.n	a868 <main+0x1ac>
	ASSERT(wdt && wdt->dev.hw);
    a890:	4c4a      	ldr	r4, [pc, #296]	; (a9bc <main+0x300>)
    a892:	6820      	ldr	r0, [r4, #0]
    a894:	22a9      	movs	r2, #169	; 0xa9
    a896:	4639      	mov	r1, r7
    a898:	3000      	adds	r0, #0
    a89a:	bf18      	it	ne
    a89c:	2001      	movne	r0, #1
    a89e:	4b3f      	ldr	r3, [pc, #252]	; (a99c <main+0x2e0>)
    a8a0:	4798      	blx	r3
	return _wdt_feed(&wdt->dev);
    a8a2:	4620      	mov	r0, r4
    a8a4:	4b3e      	ldr	r3, [pc, #248]	; (a9a0 <main+0x2e4>)
    a8a6:	4798      	blx	r3
				if (io_read((struct io_descriptor *const)io, (uint8_t *const)&ch, 1)) {
    a8a8:	2201      	movs	r2, #1
    a8aa:	f10d 010f 	add.w	r1, sp, #15
    a8ae:	6830      	ldr	r0, [r6, #0]
    a8b0:	47a8      	blx	r5
    a8b2:	2800      	cmp	r0, #0
    a8b4:	d0ec      	beq.n	a890 <main+0x1d4>
					if (((unsigned char)ch == 'y') || ((unsigned char)ch == 'Y')) {
    a8b6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a8ba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    a8be:	2b59      	cmp	r3, #89	; 0x59
    a8c0:	d0c2      	beq.n	a848 <main+0x18c>
					} else if (((unsigned char)ch == 'n') || ((unsigned char)ch == 'N')) {
    a8c2:	2b4e      	cmp	r3, #78	; 0x4e
    a8c4:	d1e4      	bne.n	a890 <main+0x1d4>
    a8c6:	e76c      	b.n	a7a2 <main+0xe6>
    a8c8:	000002d1 	.word	0x000002d1
    a8cc:	43001c00 	.word	0x43001c00
    a8d0:	20000000 	.word	0x20000000
    a8d4:	00002bd1 	.word	0x00002bd1
    a8d8:	43001c34 	.word	0x43001c34
    a8dc:	00002bbd 	.word	0x00002bbd
    a8e0:	00002be5 	.word	0x00002be5
    a8e4:	00002c4d 	.word	0x00002c4d
    a8e8:	200074dc 	.word	0x200074dc
    a8ec:	20007f20 	.word	0x20007f20
    a8f0:	0000204d 	.word	0x0000204d
    a8f4:	00009069 	.word	0x00009069
    a8f8:	00002075 	.word	0x00002075
    a8fc:	0000906b 	.word	0x0000906b
    a900:	00002021 	.word	0x00002021
    a904:	00010c04 	.word	0x00010c04
    a908:	0000031d 	.word	0x0000031d
    a90c:	00010c88 	.word	0x00010c88
    a910:	00010c10 	.word	0x00010c10
    a914:	00008e0d 	.word	0x00008e0d
    a918:	00010ca0 	.word	0x00010ca0
    a91c:	00008b29 	.word	0x00008b29
    a920:	00010ccc 	.word	0x00010ccc
    a924:	00007efd 	.word	0x00007efd
    a928:	00010cec 	.word	0x00010cec
    a92c:	00007fd5 	.word	0x00007fd5
    a930:	00010d10 	.word	0x00010d10
    a934:	00007ffd 	.word	0x00007ffd
    a938:	00010d38 	.word	0x00010d38
    a93c:	00007eb5 	.word	0x00007eb5
    a940:	00010d58 	.word	0x00010d58
    a944:	00007ee9 	.word	0x00007ee9
    a948:	00010d78 	.word	0x00010d78
    a94c:	00007fad 	.word	0x00007fad
    a950:	00010d98 	.word	0x00010d98
    a954:	0000ba0d 	.word	0x0000ba0d
    a958:	00010db8 	.word	0x00010db8
    a95c:	000088c9 	.word	0x000088c9
    a960:	20007f2c 	.word	0x20007f2c
    a964:	20007fac 	.word	0x20007fac
    a968:	0000b4b5 	.word	0x0000b4b5
    a96c:	00008dbd 	.word	0x00008dbd
    a970:	00001861 	.word	0x00001861
    a974:	0000ec30 	.word	0x0000ec30
    a978:	00010dd8 	.word	0x00010dd8
    a97c:	00010e38 	.word	0x00010e38
    a980:	00010e98 	.word	0x00010e98
    a984:	00010ef8 	.word	0x00010ef8
    a988:	00010f58 	.word	0x00010f58
    a98c:	00010fb8 	.word	0x00010fb8
    a990:	0001101c 	.word	0x0001101c
    a994:	00011044 	.word	0x00011044
    a998:	000097f1 	.word	0x000097f1
    a99c:	000026b1 	.word	0x000026b1
    a9a0:	00005461 	.word	0x00005461
    a9a4:	000110d4 	.word	0x000110d4
    a9a8:	000110e8 	.word	0x000110e8
    a9ac:	00011104 	.word	0x00011104
    a9b0:	0000dac5 	.word	0x0000dac5
    a9b4:	0000d8c9 	.word	0x0000d8c9
    a9b8:	00010030 	.word	0x00010030
    a9bc:	20007474 	.word	0x20007474
    a9c0:	0000906d 	.word	0x0000906d
    a9c4:	0000909d 	.word	0x0000909d
    a9c8:	000090d5 	.word	0x000090d5
    a9cc:	00010650 	.word	0x00010650
    a9d0:	0001005c 	.word	0x0001005c
    a9d4:	000110bc 	.word	0x000110bc

0000a9d8 <nv_init>:

/**
 * \brief Initialize non-volatile storage
 */
void nv_init(void *descr)
{
    a9d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	flash = (struct flash_descriptor *)descr;
    a9da:	4f13      	ldr	r7, [pc, #76]	; (aa28 <nv_init+0x50>)
    a9dc:	6038      	str	r0, [r7, #0]

	/* Storage must start at row start */
	ASSERT((CONF_STORAGE_MEMORY_START % (flash_get_page_size(flash) * 4)) == 0);
    a9de:	4e13      	ldr	r6, [pc, #76]	; (aa2c <nv_init+0x54>)
    a9e0:	47b0      	blx	r6
    a9e2:	4c13      	ldr	r4, [pc, #76]	; (aa30 <nv_init+0x58>)
    a9e4:	0080      	lsls	r0, r0, #2
    a9e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    a9ea:	fbb3 f3f0 	udiv	r3, r3, r0
    a9ee:	fb00 f003 	mul.w	r0, r0, r3
    a9f2:	2235      	movs	r2, #53	; 0x35
    a9f4:	4621      	mov	r1, r4
    a9f6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    a9fa:	bf14      	ite	ne
    a9fc:	2000      	movne	r0, #0
    a9fe:	2001      	moveq	r0, #1
    aa00:	4d0c      	ldr	r5, [pc, #48]	; (aa34 <nv_init+0x5c>)
    aa02:	47a8      	blx	r5
	/* Sector must be of integer number of rows */
	ASSERT((CONF_SECTOR_SIZE % ((flash_get_page_size(flash) * 4)) == 0));
    aa04:	6838      	ldr	r0, [r7, #0]
    aa06:	47b0      	blx	r6
    aa08:	0080      	lsls	r0, r0, #2
    aa0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    aa0e:	fbb3 f3f0 	udiv	r3, r3, r0
    aa12:	fb00 f003 	mul.w	r0, r0, r3
    aa16:	2237      	movs	r2, #55	; 0x37
    aa18:	4621      	mov	r1, r4
    aa1a:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    aa1e:	bf14      	ite	ne
    aa20:	2000      	movne	r0, #0
    aa22:	2001      	moveq	r0, #1
    aa24:	47a8      	blx	r5
    aa26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    aa28:	2000723c 	.word	0x2000723c
    aa2c:	00001809 	.word	0x00001809
    aa30:	00011108 	.word	0x00011108
    aa34:	000026b1 	.word	0x000026b1

0000aa38 <nv_write>:

/**
 * \brief Write data to non-volatile storage
 */
void nv_write(const uint8_t sector, const uint16_t offset, const uint8_t *const data, const uint16_t size)
{
    aa38:	b570      	push	{r4, r5, r6, lr}
    aa3a:	4616      	mov	r6, r2
    aa3c:	461d      	mov	r5, r3
	uint32_t address = CONF_STORAGE_MEMORY_START + sector * CONF_SECTOR_SIZE + offset;
    aa3e:	3010      	adds	r0, #16
    aa40:	eb01 3400 	add.w	r4, r1, r0, lsl #12

	/* Write access must start and end within the storage and must not write
	   more than a sector. */
	ASSERT((address <= NV_MEMORY_END) && ((address + size) <= (NV_MEMORY_END + 1))
    aa44:	f5b4 3f90 	cmp.w	r4, #73728	; 0x12000
    aa48:	d20a      	bcs.n	aa60 <nv_write+0x28>
    aa4a:	4423      	add	r3, r4
    aa4c:	f5b3 3f90 	cmp.w	r3, #73728	; 0x12000
    aa50:	d813      	bhi.n	aa7a <nv_write+0x42>
    aa52:	4429      	add	r1, r5
    aa54:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    aa58:	bfcc      	ite	gt
    aa5a:	2000      	movgt	r0, #0
    aa5c:	2001      	movle	r0, #1
    aa5e:	e000      	b.n	aa62 <nv_write+0x2a>
    aa60:	2000      	movs	r0, #0
    aa62:	2244      	movs	r2, #68	; 0x44
    aa64:	4906      	ldr	r1, [pc, #24]	; (aa80 <nv_write+0x48>)
    aa66:	4b07      	ldr	r3, [pc, #28]	; (aa84 <nv_write+0x4c>)
    aa68:	4798      	blx	r3
	       && ((offset + size) <= CONF_SECTOR_SIZE));

	flash_append(flash, address, (uint8_t *)data, size);
    aa6a:	462b      	mov	r3, r5
    aa6c:	4632      	mov	r2, r6
    aa6e:	4621      	mov	r1, r4
    aa70:	4805      	ldr	r0, [pc, #20]	; (aa88 <nv_write+0x50>)
    aa72:	6800      	ldr	r0, [r0, #0]
    aa74:	4c05      	ldr	r4, [pc, #20]	; (aa8c <nv_write+0x54>)
    aa76:	47a0      	blx	r4
    aa78:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT((address <= NV_MEMORY_END) && ((address + size) <= (NV_MEMORY_END + 1))
    aa7a:	2000      	movs	r0, #0
    aa7c:	e7f1      	b.n	aa62 <nv_write+0x2a>
    aa7e:	bf00      	nop
    aa80:	00011108 	.word	0x00011108
    aa84:	000026b1 	.word	0x000026b1
    aa88:	2000723c 	.word	0x2000723c
    aa8c:	000016a5 	.word	0x000016a5

0000aa90 <nv_read>:

/**
 * \brief Read data from non-volatile storage
 */
void nv_read(const uint8_t sector, const uint16_t offset, uint8_t *const data, const uint16_t size)
{
    aa90:	b570      	push	{r4, r5, r6, lr}
    aa92:	4616      	mov	r6, r2
    aa94:	461d      	mov	r5, r3
	uint32_t address = CONF_STORAGE_MEMORY_START + sector * CONF_SECTOR_SIZE + offset;
    aa96:	3010      	adds	r0, #16
    aa98:	eb01 3400 	add.w	r4, r1, r0, lsl #12

	/* Read access must start and end within the storage and must not read more
	   than a sector. */
	ASSERT((address <= NV_MEMORY_END) && ((address + size) <= (NV_MEMORY_END + 1))
    aa9c:	f5b4 3f90 	cmp.w	r4, #73728	; 0x12000
    aaa0:	d20a      	bcs.n	aab8 <nv_read+0x28>
    aaa2:	4423      	add	r3, r4
    aaa4:	f5b3 3f90 	cmp.w	r3, #73728	; 0x12000
    aaa8:	d813      	bhi.n	aad2 <nv_read+0x42>
    aaaa:	4429      	add	r1, r5
    aaac:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    aab0:	bfcc      	ite	gt
    aab2:	2000      	movgt	r0, #0
    aab4:	2001      	movle	r0, #1
    aab6:	e000      	b.n	aaba <nv_read+0x2a>
    aab8:	2000      	movs	r0, #0
    aaba:	2253      	movs	r2, #83	; 0x53
    aabc:	4906      	ldr	r1, [pc, #24]	; (aad8 <nv_read+0x48>)
    aabe:	4b07      	ldr	r3, [pc, #28]	; (aadc <nv_read+0x4c>)
    aac0:	4798      	blx	r3
	       && ((offset + size) <= CONF_SECTOR_SIZE));

	flash_read(flash, address, data, size);
    aac2:	462b      	mov	r3, r5
    aac4:	4632      	mov	r2, r6
    aac6:	4621      	mov	r1, r4
    aac8:	4805      	ldr	r0, [pc, #20]	; (aae0 <nv_read+0x50>)
    aaca:	6800      	ldr	r0, [r0, #0]
    aacc:	4c05      	ldr	r4, [pc, #20]	; (aae4 <nv_read+0x54>)
    aace:	47a0      	blx	r4
    aad0:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT((address <= NV_MEMORY_END) && ((address + size) <= (NV_MEMORY_END + 1))
    aad2:	2000      	movs	r0, #0
    aad4:	e7f1      	b.n	aaba <nv_read+0x2a>
    aad6:	bf00      	nop
    aad8:	00011108 	.word	0x00011108
    aadc:	000026b1 	.word	0x000026b1
    aae0:	2000723c 	.word	0x2000723c
    aae4:	00001601 	.word	0x00001601

0000aae8 <nv_erase_sector>:

/**
 * \brief Erase a sector
 */
void nv_erase_sector(uint8_t sector)
{
    aae8:	b538      	push	{r3, r4, r5, lr}
	uint32_t address = CONF_STORAGE_MEMORY_START + sector * CONF_SECTOR_SIZE;
    aaea:	3010      	adds	r0, #16
    aaec:	0304      	lsls	r4, r0, #12

	ASSERT(address <= NV_MEMORY_END);
    aaee:	225f      	movs	r2, #95	; 0x5f
    aaf0:	490a      	ldr	r1, [pc, #40]	; (ab1c <nv_erase_sector+0x34>)
    aaf2:	f5b4 3f90 	cmp.w	r4, #73728	; 0x12000
    aaf6:	bf2c      	ite	cs
    aaf8:	2000      	movcs	r0, #0
    aafa:	2001      	movcc	r0, #1
    aafc:	4b08      	ldr	r3, [pc, #32]	; (ab20 <nv_erase_sector+0x38>)
    aafe:	4798      	blx	r3

	flash_erase(flash, address, CONF_SECTOR_SIZE / flash_get_page_size(flash));
    ab00:	4b08      	ldr	r3, [pc, #32]	; (ab24 <nv_erase_sector+0x3c>)
    ab02:	681d      	ldr	r5, [r3, #0]
    ab04:	4628      	mov	r0, r5
    ab06:	4b08      	ldr	r3, [pc, #32]	; (ab28 <nv_erase_sector+0x40>)
    ab08:	4798      	blx	r3
    ab0a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    ab0e:	fbb2 f2f0 	udiv	r2, r2, r0
    ab12:	4621      	mov	r1, r4
    ab14:	4628      	mov	r0, r5
    ab16:	4b05      	ldr	r3, [pc, #20]	; (ab2c <nv_erase_sector+0x44>)
    ab18:	4798      	blx	r3
    ab1a:	bd38      	pop	{r3, r4, r5, pc}
    ab1c:	00011108 	.word	0x00011108
    ab20:	000026b1 	.word	0x000026b1
    ab24:	2000723c 	.word	0x2000723c
    ab28:	00001809 	.word	0x00001809
    ab2c:	0000175d 	.word	0x0000175d

0000ab30 <nv_is_equal>:

/**
 * \brief Compare given data and data stored in non-volatile storage
 */
bool nv_is_equal(const uint8_t sector, const uint16_t offset, const uint8_t *const data, const uint16_t size)
{
    ab30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ab34:	b091      	sub	sp, #68	; 0x44
    ab36:	4617      	mov	r7, r2
    ab38:	461d      	mov	r5, r3
	uint8_t  tmp[64];
	uint16_t pos     = 0;
	uint32_t address = CONF_STORAGE_MEMORY_START + sector * CONF_SECTOR_SIZE + offset;
    ab3a:	3010      	adds	r0, #16
    ab3c:	eb01 3600 	add.w	r6, r1, r0, lsl #12

	/* Read access must start and end within the storage and must not read more
	   than a sector. There must be at least one byte to compare to. */
	ASSERT((address <= NV_MEMORY_END) && ((address + size) <= (NV_MEMORY_END + 1))
    ab40:	f5b6 3f90 	cmp.w	r6, #73728	; 0x12000
    ab44:	d20f      	bcs.n	ab66 <nv_is_equal+0x36>
    ab46:	4433      	add	r3, r6
    ab48:	f5b3 3f90 	cmp.w	r3, #73728	; 0x12000
    ab4c:	d80b      	bhi.n	ab66 <nv_is_equal+0x36>
    ab4e:	4429      	add	r1, r5
    ab50:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    ab54:	dc07      	bgt.n	ab66 <nv_is_equal+0x36>
    ab56:	bb85      	cbnz	r5, abba <nv_is_equal+0x8a>
    ab58:	2270      	movs	r2, #112	; 0x70
    ab5a:	491b      	ldr	r1, [pc, #108]	; (abc8 <nv_is_equal+0x98>)
    ab5c:	2000      	movs	r0, #0
    ab5e:	4b1b      	ldr	r3, [pc, #108]	; (abcc <nv_is_equal+0x9c>)
    ab60:	4798      	blx	r3
		}

		pos += cur_size;
	}

	return true;
    ab62:	2001      	movs	r0, #1
    ab64:	e026      	b.n	abb4 <nv_is_equal+0x84>
	ASSERT((address <= NV_MEMORY_END) && ((address + size) <= (NV_MEMORY_END + 1))
    ab66:	2270      	movs	r2, #112	; 0x70
    ab68:	4917      	ldr	r1, [pc, #92]	; (abc8 <nv_is_equal+0x98>)
    ab6a:	2000      	movs	r0, #0
    ab6c:	4b17      	ldr	r3, [pc, #92]	; (abcc <nv_is_equal+0x9c>)
    ab6e:	4798      	blx	r3
	while (pos != size) {
    ab70:	b1ed      	cbz	r5, abae <nv_is_equal+0x7e>
{
    ab72:	2400      	movs	r4, #0
		flash_read(flash, address + pos, tmp, cur_size);
    ab74:	f8df a058 	ldr.w	sl, [pc, #88]	; abd0 <nv_is_equal+0xa0>
    ab78:	f8df 9058 	ldr.w	r9, [pc, #88]	; abd4 <nv_is_equal+0xa4>
		if (memcmp(data + pos, tmp, cur_size)) {
    ab7c:	f8df 8058 	ldr.w	r8, [pc, #88]	; abd8 <nv_is_equal+0xa8>
		uint8_t cur_size = min(64, size - pos);
    ab80:	1b2b      	subs	r3, r5, r4
    ab82:	2b40      	cmp	r3, #64	; 0x40
    ab84:	bfa8      	it	ge
    ab86:	2340      	movge	r3, #64	; 0x40
    ab88:	fa5f fb83 	uxtb.w	fp, r3
		flash_read(flash, address + pos, tmp, cur_size);
    ab8c:	465b      	mov	r3, fp
    ab8e:	466a      	mov	r2, sp
    ab90:	1931      	adds	r1, r6, r4
    ab92:	f8da 0000 	ldr.w	r0, [sl]
    ab96:	47c8      	blx	r9
		if (memcmp(data + pos, tmp, cur_size)) {
    ab98:	465a      	mov	r2, fp
    ab9a:	4669      	mov	r1, sp
    ab9c:	1938      	adds	r0, r7, r4
    ab9e:	47c0      	blx	r8
    aba0:	b938      	cbnz	r0, abb2 <nv_is_equal+0x82>
		pos += cur_size;
    aba2:	445c      	add	r4, fp
    aba4:	b2a4      	uxth	r4, r4
	while (pos != size) {
    aba6:	42a5      	cmp	r5, r4
    aba8:	d1ea      	bne.n	ab80 <nv_is_equal+0x50>
	return true;
    abaa:	2001      	movs	r0, #1
    abac:	e002      	b.n	abb4 <nv_is_equal+0x84>
    abae:	2001      	movs	r0, #1
    abb0:	e000      	b.n	abb4 <nv_is_equal+0x84>
			return false;
    abb2:	2000      	movs	r0, #0
}
    abb4:	b011      	add	sp, #68	; 0x44
    abb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ASSERT((address <= NV_MEMORY_END) && ((address + size) <= (NV_MEMORY_END + 1))
    abba:	2270      	movs	r2, #112	; 0x70
    abbc:	4902      	ldr	r1, [pc, #8]	; (abc8 <nv_is_equal+0x98>)
    abbe:	2001      	movs	r0, #1
    abc0:	4b02      	ldr	r3, [pc, #8]	; (abcc <nv_is_equal+0x9c>)
    abc2:	4798      	blx	r3
    abc4:	e7d5      	b.n	ab72 <nv_is_equal+0x42>
    abc6:	bf00      	nop
    abc8:	00011108 	.word	0x00011108
    abcc:	000026b1 	.word	0x000026b1
    abd0:	2000723c 	.word	0x2000723c
    abd4:	00001601 	.word	0x00001601
    abd8:	0000da4d 	.word	0x0000da4d

0000abdc <nv_is_empty>:

/**
 * \brief Check if given area is empty
 */
bool nv_is_empty(const uint8_t sector, const uint16_t offset, const uint16_t size)
{
    abdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    abe0:	b091      	sub	sp, #68	; 0x44
    abe2:	4617      	mov	r7, r2
	uint8_t  tmp[64];
	uint16_t pos     = 0;
	uint32_t address = CONF_STORAGE_MEMORY_START + sector * CONF_SECTOR_SIZE + offset;
    abe4:	3010      	adds	r0, #16
    abe6:	eb01 3500 	add.w	r5, r1, r0, lsl #12

	/* Read access must start and end within the storage and must not read more
	   than a sector. There must be at least one byte to compare to. */
	ASSERT((address <= NV_MEMORY_END) && ((address + size) <= (NV_MEMORY_END + 1))
    abea:	f5b5 3f90 	cmp.w	r5, #73728	; 0x12000
    abee:	d210      	bcs.n	ac12 <nv_is_empty+0x36>
    abf0:	1953      	adds	r3, r2, r5
    abf2:	f5b3 3f90 	cmp.w	r3, #73728	; 0x12000
    abf6:	d80c      	bhi.n	ac12 <nv_is_empty+0x36>
    abf8:	4411      	add	r1, r2
    abfa:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    abfe:	dc08      	bgt.n	ac12 <nv_is_empty+0x36>
    ac00:	2a00      	cmp	r2, #0
    ac02:	d13c      	bne.n	ac7e <nv_is_empty+0xa2>
    ac04:	228c      	movs	r2, #140	; 0x8c
    ac06:	4923      	ldr	r1, [pc, #140]	; (ac94 <nv_is_empty+0xb8>)
    ac08:	2000      	movs	r0, #0
    ac0a:	4b23      	ldr	r3, [pc, #140]	; (ac98 <nv_is_empty+0xbc>)
    ac0c:	4798      	blx	r3
		}

		pos += cur_size;
	}

	return true;
    ac0e:	2001      	movs	r0, #1
    ac10:	e032      	b.n	ac78 <nv_is_empty+0x9c>
	ASSERT((address <= NV_MEMORY_END) && ((address + size) <= (NV_MEMORY_END + 1))
    ac12:	228c      	movs	r2, #140	; 0x8c
    ac14:	491f      	ldr	r1, [pc, #124]	; (ac94 <nv_is_empty+0xb8>)
    ac16:	2000      	movs	r0, #0
    ac18:	4b1f      	ldr	r3, [pc, #124]	; (ac98 <nv_is_empty+0xbc>)
    ac1a:	4798      	blx	r3
	memset(tmp, 0xFF, 64);
    ac1c:	2240      	movs	r2, #64	; 0x40
    ac1e:	21ff      	movs	r1, #255	; 0xff
    ac20:	4668      	mov	r0, sp
    ac22:	4b1e      	ldr	r3, [pc, #120]	; (ac9c <nv_is_empty+0xc0>)
    ac24:	4798      	blx	r3
	while (pos != size) {
    ac26:	b317      	cbz	r7, ac6e <nv_is_empty+0x92>
{
    ac28:	2600      	movs	r6, #0
		flash_read(flash, address + pos, tmp, cur_size);
    ac2a:	f8df 9074 	ldr.w	r9, [pc, #116]	; aca0 <nv_is_empty+0xc4>
    ac2e:	f8df 8074 	ldr.w	r8, [pc, #116]	; aca4 <nv_is_empty+0xc8>
		uint8_t cur_size = min(64, size - pos);
    ac32:	1bbc      	subs	r4, r7, r6
    ac34:	2c40      	cmp	r4, #64	; 0x40
    ac36:	bfa8      	it	ge
    ac38:	2440      	movge	r4, #64	; 0x40
		flash_read(flash, address + pos, tmp, cur_size);
    ac3a:	b2e3      	uxtb	r3, r4
    ac3c:	466a      	mov	r2, sp
    ac3e:	1971      	adds	r1, r6, r5
    ac40:	f8d9 0000 	ldr.w	r0, [r9]
    ac44:	47c0      	blx	r8
			if (tmp[i] != 0xFF) {
    ac46:	f89d 3000 	ldrb.w	r3, [sp]
    ac4a:	2bff      	cmp	r3, #255	; 0xff
    ac4c:	d111      	bne.n	ac72 <nv_is_empty+0x96>
    ac4e:	466b      	mov	r3, sp
    ac50:	f10d 013f 	add.w	r1, sp, #63	; 0x3f
    ac54:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    ac58:	2aff      	cmp	r2, #255	; 0xff
    ac5a:	d10c      	bne.n	ac76 <nv_is_empty+0x9a>
		for (; i < 64; i++) {
    ac5c:	4299      	cmp	r1, r3
    ac5e:	d1f9      	bne.n	ac54 <nv_is_empty+0x78>
		pos += cur_size;
    ac60:	fa56 f684 	uxtab	r6, r6, r4
    ac64:	b2b6      	uxth	r6, r6
	while (pos != size) {
    ac66:	42b7      	cmp	r7, r6
    ac68:	d1e3      	bne.n	ac32 <nv_is_empty+0x56>
	return true;
    ac6a:	2001      	movs	r0, #1
    ac6c:	e004      	b.n	ac78 <nv_is_empty+0x9c>
    ac6e:	2001      	movs	r0, #1
    ac70:	e002      	b.n	ac78 <nv_is_empty+0x9c>
				return false;
    ac72:	2000      	movs	r0, #0
    ac74:	e000      	b.n	ac78 <nv_is_empty+0x9c>
    ac76:	2000      	movs	r0, #0
}
    ac78:	b011      	add	sp, #68	; 0x44
    ac7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ASSERT((address <= NV_MEMORY_END) && ((address + size) <= (NV_MEMORY_END + 1))
    ac7e:	228c      	movs	r2, #140	; 0x8c
    ac80:	4904      	ldr	r1, [pc, #16]	; (ac94 <nv_is_empty+0xb8>)
    ac82:	2001      	movs	r0, #1
    ac84:	4b04      	ldr	r3, [pc, #16]	; (ac98 <nv_is_empty+0xbc>)
    ac86:	4798      	blx	r3
	memset(tmp, 0xFF, 64);
    ac88:	2240      	movs	r2, #64	; 0x40
    ac8a:	21ff      	movs	r1, #255	; 0xff
    ac8c:	4668      	mov	r0, sp
    ac8e:	4b03      	ldr	r3, [pc, #12]	; (ac9c <nv_is_empty+0xc0>)
    ac90:	4798      	blx	r3
    ac92:	e7c9      	b.n	ac28 <nv_is_empty+0x4c>
    ac94:	00011108 	.word	0x00011108
    ac98:	000026b1 	.word	0x000026b1
    ac9c:	0000dab5 	.word	0x0000dab5
    aca0:	2000723c 	.word	0x2000723c
    aca4:	00001601 	.word	0x00001601

0000aca8 <nv_align_next_access_address>:
 * \brief Align current point of write to actual based on type of previous write
 *        access
 */
uint16_t nv_align_next_access_address(const uint16_t address, const enum nv_alignment_type type)
{
	switch (type) {
    aca8:	b179      	cbz	r1, acca <nv_align_next_access_address+0x22>
    acaa:	2901      	cmp	r1, #1
    acac:	d104      	bne.n	acb8 <nv_align_next_access_address+0x10>
	case SECTOR_HEADER_ALIGNMENT:
		return address;

	case BLOCK_WITH_DATA_ALIGNMENT:
		return (address + 127) & 0xFF80;
    acae:	307f      	adds	r0, #127	; 0x7f
    acb0:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
    acb4:	b280      	uxth	r0, r0
    acb6:	4770      	bx	lr
{
    acb8:	b510      	push	{r4, lr}
    acba:	4604      	mov	r4, r0

	default:
		ASSERT(false);
    acbc:	22af      	movs	r2, #175	; 0xaf
    acbe:	4903      	ldr	r1, [pc, #12]	; (accc <nv_align_next_access_address+0x24>)
    acc0:	2000      	movs	r0, #0
    acc2:	4b03      	ldr	r3, [pc, #12]	; (acd0 <nv_align_next_access_address+0x28>)
    acc4:	4798      	blx	r3
		return address;
    acc6:	4620      	mov	r0, r4
	}
}
    acc8:	bd10      	pop	{r4, pc}
    acca:	4770      	bx	lr
    accc:	00011108 	.word	0x00011108
    acd0:	000026b1 	.word	0x000026b1

0000acd4 <find_item>:
 * \param[in] ID ID of the item it is required to fins
 *
 * \return Pointer to found item, or NULL
 */
static struct nv_item *find_item(const uint16_t id)
{
    acd4:	b430      	push	{r4, r5}
	uint16_t i = 0;

	for (; i < mem.items_amount; i++) {
    acd6:	4b0e      	ldr	r3, [pc, #56]	; (ad10 <find_item+0x3c>)
    acd8:	8d5c      	ldrh	r4, [r3, #42]	; 0x2a
    acda:	b1bc      	cbz	r4, ad0c <find_item+0x38>
		if (mem.items[i].id == id) {
    acdc:	885b      	ldrh	r3, [r3, #2]
    acde:	4283      	cmp	r3, r0
    ace0:	d010      	beq.n	ad04 <find_item+0x30>
    ace2:	4a0b      	ldr	r2, [pc, #44]	; (ad10 <find_item+0x3c>)
    ace4:	2301      	movs	r3, #1
	for (; i < mem.items_amount; i++) {
    ace6:	b299      	uxth	r1, r3
    ace8:	428c      	cmp	r4, r1
    acea:	d90d      	bls.n	ad08 <find_item+0x34>
		if (mem.items[i].id == id) {
    acec:	461d      	mov	r5, r3
    acee:	88d1      	ldrh	r1, [r2, #6]
    acf0:	3301      	adds	r3, #1
    acf2:	3204      	adds	r2, #4
    acf4:	4281      	cmp	r1, r0
    acf6:	d1f6      	bne.n	ace6 <find_item+0x12>
			return &mem.items[i];
    acf8:	4805      	ldr	r0, [pc, #20]	; (ad10 <find_item+0x3c>)
    acfa:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    acfe:	3002      	adds	r0, #2
		}
	}
	return NULL;
}
    ad00:	bc30      	pop	{r4, r5}
    ad02:	4770      	bx	lr
		if (mem.items[i].id == id) {
    ad04:	2500      	movs	r5, #0
    ad06:	e7f7      	b.n	acf8 <find_item+0x24>
	return NULL;
    ad08:	2000      	movs	r0, #0
    ad0a:	e7f9      	b.n	ad00 <find_item+0x2c>
    ad0c:	2000      	movs	r0, #0
    ad0e:	e7f7      	b.n	ad00 <find_item+0x2c>
    ad10:	20007240 	.word	0x20007240

0000ad14 <calculate_block_header_checksum>:
 * \param[in] header The pointer to block header to calculate checksum of
 *
 * \return Checksum of a block header
 */
static uint16_t calculate_block_header_checksum(struct block_header *header)
{
    ad14:	1c42      	adds	r2, r0, #1
    ad16:	f100 010b 	add.w	r1, r0, #11
	uint8_t *tmp = (uint8_t *)header + sizeof(header->active);
	uint16_t crc = 0xFFFF;
    ad1a:	f64f 70ff 	movw	r0, #65535	; 0xffff
	uint8_t  i   = 0;

	for (; i < sizeof(struct block_header) - sizeof(header->active) - sizeof(header->checksum); i++) {
		uint8_t value;

		value = (uint8_t)((crc >> 8) ^ tmp[i]);
    ad1e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    ad22:	ea83 2310 	eor.w	r3, r3, r0, lsr #8
		value = value ^ (value >> 4);
    ad26:	ea83 1313 	eor.w	r3, r3, r3, lsr #4
		crc   = (crc << 8) ^ ((uint16_t)value << 12) ^ ((uint16_t)value << 5) ^ (uint16_t)value;
    ad2a:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    ad2e:	ea80 3003 	eor.w	r0, r0, r3, lsl #12
    ad32:	ea80 1043 	eor.w	r0, r0, r3, lsl #5
    ad36:	b280      	uxth	r0, r0
	for (; i < sizeof(struct block_header) - sizeof(header->active) - sizeof(header->checksum); i++) {
    ad38:	428a      	cmp	r2, r1
    ad3a:	d1f0      	bne.n	ad1e <calculate_block_header_checksum+0xa>
	}
	return crc;
}
    ad3c:	4770      	bx	lr
	...

0000ad40 <collect_item_data>:
 *
 * \return True if copying succeeds, otherwise false
 */
static bool collect_item_data(const struct nv_item *const item, uint8_t *const data, const uint16_t offset,
                              const uint16_t size)
{
    ad40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ad44:	b087      	sub	sp, #28
	uint16_t            start = offset, end = offset + size;
    ad46:	4413      	add	r3, r2
    ad48:	fa1f fb83 	uxth.w	fp, r3
	uint16_t            current_block      = item->last_block;
    ad4c:	8846      	ldrh	r6, [r0, #2]
	struct block_header header;

	/* Need to gather item data between offset and offset + size.
	   Start with the latest written block and check if it contains required
	   data. Keep going to previous blocks until all the data is collected. */
	while (start != end) {
    ad4e:	455a      	cmp	r2, fp
		   start looking for "first bytes" again */
		start += bytes_to_read;
		destination_offset += bytes_to_read;
	}

	return true;
    ad50:	bf08      	it	eq
    ad52:	2001      	moveq	r0, #1
	while (start != end) {
    ad54:	d041      	beq.n	adda <collect_item_data+0x9a>
    ad56:	9100      	str	r1, [sp, #0]
    ad58:	9001      	str	r0, [sp, #4]
    ad5a:	4617      	mov	r7, r2
    ad5c:	46da      	mov	sl, fp
    ad5e:	2400      	movs	r4, #0
			nv_read(mem.active_sector, current_block, (uint8_t *)&header, sizeof(struct block_header));
    ad60:	f8df 907c 	ldr.w	r9, [pc, #124]	; ade0 <collect_item_data+0xa0>
    ad64:	f8df 807c 	ldr.w	r8, [pc, #124]	; ade4 <collect_item_data+0xa4>
    ad68:	e001      	b.n	ad6e <collect_item_data+0x2e>
			current_block = header.prev_block;
    ad6a:	f8bd 6012 	ldrh.w	r6, [sp, #18]
			nv_read(mem.active_sector, current_block, (uint8_t *)&header, sizeof(struct block_header));
    ad6e:	230e      	movs	r3, #14
    ad70:	aa02      	add	r2, sp, #8
    ad72:	4631      	mov	r1, r6
    ad74:	f899 002c 	ldrb.w	r0, [r9, #44]	; 0x2c
    ad78:	47c0      	blx	r8
			block_end = header.offset + header.block_size;
    ad7a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    ad7e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    ad82:	4413      	add	r3, r2
    ad84:	b29b      	uxth	r3, r3
			if (current_block == 0) {
    ad86:	b33e      	cbz	r6, add8 <collect_item_data+0x98>
			if ((start >= block_end) || (end <= header.offset)) {
    ad88:	42bb      	cmp	r3, r7
    ad8a:	d9ee      	bls.n	ad6a <collect_item_data+0x2a>
    ad8c:	4592      	cmp	sl, r2
    ad8e:	d9ec      	bls.n	ad6a <collect_item_data+0x2a>
			} else if (start < header.offset) {
    ad90:	42ba      	cmp	r2, r7
    ad92:	d901      	bls.n	ad98 <collect_item_data+0x58>
			block_end = header.offset + header.block_size;
    ad94:	4692      	mov	sl, r2
    ad96:	e7e8      	b.n	ad6a <collect_item_data+0x2a>
		por = current_block + sizeof(struct block_header) + start - header.offset;
    ad98:	f107 010e 	add.w	r1, r7, #14
    ad9c:	4431      	add	r1, r6
    ad9e:	1a8a      	subs	r2, r1, r2
    ada0:	b291      	uxth	r1, r2
		if (block_end < end) {
    ada2:	459a      	cmp	sl, r3
    ada4:	d911      	bls.n	adca <collect_item_data+0x8a>
			bytes_to_read = block_end - start;
    ada6:	1bdb      	subs	r3, r3, r7
    ada8:	b29d      	uxth	r5, r3
			current_block = header.prev_block;
    adaa:	f8bd 6012 	ldrh.w	r6, [sp, #18]
		nv_read(mem.active_sector, por, data + destination_offset, bytes_to_read);
    adae:	462b      	mov	r3, r5
    adb0:	9a00      	ldr	r2, [sp, #0]
    adb2:	4422      	add	r2, r4
    adb4:	f899 002c 	ldrb.w	r0, [r9, #44]	; 0x2c
    adb8:	47c0      	blx	r8
		start += bytes_to_read;
    adba:	442f      	add	r7, r5
    adbc:	b2bf      	uxth	r7, r7
		destination_offset += bytes_to_read;
    adbe:	442c      	add	r4, r5
    adc0:	b2a4      	uxth	r4, r4
	while (start != end) {
    adc2:	45ba      	cmp	sl, r7
    adc4:	d1d3      	bne.n	ad6e <collect_item_data+0x2e>
	return true;
    adc6:	2001      	movs	r0, #1
    adc8:	e007      	b.n	adda <collect_item_data+0x9a>
			bytes_to_read = end - start;
    adca:	ebaa 0507 	sub.w	r5, sl, r7
    adce:	b2ad      	uxth	r5, r5
			current_block = item->last_block;
    add0:	9b01      	ldr	r3, [sp, #4]
    add2:	885e      	ldrh	r6, [r3, #2]
			end           = offset + size;
    add4:	46da      	mov	sl, fp
    add6:	e7ea      	b.n	adae <collect_item_data+0x6e>
				return false;
    add8:	2000      	movs	r0, #0
}
    adda:	b007      	add	sp, #28
    addc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ade0:	20007240 	.word	0x20007240
    ade4:	0000aa91 	.word	0x0000aa91

0000ade8 <write_and_verify>:
{
    ade8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    adec:	4604      	mov	r4, r0
    adee:	460d      	mov	r5, r1
    adf0:	4616      	mov	r6, r2
    adf2:	461f      	mov	r7, r3
	nv_write(sector, offset, data, size);
    adf4:	f8df 8018 	ldr.w	r8, [pc, #24]	; ae10 <write_and_verify+0x28>
    adf8:	47c0      	blx	r8
	if (!nv_is_equal(sector, offset, data, size)) {
    adfa:	463b      	mov	r3, r7
    adfc:	4632      	mov	r2, r6
    adfe:	4629      	mov	r1, r5
    ae00:	4620      	mov	r0, r4
    ae02:	4c02      	ldr	r4, [pc, #8]	; (ae0c <write_and_verify+0x24>)
    ae04:	47a0      	blx	r4
}
    ae06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ae0a:	bf00      	nop
    ae0c:	0000ab31 	.word	0x0000ab31
    ae10:	0000aa39 	.word	0x0000aa39

0000ae14 <create_sector>:
{
    ae14:	b5f0      	push	{r4, r5, r6, r7, lr}
    ae16:	b085      	sub	sp, #20
    ae18:	4604      	mov	r4, r0
    ae1a:	460e      	mov	r6, r1
    ae1c:	4617      	mov	r7, r2
	uint8_t              active = 0;
    ae1e:	2100      	movs	r1, #0
    ae20:	f88d 1003 	strb.w	r1, [sp, #3]
	if (!nv_is_empty(sector, 0, CONF_SECTOR_SIZE)) {
    ae24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    ae28:	4b1e      	ldr	r3, [pc, #120]	; (aea4 <create_sector+0x90>)
    ae2a:	4798      	blx	r3
    ae2c:	b950      	cbnz	r0, ae44 <create_sector+0x30>
		nv_erase_sector(sector);
    ae2e:	4620      	mov	r0, r4
    ae30:	4b1d      	ldr	r3, [pc, #116]	; (aea8 <create_sector+0x94>)
    ae32:	4798      	blx	r3
		if (!nv_is_empty(sector, 0, CONF_SECTOR_SIZE)) {
    ae34:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    ae38:	2100      	movs	r1, #0
    ae3a:	4620      	mov	r0, r4
    ae3c:	4b19      	ldr	r3, [pc, #100]	; (aea4 <create_sector+0x90>)
    ae3e:	4798      	blx	r3
    ae40:	4605      	mov	r5, r0
    ae42:	b1b8      	cbz	r0, ae74 <create_sector+0x60>
	memcpy(header.signature, SECTOR_SIGNATURE, 7);
    ae44:	4b19      	ldr	r3, [pc, #100]	; (aeac <create_sector+0x98>)
    ae46:	6818      	ldr	r0, [r3, #0]
    ae48:	f8cd 0009 	str.w	r0, [sp, #9]
    ae4c:	889a      	ldrh	r2, [r3, #4]
    ae4e:	799b      	ldrb	r3, [r3, #6]
    ae50:	f8ad 200d 	strh.w	r2, [sp, #13]
    ae54:	f88d 300f 	strb.w	r3, [sp, #15]
	header.active = 0xFF;
    ae58:	23ff      	movs	r3, #255	; 0xff
    ae5a:	f88d 3004 	strb.w	r3, [sp, #4]
	header.number = number;
    ae5e:	f8cd 6005 	str.w	r6, [sp, #5]
	if (!write_and_verify(sector, 0, (uint8_t *)&header, sizeof(struct sector_header))) {
    ae62:	230c      	movs	r3, #12
    ae64:	aa01      	add	r2, sp, #4
    ae66:	2100      	movs	r1, #0
    ae68:	4620      	mov	r0, r4
    ae6a:	4d11      	ldr	r5, [pc, #68]	; (aeb0 <create_sector+0x9c>)
    ae6c:	47a8      	blx	r5
    ae6e:	4605      	mov	r5, r0
    ae70:	b100      	cbz	r0, ae74 <create_sector+0x60>
	if (activate) {
    ae72:	b917      	cbnz	r7, ae7a <create_sector+0x66>
}
    ae74:	4628      	mov	r0, r5
    ae76:	b005      	add	sp, #20
    ae78:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!write_and_verify(sector, 0, &active, sizeof(active))) {
    ae7a:	2301      	movs	r3, #1
    ae7c:	f10d 0203 	add.w	r2, sp, #3
    ae80:	2100      	movs	r1, #0
    ae82:	4620      	mov	r0, r4
    ae84:	4d0a      	ldr	r5, [pc, #40]	; (aeb0 <create_sector+0x9c>)
    ae86:	47a8      	blx	r5
    ae88:	4605      	mov	r5, r0
    ae8a:	2800      	cmp	r0, #0
    ae8c:	d0f2      	beq.n	ae74 <create_sector+0x60>
		mem.pow           = sizeof(struct sector_header);
    ae8e:	4e09      	ldr	r6, [pc, #36]	; (aeb4 <create_sector+0xa0>)
    ae90:	200c      	movs	r0, #12
    ae92:	8030      	strh	r0, [r6, #0]
		mem.pow           = nv_align_next_access_address(mem.pow, SECTOR_HEADER_ALIGNMENT);
    ae94:	2100      	movs	r1, #0
    ae96:	4b08      	ldr	r3, [pc, #32]	; (aeb8 <create_sector+0xa4>)
    ae98:	4798      	blx	r3
    ae9a:	8030      	strh	r0, [r6, #0]
		mem.active_sector = sector;
    ae9c:	f886 402c 	strb.w	r4, [r6, #44]	; 0x2c
    aea0:	e7e8      	b.n	ae74 <create_sector+0x60>
    aea2:	bf00      	nop
    aea4:	0000abdd 	.word	0x0000abdd
    aea8:	0000aae9 	.word	0x0000aae9
    aeac:	00011138 	.word	0x00011138
    aeb0:	0000ade9 	.word	0x0000ade9
    aeb4:	20007240 	.word	0x20007240
    aeb8:	0000aca9 	.word	0x0000aca9

0000aebc <copy_data_to_new_sector>:
{
    aebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aec0:	b09d      	sub	sp, #116	; 0x74
	uint8_t              sector = mem.active_sector;
    aec2:	4c5b      	ldr	r4, [pc, #364]	; (b030 <copy_data_to_new_sector+0x174>)
    aec4:	f894 702c 	ldrb.w	r7, [r4, #44]	; 0x2c
	uint16_t             new_pow = nv_align_next_access_address(sizeof(struct sector_header), SECTOR_HEADER_ALIGNMENT);
    aec8:	2100      	movs	r1, #0
    aeca:	200c      	movs	r0, #12
    aecc:	4b59      	ldr	r3, [pc, #356]	; (b034 <copy_data_to_new_sector+0x178>)
    aece:	4798      	blx	r3
    aed0:	4680      	mov	r8, r0
	const uint8_t        active  = 0;
    aed2:	2100      	movs	r1, #0
    aed4:	f88d 1063 	strb.w	r1, [sp, #99]	; 0x63
	nv_read(mem.active_sector, 0, (uint8_t *)&sector_header, sizeof(struct sector_header));
    aed8:	230c      	movs	r3, #12
    aeda:	aa19      	add	r2, sp, #100	; 0x64
    aedc:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    aee0:	4c55      	ldr	r4, [pc, #340]	; (b038 <copy_data_to_new_sector+0x17c>)
    aee2:	47a0      	blx	r4
	number = sector_header.number + 1;
    aee4:	f8dd 4065 	ldr.w	r4, [sp, #101]	; 0x65
    aee8:	3401      	adds	r4, #1
		if (sector == mem.active_sector) {
    aeea:	4d51      	ldr	r5, [pc, #324]	; (b030 <copy_data_to_new_sector+0x174>)
	} while (!create_sector(sector, number, false));
    aeec:	f04f 0900 	mov.w	r9, #0
    aef0:	4e52      	ldr	r6, [pc, #328]	; (b03c <copy_data_to_new_sector+0x180>)
		if (++sector >= SECTOR_AMOUNT) {
    aef2:	3701      	adds	r7, #1
    aef4:	b2ff      	uxtb	r7, r7
			sector = 0;
    aef6:	2f02      	cmp	r7, #2
    aef8:	bf28      	it	cs
    aefa:	2700      	movcs	r7, #0
		if (sector == mem.active_sector) {
    aefc:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
    af00:	42bb      	cmp	r3, r7
    af02:	f000 808e 	beq.w	b022 <copy_data_to_new_sector+0x166>
	} while (!create_sector(sector, number, false));
    af06:	464a      	mov	r2, r9
    af08:	4621      	mov	r1, r4
    af0a:	4638      	mov	r0, r7
    af0c:	47b0      	blx	r6
    af0e:	2800      	cmp	r0, #0
    af10:	d0ef      	beq.n	aef2 <copy_data_to_new_sector+0x36>
	for (; i < mem.items_amount; i++) {
    af12:	4b47      	ldr	r3, [pc, #284]	; (b030 <copy_data_to_new_sector+0x174>)
    af14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    af16:	2b00      	cmp	r3, #0
    af18:	d070      	beq.n	affc <copy_data_to_new_sector+0x140>
    af1a:	f04f 0900 	mov.w	r9, #0
	item_size = header.item_size;

	/* Fill new block header... */
	fill_block_header(&header, header.id, 0, header.item_size, header.item_size, 0);
	/* ...and write it to new sector */
	if (!write_and_verify(sector, pow, (uint8_t *)&header, sizeof(struct block_header))) {
    af1e:	f8df a128 	ldr.w	sl, [pc, #296]	; b048 <copy_data_to_new_sector+0x18c>
    af22:	9700      	str	r7, [sp, #0]
    af24:	e01e      	b.n	af64 <copy_data_to_new_sector+0xa8>
		}
		offset += size;
		item_size -= size;
	}
	/* Activate data block */
	if (!write_and_verify(sector, pow, (uint8_t *)&active, sizeof(active))) {
    af26:	2302      	movs	r3, #2
    af28:	f10d 020e 	add.w	r2, sp, #14
    af2c:	4641      	mov	r1, r8
    af2e:	9800      	ldr	r0, [sp, #0]
    af30:	47d0      	blx	sl
    af32:	2800      	cmp	r0, #0
    af34:	d077      	beq.n	b026 <copy_data_to_new_sector+0x16a>
		return -1;
	}

	return header.item_size;
    af36:	f8bd 0018 	ldrh.w	r0, [sp, #24]
			mem.items[i].last_block = new_pow;
    af3a:	4b3d      	ldr	r3, [pc, #244]	; (b030 <copy_data_to_new_sector+0x174>)
    af3c:	9a01      	ldr	r2, [sp, #4]
    af3e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    af42:	f8a3 8004 	strh.w	r8, [r3, #4]
			new_pow += result + sizeof(struct block_header);
    af46:	300e      	adds	r0, #14
    af48:	4440      	add	r0, r8
			new_pow = nv_align_next_access_address(new_pow, BLOCK_WITH_DATA_ALIGNMENT);
    af4a:	2101      	movs	r1, #1
    af4c:	b280      	uxth	r0, r0
    af4e:	4b39      	ldr	r3, [pc, #228]	; (b034 <copy_data_to_new_sector+0x178>)
    af50:	4798      	blx	r3
    af52:	4680      	mov	r8, r0
	for (; i < mem.items_amount; i++) {
    af54:	f109 0901 	add.w	r9, r9, #1
    af58:	fa1f f989 	uxth.w	r9, r9
    af5c:	4b34      	ldr	r3, [pc, #208]	; (b030 <copy_data_to_new_sector+0x174>)
    af5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    af60:	454b      	cmp	r3, r9
    af62:	d94a      	bls.n	affa <copy_data_to_new_sector+0x13e>
	uint16_t            active = 0;
    af64:	2400      	movs	r4, #0
    af66:	f8ad 400e 	strh.w	r4, [sp, #14]
	nv_read(mem.active_sector, mem.items[item].last_block, (uint8_t *)&header, sizeof(struct block_header));
    af6a:	f8cd 9004 	str.w	r9, [sp, #4]
    af6e:	4b30      	ldr	r3, [pc, #192]	; (b030 <copy_data_to_new_sector+0x174>)
    af70:	eb03 0189 	add.w	r1, r3, r9, lsl #2
    af74:	230e      	movs	r3, #14
    af76:	aa04      	add	r2, sp, #16
    af78:	8889      	ldrh	r1, [r1, #4]
    af7a:	482d      	ldr	r0, [pc, #180]	; (b030 <copy_data_to_new_sector+0x174>)
    af7c:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    af80:	4d2d      	ldr	r5, [pc, #180]	; (b038 <copy_data_to_new_sector+0x17c>)
    af82:	47a8      	blx	r5
	item_size = header.item_size;
    af84:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	header->active     = 0xFFFF;
    af88:	f64f 73ff 	movw	r3, #65535	; 0xffff
    af8c:	f8ad 3010 	strh.w	r3, [sp, #16]
	header->offset     = offset;
    af90:	f8ad 4014 	strh.w	r4, [sp, #20]
	header->block_size = block_size;
    af94:	f8ad 5016 	strh.w	r5, [sp, #22]
	header->prev_block = prev_block;
    af98:	f8ad 401a 	strh.w	r4, [sp, #26]
	header->checksum   = calculate_block_header_checksum(header);
    af9c:	a804      	add	r0, sp, #16
    af9e:	4b28      	ldr	r3, [pc, #160]	; (b040 <copy_data_to_new_sector+0x184>)
    afa0:	4798      	blx	r3
    afa2:	f8ad 001c 	strh.w	r0, [sp, #28]
	if (!write_and_verify(sector, pow, (uint8_t *)&header, sizeof(struct block_header))) {
    afa6:	230e      	movs	r3, #14
    afa8:	aa04      	add	r2, sp, #16
    afaa:	4641      	mov	r1, r8
    afac:	9800      	ldr	r0, [sp, #0]
    afae:	47d0      	blx	sl
    afb0:	2800      	cmp	r0, #0
    afb2:	d038      	beq.n	b026 <copy_data_to_new_sector+0x16a>
	while (item_size) {
    afb4:	2d00      	cmp	r5, #0
    afb6:	d0b6      	beq.n	af26 <copy_data_to_new_sector+0x6a>
		if (!collect_item_data(&mem.items[item], data, offset, size)) {
    afb8:	4b1d      	ldr	r3, [pc, #116]	; (b030 <copy_data_to_new_sector+0x174>)
    afba:	eb03 0789 	add.w	r7, r3, r9, lsl #2
    afbe:	f107 0b02 	add.w	fp, r7, #2
    afc2:	4626      	mov	r6, r4
    afc4:	4f1f      	ldr	r7, [pc, #124]	; (b044 <copy_data_to_new_sector+0x188>)
		uint16_t size = min(64, item_size);
    afc6:	462c      	mov	r4, r5
    afc8:	2d40      	cmp	r5, #64	; 0x40
    afca:	bf28      	it	cs
    afcc:	2440      	movcs	r4, #64	; 0x40
		if (!collect_item_data(&mem.items[item], data, offset, size)) {
    afce:	4623      	mov	r3, r4
    afd0:	4632      	mov	r2, r6
    afd2:	a908      	add	r1, sp, #32
    afd4:	4658      	mov	r0, fp
    afd6:	47b8      	blx	r7
    afd8:	b328      	cbz	r0, b026 <copy_data_to_new_sector+0x16a>
		if (!write_and_verify(sector, pow + offset + sizeof(struct block_header), data, size)) {
    afda:	f108 010e 	add.w	r1, r8, #14
    afde:	4431      	add	r1, r6
    afe0:	4623      	mov	r3, r4
    afe2:	aa08      	add	r2, sp, #32
    afe4:	b289      	uxth	r1, r1
    afe6:	9800      	ldr	r0, [sp, #0]
    afe8:	47d0      	blx	sl
    afea:	b1e0      	cbz	r0, b026 <copy_data_to_new_sector+0x16a>
		offset += size;
    afec:	4426      	add	r6, r4
    afee:	b2b6      	uxth	r6, r6
		item_size -= size;
    aff0:	1b2c      	subs	r4, r5, r4
    aff2:	b2a5      	uxth	r5, r4
	while (item_size) {
    aff4:	2d00      	cmp	r5, #0
    aff6:	d1e6      	bne.n	afc6 <copy_data_to_new_sector+0x10a>
    aff8:	e795      	b.n	af26 <copy_data_to_new_sector+0x6a>
    affa:	9f00      	ldr	r7, [sp, #0]
	if (!write_and_verify(sector, 0, &active, sizeof(uint8_t))) {
    affc:	2301      	movs	r3, #1
    affe:	f10d 0263 	add.w	r2, sp, #99	; 0x63
    b002:	2100      	movs	r1, #0
    b004:	4638      	mov	r0, r7
    b006:	4c10      	ldr	r4, [pc, #64]	; (b048 <copy_data_to_new_sector+0x18c>)
    b008:	47a0      	blx	r4
    b00a:	4604      	mov	r4, r0
    b00c:	b160      	cbz	r0, b028 <copy_data_to_new_sector+0x16c>
	nv_erase_sector(mem.active_sector);
    b00e:	4d08      	ldr	r5, [pc, #32]	; (b030 <copy_data_to_new_sector+0x174>)
    b010:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    b014:	4b0d      	ldr	r3, [pc, #52]	; (b04c <copy_data_to_new_sector+0x190>)
    b016:	4798      	blx	r3
	mem.pow           = new_pow;
    b018:	f8a5 8000 	strh.w	r8, [r5]
	mem.active_sector = sector;
    b01c:	f885 702c 	strb.w	r7, [r5, #44]	; 0x2c
	return true;
    b020:	e002      	b.n	b028 <copy_data_to_new_sector+0x16c>
			return false;
    b022:	2400      	movs	r4, #0
    b024:	e000      	b.n	b028 <copy_data_to_new_sector+0x16c>
			return false;
    b026:	2400      	movs	r4, #0
}
    b028:	4620      	mov	r0, r4
    b02a:	b01d      	add	sp, #116	; 0x74
    b02c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b030:	20007240 	.word	0x20007240
    b034:	0000aca9 	.word	0x0000aca9
    b038:	0000aa91 	.word	0x0000aa91
    b03c:	0000ae15 	.word	0x0000ae15
    b040:	0000ad15 	.word	0x0000ad15
    b044:	0000ad41 	.word	0x0000ad41
    b048:	0000ade9 	.word	0x0000ade9
    b04c:	0000aae9 	.word	0x0000aae9

0000b050 <write_block_header>:
{
    b050:	b538      	push	{r3, r4, r5, lr}
	if (!write_and_verify(mem.active_sector, mem.pow, (const uint8_t *const)header, sizeof(struct block_header))) {
    b052:	4c10      	ldr	r4, [pc, #64]	; (b094 <write_block_header+0x44>)
    b054:	230e      	movs	r3, #14
    b056:	4602      	mov	r2, r0
    b058:	8821      	ldrh	r1, [r4, #0]
    b05a:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    b05e:	4c0e      	ldr	r4, [pc, #56]	; (b098 <write_block_header+0x48>)
    b060:	47a0      	blx	r4
    b062:	4604      	mov	r4, r0
    b064:	b108      	cbz	r0, b06a <write_block_header+0x1a>
}
    b066:	4620      	mov	r0, r4
    b068:	bd38      	pop	{r3, r4, r5, pc}
		if (!nv_is_empty(mem.active_sector, mem.pow, sizeof(struct block_header))) {
    b06a:	4b0a      	ldr	r3, [pc, #40]	; (b094 <write_block_header+0x44>)
    b06c:	220e      	movs	r2, #14
    b06e:	8819      	ldrh	r1, [r3, #0]
    b070:	f893 002c 	ldrb.w	r0, [r3, #44]	; 0x2c
    b074:	4b09      	ldr	r3, [pc, #36]	; (b09c <write_block_header+0x4c>)
    b076:	4798      	blx	r3
    b078:	4605      	mov	r5, r0
    b07a:	2800      	cmp	r0, #0
    b07c:	d1f3      	bne.n	b066 <write_block_header+0x16>
			mem.pow = nv_align_next_access_address(mem.pow + sizeof(struct block_header), BLOCK_WITH_DATA_ALIGNMENT);
    b07e:	4c05      	ldr	r4, [pc, #20]	; (b094 <write_block_header+0x44>)
    b080:	8820      	ldrh	r0, [r4, #0]
    b082:	300e      	adds	r0, #14
    b084:	2101      	movs	r1, #1
    b086:	b280      	uxth	r0, r0
    b088:	4b05      	ldr	r3, [pc, #20]	; (b0a0 <write_block_header+0x50>)
    b08a:	4798      	blx	r3
    b08c:	8020      	strh	r0, [r4, #0]
		return false;
    b08e:	462c      	mov	r4, r5
    b090:	e7e9      	b.n	b066 <write_block_header+0x16>
    b092:	bf00      	nop
    b094:	20007240 	.word	0x20007240
    b098:	0000ade9 	.word	0x0000ade9
    b09c:	0000abdd 	.word	0x0000abdd
    b0a0:	0000aca9 	.word	0x0000aca9

0000b0a4 <activate_block_header>:
{
    b0a4:	b570      	push	{r4, r5, r6, lr}
    b0a6:	b082      	sub	sp, #8
    b0a8:	4604      	mov	r4, r0
	uint16_t active = 0;
    b0aa:	aa02      	add	r2, sp, #8
    b0ac:	2300      	movs	r3, #0
    b0ae:	f822 3d02 	strh.w	r3, [r2, #-2]!
	if (!write_and_verify(mem.active_sector, mem.pow, (uint8_t *)&active, sizeof(active))) {
    b0b2:	480b      	ldr	r0, [pc, #44]	; (b0e0 <activate_block_header+0x3c>)
    b0b4:	2302      	movs	r3, #2
    b0b6:	8801      	ldrh	r1, [r0, #0]
    b0b8:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    b0bc:	4d09      	ldr	r5, [pc, #36]	; (b0e4 <activate_block_header+0x40>)
    b0be:	47a8      	blx	r5
    b0c0:	4605      	mov	r5, r0
    b0c2:	b110      	cbz	r0, b0ca <activate_block_header+0x26>
}
    b0c4:	4628      	mov	r0, r5
    b0c6:	b002      	add	sp, #8
    b0c8:	bd70      	pop	{r4, r5, r6, pc}
		mem.pow += sizeof(struct block_header) + size;
    b0ca:	4e05      	ldr	r6, [pc, #20]	; (b0e0 <activate_block_header+0x3c>)
    b0cc:	8830      	ldrh	r0, [r6, #0]
    b0ce:	300e      	adds	r0, #14
    b0d0:	4420      	add	r0, r4
    b0d2:	b280      	uxth	r0, r0
    b0d4:	8030      	strh	r0, [r6, #0]
		mem.pow = nv_align_next_access_address(mem.pow, BLOCK_WITH_DATA_ALIGNMENT);
    b0d6:	2101      	movs	r1, #1
    b0d8:	4b03      	ldr	r3, [pc, #12]	; (b0e8 <activate_block_header+0x44>)
    b0da:	4798      	blx	r3
    b0dc:	8030      	strh	r0, [r6, #0]
		return false;
    b0de:	e7f1      	b.n	b0c4 <activate_block_header+0x20>
    b0e0:	20007240 	.word	0x20007240
    b0e4:	0000ade9 	.word	0x0000ade9
    b0e8:	0000aca9 	.word	0x0000aca9

0000b0ec <nv_storage_init>:
{
    b0ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b0f0:	b088      	sub	sp, #32
    b0f2:	2400      	movs	r4, #0
	uint32_t             last_sector_number = 0;
    b0f4:	4627      	mov	r7, r4
	uint8_t              sector = 0, last_sector = 0xFF;
    b0f6:	25ff      	movs	r5, #255	; 0xff
		nv_read(sector, 0, (uint8_t *)&header, sizeof(struct sector_header));
    b0f8:	f8df 8164 	ldr.w	r8, [pc, #356]	; b260 <nv_storage_init+0x174>
		if ((header.active == 0) && (memcmp(header.signature, SECTOR_SIGNATURE, 7) == 0)) {
    b0fc:	f8df a16c 	ldr.w	sl, [pc, #364]	; b26c <nv_storage_init+0x180>
    b100:	f8df 916c 	ldr.w	r9, [pc, #364]	; b270 <nv_storage_init+0x184>
    b104:	e002      	b.n	b10c <nv_storage_init+0x20>
    b106:	3401      	adds	r4, #1
	for (; sector < SECTOR_AMOUNT; sector++) {
    b108:	2c02      	cmp	r4, #2
    b10a:	d017      	beq.n	b13c <nv_storage_init+0x50>
    b10c:	b2e6      	uxtb	r6, r4
		nv_read(sector, 0, (uint8_t *)&header, sizeof(struct sector_header));
    b10e:	230c      	movs	r3, #12
    b110:	aa05      	add	r2, sp, #20
    b112:	2100      	movs	r1, #0
    b114:	4630      	mov	r0, r6
    b116:	47c0      	blx	r8
		if ((header.active == 0) && (memcmp(header.signature, SECTOR_SIGNATURE, 7) == 0)) {
    b118:	f89d 3014 	ldrb.w	r3, [sp, #20]
    b11c:	2b00      	cmp	r3, #0
    b11e:	d1f2      	bne.n	b106 <nv_storage_init+0x1a>
    b120:	2207      	movs	r2, #7
    b122:	4651      	mov	r1, sl
    b124:	f10d 0019 	add.w	r0, sp, #25
    b128:	47c8      	blx	r9
    b12a:	2800      	cmp	r0, #0
    b12c:	d1eb      	bne.n	b106 <nv_storage_init+0x1a>
			if (header.number >= last_sector_number) {
    b12e:	f8dd 3015 	ldr.w	r3, [sp, #21]
    b132:	42bb      	cmp	r3, r7
				last_sector_number = header.number;
    b134:	bf24      	itt	cs
    b136:	461f      	movcs	r7, r3
			if (header.number >= last_sector_number) {
    b138:	4635      	movcs	r5, r6
    b13a:	e7e4      	b.n	b106 <nv_storage_init+0x1a>
	if (last_sector == 0xFF) {
    b13c:	2dff      	cmp	r5, #255	; 0xff
    b13e:	d113      	bne.n	b168 <nv_storage_init+0x7c>
			if (create_sector(sector, last_sector_number + 1, true)) {
    b140:	3701      	adds	r7, #1
    b142:	2201      	movs	r2, #1
    b144:	4639      	mov	r1, r7
    b146:	2000      	movs	r0, #0
    b148:	4b40      	ldr	r3, [pc, #256]	; (b24c <nv_storage_init+0x160>)
    b14a:	4798      	blx	r3
    b14c:	2800      	cmp	r0, #0
    b14e:	d13e      	bne.n	b1ce <nv_storage_init+0xe2>
    b150:	2201      	movs	r2, #1
    b152:	4639      	mov	r1, r7
    b154:	4610      	mov	r0, r2
    b156:	4b3d      	ldr	r3, [pc, #244]	; (b24c <nv_storage_init+0x160>)
    b158:	4798      	blx	r3
    b15a:	2800      	cmp	r0, #0
    b15c:	d137      	bne.n	b1ce <nv_storage_init+0xe2>
			ASSERT(false);
    b15e:	2297      	movs	r2, #151	; 0x97
    b160:	493b      	ldr	r1, [pc, #236]	; (b250 <nv_storage_init+0x164>)
    b162:	4b3c      	ldr	r3, [pc, #240]	; (b254 <nv_storage_init+0x168>)
    b164:	4798      	blx	r3
			return;
    b166:	e032      	b.n	b1ce <nv_storage_init+0xe2>
	mem.active_sector = last_sector;
    b168:	4c3b      	ldr	r4, [pc, #236]	; (b258 <nv_storage_init+0x16c>)
    b16a:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
	mem.pow = nv_align_next_access_address(sizeof(struct sector_header), SECTOR_HEADER_ALIGNMENT);
    b16e:	2100      	movs	r1, #0
    b170:	200c      	movs	r0, #12
    b172:	4b3a      	ldr	r3, [pc, #232]	; (b25c <nv_storage_init+0x170>)
    b174:	4798      	blx	r3
    b176:	8020      	strh	r0, [r4, #0]
			address = CONF_STORAGE_MEMORY_START + number * CONF_SECTOR_SIZE + mem.pow;
    b178:	f105 0810 	add.w	r8, r5, #16
    b17c:	ea4f 3808 	mov.w	r8, r8, lsl #12
			if (address >= NV_SECTOR_END(number)) {
    b180:	f608 79ff 	addw	r9, r8, #4095	; 0xfff
		nv_read(number, mem.pow, (uint8_t *)&header, sizeof(struct block_header));
    b184:	4e36      	ldr	r6, [pc, #216]	; (b260 <nv_storage_init+0x174>)
		} else if (header.checksum != calculate_block_header_checksum(&header)) {
    b186:	4f37      	ldr	r7, [pc, #220]	; (b264 <nv_storage_init+0x178>)
    b188:	e00e      	b.n	b1a8 <nv_storage_init+0xbc>
		if (i == sizeof(struct block_header)) {
    b18a:	2b0e      	cmp	r3, #14
    b18c:	d01f      	beq.n	b1ce <nv_storage_init+0xe2>
		} else if (header.checksum != calculate_block_header_checksum(&header)) {
    b18e:	f8bd a010 	ldrh.w	sl, [sp, #16]
    b192:	a801      	add	r0, sp, #4
    b194:	47b8      	blx	r7
    b196:	4582      	cmp	sl, r0
    b198:	d01c      	beq.n	b1d4 <nv_storage_init+0xe8>
			mem.pow = nv_align_next_access_address(mem.pow + sizeof(struct block_header), BLOCK_WITH_DATA_ALIGNMENT);
    b19a:	8820      	ldrh	r0, [r4, #0]
    b19c:	300e      	adds	r0, #14
    b19e:	2101      	movs	r1, #1
    b1a0:	b280      	uxth	r0, r0
    b1a2:	4b2e      	ldr	r3, [pc, #184]	; (b25c <nv_storage_init+0x170>)
    b1a4:	4798      	blx	r3
    b1a6:	8020      	strh	r0, [r4, #0]
		nv_read(number, mem.pow, (uint8_t *)&header, sizeof(struct block_header));
    b1a8:	230e      	movs	r3, #14
    b1aa:	aa01      	add	r2, sp, #4
    b1ac:	8821      	ldrh	r1, [r4, #0]
    b1ae:	4628      	mov	r0, r5
    b1b0:	47b0      	blx	r6
			if (((uint8_t *)&header)[i] != 0xFF) {
    b1b2:	f89d 3004 	ldrb.w	r3, [sp, #4]
    b1b6:	2bff      	cmp	r3, #255	; 0xff
    b1b8:	d1e9      	bne.n	b18e <nv_storage_init+0xa2>
    b1ba:	aa01      	add	r2, sp, #4
		for (i = 0; i < sizeof(struct block_header); i++) {
    b1bc:	2301      	movs	r3, #1
			if (((uint8_t *)&header)[i] != 0xFF) {
    b1be:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    b1c2:	29ff      	cmp	r1, #255	; 0xff
    b1c4:	d1e1      	bne.n	b18a <nv_storage_init+0x9e>
		for (i = 0; i < sizeof(struct block_header); i++) {
    b1c6:	3301      	adds	r3, #1
    b1c8:	b2db      	uxtb	r3, r3
    b1ca:	2b0e      	cmp	r3, #14
    b1cc:	d1f7      	bne.n	b1be <nv_storage_init+0xd2>
}
    b1ce:	b008      	add	sp, #32
    b1d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (header.active) {
    b1d4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    b1d8:	b15b      	cbz	r3, b1f2 <nv_storage_init+0x106>
			mem.pow += sizeof(struct block_header) + header.block_size;
    b1da:	8820      	ldrh	r0, [r4, #0]
    b1dc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    b1e0:	4418      	add	r0, r3
    b1e2:	300e      	adds	r0, #14
    b1e4:	b280      	uxth	r0, r0
    b1e6:	8020      	strh	r0, [r4, #0]
			mem.pow = nv_align_next_access_address(mem.pow, BLOCK_WITH_DATA_ALIGNMENT);
    b1e8:	2101      	movs	r1, #1
    b1ea:	4b1c      	ldr	r3, [pc, #112]	; (b25c <nv_storage_init+0x170>)
    b1ec:	4798      	blx	r3
    b1ee:	8020      	strh	r0, [r4, #0]
    b1f0:	e7da      	b.n	b1a8 <nv_storage_init+0xbc>
			struct nv_item *item = find_item(header.id);
    b1f2:	f8bd a006 	ldrh.w	sl, [sp, #6]
    b1f6:	4650      	mov	r0, sl
    b1f8:	4b1b      	ldr	r3, [pc, #108]	; (b268 <nv_storage_init+0x17c>)
    b1fa:	4798      	blx	r3
			if (!item) {
    b1fc:	4602      	mov	r2, r0
    b1fe:	b1d8      	cbz	r0, b238 <nv_storage_init+0x14c>
			if (header.item_size == 0) {
    b200:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    b204:	b943      	cbnz	r3, b218 <nv_storage_init+0x12c>
				*item = mem.items[--mem.items_amount];
    b206:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    b208:	3b01      	subs	r3, #1
    b20a:	b29b      	uxth	r3, r3
    b20c:	8563      	strh	r3, [r4, #42]	; 0x2a
    b20e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    b212:	f8d3 3002 	ldr.w	r3, [r3, #2]
    b216:	6013      	str	r3, [r2, #0]
			item->last_block = mem.pow;
    b218:	8823      	ldrh	r3, [r4, #0]
    b21a:	8053      	strh	r3, [r2, #2]
			mem.pow += sizeof(struct block_header) + header.block_size;
    b21c:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    b220:	4418      	add	r0, r3
    b222:	300e      	adds	r0, #14
    b224:	b280      	uxth	r0, r0
    b226:	8020      	strh	r0, [r4, #0]
			mem.pow = nv_align_next_access_address(mem.pow, BLOCK_WITH_DATA_ALIGNMENT);
    b228:	2101      	movs	r1, #1
    b22a:	4b0c      	ldr	r3, [pc, #48]	; (b25c <nv_storage_init+0x170>)
    b22c:	4798      	blx	r3
    b22e:	8020      	strh	r0, [r4, #0]
			address = CONF_STORAGE_MEMORY_START + number * CONF_SECTOR_SIZE + mem.pow;
    b230:	4440      	add	r0, r8
			if (address >= NV_SECTOR_END(number)) {
    b232:	4548      	cmp	r0, r9
    b234:	d3b8      	bcc.n	b1a8 <nv_storage_init+0xbc>
    b236:	e7ca      	b.n	b1ce <nv_storage_init+0xe2>
				item     = &mem.items[mem.items_amount++];
    b238:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    b23a:	1c5a      	adds	r2, r3, #1
    b23c:	8562      	strh	r2, [r4, #42]	; 0x2a
    b23e:	009b      	lsls	r3, r3, #2
    b240:	1c9a      	adds	r2, r3, #2
    b242:	4422      	add	r2, r4
				item->id = header.id;
    b244:	4423      	add	r3, r4
    b246:	f8a3 a002 	strh.w	sl, [r3, #2]
    b24a:	e7d9      	b.n	b200 <nv_storage_init+0x114>
    b24c:	0000ae15 	.word	0x0000ae15
    b250:	00011140 	.word	0x00011140
    b254:	000026b1 	.word	0x000026b1
    b258:	20007240 	.word	0x20007240
    b25c:	0000aca9 	.word	0x0000aca9
    b260:	0000aa91 	.word	0x0000aa91
    b264:	0000ad15 	.word	0x0000ad15
    b268:	0000acd5 	.word	0x0000acd5
    b26c:	00011138 	.word	0x00011138
    b270:	0000da4d 	.word	0x0000da4d

0000b274 <nv_storage_write>:
{
    b274:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b278:	b085      	sub	sp, #20
    b27a:	4606      	mov	r6, r0
    b27c:	460f      	mov	r7, r1
    b27e:	461c      	mov	r4, r3
	ASSERT(data && size && id);
    b280:	4690      	mov	r8, r2
    b282:	2a00      	cmp	r2, #0
    b284:	d065      	beq.n	b352 <nv_storage_write+0xde>
    b286:	2b00      	cmp	r3, #0
    b288:	d065      	beq.n	b356 <nv_storage_write+0xe2>
    b28a:	3000      	adds	r0, #0
    b28c:	bf18      	it	ne
    b28e:	2001      	movne	r0, #1
    b290:	22aa      	movs	r2, #170	; 0xaa
    b292:	4953      	ldr	r1, [pc, #332]	; (b3e0 <nv_storage_write+0x16c>)
    b294:	4b53      	ldr	r3, [pc, #332]	; (b3e4 <nv_storage_write+0x170>)
    b296:	4798      	blx	r3
	if (CONF_SECTOR_SIZE - mem.pow < size) {
    b298:	4b53      	ldr	r3, [pc, #332]	; (b3e8 <nv_storage_write+0x174>)
    b29a:	881a      	ldrh	r2, [r3, #0]
    b29c:	f5c2 5280 	rsb	r2, r2, #4096	; 0x1000
	if (!copy_sector_if_needed(sizeof(struct block_header) + size)) {
    b2a0:	f104 030e 	add.w	r3, r4, #14
	if (CONF_SECTOR_SIZE - mem.pow < size) {
    b2a4:	b29b      	uxth	r3, r3
    b2a6:	429a      	cmp	r2, r3
    b2a8:	db57      	blt.n	b35a <nv_storage_write+0xe6>
	item = find_item(id);
    b2aa:	4630      	mov	r0, r6
    b2ac:	4b4f      	ldr	r3, [pc, #316]	; (b3ec <nv_storage_write+0x178>)
    b2ae:	4798      	blx	r3
	if (!item) {
    b2b0:	4605      	mov	r5, r0
    b2b2:	2800      	cmp	r0, #0
    b2b4:	d05c      	beq.n	b370 <nv_storage_write+0xfc>
		nv_read(mem.active_sector, item->last_block, (uint8_t *)&header, sizeof(struct block_header));
    b2b6:	230e      	movs	r3, #14
    b2b8:	466a      	mov	r2, sp
    b2ba:	8841      	ldrh	r1, [r0, #2]
    b2bc:	484a      	ldr	r0, [pc, #296]	; (b3e8 <nv_storage_write+0x174>)
    b2be:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    b2c2:	f8df 9140 	ldr.w	r9, [pc, #320]	; b404 <nv_storage_write+0x190>
    b2c6:	47c8      	blx	r9
		fill_block_header(&header, id, offset, size, header.item_size, item->last_block);
    b2c8:	f8bd 9008 	ldrh.w	r9, [sp, #8]
    b2cc:	886b      	ldrh	r3, [r5, #2]
	header->active     = 0xFFFF;
    b2ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
    b2d2:	f8ad 2000 	strh.w	r2, [sp]
	header->id         = id;
    b2d6:	f8ad 6002 	strh.w	r6, [sp, #2]
	header->offset     = offset;
    b2da:	f8ad 7004 	strh.w	r7, [sp, #4]
	header->block_size = block_size;
    b2de:	f8ad 4006 	strh.w	r4, [sp, #6]
	header->prev_block = prev_block;
    b2e2:	f8ad 300a 	strh.w	r3, [sp, #10]
	header->checksum   = calculate_block_header_checksum(header);
    b2e6:	4668      	mov	r0, sp
    b2e8:	4b41      	ldr	r3, [pc, #260]	; (b3f0 <nv_storage_write+0x17c>)
    b2ea:	4798      	blx	r3
    b2ec:	f8ad 000c 	strh.w	r0, [sp, #12]
		if (((uint32_t)offset + (uint32_t)size) > header.item_size) {
    b2f0:	4427      	add	r7, r4
    b2f2:	454f      	cmp	r7, r9
    b2f4:	d86a      	bhi.n	b3cc <nv_storage_write+0x158>
	last_block = mem.pow;
    b2f6:	4b3c      	ldr	r3, [pc, #240]	; (b3e8 <nv_storage_write+0x174>)
    b2f8:	881f      	ldrh	r7, [r3, #0]
	if (!write_block_header(&header)) {
    b2fa:	4668      	mov	r0, sp
    b2fc:	4b3d      	ldr	r3, [pc, #244]	; (b3f4 <nv_storage_write+0x180>)
    b2fe:	4798      	blx	r3
    b300:	2800      	cmp	r0, #0
    b302:	d066      	beq.n	b3d2 <nv_storage_write+0x15e>
	if (!write_and_verify(mem.active_sector, mem.pow + sizeof(struct block_header), data, size)) {
    b304:	4838      	ldr	r0, [pc, #224]	; (b3e8 <nv_storage_write+0x174>)
    b306:	8801      	ldrh	r1, [r0, #0]
    b308:	310e      	adds	r1, #14
    b30a:	4623      	mov	r3, r4
    b30c:	4642      	mov	r2, r8
    b30e:	b289      	uxth	r1, r1
    b310:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    b314:	f8df 80f0 	ldr.w	r8, [pc, #240]	; b408 <nv_storage_write+0x194>
    b318:	47c0      	blx	r8
    b31a:	2800      	cmp	r0, #0
    b31c:	d03d      	beq.n	b39a <nv_storage_write+0x126>
	if (!activate_block_header(size)) {
    b31e:	4620      	mov	r0, r4
    b320:	4b35      	ldr	r3, [pc, #212]	; (b3f8 <nv_storage_write+0x184>)
    b322:	4798      	blx	r3
    b324:	2800      	cmp	r0, #0
    b326:	d057      	beq.n	b3d8 <nv_storage_write+0x164>
	mem.pow += sizeof(struct block_header) + size;
    b328:	f8df 80bc 	ldr.w	r8, [pc, #188]	; b3e8 <nv_storage_write+0x174>
    b32c:	f8b8 0000 	ldrh.w	r0, [r8]
    b330:	300e      	adds	r0, #14
    b332:	4420      	add	r0, r4
    b334:	b280      	uxth	r0, r0
    b336:	f8a8 0000 	strh.w	r0, [r8]
	mem.pow = nv_align_next_access_address(mem.pow, BLOCK_WITH_DATA_ALIGNMENT);
    b33a:	2101      	movs	r1, #1
    b33c:	4b2f      	ldr	r3, [pc, #188]	; (b3fc <nv_storage_write+0x188>)
    b33e:	4798      	blx	r3
    b340:	f8a8 0000 	strh.w	r0, [r8]
	if (!item) {
    b344:	2d00      	cmp	r5, #0
    b346:	d035      	beq.n	b3b4 <nv_storage_write+0x140>
	item->last_block = last_block;
    b348:	806f      	strh	r7, [r5, #2]
	return ERR_NONE;
    b34a:	2000      	movs	r0, #0
}
    b34c:	b005      	add	sp, #20
    b34e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ASSERT(data && size && id);
    b352:	2000      	movs	r0, #0
    b354:	e79c      	b.n	b290 <nv_storage_write+0x1c>
    b356:	2000      	movs	r0, #0
    b358:	e79a      	b.n	b290 <nv_storage_write+0x1c>
		return copy_data_to_new_sector();
    b35a:	4b29      	ldr	r3, [pc, #164]	; (b400 <nv_storage_write+0x18c>)
    b35c:	4798      	blx	r3
	if (!copy_sector_if_needed(sizeof(struct block_header) + size)) {
    b35e:	2800      	cmp	r0, #0
    b360:	d1a3      	bne.n	b2aa <nv_storage_write+0x36>
		ASSERT(false);
    b362:	22ad      	movs	r2, #173	; 0xad
    b364:	491e      	ldr	r1, [pc, #120]	; (b3e0 <nv_storage_write+0x16c>)
    b366:	4b1f      	ldr	r3, [pc, #124]	; (b3e4 <nv_storage_write+0x170>)
    b368:	4798      	blx	r3
		return ERR_FAILURE;
    b36a:	f06f 001d 	mvn.w	r0, #29
    b36e:	e7ed      	b.n	b34c <nv_storage_write+0xd8>
	header->active     = 0xFFFF;
    b370:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b374:	f8ad 3000 	strh.w	r3, [sp]
	header->id         = id;
    b378:	f8ad 6002 	strh.w	r6, [sp, #2]
	header->offset     = offset;
    b37c:	2300      	movs	r3, #0
    b37e:	f8ad 3004 	strh.w	r3, [sp, #4]
	header->block_size = block_size;
    b382:	f8ad 4006 	strh.w	r4, [sp, #6]
	header->item_size  = item_size;
    b386:	f8ad 4008 	strh.w	r4, [sp, #8]
	header->prev_block = prev_block;
    b38a:	f8ad 300a 	strh.w	r3, [sp, #10]
	header->checksum   = calculate_block_header_checksum(header);
    b38e:	4668      	mov	r0, sp
    b390:	4b17      	ldr	r3, [pc, #92]	; (b3f0 <nv_storage_write+0x17c>)
    b392:	4798      	blx	r3
    b394:	f8ad 000c 	strh.w	r0, [sp, #12]
    b398:	e7ad      	b.n	b2f6 <nv_storage_write+0x82>
		mem.pow += sizeof(struct block_header) + size;
    b39a:	4d13      	ldr	r5, [pc, #76]	; (b3e8 <nv_storage_write+0x174>)
    b39c:	8828      	ldrh	r0, [r5, #0]
    b39e:	300e      	adds	r0, #14
    b3a0:	4420      	add	r0, r4
    b3a2:	b280      	uxth	r0, r0
    b3a4:	8028      	strh	r0, [r5, #0]
		mem.pow = nv_align_next_access_address(mem.pow, BLOCK_WITH_DATA_ALIGNMENT);
    b3a6:	2101      	movs	r1, #1
    b3a8:	4b14      	ldr	r3, [pc, #80]	; (b3fc <nv_storage_write+0x188>)
    b3aa:	4798      	blx	r3
    b3ac:	8028      	strh	r0, [r5, #0]
		return ERR_FAILURE;
    b3ae:	f06f 001d 	mvn.w	r0, #29
    b3b2:	e7cb      	b.n	b34c <nv_storage_write+0xd8>
		item     = &mem.items[mem.items_amount++];
    b3b4:	4643      	mov	r3, r8
    b3b6:	f8b8 202a 	ldrh.w	r2, [r8, #42]	; 0x2a
    b3ba:	1c51      	adds	r1, r2, #1
    b3bc:	f8a8 102a 	strh.w	r1, [r8, #42]	; 0x2a
    b3c0:	0092      	lsls	r2, r2, #2
    b3c2:	1c95      	adds	r5, r2, #2
    b3c4:	4445      	add	r5, r8
		item->id = id;
    b3c6:	4413      	add	r3, r2
    b3c8:	805e      	strh	r6, [r3, #2]
    b3ca:	e7bd      	b.n	b348 <nv_storage_write+0xd4>
			return ERR_WRONG_LENGTH;
    b3cc:	f06f 001e 	mvn.w	r0, #30
    b3d0:	e7bc      	b.n	b34c <nv_storage_write+0xd8>
		return ERR_FAILURE;
    b3d2:	f06f 001d 	mvn.w	r0, #29
    b3d6:	e7b9      	b.n	b34c <nv_storage_write+0xd8>
		return ERR_FAILURE;
    b3d8:	f06f 001d 	mvn.w	r0, #29
    b3dc:	e7b6      	b.n	b34c <nv_storage_write+0xd8>
    b3de:	bf00      	nop
    b3e0:	00011140 	.word	0x00011140
    b3e4:	000026b1 	.word	0x000026b1
    b3e8:	20007240 	.word	0x20007240
    b3ec:	0000acd5 	.word	0x0000acd5
    b3f0:	0000ad15 	.word	0x0000ad15
    b3f4:	0000b051 	.word	0x0000b051
    b3f8:	0000b0a5 	.word	0x0000b0a5
    b3fc:	0000aca9 	.word	0x0000aca9
    b400:	0000aebd 	.word	0x0000aebd
    b404:	0000aa91 	.word	0x0000aa91
    b408:	0000ade9 	.word	0x0000ade9

0000b40c <nv_storage_read>:
{
    b40c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b410:	b084      	sub	sp, #16
    b412:	4605      	mov	r5, r0
    b414:	460e      	mov	r6, r1
    b416:	461c      	mov	r4, r3
	ASSERT(data && size && id);
    b418:	4690      	mov	r8, r2
    b41a:	b33a      	cbz	r2, b46c <nv_storage_read+0x60>
    b41c:	b343      	cbz	r3, b470 <nv_storage_read+0x64>
    b41e:	3000      	adds	r0, #0
    b420:	bf18      	it	ne
    b422:	2001      	movne	r0, #1
    b424:	22e3      	movs	r2, #227	; 0xe3
    b426:	4916      	ldr	r1, [pc, #88]	; (b480 <nv_storage_read+0x74>)
    b428:	4b16      	ldr	r3, [pc, #88]	; (b484 <nv_storage_read+0x78>)
    b42a:	4798      	blx	r3
	item = find_item(id);
    b42c:	4628      	mov	r0, r5
    b42e:	4b16      	ldr	r3, [pc, #88]	; (b488 <nv_storage_read+0x7c>)
    b430:	4798      	blx	r3
	if (!item) {
    b432:	4605      	mov	r5, r0
    b434:	b1f0      	cbz	r0, b474 <nv_storage_read+0x68>
	nv_read(mem.active_sector, item->last_block, (uint8_t *)&header, sizeof(struct block_header));
    b436:	230e      	movs	r3, #14
    b438:	466a      	mov	r2, sp
    b43a:	8841      	ldrh	r1, [r0, #2]
    b43c:	4813      	ldr	r0, [pc, #76]	; (b48c <nv_storage_read+0x80>)
    b43e:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    b442:	4f13      	ldr	r7, [pc, #76]	; (b490 <nv_storage_read+0x84>)
    b444:	47b8      	blx	r7
	if (((uint32_t)size + (uint32_t)offset) > header.item_size) {
    b446:	19a3      	adds	r3, r4, r6
    b448:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    b44c:	4293      	cmp	r3, r2
    b44e:	d814      	bhi.n	b47a <nv_storage_read+0x6e>
	if (!collect_item_data(item, data, offset, size)) {
    b450:	4623      	mov	r3, r4
    b452:	4632      	mov	r2, r6
    b454:	4641      	mov	r1, r8
    b456:	4628      	mov	r0, r5
    b458:	4c0e      	ldr	r4, [pc, #56]	; (b494 <nv_storage_read+0x88>)
    b45a:	47a0      	blx	r4
    b45c:	2800      	cmp	r0, #0
	return ERR_NONE;
    b45e:	bf0c      	ite	eq
    b460:	f06f 001d 	mvneq.w	r0, #29
    b464:	2000      	movne	r0, #0
}
    b466:	b004      	add	sp, #16
    b468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(data && size && id);
    b46c:	2000      	movs	r0, #0
    b46e:	e7d9      	b.n	b424 <nv_storage_read+0x18>
    b470:	2000      	movs	r0, #0
    b472:	e7d7      	b.n	b424 <nv_storage_read+0x18>
		return ERR_NOT_FOUND;
    b474:	f06f 0009 	mvn.w	r0, #9
    b478:	e7f5      	b.n	b466 <nv_storage_read+0x5a>
		return ERR_WRONG_LENGTH;
    b47a:	f06f 001e 	mvn.w	r0, #30
    b47e:	e7f2      	b.n	b466 <nv_storage_read+0x5a>
    b480:	00011140 	.word	0x00011140
    b484:	000026b1 	.word	0x000026b1
    b488:	0000acd5 	.word	0x0000acd5
    b48c:	20007240 	.word	0x20007240
    b490:	0000aa91 	.word	0x0000aa91
    b494:	0000ad41 	.word	0x0000ad41

0000b498 <persistent_storage_init>:

/**
 * \brief Initialize Persistent Storage
 */
void persistent_storage_init(void)
{
    b498:	b508      	push	{r3, lr}
	nv_init(&FLASH_0);
    b49a:	4803      	ldr	r0, [pc, #12]	; (b4a8 <persistent_storage_init+0x10>)
    b49c:	4b03      	ldr	r3, [pc, #12]	; (b4ac <persistent_storage_init+0x14>)
    b49e:	4798      	blx	r3
	nv_storage_init();
    b4a0:	4b03      	ldr	r3, [pc, #12]	; (b4b0 <persistent_storage_init+0x18>)
    b4a2:	4798      	blx	r3
    b4a4:	bd08      	pop	{r3, pc}
    b4a6:	bf00      	nop
    b4a8:	2000740c 	.word	0x2000740c
    b4ac:	0000a9d9 	.word	0x0000a9d9
    b4b0:	0000b0ed 	.word	0x0000b0ed

0000b4b4 <ring_init>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: Called by the main code application to setup and initialize the BPDU ring topology management
// Returns:     Nothing (NULL)
// *****************************************************************************************************************************************************************
void ring_init(unsigned char basestation, unsigned char *mac_raw)
{
    b4b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b4b6:	460c      	mov	r4, r1
	int				loop;
	
	/* set flags to indicate first time boot-up */
	first = 1;
    b4b8:	2201      	movs	r2, #1
    b4ba:	4b97      	ldr	r3, [pc, #604]	; (b718 <ring_init+0x264>)
    b4bc:	701a      	strb	r2, [r3, #0]
	storm_holdoff = 0;

	/* "basestation" parameter determines if this MultiSense unit is a base-station or simple pass-through... */
	if (basestation) {
    b4be:	4606      	mov	r6, r0
    b4c0:	2800      	cmp	r0, #0
    b4c2:	f000 80b4 	beq.w	b62e <ring_init+0x17a>
		xprintf("ETHERNET: Set as a base-station to manage Ethernet topology...\r\n");
    b4c6:	4895      	ldr	r0, [pc, #596]	; (b71c <ring_init+0x268>)
    b4c8:	4b95      	ldr	r3, [pc, #596]	; (b720 <ring_init+0x26c>)
    b4ca:	4798      	blx	r3
		
		/* Enable BPDU tags */
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA8, 0x00);
    b4cc:	2100      	movs	r1, #0
    b4ce:	2070      	movs	r0, #112	; 0x70
    b4d0:	4d94      	ldr	r5, [pc, #592]	; (b724 <ring_init+0x270>)
    b4d2:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA7, 0x00);
    b4d4:	2100      	movs	r1, #0
    b4d6:	2071      	movs	r0, #113	; 0x71
    b4d8:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA6, 0x71);
    b4da:	2171      	movs	r1, #113	; 0x71
    b4dc:	2072      	movs	r0, #114	; 0x72
    b4de:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA5, 0x01);
    b4e0:	2101      	movs	r1, #1
    b4e2:	2073      	movs	r0, #115	; 0x73
    b4e4:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA4, 0x80);
    b4e6:	2180      	movs	r1, #128	; 0x80
    b4e8:	2074      	movs	r0, #116	; 0x74
    b4ea:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA3, 0xC2);
    b4ec:	21c2      	movs	r1, #194	; 0xc2
    b4ee:	2075      	movs	r0, #117	; 0x75
    b4f0:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA2, 0x00);
    b4f2:	2100      	movs	r1, #0
    b4f4:	2076      	movs	r0, #118	; 0x76
    b4f6:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA1, 0x00);
    b4f8:	2100      	movs	r1, #0
    b4fa:	2077      	movs	r0, #119	; 0x77
    b4fc:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA0, 0x00);
    b4fe:	2100      	movs	r1, #0
    b500:	2078      	movs	r0, #120	; 0x78
    b502:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_CONTROL0, 0x00);
    b504:	2100      	movs	r1, #0
    b506:	206e      	movs	r0, #110	; 0x6e
    b508:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_CONTROL1, 0x00);
    b50a:	2100      	movs	r1, #0
    b50c:	206f      	movs	r0, #111	; 0x6f
    b50e:	47a8      	blx	r5
		delay_us(250);
    b510:	20fa      	movs	r0, #250	; 0xfa
    b512:	4f85      	ldr	r7, [pc, #532]	; (b728 <ring_init+0x274>)
    b514:	47b8      	blx	r7
		
		/* Read back the static MAC table and check that the BPDU enabling is in operation? */
		writeKSZreg(SPI_KSZ8794_ACCESS_CONTROL0, 0x10);
    b516:	2110      	movs	r1, #16
    b518:	206e      	movs	r0, #110	; 0x6e
    b51a:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_CONTROL1, 0x00);
    b51c:	2100      	movs	r1, #0
    b51e:	206f      	movs	r0, #111	; 0x6f
    b520:	47a8      	blx	r5
		delay_us(50);
    b522:	2032      	movs	r0, #50	; 0x32
    b524:	47b8      	blx	r7

		/* Check the individual registers from the SPI bus */
		if ((!checkKSZreg(SPI_KSZ8794_ACCESS_DATA8, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA7, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA6, 0x71)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA5, 0x01)) ||
    b526:	2100      	movs	r1, #0
    b528:	2070      	movs	r0, #112	; 0x70
    b52a:	4b80      	ldr	r3, [pc, #512]	; (b72c <ring_init+0x278>)
    b52c:	4798      	blx	r3
    b52e:	b128      	cbz	r0, b53c <ring_init+0x88>
    b530:	2100      	movs	r1, #0
    b532:	2071      	movs	r0, #113	; 0x71
    b534:	4b7d      	ldr	r3, [pc, #500]	; (b72c <ring_init+0x278>)
    b536:	4798      	blx	r3
    b538:	2800      	cmp	r0, #0
    b53a:	d14d      	bne.n	b5d8 <ring_init+0x124>
	        (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA4, 0x80)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA3, 0xC2)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA2, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA1, 0x00)) ||
		    (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA0, 0x00))) { xprintf("ERROR setting the STATIC MAC table with BPDU for Base-station...\r\n"); }
    b53c:	487c      	ldr	r0, [pc, #496]	; (b730 <ring_init+0x27c>)
    b53e:	4b78      	ldr	r3, [pc, #480]	; (b720 <ring_init+0x26c>)
    b540:	4798      	blx	r3
				
		/* Set the local context "mode" to indicate this is in fact a base-station */		
		mode = 1;
    b542:	2201      	movs	r2, #1
    b544:	4b74      	ldr	r3, [pc, #464]	; (b718 <ring_init+0x264>)
    b546:	705a      	strb	r2, [r3, #1]
		/* Set the local context "mode" to indicate this is in fact a pass-though un-configured node */		
		mode = 0;
	}
	
	/* Bridge DST MAC */
	wbuf[0] = 0x01;
    b548:	4a73      	ldr	r2, [pc, #460]	; (b718 <ring_init+0x264>)
    b54a:	2101      	movs	r1, #1
    b54c:	7111      	strb	r1, [r2, #4]
	wbuf[1] = 0x80;
    b54e:	2580      	movs	r5, #128	; 0x80
    b550:	7155      	strb	r5, [r2, #5]
	wbuf[2] = 0xC2;
    b552:	20c2      	movs	r0, #194	; 0xc2
    b554:	7190      	strb	r0, [r2, #6]
	wbuf[3] = 0x00;
    b556:	2300      	movs	r3, #0
    b558:	71d3      	strb	r3, [r2, #7]
	wbuf[4] = 0x00;
    b55a:	7213      	strb	r3, [r2, #8]
	wbuf[5] = 0x00;
    b55c:	7253      	strb	r3, [r2, #9]

	/* Bridge SRC MAC */
	wbuf[6] = 0x01;
    b55e:	7291      	strb	r1, [r2, #10]
	wbuf[7] = 0x80;
    b560:	72d5      	strb	r5, [r2, #11]
	wbuf[8] = 0xC2;
    b562:	7310      	strb	r0, [r2, #12]
	wbuf[9] = 0x00;
    b564:	7353      	strb	r3, [r2, #13]
	wbuf[10] = 0x00;
    b566:	7393      	strb	r3, [r2, #14]
	wbuf[11] = 0x01;
    b568:	73d1      	strb	r1, [r2, #15]

	/* BPDU TAG field. Forced forwarding, filtering, priority, send to Port 0 ONLY */
	*((unsigned short int *)&wbuf[12]) = 0x01E0;
    b56a:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
    b56e:	8210      	strh	r0, [r2, #16]
	wbuf[14] = 0x00;
    b570:	7493      	strb	r3, [r2, #18]
	wbuf[15] = 0x07;
    b572:	2007      	movs	r0, #7
    b574:	74d0      	strb	r0, [r2, #19]
	wbuf[16] = 0x00;
    b576:	7513      	strb	r3, [r2, #20]
	wbuf[17] = 0x00;
    b578:	7553      	strb	r3, [r2, #21]
	wbuf[18] = 0x00;
    b57a:	7593      	strb	r3, [r2, #22]
	wbuf[19] = 0x01;
    b57c:	75d1      	strb	r1, [r2, #23]

	/* BPDU Length/Type */
	wbuf[20] = 0x00;
    b57e:	7613      	strb	r3, [r2, #24]
	wbuf[21] = 0x27;
    b580:	2127      	movs	r1, #39	; 0x27
    b582:	7651      	strb	r1, [r2, #25]
	wbuf[22] = 0x42;
    b584:	2142      	movs	r1, #66	; 0x42
    b586:	7691      	strb	r1, [r2, #26]
	wbuf[23] = 0x42;
    b588:	76d1      	strb	r1, [r2, #27]
    wbuf[24] = 0x03;
    b58a:	2103      	movs	r1, #3
    b58c:	7711      	strb	r1, [r2, #28]

	/* BPDU Header */
	wbuf[25] = 0x00;
    b58e:	7753      	strb	r3, [r2, #29]
	wbuf[26] = 0x00;
    b590:	7793      	strb	r3, [r2, #30]
	wbuf[27] = 0x00;
    b592:	77d3      	strb	r3, [r2, #31]
	wbuf[28] = 0x00;
    b594:	f882 3020 	strb.w	r3, [r2, #32]

	/* BPDU data payload */
	wbuf[29] = mac_raw[0];
    b598:	7823      	ldrb	r3, [r4, #0]
    b59a:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
	wbuf[30] = mac_raw[1];
    b59e:	7863      	ldrb	r3, [r4, #1]
    b5a0:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
	wbuf[31] = mac_raw[2];
    b5a4:	78a3      	ldrb	r3, [r4, #2]
    b5a6:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
	wbuf[32] = mac_raw[3];
    b5aa:	78e3      	ldrb	r3, [r4, #3]
    b5ac:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
	wbuf[33] = mac_raw[4];
    b5b0:	7923      	ldrb	r3, [r4, #4]
    b5b2:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	wbuf[34] = mac_raw[5];
    b5b6:	7961      	ldrb	r1, [r4, #5]
    b5b8:	4613      	mov	r3, r2
    b5ba:	f803 1f26 	strb.w	r1, [r3, #38]!
    b5be:	3247      	adds	r2, #71	; 0x47

	/* BPDU Padding ZEROs */
	for (loop = 35; loop < 68; loop++) {
		wbuf[loop] = 0x00;
    b5c0:	2100      	movs	r1, #0
    b5c2:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (loop = 35; loop < 68; loop++) {
    b5c6:	4293      	cmp	r3, r2
    b5c8:	d1fb      	bne.n	b5c2 <ring_init+0x10e>
	}
	
	xprintf("ETHERNET: Completed RING management init...\r\n");
    b5ca:	485a      	ldr	r0, [pc, #360]	; (b734 <ring_init+0x280>)
    b5cc:	4b54      	ldr	r3, [pc, #336]	; (b720 <ring_init+0x26c>)
    b5ce:	4798      	blx	r3
	
	/* If we are a base-station, then send out the first BPDU frame now upon start-up */
	if (basestation) {																						/* When [BS] switched selected, we are a base-station */
    b5d0:	2e00      	cmp	r6, #0
    b5d2:	f040 8098 	bne.w	b706 <ring_init+0x252>
    b5d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((!checkKSZreg(SPI_KSZ8794_ACCESS_DATA8, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA7, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA6, 0x71)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA5, 0x01)) ||
    b5d8:	2171      	movs	r1, #113	; 0x71
    b5da:	2072      	movs	r0, #114	; 0x72
    b5dc:	4b53      	ldr	r3, [pc, #332]	; (b72c <ring_init+0x278>)
    b5de:	4798      	blx	r3
    b5e0:	2800      	cmp	r0, #0
    b5e2:	d0ab      	beq.n	b53c <ring_init+0x88>
    b5e4:	2101      	movs	r1, #1
    b5e6:	2073      	movs	r0, #115	; 0x73
    b5e8:	4b50      	ldr	r3, [pc, #320]	; (b72c <ring_init+0x278>)
    b5ea:	4798      	blx	r3
    b5ec:	2800      	cmp	r0, #0
    b5ee:	d0a5      	beq.n	b53c <ring_init+0x88>
	        (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA4, 0x80)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA3, 0xC2)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA2, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA1, 0x00)) ||
    b5f0:	2180      	movs	r1, #128	; 0x80
    b5f2:	2074      	movs	r0, #116	; 0x74
    b5f4:	4b4d      	ldr	r3, [pc, #308]	; (b72c <ring_init+0x278>)
    b5f6:	4798      	blx	r3
		if ((!checkKSZreg(SPI_KSZ8794_ACCESS_DATA8, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA7, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA6, 0x71)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA5, 0x01)) ||
    b5f8:	2800      	cmp	r0, #0
    b5fa:	d09f      	beq.n	b53c <ring_init+0x88>
	        (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA4, 0x80)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA3, 0xC2)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA2, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA1, 0x00)) ||
    b5fc:	21c2      	movs	r1, #194	; 0xc2
    b5fe:	2075      	movs	r0, #117	; 0x75
    b600:	4b4a      	ldr	r3, [pc, #296]	; (b72c <ring_init+0x278>)
    b602:	4798      	blx	r3
    b604:	2800      	cmp	r0, #0
    b606:	d099      	beq.n	b53c <ring_init+0x88>
    b608:	2100      	movs	r1, #0
    b60a:	2076      	movs	r0, #118	; 0x76
    b60c:	4b47      	ldr	r3, [pc, #284]	; (b72c <ring_init+0x278>)
    b60e:	4798      	blx	r3
    b610:	2800      	cmp	r0, #0
    b612:	d093      	beq.n	b53c <ring_init+0x88>
    b614:	2100      	movs	r1, #0
    b616:	2077      	movs	r0, #119	; 0x77
    b618:	4b44      	ldr	r3, [pc, #272]	; (b72c <ring_init+0x278>)
    b61a:	4798      	blx	r3
    b61c:	2800      	cmp	r0, #0
    b61e:	d08d      	beq.n	b53c <ring_init+0x88>
		    (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA0, 0x00))) { xprintf("ERROR setting the STATIC MAC table with BPDU for Base-station...\r\n"); }
    b620:	2100      	movs	r1, #0
    b622:	2078      	movs	r0, #120	; 0x78
    b624:	4b41      	ldr	r3, [pc, #260]	; (b72c <ring_init+0x278>)
    b626:	4798      	blx	r3
	        (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA4, 0x80)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA3, 0xC2)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA2, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA1, 0x00)) ||
    b628:	2800      	cmp	r0, #0
    b62a:	d18a      	bne.n	b542 <ring_init+0x8e>
    b62c:	e786      	b.n	b53c <ring_init+0x88>
		xprintf("ETHERNET: normal none-managed pass-through node...\r\n");
    b62e:	4842      	ldr	r0, [pc, #264]	; (b738 <ring_init+0x284>)
    b630:	4b3b      	ldr	r3, [pc, #236]	; (b720 <ring_init+0x26c>)
    b632:	4798      	blx	r3
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA8, 0x00);
    b634:	2100      	movs	r1, #0
    b636:	2070      	movs	r0, #112	; 0x70
    b638:	4d3a      	ldr	r5, [pc, #232]	; (b724 <ring_init+0x270>)
    b63a:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA7, 0x00);
    b63c:	2100      	movs	r1, #0
    b63e:	2071      	movs	r0, #113	; 0x71
    b640:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA6, 0x61);
    b642:	2161      	movs	r1, #97	; 0x61
    b644:	2072      	movs	r0, #114	; 0x72
    b646:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA5, 0x01);
    b648:	2101      	movs	r1, #1
    b64a:	2073      	movs	r0, #115	; 0x73
    b64c:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA4, 0x80);
    b64e:	2180      	movs	r1, #128	; 0x80
    b650:	2074      	movs	r0, #116	; 0x74
    b652:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA3, 0xC2);
    b654:	21c2      	movs	r1, #194	; 0xc2
    b656:	2075      	movs	r0, #117	; 0x75
    b658:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA2, 0x00);
    b65a:	2100      	movs	r1, #0
    b65c:	2076      	movs	r0, #118	; 0x76
    b65e:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA1, 0x00);
    b660:	2100      	movs	r1, #0
    b662:	2077      	movs	r0, #119	; 0x77
    b664:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_DATA0, 0x00);
    b666:	2100      	movs	r1, #0
    b668:	2078      	movs	r0, #120	; 0x78
    b66a:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_CONTROL0, 0x00);
    b66c:	2100      	movs	r1, #0
    b66e:	206e      	movs	r0, #110	; 0x6e
    b670:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_CONTROL1, 0x00);
    b672:	2100      	movs	r1, #0
    b674:	206f      	movs	r0, #111	; 0x6f
    b676:	47a8      	blx	r5
		delay_us(250);
    b678:	20fa      	movs	r0, #250	; 0xfa
    b67a:	4f2b      	ldr	r7, [pc, #172]	; (b728 <ring_init+0x274>)
    b67c:	47b8      	blx	r7
		writeKSZreg(SPI_KSZ8794_ACCESS_CONTROL0, 0x10);
    b67e:	2110      	movs	r1, #16
    b680:	206e      	movs	r0, #110	; 0x6e
    b682:	47a8      	blx	r5
		writeKSZreg(SPI_KSZ8794_ACCESS_CONTROL1, 0x00);
    b684:	2100      	movs	r1, #0
    b686:	206f      	movs	r0, #111	; 0x6f
    b688:	47a8      	blx	r5
		delay_us(50);
    b68a:	2032      	movs	r0, #50	; 0x32
    b68c:	47b8      	blx	r7
		if ((!checkKSZreg(SPI_KSZ8794_ACCESS_DATA8, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA7, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA6, 0x61)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA5, 0x01)) ||
    b68e:	2100      	movs	r1, #0
    b690:	2070      	movs	r0, #112	; 0x70
    b692:	4b26      	ldr	r3, [pc, #152]	; (b72c <ring_init+0x278>)
    b694:	4798      	blx	r3
    b696:	b120      	cbz	r0, b6a2 <ring_init+0x1ee>
    b698:	2100      	movs	r1, #0
    b69a:	2071      	movs	r0, #113	; 0x71
    b69c:	4b23      	ldr	r3, [pc, #140]	; (b72c <ring_init+0x278>)
    b69e:	4798      	blx	r3
    b6a0:	b930      	cbnz	r0, b6b0 <ring_init+0x1fc>
			(!checkKSZreg(SPI_KSZ8794_ACCESS_DATA0, 0x00))) { xprintf("ERROR setting the STATIC MAC table with BPDU for pass-through node...\r\n"); }
    b6a2:	4826      	ldr	r0, [pc, #152]	; (b73c <ring_init+0x288>)
    b6a4:	4b1e      	ldr	r3, [pc, #120]	; (b720 <ring_init+0x26c>)
    b6a6:	4798      	blx	r3
		mode = 0;
    b6a8:	2200      	movs	r2, #0
    b6aa:	4b1b      	ldr	r3, [pc, #108]	; (b718 <ring_init+0x264>)
    b6ac:	705a      	strb	r2, [r3, #1]
    b6ae:	e74b      	b.n	b548 <ring_init+0x94>
		if ((!checkKSZreg(SPI_KSZ8794_ACCESS_DATA8, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA7, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA6, 0x61)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA5, 0x01)) ||
    b6b0:	2161      	movs	r1, #97	; 0x61
    b6b2:	2072      	movs	r0, #114	; 0x72
    b6b4:	4b1d      	ldr	r3, [pc, #116]	; (b72c <ring_init+0x278>)
    b6b6:	4798      	blx	r3
    b6b8:	2800      	cmp	r0, #0
    b6ba:	d0f2      	beq.n	b6a2 <ring_init+0x1ee>
    b6bc:	2101      	movs	r1, #1
    b6be:	2073      	movs	r0, #115	; 0x73
    b6c0:	4b1a      	ldr	r3, [pc, #104]	; (b72c <ring_init+0x278>)
    b6c2:	4798      	blx	r3
    b6c4:	2800      	cmp	r0, #0
    b6c6:	d0ec      	beq.n	b6a2 <ring_init+0x1ee>
			(!checkKSZreg(SPI_KSZ8794_ACCESS_DATA4, 0x80)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA3, 0xC2)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA2, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA1, 0x00)) ||
    b6c8:	2180      	movs	r1, #128	; 0x80
    b6ca:	2074      	movs	r0, #116	; 0x74
    b6cc:	4b17      	ldr	r3, [pc, #92]	; (b72c <ring_init+0x278>)
    b6ce:	4798      	blx	r3
		if ((!checkKSZreg(SPI_KSZ8794_ACCESS_DATA8, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA7, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA6, 0x61)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA5, 0x01)) ||
    b6d0:	2800      	cmp	r0, #0
    b6d2:	d0e6      	beq.n	b6a2 <ring_init+0x1ee>
			(!checkKSZreg(SPI_KSZ8794_ACCESS_DATA4, 0x80)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA3, 0xC2)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA2, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA1, 0x00)) ||
    b6d4:	21c2      	movs	r1, #194	; 0xc2
    b6d6:	2075      	movs	r0, #117	; 0x75
    b6d8:	4b14      	ldr	r3, [pc, #80]	; (b72c <ring_init+0x278>)
    b6da:	4798      	blx	r3
    b6dc:	2800      	cmp	r0, #0
    b6de:	d0e0      	beq.n	b6a2 <ring_init+0x1ee>
    b6e0:	2100      	movs	r1, #0
    b6e2:	2076      	movs	r0, #118	; 0x76
    b6e4:	4b11      	ldr	r3, [pc, #68]	; (b72c <ring_init+0x278>)
    b6e6:	4798      	blx	r3
    b6e8:	2800      	cmp	r0, #0
    b6ea:	d0da      	beq.n	b6a2 <ring_init+0x1ee>
    b6ec:	2100      	movs	r1, #0
    b6ee:	2077      	movs	r0, #119	; 0x77
    b6f0:	4b0e      	ldr	r3, [pc, #56]	; (b72c <ring_init+0x278>)
    b6f2:	4798      	blx	r3
    b6f4:	2800      	cmp	r0, #0
    b6f6:	d0d4      	beq.n	b6a2 <ring_init+0x1ee>
			(!checkKSZreg(SPI_KSZ8794_ACCESS_DATA0, 0x00))) { xprintf("ERROR setting the STATIC MAC table with BPDU for pass-through node...\r\n"); }
    b6f8:	2100      	movs	r1, #0
    b6fa:	2078      	movs	r0, #120	; 0x78
    b6fc:	4b0b      	ldr	r3, [pc, #44]	; (b72c <ring_init+0x278>)
    b6fe:	4798      	blx	r3
			(!checkKSZreg(SPI_KSZ8794_ACCESS_DATA4, 0x80)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA3, 0xC2)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA2, 0x00)) || (!checkKSZreg(SPI_KSZ8794_ACCESS_DATA1, 0x00)) ||
    b700:	2800      	cmp	r0, #0
    b702:	d1d1      	bne.n	b6a8 <ring_init+0x1f4>
    b704:	e7cd      	b.n	b6a2 <ring_init+0x1ee>
		mac_async_write(&ETHERNET_MAC_0, (uint8_t *)&wbuf[0], 68);
    b706:	2244      	movs	r2, #68	; 0x44
    b708:	490d      	ldr	r1, [pc, #52]	; (b740 <ring_init+0x28c>)
    b70a:	480e      	ldr	r0, [pc, #56]	; (b744 <ring_init+0x290>)
    b70c:	4b0e      	ldr	r3, [pc, #56]	; (b748 <ring_init+0x294>)
    b70e:	4798      	blx	r3
		xprintf("ETHERNET: Sent first BPDU...\r\n");
    b710:	480e      	ldr	r0, [pc, #56]	; (b74c <ring_init+0x298>)
    b712:	4b03      	ldr	r3, [pc, #12]	; (b720 <ring_init+0x26c>)
    b714:	4798      	blx	r3
	}
}
    b716:	e75e      	b.n	b5d6 <ring_init+0x122>
    b718:	20007270 	.word	0x20007270
    b71c:	00011164 	.word	0x00011164
    b720:	0000031d 	.word	0x0000031d
    b724:	0000d995 	.word	0x0000d995
    b728:	0000152d 	.word	0x0000152d
    b72c:	0000d8f1 	.word	0x0000d8f1
    b730:	000111a8 	.word	0x000111a8
    b734:	0001126c 	.word	0x0001126c
    b738:	000111ec 	.word	0x000111ec
    b73c:	00011224 	.word	0x00011224
    b740:	20007274 	.word	0x20007274
    b744:	2000752c 	.word	0x2000752c
    b748:	000018e9 	.word	0x000018e9
    b74c:	0001129c 	.word	0x0001129c

0000b750 <ring_check>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: Called by the main loop execution and checks every time to see if if storms and BPDUs arrive. This manages the storm until it subsides
// Returns:     Nothing (NULL)
// *****************************************************************************************************************************************************************
unsigned char ring_check(unsigned char bpdu_arrived, unsigned char *storm_state, unsigned char *ringbreak)
{
    b750:	b570      	push	{r4, r5, r6, lr}
	unsigned char	sendrelearn;
	
	/* Bound-checks and assertions */
	if (!storm_state) {
    b752:	2900      	cmp	r1, #0
    b754:	d030      	beq.n	b7b8 <ring_check+0x68>
    b756:	4615      	mov	r5, r2
    b758:	460e      	mov	r6, r1
		xprintf("ETHERNET: (!storm_state) ERROR\r\n");
		return 0;
	}
		
	if (!ringbreak) {
    b75a:	2a00      	cmp	r2, #0
    b75c:	d031      	beq.n	b7c2 <ring_check+0x72>
	}
		
	sendrelearn = 0;

	/* Check which mode we are running, base-station or pass-though? */
	if (mode) {
    b75e:	4b40      	ldr	r3, [pc, #256]	; (b860 <ring_check+0x110>)
    b760:	785b      	ldrb	r3, [r3, #1]
    b762:	2b00      	cmp	r3, #0
    b764:	d074      	beq.n	b850 <ring_check+0x100>
		/* If no BPDU arrived as yet, this indicates a ring break potentially */
		if (!bpdu_arrived) {
    b766:	2800      	cmp	r0, #0
    b768:	d130      	bne.n	b7cc <ring_check+0x7c>
			if ((first) || (!(*ringbreak))) {
    b76a:	4b3d      	ldr	r3, [pc, #244]	; (b860 <ring_check+0x110>)
    b76c:	781b      	ldrb	r3, [r3, #0]
    b76e:	b913      	cbnz	r3, b776 <ring_check+0x26>
    b770:	7813      	ldrb	r3, [r2, #0]
    b772:	2b00      	cmp	r3, #0
    b774:	d163      	bne.n	b83e <ring_check+0xee>
				/* Enable Port 2 Management port back to normal */
				writeKSZreg(SPI_KSZ8794_PORT1CONTROL2, 0x07);
    b776:	2107      	movs	r1, #7
    b778:	2012      	movs	r0, #18
    b77a:	4c3a      	ldr	r4, [pc, #232]	; (b864 <ring_check+0x114>)
    b77c:	47a0      	blx	r4
				writeKSZreg(SPI_KSZ8794_PORT2CONTROL2, 0x07);
    b77e:	2107      	movs	r1, #7
    b780:	2022      	movs	r0, #34	; 0x22
    b782:	47a0      	blx	r4

				/* Clear the learning tables in the SWITCH */
				writeKSZreg(SPI_KSZ8794_GLOBAL0, 0x2D);
    b784:	212d      	movs	r1, #45	; 0x2d
    b786:	2002      	movs	r0, #2
    b788:	47a0      	blx	r4
				delay_us(250);
    b78a:	20fa      	movs	r0, #250	; 0xfa
    b78c:	4b36      	ldr	r3, [pc, #216]	; (b868 <ring_check+0x118>)
    b78e:	4798      	blx	r3
				
				writeKSZreg(SPI_KSZ8794_PORT1CONTROL2, 0x06);
    b790:	2106      	movs	r1, #6
    b792:	2012      	movs	r0, #18
    b794:	47a0      	blx	r4
				writeKSZreg(SPI_KSZ8794_PORT2CONTROL2, 0x06);
    b796:	2106      	movs	r1, #6
    b798:	2022      	movs	r0, #34	; 0x22
    b79a:	47a0      	blx	r4

				/* Set flags to indicate to the main-loop that we have a broken network topology */
				sendrelearn = 1;
				*ringbreak = 1;
    b79c:	2301      	movs	r3, #1
    b79e:	702b      	strb	r3, [r5, #0]
				
				xprintf("ETHERNET: [turning Ethernet <B> ON - RING BROKEN]...\r\n");
    b7a0:	4832      	ldr	r0, [pc, #200]	; (b86c <ring_check+0x11c>)
    b7a2:	4b33      	ldr	r3, [pc, #204]	; (b870 <ring_check+0x120>)
    b7a4:	4798      	blx	r3
			}
		}
	}

	/* Now check to see what the situation with broadcast storm entails */
	if (*storm_state) {
    b7a6:	7833      	ldrb	r3, [r6, #0]
    b7a8:	2b00      	cmp	r3, #0
    b7aa:	d12b      	bne.n	b804 <ring_check+0xb4>
			*ringbreak = 0;
		}
	}
	else {
		/* However, if we have no such storm conditions, and we are a base-station, then send the next BPDU out */
		if (mode) {																										
    b7ac:	4b2c      	ldr	r3, [pc, #176]	; (b860 <ring_check+0x110>)
    b7ae:	785b      	ldrb	r3, [r3, #1]
    b7b0:	2b00      	cmp	r3, #0
    b7b2:	d142      	bne.n	b83a <ring_check+0xea>
    b7b4:	2401      	movs	r4, #1
    b7b6:	e04e      	b.n	b856 <ring_check+0x106>
		xprintf("ETHERNET: (!storm_state) ERROR\r\n");
    b7b8:	482e      	ldr	r0, [pc, #184]	; (b874 <ring_check+0x124>)
    b7ba:	4b2d      	ldr	r3, [pc, #180]	; (b870 <ring_check+0x120>)
    b7bc:	4798      	blx	r3
		return 0;
    b7be:	2400      	movs	r4, #0
    b7c0:	e04c      	b.n	b85c <ring_check+0x10c>
		xprintf("ETHERNET: (!ringbreak) ERROR\r\n");
    b7c2:	482d      	ldr	r0, [pc, #180]	; (b878 <ring_check+0x128>)
    b7c4:	4b2a      	ldr	r3, [pc, #168]	; (b870 <ring_check+0x120>)
    b7c6:	4798      	blx	r3
		return 0;
    b7c8:	2400      	movs	r4, #0
    b7ca:	e047      	b.n	b85c <ring_check+0x10c>
			if ((first) || (*ringbreak)) {
    b7cc:	4b24      	ldr	r3, [pc, #144]	; (b860 <ring_check+0x110>)
    b7ce:	781b      	ldrb	r3, [r3, #0]
    b7d0:	b913      	cbnz	r3, b7d8 <ring_check+0x88>
    b7d2:	7813      	ldrb	r3, [r2, #0]
    b7d4:	2b00      	cmp	r3, #0
    b7d6:	d032      	beq.n	b83e <ring_check+0xee>
				writeKSZreg(SPI_KSZ8794_PORT1CONTROL2, 0x07);
    b7d8:	2107      	movs	r1, #7
    b7da:	2012      	movs	r0, #18
    b7dc:	4c21      	ldr	r4, [pc, #132]	; (b864 <ring_check+0x114>)
    b7de:	47a0      	blx	r4
				writeKSZreg(SPI_KSZ8794_PORT2CONTROL2, 0x01);
    b7e0:	2101      	movs	r1, #1
    b7e2:	2022      	movs	r0, #34	; 0x22
    b7e4:	47a0      	blx	r4
				writeKSZreg(SPI_KSZ8794_GLOBAL0, 0x2D);
    b7e6:	212d      	movs	r1, #45	; 0x2d
    b7e8:	2002      	movs	r0, #2
    b7ea:	47a0      	blx	r4
				delay_us(250);
    b7ec:	20fa      	movs	r0, #250	; 0xfa
    b7ee:	4b1e      	ldr	r3, [pc, #120]	; (b868 <ring_check+0x118>)
    b7f0:	4798      	blx	r3
				writeKSZreg(SPI_KSZ8794_PORT1CONTROL2, 0x06);
    b7f2:	2106      	movs	r1, #6
    b7f4:	2012      	movs	r0, #18
    b7f6:	47a0      	blx	r4
				*ringbreak = 0;
    b7f8:	2300      	movs	r3, #0
    b7fa:	702b      	strb	r3, [r5, #0]
				xprintf("ETHERNET: [turning Ethernet <B> OFF - RING HEALED]...\r\n");
    b7fc:	481f      	ldr	r0, [pc, #124]	; (b87c <ring_check+0x12c>)
    b7fe:	4b1c      	ldr	r3, [pc, #112]	; (b870 <ring_check+0x120>)
    b800:	4798      	blx	r3
    b802:	e7d0      	b.n	b7a6 <ring_check+0x56>
    b804:	2401      	movs	r4, #1
    b806:	e002      	b.n	b80e <ring_check+0xbe>
	if (*storm_state) {
    b808:	2400      	movs	r4, #0
    b80a:	e000      	b.n	b80e <ring_check+0xbe>
	sendrelearn = 0;
    b80c:	461c      	mov	r4, r3
		xprintf("ETHERNET: [storm subsided]...\r\n");
    b80e:	481c      	ldr	r0, [pc, #112]	; (b880 <ring_check+0x130>)
    b810:	4b17      	ldr	r3, [pc, #92]	; (b870 <ring_check+0x120>)
    b812:	4798      	blx	r3
		*storm_state = 0;
    b814:	2300      	movs	r3, #0
    b816:	7033      	strb	r3, [r6, #0]
		writeKSZreg(SPI_KSZ8794_PORT4CONTROL2, 0x06);
    b818:	2106      	movs	r1, #6
    b81a:	2052      	movs	r0, #82	; 0x52
    b81c:	4b11      	ldr	r3, [pc, #68]	; (b864 <ring_check+0x114>)
    b81e:	4798      	blx	r3
		if (mode) {
    b820:	4b0f      	ldr	r3, [pc, #60]	; (b860 <ring_check+0x110>)
    b822:	785b      	ldrb	r3, [r3, #1]
    b824:	b1bb      	cbz	r3, b856 <ring_check+0x106>
			xprintf("ETHERNET: turning Ethernet <B> OFF because of storm - RING HEALING POSSIBILITY]...\r\n");
    b826:	4817      	ldr	r0, [pc, #92]	; (b884 <ring_check+0x134>)
    b828:	4b11      	ldr	r3, [pc, #68]	; (b870 <ring_check+0x120>)
    b82a:	4798      	blx	r3
			writeKSZreg(SPI_KSZ8794_PORT2CONTROL2, 0x01);
    b82c:	2101      	movs	r1, #1
    b82e:	2022      	movs	r0, #34	; 0x22
    b830:	4b0c      	ldr	r3, [pc, #48]	; (b864 <ring_check+0x114>)
    b832:	4798      	blx	r3
			*ringbreak = 0;
    b834:	2300      	movs	r3, #0
    b836:	702b      	strb	r3, [r5, #0]
    b838:	e00d      	b.n	b856 <ring_check+0x106>
    b83a:	2401      	movs	r4, #1
    b83c:	e002      	b.n	b844 <ring_check+0xf4>
	if (*storm_state) {
    b83e:	7834      	ldrb	r4, [r6, #0]
    b840:	2c00      	cmp	r4, #0
    b842:	d1e1      	bne.n	b808 <ring_check+0xb8>
			mac_async_write(&ETHERNET_MAC_0, (uint8_t *)&wbuf[0], 68);
    b844:	2244      	movs	r2, #68	; 0x44
    b846:	4910      	ldr	r1, [pc, #64]	; (b888 <ring_check+0x138>)
    b848:	4810      	ldr	r0, [pc, #64]	; (b88c <ring_check+0x13c>)
    b84a:	4b11      	ldr	r3, [pc, #68]	; (b890 <ring_check+0x140>)
    b84c:	4798      	blx	r3
    b84e:	e002      	b.n	b856 <ring_check+0x106>
	if (*storm_state) {
    b850:	780c      	ldrb	r4, [r1, #0]
    b852:	2c00      	cmp	r4, #0
    b854:	d1da      	bne.n	b80c <ring_check+0xbc>
		
		/* Keep the storm flag de-asserted */
		storm_holdoff = 0;
	}

	first = 0;
    b856:	2200      	movs	r2, #0
    b858:	4b01      	ldr	r3, [pc, #4]	; (b860 <ring_check+0x110>)
    b85a:	701a      	strb	r2, [r3, #0]
	
	return sendrelearn;
    b85c:	4620      	mov	r0, r4
    b85e:	bd70      	pop	{r4, r5, r6, pc}
    b860:	20007270 	.word	0x20007270
    b864:	0000d995 	.word	0x0000d995
    b868:	0000152d 	.word	0x0000152d
    b86c:	00011300 	.word	0x00011300
    b870:	0000031d 	.word	0x0000031d
    b874:	000112bc 	.word	0x000112bc
    b878:	000112e0 	.word	0x000112e0
    b87c:	00011338 	.word	0x00011338
    b880:	00011370 	.word	0x00011370
    b884:	00011390 	.word	0x00011390
    b888:	20007274 	.word	0x20007274
    b88c:	2000752c 	.word	0x2000752c
    b890:	000018e9 	.word	0x000018e9

0000b894 <chksum>:

#if ! UIP_ARCH_CHKSUM
/*---------------------------------------------------------------------------*/
static u16_t
chksum(u16_t sum, const u8_t *data, u16_t len)
{
    b894:	b470      	push	{r4, r5, r6}
  u16_t t;
  const u8_t *dataptr;
  const u8_t *last_byte;

  dataptr = data;
  last_byte = data + len - 1;
    b896:	1e56      	subs	r6, r2, #1
    b898:	440e      	add	r6, r1
  
  while(dataptr < last_byte) {	/* At least two more bytes */
    b89a:	42b1      	cmp	r1, r6
    b89c:	d213      	bcs.n	b8c6 <chksum+0x32>
    b89e:	460c      	mov	r4, r1
    t = (dataptr[0] << 8) + dataptr[1];
    b8a0:	7825      	ldrb	r5, [r4, #0]
    b8a2:	7863      	ldrb	r3, [r4, #1]
    b8a4:	eb03 2305 	add.w	r3, r3, r5, lsl #8
    b8a8:	b29b      	uxth	r3, r3
    sum += t;
    b8aa:	4418      	add	r0, r3
    b8ac:	b280      	uxth	r0, r0
    if(sum < t) {
    b8ae:	4283      	cmp	r3, r0
      sum++;		/* carry */
    b8b0:	bf84      	itt	hi
    b8b2:	3001      	addhi	r0, #1
    b8b4:	b280      	uxthhi	r0, r0
    }
    dataptr += 2;
    b8b6:	3402      	adds	r4, #2
  while(dataptr < last_byte) {	/* At least two more bytes */
    b8b8:	42a6      	cmp	r6, r4
    b8ba:	d8f1      	bhi.n	b8a0 <chksum+0xc>
    b8bc:	3a02      	subs	r2, #2
    b8be:	f022 0201 	bic.w	r2, r2, #1
    b8c2:	3202      	adds	r2, #2
    b8c4:	4411      	add	r1, r2
  }
  
  if(dataptr == last_byte) {
    b8c6:	428e      	cmp	r6, r1
    b8c8:	d001      	beq.n	b8ce <chksum+0x3a>
    }
  }

  /* Return sum in host byte order. */
  return sum;
}
    b8ca:	bc70      	pop	{r4, r5, r6}
    b8cc:	4770      	bx	lr
    t = (dataptr[0] << 8) + 0;
    b8ce:	7833      	ldrb	r3, [r6, #0]
    b8d0:	021b      	lsls	r3, r3, #8
    sum += t;
    b8d2:	4418      	add	r0, r3
    b8d4:	b280      	uxth	r0, r0
    if(sum < t) {
    b8d6:	4283      	cmp	r3, r0
      sum++;		/* carry */
    b8d8:	bf84      	itt	hi
    b8da:	3001      	addhi	r0, #1
    b8dc:	b280      	uxthhi	r0, r0
    b8de:	e7f4      	b.n	b8ca <chksum+0x36>

0000b8e0 <upper_layer_chksum>:
}
#endif
/*---------------------------------------------------------------------------*/
static u16_t
upper_layer_chksum(u8_t proto)
{
    b8e0:	b570      	push	{r4, r5, r6, lr}
  u16_t sum;
  
#if UIP_CONF_IPV6
  upper_layer_len = (((u16_t)(BUF->len[0]) << 8) + BUF->len[1]);
#else /* UIP_CONF_IPV6 */
  upper_layer_len = (((u16_t)(BUF->len[0]) << 8) + BUF->len[1]) - UIP_IPH_LEN;
    b8e2:	4d0e      	ldr	r5, [pc, #56]	; (b91c <upper_layer_chksum+0x3c>)
    b8e4:	7c2b      	ldrb	r3, [r5, #16]
    b8e6:	7c6c      	ldrb	r4, [r5, #17]
    b8e8:	3c14      	subs	r4, #20
    b8ea:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    b8ee:	b2a4      	uxth	r4, r4
#endif /* UIP_CONF_IPV6 */
  
  /* First sum pseudoheader. */
  
  /* IP protocol and length fields. This addition cannot carry. */
  sum = upper_layer_len + proto;
    b8f0:	4420      	add	r0, r4
  /* Sum IP source and destination addresses. */
  sum = chksum(sum, (u8_t *)&BUF->srcipaddr[0], 2 * sizeof(uip_ipaddr_t));
    b8f2:	2208      	movs	r2, #8
    b8f4:	f105 011a 	add.w	r1, r5, #26
    b8f8:	b280      	uxth	r0, r0
    b8fa:	4e09      	ldr	r6, [pc, #36]	; (b920 <upper_layer_chksum+0x40>)
    b8fc:	47b0      	blx	r6

  /* Sum TCP header and data. */
  sum = chksum(sum, &uip_buf[UIP_IPH_LEN + UIP_LLH_LEN],
    b8fe:	4622      	mov	r2, r4
    b900:	f105 0122 	add.w	r1, r5, #34	; 0x22
    b904:	47b0      	blx	r6
	       upper_layer_len);
    
  return (sum == 0) ? 0xffff : htons(sum);
    b906:	b910      	cbnz	r0, b90e <upper_layer_chksum+0x2e>
    b908:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
    b90c:	bd70      	pop	{r4, r5, r6, pc}
    b90e:	4603      	mov	r3, r0
}
/*---------------------------------------------------------------------------*/
u16_t
htons(u16_t val)
{
  return HTONS(val);
    b910:	0a00      	lsrs	r0, r0, #8
    b912:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
    b916:	b280      	uxth	r0, r0
    b918:	bd70      	pop	{r4, r5, r6, pc}
    b91a:	bf00      	nop
    b91c:	20008654 	.word	0x20008654
    b920:	0000b895 	.word	0x0000b895

0000b924 <uip_add32>:
{
    b924:	b470      	push	{r4, r5, r6}
  uip_acc32[3] = op32[3] + (op16 & 0xff);
    b926:	78c5      	ldrb	r5, [r0, #3]
    b928:	440d      	add	r5, r1
    b92a:	b2ed      	uxtb	r5, r5
    b92c:	4c13      	ldr	r4, [pc, #76]	; (b97c <uip_add32+0x58>)
    b92e:	70e5      	strb	r5, [r4, #3]
  uip_acc32[2] = op32[2] + (op16 >> 8);
    b930:	0a0e      	lsrs	r6, r1, #8
    b932:	7883      	ldrb	r3, [r0, #2]
    b934:	4433      	add	r3, r6
    b936:	b2db      	uxtb	r3, r3
    b938:	70a3      	strb	r3, [r4, #2]
  uip_acc32[1] = op32[1];
    b93a:	7842      	ldrb	r2, [r0, #1]
    b93c:	7062      	strb	r2, [r4, #1]
  uip_acc32[0] = op32[0];
    b93e:	7800      	ldrb	r0, [r0, #0]
    b940:	7020      	strb	r0, [r4, #0]
  if(uip_acc32[2] < (op16 >> 8)) {
    b942:	b29c      	uxth	r4, r3
    b944:	42a6      	cmp	r6, r4
    b946:	d906      	bls.n	b956 <uip_add32+0x32>
    ++uip_acc32[1];
    b948:	3201      	adds	r2, #1
    b94a:	b2d2      	uxtb	r2, r2
    b94c:	4c0b      	ldr	r4, [pc, #44]	; (b97c <uip_add32+0x58>)
    b94e:	7062      	strb	r2, [r4, #1]
    if(uip_acc32[1] == 0) {
    b950:	b90a      	cbnz	r2, b956 <uip_add32+0x32>
      ++uip_acc32[0];
    b952:	3001      	adds	r0, #1
    b954:	7020      	strb	r0, [r4, #0]
  if(uip_acc32[3] < (op16 & 0xff)) {
    b956:	b2c9      	uxtb	r1, r1
    b958:	428d      	cmp	r5, r1
    b95a:	da0c      	bge.n	b976 <uip_add32+0x52>
    ++uip_acc32[2];
    b95c:	3301      	adds	r3, #1
    b95e:	b2db      	uxtb	r3, r3
    b960:	4a06      	ldr	r2, [pc, #24]	; (b97c <uip_add32+0x58>)
    b962:	7093      	strb	r3, [r2, #2]
    if(uip_acc32[2] == 0) {
    b964:	b93b      	cbnz	r3, b976 <uip_add32+0x52>
      ++uip_acc32[1];
    b966:	7853      	ldrb	r3, [r2, #1]
    b968:	3301      	adds	r3, #1
    b96a:	b2db      	uxtb	r3, r3
    b96c:	7053      	strb	r3, [r2, #1]
      if(uip_acc32[1] == 0) {
    b96e:	b913      	cbnz	r3, b976 <uip_add32+0x52>
	++uip_acc32[0];
    b970:	7813      	ldrb	r3, [r2, #0]
    b972:	3301      	adds	r3, #1
    b974:	7013      	strb	r3, [r2, #0]
}
    b976:	bc70      	pop	{r4, r5, r6}
    b978:	4770      	bx	lr
    b97a:	bf00      	nop
    b97c:	20008588 	.word	0x20008588

0000b980 <uip_add_rcv_nxt>:
{
    b980:	b510      	push	{r4, lr}
  uip_add32(uip_conn->rcv_nxt, n);
    b982:	4c09      	ldr	r4, [pc, #36]	; (b9a8 <uip_add_rcv_nxt+0x28>)
    b984:	6823      	ldr	r3, [r4, #0]
    b986:	4601      	mov	r1, r0
    b988:	f103 0008 	add.w	r0, r3, #8
    b98c:	4b07      	ldr	r3, [pc, #28]	; (b9ac <uip_add_rcv_nxt+0x2c>)
    b98e:	4798      	blx	r3
  uip_conn->rcv_nxt[0] = uip_acc32[0];
    b990:	6823      	ldr	r3, [r4, #0]
    b992:	4a07      	ldr	r2, [pc, #28]	; (b9b0 <uip_add_rcv_nxt+0x30>)
    b994:	7811      	ldrb	r1, [r2, #0]
    b996:	7219      	strb	r1, [r3, #8]
  uip_conn->rcv_nxt[1] = uip_acc32[1];
    b998:	7851      	ldrb	r1, [r2, #1]
    b99a:	7259      	strb	r1, [r3, #9]
  uip_conn->rcv_nxt[2] = uip_acc32[2];
    b99c:	7891      	ldrb	r1, [r2, #2]
    b99e:	7299      	strb	r1, [r3, #10]
  uip_conn->rcv_nxt[3] = uip_acc32[3];
    b9a0:	78d2      	ldrb	r2, [r2, #3]
    b9a2:	72da      	strb	r2, [r3, #11]
    b9a4:	bd10      	pop	{r4, pc}
    b9a6:	bf00      	nop
    b9a8:	20008598 	.word	0x20008598
    b9ac:	0000b925 	.word	0x0000b925
    b9b0:	20008588 	.word	0x20008588

0000b9b4 <uip_ipchksum>:
{
    b9b4:	b510      	push	{r4, lr}
  sum = chksum(0, &uip_buf[UIP_LLH_LEN], UIP_IPH_LEN);
    b9b6:	2214      	movs	r2, #20
    b9b8:	4908      	ldr	r1, [pc, #32]	; (b9dc <uip_ipchksum+0x28>)
    b9ba:	2000      	movs	r0, #0
    b9bc:	4b08      	ldr	r3, [pc, #32]	; (b9e0 <uip_ipchksum+0x2c>)
    b9be:	4798      	blx	r3
    b9c0:	4604      	mov	r4, r0
  DEBUG_PRINTF("uip_ipchksum: sum 0x%04x\n", sum);
    b9c2:	4601      	mov	r1, r0
    b9c4:	4807      	ldr	r0, [pc, #28]	; (b9e4 <uip_ipchksum+0x30>)
    b9c6:	4b08      	ldr	r3, [pc, #32]	; (b9e8 <uip_ipchksum+0x34>)
    b9c8:	4798      	blx	r3
  return (sum == 0) ? 0xffff : htons(sum);
    b9ca:	b914      	cbnz	r4, b9d2 <uip_ipchksum+0x1e>
    b9cc:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
    b9d0:	bd10      	pop	{r4, pc}
  return HTONS(val);
    b9d2:	0a20      	lsrs	r0, r4, #8
    b9d4:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
    b9d8:	b280      	uxth	r0, r0
    b9da:	bd10      	pop	{r4, pc}
    b9dc:	20008662 	.word	0x20008662
    b9e0:	0000b895 	.word	0x0000b895
    b9e4:	000113e8 	.word	0x000113e8
    b9e8:	0000031d 	.word	0x0000031d

0000b9ec <uip_tcpchksum>:
{
    b9ec:	b508      	push	{r3, lr}
  return upper_layer_chksum(UIP_PROTO_TCP);
    b9ee:	2006      	movs	r0, #6
    b9f0:	4b01      	ldr	r3, [pc, #4]	; (b9f8 <uip_tcpchksum+0xc>)
    b9f2:	4798      	blx	r3
}
    b9f4:	bd08      	pop	{r3, pc}
    b9f6:	bf00      	nop
    b9f8:	0000b8e1 	.word	0x0000b8e1

0000b9fc <uip_udpchksum>:
{
    b9fc:	b508      	push	{r3, lr}
  return upper_layer_chksum(UIP_PROTO_UDP);
    b9fe:	2011      	movs	r0, #17
    ba00:	4b01      	ldr	r3, [pc, #4]	; (ba08 <uip_udpchksum+0xc>)
    ba02:	4798      	blx	r3
}
    ba04:	bd08      	pop	{r3, pc}
    ba06:	bf00      	nop
    ba08:	0000b8e1 	.word	0x0000b8e1

0000ba0c <uip_init>:
    uip_listenports[c] = 0;
    ba0c:	2300      	movs	r3, #0
    ba0e:	4a08      	ldr	r2, [pc, #32]	; (ba30 <uip_init+0x24>)
    ba10:	8013      	strh	r3, [r2, #0]
    uip_conns[c].tcpstateflags = UIP_CLOSED;
    ba12:	4a08      	ldr	r2, [pc, #32]	; (ba34 <uip_init+0x28>)
    ba14:	7653      	strb	r3, [r2, #25]
    ba16:	4b08      	ldr	r3, [pc, #32]	; (ba38 <uip_init+0x2c>)
    ba18:	f503 717a 	add.w	r1, r3, #1000	; 0x3e8
    uip_udp_conns[c].lport = 0;
    ba1c:	2200      	movs	r2, #0
    ba1e:	809a      	strh	r2, [r3, #4]
    ba20:	3364      	adds	r3, #100	; 0x64
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
    ba22:	4299      	cmp	r1, r3
    ba24:	d1fb      	bne.n	ba1e <uip_init+0x12>
    ba26:	220a      	movs	r2, #10
    ba28:	4b04      	ldr	r3, [pc, #16]	; (ba3c <uip_init+0x30>)
    ba2a:	709a      	strb	r2, [r3, #2]
    ba2c:	4770      	bx	lr
    ba2e:	bf00      	nop
    ba30:	20008610 	.word	0x20008610
    ba34:	2000859c 	.word	0x2000859c
    ba38:	20008cfc 	.word	0x20008cfc
    ba3c:	200072bc 	.word	0x200072bc

0000ba40 <uip_udp_new>:
{
    ba40:	b5f0      	push	{r4, r5, r6, r7, lr}
    ba42:	4b30      	ldr	r3, [pc, #192]	; (bb04 <uip_udp_new+0xc4>)
    ba44:	889f      	ldrh	r7, [r3, #4]
    if(uip_udp_conns[c].lport == htons(lastport)) {
    ba46:	4b30      	ldr	r3, [pc, #192]	; (bb08 <uip_udp_new+0xc8>)
    ba48:	f8b3 e004 	ldrh.w	lr, [r3, #4]
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
    ba4c:	f04f 0c01 	mov.w	ip, #1
  ++lastport;
    ba50:	3701      	adds	r7, #1
    ba52:	b2bf      	uxth	r7, r7
    lastport = 4096;
    ba54:	f5b7 4ffa 	cmp.w	r7, #32000	; 0x7d00
    ba58:	bf28      	it	cs
    ba5a:	f44f 5780 	movcs.w	r7, #4096	; 0x1000
  return HTONS(val);
    ba5e:	0a3e      	lsrs	r6, r7, #8
    ba60:	ea46 2607 	orr.w	r6, r6, r7, lsl #8
    ba64:	b2b6      	uxth	r6, r6
    if(uip_udp_conns[c].lport == htons(lastport)) {
    ba66:	45b6      	cmp	lr, r6
    ba68:	d0f2      	beq.n	ba50 <uip_udp_new+0x10>
    ba6a:	4d27      	ldr	r5, [pc, #156]	; (bb08 <uip_udp_new+0xc8>)
    ba6c:	462a      	mov	r2, r5
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
    ba6e:	4663      	mov	r3, ip
    if(uip_udp_conns[c].lport == htons(lastport)) {
    ba70:	f8b2 4068 	ldrh.w	r4, [r2, #104]	; 0x68
    ba74:	42b4      	cmp	r4, r6
    ba76:	d0eb      	beq.n	ba50 <uip_udp_new+0x10>
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
    ba78:	3301      	adds	r3, #1
    ba7a:	b2db      	uxtb	r3, r3
    ba7c:	3264      	adds	r2, #100	; 0x64
    ba7e:	2b0a      	cmp	r3, #10
    ba80:	d1f6      	bne.n	ba70 <uip_udp_new+0x30>
    ba82:	4b20      	ldr	r3, [pc, #128]	; (bb04 <uip_udp_new+0xc4>)
    ba84:	809f      	strh	r7, [r3, #4]
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
    ba86:	2200      	movs	r2, #0
    ba88:	709a      	strb	r2, [r3, #2]
    if(uip_udp_conns[c].lport == 0) {
    ba8a:	f1be 0f00 	cmp.w	lr, #0
    ba8e:	d034      	beq.n	bafa <uip_udp_new+0xba>
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
    ba90:	2201      	movs	r2, #1
    ba92:	4b1c      	ldr	r3, [pc, #112]	; (bb04 <uip_udp_new+0xc4>)
    ba94:	709a      	strb	r2, [r3, #2]
    ba96:	4613      	mov	r3, r2
    ba98:	f04f 0e00 	mov.w	lr, #0
    ba9c:	4694      	mov	ip, r2
    if(uip_udp_conns[c].lport == 0) {
    ba9e:	461f      	mov	r7, r3
    baa0:	f8b5 4068 	ldrh.w	r4, [r5, #104]	; 0x68
    baa4:	b154      	cbz	r4, babc <uip_udp_new+0x7c>
    baa6:	1c5a      	adds	r2, r3, #1
    baa8:	b2d2      	uxtb	r2, r2
    baaa:	3301      	adds	r3, #1
    baac:	3564      	adds	r5, #100	; 0x64
    baae:	46e6      	mov	lr, ip
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
    bab0:	2b0a      	cmp	r3, #10
    bab2:	d1f4      	bne.n	ba9e <uip_udp_new+0x5e>
    bab4:	4b13      	ldr	r3, [pc, #76]	; (bb04 <uip_udp_new+0xc4>)
    bab6:	709a      	strb	r2, [r3, #2]
    return 0;
    bab8:	2200      	movs	r2, #0
    baba:	e019      	b.n	baf0 <uip_udp_new+0xb0>
    babc:	f1be 0f00 	cmp.w	lr, #0
    bac0:	d118      	bne.n	baf4 <uip_udp_new+0xb4>
      conn = &uip_udp_conns[c];
    bac2:	2364      	movs	r3, #100	; 0x64
    bac4:	fb03 f307 	mul.w	r3, r3, r7
    bac8:	4c0f      	ldr	r4, [pc, #60]	; (bb08 <uip_udp_new+0xc8>)
    baca:	191a      	adds	r2, r3, r4
  conn->lport = HTONS(lastport);
    bacc:	8096      	strh	r6, [r2, #4]
  conn->rport = rport;
    bace:	80d1      	strh	r1, [r2, #6]
  if(ripaddr == NULL) {
    bad0:	b1a8      	cbz	r0, bafe <uip_udp_new+0xbe>
    uip_ipaddr_copy(&conn->ripaddr, ripaddr);
    bad2:	8805      	ldrh	r5, [r0, #0]
    bad4:	490c      	ldr	r1, [pc, #48]	; (bb08 <uip_udp_new+0xc8>)
    bad6:	2364      	movs	r3, #100	; 0x64
    bad8:	fb03 f307 	mul.w	r3, r3, r7
    badc:	18cc      	adds	r4, r1, r3
    bade:	52cd      	strh	r5, [r1, r3]
    bae0:	8843      	ldrh	r3, [r0, #2]
    bae2:	8063      	strh	r3, [r4, #2]
  conn->ttl = UIP_TTL;
    bae4:	2164      	movs	r1, #100	; 0x64
    bae6:	4b08      	ldr	r3, [pc, #32]	; (bb08 <uip_udp_new+0xc8>)
    bae8:	fb01 3707 	mla	r7, r1, r7, r3
    baec:	2340      	movs	r3, #64	; 0x40
    baee:	723b      	strb	r3, [r7, #8]
}
    baf0:	4610      	mov	r0, r2
    baf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    baf4:	4b03      	ldr	r3, [pc, #12]	; (bb04 <uip_udp_new+0xc4>)
    baf6:	709a      	strb	r2, [r3, #2]
    baf8:	e7e3      	b.n	bac2 <uip_udp_new+0x82>
    if(uip_udp_conns[c].lport == 0) {
    bafa:	2700      	movs	r7, #0
    bafc:	e7e1      	b.n	bac2 <uip_udp_new+0x82>
    memset(conn->ripaddr, 0, sizeof(uip_ipaddr_t));
    bafe:	2100      	movs	r1, #0
    bb00:	5119      	str	r1, [r3, r4]
    bb02:	e7ef      	b.n	bae4 <uip_udp_new+0xa4>
    bb04:	200072bc 	.word	0x200072bc
    bb08:	20008cfc 	.word	0x20008cfc

0000bb0c <uip_process>:
{
    bb0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(flag == UIP_UDP_SEND_CONN) {
    bb0e:	2804      	cmp	r0, #4
    bb10:	f000 8149 	beq.w	bda6 <uip_process+0x29a>
  register struct uip_conn *uip_connr = uip_conn;
    bb14:	4b89      	ldr	r3, [pc, #548]	; (bd3c <uip_process+0x230>)
    bb16:	681c      	ldr	r4, [r3, #0]
  uip_sappdata = uip_appdata = &uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN];
    bb18:	4b89      	ldr	r3, [pc, #548]	; (bd40 <uip_process+0x234>)
    bb1a:	4a8a      	ldr	r2, [pc, #552]	; (bd44 <uip_process+0x238>)
    bb1c:	6013      	str	r3, [r2, #0]
    bb1e:	4a8a      	ldr	r2, [pc, #552]	; (bd48 <uip_process+0x23c>)
    bb20:	6013      	str	r3, [r2, #0]
  if(flag == UIP_POLL_REQUEST) {
    bb22:	2803      	cmp	r0, #3
    bb24:	d019      	beq.n	bb5a <uip_process+0x4e>
  } else if(flag == UIP_TIMER) {
    bb26:	2802      	cmp	r0, #2
    bb28:	f000 8088 	beq.w	bc3c <uip_process+0x130>
  if(flag == UIP_UDP_TIMER) {
    bb2c:	2805      	cmp	r0, #5
    bb2e:	f000 8123 	beq.w	bd78 <uip_process+0x26c>
  UIP_STAT(++uip_stat.ip.recv);
    bb32:	4a86      	ldr	r2, [pc, #536]	; (bd4c <uip_process+0x240>)
    bb34:	8853      	ldrh	r3, [r2, #2]
    bb36:	3301      	adds	r3, #1
    bb38:	8053      	strh	r3, [r2, #2]
  if(BUF->vhl != 0x45)  { /* IP version and header length. */
    bb3a:	4b85      	ldr	r3, [pc, #532]	; (bd50 <uip_process+0x244>)
    bb3c:	7b9b      	ldrb	r3, [r3, #14]
    bb3e:	2b45      	cmp	r3, #69	; 0x45
    bb40:	f000 8199 	beq.w	be76 <uip_process+0x36a>
    UIP_STAT(++uip_stat.ip.drop);
    bb44:	4613      	mov	r3, r2
    bb46:	8812      	ldrh	r2, [r2, #0]
    bb48:	3201      	adds	r2, #1
    bb4a:	801a      	strh	r2, [r3, #0]
    UIP_STAT(++uip_stat.ip.vhlerr);
    bb4c:	88da      	ldrh	r2, [r3, #6]
    bb4e:	3201      	adds	r2, #1
    bb50:	80da      	strh	r2, [r3, #6]
    UIP_LOG("ip: invalid version or header length.");
    bb52:	4880      	ldr	r0, [pc, #512]	; (bd54 <uip_process+0x248>)
    bb54:	4b80      	ldr	r3, [pc, #512]	; (bd58 <uip_process+0x24c>)
    bb56:	4798      	blx	r3
    goto drop;
    bb58:	e004      	b.n	bb64 <uip_process+0x58>
    if((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_ESTABLISHED &&
    bb5a:	7e63      	ldrb	r3, [r4, #25]
    bb5c:	f003 030f 	and.w	r3, r3, #15
    bb60:	2b03      	cmp	r3, #3
    bb62:	d005      	beq.n	bb70 <uip_process+0x64>
  uip_len = 0;
    bb64:	2300      	movs	r3, #0
    bb66:	4a7d      	ldr	r2, [pc, #500]	; (bd5c <uip_process+0x250>)
    bb68:	8013      	strh	r3, [r2, #0]
  uip_flags = 0;
    bb6a:	4a7d      	ldr	r2, [pc, #500]	; (bd60 <uip_process+0x254>)
    bb6c:	7013      	strb	r3, [r2, #0]
  return;
    bb6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_ESTABLISHED &&
    bb70:	8a23      	ldrh	r3, [r4, #16]
    bb72:	2b00      	cmp	r3, #0
    bb74:	d1f6      	bne.n	bb64 <uip_process+0x58>
	uip_flags = UIP_POLL;
    bb76:	2208      	movs	r2, #8
    bb78:	4b79      	ldr	r3, [pc, #484]	; (bd60 <uip_process+0x254>)
    bb7a:	701a      	strb	r2, [r3, #0]
	UIP_APPCALL();
    bb7c:	4b79      	ldr	r3, [pc, #484]	; (bd64 <uip_process+0x258>)
    bb7e:	4798      	blx	r3
      if(uip_flags & UIP_ABORT) {
    bb80:	4b77      	ldr	r3, [pc, #476]	; (bd60 <uip_process+0x254>)
    bb82:	781b      	ldrb	r3, [r3, #0]
    bb84:	f013 0f20 	tst.w	r3, #32
    bb88:	f000 8525 	beq.w	c5d6 <STACK_SIZE+0x5d6>
	uip_slen = 0;
    bb8c:	2300      	movs	r3, #0
    bb8e:	4a76      	ldr	r2, [pc, #472]	; (bd68 <uip_process+0x25c>)
    bb90:	8013      	strh	r3, [r2, #0]
	uip_connr->tcpstateflags = UIP_CLOSED;
    bb92:	7663      	strb	r3, [r4, #25]
	BUF->flags = TCP_RST | TCP_ACK;
    bb94:	2214      	movs	r2, #20
    bb96:	4b6e      	ldr	r3, [pc, #440]	; (bd50 <uip_process+0x244>)
    bb98:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  uip_len = UIP_IPTCPH_LEN;
    bb9c:	2228      	movs	r2, #40	; 0x28
    bb9e:	4b6f      	ldr	r3, [pc, #444]	; (bd5c <uip_process+0x250>)
    bba0:	801a      	strh	r2, [r3, #0]
  BUF->tcpoffset = (UIP_TCPH_LEN / 4) << 4;
    bba2:	2250      	movs	r2, #80	; 0x50
    bba4:	4b6a      	ldr	r3, [pc, #424]	; (bd50 <uip_process+0x244>)
    bba6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  BUF->ackno[0] = uip_connr->rcv_nxt[0];
    bbaa:	7a22      	ldrb	r2, [r4, #8]
    bbac:	4b68      	ldr	r3, [pc, #416]	; (bd50 <uip_process+0x244>)
    bbae:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  BUF->ackno[1] = uip_connr->rcv_nxt[1];
    bbb2:	7a62      	ldrb	r2, [r4, #9]
    bbb4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  BUF->ackno[2] = uip_connr->rcv_nxt[2];
    bbb8:	7aa2      	ldrb	r2, [r4, #10]
    bbba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  BUF->ackno[3] = uip_connr->rcv_nxt[3];
    bbbe:	7ae2      	ldrb	r2, [r4, #11]
    bbc0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  BUF->seqno[0] = uip_connr->snd_nxt[0];
    bbc4:	7b22      	ldrb	r2, [r4, #12]
    bbc6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  BUF->seqno[1] = uip_connr->snd_nxt[1];
    bbca:	7b62      	ldrb	r2, [r4, #13]
    bbcc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  BUF->seqno[2] = uip_connr->snd_nxt[2];
    bbd0:	7ba2      	ldrb	r2, [r4, #14]
    bbd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  BUF->seqno[3] = uip_connr->snd_nxt[3];
    bbd6:	7be2      	ldrb	r2, [r4, #15]
    bbd8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  BUF->proto = UIP_PROTO_TCP;
    bbdc:	2206      	movs	r2, #6
    bbde:	75da      	strb	r2, [r3, #23]
  BUF->srcport  = uip_connr->lport;
    bbe0:	88a2      	ldrh	r2, [r4, #4]
    bbe2:	845a      	strh	r2, [r3, #34]	; 0x22
  BUF->destport = uip_connr->rport;
    bbe4:	88e2      	ldrh	r2, [r4, #6]
    bbe6:	849a      	strh	r2, [r3, #36]	; 0x24
  uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
    bbe8:	4a60      	ldr	r2, [pc, #384]	; (bd6c <uip_process+0x260>)
    bbea:	8811      	ldrh	r1, [r2, #0]
    bbec:	8359      	strh	r1, [r3, #26]
    bbee:	8852      	ldrh	r2, [r2, #2]
    bbf0:	839a      	strh	r2, [r3, #28]
  uip_ipaddr_copy(BUF->destipaddr, uip_connr->ripaddr);
    bbf2:	8822      	ldrh	r2, [r4, #0]
    bbf4:	83da      	strh	r2, [r3, #30]
    bbf6:	8862      	ldrh	r2, [r4, #2]
    bbf8:	841a      	strh	r2, [r3, #32]
  if(uip_connr->tcpstateflags & UIP_STOPPED) {
    bbfa:	7e63      	ldrb	r3, [r4, #25]
    bbfc:	f013 0f10 	tst.w	r3, #16
    bc00:	f000 85c1 	beq.w	c786 <STACK_SIZE+0x786>
    BUF->wnd[0] = BUF->wnd[1] = 0;
    bc04:	4b52      	ldr	r3, [pc, #328]	; (bd50 <uip_process+0x244>)
    bc06:	2200      	movs	r2, #0
    bc08:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    bc0c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  BUF->ttl = UIP_TTL;
    bc10:	4c4f      	ldr	r4, [pc, #316]	; (bd50 <uip_process+0x244>)
    bc12:	2340      	movs	r3, #64	; 0x40
    bc14:	75a3      	strb	r3, [r4, #22]
  BUF->len[0] = (uip_len >> 8);
    bc16:	4b51      	ldr	r3, [pc, #324]	; (bd5c <uip_process+0x250>)
    bc18:	881b      	ldrh	r3, [r3, #0]
    bc1a:	0a1a      	lsrs	r2, r3, #8
    bc1c:	7422      	strb	r2, [r4, #16]
  BUF->len[1] = (uip_len & 0xff);
    bc1e:	7463      	strb	r3, [r4, #17]
  BUF->urgp[0] = BUF->urgp[1] = 0;
    bc20:	2300      	movs	r3, #0
    bc22:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    bc26:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  BUF->tcpchksum = 0;
    bc2a:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    bc2e:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  BUF->tcpchksum = ~(uip_tcpchksum());
    bc32:	4b4f      	ldr	r3, [pc, #316]	; (bd70 <uip_process+0x264>)
    bc34:	4798      	blx	r3
    bc36:	43c0      	mvns	r0, r0
    bc38:	8660      	strh	r0, [r4, #50]	; 0x32
    bc3a:	e0ec      	b.n	be16 <uip_process+0x30a>
    if(++iss[3] == 0) {
    bc3c:	4a4d      	ldr	r2, [pc, #308]	; (bd74 <uip_process+0x268>)
    bc3e:	7ad3      	ldrb	r3, [r2, #11]
    bc40:	3301      	adds	r3, #1
    bc42:	b2db      	uxtb	r3, r3
    bc44:	72d3      	strb	r3, [r2, #11]
    bc46:	b963      	cbnz	r3, bc62 <uip_process+0x156>
      if(++iss[2] == 0) {
    bc48:	7a93      	ldrb	r3, [r2, #10]
    bc4a:	3301      	adds	r3, #1
    bc4c:	b2db      	uxtb	r3, r3
    bc4e:	7293      	strb	r3, [r2, #10]
    bc50:	b93b      	cbnz	r3, bc62 <uip_process+0x156>
	if(++iss[1] == 0) {
    bc52:	7a53      	ldrb	r3, [r2, #9]
    bc54:	3301      	adds	r3, #1
    bc56:	b2db      	uxtb	r3, r3
    bc58:	7253      	strb	r3, [r2, #9]
    bc5a:	b913      	cbnz	r3, bc62 <uip_process+0x156>
	  ++iss[0];
    bc5c:	7a13      	ldrb	r3, [r2, #8]
    bc5e:	3301      	adds	r3, #1
    bc60:	7213      	strb	r3, [r2, #8]
    uip_len = 0;
    bc62:	2300      	movs	r3, #0
    bc64:	4a3d      	ldr	r2, [pc, #244]	; (bd5c <uip_process+0x250>)
    bc66:	8013      	strh	r3, [r2, #0]
    uip_slen = 0;
    bc68:	4a3f      	ldr	r2, [pc, #252]	; (bd68 <uip_process+0x25c>)
    bc6a:	8013      	strh	r3, [r2, #0]
    if(uip_connr->tcpstateflags == UIP_TIME_WAIT ||
    bc6c:	7e63      	ldrb	r3, [r4, #25]
    bc6e:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
    bc72:	2a05      	cmp	r2, #5
    bc74:	d038      	beq.n	bce8 <uip_process+0x1dc>
    } else if(uip_connr->tcpstateflags != UIP_CLOSED) {
    bc76:	2b00      	cmp	r3, #0
    bc78:	f43f af74 	beq.w	bb64 <uip_process+0x58>
      if(uip_outstanding(uip_connr)) {
    bc7c:	8a22      	ldrh	r2, [r4, #16]
    bc7e:	2a00      	cmp	r2, #0
    bc80:	d051      	beq.n	bd26 <uip_process+0x21a>
	if(uip_connr->timer-- == 0) {
    bc82:	7ea2      	ldrb	r2, [r4, #26]
    bc84:	1e51      	subs	r1, r2, #1
    bc86:	76a1      	strb	r1, [r4, #26]
    bc88:	2a00      	cmp	r2, #0
    bc8a:	f47f af6b 	bne.w	bb64 <uip_process+0x58>
	  if(uip_connr->nrtx == UIP_MAXRTX ||
    bc8e:	7ee2      	ldrb	r2, [r4, #27]
    bc90:	2a08      	cmp	r2, #8
    bc92:	d035      	beq.n	bd00 <uip_process+0x1f4>
	     ((uip_connr->tcpstateflags == UIP_SYN_SENT ||
    bc94:	3b01      	subs	r3, #1
	  if(uip_connr->nrtx == UIP_MAXRTX ||
    bc96:	b2db      	uxtb	r3, r3
    bc98:	2b01      	cmp	r3, #1
    bc9a:	d92f      	bls.n	bcfc <uip_process+0x1f0>
	  uip_connr->timer = UIP_RTO << (uip_connr->nrtx > 4?
    bc9c:	2a04      	cmp	r2, #4
    bc9e:	bf9a      	itte	ls
    bca0:	2303      	movls	r3, #3
    bca2:	4093      	lslls	r3, r2
    bca4:	2330      	movhi	r3, #48	; 0x30
    bca6:	76a3      	strb	r3, [r4, #26]
	  ++(uip_connr->nrtx);
    bca8:	3201      	adds	r2, #1
    bcaa:	76e2      	strb	r2, [r4, #27]
	  UIP_STAT(++uip_stat.tcp.rexmit);
    bcac:	4a27      	ldr	r2, [pc, #156]	; (bd4c <uip_process+0x240>)
    bcae:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
    bcb0:	3301      	adds	r3, #1
    bcb2:	84d3      	strh	r3, [r2, #38]	; 0x26
	  switch(uip_connr->tcpstateflags & UIP_TS_MASK) {
    bcb4:	7e63      	ldrb	r3, [r4, #25]
    bcb6:	f003 030f 	and.w	r3, r3, #15
    bcba:	3b01      	subs	r3, #1
    bcbc:	2b07      	cmp	r3, #7
    bcbe:	f63f af51 	bhi.w	bb64 <uip_process+0x58>
    bcc2:	a201      	add	r2, pc, #4	; (adr r2, bcc8 <uip_process+0x1bc>)
    bcc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    bcc8:	0000c2d9 	.word	0x0000c2d9
    bccc:	0000bb65 	.word	0x0000bb65
    bcd0:	0000bd19 	.word	0x0000bd19
    bcd4:	0000c545 	.word	0x0000c545
    bcd8:	0000bb65 	.word	0x0000bb65
    bcdc:	0000c545 	.word	0x0000c545
    bce0:	0000bb65 	.word	0x0000bb65
    bce4:	0000c545 	.word	0x0000c545
      ++(uip_connr->timer);
    bce8:	7ea3      	ldrb	r3, [r4, #26]
    bcea:	3301      	adds	r3, #1
    bcec:	b2db      	uxtb	r3, r3
    bcee:	76a3      	strb	r3, [r4, #26]
      if(uip_connr->timer == UIP_TIME_WAIT_TIMEOUT) {
    bcf0:	2b78      	cmp	r3, #120	; 0x78
    bcf2:	f47f af37 	bne.w	bb64 <uip_process+0x58>
	uip_connr->tcpstateflags = UIP_CLOSED;
    bcf6:	2300      	movs	r3, #0
    bcf8:	7663      	strb	r3, [r4, #25]
    bcfa:	e733      	b.n	bb64 <uip_process+0x58>
	       uip_connr->tcpstateflags == UIP_SYN_RCVD) &&
    bcfc:	2a05      	cmp	r2, #5
    bcfe:	d1cd      	bne.n	bc9c <uip_process+0x190>
	    uip_connr->tcpstateflags = UIP_CLOSED;
    bd00:	2300      	movs	r3, #0
    bd02:	7663      	strb	r3, [r4, #25]
	    uip_flags = UIP_TIMEDOUT;
    bd04:	2280      	movs	r2, #128	; 0x80
    bd06:	4b16      	ldr	r3, [pc, #88]	; (bd60 <uip_process+0x254>)
    bd08:	701a      	strb	r2, [r3, #0]
	    UIP_APPCALL();
    bd0a:	4b16      	ldr	r3, [pc, #88]	; (bd64 <uip_process+0x258>)
    bd0c:	4798      	blx	r3
	    BUF->flags = TCP_RST | TCP_ACK;
    bd0e:	2214      	movs	r2, #20
    bd10:	4b0f      	ldr	r3, [pc, #60]	; (bd50 <uip_process+0x244>)
    bd12:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	    goto tcp_send_nodata;
    bd16:	e741      	b.n	bb9c <uip_process+0x90>
	    uip_flags = UIP_REXMIT;
    bd18:	2204      	movs	r2, #4
    bd1a:	4b11      	ldr	r3, [pc, #68]	; (bd60 <uip_process+0x254>)
    bd1c:	701a      	strb	r2, [r3, #0]
	    UIP_APPCALL();
    bd1e:	4b11      	ldr	r3, [pc, #68]	; (bd64 <uip_process+0x258>)
    bd20:	4798      	blx	r3
	    goto apprexmit;
    bd22:	f000 bc91 	b.w	c648 <STACK_SIZE+0x648>
      } else if((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_ESTABLISHED) {
    bd26:	f003 030f 	and.w	r3, r3, #15
    bd2a:	2b03      	cmp	r3, #3
    bd2c:	f47f af1a 	bne.w	bb64 <uip_process+0x58>
	uip_flags = UIP_POLL;
    bd30:	2208      	movs	r2, #8
    bd32:	4b0b      	ldr	r3, [pc, #44]	; (bd60 <uip_process+0x254>)
    bd34:	701a      	strb	r2, [r3, #0]
	UIP_APPCALL();
    bd36:	4b0b      	ldr	r3, [pc, #44]	; (bd64 <uip_process+0x258>)
    bd38:	4798      	blx	r3
	goto appsend;
    bd3a:	e721      	b.n	bb80 <uip_process+0x74>
    bd3c:	20008598 	.word	0x20008598
    bd40:	2000868a 	.word	0x2000868a
    bd44:	20008594 	.word	0x20008594
    bd48:	20008584 	.word	0x20008584
    bd4c:	20008618 	.word	0x20008618
    bd50:	20008654 	.word	0x20008654
    bd54:	00011404 	.word	0x00011404
    bd58:	0000d9f1 	.word	0x0000d9f1
    bd5c:	20008580 	.word	0x20008580
    bd60:	2000858c 	.word	0x2000858c
    bd64:	0000d9dd 	.word	0x0000d9dd
    bd68:	20008cfa 	.word	0x20008cfa
    bd6c:	20008650 	.word	0x20008650
    bd70:	0000b9ed 	.word	0x0000b9ed
    bd74:	200072bc 	.word	0x200072bc
    if(uip_udp_conn->lport != 0) {
    bd78:	4b9a      	ldr	r3, [pc, #616]	; (bfe4 <uip_process+0x4d8>)
    bd7a:	681b      	ldr	r3, [r3, #0]
    bd7c:	889b      	ldrh	r3, [r3, #4]
    bd7e:	2b00      	cmp	r3, #0
    bd80:	f43f aef0 	beq.w	bb64 <uip_process+0x58>
      uip_conn = NULL;
    bd84:	2300      	movs	r3, #0
    bd86:	4a98      	ldr	r2, [pc, #608]	; (bfe8 <uip_process+0x4dc>)
    bd88:	6013      	str	r3, [r2, #0]
      uip_sappdata = uip_appdata = &uip_buf[UIP_LLH_LEN + UIP_IPUDPH_LEN];
    bd8a:	4a98      	ldr	r2, [pc, #608]	; (bfec <uip_process+0x4e0>)
    bd8c:	4998      	ldr	r1, [pc, #608]	; (bff0 <uip_process+0x4e4>)
    bd8e:	600a      	str	r2, [r1, #0]
    bd90:	4998      	ldr	r1, [pc, #608]	; (bff4 <uip_process+0x4e8>)
    bd92:	600a      	str	r2, [r1, #0]
      uip_len = uip_slen = 0;
    bd94:	4a98      	ldr	r2, [pc, #608]	; (bff8 <uip_process+0x4ec>)
    bd96:	8013      	strh	r3, [r2, #0]
    bd98:	4a98      	ldr	r2, [pc, #608]	; (bffc <uip_process+0x4f0>)
    bd9a:	8013      	strh	r3, [r2, #0]
      uip_flags = UIP_POLL;
    bd9c:	2208      	movs	r2, #8
    bd9e:	4b98      	ldr	r3, [pc, #608]	; (c000 <STACK_SIZE>)
    bda0:	701a      	strb	r2, [r3, #0]
      UIP_UDP_APPCALL();
    bda2:	4b98      	ldr	r3, [pc, #608]	; (c004 <STACK_SIZE+0x4>)
    bda4:	4798      	blx	r3
  if(uip_slen == 0) {
    bda6:	4b94      	ldr	r3, [pc, #592]	; (bff8 <uip_process+0x4ec>)
    bda8:	881a      	ldrh	r2, [r3, #0]
    bdaa:	2a00      	cmp	r2, #0
    bdac:	f43f aeda 	beq.w	bb64 <uip_process+0x58>
  uip_len = uip_slen + UIP_IPUDPH_LEN;
    bdb0:	f102 011c 	add.w	r1, r2, #28
    bdb4:	b289      	uxth	r1, r1
    bdb6:	4b91      	ldr	r3, [pc, #580]	; (bffc <uip_process+0x4f0>)
    bdb8:	8019      	strh	r1, [r3, #0]
  BUF->len[0] = (uip_len >> 8);
    bdba:	4b93      	ldr	r3, [pc, #588]	; (c008 <STACK_SIZE+0x8>)
    bdbc:	0a08      	lsrs	r0, r1, #8
    bdbe:	7418      	strb	r0, [r3, #16]
  BUF->len[1] = (uip_len & 0xff);
    bdc0:	7459      	strb	r1, [r3, #17]
  BUF->ttl = uip_udp_conn->ttl;
    bdc2:	4988      	ldr	r1, [pc, #544]	; (bfe4 <uip_process+0x4d8>)
    bdc4:	6809      	ldr	r1, [r1, #0]
    bdc6:	7a08      	ldrb	r0, [r1, #8]
    bdc8:	7598      	strb	r0, [r3, #22]
  BUF->proto = UIP_PROTO_UDP;
    bdca:	2011      	movs	r0, #17
    bdcc:	75d8      	strb	r0, [r3, #23]
  UDPBUF->udplen = HTONS(uip_slen + UIP_UDPH_LEN);
    bdce:	3208      	adds	r2, #8
    bdd0:	b292      	uxth	r2, r2
    bdd2:	0a10      	lsrs	r0, r2, #8
    bdd4:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
    bdd8:	84da      	strh	r2, [r3, #38]	; 0x26
  UDPBUF->udpchksum = 0;
    bdda:	2200      	movs	r2, #0
    bddc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    bde0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  BUF->srcport  = uip_udp_conn->lport;
    bde4:	888a      	ldrh	r2, [r1, #4]
    bde6:	845a      	strh	r2, [r3, #34]	; 0x22
  BUF->destport = uip_udp_conn->rport;
    bde8:	88ca      	ldrh	r2, [r1, #6]
    bdea:	849a      	strh	r2, [r3, #36]	; 0x24
  uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
    bdec:	4a87      	ldr	r2, [pc, #540]	; (c00c <STACK_SIZE+0xc>)
    bdee:	8810      	ldrh	r0, [r2, #0]
    bdf0:	8358      	strh	r0, [r3, #26]
    bdf2:	8852      	ldrh	r2, [r2, #2]
    bdf4:	839a      	strh	r2, [r3, #28]
  uip_ipaddr_copy(BUF->destipaddr, uip_udp_conn->ripaddr);
    bdf6:	880a      	ldrh	r2, [r1, #0]
    bdf8:	83da      	strh	r2, [r3, #30]
    bdfa:	884a      	ldrh	r2, [r1, #2]
    bdfc:	841a      	strh	r2, [r3, #32]
  uip_appdata = &uip_buf[UIP_LLH_LEN + UIP_IPTCPH_LEN];
    bdfe:	3336      	adds	r3, #54	; 0x36
    be00:	4a7b      	ldr	r2, [pc, #492]	; (bff0 <uip_process+0x4e4>)
    be02:	6013      	str	r3, [r2, #0]
  UDPBUF->udpchksum = ~(uip_udpchksum());
    be04:	4b82      	ldr	r3, [pc, #520]	; (c010 <STACK_SIZE+0x10>)
    be06:	4798      	blx	r3
    be08:	43c0      	mvns	r0, r0
    be0a:	b280      	uxth	r0, r0
  if(UDPBUF->udpchksum == 0) {
    be0c:	2800      	cmp	r0, #0
    be0e:	f000 8151 	beq.w	c0b4 <STACK_SIZE+0xb4>
  UDPBUF->udpchksum = ~(uip_udpchksum());
    be12:	4b7d      	ldr	r3, [pc, #500]	; (c008 <STACK_SIZE+0x8>)
    be14:	8518      	strh	r0, [r3, #40]	; 0x28
  BUF->vhl = 0x45;
    be16:	4c7c      	ldr	r4, [pc, #496]	; (c008 <STACK_SIZE+0x8>)
    be18:	2345      	movs	r3, #69	; 0x45
    be1a:	73a3      	strb	r3, [r4, #14]
  BUF->tos = 0;
    be1c:	2200      	movs	r2, #0
    be1e:	73e2      	strb	r2, [r4, #15]
  BUF->ipoffset[0] = BUF->ipoffset[1] = 0;
    be20:	7562      	strb	r2, [r4, #21]
    be22:	7522      	strb	r2, [r4, #20]
  ++ipid;
    be24:	497b      	ldr	r1, [pc, #492]	; (c014 <STACK_SIZE+0x14>)
    be26:	880b      	ldrh	r3, [r1, #0]
    be28:	3301      	adds	r3, #1
    be2a:	b29b      	uxth	r3, r3
    be2c:	800b      	strh	r3, [r1, #0]
  BUF->ipid[0] = ipid >> 8;
    be2e:	0a19      	lsrs	r1, r3, #8
    be30:	74a1      	strb	r1, [r4, #18]
  BUF->ipid[1] = ipid & 0xff;
    be32:	74e3      	strb	r3, [r4, #19]
  BUF->ipchksum = 0;
    be34:	7622      	strb	r2, [r4, #24]
    be36:	7662      	strb	r2, [r4, #25]
  BUF->ipchksum = ~(uip_ipchksum());
    be38:	4d77      	ldr	r5, [pc, #476]	; (c018 <STACK_SIZE+0x18>)
    be3a:	47a8      	blx	r5
    be3c:	43c0      	mvns	r0, r0
    be3e:	8320      	strh	r0, [r4, #24]
  DEBUG_PRINTF("uip ip_send_nolen: chkecum 0x%04x\n", uip_ipchksum());
    be40:	47a8      	blx	r5
    be42:	4601      	mov	r1, r0
    be44:	4875      	ldr	r0, [pc, #468]	; (c01c <STACK_SIZE+0x1c>)
    be46:	4b76      	ldr	r3, [pc, #472]	; (c020 <STACK_SIZE+0x20>)
    be48:	4798      	blx	r3
  UIP_STAT(++uip_stat.tcp.sent);
    be4a:	4a76      	ldr	r2, [pc, #472]	; (c024 <STACK_SIZE+0x24>)
    be4c:	8bd3      	ldrh	r3, [r2, #30]
    be4e:	3301      	adds	r3, #1
    be50:	83d3      	strh	r3, [r2, #30]
  DEBUG_PRINTF("Sending packet with length %d (%d)\n", uip_len,
    be52:	4b6d      	ldr	r3, [pc, #436]	; (c008 <STACK_SIZE+0x8>)
    be54:	7c1a      	ldrb	r2, [r3, #16]
    be56:	7c5b      	ldrb	r3, [r3, #17]
    be58:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
    be5c:	4b67      	ldr	r3, [pc, #412]	; (bffc <uip_process+0x4f0>)
    be5e:	8819      	ldrh	r1, [r3, #0]
    be60:	4871      	ldr	r0, [pc, #452]	; (c028 <STACK_SIZE+0x28>)
    be62:	4b6f      	ldr	r3, [pc, #444]	; (c020 <STACK_SIZE+0x20>)
    be64:	4798      	blx	r3
  UIP_STAT(++uip_stat.ip.sent);
    be66:	4a6f      	ldr	r2, [pc, #444]	; (c024 <STACK_SIZE+0x24>)
    be68:	8893      	ldrh	r3, [r2, #4]
    be6a:	3301      	adds	r3, #1
    be6c:	8093      	strh	r3, [r2, #4]
  uip_flags = 0;
    be6e:	2200      	movs	r2, #0
    be70:	4b63      	ldr	r3, [pc, #396]	; (c000 <STACK_SIZE>)
    be72:	701a      	strb	r2, [r3, #0]
  return;
    be74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if((BUF->len[0] << 8) + BUF->len[1] <= uip_len) {
    be76:	4a64      	ldr	r2, [pc, #400]	; (c008 <STACK_SIZE+0x8>)
    be78:	7c11      	ldrb	r1, [r2, #16]
    be7a:	7c53      	ldrb	r3, [r2, #17]
    be7c:	eb03 2001 	add.w	r0, r3, r1, lsl #8
    be80:	4a5e      	ldr	r2, [pc, #376]	; (bffc <uip_process+0x4f0>)
    be82:	8812      	ldrh	r2, [r2, #0]
    be84:	4290      	cmp	r0, r2
    be86:	dc14      	bgt.n	beb2 <uip_process+0x3a6>
    uip_len = (BUF->len[0] << 8) + BUF->len[1];
    be88:	4a5c      	ldr	r2, [pc, #368]	; (bffc <uip_process+0x4f0>)
    be8a:	8010      	strh	r0, [r2, #0]
  if((BUF->ipoffset[0] & 0x3f) != 0 ||
    be8c:	4b5e      	ldr	r3, [pc, #376]	; (c008 <STACK_SIZE+0x8>)
    be8e:	7d1b      	ldrb	r3, [r3, #20]
    be90:	f013 0f3f 	tst.w	r3, #63	; 0x3f
    be94:	d102      	bne.n	be9c <uip_process+0x390>
     BUF->ipoffset[1] != 0) {
    be96:	4b5c      	ldr	r3, [pc, #368]	; (c008 <STACK_SIZE+0x8>)
    be98:	7d5c      	ldrb	r4, [r3, #21]
  if((BUF->ipoffset[0] & 0x3f) != 0 ||
    be9a:	b174      	cbz	r4, beba <uip_process+0x3ae>
    UIP_STAT(++uip_stat.ip.drop);
    be9c:	4b61      	ldr	r3, [pc, #388]	; (c024 <STACK_SIZE+0x24>)
    be9e:	881a      	ldrh	r2, [r3, #0]
    bea0:	3201      	adds	r2, #1
    bea2:	801a      	strh	r2, [r3, #0]
    UIP_STAT(++uip_stat.ip.fragerr);
    bea4:	899a      	ldrh	r2, [r3, #12]
    bea6:	3201      	adds	r2, #1
    bea8:	819a      	strh	r2, [r3, #12]
    UIP_LOG("ip: fragment dropped.");
    beaa:	4860      	ldr	r0, [pc, #384]	; (c02c <STACK_SIZE+0x2c>)
    beac:	4b60      	ldr	r3, [pc, #384]	; (c030 <STACK_SIZE+0x30>)
    beae:	4798      	blx	r3
    goto drop;
    beb0:	e658      	b.n	bb64 <uip_process+0x58>
    UIP_LOG("ip: packet shorter than reported in IP header.");
    beb2:	4860      	ldr	r0, [pc, #384]	; (c034 <STACK_SIZE+0x34>)
    beb4:	4b5e      	ldr	r3, [pc, #376]	; (c030 <STACK_SIZE+0x30>)
    beb6:	4798      	blx	r3
    goto drop;
    beb8:	e654      	b.n	bb64 <uip_process+0x58>
  if(uip_ipaddr_cmp(uip_hostaddr, all_zeroes_addr)) {
    beba:	4b54      	ldr	r3, [pc, #336]	; (c00c <STACK_SIZE+0xc>)
    bebc:	881b      	ldrh	r3, [r3, #0]
    bebe:	b913      	cbnz	r3, bec6 <uip_process+0x3ba>
    bec0:	4a52      	ldr	r2, [pc, #328]	; (c00c <STACK_SIZE+0xc>)
    bec2:	8852      	ldrh	r2, [r2, #2]
    bec4:	b172      	cbz	r2, bee4 <uip_process+0x3d8>
    if(!uip_ipaddr_cmp(BUF->destipaddr, uip_hostaddr)) {
    bec6:	4a50      	ldr	r2, [pc, #320]	; (c008 <STACK_SIZE+0x8>)
    bec8:	8bd2      	ldrh	r2, [r2, #30]
    beca:	429a      	cmp	r2, r3
    becc:	d004      	beq.n	bed8 <uip_process+0x3cc>
      UIP_STAT(++uip_stat.ip.drop);
    bece:	4a55      	ldr	r2, [pc, #340]	; (c024 <STACK_SIZE+0x24>)
    bed0:	8813      	ldrh	r3, [r2, #0]
    bed2:	3301      	adds	r3, #1
    bed4:	8013      	strh	r3, [r2, #0]
      goto drop;
    bed6:	e645      	b.n	bb64 <uip_process+0x58>
    if(!uip_ipaddr_cmp(BUF->destipaddr, uip_hostaddr)) {
    bed8:	4b4b      	ldr	r3, [pc, #300]	; (c008 <STACK_SIZE+0x8>)
    beda:	8c1a      	ldrh	r2, [r3, #32]
    bedc:	4b4b      	ldr	r3, [pc, #300]	; (c00c <STACK_SIZE+0xc>)
    bede:	885b      	ldrh	r3, [r3, #2]
    bee0:	429a      	cmp	r2, r3
    bee2:	d1f4      	bne.n	bece <uip_process+0x3c2>
  if(uip_ipchksum() != 0xffff) { /* Compute and check the IP header
    bee4:	4b4c      	ldr	r3, [pc, #304]	; (c018 <STACK_SIZE+0x18>)
    bee6:	4798      	blx	r3
    bee8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    beec:	4298      	cmp	r0, r3
    beee:	d00a      	beq.n	bf06 <uip_process+0x3fa>
    UIP_STAT(++uip_stat.ip.drop);
    bef0:	4b4c      	ldr	r3, [pc, #304]	; (c024 <STACK_SIZE+0x24>)
    bef2:	881a      	ldrh	r2, [r3, #0]
    bef4:	3201      	adds	r2, #1
    bef6:	801a      	strh	r2, [r3, #0]
    UIP_STAT(++uip_stat.ip.chkerr);
    bef8:	89da      	ldrh	r2, [r3, #14]
    befa:	3201      	adds	r2, #1
    befc:	81da      	strh	r2, [r3, #14]
    UIP_LOG("ip: bad checksum.");
    befe:	484e      	ldr	r0, [pc, #312]	; (c038 <STACK_SIZE+0x38>)
    bf00:	4b4b      	ldr	r3, [pc, #300]	; (c030 <STACK_SIZE+0x30>)
    bf02:	4798      	blx	r3
    goto drop;
    bf04:	e62e      	b.n	bb64 <uip_process+0x58>
  if(BUF->proto == UIP_PROTO_TCP) { /* Check for TCP packet. If so,
    bf06:	4b40      	ldr	r3, [pc, #256]	; (c008 <STACK_SIZE+0x8>)
    bf08:	7ddb      	ldrb	r3, [r3, #23]
    bf0a:	2b06      	cmp	r3, #6
    bf0c:	f000 80da 	beq.w	c0c4 <STACK_SIZE+0xc4>
  if(BUF->proto == UIP_PROTO_UDP) {
    bf10:	2b11      	cmp	r3, #17
    bf12:	d03c      	beq.n	bf8e <uip_process+0x482>
  if(BUF->proto != UIP_PROTO_ICMP) { /* We only allow ICMP packets from
    bf14:	2b01      	cmp	r3, #1
    bf16:	d00a      	beq.n	bf2e <uip_process+0x422>
    UIP_STAT(++uip_stat.ip.drop);
    bf18:	4b42      	ldr	r3, [pc, #264]	; (c024 <STACK_SIZE+0x24>)
    bf1a:	881a      	ldrh	r2, [r3, #0]
    bf1c:	3201      	adds	r2, #1
    bf1e:	801a      	strh	r2, [r3, #0]
    UIP_STAT(++uip_stat.ip.protoerr);
    bf20:	8a1a      	ldrh	r2, [r3, #16]
    bf22:	3201      	adds	r2, #1
    bf24:	821a      	strh	r2, [r3, #16]
    UIP_LOG("ip: neither tcp nor icmp.");
    bf26:	4845      	ldr	r0, [pc, #276]	; (c03c <STACK_SIZE+0x3c>)
    bf28:	4b41      	ldr	r3, [pc, #260]	; (c030 <STACK_SIZE+0x30>)
    bf2a:	4798      	blx	r3
    goto drop;
    bf2c:	e61a      	b.n	bb64 <uip_process+0x58>
  UIP_STAT(++uip_stat.icmp.recv);
    bf2e:	4a3d      	ldr	r2, [pc, #244]	; (c024 <STACK_SIZE+0x24>)
    bf30:	8a93      	ldrh	r3, [r2, #20]
    bf32:	3301      	adds	r3, #1
    bf34:	8293      	strh	r3, [r2, #20]
  if(ICMPBUF->type != ICMP_ECHO) {
    bf36:	4b34      	ldr	r3, [pc, #208]	; (c008 <STACK_SIZE+0x8>)
    bf38:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
    bf3c:	2b08      	cmp	r3, #8
    bf3e:	d00a      	beq.n	bf56 <uip_process+0x44a>
    UIP_STAT(++uip_stat.icmp.drop);
    bf40:	4613      	mov	r3, r2
    bf42:	8a52      	ldrh	r2, [r2, #18]
    bf44:	3201      	adds	r2, #1
    bf46:	825a      	strh	r2, [r3, #18]
    UIP_STAT(++uip_stat.icmp.typeerr);
    bf48:	8b1a      	ldrh	r2, [r3, #24]
    bf4a:	3201      	adds	r2, #1
    bf4c:	831a      	strh	r2, [r3, #24]
    UIP_LOG("icmp: not icmp echo.");
    bf4e:	483c      	ldr	r0, [pc, #240]	; (c040 <STACK_SIZE+0x40>)
    bf50:	4b37      	ldr	r3, [pc, #220]	; (c030 <STACK_SIZE+0x30>)
    bf52:	4798      	blx	r3
    goto drop;
    bf54:	e606      	b.n	bb64 <uip_process+0x58>
  ICMPBUF->type = ICMP_ECHO_REPLY;
    bf56:	4b2c      	ldr	r3, [pc, #176]	; (c008 <STACK_SIZE+0x8>)
    bf58:	2200      	movs	r2, #0
    bf5a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  if(ICMPBUF->icmpchksum >= HTONS(0xffff - (ICMP_ECHO << 8))) {
    bf5e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    bf60:	f64f 72f6 	movw	r2, #65526	; 0xfff6
    bf64:	4293      	cmp	r3, r2
    ICMPBUF->icmpchksum += HTONS(ICMP_ECHO << 8) + 1;
    bf66:	bf8c      	ite	hi
    bf68:	3309      	addhi	r3, #9
    ICMPBUF->icmpchksum += HTONS(ICMP_ECHO << 8);
    bf6a:	3308      	addls	r3, #8
    bf6c:	4a26      	ldr	r2, [pc, #152]	; (c008 <STACK_SIZE+0x8>)
    bf6e:	8493      	strh	r3, [r2, #36]	; 0x24
  uip_ipaddr_copy(BUF->destipaddr, BUF->srcipaddr);
    bf70:	4b25      	ldr	r3, [pc, #148]	; (c008 <STACK_SIZE+0x8>)
    bf72:	8b5a      	ldrh	r2, [r3, #26]
    bf74:	83da      	strh	r2, [r3, #30]
    bf76:	8b9a      	ldrh	r2, [r3, #28]
    bf78:	841a      	strh	r2, [r3, #32]
  uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
    bf7a:	4a24      	ldr	r2, [pc, #144]	; (c00c <STACK_SIZE+0xc>)
    bf7c:	8811      	ldrh	r1, [r2, #0]
    bf7e:	8359      	strh	r1, [r3, #26]
    bf80:	8852      	ldrh	r2, [r2, #2]
    bf82:	839a      	strh	r2, [r3, #28]
  UIP_STAT(++uip_stat.icmp.sent);
    bf84:	4a27      	ldr	r2, [pc, #156]	; (c024 <STACK_SIZE+0x24>)
    bf86:	8ad3      	ldrh	r3, [r2, #22]
    bf88:	3301      	adds	r3, #1
    bf8a:	82d3      	strh	r3, [r2, #22]
  goto send;
    bf8c:	e761      	b.n	be52 <uip_process+0x346>
  uip_len = uip_len - UIP_IPUDPH_LEN;
    bf8e:	4a1b      	ldr	r2, [pc, #108]	; (bffc <uip_process+0x4f0>)
    bf90:	8813      	ldrh	r3, [r2, #0]
    bf92:	3b1c      	subs	r3, #28
    bf94:	8013      	strh	r3, [r2, #0]
  uip_appdata = &uip_buf[UIP_LLH_LEN + UIP_IPUDPH_LEN];
    bf96:	4b15      	ldr	r3, [pc, #84]	; (bfec <uip_process+0x4e0>)
    bf98:	4a15      	ldr	r2, [pc, #84]	; (bff0 <uip_process+0x4e4>)
    bf9a:	6013      	str	r3, [r2, #0]
  if(UDPBUF->udpchksum != 0 && uip_udpchksum() != 0xffff) {
    bf9c:	f833 3c02 	ldrh.w	r3, [r3, #-2]
    bfa0:	b183      	cbz	r3, bfc4 <uip_process+0x4b8>
    bfa2:	4b1b      	ldr	r3, [pc, #108]	; (c010 <STACK_SIZE+0x10>)
    bfa4:	4798      	blx	r3
    bfa6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    bfaa:	4298      	cmp	r0, r3
    bfac:	d00a      	beq.n	bfc4 <uip_process+0x4b8>
    UIP_STAT(++uip_stat.udp.drop);
    bfae:	4b1d      	ldr	r3, [pc, #116]	; (c024 <STACK_SIZE+0x24>)
    bfb0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
    bfb2:	3201      	adds	r2, #1
    bfb4:	859a      	strh	r2, [r3, #44]	; 0x2c
    UIP_STAT(++uip_stat.udp.chkerr);
    bfb6:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
    bfb8:	3201      	adds	r2, #1
    bfba:	865a      	strh	r2, [r3, #50]	; 0x32
    UIP_LOG("udp: bad checksum.");
    bfbc:	4821      	ldr	r0, [pc, #132]	; (c044 <STACK_SIZE+0x44>)
    bfbe:	4b1c      	ldr	r3, [pc, #112]	; (c030 <STACK_SIZE+0x30>)
    bfc0:	4798      	blx	r3
    goto drop;
    bfc2:	e5cf      	b.n	bb64 <uip_process+0x58>
  for(uip_udp_conn = &uip_udp_conns[0];
    bfc4:	4b20      	ldr	r3, [pc, #128]	; (c048 <STACK_SIZE+0x48>)
    bfc6:	4a07      	ldr	r2, [pc, #28]	; (bfe4 <uip_process+0x4d8>)
    bfc8:	6013      	str	r3, [r2, #0]
       UDPBUF->destport == uip_udp_conn->lport &&
    bfca:	4a0f      	ldr	r2, [pc, #60]	; (c008 <STACK_SIZE+0x8>)
    bfcc:	8c94      	ldrh	r4, [r2, #36]	; 0x24
        UDPBUF->srcport == uip_udp_conn->rport) &&
    bfce:	8c57      	ldrh	r7, [r2, #34]	; 0x22
	uip_ipaddr_cmp(BUF->srcipaddr, uip_udp_conn->ripaddr))) {
    bfd0:	8b56      	ldrh	r6, [r2, #26]
    bfd2:	f8b2 e01c 	ldrh.w	lr, [r2, #28]
       (uip_ipaddr_cmp(uip_udp_conn->ripaddr, all_zeroes_addr) ||
    bfd6:	f64f 75ff 	movw	r5, #65535	; 0xffff
      ++uip_udp_conn) {
    bfda:	4802      	ldr	r0, [pc, #8]	; (bfe4 <uip_process+0x4d8>)
  for(uip_udp_conn = &uip_udp_conns[0];
    bfdc:	f503 717a 	add.w	r1, r3, #1000	; 0x3e8
    bfe0:	e041      	b.n	c066 <STACK_SIZE+0x66>
    bfe2:	bf00      	nop
    bfe4:	20008590 	.word	0x20008590
    bfe8:	20008598 	.word	0x20008598
    bfec:	2000867e 	.word	0x2000867e
    bff0:	20008594 	.word	0x20008594
    bff4:	20008584 	.word	0x20008584
    bff8:	20008cfa 	.word	0x20008cfa
    bffc:	20008580 	.word	0x20008580
    c000:	2000858c 	.word	0x2000858c
    c004:	000091c1 	.word	0x000091c1
    c008:	20008654 	.word	0x20008654
    c00c:	20008650 	.word	0x20008650
    c010:	0000b9fd 	.word	0x0000b9fd
    c014:	200072bc 	.word	0x200072bc
    c018:	0000b9b5 	.word	0x0000b9b5
    c01c:	00011530 	.word	0x00011530
    c020:	0000031d 	.word	0x0000031d
    c024:	20008618 	.word	0x20008618
    c028:	00011554 	.word	0x00011554
    c02c:	0001145c 	.word	0x0001145c
    c030:	0000d9f1 	.word	0x0000d9f1
    c034:	0001142c 	.word	0x0001142c
    c038:	00011474 	.word	0x00011474
    c03c:	00011488 	.word	0x00011488
    c040:	000114a4 	.word	0x000114a4
    c044:	000114bc 	.word	0x000114bc
    c048:	20008cfc 	.word	0x20008cfc
       (uip_ipaddr_cmp(uip_udp_conn->ripaddr, all_zeroes_addr) ||
    c04c:	881a      	ldrh	r2, [r3, #0]
        UDPBUF->srcport == uip_udp_conn->rport) &&
    c04e:	b9aa      	cbnz	r2, c07c <STACK_SIZE+0x7c>
       (uip_ipaddr_cmp(uip_udp_conn->ripaddr, all_zeroes_addr) ||
    c050:	f8b3 c002 	ldrh.w	ip, [r3, #2]
    c054:	f1bc 0f00 	cmp.w	ip, #0
    c058:	d016      	beq.n	c088 <STACK_SIZE+0x88>
	uip_ipaddr_cmp(uip_udp_conn->ripaddr, all_ones_addr) ||
    c05a:	42b2      	cmp	r2, r6
    c05c:	d022      	beq.n	c0a4 <STACK_SIZE+0xa4>
      ++uip_udp_conn) {
    c05e:	3364      	adds	r3, #100	; 0x64
    c060:	6003      	str	r3, [r0, #0]
  for(uip_udp_conn = &uip_udp_conns[0];
    c062:	428b      	cmp	r3, r1
    c064:	d222      	bcs.n	c0ac <STACK_SIZE+0xac>
    if(uip_udp_conn->lport != 0 &&
    c066:	889a      	ldrh	r2, [r3, #4]
    c068:	2a00      	cmp	r2, #0
    c06a:	d0f8      	beq.n	c05e <STACK_SIZE+0x5e>
    c06c:	42a2      	cmp	r2, r4
    c06e:	d1f6      	bne.n	c05e <STACK_SIZE+0x5e>
       (uip_udp_conn->rport == 0 ||
    c070:	88da      	ldrh	r2, [r3, #6]
       UDPBUF->destport == uip_udp_conn->lport &&
    c072:	2a00      	cmp	r2, #0
    c074:	d0ea      	beq.n	c04c <STACK_SIZE+0x4c>
       (uip_udp_conn->rport == 0 ||
    c076:	42ba      	cmp	r2, r7
    c078:	d1f1      	bne.n	c05e <STACK_SIZE+0x5e>
    c07a:	e7e7      	b.n	c04c <STACK_SIZE+0x4c>
       (uip_ipaddr_cmp(uip_udp_conn->ripaddr, all_zeroes_addr) ||
    c07c:	42aa      	cmp	r2, r5
    c07e:	d1ec      	bne.n	c05a <STACK_SIZE+0x5a>
	uip_ipaddr_cmp(uip_udp_conn->ripaddr, all_ones_addr) ||
    c080:	f8b3 c002 	ldrh.w	ip, [r3, #2]
    c084:	45ac      	cmp	ip, r5
    c086:	d1e8      	bne.n	c05a <STACK_SIZE+0x5a>
  uip_conn = NULL;
    c088:	2300      	movs	r3, #0
    c08a:	4a9f      	ldr	r2, [pc, #636]	; (c308 <STACK_SIZE+0x308>)
    c08c:	6013      	str	r3, [r2, #0]
  uip_flags = UIP_NEWDATA;
    c08e:	2102      	movs	r1, #2
    c090:	4a9e      	ldr	r2, [pc, #632]	; (c30c <STACK_SIZE+0x30c>)
    c092:	7011      	strb	r1, [r2, #0]
  uip_sappdata = uip_appdata = &uip_buf[UIP_LLH_LEN + UIP_IPUDPH_LEN];
    c094:	499e      	ldr	r1, [pc, #632]	; (c310 <STACK_SIZE+0x310>)
    c096:	4a9f      	ldr	r2, [pc, #636]	; (c314 <STACK_SIZE+0x314>)
    c098:	6011      	str	r1, [r2, #0]
  uip_slen = 0;
    c09a:	4a9f      	ldr	r2, [pc, #636]	; (c318 <STACK_SIZE+0x318>)
    c09c:	8013      	strh	r3, [r2, #0]
  UIP_UDP_APPCALL();
    c09e:	4b9f      	ldr	r3, [pc, #636]	; (c31c <STACK_SIZE+0x31c>)
    c0a0:	4798      	blx	r3
    c0a2:	e680      	b.n	bda6 <uip_process+0x29a>
	uip_ipaddr_cmp(BUF->srcipaddr, uip_udp_conn->ripaddr))) {
    c0a4:	885a      	ldrh	r2, [r3, #2]
    c0a6:	4572      	cmp	r2, lr
    c0a8:	d1d9      	bne.n	c05e <STACK_SIZE+0x5e>
    c0aa:	e7ed      	b.n	c088 <STACK_SIZE+0x88>
  UIP_LOG("udp: no matching connection found");
    c0ac:	489c      	ldr	r0, [pc, #624]	; (c320 <STACK_SIZE+0x320>)
    c0ae:	4b9d      	ldr	r3, [pc, #628]	; (c324 <STACK_SIZE+0x324>)
    c0b0:	4798      	blx	r3
  goto drop;
    c0b2:	e557      	b.n	bb64 <uip_process+0x58>
    UDPBUF->udpchksum = 0xffff;
    c0b4:	4b9c      	ldr	r3, [pc, #624]	; (c328 <STACK_SIZE+0x328>)
    c0b6:	f04f 32ff 	mov.w	r2, #4294967295
    c0ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    c0be:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    c0c2:	e6a8      	b.n	be16 <uip_process+0x30a>
  UIP_STAT(++uip_stat.tcp.recv);
    c0c4:	4a99      	ldr	r2, [pc, #612]	; (c32c <STACK_SIZE+0x32c>)
    c0c6:	8b93      	ldrh	r3, [r2, #28]
    c0c8:	3301      	adds	r3, #1
    c0ca:	8393      	strh	r3, [r2, #28]
  if(uip_tcpchksum() != 0xffff) {   /* Compute and check the TCP
    c0cc:	4b98      	ldr	r3, [pc, #608]	; (c330 <STACK_SIZE+0x330>)
    c0ce:	4798      	blx	r3
    c0d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c0d4:	4298      	cmp	r0, r3
    c0d6:	d00a      	beq.n	c0ee <STACK_SIZE+0xee>
    UIP_STAT(++uip_stat.tcp.drop);
    c0d8:	4b94      	ldr	r3, [pc, #592]	; (c32c <STACK_SIZE+0x32c>)
    c0da:	8b5a      	ldrh	r2, [r3, #26]
    c0dc:	3201      	adds	r2, #1
    c0de:	835a      	strh	r2, [r3, #26]
    UIP_STAT(++uip_stat.tcp.chkerr);
    c0e0:	8c1a      	ldrh	r2, [r3, #32]
    c0e2:	3201      	adds	r2, #1
    c0e4:	841a      	strh	r2, [r3, #32]
    UIP_LOG("tcp: bad checksum.");
    c0e6:	4893      	ldr	r0, [pc, #588]	; (c334 <STACK_SIZE+0x334>)
    c0e8:	4b8e      	ldr	r3, [pc, #568]	; (c324 <STACK_SIZE+0x324>)
    c0ea:	4798      	blx	r3
    goto drop;
    c0ec:	e53a      	b.n	bb64 <uip_process+0x58>
    if(uip_connr->tcpstateflags != UIP_CLOSED &&
    c0ee:	4b92      	ldr	r3, [pc, #584]	; (c338 <STACK_SIZE+0x338>)
    c0f0:	7e5b      	ldrb	r3, [r3, #25]
    c0f2:	b12b      	cbz	r3, c100 <STACK_SIZE+0x100>
    c0f4:	4a8c      	ldr	r2, [pc, #560]	; (c328 <STACK_SIZE+0x328>)
    c0f6:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    c0f8:	4a8f      	ldr	r2, [pc, #572]	; (c338 <STACK_SIZE+0x338>)
    c0fa:	8892      	ldrh	r2, [r2, #4]
    c0fc:	4291      	cmp	r1, r2
    c0fe:	d05c      	beq.n	c1ba <STACK_SIZE+0x1ba>
  if((BUF->flags & TCP_CTL) != TCP_SYN) {
    c100:	4a89      	ldr	r2, [pc, #548]	; (c328 <STACK_SIZE+0x328>)
    c102:	f892 102f 	ldrb.w	r1, [r2, #47]	; 0x2f
    c106:	f001 023f 	and.w	r2, r1, #63	; 0x3f
    c10a:	2a02      	cmp	r2, #2
    c10c:	d07f      	beq.n	c20e <STACK_SIZE+0x20e>
  if(BUF->flags & TCP_RST) {
    c10e:	f011 0f04 	tst.w	r1, #4
    c112:	f47f ad27 	bne.w	bb64 <uip_process+0x58>
  UIP_STAT(++uip_stat.tcp.rst);
    c116:	4a85      	ldr	r2, [pc, #532]	; (c32c <STACK_SIZE+0x32c>)
    c118:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    c11a:	3301      	adds	r3, #1
    c11c:	8493      	strh	r3, [r2, #36]	; 0x24
  BUF->flags = TCP_RST | TCP_ACK;
    c11e:	4b82      	ldr	r3, [pc, #520]	; (c328 <STACK_SIZE+0x328>)
    c120:	2214      	movs	r2, #20
    c122:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  uip_len = UIP_IPTCPH_LEN;
    c126:	2128      	movs	r1, #40	; 0x28
    c128:	4a84      	ldr	r2, [pc, #528]	; (c33c <STACK_SIZE+0x33c>)
    c12a:	8011      	strh	r1, [r2, #0]
  BUF->tcpoffset = 5 << 4;
    c12c:	2250      	movs	r2, #80	; 0x50
    c12e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  c = BUF->seqno[3];
    c132:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
  BUF->seqno[3] = BUF->ackno[3];
    c136:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
    c13a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  c = BUF->seqno[2];
    c13e:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
  BUF->seqno[2] = BUF->ackno[2];
    c142:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
    c146:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  BUF->ackno[2] = c;
    c14a:	f883 102c 	strb.w	r1, [r3, #44]	; 0x2c
  c = BUF->seqno[1];
    c14e:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
  BUF->seqno[1] = BUF->ackno[1];
    c152:	f893 402b 	ldrb.w	r4, [r3, #43]	; 0x2b
    c156:	f883 4027 	strb.w	r4, [r3, #39]	; 0x27
  BUF->ackno[1] = c;
    c15a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  c = BUF->seqno[0];
    c15e:	f893 4026 	ldrb.w	r4, [r3, #38]	; 0x26
    c162:	4d77      	ldr	r5, [pc, #476]	; (c340 <STACK_SIZE+0x340>)
    c164:	70ac      	strb	r4, [r5, #2]
  BUF->seqno[0] = BUF->ackno[0];
    c166:	f893 502a 	ldrb.w	r5, [r3, #42]	; 0x2a
    c16a:	f883 5026 	strb.w	r5, [r3, #38]	; 0x26
  BUF->ackno[0] = c;
    c16e:	f883 402a 	strb.w	r4, [r3, #42]	; 0x2a
  if(++BUF->ackno[3] == 0) {
    c172:	3001      	adds	r0, #1
    c174:	b2c0      	uxtb	r0, r0
    c176:	f883 002d 	strb.w	r0, [r3, #45]	; 0x2d
    c17a:	b968      	cbnz	r0, c198 <STACK_SIZE+0x198>
    if(++BUF->ackno[2] == 0) {
    c17c:	1c4b      	adds	r3, r1, #1
    c17e:	b2db      	uxtb	r3, r3
    c180:	4969      	ldr	r1, [pc, #420]	; (c328 <STACK_SIZE+0x328>)
    c182:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    c186:	b93b      	cbnz	r3, c198 <STACK_SIZE+0x198>
      if(++BUF->ackno[1] == 0) {
    c188:	1c53      	adds	r3, r2, #1
    c18a:	b2db      	uxtb	r3, r3
    c18c:	f881 302b 	strb.w	r3, [r1, #43]	; 0x2b
    c190:	b913      	cbnz	r3, c198 <STACK_SIZE+0x198>
	++BUF->ackno[0];
    c192:	3401      	adds	r4, #1
    c194:	f881 402a 	strb.w	r4, [r1, #42]	; 0x2a
  tmp16 = BUF->srcport;
    c198:	4b63      	ldr	r3, [pc, #396]	; (c328 <STACK_SIZE+0x328>)
    c19a:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
    c19c:	4968      	ldr	r1, [pc, #416]	; (c340 <STACK_SIZE+0x340>)
    c19e:	818a      	strh	r2, [r1, #12]
  BUF->srcport = BUF->destport;
    c1a0:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    c1a2:	8459      	strh	r1, [r3, #34]	; 0x22
  BUF->destport = tmp16;
    c1a4:	849a      	strh	r2, [r3, #36]	; 0x24
  uip_ipaddr_copy(BUF->destipaddr, BUF->srcipaddr);
    c1a6:	8b5a      	ldrh	r2, [r3, #26]
    c1a8:	83da      	strh	r2, [r3, #30]
    c1aa:	8b9a      	ldrh	r2, [r3, #28]
    c1ac:	841a      	strh	r2, [r3, #32]
  uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
    c1ae:	4a65      	ldr	r2, [pc, #404]	; (c344 <STACK_SIZE+0x344>)
    c1b0:	8811      	ldrh	r1, [r2, #0]
    c1b2:	8359      	strh	r1, [r3, #26]
    c1b4:	8852      	ldrh	r2, [r2, #2]
    c1b6:	839a      	strh	r2, [r3, #28]
  goto tcp_send_noconn;
    c1b8:	e52a      	b.n	bc10 <uip_process+0x104>
       BUF->destport == uip_connr->lport &&
    c1ba:	4a5b      	ldr	r2, [pc, #364]	; (c328 <STACK_SIZE+0x328>)
    c1bc:	8c51      	ldrh	r1, [r2, #34]	; 0x22
    c1be:	4a5e      	ldr	r2, [pc, #376]	; (c338 <STACK_SIZE+0x338>)
    c1c0:	88d2      	ldrh	r2, [r2, #6]
    c1c2:	4291      	cmp	r1, r2
    c1c4:	d19c      	bne.n	c100 <STACK_SIZE+0x100>
       BUF->srcport == uip_connr->rport &&
    c1c6:	4a58      	ldr	r2, [pc, #352]	; (c328 <STACK_SIZE+0x328>)
    c1c8:	8b51      	ldrh	r1, [r2, #26]
    c1ca:	4a5b      	ldr	r2, [pc, #364]	; (c338 <STACK_SIZE+0x338>)
    c1cc:	8812      	ldrh	r2, [r2, #0]
    c1ce:	4291      	cmp	r1, r2
    c1d0:	d196      	bne.n	c100 <STACK_SIZE+0x100>
       uip_ipaddr_cmp(BUF->srcipaddr, uip_connr->ripaddr)) {
    c1d2:	4a55      	ldr	r2, [pc, #340]	; (c328 <STACK_SIZE+0x328>)
    c1d4:	8b91      	ldrh	r1, [r2, #28]
    c1d6:	4a58      	ldr	r2, [pc, #352]	; (c338 <STACK_SIZE+0x338>)
    c1d8:	8852      	ldrh	r2, [r2, #2]
    c1da:	4291      	cmp	r1, r2
    c1dc:	d190      	bne.n	c100 <STACK_SIZE+0x100>
  uip_conn = uip_connr;
    c1de:	4956      	ldr	r1, [pc, #344]	; (c338 <STACK_SIZE+0x338>)
    c1e0:	4a49      	ldr	r2, [pc, #292]	; (c308 <STACK_SIZE+0x308>)
    c1e2:	6011      	str	r1, [r2, #0]
  uip_flags = 0;
    c1e4:	2100      	movs	r1, #0
    c1e6:	4a49      	ldr	r2, [pc, #292]	; (c30c <STACK_SIZE+0x30c>)
    c1e8:	7011      	strb	r1, [r2, #0]
  if(BUF->flags & TCP_RST) {
    c1ea:	4a4f      	ldr	r2, [pc, #316]	; (c328 <STACK_SIZE+0x328>)
    c1ec:	f892 402f 	ldrb.w	r4, [r2, #47]	; 0x2f
    c1f0:	f014 0f04 	tst.w	r4, #4
    c1f4:	f000 80b0 	beq.w	c358 <STACK_SIZE+0x358>
    uip_connr->tcpstateflags = UIP_CLOSED;
    c1f8:	4b4f      	ldr	r3, [pc, #316]	; (c338 <STACK_SIZE+0x338>)
    c1fa:	7659      	strb	r1, [r3, #25]
    UIP_LOG("tcp: got reset, aborting connection.");
    c1fc:	4852      	ldr	r0, [pc, #328]	; (c348 <STACK_SIZE+0x348>)
    c1fe:	4b49      	ldr	r3, [pc, #292]	; (c324 <STACK_SIZE+0x324>)
    c200:	4798      	blx	r3
    uip_flags = UIP_ABORT;
    c202:	2220      	movs	r2, #32
    c204:	4b41      	ldr	r3, [pc, #260]	; (c30c <STACK_SIZE+0x30c>)
    c206:	701a      	strb	r2, [r3, #0]
    UIP_APPCALL();
    c208:	4b50      	ldr	r3, [pc, #320]	; (c34c <STACK_SIZE+0x34c>)
    c20a:	4798      	blx	r3
    goto drop;
    c20c:	e4aa      	b.n	bb64 <uip_process+0x58>
  tmp16 = BUF->destport;
    c20e:	4a46      	ldr	r2, [pc, #280]	; (c328 <STACK_SIZE+0x328>)
    c210:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    c212:	b295      	uxth	r5, r2
    c214:	484a      	ldr	r0, [pc, #296]	; (c340 <STACK_SIZE+0x340>)
    c216:	8182      	strh	r2, [r0, #12]
  for(c = 0; c < UIP_LISTENPORTS; ++c) {
    c218:	2600      	movs	r6, #0
    c21a:	7086      	strb	r6, [r0, #2]
    if(tmp16 == uip_listenports[c])
    c21c:	484c      	ldr	r0, [pc, #304]	; (c350 <STACK_SIZE+0x350>)
    c21e:	8800      	ldrh	r0, [r0, #0]
    c220:	42a8      	cmp	r0, r5
    c222:	d007      	beq.n	c234 <STACK_SIZE+0x234>
  for(c = 0; c < UIP_LISTENPORTS; ++c) {
    c224:	2201      	movs	r2, #1
    c226:	4b46      	ldr	r3, [pc, #280]	; (c340 <STACK_SIZE+0x340>)
    c228:	709a      	strb	r2, [r3, #2]
  UIP_STAT(++uip_stat.tcp.synrst);
    c22a:	4a40      	ldr	r2, [pc, #256]	; (c32c <STACK_SIZE+0x32c>)
    c22c:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
    c22e:	3301      	adds	r3, #1
    c230:	8553      	strh	r3, [r2, #42]	; 0x2a
    c232:	e76c      	b.n	c10e <STACK_SIZE+0x10e>
    if(uip_conns[c].tcpstateflags == UIP_CLOSED) {
    c234:	2b00      	cmp	r3, #0
    c236:	f000 82ce 	beq.w	c7d6 <STACK_SIZE+0x7d6>
    if(uip_conns[c].tcpstateflags == UIP_TIME_WAIT) {
    c23a:	2b07      	cmp	r3, #7
    c23c:	f000 82c8 	beq.w	c7d0 <STACK_SIZE+0x7d0>
  for(c = 0; c < UIP_CONNS; ++c) {
    c240:	2201      	movs	r2, #1
    c242:	4b3f      	ldr	r3, [pc, #252]	; (c340 <STACK_SIZE+0x340>)
    c244:	709a      	strb	r2, [r3, #2]
    UIP_STAT(++uip_stat.tcp.syndrop);
    c246:	4a39      	ldr	r2, [pc, #228]	; (c32c <STACK_SIZE+0x32c>)
    c248:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    c24a:	3301      	adds	r3, #1
    c24c:	8513      	strh	r3, [r2, #40]	; 0x28
    UIP_LOG("tcp: found no unused connections.");
    c24e:	4841      	ldr	r0, [pc, #260]	; (c354 <STACK_SIZE+0x354>)
    c250:	4b34      	ldr	r3, [pc, #208]	; (c324 <STACK_SIZE+0x324>)
    c252:	4798      	blx	r3
    goto drop;
    c254:	e486      	b.n	bb64 <uip_process+0x58>
    c256:	b10b      	cbz	r3, c25c <STACK_SIZE+0x25c>
    c258:	4b39      	ldr	r3, [pc, #228]	; (c340 <STACK_SIZE+0x340>)
    c25a:	709c      	strb	r4, [r3, #2]
    c25c:	4c36      	ldr	r4, [pc, #216]	; (c338 <STACK_SIZE+0x338>)
    c25e:	e03b      	b.n	c2d8 <STACK_SIZE+0x2d8>
	++c;
    c260:	3401      	adds	r4, #1
    c262:	b2e4      	uxtb	r4, r4
    c264:	e005      	b.n	c272 <STACK_SIZE+0x272>
	if(uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == 0) {
    c266:	4401      	add	r1, r0
    c268:	f891 1037 	ldrb.w	r1, [r1, #55]	; 0x37
    c26c:	b349      	cbz	r1, c2c2 <STACK_SIZE+0x2c2>
	c += uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c];
    c26e:	440c      	add	r4, r1
    c270:	b2e4      	uxtb	r4, r4
    c272:	4633      	mov	r3, r6
    for(c = 0; c < ((BUF->tcpoffset >> 4) - 5) << 2 ;) {
    c274:	4621      	mov	r1, r4
    c276:	4294      	cmp	r4, r2
    c278:	da28      	bge.n	c2cc <STACK_SIZE+0x2cc>
      opt = uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + c];
    c27a:	1905      	adds	r5, r0, r4
    c27c:	f895 5036 	ldrb.w	r5, [r5, #54]	; 0x36
      if(opt == TCP_OPT_END) {
    c280:	2d00      	cmp	r5, #0
    c282:	d0e8      	beq.n	c256 <STACK_SIZE+0x256>
      } else if(opt == TCP_OPT_NOOP) {
    c284:	2d01      	cmp	r5, #1
    c286:	d0eb      	beq.n	c260 <STACK_SIZE+0x260>
      } else if(opt == TCP_OPT_MSS &&
    c288:	2d02      	cmp	r5, #2
    c28a:	d1ec      	bne.n	c266 <STACK_SIZE+0x266>
		uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == TCP_OPT_MSS_LEN) {
    c28c:	1845      	adds	r5, r0, r1
      } else if(opt == TCP_OPT_MSS &&
    c28e:	f895 5037 	ldrb.w	r5, [r5, #55]	; 0x37
    c292:	2d04      	cmp	r5, #4
    c294:	d1e7      	bne.n	c266 <STACK_SIZE+0x266>
    c296:	b10b      	cbz	r3, c29c <STACK_SIZE+0x29c>
    c298:	4b29      	ldr	r3, [pc, #164]	; (c340 <STACK_SIZE+0x340>)
    c29a:	709c      	strb	r4, [r3, #2]
	tmp16 = ((u16_t)uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 2 + c] << 8) |
    c29c:	4b22      	ldr	r3, [pc, #136]	; (c328 <STACK_SIZE+0x328>)
    c29e:	4419      	add	r1, r3
    c2a0:	f891 2038 	ldrb.w	r2, [r1, #56]	; 0x38
	  (u16_t)uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN + 3 + c];
    c2a4:	f891 3039 	ldrb.w	r3, [r1, #57]	; 0x39
	tmp16 = ((u16_t)uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 2 + c] << 8) |
    c2a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    c2ac:	4a24      	ldr	r2, [pc, #144]	; (c340 <STACK_SIZE+0x340>)
    c2ae:	8193      	strh	r3, [r2, #12]
	uip_connr->initialmss = uip_connr->mss =
    c2b0:	f240 626e 	movw	r2, #1646	; 0x66e
    c2b4:	4293      	cmp	r3, r2
    c2b6:	bf28      	it	cs
    c2b8:	4613      	movcs	r3, r2
    c2ba:	4c1f      	ldr	r4, [pc, #124]	; (c338 <STACK_SIZE+0x338>)
    c2bc:	8263      	strh	r3, [r4, #18]
    c2be:	82a3      	strh	r3, [r4, #20]
	break;
    c2c0:	e00a      	b.n	c2d8 <STACK_SIZE+0x2d8>
    c2c2:	b10b      	cbz	r3, c2c8 <STACK_SIZE+0x2c8>
    c2c4:	4b1e      	ldr	r3, [pc, #120]	; (c340 <STACK_SIZE+0x340>)
    c2c6:	709c      	strb	r4, [r3, #2]
    c2c8:	4c1b      	ldr	r4, [pc, #108]	; (c338 <STACK_SIZE+0x338>)
    c2ca:	e005      	b.n	c2d8 <STACK_SIZE+0x2d8>
    c2cc:	b10b      	cbz	r3, c2d2 <STACK_SIZE+0x2d2>
    c2ce:	4b1c      	ldr	r3, [pc, #112]	; (c340 <STACK_SIZE+0x340>)
    c2d0:	709c      	strb	r4, [r3, #2]
    c2d2:	4c19      	ldr	r4, [pc, #100]	; (c338 <STACK_SIZE+0x338>)
    c2d4:	e000      	b.n	c2d8 <STACK_SIZE+0x2d8>
    c2d6:	4c18      	ldr	r4, [pc, #96]	; (c338 <STACK_SIZE+0x338>)
  BUF->flags = TCP_SYN | TCP_ACK;
    c2d8:	4b13      	ldr	r3, [pc, #76]	; (c328 <STACK_SIZE+0x328>)
    c2da:	2212      	movs	r2, #18
    c2dc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  BUF->optdata[0] = TCP_OPT_MSS;
    c2e0:	2202      	movs	r2, #2
    c2e2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  BUF->optdata[1] = TCP_OPT_MSS_LEN;
    c2e6:	2204      	movs	r2, #4
    c2e8:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
  BUF->optdata[2] = (UIP_TCP_MSS) / 256;
    c2ec:	2206      	movs	r2, #6
    c2ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  BUF->optdata[3] = (UIP_TCP_MSS) & 255;
    c2f2:	226e      	movs	r2, #110	; 0x6e
    c2f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  uip_len = UIP_IPTCPH_LEN + TCP_OPT_MSS_LEN;
    c2f8:	212c      	movs	r1, #44	; 0x2c
    c2fa:	4a10      	ldr	r2, [pc, #64]	; (c33c <STACK_SIZE+0x33c>)
    c2fc:	8011      	strh	r1, [r2, #0]
  BUF->tcpoffset = ((UIP_TCPH_LEN + TCP_OPT_MSS_LEN) / 4) << 4;
    c2fe:	2260      	movs	r2, #96	; 0x60
    c300:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  goto tcp_send;
    c304:	e451      	b.n	bbaa <uip_process+0x9e>
    c306:	bf00      	nop
    c308:	20008598 	.word	0x20008598
    c30c:	2000858c 	.word	0x2000858c
    c310:	2000867e 	.word	0x2000867e
    c314:	20008584 	.word	0x20008584
    c318:	20008cfa 	.word	0x20008cfa
    c31c:	000091c1 	.word	0x000091c1
    c320:	000114d0 	.word	0x000114d0
    c324:	0000d9f1 	.word	0x0000d9f1
    c328:	20008654 	.word	0x20008654
    c32c:	20008618 	.word	0x20008618
    c330:	0000b9ed 	.word	0x0000b9ed
    c334:	000114f4 	.word	0x000114f4
    c338:	2000859c 	.word	0x2000859c
    c33c:	20008580 	.word	0x20008580
    c340:	200072bc 	.word	0x200072bc
    c344:	20008650 	.word	0x20008650
    c348:	00011508 	.word	0x00011508
    c34c:	0000d9dd 	.word	0x0000d9dd
    c350:	20008610 	.word	0x20008610
    c354:	00011578 	.word	0x00011578
  c = (BUF->tcpoffset >> 4) << 2;
    c358:	4aa7      	ldr	r2, [pc, #668]	; (c5f8 <STACK_SIZE+0x5f8>)
    c35a:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
    c35e:	0912      	lsrs	r2, r2, #4
    c360:	0091      	lsls	r1, r2, #2
    c362:	4aa6      	ldr	r2, [pc, #664]	; (c5fc <STACK_SIZE+0x5fc>)
    c364:	7091      	strb	r1, [r2, #2]
  uip_len = uip_len - c - UIP_IPH_LEN;
    c366:	48a6      	ldr	r0, [pc, #664]	; (c600 <STACK_SIZE+0x600>)
    c368:	8802      	ldrh	r2, [r0, #0]
    c36a:	3a14      	subs	r2, #20
    c36c:	1a52      	subs	r2, r2, r1
    c36e:	b292      	uxth	r2, r2
    c370:	8002      	strh	r2, [r0, #0]
    c372:	f003 000f 	and.w	r0, r3, #15
  if(!(((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_SYN_SENT) &&
    c376:	2802      	cmp	r0, #2
    c378:	d103      	bne.n	c382 <STACK_SIZE+0x382>
    c37a:	f004 013f 	and.w	r1, r4, #63	; 0x3f
    c37e:	2912      	cmp	r1, #18
    c380:	d011      	beq.n	c3a6 <STACK_SIZE+0x3a6>
    if((uip_len > 0 || ((BUF->flags & (TCP_SYN | TCP_FIN)) != 0)) &&
    c382:	b912      	cbnz	r2, c38a <STACK_SIZE+0x38a>
    c384:	f014 0f03 	tst.w	r4, #3
    c388:	d00d      	beq.n	c3a6 <STACK_SIZE+0x3a6>
    c38a:	4a9b      	ldr	r2, [pc, #620]	; (c5f8 <STACK_SIZE+0x5f8>)
    c38c:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
    c38e:	4a9d      	ldr	r2, [pc, #628]	; (c604 <STACK_SIZE+0x604>)
    c390:	8912      	ldrh	r2, [r2, #8]
    c392:	4291      	cmp	r1, r2
    c394:	f040 81ad 	bne.w	c6f2 <STACK_SIZE+0x6f2>
	BUF->seqno[2] != uip_connr->rcv_nxt[2] ||
    c398:	4a97      	ldr	r2, [pc, #604]	; (c5f8 <STACK_SIZE+0x5f8>)
    c39a:	8d11      	ldrh	r1, [r2, #40]	; 0x28
    c39c:	4a99      	ldr	r2, [pc, #612]	; (c604 <STACK_SIZE+0x604>)
    c39e:	8952      	ldrh	r2, [r2, #10]
    c3a0:	4291      	cmp	r1, r2
    c3a2:	f040 81a6 	bne.w	c6f2 <STACK_SIZE+0x6f2>
  if((BUF->flags & TCP_ACK) && uip_outstanding(uip_connr)) {
    c3a6:	f014 0f10 	tst.w	r4, #16
    c3aa:	f000 81f5 	beq.w	c798 <STACK_SIZE+0x798>
    c3ae:	4a95      	ldr	r2, [pc, #596]	; (c604 <STACK_SIZE+0x604>)
    c3b0:	8a11      	ldrh	r1, [r2, #16]
    c3b2:	2900      	cmp	r1, #0
    c3b4:	f000 81f0 	beq.w	c798 <STACK_SIZE+0x798>
    uip_add32(uip_connr->snd_nxt, uip_connr->len);
    c3b8:	f102 000c 	add.w	r0, r2, #12
    c3bc:	4b92      	ldr	r3, [pc, #584]	; (c608 <STACK_SIZE+0x608>)
    c3be:	4798      	blx	r3
    if(BUF->ackno[0] == uip_acc32[0] &&
    c3c0:	4b8d      	ldr	r3, [pc, #564]	; (c5f8 <STACK_SIZE+0x5f8>)
    c3c2:	f893 402a 	ldrb.w	r4, [r3, #42]	; 0x2a
    c3c6:	4b91      	ldr	r3, [pc, #580]	; (c60c <STACK_SIZE+0x60c>)
    c3c8:	781b      	ldrb	r3, [r3, #0]
    c3ca:	42a3      	cmp	r3, r4
    c3cc:	d158      	bne.n	c480 <STACK_SIZE+0x480>
       BUF->ackno[1] == uip_acc32[1] &&
    c3ce:	4b8a      	ldr	r3, [pc, #552]	; (c5f8 <STACK_SIZE+0x5f8>)
    c3d0:	f893 002b 	ldrb.w	r0, [r3, #43]	; 0x2b
    c3d4:	4b8d      	ldr	r3, [pc, #564]	; (c60c <STACK_SIZE+0x60c>)
    if(BUF->ackno[0] == uip_acc32[0] &&
    c3d6:	785b      	ldrb	r3, [r3, #1]
    c3d8:	4283      	cmp	r3, r0
    c3da:	d151      	bne.n	c480 <STACK_SIZE+0x480>
       BUF->ackno[2] == uip_acc32[2] &&
    c3dc:	4b86      	ldr	r3, [pc, #536]	; (c5f8 <STACK_SIZE+0x5f8>)
    c3de:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
    c3e2:	4b8a      	ldr	r3, [pc, #552]	; (c60c <STACK_SIZE+0x60c>)
       BUF->ackno[1] == uip_acc32[1] &&
    c3e4:	789b      	ldrb	r3, [r3, #2]
    c3e6:	428b      	cmp	r3, r1
    c3e8:	d14a      	bne.n	c480 <STACK_SIZE+0x480>
       BUF->ackno[3] == uip_acc32[3]) {
    c3ea:	4b83      	ldr	r3, [pc, #524]	; (c5f8 <STACK_SIZE+0x5f8>)
    c3ec:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
    c3f0:	4b86      	ldr	r3, [pc, #536]	; (c60c <STACK_SIZE+0x60c>)
       BUF->ackno[2] == uip_acc32[2] &&
    c3f2:	78db      	ldrb	r3, [r3, #3]
    c3f4:	4293      	cmp	r3, r2
    c3f6:	d143      	bne.n	c480 <STACK_SIZE+0x480>
      uip_connr->snd_nxt[0] = uip_acc32[0];
    c3f8:	4b82      	ldr	r3, [pc, #520]	; (c604 <STACK_SIZE+0x604>)
    c3fa:	731c      	strb	r4, [r3, #12]
      uip_connr->snd_nxt[1] = uip_acc32[1];
    c3fc:	7358      	strb	r0, [r3, #13]
      uip_connr->snd_nxt[2] = uip_acc32[2];
    c3fe:	7399      	strb	r1, [r3, #14]
      uip_connr->snd_nxt[3] = uip_acc32[3];
    c400:	73da      	strb	r2, [r3, #15]
      if(uip_connr->nrtx == 0) {
    c402:	7edb      	ldrb	r3, [r3, #27]
    c404:	b9cb      	cbnz	r3, c43a <STACK_SIZE+0x43a>
	m = m - (uip_connr->sa >> 3);
    c406:	497f      	ldr	r1, [pc, #508]	; (c604 <STACK_SIZE+0x604>)
    c408:	7d8a      	ldrb	r2, [r1, #22]
	m = uip_connr->rto - uip_connr->timer;
    c40a:	7e0b      	ldrb	r3, [r1, #24]
    c40c:	7e88      	ldrb	r0, [r1, #26]
    c40e:	1a1b      	subs	r3, r3, r0
	m = m - (uip_connr->sa >> 3);
    c410:	eba3 03d2 	sub.w	r3, r3, r2, lsr #3
    c414:	b2db      	uxtb	r3, r3
    c416:	b258      	sxtb	r0, r3
	uip_connr->sa += m;
    c418:	441a      	add	r2, r3
    c41a:	b2d2      	uxtb	r2, r2
    c41c:	758a      	strb	r2, [r1, #22]
	if(m < 0) {
    c41e:	2800      	cmp	r0, #0
	  m = -m;
    c420:	bfbc      	itt	lt
    c422:	425b      	neglt	r3, r3
    c424:	b258      	sxtblt	r0, r3
	m = m - (uip_connr->sv >> 2);
    c426:	4977      	ldr	r1, [pc, #476]	; (c604 <STACK_SIZE+0x604>)
    c428:	7dcb      	ldrb	r3, [r1, #23]
	uip_connr->sv += m;
    c42a:	eba3 0393 	sub.w	r3, r3, r3, lsr #2
    c42e:	4403      	add	r3, r0
    c430:	b2db      	uxtb	r3, r3
    c432:	75cb      	strb	r3, [r1, #23]
	uip_connr->rto = (uip_connr->sa >> 3) + uip_connr->sv;
    c434:	eb03 03d2 	add.w	r3, r3, r2, lsr #3
    c438:	760b      	strb	r3, [r1, #24]
      uip_flags = UIP_ACKDATA;
    c43a:	2201      	movs	r2, #1
    c43c:	4b74      	ldr	r3, [pc, #464]	; (c610 <STACK_SIZE+0x610>)
    c43e:	701a      	strb	r2, [r3, #0]
      uip_connr->timer = uip_connr->rto;
    c440:	4b70      	ldr	r3, [pc, #448]	; (c604 <STACK_SIZE+0x604>)
    c442:	7e1a      	ldrb	r2, [r3, #24]
    c444:	769a      	strb	r2, [r3, #26]
      uip_connr->len = 0;
    c446:	2200      	movs	r2, #0
    c448:	821a      	strh	r2, [r3, #16]
  switch(uip_connr->tcpstateflags & UIP_TS_MASK) {
    c44a:	7e5b      	ldrb	r3, [r3, #25]
    c44c:	f003 020f 	and.w	r2, r3, #15
    c450:	3a01      	subs	r2, #1
    c452:	2a07      	cmp	r2, #7
    c454:	f63f ab86 	bhi.w	bb64 <uip_process+0x58>
    c458:	a101      	add	r1, pc, #4	; (adr r1, c460 <STACK_SIZE+0x460>)
    c45a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    c45e:	bf00      	nop
    c460:	0000c4c5 	.word	0x0000c4c5
    c464:	0000bb65 	.word	0x0000bb65
    c468:	0000c4f5 	.word	0x0000c4f5
    c46c:	0000c6b7 	.word	0x0000c6b7
    c470:	0000c72d 	.word	0x0000c72d
    c474:	0000c76d 	.word	0x0000c76d
    c478:	0000c6f3 	.word	0x0000c6f3
    c47c:	0000c697 	.word	0x0000c697
    c480:	4b60      	ldr	r3, [pc, #384]	; (c604 <STACK_SIZE+0x604>)
    c482:	7e5b      	ldrb	r3, [r3, #25]
    c484:	f003 020f 	and.w	r2, r3, #15
    c488:	3a01      	subs	r2, #1
    c48a:	2a07      	cmp	r2, #7
    c48c:	f63f ab6a 	bhi.w	bb64 <uip_process+0x58>
    c490:	a101      	add	r1, pc, #4	; (adr r1, c498 <STACK_SIZE+0x498>)
    c492:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    c496:	bf00      	nop
    c498:	0000c4b9 	.word	0x0000c4b9
    c49c:	0000bb65 	.word	0x0000bb65
    c4a0:	0000c4f5 	.word	0x0000c4f5
    c4a4:	0000c6b7 	.word	0x0000c6b7
    c4a8:	0000c72d 	.word	0x0000c72d
    c4ac:	0000c76d 	.word	0x0000c76d
    c4b0:	0000c6f3 	.word	0x0000c6f3
    c4b4:	0000c697 	.word	0x0000c697
    if(uip_flags & UIP_ACKDATA) {
    c4b8:	4b55      	ldr	r3, [pc, #340]	; (c610 <STACK_SIZE+0x610>)
    c4ba:	781b      	ldrb	r3, [r3, #0]
    c4bc:	f013 0f01 	tst.w	r3, #1
    c4c0:	f43f ab50 	beq.w	bb64 <uip_process+0x58>
      uip_connr->tcpstateflags = UIP_ESTABLISHED;
    c4c4:	4b4f      	ldr	r3, [pc, #316]	; (c604 <STACK_SIZE+0x604>)
    c4c6:	2203      	movs	r2, #3
    c4c8:	765a      	strb	r2, [r3, #25]
      uip_flags = UIP_CONNECTED;
    c4ca:	2140      	movs	r1, #64	; 0x40
    c4cc:	4a50      	ldr	r2, [pc, #320]	; (c610 <STACK_SIZE+0x610>)
    c4ce:	7011      	strb	r1, [r2, #0]
      uip_connr->len = 0;
    c4d0:	2200      	movs	r2, #0
    c4d2:	821a      	strh	r2, [r3, #16]
      if(uip_len > 0) {
    c4d4:	4b4a      	ldr	r3, [pc, #296]	; (c600 <STACK_SIZE+0x600>)
    c4d6:	8818      	ldrh	r0, [r3, #0]
    c4d8:	b120      	cbz	r0, c4e4 <STACK_SIZE+0x4e4>
        uip_flags |= UIP_NEWDATA;
    c4da:	2242      	movs	r2, #66	; 0x42
    c4dc:	4b4c      	ldr	r3, [pc, #304]	; (c610 <STACK_SIZE+0x610>)
    c4de:	701a      	strb	r2, [r3, #0]
        uip_add_rcv_nxt(uip_len);
    c4e0:	4b4c      	ldr	r3, [pc, #304]	; (c614 <STACK_SIZE+0x614>)
    c4e2:	4798      	blx	r3
      uip_slen = 0;
    c4e4:	2200      	movs	r2, #0
    c4e6:	4b4c      	ldr	r3, [pc, #304]	; (c618 <STACK_SIZE+0x618>)
    c4e8:	801a      	strh	r2, [r3, #0]
      UIP_APPCALL();
    c4ea:	4b4c      	ldr	r3, [pc, #304]	; (c61c <STACK_SIZE+0x61c>)
    c4ec:	4798      	blx	r3
      goto appsend;
    c4ee:	4c45      	ldr	r4, [pc, #276]	; (c604 <STACK_SIZE+0x604>)
    c4f0:	f7ff bb46 	b.w	bb80 <uip_process+0x74>
    if(BUF->flags & TCP_FIN && !(uip_connr->tcpstateflags & UIP_STOPPED)) {
    c4f4:	4a40      	ldr	r2, [pc, #256]	; (c5f8 <STACK_SIZE+0x5f8>)
    c4f6:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
    c4fa:	f012 0f01 	tst.w	r2, #1
    c4fe:	d027      	beq.n	c550 <STACK_SIZE+0x550>
    c500:	f013 0f10 	tst.w	r3, #16
    c504:	d124      	bne.n	c550 <STACK_SIZE+0x550>
      if(uip_outstanding(uip_connr)) {
    c506:	4b3f      	ldr	r3, [pc, #252]	; (c604 <STACK_SIZE+0x604>)
    c508:	8a1b      	ldrh	r3, [r3, #16]
    c50a:	2b00      	cmp	r3, #0
    c50c:	f47f ab2a 	bne.w	bb64 <uip_process+0x58>
      uip_add_rcv_nxt(1 + uip_len);
    c510:	4c3b      	ldr	r4, [pc, #236]	; (c600 <STACK_SIZE+0x600>)
    c512:	8820      	ldrh	r0, [r4, #0]
    c514:	3001      	adds	r0, #1
    c516:	b280      	uxth	r0, r0
    c518:	4b3e      	ldr	r3, [pc, #248]	; (c614 <STACK_SIZE+0x614>)
    c51a:	4798      	blx	r3
      uip_flags |= UIP_CLOSE;
    c51c:	4a3c      	ldr	r2, [pc, #240]	; (c610 <STACK_SIZE+0x610>)
    c51e:	7813      	ldrb	r3, [r2, #0]
    c520:	f043 0110 	orr.w	r1, r3, #16
    c524:	7011      	strb	r1, [r2, #0]
      if(uip_len > 0) {
    c526:	8822      	ldrh	r2, [r4, #0]
    c528:	b11a      	cbz	r2, c532 <STACK_SIZE+0x532>
	uip_flags |= UIP_NEWDATA;
    c52a:	f043 0312 	orr.w	r3, r3, #18
    c52e:	4a38      	ldr	r2, [pc, #224]	; (c610 <STACK_SIZE+0x610>)
    c530:	7013      	strb	r3, [r2, #0]
      UIP_APPCALL();
    c532:	4b3a      	ldr	r3, [pc, #232]	; (c61c <STACK_SIZE+0x61c>)
    c534:	4798      	blx	r3
      uip_connr->len = 1;
    c536:	4c33      	ldr	r4, [pc, #204]	; (c604 <STACK_SIZE+0x604>)
    c538:	2301      	movs	r3, #1
    c53a:	8223      	strh	r3, [r4, #16]
      uip_connr->tcpstateflags = UIP_LAST_ACK;
    c53c:	2308      	movs	r3, #8
    c53e:	7663      	strb	r3, [r4, #25]
      uip_connr->nrtx = 0;
    c540:	2300      	movs	r3, #0
    c542:	76e3      	strb	r3, [r4, #27]
      BUF->flags = TCP_FIN | TCP_ACK;
    c544:	2211      	movs	r2, #17
    c546:	4b2c      	ldr	r3, [pc, #176]	; (c5f8 <STACK_SIZE+0x5f8>)
    c548:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
      goto tcp_send_nodata;
    c54c:	f7ff bb26 	b.w	bb9c <uip_process+0x90>
    if((BUF->flags & TCP_URG) != 0) {
    c550:	f012 0f20 	tst.w	r2, #32
    c554:	d00f      	beq.n	c576 <STACK_SIZE+0x576>
      uip_appdata = ((char *)uip_appdata) + ((BUF->urgp[0] << 8) | BUF->urgp[1]);
    c556:	4928      	ldr	r1, [pc, #160]	; (c5f8 <STACK_SIZE+0x5f8>)
    c558:	f891 2034 	ldrb.w	r2, [r1, #52]	; 0x34
    c55c:	0212      	lsls	r2, r2, #8
    c55e:	f891 4035 	ldrb.w	r4, [r1, #53]	; 0x35
    c562:	482f      	ldr	r0, [pc, #188]	; (c620 <STACK_SIZE+0x620>)
    c564:	ea44 0502 	orr.w	r5, r4, r2
    c568:	6801      	ldr	r1, [r0, #0]
    c56a:	4429      	add	r1, r5
    c56c:	6001      	str	r1, [r0, #0]
      uip_len -= (BUF->urgp[0] << 8) | BUF->urgp[1];
    c56e:	4824      	ldr	r0, [pc, #144]	; (c600 <STACK_SIZE+0x600>)
    c570:	8801      	ldrh	r1, [r0, #0]
    c572:	1b4a      	subs	r2, r1, r5
    c574:	8002      	strh	r2, [r0, #0]
    if(uip_len > 0 && !(uip_connr->tcpstateflags & UIP_STOPPED)) {
    c576:	4a22      	ldr	r2, [pc, #136]	; (c600 <STACK_SIZE+0x600>)
    c578:	8810      	ldrh	r0, [r2, #0]
    c57a:	b148      	cbz	r0, c590 <STACK_SIZE+0x590>
    c57c:	f013 0f10 	tst.w	r3, #16
    c580:	d106      	bne.n	c590 <STACK_SIZE+0x590>
      uip_flags |= UIP_NEWDATA;
    c582:	4a23      	ldr	r2, [pc, #140]	; (c610 <STACK_SIZE+0x610>)
    c584:	7813      	ldrb	r3, [r2, #0]
    c586:	f043 0302 	orr.w	r3, r3, #2
    c58a:	7013      	strb	r3, [r2, #0]
      uip_add_rcv_nxt(uip_len);
    c58c:	4b21      	ldr	r3, [pc, #132]	; (c614 <STACK_SIZE+0x614>)
    c58e:	4798      	blx	r3
    tmp16 = ((u16_t)BUF->wnd[0] << 8) + (u16_t)BUF->wnd[1];
    c590:	4b19      	ldr	r3, [pc, #100]	; (c5f8 <STACK_SIZE+0x5f8>)
    c592:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    c596:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
    c59a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    c59e:	b29b      	uxth	r3, r3
    c5a0:	4a16      	ldr	r2, [pc, #88]	; (c5fc <STACK_SIZE+0x5fc>)
    c5a2:	8193      	strh	r3, [r2, #12]
    if(tmp16 > uip_connr->initialmss ||
    c5a4:	4a17      	ldr	r2, [pc, #92]	; (c604 <STACK_SIZE+0x604>)
    c5a6:	8a92      	ldrh	r2, [r2, #20]
    c5a8:	4293      	cmp	r3, r2
    c5aa:	d800      	bhi.n	c5ae <STACK_SIZE+0x5ae>
    c5ac:	b90b      	cbnz	r3, c5b2 <STACK_SIZE+0x5b2>
      tmp16 = uip_connr->initialmss;
    c5ae:	4b13      	ldr	r3, [pc, #76]	; (c5fc <STACK_SIZE+0x5fc>)
    c5b0:	819a      	strh	r2, [r3, #12]
    uip_connr->mss = tmp16;
    c5b2:	4b12      	ldr	r3, [pc, #72]	; (c5fc <STACK_SIZE+0x5fc>)
    c5b4:	899a      	ldrh	r2, [r3, #12]
    c5b6:	4b13      	ldr	r3, [pc, #76]	; (c604 <STACK_SIZE+0x604>)
    c5b8:	825a      	strh	r2, [r3, #18]
    if(uip_flags & (UIP_NEWDATA | UIP_ACKDATA)) {
    c5ba:	4b15      	ldr	r3, [pc, #84]	; (c610 <STACK_SIZE+0x610>)
    c5bc:	781b      	ldrb	r3, [r3, #0]
    c5be:	f013 0f03 	tst.w	r3, #3
    c5c2:	f43f aacf 	beq.w	bb64 <uip_process+0x58>
      uip_slen = 0;
    c5c6:	2200      	movs	r2, #0
    c5c8:	4b13      	ldr	r3, [pc, #76]	; (c618 <STACK_SIZE+0x618>)
    c5ca:	801a      	strh	r2, [r3, #0]
      UIP_APPCALL();
    c5cc:	4b13      	ldr	r3, [pc, #76]	; (c61c <STACK_SIZE+0x61c>)
    c5ce:	4798      	blx	r3
    c5d0:	4c0c      	ldr	r4, [pc, #48]	; (c604 <STACK_SIZE+0x604>)
    c5d2:	f7ff bad5 	b.w	bb80 <uip_process+0x74>
      if(uip_flags & UIP_CLOSE) {
    c5d6:	f013 0f10 	tst.w	r3, #16
    c5da:	d023      	beq.n	c624 <STACK_SIZE+0x624>
	uip_slen = 0;
    c5dc:	2300      	movs	r3, #0
    c5de:	4a0e      	ldr	r2, [pc, #56]	; (c618 <STACK_SIZE+0x618>)
    c5e0:	8013      	strh	r3, [r2, #0]
	uip_connr->len = 1;
    c5e2:	2201      	movs	r2, #1
    c5e4:	8222      	strh	r2, [r4, #16]
	uip_connr->tcpstateflags = UIP_FIN_WAIT_1;
    c5e6:	2204      	movs	r2, #4
    c5e8:	7662      	strb	r2, [r4, #25]
	uip_connr->nrtx = 0;
    c5ea:	76e3      	strb	r3, [r4, #27]
	BUF->flags = TCP_FIN | TCP_ACK;
    c5ec:	2211      	movs	r2, #17
    c5ee:	4b02      	ldr	r3, [pc, #8]	; (c5f8 <STACK_SIZE+0x5f8>)
    c5f0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	goto tcp_send_nodata;
    c5f4:	f7ff bad2 	b.w	bb9c <uip_process+0x90>
    c5f8:	20008654 	.word	0x20008654
    c5fc:	200072bc 	.word	0x200072bc
    c600:	20008580 	.word	0x20008580
    c604:	2000859c 	.word	0x2000859c
    c608:	0000b925 	.word	0x0000b925
    c60c:	20008588 	.word	0x20008588
    c610:	2000858c 	.word	0x2000858c
    c614:	0000b981 	.word	0x0000b981
    c618:	20008cfa 	.word	0x20008cfa
    c61c:	0000d9dd 	.word	0x0000d9dd
    c620:	20008594 	.word	0x20008594
      if(uip_slen > 0) {
    c624:	4a8d      	ldr	r2, [pc, #564]	; (c85c <STACK_SIZE+0x85c>)
    c626:	8812      	ldrh	r2, [r2, #0]
    c628:	b162      	cbz	r2, c644 <STACK_SIZE+0x644>
	if((uip_flags & UIP_ACKDATA) != 0) {
    c62a:	f013 0f01 	tst.w	r3, #1
    c62e:	d01d      	beq.n	c66c <STACK_SIZE+0x66c>
	  uip_connr->len = 0;
    c630:	2300      	movs	r3, #0
    c632:	8223      	strh	r3, [r4, #16]
	  if(uip_slen > uip_connr->mss) {
    c634:	8a63      	ldrh	r3, [r4, #18]
    c636:	429a      	cmp	r2, r3
	    uip_slen = uip_connr->mss;
    c638:	bf84      	itt	hi
    c63a:	4a88      	ldrhi	r2, [pc, #544]	; (c85c <STACK_SIZE+0x85c>)
    c63c:	8013      	strhhi	r3, [r2, #0]
	  uip_connr->len = uip_slen;
    c63e:	4b87      	ldr	r3, [pc, #540]	; (c85c <STACK_SIZE+0x85c>)
    c640:	881b      	ldrh	r3, [r3, #0]
    c642:	8223      	strh	r3, [r4, #16]
      uip_connr->nrtx = 0;
    c644:	2300      	movs	r3, #0
    c646:	76e3      	strb	r3, [r4, #27]
      uip_appdata = uip_sappdata;
    c648:	4b85      	ldr	r3, [pc, #532]	; (c860 <STACK_SIZE+0x860>)
    c64a:	681a      	ldr	r2, [r3, #0]
    c64c:	4b85      	ldr	r3, [pc, #532]	; (c864 <STACK_SIZE+0x864>)
    c64e:	601a      	str	r2, [r3, #0]
      if(uip_slen > 0 && uip_connr->len > 0) {
    c650:	4b82      	ldr	r3, [pc, #520]	; (c85c <STACK_SIZE+0x85c>)
    c652:	881b      	ldrh	r3, [r3, #0]
    c654:	b183      	cbz	r3, c678 <STACK_SIZE+0x678>
    c656:	8a23      	ldrh	r3, [r4, #16]
    c658:	b173      	cbz	r3, c678 <STACK_SIZE+0x678>
	uip_len = uip_connr->len + UIP_TCPIP_HLEN;
    c65a:	3328      	adds	r3, #40	; 0x28
    c65c:	4a82      	ldr	r2, [pc, #520]	; (c868 <STACK_SIZE+0x868>)
    c65e:	8013      	strh	r3, [r2, #0]
	BUF->flags = TCP_ACK | TCP_PSH;
    c660:	2218      	movs	r2, #24
    c662:	4b82      	ldr	r3, [pc, #520]	; (c86c <STACK_SIZE+0x86c>)
    c664:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	goto tcp_send_noopts;
    c668:	f7ff ba9b 	b.w	bba2 <uip_process+0x96>
	if(uip_connr->len == 0) {
    c66c:	8a23      	ldrh	r3, [r4, #16]
    c66e:	2b00      	cmp	r3, #0
    c670:	d0e0      	beq.n	c634 <STACK_SIZE+0x634>
	  uip_slen = uip_connr->len;
    c672:	4a7a      	ldr	r2, [pc, #488]	; (c85c <STACK_SIZE+0x85c>)
    c674:	8013      	strh	r3, [r2, #0]
    c676:	e7e5      	b.n	c644 <STACK_SIZE+0x644>
      if(uip_flags & UIP_NEWDATA) {
    c678:	4b7d      	ldr	r3, [pc, #500]	; (c870 <STACK_SIZE+0x870>)
    c67a:	781b      	ldrb	r3, [r3, #0]
    c67c:	f013 0f02 	tst.w	r3, #2
    c680:	f43f aa70 	beq.w	bb64 <uip_process+0x58>
	uip_len = UIP_TCPIP_HLEN;
    c684:	2228      	movs	r2, #40	; 0x28
    c686:	4b78      	ldr	r3, [pc, #480]	; (c868 <STACK_SIZE+0x868>)
    c688:	801a      	strh	r2, [r3, #0]
	BUF->flags = TCP_ACK;
    c68a:	2210      	movs	r2, #16
    c68c:	4b77      	ldr	r3, [pc, #476]	; (c86c <STACK_SIZE+0x86c>)
    c68e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	goto tcp_send_noopts;
    c692:	f7ff ba86 	b.w	bba2 <uip_process+0x96>
    if(uip_flags & UIP_ACKDATA) {
    c696:	4b76      	ldr	r3, [pc, #472]	; (c870 <STACK_SIZE+0x870>)
    c698:	781b      	ldrb	r3, [r3, #0]
    c69a:	f013 0f01 	tst.w	r3, #1
    c69e:	f43f aa61 	beq.w	bb64 <uip_process+0x58>
      uip_connr->tcpstateflags = UIP_CLOSED;
    c6a2:	2200      	movs	r2, #0
    c6a4:	4b73      	ldr	r3, [pc, #460]	; (c874 <STACK_SIZE+0x874>)
    c6a6:	765a      	strb	r2, [r3, #25]
      uip_flags = UIP_CLOSE;
    c6a8:	2210      	movs	r2, #16
    c6aa:	4b71      	ldr	r3, [pc, #452]	; (c870 <STACK_SIZE+0x870>)
    c6ac:	701a      	strb	r2, [r3, #0]
      UIP_APPCALL();
    c6ae:	4b72      	ldr	r3, [pc, #456]	; (c878 <STACK_SIZE+0x878>)
    c6b0:	4798      	blx	r3
    c6b2:	f7ff ba57 	b.w	bb64 <uip_process+0x58>
    if(uip_len > 0) {
    c6b6:	4b6c      	ldr	r3, [pc, #432]	; (c868 <STACK_SIZE+0x868>)
    c6b8:	8818      	ldrh	r0, [r3, #0]
    c6ba:	b108      	cbz	r0, c6c0 <STACK_SIZE+0x6c0>
      uip_add_rcv_nxt(uip_len);
    c6bc:	4b6f      	ldr	r3, [pc, #444]	; (c87c <STACK_SIZE+0x87c>)
    c6be:	4798      	blx	r3
    if(BUF->flags & TCP_FIN) {
    c6c0:	4b6a      	ldr	r3, [pc, #424]	; (c86c <STACK_SIZE+0x86c>)
    c6c2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
    c6c6:	f013 0f01 	tst.w	r3, #1
    c6ca:	d01d      	beq.n	c708 <STACK_SIZE+0x708>
      if(uip_flags & UIP_ACKDATA) {
    c6cc:	4b68      	ldr	r3, [pc, #416]	; (c870 <STACK_SIZE+0x870>)
    c6ce:	781b      	ldrb	r3, [r3, #0]
    c6d0:	f013 0f01 	tst.w	r3, #1
    c6d4:	d014      	beq.n	c700 <STACK_SIZE+0x700>
	uip_connr->tcpstateflags = UIP_TIME_WAIT;
    c6d6:	4b67      	ldr	r3, [pc, #412]	; (c874 <STACK_SIZE+0x874>)
    c6d8:	2207      	movs	r2, #7
    c6da:	765a      	strb	r2, [r3, #25]
	uip_connr->timer = 0;
    c6dc:	2200      	movs	r2, #0
    c6de:	769a      	strb	r2, [r3, #26]
	uip_connr->len = 0;
    c6e0:	821a      	strh	r2, [r3, #16]
      uip_add_rcv_nxt(1);
    c6e2:	2001      	movs	r0, #1
    c6e4:	4b65      	ldr	r3, [pc, #404]	; (c87c <STACK_SIZE+0x87c>)
    c6e6:	4798      	blx	r3
      uip_flags = UIP_CLOSE;
    c6e8:	2210      	movs	r2, #16
    c6ea:	4b61      	ldr	r3, [pc, #388]	; (c870 <STACK_SIZE+0x870>)
    c6ec:	701a      	strb	r2, [r3, #0]
      UIP_APPCALL();
    c6ee:	4b62      	ldr	r3, [pc, #392]	; (c878 <STACK_SIZE+0x878>)
    c6f0:	4798      	blx	r3
  BUF->flags = TCP_ACK;
    c6f2:	2210      	movs	r2, #16
    c6f4:	4b5d      	ldr	r3, [pc, #372]	; (c86c <STACK_SIZE+0x86c>)
    c6f6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    c6fa:	4c5e      	ldr	r4, [pc, #376]	; (c874 <STACK_SIZE+0x874>)
    c6fc:	f7ff ba4e 	b.w	bb9c <uip_process+0x90>
	uip_connr->tcpstateflags = UIP_CLOSING;
    c700:	2206      	movs	r2, #6
    c702:	4b5c      	ldr	r3, [pc, #368]	; (c874 <STACK_SIZE+0x874>)
    c704:	765a      	strb	r2, [r3, #25]
    c706:	e7ec      	b.n	c6e2 <STACK_SIZE+0x6e2>
    } else if(uip_flags & UIP_ACKDATA) {
    c708:	4b59      	ldr	r3, [pc, #356]	; (c870 <STACK_SIZE+0x870>)
    c70a:	781b      	ldrb	r3, [r3, #0]
    c70c:	f013 0f01 	tst.w	r3, #1
    c710:	d006      	beq.n	c720 <STACK_SIZE+0x720>
      uip_connr->tcpstateflags = UIP_FIN_WAIT_2;
    c712:	4b58      	ldr	r3, [pc, #352]	; (c874 <STACK_SIZE+0x874>)
    c714:	2205      	movs	r2, #5
    c716:	765a      	strb	r2, [r3, #25]
      uip_connr->len = 0;
    c718:	2200      	movs	r2, #0
    c71a:	821a      	strh	r2, [r3, #16]
      goto drop;
    c71c:	f7ff ba22 	b.w	bb64 <uip_process+0x58>
    if(uip_len > 0) {
    c720:	4b51      	ldr	r3, [pc, #324]	; (c868 <STACK_SIZE+0x868>)
    c722:	881b      	ldrh	r3, [r3, #0]
    c724:	2b00      	cmp	r3, #0
    c726:	d1e4      	bne.n	c6f2 <STACK_SIZE+0x6f2>
    c728:	f7ff ba1c 	b.w	bb64 <uip_process+0x58>
    if(uip_len > 0) {
    c72c:	4b4e      	ldr	r3, [pc, #312]	; (c868 <STACK_SIZE+0x868>)
    c72e:	8818      	ldrh	r0, [r3, #0]
    c730:	2800      	cmp	r0, #0
    c732:	d045      	beq.n	c7c0 <STACK_SIZE+0x7c0>
      uip_add_rcv_nxt(uip_len);
    c734:	4b51      	ldr	r3, [pc, #324]	; (c87c <STACK_SIZE+0x87c>)
    c736:	4798      	blx	r3
    if(BUF->flags & TCP_FIN) {
    c738:	4b4c      	ldr	r3, [pc, #304]	; (c86c <STACK_SIZE+0x86c>)
    c73a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
    c73e:	f013 0f01 	tst.w	r3, #1
    c742:	d00d      	beq.n	c760 <STACK_SIZE+0x760>
      uip_connr->tcpstateflags = UIP_TIME_WAIT;
    c744:	4b4b      	ldr	r3, [pc, #300]	; (c874 <STACK_SIZE+0x874>)
    c746:	2207      	movs	r2, #7
    c748:	765a      	strb	r2, [r3, #25]
      uip_connr->timer = 0;
    c74a:	2200      	movs	r2, #0
    c74c:	769a      	strb	r2, [r3, #26]
      uip_add_rcv_nxt(1);
    c74e:	2001      	movs	r0, #1
    c750:	4b4a      	ldr	r3, [pc, #296]	; (c87c <STACK_SIZE+0x87c>)
    c752:	4798      	blx	r3
      uip_flags = UIP_CLOSE;
    c754:	2210      	movs	r2, #16
    c756:	4b46      	ldr	r3, [pc, #280]	; (c870 <STACK_SIZE+0x870>)
    c758:	701a      	strb	r2, [r3, #0]
      UIP_APPCALL();
    c75a:	4b47      	ldr	r3, [pc, #284]	; (c878 <STACK_SIZE+0x878>)
    c75c:	4798      	blx	r3
      goto tcp_send_ack;
    c75e:	e7c8      	b.n	c6f2 <STACK_SIZE+0x6f2>
    if(uip_len > 0) {
    c760:	4b41      	ldr	r3, [pc, #260]	; (c868 <STACK_SIZE+0x868>)
    c762:	881b      	ldrh	r3, [r3, #0]
    c764:	2b00      	cmp	r3, #0
    c766:	d1c4      	bne.n	c6f2 <STACK_SIZE+0x6f2>
    c768:	f7ff b9fc 	b.w	bb64 <uip_process+0x58>
    if(uip_flags & UIP_ACKDATA) {
    c76c:	4b40      	ldr	r3, [pc, #256]	; (c870 <STACK_SIZE+0x870>)
    c76e:	781b      	ldrb	r3, [r3, #0]
    c770:	f013 0f01 	tst.w	r3, #1
    c774:	f43f a9f6 	beq.w	bb64 <uip_process+0x58>
      uip_connr->tcpstateflags = UIP_TIME_WAIT;
    c778:	4b3e      	ldr	r3, [pc, #248]	; (c874 <STACK_SIZE+0x874>)
    c77a:	2207      	movs	r2, #7
    c77c:	765a      	strb	r2, [r3, #25]
      uip_connr->timer = 0;
    c77e:	2200      	movs	r2, #0
    c780:	769a      	strb	r2, [r3, #26]
    c782:	f7ff b9ef 	b.w	bb64 <uip_process+0x58>
    BUF->wnd[0] = ((UIP_RECEIVE_WINDOW) >> 8);
    c786:	4b39      	ldr	r3, [pc, #228]	; (c86c <STACK_SIZE+0x86c>)
    c788:	2206      	movs	r2, #6
    c78a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    BUF->wnd[1] = ((UIP_RECEIVE_WINDOW) & 0xff);
    c78e:	226e      	movs	r2, #110	; 0x6e
    c790:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    c794:	f7ff ba3c 	b.w	bc10 <uip_process+0x104>
  switch(uip_connr->tcpstateflags & UIP_TS_MASK) {
    c798:	1ec2      	subs	r2, r0, #3
    c79a:	2a05      	cmp	r2, #5
    c79c:	f63f a9e2 	bhi.w	bb64 <uip_process+0x58>
    c7a0:	a101      	add	r1, pc, #4	; (adr r1, c7a8 <STACK_SIZE+0x7a8>)
    c7a2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    c7a6:	bf00      	nop
    c7a8:	0000c4f5 	.word	0x0000c4f5
    c7ac:	0000c6b7 	.word	0x0000c6b7
    c7b0:	0000c72d 	.word	0x0000c72d
    c7b4:	0000c76d 	.word	0x0000c76d
    c7b8:	0000c6f3 	.word	0x0000c6f3
    c7bc:	0000c697 	.word	0x0000c697
    if(BUF->flags & TCP_FIN) {
    c7c0:	4b2a      	ldr	r3, [pc, #168]	; (c86c <STACK_SIZE+0x86c>)
    c7c2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
    c7c6:	f013 0f01 	tst.w	r3, #1
    c7ca:	f43f a9cb 	beq.w	bb64 <uip_process+0x58>
    c7ce:	e7b9      	b.n	c744 <STACK_SIZE+0x744>
  for(c = 0; c < UIP_CONNS; ++c) {
    c7d0:	2101      	movs	r1, #1
    c7d2:	4b2b      	ldr	r3, [pc, #172]	; (c880 <STACK_SIZE+0x880>)
    c7d4:	7099      	strb	r1, [r3, #2]
  uip_conn = uip_connr;
    c7d6:	4b27      	ldr	r3, [pc, #156]	; (c874 <STACK_SIZE+0x874>)
    c7d8:	492a      	ldr	r1, [pc, #168]	; (c884 <STACK_SIZE+0x884>)
    c7da:	600b      	str	r3, [r1, #0]
  uip_connr->rto = uip_connr->timer = UIP_RTO;
    c7dc:	2103      	movs	r1, #3
    c7de:	7699      	strb	r1, [r3, #26]
    c7e0:	7619      	strb	r1, [r3, #24]
  uip_connr->sa = 0;
    c7e2:	2100      	movs	r1, #0
    c7e4:	7599      	strb	r1, [r3, #22]
  uip_connr->sv = 4;
    c7e6:	2004      	movs	r0, #4
    c7e8:	75d8      	strb	r0, [r3, #23]
  uip_connr->nrtx = 0;
    c7ea:	76d9      	strb	r1, [r3, #27]
  uip_connr->lport = BUF->destport;
    c7ec:	809a      	strh	r2, [r3, #4]
  uip_connr->rport = BUF->srcport;
    c7ee:	4d1f      	ldr	r5, [pc, #124]	; (c86c <STACK_SIZE+0x86c>)
    c7f0:	f895 2022 	ldrb.w	r2, [r5, #34]	; 0x22
    c7f4:	f895 1023 	ldrb.w	r1, [r5, #35]	; 0x23
    c7f8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    c7fc:	80da      	strh	r2, [r3, #6]
  uip_ipaddr_copy(uip_connr->ripaddr, BUF->srcipaddr);
    c7fe:	8b6a      	ldrh	r2, [r5, #26]
    c800:	801a      	strh	r2, [r3, #0]
    c802:	8baa      	ldrh	r2, [r5, #28]
    c804:	805a      	strh	r2, [r3, #2]
  uip_connr->tcpstateflags = UIP_SYN_RCVD;
    c806:	2001      	movs	r0, #1
    c808:	7658      	strb	r0, [r3, #25]
  uip_connr->snd_nxt[0] = iss[0];
    c80a:	4a1d      	ldr	r2, [pc, #116]	; (c880 <STACK_SIZE+0x880>)
    c80c:	7a11      	ldrb	r1, [r2, #8]
    c80e:	7319      	strb	r1, [r3, #12]
  uip_connr->snd_nxt[1] = iss[1];
    c810:	7a51      	ldrb	r1, [r2, #9]
    c812:	7359      	strb	r1, [r3, #13]
  uip_connr->snd_nxt[2] = iss[2];
    c814:	7a91      	ldrb	r1, [r2, #10]
    c816:	7399      	strb	r1, [r3, #14]
  uip_connr->snd_nxt[3] = iss[3];
    c818:	7ad2      	ldrb	r2, [r2, #11]
    c81a:	73da      	strb	r2, [r3, #15]
  uip_connr->len = 1;
    c81c:	8218      	strh	r0, [r3, #16]
  uip_connr->rcv_nxt[3] = BUF->seqno[3];
    c81e:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
    c822:	72da      	strb	r2, [r3, #11]
  uip_connr->rcv_nxt[2] = BUF->seqno[2];
    c824:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
    c828:	729a      	strb	r2, [r3, #10]
  uip_connr->rcv_nxt[1] = BUF->seqno[1];
    c82a:	f895 2027 	ldrb.w	r2, [r5, #39]	; 0x27
    c82e:	725a      	strb	r2, [r3, #9]
  uip_connr->rcv_nxt[0] = BUF->seqno[0];
    c830:	f895 2026 	ldrb.w	r2, [r5, #38]	; 0x26
    c834:	721a      	strb	r2, [r3, #8]
  uip_add_rcv_nxt(1);
    c836:	4b11      	ldr	r3, [pc, #68]	; (c87c <STACK_SIZE+0x87c>)
    c838:	4798      	blx	r3
  if((BUF->tcpoffset & 0xf0) > 0x50) {
    c83a:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
    c83e:	f002 03f0 	and.w	r3, r2, #240	; 0xf0
    c842:	2b50      	cmp	r3, #80	; 0x50
    c844:	f77f ad47 	ble.w	c2d6 <STACK_SIZE+0x2d6>
    for(c = 0; c < ((BUF->tcpoffset >> 4) - 5) << 2 ;) {
    c848:	2300      	movs	r3, #0
    c84a:	490d      	ldr	r1, [pc, #52]	; (c880 <STACK_SIZE+0x880>)
    c84c:	708b      	strb	r3, [r1, #2]
    c84e:	0912      	lsrs	r2, r2, #4
    c850:	3a05      	subs	r2, #5
    c852:	0092      	lsls	r2, r2, #2
      opt = uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + c];
    c854:	4628      	mov	r0, r5
    c856:	2601      	movs	r6, #1
    for(c = 0; c < ((BUF->tcpoffset >> 4) - 5) << 2 ;) {
    c858:	e50c      	b.n	c274 <STACK_SIZE+0x274>
    c85a:	bf00      	nop
    c85c:	20008cfa 	.word	0x20008cfa
    c860:	20008584 	.word	0x20008584
    c864:	20008594 	.word	0x20008594
    c868:	20008580 	.word	0x20008580
    c86c:	20008654 	.word	0x20008654
    c870:	2000858c 	.word	0x2000858c
    c874:	2000859c 	.word	0x2000859c
    c878:	0000d9dd 	.word	0x0000d9dd
    c87c:	0000b981 	.word	0x0000b981
    c880:	200072bc 	.word	0x200072bc
    c884:	20008598 	.word	0x20008598

0000c888 <htons>:
  return HTONS(val);
    c888:	0a03      	lsrs	r3, r0, #8
    c88a:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
}
    c88e:	b280      	uxth	r0, r0
    c890:	4770      	bx	lr
	...

0000c894 <uip_send>:
/*---------------------------------------------------------------------------*/
void
uip_send(const void *data, int len)
{
  if(len > 0) {
    c894:	1e0a      	subs	r2, r1, #0
    c896:	dd0c      	ble.n	c8b2 <uip_send+0x1e>
{
    c898:	b508      	push	{r3, lr}
    uip_slen = len;
    c89a:	4b06      	ldr	r3, [pc, #24]	; (c8b4 <uip_send+0x20>)
    c89c:	801a      	strh	r2, [r3, #0]
    if(data != uip_sappdata) {
    c89e:	4b06      	ldr	r3, [pc, #24]	; (c8b8 <uip_send+0x24>)
    c8a0:	681b      	ldr	r3, [r3, #0]
    c8a2:	4283      	cmp	r3, r0
    c8a4:	d004      	beq.n	c8b0 <uip_send+0x1c>
    c8a6:	4601      	mov	r1, r0
      memcpy(uip_sappdata, (data), uip_slen);
    c8a8:	b292      	uxth	r2, r2
    c8aa:	4618      	mov	r0, r3
    c8ac:	4b03      	ldr	r3, [pc, #12]	; (c8bc <uip_send+0x28>)
    c8ae:	4798      	blx	r3
    c8b0:	bd08      	pop	{r3, pc}
    c8b2:	4770      	bx	lr
    c8b4:	20008cfa 	.word	0x20008cfa
    c8b8:	20008584 	.word	0x20008584
    c8bc:	0000da6b 	.word	0x0000da6b

0000c8c0 <uip_arp_update>:

}
/*-----------------------------------------------------------------------------------*/
static void
uip_arp_update(u16_t *ipaddr, struct uip_eth_addr *ethaddr)
{
    c8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c8c4:	b083      	sub	sp, #12
  register struct arp_entry *tabptr;
  /* Walk through the ARP mapping table and try to find an entry to
     update. If none is found, the IP -> MAC address mapping is
     inserted in the ARP table. */
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    c8c6:	2500      	movs	r5, #0
    c8c8:	4c55      	ldr	r4, [pc, #340]	; (ca20 <uip_arp_update+0x160>)
    c8ca:	f804 5b04 	strb.w	r5, [r4], #4
    c8ce:	4622      	mov	r2, r4
    c8d0:	462b      	mov	r3, r5
    c8d2:	46ae      	mov	lr, r5
    c8d4:	f04f 0801 	mov.w	r8, #1
    c8d8:	e009      	b.n	c8ee <uip_arp_update+0x2e>
    c8da:	4a51      	ldr	r2, [pc, #324]	; (ca20 <uip_arp_update+0x160>)
    c8dc:	7015      	strb	r5, [r2, #0]
    c8de:	e017      	b.n	c910 <uip_arp_update+0x50>
    c8e0:	1c5d      	adds	r5, r3, #1
    c8e2:	b2ed      	uxtb	r5, r5
    c8e4:	3301      	adds	r3, #1
    c8e6:	320c      	adds	r2, #12
    c8e8:	46c6      	mov	lr, r8
    c8ea:	2b08      	cmp	r3, #8
    c8ec:	d023      	beq.n	c936 <uip_arp_update+0x76>

    tabptr = &arp_table[i];
    c8ee:	469c      	mov	ip, r3
    /* Only check those entries that are actually in use. */
    if(tabptr->ipaddr[0] != 0 &&
    c8f0:	8816      	ldrh	r6, [r2, #0]
    c8f2:	2e00      	cmp	r6, #0
    c8f4:	d0f4      	beq.n	c8e0 <uip_arp_update+0x20>
       tabptr->ipaddr[1] != 0) {
    c8f6:	8857      	ldrh	r7, [r2, #2]
    if(tabptr->ipaddr[0] != 0 &&
    c8f8:	2f00      	cmp	r7, #0
    c8fa:	d0f1      	beq.n	c8e0 <uip_arp_update+0x20>

      /* Check if the source IP address of the incoming packet matches
         the IP address in this ARP table entry. */
      if(ipaddr[0] == tabptr->ipaddr[0] &&
    c8fc:	f8b0 9000 	ldrh.w	r9, [r0]
    c900:	45b1      	cmp	r9, r6
    c902:	d1ed      	bne.n	c8e0 <uip_arp_update+0x20>
    c904:	8846      	ldrh	r6, [r0, #2]
    c906:	42be      	cmp	r6, r7
    c908:	d1ea      	bne.n	c8e0 <uip_arp_update+0x20>
    c90a:	f1be 0f00 	cmp.w	lr, #0
    c90e:	d1e4      	bne.n	c8da <uip_arp_update+0x1a>
	 ipaddr[1] == tabptr->ipaddr[1]) {
	 
	/* An old entry found, update this and return. */
	memcpy(tabptr->ethaddr.addr, ethaddr->addr, 6);
    c910:	4a43      	ldr	r2, [pc, #268]	; (ca20 <uip_arp_update+0x160>)
    c912:	1d14      	adds	r4, r2, #4
    c914:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    c918:	009b      	lsls	r3, r3, #2
    c91a:	3304      	adds	r3, #4
    c91c:	18e5      	adds	r5, r4, r3
    c91e:	6808      	ldr	r0, [r1, #0]
    c920:	50e0      	str	r0, [r4, r3]
    c922:	888b      	ldrh	r3, [r1, #4]
    c924:	80ab      	strh	r3, [r5, #4]
	tabptr->time = arptime;
    c926:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
    c92a:	eb02 038c 	add.w	r3, r2, ip, lsl #2
    c92e:	f892 2064 	ldrb.w	r2, [r2, #100]	; 0x64
    c932:	739a      	strb	r2, [r3, #14]

	return;
    c934:	e035      	b.n	c9a2 <uip_arp_update+0xe2>

  /* If we get here, no existing ARP table entry was found, so we
     create one. */

  /* First, we try to find an unused entry in the ARP table. */
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    c936:	2300      	movs	r3, #0
    c938:	4a39      	ldr	r2, [pc, #228]	; (ca20 <uip_arp_update+0x160>)
    c93a:	7013      	strb	r3, [r2, #0]
    c93c:	4622      	mov	r2, r4
    c93e:	461d      	mov	r5, r3
    c940:	469e      	mov	lr, r3
    c942:	461f      	mov	r7, r3
    c944:	f04f 0c01 	mov.w	ip, #1
    c948:	e00a      	b.n	c960 <uip_arp_update+0xa0>
    c94a:	4a35      	ldr	r2, [pc, #212]	; (ca20 <uip_arp_update+0x160>)
    c94c:	7017      	strb	r7, [r2, #0]
    c94e:	e011      	b.n	c974 <uip_arp_update+0xb4>
    c950:	3301      	adds	r3, #1
    c952:	b2df      	uxtb	r7, r3
    c954:	1c6e      	adds	r6, r5, #1
    c956:	320c      	adds	r2, #12
    c958:	46e6      	mov	lr, ip
    c95a:	2e08      	cmp	r6, #8
    c95c:	d00c      	beq.n	c978 <uip_arp_update+0xb8>
    c95e:	4635      	mov	r5, r6
    c960:	b2eb      	uxtb	r3, r5
    tabptr = &arp_table[i];
    if(tabptr->ipaddr[0] == 0 &&
    c962:	8816      	ldrh	r6, [r2, #0]
    c964:	2e00      	cmp	r6, #0
    c966:	d1f3      	bne.n	c950 <uip_arp_update+0x90>
    c968:	8856      	ldrh	r6, [r2, #2]
    c96a:	2e00      	cmp	r6, #0
    c96c:	d1f0      	bne.n	c950 <uip_arp_update+0x90>
    c96e:	f1be 0f00 	cmp.w	lr, #0
    c972:	d1ea      	bne.n	c94a <uip_arp_update+0x8a>
    c974:	461f      	mov	r7, r3
    c976:	e001      	b.n	c97c <uip_arp_update+0xbc>
    c978:	4b29      	ldr	r3, [pc, #164]	; (ca20 <uip_arp_update+0x160>)
    c97a:	701f      	strb	r7, [r3, #0]
    }
  }

  /* If no unused entry is found, we try to find the oldest entry and
     throw it away. */
  if(i == UIP_ARPTAB_SIZE) {
    c97c:	2f08      	cmp	r7, #8
    c97e:	d013      	beq.n	c9a8 <uip_arp_update+0xe8>
    tabptr = &arp_table[i];
    c980:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    c984:	4b27      	ldr	r3, [pc, #156]	; (ca24 <uip_arp_update+0x164>)
    c986:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    tabptr = &arp_table[i];
  }

  /* Now, i is the ARP table entry which we will fill with the new
     information. */
  memcpy(tabptr->ipaddr, ipaddr, 4);
    c98a:	6802      	ldr	r2, [r0, #0]
    c98c:	462b      	mov	r3, r5
    c98e:	f843 2b04 	str.w	r2, [r3], #4
  memcpy(tabptr->ethaddr.addr, ethaddr->addr, 6);
    c992:	6808      	ldr	r0, [r1, #0]
    c994:	6068      	str	r0, [r5, #4]
    c996:	888a      	ldrh	r2, [r1, #4]
    c998:	809a      	strh	r2, [r3, #4]
  tabptr->time = arptime;
    c99a:	4b21      	ldr	r3, [pc, #132]	; (ca20 <uip_arp_update+0x160>)
    c99c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
    c9a0:	72ab      	strb	r3, [r5, #10]
}
    c9a2:	b003      	add	sp, #12
    c9a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmpage = 0;
    c9a8:	4b1d      	ldr	r3, [pc, #116]	; (ca20 <uip_arp_update+0x160>)
    c9aa:	2200      	movs	r2, #0
    c9ac:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    c = 0;
    c9b0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      if(arptime - tabptr->time > tmpage) {
    c9b4:	f893 9064 	ldrb.w	r9, [r3, #100]	; 0x64
    c9b8:	46ce      	mov	lr, r9
    c9ba:	4615      	mov	r5, r2
    c9bc:	4693      	mov	fp, r2
    c9be:	4692      	mov	sl, r2
    c9c0:	4694      	mov	ip, r2
	tmpage = arptime - tabptr->time;
    c9c2:	f04f 0801 	mov.w	r8, #1
    c9c6:	f8cd 8004 	str.w	r8, [sp, #4]
    c9ca:	e003      	b.n	c9d4 <uip_arp_update+0x114>
    c9cc:	3501      	adds	r5, #1
    c9ce:	340c      	adds	r4, #12
    for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    c9d0:	2d08      	cmp	r5, #8
    c9d2:	d00d      	beq.n	c9f0 <uip_arp_update+0x130>
    c9d4:	b2ef      	uxtb	r7, r5
      if(arptime - tabptr->time > tmpage) {
    c9d6:	7aa3      	ldrb	r3, [r4, #10]
    c9d8:	ebae 0603 	sub.w	r6, lr, r3
    c9dc:	4296      	cmp	r6, r2
    c9de:	ddf5      	ble.n	c9cc <uip_arp_update+0x10c>
	tmpage = arptime - tabptr->time;
    c9e0:	eba9 0303 	sub.w	r3, r9, r3
    c9e4:	b2da      	uxtb	r2, r3
	c = i;
    c9e6:	46ba      	mov	sl, r7
	tmpage = arptime - tabptr->time;
    c9e8:	46c3      	mov	fp, r8
    c9ea:	f8dd c004 	ldr.w	ip, [sp, #4]
    c9ee:	e7ed      	b.n	c9cc <uip_arp_update+0x10c>
    c9f0:	f1bc 0f00 	cmp.w	ip, #0
    c9f4:	d10f      	bne.n	ca16 <uip_arp_update+0x156>
    c9f6:	f1bb 0f00 	cmp.w	fp, #0
    c9fa:	d002      	beq.n	ca02 <uip_arp_update+0x142>
    c9fc:	4b08      	ldr	r3, [pc, #32]	; (ca20 <uip_arp_update+0x160>)
    c9fe:	f883 a066 	strb.w	sl, [r3, #102]	; 0x66
    i = c;
    ca02:	4d07      	ldr	r5, [pc, #28]	; (ca20 <uip_arp_update+0x160>)
    ca04:	f895 3066 	ldrb.w	r3, [r5, #102]	; 0x66
    ca08:	f805 3b04 	strb.w	r3, [r5], #4
    tabptr = &arp_table[i];
    ca0c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    ca10:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    ca14:	e7b9      	b.n	c98a <uip_arp_update+0xca>
    ca16:	4b02      	ldr	r3, [pc, #8]	; (ca20 <uip_arp_update+0x160>)
    ca18:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    ca1c:	e7eb      	b.n	c9f6 <uip_arp_update+0x136>
    ca1e:	bf00      	nop
    ca20:	200072d4 	.word	0x200072d4
    ca24:	200072d8 	.word	0x200072d8

0000ca28 <uip_arp_timer>:
{
    ca28:	b4f0      	push	{r4, r5, r6, r7}
  ++arptime;
    ca2a:	4a10      	ldr	r2, [pc, #64]	; (ca6c <uip_arp_timer+0x44>)
    ca2c:	f892 6064 	ldrb.w	r6, [r2, #100]	; 0x64
    ca30:	3601      	adds	r6, #1
    ca32:	b2f6      	uxtb	r6, r6
    ca34:	f882 6064 	strb.w	r6, [r2, #100]	; 0x64
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    ca38:	2300      	movs	r3, #0
    ca3a:	f802 3b04 	strb.w	r3, [r2], #4
      memset(tabptr->ipaddr, 0, 4);
    ca3e:	461f      	mov	r7, r3
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    ca40:	4d0a      	ldr	r5, [pc, #40]	; (ca6c <uip_arp_timer+0x44>)
    ca42:	e005      	b.n	ca50 <uip_arp_timer+0x28>
    ca44:	3301      	adds	r3, #1
    ca46:	b2db      	uxtb	r3, r3
    ca48:	702b      	strb	r3, [r5, #0]
    ca4a:	320c      	adds	r2, #12
    ca4c:	2b08      	cmp	r3, #8
    ca4e:	d00b      	beq.n	ca68 <uip_arp_timer+0x40>
    if((tabptr->ipaddr[0] | tabptr->ipaddr[1]) != 0 &&
    ca50:	8811      	ldrh	r1, [r2, #0]
    ca52:	8850      	ldrh	r0, [r2, #2]
    ca54:	4301      	orrs	r1, r0
    ca56:	b289      	uxth	r1, r1
    ca58:	2900      	cmp	r1, #0
    ca5a:	d0f3      	beq.n	ca44 <uip_arp_timer+0x1c>
       arptime - tabptr->time >= UIP_ARP_MAXAGE) {
    ca5c:	7a91      	ldrb	r1, [r2, #10]
    ca5e:	1a71      	subs	r1, r6, r1
    if((tabptr->ipaddr[0] | tabptr->ipaddr[1]) != 0 &&
    ca60:	2977      	cmp	r1, #119	; 0x77
      memset(tabptr->ipaddr, 0, 4);
    ca62:	bfc8      	it	gt
    ca64:	6017      	strgt	r7, [r2, #0]
    ca66:	e7ed      	b.n	ca44 <uip_arp_timer+0x1c>
}
    ca68:	bcf0      	pop	{r4, r5, r6, r7}
    ca6a:	4770      	bx	lr
    ca6c:	200072d4 	.word	0x200072d4

0000ca70 <uip_arp_arpin>:
/*-----------------------------------------------------------------------------------*/
void
uip_arp_arpin(void)
{
  
  if(uip_len < sizeof(struct arp_hdr)) {
    ca70:	4b33      	ldr	r3, [pc, #204]	; (cb40 <uip_arp_arpin+0xd0>)
    ca72:	881b      	ldrh	r3, [r3, #0]
    ca74:	2b29      	cmp	r3, #41	; 0x29
    ca76:	d90c      	bls.n	ca92 <uip_arp_arpin+0x22>
{
    ca78:	b510      	push	{r4, lr}
    uip_len = 0;
    return;
  }
  uip_len = 0;
    ca7a:	2200      	movs	r2, #0
    ca7c:	4b30      	ldr	r3, [pc, #192]	; (cb40 <uip_arp_arpin+0xd0>)
    ca7e:	801a      	strh	r2, [r3, #0]
  
  switch(BUF->opcode) {
    ca80:	4b30      	ldr	r3, [pc, #192]	; (cb44 <uip_arp_arpin+0xd4>)
    ca82:	8a9b      	ldrh	r3, [r3, #20]
    ca84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    ca88:	d007      	beq.n	ca9a <uip_arp_arpin+0x2a>
    ca8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    ca8e:	d044      	beq.n	cb1a <uip_arp_arpin+0xaa>
    ca90:	bd10      	pop	{r4, pc}
    uip_len = 0;
    ca92:	2200      	movs	r2, #0
    ca94:	4b2a      	ldr	r3, [pc, #168]	; (cb40 <uip_arp_arpin+0xd0>)
    ca96:	801a      	strh	r2, [r3, #0]
    return;
    ca98:	4770      	bx	lr
  case HTONS(ARP_REQUEST):
    /* ARP request. If it asked for our address, we send out a
       reply. */
    if(uip_ipaddr_cmp(BUF->dipaddr, uip_hostaddr)) {
    ca9a:	4b2a      	ldr	r3, [pc, #168]	; (cb44 <uip_arp_arpin+0xd4>)
    ca9c:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    ca9e:	4b2a      	ldr	r3, [pc, #168]	; (cb48 <uip_arp_arpin+0xd8>)
    caa0:	881b      	ldrh	r3, [r3, #0]
    caa2:	429a      	cmp	r2, r3
    caa4:	d000      	beq.n	caa8 <uip_arp_arpin+0x38>
    caa6:	bd10      	pop	{r4, pc}
    caa8:	4b26      	ldr	r3, [pc, #152]	; (cb44 <uip_arp_arpin+0xd4>)
    caaa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    caac:	4b26      	ldr	r3, [pc, #152]	; (cb48 <uip_arp_arpin+0xd8>)
    caae:	885b      	ldrh	r3, [r3, #2]
    cab0:	429a      	cmp	r2, r3
    cab2:	d1f8      	bne.n	caa6 <uip_arp_arpin+0x36>
      /* First, we register the one who made the request in our ARP
	 table, since it is likely that we will do more communication
	 with this host in the future. */
      uip_arp_update(BUF->sipaddr, &BUF->shwaddr);
    cab4:	4c25      	ldr	r4, [pc, #148]	; (cb4c <uip_arp_arpin+0xdc>)
    cab6:	4621      	mov	r1, r4
    cab8:	1da0      	adds	r0, r4, #6
    caba:	4b25      	ldr	r3, [pc, #148]	; (cb50 <uip_arp_arpin+0xe0>)
    cabc:	4798      	blx	r3
      
      /* The reply opcode is 2. */
      BUF->opcode = HTONS(2);
    cabe:	2200      	movs	r2, #0
    cac0:	f804 2c02 	strb.w	r2, [r4, #-2]
    cac4:	2202      	movs	r2, #2
    cac6:	f804 2c01 	strb.w	r2, [r4, #-1]

      memcpy(BUF->dhwaddr.addr, BUF->shwaddr.addr, 6);
    caca:	6821      	ldr	r1, [r4, #0]
    cacc:	f8c4 100a 	str.w	r1, [r4, #10]
    cad0:	88a1      	ldrh	r1, [r4, #4]
    cad2:	81e1      	strh	r1, [r4, #14]
      memcpy(BUF->shwaddr.addr, uip_ethaddr.addr, 6);
    cad4:	491f      	ldr	r1, [pc, #124]	; (cb54 <uip_arp_arpin+0xe4>)
    cad6:	6808      	ldr	r0, [r1, #0]
    cad8:	6020      	str	r0, [r4, #0]
    cada:	8889      	ldrh	r1, [r1, #4]
    cadc:	80a1      	strh	r1, [r4, #4]
      memcpy(BUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
    cade:	f844 0c10 	str.w	r0, [r4, #-16]
    cae2:	f824 1c0c 	strh.w	r1, [r4, #-12]
      memcpy(BUF->ethhdr.dest.addr, BUF->dhwaddr.addr, 6);
    cae6:	f8d4 100a 	ldr.w	r1, [r4, #10]
    caea:	f844 1c16 	str.w	r1, [r4, #-22]
    caee:	89e2      	ldrh	r2, [r4, #14]
    caf0:	f824 2c12 	strh.w	r2, [r4, #-18]
      
      BUF->dipaddr[0] = BUF->sipaddr[0];
    caf4:	88e2      	ldrh	r2, [r4, #6]
    caf6:	8222      	strh	r2, [r4, #16]
      BUF->dipaddr[1] = BUF->sipaddr[1];
    caf8:	8922      	ldrh	r2, [r4, #8]
    cafa:	8262      	strh	r2, [r4, #18]
      BUF->sipaddr[0] = uip_hostaddr[0];
    cafc:	4a12      	ldr	r2, [pc, #72]	; (cb48 <uip_arp_arpin+0xd8>)
    cafe:	8811      	ldrh	r1, [r2, #0]
    cb00:	80e1      	strh	r1, [r4, #6]
      BUF->sipaddr[1] = uip_hostaddr[1];
    cb02:	8852      	ldrh	r2, [r2, #2]
    cb04:	8122      	strh	r2, [r4, #8]

      BUF->ethhdr.type = HTONS(UIP_ETHTYPE_ARP);
    cb06:	2208      	movs	r2, #8
    cb08:	f804 2c0a 	strb.w	r2, [r4, #-10]
    cb0c:	2206      	movs	r2, #6
    cb0e:	f804 2c09 	strb.w	r2, [r4, #-9]
      uip_len = sizeof(struct arp_hdr);
    cb12:	222a      	movs	r2, #42	; 0x2a
    cb14:	4b0a      	ldr	r3, [pc, #40]	; (cb40 <uip_arp_arpin+0xd0>)
    cb16:	801a      	strh	r2, [r3, #0]
    cb18:	bd10      	pop	{r4, pc}
    }
    break;
  case HTONS(ARP_REPLY):
    /* ARP reply. We insert or update the ARP table if it was meant
       for us. */
    if(uip_ipaddr_cmp(BUF->dipaddr, uip_hostaddr)) {
    cb1a:	4b0a      	ldr	r3, [pc, #40]	; (cb44 <uip_arp_arpin+0xd4>)
    cb1c:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    cb1e:	4b0a      	ldr	r3, [pc, #40]	; (cb48 <uip_arp_arpin+0xd8>)
    cb20:	881b      	ldrh	r3, [r3, #0]
    cb22:	429a      	cmp	r2, r3
    cb24:	d1bf      	bne.n	caa6 <uip_arp_arpin+0x36>
    cb26:	4b07      	ldr	r3, [pc, #28]	; (cb44 <uip_arp_arpin+0xd4>)
    cb28:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    cb2a:	4b07      	ldr	r3, [pc, #28]	; (cb48 <uip_arp_arpin+0xd8>)
    cb2c:	885b      	ldrh	r3, [r3, #2]
    cb2e:	429a      	cmp	r2, r3
    cb30:	d1b9      	bne.n	caa6 <uip_arp_arpin+0x36>
      uip_arp_update(BUF->sipaddr, &BUF->shwaddr);
    cb32:	4806      	ldr	r0, [pc, #24]	; (cb4c <uip_arp_arpin+0xdc>)
    cb34:	4601      	mov	r1, r0
    cb36:	3006      	adds	r0, #6
    cb38:	4b05      	ldr	r3, [pc, #20]	; (cb50 <uip_arp_arpin+0xe0>)
    cb3a:	4798      	blx	r3
    cb3c:	e7b3      	b.n	caa6 <uip_arp_arpin+0x36>
    cb3e:	bf00      	nop
    cb40:	20008580 	.word	0x20008580
    cb44:	20008654 	.word	0x20008654
    cb48:	20008650 	.word	0x20008650
    cb4c:	2000866a 	.word	0x2000866a
    cb50:	0000c8c1 	.word	0x0000c8c1
    cb54:	200072cc 	.word	0x200072cc

0000cb58 <uip_arp_out>:
 * uip_len.
 */
/*-----------------------------------------------------------------------------------*/
void
uip_arp_out(void)
{
    cb58:	b5f0      	push	{r4, r5, r6, r7, lr}

     If not ARP table entry is found, we overwrite the original IP
     packet with an ARP request for the IP address. */

  /* First check if destination is a local broadcast. */
  if(uip_ipaddr_cmp(IPBUF->destipaddr, broadcast_ipaddr)) {
    cb5a:	4b53      	ldr	r3, [pc, #332]	; (cca8 <uip_arp_out+0x150>)
    cb5c:	8bda      	ldrh	r2, [r3, #30]
    cb5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    cb62:	429a      	cmp	r2, r3
    cb64:	d024      	beq.n	cbb0 <uip_arp_out+0x58>
    memcpy(IPBUF->ethhdr.dest.addr, broadcast_ethaddr.addr, 6);
  } else {
    /* Check if the destination address is on the local network. */
    if(!uip_ipaddr_maskcmp(IPBUF->destipaddr, uip_hostaddr, uip_netmask)) {
    cb66:	4b51      	ldr	r3, [pc, #324]	; (ccac <uip_arp_out+0x154>)
    cb68:	881b      	ldrh	r3, [r3, #0]
    cb6a:	4053      	eors	r3, r2
    cb6c:	4950      	ldr	r1, [pc, #320]	; (ccb0 <uip_arp_out+0x158>)
    cb6e:	8809      	ldrh	r1, [r1, #0]
    cb70:	420b      	tst	r3, r1
    cb72:	d108      	bne.n	cb86 <uip_arp_out+0x2e>
    cb74:	4b4c      	ldr	r3, [pc, #304]	; (cca8 <uip_arp_out+0x150>)
    cb76:	8c19      	ldrh	r1, [r3, #32]
    cb78:	4b4c      	ldr	r3, [pc, #304]	; (ccac <uip_arp_out+0x154>)
    cb7a:	885b      	ldrh	r3, [r3, #2]
    cb7c:	404b      	eors	r3, r1
    cb7e:	484c      	ldr	r0, [pc, #304]	; (ccb0 <uip_arp_out+0x158>)
    cb80:	8840      	ldrh	r0, [r0, #2]
    cb82:	4203      	tst	r3, r0
    cb84:	d021      	beq.n	cbca <uip_arp_out+0x72>
      /* Destination address was not on the local network, so we need to
	 use the default router's IP address instead of the destination
	 address when determining the MAC address. */
      uip_ipaddr_copy(ipaddr, uip_draddr);
    cb86:	4b4b      	ldr	r3, [pc, #300]	; (ccb4 <uip_arp_out+0x15c>)
    cb88:	4a4b      	ldr	r2, [pc, #300]	; (ccb8 <uip_arp_out+0x160>)
    cb8a:	8811      	ldrh	r1, [r2, #0]
    cb8c:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
    cb90:	8852      	ldrh	r2, [r2, #2]
    cb92:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    } else {
      /* Else, we use the destination IP address. */
      uip_ipaddr_copy(ipaddr, IPBUF->destipaddr);
    }
      
    for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    cb96:	4a47      	ldr	r2, [pc, #284]	; (ccb4 <uip_arp_out+0x15c>)
    cb98:	2300      	movs	r3, #0
    cb9a:	7013      	strb	r3, [r2, #0]
      tabptr = &arp_table[i];
      if(uip_ipaddr_cmp(ipaddr, tabptr->ipaddr)) {
    cb9c:	f8b2 6068 	ldrh.w	r6, [r2, #104]	; 0x68
    cba0:	f8b2 e06a 	ldrh.w	lr, [r2, #106]	; 0x6a
    cba4:	3204      	adds	r2, #4
    cba6:	4619      	mov	r1, r3
    cba8:	461d      	mov	r5, r3
    cbaa:	461c      	mov	r4, r3
    cbac:	2701      	movs	r7, #1
    cbae:	e01d      	b.n	cbec <uip_arp_out+0x94>
  if(uip_ipaddr_cmp(IPBUF->destipaddr, broadcast_ipaddr)) {
    cbb0:	4b3d      	ldr	r3, [pc, #244]	; (cca8 <uip_arp_out+0x150>)
    cbb2:	8c19      	ldrh	r1, [r3, #32]
    cbb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    cbb8:	4299      	cmp	r1, r3
    cbba:	d1d4      	bne.n	cb66 <uip_arp_out+0xe>
    memcpy(IPBUF->ethhdr.dest.addr, broadcast_ethaddr.addr, 6);
    cbbc:	4b3a      	ldr	r3, [pc, #232]	; (cca8 <uip_arp_out+0x150>)
    cbbe:	4a3f      	ldr	r2, [pc, #252]	; (ccbc <uip_arp_out+0x164>)
    cbc0:	6810      	ldr	r0, [r2, #0]
    cbc2:	6018      	str	r0, [r3, #0]
    cbc4:	8892      	ldrh	r2, [r2, #4]
    cbc6:	809a      	strh	r2, [r3, #4]
    cbc8:	e02a      	b.n	cc20 <uip_arp_out+0xc8>
      uip_ipaddr_copy(ipaddr, IPBUF->destipaddr);
    cbca:	4b3a      	ldr	r3, [pc, #232]	; (ccb4 <uip_arp_out+0x15c>)
    cbcc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    cbd0:	f8a3 106a 	strh.w	r1, [r3, #106]	; 0x6a
    cbd4:	e7df      	b.n	cb96 <uip_arp_out+0x3e>
    cbd6:	4a37      	ldr	r2, [pc, #220]	; (ccb4 <uip_arp_out+0x15c>)
    cbd8:	7014      	strb	r4, [r2, #0]
    cbda:	e010      	b.n	cbfe <uip_arp_out+0xa6>
    cbdc:	3301      	adds	r3, #1
    cbde:	b2dc      	uxtb	r4, r3
    cbe0:	1c48      	adds	r0, r1, #1
    cbe2:	320c      	adds	r2, #12
    cbe4:	463d      	mov	r5, r7
    for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    cbe6:	2808      	cmp	r0, #8
    cbe8:	d00b      	beq.n	cc02 <uip_arp_out+0xaa>
    cbea:	4601      	mov	r1, r0
    cbec:	b2cb      	uxtb	r3, r1
      if(uip_ipaddr_cmp(ipaddr, tabptr->ipaddr)) {
    cbee:	8810      	ldrh	r0, [r2, #0]
    cbf0:	42b0      	cmp	r0, r6
    cbf2:	d1f3      	bne.n	cbdc <uip_arp_out+0x84>
    cbf4:	8850      	ldrh	r0, [r2, #2]
    cbf6:	4570      	cmp	r0, lr
    cbf8:	d1f0      	bne.n	cbdc <uip_arp_out+0x84>
    cbfa:	2d00      	cmp	r5, #0
    cbfc:	d1eb      	bne.n	cbd6 <uip_arp_out+0x7e>
    cbfe:	461c      	mov	r4, r3
    cc00:	e001      	b.n	cc06 <uip_arp_out+0xae>
    cc02:	4b2c      	ldr	r3, [pc, #176]	; (ccb4 <uip_arp_out+0x15c>)
    cc04:	701c      	strb	r4, [r3, #0]
	break;
      }
    }

    if(i == UIP_ARPTAB_SIZE) {
    cc06:	2c08      	cmp	r4, #8
    cc08:	d01a      	beq.n	cc40 <uip_arp_out+0xe8>
      uip_len = sizeof(struct arp_hdr);
      return;
    }

    /* Build an ethernet header. */
    memcpy(IPBUF->ethhdr.dest.addr, tabptr->ethaddr.addr, 6);
    cc0a:	4a27      	ldr	r2, [pc, #156]	; (cca8 <uip_arp_out+0x150>)
    cc0c:	482c      	ldr	r0, [pc, #176]	; (ccc0 <uip_arp_out+0x168>)
    cc0e:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    cc12:	009b      	lsls	r3, r3, #2
    cc14:	3304      	adds	r3, #4
    cc16:	18c1      	adds	r1, r0, r3
    cc18:	58c0      	ldr	r0, [r0, r3]
    cc1a:	6010      	str	r0, [r2, #0]
    cc1c:	888b      	ldrh	r3, [r1, #4]
    cc1e:	8093      	strh	r3, [r2, #4]
  }
  memcpy(IPBUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
    cc20:	4b21      	ldr	r3, [pc, #132]	; (cca8 <uip_arp_out+0x150>)
    cc22:	4a28      	ldr	r2, [pc, #160]	; (ccc4 <uip_arp_out+0x16c>)
    cc24:	6811      	ldr	r1, [r2, #0]
    cc26:	f8c3 1006 	str.w	r1, [r3, #6]
    cc2a:	8892      	ldrh	r2, [r2, #4]
    cc2c:	815a      	strh	r2, [r3, #10]
  
  IPBUF->ethhdr.type = HTONS(UIP_ETHTYPE_IP);
    cc2e:	2208      	movs	r2, #8
    cc30:	731a      	strb	r2, [r3, #12]
    cc32:	2200      	movs	r2, #0
    cc34:	735a      	strb	r2, [r3, #13]

  uip_len += sizeof(struct uip_eth_hdr);
    cc36:	4a24      	ldr	r2, [pc, #144]	; (ccc8 <uip_arp_out+0x170>)
    cc38:	8813      	ldrh	r3, [r2, #0]
    cc3a:	330e      	adds	r3, #14
    cc3c:	8013      	strh	r3, [r2, #0]
    cc3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      memset(BUF->ethhdr.dest.addr, 0xff, 6);
    cc40:	4b19      	ldr	r3, [pc, #100]	; (cca8 <uip_arp_out+0x150>)
    cc42:	f04f 32ff 	mov.w	r2, #4294967295
    cc46:	601a      	str	r2, [r3, #0]
    cc48:	809a      	strh	r2, [r3, #4]
      memset(BUF->dhwaddr.addr, 0x00, 6);
    cc4a:	2200      	movs	r2, #0
    cc4c:	621a      	str	r2, [r3, #32]
    cc4e:	849a      	strh	r2, [r3, #36]	; 0x24
      memcpy(BUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
    cc50:	491c      	ldr	r1, [pc, #112]	; (ccc4 <uip_arp_out+0x16c>)
    cc52:	6808      	ldr	r0, [r1, #0]
    cc54:	f8c3 0006 	str.w	r0, [r3, #6]
    cc58:	8889      	ldrh	r1, [r1, #4]
    cc5a:	8159      	strh	r1, [r3, #10]
      memcpy(BUF->shwaddr.addr, uip_ethaddr.addr, 6);
    cc5c:	f8c3 0016 	str.w	r0, [r3, #22]
    cc60:	8359      	strh	r1, [r3, #26]
      uip_ipaddr_copy(BUF->dipaddr, ipaddr);
    cc62:	4914      	ldr	r1, [pc, #80]	; (ccb4 <uip_arp_out+0x15c>)
    cc64:	f8b1 0068 	ldrh.w	r0, [r1, #104]	; 0x68
    cc68:	84d8      	strh	r0, [r3, #38]	; 0x26
    cc6a:	f8b1 106a 	ldrh.w	r1, [r1, #106]	; 0x6a
    cc6e:	8519      	strh	r1, [r3, #40]	; 0x28
      uip_ipaddr_copy(BUF->sipaddr, uip_hostaddr);
    cc70:	490e      	ldr	r1, [pc, #56]	; (ccac <uip_arp_out+0x154>)
    cc72:	8808      	ldrh	r0, [r1, #0]
    cc74:	8398      	strh	r0, [r3, #28]
    cc76:	8849      	ldrh	r1, [r1, #2]
    cc78:	83d9      	strh	r1, [r3, #30]
      BUF->opcode = HTONS(ARP_REQUEST); /* ARP request. */
    cc7a:	751a      	strb	r2, [r3, #20]
    cc7c:	2101      	movs	r1, #1
    cc7e:	7559      	strb	r1, [r3, #21]
      BUF->hwtype = HTONS(ARP_HWTYPE_ETH);
    cc80:	739a      	strb	r2, [r3, #14]
    cc82:	73d9      	strb	r1, [r3, #15]
      BUF->protocol = HTONS(UIP_ETHTYPE_IP);
    cc84:	2108      	movs	r1, #8
    cc86:	7419      	strb	r1, [r3, #16]
    cc88:	745a      	strb	r2, [r3, #17]
      BUF->hwlen = 6;
    cc8a:	2206      	movs	r2, #6
    cc8c:	749a      	strb	r2, [r3, #18]
      BUF->protolen = 4;
    cc8e:	2204      	movs	r2, #4
    cc90:	74da      	strb	r2, [r3, #19]
      BUF->ethhdr.type = HTONS(UIP_ETHTYPE_ARP);
    cc92:	7319      	strb	r1, [r3, #12]
    cc94:	2206      	movs	r2, #6
    cc96:	735a      	strb	r2, [r3, #13]
      uip_appdata = &uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN];
    cc98:	3336      	adds	r3, #54	; 0x36
    cc9a:	4a0c      	ldr	r2, [pc, #48]	; (cccc <uip_arp_out+0x174>)
    cc9c:	6013      	str	r3, [r2, #0]
      uip_len = sizeof(struct arp_hdr);
    cc9e:	222a      	movs	r2, #42	; 0x2a
    cca0:	4b09      	ldr	r3, [pc, #36]	; (ccc8 <uip_arp_out+0x170>)
    cca2:	801a      	strh	r2, [r3, #0]
      return;
    cca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cca6:	bf00      	nop
    cca8:	20008654 	.word	0x20008654
    ccac:	20008650 	.word	0x20008650
    ccb0:	2000864c 	.word	0x2000864c
    ccb4:	200072d4 	.word	0x200072d4
    ccb8:	20008614 	.word	0x20008614
    ccbc:	0001159c 	.word	0x0001159c
    ccc0:	200072d8 	.word	0x200072d8
    ccc4:	200072cc 	.word	0x200072cc
    ccc8:	20008580 	.word	0x20008580
    cccc:	20008594 	.word	0x20008594

0000ccd0 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    ccd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    ccd2:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    ccd4:	780b      	ldrb	r3, [r1, #0]
    ccd6:	f3c3 1441 	ubfx	r4, r3, #5, #2
    ccda:	2c01      	cmp	r4, #1
    ccdc:	d15e      	bne.n	cd9c <cdcdf_acm_req+0xcc>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    ccde:	888c      	ldrh	r4, [r1, #4]
    cce0:	4d35      	ldr	r5, [pc, #212]	; (cdb8 <cdcdf_acm_req+0xe8>)
    cce2:	782d      	ldrb	r5, [r5, #0]
    cce4:	42a5      	cmp	r5, r4
    cce6:	d003      	beq.n	ccf0 <cdcdf_acm_req+0x20>
    cce8:	4d33      	ldr	r5, [pc, #204]	; (cdb8 <cdcdf_acm_req+0xe8>)
    ccea:	786d      	ldrb	r5, [r5, #1]
    ccec:	42a5      	cmp	r5, r4
    ccee:	d158      	bne.n	cda2 <cdcdf_acm_req+0xd2>
    ccf0:	4616      	mov	r6, r2
    ccf2:	460c      	mov	r4, r1
    ccf4:	4605      	mov	r5, r0
		if (req->bmRequestType & USB_EP_DIR_IN) {
    ccf6:	f013 0f80 	tst.w	r3, #128	; 0x80
    ccfa:	d10c      	bne.n	cd16 <cdcdf_acm_req+0x46>
	uint16_t                   len      = req->wLength;
    ccfc:	88cf      	ldrh	r7, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    ccfe:	4b2f      	ldr	r3, [pc, #188]	; (cdbc <cdcdf_acm_req+0xec>)
    cd00:	4798      	blx	r3
    cd02:	4601      	mov	r1, r0
	switch (req->bRequest) {
    cd04:	7863      	ldrb	r3, [r4, #1]
    cd06:	2b20      	cmp	r3, #32
    cd08:	d013      	beq.n	cd32 <cdcdf_acm_req+0x62>
    cd0a:	2b22      	cmp	r3, #34	; 0x22
    cd0c:	d032      	beq.n	cd74 <cdcdf_acm_req+0xa4>
		return ERR_INVALID_ARG;
    cd0e:	f06f 000c 	mvn.w	r0, #12
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    cd12:	b003      	add	sp, #12
    cd14:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    cd16:	2a01      	cmp	r2, #1
    cd18:	d046      	beq.n	cda8 <cdcdf_acm_req+0xd8>
	switch (req->bRequest) {
    cd1a:	784b      	ldrb	r3, [r1, #1]
    cd1c:	2b21      	cmp	r3, #33	; 0x21
    cd1e:	d145      	bne.n	cdac <cdcdf_acm_req+0xdc>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    cd20:	88cb      	ldrh	r3, [r1, #6]
    cd22:	2b07      	cmp	r3, #7
    cd24:	d145      	bne.n	cdb2 <cdcdf_acm_req+0xe2>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    cd26:	2300      	movs	r3, #0
    cd28:	2207      	movs	r2, #7
    cd2a:	4925      	ldr	r1, [pc, #148]	; (cdc0 <cdcdf_acm_req+0xf0>)
    cd2c:	4c25      	ldr	r4, [pc, #148]	; (cdc4 <cdcdf_acm_req+0xf4>)
    cd2e:	47a0      	blx	r4
    cd30:	e7ef      	b.n	cd12 <cdcdf_acm_req+0x42>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    cd32:	2f07      	cmp	r7, #7
    cd34:	d12b      	bne.n	cd8e <cdcdf_acm_req+0xbe>
		if (USB_SETUP_STAGE == stage) {
    cd36:	b1be      	cbz	r6, cd68 <cdcdf_acm_req+0x98>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    cd38:	6800      	ldr	r0, [r0, #0]
    cd3a:	9000      	str	r0, [sp, #0]
    cd3c:	888a      	ldrh	r2, [r1, #4]
    cd3e:	798b      	ldrb	r3, [r1, #6]
    cd40:	f8ad 2004 	strh.w	r2, [sp, #4]
    cd44:	f88d 3006 	strb.w	r3, [sp, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    cd48:	4b1b      	ldr	r3, [pc, #108]	; (cdb8 <cdcdf_acm_req+0xe8>)
    cd4a:	691b      	ldr	r3, [r3, #16]
    cd4c:	b113      	cbz	r3, cd54 <cdcdf_acm_req+0x84>
    cd4e:	4668      	mov	r0, sp
    cd50:	4798      	blx	r3
    cd52:	b1f8      	cbz	r0, cd94 <cdcdf_acm_req+0xc4>
				usbd_cdc_line_coding = line_coding_tmp;
    cd54:	4b18      	ldr	r3, [pc, #96]	; (cdb8 <cdcdf_acm_req+0xe8>)
    cd56:	aa02      	add	r2, sp, #8
    cd58:	e912 0003 	ldmdb	r2, {r0, r1}
    cd5c:	6098      	str	r0, [r3, #8]
    cd5e:	8199      	strh	r1, [r3, #12]
    cd60:	0c09      	lsrs	r1, r1, #16
    cd62:	7399      	strb	r1, [r3, #14]
			return ERR_NONE;
    cd64:	2000      	movs	r0, #0
    cd66:	e7d4      	b.n	cd12 <cdcdf_acm_req+0x42>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    cd68:	2300      	movs	r3, #0
    cd6a:	2207      	movs	r2, #7
    cd6c:	4628      	mov	r0, r5
    cd6e:	4c15      	ldr	r4, [pc, #84]	; (cdc4 <cdcdf_acm_req+0xf4>)
    cd70:	47a0      	blx	r4
    cd72:	e7ce      	b.n	cd12 <cdcdf_acm_req+0x42>
		usbdc_xfer(0, NULL, 0, 0);
    cd74:	2300      	movs	r3, #0
    cd76:	461a      	mov	r2, r3
    cd78:	4619      	mov	r1, r3
    cd7a:	4618      	mov	r0, r3
    cd7c:	4d11      	ldr	r5, [pc, #68]	; (cdc4 <cdcdf_acm_req+0xf4>)
    cd7e:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    cd80:	4b0d      	ldr	r3, [pc, #52]	; (cdb8 <cdcdf_acm_req+0xe8>)
    cd82:	695b      	ldr	r3, [r3, #20]
    cd84:	b143      	cbz	r3, cd98 <cdcdf_acm_req+0xc8>
			cdcdf_acm_notify_state(req->wValue);
    cd86:	8860      	ldrh	r0, [r4, #2]
    cd88:	4798      	blx	r3
		return ERR_NONE;
    cd8a:	2000      	movs	r0, #0
    cd8c:	e7c1      	b.n	cd12 <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    cd8e:	f04f 30ff 	mov.w	r0, #4294967295
    cd92:	e7be      	b.n	cd12 <cdcdf_acm_req+0x42>
			return ERR_NONE;
    cd94:	2000      	movs	r0, #0
    cd96:	e7bc      	b.n	cd12 <cdcdf_acm_req+0x42>
		return ERR_NONE;
    cd98:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    cd9a:	e7ba      	b.n	cd12 <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    cd9c:	f06f 0009 	mvn.w	r0, #9
    cda0:	e7b7      	b.n	cd12 <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    cda2:	f06f 0009 	mvn.w	r0, #9
    cda6:	e7b4      	b.n	cd12 <cdcdf_acm_req+0x42>
		return ERR_NONE;
    cda8:	2000      	movs	r0, #0
    cdaa:	e7b2      	b.n	cd12 <cdcdf_acm_req+0x42>
		return ERR_INVALID_ARG;
    cdac:	f06f 000c 	mvn.w	r0, #12
    cdb0:	e7af      	b.n	cd12 <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    cdb2:	f04f 30ff 	mov.w	r0, #4294967295
    cdb6:	e7ac      	b.n	cd12 <cdcdf_acm_req+0x42>
    cdb8:	20007340 	.word	0x20007340
    cdbc:	0000d6cd 	.word	0x0000d6cd
    cdc0:	20007348 	.word	0x20007348
    cdc4:	0000d1a9 	.word	0x0000d1a9

0000cdc8 <cdcdf_acm_ctrl>:
{
    cdc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cdcc:	b083      	sub	sp, #12
    cdce:	4616      	mov	r6, r2
	switch (ctrl) {
    cdd0:	2901      	cmp	r1, #1
    cdd2:	d066      	beq.n	cea2 <cdcdf_acm_ctrl+0xda>
    cdd4:	b141      	cbz	r1, cde8 <cdcdf_acm_ctrl+0x20>
		return ERR_INVALID_ARG;
    cdd6:	2902      	cmp	r1, #2
    cdd8:	bf0c      	ite	eq
    cdda:	f06f 001a 	mvneq.w	r0, #26
    cdde:	f06f 000c 	mvnne.w	r0, #12
}
    cde2:	b003      	add	sp, #12
    cde4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    cde8:	f8d0 a008 	ldr.w	sl, [r0, #8]
	ifc = desc->sod;
    cdec:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    cdee:	2800      	cmp	r0, #0
    cdf0:	f000 8085 	beq.w	cefe <cdcdf_acm_ctrl+0x136>
    cdf4:	f10a 3bff 	add.w	fp, sl, #4294967295
    cdf8:	f10a 0301 	add.w	r3, sl, #1
    cdfc:	9300      	str	r3, [sp, #0]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    cdfe:	4f46      	ldr	r7, [pc, #280]	; (cf18 <cdcdf_acm_ctrl+0x150>)
				usb_d_ep_enable(func_data->func_ep_out);
    ce00:	f8df 9124 	ldr.w	r9, [pc, #292]	; cf28 <cdcdf_acm_ctrl+0x160>
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    ce04:	f8df 8124 	ldr.w	r8, [pc, #292]	; cf2c <cdcdf_acm_ctrl+0x164>
		ifc_desc.bInterfaceNumber = ifc[2];
    ce08:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    ce0a:	7943      	ldrb	r3, [r0, #5]
    ce0c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    ce10:	2b02      	cmp	r3, #2
    ce12:	d002      	beq.n	ce1a <cdcdf_acm_ctrl+0x52>
			return ERR_NOT_FOUND;
    ce14:	f06f 0009 	mvn.w	r0, #9
    ce18:	e7e3      	b.n	cde2 <cdcdf_acm_ctrl+0x1a>
    ce1a:	f10b 0b01 	add.w	fp, fp, #1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    ce1e:	f89b 3000 	ldrb.w	r3, [fp]
    ce22:	429a      	cmp	r2, r3
    ce24:	d06e      	beq.n	cf04 <cdcdf_acm_ctrl+0x13c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    ce26:	2bff      	cmp	r3, #255	; 0xff
    ce28:	d16f      	bne.n	cf0a <cdcdf_acm_ctrl+0x142>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    ce2a:	f88b 2000 	strb.w	r2, [fp]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    ce2e:	2205      	movs	r2, #5
    ce30:	6871      	ldr	r1, [r6, #4]
    ce32:	4b3a      	ldr	r3, [pc, #232]	; (cf1c <cdcdf_acm_ctrl+0x154>)
    ce34:	4798      	blx	r3
		while (NULL != ep) {
    ce36:	4604      	mov	r4, r0
    ce38:	b1f8      	cbz	r0, ce7a <cdcdf_acm_ctrl+0xb2>
    ce3a:	f8cd b004 	str.w	fp, [sp, #4]
			ep_desc.bEndpointAddress = ep[2];
    ce3e:	78a5      	ldrb	r5, [r4, #2]
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
	return (ptr[0] + (ptr[1] << 8));
    ce40:	7963      	ldrb	r3, [r4, #5]
    ce42:	7922      	ldrb	r2, [r4, #4]
    ce44:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    ce48:	b292      	uxth	r2, r2
    ce4a:	78e1      	ldrb	r1, [r4, #3]
    ce4c:	4628      	mov	r0, r5
    ce4e:	47b8      	blx	r7
    ce50:	2800      	cmp	r0, #0
    ce52:	d15d      	bne.n	cf10 <cdcdf_acm_ctrl+0x148>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    ce54:	f015 0f80 	tst.w	r5, #128	; 0x80
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    ce58:	bf14      	ite	ne
    ce5a:	f88b 5002 	strbne.w	r5, [fp, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    ce5e:	f88a 5004 	strbeq.w	r5, [sl, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    ce62:	4628      	mov	r0, r5
    ce64:	47c8      	blx	r9
			desc->sod = ep;
    ce66:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    ce68:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    ce6a:	6871      	ldr	r1, [r6, #4]
    ce6c:	4420      	add	r0, r4
    ce6e:	47c0      	blx	r8
		while (NULL != ep) {
    ce70:	4604      	mov	r4, r0
    ce72:	2800      	cmp	r0, #0
    ce74:	d1e3      	bne.n	ce3e <cdcdf_acm_ctrl+0x76>
    ce76:	f8dd b004 	ldr.w	fp, [sp, #4]
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    ce7a:	6833      	ldr	r3, [r6, #0]
    ce7c:	7818      	ldrb	r0, [r3, #0]
    ce7e:	2204      	movs	r2, #4
    ce80:	6871      	ldr	r1, [r6, #4]
    ce82:	4418      	add	r0, r3
    ce84:	4b25      	ldr	r3, [pc, #148]	; (cf1c <cdcdf_acm_ctrl+0x154>)
    ce86:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    ce88:	9b00      	ldr	r3, [sp, #0]
    ce8a:	459b      	cmp	fp, r3
    ce8c:	d004      	beq.n	ce98 <cdcdf_acm_ctrl+0xd0>
		if (NULL == ifc) {
    ce8e:	2800      	cmp	r0, #0
    ce90:	d1ba      	bne.n	ce08 <cdcdf_acm_ctrl+0x40>
			return ERR_NOT_FOUND;
    ce92:	f06f 0009 	mvn.w	r0, #9
    ce96:	e7a4      	b.n	cde2 <cdcdf_acm_ctrl+0x1a>
	_cdcdf_acm_funcd.enabled = true;
    ce98:	2201      	movs	r2, #1
    ce9a:	4b21      	ldr	r3, [pc, #132]	; (cf20 <cdcdf_acm_ctrl+0x158>)
    ce9c:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    ce9e:	2000      	movs	r0, #0
    cea0:	e79f      	b.n	cde2 <cdcdf_acm_ctrl+0x1a>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    cea2:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    cea4:	b142      	cbz	r2, ceb8 <cdcdf_acm_ctrl+0xf0>
		ifc_desc.bInterfaceClass = desc->sod[5];
    cea6:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    cea8:	795b      	ldrb	r3, [r3, #5]
    ceaa:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    ceae:	2b02      	cmp	r3, #2
    ceb0:	d002      	beq.n	ceb8 <cdcdf_acm_ctrl+0xf0>
			return ERR_NOT_FOUND;
    ceb2:	f06f 0009 	mvn.w	r0, #9
    ceb6:	e794      	b.n	cde2 <cdcdf_acm_ctrl+0x1a>
		if (func_data->func_iface[i] == 0xFF) {
    ceb8:	7823      	ldrb	r3, [r4, #0]
    ceba:	2bff      	cmp	r3, #255	; 0xff
    cebc:	d008      	beq.n	ced0 <cdcdf_acm_ctrl+0x108>
			func_data->func_iface[i] = 0xFF;
    cebe:	23ff      	movs	r3, #255	; 0xff
    cec0:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    cec2:	78a0      	ldrb	r0, [r4, #2]
    cec4:	4298      	cmp	r0, r3
    cec6:	d003      	beq.n	ced0 <cdcdf_acm_ctrl+0x108>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    cec8:	4b16      	ldr	r3, [pc, #88]	; (cf24 <cdcdf_acm_ctrl+0x15c>)
    ceca:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    cecc:	23ff      	movs	r3, #255	; 0xff
    cece:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    ced0:	7863      	ldrb	r3, [r4, #1]
    ced2:	2bff      	cmp	r3, #255	; 0xff
    ced4:	d008      	beq.n	cee8 <cdcdf_acm_ctrl+0x120>
			func_data->func_iface[i] = 0xFF;
    ced6:	23ff      	movs	r3, #255	; 0xff
    ced8:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    ceda:	78e0      	ldrb	r0, [r4, #3]
    cedc:	4298      	cmp	r0, r3
    cede:	d003      	beq.n	cee8 <cdcdf_acm_ctrl+0x120>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    cee0:	4b10      	ldr	r3, [pc, #64]	; (cf24 <cdcdf_acm_ctrl+0x15c>)
    cee2:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    cee4:	23ff      	movs	r3, #255	; 0xff
    cee6:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    cee8:	7920      	ldrb	r0, [r4, #4]
    ceea:	28ff      	cmp	r0, #255	; 0xff
    ceec:	d003      	beq.n	cef6 <cdcdf_acm_ctrl+0x12e>
		usb_d_ep_deinit(func_data->func_ep_out);
    ceee:	4b0d      	ldr	r3, [pc, #52]	; (cf24 <cdcdf_acm_ctrl+0x15c>)
    cef0:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    cef2:	23ff      	movs	r3, #255	; 0xff
    cef4:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    cef6:	2000      	movs	r0, #0
    cef8:	4b09      	ldr	r3, [pc, #36]	; (cf20 <cdcdf_acm_ctrl+0x158>)
    cefa:	7158      	strb	r0, [r3, #5]
    cefc:	e771      	b.n	cde2 <cdcdf_acm_ctrl+0x1a>
			return ERR_NOT_FOUND;
    cefe:	f06f 0009 	mvn.w	r0, #9
    cf02:	e76e      	b.n	cde2 <cdcdf_acm_ctrl+0x1a>
				return ERR_ALREADY_INITIALIZED;
    cf04:	f06f 0011 	mvn.w	r0, #17
    cf08:	e76b      	b.n	cde2 <cdcdf_acm_ctrl+0x1a>
				return ERR_NO_RESOURCE;
    cf0a:	f06f 001b 	mvn.w	r0, #27
    cf0e:	e768      	b.n	cde2 <cdcdf_acm_ctrl+0x1a>
				return ERR_NOT_INITIALIZED;
    cf10:	f06f 0013 	mvn.w	r0, #19
    cf14:	e765      	b.n	cde2 <cdcdf_acm_ctrl+0x1a>
    cf16:	bf00      	nop
    cf18:	000023fd 	.word	0x000023fd
    cf1c:	0000d6ed 	.word	0x0000d6ed
    cf20:	20007340 	.word	0x20007340
    cf24:	00002465 	.word	0x00002465
    cf28:	00002491 	.word	0x00002491
    cf2c:	0000d725 	.word	0x0000d725

0000cf30 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    cf30:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    cf32:	4b0a      	ldr	r3, [pc, #40]	; (cf5c <cdcdf_acm_init+0x2c>)
    cf34:	4798      	blx	r3
    cf36:	2801      	cmp	r0, #1
    cf38:	d80c      	bhi.n	cf54 <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    cf3a:	4809      	ldr	r0, [pc, #36]	; (cf60 <cdcdf_acm_init+0x30>)
    cf3c:	4b09      	ldr	r3, [pc, #36]	; (cf64 <cdcdf_acm_init+0x34>)
    cf3e:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    cf40:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    cf42:	3018      	adds	r0, #24
    cf44:	4b08      	ldr	r3, [pc, #32]	; (cf68 <cdcdf_acm_init+0x38>)
    cf46:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    cf48:	4908      	ldr	r1, [pc, #32]	; (cf6c <cdcdf_acm_init+0x3c>)
    cf4a:	2001      	movs	r0, #1
    cf4c:	4b08      	ldr	r3, [pc, #32]	; (cf70 <cdcdf_acm_init+0x40>)
    cf4e:	4798      	blx	r3
	return ERR_NONE;
    cf50:	2000      	movs	r0, #0
    cf52:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    cf54:	f06f 0010 	mvn.w	r0, #16
}
    cf58:	bd08      	pop	{r3, pc}
    cf5a:	bf00      	nop
    cf5c:	0000d6d9 	.word	0x0000d6d9
    cf60:	20007340 	.word	0x20007340
    cf64:	0000cdc9 	.word	0x0000cdc9
    cf68:	0000d679 	.word	0x0000d679
    cf6c:	20000014 	.word	0x20000014
    cf70:	0000d5e5 	.word	0x0000d5e5

0000cf74 <cdcdf_acm_read>:
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    cf74:	4b07      	ldr	r3, [pc, #28]	; (cf94 <cdcdf_acm_read+0x20>)
	if (!cdcdf_acm_is_enabled()) {
    cf76:	795b      	ldrb	r3, [r3, #5]
    cf78:	b143      	cbz	r3, cf8c <cdcdf_acm_read+0x18>
{
    cf7a:	b510      	push	{r4, lr}
    cf7c:	460a      	mov	r2, r1
    cf7e:	4601      	mov	r1, r0
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    cf80:	2300      	movs	r3, #0
    cf82:	4804      	ldr	r0, [pc, #16]	; (cf94 <cdcdf_acm_read+0x20>)
    cf84:	7900      	ldrb	r0, [r0, #4]
    cf86:	4c04      	ldr	r4, [pc, #16]	; (cf98 <cdcdf_acm_read+0x24>)
    cf88:	47a0      	blx	r4
    cf8a:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    cf8c:	f06f 0010 	mvn.w	r0, #16
    cf90:	4770      	bx	lr
    cf92:	bf00      	nop
    cf94:	20007340 	.word	0x20007340
    cf98:	0000d1a9 	.word	0x0000d1a9

0000cf9c <cdcdf_acm_write>:
	return _cdcdf_acm_funcd.enabled;
    cf9c:	4b07      	ldr	r3, [pc, #28]	; (cfbc <cdcdf_acm_write+0x20>)
	if (!cdcdf_acm_is_enabled()) {
    cf9e:	795b      	ldrb	r3, [r3, #5]
    cfa0:	b143      	cbz	r3, cfb4 <cdcdf_acm_write+0x18>
{
    cfa2:	b510      	push	{r4, lr}
    cfa4:	460a      	mov	r2, r1
    cfa6:	4601      	mov	r1, r0
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    cfa8:	2301      	movs	r3, #1
    cfaa:	4804      	ldr	r0, [pc, #16]	; (cfbc <cdcdf_acm_write+0x20>)
    cfac:	78c0      	ldrb	r0, [r0, #3]
    cfae:	4c04      	ldr	r4, [pc, #16]	; (cfc0 <cdcdf_acm_write+0x24>)
    cfb0:	47a0      	blx	r4
    cfb2:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    cfb4:	f06f 0010 	mvn.w	r0, #16
    cfb8:	4770      	bx	lr
    cfba:	bf00      	nop
    cfbc:	20007340 	.word	0x20007340
    cfc0:	0000d1a9 	.word	0x0000d1a9

0000cfc4 <cdcdf_acm_register_callback>:
{
    cfc4:	b508      	push	{r3, lr}
	switch (cb_type) {
    cfc6:	2803      	cmp	r0, #3
    cfc8:	d81b      	bhi.n	d002 <cdcdf_acm_register_callback+0x3e>
    cfca:	e8df f000 	tbb	[pc, r0]
    cfce:	0a02      	.short	0x0a02
    cfd0:	1612      	.short	0x1612
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    cfd2:	460a      	mov	r2, r1
    cfd4:	2102      	movs	r1, #2
    cfd6:	4b0c      	ldr	r3, [pc, #48]	; (d008 <cdcdf_acm_register_callback+0x44>)
    cfd8:	7918      	ldrb	r0, [r3, #4]
    cfda:	4b0c      	ldr	r3, [pc, #48]	; (d00c <cdcdf_acm_register_callback+0x48>)
    cfdc:	4798      	blx	r3
	return ERR_NONE;
    cfde:	2000      	movs	r0, #0
		break;
    cfe0:	bd08      	pop	{r3, pc}
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    cfe2:	460a      	mov	r2, r1
    cfe4:	2102      	movs	r1, #2
    cfe6:	4b08      	ldr	r3, [pc, #32]	; (d008 <cdcdf_acm_register_callback+0x44>)
    cfe8:	78d8      	ldrb	r0, [r3, #3]
    cfea:	4b08      	ldr	r3, [pc, #32]	; (d00c <cdcdf_acm_register_callback+0x48>)
    cfec:	4798      	blx	r3
	return ERR_NONE;
    cfee:	2000      	movs	r0, #0
		break;
    cff0:	bd08      	pop	{r3, pc}
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    cff2:	4b05      	ldr	r3, [pc, #20]	; (d008 <cdcdf_acm_register_callback+0x44>)
    cff4:	6119      	str	r1, [r3, #16]
	return ERR_NONE;
    cff6:	2000      	movs	r0, #0
		break;
    cff8:	bd08      	pop	{r3, pc}
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    cffa:	4b03      	ldr	r3, [pc, #12]	; (d008 <cdcdf_acm_register_callback+0x44>)
    cffc:	6159      	str	r1, [r3, #20]
	return ERR_NONE;
    cffe:	2000      	movs	r0, #0
		break;
    d000:	bd08      	pop	{r3, pc}
		return ERR_INVALID_ARG;
    d002:	f06f 000c 	mvn.w	r0, #12
}
    d006:	bd08      	pop	{r3, pc}
    d008:	20007340 	.word	0x20007340
    d00c:	00002665 	.word	0x00002665

0000d010 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    d010:	b570      	push	{r4, r5, r6, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    d012:	4b07      	ldr	r3, [pc, #28]	; (d030 <usbdc_unconfig+0x20>)
    d014:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    d016:	b14c      	cbz	r4, d02c <usbdc_unconfig+0x1c>
		func->ctrl(func, USBDF_DISABLE, NULL);
    d018:	2600      	movs	r6, #0
    d01a:	2501      	movs	r5, #1
    d01c:	6863      	ldr	r3, [r4, #4]
    d01e:	4632      	mov	r2, r6
    d020:	4629      	mov	r1, r5
    d022:	4620      	mov	r0, r4
    d024:	4798      	blx	r3
		func = func->next;
    d026:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    d028:	2c00      	cmp	r4, #0
    d02a:	d1f7      	bne.n	d01c <usbdc_unconfig+0xc>
    d02c:	bd70      	pop	{r4, r5, r6, pc}
    d02e:	bf00      	nop
    d030:	20007364 	.word	0x20007364

0000d034 <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    d034:	b570      	push	{r4, r5, r6, lr}
    d036:	4606      	mov	r6, r0
    d038:	460d      	mov	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    d03a:	4b07      	ldr	r3, [pc, #28]	; (d058 <usbdc_change_notify+0x24>)
    d03c:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    d03e:	b91c      	cbnz	r4, d048 <usbdc_change_notify+0x14>
    d040:	bd70      	pop	{r4, r5, r6, pc}
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    d042:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    d044:	2c00      	cmp	r4, #0
    d046:	d0fb      	beq.n	d040 <usbdc_change_notify+0xc>
		if (NULL != cg->cb) {
    d048:	6863      	ldr	r3, [r4, #4]
    d04a:	2b00      	cmp	r3, #0
    d04c:	d0f9      	beq.n	d042 <usbdc_change_notify+0xe>
			cg->cb(change, value);
    d04e:	4629      	mov	r1, r5
    d050:	4630      	mov	r0, r6
    d052:	4798      	blx	r3
    d054:	e7f5      	b.n	d042 <usbdc_change_notify+0xe>
    d056:	bf00      	nop
    d058:	20007364 	.word	0x20007364

0000d05c <usbdc_request_handler>:
	}
}

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    d05c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d05e:	4607      	mov	r7, r0
    d060:	460e      	mov	r6, r1
    d062:	4615      	mov	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    d064:	4b0c      	ldr	r3, [pc, #48]	; (d098 <usbdc_request_handler+0x3c>)
    d066:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    d068:	b91c      	cbnz	r4, d072 <usbdc_request_handler+0x16>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    d06a:	2000      	movs	r0, #0
    d06c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		h = h->next;
    d06e:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    d070:	b16c      	cbz	r4, d08e <usbdc_request_handler+0x32>
		if (NULL != h->cb) {
    d072:	6863      	ldr	r3, [r4, #4]
    d074:	2b00      	cmp	r3, #0
    d076:	d0fa      	beq.n	d06e <usbdc_request_handler+0x12>
			rc = h->cb(ep, req, stage);
    d078:	462a      	mov	r2, r5
    d07a:	4631      	mov	r1, r6
    d07c:	4638      	mov	r0, r7
    d07e:	4798      	blx	r3
			if (0 == rc) {
    d080:	b138      	cbz	r0, d092 <usbdc_request_handler+0x36>
			} else if (ERR_NOT_FOUND != rc) {
    d082:	f110 0f0a 	cmn.w	r0, #10
    d086:	d0f2      	beq.n	d06e <usbdc_request_handler+0x12>
				return -1;
    d088:	f04f 30ff 	mov.w	r0, #4294967295
}
    d08c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    d08e:	2000      	movs	r0, #0
    d090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    d092:	2001      	movs	r0, #1
    d094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d096:	bf00      	nop
    d098:	20007364 	.word	0x20007364

0000d09c <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    d09c:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    d09e:	4b06      	ldr	r3, [pc, #24]	; (d0b8 <usbd_sof_cb+0x1c>)
    d0a0:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    d0a2:	b91c      	cbnz	r4, d0ac <usbd_sof_cb+0x10>
    d0a4:	bd10      	pop	{r4, pc}
		sof = sof->next;
    d0a6:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    d0a8:	2c00      	cmp	r4, #0
    d0aa:	d0fb      	beq.n	d0a4 <usbd_sof_cb+0x8>
		if (NULL != sof->cb) {
    d0ac:	6863      	ldr	r3, [r4, #4]
    d0ae:	2b00      	cmp	r3, #0
    d0b0:	d0f9      	beq.n	d0a6 <usbd_sof_cb+0xa>
			sof->cb();
    d0b2:	4798      	blx	r3
    d0b4:	e7f7      	b.n	d0a6 <usbd_sof_cb+0xa>
    d0b6:	bf00      	nop
    d0b8:	20007364 	.word	0x20007364

0000d0bc <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    d0bc:	b510      	push	{r4, lr}
    d0be:	4614      	mov	r4, r2
	(void)ep;

	switch (code) {
    d0c0:	b119      	cbz	r1, d0ca <usbdc_cb_ctl_done+0xe>
    d0c2:	2901      	cmp	r1, #1
    d0c4:	d026      	beq.n	d114 <usbdc_cb_ctl_done+0x58>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    d0c6:	2000      	movs	r0, #0
    d0c8:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    d0ca:	7813      	ldrb	r3, [r2, #0]
    d0cc:	2b00      	cmp	r3, #0
    d0ce:	d1fa      	bne.n	d0c6 <usbdc_cb_ctl_done+0xa>
	switch (req->bRequest) {
    d0d0:	7853      	ldrb	r3, [r2, #1]
    d0d2:	2b05      	cmp	r3, #5
    d0d4:	d00f      	beq.n	d0f6 <usbdc_cb_ctl_done+0x3a>
    d0d6:	2b09      	cmp	r3, #9
    d0d8:	d1f5      	bne.n	d0c6 <usbdc_cb_ctl_done+0xa>
		usbdc.cfg_value = req->wValue;
    d0da:	8852      	ldrh	r2, [r2, #2]
    d0dc:	4b10      	ldr	r3, [pc, #64]	; (d120 <usbdc_cb_ctl_done+0x64>)
    d0de:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    d0e0:	8863      	ldrh	r3, [r4, #2]
    d0e2:	2b00      	cmp	r3, #0
    d0e4:	bf14      	ite	ne
    d0e6:	2104      	movne	r1, #4
    d0e8:	2103      	moveq	r1, #3
    d0ea:	4b0d      	ldr	r3, [pc, #52]	; (d120 <usbdc_cb_ctl_done+0x64>)
    d0ec:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    d0ee:	2001      	movs	r0, #1
    d0f0:	4b0c      	ldr	r3, [pc, #48]	; (d124 <usbdc_cb_ctl_done+0x68>)
    d0f2:	4798      	blx	r3
    d0f4:	e7e7      	b.n	d0c6 <usbdc_cb_ctl_done+0xa>
		usbdc_set_address(req->wValue);
    d0f6:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    d0f8:	b2c0      	uxtb	r0, r0
    d0fa:	4b0b      	ldr	r3, [pc, #44]	; (d128 <usbdc_cb_ctl_done+0x6c>)
    d0fc:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    d0fe:	8863      	ldrh	r3, [r4, #2]
    d100:	2b00      	cmp	r3, #0
    d102:	bf14      	ite	ne
    d104:	2103      	movne	r1, #3
    d106:	2102      	moveq	r1, #2
    d108:	4b05      	ldr	r3, [pc, #20]	; (d120 <usbdc_cb_ctl_done+0x64>)
    d10a:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    d10c:	2001      	movs	r0, #1
    d10e:	4b05      	ldr	r3, [pc, #20]	; (d124 <usbdc_cb_ctl_done+0x68>)
    d110:	4798      	blx	r3
    d112:	e7d8      	b.n	d0c6 <usbdc_cb_ctl_done+0xa>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    d114:	2201      	movs	r2, #1
    d116:	4621      	mov	r1, r4
    d118:	2000      	movs	r0, #0
    d11a:	4b04      	ldr	r3, [pc, #16]	; (d12c <usbdc_cb_ctl_done+0x70>)
    d11c:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    d11e:	e7d2      	b.n	d0c6 <usbdc_cb_ctl_done+0xa>
    d120:	20007364 	.word	0x20007364
    d124:	0000d035 	.word	0x0000d035
    d128:	000023f1 	.word	0x000023f1
    d12c:	0000d05d 	.word	0x0000d05d

0000d130 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    d130:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();
    d132:	4b0d      	ldr	r3, [pc, #52]	; (d168 <usbdc_reset+0x38>)
    d134:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    d136:	4d0d      	ldr	r5, [pc, #52]	; (d16c <usbdc_reset+0x3c>)
    d138:	2602      	movs	r6, #2
    d13a:	76ae      	strb	r6, [r5, #26]
	usbdc.cfg_value   = 0;
    d13c:	2400      	movs	r4, #0
    d13e:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    d140:	776c      	strb	r4, [r5, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    d142:	4620      	mov	r0, r4
    d144:	4b0a      	ldr	r3, [pc, #40]	; (d170 <usbdc_reset+0x40>)
    d146:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    d148:	7f28      	ldrb	r0, [r5, #28]
    d14a:	4b0a      	ldr	r3, [pc, #40]	; (d174 <usbdc_reset+0x44>)
    d14c:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    d14e:	4a0a      	ldr	r2, [pc, #40]	; (d178 <usbdc_reset+0x48>)
    d150:	4621      	mov	r1, r4
    d152:	4620      	mov	r0, r4
    d154:	4d09      	ldr	r5, [pc, #36]	; (d17c <usbdc_reset+0x4c>)
    d156:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    d158:	4a09      	ldr	r2, [pc, #36]	; (d180 <usbdc_reset+0x50>)
    d15a:	4631      	mov	r1, r6
    d15c:	4620      	mov	r0, r4
    d15e:	47a8      	blx	r5
	usb_d_ep_enable(0);
    d160:	4620      	mov	r0, r4
    d162:	4b08      	ldr	r3, [pc, #32]	; (d184 <usbdc_reset+0x54>)
    d164:	4798      	blx	r3
    d166:	bd70      	pop	{r4, r5, r6, pc}
    d168:	0000d011 	.word	0x0000d011
    d16c:	20007364 	.word	0x20007364
    d170:	00002465 	.word	0x00002465
    d174:	00002451 	.word	0x00002451
    d178:	0000d1c9 	.word	0x0000d1c9
    d17c:	00002665 	.word	0x00002665
    d180:	0000d0bd 	.word	0x0000d0bd
    d184:	00002491 	.word	0x00002491

0000d188 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    d188:	b508      	push	{r3, lr}
	(void)param;

	switch (ev) {
    d18a:	b110      	cbz	r0, d192 <usbd_event_cb+0xa>
    d18c:	2801      	cmp	r0, #1
    d18e:	d004      	beq.n	d19a <usbd_event_cb+0x12>
    d190:	bd08      	pop	{r3, pc}
	case USB_EV_VBUS:
		usbdc_change_notify(USBDC_C_CONN, param);
    d192:	2000      	movs	r0, #0
    d194:	4b02      	ldr	r3, [pc, #8]	; (d1a0 <usbd_event_cb+0x18>)
    d196:	4798      	blx	r3
		break;
    d198:	bd08      	pop	{r3, pc}

	case USB_EV_RESET:
		usbdc_reset();
    d19a:	4b02      	ldr	r3, [pc, #8]	; (d1a4 <usbd_event_cb+0x1c>)
    d19c:	4798      	blx	r3
    d19e:	bd08      	pop	{r3, pc}
    d1a0:	0000d035 	.word	0x0000d035
    d1a4:	0000d131 	.word	0x0000d131

0000d1a8 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    d1a8:	b500      	push	{lr}
    d1aa:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    d1ac:	9101      	str	r1, [sp, #4]
    d1ae:	9202      	str	r2, [sp, #8]
    d1b0:	f88d 000c 	strb.w	r0, [sp, #12]
    d1b4:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    d1b8:	a801      	add	r0, sp, #4
    d1ba:	4b02      	ldr	r3, [pc, #8]	; (d1c4 <usbdc_xfer+0x1c>)
    d1bc:	4798      	blx	r3
}
    d1be:	b005      	add	sp, #20
    d1c0:	f85d fb04 	ldr.w	pc, [sp], #4
    d1c4:	000024dd 	.word	0x000024dd

0000d1c8 <usbdc_cb_ctl_req>:
{
    d1c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d1cc:	b083      	sub	sp, #12
    d1ce:	4605      	mov	r5, r0
    d1d0:	460c      	mov	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    d1d2:	2200      	movs	r2, #0
    d1d4:	4b9b      	ldr	r3, [pc, #620]	; (d444 <usbdc_cb_ctl_req+0x27c>)
    d1d6:	4798      	blx	r3
    d1d8:	f1b0 3fff 	cmp.w	r0, #4294967295
    d1dc:	d00b      	beq.n	d1f6 <usbdc_cb_ctl_req+0x2e>
    d1de:	2801      	cmp	r0, #1
    d1e0:	f000 81e3 	beq.w	d5aa <usbdc_cb_ctl_req+0x3e2>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    d1e4:	7823      	ldrb	r3, [r4, #0]
    d1e6:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    d1ea:	d008      	beq.n	d1fe <usbdc_cb_ctl_req+0x36>
    d1ec:	2a80      	cmp	r2, #128	; 0x80
    d1ee:	f000 80f4 	beq.w	d3da <usbdc_cb_ctl_req+0x212>
		return false;
    d1f2:	2000      	movs	r0, #0
    d1f4:	e000      	b.n	d1f8 <usbdc_cb_ctl_req+0x30>
		return false;
    d1f6:	2000      	movs	r0, #0
}
    d1f8:	b003      	add	sp, #12
    d1fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (req->bRequest) {
    d1fe:	7862      	ldrb	r2, [r4, #1]
    d200:	3a01      	subs	r2, #1
    d202:	2a0a      	cmp	r2, #10
    d204:	f200 81d3 	bhi.w	d5ae <usbdc_cb_ctl_req+0x3e6>
    d208:	e8df f012 	tbh	[pc, r2, lsl #1]
    d20c:	01d10060 	.word	0x01d10060
    d210:	01d10076 	.word	0x01d10076
    d214:	01d1000b 	.word	0x01d1000b
    d218:	01d101d1 	.word	0x01d101d1
    d21c:	01d10015 	.word	0x01d10015
    d220:	008c      	.short	0x008c
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    d222:	2301      	movs	r3, #1
    d224:	2200      	movs	r2, #0
    d226:	4611      	mov	r1, r2
    d228:	4628      	mov	r0, r5
    d22a:	4c87      	ldr	r4, [pc, #540]	; (d448 <usbdc_cb_ctl_req+0x280>)
    d22c:	47a0      	blx	r4
    d22e:	fab0 f080 	clz	r0, r0
    d232:	0940      	lsrs	r0, r0, #5
    d234:	e7e0      	b.n	d1f8 <usbdc_cb_ctl_req+0x30>
		if (!usbdc_set_config(req->wValue)) {
    d236:	8862      	ldrh	r2, [r4, #2]
    d238:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    d23a:	b1ca      	cbz	r2, d270 <usbdc_cb_ctl_req+0xa8>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    d23c:	4b83      	ldr	r3, [pc, #524]	; (d44c <usbdc_cb_ctl_req+0x284>)
    d23e:	681b      	ldr	r3, [r3, #0]
    d240:	6859      	ldr	r1, [r3, #4]
    d242:	6818      	ldr	r0, [r3, #0]
    d244:	4b82      	ldr	r3, [pc, #520]	; (d450 <usbdc_cb_ctl_req+0x288>)
    d246:	4798      	blx	r3
	if (NULL == cfg_desc) {
    d248:	2800      	cmp	r0, #0
    d24a:	f000 81be 	beq.w	d5ca <usbdc_cb_ctl_req+0x402>
	return (ptr[0] + (ptr[1] << 8));
    d24e:	78c2      	ldrb	r2, [r0, #3]
    d250:	7881      	ldrb	r1, [r0, #2]
    d252:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod  = cfg_desc + total_len;
    d256:	fa10 f181 	uxtah	r1, r0, r1
    d25a:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    d25c:	2204      	movs	r2, #4
    d25e:	4b7d      	ldr	r3, [pc, #500]	; (d454 <usbdc_cb_ctl_req+0x28c>)
    d260:	4798      	blx	r3
    d262:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    d264:	b130      	cbz	r0, d274 <usbdc_cb_ctl_req+0xac>
    d266:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    d268:	f8df 81e0 	ldr.w	r8, [pc, #480]	; d44c <usbdc_cb_ctl_req+0x284>
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    d26c:	4f79      	ldr	r7, [pc, #484]	; (d454 <usbdc_cb_ctl_req+0x28c>)
    d26e:	e018      	b.n	d2a2 <usbdc_cb_ctl_req+0xda>
		usbdc_unconfig();
    d270:	4b79      	ldr	r3, [pc, #484]	; (d458 <usbdc_cb_ctl_req+0x290>)
    d272:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    d274:	2301      	movs	r3, #1
    d276:	2200      	movs	r2, #0
    d278:	4611      	mov	r1, r2
    d27a:	4628      	mov	r0, r5
    d27c:	4c72      	ldr	r4, [pc, #456]	; (d448 <usbdc_cb_ctl_req+0x280>)
    d27e:	47a0      	blx	r4
    d280:	fab0 f080 	clz	r0, r0
    d284:	0940      	lsrs	r0, r0, #5
    d286:	e7b7      	b.n	d1f8 <usbdc_cb_ctl_req+0x30>
			last_iface = desc.sod[2];
    d288:	464c      	mov	r4, r9
    d28a:	e000      	b.n	d28e <usbdc_cb_ctl_req+0xc6>
    d28c:	464c      	mov	r4, r9
		desc.sod = usb_desc_next(desc.sod);
    d28e:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    d290:	7803      	ldrb	r3, [r0, #0]
    d292:	4418      	add	r0, r3
    d294:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    d296:	2204      	movs	r2, #4
    d298:	9901      	ldr	r1, [sp, #4]
    d29a:	47b8      	blx	r7
    d29c:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    d29e:	2800      	cmp	r0, #0
    d2a0:	d0e8      	beq.n	d274 <usbdc_cb_ctl_req+0xac>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    d2a2:	f890 9002 	ldrb.w	r9, [r0, #2]
    d2a6:	45a1      	cmp	r9, r4
    d2a8:	d0f1      	beq.n	d28e <usbdc_cb_ctl_req+0xc6>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    d2aa:	f8d8 4010 	ldr.w	r4, [r8, #16]
			while (NULL != func) {
    d2ae:	2c00      	cmp	r4, #0
    d2b0:	d0ea      	beq.n	d288 <usbdc_cb_ctl_req+0xc0>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    d2b2:	2600      	movs	r6, #0
    d2b4:	6863      	ldr	r3, [r4, #4]
    d2b6:	466a      	mov	r2, sp
    d2b8:	4631      	mov	r1, r6
    d2ba:	4620      	mov	r0, r4
    d2bc:	4798      	blx	r3
    d2be:	2800      	cmp	r0, #0
    d2c0:	d0e4      	beq.n	d28c <usbdc_cb_ctl_req+0xc4>
					func = func->next;
    d2c2:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    d2c4:	2c00      	cmp	r4, #0
    d2c6:	d1f5      	bne.n	d2b4 <usbdc_cb_ctl_req+0xec>
			last_iface = desc.sod[2];
    d2c8:	464c      	mov	r4, r9
    d2ca:	e7e0      	b.n	d28e <usbdc_cb_ctl_req+0xc6>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    d2cc:	f003 031f 	and.w	r3, r3, #31
    d2d0:	2b02      	cmp	r3, #2
    d2d2:	f040 816e 	bne.w	d5b2 <usbdc_cb_ctl_req+0x3ea>
		if (req->wLength != 0) {
    d2d6:	88e3      	ldrh	r3, [r4, #6]
    d2d8:	b10b      	cbz	r3, d2de <usbdc_cb_ctl_req+0x116>
			return false;
    d2da:	2000      	movs	r0, #0
    d2dc:	e78c      	b.n	d1f8 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    d2de:	88a0      	ldrh	r0, [r4, #4]
    d2e0:	2100      	movs	r1, #0
    d2e2:	b2c0      	uxtb	r0, r0
    d2e4:	4b5d      	ldr	r3, [pc, #372]	; (d45c <usbdc_cb_ctl_req+0x294>)
    d2e6:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    d2e8:	2301      	movs	r3, #1
    d2ea:	2200      	movs	r2, #0
    d2ec:	4611      	mov	r1, r2
    d2ee:	4628      	mov	r0, r5
    d2f0:	4c55      	ldr	r4, [pc, #340]	; (d448 <usbdc_cb_ctl_req+0x280>)
    d2f2:	47a0      	blx	r4
		return true;
    d2f4:	2001      	movs	r0, #1
    d2f6:	e77f      	b.n	d1f8 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    d2f8:	f003 031f 	and.w	r3, r3, #31
    d2fc:	2b02      	cmp	r3, #2
    d2fe:	f040 815a 	bne.w	d5b6 <usbdc_cb_ctl_req+0x3ee>
		if (req->wLength != 0) {
    d302:	88e3      	ldrh	r3, [r4, #6]
    d304:	b10b      	cbz	r3, d30a <usbdc_cb_ctl_req+0x142>
			return false;
    d306:	2000      	movs	r0, #0
    d308:	e776      	b.n	d1f8 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    d30a:	88a0      	ldrh	r0, [r4, #4]
    d30c:	2101      	movs	r1, #1
    d30e:	b2c0      	uxtb	r0, r0
    d310:	4b52      	ldr	r3, [pc, #328]	; (d45c <usbdc_cb_ctl_req+0x294>)
    d312:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    d314:	2301      	movs	r3, #1
    d316:	2200      	movs	r2, #0
    d318:	4611      	mov	r1, r2
    d31a:	4628      	mov	r0, r5
    d31c:	4c4a      	ldr	r4, [pc, #296]	; (d448 <usbdc_cb_ctl_req+0x280>)
    d31e:	47a0      	blx	r4
		return true;
    d320:	2001      	movs	r0, #1
    d322:	e769      	b.n	d1f8 <usbdc_cb_ctl_req+0x30>
		return usbdc_set_interface(req->wValue, req->wIndex);
    d324:	8866      	ldrh	r6, [r4, #2]
    d326:	88a4      	ldrh	r4, [r4, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    d328:	4a48      	ldr	r2, [pc, #288]	; (d44c <usbdc_cb_ctl_req+0x284>)
    d32a:	6813      	ldr	r3, [r2, #0]
    d32c:	7ed2      	ldrb	r2, [r2, #27]
    d32e:	6859      	ldr	r1, [r3, #4]
    d330:	6818      	ldr	r0, [r3, #0]
    d332:	4b47      	ldr	r3, [pc, #284]	; (d450 <usbdc_cb_ctl_req+0x288>)
    d334:	4798      	blx	r3
	if (NULL == ifc) {
    d336:	2800      	cmp	r0, #0
    d338:	d045      	beq.n	d3c6 <usbdc_cb_ctl_req+0x1fe>
	desc.sod = ifc;
    d33a:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    d33c:	78c2      	ldrb	r2, [r0, #3]
    d33e:	7881      	ldrb	r1, [r0, #2]
    d340:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    d344:	fa10 f181 	uxtah	r1, r0, r1
    d348:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    d34a:	2204      	movs	r2, #4
    d34c:	4b41      	ldr	r3, [pc, #260]	; (d454 <usbdc_cb_ctl_req+0x28c>)
    d34e:	4798      	blx	r3
    d350:	4603      	mov	r3, r0
    d352:	2800      	cmp	r0, #0
    d354:	d039      	beq.n	d3ca <usbdc_cb_ctl_req+0x202>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    d356:	2704      	movs	r7, #4
    d358:	4d3e      	ldr	r5, [pc, #248]	; (d454 <usbdc_cb_ctl_req+0x28c>)
    d35a:	e008      	b.n	d36e <usbdc_cb_ctl_req+0x1a6>
		desc.sod = usb_desc_next(desc.sod);
    d35c:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    d35e:	7803      	ldrb	r3, [r0, #0]
    d360:	4418      	add	r0, r3
    d362:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    d364:	463a      	mov	r2, r7
    d366:	9901      	ldr	r1, [sp, #4]
    d368:	47a8      	blx	r5
		if (NULL == ifc) {
    d36a:	4603      	mov	r3, r0
    d36c:	b378      	cbz	r0, d3ce <usbdc_cb_ctl_req+0x206>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    d36e:	789a      	ldrb	r2, [r3, #2]
    d370:	42a2      	cmp	r2, r4
    d372:	d1f3      	bne.n	d35c <usbdc_cb_ctl_req+0x194>
    d374:	78da      	ldrb	r2, [r3, #3]
    d376:	42b2      	cmp	r2, r6
    d378:	d1f0      	bne.n	d35c <usbdc_cb_ctl_req+0x194>
	desc.sod = ifc;
    d37a:	9300      	str	r3, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    d37c:	4b33      	ldr	r3, [pc, #204]	; (d44c <usbdc_cb_ctl_req+0x284>)
    d37e:	691d      	ldr	r5, [r3, #16]
	while (NULL != func) {
    d380:	b33d      	cbz	r5, d3d2 <usbdc_cb_ctl_req+0x20a>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    d382:	2701      	movs	r7, #1
    d384:	686b      	ldr	r3, [r5, #4]
    d386:	466a      	mov	r2, sp
    d388:	4639      	mov	r1, r7
    d38a:	4628      	mov	r0, r5
    d38c:	4798      	blx	r3
    d38e:	b120      	cbz	r0, d39a <usbdc_cb_ctl_req+0x1d2>
			func = func->next;
    d390:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    d392:	2d00      	cmp	r5, #0
    d394:	d1f6      	bne.n	d384 <usbdc_cb_ctl_req+0x1bc>
	return false;
    d396:	2000      	movs	r0, #0
    d398:	e72e      	b.n	d1f8 <usbdc_cb_ctl_req+0x30>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    d39a:	686b      	ldr	r3, [r5, #4]
    d39c:	466a      	mov	r2, sp
    d39e:	2100      	movs	r1, #0
    d3a0:	4628      	mov	r0, r5
    d3a2:	4798      	blx	r3
    d3a4:	b9b8      	cbnz	r0, d3d6 <usbdc_cb_ctl_req+0x20e>
			if (alt_set) {
    d3a6:	b136      	cbz	r6, d3b6 <usbdc_cb_ctl_req+0x1ee>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    d3a8:	4a28      	ldr	r2, [pc, #160]	; (d44c <usbdc_cb_ctl_req+0x284>)
    d3aa:	2301      	movs	r3, #1
    d3ac:	fa03 f404 	lsl.w	r4, r3, r4
    d3b0:	7f53      	ldrb	r3, [r2, #29]
    d3b2:	4323      	orrs	r3, r4
    d3b4:	7753      	strb	r3, [r2, #29]
			usbdc_xfer(0, NULL, 0, 0);
    d3b6:	2300      	movs	r3, #0
    d3b8:	461a      	mov	r2, r3
    d3ba:	4619      	mov	r1, r3
    d3bc:	4618      	mov	r0, r3
    d3be:	4c22      	ldr	r4, [pc, #136]	; (d448 <usbdc_cb_ctl_req+0x280>)
    d3c0:	47a0      	blx	r4
			return true;
    d3c2:	2001      	movs	r0, #1
    d3c4:	e718      	b.n	d1f8 <usbdc_cb_ctl_req+0x30>
		return false;
    d3c6:	2000      	movs	r0, #0
    d3c8:	e716      	b.n	d1f8 <usbdc_cb_ctl_req+0x30>
		return false;
    d3ca:	2000      	movs	r0, #0
    d3cc:	e714      	b.n	d1f8 <usbdc_cb_ctl_req+0x30>
			return false;
    d3ce:	2000      	movs	r0, #0
    d3d0:	e712      	b.n	d1f8 <usbdc_cb_ctl_req+0x30>
	return false;
    d3d2:	2000      	movs	r0, #0
    d3d4:	e710      	b.n	d1f8 <usbdc_cb_ctl_req+0x30>
			return false;
    d3d6:	2000      	movs	r0, #0
    d3d8:	e70e      	b.n	d1f8 <usbdc_cb_ctl_req+0x30>
	switch (req->bRequest) {
    d3da:	7862      	ldrb	r2, [r4, #1]
    d3dc:	2a0a      	cmp	r2, #10
    d3de:	f200 80ec 	bhi.w	d5ba <usbdc_cb_ctl_req+0x3f2>
    d3e2:	e8df f012 	tbh	[pc, r2, lsl #1]
    d3e6:	008e      	.short	0x008e
    d3e8:	00ea00ea 	.word	0x00ea00ea
    d3ec:	00ea00ea 	.word	0x00ea00ea
    d3f0:	000b00ea 	.word	0x000b00ea
    d3f4:	008200ea 	.word	0x008200ea
    d3f8:	00b200ea 	.word	0x00b200ea
	uint8_t type = (uint8_t)(req->wValue >> 8);
    d3fc:	8862      	ldrh	r2, [r4, #2]
	switch (type) {
    d3fe:	0a13      	lsrs	r3, r2, #8
    d400:	2b02      	cmp	r3, #2
    d402:	d02d      	beq.n	d460 <usbdc_cb_ctl_req+0x298>
    d404:	2b03      	cmp	r3, #3
    d406:	d050      	beq.n	d4aa <usbdc_cb_ctl_req+0x2e2>
    d408:	2b01      	cmp	r3, #1
    d40a:	d001      	beq.n	d410 <usbdc_cb_ctl_req+0x248>
	return false;
    d40c:	2000      	movs	r0, #0
    d40e:	e6f3      	b.n	d1f8 <usbdc_cb_ctl_req+0x30>
	uint16_t length   = req->wLength;
    d410:	88e2      	ldrh	r2, [r4, #6]
    d412:	2a12      	cmp	r2, #18
    d414:	bf28      	it	cs
    d416:	2212      	movcs	r2, #18
    d418:	4614      	mov	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    d41a:	4b0c      	ldr	r3, [pc, #48]	; (d44c <usbdc_cb_ctl_req+0x284>)
    d41c:	681b      	ldr	r3, [r3, #0]
    d41e:	2201      	movs	r2, #1
    d420:	6859      	ldr	r1, [r3, #4]
    d422:	6818      	ldr	r0, [r3, #0]
    d424:	4b0b      	ldr	r3, [pc, #44]	; (d454 <usbdc_cb_ctl_req+0x28c>)
    d426:	4798      	blx	r3
	if (!dev_desc) {
    d428:	4601      	mov	r1, r0
    d42a:	2800      	cmp	r0, #0
    d42c:	f000 80c7 	beq.w	d5be <usbdc_cb_ctl_req+0x3f6>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    d430:	2300      	movs	r3, #0
    d432:	4622      	mov	r2, r4
    d434:	4628      	mov	r0, r5
    d436:	4c04      	ldr	r4, [pc, #16]	; (d448 <usbdc_cb_ctl_req+0x280>)
    d438:	47a0      	blx	r4
    d43a:	fab0 f080 	clz	r0, r0
    d43e:	0940      	lsrs	r0, r0, #5
    d440:	e6da      	b.n	d1f8 <usbdc_cb_ctl_req+0x30>
    d442:	bf00      	nop
    d444:	0000d05d 	.word	0x0000d05d
    d448:	0000d1a9 	.word	0x0000d1a9
    d44c:	20007364 	.word	0x20007364
    d450:	0000d76d 	.word	0x0000d76d
    d454:	0000d6ed 	.word	0x0000d6ed
    d458:	0000d011 	.word	0x0000d011
    d45c:	000025fd 	.word	0x000025fd
	uint16_t length   = req->wLength;
    d460:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    d462:	4b5b      	ldr	r3, [pc, #364]	; (d5d0 <usbdc_cb_ctl_req+0x408>)
    d464:	7f1e      	ldrb	r6, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    d466:	681b      	ldr	r3, [r3, #0]
    d468:	3201      	adds	r2, #1
    d46a:	b2d2      	uxtb	r2, r2
    d46c:	6859      	ldr	r1, [r3, #4]
    d46e:	6818      	ldr	r0, [r3, #0]
    d470:	4b58      	ldr	r3, [pc, #352]	; (d5d4 <usbdc_cb_ctl_req+0x40c>)
    d472:	4798      	blx	r3
	if (NULL == cfg_desc) {
    d474:	4601      	mov	r1, r0
    d476:	2800      	cmp	r0, #0
    d478:	f000 80a3 	beq.w	d5c2 <usbdc_cb_ctl_req+0x3fa>
	return (ptr[0] + (ptr[1] << 8));
    d47c:	78c3      	ldrb	r3, [r0, #3]
    d47e:	7882      	ldrb	r2, [r0, #2]
    d480:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    d484:	b292      	uxth	r2, r2
	if (length <= total_len) {
    d486:	4294      	cmp	r4, r2
    d488:	d90d      	bls.n	d4a6 <usbdc_cb_ctl_req+0x2de>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    d48a:	3e01      	subs	r6, #1
    d48c:	4226      	tst	r6, r4
    d48e:	bf0c      	ite	eq
    d490:	2301      	moveq	r3, #1
    d492:	2300      	movne	r3, #0
		length = total_len;
    d494:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    d496:	4622      	mov	r2, r4
    d498:	4628      	mov	r0, r5
    d49a:	4c4f      	ldr	r4, [pc, #316]	; (d5d8 <usbdc_cb_ctl_req+0x410>)
    d49c:	47a0      	blx	r4
    d49e:	fab0 f080 	clz	r0, r0
    d4a2:	0940      	lsrs	r0, r0, #5
    d4a4:	e6a8      	b.n	d1f8 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    d4a6:	2300      	movs	r3, #0
    d4a8:	e7f5      	b.n	d496 <usbdc_cb_ctl_req+0x2ce>
	uint16_t length   = req->wLength;
    d4aa:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    d4ac:	4b48      	ldr	r3, [pc, #288]	; (d5d0 <usbdc_cb_ctl_req+0x408>)
    d4ae:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    d4b0:	681b      	ldr	r3, [r3, #0]
    d4b2:	b2d2      	uxtb	r2, r2
    d4b4:	6859      	ldr	r1, [r3, #4]
    d4b6:	6818      	ldr	r0, [r3, #0]
    d4b8:	4b48      	ldr	r3, [pc, #288]	; (d5dc <usbdc_cb_ctl_req+0x414>)
    d4ba:	4798      	blx	r3
	if (NULL == str_desc) {
    d4bc:	4601      	mov	r1, r0
    d4be:	2800      	cmp	r0, #0
    d4c0:	f000 8081 	beq.w	d5c6 <usbdc_cb_ctl_req+0x3fe>
	if (length <= str_desc[0]) {
    d4c4:	7802      	ldrb	r2, [r0, #0]
    d4c6:	4294      	cmp	r4, r2
    d4c8:	d90d      	bls.n	d4e6 <usbdc_cb_ctl_req+0x31e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    d4ca:	3e01      	subs	r6, #1
    d4cc:	4226      	tst	r6, r4
    d4ce:	bf0c      	ite	eq
    d4d0:	2301      	moveq	r3, #1
    d4d2:	2300      	movne	r3, #0
		length = str_desc[0];
    d4d4:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    d4d6:	4622      	mov	r2, r4
    d4d8:	4628      	mov	r0, r5
    d4da:	4c3f      	ldr	r4, [pc, #252]	; (d5d8 <usbdc_cb_ctl_req+0x410>)
    d4dc:	47a0      	blx	r4
    d4de:	fab0 f080 	clz	r0, r0
    d4e2:	0940      	lsrs	r0, r0, #5
    d4e4:	e688      	b.n	d1f8 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    d4e6:	2300      	movs	r3, #0
    d4e8:	e7f5      	b.n	d4d6 <usbdc_cb_ctl_req+0x30e>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    d4ea:	4939      	ldr	r1, [pc, #228]	; (d5d0 <usbdc_cb_ctl_req+0x408>)
    d4ec:	694b      	ldr	r3, [r1, #20]
    d4ee:	7eca      	ldrb	r2, [r1, #27]
    d4f0:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    d4f2:	2300      	movs	r3, #0
    d4f4:	2201      	movs	r2, #1
    d4f6:	6949      	ldr	r1, [r1, #20]
    d4f8:	4628      	mov	r0, r5
    d4fa:	4c37      	ldr	r4, [pc, #220]	; (d5d8 <usbdc_cb_ctl_req+0x410>)
    d4fc:	47a0      	blx	r4
		return true;
    d4fe:	2001      	movs	r0, #1
    d500:	e67a      	b.n	d1f8 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    d502:	f003 031f 	and.w	r3, r3, #31
    d506:	2b01      	cmp	r3, #1
    d508:	d903      	bls.n	d512 <usbdc_cb_ctl_req+0x34a>
    d50a:	2b02      	cmp	r3, #2
    d50c:	d010      	beq.n	d530 <usbdc_cb_ctl_req+0x368>
		return false;
    d50e:	2000      	movs	r0, #0
    d510:	e672      	b.n	d1f8 <usbdc_cb_ctl_req+0x30>
		st = 0;
    d512:	2300      	movs	r3, #0
    d514:	9300      	str	r3, [sp, #0]
	memcpy(usbdc.ctrl_buf, &st, 2);
    d516:	492e      	ldr	r1, [pc, #184]	; (d5d0 <usbdc_cb_ctl_req+0x408>)
    d518:	694b      	ldr	r3, [r1, #20]
    d51a:	f8bd 2000 	ldrh.w	r2, [sp]
    d51e:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    d520:	2300      	movs	r3, #0
    d522:	2202      	movs	r2, #2
    d524:	6949      	ldr	r1, [r1, #20]
    d526:	4628      	mov	r0, r5
    d528:	4c2b      	ldr	r4, [pc, #172]	; (d5d8 <usbdc_cb_ctl_req+0x410>)
    d52a:	47a0      	blx	r4
	return true;
    d52c:	2001      	movs	r0, #1
    d52e:	e663      	b.n	d1f8 <usbdc_cb_ctl_req+0x30>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    d530:	88a0      	ldrh	r0, [r4, #4]
    d532:	2102      	movs	r1, #2
    d534:	b2c0      	uxtb	r0, r0
    d536:	4b2a      	ldr	r3, [pc, #168]	; (d5e0 <usbdc_cb_ctl_req+0x418>)
    d538:	4798      	blx	r3
		if (st < 0) {
    d53a:	2800      	cmp	r0, #0
    d53c:	db03      	blt.n	d546 <usbdc_cb_ctl_req+0x37e>
		st = st & 0x1;
    d53e:	f000 0001 	and.w	r0, r0, #1
    d542:	9000      	str	r0, [sp, #0]
    d544:	e7e7      	b.n	d516 <usbdc_cb_ctl_req+0x34e>
			return false;
    d546:	2000      	movs	r0, #0
    d548:	e656      	b.n	d1f8 <usbdc_cb_ctl_req+0x30>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    d54a:	4b21      	ldr	r3, [pc, #132]	; (d5d0 <usbdc_cb_ctl_req+0x408>)
    d54c:	7f5b      	ldrb	r3, [r3, #29]
    d54e:	88a2      	ldrh	r2, [r4, #4]
    d550:	4113      	asrs	r3, r2
    d552:	f013 0f01 	tst.w	r3, #1
    d556:	d012      	beq.n	d57e <usbdc_cb_ctl_req+0x3b6>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    d558:	4b1d      	ldr	r3, [pc, #116]	; (d5d0 <usbdc_cb_ctl_req+0x408>)
    d55a:	691d      	ldr	r5, [r3, #16]
	return false;
    d55c:	2000      	movs	r0, #0
	while (NULL != func) {
    d55e:	2d00      	cmp	r5, #0
    d560:	f43f ae4a 	beq.w	d1f8 <usbdc_cb_ctl_req+0x30>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    d564:	2602      	movs	r6, #2
    d566:	686b      	ldr	r3, [r5, #4]
    d568:	4622      	mov	r2, r4
    d56a:	4631      	mov	r1, r6
    d56c:	4628      	mov	r0, r5
    d56e:	4798      	blx	r3
    d570:	2800      	cmp	r0, #0
    d572:	da0f      	bge.n	d594 <usbdc_cb_ctl_req+0x3cc>
			func = func->next;
    d574:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    d576:	2d00      	cmp	r5, #0
    d578:	d1f5      	bne.n	d566 <usbdc_cb_ctl_req+0x39e>
	return false;
    d57a:	2000      	movs	r0, #0
    d57c:	e63c      	b.n	d1f8 <usbdc_cb_ctl_req+0x30>
		usbdc.ctrl_buf[0] = 0;
    d57e:	4914      	ldr	r1, [pc, #80]	; (d5d0 <usbdc_cb_ctl_req+0x408>)
    d580:	694b      	ldr	r3, [r1, #20]
    d582:	2000      	movs	r0, #0
    d584:	7018      	strb	r0, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    d586:	4603      	mov	r3, r0
    d588:	2201      	movs	r2, #1
    d58a:	6949      	ldr	r1, [r1, #20]
    d58c:	4c12      	ldr	r4, [pc, #72]	; (d5d8 <usbdc_cb_ctl_req+0x410>)
    d58e:	47a0      	blx	r4
		return true;
    d590:	2001      	movs	r0, #1
    d592:	e631      	b.n	d1f8 <usbdc_cb_ctl_req+0x30>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    d594:	490e      	ldr	r1, [pc, #56]	; (d5d0 <usbdc_cb_ctl_req+0x408>)
    d596:	694b      	ldr	r3, [r1, #20]
    d598:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    d59a:	2300      	movs	r3, #0
    d59c:	2201      	movs	r2, #1
    d59e:	6949      	ldr	r1, [r1, #20]
    d5a0:	4618      	mov	r0, r3
    d5a2:	4c0d      	ldr	r4, [pc, #52]	; (d5d8 <usbdc_cb_ctl_req+0x410>)
    d5a4:	47a0      	blx	r4
			return true;
    d5a6:	2001      	movs	r0, #1
    d5a8:	e626      	b.n	d1f8 <usbdc_cb_ctl_req+0x30>
		return true;
    d5aa:	2001      	movs	r0, #1
    d5ac:	e624      	b.n	d1f8 <usbdc_cb_ctl_req+0x30>
		return false;
    d5ae:	2000      	movs	r0, #0
    d5b0:	e622      	b.n	d1f8 <usbdc_cb_ctl_req+0x30>
		return false;
    d5b2:	2000      	movs	r0, #0
    d5b4:	e620      	b.n	d1f8 <usbdc_cb_ctl_req+0x30>
		return false;
    d5b6:	2000      	movs	r0, #0
    d5b8:	e61e      	b.n	d1f8 <usbdc_cb_ctl_req+0x30>
		return false;
    d5ba:	2000      	movs	r0, #0
    d5bc:	e61c      	b.n	d1f8 <usbdc_cb_ctl_req+0x30>
		return false;
    d5be:	2000      	movs	r0, #0
    d5c0:	e61a      	b.n	d1f8 <usbdc_cb_ctl_req+0x30>
		return false;
    d5c2:	2000      	movs	r0, #0
    d5c4:	e618      	b.n	d1f8 <usbdc_cb_ctl_req+0x30>
		return false;
    d5c6:	2000      	movs	r0, #0
    d5c8:	e616      	b.n	d1f8 <usbdc_cb_ctl_req+0x30>
			return false;
    d5ca:	2000      	movs	r0, #0
    d5cc:	e614      	b.n	d1f8 <usbdc_cb_ctl_req+0x30>
    d5ce:	bf00      	nop
    d5d0:	20007364 	.word	0x20007364
    d5d4:	0000d76d 	.word	0x0000d76d
    d5d8:	0000d1a9 	.word	0x0000d1a9
    d5dc:	0000d7d5 	.word	0x0000d7d5
    d5e0:	000025fd 	.word	0x000025fd

0000d5e4 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    d5e4:	b508      	push	{r3, lr}
	switch (type) {
    d5e6:	2801      	cmp	r0, #1
    d5e8:	d007      	beq.n	d5fa <usbdc_register_handler+0x16>
    d5ea:	b110      	cbz	r0, d5f2 <usbdc_register_handler+0xe>
    d5ec:	2802      	cmp	r0, #2
    d5ee:	d008      	beq.n	d602 <usbdc_register_handler+0x1e>
    d5f0:	bd08      	pop	{r3, pc}
	case USBDC_HDL_SOF:
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    d5f2:	4806      	ldr	r0, [pc, #24]	; (d60c <usbdc_register_handler+0x28>)
    d5f4:	4b06      	ldr	r3, [pc, #24]	; (d610 <usbdc_register_handler+0x2c>)
    d5f6:	4798      	blx	r3
		break;
    d5f8:	bd08      	pop	{r3, pc}
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    d5fa:	4806      	ldr	r0, [pc, #24]	; (d614 <usbdc_register_handler+0x30>)
    d5fc:	4b04      	ldr	r3, [pc, #16]	; (d610 <usbdc_register_handler+0x2c>)
    d5fe:	4798      	blx	r3
		break;
    d600:	bd08      	pop	{r3, pc}
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    d602:	4805      	ldr	r0, [pc, #20]	; (d618 <usbdc_register_handler+0x34>)
    d604:	4b02      	ldr	r3, [pc, #8]	; (d610 <usbdc_register_handler+0x2c>)
    d606:	4798      	blx	r3
    d608:	bd08      	pop	{r3, pc}
    d60a:	bf00      	nop
    d60c:	20007368 	.word	0x20007368
    d610:	0000270d 	.word	0x0000270d
    d614:	2000736c 	.word	0x2000736c
    d618:	20007370 	.word	0x20007370

0000d61c <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    d61c:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
    d61e:	4605      	mov	r5, r0
    d620:	f240 3255 	movw	r2, #853	; 0x355
    d624:	490c      	ldr	r1, [pc, #48]	; (d658 <usbdc_init+0x3c>)
    d626:	3000      	adds	r0, #0
    d628:	bf18      	it	ne
    d62a:	2001      	movne	r0, #1
    d62c:	4b0b      	ldr	r3, [pc, #44]	; (d65c <usbdc_init+0x40>)
    d62e:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    d630:	4b0b      	ldr	r3, [pc, #44]	; (d660 <usbdc_init+0x44>)
    d632:	4798      	blx	r3
	if (rc < 0) {
    d634:	2800      	cmp	r0, #0
    d636:	db0e      	blt.n	d656 <usbdc_init+0x3a>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    d638:	4c0a      	ldr	r4, [pc, #40]	; (d664 <usbdc_init+0x48>)
    d63a:	2220      	movs	r2, #32
    d63c:	2100      	movs	r1, #0
    d63e:	4620      	mov	r0, r4
    d640:	4b09      	ldr	r3, [pc, #36]	; (d668 <usbdc_init+0x4c>)
    d642:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    d644:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    d646:	4909      	ldr	r1, [pc, #36]	; (d66c <usbdc_init+0x50>)
    d648:	2000      	movs	r0, #0
    d64a:	4c09      	ldr	r4, [pc, #36]	; (d670 <usbdc_init+0x54>)
    d64c:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    d64e:	4909      	ldr	r1, [pc, #36]	; (d674 <usbdc_init+0x58>)
    d650:	2001      	movs	r0, #1
    d652:	47a0      	blx	r4

	return 0;
    d654:	2000      	movs	r0, #0
}
    d656:	bd38      	pop	{r3, r4, r5, pc}
    d658:	000115a4 	.word	0x000115a4
    d65c:	000026b1 	.word	0x000026b1
    d660:	00002365 	.word	0x00002365
    d664:	20007364 	.word	0x20007364
    d668:	0000dab5 	.word	0x0000dab5
    d66c:	0000d09d 	.word	0x0000d09d
    d670:	000023cd 	.word	0x000023cd
    d674:	0000d189 	.word	0x0000d189

0000d678 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    d678:	b508      	push	{r3, lr}
	list_insert_at_end(&usbdc.func_list, func);
    d67a:	4601      	mov	r1, r0
    d67c:	4801      	ldr	r0, [pc, #4]	; (d684 <usbdc_register_function+0xc>)
    d67e:	4b02      	ldr	r3, [pc, #8]	; (d688 <usbdc_register_function+0x10>)
    d680:	4798      	blx	r3
    d682:	bd08      	pop	{r3, pc}
    d684:	20007374 	.word	0x20007374
    d688:	0000270d 	.word	0x0000270d

0000d68c <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    d68c:	b508      	push	{r3, lr}
	if (usbdc.state >= USBD_S_POWER) {
    d68e:	4b0a      	ldr	r3, [pc, #40]	; (d6b8 <usbdc_start+0x2c>)
    d690:	7e9b      	ldrb	r3, [r3, #26]
    d692:	b95b      	cbnz	r3, d6ac <usbdc_start+0x20>
		return ERR_BUSY;
	}

	if (desces) {
    d694:	b168      	cbz	r0, d6b2 <usbdc_start+0x26>
		usbdc.desces.ls_fs = desces;
    d696:	4b08      	ldr	r3, [pc, #32]	; (d6b8 <usbdc_start+0x2c>)
    d698:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    d69a:	6802      	ldr	r2, [r0, #0]
    d69c:	79d2      	ldrb	r2, [r2, #7]
    d69e:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    d6a0:	2201      	movs	r2, #1
    d6a2:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    d6a4:	4b05      	ldr	r3, [pc, #20]	; (d6bc <usbdc_start+0x30>)
    d6a6:	4798      	blx	r3
	return ERR_NONE;
    d6a8:	2000      	movs	r0, #0
    d6aa:	bd08      	pop	{r3, pc}
		return ERR_BUSY;
    d6ac:	f06f 0003 	mvn.w	r0, #3
    d6b0:	bd08      	pop	{r3, pc}
		return ERR_BAD_DATA;
    d6b2:	f06f 0008 	mvn.w	r0, #8
}
    d6b6:	bd08      	pop	{r3, pc}
    d6b8:	20007364 	.word	0x20007364
    d6bc:	000023d9 	.word	0x000023d9

0000d6c0 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    d6c0:	b508      	push	{r3, lr}
	usb_d_attach();
    d6c2:	4b01      	ldr	r3, [pc, #4]	; (d6c8 <usbdc_attach+0x8>)
    d6c4:	4798      	blx	r3
    d6c6:	bd08      	pop	{r3, pc}
    d6c8:	000023e5 	.word	0x000023e5

0000d6cc <usbdc_get_ctrl_buffer>:
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
}
    d6cc:	4b01      	ldr	r3, [pc, #4]	; (d6d4 <usbdc_get_ctrl_buffer+0x8>)
    d6ce:	6958      	ldr	r0, [r3, #20]
    d6d0:	4770      	bx	lr
    d6d2:	bf00      	nop
    d6d4:	20007364 	.word	0x20007364

0000d6d8 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    d6d8:	4b03      	ldr	r3, [pc, #12]	; (d6e8 <usbdc_get_state+0x10>)
    d6da:	7e98      	ldrb	r0, [r3, #26]
    d6dc:	f000 0310 	and.w	r3, r0, #16
		return USBD_S_SUSPEND;
    d6e0:	2b00      	cmp	r3, #0
	}
	return usbdc.state;
}
    d6e2:	bf18      	it	ne
    d6e4:	2010      	movne	r0, #16
    d6e6:	4770      	bx	lr
    d6e8:	20007364 	.word	0x20007364

0000d6ec <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    d6ec:	4288      	cmp	r0, r1
    d6ee:	d213      	bcs.n	d718 <usb_find_desc+0x2c>
	return desc[0];
    d6f0:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    d6f2:	2b01      	cmp	r3, #1
    d6f4:	d912      	bls.n	d71c <usb_find_desc+0x30>
{
    d6f6:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    d6f8:	7844      	ldrb	r4, [r0, #1]
    d6fa:	4294      	cmp	r4, r2
    d6fc:	d00a      	beq.n	d714 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    d6fe:	4418      	add	r0, r3
	while (desc < eof) {
    d700:	4281      	cmp	r1, r0
    d702:	d906      	bls.n	d712 <usb_find_desc+0x26>
	return desc[0];
    d704:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    d706:	2b01      	cmp	r3, #1
    d708:	d90a      	bls.n	d720 <usb_find_desc+0x34>
	return desc[1];
    d70a:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    d70c:	4294      	cmp	r4, r2
    d70e:	d1f6      	bne.n	d6fe <usb_find_desc+0x12>
    d710:	e000      	b.n	d714 <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    d712:	2000      	movs	r0, #0
}
    d714:	bc10      	pop	{r4}
    d716:	4770      	bx	lr
	return NULL;
    d718:	2000      	movs	r0, #0
    d71a:	4770      	bx	lr
		_desc_len_check();
    d71c:	2000      	movs	r0, #0
    d71e:	4770      	bx	lr
    d720:	2000      	movs	r0, #0
    d722:	e7f7      	b.n	d714 <usb_find_desc+0x28>

0000d724 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    d724:	4288      	cmp	r0, r1
    d726:	d216      	bcs.n	d756 <usb_find_ep_desc+0x32>
	return desc[0];
    d728:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    d72a:	2b01      	cmp	r3, #1
    d72c:	d915      	bls.n	d75a <usb_find_ep_desc+0x36>
	return desc[1];
    d72e:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    d730:	2a04      	cmp	r2, #4
    d732:	d014      	beq.n	d75e <usb_find_ep_desc+0x3a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    d734:	2a05      	cmp	r2, #5
    d736:	d00b      	beq.n	d750 <usb_find_ep_desc+0x2c>
	return (desc + usb_desc_len(desc));
    d738:	4418      	add	r0, r3
	while (desc < eof) {
    d73a:	4281      	cmp	r1, r0
    d73c:	d909      	bls.n	d752 <usb_find_ep_desc+0x2e>
	return desc[0];
    d73e:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    d740:	2b01      	cmp	r3, #1
    d742:	d90e      	bls.n	d762 <usb_find_ep_desc+0x3e>
	return desc[1];
    d744:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    d746:	2a04      	cmp	r2, #4
    d748:	d00d      	beq.n	d766 <usb_find_ep_desc+0x42>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    d74a:	2a05      	cmp	r2, #5
    d74c:	d1f4      	bne.n	d738 <usb_find_ep_desc+0x14>
    d74e:	e00b      	b.n	d768 <usb_find_ep_desc+0x44>
    d750:	4770      	bx	lr
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    d752:	2000      	movs	r0, #0
    d754:	4770      	bx	lr
    d756:	2000      	movs	r0, #0
    d758:	4770      	bx	lr
		_desc_len_check();
    d75a:	2000      	movs	r0, #0
    d75c:	4770      	bx	lr
	return NULL;
    d75e:	2000      	movs	r0, #0
    d760:	4770      	bx	lr
		_desc_len_check();
    d762:	2000      	movs	r0, #0
    d764:	4770      	bx	lr
	return NULL;
    d766:	2000      	movs	r0, #0
}
    d768:	4770      	bx	lr
	...

0000d76c <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    d76c:	b538      	push	{r3, r4, r5, lr}
    d76e:	460c      	mov	r4, r1
    d770:	4615      	mov	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    d772:	2202      	movs	r2, #2
    d774:	4b16      	ldr	r3, [pc, #88]	; (d7d0 <usb_find_cfg_desc+0x64>)
    d776:	4798      	blx	r3
	if (!desc) {
    d778:	4603      	mov	r3, r0
    d77a:	b1e8      	cbz	r0, d7b8 <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    d77c:	4284      	cmp	r4, r0
    d77e:	d91d      	bls.n	d7bc <usb_find_cfg_desc+0x50>
		_desc_len_check();
    d780:	7802      	ldrb	r2, [r0, #0]
    d782:	2a01      	cmp	r2, #1
    d784:	d91c      	bls.n	d7c0 <usb_find_cfg_desc+0x54>
		if (desc[1] != USB_DT_CONFIG) {
    d786:	7842      	ldrb	r2, [r0, #1]
    d788:	2a02      	cmp	r2, #2
    d78a:	d11b      	bne.n	d7c4 <usb_find_cfg_desc+0x58>
			break;
		}
		if (desc[5] == cfg_value) {
    d78c:	7942      	ldrb	r2, [r0, #5]
    d78e:	42aa      	cmp	r2, r5
    d790:	d012      	beq.n	d7b8 <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    d792:	78d9      	ldrb	r1, [r3, #3]
    d794:	789a      	ldrb	r2, [r3, #2]
    d796:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    d79a:	fa13 f382 	uxtah	r3, r3, r2
	while (desc < eof) {
    d79e:	429c      	cmp	r4, r3
    d7a0:	d909      	bls.n	d7b6 <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    d7a2:	781a      	ldrb	r2, [r3, #0]
    d7a4:	2a01      	cmp	r2, #1
    d7a6:	d90f      	bls.n	d7c8 <usb_find_cfg_desc+0x5c>
		if (desc[1] != USB_DT_CONFIG) {
    d7a8:	785a      	ldrb	r2, [r3, #1]
    d7aa:	2a02      	cmp	r2, #2
    d7ac:	d10e      	bne.n	d7cc <usb_find_cfg_desc+0x60>
		if (desc[5] == cfg_value) {
    d7ae:	795a      	ldrb	r2, [r3, #5]
    d7b0:	42aa      	cmp	r2, r5
    d7b2:	d1ee      	bne.n	d792 <usb_find_cfg_desc+0x26>
    d7b4:	e000      	b.n	d7b8 <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    d7b6:	2300      	movs	r3, #0
}
    d7b8:	4618      	mov	r0, r3
    d7ba:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
    d7bc:	2300      	movs	r3, #0
    d7be:	e7fb      	b.n	d7b8 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    d7c0:	2300      	movs	r3, #0
    d7c2:	e7f9      	b.n	d7b8 <usb_find_cfg_desc+0x4c>
	return NULL;
    d7c4:	2300      	movs	r3, #0
    d7c6:	e7f7      	b.n	d7b8 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    d7c8:	2300      	movs	r3, #0
    d7ca:	e7f5      	b.n	d7b8 <usb_find_cfg_desc+0x4c>
	return NULL;
    d7cc:	2300      	movs	r3, #0
    d7ce:	e7f3      	b.n	d7b8 <usb_find_cfg_desc+0x4c>
    d7d0:	0000d6ed 	.word	0x0000d6ed

0000d7d4 <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    d7d4:	4288      	cmp	r0, r1
    d7d6:	d217      	bcs.n	d808 <usb_find_str_desc+0x34>
{
    d7d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d7dc:	460d      	mov	r5, r1
    d7de:	4616      	mov	r6, r2
	for (i = 0; desc < eof;) {
    d7e0:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    d7e2:	f04f 0803 	mov.w	r8, #3
    d7e6:	4f0c      	ldr	r7, [pc, #48]	; (d818 <usb_find_str_desc+0x44>)
    d7e8:	4642      	mov	r2, r8
    d7ea:	4629      	mov	r1, r5
    d7ec:	47b8      	blx	r7
		if (desc) {
    d7ee:	4603      	mov	r3, r0
    d7f0:	b170      	cbz	r0, d810 <usb_find_str_desc+0x3c>
	return desc[0];
    d7f2:	7800      	ldrb	r0, [r0, #0]
			_desc_len_check();
    d7f4:	2801      	cmp	r0, #1
    d7f6:	d90a      	bls.n	d80e <usb_find_str_desc+0x3a>
			if (i == str_index) {
    d7f8:	42a6      	cmp	r6, r4
    d7fa:	d009      	beq.n	d810 <usb_find_str_desc+0x3c>
	return (desc + usb_desc_len(desc));
    d7fc:	4418      	add	r0, r3
    d7fe:	3401      	adds	r4, #1
	for (i = 0; desc < eof;) {
    d800:	4285      	cmp	r5, r0
    d802:	d8f1      	bhi.n	d7e8 <usb_find_str_desc+0x14>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    d804:	2300      	movs	r3, #0
    d806:	e003      	b.n	d810 <usb_find_str_desc+0x3c>
    d808:	2300      	movs	r3, #0
}
    d80a:	4618      	mov	r0, r3
    d80c:	4770      	bx	lr
			_desc_len_check();
    d80e:	2300      	movs	r3, #0
}
    d810:	4618      	mov	r0, r3
    d812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d816:	bf00      	nop
    d818:	0000d6ed 	.word	0x0000d6ed

0000d81c <usb_device_cb_state_c>:

/**
 * \brief Callback invoked when Line State Change
 */
bool usb_device_cb_state_c(usb_cdc_control_signal_t state)
{
    d81c:	b510      	push	{r4, lr}
    d81e:	b082      	sub	sp, #8
    d820:	f8ad 0004 	strh.w	r0, [sp, #4]
	if (state.rs232.DTR) {
    d824:	f010 0f01 	tst.w	r0, #1
    d828:	d102      	bne.n	d830 <usb_device_cb_state_c+0x14>
		cdcdf_acm_read((uint8_t *)usbd_cdc_buffer, sizeof(usbd_cdc_buffer));
	}

	/* No error. */
	return false;
}
    d82a:	2000      	movs	r0, #0
    d82c:	b002      	add	sp, #8
    d82e:	bd10      	pop	{r4, pc}
		cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)usb_device_cb_bulk_out);
    d830:	4905      	ldr	r1, [pc, #20]	; (d848 <usb_device_cb_state_c+0x2c>)
    d832:	2000      	movs	r0, #0
    d834:	4c05      	ldr	r4, [pc, #20]	; (d84c <usb_device_cb_state_c+0x30>)
    d836:	47a0      	blx	r4
		cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)usb_device_cb_bulk_in);
    d838:	4905      	ldr	r1, [pc, #20]	; (d850 <usb_device_cb_state_c+0x34>)
    d83a:	2001      	movs	r0, #1
    d83c:	47a0      	blx	r4
		cdcdf_acm_read((uint8_t *)usbd_cdc_buffer, sizeof(usbd_cdc_buffer));
    d83e:	2140      	movs	r1, #64	; 0x40
    d840:	4804      	ldr	r0, [pc, #16]	; (d854 <usb_device_cb_state_c+0x38>)
    d842:	4b05      	ldr	r3, [pc, #20]	; (d858 <usb_device_cb_state_c+0x3c>)
    d844:	4798      	blx	r3
    d846:	e7f0      	b.n	d82a <usb_device_cb_state_c+0xe>
    d848:	0000d875 	.word	0x0000d875
    d84c:	0000cfc5 	.word	0x0000cfc5
    d850:	0000d85d 	.word	0x0000d85d
    d854:	20007384 	.word	0x20007384
    d858:	0000cf75 	.word	0x0000cf75

0000d85c <usb_device_cb_bulk_in>:
{
    d85c:	b508      	push	{r3, lr}
	cdcdf_acm_read((uint8_t *)usbd_cdc_buffer, sizeof(usbd_cdc_buffer));
    d85e:	2140      	movs	r1, #64	; 0x40
    d860:	4802      	ldr	r0, [pc, #8]	; (d86c <usb_device_cb_bulk_in+0x10>)
    d862:	4b03      	ldr	r3, [pc, #12]	; (d870 <usb_device_cb_bulk_in+0x14>)
    d864:	4798      	blx	r3
}
    d866:	2000      	movs	r0, #0
    d868:	bd08      	pop	{r3, pc}
    d86a:	bf00      	nop
    d86c:	20007384 	.word	0x20007384
    d870:	0000cf75 	.word	0x0000cf75

0000d874 <usb_device_cb_bulk_out>:
{
    d874:	b508      	push	{r3, lr}
	cdcdf_acm_write((uint8_t *)usbd_cdc_buffer, count);
    d876:	4611      	mov	r1, r2
    d878:	4802      	ldr	r0, [pc, #8]	; (d884 <usb_device_cb_bulk_out+0x10>)
    d87a:	4b03      	ldr	r3, [pc, #12]	; (d888 <usb_device_cb_bulk_out+0x14>)
    d87c:	4798      	blx	r3
}
    d87e:	2000      	movs	r0, #0
    d880:	bd08      	pop	{r3, pc}
    d882:	bf00      	nop
    d884:	20007384 	.word	0x20007384
    d888:	0000cf9d 	.word	0x0000cf9d

0000d88c <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    d88c:	b508      	push	{r3, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    d88e:	4805      	ldr	r0, [pc, #20]	; (d8a4 <cdc_device_acm_init+0x18>)
    d890:	4b05      	ldr	r3, [pc, #20]	; (d8a8 <cdc_device_acm_init+0x1c>)
    d892:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    d894:	4b05      	ldr	r3, [pc, #20]	; (d8ac <cdc_device_acm_init+0x20>)
    d896:	4798      	blx	r3

	usbdc_start(single_desc);
    d898:	4805      	ldr	r0, [pc, #20]	; (d8b0 <cdc_device_acm_init+0x24>)
    d89a:	4b06      	ldr	r3, [pc, #24]	; (d8b4 <cdc_device_acm_init+0x28>)
    d89c:	4798      	blx	r3
	usbdc_attach();
    d89e:	4b06      	ldr	r3, [pc, #24]	; (d8b8 <cdc_device_acm_init+0x2c>)
    d8a0:	4798      	blx	r3
    d8a2:	bd08      	pop	{r3, pc}
    d8a4:	200073c4 	.word	0x200073c4
    d8a8:	0000d61d 	.word	0x0000d61d
    d8ac:	0000cf31 	.word	0x0000cf31
    d8b0:	2000001c 	.word	0x2000001c
    d8b4:	0000d68d 	.word	0x0000d68d
    d8b8:	0000d6c1 	.word	0x0000d6c1

0000d8bc <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    d8bc:	b508      	push	{r3, lr}

	cdc_device_acm_init();
    d8be:	4b01      	ldr	r3, [pc, #4]	; (d8c4 <usb_init+0x8>)
    d8c0:	4798      	blx	r3
    d8c2:	bd08      	pop	{r3, pc}
    d8c4:	0000d88d 	.word	0x0000d88d

0000d8c8 <EEprom_settings>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: when requiring EEprom configuration data to be read or written to/from the non-volatile area, this facilitates the [NV] access
// Returns:     Nothing
// *****************************************************************************************************************************************************************
int EEprom_settings(unsigned char *data, unsigned int size, unsigned char write_notread)
{
    d8c8:	b510      	push	{r4, lr}
	/* If we have a write flag set, then write the setting configuration overlay image into NV ram */
	if (write_notread) {
    d8ca:	b932      	cbnz	r2, d8da <EEprom_settings+0x12>
		return nv_storage_write(1, 0, data, size);
	}
	
	/* else, if we have a read flag set, then read the setting configuration overlay image from the NV ram into the "data" pointer"*/
	return nv_storage_read(1, 0, data, size);
    d8cc:	b28b      	uxth	r3, r1
    d8ce:	4602      	mov	r2, r0
    d8d0:	2100      	movs	r1, #0
    d8d2:	2001      	movs	r0, #1
    d8d4:	4c04      	ldr	r4, [pc, #16]	; (d8e8 <EEprom_settings+0x20>)
    d8d6:	47a0      	blx	r4
}
    d8d8:	bd10      	pop	{r4, pc}
		return nv_storage_write(1, 0, data, size);
    d8da:	b28b      	uxth	r3, r1
    d8dc:	4602      	mov	r2, r0
    d8de:	2100      	movs	r1, #0
    d8e0:	2001      	movs	r0, #1
    d8e2:	4c02      	ldr	r4, [pc, #8]	; (d8ec <EEprom_settings+0x24>)
    d8e4:	47a0      	blx	r4
    d8e6:	bd10      	pop	{r4, pc}
    d8e8:	0000b40d 	.word	0x0000b40d
    d8ec:	0000b275 	.word	0x0000b275

0000d8f0 <checkKSZreg>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: check a value in an SPI register of the KSZ-Micrel Ethernet SWITCH
// Returns:     does the register value match the check value? True: False
// *****************************************************************************************************************************************************************
bool checkKSZreg(uint16_t reg, unsigned char verify)
{
    d8f0:	b570      	push	{r4, r5, r6, lr}
    d8f2:	b086      	sub	sp, #24
    d8f4:	460e      	mov	r6, r1
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    d8f6:	4c11      	ldr	r4, [pc, #68]	; (d93c <checkKSZreg+0x4c>)
    d8f8:	2580      	movs	r5, #128	; 0x80
    d8fa:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
		
	/* Lower the nCS line for this SPI device */	
	gpio_set_pin_level(PB07_SPInCS_KSZ8974, 0);	
		
    /* Setup the 3 control bytes to perform a register read operation */		
	command_dataw[0] = 0x40 + REG_SPI_READ + (unsigned char)(reg >> 7);
    d8fe:	09c3      	lsrs	r3, r0, #7
    d900:	3360      	adds	r3, #96	; 0x60
    d902:	f88d 3008 	strb.w	r3, [sp, #8]
	command_dataw[1] = (unsigned char)(reg & 0x7F) << 1;
    d906:	0040      	lsls	r0, r0, #1
    d908:	f88d 0009 	strb.w	r0, [sp, #9]
	command_dataw[2] = 0x00;
    d90c:	2300      	movs	r3, #0
    d90e:	f88d 300a 	strb.w	r3, [sp, #10]
	p_xfer.txbuf = (uint8_t *)&command_dataw;
    d912:	ab02      	add	r3, sp, #8
    d914:	9303      	str	r3, [sp, #12]
	p_xfer.rxbuf = (uint8_t *)&command_datar;
    d916:	ab01      	add	r3, sp, #4
    d918:	9304      	str	r3, [sp, #16]
	p_xfer.size = 3;
    d91a:	2303      	movs	r3, #3
    d91c:	9305      	str	r3, [sp, #20]
	
	/* Perform the actual 3-byte push/pull SPI operation */
	spi_m_sync_transfer(&SPI_0, &p_xfer);
    d91e:	a903      	add	r1, sp, #12
    d920:	4807      	ldr	r0, [pc, #28]	; (d940 <checkKSZreg+0x50>)
    d922:	4b08      	ldr	r3, [pc, #32]	; (d944 <checkKSZreg+0x54>)
    d924:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    d926:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
	
	/* Raise the nCS line for this SPI device */	
	gpio_set_pin_level(PB07_SPInCS_KSZ8974, 1);
	
	/* Check to see if the read data byte from the SPI end-point register matches the "verify" parameter and return the result as a boolean */
	return (command_datar[2] == verify) ? 1 : 0;
    d92a:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
    d92e:	42b0      	cmp	r0, r6
    d930:	bf14      	ite	ne
    d932:	2000      	movne	r0, #0
    d934:	2001      	moveq	r0, #1
    d936:	b006      	add	sp, #24
    d938:	bd70      	pop	{r4, r5, r6, pc}
    d93a:	bf00      	nop
    d93c:	41008000 	.word	0x41008000
    d940:	20007478 	.word	0x20007478
    d944:	00001b05 	.word	0x00001b05

0000d948 <readKSZreg>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: read an SPI register of the KSZ-Micrel Ethernet SWITCH
// Returns:     value of register of KSZ Ethernet SWITCH SPI read
// *****************************************************************************************************************************************************************
unsigned char readKSZreg(uint16_t reg)
{
    d948:	b530      	push	{r4, r5, lr}
    d94a:	b087      	sub	sp, #28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    d94c:	4c0e      	ldr	r4, [pc, #56]	; (d988 <readKSZreg+0x40>)
    d94e:	2580      	movs	r5, #128	; 0x80
    d950:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
	
	/* Lower the nCS line for this SPI device */	
	gpio_set_pin_level(PB07_SPInCS_KSZ8974, 0);
	
	/* Setup the 3 control bytes to perform a register read operation */
	command_dataw[0] = 0x40 + REG_SPI_READ + (unsigned char)(reg >> 7);
    d954:	09c3      	lsrs	r3, r0, #7
    d956:	3360      	adds	r3, #96	; 0x60
    d958:	f88d 3008 	strb.w	r3, [sp, #8]
	command_dataw[1] = (unsigned char)(reg & 0x7F) << 1;
    d95c:	0040      	lsls	r0, r0, #1
    d95e:	f88d 0009 	strb.w	r0, [sp, #9]
	command_dataw[2] = 0x00;
    d962:	2300      	movs	r3, #0
    d964:	f88d 300a 	strb.w	r3, [sp, #10]
	p_xfer.txbuf = (uint8_t *)&command_dataw;
    d968:	ab02      	add	r3, sp, #8
    d96a:	9303      	str	r3, [sp, #12]
	p_xfer.rxbuf = (uint8_t *)&command_datar;
    d96c:	ab01      	add	r3, sp, #4
    d96e:	9304      	str	r3, [sp, #16]
	p_xfer.size = 3;
    d970:	2303      	movs	r3, #3
    d972:	9305      	str	r3, [sp, #20]
	
	/* Perform the actual 3-byte push/pull SPI operation */
	spi_m_sync_transfer(&SPI_0, &p_xfer);
    d974:	a903      	add	r1, sp, #12
    d976:	4805      	ldr	r0, [pc, #20]	; (d98c <readKSZreg+0x44>)
    d978:	4b05      	ldr	r3, [pc, #20]	; (d990 <readKSZreg+0x48>)
    d97a:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    d97c:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
	/* Raise the nCS line for this SPI device */
	gpio_set_pin_level(PB07_SPInCS_KSZ8974, 1);
	
	/* Just return the actual far-end register daat value */
	return (command_datar[2]);
}
    d980:	f89d 0006 	ldrb.w	r0, [sp, #6]
    d984:	b007      	add	sp, #28
    d986:	bd30      	pop	{r4, r5, pc}
    d988:	41008000 	.word	0x41008000
    d98c:	20007478 	.word	0x20007478
    d990:	00001b05 	.word	0x00001b05

0000d994 <writeKSZreg>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: write to a SPI register of the KSZ-Micrel Ethernet SWITCH
// Returns:     nothing
// *****************************************************************************************************************************************************************
void writeKSZreg(uint16_t reg, unsigned char value)
{
    d994:	b530      	push	{r4, r5, lr}
    d996:	b087      	sub	sp, #28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    d998:	4c0d      	ldr	r4, [pc, #52]	; (d9d0 <writeKSZreg+0x3c>)
    d99a:	2580      	movs	r5, #128	; 0x80
    d99c:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
	
	/* Lower the nCS line for this SPI device */
	gpio_set_pin_level(PB07_SPInCS_KSZ8974, 0);
	
	/* Setup the 3 control bytes to perform a register write operation */
	command_dataw[0] = 0x40 + REG_SPI_WRITE + (unsigned char)(reg >> 7);
    d9a0:	09c3      	lsrs	r3, r0, #7
    d9a2:	3340      	adds	r3, #64	; 0x40
    d9a4:	f88d 3008 	strb.w	r3, [sp, #8]
	command_dataw[1] = (unsigned char)(reg & 0x7F) << 1;
    d9a8:	0040      	lsls	r0, r0, #1
    d9aa:	f88d 0009 	strb.w	r0, [sp, #9]
	command_dataw[2] = value;
    d9ae:	f88d 100a 	strb.w	r1, [sp, #10]
	p_xfer.txbuf = (uint8_t *)&command_dataw;
    d9b2:	ab02      	add	r3, sp, #8
    d9b4:	9303      	str	r3, [sp, #12]
	p_xfer.rxbuf = (uint8_t *)&command_datar;
    d9b6:	ab01      	add	r3, sp, #4
    d9b8:	9304      	str	r3, [sp, #16]
	p_xfer.size = 3;
    d9ba:	2303      	movs	r3, #3
    d9bc:	9305      	str	r3, [sp, #20]
	
	/* Perform the actual 3-byte push/pull SPI operation */
	spi_m_sync_transfer(&SPI_0, &p_xfer);
    d9be:	a903      	add	r1, sp, #12
    d9c0:	4804      	ldr	r0, [pc, #16]	; (d9d4 <writeKSZreg+0x40>)
    d9c2:	4b05      	ldr	r3, [pc, #20]	; (d9d8 <writeKSZreg+0x44>)
    d9c4:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    d9c6:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
	
	/* Raise the nCS line for this SPI device */
	gpio_set_pin_level(PB07_SPInCS_KSZ8974, 1);
}	
    d9ca:	b007      	add	sp, #28
    d9cc:	bd30      	pop	{r4, r5, pc}
    d9ce:	bf00      	nop
    d9d0:	41008000 	.word	0x41008000
    d9d4:	20007478 	.word	0x20007478
    d9d8:	00001b05 	.word	0x00001b05

0000d9dc <application_appcall>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: STUB for compilation - NOT USED
// Returns:     Nothing (NULL)
// *****************************************************************************************************************************************************************
void application_appcall(void)
{
    d9dc:	b508      	push	{r3, lr}
	/* This is a stub function. It should not ever get called */
	xprintf("MultiSense application_appcall()\r\n");
    d9de:	4802      	ldr	r0, [pc, #8]	; (d9e8 <application_appcall+0xc>)
    d9e0:	4b02      	ldr	r3, [pc, #8]	; (d9ec <application_appcall+0x10>)
    d9e2:	4798      	blx	r3
    d9e4:	bd08      	pop	{r3, pc}
    d9e6:	bf00      	nop
    d9e8:	000115bc 	.word	0x000115bc
    d9ec:	0000031d 	.word	0x0000031d

0000d9f0 <uip_log>:
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// Description: Called by the uIP stack to print out debug information, warnings and error messages
// Returns:     Nothing (NULL)
// *****************************************************************************************************************************************************************
void uip_log(char *msg)
{
    d9f0:	b508      	push	{r3, lr}
	/* Print out the messages from the uIP stack */
	xprintf("MultiSense uIP log --> [%s]\r\n", msg);
    d9f2:	4601      	mov	r1, r0
    d9f4:	4801      	ldr	r0, [pc, #4]	; (d9fc <uip_log+0xc>)
    d9f6:	4b02      	ldr	r3, [pc, #8]	; (da00 <uip_log+0x10>)
    d9f8:	4798      	blx	r3
    d9fa:	bd08      	pop	{r3, pc}
    d9fc:	0001161c 	.word	0x0001161c
    da00:	0000031d 	.word	0x0000031d

0000da04 <__libc_init_array>:
    da04:	b570      	push	{r4, r5, r6, lr}
    da06:	4e0d      	ldr	r6, [pc, #52]	; (da3c <__libc_init_array+0x38>)
    da08:	4c0d      	ldr	r4, [pc, #52]	; (da40 <__libc_init_array+0x3c>)
    da0a:	1ba4      	subs	r4, r4, r6
    da0c:	10a4      	asrs	r4, r4, #2
    da0e:	2500      	movs	r5, #0
    da10:	42a5      	cmp	r5, r4
    da12:	d109      	bne.n	da28 <__libc_init_array+0x24>
    da14:	4e0b      	ldr	r6, [pc, #44]	; (da44 <__libc_init_array+0x40>)
    da16:	4c0c      	ldr	r4, [pc, #48]	; (da48 <__libc_init_array+0x44>)
    da18:	f003 fedc 	bl	117d4 <_init>
    da1c:	1ba4      	subs	r4, r4, r6
    da1e:	10a4      	asrs	r4, r4, #2
    da20:	2500      	movs	r5, #0
    da22:	42a5      	cmp	r5, r4
    da24:	d105      	bne.n	da32 <__libc_init_array+0x2e>
    da26:	bd70      	pop	{r4, r5, r6, pc}
    da28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    da2c:	4798      	blx	r3
    da2e:	3501      	adds	r5, #1
    da30:	e7ee      	b.n	da10 <__libc_init_array+0xc>
    da32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    da36:	4798      	blx	r3
    da38:	3501      	adds	r5, #1
    da3a:	e7f2      	b.n	da22 <__libc_init_array+0x1e>
    da3c:	000117e0 	.word	0x000117e0
    da40:	000117e0 	.word	0x000117e0
    da44:	000117e0 	.word	0x000117e0
    da48:	000117e4 	.word	0x000117e4

0000da4c <memcmp>:
    da4c:	b510      	push	{r4, lr}
    da4e:	3901      	subs	r1, #1
    da50:	4402      	add	r2, r0
    da52:	4290      	cmp	r0, r2
    da54:	d101      	bne.n	da5a <memcmp+0xe>
    da56:	2000      	movs	r0, #0
    da58:	bd10      	pop	{r4, pc}
    da5a:	f810 3b01 	ldrb.w	r3, [r0], #1
    da5e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    da62:	42a3      	cmp	r3, r4
    da64:	d0f5      	beq.n	da52 <memcmp+0x6>
    da66:	1b18      	subs	r0, r3, r4
    da68:	bd10      	pop	{r4, pc}

0000da6a <memcpy>:
    da6a:	b510      	push	{r4, lr}
    da6c:	1e43      	subs	r3, r0, #1
    da6e:	440a      	add	r2, r1
    da70:	4291      	cmp	r1, r2
    da72:	d100      	bne.n	da76 <memcpy+0xc>
    da74:	bd10      	pop	{r4, pc}
    da76:	f811 4b01 	ldrb.w	r4, [r1], #1
    da7a:	f803 4f01 	strb.w	r4, [r3, #1]!
    da7e:	e7f7      	b.n	da70 <memcpy+0x6>

0000da80 <memmove>:
    da80:	4288      	cmp	r0, r1
    da82:	b510      	push	{r4, lr}
    da84:	eb01 0302 	add.w	r3, r1, r2
    da88:	d803      	bhi.n	da92 <memmove+0x12>
    da8a:	1e42      	subs	r2, r0, #1
    da8c:	4299      	cmp	r1, r3
    da8e:	d10c      	bne.n	daaa <memmove+0x2a>
    da90:	bd10      	pop	{r4, pc}
    da92:	4298      	cmp	r0, r3
    da94:	d2f9      	bcs.n	da8a <memmove+0xa>
    da96:	1881      	adds	r1, r0, r2
    da98:	1ad2      	subs	r2, r2, r3
    da9a:	42d3      	cmn	r3, r2
    da9c:	d100      	bne.n	daa0 <memmove+0x20>
    da9e:	bd10      	pop	{r4, pc}
    daa0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    daa4:	f801 4d01 	strb.w	r4, [r1, #-1]!
    daa8:	e7f7      	b.n	da9a <memmove+0x1a>
    daaa:	f811 4b01 	ldrb.w	r4, [r1], #1
    daae:	f802 4f01 	strb.w	r4, [r2, #1]!
    dab2:	e7eb      	b.n	da8c <memmove+0xc>

0000dab4 <memset>:
    dab4:	4402      	add	r2, r0
    dab6:	4603      	mov	r3, r0
    dab8:	4293      	cmp	r3, r2
    daba:	d100      	bne.n	dabe <memset+0xa>
    dabc:	4770      	bx	lr
    dabe:	f803 1b01 	strb.w	r1, [r3], #1
    dac2:	e7f9      	b.n	dab8 <memset+0x4>

0000dac4 <siscanf>:
    dac4:	b40e      	push	{r1, r2, r3}
    dac6:	b530      	push	{r4, r5, lr}
    dac8:	b09c      	sub	sp, #112	; 0x70
    daca:	ac1f      	add	r4, sp, #124	; 0x7c
    dacc:	f44f 7201 	mov.w	r2, #516	; 0x204
    dad0:	f854 5b04 	ldr.w	r5, [r4], #4
    dad4:	f8ad 2014 	strh.w	r2, [sp, #20]
    dad8:	9002      	str	r0, [sp, #8]
    dada:	9006      	str	r0, [sp, #24]
    dadc:	f000 f81e 	bl	db1c <strlen>
    dae0:	4b0b      	ldr	r3, [pc, #44]	; (db10 <siscanf+0x4c>)
    dae2:	9003      	str	r0, [sp, #12]
    dae4:	9007      	str	r0, [sp, #28]
    dae6:	930b      	str	r3, [sp, #44]	; 0x2c
    dae8:	480a      	ldr	r0, [pc, #40]	; (db14 <siscanf+0x50>)
    daea:	9401      	str	r4, [sp, #4]
    daec:	2300      	movs	r3, #0
    daee:	930f      	str	r3, [sp, #60]	; 0x3c
    daf0:	9314      	str	r3, [sp, #80]	; 0x50
    daf2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    daf6:	f8ad 3016 	strh.w	r3, [sp, #22]
    dafa:	462a      	mov	r2, r5
    dafc:	4623      	mov	r3, r4
    dafe:	a902      	add	r1, sp, #8
    db00:	6800      	ldr	r0, [r0, #0]
    db02:	f000 f8e1 	bl	dcc8 <__ssvfiscanf_r>
    db06:	b01c      	add	sp, #112	; 0x70
    db08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    db0c:	b003      	add	sp, #12
    db0e:	4770      	bx	lr
    db10:	0000db19 	.word	0x0000db19
    db14:	200000e0 	.word	0x200000e0

0000db18 <__seofread>:
    db18:	2000      	movs	r0, #0
    db1a:	4770      	bx	lr

0000db1c <strlen>:
    db1c:	4603      	mov	r3, r0
    db1e:	f813 2b01 	ldrb.w	r2, [r3], #1
    db22:	2a00      	cmp	r2, #0
    db24:	d1fb      	bne.n	db1e <strlen+0x2>
    db26:	1a18      	subs	r0, r3, r0
    db28:	3801      	subs	r0, #1
    db2a:	4770      	bx	lr

0000db2c <strncpy>:
    db2c:	b570      	push	{r4, r5, r6, lr}
    db2e:	4604      	mov	r4, r0
    db30:	b902      	cbnz	r2, db34 <strncpy+0x8>
    db32:	bd70      	pop	{r4, r5, r6, pc}
    db34:	4623      	mov	r3, r4
    db36:	f811 5b01 	ldrb.w	r5, [r1], #1
    db3a:	f803 5b01 	strb.w	r5, [r3], #1
    db3e:	1e56      	subs	r6, r2, #1
    db40:	b91d      	cbnz	r5, db4a <strncpy+0x1e>
    db42:	4414      	add	r4, r2
    db44:	42a3      	cmp	r3, r4
    db46:	d103      	bne.n	db50 <strncpy+0x24>
    db48:	bd70      	pop	{r4, r5, r6, pc}
    db4a:	461c      	mov	r4, r3
    db4c:	4632      	mov	r2, r6
    db4e:	e7ef      	b.n	db30 <strncpy+0x4>
    db50:	f803 5b01 	strb.w	r5, [r3], #1
    db54:	e7f6      	b.n	db44 <strncpy+0x18>
	...

0000db58 <_malloc_r>:
    db58:	b570      	push	{r4, r5, r6, lr}
    db5a:	1ccd      	adds	r5, r1, #3
    db5c:	f025 0503 	bic.w	r5, r5, #3
    db60:	3508      	adds	r5, #8
    db62:	2d0c      	cmp	r5, #12
    db64:	bf38      	it	cc
    db66:	250c      	movcc	r5, #12
    db68:	2d00      	cmp	r5, #0
    db6a:	4606      	mov	r6, r0
    db6c:	db01      	blt.n	db72 <_malloc_r+0x1a>
    db6e:	42a9      	cmp	r1, r5
    db70:	d903      	bls.n	db7a <_malloc_r+0x22>
    db72:	230c      	movs	r3, #12
    db74:	6033      	str	r3, [r6, #0]
    db76:	2000      	movs	r0, #0
    db78:	bd70      	pop	{r4, r5, r6, pc}
    db7a:	f000 fd61 	bl	e640 <__malloc_lock>
    db7e:	4a23      	ldr	r2, [pc, #140]	; (dc0c <_malloc_r+0xb4>)
    db80:	6814      	ldr	r4, [r2, #0]
    db82:	4621      	mov	r1, r4
    db84:	b991      	cbnz	r1, dbac <_malloc_r+0x54>
    db86:	4c22      	ldr	r4, [pc, #136]	; (dc10 <_malloc_r+0xb8>)
    db88:	6823      	ldr	r3, [r4, #0]
    db8a:	b91b      	cbnz	r3, db94 <_malloc_r+0x3c>
    db8c:	4630      	mov	r0, r6
    db8e:	f000 fb47 	bl	e220 <_sbrk_r>
    db92:	6020      	str	r0, [r4, #0]
    db94:	4629      	mov	r1, r5
    db96:	4630      	mov	r0, r6
    db98:	f000 fb42 	bl	e220 <_sbrk_r>
    db9c:	1c43      	adds	r3, r0, #1
    db9e:	d126      	bne.n	dbee <_malloc_r+0x96>
    dba0:	230c      	movs	r3, #12
    dba2:	6033      	str	r3, [r6, #0]
    dba4:	4630      	mov	r0, r6
    dba6:	f000 fd4c 	bl	e642 <__malloc_unlock>
    dbaa:	e7e4      	b.n	db76 <_malloc_r+0x1e>
    dbac:	680b      	ldr	r3, [r1, #0]
    dbae:	1b5b      	subs	r3, r3, r5
    dbb0:	d41a      	bmi.n	dbe8 <_malloc_r+0x90>
    dbb2:	2b0b      	cmp	r3, #11
    dbb4:	d90f      	bls.n	dbd6 <_malloc_r+0x7e>
    dbb6:	600b      	str	r3, [r1, #0]
    dbb8:	50cd      	str	r5, [r1, r3]
    dbba:	18cc      	adds	r4, r1, r3
    dbbc:	4630      	mov	r0, r6
    dbbe:	f000 fd40 	bl	e642 <__malloc_unlock>
    dbc2:	f104 000b 	add.w	r0, r4, #11
    dbc6:	1d23      	adds	r3, r4, #4
    dbc8:	f020 0007 	bic.w	r0, r0, #7
    dbcc:	1ac3      	subs	r3, r0, r3
    dbce:	d01b      	beq.n	dc08 <_malloc_r+0xb0>
    dbd0:	425a      	negs	r2, r3
    dbd2:	50e2      	str	r2, [r4, r3]
    dbd4:	bd70      	pop	{r4, r5, r6, pc}
    dbd6:	428c      	cmp	r4, r1
    dbd8:	bf0d      	iteet	eq
    dbda:	6863      	ldreq	r3, [r4, #4]
    dbdc:	684b      	ldrne	r3, [r1, #4]
    dbde:	6063      	strne	r3, [r4, #4]
    dbe0:	6013      	streq	r3, [r2, #0]
    dbe2:	bf18      	it	ne
    dbe4:	460c      	movne	r4, r1
    dbe6:	e7e9      	b.n	dbbc <_malloc_r+0x64>
    dbe8:	460c      	mov	r4, r1
    dbea:	6849      	ldr	r1, [r1, #4]
    dbec:	e7ca      	b.n	db84 <_malloc_r+0x2c>
    dbee:	1cc4      	adds	r4, r0, #3
    dbf0:	f024 0403 	bic.w	r4, r4, #3
    dbf4:	42a0      	cmp	r0, r4
    dbf6:	d005      	beq.n	dc04 <_malloc_r+0xac>
    dbf8:	1a21      	subs	r1, r4, r0
    dbfa:	4630      	mov	r0, r6
    dbfc:	f000 fb10 	bl	e220 <_sbrk_r>
    dc00:	3001      	adds	r0, #1
    dc02:	d0cd      	beq.n	dba0 <_malloc_r+0x48>
    dc04:	6025      	str	r5, [r4, #0]
    dc06:	e7d9      	b.n	dbbc <_malloc_r+0x64>
    dc08:	bd70      	pop	{r4, r5, r6, pc}
    dc0a:	bf00      	nop
    dc0c:	20007404 	.word	0x20007404
    dc10:	20007408 	.word	0x20007408

0000dc14 <_sungetc_r>:
    dc14:	b538      	push	{r3, r4, r5, lr}
    dc16:	1c4b      	adds	r3, r1, #1
    dc18:	4614      	mov	r4, r2
    dc1a:	d103      	bne.n	dc24 <_sungetc_r+0x10>
    dc1c:	f04f 35ff 	mov.w	r5, #4294967295
    dc20:	4628      	mov	r0, r5
    dc22:	bd38      	pop	{r3, r4, r5, pc}
    dc24:	8993      	ldrh	r3, [r2, #12]
    dc26:	f023 0320 	bic.w	r3, r3, #32
    dc2a:	8193      	strh	r3, [r2, #12]
    dc2c:	6b53      	ldr	r3, [r2, #52]	; 0x34
    dc2e:	6852      	ldr	r2, [r2, #4]
    dc30:	b2cd      	uxtb	r5, r1
    dc32:	b18b      	cbz	r3, dc58 <_sungetc_r+0x44>
    dc34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    dc36:	429a      	cmp	r2, r3
    dc38:	da08      	bge.n	dc4c <_sungetc_r+0x38>
    dc3a:	6823      	ldr	r3, [r4, #0]
    dc3c:	1e5a      	subs	r2, r3, #1
    dc3e:	6022      	str	r2, [r4, #0]
    dc40:	f803 5c01 	strb.w	r5, [r3, #-1]
    dc44:	6863      	ldr	r3, [r4, #4]
    dc46:	3301      	adds	r3, #1
    dc48:	6063      	str	r3, [r4, #4]
    dc4a:	e7e9      	b.n	dc20 <_sungetc_r+0xc>
    dc4c:	4621      	mov	r1, r4
    dc4e:	f000 fc49 	bl	e4e4 <__submore>
    dc52:	2800      	cmp	r0, #0
    dc54:	d0f1      	beq.n	dc3a <_sungetc_r+0x26>
    dc56:	e7e1      	b.n	dc1c <_sungetc_r+0x8>
    dc58:	6921      	ldr	r1, [r4, #16]
    dc5a:	6823      	ldr	r3, [r4, #0]
    dc5c:	b151      	cbz	r1, dc74 <_sungetc_r+0x60>
    dc5e:	4299      	cmp	r1, r3
    dc60:	d208      	bcs.n	dc74 <_sungetc_r+0x60>
    dc62:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    dc66:	428d      	cmp	r5, r1
    dc68:	d104      	bne.n	dc74 <_sungetc_r+0x60>
    dc6a:	3b01      	subs	r3, #1
    dc6c:	3201      	adds	r2, #1
    dc6e:	6023      	str	r3, [r4, #0]
    dc70:	6062      	str	r2, [r4, #4]
    dc72:	e7d5      	b.n	dc20 <_sungetc_r+0xc>
    dc74:	63e3      	str	r3, [r4, #60]	; 0x3c
    dc76:	f104 0344 	add.w	r3, r4, #68	; 0x44
    dc7a:	6363      	str	r3, [r4, #52]	; 0x34
    dc7c:	2303      	movs	r3, #3
    dc7e:	63a3      	str	r3, [r4, #56]	; 0x38
    dc80:	4623      	mov	r3, r4
    dc82:	6422      	str	r2, [r4, #64]	; 0x40
    dc84:	f803 5f46 	strb.w	r5, [r3, #70]!
    dc88:	6023      	str	r3, [r4, #0]
    dc8a:	2301      	movs	r3, #1
    dc8c:	e7dc      	b.n	dc48 <_sungetc_r+0x34>

0000dc8e <__ssrefill_r>:
    dc8e:	b510      	push	{r4, lr}
    dc90:	460c      	mov	r4, r1
    dc92:	6b49      	ldr	r1, [r1, #52]	; 0x34
    dc94:	b169      	cbz	r1, dcb2 <__ssrefill_r+0x24>
    dc96:	f104 0344 	add.w	r3, r4, #68	; 0x44
    dc9a:	4299      	cmp	r1, r3
    dc9c:	d001      	beq.n	dca2 <__ssrefill_r+0x14>
    dc9e:	f000 fcd1 	bl	e644 <_free_r>
    dca2:	6c23      	ldr	r3, [r4, #64]	; 0x40
    dca4:	6063      	str	r3, [r4, #4]
    dca6:	2000      	movs	r0, #0
    dca8:	6360      	str	r0, [r4, #52]	; 0x34
    dcaa:	b113      	cbz	r3, dcb2 <__ssrefill_r+0x24>
    dcac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    dcae:	6023      	str	r3, [r4, #0]
    dcb0:	bd10      	pop	{r4, pc}
    dcb2:	6923      	ldr	r3, [r4, #16]
    dcb4:	6023      	str	r3, [r4, #0]
    dcb6:	2300      	movs	r3, #0
    dcb8:	6063      	str	r3, [r4, #4]
    dcba:	89a3      	ldrh	r3, [r4, #12]
    dcbc:	f043 0320 	orr.w	r3, r3, #32
    dcc0:	81a3      	strh	r3, [r4, #12]
    dcc2:	f04f 30ff 	mov.w	r0, #4294967295
    dcc6:	bd10      	pop	{r4, pc}

0000dcc8 <__ssvfiscanf_r>:
    dcc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dccc:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
    dcd0:	f10d 080c 	add.w	r8, sp, #12
    dcd4:	9301      	str	r3, [sp, #4]
    dcd6:	2300      	movs	r3, #0
    dcd8:	9346      	str	r3, [sp, #280]	; 0x118
    dcda:	9347      	str	r3, [sp, #284]	; 0x11c
    dcdc:	4ba0      	ldr	r3, [pc, #640]	; (df60 <__ssvfiscanf_r+0x298>)
    dcde:	93a2      	str	r3, [sp, #648]	; 0x288
    dce0:	f8df 9284 	ldr.w	r9, [pc, #644]	; df68 <__ssvfiscanf_r+0x2a0>
    dce4:	4b9f      	ldr	r3, [pc, #636]	; (df64 <__ssvfiscanf_r+0x29c>)
    dce6:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
    dcea:	4606      	mov	r6, r0
    dcec:	460c      	mov	r4, r1
    dcee:	93a3      	str	r3, [sp, #652]	; 0x28c
    dcf0:	4692      	mov	sl, r2
    dcf2:	270a      	movs	r7, #10
    dcf4:	f89a 3000 	ldrb.w	r3, [sl]
    dcf8:	2b00      	cmp	r3, #0
    dcfa:	f000 812f 	beq.w	df5c <__ssvfiscanf_r+0x294>
    dcfe:	f000 fc2f 	bl	e560 <__locale_ctype_ptr>
    dd02:	f89a b000 	ldrb.w	fp, [sl]
    dd06:	4458      	add	r0, fp
    dd08:	7843      	ldrb	r3, [r0, #1]
    dd0a:	f013 0308 	ands.w	r3, r3, #8
    dd0e:	d143      	bne.n	dd98 <__ssvfiscanf_r+0xd0>
    dd10:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
    dd14:	f10a 0501 	add.w	r5, sl, #1
    dd18:	f040 8099 	bne.w	de4e <__ssvfiscanf_r+0x186>
    dd1c:	9345      	str	r3, [sp, #276]	; 0x114
    dd1e:	9343      	str	r3, [sp, #268]	; 0x10c
    dd20:	f89a 3001 	ldrb.w	r3, [sl, #1]
    dd24:	2b2a      	cmp	r3, #42	; 0x2a
    dd26:	d103      	bne.n	dd30 <__ssvfiscanf_r+0x68>
    dd28:	2310      	movs	r3, #16
    dd2a:	9343      	str	r3, [sp, #268]	; 0x10c
    dd2c:	f10a 0502 	add.w	r5, sl, #2
    dd30:	7829      	ldrb	r1, [r5, #0]
    dd32:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
    dd36:	2a09      	cmp	r2, #9
    dd38:	46aa      	mov	sl, r5
    dd3a:	f105 0501 	add.w	r5, r5, #1
    dd3e:	d941      	bls.n	ddc4 <__ssvfiscanf_r+0xfc>
    dd40:	2203      	movs	r2, #3
    dd42:	4889      	ldr	r0, [pc, #548]	; (df68 <__ssvfiscanf_r+0x2a0>)
    dd44:	f000 fc2c 	bl	e5a0 <memchr>
    dd48:	b138      	cbz	r0, dd5a <__ssvfiscanf_r+0x92>
    dd4a:	eba0 0309 	sub.w	r3, r0, r9
    dd4e:	2001      	movs	r0, #1
    dd50:	4098      	lsls	r0, r3
    dd52:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    dd54:	4318      	orrs	r0, r3
    dd56:	9043      	str	r0, [sp, #268]	; 0x10c
    dd58:	46aa      	mov	sl, r5
    dd5a:	f89a 3000 	ldrb.w	r3, [sl]
    dd5e:	2b67      	cmp	r3, #103	; 0x67
    dd60:	f10a 0501 	add.w	r5, sl, #1
    dd64:	d84a      	bhi.n	ddfc <__ssvfiscanf_r+0x134>
    dd66:	2b65      	cmp	r3, #101	; 0x65
    dd68:	f080 80b7 	bcs.w	deda <__ssvfiscanf_r+0x212>
    dd6c:	2b47      	cmp	r3, #71	; 0x47
    dd6e:	d82f      	bhi.n	ddd0 <__ssvfiscanf_r+0x108>
    dd70:	2b45      	cmp	r3, #69	; 0x45
    dd72:	f080 80b2 	bcs.w	deda <__ssvfiscanf_r+0x212>
    dd76:	2b00      	cmp	r3, #0
    dd78:	f000 8082 	beq.w	de80 <__ssvfiscanf_r+0x1b8>
    dd7c:	2b25      	cmp	r3, #37	; 0x25
    dd7e:	d066      	beq.n	de4e <__ssvfiscanf_r+0x186>
    dd80:	2303      	movs	r3, #3
    dd82:	9349      	str	r3, [sp, #292]	; 0x124
    dd84:	9744      	str	r7, [sp, #272]	; 0x110
    dd86:	e045      	b.n	de14 <__ssvfiscanf_r+0x14c>
    dd88:	9947      	ldr	r1, [sp, #284]	; 0x11c
    dd8a:	3101      	adds	r1, #1
    dd8c:	9147      	str	r1, [sp, #284]	; 0x11c
    dd8e:	6861      	ldr	r1, [r4, #4]
    dd90:	3301      	adds	r3, #1
    dd92:	3901      	subs	r1, #1
    dd94:	6061      	str	r1, [r4, #4]
    dd96:	6023      	str	r3, [r4, #0]
    dd98:	6863      	ldr	r3, [r4, #4]
    dd9a:	2b00      	cmp	r3, #0
    dd9c:	dd0b      	ble.n	ddb6 <__ssvfiscanf_r+0xee>
    dd9e:	f000 fbdf 	bl	e560 <__locale_ctype_ptr>
    dda2:	6823      	ldr	r3, [r4, #0]
    dda4:	7819      	ldrb	r1, [r3, #0]
    dda6:	4408      	add	r0, r1
    dda8:	7841      	ldrb	r1, [r0, #1]
    ddaa:	070d      	lsls	r5, r1, #28
    ddac:	d4ec      	bmi.n	dd88 <__ssvfiscanf_r+0xc0>
    ddae:	f10a 0501 	add.w	r5, sl, #1
    ddb2:	46aa      	mov	sl, r5
    ddb4:	e79e      	b.n	dcf4 <__ssvfiscanf_r+0x2c>
    ddb6:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    ddb8:	4621      	mov	r1, r4
    ddba:	4630      	mov	r0, r6
    ddbc:	4798      	blx	r3
    ddbe:	2800      	cmp	r0, #0
    ddc0:	d0ed      	beq.n	dd9e <__ssvfiscanf_r+0xd6>
    ddc2:	e7f4      	b.n	ddae <__ssvfiscanf_r+0xe6>
    ddc4:	9b45      	ldr	r3, [sp, #276]	; 0x114
    ddc6:	fb07 1303 	mla	r3, r7, r3, r1
    ddca:	3b30      	subs	r3, #48	; 0x30
    ddcc:	9345      	str	r3, [sp, #276]	; 0x114
    ddce:	e7af      	b.n	dd30 <__ssvfiscanf_r+0x68>
    ddd0:	2b5b      	cmp	r3, #91	; 0x5b
    ddd2:	d061      	beq.n	de98 <__ssvfiscanf_r+0x1d0>
    ddd4:	d80c      	bhi.n	ddf0 <__ssvfiscanf_r+0x128>
    ddd6:	2b58      	cmp	r3, #88	; 0x58
    ddd8:	d1d2      	bne.n	dd80 <__ssvfiscanf_r+0xb8>
    ddda:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    dddc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    dde0:	9243      	str	r2, [sp, #268]	; 0x10c
    dde2:	2210      	movs	r2, #16
    dde4:	9244      	str	r2, [sp, #272]	; 0x110
    dde6:	2b6f      	cmp	r3, #111	; 0x6f
    dde8:	bfb4      	ite	lt
    ddea:	2303      	movlt	r3, #3
    ddec:	2304      	movge	r3, #4
    ddee:	e010      	b.n	de12 <__ssvfiscanf_r+0x14a>
    ddf0:	2b63      	cmp	r3, #99	; 0x63
    ddf2:	d05c      	beq.n	deae <__ssvfiscanf_r+0x1e6>
    ddf4:	2b64      	cmp	r3, #100	; 0x64
    ddf6:	d1c3      	bne.n	dd80 <__ssvfiscanf_r+0xb8>
    ddf8:	9744      	str	r7, [sp, #272]	; 0x110
    ddfa:	e7f4      	b.n	dde6 <__ssvfiscanf_r+0x11e>
    ddfc:	2b70      	cmp	r3, #112	; 0x70
    ddfe:	d042      	beq.n	de86 <__ssvfiscanf_r+0x1be>
    de00:	d81d      	bhi.n	de3e <__ssvfiscanf_r+0x176>
    de02:	2b6e      	cmp	r3, #110	; 0x6e
    de04:	d059      	beq.n	deba <__ssvfiscanf_r+0x1f2>
    de06:	d843      	bhi.n	de90 <__ssvfiscanf_r+0x1c8>
    de08:	2b69      	cmp	r3, #105	; 0x69
    de0a:	d1b9      	bne.n	dd80 <__ssvfiscanf_r+0xb8>
    de0c:	2300      	movs	r3, #0
    de0e:	9344      	str	r3, [sp, #272]	; 0x110
    de10:	2303      	movs	r3, #3
    de12:	9349      	str	r3, [sp, #292]	; 0x124
    de14:	6863      	ldr	r3, [r4, #4]
    de16:	2b00      	cmp	r3, #0
    de18:	dd61      	ble.n	dede <__ssvfiscanf_r+0x216>
    de1a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    de1c:	0659      	lsls	r1, r3, #25
    de1e:	d56f      	bpl.n	df00 <__ssvfiscanf_r+0x238>
    de20:	9b49      	ldr	r3, [sp, #292]	; 0x124
    de22:	2b02      	cmp	r3, #2
    de24:	dc7c      	bgt.n	df20 <__ssvfiscanf_r+0x258>
    de26:	ab01      	add	r3, sp, #4
    de28:	4622      	mov	r2, r4
    de2a:	a943      	add	r1, sp, #268	; 0x10c
    de2c:	4630      	mov	r0, r6
    de2e:	f000 f89f 	bl	df70 <_scanf_chars>
    de32:	2801      	cmp	r0, #1
    de34:	f000 8092 	beq.w	df5c <__ssvfiscanf_r+0x294>
    de38:	2802      	cmp	r0, #2
    de3a:	d1ba      	bne.n	ddb2 <__ssvfiscanf_r+0xea>
    de3c:	e01d      	b.n	de7a <__ssvfiscanf_r+0x1b2>
    de3e:	2b75      	cmp	r3, #117	; 0x75
    de40:	d0da      	beq.n	ddf8 <__ssvfiscanf_r+0x130>
    de42:	2b78      	cmp	r3, #120	; 0x78
    de44:	d0c9      	beq.n	ddda <__ssvfiscanf_r+0x112>
    de46:	2b73      	cmp	r3, #115	; 0x73
    de48:	d19a      	bne.n	dd80 <__ssvfiscanf_r+0xb8>
    de4a:	2302      	movs	r3, #2
    de4c:	e7e1      	b.n	de12 <__ssvfiscanf_r+0x14a>
    de4e:	6863      	ldr	r3, [r4, #4]
    de50:	2b00      	cmp	r3, #0
    de52:	dd0c      	ble.n	de6e <__ssvfiscanf_r+0x1a6>
    de54:	6823      	ldr	r3, [r4, #0]
    de56:	781a      	ldrb	r2, [r3, #0]
    de58:	4593      	cmp	fp, r2
    de5a:	d17f      	bne.n	df5c <__ssvfiscanf_r+0x294>
    de5c:	3301      	adds	r3, #1
    de5e:	6862      	ldr	r2, [r4, #4]
    de60:	6023      	str	r3, [r4, #0]
    de62:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    de64:	3a01      	subs	r2, #1
    de66:	3301      	adds	r3, #1
    de68:	6062      	str	r2, [r4, #4]
    de6a:	9347      	str	r3, [sp, #284]	; 0x11c
    de6c:	e7a1      	b.n	ddb2 <__ssvfiscanf_r+0xea>
    de6e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    de70:	4621      	mov	r1, r4
    de72:	4630      	mov	r0, r6
    de74:	4798      	blx	r3
    de76:	2800      	cmp	r0, #0
    de78:	d0ec      	beq.n	de54 <__ssvfiscanf_r+0x18c>
    de7a:	9846      	ldr	r0, [sp, #280]	; 0x118
    de7c:	2800      	cmp	r0, #0
    de7e:	d163      	bne.n	df48 <__ssvfiscanf_r+0x280>
    de80:	f04f 30ff 	mov.w	r0, #4294967295
    de84:	e066      	b.n	df54 <__ssvfiscanf_r+0x28c>
    de86:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    de88:	f042 0220 	orr.w	r2, r2, #32
    de8c:	9243      	str	r2, [sp, #268]	; 0x10c
    de8e:	e7a4      	b.n	ddda <__ssvfiscanf_r+0x112>
    de90:	2308      	movs	r3, #8
    de92:	9344      	str	r3, [sp, #272]	; 0x110
    de94:	2304      	movs	r3, #4
    de96:	e7bc      	b.n	de12 <__ssvfiscanf_r+0x14a>
    de98:	4629      	mov	r1, r5
    de9a:	4640      	mov	r0, r8
    de9c:	f000 f9d0 	bl	e240 <__sccl>
    dea0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    dea2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    dea6:	9343      	str	r3, [sp, #268]	; 0x10c
    dea8:	4605      	mov	r5, r0
    deaa:	2301      	movs	r3, #1
    deac:	e7b1      	b.n	de12 <__ssvfiscanf_r+0x14a>
    deae:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    deb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    deb4:	9343      	str	r3, [sp, #268]	; 0x10c
    deb6:	2300      	movs	r3, #0
    deb8:	e7ab      	b.n	de12 <__ssvfiscanf_r+0x14a>
    deba:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    debc:	06d0      	lsls	r0, r2, #27
    debe:	f53f af78 	bmi.w	ddb2 <__ssvfiscanf_r+0xea>
    dec2:	f012 0f01 	tst.w	r2, #1
    dec6:	9a01      	ldr	r2, [sp, #4]
    dec8:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    deca:	f102 0104 	add.w	r1, r2, #4
    dece:	9101      	str	r1, [sp, #4]
    ded0:	6812      	ldr	r2, [r2, #0]
    ded2:	bf14      	ite	ne
    ded4:	8013      	strhne	r3, [r2, #0]
    ded6:	6013      	streq	r3, [r2, #0]
    ded8:	e76b      	b.n	ddb2 <__ssvfiscanf_r+0xea>
    deda:	2305      	movs	r3, #5
    dedc:	e799      	b.n	de12 <__ssvfiscanf_r+0x14a>
    dede:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    dee0:	4621      	mov	r1, r4
    dee2:	4630      	mov	r0, r6
    dee4:	4798      	blx	r3
    dee6:	2800      	cmp	r0, #0
    dee8:	d097      	beq.n	de1a <__ssvfiscanf_r+0x152>
    deea:	e7c6      	b.n	de7a <__ssvfiscanf_r+0x1b2>
    deec:	9a47      	ldr	r2, [sp, #284]	; 0x11c
    deee:	3201      	adds	r2, #1
    def0:	9247      	str	r2, [sp, #284]	; 0x11c
    def2:	6862      	ldr	r2, [r4, #4]
    def4:	3a01      	subs	r2, #1
    def6:	2a00      	cmp	r2, #0
    def8:	6062      	str	r2, [r4, #4]
    defa:	dd0a      	ble.n	df12 <__ssvfiscanf_r+0x24a>
    defc:	3301      	adds	r3, #1
    defe:	6023      	str	r3, [r4, #0]
    df00:	f000 fb2e 	bl	e560 <__locale_ctype_ptr>
    df04:	6823      	ldr	r3, [r4, #0]
    df06:	781a      	ldrb	r2, [r3, #0]
    df08:	4410      	add	r0, r2
    df0a:	7842      	ldrb	r2, [r0, #1]
    df0c:	0712      	lsls	r2, r2, #28
    df0e:	d4ed      	bmi.n	deec <__ssvfiscanf_r+0x224>
    df10:	e786      	b.n	de20 <__ssvfiscanf_r+0x158>
    df12:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    df14:	4621      	mov	r1, r4
    df16:	4630      	mov	r0, r6
    df18:	4798      	blx	r3
    df1a:	2800      	cmp	r0, #0
    df1c:	d0f0      	beq.n	df00 <__ssvfiscanf_r+0x238>
    df1e:	e7ac      	b.n	de7a <__ssvfiscanf_r+0x1b2>
    df20:	2b04      	cmp	r3, #4
    df22:	dc06      	bgt.n	df32 <__ssvfiscanf_r+0x26a>
    df24:	ab01      	add	r3, sp, #4
    df26:	4622      	mov	r2, r4
    df28:	a943      	add	r1, sp, #268	; 0x10c
    df2a:	4630      	mov	r0, r6
    df2c:	f000 f884 	bl	e038 <_scanf_i>
    df30:	e77f      	b.n	de32 <__ssvfiscanf_r+0x16a>
    df32:	4b0e      	ldr	r3, [pc, #56]	; (df6c <__ssvfiscanf_r+0x2a4>)
    df34:	2b00      	cmp	r3, #0
    df36:	f43f af3c 	beq.w	ddb2 <__ssvfiscanf_r+0xea>
    df3a:	ab01      	add	r3, sp, #4
    df3c:	4622      	mov	r2, r4
    df3e:	a943      	add	r1, sp, #268	; 0x10c
    df40:	4630      	mov	r0, r6
    df42:	f3af 8000 	nop.w
    df46:	e774      	b.n	de32 <__ssvfiscanf_r+0x16a>
    df48:	89a3      	ldrh	r3, [r4, #12]
    df4a:	f013 0f40 	tst.w	r3, #64	; 0x40
    df4e:	bf18      	it	ne
    df50:	f04f 30ff 	movne.w	r0, #4294967295
    df54:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
    df58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    df5c:	9846      	ldr	r0, [sp, #280]	; 0x118
    df5e:	e7f9      	b.n	df54 <__ssvfiscanf_r+0x28c>
    df60:	0000dc15 	.word	0x0000dc15
    df64:	0000dc8f 	.word	0x0000dc8f
    df68:	0001169c 	.word	0x0001169c
    df6c:	00000000 	.word	0x00000000

0000df70 <_scanf_chars>:
    df70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    df74:	4615      	mov	r5, r2
    df76:	688a      	ldr	r2, [r1, #8]
    df78:	4680      	mov	r8, r0
    df7a:	460c      	mov	r4, r1
    df7c:	b932      	cbnz	r2, df8c <_scanf_chars+0x1c>
    df7e:	698a      	ldr	r2, [r1, #24]
    df80:	2a00      	cmp	r2, #0
    df82:	bf0c      	ite	eq
    df84:	2201      	moveq	r2, #1
    df86:	f04f 32ff 	movne.w	r2, #4294967295
    df8a:	608a      	str	r2, [r1, #8]
    df8c:	6822      	ldr	r2, [r4, #0]
    df8e:	06d1      	lsls	r1, r2, #27
    df90:	bf5f      	itttt	pl
    df92:	681a      	ldrpl	r2, [r3, #0]
    df94:	1d11      	addpl	r1, r2, #4
    df96:	6019      	strpl	r1, [r3, #0]
    df98:	6817      	ldrpl	r7, [r2, #0]
    df9a:	2600      	movs	r6, #0
    df9c:	69a3      	ldr	r3, [r4, #24]
    df9e:	b1db      	cbz	r3, dfd8 <_scanf_chars+0x68>
    dfa0:	2b01      	cmp	r3, #1
    dfa2:	d107      	bne.n	dfb4 <_scanf_chars+0x44>
    dfa4:	682b      	ldr	r3, [r5, #0]
    dfa6:	6962      	ldr	r2, [r4, #20]
    dfa8:	781b      	ldrb	r3, [r3, #0]
    dfaa:	5cd3      	ldrb	r3, [r2, r3]
    dfac:	b9a3      	cbnz	r3, dfd8 <_scanf_chars+0x68>
    dfae:	2e00      	cmp	r6, #0
    dfb0:	d132      	bne.n	e018 <_scanf_chars+0xa8>
    dfb2:	e006      	b.n	dfc2 <_scanf_chars+0x52>
    dfb4:	2b02      	cmp	r3, #2
    dfb6:	d007      	beq.n	dfc8 <_scanf_chars+0x58>
    dfb8:	2e00      	cmp	r6, #0
    dfba:	d12d      	bne.n	e018 <_scanf_chars+0xa8>
    dfbc:	69a3      	ldr	r3, [r4, #24]
    dfbe:	2b01      	cmp	r3, #1
    dfc0:	d12a      	bne.n	e018 <_scanf_chars+0xa8>
    dfc2:	2001      	movs	r0, #1
    dfc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dfc8:	f000 faca 	bl	e560 <__locale_ctype_ptr>
    dfcc:	682b      	ldr	r3, [r5, #0]
    dfce:	781b      	ldrb	r3, [r3, #0]
    dfd0:	4418      	add	r0, r3
    dfd2:	7843      	ldrb	r3, [r0, #1]
    dfd4:	071b      	lsls	r3, r3, #28
    dfd6:	d4ef      	bmi.n	dfb8 <_scanf_chars+0x48>
    dfd8:	6823      	ldr	r3, [r4, #0]
    dfda:	06da      	lsls	r2, r3, #27
    dfdc:	bf5e      	ittt	pl
    dfde:	682b      	ldrpl	r3, [r5, #0]
    dfe0:	781b      	ldrbpl	r3, [r3, #0]
    dfe2:	703b      	strbpl	r3, [r7, #0]
    dfe4:	682a      	ldr	r2, [r5, #0]
    dfe6:	686b      	ldr	r3, [r5, #4]
    dfe8:	f102 0201 	add.w	r2, r2, #1
    dfec:	602a      	str	r2, [r5, #0]
    dfee:	68a2      	ldr	r2, [r4, #8]
    dff0:	f103 33ff 	add.w	r3, r3, #4294967295
    dff4:	f102 32ff 	add.w	r2, r2, #4294967295
    dff8:	606b      	str	r3, [r5, #4]
    dffa:	f106 0601 	add.w	r6, r6, #1
    dffe:	bf58      	it	pl
    e000:	3701      	addpl	r7, #1
    e002:	60a2      	str	r2, [r4, #8]
    e004:	b142      	cbz	r2, e018 <_scanf_chars+0xa8>
    e006:	2b00      	cmp	r3, #0
    e008:	dcc8      	bgt.n	df9c <_scanf_chars+0x2c>
    e00a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    e00e:	4629      	mov	r1, r5
    e010:	4640      	mov	r0, r8
    e012:	4798      	blx	r3
    e014:	2800      	cmp	r0, #0
    e016:	d0c1      	beq.n	df9c <_scanf_chars+0x2c>
    e018:	6823      	ldr	r3, [r4, #0]
    e01a:	f013 0310 	ands.w	r3, r3, #16
    e01e:	d105      	bne.n	e02c <_scanf_chars+0xbc>
    e020:	68e2      	ldr	r2, [r4, #12]
    e022:	3201      	adds	r2, #1
    e024:	60e2      	str	r2, [r4, #12]
    e026:	69a2      	ldr	r2, [r4, #24]
    e028:	b102      	cbz	r2, e02c <_scanf_chars+0xbc>
    e02a:	703b      	strb	r3, [r7, #0]
    e02c:	6923      	ldr	r3, [r4, #16]
    e02e:	441e      	add	r6, r3
    e030:	6126      	str	r6, [r4, #16]
    e032:	2000      	movs	r0, #0
    e034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e038 <_scanf_i>:
    e038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e03c:	469a      	mov	sl, r3
    e03e:	4b74      	ldr	r3, [pc, #464]	; (e210 <_scanf_i+0x1d8>)
    e040:	460c      	mov	r4, r1
    e042:	4683      	mov	fp, r0
    e044:	4616      	mov	r6, r2
    e046:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    e04a:	b087      	sub	sp, #28
    e04c:	ab03      	add	r3, sp, #12
    e04e:	68a7      	ldr	r7, [r4, #8]
    e050:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    e054:	4b6f      	ldr	r3, [pc, #444]	; (e214 <_scanf_i+0x1dc>)
    e056:	69a1      	ldr	r1, [r4, #24]
    e058:	4a6f      	ldr	r2, [pc, #444]	; (e218 <_scanf_i+0x1e0>)
    e05a:	2903      	cmp	r1, #3
    e05c:	bf18      	it	ne
    e05e:	461a      	movne	r2, r3
    e060:	1e7b      	subs	r3, r7, #1
    e062:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
    e066:	bf84      	itt	hi
    e068:	f240 135d 	movwhi	r3, #349	; 0x15d
    e06c:	60a3      	strhi	r3, [r4, #8]
    e06e:	6823      	ldr	r3, [r4, #0]
    e070:	9200      	str	r2, [sp, #0]
    e072:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
    e076:	bf88      	it	hi
    e078:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
    e07c:	f104 091c 	add.w	r9, r4, #28
    e080:	6023      	str	r3, [r4, #0]
    e082:	bf8c      	ite	hi
    e084:	197f      	addhi	r7, r7, r5
    e086:	2700      	movls	r7, #0
    e088:	464b      	mov	r3, r9
    e08a:	f04f 0800 	mov.w	r8, #0
    e08e:	9301      	str	r3, [sp, #4]
    e090:	6831      	ldr	r1, [r6, #0]
    e092:	ab03      	add	r3, sp, #12
    e094:	2202      	movs	r2, #2
    e096:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
    e09a:	7809      	ldrb	r1, [r1, #0]
    e09c:	f000 fa80 	bl	e5a0 <memchr>
    e0a0:	9b01      	ldr	r3, [sp, #4]
    e0a2:	b328      	cbz	r0, e0f0 <_scanf_i+0xb8>
    e0a4:	f1b8 0f01 	cmp.w	r8, #1
    e0a8:	d156      	bne.n	e158 <_scanf_i+0x120>
    e0aa:	6862      	ldr	r2, [r4, #4]
    e0ac:	b92a      	cbnz	r2, e0ba <_scanf_i+0x82>
    e0ae:	2208      	movs	r2, #8
    e0b0:	6062      	str	r2, [r4, #4]
    e0b2:	6822      	ldr	r2, [r4, #0]
    e0b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    e0b8:	6022      	str	r2, [r4, #0]
    e0ba:	6822      	ldr	r2, [r4, #0]
    e0bc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
    e0c0:	6022      	str	r2, [r4, #0]
    e0c2:	68a2      	ldr	r2, [r4, #8]
    e0c4:	1e51      	subs	r1, r2, #1
    e0c6:	60a1      	str	r1, [r4, #8]
    e0c8:	b192      	cbz	r2, e0f0 <_scanf_i+0xb8>
    e0ca:	6832      	ldr	r2, [r6, #0]
    e0cc:	1c51      	adds	r1, r2, #1
    e0ce:	6031      	str	r1, [r6, #0]
    e0d0:	7812      	ldrb	r2, [r2, #0]
    e0d2:	701a      	strb	r2, [r3, #0]
    e0d4:	1c5d      	adds	r5, r3, #1
    e0d6:	6873      	ldr	r3, [r6, #4]
    e0d8:	3b01      	subs	r3, #1
    e0da:	2b00      	cmp	r3, #0
    e0dc:	6073      	str	r3, [r6, #4]
    e0de:	dc06      	bgt.n	e0ee <_scanf_i+0xb6>
    e0e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    e0e4:	4631      	mov	r1, r6
    e0e6:	4658      	mov	r0, fp
    e0e8:	4798      	blx	r3
    e0ea:	2800      	cmp	r0, #0
    e0ec:	d176      	bne.n	e1dc <_scanf_i+0x1a4>
    e0ee:	462b      	mov	r3, r5
    e0f0:	f108 0801 	add.w	r8, r8, #1
    e0f4:	f1b8 0f03 	cmp.w	r8, #3
    e0f8:	d1c9      	bne.n	e08e <_scanf_i+0x56>
    e0fa:	6862      	ldr	r2, [r4, #4]
    e0fc:	b90a      	cbnz	r2, e102 <_scanf_i+0xca>
    e0fe:	220a      	movs	r2, #10
    e100:	6062      	str	r2, [r4, #4]
    e102:	6862      	ldr	r2, [r4, #4]
    e104:	4945      	ldr	r1, [pc, #276]	; (e21c <_scanf_i+0x1e4>)
    e106:	6960      	ldr	r0, [r4, #20]
    e108:	9301      	str	r3, [sp, #4]
    e10a:	1a89      	subs	r1, r1, r2
    e10c:	f000 f898 	bl	e240 <__sccl>
    e110:	9b01      	ldr	r3, [sp, #4]
    e112:	f04f 0800 	mov.w	r8, #0
    e116:	461d      	mov	r5, r3
    e118:	68a3      	ldr	r3, [r4, #8]
    e11a:	2b00      	cmp	r3, #0
    e11c:	d038      	beq.n	e190 <_scanf_i+0x158>
    e11e:	6831      	ldr	r1, [r6, #0]
    e120:	6960      	ldr	r0, [r4, #20]
    e122:	780a      	ldrb	r2, [r1, #0]
    e124:	5c80      	ldrb	r0, [r0, r2]
    e126:	2800      	cmp	r0, #0
    e128:	d032      	beq.n	e190 <_scanf_i+0x158>
    e12a:	2a30      	cmp	r2, #48	; 0x30
    e12c:	6822      	ldr	r2, [r4, #0]
    e12e:	d121      	bne.n	e174 <_scanf_i+0x13c>
    e130:	0510      	lsls	r0, r2, #20
    e132:	d51f      	bpl.n	e174 <_scanf_i+0x13c>
    e134:	f108 0801 	add.w	r8, r8, #1
    e138:	b117      	cbz	r7, e140 <_scanf_i+0x108>
    e13a:	3301      	adds	r3, #1
    e13c:	3f01      	subs	r7, #1
    e13e:	60a3      	str	r3, [r4, #8]
    e140:	6873      	ldr	r3, [r6, #4]
    e142:	3b01      	subs	r3, #1
    e144:	2b00      	cmp	r3, #0
    e146:	6073      	str	r3, [r6, #4]
    e148:	dd1b      	ble.n	e182 <_scanf_i+0x14a>
    e14a:	6833      	ldr	r3, [r6, #0]
    e14c:	3301      	adds	r3, #1
    e14e:	6033      	str	r3, [r6, #0]
    e150:	68a3      	ldr	r3, [r4, #8]
    e152:	3b01      	subs	r3, #1
    e154:	60a3      	str	r3, [r4, #8]
    e156:	e7df      	b.n	e118 <_scanf_i+0xe0>
    e158:	f1b8 0f02 	cmp.w	r8, #2
    e15c:	d1b1      	bne.n	e0c2 <_scanf_i+0x8a>
    e15e:	6822      	ldr	r2, [r4, #0]
    e160:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
    e164:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    e168:	d1c2      	bne.n	e0f0 <_scanf_i+0xb8>
    e16a:	2110      	movs	r1, #16
    e16c:	6061      	str	r1, [r4, #4]
    e16e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    e172:	e7a5      	b.n	e0c0 <_scanf_i+0x88>
    e174:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
    e178:	6022      	str	r2, [r4, #0]
    e17a:	780b      	ldrb	r3, [r1, #0]
    e17c:	702b      	strb	r3, [r5, #0]
    e17e:	3501      	adds	r5, #1
    e180:	e7de      	b.n	e140 <_scanf_i+0x108>
    e182:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    e186:	4631      	mov	r1, r6
    e188:	4658      	mov	r0, fp
    e18a:	4798      	blx	r3
    e18c:	2800      	cmp	r0, #0
    e18e:	d0df      	beq.n	e150 <_scanf_i+0x118>
    e190:	6823      	ldr	r3, [r4, #0]
    e192:	05d9      	lsls	r1, r3, #23
    e194:	d50c      	bpl.n	e1b0 <_scanf_i+0x178>
    e196:	454d      	cmp	r5, r9
    e198:	d908      	bls.n	e1ac <_scanf_i+0x174>
    e19a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
    e19e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
    e1a2:	4632      	mov	r2, r6
    e1a4:	4658      	mov	r0, fp
    e1a6:	4798      	blx	r3
    e1a8:	1e6f      	subs	r7, r5, #1
    e1aa:	463d      	mov	r5, r7
    e1ac:	454d      	cmp	r5, r9
    e1ae:	d02c      	beq.n	e20a <_scanf_i+0x1d2>
    e1b0:	6822      	ldr	r2, [r4, #0]
    e1b2:	f012 0210 	ands.w	r2, r2, #16
    e1b6:	d11e      	bne.n	e1f6 <_scanf_i+0x1be>
    e1b8:	702a      	strb	r2, [r5, #0]
    e1ba:	6863      	ldr	r3, [r4, #4]
    e1bc:	9e00      	ldr	r6, [sp, #0]
    e1be:	4649      	mov	r1, r9
    e1c0:	4658      	mov	r0, fp
    e1c2:	47b0      	blx	r6
    e1c4:	6822      	ldr	r2, [r4, #0]
    e1c6:	f8da 3000 	ldr.w	r3, [sl]
    e1ca:	f012 0f20 	tst.w	r2, #32
    e1ce:	d008      	beq.n	e1e2 <_scanf_i+0x1aa>
    e1d0:	1d1a      	adds	r2, r3, #4
    e1d2:	f8ca 2000 	str.w	r2, [sl]
    e1d6:	681b      	ldr	r3, [r3, #0]
    e1d8:	6018      	str	r0, [r3, #0]
    e1da:	e009      	b.n	e1f0 <_scanf_i+0x1b8>
    e1dc:	f04f 0800 	mov.w	r8, #0
    e1e0:	e7d6      	b.n	e190 <_scanf_i+0x158>
    e1e2:	07d2      	lsls	r2, r2, #31
    e1e4:	d5f4      	bpl.n	e1d0 <_scanf_i+0x198>
    e1e6:	1d1a      	adds	r2, r3, #4
    e1e8:	f8ca 2000 	str.w	r2, [sl]
    e1ec:	681b      	ldr	r3, [r3, #0]
    e1ee:	8018      	strh	r0, [r3, #0]
    e1f0:	68e3      	ldr	r3, [r4, #12]
    e1f2:	3301      	adds	r3, #1
    e1f4:	60e3      	str	r3, [r4, #12]
    e1f6:	eba5 0509 	sub.w	r5, r5, r9
    e1fa:	44a8      	add	r8, r5
    e1fc:	6925      	ldr	r5, [r4, #16]
    e1fe:	4445      	add	r5, r8
    e200:	6125      	str	r5, [r4, #16]
    e202:	2000      	movs	r0, #0
    e204:	b007      	add	sp, #28
    e206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e20a:	2001      	movs	r0, #1
    e20c:	e7fa      	b.n	e204 <_scanf_i+0x1cc>
    e20e:	bf00      	nop
    e210:	000116a0 	.word	0x000116a0
    e214:	0000e4c1 	.word	0x0000e4c1
    e218:	0000e3a1 	.word	0x0000e3a1
    e21c:	000116bc 	.word	0x000116bc

0000e220 <_sbrk_r>:
    e220:	b538      	push	{r3, r4, r5, lr}
    e222:	4c06      	ldr	r4, [pc, #24]	; (e23c <_sbrk_r+0x1c>)
    e224:	2300      	movs	r3, #0
    e226:	4605      	mov	r5, r0
    e228:	4608      	mov	r0, r1
    e22a:	6023      	str	r3, [r4, #0]
    e22c:	f7f4 fb10 	bl	2850 <_sbrk>
    e230:	1c43      	adds	r3, r0, #1
    e232:	d102      	bne.n	e23a <_sbrk_r+0x1a>
    e234:	6823      	ldr	r3, [r4, #0]
    e236:	b103      	cbz	r3, e23a <_sbrk_r+0x1a>
    e238:	602b      	str	r3, [r5, #0]
    e23a:	bd38      	pop	{r3, r4, r5, pc}
    e23c:	200090e4 	.word	0x200090e4

0000e240 <__sccl>:
    e240:	b570      	push	{r4, r5, r6, lr}
    e242:	780b      	ldrb	r3, [r1, #0]
    e244:	2b5e      	cmp	r3, #94	; 0x5e
    e246:	bf13      	iteet	ne
    e248:	1c4a      	addne	r2, r1, #1
    e24a:	1c8a      	addeq	r2, r1, #2
    e24c:	784b      	ldrbeq	r3, [r1, #1]
    e24e:	2100      	movne	r1, #0
    e250:	bf08      	it	eq
    e252:	2101      	moveq	r1, #1
    e254:	1e44      	subs	r4, r0, #1
    e256:	f100 05ff 	add.w	r5, r0, #255	; 0xff
    e25a:	f804 1f01 	strb.w	r1, [r4, #1]!
    e25e:	42a5      	cmp	r5, r4
    e260:	d1fb      	bne.n	e25a <__sccl+0x1a>
    e262:	b913      	cbnz	r3, e26a <__sccl+0x2a>
    e264:	3a01      	subs	r2, #1
    e266:	4610      	mov	r0, r2
    e268:	bd70      	pop	{r4, r5, r6, pc}
    e26a:	f081 0401 	eor.w	r4, r1, #1
    e26e:	54c4      	strb	r4, [r0, r3]
    e270:	4611      	mov	r1, r2
    e272:	780d      	ldrb	r5, [r1, #0]
    e274:	2d2d      	cmp	r5, #45	; 0x2d
    e276:	f101 0201 	add.w	r2, r1, #1
    e27a:	d006      	beq.n	e28a <__sccl+0x4a>
    e27c:	2d5d      	cmp	r5, #93	; 0x5d
    e27e:	d0f2      	beq.n	e266 <__sccl+0x26>
    e280:	b90d      	cbnz	r5, e286 <__sccl+0x46>
    e282:	460a      	mov	r2, r1
    e284:	e7ef      	b.n	e266 <__sccl+0x26>
    e286:	462b      	mov	r3, r5
    e288:	e7f1      	b.n	e26e <__sccl+0x2e>
    e28a:	784e      	ldrb	r6, [r1, #1]
    e28c:	2e5d      	cmp	r6, #93	; 0x5d
    e28e:	d0fa      	beq.n	e286 <__sccl+0x46>
    e290:	42b3      	cmp	r3, r6
    e292:	dcf8      	bgt.n	e286 <__sccl+0x46>
    e294:	3102      	adds	r1, #2
    e296:	3301      	adds	r3, #1
    e298:	429e      	cmp	r6, r3
    e29a:	54c4      	strb	r4, [r0, r3]
    e29c:	dcfb      	bgt.n	e296 <__sccl+0x56>
    e29e:	e7e8      	b.n	e272 <__sccl+0x32>

0000e2a0 <_strtol_l.isra.0>:
    e2a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e2a4:	4680      	mov	r8, r0
    e2a6:	4689      	mov	r9, r1
    e2a8:	4692      	mov	sl, r2
    e2aa:	461f      	mov	r7, r3
    e2ac:	468b      	mov	fp, r1
    e2ae:	465d      	mov	r5, fp
    e2b0:	980a      	ldr	r0, [sp, #40]	; 0x28
    e2b2:	f815 4b01 	ldrb.w	r4, [r5], #1
    e2b6:	f000 f950 	bl	e55a <__locale_ctype_ptr_l>
    e2ba:	4420      	add	r0, r4
    e2bc:	7846      	ldrb	r6, [r0, #1]
    e2be:	f016 0608 	ands.w	r6, r6, #8
    e2c2:	d10b      	bne.n	e2dc <_strtol_l.isra.0+0x3c>
    e2c4:	2c2d      	cmp	r4, #45	; 0x2d
    e2c6:	d10b      	bne.n	e2e0 <_strtol_l.isra.0+0x40>
    e2c8:	782c      	ldrb	r4, [r5, #0]
    e2ca:	2601      	movs	r6, #1
    e2cc:	f10b 0502 	add.w	r5, fp, #2
    e2d0:	b167      	cbz	r7, e2ec <_strtol_l.isra.0+0x4c>
    e2d2:	2f10      	cmp	r7, #16
    e2d4:	d114      	bne.n	e300 <_strtol_l.isra.0+0x60>
    e2d6:	2c30      	cmp	r4, #48	; 0x30
    e2d8:	d00a      	beq.n	e2f0 <_strtol_l.isra.0+0x50>
    e2da:	e011      	b.n	e300 <_strtol_l.isra.0+0x60>
    e2dc:	46ab      	mov	fp, r5
    e2de:	e7e6      	b.n	e2ae <_strtol_l.isra.0+0xe>
    e2e0:	2c2b      	cmp	r4, #43	; 0x2b
    e2e2:	bf04      	itt	eq
    e2e4:	782c      	ldrbeq	r4, [r5, #0]
    e2e6:	f10b 0502 	addeq.w	r5, fp, #2
    e2ea:	e7f1      	b.n	e2d0 <_strtol_l.isra.0+0x30>
    e2ec:	2c30      	cmp	r4, #48	; 0x30
    e2ee:	d127      	bne.n	e340 <_strtol_l.isra.0+0xa0>
    e2f0:	782b      	ldrb	r3, [r5, #0]
    e2f2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    e2f6:	2b58      	cmp	r3, #88	; 0x58
    e2f8:	d14b      	bne.n	e392 <_strtol_l.isra.0+0xf2>
    e2fa:	786c      	ldrb	r4, [r5, #1]
    e2fc:	2710      	movs	r7, #16
    e2fe:	3502      	adds	r5, #2
    e300:	2e00      	cmp	r6, #0
    e302:	bf0c      	ite	eq
    e304:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
    e308:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
    e30c:	2200      	movs	r2, #0
    e30e:	fbb1 fef7 	udiv	lr, r1, r7
    e312:	4610      	mov	r0, r2
    e314:	fb07 1c1e 	mls	ip, r7, lr, r1
    e318:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    e31c:	2b09      	cmp	r3, #9
    e31e:	d811      	bhi.n	e344 <_strtol_l.isra.0+0xa4>
    e320:	461c      	mov	r4, r3
    e322:	42a7      	cmp	r7, r4
    e324:	dd1d      	ble.n	e362 <_strtol_l.isra.0+0xc2>
    e326:	1c53      	adds	r3, r2, #1
    e328:	d007      	beq.n	e33a <_strtol_l.isra.0+0x9a>
    e32a:	4586      	cmp	lr, r0
    e32c:	d316      	bcc.n	e35c <_strtol_l.isra.0+0xbc>
    e32e:	d101      	bne.n	e334 <_strtol_l.isra.0+0x94>
    e330:	45a4      	cmp	ip, r4
    e332:	db13      	blt.n	e35c <_strtol_l.isra.0+0xbc>
    e334:	fb00 4007 	mla	r0, r0, r7, r4
    e338:	2201      	movs	r2, #1
    e33a:	f815 4b01 	ldrb.w	r4, [r5], #1
    e33e:	e7eb      	b.n	e318 <_strtol_l.isra.0+0x78>
    e340:	270a      	movs	r7, #10
    e342:	e7dd      	b.n	e300 <_strtol_l.isra.0+0x60>
    e344:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
    e348:	2b19      	cmp	r3, #25
    e34a:	d801      	bhi.n	e350 <_strtol_l.isra.0+0xb0>
    e34c:	3c37      	subs	r4, #55	; 0x37
    e34e:	e7e8      	b.n	e322 <_strtol_l.isra.0+0x82>
    e350:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
    e354:	2b19      	cmp	r3, #25
    e356:	d804      	bhi.n	e362 <_strtol_l.isra.0+0xc2>
    e358:	3c57      	subs	r4, #87	; 0x57
    e35a:	e7e2      	b.n	e322 <_strtol_l.isra.0+0x82>
    e35c:	f04f 32ff 	mov.w	r2, #4294967295
    e360:	e7eb      	b.n	e33a <_strtol_l.isra.0+0x9a>
    e362:	1c53      	adds	r3, r2, #1
    e364:	d108      	bne.n	e378 <_strtol_l.isra.0+0xd8>
    e366:	2322      	movs	r3, #34	; 0x22
    e368:	f8c8 3000 	str.w	r3, [r8]
    e36c:	4608      	mov	r0, r1
    e36e:	f1ba 0f00 	cmp.w	sl, #0
    e372:	d107      	bne.n	e384 <_strtol_l.isra.0+0xe4>
    e374:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e378:	b106      	cbz	r6, e37c <_strtol_l.isra.0+0xdc>
    e37a:	4240      	negs	r0, r0
    e37c:	f1ba 0f00 	cmp.w	sl, #0
    e380:	d00c      	beq.n	e39c <_strtol_l.isra.0+0xfc>
    e382:	b122      	cbz	r2, e38e <_strtol_l.isra.0+0xee>
    e384:	3d01      	subs	r5, #1
    e386:	f8ca 5000 	str.w	r5, [sl]
    e38a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e38e:	464d      	mov	r5, r9
    e390:	e7f9      	b.n	e386 <_strtol_l.isra.0+0xe6>
    e392:	2430      	movs	r4, #48	; 0x30
    e394:	2f00      	cmp	r7, #0
    e396:	d1b3      	bne.n	e300 <_strtol_l.isra.0+0x60>
    e398:	2708      	movs	r7, #8
    e39a:	e7b1      	b.n	e300 <_strtol_l.isra.0+0x60>
    e39c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000e3a0 <_strtol_r>:
    e3a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    e3a2:	4c06      	ldr	r4, [pc, #24]	; (e3bc <_strtol_r+0x1c>)
    e3a4:	4d06      	ldr	r5, [pc, #24]	; (e3c0 <_strtol_r+0x20>)
    e3a6:	6824      	ldr	r4, [r4, #0]
    e3a8:	6a24      	ldr	r4, [r4, #32]
    e3aa:	2c00      	cmp	r4, #0
    e3ac:	bf08      	it	eq
    e3ae:	462c      	moveq	r4, r5
    e3b0:	9400      	str	r4, [sp, #0]
    e3b2:	f7ff ff75 	bl	e2a0 <_strtol_l.isra.0>
    e3b6:	b003      	add	sp, #12
    e3b8:	bd30      	pop	{r4, r5, pc}
    e3ba:	bf00      	nop
    e3bc:	200000e0 	.word	0x200000e0
    e3c0:	20000144 	.word	0x20000144

0000e3c4 <_strtoul_l.isra.0>:
    e3c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e3c8:	4680      	mov	r8, r0
    e3ca:	4689      	mov	r9, r1
    e3cc:	4692      	mov	sl, r2
    e3ce:	461e      	mov	r6, r3
    e3d0:	460f      	mov	r7, r1
    e3d2:	463d      	mov	r5, r7
    e3d4:	9808      	ldr	r0, [sp, #32]
    e3d6:	f815 4b01 	ldrb.w	r4, [r5], #1
    e3da:	f000 f8be 	bl	e55a <__locale_ctype_ptr_l>
    e3de:	4420      	add	r0, r4
    e3e0:	7843      	ldrb	r3, [r0, #1]
    e3e2:	f013 0308 	ands.w	r3, r3, #8
    e3e6:	d10a      	bne.n	e3fe <_strtoul_l.isra.0+0x3a>
    e3e8:	2c2d      	cmp	r4, #45	; 0x2d
    e3ea:	d10a      	bne.n	e402 <_strtoul_l.isra.0+0x3e>
    e3ec:	782c      	ldrb	r4, [r5, #0]
    e3ee:	2301      	movs	r3, #1
    e3f0:	1cbd      	adds	r5, r7, #2
    e3f2:	b15e      	cbz	r6, e40c <_strtoul_l.isra.0+0x48>
    e3f4:	2e10      	cmp	r6, #16
    e3f6:	d113      	bne.n	e420 <_strtoul_l.isra.0+0x5c>
    e3f8:	2c30      	cmp	r4, #48	; 0x30
    e3fa:	d009      	beq.n	e410 <_strtoul_l.isra.0+0x4c>
    e3fc:	e010      	b.n	e420 <_strtoul_l.isra.0+0x5c>
    e3fe:	462f      	mov	r7, r5
    e400:	e7e7      	b.n	e3d2 <_strtoul_l.isra.0+0xe>
    e402:	2c2b      	cmp	r4, #43	; 0x2b
    e404:	bf04      	itt	eq
    e406:	782c      	ldrbeq	r4, [r5, #0]
    e408:	1cbd      	addeq	r5, r7, #2
    e40a:	e7f2      	b.n	e3f2 <_strtoul_l.isra.0+0x2e>
    e40c:	2c30      	cmp	r4, #48	; 0x30
    e40e:	d125      	bne.n	e45c <_strtoul_l.isra.0+0x98>
    e410:	782a      	ldrb	r2, [r5, #0]
    e412:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    e416:	2a58      	cmp	r2, #88	; 0x58
    e418:	d14a      	bne.n	e4b0 <_strtoul_l.isra.0+0xec>
    e41a:	786c      	ldrb	r4, [r5, #1]
    e41c:	2610      	movs	r6, #16
    e41e:	3502      	adds	r5, #2
    e420:	f04f 31ff 	mov.w	r1, #4294967295
    e424:	2700      	movs	r7, #0
    e426:	fbb1 f1f6 	udiv	r1, r1, r6
    e42a:	fb06 fe01 	mul.w	lr, r6, r1
    e42e:	ea6f 0e0e 	mvn.w	lr, lr
    e432:	4638      	mov	r0, r7
    e434:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
    e438:	2a09      	cmp	r2, #9
    e43a:	d811      	bhi.n	e460 <_strtoul_l.isra.0+0x9c>
    e43c:	4614      	mov	r4, r2
    e43e:	42a6      	cmp	r6, r4
    e440:	dd1d      	ble.n	e47e <_strtoul_l.isra.0+0xba>
    e442:	2f00      	cmp	r7, #0
    e444:	db18      	blt.n	e478 <_strtoul_l.isra.0+0xb4>
    e446:	4281      	cmp	r1, r0
    e448:	d316      	bcc.n	e478 <_strtoul_l.isra.0+0xb4>
    e44a:	d101      	bne.n	e450 <_strtoul_l.isra.0+0x8c>
    e44c:	45a6      	cmp	lr, r4
    e44e:	db13      	blt.n	e478 <_strtoul_l.isra.0+0xb4>
    e450:	fb00 4006 	mla	r0, r0, r6, r4
    e454:	2701      	movs	r7, #1
    e456:	f815 4b01 	ldrb.w	r4, [r5], #1
    e45a:	e7eb      	b.n	e434 <_strtoul_l.isra.0+0x70>
    e45c:	260a      	movs	r6, #10
    e45e:	e7df      	b.n	e420 <_strtoul_l.isra.0+0x5c>
    e460:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
    e464:	2a19      	cmp	r2, #25
    e466:	d801      	bhi.n	e46c <_strtoul_l.isra.0+0xa8>
    e468:	3c37      	subs	r4, #55	; 0x37
    e46a:	e7e8      	b.n	e43e <_strtoul_l.isra.0+0x7a>
    e46c:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
    e470:	2a19      	cmp	r2, #25
    e472:	d804      	bhi.n	e47e <_strtoul_l.isra.0+0xba>
    e474:	3c57      	subs	r4, #87	; 0x57
    e476:	e7e2      	b.n	e43e <_strtoul_l.isra.0+0x7a>
    e478:	f04f 37ff 	mov.w	r7, #4294967295
    e47c:	e7eb      	b.n	e456 <_strtoul_l.isra.0+0x92>
    e47e:	2f00      	cmp	r7, #0
    e480:	da09      	bge.n	e496 <_strtoul_l.isra.0+0xd2>
    e482:	2322      	movs	r3, #34	; 0x22
    e484:	f8c8 3000 	str.w	r3, [r8]
    e488:	f04f 30ff 	mov.w	r0, #4294967295
    e48c:	f1ba 0f00 	cmp.w	sl, #0
    e490:	d107      	bne.n	e4a2 <_strtoul_l.isra.0+0xde>
    e492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e496:	b103      	cbz	r3, e49a <_strtoul_l.isra.0+0xd6>
    e498:	4240      	negs	r0, r0
    e49a:	f1ba 0f00 	cmp.w	sl, #0
    e49e:	d00c      	beq.n	e4ba <_strtoul_l.isra.0+0xf6>
    e4a0:	b127      	cbz	r7, e4ac <_strtoul_l.isra.0+0xe8>
    e4a2:	3d01      	subs	r5, #1
    e4a4:	f8ca 5000 	str.w	r5, [sl]
    e4a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e4ac:	464d      	mov	r5, r9
    e4ae:	e7f9      	b.n	e4a4 <_strtoul_l.isra.0+0xe0>
    e4b0:	2430      	movs	r4, #48	; 0x30
    e4b2:	2e00      	cmp	r6, #0
    e4b4:	d1b4      	bne.n	e420 <_strtoul_l.isra.0+0x5c>
    e4b6:	2608      	movs	r6, #8
    e4b8:	e7b2      	b.n	e420 <_strtoul_l.isra.0+0x5c>
    e4ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0000e4c0 <_strtoul_r>:
    e4c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    e4c2:	4c06      	ldr	r4, [pc, #24]	; (e4dc <_strtoul_r+0x1c>)
    e4c4:	4d06      	ldr	r5, [pc, #24]	; (e4e0 <_strtoul_r+0x20>)
    e4c6:	6824      	ldr	r4, [r4, #0]
    e4c8:	6a24      	ldr	r4, [r4, #32]
    e4ca:	2c00      	cmp	r4, #0
    e4cc:	bf08      	it	eq
    e4ce:	462c      	moveq	r4, r5
    e4d0:	9400      	str	r4, [sp, #0]
    e4d2:	f7ff ff77 	bl	e3c4 <_strtoul_l.isra.0>
    e4d6:	b003      	add	sp, #12
    e4d8:	bd30      	pop	{r4, r5, pc}
    e4da:	bf00      	nop
    e4dc:	200000e0 	.word	0x200000e0
    e4e0:	20000144 	.word	0x20000144

0000e4e4 <__submore>:
    e4e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e4e8:	460c      	mov	r4, r1
    e4ea:	6b49      	ldr	r1, [r1, #52]	; 0x34
    e4ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
    e4f0:	4299      	cmp	r1, r3
    e4f2:	d11e      	bne.n	e532 <__submore+0x4e>
    e4f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
    e4f8:	f7ff fb2e 	bl	db58 <_malloc_r>
    e4fc:	b918      	cbnz	r0, e506 <__submore+0x22>
    e4fe:	f04f 30ff 	mov.w	r0, #4294967295
    e502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e506:	f44f 6380 	mov.w	r3, #1024	; 0x400
    e50a:	63a3      	str	r3, [r4, #56]	; 0x38
    e50c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
    e510:	6360      	str	r0, [r4, #52]	; 0x34
    e512:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
    e516:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    e51a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
    e51e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    e522:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
    e526:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
    e52a:	6020      	str	r0, [r4, #0]
    e52c:	2000      	movs	r0, #0
    e52e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e532:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    e534:	0077      	lsls	r7, r6, #1
    e536:	463a      	mov	r2, r7
    e538:	f000 f8d2 	bl	e6e0 <_realloc_r>
    e53c:	4605      	mov	r5, r0
    e53e:	2800      	cmp	r0, #0
    e540:	d0dd      	beq.n	e4fe <__submore+0x1a>
    e542:	eb00 0806 	add.w	r8, r0, r6
    e546:	4601      	mov	r1, r0
    e548:	4632      	mov	r2, r6
    e54a:	4640      	mov	r0, r8
    e54c:	f7ff fa8d 	bl	da6a <memcpy>
    e550:	f8c4 8000 	str.w	r8, [r4]
    e554:	6365      	str	r5, [r4, #52]	; 0x34
    e556:	63a7      	str	r7, [r4, #56]	; 0x38
    e558:	e7e8      	b.n	e52c <__submore+0x48>

0000e55a <__locale_ctype_ptr_l>:
    e55a:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
    e55e:	4770      	bx	lr

0000e560 <__locale_ctype_ptr>:
    e560:	4b04      	ldr	r3, [pc, #16]	; (e574 <__locale_ctype_ptr+0x14>)
    e562:	4a05      	ldr	r2, [pc, #20]	; (e578 <__locale_ctype_ptr+0x18>)
    e564:	681b      	ldr	r3, [r3, #0]
    e566:	6a1b      	ldr	r3, [r3, #32]
    e568:	2b00      	cmp	r3, #0
    e56a:	bf08      	it	eq
    e56c:	4613      	moveq	r3, r2
    e56e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
    e572:	4770      	bx	lr
    e574:	200000e0 	.word	0x200000e0
    e578:	20000144 	.word	0x20000144

0000e57c <__ascii_mbtowc>:
    e57c:	b082      	sub	sp, #8
    e57e:	b901      	cbnz	r1, e582 <__ascii_mbtowc+0x6>
    e580:	a901      	add	r1, sp, #4
    e582:	b142      	cbz	r2, e596 <__ascii_mbtowc+0x1a>
    e584:	b14b      	cbz	r3, e59a <__ascii_mbtowc+0x1e>
    e586:	7813      	ldrb	r3, [r2, #0]
    e588:	600b      	str	r3, [r1, #0]
    e58a:	7812      	ldrb	r2, [r2, #0]
    e58c:	1c10      	adds	r0, r2, #0
    e58e:	bf18      	it	ne
    e590:	2001      	movne	r0, #1
    e592:	b002      	add	sp, #8
    e594:	4770      	bx	lr
    e596:	4610      	mov	r0, r2
    e598:	e7fb      	b.n	e592 <__ascii_mbtowc+0x16>
    e59a:	f06f 0001 	mvn.w	r0, #1
    e59e:	e7f8      	b.n	e592 <__ascii_mbtowc+0x16>

0000e5a0 <memchr>:
    e5a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    e5a4:	2a10      	cmp	r2, #16
    e5a6:	db2b      	blt.n	e600 <memchr+0x60>
    e5a8:	f010 0f07 	tst.w	r0, #7
    e5ac:	d008      	beq.n	e5c0 <memchr+0x20>
    e5ae:	f810 3b01 	ldrb.w	r3, [r0], #1
    e5b2:	3a01      	subs	r2, #1
    e5b4:	428b      	cmp	r3, r1
    e5b6:	d02d      	beq.n	e614 <memchr+0x74>
    e5b8:	f010 0f07 	tst.w	r0, #7
    e5bc:	b342      	cbz	r2, e610 <memchr+0x70>
    e5be:	d1f6      	bne.n	e5ae <memchr+0xe>
    e5c0:	b4f0      	push	{r4, r5, r6, r7}
    e5c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    e5c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    e5ca:	f022 0407 	bic.w	r4, r2, #7
    e5ce:	f07f 0700 	mvns.w	r7, #0
    e5d2:	2300      	movs	r3, #0
    e5d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    e5d8:	3c08      	subs	r4, #8
    e5da:	ea85 0501 	eor.w	r5, r5, r1
    e5de:	ea86 0601 	eor.w	r6, r6, r1
    e5e2:	fa85 f547 	uadd8	r5, r5, r7
    e5e6:	faa3 f587 	sel	r5, r3, r7
    e5ea:	fa86 f647 	uadd8	r6, r6, r7
    e5ee:	faa5 f687 	sel	r6, r5, r7
    e5f2:	b98e      	cbnz	r6, e618 <memchr+0x78>
    e5f4:	d1ee      	bne.n	e5d4 <memchr+0x34>
    e5f6:	bcf0      	pop	{r4, r5, r6, r7}
    e5f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    e5fc:	f002 0207 	and.w	r2, r2, #7
    e600:	b132      	cbz	r2, e610 <memchr+0x70>
    e602:	f810 3b01 	ldrb.w	r3, [r0], #1
    e606:	3a01      	subs	r2, #1
    e608:	ea83 0301 	eor.w	r3, r3, r1
    e60c:	b113      	cbz	r3, e614 <memchr+0x74>
    e60e:	d1f8      	bne.n	e602 <memchr+0x62>
    e610:	2000      	movs	r0, #0
    e612:	4770      	bx	lr
    e614:	3801      	subs	r0, #1
    e616:	4770      	bx	lr
    e618:	2d00      	cmp	r5, #0
    e61a:	bf06      	itte	eq
    e61c:	4635      	moveq	r5, r6
    e61e:	3803      	subeq	r0, #3
    e620:	3807      	subne	r0, #7
    e622:	f015 0f01 	tst.w	r5, #1
    e626:	d107      	bne.n	e638 <memchr+0x98>
    e628:	3001      	adds	r0, #1
    e62a:	f415 7f80 	tst.w	r5, #256	; 0x100
    e62e:	bf02      	ittt	eq
    e630:	3001      	addeq	r0, #1
    e632:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    e636:	3001      	addeq	r0, #1
    e638:	bcf0      	pop	{r4, r5, r6, r7}
    e63a:	3801      	subs	r0, #1
    e63c:	4770      	bx	lr
    e63e:	bf00      	nop

0000e640 <__malloc_lock>:
    e640:	4770      	bx	lr

0000e642 <__malloc_unlock>:
    e642:	4770      	bx	lr

0000e644 <_free_r>:
    e644:	b538      	push	{r3, r4, r5, lr}
    e646:	4605      	mov	r5, r0
    e648:	2900      	cmp	r1, #0
    e64a:	d045      	beq.n	e6d8 <_free_r+0x94>
    e64c:	f851 3c04 	ldr.w	r3, [r1, #-4]
    e650:	1f0c      	subs	r4, r1, #4
    e652:	2b00      	cmp	r3, #0
    e654:	bfb8      	it	lt
    e656:	18e4      	addlt	r4, r4, r3
    e658:	f7ff fff2 	bl	e640 <__malloc_lock>
    e65c:	4a1f      	ldr	r2, [pc, #124]	; (e6dc <_free_r+0x98>)
    e65e:	6813      	ldr	r3, [r2, #0]
    e660:	4610      	mov	r0, r2
    e662:	b933      	cbnz	r3, e672 <_free_r+0x2e>
    e664:	6063      	str	r3, [r4, #4]
    e666:	6014      	str	r4, [r2, #0]
    e668:	4628      	mov	r0, r5
    e66a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    e66e:	f7ff bfe8 	b.w	e642 <__malloc_unlock>
    e672:	42a3      	cmp	r3, r4
    e674:	d90c      	bls.n	e690 <_free_r+0x4c>
    e676:	6821      	ldr	r1, [r4, #0]
    e678:	1862      	adds	r2, r4, r1
    e67a:	4293      	cmp	r3, r2
    e67c:	bf04      	itt	eq
    e67e:	681a      	ldreq	r2, [r3, #0]
    e680:	685b      	ldreq	r3, [r3, #4]
    e682:	6063      	str	r3, [r4, #4]
    e684:	bf04      	itt	eq
    e686:	1852      	addeq	r2, r2, r1
    e688:	6022      	streq	r2, [r4, #0]
    e68a:	6004      	str	r4, [r0, #0]
    e68c:	e7ec      	b.n	e668 <_free_r+0x24>
    e68e:	4613      	mov	r3, r2
    e690:	685a      	ldr	r2, [r3, #4]
    e692:	b10a      	cbz	r2, e698 <_free_r+0x54>
    e694:	42a2      	cmp	r2, r4
    e696:	d9fa      	bls.n	e68e <_free_r+0x4a>
    e698:	6819      	ldr	r1, [r3, #0]
    e69a:	1858      	adds	r0, r3, r1
    e69c:	42a0      	cmp	r0, r4
    e69e:	d10b      	bne.n	e6b8 <_free_r+0x74>
    e6a0:	6820      	ldr	r0, [r4, #0]
    e6a2:	4401      	add	r1, r0
    e6a4:	1858      	adds	r0, r3, r1
    e6a6:	4282      	cmp	r2, r0
    e6a8:	6019      	str	r1, [r3, #0]
    e6aa:	d1dd      	bne.n	e668 <_free_r+0x24>
    e6ac:	6810      	ldr	r0, [r2, #0]
    e6ae:	6852      	ldr	r2, [r2, #4]
    e6b0:	605a      	str	r2, [r3, #4]
    e6b2:	4401      	add	r1, r0
    e6b4:	6019      	str	r1, [r3, #0]
    e6b6:	e7d7      	b.n	e668 <_free_r+0x24>
    e6b8:	d902      	bls.n	e6c0 <_free_r+0x7c>
    e6ba:	230c      	movs	r3, #12
    e6bc:	602b      	str	r3, [r5, #0]
    e6be:	e7d3      	b.n	e668 <_free_r+0x24>
    e6c0:	6820      	ldr	r0, [r4, #0]
    e6c2:	1821      	adds	r1, r4, r0
    e6c4:	428a      	cmp	r2, r1
    e6c6:	bf04      	itt	eq
    e6c8:	6811      	ldreq	r1, [r2, #0]
    e6ca:	6852      	ldreq	r2, [r2, #4]
    e6cc:	6062      	str	r2, [r4, #4]
    e6ce:	bf04      	itt	eq
    e6d0:	1809      	addeq	r1, r1, r0
    e6d2:	6021      	streq	r1, [r4, #0]
    e6d4:	605c      	str	r4, [r3, #4]
    e6d6:	e7c7      	b.n	e668 <_free_r+0x24>
    e6d8:	bd38      	pop	{r3, r4, r5, pc}
    e6da:	bf00      	nop
    e6dc:	20007404 	.word	0x20007404

0000e6e0 <_realloc_r>:
    e6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e6e2:	4607      	mov	r7, r0
    e6e4:	4614      	mov	r4, r2
    e6e6:	460e      	mov	r6, r1
    e6e8:	b921      	cbnz	r1, e6f4 <_realloc_r+0x14>
    e6ea:	4611      	mov	r1, r2
    e6ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    e6f0:	f7ff ba32 	b.w	db58 <_malloc_r>
    e6f4:	b922      	cbnz	r2, e700 <_realloc_r+0x20>
    e6f6:	f7ff ffa5 	bl	e644 <_free_r>
    e6fa:	4625      	mov	r5, r4
    e6fc:	4628      	mov	r0, r5
    e6fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e700:	f000 f821 	bl	e746 <_malloc_usable_size_r>
    e704:	4284      	cmp	r4, r0
    e706:	d90f      	bls.n	e728 <_realloc_r+0x48>
    e708:	4621      	mov	r1, r4
    e70a:	4638      	mov	r0, r7
    e70c:	f7ff fa24 	bl	db58 <_malloc_r>
    e710:	4605      	mov	r5, r0
    e712:	2800      	cmp	r0, #0
    e714:	d0f2      	beq.n	e6fc <_realloc_r+0x1c>
    e716:	4631      	mov	r1, r6
    e718:	4622      	mov	r2, r4
    e71a:	f7ff f9a6 	bl	da6a <memcpy>
    e71e:	4631      	mov	r1, r6
    e720:	4638      	mov	r0, r7
    e722:	f7ff ff8f 	bl	e644 <_free_r>
    e726:	e7e9      	b.n	e6fc <_realloc_r+0x1c>
    e728:	4635      	mov	r5, r6
    e72a:	e7e7      	b.n	e6fc <_realloc_r+0x1c>

0000e72c <__ascii_wctomb>:
    e72c:	b149      	cbz	r1, e742 <__ascii_wctomb+0x16>
    e72e:	2aff      	cmp	r2, #255	; 0xff
    e730:	bf85      	ittet	hi
    e732:	238a      	movhi	r3, #138	; 0x8a
    e734:	6003      	strhi	r3, [r0, #0]
    e736:	700a      	strbls	r2, [r1, #0]
    e738:	f04f 30ff 	movhi.w	r0, #4294967295
    e73c:	bf98      	it	ls
    e73e:	2001      	movls	r0, #1
    e740:	4770      	bx	lr
    e742:	4608      	mov	r0, r1
    e744:	4770      	bx	lr

0000e746 <_malloc_usable_size_r>:
    e746:	f851 0c04 	ldr.w	r0, [r1, #-4]
    e74a:	2800      	cmp	r0, #0
    e74c:	f1a0 0004 	sub.w	r0, r0, #4
    e750:	bfbc      	itt	lt
    e752:	580b      	ldrlt	r3, [r1, r0]
    e754:	18c0      	addlt	r0, r0, r3
    e756:	4770      	bx	lr

0000e758 <Representation.78635>:
    e758:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
    e768:	0000 0000 4f47 444f 0000 0000 4341 4954     ....GOOD....ACTI
    e778:	4556 0000 494c 4b4e 4f44 4e57 0000 0000     VE..LINKDOWN....
    e788:	7265 2072 6177 6574 2072 2031 203d 6425     err water 1 = %d
    e798:	0a0d 0000 6f43 6c75 2064 4f4e 2054 6572     ....Could NOT re
    e7a8:	6461 6620 6f72 206d 6874 2065 6177 6574     ad from the wate
    e7b8:	2072 6564 6574 7463 726f 3120 0a0d 0000     r detector 1....
    e7c8:	7265 2072 6177 6574 2072 2032 203d 6425     err water 2 = %d
    e7d8:	0a0d 0000 6f43 6c75 2064 4f4e 2054 6572     ....Could NOT re
    e7e8:	6461 6620 6f72 206d 6874 2065 6177 6574     ad from the wate
    e7f8:	2072 6564 6574 7463 726f 3220 0a0d 0000     r detector 2....
    e808:	7265 2072 5648 3d20 2520 0d64 000a 0000     err HV = %d.....
    e818:	6f43 6c75 2064 4f4e 2054 6572 6461 6620     Could NOT read f
    e828:	6f72 206d 6874 2065 5648 6420 7669 6469     rom the HV divid
    e838:	7265 0a0d 0000 0000 6f43 6c75 2064 4f4e     er......Could NO
    e848:	2054 6572 6461 6620 6f72 206d 6874 2065     T read from the 
    e858:	6f6d 7369 7574 6572 2620 7420 6d65 2070     moisture & temp 
    e868:	6573 736e 726f 6f20 206e 4143 4452 3a42     sensor on CARDB:
    e878:	3249 2043 255b 5d69 0a0d 0000 2030 203d     I2C [%i]....0 = 
    e888:	7825 0a0d 0000 0000 2031 203d 7825 0a0d     %x......1 = %x..
    e898:	0000 0000 2032 203d 7825 0a0d 0000 0000     ....2 = %x......
    e8a8:	2033 203d 7825 0a0d 0000 0000 694c 2064     3 = %x......Lid 
    e8b8:	4154 504d 5245 5b20 7325 0d5d 000a 0000     TAMPER [%s].....
    e8c8:	654c 7466 4520 6874 7265 656e 2074 255b     Left Ethernet [%
    e8d8:	5d73 0a0d 0000 0000 6952 6867 2074 7445     s]......Right Et
    e8e8:	6568 6e72 7465 5b20 7325 0d5d 000a 0000     hernet [%s].....
    e8f8:	6f50 6577 2072 2026 7445 6568 6e72 7465     Power & Ethernet
    e908:	3c20 6f43 6d6d 2073 694c 6b6e 203e 255b      <Comms Link> [%
    e918:	5d73 0a0d 0000 0000 6f43 6c75 2064 6f6e     s]......Could no
    e928:	2074 6572 6461 4920 4332 6220 7375 6f20     t read I2C bus o
    e938:	206e 4143 4452 2041 6f66 2072 3249 5f43     n CARDA for I2C_
    e948:	6863 6365 5f6b 6564 6976 6563 4449 2928     check_deviceID()
    e958:	5b20 6925 0d5d 000a 4143 4452 2041 6e69      [%i]...CARDA in
    e968:	6573 7472 6465 6220 7475 6e20 746f 6920     serted but not i
    e978:	6564 746e 6669 6569 0d64 000a 4143 4452     dentified...CARD
    e988:	2041 7369 6120 4d20 5841 2049 4f49 0a0d     A is a MAXI IO..
    e998:	0000 0000 6f43 6c75 2064 4f4e 2054 7277     ....Could NOT wr
    e9a8:	7469 2065 6f74 7420 6568 4d20 6e69 2d69     ite to the Mini-
    e9b8:	4f49 4520 7078 6e61 6564 2072 6e6f 4320     IO Expander on C
    e9c8:	5241 4144 493a 4332 5b20 6925 0d5d 000a     ARDA:I2C [%i]...
    e9d8:	4143 4452 2041 7369 6120 4d20 4e49 2049     CARDA is a MINI 
    e9e8:	4f49 0a0d 0000 0000 4143 4452 2041 7369     IO......CARDA is
    e9f8:	6120 5620 4249 4152 4f50 4e49 0d54 000a      a VIBRAPOINT...
    ea08:	6f43 6c75 2064 4f4e 2054 7277 7469 2065     Could NOT write 
    ea18:	6f74 7420 6568 4420 4341 4720 6961 206e     to the DAC Gain 
    ea28:	6f63 746e 6f72 6c6c 7265 6f20 206e 4143     controller on CA
    ea38:	4452 3a41 3249 2043 255b 5d69 0a0d 0000     RDA:I2C [%i]....
    ea48:	4143 4452 2041 7369 6120 5620 4249 4152     CARDA is a VIBRA
    ea58:	4554 0d4b 000a 0000 535b 4950 4b5f 5a53     TEK.....[SPI_KSZ
    ea68:	3738 3439 505f 524f 3354 4f43 544e 4f52     8794_PORT3CONTRO
    ea78:	324c 205d 6f6e 2074 6f63 7272 6365 0d74     L2] not correct.
    ea88:	000a 0000 4143 4452 2041 7369 6120 5020     ....CARDA is a P
    ea98:	776f 7265 2620 4520 6874 7265 656e 2074     ower & Ethernet 
    eaa8:	6144 6775 7468 7265 432d 7261 0d64 000a     Daughter-Card...
    eab8:	4143 4452 2041 6168 2073 6562 6e65 5220     CARDA has been R
    eac8:	4d45 564f 4445 0a0d 0000 0000 6f43 6c75     EMOVED......Coul
    ead8:	2064 6f6e 2074 6572 6461 4920 4332 6220     d not read I2C b
    eae8:	7375 6f20 206e 4143 4452 2042 6f66 2072     us on CARDB for 
    eaf8:	3249 5f43 6863 6365 5f6b 6564 6976 6563     I2C_check_device
    eb08:	4449 2928 5b20 6925 0d5d 000a 4143 4452     ID() [%i]...CARD
    eb18:	2042 6e69 6573 7472 6465 6220 7475 6e20     B inserted but n
    eb28:	746f 6920 6564 746e 6669 6569 0d64 000a     ot identified...
    eb38:	4143 4452 2042 7369 6120 4d20 5841 2049     CARDB is a MAXI 
    eb48:	4f49 0a0d 0000 0000 6f43 6c75 2064 4f4e     IO......Could NO
    eb58:	2054 7277 7469 2065 6f74 7420 6568 4d20     T write to the M
    eb68:	6e69 2d69 4f49 4520 7078 6e61 6564 2072     ini-IO Expander 
    eb78:	6e6f 4320 5241 4244 493a 4332 5b20 6925     on CARDB:I2C [%i
    eb88:	0d5d 000a 4143 4452 2042 7369 6120 4d20     ]...CARDB is a M
    eb98:	4e49 2049 4f49 0a0d 0000 0000 4143 4452     INI IO......CARD
    eba8:	2042 7369 6120 5620 4249 4152 4f50 4e49     B is a VIBRAPOIN
    ebb8:	0d54 000a 6f43 6c75 2064 4f4e 2054 7277     T...Could NOT wr
    ebc8:	7469 2065 6f74 7420 6568 4420 4341 4720     ite to the DAC G
    ebd8:	6961 206e 6f63 746e 6f72 6c6c 7265 6f20     ain controller o
    ebe8:	206e 4143 4452 3a42 3249 2043 255b 5d69     n CARDB:I2C [%i]
    ebf8:	0a0d 0000 4143 4452 2042 7369 6120 5620     ....CARDB is a V
    ec08:	4249 4152 4554 0d4b 000a 0000 4143 4452     IBRATEK.....CARD
    ec18:	2042 6168 2073 6562 6e65 5220 4d45 564f     B has been REMOV
    ec28:	4445 0a0d 0000 0000 2e2e 682f 6c61 692f     ED......../hal/i
    ec38:	636e 756c 6564 682f 6c61 775f 7464 682e     nclude/hal_wdt.h
    ec48:	0000 0000 6548 6c6c 206f 6f57 6c72 2164     ....Hello World!
    ec58:	0000 0000 2e2e 682f 6c61 732f 6372 682f     ....../hal/src/h
    ec68:	6c61 615f 6364 735f 6e79 2e63 0063 0000     al_adc_sync.c...
    ec78:	2e2e 682f 6c61 732f 6372 682f 6c61 615f     ../hal/src/hal_a
    ec88:	7365 735f 6e79 2e63 0063 0000 2e2e 682f     es_sync.c...../h
    ec98:	6c61 732f 6372 682f 6c61 635f 6372 735f     al/src/hal_crc_s
    eca8:	6e79 2e63 0063 0000 2e2e 682f 6c61 732f     ync.c...../hal/s
    ecb8:	6372 682f 6c61 665f 616c 6873 632e 0000     rc/hal_flash.c..
    ecc8:	2e2e 682f 6c61 732f 6372 682f 6c61 695f     ../hal/src/hal_i
    ecd8:	2e6f 0063 2e2e 682f 6c61 732f 6372 682f     o.c.../hal/src/h
    ece8:	6c61 6d5f 6361 615f 7973 636e 632e 0000     al_mac_async.c..
    ecf8:	2e2e 682f 6c61 732f 6372 682f 6c61 735f     ../hal/src/hal_s
    ed08:	6168 735f 6e79 2e63 0063 0000 2e2e 682f     ha_sync.c...../h
    ed18:	6c61 732f 6372 682f 6c61 735f 6970 6d5f     al/src/hal_spi_m
    ed28:	735f 6e79 2e63 0063 2e2e 682f 6c61 732f     _sync.c.../hal/s
    ed38:	6372 682f 6c61 745f 6d69 7265 632e 0000     rc/hal_timer.c..
    ed48:	2e2e 682f 6c61 732f 6372 682f 6c61 755f     ../hal/src/hal_u
    ed58:	6173 7472 615f 7973 636e 632e 0000 0000     sart_async.c....
    ed68:	2e2e 682f 6c61 752f 6974 736c 732f 6372     ../hal/utils/src
    ed78:	752f 6974 736c 6c5f 7369 2e74 0063 0000     /utils_list.c...
    ed88:	2e2e 682f 6c61 752f 6974 736c 732f 6372     ../hal/utils/src
    ed98:	752f 6974 736c 725f 6e69 6267 6675 6566     /utils_ringbuffe
    eda8:	2e72 0063                                   r.c.

0000edac <_adcs>:
    edac:	0000 0340 0018 0003 1800 0000 0000 0000     ..@.............
	...
    edc4:	2e2e 682f 6c70 612f 6364 682f 6c70 615f     ../hpl/adc/hpl_a
    edd4:	6364 632e 0000 0000                         dc.c....

0000eddc <_cfgs>:
    eddc:	4500 0000 0000 1600 0000 0000 0000 0000     .E..............
	...
    eedc:	2e2e 682f 6c70 6e2f 6d76 7463 6c72 682f     ../hpl/nvmctrl/h
    eeec:	6c70 6e5f 6d76 7463 6c72 632e 0000 0000     pl_nvmctrl.c....
    eefc:	3000 4000 3400 4000 2000 4101 4000 4101     .0.@.4.@. .A.@.A
    ef0c:	0000 4300 0400 4300 0800 4300 0c00 4300     ...C...C...C...C

0000ef1c <_usarts>:
    ef1c:	0000 0000 0084 4010 0000 0003 0002 0070     .......@......p.
    ef2c:	f4bc 0000 0000 0000 0005 0000 0084 4010     ...............@
    ef3c:	0000 0003 0002 0070 f4bc 0000 0000 0000     ......p.........

0000ef4c <_i2cms>:
	...
    ef64:	2e2e 682f 6c70 732f 7265 6f63 2f6d 7068     ../hpl/sercom/hp
    ef74:	5f6c 6573 6372 6d6f 632e 0000 3800 4000     l_sercom.c...8.@
    ef84:	3c00 4000 a000 4101 c000 4101 1400 4200     .<.@...A...A...B
    ef94:	1800 4200 1400 4300 1800 4300               ...B...C...C

0000efa0 <_tcs>:
    efa0:	0000 006b 07d8 0000 0000 0001 002e 0000     ..k.............
    efb0:	0000 0000 2e2e 682f 6c70 742f 2f63 7068     ....../hpl/tc/hp
    efc0:	5f6c 6374 632e 0000                         l_tc.c..

0000efc8 <_usb_ep_cfgs>:
    efc8:	71fc 2000 0000 0000 0040 0000 71bc 2000     .q. ....@....q. 
    efd8:	0000 0000 0040 0000 717c 2000 0000 0000     ....@...|q. ....
    efe8:	0040 0000 2e2e 682f 6c70 772f 7464 682f     @...../hpl/wdt/h
    eff8:	6c70 775f 7464 632e 0000 0000 5355 2042     pl_wdt.c....USB 
    f008:	6e69 7469 652f 616e 6c62 2065 5245 4f52     init/enable ERRO
    f018:	2152 2121 2121 2121 0a0d 0000 7375 5f62     R!!!!!!!....usb_
    f028:	6e69 7469 2928 0a0d 0000 0000 6463 5f63     init()......cdc_
    f038:	6564 6976 6563 615f 6d63 695f 696e 2874     device_acm_init(
    f048:	0d29 000a 6463 6463 5f66 6361 5f6d 6572     )...cdcdf_acm_re
    f058:	6967 7473 7265 635f 6c61 626c 6361 286b     gister_callback(
    f068:	4443 4443 5f46 4341 5f4d 4243 535f 4154     CDCDF_ACM_CB_STA
    f078:	4554 435f 202c 4628 4e55 5f43 5450 2952     TE_C, (FUNC_PTR)
    f088:	7375 5f62 6564 6976 6563 635f 5f62 7473     usb_device_cb_st
    f098:	7461 5f65 2963 0a0d 0000 0000 6f43 666e     ate_c)......Conf
    f0a8:	6769 7275 6e69 2067 6e61 2064 6863 6365     iguring and chec
    f0b8:	696b 676e 7420 6568 5320 4950 4b20 5a53     king the SPI KSZ
    f0c8:	3738 3439 4520 6874 7265 656e 2074 5753     8794 Ethernet SW
    f0d8:	5449 4843 7220 6765 7369 6574 7372 2e2e     ITCH registers..
    f0e8:	0d2e 000a 535b 4950 4b5f 5a53 3738 3439     ....[SPI_KSZ8794
    f0f8:	465f 4d41 4c49 5f59 4449 205d 6f6e 2074     _FAMILY_ID] not 
    f108:	6f63 7272 6365 0d74 000a 0000 535b 4950     correct.....[SPI
    f118:	4b5f 5a53 3738 3439 535f 4154 5452 6620     _KSZ8794_START f
    f128:	7269 7473 205d 6f6e 2074 6f63 7272 6365     irst] not correc
    f138:	0d74 000a 535b 4950 4b5f 5a53 3738 3439     t...[SPI_KSZ8794
    f148:	475f 4f4c 4142 304c 205d 6f6e 2074 6f63     _GLOBAL0] not co
    f158:	7272 6365 0d74 000a 535b 4950 4b5f 5a53     rrect...[SPI_KSZ
    f168:	3738 3439 475f 4f4c 4142 314c 205d 6f6e     8794_GLOBAL1] no
    f178:	2074 6f63 7272 6365 0d74 000a 535b 4950     t correct...[SPI
    f188:	4b5f 5a53 3738 3439 475f 4f4c 4142 324c     _KSZ8794_GLOBAL2
    f198:	205d 6f6e 2074 6f63 7272 6365 0d74 000a     ] not correct...
    f1a8:	535b 4950 4b5f 5a53 3738 3439 475f 4f4c     [SPI_KSZ8794_GLO
    f1b8:	4142 334c 205d 6f6e 2074 6f63 7272 6365     BAL3] not correc
    f1c8:	0d74 000a 535b 4950 4b5f 5a53 3738 3439     t...[SPI_KSZ8794
    f1d8:	475f 4f4c 4142 344c 205d 6f6e 2074 6f63     _GLOBAL4] not co
    f1e8:	7272 6365 0d74 000a 535b 4950 4b5f 5a53     rrect...[SPI_KSZ
    f1f8:	3738 3439 475f 4f4c 4142 354c 205d 6f6e     8794_GLOBAL5] no
    f208:	2074 6f63 7272 6365 0d74 000a 535b 4950     t correct...[SPI
    f218:	4b5f 5a53 3738 3439 475f 4f4c 4142 364c     _KSZ8794_GLOBAL6
    f228:	205d 6f6e 2074 6f63 7272 6365 0d74 000a     ] not correct...
    f238:	535b 4950 4b5f 5a53 3738 3439 475f 4f4c     [SPI_KSZ8794_GLO
    f248:	4142 394c 205d 6f6e 2074 6f63 7272 6365     BAL9] not correc
    f258:	0d74 000a 535b 4950 4b5f 5a53 3738 3439     t...[SPI_KSZ8794
    f268:	475f 4f4c 4142 314c 5d30 6e20 746f 6320     _GLOBAL10] not c
    f278:	726f 6572 7463 0a0d 0000 0000 535b 4950     orrect......[SPI
    f288:	4b5f 5a53 3738 3439 505f 4d44 3143 205d     _KSZ8794_PDMC1] 
    f298:	6f6e 2074 6f63 7272 6365 0d74 000a 0000     not correct.....
    f2a8:	535b 4950 4b5f 5a53 3738 3439 505f 4d44     [SPI_KSZ8794_PDM
    f2b8:	3243 205d 6f6e 2074 6f63 7272 6365 0d74     C2] not correct.
    f2c8:	000a 0000 535b 4950 4b5f 5a53 3738 3439     ....[SPI_KSZ8794
    f2d8:	505f 524f 3154 4f43 544e 4f52 304c 205d     _PORT1CONTROL0] 
    f2e8:	6f6e 2074 6f63 7272 6365 0d74 000a 0000     not correct.....
    f2f8:	535b 4950 4b5f 5a53 3738 3439 505f 524f     [SPI_KSZ8794_POR
    f308:	3254 4f43 544e 4f52 304c 205d 6f6e 2074     T2CONTROL0] not 
    f318:	6f63 7272 6365 0d74 000a 0000 535b 4950     correct.....[SPI
    f328:	4b5f 5a53 3738 3439 505f 524f 3354 4f43     _KSZ8794_PORT3CO
    f338:	544e 4f52 304c 205d 6f6e 2074 6f63 7272     NTROL0] not corr
    f348:	6365 0d74 000a 0000 535b 4950 4b5f 5a53     ect.....[SPI_KSZ
    f358:	3738 3439 505f 524f 3454 4f43 544e 4f52     8794_PORT4CONTRO
    f368:	304c 205d 6f6e 2074 6f63 7272 6365 0d74     L0] not correct.
    f378:	000a 0000 535b 4950 4b5f 5a53 3738 3439     ....[SPI_KSZ8794
    f388:	505f 524f 3154 4f43 544e 4f52 314c 205d     _PORT1CONTROL1] 
    f398:	6f6e 2074 6f63 7272 6365 0d74 000a 0000     not correct.....
    f3a8:	535b 4950 4b5f 5a53 3738 3439 505f 524f     [SPI_KSZ8794_POR
    f3b8:	3254 4f43 544e 4f52 314c 205d 6f6e 2074     T2CONTROL1] not 
    f3c8:	6f63 7272 6365 0d74 000a 0000 535b 4950     correct.....[SPI
    f3d8:	4b5f 5a53 3738 3439 505f 524f 3354 4f43     _KSZ8794_PORT3CO
    f3e8:	544e 4f52 314c 205d 6f6e 2074 6f63 7272     NTROL1] not corr
    f3f8:	6365 0d74 000a 0000 535b 4950 4b5f 5a53     ect.....[SPI_KSZ
    f408:	3738 3439 505f 524f 3454 4f43 544e 4f52     8794_PORT4CONTRO
    f418:	314c 205d 6f6e 2074 6f63 7272 6365 0d74     L1] not correct.
    f428:	000a 0000 535b 4950 4b5f 5a53 3738 3439     ....[SPI_KSZ8794
    f438:	505f 524f 3154 4f43 544e 4f52 324c 205d     _PORT1CONTROL2] 
    f448:	6f6e 2074 6f63 7272 6365 0d74 000a 0000     not correct.....
    f458:	535b 4950 4b5f 5a53 3738 3439 505f 524f     [SPI_KSZ8794_POR
    f468:	3254 4f43 544e 4f52 324c 205d 6f6e 2074     T2CONTROL2] not 
    f478:	6f63 7272 6365 0d74 000a 0000 535b 4950     correct.....[SPI
    f488:	4b5f 5a53 3738 3439 505f 524f 3454 4f43     _KSZ8794_PORT4CO
    f498:	544e 4f52 324c 205d 6f6e 2074 6f63 7272     NTROL2] not corr
    f4a8:	6365 0d74 000a 0000 535b 4950 4b5f 5a53     ect.....[SPI_KSZ
    f4b8:	3738 3439 505f 524f 3154 4f43 544e 4f52     8794_PORT1CONTRO
    f4c8:	334c 205d 6f6e 2074 6f63 7272 6365 0d74     L3] not correct.
    f4d8:	000a 0000 535b 4950 4b5f 5a53 3738 3439     ....[SPI_KSZ8794
    f4e8:	505f 524f 3254 4f43 544e 4f52 334c 205d     _PORT2CONTROL3] 
    f4f8:	6f6e 2074 6f63 7272 6365 0d74 000a 0000     not correct.....
    f508:	535b 4950 4b5f 5a53 3738 3439 505f 524f     [SPI_KSZ8794_POR
    f518:	3354 4f43 544e 4f52 334c 205d 6f6e 2074     T3CONTROL3] not 
    f528:	6f63 7272 6365 0d74 000a 0000 535b 4950     correct.....[SPI
    f538:	4b5f 5a53 3738 3439 505f 524f 3454 4f43     _KSZ8794_PORT4CO
    f548:	544e 4f52 334c 205d 6f6e 2074 6f63 7272     NTROL3] not corr
    f558:	6365 0d74 000a 0000 535b 4950 4b5f 5a53     ect.....[SPI_KSZ
    f568:	3738 3439 505f 524f 3154 4f43 544e 4f52     8794_PORT1CONTRO
    f578:	344c 205d 6f6e 2074 6f63 7272 6365 0d74     L4] not correct.
    f588:	000a 0000 535b 4950 4b5f 5a53 3738 3439     ....[SPI_KSZ8794
    f598:	505f 524f 3254 4f43 544e 4f52 344c 205d     _PORT2CONTROL4] 
    f5a8:	6f6e 2074 6f63 7272 6365 0d74 000a 0000     not correct.....
    f5b8:	535b 4950 4b5f 5a53 3738 3439 505f 524f     [SPI_KSZ8794_POR
    f5c8:	3354 4f43 544e 4f52 344c 205d 6f6e 2074     T3CONTROL4] not 
    f5d8:	6f63 7272 6365 0d74 000a 0000 535b 4950     correct.....[SPI
    f5e8:	4b5f 5a53 3738 3439 505f 524f 3454 4f43     _KSZ8794_PORT4CO
    f5f8:	544e 4f52 344c 205d 6f6e 2074 6f63 7272     NTROL4] not corr
    f608:	6365 0d74 000a 0000 535b 4950 4b5f 5a53     ect.....[SPI_KSZ
    f618:	3738 3439 505f 524f 3154 4f43 544e 4f52     8794_PORT1CONTRO
    f628:	354c 205d 6f6e 2074 6f63 7272 6365 0d74     L5] not correct.
    f638:	000a 0000 535b 4950 4b5f 5a53 3738 3439     ....[SPI_KSZ8794
    f648:	505f 524f 3254 4f43 544e 4f52 354c 205d     _PORT2CONTROL5] 
    f658:	6f6e 2074 6f63 7272 6365 0d74 000a 0000     not correct.....
    f668:	535b 4950 4b5f 5a53 3738 3439 505f 524f     [SPI_KSZ8794_POR
    f678:	3354 4f43 544e 4f52 354c 205d 6f6e 2074     T3CONTROL5] not 
    f688:	6f63 7272 6365 0d74 000a 0000 535b 4950     correct.....[SPI
    f698:	4b5f 5a53 3738 3439 505f 524f 3454 4f43     _KSZ8794_PORT4CO
    f6a8:	544e 4f52 354c 205d 6f6e 2074 6f63 7272     NTROL5] not corr
    f6b8:	6365 0d74 000a 0000 535b 4950 4b5f 5a53     ect.....[SPI_KSZ
    f6c8:	3738 3439 505f 524f 3454 4f43 544e 4f52     8794_PORT4CONTRO
    f6d8:	364c 205d 6f6e 2074 6f63 7272 6365 0d74     L6] not correct.
    f6e8:	000a 0000 535b 4950 4b5f 5a53 3738 3439     ....[SPI_KSZ8794
    f6f8:	505f 524f 3154 4f43 544e 4f52 374c 205d     _PORT1CONTROL7] 
    f708:	6f6e 2074 6f63 7272 6365 0d74 000a 0000     not correct.....
    f718:	535b 4950 4b5f 5a53 3738 3439 505f 524f     [SPI_KSZ8794_POR
    f728:	3254 4f43 544e 4f52 374c 205d 6f6e 2074     T2CONTROL7] not 
    f738:	6f63 7272 6365 0d74 000a 0000 535b 4950     correct.....[SPI
    f748:	4b5f 5a53 3738 3439 505f 524f 3354 4f43     _KSZ8794_PORT3CO
    f758:	544e 4f52 374c 205d 6f6e 2074 6f63 7272     NTROL7] not corr
    f768:	6365 0d74 000a 0000 535b 4950 4b5f 5a53     ect.....[SPI_KSZ
    f778:	3738 3439 505f 524f 3154 4f43 544e 4f52     8794_PORT1CONTRO
    f788:	384c 205d 6f6e 2074 6f63 7272 6365 0d74     L8] not correct.
    f798:	000a 0000 535b 4950 4b5f 5a53 3738 3439     ....[SPI_KSZ8794
    f7a8:	505f 524f 3254 4f43 544e 4f52 384c 205d     _PORT2CONTROL8] 
    f7b8:	6f6e 2074 6f63 7272 6365 0d74 000a 0000     not correct.....
    f7c8:	535b 4950 4b5f 5a53 3738 3439 505f 524f     [SPI_KSZ8794_POR
    f7d8:	3354 4f43 544e 4f52 384c 205d 6f6e 2074     T3CONTROL8] not 
    f7e8:	6f63 7272 6365 0d74 000a 0000 535b 4950     correct.....[SPI
    f7f8:	4b5f 5a53 3738 3439 505f 524f 3154 494c     _KSZ8794_PORT1LI
    f808:	4b4e 444d 205d 6f6e 2074 6f63 7272 6365     NKMD] not correc
    f818:	0d74 000a 535b 4950 4b5f 5a53 3738 3439     t...[SPI_KSZ8794
    f828:	505f 524f 3254 494c 4b4e 444d 205d 6f6e     _PORT2LINKMD] no
    f838:	2074 6f63 7272 6365 0d74 000a 535b 4950     t correct...[SPI
    f848:	4b5f 5a53 3738 3439 505f 524f 3354 494c     _KSZ8794_PORT3LI
    f858:	4b4e 444d 205d 6f6e 2074 6f63 7272 6365     NKMD] not correc
    f868:	0d74 000a 535b 4950 4b5f 5a53 3738 3439     t...[SPI_KSZ8794
    f878:	505f 524f 3154 4f43 544e 4f52 394c 205d     _PORT1CONTROL9] 
    f888:	6f6e 2074 6f63 7272 6365 0d74 000a 0000     not correct.....
    f898:	535b 4950 4b5f 5a53 3738 3439 505f 524f     [SPI_KSZ8794_POR
    f8a8:	3254 4f43 544e 4f52 394c 205d 6f6e 2074     T2CONTROL9] not 
    f8b8:	6f63 7272 6365 0d74 000a 0000 535b 4950     correct.....[SPI
    f8c8:	4b5f 5a53 3738 3439 505f 524f 3354 4f43     _KSZ8794_PORT3CO
    f8d8:	544e 4f52 394c 205d 6f6e 2074 6f63 7272     NTROL9] not corr
    f8e8:	6365 0d74 000a 0000 535b 4950 4b5f 5a53     ect.....[SPI_KSZ
    f8f8:	3738 3439 505f 524f 3154 4f43 544e 4f52     8794_PORT1CONTRO
    f908:	314c 5d30 6e20 746f 6320 726f 6572 7463     L10] not correct
    f918:	0a0d 0000 535b 4950 4b5f 5a53 3738 3439     ....[SPI_KSZ8794
    f928:	505f 524f 3254 4f43 544e 4f52 314c 5d30     _PORT2CONTROL10]
    f938:	6e20 746f 6320 726f 6572 7463 0a0d 0000      not correct....
    f948:	535b 4950 4b5f 5a53 3738 3439 505f 524f     [SPI_KSZ8794_POR
    f958:	3354 4f43 544e 4f52 314c 5d30 6e20 746f     T3CONTROL10] not
    f968:	6320 726f 6572 7463 0a0d 0000 535b 4950      correct....[SPI
    f978:	4b5f 5a53 3738 3439 505f 524f 3254 4f43     _KSZ8794_PORT2CO
    f988:	544e 4f52 324c 5d30 6e20 746f 6320 726f     NTROL20] not cor
    f998:	6572 7463 0a0d 0000 535b 4950 4b5f 5a53     rect....[SPI_KSZ
    f9a8:	3738 3439 505f 524f 3154 4f43 544e 4f52     8794_PORT1CONTRO
    f9b8:	314c 5d32 6e20 746f 6320 726f 6572 7463     L12] not correct
    f9c8:	0a0d 0000 535b 4950 4b5f 5a53 3738 3439     ....[SPI_KSZ8794
    f9d8:	505f 524f 3254 4f43 544e 4f52 314c 5d32     _PORT2CONTROL12]
    f9e8:	6e20 746f 6320 726f 6572 7463 0a0d 0000      not correct....
    f9f8:	535b 4950 4b5f 5a53 3738 3439 505f 524f     [SPI_KSZ8794_POR
    fa08:	3354 4f43 544e 4f52 314c 5d32 6e20 746f     T3CONTROL12] not
    fa18:	6320 726f 6572 7463 0a0d 0000 535b 4950      correct....[SPI
    fa28:	4b5f 5a53 3738 3439 505f 524f 3454 4f43     _KSZ8794_PORT4CO
    fa38:	544e 4f52 314c 5d32 6e20 746f 6320 726f     NTROL12] not cor
    fa48:	6572 7463 0a0d 0000 535b 4950 4b5f 5a53     rect....[SPI_KSZ
    fa58:	3738 3439 505f 524f 3154 4f43 544e 4f52     8794_PORT1CONTRO
    fa68:	314c 5d33 6e20 746f 6320 726f 6572 7463     L13] not correct
    fa78:	0a0d 0000 535b 4950 4b5f 5a53 3738 3439     ....[SPI_KSZ8794
    fa88:	505f 524f 3254 4f43 544e 4f52 314c 5d33     _PORT2CONTROL13]
    fa98:	6e20 746f 6320 726f 6572 7463 0a0d 0000      not correct....
    faa8:	535b 4950 4b5f 5a53 3738 3439 505f 524f     [SPI_KSZ8794_POR
    fab8:	3354 4f43 544e 4f52 314c 5d33 6e20 746f     T3CONTROL13] not
    fac8:	6320 726f 6572 7463 0a0d 0000 535b 4950      correct....[SPI
    fad8:	4b5f 5a53 3738 3439 505f 524f 3454 4f43     _KSZ8794_PORT4CO
    fae8:	544e 4f52 314c 5d33 6e20 746f 6320 726f     NTROL13] not cor
    faf8:	6572 7463 0a0d 0000 535b 4950 4b5f 5a53     rect....[SPI_KSZ
    fb08:	3738 3439 505f 524f 3154 4f43 544e 4f52     8794_PORT1CONTRO
    fb18:	314c 5d34 6e20 746f 6320 726f 6572 7463     L14] not correct
    fb28:	0a0d 0000 535b 4950 4b5f 5a53 3738 3439     ....[SPI_KSZ8794
    fb38:	505f 524f 3254 4f43 544e 4f52 314c 5d34     _PORT2CONTROL14]
    fb48:	6e20 746f 6320 726f 6572 7463 0a0d 0000      not correct....
    fb58:	535b 4950 4b5f 5a53 3738 3439 505f 524f     [SPI_KSZ8794_POR
    fb68:	3354 4f43 544e 4f52 314c 5d34 6e20 746f     T3CONTROL14] not
    fb78:	6320 726f 6572 7463 0a0d 0000 535b 4950      correct....[SPI
    fb88:	4b5f 5a53 3738 3439 505f 524f 3454 4f43     _KSZ8794_PORT4CO
    fb98:	544e 4f52 314c 5d34 6e20 746f 6320 726f     NTROL14] not cor
    fba8:	6572 7463 0a0d 0000 535b 4950 4b5f 5a53     rect....[SPI_KSZ
    fbb8:	3738 3439 505f 524f 3154 4f43 544e 4f52     8794_PORT1CONTRO
    fbc8:	314c 5d35 6e20 746f 6320 726f 6572 7463     L15] not correct
    fbd8:	0a0d 0000 535b 4950 4b5f 5a53 3738 3439     ....[SPI_KSZ8794
    fbe8:	505f 524f 3254 4f43 544e 4f52 314c 5d35     _PORT2CONTROL15]
    fbf8:	6e20 746f 6320 726f 6572 7463 0a0d 0000      not correct....
    fc08:	535b 4950 4b5f 5a53 3738 3439 505f 524f     [SPI_KSZ8794_POR
    fc18:	3354 4f43 544e 4f52 314c 5d35 6e20 746f     T3CONTROL15] not
    fc28:	6320 726f 6572 7463 0a0d 0000 535b 4950      correct....[SPI
    fc38:	4b5f 5a53 3738 3439 505f 524f 3454 4f43     _KSZ8794_PORT4CO
    fc48:	544e 4f52 314c 5d35 6e20 746f 6320 726f     NTROL15] not cor
    fc58:	6572 7463 0a0d 0000 535b 4950 4b5f 5a53     rect....[SPI_KSZ
    fc68:	3738 3439 505f 524f 3154 4f43 544e 4f52     8794_PORT1CONTRO
    fc78:	314c 5d36 6e20 746f 6320 726f 6572 7463     L16] not correct
    fc88:	0a0d 0000 535b 4950 4b5f 5a53 3738 3439     ....[SPI_KSZ8794
    fc98:	505f 524f 3254 4f43 544e 4f52 314c 5d36     _PORT2CONTROL16]
    fca8:	6e20 746f 6320 726f 6572 7463 0a0d 0000      not correct....
    fcb8:	535b 4950 4b5f 5a53 3738 3439 505f 524f     [SPI_KSZ8794_POR
    fcc8:	3354 4f43 544e 4f52 314c 5d36 6e20 746f     T3CONTROL16] not
    fcd8:	6320 726f 6572 7463 0a0d 0000 535b 4950      correct....[SPI
    fce8:	4b5f 5a53 3738 3439 505f 524f 3454 4f43     _KSZ8794_PORT4CO
    fcf8:	544e 4f52 314c 5d36 6e20 746f 6320 726f     NTROL16] not cor
    fd08:	6572 7463 0a0d 0000 535b 4950 4b5f 5a53     rect....[SPI_KSZ
    fd18:	3738 3439 505f 524f 3154 4f43 544e 4f52     8794_PORT1CONTRO
    fd28:	314c 5d37 6e20 746f 6320 726f 6572 7463     L17] not correct
    fd38:	0a0d 0000 535b 4950 4b5f 5a53 3738 3439     ....[SPI_KSZ8794
    fd48:	505f 524f 3254 4f43 544e 4f52 314c 5d37     _PORT2CONTROL17]
    fd58:	6e20 746f 6320 726f 6572 7463 0a0d 0000      not correct....
    fd68:	535b 4950 4b5f 5a53 3738 3439 505f 524f     [SPI_KSZ8794_POR
    fd78:	3354 4f43 544e 4f52 314c 5d37 6e20 746f     T3CONTROL17] not
    fd88:	6320 726f 6572 7463 0a0d 0000 535b 4950      correct....[SPI
    fd98:	4b5f 5a53 3738 3439 505f 524f 3454 4f43     _KSZ8794_PORT4CO
    fda8:	544e 4f52 314c 5d37 6e20 746f 6320 726f     NTROL17] not cor
    fdb8:	6572 7463 0a0d 0000 535b 4950 4b5f 5a53     rect....[SPI_KSZ
    fdc8:	3738 3439 535f 4154 5452 6620 6e69 6c61     8794_START final
    fdd8:	205d 6f6e 2074 6f63 7272 6365 0d74 000a     ] not correct...
    fde8:	414d 2043 6461 7264 7365 2073 6e61 2064     MAC address and 
    fdf8:	5049 7320 6863 6d65 2065 6f6e 2074 6e69     IP scheme not in
    fe08:	7469 6169 696c 657a 2064 7361 7420 6568     itialized as the
    fe18:	6572 6920 2073 6f6e 5b20 4449 205d 6573     re is no [ID] se
    fe28:	2e74 2e2e 0a0d 0000 754d 746c 5369 6e65     t.......MultiSen
    fe38:	6573 5b20 6e69 7469 4d20 4341 492f 2050     se [init MAC/IP 
    fe48:	6176 756c 7365 205d 7825 253a 3a78 7825     values] %x:%x:%x
    fe58:	253a 3a78 7825 253a 2078 6425 252e 2e64     :%x:%x:%x %d.%d.
    fe68:	6425 252e 0d64 000a 614d 6e69 5520 5044     %d.%d...Main UDP
    fe78:	7320 636f 656b 2074 7263 6165 6574 2e64      socket created.
    fe88:	2e2e 0a0d 0000 0000 614d 6e69 5520 5044     ........Main UDP
    fe98:	7320 636f 656b 2074 5245 4f52 2152 2121      socket ERROR!!!
    fea8:	2121 2121 0a0d 0000 6143 6472 5b20 5d41     !!!!....Card [A]
    feb8:	5520 5044 7320 636f 656b 2074 7263 6165      UDP socket crea
    fec8:	6574 2e64 2e2e 0a0d 0000 0000 6143 6472     ted.........Card
    fed8:	5b20 5d41 5520 5044 7320 636f 656b 2074      [A] UDP socket 
    fee8:	5245 4f52 2152 2121 2121 2121 0a0d 0000     ERROR!!!!!!!....
    fef8:	6143 6472 5b20 5d42 5520 5044 7320 636f     Card [B] UDP soc
    ff08:	656b 2074 7263 6165 6574 2e64 2e2e 0a0d     ket created.....
    ff18:	0000 0000 6143 6472 5b20 5d42 5520 5044     ....Card [B] UDP
    ff28:	7320 636f 656b 2074 5245 4f52 2152 2121      socket ERROR!!!
    ff38:	2121 2121 0a0d 0000 6952 676e 4d20 6e61     !!!!....Ring Man
    ff48:	6761 6d65 6e65 2074 4455 2050 6f73 6b63     agement UDP sock
    ff58:	7465 6320 6572 7461 6465 2e2e 0d2e 000a     et created......
    ff68:	6952 676e 4d20 6e61 6761 6d65 6e65 2074     Ring Management 
    ff78:	4455 2050 6f73 6b63 7465 4520 5252 524f     UDP socket ERROR
    ff88:	2121 2121 2121 0d21 000a 0000 754d 746c     !!!!!!!.....Mult
    ff98:	5369 6e65 6573 5b20 6f63 666e 6769 7275     iSense [configur
    ffa8:	7461 6f69 206e 5245 4f52 2052 4552 4441     ation ERROR READ
    ffb8:	4e49 5d47 0a0d 0000 754d 746c 5369 6e65     ING]....MultiSen
    ffc8:	6573 5b20 6f63 666e 6769 7275 7461 6f69     se [configuratio
    ffd8:	206e 4e49 4156 494c 5d44 0a0d 0000 0000     n INVALID]......
    ffe8:	554d 544c 5349 4e45 4553 4e20 4545 5344     MULTISENSE NEEDS
    fff8:	4320 4e4f 4946 5547 4952 474e 2e2e 002e      CONFIGURING....
   10008:	754d 746c 5369 6e65 6573 5b20 6f63 666e     MultiSense [conf
   10018:	6769 7275 7461 6f69 206e 4f46 4d52 5441     iguration FORMAT
   10028:	4554 5d44 0a0d 0000 754d 746c 5369 6e65     TED]....MultiSen
   10038:	6573 5b20 6f63 666e 6769 7275 7461 6f69     se [configuratio
   10048:	206e 5245 4f52 2052 5257 5449 4e49 5d47     n ERROR WRITING]
   10058:	0a0d 0000 754d 746c 5369 6e65 6573 5b20     ....MultiSense [
   10068:	6f63 666e 6769 7275 7461 6f69 206e 5257     configuration WR
   10078:	5449 4554 5d4e 0a0d 0000 0000 754d 746c     ITTEN]......Mult
   10088:	5369 6e65 6573 5b20 5055 4144 4554 2044     iSense [UPDATED 
   10098:	493c 3e44 6320 6e6f 6966 7567 6172 6974     <ID> configurati
   100a8:	6e6f 5720 4952 5454 4e45 0d5d 000a 0000     on WRITTEN].....
   100b8:	6c47 626f 6c61 7320 7465 6974 676e 2073     Global settings 
   100c8:	6170 6b63 7465 7220 6365 6965 6576 2e64     packet received.
   100d8:	2e2e 0a0d 0000 0000 6143 6472 2041 694d     ........CardA Mi
   100e8:	696e 492d 204f 6170 6b63 7465 7220 6365     ni-IO packet rec
   100f8:	6965 6576 2e64 2e2e 0a0d 0000 6143 6472     eived.......Card
   10108:	2042 694d 696e 492d 204f 6170 6b63 7465     B Mini-IO packet
   10118:	7220 6365 6965 6576 2e64 2e2e 0a0d 0000      received.......
   10128:	7242 616f 6364 7361 2074 6154 6c62 2065     Broadcast Table 
   10138:	465b 554c 4853 205d 4455 2050 6170 6b63     [FLUSH] UDP pack
   10148:	7465 6120 7272 7669 6465 2e2e 0d2e 000a     et arrived......
   10158:	6148 6472 6177 6572 7020 6361 656b 2074     Hardware packet 
   10168:	6573 646e 2e2e 0d2e 000a 0000 6143 6472     send........Card
   10178:	2041 694d 696e 492d 204f 6170 6b63 7465     A Mini-IO packet
   10188:	7320 6e65 2e64 2e2e 0a0d 0000 6143 6472      send.......Card
   10198:	2041 6956 7262 5461 6b65 7020 6361 656b     A VibraTek packe
   101a8:	2074 6573 646e 2e2e 0d2e 000a 6143 6472     t send......Card
   101b8:	2042 694d 696e 492d 204f 6170 6b63 7465     B Mini-IO packet
   101c8:	7320 6e65 2e64 2e2e 0a0d 0000 6143 6472      send.......Card
   101d8:	2042 6956 7262 5461 6b65 7020 6361 656b     B VibraTek packe
   101e8:	2074 6573 646e 2e2e 0d2e 000a 6f54 6f70     t send......Topo
   101f8:	6f6c 7967 7520 6470 7461 2065 6170 6b63     logy update pack
   10208:	7465 7320 6e65 2e64 2e2e 0a0d 0000 0000     et send.........
   10218:	4142 4553 5453 5441 4f49 004e 4150 5353     BASESTATION.PASS
   10228:	542d 5248 554f 4847 0000 0000 5055 0000     -THROUGH....UP..
   10238:	494c 4b4e 4f20 004b 494c 4b4e 4420 574f     LINK OK.LINK DOW
   10248:	004e 0000 6956 7262 5061 696f 746e 0000     N...VibraPoint..
   10258:	4f4e 2054 4946 5454 4445 0000 6956 7262     NOT FITTED..Vibr
   10268:	5461 6b65 0000 0000 614d 6978 4920 004f     aTek....Maxi IO.
   10278:	694d 696e 4920 004f 6e55 6e6b 776f 006e     Mini IO.Unknown.
   10288:	2650 0045 2f4e 0041 5242 4b4f 4e45 0000     P&E.N/A.BROKEN..
   10298:	4f4c 504f 0000 0000 5445 4548 4e52 5445     LOOP....ETHERNET
   102a8:	203a 625b 6f72 6461 6163 7473 7320 6f74     : [broadcast sto
   102b8:	6d72 205d 2121 2121 2121 2121 2121 2121     rm] !!!!!!!!!!!!
   102c8:	2121 2121 2121 2121 2121 2121 2121 2121     !!!!!!!!!!!!!!!!
   102d8:	2121 2121 2121 2121 2121 2121 2121 2121     !!!!!!!!!!!!!!!!
   102e8:	2121 2121 2121 2121 0d21 000a 7257 7469     !!!!!!!!!...Writ
   102f8:	2065 4441 2043 6167 6e69 7320 7465 6974     e ADC gain setti
   10308:	676e 2073 6f66 2072 6956 7262 5461 6b65     ngs for VibraTek
   10318:	4320 7261 4164 0a0d 0000 0000 7257 7469      CardA......Writ
   10328:	2065 4441 2043 6167 6e69 7320 7465 6974     e ADC gain setti
   10338:	676e 2073 6f66 2072 6956 7262 5461 6b65     ngs for VibraTek
   10348:	4320 7261 4264 0a0d 0000 0000 6f43 6c75      CardB......Coul
   10358:	2064 4f4e 2054 6572 6461 6620 6f72 206d     d NOT read from 
   10368:	6874 2065 694d 696e 492d 204f 4441 2043     the Mini-IO ADC 
   10378:	6e6f 4320 5241 4144 493a 4332 5b20 6925     on CARDA:I2C [%i
   10388:	0d5d 000a 6f43 6c75 2064 4f4e 2054 7277     ]...Could NOT wr
   10398:	7469 2065 6f74 7420 6568 4d20 6e69 2d69     ite to the Mini-
   103a8:	4f49 4120 4344 6320 6e6f 7274 6c6f 656c     IO ADC controlle
   103b8:	2072 6e6f 4320 5241 4144 493a 4332 5b20     r on CARDA:I2C [
   103c8:	6925 0d5d 000a 0000 6f43 6c75 2064 4f4e     %i].....Could NO
   103d8:	2054 7277 7469 2065 6f74 7420 6568 4d20     T write to the M
   103e8:	6e69 2d69 4f49 4520 5058 4e41 4544 2052     ini-IO EXPANDER 
   103f8:	6e6f 4320 5241 4144 493a 4332 5b20 6925     on CARDA:I2C [%i
   10408:	0d5d 000a 6f43 6c75 2064 4f4e 2054 6572     ]...Could NOT re
   10418:	6461 6620 6f72 206d 6874 2065 694d 696e     ad from the Mini
   10428:	492d 204f 5845 4150 444e 5245 6f20 206e     -IO EXPANDER on 
   10438:	4143 4452 3a41 3249 2043 255b 5d69 0a0d     CARDA:I2C [%i]..
   10448:	0000 0000 6f43 6c75 2064 4f4e 2054 6572     ....Could NOT re
   10458:	6461 6620 6f72 206d 6874 2065 694d 696e     ad from the Mini
   10468:	492d 204f 4441 2043 6e6f 4320 5241 4244     -IO ADC on CARDB
   10478:	493a 4332 5b20 6925 0d5d 000a 6f43 6c75     :I2C [%i]...Coul
   10488:	2064 4f4e 2054 7277 7469 2065 6f74 7420     d NOT write to t
   10498:	6568 4d20 6e69 2d69 4f49 4120 4344 6320     he Mini-IO ADC c
   104a8:	6e6f 7274 6c6f 656c 2072 6e6f 4320 5241     ontroller on CAR
   104b8:	4244 493a 4332 5b20 6925 0d5d 000a 0000     DB:I2C [%i].....
   104c8:	6f43 6c75 2064 4f4e 2054 7277 7469 2065     Could NOT write 
   104d8:	6f74 7420 6568 4d20 6e69 2d69 4f49 4520     to the Mini-IO E
   104e8:	5058 4e41 4544 2052 6e6f 4320 5241 4244     XPANDER on CARDB
   104f8:	493a 4332 5b20 6925 0d5d 000a 6f43 6c75     :I2C [%i]...Coul
   10508:	2064 4f4e 2054 6572 6461 6620 6f72 206d     d NOT read from 
   10518:	6874 2065 694d 696e 492d 204f 5845 4150     the Mini-IO EXPA
   10528:	444e 5245 6f20 206e 4143 4452 3a42 3249     NDER on CARDB:I2
   10538:	2043 255b 5d69 0a0d 0000 0000 0a0d 202e     C [%i]......... 
   10548:	202e 202e 202e 202e 202e 202e 202e 202e     . . . . . . . . 
   10558:	202e 202e 202e 202e 202e 202e 202e 202e     . . . . . . . . 
   10568:	202e 202e 202e 202e 202e 202e 202e 202e     . . . . . . . . 
   10578:	202e 202e 202e 202e 202e 202e 202e 202e     . . . . . . . . 
   10588:	202e 202e 0d2e 000a 433c 494c 4420 4245     . . ....<CLI DEB
   10598:	4755 203e 525b 4245 4f4f 5d54 6320 6d6f     UG> [REBOOT] com
   105a8:	616d 646e 0a0d 0000 202e 202e 202e 202e     mand..... . . . 
   105b8:	202e 202e 202e 202e 202e 202e 202e 202e     . . . . . . . . 
   105c8:	202e 202e 202e 202e 202e 202e 202e 202e     . . . . . . . . 
   105d8:	202e 202e 202e 202e 202e 202e 202e 202e     . . . . . . . . 
   105e8:	202e 202e 202e 202e 202e 202e 202e 0d2e     . . . . . . . ..
   105f8:	0d0a 000a 433c 494c 4420 4245 4755 203e     ....<CLI DEBUG> 
   10608:	435b 4e4f 4946 5547 4152 4954 4e4f 4420     [CONFIGURATION D
   10618:	4645 5541 544c 205d 6f63 6d6d 6e61 0d64     EFAULT] command.
   10628:	000a 0000 433c 494c 4420 4245 4755 203e     ....<CLI DEBUG> 
   10638:	495b 2044 4552 4553 5d54 6320 6d6f 616d     [ID RESET] comma
   10648:	646e 0a0d 0000 0000 6552 6f62 746f 6e69     nd......Rebootin
   10658:	2e67 2e2e 0a0d 0000 433c 494c 4420 4245     g.......<CLI DEB
   10668:	4755 203e 425b 5341 5345 4154 4954 4e4f     UG> [BASESTATION
   10678:	205d 6f63 6d6d 6e61 0d64 000a 433c 494c     ] command...<CLI
   10688:	4420 4245 4755 203e 505b 5341 2053 4854      DEBUG> [PASS TH
   10698:	4f52 4755 5d48 6320 6d6f 616d 646e 0a0d     ROUGH] command..
   106a8:	0000 0000 433c 494c 4420 4245 4755 203e     ....<CLI DEBUG> 
   106b8:	4c5b 5649 2045 4f42 5241 2044 5250 4e49     [LIVE BOARD PRIN
   106c8:	5d54 6320 6d6f 616d 646e 0a0d 0000 0000     T] command......
   106d8:	433c 494c 4420 4245 4755 203e 4449 2020     <CLI DEBUG> ID  
   106e8:	2020 2020 2020 2020 2020 2020 3d20 2520                  = %
   106f8:	0d75 000a 433c 494c 4420 4245 4755 203e     u...<CLI DEBUG> 
   10708:	614e 656d 2020 2020 2020 2020 2020 2020     Name            
   10718:	3d20 2520 0d73 000a 433c 494c 4420 4245      = %s...<CLI DEB
   10728:	4755 203e 6167 6e69 2041 2020 2020 2020     UG> gainA       
   10738:	2020 2020 3d20 2520 0d64 000a 433c 494c          = %d...<CLI
   10748:	4420 4245 4755 203e 6167 6e69 2042 2020      DEBUG> gainB   
   10758:	2020 2020 2020 2020 3d20 2520 0d64 000a              = %d...
   10768:	433c 494c 4420 4245 4755 203e 6f4d 6564     <CLI DEBUG> Mode
   10778:	2020 2020 2020 2020 2020 2020 3d20 2520                  = %
   10788:	0d73 000a 433c 494c 4420 4245 4755 203e     s...<CLI DEBUG> 
   10798:	6157 6574 3172 2020 2020 2020 2020 2020     Water1          
   107a8:	3d20 2520 0d64 000a 433c 494c 4420 4245      = %d...<CLI DEB
   107b8:	4755 203e 6157 6574 3272 2020 2020 2020     UG> Water2      
   107c8:	2020 2020 3d20 2520 0d64 000a 433c 494c          = %d...<CLI
   107d8:	4420 4245 4755 203e 5648 2020 2020 2020      DEBUG> HV      
   107e8:	2020 2020 2020 2020 3d20 2520 0d64 000a              = %d...
   107f8:	433c 494c 4420 4245 4755 203e 6554 706d     <CLI DEBUG> Temp
   10808:	2020 2020 2020 2020 2020 2020 3d20 2520                  = %
   10818:	0d64 000a 433c 494c 4420 4245 4755 203e     d...<CLI DEBUG> 
   10828:	7548 696d 6964 7974 2020 2020 2020 2020     Humidity        
   10838:	3d20 2520 0d64 000a 433c 494c 4420 4245      = %d...<CLI DEB
   10848:	4755 203e 6154 706d 7265 2020 2020 2020     UG> Tamper      
   10858:	2020 2020 3d20 2520 0d73 000a 433c 494c          = %s...<CLI
   10868:	4420 4245 4755 203e 6f50 7472 2031 2020      DEBUG> Port1   
   10878:	2020 2020 2020 2020 3d20 2520 0d73 000a              = %s...
   10888:	433c 494c 4420 4245 4755 203e 6f50 7472     <CLI DEBUG> Port
   10898:	2032 2020 2020 2020 2020 2020 3d20 2520     2            = %
   108a8:	0d73 000a 433c 494c 4420 4245 4755 203e     s...<CLI DEBUG> 
   108b8:	6f50 7472 2033 2020 2020 2020 2020 2020     Port3           
   108c8:	3d20 2520 0d73 000a 433c 494c 4420 4245      = %s...<CLI DEB
   108d8:	4755 203e 6143 6472 2041 2020 2020 2020     UG> CardA       
   108e8:	2020 2020 3d20 2520 0d73 000a 433c 494c          = %s...<CLI
   108f8:	4420 4245 4755 203e 6143 6472 2042 2020      DEBUG> CardB   
   10908:	2020 2020 2020 2020 3d20 2520 0d73 000a              = %s...
   10918:	433c 494c 4420 4245 4755 203e 6952 676e     <CLI DEBUG> Ring
   10928:	5420 706f 6c6f 676f 2079 2020 3d20 2520      Topology    = %
   10938:	0d73 000a 433c 494c 4420 4245 4755 203e     s...<CLI DEBUG> 
   10948:	6946 6d72 6177 6572 2020 2020 2020 2020     Firmware        
   10958:	3d20 2520 2e64 6425 0a0d 0000 433c 494c      = %d.%d....<CLI
   10968:	4420 4245 4755 203e 495b 2050 4353 4548      DEBUG> [IP SCHE
   10978:	454d 2f20 4e20 5445 4f57 4b52 205d 6f63     ME / NETWORK] co
   10988:	6d6d 6e61 0d64 000a 433c 494c 4420 4245     mmand...<CLI DEB
   10998:	4755 203e 5049 2020 2020 2020 2020 2020     UG> IP          
   109a8:	2020 2020 3d20 2520 2e64 6425 252e 2e64          = %d.%d.%d.
   109b8:	6425 0a0d 0000 0000 433c 494c 4420 4245     %d......<CLI DEB
   109c8:	4755 203e 654e 6d74 7361 206b 2020 2020     UG> Netmask     
   109d8:	2020 2020 3d20 2520 2e64 6425 252e 2e64          = %d.%d.%d.
   109e8:	6425 0a0d 0000 0000 433c 494c 4420 4245     %d......<CLI DEB
   109f8:	4755 203e 6147 6574 6177 2079 2020 2020     UG> Gateway     
   10a08:	2020 2020 3d20 2520 2e64 6425 252e 2e64          = %d.%d.%d.
   10a18:	6425 0a0d 0000 0000 433c 494c 4420 4245     %d......<CLI DEB
   10a28:	4755 203e 414d 2043 2020 2020 2020 2020     UG> MAC         
   10a38:	2020 2020 3d20 2520 3a78 7825 253a 3a78          = %x:%x:%x:
   10a48:	7825 253a 3a78 7825 0a0d 0000 433c 494c     %x:%x:%x....<CLI
   10a58:	4420 4245 4755 203e 535b 4550 4445 4d20      DEBUG> [SPEED M
   10a68:	4941 4c4e 4f4f 5d50 6320 6d6f 616d 646e     AINLOOP] command
   10a78:	0a0d 0000 433c 494c 4420 4245 4755 203e     ....<CLI DEBUG> 
   10a88:	614d 6e69 6c2d 6f6f 2f70 6153 706d 696c     Main-loop/Sampli
   10a98:	676e 3d20 2520 0d64 000a 0000 433c 494c     ng = %d.....<CLI
   10aa8:	4420 4245 4755 203e 6e55 6e6b 776f 206e      DEBUG> Unknown 
   10ab8:	6f63 6d6d 6e61 0d64 0d0a 480a 6c65 2070     command....Help 
   10ac8:	6353 6572 6e65 0d3a 0d0a 000a 2052 2020     Screen:.....R   
   10ad8:	2020 2020 2020 525b 4245 4f4f 5d54 6320           [REBOOT] c
   10ae8:	6d6f 616d 646e 0a0d 0000 0000 2044 2020     ommand......D   
   10af8:	2020 2020 2020 435b 4e4f 4946 5547 4152           [CONFIGURA
   10b08:	4954 4e4f 4420 4645 5541 544c 205d 6f63     TION DEFAULT] co
   10b18:	6d6d 6e61 0d64 000a 2058 2020 2020 2020     mmand...X       
   10b28:	2020 495b 2044 4552 4553 5d54 6320 6d6f       [ID RESET] com
   10b38:	616d 646e 0a0d 0000 2042 2020 2020 2020     mand....B       
   10b48:	2020 425b 5341 5345 4154 4954 4e4f 205d       [BASESTATION] 
   10b58:	6f63 6d6d 6e61 0d64 000a 0000 2050 2020     command.....P   
   10b68:	2020 2020 2020 505b 5341 2053 4854 4f52           [PASS THRO
   10b78:	4755 5d48 6320 6d6f 616d 646e 0a0d 0000     UGH] command....
   10b88:	204c 2020 2020 2020 2020 4c5b 5649 2045     L         [LIVE 
   10b98:	4f42 5241 2044 5250 4e49 5d54 6320 6d6f     BOARD PRINT] com
   10ba8:	616d 646e 0a0d 0000 2049 2020 2020 2020     mand....I       
   10bb8:	2020 495b 2050 4353 4548 454d 2f20 4e20       [IP SCHEME / N
   10bc8:	5445 4f57 4b52 205d 6f63 6d6d 6e61 0d64     ETWORK] command.
   10bd8:	000a 0000 2053 2020 2020 2020 2020 535b     ....S         [S
   10be8:	4550 4445 4d20 4941 4c4e 4f4f 5d50 6320     PEED MAINLOOP] c
   10bf8:	6d6f 616d 646e 0a0d 0a0d 0000 0a0a 0a0a     ommand..........
   10c08:	0a0a 0a0a 0a0a 0a0a 2d2d 2d2d 2d2d 2d2d     ........--------
   10c18:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
   10c28:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
   10c38:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
   10c48:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
   10c58:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
   10c68:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
   10c78:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 0d2d 000a     -------------...
   10c88:	754d 746c 5369 6e65 6573 5b20 5453 5241     MultiSense [STAR
   10c98:	5d54 0a0d 0000 0000 754d 746c 5369 6e65     T]......MultiSen
   10ca8:	6573 5b20 6e69 7469 6720 6f6c 6162 2d6c     se [init global-
   10cb8:	6176 6972 6261 656c 2073 6f64 656e 0d5d     variables done].
   10cc8:	000a 0000 754d 746c 5369 6e65 6573 5b20     ....MultiSense [
   10cd8:	6e69 7469 4920 4f2f 6420 6e6f 5d65 0a0d     init I/O done]..
   10ce8:	0000 0000 754d 746c 5369 6e65 6573 5b20     ....MultiSense [
   10cf8:	6e69 7469 5320 4950 2620 5520 4253 6420     init SPI & USB d
   10d08:	6e6f 5d65 0a0d 0000 754d 746c 5369 6e65     one]....MultiSen
   10d18:	6573 5b20 7445 6568 6e72 7465 5320 4957     se [Ethernet SWI
   10d28:	4354 2048 6572 6573 5d74 0a0d 0000 0000     TCH reset]......
   10d38:	754d 746c 5369 6e65 6573 5b20 6e69 7469     MultiSense [init
   10d48:	5320 4957 4354 2048 6f64 656e 0d5d 000a      SWITCH done]...
   10d58:	754d 746c 5369 6e65 6573 5b20 6e69 7469     MultiSense [init
   10d68:	5420 4d49 5245 6420 6e6f 5d65 0a0d 0000      TIMER done]....
   10d78:	754d 746c 5369 6e65 6573 5b20 6e69 7469     MultiSense [init
   10d88:	4120 4344 6420 6e6f 5d65 0a0d 0000 0000      ADC done]......
   10d98:	754d 746c 5369 6e65 6573 5b20 6e69 7469     MultiSense [init
   10da8:	4320 5952 5450 204f 6f64 656e 0d5d 000a      CRYPTO done]...
   10db8:	754d 746c 5369 6e65 6573 5b20 6e69 7469     MultiSense [init
   10dc8:	7520 5049 6420 6e6f 5d65 0a0d 0000 0000      uIP done]......
   10dd8:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
   10de8:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
   10df8:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
   10e08:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
   10e18:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
   10e28:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 0a0d 0000     ************....
   10e38:	202a 4854 2045 554d 544c 2d49 4553 534e     * THE MULTI-SENS
   10e48:	2045 4544 4956 4543 5b20 4449 205d 4148     E DEVICE [ID] HA
   10e58:	2053 4f4e 2054 4542 4e45 5320 5445 202e     S NOT BEEN SET. 
   10e68:	4854 5349 4420 4645 4349 2045 4957 4c4c     THIS DEFICE WILL
   10e78:	4e20 544f 4620 4e55 5443 4f49 204e 524f      NOT FUNCTION OR
   10e88:	5220 4e55 4120 2053 2020 2a20 0a0d 0000      RUN AS    *....
   10e98:	202a 4f4e 4d52 4c41 5520 544e 4c49 5420     * NORMAL UNTIL T
   10ea8:	4548 5b20 4449 205d 554e 424d 5245 4820     HE [ID] NUMBER H
   10eb8:	5341 4220 4545 204e 4e45 4554 4552 2044     AS BEEN ENTERED 
   10ec8:	5942 5420 4948 2053 4554 4d52 4e49 4c41     BY THIS TERMINAL
   10ed8:	4620 4341 4c49 5449 2e59 2020 2020 2020      FACILITY.      
   10ee8:	2020 2020 2020 2020 2020 2a20 0a0d 0000                *....
   10ef8:	202a 202d 202d 202d 202d 202d 202d 202d     * - - - - - - - 
   10f08:	202d 202d 202d 202d 202d 202d 202d 202d     - - - - - - - - 
   10f18:	202d 202d 202d 202d 202d 202d 202d 202d     - - - - - - - - 
   10f28:	202d 202d 202d 202d 202d 202d 202d 202d     - - - - - - - - 
   10f38:	202d 202d 202d 202d 202d 202d 202d 202d     - - - - - - - - 
   10f48:	202d 202d 202d 202d 202d 2a20 0a0d 0000     - - - - -  *....
   10f58:	202a 4c50 4145 4553 4520 544e 5245 5420     * PLEASE ENTER T
   10f68:	4548 3320 2d32 4942 2054 4544 4956 4543     HE 32-BIT DEVICE
   10f78:	5b20 4449 205d 4542 4f4c 3a57 2020 2020      [ID] BELOW:    
   10f88:	2020 2020 2020 2020 2020 2020 2020 2020                     
   10f98:	2020 2020 2020 2020 2020 2020 2020 2020                     
   10fa8:	2020 2020 2020 2020 2020 2a20 0a0d 0000                *....
   10fb8:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
   10fc8:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
   10fd8:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
   10fe8:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
   10ff8:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
   11008:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 0a0d 0a0d     ************....
   11018:	0000 0000 754d 746c 5369 6e65 6573 5b20     ....MultiSense [
   11028:	6f62 746f 752d 2070 2026 6e69 7469 6320     boot-up & init c
   11038:	6d6f 6c70 7465 6465 0d5d 000a 202d 202d     ompleted]...- - 
   11048:	202d 202d 202d 202d 202d 202d 202d 202d     - - - - - - - - 
   11058:	202d 202d 202d 202d 202d 202d 202d 202d     - - - - - - - - 
   11068:	202d 202d 202d 202d 202d 202d 202d 202d     - - - - - - - - 
   11078:	202d 202d 202d 202d 202d 202d 202d 202d     - - - - - - - - 
   11088:	202d 202d 202d 202d 202d 202d 202d 202d     - - - - - - - - 
   11098:	202d 202d 202d 202d 202d 202d 202d 202d     - - - - - - - - 
   110a8:	202d 202d 202d 202d 202d 202d 202d 202d     - - - - - - - - 
   110b8:	0d2d 000a 0a0d 6e45 6574 2072 656e 2077     -.....Enter new 
   110c8:	495b 5d44 6e20 776f 0d3a 000a 4449 6520     [ID] now:...ID e
   110d8:	746e 7265 6465 203a 7325 0a0d 0000 0000     ntered: %s......
   110e8:	0a0d 7349 7420 6968 2073 6f63 7272 6365     ..Is this correc
   110f8:	2074 2f59 3f4e 0a0d 0000 0000 7525 0000     t Y/N?......%u..
   11108:	2e2e 702f 7265 6973 7473 6e65 5f74 7473     ../persistent_st
   11118:	726f 6761 2f65 766e 695f 746e 7265 616e     orage/nv_interna
   11128:	5f6c 6c66 7361 5f68 6c75 7274 2e61 0063     l_flash_ultra.c.
   11138:	5453 524f 4741 0045 2e2e 702f 7265 6973     STORAGE.../persi
   11148:	7473 6e65 5f74 7473 726f 6761 2f65 766e     stent_storage/nv
   11158:	735f 6f74 6172 6567 632e 0000 5445 4548     _storage.c..ETHE
   11168:	4e52 5445 203a 6553 2074 7361 6120 6220     RNET: Set as a b
   11178:	7361 2d65 7473 7461 6f69 206e 6f74 6d20     ase-station to m
   11188:	6e61 6761 2065 7445 6568 6e72 7465 7420     anage Ethernet t
   11198:	706f 6c6f 676f 2e79 2e2e 0a0d 0000 0000     opology.........
   111a8:	5245 4f52 2052 6573 7474 6e69 2067 6874     ERROR setting th
   111b8:	2065 5453 5441 4349 4d20 4341 7420 6261     e STATIC MAC tab
   111c8:	656c 7720 7469 2068 5042 5544 6620 726f     le with BPDU for
   111d8:	4220 7361 2d65 7473 7461 6f69 2e6e 2e2e      Base-station...
   111e8:	0a0d 0000 5445 4548 4e52 5445 203a 6f6e     ....ETHERNET: no
   111f8:	6d72 6c61 6e20 6e6f 2d65 616d 616e 6567     rmal none-manage
   11208:	2064 6170 7373 742d 7268 756f 6867 6e20     d pass-through n
   11218:	646f 2e65 2e2e 0a0d 0000 0000 5245 4f52     ode.........ERRO
   11228:	2052 6573 7474 6e69 2067 6874 2065 5453     R setting the ST
   11238:	5441 4349 4d20 4341 7420 6261 656c 7720     ATIC MAC table w
   11248:	7469 2068 5042 5544 6620 726f 7020 7361     ith BPDU for pas
   11258:	2d73 6874 6f72 6775 2068 6f6e 6564 2e2e     s-through node..
   11268:	0d2e 000a 5445 4548 4e52 5445 203a 6f43     ....ETHERNET: Co
   11278:	706d 656c 6574 2064 4952 474e 6d20 6e61     mpleted RING man
   11288:	6761 6d65 6e65 2074 6e69 7469 2e2e 0d2e     agement init....
   11298:	000a 0000 5445 4548 4e52 5445 203a 6553     ....ETHERNET: Se
   112a8:	746e 6620 7269 7473 4220 4450 2e55 2e2e     nt first BPDU...
   112b8:	0a0d 0000 5445 4548 4e52 5445 203a 2128     ....ETHERNET: (!
   112c8:	7473 726f 5f6d 7473 7461 2965 4520 5252     storm_state) ERR
   112d8:	524f 0a0d 0000 0000 5445 4548 4e52 5445     OR......ETHERNET
   112e8:	203a 2128 6972 676e 7262 6165 296b 4520     : (!ringbreak) E
   112f8:	5252 524f 0a0d 0000 5445 4548 4e52 5445     RROR....ETHERNET
   11308:	203a 745b 7275 696e 676e 4520 6874 7265     : [turning Ether
   11318:	656e 2074 423c 203e 4e4f 2d20 5220 4e49     net <B> ON - RIN
   11328:	2047 5242 4b4f 4e45 2e5d 2e2e 0a0d 0000     G BROKEN].......
   11338:	5445 4548 4e52 5445 203a 745b 7275 696e     ETHERNET: [turni
   11348:	676e 4520 6874 7265 656e 2074 423c 203e     ng Ethernet <B> 
   11358:	464f 2046 202d 4952 474e 4820 4145 454c     OFF - RING HEALE
   11368:	5d44 2e2e 0d2e 000a 5445 4548 4e52 5445     D]......ETHERNET
   11378:	203a 735b 6f74 6d72 7320 6275 6973 6564     : [storm subside
   11388:	5d64 2e2e 0d2e 000a 5445 4548 4e52 5445     d]......ETHERNET
   11398:	203a 7574 6e72 6e69 2067 7445 6568 6e72     : turning Ethern
   113a8:	7465 3c20 3e42 4f20 4646 6220 6365 7561     et <B> OFF becau
   113b8:	6573 6f20 2066 7473 726f 206d 202d 4952     se of storm - RI
   113c8:	474e 4820 4145 494c 474e 5020 534f 4953     NG HEALING POSSI
   113d8:	4942 494c 5954 2e5d 2e2e 0a0d 0000 0000     BILITY].........
   113e8:	6975 5f70 7069 6863 736b 6d75 203a 7573     uip_ipchksum: su
   113f8:	206d 7830 3025 7834 000a 0000 7069 203a     m 0x%04x....ip: 
   11408:	6e69 6176 696c 2064 6576 7372 6f69 206e     invalid version 
   11418:	726f 6820 6165 6564 2072 656c 676e 6874     or header length
   11428:	002e 0000 7069 203a 6170 6b63 7465 7320     ....ip: packet s
   11438:	6f68 7472 7265 7420 6168 206e 6572 6f70     horter than repo
   11448:	7472 6465 6920 206e 5049 6820 6165 6564     rted in IP heade
   11458:	2e72 0000 7069 203a 7266 6761 656d 746e     r...ip: fragment
   11468:	6420 6f72 7070 6465 002e 0000 7069 203a      dropped....ip: 
   11478:	6162 2064 6863 6365 736b 6d75 002e 0000     bad checksum....
   11488:	7069 203a 656e 7469 6568 2072 6374 2070     ip: neither tcp 
   11498:	6f6e 2072 6369 706d 002e 0000 6369 706d     nor icmp....icmp
   114a8:	203a 6f6e 2074 6369 706d 6520 6863 2e6f     : not icmp echo.
   114b8:	0000 0000 6475 3a70 6220 6461 6320 6568     ....udp: bad che
   114c8:	6b63 7573 2e6d 0000 6475 3a70 6e20 206f     cksum...udp: no 
   114d8:	616d 6374 6968 676e 6320 6e6f 656e 7463     matching connect
   114e8:	6f69 206e 6f66 6e75 0064 0000 6374 3a70     ion found...tcp:
   114f8:	6220 6461 6320 6568 6b63 7573 2e6d 0000      bad checksum...
   11508:	6374 3a70 6720 746f 7220 7365 7465 202c     tcp: got reset, 
   11518:	6261 726f 6974 676e 6320 6e6f 656e 7463     aborting connect
   11528:	6f69 2e6e 0000 0000 6975 2070 7069 735f     ion.....uip ip_s
   11538:	6e65 5f64 6f6e 656c 3a6e 6320 6b68 6365     end_nolen: chkec
   11548:	6d75 3020 2578 3430 0a78 0000 6553 646e     um 0x%04x...Send
   11558:	6e69 2067 6170 6b63 7465 7720 7469 2068     ing packet with 
   11568:	656c 676e 6874 2520 2064 2528 2964 000a     length %d (%d)..
   11578:	6374 3a70 6620 756f 646e 6e20 206f 6e75     tcp: found no un
   11588:	7375 6465 6320 6e6f 656e 7463 6f69 736e     used connections
   11598:	002e 0000                                   ....

0001159c <broadcast_ethaddr>:
   1159c:	ffff ffff ffff 0000 2e2e 752f 6273 642f     ........../usb/d
   115ac:	7665 6369 2f65 7375 6462 2e63 0063 0000     evice/usbdc.c...
   115bc:	754d 746c 5369 6e65 6573 6120 7070 696c     MultiSense appli
   115cc:	6163 6974 6e6f 615f 7070 6163 6c6c 2928     cation_appcall()
   115dc:	0a0d 0000 754d 746c 5369 6e65 6573 6120     ....MultiSense a
   115ec:	7070 696c 6163 6974 6e6f 695f 696e 2874     pplication_init(
   115fc:	0d29 000a 754d 746c 5369 6e65 6573 7420     )...MultiSense t
   1160c:	7063 7069 6f5f 7475 7570 2874 0d29 000a     cpip_output()...
   1161c:	754d 746c 5369 6e65 6573 7520 5049 6c20     MultiSense uIP l
   1162c:	676f 2d20 3e2d 5b20 7325 0d5d 000a 0000     og --> [%s].....

0001163c <__sf_fake_stderr>:
	...

0001165c <__sf_fake_stdin>:
	...

0001167c <__sf_fake_stdout>:
	...
   1169c:	6c68 004c 16be 0001 16c1 0001 16c4 0001     hlL.............
   116ac:	2d41 6146 662d 3938 3130 3332 3534 3736     A-Fa-f8901234567
   116bc:	005d 2d2b 3000 0030 5878 4300 5000 534f     ].+-.00.xX.C.POS
   116cc:	5849 2e00 0000                                   IX...

000116d1 <_ctype_>:
   116d1:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   116e1:	2020 2020 2020 2020 2020 2020 2020 2020                     
   116f1:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   11701:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   11711:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   11721:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   11731:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   11741:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   11751:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000117d4 <_init>:
   117d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   117d6:	bf00      	nop
   117d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   117da:	bc08      	pop	{r3}
   117dc:	469e      	mov	lr, r3
   117de:	4770      	bx	lr

000117e0 <__init_array_start>:
   117e0:	00000289 	.word	0x00000289

000117e4 <_fini>:
   117e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   117e6:	bf00      	nop
   117e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   117ea:	bc08      	pop	{r3}
   117ec:	469e      	mov	lr, r3
   117ee:	4770      	bx	lr

000117f0 <__fini_array_start>:
   117f0:	00000265 	.word	0x00000265
